1
00:00:00,000 --> 00:00:12,800
Why am I giving this talk, right? I don't represent Bridge Crew. I just think, having

2
00:00:12,800 --> 00:00:19,640
come from data, ML, Python being great, that I started working more in infra, DevOps, thinking

3
00:00:19,640 --> 00:00:24,000
about security. And I thought that was probably going to be missing from this conference,

4
00:00:24,000 --> 00:00:32,800
so easy enough to stop, you know, down the block and give a quick talk. Cool. Hey, what's

5
00:00:32,800 --> 00:00:36,840
infrastructure as code? Hopefully some of you guys are deploying in cloud and thinking

6
00:00:36,840 --> 00:00:41,800
about deploying stuff. Infrastructure as code is, let me define, you know, via Terraform

7
00:00:41,800 --> 00:00:45,640
as the standard, but also CloudFormation, Deployment Manager, et cetera. This is from

8
00:00:45,640 --> 00:00:50,040
the title of the talk. What is static code analysis? Hopefully some of you guys are doing

9
00:00:50,040 --> 00:00:56,600
that, right? Like, let's look at, let's have something that takes a look at my code and

10
00:00:56,600 --> 00:01:04,840
verifies that it's reasonably secure. Generally that's from, like, package management, dependencies

11
00:01:04,840 --> 00:01:12,400
or whatnot. But there's, with infrastructure as code, there's ways to define policies via

12
00:01:13,400 --> 00:01:20,360
something like policies code. GitHub repository here. This is open source and usable. There's

13
00:01:20,360 --> 00:01:27,480
a website, checkoff.io. You can pip3 install it. Great. It's Python. Brew if you like your

14
00:01:27,480 --> 00:01:33,760
Mac. Found it pretty weird. It's checkoff by Bridge Crew. Bridge Crew is brought to you

15
00:01:33,760 --> 00:01:39,320
by Prisma Cloud. Prisma Cloud is brought to you by Palo Alto Networks. So, you know, trace

16
00:01:39,320 --> 00:01:47,160
that chain, whatever. Okay. Why is checkoff cool? I think there's even a talk following this on

17
00:01:47,160 --> 00:01:53,320
another form of that, right? I don't intend to say, like, please use checkoff, right? But, like,

18
00:01:53,320 --> 00:01:58,760
think about using something like this if you're going to deploy infrastructure. Infrastructure

19
00:01:58,760 --> 00:02:04,920
code is a great idea. DevSecOps is a great buzzword. Policies code, I've already said it.

20
00:02:05,880 --> 00:02:13,240
Ultimately, if you're running CI-CD pipelines for deployment, define your infrastructure as code

21
00:02:13,240 --> 00:02:19,400
and put some policies in place from a security perspective to ensure that's the case. Checkoff's

22
00:02:19,400 --> 00:02:25,880
great in that it works not only with the major cloud providers but also Kubernetes and more.

23
00:02:25,880 --> 00:02:35,960
Okay. So, how does it work, right? So, realistically, we pip installed or brew installed

24
00:02:35,960 --> 00:02:46,200
our bit here. We have, you know, then have access to a checkoff command, right? Here's two examples.

25
00:02:46,200 --> 00:02:54,920
Realistically, this is about Terraform, right? Where I, and also I skipped, I was going to work

26
00:02:54,920 --> 00:03:03,720
through a demo, but this is easier to share this laptop, so these are slides. Skip whatever things

27
00:03:03,720 --> 00:03:09,400
if you don't want. It's pretty flexible. I guess this is what I'm going for here. You can skip

28
00:03:09,400 --> 00:03:15,720
them via the commands or in the Terraform code that you've written. Feel free to annotate things

29
00:03:15,720 --> 00:03:23,240
and you can, you know, forego this bit. Kind of the powerful thing and what I wanted to get across.

30
00:03:23,240 --> 00:03:27,640
Hopefully, everybody, you know, you guys are developers. Hopefully, you're using Git, but like

31
00:03:27,640 --> 00:03:33,320
use pre-commit hooks for a whole lot of stuff. That works here. I generally don't trust that

32
00:03:33,320 --> 00:03:42,120
people actually use their pre-commit hooks, so also, you know, consider after a pre-commit hook

33
00:03:42,120 --> 00:03:47,560
something on, you know, like a pre-receive or whatever else before things actually make their

34
00:03:47,560 --> 00:03:54,360
way into the shared Git. Here's some references for, you know, those that aren't Git fans are

35
00:03:54,360 --> 00:04:00,120
on board yet. I think that's actually about that, and then, you know, here's a few other,

36
00:04:01,160 --> 00:04:05,080
you know, advertisements, right? Check out Hacktoberfest is going on, a way to contribute

37
00:04:05,080 --> 00:04:11,880
to a bunch of open source projects that need some stuff, and I'm a huge fan of Beam,

38
00:04:12,280 --> 00:04:21,080
a Python-based, but also a multi-language way to write data pipelines, and Flight is,

39
00:04:22,600 --> 00:04:26,600
you just heard about orchestration like Dagster, pretty equivalent, although you can also

40
00:04:27,320 --> 00:04:34,600
use languages other than Python, which, you know, Python's why we're here. Yeah, here, just to

41
00:04:35,560 --> 00:04:43,640
show there's like Python code under the hood once you call, check off, and I think the thing I was

42
00:04:43,640 --> 00:04:51,000
even going to point out here is the actual test, right, from the, or the,

43
00:04:53,000 --> 00:04:58,520
encouraging everybody to please write tests for their code, and even from this project itself,

44
00:04:58,520 --> 00:05:03,080
the testing code is two of these slides versus the actual code that does the thing is one of

45
00:05:03,080 --> 00:05:15,240
these slides, so like, you know, it's okay if tests are longer than your code. That's all I got.

