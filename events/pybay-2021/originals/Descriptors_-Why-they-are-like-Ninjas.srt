1
00:00:00,000 --> 00:00:09,000
For those of you, can you guess what a descriptor is?

2
00:00:09,000 --> 00:00:12,160
Is it A, with a show of hands, a general purpose protocol

3
00:00:12,160 --> 00:00:16,000
to customize attribute lookup, storage, and deletion?

4
00:00:16,000 --> 00:00:16,720
OK.

5
00:00:16,720 --> 00:00:19,080
B, a Python class which defines any of the methods

6
00:00:19,080 --> 00:00:21,360
get, set, or delete?

7
00:00:21,360 --> 00:00:24,040
C, everywhere and nowhere?

8
00:00:24,040 --> 00:00:26,800
Or D, all of the above?

9
00:00:26,800 --> 00:00:27,280
All right, OK.

10
00:00:27,280 --> 00:00:30,360
So good job, all of the above.

11
00:00:30,360 --> 00:00:31,880
No one saw that coming.

12
00:00:31,880 --> 00:00:34,480
So from the Python glossary official definition

13
00:00:34,480 --> 00:00:36,960
of what a descriptor is, it is any object

14
00:00:36,960 --> 00:00:40,280
which defines the methods get, set, or delete.

15
00:00:40,280 --> 00:00:42,720
When a class attribute is a descriptor,

16
00:00:42,720 --> 00:00:45,760
its special binding behavior is triggered upon attribute lookup.

17
00:00:45,760 --> 00:00:47,920
Normally, blah, blah, blah, I could go on,

18
00:00:47,920 --> 00:00:50,960
but it'll be easier to show with examples.

19
00:00:50,960 --> 00:00:54,160
So one of the most common things you can do with a descriptor

20
00:00:54,160 --> 00:00:57,260
is to have some kind of side effect on attribute access.

21
00:00:57,260 --> 00:00:59,620
So you could have logging or debug logging

22
00:00:59,620 --> 00:01:01,980
when an attribute is accessed or set.

23
00:01:01,980 --> 00:01:04,400
You could have validation to make sure that inputs only

24
00:01:04,400 --> 00:01:06,340
match certain parameters.

25
00:01:06,340 --> 00:01:08,700
You could have special behavior, like you

26
00:01:08,700 --> 00:01:12,980
could forbid deleting an attribute by raising an error.

27
00:01:12,980 --> 00:01:14,900
You could check permissions.

28
00:01:14,900 --> 00:01:16,940
In this case, we'll have a simple side effect,

29
00:01:16,940 --> 00:01:19,780
which is just it will print a little cow emoji that

30
00:01:19,780 --> 00:01:21,940
will throw whatever the current value of the descriptor

31
00:01:21,940 --> 00:01:25,380
should be, and set will print another cow emoji receiving

32
00:01:25,380 --> 00:01:25,900
that.

33
00:01:25,900 --> 00:01:28,860
So in practice, you use a descriptor

34
00:01:28,860 --> 00:01:31,180
by setting it to be the attribute on a class,

35
00:01:31,180 --> 00:01:32,660
and you create an instance of it.

36
00:01:32,660 --> 00:01:36,180
And then when you either call that attribute on the class

37
00:01:36,180 --> 00:01:39,180
or instances of it, it will call that descriptor's get

38
00:01:39,180 --> 00:01:42,500
method and whatever side effects and return

39
00:01:42,500 --> 00:01:44,220
the return value of that get method.

40
00:01:44,220 --> 00:01:45,940
And same for set or delete.

41
00:01:45,940 --> 00:01:48,740
So you might wonder, wait, why is host.ninja,

42
00:01:48,740 --> 00:01:50,620
why is the return value of that a cake emoji?

43
00:01:50,620 --> 00:01:52,100
I thought it was a descriptor.

44
00:01:52,100 --> 00:01:54,100
So this is the magic of descriptors

45
00:01:54,100 --> 00:01:55,820
is that the descriptor is actually there,

46
00:01:55,820 --> 00:01:57,020
but it's hiding from you.

47
00:01:57,020 --> 00:01:58,860
So if you try to access the descriptor,

48
00:01:58,860 --> 00:02:00,860
you only get the return value of its get method.

49
00:02:00,860 --> 00:02:02,940
So it can be there hiding in plain sight,

50
00:02:02,940 --> 00:02:04,300
and you would have no idea.

51
00:02:04,300 --> 00:02:06,180
The only way to actually find the descriptor

52
00:02:06,180 --> 00:02:08,220
if you want to introspect it at runtime

53
00:02:08,220 --> 00:02:10,340
or figure out what the descriptor is doing

54
00:02:10,340 --> 00:02:13,020
or which descriptor it is, is to look in the class's

55
00:02:13,020 --> 00:02:13,660
dictionary.

56
00:02:13,660 --> 00:02:16,380
It won't even be in the instance's dictionary.

57
00:02:16,380 --> 00:02:19,580
And this works by lookup, which I had to cut out explaining

58
00:02:19,580 --> 00:02:21,180
that because I did not have enough time,

59
00:02:21,180 --> 00:02:23,780
so ask me about it later, how the lookup chain works.

60
00:02:23,780 --> 00:02:28,180
So another example is you can implement in ORM.

61
00:02:28,180 --> 00:02:29,700
So this is a more generic version.

62
00:02:29,700 --> 00:02:31,340
This is how the Django ORM works,

63
00:02:31,340 --> 00:02:33,900
which got me down this rabbit hole in the first place,

64
00:02:33,900 --> 00:02:35,900
trying to figure out what was happening there.

65
00:02:35,900 --> 00:02:38,940
But you can have your fields in the ORM

66
00:02:38,940 --> 00:02:43,820
be descriptors themselves, which get and set lookup or update

67
00:02:43,820 --> 00:02:46,700
the value in a database so that you can create model classes

68
00:02:46,700 --> 00:02:48,220
and then fields on those models.

69
00:02:48,220 --> 00:02:50,540
And when you access those fields by dereferencing

70
00:02:50,540 --> 00:02:52,620
those attributes, it will fetch the corresponding value

71
00:02:52,620 --> 00:02:54,700
in the database and do the right thing.

72
00:02:54,700 --> 00:02:56,700
So now you might ask, why don't I just

73
00:02:56,700 --> 00:03:00,340
use something like at property if I just want to replace

74
00:03:00,340 --> 00:03:03,300
an attribute with a function?

75
00:03:03,300 --> 00:03:06,380
Well, how do you think at property is implemented?

76
00:03:06,380 --> 00:03:08,220
It's implemented using descriptors.

77
00:03:08,220 --> 00:03:11,340
So it's not just property, cache property, obviously.

78
00:03:11,340 --> 00:03:13,340
Static method and class method are both implemented

79
00:03:13,340 --> 00:03:14,700
by descriptors.

80
00:03:14,700 --> 00:03:16,220
Super uses descriptors.

81
00:03:16,220 --> 00:03:18,420
Slots uses descriptors, if you ever use that.

82
00:03:18,420 --> 00:03:21,100
And even functions in Python are actually

83
00:03:21,100 --> 00:03:22,500
descriptors themselves.

84
00:03:23,300 --> 00:03:25,900
Functions are actually non-data descriptors

85
00:03:25,900 --> 00:03:29,180
that return bound methods using dotted lookup from an instance.

86
00:03:29,180 --> 00:03:32,180
So this is what happens when you define

87
00:03:32,180 --> 00:03:34,540
a function named foo in Python.

88
00:03:34,540 --> 00:03:37,420
This is a Python approximation of,

89
00:03:37,420 --> 00:03:40,180
or like, pseudocode of what happens in cPython,

90
00:03:40,180 --> 00:03:42,460
the interpreter.

91
00:03:42,460 --> 00:03:44,020
So when you instantiate a function,

92
00:03:44,020 --> 00:03:48,180
it is a class or a functor that has a get method that,

93
00:03:48,180 --> 00:03:50,820
if it is not called on an instance of anything,

94
00:03:50,860 --> 00:03:52,540
if it's not set as an attribute or anything,

95
00:03:52,540 --> 00:03:53,460
it just returns itself.

96
00:03:53,460 --> 00:03:56,260
But if it is, it returns the method type.

97
00:03:56,260 --> 00:03:57,580
And it takes that object.

98
00:03:57,580 --> 00:04:00,660
So this object in the get method signature

99
00:04:00,660 --> 00:04:02,700
is the instance that it was called on.

100
00:04:02,700 --> 00:04:05,900
And then the object type is whatever class it was called on.

101
00:04:05,900 --> 00:04:10,140
So if you're referencing the attribute on a class itself,

102
00:04:10,140 --> 00:04:12,260
then object will be none.

103
00:04:12,260 --> 00:04:15,980
And it will take that object and bind it into method type.

104
00:04:15,980 --> 00:04:19,980
And then the method type is, when you have that call,

105
00:04:20,020 --> 00:04:22,900
will take that object as that received as a parameter

106
00:04:22,900 --> 00:04:25,460
and then pass it as the first argument into that function.

107
00:04:25,460 --> 00:04:27,460
So this is how you get self into these functions.

108
00:04:27,460 --> 00:04:29,100
It's by using descriptors.

109
00:04:29,100 --> 00:04:31,180
So in summary, here are some of the use cases

110
00:04:31,180 --> 00:04:32,780
that we've discussed.

111
00:04:32,780 --> 00:04:34,700
And that is why descriptors are like ninjas.

112
00:04:34,700 --> 00:04:36,500
It's because they're everywhere and nowhere.

113
00:04:36,500 --> 00:04:37,660
They're hiding in plain sight.

114
00:04:37,660 --> 00:04:39,100
And I bet many of you didn't even know

115
00:04:39,100 --> 00:04:41,220
what they were before this talk.

116
00:04:41,220 --> 00:04:42,060
If you're still curious,

117
00:04:42,060 --> 00:04:44,740
the descriptor how-to guide on the official Python docs

118
00:04:44,740 --> 00:04:46,180
is a great overview.

119
00:04:46,180 --> 00:04:47,500
And I also like to thank you.

120
00:04:47,500 --> 00:04:49,540
If you have questions, grab me after this.

121
00:04:49,580 --> 00:04:52,460
Email me at boy.bet.io or madelineboyd at Twitter.

122
00:04:52,460 --> 00:04:54,180
I guarantee you, you will not spell that correctly.

123
00:04:54,180 --> 00:04:55,180
It's a very weird spelling.

124
00:04:55,180 --> 00:04:56,220
Thank my mom.

125
00:04:56,220 --> 00:04:58,140
And also try out bet.io.

126
00:04:58,140 --> 00:04:59,340
Adam just gave a quick overview.

127
00:04:59,340 --> 00:05:00,500
It's an instant shareable database.

128
00:05:00,500 --> 00:05:01,500
We're also hiring.

129
00:05:01,500 --> 00:05:02,380
That's cool too.

130
00:05:02,380 --> 00:05:03,220
Thank you very much.

