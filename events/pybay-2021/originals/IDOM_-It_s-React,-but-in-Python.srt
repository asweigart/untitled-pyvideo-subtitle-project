1
00:00:00,000 --> 00:00:11,540
My name is Ryan Morced. I'm the creator of IDOM and I'm going to be talking about how

2
00:00:11,540 --> 00:00:19,020
IDOM is like React but in Python. IDOM is a new framework for building full stack interactive

3
00:00:19,020 --> 00:00:24,180
web applications in pure Python. And I think it can be best compared to other solutions

4
00:00:24,180 --> 00:00:30,220
like Plotly Dash, Streamlit, PyWebIO. Basically, if you're trying to build web application

5
00:00:30,220 --> 00:00:34,820
but you don't want to learn JavaScript, just like it was mentioned a little bit earlier.

6
00:00:34,820 --> 00:00:40,620
So before I talk about IDOM, I want to talk a little bit of history and give some insight

7
00:00:40,620 --> 00:00:44,740
into why I created IDOM in the first place. Like, why does it need to exist? I'm going

8
00:00:44,740 --> 00:00:50,020
to start with that by talking about the IPython notebook. So the IPython notebook is a browser-based

9
00:00:50,540 --> 00:00:57,300
computing environment for Python that came to popularity around 2010 to 2012. At a time

10
00:00:57,300 --> 00:01:03,020
where Python was relegated to being a backend technology that really just rendered HTML

11
00:01:03,020 --> 00:01:08,660
templates. Well, in years prior, that might have been okay. There was a growing need for

12
00:01:08,660 --> 00:01:13,740
a browser-based interactivity. And at that time, Python really didn't have a good answer

13
00:01:13,740 --> 00:01:20,740
for that. Through the notebook though, with its rich graphical output, Python developed

14
00:01:23,100 --> 00:01:29,540
an answer in the notebook. And the notebook has really remained popular today in the form

15
00:01:29,540 --> 00:01:35,460
of JupyterLab and the rest of the Jovian ecosystem that has succeeded it. And part of the reason

16
00:01:35,460 --> 00:01:41,540
that Jupyter and what was previously the IPython notebook has remained popular is this technology

17
00:01:41,540 --> 00:01:48,540
called IPyWidgets, which is a related project that came about around 2012. And it leveraged

18
00:01:48,740 --> 00:01:53,220
the IPython notebook's APIs to give Python some bi-directional communication with the

19
00:01:53,220 --> 00:01:59,940
browser. And thus, it brought interactivity to Python beyond what you could just get from

20
00:01:59,940 --> 00:02:04,860
a standard REPL or even just the graphical outputs that you were originally getting in

21
00:02:04,860 --> 00:02:10,980
the notebook. So from this example here, we can see there's a basic slider. And as you

22
00:02:10,980 --> 00:02:16,380
move it back and forth, it's triggering some Python code that in turn prints out, I guess,

23
00:02:16,380 --> 00:02:21,860
the square of the number that's on the slider. So I also want to emphasize the fact that

24
00:02:21,860 --> 00:02:26,180
IPyWidgets was especially important not in just growing the popularity of the IPython

25
00:02:26,180 --> 00:02:30,540
notebook, but also in growing the popularity of Python among scientists because it allowed

26
00:02:30,540 --> 00:02:36,180
for the creation of interactive computing tools by non-engineers. And scientists no

27
00:02:36,180 --> 00:02:40,780
longer had to learn JavaScript in order to make user interfaces for themselves or others

28
00:02:40,780 --> 00:02:47,740
that would make their work more understandable and accessible. Since the IPython notebook,

29
00:02:47,740 --> 00:02:53,780
we've grown spoiled for choice in this kind of domain. You have Bokeh, Panel, Potlydash,

30
00:02:53,780 --> 00:02:59,180
Streamlet. And even IPyWidgets has kind of become a UI framework in and of itself through

31
00:02:59,180 --> 00:03:05,620
tools like Voila that strip away the whole notebook interface and just show you the outputs

32
00:03:05,620 --> 00:03:11,060
of your code. But before we get too excited about this progress, I want to take a step

33
00:03:11,060 --> 00:03:15,420
back and talk about what some of these frameworks could do better because many suffer from a

34
00:03:15,420 --> 00:03:21,420
similar set of problems. And the way I want to do that is by looking at what has happened

35
00:03:21,420 --> 00:03:27,180
in the world of JavaScript UI frameworks as of late. And this is where the React part

36
00:03:27,180 --> 00:03:33,460
of the title comes in. And just for some context for myself, how many of you guys have at least

37
00:03:33,460 --> 00:03:40,460
heard of React? Okay. That's a lot. Even at a Python conference, that's pretty impressive,

38
00:03:40,460 --> 00:03:45,340
right? So, I think it goes to show like how important React is that a bunch of just Python

39
00:03:45,340 --> 00:03:52,500
developers know what this JavaScript technology is. And if you haven't heard of React, don't

40
00:03:52,500 --> 00:03:55,180
worry about that. Part of the point of this talk is that I don't want you to actually

41
00:03:55,180 --> 00:04:02,620
have to learn JavaScript and React. And basically, what I want to focus on with React is what

42
00:04:02,620 --> 00:04:10,940
it got right about building UIs and how that's informed IDOM as a technology. So, basically,

43
00:04:10,940 --> 00:04:15,580
in this world of JavaScript UI frameworks, around 2015 to 2017, there was this paradigm

44
00:04:15,580 --> 00:04:21,540
shift where these new declarative JavaScript frameworks like React and Vue started gaining

45
00:04:21,540 --> 00:04:29,780
popularity over old imperative ones like AngularJS. And just looking at this graph here, this

46
00:04:29,780 --> 00:04:37,420
trend is rather decisive and React isn't going anywhere anytime soon. So, to understand

47
00:04:37,420 --> 00:04:43,540
why this is, I want to discuss those two terms I just mentioned, imperative versus declarative.

48
00:04:43,540 --> 00:04:48,380
And at a high level, what these two terms mean is they refer to programming paradigms.

49
00:04:48,380 --> 00:04:52,300
And depending on what context you're working in, what paradigm you're using could just

50
00:04:52,300 --> 00:04:56,500
be a stylistic choice when you might not even be fully aware that you're making or it could

51
00:04:56,500 --> 00:05:01,940
be something that's kind of restricted for you by the framework you're using or the language

52
00:05:01,940 --> 00:05:07,220
that you're using. So, what's the difference between these two? Well, what it means to

53
00:05:07,220 --> 00:05:12,700
operate within an imperative paradigm, if you're developing a web application, is that

54
00:05:12,700 --> 00:05:17,260
you as the developer are responsible for defining the states that your app evolves through,

55
00:05:17,260 --> 00:05:22,340
but you're also responsible for dealing with all of the details of the transitions between

56
00:05:23,340 --> 00:05:27,620
those states. How do you get from A to B? So, you kind of have, you're forced to have

57
00:05:27,620 --> 00:05:32,500
a lot of fine-grained control over all of what's happening in your application. And

58
00:05:32,500 --> 00:05:37,580
the declarative paradigm though, on the other hand, you're only responsible for defining

59
00:05:37,580 --> 00:05:42,980
the states that your application evolves through, but you're not necessarily responsible for

60
00:05:42,980 --> 00:05:47,500
dealing with all of the details, the transitions. That is handled for you by the framework or

61
00:05:47,500 --> 00:05:54,020
the language that you're using. So, why are these declarative JavaScript frameworks gaining

62
00:05:54,020 --> 00:05:58,460
market share over the imperative ones? Well, you may have noticed from the description

63
00:05:58,460 --> 00:06:03,700
I just gave that in the declarative paradigm, there's just kind of one less thing for developers

64
00:06:03,700 --> 00:06:08,500
to worry about. Now, this comes at the cost of some control, but usually we aren't concerned

65
00:06:08,500 --> 00:06:13,740
with that because in the process of implementing all of these transitions, we can introduce

66
00:06:13,740 --> 00:06:19,900
bugs and it's just a lot of work. So, given all this context about what's happened in

67
00:06:19,900 --> 00:06:25,860
the JavaScript world, we should look back at this kind of ecosystem of Python UI frameworks

68
00:06:25,860 --> 00:06:32,620
that's developed and ask whether or not they've kind of learned this similar lesson that building

69
00:06:32,620 --> 00:06:39,620
UIs using declarative patterns makes, is easier and easier to do correctly. And unfortunately,

70
00:06:40,620 --> 00:06:46,620
no, not really. Almost all of these in one form or another suffer from the problems of

71
00:06:46,620 --> 00:06:52,020
imperative design patterns. Plotly here, it might be one exception, but it's limited in

72
00:06:52,020 --> 00:06:57,820
some other ways that I'll touch on later. And so, this is where IDOM comes in. Unlike

73
00:06:57,820 --> 00:07:03,300
its peers, IDOM takes heavy inspiration from the React UI framework and thus has many of

74
00:07:03,300 --> 00:07:08,940
its same declarative virtues. Beyond that though, IDOM as a UI framework for Python

75
00:07:08,940 --> 00:07:14,220
is unusually powerful because it puts nearly all the same capabilities of React into the

76
00:07:14,220 --> 00:07:19,860
hands of Python developers, which mind you, React is a JavaScript framework. And having

77
00:07:19,860 --> 00:07:24,420
near parity with the features of a JavaScript framework is kind of unheard of. I personally

78
00:07:24,420 --> 00:07:31,180
haven't heard of anything that does this. So, what can you make with IDOM? Well, let's

79
00:07:31,180 --> 00:07:37,020
just go here and look at some of these. So, in IDOM, you can make some kind of basic interactive

80
00:07:37,020 --> 00:07:41,500
dashboards. And the interesting thing about this is I implemented this in pure Python.

81
00:07:41,500 --> 00:07:45,700
I didn't even have to write a JavaScript binding to this victory charting library to get this

82
00:07:45,700 --> 00:07:51,180
to work. And this is a little bit slow because of all the things going on right now, but

83
00:07:51,180 --> 00:07:57,620
yeah, you can see this is working live. Here's another example of me integrating with a JavaScript

84
00:07:57,620 --> 00:08:04,500
library without having to write any JavaScript binding. This is the pigeon mapping library.

85
00:08:04,500 --> 00:08:11,780
And I can also use some basic HTML components, just like this little audio bit here. And

86
00:08:11,780 --> 00:08:15,220
you can see I get some event information back from this as well, like what is the current

87
00:08:15,220 --> 00:08:20,740
time in the audio. And the other cool thing is I have all the same awesome bits of Python.

88
00:08:20,740 --> 00:08:25,540
Like, I have this Matplotlib plot here. Like, sometimes you really can't. Matplotlib is

89
00:08:25,540 --> 00:08:31,180
extremely fully featured and sometimes you can't beat it. And this last example here,

90
00:08:31,180 --> 00:08:37,180
I think is, while it's not a particularly practical example, I think it does demonstrate

91
00:08:37,180 --> 00:08:42,900
like the complexity that you can get with IDOM. I'd challenge anybody to try and implement

92
00:08:42,900 --> 00:08:51,420
Snake using Streamlet or something like that. I think it'd be a great challenge. So, this

93
00:08:51,420 --> 00:09:00,100
is all pretty cool. Oops. So, what does it actually look like to create something with

94
00:09:00,100 --> 00:09:05,940
IDOM? So, I'm going to try and do this live here. It's a little bit low. So, maybe I can

95
00:09:05,940 --> 00:09:15,940
type like this. So, sorry about this. So, I'm going to import IDOM. Oops. This has happened

96
00:09:16,860 --> 00:09:22,460
every time I've tried to do this. Okay. Cool. So, I'm going to import IDOM. That's the first

97
00:09:22,460 --> 00:09:25,940
thing I'm going to do. And the very next thing I'm going to do is I'm going to define what's

98
00:09:25,940 --> 00:09:32,500
called a component. And a component is basically just an independent and kind of isolated portion

99
00:09:32,500 --> 00:09:36,660
of your UI that you can reuse over and over again. It allows you to just think in the

100
00:09:36,660 --> 00:09:42,440
context of that component without having to worry about the rest of your user interface.

101
00:09:42,440 --> 00:09:48,840
And you create these components using functions. Now, just to get started here, I'm just going

102
00:09:48,840 --> 00:09:58,600
to create a little button that just says, hello. And then I'm going to run it. Now,

103
00:09:58,600 --> 00:10:02,640
in this demo, this is happening live. But if you were to actually do this for real,

104
00:10:02,640 --> 00:10:06,280
you'd have some little message in your terminal saying that there's a server that was started.

105
00:10:06,280 --> 00:10:12,280
You navigate to the URL. And then, then you'd see this little button show up. So, the next

106
00:10:12,280 --> 00:10:16,680
kind of expansion that I want to do on this is I want to make this button track the number

107
00:10:16,680 --> 00:10:21,280
of times that we click it. And this is for people who are familiar with React, this is

108
00:10:21,280 --> 00:10:25,880
going to look incredibly similar to anything that you would normally do in React. But for

109
00:10:25,880 --> 00:10:30,880
people who aren't, it might look a little bit weird. And I don't really have time to

110
00:10:30,880 --> 00:10:36,600
go into all the details on this, but I would encourage you to investigate, not just say

111
00:10:36,600 --> 00:10:41,400
this looks weird, but investigate it a little bit because like I tried to demonstrate earlier,

112
00:10:41,400 --> 00:10:46,000
these kind of declarative patterns have really won out in the JavaScript world. So, we shouldn't

113
00:10:46,000 --> 00:10:52,840
just dismiss them here. So, the way that we're going to do this is we're going to use what's

114
00:10:52,840 --> 00:11:07,560
called a hook. Oops, this is again. And basically, what's happening here, oh, goodness, that's

115
00:11:07,560 --> 00:11:29,720
not happened before. Okay. Hopefully, I don't run into that same bug.

116
00:11:29,720 --> 00:11:59,680
Okay. Well, I don't think we're going to get to look at this. So basically, yes,

117
00:11:59,680 --> 00:12:08,360
this is crashing the whole thing. Shoot. Classic. Okay. So, we're going to skip over this. But

118
00:12:08,360 --> 00:12:15,680
basically, what idon does is it uses a pattern called hooks that is adapted from React. And

119
00:12:15,680 --> 00:12:23,520
the way it works is that you get back this kind of count and you get this set count callback

120
00:12:23,520 --> 00:12:30,240
back. And when you call the set count callback, that function that I was defining before will

121
00:12:30,240 --> 00:12:36,600
actually get rerun. And instead of modifying an existing button, you actually return a new button

122
00:12:36,600 --> 00:12:42,120
that includes the new count. So, it's kind of a different pattern. And if we were to look at this

123
00:12:42,120 --> 00:12:48,520
code in idon, it would look almost identical to this React code here. It's not super important

124
00:12:48,520 --> 00:12:54,000
that you understand this JavaScript code, but there would be kind of this similar pattern of

125
00:12:54,000 --> 00:12:59,640
having a function. You'd have this hook and you'd return this button that has an event handler

126
00:12:59,640 --> 00:13:09,640
attached to it. Okay. Hopefully, we're back on track now. So, how does this work and why

127
00:13:09,640 --> 00:13:15,680
haven't some of these other UI frameworks done the same thing? Well, the main reason they

128
00:13:15,720 --> 00:13:25,160
haven't is it comes down to their general architecture. Items peers, I think PlotlyDash is a

129
00:13:25,160 --> 00:13:31,640
particularly informative example here. Go down the route of synchronizing models between the

130
00:13:31,640 --> 00:13:36,800
server and the client. And so, basically, what that means is the model is representing some

131
00:13:36,800 --> 00:13:44,360
underlying state of the application and the server changes the model and it sends it over to the

132
00:13:44,360 --> 00:13:49,520
client and the client turns that model into the actual view that you end up seeing. The problem

133
00:13:49,520 --> 00:13:56,160
with designing things in this way is responsibilities of displaying something to the user are divided

134
00:13:56,160 --> 00:14:01,560
between the server and the client. The server is responsible for updating the model, the model

135
00:14:01,560 --> 00:14:06,600
state, and the client is responsible for turning that model into the view. And since Python

136
00:14:06,600 --> 00:14:12,320
developers are stuck on the server, you basically lose out on having control over how that model

137
00:14:12,320 --> 00:14:20,280
turns into the view that you actually see. IDOM, on the other hand, goes this route of synchronizing

138
00:14:20,280 --> 00:14:25,880
a representation of the view and that representation is called VDOM. I'm not going to get into the

139
00:14:25,880 --> 00:14:29,960
details of what this VDOM is because that could be an entirely separate talk in and of itself.

140
00:14:29,960 --> 00:14:38,640
But as a result of this, it gives Python developers control over how the model, the underlying model

141
00:14:38,640 --> 00:14:45,280
of their application is being converted into the view. And the specific implementation here shows

142
00:14:45,280 --> 00:14:50,080
how these kind of composable components that I mentioned earlier get put together. They create

143
00:14:50,080 --> 00:14:56,120
this representation of the view and what the layout does is it looks at the last time that

144
00:14:56,120 --> 00:15:00,920
the view is rendered and it looks at this time, checks for the differences and it only sends the

145
00:15:01,760 --> 00:15:17,200
client. So, given this, that's how IDOM gets so much control over what's happening. So,

146
00:15:17,200 --> 00:15:22,240
the last thing that I want to touch on here that is enabled by this kind of pattern as

147
00:15:22,240 --> 00:15:29,760
well is ecosystem independence. And actually, I'm realizing this is maybe another good way

148
00:15:29,800 --> 00:15:38,760
to show you that example I was trying to before. So, what this means is that a lot of these other

149
00:15:38,760 --> 00:15:43,800
frameworks kind of lock you into their way of doing things. And if you were to write a JavaScript

150
00:15:43,800 --> 00:15:48,920
component or even on the Python side, if you were to try and take that to somewhere else,

151
00:15:48,920 --> 00:15:53,040
like, I don't know, if you wrote something in Streamlit and then you wanted to take it to a

152
00:15:53,040 --> 00:15:58,600
Jupyter Notebook or vice versa, that's simply not possible. But with IDOM, you can take the

153
00:15:58,600 --> 00:16:04,720
exact same code that you might use in a standalone application and just run it, say, in a Jupyter

154
00:16:04,720 --> 00:16:13,320
Notebook. And you can see all these same examples from before just kind of show up. The other

155
00:16:13,320 --> 00:16:20,240
especially cool thing about doing things in this way is that integration with JavaScript is

156
00:16:20,240 --> 00:16:27,440
incredibly simple. I was talking about how I didn't have to write any JavaScript bindings

157
00:16:27,440 --> 00:16:33,680
to get some of these examples to work, like this plot here. And that's because I'm just loading

158
00:16:33,680 --> 00:16:39,400
them right from a CDN. And here's an example of that. Here's a material UI button, if anybody's

159
00:16:39,400 --> 00:16:49,200
familiar with that kind of UI style thing. I'm just loading it directly from a CDN and very little

160
00:16:49,200 --> 00:16:57,520
Python code to make that happen. And yeah. So, see, that's kind of the end of the content. So,

161
00:16:57,520 --> 00:17:03,600
given that my demo didn't really work before, hopefully, I should have an opportunity here to

162
00:17:03,600 --> 00:17:12,240
go through and show you what I wanted to do before. So, I've been trying to do this demo

163
00:17:12,240 --> 00:17:30,160
little component. And I was trying to get this count, set count. Okay. And we now have this

164
00:17:30,160 --> 00:17:42,920
hello text to start out. Okay. This is working. Okay. So, basically what's going on here is... So,

165
00:17:42,920 --> 00:17:46,840
I was trying to explain before is this concept of hooks. And basically what's going on with this

166
00:17:46,840 --> 00:17:54,120
use state thing is it returns some count, which defaults to zero. And I also get this callback,

167
00:17:54,120 --> 00:18:01,080
which allows me to update the count later. And when I call this, it's not going to modify an

168
00:18:01,080 --> 00:18:05,640
existing button, like I was mentioning before. It's actually going to rerun this demo function.

169
00:18:05,640 --> 00:18:12,360
But when I get to this line, instead of the count being zero, it will be the new count that I just

170
00:18:12,360 --> 00:18:17,760
set. So, let's take a look at what that actually looks like in practice. So, first thing I'm going

171
00:18:17,760 --> 00:18:26,320
to do is I'm going to update this button, the text of this button to be clicked count times. And the

172
00:18:26,320 --> 00:18:32,120
next bit I'm going to do, I suppose display that. So, next thing I'm going to do here is I'm going

173
00:18:32,120 --> 00:18:37,200
to actually bind a callback to this button that responds when I click it and will increment the

174
00:18:37,200 --> 00:18:44,600
count. And I do that through this kind of special name on click. And I'm going to assign a lambda to

175
00:18:44,600 --> 00:18:50,480
it, which gets an event as an argument. And then the action of this callback is that I'm going to

176
00:18:50,480 --> 00:19:04,200
increment the count. Count plus one. And there we go. Oops. Don't need that. There we go. So, now

177
00:19:04,200 --> 00:19:12,160
when I click this, it'll increment the count. Okay. So, I was a little out of order, but yeah,

178
00:19:12,160 --> 00:19:18,160
that's the end of my talk about IDOM and how it's like React, but in Python.

