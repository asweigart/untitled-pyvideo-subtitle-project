1
00:00:00,000 --> 00:00:11,600
Happy Thanksgiving weekend. I know it's kind of weird having Thanksgiving on in

2
00:00:11,600 --> 00:00:16,120
October but I am from Canada. I'm actually came and flew down from Toronto

3
00:00:16,120 --> 00:00:21,960
originally just because I really wanted to show you about a lot of diagrams of

4
00:00:21,960 --> 00:00:26,440
arrows and boxes and talking about architecture because it's something

5
00:00:26,440 --> 00:00:33,960
that we don't talk about too much. Yes we should and basically as systems grow

6
00:00:33,960 --> 00:00:38,920
bigger they get complicated. So at the very start of the project you know we're

7
00:00:38,920 --> 00:00:43,880
super happy high-fiving yes we've just made our first sale we raised our first

8
00:00:43,880 --> 00:00:47,440
round of funding or maybe these are the people before you joined where they're

9
00:00:47,440 --> 00:00:52,560
super super happy and then all of a sudden god damn it I need help I can't

10
00:00:52,640 --> 00:00:56,280
manage this code base everything is going wrong I can't make heads or tails

11
00:00:56,280 --> 00:01:03,680
of it we need help and basically these are some slides from Jason Gorman and as

12
00:01:03,680 --> 00:01:10,200
a project continues on productivity just plummets in a lot of projects and guess

13
00:01:10,200 --> 00:01:15,040
what the cost skyrockets in payroll and this is very unsustainable this kills

14
00:01:15,040 --> 00:01:19,800
companies this is something that you need to keep the check of and it's all

15
00:01:19,800 --> 00:01:25,200
about developer velocity we want to maintain developer velocity over time so

16
00:01:25,200 --> 00:01:30,760
what happens well too much knowledge is required to make simple changes our

17
00:01:30,760 --> 00:01:34,880
simple system is no longer simple you have many people working on many parts

18
00:01:34,880 --> 00:01:39,400
of the code base basically stepping on each other's toes I'm sure everybody in

19
00:01:39,400 --> 00:01:45,480
this room has been in this situation at least once in their lifetime so what can

20
00:01:45,480 --> 00:01:51,720
we do well it's all about building high cohesive systems that are loosely

21
00:01:51,720 --> 00:01:54,960
coupled so the goal of software architecture is really to minimize the

22
00:01:54,960 --> 00:01:59,080
human resources required to build and maintain a required system so what we

23
00:01:59,080 --> 00:02:02,440
really want is we want to build a bunch of Lego blocks so then we can build

24
00:02:02,440 --> 00:02:08,720
amazing structures like the CN tower so first let's talk about like what our app

25
00:02:08,720 --> 00:02:14,800
might be today so many people use whether it's Django flask rails you name

26
00:02:14,840 --> 00:02:18,760
it a lot of MVC frameworks I know some of them are gonna be called MVC some of

27
00:02:18,760 --> 00:02:23,040
their multi-view presenter I'm just gonna call them MVC just to make life

28
00:02:23,040 --> 00:02:27,120
easier for myself and if you think about you got a client the top layer you have

29
00:02:27,120 --> 00:02:30,600
like that controller view layer and then you have the model layer usually some

30
00:02:30,600 --> 00:02:34,240
kind of active record pattern which is your arm and then you talk to the

31
00:02:34,240 --> 00:02:38,760
database and as things grow you should be like all right where the hell do I

32
00:02:38,760 --> 00:02:42,680
put all my logic so you really have like two choices that people talk about you

33
00:02:42,680 --> 00:02:48,640
got fat controllers or fat models and unfortunately neither of them really

34
00:02:48,640 --> 00:02:54,040
really work so someone comes along says you know what you need a service layer

35
00:02:54,040 --> 00:02:58,400
so let's put all of our codes somewhere in the middle and if you think about it

36
00:02:58,400 --> 00:03:04,040
you have the controller service layer model layer you basically recreated an

37
00:03:04,040 --> 00:03:07,240
enterprise pattern that's been around for 30 40 years called layered

38
00:03:07,240 --> 00:03:13,080
architecture and specifically you're most likely following open layered

39
00:03:13,080 --> 00:03:16,600
architecture where each layer you can actually access there's no protection

40
00:03:16,600 --> 00:03:22,240
between them and that kills your project I don't know how many times I've seen

41
00:03:22,240 --> 00:03:26,080
code where it goes through some kind of business layer but then the controller

42
00:03:26,080 --> 00:03:29,920
just decides to talk to the model directly and save to the database and

43
00:03:29,920 --> 00:03:34,320
get and basically bypass all the security rules what we probably would

44
00:03:34,320 --> 00:03:40,280
rather do is the closed layered architecture it's that same MVC but

45
00:03:40,280 --> 00:03:46,800
this time we basically only depend on the layer below us and you cannot go and

46
00:03:46,800 --> 00:03:52,480
jump layers so we again want a very very small presentation tier we don't want a

47
00:03:52,480 --> 00:03:57,600
fat presentation tier no one likes to get fat we want all of our logic to be

48
00:03:57,600 --> 00:04:01,520
right in that middle and then we want the data layer to be pretty simple

49
00:04:01,520 --> 00:04:06,120
because we're not really programming databases in enterprise web apps what

50
00:04:06,120 --> 00:04:09,240
we're doing is we're programming behavior and we actually don't want to

51
00:04:09,240 --> 00:04:15,640
be tied to our databases but we still have a problem and that is that

52
00:04:15,640 --> 00:04:20,760
everything still depends on the data layer we really haven't really changed

53
00:04:20,760 --> 00:04:25,400
much we just move the code around and now we still have to figure out okay how

54
00:04:25,400 --> 00:04:28,440
can we get rid of the dependence on the data layer which is really an

55
00:04:28,440 --> 00:04:35,160
infrastructure concern so let's do some thinking and is there a concept that you

56
00:04:35,160 --> 00:04:38,960
learn very very early on in some software theory that could actually help

57
00:04:38,960 --> 00:04:46,240
us with this problem and as we write code we we learn to write modular code

58
00:04:46,240 --> 00:04:51,200
because it's easier to read easier to maintain and we really will have like

59
00:04:51,200 --> 00:04:55,280
smaller units of work and but we still have the dependency problem instead of

60
00:04:55,280 --> 00:05:00,480
having one huge thousand line function now we have a bunch of classes all over

61
00:05:00,480 --> 00:05:06,360
the place they all still depend on each other so we can have either implicit

62
00:05:06,360 --> 00:05:09,920
software dependencies or we could have explicit software dependencies and

63
00:05:09,920 --> 00:05:13,360
implicit software dependencies that in the code you just directly create the

64
00:05:13,360 --> 00:05:17,160
model or the relationship that you want an explicit one is that you actually

65
00:05:17,160 --> 00:05:21,160
pass it in and I'm going to name that motor less dependency injection where

66
00:05:21,160 --> 00:05:25,160
the two most common ways of doing an explicit dependency is either through

67
00:05:25,160 --> 00:05:29,120
the constructor when you construct the object or through a setter sometimes you

68
00:05:29,120 --> 00:05:31,600
have to use the center because the framework that you're using just won't

69
00:05:31,600 --> 00:05:36,880
allow you to have access to that constructor and this allows us to at

70
00:05:36,880 --> 00:05:43,080
runtime specify what our dependency is so I could have a booking manager system

71
00:05:43,080 --> 00:05:47,640
so my example here is basically a clone of an Airbnb booking system rental

72
00:05:47,640 --> 00:05:51,280
property system where the booking manager has a method called process

73
00:05:51,280 --> 00:05:56,880
payment and that's directly hooked up to a stripe implementation but that's

74
00:05:56,880 --> 00:06:00,120
still not really what we want because we're still dependent on stripe we're

75
00:06:00,120 --> 00:06:04,720
still dependent on our database models and this is where polymorphism comes in

76
00:06:04,720 --> 00:06:10,800
so polymorphism is the whole if it walks like a duck if it talks like a duck if

77
00:06:10,800 --> 00:06:16,900
it quacks like a duck it's probably a duck so we can use polymorphism and what

78
00:06:17,340 --> 00:06:21,340
we can do is we can actually invert the dependency so we actually can move the

79
00:06:21,340 --> 00:06:27,220
dependency management in this diagram to the left by introducing an abstraction

80
00:06:27,220 --> 00:06:31,300
and what we want to do is we want to program to these very very stable

81
00:06:31,300 --> 00:06:34,860
abstractions and what a stable abstraction really means is that

82
00:06:34,860 --> 00:06:37,900
something that does not change frequently so what we want to do is we

83
00:06:37,900 --> 00:06:41,300
want to isolate the code that we're going to be working on over and over and over

84
00:06:41,300 --> 00:06:44,820
again maybe we're changing an algorithm to be more performant but that does not

85
00:06:44,820 --> 00:06:49,100
change the behavior of our system and that's really what we want to focus on

86
00:06:49,100 --> 00:06:53,140
so here in the diagram you can see that we actually created an interface that

87
00:06:53,140 --> 00:06:56,900
has one method called process payment and then we have multiple we have like a

88
00:06:56,900 --> 00:07:00,900
stripe implementation we could have a PayPal implementation or even a fake a

89
00:07:00,900 --> 00:07:04,620
testing fake implementation that we can run our tests faster where we can

90
00:07:04,620 --> 00:07:08,620
actually run end-to-end unit tests that are collaborative where we don't actually

91
00:07:08,620 --> 00:07:15,580
have to depend on a web call so here's some examples of actual Python code

92
00:07:15,580 --> 00:07:18,980
because it is a Python conference I thought some Python code would be nice

93
00:07:18,980 --> 00:07:24,780
yeah so I believe in type checking I also believe that typing really does

94
00:07:24,780 --> 00:07:30,220
solve a lot of problems I do know that you can do implicit typing which is

95
00:07:30,220 --> 00:07:33,780
basically again the whole reason why Python is duct typed in the first place

96
00:07:33,780 --> 00:07:37,540
but I find that you can't trust that especially as your application grows

97
00:07:37,540 --> 00:07:40,780
very well because then you end up the only way you can trust is by doing a

98
00:07:40,780 --> 00:07:43,940
lot of testing and sometimes it's just easier to do this part of your CI

99
00:07:43,940 --> 00:07:49,620
process so on the left hand side I have structural typing so here we're doing

100
00:07:49,620 --> 00:07:54,740
typing through using a mixin or through inheritance and then on the right hand

101
00:07:54,740 --> 00:07:58,860
side there's a way of doing kind of nominal typing especially in MyPy and

102
00:07:58,860 --> 00:08:02,060
that's more of you still get the type checking and still get duck typing where

103
00:08:02,060 --> 00:08:05,260
you don't have to do that inheritance chain I personally think inheritance is

104
00:08:05,300 --> 00:08:10,020
the devil I'd prefer composition but you do have a little bit of a runtime cost

105
00:08:10,020 --> 00:08:14,540
and these are just two ways that you can actually create this interface this

106
00:08:14,540 --> 00:08:17,620
abstract interface and the implementation that goes with it to

107
00:08:17,620 --> 00:08:25,780
break that dependency so let's go back now so we know at the code level we can

108
00:08:25,780 --> 00:08:29,420
invert our dependencies and we can program to standard stable interfaces

109
00:08:29,420 --> 00:08:35,100
could we do that with the layers and yes we can we take our original on the left

110
00:08:35,100 --> 00:08:39,020
layered architecture and we can actually invert the dependency of the data layer

111
00:08:39,020 --> 00:08:44,660
up towards the business and domain layer and I don't know about you but this has

112
00:08:44,660 --> 00:08:49,100
a name this has many names actually so we have hexagonal architecture some

113
00:08:49,100 --> 00:08:53,520
people call it the onion architecture clean architecture or ports and

114
00:08:53,520 --> 00:08:58,980
adapters architecture and the whole idea is is that instead of pointing down

115
00:08:58,980 --> 00:09:03,420
towards your data layer data flow still goes that way we actually point inwards

116
00:09:03,540 --> 00:09:07,740
and we have a very simple rule while we're developing is that the domain

117
00:09:07,740 --> 00:09:12,060
layer or your business layer is nothing but plain old Python objects plain old

118
00:09:12,060 --> 00:09:18,340
popos and we all the dependencies have to go inwards in the inner code cannot

119
00:09:18,340 --> 00:09:22,620
depend on anything on the outside and this is basically as you grow your

120
00:09:22,620 --> 00:09:26,360
application you have to again change a lot of infrastructure code your

121
00:09:26,360 --> 00:09:29,460
infrastructure code actually changes usually more often than your domain

122
00:09:29,460 --> 00:09:32,480
code and this way you don't have to rewrite your application every time you

123
00:09:32,480 --> 00:09:37,160
change what database schema you're using here's just another diagram as I

124
00:09:37,160 --> 00:09:41,720
mentioned clean architecture this one's more of a circle and you can see that

125
00:09:41,720 --> 00:09:45,800
on the left-hand side I it's a slice of a cone where the very middle is your

126
00:09:45,800 --> 00:09:49,120
abstract general rarely change that's where your business rules are again

127
00:09:49,120 --> 00:09:53,420
plain old code nothing special and then the very outside is the part that really

128
00:09:53,420 --> 00:09:58,080
changes all the time and this is how you can isolate those changes and again not

129
00:09:58,080 --> 00:10:03,680
have to rip all your hair out while you're building a system so let's talk

130
00:10:03,680 --> 00:10:06,760
about a little bit of those layers internally so we have the entity layer

131
00:10:06,760 --> 00:10:11,680
and this is really where your main models live and in this is where like

132
00:10:11,680 --> 00:10:15,080
domain driven design can really really help I'm trying to keep a really DDD

133
00:10:15,080 --> 00:10:21,200
light for this talk because I could be bore you forever for DDD and in terms

134
00:10:21,200 --> 00:10:25,280
of DDD you basically have inside of this layer you have also entity models I know

135
00:10:25,280 --> 00:10:28,920
it's confusing because it's the entity layer but you have entity models value

136
00:10:28,920 --> 00:10:32,000
objects domain services factories and aggregate routes I'm gonna go through

137
00:10:32,000 --> 00:10:37,360
them like a lightning talk so first we have value objects wouldn't it be nice

138
00:10:37,360 --> 00:10:42,840
if we just use very simple data types to actually do attributes on our object so

139
00:10:42,840 --> 00:10:46,960
we know how we use strings we know how we use integers so when we change an

140
00:10:46,960 --> 00:10:51,280
integer on an object we don't like mutate it we just throw the old one out

141
00:10:51,280 --> 00:10:54,920
and put a new one in couldn't we do that with data objects that are more

142
00:10:54,920 --> 00:11:00,400
complex that provide meaning so I have here value objects so value objects have

143
00:11:00,400 --> 00:11:06,160
no identity they do not exist on their own and the best way to use them is by

144
00:11:06,160 --> 00:11:10,640
creating immutable objects data classes that have frozen keywords awesome

145
00:11:10,640 --> 00:11:13,840
because you have a runtime check to make sure that you can't modify this in

146
00:11:13,840 --> 00:11:17,640
Python so this is just a simple way of describing a class and you're getting I

147
00:11:17,640 --> 00:11:22,600
got sorry not a class an address but the address is now treated as one variable

148
00:11:22,600 --> 00:11:28,960
that you change in a get-go then we have entity objects and an entity object has

149
00:11:28,960 --> 00:11:34,480
two special properties one it has a lifespan so it changes over time and two

150
00:11:34,480 --> 00:11:40,520
it has uniqueness within your system so in this example I have a rental property

151
00:11:40,520 --> 00:11:43,480
and a rental property can change its availabilities it can be booked it can

152
00:11:43,480 --> 00:11:49,000
be unbooked and we use value objects to also help describe entities and entities

153
00:11:49,000 --> 00:11:55,960
can actually have an object graph to other entities but when you're designing

154
00:11:55,960 --> 00:12:01,200
your entities what you really want to avoid is anemic domain models every

155
00:12:01,200 --> 00:12:04,360
single person including myself especially when I'm prototyping I am not

156
00:12:04,360 --> 00:12:07,720
going to do a domain model at the very beginning I'm just going to do very much

157
00:12:07,720 --> 00:12:11,480
a transactional script where I'm gonna have a data object and then I have a

158
00:12:11,480 --> 00:12:15,320
bunch of code that changes that data object which if the app is very very

159
00:12:15,320 --> 00:12:21,840
simple that is the right approach but over time that model you spread all your

160
00:12:21,840 --> 00:12:26,080
logic everywhere around I'm gonna show an example in a second and you just you

161
00:12:26,080 --> 00:12:30,800
bleed you cry and you just sweat and your life is a living hell and it just

162
00:12:30,800 --> 00:12:35,480
sometimes worth creating a rich model from the very beginning so here's an

163
00:12:35,480 --> 00:12:39,760
anemic model I tried to keep it really simple hopefully it's not too simple so

164
00:12:39,760 --> 00:12:43,960
we have a renter object and the renter object is just like a data class but it

165
00:12:43,960 --> 00:12:49,040
mutates and you can see that all the logic is in some other method like

166
00:12:49,040 --> 00:12:52,880
you're fetching the renter and you're changing the address from a web request

167
00:12:52,880 --> 00:12:57,040
and what ends up happening is that every single client of your code

168
00:12:57,040 --> 00:13:01,800
re-implements logic and now you have and in places where you have to figure out

169
00:13:01,800 --> 00:13:05,920
how the code works and it's even worse where sometimes people push this logic

170
00:13:05,920 --> 00:13:10,000
to the client which could be a JavaScript app now your JavaScript app

171
00:13:10,000 --> 00:13:13,060
has to figure out what parts of a renter are you changing are you changing their

172
00:13:13,060 --> 00:13:16,340
contact information are you changing their billing information because the

173
00:13:16,340 --> 00:13:20,980
model itself does not know and unfortunately anemic models come a lot

174
00:13:20,980 --> 00:13:24,700
when you're using arms because we don't actually put methods on them to actually

175
00:13:24,700 --> 00:13:29,460
help them manage themselves so we're kind of breaking that classic OOP theory

176
00:13:29,460 --> 00:13:35,220
of you have methods you have command methods that change internal state so

177
00:13:35,220 --> 00:13:37,620
this is a rich domain model the only difference here is we actually have a

178
00:13:37,620 --> 00:13:41,620
method called update address and this is where the object can change itself and

179
00:13:41,660 --> 00:13:46,500
all the logic lives in one spot even better you can use invariants and variants

180
00:13:46,500 --> 00:13:50,420
are just a way of protecting yourself where if a programmer tries to use your

181
00:13:50,420 --> 00:13:54,140
object you will throw an exception your code should never get here in production

182
00:13:54,140 --> 00:13:57,940
this is more of a something to catch an error from the very beginning or you can

183
00:13:57,940 --> 00:14:03,500
use descriptors and domain services are just code with no state that helps your

184
00:14:03,500 --> 00:14:07,220
domain model now the biggest thing I want to take away is the aggregate route

185
00:14:07,220 --> 00:14:10,420
that is your unit of work and that's what you fetch from the database and

186
00:14:11,100 --> 00:14:13,140
that's what you're going to actually save in the database so that's what you

187
00:14:13,140 --> 00:14:18,300
hydrate in this example we have two entities we have a property owner or

188
00:14:18,300 --> 00:14:20,940
rental property and these are also aggregate routes because this is where

189
00:14:20,940 --> 00:14:23,860
our operations are going to be and these are going to be the resources in our

190
00:14:23,860 --> 00:14:28,500
restful API if we go that route but what about the database how do we keep that

191
00:14:28,500 --> 00:14:33,020
simple well the repository patterns again a way of abstracting data where

192
00:14:33,020 --> 00:14:37,060
we can use Elasticsearch Postgres Mongo and the aggregate route is perfect for

193
00:14:37,060 --> 00:14:41,820
NoSQL because usually it can be a document so here's just a way of

194
00:14:41,820 --> 00:14:45,660
defining it you just have simple CRUD methods and you implement them depending

195
00:14:45,660 --> 00:14:50,260
on what your back end is and this is just an example of how you can call from

196
00:14:50,260 --> 00:14:54,860
a Django app an API view to create that web tier facade to actually call into

197
00:14:54,860 --> 00:14:59,660
your code another best practice is using data transfer objects between layers

198
00:14:59,660 --> 00:15:02,900
because you don't want to leak abstractions do you do this all the time

199
00:15:02,940 --> 00:15:07,780
not really it's really if you need to if you want to protect your layers and this

200
00:15:07,780 --> 00:15:11,940
is just a detailed example of data classes are great for that and you can

201
00:15:11,940 --> 00:15:15,380
see here that I have the same arc the same components in all three

202
00:15:15,380 --> 00:15:18,820
architectures the first one is layered then I have component based hexagonal

203
00:15:18,820 --> 00:15:23,780
based and hybrid and I just moved around the components but this the same

204
00:15:23,780 --> 00:15:29,220
components exist everywhere and this is just a way of organizing your code and a

205
00:15:29,460 --> 00:15:32,900
great way of thinking about doing unit tests is you want to test behavior and

206
00:15:32,900 --> 00:15:36,660
you want to test the behavior of a component and you want to keep all the

207
00:15:36,660 --> 00:15:40,340
inside messy so you can change it without having to rewrite all your tests

208
00:15:40,340 --> 00:15:43,780
all the time one thing I hate is test maintenance and people do too much

209
00:15:43,780 --> 00:15:47,900
testing or no testing at all so in this case you would only test the things are

210
00:15:47,900 --> 00:15:53,380
not grayed out and it makes your life a lot easier and that's just talking about

211
00:15:53,380 --> 00:15:57,380
that and you want to use collaborative unit tests want to reduce mocking as

212
00:15:57,380 --> 00:16:00,980
much as possible if you're going to use mocking inject it don't just monkey

213
00:16:00,980 --> 00:16:06,580
patch it or duck punching as it used to be called and do I always follow this

214
00:16:06,580 --> 00:16:13,380
rules well it depends if I'm building a very simple microservice crud app I

215
00:16:13,380 --> 00:16:17,340
probably won't follow these rules if I know I might have to change the database

216
00:16:17,340 --> 00:16:21,940
because I need to do optimizations maybe I will do the request layer and the

217
00:16:21,940 --> 00:16:25,820
domain layer as one unit and the database will switch with a repository

218
00:16:25,860 --> 00:16:30,860
pattern or I might even invert that the other way where I might never switch the

219
00:16:30,860 --> 00:16:34,900
data layer and I'm only changing what calls into my application and the whole

220
00:16:34,900 --> 00:16:39,500
point is by really simplifying where the code changes and we keep it in one spot

221
00:16:39,500 --> 00:16:45,020
and that's all I have so thank you

