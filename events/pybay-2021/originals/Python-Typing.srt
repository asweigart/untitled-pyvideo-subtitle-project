1
00:00:00,000 --> 00:00:13,260
Just as a quick overview, for several years now, Python has had syntax for type annotations

2
00:00:13,260 --> 00:00:21,340
where you can annotate variables and in functions and more recently on classes and local variables

3
00:00:21,340 --> 00:00:27,460
and there are a variety of type checkers that are used with this. This can help you catch

4
00:00:27,460 --> 00:00:33,980
a lot of bugs at sort of before running the code. Here, we complain that we're calling

5
00:00:33,980 --> 00:00:41,100
a method eggs on a string which doesn't exist and perhaps more useful in a lot of cases,

6
00:00:41,100 --> 00:00:45,900
we can catch errors like passing none when you expected to actually have something which

7
00:00:45,900 --> 00:00:51,080
is an advantage we have over type systems like Java's, for example. There are a lot

8
00:00:51,080 --> 00:00:58,000
of different type checkers. MyPy, which has some people at Dropbox working at it and general

9
00:00:58,000 --> 00:01:02,240
community, PyType out of Google, PyWrite out of Facebook, PyWrite out of Microsoft and

10
00:01:02,240 --> 00:01:09,800
PyAnalyze out of Quora. I'd recommend MyPy but then again, I would. I think it in general

11
00:01:09,800 --> 00:01:14,680
has more community upkeep and is less focused on sort of just one company though also it

12
00:01:14,680 --> 00:01:19,560
has plenty of its own problems. But the main thrust of this talk is just talking about

13
00:01:19,840 --> 00:01:25,720
what the developments in typing have been sort of in the last year or two in Python

14
00:01:25,720 --> 00:01:34,320
3.9 and 3.10 and in recent MyPy's. So, one of the big ones is what we call modular typeshed

15
00:01:34,320 --> 00:01:38,840
and if you're not familiar, typeshed is a collection of type annotations for lots of

16
00:01:38,840 --> 00:01:44,760
different Python libraries. Historically, it had the standard library and a few important

17
00:01:44,760 --> 00:01:51,280
third-party libraries and would be bundled with MyPy itself. This had a bunch of downsides

18
00:01:51,280 --> 00:01:57,800
like that it was tied to the MyPy release cycle. But we've moved to a model called modular

19
00:01:57,800 --> 00:02:02,920
typeshed where each third-party library that has stubs in typeshed for what their types

20
00:02:02,920 --> 00:02:08,360
are can be installed separately through PyPI. This is inspired by the TypeScripts world

21
00:02:08,360 --> 00:02:14,280
definitely typed. It maintains a lot of the advantages of having a big monolithic repository

22
00:02:14,280 --> 00:02:19,480
of types which is that you don't need each project to sort of manage it themselves because

23
00:02:19,480 --> 00:02:24,600
they might not care about typing and you can sort of have one throat to choke about it.

24
00:02:24,600 --> 00:02:30,040
But it allows sort of each library to be versioned independently. It means that type checkers

25
00:02:30,040 --> 00:02:35,080
can be released separately from the stub changes and everything's sort of lower risk. So that's

26
00:02:35,080 --> 00:02:41,760
been a big improvement. One thing, another thing is PEP 585 which adds type hinting to

27
00:02:41,760 --> 00:02:46,240
standard collections. Previously you needed to import everything from a typing module

28
00:02:46,240 --> 00:02:50,560
and write your lists and dicts with these uppercase lists and dicts but now you can

29
00:02:50,560 --> 00:02:57,360
just write regular lowercase dict and str and have the types there which is great. Another

30
00:02:57,360 --> 00:03:02,200
nice thing is for union types you can now just write them with an or. So you can write

31
00:03:02,200 --> 00:03:07,560
foo or baz instead of having to type out union foo baz with something you imported from typing.

32
00:03:07,560 --> 00:03:12,640
You could also write instead of optional str you could write str or none. I hate that.

33
00:03:12,640 --> 00:03:21,240
I think that's just so ugly but that's fine. Not everyone needs to agree with me. There's

34
00:03:21,240 --> 00:03:28,680
I think that or is fine. I think or none is just it hurts my soul even though it's true.

35
00:03:28,680 --> 00:03:35,840
PEP 612 is a PEP out of the pyre crew at Facebook that allows you to do much better typing for

36
00:03:35,880 --> 00:03:41,440
decorators. Historically MyPy has been able to type decorators that don't change the type

37
00:03:41,440 --> 00:03:46,200
of the function but sometimes you have something that adds a argument or two or changes the

38
00:03:46,200 --> 00:03:51,880
return type and there's now a system for specifying that kind of type which is really nice except

39
00:03:51,880 --> 00:03:59,400
MyPy doesn't implement it. So hopefully we'll do that soon. And then there's another nice

40
00:03:59,440 --> 00:04:05,520
feature that came out of the PyWrite crew at Microsoft which is MyPy and other type

41
00:04:05,520 --> 00:04:09,200
checkers have always let you sort of refine what the notion of a type is in a function

42
00:04:09,200 --> 00:04:14,160
by checking like if x is instance of something and then you know that it's that type or if

43
00:04:14,160 --> 00:04:18,840
x is none then you know it's none in that branch and not none in the other. But if you

44
00:04:18,840 --> 00:04:22,840
had a more complicated thing like wanting to check if all objects in a list were a string

45
00:04:22,840 --> 00:04:28,280
for example there's no way to do that. And type guards add a sort of user specifiable

46
00:04:28,280 --> 00:04:32,840
way to say like if this function gets called and it returns true then we know that its

47
00:04:32,840 --> 00:04:37,600
argument was this type. And this is in some sense really unsound because there's no way

48
00:04:37,600 --> 00:04:42,920
for the type checker to check that like it's true that we're right about it. But assuming

49
00:04:42,920 --> 00:04:49,240
you write the function right it can be very convenient. All right. So that was a lightning

50
00:04:49,240 --> 00:04:53,480
overview of what's happened in most of what's happened in the typing world in the last year

51
00:04:53,480 --> 00:04:57,960
or two. If you have any other questions about it I'll be around. Thank you very much.

