1
00:00:00,000 --> 00:00:06,280
Welcome, everyone.

2
00:00:06,280 --> 00:00:12,360
The next talk is titled five steps to build Python native GUI widgets for Bware.

3
00:00:12,360 --> 00:00:14,800
And our speaker is Dan Yaw.

4
00:00:14,800 --> 00:00:21,120
A round of applause for him, please.

5
00:00:21,120 --> 00:00:25,400
Hi, my name is Dan Yaw.

6
00:00:25,400 --> 00:00:29,960
I'm so excited to talk to you about how to build your own GUI widgets using Bware.

7
00:00:29,960 --> 00:00:31,880
A little bit about myself.

8
00:00:31,880 --> 00:00:37,720
I'm an engineer who helps design safety into complex autonomous and electrified technologies

9
00:00:37,720 --> 00:00:40,160
for Ford Motor Company.

10
00:00:40,160 --> 00:00:46,200
And in my free time, I have been working on trying to build open source engineering tools.

11
00:00:46,200 --> 00:00:51,960
After a while, I got so frustrated with GUI widgets for Python.

12
00:00:52,000 --> 00:01:00,040
I really wanted to be able to create one app and put it on all my devices and instead,

13
00:01:00,040 --> 00:01:07,480
you know, the GUI widgets are available, we're wrapped or introspected from C or C++ APIs

14
00:01:07,480 --> 00:01:11,760
or some of them kind of look like they're a blast from the past.

15
00:01:11,760 --> 00:01:17,840
I wanted to really try to create great Python code and instead I was kind of felt like I

16
00:01:17,840 --> 00:01:21,800
was working against the green of Python a little bit.

17
00:01:21,800 --> 00:01:24,400
So that's Bware.

18
00:01:24,400 --> 00:01:31,080
It's a set of software libraries and tools that provides cross platform native app development

19
00:01:31,080 --> 00:01:38,200
from a single Python code base and tools to simplify app development.

20
00:01:38,200 --> 00:01:41,960
Today we're going to be talking about one of those software libraries, Togo, which is

21
00:01:41,960 --> 00:01:45,480
the GUI widget for the Bware project.

22
00:01:45,480 --> 00:01:51,640
And I'm going to show you how you can build your own widget for that project.

23
00:01:51,640 --> 00:01:54,040
Here's a Hello World example.

24
00:01:54,040 --> 00:02:00,200
So you would import Togo, which is that GUI widget, and you would create a class called

25
00:02:00,200 --> 00:02:09,280
Hello World which uses Togo.app, which is the main application that Togo provides.

26
00:02:09,280 --> 00:02:13,480
It has a single method called startup.

27
00:02:13,480 --> 00:02:18,840
And then in that method, you create a main window and it takes one parameter, the title

28
00:02:18,840 --> 00:02:20,680
of the window.

29
00:02:20,720 --> 00:02:23,280
And then you create a Togo.box.

30
00:02:23,280 --> 00:02:29,640
Togo uses a box to lay out widgets on the main window and give those widgets space in

31
00:02:29,640 --> 00:02:31,440
the window.

32
00:02:31,440 --> 00:02:37,800
So then you add that box to the main window and tell Togo to show the main window and

33
00:02:37,800 --> 00:02:39,640
it should appear on the screen then.

34
00:02:39,640 --> 00:02:47,180
And there's a single method called main and it returns that Hello World class and provides

35
00:02:47,180 --> 00:02:49,520
Hello World as a title for the app.

36
00:02:49,520 --> 00:02:52,640
So that's how you would create a simple Hello World example.

37
00:02:52,640 --> 00:02:59,960
Next, I'm going to go through a little bit of background on what a widget is and also

38
00:02:59,960 --> 00:03:03,800
some background on the software architecture of Togo.

39
00:03:03,800 --> 00:03:07,240
And with that knowledge, then we'll go through the five steps of how you could build your

40
00:03:07,240 --> 00:03:09,280
own GUI widget.

41
00:03:09,280 --> 00:03:16,920
So a widget is the controls and logic that a user interacts with in a GUI application.

42
00:03:16,920 --> 00:03:22,840
So this is a simple Togo example app and on the right-hand side are two buttons, Hello

43
00:03:22,840 --> 00:03:26,200
World 0 and Hello World 1.

44
00:03:26,200 --> 00:03:31,440
On the top, there's two action buttons that have images and labels.

45
00:03:31,440 --> 00:03:35,080
And on the left-hand side are two tabs.

46
00:03:35,080 --> 00:03:40,000
The one visible is a table and the other tab is a tree.

47
00:03:40,000 --> 00:03:42,440
All of those are widgets.

48
00:03:42,440 --> 00:03:46,160
Now not all widgets have been implemented in Togo.

49
00:03:46,160 --> 00:03:49,840
In fact, when I was trying to build my own open source app, there was no way to draw

50
00:03:49,840 --> 00:03:51,280
on the screen.

51
00:03:51,280 --> 00:03:54,560
So I implemented a Canvas widget.

52
00:03:54,560 --> 00:03:59,040
And I definitely implemented it the hardest way possible.

53
00:03:59,040 --> 00:04:04,080
So now I want to show you how, now that I've learned that, we could, yeah, you don't have

54
00:04:04,080 --> 00:04:05,600
to make the same mistakes I do.

55
00:04:05,600 --> 00:04:11,340
So we're going to go into the software architecture for Togo.

56
00:04:11,340 --> 00:04:14,240
This is the black box view of how Togo works.

57
00:04:14,240 --> 00:04:20,640
On the left-hand side is the application you'd be building using Togo as a GUI framework.

58
00:04:20,640 --> 00:04:26,520
So that would be like that Hello World example you saw where you use this interface layer

59
00:04:26,520 --> 00:04:29,800
to write your Togo app.

60
00:04:29,800 --> 00:04:33,840
On the right-hand side is the native platform you'd be writing for.

61
00:04:33,840 --> 00:04:40,800
So that would be Windows, Mac OS, Linux, iOS, Android, or the web.

62
00:04:40,800 --> 00:04:46,720
And connecting the Togo toolkit to that native platform is a native layer.

63
00:04:46,720 --> 00:04:51,240
Togo provides an abstraction level above all these native platforms.

64
00:04:51,240 --> 00:04:57,340
So each abstraction level from that GUI application down is a layer.

65
00:04:57,340 --> 00:05:02,880
So here we see those two of those layers, interface layer and native layer.

66
00:05:02,880 --> 00:05:09,800
To go from Togo toolkit to the native platform for a C-based platform like Linux, for example,

67
00:05:09,800 --> 00:05:11,280
is pretty straightforward.

68
00:05:11,280 --> 00:05:19,520
CPython can use GTK and that already has language bindings called PyGeObject.

69
00:05:19,520 --> 00:05:22,080
For other platforms, it's definitely not so easy.

70
00:05:22,080 --> 00:05:26,400
So then you need some type of bridge or transpiler.

71
00:05:26,400 --> 00:05:32,280
These are three other software libraries that the Bware project provides as these bridges

72
00:05:32,280 --> 00:05:37,820
are transpilers to some of the other platforms.

73
00:05:37,820 --> 00:05:46,760
For example, for Mac OS or iOS, Rubicon provides a bridge between CPython and Objective-C.

74
00:05:46,760 --> 00:05:55,540
For Android, Vox provides a Python transpiler to convert Python into Java bytecode.

75
00:05:55,540 --> 00:05:59,620
And then you can load that Java bytecode into your Android device.

76
00:05:59,620 --> 00:06:03,520
For the web, Bware provides Batavia.

77
00:06:03,520 --> 00:06:07,560
It implements a Python virtual machine in JavaScript, which then you can load in the

78
00:06:07,560 --> 00:06:13,300
browser and run your app in the browser.

79
00:06:13,300 --> 00:06:20,340
So zooming in on the Toga GUI toolkit itself, this is a white box view.

80
00:06:20,340 --> 00:06:25,140
On the left-hand side, you see that interface layer that we talked about before that you'd

81
00:06:25,140 --> 00:06:28,460
be interacting with with your GUI application.

82
00:06:28,460 --> 00:06:32,540
And on our right-hand side is that same native layer we just talked about.

83
00:06:32,560 --> 00:06:35,200
There's two main software components for Toga.

84
00:06:35,200 --> 00:06:36,760
One's called Toga Core.

85
00:06:36,760 --> 00:06:40,500
The other one's called Toga Imple for implementation.

86
00:06:40,500 --> 00:06:45,740
And it has another API or another layer between those two called the implementation layer.

87
00:06:45,740 --> 00:06:50,800
So there's three main layers in Toga, the interface layer, implementation layer, and

88
00:06:50,800 --> 00:06:51,920
native layer.

89
00:06:51,920 --> 00:06:57,640
And there's two software components, Toga Core and Toga Imple.

90
00:06:57,640 --> 00:07:01,640
A couple more terms you need to understand because we're going to see these terms in

91
00:07:01,740 --> 00:07:07,220
some of the software code that we'll show demos of.

92
00:07:07,220 --> 00:07:11,700
To go from Toga Core to Toga Imple, you need to call self.imple.

93
00:07:11,700 --> 00:07:17,740
And to go back the other way from Toga Imple to Toga Core, you'll call self.interface.

94
00:07:17,740 --> 00:07:20,980
So just keep those terms in mind.

95
00:07:20,980 --> 00:07:26,340
One final thing about the software architecture for Toga.

96
00:07:26,340 --> 00:07:34,520
So we use a factory pattern in order to create the Toga Imple implementation layer.

97
00:07:34,520 --> 00:07:38,640
And that's to improve testability of Toga.

98
00:07:38,640 --> 00:07:43,760
So we can really improve the test to make them more maintainable and easier to read

99
00:07:43,760 --> 00:07:49,640
by not requiring the test to know how to create the implementation layer.

100
00:07:49,640 --> 00:07:57,100
So in this case, instead of each backend inheriting from Toga Imple, we have a factory

101
00:07:57,100 --> 00:07:58,900
method in Toga Core.

102
00:07:58,900 --> 00:08:04,100
And it looks at sys.platform of the Python it's running on to figure out what platform

103
00:08:04,100 --> 00:08:05,860
it's running.

104
00:08:05,860 --> 00:08:08,540
So for Linux, that'd be Toga GTK.

105
00:08:08,540 --> 00:08:11,400
For macOS, that'd be Toga Coco.

106
00:08:11,400 --> 00:08:13,460
And there's one other one called Toga Dummy.

107
00:08:13,460 --> 00:08:15,220
And that's for testing.

108
00:08:15,240 --> 00:08:22,640
So we use that to smoke test Toga Core to check that when Toga Core calls a widget,

109
00:08:22,640 --> 00:08:27,120
that that widget is created in this dummy backend.

110
00:08:27,120 --> 00:08:37,120
And then the test, we can pass in dummy into the test through this factory parameter.

111
00:08:37,120 --> 00:08:43,480
And the test doesn't have to know how to actually create that backend.

112
00:08:43,480 --> 00:08:47,820
So that was kind of some background in the software architecture for Toga.

113
00:08:47,820 --> 00:08:49,860
And now we're going to get into the five steps.

114
00:08:49,860 --> 00:08:51,380
And there's kind of one pre-step.

115
00:08:51,380 --> 00:08:58,200
And that is you need to pick the platform you want to implement with.

116
00:08:58,200 --> 00:09:00,780
So that choice might be kind of made for you.

117
00:09:00,780 --> 00:09:05,100
It'd be the operating system that's running on your laptop, whether that's Windows or

118
00:09:05,100 --> 00:09:07,060
macOS or Linux.

119
00:09:07,060 --> 00:09:11,860
But you could also develop a widget for iOS or Android if you want to do mobile or even

120
00:09:11,860 --> 00:09:12,860
the web.

121
00:09:13,120 --> 00:09:16,040
macOS and GTK are the most developed platforms.

122
00:09:16,040 --> 00:09:18,480
So they're often a really good choice.

123
00:09:18,480 --> 00:09:21,240
But Android and Windows need the most help.

124
00:09:21,240 --> 00:09:24,520
So if you have knowledge about those platforms, definitely we could use all the help we can

125
00:09:24,520 --> 00:09:25,640
get with those.

126
00:09:27,800 --> 00:09:33,320
So now that we have a platform selected, we're going to go on to our five steps.

127
00:09:33,320 --> 00:09:35,640
And this step is probably the most important.

128
00:09:35,640 --> 00:09:38,760
And that is you need to research your widget.

129
00:09:38,760 --> 00:09:43,100
So like I said before, Toga is creating this nice Pythonic API.

130
00:09:43,100 --> 00:09:47,340
And it's creating an abstraction layer above the native platforms.

131
00:09:47,340 --> 00:09:52,660
In order to create a good abstraction, you need to understand specific examples.

132
00:09:52,660 --> 00:09:59,220
So we need to understand specific examples of these widget toolkits on the different

133
00:09:59,220 --> 00:10:00,780
platforms.

134
00:10:00,780 --> 00:10:05,980
And then we can take that knowledge and constrain the API that we're creating and really create

135
00:10:05,980 --> 00:10:08,740
a nice abstraction layer.

136
00:10:08,740 --> 00:10:13,620
And so through our research, we need to understand how other users are going to use the widget

137
00:10:13,620 --> 00:10:15,140
that you create.

138
00:10:15,140 --> 00:10:20,940
So my use of a Canvas widget might not be the same use other people might want to use

139
00:10:20,940 --> 00:10:22,760
it for.

140
00:10:22,760 --> 00:10:25,920
And finally, get feedback as soon as possible.

141
00:10:25,920 --> 00:10:31,520
So that could be through creating a GitHub issue or even a draft pull request.

142
00:10:31,520 --> 00:10:37,320
Start discussing the widget right away with others and get as much feedback as you can.

143
00:10:37,320 --> 00:10:41,880
So going through examples, I'm going to go through two examples.

144
00:10:41,880 --> 00:10:46,560
You'd probably want to look at other platforms as well besides these two.

145
00:10:46,560 --> 00:10:54,400
Tkinter is the GUI widget, or excuse me, GUI toolkit that's built into Python in the standard

146
00:10:54,400 --> 00:10:56,020
library.

147
00:10:56,020 --> 00:11:01,160
So in order to use Tkinter to draw on a canvas, you would initialize Tkinter and then call

148
00:11:01,160 --> 00:11:11,800
And then on that canvas, call canvas.createRectangle, pass in width, x, y, width, and height, and

149
00:11:11,800 --> 00:11:15,680
a fill color, and then call canvas.pack.

150
00:11:15,680 --> 00:11:21,240
Pack is the way that Tkinter assigns space for the widget on the screen and allows it

151
00:11:21,240 --> 00:11:26,640
to be shown, very similar to the box that I showed for the TOGA example.

152
00:11:26,640 --> 00:11:29,800
Here's another example for GTK.

153
00:11:29,800 --> 00:11:33,440
The canvas for GTK is called a drawing area.

154
00:11:33,440 --> 00:11:39,440
So we're going to initialize GTK.drawingArea to create our drawing area.

155
00:11:39,440 --> 00:11:44,400
And then GTK uses this connect method.

156
00:11:44,400 --> 00:11:51,320
So this is also a common pattern you'll see with these GUI toolkits is they have callbacks.

157
00:11:51,320 --> 00:11:56,200
So what a callback is is if you had a button and a user clicked on the button, you'd want

158
00:11:56,200 --> 00:12:00,820
to be able to assign a function to that button click that gets executed when the button is

159
00:12:00,820 --> 00:12:01,820
clicked on.

160
00:12:01,820 --> 00:12:07,880
In this case, GTK uses event callbacks for almost everything.

161
00:12:07,880 --> 00:12:16,440
So an advantage of this is if you have a drawing operation like this and you resize the window

162
00:12:16,440 --> 00:12:24,120
or move it around, an event callback gets called and the canvas would be redrawn automatically

163
00:12:24,120 --> 00:12:27,520
by GTK.

164
00:12:27,520 --> 00:12:32,440
So in order to connect to that drawing operation, we create a draw function that takes in two

165
00:12:32,440 --> 00:12:35,880
parameters, a drawing area and a drawing context.

166
00:12:35,880 --> 00:12:42,560
And then you call context.setSourceRGB, which is the color, and context.rectangle and pass

167
00:12:42,560 --> 00:12:45,120
in x, y width and height again.

168
00:12:45,120 --> 00:12:51,320
Then you have to tell GTK to manually fill it by calling context.fill.

169
00:12:51,320 --> 00:12:55,320
So this is a very simple drawing operation.

170
00:12:55,320 --> 00:13:00,840
You'll notice that some of these C or C++ APIs require you to be very repetitive.

171
00:13:00,840 --> 00:13:03,560
So imagine you want to draw more than a rectangle.

172
00:13:03,560 --> 00:13:09,960
You're going to have to have a lot of calls to set source colors, create an object and

173
00:13:09,960 --> 00:13:11,480
then fill them one after another.

174
00:13:11,480 --> 00:13:13,200
It becomes kind of repetitive.

175
00:13:13,200 --> 00:13:18,640
So when we're creating our nice Pythonic API, maybe we can do a little bit better than that

176
00:13:18,720 --> 00:13:23,480
and not be so repetitive and make use of some nice features of Python.

177
00:13:23,480 --> 00:13:27,920
You'll also notice there's four main patterns that a widget needs to support, and that is

178
00:13:27,920 --> 00:13:34,160
to be able to create the widget, modify the widget, create some type of event callback

179
00:13:34,160 --> 00:13:41,360
and finally provide some type of pack operation or give a widget space on the screen.

180
00:13:41,360 --> 00:13:48,240
So we've gone through some research on the different GUI widgets.

181
00:13:48,240 --> 00:13:50,320
There's definitely lots of others we could look at.

182
00:13:50,320 --> 00:13:56,320
HTML DOM has a canvas, WXPython, Qt, Cocoa.

183
00:13:56,320 --> 00:14:00,800
Definitely look at as many examples as you can to try to see how they would do a similar

184
00:14:00,800 --> 00:14:02,840
drawing operation.

185
00:14:02,840 --> 00:14:04,720
Now we're going to go through some use cases.

186
00:14:04,720 --> 00:14:09,520
So I said I was trying to make an engineering tool, but let's look at what other use cases

187
00:14:09,520 --> 00:14:12,640
would be for using a drawing operation.

188
00:14:12,640 --> 00:14:17,640
So you can imagine a simple drawing app where a user wants to put a shape on the screen

189
00:14:17,640 --> 00:14:21,800
and add text or do some basic drawing.

190
00:14:21,800 --> 00:14:26,800
A vector drawing app where someone wants to put lines or a shape on and then edit those

191
00:14:26,800 --> 00:14:31,680
nodes of that line after the line is drawn.

192
00:14:31,680 --> 00:14:34,160
Or finally like a platformer game.

193
00:14:34,160 --> 00:14:37,200
So you'd have a lot of objects drawn to the screen.

194
00:14:37,200 --> 00:14:42,320
You want to be able to create a drawing context just for your superhero and then allow that

195
00:14:43,320 --> 00:14:48,520
across the screen or jump in the air but not accidentally modify all the other objects

196
00:14:48,520 --> 00:14:50,240
in the environment.

197
00:14:50,240 --> 00:14:55,960
So we'll definitely keep those use cases in mind when we actually create our API for our

198
00:14:55,960 --> 00:14:58,600
widget.

199
00:14:58,600 --> 00:15:00,880
We're done with our research at this point.

200
00:15:00,880 --> 00:15:05,800
Remember it would be good to create that pull request or draft pull request or create an

201
00:15:05,800 --> 00:15:08,520
issue and start getting feedback.

202
00:15:08,520 --> 00:15:11,120
But we're on to step two.

203
00:15:11,120 --> 00:15:13,080
Step two is write docs.

204
00:15:13,080 --> 00:15:16,160
I recommend using documentation driven development.

205
00:15:16,160 --> 00:15:21,920
So our goal here is to create this nice Pythonic API, this nice abstraction layer for this

206
00:15:21,920 --> 00:15:23,560
widget we're creating.

207
00:15:23,560 --> 00:15:26,920
So let's write the documents for that API first.

208
00:15:26,920 --> 00:15:28,620
This is iterative with step one.

209
00:15:28,620 --> 00:15:35,360
So we can do this to start writing our API and do more research.

210
00:15:35,360 --> 00:15:39,780
Here's an example of some docs we had to write so we'd explain what this canvas widget is

211
00:15:39,780 --> 00:15:44,940
used for and then provide a simple example of how you'd use a canvas widget.

212
00:15:44,940 --> 00:15:53,540
In this case we import toga, call toga.canvas and pass it in a style to create our canvas.

213
00:15:53,540 --> 00:15:58,360
And then we're using the with statement or context manager which is a really nice feature

214
00:15:58,360 --> 00:16:00,740
that Python provides.

215
00:16:00,740 --> 00:16:03,280
So we call with canvas.fill.

216
00:16:03,280 --> 00:16:07,820
We pass in the color to the fill operation and we can give it a name.

217
00:16:07,860 --> 00:16:10,020
In this case we just called it fill.

218
00:16:10,020 --> 00:16:14,580
And then call fill.rect and pass in the x, y width and height.

219
00:16:14,580 --> 00:16:19,260
This is where we can really make use of these nice features that we all love about Python

220
00:16:19,260 --> 00:16:24,980
since we don't have to wrap around some type of C or C++ API.

221
00:16:24,980 --> 00:16:30,000
So if we had more drawing operations, we could put them all in this context and when the

222
00:16:30,000 --> 00:16:35,800
context exits, then all of the drawing operations would automatically get filled with the right

223
00:16:35,800 --> 00:16:37,340
color.

224
00:16:37,860 --> 00:16:42,620
Instead of you having to manually keep on creating all these fill operations.

225
00:16:42,620 --> 00:16:47,780
So that's a really nice feature we can provide.

226
00:16:47,780 --> 00:16:52,720
So next we want to write a code outline for our API.

227
00:16:52,720 --> 00:16:55,840
So we wrote kind of the documentation of how it's going to work.

228
00:16:55,840 --> 00:17:00,020
Now we're going to outline our API code.

229
00:17:00,020 --> 00:17:08,220
So in this case we create class canvas and it inherits from the Toga widget class.

230
00:17:08,220 --> 00:17:14,940
And that class, that Toga widget class takes three parameters and an ID, a style and a

231
00:17:14,940 --> 00:17:17,260
factory.

232
00:17:17,260 --> 00:17:21,340
And so our canvas class needs to take those three parameters as well.

233
00:17:21,340 --> 00:17:27,660
And we would do this for the rest of the methods for our class and really outline all the code

234
00:17:27,660 --> 00:17:29,660
for our API.

235
00:17:31,020 --> 00:17:35,540
So we've written our docs, outlined our API.

236
00:17:35,540 --> 00:17:41,660
It's time to now implement Toga core, which was that first software component.

237
00:17:41,660 --> 00:17:46,180
So we're going to use test driven development to implement Toga core.

238
00:17:46,180 --> 00:17:50,540
So we're first going to write the test for Toga core and then we're going to code the

239
00:17:50,540 --> 00:17:53,580
outline we created in the previous step.

240
00:17:53,580 --> 00:18:03,940
So here's a test for Toga core to actually create the widget.

241
00:18:03,940 --> 00:18:06,940
Toga uses unit tests for testing.

242
00:18:06,940 --> 00:18:09,580
So that first line says assert equal.

243
00:18:09,580 --> 00:18:16,060
We need to check that the object on the left matches the object on the right.

244
00:18:16,060 --> 00:18:19,420
And remember the impel and interface terms we talked about.

245
00:18:19,420 --> 00:18:24,900
So we're checking that canvas.impl.interface is equal to canvas.

246
00:18:24,900 --> 00:18:30,860
So we're checking that the canvas in Toga core, when it's translated to Toga impel and

247
00:18:30,860 --> 00:18:35,300
back to Toga core, is the same canvas we started with.

248
00:18:35,300 --> 00:18:41,580
Another example, we talked about the dummy backend, the self.assert action performed

249
00:18:41,580 --> 00:18:45,900
is a method that comes with our testing for the dummy backend.

250
00:18:45,900 --> 00:18:52,660
So we're checking that generally our canvas is created on the dummy when we create a canvas.

251
00:18:52,660 --> 00:18:57,380
So that was a smoke test for the canvas itself.

252
00:18:57,380 --> 00:19:00,900
And now we're going to write some tests for our drawing operation.

253
00:19:00,900 --> 00:19:04,420
So how do we actually create a rectangle?

254
00:19:04,420 --> 00:19:08,180
So we call canvas.rect to create a rectangle.

255
00:19:08,180 --> 00:19:11,180
Now we're going to modify our rectangle after it's created.

256
00:19:11,180 --> 00:19:15,700
So we're going to pass in a different x, y, width and height and tell Toga to redraw

257
00:19:15,700 --> 00:19:17,940
the rectangle.

258
00:19:17,940 --> 00:19:22,580
And then that's that same action performed with for the dummy backend to make sure that

259
00:19:22,580 --> 00:19:29,300
we successfully created a rectangle with those modified coordinates and width and height.

260
00:19:29,300 --> 00:19:30,300
And those are our tests.

261
00:19:30,300 --> 00:19:36,620
They should be failing now because we don't have an implementation yet.

262
00:19:36,620 --> 00:19:40,300
Next we had the code outline we created in the previous step when we were creating our

263
00:19:40,300 --> 00:19:41,300
docs.

264
00:19:41,300 --> 00:19:46,860
Now it's time to implement Toga core from that code outline we created before.

265
00:19:46,860 --> 00:19:53,780
So this is that same canvas class that you saw before that's inheriting from the widget.

266
00:19:53,780 --> 00:20:01,980
It has two main methods, a dunder init method and the rect method to create a rectangle.

267
00:20:01,980 --> 00:20:07,540
In order to inherit from widget, we call super dunder init with those three parameters, ID,

268
00:20:08,100 --> 00:20:11,020
and the factory.

269
00:20:11,020 --> 00:20:18,220
And now we're using the factory pattern to assign self.impl equal to self.factory.canvas.

270
00:20:18,220 --> 00:20:24,600
So that's creating that canvas factory for us and assigning the interface to self.

271
00:20:24,600 --> 00:20:31,140
So that's creating that Toga Impl object for us.

272
00:20:31,140 --> 00:20:37,460
Now that we've defined self.impl, which remember was going from Toga core to Toga Impl, in

273
00:20:37,460 --> 00:20:45,580
the rect method we call self.impl.rect and pass in the x, y width and height.

274
00:20:45,580 --> 00:20:50,660
So this is that implementation layer that we're defining now and telling when we call

275
00:20:50,660 --> 00:20:56,500
the rect method from the interface layer in our app, then it will call that Toga Impl

276
00:20:56,500 --> 00:21:02,700
layer in the software.

277
00:21:02,700 --> 00:21:04,100
We're on to step four.

278
00:21:04,100 --> 00:21:07,460
So we've implemented all of Toga core.

279
00:21:07,460 --> 00:21:11,700
Now we need to start implementing Toga Impl and that comes in two steps.

280
00:21:11,700 --> 00:21:15,580
The first step we're going to implement the dummy backend and then we're going to implement

281
00:21:15,580 --> 00:21:22,260
the backend for our platform.

282
00:21:22,260 --> 00:21:24,500
Here's an example of the dummy backend.

283
00:21:24,500 --> 00:21:28,060
Remember we're using that for testing of our widget.

284
00:21:28,060 --> 00:21:32,980
So we're going to create a new class called canvas, which also inherits from widget.

285
00:21:32,980 --> 00:21:37,380
So we've got two methods, a create method once again and a rect method.

286
00:21:37,380 --> 00:21:45,140
And notice this self.underscore action is part of what's built in for the dummy backend.

287
00:21:45,140 --> 00:21:54,060
So the dummy backend will call this self.action create canvas when that API endpoint is hit.

288
00:21:54,060 --> 00:21:56,260
And the same thing for the rect method.

289
00:21:56,260 --> 00:22:02,740
So we'll call self.action rect and then set x, y width and height to those values.

290
00:22:02,780 --> 00:22:08,660
So then when our tests are run, that create canvas will actually be in the, be able to

291
00:22:08,660 --> 00:22:11,340
be tested by the test itself.

292
00:22:11,340 --> 00:22:18,860
So once we implement this dummy backend, now all of our tests should be passing.

293
00:22:18,860 --> 00:22:21,380
We're on to the final step.

294
00:22:21,380 --> 00:22:22,860
Step five.

295
00:22:22,860 --> 00:22:27,300
So we have our working dummy backend, all tests are passing and now we're implementing

296
00:22:27,300 --> 00:22:31,900
Toga Impl for our platform.

297
00:22:31,900 --> 00:22:37,820
One nice thing about implementing the dummy backend first is we now have something we

298
00:22:37,820 --> 00:22:45,700
can copy from that Toga dummy to our platform backend because the API endpoint will be exactly

299
00:22:45,700 --> 00:22:47,540
the same for Toga Impl.

300
00:22:47,540 --> 00:22:54,100
And so we can copy what we did there and make use of it when we're implementing it for our platform.

301
00:22:55,620 --> 00:22:57,940
This is an example for GTK.

302
00:22:57,980 --> 00:23:04,740
So we are actually, like we showed in the research in step one, calling GTK directly

303
00:23:04,740 --> 00:23:12,380
from Python because we are now at that last native layer of the software.

304
00:23:12,380 --> 00:23:19,140
So we call class canvas again where we create a class called canvas which inherits from

305
00:23:19,140 --> 00:23:20,140
widget.

306
00:23:20,140 --> 00:23:21,140
It has three methods.

307
00:23:21,140 --> 00:23:26,500
Two of the methods you saw before, one called create and one called rect and the other one

308
00:23:26,500 --> 00:23:31,260
is a drawing callback that GTK needs to make use of.

309
00:23:31,260 --> 00:23:36,940
In our create method, we set self.native equal to GTK.drawing area.

310
00:23:36,940 --> 00:23:40,380
So we're creating that drawing area using GTK.

311
00:23:40,380 --> 00:23:45,380
And then we connect that drawing area to the drawing callback.

312
00:23:45,380 --> 00:23:51,540
In the rect method, then we use the GTK drawing context to create a rectangle.

313
00:23:51,540 --> 00:23:57,700
So we call it draw context.rectangle and pass in that x, y width and height.

314
00:23:57,700 --> 00:24:01,900
So you'll notice this looks kind of a lot similar to Toga Core.

315
00:24:01,900 --> 00:24:06,100
But remember, Toga Core was that abstraction level away from this.

316
00:24:06,100 --> 00:24:10,620
So it doesn't have to know how to call the native GUI widget.

317
00:24:10,620 --> 00:24:15,460
And then in this Toga Impl, now we're actually calling that native GUI widget for whatever

318
00:24:15,460 --> 00:24:17,240
the platform is.

319
00:24:17,240 --> 00:24:24,200
A big advantage of this is now once this is created, we can now implement another implementation

320
00:24:24,200 --> 00:24:27,520
of Toga Impl for another platform.

321
00:24:27,520 --> 00:24:32,800
For example, this is how you would do it in Cocoa if you wanted to implement it for macOS.

322
00:24:32,800 --> 00:24:38,360
If you ignore the first class for a second, the second class at the bottom, once again,

323
00:24:38,360 --> 00:24:41,840
looks exactly like GTK or looks very similar.

324
00:24:41,840 --> 00:24:46,360
You have a class called Canvas with two methods, create and rect.

325
00:24:46,360 --> 00:24:51,920
Something that's a little bit different is you set self.native equal to this Toga Canvas,

326
00:24:51,920 --> 00:24:57,840
which is the other class, and you call alloc and init on it.

327
00:24:57,840 --> 00:25:08,520
And that gives the widget memory for Objective-C, because now we need to bridge using Rubicon,

328
00:25:08,520 --> 00:25:13,120
which was that other bridging tool software library I talked about.

329
00:25:13,120 --> 00:25:17,480
And we need to give that Objective-C some memory space.

330
00:25:17,480 --> 00:25:27,660
So classed Toga Canvas, which inherits from now some Apple APIs and NSVU, Rubicon provides

331
00:25:27,660 --> 00:25:32,840
a nice decorator called Objective-C method.

332
00:25:32,840 --> 00:25:38,200
And we add some type hints for the Objective-C to work.

333
00:25:38,200 --> 00:25:42,640
So I don't want to go through that in too much detail, but as you can see, it's not

334
00:25:42,640 --> 00:25:49,640
too difficult to now implement our widget for another platform.

335
00:25:49,640 --> 00:25:55,040
So we created a canvas, and I showed you a simple example of creating a rectangle.

336
00:25:55,040 --> 00:26:00,360
I think that would actually be a good way to implement a widget if you're actually creating

337
00:26:00,360 --> 00:26:01,480
one.

338
00:26:01,480 --> 00:26:06,080
Make something small and simple that works through these five steps.

339
00:26:06,080 --> 00:26:09,720
Now I'd go back to step one and implement the rest of the widget.

340
00:26:09,720 --> 00:26:14,360
So you need to be able to draw circles and lines and write text to the screen, all the

341
00:26:14,360 --> 00:26:17,280
other drawing operations that your widget needs.

342
00:26:17,280 --> 00:26:25,040
So now I'd iterate back through steps one through five and create the rest of the widget.

343
00:26:25,040 --> 00:26:26,200
And we're done.

344
00:26:26,200 --> 00:26:27,920
We've gotten through our five steps.

345
00:26:27,920 --> 00:26:30,060
We've iterated through it.

346
00:26:30,060 --> 00:26:34,340
On the screen is a Toga window, and we drew on a canvas.

347
00:26:34,340 --> 00:26:39,540
This is Tiberius, who's the mascot for Toga, and we drew it using our Canvas widget.

348
00:26:39,540 --> 00:26:46,780
And we're ready to submit a pull request and get it merged into the Toga project.

349
00:26:46,780 --> 00:26:51,300
A quick summary of what the steps we talked about.

350
00:26:51,300 --> 00:26:56,740
Really important is we need to research our widget and understand how all the other GUI

351
00:26:56,740 --> 00:27:02,100
widget toolkits provide that widget that you're creating.

352
00:27:02,100 --> 00:27:04,820
So we need to research our widget and create those use cases.

353
00:27:05,460 --> 00:27:13,460
We want to do documentation-driven development and write our docs next and outline that API.

354
00:27:13,460 --> 00:27:20,820
And then we're going to implement Toga Core using test-driven development, using and coding

355
00:27:20,820 --> 00:27:26,900
that outline we created in step two, and then implement the two Toga impels, one for a dummy

356
00:27:26,900 --> 00:27:32,400
backend and one for your platform.

357
00:27:32,400 --> 00:27:33,400
My name's Dan Yaw.

358
00:27:33,400 --> 00:27:35,280
Thanks so much for coming.

359
00:27:35,280 --> 00:27:40,240
I think we have a few minutes to take questions and also be available after.

360
00:27:40,240 --> 00:27:45,000
Also the Beware project's going to be sprinting for the next three or four days.

361
00:27:45,000 --> 00:27:48,660
And if you come make a contribution, you can get a nice challenge coin.

362
00:27:48,660 --> 00:27:53,080
So definitely come sprint with us on the sprint if you're going to be here.

363
00:27:53,080 --> 00:27:54,080
Thanks so much.

364
00:27:54,080 --> 00:28:03,800
Thank you, Dan.

365
00:28:03,800 --> 00:28:07,020
If you have questions, please use the microphone.

366
00:28:07,020 --> 00:28:09,340
Hi.

367
00:28:09,340 --> 00:28:10,340
Great talk.

368
00:28:10,340 --> 00:28:11,940
Thank you.

369
00:28:11,940 --> 00:28:20,180
Can you contrast for us some what the difference between Beware and other toolkits like TKWX

370
00:28:20,180 --> 00:28:27,920
widgets and maybe other platforms like PyQt and PyForms and PyGoObject, some of the others

371
00:28:27,920 --> 00:28:29,680
that are out there.

372
00:28:29,680 --> 00:28:37,900
And the second question is about does Beware provide an executable to be installed or does

373
00:28:37,900 --> 00:28:43,500
it require Python to be installed in all these other platforms and what are the cross-platform

374
00:28:43,500 --> 00:28:44,500
problems that might occur?

375
00:28:44,500 --> 00:28:48,020
I mean, that's two separate questions, but thank you.

376
00:28:48,020 --> 00:28:49,020
Thanks for your question.

377
00:28:49,860 --> 00:28:56,140
So a lot of, I guess, as I kind of talked, a lot of the other GUI toolkits that exist

378
00:28:56,140 --> 00:29:00,900
are either wrapped or introspective C or C++ APIs.

379
00:29:00,900 --> 00:29:08,340
So an advantage here is we're creating abstraction level from the truly native widgets for the

380
00:29:08,340 --> 00:29:09,460
platform.

381
00:29:09,460 --> 00:29:13,800
And then so this is a truly native implementation.

382
00:29:13,800 --> 00:29:19,160
A lot of other GUI widgets can provide some cross-platform, but they're not native widgets

383
00:29:19,160 --> 00:29:21,320
for what that platform is.

384
00:29:21,320 --> 00:29:26,900
And then that allows you to pull in everything like accessibility and all your shortcut keys

385
00:29:26,900 --> 00:29:28,740
automatically work.

386
00:29:28,740 --> 00:29:34,480
And also we can make the API a lot more Pythonic because we're creating that one abstraction

387
00:29:34,480 --> 00:29:37,560
level that then all the GUI toolkits can use.

388
00:29:37,560 --> 00:29:39,560
So I think that's the big advantage.

389
00:29:39,560 --> 00:29:45,120
As far as you're kind of talking about deployment as well, do we need a Python executable?

390
00:29:45,120 --> 00:29:50,940
So there's another tool called Briefcase, which packages up your Python app that I guess

391
00:29:50,940 --> 00:29:56,960
you could create with Toga or you can even create it with a different GUI toolkit or

392
00:29:56,960 --> 00:30:03,640
it could be a CLI app and packages all the libraries it needs and Python together.

393
00:30:03,640 --> 00:30:07,120
And that makes it really easy to distribute on all the platforms.

394
00:30:09,560 --> 00:30:18,200
What happens when you want to implement a widget that has features on one platform but

395
00:30:18,200 --> 00:30:22,920
not on another?

396
00:30:22,920 --> 00:30:27,920
So for example, some platforms have capabilities that others don't.

397
00:30:27,920 --> 00:30:34,200
For example, you probably don't need a GPS widget on your Windows computer.

398
00:30:34,200 --> 00:30:35,200
Maybe you do.

399
00:30:36,000 --> 00:30:39,680
Some of those things like a camera GPS would only be available for mobile.

400
00:30:39,680 --> 00:30:45,040
And that's okay if a widget's only supported on certain platforms and we just document

401
00:30:45,040 --> 00:30:46,520
that in Toga.

402
00:30:46,520 --> 00:30:48,480
So that's actually okay.

403
00:30:48,480 --> 00:30:54,480
But for most of the main widgets that are cross-platform, then we'd create a single

404
00:30:54,480 --> 00:31:00,040
abstraction level even if they're called different things on each platform but they're mainly

405
00:31:00,080 --> 00:31:06,080
doing the same type of widget operation, then we'd try to kind of make as common of an API

406
00:31:06,080 --> 00:31:07,080
as possible.

407
00:31:07,080 --> 00:31:12,760
I'm sorry, but we don't have any more time for questions.

408
00:31:12,760 --> 00:31:17,480
If you have further questions, you can work up directly to Dan and you have them answered.

409
00:31:17,480 --> 00:31:18,640
Thank you once again for Dan, please.

