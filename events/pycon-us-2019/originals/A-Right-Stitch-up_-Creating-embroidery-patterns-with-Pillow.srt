1
00:00:00,000 --> 00:00:10,720
Hello, good morning. A few housekeeping items first. If you have a cell phone or other device

2
00:00:10,720 --> 00:00:13,560
that makes noise, if you would like to make sure that is in silent mode, that would be

3
00:00:13,560 --> 00:00:19,800
fabulous. Please hold your questions during this talk until after the talk. Katie will

4
00:00:19,800 --> 00:00:24,020
be taking questions at the Pi Ladies booth so you can find her there. So please welcome

5
00:00:24,020 --> 00:00:29,200
Katie who will be giving the talk titled, A Right Stitch Up, Creating Embroidery Patterns

6
00:00:29,200 --> 00:00:36,200
with Pillow. Thank you.

7
00:00:36,200 --> 00:00:54,660
Good morning. A long time ago in a conference far, far away, I gave my first ever lightning

8
00:00:54,660 --> 00:01:00,580
talk. It was in a series of lightning talks that were specifically about other skills.

9
00:01:00,580 --> 00:01:04,860
It was any lightning talk you wanted but it couldn't be about computers. There were talks

10
00:01:04,860 --> 00:01:10,800
about bread making, there was talks about acquire and I gave a talk about a cross stitch

11
00:01:10,800 --> 00:01:18,060
that I made. The original artwork was created by a pixel artist from Melbourne, Paul Robinson.

12
00:01:18,060 --> 00:01:22,780
He's known for his work on Scott Pilgrim vs. the World, the video game, Mercenary Kings

13
00:01:23,060 --> 00:01:28,900
and the video clip for Architecture and Helsinki's Do the Whirlwind. Pixel art, especially those

14
00:01:28,900 --> 00:01:34,020
with really distinct colour palettes, map really well into cross stitching. Every single

15
00:01:34,020 --> 00:01:40,020
pixel on that image can be converted into a single stitch and you can import your designs

16
00:01:40,020 --> 00:01:44,820
into one of the many closed source Windows only programmes and generate a chart for your

17
00:01:44,820 --> 00:01:51,820
reference. Each cell has a colour and a symbol that you then transcribe by hand onto your

18
00:01:52,180 --> 00:01:59,180
canvas. This particular one took three months to make. But several years after my original

19
00:01:59,460 --> 00:02:03,860
lightning talk, this particular design was auctioned off as part of the Pyleadies charity

20
00:02:03,860 --> 00:02:10,860
auction in Portland in 2017 and the money raised went directly to Pyleadies. Now as

21
00:02:12,180 --> 00:02:16,580
part of the lightning talk that I gave those many years ago, I mentioned that the programme

22
00:02:16,580 --> 00:02:23,580
that I used was a closed source Windows only programme and I said, if you know of anything

23
00:02:24,140 --> 00:02:29,300
about image manipulation, colour setting, cross stitch charts, if there is any free

24
00:02:29,300 --> 00:02:34,420
and open source software out there, please tell me, otherwise I will make my own and

25
00:02:34,420 --> 00:02:41,420
present it here next year. Unfortunately that was in 2014. I am not very good at estimating.

26
00:02:41,420 --> 00:02:48,420
But based on my own unscripted ramblings from now five years ago, I set myself three problems

27
00:02:49,700 --> 00:02:56,700
to solve. One, image manipulation. Two, colour setting and three, cross stitch charts. First

28
00:02:58,660 --> 00:03:02,840
step, image manipulation. If I am provided an image, I want to be able to go through

29
00:03:02,840 --> 00:03:07,540
and iterate over every single pixel of the image and work out what colour it is. In Python,

30
00:03:07,540 --> 00:03:13,300
we can do that with Pillow, the Python imaging library. It is a go-to language if you want

31
00:03:13,300 --> 00:03:18,500
to do image manipulation. It is a go-to package for image manipulation in Python. You can

32
00:03:18,500 --> 00:03:24,660
use it to load images, resize them, rotate them and save the result. You can also interrogate

33
00:03:24,660 --> 00:03:31,660
images using image.getPixel and it does pretty much what it says on the tin. If I have a

34
00:03:31,740 --> 00:03:38,740
3 by 3 pixel image zoomed in here, I can identify exactly what colour each of those pixels are.

35
00:03:41,380 --> 00:03:45,660
The coordinate system in Pillow starts at the top left and works its way across and

36
00:03:45,660 --> 00:03:52,660
then down. In my terminal, if I pip install Pillow, open up my Python terminal. From Pill,

37
00:03:54,140 --> 00:04:00,180
import image, open up my image from my local file system and then run getPixel with the

38
00:04:00,180 --> 00:04:07,180
coordinates 0, 2, I get out a triple, so a three element tuple of the RGB elements that

39
00:04:08,020 --> 00:04:14,900
make up that colour, 2, 5, 5, 0, 0 being red. From here, I can iterate over every single

40
00:04:14,900 --> 00:04:20,580
pixel in my image and get all the colours. So that is problem one solved. Problem two,

41
00:04:20,580 --> 00:04:27,580
colour setting. Yes, with a U because I am Australian. But first, let's talk about floss.

42
00:04:27,780 --> 00:04:34,780
Dolphos MjÃ¸g Egkompanyet is an Alsatian textile company founded in 1746. Not to be confused

43
00:04:35,140 --> 00:04:42,140
with a hip hop group of a similar name. When I talk about DMC, I mean this stuff. If you

44
00:04:42,140 --> 00:04:46,540
go to a Michael's or a Joanne or Australia, a Spotlight or a Linkraft, you will see a

45
00:04:46,540 --> 00:04:53,540
set up like this. This is known as DMC floss. DMC have several hundred colours of this floss

46
00:04:53,700 --> 00:04:58,860
available all referenced by a code. This is a multi strand medium that you can use one,

47
00:04:58,860 --> 00:05:03,220
two, three, however many strands you want in your cross stitching and then you build

48
00:05:03,220 --> 00:05:10,220
up your pattern by making crosses. They however don't only sell floss. I work in tapestry

49
00:05:10,220 --> 00:05:15,900
wool also by DMC. It is slightly thicker and I prefer to work with it because I already

50
00:05:15,900 --> 00:05:22,460
have vision issues. But it makes for a more chunky aesthetic and it works really well

51
00:05:22,460 --> 00:05:28,260
with pixel art. But the problem is that floss and wool are not cross compatible. They do

52
00:05:28,260 --> 00:05:34,900
not share product codes and all of those closed source Windows only programs had floss as

53
00:05:34,900 --> 00:05:41,260
the only palette you could use. So I was having to manually translate between the two mediums.

54
00:05:41,260 --> 00:05:45,900
These colours are part of the Cranberry set. And while the names aren't strictly official,

55
00:05:45,900 --> 00:05:52,240
the codes are important. There is a guide for cross compatibility that you can find.

56
00:05:52,240 --> 00:05:57,640
But it is absolutely supposed to be a guide. This is useful when you need to convert between

57
00:05:57,640 --> 00:06:02,760
floss and wool. But you can see that there is a little bit of a problem here. There are

58
00:06:02,760 --> 00:06:08,760
missing colours. In this particular set, there are six colours for floss and only four for

59
00:06:08,760 --> 00:06:15,760
wool and my local shop only had three that I could take a picture of. This is slightly

60
00:06:16,760 --> 00:06:23,480
annoying, but it will get worse. We are also working with computers here. And computers

61
00:06:23,480 --> 00:06:28,680
don't understand arbitrary colour codes. They understand RGB. So we need a way to be able

62
00:06:28,680 --> 00:06:35,680
to convert between RGB between the DMC colour and RGB. Now, officially no mapping exists.

63
00:06:36,920 --> 00:06:41,720
This is proprietary information. Colours can drift over time. In fact, if you are working

64
00:06:41,720 --> 00:06:46,280
on a large project, it is recommended that you buy all your threads at once because there

65
00:06:46,280 --> 00:06:52,160
can be slight variations between the different dye lots. And this is a company that was created

66
00:06:52,160 --> 00:06:59,160
in the 1700s and it could be really easy to recreate or steal these kind of colours and

67
00:07:00,640 --> 00:07:07,640
thus undermine the entire ecosystem that this company is trying to make money from. However,

68
00:07:07,960 --> 00:07:14,960
there are ways around this. You can find unofficial mapping spreadsheets around the place. I have

69
00:07:15,120 --> 00:07:20,560
used this before to various effect. But you could create your own. You could go through

70
00:07:20,560 --> 00:07:25,080
every available colour thread, buy them all, take a picture in a white box room with the

71
00:07:25,080 --> 00:07:30,840
exact same lighting in the exact same environment and from there determine what the best colour

72
00:07:30,920 --> 00:07:37,920
is in RGB to represent it. If you have a consistent photo shoot, this is fine, but there is differences

73
00:07:38,360 --> 00:07:43,780
between dye lots, variations in the warmth of the lighting that you use and a whole bunch

74
00:07:43,780 --> 00:07:48,860
of other issues if you were to go about and actually take all these pictures. Thankfully

75
00:07:48,860 --> 00:07:53,200
DMC has done this for you. On their website, they have all the colours available for all

76
00:07:53,200 --> 00:07:59,040
their threads. The names aren't referenced anymore, but those unique identifying codes

77
00:07:59,040 --> 00:08:06,040
are. The other thing, though, this is the list of all the pinks available in tapestry

78
00:08:06,760 --> 00:08:12,560
wool now. There are no longer any cranberry colours. In fact, according to the website,

79
00:08:12,560 --> 00:08:17,960
as of this year, they only sell 100 different colours of tapestry wool and yet nearly 500

80
00:08:17,960 --> 00:08:24,200
colours of floss. Both these numbers are problematic. Back to this page, we can see that they have

81
00:08:24,200 --> 00:08:30,240
featured both the swatches and the full skein or spool or widget of thread and we can use

82
00:08:30,240 --> 00:08:36,600
these images to work out what the average colour of these yarns are. How? Using Pillow.

83
00:08:36,600 --> 00:08:42,680
We can use image stat dot stat and get the median, the average colour for each of these

84
00:08:42,680 --> 00:08:48,400
pictures. How do we do that? In our terminal that we have previously pip installed Pillow,

85
00:08:48,400 --> 00:08:52,960
we can import both image and image stat, load our colour swatch that we have downloaded

86
00:08:52,960 --> 00:08:59,040
from the website from our local file system and run image stat dot stat and then get the

87
00:08:59,040 --> 00:09:06,040
median which comes out as a list of three colours, R, G and B. Even though this projector

88
00:09:06,040 --> 00:09:11,520
has a lot of issues because projectors also have issues, this is a pretty good match on

89
00:09:11,520 --> 00:09:17,680
average of what that colour should be in real life. Because visualisations are fun, I have

90
00:09:17,680 --> 00:09:22,880
gone ahead and done a 3D plot scatter map of all the colours that are available for

91
00:09:22,880 --> 00:09:30,040
the floss palette. The three axes here are R, G and B. And comparing this image to the

92
00:09:30,040 --> 00:09:34,120
image that is coming up on the next slide for wool, you can see that there is a little

93
00:09:34,120 --> 00:09:39,600
bit of an issue with the complexity of the palettes here. I mean, they have both got

94
00:09:39,600 --> 00:09:45,920
red and black and blue and white and green, but there is a whole lot of nuance that is

95
00:09:45,920 --> 00:09:52,080
being lost here. So we only have 100 colours of wool to work with. So we need to ensure

96
00:09:52,080 --> 00:09:57,120
that when we get our images out, that we are only using those 100 distinct colours because

97
00:09:57,120 --> 00:10:01,320
they are the only colours that are physically available to us. And if you want to go dye

98
00:10:01,320 --> 00:10:06,440
your own colours, then that is good for you. But for me, I prefer to keep things a little

99
00:10:06,440 --> 00:10:12,080
bit simpler. Thankfully, we can reduce the exact colours that are in our image using

100
00:10:12,080 --> 00:10:19,040
Pillow. Again, using image.putpalettedata. What we can do is we can provide the exact

101
00:10:19,040 --> 00:10:25,840
palette that Pillow uses to identify each of the exact colours in an image. Again, in

102
00:10:25,840 --> 00:10:34,600
our terminal, we want to import image. And then we need to provide a 768 length list

103
00:10:35,600 --> 00:10:43,280
we want as a flattened list of 256 RGB value triples. So in this particular case, our palette

104
00:10:43,280 --> 00:10:50,480
would start with 000 black, 255 white and continue on. We then need to create a new

105
00:10:50,480 --> 00:10:54,480
image to serve as our platform to store our palette data. The size of the image doesn't

106
00:10:54,480 --> 00:11:01,000
count but the type does. The mode in this is P. P mode in Pillow is the palette mode

107
00:11:01,000 --> 00:11:07,000
where instead of having specific RGB values, the palette data is a list of indexes that

108
00:11:07,000 --> 00:11:14,480
point to your own custom palette. From here, we use our list and we set that as the data.

109
00:11:14,480 --> 00:11:20,360
When we then load our image from source and tell it to convert to use our custom palette,

110
00:11:20,360 --> 00:11:26,000
all of the colours in that image are converted to only use the set we specify. There is a

111
00:11:26,000 --> 00:11:32,480
complex algorithm to work out how best to combine these colours into the one set and

112
00:11:32,480 --> 00:11:36,920
work out the smallest distance and the math is interesting. But the fact that we can do

113
00:11:36,920 --> 00:11:42,360
this in Pillow out of the box is really great. Then we need to convert our image back into

114
00:11:42,360 --> 00:11:49,520
RGB and save it as an actual Python image, as a Pill image. You may see that I'm using

115
00:11:49,520 --> 00:11:55,280
some Dunder methods in here from private use case. This is because the public API in Pillow

116
00:11:55,280 --> 00:12:00,520
doesn't actually allow me to do this. I need to dive down into the C level constructs in order

117
00:12:00,520 --> 00:12:06,880
to make this happen. But this particular algorithm does mean that I can specify any colour palette

118
00:12:06,880 --> 00:12:15,280
I want and convert my image to only use colours from that palette. Now, that 256 number is a

119
00:12:15,280 --> 00:12:22,160
little bit special. You have a range of 256 integers that you can use to specify your RGB.

120
00:12:22,160 --> 00:12:29,600
Pillow also defines the length of the palette as being at maximum and at exactly 256 colours.

121
00:12:29,600 --> 00:12:36,480
We have 100 colours in our wool palette. So that's fine, right? We only define 100 colours in our

122
00:12:36,480 --> 00:12:42,040
palette. Well, no. See, this is the part of the talk where I was going to mention the fact that

123
00:12:42,040 --> 00:12:47,000
I was getting this really weird bug in Pillow. What would happen is I define my 100 colours in

124
00:12:47,000 --> 00:12:53,200
the palette, load up my application, run it, and I would end up getting all these colours that were

125
00:12:53,200 --> 00:12:58,760
coming back that were greyscale. All these really light colours that were not available as DMC

126
00:12:58,760 --> 00:13:05,400
threads that I couldn't stitch were coming up and they were always the same integers in the RGB.

127
00:13:05,400 --> 00:13:14,880
It turns out that by default a palette mode image in Pillow has a greyscale palette. And because I

128
00:13:14,880 --> 00:13:19,360
wasn't overloading this entire palette, some of these initialised values were coming through in

129
00:13:19,360 --> 00:13:26,320
my final product. So the solution here is to define your palette as exactly a length of 256

130
00:13:26,320 --> 00:13:32,960
triples. And what I did was take my last triple and just copy it all the way until the entire array

131
00:13:32,960 --> 00:13:38,880
was reinitialised. And that works. But on the other end of the scale, we have a problem where

132
00:13:38,880 --> 00:13:43,520
there are too many colours in our floss palette. We have nearly 500 colours to work with, but only

133
00:13:43,520 --> 00:13:50,160
256 spaces in which to store that in our palette. So we need to somehow truncate it. So how do we

134
00:13:50,160 --> 00:13:56,480
choose which colours we remove? Now, for any cross-stitches or fibre-arts people in the room,

135
00:13:56,480 --> 00:14:00,480
this is the part where it may be a little bit controversial, but I'm working with computers here

136
00:14:00,480 --> 00:14:08,800
and I have to make a compromise. All floss colours are different. They are so unique and so close in

137
00:14:08,800 --> 00:14:13,600
some of the browns and the creams that you can make entire tapestries where you cannot tell where

138
00:14:13,600 --> 00:14:18,160
the colour is changing and it makes for some beautiful artwork. Unfortunately, I'm constricted

139
00:14:18,160 --> 00:14:25,520
by computers and I acknowledge this and I am sorry. To reduce the amount of colours in our palette,

140
00:14:25,520 --> 00:14:31,280
we need to prune the colours that are closest together. And to do that, there is an algorithm.

141
00:14:31,280 --> 00:14:38,720
There is math. This is an algorithm put out by the International Commission for Illumination

142
00:14:38,720 --> 00:14:45,120
which is to do with their experiences based on automotive paint on smooth surfaces. This algorithm

143
00:14:45,120 --> 00:14:52,320
is designed to kind of replicate human perception. You put in two colours and it will show the

144
00:14:52,320 --> 00:14:57,520
distance between those colours. The bigger the number, the further they are apart. The smaller

145
00:14:57,520 --> 00:15:02,400
the number, the closer they are. And thankfully, because we live in a Python ecosystem, I don't

146
00:15:02,400 --> 00:15:07,840
try to have to implement this by hand. I can just import it from scikit image. They have made

147
00:15:07,840 --> 00:15:13,120
available the algorithm where if I provide two colours, it will give me the distance. And again,

148
00:15:13,120 --> 00:15:18,880
in my terminal, I can import both NumPy and scikit image, load up my Python interpreter,

149
00:15:18,880 --> 00:15:23,440
import this particular formula, give it the two colours and it will give me the distance.

150
00:15:24,160 --> 00:15:28,560
For my entire floss palette, I can then go through and compare every single colour with each other,

151
00:15:29,120 --> 00:15:35,600
store that result, sort it by smallest distance and come up with a list that shows just how

152
00:15:35,600 --> 00:15:41,360
close the colours are. This project are notwithstanding, these colours in real life

153
00:15:41,360 --> 00:15:48,320
are so ridiculously close together that if I had to choose, I can take my list and just go full

154
00:15:48,320 --> 00:15:57,680
Thanos on it. Again, not the best solution in the world but I have my reasons. If we were to use the

155
00:15:57,680 --> 00:16:04,240
same visualisation as before, this is our original floss palette and then if I reduce it to only 256,

156
00:16:04,240 --> 00:16:12,720
we still get the complexity of colours. But we can work with that 256 more easily because reasons.

157
00:16:14,480 --> 00:16:20,240
Next problem, cross-titch charts. Third problem, this one should be easy, right? We can just use

158
00:16:20,240 --> 00:16:27,200
Pillow. Well, that's been the solution of every problem so far and I did try using Pillow. I've

159
00:16:27,200 --> 00:16:33,280
used image draw to try to replicate this system where I was building up a chart and I was making

160
00:16:33,280 --> 00:16:38,880
tables and concatenating squares together but the results weren't what I wanted. I had weird

161
00:16:38,880 --> 00:16:43,680
default system fonts. I couldn't get Unicode characters to work. I was sitting there thinking

162
00:16:43,680 --> 00:16:49,200
there's got to be a better way, a way of being able to typeset any character with whatever styles

163
00:16:49,200 --> 00:16:57,760
and tables and oh yeah, that's just HTML. Using HTML and whatever CSS styling I want, I can build

164
00:16:57,760 --> 00:17:03,680
up a page of divs and spans, the odd table here and there for my legend and I can make my chart.

165
00:17:04,720 --> 00:17:10,160
Finally, I have these three problems solved. For image manipulation, we're using image.getpixel.

166
00:17:10,800 --> 00:17:16,080
For colour setting, we're using image stat, put palette and then the scikit image formula that

167
00:17:16,080 --> 00:17:22,560
we described earlier. Then for the cross-titch charts, we're using HTML. The result of solving

168
00:17:22,560 --> 00:17:31,920
these problems is a Python pip installable package called IH. Why is it called IH? It's a

169
00:17:31,920 --> 00:17:36,640
cross-stitching app. There's a Disney movie called Lilo and Stitch. There's a character in Lilo and

170
00:17:36,640 --> 00:17:43,200
Stitch called Stitch. There's a scene in which Stitch is able to convey to another main character

171
00:17:43,200 --> 00:17:49,840
a complex persuasive argument by saying IH. Plus it's a super short name that was available on

172
00:17:49,840 --> 00:17:56,240
PyPI so why not? The work in progress for all this stuff that I've done is also under a repo

173
00:17:56,240 --> 00:18:06,000
called experiment 626 for similar reasons. Now I can generate a chart that looks exceedingly

174
00:18:06,000 --> 00:18:10,560
familiar to those closed source Windows only applications that I used five years ago. It

175
00:18:10,560 --> 00:18:16,560
also has some really nice features that I like including the exact amount of stitches that I need

176
00:18:16,560 --> 00:18:21,680
that I can then use my own estimations to work out how many physical skins of wool I need.

177
00:18:22,880 --> 00:18:31,440
I always have blank white as the tiniest little dot that I can to make it look as normal as I can

178
00:18:31,440 --> 00:18:38,160
if I was to see this as a rendered image. Here's something I prepared earlier. This particular

179
00:18:38,160 --> 00:18:46,000
logo you may recognise. It's on every sign including that one. The Twitter logo is a similar

180
00:18:46,000 --> 00:18:52,400
format. Now this image itself doesn't work well for this particular medium mostly. It's too big.

181
00:18:52,400 --> 00:18:58,240
Also there's a gradient going on in the skyline and for my particular medium I prefer pixel art

182
00:18:58,240 --> 00:19:05,840
where gradients are annoying. So I've recreated the PyCon logo in pixel art. Now I'm no Paul

183
00:19:05,840 --> 00:19:13,280
Robinson but that kind of looks like the logo I guess. So in my terminal I can pip install

184
00:19:13,440 --> 00:19:22,800
I and I can run it on my tiny PyCon dot image and I get a HTML out which is a cross stitch pattern

185
00:19:22,800 --> 00:19:29,280
that I can use to then sit on a nice sunny Saturday afternoon in Australia on my couch

186
00:19:29,280 --> 00:19:35,920
with some YouTube channel happening on the TV and then slowly but surely build up my image on my

187
00:19:35,920 --> 00:19:43,280
little tiny chart and tweet about this on Instagram and then have my final image be this.

188
00:19:52,240 --> 00:19:57,280
You know what that's too small.

189
00:20:05,920 --> 00:20:09,920
And what is now tradition this will be auctioned off tomorrow night at the PyLadies charity

190
00:20:09,920 --> 00:20:13,520
auction. If you already have a ticket I hope to see you there with your wallets out.

191
00:20:14,800 --> 00:20:20,080
It makes me really happy that as a community we can really embrace the stuff that's not tech.

192
00:20:21,200 --> 00:20:28,960
We have a arts festival on tonight. We have other skills lightning talks at conferences. We have

193
00:20:28,960 --> 00:20:34,480
people who have brought their knitting. We have people that are crocheting in the front row which

194
00:20:34,480 --> 00:20:40,800
is amazing. And I think there's like acro yoga somewhere later and I'm all about that. So

195
00:20:42,240 --> 00:20:46,800
this is now up on the warehouse but if CLIs aren't your style I've also wrapped this up

196
00:20:46,800 --> 00:20:52,800
in a docker container which I've hosted for you on Google Cloud Run. If you go to ich as a service

197
00:20:52,800 --> 00:21:02,720
aah.glazent.com you can use this give it a URL to a particular image and that will generate a

198
00:21:02,720 --> 00:21:09,920
chart for you. One thing it also does is it shows the rendered estimations of what's going on. So

199
00:21:09,920 --> 00:21:17,360
this kind of looks like a parrot. The hacky way that I got this to happen is to have each of those

200
00:21:17,360 --> 00:21:22,320
little squares as a semi-transparent image that allows the CSS colour to shine through.

201
00:21:23,360 --> 00:21:28,720
And if I just copy that across and have all the colours come in it looks like a rough estimation

202
00:21:28,720 --> 00:21:34,800
of what the result will be. If hosted stateless containers as a service is something that

203
00:21:34,800 --> 00:21:38,160
interests you come talk to me at the Google booth afterwards. We have a service for that.

204
00:21:39,600 --> 00:21:45,520
Practical applications. So you can actually use this for techy reasons if you wanted to say

205
00:21:45,520 --> 00:21:52,320
if you wanted to create a scanable QR code for your home Wi-Fi you could pip install QR code,

206
00:21:52,320 --> 00:21:59,840
give it a string, save that as an image and then import that image into ich and render it. Now

207
00:21:59,840 --> 00:22:07,440
you do need to set the scale on this because the QR code is big. So if you want one pixel per square

208
00:22:07,440 --> 00:22:12,880
you need to set the scale to ten times reduction. And we're also setting the flag R here to render

209
00:22:12,880 --> 00:22:19,600
it. And we get a scanable QR code. And if you stitch this and put it on your wall in a frame

210
00:22:19,600 --> 00:22:25,120
it works. And you can scan this rendering now and it should work. Did it work?

211
00:22:32,960 --> 00:22:42,320
What does it say? Yes! It says in French this is not a password.

212
00:22:42,960 --> 00:22:47,760
I'm not going to put my home Wi-Fi password on a screen are you silly?

213
00:22:49,200 --> 00:22:55,920
So I clipped together these particular bits of Python about 18 months ago now and tweeted about

214
00:22:55,920 --> 00:23:01,680
it saying that I had this thing that would make cross-chatch charts of your QR code and that was

215
00:23:01,680 --> 00:23:07,520
a little tiny bit popular and it got a little bit of attention. And because peer pressure is a thing

216
00:23:07,520 --> 00:23:13,120
I made it into a CLI. And then because peer pressure is also a thing I've also hosted that

217
00:23:13,120 --> 00:23:19,200
up on Google Cloud Run as QR.Glazon.com. You give it a string it will give you a cross-stitch chart.

218
00:23:20,960 --> 00:23:27,040
So I've extended the functionality of this project over the years based on what I wanted five years

219
00:23:27,040 --> 00:23:34,160
ago into a system that is now hosted that anyone can use. It supports various palettes including

220
00:23:34,160 --> 00:23:42,720
floss and wool and alpaca because I gave this as a lightning talk at LCA 2018 and one of the questions

221
00:23:42,720 --> 00:23:48,640
was do you support other palettes? What about alpaca? I said yes but you would need an alpaca

222
00:23:48,640 --> 00:23:53,520
farm and be able to get all the different colors. They had an alpaca farm.

223
00:23:57,360 --> 00:24:02,960
It also supports Lego. It also supports perler beads because those are palettes that are also

224
00:24:02,960 --> 00:24:08,400
available that I've been able to import into the system. I've also got some twitter bots that are

225
00:24:08,400 --> 00:24:14,160
using this similar system. Come talk to me at the Pie Ladies booth afterwards if really silly twitter

226
00:24:14,160 --> 00:24:21,760
bots that do cross-stitch charts of tiny care bot is something that would interest you. And that's

227
00:24:21,760 --> 00:24:26,800
all I had for those of you with a ticket to the auction tomorrow night. I hope to see you there

228
00:24:26,880 --> 00:24:34,640
and thank you for your time.

229
00:24:41,120 --> 00:24:46,800
And if once I get off stage I will be taking my lovely tapestry to the Pie Ladies booth.

230
00:24:46,800 --> 00:24:51,360
Please follow me there. Thank you.

