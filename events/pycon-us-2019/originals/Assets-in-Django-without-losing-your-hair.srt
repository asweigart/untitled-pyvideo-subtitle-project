1
00:00:00,000 --> 00:00:04,440
Our next speaker is Jacob Kaplan-Moss, and he will be teaching us about assets in Django.

2
00:00:04,440 --> 00:00:07,440
Please make him feel welcome.

3
00:00:07,440 --> 00:00:13,720
Howdy, folks.

4
00:00:13,720 --> 00:00:16,400
So I started this talk with a hypothesis.

5
00:00:16,400 --> 00:00:20,820
I've always been super frustrated with managing static assets in Django.

6
00:00:20,820 --> 00:00:27,000
It's been one of the parts that I feel like, you know, I'm supposedly the Django creator,

7
00:00:27,000 --> 00:00:34,880
and I ought to know it, but I really, it never felt easy, it never felt smooth, and so I

8
00:00:34,880 --> 00:00:38,200
had this idea, okay, I'm going to propose a talk for PyCon, and if it's accepted, I

9
00:00:38,200 --> 00:00:39,600
will be forced to figure it out.

10
00:00:39,600 --> 00:00:40,600
I'll get to write.

11
00:00:40,600 --> 00:00:44,560
It's called conference-driven development, everyone.

12
00:00:44,560 --> 00:00:45,760
I'll be forced to figure it out.

13
00:00:45,760 --> 00:00:51,720
I'll be able to finally come up with a good answer, and it will no longer be hard again.

14
00:00:51,720 --> 00:00:58,560
I am sorry to report that my hypothesis was incorrect, and the title is somewhat misleading.

15
00:00:58,560 --> 00:01:05,160
It is, in fact, not possible to handle assets in Django entirely smoothly and entirely easily,

16
00:01:05,160 --> 00:01:10,400
and that's because while the simple things are simple and easy, the hard things are actually

17
00:01:10,400 --> 00:01:12,480
hard, unfortunately.

18
00:01:12,480 --> 00:01:19,200
So the title is a bit of a bait and switch, but hopefully by the end of this talk, you'll

19
00:01:19,240 --> 00:01:23,160
at least have a fairly good framework to move forward and handle things with a little less

20
00:01:23,160 --> 00:01:29,880
head scratching and some good ideas for best practices around this area.

21
00:01:29,880 --> 00:01:33,840
Before we dive in, I want to share a couple of terms and terminology just to make sure

22
00:01:33,840 --> 00:01:35,600
we're all on the same page about them.

23
00:01:35,600 --> 00:01:40,320
So when I say assets, I'm talking about the non-code parts of your app.

24
00:01:40,320 --> 00:01:42,720
Sorry, the non-Python code parts of your app.

25
00:01:42,720 --> 00:01:48,940
I'm talking about CSS, JavaScript, images like logos or icons, you know, anything that

26
00:01:48,940 --> 00:01:52,100
you're using that's part of your app that isn't sort of interpreted, it isn't part of

27
00:01:52,100 --> 00:01:53,620
your Python code.

28
00:01:53,620 --> 00:02:00,300
Now, Django uses the term static for these things, and that's a historical wart.

29
00:02:00,300 --> 00:02:06,260
Like there wasn't a best practice name for this stuff back 15 years ago when we were

30
00:02:06,260 --> 00:02:11,380
inventing some of this, so you'll see most of the places around Django, you'll see the

31
00:02:11,380 --> 00:02:13,700
term static.

32
00:02:13,700 --> 00:02:19,020
I will try to use the word assets throughout this talk because I think it's clearer, but

33
00:02:19,020 --> 00:02:22,180
you will still see in a lot of the settings and a lot of the Django documentation the

34
00:02:22,180 --> 00:02:25,900
term static, and these are the same things.

35
00:02:25,900 --> 00:02:31,300
Django also uses this term media, which specifically refers to stuff that is sort of dynamic and

36
00:02:31,300 --> 00:02:35,380
uploaded, and so these are things that users will upload.

37
00:02:35,380 --> 00:02:38,500
These could be admin users uploaded through the admin interface, or these could be end

38
00:02:38,500 --> 00:02:41,760
users of the site, but the point is it's not part of your code base.

39
00:02:41,760 --> 00:02:42,760
It's not checked in.

40
00:02:42,760 --> 00:02:43,760
It's not distributed.

41
00:02:43,760 --> 00:02:44,760
It's not part of your app.

42
00:02:44,760 --> 00:02:46,480
It's something dynamic and uploaded.

43
00:02:46,480 --> 00:02:51,760
Images, PDF files, whatever all else you're letting your folk, your users upload.

44
00:02:51,760 --> 00:02:55,200
And Django uses the term media for all of that stuff.

45
00:02:55,200 --> 00:02:59,040
So I'm going to cover four scenarios.

46
00:02:59,040 --> 00:03:01,840
The first scenario is the sort of simplest version.

47
00:03:01,840 --> 00:03:06,800
You've got some JavaScript or CSS, and you're fine with that living on the file system.

48
00:03:06,800 --> 00:03:12,040
This actually covers probably 80% of the use cases, and the good news is this is very simple.

49
00:03:12,040 --> 00:03:15,740
If there's a theme of this talk, it's don't overthink it, and this is the don't overthink

50
00:03:15,740 --> 00:03:16,740
it model.

51
00:03:16,740 --> 00:03:18,740
Like you just need to write some JavaScript.

52
00:03:18,740 --> 00:03:19,740
JavaScript's really good now.

53
00:03:19,740 --> 00:03:24,880
You probably don't need a JavaScript precompiler unless you're doing pretty advanced stuff.

54
00:03:24,880 --> 00:03:26,540
Likewise CSS is really good now.

55
00:03:26,540 --> 00:03:33,260
You probably don't need any sort of fancy CSS stuff until you do.

56
00:03:33,260 --> 00:03:37,160
The second scenario is the cloud storage scenario.

57
00:03:37,160 --> 00:03:41,340
So at a certain point, having your assets being shipped along with your code starts

58
00:03:41,380 --> 00:03:43,620
to fall apart.

59
00:03:43,620 --> 00:03:47,660
This is sort of large scale in terms of traffic, but also large scale in terms of development

60
00:03:47,660 --> 00:03:51,980
team, large scale in terms of a lot of assets to be compiled and shifted around.

61
00:03:51,980 --> 00:03:56,980
So at a certain point, you probably want to start storing your stuff on a cloud storage

62
00:03:56,980 --> 00:04:02,580
service like S3 or the Google equivalent, et cetera.

63
00:04:02,580 --> 00:04:07,140
This is also a prerequisite in my mind to doing media uploads correctly.

64
00:04:07,140 --> 00:04:12,860
In most deployment scenarios, uploading, having media uploads go to the actual web servers

65
00:04:12,860 --> 00:04:19,260
is a bad practice for a variety of reasons, from scalability to security to sort of just

66
00:04:19,260 --> 00:04:21,300
best practice development.

67
00:04:21,300 --> 00:04:25,260
So when you come to media uploads, you kind of need to have the cloud stuff worked out,

68
00:04:25,260 --> 00:04:27,900
and the good news is those things work well together.

69
00:04:27,900 --> 00:04:33,120
And finally, the last sort of most complicated scenario is you want to do fancy stuff.

70
00:04:33,120 --> 00:04:34,180
You want to use JSX.

71
00:04:34,180 --> 00:04:35,260
You want to use ES Next.

72
00:04:35,260 --> 00:04:36,740
You want to use post CSS.

73
00:04:37,660 --> 00:04:39,180
You're building a big React app.

74
00:04:39,180 --> 00:04:44,100
You've got all the sort of heavy front end tooling, and you want that to work well with

75
00:04:44,100 --> 00:04:46,940
your Django app.

76
00:04:46,940 --> 00:04:49,780
So the simple scenario.

77
00:04:49,780 --> 00:04:52,900
Most of the time, this is where you should start.

78
00:04:52,900 --> 00:04:57,020
And everything in this scenario kind of gets built on in the later ones, so there's no

79
00:04:57,020 --> 00:05:00,020
downside to kind of starting here.

80
00:05:00,020 --> 00:05:04,140
I always try to get away with this for as long as I can and only start to get more complex

81
00:05:04,260 --> 00:05:07,940
when I need to get more complex.

82
00:05:07,940 --> 00:05:13,380
This will scale for most like, I don't know, like medium-ish web apps.

83
00:05:13,380 --> 00:05:14,700
Actually it's like fairly well.

84
00:05:14,700 --> 00:05:22,260
I would say 80% of what I develop is suited just fine with this scenario.

85
00:05:22,260 --> 00:05:24,420
This doesn't support any sort of fancy compilations.

86
00:05:24,420 --> 00:05:29,820
If you want to use post CSS or less or Sass, you're out of luck here.

87
00:05:29,820 --> 00:05:36,220
And it's relatively slow and inefficient, as we'll see in a bit.

88
00:05:36,220 --> 00:05:39,060
So you're going to want to use White Noise.

89
00:05:39,060 --> 00:05:45,620
White Noise is a static file server that lets you use Django to actually serve these static

90
00:05:45,620 --> 00:05:46,860
files.

91
00:05:46,860 --> 00:05:50,620
Back in the day, this was discouraged.

92
00:05:50,620 --> 00:05:57,300
We used to encourage that people use an external third-party web server to serve static assets,

93
00:05:57,300 --> 00:05:58,780
something like NGINX.

94
00:05:58,780 --> 00:06:01,300
That's no longer the case.

95
00:06:01,300 --> 00:06:02,900
White Noise is really quite good.

96
00:06:02,900 --> 00:06:06,900
It integrates super well with Django and it means that you can just have one server out

97
00:06:06,900 --> 00:06:11,300
of the box that serves both your dynamic stuff and your static stuff.

98
00:06:11,300 --> 00:06:16,860
As a bonus, White Noise sets all the correct headers on your assets so that if you use

99
00:06:16,860 --> 00:06:19,540
a CDN like CloudFlare, it kind of just works.

100
00:06:19,540 --> 00:06:23,420
You just point CloudFlare at your Django site and you've got caching of all your static

101
00:06:23,420 --> 00:06:25,340
stuff.

102
00:06:25,340 --> 00:06:26,500
No configuration needed.

103
00:06:26,500 --> 00:06:27,500
It's real nice.

104
00:06:27,500 --> 00:06:31,260
So here's what setting up this stuff looks like.

105
00:06:31,260 --> 00:06:35,540
There's really two key settings to pay attention to when you're thinking about static files.

106
00:06:35,540 --> 00:06:38,380
When you think about assets, excuse me.

107
00:06:38,380 --> 00:06:44,780
There's the static files DERS setting, which tells Django where your source files live,

108
00:06:44,780 --> 00:06:47,380
where the static files that you're writing live.

109
00:06:47,380 --> 00:06:53,940
And then there's the static root setting that tells Django where all of the static files

110
00:06:54,140 --> 00:06:58,580
from those directories are going to be served by your web server.

111
00:06:58,580 --> 00:07:04,780
And so when you run the collect static management command, what's going to happen is Django's

112
00:07:04,780 --> 00:07:10,340
going to look at everything in those static file directories, suck it all out and drop

113
00:07:10,340 --> 00:07:13,860
it into that directory pointed at by static root.

114
00:07:13,860 --> 00:07:19,180
And then you would then point your web server at that static root directory.

115
00:07:19,180 --> 00:07:22,620
Now White Noise does this automatically so you don't need that extra step.

116
00:07:22,620 --> 00:07:27,540
But if you wanted to use something like NGINX to serve your assets, you could just point

117
00:07:27,540 --> 00:07:28,540
it at that directory.

118
00:07:28,540 --> 00:07:34,220
And the reason you need this level of indirection, by the way, is assets can be collected not

119
00:07:34,220 --> 00:07:39,540
just from the directories specified in that static files DERS setting, but also from installed

120
00:07:39,540 --> 00:07:40,540
apps.

121
00:07:40,540 --> 00:07:46,000
So that's how, for example, the CSS and JavaScript associated with the admin get collected and

122
00:07:46,000 --> 00:07:51,280
put into that same directory so that when your admin is served, it has styles.

123
00:07:51,280 --> 00:07:56,760
If you've ever deployed a Django site, turned debug off and suddenly discovered your admin

124
00:07:56,760 --> 00:07:59,960
doesn't have any styles, that's what's happening here.

125
00:07:59,960 --> 00:08:03,200
You haven't properly configured static files and so the admin doesn't know where to find

126
00:08:03,200 --> 00:08:06,360
its CSS and so you don't get styling in your admin.

127
00:08:06,360 --> 00:08:11,480
The last bit of this scenario is making sure that you're correctly referencing those files

128
00:08:11,480 --> 00:08:15,760
in your templates when you need to include a script or a CSS file.

129
00:08:16,760 --> 00:08:17,760
So that's the first step.

130
00:08:17,760 --> 00:08:20,760
The second step is to make sure that you're using the right file.

131
00:08:20,760 --> 00:08:23,760
So you're going to have to use a static file.

132
00:08:23,760 --> 00:08:25,760
So you're going to have to use a static file.

133
00:08:25,760 --> 00:08:27,760
So you're going to have to use a static file.

134
00:08:27,760 --> 00:08:29,760
So you're going to have to use a static file.

135
00:08:29,760 --> 00:08:31,760
So you're going to have to use a static file.

136
00:08:31,760 --> 00:08:33,760
So you're going to have to use a static file.

137
00:08:33,760 --> 00:08:35,760
So you're going to have to use a static file.

138
00:08:35,760 --> 00:08:37,760
So you're going to have to use a static file.

139
00:08:37,760 --> 00:08:39,760
So you're going to have to use a static file.

140
00:08:39,760 --> 00:08:41,760
So you're going to have to use a static file.

141
00:08:41,760 --> 00:08:43,760
So you're going to have to use a static file.

142
00:08:43,760 --> 00:08:45,760
So that's the first one with the green checkmark.

143
00:08:45,760 --> 00:08:47,760
Everything just kind of works.

144
00:08:47,760 --> 00:08:51,760
So in this scenario, your best practices are to use white noise.

145
00:08:51,760 --> 00:08:55,760
Pay attention to your static file directories and your static root.

146
00:08:55,760 --> 00:08:58,760
I would just like, these are my common ones.

147
00:08:58,760 --> 00:09:01,760
I put my static files in a directory called assets,

148
00:09:01,760 --> 00:09:05,760
and I have static root called static root so that I know exactly what it is.

149
00:09:05,760 --> 00:09:10,760
Reference your files with the static tag, and just run collect static at deploy time.

150
00:09:10,760 --> 00:09:12,760
Don't try to be fancy about when you run collect static.

151
00:09:12,760 --> 00:09:16,760
Just run it every time you do a deploy, like as a post deploy step.

152
00:09:16,760 --> 00:09:22,760
If you're using Heroku or another cloud library that uses the same build packs,

153
00:09:22,760 --> 00:09:26,760
collect static will be run automatically for you for this reason.

154
00:09:26,760 --> 00:09:28,760
This isn't like the best practice in a global sense.

155
00:09:28,760 --> 00:09:35,760
Running asset compilation on your production servers is kind of a code smell,

156
00:09:35,760 --> 00:09:39,760
but for this sort of simple scenario, it's fine, and don't overthink it.

157
00:09:41,760 --> 00:09:45,760
Okay, so at a certain point, instead of just having stuff on your file system,

158
00:09:45,760 --> 00:09:48,760
you want to put them in cloud storage.

159
00:09:48,760 --> 00:09:50,760
This might be you've got a bunch of images,

160
00:09:50,760 --> 00:09:53,760
and so blowing out your file system on all your app servers is a problem.

161
00:09:53,760 --> 00:09:56,760
This might be because you've got a bunch of different developers,

162
00:09:56,760 --> 00:09:59,760
and you're starting to separate front end and back end development,

163
00:09:59,760 --> 00:10:04,760
and so the process of deploying assets is a little bit complicated.

164
00:10:04,760 --> 00:10:08,760
You might have high traffic, so you want the sort of efficiency

165
00:10:08,760 --> 00:10:12,760
and lower cost of something like S3.

166
00:10:12,760 --> 00:10:14,760
There's a bunch of reasons why you might want this.

167
00:10:14,760 --> 00:10:17,760
You also might want to be doing this as a prerequisite

168
00:10:17,760 --> 00:10:20,760
for allowing users to upload media.

169
00:10:21,760 --> 00:10:27,760
At this point, DevProd parity, having equivalency

170
00:10:27,760 --> 00:10:30,760
between your local development environment and your deployment environment

171
00:10:30,760 --> 00:10:33,760
starts to be a concern, and I'm going to cover that in a minute,

172
00:10:33,760 --> 00:10:35,760
but start thinking about it now.

173
00:10:35,760 --> 00:10:39,760
So the library you want to be looking at here is something called Django Storages.

174
00:10:39,760 --> 00:10:44,760
Django Storages provides built-in asset and media storage engines

175
00:10:44,760 --> 00:10:46,760
for basically everything.

176
00:10:46,760 --> 00:10:51,760
It even supports FTP, which I don't know that anybody's using anymore.

177
00:10:51,760 --> 00:10:55,760
If it doesn't, there is an API to write your own that's part of Django,

178
00:10:55,760 --> 00:10:56,760
and it's actually not that complex.

179
00:10:56,760 --> 00:10:58,760
If you look at Django Storages source code,

180
00:10:58,760 --> 00:11:00,760
it's actually not particularly complicated,

181
00:11:00,760 --> 00:11:04,760
but most of the time you can just install Django Storages

182
00:11:04,760 --> 00:11:08,760
and it will just pass whatever other third-party prereq like Bodo you need,

183
00:11:08,760 --> 00:11:10,760
and stuff will just work.

184
00:11:11,760 --> 00:11:13,760
You'll end up needing a bunch of settings.

185
00:11:13,760 --> 00:11:15,760
This is my settings file.

186
00:11:15,760 --> 00:11:21,760
So the stuff on top is basically all the sort of AWS preamble

187
00:11:21,760 --> 00:11:24,760
that you need to set up to make these files work right.

188
00:11:24,760 --> 00:11:26,760
The key is the stuff in bold.

189
00:11:26,760 --> 00:11:30,760
So there's a couple of good practices here that I'm showing off.

190
00:11:30,760 --> 00:11:33,760
The first is that the static file storage setting is the main setting

191
00:11:33,760 --> 00:11:38,760
that controls what Django's collect static command uses to actually store the files.

192
00:11:38,760 --> 00:11:42,760
And so here I'm switching away from the default and saying I want to store stuff on S3.

193
00:11:42,760 --> 00:11:46,760
The other thing that I'm doing is specific to the S3 backend,

194
00:11:46,760 --> 00:11:50,760
but I'm giving a prefix to everything that I upload.

195
00:11:50,760 --> 00:11:55,760
And that lets me, that means when I run collect static on my laptop in debug,

196
00:11:55,760 --> 00:11:57,760
I upload my assets one place.

197
00:11:57,760 --> 00:11:59,760
So I can test that uploading step.

198
00:11:59,760 --> 00:12:02,760
I can make sure that AWS is working correctly and all my creds are good

199
00:12:02,760 --> 00:12:06,760
and getting everything right, but it also won't stomp on my production files.

200
00:12:06,760 --> 00:12:08,760
There are a bunch of other ways you can do this.

201
00:12:08,760 --> 00:12:11,760
And once you start adding staging servers and review apps,

202
00:12:11,760 --> 00:12:13,760
this can get a little bit more complex.

203
00:12:13,760 --> 00:12:17,760
But it's a good practice here to start having sort of separation

204
00:12:17,760 --> 00:12:21,760
between where your assets upload so you don't accidentally upload testing stuff

205
00:12:21,760 --> 00:12:23,760
into your production server.

206
00:12:23,760 --> 00:12:26,760
Now a big downside of doing it like I've done here is if,

207
00:12:26,760 --> 00:12:29,760
at this point I can only develop online, right,

208
00:12:29,760 --> 00:12:32,760
because when I run collect static or when I run my web server,

209
00:12:32,760 --> 00:12:35,760
I'm getting files served off of S3.

210
00:12:35,760 --> 00:12:39,760
I think this is probably a good idea because you want your local development

211
00:12:39,760 --> 00:12:42,760
environment to be as close to your production environment as possible,

212
00:12:42,760 --> 00:12:44,760
but that may not work for everyone.

213
00:12:44,760 --> 00:12:48,760
And so if it doesn't work for you, you could add some additional conditional logic

214
00:12:48,760 --> 00:12:51,760
in your settings file to when debug is on,

215
00:12:51,760 --> 00:12:54,760
fall back to the white noise local file system storage

216
00:12:54,760 --> 00:12:56,760
like I presented in the previous one.

217
00:12:56,760 --> 00:12:58,760
That's just another line or two in your settings file.

218
00:12:58,760 --> 00:13:00,760
And it's okay.

219
00:13:00,760 --> 00:13:06,760
It's a trade-off I want you to think about between having good parity

220
00:13:06,760 --> 00:13:11,760
between development and production or making like coding on a plane

221
00:13:11,760 --> 00:13:13,760
something that you're able to do.

222
00:13:15,760 --> 00:13:18,760
So what collect static actually does that I skipped over the first time

223
00:13:18,760 --> 00:13:23,760
I showed you this slide is it actually consults this static file storage setting

224
00:13:23,760 --> 00:13:25,760
to figure out what to do with your assets.

225
00:13:25,760 --> 00:13:28,760
So it still is going to look in those static file directories,

226
00:13:28,760 --> 00:13:31,760
but what actually is happening is it's saying, all right, storage engine,

227
00:13:31,760 --> 00:13:34,760
I found app.js.

228
00:13:34,760 --> 00:13:36,760
What do you want to do with it?

229
00:13:36,760 --> 00:13:39,760
And so in this case, in my example, the S3 storage says,

230
00:13:39,760 --> 00:13:44,760
okay, I want to stick that over on S3 instead of sticking it in that static root file.

231
00:13:44,760 --> 00:13:49,760
And so now when I run collect static, my files get pulled from wherever they are

232
00:13:49,760 --> 00:13:52,760
in my source repository and pushed up to S3 or Dropbox

233
00:13:52,760 --> 00:13:55,760
or whatever else you're using for your storage engine.

234
00:13:57,760 --> 00:13:59,760
And this is why you want to be using that static tag,

235
00:13:59,760 --> 00:14:01,760
because once I switch my storage engine over,

236
00:14:01,760 --> 00:14:05,760
it's actually going to ask my storage engine, hey, what's the URL for app.js?

237
00:14:05,760 --> 00:14:11,760
And my storage engine is going to say, oh, hey, it's this particular bucket URL,

238
00:14:11,760 --> 00:14:16,760
and it will actually get a full reference to my S3 bucket.

239
00:14:17,760 --> 00:14:23,760
So if you want to do cloud storage, Django Storage is your answer.

240
00:14:23,760 --> 00:14:25,760
It basically just works.

241
00:14:25,760 --> 00:14:28,760
It integrates well with all the rest of the stuff that we'll see later.

242
00:14:28,760 --> 00:14:31,760
The key setting to look at is your static file storage setting

243
00:14:31,760 --> 00:14:34,760
plus whatever other settings you need to configure that engine.

244
00:14:34,760 --> 00:14:36,760
The Django Storage's docs are good.

245
00:14:36,760 --> 00:14:38,760
They'll tell you what you need to do.

246
00:14:38,760 --> 00:14:41,760
Just find your preferred engine of choice and walk through it.

247
00:14:41,760 --> 00:14:44,760
Remember to reference static files and templates with the static tag.

248
00:14:44,760 --> 00:14:47,760
And finally, this is probably the point that you should think about a different way

249
00:14:47,760 --> 00:14:51,760
of actually deploying your assets to production.

250
00:14:51,760 --> 00:14:56,760
Doing it as part of the deploy step is going to slow down substantially now,

251
00:14:56,760 --> 00:15:01,760
because you're pushing a bunch of files to an external storage engine

252
00:15:01,760 --> 00:15:03,760
rather than just copying them on disk.

253
00:15:03,760 --> 00:15:07,760
So this is a good time to start putting your collect static command

254
00:15:07,760 --> 00:15:12,760
into a CI task somewhere or some other post deploy hook.

255
00:15:12,760 --> 00:15:14,760
That's kind of out of scope for this talk,

256
00:15:14,760 --> 00:15:18,760
but there are probably other talks here at PyCon about continuous integration,

257
00:15:18,760 --> 00:15:23,760
and you should be able to figure that out with a little bit of head banging.

258
00:15:23,760 --> 00:15:25,760
All right, so media.

259
00:15:25,760 --> 00:15:29,760
The use case here is where you want people to be able to upload files.

260
00:15:29,760 --> 00:15:33,760
And the good news here is if you've done step two, if you've done scenario two,

261
00:15:33,760 --> 00:15:35,760
this is super, super easy.

262
00:15:36,760 --> 00:15:42,760
I do really want to encourage you to take the added time to get a cloud storage engine

263
00:15:42,760 --> 00:15:46,760
set up before you allow file uploads.

264
00:15:46,760 --> 00:15:48,760
That's for a couple reasons.

265
00:15:48,760 --> 00:15:50,760
One is safety and security.

266
00:15:50,760 --> 00:15:54,760
Although the file upload code in Django is pretty hardened and pretty hammered on

267
00:15:54,760 --> 00:15:58,760
and hasn't had security vulnerabilities in a long, long time,

268
00:15:58,760 --> 00:16:04,760
it's still dangerous to be letting people put stuff on your web server.

269
00:16:04,760 --> 00:16:09,760
And that danger is not the same as letting people put stuff in an S3 bucket

270
00:16:09,760 --> 00:16:12,760
you've set up specifically for letting people put stuff there.

271
00:16:12,760 --> 00:16:15,760
It also performs significantly better.

272
00:16:15,760 --> 00:16:22,760
You know, the speed of a user downloading a file from S3 is probably going to be faster

273
00:16:22,760 --> 00:16:23,760
than from your web server.

274
00:16:23,760 --> 00:16:26,760
It's going to scale better, and it's going to scale with your team better,

275
00:16:26,760 --> 00:16:27,760
as I mentioned earlier.

276
00:16:27,760 --> 00:16:31,760
So I really, like, it's worth the extra time to figure out the S3,

277
00:16:31,760 --> 00:16:36,760
Azure, whatever stuff, before you start letting people upload media files.

278
00:16:38,760 --> 00:16:41,760
So like I said, to upload media files, you want a storage engine.

279
00:16:41,760 --> 00:16:43,760
You should be using Django Storages.

280
00:16:43,760 --> 00:16:46,760
If the media files you're allowing people to upload are images,

281
00:16:46,760 --> 00:16:51,760
Django also requires Pillow just to handle images at all,

282
00:16:51,760 --> 00:16:53,760
and so you'll want to install that.

283
00:16:53,760 --> 00:16:57,760
But that's all you need, and from there it's pretty simple.

284
00:16:57,760 --> 00:17:00,760
You can use an image field in a model.

285
00:17:00,760 --> 00:17:05,760
If you do it like that and use a model form, it basically just works.

286
00:17:05,760 --> 00:17:07,760
Uploads to the admin are going to work automatically.

287
00:17:07,760 --> 00:17:10,760
They'll land on S3 as configured beforehand.

288
00:17:10,760 --> 00:17:12,760
Basically, it just works.

289
00:17:12,760 --> 00:17:18,760
If you want to be doing custom stuff with files, you want to be doing streaming uploads,

290
00:17:18,760 --> 00:17:23,760
you want to do some pre- or post-processing, consult the documentation.

291
00:17:23,760 --> 00:17:24,760
It's pretty good in this area.

292
00:17:24,760 --> 00:17:28,760
You should be able to figure out some more complex tasks without too much trouble.

293
00:17:28,760 --> 00:17:33,760
One best practice that I'm showing off here is the uploadTo function.

294
00:17:33,760 --> 00:17:35,760
Image and file fields take this argument.

295
00:17:35,760 --> 00:17:39,760
It's a callback that determines the file name to upload to.

296
00:17:39,760 --> 00:17:43,760
It's not like a big deal, but it's going to make your life a lot easier

297
00:17:43,760 --> 00:17:49,760
if you've got a nice, clean URL there rather than some auto-generated hash

298
00:17:49,760 --> 00:17:52,760
of something that you can't really figure out what that file refers to.

299
00:17:52,760 --> 00:17:57,760
So I recommend taking the extra 20 seconds to figure out a good file.

300
00:17:57,760 --> 00:18:00,760
And from there, you just set your default file storage setting

301
00:18:00,760 --> 00:18:06,760
to whatever storage you want to use, Azure, S3, what have you, and bam, you're done.

302
00:18:06,760 --> 00:18:11,760
You can actually, file fields and image fields take a storage argument too.

303
00:18:11,760 --> 00:18:15,760
So you could use different storages for different types of files.

304
00:18:15,760 --> 00:18:19,760
Like you could put images in one S3 bucket and video in another.

305
00:18:19,760 --> 00:18:23,760
I've never actually run across a need for that, but maybe you will.

306
00:18:23,760 --> 00:18:26,760
For models, referencing stuff in templates is pretty simple.

307
00:18:26,760 --> 00:18:30,760
You just get whatever your image field or file field is named,

308
00:18:30,760 --> 00:18:33,760
and you have a .url, and that will automatically expand

309
00:18:33,760 --> 00:18:37,760
to get to the correct URL for your thing.

310
00:18:37,760 --> 00:18:40,760
Now you have to start thinking about how you want to handle this in development.

311
00:18:40,760 --> 00:18:43,760
So you're running things locally, and you want to test it out,

312
00:18:43,760 --> 00:18:47,760
and you want to upload an image file from your local laptop.

313
00:18:47,760 --> 00:18:50,760
So you kind of have to think about how you're going to handle this in development.

314
00:18:50,760 --> 00:18:53,760
So this is that same sort of dev prod parody question.

315
00:18:53,760 --> 00:18:55,760
You have two options.

316
00:18:55,760 --> 00:18:58,760
One is to use S3 just like production does,

317
00:18:58,760 --> 00:19:01,760
and to use something like the AWS location setting

318
00:19:01,760 --> 00:19:05,760
to separate your development uploads from your production uploads.

319
00:19:05,760 --> 00:19:07,760
So this means that your sort of testing scenario

320
00:19:07,760 --> 00:19:10,760
is as close as possible to your production scenario,

321
00:19:10,760 --> 00:19:13,760
but again you can't hack on an airplane.

322
00:19:13,760 --> 00:19:14,760
Is that something you need to be able to do?

323
00:19:14,760 --> 00:19:17,760
I don't know, it depends on your company and your organization.

324
00:19:17,760 --> 00:19:19,760
You can fall back to using file system media.

325
00:19:19,760 --> 00:19:22,760
There's a couple of settings to look up, media root and media URL,

326
00:19:22,760 --> 00:19:26,760
and you can serve them with a built-in server designed for debugging.

327
00:19:26,760 --> 00:19:30,760
So this gets offline development at the cost of being different from production

328
00:19:30,760 --> 00:19:32,760
and potentially introducing bugs.

329
00:19:32,760 --> 00:19:34,760
I can't tell you which is best for you.

330
00:19:34,760 --> 00:19:36,760
It's going to depend on your team.

331
00:19:36,760 --> 00:19:39,760
There's some more documentation about how to use uploaded files

332
00:19:39,760 --> 00:19:42,760
in development at the link there.

333
00:19:42,760 --> 00:19:46,760
So to summarize, use Django Storage as in Pillow,

334
00:19:46,760 --> 00:19:49,760
set the default file storage setting,

335
00:19:49,760 --> 00:19:52,760
remember to define upload to,

336
00:19:52,760 --> 00:19:56,760
and think about local development options.

337
00:19:56,760 --> 00:19:59,760
All right, let's get to the good stuff, asset compilation.

338
00:19:59,760 --> 00:20:02,760
So this was the part that I was hoping would be really easy.

339
00:20:02,760 --> 00:20:04,760
It's not, sorry.

340
00:20:04,760 --> 00:20:06,760
Maybe if I was a better JavaScript developer,

341
00:20:06,760 --> 00:20:09,760
but I don't even, I've found it hard to do.

342
00:20:09,760 --> 00:20:11,760
Maybe if I was a better JavaScript developer,

343
00:20:11,760 --> 00:20:13,760
but I don't even, I've talked to a bunch of them

344
00:20:13,760 --> 00:20:15,760
and they've told me not.

345
00:20:15,760 --> 00:20:19,760
So look, there's some really cool stuff in the front-end world.

346
00:20:19,760 --> 00:20:21,760
I mean, I can joke about JavaScript,

347
00:20:21,760 --> 00:20:25,760
but the fact is it's an incredibly exciting space right now.

348
00:20:25,760 --> 00:20:27,760
There's some really, really cool stuff.

349
00:20:27,760 --> 00:20:29,760
If you haven't played around with TypeScript,

350
00:20:29,760 --> 00:20:31,760
you owe it to yourself to check it out.

351
00:20:31,760 --> 00:20:34,760
It's like MyPy, but way better. Sorry.

352
00:20:34,760 --> 00:20:36,760
If you haven't played with ES Next,

353
00:20:36,760 --> 00:20:40,760
it makes Java, that's what will be the next version of JavaScript.

354
00:20:40,760 --> 00:20:42,760
It's very cool. It has list comprehensions.

355
00:20:42,760 --> 00:20:44,760
It has generators.

356
00:20:44,760 --> 00:20:48,760
It feels like, it feels really familiar to Python users.

357
00:20:48,760 --> 00:20:51,760
It's like putting on jeans from a different brand.

358
00:20:51,760 --> 00:20:53,760
They fit real well, but they're a little,

359
00:20:53,760 --> 00:20:56,760
some parts are a little different, but they're still real comfy.

360
00:20:56,760 --> 00:20:59,760
Post CSS is super cool. I'm mildly obsessed with it.

361
00:20:59,760 --> 00:21:01,760
This is a cool area.

362
00:21:01,760 --> 00:21:04,760
And if you're using something like React, you kind of don't have a choice.

363
00:21:04,760 --> 00:21:06,760
You need to get into this, need to get in this area.

364
00:21:06,760 --> 00:21:08,760
The problem is it makes my head hurt.

365
00:21:08,760 --> 00:21:12,760
If you're like me, it might make your head hurt too.

366
00:21:12,760 --> 00:21:15,760
Okay, so the best asset manager right now is Webpack.

367
00:21:15,760 --> 00:21:17,760
I know there are a bunch of Python asset managers.

368
00:21:17,760 --> 00:21:20,760
There's Django Pipeline, there's Django Compressor,

369
00:21:20,760 --> 00:21:23,760
there's I don't know what all else.

370
00:21:23,760 --> 00:21:25,760
The problem is they're not really that much better.

371
00:21:25,760 --> 00:21:30,760
You think, okay, if I use Webpack, I need to install NPM,

372
00:21:30,760 --> 00:21:32,760
and I need to install a bunch of JavaScript stuff.

373
00:21:32,760 --> 00:21:37,760
But so something like Django Pipeline seems a lot simpler,

374
00:21:37,760 --> 00:21:42,760
but the fact is that the Python ports of these compilers

375
00:21:42,760 --> 00:21:47,760
are not the same as the JavaScript versions

376
00:21:47,760 --> 00:21:51,760
and will confuse people who are doing JavaScript front-end development.

377
00:21:51,760 --> 00:21:56,760
And things like Babel, the JavaScript transpiler that converts ES Next

378
00:21:56,760 --> 00:21:59,760
into JavaScript that browsers will understand

379
00:21:59,760 --> 00:22:01,760
just don't have an equivalent in the Python world.

380
00:22:01,760 --> 00:22:04,760
So you almost always end up installing NPM anyway,

381
00:22:04,760 --> 00:22:07,760
and now if you're going to go to that step,

382
00:22:07,760 --> 00:22:10,760
you might as well use Webpack, which is just better.

383
00:22:10,760 --> 00:22:13,760
Now, every time I talk about front-end development,

384
00:22:13,760 --> 00:22:16,760
because I know high people in the future,

385
00:22:16,760 --> 00:22:18,760
you're watching this video and it's three years from now,

386
00:22:18,760 --> 00:22:20,760
this is probably wrong.

387
00:22:20,760 --> 00:22:22,760
My guess is that within a year,

388
00:22:22,760 --> 00:22:25,760
Parcel is going to replace Webpack as the best practice.

389
00:22:25,760 --> 00:22:28,760
My guess is if I give this talk at PyCon 2020,

390
00:22:28,760 --> 00:22:30,760
I'm going to be talking about Parcel here.

391
00:22:30,760 --> 00:22:32,760
It's not there yet.

392
00:22:32,760 --> 00:22:34,760
Maybe play with it, but it's probably not ready for production.

393
00:22:34,760 --> 00:22:36,760
Webpack is significantly better right now,

394
00:22:36,760 --> 00:22:40,760
but as we'll see in a bit, Webpack frustrates the heck out of me,

395
00:22:40,760 --> 00:22:44,760
and I think that Parcel is on its way to replacing it, but not yet.

396
00:22:44,760 --> 00:22:46,760
So what do you need to make this all work?

397
00:22:46,760 --> 00:22:49,760
You've got to install NPM, you've got to install Webpack,

398
00:22:49,760 --> 00:22:52,760
plus a whole bundle of plugins.

399
00:22:52,760 --> 00:22:57,760
There's two very specific bits that make Webpack and Django play nice together.

400
00:22:57,760 --> 00:23:01,760
If there's a secret to this talk,

401
00:23:01,760 --> 00:23:05,760
if there's one big thing I learned about how to make this less painful,

402
00:23:05,760 --> 00:23:07,760
it's these two things.

403
00:23:07,760 --> 00:23:11,760
Webpack bundle tracker makes Webpack generate a metadata file,

404
00:23:11,760 --> 00:23:14,760
and then Django Webpack loader will read that metadata file

405
00:23:14,760 --> 00:23:19,760
and do the necessary to integrate it with your Django site.

406
00:23:19,760 --> 00:23:22,760
So this is how I got it all working.

407
00:23:22,760 --> 00:23:24,760
I used a package manager to install a package manager,

408
00:23:24,760 --> 00:23:28,760
to install an asset manager, real simple.

409
00:23:28,760 --> 00:23:32,760
I installed a bunch of NPM packages.

410
00:23:32,760 --> 00:23:37,760
Specifically, these are the ones that I installed to get SAS and Babel working.

411
00:23:37,760 --> 00:23:41,760
If you are wanting to use other ones, consult the Webpack docs.

412
00:23:41,760 --> 00:23:44,760
I don't really have time in this talk to really talk through

413
00:23:44,760 --> 00:23:47,760
exactly how Webpack works and what it does.

414
00:23:47,760 --> 00:23:50,760
The documentation is good, but it's complex.

415
00:23:50,760 --> 00:23:53,760
I'd recommend giving yourself a good day or two to really sit down with it,

416
00:23:53,760 --> 00:23:56,760
work through a bunch of options, figure out how everything works,

417
00:23:56,760 --> 00:23:59,760
and kind of get all the details fleshed out.

418
00:23:59,760 --> 00:24:04,760
It's not particularly difficult, but it is a bit time consuming.

419
00:24:04,760 --> 00:24:11,760
So Webpack is organized around this config file, webpackconfig.js.

420
00:24:11,760 --> 00:24:16,760
It's just a JavaScript file that specifies a few different things.

421
00:24:16,760 --> 00:24:18,760
It starts with an entry point,

422
00:24:18,760 --> 00:24:23,760
which is the beginning of your asset compilation chain.

423
00:24:23,760 --> 00:24:25,760
The way that Webpack works is you say,

424
00:24:25,760 --> 00:24:28,760
hey, index.js is the start of my app.

425
00:24:28,760 --> 00:24:31,760
Then index.js will import a bunch of stuff.

426
00:24:31,760 --> 00:24:33,760
It can import other JavaScript files.

427
00:24:33,760 --> 00:24:35,760
It can import CSS files.

428
00:24:35,760 --> 00:24:38,760
It can import SAS or post-CSS files.

429
00:24:38,760 --> 00:24:40,760
Webpack will figure out based on those imports

430
00:24:40,760 --> 00:24:44,760
what sort of translation and compilation need to happen.

431
00:24:44,760 --> 00:24:48,760
When it's all done, it drops that off in a bundle file.

432
00:24:48,760 --> 00:24:51,760
One of the keys to doing this right with Django

433
00:24:51,760 --> 00:24:54,760
is making sure to include a hash in the name of the bundle file.

434
00:24:54,760 --> 00:24:56,760
That way you get versioned assets,

435
00:24:56,760 --> 00:24:59,760
so it's easy to deploy a new version of your front end

436
00:24:59,760 --> 00:25:01,760
and then a new version of your back end

437
00:25:01,760 --> 00:25:05,760
without having to synchronize that in a particularly tight way.

438
00:25:05,760 --> 00:25:08,760
You give it some rules, which say,

439
00:25:08,760 --> 00:25:13,760
hey, JavaScript files I want to compile with Babel.

440
00:25:13,760 --> 00:25:15,760
Then you've got to make sure to use this plugin.

441
00:25:15,760 --> 00:25:20,760
That's the little key bit that makes it spit out that statistics file.

442
00:25:20,760 --> 00:25:23,760
At that point, you add some stuff to your settings file.

443
00:25:23,760 --> 00:25:25,760
You install the Webpack loader app,

444
00:25:25,760 --> 00:25:27,760
and you give it a little bit of configuration.

445
00:25:27,760 --> 00:25:30,760
You can consult the docs for details here,

446
00:25:30,760 --> 00:25:33,760
but this is the minimum, and this will be enough to get it working.

447
00:25:33,760 --> 00:25:35,760
Then you run two commands.

448
00:25:35,760 --> 00:25:39,760
First you run Webpack, which follows that index.js

449
00:25:39,760 --> 00:25:41,760
and brings all your things and puts it in a bundle.

450
00:25:41,760 --> 00:25:43,760
Then you run collect static,

451
00:25:43,760 --> 00:25:45,760
and that takes the bundle that's now been generated

452
00:25:45,760 --> 00:25:49,760
and pushes it to S3 or does whatever else needs to happen with it.

453
00:25:49,760 --> 00:25:52,760
That's the cool little magic that Webpack loader does,

454
00:25:52,760 --> 00:25:55,760
is it makes sure that when you run collect static,

455
00:25:55,760 --> 00:25:58,760
collect static knows how to find your compiled bundles

456
00:25:58,760 --> 00:26:00,760
and shove them in the right place.

457
00:26:00,760 --> 00:26:02,760
There's some other cool stuff in that library too,

458
00:26:02,760 --> 00:26:05,760
like support for live reloading and those sorts of things.

459
00:26:05,760 --> 00:26:07,760
You can take a look.

460
00:26:07,760 --> 00:26:11,760
Now in your templates, instead of using the static tag,

461
00:26:11,760 --> 00:26:13,760
there's a new one, render bundle,

462
00:26:13,760 --> 00:26:16,760
and you say, I want to render my main bundle.

463
00:26:16,760 --> 00:26:19,760
This is what would let you have multiple different types of bundles.

464
00:26:19,760 --> 00:26:21,760
Say if you have different parts of your app

465
00:26:21,760 --> 00:26:25,760
that need different prerequisites, different JavaScript files.

466
00:26:25,760 --> 00:26:27,760
So this is how this whole thing works.

467
00:26:27,760 --> 00:26:29,760
It's going to look at your index.js,

468
00:26:29,760 --> 00:26:31,760
it's going to compile everything using Webpack,

469
00:26:31,760 --> 00:26:34,760
spitting out that bundle, and then collect static

470
00:26:34,760 --> 00:26:37,760
and push it off to your cloud server.

471
00:26:37,760 --> 00:26:40,760
Now it's real tempting at this point to try to automate this more.

472
00:26:40,760 --> 00:26:42,760
We're running two different commands,

473
00:26:42,760 --> 00:26:46,760
it feels a little manual, like can't I just automatically reload stuff,

474
00:26:46,760 --> 00:26:50,760
I just want to edit my post CSS file and have my CSS be spit out

475
00:26:50,760 --> 00:26:54,760
and automatically uploaded to S3 and happen all automatically.

476
00:26:54,760 --> 00:26:57,760
You actually can do that. That will work.

477
00:26:57,760 --> 00:26:59,760
However, I started to go down that path

478
00:26:59,760 --> 00:27:02,760
and I very rapidly got very, very confused.

479
00:27:02,760 --> 00:27:05,760
I recommend actually leaving it pretty simple and doing it by hand,

480
00:27:05,760 --> 00:27:07,760
maybe using a CI server for this,

481
00:27:07,760 --> 00:27:10,760
because otherwise it can get real hairy, real quick,

482
00:27:10,760 --> 00:27:13,760
and you can end up with a lot of confusion about what's doing what

483
00:27:13,760 --> 00:27:16,760
and what's watching what and what's listening.

484
00:27:16,760 --> 00:27:19,760
I didn't really understand what was happening here

485
00:27:19,760 --> 00:27:23,760
until I threw out all the fancy stuff and got super simple with it.

486
00:27:23,760 --> 00:27:27,760
So my recommendation would be to do the same.

487
00:27:28,760 --> 00:27:32,760
So Webpack is the best practice here right now.

488
00:27:32,760 --> 00:27:34,760
I think that may change in the future,

489
00:27:34,760 --> 00:27:36,760
I predict it will change in the future,

490
00:27:36,760 --> 00:27:38,760
but for right now that's the one you should be using.

491
00:27:38,760 --> 00:27:41,760
There's really nothing that compares to it that's as flexible,

492
00:27:41,760 --> 00:27:44,760
that has as many options, or that will do all the things

493
00:27:44,760 --> 00:27:46,760
that you might possibly need to do.

494
00:27:46,760 --> 00:27:49,760
The key connection bit is that Django,

495
00:27:49,760 --> 00:27:52,760
that should read Django Webpack Loader on that slide.

496
00:27:52,760 --> 00:27:56,760
That's the key connection bit.

497
00:27:56,760 --> 00:27:59,760
Again, I recommend using a CI task

498
00:27:59,760 --> 00:28:03,760
and be very careful about premature automation.

499
00:28:03,760 --> 00:28:06,760
Thank you all very much.

500
00:28:10,760 --> 00:28:12,760
Thank you, Jacob.

501
00:28:12,760 --> 00:28:14,760
I think I have time for maybe one or two questions.

502
00:28:14,760 --> 00:28:16,760
I think we have time for one question.

503
00:28:16,760 --> 00:28:18,760
All right, who's going to be the lucky one?

504
00:28:18,760 --> 00:28:20,760
Russ isn't here, so someone else has to do it.

505
00:28:20,760 --> 00:28:22,760
Yes. No, go for it.

506
00:28:22,760 --> 00:28:24,760
Thank you.

507
00:28:24,760 --> 00:28:27,760
I was thinking on the thoughts of faking your cloud storage

508
00:28:27,760 --> 00:28:29,760
for your local development,

509
00:28:29,760 --> 00:28:31,760
when you were talking about the option one, option two,

510
00:28:31,760 --> 00:28:33,760
and you're on the airplane.

511
00:28:33,760 --> 00:28:37,760
Faking, so running something that pretends to be S3 locally,

512
00:28:37,760 --> 00:28:39,760
but isn't actually?

513
00:28:39,760 --> 00:28:41,760
Yes, sir.

514
00:28:41,760 --> 00:28:43,760
I'm not aware of anything that does that,

515
00:28:43,760 --> 00:28:46,760
but it's not a terrible idea,

516
00:28:46,760 --> 00:28:50,760
because now your Django app is just speaking the same old APIs,

517
00:28:50,760 --> 00:28:52,760
but you're faking it at a different point.

518
00:28:52,760 --> 00:28:54,760
So if there's something that runs locally and works there,

519
00:28:54,760 --> 00:28:56,760
yeah, that could be cool.

520
00:28:56,760 --> 00:28:58,760
If you know of something, let me know after the talk.

521
00:28:58,760 --> 00:29:00,760
I'd love to play with it.

522
00:29:00,760 --> 00:29:02,760
Thanks again, y'all.

523
00:29:02,760 --> 00:29:04,760
Thank you again, Jacob.

524
00:29:04,760 --> 00:29:06,760
It's now lunchtime.

525
00:29:06,760 --> 00:29:08,760
Enjoy your lunch, and we will see you after the break.

