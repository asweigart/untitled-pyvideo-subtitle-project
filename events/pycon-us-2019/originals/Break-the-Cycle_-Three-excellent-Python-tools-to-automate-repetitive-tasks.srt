1
00:00:00,000 --> 00:00:07,760
All right. Good morning, everyone, once again. This talk is break the cycle, three excellent

2
00:00:07,760 --> 00:00:21,320
Python tools to automate repetitive tasks. Session chairs can sometimes have a little

3
00:00:21,320 --> 00:00:31,240
bit of a stage fright, too. So the speaker is Thea Flowers, and she has requested any

4
00:00:31,240 --> 00:00:37,560
questions that you may have. Please hold them off until the end of the talk, and you can

5
00:00:37,560 --> 00:00:42,200
see her outside in the hall where she will be more than happy to answer any questions

6
00:00:42,200 --> 00:00:59,960
you may have. So without further ado, Thea. Hi. There are a lot of you. I'm very nervous.

7
00:00:59,960 --> 00:01:05,160
I'm Thea, and I'm going to talk to you today about three excellent Python tools that I

8
00:01:05,160 --> 00:01:11,060
like to use to automate repetitive tasks. Before we get started, I want to tell you

9
00:01:11,060 --> 00:01:16,340
what to expect from this talk. We only have, like, 30 minutes together here today. It's

10
00:01:16,340 --> 00:01:19,780
a very short amount of time, and there's a lot of things that I want to tell you about.

11
00:01:19,780 --> 00:01:25,340
So we're not going to do any, like, super big deep dives into any of these tools. My

12
00:01:25,340 --> 00:01:31,460
goal here is to kind of give you a taste of these tools, to give you an idea of what they

13
00:01:31,460 --> 00:01:37,740
are, how they look, how they work, and inspire you to go check them out. I'm also going to

14
00:01:37,740 --> 00:01:45,460
be pretty focused on tasks related to working on or maintaining a Python project. There's

15
00:01:45,460 --> 00:01:50,860
at least one tool out of these three that can be used outside of that context, but it's

16
00:01:50,860 --> 00:01:55,220
going to be largely focused on that sort of thing. Another thing to keep in mind is that

17
00:01:55,220 --> 00:02:00,700
I'm going to show some code samples, and I'm going to show some output from these tools,

18
00:02:00,700 --> 00:02:05,460
but my goal here isn't to, like, teach you what this code does or have you fully understand

19
00:02:06,220 --> 00:02:08,940
it or anything like that. Just to give you an idea of what it looks like to use these

20
00:02:08,940 --> 00:02:13,900
tools. So don't sweat it if you can't, like, read all the code, if you're all the way in

21
00:02:13,900 --> 00:02:20,900
the back standing up there because this room is very full, which isn't scary at all. Just

22
00:02:21,060 --> 00:02:24,820
know that the slides will be published online. You can go dig into them later. They're all

23
00:02:24,820 --> 00:02:29,780
pretty straightforward samples. Cool. And also, some of you will probably be familiar

24
00:02:29,780 --> 00:02:34,740
with the first tool I talk about, but I promise that later two are going to be really interesting

25
00:02:34,740 --> 00:02:40,420
for you. And like I mentioned, what I want you to take away is just this inspiration

26
00:02:40,420 --> 00:02:47,420
to go check out these tools and maybe automate some of the things in your life. So I want

27
00:02:47,980 --> 00:02:54,980
to start this talk with story time. So not a fun story, though, unfortunately. A story

28
00:02:56,420 --> 00:03:00,140
of frustration. This is one that's really common to me, and hopefully it will resonate

29
00:03:00,140 --> 00:03:07,140
with a few of you. Let's imagine that you have just come back from work, back to work,

30
00:03:09,940 --> 00:03:15,220
not from work, back to work, from like a long weekend or a holiday or you've decided that

31
00:03:15,220 --> 00:03:19,500
you want to contribute to an open source project for the first time. Really cool stuff. You're

32
00:03:19,500 --> 00:03:26,500
excited and you clone the code, you have it locally, and you're like, cool, before I go

33
00:03:26,500 --> 00:03:31,700
breaking stuff, let's run the test. It's a great idea. Always make sure things still

34
00:03:31,700 --> 00:03:37,460
work before you go breaking things. The problem is you can't just do that. The world that

35
00:03:37,460 --> 00:03:42,460
we've made for ourselves means that we can't just simply run the test. So this story, this

36
00:03:42,460 --> 00:03:48,420
scenario I'm going to walk you through is what goes through my mind when I have to run

37
00:03:48,420 --> 00:03:55,420
the test for a project. So the first thing we have to do, step zero, is create a virtual

38
00:03:55,420 --> 00:04:01,500
environment. Because you don't want to run all this project stuff in your global Python

39
00:04:01,500 --> 00:04:05,460
environment and install its dependencies and mess up all your versions and end up with

40
00:04:05,460 --> 00:04:11,520
version conflicts because that's never fun. So virtual environment. The problem is I haven't

41
00:04:11,520 --> 00:04:17,180
used virtual environment in a few days because I've been on holiday and I forgot the commands.

42
00:04:17,180 --> 00:04:24,180
So let's Google the virtual commands. So this is the virtual environment. And this is the

43
00:04:25,860 --> 00:04:31,020
top Google result for virtual environment. And it's really dense. You'll notice there's

44
00:04:31,020 --> 00:04:35,740
not any commands here. This is wonderfully useful if you want to know what virtual environment

45
00:04:35,740 --> 00:04:42,420
does under the covers. It's completely useless if you want to know how to use virtual environment.

46
00:04:42,420 --> 00:04:47,540
Thankfully there's a user's guide on the left side there. And that has the two commands

47
00:04:47,540 --> 00:04:53,180
kind of spaced out a little bit that we need. So cool. I can do that now. So let's make

48
00:04:53,180 --> 00:04:59,220
a virtual environment. Cool. So in this sample I've made a virtual environment and I've activated

49
00:04:59,220 --> 00:05:06,220
it. It's two steps actually. Step zero has part A and B. Cool. Now what were we doing?

50
00:05:06,820 --> 00:05:13,820
Oh, we're running the test. Let's run test. But how do I run the test again? I can look

51
00:05:13,820 --> 00:05:19,140
at the readme. I can look wherever I could guess. I think it's PyTest. So let's just

52
00:05:19,140 --> 00:05:26,140
try running PyTest. That makes sense. Oh, man. PyTest isn't installed. And I also would

53
00:05:28,380 --> 00:05:31,700
like to point out this is an error message from Ubuntu. It tells you to install this

54
00:05:31,700 --> 00:05:38,700
completely unrelated package. So don't do that. But we're not in trouble yet, right?

55
00:05:40,220 --> 00:05:45,220
We know that PyTest is a Python thing. So we can just pip install that, right? Sounds

56
00:05:45,220 --> 00:05:51,340
like a good plan. Pip install PyTest. Yay, there's green finally somewhere in this. So

57
00:05:51,340 --> 00:05:58,340
we installed PyTest. Yay, another step. So let's try running it again. We have it now.

58
00:05:58,500 --> 00:06:05,500
We can run it. Oh, great. More red. So it seems like I'm missing a dependency. I'm missing

59
00:06:07,420 --> 00:06:12,620
flask is what it's called out here. But I'm almost completely certain that if I just wouldn't

60
00:06:12,620 --> 00:06:17,620
install flask, that I would be missing some other dependency and some other dependency.

61
00:06:17,620 --> 00:06:24,620
Thankfully, I think this project has a requirements.txt. So there can't be any traps there, right?

62
00:06:27,220 --> 00:06:31,300
So let's just pip install requirements.txt, right? That's easy. We're Python developers.

63
00:06:31,300 --> 00:06:37,820
We know how to do this. Oh, crap. What did I do? See, this happens to me every time I

64
00:06:37,820 --> 00:06:44,700
pip install requirements.txt. If you know the problem, raise your hand. I forgot the

65
00:06:44,700 --> 00:06:51,700
dash R. So it's pip install dash R requirements.txt. And at this point, my excitement over working

66
00:06:52,100 --> 00:06:59,100
on this project is quickly waning. Like, fine. Okay. So kind of dependencies installed. Let's

67
00:07:00,420 --> 00:07:07,420
try third time's a charm. Let's try running PyTest. Yay! It finally worked. But I'm not

68
00:07:07,980 --> 00:07:14,980
at what cost. We had to do a lot of stuff to get here. Like, lots and lots of steps here.

69
00:07:16,900 --> 00:07:22,660
We had to go and do all this stuff. And it might seem like to some of you folks who are

70
00:07:22,660 --> 00:07:28,460
like super advanced Python developers, you're like, this is trivial stuff. I do this 17

71
00:07:28,460 --> 00:07:35,460
times a day. Sometimes more than twice an hour. And it may seem trivial, but for people

72
00:07:38,100 --> 00:07:44,900
who are either newer to Python or coming from other languages or whatever, just coming into

73
00:07:44,900 --> 00:07:51,620
your project, these steps are potential points that you can lose people. And people are the

74
00:07:51,620 --> 00:07:58,620
most important part of software. So let's try to be kind to people. This stuff is toil.

75
00:07:59,820 --> 00:08:03,540
Toil is all the nonsense that you have to go through to get to what you actually want

76
00:08:03,540 --> 00:08:10,540
to do. Which was run PyTest. Which is the Macbeth mentioned toil and trouble in the

77
00:08:11,420 --> 00:08:16,180
same breath. And I promise you want nothing to do with what they're cooking up. So this

78
00:08:16,180 --> 00:08:20,220
whole talk is about being kind to yourself and to your teammates and contributors and

79
00:08:20,220 --> 00:08:26,660
trying to reduce some of this toil in your life. This is what I'm about. So let's talk

80
00:08:26,660 --> 00:08:31,860
about how we can fix this. The first tool I want to talk about is TOCS. And it might

81
00:08:31,860 --> 00:08:37,020
be very familiar to a lot of you. It's been around for quite some time. And it's basically

82
00:08:37,020 --> 00:08:41,940
the gold standard for this use case. TOCS aims to standardize Python testing. Which

83
00:08:41,940 --> 00:08:46,940
is a very lofty goal, and they've kind of succeeded at it. It uses an any file at this

84
00:08:46,940 --> 00:08:53,140
configuration. And it makes this scenario really, really simple. Because if you're a

85
00:08:53,140 --> 00:08:58,500
Python developer and you check out a project and it has a TOCS.any, you know immediately

86
00:08:58,660 --> 00:09:05,180
you can probably just run TOCS and you'll get to what you want to do. That's one step.

87
00:09:05,180 --> 00:09:12,180
Let's take a look at what that looks like. So, okay. This is a simple TOCS.any file.

88
00:09:12,620 --> 00:09:18,300
Again, like I said, don't try to digest this whole thing. It's an any file. It just tells

89
00:09:18,300 --> 00:09:24,340
TOCS to do some things. In this case, it tells TOCS to do the same steps we did all those

90
00:09:24,340 --> 00:09:29,820
manual steps. I'm going to highlight some things here. So, this first highlighted section

91
00:09:29,820 --> 00:09:34,220
is where it installed those dependencies I talked about earlier. And this second highlighted

92
00:09:34,220 --> 00:09:38,540
section is where it runs PyTest. You can see at the bottom there's green. And green is

93
00:09:38,540 --> 00:09:45,540
good. So, yay. It took all of those toylful steps, got rid of them for us, and made just

94
00:09:46,540 --> 00:09:53,540
one step. That's wonderful. It's a huge win for everyone involved. But this isn't TOCS's

95
00:09:55,340 --> 00:10:01,820
real strength here. Automation is power. Because TOCS makes all of this stuff trivial, it actually

96
00:10:01,820 --> 00:10:06,820
makes it possible for you to test multiple Python environments, which is really, really

97
00:10:06,820 --> 00:10:11,340
cool. So, imagine, just imagine, I know this is going to be difficult for you all. Imagine

98
00:10:11,340 --> 00:10:18,340
it's 2019 and you're still dealing with Python 2 and 3. Well, TOCS can help. I've highlighted

99
00:10:21,420 --> 00:10:27,420
a one line, not even really a one line change, a four character change in the TOCS.ini file.

100
00:10:27,420 --> 00:10:31,080
And now when you run it, this is going to be very hard to see, but you'll notice there's

101
00:10:31,080 --> 00:10:36,140
two green stripes across the screen. That means it ran PyTest twice. It ran it once

102
00:10:36,180 --> 00:10:42,860
for Python 2.7 and once for Python 3.7. And this is wonderful. I didn't have to do anything

103
00:10:42,860 --> 00:10:48,940
extra really to get that. You kind of get it for free. That's the really powerful part

104
00:10:48,940 --> 00:10:53,820
of this tool. Another scenario you might be able to imagine if you write plug-ins or packages

105
00:10:53,820 --> 00:10:59,220
or anything like that is that you need to test against multiple versions of a dependency.

106
00:10:59,220 --> 00:11:03,940
Especially those of us who develop Django extensions and Flask extensions need to do

107
00:11:03,940 --> 00:11:10,940
this. So this little example tests against Python 2.7, Python 3.7, Flask 0.12 and Flask

108
00:11:13,220 --> 00:11:20,220
1.02. I really couldn't find better version numbers, I'm sorry. But this actually does

109
00:11:20,700 --> 00:11:26,620
four runs of PyTest because it multiplies it. It runs the two different versions of

110
00:11:26,620 --> 00:11:33,620
Flask in both Python 2.7 and 3.7. That's really, really awesome. So this is a really cool

111
00:11:34,340 --> 00:11:41,340
tool. So Tox is everywhere. You can throw a rock and hit 17 or 18 projects that use Tox.

112
00:11:44,100 --> 00:11:50,100
You throw a bunch of rocks, you'll find hundreds. It's been used for a long time and if you

113
00:11:50,100 --> 00:11:54,700
decide to start your automation journey with Tox, you'll find lots of examples, lots of

114
00:11:54,700 --> 00:12:01,700
support, lots of resources. So it's a good thing to keep in mind. However, Tox is a really

115
00:12:04,140 --> 00:12:10,780
focused tool. It is very, very good at what it does. It is mostly intended for automating

116
00:12:10,780 --> 00:12:16,860
Python packages and that is things that can be installed. So things that have a set up

117
00:12:16,860 --> 00:12:22,620
.py or a project .toml and it can be used for things like web apps but it takes a little

118
00:12:22,620 --> 00:12:29,620
bit of telling for that. You have to tell it how to deal with that. But it's really

119
00:12:29,620 --> 00:12:35,860
good at the package idea. You can use it for things like building documentation as

120
00:12:35,860 --> 00:12:42,180
well but the further you stray from Tox's intended purpose, the more inflexible it becomes.

121
00:12:42,180 --> 00:12:49,180
So that is to say, if your automation is like hammering nails, Tox is a pneumatic nail gun,

122
00:12:50,580 --> 00:12:57,580
it will make it happen real fast with very little effort and that's awesome. So Tox is

123
00:12:57,740 --> 00:13:04,740
wonderful. But what if you want to do more? What if your automation needs to deal with

124
00:13:04,820 --> 00:13:10,980
all kinds of stuff? So next tool I want to talk about is Nox. I know it sounds really

125
00:13:10,980 --> 00:13:16,820
similar. It definitely wasn't intentional. Full disclosure, I am the original creator

126
00:13:16,820 --> 00:13:23,820
of Nox but I love Tox and Nox and the last tool that I'm going to talk about too. So

127
00:13:23,820 --> 00:13:30,820
they're all my loves. So Nox aims for flexible test automation. It is a spiritual sibling

128
00:13:35,300 --> 00:13:42,300
to Tox. They are sort of intended to solve similar problems. Like Tox, it uses a configuration

129
00:13:42,620 --> 00:13:49,620
file. But unlike Tox, its configuration file is Python. So let's see what that looks like.

130
00:13:49,620 --> 00:13:56,620
Let's see what that looks like. Easier to show than tell. This is a simple Nox file.

131
00:13:56,860 --> 00:14:03,540
If you've used Flask and Flask is a sort of use of decorators to define view functions,

132
00:14:03,540 --> 00:14:08,380
it's very similar to that. We have a Nox session. This session does the same thing we did with

133
00:14:08,380 --> 00:14:15,380
Tox before. It creates a virtual environment, installs requirements, runs PyTest. Boom.

134
00:14:15,380 --> 00:14:22,380
Pretty much the same stuff. Easy peasy. Just like Tox, Nox can handle the whole matrix

135
00:14:22,740 --> 00:14:29,740
thing of testing multiple versions of dependencies and different Python interpreter versions.

136
00:14:30,580 --> 00:14:35,780
Nox calls this parameterization. It borrowed that term from PyTest. So if you're familiar

137
00:14:35,780 --> 00:14:40,260
with PyTest's parameterization, you'll be right at home with this. And just like with

138
00:14:40,660 --> 00:14:45,100
Tox, it spits out four different invocations and all that stuff. So I know what you're

139
00:14:45,100 --> 00:14:52,100
thinking at this point. So does the same thing as Tox, why would I use it? Well, good question.

140
00:14:56,060 --> 00:15:03,060
But I have an answer. Python as configuration is magical. Being able to just use Python

141
00:15:03,900 --> 00:15:10,900
as configuration for your automation is a really, really freeing thing. Like I assume

142
00:15:10,900 --> 00:15:15,700
that you're in this room because you have some vague interest in Python. So you already

143
00:15:15,700 --> 00:15:21,860
know basically 99% of how to use Nox. You just need to learn very small things, a very

144
00:15:21,860 --> 00:15:28,260
small API. So let me show you some more examples of things going beyond this. Imagine you're

145
00:15:28,260 --> 00:15:34,420
working with protocol buffers. Or don't. I don't care. Just imagine that you're dealing

146
00:15:34,420 --> 00:15:39,460
with something that has like a source file, a proto file in this case. And it needs to

147
00:15:39,460 --> 00:15:46,460
be compiled into a Python file. And you could sit here and add an entry to your Nox file

148
00:15:47,540 --> 00:15:50,860
or Tox file for every single proto file you have. And that's probably going to become

149
00:15:50,860 --> 00:15:56,840
really tedious really fast. Or you can use Python's glob module, which does pattern matching

150
00:15:56,840 --> 00:16:01,640
like shells do. You can find star.proto and find all the proto files and then just pass

151
00:16:01,640 --> 00:16:07,280
them into the compiler all at once. So this one just does two files because I didn't want

152
00:16:07,280 --> 00:16:14,280
the output to be crazy. But it's much easier that way. This next sample is one of my favorites.

153
00:16:15,740 --> 00:16:21,200
This is in every project I have that uses Nox. How many of you build docs have used

154
00:16:21,200 --> 00:16:26,840
Sphinx? Cool. All right. A little less than half. That's fine. Sphinx is a tool that

155
00:16:26,840 --> 00:16:32,200
builds documentation. You run it. It spits out a bunch of HTML files. And then you have

156
00:16:32,200 --> 00:16:39,200
to go and like serve that. And then browse to it in your browser. So what this example

157
00:16:39,780 --> 00:16:46,280
does is if you just run Nox as normal, it will do that. It will build the documentation

158
00:16:46,280 --> 00:16:52,080
to build slash HTML. And then what you'd normally do is you'd go and you'd cdn to

159
00:16:52,080 --> 00:16:58,280
build slash HTML. You'd run Python dash HTTP dot server, I think. And then you'd browse

160
00:16:58,280 --> 00:17:05,280
to localhost 5000, I think. So steps involved. But Nox has a super power because it can do

161
00:17:06,720 --> 00:17:13,320
Nox docs serve. And what it will do is instead of just using Sphinx, it will use Sphinx auto

162
00:17:13,360 --> 00:17:19,440
build which does this magic of building the docs, starting a web server, opening your

163
00:17:19,440 --> 00:17:25,360
browser for you automatically, and then watching for changes and automatically reloading your

164
00:17:25,360 --> 00:17:31,800
browser. That is awesome. Like that's the kind of experience I want people to have when

165
00:17:31,800 --> 00:17:36,600
they're trying to contribute to my documentation. It should be really, really easy. So Nox is

166
00:17:36,600 --> 00:17:43,600
for automation of Python projects. It is more flexible than Tox but also less focused. So

167
00:17:44,640 --> 00:17:50,640
it has pros and cons. It's a really great choice for things like Python applications,

168
00:17:50,640 --> 00:17:55,160
especially web applications that tend to have a lot of peripheral tasks that need to be

169
00:17:55,160 --> 00:18:02,160
done. I've seen Nox use it in some really interesting ways. For example, Google Cloud

170
00:18:02,560 --> 00:18:09,560
Platform has like 200 odd sample applications. And it became pretty tedious for them to maintain

171
00:18:10,040 --> 00:18:15,440
individual test configuration for each one. So they actually use Nox to discover the sample

172
00:18:15,440 --> 00:18:20,240
applications and generate sessions for each sample and run them all. So instead of having

173
00:18:20,240 --> 00:18:27,240
200 odd Nox or Tox configuration files, they just have one, which is really, really cool.

174
00:18:27,240 --> 00:18:34,240
So what if Nox still isn't enough? What if you're like, Fia, that's cool, but I have

175
00:18:35,800 --> 00:18:40,280
way bigger needs than that. What if you are not actually working in a Python project and

176
00:18:40,280 --> 00:18:47,280
you want to use Python to do the task? Okay, cool. We can use Invoke for that. Invoke is

177
00:18:47,280 --> 00:18:51,760
a really, really cool tool that I discovered about a year ago. It's been around for longer

178
00:18:51,760 --> 00:18:58,760
than that, but it's really, really great. Invoke is a task execution tool and library.

179
00:18:59,200 --> 00:19:06,200
It takes inspiration from things like GNU Make, Ruby's rake, and like other stuff that

180
00:19:06,200 --> 00:19:12,600
I forgot. Fabric, because it's from the same creator as Fabric. It's really, really flexible.

181
00:19:12,600 --> 00:19:17,080
And it makes a lot less assumptions than the other tools that I talked about, so it lets

182
00:19:17,080 --> 00:19:21,840
you do more. So I'm going to show you some really simple examples really real quick.

183
00:19:21,840 --> 00:19:27,240
So Tox has this thing about environments. That's its high-level concept. Nox has this

184
00:19:27,240 --> 00:19:32,200
thing about sessions. That's its high-level concept. And they're very interchangeable.

185
00:19:32,200 --> 00:19:37,080
But with Invoke, you have tasks, which is a much more general thing. So you have task-based

186
00:19:37,080 --> 00:19:44,080
workflows. These are two simple tasks that basically clean the docs build, so they delete

187
00:19:44,760 --> 00:19:49,840
any old HTML, and then build it. And the two separate tasks, where they have dependencies.

188
00:19:49,840 --> 00:19:54,600
So when you run them, it actually cleans the build output first and then runs the thing.

189
00:19:54,600 --> 00:19:58,080
I mean, you could definitely do this with Nox and Tox. It's just illustrated. Don't

190
00:19:58,080 --> 00:20:01,040
worry about it. We'll get into some really cool stuff here in a second.

191
00:20:01,040 --> 00:20:06,480
So Invoke is this tool framework. It's kind of superficially similar to the other tools

192
00:20:06,480 --> 00:20:10,680
here, but it's kind of a horse of a different color. You could write tasks that do the same

193
00:20:10,680 --> 00:20:17,680
thing as Nox and Tox, sure. But it's really better for things beyond that. What I find

194
00:20:18,320 --> 00:20:24,120
myself doing is using Tox and Nox for the Python testing aspect of my projects, and

195
00:20:24,120 --> 00:20:30,280
then using Invoke to handle the maintenance minutia. So let's talk about that.

196
00:20:30,280 --> 00:20:35,280
So this is from PIP. Are you all familiar with PIP? Yeah? We talked about it earlier

197
00:20:35,960 --> 00:20:42,160
in the presentation. PIP, they have a lot of contributors. And they used to have this

198
00:20:42,160 --> 00:20:46,800
problem where they'd ask contributors to manually add themselves to the author's file so they

199
00:20:46,800 --> 00:20:53,320
get attribution for their work, which is really a nice thing to do. The problem is we kept

200
00:20:53,320 --> 00:20:59,200
forgetting to do that. What this does, and this is super simplified, PIP's actual task

201
00:20:59,200 --> 00:21:04,000
is a little bit more complicated. This uses Git to just find all the authors by their

202
00:21:04,680 --> 00:21:11,040
commits and then compiles an author's file for us. So this is an example output. But

203
00:21:11,040 --> 00:21:14,640
this way we can run this as part of a release process, and we don't have to worry about

204
00:21:14,640 --> 00:21:21,640
leaving anybody behind. That's really cool. Another one that I use all the time is I release

205
00:21:22,560 --> 00:21:27,440
a lot of packages, and when you release packages, it's nice to put together a change log to

206
00:21:27,440 --> 00:21:31,360
tell people what changed between the versions. I mean, you don't have to, but it's a nice

207
00:21:31,520 --> 00:21:38,320
thing to do. So what this task does is it uses Git to actually figure out the difference

208
00:21:38,320 --> 00:21:43,480
between the last release and the current release and prints it out in a nice format that can

209
00:21:43,480 --> 00:21:48,480
be easily copied and pasted into a change log. Of course, you could take this concept

210
00:21:48,480 --> 00:21:55,480
even further and have Invoke actually update the change log file for you. There's an idea.

211
00:21:56,000 --> 00:22:01,280
Or even further and have Invoke just automate the entire release process for you. That's

212
00:22:01,280 --> 00:22:07,560
an idea, but that's for a different talk, I think. So you can also do really fun stuff.

213
00:22:07,560 --> 00:22:13,640
Don't try to wrap your head around this. Please don't. This is an Invoke example that compiles

214
00:22:13,640 --> 00:22:20,640
a C program, and it does actually compile. I actually pulled this from my personal experience

215
00:22:21,480 --> 00:22:28,400
because I do a lot of Arduino stuff, and I hate using make and I hate the Arduino IDE,

216
00:22:28,400 --> 00:22:32,600
so I can build them with a command line using Invoke, which is great, so I don't have to

217
00:22:32,600 --> 00:22:36,960
write make scripts and I don't have to deal with the Arduino IDE. So you can do that.

218
00:22:36,960 --> 00:22:41,680
You can even build C projects with it if you really want to. Invoke is for everything,

219
00:22:41,680 --> 00:22:46,360
basically. It's a tool that lets you build any variety of task-based workflows. It's

220
00:22:46,360 --> 00:22:50,680
super awesome. It's not going to do anything for you. It's not going to make assumptions.

221
00:22:50,680 --> 00:22:55,320
It'll do argument parsing and stuff, but it'll just give you the primitives to build whatever

222
00:22:55,320 --> 00:23:02,320
you need to build. Cool? All right. That's a lot. I threw a lot at you real fast. Showing

223
00:23:03,240 --> 00:23:09,440
you three tools that I like to use, but let's wrap it up. I like to think of these tools

224
00:23:09,440 --> 00:23:15,960
as a gradient of sorts. On one end, you have really opinionated, focused tools like Tox.

225
00:23:15,960 --> 00:23:20,760
Towards the middle, but still not really, you have less opinionated and more flexible

226
00:23:20,760 --> 00:23:25,360
tools like Knox. And then towards the very other end, you have really, really flexible

227
00:23:25,360 --> 00:23:32,360
tools that don't really make a lot of decisions for you like Invoke. So hopefully these have

228
00:23:32,440 --> 00:23:37,840
inspired you to go and reduce some toil in your life. Hopefully one of these tools is

229
00:23:37,840 --> 00:23:44,840
useful to you in your day-to-day life. If not, I'm sorry. I don't know how to make you

230
00:23:45,040 --> 00:23:52,040
happy in that case. Finally, thank you for coming to my talk. If you would like to learn

231
00:23:53,080 --> 00:23:57,480
more about these tools, please go check them out on GitHub. If you'd like to learn more

232
00:23:57,480 --> 00:24:01,840
about me or ask me questions about these tools or how I use them or talk to me about synthesizers

233
00:24:01,840 --> 00:24:05,240
or whatever, you can get in touch with me. You can go to my website. You can stalk me

234
00:24:05,240 --> 00:24:08,040
on Twitter. That's cool too. But thank you.

