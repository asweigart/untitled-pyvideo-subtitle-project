1
00:00:00,000 --> 00:00:07,840
All right, good morning everybody.

2
00:00:07,840 --> 00:00:13,840
Thanks for waking up early to come nerd out about APIs today in our tutorial this misty

3
00:00:13,840 --> 00:00:15,260
morning.

4
00:00:15,260 --> 00:00:16,960
My name is Dave Anderson.

5
00:00:16,960 --> 00:00:20,740
On Twitter I'm Dave Anderson without the vowels.

6
00:00:20,740 --> 00:00:30,700
Our tutorial today is called building evolutionary API in Python with GraphQL.

7
00:00:30,700 --> 00:00:33,340
Before we get started, a little bit about me.

8
00:00:33,340 --> 00:00:38,380
I'm a lead developer consultant at Stride Consulting based out of Manhattan, New York.

9
00:00:38,380 --> 00:00:42,620
I'm also cohost of the definitive developers podcast, the rabbit hole, where we talk about

10
00:00:42,620 --> 00:00:48,300
human vectors of software engineering as well as fun new tech like GraphQL.

11
00:00:48,300 --> 00:00:50,700
That's episode number 52.

12
00:00:50,700 --> 00:00:54,380
Have a listen, like and subscribe and all that.

13
00:00:54,380 --> 00:00:58,900
I've worked with GraphQL for almost two years now on several projects helping various companies

14
00:00:58,900 --> 00:01:02,860
rebuild their stack with similar technology to what we'll use today.

15
00:01:02,860 --> 00:01:07,780
Python with Django, Graphene, JavaScript, Apollo and React.

16
00:01:07,780 --> 00:01:11,380
Stride's hiring for software development consultants to co-locate with clients in New York if you're

17
00:01:11,380 --> 00:01:15,180
interested so feel free to chat me up.

18
00:01:15,180 --> 00:01:24,700
I also wanted to talk a little bit about you guys since this is a conference, we're here

19
00:01:24,700 --> 00:01:25,700
to network.

20
00:01:25,700 --> 00:01:30,260
I really appreciated you guys taking the time to respond to my survey.

21
00:01:30,260 --> 00:01:34,780
It was great hearing about your interests and backgrounds.

22
00:01:34,780 --> 00:01:39,300
People were enthusiastic about all kinds of things from medieval times to westerns and

23
00:01:39,300 --> 00:01:41,580
APIs of course.

24
00:01:41,580 --> 00:01:47,540
People were coming from such distant locales as Boston and Taiwan.

25
00:01:47,540 --> 00:01:51,860
Software engineers working in all kinds of fields like finance, construction, materials

26
00:01:51,860 --> 00:01:56,340
and all kinds of different angles of the technical spectrum.

27
00:01:56,340 --> 00:02:02,020
Lots of experts in Git, but some newcomers, both newcomers and experts in Django and unit

28
00:02:02,020 --> 00:02:05,660
test.

29
00:02:05,660 --> 00:02:08,220
All kinds of people today in this tutorial.

30
00:02:08,220 --> 00:02:13,380
Before we get started, I just want to take a couple of minutes, maybe two minutes to

31
00:02:13,380 --> 00:02:16,020
meet your neighbor.

32
00:02:16,020 --> 00:02:18,860
One of my favorite things about coming to conferences is getting to meet people.

33
00:02:18,860 --> 00:02:23,100
So given the crowded room, it might be a little more difficult for me to meet everyone, but

34
00:02:23,100 --> 00:02:27,380
we can meet a couple of people and it might be good to find out what we're looking to

35
00:02:27,380 --> 00:02:32,460
get out of the tutorial, what they might be unfamiliar with being Django, Git testing

36
00:02:32,460 --> 00:02:37,660
or some other technology and if there's a way we can help to meet each other's goal.

37
00:02:38,100 --> 00:02:41,020
We're going to be collaborating together on exercises, so hopefully this will be helpful

38
00:02:41,020 --> 00:02:45,620
and know where everyone else is out and we can move through the exercises quickly working

39
00:02:45,620 --> 00:02:46,620
together.

40
00:02:46,620 --> 00:02:49,620
So yeah, just take like maybe two minutes.

41
00:04:38,620 --> 00:04:44,700
All right.

42
00:04:44,700 --> 00:04:48,900
So I know we're having fun chatting up.

43
00:04:48,900 --> 00:04:52,900
We're going to collaborate a little bit more later.

44
00:04:52,900 --> 00:04:55,660
So yeah, let's get back to it.

45
00:04:55,660 --> 00:04:56,660
Why are we here?

46
00:04:56,660 --> 00:04:58,580
We're here to talk about...

47
00:04:58,580 --> 00:05:00,620
Oh, focus.

48
00:05:00,620 --> 00:05:03,500
GraphQL.

49
00:05:03,500 --> 00:05:04,700
What is GraphQL?

50
00:05:04,700 --> 00:05:06,380
That's the first thing, right?

51
00:05:06,380 --> 00:05:09,300
Some of you guys may be familiar with it.

52
00:05:09,300 --> 00:05:15,340
GraphQL is a query language for your API, basically meaning much like SQL, you can specify

53
00:05:15,340 --> 00:05:19,980
the fields that you want to get out of the API and get exactly what you've asked for

54
00:05:19,980 --> 00:05:21,940
in response.

55
00:05:21,940 --> 00:05:23,860
So GraphQL is a specification.

56
00:05:23,860 --> 00:05:27,260
It's implemented in many languages and frameworks.

57
00:05:27,260 --> 00:05:34,380
The ones that we care about since we're at PyCon is Python and Graphene particularly.

58
00:05:35,380 --> 00:05:41,380
GraphQL provides a system of constraints that help us drive a constantly evolving API.

59
00:05:41,380 --> 00:05:46,380
So one of the things that we like to focus on today is how these constraints that Graphene

60
00:05:46,380 --> 00:05:55,380
and GraphQL put us in help us safely evolve our API over time.

61
00:05:55,380 --> 00:06:00,380
So our focus today is going to be on answering questions like what is GraphQL and what are

62
00:06:00,380 --> 00:06:01,380
its benefits?

63
00:06:01,380 --> 00:06:03,900
How do I get started with GraphQL and Python?

64
00:06:03,900 --> 00:06:07,700
What does it mean for an API to be relay compliant?

65
00:06:07,700 --> 00:06:13,180
What kinds of changes are safe to make my API as clients begin consuming it?

66
00:06:13,180 --> 00:06:17,100
How can I ensure my GraphQL API performs well?

67
00:06:17,100 --> 00:06:22,140
How should I design mutation responses for my GraphQL API to serve client needs?

68
00:06:22,140 --> 00:06:24,500
And why GraphQL?

69
00:06:24,500 --> 00:06:28,580
So this is a lot of stuff, so let's keep moving on.

70
00:06:29,260 --> 00:06:36,540
So if you go to graphql.org, you'll see six bullet points that kind of describes talking

71
00:06:36,540 --> 00:06:39,060
points for why GraphQL is a helpful framework.

72
00:06:39,060 --> 00:06:41,880
Let's dig into those one by one.

73
00:06:41,880 --> 00:06:48,100
So the first bullet point is ask for what you need and get exactly that.

74
00:06:48,100 --> 00:06:51,580
So like I mentioned before, it's a query language for your API.

75
00:06:51,580 --> 00:06:54,260
You can avoid data overfetching by clients.

76
00:06:54,260 --> 00:06:57,460
You don't have to worry about sending too much data over the wire.

77
00:06:57,460 --> 00:07:04,380
It may be expensive to commute because a client may not actually need it.

78
00:07:04,380 --> 00:07:08,860
It's easy for clients to express precise field-by-field data requirements which are lazily evaluated

79
00:07:08,860 --> 00:07:09,860
on the server.

80
00:07:09,860 --> 00:07:13,940
So if something's expensive, like I mentioned before, you don't have to worry about that

81
00:07:13,940 --> 00:07:17,780
getting sent down to the client if they don't need it.

82
00:07:17,780 --> 00:07:22,940
This also encourages concentration of business logic and the domain model and the API in

83
00:07:22,940 --> 00:07:24,660
the back end.

84
00:07:24,660 --> 00:07:29,620
So that means that our clients can be lean and focused on presentation of data.

85
00:07:29,620 --> 00:07:34,620
And if we need to pivot or make a new platform in the future, like a mobile platform or a

86
00:07:34,620 --> 00:07:38,300
public API platform, it's a bit easier because we're not as committed to it.

87
00:07:38,300 --> 00:07:42,340
An example of that, recently, Facebook had a complete rewrite of their platform using

88
00:07:42,340 --> 00:07:44,140
GraphQL.

89
00:07:44,140 --> 00:07:50,340
And the client that they're using is very lean and mainly focused on presentation of

90
00:07:50,340 --> 00:07:51,340
data.

91
00:07:51,620 --> 00:07:55,380
How they were able to do something like that.

92
00:07:55,380 --> 00:08:00,020
The next bullet point, one request for all your data needs.

93
00:08:00,020 --> 00:08:03,260
This basically means that we can avoid n plus one for resources and clients.

94
00:08:03,260 --> 00:08:11,500
An example of an n plus one resource, if you have a really structured rest endpoints, you

95
00:08:11,500 --> 00:08:16,500
might have an endpoint for author and you want to get the publisher's address.

96
00:08:16,500 --> 00:08:20,380
And so you would need to request the author and then the stories from the author, then

97
00:08:20,420 --> 00:08:22,740
the publisher and then the address.

98
00:08:22,740 --> 00:08:32,180
So that helps us to have more structured requests for data that can be all co-located together

99
00:08:32,180 --> 00:08:37,500
for one page load or specific components and user interactions.

100
00:08:37,500 --> 00:08:41,620
Basically a more declarative way to describe what data we're going to be using in our API

101
00:08:41,620 --> 00:08:44,660
and the components in the front end.

102
00:08:44,660 --> 00:08:48,500
The single endpoint also increases discoverability and avoids versioning more endpoints than

103
00:08:48,620 --> 00:08:55,620
a squid has arms, which is nice.

104
00:08:55,620 --> 00:08:59,860
The next selling point is that we can describe what's possible with a type system.

105
00:08:59,860 --> 00:09:02,700
Everything in GraphQL is statically typed.

106
00:09:02,700 --> 00:09:08,980
The specification requires a schema with every field defined and typed.

107
00:09:08,980 --> 00:09:17,740
We can introspect our GraphQL schema in real time, provide documentation and powerful tooling.

108
00:09:17,820 --> 00:09:21,260
And it's also a contract with our clients.

109
00:09:21,260 --> 00:09:26,380
Clients themselves actually request the data using static queries against the static schema

110
00:09:26,380 --> 00:09:28,900
ensuring that we have a safe contract.

111
00:09:28,900 --> 00:09:33,540
And that's something that we can use to validate for breaking changes in our API, which can

112
00:09:33,540 --> 00:09:37,540
be very useful.

113
00:09:37,540 --> 00:09:40,480
We can also evolve our API without versions.

114
00:09:40,480 --> 00:09:45,500
So GraphQL schema provides a safe guide for evolving over time.

115
00:09:45,540 --> 00:09:48,740
The next point is about making changes and encouraging building only what you need now

116
00:09:48,740 --> 00:09:53,700
and embrace the you ain't going to need it or Yagny and evolve as our needs become more

117
00:09:53,700 --> 00:09:56,300
clear over time.

118
00:09:56,300 --> 00:10:02,420
We also have first-class tools for deprecation and control changes to APIs in case we can't

119
00:10:02,420 --> 00:10:05,420
evolve safely.

120
00:10:05,420 --> 00:10:13,260
The next point is about moving faster with powerful developer tools.

121
00:10:13,260 --> 00:10:19,740
So static schema typing and runtime introspection allows tooling to help you move faster.

122
00:10:19,740 --> 00:10:26,100
An example of this is powerful IDE-like editors for rapid prototyping of queries and clients,

123
00:10:26,100 --> 00:10:31,260
like GraphQL, a tool that we'll be using today.

124
00:10:31,260 --> 00:10:36,580
And also you can have a robust client in your front-end web application to manage concerns

125
00:10:36,580 --> 00:10:41,140
like caching and asynchronous actions, which let you focus on code that matters.

126
00:10:41,140 --> 00:10:46,580
So an example of that is Apollo, which we'll be using today.

127
00:10:46,580 --> 00:10:48,380
Can bring your own data and code.

128
00:10:48,380 --> 00:10:54,140
So there's broad support across languages, starting with JavaScript, and over time more

129
00:10:54,140 --> 00:10:57,380
clients are available, including Python.

130
00:10:57,380 --> 00:11:00,300
The Python community is growing also, which is pretty exciting.

131
00:11:00,300 --> 00:11:08,180
We've had Graphene, which is a very established and fully featured client or server that we

132
00:11:08,180 --> 00:11:09,980
can use.

133
00:11:09,980 --> 00:11:16,300
But there are also newcomers like Ariadne and Strawberry, and more people are getting

134
00:11:16,300 --> 00:11:17,300
involved in the community.

135
00:11:17,300 --> 00:11:21,420
So it's kind of an exciting time to be involved.

136
00:11:21,420 --> 00:11:27,940
Lastly, GraphQL can be a unifying API for any kind of data source.

137
00:11:27,940 --> 00:11:36,100
So basically that means we can leverage that as glue for other data sources and APIs because

138
00:11:36,100 --> 00:11:38,020
it has that static type.

139
00:11:38,060 --> 00:11:44,060
It's very easy to provide a back-end for microservices, other data sources.

140
00:11:44,060 --> 00:11:48,220
It can also be a back-end for front-end for almost anything.

141
00:11:48,220 --> 00:11:55,380
So GraphQL can be a gateway that allows us to cater to the needs of mobile, web, and

142
00:11:55,380 --> 00:11:59,500
outside clients.

143
00:11:59,500 --> 00:12:01,300
So let's talk some logistics before we get going.

144
00:12:01,300 --> 00:12:06,500
I think some of this may be a repeat if you've reviewed the references and stuff, but I'll

145
00:12:06,500 --> 00:12:09,500
try to get through it for anyone who may have missed those.

146
00:12:09,500 --> 00:12:13,700
So the general schedule for the workshop, I'm going to be trying to follow Pomodoro

147
00:12:13,700 --> 00:12:20,020
25 minutes on, 5 minutes off, where we can get some water or ask some questions.

148
00:12:20,020 --> 00:12:25,300
Have a handy-dandy clock running right now, so we have about 12 more minutes on this pond.

149
00:12:25,300 --> 00:12:32,260
We'll also be doing lectures and exercises, going through GraphQL and Graphene basics,

150
00:12:32,300 --> 00:12:42,300
CRT, XLA compliance, schema evolution, performance of APIs, and mutations and client side concerns.

151
00:12:42,300 --> 00:12:47,300
General principles with designing this tutorial, I would definitely encourage you guys to pair

152
00:12:47,300 --> 00:12:54,660
on exercises to share your expertise and help each other move through the exercises, and

153
00:12:54,660 --> 00:12:59,540
also have a little bit more fun, hopefully.

154
00:12:59,540 --> 00:13:03,060
The tutorial code kind of tried to follow these general coding

155
00:13:03,060 --> 00:13:06,020
practices where the API code is very simple.

156
00:13:06,020 --> 00:13:11,540
Most of the logic is in the models and service layer.

157
00:13:11,540 --> 00:13:15,020
We drive solutions for the exercises in all these

158
00:13:15,020 --> 00:13:16,940
with tests that are already prepared for you,

159
00:13:16,940 --> 00:13:21,140
so you'll know when the solution is right.

160
00:13:21,140 --> 00:13:25,580
And we model our API and coordinate the code.

161
00:13:25,580 --> 00:13:29,820
So each chapter has at least one branch in the Git repo.

162
00:13:29,820 --> 00:13:32,740
We'll start with the branch chapter one.

163
00:13:32,740 --> 00:13:34,580
And some chapters have multiple branches.

164
00:13:34,580 --> 00:13:36,120
We'll indicate which branch should be checked out

165
00:13:36,120 --> 00:13:36,900
for the exercise.

166
00:13:40,180 --> 00:13:42,040
The project set up is in the readme.

167
00:13:42,040 --> 00:13:46,260
There's a pretty self-explanatory invoke script

168
00:13:46,260 --> 00:13:48,700
that will help you get set up quickly, I hope.

169
00:13:51,700 --> 00:13:53,740
There are some compatibility issues with Windows.

170
00:13:53,740 --> 00:13:57,700
So running the check and start commands

171
00:13:57,700 --> 00:13:59,700
may not work properly on Windows.

172
00:13:59,700 --> 00:14:03,620
But you can just use the pipen script that's

173
00:14:03,620 --> 00:14:05,300
listed in the readme instead of that.

174
00:14:10,220 --> 00:14:13,300
Also in the repo is a references file

175
00:14:13,300 --> 00:14:16,460
that some of you may have seen already.

176
00:14:16,460 --> 00:14:18,540
This kind of has some basic commands

177
00:14:18,540 --> 00:14:21,220
that you will need to do.

178
00:14:21,220 --> 00:14:22,940
Pretty much for our purposes, we just

179
00:14:22,940 --> 00:14:27,060
need to check out chapters and make our working tree clean.

180
00:14:27,060 --> 00:14:30,420
So either save the work in progress

181
00:14:30,420 --> 00:14:34,660
or reset or stash the work that you have.

182
00:14:37,740 --> 00:14:42,100
For our Python environment, anything above 3.6

183
00:14:42,100 --> 00:14:43,020
should work fine.

184
00:14:43,020 --> 00:14:45,300
But I'd recommend the latest Python.

185
00:14:45,300 --> 00:14:49,140
We'll be using pipen for the virtual environment

186
00:14:49,140 --> 00:14:52,420
and also using pipen script's functionality

187
00:14:52,420 --> 00:14:56,460
to centralize all the useful commands that we will be using.

188
00:15:01,580 --> 00:15:04,500
Like I mentioned before, using invoke as a task runner

189
00:15:04,500 --> 00:15:07,540
and pipen script for our build scripts.

190
00:15:07,540 --> 00:15:10,380
So there are some nice tasks that you

191
00:15:10,380 --> 00:15:13,700
can use while you're going through the tutorial.

192
00:15:13,700 --> 00:15:18,580
I'll call them out in the exercise explanation as needed.

193
00:15:18,580 --> 00:15:20,300
But if you want to poke at it a little bit,

194
00:15:20,300 --> 00:15:24,100
you can list the tasks using invoke-l.

195
00:15:24,100 --> 00:15:28,940
And each of the tasks has some corresponding pipen script

196
00:15:28,940 --> 00:15:31,220
that it's deferring to.

197
00:15:34,980 --> 00:15:39,700
So for this code base, we're using unit tests for testing.

198
00:15:39,700 --> 00:15:41,740
They're pre-written for each exercise.

199
00:15:41,740 --> 00:15:43,420
Basically, if you run the tests, you'll

200
00:15:43,420 --> 00:15:47,460
know if you're implemented properly or not.

201
00:15:47,460 --> 00:15:52,180
We're using pilant and mypy for linting and type annotations.

202
00:15:52,180 --> 00:15:57,260
Type annotations hopefully are useful for folks here,

203
00:15:57,260 --> 00:15:59,380
even if you've haven't seen them before.

204
00:15:59,380 --> 00:16:01,660
Basically, we have the argument here, which is root,

205
00:16:01,660 --> 00:16:03,940
and then the type that that argument is.

206
00:16:03,940 --> 00:16:07,460
So in this case, our root is a story model from our Django

207
00:16:07,460 --> 00:16:08,740
RRM.

208
00:16:08,740 --> 00:16:12,780
And this info is from Graphene.

209
00:16:12,780 --> 00:16:14,420
It's the resolve info.

210
00:16:14,420 --> 00:16:16,540
And display is just a string.

211
00:16:16,540 --> 00:16:19,620
We also have the return type here, which is a string.

212
00:16:19,620 --> 00:16:22,420
So hopefully that demystifies some of the weird arguments

213
00:16:22,420 --> 00:16:25,780
that you might see flying around in a GraphQL resolver, which

214
00:16:25,780 --> 00:16:26,980
we'll get to a little bit later.

215
00:16:30,500 --> 00:16:31,660
We're also using Django.

216
00:16:31,660 --> 00:16:34,860
You'll have to write some Django during some of the exercises.

217
00:16:34,860 --> 00:16:37,060
But the key commands are kind of here

218
00:16:37,060 --> 00:16:39,740
and listed in the references.

219
00:16:39,740 --> 00:16:43,900
So hopefully your neighbor is familiar with Django

220
00:16:43,900 --> 00:16:44,380
if you're not.

221
00:16:46,980 --> 00:16:49,900
So finally, getting to GraphQL and Python.

222
00:16:49,900 --> 00:16:51,420
Graphene is our focus today.

223
00:16:51,420 --> 00:16:53,180
It's a code-first library, meaning

224
00:16:53,180 --> 00:17:00,100
that we will write Python code instead of defining the schema

225
00:17:00,100 --> 00:17:03,340
through the GraphQL schema definition language, which

226
00:17:03,340 --> 00:17:07,060
a library like Ariadne, which is another newer GraphQL library

227
00:17:07,060 --> 00:17:08,460
in Python, uses.

228
00:17:08,460 --> 00:17:12,500
So in Ariadne, you would write a special GraphQL syntax

229
00:17:12,500 --> 00:17:15,140
for defining the schema and then write Python

230
00:17:15,140 --> 00:17:21,540
to bind that schema to your Python models.

231
00:17:21,540 --> 00:17:25,460
Ariadne also supports asyncIO.

232
00:17:25,460 --> 00:17:27,460
There are other newcomers, like Strawberry,

233
00:17:27,460 --> 00:17:31,660
which is code-first as well as Graphene, asyncIO

234
00:17:31,660 --> 00:17:35,060
and uses data classes under the hood.

235
00:17:35,060 --> 00:17:37,660
So yeah, it's an exciting time to be involved with GraphQL

236
00:17:37,660 --> 00:17:39,860
and Python.

237
00:17:39,860 --> 00:17:45,900
So let's get into the actual material.

238
00:17:45,900 --> 00:17:49,540
So to start off with, let's just have a simple API, just one

239
00:17:49,540 --> 00:17:51,740
resource, listing stories.

240
00:17:51,740 --> 00:17:56,620
So how would we get a list of the titles and authors

241
00:17:56,620 --> 00:18:00,980
for those stories with REST and GraphQL?

242
00:18:00,980 --> 00:18:05,380
So with REST, to get the stories and authors,

243
00:18:05,380 --> 00:18:09,460
story titles and authors, we don't really have a schema.

244
00:18:09,460 --> 00:18:11,380
It may be documented in something like Swagger.

245
00:18:11,380 --> 00:18:15,540
We may have some other generated documentation or a readme.

246
00:18:15,540 --> 00:18:19,300
We may ask somebody which endpoint to use on their team.

247
00:18:19,300 --> 00:18:21,100
But eventually, we'll find our endpoint.

248
00:18:21,100 --> 00:18:24,340
So we'll get our API V1 stories.

249
00:18:24,340 --> 00:18:30,660
And we'll pass an argument for how we want the name to display.

250
00:18:30,660 --> 00:18:32,940
And then we'll get a response, which

251
00:18:32,940 --> 00:18:35,260
may be a little bit more data than we really need right now.

252
00:18:35,260 --> 00:18:44,700
So with GraphQL, we have a schema that's defined.

253
00:18:44,700 --> 00:18:46,580
With Graphene, we don't write this schema,

254
00:18:46,580 --> 00:18:51,620
but we can generate it from the code that we've written.

255
00:18:51,620 --> 00:18:53,180
We'll get into a little bit about what

256
00:18:53,180 --> 00:18:55,460
these different parts of the schema are.

257
00:18:55,460 --> 00:18:59,420
It's useful to know generally what the GraphQL STL syntax is.

258
00:18:59,420 --> 00:19:01,460
So that way, if you are interested in using

259
00:19:02,300 --> 00:19:07,660
or JavaScript library, you can read the documentation,

260
00:19:07,660 --> 00:19:09,660
understand it.

261
00:19:09,660 --> 00:19:12,860
When we have that schema set up, we'll send a query.

262
00:19:12,860 --> 00:19:16,020
And we'll get back some data in the same shape that we asked for.

263
00:19:19,580 --> 00:19:22,700
So let's pick apart each of those pieces now.

264
00:19:22,700 --> 00:19:26,380
The first piece is the schema.

265
00:19:26,380 --> 00:19:28,140
So as I mentioned before, this over here

266
00:19:28,140 --> 00:19:29,580
is our schema definition language

267
00:19:29,580 --> 00:19:34,060
that describes our API, the fields that are available.

268
00:19:34,060 --> 00:19:37,020
We have a root query, which is basically the entry point

269
00:19:37,020 --> 00:19:38,640
to our API.

270
00:19:38,640 --> 00:19:43,300
We only have one field on the entry point, which is stories.

271
00:19:43,300 --> 00:19:46,380
And it is of the type story type, which we define over here.

272
00:19:46,380 --> 00:19:49,900
So that's a custom object type that we've defined.

273
00:19:49,900 --> 00:19:51,900
And that object type has fields using

274
00:19:51,900 --> 00:19:54,700
scalars, like strings and ints and floats.

275
00:19:54,700 --> 00:19:58,380
We can indicate required fields with a bang, an exclamation

276
00:19:58,380 --> 00:20:00,380
point there.

277
00:20:00,380 --> 00:20:03,380
We also have arguments that we can define on any field at all,

278
00:20:03,380 --> 00:20:05,980
which is incredibly useful for describing the data

279
00:20:05,980 --> 00:20:07,820
requirements for our front end.

280
00:20:07,820 --> 00:20:09,820
So in this case, we have a name field.

281
00:20:09,820 --> 00:20:14,420
And we pass an enum to indicate the display format, which

282
00:20:14,420 --> 00:20:15,900
in this case is first or last.

283
00:20:18,460 --> 00:20:19,900
We also have array fields.

284
00:20:19,900 --> 00:20:22,900
So just like in Python, those are the array fields.

285
00:20:23,060 --> 00:20:24,900
So just like in Python, those are

286
00:20:24,900 --> 00:20:28,300
indicated with square brackets.

287
00:20:28,300 --> 00:20:33,180
And we can also define enums, lists of related values

288
00:20:33,180 --> 00:20:34,340
that we can use in the API.

289
00:20:39,820 --> 00:20:43,780
So next, we are writing a query against that schema.

290
00:20:43,780 --> 00:20:46,620
So here we have the optional query keyword.

291
00:20:46,620 --> 00:20:48,620
In most cases, that's understood.

292
00:20:48,620 --> 00:20:50,780
But it's useful to include that sometimes.

293
00:20:50,820 --> 00:20:52,900
We also have an optional operation name.

294
00:20:52,900 --> 00:20:55,100
So we can call our query anything we want.

295
00:20:55,100 --> 00:20:58,220
It's just a convenient thing for our clients to use.

296
00:20:58,220 --> 00:21:00,860
So we could call this query pants if we wanted to,

297
00:21:00,860 --> 00:21:03,820
and it would be fine.

298
00:21:03,820 --> 00:21:05,740
This is our field on the root query.

299
00:21:05,740 --> 00:21:08,580
So we have stories on the root query.

300
00:21:08,580 --> 00:21:10,900
That's our first field that we're fetching.

301
00:21:10,900 --> 00:21:15,220
We have a selection set of fields on the object, the

302
00:21:15,220 --> 00:21:18,980
fields in the selection set, and the arguments and values

303
00:21:18,980 --> 00:21:20,220
for those arguments.

304
00:21:22,580 --> 00:21:25,140
So when we send that to the server, we're going to get

305
00:21:25,140 --> 00:21:27,820
some JSON results back.

306
00:21:27,820 --> 00:21:29,780
And those JSON results are going to be exactly in the

307
00:21:29,780 --> 00:21:32,900
shape of what we asked for.

308
00:21:32,900 --> 00:21:35,620
Only the fields that we've asked for in the selection set

309
00:21:35,620 --> 00:21:36,860
are evaluated.

310
00:21:39,460 --> 00:21:43,340
So if we need to change data, we can write a mutation.

311
00:21:43,380 --> 00:21:49,140
So in REST, we might write a put or delete or a patch.

312
00:21:49,140 --> 00:21:52,940
In GraphQL, it's only a mutation.

313
00:21:52,940 --> 00:21:56,540
So in this case, we still define a schema.

314
00:21:56,540 --> 00:22:00,620
We send the mutation, which looks very similar to the

315
00:22:00,620 --> 00:22:03,340
query, except we have a mutation keyword instead of a

316
00:22:03,340 --> 00:22:06,580
query keyword.

317
00:22:06,580 --> 00:22:09,820
We pass some input variables in our arguments.

318
00:22:10,820 --> 00:22:11,900
We do some operations.

319
00:22:11,900 --> 00:22:14,660
So we create the story.

320
00:22:14,660 --> 00:22:20,660
And we get back the data using this story type.

321
00:22:20,660 --> 00:22:22,660
So this is exactly the same story type that we defined

322
00:22:22,660 --> 00:22:23,940
earlier for our queries.

323
00:22:23,940 --> 00:22:26,780
So it leads to some good code reuse.

324
00:22:26,780 --> 00:22:31,620
We don't need to re-implement the wheel.

325
00:22:31,620 --> 00:22:34,940
And the user has a lot of flexibility as to what data

326
00:22:34,940 --> 00:22:36,220
they fetch from that.

327
00:22:36,220 --> 00:22:38,820
Like if we had other connected types, we'd have

328
00:22:39,820 --> 00:22:43,140
on that story type, we could keep fetching all day.

329
00:22:43,140 --> 00:22:43,980
Cool.

330
00:22:43,980 --> 00:22:45,700
Yeah.

331
00:22:45,700 --> 00:22:48,100
Actually, we have a mic for questions.

332
00:22:48,100 --> 00:22:56,940
So I was just going to ask about questions.

333
00:22:56,940 --> 00:23:00,860
In both the two slides here, you mentioned create your

334
00:23:00,860 --> 00:23:01,340
schema.

335
00:23:01,340 --> 00:23:05,220
That's on the server side that the API developer would do,

336
00:23:05,220 --> 00:23:06,100
correct?

337
00:23:06,100 --> 00:23:06,580
That's right.

338
00:23:06,580 --> 00:23:08,700
The schema will be defined on the schema.

339
00:23:08,700 --> 00:23:09,780
Or the server side.

340
00:23:09,780 --> 00:23:09,980
OK.

341
00:23:09,980 --> 00:23:14,140
And the other queries that you're doing are pulled from

342
00:23:14,140 --> 00:23:15,420
the schema.

343
00:23:15,420 --> 00:23:19,500
The queries are sent by the client to the server.

344
00:23:19,500 --> 00:23:22,500
And they'll match up with the schema that we provided there.

345
00:23:25,220 --> 00:23:25,620
Cool.

346
00:23:25,620 --> 00:23:26,620
Any other questions?

347
00:23:26,620 --> 00:23:27,860
I think we've got one more minute.

348
00:23:32,420 --> 00:23:32,940
Yes.

349
00:23:32,940 --> 00:23:34,220
The slides will be available.

350
00:23:34,220 --> 00:23:38,100
So the question was, are the slides available?

351
00:23:38,100 --> 00:23:40,860
I can make you want to follow along or something?

352
00:23:40,860 --> 00:23:41,340
Yes.

353
00:23:41,340 --> 00:23:44,820
It's kind of a small way back here.

354
00:23:44,820 --> 00:23:47,100
The idea there is not that it's one slide, but that might

355
00:23:47,100 --> 00:23:48,180
help.

356
00:23:48,180 --> 00:23:49,220
OK.

357
00:23:49,220 --> 00:23:50,300
Cool.

358
00:23:50,300 --> 00:23:52,980
That's good feedback.

359
00:23:52,980 --> 00:23:55,100
Well, we have our first palm break coming up.

360
00:23:55,100 --> 00:23:58,620
And I'm going to try to make that available.

361
00:23:58,620 --> 00:24:00,820
Sure.

362
00:24:00,820 --> 00:24:02,260
So yeah.

363
00:24:02,260 --> 00:24:03,700
Let's just take five minutes.

364
00:24:03,700 --> 00:24:06,540
I'm just going to grab some water and make that available

365
00:24:06,540 --> 00:24:07,780
for you guys.

366
00:24:36,540 --> 00:24:46,300
OK.

367
00:24:46,300 --> 00:24:49,540
So I made those available now.

368
00:24:49,540 --> 00:24:53,100
So if you look in the Read Me in the repository, you should

369
00:24:53,100 --> 00:24:58,180
be able to click the link and follow to the slides.

370
00:24:58,180 --> 00:25:02,020
Just let me know if you're able to access it.

371
00:25:02,020 --> 00:25:03,260
Yep.

372
00:25:07,500 --> 00:25:08,980
Locking data packets.

373
00:25:08,980 --> 00:25:09,460
Anything?

374
00:25:09,460 --> 00:25:10,940
It won't be running forever.

375
00:25:10,940 --> 00:25:13,460
And then you can know where the data is other than the

376
00:25:13,460 --> 00:25:15,940
other side of the point.

377
00:25:15,940 --> 00:25:17,900
My partner also had the same problem.

378
00:25:17,900 --> 00:25:18,380
Yeah.

379
00:25:18,380 --> 00:25:19,860
It was just saying locking.

380
00:25:19,860 --> 00:25:21,340
And just, that's it.

381
00:25:21,340 --> 00:25:21,820
Cool.

382
00:25:21,820 --> 00:25:23,300
We will eventually come back.

383
00:25:23,300 --> 00:25:24,740
I think I have one more point.

384
00:25:24,740 --> 00:25:25,940
It's the data connection.

385
00:25:25,940 --> 00:25:26,940
It's very hard to know.

386
00:25:26,940 --> 00:25:28,420
It's the data connection.

387
00:25:28,420 --> 00:25:29,900
And use your phone to help.

388
00:25:29,900 --> 00:25:31,380
It's a profile.

389
00:25:31,380 --> 00:25:31,860
OK.

390
00:25:31,860 --> 00:25:33,340
All right.

391
00:25:33,340 --> 00:25:34,820
OK.

392
00:25:34,820 --> 00:25:36,300
I have many Windows.

393
00:25:36,300 --> 00:25:38,780
If you could hear something, it would be really nice.

394
00:25:38,780 --> 00:25:40,260
I'm not a robot.

395
00:25:40,260 --> 00:25:41,740
I know Windows is long.

396
00:25:41,740 --> 00:25:43,220
I got it.

397
00:25:43,220 --> 00:25:46,460
OK.

398
00:25:46,460 --> 00:25:48,780
That was part of the reason why I put that tutorial out.

399
00:25:48,780 --> 00:25:50,460
I was like, how many people are using Windows?

400
00:25:50,460 --> 00:25:52,260
No, but these are the only people.

401
00:25:52,260 --> 00:25:53,020
Oh, are you?

402
00:25:53,020 --> 00:25:53,860
OK.

403
00:25:53,860 --> 00:25:55,780
I think it's probably the Wi-Fi.

404
00:25:55,780 --> 00:25:59,340
The download speed is 0.3.

405
00:25:59,340 --> 00:26:00,860
There's too many people in here, I guess.

406
00:26:00,860 --> 00:26:02,260
Yeah, it's not even the main day.

407
00:26:02,260 --> 00:26:03,740
That's not a good sign for Windows.

408
00:26:03,740 --> 00:26:04,240
Yeah.

409
00:26:29,340 --> 00:26:30,860
Any other questions or setup problems?

410
00:26:33,740 --> 00:26:38,180
I'm getting an error on the Windows setup.

411
00:26:38,180 --> 00:26:40,140
I'm not sure what it's saying.

412
00:26:40,140 --> 00:26:42,380
It seems like it's saying it's not

413
00:26:42,380 --> 00:26:44,340
part of the version that Mac has expressed.

414
00:26:47,100 --> 00:26:47,820
OK.

415
00:26:47,820 --> 00:26:50,820
It seems like that's a similar thing with the dependencies.

416
00:26:50,820 --> 00:26:52,780
Well, it's not that it's changing.

417
00:26:52,780 --> 00:26:54,780
It's that it's not changing.

418
00:26:54,780 --> 00:26:55,780
It's on Mac.

419
00:26:55,780 --> 00:26:57,260
It's on Mac.

420
00:26:57,260 --> 00:26:58,220
And you're on Mac?

421
00:26:58,220 --> 00:26:58,720
Mac.

422
00:27:01,700 --> 00:27:03,180
I've got a minute.

423
00:27:03,180 --> 00:27:03,660
I'm back.

424
00:29:28,220 --> 00:29:28,720
OK.

425
00:29:50,060 --> 00:29:51,780
All right.

426
00:29:51,780 --> 00:29:54,940
So let's keep moving forward.

427
00:29:54,980 --> 00:29:58,900
So hopefully most of you guys have everything set up

428
00:29:58,900 --> 00:30:00,660
properly and there are a couple of issues.

429
00:30:03,300 --> 00:30:05,020
One of the tools that we were using today

430
00:30:05,020 --> 00:30:07,260
is called GraphiQL.

431
00:30:07,260 --> 00:30:13,020
GraphiQL is a very helpful tool for exploring your API.

432
00:30:16,260 --> 00:30:19,720
Basically, it's like an ID for prototyping queries.

433
00:30:19,720 --> 00:30:21,640
So on the left-hand side here, we

434
00:30:21,640 --> 00:30:24,420
have a query editor where we can write queries.

435
00:30:24,420 --> 00:30:28,540
And it has like autocomplete and all kinds of helpful features.

436
00:30:28,540 --> 00:30:32,100
On the right, we have the query results,

437
00:30:32,100 --> 00:30:34,780
which is the data that comes back from our server.

438
00:30:34,780 --> 00:30:37,980
We can also pass in some variables

439
00:30:37,980 --> 00:30:40,780
into our queries when we're sending it to the server, which

440
00:30:40,780 --> 00:30:43,860
we'll get into a little bit later in this talk.

441
00:30:43,860 --> 00:30:47,300
But for now, don't worry about it too much.

442
00:30:50,340 --> 00:30:52,580
So GraphiQL provides some powerful features

443
00:30:52,580 --> 00:30:56,380
for rapidly prototyping queries for your API.

444
00:30:56,380 --> 00:30:59,580
So we can run multiple operations.

445
00:30:59,580 --> 00:31:01,580
So we have multiple queries here.

446
00:31:01,580 --> 00:31:04,100
Each have their own name, their own operation name,

447
00:31:04,100 --> 00:31:06,300
and we can pick them to run.

448
00:31:06,300 --> 00:31:09,540
We can prettify our query and make it look nice

449
00:31:09,540 --> 00:31:14,940
or check that it's valid against that schema.

450
00:31:14,940 --> 00:31:18,260
We can also check the history of queries that we've run.

451
00:31:18,260 --> 00:31:21,860
And probably most excitingly, you can actually

452
00:31:21,860 --> 00:31:23,060
browse the documentation.

453
00:31:23,060 --> 00:31:24,820
So you can search the documentation,

454
00:31:24,820 --> 00:31:27,260
see what the description of all the fields are,

455
00:31:27,260 --> 00:31:32,980
and really discover what kinds of things

456
00:31:32,980 --> 00:31:36,220
are available in your API.

457
00:31:36,220 --> 00:31:37,980
So some power user tips.

458
00:31:37,980 --> 00:31:42,740
You can hit Control and Space to do an autocompletion hint.

459
00:31:42,740 --> 00:31:45,140
In the query editor window, you'll

460
00:31:45,140 --> 00:31:48,700
get that automatically when you start typing.

461
00:31:48,700 --> 00:31:51,220
But it can be nice to hit that before you

462
00:31:51,220 --> 00:31:55,300
start typing to know what you can even type to begin with.

463
00:31:55,300 --> 00:31:58,060
You can also hit Control and Enter to run under the cursor.

464
00:31:58,060 --> 00:32:00,460
So if there's multiple queries in your window,

465
00:32:00,460 --> 00:32:02,420
Control and Enter will run that query

466
00:32:02,420 --> 00:32:06,400
that your cursor is on right then.

467
00:32:06,400 --> 00:32:08,860
So let's do an exercise.

468
00:32:08,860 --> 00:32:13,060
So we'll try to pair up.

469
00:32:13,060 --> 00:32:16,940
Ensure you're on the chapter one branch.

470
00:32:16,940 --> 00:32:22,460
Open up this file, API Queries.graphql,

471
00:32:22,460 --> 00:32:25,260
for some sample queries and instructions

472
00:32:25,260 --> 00:32:26,860
on how to get started.

473
00:32:26,860 --> 00:32:29,220
And run some queries in GraphiQL.

474
00:32:29,220 --> 00:32:31,900
Just copy over those queries into GraphiQL.

475
00:32:31,900 --> 00:32:33,380
Spin up your server.

476
00:32:33,380 --> 00:32:38,420
And try to add some new fields, change some arguments,

477
00:32:38,420 --> 00:32:39,660
explore the documentation.

478
00:32:39,660 --> 00:32:41,340
Just get comfortable with using GraphiQL.

479
00:32:41,340 --> 00:32:41,840
Yep.

480
00:32:54,300 --> 00:32:56,060
Sure.

481
00:32:56,060 --> 00:33:04,140
So if you start your server, you can go to localhost 8000

482
00:33:04,140 --> 00:33:06,140
slash GraphQL.

483
00:33:06,140 --> 00:33:09,180
And if you open this API slash queries.graphql,

484
00:33:09,180 --> 00:33:11,780
there's some more detailed instructions in there too.

485
00:33:11,780 --> 00:33:14,020
So let me actually pull that up.

486
00:34:09,340 --> 00:34:11,820
Can I go to the white line?

487
00:34:11,820 --> 00:34:12,320
Yeah.

488
00:34:42,320 --> 00:34:42,820
OK.

489
00:35:13,120 --> 00:35:14,600
So what exactly are we querying?

490
00:35:14,600 --> 00:35:16,080
Is there a database locally?

491
00:35:16,080 --> 00:35:18,720
Is there another one?

492
00:35:18,720 --> 00:35:19,220
Sure.

493
00:35:19,220 --> 00:35:22,600
So the question was, what are we querying when we run this?

494
00:35:22,600 --> 00:35:24,600
So there's actually a database locally.

495
00:35:24,600 --> 00:35:26,680
There's a SQLite database.

496
00:35:26,680 --> 00:35:28,280
There's some Django models.

497
00:35:28,280 --> 00:35:36,360
And next step, we'll dig into how that's implemented.

498
00:35:36,360 --> 00:35:40,680
We take another four minutes or so

499
00:35:40,680 --> 00:35:44,920
just to get set up and comfortable with that.

500
00:35:44,920 --> 00:35:47,400
Happy to answer any questions people have to while we're

501
00:35:47,400 --> 00:35:48,600
working through that.

502
00:35:48,600 --> 00:35:51,560
Can we try the mutations file or does it need a variable?

503
00:35:51,560 --> 00:35:53,360
Yeah, you can try that actually.

504
00:35:53,360 --> 00:35:56,480
So there is a mutations.graphql file.

505
00:35:56,480 --> 00:36:00,920
So if you're comfortable with the queries,

506
00:36:00,920 --> 00:36:03,560
feel free to open up that mutations file

507
00:36:03,560 --> 00:36:05,600
and take a look at that as well.

508
00:36:05,600 --> 00:36:07,160
So let's see.

509
00:36:10,680 --> 00:36:16,040
So that's a similar path to the queries file.

510
00:36:16,040 --> 00:36:18,440
And yeah, you can just paste it in there.

511
00:36:22,040 --> 00:36:26,400
And also, if you're curious to poke at something that's a

512
00:36:26,400 --> 00:36:29,800
little bit more meaty than this right now, you can check out

513
00:36:29,800 --> 00:36:33,040
this URL here, developer.github.com.

514
00:36:33,040 --> 00:36:35,600
And then you can go to the next one.

515
00:36:35,600 --> 00:36:41,600
And check out this URL here, developer.github.com.

516
00:36:41,600 --> 00:36:42,840
v4-explorer.

517
00:36:53,480 --> 00:36:59,760
So if you sign in with GitHub, you can actually query anything

518
00:36:59,760 --> 00:37:03,160
about yourself on GitHub.

519
00:37:03,200 --> 00:37:04,440
I have a sample query here.

520
00:37:18,400 --> 00:37:21,200
So here's some comments that I had on GitHub.

521
00:37:25,880 --> 00:37:31,840
And this API, the GitHub API, is actually one of the most

522
00:37:31,840 --> 00:37:35,680
robust and gold standard APIs for GraphQL that's out there.

523
00:37:57,040 --> 00:37:58,280
We have a couple minutes.

524
00:38:01,840 --> 00:38:07,240
So this is the kind of craziness that you can have

525
00:38:07,240 --> 00:38:10,840
with a GraphQL schema.

526
00:38:10,840 --> 00:38:14,720
So this is GitHub's schema from their root query.

527
00:38:14,720 --> 00:38:18,080
So they have organization, repository, repository owner,

528
00:38:18,080 --> 00:38:19,880
resource, and all of that.

529
00:38:19,880 --> 00:38:22,680
And then you can actually query the whole thing.

530
00:38:22,680 --> 00:38:25,280
And then you can actually query the whole thing.

531
00:38:25,280 --> 00:38:27,680
And then you can actually query the whole thing.

532
00:38:27,680 --> 00:38:30,080
And then you can actually query the whole thing.

533
00:38:30,080 --> 00:38:32,160
Repository, repository owner, resource.

534
00:38:32,160 --> 00:38:34,560
Those are the root things they make available.

535
00:38:34,560 --> 00:38:39,600
And from that, we can go take a look at repository,

536
00:38:39,600 --> 00:38:45,000
see what fields are there, what kind of issues

537
00:38:45,000 --> 00:38:50,880
are on that repository, what kind of users edited that,

538
00:38:50,880 --> 00:38:52,240
so all kinds of stuff.

539
00:38:52,240 --> 00:38:55,840
And this tool is driven by that GraphQL schema

540
00:38:55,840 --> 00:38:57,040
that I was talking about.

541
00:39:30,080 --> 00:39:31,080
OK, cool.

542
00:39:51,840 --> 00:39:54,440
All right, why don't we move ahead?

543
00:39:54,440 --> 00:39:58,160
Any other quick questions before we move on?

544
00:39:58,160 --> 00:39:58,840
On the back?

545
00:40:00,080 --> 00:40:06,840
Yeah, let's do that.

546
00:40:06,840 --> 00:40:08,400
Well, let's move on to the next section,

547
00:40:08,400 --> 00:40:11,680
and I'll explain that to you.

548
00:40:11,680 --> 00:40:14,240
So now let's actually get to the Python part of this.

549
00:40:14,240 --> 00:40:16,920
This was just like kind of a surface level GraphQL

550
00:40:16,920 --> 00:40:18,160
explanation that we went through.

551
00:40:21,200 --> 00:40:24,800
So there's increasing diversity in the GraphQL Python ecosystem.

552
00:40:24,800 --> 00:40:26,960
So there's both code-first and schema-first approaches,

553
00:40:26,960 --> 00:40:28,560
like I mentioned.

554
00:40:28,560 --> 00:40:33,520
Graphene is a code-first implementation of GraphQL,

555
00:40:33,520 --> 00:40:35,240
and it's one of the most established ones.

556
00:40:35,240 --> 00:40:38,080
So that's what we'll be using today.

557
00:40:38,080 --> 00:40:40,360
There's also bindings for Django and pretty much

558
00:40:40,360 --> 00:40:46,040
any other popular framework like SQLAlchemy you could think of.

559
00:40:46,040 --> 00:40:48,600
So we'll be using Graphene-Django bindings as well.

560
00:40:51,080 --> 00:40:53,640
So kind of like to go to that question about what happens

561
00:40:53,640 --> 00:40:57,920
with the server side of things, how does this query get

562
00:40:57,920 --> 00:40:59,360
resolved?

563
00:40:59,360 --> 00:41:02,120
So it kind of starts from the URL route.

564
00:41:02,120 --> 00:41:05,360
So if anyone's familiar with Django,

565
00:41:05,360 --> 00:41:07,400
we have this urls.py.

566
00:41:07,400 --> 00:41:10,040
We define all the routes that our application

567
00:41:10,040 --> 00:41:11,720
is going to serve.

568
00:41:11,720 --> 00:41:13,560
In this case, we just have one endpoint

569
00:41:13,560 --> 00:41:16,320
for processing GET or POST requests,

570
00:41:16,320 --> 00:41:17,880
and it's just GraphQL.

571
00:41:17,880 --> 00:41:21,080
That's the endpoint that we were using for GraphQL.

572
00:41:21,080 --> 00:41:26,640
So Graphene provides this GraphQL view

573
00:41:26,640 --> 00:41:30,000
that we can use as the view for that route.

574
00:41:30,000 --> 00:41:32,880
We pass it the schema, which we'll define in code,

575
00:41:32,880 --> 00:41:36,360
and we tell it that we want graphical enabled.

576
00:41:36,360 --> 00:41:37,880
But you can disable it for production

577
00:41:37,880 --> 00:41:39,840
if you don't want people poking at your API.

578
00:41:43,960 --> 00:41:48,120
So the schema is defined through Graphene.

579
00:41:48,160 --> 00:41:54,880
So we have our schema here, which we passed into our view.

580
00:41:54,880 --> 00:41:59,880
We define a route query object, Graphene object type.

581
00:41:59,880 --> 00:42:03,640
And on that route query, we define fields.

582
00:42:03,640 --> 00:42:07,680
So we have stories, which is a list of story type.

583
00:42:07,680 --> 00:42:11,760
And we define that custom story type up here.

584
00:42:11,760 --> 00:42:14,920
So this is all analogous to the SDL on the left

585
00:42:14,920 --> 00:42:17,040
that we talked about earlier.

586
00:42:17,040 --> 00:42:21,200
We have our fields, ID, title, and subtitle.

587
00:42:21,200 --> 00:42:25,920
We have an author name, which is camel-cased by automatic

588
00:42:25,920 --> 00:42:30,560
with Graphene, so we don't have to worry about maintaining

589
00:42:30,560 --> 00:42:32,960
consistency with Python's standards

590
00:42:32,960 --> 00:42:38,080
and the web standards of camel-casing.

591
00:42:38,080 --> 00:42:41,920
We'd also define some arguments as well.

592
00:42:41,920 --> 00:42:45,200
So this is our display argument, where we have an argument.

593
00:42:45,200 --> 00:42:48,560
Display takes the enum with the default value.

594
00:42:51,680 --> 00:42:55,640
So each field in our schema has a resolver function.

595
00:42:55,640 --> 00:42:57,600
So a resolver is a simple function

596
00:42:57,600 --> 00:43:00,720
that returns the data for a particular field, which

597
00:43:00,720 --> 00:43:03,040
will then be passed through to the next type in a graph.

598
00:43:05,600 --> 00:43:08,360
So in this case, we have a field author name

599
00:43:08,360 --> 00:43:12,480
that has provided data from the function resolveAuthorName.

600
00:43:12,480 --> 00:43:15,960
So here's our field author name and the function,

601
00:43:15,960 --> 00:43:20,440
our resolver, resolveAuthorName.

602
00:43:20,440 --> 00:43:22,560
So the value object that we're resolving

603
00:43:22,560 --> 00:43:25,680
is always the first argument of that resolver function.

604
00:43:25,680 --> 00:43:28,320
So here we have root as the first argument,

605
00:43:28,320 --> 00:43:29,600
and it's a model object.

606
00:43:29,600 --> 00:43:30,640
It's our story model.

607
00:43:33,600 --> 00:43:37,000
That's the same for all of these things in the story type

608
00:43:37,000 --> 00:43:38,280
Graphene object.

609
00:43:38,280 --> 00:43:42,080
So the root is the story model for resolve subtitle,

610
00:43:42,080 --> 00:43:45,760
and it's the story model for resolveAuthorName.

611
00:43:49,040 --> 00:43:51,040
Graphene allows us to have implicit resolvers

612
00:43:51,040 --> 00:43:54,760
if the field name matches the attribute of the root value

613
00:43:54,760 --> 00:43:55,260
object.

614
00:43:55,260 --> 00:44:00,640
So in this case, the field is called subtitle,

615
00:44:00,640 --> 00:44:05,680
and the attribute on our object that we're resolving

616
00:44:05,680 --> 00:44:06,480
is also subtitle.

617
00:44:06,480 --> 00:44:07,680
So we don't need to write that.

618
00:44:08,280 --> 00:44:11,280
Query context info is always the second argument.

619
00:44:11,280 --> 00:44:13,280
We'll get into that a little bit later.

620
00:44:13,280 --> 00:44:14,800
You don't really need to worry about it

621
00:44:14,800 --> 00:44:18,400
until you have some more advanced use cases.

622
00:44:18,400 --> 00:44:22,400
Any further arguments that are passed into this function,

623
00:44:22,400 --> 00:44:24,720
like display for resolveAuthorName,

624
00:44:24,720 --> 00:44:29,760
are from our GraphQL arguments from the field

625
00:44:29,760 --> 00:44:30,880
passed as keywords.

626
00:44:30,880 --> 00:44:32,960
So any arguments on the author name

627
00:44:32,960 --> 00:44:35,160
will be passed as keyword arguments too.

628
00:44:35,160 --> 00:44:37,440
AuthorName will be passed as keyword arguments

629
00:44:37,440 --> 00:44:38,720
to resolveAuthorName.

630
00:44:44,120 --> 00:44:47,160
So in summary, resolver functions

631
00:44:47,160 --> 00:44:49,200
help us answer queries.

632
00:44:49,200 --> 00:44:52,120
So let's trace through a query and see

633
00:44:52,120 --> 00:44:56,000
how those resolvers are connected together.

634
00:44:56,000 --> 00:44:59,360
So queries are first parsed and validated against our schema.

635
00:44:59,360 --> 00:45:03,280
So all these fields need to be in our schema.

636
00:45:03,280 --> 00:45:06,840
The resolver function is cascade data from the root query

637
00:45:06,840 --> 00:45:09,160
to individual fields.

638
00:45:09,160 --> 00:45:12,800
So we'll start from resolveStories.

639
00:45:12,800 --> 00:45:16,040
We'll get all those objects, all those story objects.

640
00:45:16,040 --> 00:45:17,400
And then on each of those objects,

641
00:45:17,400 --> 00:45:21,800
we'll resolve the author name and all the other fields

642
00:45:21,800 --> 00:45:23,000
that we want from that.

643
00:45:26,440 --> 00:45:29,400
So finally, we get that value, that string value

644
00:45:29,400 --> 00:45:32,240
for author name.

645
00:45:32,240 --> 00:45:34,120
So kind of like more diagrammatically,

646
00:45:34,120 --> 00:45:37,360
like following the flow of that data through.

647
00:45:37,360 --> 00:45:38,640
We start from the root query.

648
00:45:41,320 --> 00:45:45,040
Initially, our root is none.

649
00:45:45,040 --> 00:45:49,360
Then we resolve the stories, that story field.

650
00:45:49,360 --> 00:45:52,480
Then our root value is all those stories,

651
00:45:52,480 --> 00:45:58,120
which is then passed into each of the resolvers for story type.

652
00:45:58,120 --> 00:46:01,040
So resolve the author name, the title,

653
00:46:01,040 --> 00:46:03,400
the ID for the first story.

654
00:46:03,400 --> 00:46:05,880
And the same thing for the second story, the author name,

655
00:46:05,880 --> 00:46:07,080
title, and ID.

656
00:46:25,720 --> 00:46:28,520
Yeah, if the attribute on the object

657
00:46:28,520 --> 00:46:30,880
is the same as the field name, then it'll

658
00:46:30,880 --> 00:46:34,280
just do a default resolver.

659
00:46:34,280 --> 00:46:35,560
Cool.

660
00:46:35,560 --> 00:46:37,720
All right, so let's do another exercise.

661
00:46:37,720 --> 00:46:40,800
So this time, we'll be making a modification to the schema.

662
00:46:40,800 --> 00:46:44,480
We'll add two fields, description and published year.

663
00:46:47,040 --> 00:46:50,280
So ensure you're on the branch chapter 2.

664
00:46:50,280 --> 00:46:54,560
If you open up API query story.py,

665
00:46:54,560 --> 00:46:56,720
there'll be further instructions on how

666
00:46:56,760 --> 00:46:58,800
to make changes to the schema.

667
00:46:58,800 --> 00:47:02,360
And you can verify your changes through prepared tests

668
00:47:02,360 --> 00:47:05,520
and running sample queries in api-queries.graphql.

669
00:47:26,720 --> 00:47:27,220
OK.

670
00:47:56,720 --> 00:47:57,220
OK.

671
00:48:26,720 --> 00:48:28,220
OK.

672
00:48:56,720 --> 00:48:57,220
OK.

673
00:49:26,720 --> 00:49:27,220
OK.

674
00:49:56,720 --> 00:50:14,040
I'm just getting an error when I try to run the query

675
00:50:14,040 --> 00:50:15,520
suggested in chapter 2.

676
00:50:15,520 --> 00:50:17,520
I think there's something wrong with that.

677
00:50:17,520 --> 00:50:18,520
What is the data model?

678
00:50:18,520 --> 00:50:20,020
What is the data model?

679
00:50:20,020 --> 00:50:20,520
Sure.

680
00:50:20,520 --> 00:50:21,520
Let's take a look.

681
00:50:26,720 --> 00:50:27,220
OK.

682
00:50:56,720 --> 00:50:57,220
OK.

683
00:51:26,720 --> 00:51:27,220
OK.

684
00:51:56,720 --> 00:51:57,220
OK.

685
00:52:26,720 --> 00:52:27,220
OK.

686
00:52:56,720 --> 00:53:23,220
OK.

687
00:53:23,220 --> 00:53:24,480
OK.

688
00:53:24,480 --> 00:53:25,480
How's everybody doing?

689
00:53:25,480 --> 00:53:26,980
Any questions?

690
00:53:42,880 --> 00:53:43,380
Green build.

691
00:53:55,480 --> 00:53:55,980
Yeah.

692
00:53:55,980 --> 00:53:56,980
It's a little goofy.

693
00:53:56,980 --> 00:53:57,980
I put the errors as a string.

694
00:53:57,980 --> 00:54:12,980
But trying to write a resolver.

695
00:54:12,980 --> 00:54:13,480
OK.

696
00:54:13,480 --> 00:54:13,980
OK.

697
00:54:13,980 --> 00:54:14,480
OK.

698
00:54:14,480 --> 00:54:14,980
OK.

699
00:54:14,980 --> 00:54:15,480
OK.

700
00:54:15,480 --> 00:54:15,980
OK.

701
00:54:15,980 --> 00:54:16,480
OK.

702
00:54:16,480 --> 00:54:16,980
OK.

703
00:54:16,980 --> 00:54:17,480
OK.

704
00:54:17,480 --> 00:54:17,980
OK.

705
00:54:17,980 --> 00:54:18,480
OK.

706
00:54:18,480 --> 00:54:18,980
OK.

707
00:54:18,980 --> 00:54:19,480
OK.

708
00:54:19,480 --> 00:54:19,980
OK.

709
00:54:19,980 --> 00:54:20,480
OK.

710
00:54:20,480 --> 00:54:20,980
OK.

711
00:54:20,980 --> 00:54:21,480
OK.

712
00:54:21,480 --> 00:54:21,980
OK.

713
00:54:21,980 --> 00:54:22,480
OK.

714
00:54:22,480 --> 00:54:22,980
OK.

715
00:54:22,980 --> 00:54:23,480
OK.

716
00:54:23,480 --> 00:54:23,980
OK.

717
00:54:23,980 --> 00:54:24,480
OK.

718
00:54:24,480 --> 00:54:25,480
OK.

719
00:54:54,980 --> 00:54:55,480
All right.

720
00:55:01,980 --> 00:55:02,480
So yeah.

721
00:55:02,480 --> 00:55:05,980
Let's take a look at a solution for this guy.

722
00:55:09,980 --> 00:55:15,980
So our problem was to add description and published

723
00:55:15,980 --> 00:55:17,980
year fields to our schema.

724
00:55:20,980 --> 00:55:22,980
So the amount of code we have to actually add to this

725
00:55:22,980 --> 00:55:27,480
is pretty small just to get the schema going.

726
00:55:27,480 --> 00:55:29,480
To add the field to the schema, we

727
00:55:29,480 --> 00:55:33,480
can just add description as a graphene string

728
00:55:33,480 --> 00:55:37,480
and published year as a graphene string as well.

729
00:55:37,480 --> 00:55:39,480
It's going to automatically camel case

730
00:55:39,480 --> 00:55:41,480
so we can stick with Python conventions

731
00:55:41,480 --> 00:55:42,980
and use published year.

732
00:55:49,480 --> 00:55:51,480
A feature that I haven't really gone in here,

733
00:55:51,480 --> 00:55:54,980
but we can actually add description string over here.

734
00:56:02,480 --> 00:56:06,480
And this will actually go into our GraphQL documentation.

735
00:56:12,480 --> 00:56:15,980
And then for the resolver function,

736
00:56:16,480 --> 00:56:19,480
since published year doesn't match

737
00:56:19,480 --> 00:56:25,480
with the story model field, which is published date,

738
00:56:25,480 --> 00:56:27,480
we need to write a resolver function.

739
00:56:27,480 --> 00:56:31,480
So basically, we pass through.

740
00:56:31,480 --> 00:56:33,880
We have the root as our first argument, which is a story

741
00:56:33,880 --> 00:56:35,080
model.

742
00:56:35,080 --> 00:56:39,180
And we pull off the published date

743
00:56:39,180 --> 00:56:43,480
and then take the year part of that and return it as a string.

744
00:56:43,480 --> 00:56:45,180
If we don't return it as a string,

745
00:56:45,180 --> 00:56:47,380
our graphene will coerce that value into a string,

746
00:56:47,380 --> 00:56:50,180
so it's not a big deal.

747
00:56:50,180 --> 00:56:52,180
But yeah.

748
00:56:52,180 --> 00:56:57,380
Let's just take a couple minutes.

749
00:56:57,380 --> 00:57:00,380
If anybody has any questions, I'd be happy to answer them.

750
00:57:12,380 --> 00:57:12,880
Yep.

751
00:57:15,380 --> 00:57:35,880
So the question was about performance and concerns

752
00:57:35,880 --> 00:57:39,680
about this quickly becoming inefficient.

753
00:57:39,680 --> 00:57:43,680
Because I'm sure your experience with Django,

754
00:57:44,180 --> 00:57:48,680
you've spotted the n plus 1 query right here.

755
00:57:48,680 --> 00:57:51,680
So yeah, we'll address n plus 1 queries in a little bit.

756
00:57:54,180 --> 00:57:56,180
But yeah, if you don't address that,

757
00:57:56,180 --> 00:57:58,180
then it can get out of hand pretty quickly.

758
00:57:58,680 --> 00:58:18,680
So in this code base, we're actually using Django ORM.

759
00:58:18,680 --> 00:58:21,680
So the question was, where is the integration point

760
00:58:21,680 --> 00:58:23,680
with a back-end data store?

761
00:58:23,680 --> 00:58:27,680
And let's just take a quick look at that.

762
00:58:28,180 --> 00:58:35,180
So basically, we have these models that are defined here

763
00:58:35,180 --> 00:58:37,180
for our Django ORM.

764
00:58:37,180 --> 00:58:40,180
So all this is already set up with the fixture data.

765
00:58:40,180 --> 00:58:44,180
So here's our story model.

766
00:58:44,180 --> 00:58:47,180
And it has all these fields and relations defined on it.

767
00:58:47,180 --> 00:58:50,180
And if you haven't used Django before,

768
00:58:50,180 --> 00:58:53,180
it has very nice migration capability

769
00:58:53,180 --> 00:58:55,180
to manage the database changes.

770
00:58:55,680 --> 00:59:01,680
But that concern is kind of separate from the GraphQL part.

771
00:59:01,680 --> 00:59:05,680
So if you want to dig into that, feel free to look at the references

772
00:59:05,680 --> 00:59:09,680
that were provided for this tutorial.

773
00:59:16,680 --> 00:59:17,680
Yep.

774
00:59:18,180 --> 00:59:24,180
So this is a little code first, where you define the Django code

775
00:59:24,180 --> 00:59:27,180
and the schema comes later.

776
00:59:27,180 --> 00:59:29,180
I noticed that you do a schema file.

777
00:59:29,180 --> 00:59:31,180
When do you do a schema file?

778
00:59:31,180 --> 00:59:32,180
Every time?

779
00:59:35,180 --> 00:59:37,180
The schema.py?

780
00:59:37,180 --> 00:59:43,180
There's a pretty fantastic one in the JSON file.

781
00:59:43,180 --> 00:59:44,180
Oh, yeah.

782
00:59:44,180 --> 00:59:46,180
So this file is just for your reference.

783
00:59:46,680 --> 00:59:51,680
Normally, you don't need to include the queries.graphql in your repo.

784
00:59:53,680 --> 00:59:54,680
Yeah, in the back?

785
00:59:57,680 --> 00:59:59,680
This bigger.

786
01:00:01,680 --> 01:00:03,680
OK, it's not global.

787
01:00:07,680 --> 01:00:09,680
I'll keep that in mind.

788
01:00:10,680 --> 01:00:12,680
This is good, though, right?

789
01:00:13,680 --> 01:00:15,680
A little bigger?

790
01:00:16,680 --> 01:00:18,680
I understand you're back here.

791
01:00:22,680 --> 01:00:24,680
Yeah, maybe I should...

792
01:00:29,680 --> 01:00:33,680
Yeah, there are a couple seats up here, so if you're having trouble.

793
01:00:46,680 --> 01:00:47,680
OK.

794
01:01:08,680 --> 01:01:12,680
All right, so let's move on to the next chapter.

795
01:01:13,180 --> 01:01:21,180
So a phrase you'll hear pretty often when you start digging into GraphQL

796
01:01:21,180 --> 01:01:26,180
is this phrase, relay compliance, or relay standards compliance.

797
01:01:26,180 --> 01:01:30,180
And it can be a little bit confusing about what exactly this is

798
01:01:30,180 --> 01:01:33,180
and why you might want it.

799
01:01:33,180 --> 01:01:39,180
So relay compliance is a set of standards created by Facebook

800
01:01:39,680 --> 01:01:44,680
that are required by their relay client library that's used in JavaScript.

801
01:01:46,680 --> 01:01:52,680
So it's not required by other popular client libraries used in JavaScript, like Apollo.

802
01:01:52,680 --> 01:01:56,680
So you're not required to implement these standards.

803
01:01:56,680 --> 01:02:00,680
But the standard does include some useful patterns,

804
01:02:00,680 --> 01:02:04,680
so it's good to understand what they mean and how they're used

805
01:02:05,180 --> 01:02:09,180
so you can make an informed trade-off about whether you want to adopt

806
01:02:09,180 --> 01:02:12,180
relay compliance for your API.

807
01:02:12,180 --> 01:02:16,180
The GitHub API that we were looking at before is relay compliant.

808
01:02:18,180 --> 01:02:26,180
So they have that flexibility to let people use either Relay or Apollo as a client.

809
01:02:27,180 --> 01:02:31,180
So what does it actually mean when an API is relay compliant?

810
01:02:31,680 --> 01:02:36,680
So that basically means that we provide a mechanism for refetching the object,

811
01:02:36,680 --> 01:02:41,680
a standard way to page through connections of lists of data,

812
01:02:41,680 --> 01:02:45,680
and a structure around mutations to make them more predictable.

813
01:02:45,680 --> 01:02:52,680
We'll dig into each of these requirements and how we can pretty easily satisfy them using Graphene.

814
01:02:54,680 --> 01:02:59,680
So the first requirement from Relay is a mechanism for refetching an object.

815
01:03:00,180 --> 01:03:06,180
So you may have noticed that our simple API right now only has the ability to fetch a list of stories.

816
01:03:06,180 --> 01:03:12,180
So as our list of stories grows, as we get more data in our database,

817
01:03:12,180 --> 01:03:18,180
obviously we won't be able to send all of the stories to the client if we have a million stories.

818
01:03:18,180 --> 01:03:21,180
We need a way to page through those results.

819
01:03:21,680 --> 01:03:24,680
Oh, sorry, skipping ahead.

820
01:03:27,680 --> 01:03:30,680
Sorry. So we'll get to connections in a little bit.

821
01:03:30,680 --> 01:03:36,680
But for fetching a single object going the other way,

822
01:03:36,680 --> 01:03:40,680
if we just want one story, a particular story, what's a good pattern?

823
01:03:40,680 --> 01:03:45,680
We could add a single story field on the root query and pass the ID to that.

824
01:03:45,680 --> 01:03:49,680
Or we could follow Relay standard.

825
01:03:50,180 --> 01:03:56,180
So Relay requires a node field and interface at the root query

826
01:03:56,180 --> 01:04:00,180
that allows us to fetch any object that implements that interface.

827
01:04:00,180 --> 01:04:03,180
So let's dig into that a little bit more.

828
01:04:03,180 --> 01:04:07,180
So what exactly is a node interface?

829
01:04:08,180 --> 01:04:16,180
So an interface in GraphQL defines a set of fields that is shared across types implementing that interface.

830
01:04:16,680 --> 01:04:27,680
So in this case, the node interface just provides a single field to the type that implements it, an ID.

831
01:04:29,680 --> 01:04:34,680
In Graphene, we just need to use this metaclass pattern,

832
01:04:34,680 --> 01:04:38,680
like an interclass inside of our Graphene object

833
01:04:38,680 --> 01:04:42,680
that has an attribute that specifies the interfaces that we're going to be implementing.

834
01:04:43,180 --> 01:04:48,180
So this is pretty similar to a pattern that's used by Django and other popular Python frameworks,

835
01:04:48,180 --> 01:04:50,180
so you may have seen it before.

836
01:04:54,180 --> 01:04:58,180
So when we have an interface that we're resolving,

837
01:04:58,180 --> 01:05:04,180
we need to know which type this particular object is that we're resolving.

838
01:05:04,180 --> 01:05:11,180
So if a node can be either a story or an author or a passage or any number of things,

839
01:05:11,680 --> 01:05:15,680
we need to know which of those things it is so we can pull off the fields from that.

840
01:05:15,680 --> 01:05:17,680
We can apply our GraphQL schema to it.

841
01:05:18,680 --> 01:05:22,680
So in Graphene, we write this function isTypeOf.

842
01:05:22,680 --> 01:05:27,680
So that basically helps us determine if the object can be resolved with this type.

843
01:05:27,680 --> 01:05:33,680
So we have isTypeOf, and in our case, we return a boolean

844
01:05:33,680 --> 01:05:38,680
if it's an instance of the story model from our Django ORM.

845
01:05:39,180 --> 01:05:43,180
If it's a story model, then we can resolve it using the resolvers

846
01:05:43,180 --> 01:05:47,180
that we specified in story type, like those fields apply to it.

847
01:05:52,180 --> 01:05:55,180
So when we want to query that node field,

848
01:05:58,180 --> 01:06:00,180
this is what a query might look like.

849
01:06:02,180 --> 01:06:06,180
We can pass in variables into our static query.

850
01:06:06,680 --> 01:06:12,680
So here we have some variables that we might put in our query editor down here.

851
01:06:14,680 --> 01:06:17,680
And we pass them through as these references,

852
01:06:17,680 --> 01:06:22,680
this ID reference into the value here for the node ID.

853
01:06:23,680 --> 01:06:27,680
We can alias a field to something more meaningful.

854
01:06:27,680 --> 01:06:29,680
So node is pretty generic sounding,

855
01:06:29,680 --> 01:06:31,680
so we can rename that in our results to story,

856
01:06:31,680 --> 01:06:33,680
because that's what we're expecting back.

857
01:06:34,180 --> 01:06:37,180
We can also have an inline fragment,

858
01:06:37,180 --> 01:06:41,180
which only fetches these fields, the title and description,

859
01:06:41,180 --> 01:06:46,180
if the node matches that story type.

860
01:06:46,180 --> 01:06:50,180
So that's when that isTypeOf comes in handy.

861
01:06:52,180 --> 01:06:57,180
The node ID value is meant to be human readable and globally unique.

862
01:06:57,180 --> 01:07:03,180
So GrapheneBase64 encodes these ID values under the hood,

863
01:07:03,680 --> 01:07:07,680
that encodes to the story type and the ID,

864
01:07:07,680 --> 01:07:09,680
so the GraphQL type and the ID.

865
01:07:10,680 --> 01:07:13,680
And it's going to be using that ID under the hood

866
01:07:13,680 --> 01:07:18,680
to resolve which particular type should be used.

867
01:07:21,680 --> 01:07:26,680
So the node field returns any type that implements the node interface

868
01:07:26,680 --> 01:07:28,680
matching the providing ID.

869
01:07:29,680 --> 01:07:32,680
So we don't really need to write much code for this.

870
01:07:33,180 --> 01:07:37,180
Graphene provides a pretty good interface out of the box.

871
01:07:39,180 --> 01:07:41,180
The one thing that we do need to write, however,

872
01:07:41,180 --> 01:07:46,180
is a method that tells Graphene how to get that particular node

873
01:07:46,180 --> 01:07:48,180
when it matches on it.

874
01:07:48,180 --> 01:07:52,180
So it'll match on that name of the type, the story type,

875
01:07:52,180 --> 01:07:57,180
and then it'll pass in that ID value into the getNode class method.

876
01:07:57,680 --> 01:07:58,680
Oops.

877
01:08:00,680 --> 01:08:02,680
So basically we'll get the ID through here,

878
01:08:02,680 --> 01:08:07,680
and then we'll pass that to our ORM to get the story that we want

879
01:08:07,680 --> 01:08:09,680
for that primary key.

880
01:08:12,680 --> 01:08:15,680
All right, so let's just take a couple minutes

881
01:08:15,680 --> 01:08:19,680
to try out a query on this node field.

882
01:08:19,680 --> 01:08:21,680
So this is a little more complicated query.

883
01:08:21,680 --> 01:08:24,680
We're using the variables.

884
01:08:25,180 --> 01:08:30,180
So when you open up this queries.graphql file under chapter 3,

885
01:08:32,180 --> 01:08:34,180
you'll have some variables here.

886
01:08:35,180 --> 01:08:41,180
Just paste those into the variable editor in your graphical.

887
01:08:55,180 --> 01:09:00,180
So you can see here I forgot to paste those variables in there,

888
01:09:00,180 --> 01:09:02,180
so I'll just take those variables,

889
01:09:02,180 --> 01:09:05,180
try to make this bigger for people in the back,

890
01:09:08,180 --> 01:09:10,180
and I'll paste them right in here.

891
01:09:17,180 --> 01:09:20,180
So we need to get the variable into the getNode class.

892
01:09:20,680 --> 01:09:25,680
So we can get a list of all of the different IDs,

893
01:09:25,680 --> 01:09:32,680
copy it from there, and get a different story back.

894
01:09:50,680 --> 01:09:55,680
So let's just take a look at the list of all of the different IDs

895
01:09:55,680 --> 01:09:57,680
that we have here.

896
01:09:59,680 --> 01:10:01,680
So we have the first one,

897
01:10:01,680 --> 01:10:03,680
and then we have the second one,

898
01:10:03,680 --> 01:10:05,680
and then we have the third one,

899
01:10:05,680 --> 01:10:07,680
and then we have the fourth one,

900
01:10:07,680 --> 01:10:09,680
and then we have the fifth one,

901
01:10:09,680 --> 01:10:11,680
and then we have the sixth one,

902
01:10:11,680 --> 01:10:13,680
and then we have the seventh one,

903
01:10:13,680 --> 01:10:15,680
and then we have the eighth one,

904
01:10:15,680 --> 01:10:17,680
and then we have the tenth one,

905
01:10:17,680 --> 01:10:19,680
and then we have the tenth one,

906
01:10:20,180 --> 01:10:22,180
and then we have the tenth one,

907
01:10:22,180 --> 01:10:24,180
and then we have the last one.

908
01:10:28,180 --> 01:10:30,180
Just need one more minute.

909
01:10:30,180 --> 01:10:32,180
Any questions?

910
01:11:19,680 --> 01:11:38,720
in the make.

911
01:11:38,720 --> 01:12:00,000
Sorry, I can't hear you too well.

912
01:12:00,000 --> 01:12:03,000
Is there anybody who use IDs without base64 encoding?

913
01:12:04,000 --> 01:12:15,800
Yeah, so if you don't use Graphene's implementation of node, then it won't use base64 encoding.

914
01:12:15,800 --> 01:12:22,000
Not use the node interface, not use relay.

915
01:12:22,000 --> 01:12:25,880
There are reasons to do base64 encoding that I'll get into a little bit later.

916
01:12:25,880 --> 01:12:30,360
So there's some, it is a little bit weird, but like there are some good arguments for

917
01:12:30,360 --> 01:12:37,360
using it.

918
01:12:37,360 --> 01:12:53,360
You should get rid of display right there.

919
01:12:53,360 --> 01:12:55,360
It doesn't need that.

920
01:12:55,360 --> 01:13:07,360
Yeah, it should be good.

921
01:13:07,360 --> 01:13:09,360
Okay.

922
01:13:09,360 --> 01:13:20,360
Yep, one more question.

923
01:13:20,360 --> 01:13:26,360
Okay, so the question was if you're using node, do you have to write get node for each

924
01:13:26,360 --> 01:13:29,360
object that you have?

925
01:13:29,360 --> 01:13:34,360
So if you're using something like Django, you might be able to write like a generic

926
01:13:34,360 --> 01:13:36,360
implementation of get node.

927
01:13:36,360 --> 01:13:41,360
I think with the SQL alchemy bindings, there is a default implementation.

928
01:13:41,360 --> 01:13:46,360
But with like user access and things like that, there's often like specific concerns

929
01:13:46,360 --> 01:13:53,360
that you might want to handle for each model individually.

930
01:13:53,360 --> 01:13:58,360
But yeah, you would need to get node for each one.

931
01:13:58,360 --> 01:14:04,360
Okay.

932
01:14:04,360 --> 01:14:10,360
All right, so the next bit about relay compliance is the connection.

933
01:14:10,360 --> 01:14:21,360
So like I mentioned before, we have a large, we have an array of stories here.

934
01:14:21,360 --> 01:14:25,360
And as that list grows, we need a way to page through the connection.

935
01:14:25,360 --> 01:14:29,360
Since we don't want to send a million records back to the client, we need them to tell us

936
01:14:29,360 --> 01:14:32,360
how much they want.

937
01:14:32,360 --> 01:14:35,360
So we need pagination.

938
01:14:35,360 --> 01:14:41,360
So relay connection provides a pretty easy to implement solution for pagination using

939
01:14:41,360 --> 01:14:44,360
Graphene.

940
01:14:44,360 --> 01:14:48,360
So what does that look like in practice?

941
01:14:48,360 --> 01:14:55,360
So this is an example of a query for doing pagination forward through a list of results

942
01:14:55,360 --> 01:14:59,360
using the cursor API.

943
01:14:59,360 --> 01:15:04,360
So first, we have this first parameter here, which is basically our page size, saying that

944
01:15:04,360 --> 01:15:08,360
we want 10 records.

945
01:15:08,360 --> 01:15:14,360
We have a variable here, the after cursor.

946
01:15:14,360 --> 01:15:18,360
And basically that's saying we want all of the records after this cursor.

947
01:15:18,360 --> 01:15:26,360
So the first 10 records after that particular bookmark.

948
01:15:26,360 --> 01:15:32,360
We have a page info object here, which tells us what the last cursor or bookmark is for

949
01:15:32,360 --> 01:15:37,360
this particular set of data and a boolean that tells us if we have the next page of

950
01:15:37,360 --> 01:15:42,360
data.

951
01:15:42,360 --> 01:15:50,360
We also have edge and node for each record, which is like a graph-like metaphor.

952
01:15:50,360 --> 01:15:55,360
So basically the edge, each edge has a cursor, which is like a bookmark that you can use

953
01:15:55,360 --> 01:15:59,360
for pagination, and the node, which is the actual data that we're looking for.

954
01:15:59,360 --> 01:16:07,360
So everything inside of node is our story record.

955
01:16:07,360 --> 01:16:11,360
So really connections use a cursor-based pagination API.

956
01:16:11,360 --> 01:16:20,360
You might compare that with a limit and offset-based API, where you would tell it you want 10 records

957
01:16:20,360 --> 01:16:26,360
offset from 100 from the first record.

958
01:16:26,360 --> 01:16:29,360
The cursor API is opaque to the client.

959
01:16:29,360 --> 01:16:35,360
It's again like base64 encoded, and it contains all the information needed to paginate the

960
01:16:35,360 --> 01:16:36,360
results.

961
01:16:36,360 --> 01:16:46,360
So you can have a very specific implementation of the cursor that is encoded for maybe doing

962
01:16:46,360 --> 01:16:52,360
a more complicated query than just limit and offset, which can have some performance implications

963
01:16:52,360 --> 01:16:58,360
if you have a large set of data.

964
01:16:58,360 --> 01:17:03,360
So Graphene basically uses limit and offset under the hood for the cursor, even though

965
01:17:03,360 --> 01:17:06,360
we use that cursor API.

966
01:17:06,360 --> 01:17:13,360
The connection arguments first and last determine the limit, and the cursor is base64 encoded

967
01:17:13,360 --> 01:17:14,360
again.

968
01:17:14,360 --> 01:17:17,360
So the cursor itself determines the offset.

969
01:17:17,360 --> 01:17:20,360
So here we have like an array connection, zero.

970
01:17:20,360 --> 01:17:23,360
So that's the pagination style and the offset.

971
01:17:23,360 --> 01:17:32,360
So you can write a custom cursor if you need to, but that's out of the scope of this tutorial.

972
01:17:32,360 --> 01:17:40,360
So the connection API for cursor-based pagination provides us with a lot of things out of the

973
01:17:40,360 --> 01:17:41,360
box.

974
01:17:41,360 --> 01:17:46,360
So for us, we just need to write a very little amount of code.

975
01:17:47,360 --> 01:17:52,360
So we write Graphene.connectionField, and that gives us all of our pagination parameters

976
01:17:52,360 --> 01:17:57,360
first, after, last, and before.

977
01:17:57,360 --> 01:18:04,360
We have to write a story connection, which inherits from Graphene connection, and that

978
01:18:04,360 --> 01:18:08,360
gives us all of our page info and edges.

979
01:18:08,360 --> 01:18:13,360
We give it a meta with the node type, and that will actually resolve all the nodes for

980
01:18:13,360 --> 01:18:15,360
each record.

981
01:18:15,360 --> 01:18:20,360
So just from three lines of code we have, or four lines of code, we have like a pretty

982
01:18:20,360 --> 01:18:24,360
decent pagination implementation right out of the box.

983
01:18:26,360 --> 01:18:31,360
We can use these arguments first and after with the end cursor and has next page for

984
01:18:31,360 --> 01:18:36,360
paging forward, and these arguments for paging backwards.

985
01:18:38,360 --> 01:18:43,360
So moving from list to connection, like we just did, that's a breaking change for our

986
01:18:43,360 --> 01:18:44,360
API consumers.

987
01:18:44,360 --> 01:18:50,360
And in fact, like adding pagination on any list is really going to be a breaking change,

988
01:18:50,360 --> 01:18:55,360
so we want to consider carefully which fields require pagination up front.

989
01:18:55,360 --> 01:19:00,360
And using connection instead of list doesn't require that much effort with Graphene, so

990
01:19:00,360 --> 01:19:03,360
something to consider.

991
01:19:06,360 --> 01:19:07,360
All right.

992
01:19:07,360 --> 01:19:10,360
So again, let's try out some new queries.

993
01:19:10,360 --> 01:19:19,360
So check out chapter 3b this time, and your API queries, GraphQL, should have some example

994
01:19:19,360 --> 01:19:25,360
queries and more specific instructions about how you can page through these.

995
01:19:40,360 --> 01:19:41,360
Okay.

996
01:20:10,360 --> 01:20:14,360
Let me come over.

997
01:20:40,360 --> 01:21:06,360
Yeah.

998
01:21:06,360 --> 01:21:10,360
So one thing to remember when working with variables in your query, like we have here,

999
01:21:10,360 --> 01:21:13,360
so we have this variable after cursor.

1000
01:21:13,360 --> 01:21:23,360
If we try to run that without specifying the value, and it's not nullable, so in this case

1001
01:21:23,360 --> 01:21:30,360
if we try to run this query here, that works because we have our variable specified here.

1002
01:21:30,360 --> 01:21:37,360
But if we get rid of that, we're going to have a problem because that's a required argument.

1003
01:21:40,360 --> 01:21:46,360
So we just put the value for story ID down here, and then it'll work fine.

1004
01:21:50,360 --> 01:21:58,360
For this query, we haven't specified that the after cursor is a required parameter,

1005
01:21:58,360 --> 01:22:01,360
so we can write fine without specifying that.

1006
01:22:01,360 --> 01:22:08,360
If we give a little bang right there, that'll become required, and it will complain.

1007
01:22:08,360 --> 01:22:13,360
But really, it's fine if our after cursor is null in this case.

1008
01:22:28,360 --> 01:22:38,360
So if I want to page through a random part of this data set, or if I want to page through

1009
01:22:38,360 --> 01:22:46,360
the next page, I can take this end cursor, use it over here, and then run it again.

1010
01:22:46,360 --> 01:22:49,360
So right now I have these three stories.

1011
01:22:49,360 --> 01:22:55,360
If we run it again, we get some other stories.

1012
01:22:56,360 --> 01:23:00,360
I can also just pick a random cursor. I can pick this one.

1013
01:23:02,360 --> 01:23:09,360
And now this next page will start with this result here, Raven Tower.

1014
01:23:15,360 --> 01:23:23,360
All right, so let's keep moving on to the last piece of this about GraphQL.

1015
01:23:23,360 --> 01:23:25,360
Did you have a question?

1016
01:23:27,360 --> 01:23:29,360
Oh, okay, back there.

1017
01:23:36,360 --> 01:23:40,360
Yes, you can definitely... So the question was, is it possible to have a lookup

1018
01:23:40,360 --> 01:23:43,360
not just by ID, but by a name?

1019
01:23:43,360 --> 01:23:50,360
So GraphQL is very flexible, so you can actually specify any arguments on any field.

1020
01:23:50,360 --> 01:23:57,360
So you can just arbitrarily specify argument on a field, and then that can be used in your

1021
01:23:57,360 --> 01:24:01,360
resolver to get the data that you want.

1022
01:24:03,360 --> 01:24:05,360
This is just one standard way to do it.

1023
01:24:05,360 --> 01:24:07,360
Any other question?

1024
01:24:11,360 --> 01:24:17,360
So the question is, do you have to implement node to be able to lookup by any other thing?

1025
01:24:17,360 --> 01:24:26,360
No. If you're implementing by node, this is just an interface that you can use to fetch any arbitrary record.

1026
01:24:26,360 --> 01:24:32,360
It's totally possible to use a slug or something like that to lookup a record as well.

1027
01:24:32,360 --> 01:24:37,360
But you're basically implementing a custom interface at that point.

1028
01:24:37,360 --> 01:24:43,360
Relay interface is standard for that Relay client library.

1029
01:24:44,360 --> 01:24:51,360
So the last bit here is structure around mutations to make them more predictable.

1030
01:24:52,360 --> 01:24:58,360
So from our perspective, this is actually pretty straightforward.

1031
01:24:58,360 --> 01:25:02,360
Graphene does most of the heavy lifting with this again.

1032
01:25:02,360 --> 01:25:09,360
So there's no big changes to the structure or behavior of mutations to comply with this part of the specification.

1033
01:25:10,360 --> 01:25:14,360
We still receive some arguments and an input.

1034
01:25:14,360 --> 01:25:21,360
We still change data in our mutation function, and then we send a response.

1035
01:25:23,360 --> 01:25:32,360
The big change that Relay needs is that it wants to have a standard way to receive the input or send the input in.

1036
01:25:32,360 --> 01:25:40,360
And it also wants the input and the payload to send back this client mutation ID without changing it.

1037
01:25:42,360 --> 01:25:45,360
So in practice, that'll look something like this.

1038
01:25:45,360 --> 01:25:48,360
This mutation is Relay compliant.

1039
01:25:48,360 --> 01:25:54,360
It has this client mutation ID, which is just whatever we want it to be as a client.

1040
01:25:54,360 --> 01:25:56,360
So I might call it like mutation one.

1041
01:25:57,360 --> 01:26:05,360
And when we send back the data, we just say, hey, this is the result for the mutation that you asked for, this mutation one.

1042
01:26:06,360 --> 01:26:13,360
And internally, that's used by Relay for tracking purposes, but not really important for most clients.

1043
01:26:17,360 --> 01:26:20,360
So in Graphene, the code is pretty simple.

1044
01:26:21,360 --> 01:26:27,360
We just inherit from client mutation ID in Graphene, and we get this for free.

1045
01:26:27,360 --> 01:26:32,360
So client mutation field is automatically added and sent back in the payload.

1046
01:26:36,360 --> 01:26:48,360
We specify the input that's passed into the mutation in this inner class, the input inner class with some fields that we want to send to the mutation.

1047
01:26:48,360 --> 01:26:54,360
So a title, subtitle, and description will be arguments that we can send to create a new story.

1048
01:26:54,360 --> 01:26:59,360
And that will be sent to the keyword argument here, the input data.

1049
01:27:05,360 --> 01:27:12,360
So to sum up, Relay compliance is just a standard with some good GraphQL practices.

1050
01:27:12,360 --> 01:27:15,360
It's pretty easy to implement with Graphene.

1051
01:27:16,360 --> 01:27:27,360
And you might want to consider carefully if you don't want to adhere, because adding connection or client mutation ID later will be breaking changes for your API.

1052
01:27:34,360 --> 01:27:36,360
So let's just take a couple minutes.

1053
01:27:38,360 --> 01:27:43,360
And yeah, if anyone has any questions, I'm happy to answer them.

1054
01:27:45,360 --> 01:28:00,360
I work with a lot of APIs on network devices and firewalls.

1055
01:28:00,360 --> 01:28:06,360
Do you think guys like those, all names work just kind of like that?

1056
01:28:06,360 --> 01:28:10,360
Would all of them have like the rest of the APIs?

1057
01:28:10,360 --> 01:28:18,360
They would have to change, they would have to add, they graph too well.

1058
01:28:26,360 --> 01:28:29,360
Wait, so the use case is like you have some third party APIs?

1059
01:28:29,360 --> 01:28:32,360
Yeah, I use a lot of third party APIs.

1060
01:28:32,360 --> 01:28:49,360
Yeah, so there are a lot of first party, or there are a lot of people who are building out third party GraphQL APIs, like GitHub, for example.

1061
01:28:49,360 --> 01:28:55,360
But there are also people who are doing like API gateways for third party APIs.

1062
01:28:55,360 --> 01:29:05,360
So like I mentioned in the beginning, you can kind of wrap a third party API in your GraphQL endpoint and then receive the result back.

1063
01:29:07,360 --> 01:29:15,360
So yeah, even with like microservices, like in internal services, people use it as a gateway, consume all of the data, and then send it back.

1064
01:29:25,360 --> 01:29:27,360
Okay.

1065
01:29:55,360 --> 01:29:57,360
Okay.

1066
01:30:25,360 --> 01:30:27,360
Okay.

1067
01:30:39,360 --> 01:30:41,360
Okay.

1068
01:30:41,360 --> 01:30:43,360
Okay.

1069
01:30:51,360 --> 01:30:52,360
No worries.

1070
01:30:52,360 --> 01:30:56,360
Well, the material is all there, so you can feel free to go for it or email me with any questions.

1071
01:30:56,360 --> 01:30:57,360
Really appreciate that.

1072
01:30:57,360 --> 01:30:58,360
Thank you.

1073
01:30:58,360 --> 01:31:00,360
No problem.

1074
01:31:11,360 --> 01:31:19,360
All right, so we should go another like 30 seconds and then we'll get started.

1075
01:31:41,360 --> 01:32:05,360
All right.

1076
01:32:05,360 --> 01:32:10,360
Let's get back to it.

1077
01:32:10,360 --> 01:32:15,360
Okay, so let's talk about schema evolution versus versioning.

1078
01:32:15,360 --> 01:32:19,360
So making changes to public interfaces can be hard.

1079
01:32:19,360 --> 01:32:30,360
With an API, there can be multiple consumers and your single page front end application or an Android or iOS app.

1080
01:32:30,360 --> 01:32:37,360
The information that tells you if a change is safe to be made is spread pretty thin across all those different places.

1081
01:32:37,360 --> 01:32:46,360
And if your API is public, then there are even more considerations that need to be taken in order to avoid breaking any consumers that you may have.

1082
01:32:46,360 --> 01:32:53,360
But there's some general rules of thumb that we can follow to help us evolve the schema without breaking changes.

1083
01:32:53,360 --> 01:33:02,360
And GraphQL provides some constraints that make adhering to those rules of thumb a bit easier.

1084
01:33:02,360 --> 01:33:06,360
So what does it look like to evolve without having breaking changes?

1085
01:33:06,360 --> 01:33:22,360
So given some query with a selection of fields, arguments, and variables, if it returns the same types to the client before and after the change, then we can say that that's not a breaking change.

1086
01:33:22,360 --> 01:33:27,360
So types help us make that promise more easily.

1087
01:33:27,360 --> 01:33:40,360
The schema is a contract that isolates the client from the implementation on the server, so we're free to refactor how that data is fetched and provided to the consumer as long as the types don't change themselves.

1088
01:33:40,360 --> 01:33:51,360
So there are ways to do this with REST and any other API standard like RPC or what have you.

1089
01:33:51,360 --> 01:33:58,360
But particularly having a schema is very helpful with implementing this contract.

1090
01:33:58,360 --> 01:34:06,360
Additionally, like Base64 encoding tokens like ID and the pagination cursor also encourage client safety.

1091
01:34:06,360 --> 01:34:13,360
So a change to the implementation on the server shouldn't affect clients like we were saying before.

1092
01:34:13,360 --> 01:34:25,360
By Base64 encoding our tokens like ID and pagination cursor, we're discouraging clients from parsing and interpreting data that's used by the server internally.

1093
01:34:25,360 --> 01:34:30,360
So basically, if they start messing with our tokens, then it's their own problem that they get burned.

1094
01:34:30,360 --> 01:34:39,360
But the interface of how these tokens are used won't change as we evolve the internal implementation.

1095
01:34:39,360 --> 01:34:58,360
So if we decide to go away from a connection that's paginated through offset like the internal implementation of Graphene does and do a more efficient database based cursor, we can do that without worrying about breaking all of our consumers.

1096
01:34:58,360 --> 01:35:06,360
They don't need to change the API in order to benefit from the better performance of our internal implementation.

1097
01:35:06,360 --> 01:35:17,360
So if we add a new field, in GraphQL we have confidence that when we add that new field, it's not going to have an impact on existing queries that use that type that we've added the field to.

1098
01:35:17,360 --> 01:35:24,360
And that's because new data is only exposed to the client when it's used in a query.

1099
01:35:24,360 --> 01:35:32,360
So until we add that into the world, it can't be used. So we know it's not going to be sent to the data.

1100
01:35:32,360 --> 01:35:39,360
Even with REST, we can make that kind of change safe as long as we maintain the schema for the other fields.

1101
01:35:39,360 --> 01:35:48,360
But if the new field is expensive to compute, we don't really have any guarantees about performance impact to the clients with REST.

1102
01:35:48,360 --> 01:36:03,360
With GraphQL, we know that clients are not going to be impacted by adding an expensive to compute feature to our API because they'll only fetch that if they need it.

1103
01:36:03,360 --> 01:36:14,360
So we add a new argument to one of our fields. As long as it's optional or has a default value, we know we can add it fine.

1104
01:36:14,360 --> 01:36:23,360
Same as evolving an API in a method or any other object.

1105
01:36:23,360 --> 01:36:40,360
Even on clients for GraphQL with statically typed systems like Android or iOS, they're typically only impacted by changes that affect the return type of queries because that's really what they're typing in the API itself.

1106
01:36:40,360 --> 01:36:51,360
It may break RPC-style generated code from specific libraries, but that's not common with GraphQL. It's more common with like gRPC and things like that.

1107
01:36:51,360 --> 01:37:00,360
So in general, the same principles for evolving GraphQL APIs apply to REST APIs and any other public interface.

1108
01:37:00,360 --> 01:37:12,360
Google's API design guide really codivized this very well. It's a reference that I would encourage you guys to check out if it's something that you're interested in.

1109
01:37:12,360 --> 01:37:20,360
The guide is written with REST and gRPC in mind, but the concepts are broadly applicable even in GraphQL.

1110
01:37:20,360 --> 01:37:32,360
Especially given that gRPC, similar to GraphQL, has a schema for all of the responses that are sent.

1111
01:37:32,360 --> 01:37:40,360
So in addition to the schema, the GraphQL community has developed useful tooling and techniques to safely evolve APIs.

1112
01:37:40,360 --> 01:38:05,360
So for clients with known queries, like if it's a client that we control our API, or if it's a client that we control like our web front end or a mobile client, we can do contract testing by checking the types of static queries against the static schema definition.

1113
01:38:05,360 --> 01:38:13,360
We can also do like resolver-level middleware to track API usage from live production queries on a per-field basis.

1114
01:38:13,360 --> 01:38:26,360
This is the kind of tool that Apollo Server provides and is broadly used as a technique in the GraphQL community.

1115
01:38:26,360 --> 01:38:38,360
With REST, it's a little more difficult to get per-field level information about what is being consumed and know how things can be changed.

1116
01:38:38,360 --> 01:38:49,360
So inevitably, we're going to need to make a breaking change to our API. GraphQL's built-in deprecation reason can be used to communicate changes to consumers.

1117
01:38:49,360 --> 01:38:55,360
GitHub does a really great job of this. We can take a look at that in a little bit.

1118
01:38:55,360 --> 01:39:05,360
They have all of the changes that are going to be breaking into their API scheduled months out without ever having a version of their API.

1119
01:39:05,360 --> 01:39:21,360
Introspection can also warn clients about using fields that are marked for deprecation. So that can be helpful as well.

1120
01:39:21,360 --> 01:39:31,360
In REST, versioning is often the default option. So we might add another endpoint that versions a particular schema of our API.

1121
01:39:31,360 --> 01:39:42,360
In GraphQL, it's not the first choice, but it can still be done. It's still an option as a useful escape hatch if we really need to do some vicious refactoring.

1122
01:39:42,360 --> 01:39:56,360
Shopify, which is a pretty big proponent of GraphQL, has recently added versioning to their APIs because they have a special use case where they're providing a platform for people to build consumer products.

1123
01:39:56,360 --> 01:40:02,360
So they want to have a stable API.

1124
01:40:02,360 --> 01:40:10,360
Cool. So let's consider adding a new record related to the story author to our API.

1125
01:40:10,360 --> 01:40:22,360
In REST, we might add a separate endpoint, V1 authors. We might add links to related records as URL, which may lead to N plus one on the client side.

1126
01:40:22,360 --> 01:40:29,360
Or we might embed the author directly into the story request, which might lead to overfetching for some clients.

1127
01:40:29,360 --> 01:40:36,360
Do we need to bump the new version for stories endpoint? Will that have an impact to clients? That's a question.

1128
01:40:36,360 --> 01:40:41,360
With GraphQL, adding fields is a safe change. We don't need to worry about it.

1129
01:40:41,360 --> 01:40:48,360
So here we have we're leveraging connection and node from our previous talk.

1130
01:40:48,360 --> 01:41:01,360
So we have an author connection that we're adding to the root query and our author type is implementing node so we can fetch a single one.

1131
01:41:01,360 --> 01:41:05,360
In terms of graphing, like how should we structure our project as we grow?

1132
01:41:05,360 --> 01:41:11,360
As with any other project, we want to have like small modules that keep like things together.

1133
01:41:11,360 --> 01:41:23,360
In this case, we've organized the project with a package for query and mutation separately and a separate module file for each of the different types.

1134
01:41:23,360 --> 01:41:26,360
So trying to keep the module files pretty short and focused.

1135
01:41:26,360 --> 01:41:39,360
You can also invert this and have author as your package and query and mutation as your module, but either approach works fine.

1136
01:41:39,360 --> 01:41:44,360
For our base query, we combine these using multiple inheritance.

1137
01:41:44,360 --> 01:41:50,360
So basically we have some root query here and we inherit from story query and author query.

1138
01:41:50,360 --> 01:41:59,360
And same thing for the mutation. By inheriting from all those, we get all of the fields.

1139
01:41:59,360 --> 01:42:07,360
There's a risk that you could like have the same field, but that'll break your schema anyway.

1140
01:42:07,360 --> 01:42:10,360
So let's let's try to do a meteor exercise now.

1141
01:42:10,360 --> 01:42:19,360
So let's try to evolve our schema, write some more graphing code and add this author's type.

1142
01:42:19,360 --> 01:42:22,360
So the connection and the author type.

1143
01:42:22,360 --> 01:42:35,360
So you want to be on chapter four branch, pair up with somebody, open up API query author.py and follow the instructions there to implement changes to the schema.

1144
01:42:35,360 --> 01:42:41,360
There's also some sample queries over here and API queries dot graph QL.

1145
01:42:41,360 --> 01:42:44,360
So I'll pull that up here and we can go through it.

1146
01:43:11,360 --> 01:43:38,360
Okay.

1147
01:43:38,360 --> 01:44:02,360
So we're running a little bit ahead in this section, but let's check in and maybe like 10 minutes and see where everyone is.

1148
01:44:02,360 --> 01:44:06,360
If you have any questions, feel free to raise your hand.

1149
01:44:32,360 --> 01:44:59,360
Okay.

1150
01:44:59,360 --> 01:45:26,360
Okay.

1151
01:45:26,360 --> 01:45:53,360
Okay.

1152
01:45:53,360 --> 01:45:56,360
Okay.

1153
01:46:23,360 --> 01:46:50,360
Okay.

1154
01:46:50,360 --> 01:47:17,360
Okay.

1155
01:47:17,360 --> 01:47:44,360
Okay.

1156
01:47:44,360 --> 01:48:08,360
Okay.

1157
01:48:08,360 --> 01:48:35,360
Okay.

1158
01:48:35,360 --> 01:49:02,360
Okay.

1159
01:49:02,360 --> 01:49:29,360
Okay.

1160
01:49:29,360 --> 01:49:57,360
Okay.

1161
01:49:57,360 --> 01:50:24,360
Okay.

1162
01:50:24,360 --> 01:50:52,360
Okay.

1163
01:50:52,360 --> 01:51:19,360
Okay.

1164
01:51:19,360 --> 01:51:46,360
Okay.

1165
01:51:46,360 --> 01:52:14,360
Okay.

1166
01:52:14,360 --> 01:52:41,360
Okay.

1167
01:52:41,360 --> 01:52:44,360
Okay.

1168
01:52:44,360 --> 01:52:45,360
Okay.

1169
01:53:11,360 --> 01:53:14,360
Okay.

1170
01:53:41,360 --> 01:54:09,360
Okay.

1171
01:54:09,360 --> 01:54:12,360
Yeah, it's just a.

1172
01:54:39,360 --> 01:55:01,360
Okay.

1173
01:55:01,360 --> 01:55:28,360
Okay.

1174
01:55:28,360 --> 01:55:55,360
Okay.

1175
01:55:55,360 --> 01:56:23,360
Okay.

1176
01:56:23,360 --> 01:56:52,360
Yeah.

1177
01:56:53,360 --> 01:57:20,360
Okay.

1178
01:57:20,360 --> 01:57:47,360
Okay.

1179
01:57:47,360 --> 01:57:50,360
Okay.

1180
01:57:50,360 --> 01:57:51,360
Okay.

1181
01:58:17,360 --> 01:58:19,360
Okay.

1182
01:58:19,360 --> 01:58:20,360
Okay.

1183
01:58:20,360 --> 01:58:21,360
Okay.

1184
01:58:47,360 --> 01:58:52,360
Okay.

1185
01:58:52,360 --> 01:58:53,360
Okay.

1186
01:59:17,360 --> 01:59:28,360
Okay.

1187
01:59:28,360 --> 01:59:51,360
Okay.

1188
01:59:51,360 --> 02:00:15,360
Okay.

1189
02:00:15,360 --> 02:00:40,360
Okay.

1190
02:00:40,360 --> 02:01:07,360
Okay.

1191
02:01:07,360 --> 02:01:34,360
Okay.

1192
02:01:34,360 --> 02:01:37,360
Okay.

1193
02:02:04,360 --> 02:02:08,360
Okay.

1194
02:02:08,360 --> 02:02:09,360
Okay.

1195
02:02:09,360 --> 02:02:10,360
Okay.

1196
02:02:10,360 --> 02:02:11,360
Okay.

1197
02:02:11,360 --> 02:02:12,360
Okay.

1198
02:02:12,360 --> 02:02:13,360
Okay.

1199
02:02:13,360 --> 02:02:14,360
Okay.

1200
02:02:14,360 --> 02:02:15,360
Okay.

1201
02:02:15,360 --> 02:02:16,360
Okay.

1202
02:02:16,360 --> 02:02:17,360
Okay.

1203
02:02:17,360 --> 02:02:18,360
Okay.

1204
02:02:18,360 --> 02:02:19,360
Okay.

1205
02:02:19,360 --> 02:02:20,360
Okay.

1206
02:02:20,360 --> 02:02:21,360
Okay.

1207
02:02:21,360 --> 02:02:22,360
Okay.

1208
02:02:22,360 --> 02:02:23,360
Okay.

1209
02:02:23,360 --> 02:02:24,360
Okay.

1210
02:02:24,360 --> 02:02:25,360
Okay.

1211
02:02:25,360 --> 02:02:26,360
Okay.

1212
02:02:26,360 --> 02:02:27,360
Okay.

1213
02:02:27,360 --> 02:02:28,360
Okay.

1214
02:02:28,360 --> 02:02:29,360
Okay.

1215
02:02:29,360 --> 02:02:30,360
Okay.

1216
02:02:30,360 --> 02:02:31,360
Okay.

1217
02:02:31,360 --> 02:02:32,360
Okay.

1218
02:02:32,360 --> 02:02:33,360
Okay.

1219
02:02:33,360 --> 02:02:34,360
Okay.

1220
02:03:03,360 --> 02:03:04,360
Okay.

1221
02:03:33,360 --> 02:03:34,360
Okay.

1222
02:04:03,360 --> 02:04:10,360
Okay.

1223
02:04:10,360 --> 02:04:15,360
So, let's take a look at the next part.

1224
02:04:15,360 --> 02:04:23,360
I know a lot of people are still working on this one, but try to get through all the

1225
02:04:23,360 --> 02:04:32,360
material.

1226
02:04:32,360 --> 02:04:37,360
So, okay.

1227
02:04:37,360 --> 02:04:41,360
Let's take a look at a solution for this guy.

1228
02:04:41,360 --> 02:04:46,360
So, I will check.

1229
02:04:46,360 --> 02:04:53,360
All right.

1230
02:04:53,360 --> 02:05:09,360
So, just really quickly, let's take a look at the solution for this guy.

1231
02:05:09,360 --> 02:05:12,360
So, let's take a look at the solution for this guy.

1232
02:05:12,360 --> 02:05:15,360
So, let's take a look at the solution for this guy.

1233
02:05:15,360 --> 02:05:18,360
So, let's take a look at the solution for this guy.

1234
02:05:18,360 --> 02:05:21,360
So, let's take a look at the solution for this guy.

1235
02:05:21,360 --> 02:05:24,360
So, let's take a look at the solution for this guy.

1236
02:05:24,360 --> 02:05:27,360
So, let's take a look at the solution for this guy.

1237
02:05:27,360 --> 02:05:30,360
So, let's take a look at the solution for this guy.

1238
02:05:30,360 --> 02:05:33,360
So, let's take a look at the solution for this guy.

1239
02:05:33,360 --> 02:05:36,360
So, let's take a look at the solution for this guy.

1240
02:05:36,360 --> 02:05:39,360
So, let's take a look at the solution for this guy.

1241
02:05:39,360 --> 02:05:42,360
So, let's take a look at the solution for this guy.

1242
02:05:42,360 --> 02:05:45,360
So, let's take a look at the solution for this guy.

1243
02:05:45,360 --> 02:05:48,360
So, let's take a look at the solution for this guy.

1244
02:05:48,360 --> 02:05:51,360
So, let's take a look at the solution for this guy.

1245
02:05:51,360 --> 02:05:54,360
So, let's take a look at the solution for this guy.

1246
02:05:54,360 --> 02:05:57,360
So, let's take a look at the solution for this guy.

1247
02:05:57,360 --> 02:06:00,360
So, let's take a look at the solution for this guy.

1248
02:06:00,360 --> 02:06:03,360
So, let's take a look at the solution for this guy.

1249
02:06:03,360 --> 02:06:06,360
Set this guy in the string.

1250
02:06:06,360 --> 02:06:09,360
Should we be using public string?

1251
02:06:09,360 --> 02:06:13,360
We should call the fullName method with the display argument.

1252
02:06:13,360 --> 02:06:18,360
We should call the fullName method with the display argument.

1253
02:06:19,360 --> 02:06:26,360
For is type of, we just check if the root that is being resolved

1254
02:06:26,360 --> 02:06:30,360
for is type of, we just check if the root that is being resolved

1255
02:06:30,360 --> 02:06:43,920
to get the author object using this key that comes from our base64 decoded ID.

1256
02:06:43,920 --> 02:06:53,540
For connection we just specify the node type as the author type.

1257
02:06:53,540 --> 02:07:09,260
And we add authors and node as connection field and we resolve authors using Django.

1258
02:07:09,260 --> 02:07:15,660
So let's move on to the next thing.

1259
02:07:15,660 --> 02:07:20,800
So we can also add fields that connect two different types together.

1260
02:07:20,800 --> 02:07:26,720
So the author and the story are related.

1261
02:07:26,720 --> 02:07:30,080
Each story has one author.

1262
02:07:30,080 --> 02:07:35,320
So we have the author defined on the story type as a field.

1263
02:07:35,320 --> 02:07:39,360
And the author also has a list of stories for each of them.

1264
02:07:39,360 --> 02:07:43,720
And we can paginate across that list of stories because there are some authors out there who

1265
02:07:43,720 --> 02:07:49,420
are quite prolific.

1266
02:07:49,420 --> 02:07:53,700
So adding this kind of connection makes it a more flexible API.

1267
02:07:53,700 --> 02:07:59,580
We can navigate from any single node to any connected type, which is very flexible for

1268
02:07:59,580 --> 02:08:02,940
our clients.

1269
02:08:02,940 --> 02:08:14,900
In Graphene we use field and connection field with Python module string.

1270
02:08:14,900 --> 02:08:24,980
So we can use this Graphene.field for API query module type and connection field API

1271
02:08:24,980 --> 02:08:28,700
query module connection type.

1272
02:08:28,700 --> 02:08:37,760
We can also pass in the thing itself as we have over here.

1273
02:08:37,760 --> 02:08:43,240
So we have a connection field with the author connection that's defined right here.

1274
02:08:43,400 --> 02:08:52,460
This is just a little trick to avoid having a circular endpoint in Python.

1275
02:08:52,460 --> 02:08:55,360
So we can also deprecate fields that are no longer required.

1276
02:08:55,360 --> 02:09:02,360
So author name is no longer required on our story type because we have a more rich way

1277
02:09:02,360 --> 02:09:06,120
to describe that relationship.

1278
02:09:06,120 --> 02:09:08,760
The user can just fetch the author full name instead.

1279
02:09:08,760 --> 02:09:13,520
So we can give it a deprecation reason.

1280
02:09:13,520 --> 02:09:19,420
Similar to how we can specify description on any Graphene schema object, any field,

1281
02:09:19,420 --> 02:09:26,380
we can also provide a deprecation reason keyword argument with the reason text and that will

1282
02:09:26,380 --> 02:09:32,080
become available in our graphical documentation explorer.

1283
02:09:32,120 --> 02:09:42,720
So if we go over here in our documentation explorer we can look and see if a field is

1284
02:09:42,720 --> 02:09:50,040
deprecated it will show up over here.

1285
02:09:50,040 --> 02:09:58,880
So as a further evolution of the schema let's try to add this connection between author

1286
02:09:58,880 --> 02:10:09,480
and stories and story and author and specify a deprecation reason for author full name.

1287
02:10:09,480 --> 02:10:16,160
So this will require the branch chapter 4b that will have the solution of the previous

1288
02:10:16,160 --> 02:10:18,880
exercise there as well.

1289
02:10:18,880 --> 02:10:26,360
And you can open up author.py and story.py and implement the changes to the schema.

1290
02:10:26,360 --> 02:10:30,360
There's also some new sample queries in queries.graphql.

1291
02:11:26,360 --> 02:11:29,360
So that's the new sample query.

1292
02:11:29,360 --> 02:11:32,360
So that's the new sample query.

1293
02:11:32,360 --> 02:11:35,360
So that's the new sample query.

1294
02:11:35,360 --> 02:11:38,360
So that's the new sample query.

1295
02:11:38,360 --> 02:11:41,360
So that's the new sample query.

1296
02:11:41,360 --> 02:11:44,360
So that's the new sample query.

1297
02:11:44,360 --> 02:11:47,360
So that's the new sample query.

1298
02:11:47,360 --> 02:11:50,360
So that's the new sample query.

1299
02:11:50,360 --> 02:11:53,360
So that's the new sample query.

1300
02:11:54,360 --> 02:11:57,360
So that's the new sample query.

1301
02:11:57,360 --> 02:12:00,360
So that's the new sample query.

1302
02:12:00,360 --> 02:12:03,360
So that's the new sample query.

1303
02:12:03,360 --> 02:12:06,360
So that's the new sample query.

1304
02:12:06,360 --> 02:12:09,360
So that's the new sample query.

1305
02:12:09,360 --> 02:12:12,360
So that's the new sample query.

1306
02:12:12,360 --> 02:12:15,360
So that's the new sample query.

1307
02:12:15,360 --> 02:12:18,360
So that's the new sample query.

1308
02:12:18,360 --> 02:12:21,360
So that's the new sample query.

1309
02:12:21,360 --> 02:12:24,360
So that's the new sample query.

1310
02:12:24,360 --> 02:12:27,360
So that's the new sample query.

1311
02:12:27,360 --> 02:12:30,360
So that's the new sample query.

1312
02:12:30,360 --> 02:12:33,360
So that's the new sample query.

1313
02:12:33,360 --> 02:12:36,360
So that's the new sample query.

1314
02:12:36,360 --> 02:12:39,360
So that's the new sample query.

1315
02:12:39,360 --> 02:12:42,360
So that's the new sample query.

1316
02:12:42,360 --> 02:12:45,360
So that's the new sample query.

1317
02:12:45,360 --> 02:12:48,360
So that's the new sample query.

1318
02:12:48,360 --> 02:12:51,360
So that's the new sample query.

1319
02:12:51,360 --> 02:12:54,360
So that's the new sample query.

1320
02:12:54,360 --> 02:12:57,360
So that's the new sample query.

1321
02:12:57,360 --> 02:13:00,360
So that's the new sample query.

1322
02:13:00,360 --> 02:13:03,360
So that's the new sample query.

1323
02:13:03,360 --> 02:13:06,360
So that's the new sample query.

1324
02:13:06,360 --> 02:13:09,360
So that's the new sample query.

1325
02:13:09,360 --> 02:13:12,360
So that's the new sample query.

1326
02:13:12,360 --> 02:13:15,360
So that's the new sample query.

1327
02:13:15,360 --> 02:13:18,360
So that's the new sample query.

1328
02:13:18,360 --> 02:13:21,360
So that's the new sample query.

1329
02:13:21,360 --> 02:13:24,360
So that's the new sample query.

1330
02:13:24,360 --> 02:13:27,360
So that's the new sample query.

1331
02:13:27,360 --> 02:13:30,360
So that's the new sample query.

1332
02:13:30,360 --> 02:13:33,360
So that's the new sample query.

1333
02:13:33,360 --> 02:13:36,360
So that's the new sample query.

1334
02:13:36,360 --> 02:13:39,360
So that's the new sample query.

1335
02:13:39,360 --> 02:13:42,360
So that's the new sample query.

1336
02:13:42,360 --> 02:13:45,360
So that's the new sample query.

1337
02:13:45,360 --> 02:13:48,360
So that's the new sample query.

1338
02:13:48,360 --> 02:13:51,360
So that's the new sample query.

1339
02:13:51,360 --> 02:13:54,360
So that's the new sample query.

1340
02:13:54,360 --> 02:13:57,360
So that's the new sample query.

1341
02:13:57,360 --> 02:14:00,360
So that's the new sample query.

1342
02:14:00,360 --> 02:14:03,360
So that's the new sample query.

1343
02:14:03,360 --> 02:14:06,360
So that's the new sample query.

1344
02:14:06,360 --> 02:14:09,360
So that's the new sample query.

1345
02:14:09,360 --> 02:14:12,360
So that's the new sample query.

1346
02:14:12,360 --> 02:14:15,360
So that's the new sample query.

1347
02:14:15,360 --> 02:14:18,360
So that's the new sample query.

1348
02:14:18,360 --> 02:14:21,360
So that's the new sample query.

1349
02:14:21,360 --> 02:14:24,360
So that's the new sample query.

1350
02:14:24,360 --> 02:14:27,360
So that's the new sample query.

1351
02:14:27,360 --> 02:14:30,360
So that's the new sample query.

1352
02:14:30,360 --> 02:14:33,360
So that's the new sample query.

1353
02:14:33,360 --> 02:14:36,360
So that's the new sample query.

1354
02:14:36,360 --> 02:14:39,360
So that's the new sample query.

1355
02:14:39,360 --> 02:14:42,360
So that's the new sample query.

1356
02:14:42,360 --> 02:14:45,360
So that's the new sample query.

1357
02:14:45,360 --> 02:14:48,360
So that's the new sample query.

1358
02:14:48,360 --> 02:14:51,360
So that's the new sample query.

1359
02:14:51,360 --> 02:14:54,360
So that's the new sample query.

1360
02:14:54,360 --> 02:14:57,360
So that's the new sample query.

1361
02:14:57,360 --> 02:15:00,360
So that's the new sample query.

1362
02:15:00,360 --> 02:15:03,360
So that's the new sample query.

1363
02:15:03,360 --> 02:15:06,360
So that's the new sample query.

1364
02:15:06,360 --> 02:15:09,360
So that's the new sample query.

1365
02:15:09,360 --> 02:15:12,360
So that's the new sample query.

1366
02:15:12,360 --> 02:15:15,360
So that's the new sample query.

1367
02:15:15,360 --> 02:15:18,360
So that's the new sample query.

1368
02:15:18,360 --> 02:15:21,360
So that's the new sample query.

1369
02:15:21,360 --> 02:15:24,360
So that's the new sample query.

1370
02:15:24,360 --> 02:15:27,360
So that's the new sample query.

1371
02:15:27,360 --> 02:15:30,360
So that's the new sample query.

1372
02:15:30,360 --> 02:15:33,360
So that's the new sample query.

1373
02:15:33,360 --> 02:15:36,360
So that's the new sample query.

1374
02:15:36,360 --> 02:15:39,360
So that's the new sample query.

1375
02:15:39,360 --> 02:15:42,360
So that's the new sample query.

1376
02:15:42,360 --> 02:15:45,360
So that's the new sample query.

1377
02:15:45,360 --> 02:15:48,360
So that's the new sample query.

1378
02:15:48,360 --> 02:15:51,360
So that's the new sample query.

1379
02:15:51,360 --> 02:15:54,360
So that's the new sample query.

1380
02:15:54,360 --> 02:15:57,360
So that's the new sample query.

1381
02:15:57,360 --> 02:16:00,360
So that's the new sample query.

1382
02:16:00,360 --> 02:16:03,360
So that's the new sample query.

1383
02:16:03,360 --> 02:16:06,360
So that's the new sample query.

1384
02:16:06,360 --> 02:16:09,360
So that's the new sample query.

1385
02:16:09,360 --> 02:16:12,360
So that's the new sample query.

1386
02:16:12,360 --> 02:16:15,360
So that's the new sample query.

1387
02:16:15,360 --> 02:16:18,360
So that's the new sample query.

1388
02:16:18,360 --> 02:16:21,360
So that's the new sample query.

1389
02:16:21,360 --> 02:16:24,360
So that's the new sample query.

1390
02:16:24,360 --> 02:16:27,360
So that's the new sample query.

1391
02:16:27,360 --> 02:16:30,360
So that's the new sample query.

1392
02:16:30,360 --> 02:16:33,360
So that's the new sample query.

1393
02:16:33,360 --> 02:16:36,360
So that's the new sample query.

1394
02:16:36,360 --> 02:16:39,360
So that's the new sample query.

1395
02:16:39,360 --> 02:16:42,360
So that's the new sample query.

1396
02:16:42,360 --> 02:16:45,360
So that's the new sample query.

1397
02:16:45,360 --> 02:16:48,360
So that's the new sample query.

1398
02:16:48,360 --> 02:16:51,360
So that's the new sample query.

1399
02:16:51,360 --> 02:16:54,360
So that's the new sample query.

1400
02:16:54,360 --> 02:16:57,360
So that's the new sample query.

1401
02:16:57,360 --> 02:17:00,360
So that's the new sample query.

1402
02:17:00,360 --> 02:17:03,360
So that's the new sample query.

1403
02:17:03,360 --> 02:17:06,360
So that's the new sample query.

1404
02:17:06,360 --> 02:17:09,360
So that's the new sample query.

1405
02:17:09,360 --> 02:17:12,360
So that's the new sample query.

1406
02:17:12,360 --> 02:17:15,360
So that's the new sample query.

1407
02:17:15,360 --> 02:17:18,360
So that's the new sample query.

1408
02:17:18,360 --> 02:17:21,360
So that's the new sample query.

1409
02:17:21,360 --> 02:17:24,360
So that's the new sample query.

1410
02:17:40,360 --> 02:17:43,360
How's everybody doing?

1411
02:17:43,360 --> 02:18:00,080
Yes?

1412
02:18:00,080 --> 02:18:05,480
Is

1413
02:18:05,480 --> 02:18:18,600
in

1414
02:18:18,600 --> 02:18:27,800
in

1415
02:18:27,800 --> 02:18:29,800
.

1416
02:18:57,800 --> 02:19:00,800
.

1417
02:19:27,800 --> 02:19:30,800
.

1418
02:19:57,800 --> 02:20:00,800
.

1419
02:20:27,800 --> 02:20:30,800
.

1420
02:20:57,800 --> 02:21:00,800
.

1421
02:21:27,800 --> 02:21:29,800
.

1422
02:21:57,800 --> 02:21:59,800
.

1423
02:22:11,800 --> 02:22:13,800
.

1424
02:22:14,800 --> 02:22:16,800
.

1425
02:22:16,800 --> 02:22:18,800
.

1426
02:22:18,800 --> 02:22:20,800
.

1427
02:22:20,800 --> 02:22:22,800
.

1428
02:22:22,800 --> 02:22:24,800
.

1429
02:22:24,800 --> 02:22:26,800
.

1430
02:22:26,800 --> 02:22:28,800
.

1431
02:22:28,800 --> 02:22:30,800
.

1432
02:22:30,800 --> 02:22:32,800
.

1433
02:22:32,800 --> 02:22:34,800
.

1434
02:22:34,800 --> 02:22:36,800
.

1435
02:22:36,800 --> 02:22:38,800
.

1436
02:22:38,800 --> 02:22:40,800
.

1437
02:22:40,800 --> 02:22:42,800
.

1438
02:22:42,800 --> 02:22:44,800
.

1439
02:22:44,800 --> 02:22:46,800
.

1440
02:22:46,800 --> 02:22:48,800
.

1441
02:22:48,800 --> 02:22:50,800
.

1442
02:22:50,800 --> 02:22:52,800
.

1443
02:22:52,800 --> 02:22:54,800
.

1444
02:22:54,800 --> 02:22:56,800
.

1445
02:22:56,800 --> 02:22:58,800
.

1446
02:22:58,800 --> 02:23:00,800
.

1447
02:23:00,800 --> 02:23:02,800
.

1448
02:23:02,800 --> 02:23:04,800
.

1449
02:23:04,800 --> 02:23:06,800
.

1450
02:23:06,800 --> 02:23:08,800
.

1451
02:23:08,800 --> 02:23:10,800
.

1452
02:23:10,800 --> 02:23:12,800
.

1453
02:23:12,800 --> 02:23:14,800
.

1454
02:23:14,800 --> 02:23:16,800
.

1455
02:23:16,800 --> 02:23:18,800
.

1456
02:23:18,800 --> 02:23:20,800
.

1457
02:23:20,800 --> 02:23:22,800
.

1458
02:23:22,800 --> 02:23:24,800
.

1459
02:23:24,800 --> 02:23:26,800
.

1460
02:23:26,800 --> 02:23:28,800
.

1461
02:23:28,800 --> 02:23:30,800
.

1462
02:23:30,800 --> 02:23:32,800
.

1463
02:23:32,800 --> 02:23:34,800
.

1464
02:23:34,800 --> 02:23:36,800
.

1465
02:23:36,800 --> 02:23:38,800
.

1466
02:23:38,800 --> 02:23:40,800
.

1467
02:23:40,800 --> 02:23:42,800
.

1468
02:23:42,800 --> 02:23:44,800
.

1469
02:23:44,800 --> 02:23:46,800
.

1470
02:23:46,800 --> 02:23:48,800
.

1471
02:23:48,800 --> 02:23:50,800
.

1472
02:23:50,800 --> 02:23:52,800
.

1473
02:23:52,800 --> 02:23:54,800
.

1474
02:23:54,800 --> 02:23:56,800
.

1475
02:23:56,800 --> 02:23:58,800
.

1476
02:23:58,800 --> 02:24:00,800
.

1477
02:24:00,800 --> 02:24:02,800
.

1478
02:24:02,800 --> 02:24:04,800
.

1479
02:24:04,800 --> 02:24:06,800
.

1480
02:24:06,800 --> 02:24:08,800
.

1481
02:24:08,800 --> 02:24:10,800
.

1482
02:24:10,800 --> 02:24:12,800
.

1483
02:24:12,800 --> 02:24:14,800
.

1484
02:24:14,800 --> 02:24:16,800
.

1485
02:24:16,800 --> 02:24:18,800
.

1486
02:24:18,800 --> 02:24:20,800
.

1487
02:24:20,800 --> 02:24:22,800
.

1488
02:24:22,800 --> 02:24:24,800
.

1489
02:24:24,800 --> 02:24:26,800
.

1490
02:24:26,800 --> 02:24:28,800
.

1491
02:24:28,800 --> 02:24:30,800
.

1492
02:24:30,800 --> 02:24:32,800
.

1493
02:24:32,800 --> 02:24:34,800
.

1494
02:24:34,800 --> 02:24:36,800
.

1495
02:24:36,800 --> 02:24:38,800
.

1496
02:24:38,800 --> 02:24:40,800
.

1497
02:24:40,800 --> 02:24:42,800
.

1498
02:24:42,800 --> 02:24:44,800
.

1499
02:24:44,800 --> 02:24:46,800
.

1500
02:24:46,800 --> 02:24:48,800
.

1501
02:24:48,800 --> 02:24:50,800
.

1502
02:24:50,800 --> 02:24:52,800
.

1503
02:24:52,800 --> 02:24:54,800
.

1504
02:24:54,800 --> 02:24:56,800
.

1505
02:24:56,800 --> 02:24:58,800
.

1506
02:24:58,800 --> 02:25:00,800
.

1507
02:25:00,800 --> 02:25:02,800
.

1508
02:25:02,800 --> 02:25:04,800
.

1509
02:25:04,800 --> 02:25:06,800
.

1510
02:25:06,800 --> 02:25:08,800
.

1511
02:25:08,800 --> 02:25:10,800
.

1512
02:25:10,800 --> 02:25:12,800
.

1513
02:25:12,800 --> 02:25:14,800
.

1514
02:25:14,800 --> 02:25:16,800
.

1515
02:25:16,800 --> 02:25:18,800
.

1516
02:25:18,800 --> 02:25:20,800
.

1517
02:25:20,800 --> 02:25:22,800
.

1518
02:25:22,800 --> 02:25:24,800
.

1519
02:25:24,800 --> 02:25:26,800
.

1520
02:25:26,800 --> 02:25:28,800
.

1521
02:25:28,800 --> 02:25:30,800
.

1522
02:25:30,800 --> 02:25:32,800
.

1523
02:25:32,800 --> 02:25:34,800
.

1524
02:25:34,800 --> 02:25:36,800
.

1525
02:25:36,800 --> 02:25:38,800
.

1526
02:25:38,800 --> 02:25:40,800
.

1527
02:25:40,800 --> 02:25:42,800
.

1528
02:25:42,800 --> 02:25:44,800
.

1529
02:25:44,800 --> 02:25:46,800
.

1530
02:25:46,800 --> 02:25:48,800
.

1531
02:25:48,800 --> 02:25:50,800
.

1532
02:25:50,800 --> 02:25:52,800
.

1533
02:25:52,800 --> 02:25:54,800
.

1534
02:25:54,800 --> 02:25:56,800
.

1535
02:25:56,800 --> 02:25:58,800
.

1536
02:25:58,800 --> 02:26:00,800
.

1537
02:26:00,800 --> 02:26:02,800
.

1538
02:26:02,800 --> 02:26:04,800
.

1539
02:26:04,800 --> 02:26:06,800
.

1540
02:26:06,800 --> 02:26:08,800
.

1541
02:26:08,800 --> 02:26:10,800
.

1542
02:26:10,800 --> 02:26:12,800
.

1543
02:26:12,800 --> 02:26:14,800
.

1544
02:26:14,800 --> 02:26:16,800
.

1545
02:26:16,800 --> 02:26:18,800
.

1546
02:26:18,800 --> 02:26:20,800
.

1547
02:26:20,800 --> 02:26:22,800
.

1548
02:26:22,800 --> 02:26:24,800
.

1549
02:26:24,800 --> 02:26:26,800
.

1550
02:26:26,800 --> 02:26:28,800
.

1551
02:26:28,800 --> 02:26:30,800
.

1552
02:26:30,800 --> 02:26:32,800
.

1553
02:26:32,800 --> 02:26:34,800
.

1554
02:26:34,800 --> 02:26:36,800
.

1555
02:26:36,800 --> 02:26:38,800
.

1556
02:26:38,800 --> 02:26:40,800
.

1557
02:26:40,800 --> 02:26:42,800
.

1558
02:26:42,800 --> 02:26:44,800
.

1559
02:26:44,800 --> 02:26:46,800
.

1560
02:26:46,800 --> 02:26:48,800
.

1561
02:26:48,800 --> 02:26:50,800
.

1562
02:26:50,800 --> 02:26:52,800
.

1563
02:26:52,800 --> 02:26:54,800
.

1564
02:26:54,800 --> 02:26:56,800
.

1565
02:26:56,800 --> 02:26:58,800
.

1566
02:26:58,800 --> 02:27:00,800
.

1567
02:27:00,800 --> 02:27:02,800
.

1568
02:27:02,800 --> 02:27:04,800
.

1569
02:27:04,800 --> 02:27:06,800
.

1570
02:27:06,800 --> 02:27:08,800
.

1571
02:27:08,800 --> 02:27:10,800
.

1572
02:27:10,800 --> 02:27:12,800
.

1573
02:27:12,800 --> 02:27:14,800
.

1574
02:27:14,800 --> 02:27:16,800
.

1575
02:27:16,800 --> 02:27:18,800
.

1576
02:27:18,800 --> 02:27:20,800
.

1577
02:27:20,800 --> 02:27:22,800
.

1578
02:27:22,800 --> 02:27:24,800
.

1579
02:27:24,800 --> 02:27:26,800
.

1580
02:27:26,800 --> 02:27:28,800
.

1581
02:27:28,800 --> 02:27:30,800
.

1582
02:27:30,800 --> 02:27:32,800
.

1583
02:27:32,800 --> 02:27:34,800
.

1584
02:27:34,800 --> 02:27:36,800
.

1585
02:27:36,800 --> 02:27:38,800
.

1586
02:27:38,800 --> 02:27:40,800
.

1587
02:27:40,800 --> 02:27:42,800
.

1588
02:27:42,800 --> 02:27:44,800
.

1589
02:27:44,800 --> 02:27:46,800
.

1590
02:27:46,800 --> 02:27:48,800
.

1591
02:27:48,800 --> 02:27:50,800
.

1592
02:27:50,800 --> 02:27:52,800
.

1593
02:27:52,800 --> 02:27:54,800
.

1594
02:27:54,800 --> 02:27:56,800
.

1595
02:27:56,800 --> 02:27:58,800
.

1596
02:27:58,800 --> 02:28:00,800
.

1597
02:28:00,800 --> 02:28:02,800
.

1598
02:28:02,800 --> 02:28:04,800
.

1599
02:28:04,800 --> 02:28:06,800
.

1600
02:28:06,800 --> 02:28:08,800
.

1601
02:28:08,800 --> 02:28:10,800
.

1602
02:28:10,800 --> 02:28:12,800
.

1603
02:28:12,800 --> 02:28:14,800
.

1604
02:28:14,800 --> 02:28:16,800
.

1605
02:28:16,800 --> 02:28:18,800
.

1606
02:28:18,800 --> 02:28:20,800
.

1607
02:28:20,800 --> 02:28:22,800
.

1608
02:28:22,800 --> 02:28:24,800
.

1609
02:28:24,800 --> 02:28:26,800
.

1610
02:28:26,800 --> 02:28:28,800
.

1611
02:28:28,800 --> 02:28:30,800
.

1612
02:28:30,800 --> 02:28:32,800
.

1613
02:28:32,800 --> 02:28:34,800
.

1614
02:28:34,800 --> 02:28:36,800
.

1615
02:28:36,800 --> 02:28:38,800
.

1616
02:28:38,800 --> 02:28:40,800
.

1617
02:28:40,800 --> 02:28:42,800
.

1618
02:28:42,800 --> 02:28:44,800
.

1619
02:28:44,800 --> 02:28:46,800
.

1620
02:28:46,800 --> 02:28:48,800
.

1621
02:28:48,800 --> 02:28:50,800
.

1622
02:28:50,800 --> 02:28:52,800
.

1623
02:28:52,800 --> 02:28:54,800
.

1624
02:28:54,800 --> 02:28:56,800
.

1625
02:28:56,800 --> 02:28:58,800
.

1626
02:28:58,800 --> 02:29:00,800
.

1627
02:29:00,800 --> 02:29:02,800
.

1628
02:29:02,800 --> 02:29:04,800
.

1629
02:29:04,800 --> 02:29:06,800
.

1630
02:29:06,800 --> 02:29:08,800
.

1631
02:29:08,800 --> 02:29:10,800
.

1632
02:29:10,800 --> 02:29:12,800
.

1633
02:29:12,800 --> 02:29:14,800
.

1634
02:29:14,800 --> 02:29:16,800
.

1635
02:29:16,800 --> 02:29:18,800
.

1636
02:29:18,800 --> 02:29:20,800
.

1637
02:29:20,800 --> 02:29:22,800
.

1638
02:29:22,800 --> 02:29:24,800
.

1639
02:29:24,800 --> 02:29:26,800
.

1640
02:29:26,800 --> 02:29:28,800
.

1641
02:29:28,800 --> 02:29:30,800
.

1642
02:29:30,800 --> 02:29:32,800
.

1643
02:29:32,800 --> 02:29:34,800
.

1644
02:29:34,800 --> 02:29:36,800
.

1645
02:29:36,800 --> 02:29:38,800
.

1646
02:29:38,800 --> 02:29:40,800
.

1647
02:29:40,800 --> 02:29:42,800
.

1648
02:29:42,800 --> 02:29:44,800
.

1649
02:29:44,800 --> 02:29:46,800
.

1650
02:29:46,800 --> 02:29:48,800
.

1651
02:29:48,800 --> 02:29:50,800
.

1652
02:29:50,800 --> 02:29:52,800
.

1653
02:29:52,800 --> 02:29:54,800
.

1654
02:29:54,800 --> 02:29:56,800
.

1655
02:29:56,800 --> 02:29:58,800
.

1656
02:29:58,800 --> 02:30:00,800
.

1657
02:30:00,800 --> 02:30:02,800
.

1658
02:30:02,800 --> 02:30:04,800
.

1659
02:30:04,800 --> 02:30:06,800
.

1660
02:30:06,800 --> 02:30:08,800
.

1661
02:30:08,800 --> 02:30:10,800
.

1662
02:30:10,800 --> 02:30:12,800
.

1663
02:30:12,800 --> 02:30:14,800
.

1664
02:30:14,800 --> 02:30:16,800
.

1665
02:30:16,800 --> 02:30:18,800
.

1666
02:30:18,800 --> 02:30:20,800
.

1667
02:30:20,800 --> 02:30:22,800
.

1668
02:30:22,800 --> 02:30:24,800
.

1669
02:30:24,800 --> 02:30:26,800
.

1670
02:30:26,800 --> 02:30:28,800
.

1671
02:30:28,800 --> 02:30:30,800
.

1672
02:30:30,800 --> 02:30:32,800
.

1673
02:30:32,800 --> 02:30:34,800
.

1674
02:30:34,800 --> 02:30:36,800
.

1675
02:30:36,800 --> 02:30:38,800
.

1676
02:30:38,800 --> 02:30:40,800
.

1677
02:30:40,800 --> 02:30:42,800
.

1678
02:30:42,800 --> 02:30:44,800
.

1679
02:30:44,800 --> 02:30:46,800
.

1680
02:30:46,800 --> 02:30:48,800
.

1681
02:30:48,800 --> 02:30:50,800
.

1682
02:30:50,800 --> 02:30:52,800
.

1683
02:30:52,800 --> 02:30:54,800
.

1684
02:30:54,800 --> 02:30:56,800
.

1685
02:30:56,800 --> 02:30:58,800
.

1686
02:30:58,800 --> 02:31:00,800
.

1687
02:31:00,800 --> 02:31:02,800
.

1688
02:31:02,800 --> 02:31:04,800
.

1689
02:31:04,800 --> 02:31:06,800
.

1690
02:31:06,800 --> 02:31:08,800
.

1691
02:31:08,800 --> 02:31:10,800
.

1692
02:31:10,800 --> 02:31:12,800
.

1693
02:31:12,800 --> 02:31:14,800
.

1694
02:31:14,800 --> 02:31:16,800
.

1695
02:31:16,800 --> 02:31:18,800
.

1696
02:31:18,800 --> 02:31:20,800
.

1697
02:31:20,800 --> 02:31:22,800
.

1698
02:31:22,800 --> 02:31:24,800
.

1699
02:31:24,800 --> 02:31:26,800
.

1700
02:31:26,800 --> 02:31:28,800
.

1701
02:31:28,800 --> 02:31:30,800
.

1702
02:31:30,800 --> 02:31:32,800
.

1703
02:31:32,800 --> 02:31:34,800
.

1704
02:31:34,800 --> 02:31:36,800
.

1705
02:31:36,800 --> 02:31:38,800
.

1706
02:31:38,800 --> 02:31:40,800
.

1707
02:31:40,800 --> 02:31:42,800
.

1708
02:31:42,800 --> 02:31:44,800
.

1709
02:31:44,800 --> 02:31:46,800
.

1710
02:31:46,800 --> 02:31:48,800
.

1711
02:31:48,800 --> 02:31:50,800
.

1712
02:31:50,800 --> 02:31:52,800
.

1713
02:31:52,800 --> 02:31:54,800
.

1714
02:31:54,800 --> 02:31:56,800
.

1715
02:31:56,800 --> 02:31:58,800
.

1716
02:31:58,800 --> 02:32:00,800
.

1717
02:32:00,800 --> 02:32:02,800
.

1718
02:32:02,800 --> 02:32:04,800
.

1719
02:32:04,800 --> 02:32:06,800
.

1720
02:32:06,800 --> 02:32:08,800
.

1721
02:32:08,800 --> 02:32:10,800
.

1722
02:32:10,800 --> 02:32:12,800
.

1723
02:32:12,800 --> 02:32:14,800
.

1724
02:32:14,800 --> 02:32:16,800
.

1725
02:32:16,800 --> 02:32:18,800
.

1726
02:32:18,800 --> 02:32:20,800
.

1727
02:32:20,800 --> 02:32:22,800
.

1728
02:32:22,800 --> 02:32:24,800
.

1729
02:32:24,800 --> 02:32:26,800
.

1730
02:32:26,800 --> 02:32:28,800
.

1731
02:32:28,800 --> 02:32:30,800
.

1732
02:32:30,800 --> 02:32:32,800
.

1733
02:32:32,800 --> 02:32:34,800
.

1734
02:32:34,800 --> 02:32:36,800
.

1735
02:32:36,800 --> 02:32:38,800
.

1736
02:32:38,800 --> 02:32:40,800
.

1737
02:32:40,800 --> 02:32:42,800
.

1738
02:32:42,800 --> 02:32:44,800
.

1739
02:32:44,800 --> 02:32:46,800
.

1740
02:32:46,800 --> 02:32:48,800
.

1741
02:32:48,800 --> 02:32:50,800
.

1742
02:32:50,800 --> 02:32:52,800
.

1743
02:32:52,800 --> 02:32:54,800
.

1744
02:32:54,800 --> 02:32:56,800
.

1745
02:32:56,800 --> 02:32:58,800
.

1746
02:32:58,800 --> 02:33:00,800
.

1747
02:33:00,800 --> 02:33:02,800
.

1748
02:33:02,800 --> 02:33:04,800
.

1749
02:33:04,800 --> 02:33:06,800
.

1750
02:33:06,800 --> 02:33:08,800
.

1751
02:33:08,800 --> 02:33:10,800
.

1752
02:33:10,800 --> 02:33:12,800
.

1753
02:33:12,800 --> 02:33:14,800
.

1754
02:33:14,800 --> 02:33:16,800
.

1755
02:33:16,800 --> 02:33:18,800
.

1756
02:33:18,800 --> 02:33:20,800
.

1757
02:33:20,800 --> 02:33:22,800
.

1758
02:33:22,800 --> 02:33:24,800
.

1759
02:33:24,800 --> 02:33:26,800
.

1760
02:33:26,800 --> 02:33:28,800
.

1761
02:33:28,800 --> 02:33:30,800
.

1762
02:33:30,800 --> 02:33:32,800
.

1763
02:33:32,800 --> 02:33:34,800
.

1764
02:33:34,800 --> 02:33:36,800
.

1765
02:33:36,800 --> 02:33:38,800
.

1766
02:33:38,800 --> 02:33:40,800
.

1767
02:33:40,800 --> 02:33:42,800
.

1768
02:33:42,800 --> 02:33:44,800
.

1769
02:33:44,800 --> 02:33:46,800
.

1770
02:33:46,800 --> 02:33:48,800
.

1771
02:33:48,800 --> 02:33:50,800
.

1772
02:33:50,800 --> 02:33:52,800
.

1773
02:33:52,800 --> 02:33:54,800
.

1774
02:33:54,800 --> 02:33:56,800
.

1775
02:33:56,800 --> 02:33:58,800
.

1776
02:33:58,800 --> 02:34:00,800
.

1777
02:34:00,800 --> 02:34:02,800
.

1778
02:34:02,800 --> 02:34:04,800
.

1779
02:34:04,800 --> 02:34:06,800
.

1780
02:34:06,800 --> 02:34:08,800
.

1781
02:34:08,800 --> 02:34:10,800
.

1782
02:34:10,800 --> 02:34:12,800
.

1783
02:34:12,800 --> 02:34:14,800
.

1784
02:34:14,800 --> 02:34:16,800
.

1785
02:34:16,800 --> 02:34:18,800
.

1786
02:34:18,800 --> 02:34:20,800
.

1787
02:34:20,800 --> 02:34:22,800
.

1788
02:34:22,800 --> 02:34:24,800
.

1789
02:34:24,800 --> 02:34:26,800
.

1790
02:34:26,800 --> 02:34:28,800
.

1791
02:34:28,800 --> 02:34:30,800
.

1792
02:34:30,800 --> 02:34:32,800
.

1793
02:34:32,800 --> 02:34:34,800
.

1794
02:34:34,800 --> 02:34:36,800
.

1795
02:34:36,800 --> 02:34:38,800
.

1796
02:34:38,800 --> 02:34:40,800
.

1797
02:34:40,800 --> 02:34:42,800
.

1798
02:34:42,800 --> 02:34:44,800
.

1799
02:34:44,800 --> 02:34:46,800
.

1800
02:34:46,800 --> 02:34:48,800
.

1801
02:34:48,800 --> 02:34:50,800
.

1802
02:34:50,800 --> 02:34:52,800
.

1803
02:34:52,800 --> 02:34:54,800
.

1804
02:34:54,800 --> 02:34:56,800
.

1805
02:34:56,800 --> 02:34:58,800
.

1806
02:34:58,800 --> 02:35:00,800
.

1807
02:35:00,800 --> 02:35:02,800
.

1808
02:35:02,800 --> 02:35:04,800
.

1809
02:35:04,800 --> 02:35:06,800
.

1810
02:35:06,800 --> 02:35:08,800
.

1811
02:35:08,800 --> 02:35:10,800
.

1812
02:35:10,800 --> 02:35:12,800
.

1813
02:35:12,800 --> 02:35:14,800
.

1814
02:35:14,800 --> 02:35:16,800
.

1815
02:35:16,800 --> 02:35:18,800
.

1816
02:35:18,800 --> 02:35:20,800
.

1817
02:35:20,800 --> 02:35:22,800
.

1818
02:35:22,800 --> 02:35:24,800
.

1819
02:35:24,800 --> 02:35:26,800
.

1820
02:35:26,800 --> 02:35:28,800
.

1821
02:35:28,800 --> 02:35:30,800
.

1822
02:35:30,800 --> 02:35:32,800
.

1823
02:35:32,800 --> 02:35:34,800
.

1824
02:35:34,800 --> 02:35:36,800
.

1825
02:35:36,800 --> 02:35:38,800
.

1826
02:35:38,800 --> 02:35:40,800
.

1827
02:35:40,800 --> 02:35:42,800
.

1828
02:35:42,800 --> 02:35:44,800
.

1829
02:35:44,800 --> 02:35:46,800
.

1830
02:35:46,800 --> 02:35:48,800
.

1831
02:35:48,800 --> 02:35:50,800
.

1832
02:35:50,800 --> 02:35:52,800
.

1833
02:35:52,800 --> 02:35:54,800
.

1834
02:35:54,800 --> 02:35:56,800
.

1835
02:35:56,800 --> 02:35:58,800
.

1836
02:35:58,800 --> 02:36:00,800
.

1837
02:36:00,800 --> 02:36:02,800
.

1838
02:36:02,800 --> 02:36:04,800
.

1839
02:36:04,800 --> 02:36:06,800
.

1840
02:36:06,800 --> 02:36:08,800
.

1841
02:36:08,800 --> 02:36:10,800
.

1842
02:36:10,800 --> 02:36:12,800
.

1843
02:36:12,800 --> 02:36:14,800
.

1844
02:36:14,800 --> 02:36:16,800
.

1845
02:36:16,800 --> 02:36:18,800
.

1846
02:36:18,800 --> 02:36:20,800
.

1847
02:36:20,800 --> 02:36:22,800
.

1848
02:36:22,800 --> 02:36:24,800
.

1849
02:36:24,800 --> 02:36:26,800
.

1850
02:36:26,800 --> 02:36:28,800
.

1851
02:36:28,800 --> 02:36:30,800
.

1852
02:36:30,800 --> 02:36:32,800
.

1853
02:36:32,800 --> 02:36:34,800
.

1854
02:36:34,800 --> 02:36:36,800
.

1855
02:36:36,800 --> 02:36:38,800
.

1856
02:36:38,800 --> 02:36:40,800
.

1857
02:36:40,800 --> 02:36:42,800
.

1858
02:36:42,800 --> 02:36:44,800
.

1859
02:36:44,800 --> 02:36:46,800
.

1860
02:36:46,800 --> 02:36:48,800
.

1861
02:36:48,800 --> 02:36:50,800
.

1862
02:36:50,800 --> 02:36:52,800
.

1863
02:36:52,800 --> 02:36:54,800
.

1864
02:36:54,800 --> 02:36:56,800
.

1865
02:36:56,800 --> 02:36:58,800
.

1866
02:36:58,800 --> 02:37:00,800
.

1867
02:37:00,800 --> 02:37:02,800
.

1868
02:37:02,800 --> 02:37:04,800
.

1869
02:37:04,800 --> 02:37:06,800
.

1870
02:37:06,800 --> 02:37:08,800
.

1871
02:37:08,800 --> 02:37:10,800
.

1872
02:37:10,800 --> 02:37:12,800
.

1873
02:37:12,800 --> 02:37:14,800
.

1874
02:37:14,800 --> 02:37:16,800
.

1875
02:37:16,800 --> 02:37:18,800
.

1876
02:37:18,800 --> 02:37:20,800
.

1877
02:37:20,800 --> 02:37:22,800
.

1878
02:37:22,800 --> 02:37:24,800
.

1879
02:37:24,800 --> 02:37:26,800
.

1880
02:37:26,800 --> 02:37:28,800
.

1881
02:37:28,800 --> 02:37:30,800
.

1882
02:37:30,800 --> 02:37:32,800
.

1883
02:37:32,800 --> 02:37:34,800
.

1884
02:37:34,800 --> 02:37:36,800
.

1885
02:37:36,800 --> 02:37:38,800
.

1886
02:37:38,800 --> 02:37:40,800
.

1887
02:37:40,800 --> 02:37:42,800
.

1888
02:37:42,800 --> 02:37:44,800
.

1889
02:37:44,800 --> 02:37:46,800
.

1890
02:37:46,800 --> 02:37:48,800
.

1891
02:37:48,800 --> 02:37:50,800
.

1892
02:37:50,800 --> 02:37:52,800
.

1893
02:37:52,800 --> 02:37:54,800
.

1894
02:37:54,800 --> 02:37:56,800
.

1895
02:37:56,800 --> 02:37:58,800
.

1896
02:37:58,800 --> 02:38:00,800
.

1897
02:38:00,800 --> 02:38:02,800
.

1898
02:38:02,800 --> 02:38:04,800
.

1899
02:38:04,800 --> 02:38:06,800
.

1900
02:38:06,800 --> 02:38:08,800
.

1901
02:38:08,800 --> 02:38:10,800
.

1902
02:38:10,800 --> 02:38:12,800
.

1903
02:38:12,800 --> 02:38:14,800
.

1904
02:38:14,800 --> 02:38:16,800
.

1905
02:38:16,800 --> 02:38:18,800
.

1906
02:38:18,800 --> 02:38:20,800
.

1907
02:38:20,800 --> 02:38:22,800
.

1908
02:38:22,800 --> 02:38:24,800
.

1909
02:38:24,800 --> 02:38:26,800
.

1910
02:38:26,800 --> 02:38:28,800
.

1911
02:38:28,800 --> 02:38:30,800
.

1912
02:38:30,800 --> 02:38:32,800
.

1913
02:38:32,800 --> 02:38:34,800
.

1914
02:38:34,800 --> 02:38:36,800
.

1915
02:38:36,800 --> 02:38:38,800
.

1916
02:38:38,800 --> 02:38:40,800
.

1917
02:38:40,800 --> 02:38:42,800
.

1918
02:38:42,800 --> 02:38:44,800
.

1919
02:38:44,800 --> 02:38:46,800
.

1920
02:38:46,800 --> 02:38:48,800
.

1921
02:38:48,800 --> 02:38:50,800
.

1922
02:38:50,800 --> 02:38:52,800
.

1923
02:38:52,800 --> 02:38:54,800
.

1924
02:38:54,800 --> 02:38:56,800
.

1925
02:38:56,800 --> 02:38:58,800
.

1926
02:38:58,800 --> 02:39:00,800
.

1927
02:39:00,800 --> 02:39:02,800
.

1928
02:39:02,800 --> 02:39:04,800
.

1929
02:39:04,800 --> 02:39:06,800
.

1930
02:39:06,800 --> 02:39:08,800
.

1931
02:39:08,800 --> 02:39:10,800
.

1932
02:39:10,800 --> 02:39:12,800
.

1933
02:39:12,800 --> 02:39:14,800
.

1934
02:39:14,800 --> 02:39:16,800
.

1935
02:39:16,800 --> 02:39:18,800
.

1936
02:39:18,800 --> 02:39:20,800
.

1937
02:39:20,800 --> 02:39:22,800
.

1938
02:39:22,800 --> 02:39:24,800
.

1939
02:39:24,800 --> 02:39:26,800
.

1940
02:39:26,800 --> 02:39:28,800
.

1941
02:39:28,800 --> 02:39:30,800
.

1942
02:39:30,800 --> 02:39:32,800
.

1943
02:39:32,800 --> 02:39:34,800
.

1944
02:39:34,800 --> 02:39:36,800
.

1945
02:39:36,800 --> 02:39:38,800
.

1946
02:39:38,800 --> 02:39:40,800
.

1947
02:39:40,800 --> 02:39:42,800
.

1948
02:39:42,800 --> 02:39:44,800
.

1949
02:39:44,800 --> 02:39:46,800
.

1950
02:39:46,800 --> 02:39:48,800
.

1951
02:39:48,800 --> 02:39:50,800
.

1952
02:39:50,800 --> 02:39:52,800
.

1953
02:39:52,800 --> 02:39:54,800
.

1954
02:39:54,800 --> 02:39:56,800
.

1955
02:39:56,800 --> 02:39:58,800
.

1956
02:39:58,800 --> 02:40:00,800
.

1957
02:40:00,800 --> 02:40:02,800
.

1958
02:40:02,800 --> 02:40:04,800
.

1959
02:40:04,800 --> 02:40:06,800
.

1960
02:40:06,800 --> 02:40:08,800
.

1961
02:40:08,800 --> 02:40:10,800
.

1962
02:40:10,800 --> 02:40:12,800
.

1963
02:40:12,800 --> 02:40:14,800
.

1964
02:40:14,800 --> 02:40:16,800
.

1965
02:40:16,800 --> 02:40:18,800
.

1966
02:40:18,800 --> 02:40:20,800
.

1967
02:40:20,800 --> 02:40:22,800
.

1968
02:40:22,800 --> 02:40:24,800
.

1969
02:40:24,800 --> 02:40:26,800
.

1970
02:40:26,800 --> 02:40:28,800
.

1971
02:40:28,800 --> 02:40:30,800
.

1972
02:40:30,800 --> 02:40:32,800
.

1973
02:40:32,800 --> 02:40:34,800
.

1974
02:40:34,800 --> 02:40:36,800
.

1975
02:40:36,800 --> 02:40:38,800
.

1976
02:40:38,800 --> 02:40:40,800
.

1977
02:40:40,800 --> 02:40:42,800
.

1978
02:40:42,800 --> 02:40:44,800
.

1979
02:40:44,800 --> 02:40:46,800
.

1980
02:40:46,800 --> 02:40:48,800
.

1981
02:40:48,800 --> 02:40:50,800
.

1982
02:40:50,800 --> 02:40:52,800
.

1983
02:40:52,800 --> 02:40:54,800
.

1984
02:40:54,800 --> 02:40:56,800
.

1985
02:40:56,800 --> 02:40:58,800
.

1986
02:40:58,800 --> 02:41:00,800
.

1987
02:41:00,800 --> 02:41:02,800
.

1988
02:41:02,800 --> 02:41:04,800
.

1989
02:41:04,800 --> 02:41:06,800
.

1990
02:41:06,800 --> 02:41:08,800
.

1991
02:41:08,800 --> 02:41:10,800
.

1992
02:41:10,800 --> 02:41:12,800
.

1993
02:41:12,800 --> 02:41:14,800
.

1994
02:41:14,800 --> 02:41:16,800
.

1995
02:41:16,800 --> 02:41:18,800
.

1996
02:41:18,800 --> 02:41:20,800
.

1997
02:41:20,800 --> 02:41:22,800
.

1998
02:41:22,800 --> 02:41:24,800
.

1999
02:41:24,800 --> 02:41:26,800
.

2000
02:41:26,800 --> 02:41:28,800
.

2001
02:41:28,800 --> 02:41:30,800
.

2002
02:41:30,800 --> 02:41:32,800
.

2003
02:41:32,800 --> 02:41:34,800
.

2004
02:41:34,800 --> 02:41:36,800
.

2005
02:41:36,800 --> 02:41:38,800
.

2006
02:41:38,800 --> 02:41:40,800
.

2007
02:41:40,800 --> 02:41:42,800
.

2008
02:41:42,800 --> 02:41:44,800
.

2009
02:41:44,800 --> 02:41:46,800
.

2010
02:41:46,800 --> 02:41:48,800
.

2011
02:41:48,800 --> 02:41:50,800
.

2012
02:41:50,800 --> 02:41:52,800
.

2013
02:41:52,800 --> 02:41:54,800
.

2014
02:41:54,800 --> 02:41:56,800
.

2015
02:41:56,800 --> 02:41:58,800
.

2016
02:41:58,800 --> 02:42:00,800
.

2017
02:42:00,800 --> 02:42:02,800
.

2018
02:42:02,800 --> 02:42:04,800
.

2019
02:42:04,800 --> 02:42:06,800
.

2020
02:42:06,800 --> 02:42:08,800
.

2021
02:42:08,800 --> 02:42:10,800
.

2022
02:42:10,800 --> 02:42:12,800
.

2023
02:42:12,800 --> 02:42:14,800
.

2024
02:42:14,800 --> 02:42:16,800
.

2025
02:42:16,800 --> 02:42:18,800
.

2026
02:42:18,800 --> 02:42:20,800
.

2027
02:42:20,800 --> 02:42:22,800
.

2028
02:42:22,800 --> 02:42:24,800
.

2029
02:42:24,800 --> 02:42:26,800
.

2030
02:42:26,800 --> 02:42:28,800
.

2031
02:42:28,800 --> 02:42:30,800
.

2032
02:42:30,800 --> 02:42:32,800
.

2033
02:42:32,800 --> 02:42:34,800
.

2034
02:42:34,800 --> 02:42:36,800
.

2035
02:42:36,800 --> 02:42:38,800
.

2036
02:42:38,800 --> 02:42:40,800
.

2037
02:42:40,800 --> 02:42:42,800
.

2038
02:42:42,800 --> 02:42:44,800
.

2039
02:42:44,800 --> 02:42:46,800
.

2040
02:42:46,800 --> 02:42:48,800
.

2041
02:42:48,800 --> 02:42:50,800
.

2042
02:42:50,800 --> 02:42:52,800
.

2043
02:42:52,800 --> 02:42:54,800
.

2044
02:42:54,800 --> 02:42:56,800
.

2045
02:42:56,800 --> 02:42:58,800
.

2046
02:42:58,800 --> 02:43:00,800
.

2047
02:43:00,800 --> 02:43:02,800
.

2048
02:43:02,800 --> 02:43:04,800
.

2049
02:43:04,800 --> 02:43:06,800
.

2050
02:43:06,800 --> 02:43:08,800
.

2051
02:43:08,800 --> 02:43:10,800
.

2052
02:43:10,800 --> 02:43:12,800
.

2053
02:43:12,800 --> 02:43:14,800
.

2054
02:43:14,800 --> 02:43:16,800
.

2055
02:43:16,800 --> 02:43:18,800
.

2056
02:43:18,800 --> 02:43:20,800
.

2057
02:43:20,800 --> 02:43:22,800
.

2058
02:43:22,800 --> 02:43:24,800
.

2059
02:43:24,800 --> 02:43:26,800
.

2060
02:43:26,800 --> 02:43:28,800
.

2061
02:43:28,800 --> 02:43:30,800
.

2062
02:43:30,800 --> 02:43:32,800
.

2063
02:43:32,800 --> 02:43:34,800
.

2064
02:43:34,800 --> 02:43:36,800
.

2065
02:43:36,800 --> 02:43:38,800
.

2066
02:43:38,800 --> 02:43:40,800
.

2067
02:43:40,800 --> 02:43:42,800
.

2068
02:43:42,800 --> 02:43:44,800
.

2069
02:43:44,800 --> 02:43:46,800
.

2070
02:43:46,800 --> 02:43:48,800
.

2071
02:43:48,800 --> 02:43:50,800
.

2072
02:43:50,800 --> 02:43:52,800
.

2073
02:43:52,800 --> 02:43:54,800
.

2074
02:43:54,800 --> 02:43:56,800
.

2075
02:43:56,800 --> 02:43:58,800
.

2076
02:43:58,800 --> 02:44:00,800
.

2077
02:44:00,800 --> 02:44:02,800
.

2078
02:44:02,800 --> 02:44:04,800
.

2079
02:44:04,800 --> 02:44:06,800
.

2080
02:44:06,800 --> 02:44:08,800
.

2081
02:44:08,800 --> 02:44:10,800
.

2082
02:44:10,800 --> 02:44:12,800
.

2083
02:44:12,800 --> 02:44:14,800
.

2084
02:44:14,800 --> 02:44:16,800
.

2085
02:44:16,800 --> 02:44:18,800
.

2086
02:44:18,800 --> 02:44:20,800
.

2087
02:44:20,800 --> 02:44:22,800
.

2088
02:44:22,800 --> 02:44:24,800
.

2089
02:44:24,800 --> 02:44:26,800
.

2090
02:44:26,800 --> 02:44:28,800
.

2091
02:44:28,800 --> 02:44:30,800
.

2092
02:44:30,800 --> 02:44:32,800
.

2093
02:44:32,800 --> 02:44:34,800
.

2094
02:44:34,800 --> 02:44:36,800
.

2095
02:44:36,800 --> 02:44:38,800
.

2096
02:44:38,800 --> 02:44:40,800
.

2097
02:44:40,800 --> 02:44:42,800
.

2098
02:44:42,800 --> 02:44:44,800
.

2099
02:44:44,800 --> 02:44:46,800
.

2100
02:44:46,800 --> 02:44:48,800
.

2101
02:44:48,800 --> 02:44:50,800
.

2102
02:44:50,800 --> 02:44:52,800
.

2103
02:44:52,800 --> 02:44:54,800
.

2104
02:44:54,800 --> 02:44:56,800
.

2105
02:44:56,800 --> 02:44:58,800
.

2106
02:44:58,800 --> 02:45:00,800
.

2107
02:45:00,800 --> 02:45:02,800
.

2108
02:45:02,800 --> 02:45:04,800
.

2109
02:45:04,800 --> 02:45:06,800
.

2110
02:45:06,800 --> 02:45:08,800
.

2111
02:45:08,800 --> 02:45:10,800
.

2112
02:45:10,800 --> 02:45:12,800
.

2113
02:45:12,800 --> 02:45:14,800
.

2114
02:45:14,800 --> 02:45:16,800
.

2115
02:45:16,800 --> 02:45:18,800
.

2116
02:45:18,800 --> 02:45:20,800
.

2117
02:45:20,800 --> 02:45:22,800
.

2118
02:45:22,800 --> 02:45:24,800
.

2119
02:45:24,800 --> 02:45:26,800
.

2120
02:45:26,800 --> 02:45:28,800
.

2121
02:45:28,800 --> 02:45:30,800
.

2122
02:45:30,800 --> 02:45:32,800
.

2123
02:45:32,800 --> 02:45:34,800
.

2124
02:45:34,800 --> 02:45:36,800
.

2125
02:45:36,800 --> 02:45:38,800
.

2126
02:45:38,800 --> 02:45:40,800
.

2127
02:45:40,800 --> 02:45:42,800
.

2128
02:45:42,800 --> 02:45:44,800
.

2129
02:45:44,800 --> 02:45:46,800
.

2130
02:45:46,800 --> 02:45:48,800
.

2131
02:45:48,800 --> 02:45:50,800
.

2132
02:45:50,800 --> 02:45:52,800
.

2133
02:45:52,800 --> 02:45:54,800
.

2134
02:45:54,800 --> 02:45:56,800
.

2135
02:45:56,800 --> 02:45:58,800
.

2136
02:45:58,800 --> 02:46:00,800
.

2137
02:46:00,800 --> 02:46:02,800
.

2138
02:46:02,800 --> 02:46:04,800
.

2139
02:46:04,800 --> 02:46:06,800
.

2140
02:46:06,800 --> 02:46:08,800
.

2141
02:46:08,800 --> 02:46:10,800
.

2142
02:46:10,800 --> 02:46:12,800
.

2143
02:46:12,800 --> 02:46:14,800
.

2144
02:46:14,800 --> 02:46:16,800
.

2145
02:46:16,800 --> 02:46:18,800
.

2146
02:46:18,800 --> 02:46:20,800
.

2147
02:46:20,800 --> 02:46:22,800
.

2148
02:46:22,800 --> 02:46:24,800
.

2149
02:46:24,800 --> 02:46:26,800
.

2150
02:46:26,800 --> 02:46:28,800
.

2151
02:46:28,800 --> 02:46:30,800
.

2152
02:46:30,800 --> 02:46:32,800
.

2153
02:46:32,800 --> 02:46:34,800
.

2154
02:46:34,800 --> 02:46:36,800
.

2155
02:46:36,800 --> 02:46:38,800
.

2156
02:46:38,800 --> 02:46:40,800
.

2157
02:46:40,800 --> 02:46:42,800
.

2158
02:46:42,800 --> 02:46:44,800
.

2159
02:46:44,800 --> 02:46:46,800
.

2160
02:46:46,800 --> 02:46:48,800
.

2161
02:46:48,800 --> 02:46:50,800
.

2162
02:46:50,800 --> 02:46:52,800
.

2163
02:46:52,800 --> 02:46:54,800
.

2164
02:46:54,800 --> 02:46:56,800
.

2165
02:46:56,800 --> 02:46:58,800
.

2166
02:46:58,800 --> 02:47:00,800
.

2167
02:47:00,800 --> 02:47:02,800
.

2168
02:47:02,800 --> 02:47:04,800
.

2169
02:47:04,800 --> 02:47:06,800
.

2170
02:47:06,800 --> 02:47:08,800
.

2171
02:47:08,800 --> 02:47:10,800
.

2172
02:47:10,800 --> 02:47:12,800
.

2173
02:47:12,800 --> 02:47:14,800
.

2174
02:47:14,800 --> 02:47:16,800
.

2175
02:47:16,800 --> 02:47:18,800
.

2176
02:47:18,800 --> 02:47:20,800
.

2177
02:47:20,800 --> 02:47:22,800
.

2178
02:47:22,800 --> 02:47:24,800
.

2179
02:47:24,800 --> 02:47:26,800
.

2180
02:47:26,800 --> 02:47:28,800
.

2181
02:47:28,800 --> 02:47:30,800
.

2182
02:47:30,800 --> 02:47:32,800
.

2183
02:47:32,800 --> 02:47:34,800
.

2184
02:47:34,800 --> 02:47:36,800
.

2185
02:47:36,800 --> 02:47:38,800
.

2186
02:47:38,800 --> 02:47:40,800
.

2187
02:47:40,800 --> 02:47:42,800
.

2188
02:47:42,800 --> 02:47:44,800
.

2189
02:47:44,800 --> 02:47:46,800
.

2190
02:47:46,800 --> 02:47:48,800
.

2191
02:47:48,800 --> 02:47:50,800
.

2192
02:47:50,800 --> 02:47:52,800
.

2193
02:47:52,800 --> 02:47:54,800
.

2194
02:47:54,800 --> 02:47:56,800
.

2195
02:47:56,800 --> 02:47:58,800
.

2196
02:47:58,800 --> 02:48:00,800
.

2197
02:48:00,800 --> 02:48:02,800
.

2198
02:48:02,800 --> 02:48:04,800
.

2199
02:48:04,800 --> 02:48:06,800
.

2200
02:48:06,800 --> 02:48:08,800
.

2201
02:48:08,800 --> 02:48:10,800
.

2202
02:48:10,800 --> 02:48:12,800
.

2203
02:48:12,800 --> 02:48:14,800
.

2204
02:48:14,800 --> 02:48:16,800
.

2205
02:48:16,800 --> 02:48:18,800
.

2206
02:48:18,800 --> 02:48:20,800
.

2207
02:48:20,800 --> 02:48:22,800
.

2208
02:48:22,800 --> 02:48:24,800
.

2209
02:48:24,800 --> 02:48:26,800
.

2210
02:48:26,800 --> 02:48:28,800
.

2211
02:48:28,800 --> 02:48:30,800
.

2212
02:48:30,800 --> 02:48:32,800
.

2213
02:48:32,800 --> 02:48:34,800
.

2214
02:48:34,800 --> 02:48:36,800
.

2215
02:48:36,800 --> 02:48:38,800
.

2216
02:48:38,800 --> 02:48:40,800
.

2217
02:48:40,800 --> 02:48:42,800
.

2218
02:48:42,800 --> 02:48:44,800
.

2219
02:48:44,800 --> 02:48:46,800
.

2220
02:48:46,800 --> 02:48:48,800
.

2221
02:48:48,800 --> 02:48:50,800
.

2222
02:48:50,800 --> 02:48:52,800
.

2223
02:48:52,800 --> 02:48:54,800
.

2224
02:48:54,800 --> 02:48:56,800
.

2225
02:48:56,800 --> 02:48:58,800
.

2226
02:48:58,800 --> 02:49:00,800
.

2227
02:49:00,800 --> 02:49:02,800
.

2228
02:49:02,800 --> 02:49:04,800
.

2229
02:49:04,800 --> 02:49:06,800
.

2230
02:49:06,800 --> 02:49:08,800
.

2231
02:49:08,800 --> 02:49:10,800
.

2232
02:49:10,800 --> 02:49:12,800
.

2233
02:49:12,800 --> 02:49:14,800
.

2234
02:49:14,800 --> 02:49:16,800
.

2235
02:49:16,800 --> 02:49:18,800
.

2236
02:49:18,800 --> 02:49:20,800
.

2237
02:49:20,800 --> 02:49:22,800
.

2238
02:49:22,800 --> 02:49:24,800
.

2239
02:49:24,800 --> 02:49:26,800
.

2240
02:49:26,800 --> 02:49:28,800
.

2241
02:49:28,800 --> 02:49:30,800
.

2242
02:49:30,800 --> 02:49:32,800
.

2243
02:49:32,800 --> 02:49:34,800
.

2244
02:49:34,800 --> 02:49:36,800
.

2245
02:49:36,800 --> 02:49:38,800
.

2246
02:49:38,800 --> 02:49:40,800
.

2247
02:49:40,800 --> 02:49:42,800
.

2248
02:49:42,800 --> 02:49:44,800
.

2249
02:49:44,800 --> 02:49:46,800
.

2250
02:49:46,800 --> 02:49:48,800
.

2251
02:49:48,800 --> 02:49:50,800
.

2252
02:49:50,800 --> 02:49:52,800
.

2253
02:49:52,800 --> 02:49:54,800
.

2254
02:49:54,800 --> 02:49:56,800
.

2255
02:49:56,800 --> 02:49:58,800
.

2256
02:49:58,800 --> 02:50:00,800
.

2257
02:50:00,800 --> 02:50:02,800
.

2258
02:50:02,800 --> 02:50:04,800
.

2259
02:50:04,800 --> 02:50:06,800
.

2260
02:50:06,800 --> 02:50:08,800
.

2261
02:50:08,800 --> 02:50:10,800
.

2262
02:50:10,800 --> 02:50:12,800
.

2263
02:50:12,800 --> 02:50:14,800
.

2264
02:50:14,800 --> 02:50:16,800
.

2265
02:50:16,800 --> 02:50:18,800
.

2266
02:50:18,800 --> 02:50:20,800
.

2267
02:50:20,800 --> 02:50:22,800
.

2268
02:50:22,800 --> 02:50:24,800
.

2269
02:50:24,800 --> 02:50:26,800
.

2270
02:50:26,800 --> 02:50:28,800
.

2271
02:50:28,800 --> 02:50:30,800
.

2272
02:50:30,800 --> 02:50:32,800
.

2273
02:50:32,800 --> 02:50:34,800
.

2274
02:50:34,800 --> 02:50:36,800
.

2275
02:50:36,800 --> 02:50:38,800
.

2276
02:50:38,800 --> 02:50:40,800
.

2277
02:50:40,800 --> 02:50:42,800
.

2278
02:50:42,800 --> 02:50:44,800
.

2279
02:50:44,800 --> 02:50:46,800
.

2280
02:50:46,800 --> 02:50:48,800
.

2281
02:50:48,800 --> 02:50:50,800
.

2282
02:50:50,800 --> 02:50:52,800
.

2283
02:50:52,800 --> 02:50:54,800
.

2284
02:50:54,800 --> 02:50:56,800
.

2285
02:50:56,800 --> 02:50:58,800
.

2286
02:50:58,800 --> 02:51:00,800
.

2287
02:51:00,800 --> 02:51:02,800
.

2288
02:51:02,800 --> 02:51:04,800
.

2289
02:51:04,800 --> 02:51:06,800
.

2290
02:51:06,800 --> 02:51:08,800
.

2291
02:51:08,800 --> 02:51:10,800
.

2292
02:51:10,800 --> 02:51:12,800
.

2293
02:51:12,800 --> 02:51:14,800
.

2294
02:51:14,800 --> 02:51:16,800
.

2295
02:51:16,800 --> 02:51:18,800
.

2296
02:51:18,800 --> 02:51:20,800
.

2297
02:51:20,800 --> 02:51:22,800
.

2298
02:51:22,800 --> 02:51:24,800
.

2299
02:51:24,800 --> 02:51:26,800
.

2300
02:51:26,800 --> 02:51:28,800
.

2301
02:51:28,800 --> 02:51:30,800
.

2302
02:51:30,800 --> 02:51:32,800
.

2303
02:51:32,800 --> 02:51:34,800
.

2304
02:51:34,800 --> 02:51:36,800
.

2305
02:51:36,800 --> 02:51:38,800
.

2306
02:51:38,800 --> 02:51:40,800
.

2307
02:51:40,800 --> 02:51:42,800
.

2308
02:51:42,800 --> 02:51:44,800
.

2309
02:51:44,800 --> 02:51:46,800
.

2310
02:51:46,800 --> 02:51:48,800
.

2311
02:51:48,800 --> 02:51:50,800
.

2312
02:51:50,800 --> 02:51:52,800
.

2313
02:51:52,800 --> 02:51:54,800
.

2314
02:51:54,800 --> 02:51:56,800
.

2315
02:51:56,800 --> 02:51:58,800
.

2316
02:51:58,800 --> 02:52:00,800
.

2317
02:52:00,800 --> 02:52:02,800
.

2318
02:52:02,800 --> 02:52:04,800
.

2319
02:52:04,800 --> 02:52:06,800
.

2320
02:52:06,800 --> 02:52:08,800
.

2321
02:52:08,800 --> 02:52:10,800
.

2322
02:52:10,800 --> 02:52:12,800
.

2323
02:52:12,800 --> 02:52:14,800
.

2324
02:52:14,800 --> 02:52:16,800
.

2325
02:52:16,800 --> 02:52:18,800
.

2326
02:52:18,800 --> 02:52:20,800
.

2327
02:52:20,800 --> 02:52:22,800
.

2328
02:52:22,800 --> 02:52:24,800
.

2329
02:52:24,800 --> 02:52:26,800
.

2330
02:52:26,800 --> 02:52:28,800
.

2331
02:52:28,800 --> 02:52:30,800
.

2332
02:52:30,800 --> 02:52:32,800
.

2333
02:52:32,800 --> 02:52:34,800
.

2334
02:52:34,800 --> 02:52:36,800
.

2335
02:52:36,800 --> 02:52:38,800
.

2336
02:52:38,800 --> 02:52:40,800
.

2337
02:52:40,800 --> 02:52:42,800
.

2338
02:52:42,800 --> 02:52:44,800
.

2339
02:52:44,800 --> 02:52:46,800
.

2340
02:52:46,800 --> 02:52:48,800
.

2341
02:52:48,800 --> 02:52:50,800
.

2342
02:52:50,800 --> 02:52:52,800
.

2343
02:52:52,800 --> 02:52:54,800
.

2344
02:52:54,800 --> 02:52:56,800
.

2345
02:52:56,800 --> 02:52:58,800
.

2346
02:52:58,800 --> 02:53:00,800
.

2347
02:53:00,800 --> 02:53:02,800
.

2348
02:53:02,800 --> 02:53:04,800
.

2349
02:53:04,800 --> 02:53:06,800
.

2350
02:53:06,800 --> 02:53:08,800
.

2351
02:53:08,800 --> 02:53:10,800
.

2352
02:53:10,800 --> 02:53:12,800
.

2353
02:53:12,800 --> 02:53:14,800
.

2354
02:53:14,800 --> 02:53:16,800
.

2355
02:53:16,800 --> 02:53:18,800
.

2356
02:53:18,800 --> 02:53:20,800
.

2357
02:53:20,800 --> 02:53:22,800
.

2358
02:53:22,800 --> 02:53:24,800
.

2359
02:53:24,800 --> 02:53:26,800
.

2360
02:53:26,800 --> 02:53:28,800
.

2361
02:53:28,800 --> 02:53:30,800
.

2362
02:53:30,800 --> 02:53:32,800
.

2363
02:53:32,800 --> 02:53:34,800
.

2364
02:53:34,800 --> 02:53:36,800
.

2365
02:53:36,800 --> 02:53:38,800
.

2366
02:53:38,800 --> 02:53:40,800
.

2367
02:53:40,800 --> 02:53:42,800
.

2368
02:53:42,800 --> 02:53:44,800
.

2369
02:53:44,800 --> 02:53:46,800
.

2370
02:53:46,800 --> 02:53:48,800
.

2371
02:53:48,800 --> 02:53:50,800
.

2372
02:53:50,800 --> 02:53:52,800
.

2373
02:53:52,800 --> 02:53:54,800
.

2374
02:53:54,800 --> 02:53:56,800
.

2375
02:53:56,800 --> 02:53:58,800
.

2376
02:53:58,800 --> 02:54:00,800
.

2377
02:54:00,800 --> 02:54:02,800
.

2378
02:54:02,800 --> 02:54:04,800
.

2379
02:54:04,800 --> 02:54:06,800
.

2380
02:54:06,800 --> 02:54:08,800
.

2381
02:54:08,800 --> 02:54:10,800
.

2382
02:54:10,800 --> 02:54:12,800
.

2383
02:54:12,800 --> 02:54:14,800
.

2384
02:54:14,800 --> 02:54:16,800
.

2385
02:54:16,800 --> 02:54:18,800
.

2386
02:54:18,800 --> 02:54:20,800
.

2387
02:54:20,800 --> 02:54:22,800
.

2388
02:54:22,800 --> 02:54:24,800
.

2389
02:54:24,800 --> 02:54:26,800
.

2390
02:54:26,800 --> 02:54:28,800
.

2391
02:54:28,800 --> 02:54:30,800
.

2392
02:54:30,800 --> 02:54:32,800
.

2393
02:54:32,800 --> 02:54:34,800
.

2394
02:54:34,800 --> 02:54:36,800
.

2395
02:54:36,800 --> 02:54:38,800
.

2396
02:54:38,800 --> 02:54:40,800
.

2397
02:54:40,800 --> 02:54:42,800
.

2398
02:54:42,800 --> 02:54:44,800
.

2399
02:54:44,800 --> 02:54:46,800
.

2400
02:54:46,800 --> 02:54:48,800
.

2401
02:54:48,800 --> 02:54:50,800
.

2402
02:54:50,800 --> 02:54:52,800
.

2403
02:54:52,800 --> 02:54:54,800
.

2404
02:54:54,800 --> 02:54:56,800
.

2405
02:54:56,800 --> 02:54:58,800
.

2406
02:54:58,800 --> 02:55:00,800
.

2407
02:55:00,800 --> 02:55:02,800
.

2408
02:55:02,800 --> 02:55:04,800
.

2409
02:55:04,800 --> 02:55:06,800
.

2410
02:55:06,800 --> 02:55:08,800
.

2411
02:55:08,800 --> 02:55:10,800
.

2412
02:55:10,800 --> 02:55:12,800
.

2413
02:55:12,800 --> 02:55:14,800
.

2414
02:55:14,800 --> 02:55:16,800
.

2415
02:55:16,800 --> 02:55:18,800
.

2416
02:55:18,800 --> 02:55:20,800
.

2417
02:55:20,800 --> 02:55:22,800
.

2418
02:55:22,800 --> 02:55:24,800
.

2419
02:55:24,800 --> 02:55:26,800
.

2420
02:55:26,800 --> 02:55:28,800
.

2421
02:55:28,800 --> 02:55:30,800
.

2422
02:55:30,800 --> 02:55:32,800
.

2423
02:55:32,800 --> 02:55:34,800
.

2424
02:55:34,800 --> 02:55:36,800
.

2425
02:55:36,800 --> 02:55:38,800
.

2426
02:55:38,800 --> 02:55:40,800
.

2427
02:55:40,800 --> 02:55:42,800
.

2428
02:55:42,800 --> 02:55:44,800
.

2429
02:55:44,800 --> 02:55:46,800
.

2430
02:55:46,800 --> 02:55:48,800
.

2431
02:55:48,800 --> 02:55:50,800
.

2432
02:55:50,800 --> 02:55:52,800
.

2433
02:55:52,800 --> 02:55:54,800
.

2434
02:55:54,800 --> 02:55:56,800
.

2435
02:55:56,800 --> 02:55:58,800
.

2436
02:55:58,800 --> 02:56:00,800
.

2437
02:56:00,800 --> 02:56:02,800
.

2438
02:56:02,800 --> 02:56:04,800
.

2439
02:56:04,800 --> 02:56:06,800
.

2440
02:56:06,800 --> 02:56:08,800
.

2441
02:56:08,800 --> 02:56:10,800
.

2442
02:56:10,800 --> 02:56:12,800
.

2443
02:56:12,800 --> 02:56:14,800
.

2444
02:56:14,800 --> 02:56:16,800
.

2445
02:56:16,800 --> 02:56:18,800
.

2446
02:56:18,800 --> 02:56:20,800
.

2447
02:56:20,800 --> 02:56:22,800
.

2448
02:56:22,800 --> 02:56:24,800
.

2449
02:56:24,800 --> 02:56:26,800
.

2450
02:56:26,800 --> 02:56:28,800
.

2451
02:56:28,800 --> 02:56:30,800
.

2452
02:56:30,800 --> 02:56:32,800
.

2453
02:56:32,800 --> 02:56:34,800
.

2454
02:56:34,800 --> 02:56:36,800
.

2455
02:56:36,800 --> 02:56:38,800
.

2456
02:56:38,800 --> 02:56:40,800
.

2457
02:56:40,800 --> 02:56:42,800
.

2458
02:56:42,800 --> 02:56:44,800
.

2459
02:56:44,800 --> 02:56:46,800
.

2460
02:56:46,800 --> 02:56:48,800
.

2461
02:56:48,800 --> 02:56:50,800
.

2462
02:56:50,800 --> 02:56:52,800
.

2463
02:56:52,800 --> 02:56:54,800
.

2464
02:56:54,800 --> 02:56:56,800
.

2465
02:56:56,800 --> 02:56:58,800
.

2466
02:56:58,800 --> 02:57:00,800
.

2467
02:57:00,800 --> 02:57:02,800
.

2468
02:57:02,800 --> 02:57:04,800
.

2469
02:57:04,800 --> 02:57:06,800
.

2470
02:57:06,800 --> 02:57:08,800
.

2471
02:57:08,800 --> 02:57:10,800
.

2472
02:57:10,800 --> 02:57:12,800
.

2473
02:57:12,800 --> 02:57:14,800
.

2474
02:57:14,800 --> 02:57:16,800
.

2475
02:57:16,800 --> 02:57:18,800
.

2476
02:57:18,800 --> 02:57:20,800
.

2477
02:57:20,800 --> 02:57:22,800
.

2478
02:57:22,800 --> 02:57:24,800
.

2479
02:57:24,800 --> 02:57:26,800
.

2480
02:57:26,800 --> 02:57:28,800
.

2481
02:57:28,800 --> 02:57:30,800
.

2482
02:57:30,800 --> 02:57:32,800
.

2483
02:57:32,800 --> 02:57:34,800
.

2484
02:57:34,800 --> 02:57:36,800
.

2485
02:57:36,800 --> 02:57:38,800
.

2486
02:57:38,800 --> 02:57:40,800
.

2487
02:57:40,800 --> 02:57:42,800
.

2488
02:57:42,800 --> 02:57:44,800
.

2489
02:57:44,800 --> 02:57:46,800
.

2490
02:57:46,800 --> 02:57:48,800
.

2491
02:57:48,800 --> 02:57:50,800
.

2492
02:57:50,800 --> 02:57:52,800
.

2493
02:57:52,800 --> 02:57:54,800
.

2494
02:57:54,800 --> 02:57:56,800
.

2495
02:57:56,800 --> 02:57:58,800
.

2496
02:57:58,800 --> 02:58:00,800
.

2497
02:58:00,800 --> 02:58:02,800
.

2498
02:58:02,800 --> 02:58:04,800
.

2499
02:58:04,800 --> 02:58:06,800
.

2500
02:58:06,800 --> 02:58:08,800
.

2501
02:58:08,800 --> 02:58:10,800
.

2502
02:58:10,800 --> 02:58:12,800
.

2503
02:58:12,800 --> 02:58:14,800
.

2504
02:58:14,800 --> 02:58:16,800
.

2505
02:58:16,800 --> 02:58:18,800
.

2506
02:58:18,800 --> 02:58:20,800
.

2507
02:58:20,800 --> 02:58:22,800
.

2508
02:58:22,800 --> 02:58:24,800
.

2509
02:58:24,800 --> 02:58:26,800
.

2510
02:58:26,800 --> 02:58:28,800
.

2511
02:58:28,800 --> 02:58:30,800
.

2512
02:58:30,800 --> 02:58:32,800
.

2513
02:58:32,800 --> 02:58:34,800
.

2514
02:58:34,800 --> 02:58:36,800
.

2515
02:58:36,800 --> 02:58:38,800
.

2516
02:58:38,800 --> 02:58:40,800
.

2517
02:58:40,800 --> 02:58:42,800
.

2518
02:58:42,800 --> 02:58:44,800
.

2519
02:58:44,800 --> 02:58:46,800
.

2520
02:58:46,800 --> 02:58:48,800
.

2521
02:58:48,800 --> 02:58:50,800
.

2522
02:58:50,800 --> 02:58:52,800
.

2523
02:58:52,800 --> 02:58:54,800
.

2524
02:58:54,800 --> 02:58:56,800
.

2525
02:58:56,800 --> 02:58:58,800
.

2526
02:58:58,800 --> 02:59:00,800
.

2527
02:59:00,800 --> 02:59:02,800
.

2528
02:59:02,800 --> 02:59:04,800
.

2529
02:59:04,800 --> 02:59:06,800
.

2530
02:59:06,800 --> 02:59:08,800
.

2531
02:59:08,800 --> 02:59:10,800
.

2532
02:59:10,800 --> 02:59:12,800
.

2533
02:59:12,800 --> 02:59:14,800
.

2534
02:59:14,800 --> 02:59:16,800
.

2535
02:59:16,800 --> 02:59:18,800
.

2536
02:59:18,800 --> 02:59:20,800
.

2537
02:59:20,800 --> 02:59:22,800
.

2538
02:59:22,800 --> 02:59:24,800
.

2539
02:59:24,800 --> 02:59:26,800
.

2540
02:59:26,800 --> 02:59:28,800
.

2541
02:59:28,800 --> 02:59:30,800
.

2542
02:59:30,800 --> 02:59:32,800
.

2543
02:59:32,800 --> 02:59:34,800
.

2544
02:59:34,800 --> 02:59:36,800
.

2545
02:59:36,800 --> 02:59:38,800
.

2546
02:59:38,800 --> 02:59:40,800
.

2547
02:59:40,800 --> 02:59:42,800
.

2548
02:59:42,800 --> 02:59:44,800
.

2549
02:59:44,800 --> 02:59:46,800
.

2550
02:59:46,800 --> 02:59:48,800
.

2551
02:59:48,800 --> 02:59:50,800
.

2552
02:59:50,800 --> 02:59:52,800
.

2553
02:59:52,800 --> 02:59:54,800
.

2554
02:59:54,800 --> 02:59:56,800
.

2555
02:59:56,800 --> 02:59:58,800
.

2556
02:59:58,800 --> 03:00:00,800
.

2557
03:00:00,800 --> 03:00:02,800
.

2558
03:00:02,800 --> 03:00:04,800
.

2559
03:00:04,800 --> 03:00:06,800
.

2560
03:00:06,800 --> 03:00:08,800
.

2561
03:00:08,800 --> 03:00:10,800
.

2562
03:00:10,800 --> 03:00:12,800
.

2563
03:00:12,800 --> 03:00:14,800
.

2564
03:00:14,800 --> 03:00:16,800
.

2565
03:00:16,800 --> 03:00:18,800
.

2566
03:00:18,800 --> 03:00:20,800
.

2567
03:00:20,800 --> 03:00:22,800
.

2568
03:00:22,800 --> 03:00:24,800
.

2569
03:00:24,800 --> 03:00:26,800
.

2570
03:00:26,800 --> 03:00:28,800
.

2571
03:00:28,800 --> 03:00:30,800
.

2572
03:00:30,800 --> 03:00:32,800
.

2573
03:00:32,800 --> 03:00:34,800
.

2574
03:00:34,800 --> 03:00:36,800
.

2575
03:00:36,800 --> 03:00:38,800
.

2576
03:00:38,800 --> 03:00:40,800
.

2577
03:00:40,800 --> 03:00:42,800
.

2578
03:00:42,800 --> 03:00:44,800
.

2579
03:00:44,800 --> 03:00:46,800
.

2580
03:00:46,800 --> 03:00:48,800
.

2581
03:00:48,800 --> 03:00:50,800
.

2582
03:00:50,800 --> 03:00:52,800
.

2583
03:00:52,800 --> 03:00:54,800
.

2584
03:00:54,800 --> 03:00:56,800
.

2585
03:00:56,800 --> 03:00:58,800
.

2586
03:00:58,800 --> 03:01:00,800
.

2587
03:01:00,800 --> 03:01:02,800
.

2588
03:01:02,800 --> 03:01:04,800
.

2589
03:01:04,800 --> 03:01:06,800
.

2590
03:01:06,800 --> 03:01:08,800
.

2591
03:01:08,800 --> 03:01:10,800
.

2592
03:01:10,800 --> 03:01:12,800
.

2593
03:01:12,800 --> 03:01:14,800
.

2594
03:01:14,800 --> 03:01:16,800
.

2595
03:01:16,800 --> 03:01:18,800
.

2596
03:01:18,800 --> 03:01:20,800
.

2597
03:01:20,800 --> 03:01:22,800
.

2598
03:01:22,800 --> 03:01:24,800
.

2599
03:01:24,800 --> 03:01:26,800
.

2600
03:01:26,800 --> 03:01:28,800
.

2601
03:01:28,800 --> 03:01:30,800
.

2602
03:01:30,800 --> 03:01:32,800
.

2603
03:01:32,800 --> 03:01:34,800
.

2604
03:01:34,800 --> 03:01:36,800
.

2605
03:01:36,800 --> 03:01:38,800
.

2606
03:01:38,800 --> 03:01:40,800
.

2607
03:01:40,800 --> 03:01:42,800
.

2608
03:01:42,800 --> 03:01:44,800
.

2609
03:01:44,800 --> 03:01:46,800
.

2610
03:01:46,800 --> 03:01:48,800
.

2611
03:01:48,800 --> 03:01:50,800
.

2612
03:01:50,800 --> 03:01:52,800
.

2613
03:01:52,800 --> 03:01:54,800
.

2614
03:01:54,800 --> 03:01:56,800
.

2615
03:01:56,800 --> 03:01:58,800
.

2616
03:01:58,800 --> 03:02:00,800
.

2617
03:02:00,800 --> 03:02:02,800
.

2618
03:02:02,800 --> 03:02:04,800
.

2619
03:02:04,800 --> 03:02:06,800
.

2620
03:02:06,800 --> 03:02:08,800
.

2621
03:02:08,800 --> 03:02:10,800
.

2622
03:02:10,800 --> 03:02:12,800
.

2623
03:02:12,800 --> 03:02:14,800
.

2624
03:02:14,800 --> 03:02:16,800
.

2625
03:02:16,800 --> 03:02:18,800
.

2626
03:02:18,800 --> 03:02:20,800
.

2627
03:02:20,800 --> 03:02:22,800
.

2628
03:02:22,800 --> 03:02:24,800
.

2629
03:02:24,800 --> 03:02:26,800
.

2630
03:02:26,800 --> 03:02:28,800
.

2631
03:02:28,800 --> 03:02:30,800
.

2632
03:02:30,800 --> 03:02:32,800
.

2633
03:02:32,800 --> 03:02:34,800
.

2634
03:02:34,800 --> 03:02:36,800
.

2635
03:02:36,800 --> 03:02:38,800
.

2636
03:02:38,800 --> 03:02:40,800
.

2637
03:02:40,800 --> 03:02:42,800
.

2638
03:02:42,800 --> 03:02:44,800
.

2639
03:02:44,800 --> 03:02:46,800
.

2640
03:02:46,800 --> 03:02:48,800
.

2641
03:02:48,800 --> 03:02:50,800
.

2642
03:02:50,800 --> 03:02:52,800
.

2643
03:02:52,800 --> 03:02:54,800
.

2644
03:02:54,800 --> 03:02:56,800
.

2645
03:02:56,800 --> 03:02:58,800
.

2646
03:02:58,800 --> 03:03:00,800
.

2647
03:03:00,800 --> 03:03:02,800
.

2648
03:03:02,800 --> 03:03:04,800
.

2649
03:03:04,800 --> 03:03:06,800
.

2650
03:03:06,800 --> 03:03:08,800
.

2651
03:03:08,800 --> 03:03:10,800
.

2652
03:03:10,800 --> 03:03:12,800
.

2653
03:03:12,800 --> 03:03:14,800
.

2654
03:03:14,800 --> 03:03:16,800
.

2655
03:03:16,800 --> 03:03:18,800
.

2656
03:03:18,800 --> 03:03:20,800
.

2657
03:03:20,800 --> 03:03:22,800
.

2658
03:03:22,800 --> 03:03:24,800
.

2659
03:03:24,800 --> 03:03:26,800
.

2660
03:03:26,800 --> 03:03:28,800
.

2661
03:03:28,800 --> 03:03:30,800
.

2662
03:03:30,800 --> 03:03:32,800
.

2663
03:03:32,800 --> 03:03:34,800
.

2664
03:03:34,800 --> 03:03:36,800
.

2665
03:03:36,800 --> 03:03:38,800
.

2666
03:03:38,800 --> 03:03:40,800
.

2667
03:03:40,800 --> 03:03:42,800
.

2668
03:03:42,800 --> 03:03:44,800
.

2669
03:03:44,800 --> 03:03:46,800
.

2670
03:03:46,800 --> 03:03:48,800
.

2671
03:03:48,800 --> 03:03:50,800
.

2672
03:03:50,800 --> 03:03:52,800
.

2673
03:03:52,800 --> 03:03:54,800
.

2674
03:03:54,800 --> 03:03:56,800
.

2675
03:03:56,800 --> 03:03:58,800
.

2676
03:03:58,800 --> 03:04:00,800
.

2677
03:04:00,800 --> 03:04:02,800
.

2678
03:04:02,800 --> 03:04:04,800
.

2679
03:04:04,800 --> 03:04:06,800
.

2680
03:04:06,800 --> 03:04:08,800
.

2681
03:04:08,800 --> 03:04:10,800
.

2682
03:04:10,800 --> 03:04:12,800
.

2683
03:04:12,800 --> 03:04:14,800
.

2684
03:04:14,800 --> 03:04:16,800
.

2685
03:04:16,800 --> 03:04:18,800
.

2686
03:04:18,800 --> 03:04:20,800
.

2687
03:04:20,800 --> 03:04:22,800
.

2688
03:04:22,800 --> 03:04:24,800
.

2689
03:04:24,800 --> 03:04:26,800
.

2690
03:04:26,800 --> 03:04:28,800
.

2691
03:04:28,800 --> 03:04:30,800
.

2692
03:04:30,800 --> 03:04:32,800
.

2693
03:04:32,800 --> 03:04:34,800
.

2694
03:04:34,800 --> 03:04:36,800
.

2695
03:04:36,800 --> 03:04:38,800
.

2696
03:04:38,800 --> 03:04:40,800
.

2697
03:04:40,800 --> 03:04:42,800
.

2698
03:04:42,800 --> 03:04:44,800
.

2699
03:04:44,800 --> 03:04:46,800
.

2700
03:04:46,800 --> 03:04:48,800
.

2701
03:04:48,800 --> 03:04:50,800
.

2702
03:04:50,800 --> 03:04:52,800
.

2703
03:04:52,800 --> 03:04:54,800
.

2704
03:04:54,800 --> 03:04:56,800
.

2705
03:04:56,800 --> 03:04:58,800
.

2706
03:04:58,800 --> 03:05:00,800
.

2707
03:05:00,800 --> 03:05:02,800
.

2708
03:05:02,800 --> 03:05:04,800
.

2709
03:05:04,800 --> 03:05:06,800
.

2710
03:05:06,800 --> 03:05:08,800
.

2711
03:05:08,800 --> 03:05:10,800
.

2712
03:05:10,800 --> 03:05:12,800
.

2713
03:05:12,800 --> 03:05:14,800
.

2714
03:05:14,800 --> 03:05:16,800
.

2715
03:05:16,800 --> 03:05:18,800
.

2716
03:05:18,800 --> 03:05:20,800
.

2717
03:05:20,800 --> 03:05:22,800
.

2718
03:05:22,800 --> 03:05:24,800
.

2719
03:05:24,800 --> 03:05:26,800
.

2720
03:05:26,800 --> 03:05:28,800
.

2721
03:05:28,800 --> 03:05:30,800
.

2722
03:05:30,800 --> 03:05:32,800
.

2723
03:05:32,800 --> 03:05:34,800
.

2724
03:05:34,800 --> 03:05:36,800
.

2725
03:05:36,800 --> 03:05:38,800
.

2726
03:05:38,800 --> 03:05:40,800
.

2727
03:05:40,800 --> 03:05:42,800
.

2728
03:05:42,800 --> 03:05:44,800
.

2729
03:05:44,800 --> 03:05:46,800
.

2730
03:05:46,800 --> 03:05:48,800
.

2731
03:05:48,800 --> 03:05:50,800
.

2732
03:05:50,800 --> 03:05:52,800
.

2733
03:05:52,800 --> 03:05:54,800
.

2734
03:05:54,800 --> 03:05:56,800
.

2735
03:05:56,800 --> 03:05:58,800
.

2736
03:05:58,800 --> 03:06:00,800
.

2737
03:06:00,800 --> 03:06:02,800
.

2738
03:06:02,800 --> 03:06:04,800
.

2739
03:06:04,800 --> 03:06:06,800
.

2740
03:06:06,800 --> 03:06:08,800
.

2741
03:06:08,800 --> 03:06:10,800
.

2742
03:06:10,800 --> 03:06:12,800
.

2743
03:06:12,800 --> 03:06:14,800
.

2744
03:06:14,800 --> 03:06:16,800
.

2745
03:06:16,800 --> 03:06:18,800
.

2746
03:06:18,800 --> 03:06:20,800
.

2747
03:06:20,800 --> 03:06:22,800
.

2748
03:06:22,800 --> 03:06:24,800
.

2749
03:06:24,800 --> 03:06:26,800
.

2750
03:06:26,800 --> 03:06:28,800
.

2751
03:06:28,800 --> 03:06:30,800
.

2752
03:06:30,800 --> 03:06:32,800
.

2753
03:06:32,800 --> 03:06:34,800
.

2754
03:06:34,800 --> 03:06:36,800
.

2755
03:06:36,800 --> 03:06:38,800
.

2756
03:06:38,800 --> 03:06:40,800
.

2757
03:06:40,800 --> 03:06:42,800
.

2758
03:06:42,800 --> 03:06:44,800
.

2759
03:06:44,800 --> 03:06:46,800
.

2760
03:06:46,800 --> 03:06:48,800
.

2761
03:06:48,800 --> 03:06:50,800
.

2762
03:06:50,800 --> 03:06:52,800
.

2763
03:06:52,800 --> 03:06:54,800
.

2764
03:06:54,800 --> 03:06:56,800
.

2765
03:06:56,800 --> 03:06:58,800
.

2766
03:06:58,800 --> 03:07:00,800
.

2767
03:07:00,800 --> 03:07:02,800
.

2768
03:07:02,800 --> 03:07:04,800
.

2769
03:07:04,800 --> 03:07:06,800
.

2770
03:07:06,800 --> 03:07:08,800
.

2771
03:07:08,800 --> 03:07:10,800
.

2772
03:07:10,800 --> 03:07:12,800
.

2773
03:07:12,800 --> 03:07:14,800
.

2774
03:07:14,800 --> 03:07:16,800
.

2775
03:07:16,800 --> 03:07:18,800
.

2776
03:07:18,800 --> 03:07:20,800
.

2777
03:07:20,800 --> 03:07:22,800
.

2778
03:07:22,800 --> 03:07:24,800
.

2779
03:07:24,800 --> 03:07:26,800
.

2780
03:07:26,800 --> 03:07:28,800
.

2781
03:07:28,800 --> 03:07:30,800
.

2782
03:07:30,800 --> 03:07:32,800
.

2783
03:07:32,800 --> 03:07:34,800
.

2784
03:07:34,800 --> 03:07:36,800
.

2785
03:07:36,800 --> 03:07:38,800
.

2786
03:07:38,800 --> 03:07:40,800
.

2787
03:07:40,800 --> 03:07:42,800
.

2788
03:07:42,800 --> 03:07:44,800
.

2789
03:07:44,800 --> 03:07:46,800
.

2790
03:07:46,800 --> 03:07:48,800
.

2791
03:07:48,800 --> 03:07:50,800
.

2792
03:07:50,800 --> 03:07:52,800
.

2793
03:07:52,800 --> 03:07:54,800
.

2794
03:07:54,800 --> 03:07:56,800
.

2795
03:07:56,800 --> 03:07:58,800
.

2796
03:07:58,800 --> 03:08:00,800
.

2797
03:08:00,800 --> 03:08:02,800
.

2798
03:08:02,800 --> 03:08:04,800
.

2799
03:08:04,800 --> 03:08:06,800
.

2800
03:08:06,800 --> 03:08:08,800
.

2801
03:08:08,800 --> 03:08:10,800
.

2802
03:08:10,800 --> 03:08:12,800
.

2803
03:08:12,800 --> 03:08:14,800
.

2804
03:08:14,800 --> 03:08:16,800
.

2805
03:08:16,800 --> 03:08:18,800
.

2806
03:08:18,800 --> 03:08:20,800
.

2807
03:08:20,800 --> 03:08:22,800
.

2808
03:08:22,800 --> 03:08:24,800
.

2809
03:08:24,800 --> 03:08:26,800
.

2810
03:08:26,800 --> 03:08:28,800
.

2811
03:08:28,800 --> 03:08:30,800
.

2812
03:08:30,800 --> 03:08:32,800
.

2813
03:08:32,800 --> 03:08:34,800
.

2814
03:08:34,800 --> 03:08:36,800
.

2815
03:08:36,800 --> 03:08:38,800
.

2816
03:08:38,800 --> 03:08:40,800
.

2817
03:08:40,800 --> 03:08:42,800
.

2818
03:08:42,800 --> 03:08:44,800
.

2819
03:08:44,800 --> 03:08:46,800
.

2820
03:08:46,800 --> 03:08:48,800
.

2821
03:08:48,800 --> 03:08:50,800
.

2822
03:08:50,800 --> 03:08:52,800
.

2823
03:08:52,800 --> 03:08:54,800
.

2824
03:08:54,800 --> 03:08:56,800
.

2825
03:08:56,800 --> 03:08:58,800
.

2826
03:08:58,800 --> 03:09:00,800
.

2827
03:09:00,800 --> 03:09:02,800
.

2828
03:09:02,800 --> 03:09:04,800
.

2829
03:09:04,800 --> 03:09:06,800
.

2830
03:09:06,800 --> 03:09:08,800
.

2831
03:09:08,800 --> 03:09:10,800
.

2832
03:09:10,800 --> 03:09:12,800
.

2833
03:09:12,800 --> 03:09:14,800
.

2834
03:09:14,800 --> 03:09:16,800
.

2835
03:09:16,800 --> 03:09:18,800
.

2836
03:09:18,800 --> 03:09:20,800
.

2837
03:09:20,800 --> 03:09:22,800
.

2838
03:09:22,800 --> 03:09:24,800
.

2839
03:09:24,800 --> 03:09:26,800
.

2840
03:09:26,800 --> 03:09:28,800
.

2841
03:09:28,800 --> 03:09:30,800
.

2842
03:09:30,800 --> 03:09:32,800
.

2843
03:09:32,800 --> 03:09:34,800
.

2844
03:09:34,800 --> 03:09:36,800
.

2845
03:09:36,800 --> 03:09:38,800
.

2846
03:09:38,800 --> 03:09:40,800
.

2847
03:09:40,800 --> 03:09:42,800
.

2848
03:09:42,800 --> 03:09:44,800
.

2849
03:09:44,800 --> 03:09:46,800
.

2850
03:09:46,800 --> 03:09:48,800
.

2851
03:09:48,800 --> 03:09:50,800
.

2852
03:09:50,800 --> 03:09:52,800
.

2853
03:09:52,800 --> 03:09:54,800
.

2854
03:09:54,800 --> 03:09:56,800
.

2855
03:09:56,800 --> 03:09:58,800
.

2856
03:09:58,800 --> 03:10:00,800
.

2857
03:10:00,800 --> 03:10:02,800
.

2858
03:10:02,800 --> 03:10:04,800
.

2859
03:10:04,800 --> 03:10:06,800
.

2860
03:10:06,800 --> 03:10:08,800
.

2861
03:10:08,800 --> 03:10:10,800
.

2862
03:10:10,800 --> 03:10:12,800
.

2863
03:10:12,800 --> 03:10:14,800
.

2864
03:10:14,800 --> 03:10:16,800
.

2865
03:10:16,800 --> 03:10:18,800
.

2866
03:10:18,800 --> 03:10:20,800
.

2867
03:10:20,800 --> 03:10:22,800
.

2868
03:10:22,800 --> 03:10:24,800
.

2869
03:10:24,800 --> 03:10:26,800
.

2870
03:10:26,800 --> 03:10:28,800
.

2871
03:10:28,800 --> 03:10:30,800
.

2872
03:10:30,800 --> 03:10:32,800
.

2873
03:10:32,800 --> 03:10:34,800
.

2874
03:10:34,800 --> 03:10:36,800
.

2875
03:10:36,800 --> 03:10:38,800
.

2876
03:10:38,800 --> 03:10:40,800
.

2877
03:10:40,800 --> 03:10:42,800
.

2878
03:10:42,800 --> 03:10:44,800
.

2879
03:10:44,800 --> 03:10:46,800
.

2880
03:10:46,800 --> 03:10:48,800
.

2881
03:10:48,800 --> 03:10:50,800
.

2882
03:10:50,800 --> 03:10:52,800
.

2883
03:10:52,800 --> 03:10:54,800
.

2884
03:10:54,800 --> 03:10:56,800
.

2885
03:10:56,800 --> 03:10:58,800
.

2886
03:10:58,800 --> 03:11:00,800
.

2887
03:11:00,800 --> 03:11:02,800
.

2888
03:11:02,800 --> 03:11:04,800
.

2889
03:11:04,800 --> 03:11:06,800
.

2890
03:11:06,800 --> 03:11:08,800
.

2891
03:11:08,800 --> 03:11:10,800
.

2892
03:11:10,800 --> 03:11:12,800
.

2893
03:11:12,800 --> 03:11:14,800
.

2894
03:11:14,800 --> 03:11:16,800
.

2895
03:11:16,800 --> 03:11:18,800
.

2896
03:11:18,800 --> 03:11:20,800
.

2897
03:11:20,800 --> 03:11:22,800
.

2898
03:11:22,800 --> 03:11:24,800
.

2899
03:11:24,800 --> 03:11:26,800
.

2900
03:11:26,800 --> 03:11:28,800
.

2901
03:11:28,800 --> 03:11:30,800
.

2902
03:11:30,800 --> 03:11:32,800
.

2903
03:11:32,800 --> 03:11:34,800
.

2904
03:11:34,800 --> 03:11:36,800
.

2905
03:11:36,800 --> 03:11:38,800
.

2906
03:11:38,800 --> 03:11:40,800
.

2907
03:11:40,800 --> 03:11:42,800
.

2908
03:11:42,800 --> 03:11:44,800
.

2909
03:11:44,800 --> 03:11:46,800
.

2910
03:11:46,800 --> 03:11:48,800
.

2911
03:11:48,800 --> 03:11:50,800
.

2912
03:11:50,800 --> 03:11:52,800
.

2913
03:11:52,800 --> 03:11:54,800
.

