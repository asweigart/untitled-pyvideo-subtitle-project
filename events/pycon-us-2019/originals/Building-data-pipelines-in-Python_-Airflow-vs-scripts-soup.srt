1
00:00:00,000 --> 00:00:09,880
Hello. Oh, hello. Welcome everyone. It's super loud. Thank you. We're starting a bit later

2
00:00:09,880 --> 00:00:14,120
to accommodate for all the folks that were in the registration, but I just realized that

3
00:00:14,120 --> 00:00:22,400
we have a full room now, so I assume that we can start. I just want to introduce myself.

4
00:00:22,400 --> 00:00:29,600
My name is Tanya. I live and work in Manchester, UK, so I did a long trip yesterday. And I

5
00:00:30,080 --> 00:00:34,320
Microsoft as a developer advocate, but for many years before that, I've been working

6
00:00:34,320 --> 00:00:39,800
as a research software engineer, as a data engineer, as a machine learning engineer,

7
00:00:39,800 --> 00:00:48,480
pretty much everything across working with data, data pipelines, and reproducibility.

8
00:00:48,480 --> 00:00:52,920
You can have a lot of means to be contacted if I need to be contacted as a follow-up for

9
00:00:52,920 --> 00:00:59,080
the tutorial. I know a lot of you have already mailed me for different troubleshooting issues

10
00:00:59,080 --> 00:01:05,600
and stuff. I just want to start with a reminder that we have a code of conduct for all PyCon

11
00:01:05,600 --> 00:01:13,080
stuff, so everyone in this room has to be, well, has to be aware to the code of conduct.

12
00:01:13,080 --> 00:01:21,080
And if you feel that anyone is not aware to it, please let us know or let the PyCon volunteers

13
00:01:21,080 --> 00:01:29,240
or PyCon organizers know. Also, all of the materials for this tutorial are CC by, so

14
00:01:29,240 --> 00:01:34,400
if after that you want to use them, remix them, you're free to do that. I'm going to

15
00:01:34,400 --> 00:01:42,960
be adding some bits later on just to extend on some things. And I'm going to go over just

16
00:01:42,960 --> 00:01:49,920
some general information about the workshop. We're going to be talking about fundamental

17
00:01:50,000 --> 00:01:57,760
or basic concepts of data pipelines and also present a couple of practical use cases of

18
00:01:57,760 --> 00:02:04,800
Python for data pipelines. Mainly, we're going to be focusing on ETL, but you can then adjust

19
00:02:04,800 --> 00:02:11,240
that if you want to be more on the patient learning side or models retraining or more

20
00:02:11,240 --> 00:02:17,440
analysis focused. Some of the requirements or some of the assumptions that we've made

21
00:02:17,440 --> 00:02:21,840
about you is that you have some experience using the command line, whether the command

22
00:02:21,840 --> 00:02:27,920
line is for you, if you're using Mac, Windows or Linux. And you're also expected to have

23
00:02:27,920 --> 00:02:34,000
some intermediate Python knowledge and be able to use it for intermediate purposes.

24
00:02:34,000 --> 00:02:37,960
And also because we're going to be having a top view of the stuff instead of going into

25
00:02:37,960 --> 00:02:44,960
very, very technical details or very in-depth explanations of everything. You should be

26
00:02:44,960 --> 00:02:49,240
able or one of the ideas is that you have enough understanding of what we're doing

27
00:02:49,240 --> 00:02:54,040
so that you can then take it back home, take it to your work or read your research or whatever

28
00:02:54,040 --> 00:03:02,520
you do and apply whatever you've learned here. I also assume that you're interested in data

29
00:03:02,520 --> 00:03:09,520
and systems a tiny bit, even if you like more data than systems or the other way around.

30
00:03:10,200 --> 00:03:16,880
And I imagine that a lot of you are either aspiring or current data engineers or work

31
00:03:16,880 --> 00:03:23,880
in research or research software engineering. And ideally you also know, have a tiny bit

32
00:03:24,680 --> 00:03:29,840
knowledge of systems and databases because we're going to be working with databases mainly

33
00:03:29,840 --> 00:03:36,840
to move our data around. So at the end of the day, I hope you have a better understanding

34
00:03:37,840 --> 00:03:43,560
on how to apply pipelines using Python tool sets. We're going to be starting with pure

35
00:03:43,560 --> 00:03:49,040
Python, well, more vanilla Python and then eventually move on to the use of our flow

36
00:03:49,040 --> 00:03:56,040
to have DAGs and schedule tasks. And we're going to be focusing much more on the concepts

37
00:03:57,840 --> 00:04:04,840
as I said before, instead of going very, very deep onto the knowledge. And this should ideally

38
00:04:05,640 --> 00:04:11,120
give you some building blocks for whatever you want to do afterwards. As we follow the

39
00:04:11,120 --> 00:04:16,200
tutorial you're going to see that there are some little traffic lights and different examples

40
00:04:16,200 --> 00:04:20,600
or different tasks that we have. And these are going to be either tasks that you have

41
00:04:20,600 --> 00:04:25,200
to complete on your own or that I'm going to be doing and I expect you to follow along

42
00:04:25,200 --> 00:04:31,120
or that you're going to be doing pair programming. So at the beginning I gave you two post-its,

43
00:04:31,120 --> 00:04:37,600
everyone got their post-its. And this is going to help me to understand how fast or how slow

44
00:04:37,600 --> 00:04:42,400
you're going through examples or if you need extra time or if you need extra help. So if

45
00:04:42,400 --> 00:04:48,440
you have, well, it's not purple, this time it's blue. If you have gone through, well,

46
00:04:48,440 --> 00:04:53,640
as soon as you see a traffic light and you start with a task, I want you to put the orange

47
00:04:53,640 --> 00:04:58,920
post-it here on your laptop so I can see. As you finish the task or you complete whatever

48
00:04:58,920 --> 00:05:04,880
we're doing, you'll take this off and replace it with the blue post-it. So that way I can

49
00:05:04,880 --> 00:05:11,880
ensure that everyone is following along and I don't leave people behind. Questions? Yes?

50
00:05:20,560 --> 00:05:27,560
Is that better? And this one, is that better? Or do you want to do it again?

51
00:05:28,920 --> 00:05:43,920
It didn't work. Is that better? Is that too big? Bigger? I'm going to have to put it on a separate thing probably.

52
00:05:43,920 --> 00:05:55,920
But we'll see. Is that right? Fabulous. If at any point there is something that is not very clear or you need extra help or extra time,

53
00:05:55,920 --> 00:06:10,920
feel free to ask me. We have a scheduled break at 10.15. Well, it's going to be 10.15. And we're going to be finishing instead of 1.20, 1.30 because of the 10 minutes that we accommodated at the beginning.

54
00:06:10,920 --> 00:06:24,920
You know that some of you didn't email me on time or email me this morning about your passes, so I have not replied you back. And someone emailed me because I double-assigned a pass. That was my bad.

55
00:06:24,920 --> 00:06:35,920
So during the break, feel free to reach out and I'll sort them out because we're going to be using that in a second. Cool. Are we all ready?

56
00:06:35,920 --> 00:06:58,920
And I want you to put your purple post-it if you all have your installation and your environment and all of your prerequisites met.

57
00:06:58,920 --> 00:07:21,920
I can see some oranges. OK, for most of it, I can see blue. I see a couple of oranges. If anyone is missing their Twitter, who's missing their Twitter approval? Oh, quite a few. Did you fill in your application?

58
00:07:21,920 --> 00:07:36,920
Last night. Oh, OK. I'll have to figure a way to share this with you privately so that it's not there. And then everyone that goes to the videos will see my keys. Fantastic.

59
00:07:36,920 --> 00:07:58,920
So we're going to start with pipelines, and this is a very appropriate meme these days. And the central, and every time I talk about pipelines, I have to talk about automation because when you build a data pipeline or a processing or analysis pipeline, basically what you're doing is focusing on automation.

60
00:07:58,920 --> 00:08:20,920
And the great thing about automation is that it helps us to automate or speed up those tasks that are manual, that are quite boring, and it allows you to spend much more time in the things that you like most or that are actually going to add much more impact to your projects or to your company or to your research, whatever you're doing.

61
00:08:21,920 --> 00:08:45,920
The one downside of having automation is that it also forces you to add certain monitoring and logging steps. So once you automate your tasks, then you have to ensure that you have processes and tools in place so that you can actually continuously monitor how the task is doing or if your system is failing or dying a bit every day in here.

62
00:08:46,920 --> 00:09:04,920
So whenever you want to automate a task, you have to understand what kind of tasks are easily automated. For example, tasks like regular release schedule reports or something that you have to deliver every month or every week or every quarter, that is easy to automate.

63
00:09:04,920 --> 00:09:15,920
If you have something that you only do once, probably after a meeting or it's a one-off task, then probably the effort of automating a task is going to be too high as well as cost.

64
00:09:16,920 --> 00:09:26,920
Also for you to be able to automate anything or any task, you need to have very, very clear understanding of very clear outcomes of what success and failure looks like.

65
00:09:26,920 --> 00:09:39,920
If you know, for example, that you're going to be sending an email to your 100 customers, then success more than likely is going to be that your email contains appropriate information and is sent at the appropriate time.

66
00:09:40,920 --> 00:09:52,920
If you have unclear success or unclear failure rates or metrics, this is going to be very, very tricky because you can't monitor the state of your task. It just becomes very, very complex.

67
00:09:53,920 --> 00:10:13,920
Also, if you have tasks that can be easily manipulated or the input can be easily manipulated by machines, let's say that you have data in the database that you can port around or that you can query through an API, it's going to be much easier than that data.

68
00:10:14,920 --> 00:10:19,920
For example, you have to do surveys on paper and then translate or transcribe everything.

69
00:10:23,920 --> 00:10:39,920
So whenever you want to automate anything, I suggest everyone to start following a checklist or answering this question because this is what is going to determine first how you're going to automate your task and what tools are you going to use for this purpose.

70
00:10:40,920 --> 00:10:54,920
You have to have a clear understanding on when your task starts and when your tasks end. Let's say I have to generate report every month and it goes out every first Monday of the month or the first of the month.

71
00:10:55,920 --> 00:10:56,920
So I know when I should trigger this.

72
00:10:57,920 --> 00:11:14,920
Does this have a time limit? For example, do we have to cover a certain span of time as well? And also, what are the inputs of the tasks? This is essential. You need to understand what your task is going to consume and where it's coming from.

73
00:11:15,920 --> 00:11:34,920
Again, what is success or failure? And how can we early identify these outcomes? How can you early identify that your task is failing? How can you easily identify that you need to do some remedial work or that your database or your systems are encountering problems?

74
00:11:35,920 --> 00:11:49,920
And then when you face these problems, you also have to think about what afterwards. What is going to happen when there is a failure? Who should be notified? What remedial actions or what fixings do we have to apply?

75
00:11:51,920 --> 00:12:03,920
And also, we need to understand what is the final output or the final outcome of a task and who should be made aware or who should receive all of these outputs or final products.

76
00:12:05,920 --> 00:12:25,920
And once I have completed my task, whether successfully or unsuccessfully, what is going to happen then? Is this report going to be sent to someone? Do people have to receive a Slack message? Or what is going to happen? Do we have to purge databases or what? So that's the first thing.

77
00:12:26,920 --> 00:12:42,920
So if when you're trying to automate or establish a pipeline to automate a certain task, you struggle a lot to answer these questions. More than likely is that you'll have to go again and redefine your task or probably it's not easily automatable.

78
00:12:43,920 --> 00:12:49,920
And the same thing happens when you have a very, very large project or that is very loosely defined.

79
00:12:49,920 --> 00:13:11,920
Mainly in data engineering, you'll have, for example, a task that collects your data, then it does some cleaning or runs some analysis and then sends the results probably to your head of marketing or to your head of data science or to your head of enterprise structure if you're doing monitoring, for example, of your resources.

80
00:13:11,920 --> 00:13:31,920
So from the very, very point of view, this is what a data pipeline looks like. There are many, many variants, but generally you'll have some sort of data engineering that is data acquisition, transportation of the data, then prepare that so that it's actually consumed in an appropriate manner and then however does the analysis.

81
00:13:31,920 --> 00:13:39,920
Or in machine learning or analytics in your company will have to have access to this already cleaned and already formatted data.

82
00:13:42,920 --> 00:13:48,920
Now, because the data follows a very, very specific flow, every processes upstream and downstream are very, very interconnected.

83
00:13:48,920 --> 00:13:54,920
So the quality of the data that goes from an upstream process will permit downside in your downstream processes.

84
00:13:57,920 --> 00:14:03,920
And the reason is that for us pipeline and data workflows matter a lot because now they power pretty much every single data.

85
00:14:03,920 --> 00:14:09,920
They are mission critical. If you didn't have enough pipelines that are well monitored or that are robust enough, we can't guarantee the validity and integrity of the data.

86
00:14:10,920 --> 00:14:14,920
And therefore we can't guarantee that the data is well monitored or that it is well managed.

87
00:14:15,920 --> 00:14:18,920
So the data that we have is not going to be a problem.

88
00:14:18,920 --> 00:14:24,920
And also for those of you that already have a machine learning process, we can guarantee that the data is well monitored and that it is well managed.

89
00:14:25,920 --> 00:14:29,920
And therefore we can't guarantee that the data is well monitored or that it is well managed.

90
00:14:30,920 --> 00:14:35,920
And therefore we can't guarantee that the data is well monitored or that it is well managed.

91
00:14:36,920 --> 00:14:41,920
And therefore we can't guarantee that the data is well monitored or that it is well managed.

92
00:14:41,920 --> 00:14:47,920
And also for those of you that already work in data engineering or in companies that do all data intensive works, you will have realized by now that we spend a lot of time monitoring.

93
00:14:48,920 --> 00:14:57,920
And also for those of you that already work in data engineering or in companies that do all data intensive works, you will have realized by now that we spend a lot of time monitoring.

94
00:14:58,920 --> 00:15:03,920
Doing a lot of logging, understanding how things are working, why they are failing.

95
00:15:04,920 --> 00:15:10,920
And if you are not doing a lot of monitoring already, probably you should be doing a lot of monitoring.

96
00:15:11,920 --> 00:15:16,920
And that's probably where we spend more of our time. Well, most of our time.

97
00:15:17,920 --> 00:15:22,920
I certainly have spent a lot of time understanding where to improve our pipelines.

98
00:15:23,920 --> 00:15:28,920
And I think this is also something that you have to understand when you are working with data pipelines.

99
00:15:29,920 --> 00:15:35,920
Although you might have static ones, they are not static because then the data streams as well keep continuously changing.

100
00:15:36,920 --> 00:15:39,920
If you are using APIs, APIs will continuously change.

101
00:15:39,920 --> 00:15:45,920
As new packages or packages apply patches, again, everything is continuously evolving.

102
00:15:46,920 --> 00:15:55,920
So you also have to schedule time to actually maintain and maintain your databases, migrate them, ensure that everything is working.

103
00:15:58,920 --> 00:16:01,920
And how do you know that a pipeline is good?

104
00:16:02,920 --> 00:16:04,920
Basically, a good pipeline is reproducible.

105
00:16:04,920 --> 00:16:13,920
And this in very, very crude terms means that if you have the same code, the same data, the same environments, you should always get the same outcome.

106
00:16:14,920 --> 00:16:23,920
So that shouldn't change because you are basically pinning down the three pillars or the three bases for your code, your data and your environment.

107
00:16:24,920 --> 00:16:32,920
Also, a good pipeline should be easy to productize. It should be easy to take from an R&D or an exploratory environment into production.

108
00:16:32,920 --> 00:16:37,920
And this means that we will need minimal modifications from one environment to the other.

109
00:16:38,920 --> 00:16:45,920
In many cases, this will mean that probably you are changing the database from a development database to a production one.

110
00:16:46,920 --> 00:16:59,920
Sometimes if you are running on Kubernetes, you are probably going to just change from a small cluster to a higher cluster with a security lockdown or with higher security configurations.

111
00:16:59,920 --> 00:17:09,920
But in general, they should be easy to productize. And most of the time, this productizing process is done through continuous delivery and continuous integration.

112
00:17:10,920 --> 00:17:21,920
So again, you have to liaise a lot with your DevOps or your infrastructure people to figure out how to, again, automate the automation of your pipelines.

113
00:17:22,920 --> 00:17:26,920
And another characteristic of good pipelines is that they are atomic.

114
00:17:27,920 --> 00:17:34,920
Basically, every single unit or every task is very, very well designed.

115
00:17:35,920 --> 00:17:39,920
Every task is almost independent and can be run independently.

116
00:17:40,920 --> 00:17:43,920
So that makes it easier to understand what code can be easily reduced.

117
00:17:44,920 --> 00:17:48,920
It will make it easier to maintain them as well.

118
00:17:51,920 --> 00:17:57,920
And also when working with data pipelines, there are two things that you have always remembered.

119
00:17:58,920 --> 00:18:02,920
Your data is dirty. You always start with the assumption that your data is dirty.

120
00:18:03,920 --> 00:18:07,920
Unless you can put your hand on the fire and say, I know it is not.

121
00:18:08,920 --> 00:18:16,920
So the excuses are, it's already in the database, so it's already good, it has good quality, we don't have to do cleaning and validation.

122
00:18:17,920 --> 00:18:20,920
That's a lie. I'll tell you, that's an absolute lie.

123
00:18:21,920 --> 00:18:23,920
And second, all your data is important.

124
00:18:24,920 --> 00:18:33,920
Unless you're 100% sure that that client is not going to come back and ask for a retrospective report from the last three years, you keep your raw data.

125
00:18:34,920 --> 00:18:38,920
You can keep it, you can transform it, don't get rid of your raw data.

126
00:18:39,920 --> 00:18:42,920
Don't touch it. Don't touch it, even when it's sick.

127
00:18:42,920 --> 00:18:53,920
And the better you want to get at your data quality, at your data engineering processes, the downside again is that the complexity of the processes increase.

128
00:18:54,920 --> 00:18:58,920
Because you have to increase your tool set, you have to increase the tasks.

129
00:18:59,920 --> 00:19:09,920
And as you encounter yourself doing more automation, more pipelines and having to monitor how these workflows are going, then more than likely you're going to get a lot of data.

130
00:19:09,920 --> 00:19:14,920
And if you're going to have to monitor how these workflows are going, then more than likely you're going to end up needing a workflow manager.

131
00:19:15,920 --> 00:19:24,920
And in this case, you can use things now like Airflow, that is what we're going to be using here, but there are other alternatives like Ligee, for example, and PackageRM.

132
00:19:26,920 --> 00:19:36,920
And in very, very simple terms, a workflow manager is like having the best of make, Unix pipes, because everybody loves pipes.

133
00:19:36,920 --> 00:19:39,920
I love pipes. They're my favorite part of Unix.

134
00:19:40,920 --> 00:19:44,920
And some sort of steroids. You have also a bit of cron jobs there.

135
00:19:47,920 --> 00:19:51,920
So are we ready to start writing our first ETL pipeline?

136
00:19:52,920 --> 00:19:58,920
And we're going to start with a Vanilla Python pipeline to understand how this process is going to go.

137
00:19:59,920 --> 00:20:08,920
For those of you that don't have a Twitter API, I'm going to have to figure out how to share the keys with you.

138
00:20:09,920 --> 00:20:14,920
And I'm going to have to burn those keys to the ground after we finish the tutorial as well.

139
00:20:14,920 --> 00:20:20,920
Oh, I fixed that. I merged it yesterday. Was it like the two tiny typos or so?

140
00:20:21,920 --> 00:20:24,920
Yes, I think so. Was it yesterday?

141
00:20:25,920 --> 00:20:29,920
Oh, okay. I'll merge it later. Yeah, that's fine.

142
00:20:29,920 --> 00:20:35,920
Because someone found two typos that I typed cdch instead of cd. Oh, that was you. Great.

143
00:20:36,920 --> 00:20:37,920
Probably less.

144
00:20:39,920 --> 00:20:40,920
Yeah, I know.

145
00:20:41,920 --> 00:20:44,920
So I'm going to have to find a way to do that.

146
00:20:45,920 --> 00:20:47,920
So I'm going to have to find a way to do that.

147
00:20:48,920 --> 00:20:50,920
So I'm going to have to find a way to do that.

148
00:20:51,920 --> 00:20:53,920
So I'm going to have to find a way to do that.

149
00:20:53,920 --> 00:20:54,920
Probably less.

150
00:21:00,920 --> 00:21:04,920
Cool. So the first thing that we have to do is setting up our local database.

151
00:21:05,920 --> 00:21:07,920
And this is because we're going to be doing streaming.

152
00:21:08,920 --> 00:21:21,920
So eventually, when you're working with large volumes of data, moving CSV files or that kind of type delimited or text files becomes very, very tedious and very, very inconvenient.

153
00:21:22,920 --> 00:21:30,920
So if you follow along, we're going to start creating from your common line our setup.

154
00:21:31,920 --> 00:21:36,920
And this is going to be our database that we're going to use throughout the whole tutorial.

155
00:21:37,920 --> 00:21:42,920
So with that code, it's going to request you to enter your password.

156
00:21:43,920 --> 00:21:47,920
If you have a password and if you don't have it, it's fine.

157
00:21:48,920 --> 00:21:53,920
You know that you're in SQL because you get this very beautiful message saying that you're in SQL.

158
00:21:55,920 --> 00:22:03,920
And you can see your databases using the directive show databases.

159
00:22:04,920 --> 00:22:10,920
In my case, I already have an Airflow database, but this is a very fresh install.

160
00:22:10,920 --> 00:22:15,920
So it only comes with the defaults or MySQL.

161
00:22:17,920 --> 00:22:19,920
And you can also see your user's.

162
00:22:27,920 --> 00:22:31,920
You can see your users and I have obviously an error there.

163
00:22:32,920 --> 00:22:33,920
There you go.

164
00:22:42,920 --> 00:22:50,920
And that is going to show where your users have their normally you only have a route and the MySQL infoschema decision and the system.

165
00:22:51,920 --> 00:23:02,920
We're going to create an Airflow user for this tutorial because eventually we're going to need to grant privileges to our flow to access our databases and store data in there.

166
00:23:06,920 --> 00:23:09,920
So let me clear my screen so you can all see.

167
00:23:10,920 --> 00:23:13,920
And the next step is going to create our databases.

168
00:23:13,920 --> 00:23:19,920
So for this we use create database and then you give your database name.

169
00:23:20,920 --> 00:23:24,920
I like to remember what it is.

170
00:23:25,920 --> 00:23:27,920
It's called create database Airflow DB.

171
00:23:27,920 --> 00:23:40,920
Now for those of you that are not familiar with SQL, you don't have to use capital letters all the time, but it makes it much more understandable.

172
00:23:43,920 --> 00:23:47,920
And then set we're going to use UTF for our encoding.

173
00:23:49,920 --> 00:23:51,920
And then we're going to collate.

174
00:23:52,920 --> 00:24:01,920
And it will tell you straight away if uses that panini code or even use c vertex.

175
00:24:04,920 --> 00:24:14,920
It's just an array that we're probably a little bit different if you didn't have so familiar with SICOH ..

176
00:24:14,920 --> 00:24:22,160
And it will tell you straight away if your syntax was correct.

177
00:24:22,160 --> 00:24:24,920
It's going to tell you I created one database.

178
00:24:24,920 --> 00:24:29,520
So you can again use your social databases command.

179
00:24:30,520 --> 00:24:34,720
And you're going to see that you have your Airflow,

180
00:24:34,720 --> 00:24:37,160
your newly created Airflow database

181
00:24:38,060 --> 00:24:42,040
and the default databases that MySQL comes from.

182
00:24:44,920 --> 00:24:55,280
Now, because we don't want to use our root passwords

183
00:24:55,280 --> 00:24:57,520
and our root privileges for everything,

184
00:24:57,520 --> 00:24:59,720
especially when we're doing things in our indeed

185
00:24:59,720 --> 00:25:02,960
that are then going to be taken into production,

186
00:25:02,960 --> 00:25:04,800
we're going to create our specific user

187
00:25:04,800 --> 00:25:09,000
that is only going to have access to both the Airflow

188
00:25:09,000 --> 00:25:13,080
and the Airflow DB databases.

189
00:25:15,600 --> 00:25:18,600
So again, we're going to use a directive create user.

190
00:25:19,880 --> 00:25:22,280
And we have to use single quotation.

191
00:25:22,280 --> 00:25:26,120
This is very important because MySQL goes crazy.

192
00:25:27,080 --> 00:25:31,160
Add local host because we're running our local database.

193
00:25:31,160 --> 00:25:33,600
Our host is going to be a local host.

194
00:25:36,440 --> 00:25:39,480
And we're going to give it a password.

195
00:25:39,640 --> 00:25:47,240
Here, I don't care much because I'm going to burn this again.

196
00:25:47,920 --> 00:25:52,120
So I'm going to call it, give it a password, Python 2019.

197
00:25:52,120 --> 00:25:53,720
It's easy for me to remember.

198
00:25:55,000 --> 00:25:56,920
It's not going to cause a lot of problems.

199
00:26:00,920 --> 00:26:02,000
For me, it's going to fail

200
00:26:02,000 --> 00:26:04,720
because I already have an Airflow user.

201
00:26:06,880 --> 00:26:08,680
But for you, it should work.

202
00:26:10,480 --> 00:26:16,080
So again, if I do a select user host from MySQL,

203
00:26:16,080 --> 00:26:19,560
you should see your newly created Airflow user.

204
00:26:23,160 --> 00:26:28,040
And once you all have your users and your databases put your,

205
00:26:29,160 --> 00:26:31,040
or no, your blue stick is on.

206
00:26:31,040 --> 00:26:32,040
Cool.

207
00:26:59,120 --> 00:27:00,120
Great.

208
00:27:00,120 --> 00:27:03,680
So now the next thing is going to be granting privileges

209
00:27:03,680 --> 00:27:07,560
to our user and this is that our user has

210
00:27:07,560 --> 00:27:11,520
write and query access on the database.

211
00:27:13,840 --> 00:27:16,840
As with Unix, the star wildcard

212
00:27:19,840 --> 00:27:22,360
will identify like anything.

213
00:27:22,360 --> 00:27:27,000
So we don't want to grant access to this airflow user

214
00:27:27,000 --> 00:27:29,800
to all of our databases, we're gonna just do it

215
00:27:29,800 --> 00:27:33,260
for our newly created airflow database.

216
00:27:34,960 --> 00:27:37,500
And we're gonna for this use,

217
00:27:39,360 --> 00:27:43,060
the grant all privileges.

218
00:27:45,600 --> 00:27:49,640
And this means read, write and admin privileges.

219
00:27:49,640 --> 00:27:53,440
So they can create new tables, they can delete the database,

220
00:27:53,440 --> 00:27:58,440
they can query, append data, add data, remove data.

221
00:27:59,160 --> 00:28:01,040
They can do basically everything.

222
00:28:01,920 --> 00:28:03,980
And we have to say on what database.

223
00:28:05,520 --> 00:28:10,520
So it's airflow database and this dot,

224
00:28:11,000 --> 00:28:14,340
whatever is gonna be my host.

225
00:28:14,340 --> 00:28:17,900
In this case, I only have local host tied to this.

226
00:28:17,900 --> 00:28:19,720
So it's okay.

227
00:28:19,720 --> 00:28:22,560
And then I'm gonna grant this to my airflow.

228
00:28:24,200 --> 00:28:26,800
Sorry, this is the different tables

229
00:28:26,800 --> 00:28:28,980
and the children of the database.

230
00:28:31,720 --> 00:28:34,580
The same local host that we have.

231
00:28:37,200 --> 00:28:40,780
So we have grant all privileges on airflow database

232
00:28:40,780 --> 00:28:43,400
to my airflow user.

233
00:28:43,400 --> 00:28:45,640
And now it tells you that it's fine.

234
00:28:45,640 --> 00:28:50,640
And we need to then do a flush privileges.

235
00:28:52,580 --> 00:28:53,500
Fantastic.

236
00:28:54,500 --> 00:28:56,460
So if we go again,

237
00:28:58,480 --> 00:29:00,780
now we have a database,

238
00:29:00,780 --> 00:29:04,860
we have an airflow database database.

239
00:29:04,860 --> 00:29:06,660
And we're gonna create as well

240
00:29:06,660 --> 00:29:08,380
a secondary airflow database

241
00:29:08,380 --> 00:29:12,320
that we're gonna use later on with which is airflow.

242
00:29:14,300 --> 00:29:16,860
If you use your up arrows,

243
00:29:16,860 --> 00:29:20,480
you can go back to where we created this airflow database.

244
00:29:21,400 --> 00:29:24,760
And instead of calling it airflow DB,

245
00:29:25,640 --> 00:29:28,720
it's gonna be called just airflow.

246
00:29:34,200 --> 00:29:38,520
So for me, more than likely it's not gonna like it

247
00:29:38,520 --> 00:29:40,900
because I already have a database.

248
00:29:44,560 --> 00:29:47,200
So we need to have two airflow databases now.

249
00:29:51,320 --> 00:29:55,960
And again, repeat, they grant all privileges,

250
00:29:55,960 --> 00:29:58,320
but instead of being airflow DB

251
00:29:58,320 --> 00:30:00,760
is gonna be the vanilla airflow database.

252
00:30:20,480 --> 00:30:21,480
Good night.

253
00:30:50,800 --> 00:31:15,780
The biggest one, perfect.

254
00:31:17,840 --> 00:31:18,680
The ones at the back,

255
00:31:18,680 --> 00:31:22,600
you see better with that super big font?

256
00:31:22,600 --> 00:31:23,560
Cool.

257
00:31:23,560 --> 00:31:24,400
Yes.

258
00:31:24,400 --> 00:31:28,520
And now that we are ready with our databases, we can exit.

259
00:31:28,520 --> 00:31:32,000
And it's going to take you back to your regularly beautiful

260
00:31:32,000 --> 00:31:32,680
command line.

261
00:31:36,120 --> 00:31:41,360
And I'm going to make this bigger as well.

262
00:31:41,360 --> 00:31:43,240
Fabulous.

263
00:31:43,240 --> 00:31:45,520
If at any point, I don't know, later on,

264
00:31:45,520 --> 00:31:47,280
did we finish the tutorial?

265
00:31:47,280 --> 00:31:51,120
Or if you made a mistake typing and you need to remove a user,

266
00:31:51,120 --> 00:31:54,080
you can use the drop user.

267
00:31:54,080 --> 00:31:56,080
You replace the username into localhost.

268
00:31:56,080 --> 00:31:57,400
That's going to remove it.

269
00:31:57,400 --> 00:31:58,520
It's the same directive.

270
00:31:58,520 --> 00:32:01,400
If you want to get rid of database or a table,

271
00:32:01,400 --> 00:32:03,800
instead of using the keyword user,

272
00:32:03,800 --> 00:32:07,640
you're going to use drop database, Airflow, for example,

273
00:32:07,640 --> 00:32:14,320
or drop table, airflow.mytable, whatever you want.

274
00:32:14,360 --> 00:32:19,840
And in this case, SQL is a very intuitive language.

275
00:32:19,840 --> 00:32:23,000
And basically, the directive tells you exactly what it's doing.

276
00:32:28,840 --> 00:32:29,360
No.

277
00:32:29,360 --> 00:32:33,360
So you have one user that is Airflow, two databases,

278
00:32:33,360 --> 00:32:37,440
an Airflow and an AirflowDB.

279
00:32:37,440 --> 00:32:38,360
Has access to both.

280
00:32:41,960 --> 00:32:42,440
No.

281
00:32:42,440 --> 00:32:48,200
The users that you create are global users.

282
00:32:48,200 --> 00:32:50,600
So they're not inside the database.

283
00:32:50,600 --> 00:32:52,200
They're global users.

284
00:32:52,200 --> 00:32:54,920
The thing that we do with this directive,

285
00:32:54,920 --> 00:32:58,960
with the grant privileges, is just giving them permissions

286
00:32:58,960 --> 00:33:00,960
to do things with the database.

287
00:33:00,960 --> 00:33:02,840
For example, your root user, by default,

288
00:33:02,840 --> 00:33:07,640
will have access and all level access to any database

289
00:33:07,640 --> 00:33:10,120
that you created, your localhost.

290
00:33:10,160 --> 00:33:14,960
Any other user need to be given explicit privileges.

291
00:33:14,960 --> 00:33:16,120
We're using all privileges.

292
00:33:16,120 --> 00:33:20,160
So after you created your Airflow database,

293
00:33:20,160 --> 00:33:22,800
well, the Airflow one, not the AirflowDB,

294
00:33:22,800 --> 00:33:25,880
you have to do again a grant all privileges on so

295
00:33:25,880 --> 00:33:27,920
that your Airflow user can access it.

296
00:33:27,920 --> 00:33:31,080
Does that make sense?

297
00:33:31,080 --> 00:33:32,000
Cool.

298
00:33:32,000 --> 00:33:34,200
So now we have our database.

299
00:33:34,200 --> 00:33:35,560
We have our environment.

300
00:33:35,560 --> 00:33:37,440
And the next bit is for those of you

301
00:33:37,440 --> 00:33:42,280
that have never connected to a database from Python

302
00:33:42,280 --> 00:33:46,480
is to learn how we're actually going to do this.

303
00:33:46,480 --> 00:33:48,840
So I'm going to go to my documents

304
00:33:48,840 --> 00:33:56,560
and create a directory called Documents Demo PyCon.

305
00:33:56,560 --> 00:33:58,240
You can call it whatever you want.

306
00:34:07,600 --> 00:34:08,100
Oh.

307
00:34:13,080 --> 00:34:13,580
Why?

308
00:34:20,640 --> 00:34:22,960
OK.

309
00:34:22,960 --> 00:34:25,200
So I have now a brand new directory.

310
00:34:25,200 --> 00:34:28,560
And I'm going to start my ID.

311
00:34:28,560 --> 00:34:34,600
I use Visual Studio code because I really like it.

312
00:34:34,600 --> 00:34:38,040
And it makes life easier for me.

313
00:34:38,040 --> 00:34:40,760
And just let me change the color of my bar

314
00:34:40,760 --> 00:34:43,960
so I can actually identify which one it is.

315
00:34:47,280 --> 00:34:48,960
And this is not a commercial.

316
00:34:48,960 --> 00:34:51,720
But if you use VS Code and you end up

317
00:34:51,720 --> 00:34:56,160
like myself with 30 windows at all time, use Peacock.

318
00:34:56,160 --> 00:35:00,880
And it's amazing because it just changes the color.

319
00:35:00,880 --> 00:35:03,960
I'm going to say it surprised me with random color.

320
00:35:03,960 --> 00:35:06,240
So that is great.

321
00:35:06,240 --> 00:35:10,400
And you can see that I have my other VS Codes here.

322
00:35:10,400 --> 00:35:12,840
Fantastic.

323
00:35:12,840 --> 00:35:17,880
So I'm going to create a folder called Database.

324
00:35:17,880 --> 00:35:22,400
Just so that all of my little snippets that refer to,

325
00:35:22,400 --> 00:35:25,040
do I need to make this bigger?

326
00:35:25,040 --> 00:35:28,040
That refer to managing databases or accessing databases

327
00:35:28,040 --> 00:35:30,240
are in the same place.

328
00:35:30,240 --> 00:35:31,720
They're happier if they're together.

329
00:35:34,640 --> 00:35:42,200
I'm going to create a Python MySQL.

330
00:35:42,200 --> 00:35:44,040
I'm going to have to select my interpreter.

331
00:35:48,840 --> 00:35:51,960
So now I am using my Airflow environment.

332
00:35:51,960 --> 00:35:54,640
That is the same environment that we are all using.

333
00:35:54,640 --> 00:35:59,280
We should all have the same libraries, hopefully.

334
00:35:59,280 --> 00:36:03,320
And we're going to start by importing into the libraries

335
00:36:03,320 --> 00:36:04,360
that you have to install.

336
00:36:04,360 --> 00:36:10,360
We have a library called MySQL Connector, MySQL Client.

337
00:36:10,360 --> 00:36:12,080
And this is a library that allows

338
00:36:12,080 --> 00:36:15,080
you to hook up whatever you're doing in Python

339
00:36:15,080 --> 00:36:18,680
to the SQL databases that we created before.

340
00:36:18,680 --> 00:36:20,240
And it's very nifty because that way,

341
00:36:20,240 --> 00:36:23,600
you didn't have to do batch scripts that

342
00:36:23,600 --> 00:36:26,640
will do your SQL things and then call them

343
00:36:26,640 --> 00:36:28,160
through some processes.

344
00:36:28,160 --> 00:36:30,800
But everything is Python native.

345
00:36:30,800 --> 00:36:32,640
So it makes it much more efficient.

346
00:36:32,640 --> 00:36:37,600
It's easier to debug sometimes.

347
00:36:37,600 --> 00:36:40,840
So we're going to check that we actually can access our database.

348
00:36:40,840 --> 00:36:51,880
For this, we're going to import the MySQL Connector as MySQL

349
00:36:51,880 --> 00:36:53,920
because I don't like typing.

350
00:36:53,920 --> 00:36:56,840
Then I'm going to create an object called dbconnect.

351
00:36:56,840 --> 00:37:00,640
And this is actually going to be my connector object

352
00:37:00,640 --> 00:37:04,560
or my connection object to the database.

353
00:37:04,560 --> 00:37:07,200
It's going to be MySQL.

354
00:37:07,200 --> 00:37:09,480
And you'll see that as you start typing,

355
00:37:09,480 --> 00:37:10,680
you have a lot of methods.

356
00:37:10,680 --> 00:37:13,200
So we're going to use the connect method

357
00:37:13,200 --> 00:37:14,760
because we want to actually establish

358
00:37:14,760 --> 00:37:21,360
a connection between our Python interpreter and the database.

359
00:37:21,360 --> 00:37:27,880
And this is going to take three arguments by default, your host,

360
00:37:27,880 --> 00:37:31,800
your user, and the password.

361
00:37:31,800 --> 00:37:33,280
And then the database, sometimes it

362
00:37:33,280 --> 00:37:35,960
depends whether you have a default one.

363
00:37:38,800 --> 00:37:42,560
So I'm going to copy this across because I'm a bit lazy.

364
00:37:48,240 --> 00:37:52,320
Can you see what this syntax highlighting at the back?

365
00:37:52,320 --> 00:37:53,480
No?

366
00:37:53,480 --> 00:37:56,120
Would you rather have it black, like a dark one?

367
00:37:58,080 --> 00:37:58,800
Is that better?

368
00:38:01,800 --> 00:38:03,360
OK, so let me make this.

369
00:38:08,520 --> 00:38:14,480
So this is going to return a connection object.

370
00:38:14,480 --> 00:38:17,560
It's not very exciting because when you start it,

371
00:38:17,560 --> 00:38:20,160
it doesn't give you anything.

372
00:38:20,160 --> 00:38:23,520
So I'm going to do a print of the dbconnect

373
00:38:23,520 --> 00:38:26,560
just so that I can actually see the location of memory

374
00:38:26,560 --> 00:38:29,120
of this object.

375
00:38:29,120 --> 00:38:32,640
And after I'm done with whatever I'm going to do with my database,

376
00:38:32,640 --> 00:38:35,840
I always have to close my connection.

377
00:38:35,840 --> 00:38:40,160
This is mandatory.

378
00:38:40,160 --> 00:38:42,360
So we have this little snippet that is actually going

379
00:38:42,360 --> 00:38:44,280
to help me now to connect.

380
00:38:44,280 --> 00:38:47,280
And I have my host, my local host, my user.

381
00:38:47,280 --> 00:38:49,040
In this case, I'm using the user airflow

382
00:38:49,040 --> 00:38:50,920
that I created before.

383
00:38:50,920 --> 00:38:54,840
The password now all the world knows my database.

384
00:38:59,920 --> 00:39:04,840
So if I start my terminal here, I am in the right space.

385
00:39:07,360 --> 00:39:11,600
If I do a Python, ETL, no.

386
00:39:11,600 --> 00:39:25,680
Sorry, my terminal goes crazy when it's such a big font.

387
00:39:31,200 --> 00:39:33,080
So it's not very exciting, but at least we

388
00:39:33,080 --> 00:39:38,840
know that we are able to connect to my database.

389
00:39:38,840 --> 00:39:45,400
If I call python database slash python mysql.py,

390
00:39:45,400 --> 00:39:47,240
I'm executing this little snippet,

391
00:39:47,240 --> 00:39:49,720
and it tells me, hey, here is your connection.

392
00:39:49,720 --> 00:39:50,840
Here is your connector.

393
00:39:50,840 --> 00:39:56,360
And it gives you the allocation in memory for this object

394
00:39:56,360 --> 00:40:00,320
in true Python experience.

395
00:40:00,320 --> 00:40:01,400
Now we have a database.

396
00:40:01,400 --> 00:40:03,160
We know how to connect.

397
00:40:03,160 --> 00:40:05,200
We know that we always, always, always

398
00:40:05,200 --> 00:40:07,440
have to close our connection.

399
00:40:07,480 --> 00:40:08,920
And this is because if you forget

400
00:40:08,920 --> 00:40:12,040
to close your connection later on when we're doing streaming,

401
00:40:12,040 --> 00:40:13,800
and we are not only opening connection,

402
00:40:13,800 --> 00:40:16,760
but saving data and then querying data,

403
00:40:16,760 --> 00:40:18,360
our threads will just get clogged,

404
00:40:18,360 --> 00:40:20,000
and we won't be able to access anything.

405
00:40:22,960 --> 00:40:26,360
Then comes the nice things of streaming Twitter

406
00:40:26,360 --> 00:40:28,520
into the database.

407
00:40:28,520 --> 00:40:31,800
Well, in the meantime, while I give everyone a set of keys

408
00:40:31,800 --> 00:40:35,720
that they can use, the ones that don't have

409
00:40:35,720 --> 00:40:40,160
your own personal keys pair up with someone that does.

410
00:40:40,160 --> 00:40:43,360
Can you make sure that you're sitting next to someone

411
00:40:43,360 --> 00:40:46,120
so at least you can speed up, and then I'll just

412
00:40:46,120 --> 00:40:50,200
find a way to give you a set of keys.

413
00:40:50,200 --> 00:40:53,560
We're going to be using a library called TweetPy.

414
00:40:58,080 --> 00:41:00,720
Going to be using a library called TweetPy.

415
00:41:00,720 --> 00:41:06,600
And it's, in my opinion, is probably the best Python

416
00:41:06,600 --> 00:41:09,480
library, the best Python wrapper around the Twitter API.

417
00:41:09,480 --> 00:41:10,840
It's very intuitive.

418
00:41:10,840 --> 00:41:15,600
There are other around, but this one is very, very intuitive.

419
00:41:15,600 --> 00:41:18,520
It gets you up and running in very little time.

420
00:41:23,640 --> 00:41:27,360
And we're going to be doing the next two things.

421
00:41:27,360 --> 00:41:30,120
We're going to first create a class, an object,

422
00:41:30,120 --> 00:41:33,360
well, a Python class, sorry, to connect to the Twitter API.

423
00:41:33,360 --> 00:41:36,800
And this is going to allow us to identify ourselves

424
00:41:36,800 --> 00:41:39,240
and do this handshake with the Twitter API

425
00:41:39,240 --> 00:41:42,480
and say, hey, my name is Tanya, or my username is Shik.

426
00:41:42,480 --> 00:41:46,760
I can access the data.

427
00:41:46,760 --> 00:41:50,320
Then we're going to hook up these Airflow DB database

428
00:41:50,320 --> 00:41:54,640
that we created so that we can start streaming Twitter

429
00:41:54,640 --> 00:41:56,640
data into the database.

430
00:41:57,160 --> 00:42:02,360
So we're going to go and look at how a Tweet object actually

431
00:42:02,360 --> 00:42:05,600
looks like, what kind of data it has.

432
00:42:05,600 --> 00:42:07,480
It has actually a lot of data.

433
00:42:07,480 --> 00:42:10,040
That is why I like doing things with the Twitter API,

434
00:42:10,040 --> 00:42:14,240
because it gives you so much information from a single Tweet.

435
00:42:14,240 --> 00:42:15,240
It's beautiful.

436
00:42:20,080 --> 00:42:24,800
I'm going to open the Getting Started.

437
00:42:25,640 --> 00:42:28,560
Getting Started.

438
00:42:28,560 --> 00:42:31,960
And it gives you a very, very nice introduction

439
00:42:31,960 --> 00:42:36,120
on how to actually get up to speed

440
00:42:36,120 --> 00:42:37,520
or how you can get started.

441
00:42:40,960 --> 00:42:47,360
So for those of you that have your keys,

442
00:42:47,360 --> 00:42:54,320
I'm going to create a new directory in my demos

443
00:42:54,320 --> 00:42:56,960
called ETL Basic.

444
00:43:00,000 --> 00:43:05,320
This is where we're going to put all of our ETL Python scripts.

445
00:43:05,320 --> 00:43:11,560
And then I'm going to make a new file called config.config.

446
00:43:15,440 --> 00:43:17,160
It's going to be empty, but now I

447
00:43:17,160 --> 00:43:23,400
can edit it in my ID or my editor.

448
00:43:26,360 --> 00:43:31,800
We're going to have to create a copy and paste

449
00:43:31,800 --> 00:43:32,920
during Twitter keys.

450
00:43:32,920 --> 00:43:35,120
In the setup, you are given information

451
00:43:35,120 --> 00:43:38,880
on how to set up your account and then later on how

452
00:43:38,880 --> 00:43:41,080
to create an app.

453
00:43:41,080 --> 00:43:44,760
If you gave your app read access,

454
00:43:44,760 --> 00:43:47,880
you should have been issued with a consumer key, consumer

455
00:43:47,880 --> 00:43:51,400
secret, access token, and access token circuit.

456
00:43:51,400 --> 00:43:54,640
Now, you have to be very, very, very, very, very careful,

457
00:43:54,640 --> 00:44:01,800
because if you commit this to Git or GitLab or Bitbucket

458
00:44:01,800 --> 00:44:04,880
or anywhere, it's going to be out there.

459
00:44:04,880 --> 00:44:06,640
So the only thing that you can do

460
00:44:06,640 --> 00:44:12,880
after committing your keys is to burn those keys to death,

461
00:44:12,880 --> 00:44:16,960
kill your apps, delete them from your repository,

462
00:44:16,960 --> 00:44:20,360
and then create a new set of keys.

463
00:44:20,360 --> 00:44:21,760
That's the only thing you can do.

464
00:44:21,760 --> 00:44:25,160
There is no way to safeguard them after that.

465
00:44:25,160 --> 00:44:28,800
So you have to be very, very careful.

466
00:44:28,800 --> 00:44:32,520
So I'm going to just give you five minutes to do,

467
00:44:32,520 --> 00:44:37,200
folks, to create your config file to get your keys.

468
00:44:37,200 --> 00:44:39,320
You're going to have to replace them here

469
00:44:39,320 --> 00:44:42,320
with whatever Twitter gives you.

470
00:44:42,360 --> 00:44:45,640
And I'm going to sort out the ones that don't have.

471
00:44:49,840 --> 00:44:53,440
So put your red sticky, your orange sticky,

472
00:44:53,440 --> 00:44:55,520
while you're doing this, while you're getting your keys

473
00:44:55,520 --> 00:44:58,480
from your Twitter API, creating your config file.

474
00:45:01,640 --> 00:45:04,560
And I'm going to unplug this so that people don't see my keys.

475
00:45:12,320 --> 00:45:14,080
And then when I'm actually getting

476
00:45:14,080 --> 00:45:17,000
contact and I get noticing, I just know what you're doing.

477
00:45:17,000 --> 00:45:19,000
Did you activate?

478
00:50:12,320 --> 00:50:13,320
Hello.

479
00:50:13,320 --> 00:50:14,320
Yeah.

480
00:50:14,320 --> 00:50:15,320
OK, folks.

481
00:50:15,320 --> 00:50:17,840
So I have created a Google Doc where

482
00:50:17,840 --> 00:50:19,920
we have a couple of links.

483
00:50:19,920 --> 00:50:23,520
There is a final survey that you have to fill in.

484
00:50:23,520 --> 00:50:26,120
So please do it.

485
00:50:26,120 --> 00:50:28,320
I'm not going to read them.

486
00:50:28,320 --> 00:50:31,000
The results are going to be in the chat.

487
00:50:31,000 --> 00:50:32,920
So I'm going to go ahead and read them.

488
00:50:32,920 --> 00:50:35,320
And then I'm going to go ahead and click on the link.

489
00:50:35,320 --> 00:50:37,120
And then I'm going to click on the link.

490
00:50:37,120 --> 00:50:38,920
And then I'm going to click on the link.

491
00:50:38,920 --> 00:50:40,520
And then I'm going to click on the link.

492
00:50:41,440 --> 00:50:43,200
The results didn't come to me.

493
00:50:43,200 --> 00:50:47,880
So feel free to write whatever you want.

494
00:50:47,880 --> 00:50:51,120
Here is a link to the docs, well, to the tutorial docs.

495
00:50:51,120 --> 00:50:55,000
And I have created a Google Docs.

496
00:50:55,000 --> 00:51:00,480
So if you go to bit.ly slash airflow dash tutorial,

497
00:51:00,480 --> 00:51:01,760
that's going to take you here.

498
00:51:06,280 --> 00:51:09,520
And for those folks that don't have

499
00:51:09,520 --> 00:51:12,960
their Twitter API keys, write your email.

500
00:51:12,960 --> 00:51:17,040
And I'm just going to have to send you an encrypted email

501
00:51:17,040 --> 00:51:23,320
with keys and then bring them alive as soon as we finish this.

502
00:51:23,320 --> 00:51:24,840
Cool.

503
00:51:24,840 --> 00:51:27,680
The rest of you, have you created your config file?

504
00:51:27,680 --> 00:51:30,440
Yes.

505
00:51:30,440 --> 00:51:36,240
Oh, it is bit.ly airflow tutorial.

506
00:51:36,240 --> 00:51:38,320
Capital A, dash tutorial.

507
00:51:44,560 --> 00:51:49,760
Everything looks huge on my screen, but it looks tiny there.

508
00:51:49,760 --> 00:51:52,520
There you go.

509
00:51:52,520 --> 00:51:53,000
Thank you.

510
00:51:57,000 --> 00:52:00,800
Blue sticky, who's got their config file with their keys on

511
00:52:00,800 --> 00:52:04,360
so I can now have an idea?

512
00:52:04,360 --> 00:52:04,860
Yes.

513
00:52:07,240 --> 00:52:08,720
Can you not?

514
00:52:23,200 --> 00:52:23,700
OK.

515
00:52:27,200 --> 00:52:29,680
Can edit.

516
00:52:29,680 --> 00:52:31,040
There we go.

517
00:52:31,040 --> 00:52:31,960
Does it work now?

518
00:52:31,960 --> 00:52:32,720
Yes.

519
00:52:32,720 --> 00:52:34,200
I can see a few of you there.

520
00:52:37,240 --> 00:52:42,160
And I'm going to get your emails off the way.

521
00:52:42,160 --> 00:52:44,520
Cool.

522
00:52:44,520 --> 00:52:47,920
So it seems that most of you have your config file now.

523
00:52:47,920 --> 00:52:50,600
So we can move on, and we can start getting with the scripts

524
00:52:50,600 --> 00:52:54,400
and then get your your keys.

525
00:52:54,400 --> 00:52:55,280
Fabulous.

526
00:52:55,280 --> 00:53:00,880
So you should now have your config file there.

527
00:53:00,880 --> 00:53:04,760
Going to put it in there.

528
00:53:04,760 --> 00:53:07,640
You have your config file that looks like this

529
00:53:07,640 --> 00:53:10,200
and has to have that call to Twitter,

530
00:53:10,200 --> 00:53:12,480
because that's how we're actually going to extract the keys

531
00:53:12,480 --> 00:53:14,640
later on.

532
00:53:14,640 --> 00:53:18,680
We're going to start creating the actual script.

533
00:53:27,280 --> 00:53:32,320
So now I'm going to create inside the ETL Basic

534
00:53:32,320 --> 00:53:35,880
something that is called Connect Twitter.

535
00:53:40,280 --> 00:53:43,760
You can tell I didn't have a lot of imagination for naming.

536
00:53:43,760 --> 00:53:46,360
I'm going to use from config parser.

537
00:53:51,760 --> 00:53:53,880
And I'm going to import config parser.

538
00:53:53,880 --> 00:53:56,560
This is going to help me to actually get information

539
00:53:56,560 --> 00:53:58,840
from the configuration file.

540
00:53:58,840 --> 00:54:04,120
And then I'm going to use pathlib,

541
00:54:04,120 --> 00:54:06,760
because I like pathlib to manipulate paths.

542
00:54:06,760 --> 00:54:08,680
It makes everything easier.

543
00:54:08,680 --> 00:54:13,160
And I'm going to use import my library to a pi,

544
00:54:13,160 --> 00:54:16,160
because this is going to make it easier for all of us to access.

545
00:54:19,720 --> 00:54:23,720
The next thing is to create my global variable that

546
00:54:23,720 --> 00:54:26,640
is going to point to the config file.

547
00:54:26,640 --> 00:54:28,840
And I do this using path.

548
00:54:37,320 --> 00:54:38,880
For me, it's the current directory,

549
00:54:38,880 --> 00:54:40,440
because I know that I'm there.

550
00:54:43,640 --> 00:54:46,000
Config.cfg.

551
00:54:46,000 --> 00:54:50,680
You can also use, for example, path resolve or path of the such.

552
00:54:51,680 --> 00:54:55,040
Cool.

553
00:54:55,040 --> 00:54:58,280
So that's going to generate the path for myself.

554
00:54:58,280 --> 00:55:00,920
It's very nifty, because you only

555
00:55:00,920 --> 00:55:05,360
have to append whatever subpaths you have.

556
00:55:05,360 --> 00:55:11,880
Then we're going to create a config object that

557
00:55:11,880 --> 00:55:14,920
is a config parser.

558
00:55:14,920 --> 00:55:19,960
And the config then is going to read the actual config file.

559
00:55:20,680 --> 00:55:29,120
And then comes the nice bit.

560
00:55:29,120 --> 00:55:32,920
We're going to create an authentication object

561
00:55:32,920 --> 00:55:35,440
from tupi.

562
00:55:35,440 --> 00:55:38,200
And we use for this an OAuth handler.

563
00:55:38,200 --> 00:55:42,960
And we have to pass our consumer key and our consumer secrets.

564
00:55:45,640 --> 00:55:51,000
This is a way we actually authenticate into a pi.

565
00:55:51,000 --> 00:55:54,320
And then the second bit of authentication

566
00:55:54,320 --> 00:55:56,880
is your access tokens.

567
00:56:00,880 --> 00:56:03,920
And then we're going to create a new object.

568
00:56:03,920 --> 00:56:11,800
So after it has done that, it will return an authentication

569
00:56:11,800 --> 00:56:13,720
object.

570
00:56:13,720 --> 00:56:17,880
But you still have to create another object that

571
00:56:17,880 --> 00:56:22,320
is going to be the actual API wrapper.

572
00:56:22,320 --> 00:56:26,320
So for this, we're going to use the API.

573
00:56:26,320 --> 00:56:29,800
And it inherits from our authorization handler.

574
00:56:34,920 --> 00:56:38,360
And now what I'm going to do is I'm

575
00:56:38,360 --> 00:56:44,240
going to collect some tweets that are in my public timeline.

576
00:56:44,240 --> 00:56:47,880
So we're going to see what my friends are tweeting about.

577
00:56:47,880 --> 00:56:50,960
And for this, I'm going to use this directive

578
00:56:50,960 --> 00:56:52,280
called home timeline.

579
00:56:52,280 --> 00:56:54,360
It has a lot of things already built.

580
00:56:54,360 --> 00:56:57,120
That's why tupi is so easy to use.

581
00:56:57,120 --> 00:56:59,680
And then it's going to print the text.

582
00:57:00,680 --> 00:57:08,760
So find Guggen, Python, ETL, basic,

583
00:57:08,760 --> 00:57:09,960
and then connect to Twitter.

584
00:57:20,240 --> 00:57:22,120
I miss my parentheses.

585
00:57:30,200 --> 00:57:32,480
So now what it's going to do is it's

586
00:57:32,480 --> 00:57:35,360
going to connect to Twitter if it wants to do that.

587
00:57:52,880 --> 00:57:57,040
This is a very simple connector.

588
00:57:57,040 --> 00:57:57,920
There you go.

589
00:57:57,920 --> 00:57:59,320
This is a very simple connector.

590
00:57:59,440 --> 00:58:03,960
Because I didn't pass any information

591
00:58:03,960 --> 00:58:05,680
on how many tweets I want to collect,

592
00:58:05,680 --> 00:58:08,240
it just goes with the default. You can then

593
00:58:08,240 --> 00:58:13,520
pass something in here that is the number of tweets

594
00:58:13,520 --> 00:58:16,760
or for how long the connection is going to keep open

595
00:58:16,760 --> 00:58:17,880
and things of the such.

596
00:58:17,880 --> 00:58:19,560
But this is a very simple connection.

597
00:58:19,560 --> 00:58:21,680
But it already tells you whether you

598
00:58:21,680 --> 00:58:24,720
have connected successfully to the API or not.

599
00:58:30,320 --> 00:58:33,040
And now the next thing it's going to create

600
00:58:33,040 --> 00:58:36,360
is now that we are able to connect to the Twitter API,

601
00:58:36,360 --> 00:58:39,360
we need to create a table that is going to actually hold

602
00:58:39,360 --> 00:58:41,680
the different tweets or the different data that we're

603
00:58:41,680 --> 00:58:44,840
going to be gathering.

604
00:58:44,840 --> 00:58:46,920
And this is going to be living or this

605
00:58:46,920 --> 00:58:53,840
is going to live into our SQL database or SQL data table.

606
00:58:53,840 --> 00:58:56,560
So I'm going to look into the Twitter developer.

607
00:58:59,320 --> 00:58:59,840
Object.

608
00:59:06,320 --> 00:59:07,480
I almost forget to link.

609
00:59:10,680 --> 00:59:19,760
But I just want to show you what we actually have in here.

610
00:59:29,320 --> 00:59:30,320
There we go.

611
00:59:30,320 --> 00:59:31,320
OK.

612
00:59:31,320 --> 00:59:33,320
So by default, it's going to give you,

613
00:59:33,320 --> 00:59:35,120
inside the Twitter object, it's going

614
00:59:35,120 --> 00:59:39,120
to give you information of the user and the tweet itself.

615
00:59:39,120 --> 00:59:40,840
And it comes in the format.

616
00:59:40,840 --> 00:59:44,720
Well, you can parse it straight away into JSON object.

617
00:59:44,720 --> 00:59:49,000
So if you're familiar with JSON parsing,

618
00:59:49,000 --> 00:59:51,840
you'll know that you can access the different elements

619
00:59:51,840 --> 00:59:55,600
inside it as you access a dictionary object.

620
00:59:55,600 --> 00:59:56,920
Never mind.

621
00:59:56,920 --> 00:59:58,360
So we're going to create a table.

622
00:59:58,360 --> 01:00:01,320
We're going to create a simple stream listener.

623
01:00:01,320 --> 01:00:05,080
And this is going to save the username of the person that

624
01:00:05,080 --> 01:00:08,600
is tweeting the tweet content that is the actual text

625
01:00:08,600 --> 01:00:11,920
inside the tweet, the time of creation

626
01:00:11,920 --> 01:00:14,920
when that tweet was created, the retweet count,

627
01:00:14,920 --> 01:00:18,320
if there are half any, and all the other things.

628
01:00:18,320 --> 01:00:20,520
And then we're going to create a table.

629
01:00:20,520 --> 01:00:22,120
So we're going to create a table.

630
01:00:22,840 --> 01:00:24,880
The retweet count, if there are half any.

631
01:00:24,880 --> 01:00:27,760
And also, each of the tweets that you create

632
01:00:27,760 --> 01:00:29,760
have a unique tweet ID.

633
01:00:29,760 --> 01:00:31,960
And this is very, very helpful sometimes

634
01:00:31,960 --> 01:00:35,600
to do some sort of things.

635
01:00:35,600 --> 01:00:38,600
In SQL, this is going to correspond to five columns

636
01:00:38,600 --> 01:00:41,800
and an additional column for the primary key.

637
01:00:41,800 --> 01:00:44,920
And these primary keys, if you're familiar with pandas,

638
01:00:44,920 --> 01:00:46,760
is very similar to the index.

639
01:00:46,760 --> 01:00:49,680
So it will allow you to uniquely identify

640
01:00:49,680 --> 01:00:52,800
each of the entries.

641
01:00:52,800 --> 01:01:03,120
You can think of it as a pandas, as a pandas index stuff.

642
01:01:03,120 --> 01:01:10,520
So I'm going to create a stream Twitter.py script.

643
01:01:10,520 --> 01:01:15,400
And again, I'm going to do from my SQL import connector

644
01:01:15,400 --> 01:01:16,360
as my SQL.

645
01:01:16,360 --> 01:01:21,520
I'm just going to walk you through here

646
01:01:21,520 --> 01:01:23,720
and then copy and paste.

647
01:01:23,720 --> 01:01:26,040
I don't have to tape anything.

648
01:01:26,040 --> 01:01:29,800
As we did before, we're going to create our global environment,

649
01:01:29,800 --> 01:01:32,360
our global variable for our database.

650
01:01:32,360 --> 01:01:33,920
That is a dictionary.

651
01:01:33,920 --> 01:01:35,880
We have already seen this.

652
01:01:35,880 --> 01:01:40,080
Then we're going to create a database-related function.

653
01:01:40,080 --> 01:01:44,680
This first database function is going to first connect me

654
01:01:44,680 --> 01:01:45,440
to a database.

655
01:01:45,440 --> 01:01:47,240
That what we did before in the script.

656
01:01:47,240 --> 01:01:48,740
We're going to wrap it in a function

657
01:01:48,740 --> 01:01:51,440
so we can actually reuse it a lot of times.

658
01:01:54,280 --> 01:01:57,480
And we're going to wrap it around a try-accept

659
01:01:57,480 --> 01:01:59,800
just to make sure that we catch any errors.

660
01:01:59,800 --> 01:02:03,120
Because sometimes we can have errors with different stuff.

661
01:02:03,120 --> 01:02:05,400
For example, if we didn't close our connections

662
01:02:05,400 --> 01:02:09,880
or if we burn our user or the password and things of the such,

663
01:02:09,880 --> 01:02:13,680
you might want to have a try-catch

664
01:02:13,680 --> 01:02:15,080
and print the error for debugging.

665
01:02:18,200 --> 01:02:20,440
And this is the nice thing that we're going to do

666
01:02:20,440 --> 01:02:24,440
is create a function to create the table.

667
01:02:24,440 --> 01:02:27,040
So inside the Airflow DB that we have,

668
01:02:27,040 --> 01:02:28,800
we're going to create a new table.

669
01:02:28,800 --> 01:02:31,040
And for this purpose, we first need

670
01:02:31,040 --> 01:02:32,240
to connect to the database.

671
01:02:32,240 --> 01:02:34,600
We do a dbconnect object.

672
01:02:34,600 --> 01:02:36,680
And then we're going to create a cursor.

673
01:02:36,680 --> 01:02:39,300
And this cursor is the actual instance

674
01:02:39,300 --> 01:02:42,880
that allows us to do all of the extractions and queries

675
01:02:42,880 --> 01:02:44,160
and insertions of data.

676
01:02:47,160 --> 01:02:51,560
Sometimes, especially in Mac, MySQL gets a bit dodgy.

677
01:02:51,560 --> 01:02:53,960
And it forgets that you're using the database

678
01:02:53,960 --> 01:02:55,560
that you're logged into.

679
01:02:55,560 --> 01:02:58,320
So it's always safe to have a cursor execute

680
01:02:58,320 --> 01:02:59,360
use Airflow DB.

681
01:03:02,520 --> 01:03:05,200
It's just for precaution, just to know that you're always

682
01:03:05,200 --> 01:03:08,600
inside a database.

683
01:03:08,600 --> 01:03:11,920
And in this case, because I don't

684
01:03:11,920 --> 01:03:14,600
care very much about persistence,

685
01:03:14,600 --> 01:03:16,080
I'm giving also this directive.

686
01:03:16,080 --> 01:03:18,280
After you've connected to the database,

687
01:03:18,280 --> 01:03:20,880
after you've recognized it, I want

688
01:03:20,880 --> 01:03:24,160
to check if this table that I'm requesting already exists.

689
01:03:24,160 --> 01:03:26,000
And if it does, just delete it.

690
01:03:26,000 --> 01:03:28,080
Just drop it.

691
01:03:28,080 --> 01:03:33,080
You can change that directive for if table exists,

692
01:03:33,080 --> 01:03:34,240
then do nothing.

693
01:03:34,240 --> 01:03:36,560
If table doesn't exist, then do actually create it.

694
01:03:37,400 --> 01:03:41,360
And then we're going to create the columns where our data is

695
01:03:41,360 --> 01:03:44,920
actually going to fall into.

696
01:03:44,920 --> 01:03:48,880
And because the SQL queries are very, very, very long strings,

697
01:03:48,880 --> 01:03:51,280
I just wrap everything in parentheses.

698
01:03:51,280 --> 01:03:54,160
And I use f strings because I love f strings.

699
01:03:54,160 --> 01:03:56,360
And then this also allows reusability

700
01:03:56,360 --> 01:03:59,680
because you don't hard code stuff.

701
01:03:59,680 --> 01:04:02,080
But you can actually pass a parameter

702
01:04:02,080 --> 01:04:04,520
or the name of your table or your database.

703
01:04:04,520 --> 01:04:07,600
Or the name of your table or your database's parameter.

704
01:04:07,600 --> 01:04:12,600
Gives you much more flexibility when constructing stuff.

705
01:04:12,600 --> 01:04:13,960
So I'm going to create a table.

706
01:04:13,960 --> 01:04:16,000
However that table is going to be called,

707
01:04:16,000 --> 01:04:18,760
I'm going to call it tweets.

708
01:04:18,760 --> 01:04:22,360
And the first identifiable, the first row that is my primary key

709
01:04:22,360 --> 01:04:23,920
is going to be called ID.

710
01:04:23,920 --> 01:04:25,760
And it's going to be an int 11.

711
01:04:25,760 --> 01:04:28,880
You have to specify what type of data it is.

712
01:04:28,880 --> 01:04:30,880
And I don't want it to be empty.

713
01:04:30,880 --> 01:04:32,640
So I say no, no.

714
01:04:32,640 --> 01:04:34,600
And it's going to auto increment.

715
01:04:34,600 --> 01:04:39,400
It's going to start from one downwards.

716
01:04:39,400 --> 01:04:41,480
Then I'm going to add the user.

717
01:04:41,480 --> 01:04:43,680
And this is going to be the username on Twitter.

718
01:04:43,680 --> 01:04:45,240
And it's a bar chart because it's

719
01:04:45,240 --> 01:04:48,640
going to be a variable character or bar query.

720
01:04:48,640 --> 01:04:51,960
I'm also using timestamp for created

721
01:04:51,960 --> 01:04:57,000
because I'm going to parse them later on with the date time

722
01:04:57,000 --> 01:05:00,040
library so that they're in a useful format.

723
01:05:00,760 --> 01:05:04,440
The content of the tweet, the retweet count, and ID string.

724
01:05:04,440 --> 01:05:07,200
And then I bind my ID to my primary key

725
01:05:07,200 --> 01:05:10,160
to be my identifier.

726
01:05:10,160 --> 01:05:14,160
And then I take a cursor, execute this query,

727
01:05:14,160 --> 01:05:18,160
close my connection, and close my cursor.

728
01:05:18,160 --> 01:05:20,440
And just because I like seeing stuff,

729
01:05:20,440 --> 01:05:23,320
I just give a print stuff.

730
01:05:23,320 --> 01:05:24,840
OK, so you can go for a break.

731
01:05:24,840 --> 01:05:26,040
Let's break up here.

732
01:05:26,040 --> 01:05:28,640
And then we'll come back to put this together.

733
01:05:31,080 --> 01:05:33,000
We're doing OK for time.

734
01:05:33,000 --> 01:05:37,560
And during the break, I'll sort to you folks

735
01:05:37,560 --> 01:05:40,520
that don't have their Twitter API keys.

736
01:07:26,040 --> 01:07:26,540
Oh.

737
01:07:38,120 --> 01:07:43,480
OK, the Twitter team are keeping an eye on your applications

738
01:07:43,480 --> 01:07:47,160
because I pestered them a lot.

739
01:07:47,160 --> 01:07:50,600
So check your inbox because some of the folks

740
01:07:50,600 --> 01:07:53,240
are receiving approvals now.

741
01:07:53,240 --> 01:07:54,740
If you've not received an approval,

742
01:07:54,740 --> 01:07:56,900
go to the Google Doc, write your email,

743
01:07:56,900 --> 01:08:01,380
and I'll send you the keys in an encrypted email.

744
01:08:24,740 --> 01:08:25,240
OK.

745
01:08:54,740 --> 01:08:55,240
OK.

746
01:09:24,740 --> 01:09:25,240
OK.

747
01:09:54,740 --> 01:09:55,240
OK.

748
01:10:24,740 --> 01:10:25,240
OK.

749
01:10:54,740 --> 01:10:55,240
OK.

750
01:11:24,740 --> 01:11:25,240
OK.

751
01:11:54,740 --> 01:11:55,240
OK.

752
01:12:24,740 --> 01:12:25,240
OK.

753
01:12:54,740 --> 01:12:55,240
OK.

754
01:13:24,740 --> 01:13:25,240
OK.

755
01:13:54,740 --> 01:13:55,240
OK.

756
01:14:24,740 --> 01:14:25,240
OK.

757
01:14:54,740 --> 01:14:55,240
OK.

758
01:15:24,740 --> 01:15:25,240
OK.

759
01:15:54,740 --> 01:15:55,240
OK.

760
01:16:24,740 --> 01:16:25,240
OK.

761
01:16:54,740 --> 01:16:55,240
OK.

762
01:17:24,740 --> 01:17:25,240
OK.

763
01:17:54,740 --> 01:17:55,240
OK.

764
01:18:24,740 --> 01:18:25,240
OK.

765
01:18:54,740 --> 01:18:55,240
OK.

766
01:19:24,740 --> 01:19:25,240
OK.

767
01:19:54,740 --> 01:19:55,240
OK.

768
01:20:24,740 --> 01:20:25,240
OK.

769
01:20:54,740 --> 01:20:55,240
OK.

770
01:21:24,740 --> 01:21:25,240
OK.

771
01:21:54,740 --> 01:21:55,240
OK.

772
01:22:24,740 --> 01:22:45,060
Have, oh, you should all have, the ones that send me emails,

773
01:22:45,060 --> 01:22:46,380
I reply to your emails.

774
01:22:46,380 --> 01:22:52,540
The one that wrote your email on the Google pad, Google note,

775
01:22:52,540 --> 01:22:56,380
I send you Twitter API keys.

776
01:22:56,380 --> 01:22:59,500
Just ready to copy and paste into your config file.

777
01:22:59,500 --> 01:23:02,300
Cool.

778
01:23:02,300 --> 01:23:05,660
And just a recap.

779
01:23:05,660 --> 01:23:11,260
So now we created our function to create a table.

780
01:23:11,260 --> 01:23:12,700
So I'm going to copy this into.

781
01:23:12,700 --> 01:23:23,340
So I already have all of this to make it easier.

782
01:23:32,180 --> 01:23:35,740
Note that I added async true.

783
01:23:38,580 --> 01:23:41,660
Python, well, 3Py should be updated.

784
01:23:41,660 --> 01:23:44,260
Well, it says that it supports Python 3.7.

785
01:23:44,260 --> 01:23:47,260
So if you have 3.7, it's going to complain.

786
01:23:47,260 --> 01:23:49,140
And you can just remove the async.

787
01:23:49,140 --> 01:23:52,260
So that means that it's just going to be single-threaded,

788
01:23:52,260 --> 01:23:52,740
and it's fine.

789
01:23:55,580 --> 01:23:57,020
Cool.

790
01:23:57,020 --> 01:24:00,540
And then the next thing is we have created now

791
01:24:00,540 --> 01:24:02,340
our database functions.

792
01:24:02,340 --> 01:24:04,540
The first one that is going to allow us to connect,

793
01:24:04,540 --> 01:24:06,020
and then the second one that is actually

794
01:24:06,020 --> 01:24:07,420
going to create a table where I'm

795
01:24:07,420 --> 01:24:09,980
going to put all my tweets in.

796
01:24:10,020 --> 01:24:12,020
Now the next thing and the most important thing

797
01:24:12,020 --> 01:24:14,060
is to collect the tweets.

798
01:24:14,060 --> 01:24:17,420
And Twitter has a rate limit.

799
01:24:17,420 --> 01:24:18,740
You can read more about that.

800
01:24:18,740 --> 01:24:20,940
So that means that it's basically

801
01:24:20,940 --> 01:24:25,500
to prevent bots and folks from downloading too much data

802
01:24:25,500 --> 01:24:28,100
too fast.

803
01:24:28,100 --> 01:24:30,380
And also to prevent you from connecting

804
01:24:30,380 --> 01:24:35,300
to from 30 different apps or in different places.

805
01:24:35,300 --> 01:24:39,700
So I hope my app doesn't get blocked.

806
01:24:39,700 --> 01:24:41,580
Now the nice thing about TweetPy is

807
01:24:41,580 --> 01:24:43,340
that you don't have to worry about it,

808
01:24:43,340 --> 01:24:46,900
because TweetPy handles this rate connection limits

809
01:24:46,900 --> 01:24:48,740
very nicely, very swiftly.

810
01:24:53,140 --> 01:24:56,420
So that function that we created originally, that

811
01:24:56,420 --> 01:24:59,380
is the connect Twitter, well, that little snippet

812
01:24:59,380 --> 01:25:01,660
that we used before to connect to Twitter,

813
01:25:01,660 --> 01:25:04,340
we're going to transform it into a function again

814
01:25:04,340 --> 01:25:08,260
so that we can reuse it.

815
01:25:08,260 --> 01:25:12,180
We're going to import a JSON library

816
01:25:12,180 --> 01:25:18,020
to parse the tweets, to parse the JSON data.

817
01:25:18,020 --> 01:25:21,580
And we're also going to transform that.

818
01:25:21,580 --> 01:25:25,420
So I decided to call my function connectTweeter.

819
01:25:25,420 --> 01:25:26,820
So it's the same usual.

820
01:25:26,820 --> 01:25:30,260
I have my config file, parse the config file,

821
01:25:30,260 --> 01:25:33,100
create my authentication.

822
01:25:33,100 --> 01:25:35,180
The only difference, and you have to notice,

823
01:25:35,380 --> 01:25:40,980
that in the TweetPy API, I not only pass the argument off,

824
01:25:40,980 --> 01:25:44,500
but I also pass wait and rate limit equals true,

825
01:25:44,500 --> 01:25:47,460
and wait and rate limit notify equals true.

826
01:25:47,460 --> 01:25:49,620
So that's going to first, what is going to happen

827
01:25:49,620 --> 01:25:51,940
is as we create our stream listener,

828
01:25:51,940 --> 01:25:55,580
it is first going to issue a warning if we

829
01:25:55,580 --> 01:25:58,820
are approaching rate limits.

830
01:25:58,820 --> 01:26:01,620
And then when that happens, it's going to wait.

831
01:26:01,620 --> 01:26:04,300
It's going to wait and wait to our requests.

832
01:26:07,100 --> 01:26:10,940
Because I like, again, having intermediate stuff that

833
01:26:10,940 --> 01:26:13,500
tells me that I'm doing stuff, I'm not adding logger

834
01:26:13,500 --> 01:26:15,300
because we didn't have to do that.

835
01:26:15,300 --> 01:26:20,580
I'm just adding a simple printf connected us.

836
01:26:20,580 --> 01:26:24,580
And once I am connected, the Twitter object

837
01:26:24,580 --> 01:26:27,300
should be able to extract me because I'm authenticated

838
01:26:27,300 --> 01:26:27,860
as a check.

839
01:26:27,860 --> 01:26:31,300
So people are going to be authenticated as a check.

840
01:26:31,300 --> 01:26:32,980
The ones that have my keys.

841
01:26:32,980 --> 01:26:36,860
But you only have read access, so you can't tweet on my behalf.

842
01:26:39,620 --> 01:26:42,780
So I'm going to extract Twitter, me, and my screen name.

843
01:26:42,780 --> 01:26:45,860
And that is my Twitter username.

844
01:26:45,860 --> 01:26:48,140
Then it returns the Twitter object.

845
01:26:48,140 --> 01:26:52,140
We're going to be using this a lot in the next stuff.

846
01:26:52,140 --> 01:26:54,980
And the beautiful thing that is going

847
01:26:54,980 --> 01:26:56,660
to connect the data, that is actually

848
01:26:56,660 --> 01:26:59,380
going to collect the data, is the stream listener.

849
01:26:59,380 --> 01:27:02,380
And Tupi has a stream listener class.

850
01:27:02,380 --> 01:27:06,340
And we're going to inherit from that one.

851
01:27:06,340 --> 01:27:08,900
Basically, it's going to keep our connection

852
01:27:08,900 --> 01:27:12,180
to the home line open for as long as it has to.

853
01:27:14,660 --> 01:27:16,620
And I modified.

854
01:27:16,620 --> 01:27:20,980
I added a function that is called onError.

855
01:27:20,980 --> 01:27:25,660
And this 420 code is actually the rate limit code

856
01:27:25,660 --> 01:27:28,500
for the Twitter API.

857
01:27:29,260 --> 01:27:31,580
If I hit that, it's going to complain.

858
01:27:31,580 --> 01:27:33,700
And it's going to tell me, hey, what are you doing?

859
01:27:36,540 --> 01:27:40,660
Then you also have two options to process your data.

860
01:27:40,660 --> 01:27:43,180
You can choose using the onStatus.

861
01:27:43,180 --> 01:27:47,180
And that is only onStatus stuff.

862
01:27:47,180 --> 01:27:48,780
So that means that it's only tweets

863
01:27:48,780 --> 01:27:50,700
that people are putting on.

864
01:27:50,700 --> 01:27:52,540
Or you can use onData.

865
01:27:52,540 --> 01:27:58,020
And that gives you much more width

866
01:27:58,020 --> 01:27:59,740
of the actual collection of data.

867
01:27:59,740 --> 01:28:02,180
So that not only includes statuses,

868
01:28:02,180 --> 01:28:05,460
but it also includes direct messages

869
01:28:05,460 --> 01:28:10,900
that you receive, or mentions, or taggings.

870
01:28:10,900 --> 01:28:12,260
And you can also see your gifts there.

871
01:28:15,860 --> 01:28:18,820
So because we already created that SQL database,

872
01:28:18,820 --> 01:28:20,660
we already know what we're going to be extracting

873
01:28:20,660 --> 01:28:21,860
from the JSON object.

874
01:28:21,860 --> 01:28:24,940
And hopefully, yes, it loaded.

875
01:28:24,940 --> 01:28:27,460
So now we can actually have a sneak peek

876
01:28:27,460 --> 01:28:30,100
of what it has inside.

877
01:28:30,100 --> 01:28:32,820
A tweet has, this is the basic information.

878
01:28:32,820 --> 01:28:34,060
It tells you when it was created.

879
01:28:34,060 --> 01:28:36,060
This is how the ID looks.

880
01:28:36,060 --> 01:28:37,180
How the ID string.

881
01:28:37,180 --> 01:28:38,140
They're the same.

882
01:28:38,140 --> 01:28:40,540
Just in numerical or string format,

883
01:28:40,540 --> 01:28:44,660
we're going to use the string one to make it more annoying.

884
01:28:44,660 --> 01:28:46,740
The text, the user, and the entities.

885
01:28:46,740 --> 01:28:50,820
But then inside the dictionary, we have more stuff.

886
01:28:50,820 --> 01:28:53,100
So you have very interesting things,

887
01:28:53,100 --> 01:28:57,540
like in reply to followers count.

888
01:28:57,540 --> 01:29:04,180
If you look at the user part of the tweet.

889
01:29:04,180 --> 01:29:05,340
Yes.

890
01:29:05,340 --> 01:29:07,940
Bigger.

891
01:29:07,940 --> 01:29:09,260
It's super big here.

892
01:29:09,260 --> 01:29:11,140
Can you see better?

893
01:29:11,140 --> 01:29:13,660
If you look at the user part of the tweet,

894
01:29:13,660 --> 01:29:18,100
you can get the screen name, the location, if it's enabled,

895
01:29:18,100 --> 01:29:20,300
whether it's verified, the count of followers.

896
01:29:20,300 --> 01:29:21,540
So it's very, very rich.

897
01:29:21,540 --> 01:29:26,100
The amount of data that you can get from the API is amazing.

898
01:29:26,100 --> 01:29:29,740
And whether people have geolocation enabled,

899
01:29:29,740 --> 01:29:31,740
you can also see the coordinates.

900
01:29:34,620 --> 01:29:40,460
And there's another geolocation object called place.

901
01:29:40,460 --> 01:29:43,420
And this is nice because it not only gives you the coordinates,

902
01:29:43,420 --> 01:29:49,260
but it also gives you the country and the place type.

903
01:29:49,260 --> 01:29:51,420
So depending on the currency, it will tell you,

904
01:29:51,420 --> 01:29:54,540
I can only pinpoint this person to a country level

905
01:29:54,540 --> 01:29:58,980
or to a city level or something else.

906
01:29:58,980 --> 01:30:02,900
Don't use it for surveillance because that's

907
01:30:02,900 --> 01:30:05,940
a prohibited use of the API.

908
01:30:05,940 --> 01:30:08,780
So you can get a lot of information.

909
01:30:08,780 --> 01:30:14,180
But for these purposes, we're only going to extract on data.

910
01:30:14,180 --> 01:30:16,500
Again, I'm going to try to collect the raw data that

911
01:30:16,540 --> 01:30:20,780
I get from the API.

912
01:30:20,780 --> 01:30:22,860
And then I load it on JSON.

913
01:30:22,860 --> 01:30:25,460
This is going to take your object,

914
01:30:25,460 --> 01:30:28,580
parse it in JSON format so you can actually manipulate it.

915
01:30:28,580 --> 01:30:30,340
There are many ways in which you can then

916
01:30:30,340 --> 01:30:33,900
extract data from that.

917
01:30:33,900 --> 01:30:36,580
But I just went for a very simple one.

918
01:30:36,580 --> 01:30:40,220
And it checks first if text is present in raw data

919
01:30:40,220 --> 01:30:43,380
because I'm not interested in tweets that are just a GIF

920
01:30:43,380 --> 01:30:44,780
or that are just an image.

921
01:30:44,780 --> 01:30:48,100
I actually want to see the text coming from it.

922
01:30:48,100 --> 01:30:50,980
So if there is text, I'm going to first extract

923
01:30:50,980 --> 01:30:54,860
the screen name from the user when it was created,

924
01:30:54,860 --> 01:30:57,780
the text, the retweet count, and the ID string.

925
01:31:04,500 --> 01:31:11,420
So if you look at the same columns or the same data types

926
01:31:11,420 --> 01:31:13,380
that I created in my SQL database,

927
01:31:13,380 --> 01:31:15,900
so they match one to one, I'm going

928
01:31:15,900 --> 01:31:17,780
to create another helper function that

929
01:31:17,780 --> 01:31:21,300
is called populate table.

930
01:31:21,300 --> 01:31:24,020
And this is actually going to pass the data

931
01:31:24,020 --> 01:31:27,940
from the populate table from this Twitter object

932
01:31:27,940 --> 01:31:29,980
into my SQL database.

933
01:31:34,980 --> 01:31:37,620
So I'm going to give you five minutes

934
01:31:37,620 --> 01:31:41,580
to discuss with whoever is sitting next to you,

935
01:31:41,580 --> 01:31:43,500
how do we create a populate table?

936
01:31:43,500 --> 01:31:45,660
If you have any idea how you would actually,

937
01:31:45,660 --> 01:31:48,780
once you have your streamer on, once you have collected a tweet,

938
01:31:48,780 --> 01:31:51,900
how you're actually going to pass that into or persist

939
01:31:51,900 --> 01:31:54,220
it in your database.

940
01:31:54,220 --> 01:31:56,780
You have this example.

941
01:31:56,780 --> 01:32:00,940
And it's missing the actual implementation part.

942
01:32:00,940 --> 01:32:02,480
So I'm going to give you five minutes,

943
01:32:02,480 --> 01:32:03,980
so you can discuss how you would do it.

944
01:32:11,580 --> 01:32:13,980
OK.

945
01:32:41,580 --> 01:32:42,080
OK.

946
01:33:11,580 --> 01:33:12,080
OK.

947
01:33:41,580 --> 01:33:42,080
OK.

948
01:34:11,580 --> 01:34:12,080
OK.

949
01:34:41,580 --> 01:34:42,080
OK.

950
01:35:11,580 --> 01:35:12,080
OK.

951
01:35:41,580 --> 01:35:42,080
OK.

952
01:36:11,580 --> 01:36:12,080
OK.

953
01:36:41,580 --> 01:36:42,080
OK.

954
01:37:11,580 --> 01:37:12,080
OK.

955
01:37:41,580 --> 01:37:42,080
OK.

956
01:38:11,580 --> 01:38:28,140
So I think some of you, oh, this one is streamed to error.

957
01:38:28,140 --> 01:38:31,620
So let me go to where I have this solution.

958
01:38:41,580 --> 01:38:42,080
OK.

959
01:38:49,740 --> 01:38:54,220
So we have this bit, and then we have the create table.

960
01:38:54,220 --> 01:38:57,740
Then the next part is to populate the table.

961
01:38:57,740 --> 01:39:00,940
So we created our connection, our recursor.

962
01:39:00,940 --> 01:39:05,260
And the next thing is to create a SQL query.

963
01:39:05,260 --> 01:39:09,540
In this case, it's going to be an insert into tweets.

964
01:39:09,540 --> 01:39:13,620
And we're going to pass, again, the arguments in the same order

965
01:39:13,620 --> 01:39:15,500
that we declared them first.

966
01:39:15,500 --> 01:39:17,540
So we're going to be using user created

967
01:39:17,540 --> 01:39:20,180
at tweet, retweet, count, id.

968
01:39:20,180 --> 01:39:25,980
You have to make sure that they match the columns

969
01:39:25,980 --> 01:39:26,660
that you created.

970
01:39:29,460 --> 01:39:34,100
And then we pass the values with a percentage s.

971
01:39:34,100 --> 01:39:37,780
Again, we have how many columns we said?

972
01:39:37,780 --> 01:39:38,260
Five.

973
01:39:38,260 --> 01:39:39,340
So we have five columns.

974
01:39:39,340 --> 01:39:40,500
We're passing five values.

975
01:39:43,260 --> 01:39:48,860
And then we pass the cursor execute to execute the query,

976
01:39:48,860 --> 01:39:49,860
and we pass the values.

977
01:39:53,540 --> 01:39:54,580
And then we do the commit.

978
01:39:54,580 --> 01:39:56,340
If the commit is successful, meaning

979
01:39:56,340 --> 01:39:59,060
that everything went to right is going to be committed

980
01:39:59,060 --> 01:40:00,900
and is going to be persisted.

981
01:40:00,900 --> 01:40:03,340
If it's not, we're going to have our database

982
01:40:03,340 --> 01:40:06,500
is going to roll back and print an error.

983
01:40:08,940 --> 01:40:16,780
Now, because it's too much to type for you,

984
01:40:16,780 --> 01:40:20,860
if you go to flow tutorial, you're

985
01:40:20,860 --> 01:40:26,780
going to see that there is a solutions directory.

986
01:40:26,780 --> 01:40:30,020
And that has all of the solutions for the tutorial

987
01:40:30,020 --> 01:40:33,780
plus more examples.

988
01:40:33,780 --> 01:40:34,900
So if we go to ETL Basic.

989
01:40:43,660 --> 01:40:44,180
Oh, nice.

990
01:40:44,180 --> 01:40:45,420
People are fixing my typos.

991
01:40:48,260 --> 01:40:50,460
I love them.

992
01:40:50,460 --> 01:40:54,220
I pass them through stuff still, but cool.

993
01:40:54,220 --> 01:40:55,660
So if you go into stream Twitter,

994
01:40:55,660 --> 01:40:59,180
you can see the actual code.

995
01:40:59,180 --> 01:41:02,620
Now, let me run it myself so I can actually

996
01:41:02,620 --> 01:41:05,500
show you what it is.

997
01:41:05,500 --> 01:41:17,660
If I do Python ETL Basic, then stream Twitter.

998
01:41:17,660 --> 01:41:19,700
Oh, didn't like it.

999
01:41:32,620 --> 01:41:33,120
OK.

1000
01:41:50,700 --> 01:41:51,940
Somehow it doesn't.

1001
01:41:51,940 --> 01:41:53,540
Oh, OK.

1002
01:41:53,540 --> 01:41:56,180
This is the async thing that I was telling you about.

1003
01:41:56,180 --> 01:41:58,980
I forgot to remove it from my code.

1004
01:41:58,980 --> 01:42:01,540
So if we are running in Python 3.7,

1005
01:42:01,540 --> 01:42:05,700
it's going to complain because it doesn't like it.

1006
01:42:05,700 --> 01:42:10,660
Remember that in 3.7 async, we became a keyword.

1007
01:42:15,940 --> 01:42:20,460
I'm going to remove that async.

1008
01:42:20,460 --> 01:42:23,340
So now I have my function that connects to my database,

1009
01:42:23,340 --> 01:42:26,220
my function that creates my table in my database,

1010
01:42:26,220 --> 01:42:30,180
then my function that opens my stream list in order to Twitter,

1011
01:42:30,220 --> 01:42:34,420
my function that drops my data into my database.

1012
01:42:34,420 --> 01:42:36,780
The way you would normally do it in a Python script

1013
01:42:36,780 --> 01:42:40,660
would then be create a function.

1014
01:42:40,660 --> 01:42:42,700
Well, put it inside your main function.

1015
01:42:42,700 --> 01:42:46,140
So if you have ifname equals main,

1016
01:42:46,140 --> 01:42:48,180
first you're going to create your table.

1017
01:42:48,180 --> 01:42:52,540
And I decided to call it tweets because it's easy.

1018
01:42:52,540 --> 01:42:55,140
We authenticate Twitter before we actually

1019
01:42:55,140 --> 01:42:56,940
start our stream listener.

1020
01:42:56,940 --> 01:43:03,500
We create our stream listener, and then we stream to 2Py.

1021
01:43:03,500 --> 01:43:05,540
So we pass our authentication.

1022
01:43:05,540 --> 01:43:08,020
We have to pass the stream listener.

1023
01:43:08,020 --> 01:43:10,860
And I'm going to give it a timeout of 30 seconds,

1024
01:43:10,860 --> 01:43:15,020
just in case if it's trying to connect or redo a lot of retries.

1025
01:43:15,020 --> 01:43:18,020
Then after 30 seconds, it just stops doing it.

1026
01:43:18,020 --> 01:43:21,820
So it doesn't take my bandwidth.

1027
01:43:21,820 --> 01:43:25,740
Once you have your stream, you can either stream everything

1028
01:43:25,740 --> 01:43:29,060
or you can filter specific words.

1029
01:43:29,060 --> 01:43:31,940
For example, I am only interested in filtering things

1030
01:43:31,940 --> 01:43:37,420
that are contained in Python, PyCon, Jupyter, and PyCon 2019,

1031
01:43:37,420 --> 01:43:38,580
because we're in PyCon.

1032
01:43:38,580 --> 01:43:46,100
So what is going to happen when I run this script?

1033
01:43:46,100 --> 01:43:49,580
It's first going to tell me that it was connected to my database.

1034
01:43:49,580 --> 01:43:52,340
Then it's going to create a table.

1035
01:43:52,340 --> 01:43:54,500
And then it's going to connect to me as whoever I am.

1036
01:43:57,220 --> 01:44:01,580
If it successfully finds a Twitter that has those search

1037
01:44:01,580 --> 01:44:06,580
terms, are they PyCon, Jupyter, because I love Jupyter,

1038
01:44:06,580 --> 01:44:13,420
Python 2019, it's going to grab it, call that populate table,

1039
01:44:13,420 --> 01:44:16,260
and insert a new row.

1040
01:44:16,260 --> 01:44:18,300
And you can see that it's actually telling you

1041
01:44:18,300 --> 01:44:21,460
tweet collected at and that it actually has been committed.

1042
01:44:21,460 --> 01:44:25,540
So that's a new entry in your database.

1043
01:44:25,540 --> 01:44:31,460
Then it will also give you some warnings or errors

1044
01:44:31,460 --> 01:44:33,940
like incorrect string value.

1045
01:44:33,940 --> 01:44:38,820
And that comes a lot when you have special characters

1046
01:44:38,820 --> 01:44:43,700
or other languages, when it can just parse stuff,

1047
01:44:43,700 --> 01:44:46,940
weird data formats, and basically all the niceties

1048
01:44:46,940 --> 01:44:49,500
and weirdness that you get when you're processing text data.

1049
01:44:52,060 --> 01:44:55,060
Because this string listener is going to be open.

1050
01:44:55,060 --> 01:44:59,100
Once you run it, you only stop it with Control-C.

1051
01:44:59,100 --> 01:45:00,380
This is the only way we have to.

1052
01:45:04,340 --> 01:45:04,900
Cool.

1053
01:45:04,900 --> 01:45:09,660
So now we have a full extraction part.

1054
01:45:09,660 --> 01:45:11,420
Now the next thing that we're going to do

1055
01:45:11,420 --> 01:45:14,460
is once you have your extraction part,

1056
01:45:14,460 --> 01:45:18,180
do you care about what we're going to do with the data later?

1057
01:45:18,180 --> 01:45:20,420
You're not just storing the data in a database

1058
01:45:20,420 --> 01:45:21,900
for the sake of it.

1059
01:45:21,900 --> 01:45:23,860
But you're actually transferring it

1060
01:45:23,860 --> 01:45:25,300
to downstream processes.

1061
01:45:25,300 --> 01:45:27,580
And there are different mechanisms to do that.

1062
01:45:27,580 --> 01:45:31,460
You can either use files like CSV files or text files.

1063
01:45:31,460 --> 01:45:35,380
You can use databases like the one we have or use cues.

1064
01:45:35,380 --> 01:45:38,100
For example, you can use things like Celery

1065
01:45:38,100 --> 01:45:40,180
to create your cues and have your workers

1066
01:45:40,180 --> 01:45:41,540
and your consumers.

1067
01:45:44,100 --> 01:45:47,220
So then the next step would be to create a transformation part.

1068
01:45:47,220 --> 01:45:50,660
And this is going to consolidate your ETL part.

1069
01:45:55,100 --> 01:45:58,100
So we have our stream Twitter one.

1070
01:45:58,100 --> 01:46:00,740
And we're going to modify it so that it also

1071
01:46:00,740 --> 01:46:05,980
contains language for our account and country.

1072
01:46:05,980 --> 01:46:16,380
Again, the solution is in stream Twitter out.

1073
01:46:16,380 --> 01:46:20,260
And you're going to see that it's the same structure.

1074
01:46:20,260 --> 01:46:22,500
What changes is the database construction.

1075
01:46:22,500 --> 01:46:26,820
So I just expanded it so that it holds more columns.

1076
01:46:26,820 --> 01:46:29,900
So it's now going to hold the columns that we extracted

1077
01:46:29,900 --> 01:46:34,860
before, but it's also going to extract the country

1078
01:46:34,860 --> 01:46:36,660
the followers sent the language because we're

1079
01:46:36,660 --> 01:46:38,340
going to be doing some plots in language.

1080
01:46:38,340 --> 01:46:42,940
So naturally, you also have to update your stream listener

1081
01:46:42,940 --> 01:46:45,020
to add this additional stuff.

1082
01:46:45,020 --> 01:46:48,020
Now, there is only one thing or one gotcha

1083
01:46:48,020 --> 01:46:51,940
because all of the places or all of the place entries

1084
01:46:51,940 --> 01:46:56,180
in the tweets depend on the user having their geolocation

1085
01:46:56,180 --> 01:46:59,660
services enabled.

1086
01:46:59,660 --> 01:47:03,260
And funny enough, if it doesn't find that,

1087
01:47:03,260 --> 01:47:04,860
it's going to be a problem.

1088
01:47:05,660 --> 01:47:09,300
And funny enough, if it doesn't find it,

1089
01:47:09,300 --> 01:47:11,260
all of the parsing is going to fail.

1090
01:47:11,260 --> 01:47:14,660
And then all of your downstream processes are going to fail.

1091
01:47:14,660 --> 01:47:17,740
So we have to add, again, an if else or a gotcha

1092
01:47:17,740 --> 01:47:19,220
or a try or a catch.

1093
01:47:19,220 --> 01:47:22,940
So if that exists and it's not known, then it extracts it.

1094
01:47:22,940 --> 01:47:27,740
Otherwise, it's just going to return a known value.

1095
01:47:27,740 --> 01:47:32,060
And when we transfer this into our database,

1096
01:47:32,060 --> 01:47:35,420
it's going to keep the known value.

1097
01:47:35,420 --> 01:47:37,660
So then it'll make it easier for us to process later.

1098
01:47:43,180 --> 01:47:44,540
It's exactly the same thing.

1099
01:47:44,540 --> 01:47:50,540
I added a start stream function because then this

1100
01:47:50,540 --> 01:47:53,620
allows you to disconnect from the stream

1101
01:47:53,620 --> 01:47:55,220
if there are any fatal errors.

1102
01:47:55,220 --> 01:47:58,180
Again, instead of you having a failure

1103
01:47:58,220 --> 01:48:02,380
and then trying to reconnect or your API or your app

1104
01:48:02,380 --> 01:48:05,740
or whatever you have, trying to reconnect multiple times,

1105
01:48:05,740 --> 01:48:08,100
once it finds a fatal error, it's just

1106
01:48:08,100 --> 01:48:10,180
going to disconnect automatically.

1107
01:48:10,180 --> 01:48:14,060
So that's going to save your threads as well.

1108
01:48:14,060 --> 01:48:16,220
And in this case, I'm going to create a new table.

1109
01:48:16,220 --> 01:48:18,220
So I don't overwrite the table that I have.

1110
01:48:18,220 --> 01:48:21,740
So I'm going to call it tweets long.

1111
01:48:21,740 --> 01:48:25,540
And again, it has a timeout of 30 seconds.

1112
01:48:25,540 --> 01:48:28,100
And I have to get rid of the async.

1113
01:48:28,100 --> 01:48:32,700
So I'm going to run this for you so that you actually

1114
01:48:32,700 --> 01:48:34,620
see what it's doing.

1115
01:48:45,340 --> 01:48:48,740
It's going to be a very small database, but that's enough.

1116
01:48:51,620 --> 01:48:52,980
So it's the same process.

1117
01:48:52,980 --> 01:48:55,620
Again, creates the table, connects to the table,

1118
01:48:55,620 --> 01:48:59,380
opens the streaming, and then starts populating the database.

1119
01:49:04,460 --> 01:49:15,900
So the next thing that I want to show you is I'm going to open

1120
01:49:15,900 --> 01:49:18,500
a JupyterLab so you can actually see

1121
01:49:18,500 --> 01:49:23,860
what the next transformation process is going to be.

1122
01:49:23,860 --> 01:49:26,660
And I have already this little notebook that

1123
01:49:26,660 --> 01:49:30,820
has an analyzed Twitter part.

1124
01:49:30,820 --> 01:49:34,420
It's a very, very simple script because we

1125
01:49:34,420 --> 01:49:39,220
don't have time to start doing NLP things or tokenization.

1126
01:49:39,220 --> 01:49:42,100
But Twitter data is very, very good to do tokenization,

1127
01:49:42,100 --> 01:49:45,460
well, all of text analysis.

1128
01:49:45,460 --> 01:49:47,220
So I'm importing the usual libraries.

1129
01:49:47,220 --> 01:49:53,820
And in the meantime, I'm leaving my database there to populate.

1130
01:49:53,820 --> 01:49:56,020
So in the meantime, I'm going to load.

1131
01:49:56,020 --> 01:49:58,300
I'm going to use the traditional libraries

1132
01:49:58,300 --> 01:50:00,020
that you would use to do transformations

1133
01:50:00,020 --> 01:50:03,420
and cleaning and filtering.

1134
01:50:03,420 --> 01:50:05,140
So again, I have OS.

1135
01:50:05,140 --> 01:50:05,940
I have path.

1136
01:50:05,940 --> 01:50:07,420
I have ref or regex.

1137
01:50:10,540 --> 01:50:14,220
I have my SQL connector again because I want to connect.

1138
01:50:14,220 --> 01:50:15,420
I have non-pine pandas.

1139
01:50:18,700 --> 01:50:22,940
Again, we have the database that we already know this.

1140
01:50:22,940 --> 01:50:24,620
But I'm going to create two functions.

1141
01:50:24,620 --> 01:50:27,080
The first one is imagine that after you

1142
01:50:27,080 --> 01:50:30,260
have created or cleaned and filtered all your data,

1143
01:50:30,260 --> 01:50:32,540
you want to persist them somewhere.

1144
01:50:32,540 --> 01:50:35,100
It can be in your Azure Blob storage

1145
01:50:35,100 --> 01:50:38,700
or if you use other services, it could be S3.

1146
01:50:38,700 --> 01:50:42,380
Or it could be your local database or local place.

1147
01:50:42,380 --> 01:50:44,460
Doesn't matter.

1148
01:50:44,460 --> 01:50:46,260
So it's going to take my database, whatever

1149
01:50:46,260 --> 01:50:52,020
that database is, find a table that I want to persist,

1150
01:50:52,020 --> 01:50:55,180
create a connection, and again, create a query.

1151
01:50:55,180 --> 01:50:57,860
Because I want to extract all of the tweets,

1152
01:50:57,860 --> 01:51:02,820
I just select everything from whichever table.

1153
01:51:02,820 --> 01:51:08,620
And then it verifies whether I have a directory called data.

1154
01:51:08,620 --> 01:51:11,540
And if not, it will create it first and then

1155
01:51:11,540 --> 01:51:15,060
save that into CSV file.

1156
01:51:15,060 --> 01:51:17,620
So I'm going to run this.

1157
01:51:17,620 --> 01:51:20,460
And then I have a data processing part.

1158
01:51:20,460 --> 01:51:22,700
So once I have my SQL, pandas also

1159
01:51:22,700 --> 01:51:27,940
is very nice because it can read SQL and interpret it properly

1160
01:51:27,940 --> 01:51:28,620
immediately.

1161
01:51:28,620 --> 01:51:30,900
It has these nice rubbers.

1162
01:51:30,900 --> 01:51:32,740
So this one, what it's going to do is, again,

1163
01:51:32,740 --> 01:51:35,260
the same connect to my database, create a cursor,

1164
01:51:35,260 --> 01:51:37,620
select everything that I have in my table,

1165
01:51:37,620 --> 01:51:39,340
start in a data frame.

1166
01:51:39,340 --> 01:51:41,620
So we have read SQL query.

1167
01:51:41,620 --> 01:51:45,740
I create a query that is all the thing here from the database

1168
01:51:45,740 --> 01:51:47,300
and collect the index.

1169
01:51:50,740 --> 01:51:51,940
OK?

1170
01:51:51,940 --> 01:51:57,660
So it connected nicely to my Airflow dot tweets.

1171
01:51:57,660 --> 01:52:00,860
Now I'm going to do a simple query.

1172
01:52:00,860 --> 01:52:05,500
So if I look at the database, how it looks,

1173
01:52:05,500 --> 01:52:07,620
it's going to be very small.

1174
01:52:07,620 --> 01:52:11,140
But you can see that I have, because I passed,

1175
01:52:11,140 --> 01:52:15,020
that the indexes I did, that primary key that I created,

1176
01:52:15,020 --> 01:52:16,940
it's properly indexed now.

1177
01:52:16,940 --> 01:52:19,900
So I have the users.

1178
01:52:20,060 --> 01:52:25,300
I have my timestamps, the data, the retweet count.

1179
01:52:25,300 --> 01:52:29,180
So let's imagine that you don't care about the retweets.

1180
01:52:29,180 --> 01:52:30,660
So you can get rid of it.

1181
01:52:30,660 --> 01:52:34,260
So you can say, well, clean that and extract all of the rows

1182
01:52:34,260 --> 01:52:36,140
that do not contain a retweet.

1183
01:52:36,140 --> 01:52:39,860
I only care about tweets that are original tweets.

1184
01:52:39,860 --> 01:52:43,300
And also, probably for parsing purposes,

1185
01:52:43,300 --> 01:52:46,300
you want to make all of your user names lowercase

1186
01:52:46,300 --> 01:52:49,020
or get rid of a special case, special cases

1187
01:52:49,020 --> 01:52:56,020
or have the actual encoding for certain characters,

1188
01:52:56,020 --> 01:52:59,340
depending on what your application is.

1189
01:52:59,340 --> 01:53:06,260
So I call this on my data frame and that does some cleaning.

1190
01:53:06,260 --> 01:53:08,460
But this data is not very exciting.

1191
01:53:08,460 --> 01:53:09,340
It's quite small.

1192
01:53:09,340 --> 01:53:11,820
So I'm going to call it on the tweets log,

1193
01:53:11,820 --> 01:53:13,660
the extended database.

1194
01:53:16,980 --> 01:53:18,700
And here we have more data.

1195
01:53:18,700 --> 01:53:22,140
We have on top the country.

1196
01:53:22,140 --> 01:53:24,780
The tweets don't have country, but we have number of followers.

1197
01:53:24,780 --> 01:53:26,780
We have language.

1198
01:53:26,780 --> 01:53:30,260
And then we can start doing plots, for example.

1199
01:53:30,260 --> 01:53:31,620
Probably I want to plot.

1200
01:53:41,020 --> 01:53:44,100
It doesn't like my path.

1201
01:53:44,100 --> 01:53:46,700
Probably I want to plot how many of the people

1202
01:53:46,700 --> 01:53:49,620
that are talking about Python come from the states

1203
01:53:49,620 --> 01:53:53,300
or from different countries or have a lot of followers.

1204
01:53:53,300 --> 01:53:55,100
So then you can go and talk to those

1205
01:53:55,100 --> 01:53:58,340
and have a lot of followers or two followers,

1206
01:53:58,340 --> 01:54:02,180
whatever you're interested in.

1207
01:54:02,180 --> 01:54:06,260
And then you can save your DF or your data frame

1208
01:54:06,260 --> 01:54:09,020
directly into a CSV file.

1209
01:54:09,860 --> 01:54:14,740
So if we look here, we're going to have our data and stuff.

1210
01:54:14,740 --> 01:54:16,900
And this is very useful because this now

1211
01:54:16,900 --> 01:54:21,220
gives us the whole idea of how an ETL pipeline would

1212
01:54:21,220 --> 01:54:23,980
look like using Python.

1213
01:54:23,980 --> 01:54:26,900
Now the next thing is, how would you normally

1214
01:54:26,900 --> 01:54:28,860
put this together?

1215
01:54:28,860 --> 01:54:33,060
If you were given this task, how do you

1216
01:54:33,060 --> 01:54:36,580
tie these scripts that do the extraction?

1217
01:54:36,580 --> 01:54:40,260
These scripts that do the extraction and the listening

1218
01:54:40,260 --> 01:54:45,460
and database creation and then the analysis?

1219
01:54:45,460 --> 01:54:47,340
If you don't have a workflow manager,

1220
01:54:47,340 --> 01:54:50,340
how would you normally do it?

1221
01:54:50,340 --> 01:54:52,380
Cron.

1222
01:54:52,380 --> 01:54:53,020
What else?

1223
01:54:55,860 --> 01:54:57,180
Bash.

1224
01:54:57,180 --> 01:54:58,100
Nice.

1225
01:54:58,100 --> 01:54:59,580
What else can we use?

1226
01:54:59,580 --> 01:55:00,580
I'm late.

1227
01:55:00,580 --> 01:55:01,080
Oh.

1228
01:55:04,580 --> 01:55:06,580
Yeah, you can use Lambdas.

1229
01:55:06,580 --> 01:55:07,100
Yeah.

1230
01:55:07,100 --> 01:55:11,100
You can use things like make or snake make.

1231
01:55:11,100 --> 01:55:11,620
All right.

1232
01:55:11,620 --> 01:55:14,380
So but the thing is, more than likely,

1233
01:55:14,380 --> 01:55:16,380
what is going to happen, and I'm going to just show

1234
01:55:16,380 --> 01:55:22,220
the simplest of examples, which is going to the basics.

1235
01:55:22,220 --> 01:55:26,220
I know, and it's creating a lot of different things.

1236
01:55:26,220 --> 01:55:34,500
The basics that I know, and it's creating an ETL.bash.

1237
01:55:34,500 --> 01:55:38,940
And it's as easy as calling the script that does the stream

1238
01:55:38,940 --> 01:55:43,100
and let us know when the extraction is started,

1239
01:55:43,100 --> 01:55:44,500
when the extraction was completed,

1240
01:55:44,500 --> 01:55:45,900
and then it started cleaning.

1241
01:55:45,900 --> 01:55:48,700
There is one caveat, because if you remember,

1242
01:55:48,700 --> 01:55:54,860
the stream listener is open until you interrupt it.

1243
01:55:54,860 --> 01:55:56,460
It's just going to stream forever.

1244
01:55:56,460 --> 01:56:01,420
So you're never going to get to journalized Twitter.

1245
01:56:01,420 --> 01:56:03,580
What there is, you can time it.

1246
01:56:03,580 --> 01:56:09,140
You can add an additional stuff.

1247
01:56:09,140 --> 01:56:10,220
Let me find it.

1248
01:56:10,220 --> 01:56:14,220
If you remember, we're filtering the data

1249
01:56:14,220 --> 01:56:15,900
as they come in their own data stuff.

1250
01:56:16,540 --> 01:56:22,580
So what we can do here is set a time.

1251
01:56:22,580 --> 01:56:27,300
So get the time when that starts and say time, time.

1252
01:56:27,300 --> 01:56:29,660
Use the library time.

1253
01:56:29,660 --> 01:56:32,620
And then subtract the self-start time.

1254
01:56:32,620 --> 01:56:35,940
But we can assign itself at the beginning here.

1255
01:56:35,940 --> 01:56:38,740
We can create an initialization function

1256
01:56:38,740 --> 01:56:41,100
inside my stream listener.

1257
01:56:41,100 --> 01:56:42,900
So you can do a def done.int.

1258
01:56:42,900 --> 01:56:45,220
And I can give it whatever time limit.

1259
01:56:45,220 --> 01:56:48,020
In this case, I gave it 60 seconds.

1260
01:56:48,020 --> 01:56:52,380
But you can give it an hour, two hours, two days, whatever.

1261
01:56:52,380 --> 01:56:55,220
And then you define your start time,

1262
01:56:55,220 --> 01:56:59,580
which is as soon as it enters that part or that queue.

1263
01:56:59,580 --> 01:57:01,100
And then assign a time limit.

1264
01:57:03,940 --> 01:57:08,220
Now, for those of you that are not very familiar with this,

1265
01:57:08,220 --> 01:57:10,820
we are going to do a time limit.

1266
01:57:10,820 --> 01:57:13,620
For those of you that are not very familiar with this,

1267
01:57:13,620 --> 01:57:16,700
we are using the super method.

1268
01:57:16,700 --> 01:57:21,060
So we can actually wrap around our custom listener.

1269
01:57:21,060 --> 01:57:23,900
And it initializes using not only

1270
01:57:23,900 --> 01:57:28,220
the default stream listener initialization or variables

1271
01:57:28,220 --> 01:57:34,660
or methods, but also this one that we are extending on.

1272
01:57:34,660 --> 01:57:38,460
So that way, it allows you to do this.

1273
01:57:38,460 --> 01:57:41,220
If the self timer is bigger, then it

1274
01:57:41,220 --> 01:57:43,380
will shut down immediately.

1275
01:57:48,740 --> 01:57:54,860
So that way, I can now call it homage

1276
01:57:54,860 --> 01:57:57,020
and then do an ETL basic.

1277
01:57:57,020 --> 01:57:59,020
So again, it's going to start.

1278
01:57:59,020 --> 01:58:00,300
I only gave it 60 seconds.

1279
01:58:00,300 --> 01:58:04,140
So as soon as those 60 seconds finish,

1280
01:58:04,140 --> 01:58:07,220
my stream listener is going to be killed.

1281
01:58:07,220 --> 01:58:09,780
It's going to do the analysis and cleansing.

1282
01:58:09,780 --> 01:58:13,940
And that is OK if you have one pipeline

1283
01:58:13,940 --> 01:58:16,140
that you need to look after.

1284
01:58:16,140 --> 01:58:18,900
But what happens when you have a problem?

1285
01:58:18,900 --> 01:58:20,740
So let's say you have a problem.

1286
01:58:20,740 --> 01:58:23,140
And you have to do an ETL basic.

1287
01:58:23,140 --> 01:58:25,340
And then you have to do an ETL basic.

1288
01:58:25,980 --> 01:58:31,060
But what happens when you have 100 pipelines or 20 pipelines

1289
01:58:31,060 --> 01:58:35,420
or, I don't know, 20 APIs?

1290
01:58:35,420 --> 01:58:39,780
Then that's when we have to start using things like Airflow.

1291
01:58:43,380 --> 01:58:45,380
And that's what we're going to start doing now.

1292
01:58:48,740 --> 01:58:51,660
Now, the beauty of Airflow is that it not only

1293
01:58:51,660 --> 01:58:55,020
allows you to define your workflow,

1294
01:58:55,020 --> 01:58:57,540
but it also takes care of all the scheduling

1295
01:58:57,540 --> 01:58:59,220
and running the jobs.

1296
01:58:59,220 --> 01:59:01,860
You still have to write CRUN, I'm sorry.

1297
01:59:01,860 --> 01:59:06,420
And you still have to understand what it's doing.

1298
01:59:06,420 --> 01:59:09,260
But it also ensures that everything is sorted,

1299
01:59:09,260 --> 01:59:11,220
that it's also based on your dependencies.

1300
01:59:11,220 --> 01:59:15,980
So you know what part of your pipeline has completed

1301
01:59:15,980 --> 01:59:18,660
and which not, and which do you retry.

1302
01:59:21,780 --> 01:59:22,580
Oh.

1303
01:59:22,580 --> 01:59:23,080
Oh.

1304
01:59:26,020 --> 01:59:28,300
Oh, it doesn't like my back end.

1305
01:59:28,300 --> 01:59:32,140
OK, so you see that it actually completed the collection.

1306
01:59:32,140 --> 01:59:36,620
And then it should do the analysis part.

1307
01:59:36,620 --> 01:59:38,580
The correct solutions are all in that repo,

1308
01:59:38,580 --> 01:59:41,100
so you can follow along later on and then spend more time.

1309
01:59:44,380 --> 01:59:46,140
Also, the nice thing from Airflow

1310
01:59:46,140 --> 01:59:49,260
is that if your DAG fails, like in this case,

1311
01:59:49,260 --> 01:59:52,620
it's very easy to retry them or re-trigger them

1312
01:59:52,620 --> 01:59:57,300
so that you can actually do whatever is missing.

1313
02:00:00,660 --> 02:00:02,300
Now, when we talk about Airflow, we

1314
02:00:02,300 --> 02:00:06,140
have to have a short understanding of what

1315
02:00:06,140 --> 02:00:07,300
things are in Airflow.

1316
02:00:07,300 --> 02:00:08,500
The first one is a task.

1317
02:00:08,500 --> 02:00:12,820
And this is a unified unit of work.

1318
02:00:12,820 --> 02:00:15,540
In this case, for example, the task is going to be,

1319
02:00:15,540 --> 02:00:17,700
I don't know, stream tweets.

1320
02:00:17,700 --> 02:00:19,860
Then the other task is going to be clean data.

1321
02:00:19,860 --> 02:00:24,940
Then the other one is going to be saved to CSVs.

1322
02:00:24,940 --> 02:00:28,500
And a task instance is when one of these tasks

1323
02:00:28,500 --> 02:00:29,660
is actually running.

1324
02:00:29,660 --> 02:00:31,860
But it's not only when it has run,

1325
02:00:31,860 --> 02:00:35,820
but it has attached metadata on the status of that.

1326
02:00:35,820 --> 02:00:39,100
And it tells you whether it succeeds, a failure,

1327
02:00:39,100 --> 02:00:42,940
a skip, or to retry, or if it's queued.

1328
02:00:45,540 --> 02:00:47,820
And the way we organize things in Airflow

1329
02:00:47,820 --> 02:00:51,940
is through directed acyclic graphs, which

1330
02:00:51,940 --> 02:00:55,540
look something like this.

1331
02:00:55,540 --> 02:00:57,460
They have a start and an end.

1332
02:00:57,460 --> 02:00:58,740
It's very well-defined.

1333
02:00:58,740 --> 02:00:59,960
And they don't have loops.

1334
02:00:59,960 --> 02:01:02,620
That's why it is acyclic.

1335
02:01:02,620 --> 02:01:04,360
But it makes it very easy to track

1336
02:01:04,360 --> 02:01:06,540
the dependencies between tasks.

1337
02:01:06,540 --> 02:01:10,540
So you can say task A completes.

1338
02:01:10,540 --> 02:01:13,140
Each node of this is going to correspond to a tag.

1339
02:01:13,140 --> 02:01:17,340
And then that corresponds to a part of your data processing.

1340
02:01:17,340 --> 02:01:21,980
For example, in our case, node A is the polling data

1341
02:01:21,980 --> 02:01:22,780
from the API.

1342
02:01:22,780 --> 02:01:25,180
In this case, it's the Twitter API.

1343
02:01:25,180 --> 02:01:28,500
Then node B can be the code for anonymizing the data.

1344
02:01:28,500 --> 02:01:31,940
For example, if we don't want to know who the person is that

1345
02:01:31,940 --> 02:01:34,440
created the tweet, sorry, but we're only

1346
02:01:34,440 --> 02:01:37,460
interested in the text, we can do that.

1347
02:01:37,460 --> 02:01:41,900
Then node C can be checking that there are no duplicates,

1348
02:01:41,900 --> 02:01:45,100
checking that there are no retweets, that I

1349
02:01:45,100 --> 02:01:47,560
don't know if we're only doing analysis on Polish language,

1350
02:01:47,560 --> 02:01:50,860
that we only extract the ones that are in Polish language,

1351
02:01:50,860 --> 02:01:54,460
and so on and so on and so on.

1352
02:01:54,460 --> 02:02:02,860
So going back to good ETL architectures is idempotency.

1353
02:02:02,860 --> 02:02:06,280
Again, it's very tied to the sense of reproducibility.

1354
02:02:06,280 --> 02:02:11,540
And if I were to run a DAG today on the same data tomorrow,

1355
02:02:11,540 --> 02:02:13,260
and the same DAG on the same data tomorrow,

1356
02:02:13,260 --> 02:02:16,300
it should give us the same result.

1357
02:02:16,300 --> 02:02:20,340
And Airflow gives you very good options to do that.

1358
02:02:20,340 --> 02:02:23,500
It allows you to understand and keep track of when

1359
02:02:23,500 --> 02:02:26,260
your DAGs are running, what they're doing,

1360
02:02:26,260 --> 02:02:27,900
what are the intermediate dependencies

1361
02:02:27,900 --> 02:02:29,160
and the final dependencies.

1362
02:02:32,780 --> 02:02:35,060
And before we actually spin it up,

1363
02:02:35,060 --> 02:02:38,140
you're going to see that it's quite convoluted.

1364
02:02:38,140 --> 02:02:41,580
Airflow is very nice and very easy

1365
02:02:41,580 --> 02:02:44,380
to start working with in the sense of you can create

1366
02:02:44,380 --> 02:02:47,780
a simple DAG very easily.

1367
02:02:47,780 --> 02:02:50,140
But the actual architecture can be a pain,

1368
02:02:50,140 --> 02:02:55,300
because you need, on one side, your queue,

1369
02:02:55,300 --> 02:02:58,260
something that is actually going to send the messages

1370
02:02:58,260 --> 02:03:03,140
to your workflow manager and say, hey, you need to run this.

1371
02:03:03,140 --> 02:03:07,700
You need to collect the results from this.

1372
02:03:07,700 --> 02:03:10,300
We also need a worker.

1373
02:03:10,300 --> 02:03:13,820
And we also have a scheduler and a work server.

1374
02:03:13,820 --> 02:03:16,500
So a scheduler is basically CRUN.

1375
02:03:19,780 --> 02:03:22,740
So the work server, it has a very, very nice UI.

1376
02:03:22,740 --> 02:03:24,160
We're going to be playing with it.

1377
02:03:24,160 --> 02:03:25,380
It makes it very intuitive.

1378
02:03:25,380 --> 02:03:28,820
It's all built in Flask.

1379
02:03:28,820 --> 02:03:31,340
And the advantages, as well, is that it comes by default

1380
02:03:31,340 --> 02:03:33,420
with Ginger.

1381
02:03:33,420 --> 02:03:36,500
So you can create your own templates for your stuff.

1382
02:03:36,500 --> 02:03:37,980
It's very flexible.

1383
02:03:37,980 --> 02:03:39,660
Then the scheduler is actually what

1384
02:03:39,660 --> 02:03:42,940
tells you you can't schedule on run days every Monday

1385
02:03:42,940 --> 02:03:47,180
at 5 o'clock, or your report is going to go every other month.

1386
02:03:49,780 --> 02:03:53,660
We have our executor that is the actual unit that

1387
02:03:53,660 --> 02:03:54,540
runs the task.

1388
02:03:54,540 --> 02:03:56,700
And in this, we have a lot of flexibility.

1389
02:03:56,700 --> 02:03:59,500
We have a sequential executor.

1390
02:03:59,500 --> 02:04:04,500
Its name means that you can only run one task at a time.

1391
02:04:04,500 --> 02:04:06,060
We have a salary executor.

1392
02:04:06,060 --> 02:04:08,580
Kubernetes executor.

1393
02:04:08,580 --> 02:04:10,500
So it really, really allows you to scale

1394
02:04:10,500 --> 02:04:12,980
from running things in your local computer

1395
02:04:12,980 --> 02:04:16,860
to at a much larger scale and better managed infrastructure

1396
02:04:16,860 --> 02:04:17,760
like Kubernetes.

1397
02:04:21,060 --> 02:04:22,660
And everything is a code.

1398
02:04:22,660 --> 02:04:25,060
That's the most beautiful thing of Fireflow.

1399
02:04:25,060 --> 02:04:27,100
Everything is code.

1400
02:04:27,100 --> 02:04:29,700
Your whole workflow, all of your dependencies,

1401
02:04:29,700 --> 02:04:34,120
all of your parameters, everything is a code.

1402
02:04:34,120 --> 02:04:36,400
So you can version control it.

1403
02:04:36,400 --> 02:04:40,080
You can do it so that you have, for example, a Git repository.

1404
02:04:40,080 --> 02:04:44,200
And then you change something in your configuration.

1405
02:04:44,200 --> 02:04:46,520
And it will auto sync with that repository.

1406
02:04:46,520 --> 02:04:50,740
So you can almost imagine having your CI or your CD pipeline.

1407
02:04:50,740 --> 02:04:53,800
When you push code there, it will do some tests,

1408
02:04:53,800 --> 02:04:57,600
deploy automatically, or update your Airflow instance

1409
02:04:57,600 --> 02:04:59,680
wherever it is.

1410
02:04:59,680 --> 02:05:03,000
So that gives you a lot of flexibilities.

1411
02:05:03,040 --> 02:05:06,600
And we also have things called operators

1412
02:05:06,600 --> 02:05:10,440
that allows you to identify or run a task.

1413
02:05:10,440 --> 02:05:13,960
Again, the more atomic everything is, the better,

1414
02:05:13,960 --> 02:05:18,240
because you can run things in the most appropriate operator.

1415
02:05:18,240 --> 02:05:21,800
You have things like bash operator, Python operator,

1416
02:05:21,800 --> 02:05:26,160
email operator, simpleHTB, MySQL operator.

1417
02:05:26,160 --> 02:05:30,760
So they will do tasks that are native to their structure.

1418
02:05:30,760 --> 02:05:33,680
So bash, you can do all the things you do with bash,

1419
02:05:33,680 --> 02:05:37,720
with Python, so you can leverage the main advantages of this.

1420
02:05:37,720 --> 02:05:40,360
And when it comes to alerting and monitoring,

1421
02:05:40,360 --> 02:05:43,600
having the email operator, and now there is also integration

1422
02:05:43,600 --> 02:05:47,440
with Slack, it allows you to have real time,

1423
02:05:47,440 --> 02:05:51,040
or almost real time, notification and monitoring

1424
02:05:51,040 --> 02:05:52,000
capabilities.

1425
02:05:54,720 --> 02:06:00,320
So it's very straightforward to get started with simple DAX.

1426
02:06:01,640 --> 02:06:04,280
We can start, for example, with something

1427
02:06:04,280 --> 02:06:06,400
that will print a context.

1428
02:06:06,400 --> 02:06:09,720
And say, you create something, you pass an argument,

1429
02:06:09,720 --> 02:06:12,800
and that's going to be immediately printed out.

1430
02:06:12,800 --> 02:06:15,160
It doesn't have a console as such,

1431
02:06:15,160 --> 02:06:17,640
but it does have its standard output,

1432
02:06:17,640 --> 02:06:21,840
that is the Airflow logs.

1433
02:06:21,840 --> 02:06:25,320
And then the way you call that into Airflow

1434
02:06:25,320 --> 02:06:29,240
is by wrapping it around the operator.

1435
02:06:29,240 --> 02:06:32,720
You assign a task ID, and this is

1436
02:06:32,720 --> 02:06:36,640
one of the most characteristic things of Airflow.

1437
02:06:36,640 --> 02:06:42,600
Everything is identified by the task ID, and you define this.

1438
02:06:42,600 --> 02:06:45,080
The thing is that you have to be really good at naming

1439
02:06:45,080 --> 02:06:49,040
your tasks, because otherwise, if you have duplicate tasks,

1440
02:06:49,040 --> 02:06:51,960
the newest one will override the oldest one.

1441
02:06:51,960 --> 02:06:53,440
And a lot of folks use Luigi.

1442
02:06:56,400 --> 02:07:00,840
The most notable difference now is that Luigi,

1443
02:07:00,840 --> 02:07:03,400
well, that Airflow has been since 2016.

1444
02:07:03,400 --> 02:07:04,880
Yeah?

1445
02:07:04,880 --> 02:07:08,120
You were saying that it's really important to see

1446
02:07:08,120 --> 02:07:10,600
the integration and naming of tasks.

1447
02:07:10,600 --> 02:07:15,560
Is there a standard maybe for past lectures,

1448
02:07:15,560 --> 02:07:18,560
or for example, like in general?

1449
02:07:18,560 --> 02:07:19,060
Yeah.

1450
02:07:19,060 --> 02:07:22,560
I'm also wondering if you think that there's

1451
02:07:22,560 --> 02:07:25,560
some possibility that there's a thing in the case

1452
02:07:25,560 --> 02:07:29,560
that there's a similar pattern.

1453
02:07:29,560 --> 02:07:32,160
I don't think there is a standard convention.

1454
02:07:32,160 --> 02:07:35,560
People normally use just the same convention

1455
02:07:35,560 --> 02:07:40,560
that you use to create a function, so that's snake case.

1456
02:07:40,560 --> 02:07:42,160
But I don't know.

1457
02:07:42,160 --> 02:07:44,560
Do you just need to make sure that you have a function

1458
02:07:44,560 --> 02:07:46,560
that's similar to that?

1459
02:07:46,560 --> 02:07:47,960
I don't know.

1460
02:07:47,960 --> 02:07:51,680
You just need to make sure that it's very explicit in what

1461
02:07:51,680 --> 02:07:54,400
it does.

1462
02:07:54,400 --> 02:07:56,480
So it will depend again a lot on your company.

1463
02:07:56,480 --> 02:07:59,360
For example, where I was before, we

1464
02:07:59,360 --> 02:08:02,520
used to have a lot of DAGs.

1465
02:08:02,520 --> 02:08:05,840
And it would start whether we would have an identifier,

1466
02:08:05,840 --> 02:08:08,160
whether they were just for internal consumption,

1467
02:08:08,160 --> 02:08:13,280
client consumption, and then depending on the team,

1468
02:08:13,280 --> 02:08:15,320
and then just the name of the tasks.

1469
02:08:15,320 --> 02:08:17,240
So that is easier because then you can track

1470
02:08:17,240 --> 02:08:20,240
where the reports go to.

1471
02:08:20,240 --> 02:08:24,680
So if you have client, whatever it does, blah, something.

1472
02:08:24,680 --> 02:08:28,320
Also because you can't have a date because you're

1473
02:08:28,320 --> 02:08:31,200
setting recurring tasks.

1474
02:08:31,200 --> 02:08:32,600
But we're going to see it.

1475
02:08:32,600 --> 02:08:34,840
As soon as you open the dashboard,

1476
02:08:34,840 --> 02:08:40,320
you see when each task is due or when it's scheduled for.

1477
02:08:40,320 --> 02:08:43,200
So we're going to explore that in a bit.

1478
02:08:43,200 --> 02:08:47,000
But yeah, I don't think there is a well-accepted convention

1479
02:08:47,000 --> 02:08:47,480
anywhere.

1480
02:08:50,240 --> 02:08:51,120
I'll think about that.

1481
02:08:54,120 --> 02:08:55,480
Well, there are a lot of differences

1482
02:08:55,480 --> 02:08:56,600
and a lot of similarities.

1483
02:08:56,600 --> 02:09:01,400
The thing is you have to, again, find what works best for you.

1484
02:09:01,400 --> 02:09:02,880
What is your best option?

1485
02:09:06,400 --> 02:09:10,000
And what is going to satisfy your needs?

1486
02:09:10,000 --> 02:09:13,320
Again, it depends on your workers' needs

1487
02:09:13,320 --> 02:09:18,320
and your scheduler needs.

1488
02:09:18,320 --> 02:09:23,280
But generally, the scheduler, you

1489
02:09:23,280 --> 02:09:25,840
have to be careful because their scheduler in Airflow

1490
02:09:25,840 --> 02:09:28,040
is centralized.

1491
02:09:28,040 --> 02:09:31,600
So that means that it's self-aware of every single task

1492
02:09:31,600 --> 02:09:35,080
that is due to happen at all time.

1493
02:09:35,080 --> 02:09:38,920
That makes it easier to assign the load and the workers.

1494
02:09:38,920 --> 02:09:44,240
In Luigi, you have to create all of your tasks through the CLI.

1495
02:09:44,240 --> 02:09:49,560
And then what is centralized are your workers, not

1496
02:09:49,560 --> 02:09:51,720
your scheduler.

1497
02:09:51,720 --> 02:09:54,840
So I think that's a bit different.

1498
02:09:59,120 --> 02:10:05,960
So now we're going to be setting up our Airflow locally first.

1499
02:10:05,960 --> 02:10:07,800
It's well-involved.

1500
02:10:07,800 --> 02:10:10,040
It's well, well-involved.

1501
02:10:10,040 --> 02:10:13,400
Make sure that you're in your environment to start with.

1502
02:10:13,400 --> 02:10:15,960
So either you have a source-activate Airflow

1503
02:10:15,960 --> 02:10:20,400
AMP or a PIP AMP shell or whatever you're using.

1504
02:10:25,200 --> 02:10:27,960
And now we're going to start Airflow locally.

1505
02:10:27,960 --> 02:10:30,160
When you install Airflow by default,

1506
02:10:30,160 --> 02:10:33,960
it creates an Airflow home directory.

1507
02:10:33,960 --> 02:10:37,400
So if I go, for example, to here,

1508
02:10:37,400 --> 02:10:43,160
I see an Airflow directory.

1509
02:10:43,160 --> 02:10:45,400
And I'm going to show you how it looks like.

1510
02:10:45,400 --> 02:10:48,720
When it's started, when you do PIP install Apache Airflow

1511
02:10:48,720 --> 02:10:52,320
or PIP AMP install Apache Airflow or something,

1512
02:10:52,320 --> 02:10:54,640
it's going to create this.

1513
02:10:54,640 --> 02:10:58,320
So the very top is going to be your Airflow configuration.

1514
02:10:58,320 --> 02:11:01,080
We're going to modify some bits.

1515
02:11:01,080 --> 02:11:06,520
It also has logs, which is the logs for the whole stuff

1516
02:11:06,520 --> 02:11:09,920
that you have in there.

1517
02:11:09,920 --> 02:11:13,480
So that's every single dog that gets run, every single failed

1518
02:11:13,480 --> 02:11:17,400
dog, every single success is there.

1519
02:11:17,400 --> 02:11:20,280
And it also has the unit tests, the configuration

1520
02:11:20,280 --> 02:11:21,400
for your unit tests.

1521
02:11:26,240 --> 02:11:29,600
So I'm going to go to Airflow.

1522
02:11:29,600 --> 02:11:37,480
And because we're going to start our local Airflow instance,

1523
02:11:37,480 --> 02:11:41,920
you have to create a dogs folder because it will automatically

1524
02:11:41,920 --> 02:11:45,760
identify the dogs there and pull them in.

1525
02:11:45,760 --> 02:11:48,080
So if you go to wherever your Airflow home is

1526
02:11:48,080 --> 02:11:59,520
and create a dogs folder, then the next step

1527
02:11:59,520 --> 02:12:03,880
The next thing is we're going to be creating a lot of dogs.

1528
02:12:03,880 --> 02:12:06,880
So they're going to live inside dogs here.

1529
02:12:06,880 --> 02:12:09,880
But then we're going to have, as you run to different dogs,

1530
02:12:09,880 --> 02:12:12,080
different logs for each of them.

1531
02:12:12,080 --> 02:12:14,360
You'll also have a database.

1532
02:12:14,360 --> 02:12:18,120
And this database is basically where everything

1533
02:12:18,120 --> 02:12:19,720
is going to store it, all of your logs.

1534
02:12:19,720 --> 02:12:27,000
So it's also good practice to have something or a dog itself

1535
02:12:27,000 --> 02:12:29,320
that will do cleaning and maintenance

1536
02:12:29,320 --> 02:12:32,840
just to make sure that your databases are not growing a lot.

1537
02:12:32,840 --> 02:12:37,680
If you have XCOMs or mechanisms to communicate from one dog

1538
02:12:37,680 --> 02:12:39,720
to another or one task to another,

1539
02:12:39,720 --> 02:12:42,720
also those get all stored in that database.

1540
02:12:42,720 --> 02:12:44,800
So they can become very bulky.

1541
02:12:49,360 --> 02:12:56,520
So the next thing is going to be open from our Airflow home.

1542
02:12:56,520 --> 02:13:01,400
We're going to do some changes in our configuration file.

1543
02:13:01,400 --> 02:13:04,880
So if you open error, you should see the Airflow CFG.

1544
02:13:08,280 --> 02:13:11,720
You can change the location of your dogs folder.

1545
02:13:11,720 --> 02:13:15,080
But for this example, we're going to leave it in Airflow dogs.

1546
02:13:15,080 --> 02:13:19,920
You can use anything else, a specific location,

1547
02:13:19,920 --> 02:13:20,880
as well as logs.

1548
02:13:21,640 --> 02:13:25,960
You can also change the time zone.

1549
02:13:25,960 --> 02:13:30,080
But that is going to determine the time

1550
02:13:30,080 --> 02:13:32,640
with each of your single dogs is going to run.

1551
02:13:32,640 --> 02:13:34,560
So you have to be very, very careful

1552
02:13:34,560 --> 02:13:37,960
because you can't have multiple time zones, especially

1553
02:13:37,960 --> 02:13:40,440
if you have a cross time zones at work.

1554
02:13:40,440 --> 02:13:41,840
They can be problematic.

1555
02:13:41,840 --> 02:13:45,240
So you have to stick to just the one.

1556
02:13:45,240 --> 02:13:47,880
And then here is where you change the time zone.

1557
02:13:48,880 --> 02:13:52,480
And then here is where you choose the sequential executor.

1558
02:13:52,480 --> 02:13:56,360
For local experimentation, we're just

1559
02:13:56,360 --> 02:13:58,440
going to use the sequential one.

1560
02:13:58,440 --> 02:14:04,120
And remember, that only allows you to run one dog at a time.

1561
02:14:04,120 --> 02:14:07,240
You can have task executor if you do task stuff

1562
02:14:07,240 --> 02:14:09,800
for distributing data.

1563
02:14:09,800 --> 02:14:13,120
You can also have Kubernetes and the celery executor.

1564
02:14:13,120 --> 02:14:15,120
We're not going to use the celery now

1565
02:14:15,120 --> 02:14:18,560
because otherwise we would have to set up celery and rabbit

1566
02:14:18,560 --> 02:14:20,440
MQ, and it's too much fun.

1567
02:14:25,520 --> 02:14:32,280
Yes, so if you go to your Airflow directory,

1568
02:14:32,280 --> 02:14:33,200
it is all in there.

1569
02:14:33,200 --> 02:14:37,280
So you should see your Airflow CFG.

1570
02:14:37,280 --> 02:14:40,480
So actually, we need to make some changes.

1571
02:14:41,280 --> 02:14:45,800
By default, it uses SQL Alchemy.

1572
02:14:45,800 --> 02:14:48,960
So remember that at the very, very beginning of the tutorial,

1573
02:14:48,960 --> 02:14:53,000
we created an Airflow database.

1574
02:14:53,000 --> 02:14:56,800
So we're going to replace that with our, oh, sorry,

1575
02:14:56,800 --> 02:15:01,320
not this one, but another one that is down there.

1576
02:15:01,320 --> 02:15:04,520
It also gives you the option to change the concurrency.

1577
02:15:04,520 --> 02:15:07,320
You can tailor all of this to your needs.

1578
02:15:11,480 --> 02:15:16,040
You can create plugins if you want to create a plugin.

1579
02:15:16,040 --> 02:15:22,040
But it also has the URL, the endpoint.

1580
02:15:22,040 --> 02:15:25,840
When you go, when doing start it, it will always go to 8080.

1581
02:15:25,840 --> 02:15:28,000
But if you have something else or another app that

1582
02:15:28,000 --> 02:15:32,680
is running on the port 8080, you can remap it to another port.

1583
02:15:35,880 --> 02:15:38,440
This is one of the nicest things that it has,

1584
02:15:38,440 --> 02:15:41,520
but it's in very, very, very, very experimental stages.

1585
02:15:41,520 --> 02:15:42,840
And it's lineage.

1586
02:15:42,840 --> 02:15:45,840
And it allows you to track your data lineage.

1587
02:15:45,840 --> 02:15:49,680
And this is, well, I find it very exciting.

1588
02:15:49,680 --> 02:15:52,760
Because that means that not only you're doing your tasks,

1589
02:15:52,760 --> 02:15:56,680
but you're actually keeping track of every single change

1590
02:15:56,680 --> 02:16:00,880
and every single process and how one version of your data

1591
02:16:00,880 --> 02:16:03,040
differs from the other one.

1592
02:16:03,040 --> 02:16:03,800
It's fantastic.

1593
02:16:08,680 --> 02:16:09,680
Data.

1594
02:16:09,680 --> 02:16:11,160
Yeah.

1595
02:16:11,160 --> 02:16:12,240
Yeah.

1596
02:16:12,240 --> 02:16:13,600
Yeah.

1597
02:16:13,600 --> 02:16:18,960
It's very similar to have you, well, if any of you

1598
02:16:18,960 --> 02:16:21,960
have ever used PacketDorm or heard about PacketDorm,

1599
02:16:21,960 --> 02:16:25,480
that they keep like a data change log.

1600
02:16:25,480 --> 02:16:27,200
It's similar to that concept.

1601
02:16:32,560 --> 02:16:35,320
OK, cool.

1602
02:16:35,320 --> 02:16:41,440
So we have to modify here so that it actually

1603
02:16:41,440 --> 02:16:45,760
uses our Airflow database that we created instead of using

1604
02:16:45,760 --> 02:16:48,360
the default SQL alchemy.

1605
02:16:48,360 --> 02:16:51,400
So you need to find this broker URL

1606
02:16:51,400 --> 02:16:54,160
and change it to Airflow at Airflow,

1607
02:16:54,160 --> 02:16:58,320
well, Airflow Airflow localhost plan.

1608
02:16:58,320 --> 02:17:07,600
And then that ensures that it uses your, how's it called?

1609
02:17:07,600 --> 02:17:08,320
Your database.

1610
02:17:13,400 --> 02:17:15,120
Fantastic.

1611
02:17:15,120 --> 02:17:16,960
So we did this at the beginning so that we

1612
02:17:16,960 --> 02:17:18,920
didn't have to do it again.

1613
02:17:18,920 --> 02:17:21,200
The first step to get Airflow working

1614
02:17:21,200 --> 02:17:26,520
is we're going to start up the database.

1615
02:17:29,320 --> 02:17:31,880
So we do this using Airflow and a DB.

1616
02:17:38,720 --> 02:17:40,320
I don't know why I don't like it.

1617
02:17:44,720 --> 02:17:45,720
Oh, OK.

1618
02:17:45,720 --> 02:17:49,000
Sorry, I already have my database initialized.

1619
02:17:49,000 --> 02:17:58,280
So you can do Airflow upgrade database.

1620
02:17:58,280 --> 02:18:01,680
And actually, it's better if you have initialized your database

1621
02:18:01,680 --> 02:18:05,520
before and then you only want to get it running again.

1622
02:18:05,520 --> 02:18:08,080
It's better practice to do an upgrade DB.

1623
02:18:12,160 --> 02:18:13,800
So that's the first step.

1624
02:18:13,800 --> 02:18:17,840
Once you've done this, if you do an LS wherever you are,

1625
02:18:17,840 --> 02:18:21,960
you should be able to see your Airflow database there.

1626
02:18:21,960 --> 02:18:25,440
And this is not the SQL one, my SQL one that we created,

1627
02:18:25,440 --> 02:18:28,920
but it's the actual Airflow where all of our result logs

1628
02:18:28,920 --> 02:18:29,800
are going to be.

1629
02:18:34,600 --> 02:18:37,000
We're going to skip this celery bit,

1630
02:18:37,000 --> 02:18:39,600
but if you want to use celery in Revit,

1631
02:18:39,600 --> 02:18:44,560
that should be enough to get you up and running.

1632
02:18:44,560 --> 02:18:47,560
And now we're going to start the web server.

1633
02:18:47,560 --> 02:18:59,040
If you do Airflow web server and bind it to the port 8080,

1634
02:18:59,040 --> 02:19:02,200
you're going to see that it comes up with a lot of stuff.

1635
02:19:08,720 --> 02:19:10,920
And I don't know why it keeps saying about that.

1636
02:19:10,920 --> 02:19:11,420
OK.

1637
02:19:17,320 --> 02:19:19,400
Whoa, this is too big now.

1638
02:19:23,800 --> 02:19:25,560
Is that better?

1639
02:19:25,560 --> 02:19:28,680
So once you have your web server,

1640
02:19:28,680 --> 02:19:33,600
get your web server on and get familiarized a bit.

1641
02:19:33,600 --> 02:19:40,640
By default, it has a lot of operator, a lot of examples.

1642
02:19:40,640 --> 02:19:45,400
And for example, you can see the bash operator.

1643
02:19:45,400 --> 02:19:46,720
So you click on it.

1644
02:19:46,720 --> 02:19:48,600
Each of these represents a dog.

1645
02:19:48,600 --> 02:19:51,520
So it gives you the tree view, and it gives you

1646
02:19:51,520 --> 02:19:54,120
the understanding of how each of these tasks

1647
02:19:54,120 --> 02:19:56,960
is related to each other.

1648
02:19:56,960 --> 02:20:02,920
You can also see the graph view, which is the more, yeah, bigger.

1649
02:20:02,920 --> 02:20:03,540
Is that better?

1650
02:20:06,560 --> 02:20:08,960
So you're going to start your web server on your laptop

1651
02:20:08,960 --> 02:20:12,640
and start familiarizing yourself with it.

1652
02:20:12,640 --> 02:20:14,040
I'll probably make it easier.

1653
02:20:19,040 --> 02:20:20,760
There we go.

1654
02:20:20,760 --> 02:20:23,640
Oh, OK.

1655
02:20:23,640 --> 02:20:26,000
Yours is going to look different.

1656
02:20:26,000 --> 02:20:30,360
In my case, it already has been run before,

1657
02:20:30,360 --> 02:20:32,920
so it is marked as successful.

1658
02:20:32,920 --> 02:20:35,200
You're going to see that the changes are different.

1659
02:20:35,200 --> 02:20:38,400
For yours, the rim outside is going

1660
02:20:38,400 --> 02:20:40,800
to be white if it's a fresh or flow instance.

1661
02:20:40,800 --> 02:20:41,300
That means.

1662
02:20:45,440 --> 02:20:49,200
Oh, yes, of course.

1663
02:20:49,200 --> 02:20:50,240
So if you go here.

1664
02:20:55,800 --> 02:20:56,840
Give me a second.

1665
02:20:56,840 --> 02:20:57,840
So half that one.

1666
02:21:03,840 --> 02:21:04,840
There is another one.

1667
02:21:08,840 --> 02:21:12,280
So I don't know if it matches that already.

1668
02:21:17,840 --> 02:21:20,720
Because 3306 is where MySQL runs.

1669
02:21:20,720 --> 02:21:21,220
OK.

1670
02:21:30,720 --> 02:21:35,720
Yes, so the worker URL, and we have an SQL alchemy.

1671
02:21:35,720 --> 02:21:36,200
There you go.

1672
02:21:39,720 --> 02:21:41,120
So we have an SQL alchemy.

1673
02:21:41,120 --> 02:21:43,720
There are a couple of things that we can do.

1674
02:21:43,720 --> 02:21:45,720
So we can go to the SQL alchemy.

1675
02:21:46,720 --> 02:21:48,720
So we have an SQL alchemy there.

1676
02:21:48,720 --> 02:21:52,120
And it's going to point to the newly created Airflow database.

1677
02:21:55,720 --> 02:21:57,720
In the tutorial, there are details

1678
02:21:57,720 --> 02:22:00,720
for you to try with the salary executor as well.

1679
02:22:05,720 --> 02:22:06,720
OK, cool.

1680
02:22:06,720 --> 02:22:08,720
I forgot what I was saying.

1681
02:22:08,720 --> 02:22:11,720
Oh, so we have this.

1682
02:22:11,720 --> 02:22:14,720
And something else, it has a new function.

1683
02:22:14,720 --> 02:22:19,720
And something else that it has is a lot of connections.

1684
02:22:19,720 --> 02:22:23,720
So if you go to admin and go to connections,

1685
02:22:23,720 --> 02:22:28,560
you're going to see a very, very, very, very big list of things

1686
02:22:28,560 --> 02:22:31,560
that it can be connected to.

1687
02:22:31,560 --> 02:22:36,860
I have, for example, a custom Airflow DB there.

1688
02:22:36,860 --> 02:22:39,560
You can connect it directly to AWS,

1689
02:22:39,560 --> 02:22:47,040
to Azure Container Instances, to Google Cloud, Hive.

1690
02:22:47,040 --> 02:22:52,040
So you can actually connect it to a lot of databases

1691
02:22:52,040 --> 02:22:52,720
straight away.

1692
02:22:56,120 --> 02:22:59,520
Now, we're going to need to update this as well.

1693
02:22:59,520 --> 02:23:02,200
So we'll have to open the MySQL default.

1694
02:23:02,200 --> 02:23:04,560
And that is the SQL database.

1695
02:23:04,560 --> 02:23:08,560
So the connection ID is going to connect to MySQL default,

1696
02:23:08,560 --> 02:23:12,560
whatever that is.

1697
02:23:12,560 --> 02:23:18,560
And then we're going to use connection type, MySQL, local

1698
02:23:18,560 --> 02:23:19,560
host, and the schema.

1699
02:23:22,560 --> 02:23:26,560
So the schema for MySQL is a database.

1700
02:23:26,560 --> 02:23:29,560
It's another way to call a database.

1701
02:23:29,560 --> 02:23:32,560
So for this purpose, we're going to be using the Airflow schema

1702
02:23:32,560 --> 02:23:36,560
that we created at the very beginning.

1703
02:23:36,560 --> 02:23:38,560
We're going to log in as root.

1704
02:23:38,560 --> 02:23:41,560
Or you can log in as your Airflow user.

1705
02:23:41,560 --> 02:23:42,560
Either are fine.

1706
02:23:48,560 --> 02:23:51,560
And then your password, you have to type your password here,

1707
02:23:51,560 --> 02:23:52,560
whatever it is.

1708
02:23:52,560 --> 02:23:54,560
So you can log in as root.

1709
02:23:55,560 --> 02:23:58,560
And then your password, you have to type your password here,

1710
02:23:58,560 --> 02:23:59,560
whatever it is.

1711
02:24:04,560 --> 02:24:09,560
You can fill or not the port, because by default,

1712
02:24:09,560 --> 02:24:14,560
if it doesn't have a port, it's just going to default back to 3306.

1713
02:24:14,560 --> 02:24:15,560
So you can leave it.

1714
02:24:15,560 --> 02:24:18,560
If you wanted to be in a specific different port,

1715
02:24:18,560 --> 02:24:23,560
because that's how you've configured your SQL instance,

1716
02:24:23,560 --> 02:24:24,560
you have to update it there.

1717
02:24:27,560 --> 02:24:34,560
So we have MySQL, default, MySQL, local host, Airflow.

1718
02:24:34,560 --> 02:24:38,560
That is the database that I'm going to connect to, root, and password.

1719
02:24:42,560 --> 02:24:45,560
And I'm going to save it.

1720
02:24:45,560 --> 02:24:47,560
But you can do a lot, a lot of things.

1721
02:24:47,560 --> 02:24:50,560
You can connect to a lot of stuff here.

1722
02:24:50,560 --> 02:24:51,560
It's very interesting.

1723
02:24:54,560 --> 02:24:55,560
Cool.

1724
02:24:55,560 --> 02:24:58,560
So we've already done this.

1725
02:24:58,560 --> 02:25:02,560
And we're going to get started with some commands that we can do from the

1726
02:25:02,560 --> 02:25:03,560
common line.

1727
02:25:03,560 --> 02:25:06,560
Well, some things that we can run from the common line.

1728
02:25:06,560 --> 02:25:10,560
And there are a lot of things that you can do from the common line and so

1729
02:25:10,560 --> 02:25:18,560
many other things that you can do that are probably better off from the UI.

1730
02:25:24,560 --> 02:25:27,560
Let me make this super huge.

1731
02:25:27,560 --> 02:25:29,560
Is that OK?

1732
02:25:32,560 --> 02:25:38,560
So at the moment, I have not created any personalized DAG.

1733
02:25:38,560 --> 02:25:49,560
But if I run, for example, Airflow list DAG, it will deploy all of the DAGs

1734
02:25:49,560 --> 02:25:50,560
that you have.

1735
02:25:50,560 --> 02:25:54,560
For you, you're going to have all of the example that is example bash,

1736
02:25:54,560 --> 02:25:58,560
example branch, blah, blah, blah, example XCOM.

1737
02:25:58,560 --> 02:26:01,560
In my case, I'm going to have the generate Twitter DAGs that we're going

1738
02:26:01,560 --> 02:26:03,560
to be doing in a bit.

1739
02:26:06,560 --> 02:26:11,560
I have also a Hello World and Twitter links.

1740
02:26:11,560 --> 02:26:15,560
So that's how you can see all of the DAGs that you have registered in your

1741
02:26:15,560 --> 02:26:16,560
Airflow instance.

1742
02:26:16,560 --> 02:26:19,560
Let's take, for example, the tutorial task.

1743
02:26:19,560 --> 02:26:31,560
So if we use Airflow list tasks, tutorial, and then we use the argument

1744
02:26:31,560 --> 02:26:41,560
dash, dash, three, it tells you about bash operators.

1745
02:26:41,560 --> 02:26:47,560
So it tells you in that same tree graph that we saw before in the UI,

1746
02:26:47,560 --> 02:26:51,560
it's the same way that it gets displayed but on the common line.

1747
02:26:51,560 --> 02:26:56,560
I personally prefer looking at it on the UI because it makes more sense.

1748
02:27:00,560 --> 02:27:05,560
Now, imagine that you have a DAG and you don't want to yet commit to start

1749
02:27:05,560 --> 02:27:07,560
running it actually in production.

1750
02:27:07,560 --> 02:27:09,560
You can test your UI.

1751
02:27:09,560 --> 02:27:20,560
So you can do Airflow test tutorial, print date 2019, 05, 01.

1752
02:27:20,560 --> 02:27:21,560
Okay.

1753
02:27:21,560 --> 02:27:25,560
But I'm going to show you first the code for this DAG so you actually

1754
02:27:25,560 --> 02:27:28,560
understand what is happening.

1755
02:27:28,560 --> 02:27:33,560
So if we go onto tutorial, you have these notes.

1756
02:27:33,560 --> 02:27:36,560
And you can click on code.

1757
02:27:36,560 --> 02:27:39,560
And I'll tell you the code.

1758
02:27:39,560 --> 02:27:43,560
So it imports libraries and then it creates the default arguments.

1759
02:27:43,560 --> 02:27:49,560
We're going to create our own DAG in a bit so we can actually explore what

1760
02:27:49,560 --> 02:27:52,560
these default arguments are.

1761
02:27:52,560 --> 02:27:57,560
And then we can see that it's actually going to create a new DAG.

1762
02:27:57,560 --> 02:28:03,560
So you can actually explore what these default arguments are.

1763
02:28:03,560 --> 02:28:09,560
And then what is going to happen is you can define a lot of stuff.

1764
02:28:09,560 --> 02:28:11,560
Normally you can define who the owner is.

1765
02:28:11,560 --> 02:28:14,560
In this case, is there a flow because you want to give Airflow as much

1766
02:28:14,560 --> 02:28:15,560
autonomy as possible.

1767
02:28:15,560 --> 02:28:18,560
You can say whether it depends on past or not.

1768
02:28:18,560 --> 02:28:25,560
In this case, it's false because it's a completely independent task.

1769
02:28:25,560 --> 02:28:27,560
So you can set the start date.

1770
02:28:27,560 --> 02:28:35,560
And this is very important because it has to exist in the sense that you

1771
02:28:35,560 --> 02:28:40,560
can't run DAG before the time exists.

1772
02:28:40,560 --> 02:28:45,560
So you have to, let's say if you're going to be doing a task that runs

1773
02:28:45,560 --> 02:28:51,560
every week, you have to at least leave a period of time before the task

1774
02:28:51,560 --> 02:28:52,560
actually starts.

1775
02:28:52,560 --> 02:28:56,560
Because otherwise it's going to complain that the time didn't exist.

1776
02:28:56,560 --> 02:28:59,560
And I'm going to show you a better example of this.

1777
02:28:59,560 --> 02:29:03,560
Then you can set whether you want to receive emails on failures, whether

1778
02:29:03,560 --> 02:29:06,560
you want to receive emails on retries.

1779
02:29:06,560 --> 02:29:10,560
And this is very important, how many retries you're actually going to

1780
02:29:10,560 --> 02:29:11,560
allow.

1781
02:29:11,560 --> 02:29:18,560
If your task fails, how many retries are you going to give?

1782
02:29:18,560 --> 02:29:23,560
And then you can also specify the time between retries.

1783
02:29:23,560 --> 02:29:29,560
So if you have some complex infrastructure that needs time to consolidate

1784
02:29:29,560 --> 02:29:33,560
and to reconfigure itself, you might want to extend this time.

1785
02:29:33,560 --> 02:29:39,560
If you don't have any other scheduled task or task in the queue, it's very

1786
02:29:39,560 --> 02:29:43,560
easy and you can reduce this to, I don't know, 60 seconds or one minute,

1787
02:29:43,560 --> 02:29:44,560
two minutes.

1788
02:29:44,560 --> 02:29:50,560
You also have things to define your queue, how your queues are assigned,

1789
02:29:50,560 --> 02:29:55,560
how your pools are filled, your SELAs, and you have a lot of things that

1790
02:29:55,560 --> 02:29:58,560
you can configure.

1791
02:29:58,560 --> 02:30:01,560
And here you create your DAG object.

1792
02:30:01,560 --> 02:30:08,560
And this name is the name that is going to be displayed in the UI from

1793
02:30:08,560 --> 02:30:11,560
Matter.

1794
02:30:12,560 --> 02:30:14,560
And you can also add a description.

1795
02:30:14,560 --> 02:30:20,560
The description doesn't get seen at the beginning, but it's good to have.

1796
02:30:20,560 --> 02:30:24,560
Another way we define this is creating individual tasks.

1797
02:30:24,560 --> 02:30:32,560
So in this one, you have a bash operator that is going to print a date.

1798
02:30:32,560 --> 02:30:36,560
And then you have, after that has completed, a bash operation that is

1799
02:30:36,560 --> 02:30:42,560
going to apply a bash sleep for five units of time.

1800
02:30:42,560 --> 02:30:46,560
And then it's using ginger templates.

1801
02:30:46,560 --> 02:30:50,560
So here it is doing ginger templating here.

1802
02:30:50,560 --> 02:30:55,560
And finally, display the parameters that you run.

1803
02:30:55,560 --> 02:31:00,560
So now it's going to make more sense if I run this.

1804
02:31:00,560 --> 02:31:06,560
And then it tells you that it runs the command date, what was the input,

1805
02:31:06,560 --> 02:31:12,560
when was the date, and what was the exit code.

1806
02:31:12,560 --> 02:31:17,560
And the important thing is that when you run your tests, your air flows,

1807
02:31:17,560 --> 02:31:23,560
your DAGs tests, they don't get whatever the status is, if it's failed or

1808
02:31:23,560 --> 02:31:27,560
passed or whatever, they don't get persisted in your data.

1809
02:31:27,560 --> 02:31:32,560
So you can run as many test runs as you want.

1810
02:31:32,560 --> 02:31:34,560
So that is the template.

1811
02:31:34,560 --> 02:31:40,560
So if you do the, that was a print date.

1812
02:31:40,560 --> 02:31:47,560
But what about if we do the template of worm that is the one using the ginger

1813
02:31:47,560 --> 02:31:50,560
syntax?

1814
02:31:50,560 --> 02:31:55,560
So it's actually filling in the dates that you passed, the parameters that

1815
02:31:55,560 --> 02:32:00,560
you passed, and they're being directly replaced into the ginger template that

1816
02:32:00,560 --> 02:32:03,560
you had.

1817
02:32:03,560 --> 02:32:06,560
Okay?

1818
02:32:06,560 --> 02:32:11,560
So if you go to our flow, you're going to notice, for example, if I start

1819
02:32:11,560 --> 02:32:16,560
this task, okay, if I go here, it doesn't tell you when it is next scheduled for

1820
02:32:16,560 --> 02:32:17,560
you.

1821
02:32:17,560 --> 02:32:22,560
And that is because we've not started the scheduler yet.

1822
02:32:22,560 --> 02:32:28,560
So we've started, we have an initial time, and we have an initial time to

1823
02:32:28,560 --> 02:32:31,560
start the test.

1824
02:32:31,560 --> 02:32:34,560
So that's the time that we're going to start the test.

1825
02:32:34,560 --> 02:32:37,560
So we're going to start the test.

1826
02:32:37,560 --> 02:32:40,560
So we haven't started the scheduler yet.

1827
02:32:40,560 --> 02:32:43,560
So we've started, we have initialized our database.

1828
02:32:43,560 --> 02:32:52,560
We have our web server, but we still have to initialize our scheduler.

1829
02:32:52,560 --> 02:32:59,560
So you have to do this from another terminal or another common line.

1830
02:32:59,560 --> 02:33:06,560
So you have to do airflow scheduler.

1831
02:33:06,560 --> 02:33:12,560
And it's going to keep streaming out, on your standard route.

1832
02:33:12,560 --> 02:33:14,560
Okay.

1833
02:33:14,560 --> 02:33:19,560
And because in this case, we're using the local executor or the sequential

1834
02:33:19,560 --> 02:33:25,560
executor, it will tell you that actually you can only use parallelism as well.

1835
02:33:25,560 --> 02:33:33,560
You can't do multithreading or any of the such.

1836
02:33:33,560 --> 02:33:38,560
And behind the scenes, these schedulers are actually going to make sure that

1837
02:33:38,560 --> 02:33:42,560
things are up to date.

1838
02:33:42,560 --> 02:33:49,560
So we can now call go back to our terminal and do our flow run.

1839
02:33:49,560 --> 02:33:52,560
Oh, I have two.

1840
02:33:52,560 --> 02:33:55,560
Example bash.

1841
02:33:55,560 --> 02:33:57,560
Operator.

1842
02:33:57,560 --> 02:34:03,560
Run me.

1843
02:34:03,560 --> 02:34:06,560
Oh, why do I have that weird day?

1844
02:34:06,560 --> 02:34:24,560
I'm going to say 2019 05 01.

1845
02:34:24,560 --> 02:34:29,560
So when you do that, it actually tells you what executor it is using.

1846
02:34:29,560 --> 02:34:39,560
It then tells you that it's feeling the dog and that it's running the dog.

1847
02:34:39,560 --> 02:34:46,560
If we turn it on, it will tell you when is the last run.

1848
02:34:46,560 --> 02:34:48,560
And you can start it.

1849
02:34:48,560 --> 02:34:51,560
It's similar to doing this.

1850
02:34:51,560 --> 02:34:56,560
It has a little bit here.

1851
02:34:56,560 --> 02:34:57,560
Sorry.

1852
02:34:57,560 --> 02:35:02,560
It has this little trigger dog button so you can press it directly.

1853
02:35:02,560 --> 02:35:05,560
And hopefully, you'll straightaway see that it's running.

1854
02:35:05,560 --> 02:35:15,560
So the status of that is going to change to green.

1855
02:35:15,560 --> 02:35:20,560
I personally like this better.

1856
02:35:20,560 --> 02:35:21,560
Okay.

1857
02:35:21,560 --> 02:35:23,560
I'm going to have to plug my laptop.

1858
02:35:23,560 --> 02:35:30,560
I find that better because it helps me visualize much more where the tasks are

1859
02:35:30,560 --> 02:35:33,560
taking place.

1860
02:35:33,560 --> 02:35:43,560
Sometimes take a bit to fill in.

1861
02:35:43,560 --> 02:35:49,560
And then if you click on the task, you can also see when was the last successful

1862
02:35:49,560 --> 02:35:54,560
one.

1863
02:35:54,560 --> 02:36:05,560
And follow a traditional cron to do this.

1864
02:36:05,560 --> 02:36:07,560
I killed it.

1865
02:36:07,560 --> 02:36:10,560
There you go.

1866
02:36:10,560 --> 02:36:15,560
Now, you're going to notice as well that it has some nice syntactic sugar.

1867
02:36:15,560 --> 02:36:17,560
There are some very nice things.

1868
02:36:17,560 --> 02:36:22,560
And you can have this decorator style things.

1869
02:36:22,560 --> 02:36:27,560
So you can do daily or this is only going to run one.

1870
02:36:27,560 --> 02:36:32,560
Or for example, I have this generic Twitter dogs that we're going to do later.

1871
02:36:32,560 --> 02:36:34,560
And it's daily as well.

1872
02:36:34,560 --> 02:36:36,560
We have this hello world that we're going to create.

1873
02:36:36,560 --> 02:36:42,560
So you can use more traditional approaches like cron stuff.

1874
02:36:42,560 --> 02:36:46,560
And you can go to crontab group and that will help you.

1875
02:36:46,560 --> 02:36:49,560
Or you can use the decorators.

1876
02:36:49,560 --> 02:36:53,560
The decorator style.

1877
02:36:53,560 --> 02:36:59,560
So I'm going to give you five minutes so that you can try and check some of the

1878
02:36:59,560 --> 02:37:01,560
example dogs.

1879
02:37:01,560 --> 02:37:06,560
Familiarize yourself with how you actually run it, how you're scheduling it,

1880
02:37:06,560 --> 02:37:15,560
and getting them up from the UI or using the CLI before we start actually

1881
02:37:15,560 --> 02:37:18,560
writing tasks.

1882
02:37:31,560 --> 02:37:34,560
So I'm going to give you five minutes.

1883
02:37:34,560 --> 02:37:37,560
So you can see that I'm going to give you five minutes.

1884
02:37:37,560 --> 02:37:39,560
So I'm going to give you five minutes.

1885
02:37:39,560 --> 02:37:41,560
So you can see that I'm going to give you five minutes.

1886
02:37:41,560 --> 02:37:43,560
So you can see that I'm going to give you five minutes.

1887
02:37:43,560 --> 02:37:45,560
So you can see that I'm going to give you five minutes.

1888
02:37:45,560 --> 02:37:47,560
So you can see that I'm going to give you five minutes.

1889
02:37:47,560 --> 02:37:49,560
So you can see that I'm going to give you five minutes.

1890
02:37:49,560 --> 02:37:51,560
So you can see that I'm going to give you five minutes.

1891
02:37:51,560 --> 02:37:53,560
So you can see that I'm going to give you five minutes.

1892
02:37:53,560 --> 02:37:55,560
So you can see that I'm going to give you five minutes.

1893
02:37:55,560 --> 02:37:57,560
So you can see that I'm going to give you five minutes.

1894
02:37:57,560 --> 02:37:59,560
So you can see that I'm going to give you five minutes.

1895
02:37:59,560 --> 02:38:01,560
So you can see that I'm going to give you five minutes.

1896
02:38:01,560 --> 02:38:03,560
So you can see that I'm going to give you five minutes.

1897
02:38:03,560 --> 02:38:05,560
So you can see that I'm going to give you five minutes.

1898
02:38:05,560 --> 02:38:07,560
So you can see that I'm going to give you five minutes.

1899
02:38:07,560 --> 02:38:09,560
So you can see that I'm going to give you five minutes.

1900
02:38:09,560 --> 02:38:11,560
So you can see that I'm going to give you five minutes.

1901
02:38:11,560 --> 02:38:13,560
So you can see that I'm going to give you five minutes.

1902
02:38:13,560 --> 02:38:15,560
So you can see that I'm going to give you five minutes.

1903
02:38:15,560 --> 02:38:17,560
So you can see that I'm going to give you five minutes.

1904
02:38:17,560 --> 02:38:19,560
So you can see that I'm going to give you five minutes.

1905
02:38:19,560 --> 02:38:21,560
So you can see that I'm going to give you five minutes.

1906
02:38:21,560 --> 02:38:23,560
So you can see that I'm going to give you five minutes.

1907
02:38:23,560 --> 02:38:25,560
So you can see that I'm going to give you five minutes.

1908
02:38:25,560 --> 02:38:27,560
So you can see that I'm going to give you five minutes.

1909
02:38:27,560 --> 02:38:29,560
So you can see that I'm going to give you five minutes.

1910
02:38:29,560 --> 02:38:31,560
So you can see that I'm going to give you five minutes.

1911
02:38:31,560 --> 02:38:33,560
So you can see that I'm going to give you five minutes.

1912
02:38:33,560 --> 02:38:35,560
So you can see that I'm going to give you five minutes.

1913
02:38:35,560 --> 02:38:37,560
So you can see that I'm going to give you five minutes.

1914
02:38:37,560 --> 02:38:39,560
So you can see that I'm going to give you five minutes.

1915
02:38:39,560 --> 02:38:41,560
So you can see that I'm going to give you five minutes.

1916
02:38:41,560 --> 02:38:43,560
So you can see that I'm going to give you five minutes.

1917
02:38:43,560 --> 02:38:45,560
So you can see that I'm going to give you five minutes.

1918
02:38:45,560 --> 02:38:47,560
So you can see that I'm going to give you five minutes.

1919
02:38:47,560 --> 02:38:49,560
So you can see that I'm going to give you five minutes.

1920
02:38:49,560 --> 02:38:51,560
So you can see that I'm going to give you five minutes.

1921
02:38:51,560 --> 02:38:53,560
So you can see that I'm going to give you five minutes.

1922
02:38:53,560 --> 02:38:55,560
So you can see that I'm going to give you five minutes.

1923
02:38:55,560 --> 02:38:57,560
So you can see that I'm going to give you five minutes.

1924
02:38:57,560 --> 02:38:59,560
So you can see that I'm going to give you five minutes.

1925
02:38:59,560 --> 02:39:01,560
So you can see that I'm going to give you five minutes.

1926
02:39:01,560 --> 02:39:03,560
So you can see that I'm going to give you five minutes.

1927
02:39:03,560 --> 02:39:05,560
So you can see that I'm going to give you five minutes.

1928
02:39:05,560 --> 02:39:07,560
So you can see that I'm going to give you five minutes.

1929
02:39:07,560 --> 02:39:09,560
So you can see that I'm going to give you five minutes.

1930
02:39:09,560 --> 02:39:11,560
So you can see that I'm going to give you five minutes.

1931
02:39:11,560 --> 02:39:13,560
So you can see that I'm going to give you five minutes.

1932
02:39:13,560 --> 02:39:15,560
So you can see that I'm going to give you five minutes.

1933
02:39:15,560 --> 02:39:17,560
So you can see that I'm going to give you five minutes.

1934
02:39:17,560 --> 02:39:19,560
So you can see that I'm going to give you five minutes.

1935
02:39:19,560 --> 02:39:21,560
So you can see that I'm going to give you five minutes.

1936
02:39:21,560 --> 02:39:23,560
So you can see that I'm going to give you five minutes.

1937
02:39:23,560 --> 02:39:25,560
So you can see that I'm going to give you five minutes.

1938
02:39:25,560 --> 02:39:27,560
So you can see that I'm going to give you five minutes.

1939
02:39:27,560 --> 02:39:29,560
So you can see that I'm going to give you five minutes.

1940
02:39:29,560 --> 02:39:31,560
So you can see that I'm going to give you five minutes.

1941
02:39:31,560 --> 02:39:33,560
So you can see that I'm going to give you five minutes.

1942
02:39:33,560 --> 02:39:35,560
So you can see that I'm going to give you five minutes.

1943
02:39:35,560 --> 02:39:37,560
So you can see that I'm going to give you five minutes.

1944
02:39:37,560 --> 02:39:39,560
So you can see that I'm going to give you five minutes.

1945
02:39:39,560 --> 02:39:41,560
So you can see that I'm going to give you five minutes.

1946
02:39:41,560 --> 02:39:43,560
So you can see that I'm going to give you five minutes.

1947
02:39:43,560 --> 02:39:45,560
So you can see that I'm going to give you five minutes.

1948
02:39:45,560 --> 02:39:47,560
So you can see that I'm going to give you five minutes.

1949
02:39:47,560 --> 02:39:49,560
So you can see that I'm going to give you five minutes.

1950
02:39:49,560 --> 02:39:51,560
So you can see that I'm going to give you five minutes.

1951
02:39:51,560 --> 02:39:53,560
So you can see that I'm going to give you five minutes.

1952
02:39:53,560 --> 02:39:55,560
So you can see that I'm going to give you five minutes.

1953
02:39:55,560 --> 02:39:57,560
So you can see that I'm going to give you five minutes.

1954
02:39:57,560 --> 02:39:59,560
So you can see that I'm going to give you five minutes.

1955
02:39:59,560 --> 02:40:01,560
So you can see that I'm going to give you five minutes.

1956
02:40:01,560 --> 02:40:03,560
So you can see that I'm going to give you five minutes.

1957
02:40:03,560 --> 02:40:05,560
So you can see that I'm going to give you five minutes.

1958
02:40:05,560 --> 02:40:07,560
So you can see that I'm going to give you five minutes.

1959
02:40:07,560 --> 02:40:09,560
So you can see that I'm going to give you five minutes.

1960
02:40:09,560 --> 02:40:11,560
So you can see that I'm going to give you five minutes.

1961
02:40:11,560 --> 02:40:13,560
So you can see that I'm going to give you five minutes.

1962
02:40:13,560 --> 02:40:15,560
So you can see that I'm going to give you five minutes.

1963
02:40:15,560 --> 02:40:17,560
So you can see that I'm going to give you five minutes.

1964
02:40:17,560 --> 02:40:19,560
So you can see that I'm going to give you five minutes.

1965
02:40:19,560 --> 02:40:21,560
So you can see that I'm going to give you five minutes.

1966
02:40:21,560 --> 02:40:23,560
So you can see that I'm going to give you five minutes.

1967
02:40:23,560 --> 02:40:25,560
So you can see that I'm going to give you five minutes.

1968
02:40:25,560 --> 02:40:27,560
So you can see that I'm going to give you five minutes.

1969
02:40:27,560 --> 02:40:29,560
So you can see that I'm going to give you five minutes.

1970
02:40:29,560 --> 02:40:31,560
So you can see that I'm going to give you five minutes.

1971
02:40:31,560 --> 02:40:33,560
So you can see that I'm going to give you five minutes.

1972
02:40:33,560 --> 02:40:35,560
So you can see that I'm going to give you five minutes.

1973
02:40:35,560 --> 02:40:37,560
So you can see that I'm going to give you five minutes.

1974
02:40:37,560 --> 02:40:39,560
So you can see that I'm going to give you five minutes.

1975
02:40:39,560 --> 02:40:41,560
So you can see that I'm going to give you five minutes.

1976
02:40:41,560 --> 02:40:43,560
So you can see that I'm going to give you five minutes.

1977
02:40:43,560 --> 02:40:45,560
So you can see that I'm going to give you five minutes.

1978
02:40:45,560 --> 02:40:47,560
So you can see that I'm going to give you five minutes.

1979
02:40:47,560 --> 02:40:49,560
So you can see that I'm going to give you five minutes.

1980
02:40:49,560 --> 02:40:51,560
So you can see that I'm going to give you five minutes.

1981
02:40:51,560 --> 02:40:53,560
So you can see that I'm going to give you five minutes.

1982
02:40:53,560 --> 02:40:55,560
So you can see that I'm going to give you five minutes.

1983
02:40:55,560 --> 02:40:57,560
So you can see that I'm going to give you five minutes.

1984
02:40:57,560 --> 02:40:59,560
So you can see that I'm going to give you five minutes.

1985
02:40:59,560 --> 02:41:01,560
So you can see that I'm going to give you five minutes.

1986
02:41:01,560 --> 02:41:03,560
So you can see that I'm going to give you five minutes.

1987
02:41:03,560 --> 02:41:05,560
So you can see that I'm going to give you five minutes.

1988
02:41:05,560 --> 02:41:07,560
So you can see that I'm going to give you five minutes.

1989
02:41:07,560 --> 02:41:09,560
So you can see that I'm going to give you five minutes.

1990
02:41:09,560 --> 02:41:11,560
So you can see that I'm going to give you five minutes.

1991
02:41:11,560 --> 02:41:13,560
So you can see that I'm going to give you five minutes.

1992
02:41:13,560 --> 02:41:15,560
So you can see that I'm going to give you five minutes.

1993
02:41:15,560 --> 02:41:17,560
So you can see that I'm going to give you five minutes.

1994
02:41:17,560 --> 02:41:19,560
So you can see that I'm going to give you five minutes.

1995
02:41:19,560 --> 02:41:21,560
So you can see that I'm going to give you five minutes.

1996
02:41:21,560 --> 02:41:23,560
So you can see that I'm going to give you five minutes.

1997
02:41:23,560 --> 02:41:25,560
So you can see that I'm going to give you five minutes.

1998
02:41:25,560 --> 02:41:27,560
So you can see that I'm going to give you five minutes.

1999
02:41:27,560 --> 02:41:29,560
So you can see that I'm going to give you five minutes.

2000
02:41:29,560 --> 02:41:31,560
So you can see that I'm going to give you five minutes.

2001
02:41:31,560 --> 02:41:33,560
So you can see that I'm going to give you five minutes.

2002
02:41:33,560 --> 02:41:35,560
So you can see that I'm going to give you five minutes.

2003
02:41:35,560 --> 02:41:37,560
So you can see that I'm going to give you five minutes.

2004
02:41:37,560 --> 02:41:39,560
So you can see that I'm going to give you five minutes.

2005
02:41:39,560 --> 02:41:41,560
So you can see that I'm going to give you five minutes.

2006
02:41:41,560 --> 02:41:43,560
So you can see that I'm going to give you five minutes.

2007
02:41:43,560 --> 02:41:45,560
So you can see that I'm going to give you five minutes.

2008
02:41:45,560 --> 02:41:47,560
So you can see that I'm going to give you five minutes.

2009
02:41:47,560 --> 02:41:49,560
So you can see that I'm going to give you five minutes.

2010
02:41:49,560 --> 02:41:51,560
So you can see that I'm going to give you five minutes.

2011
02:41:51,560 --> 02:41:53,560
So you can see that I'm going to give you five minutes.

2012
02:41:53,560 --> 02:41:55,560
So you can see that I'm going to give you five minutes.

2013
02:41:55,560 --> 02:41:57,560
So you can see that I'm going to give you five minutes.

2014
02:41:57,560 --> 02:41:59,560
So you can see that I'm going to give you five minutes.

2015
02:41:59,560 --> 02:42:01,560
So you can see that I'm going to give you five minutes.

2016
02:42:01,560 --> 02:42:03,560
So you can see that I'm going to give you five minutes.

2017
02:42:03,560 --> 02:42:05,560
So you can see that I'm going to give you five minutes.

2018
02:42:05,560 --> 02:42:07,560
So you can see that I'm going to give you five minutes.

2019
02:42:07,560 --> 02:42:09,560
So you can see that I'm going to give you five minutes.

2020
02:42:09,560 --> 02:42:11,560
So you can see that I'm going to give you five minutes.

2021
02:42:11,560 --> 02:42:13,560
So you can see that I'm going to give you five minutes.

2022
02:42:13,560 --> 02:42:15,560
So you can see that I'm going to give you five minutes.

2023
02:42:15,560 --> 02:42:17,560
So you can see that I'm going to give you five minutes.

2024
02:42:17,560 --> 02:42:19,560
So you can see that I'm going to give you five minutes.

2025
02:42:19,560 --> 02:42:21,560
So you can see that I'm going to give you five minutes.

2026
02:42:21,560 --> 02:42:23,560
So you can see that I'm going to give you five minutes.

2027
02:42:23,560 --> 02:42:25,560
So you can see that I'm going to give you five minutes.

2028
02:42:25,560 --> 02:42:27,560
So you can see that I'm going to give you five minutes.

2029
02:42:27,560 --> 02:42:29,560
So you can see that I'm going to give you five minutes.

2030
02:42:29,560 --> 02:42:31,560
So you can see that I'm going to give you five minutes.

2031
02:42:31,560 --> 02:42:33,560
So you can see that I'm going to give you five minutes.

2032
02:42:33,560 --> 02:42:35,560
So you can see that I'm going to give you five minutes.

2033
02:42:35,560 --> 02:42:37,560
So you can see that I'm going to give you five minutes.

2034
02:42:37,560 --> 02:42:39,560
So you can see that I'm going to give you five minutes.

2035
02:42:39,560 --> 02:42:41,560
So you can see that I'm going to give you five minutes.

2036
02:42:41,560 --> 02:42:43,560
So you can see that I'm going to give you five minutes.

2037
02:42:43,560 --> 02:42:45,560
So you can see that I'm going to give you five minutes.

2038
02:42:45,560 --> 02:42:47,560
So you can see that I'm going to give you five minutes.

2039
02:42:47,560 --> 02:42:49,560
So you can see that I'm going to give you five minutes.

2040
02:42:49,560 --> 02:42:51,560
So you can see that I'm going to give you five minutes.

2041
02:42:51,560 --> 02:42:53,560
So you can see that I'm going to give you five minutes.

2042
02:42:53,560 --> 02:42:55,560
So you can see that I'm going to give you five minutes.

2043
02:42:55,560 --> 02:42:57,560
So you can see that I'm going to give you five minutes.

2044
02:42:57,560 --> 02:42:59,560
So you can see that I'm going to give you five minutes.

2045
02:42:59,560 --> 02:43:01,560
So you can see that I'm going to give you five minutes.

2046
02:43:01,560 --> 02:43:03,560
So you can see that I'm going to give you five minutes.

2047
02:43:03,560 --> 02:43:05,560
So you can see that I'm going to give you five minutes.

2048
02:43:05,560 --> 02:43:07,560
So you can see that I'm going to give you five minutes.

2049
02:43:07,560 --> 02:43:09,560
So you can see that I'm going to give you five minutes.

2050
02:43:09,560 --> 02:43:11,560
So you can see that I'm going to give you five minutes.

2051
02:43:11,560 --> 02:43:15,560
So you'll lose the cron.

2052
02:43:15,560 --> 02:43:17,560
Well, the scheduling.

2053
02:43:17,560 --> 02:43:19,560
Yeah, you'll lose the cron.

2054
02:43:37,560 --> 02:43:39,560
Yes. So when you turn them on,

2055
02:43:39,560 --> 02:43:41,560
that's enabling it.

2056
02:43:41,560 --> 02:43:43,560
So the scheduler keeps monitoring

2057
02:43:43,560 --> 02:43:45,560
because it has a heartbeat.

2058
02:43:45,560 --> 02:43:47,560
So that is the thing that it does.

2059
02:43:47,560 --> 02:43:49,560
It has a heartbeat.

2060
02:43:49,560 --> 02:43:51,560
So every so often it checks whether a task is due,

2061
02:43:51,560 --> 02:43:53,560
So every so often it checks whether a task is due,

2062
02:43:53,560 --> 02:43:55,560
whether a dog is due.

2063
02:43:55,560 --> 02:43:57,560
So it's constantly checking,

2064
02:43:57,560 --> 02:43:59,560
and when the time comes, it'll spin it off.

2065
02:43:59,560 --> 02:44:01,560
It'll start it off.

2066
02:44:01,560 --> 02:44:07,560
Oh, it tells you if they were started manually.

2067
02:44:07,560 --> 02:44:11,560
Oh, it tells you if they were started manually.

2068
02:44:11,560 --> 02:44:13,560
So...

2069
02:44:19,560 --> 02:44:21,560
So if I go to the bash operator...

2070
02:44:21,560 --> 02:44:23,560
So if I go to the bash operator...

2071
02:44:23,560 --> 02:44:25,560
Where is it?

2072
02:44:25,560 --> 02:44:27,560
Tells...

2073
02:44:27,560 --> 02:44:29,560
No.

2074
02:44:31,560 --> 02:44:33,560
Task drives.

2075
02:44:33,560 --> 02:44:35,560
No.

2076
02:44:37,560 --> 02:44:39,560
Let me check where it is.

2077
02:44:39,560 --> 02:44:41,560
Oh, here it is.

2078
02:44:45,560 --> 02:44:49,560
There is a part where it actually tells you who...

2079
02:44:55,560 --> 02:44:57,560
There is a part.

2080
02:44:57,560 --> 02:44:59,560
I can't remember exactly where it is,

2081
02:44:59,560 --> 02:45:01,560
but...

2082
02:45:11,560 --> 02:45:13,560
Oh, there it says.

2083
02:45:13,560 --> 02:45:15,560
Yeah.

2084
02:45:15,560 --> 02:45:17,560
So if you hover over those little buttons

2085
02:45:17,560 --> 02:45:19,560
that indicate a state,

2086
02:45:19,560 --> 02:45:25,560
if you hover, you'll see that it has a scheduled manual.

2087
02:45:25,560 --> 02:45:27,560
Could you see it?

2088
02:45:29,560 --> 02:45:31,560
Where is the verbalized schedule?

2089
02:45:31,560 --> 02:45:33,560
So if you click there...

2090
02:45:33,560 --> 02:45:35,560
In the run...

2091
02:45:35,560 --> 02:45:37,560
Yeah.

2092
02:45:37,560 --> 02:45:39,560
So you can differentiate

2093
02:45:39,560 --> 02:45:41,560
if they were manually triggered.

2094
02:45:41,560 --> 02:45:45,560
So you have scheduled, and then you have manual.

2095
02:45:45,560 --> 02:45:47,560
So if I run it in A,

2096
02:45:47,560 --> 02:45:49,560
it would be a...

2097
02:45:49,560 --> 02:45:51,560
If I run it in A,

2098
02:45:51,560 --> 02:45:53,560
it would be a...

2099
02:45:53,560 --> 02:45:55,560
Airflow run,

2100
02:45:55,560 --> 02:45:57,560
bash operator,

2101
02:45:57,560 --> 02:45:59,560
manual...

2102
02:45:59,560 --> 02:46:01,560
Yeah, that would be a manual.

2103
02:46:01,560 --> 02:46:03,560
Yeah, so it does...

2104
02:46:03,560 --> 02:46:05,560
Very equivalent if you go and press a button,

2105
02:46:05,560 --> 02:46:09,560
or you just start it from the CLI.

2106
02:46:17,560 --> 02:46:19,560
Yes.

2107
02:46:27,560 --> 02:46:29,560
Yes.

2108
02:46:29,560 --> 02:46:31,560
Oh, you mean the web server?

2109
02:46:31,560 --> 02:46:33,560
You could do everything manually.

2110
02:46:33,560 --> 02:46:35,560
You could do everything from the CLI.

2111
02:46:35,560 --> 02:46:37,560
So if you didn't have the web server,

2112
02:46:37,560 --> 02:46:39,560
it doesn't give you the graphic interface,

2113
02:46:39,560 --> 02:46:41,560
but you can do everything from the CLI.

2114
02:46:41,560 --> 02:46:43,560
So you can see Jerry Dog's,

2115
02:46:43,560 --> 02:46:45,560
you can test them from there.

2116
02:46:45,560 --> 02:46:47,560
You...

2117
02:46:47,560 --> 02:46:49,560
I'm not sure if you can set the connections there.

2118
02:46:49,560 --> 02:46:51,560
That's what I'm going to do.

2119
02:46:51,560 --> 02:46:53,560
So you can set the connections there.

2120
02:46:53,560 --> 02:46:55,560
So you can set the connections there.

2121
02:46:55,560 --> 02:46:57,560
That's what I was wondering,

2122
02:46:57,560 --> 02:46:59,560
because I was just like,

2123
02:46:59,560 --> 02:47:01,560
Airflow is a wireless system,

2124
02:47:01,560 --> 02:47:03,560
and I may not want to...

2125
02:47:03,560 --> 02:47:05,560
I may not want to be able to...

2126
02:47:05,560 --> 02:47:07,560
So you're able to give them any other way.

2127
02:47:07,560 --> 02:47:09,560
You're able to...

2128
02:47:09,560 --> 02:47:11,560
You're able to...

2129
02:47:11,560 --> 02:47:13,560
They're all...

2130
02:47:13,560 --> 02:47:15,560
They're all encrypted.

2131
02:47:15,560 --> 02:47:17,560
Well, everything that you have in your connections,

2132
02:47:17,560 --> 02:47:19,560
and we have also a variable section,

2133
02:47:19,560 --> 02:47:21,560
they're all encrypted,

2134
02:47:21,560 --> 02:47:23,560
and you can only access them through

2135
02:47:23,560 --> 02:47:25,560
the Airflow models.

2136
02:47:25,560 --> 02:47:27,560
So that's a secret ball now?

2137
02:47:27,560 --> 02:47:29,560
You can have... Yeah, you can have a secret ball.

2138
02:47:29,560 --> 02:47:31,560
Yeah.

2139
02:47:31,560 --> 02:47:33,560
So it's good to know that there's a kind of parity

2140
02:47:33,560 --> 02:47:35,560
between the command line and the...

2141
02:47:35,560 --> 02:47:37,560
Yes. Yeah, there is.

2142
02:47:37,560 --> 02:47:39,560
That's the only thing...

2143
02:47:39,560 --> 02:47:41,560
That's the only thing that I don't know if it's

2144
02:47:41,560 --> 02:47:43,560
the connections.

2145
02:47:43,560 --> 02:47:45,560
You can do

2146
02:47:45,560 --> 02:47:47,560
when you're

2147
02:47:47,560 --> 02:47:49,560
running on Kubernetes,

2148
02:47:49,560 --> 02:47:51,560
because you have your... You can create your Helm chart,

2149
02:47:51,560 --> 02:47:53,560
and then you can extend

2150
02:47:53,560 --> 02:47:55,560
your configuration.

2151
02:47:55,560 --> 02:47:57,560
So that's where you

2152
02:47:57,560 --> 02:47:59,560
can very easily add new connections.

2153
02:48:01,560 --> 02:48:03,560
I've never tried doing them from the command line.

2154
02:48:05,560 --> 02:48:07,560
Yeah, we can check that.

2155
02:48:07,560 --> 02:48:09,560
Yeah.

2156
02:48:09,560 --> 02:48:11,560
Yeah.

2157
02:48:11,560 --> 02:48:13,560
The thing is that also

2158
02:48:13,560 --> 02:48:15,560
it gives you... If you're using

2159
02:48:15,560 --> 02:48:17,560
Celery,

2160
02:48:17,560 --> 02:48:19,560
when you have the web server,

2161
02:48:19,560 --> 02:48:21,560
you can also use

2162
02:48:21,560 --> 02:48:23,560
Flour, that is the Celery

2163
02:48:23,560 --> 02:48:25,560
debugger.

2164
02:48:25,560 --> 02:48:27,560
And that exposes on

2165
02:48:27,560 --> 02:48:29,560
78, 78?

2166
02:48:29,560 --> 02:48:31,560
So it's another port. Yeah.

2167
02:48:35,560 --> 02:48:37,560
Yeah, we're doing sequential right now.

2168
02:48:37,560 --> 02:48:39,560
Yeah.

2169
02:48:47,560 --> 02:48:49,560
The Flour.

2170
02:48:49,560 --> 02:48:51,560
Well, you get Flour.

2171
02:48:51,560 --> 02:48:53,560
But also the thing is

2172
02:48:53,560 --> 02:48:55,560
the capability of the things that you can do,

2173
02:48:55,560 --> 02:48:57,560
because with a sequential, you can only have

2174
02:48:57,560 --> 02:48:59,560
one queue.

2175
02:48:59,560 --> 02:49:01,560
Basically, you get the one queue.

2176
02:49:01,560 --> 02:49:03,560
With Celery, you get up to

2177
02:49:03,560 --> 02:49:05,560
16 queues.

2178
02:49:05,560 --> 02:49:07,560
I think.

2179
02:49:07,560 --> 02:49:09,560
Queue.

2180
02:49:09,560 --> 02:49:11,560
Queues, yeah.

2181
02:49:11,560 --> 02:49:13,560
With Celery, you get up to 16.

2182
02:49:13,560 --> 02:49:15,560
Which is quite good.

2183
02:49:21,560 --> 02:49:23,560
Yeah, exactly. Yeah.

2184
02:49:23,560 --> 02:49:25,560
So that is a nice thing.

2185
02:49:25,560 --> 02:49:27,560
Airflow takes absolute care

2186
02:49:27,560 --> 02:49:29,560
of the workers.

2187
02:49:31,560 --> 02:49:33,560
For you.

2188
02:49:33,560 --> 02:49:35,560
That's probably one of the main differences

2189
02:49:35,560 --> 02:49:37,560
versus Luigi.

2190
02:49:37,560 --> 02:49:39,560
Because the scheduler is central.

2191
02:49:39,560 --> 02:49:41,560
So it just finds the first

2192
02:49:41,560 --> 02:49:43,560
available worker and assigns

2193
02:49:43,560 --> 02:49:45,560
it to a task.

2194
02:49:45,560 --> 02:49:47,560
In Luigi, your worker is tied

2195
02:49:47,560 --> 02:49:49,560
to the task.

2196
02:49:53,560 --> 02:49:55,560
Does that make

2197
02:49:55,560 --> 02:49:57,560
sense? Yeah.

2198
02:49:59,560 --> 02:50:01,560
Yeah.

2199
02:50:03,560 --> 02:50:05,560
The nice thing

2200
02:50:05,560 --> 02:50:07,560
that you can do if you have

2201
02:50:07,560 --> 02:50:09,560
your Airflow on Curinet is

2202
02:50:09,560 --> 02:50:11,560
auto-scaling.

2203
02:50:13,560 --> 02:50:15,560
Because you can use node pools and stuff.

2204
02:50:17,560 --> 02:50:19,560
Yeah.

2205
02:50:19,560 --> 02:50:21,560
If you want to take it into

2206
02:50:21,560 --> 02:50:23,560
production, it becomes

2207
02:50:23,560 --> 02:50:25,560
more convoluted.

2208
02:50:25,560 --> 02:50:27,560
To get the infrastructure right.

2209
02:50:27,560 --> 02:50:29,560
Security and

2210
02:50:29,560 --> 02:50:31,560
authentication.

2211
02:50:33,560 --> 02:50:35,560
The other thing that

2212
02:50:35,560 --> 02:50:37,560
we didn't want to do

2213
02:50:37,560 --> 02:50:43,660
with the

2214
02:50:43,660 --> 02:50:45,660
algorithm is

2215
02:50:45,660 --> 02:50:47,660
to have a

2216
02:50:47,660 --> 02:50:49,660
range for

2217
02:50:49,660 --> 02:50:51,660
adding and dropping.

2218
02:50:51,660 --> 02:50:53,660
Okay, yeah, yeah.

2219
02:50:53,660 --> 02:50:55,660
It depends a lot on your needs.

2220
02:50:57,660 --> 02:50:59,660
Yeah, it depends a lot on your needs.

2221
02:50:59,660 --> 02:51:01,660
For example, I very rarely

2222
02:51:01,760 --> 02:51:03,760
run Airflow locally.

2223
02:51:03,760 --> 02:51:05,760
Because of the nature

2224
02:51:05,760 --> 02:51:07,760
of things that I do,

2225
02:51:07,760 --> 02:51:09,760
I can't run it here.

2226
02:51:09,760 --> 02:51:11,760
I always have it somewhere else.

2227
02:51:11,760 --> 02:51:13,760
But what I do is

2228
02:51:13,760 --> 02:51:15,760
I don't have a permanent Airflow now for me.

2229
02:51:15,760 --> 02:51:17,760
Not now.

2230
02:51:17,760 --> 02:51:19,760
Before I had.

2231
02:51:19,760 --> 02:51:21,760
But now

2232
02:51:21,760 --> 02:51:23,760
I just have it and spin it

2233
02:51:23,760 --> 02:51:25,760
up and down as I need.

2234
02:51:25,760 --> 02:51:27,760
Because I already have

2235
02:51:27,760 --> 02:51:29,760
the deployment template.

2236
02:51:29,860 --> 02:51:31,860
So it's easier to turn it

2237
02:51:31,860 --> 02:51:33,860
up and down.

2238
02:51:33,860 --> 02:51:35,860
Well, on and off.

2239
02:51:35,860 --> 02:51:37,860
For, I don't know,

2240
02:51:37,860 --> 02:51:39,860
if I need it for a month or two months.

2241
02:51:39,860 --> 02:51:41,860
Yeah.

2242
02:51:41,860 --> 02:51:43,860
So now I have it there.

2243
02:51:47,860 --> 02:51:49,860
I'm going to show you

2244
02:51:49,860 --> 02:51:51,860
a simple way to do it.

2245
02:51:51,860 --> 02:51:53,860
But what I can do is

2246
02:51:53,860 --> 02:51:55,860
I can add the tutorial to get it working

2247
02:51:55,860 --> 02:51:57,860
on Kubernetes.

2248
02:51:57,960 --> 02:51:59,960
On the AKS.

2249
02:52:01,960 --> 02:52:03,960
If that's something that

2250
02:52:03,960 --> 02:52:05,960
folks would be interested in.

2251
02:52:05,960 --> 02:52:07,960
Cool.

2252
02:52:07,960 --> 02:52:09,960
Sorry, we're talking too much about

2253
02:52:09,960 --> 02:52:11,960
stuff. But yeah, that's a good question.

2254
02:52:11,960 --> 02:52:13,960
Pretty much,

2255
02:52:13,960 --> 02:52:15,960
if you didn't have access to the web server,

2256
02:52:15,960 --> 02:52:17,960
whatever you have

2257
02:52:17,960 --> 02:52:19,960
in the web server and what you can do

2258
02:52:19,960 --> 02:52:21,960
from the CLI are

2259
02:52:21,960 --> 02:52:23,960
paired up. So you can do

2260
02:52:23,960 --> 02:52:25,960
everything from the CLI. You can start

2261
02:52:26,060 --> 02:52:28,060
the server, you can start a

2262
02:52:28,060 --> 02:52:30,060
DAG, monitor it from there,

2263
02:52:30,060 --> 02:52:32,060
test it from there.

2264
02:52:32,060 --> 02:52:34,060
Cool. So we're going to now

2265
02:52:34,060 --> 02:52:36,060
create our first DAG.

2266
02:52:38,060 --> 02:52:40,060
We're going to have to

2267
02:52:40,060 --> 02:52:42,060
because in your configuration file

2268
02:52:42,060 --> 02:52:44,060
your DAG's folder

2269
02:52:44,060 --> 02:52:46,060
is in airflow slash DAGs.

2270
02:52:46,060 --> 02:52:48,060
Unless you changed it intentionally,

2271
02:52:48,060 --> 02:52:50,060
which is fine as well.

2272
02:52:50,060 --> 02:52:52,060
We're going to create a simple DAG

2273
02:52:52,060 --> 02:52:54,060
.py file.

2274
02:52:54,160 --> 02:52:56,160
We still have

2275
02:52:56,160 --> 02:52:58,160
make sure that you still have

2276
02:52:58,160 --> 02:53:00,160
the web server on

2277
02:53:00,160 --> 02:53:02,160
and that you also have the

2278
02:53:02,160 --> 02:53:04,160
scheduler on.

2279
02:53:11,160 --> 02:53:13,160
So we're going to create

2280
02:53:13,160 --> 02:53:15,160
where is it? This blue one.

2281
02:53:15,160 --> 02:53:17,160
Cool.

2282
02:53:17,160 --> 02:53:19,160
So we're going to create

2283
02:53:19,160 --> 02:53:21,160
inside my DAG's folder

2284
02:53:21,160 --> 02:53:23,160
a simple DAG.

2285
02:53:24,160 --> 02:53:26,160
And we're going to

2286
02:53:26,160 --> 02:53:28,160
create a simple DAG.

2287
02:53:28,160 --> 02:53:30,160
So we're going to

2288
02:53:30,160 --> 02:53:32,160
create a simple DAG.

2289
02:53:32,160 --> 02:53:34,160
And we're going to

2290
02:53:34,160 --> 02:53:36,160
create a simple DAG.

2291
02:53:36,160 --> 02:53:38,160
And we're going to start

2292
02:53:38,160 --> 02:53:40,160
with loading the operators.

2293
02:53:40,160 --> 02:53:42,160
Sorry, loading libraries.

2294
02:53:42,160 --> 02:53:44,160
I'm going to use daytime

2295
02:53:44,160 --> 02:53:46,160
and time delta because

2296
02:53:46,160 --> 02:53:48,160
it makes it easier to

2297
02:53:48,160 --> 02:53:50,160
work with time and time

2298
02:53:50,160 --> 02:53:52,160
sums. Sorry.

2299
02:53:52,260 --> 02:53:54,260
And from our airflow

2300
02:53:54,260 --> 02:53:56,260
operators, dummy operator,

2301
02:53:56,260 --> 02:53:58,260
we have to import the dummy operator.

2302
02:53:58,260 --> 02:54:00,260
And as the name says, it's

2303
02:54:00,260 --> 02:54:02,260
an operator basically

2304
02:54:02,260 --> 02:54:04,260
that does nothing on its own.

2305
02:54:04,260 --> 02:54:06,260
It has no

2306
02:54:06,260 --> 02:54:08,260
kernel, no

2307
02:54:08,260 --> 02:54:10,260
many things.

2308
02:54:10,260 --> 02:54:12,260
And then airflow operator is

2309
02:54:12,260 --> 02:54:14,260
Python operator. We're going to import

2310
02:54:14,260 --> 02:54:16,260
the Python operator. If you do a lot

2311
02:54:16,260 --> 02:54:18,260
of Google, if you do some googling

2312
02:54:18,260 --> 02:54:20,260
around and look at

2313
02:54:20,360 --> 02:54:22,360
the workflow and examples of DAGs

2314
02:54:22,360 --> 02:54:24,360
on there, you're going to see that

2315
02:54:24,360 --> 02:54:26,360
a lot of folks import

2316
02:54:28,360 --> 02:54:30,360
from airflow operators,

2317
02:54:30,360 --> 02:54:32,360
import dummy operators, they do direct imports

2318
02:54:32,360 --> 02:54:34,360
that is

2319
02:54:34,360 --> 02:54:36,360
I think that changed from

2320
02:54:36,360 --> 02:54:38,360
1.8 or 1.10

2321
02:54:38,360 --> 02:54:40,360
at some point in airflow.

2322
02:54:40,360 --> 02:54:42,360
You're going to get a lot of errors,

2323
02:54:42,360 --> 02:54:44,360
a lot of warnings if you do that.

2324
02:54:44,360 --> 02:54:46,360
Cool. So our first

2325
02:54:46,360 --> 02:54:48,360
function is going to be the traditional

2326
02:54:48,460 --> 02:54:50,460
hello world. Yeah.

2327
02:54:50,460 --> 02:54:52,460
We're going to see why we need that.

2328
02:54:52,460 --> 02:54:54,460
That's fine.

2329
02:54:54,460 --> 02:54:56,460
So we're going to create

2330
02:54:56,460 --> 02:54:58,460
our

2331
02:54:58,460 --> 02:55:00,460
traditional hello world function.

2332
02:55:00,460 --> 02:55:02,460
So we define it as

2333
02:55:02,460 --> 02:55:04,460
def print hello return hello world.

2334
02:55:04,460 --> 02:55:06,460
And we're going to pass the default args.

2335
02:55:06,460 --> 02:55:08,460
I always use

2336
02:55:08,460 --> 02:55:10,460
default args because that prevents me

2337
02:55:10,460 --> 02:55:12,460
well, I'm lazy again

2338
02:55:12,460 --> 02:55:14,460
and I don't have to rewrite stuff.

2339
02:55:14,460 --> 02:55:16,460
So we're going to pass

2340
02:55:16,560 --> 02:55:18,560
the default args.

2341
02:55:18,560 --> 02:55:20,560
I don't have to rewrite stuff.

2342
02:55:20,560 --> 02:55:22,560
So the owner is going to be airflow again.

2343
02:55:22,560 --> 02:55:24,560
It doesn't depend on past.

2344
02:55:24,560 --> 02:55:26,560
And this is very important because when it depends

2345
02:55:26,560 --> 02:55:28,560
on past, you have to backfill.

2346
02:55:28,560 --> 02:55:30,560
So we're not going to be doing any

2347
02:55:30,560 --> 02:55:32,560
backfilling.

2348
02:55:32,560 --> 02:55:34,560
For me to start date

2349
02:55:34,560 --> 02:55:36,560
is 2019-4-30.

2350
02:55:36,560 --> 02:55:38,560
So it's just

2351
02:55:38,560 --> 02:55:40,560
going to increase.

2352
02:55:40,560 --> 02:55:42,560
It's just going to go from there.

2353
02:55:42,560 --> 02:55:44,560
I don't want emails.

2354
02:55:44,560 --> 02:55:47,640
I just left that email as an example,

2355
02:55:47,640 --> 02:55:50,680
but I'm not gonna receive any emails or emails on retry

2356
02:55:50,680 --> 02:55:55,680
because we've not configured the SMTP or server.

2357
02:55:58,320 --> 02:56:00,060
And I only want one retry.

2358
02:56:02,000 --> 02:56:06,320
And my time delta for my retry is gonna be two minutes.

2359
02:56:06,320 --> 02:56:07,520
So I'm gonna start it to my DAG,

2360
02:56:07,520 --> 02:56:09,120
and I'm gonna call it hello world

2361
02:56:09,120 --> 02:56:13,240
because it's easy to identify and describe it.

2362
02:56:13,240 --> 02:56:15,640
Then we're gonna do a schedule interval,

2363
02:56:15,640 --> 02:56:20,640
and how often is this gonna run for those cron?

2364
02:56:28,660 --> 02:56:29,580
12 minutes?

2365
02:56:33,640 --> 02:56:34,480
No idea.

2366
02:56:36,680 --> 02:56:37,700
12 minutes.

2367
02:56:38,920 --> 02:56:39,760
So it's 12.

2368
02:56:39,920 --> 02:56:40,760
12.

2369
02:56:42,800 --> 02:56:44,680
Okay, so it's every 12 hours.

2370
02:56:44,680 --> 02:56:45,700
Every 12 hours?

2371
02:56:46,920 --> 02:56:48,560
Yes, at 12.

2372
02:56:48,560 --> 02:56:53,560
Like every day at 12 o'clock.

2373
02:56:55,680 --> 02:56:58,680
So remember that in cron, I'm gonna maximize this.

2374
02:56:58,680 --> 02:57:03,680
So in cron you have minute, hour, day, month, day, week.

2375
02:57:04,680 --> 02:57:08,440
And then if you fill in again,

2376
02:57:08,440 --> 02:57:12,160
you have jury wildcard, so there can be any.

2377
02:57:13,840 --> 02:57:18,160
So the next time is gonna be tomorrow at noon at 12.

2378
02:57:21,280 --> 02:57:22,120
Cool.

2379
02:57:24,000 --> 02:57:25,360
I forgot where I was.

2380
02:57:27,120 --> 02:57:29,120
And now I'm gonna define my tasks.

2381
02:57:29,120 --> 02:57:32,120
So I'm gonna start with my dummy operator.

2382
02:57:32,120 --> 02:57:35,800
So it's just gonna be a task ID that is called dummy task.

2383
02:57:35,800 --> 02:57:38,740
Basically, it's gonna do nothing.

2384
02:57:38,740 --> 02:57:40,880
It's just gonna wait there.

2385
02:57:40,880 --> 02:57:43,920
It's like a sleep there.

2386
02:57:44,800 --> 02:57:47,000
And once that has completed,

2387
02:57:47,000 --> 02:57:51,540
it's gonna instantiate that Python operator.

2388
02:57:51,540 --> 02:57:54,300
And the task that it's gonna call is hello task.

2389
02:57:55,260 --> 02:57:57,240
You have to be very careful

2390
02:57:57,240 --> 02:58:01,860
because then we have to do a Python callable print hello,

2391
02:58:01,860 --> 02:58:05,660
and this has to match the name of your function.

2392
02:58:07,020 --> 02:58:09,900
So be very careful because we don't call the function

2393
02:58:09,900 --> 02:58:12,980
as or the method as we normally do it in Python

2394
02:58:12,980 --> 02:58:16,300
that we have to append the brackets,

2395
02:58:16,300 --> 02:58:18,100
but we only call it by the name.

2396
02:58:21,220 --> 02:58:24,420
And then this tag is gonna belong to that.

2397
02:58:24,420 --> 02:58:29,220
This task is gonna be part of tasks of the tag,

2398
02:58:29,220 --> 02:58:30,860
of this tag object.

2399
02:58:30,900 --> 02:58:32,140
So now I have two tasks,

2400
02:58:32,140 --> 02:58:35,240
and then we have to determine

2401
02:58:35,240 --> 02:58:37,900
the order of these tasks to be run.

2402
02:58:39,740 --> 02:58:43,620
So I have T1 that will precede T2,

2403
02:58:45,320 --> 02:58:49,660
which is equivalent to write T2 setup stream T1.

2404
02:58:49,660 --> 02:58:53,500
These are equivalent options,

2405
02:58:53,500 --> 02:58:56,140
so you can have one or the other one.

2406
02:58:56,140 --> 02:58:59,400
And an easy way to think about this is,

2407
02:58:59,400 --> 02:59:01,600
do you remember that node graph?

2408
02:59:01,600 --> 02:59:03,480
So this is the arrow.

2409
02:59:03,480 --> 02:59:05,320
Where is T1 going to?

2410
02:59:07,440 --> 02:59:10,600
Here you can say T2 set upstream T1

2411
02:59:10,600 --> 02:59:13,620
or T1 set downstream.

2412
02:59:15,680 --> 02:59:16,520
Okay.

2413
02:59:17,880 --> 02:59:19,300
So if you save this,

2414
02:59:20,600 --> 02:59:25,600
if you've typed this into whatever your,

2415
02:59:26,120 --> 02:59:31,120
your dog houses, you save it.

2416
02:59:33,240 --> 02:59:35,520
As long as your web server is up and running,

2417
02:59:35,520 --> 02:59:37,080
as well as your scheduler,

2418
02:59:38,580 --> 02:59:42,680
you should be able to see it straight away in your dogs.

2419
02:59:47,000 --> 02:59:49,000
Where is my hello world?

2420
02:59:49,000 --> 02:59:50,420
So I'm gonna turn it on.

2421
02:59:50,580 --> 02:59:51,420
Okay.

2422
02:59:53,460 --> 02:59:56,220
And you see that there has been two successes.

2423
02:59:57,700 --> 03:00:00,620
The last time it was running a worried hour,

2424
03:00:00,620 --> 03:00:02,220
but I'm gonna trigger it anyway.

2425
03:00:08,460 --> 03:00:09,300
Mm-hmm.

2426
03:00:10,460 --> 03:00:12,500
So if I go to the graph view,

2427
03:00:12,500 --> 03:00:15,060
you can see that very clear graph,

2428
03:00:15,060 --> 03:00:16,980
or that very clear resuccession.

2429
03:00:20,420 --> 03:00:21,260
Cool.

2430
03:00:28,140 --> 03:00:30,620
And then if I leave it as such,

2431
03:00:30,620 --> 03:00:33,920
if I leave it on, then the next time,

2432
03:00:34,900 --> 03:00:36,860
if I leave it like so,

2433
03:00:36,860 --> 03:00:41,780
then tomorrow at noon or at 12 o'clock, it's gonna run.

2434
03:00:41,780 --> 03:00:42,620
Okay.

2435
03:00:49,460 --> 03:00:53,820
Because I have UTC, well, because I have UTC enabled,

2436
03:00:53,820 --> 03:00:58,180
it is 1613 actually here.

2437
03:00:58,180 --> 03:00:59,620
But this is the start date.

2438
03:00:59,620 --> 03:01:01,060
It counts the start date

2439
03:01:01,060 --> 03:01:03,820
when you actually activated the dog.

2440
03:01:07,860 --> 03:01:08,700
Cool.

2441
03:01:09,700 --> 03:01:13,820
So if we click here, you can see the logs

2442
03:01:13,820 --> 03:01:15,140
either from your comment line,

2443
03:01:15,140 --> 03:01:18,860
or you can click on the task and then click on view logs.

2444
03:01:21,460 --> 03:01:22,980
And it tells you how many times.

2445
03:01:22,980 --> 03:01:25,060
Remember that we gave three retries,

2446
03:01:25,060 --> 03:01:28,160
so it's attempt number one of four.

2447
03:01:28,160 --> 03:01:31,060
If it failed, it would have started again.

2448
03:01:31,060 --> 03:01:36,060
It would have waited for two minutes and then started again.

2449
03:01:39,060 --> 03:01:39,900
Cool.

2450
03:01:43,340 --> 03:01:46,860
And then once this is completed, this one is queued.

2451
03:01:46,860 --> 03:01:49,340
Because again, remember that we're using the sequent anyway,

2452
03:01:49,340 --> 03:01:52,260
it has to be queued, because this goes afterwards.

2453
03:01:57,100 --> 03:01:58,580
And then this is attempt.

2454
03:01:58,580 --> 03:02:00,740
This one only has two retries,

2455
03:02:00,740 --> 03:02:03,160
because that's what we specified.

2456
03:02:03,160 --> 03:02:05,220
Not one retry, sorry.

2457
03:02:09,420 --> 03:02:14,420
Now, so you can, if you define in your default arguments

2458
03:02:16,580 --> 03:02:19,980
a global retry, then when you actually specify the task

2459
03:02:19,980 --> 03:02:23,060
inside your dog, you can modify or overwrite

2460
03:02:23,060 --> 03:02:25,380
any of those default arguments.

2461
03:02:25,380 --> 03:02:27,980
So T1 has three retries,

2462
03:02:27,980 --> 03:02:32,980
whereas T2 has the single retry,

2463
03:02:33,020 --> 03:02:33,980
because I didn't pass it.

2464
03:02:33,980 --> 03:02:38,980
It's just the default ones that I defined before.

2465
03:02:43,260 --> 03:02:45,880
So once this is completed, again,

2466
03:02:47,820 --> 03:02:48,660
sorry.

2467
03:02:50,740 --> 03:02:53,900
These changes to green, that indicates the success.

2468
03:02:53,900 --> 03:02:58,900
So it's gonna be automatically added.

2469
03:03:06,860 --> 03:03:08,480
So let me see.

2470
03:03:09,740 --> 03:03:14,740
Let's say that I have another dummy operator, right?

2471
03:03:15,060 --> 03:03:20,060
So if I do two, three, and I have a dummy operator,

2472
03:03:20,380 --> 03:03:25,380
I'll create a task ID called finale.

2473
03:03:31,740 --> 03:03:34,620
And then I don't care about retries,

2474
03:03:34,620 --> 03:03:36,380
and it belongs to that.

2475
03:03:39,740 --> 03:03:43,320
Oh, okay.

2476
03:03:44,300 --> 03:03:45,460
So you have that.

2477
03:03:45,460 --> 03:03:48,500
And then I said that it goes after E3.

2478
03:03:50,260 --> 03:03:51,100
After two.

2479
03:03:52,620 --> 03:03:55,900
Now, remember that the scheduler has a heartbeat,

2480
03:03:55,900 --> 03:03:58,720
so it's not gonna be automatically.

2481
03:03:59,940 --> 03:04:01,960
But you can go here.

2482
03:04:05,820 --> 03:04:07,020
What is that I have here?

2483
03:04:07,020 --> 03:04:08,260
This is a web server.

2484
03:04:10,140 --> 03:04:11,420
Oh, here is the scheduler.

2485
03:04:12,820 --> 03:04:15,180
So here it has been filling the duck box.

2486
03:04:15,180 --> 03:04:19,820
So it was a minute ago, so it'll take a bit to update.

2487
03:04:20,940 --> 03:04:23,160
But you should be able to see,

2488
03:04:25,100 --> 03:04:27,980
depending on how often this is updating.

2489
03:04:30,260 --> 03:04:32,540
So it should refresh at some point.

2490
03:04:32,540 --> 03:04:33,780
You should be able to do that.

2491
03:04:33,780 --> 03:04:38,340
But then the new task will only be run

2492
03:04:38,340 --> 03:04:41,340
when the next schedule run is due.

2493
03:04:42,580 --> 03:04:47,580
It doesn't run on update time.

2494
03:04:48,580 --> 03:04:50,460
Does that make sense?

2495
03:04:51,500 --> 03:04:56,500
Yeah, yeah, yeah.

2496
03:04:56,500 --> 03:04:59,740
Yeah, so even if you do an update on the dog,

2497
03:04:59,740 --> 03:05:03,120
they should be persisted in there.

2498
03:05:07,100 --> 03:05:09,900
Yeah, it's just gonna take a while.

2499
03:05:09,900 --> 03:05:11,620
But yeah, you can update your dogs.

2500
03:05:12,760 --> 03:05:14,460
But then again, it depends on how you have them

2501
03:05:14,460 --> 03:05:16,540
in production, how you actually are

2502
03:05:18,220 --> 03:05:20,700
updating them or uploading them.

2503
03:05:20,700 --> 03:05:22,860
So if you have something like blob storage,

2504
03:05:23,900 --> 03:05:25,660
it'll depend on how would you push them

2505
03:05:25,660 --> 03:05:27,620
or how would you update them.

2506
03:05:27,620 --> 03:05:29,380
This isn't gonna be served locally.

2507
03:05:30,620 --> 03:05:32,380
But it's gonna be pretty much automatic

2508
03:05:32,380 --> 03:05:33,580
as soon as you push it.

2509
03:05:35,300 --> 03:05:38,660
Yeah, for that, it's more like all of the full

2510
03:05:38,660 --> 03:05:42,260
this Python content, does that matter, right?

2511
03:05:42,260 --> 03:05:45,300
Everything is Python, yes.

2512
03:05:45,820 --> 03:05:49,740
But that's why you have also the bash operators.

2513
03:05:49,740 --> 03:05:52,980
So if you look here at the bash operator,

2514
03:05:52,980 --> 03:05:54,880
you have another one.

2515
03:05:58,100 --> 03:05:58,940
The HTTP.

2516
03:05:59,940 --> 03:06:03,020
We'll look at the code, for example.

2517
03:06:08,300 --> 03:06:13,300
Yes, so in the HTTP, like you're sending a HTTP request.

2518
03:06:13,660 --> 03:06:16,180
Well, you're using the simple HTTP operator.

2519
03:06:16,180 --> 03:06:18,980
So you have your headers, your requests, and your endpoint.

2520
03:06:20,060 --> 03:06:23,260
So it's still a Python wrapper, but you can use it.

2521
03:06:25,700 --> 03:06:27,820
The structure itself, whatever operator you're using.

2522
03:06:27,820 --> 03:06:30,300
In that case, you can use, that's why you have bash

2523
03:06:30,300 --> 03:06:35,240
and soft, but also you have a lot of overflow hooks

2524
03:06:35,240 --> 03:06:37,660
that hook to other self-like SQL

2525
03:06:41,020 --> 03:06:43,180
to actually extend the capabilities

2526
03:06:44,060 --> 03:06:46,420
without you having to add more operators,

2527
03:06:47,500 --> 03:06:48,520
if that makes sense.

2528
03:06:51,460 --> 03:06:52,300
Cool.

2529
03:06:53,940 --> 03:06:58,940
So now we're gonna, if you remember that Twitter pipeline

2530
03:06:59,800 --> 03:07:02,300
that we created, the goal will be to try

2531
03:07:02,300 --> 03:07:03,860
and get it on Airflow.

2532
03:07:04,780 --> 03:07:08,740
Instead of having all of that, that we had a Python script,

2533
03:07:08,740 --> 03:07:11,100
we'll have to do a lot of refactoring

2534
03:07:11,860 --> 03:07:15,180
to actually put it in a form of a DAG

2535
03:07:15,180 --> 03:07:19,460
so that every day you can choose an hour,

2536
03:07:20,340 --> 03:07:21,480
two o'clock in the morning.

2537
03:07:21,480 --> 03:07:24,220
I choose random hours, like three o'clock in the morning

2538
03:07:24,220 --> 03:07:26,520
where there is very low volume of stuff.

2539
03:07:28,440 --> 03:07:30,780
So that one that we did, to extract the tweets,

2540
03:07:30,780 --> 03:07:33,940
then do a bit of analysis, how would you do it

2541
03:07:33,940 --> 03:07:35,680
so that it becomes a DAG?

2542
03:07:35,680 --> 03:07:39,660
You'll have to do a bit of thinking.

2543
03:07:39,700 --> 03:07:42,340
And I want you to do it in pairs,

2544
03:07:42,340 --> 03:07:44,100
to do a lot of pair programming.

2545
03:07:45,700 --> 03:07:47,980
You can start with something very, very simple,

2546
03:07:47,980 --> 03:07:51,540
like just do, start with a Twitter query.

2547
03:07:51,540 --> 03:07:53,260
How would you would do the Twitter query

2548
03:07:53,260 --> 03:07:55,500
so that it runs every day?

2549
03:07:55,500 --> 03:07:58,780
And then start, how would you do the Twitter query

2550
03:07:58,780 --> 03:08:03,780
plus the database saving and stuff?

2551
03:08:04,040 --> 03:08:05,540
Does that make sense?

2552
03:08:05,540 --> 03:08:08,500
And I'll be helping you, well, I'll be around.

2553
03:08:08,500 --> 03:08:10,860
I have the solutions, but I want you to try

2554
03:08:10,860 --> 03:08:14,540
and start thinking about how you would refactor it

2555
03:08:14,540 --> 03:08:18,220
into a proper DAG.

2556
03:08:25,780 --> 03:08:27,620
Oh, yeah, no, that's not in the GitHub.

2557
03:08:27,620 --> 03:08:29,660
But I've not, the only changes,

2558
03:08:29,660 --> 03:08:33,260
if you don't have your database by default now.

2559
03:08:36,940 --> 03:08:38,180
That's fine, there you go.

2560
03:08:39,340 --> 03:08:40,180
Okay.

2561
03:08:42,180 --> 03:08:43,020
So.

2562
03:08:46,740 --> 03:08:47,580
Oh, yes.

2563
03:08:56,140 --> 03:08:57,640
Sure, cool.

2564
03:08:59,540 --> 03:09:02,500
Something that you might want to look at

2565
03:09:02,500 --> 03:09:06,980
is this thing called my SQL hook.

2566
03:09:09,220 --> 03:09:10,060
Air flow.

2567
03:09:27,420 --> 03:09:29,700
And I can't find a documentation.

2568
03:09:29,700 --> 03:09:30,660
Oh, here it is.

2569
03:09:39,500 --> 03:09:42,180
So if you think in terms of tasks,

2570
03:09:42,180 --> 03:09:47,180
let's just start breaking that ETL in number of tasks

2571
03:09:47,500 --> 03:09:49,180
and then that will make it easier for you

2572
03:09:49,180 --> 03:09:51,860
to start refactoring the code.

2573
03:09:51,860 --> 03:09:54,960
So what would be the first task?

2574
03:09:59,740 --> 03:10:02,120
The listener, yeah, creating your listener,

2575
03:10:02,120 --> 03:10:03,400
whatever it looks like.

2576
03:10:05,300 --> 03:10:08,020
But then you're gonna have to have a different approach.

2577
03:10:08,020 --> 03:10:10,460
For example, it'll have to be a timed listener

2578
03:10:10,460 --> 03:10:13,540
or have a maximum number of pages

2579
03:10:13,540 --> 03:10:16,340
or a maximum number of queries that you can run.

2580
03:10:22,860 --> 03:10:25,900
Okay, yes, yeah, so the first one will be the listener

2581
03:10:25,900 --> 03:10:28,100
and then the second one will be.

2582
03:10:35,660 --> 03:10:37,380
The cleaning, yeah, whatever you're doing.

2583
03:10:37,420 --> 03:10:38,900
Cleaning, filtering, whatever it,

2584
03:10:38,900 --> 03:10:42,340
then you can do, for example, a plotting bit

2585
03:10:42,340 --> 03:10:45,240
and a reporting bit or something of the such.

2586
03:10:46,580 --> 03:10:48,740
I wanted to work in Paris to try and get

2587
03:10:50,300 --> 03:10:55,300
some sort of listener, a listener of some sort first.

2588
03:10:55,620 --> 03:10:56,460
Working.

2589
03:11:37,380 --> 03:11:41,220
I've only done like four or five.

2590
03:12:37,380 --> 03:12:42,380
I have my Airflow running here and it's on the local,

2591
03:12:46,420 --> 03:12:47,820
like here, can I go?

2592
03:14:07,380 --> 03:14:36,380
Sorry.

2593
03:14:36,420 --> 03:14:37,940
I thought we still had 10 minutes,

2594
03:14:37,940 --> 03:14:40,860
but now it was a 10 minutes on top of 12.20.

2595
03:14:40,860 --> 03:14:45,080
So on there, if you go on the repo,

2596
03:14:47,460 --> 03:14:50,060
that is the one that I shared here,

2597
03:14:50,060 --> 03:14:54,280
if you go to solutions, I have two more docs.

2598
03:14:59,820 --> 03:15:01,620
It's just so that you can follow along.

2599
03:15:01,620 --> 03:15:03,980
And here is the Twitter Airflow

2600
03:15:03,980 --> 03:15:07,300
that will do a more refined version

2601
03:15:07,300 --> 03:15:10,260
of the Twitter ETL that we did.

2602
03:15:10,260 --> 03:15:13,140
And it includes everything and collating tweets,

2603
03:15:13,140 --> 03:15:16,260
but instead of using a stream listener,

2604
03:15:16,260 --> 03:15:21,100
it's using a cursor and it's based on number of tweet pages.

2605
03:15:21,100 --> 03:15:23,820
So that'll make it easier because you don't have to time

2606
03:15:23,820 --> 03:15:26,900
your stream listener, what actually you fill in a page

2607
03:15:28,500 --> 03:15:29,480
of tweets.

2608
03:15:29,480 --> 03:15:33,020
And then there is another example with so dogs

2609
03:15:33,020 --> 03:15:35,980
so that if you have your dog with a parameter,

2610
03:15:35,980 --> 03:15:40,980
let's say I'm looking for the hashtags,

2611
03:15:41,140 --> 03:15:44,180
PyCon, Python and tacos, whatever.

2612
03:15:44,180 --> 03:15:48,860
So for each of those parameters, you have a base tasks.

2613
03:15:48,860 --> 03:15:51,120
I am actually going to show you here.

2614
03:15:51,120 --> 03:15:53,820
It's gonna be super quick and you can go for your lunch.

2615
03:15:58,820 --> 03:16:02,060
And then it creates sub dogs depending on how

2616
03:16:02,060 --> 03:16:04,780
your parameters are defined.

2617
03:16:04,780 --> 03:16:07,820
So if you look in the graph view, it looks like this.

2618
03:16:10,660 --> 03:16:13,020
So you have your initial filter

2619
03:16:13,020 --> 03:16:15,160
and you generate your search terms

2620
03:16:15,160 --> 03:16:18,300
and then it expands into as many dogs.

2621
03:16:18,300 --> 03:16:20,940
So this is very useful, especially if you're using

2622
03:16:20,940 --> 03:16:23,220
Kubernetes or Celery because you can run

2623
03:16:23,220 --> 03:16:27,460
all of this in parallel and then they'll go back together

2624
03:16:27,460 --> 03:16:29,000
to finalize your dog.

2625
03:16:29,920 --> 03:16:33,480
So those things are very, very useful as I said,

2626
03:16:33,480 --> 03:16:36,200
if you have tasks that you can actually run in parallel

2627
03:16:36,200 --> 03:16:38,080
and then bring back together.

2628
03:16:40,740 --> 03:16:45,040
I have the instructions for you to run a experimental,

2629
03:16:45,040 --> 03:16:47,600
well like an R&D, Airflow on Azure

2630
03:16:47,600 --> 03:16:49,040
and you can use your credits.

2631
03:16:49,040 --> 03:16:51,160
It's very, very simple.

2632
03:16:51,160 --> 03:16:56,160
But if you want, if you're interested in actually having

2633
03:16:56,320 --> 03:17:01,320
a Kubernetes powered Airflow instance in Azure,

2634
03:17:02,240 --> 03:17:06,920
I will be writing a mini tutorial or a mini walkthrough

2635
03:17:06,920 --> 03:17:11,100
so I can always add it to the read docs

2636
03:17:11,100 --> 03:17:12,840
that I already have if that's something

2637
03:17:12,840 --> 03:17:14,360
that you would be interested.

2638
03:17:14,360 --> 03:17:15,420
And you can follow along.

2639
03:17:15,420 --> 03:17:18,700
You have $200 of Azure credit

2640
03:17:18,700 --> 03:17:21,040
and those are gonna last 90 days.

2641
03:17:21,880 --> 03:17:24,680
So you already have them, make sure that you use them.

2642
03:17:26,160 --> 03:17:29,040
Because otherwise, they're just gonna die.

2643
03:17:29,040 --> 03:17:33,120
And I'm gonna be around if you want to ask any questions.

2644
03:17:33,120 --> 03:17:35,320
Remember to fill in your survey.

2645
03:17:35,320 --> 03:17:38,000
And I have some nice Python stickers

2646
03:17:38,000 --> 03:17:40,400
if you want some stickers.

2647
03:17:40,400 --> 03:17:43,280
I have Clippy stickers as well if you like Clippy.

2648
03:17:44,360 --> 03:17:47,020
Thanks for spending all your morning with me

2649
03:17:47,020 --> 03:17:49,100
and hearing me talk all the time.

2650
03:17:49,980 --> 03:17:50,820
Thank you.

2651
03:17:52,060 --> 03:17:52,900
Thank you.

2652
03:17:52,900 --> 03:17:53,740
Thank you.

2653
03:17:53,740 --> 03:17:54,580
Thank you.

