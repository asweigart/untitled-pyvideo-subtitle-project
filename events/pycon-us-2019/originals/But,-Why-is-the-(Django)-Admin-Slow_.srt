1
00:00:00,000 --> 00:00:12,600
Hey, everyone.

2
00:00:12,600 --> 00:00:15,240
About to get started.

3
00:00:15,240 --> 00:00:24,120
Right now we have Jacinda Shelley from But Why Is the Django Admin Slow?

4
00:00:24,120 --> 00:00:29,640
Hello.

5
00:00:29,640 --> 00:00:31,560
Thank you all for coming.

6
00:00:31,560 --> 00:00:32,560
We'll get through this together.

7
00:00:32,560 --> 00:00:37,720
I know it is post lunchtime and it's already been a day and a half of talks.

8
00:00:37,720 --> 00:00:40,360
So I appreciate you all being here.

9
00:00:40,360 --> 00:00:45,880
I know even though I've given several talks, I still had two nightmares last night about

10
00:00:45,880 --> 00:00:52,160
accidentally taking a flight home and missing my own talk, which was just wonderfully reassuring

11
00:00:52,200 --> 00:00:54,440
to wake up to in the morning.

12
00:00:54,440 --> 00:01:00,680
Today we're going to be talking about why your Django admin might not be performing at

13
00:01:00,680 --> 00:01:02,480
its best.

14
00:01:02,480 --> 00:01:08,800
And there are a few basic reasons that I've come across that are good places to start.

15
00:01:08,800 --> 00:01:13,680
This is certainly not the be all and end all in terms of admin performance talks, but it's

16
00:01:13,680 --> 00:01:15,800
a few quick things that you can check.

17
00:01:15,800 --> 00:01:18,560
A little bit about me before we get started.

18
00:01:18,560 --> 00:01:20,800
I'm currently the CTO at Doctor on Demand.

19
00:01:20,800 --> 00:01:24,280
I was the first engineer and employee there.

20
00:01:24,280 --> 00:01:25,880
We use Python and Django.

21
00:01:25,880 --> 00:01:28,320
We have a booth we're hiring.

22
00:01:28,320 --> 00:01:32,760
Part of the reason that I started becoming interested in this topic was because of issues

23
00:01:32,760 --> 00:01:35,360
that I had personally.

24
00:01:35,360 --> 00:01:41,720
And outside of work, like exercise, reading, family time.

25
00:01:41,720 --> 00:01:46,800
And I would like to say a big thank you to PyCon for making childcare available at the

26
00:01:47,360 --> 00:01:51,440
without which this talk would have been a lot more difficult for me to give.

27
00:01:51,440 --> 00:01:56,780
This is me dropping my daughter off earlier today.

28
00:01:56,780 --> 00:01:58,720
And this is her third PyCon.

29
00:01:58,720 --> 00:01:59,720
She's two and a half.

30
00:01:59,720 --> 00:02:03,320
So PyCon is a very family friendly conference.

31
00:02:03,320 --> 00:02:05,240
All right.

32
00:02:05,240 --> 00:02:06,560
Let's get started.

33
00:02:06,560 --> 00:02:09,400
You just started using the admin.

34
00:02:09,400 --> 00:02:13,640
First, you feel like this.

35
00:02:13,640 --> 00:02:18,120
I wrote one line of code and I have a whole site.

36
00:02:18,120 --> 00:02:20,040
This is amazing.

37
00:02:20,040 --> 00:02:24,160
Everyone thinks that I am a programming god.

38
00:02:24,160 --> 00:02:27,800
You didn't mention that this was a built in feature of Django.

39
00:02:27,800 --> 00:02:33,280
That would just give you a week of extra work.

40
00:02:33,280 --> 00:02:34,280
People start using it.

41
00:02:34,280 --> 00:02:36,000
They think you're a miracle worker.

42
00:02:36,000 --> 00:02:37,000
You love Django.

43
00:02:37,000 --> 00:02:39,520
They start requesting new features.

44
00:02:39,520 --> 00:02:42,480
You add them with just one or two lines of code.

45
00:02:42,480 --> 00:02:44,080
Everything is going smoothly.

46
00:02:44,080 --> 00:02:45,080
You feel like this.

47
00:02:45,080 --> 00:02:46,920
This goes on for a little while.

48
00:02:46,920 --> 00:02:47,920
You're flying.

49
00:02:47,920 --> 00:02:48,920
How?

50
00:02:48,920 --> 00:02:51,580
The Django admin.

51
00:02:51,580 --> 00:02:54,480
But then.

52
00:02:54,480 --> 00:02:58,280
But then.

53
00:02:58,280 --> 00:02:59,340
Come on.

54
00:02:59,340 --> 00:03:03,640
My grandma goes faster than this through peanut butter.

55
00:03:03,640 --> 00:03:12,180
You start hitting five second load times, ten second load times, 30 second load times.

56
00:03:12,260 --> 00:03:13,500
People are complaining.

57
00:03:13,500 --> 00:03:16,100
You didn't change any of the code.

58
00:03:16,100 --> 00:03:20,980
You're not really sure why this is happening.

59
00:03:20,980 --> 00:03:29,500
And now, your boss, team, client, you're trying to convince them it's okay.

60
00:03:29,500 --> 00:03:31,940
But they're like no.

61
00:03:31,940 --> 00:03:35,480
No this needs to be faster.

62
00:03:35,480 --> 00:03:41,060
You're feeling down because you're thinking, man, I'm going to have to redo all of this

63
00:03:41,060 --> 00:03:43,820
functionality from scratch.

64
00:03:43,820 --> 00:03:46,300
It's going to delay things.

65
00:03:46,300 --> 00:03:50,660
I'm not going to work on that new feature that I wanted to work on.

66
00:03:50,660 --> 00:03:55,180
And everyone is just going to be upset.

67
00:03:55,180 --> 00:03:59,420
So what do you do instead?

68
00:03:59,420 --> 00:04:04,780
In this talk, we're going to use an example library application.

69
00:04:04,780 --> 00:04:09,620
This is an example that I use frequently because it's relatively easy to understand.

70
00:04:09,620 --> 00:04:13,660
And there are a lot of relationships in this database.

71
00:04:13,660 --> 00:04:16,100
Books have authors.

72
00:04:16,100 --> 00:04:18,340
Library users check out books.

73
00:04:18,340 --> 00:04:19,820
They have due dates.

74
00:04:19,820 --> 00:04:24,500
Also, I've used it many times in the past and I'm lazy and I didn't want to rewrite

75
00:04:24,500 --> 00:04:30,140
code for another example.

76
00:04:30,140 --> 00:04:37,780
Our library allows users to update and manage the items in the library's collection.

77
00:04:37,780 --> 00:04:42,580
To view which items are checked out by users and when they are due and whether they are

78
00:04:42,580 --> 00:04:43,580
overdue.

79
00:04:43,580 --> 00:04:48,700
So in the admin at the top, you can see the built-in groups.

80
00:04:48,700 --> 00:04:54,140
We have library users, which are our patrons and our librarians.

81
00:04:54,140 --> 00:05:02,020
And then within the stacks app, we have authors, books, and books that are loaned out, which

82
00:05:03,020 --> 00:05:10,180
between the library user and a particular book.

83
00:05:10,180 --> 00:05:11,980
Look at some of the code.

84
00:05:11,980 --> 00:05:17,960
First we have our custom library user model, which inherits from abstract user.

85
00:05:17,960 --> 00:05:23,420
For most of the code examples in this presentation, there are more comments in the actual code,

86
00:05:23,420 --> 00:05:26,620
which I will provide a link to at the end.

87
00:05:26,620 --> 00:05:31,540
But for the purposes of making the text as large as possible for the presentation, I

88
00:05:31,540 --> 00:05:34,780
left out a lot of the comments.

89
00:05:34,780 --> 00:05:40,260
The boilerplate user has our username, first name, last name, email address, whether or

90
00:05:40,260 --> 00:05:44,820
not they're allowed to use the admin, and other basic information.

91
00:05:44,820 --> 00:05:52,420
To this, we also added birthday, gender, and which books the user has checked out.

92
00:05:52,420 --> 00:06:01,280
We added a friendly string method, to get the user's full name.

93
00:06:01,280 --> 00:06:05,520
The next model that we have is the author of a book.

94
00:06:05,520 --> 00:06:10,920
In this, we are only including last name and first name for simplicity.

95
00:06:10,920 --> 00:06:19,320
Finally, we have a book which inherits from an abstract item, which most of the fields

96
00:06:19,320 --> 00:06:24,960
in the abstract item are not relevant to this talk, so I left those out.

97
00:06:24,960 --> 00:06:32,820
A book has a title, a page count, the daily fine, which will increase the longer you have

98
00:06:32,820 --> 00:06:33,820
an overdue book.

99
00:06:33,820 --> 00:06:39,080
I actually have one that's overdue right now, and I found that I can't renew it online,

100
00:06:39,080 --> 00:06:42,640
so I'm having minor anxiety about this at the moment.

101
00:06:42,640 --> 00:06:51,280
Finally, we have our loaned book model, which is a relationship between a patron who has

102
00:06:51,280 --> 00:06:54,100
checked out a book, a particular book.

103
00:06:54,100 --> 00:06:59,900
It has a check out date, a due date, the date that the book was returned if applicable,

104
00:06:59,900 --> 00:07:05,360
how many times it was renewed, and whether or not they paid a fine.

105
00:07:05,360 --> 00:07:13,120
Our helpful output here is that we join the string representation of the patron and the

106
00:07:13,120 --> 00:07:16,860
string representation of the book together.

107
00:07:17,760 --> 00:07:24,800
Next, one of the most important tools that we will use in this presentation is called

108
00:07:24,800 --> 00:07:26,920
the Django debug toolbar.

109
00:07:26,920 --> 00:07:31,680
If you are new to Django and learn nothing else from this presentation, it is that this

110
00:07:31,680 --> 00:07:35,460
is one of the most useful tools that you can download.

111
00:07:35,460 --> 00:07:42,100
It gives you information into, for example, what version of Django you're using, how long

112
00:07:42,220 --> 00:07:47,760
it took for your page to load, what settings you're using, headers, requests.

113
00:07:47,760 --> 00:07:58,020
What we'll spend all of our time on in this talk is the SQL output, but there are so many

114
00:07:58,020 --> 00:08:03,160
levels of the debug toolbar that are useful that it's worth your time to check this out

115
00:08:03,160 --> 00:08:06,520
and read through the full documentation.

116
00:08:06,520 --> 00:08:11,660
The development of Django is as simple as adding it to our installed apps, our middleware,

117
00:08:11,660 --> 00:08:20,060
and a quick tip is that internal IPs, this is something that I think trips a lot of people

118
00:08:20,060 --> 00:08:21,060
up.

119
00:08:21,060 --> 00:08:24,660
It's a white list of IPs that are making requests to your server.

120
00:08:24,660 --> 00:08:31,220
If you're doing local development, this is typically 127.0.0.1, but places that this

121
00:08:31,220 --> 00:08:37,520
can trip people up is, for example, if you're doing development on a virtual machine, then

122
00:08:37,520 --> 00:08:47,340
you want internal IPs to be whatever the virtual machine sees as your host, because otherwise

123
00:08:47,340 --> 00:08:49,520
you won't see the debug toolbar.

124
00:08:49,520 --> 00:08:53,520
It will take you a long time to figure it out, and you will be sad.

125
00:08:53,520 --> 00:08:59,200
Also, if you are running the debug toolbar on a development server that is, for example,

126
00:08:59,200 --> 00:09:04,120
behind a VPN and you're connecting to it from your own machine, then it needs to be the

127
00:09:04,120 --> 00:09:07,500
IP address of your machine that is internal IPs.

128
00:09:07,500 --> 00:09:13,520
This is one of the most common configuration issues I see with people using the debug toolbar

129
00:09:13,520 --> 00:09:20,920
in non-local development.

130
00:09:20,920 --> 00:09:23,600
This is our first attempt.

131
00:09:23,600 --> 00:09:26,920
We created a simple list view for loaned book.

132
00:09:26,920 --> 00:09:30,860
All we did was register it with the admin.

133
00:09:30,860 --> 00:09:36,560
It's using the default thunder stir method that we had for loaned book.

134
00:09:36,560 --> 00:09:41,080
It's taking 17 milliseconds to load.

135
00:09:41,080 --> 00:09:44,840
Even though this is local, it should be much, much faster than that.

136
00:09:44,840 --> 00:09:51,480
It's doing 205 queries to the database for one page.

137
00:09:51,480 --> 00:10:00,040
You can imagine that if you had a very large database, this would take even longer.

138
00:10:00,040 --> 00:10:04,320
Also, why would you need to do 205 queries for this?

139
00:10:04,320 --> 00:10:10,280
You notice that by default, the list view has 100 views.

140
00:10:10,280 --> 00:10:15,840
So we think 200, 100, there's probably something O-N going on here.

141
00:10:15,840 --> 00:10:18,400
So this is a little hard to see.

142
00:10:18,400 --> 00:10:19,400
Let's blow it up.

143
00:10:19,400 --> 00:10:26,000
We won't be able to blow it up.

144
00:10:26,000 --> 00:10:27,000
My apologies.

145
00:10:27,000 --> 00:10:36,440
The first few SQL queries that are being run here are grabbing the library user and the

146
00:10:36,440 --> 00:10:42,040
loaned book for every single item in the list.

147
00:10:42,040 --> 00:10:45,000
But why?

148
00:10:45,960 --> 00:10:49,960
Remember, this was what we were doing without anything custom.

149
00:10:49,960 --> 00:10:55,960
First, we get all of the loaned book entries, which is one query.

150
00:10:55,960 --> 00:10:57,760
That's fine.

151
00:10:57,760 --> 00:11:00,480
Then we get all of our related objects.

152
00:11:00,480 --> 00:11:05,320
One by one by one.

153
00:11:05,320 --> 00:11:10,440
One of the very helpful things about the Django debug toolbar is it tells you that there are

154
00:11:10,440 --> 00:11:14,320
101 similar queries going on for this.

155
00:11:14,320 --> 00:11:16,120
That's a big red flag.

156
00:11:16,120 --> 00:11:19,200
So we know.

157
00:11:19,200 --> 00:11:22,760
Now we can figure out what the culprit is.

158
00:11:22,760 --> 00:11:28,920
Debug toolbar also gives us a wonderful trace back where we can see that on every single

159
00:11:28,920 --> 00:11:34,800
query, we're calling that Dunder stir method.

160
00:11:34,800 --> 00:11:38,880
Let's dig a little bit deeper.

161
00:11:38,880 --> 00:11:40,840
What did that method look like?

162
00:11:40,840 --> 00:11:43,120
We created a friendly method.

163
00:11:43,120 --> 00:11:48,800
But Django's admin doesn't know how to do advanced code introspection to figure out,

164
00:11:48,800 --> 00:11:53,960
hey, they're calling this every time I evaluate the Dunder stir method.

165
00:11:53,960 --> 00:11:57,200
Maybe I should optimize my query.

166
00:11:57,200 --> 00:12:01,040
That's a challenging problem to solve.

167
00:12:01,040 --> 00:12:06,240
But there are ways that we can tell the admin that we're doing this.

168
00:12:06,240 --> 00:12:10,800
First solution is to use a list display.

169
00:12:10,840 --> 00:12:15,880
We'll go through each of these solutions in detail and why they work.

170
00:12:15,880 --> 00:12:21,040
If we use a list display that explicitly breaks these out into columns, instead of using the

171
00:12:21,040 --> 00:12:26,840
Dunder stir method for loaned book, which Django has to evaluate each time, the query

172
00:12:26,840 --> 00:12:32,520
will deliberately grab patron and book separately and just use the Dunder stir method on those,

173
00:12:32,520 --> 00:12:37,800
which isn't calling any related objects, and that will optimize that page.

174
00:12:37,800 --> 00:12:39,880
It also looks a little bit nicer.

175
00:12:39,880 --> 00:12:43,440
There are reasons you might not be able to do this in real life.

176
00:12:43,440 --> 00:12:46,160
So there are a couple of other solutions.

177
00:12:46,160 --> 00:12:50,480
One is to use list select related equals true.

178
00:12:50,480 --> 00:12:57,440
This is a hit it with a hammer type solution.

179
00:12:57,440 --> 00:13:03,840
The other possibility is to be more specific because list select related supports iterables.

180
00:13:03,840 --> 00:13:08,760
So you can say I deliberately want to select patron and book.

181
00:13:08,760 --> 00:13:12,400
Let's walk through what happens when we use these.

182
00:13:12,400 --> 00:13:16,280
You can see this is solution one.

183
00:13:16,280 --> 00:13:20,880
And hooray, we had a 15x speed up.

184
00:13:20,880 --> 00:13:27,240
So it went from around 17 milliseconds to just over one millisecond.

185
00:13:27,240 --> 00:13:33,340
The view is much more friendly because now we're seeing patron and book separately.

186
00:13:33,340 --> 00:13:36,820
And we went from 205 queries to five.

187
00:13:36,820 --> 00:13:41,900
There are ways we could reduce that even more that I'll mention at the end.

188
00:13:41,900 --> 00:13:49,700
But those are the default five queries that Django will run for any list view.

189
00:13:49,700 --> 00:13:55,420
Now let's try the second solution that was called hitting it with a hammer.

190
00:13:55,420 --> 00:14:00,400
In this particular example, displaying in two columns is a really nice way for the user

191
00:14:00,400 --> 00:14:01,540
to view it.

192
00:14:01,540 --> 00:14:06,760
But that may not always be possible in other circumstances.

193
00:14:06,760 --> 00:14:13,380
So what happens if we do list select related equal true?

194
00:14:13,380 --> 00:14:15,180
Also five queries.

195
00:14:15,180 --> 00:14:17,180
Let's go home.

196
00:14:17,180 --> 00:14:22,580
But say we had instead of two foreign keys on this model, 20.

197
00:14:22,580 --> 00:14:28,500
List select related is going to do a join on all 20 of those and you will still be very

198
00:14:28,500 --> 00:14:31,880
unhappy.

199
00:14:31,880 --> 00:14:41,460
So being more specific, we can say list select related is patron.

200
00:14:41,460 --> 00:14:45,880
And the reason that I started with just saying patron is so you can see the example of what

201
00:14:45,880 --> 00:14:48,940
happens when you're more specific because this can be a double edged sword.

202
00:14:48,940 --> 00:14:54,060
If you use list select related equal true, it will always grab all of the related objects.

203
00:14:54,060 --> 00:14:59,680
If you use list select related as an iterable and you forget one of your related fields

204
00:14:59,740 --> 00:15:06,700
or someone adds another column later and you don't update list select related, then you'll

205
00:15:06,700 --> 00:15:14,700
go from your nice optimized page to again in queries because you forgot to add something

206
00:15:14,700 --> 00:15:16,700
to your iterable.

207
00:15:16,700 --> 00:15:20,340
So we have 105 queries now.

208
00:15:20,340 --> 00:15:24,420
We can see what the SQL debug section looks like.

209
00:15:24,440 --> 00:15:32,800
At the top, we are grabbing all of the users, but we're still going through every single

210
00:15:32,800 --> 00:15:36,760
book.

211
00:15:36,760 --> 00:15:41,320
So the full solution include both items.

212
00:15:41,320 --> 00:15:42,320
Look at the SQL.

213
00:15:42,320 --> 00:15:46,120
We're back down to five queries.

214
00:15:46,740 --> 00:15:54,580
But another thing to note that I'll highlight here is that Django is getting all of the

215
00:15:54,580 --> 00:16:02,340
fields on every model even though we're really only using title, first name, and last name

216
00:16:02,340 --> 00:16:04,500
of our users.

217
00:16:04,500 --> 00:16:08,080
In many cases, this is reasonable behavior.

218
00:16:08,080 --> 00:16:16,100
It's not so concerning to grab all of the columns in your table, but sometimes it is.

219
00:16:16,400 --> 00:16:23,640
Especially if you have a lot of columns in your table or you have columns that are particularly

220
00:16:23,640 --> 00:16:24,640
large.

221
00:16:24,640 --> 00:16:29,180
So if you have columns that have a lot of text in them or just a lot of data, it's going

222
00:16:29,180 --> 00:16:32,780
to take a lot of time just to pull those up.

223
00:16:32,780 --> 00:16:38,800
Now there are ways that you can get the admin to not grab so many fields.

224
00:16:38,800 --> 00:16:43,480
So let's talk through how that works.

225
00:16:43,480 --> 00:16:48,660
The admin supports the ability for you to create a custom query set.

226
00:16:48,660 --> 00:16:53,500
This overrides the default get query set method on the admin.

227
00:16:53,500 --> 00:16:57,160
So you add a get query set method.

228
00:16:57,160 --> 00:17:03,420
Remember to call the built-in method of the superclass.

229
00:17:03,420 --> 00:17:11,780
Then you add to the query set dot only, which tells the ORM that you only want to grab these

230
00:17:11,780 --> 00:17:13,840
specific columns.

231
00:17:13,840 --> 00:17:19,280
In this case, we're grabbing patron first name, patron last name, and the daily fine

232
00:17:19,280 --> 00:17:20,520
on the book.

233
00:17:20,520 --> 00:17:25,080
And then remember to return the query set, because if you don't remember to return the

234
00:17:25,080 --> 00:17:30,260
query set, you will get an unfortunate error that last time I checked was not particularly

235
00:17:30,260 --> 00:17:34,560
descriptive and you will scratch your head being like, what did I do?

236
00:17:34,560 --> 00:17:43,440
So remember to return your query sets so that Django will know what to display.

237
00:17:43,440 --> 00:17:49,460
Use this with caution again, because in this example, I made a little bit of a mistake.

238
00:17:49,460 --> 00:17:53,240
I have 105 queries still.

239
00:17:53,240 --> 00:17:56,480
What are they?

240
00:17:56,480 --> 00:18:01,360
I'm grabbing daily fine, but I'm using title.

241
00:18:01,360 --> 00:18:08,640
So if I add the wrong column, or again, like in our list select related example, you come

242
00:18:08,640 --> 00:18:14,040
along later and you change the display of the admin, but you forget to update your query

243
00:18:14,040 --> 00:18:19,920
set, you can have a bad time.

244
00:18:19,920 --> 00:18:26,360
We fix it to display book title instead.

245
00:18:26,360 --> 00:18:31,440
And we can see what happens here is we have some speed up from the five queries earlier.

246
00:18:31,440 --> 00:18:36,400
It's actually below one millisecond on my local system now.

247
00:18:36,400 --> 00:18:39,960
So even on my little system, this is faster.

248
00:18:39,960 --> 00:18:44,120
It's negligible, but if you have hefty columns, and I've seen this in practice, this can give

249
00:18:44,120 --> 00:18:47,920
you some considerable speed ups.

250
00:18:47,920 --> 00:18:49,740
Now let's try something else.

251
00:18:49,740 --> 00:18:56,160
This is getting into the slightly more complicated world where we have a book with multiple authors.

252
00:18:56,160 --> 00:18:59,380
We want to show all of the authors in the list view.

253
00:18:59,380 --> 00:19:03,920
So what we do is we define a callable for displaying the authors, in this case, our

254
00:19:03,920 --> 00:19:11,920
deaf authors display, which returns a list of all of the authors and turns it into a

255
00:19:11,920 --> 00:19:13,920
spring, a string.

256
00:19:13,920 --> 00:19:15,100
My apologies.

257
00:19:15,100 --> 00:19:23,360
We add this callable into admin list display, and we set list select related to true because

258
00:19:23,360 --> 00:19:26,480
we learned our lesson last time.

259
00:19:26,480 --> 00:19:31,400
It works, but we have 105 queries.

260
00:19:31,400 --> 00:19:34,520
Why?

261
00:19:34,520 --> 00:19:40,000
For every book, we're now doing a query to get all of the authors, which is not what

262
00:19:40,000 --> 00:19:41,960
we wanted.

263
00:19:41,960 --> 00:19:46,840
So the reason this happens is because select related is for foreign key relationships,

264
00:19:46,840 --> 00:19:50,120
but it doesn't work for reverse foreign key relationships.

265
00:19:50,120 --> 00:19:53,960
So here we're going from the book to the author when the relationship is the other

266
00:19:53,960 --> 00:19:54,960
way.

267
00:19:54,960 --> 00:20:00,520
The answer to this is to use prefetch related instead, but this isn't one of the default

268
00:20:00,520 --> 00:20:01,520
built-ins.

269
00:20:01,520 --> 00:20:08,400
You can't just say list prefetch related equal true and beyond your merry way.

270
00:20:08,400 --> 00:20:11,740
Instead you have to go back to our friend, the custom query set.

271
00:20:11,740 --> 00:20:18,040
In this case, we do the same thing where we call the default query set on the super class

272
00:20:18,240 --> 00:20:23,640
and we add prefetch related on authors.

273
00:20:23,640 --> 00:20:25,880
We're down to six queries.

274
00:20:25,880 --> 00:20:30,200
And just for your information, this is the actual query that the ORM generates.

275
00:20:30,200 --> 00:20:38,520
You can see it manually puts in all of the IDs for the author's book ID that it needs

276
00:20:38,520 --> 00:20:41,540
to fetch.

277
00:20:41,660 --> 00:20:51,780
Our final example is on how you might optimize the SQL for if you're counting, say, for the

278
00:20:51,780 --> 00:20:53,420
author's display.

279
00:20:53,420 --> 00:20:55,300
So here we have our author admin.

280
00:20:55,300 --> 00:21:01,780
And we want to display how many books each author has written in our library.

281
00:21:01,780 --> 00:21:03,520
This is what our author admin looks like.

282
00:21:03,520 --> 00:21:05,820
On the left we have the name of the author.

283
00:21:05,820 --> 00:21:09,460
On the right we have the count of the books.

284
00:21:09,460 --> 00:21:15,780
105 queries again, one count query for each row.

285
00:21:15,780 --> 00:21:22,020
We don't have any foreign key relationships to help us out, but we can use annotate.

286
00:21:22,020 --> 00:21:25,260
So again, we create a custom query set.

287
00:21:25,260 --> 00:21:33,320
We add query set dot annotate, which we use book count to add that to our query.

288
00:21:33,320 --> 00:21:39,340
And then in list display, we can reference that annotation.

289
00:21:39,340 --> 00:21:45,380
And now the admin knows to just create one query, which looks like this, where it does

290
00:21:45,380 --> 00:21:50,860
a left outer join on stacks book authors.

291
00:21:50,860 --> 00:21:59,820
And you get a single query to do all of that work for you.

292
00:21:59,820 --> 00:22:04,340
And you can see there the count as book count.

293
00:22:05,260 --> 00:22:10,940
Finally, I'll close out with a few other tips.

294
00:22:10,940 --> 00:22:15,220
Say that you don't have time to fix everything.

295
00:22:15,220 --> 00:22:20,380
One of the other, this is not typically a great long term solution, but one of the things

296
00:22:20,380 --> 00:22:28,900
you can do quickly is to decrease the list per page, because in times 100 versus in times

297
00:22:28,900 --> 00:22:31,820
10 will make a difference to your database.

298
00:22:31,820 --> 00:22:35,860
You can set show full result count to false.

299
00:22:35,860 --> 00:22:41,860
One of the things on that five standard queries that were being presented was a count at the

300
00:22:41,860 --> 00:22:45,220
very bottom, where it's just counting all of the rows in your database.

301
00:22:45,220 --> 00:22:49,460
If you have a lot of rows, sorry, all the rows in your table, if you have a lot of rows

302
00:22:49,460 --> 00:22:53,060
in your table, then this can be slow.

303
00:22:53,060 --> 00:22:54,840
You can use a custom paginator.

304
00:22:54,840 --> 00:22:59,100
We're not going to get into that, but the other count query that Django does is to create

305
00:22:59,100 --> 00:23:02,340
pagination on your list view.

306
00:23:02,340 --> 00:23:04,540
And finally, sorting can be expensive.

307
00:23:04,540 --> 00:23:11,900
So if you're doing sorting, there are a couple different ways that you can optimize that

308
00:23:11,900 --> 00:23:14,260
so that it doesn't affect your admin.

309
00:23:14,260 --> 00:23:20,180
But those are all things to look at if the tips here for your database aren't getting

310
00:23:20,180 --> 00:23:23,280
you far enough.

311
00:23:23,280 --> 00:23:24,580
And thank you for attending.

312
00:23:24,580 --> 00:23:28,580
All of the code for this talk can be found on GitHub.

313
00:23:28,580 --> 00:23:32,660
Under my account, you can reach me on Twitter at Jacinda Shelley.

314
00:23:32,660 --> 00:23:34,700
And obligatory Dr. On Demand is hiring.

315
00:23:34,700 --> 00:23:35,700
We have a booth here.

316
00:23:35,700 --> 00:23:37,040
We'll be at the job fair.

317
00:23:37,040 --> 00:23:39,460
We have lots of people who can talk to you about the company.

318
00:23:39,460 --> 00:23:40,780
So stop by and say hi.

319
00:23:40,780 --> 00:23:42,860
I promise we are all very friendly.

320
00:23:42,860 --> 00:23:44,620
Thank you.

321
00:23:44,620 --> 00:23:48,900
Thanks, Jacinda.

322
00:23:48,900 --> 00:23:54,220
We have a few minutes for questions now.

323
00:23:54,220 --> 00:23:58,620
So if you do have a question, you can approach the audience mics there and there.

324
00:23:58,620 --> 00:23:59,620
Hi, Faris.

325
00:23:59,620 --> 00:24:00,620
Hi, Jacinda.

326
00:24:00,620 --> 00:24:01,620
How's it going?

327
00:24:01,620 --> 00:24:02,620
Good.

328
00:24:02,620 --> 00:24:07,100
My question for you, and perhaps I missed the first part of the talk a little bit, was

329
00:24:07,100 --> 00:24:13,620
how do you go about profiling on a production versus a development environment to find,

330
00:24:13,620 --> 00:24:17,660
you know, you get these N plus one queries and all kinds of issues that you would only

331
00:24:17,660 --> 00:24:19,860
see when you're getting that much traffic?

332
00:24:19,860 --> 00:24:22,100
Do you have any advice about that?

333
00:24:22,100 --> 00:24:25,420
I do.

334
00:24:25,420 --> 00:24:30,460
All of the examples here happen as your database size increases.

335
00:24:30,460 --> 00:24:33,300
So there are two things that I found you can do.

336
00:24:33,300 --> 00:24:38,620
For this, I created a script to generate a large amount of test data.

337
00:24:38,620 --> 00:24:40,700
So you can do that in your own local environment.

338
00:24:40,700 --> 00:24:47,860
If you're still not replicating the issue, be very, very careful with this approach.

339
00:24:47,860 --> 00:24:57,980
But if you have a staging environment that has the same data, depending on how regulated

340
00:24:57,980 --> 00:25:03,020
your data is, you may be able to have a copy of that locally.

341
00:25:03,020 --> 00:25:06,940
We can't do that at Dr. On Demand.

342
00:25:06,940 --> 00:25:13,460
One approach that I recommend is an absolute last resort is to put an environment that

343
00:25:13,460 --> 00:25:17,260
looks similar behind a VPN.

344
00:25:17,260 --> 00:25:22,540
You can also be behind that same VPN and only allow traffic from that VPN.

345
00:25:22,540 --> 00:25:25,820
And in that case, you can put on the debug toolbar.

346
00:25:25,820 --> 00:25:31,340
I say use that approach with a lot of caution because it is very easy to get wrong and very

347
00:25:32,340 --> 00:25:38,500
production database because you do have to have debug set to true for the debug toolbar

348
00:25:38,500 --> 00:25:39,500
to work.

349
00:25:39,500 --> 00:25:41,500
Thank you.

350
00:25:41,500 --> 00:25:43,500
Yes?

351
00:25:43,500 --> 00:25:45,500
Hi.

352
00:25:45,500 --> 00:25:52,700
I was wondering if you've had any specific problems with Django admin being slow on detail

353
00:25:52,700 --> 00:25:58,900
pages and wanting to do different query sets on the list view and the detail view.

354
00:25:58,980 --> 00:26:03,660
For example, using in lines or even Django nested admin.

355
00:26:03,660 --> 00:26:06,500
Yes, you can.

356
00:26:06,500 --> 00:26:15,500
The same approach essentially applies where you would modify the get query set method

357
00:26:15,500 --> 00:26:17,620
for those specific views.

358
00:26:17,620 --> 00:26:23,780
And I would have to review the documentation to figure out exactly where to put that in.

359
00:26:23,780 --> 00:26:26,060
But it is possible to do that.

360
00:26:26,060 --> 00:26:27,060
Okay.

361
00:26:27,060 --> 00:26:28,060
Thanks.

362
00:26:28,060 --> 00:26:36,420
I think that's all the questions we had.

363
00:26:36,420 --> 00:26:39,860
I'm also happy to take questions out in the hall afterwards.

364
00:26:39,860 --> 00:26:41,260
Thank you again for coming.

365
00:26:41,260 --> 00:26:42,900
And I hope you enjoy the rest of your PyCon.

