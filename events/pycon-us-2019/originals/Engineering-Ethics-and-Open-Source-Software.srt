1
00:00:00,000 --> 00:00:03,720
Welcome to this afternoon's session of PyCon 2019.

2
00:00:03,720 --> 00:00:06,520
Our first speaker in this block is Hayley DenBrava.

3
00:00:06,520 --> 00:00:09,840
She will be speaking to us about engineering ethics and open source software.

4
00:00:09,840 --> 00:00:12,600
Please make her feel welcome.

5
00:00:12,600 --> 00:00:14,640
Can you all hear me?

6
00:00:14,640 --> 00:00:15,640
Okay.

7
00:00:15,640 --> 00:00:16,640
Perfect.

8
00:00:16,640 --> 00:00:17,640
Thank you.

9
00:00:17,640 --> 00:00:18,640
Well, hello.

10
00:00:18,640 --> 00:00:21,640
Thank you, and just thank you so much for joining me today.

11
00:00:21,640 --> 00:00:24,640
We are going to talk about engineering ethics.

12
00:00:24,640 --> 00:00:28,280
And I'm really glad you weren't put off by that title and that you're here.

13
00:00:28,280 --> 00:00:31,280
So thank you so much.

14
00:00:31,280 --> 00:00:32,280
So welcome.

15
00:00:32,280 --> 00:00:34,280
Let's get started.

16
00:00:34,280 --> 00:00:38,920
My name is Hayley DenBrava, and you can tweet at me at this Twitter handle that you find

17
00:00:38,920 --> 00:00:39,920
on the screen.

18
00:00:39,920 --> 00:00:42,920
I work at Sneak as a developer advocate.

19
00:00:42,920 --> 00:00:47,920
Sneak builds tools to help developers use open source as securely as possible.

20
00:00:47,920 --> 00:00:50,920
I'm a developer advocate for the company.

21
00:00:50,920 --> 00:00:55,520
Sneak builds tools to help developers use open source as securely as possible.

22
00:00:55,520 --> 00:01:01,880
And because we eat, breathe, and sleep security, our logo is this intimidating Doberman dog.

23
00:01:01,880 --> 00:01:06,920
But in my role as a developer advocate, I try to be more like this golden retriever.

24
00:01:06,920 --> 00:01:13,540
Friendly, approachable, helpful, and eager to talk to you about open source security.

25
00:01:13,540 --> 00:01:18,260
So please don't hesitate to reach out if you want to chat.

26
00:01:18,260 --> 00:01:23,860
Last year, I was at a number of conferences and shared a talk about engineering ethics.

27
00:01:23,860 --> 00:01:28,960
And this talk was based on my experience as a licensed civil engineer.

28
00:01:28,960 --> 00:01:31,500
Because that's what I was in a past life.

29
00:01:31,500 --> 00:01:37,660
This is a picture of my favorite project, which is a hotel near Disneyland.

30
00:01:37,660 --> 00:01:42,780
And there was a lot to that talk, but the TLDR was that we need to take responsibility

31
00:01:42,780 --> 00:01:47,020
for our work, for our code.

32
00:01:47,180 --> 00:01:51,660
But as I went from conference to conference, I got one question over and over and over

33
00:01:51,660 --> 00:01:54,700
again.

34
00:01:54,700 --> 00:01:57,060
But what about open source?

35
00:01:57,060 --> 00:01:59,180
And I think it's a really good question.

36
00:01:59,180 --> 00:02:04,860
If the summary of engineering ethics is to take responsibility for your work, what does

37
00:02:04,860 --> 00:02:09,860
it mean to utilize a bunch of code that you didn't write?

38
00:02:09,860 --> 00:02:14,260
Where is your responsibility in that?

39
00:02:14,500 --> 00:02:20,140
To help answer this, I'm going to talk first about the responsibilities I had when I was

40
00:02:20,140 --> 00:02:24,720
using proprietary software as a licensed civil engineer.

41
00:02:24,720 --> 00:02:30,220
So it probably isn't surprising, but modern civil engineering, it's not typically done

42
00:02:30,220 --> 00:02:34,100
with slide rules and a ton of hand calculations.

43
00:02:34,100 --> 00:02:40,220
We use software, and we generally paid an exorbitant amount for it.

44
00:02:40,220 --> 00:02:43,820
This software, though, it was a black box.

45
00:02:43,820 --> 00:02:49,740
Generally speaking, you can't inspect or modify the source code, and you kind of had to approach

46
00:02:49,740 --> 00:02:55,500
it as trust but verify, if that makes sense.

47
00:02:55,500 --> 00:03:01,260
I had to carefully provide inputs to the program.

48
00:03:01,260 --> 00:03:06,620
Then I had to interpret the output that the software provided and do a sanity check.

49
00:03:06,620 --> 00:03:10,240
I would ask, does this adhere to the governing structural code?

50
00:03:10,240 --> 00:03:12,540
Is it constructable?

51
00:03:12,540 --> 00:03:16,220
So in the end, what was my responsibility?

52
00:03:16,220 --> 00:03:23,060
Well, my responsibility was for the final structural drawings and that they conformed

53
00:03:23,060 --> 00:03:28,700
to the governing building codes and to the standard professional practice.

54
00:03:28,700 --> 00:03:34,200
Regardless of the tools that I used, I was responsible for the finished product, namely

55
00:03:34,200 --> 00:03:37,460
my structural drawings.

56
00:03:37,460 --> 00:03:43,420
So let's look at the finished product for a software developer.

57
00:03:43,420 --> 00:03:47,780
To do that, let's talk about what code is in production.

58
00:03:47,780 --> 00:03:52,220
The code you have in production is represented by this blue circle.

59
00:03:52,220 --> 00:03:58,940
It includes all the code that you wrote and all of your open source dependencies.

60
00:03:58,940 --> 00:04:02,020
But how much of that code is code that you wrote?

61
00:04:02,020 --> 00:04:06,440
The code that you wrote might be represented by this much smaller circle within the big

62
00:04:06,480 --> 00:04:10,080
blue circle representing all the code in production.

63
00:04:10,080 --> 00:04:13,360
But I'm actually being fairly generous here.

64
00:04:13,360 --> 00:04:17,520
Depending on your application and what open source projects you're using, things could

65
00:04:17,520 --> 00:04:19,720
look really different.

66
00:04:19,720 --> 00:04:25,740
It could look a lot like this or even this.

67
00:04:25,740 --> 00:04:30,800
Of course, these ratios may change a bit if you compare the code that's actually called,

68
00:04:30,800 --> 00:04:34,800
et cetera, but in a general way, it's really important to understand that the code you

69
00:04:34,840 --> 00:04:41,600
write and the code you deploy are very different things and that they're both part of the final

70
00:04:41,600 --> 00:04:43,560
product.

71
00:04:43,560 --> 00:04:49,960
My hotel near Disneyland didn't actually incorporate the proprietary software that I used.

72
00:04:49,960 --> 00:04:54,880
The software was only a tool to help me with my calculations.

73
00:04:54,880 --> 00:04:59,440
But that's not the case for most developers who are using open source software.

74
00:04:59,440 --> 00:05:02,120
Open source is part of production.

75
00:05:02,120 --> 00:05:05,360
It's inherently part of the product.

76
00:05:05,360 --> 00:05:09,900
So if you want to take responsibility for our code, I think it makes a lot of sense

77
00:05:09,900 --> 00:05:19,920
to be concerned with the health and security and sustainability of this big blue circle.

78
00:05:19,920 --> 00:05:29,760
So I'm going to talk a little bit about what we can do to help maintain those things.

79
00:05:29,760 --> 00:05:35,680
So if we want to take responsibility for our code, why are we using open source in

80
00:05:35,680 --> 00:05:37,000
the first place?

81
00:05:37,000 --> 00:05:41,400
So I might be preaching to the choir, but stick with me.

82
00:05:41,400 --> 00:05:45,560
First we use open source because we don't want to reinvent the wheel.

83
00:05:45,560 --> 00:05:49,080
And we definitely don't want to send money reinventing the wheel.

84
00:05:49,080 --> 00:05:53,640
We wouldn't be profitable or competitive if we keep doing the same thing repeatedly and

85
00:05:53,640 --> 00:05:56,040
we'd probably be pretty bored.

86
00:05:57,040 --> 00:06:03,360
Additionally, there are other what some people might call softer benefits to open source

87
00:06:03,360 --> 00:06:04,360
software.

88
00:06:04,360 --> 00:06:09,280
But I think that they can sometimes be the most valuable benefits.

89
00:06:09,280 --> 00:06:15,000
This conference, the Python community in general, they were born of open source.

90
00:06:15,000 --> 00:06:16,400
We learn from one another.

91
00:06:16,400 --> 00:06:20,960
We collaborate with each other in ways that cross lines of where we're employed, where

92
00:06:20,960 --> 00:06:23,040
we live, et cetera.

93
00:06:23,040 --> 00:06:28,160
And I think this kind of work can produce really interesting solutions.

94
00:06:28,160 --> 00:06:32,360
But there are inherent challenges that come with the use of open source software.

95
00:06:32,360 --> 00:06:36,880
These challenges are related to how it's created, stored, and maintained.

96
00:06:36,880 --> 00:06:41,920
And I specifically call these I specifically don't call these things problems.

97
00:06:41,920 --> 00:06:46,080
But they're things that we should be aware of when attempting to use open source in an

98
00:06:46,080 --> 00:06:48,120
ethical way.

99
00:06:48,120 --> 00:06:54,080
We think of them as obstacles that we need to understand in order to properly navigate

100
00:06:54,080 --> 00:06:56,720
the open source environment.

101
00:06:56,720 --> 00:07:00,280
Like this awesome dog traversing an obstacle course.

102
00:07:00,280 --> 00:07:07,800
We need to understand the obstacles and how to clear them in order to succeed.

103
00:07:07,800 --> 00:07:11,600
The first challenge that comes to mind is that open source software is largely built

104
00:07:11,600 --> 00:07:12,960
by volunteers.

105
00:07:12,960 --> 00:07:14,480
And don't get me wrong.

106
00:07:14,480 --> 00:07:16,800
Volunteers are amazing.

107
00:07:16,800 --> 00:07:19,980
But the thing is we're not entitled to anything from them.

108
00:07:19,980 --> 00:07:25,120
If you start to feel like you are, you need to take a big step back and reconsider.

109
00:07:25,120 --> 00:07:28,900
Especially if you're on Twitter or on your email and thinking of sending some of those

110
00:07:28,900 --> 00:07:30,520
thoughts to maintainers.

111
00:07:30,520 --> 00:07:32,320
Don't do that.

112
00:07:32,320 --> 00:07:35,080
But the thing about volunteering is that it's voluntary.

113
00:07:35,080 --> 00:07:42,300
And this means that open source projects that rely on volunteers, most of them, all of them,

114
00:07:42,300 --> 00:07:47,260
they can suffer problems associated with burnout, turnover, transitions of leadership,

115
00:07:47,260 --> 00:07:53,580
delays in addressing known issues because of the competing and 1000% reasonable interests

116
00:07:53,580 --> 00:07:57,700
of day jobs and families and personal health and happiness.

117
00:07:57,700 --> 00:07:59,040
And more.

118
00:07:59,040 --> 00:08:03,100
And you see these things in your day job as well.

119
00:08:03,100 --> 00:08:08,100
But consider how much bigger that impact is when you're not getting paid.

120
00:08:08,100 --> 00:08:09,140
Right?

121
00:08:09,140 --> 00:08:10,520
It's easier to drop that.

122
00:08:10,520 --> 00:08:14,640
And that makes sense.

123
00:08:14,640 --> 00:08:20,360
The second issue I want to mention is that transparency has pros and cons.

124
00:08:20,360 --> 00:08:23,880
Open source is inherently transparent.

125
00:08:23,880 --> 00:08:25,160
The code can be inspected.

126
00:08:25,160 --> 00:08:26,540
It can be read.

127
00:08:26,540 --> 00:08:33,760
You can go into the Django repositories and poke around there.

128
00:08:33,760 --> 00:08:36,520
And anyone can see open issues.

129
00:08:36,520 --> 00:08:39,680
Vulnerabilities are often responsibly reported.

130
00:08:39,680 --> 00:08:45,200
But once they're reported, if users don't quickly adopt available remediations, they

131
00:08:45,200 --> 00:08:49,480
leave themselves open to security threats that are known.

132
00:08:49,480 --> 00:08:53,040
And this graph shows an example of this.

133
00:08:53,040 --> 00:08:58,480
It's from a report that my team recently did on the state of open source security.

134
00:08:58,480 --> 00:09:06,040
The graph shows downloads per month of a vulnerable version of WebSockets.

135
00:09:06,040 --> 00:09:09,560
There's a newer remediated version available.

136
00:09:09,560 --> 00:09:14,380
But while you can see that people have taken advantage of the remediation, because we do

137
00:09:14,380 --> 00:09:21,720
see the downloads are trending downward, right, which is what we would want to see, ideally

138
00:09:21,720 --> 00:09:24,520
no one should be installing this package.

139
00:09:24,520 --> 00:09:26,020
Or at least at this version, right?

140
00:09:26,020 --> 00:09:30,980
You want them installing the remediated version.

141
00:09:30,980 --> 00:09:36,360
And if people are still downloading a package with a known vulnerability, even when there

142
00:09:36,360 --> 00:09:44,600
is an option not to, like that is an opportunity for someone who is acting maliciously.

143
00:09:44,600 --> 00:09:47,360
So what does this all mean for us?

144
00:09:47,360 --> 00:09:52,320
I'm going to address the different sets of stakeholders and hopefully offer good suggestions

145
00:09:52,320 --> 00:09:55,920
to make open source the best that it can be.

146
00:09:55,920 --> 00:09:58,600
First I want to address maintainers.

147
00:09:58,600 --> 00:10:00,240
And start by saying thank you.

148
00:10:00,240 --> 00:10:02,520
Thank you so much for the work that you do.

149
00:10:02,560 --> 00:10:08,240
You often do not get the appreciation or support that you deserve, but it is not exaggerating

150
00:10:08,240 --> 00:10:11,280
to say that we wouldn't be here at PyCon without you.

151
00:10:11,280 --> 00:10:17,680
I have a few recommendations for you, but I think it's important to start with appreciation.

152
00:10:17,680 --> 00:10:22,640
My first recommendation is to carefully select and use a license.

153
00:10:22,640 --> 00:10:26,360
This is a benefit for both you and your users.

154
00:10:26,360 --> 00:10:30,720
There are lots of good options that vary in strictness, and you can definitely find one

155
00:10:30,840 --> 00:10:33,080
that will work for your project.

156
00:10:33,080 --> 00:10:39,080
Personally I would say that anyone who has public code up on GitHub or a different source

157
00:10:39,080 --> 00:10:45,360
control management thing, if you have a repo that's public, you should select a license

158
00:10:45,360 --> 00:10:47,920
and include it in your repository.

159
00:10:47,920 --> 00:10:55,120
Even if you don't necessarily think that anyone is going to fork the repo or clone it or contribute.

160
00:10:55,120 --> 00:10:57,920
And this is something of a problem in the Python community.

161
00:10:58,000 --> 00:11:06,240
I had a coworker who last year looked into the types of licenses for packages on PyPI.

162
00:11:06,240 --> 00:11:09,040
Most used a license, which is good.

163
00:11:09,040 --> 00:11:16,920
But around 14%, which is indicated in blue on the screen, those 14% did not have a license

164
00:11:16,920 --> 00:11:19,240
selected and indicated.

165
00:11:19,240 --> 00:11:26,360
And that's a non-trivial amount of projects, especially because if it's up on PyPI, it's

166
00:11:26,360 --> 00:11:30,120
meant for people to download and use.

167
00:11:30,120 --> 00:11:35,800
And if your project falls into this blue wedge, the first thing I would say is adopt a license.

168
00:11:39,800 --> 00:11:46,040
A very good practice that I've seen some open source projects adopt is to include a security.md

169
00:11:46,040 --> 00:11:48,040
file in your repository.

170
00:11:48,040 --> 00:11:52,360
This file could include information on security practices that are in place for the project

171
00:11:52,360 --> 00:11:59,480
and can help users make an informed choice about whether or how to use your project.

172
00:11:59,480 --> 00:12:04,000
And this is an example where transparency can be good.

173
00:12:04,000 --> 00:12:09,760
You can help people make an educated choice and you can help people volunteer their resources

174
00:12:09,760 --> 00:12:14,640
to fill in gaps if you say, hey, I'd really like to do this, but we don't currently.

175
00:12:14,640 --> 00:12:17,440
Things like that.

176
00:12:17,440 --> 00:12:20,440
Recommendation number three is to have an exit plan.

177
00:12:20,440 --> 00:12:24,480
All good things come to an end, and let's say you've been maintaining a project for

178
00:12:24,480 --> 00:12:28,360
a while and you want to step away to pursue other things.

179
00:12:28,360 --> 00:12:32,780
If you're a maintainer for a large project, this maybe isn't a huge worry because there's

180
00:12:32,780 --> 00:12:37,600
likely a community of maintainers on whom you can rely.

181
00:12:37,600 --> 00:12:44,200
Sometimes though a project may be relatively small in terms of the number of lines of code.

182
00:12:44,200 --> 00:12:49,280
And it might be maintained by a few or even a single person.

183
00:12:49,320 --> 00:12:53,200
Even so, such projects can still be used widely, right?

184
00:12:53,200 --> 00:12:58,440
They can still be used by a large number of people or maybe they're used by another open

185
00:12:58,440 --> 00:13:02,200
source project that is used by a large number of people.

186
00:13:02,200 --> 00:13:05,520
So the impact can still be great.

187
00:13:05,520 --> 00:13:10,520
And if a person in this situation wants to step away from the project, it's a gift to

188
00:13:10,520 --> 00:13:14,200
the community for you to have an exit plan.

189
00:13:14,200 --> 00:13:19,640
Having a person that you can turn over ownership of the project.

190
00:13:19,640 --> 00:13:26,080
Maybe a group that uses your project as a dependency to theirs or maybe a maintainer

191
00:13:26,080 --> 00:13:31,680
that's known by the community and has a similar kind of repo.

192
00:13:31,680 --> 00:13:35,000
Those are great options.

193
00:13:35,000 --> 00:13:38,520
You can also officially retire the project.

194
00:13:39,000 --> 00:13:46,840
And whether you transfer ownership to a known person or if you retire it, be as transparent

195
00:13:46,840 --> 00:13:49,200
as possible about this process.

196
00:13:49,200 --> 00:13:53,340
It can make the world a difference to the people who use your project.

197
00:13:53,340 --> 00:13:58,080
And this has actually been a vector of attack in the past.

198
00:13:58,080 --> 00:14:03,720
This past fall, NPM had a problem with malicious code that was found in a package that had

199
00:14:03,720 --> 00:14:08,720
changed owners and the new owner was a bad actor.

200
00:14:08,720 --> 00:14:14,000
And this is why if you're turning over ownership, it makes sense to do so to someone who is

201
00:14:14,000 --> 00:14:19,620
known by the community if at all possible.

202
00:14:19,620 --> 00:14:24,000
Someone who already has a stake, right?

203
00:14:24,000 --> 00:14:30,840
And finally, I say to maintainers, make things easy or make it easy to report security vulnerabilities.

204
00:14:30,840 --> 00:14:35,880
People should be able to find information on how you do this through your GitHub, GitLab,

205
00:14:35,880 --> 00:14:41,120
et cetera, and through any official site for your project.

206
00:14:41,120 --> 00:14:45,960
For example, the Python packaging authority does a really good job of this.

207
00:14:45,960 --> 00:14:51,840
You can fairly easily find this information in their GitHub, although I would title it

208
00:14:51,840 --> 00:14:57,240
in alt capitals and put it in the home directory, but still they're doing an awesome job.

209
00:14:57,240 --> 00:15:00,240
And you can find the details on their website as well.

210
00:15:00,240 --> 00:15:04,600
They give clear instructions on how to responsibly report.

211
00:15:04,600 --> 00:15:14,560
And just as important, if not more so, they give instructions about what not to do.

212
00:15:14,560 --> 00:15:19,920
And this includes things like don't open a GitHub issue.

213
00:15:19,920 --> 00:15:24,280
Maintainers make it easy for others to help you in ways that will actually be helpful.

214
00:15:24,280 --> 00:15:30,560
Make sure people can easily find a way to responsibly report vulnerabilities.

215
00:15:30,560 --> 00:15:35,200
In the previously mentioned state of open source security report, my team found that

216
00:15:35,200 --> 00:15:42,120
more than half of maintainers, more than half of them had the experience of someone opening

217
00:15:42,120 --> 00:15:45,720
a public issue to report a vulnerability.

218
00:15:45,720 --> 00:15:47,700
You want to avoid that if at all possible.

219
00:15:47,700 --> 00:15:52,480
It means a greater risk to your users, and you are going to have a bunch of pressure

220
00:15:52,680 --> 00:15:54,640
to fix the issue now.

221
00:15:54,640 --> 00:15:59,240
Make it easy on yourself by making it easy for others to report a problem in a discreet

222
00:15:59,240 --> 00:16:01,280
manner.

223
00:16:01,280 --> 00:16:06,640
Next I have some recommendations for companies that use open source software.

224
00:16:06,640 --> 00:16:08,600
First contribute.

225
00:16:08,600 --> 00:16:15,740
As Russell Keith McGee said at our opening keynote, get out your wallet.

226
00:16:16,340 --> 00:16:21,620
Developers contribute to your projects that are to the projects that you use on company

227
00:16:21,620 --> 00:16:24,820
time.

228
00:16:24,820 --> 00:16:31,340
Financial support is very important, but I think it's great if you let people contribute

229
00:16:31,340 --> 00:16:33,540
on company time as well.

230
00:16:33,540 --> 00:16:41,140
And make sure that it's included in your metrics for evaluating employees and things like that.

231
00:16:41,140 --> 00:16:47,940
Because if it's not rewarded by your company for an employee to do so, they won't.

232
00:16:47,940 --> 00:16:49,700
Or at least they won't on company time.

233
00:16:49,700 --> 00:16:55,340
You need to make it beneficial for everybody.

234
00:16:55,340 --> 00:16:58,980
And it really is important to support projects financially.

235
00:16:58,980 --> 00:17:04,180
It can make a world of difference to the people who maintain the projects that you use.

236
00:17:04,180 --> 00:17:07,020
Open source allows you to build amazing things.

237
00:17:07,020 --> 00:17:09,500
It helps you stay competitive.

238
00:17:09,500 --> 00:17:14,340
And you should be actively involved in supporting it with time and with financial resources.

239
00:17:14,340 --> 00:17:17,540
Even if you're small or new.

240
00:17:17,540 --> 00:17:23,100
I want to add that if you have people with security expertise, I would encourage you

241
00:17:23,100 --> 00:17:29,540
to especially allow them to contribute on company time to an open source project that

242
00:17:29,540 --> 00:17:31,300
you use.

243
00:17:31,300 --> 00:17:36,260
Their expertise can be particularly valuable to the health and sustainability of an open

244
00:17:36,300 --> 00:17:37,860
source project.

245
00:17:37,860 --> 00:17:42,860
Because this is sometimes an area where maintainers might not feel confident.

246
00:17:42,860 --> 00:17:46,900
And it never hurts to have a second pair of eyes.

247
00:17:46,900 --> 00:17:54,460
Some more findings from my team's state of open source security report indicate that

248
00:17:54,460 --> 00:17:59,700
among open source maintainers, security knowledge seems to be improving.

249
00:17:59,700 --> 00:18:04,740
But only 30% of maintainers rate their security knowledge as high.

250
00:18:04,740 --> 00:18:09,060
You can see them in purple on this chart.

251
00:18:09,060 --> 00:18:12,580
And this is an area where companies can help.

252
00:18:12,580 --> 00:18:20,620
Give time to your security conscious people and allow them to contribute.

253
00:18:20,620 --> 00:18:23,420
Recommendation two, document and plan.

254
00:18:23,420 --> 00:18:29,160
Keep close track of the open source software projects that you use and their dependencies

255
00:18:29,160 --> 00:18:31,020
that those projects use.

256
00:18:31,020 --> 00:18:36,700
Put time into your roadmap for your developers to keep up to date with their project versions

257
00:18:36,700 --> 00:18:40,740
or refactor when a particular tool is no longer supported.

258
00:18:40,740 --> 00:18:43,300
This work has business value.

259
00:18:43,300 --> 00:18:46,180
That's why you're putting it on the roadmap.

260
00:18:46,180 --> 00:18:48,900
These kinds of things are not nice to haves.

261
00:18:48,900 --> 00:18:52,020
They're essential to a healthy project.

262
00:18:52,020 --> 00:18:57,440
Think of it as preventative medicine that helps.

263
00:18:57,440 --> 00:19:00,820
Another thing that I would add is to use available tools.

264
00:19:00,820 --> 00:19:04,700
These tools will help you understand your dependencies and the known vulnerabilities

265
00:19:04,700 --> 00:19:05,700
within them.

266
00:19:05,700 --> 00:19:09,640
And some of them can help you with remediation.

267
00:19:09,640 --> 00:19:12,660
My employer, Sneak, makes tools that does this.

268
00:19:12,660 --> 00:19:15,220
And we have a free tier.

269
00:19:15,220 --> 00:19:17,780
But there are open source options as well.

270
00:19:17,780 --> 00:19:23,860
Pip-n, for instance, has the ability to scan for known vulnerabilities in your dependency

271
00:19:23,860 --> 00:19:24,860
tree.

272
00:19:24,860 --> 00:19:25,860
And that's really awesome.

273
00:19:25,860 --> 00:19:28,900
I would try that.

274
00:19:28,900 --> 00:19:35,900
Number four is to lead by example and responsibly report vulnerabilities.

275
00:19:35,900 --> 00:19:40,080
Number five is to donate a bug bounty program.

276
00:19:40,080 --> 00:19:47,380
Do you have a bug bounty program for your projects, for your products?

277
00:19:47,380 --> 00:19:53,220
Consider turning that around and sponsoring a bug bounty program for an open source project

278
00:19:53,220 --> 00:19:56,020
that you use.

279
00:19:56,020 --> 00:19:59,220
Bug bounty programs have some pros and cons.

280
00:19:59,220 --> 00:20:04,060
It seems to be better at capturing certain kinds of vulnerabilities than others.

281
00:20:04,060 --> 00:20:07,260
But this is a concrete thing that you can do.

282
00:20:07,260 --> 00:20:09,300
It's good PR for you.

283
00:20:09,300 --> 00:20:10,980
It's good for your security.

284
00:20:10,980 --> 00:20:16,700
And it can encourage reporting and responsible reporting for the projects that you rely on.

285
00:20:16,700 --> 00:20:20,060
And that's just a win, win, win.

286
00:20:20,060 --> 00:20:21,420
All right.

287
00:20:21,420 --> 00:20:24,260
So these are ideas for companies.

288
00:20:24,260 --> 00:20:27,740
And we've talked about ideas for maintainers.

289
00:20:27,740 --> 00:20:34,940
But what as individuals can you do to use open source in a really positive way?

290
00:20:34,940 --> 00:20:39,300
First I would say is educate yourself about open source software.

291
00:20:39,300 --> 00:20:45,460
All of us are going to be coming from a different starting point in our familiarity with open

292
00:20:45,460 --> 00:20:47,940
source and how it works.

293
00:20:47,940 --> 00:20:55,020
So wherever you are, take the next educational step to learn more about the open source software

294
00:20:55,020 --> 00:20:56,820
ecosystem.

295
00:20:56,820 --> 00:21:02,980
GitHub has a great tool that will introduce you to open source.

296
00:21:02,980 --> 00:21:06,260
It has good recommendations for best practices.

297
00:21:06,260 --> 00:21:12,100
And I encourage you all to check it out, especially if you're a little bit newer.

298
00:21:12,100 --> 00:21:17,700
Second, I would encourage you to keep track of your dependencies and do your best to keep

299
00:21:17,740 --> 00:21:20,540
up to date on releases.

300
00:21:20,540 --> 00:21:27,740
This is just good for the health and sustainability of any projects you may have.

301
00:21:27,740 --> 00:21:33,520
Third, I would say you should consider a security tool.

302
00:21:33,520 --> 00:21:38,540
These tools that I mentioned for companies are available to you as well.

303
00:21:38,540 --> 00:21:44,740
I challenge you to try using a tool on one of your repos and one of your projects and

304
00:21:44,740 --> 00:21:47,100
see what it finds.

305
00:21:47,100 --> 00:21:53,220
For instance, I have this sample project of mine from when I was first learning to code.

306
00:21:53,220 --> 00:21:58,940
Using sneak, I found eight vulnerabilities, including four with high severity.

307
00:21:58,940 --> 00:22:04,580
This isn't really deployed anywhere, so I don't need to remediate anything.

308
00:22:04,580 --> 00:22:12,620
But if it was, then I would want to know where these vulnerabilities are and what I could

309
00:22:12,660 --> 00:22:17,620
maybe do to upgrade them and patch them and things like that.

310
00:22:17,620 --> 00:22:20,860
Knowing is half the battle.

311
00:22:20,860 --> 00:22:23,820
A security tool helps you be vigilant.

312
00:22:23,820 --> 00:22:29,420
So let's say you're using a security tool and everything checked out.

313
00:22:29,420 --> 00:22:31,420
So you're good, right?

314
00:22:31,420 --> 00:22:36,340
Well you need to continue to check for vulnerabilities because new vulnerabilities are found all

315
00:22:36,340 --> 00:22:38,500
the time.

316
00:22:38,500 --> 00:22:45,180
So you really need to take Maddai Moody's advice here and practice constant vigilance.

317
00:22:45,180 --> 00:22:47,380
This isn't a one and done thing.

318
00:22:47,380 --> 00:22:52,940
Keep an eye or even a Maddai on your open source dependencies and keep up to date with

319
00:22:52,940 --> 00:22:58,580
new versions to the best of your ability.

320
00:22:58,580 --> 00:23:03,820
Recommendation four is to advocate for more deliberate use of open source software in

321
00:23:03,820 --> 00:23:05,620
your workplace.

322
00:23:05,620 --> 00:23:09,100
If you've learned something interesting today about the thoughtful and deliberate use of

323
00:23:09,100 --> 00:23:12,980
open source, I encourage you to share it with your coworkers.

324
00:23:12,980 --> 00:23:16,980
Advocate for better open source software practices in your workplace.

325
00:23:16,980 --> 00:23:21,420
And I think that makes you a hero.

326
00:23:21,420 --> 00:23:25,100
And finally, I would like to address communities.

327
00:23:25,100 --> 00:23:31,060
Oh, no.

328
00:23:31,060 --> 00:23:32,060
Sorry about that.

329
00:23:32,180 --> 00:23:36,780
I should have some music or something playing.

330
00:23:36,780 --> 00:23:39,580
So to distract you from this.

331
00:23:39,580 --> 00:23:40,580
And it's showing up.

332
00:23:40,580 --> 00:23:41,580
Great.

333
00:23:41,580 --> 00:23:45,420
So finally, I want to address communities.

334
00:23:45,420 --> 00:23:51,820
I encourage communities to create space for discussion on open source and to brainstorm

335
00:23:51,820 --> 00:23:56,420
ways that we can improve how we contribute to it and how we use it.

336
00:23:56,420 --> 00:24:00,220
I want to thank PyCon for leading by example in this area.

337
00:24:00,220 --> 00:24:06,380
They selected this talk, provided this space.

338
00:24:06,380 --> 00:24:10,460
They want to keep this issue going, right?

339
00:24:10,460 --> 00:24:16,740
And this jives really nicely with the things that Russell Keith McGee was saying at our

340
00:24:16,740 --> 00:24:20,180
opening keynote, right?

341
00:24:20,180 --> 00:24:21,740
We're in this together.

342
00:24:21,740 --> 00:24:25,380
So we should talk about these things.

343
00:24:25,420 --> 00:24:30,500
I want to encourage all of you to continue conversation about open source over a meal

344
00:24:30,500 --> 00:24:31,820
or in the hallways.

345
00:24:31,820 --> 00:24:37,540
And I encourage your communities to have these kinds of conversations as well.

346
00:24:37,540 --> 00:24:44,780
And I encourage you also to take this second recommendation to challenge one another.

347
00:24:44,780 --> 00:24:46,700
Respectfully challenge one another.

348
00:24:46,700 --> 00:24:53,260
Make your study group, maybe your study group could have an upgrade your packages day.

349
00:24:53,260 --> 00:24:57,900
Maybe host an event to fundraise in support of an open source project.

350
00:24:57,900 --> 00:25:03,220
Pull out your wallet and ask your friends if they've pulled out theirs.

351
00:25:03,220 --> 00:25:08,740
Challenge one another to step up and we can do really amazing things.

352
00:25:08,740 --> 00:25:10,220
Thanks so much for coming today.

353
00:25:10,220 --> 00:25:11,780
I really, really appreciate it.

354
00:25:11,780 --> 00:25:16,860
I'm going to be posting these slides from my Twitter account listed there in about another

355
00:25:16,860 --> 00:25:18,100
hour or so.

356
00:25:18,100 --> 00:25:22,820
The slides include links to relevant resources and more.

357
00:25:23,180 --> 00:25:25,900
I hope you enjoy the rest of the conference.

358
00:25:25,900 --> 00:25:28,620
And while you're at it, thank the maintainer.

359
00:25:28,620 --> 00:25:29,620
Thank you all.

360
00:25:29,620 --> 00:25:36,340
Thank you very much, Haley.

361
00:25:36,340 --> 00:25:38,460
We will not be taking questions for this presentation.

362
00:25:38,460 --> 00:25:41,020
If you'd like to find Haley out in the hall, you're more than welcome to.

363
00:25:41,020 --> 00:25:41,700
And thank you very much.

