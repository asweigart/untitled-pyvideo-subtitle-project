1
00:00:00,000 --> 00:00:02,000
Hi, everybody.

2
00:00:02,000 --> 00:00:04,000
Welcome.

3
00:00:04,000 --> 00:00:14,000
Our next speaker, Mario Cochero, will be talking to us about exceptional exceptions, how to

4
00:00:14,000 --> 00:00:17,000
properly raise, handle, and create them.

5
00:00:17,000 --> 00:00:22,000
Let's welcome him.

6
00:00:22,000 --> 00:00:28,000
Welcome, everyone.

7
00:00:28,000 --> 00:00:29,000
My name is Mario Cochero.

8
00:00:29,000 --> 00:00:30,000
I work at Bloomberg.

9
00:00:30,000 --> 00:00:32,000
If you're Spanish, I'm Mario Cochero.

10
00:00:32,000 --> 00:00:36,000
It's impossible for anyone that doesn't have like they are.

11
00:00:36,000 --> 00:00:38,000
Don't worry about that.

12
00:00:38,000 --> 00:00:43,000
You'll see I usually do presentations where I like that people enjoy the presentation.

13
00:00:43,000 --> 00:00:46,000
They don't see just code and code and code.

14
00:00:46,000 --> 00:00:48,000
This is not one of those.

15
00:00:48,000 --> 00:00:52,000
There is also, well, after the talk, I love meeting new people.

16
00:00:52,000 --> 00:00:56,000
So please, if you want to grab coffee or whatever, we can have a chat.

17
00:00:56,000 --> 00:00:58,000
I love that.

18
00:00:58,000 --> 00:01:00,000
Don't worry.

19
00:01:00,000 --> 00:01:02,000
There won't be any promotion in this talk.

20
00:01:02,000 --> 00:01:04,000
There's a lot of Bloomberg there.

21
00:01:04,000 --> 00:01:06,000
I work for Bloomberg.

22
00:01:06,000 --> 00:01:08,000
I'm not going to try to hire you.

23
00:01:08,000 --> 00:01:10,000
I'm not going to try to sell you a product.

24
00:01:10,000 --> 00:01:12,000
Nor sell you a holiday package.

25
00:01:12,000 --> 00:01:14,000
Don't worry.

26
00:01:14,000 --> 00:01:18,000
In this talk, ideally, if you are a beginner to Python, you'll kind of understand how can

27
00:01:18,000 --> 00:01:20,000
you work with exceptions.

28
00:01:20,000 --> 00:01:26,000
If you intermediate, you will see some catch-ups and some usual mistakes that you should try

29
00:01:26,000 --> 00:01:28,000
to avoid and maybe you learn some new syntax.

30
00:01:28,000 --> 00:01:34,000
If you're an advanced user of Python, you will ideally have some fun because there are

31
00:01:34,000 --> 00:01:38,000
some parts of Python that are like, wow, how does this work?

32
00:01:38,000 --> 00:01:44,000
If you are a C Python core developer, please keep your questions for yourself.

33
00:01:44,000 --> 00:01:50,000
So first of all, and this is why I started this presentation, is you start to speak about

34
00:01:50,000 --> 00:01:52,000
exceptions like so easy.

35
00:01:52,000 --> 00:01:54,000
You just want to raise an exception.

36
00:01:54,000 --> 00:01:56,000
Easy peasy.

37
00:01:56,000 --> 00:01:58,000
You say raise exception.

38
00:01:58,000 --> 00:02:00,000
You pass the message there.

39
00:02:00,000 --> 00:02:04,000
But then you're like, okay, maybe I'm raising the exception when I'm handling an exception.

40
00:02:04,000 --> 00:02:08,000
In this situation, things start to get trickier because maybe if I'm doing that, it's because

41
00:02:08,000 --> 00:02:14,000
I'm within a library and I want to hide the exception that I was capturing first.

42
00:02:14,000 --> 00:02:18,000
But if I'm within a library, probably I want to have my own exception here.

43
00:02:18,000 --> 00:02:22,000
And then it's like, yeah, but there's also like, hey, the key error will probably include some

44
00:02:22,000 --> 00:02:26,000
information so the exception has multiple arguments.

45
00:02:26,000 --> 00:02:30,000
And there's also this also else and finally and blah, blah, blah, blah.

46
00:02:30,000 --> 00:02:34,000
So let's go a little bit over it step by step.

47
00:02:34,000 --> 00:02:36,000
So first of all, how do we capture exceptions?

48
00:02:36,000 --> 00:02:38,000
Really easy.

49
00:02:38,000 --> 00:02:40,000
Try catch.

50
00:02:40,000 --> 00:02:42,000
Yes, I was a C++ developer.

51
00:02:42,000 --> 00:02:44,000
So try accept.

52
00:02:44,000 --> 00:02:46,000
Don't hate me for that.

53
00:02:46,000 --> 00:02:50,000
Try accept and then you can just put the exception class that you want to match there.

54
00:02:50,000 --> 00:02:52,000
And there are different ways to do it.

55
00:02:52,000 --> 00:02:54,000
You can just put a class.

56
00:02:54,000 --> 00:02:56,000
You can just put a couple of them or you can just put nothing.

57
00:02:56,000 --> 00:02:58,000
You shouldn't do it.

58
00:02:58,000 --> 00:03:02,000
But what's going to happen here is basically whenever an exception is raising, it will go

59
00:03:02,000 --> 00:03:06,000
one by one on each of those steps and try to match it.

60
00:03:06,000 --> 00:03:08,000
So that means that an exception raises.

61
00:03:08,000 --> 00:03:10,000
It goes to the runtime error.

62
00:03:10,000 --> 00:03:12,000
It tries to match it.

63
00:03:12,000 --> 00:03:14,000
Go to the next one.

64
00:03:14,000 --> 00:03:16,000
Go to each of them.

65
00:03:16,000 --> 00:03:18,000
I think it will fall into accept.

66
00:03:18,000 --> 00:03:20,000
If there is no one that matches, it will just raise it up.

67
00:03:20,000 --> 00:03:22,000
Easy, right?

68
00:03:22,000 --> 00:03:24,000
Did you know that you can put absolutely anything there?

69
00:03:24,000 --> 00:03:26,000
And what I mean with that is that you can have an exception in the variable.

70
00:03:26,000 --> 00:03:28,000
You can have a function that gives you an exception.

71
00:03:28,000 --> 00:03:30,000
Or you can have a typo and have a variable that doesn't exist.

72
00:03:30,000 --> 00:03:32,000
And this is not a syntax error.

73
00:03:32,000 --> 00:03:34,000
Your code will happily be compiled into Python.

74
00:03:34,000 --> 00:03:36,000
It will be run.

75
00:03:36,000 --> 00:03:38,000
And things won't break until you go to this line.

76
00:03:38,000 --> 00:03:40,000
That means that if you accept any of those, that won't be code.

77
00:03:40,000 --> 00:03:42,000
So this is why test coverage is important.

78
00:03:42,000 --> 00:03:44,000
Make sure that you don't fall into one of those.

79
00:03:44,000 --> 00:03:46,000
Because if you have a typo, you might have an error in your program and you never visit it until you have an error.

80
00:03:46,000 --> 00:03:48,000
It's when things go really south.

81
00:03:48,000 --> 00:03:50,000
So more on the code.

82
00:03:50,000 --> 00:03:52,000
So I think that's it.

83
00:03:52,000 --> 00:03:54,000
I hope you enjoyed this.

84
00:03:54,000 --> 00:03:56,000
I hope you enjoyed this.

85
00:03:56,000 --> 00:03:58,000
I hope you enjoyed this.

86
00:03:58,000 --> 00:04:04,000
So more things about the try except.

87
00:04:04,000 --> 00:04:08,000
You will also have the finally where you can do some kind of cleanup.

88
00:04:08,000 --> 00:04:14,000
Basically, whether try raises an exception or not, whatever you have in the finally is going to be executed.

89
00:04:14,000 --> 00:04:16,000
Easy peasy.

90
00:04:16,000 --> 00:04:18,000
There's also else.

91
00:04:18,000 --> 00:04:20,000
This is surprising for people coming from other languages.

92
00:04:20,000 --> 00:04:26,000
What all that else does is if there is no exception being matched, well, sorry, if there is no exception that was triggered when you did the try on the code,

93
00:04:26,000 --> 00:04:28,000
it will execute the code in the else.

94
00:04:28,000 --> 00:04:32,000
It conveys some meaning in the sense of it's effectively what happens if there are no exceptions.

95
00:04:32,000 --> 00:04:34,000
In case you wonder what's the difference between else and just put into try.

96
00:04:34,000 --> 00:04:36,000
So there's a different meaning to it.

97
00:04:36,000 --> 00:04:40,000
And additionally, whatever code that you have here, if it raises, it won't be catched by this.

98
00:04:40,000 --> 00:04:42,000
So let's start with the fun part.

99
00:04:42,000 --> 00:04:44,000
What if we put all of them together?

100
00:04:44,000 --> 00:04:46,000
So just look at this thing.

101
00:04:46,000 --> 00:04:48,000
Just think ahead and think about what you can do.

102
00:04:48,000 --> 00:04:50,000
What you can do.

103
00:04:50,000 --> 00:04:52,000
What you can do.

104
00:04:52,000 --> 00:04:54,000
So just look at this thing.

105
00:04:54,000 --> 00:04:56,000
Just think ahead.

106
00:04:56,000 --> 00:04:58,000
Don't worry.

107
00:04:58,000 --> 00:05:00,000
We don't do exercise in the stock.

108
00:05:00,000 --> 00:05:02,000
No need to raise hands.

109
00:05:02,000 --> 00:05:04,000
Just try to think if you know what will happen, like what would be the output of this?

110
00:05:04,000 --> 00:05:08,000
If you know some Python and you have worked with this, you would know that it would be one, three, four.

111
00:05:08,000 --> 00:05:10,000
And this is easy, right?

112
00:05:10,000 --> 00:05:12,000
Everyone is like exceptions are easy.

113
00:05:12,000 --> 00:05:14,000
Why do you come to speak about this?

114
00:05:14,000 --> 00:05:16,000
What about this?

115
00:05:16,000 --> 00:05:18,000
What does this function return?

116
00:05:18,000 --> 00:05:20,000
Right?

117
00:05:20,000 --> 00:05:22,000
So will it return one because it's the code that you're executing?

118
00:05:22,000 --> 00:05:24,000
Will it go through the else?

119
00:05:24,000 --> 00:05:26,000
Or will it go through the finally?

120
00:05:26,000 --> 00:05:28,000
Right?

121
00:05:28,000 --> 00:05:30,000
This is good homework if you want to click into this.

122
00:05:30,000 --> 00:05:36,000
So what's actually going to happen is that it's the one in the final that's going to be returned.

123
00:05:36,000 --> 00:05:38,000
So the output of this would be four.

124
00:05:38,000 --> 00:05:48,000
If you want to understand why that happens, I would recommend that in the latest version of Python, like the one in master, you use this.this to disassemble the code and you can see what's actually happening.

125
00:05:48,000 --> 00:05:54,000
And the key is like the return is not the right code as many others.

126
00:05:54,000 --> 00:05:56,000
And it will be only the last one that's being returned.

127
00:05:56,000 --> 00:05:58,000
It's really cool.

128
00:05:58,000 --> 00:06:00,000
Really, really cool.

129
00:06:00,000 --> 00:06:02,000
Okay.

130
00:06:02,000 --> 00:06:04,000
So this is something that goes to my heart.

131
00:06:04,000 --> 00:06:06,000
I don't know if you saw past year, there was a gentleman that did a presentation about logging.

132
00:06:06,000 --> 00:06:08,000
It was amazing.

133
00:06:08,000 --> 00:06:10,000
You have to see it in YouTube.

134
00:06:10,000 --> 00:06:12,000
Okay?

135
00:06:12,000 --> 00:06:14,000
So I'm going to fall into logging based on what he spoke.

136
00:06:14,000 --> 00:06:16,000
So whenever you are handling an exception and you want to log about it, all the logging is going to be done.

137
00:06:16,000 --> 00:06:32,000
So if you have an exception and you want to log about it, all the logging methods that are in the logging library, whether you have a logger or not, a logger or you want to use the global logging, all the methods have this argument called x-gimf that will log the exception with the traceback.

138
00:06:32,000 --> 00:06:34,000
This is really handy.

139
00:06:34,000 --> 00:06:36,000
Don't try to do it yourself.

140
00:06:36,000 --> 00:06:38,000
I know many people try to print the traceback and the error message.

141
00:06:38,000 --> 00:06:40,000
Don't try to do it yourself.

142
00:06:40,000 --> 00:06:42,000
You have this beautiful argument.

143
00:06:42,000 --> 00:06:44,000
When I discovered it, I was like, wow, I have this thing being my whole life.

144
00:06:44,000 --> 00:06:46,000
And it will just print the whole traceback with all the information that you need.

145
00:06:46,000 --> 00:06:48,000
If you are doing this, write a better error message than the one I did there.

146
00:06:48,000 --> 00:06:50,000
Usually, whenever you are logging on an exception, don't just say that an error happened.

147
00:06:50,000 --> 00:06:52,000
Explain where did it happen and maybe what's going to be done with it.

148
00:06:52,000 --> 00:06:54,000
But what's interesting is when we are in this situation, there are usually two kinds of ways that we can log about it.

149
00:06:54,000 --> 00:06:56,000
So if you log about it, you log the error message.

150
00:06:56,000 --> 00:06:58,000
So if you log about it, you log the error message.

151
00:06:58,000 --> 00:07:00,000
So if you log about it, you log the error message.

152
00:07:00,780 --> 00:07:01,280
Or log it on an unrecoverable error message like that of N추.

153
00:07:01,280 --> 00:07:02,580
Or log it on an unrecoverable error message like that of Nining.

154
00:07:02,580 --> 00:07:04,080
shaders.

155
00:07:04,080 --> 00:07:06,080
So there are basically all kinds of ways that you can log about exceptions.

156
00:07:06,080 --> 00:07:12,080
From authorize to Кстати, many of the thingszięki to developers are things that xinfo previously said the war is wrong.

157
00:07:12,080 --> 00:07:14,080
So when you are communicating an exaggeration, or say a feature, an expectation, or whatever,

158
00:07:14,080 --> 00:07:16,080
So when you are communicating an exaggeration, or say a feature, or whatever,

159
00:07:16,080 --> 00:07:18,080
There is usually a process we use to log about it.

160
00:07:18,080 --> 00:07:20,080
There are several ways we can log about.

161
00:07:20,080 --> 00:07:22,080
There information is in the category, theasticity in the example of memory and word,

162
00:07:22,080 --> 00:07:24,080
But it can be more choir and count ofacc드� encounterings.

163
00:07:24,080 --> 00:07:26,080
is in the category, theasticity in the example of memory and word,

164
00:07:26,080 --> 00:07:30,940
error. And in that situation, you probably want to log an error. And that's it. Or you

165
00:07:30,940 --> 00:07:37,040
might want to log something in info to help you debug and then rewrite the exception.

166
00:07:37,040 --> 00:07:42,660
Why do I put time on this? Because in the sense of Python, it says error should never

167
00:07:42,660 --> 00:07:47,260
pass silently unless explicitly silenced. That doesn't mean that you should transform

168
00:07:47,260 --> 00:07:50,980
one error into two errors. Because if you're doing something like this, which is basically

169
00:07:50,980 --> 00:07:56,540
you capture an exception, log an error, and then rewrite. Now you have two errors. And

170
00:07:56,540 --> 00:08:02,140
what's worse than one error? You guessed it, two errors. So if as a user now I have to

171
00:08:02,140 --> 00:08:09,140
deal with code like this, the problem is, let's say, and this happened, a DBA2 adapter

172
00:08:09,140 --> 00:08:15,380
of a database might, for example, raise an exception and log an error because I'm trying

173
00:08:15,380 --> 00:08:19,760
to insert the record and it's violating a primary key. So the person that designed the

174
00:08:19,760 --> 00:08:23,720
library thought, hey, it's a really good idea that not only am I raising an exception,

175
00:08:23,720 --> 00:08:28,800
like a primary key violation error, but I'm also going to log a warning. That's painful.

176
00:08:28,800 --> 00:08:33,640
And that's painful because when I'm writing code as a user of the library, I might rely

177
00:08:33,640 --> 00:08:37,760
on that as a feature. And that might not be an error for me. I might be able to handle

178
00:08:37,760 --> 00:08:42,480
that exception cleanly and just say, yeah, I was trying to insert something. I know it's

179
00:08:42,480 --> 00:08:45,920
there. Okay. So I will update instead, for example, if I want to implement absurd on

180
00:08:46,920 --> 00:08:50,080
But if you're logging an error, you're giving me two errors. You're giving me the exception

181
00:08:50,080 --> 00:08:54,320
and you're giving me the error. So then I have to choose what do I do when I get the

182
00:08:54,320 --> 00:08:58,280
exception. Like if, for example, I wanted to suppress it. And quite often what I do

183
00:08:58,280 --> 00:09:05,520
is I'm going to shut the logger of that library. Okay. So something else, and you see this

184
00:09:05,520 --> 00:09:10,080
a lot, if you don't want to log the traceback and everything but you want to log the exception,

185
00:09:10,080 --> 00:09:16,080
the content of the exception, always, always, always please use the wrapper of the exception.

186
00:09:16,080 --> 00:09:20,640
If you like, yes, when you log, you know, this percentage S that appears everywhere.

187
00:09:20,640 --> 00:09:26,240
So the S can be changed for everything. That's a string interpolation syntax. And one of

188
00:09:26,240 --> 00:09:30,320
them is R. And if you use R, it's going to use the wrapper of the exception rather than

189
00:09:30,320 --> 00:09:36,240
the string. Why does it matter? Well, because let's say that you create an exception with

190
00:09:36,240 --> 00:09:41,840
the text it broke. If you try to print the string of it, it will just tell you it broke.

191
00:09:41,840 --> 00:09:47,800
If you print the wrapper of it, it will be the exception with the text. This is important

192
00:09:47,800 --> 00:09:52,120
because if I create an exception without argument, you're going to get an empty message. How

193
00:09:52,120 --> 00:09:58,560
useful is that? Right? Also, if you, for example, have like a really broad exception catch, like

194
00:09:58,560 --> 00:10:02,280
you just say accept, accept, and then you log the exception, you will have no way to

195
00:10:03,120 --> 00:10:07,000
a value error and a key error. I'm sure all of you have seen this beautiful log in the

196
00:10:07,000 --> 00:10:12,600
middle of the night where it just says error happened, data. That's usually because it's

197
00:10:12,600 --> 00:10:17,520
a key error that just had data in it and you have no clue what happened. So if you use

198
00:10:17,520 --> 00:10:24,520
the wrapper instead of string, you will be able to get some more information. And I need

199
00:10:24,520 --> 00:10:31,520
some water. Okay. So I don't know if you want to the garbage collector talk, but basically

200
00:10:32,280 --> 00:10:37,520
that's Pablo Galindo talk. I don't know if it's here. He was doing this talk. We worked

201
00:10:37,520 --> 00:10:40,360
together. And he was doing this talk about the garbage collector. And I just saw that

202
00:10:40,360 --> 00:10:45,920
he stole this light from me. So same with you wherever you are because now I cannot

203
00:10:45,920 --> 00:10:50,560
say. But basically something really interesting about when we are capturing exception and

204
00:10:50,560 --> 00:10:54,360
this exception clause is that if you have a with statement and you do with blah, blah,

205
00:10:54,360 --> 00:10:59,720
blah, as blah, blah, blah, this object will outlive after this context. For exception,

206
00:10:59,720 --> 00:11:04,040
that's not happening. If you wonder why, like this is going to fail. If you do this,

207
00:11:04,040 --> 00:11:08,360
like E is not defined here. And this is going to fail if you can get more information in

208
00:11:08,360 --> 00:11:13,920
this. The issue basically is that the exception object has a trace back, the trace back has

209
00:11:13,920 --> 00:11:19,840
a string frame and it will link back to the exception generating a cycle. Like I was speaking

210
00:11:19,840 --> 00:11:24,560
yesterday with a call developer called Victor. They were like, yeah, I hate this thing. Like

211
00:11:25,560 --> 00:11:32,560
of like small hacks to get around this and not generate cycles. Okay. So now let's get

212
00:11:35,600 --> 00:11:42,600
into raising exceptions. And whenever we are going to raise an exception. Oh, that's my

213
00:11:42,600 --> 00:11:46,720
region. I don't know what's doing in this slide. I'm from there. If you want to visit

214
00:11:46,720 --> 00:11:53,720
it, I can make a whole package. You have castles, like Roman temples, these really beautiful

215
00:11:53,720 --> 00:11:59,800
cities. That's like UNESCO World Heritage. Americans love castles. You can stay in my

216
00:11:59,800 --> 00:12:05,240
city, you can stay in a castle and sleep there. Okay? And yeah, this is, I know I'm in the

217
00:12:05,240 --> 00:12:12,240
U.S. So Spain is there in Europe. Okay? Okay. So let's see how can we raise exceptions.

218
00:12:12,240 --> 00:12:19,240
No more spam. Don't worry. Let's see how can we raise exceptions. Whenever you raise an

219
00:12:23,840 --> 00:12:27,720
exception, you can just create an instance of an exception. You can pass all the arguments

220
00:12:27,720 --> 00:12:34,360
here or you can just pass the class and it will create the exception without any arguments.

221
00:12:34,360 --> 00:12:38,000
But that's the fun part. Whenever you want to raise an exception, when you are capturing

222
00:12:38,000 --> 00:12:43,320
an exception, you will see a lot of code like this. And the problem is whenever you

223
00:12:43,320 --> 00:12:49,560
do this, what's happening, what you are saying here is that when you are handling the exception,

224
00:12:49,560 --> 00:12:55,080
something failed. It's not many people do this trying to convert an exception, but what

225
00:12:55,080 --> 00:12:59,040
you are doing here is that you are basically failing to handle the exception. And you can

226
00:12:59,040 --> 00:13:04,120
see here that if you just run this and see the trace back, you're going to see that it

227
00:13:04,120 --> 00:13:07,960
effectively says during the handling of the above exception, an exception occurred. This

228
00:13:07,960 --> 00:13:13,160
basically means I was trying to handle an exception and I failed to handle the exception.

229
00:13:13,160 --> 00:13:18,240
If what you actually want to do is, for example, have an exception, do some logic and then

230
00:13:18,240 --> 00:13:23,600
let the exception raise, what you can do is you can just capture the exception, do whatever

231
00:13:23,600 --> 00:13:29,680
you want, okay? And then you can just re-raise. You can see here in the output that effectively

232
00:13:29,680 --> 00:13:33,800
it's like this code never happened. This is like the area stack of the exception handling.

233
00:13:33,800 --> 00:13:38,320
Sorry, I was touched with the last chapter of Game of Thrones, so I had to do that. So,

234
00:13:38,320 --> 00:13:45,600
yeah, you just raise and this is just going to re-raise the exception. If you want to

235
00:13:45,600 --> 00:13:50,160
re-raise an exception that you have in a variable or something like that, you can just do it

236
00:13:50,160 --> 00:13:55,760
by saving the exception, because remember the exception don't leak the scope, and then

237
00:13:56,760 --> 00:14:00,400
you can just re-raise it. If you do this, you will see on the trace back that you get

238
00:14:00,400 --> 00:14:09,800
both lines where you re-raise it and where it was originally generated. Okay. So more

239
00:14:09,800 --> 00:14:14,920
interesting, especially when you are designing a library and you want to translate a question,

240
00:14:14,920 --> 00:14:19,000
if you are one of those blame-er people, you can just create an exception and say, hey,

241
00:14:19,000 --> 00:14:23,680
this is the exception that I'm re-raising, but the original fault was from this other

242
00:14:23,760 --> 00:14:29,480
exception. So this is just a way to, if you want to handle exception and translate into,

243
00:14:29,480 --> 00:14:32,640
for example, your own hierarchy, but you still want to expose the original exception that

244
00:14:32,640 --> 00:14:39,160
happened. So you can see here that Python will tell you, yeah, the above exception was

245
00:14:39,160 --> 00:14:42,440
the direct cause of the following exception. So here you have your exception and here you

246
00:14:42,440 --> 00:14:48,240
have the original exception. Also in this object, in the new object that you are capturing,

247
00:14:48,240 --> 00:14:54,240
you have an attribute called Dunder cause where you can access the original exception. But

248
00:14:54,240 --> 00:14:59,400
many times you don't want to expose your internals, right? Like, for example, let's say you are

249
00:14:59,400 --> 00:15:04,960
writing some code and you are using your lib, but then you might move to request or something

250
00:15:04,960 --> 00:15:08,280
like that in the future, and therefore you just want to hide everything that's related

251
00:15:08,280 --> 00:15:13,520
to the implementation. You can do that by just doing raise from none. That basically

252
00:15:13,560 --> 00:15:18,800
allows you to hide everything that happened. So nothing to see here. It's a whole new exception.

253
00:15:18,800 --> 00:15:23,760
And this is a really good way to kind of like design your exception in your library without

254
00:15:23,760 --> 00:15:30,500
exposing the ones of your implementation. Yes, so that's how it looks. You have no trace

255
00:15:30,500 --> 00:15:41,500
of the older exception. It's totally hidden. Now, something that you see a lot, and I mean

256
00:15:41,900 --> 00:15:48,900
a lot, not, it's worrying, but I'm sorry, if you look in your source code, you would

257
00:15:49,460 --> 00:15:56,460
find some of those. Not implemented is not an exception. Okay? Not implemented is something

258
00:15:56,660 --> 00:16:03,140
that you use when you are implementing operators for your classes. What people usually want

259
00:16:03,140 --> 00:16:10,140
to raise is not implemented error. But that's 37,000 hits raising not implemented errors.

260
00:16:11,500 --> 00:16:17,540
In GitHub. And the problem with this is that you see many people actually test this code,

261
00:16:17,540 --> 00:16:22,500
and they might do, for example, they do assert that this raises exception. And guess what?

262
00:16:22,500 --> 00:16:26,300
This is actually going to raise an exception. Because whenever you try to raise not implemented,

263
00:16:26,300 --> 00:16:30,220
because whenever you try to raise an exception, it has to be a base class of exception, it's

264
00:16:30,220 --> 00:16:35,940
going to raise an exception. But it's wrong. But what's even worse is if you try to accept

265
00:16:35,940 --> 00:16:42,060
on it. Because if you do something like that, where you accept on not implemented, this

266
00:16:42,060 --> 00:16:46,440
code will work. And even if you have accepts afterwards, at the moment that you try and

267
00:16:46,440 --> 00:16:50,180
exception comes, pass this first one and then goes to the second one, it's going to fail

268
00:16:50,180 --> 00:16:55,900
here. So this is a bomb trap. And my guess is that people use raise not implemented because

269
00:16:55,900 --> 00:17:00,700
when you are in an ID or something, you just press tab and not implemented probably appears

270
00:17:01,300 --> 00:17:07,700
before. I don't know. It's the only explanation I can see. I can see that the names are confusing,

271
00:17:07,700 --> 00:17:15,260
right? But that would be if I'm using an ID, I guess that can happen. Something else is

272
00:17:15,260 --> 00:17:21,740
whenever you're raising a threat, it can happen that, well, if the exception is not caught,

273
00:17:21,740 --> 00:17:26,340
it will print you a beautiful stack that's not really useful many times. So if instead

274
00:17:26,340 --> 00:17:30,980
of that, you want that whenever you call to a threat to offload the job or something

275
00:17:30,980 --> 00:17:34,860
like that, you want to get an exception in your main program, you can do it, for example,

276
00:17:34,860 --> 00:17:41,680
by using futures. If you do that, you can just like even if it doesn't return anything,

277
00:17:41,680 --> 00:17:46,780
you can just call futures the result. And that's going to move the exception from that

278
00:17:46,780 --> 00:17:51,820
child threat into your main one, which is quite handy. Because many times you have this

279
00:17:52,380 --> 00:17:56,740
that has a threat that runs something and you assume that it has worked, right? Because

280
00:17:56,740 --> 00:18:00,820
there's no error when you launch it, but it might fail with an exception that you didn't

281
00:18:00,820 --> 00:18:05,340
notice. So by just using futures, you can save from that.

282
00:18:05,340 --> 00:18:09,220
And let's now start to speak about creating exceptions. Oh, yeah, we have, I'm only in

283
00:18:09,220 --> 00:18:13,540
my region. You know what's that? That's like the best media I've ever tried. And you know,

284
00:18:13,540 --> 00:18:17,420
like the rhythm floor that's really good. You have to come to speak with me after all

285
00:18:17,420 --> 00:18:23,700
for the trouble. So this is the exception hierarchy in Python. You will see that I'm

286
00:18:23,700 --> 00:18:28,780
shortening it a little bit, but there are a lot of exceptions that are suitable in many

287
00:18:28,780 --> 00:18:33,060
different situations. And the main things that the main two ones that you probably want

288
00:18:33,060 --> 00:18:39,180
to know about is base exception and exception. And base exception is not the one that you

289
00:18:39,180 --> 00:18:43,460
should capture. You always want to capture whenever you say I want to capture all the

290
00:18:44,220 --> 00:18:51,220
exceptions. And that is because base exception has some exceptions like system exit or keyboard

291
00:18:51,540 --> 00:18:56,420
interrupt. So that means that if you are capturing base exception and you press control C, it's

292
00:18:56,420 --> 00:19:00,980
just going to go into that code handling and you probably don't want that.

293
00:19:00,980 --> 00:19:05,500
So okay, let's start to create, let's start to see how exceptions are and then we can

294
00:19:05,500 --> 00:19:10,980
create some more exceptions. So first of all, what attributes do we have whenever we create

295
00:19:10,980 --> 00:19:16,580
an exception? If you have been in Python for some long, you know that exception has

296
00:19:16,580 --> 00:19:20,840
a message, right? You have this exception.message, but no, you don't have it. That's only in

297
00:19:20,840 --> 00:19:27,640
Python 2. Again, in Python 3, that has been removed. It was already in Python 2.7, which

298
00:19:27,640 --> 00:19:31,420
is something that surprised a lot of people. Exceptions don't have message anymore. They

299
00:19:31,420 --> 00:19:37,780
now have, oh yeah, they now have arcs. So whenever you create an exception, it's going

300
00:19:37,780 --> 00:19:43,740
to have a list of arcs. It can be from zero to whatever. The thing that might give you

301
00:19:43,740 --> 00:19:50,060
the feeling that it has exceptions is that when you print them, if the arc is only one

302
00:19:50,060 --> 00:19:54,460
element, it will just treat it as kind of like the message. But there is no message

303
00:19:54,460 --> 00:19:58,500
anymore, okay? Whenever you want to see what was an exception created with and what are

304
00:19:58,500 --> 00:20:05,500
the arguments, you just have to go to e-arcs. There are some exceptions though that in the

305
00:20:06,500 --> 00:20:11,860
constructor give some specific meaning to the arguments based on the position, like

306
00:20:11,860 --> 00:20:18,860
for example, OSR, I believe. But all exceptions will have this attribute called e.arcs. You

307
00:20:20,500 --> 00:20:25,780
also have a traceback. So that's kind of the traceback of when the exception was created.

308
00:20:25,780 --> 00:20:30,020
As we said, this is really painful and some developers have complained about it because

309
00:20:30,020 --> 00:20:37,020
it can really easily generate cycles. The other day we actually hit a cycle in the socket

310
00:20:37,980 --> 00:20:43,020
module. I was debugging a different thing and I was like, wow, why is this thing being

311
00:20:43,020 --> 00:20:49,620
kept alive? And there was actually a cycle in the socket module due to the exception

312
00:20:49,620 --> 00:20:56,620
traceback. Okay. Yeah. So whenever you are creating an exception, please always inherit

313
00:20:57,540 --> 00:21:04,220
from exception, never from base exception. It feels like it's calling you when you see

314
00:21:04,220 --> 00:21:10,660
base exception, right? It's like you want to inherit from that. It's a trap, okay? And

315
00:21:10,660 --> 00:21:17,660
that's important because if you inherit from base exception and then you erase that, if

316
00:21:17,860 --> 00:21:22,740
I as a user want to capture all exception, I cannot do exception anymore. I will have

317
00:21:22,740 --> 00:21:26,300
to do base exception and that's going to also capture exception that people usually

318
00:21:26,300 --> 00:21:31,700
don't want to capture as we saw before. Also, we said that all arguments, all exceptions

319
00:21:31,700 --> 00:21:37,540
have e.arcs. So even if you don't call super here, e.arcs are going to appear. So that's

320
00:21:37,540 --> 00:21:42,900
guaranteed for you. This is because actually e.arcs has no setting in the init. You can

321
00:21:42,900 --> 00:21:49,900
see more about that if you see the implementation of the base exception class. Oh, you should

322
00:21:50,900 --> 00:21:54,820
always inherit from exception because you cannot erase anything in Python that does

323
00:21:54,820 --> 00:22:00,540
not inherit from, that's not a set class of exception. Okay. So you start to create exception

324
00:22:00,540 --> 00:22:06,260
and you go crazy, like it's so fun, so only two lines of code, and then you realize that

325
00:22:06,260 --> 00:22:09,420
you probably want to have your own hierarchy. If you have a big library, that's usually

326
00:22:09,420 --> 00:22:15,740
a good idea. You can see, for example, work sug, or how you know to pronounce it, requests

327
00:22:15,740 --> 00:22:22,380
or sqalchemy have really nice, well-designed exception hierarchies. This is, for example,

328
00:22:22,380 --> 00:22:29,380
the one from, I think it's work sug. Basically, you can also, if you want, you can do multiple

329
00:22:32,380 --> 00:22:36,780
inheritance with the exception. So if you want, for example, the exception to be captured

330
00:22:36,780 --> 00:22:40,100
in two different bases, you can do that. You can see that in the decimal module in the

331
00:22:40,100 --> 00:22:45,660
standard library, the division by zero exception inherits from both decimal exception and

332
00:22:45,660 --> 00:22:50,260
error division. It's handy because whenever you're capturing an exception, you can be

333
00:22:50,260 --> 00:22:57,260
capturing any of those, and if you erase one of those, it will fall into that code path.

334
00:22:57,260 --> 00:23:02,580
Also if your library started by erasing value errors, but then in the future you want to

335
00:23:02,580 --> 00:23:07,100
change to your own exception hierarchy, no worry. We have you covered. All you have to

336
00:23:07,100 --> 00:23:14,100
do is you can inherit from the base exception of your exception hierarchy, and you just

337
00:23:14,340 --> 00:23:18,060
inherit from the previous exception that you want now to change. This way you won't break

338
00:23:18,060 --> 00:23:21,980
users because if you were to change the type of exception that you erase, that will be

339
00:23:21,980 --> 00:23:28,980
effectively a backward compatible change. What else? Oh, yes. So if you are coming from

340
00:23:29,140 --> 00:23:36,140
C++, well, from C, you might be tempted into doing, into forcing users into what's called

341
00:23:37,540 --> 00:23:41,180
the Pokemon catch, which is like you catch them all and then you're differentiating error

342
00:23:41,180 --> 00:23:44,980
codes, right? So if you want to use error codes, there are some situations where it

343
00:23:44,980 --> 00:23:51,980
might be fair. Like for example here, it's basically for awarding HTTP error codes into

344
00:23:54,220 --> 00:23:59,820
this code attribute, but even if you do that many times, it's good to have each of the

345
00:23:59,820 --> 00:24:05,820
error codes as a custom exception because whenever I'm a user of your library and I'm

346
00:24:05,820 --> 00:24:09,700
consuming it and I'm calling your code and I'm going to capture it, it's much easier

347
00:24:09,700 --> 00:24:14,180
for me to have different parts of the code based on the exception that I'm capturing

348
00:24:14,180 --> 00:24:21,180
rather than having to do ifs on the code. Okay. So wow. I went really quick. So basically

349
00:24:24,980 --> 00:24:31,420
raising with whenever you're raising with an except, be mindful of how are you doing

350
00:24:31,420 --> 00:24:34,780
it, whether you want to hide the exception or you want to erase an exception or you want

351
00:24:34,780 --> 00:24:41,780
to do a raise from whatever. Whenever you're logging an exception, please don't produce

352
00:24:41,980 --> 00:24:48,380
two errors out of one. So either log as an info and erase or just log an error if it's

353
00:24:48,380 --> 00:24:53,100
something you're going to recover from. And whenever you're creating exceptions for your

354
00:24:53,100 --> 00:24:59,360
libraries, think if you want your whole exception hierarchy or not. And I think we have time

355
00:24:59,440 --> 00:25:05,440
to go through some bonus. Wait, wait, wait. So I'm sure all of you know that this is bad,

356
00:25:05,440 --> 00:25:09,640
right? And this is bad because we saw that this is going to capture everything including,

357
00:25:09,640 --> 00:25:16,640
for example, like a keyboard interrupt. But this is as bad as that. So if you do, if you

358
00:25:17,880 --> 00:25:23,840
try to do something and you have a return in the finally, this is going to hide all

359
00:25:23,840 --> 00:25:27,280
the exceptions that you have in your code. If you have a function that's actually doing

360
00:25:27,280 --> 00:25:33,080
this, yeah, like nothing can stop it. Like if we write this code, for example, it's just

361
00:25:33,080 --> 00:25:37,920
import time, just leave for five seconds, and in the finally you do a print and a return.

362
00:25:37,920 --> 00:25:44,920
And then while true, you do a, you call that function. Let's see if I can show you. So

363
00:25:46,080 --> 00:25:51,240
you can see that code around this. And there will be no way to stop this. Actually, if

364
00:25:51,240 --> 00:25:56,800
you try to do keyboard interrupt, you're just feeding him. Like you see, he likes it. There's

365
00:25:56,800 --> 00:26:03,160
no way to stop this program. So be really mindful whenever you are returning in a finally.

366
00:26:03,160 --> 00:26:10,160
And with that, I think we have some time for questions.

367
00:26:11,160 --> 00:26:18,160
All right. If you have a question, please just use one of the microphones to ask.

368
00:26:18,160 --> 00:26:25,160
Cool. My questions. You can ask me about the Extremadura.

