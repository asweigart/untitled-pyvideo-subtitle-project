1
00:00:00,000 --> 00:00:07,000
Hello, everybody. Welcome back to the sessions. Next up is Matthew Gordon, who's going to

2
00:00:07,360 --> 00:00:10,360
be talking about fighting climate change with Python.

3
00:00:10,360 --> 00:00:17,360
All right. Hi. My name is Matt Gordon. I'm a software engineer at Kairos Aerospace. We're

4
00:00:17,360 --> 00:00:24,360
an 18-person shop in Mountain View, California, and we detect methane emissions. About three

5
00:00:35,480 --> 00:00:42,000
years ago, I had founded and then foundered a startup, and I was taking some time off,

6
00:00:42,000 --> 00:00:45,120
and I was building weird Burning Man art, and I was trying to figure out what I wanted

7
00:00:45,160 --> 00:00:50,640
to do with my life, and a friend of mine connected me with some physicists who were looking for

8
00:00:50,640 --> 00:00:56,920
somebody to write physics code that didn't look like it was written by a physicist. So

9
00:00:56,920 --> 00:01:01,480
I got involved with Kairos because I was thinking to myself, well, I want to do something that's

10
00:01:01,480 --> 00:01:06,240
physical, that affects the real world, that involves hardware, and I was thinking that

11
00:01:06,240 --> 00:01:11,320
the thing that was really most important to me right now is climate change.

12
00:01:11,320 --> 00:01:15,080
I'm going to make some jokey jokes. We're going to have some fun up here, but before

13
00:01:15,080 --> 00:01:22,080
I do that, I do want to impress upon everybody here that this is deadly serious. On our current

14
00:01:22,400 --> 00:01:28,040
trajectory by 2050, we're going to see two to two and a half degrees of global temperature

15
00:01:28,040 --> 00:01:35,040
change, and we're going to witness under that scenario mass displacement of 100 million

16
00:01:35,200 --> 00:01:42,200
people worldwide. We have a pretty good idea why that's happening. About 57% of that is

17
00:01:43,400 --> 00:01:49,080
due to carbon dioxide, CO2, being released into the atmosphere from fossil fuel use,

18
00:01:49,080 --> 00:01:56,080
but about 14-15% of that is from methane, CH4, which is the primary component of natural

19
00:01:56,680 --> 00:02:03,680
gas. And even though we emit a lot less of it, it is 60 times more powerful a climate

20
00:02:04,320 --> 00:02:11,320
change agent per pound than CO2. It is a cheap, clean-burning fuel, and it is so cheap and

21
00:02:13,160 --> 00:02:19,120
plentiful that when fracking, people tend to lose a lot of it. And whether or not it's

22
00:02:19,120 --> 00:02:23,120
a net benefit for climate change because it's clean-burning depends on how much of it we

23
00:02:23,120 --> 00:02:28,520
leak. And it's very difficult for people to know how much of it we leak because it has

24
00:02:28,520 --> 00:02:35,520
been very difficult to do surveys over very large areas until now. Natural gas and methane

25
00:02:35,520 --> 00:02:41,080
are odorless and invisible in their natural form. The rotten egg smell is actually put

26
00:02:41,080 --> 00:02:46,120
in there as a safety measure. So you occasionally see things like on the right here, that's

27
00:02:46,120 --> 00:02:50,720
Aliso Canyon in 2015. That's a natural gas storage unit that's being imaged with an

28
00:02:50,720 --> 00:02:56,680
OGI, an optical gas imager, and it's just gushing gas into the atmosphere. On the right,

29
00:02:56,680 --> 00:03:03,680
you see Colorado. That's what happens when an uncapped pipe on a gas well leaks natural

30
00:03:03,920 --> 00:03:07,720
gas into the ground, which seeps into somebody's basement over a period of several weeks or

31
00:03:07,720 --> 00:03:14,720
months, and their house explodes. So finding gas leaks is pretty important. This is a really

32
00:03:15,120 --> 00:03:20,840
big problem in physical scale. It's typical for a company to manage maybe 10,000, thousands

33
00:03:20,840 --> 00:03:25,960
of wells, and it's typical to be able to send guys with a pickup truck out with that optical

34
00:03:25,960 --> 00:03:31,320
gas imager to maybe one or two of these a day. And so they do not get inspected very

35
00:03:31,320 --> 00:03:34,160
often, and those inspections tend to happen randomly because they don't know where to

36
00:03:34,160 --> 00:03:39,800
send the guys. So we invented the leak surveyor. This is a PyCon, so I'm going to gloss over

37
00:03:39,800 --> 00:03:43,560
the hardware a little bit, but basically what you need to know is we throw a bunch of optics

38
00:03:43,560 --> 00:03:48,360
and electronics into a fiberglass pod, and we strap it to the bottom of the Cessna, and

39
00:03:48,360 --> 00:03:54,640
we fly it over oil producing areas like the Permian Basin. The optical component is an

40
00:03:54,680 --> 00:04:00,680
optical spectrometer, which basically looks for absorption wavelengths of methane. There's

41
00:04:00,680 --> 00:04:06,400
a six axis GPS, which tells us where we are, and there is an optical camera, which tells

42
00:04:06,400 --> 00:04:11,720
us what we're looking at. And we combine all that data using a metric that we developed

43
00:04:11,720 --> 00:04:18,720
to turn that into information that shows us where on the ground the concentration of methane

44
00:04:19,040 --> 00:04:23,480
is, which is what you're seeing right here, is multiple passes of us over the same facility

45
00:04:23,480 --> 00:04:28,960
seeing a leak. But the hardware is really only the beginning. You need to take that

46
00:04:28,960 --> 00:04:33,760
data and in order to do something within the real world, you need to get it off of an airplane

47
00:04:33,760 --> 00:04:38,880
into the cloud, you need to do a ton of crunching on it, you need to turn it into a GIS product

48
00:04:38,880 --> 00:04:42,440
so people know what they're looking at and where, and you need to deliver that to people

49
00:04:42,440 --> 00:04:46,240
who can actually fix the leaks. So I want to talk about that entire arc, how we get

50
00:04:46,240 --> 00:04:50,360
from sensor data to actually leak fixing. The first thing I want to talk about is what

51
00:04:50,360 --> 00:04:57,360
I call scalable bursty scientific computing. So how does it work IRL? We land a plane in

52
00:04:59,120 --> 00:05:03,240
Midland, Texas. First thing you have to do is figure out how to upload 100 gigabytes

53
00:05:03,240 --> 00:05:10,240
of data from Midland, Texas. Once that hits S3, it sends off an SQS message, which gets

54
00:05:11,880 --> 00:05:18,880
picked up by our cloud orchestration. It spins up a bunch of really big iron and it outputs

55
00:05:19,880 --> 00:05:26,880
that data to S3 where we pick it up in some apps that we developed for our analysts. Some

56
00:05:29,600 --> 00:05:35,280
of them build on QGIS, which is a really great open source GIS toolkit. Some of them build

57
00:05:35,280 --> 00:05:42,280
on web apps and a lot of that stuff gets pushed into PostGIS. So one of the things that makes

58
00:05:43,280 --> 00:05:48,440
this different from a typical consumer-facing application is that we do really big bursty

59
00:05:48,440 --> 00:05:53,240
computing and then we get rid of all the servers. So we treat our servers like cattle rather

60
00:05:53,240 --> 00:05:59,520
than pets. When you're done with them, just get rid of them. So we built an MVP because

61
00:05:59,520 --> 00:06:03,120
we figured the absolute critical thing that we needed to do was be able to run this end

62
00:06:03,120 --> 00:06:08,320
to end without any human intervention if we wanted to be able to scale up this process.

63
00:06:08,320 --> 00:06:12,280
So we built a job runner based on Ansible and I called it Ansabot and then I thought

64
00:06:12,280 --> 00:06:18,880
pants were funnier so I called it Pantabot. So what does it do well? Pantabot was our

65
00:06:18,880 --> 00:06:22,960
first attempt at building a job orchestrator and it did a bunch of things really well.

66
00:06:22,960 --> 00:06:27,360
It had a REST API, really simple front end that you could use so that human beings could

67
00:06:27,360 --> 00:06:34,000
run jobs. It accepted SQS incoming to start jobs. Two of the things that it did that were

68
00:06:34,000 --> 00:06:37,920
really super critical to allow me to sleep at night, one of them was it had a really

69
00:06:37,920 --> 00:06:43,560
nice integrated end to end test suite. So Pantabot could spin up a copy of itself and

70
00:06:43,560 --> 00:06:50,880
then run a branch of the pipeline including all the playbooks that specify the orchestration

71
00:06:50,880 --> 00:06:55,680
and all the software in a branch, push that data to a scratch data store and then shut

72
00:06:55,680 --> 00:06:58,840
itself down and check that everything was sane and that nothing crashed. And that just

73
00:06:58,840 --> 00:07:01,720
helped make sure that everybody's gazouts fit into everybody's gazins after every code

74
00:07:02,720 --> 00:07:08,440
change. The other thing that it did was it had E to E testing, sorry, it tracked when

75
00:07:08,440 --> 00:07:12,440
jobs failed and if the job failed abnormally it would wait 20 minutes and then it would

76
00:07:12,440 --> 00:07:17,360
kill the server which means that you're not just flushing AWS money down the drain. So

77
00:07:17,360 --> 00:07:22,240
we also, it spits out all of its outputs to Slack and we built this little bot called

78
00:07:22,240 --> 00:07:28,720
S3PO that translates your S3 URLs into actual web URLs which is super handy. What did it

79
00:07:28,720 --> 00:07:34,080
do badly? There's a couple things. Ansible is really good for infrastructure management,

80
00:07:34,080 --> 00:07:41,280
it is not fantastic for control flow and we were really abusing it basically. The other

81
00:07:41,280 --> 00:07:46,540
problem with it is that it had this top level view of the orchestration was really difficult

82
00:07:46,540 --> 00:07:52,120
to see all the jobs that were linked together in Pantabot. So I want to stop and talk for

83
00:07:52,120 --> 00:07:55,680
a little bit about what I call the software jank life cycle. So what happens is you build

84
00:07:55,680 --> 00:07:58,560
something and you send it out to your users and you're like this is great and they're

85
00:07:58,560 --> 00:08:02,840
like this sucks and they start filing bugs on you and that's when you approach that first

86
00:08:02,840 --> 00:08:07,400
peak there which is what we call max jank. In aerospace they call max Q the point where

87
00:08:07,400 --> 00:08:13,640
the rocket is most likely to explode. Max jank is the point where you and your software

88
00:08:13,640 --> 00:08:17,720
are most likely to implode because people are throwing bugs at you and you're trying

89
00:08:17,720 --> 00:08:21,240
to fix the engine while it's driving down the highway and you're getting really frustrated.

90
00:08:21,240 --> 00:08:25,240
Eventually hopefully you get past max jank, everything calms down and everybody thinks

91
00:08:25,280 --> 00:08:29,120
everything is hunky dory so they start asking for feature requests and as they start asking

92
00:08:29,120 --> 00:08:32,160
for feature requests and you start hacking them in you start realizing that you have

93
00:08:32,160 --> 00:08:35,880
built the entirely wrong thing. You didn't understand the problem, you built a good first

94
00:08:35,880 --> 00:08:42,200
attempt and at some point what I call the jank Lagrange point, L jank, you reach a point

95
00:08:42,200 --> 00:08:48,000
where the amount of mental and emotional effort to roll back all the technical debt that you

96
00:08:48,000 --> 00:08:51,760
have just written yourself into is equal to the effort of building a new thing from the

97
00:08:51,760 --> 00:08:57,640
ground up. Usually you wait a couple months after that happens, you ignore the feature

98
00:08:57,640 --> 00:09:03,960
requests for a while and then you build something new. So after we reach max jank and thereafter

99
00:09:03,960 --> 00:09:09,160
we built something called rub, we called it rub because all data pipelines are rub Goldberg

100
00:09:09,160 --> 00:09:16,160
machines, ours included. Rub fixes a lot of problems with panzobot. It does use ansible

101
00:09:16,160 --> 00:09:20,480
at the very base level but basically it's using air flow and the operators are written

102
00:09:20,480 --> 00:09:26,400
in python. The operators are unit testable, we retain all the end to end testing, we get

103
00:09:26,400 --> 00:09:31,440
all the benefits of air flow which are this really nice job orchestration, top view, rerunning

104
00:09:31,440 --> 00:09:35,560
jobs becomes really easy, rerunning parts of jobs becomes really easy. We also have

105
00:09:35,560 --> 00:09:40,040
a CLI for searching through the data. One of the problems with panzobot was just the

106
00:09:40,040 --> 00:09:44,800
log data was spread all over the place with rub, you can just basically pull up a web

107
00:09:44,800 --> 00:09:50,800
page that has links to all of the logs, all of the EC2 instances. What's really great

108
00:09:50,800 --> 00:09:55,560
about this is it reduces the burden on the pipeline support engineer which means that

109
00:09:55,560 --> 00:10:00,640
if you wrote the pipeline it is now possible to give somebody else the pager and you don't

110
00:10:00,640 --> 00:10:04,720
have to spend your entire life building it and maintaining it. So that's really, really

111
00:10:04,720 --> 00:10:10,520
nice is making it easy for other people to fix your mistakes. So the second set of problems

112
00:10:10,520 --> 00:10:14,720
that we had to do is figure out where are we going to figure out what's on the ground,

113
00:10:14,720 --> 00:10:18,520
where we were on the ground and how we're going to create GIS product out of that. So

114
00:10:18,520 --> 00:10:25,520
I told you we have a six axis GPS, those six axes are the three rotational axes, the roll,

115
00:10:25,520 --> 00:10:30,000
pitch and yaw of the airplane and combined with those we know the latitude, longitude

116
00:10:30,000 --> 00:10:36,800
and altitude of the airplane and we can figure out where the sensor was pointing. So the

117
00:10:36,800 --> 00:10:41,040
sensor itself is a line sensor so if you see the plane doing what we call the lawnmower

118
00:10:41,040 --> 00:10:45,760
here it goes back and forth and back and forth and back and forth and it sweeps out a polygon

119
00:10:45,760 --> 00:10:49,960
each time it goes one direction and then it sweeps out another polygon when it goes back

120
00:10:49,960 --> 00:10:52,960
the other way. So what we want to be able to do is we want to be able to separate out

121
00:10:52,960 --> 00:10:58,840
those polygons into individual pieces that we're going to crunch data over. We want to

122
00:10:58,840 --> 00:11:02,320
make sure that if we're covering the same point twice that we're not averaging together

123
00:11:02,320 --> 00:11:06,660
that we're creating separate pieces of data so that we can view that place a couple times

124
00:11:06,660 --> 00:11:11,880
to verify our observations and also the turns produce really bad data because the airplane

125
00:11:11,880 --> 00:11:15,660
is banking and the sensor is basically pointing off towards the horizon and you don't want

126
00:11:15,660 --> 00:11:23,860
to use any of that data. So this is a classic classification problem. So we threw it into

127
00:11:23,860 --> 00:11:30,260
scikit-learn and we chose the k-means clustering algorithm, basically put a bunch of variables

128
00:11:30,260 --> 00:11:35,420
in there and we figure out can we cluster these into different groups that represent

129
00:11:35,420 --> 00:11:40,500
passes and turns, different sets of variable groupings. One of the really things I love

130
00:11:40,500 --> 00:11:44,180
about scikit-learn, especially if you're a casual ML user like me, is you just tattoo

131
00:11:44,180 --> 00:11:48,460
end samples, end features on your arm and then you just iterate through algorithms until

132
00:11:48,460 --> 00:11:54,460
you find something that works. But it turns out if you're going to be doing simple ML

133
00:11:54,460 --> 00:11:58,460
with simple ML algorithms, it pays to put a lot of thought into what your input variables

134
00:11:58,500 --> 00:12:07,500
are. And at this point it actually was really valuable that I had some experience hang gliding

135
00:12:07,980 --> 00:12:14,020
oddly enough and I had a pretty good gut instinct about what a banking turn looks like. So the

136
00:12:14,020 --> 00:12:19,500
variables I chose included like the time derivative of the yaw, the time derivative of the speed,

137
00:12:19,500 --> 00:12:24,100
the roll of the airplane and the pitch of the airplane. And we threw those in there,

138
00:12:24,100 --> 00:12:27,780
we mixed it up, I did a little bit of tweaking and it bizarrely came out with like a really

139
00:12:27,780 --> 00:12:33,820
good result the first time we started running it in production. About 90% of the time you

140
00:12:33,820 --> 00:12:38,540
get really good separation of that pass into polygons. You can see at the bottom there

141
00:12:38,540 --> 00:12:43,820
some of these are split up. We do that to make the numerical averaging and the downstream

142
00:12:43,820 --> 00:12:49,100
processes easier. But basically 90% of the time it works great. We dump all the results

143
00:12:49,100 --> 00:12:53,780
into a single page leaflet app that gets stored on S3 so the pipeline support engineer can

144
00:12:53,780 --> 00:12:57,560
pull it down and just do a visual check that makes sure that the data process correctly

145
00:12:57,560 --> 00:13:02,940
or in some cases didn't. We occasionally see catastrophic failure with this algorithm.

146
00:13:02,940 --> 00:13:09,460
The reason you see catastrophic failure is that occasionally due to outlier data the

147
00:13:09,460 --> 00:13:13,860
passes and the turns get mixed up. You remember I said the sensor is pointed off towards the

148
00:13:13,860 --> 00:13:18,380
horizon on those turns. That's why you're getting this big blown out thing. But you

149
00:13:18,380 --> 00:13:21,700
pull it up, you open it in Jupyter Notebook, you trim out the little pieces of data that

150
00:13:21,740 --> 00:13:24,900
are making the algorithm go crazy and you rerun it and it comes out well. And at the

151
00:13:24,900 --> 00:13:29,140
end of about a year of doing this you have a really nicely curated data set that you

152
00:13:29,140 --> 00:13:33,780
can use for training a supervised algorithm. So at this point neural net works all the

153
00:13:33,780 --> 00:13:40,060
way down. We just picked up the side kit multilayer perceptron model. You put every single variable

154
00:13:40,060 --> 00:13:43,740
you have in it. The main trick is to make sure that you normalize and whiten your variables

155
00:13:43,740 --> 00:13:47,980
correctly. But after you've done that, neural nets are great. They will choose whatever

156
00:13:48,060 --> 00:13:54,100
algorithm they can simulate in order to make your data look like the training set. And

157
00:13:54,100 --> 00:13:56,940
it worked really well. This is now set it and forget it. We never have to touch this

158
00:13:56,940 --> 00:14:02,580
thing. It's really good. It is a really nice model for people who do casual machine learning

159
00:14:02,580 --> 00:14:08,620
like I do. You can start with really sloppy data. You do about a 90% cut on it in order

160
00:14:08,620 --> 00:14:15,020
to get good labeling. You put about 10% human effort into it, either your own or somebody

161
00:14:15,020 --> 00:14:21,140
else's. And then you push it into your supervised algorithm and you get really nice results

162
00:14:21,140 --> 00:14:24,860
out of the end. So that was the second challenge. One of the second challenges that we had to

163
00:14:24,860 --> 00:14:29,620
deal with was ground placement of the sensor data and how we separate that out. At this

164
00:14:29,620 --> 00:14:32,860
point the data actually has to make it into somebody's hands. So we have to return to

165
00:14:32,860 --> 00:14:37,780
the slightly less sexy topic of report generation. So when I started doing this I wanted to build

166
00:14:37,780 --> 00:14:40,860
a whiz bang data portal and people were going to be able to log in and they're going to

167
00:14:40,860 --> 00:14:44,620
see their data and they're going to zoom around and climb on the ceiling. And then I remembered

168
00:14:44,620 --> 00:14:49,540
that people in pickup trucks have to drive out and actually figure out where the leaks

169
00:14:49,540 --> 00:14:58,220
are and fix them. And these are those guys. So they do not want a data portal. They want

170
00:14:58,220 --> 00:15:04,140
a PDF with a list of lats and longs and pictures of the leaks and where to go to fix them.

171
00:15:04,140 --> 00:15:09,940
So naturally since this was absolutely mission critical for our company to get right, I spent

172
00:15:09,940 --> 00:15:15,300
about three weeks hacking together something jank-tastic before our first report was due.

173
00:15:15,300 --> 00:15:19,020
I wrote some SQL queries against our PostGIS database. One of the main problems is that

174
00:15:19,020 --> 00:15:23,700
nothing commercial, nothing available in open source commercially on the market is GIS centric

175
00:15:23,700 --> 00:15:27,940
and all of our data is GIS centric. So we rolled something by hand. It runs a bunch

176
00:15:27,940 --> 00:15:33,220
of queries. It has a map generator. It dumps a bunch of stuff into an Excel spreadsheet.

177
00:15:33,220 --> 00:15:36,540
Our project manager had his own mail merge thing that he was going to use to get those

178
00:15:36,540 --> 00:15:42,060
into Google Docs. And immediately, of course, after the first report goes out, we say, okay,

179
00:15:42,060 --> 00:15:44,500
we want to change this, we want to change that, we want to change that. And it just

180
00:15:44,500 --> 00:15:49,620
becomes a recursive dumpster fire. Like the thing was a total mess. And every Tuesday

181
00:15:49,620 --> 00:15:54,100
was an epic battle of passive aggressiveness between me and the project manager about what

182
00:15:54,100 --> 00:15:57,620
are we going to put in features, this is the data is wrong, I don't know what's going on.

183
00:15:57,620 --> 00:16:01,340
We got to get it out the door. So the first thing that we had to do was actually settle

184
00:16:01,340 --> 00:16:06,460
what our business logic was now that sort of all the dust had settled. Very quick moment.

185
00:16:06,460 --> 00:16:11,340
I'm going to take a detour to tell you briefly about a I got sick of writing flowcharts,

186
00:16:11,340 --> 00:16:17,700
so I wrote a Python module for making flowcharts in Jupiter. It's called Phlogiston. It's a

187
00:16:17,700 --> 00:16:24,460
really nice wrap around graph. It's available where you buy fine Python modules everywhere.

188
00:16:24,460 --> 00:16:27,300
And we decided to go back to the beginning. And I started with a very simple concept for

189
00:16:27,300 --> 00:16:31,700
our report generator that was going to be robust and scalable and reusable. And it was

190
00:16:31,700 --> 00:16:35,460
called the abstract data provider. And the abstract data provider uses SQL alchemy. And

191
00:16:35,460 --> 00:16:40,260
it does two things, query and munch. Query basically when you override this, you give

192
00:16:40,260 --> 00:16:45,900
it a query method. And that query method gets run and gets passed into the munch. And the

193
00:16:45,900 --> 00:16:50,820
munch munges that data into whatever form you want for the output for your report. The

194
00:16:50,820 --> 00:16:56,500
default munch here is it basically just turns it into a dict of lists of tuples where each

195
00:16:56,500 --> 00:17:02,940
tuple is a row. And you can just push those into your template. So the overall flow looks

196
00:17:02,940 --> 00:17:09,820
like this. PostGIS flows into SQL alchemy. SQL alchemy creates a dict. Some of that gets

197
00:17:09,820 --> 00:17:14,500
stuffed back into Postgres so that we know what we reported to people so we don't re-report

198
00:17:14,500 --> 00:17:17,300
the same things. You'll find it shocking, but sometimes people don't fix things right

199
00:17:17,300 --> 00:17:22,540
after we tell them about them. That gets pushed into Jinja. Jinja is a really nice templating

200
00:17:22,540 --> 00:17:30,260
library. It consumes HTML. It pushes the HTML template templated with the data out to doc

201
00:17:30,340 --> 00:17:36,340
Raptor and doc Raptor produces a PDF for us. Importantly, doc Raptor supports pagination

202
00:17:36,340 --> 00:17:43,340
in HTML documents which a lot of PDF converters don't. The very simplest version of this is

203
00:17:44,020 --> 00:17:48,660
called the default data provider. And in it you just stuff a SQL query into the metadata

204
00:17:48,660 --> 00:17:52,220
which is a comment in the beginning of the HTML file along with the input parameters

205
00:17:52,220 --> 00:17:57,900
and some defaults. And then you get magically through the magic of machines you get templated

206
00:17:57,900 --> 00:18:04,700
stuff out. But the nice thing that we have done is instead we built something that consumes

207
00:18:04,700 --> 00:18:10,660
SQL alchemy query objects that we build with the ORM. And these act like database views

208
00:18:10,660 --> 00:18:15,860
except they are much less difficult to maintain than database views. And they are composable.

209
00:18:15,860 --> 00:18:20,300
Which means that if I have a query that tells me, say, where all the leaks are, it's unit

210
00:18:20,300 --> 00:18:25,580
tested, I know it produces correct data, and I can use it both to create a list of leaks

211
00:18:25,620 --> 00:18:31,860
and a map of leaks by passing it into different data providers. And this one in particular,

212
00:18:31,860 --> 00:18:38,140
the munch step, what it does is it uses, it creates an image of a map and then stuffs

213
00:18:38,140 --> 00:18:42,980
that into the HTML as a basic for encoded data URL. It's just an embedded image of a

214
00:18:42,980 --> 00:18:46,480
map. So you take the same data and you just push it into different data providers to get

215
00:18:46,480 --> 00:18:49,980
different outputs. It means that things are always self-consistent. So where does that

216
00:18:50,980 --> 00:18:56,980
leave us up until now? Our first major survey took three months. And if you think about

217
00:18:56,980 --> 00:19:03,980
the amount of CO2 that a single person is responsible for over the course of a year,

218
00:19:04,820 --> 00:19:11,300
we mitigated about 2,000 person years of CO2 equivalents in methane. And we are now doing

219
00:19:11,300 --> 00:19:16,300
a survey 10 times that size over the New Mexico Permian Basin. So we're hoping to do a lot

220
00:19:16,300 --> 00:19:23,300
more of that. That's it, and I can take questions.

221
00:19:37,780 --> 00:19:41,620
If there are any questions, you can come to this mic. If you have secret questions, I'll

222
00:19:41,620 --> 00:19:48,620
be available afterwards as well. Thank you. I'm curious when you know where the leaks

223
00:19:51,180 --> 00:19:56,580
are, are they easy to fix? It depends on the reason for them. Some of them are what they

224
00:19:56,580 --> 00:20:00,620
call fugitive emissions, which are actual leaks where somebody, for instance, left a

225
00:20:00,620 --> 00:20:06,020
hatch open or there was a seal broken. Some of them are, they tell us, yeah, we know about

226
00:20:06,820 --> 00:20:13,820
those. Those are due to capacity issues. It gets complicated real fast.

227
00:20:14,300 --> 00:20:21,300
Hi. I'm curious, have you ever flown over any massive cattle farms and detected a bunch

228
00:20:22,860 --> 00:20:23,700
of methane?

229
00:20:23,700 --> 00:20:28,860
You may be aware that in California, the largest source of methane emissions is agricultural.

230
00:20:28,860 --> 00:20:35,860
People think it's cow farts. It is actually cow burps. We have seen agricultural farts

231
00:20:36,420 --> 00:20:39,060
in the past. We've seen it in the agricultural methane, but it's not really a focus for us

232
00:20:39,060 --> 00:20:41,180
right now.

233
00:20:41,180 --> 00:20:46,460
So my understanding is that there's a substantial amount of methane within ice, and as that

234
00:20:46,460 --> 00:20:52,060
melts, that's releasing it as well. I'm curious if you have any plans to survey in Arctic

235
00:20:52,060 --> 00:20:53,960
areas.

236
00:20:53,960 --> 00:21:00,340
So the issue of methane release from the permafrost is incredibly frightening, and I would encourage

237
00:21:00,340 --> 00:21:03,380
you to look at it if you don't know about it. It's going to create a positive feedback

238
00:21:03,420 --> 00:21:10,420
loop that will kill us all. Sorry, I can't make jokes about everything, seriously. But

239
00:21:10,740 --> 00:21:15,580
no, what we tend to be looking for is there is methane existing in the atmosphere at a

240
00:21:15,580 --> 00:21:19,420
low concentration, so we're looking at elevated concentrations of methane. We have to subtract

241
00:21:19,420 --> 00:21:20,780
off the background.

242
00:21:20,780 --> 00:21:25,620
So for things where basically an entire continent is being covered in excess levels of methane,

243
00:21:25,620 --> 00:21:29,580
you need to do that from a satellite, which eventually someday we will launch, but right

244
00:21:29,580 --> 00:21:35,180
now we are doing ground-based surveys, I mean, plane-based surveys.

245
00:21:35,180 --> 00:21:39,660
Is any of this data being fed back into the regulatory environment?

246
00:21:39,660 --> 00:21:44,420
We don't really work directly with a lot of regulators. We have in non-oil producing states

247
00:21:44,420 --> 00:21:48,160
for people who are looking at different kinds of industries. There's a lot of tension in

248
00:21:48,160 --> 00:21:54,380
our work between being able to provide services to oil industries and being able to provide

249
00:21:55,100 --> 00:21:59,440
security for their data, and we find that the most benefit that we can provide is by

250
00:21:59,440 --> 00:22:03,140
telling people where to go fix their leaks.

251
00:22:03,140 --> 00:22:08,820
Have you considered using drones instead of planes for collecting the data?

252
00:22:08,820 --> 00:22:14,020
Classic question. This is 2019. Everybody wants to put it on a drone. We can cover 50

253
00:22:14,020 --> 00:22:21,020
square miles a day with a Cessna. Civilian drones are limited to line of sight and don't

254
00:22:21,100 --> 00:22:28,100
go up to 3,000 feet AGL. Someday they will, and maybe we'll put them on drones.

255
00:22:29,540 --> 00:22:34,980
What information do you give to people who don't quite believe in global warming? To

256
00:22:34,980 --> 00:22:36,920
unanchor that bad information.

257
00:22:36,920 --> 00:22:40,740
I don't talk to those people, honestly. I don't have people coming up to me and being

258
00:22:40,740 --> 00:22:43,700
like, I want to argue with you about global warming, and I wouldn't talk to them if they

259
00:22:43,700 --> 00:22:50,700
did. It's not my job.

260
00:22:51,020 --> 00:22:56,860
Chris, thank you for your work. My question is, related to the drones, have you considered

261
00:22:56,860 --> 00:23:02,460
crowdsourcing maybe to private pilots? They could receive one of these sensor units and

262
00:23:02,460 --> 00:23:06,180
whenever they're off flying, can set it to record?

263
00:23:06,180 --> 00:23:11,260
It's an interesting idea. We actually don't own our own airplanes. We work with a company

264
00:23:11,260 --> 00:23:18,260
that flies for us, although we're tightly integrated with them, obviously. We have a

265
00:23:19,060 --> 00:23:22,500
relatively small number of sensors, and we don't sell the sensors. We are a data sales

266
00:23:22,500 --> 00:23:26,340
company, which is a very different model. There are companies that have not the same

267
00:23:26,340 --> 00:23:30,540
but similar types of services, and they sell hardware to people. Operating this kind of

268
00:23:30,540 --> 00:23:33,940
hardware on your own is just not something you want to do. You really want to have professionals

269
00:23:33,940 --> 00:23:34,540
doing it.

270
00:23:34,540 --> 00:23:41,540
We don't have flight engineers in Midland anymore. We have basically locals there who

271
00:23:43,340 --> 00:23:47,440
just run the thing, point and click off a laptop, but you can't really do it while you're

272
00:23:47,440 --> 00:23:48,440
flying a plane.

273
00:23:48,440 --> 00:23:54,880
Hey, how's it going? Thanks for the talk. I'm curious to hear if you have any ideas

274
00:23:54,880 --> 00:24:01,880
for how we can help you or how I as an individual contributor on a Saturday can help with this.

275
00:24:03,880 --> 00:24:09,680
I have not thought about that. I will say this. One of the things, I used to be a real

276
00:24:09,680 --> 00:24:16,680
language bigot, and I grew up as an engineer writing Java, and my Python is super OOPy,

277
00:24:17,920 --> 00:24:23,440
and I type annotate everything. The thing that I have come to love about Python is not

278
00:24:23,440 --> 00:24:28,200
the mechanics of the language itself, but the people who work on it. SQLAlchemy is like

279
00:24:28,200 --> 00:24:32,900
my sixth team member. If anybody knows if Michael Bayer is here, please come find me

280
00:24:32,900 --> 00:24:39,600
and introduce me so I can buy him like six drinks. Building software that makes my life

281
00:24:39,600 --> 00:24:46,600
easier makes this possible, so thank you to all of you for doing that. Honest to God.

282
00:24:47,440 --> 00:24:54,440
Being that it's your job to know about emissions and what lessening them will do for us in

283
00:24:59,720 --> 00:25:06,720
a positive way, but also knowing how bad it's gotten, how do you maintain the positivity

284
00:25:06,920 --> 00:25:11,600
to continue this work? How do you take care of your mental health as a person who has

285
00:25:11,600 --> 00:25:16,000
to deal with greenhouse gas on a daily basis, thinking about it?

286
00:25:16,000 --> 00:25:19,160
That is a really good question. It does keep me up at night sometimes. I would say there's

287
00:25:19,160 --> 00:25:25,280
a couple answers to that. First is I make a lot of jokes. Second is we have not crossed

288
00:25:25,280 --> 00:25:30,620
the Rubicon yet. It is still possible to turn things back. Second thing that you can do

289
00:25:30,620 --> 00:25:34,420
on your Saturdays is if you don't live in California or if you live in the less liberal

290
00:25:34,420 --> 00:25:40,120
parts of California, call your senator. Call your congressman. Tell them that you want

291
00:25:40,120 --> 00:25:44,760
to see some sort of, I'm not going to advocate specifically for the Green New Deal because

292
00:25:44,760 --> 00:25:48,580
I haven't read enough of it, but you want to see climate change action taken. You want

293
00:25:48,580 --> 00:25:55,580
to see it now. You want to see it done with our tax dollars because it's important. We

294
00:25:56,520 --> 00:26:01,840
haven't really crossed the Rubicon. Unfortunately, the third thing is that we post a lot of stuff

295
00:26:01,840 --> 00:26:07,600
on our Slack at work. I don't read all of it. It's difficult. I got a hard enough time.

296
00:26:07,600 --> 00:26:13,840
I got two twin toddlers and I got to make this stuff work. I can't just bring myself

297
00:26:13,880 --> 00:26:17,840
down with that all the time. I know the outline is the problem and I'm probably not the best

298
00:26:17,840 --> 00:26:22,040
person to tell you what the latest and greatest is for that reason.

299
00:26:22,040 --> 00:26:27,440
Is that like a line that you have to draw for yourself outside of work that you don't

300
00:26:27,440 --> 00:26:28,800
read about climate change?

301
00:26:28,800 --> 00:26:34,280
No, I do read about climate change outside of work. I just, I don't immerse myself in

302
00:26:34,280 --> 00:26:41,280
it. I make art. I raise my kids. I do my job nine to five. I'm hoping next year to come

303
00:26:41,280 --> 00:26:48,280
here and talk about my art a bit more because there's Python in art too.

304
00:26:57,720 --> 00:27:02,840
So my question is about the effort you went through to clean up the data to adjust for

305
00:27:02,840 --> 00:27:07,240
like the pitch and roll of the airplane. Did you consider handling that through hardware

306
00:27:07,240 --> 00:27:14,240
by having something to keep all the instruments level and flat when the airplane is turning?

307
00:27:14,240 --> 00:27:19,680
No. The thing is clamped onto the airplane and the mechanism by which it is clamped onto

308
00:27:19,680 --> 00:27:26,680
the airplane is regulated in most ways by the FAA. And sort of hardware feedback. I

309
00:27:28,720 --> 00:27:34,400
spent a long time as a physicist actually doing position driven, position control, feedback

310
00:27:34,400 --> 00:27:37,920
driven position control. It's not something we want to do on an airplane in real time.

311
00:27:37,920 --> 00:27:44,920
It's much better to post process it out if you can. Thanks.

312
00:27:46,680 --> 00:27:52,160
Somewhat obnoxious version of the same question. Did you consider asking the pilot to tell

313
00:27:52,160 --> 00:27:53,800
you when they were turning?

314
00:27:53,800 --> 00:27:59,120
Yeah, but then you have to have a human being there pushing a button every time.

315
00:27:59,120 --> 00:28:02,040
As they're turning the aircraft.

316
00:28:02,040 --> 00:28:09,040
I mean we would have to record that with the data and then use it in the processing step.

317
00:28:09,160 --> 00:28:12,880
Every input has to be recorded and filtered through the pipeline. And if the pilot does

318
00:28:12,880 --> 00:28:19,880
it wrong then you get screwed up and I trust the pilot a lot less than I trust Scikit-Learn.

319
00:28:20,520 --> 00:28:25,220
You're working with oil and gas companies. What's their attitude towards climate change?

320
00:28:25,220 --> 00:28:31,360
It varies greatly. There is something right now as of about a year ago called the OGCI,

321
00:28:31,360 --> 00:28:35,600
the Oil and Glass Climate Initiative, believe it or not. All the oil majors are in it right

322
00:28:35,600 --> 00:28:41,440
now and one of the reasons that they are looking at methane is because methane is a win-win-win.

323
00:28:41,440 --> 00:28:47,560
It is a product for them. It is really bad for global warming. It is bad for safety.

324
00:28:47,560 --> 00:28:54,040
It is bad for just about everything. And they can work on methane without having to make

325
00:28:54,040 --> 00:28:59,600
any compromises on CO2. And the question about how we regulate CO2 emissions is again one

326
00:28:59,600 --> 00:29:03,160
that I encourage you to call your senator and your congressman. But in terms of methane

327
00:29:03,160 --> 00:29:08,520
there is a lot of interest in movement. Since I have just a minute left, there was regulation

328
00:29:08,520 --> 00:29:12,560
under the Obama administration to regulate methane emissions. The Trump administration

329
00:29:12,560 --> 00:29:16,720
rolled that back. But everybody sees the writing on the wall and they know methane regulation

330
00:29:16,720 --> 00:29:21,480
is coming. So we are working to make sure that this technology is going to be palatable

331
00:29:21,480 --> 00:29:27,800
to regulators by creating equivalency standards that let people understand mathematically

332
00:29:27,800 --> 00:29:33,160
why this is a good thing to do.

333
00:29:33,160 --> 00:29:38,440
So obviously the company's business depends a lot on the cost of natural gas. And I am

334
00:29:38,440 --> 00:29:44,680
curious outside the US, do you work with other oil producers outside the US where the natural

335
00:29:44,680 --> 00:29:50,840
gas price might be higher and make more incentive for your company to provide your service?

336
00:29:50,840 --> 00:29:55,480
I don't know that much about natural gas economics. Oil is one of the most fungible things there

337
00:29:55,480 --> 00:30:01,560
is out there. Natural gas is pretty plentiful because of fracking. We have worked in Canada.

338
00:30:01,560 --> 00:30:06,320
There is a lot of weird economics of natural gas like how much equipment you have to have

339
00:30:06,320 --> 00:30:11,520
on the well pad in order to ship it off, in order to make it profitable. In some cases

340
00:30:11,520 --> 00:30:15,160
it gets cheap enough like in North Dakota where people just flare it off. It is better

341
00:30:15,160 --> 00:30:19,240
to flare it off than it is to let it escape into the atmosphere. That video you saw was

342
00:30:19,240 --> 00:30:24,320
guys relighting a flare stack that went out. And that shouldn't happen but it does and

343
00:30:24,320 --> 00:30:29,040
we detect those. So the answer is I don't really know how the economics of natural gas

344
00:30:29,040 --> 00:30:34,600
in other countries work. But we have certainly been invited to fly in other countries but

345
00:30:34,600 --> 00:30:40,000
there is a ton of work to do in the New Mexico and Texas Permian Basin right now.

346
00:30:40,000 --> 00:30:45,000
I know we are running out of time so I am going to try. Sorry for the hard question.

347
00:30:45,000 --> 00:30:53,120
But as I am sure you know the UN climate report said that we have something like less than

348
00:30:53,400 --> 00:31:00,400
12 years now before climate change becomes irreversible. So we are in basically the 12th

349
00:31:00,400 --> 00:31:09,840
hour for Earth as we know it. So just wondering what advice would you give us as programmers

350
00:31:09,840 --> 00:31:14,360
and data scientists and computer scientists? What types of things do you think we should

351
00:31:14,360 --> 00:31:18,600
be working on? I really wish I had a good answer for you.

352
00:31:18,800 --> 00:31:25,800
It is a difficult problem. I live and work in San Francisco in the Silicon Valley and

353
00:31:25,800 --> 00:31:29,880
you people who are from there and people who have watched the TV show probably are aware

354
00:31:29,880 --> 00:31:34,320
that everybody thinks that their work is changing the world and that software has actually fairly

355
00:31:34,320 --> 00:31:38,960
limited capabilities of making an impact on fundamental physics. I wish there was code

356
00:31:38,960 --> 00:31:44,240
we could write to fix this. We need to make do with what we can. You need to call your

357
00:31:44,240 --> 00:31:51,240
senator and your congressperson. Thank you very much for attending. The next

358
00:31:51,680 --> 00:31:53,480
speaker starts in this room in 10 minutes.

