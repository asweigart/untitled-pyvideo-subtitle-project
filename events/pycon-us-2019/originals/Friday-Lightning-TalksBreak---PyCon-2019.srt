1
00:00:00,000 --> 00:00:01,760
The things that you can do at PyCon are great,

2
00:00:01,760 --> 00:00:04,160
but one of my particular favorites is the lightning talk.

3
00:00:04,160 --> 00:00:05,860
It's not started yet, but it's starting soon.

4
00:00:05,860 --> 00:00:07,800
Please come and sit closer to the front.

5
00:00:07,800 --> 00:00:08,920
The closer to the front you sit,

6
00:00:08,920 --> 00:00:10,040
the more the speakers can see you,

7
00:00:10,040 --> 00:00:11,200
the more they think you're engaged,

8
00:00:11,200 --> 00:00:12,320
the more they think you're engaged,

9
00:00:12,320 --> 00:00:13,560
the better their talks are.

10
00:00:13,560 --> 00:00:16,880
It's like a virtuous circle of lightning talk wonderfulness.

11
00:00:16,880 --> 00:00:17,960
So come to the front.

12
00:00:17,960 --> 00:00:19,040
If you're sitting way at the back,

13
00:00:19,040 --> 00:00:20,100
consider coming forward.

14
00:00:20,100 --> 00:00:23,040
Did you know that every single row forwards you move

15
00:00:23,040 --> 00:00:25,400
guarantees an extra 10% of enjoyment,

16
00:00:25,400 --> 00:00:27,000
and that is a mathematical fact?

17
00:00:30,000 --> 00:00:57,200
Welcome, everyone.

18
00:00:57,200 --> 00:00:58,160
Welcome to lightning talks.

19
00:00:58,160 --> 00:00:59,120
Come and sit near the front.

20
00:00:59,120 --> 00:01:00,760
Near the front is where the speakers can see you.

21
00:01:00,760 --> 00:01:01,600
It makes them happy.

22
00:01:01,600 --> 00:01:02,520
It makes their talks better.

23
00:01:02,520 --> 00:01:03,480
That makes you happy.

24
00:01:16,720 --> 00:01:19,000
We're going to start shortly so our first two speakers can

25
00:01:19,000 --> 00:01:20,260
come and get set up on stage.

26
00:01:27,560 --> 00:01:28,000
Great.

27
00:01:28,000 --> 00:01:28,840
Welcome, one and all.

28
00:01:28,840 --> 00:01:30,640
Welcome, one and all, to the lightning talks.

29
00:01:30,640 --> 00:01:34,760
In some people's opinion, the best session of all, PyCon.

30
00:01:34,760 --> 00:01:36,380
But actually, all the sessions are good.

31
00:01:36,380 --> 00:01:37,400
But this one's particularly good.

32
00:01:37,400 --> 00:01:37,900
Oh, yeah.

33
00:01:52,240 --> 00:01:54,000
I'll give a little more time for a few more stragglers

34
00:01:54,000 --> 00:01:54,400
to come in.

35
00:01:54,400 --> 00:01:56,400
If you've just come in, come and sit near the front.

36
00:01:56,400 --> 00:01:58,440
If you came in ages ago and sat near the back,

37
00:01:58,440 --> 00:02:00,440
why not come forwards and sit near the front?

38
00:02:00,440 --> 00:02:03,440
You can stare at the speakers into the whites of their eye

39
00:02:03,440 --> 00:02:06,520
and get more out of the session rather than hiding at the back

40
00:02:06,520 --> 00:02:08,160
and going on slack or something.

41
00:02:28,440 --> 00:02:28,940
All right.

42
00:02:52,440 --> 00:02:53,160
All right, everyone.

43
00:02:53,160 --> 00:02:55,580
I think we should make a start without too much further adieu.

44
00:02:55,580 --> 00:02:56,520
My name is Harry.

45
00:02:56,520 --> 00:02:59,840
I am here to be your host for the lightning talks.

46
00:02:59,840 --> 00:03:02,160
I hope you've all been enjoying PyCon so far.

47
00:03:02,160 --> 00:03:02,760
I certainly have.

48
00:03:02,760 --> 00:03:03,260
How about you?

49
00:03:03,260 --> 00:03:03,760
Yeah!

50
00:03:03,760 --> 00:03:04,260
Woo!

51
00:03:04,260 --> 00:03:04,760
Woo!

52
00:03:04,760 --> 00:03:05,260
Woo!

53
00:03:05,260 --> 00:03:05,760
Woo!

54
00:03:05,760 --> 00:03:06,260
Woo!

55
00:03:06,260 --> 00:03:06,760
Woo!

56
00:03:06,760 --> 00:03:07,260
Woo!

57
00:03:07,260 --> 00:03:07,760
Woo!

58
00:03:07,760 --> 00:03:08,260
Woo!

59
00:03:08,260 --> 00:03:08,760
Woo!

60
00:03:08,760 --> 00:03:09,260
Woo!

61
00:03:09,260 --> 00:03:09,760
All right.

62
00:03:09,760 --> 00:03:11,560
For anyone that's new to lightning talks,

63
00:03:11,560 --> 00:03:13,720
the lightning talk format is you have five minutes.

64
00:03:13,720 --> 00:03:15,200
That's a maximum of five minutes,

65
00:03:15,200 --> 00:03:18,000
although you can take less, to give a talk about pretty much

66
00:03:18,000 --> 00:03:19,300
any topic you like.

67
00:03:19,300 --> 00:03:21,720
We have one session of lightning talks now.

68
00:03:21,720 --> 00:03:23,820
You can also sign up for future sessions.

69
00:03:23,820 --> 00:03:25,480
There is a session tomorrow morning,

70
00:03:25,480 --> 00:03:27,480
which I believe there was a few slots left for.

71
00:03:27,480 --> 00:03:29,680
The sign up sheets are by the registration.

72
00:03:29,680 --> 00:03:32,040
You just put your name up, and we make a selection

73
00:03:32,040 --> 00:03:33,680
and send you an email shortly afterwards

74
00:03:33,680 --> 00:03:35,560
to tell you if you're up for the next slot.

75
00:03:35,560 --> 00:03:36,640
There's a session tomorrow morning.

76
00:03:36,640 --> 00:03:38,280
There's a session tomorrow evening,

77
00:03:38,280 --> 00:03:39,600
sort of about this time tomorrow.

78
00:03:39,600 --> 00:03:42,240
And there's a final session on Sunday morning.

79
00:03:42,240 --> 00:03:43,160
They're great fun.

80
00:03:43,160 --> 00:03:44,400
You never know what to expect.

81
00:03:44,400 --> 00:03:45,860
Perhaps one talk is boring to you,

82
00:03:45,860 --> 00:03:47,560
but it's interesting to the person next to you.

83
00:03:47,560 --> 00:03:49,220
And then the next talk is boring to them,

84
00:03:49,220 --> 00:03:50,680
but interesting to you.

85
00:03:50,680 --> 00:03:51,920
They're just my favorite.

86
00:03:51,920 --> 00:03:54,320
My job here is to fill some dead air in between the speakers

87
00:03:54,320 --> 00:03:56,200
and tell bad jokes so that they sound better.

88
00:03:56,200 --> 00:03:57,960
Sorry about that.

89
00:03:57,960 --> 00:04:00,440
And there's one little bit of lightning talks

90
00:04:00,440 --> 00:04:03,800
kind of administration, which is I'd like you all at this point

91
00:04:03,800 --> 00:04:06,120
to just practice a thing with me, which is clap

92
00:04:06,120 --> 00:04:08,240
with your fingers, which you do like this.

93
00:04:08,240 --> 00:04:11,280
Could you do that for me?

94
00:04:11,280 --> 00:04:12,960
Or everyone?

95
00:04:12,960 --> 00:04:14,920
Like as loud as you can with your little fingers.

96
00:04:14,920 --> 00:04:15,880
Here we go.

97
00:04:15,880 --> 00:04:17,880
Can you hear that little murmur around the room?

98
00:04:17,880 --> 00:04:21,120
So when I basically give you a signal like this with one hand,

99
00:04:21,120 --> 00:04:22,680
you do that clapping like that.

100
00:04:22,680 --> 00:04:24,040
And that's going to be the signal to the speaker

101
00:04:24,040 --> 00:04:25,920
that their time is up, and they're supposed

102
00:04:25,920 --> 00:04:28,120
to finish their current sentence.

103
00:04:28,120 --> 00:04:29,120
I'll put up one hand.

104
00:04:29,120 --> 00:04:30,560
You do this murmuring clap.

105
00:04:30,560 --> 00:04:31,880
They get to finish their sentence.

106
00:04:31,880 --> 00:04:35,200
When I put two hands up, then you drown them out with applause

107
00:04:35,200 --> 00:04:37,800
because A, you've enjoyed their talk, and B, their time is up.

108
00:04:37,800 --> 00:04:39,000
And we move on to the next person.

109
00:04:39,000 --> 00:04:39,840
Does that make sense?

110
00:04:39,840 --> 00:04:40,800
Should we practice it?

111
00:04:43,800 --> 00:04:45,560
Blah, blah, blah, blah, blah, blah, blah, blah, blah, blah,

112
00:04:45,560 --> 00:04:47,440
blah, blah, blah, blah, blah, blah, blah, blah.

113
00:04:47,440 --> 00:04:52,840
Without further ado, let me hand over to Eric.

114
00:04:52,840 --> 00:04:54,040
Please give him a big hand.

115
00:04:59,680 --> 00:05:01,280
Hi, my name's Eric Smith.

116
00:05:01,280 --> 00:05:06,960
I designed f-strings and implemented them for CPython.

117
00:05:06,960 --> 00:05:08,800
So thank you.

118
00:05:11,440 --> 00:05:13,440
So this is a talk about a feature of f-strings

119
00:05:13,440 --> 00:05:15,840
that I'm planning on adding for 3.8.

120
00:05:15,840 --> 00:05:17,600
But in all fairness, this is not my idea.

121
00:05:17,600 --> 00:05:19,480
It's Larry Hastings' idea.

122
00:05:19,480 --> 00:05:22,760
So if you dislike it, it is Larry's idea.

123
00:05:22,760 --> 00:05:24,800
If you're like me, you do lots of debugging

124
00:05:24,800 --> 00:05:26,080
with print statements.

125
00:05:26,080 --> 00:05:28,080
I do it all day long.

126
00:05:28,080 --> 00:05:30,400
And my print statements are often like this first line,

127
00:05:30,400 --> 00:05:33,960
x equals curly brace, x bang r, write curly brace,

128
00:05:33,960 --> 00:05:35,520
and you go on and on and on.

129
00:05:35,520 --> 00:05:37,440
And I don't know about you, but I find that all

130
00:05:37,440 --> 00:05:39,840
but impossible to type.

131
00:05:39,840 --> 00:05:42,000
I'm wrong more often than I'm right with the braces

132
00:05:42,000 --> 00:05:42,520
and whatnot.

133
00:05:42,520 --> 00:05:47,280
So this idea is to add a conversion operator, which

134
00:05:47,280 --> 00:05:51,240
is kind of like bang s, bang r, and bang a.

135
00:05:51,240 --> 00:05:54,480
And we're currently thinking of calling it bang d for debug.

136
00:05:54,480 --> 00:05:57,920
And the idea is that when you write f expression bang

137
00:05:57,920 --> 00:06:02,280
d in curly braces, it expands to the text of the expression

138
00:06:02,280 --> 00:06:05,400
and equal sign and the value of the expression.

139
00:06:05,400 --> 00:06:10,160
So now you can just write x bang d, y bang d, my long URL bang

140
00:06:10,160 --> 00:06:11,880
d in the expression bang d.

141
00:06:11,880 --> 00:06:14,000
And it will produce as its output

142
00:06:14,000 --> 00:06:15,600
the literal text of the expression.

143
00:06:15,600 --> 00:06:17,040
So if you've got spaces in there,

144
00:06:17,040 --> 00:06:19,400
it'll put the spaces in the output.

145
00:06:19,400 --> 00:06:22,560
My example here, with the 9 times x plus 15,

146
00:06:22,560 --> 00:06:26,200
it would literally print out 9 times x plus space 15

147
00:06:26,200 --> 00:06:27,960
equals 42.

148
00:06:27,960 --> 00:06:30,880
So hopefully this will save lots of typing for people like me,

149
00:06:30,880 --> 00:06:34,320
who is my audience.

150
00:06:34,320 --> 00:06:36,240
And this will be in 3.8.

151
00:06:36,240 --> 00:06:37,040
And that's it.

152
00:06:37,040 --> 00:06:37,540
Thank you.

153
00:06:37,540 --> 00:06:38,040
Thank you, Eric.

154
00:06:38,040 --> 00:06:39,200
Shaun Sweet, up next is Shaun.

155
00:06:39,200 --> 00:06:40,280
Are you ready to go, Shaun?

156
00:06:40,280 --> 00:06:40,780
I am.

157
00:06:40,780 --> 00:06:42,120
Is your slide up on the screen?

158
00:06:42,120 --> 00:06:43,200
It is up on the screen.

159
00:06:43,200 --> 00:06:44,840
All right, give a big hand, everyone.

160
00:06:49,880 --> 00:06:51,800
OK, so I'm going to talk about a project

161
00:06:51,800 --> 00:06:54,120
I've been working on for a couple years called Data Test,

162
00:06:54,120 --> 00:06:58,920
that deals with data wrangling, which can many times be awful.

163
00:06:58,920 --> 00:06:59,960
A little bit about me.

164
00:06:59,960 --> 00:07:00,960
My name's Shaun Sweet.

165
00:07:00,960 --> 00:07:02,240
I'm a software engineer.

166
00:07:02,240 --> 00:07:03,080
I work at Google.

167
00:07:03,080 --> 00:07:04,080
I'm a software engineer.

168
00:07:04,080 --> 00:07:04,920
I work at Google.

169
00:07:04,920 --> 00:07:05,960
I'm a software engineer.

170
00:07:06,040 --> 00:07:06,880
A little bit about me.

171
00:07:06,880 --> 00:07:08,520
My name's Shaun Brown.

172
00:07:08,520 --> 00:07:14,400
At 03sjbrown on Twitter, I started using Python in about 2006.

173
00:07:14,400 --> 00:07:16,120
And I work as the technology director

174
00:07:16,120 --> 00:07:18,600
for the National Committee for an Effective Congress, which

175
00:07:18,600 --> 00:07:20,080
we call the NCEC.

176
00:07:20,080 --> 00:07:24,320
And at the NCEC, we have done a lot of data analysis

177
00:07:24,320 --> 00:07:25,600
for a long time.

178
00:07:25,600 --> 00:07:29,080
But with a lot of data analysis comes with a lot of data

179
00:07:29,080 --> 00:07:31,920
analysis means a lot of data processing.

180
00:07:31,920 --> 00:07:35,560
So we do a lot of data processing.

181
00:07:35,560 --> 00:07:39,040
And to make sure that the data that we get is accurate

182
00:07:39,040 --> 00:07:42,840
when we receive it and accurate after we do work to it,

183
00:07:42,840 --> 00:07:45,720
we've been working on this data test tool, which

184
00:07:45,720 --> 00:07:48,160
has three main features.

185
00:07:48,160 --> 00:07:52,440
So it provides validation methods

186
00:07:52,440 --> 00:07:56,200
to check that data satisfies a given requirement.

187
00:07:56,200 --> 00:07:58,320
Difference classes that describe elements

188
00:07:58,320 --> 00:08:02,240
that fail to when data elements fail to satisfy a requirement,

189
00:08:02,240 --> 00:08:05,400
they're expressed as these difference objects.

190
00:08:05,400 --> 00:08:10,000
And then it also provides acceptance context managers

191
00:08:10,000 --> 00:08:16,720
that accept differences that meet a specified criteria.

192
00:08:16,720 --> 00:08:18,240
One of the main functions, one thing

193
00:08:18,240 --> 00:08:20,320
I should say on that previous slide,

194
00:08:20,320 --> 00:08:22,520
it supports PyTest and UnitTest.

195
00:08:22,520 --> 00:08:25,960
But these slides here are PyTest specifically.

196
00:08:25,960 --> 00:08:30,100
And in the PyTest API, one of the main functions

197
00:08:30,100 --> 00:08:33,400
is the validate function, which is a rich comparison function.

198
00:08:33,400 --> 00:08:38,000
And in this example, the requirement

199
00:08:38,000 --> 00:08:40,840
is a set of A and B. And we're validating

200
00:08:40,840 --> 00:08:45,680
that the elements in data satisfy that requirement.

201
00:08:45,680 --> 00:08:50,280
And when validate is given a set requirement,

202
00:08:50,280 --> 00:08:52,920
it checks for set membership.

203
00:08:52,920 --> 00:08:55,120
When validate is given a function requirement,

204
00:08:55,120 --> 00:08:57,200
it checks that that function returns true

205
00:08:57,200 --> 00:08:59,320
when given the data element.

206
00:08:59,320 --> 00:09:02,480
It also works for mappings, lists, and other objects.

207
00:09:02,480 --> 00:09:06,360
In this example, it's given two dictionaries.

208
00:09:08,840 --> 00:09:14,960
The difference objects are, I guess, when validation fails,

209
00:09:14,960 --> 00:09:17,520
the validation error is raised.

210
00:09:17,520 --> 00:09:19,560
And the validation error contains a number

211
00:09:19,560 --> 00:09:20,720
of these difference objects.

212
00:09:20,720 --> 00:09:25,360
The differences can be missing, extra, deviation, or invalid.

213
00:09:25,360 --> 00:09:30,960
Looking back at this first example, given this set here,

214
00:09:30,960 --> 00:09:32,800
there are two extra elements.

215
00:09:32,800 --> 00:09:35,000
So when you run the test, it sees, oh, C and D

216
00:09:35,000 --> 00:09:36,360
are not part of this requirement.

217
00:09:36,360 --> 00:09:38,280
So it fails with that validation error

218
00:09:38,280 --> 00:09:40,440
that contains these two differences.

219
00:09:40,440 --> 00:09:42,600
Likewise with the function here, there

220
00:09:42,600 --> 00:09:46,480
are two elements that don't satisfy the is even predicate.

221
00:09:49,280 --> 00:09:52,240
Here in the mapping comparison, this one

222
00:09:52,240 --> 00:09:53,400
does a numeric comparison.

223
00:09:53,400 --> 00:10:00,160
And it sees that B contains 199 in the data,

224
00:10:00,160 --> 00:10:02,280
but it contains 200 in the requirement.

225
00:10:02,280 --> 00:10:04,280
And likewise, C contains 305 in the data,

226
00:10:04,280 --> 00:10:05,880
but 300 in the requirement.

227
00:10:05,880 --> 00:10:12,020
So it gives these deviations with minus 1 and plus 5.

228
00:10:12,020 --> 00:10:15,480
Ideally, you want to correct errors when possible.

229
00:10:15,480 --> 00:10:18,400
But sometimes you can't always correct errors.

230
00:10:18,400 --> 00:10:21,500
Sometimes two different reporting authorities disagree.

231
00:10:21,500 --> 00:10:23,300
Sometimes you don't have enough information,

232
00:10:23,300 --> 00:10:25,320
and sometimes there's a requirement

233
00:10:25,320 --> 00:10:28,320
that you maintain the data as it was reported.

234
00:10:28,320 --> 00:10:31,080
And in these cases, we have an acceptance system.

235
00:10:31,080 --> 00:10:34,200
And these act as context managers

236
00:10:34,200 --> 00:10:37,440
that accept certain differences based on these criteria.

237
00:10:37,440 --> 00:10:41,240
And if all of the differences have been accepted,

238
00:10:41,240 --> 00:10:43,160
the error is completely suppressed.

239
00:10:43,160 --> 00:10:47,960
So here in this example, back to that set membership test,

240
00:10:47,960 --> 00:10:50,080
C and D fail that test.

241
00:10:50,080 --> 00:10:53,360
And the differences are extra C, extra D.

242
00:10:53,360 --> 00:10:56,600
We can add this accepted extra, and then the test passes.

243
00:10:56,600 --> 00:10:59,400
If we've decided with our own judgment

244
00:10:59,400 --> 00:11:02,280
that that's acceptable thing to do, the same here,

245
00:11:02,280 --> 00:11:05,960
we have this two differences of minus 1 and plus 5.

246
00:11:05,960 --> 00:11:10,840
If we think that a deviation of 5 is OK,

247
00:11:10,840 --> 00:11:15,000
we can add this accepted tolerance of plus or minus 5.

248
00:11:15,000 --> 00:11:19,600
Acceptances can also be composed with operators, ampersand

249
00:11:19,600 --> 00:11:23,000
and pipe to do intersections and unions.

250
00:11:23,000 --> 00:11:24,600
You can install it with PIP.

251
00:11:24,600 --> 00:11:25,120
PIP install.

252
00:11:25,120 --> 00:11:26,800
There's no hard dependencies.

253
00:11:26,800 --> 00:11:28,600
It supports many varieties of Python.

254
00:11:28,600 --> 00:11:30,080
It's freely available.

255
00:11:30,080 --> 00:11:31,880
And thank you for listening.

256
00:11:31,880 --> 00:11:41,960
Thank you very much, Sean.

257
00:11:41,960 --> 00:11:42,960
What was I going to say?

258
00:11:42,960 --> 00:11:43,640
Hey, you know what?

259
00:11:43,640 --> 00:11:47,640
When a speaker finishes and there's questions time,

260
00:11:47,640 --> 00:11:50,160
I don't think that's a nice time to leave the room

261
00:11:50,160 --> 00:11:51,880
because it's really explicitly saying,

262
00:11:51,880 --> 00:11:54,080
I'm finished being interested in this talk,

263
00:11:54,080 --> 00:11:56,000
and I don't care about anyone's questions.

264
00:11:56,000 --> 00:11:57,640
So a small thing of politeness is maybe

265
00:11:57,640 --> 00:11:59,120
if you've stayed for a whole talk,

266
00:11:59,120 --> 00:12:01,520
stay for the last five minutes of questions as well

267
00:12:01,520 --> 00:12:02,400
rather than walking out.

268
00:12:02,400 --> 00:12:03,840
I thought that in a room recently.

269
00:12:03,840 --> 00:12:05,000
It didn't feel so nice.

270
00:12:05,000 --> 00:12:06,800
Everybody at PyCon has been incredibly nice.

271
00:12:06,800 --> 00:12:08,880
It's just a silly little oversight, I'm sure,

272
00:12:08,880 --> 00:12:11,600
on everyone's part.

273
00:12:11,600 --> 00:12:14,440
Yeah, I shouldn't probably open with a general critique

274
00:12:14,440 --> 00:12:15,840
of audience behavior.

275
00:12:15,840 --> 00:12:17,680
Haven't all our speakers so far been great?

276
00:12:17,680 --> 00:12:21,880
The next one will be great too.

277
00:12:21,880 --> 00:12:24,560
Please give a big hand to Elizaveta.

278
00:12:24,560 --> 00:12:27,320
Hi, my name is Elizaveta Shashkov,

279
00:12:27,320 --> 00:12:30,280
and today I want to tell you a short story which

280
00:12:30,280 --> 00:12:32,240
changed my mind.

281
00:12:32,240 --> 00:12:35,720
I'm a software developer of the PyTerm IDE at JetBrains.

282
00:12:35,720 --> 00:12:38,000
We're not a really big company, in fact,

283
00:12:38,000 --> 00:12:40,960
but we have several offices around the world.

284
00:12:40,960 --> 00:12:45,080
And the biggest one is located in St. Petersburg in Russia.

285
00:12:45,080 --> 00:12:49,680
It is situated in the office building named the Universe.

286
00:12:49,680 --> 00:12:53,560
During the latest years, we started to grow really fast,

287
00:12:53,560 --> 00:12:57,640
and we realized that the universe isn't enough for us.

288
00:12:57,640 --> 00:12:59,800
We started to look for the new office,

289
00:12:59,800 --> 00:13:03,720
for the new space for us, and finally we found it.

290
00:13:03,720 --> 00:13:06,480
We found the new office, and we called it, yes,

291
00:13:06,480 --> 00:13:08,920
we called it Space.

292
00:13:08,920 --> 00:13:11,520
Our new office is a new building.

293
00:13:11,520 --> 00:13:13,840
It's really cool.

294
00:13:13,840 --> 00:13:16,760
We were very excited when we arrived there.

295
00:13:16,760 --> 00:13:18,240
It has two towers.

296
00:13:18,240 --> 00:13:20,440
It is located near the Neva River

297
00:13:20,440 --> 00:13:22,920
and near the Gulf of Finland.

298
00:13:22,920 --> 00:13:26,520
So we were really happy when we arrived there.

299
00:13:26,520 --> 00:13:27,760
It's a new building.

300
00:13:27,760 --> 00:13:33,080
It is cool and this nice Scandic style.

301
00:13:33,080 --> 00:13:37,320
And it was really nice.

302
00:13:37,320 --> 00:13:40,800
It doesn't have open spaces, just real rooms

303
00:13:40,800 --> 00:13:43,040
for four or five people.

304
00:13:43,040 --> 00:13:45,600
Really great place, right?

305
00:13:45,600 --> 00:13:52,720
And it was very good, but there were some minor things about it.

306
00:13:52,720 --> 00:13:57,160
You know, it was still a bit under construction.

307
00:13:57,160 --> 00:14:00,000
For example, you want to use a printer.

308
00:14:00,000 --> 00:14:02,960
You come to a printer room, and then you realize

309
00:14:02,960 --> 00:14:05,160
that there is no paper there.

310
00:14:05,160 --> 00:14:07,160
OK, no problem.

311
00:14:07,160 --> 00:14:09,880
The paper appears in a few hours.

312
00:14:09,880 --> 00:14:13,920
You go to a coffee point, and there are some coffee machines,

313
00:14:13,920 --> 00:14:15,920
but they don't produce hot water.

314
00:14:15,920 --> 00:14:17,160
OK, no problem.

315
00:14:17,160 --> 00:14:22,920
You file the bug, and the fix appears with the next minor update.

316
00:14:22,920 --> 00:14:25,000
Now they produce hot water.

317
00:14:25,000 --> 00:14:26,040
Great.

318
00:14:26,040 --> 00:14:29,680
You go to a meeting room, and there are no whiteboards there.

319
00:14:29,680 --> 00:14:31,400
OK, no problems again.

320
00:14:31,400 --> 00:14:33,280
You file the bug.

321
00:14:33,280 --> 00:14:37,160
It is fixed in a few hours, and you're happy.

322
00:14:37,160 --> 00:14:39,080
That's great.

323
00:14:39,080 --> 00:14:41,760
And in fact, you have nothing to complain,

324
00:14:41,760 --> 00:14:46,320
because every time the bug is fixed in a few hours,

325
00:14:46,320 --> 00:14:49,760
and there are no problems, and every day you

326
00:14:49,760 --> 00:14:53,120
see continuous improvements everywhere, every day.

327
00:14:53,120 --> 00:14:59,120
But the problem is every day you find new bugs as well.

328
00:14:59,120 --> 00:15:04,480
After several iterations, our new office was stabilized.

329
00:15:04,480 --> 00:15:09,200
Now it has a lot of happy users and a great view

330
00:15:09,560 --> 00:15:11,560
of the city.

331
00:15:11,560 --> 00:15:15,880
And the next day, we go to a Baltic sea.

332
00:15:15,880 --> 00:15:18,480
You can see it's sunny on this photo,

333
00:15:18,480 --> 00:15:24,160
but sometimes we have the weather exactly like in Cleveland.

334
00:15:24,160 --> 00:15:31,520
And one thing which changed my mind in this history.

335
00:15:31,520 --> 00:15:34,560
We all here create software, and everybody

336
00:15:34,560 --> 00:15:39,160
understands that it's impossible to create software without bugs.

337
00:15:39,920 --> 00:15:42,360
Gave me an unforgettable experience,

338
00:15:42,360 --> 00:15:45,560
because it's very important for every software developer

339
00:15:45,560 --> 00:15:52,120
to find themselves in the situation where every users find

340
00:15:52,120 --> 00:15:55,680
themselves rather often.

341
00:15:55,680 --> 00:16:00,000
You definitely should do it, and I

342
00:16:00,000 --> 00:16:02,360
believe it will change your mind.

343
00:16:02,360 --> 00:16:04,480
At least it changed mine.

344
00:16:04,480 --> 00:16:05,440
Thank you.

345
00:16:05,440 --> 00:16:06,440
All right.

346
00:16:06,440 --> 00:16:07,440
Thank you, Elizabeth.

347
00:16:07,440 --> 00:16:10,440
I have a little joke about a lady's,

348
00:16:10,440 --> 00:16:13,440
I heard this from a Polish programmer friend,

349
00:16:13,440 --> 00:16:14,440
and she tells me this joke.

350
00:16:14,440 --> 00:16:16,440
Says this is my granny's favorite joke.

351
00:16:16,440 --> 00:16:17,960
It's a lady's walking down the road,

352
00:16:17,960 --> 00:16:20,440
and she sees a horseshoe.

353
00:16:20,440 --> 00:16:24,040
So she picks it up and looks at it and turns it over,

354
00:16:24,040 --> 00:16:25,440
and on the other side, there's a horse.

355
00:16:28,440 --> 00:16:30,440
Please give Meredith a big hand.

356
00:16:30,440 --> 00:16:31,440
Thank you.

357
00:16:31,440 --> 00:16:32,440
Thanks.

358
00:16:32,440 --> 00:16:34,440
So my name is Meredith.

359
00:16:34,440 --> 00:16:35,940
I run a startup called Anvil.

360
00:16:35,940 --> 00:16:37,440
We make tools for building full stack web

361
00:16:37,440 --> 00:16:39,940
apps with nothing but Python, and we are sponsoring PyCon

362
00:16:39,940 --> 00:16:41,940
again this year.

363
00:16:41,940 --> 00:16:42,940
It's great to be back.

364
00:16:42,940 --> 00:16:45,440
Like any good sponsor, we give out

365
00:16:45,440 --> 00:16:48,440
t-shirts to anybody who builds an app with Anvil

366
00:16:48,440 --> 00:16:50,440
and shows it to us at our stand.

367
00:16:50,440 --> 00:16:52,440
There are two problems with this.

368
00:16:52,440 --> 00:16:54,440
One is that we don't have a full stack of apps

369
00:16:54,440 --> 00:16:56,440
that we can use to build a full stack of apps.

370
00:16:56,440 --> 00:16:58,440
We have a lot of apps that we can use to build apps.

371
00:16:59,440 --> 00:17:00,940
see the footwork in an app where the app

372
00:17:00,940 --> 00:17:01,600
doesn't show your

373
00:17:01,600 --> 00:17:27,600
T-shirt creation is crispy and isn't

374
00:17:27,600 --> 00:17:31,280
base should we be bringing of each size.

375
00:17:31,280 --> 00:17:32,680
And I mean, we've done this before.

376
00:17:32,680 --> 00:17:33,640
We could just be naive.

377
00:17:33,640 --> 00:17:36,480
We could say, well, however many we gave out last year,

378
00:17:36,480 --> 00:17:37,920
bring twice as many.

379
00:17:37,920 --> 00:17:40,680
Last year, we gave out two women's extra smalls we should

380
00:17:40,680 --> 00:17:42,040
maybe bring four this year.

381
00:17:42,040 --> 00:17:43,840
That makes sense.

382
00:17:43,840 --> 00:17:47,520
Last year, we gave out 27 men's large shirts.

383
00:17:47,520 --> 00:17:51,960
Bringing 54 feels a little bit like overkill, you know?

384
00:17:51,960 --> 00:17:54,040
It's the law of large numbers.

385
00:17:54,040 --> 00:17:58,760
That 54th men's large shirt is so much less likely to get

386
00:17:58,760 --> 00:18:02,280
used than that fourth women's extra small.

387
00:18:02,280 --> 00:18:04,280
It's the law of large numbers.

388
00:18:04,280 --> 00:18:08,120
Larger sample sizes average out more reliably.

389
00:18:08,120 --> 00:18:10,880
We can model this with a binomial distribution.

390
00:18:10,880 --> 00:18:14,440
We roll 3,500 dice, one for each of you.

391
00:18:14,440 --> 00:18:19,000
And we just count up how many of them rolled men's large.

392
00:18:19,000 --> 00:18:22,160
And thankfully, it turns out that SciPy has a function for

393
00:18:22,160 --> 00:18:23,760
calculating exactly this.

394
00:18:23,760 --> 00:18:26,040
And so I'm going to use it to build an interactive tool for

395
00:18:26,040 --> 00:18:27,840
exploring this distribution.

396
00:18:27,840 --> 00:18:31,640
I'm going to write a function that gets this distribution for

397
00:18:31,640 --> 00:18:34,920
a given number of attendees and a given probability of

398
00:18:34,920 --> 00:18:37,240
needing a particular size of shirt.

399
00:18:37,240 --> 00:18:42,920
So we return the PMF for that number of attendees and that

400
00:18:42,920 --> 00:18:50,040
probability for every value up to the number of attendees.

401
00:18:50,040 --> 00:18:51,760
OK, so we have our distribution.

402
00:18:51,760 --> 00:18:54,680
We can now make an interactive tool to explore it.

403
00:18:54,680 --> 00:18:57,280
We're going to go to our user interface, have a text box

404
00:18:57,280 --> 00:19:01,840
where we can enter how many of this shirt we used last time.

405
00:19:01,840 --> 00:19:04,640
And then underneath it, we're going to stick a plot so we can

406
00:19:04,640 --> 00:19:06,280
explore the distribution.

407
00:19:06,280 --> 00:19:13,440
And when you hit Enter in this text box, we're going to call

408
00:19:13,440 --> 00:19:16,160
that get distribution function we made earlier.

409
00:19:16,160 --> 00:19:18,240
The number of attendees is 3,200.

410
00:19:18,240 --> 00:19:19,280
That's PyCon.

411
00:19:19,280 --> 00:19:23,480
The probability is actually we can get this from the number

412
00:19:23,480 --> 00:19:26,440
we gave out last time because that was also over a

413
00:19:26,440 --> 00:19:28,760
population of 3,200.

414
00:19:28,760 --> 00:19:31,320
And once we've got the distribution, then we can just

415
00:19:31,320 --> 00:19:35,640
plot that data as a bar chart whose y values are that

416
00:19:35,640 --> 00:19:37,000
distribution.

417
00:19:37,000 --> 00:19:39,280
So OK, let's run this.

418
00:19:39,280 --> 00:19:41,680
And let's explore the women's extra smalls.

419
00:19:41,680 --> 00:19:43,640
We gave away two last time.

420
00:19:43,640 --> 00:19:46,680
And if that's any guide, the distribution's

421
00:19:46,680 --> 00:19:48,280
actually quite wide.

422
00:19:48,280 --> 00:19:51,080
We're most likely, of course, to need two again this year.

423
00:19:51,080 --> 00:19:54,840
But we could easily need twice that number or even more.

424
00:19:54,840 --> 00:19:59,120
Whereas if we go with the men's larges, again, gave away

425
00:19:59,120 --> 00:20:02,000
27 last time, but the distribution's a lot tighter

426
00:20:02,000 --> 00:20:05,000
here, we're still, again, most likely to need 27.

427
00:20:05,000 --> 00:20:08,880
But we're vanishingly unlikely to need twice that number.

428
00:20:08,880 --> 00:20:12,240
So now we've constructed a statistical model that can

429
00:20:12,240 --> 00:20:15,000
actually answer our question because we want to know how

430
00:20:15,000 --> 00:20:17,880
many shirts to bring because we don't want to run out.

431
00:20:17,920 --> 00:20:20,600
And what we want to do is find a number of shirts of each

432
00:20:20,600 --> 00:20:25,000
size where there's a 95% probability that we will need

433
00:20:25,000 --> 00:20:26,800
that number or fewer.

434
00:20:26,800 --> 00:20:29,080
And again, SciPy to the rescue, it has a function for

435
00:20:29,080 --> 00:20:30,440
calculating this.

436
00:20:30,440 --> 00:20:32,720
We're going to return this alongside the distribution.

437
00:20:32,720 --> 00:20:33,560
It's the PPF.

438
00:20:33,560 --> 00:20:37,640
So we're going to find the 95% points for this number of

439
00:20:37,640 --> 00:20:40,240
attendees and this probability.

440
00:20:40,240 --> 00:20:44,080
Back on our user interface, that is the number of shirts

441
00:20:44,080 --> 00:20:45,840
we should be giving out.

442
00:20:45,840 --> 00:20:47,200
So we want to display this.

443
00:20:47,200 --> 00:20:49,560
We're going to stick a headline on our page.

444
00:20:49,560 --> 00:20:50,640
Oops.

445
00:20:50,640 --> 00:20:51,600
No.

446
00:20:51,600 --> 00:20:54,840
We're going to stick a headline on our page.

447
00:20:54,840 --> 00:20:57,800
And then, as well as plotting the distribution, we're going

448
00:20:57,800 --> 00:21:00,600
to put some text on that headline saying, with the

449
00:21:00,600 --> 00:21:03,640
instruction, bring so many shirts.

450
00:21:06,960 --> 00:21:10,960
And now if we run this, we can see that if we want.

451
00:21:10,960 --> 00:21:13,520
So the women's extra smalls, we brought two last year.

452
00:21:13,520 --> 00:21:17,040
We actually need to bring five this year to be 95% sure of

453
00:21:17,040 --> 00:21:18,360
not running out.

454
00:21:18,360 --> 00:21:22,800
Whereas with the men's extra large, sorry, men's larges, we

455
00:21:22,800 --> 00:21:24,840
only need to bring 36.

456
00:21:24,840 --> 00:21:29,280
That's only nine spares out of 27.

457
00:21:29,280 --> 00:21:32,480
All the source code for the app I have just written is

458
00:21:32,480 --> 00:21:36,600
available at tinyurl slash overthinking t-shirts.

459
00:21:36,600 --> 00:21:38,680
And if you want to know more, please do come past our booth

460
00:21:38,680 --> 00:21:40,160
at the exhibition hall.

461
00:21:40,160 --> 00:21:41,080
And you know what?

462
00:21:41,080 --> 00:21:43,320
If every single one of you turns up and you all build an

463
00:21:43,320 --> 00:21:45,360
app with Anvil and you completely clean us out of

464
00:21:45,360 --> 00:21:48,640
shirts, well, at least that will show the statisticians.

465
00:21:48,640 --> 00:21:49,880
Thank you very much.

466
00:21:49,880 --> 00:21:58,640
Thank you, Meredith.

467
00:21:58,640 --> 00:22:02,760
Pirate programmer walks into a bar, and he's got a parrot on

468
00:22:02,760 --> 00:22:03,720
his shoulder.

469
00:22:03,720 --> 00:22:06,760
And the parrot's going, pieces of seven?

470
00:22:06,760 --> 00:22:08,480
Pieces of seven?

471
00:22:08,480 --> 00:22:11,240
And the barman goes, I think there's something wrong with

472
00:22:11,240 --> 00:22:11,920
your parrot.

473
00:22:11,920 --> 00:22:15,320
And the programmer goes, yeah, he's got a parrot-y error.

474
00:22:15,440 --> 00:22:19,200
And the barman goes, yeah, I thought he was a bit off.

475
00:22:19,200 --> 00:22:20,440
Please give Mattie a big hand.

476
00:22:20,440 --> 00:22:30,680
Hi, I'm Mattie, Mattie P on all kinds of social media.

477
00:22:30,680 --> 00:22:33,920
I'm a full-time NumPy developer in my day job.

478
00:22:33,920 --> 00:22:37,000
I'm one year into a two-year contract, and I'd love to talk

479
00:22:37,000 --> 00:22:38,280
to you all about that.

480
00:22:38,280 --> 00:22:39,200
But not now.

481
00:22:39,200 --> 00:22:40,760
People want to talk about it.

482
00:22:40,760 --> 00:22:43,680
Either we can do the hallway track or come to SciPy in

483
00:22:43,680 --> 00:22:45,200
Austin in July.

484
00:22:45,240 --> 00:22:46,880
We'll be talking about that.

485
00:22:46,880 --> 00:22:49,240
I really would like to talk to you about PyPy.

486
00:22:49,240 --> 00:22:52,120
How many people have heard about PyPy?

487
00:22:52,120 --> 00:22:56,800
And what if I told you that PyPy is not PyPI?

488
00:22:56,800 --> 00:22:59,080
Now how many people have heard about it?

489
00:22:59,080 --> 00:23:01,680
It's an alternative Python implementation

490
00:23:01,680 --> 00:23:02,960
written in Python.

491
00:23:02,960 --> 00:23:06,640
It has a JIT, which makes it really fast, and a different

492
00:23:06,640 --> 00:23:08,840
GC, and it's fast.

493
00:23:08,840 --> 00:23:10,040
How fast?

494
00:23:10,040 --> 00:23:12,920
Blazingly, astonishingly, amazingly, incredibly,

495
00:23:12,920 --> 00:23:14,400
impressively fast.

496
00:23:14,400 --> 00:23:16,560
And these claimers will be at the end.

497
00:23:16,560 --> 00:23:19,360
Now how many of you have actually used PyPy?

498
00:23:19,360 --> 00:23:21,440
Could you stand up?

499
00:23:21,440 --> 00:23:23,480
Not very many, right?

500
00:23:23,480 --> 00:23:24,560
But look around.

501
00:23:24,560 --> 00:23:27,920
Everybody who saw somebody who stood up, they can ask them

502
00:23:27,920 --> 00:23:30,040
how their experience was with it.

503
00:23:30,040 --> 00:23:32,160
You can actually try PyPy yourself.

504
00:23:32,160 --> 00:23:35,360
Would you like to see a demonstration of it?

505
00:23:35,360 --> 00:23:37,720
Want to see it again?

506
00:23:37,720 --> 00:23:39,920
It was fast, right?

507
00:23:39,920 --> 00:23:41,480
So I can't actually show you a demonstration.

508
00:23:41,480 --> 00:23:44,360
I'm not going to show you a demonstration right now.

509
00:23:44,360 --> 00:23:46,720
If you want to try it out, you can download it.

510
00:23:46,720 --> 00:23:50,600
You open up a zip file, and it's basically like a virtual

511
00:23:50,600 --> 00:23:54,080
N for different Python distribution.

512
00:23:54,080 --> 00:23:58,040
You do PyPy minus M insure pip, which provides you with a

513
00:23:58,040 --> 00:24:00,760
now you've got a nice pip environment.

514
00:24:00,760 --> 00:24:05,160
PyPy minus M pip install the world, and we promise that

515
00:24:05,160 --> 00:24:08,560
works, disclaimers at the end.

516
00:24:08,560 --> 00:24:12,040
So the good news is this should all just work.

517
00:24:12,040 --> 00:24:12,480
OK?

518
00:24:12,480 --> 00:24:16,160
The disclaimers are that PyPy may cause anxiety, feelings

519
00:24:16,160 --> 00:24:21,240
of inadequacy, frustration, a desire to rip your CP out of

520
00:24:21,240 --> 00:24:22,320
your computer.

521
00:24:22,320 --> 00:24:26,160
And if you feel any of these symptoms, don't blame us.

522
00:24:26,160 --> 00:24:27,440
OK?

523
00:24:27,440 --> 00:24:30,120
But really, pip install will sometimes need a compiler

524
00:24:30,120 --> 00:24:33,000
because we're just now building wheels and starting to,

525
00:24:33,000 --> 00:24:39,120
now that many Linux 2010 is a thing, yay for the PyPA.

526
00:24:39,160 --> 00:24:43,160
We're going to start uploading some wheels to PyPI.

527
00:24:43,160 --> 00:24:46,680
Pure Python should be very, very fast, but some C

528
00:24:46,680 --> 00:24:50,040
extension modules like NumPy may not be as fast as you'd

529
00:24:50,040 --> 00:24:51,120
like them to be.

530
00:24:51,120 --> 00:24:53,800
And if you want more information, talk to me or

531
00:24:53,800 --> 00:24:56,200
visit us at our website.

532
00:24:56,200 --> 00:24:57,440
Thank you.

533
00:24:57,440 --> 00:25:03,800
All right.

534
00:25:03,800 --> 00:25:06,960
I have another story about a Russian watchmaker.

535
00:25:06,960 --> 00:25:08,920
But I feel like these lightning talks are so slick.

536
00:25:08,920 --> 00:25:11,760
There's absolutely no need for anyone to hear that.

537
00:25:11,760 --> 00:25:14,120
Are you ready to take us away, Geli?

538
00:25:14,120 --> 00:25:15,360
Please give him a big hand.

539
00:25:15,360 --> 00:25:21,280
Hello, everyone.

540
00:25:21,280 --> 00:25:22,200
I'm Jelle Zylstra.

541
00:25:22,200 --> 00:25:24,920
I'm a software engineer over at Quora in California, which is

542
00:25:24,920 --> 00:25:28,080
a great place to write Python codes if you're interested.

543
00:25:28,080 --> 00:25:30,600
I also contribute to open source software like TypeShad

544
00:25:30,600 --> 00:25:31,320
and Black.

545
00:25:31,320 --> 00:25:34,160
But I'm not here today to talk about that.

546
00:25:34,160 --> 00:25:36,320
I'm here today to talk about biology.

547
00:25:36,320 --> 00:25:40,000
Because I actually started out in college as a biologist,

548
00:25:40,000 --> 00:25:43,600
then turned into a software engineer.

549
00:25:43,600 --> 00:25:46,800
But I still like to think about biology sometimes, because I

550
00:25:46,800 --> 00:25:51,840
spent all of college staring at fossil teeth like this one.

551
00:25:51,840 --> 00:25:55,960
So what I do now, outside of my day job, is maintain this big

552
00:25:55,960 --> 00:26:00,400
database of animal names, mostly mammals, some other

553
00:26:00,400 --> 00:26:01,560
animals.

554
00:26:01,560 --> 00:26:04,840
I try to cover every single species that exists, every

555
00:26:04,880 --> 00:26:07,600
name that has been published.

556
00:26:07,600 --> 00:26:11,720
There are now more than 80,000 in my database.

557
00:26:11,720 --> 00:26:15,680
And I'm gathering data like who named each species, where was

558
00:26:15,680 --> 00:26:19,120
it published, where did each species come from originally.

559
00:26:22,200 --> 00:26:24,880
And I'm making a lot of progress in getting closer to

560
00:26:24,880 --> 00:26:28,400
completion for every single mammal, know where it came

561
00:26:28,400 --> 00:26:29,920
from.

562
00:26:29,920 --> 00:26:33,240
There's like 40,000 names given to living mammals.

563
00:26:33,240 --> 00:26:37,400
And I got to 99% progress on their locality so far.

564
00:26:37,400 --> 00:26:39,800
So why am I doing this?

565
00:26:39,800 --> 00:26:42,040
The main reason is because this is what I like.

566
00:26:42,040 --> 00:26:43,440
I enjoy working on this.

567
00:26:43,440 --> 00:26:45,240
I like reading about animals.

568
00:26:45,240 --> 00:26:46,400
But I think there's more.

569
00:26:46,400 --> 00:26:49,680
It helps to document the biodiversity of the world.

570
00:26:49,680 --> 00:26:53,080
There's many species that are in danger of going away, that

571
00:26:53,080 --> 00:26:54,920
we don't understand well.

572
00:26:54,920 --> 00:26:57,800
And getting all this data helps us figure out what is

573
00:26:57,800 --> 00:27:03,760
going on in the world and how diverse mammals are now, how

574
00:27:03,760 --> 00:27:06,040
diverse they were in the past.

575
00:27:06,040 --> 00:27:09,280
And if I gather all this data, it also makes it easier for

576
00:27:09,280 --> 00:27:11,960
actual scientists to focus on their research, actually

577
00:27:11,960 --> 00:27:14,160
working with animals, rather than having to look up

578
00:27:14,160 --> 00:27:19,040
literature and look up details of nomenclature.

579
00:27:19,040 --> 00:27:20,800
And last, it's just interesting.

580
00:27:20,800 --> 00:27:22,320
It's a piece of historical research.

581
00:27:22,320 --> 00:27:25,400
I can answer questions like which historical mammal

582
00:27:25,400 --> 00:27:28,960
researcher was the worst at making up names, because all

583
00:27:28,960 --> 00:27:31,640
of their names are no longer considered valid.

584
00:27:31,640 --> 00:27:37,200
Turns out it's this guy, Leo Boll Josef Fitzinger, a 19th

585
00:27:37,200 --> 00:27:38,720
century Austrian zoologist.

586
00:27:38,720 --> 00:27:41,360
He wrote, described hundreds of new species.

587
00:27:41,360 --> 00:27:43,600
Almost none of them are considered valid nowadays.

588
00:27:48,000 --> 00:27:51,560
What I want to do in the future is extend this with a website,

589
00:27:51,560 --> 00:27:53,440
because currently it's just a database that I maintain.

590
00:27:53,440 --> 00:27:56,280
But I want to make sure that other people are also able to

591
00:27:56,280 --> 00:28:00,760
use this data and maybe contribute to it.

592
00:28:00,760 --> 00:28:04,360
I want to add more automation just to catch more issues like

593
00:28:04,360 --> 00:28:07,240
bad pieces of nomenclature, bad interactions between names

594
00:28:07,240 --> 00:28:11,720
that are easy to add, because I have this nice Python app that

595
00:28:11,720 --> 00:28:16,360
maintains my database and can find issues, can report about

596
00:28:16,360 --> 00:28:20,840
things, maybe also just cover more in the future, like more

597
00:28:20,840 --> 00:28:25,080
kinds of animals, more kinds of data.

598
00:28:25,080 --> 00:28:27,080
If you want to know more about this, this is how you can reach

599
00:28:27,080 --> 00:28:28,280
me.

600
00:28:28,280 --> 00:28:29,120
I'll be at PyCon.

601
00:28:29,120 --> 00:28:32,200
You can find me by email or on GitHub.

602
00:28:32,200 --> 00:28:33,440
Thank you.

603
00:28:33,440 --> 00:28:39,400
Thank you, Jelle.

604
00:28:39,400 --> 00:28:41,360
So this Frosten watchmaker is getting to the end of his

605
00:28:41,360 --> 00:28:43,760
career, and he decides that he's going to invite some of

606
00:28:43,760 --> 00:28:45,640
his friends around to look at his shop and decide what the

607
00:28:45,640 --> 00:28:48,520
most beautiful object he's ever made in his career is.

608
00:28:48,520 --> 00:28:50,200
And his friends look around the shop, and they look at all

609
00:28:50,520 --> 00:28:52,080
of the things, and eventually one of them goes, oh, I think

610
00:28:52,080 --> 00:28:52,760
I've found it.

611
00:28:52,760 --> 00:28:53,760
And he goes, what?

612
00:28:53,760 --> 00:28:56,440
And come over here, he says, I think the most beautiful thing

613
00:28:56,440 --> 00:28:57,720
in the shop is this.

614
00:28:57,720 --> 00:28:58,760
And he goes, what are you pointing at?

615
00:28:58,760 --> 00:29:00,280
The bracelet, the bracelet on this watch.

616
00:29:00,280 --> 00:29:03,200
And he goes, ah, yes, this is Gregor, the bracelet.

617
00:29:03,200 --> 00:29:04,120
It is very beautiful.

618
00:29:04,120 --> 00:29:05,800
Tell me why you think you like it.

619
00:29:05,800 --> 00:29:07,960
He goes, oh, well, I like the way you've alternated silver

620
00:29:07,960 --> 00:29:08,920
and gold links.

621
00:29:08,920 --> 00:29:11,680
I like that they're finely carved.

622
00:29:11,680 --> 00:29:13,320
And you know, in the end, if you haven't got a bracelet,

623
00:29:13,320 --> 00:29:13,960
you haven't got a watch.

624
00:29:13,960 --> 00:29:15,680
So that's why I think it's the most beautiful object.

625
00:29:15,680 --> 00:29:18,440
And the Russian watchmaker goes, no, it is not the most

626
00:29:18,440 --> 00:29:19,880
beautiful object.

627
00:29:19,880 --> 00:29:21,320
And then the second one has another idea.

628
00:29:21,320 --> 00:29:23,400
But we'll hear about that after Jacob's talk.

629
00:29:23,400 --> 00:29:24,720
Please give him a big hand.

630
00:29:24,720 --> 00:29:25,240
Oh.

631
00:29:25,240 --> 00:29:25,760
Oh.

632
00:29:30,120 --> 00:29:33,160
I feel like I should just go quickly so we can hear the end

633
00:29:33,160 --> 00:29:33,760
of that one.

634
00:29:33,760 --> 00:29:36,480
But I'll start off with my favorite joke, actually.

635
00:29:36,480 --> 00:29:38,160
Have you heard about the restaurant on the moon?

636
00:29:38,160 --> 00:29:42,560
It has great food, but no atmosphere.

637
00:29:42,560 --> 00:29:43,920
So anyway, I'm Jacob.

638
00:29:43,920 --> 00:29:46,040
This is my first PyCon.

639
00:29:46,040 --> 00:29:49,320
I come from the land down under, not quite Perth.

640
00:29:49,320 --> 00:29:51,200
The other side in Melbourne.

641
00:29:51,200 --> 00:29:54,680
And to give you an idea of how far away that was, my flight

642
00:29:54,680 --> 00:30:03,520
here left at 9.30 AM on Tuesday and arrived in LA at 6.40 AM on

643
00:30:03,520 --> 00:30:08,040
Tuesday after 14 hours of flight.

644
00:30:08,040 --> 00:30:09,160
So yes.

645
00:30:09,160 --> 00:30:11,840
So I'm a PhD student over in Melbourne.

646
00:30:11,840 --> 00:30:14,120
I'm doing my astrophysics PhD.

647
00:30:14,120 --> 00:30:17,040
And so I thought I'd come and talk about how astronomers use

648
00:30:17,040 --> 00:30:17,840
Python.

649
00:30:17,840 --> 00:30:19,200
I will give a quick disclaimer.

650
00:30:19,200 --> 00:30:22,840
This should actually be how some astronomers use Python.

651
00:30:22,840 --> 00:30:24,800
A lot of my contemporaries and colleagues are actually doing a

652
00:30:24,800 --> 00:30:27,960
bunch of cool stuff involving machine learning, looking at

653
00:30:27,960 --> 00:30:30,280
gravitational wave signals and things such as that.

654
00:30:30,280 --> 00:30:32,520
So if you're interested, please feel free to come and

655
00:30:32,520 --> 00:30:33,480
talk to me.

656
00:30:33,480 --> 00:30:35,280
But I'm a simulator.

657
00:30:35,280 --> 00:30:37,240
I simulate galaxy evolutions.

658
00:30:37,240 --> 00:30:41,120
And so in astronomy, we have data.

659
00:30:41,120 --> 00:30:44,680
And unfortunately, we have a crap ton of data.

660
00:30:44,680 --> 00:30:47,920
So I did a quick LS of one of my directories, one of my

661
00:30:47,920 --> 00:30:49,000
output models.

662
00:30:49,040 --> 00:30:53,840
And as you can see, the total is 118 gigabytes worth of data.

663
00:30:53,840 --> 00:30:56,680
And so I'm running for this for five different models.

664
00:30:56,680 --> 00:31:00,600
And I'm trying to collapse all of this into a single image

665
00:31:00,600 --> 00:31:02,680
that I can put into one of my papers.

666
00:31:02,680 --> 00:31:06,720
And so this is how astronomers use Python.

667
00:31:06,720 --> 00:31:08,200
We use NumPy.

668
00:31:08,200 --> 00:31:09,720
We use Matplotlib.

669
00:31:09,720 --> 00:31:11,280
We use SciPy.

670
00:31:11,280 --> 00:31:12,840
That's really it.

671
00:31:12,840 --> 00:31:15,560
I thought up the idea of this talk.

672
00:31:15,560 --> 00:31:19,560
And then I realized the punch line isn't that intriguing.

673
00:31:19,560 --> 00:31:24,040
But anyway, on the more observational side, we have

674
00:31:24,040 --> 00:31:24,480
this.

675
00:31:24,480 --> 00:31:26,560
This is the square kilometer ray out in the

676
00:31:26,560 --> 00:31:28,080
desert of Australia.

677
00:31:28,080 --> 00:31:31,320
Australia is great for radio telescopes because you need a

678
00:31:31,320 --> 00:31:33,480
whole lot of no radio interference.

679
00:31:33,480 --> 00:31:37,560
And Australia has a whole lot of nothing.

680
00:31:37,560 --> 00:31:42,240
And so when the SK is operational, we expect that 10

681
00:31:42,240 --> 00:31:45,360
petabytes worth of data will be coming in every

682
00:31:45,360 --> 00:31:46,440
single day.

683
00:31:46,440 --> 00:31:50,920
And so we need to use data analysis tools such as Python

684
00:31:50,920 --> 00:31:54,200
to crunch through all of that data and produce beautiful

685
00:31:54,200 --> 00:31:56,480
things that we can put in our papers.

686
00:31:56,480 --> 00:32:00,600
So for example, this movie here that I've made used data

687
00:32:00,600 --> 00:32:02,680
that would have come from this SKAO telescope.

688
00:32:02,680 --> 00:32:04,520
10 petabytes worth of data.

689
00:32:04,520 --> 00:32:08,840
It used things such as NumPy, SciPy, Matplotlib to produce

690
00:32:08,840 --> 00:32:09,880
this image.

691
00:32:09,880 --> 00:32:14,760
So if you've ever wondered, how do astronomers use Python?

692
00:32:14,760 --> 00:32:16,920
The answer is pretty boring.

693
00:32:16,920 --> 00:32:21,040
NumPy, SciPy, AstroPy, and Matplotlib.

694
00:32:21,040 --> 00:32:22,280
Thank you very much.

695
00:32:22,280 --> 00:32:31,520
So the second friend goes, I know why.

696
00:32:31,520 --> 00:32:33,800
I know why it's not Greg or the bracelet.

697
00:32:33,800 --> 00:32:35,920
Because I think the most beautiful object on the shop

698
00:32:35,920 --> 00:32:37,040
is over here.

699
00:32:37,040 --> 00:32:39,720
So our watchmaker goes, OK, what have you found?

700
00:32:39,720 --> 00:32:41,560
He goes, I think it's the dial on this watch.

701
00:32:41,560 --> 00:32:42,240
I think it's beautiful.

702
00:32:42,240 --> 00:32:43,560
He goes, ah, yes.

703
00:32:43,560 --> 00:32:45,520
It is Vanier, the dial.

704
00:32:45,520 --> 00:32:46,760
I think it's beautiful as well.

705
00:32:46,760 --> 00:32:48,440
Tell me why you think you like it.

706
00:32:48,440 --> 00:32:50,880
And he goes, well, I just like the way

707
00:32:50,880 --> 00:32:52,520
you've got little diamonds encrusted

708
00:32:52,520 --> 00:32:53,760
at each of the cardinal points.

709
00:32:53,760 --> 00:32:55,600
I like the way you've used Roman numerals.

710
00:32:55,600 --> 00:32:56,480
That's pretty classic.

711
00:32:56,480 --> 00:32:58,040
And in the end, if you don't have the dial,

712
00:32:58,040 --> 00:32:59,040
you can't tell the time.

713
00:32:59,040 --> 00:33:00,880
So that's why it's the most beautiful object.

714
00:33:00,880 --> 00:33:03,480
And the Russian watchmaker goes, no, no, it is not

715
00:33:03,480 --> 00:33:04,880
the most beautiful object.

716
00:33:04,880 --> 00:33:07,160
Because he has his own idea, which we'll find out about

717
00:33:07,160 --> 00:33:07,960
after Jesse's talk.

718
00:33:07,960 --> 00:33:09,160
Please give Jesse a big hand.

719
00:33:13,240 --> 00:33:14,080
Hi.

720
00:33:14,080 --> 00:33:16,640
This is the first time I've come to PyCon US.

721
00:33:16,640 --> 00:33:20,640
So yeah, thank you.

722
00:33:20,640 --> 00:33:21,680
I'm Jesse.

723
00:33:21,680 --> 00:33:23,600
I'm a software engineer at Crash Shift,

724
00:33:23,600 --> 00:33:26,600
which is an ad tech company based in Tokyo.

725
00:33:26,600 --> 00:33:30,680
I mostly work in both data science and engineering.

726
00:33:30,680 --> 00:33:34,160
So in the last year, I've been developing and refactoring

727
00:33:34,160 --> 00:33:38,560
research-oriented code and faced with some struggles.

728
00:33:38,560 --> 00:33:40,880
So based on my experience, I'm going

729
00:33:40,880 --> 00:33:43,920
to try to identify the differences between research-

730
00:33:43,920 --> 00:33:46,680
oriented code and production code.

731
00:33:46,680 --> 00:33:48,960
So why I'm going to talk about this topic

732
00:33:48,960 --> 00:33:51,600
is recently, Python engineers have more opportunities

733
00:33:51,600 --> 00:33:54,840
to work with data scientists or researchers than before.

734
00:33:54,840 --> 00:33:59,120
So understanding each other can help make AI ML projects work

735
00:33:59,120 --> 00:34:01,440
more smoothly.

736
00:34:01,440 --> 00:34:04,040
So there are three differences between research-oriented code

737
00:34:04,040 --> 00:34:05,320
and production code.

738
00:34:05,320 --> 00:34:08,520
First, different scopes of data scientists and engineers.

739
00:34:08,560 --> 00:34:10,880
And second, different characteristics of each

740
00:34:10,880 --> 00:34:14,080
and different objectives of each.

741
00:34:14,080 --> 00:34:18,040
So now, the definition of research-oriented code.

742
00:34:18,040 --> 00:34:20,680
Research-oriented code in AI ML project

743
00:34:20,680 --> 00:34:24,000
is a code written mainly by data scientists or researchers

744
00:34:24,000 --> 00:34:26,600
and for figuring out the most efficient suitable machine

745
00:34:26,600 --> 00:34:28,200
learning model.

746
00:34:28,200 --> 00:34:31,120
So this is the image of how research-oriented code can

747
00:34:31,120 --> 00:34:32,400
be developed.

748
00:34:32,400 --> 00:34:35,120
So research-oriented code is developed

749
00:34:35,120 --> 00:34:37,880
through an iterative process and integrated

750
00:34:37,880 --> 00:34:39,840
into production code.

751
00:34:39,840 --> 00:34:43,720
So this code is based on analysis scripts and or prototype.

752
00:34:43,720 --> 00:34:45,560
So data scientists or researchers

753
00:34:45,560 --> 00:34:49,120
have responsibilities to write research-oriented code.

754
00:34:49,120 --> 00:34:51,800
On the other hand, engineers have responsibilities

755
00:34:51,800 --> 00:34:56,240
to write production code in the whole part of the code

756
00:34:56,240 --> 00:34:59,480
in production level.

757
00:34:59,480 --> 00:35:00,920
So let's look at example.

758
00:35:00,920 --> 00:35:04,600
Machine learning APIs are composed of three elements.

759
00:35:04,600 --> 00:35:07,880
In this case, production code includes preparation code,

760
00:35:07,880 --> 00:35:10,480
preprocessing code, machine learning model.

761
00:35:10,480 --> 00:35:12,440
On the other hand, research-oriented code

762
00:35:12,440 --> 00:35:15,960
includes preprocessing code and machine learning model.

763
00:35:15,960 --> 00:35:18,240
So this is example of data preprocessing code written

764
00:35:18,240 --> 00:35:20,480
by researchers or data scientists.

765
00:35:20,480 --> 00:35:24,760
This code uses empty list, for loop, and if and also.

766
00:35:24,760 --> 00:35:27,760
And it seems to be long, but this code

767
00:35:27,760 --> 00:35:29,240
can make it possible for everyone

768
00:35:29,240 --> 00:35:31,960
to visually trace a code from the top to the bottom

769
00:35:31,960 --> 00:35:35,280
and easily, quickly write it.

770
00:35:35,280 --> 00:35:37,400
So this is example machine learning model written

771
00:35:37,400 --> 00:35:39,440
by researchers or data scientists.

772
00:35:39,440 --> 00:35:42,600
So there one simple clarification

773
00:35:42,600 --> 00:35:44,000
fraction on the top.

774
00:35:44,000 --> 00:35:46,880
And this code is data frame and dot pan.

775
00:35:46,880 --> 00:35:50,160
So this code can allow researchers or data scientists

776
00:35:50,160 --> 00:35:52,840
to easily handle input data with data frame

777
00:35:52,840 --> 00:35:55,280
and trace output data.

778
00:35:55,280 --> 00:35:57,320
So what are Python engineers supposed

779
00:35:57,320 --> 00:36:01,520
to do for research-oriented code?

780
00:36:01,560 --> 00:36:04,560
So refactoring in a parasonic way.

781
00:36:04,560 --> 00:36:07,760
So this code seems to be shorter than previous code.

782
00:36:07,760 --> 00:36:11,280
And on the bottom, there are simple clarification fraction

783
00:36:11,280 --> 00:36:14,760
and this list comprehension, reset comprehension.

784
00:36:14,760 --> 00:36:17,640
Actually, this code can be used in a model in a much faster

785
00:36:17,640 --> 00:36:19,800
and simpler way.

786
00:36:19,800 --> 00:36:21,080
So let's wrap up.

787
00:36:21,080 --> 00:36:23,600
Different scores of data scientists and engineers.

788
00:36:23,600 --> 00:36:25,480
Data scientists have responsibilities

789
00:36:25,480 --> 00:36:28,040
to write preprocessing code, machine learning code.

790
00:36:28,040 --> 00:36:30,560
On the other hand, engineers have responsibilities

791
00:36:30,560 --> 00:36:33,120
to the whole part of the code in production code,

792
00:36:33,120 --> 00:36:34,120
production level.

793
00:36:35,360 --> 00:36:38,480
So second, different characteristics of coding style.

794
00:36:38,480 --> 00:36:41,240
The research-oriented code seems to be easy handle

795
00:36:41,240 --> 00:36:43,160
and visually traceable.

796
00:36:43,160 --> 00:36:45,480
On the other hand, production code

797
00:36:45,480 --> 00:36:48,560
can have high calculation speed, high readability,

798
00:36:48,560 --> 00:36:50,880
and it can be testable and modular.

799
00:36:51,760 --> 00:36:55,640
In the last, different objective coding style.

800
00:36:55,640 --> 00:36:58,760
So researchers or data scientists focus on finding

801
00:36:58,760 --> 00:37:01,320
the most efficient suitable machine learning model.

802
00:37:01,320 --> 00:37:03,680
On the other hand, engineers make the code work

803
00:37:03,680 --> 00:37:05,240
on the server quickly.

804
00:37:06,360 --> 00:37:09,160
So this is why research-oriented code

805
00:37:09,160 --> 00:37:11,520
does not seem to be necessary to be concerned

806
00:37:11,520 --> 00:37:13,800
about calculation speed and readability

807
00:37:13,800 --> 00:37:17,160
because a priority is in finding out

808
00:37:17,160 --> 00:37:19,960
the most efficient suitable machine learning model.

809
00:37:21,080 --> 00:37:21,920
So that's all.

810
00:37:23,080 --> 00:37:24,400
Thank you so much.

811
00:37:24,400 --> 00:37:25,240
Thank you.

812
00:37:25,240 --> 00:37:26,240
Thank you, Jesse.

813
00:37:26,240 --> 00:37:29,240
So the two friends go, well, come on, all right.

814
00:37:29,240 --> 00:37:30,840
If it's not Gregor the bracelet

815
00:37:30,840 --> 00:37:32,320
and it's not Vanya the dial, what is it?

816
00:37:32,320 --> 00:37:34,560
And so the Russian watchmaker goes, come with me.

817
00:37:34,560 --> 00:37:36,440
And he takes him to the back of the shop

818
00:37:36,440 --> 00:37:39,200
and in a dusty little pot, he finds this old watch

819
00:37:39,200 --> 00:37:41,000
and he points it and he goes, look here.

820
00:37:41,000 --> 00:37:42,200
It's a sort of nondescript watch.

821
00:37:42,200 --> 00:37:43,040
And they go, what?

822
00:37:43,040 --> 00:37:45,400
He goes, look, the second hand.

823
00:37:45,400 --> 00:37:48,560
The second hand on this watch is the first second hand

824
00:37:48,560 --> 00:37:49,800
I ever made in the world.

825
00:37:49,800 --> 00:37:50,640
And he goes, what?

826
00:37:50,640 --> 00:37:52,720
And he goes, look, it's a sort of nondescript watch.

827
00:37:52,760 --> 00:37:54,360
And he goes, look, the first second hand I ever made

828
00:37:54,360 --> 00:37:55,720
in the first ever watch.

829
00:37:55,720 --> 00:37:57,760
I call him Olaf.

830
00:37:57,760 --> 00:38:00,640
And you see, Olaf is counting along the time.

831
00:38:00,640 --> 00:38:02,440
And that is the true essence of a watch.

832
00:38:02,440 --> 00:38:04,160
And that's why I think it's the most beautiful object

833
00:38:04,160 --> 00:38:05,360
in the shop.

834
00:38:05,360 --> 00:38:07,800
And his two friends go, nah.

835
00:38:07,800 --> 00:38:09,360
And so they get into a huge argument about it.

836
00:38:09,360 --> 00:38:12,280
I think it's Olaf, I think it's Gregor, I think it's Vanya.

837
00:38:12,280 --> 00:38:15,200
And so they're gonna need an impartial third party referee

838
00:38:15,200 --> 00:38:16,360
to help them decide it.

839
00:38:16,360 --> 00:38:18,600
And I'll tell you who the third party referee is

840
00:38:18,600 --> 00:38:19,640
after Rebecca's talk.

841
00:38:19,640 --> 00:38:21,240
Please give Rebecca a huge hand.

842
00:38:21,400 --> 00:38:22,240
Thank you.

843
00:38:26,720 --> 00:38:28,760
Hello everyone, my name is Rebecca.

844
00:38:28,760 --> 00:38:32,040
I work at Google on a tool called PyType,

845
00:38:32,040 --> 00:38:34,920
which analyzes Python code for type errors.

846
00:38:34,920 --> 00:38:36,920
Now PyType is publicly available

847
00:38:36,920 --> 00:38:39,600
and it's hugely popular inside Google.

848
00:38:39,600 --> 00:38:42,600
But outside Google, people always have one particular

849
00:38:42,600 --> 00:38:43,840
question about it.

850
00:38:45,440 --> 00:38:49,360
There exists a popular Python type checker called MyPy.

851
00:38:49,360 --> 00:38:52,640
So the question is how is PyType different from MyPy?

852
00:38:52,640 --> 00:38:54,680
I'm gonna explain the two main differences

853
00:38:54,680 --> 00:38:56,840
and then show a code example for each.

854
00:38:57,880 --> 00:39:00,000
So let's start by talking about MyPy.

855
00:39:00,000 --> 00:39:02,760
MyPy has a philosophy of gradual typing,

856
00:39:02,760 --> 00:39:05,000
which means that you opt your code piecemeal

857
00:39:05,000 --> 00:39:07,960
into type checking by adding type annotations.

858
00:39:07,960 --> 00:39:10,840
MyPy is also a very strict type checker.

859
00:39:10,840 --> 00:39:12,560
It does not allow operations

860
00:39:12,560 --> 00:39:15,120
that change the types of objects.

861
00:39:15,120 --> 00:39:18,960
On the other hand, PyType analyzes all of your code,

862
00:39:18,960 --> 00:39:21,360
whether it has type annotations or not,

863
00:39:21,360 --> 00:39:24,120
and it uses type inference to figure out the types

864
00:39:24,120 --> 00:39:25,800
in unannotated parts.

865
00:39:25,800 --> 00:39:27,480
It's also more lenient.

866
00:39:27,480 --> 00:39:29,440
It will allow any operations

867
00:39:29,440 --> 00:39:31,440
that would be allowed in untyped code

868
00:39:31,440 --> 00:39:33,560
as long as you're not contradicting

869
00:39:33,560 --> 00:39:35,920
explicit type annotations.

870
00:39:35,920 --> 00:39:37,320
To make this more concrete,

871
00:39:37,320 --> 00:39:39,400
let's look at a couple examples.

872
00:39:39,400 --> 00:39:42,600
First, here we have a function f

873
00:39:42,600 --> 00:39:45,040
that returns a string in a function g

874
00:39:45,040 --> 00:39:48,340
that takes that string and adds it to an integer,

875
00:39:48,340 --> 00:39:50,500
which is wrong, doesn't work.

876
00:39:50,500 --> 00:39:54,820
Let's try to catch this bug with type checkers.

877
00:39:54,820 --> 00:39:58,660
First, with MyPy, we are adding type annotations

878
00:39:58,660 --> 00:40:01,380
to our code to opt it into type checking.

879
00:40:01,380 --> 00:40:04,740
We annotate g, so that's body is type checked,

880
00:40:04,740 --> 00:40:06,500
and then we annotate f,

881
00:40:06,500 --> 00:40:09,340
so that MyPy knows the type returned by f

882
00:40:09,340 --> 00:40:11,940
in the body of g, and then MyPy will say,

883
00:40:11,940 --> 00:40:14,220
hey, you're adding a string in an integer,

884
00:40:14,220 --> 00:40:15,540
this is a bad idea.

885
00:40:16,540 --> 00:40:20,020
On the other hand, when we use PyType,

886
00:40:20,020 --> 00:40:21,780
PyType will analyze this code

887
00:40:21,780 --> 00:40:24,500
even if it has no type annotations.

888
00:40:24,500 --> 00:40:27,620
What it will do is it will go into g,

889
00:40:27,620 --> 00:40:31,100
see that g calls f, and then analyze f

890
00:40:31,100 --> 00:40:33,340
to infer that it returns a string,

891
00:40:33,340 --> 00:40:35,940
and finally it says, hey, you're adding a string

892
00:40:35,940 --> 00:40:37,940
in an integer, bad idea.

893
00:40:40,220 --> 00:40:42,640
Now let's look at an example of strictness.

894
00:40:42,640 --> 00:40:44,500
Here we have a function getList

895
00:40:44,500 --> 00:40:47,260
that declares it returns a list of strings,

896
00:40:47,260 --> 00:40:49,980
but in the body, it creates a list of a string

897
00:40:49,980 --> 00:40:53,780
and then adds an integer to the list and returns that.

898
00:40:53,780 --> 00:40:57,060
An integer is not a string, so there's clearly a bug here,

899
00:40:57,060 --> 00:40:59,140
but on which line of code?

900
00:41:00,620 --> 00:41:02,820
Now if we use MyPy to analyze this,

901
00:41:02,820 --> 00:41:07,020
it will say that the error is on the second to last line,

902
00:41:07,020 --> 00:41:09,340
because remember, MyPy is very strict.

903
00:41:09,340 --> 00:41:11,740
It says you've created a list of strings.

904
00:41:11,740 --> 00:41:15,780
If you add an integer, you violate the type of that list,

905
00:41:15,780 --> 00:41:17,140
which is not allowed.

906
00:41:18,180 --> 00:41:22,180
But if you use PyType, PyType doesn't report an error

907
00:41:22,180 --> 00:41:24,140
until the very last line.

908
00:41:24,140 --> 00:41:26,420
This is because PyType says at runtime,

909
00:41:26,420 --> 00:41:29,140
you can put anything you want into a list.

910
00:41:29,140 --> 00:41:31,100
So you've created a list of strings.

911
00:41:31,100 --> 00:41:33,340
You've added an integer, and that's okay.

912
00:41:33,340 --> 00:41:34,800
That just mutates the type

913
00:41:34,800 --> 00:41:37,420
to be a list of strings and integers.

914
00:41:37,420 --> 00:41:39,860
However, this now no longer matches

915
00:41:39,900 --> 00:41:41,820
your declared return type.

916
00:41:41,820 --> 00:41:44,480
So then that very last line is an error.

917
00:41:45,580 --> 00:41:48,700
So to recap, I've talked about two type checkers

918
00:41:48,700 --> 00:41:50,940
with very different philosophies.

919
00:41:50,940 --> 00:41:53,980
MyPy does very strict type checking of code

920
00:41:53,980 --> 00:41:56,340
that explicitly opts into that checking

921
00:41:56,340 --> 00:41:58,480
by adding type annotations.

922
00:41:58,480 --> 00:42:02,340
And PyType does more lenient checking of all of your code

923
00:42:02,340 --> 00:42:04,180
by using type inference.

924
00:42:04,180 --> 00:42:05,500
Thank you.

925
00:42:05,820 --> 00:42:06,660
Thank you.

926
00:42:06,660 --> 00:42:07,500
Thank you.

927
00:42:07,500 --> 00:42:08,340
Thank you.

928
00:42:08,340 --> 00:42:09,160
Thank you.

929
00:42:09,160 --> 00:42:10,000
Thank you.

930
00:42:10,000 --> 00:42:10,840
Thank you.

931
00:42:10,840 --> 00:42:11,680
Thank you.

932
00:42:11,680 --> 00:42:13,220
So they need an impartial referee.

933
00:42:13,220 --> 00:42:15,420
So they get Tina Turner.

934
00:42:15,420 --> 00:42:16,940
And Tina Turner comes to the shop,

935
00:42:16,940 --> 00:42:17,820
and she says, what's going on here?

936
00:42:17,820 --> 00:42:18,980
And she says, well, they were arguing about

937
00:42:18,980 --> 00:42:21,980
which is the nicest watch, or part of a watch.

938
00:42:21,980 --> 00:42:25,060
And the first one says, oh, I think it's Gregor the bracelet.

939
00:42:25,060 --> 00:42:27,300
And the second one says, I think it's Vanity Dial.

940
00:42:27,300 --> 00:42:28,820
And then the actual watchmaker says,

941
00:42:28,820 --> 00:42:29,700
oh, I think it's Olaf.

942
00:42:29,700 --> 00:42:31,060
And Tina Turner goes, Olaf,

943
00:42:32,020 --> 00:42:35,740
What's Olaf got to do, got to do with it?

944
00:42:35,740 --> 00:42:40,000
What's Olaf but a second hand in motion?

945
00:42:46,820 --> 00:42:47,660
Thank you.

946
00:42:47,660 --> 00:42:48,980
I'm here all weekend.

947
00:42:48,980 --> 00:42:50,740
Please give Catherine a huge hand.

948
00:42:56,140 --> 00:42:56,980
All right.

949
00:42:56,980 --> 00:42:57,800
Hello, PyCon.

950
00:42:57,800 --> 00:42:58,640
This is DocAssemble.

951
00:42:58,640 --> 00:43:00,500
It's not my baby, but you've never heard of it,

952
00:43:00,500 --> 00:43:01,340
and you should.

953
00:43:01,340 --> 00:43:02,700
That's why I'm here.

954
00:43:02,700 --> 00:43:05,220
So I am not a full stack developer.

955
00:43:05,220 --> 00:43:06,980
Even when WASM comes out, I still won't be,

956
00:43:06,980 --> 00:43:08,900
because I can't do a style sheet to save my life.

957
00:43:08,900 --> 00:43:10,060
Maybe I should learn Anvil.

958
00:43:10,060 --> 00:43:12,460
But in the meantime, what I want to be able to do

959
00:43:12,460 --> 00:43:13,820
is just throw up a form here

960
00:43:13,820 --> 00:43:16,020
to collect some information from a user.

961
00:43:16,020 --> 00:43:18,460
And I want to be able to define it really easily.

962
00:43:18,460 --> 00:43:21,980
So that, for example, I could say we're making

963
00:43:21,980 --> 00:43:23,500
an application to collect data

964
00:43:23,500 --> 00:43:26,820
for potential ride share partners to PyOhio,

965
00:43:26,820 --> 00:43:28,740
where you're going to come in July, right?

966
00:43:28,740 --> 00:43:31,780
So what if you could define your questionnaire

967
00:43:31,780 --> 00:43:33,500
pretty simply like this?

968
00:43:33,500 --> 00:43:36,780
And yeah.

969
00:43:37,900 --> 00:43:39,300
What if it was that easy?

970
00:43:40,660 --> 00:43:42,260
Let's take the zeppelin, why not?

971
00:43:43,340 --> 00:43:44,900
The zeppelin can fit a lot of people.

972
00:43:44,900 --> 00:43:45,980
That's pretty cool.

973
00:43:45,980 --> 00:43:46,820
All right.

974
00:43:46,820 --> 00:43:49,780
So what this has done is it has gathered a bunch of data,

975
00:43:49,780 --> 00:43:52,940
and using a platform called DocAssemble,

976
00:43:52,940 --> 00:43:56,020
which is a high level platform

977
00:43:56,020 --> 00:43:58,780
that is used for two purposes.

978
00:43:58,780 --> 00:44:02,060
It collects data and then it assembles it into a document.

979
00:44:02,060 --> 00:44:05,900
Not into documentation, but into a,

980
00:44:05,900 --> 00:44:10,900
it's design purpose is to put that data into maybe a PDF,

981
00:44:11,820 --> 00:44:14,700
maybe a Microsoft Word document, something,

982
00:44:14,700 --> 00:44:17,660
a legal document, something with boilerplate paperwork.

983
00:44:17,660 --> 00:44:20,260
It will get shoved into a big metal filing cabinet.

984
00:44:21,260 --> 00:44:23,300
And that is why it is called DocAssemble.

985
00:44:23,300 --> 00:44:26,540
However, that's not the only thing it does.

986
00:44:26,540 --> 00:44:29,260
Before you put this information in there,

987
00:44:29,260 --> 00:44:31,420
you need to collect it from the user.

988
00:44:31,420 --> 00:44:33,900
And that's the part that I think is the most interesting,

989
00:44:33,900 --> 00:44:35,940
because going through an interview,

990
00:44:35,940 --> 00:44:38,580
as DocAssemble calls it, with a user, collecting data,

991
00:44:38,580 --> 00:44:40,340
that is not a rare or specialty problem.

992
00:44:40,340 --> 00:44:41,780
That's a really common problem.

993
00:44:41,780 --> 00:44:44,220
So DocAssemble has this name implying

994
00:44:44,220 --> 00:44:45,900
that it's a very specialized tool,

995
00:44:45,900 --> 00:44:48,020
but the truth is it also does something

996
00:44:48,020 --> 00:44:49,420
that is not so specialized.

997
00:44:49,420 --> 00:44:51,420
I wouldn't have called it DocAssemble if I'd written it.

998
00:44:51,420 --> 00:44:53,220
I would have called it Spanish Inquisition,

999
00:44:53,220 --> 00:44:54,060
but oh well.

1000
00:44:56,060 --> 00:44:58,340
So if you looked at this interview,

1001
00:44:58,340 --> 00:45:01,260
you will notice that it was YAML, which was pretty cool.

1002
00:45:01,260 --> 00:45:05,380
It was this very specialized DSL,

1003
00:45:05,380 --> 00:45:08,620
which just kind of describes the questions one to ask.

1004
00:45:08,620 --> 00:45:09,660
I don't know if you noticed

1005
00:45:09,660 --> 00:45:12,460
that there's no control flow in here.

1006
00:45:12,460 --> 00:45:17,220
So if I back up and I change my mind,

1007
00:45:19,020 --> 00:45:20,940
and I say, you know, we're having a problem

1008
00:45:20,940 --> 00:45:23,140
with the hydrogen in the zeppelin,

1009
00:45:23,140 --> 00:45:25,020
and we don't have any vehicles at all.

1010
00:45:25,020 --> 00:45:27,860
So can't provide a vehicle, so it just cuts straight to,

1011
00:45:27,860 --> 00:45:29,500
thank you, we'll see if we can find you

1012
00:45:29,500 --> 00:45:30,740
a ride share partner.

1013
00:45:30,740 --> 00:45:32,460
Where's the code that said, okay,

1014
00:45:32,460 --> 00:45:34,740
now we don't have to ask for the type of vehicle?

1015
00:45:34,740 --> 00:45:35,940
It is actually not in here,

1016
00:45:35,940 --> 00:45:39,180
because DocAssemble works backward from the end.

1017
00:45:39,180 --> 00:45:42,220
It looked at my final slide, saw that I didn't,

1018
00:45:42,220 --> 00:45:44,300
or my final question, saw that I didn't need

1019
00:45:44,300 --> 00:45:46,740
any vehicle details, and so it skipped those over.

1020
00:45:46,740 --> 00:45:49,540
It's an interesting way to structure an application.

1021
00:45:49,620 --> 00:45:52,220
You can specify control flow if you really want to,

1022
00:45:52,220 --> 00:45:54,860
but generally you don't want to, and you don't need to.

1023
00:45:56,580 --> 00:45:57,740
Now let me see if I can,

1024
00:46:00,380 --> 00:46:03,140
sorry, the screen has me confused.

1025
00:46:03,140 --> 00:46:06,140
So it's in Python, it's extensible in Python,

1026
00:46:06,140 --> 00:46:07,980
you can include chunks of Python in it,

1027
00:46:07,980 --> 00:46:09,100
that's all really cool.

1028
00:46:09,100 --> 00:46:11,820
The documentation is absolutely amazing,

1029
00:46:11,820 --> 00:46:15,020
including every time they show you a piece of syntax,

1030
00:46:15,020 --> 00:46:18,860
they link to a live demonstration online,

1031
00:46:18,860 --> 00:46:20,820
so we could actually do,

1032
00:46:24,540 --> 00:46:26,380
I think the touchscreen isn't hooked up

1033
00:46:26,380 --> 00:46:28,540
with the dual screens, but in any case,

1034
00:46:28,540 --> 00:46:31,420
amazing documentation, tons of batteries included

1035
00:46:31,420 --> 00:46:35,580
to easily do all sorts of tasks, mostly centered around

1036
00:46:35,580 --> 00:46:38,580
if you're gathering information to produce legal documents,

1037
00:46:38,580 --> 00:46:40,000
the community this came out of,

1038
00:46:40,000 --> 00:46:41,860
but a lot of really interesting stuff.

1039
00:46:42,980 --> 00:46:45,460
The batteries are welded in.

1040
00:46:45,460 --> 00:46:48,220
If you don't want to generate PDFs, tough,

1041
00:46:48,260 --> 00:46:49,860
the libraries are there, that is something

1042
00:46:49,860 --> 00:46:51,620
that I would love somebody to weight in there

1043
00:46:51,620 --> 00:46:53,420
and make it removable.

1044
00:46:53,420 --> 00:46:55,460
The workflow is kind of designed around people

1045
00:46:55,460 --> 00:46:57,900
who aren't professional coders, as described,

1046
00:46:57,900 --> 00:47:00,580
you can figure out how to hook it into your IDE,

1047
00:47:00,580 --> 00:47:02,700
but that's not the way the documentation points you,

1048
00:47:02,700 --> 00:47:03,820
so that's kind of an issue,

1049
00:47:03,820 --> 00:47:05,900
and then the big problem with it is just that

1050
00:47:05,900 --> 00:47:07,760
it's kind of unknown among you folks,

1051
00:47:07,760 --> 00:47:10,180
so even though DocAssemble has its own community,

1052
00:47:10,180 --> 00:47:13,700
its own Slack channel, its own people answering questions,

1053
00:47:13,700 --> 00:47:14,880
there hasn't been a lot of contact

1054
00:47:14,880 --> 00:47:17,580
with the greater Python and PyCon community,

1055
00:47:17,580 --> 00:47:18,420
I hope that'll change,

1056
00:47:18,420 --> 00:47:20,940
they're actually running their own conference.

1057
00:47:20,940 --> 00:47:23,620
These talks are online in my GitHub, give it a try,

1058
00:47:23,620 --> 00:47:25,220
I hope you like it.

1059
00:47:25,700 --> 00:47:26,700
Thank you everyone.

1060
00:47:26,700 --> 00:47:29,700
Our next speaker is Anthony, please give him a huge hand.

1061
00:47:33,700 --> 00:47:35,380
Hello, my name is Anthony Lupinetti,

1062
00:47:35,380 --> 00:47:39,140
and I founded and run a non-profit called Open Source Kids,

1063
00:47:39,140 --> 00:47:42,980
and our mission is to teach the children of New Mexico

1064
00:47:42,980 --> 00:47:46,460
computer science, and by children I mean specifically

1065
00:47:46,460 --> 00:47:48,140
kindergarten and high school,

1066
00:47:48,140 --> 00:47:51,060
and I'm also a teacher at the University of New Mexico,

1067
00:47:51,060 --> 00:47:53,580
and I'm also a teacher at the University of New Mexico,

1068
00:47:53,620 --> 00:47:55,620
means specifically kindergartners

1069
00:47:55,620 --> 00:47:56,800
through fifth grade students,

1070
00:47:56,800 --> 00:47:59,520
five year old to 11 year old students,

1071
00:47:59,520 --> 00:48:01,500
and today I'm gonna tell you about

1072
00:48:01,500 --> 00:48:03,820
something that I use in my teaching,

1073
00:48:03,820 --> 00:48:06,460
when I teach fourth and fifth graders Python,

1074
00:48:06,460 --> 00:48:09,660
I use something called Snappy Code that I created.

1075
00:48:09,660 --> 00:48:14,420
So Snappy Code is a Blockly implementation of Python 3.7,

1076
00:48:14,420 --> 00:48:16,660
and it's designed specifically to help

1077
00:48:16,660 --> 00:48:18,580
young students learn Python,

1078
00:48:18,580 --> 00:48:21,700
and so far I've used it in about three schools

1079
00:48:21,700 --> 00:48:25,500
with 1200 students since 2015,

1080
00:48:25,500 --> 00:48:29,500
and what can you do with Snappy Code, what can kids do?

1081
00:48:29,500 --> 00:48:32,180
Well, they can create programs with blocks,

1082
00:48:32,180 --> 00:48:34,100
most of the students that I'm talking about

1083
00:48:34,100 --> 00:48:37,700
can't type large quantities of code correctly

1084
00:48:37,700 --> 00:48:41,460
without some difficulty, so we use block based code,

1085
00:48:41,460 --> 00:48:44,100
we can focus on concepts, not syntax,

1086
00:48:44,100 --> 00:48:46,940
and they can see immediate results

1087
00:48:46,940 --> 00:48:48,500
right there in their screen,

1088
00:48:48,500 --> 00:48:51,260
they can learn from examples, they can debug problems,

1089
00:48:51,260 --> 00:48:54,860
they can make art, we augment their STEM learning

1090
00:48:54,860 --> 00:48:57,860
by working on geometry, things like angles

1091
00:48:57,860 --> 00:49:00,380
and number of sides and shapes, that sort of thing,

1092
00:49:00,380 --> 00:49:03,620
and we can control hardware, which we do in fifth grade,

1093
00:49:03,620 --> 00:49:06,420
things like micro bits and the Circuit Playground Express

1094
00:49:06,420 --> 00:49:09,180
that everybody got in their swag bags.

1095
00:49:09,180 --> 00:49:11,960
So what's included in Snappy Code,

1096
00:49:11,960 --> 00:49:14,660
here's a short list of what's included,

1097
00:49:14,660 --> 00:49:16,940
lots of different things from Python,

1098
00:49:16,940 --> 00:49:20,880
all of the basics, and a number of libraries to boot.

1099
00:49:20,880 --> 00:49:22,960
So I thought I would show you a little bit about what we do,

1100
00:49:22,960 --> 00:49:25,880
this is a screenshot of one program,

1101
00:49:25,880 --> 00:49:30,280
but let's go to this,

1102
00:49:30,280 --> 00:49:33,640
and after we learn the basics of how to use Snappy Code,

1103
00:49:33,640 --> 00:49:36,280
we learn that there are toolboxes that we can choose,

1104
00:49:36,280 --> 00:49:39,400
we can save blocks, we can run examples,

1105
00:49:39,400 --> 00:49:41,880
we then would move on to something

1106
00:49:41,880 --> 00:49:42,960
a little bit more complicated

1107
00:49:42,960 --> 00:49:44,640
where we're building bigger programs

1108
00:49:44,640 --> 00:49:46,760
and we're learning something about how Python works.

1109
00:49:46,760 --> 00:49:49,440
In this example, they're learning about print,

1110
00:49:49,440 --> 00:49:50,920
they're learning a little bit about numbers

1111
00:49:50,920 --> 00:49:54,160
and what the operators in Python look like,

1112
00:49:54,160 --> 00:49:56,920
and the users would click run,

1113
00:49:56,920 --> 00:49:59,600
and in the terminal on the side of the screen,

1114
00:49:59,600 --> 00:50:01,160
you would see the printout

1115
00:50:01,160 --> 00:50:04,240
just as if you were to type this and run it,

1116
00:50:04,240 --> 00:50:07,000
and then on the side they see a printout of the Python code,

1117
00:50:07,000 --> 00:50:08,440
we can save that Python code

1118
00:50:08,440 --> 00:50:11,880
and run it however we like in the future.

1119
00:50:11,880 --> 00:50:15,920
If we move on from basic concepts,

1120
00:50:15,920 --> 00:50:18,880
like how to use the tools and what a print is,

1121
00:50:18,920 --> 00:50:21,400
we move on to something like Turtle Graphics,

1122
00:50:21,400 --> 00:50:24,280
where we can explore concepts in a graphical way.

1123
00:50:25,080 --> 00:50:28,400
So this program is designed to make a shape.

1124
00:50:28,400 --> 00:50:30,960
So we would write this program together,

1125
00:50:30,960 --> 00:50:33,000
this would be fourth graders, we would run it,

1126
00:50:33,000 --> 00:50:35,520
and it would open up a screen

1127
00:50:35,520 --> 00:50:38,800
showing our Turtle Graphics window, we see a triangle,

1128
00:50:38,800 --> 00:50:41,120
and we might proceed from something like this

1129
00:50:41,120 --> 00:50:43,240
to working on loops.

1130
00:50:43,240 --> 00:50:45,840
We might grab a for loop, talk about patterns,

1131
00:50:45,840 --> 00:50:47,920
and while we were talking about patterns,

1132
00:50:47,920 --> 00:50:49,920
we would talk about looping,

1133
00:50:49,920 --> 00:50:52,520
we would learn how to use our loop structure

1134
00:50:52,520 --> 00:50:56,920
in Snappy code and Python, we would identify patterns,

1135
00:50:56,920 --> 00:50:59,960
put them in our loops and run our code,

1136
00:50:59,960 --> 00:51:02,280
and we would see that we can make the same shape

1137
00:51:02,280 --> 00:51:03,480
much more simply.

1138
00:51:03,480 --> 00:51:06,000
And if we wanted to, we could then explore

1139
00:51:07,920 --> 00:51:09,640
by changing numbers,

1140
00:51:09,640 --> 00:51:12,560
looking at the relationship between sides and angles.

1141
00:51:13,120 --> 00:51:15,040
So that's a very powerful way for them to reinforce

1142
00:51:15,040 --> 00:51:17,440
the geometry that they're already learning.

1143
00:51:17,440 --> 00:51:21,640
After that, we may move on to more complicated ideas.

1144
00:51:21,640 --> 00:51:24,400
In fifth grade, we incorporate hardware.

1145
00:51:24,400 --> 00:51:27,040
I have a Circuit Playground Express here,

1146
00:51:27,040 --> 00:51:30,640
it's flashing some Morse code, SOS,

1147
00:51:30,640 --> 00:51:34,880
so if anyone wants to SOS me, that would be great.

1148
00:51:34,880 --> 00:51:36,240
But what we're going to do with this

1149
00:51:36,240 --> 00:51:38,400
is see how we might use this

1150
00:51:38,400 --> 00:51:43,400
to run something like a rainbow.

1151
00:51:44,400 --> 00:51:48,240
And this is taken off of the Adafruit tutorial examples,

1152
00:51:48,240 --> 00:51:51,120
and what we would do with this one is not run it,

1153
00:51:51,120 --> 00:51:53,000
but rather save it.

1154
00:51:53,000 --> 00:51:57,080
We would find our Circuit Playground right here,

1155
00:51:57,080 --> 00:52:01,080
we would save it as code.py,

1156
00:52:01,080 --> 00:52:03,600
and we would push the code,

1157
00:52:03,600 --> 00:52:07,480
and in a second it would start producing our rainbow effect.

1158
00:52:07,480 --> 00:52:10,000
And then we could move on to change this

1159
00:52:10,000 --> 00:52:10,800
in many different ways.

1160
00:52:10,800 --> 00:52:12,760
You can see here we're using more sophisticated concepts

1161
00:52:12,760 --> 00:52:14,160
like functions.

1162
00:52:14,160 --> 00:52:17,520
So if you're interested in learning more about this,

1163
00:52:17,520 --> 00:52:20,960
you can go to snappycode.org,

1164
00:52:20,960 --> 00:52:23,200
there will be a version of this posted online,

1165
00:52:23,200 --> 00:52:25,560
or you can go to GitHub and download

1166
00:52:25,560 --> 00:52:27,520
an installable version for Mac,

1167
00:52:27,520 --> 00:52:30,520
and in the near future, Linux and Raspberry Pi,

1168
00:52:30,520 --> 00:52:32,840
or follow us on at snappycode.

1169
00:52:32,840 --> 00:52:37,000
And I'm also hosting an open space tomorrow,

1170
00:52:37,000 --> 00:52:38,920
10.30 to noon, if you'd like to learn more about it,

1171
00:52:38,920 --> 00:52:40,440
or discuss lesson plans.

1172
00:52:40,440 --> 00:52:42,560
So thank you very much for your attention,

1173
00:52:42,560 --> 00:52:43,960
and I hope to see you tomorrow.

1174
00:52:43,960 --> 00:52:52,360
Thank you very much.

1175
00:52:52,360 --> 00:52:57,520
What do you call an apposite pachyderm?

1176
00:52:57,520 --> 00:53:00,040
This is a joke that relies strongly on the audience

1177
00:53:00,040 --> 00:53:02,080
knowing the meanings of both the words apposite

1178
00:53:02,080 --> 00:53:04,520
and the word pachyderm.

1179
00:53:04,520 --> 00:53:09,880
But the answer is irrelevant.

1180
00:53:09,880 --> 00:53:12,360
Yeah, I made that one up.

1181
00:53:12,400 --> 00:53:14,040
So please give our last speaker a huge hand,

1182
00:53:14,040 --> 00:53:15,280
his name is Chris.

1183
00:53:15,280 --> 00:53:22,080
Thank you all for staying for the last lightning talk

1184
00:53:22,080 --> 00:53:23,640
of our first day here.

1185
00:53:23,640 --> 00:53:25,520
I'm going to talk to you about a less kind,

1186
00:53:25,520 --> 00:53:27,760
less gentle sort of data frame.

1187
00:53:27,760 --> 00:53:30,560
So I've used pandas for over six years now,

1188
00:53:30,560 --> 00:53:34,040
and I can say it has vastly increased my productivity.

1189
00:53:34,040 --> 00:53:35,720
And for that, I'm tremendously grateful

1190
00:53:35,720 --> 00:53:39,760
to the pandas developers for their contributions.

1191
00:53:39,760 --> 00:53:41,560
Pandas, critical to pandas utility

1192
00:53:41,600 --> 00:53:44,720
is its efficient performance, its powerful routines,

1193
00:53:44,720 --> 00:53:46,520
and its concise syntax.

1194
00:53:46,520 --> 00:53:49,880
But not so critical to it are its what I would call

1195
00:53:49,880 --> 00:53:52,240
kinder and gentler API.

1196
00:53:52,240 --> 00:53:54,800
That is, there's very often multiple convenient ways

1197
00:53:54,800 --> 00:53:56,360
to do the same thing.

1198
00:53:56,360 --> 00:53:58,160
And while this might be quite appropriate for data

1199
00:53:58,160 --> 00:54:01,280
extrapolation, data exploration, and notebooks,

1200
00:54:01,280 --> 00:54:04,240
isn't really appropriate for every use case.

1201
00:54:04,240 --> 00:54:06,600
In my practice, I'm building libraries and applications

1202
00:54:06,600 --> 00:54:08,560
for financial systems.

1203
00:54:08,600 --> 00:54:11,600
And I find that pandas is often a little too kind

1204
00:54:11,600 --> 00:54:12,600
and too gentle.

1205
00:54:13,800 --> 00:54:17,360
In my practice, I do not want kindness or forgiveness.

1206
00:54:17,360 --> 00:54:19,960
I don't want gentleness or accommodation.

1207
00:54:19,960 --> 00:54:22,800
What I want are discrete and strict interfaces,

1208
00:54:22,800 --> 00:54:25,400
pure functions, and fast failures.

1209
00:54:26,760 --> 00:54:28,680
For that reason, we created a static frame.

1210
00:54:28,680 --> 00:54:30,600
Static frame offers an alternative to pandas

1211
00:54:30,600 --> 00:54:32,560
dependent only on NumPy.

1212
00:54:32,560 --> 00:54:35,400
It's been in development at research affiliates since 2017.

1213
00:54:35,400 --> 00:54:37,560
Our first open source was in 2018,

1214
00:54:37,560 --> 00:54:39,600
and we're already using it in production.

1215
00:54:40,680 --> 00:54:44,480
So while pandas is kind in allowing you to set

1216
00:54:44,480 --> 00:54:46,800
any column you want to be an index,

1217
00:54:46,800 --> 00:54:48,480
even if that index is not unique,

1218
00:54:48,480 --> 00:54:51,080
and even if that resulting index is going to be

1219
00:54:51,080 --> 00:54:53,760
kind of awkward to deal with later on,

1220
00:54:53,760 --> 00:54:56,320
pandas will happily let you set it as an index.

1221
00:54:56,320 --> 00:54:57,640
Static frame is less kind.

1222
00:54:57,640 --> 00:55:00,520
Static frame insists that all indices are unique,

1223
00:55:00,520 --> 00:55:02,680
and if you try to create an index with something

1224
00:55:02,680 --> 00:55:05,440
that is not unique, you get a handy exception.

1225
00:55:06,440 --> 00:55:09,480
While pandas is very kind in allowing you

1226
00:55:09,480 --> 00:55:12,160
to do multiple things with the get item syntax,

1227
00:55:12,160 --> 00:55:14,680
the get item syntax can be used to select a column,

1228
00:55:14,680 --> 00:55:16,960
that's its overwhelming use case, I would say.

1229
00:55:16,960 --> 00:55:18,800
It can also be used as a little shortcut

1230
00:55:18,800 --> 00:55:23,800
to given a Boolean list or array to actually select rows.

1231
00:55:23,840 --> 00:55:27,240
It can be used both for selecting columns and for rows.

1232
00:55:27,240 --> 00:55:28,840
Static frame is less kind.

1233
00:55:28,840 --> 00:55:31,000
Static frame insists that the get item syntax

1234
00:55:31,000 --> 00:55:33,240
is only used for selecting columns,

1235
00:55:33,240 --> 00:55:34,560
and if you want to select rows,

1236
00:55:34,560 --> 00:55:36,720
you need to use an LOC selection.

1237
00:55:39,360 --> 00:55:43,920
While pandas is kind in allowing you to wrap an array,

1238
00:55:43,920 --> 00:55:46,480
so for example, here, I create an array

1239
00:55:46,480 --> 00:55:48,720
and I give that to a data frame,

1240
00:55:48,720 --> 00:55:52,160
I can mutate that array external to my data frame,

1241
00:55:52,160 --> 00:55:54,360
and those mutations show up in my data frame.

1242
00:55:54,360 --> 00:55:57,160
Pandas is very nicely wrapping the array

1243
00:55:57,160 --> 00:55:59,480
and providing an alternative interface

1244
00:55:59,480 --> 00:56:03,040
and yet an alternative way to mutate that frame.

1245
00:56:03,040 --> 00:56:04,280
Static frame is less kind.

1246
00:56:04,960 --> 00:56:07,320
Static frame only wraps immutable arrays,

1247
00:56:07,320 --> 00:56:09,560
and as such, if you give it an array,

1248
00:56:09,560 --> 00:56:11,960
static frame is gonna take it and make it immutable,

1249
00:56:11,960 --> 00:56:14,220
and you will no longer be able to mutate

1250
00:56:14,220 --> 00:56:15,920
the lingering reference hanging over

1251
00:56:15,920 --> 00:56:17,560
from after your creation.

1252
00:56:19,640 --> 00:56:21,680
Finally, while pandas is very kind

1253
00:56:21,680 --> 00:56:23,320
and giving you lots of flexible ways

1254
00:56:23,320 --> 00:56:26,640
to mutate your data frames, for example,

1255
00:56:26,640 --> 00:56:29,080
functions like sort values allow you

1256
00:56:29,080 --> 00:56:30,320
to use an in place argument,

1257
00:56:30,320 --> 00:56:32,880
so you can mutate your frame in place.

1258
00:56:32,880 --> 00:56:36,440
Similarly, you can directly assign to a data frame

1259
00:56:36,440 --> 00:56:38,160
using an assignment statement.

1260
00:56:38,160 --> 00:56:39,960
Pandas offers lots of flexible ways

1261
00:56:39,960 --> 00:56:42,680
to mutate your data frames in place.

1262
00:56:42,680 --> 00:56:44,760
Static frame is far less kind.

1263
00:56:44,760 --> 00:56:47,720
Static frame is based on immutable NumPy arrays,

1264
00:56:47,720 --> 00:56:50,320
and as such, you cannot mutate the internal data.

1265
00:56:50,320 --> 00:56:52,400
If you wanna call a function like sort values,

1266
00:56:52,400 --> 00:56:54,000
it will give you a new frame.

1267
00:56:54,000 --> 00:56:56,080
If you wanna actually mutate a value,

1268
00:56:56,080 --> 00:57:00,240
well, you cannot do an LOC assignment into a frame.

1269
00:57:00,240 --> 00:57:02,700
Instead, you use an assignment like interface

1270
00:57:03,520 --> 00:57:05,500
that through a function call gives you a new frame,

1271
00:57:05,500 --> 00:57:08,380
never mutating your original frame.

1272
00:57:08,380 --> 00:57:10,260
Now, we all know kindness is a virtue,

1273
00:57:11,220 --> 00:57:14,140
but sometimes not in our APIs.

1274
00:57:14,140 --> 00:57:18,280
Less kind, less gentle APIs reduce opportunities for error,

1275
00:57:18,280 --> 00:57:21,180
aid in refactoring and testing, and promote better code.

1276
00:57:22,920 --> 00:57:24,600
So please check out static frame.

1277
00:57:24,600 --> 00:57:26,060
It's an initiative that we've been working on

1278
00:57:26,060 --> 00:57:27,320
for a few years.

1279
00:57:27,320 --> 00:57:28,780
We'd be interested to hear your comments,

1280
00:57:28,780 --> 00:57:31,900
ideas, and suggestions, and you can come talk to us

1281
00:57:31,940 --> 00:57:33,680
at the research affiliates job fair on Sunday.

1282
00:57:33,680 --> 00:57:35,340
Thank you very much.

1283
00:57:35,340 --> 00:57:40,340
Thank you very much to each and every single one

1284
00:57:43,420 --> 00:57:44,780
of our lightning talk speakers.

1285
00:57:44,780 --> 00:57:47,020
Thanks and very much to each and everyone of you

1286
00:57:47,020 --> 00:57:47,980
for coming into this room,

1287
00:57:47,980 --> 00:57:49,080
for giving them a round of applause,

1288
00:57:49,080 --> 00:57:50,260
for giving them your attention.

1289
00:57:50,260 --> 00:57:52,260
Thank you for being here at this conference.

1290
00:57:52,260 --> 00:57:53,980
Thank you if you're a speaker, or a volunteer,

1291
00:57:53,980 --> 00:57:54,900
or an attendee.

1292
00:57:54,900 --> 00:57:57,020
I hope you've really enjoyed your first day.

1293
00:57:57,020 --> 00:57:58,020
I certainly have.

1294
00:57:58,020 --> 00:57:59,780
Please sign up to give more lightning talks.

1295
00:57:59,780 --> 00:58:01,140
There's some tomorrow morning, tomorrow evening,

1296
00:58:01,140 --> 00:58:04,340
Sunday morning. Enjoy the whole of the rest of the conference. Have a lovely

1297
00:58:04,340 --> 00:58:09,300
evening and I'll see you all tomorrow or tonight or sometime. Hooray!

