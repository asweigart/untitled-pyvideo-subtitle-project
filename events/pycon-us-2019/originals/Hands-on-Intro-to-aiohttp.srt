1
00:00:00,000 --> 00:00:18,000
Welcome everyone.

2
00:00:18,000 --> 00:00:21,000
I just want to give a brief introduction.

3
00:00:21,000 --> 00:00:25,000
So my name is Marietta and I'm one of the Python core developers.

4
00:00:25,000 --> 00:00:34,000
I come from Vancouver, Canada and I work at Zapier building web applications with Django.

5
00:00:34,000 --> 00:00:43,000
But in the past few years I've contributed to open source and I've built various web services with AIO HTTP.

6
00:00:43,000 --> 00:00:47,000
I think it's a cool library that we all should know about.

7
00:00:47,000 --> 00:00:51,000
So that's why I wanted to give this tutorial.

8
00:00:51,000 --> 00:00:55,000
I'm just going to introduce my co-presenter, Andrew Swetlov.

9
00:00:55,000 --> 00:01:00,000
Hi, I'm Andrew from Kiev, Ukraine.

10
00:01:00,000 --> 00:01:03,000
I'm also a Python core developer.

11
00:01:03,000 --> 00:01:13,000
I work mostly on async.io part of Python and I'm an author of AIO HTTP and current container.

12
00:01:13,000 --> 00:01:18,000
I'm a Python trainer.

13
00:01:18,000 --> 00:01:24,000
To help today I have two TAs, Stefan and...

14
00:01:24,000 --> 00:01:30,000
Do you want to introduce yourself?

15
00:01:30,000 --> 00:01:35,000
Alright, yeah, they are Stefan, Python core developer and...

16
00:01:35,000 --> 00:01:39,000
Svetl... Svetl... Svetl... Sorry.

17
00:01:39,000 --> 00:01:40,000
Svetl... Svetl... Sorry.

18
00:01:40,000 --> 00:01:50,000
Yes, he's been building some GitHub bots together and he uses AIO HTTP so we're all in good hands.

19
00:01:50,000 --> 00:01:56,000
Before I start I just want to mention about this postage.

20
00:01:56,000 --> 00:02:08,000
So the green ones, if you are going through as we go through the tutorial and you're doing good, you finish the exercise, you can put that up so I know that you're done.

21
00:02:08,000 --> 00:02:15,000
But if you have troubles you can put out the red one and one of us will look into it with you.

22
00:02:15,000 --> 00:02:22,000
So if you don't have one I think we have them at the front there.

23
00:02:22,000 --> 00:02:27,000
Alright, so let's talk about AIO HTTP. What is AIO HTTP?

24
00:02:27,000 --> 00:02:43,000
It is a web framework for async.io. If you're familiar with Django or Flask this is another of that kind of framework.

25
00:02:43,000 --> 00:02:49,000
So what is... Oh, before I start again.

26
00:02:49,000 --> 00:02:55,000
I just want to make sure everybody has Python 3.7 installed. Yes?

27
00:02:55,000 --> 00:03:04,000
Alright, and you have all the requirements installed. There is an update to the requirements file.

28
00:03:04,000 --> 00:03:09,000
A couple hours ago you might need to reinstall. Sorry about that.

29
00:03:09,000 --> 00:03:15,000
And you can test if you have Python 3.7 by running this code.

30
00:03:15,000 --> 00:03:29,000
This portion down here is just a list of documentations that you might want to refer to but we're not going to go through this in details but it's there if you need them.

31
00:03:29,000 --> 00:03:35,000
And again the URL of this is in the class notes. You can check them out.

32
00:03:35,000 --> 00:03:43,000
Alright, now let's go back to async.io. What does it mean to be asynchronous?

33
00:03:43,000 --> 00:03:54,000
I just want to give a brief example just to get ourselves quickly familiarized with async.io and then we can go into the web service web framework.

34
00:03:54,000 --> 00:04:00,000
Suppose you have a long running task and you need to run them multiple times.

35
00:04:00,000 --> 00:04:11,000
Traditionally when you run Python code you will start one task, wait for it to finish and then run another task.

36
00:04:11,000 --> 00:04:16,000
Right? And this is a small code example to demonstrate that.

37
00:04:16,000 --> 00:04:25,000
So suppose I have this task that can take time. I would have to run them one by one.

38
00:04:25,000 --> 00:04:34,000
And you can see the output. That's an extra one. The correct output is down here.

39
00:04:34,000 --> 00:04:42,000
You will see that start a task, finish, start another task, finish and then start another task.

40
00:04:42,000 --> 00:04:46,000
And the total time, it takes a while.

41
00:04:46,000 --> 00:05:03,000
Now how is async.io different? With async.io the different tasks will be started simultaneously and then finished at different times.

42
00:05:03,000 --> 00:05:11,000
So the total time takes, it's shorter than if you are to run that synchronously.

43
00:05:11,000 --> 00:05:21,000
So I'm just going to show an example like how to get started with async.io.

44
00:05:21,000 --> 00:05:36,000
So suppose the regular, the user function will look like this.

45
00:05:36,000 --> 00:06:02,000
Start time, begin, sleep time.

46
00:06:02,000 --> 00:06:10,000
Sorry.

47
00:06:10,000 --> 00:06:17,000
Awake. And you would run it like this, right? Say two seconds.

48
00:06:17,000 --> 00:06:33,000
And it's kind of small but that's how it works. And if you have more than one, you would call it multiple times like this.

49
00:06:33,000 --> 00:06:37,000
It takes time so I'm not going to run too many.

50
00:06:37,000 --> 00:06:45,000
So now how do we convert this into async.io?

51
00:06:45,000 --> 00:06:50,000
So the first step is adding the async. Just like that.

52
00:06:50,000 --> 00:07:01,000
Now this is called a coroutine. But you can't, the way you run it is not by just simply running the code.

53
00:07:01,000 --> 00:07:10,000
It does not work. It will complain like that is coroutine, was never awaited, this is not how you run it.

54
00:07:10,000 --> 00:07:22,000
So to run this, you have three options. One is by using async.io.run.

55
00:07:22,000 --> 00:07:38,000
And then async.io.run that. I'm just running it in here.

56
00:07:38,000 --> 00:07:48,000
What's my async.py? So that's the output. So now it's running. You see the code is being executed.

57
00:07:48,000 --> 00:07:54,000
That is one way to execute the async coroutine.

58
00:07:54,000 --> 00:08:05,000
Another way to execute the coroutine is calling await.

59
00:08:05,000 --> 00:08:08,000
Like that.

60
00:08:08,000 --> 00:08:21,000
Right? That is the right way. But it will complain that await outside of function.

61
00:08:21,000 --> 00:08:27,000
That's still not right. So basically you will need to do async.io.

62
00:08:27,000 --> 00:08:31,000
You will create another coroutine.

63
00:08:31,000 --> 00:08:43,000
Run task.

64
00:08:43,000 --> 00:08:49,000
Something like that. This is just to show you how you would execute, like call another coroutine from another coroutine.

65
00:08:49,000 --> 00:08:53,000
Maria, for correctness you have to replace time sleep with...

66
00:08:53,000 --> 00:09:05,000
Oh yes, that is right. Sorry. Async.io.time sleep. Yes, await. That is a coroutine. Thank you.

67
00:09:05,000 --> 00:09:16,000
So now it's running. So that's just a brief example. And it's not exciting.

68
00:09:16,000 --> 00:09:26,000
So the next one. This has a more complete example. You can take a look at that.

69
00:09:26,000 --> 00:09:41,000
Now, again let's go back to AIO HTTP. Now we know about async.io. It can help us save time. You can run things concurrently.

70
00:09:41,000 --> 00:09:48,000
But what can we do about it? What can we do with it?

71
00:09:48,000 --> 00:10:01,000
The web frameworks like Django and Flux, they do not support async.io. So if you need to use async.io with those web frameworks, you can do that.

72
00:10:01,000 --> 00:10:12,000
So this is where you might need to use an async web framework like AIO HTTP.

73
00:10:12,000 --> 00:10:22,000
And I want to give a brief example like how using AIO HTTP to do web scraping.

74
00:10:22,000 --> 00:10:29,000
Because it seems like everybody wants to scrap data from the internet and use it and analyze.

75
00:10:29,000 --> 00:10:39,000
This is just a fun little example. Say I would like to scrape web 8010.

76
00:10:39,000 --> 00:10:51,000
First I'll show you how it's done without AIO HTTP. Usually you would use request library.

77
00:10:51,000 --> 00:11:08,000
Client.py. Import request. And with request is easy. Request get.

78
00:11:08,000 --> 00:11:26,000
Whoops. Is that content?

79
00:11:26,000 --> 00:11:33,000
Client.py. So it's going and it's fetching data. It's straightforward.

80
00:11:33,000 --> 00:11:50,000
Now let's try to do this in AIO HTTP. Remember we need to have a coroutine that does things.

81
00:11:50,000 --> 00:11:59,000
And the code to do that is...

82
00:11:59,000 --> 00:12:08,000
So is AIO HTTP run app.

83
00:12:08,000 --> 00:12:13,000
No, no, no. Just async.io run for client.

84
00:12:13,000 --> 00:12:26,000
With AIO HTTP.

85
00:12:26,000 --> 00:12:43,000
Client. Session.

86
00:12:43,000 --> 00:12:45,000
With...

87
00:12:45,000 --> 00:12:51,000
Async please.

88
00:12:51,000 --> 00:12:55,000
And square brackets to create a class.

89
00:12:55,000 --> 00:12:58,000
You need instance of client session.

90
00:12:58,000 --> 00:13:01,000
I like it.

91
00:13:01,000 --> 00:13:08,000
I mean just this one.

92
00:13:08,000 --> 00:13:12,000
So it will look like this.

93
00:13:12,000 --> 00:13:21,000
So it looks similar except you will need to have coroutines to do that.

94
00:13:21,000 --> 00:13:24,000
Wait.

95
00:13:24,000 --> 00:13:28,000
URL.

96
00:13:28,000 --> 00:13:31,000
Wait.

97
00:13:31,000 --> 00:13:33,000
Maybe.

98
00:13:33,000 --> 00:13:39,000
And text is a function.

99
00:13:39,000 --> 00:13:59,000
So that is...

100
00:13:59,000 --> 00:14:01,000
It's not text.

101
00:14:01,000 --> 00:14:03,000
What's going on?

102
00:14:03,000 --> 00:14:06,000
Please switch back.

103
00:14:06,000 --> 00:14:09,000
Wait. No, no, no. That's fine.

104
00:14:09,000 --> 00:14:13,000
Return back.

105
00:14:13,000 --> 00:14:16,000
Wait.

106
00:14:16,000 --> 00:14:19,000
Data text.

107
00:14:19,000 --> 00:14:26,000
It's okay but get is also a coroutine.

108
00:14:26,000 --> 00:14:30,000
So...

109
00:14:30,000 --> 00:14:37,000
Thank you.

110
00:14:37,000 --> 00:14:39,000
Alright. So now we got the data.

111
00:14:39,000 --> 00:14:44,000
So that is AIO. That is fetching data with AIO HTTP.

112
00:14:44,000 --> 00:14:49,000
And let's go to the next section.

113
00:14:49,000 --> 00:14:53,000
I showed... I provided some right up here.

114
00:14:53,000 --> 00:14:55,000
So you can take a look.

115
00:14:55,000 --> 00:14:59,000
But it shows similar to the previous example.

116
00:14:59,000 --> 00:15:07,000
Well, fetching data one by one takes longer time compared to if you were doing this with AIO HTTP.

117
00:15:07,000 --> 00:15:13,000
Where it would start downloading about at the same time.

118
00:15:13,000 --> 00:15:17,000
And then this short one will be completed first.

119
00:15:17,000 --> 00:15:20,000
And so on. So it takes much faster.

120
00:15:20,000 --> 00:15:28,000
So I think it's useful if you need to do web scraping or lots of long running tasks like this.

121
00:15:28,000 --> 00:15:37,000
And the reason why AIO HTTP is nice is because it provides the framework for both client and server.

122
00:15:37,000 --> 00:15:42,000
Whereas with Django it's mostly a framework for building a server.

123
00:15:42,000 --> 00:15:49,000
Usually you would use it with request library as well to fetch data.

124
00:15:49,000 --> 00:15:51,000
That's what we do at Zapier.

125
00:15:51,000 --> 00:15:59,000
So with AIO HTTP you get both. So it's less dependencies to be installed.

126
00:15:59,000 --> 00:16:02,000
Yeah. Any questions so far?

127
00:16:02,000 --> 00:16:05,000
Let me read a couple of words.

128
00:16:05,000 --> 00:16:09,000
The real difference is...

129
00:16:09,000 --> 00:16:15,000
The real reason why do you want to use async server.

130
00:16:15,000 --> 00:16:22,000
When you have pretty good libraries like Django, Flask, whatever.

131
00:16:22,000 --> 00:16:28,000
It's a responsibility.

132
00:16:28,000 --> 00:16:37,000
Because if many users ask your server and server should do some relative long tasks.

133
00:16:37,000 --> 00:16:44,000
Like go to another server, ask Facebook, GitHub for something.

134
00:16:44,000 --> 00:16:54,000
If your architecture is built on microservices, you have many network communications.

135
00:16:54,000 --> 00:17:00,000
And with Django you can do it for sure.

136
00:17:00,000 --> 00:17:08,000
But Django starts, I don't know, 30 workers for a node.

137
00:17:08,000 --> 00:17:17,000
It means that 30 parallel requests can be processed and 31st is blocked.

138
00:17:17,000 --> 00:17:21,000
It's wait for a free node.

139
00:17:21,000 --> 00:17:30,000
In async AIO you can start tens of thousands, hundreds of thousands of parallel requests.

140
00:17:30,000 --> 00:17:43,000
And if one request processing is waiting for response from GitHub, another one, all other responses are working.

141
00:17:43,000 --> 00:17:46,000
It's fine.

142
00:17:46,000 --> 00:17:54,000
It also allows to avoid a very popular problem.

143
00:17:54,000 --> 00:18:01,000
When almost all your requests are processed very fast.

144
00:18:01,000 --> 00:18:14,000
But if one request per 10,000 is slow and load is high enough.

145
00:18:14,000 --> 00:18:18,000
You can quickly overload server.

146
00:18:18,000 --> 00:18:24,000
Server will be busy on processing that slow responses.

147
00:18:24,000 --> 00:18:28,000
It's not the case for async frameworks.

148
00:18:28,000 --> 00:18:36,000
And next reason, it's pretty interesting by the way, is a memory.

149
00:18:36,000 --> 00:18:42,000
Because in Django you fork 30 processes.

150
00:18:42,000 --> 00:18:53,000
Typical web server consumes, I don't know, 300, 500 megabytes.

151
00:18:53,000 --> 00:18:58,000
So you very quickly go to memory limit.

152
00:18:58,000 --> 00:19:05,000
And you cannot fork 100 workers on the server.

153
00:19:05,000 --> 00:19:09,000
The server is not very powerful.

154
00:19:09,000 --> 00:19:25,000
In IO-GTB and in any async framework in general, you can use less workers to handle giant amount of requests.

155
00:19:25,000 --> 00:19:45,000
And a worker when it process hundreds, hundreds of thousands of requests consumes a little more memory than processing one request.

156
00:19:45,000 --> 00:19:53,000
So your limit is still close to a tray of 500 megabytes.

157
00:19:53,000 --> 00:19:57,000
But you can run much more.

158
00:19:57,000 --> 00:20:02,000
You can process much more users with the same memory.

159
00:20:02,000 --> 00:20:08,000
If you have extra memory, leave it for radius, for caching, for everything.

160
00:20:08,000 --> 00:20:16,000
It's better usage than just clone, Python process in classic way.

161
00:20:16,000 --> 00:20:23,000
So this was the reasons.

162
00:20:23,000 --> 00:20:26,000
That's great. Yeah, thank you for the explanation.

163
00:20:26,000 --> 00:20:33,000
Any questions so far?

164
00:20:33,000 --> 00:20:34,000
Yes.

165
00:21:04,000 --> 00:21:12,000
Looks like question for me.

166
00:21:12,000 --> 00:21:24,000
First, client session use async IO internal objects.

167
00:21:24,000 --> 00:21:33,000
So lifetime of session should be shorter, should be inside of lifetime of running loop.

168
00:21:33,000 --> 00:21:40,000
This is the reason why you cannot create session on import time.

169
00:21:40,000 --> 00:21:45,000
It's not limitation of synchronic code.

170
00:21:45,000 --> 00:21:50,000
Technically, you can create a session inside constructor.

171
00:21:50,000 --> 00:22:00,000
But you should create object with this constructor from asynchronous code.

172
00:22:00,000 --> 00:22:10,000
So violation, this rule is, for example, on import time loop.

173
00:22:10,000 --> 00:22:17,000
Well, it doesn't exist, event loop, Python event loop, async IO event loop.

174
00:22:17,000 --> 00:22:28,000
If you ask for loop, async IO creates an instance if you are in the main thread.

175
00:22:28,000 --> 00:22:34,000
But if you go async IO run, async IO creates a new loop.

176
00:22:34,000 --> 00:22:40,000
So session is coupled with async IO loop inside.

177
00:22:40,000 --> 00:22:47,000
If you run another loop, then was used on session creation.

178
00:22:47,000 --> 00:22:51,000
Program just hands, nothing happened.

179
00:22:51,000 --> 00:22:55,000
That's why I added such protection.

180
00:22:55,000 --> 00:23:01,000
Another question is, how many client session should you use?

181
00:23:01,000 --> 00:23:04,000
It's interesting.

182
00:23:04,000 --> 00:23:17,000
Client session is an abstraction which contains cookies, client cookies, and connection pool.

183
00:23:17,000 --> 00:23:29,000
So simultaneous request for the same session from different async IO task reuse this loop.

184
00:23:29,000 --> 00:23:38,000
It's a very handy feature because opening connection takes time.

185
00:23:38,000 --> 00:23:45,000
If you want to connect to Google, Python, or whatever,

186
00:23:45,000 --> 00:23:50,000
connection is not established, is not for free.

187
00:23:50,000 --> 00:23:58,000
And IHTP allows to not shut down connection just after getting a page.

188
00:23:58,000 --> 00:24:06,000
It keeps it active for a while and close only after some period.

189
00:24:06,000 --> 00:24:16,000
So using a session for several requests makes sense.

190
00:24:16,000 --> 00:24:20,000
How many sessions do you need?

191
00:24:20,000 --> 00:24:29,000
Maybe, this is a suggestion, start from using only one session.

192
00:24:29,000 --> 00:24:40,000
Or maybe you can manually split your outcome in request to big groups like

193
00:24:40,000 --> 00:24:47,000
those requests are for Facebook and those are for Google.

194
00:24:47,000 --> 00:24:53,000
Having two sessions, one for Facebook, one for Google, maybe makes sense.

195
00:24:53,000 --> 00:24:56,000
Maybe you don't need it.

196
00:24:56,000 --> 00:24:59,000
It's, again, depends.

197
00:24:59,000 --> 00:25:06,000
Session has a parameter like how many parallel connections it supports.

198
00:25:06,000 --> 00:25:11,000
Default value is not too big, it's about 100.

199
00:25:11,000 --> 00:25:27,000
Because without additional steps, a limitation for amount of open sockets for process is 1024.

200
00:25:27,000 --> 00:25:37,000
You can increase it, but it requires additional steps on server setup.

201
00:25:37,000 --> 00:25:44,000
So you should keep in mind also this one.

202
00:25:44,000 --> 00:25:57,000
Also if you use session for scraping the whole Internet, you probably get too many cookies.

203
00:25:57,000 --> 00:25:59,000
It can be also a problem.

204
00:25:59,000 --> 00:26:03,000
Session saves cookies inside.

205
00:26:03,000 --> 00:26:09,000
It keeps cookies sent by server.

206
00:26:09,000 --> 00:26:21,000
If you use for everything and touch too many files, cookie storage can grow in memory.

207
00:26:21,000 --> 00:26:25,000
And again, maybe you need it, maybe not.

208
00:26:25,000 --> 00:26:27,000
Again, depends.

209
00:26:27,000 --> 00:26:35,000
But better to try from a single session for everything if you can.

210
00:26:35,000 --> 00:26:40,000
And after that add new ones.

211
00:26:40,000 --> 00:26:55,000
Or use a new session for any new request, but it's not the fastest way to work with Internet.

212
00:26:55,000 --> 00:27:04,000
It's not how TCP sockets like to communicate.

213
00:27:04,000 --> 00:27:06,000
That's it.

214
00:27:13,000 --> 00:27:17,000
So the next section, so that's brief introduction.

215
00:27:17,000 --> 00:27:20,000
And thank you, Andrew.

216
00:27:20,000 --> 00:27:23,000
I think this is the fun part at least for me.

217
00:27:23,000 --> 00:27:31,000
Let's all start writing our own AIO HTTP session and server.

218
00:27:31,000 --> 00:27:37,000
And I will start by showing different pieces of building up a server.

219
00:27:37,000 --> 00:27:46,000
But at the end of this, we have provided some kind of an exercise where we will be building a server

220
00:27:46,000 --> 00:27:53,000
where you can create blog posts, retrieve the blog posts, edit them, upload the files.

221
00:27:53,000 --> 00:27:59,000
And the full example, full working example is in this link.

222
00:27:59,000 --> 00:28:06,000
But maybe we'll go through, try to create one of this at the end of this section.

223
00:28:06,000 --> 00:28:10,000
So, all right.

224
00:28:10,000 --> 00:28:13,000
Now we have the requirements.

225
00:28:13,000 --> 00:28:14,000
All right.

226
00:28:14,000 --> 00:28:17,000
A simple web server.

227
00:28:17,000 --> 00:28:24,000
Start by defining the request handler.

228
00:28:24,000 --> 00:28:28,000
Server.py.

229
00:28:28,000 --> 00:28:32,000
And feel free to follow along or just watch.

230
00:28:32,000 --> 00:28:35,000
So this is a request handler.

231
00:28:35,000 --> 00:28:36,000
It's a coroutine.

232
00:28:36,000 --> 00:28:42,000
It accepts a request and then returns a hello world, just a text.

233
00:28:42,000 --> 00:28:49,000
And next we need to create the application.

234
00:28:49,000 --> 00:28:56,000
So we created the AIO HTTP web application.

235
00:28:57,000 --> 00:29:03,000
And we're telling it we're going to create the root URL, the slash URL.

236
00:29:03,000 --> 00:29:12,000
And that it will be whenever somebody hits the slash URL, we'll execute this handler coroutine.

237
00:29:12,000 --> 00:29:17,000
So we will see hello world.

238
00:29:18,000 --> 00:29:23,000
And then just run the app.

239
00:29:26,000 --> 00:29:28,000
Okay.

240
00:29:28,000 --> 00:29:32,000
And then just run it.

241
00:29:32,000 --> 00:29:36,000
Now server is running.

242
00:29:36,000 --> 00:29:40,000
We can open it in the browser.

243
00:29:40,000 --> 00:29:44,000
And you'll see hello world.

244
00:29:50,000 --> 00:29:55,000
I'll give people some time to just try along.

245
00:30:00,000 --> 00:30:02,000
Deal.

246
00:30:02,000 --> 00:30:06,000
One point to the address of the server.

247
00:30:06,000 --> 00:30:10,000
I know that now zero person is going to be.

248
00:30:10,000 --> 00:30:17,000
For zeros works on Linux, on Mac OS, as I see.

249
00:30:17,000 --> 00:30:26,000
But if I recall correctly, Windows does not resolve this address.

250
00:30:26,000 --> 00:30:33,000
But you can use localhost or 127.001.

251
00:30:33,000 --> 00:30:38,000
Like this, 001.

252
00:30:40,000 --> 00:30:44,000
I got the same thing here.

253
00:30:44,000 --> 00:30:47,000
Just put out the green one if you're done.

254
00:30:47,000 --> 00:30:52,000
Just so I know, have an idea how many people are trying it.

255
00:30:57,000 --> 00:30:59,000
Okay, that's easy.

256
00:30:59,000 --> 00:31:00,000
That's straightforward.

257
00:31:00,000 --> 00:31:03,000
Seems like you all got it.

258
00:31:03,000 --> 00:31:06,000
Next.

259
00:31:06,000 --> 00:31:08,000
That's fine.

260
00:31:08,000 --> 00:31:09,000
Right.

261
00:31:09,000 --> 00:31:11,000
The other way to define URLs.

262
00:31:11,000 --> 00:31:15,000
So when you define URLs, notice this is a list.

263
00:31:15,000 --> 00:31:20,000
So you can always, if you need another URL you want to create,

264
00:31:20,000 --> 00:31:23,000
you can just put it in the URL.

265
00:31:23,000 --> 00:31:26,000
And then you can define the URL.

266
00:31:26,000 --> 00:31:28,000
So you can define the URL.

267
00:31:28,000 --> 00:31:34,000
So you can always, if you need another URL you want to create,

268
00:31:34,000 --> 00:31:36,000
you just add another URL.

269
00:31:36,000 --> 00:31:39,000
And it will, and the order matters, right?

270
00:31:39,000 --> 00:31:43,000
We will process from top to bottom?

271
00:31:43,000 --> 00:31:44,000
Yes.

272
00:31:44,000 --> 00:31:56,000
It matters when you start using variable URLs with placeholders for variables.

273
00:31:56,000 --> 00:32:00,000
But that I will show right now.

274
00:32:00,000 --> 00:32:05,000
So that is how you would create another URL.

275
00:32:05,000 --> 00:32:12,000
The other way to create URL is by adding decorators.

276
00:32:12,000 --> 00:32:18,000
So this is, if you're familiar with Flask, they have the same feature there,

277
00:32:18,000 --> 00:32:22,000
but not Django, I think not Django.

278
00:32:22,000 --> 00:32:30,000
So like that.

279
00:32:30,000 --> 00:32:32,000
Another.

280
00:32:32,000 --> 00:32:37,000
So instead of calling add routes, we just do routes here.

281
00:32:43,000 --> 00:32:46,000
Restart the server.

282
00:32:46,000 --> 00:32:48,000
And run it.

283
00:32:48,000 --> 00:32:49,000
Hello world.

284
00:32:49,000 --> 00:32:51,000
Another.

285
00:32:51,000 --> 00:32:53,000
There it is.

286
00:32:53,000 --> 00:32:58,000
So if you want to try it out.

287
00:32:58,000 --> 00:33:05,000
The difference from Flask is in Flask you create an application or blueprint first,

288
00:33:05,000 --> 00:33:14,000
and then use application instance to add URLs by decoration.

289
00:33:14,000 --> 00:33:20,000
In IOTP we decide to use different way.

290
00:33:20,000 --> 00:33:29,000
Routes is basically a list with helper methods like get, you see.

291
00:33:29,000 --> 00:33:36,000
A list with additional methods to add objects to this list.

292
00:33:36,000 --> 00:33:45,000
And when you have a route table filled with your URLs,

293
00:33:45,000 --> 00:33:50,000
you should explicitly add it to application.

294
00:33:50,000 --> 00:34:04,000
The reason you can separate route tables, list of routes, from application creation.

295
00:34:04,000 --> 00:34:09,000
You should not create an application on import time.

296
00:34:09,000 --> 00:34:14,000
You can do it from inside an async function.

297
00:34:14,000 --> 00:34:16,000
You can do it later.

298
00:34:16,000 --> 00:34:29,000
And for async IOU it's important because application is async IOU object.

299
00:34:29,000 --> 00:34:32,000
It has a loop inside also.

300
00:34:32,000 --> 00:34:38,000
And the same reason as for session exists for application.

301
00:34:38,000 --> 00:34:45,000
Lifetime of application should be inside of lifetime of loop.

302
00:34:45,000 --> 00:34:56,000
So you have to create application from async code.

303
00:34:56,000 --> 00:34:59,000
Well, it's not 100% true.

304
00:34:59,000 --> 00:35:04,000
You see, in this example we create an application early.

305
00:35:04,000 --> 00:35:13,000
But again, it's a good practice to use function,

306
00:35:13,000 --> 00:35:16,000
initialization function for application creation.

307
00:35:16,000 --> 00:35:21,000
And probably we will duplicate this usage later.

308
00:35:21,000 --> 00:35:24,000
Who knows.

309
00:35:24,000 --> 00:35:32,000
And examples from our tutorial site demonstrates

310
00:35:32,000 --> 00:35:38,000
you need app async function usage.

311
00:35:38,000 --> 00:35:42,000
So this is recommended way.

312
00:35:42,000 --> 00:35:46,000
Okay, I will just copy paste that.

313
00:36:12,000 --> 00:36:28,000
Okay, next.

314
00:36:28,000 --> 00:36:34,000
Sometimes you want to have arguments and parameters to your URL.

315
00:36:34,000 --> 00:36:40,000
For example, having say you want to have a username parameter in the URL.

316
00:36:40,000 --> 00:36:44,000
Like dynamically instead of hard coding the URL.

317
00:36:44,000 --> 00:36:48,000
You can use that like curly braces here.

318
00:36:48,000 --> 00:36:53,000
And it's the same way if you were to do this without the decorator.

319
00:36:53,000 --> 00:36:55,000
I like to use the decorator.

320
00:36:55,000 --> 00:36:59,000
So the code examples here are using the decorator.

321
00:36:59,000 --> 00:37:01,000
So let's try this.

322
00:37:01,000 --> 00:37:06,000
And to retrieve the value of this parameter,

323
00:37:06,000 --> 00:37:12,000
you will get it from the request, match info and get the username.

324
00:37:12,000 --> 00:37:14,000
That's the variable here.

325
00:37:14,000 --> 00:37:16,000
So let's do that.

326
00:37:16,000 --> 00:37:22,000
And try it out.

327
00:37:22,000 --> 00:37:38,000
And there you go.

328
00:37:38,000 --> 00:37:46,000
And you can type any name.

329
00:37:46,000 --> 00:37:51,000
So another way to parameterize URLs.

330
00:37:51,000 --> 00:38:01,000
If in the get request you might want to have the request, the get parameters.

331
00:38:01,000 --> 00:38:08,000
Like if you're familiar with the URL, this part of the URL, you can do that too.

332
00:38:08,000 --> 00:38:12,000
And then the code looks like this.

333
00:38:12,000 --> 00:38:19,000
Instead of the match info, you'll get URL query.get.

334
00:38:19,000 --> 00:38:37,000
Let's add that in.

335
00:38:37,000 --> 00:38:42,000
So now this thing works page one or something like that.

336
00:38:42,000 --> 00:38:45,000
So that's a brief example.

337
00:38:45,000 --> 00:38:55,000
I'm sure you'll use it for more complicated situations.

338
00:38:55,000 --> 00:39:01,000
Any questions so far?

339
00:39:01,000 --> 00:39:06,000
So far our server only handles get requests.

340
00:39:06,000 --> 00:39:12,000
But you will probably need like post or put and all that.

341
00:39:12,000 --> 00:39:24,000
And you can definitely do that by simply changing instead of get, you will do post there.

342
00:39:24,000 --> 00:39:29,000
Actually I will do it here.

343
00:39:29,000 --> 00:39:34,000
So now the grid user only accepts post requests.

344
00:39:34,000 --> 00:39:39,000
We cannot simply go through this URL on the browser anymore.

345
00:39:39,000 --> 00:39:44,000
You will need to use a client to fetch this resource.

346
00:39:44,000 --> 00:39:52,000
And you will probably want to retrieve the data from the post method.

347
00:39:52,000 --> 00:40:02,000
So you will call await request.post and get the data like that.

348
00:40:02,000 --> 00:40:12,000
Nice question.

349
00:40:12,000 --> 00:40:25,000
Because in the post you can send a huge HTTP payload.

350
00:40:25,000 --> 00:40:30,000
So you can send 20 gigabyte files.

351
00:40:30,000 --> 00:40:34,000
Maybe it's too much, but megabytes is pretty common.

352
00:40:34,000 --> 00:40:38,000
You can send a picture from your cell phone.

353
00:40:38,000 --> 00:40:42,000
And reading it takes time.

354
00:40:42,000 --> 00:40:47,000
Maybe you want to get it instantly.

355
00:40:47,000 --> 00:40:52,000
Maybe you want to get it by chunks.

356
00:40:52,000 --> 00:40:58,000
Or one chunk by next to other.

357
00:40:58,000 --> 00:41:06,000
Say reading only megabyte chunk, process it and do next.

358
00:41:06,000 --> 00:41:21,000
In case of HTTP forms, HTML forms, you want also maybe to process it in a stream order.

359
00:41:21,000 --> 00:41:26,000
Not to load everything in memory like we have in post.

360
00:41:26,000 --> 00:41:36,000
But use more complex code and process field by field in sequence.

361
00:41:36,000 --> 00:41:43,000
All these reasons are for adding await here.

362
00:41:43,000 --> 00:41:48,000
Await is a sign of some IO, input-output operation.

363
00:41:48,000 --> 00:41:57,000
And how HTTP works.

364
00:41:57,000 --> 00:42:08,000
You can read a header which contains path and HTTP headers.

365
00:42:08,000 --> 00:42:12,000
And you are ready to start processing request.

366
00:42:12,000 --> 00:42:16,000
Next you can read a body.

367
00:42:16,000 --> 00:42:20,000
Two different operations.

368
00:42:20,000 --> 00:42:23,000
The same in client.

369
00:42:23,000 --> 00:42:27,000
Remember client example.

370
00:42:27,000 --> 00:42:33,000
You do client head, await client get.

371
00:42:33,000 --> 00:42:38,000
Get response object back.

372
00:42:38,000 --> 00:42:46,000
And for getting response content, you should use await response text.

373
00:42:46,000 --> 00:42:49,000
Or await response JSON.

374
00:42:49,000 --> 00:42:52,000
Or work with multi-part encoding.

375
00:42:52,000 --> 00:42:53,000
Whatever.

376
00:42:53,000 --> 00:42:56,000
Use the streaming content.

377
00:42:56,000 --> 00:43:04,000
All these operations require additional input-output.

378
00:43:04,000 --> 00:43:13,000
And every input-output is awaitable.

379
00:43:13,000 --> 00:43:15,000
It's an asynchronous function.

380
00:43:15,000 --> 00:43:19,000
We explicitly want to do it.

381
00:43:19,000 --> 00:43:33,000
It would be design decision to fetch the whole content of request before starting processing web handler.

382
00:43:33,000 --> 00:43:41,000
But it's obviously easy to lead to memory leak.

383
00:43:41,000 --> 00:43:47,000
If you want to do it, do it in application code.

384
00:43:47,000 --> 00:43:55,000
If you want to have all requests in memory, we cannot forbid.

385
00:43:55,000 --> 00:43:57,000
But you do it on your own.

386
00:43:57,000 --> 00:44:03,000
Not on our library.

387
00:44:03,000 --> 00:44:05,000
So this is the reason.

388
00:44:05,000 --> 00:44:07,000
Another question.

389
00:44:07,000 --> 00:44:09,000
Yep.

390
00:44:09,000 --> 00:44:25,000
Are you able to stack the message from your REST API from users?

391
00:44:25,000 --> 00:44:27,000
Stack?

392
00:44:27,000 --> 00:44:36,000
If I have a...

393
00:44:36,000 --> 00:44:42,000
This is what you're thinking about, right?

394
00:44:42,000 --> 00:44:44,000
You see.

395
00:44:44,000 --> 00:44:46,000
Just decorate twice.

396
00:44:46,000 --> 00:44:53,000
Register your handler twice.

397
00:44:53,000 --> 00:44:59,000
Request has method property.

398
00:44:59,000 --> 00:45:05,000
If you want to, if your code is organized in this way, you can do it.

399
00:45:05,000 --> 00:45:08,000
Sometimes it's convenient, sometimes not.

400
00:45:08,000 --> 00:45:10,000
But you can.

401
00:45:10,000 --> 00:45:27,000
How do you retrieve the method from the request?

402
00:45:27,000 --> 00:45:29,000
Request.method.

403
00:45:29,000 --> 00:45:33,000
Method that will give you get or post.

404
00:45:33,000 --> 00:45:41,000
Request is a relatively big object with many methods and properties.

405
00:45:41,000 --> 00:45:47,000
You can open HTTP documentation for full description.

406
00:45:47,000 --> 00:45:59,000
Also, HTTP has a lot of narrative documents describing how to work in different cases,

407
00:45:59,000 --> 00:46:05,000
how to operate with it.

408
00:46:05,000 --> 00:46:07,000
This is a reference.

409
00:46:07,000 --> 00:46:09,000
This is the documentation here.

410
00:46:09,000 --> 00:46:11,000
Yes.

411
00:46:11,000 --> 00:46:23,000
In Quick Start and Advanced Usage pages, we describe some requests and response aspects and usages.

412
00:46:23,000 --> 00:46:25,000
All right.

413
00:46:25,000 --> 00:46:27,000
Great.

414
00:46:27,000 --> 00:46:29,000
Let's go back.

415
00:46:29,000 --> 00:46:31,000
Okay.

416
00:46:31,000 --> 00:46:35,000
Where were we?

417
00:46:35,000 --> 00:46:37,000
Okay.

418
00:46:37,000 --> 00:46:39,000
We were doing a post.

419
00:46:39,000 --> 00:46:45,000
Because we made this a post, we can no longer access it from the website like this.

420
00:46:45,000 --> 00:46:55,000
You can try out your post request by doing the client, from the client.

421
00:46:55,000 --> 00:47:10,000
Basically, if you put in the ad user.

422
00:47:10,000 --> 00:47:12,000
Whoops.

423
00:47:12,000 --> 00:47:17,000
Let's restart my server.

424
00:47:17,000 --> 00:47:23,000
I need to put before that because the other man.

425
00:47:23,000 --> 00:47:25,000
Yes.

426
00:47:25,000 --> 00:47:31,000
While Marietta changes code, let's see why the order is important.

427
00:47:31,000 --> 00:47:43,000
User name, greeting user, has a variable in URL.

428
00:47:43,000 --> 00:47:52,000
And it variable matches any text in URL path segment.

429
00:47:52,000 --> 00:48:13,000
So if you push ad user after getting user name, ad user will never match because its request will be swallowed by former handler.

430
00:48:13,000 --> 00:48:30,000
So if you have a variable URL and just constant one, usually you have to put constant first.

431
00:48:30,000 --> 00:48:49,000
URLs in HTTP is a list logically and it iterates hour and hour looking for first match, not for best because there is no good definition for best matching.

432
00:48:49,000 --> 00:48:52,000
HTTP doesn't decide.

433
00:48:52,000 --> 00:49:05,000
You have a variable, you have a strict string and if request URL matches to string, use this strict.

434
00:49:05,000 --> 00:49:07,000
No.

435
00:49:07,000 --> 00:49:09,000
No such complex logic.

436
00:49:09,000 --> 00:49:33,000
Go from top to bottom and select the first match.

437
00:49:33,000 --> 00:49:40,000
So I just want to give example like how you can do the post using the AIO HTTP client.

438
00:49:40,000 --> 00:49:53,000
So what I did is I added the URL here pointing to my local server and passing in the JSON object user name.

439
00:49:53,000 --> 00:50:00,000
And that's because my ad user.

440
00:50:00,000 --> 00:50:03,000
It's not JSON technically but it will be form.

441
00:50:03,000 --> 00:50:04,000
Yes.

442
00:50:04,000 --> 00:50:06,000
Yeah, multi-part.

443
00:50:06,000 --> 00:50:15,000
It's expecting the user name here.

444
00:50:15,000 --> 00:50:18,000
And let's try that out.

445
00:50:18,000 --> 00:50:33,000
So I have my server running.

446
00:50:33,000 --> 00:50:39,000
So I received the response from my server.

447
00:50:39,000 --> 00:51:08,000
So give that a try if you like.

448
00:51:08,000 --> 00:51:09,000
All right.

449
00:51:09,000 --> 00:51:18,000
The next example I want to show is returning a JSON instead of a plain text like that.

450
00:51:18,000 --> 00:51:24,000
And the only difference is just you replace the web response with JSON response.

451
00:51:24,000 --> 00:51:30,000
It's pretty simple and straightforward.

452
00:51:30,000 --> 00:51:38,000
But internally data are encoded completely differently, you know.

453
00:51:38,000 --> 00:51:44,000
JSON looks like Python dictionary, pretty close.

454
00:51:44,000 --> 00:51:57,000
And post data, it has two encoded forms, as it is, ampersand and equal.

455
00:51:57,000 --> 00:52:05,000
Like in parameters, query parameters in get and another one is multi-part encoding.

456
00:52:05,000 --> 00:52:19,000
We will show you how it looks like after next session.

457
00:52:19,000 --> 00:52:20,000
Right.

458
00:52:20,000 --> 00:52:25,000
So whoops, go back to my server restarted.

459
00:52:25,000 --> 00:52:37,000
And the get JSON URL.

460
00:52:37,000 --> 00:52:47,000
What am I doing wrong?

461
00:52:47,000 --> 00:52:55,000
Did you use JSON in URL?

462
00:52:55,000 --> 00:53:00,000
I think you in browser, not get but just JSON.

463
00:53:00,000 --> 00:53:02,000
Of course.

464
00:53:02,000 --> 00:53:03,000
Yes.

465
00:53:03,000 --> 00:53:08,000
Okay, now it returns JSON.

466
00:53:08,000 --> 00:53:10,000
All right.

467
00:53:10,000 --> 00:53:15,000
Yes.

468
00:53:15,000 --> 00:53:17,000
To my code.

469
00:53:17,000 --> 00:53:22,000
Terminal.

470
00:53:22,000 --> 00:53:26,000
Yes.

471
00:53:26,000 --> 00:53:33,000
That's a request, yeah.

472
00:53:33,000 --> 00:53:37,000
Ah.

473
00:53:37,000 --> 00:53:41,000
Looks weird.

474
00:53:41,000 --> 00:53:42,000
Okay.

475
00:53:42,000 --> 00:53:47,000
When I started to write web framework, I learned a lot.

476
00:53:47,000 --> 00:53:52,000
And technically get can have a body.

477
00:53:52,000 --> 00:53:55,000
Maybe you're surprised, but it can.

478
00:53:55,000 --> 00:54:00,000
Also delete can have a body.

479
00:54:00,000 --> 00:54:06,000
So I agree, looks strange.

480
00:54:06,000 --> 00:54:10,000
But better to use post for this example.

481
00:54:10,000 --> 00:54:16,000
But yes, it's a polyquest body.

482
00:54:16,000 --> 00:54:17,000
All right.

483
00:54:17,000 --> 00:54:21,000
Maybe we should remove this to confuse people.

484
00:54:21,000 --> 00:54:22,000
Later.

485
00:54:22,000 --> 00:54:24,000
All right.

486
00:54:24,000 --> 00:54:26,000
What's the next one?

487
00:54:26,000 --> 00:54:28,000
Do you think you can give this example?

488
00:54:28,000 --> 00:54:32,000
Yes.

489
00:54:32,000 --> 00:54:35,000
Let's use this laptop.

490
00:54:35,000 --> 00:54:52,000
So in web application, usually you need to use a database or another long-living object.

491
00:54:52,000 --> 00:55:12,000
And in IOTP, the best place for initializing and closing objects like database connection is cleanup context.

492
00:55:12,000 --> 00:55:15,000
Let's call it signal.

493
00:55:15,000 --> 00:55:24,000
So you see, we have a neat application.

494
00:55:24,000 --> 00:55:25,000
Okay.

495
00:55:25,000 --> 00:55:30,000
I'm not good in Mac, but at least pointer works.

496
00:55:30,000 --> 00:55:32,000
So we have an application.

497
00:55:32,000 --> 00:55:39,000
We add routes here and we register a coroutine.

498
00:55:39,000 --> 00:55:48,000
Actually, it's asynchronous generator with yield inside to create a database connection.

499
00:55:48,000 --> 00:55:54,000
And we use asynchronous library for SQLite.

500
00:55:54,000 --> 00:56:03,000
Usually in your real code, you want to use MySQL or Postgres or real big databases.

501
00:56:03,000 --> 00:56:10,000
But for tutorial, we choose SQLite because it's already present.

502
00:56:10,000 --> 00:56:19,000
It doesn't require installing a server on your laptop and good enough for demonstration.

503
00:56:19,000 --> 00:56:28,000
So we connect to SQLite database.

504
00:56:28,000 --> 00:56:33,000
This is file name where database live.

505
00:56:33,000 --> 00:56:38,000
Initialize the connection and store in application.

506
00:56:38,000 --> 00:56:42,000
Application works like a dictionary.

507
00:56:42,000 --> 00:56:49,000
It has square brackets or operator.

508
00:56:49,000 --> 00:57:12,000
So you can push everything what you want into application on initialization stage before your server ready to serve requests on time of server starting.

509
00:57:12,000 --> 00:57:15,000
Then we have yield.

510
00:57:15,000 --> 00:57:21,000
Many Python libraries use this approach.

511
00:57:21,000 --> 00:57:31,000
So before yield is initialization, but after yield is finalizing.

512
00:57:31,000 --> 00:57:43,000
You can avoid closing database connection, but usually I want to be accurate.

513
00:57:43,000 --> 00:57:48,000
If you create a resource, please close it.

514
00:57:48,000 --> 00:57:53,000
So this is how it looks like.

515
00:57:53,000 --> 00:57:57,000
There are different ways to do it for sure.

516
00:57:57,000 --> 00:58:02,000
You have good and recommended example here.

517
00:58:02,000 --> 00:58:14,000
In web handler, you can get a database from request config.

518
00:58:14,000 --> 00:58:19,000
We used DB for storing in application.

519
00:58:19,000 --> 00:58:24,000
We get the value back from request.

520
00:58:24,000 --> 00:58:38,000
And use standard DB functions to execute some SQL query, get result, commit it and so on.

521
00:58:38,000 --> 00:58:41,000
And add JSON.

522
00:58:41,000 --> 00:58:48,000
We have an example.

523
00:58:48,000 --> 00:58:54,000
Full example here.

524
00:58:54,000 --> 00:58:56,000
Click and learn.

525
00:58:56,000 --> 00:59:05,000
It has methods for working with REST API.

526
00:59:05,000 --> 00:59:19,000
List posts, create new posts, get detailed information about specific posts by its number, delete it and update.

527
00:59:19,000 --> 00:59:26,000
Every method is really tedious.

528
00:59:26,000 --> 00:59:30,000
But you can learn it.

529
00:59:30,000 --> 00:59:35,000
Our database structure is here.

530
00:59:35,000 --> 00:59:45,000
We have integer post ID, title, post content, and owner and editor fields.

531
00:59:45,000 --> 00:59:54,000
We will use these fields later in session part.

532
00:59:54,000 --> 01:00:08,000
The idea is owner is the person who creates a post and editor is the last editor, last updater.

533
01:00:08,000 --> 01:00:12,000
Full example.

534
01:00:12,000 --> 01:00:22,000
It's really not very long but still sizable.

535
01:00:22,000 --> 01:00:30,000
And I recommend to learn it yourself to briefly read this code.

536
01:00:30,000 --> 01:00:37,000
We make a database if it doesn't exist.

537
01:00:37,000 --> 01:00:53,000
We use a DB path in the root of our repository to share the same database file between this section and next one.

538
01:00:53,000 --> 01:00:59,000
And what else?

539
01:00:59,000 --> 01:01:04,000
Time for questions maybe.

540
01:01:04,000 --> 01:01:11,000
Is everything clear?

541
01:01:11,000 --> 01:01:20,000
Yep.

542
01:01:20,000 --> 01:01:24,000
No.

543
01:01:24,000 --> 01:01:28,000
This one.

544
01:01:28,000 --> 01:01:34,000
Middleware is a wrapper around requests.

545
01:01:34,000 --> 01:01:47,000
So when a server has a request, it can execute a code before request handling and after it.

546
01:01:47,000 --> 01:01:59,000
But DB is just a single function for establishing connection to database and closing it.

547
01:01:59,000 --> 01:02:06,000
It's called not for every request but only once at server startup.

548
01:02:06,000 --> 01:02:15,000
And last part after yield is called server shutdown.

549
01:02:15,000 --> 01:02:21,000
Does that work exactly?

550
01:02:21,000 --> 01:02:33,000
It works like context manager decorator.

551
01:02:33,000 --> 01:02:48,000
Maybe showing the code is too much but let's go to standard Python documentation.

552
01:02:48,000 --> 01:02:57,000
There is a context lib standard library.

553
01:02:57,000 --> 01:02:59,000
What's up?

554
01:02:59,000 --> 01:03:02,000
Yes, we are here.

555
01:03:02,000 --> 01:03:06,000
I'll increase the size.

556
01:03:06,000 --> 01:03:09,000
Not too much.

557
01:03:09,000 --> 01:03:22,000
And we have a context manager and example.

558
01:03:22,000 --> 01:03:31,000
Yes, like this.

559
01:03:31,000 --> 01:03:39,000
You have an initialization part, then yield something and finalization part.

560
01:03:39,000 --> 01:03:42,000
And you can use it with managed resource.

561
01:03:42,000 --> 01:03:47,000
It's a very, very common way to organize code in Python.

562
01:03:47,000 --> 01:04:01,000
And HTTP uses the same technique but it yields nothing because returned object cannot be used by HTTP.

563
01:04:01,000 --> 01:04:13,000
You just create a connection and push it explicitly into application under some your name.

564
01:04:13,000 --> 01:04:24,000
And how to make it work?

565
01:04:24,000 --> 01:04:38,000
Initialize, call a next function, then get an iterator, iterate asynchronously, iterate one time.

566
01:04:38,000 --> 01:04:51,000
And on shutdown, I think iterate next step.

567
01:04:51,000 --> 01:05:08,000
Any other question?

568
01:05:08,000 --> 01:05:10,000
Good question.

569
01:05:10,000 --> 01:05:16,000
First, I suggest try to find asyncIO library.

570
01:05:16,000 --> 01:05:19,000
Maybe you want to use it.

571
01:05:19,000 --> 01:05:30,000
If not, I think I still can execute synchronous code in thread pool.

572
01:05:30,000 --> 01:05:36,000
Again, for image resizing later we will have a demonstration how it works.

573
01:05:36,000 --> 01:05:49,000
But briefly it looks like you say execute this function, this code with that argument in a thread pool.

574
01:05:49,000 --> 01:05:55,000
And the call returns object which is awaitable.

575
01:05:55,000 --> 01:06:03,000
So you use result is equal await run in executor synchronous code.

576
01:06:03,000 --> 01:06:13,000
And when synchronous code result is ready, you get control flow back and you can do it.

577
01:06:13,000 --> 01:06:21,000
Sometimes it works very well.

578
01:06:21,000 --> 01:06:25,000
It works always. It doesn't fail.

579
01:06:25,000 --> 01:06:40,000
But using synchronous request library this way is not a very good choice if you have IOGDP client.

580
01:06:40,000 --> 01:06:51,000
If you have asynchronous library, usually it performs better in asynchronous.

581
01:06:51,000 --> 01:07:02,000
I think I will. But you have a backup plan anytime.

582
01:07:02,000 --> 01:07:10,000
Another question?

583
01:07:10,000 --> 01:07:14,000
Okay, let's go to the next section.

584
01:07:14,000 --> 01:07:15,000
The next section is client.

585
01:07:15,000 --> 01:07:16,000
Client, yes.

586
01:07:16,000 --> 01:07:17,000
A minute.

587
01:07:17,000 --> 01:07:20,000
Sure.

588
01:07:20,000 --> 01:07:23,000
Server.

589
01:07:23,000 --> 01:07:26,000
Oh, no, sorry.

590
01:07:26,000 --> 01:07:28,000
It's not a tutorial.

591
01:07:28,000 --> 01:07:31,000
This is our guy.

592
01:07:31,000 --> 01:07:37,000
And we have a client.

593
01:07:37,000 --> 01:07:42,000
So we have a REST server.

594
01:07:42,000 --> 01:07:46,000
REST is a programming API.

595
01:07:46,000 --> 01:07:54,000
Our server accepts JSON requests and returns JSON responses back.

596
01:07:54,000 --> 01:08:01,000
It's for programmers, not for end users.

597
01:08:01,000 --> 01:08:10,000
We don't write fancy pages with images, animation, whatever.

598
01:08:10,000 --> 01:08:20,000
So usually if you have a REST server, you want to have a REST client for it to work with.

599
01:08:20,000 --> 01:08:27,000
Client is a set of handy helper methods.

600
01:08:27,000 --> 01:08:39,000
So at first, we are working with a simple blocking engine.

601
01:08:39,000 --> 01:08:44,000
We have a post entity.

602
01:08:44,000 --> 01:08:53,000
We send post to server and get post or list of posts back.

603
01:08:53,000 --> 01:08:59,000
We can use for sure dictionaries for post data.

604
01:08:59,000 --> 01:09:07,000
But I have several reasons against plain dictionaries.

605
01:09:07,000 --> 01:09:13,000
Mainly because dictionary is not structured well.

606
01:09:13,000 --> 01:09:16,000
It can have any fields.

607
01:09:16,000 --> 01:09:20,000
You have no idea what fields are.

608
01:09:20,000 --> 01:09:28,000
It has no typing information for type checking.

609
01:09:28,000 --> 01:09:32,000
It's just everything.

610
01:09:32,000 --> 01:09:38,000
That's why we use post data class.

611
01:09:38,000 --> 01:09:40,000
A brief description.

612
01:09:40,000 --> 01:09:48,000
Data class is a class which is decorated with data class decorator.

613
01:09:48,000 --> 01:09:55,000
Frozen means post cannot be changed after creation.

614
01:09:55,000 --> 01:09:58,000
Post fields cannot be updated.

615
01:09:58,000 --> 01:10:01,000
It's immutable class.

616
01:10:01,000 --> 01:10:07,000
I prefer to use immutables if I can, especially for data classes.

617
01:10:07,000 --> 01:10:15,000
It has several fields and a method to print post content.

618
01:10:15,000 --> 01:10:19,000
Nothing really interesting.

619
01:10:19,000 --> 01:10:21,000
Client.

620
01:10:21,000 --> 01:10:25,000
So we have a client for our REST API.

621
01:10:25,000 --> 01:10:34,000
Client is initialized with URL to our server and username.

622
01:10:34,000 --> 01:10:39,000
Username is used for owner and editor fields.

623
01:10:39,000 --> 01:10:49,000
We save URL, save user and we create client session here.

624
01:10:49,000 --> 01:10:55,000
The next thing is a handy helper.

625
01:10:55,000 --> 01:11:14,000
It raises an exception if returned status code of response returned by server is not in 200 area.

626
01:11:14,000 --> 01:11:16,000
200, 201.

627
01:11:16,000 --> 01:11:34,000
If server returns 400 bad request or 400, 3 forbidden, 400, 4 not found, 500 server is in trouble.

628
01:11:34,000 --> 01:11:42,000
All these responses are converted into exceptions by Ioctp.

629
01:11:42,000 --> 01:11:48,000
You should not check it yourself.

630
01:11:48,000 --> 01:11:53,000
We also have a close method.

631
01:11:53,000 --> 01:12:08,000
Usually if you have some async Io object, you should close it sometimes.

632
01:12:08,000 --> 01:12:12,000
You can avoid it, but it's not a very good idea.

633
01:12:12,000 --> 01:12:16,000
We have a client.

634
01:12:16,000 --> 01:12:21,000
Client has a close method, IoctpClient.

635
01:12:21,000 --> 01:12:30,000
That's why we in turn add a close method to our client, not to Ioctp embedded object,

636
01:12:30,000 --> 01:12:37,000
but to our REST client, which closes embedded object.

637
01:12:37,000 --> 01:12:50,000
This is an example for list method to get a list of our posts.

638
01:12:50,000 --> 01:12:55,000
Type hint in here.

639
01:12:55,000 --> 01:12:58,000
The idea is pretty simple.

640
01:12:58,000 --> 01:13:09,000
Using our internal Ioctp client session, make a request, return, get response back,

641
01:13:09,000 --> 01:13:16,000
convert this response into a list of post objects.

642
01:13:16,000 --> 01:13:23,000
Make URL is a helper function.

643
01:13:23,000 --> 01:13:30,000
It's private because usually nobody from outside wants to use it.

644
01:13:30,000 --> 01:13:38,000
User code of your client calls, lists, get update, whatever.

645
01:13:38,000 --> 01:13:43,000
Do not call, make URL method.

646
01:13:43,000 --> 01:13:53,000
But what it does, it constructs a real URL used for this call.

647
01:13:53,000 --> 01:14:03,000
Let's assume our server is started on localhost 8080.

648
01:14:03,000 --> 01:14:16,000
To list our posts, we should call localhost 8080-API here.

649
01:14:16,000 --> 01:14:20,000
The idea is pretty simple.

650
01:14:20,000 --> 01:14:29,000
Also, sometimes you need to return headers, for example, authorization headers,

651
01:14:29,000 --> 01:14:36,000
to sign your request to different things.

652
01:14:36,000 --> 01:14:42,000
But we avoid this complexity.

653
01:14:42,000 --> 01:14:52,000
You got my idea how to make it more robust and satisfy your requirements.

654
01:14:52,000 --> 01:14:54,000
Usage.

655
01:14:54,000 --> 01:15:02,000
We have a client now, not an Ioctp client, but our client wrapper around Ioctp session.

656
01:15:02,000 --> 01:15:16,000
We initialize it with URL and username and use await client list to get posts and print them.

657
01:15:16,000 --> 01:15:22,000
It can be improved.

658
01:15:22,000 --> 01:15:32,000
People usually don't like to use try finally, but the real situation is even worse.

659
01:15:32,000 --> 01:15:38,000
Many people cannot use it properly.

660
01:15:38,000 --> 01:15:50,000
I personally made such mistakes several times, like pushing client inside a try and it's a perhubung error.

661
01:15:50,000 --> 01:15:56,000
So, this statement is much more handy.

662
01:15:56,000 --> 01:16:02,000
For asynchronous world, we have async with.

663
01:16:02,000 --> 01:16:16,000
The difference is in old good with statement, you cannot do asynchronous code in enter and exit dunder methods.

664
01:16:16,000 --> 01:16:25,000
But I think with... Sorry, forgot to change this example to fix it.

665
01:16:25,000 --> 01:16:30,000
I think with can do it.

666
01:16:30,000 --> 01:16:41,000
So, I think with client do everything on exit from this block, client will be closed.

667
01:16:41,000 --> 01:16:53,000
And I really sorry, should be a enter and a exit to work with async with.

668
01:16:53,000 --> 01:16:58,000
It's a new asynchronous magic method.

669
01:16:58,000 --> 01:17:04,000
There are async def.

670
01:17:04,000 --> 01:17:16,000
This code is used to enter the context and async def a exit, sorry again, closes our client.

671
01:17:16,000 --> 01:17:23,000
So, again, full client is much more complex.

672
01:17:23,000 --> 01:17:28,000
The beginning is pretty same.

673
01:17:28,000 --> 01:17:40,000
We have a post data class, we have a client with all required methods like get, delete, update.

674
01:17:40,000 --> 01:17:50,000
But we want to provide not only a class, but command line interface.

675
01:17:50,000 --> 01:18:00,000
Like... Sorry.

676
01:18:00,000 --> 01:18:09,000
Give me now.

677
01:18:09,000 --> 01:18:17,000
Write and code client.

678
01:18:17,000 --> 01:18:33,000
So, we have a command line too with POSIX standard command line interface with help, with bells.

679
01:18:33,000 --> 01:18:39,000
And we had it using click.

680
01:18:39,000 --> 01:18:49,000
So, let me make a full example.

681
01:18:49,000 --> 01:18:57,000
Let's start a server.

682
01:18:57,000 --> 01:19:01,000
Yes, we have a server here.

683
01:19:01,000 --> 01:19:07,000
REST server and client say list.

684
01:19:07,000 --> 01:19:09,000
It's empty.

685
01:19:09,000 --> 01:19:14,000
Let's use create command from here.

686
01:19:14,000 --> 01:19:16,000
Create.

687
01:19:16,000 --> 01:19:18,000
What is create API?

688
01:19:18,000 --> 01:19:31,000
I should provide title and content.

689
01:19:31,000 --> 01:19:33,000
Like this.

690
01:19:33,000 --> 01:19:38,000
Sorry.

691
01:19:38,000 --> 01:19:45,000
Should be text.

692
01:19:45,000 --> 01:19:55,000
We created a post, then list says we have one post.

693
01:19:55,000 --> 01:20:01,000
Also, get.

694
01:20:01,000 --> 01:20:09,000
Let's see the full information about the post.

695
01:20:09,000 --> 01:20:17,000
You can try delete and update on your own.

696
01:20:17,000 --> 01:20:20,000
What is the tricky part of it?

697
01:20:20,000 --> 01:20:27,000
It's integration of synchronous click.

698
01:20:27,000 --> 01:20:31,000
Click is awesome library.

699
01:20:31,000 --> 01:20:35,000
I love it almost.

700
01:20:35,000 --> 01:20:39,000
Except some parts.

701
01:20:39,000 --> 01:20:43,000
But click is a synchronous one.

702
01:20:43,000 --> 01:20:57,000
So, this is standard click usage like we have a base group for main command.

703
01:20:57,000 --> 01:21:05,000
You have commands in name and group to get create and post everything.

704
01:21:05,000 --> 01:21:10,000
I want to use asynchronous code from this command.

705
01:21:10,000 --> 01:21:19,000
So, I think dev create to call my client, REST client.

706
01:21:19,000 --> 01:21:23,000
It's achieved by this decorator.

707
01:21:23,000 --> 01:21:34,000
Which, see, this decorator may be a little complex, but this is the idea.

708
01:21:34,000 --> 01:21:50,000
We provide a wrapper which runs our internal asynchronous function and return result back.

709
01:21:50,000 --> 01:21:59,000
Also, click has a context.

710
01:21:59,000 --> 01:22:04,000
Context is a global object for click.

711
01:22:04,000 --> 01:22:11,000
We can push into this context our own class.

712
01:22:11,000 --> 01:22:24,000
So, in the root click command, we create a root object passing URL user here.

713
01:22:24,000 --> 01:22:34,000
And this root object from here has an asynchronous method.

714
01:22:34,000 --> 01:22:37,000
Async context manager.

715
01:22:37,000 --> 01:22:44,000
Like just context manager I showed you before from context sleep from here.

716
01:22:44,000 --> 01:22:50,000
But Python has also async context manager.

717
01:22:50,000 --> 01:22:57,000
The same, but you can use await from async.

718
01:22:57,000 --> 01:23:08,000
So, we have a helper which creates a client, returns it, and closes after the usage.

719
01:23:08,000 --> 01:23:24,000
And in our click command handlers, we use for async with client, do something, and go away.

720
01:23:24,000 --> 01:23:29,000
So, that's it about client.

721
01:23:29,000 --> 01:23:31,000
Do you have questions?

722
01:23:31,000 --> 01:23:55,000
Do you need time maybe to try yourself?

723
01:23:55,000 --> 01:24:24,000
I'll just mention that there's a break at 3 o'clock, so we'll try this out on your own and then take the break at 3 o'clock and come back after 20 minutes.

724
01:24:24,000 --> 01:24:29,000
I can.

725
01:24:29,000 --> 01:24:34,000
Let me switch to code editor.

726
01:24:34,000 --> 01:24:39,000
I use Mariata's laptop and sorry.

727
01:24:39,000 --> 01:24:46,000
Let me switch to my own.

728
01:24:46,000 --> 01:24:52,000
Because I don't know how to type properly on Mac.

729
01:24:52,000 --> 01:24:59,000
I prefer Linux.

730
01:24:59,000 --> 01:25:02,000
Linux and Emacs.

731
01:25:02,000 --> 01:25:06,000
Doesn't anybody use Emacs?

732
01:25:06,000 --> 01:25:21,000
Good.

733
01:25:21,000 --> 01:25:33,000
So,

734
01:25:33,000 --> 01:25:51,000
I recall how to change font by command, but

735
01:25:51,000 --> 01:26:17,000
this is a problem.

736
01:26:17,000 --> 01:26:22,000
No, sorry, too long.

737
01:26:22,000 --> 01:26:28,000
Let me use simple editor.

738
01:26:28,000 --> 01:26:36,000
And where is the font size here?

739
01:26:36,000 --> 01:26:44,000
Small to small, properties, preferences.

740
01:26:44,000 --> 01:26:52,000
Yes, here we are.

741
01:26:52,000 --> 01:27:10,000
Not default, but something really big.

742
01:27:10,000 --> 01:27:15,000
Enough, no?

743
01:27:15,000 --> 01:27:35,000
Yes, we'll do.

744
01:27:35,000 --> 01:27:45,000
Okay, so, you know, thank you, Seth.

745
01:27:45,000 --> 01:27:57,000
We want to use, I think, this statement.

746
01:27:57,000 --> 01:28:12,000
Let me save it as Python to enable colorizing.

747
01:28:12,000 --> 01:28:15,000
Yes, looks better.

748
01:28:15,000 --> 01:28:19,000
But still colorizing, don't like async vault.

749
01:28:19,000 --> 01:28:22,000
I cannot solve it.

750
01:28:22,000 --> 01:28:33,000
So, we have a class which has an init constructor.

751
01:28:33,000 --> 01:28:37,000
Just as placeholder, that's fine.

752
01:28:37,000 --> 01:28:51,000
And we need to implement async enter.

753
01:28:51,000 --> 01:28:53,000
Return self.

754
01:28:53,000 --> 01:28:59,000
And need to implement async exit.

755
01:28:59,000 --> 01:29:05,000
Exit self.

756
01:29:05,000 --> 01:29:13,000
Well, xtype, xvalue, xtraceback.

757
01:29:13,000 --> 01:29:21,000
We don't need all of them, but do something.

758
01:29:21,000 --> 01:29:23,000
Closing.

759
01:29:23,000 --> 01:29:30,000
And it's async function, so we can use await.

760
01:29:30,000 --> 01:29:35,000
Awake async, you'll sleep.

761
01:29:35,000 --> 01:29:39,000
Just for example.

762
01:29:39,000 --> 01:29:41,000
It works pretty well.

763
01:29:41,000 --> 01:29:46,000
But you have to write a class.

764
01:29:46,000 --> 01:29:52,000
You have to split logic between a enter and a exit.

765
01:29:52,000 --> 01:30:01,000
And it's not very convenient if you want to quickly just initialize something.

766
01:30:01,000 --> 01:30:07,000
Return control flow back to the callee.

767
01:30:07,000 --> 01:30:14,000
And close.

768
01:30:14,000 --> 01:30:19,000
So, what can we do?

769
01:30:19,000 --> 01:30:33,000
We can write async function which do initialize part.

770
01:30:33,000 --> 01:30:41,000
Then yield something.

771
01:30:41,000 --> 01:30:53,000
Like, well, to be more concrete, client is iohtp client session.

772
01:30:53,000 --> 01:30:56,000
Then yield client.

773
01:30:56,000 --> 01:31:04,000
Then use await client close.

774
01:31:04,000 --> 01:31:09,000
The problem is this function, it's generator.

775
01:31:09,000 --> 01:31:13,000
It's pretty readable, simple.

776
01:31:13,000 --> 01:31:20,000
But cannot be used with async with statement.

777
01:31:20,000 --> 01:31:28,000
I think with func does not work as client.

778
01:31:28,000 --> 01:31:40,000
We want to do something like resp is...

779
01:31:40,000 --> 01:31:42,000
Let's use canonical way.

780
01:31:42,000 --> 01:32:00,000
Async with client get URL as response and print response status.

781
01:32:00,000 --> 01:32:07,000
Our function has no a enter and a exit.

782
01:32:07,000 --> 01:32:11,000
But we can make a decorator.

783
01:32:11,000 --> 01:32:18,000
Decorator is pretty easy.

784
01:32:18,000 --> 01:32:25,000
Should I display it? Maybe not.

785
01:32:25,000 --> 01:32:27,000
Maybe yes.

786
01:32:27,000 --> 01:32:30,000
So, it's projects.

787
01:32:30,000 --> 01:32:38,000
Let me open Python context lib.

788
01:32:38,000 --> 01:32:53,000
And go to async context manager definition.

789
01:32:53,000 --> 01:33:08,000
Not format 12 to this screen size.

790
01:33:08,000 --> 01:33:14,000
Scroll down, scroll down, scroll down again.

791
01:33:14,000 --> 01:33:20,000
So, basically, what do you need?

792
01:33:20,000 --> 01:33:28,000
You need to create this function object.

793
01:33:28,000 --> 01:33:31,000
We have function.

794
01:33:31,000 --> 01:33:41,000
We have generator is function.

795
01:33:41,000 --> 01:33:59,000
We should to get async iterator from it.

796
01:33:59,000 --> 01:34:02,000
Now we are ready to iterate our function.

797
01:34:02,000 --> 01:34:08,000
We should call first iteration.

798
01:34:08,000 --> 01:34:14,000
Await it a next.

799
01:34:14,000 --> 01:34:16,000
Here.

800
01:34:16,000 --> 01:34:24,000
It runs our asynchronous generator to first yield.

801
01:34:24,000 --> 01:34:27,000
And we get result here.

802
01:34:27,000 --> 01:34:29,000
So far so good.

803
01:34:29,000 --> 01:34:40,000
And this part, these two lines could be pushed inside a enter function.

804
01:34:40,000 --> 01:34:55,000
Next part is again it a next to execute await client clause.

805
01:34:55,000 --> 01:35:17,000
Real code has a little more checks, for example, to make sure that our function has only one yield and finished after calling second a next part.

806
01:35:17,000 --> 01:35:19,000
But that's it.

807
01:35:19,000 --> 01:35:44,000
And everything is done by context lib async context manager already in Python 3.7.

808
01:35:44,000 --> 01:35:47,000
Yes.

809
01:35:47,000 --> 01:35:59,000
Again, like Python had already synchronous context manager for many years.

810
01:35:59,000 --> 01:36:00,000
Good idea.

811
01:36:00,000 --> 01:36:01,000
People like it.

812
01:36:01,000 --> 01:36:10,000
And we created asynchronous context manager for it.

813
01:36:10,000 --> 01:36:16,000
Because class writing is not always fun.

814
01:36:16,000 --> 01:36:21,000
People like short code.

815
01:36:21,000 --> 01:36:36,000
Any other question?

816
01:36:36,000 --> 01:36:39,000
Okay.

817
01:36:39,000 --> 01:36:46,000
So let's make a break.

818
01:36:46,000 --> 01:36:49,000
Okay.

819
01:36:49,000 --> 01:36:50,000
Good.

820
01:37:09,000 --> 01:37:11,000
Okay.

821
01:37:39,000 --> 01:37:41,000
Okay.

822
01:38:09,000 --> 01:38:11,000
Okay.

823
01:38:11,000 --> 01:38:13,000
Okay.

824
01:38:13,000 --> 01:38:15,000
Okay.

825
01:38:15,000 --> 01:38:17,000
Okay.

826
01:38:17,000 --> 01:38:19,000
Okay.

827
01:38:19,000 --> 01:38:21,000
Okay.

828
01:38:21,000 --> 01:38:23,000
Okay.

829
01:38:23,000 --> 01:38:25,000
Okay.

830
01:38:25,000 --> 01:38:27,000
Okay.

831
01:38:27,000 --> 01:38:29,000
Okay.

832
01:38:29,000 --> 01:38:31,000
Okay.

833
01:38:31,000 --> 01:38:33,000
Okay.

834
01:38:33,000 --> 01:38:35,000
Okay.

835
01:38:35,000 --> 01:38:37,000
Okay.

836
01:38:37,000 --> 01:38:39,000
Okay.

837
01:38:39,000 --> 01:38:41,000
Okay.

838
01:38:41,000 --> 01:38:43,000
Okay.

839
01:38:43,000 --> 01:38:45,000
Okay.

840
01:38:45,000 --> 01:38:47,000
Okay.

841
01:38:47,000 --> 01:38:49,000
Okay.

842
01:38:49,000 --> 01:38:51,000
Okay.

843
01:38:51,000 --> 01:38:53,000
Okay.

844
01:38:53,000 --> 01:38:55,000
Okay.

845
01:38:55,000 --> 01:38:57,000
Okay.

846
01:38:57,000 --> 01:38:59,000
Okay.

847
01:38:59,000 --> 01:39:01,000
Okay.

848
01:39:01,000 --> 01:39:03,000
Okay.

849
01:39:03,000 --> 01:39:05,000
Okay.

850
01:39:05,000 --> 01:39:07,000
Okay.

851
01:39:07,000 --> 01:39:09,000
Okay.

852
01:39:09,000 --> 01:39:11,000
Okay.

853
01:39:11,000 --> 01:39:13,000
Okay.

854
01:39:13,000 --> 01:39:15,000
Okay.

855
01:39:15,000 --> 01:39:17,000
Okay.

856
01:39:17,000 --> 01:39:19,000
Okay.

857
01:39:19,000 --> 01:39:21,000
Okay.

858
01:39:21,000 --> 01:39:23,000
Okay.

859
01:39:23,000 --> 01:39:25,000
Okay.

860
01:39:25,000 --> 01:39:27,000
Okay.

861
01:39:27,000 --> 01:39:29,000
Okay.

862
01:39:29,000 --> 01:39:31,000
Okay.

863
01:39:31,000 --> 01:39:33,000
Okay.

864
01:39:33,000 --> 01:39:35,000
Okay.

865
01:39:35,000 --> 01:39:37,000
Okay.

866
01:39:37,000 --> 01:39:39,000
Okay.

867
01:39:39,000 --> 01:39:41,000
Okay.

868
01:39:41,000 --> 01:39:43,000
Okay.

869
01:39:43,000 --> 01:39:45,000
Okay.

870
01:39:45,000 --> 01:39:47,000
Okay.

871
01:39:47,000 --> 01:39:49,000
Okay.

872
01:39:49,000 --> 01:39:51,000
Okay.

873
01:39:51,000 --> 01:39:53,000
Okay.

874
01:39:53,000 --> 01:39:55,000
Okay.

875
01:39:55,000 --> 01:39:57,000
Okay.

876
01:39:57,000 --> 01:39:59,000
Okay.

877
01:39:59,000 --> 01:40:01,000
Okay.

878
01:40:01,000 --> 01:40:03,000
Okay.

879
01:40:03,000 --> 01:40:05,000
Okay.

880
01:40:05,000 --> 01:40:07,000
Okay.

881
01:40:07,000 --> 01:40:09,000
Okay.

882
01:40:09,000 --> 01:40:11,000
Okay.

883
01:40:11,000 --> 01:40:13,000
Okay.

884
01:40:13,000 --> 01:40:15,000
Okay.

885
01:40:15,000 --> 01:40:17,000
Okay.

886
01:40:17,000 --> 01:40:19,000
Okay.

887
01:40:19,000 --> 01:40:21,000
Okay.

888
01:40:21,000 --> 01:40:23,000
Okay.

889
01:40:23,000 --> 01:40:25,000
Okay.

890
01:40:25,000 --> 01:40:27,000
Okay.

891
01:40:27,000 --> 01:40:29,000
Okay.

892
01:40:29,000 --> 01:40:31,000
Okay.

893
01:40:31,000 --> 01:40:33,000
Okay.

894
01:40:33,000 --> 01:40:35,000
Okay.

895
01:40:35,000 --> 01:40:37,000
Okay.

896
01:40:37,000 --> 01:40:39,000
Okay.

897
01:40:39,000 --> 01:40:41,000
Okay.

898
01:40:41,000 --> 01:40:43,000
Okay.

899
01:40:43,000 --> 01:40:45,000
Okay.

900
01:40:45,000 --> 01:40:47,000
Okay.

901
01:40:47,000 --> 01:40:49,000
Okay.

902
01:40:49,000 --> 01:40:51,000
Okay.

903
01:40:51,000 --> 01:40:53,000
Okay.

904
01:40:53,000 --> 01:40:55,000
Okay.

905
01:40:55,000 --> 01:40:57,000
Okay.

906
01:40:57,000 --> 01:40:59,000
Okay.

907
01:40:59,000 --> 01:41:01,000
Okay.

908
01:41:01,000 --> 01:41:03,000
Okay.

909
01:41:03,000 --> 01:41:05,000
Okay.

910
01:41:05,000 --> 01:41:07,000
Okay.

911
01:41:07,000 --> 01:41:09,000
Okay.

912
01:41:09,000 --> 01:41:11,000
Okay.

913
01:41:11,000 --> 01:41:13,000
Okay.

914
01:41:13,000 --> 01:41:15,000
Okay.

915
01:41:15,000 --> 01:41:17,000
Okay.

916
01:41:17,000 --> 01:41:19,000
Okay.

917
01:41:19,000 --> 01:41:21,000
Okay.

918
01:41:21,000 --> 01:41:23,000
Okay.

919
01:41:23,000 --> 01:41:25,000
Okay.

920
01:41:25,000 --> 01:41:27,000
Okay.

921
01:41:27,000 --> 01:41:29,000
Okay.

922
01:41:29,000 --> 01:41:31,000
Okay.

923
01:41:31,000 --> 01:41:33,000
Okay.

924
01:41:33,000 --> 01:41:35,000
Okay.

925
01:41:35,000 --> 01:41:37,000
Okay.

926
01:41:37,000 --> 01:41:39,000
Okay.

927
01:41:39,000 --> 01:41:41,000
Okay.

928
01:41:41,000 --> 01:41:43,000
Okay.

929
01:41:43,000 --> 01:41:45,000
Okay.

930
01:41:45,000 --> 01:41:47,000
Okay.

931
01:41:47,000 --> 01:41:49,000
Okay.

932
01:41:49,000 --> 01:41:51,000
Okay.

933
01:41:51,000 --> 01:41:53,000
Okay.

934
01:41:53,000 --> 01:41:55,000
Okay.

935
01:41:55,000 --> 01:41:57,000
Okay.

936
01:41:57,000 --> 01:41:59,000
Okay.

937
01:41:59,000 --> 01:42:01,000
Okay.

938
01:42:01,000 --> 01:42:03,000
Okay.

939
01:42:03,000 --> 01:42:05,000
Okay.

940
01:42:05,000 --> 01:42:07,000
Okay.

941
01:42:07,000 --> 01:42:09,000
Okay.

942
01:42:09,000 --> 01:42:11,000
Okay.

943
01:42:11,000 --> 01:42:13,000
Okay.

944
01:42:13,000 --> 01:42:15,000
Okay.

945
01:42:15,000 --> 01:42:17,000
Okay.

946
01:42:17,000 --> 01:42:19,000
Okay.

947
01:42:19,000 --> 01:42:21,000
Okay.

948
01:42:21,000 --> 01:42:23,000
Okay.

949
01:42:23,000 --> 01:42:25,000
Okay.

950
01:42:25,000 --> 01:42:27,000
Okay.

951
01:42:27,000 --> 01:42:29,000
Okay.

952
01:42:29,000 --> 01:42:31,000
Okay.

953
01:42:31,000 --> 01:42:33,000
Okay.

954
01:42:33,000 --> 01:42:35,000
Okay.

955
01:42:35,000 --> 01:42:37,000
Okay.

956
01:42:37,000 --> 01:42:39,000
Okay.

957
01:42:39,000 --> 01:42:41,000
Okay.

958
01:42:41,000 --> 01:42:43,000
Okay.

959
01:42:43,000 --> 01:42:45,000
Okay.

960
01:42:45,000 --> 01:42:47,000
Okay.

961
01:42:47,000 --> 01:42:49,000
Okay.

962
01:42:49,000 --> 01:42:51,000
Okay.

963
01:42:51,000 --> 01:42:53,000
Okay.

964
01:42:53,000 --> 01:42:55,000
Okay.

965
01:42:55,000 --> 01:42:57,000
Okay.

966
01:42:57,000 --> 01:42:59,000
Okay.

967
01:42:59,000 --> 01:43:01,000
Okay.

968
01:43:01,000 --> 01:43:03,000
Okay.

969
01:43:03,000 --> 01:43:05,000
Okay.

970
01:43:05,000 --> 01:43:07,000
Okay.

971
01:43:07,000 --> 01:43:09,000
Okay.

972
01:43:09,000 --> 01:43:11,000
Okay.

973
01:43:11,000 --> 01:43:13,000
Okay.

974
01:43:13,000 --> 01:43:15,000
Okay.

975
01:43:15,000 --> 01:43:17,000
Okay.

976
01:43:17,000 --> 01:43:19,000
Okay.

977
01:43:19,000 --> 01:43:21,000
Okay.

978
01:43:21,000 --> 01:43:23,000
Okay.

979
01:43:23,000 --> 01:43:25,000
Okay.

980
01:43:25,000 --> 01:43:27,000
Okay.

981
01:43:27,000 --> 01:43:29,000
Okay.

982
01:43:29,000 --> 01:43:31,000
Okay.

983
01:43:31,000 --> 01:43:33,000
Okay.

984
01:43:33,000 --> 01:43:35,000
Okay.

985
01:43:35,000 --> 01:43:37,000
Okay.

986
01:43:37,000 --> 01:43:39,000
Okay.

987
01:43:39,000 --> 01:43:41,000
Okay.

988
01:43:41,000 --> 01:43:43,000
Okay.

989
01:43:43,000 --> 01:43:45,000
Okay.

990
01:43:45,000 --> 01:43:47,000
Okay.

991
01:43:47,000 --> 01:43:49,000
Okay.

992
01:43:49,000 --> 01:43:51,000
Okay.

993
01:43:51,000 --> 01:43:53,000
Okay.

994
01:43:53,000 --> 01:43:55,000
Okay.

995
01:43:55,000 --> 01:43:57,000
Okay.

996
01:43:57,000 --> 01:43:59,000
Okay.

997
01:43:59,000 --> 01:44:01,000
Okay.

998
01:44:01,000 --> 01:44:03,000
Okay.

999
01:44:03,000 --> 01:44:05,000
Okay.

1000
01:44:05,000 --> 01:44:07,000
Okay.

1001
01:44:07,000 --> 01:44:09,000
Okay.

1002
01:44:09,000 --> 01:44:11,000
Okay.

1003
01:44:11,000 --> 01:44:13,000
Okay.

1004
01:44:13,000 --> 01:44:15,000
Okay.

1005
01:44:15,000 --> 01:44:17,000
Okay.

1006
01:44:17,000 --> 01:44:19,000
Okay.

1007
01:44:19,000 --> 01:44:21,000
Okay.

1008
01:44:21,000 --> 01:44:23,000
Okay.

1009
01:44:23,000 --> 01:44:25,000
Okay.

1010
01:44:25,000 --> 01:44:27,000
Okay.

1011
01:44:27,000 --> 01:44:29,000
Okay.

1012
01:44:29,000 --> 01:44:31,000
Okay.

1013
01:44:31,000 --> 01:44:33,000
Okay.

1014
01:44:33,000 --> 01:44:35,000
Okay.

1015
01:44:35,000 --> 01:44:37,000
Okay.

1016
01:44:37,000 --> 01:44:39,000
Okay.

1017
01:44:39,000 --> 01:44:41,000
Okay.

1018
01:44:41,000 --> 01:44:43,000
Okay.

1019
01:44:43,000 --> 01:44:45,000
Okay.

1020
01:44:45,000 --> 01:44:47,000
Okay.

1021
01:44:47,000 --> 01:44:49,000
Okay.

1022
01:44:49,000 --> 01:44:51,000
Okay.

1023
01:44:51,000 --> 01:44:53,000
Okay.

1024
01:44:53,000 --> 01:44:55,000
Okay.

1025
01:44:55,000 --> 01:44:57,000
Okay.

1026
01:44:57,000 --> 01:44:59,000
Okay.

1027
01:44:59,000 --> 01:45:01,000
Okay.

1028
01:45:01,000 --> 01:45:03,000
Okay.

1029
01:45:03,000 --> 01:45:05,000
Okay.

1030
01:45:05,000 --> 01:45:07,000
Okay.

1031
01:45:07,000 --> 01:45:09,000
Okay.

1032
01:45:09,000 --> 01:45:11,000
Okay.

1033
01:45:11,000 --> 01:45:13,000
Okay.

1034
01:45:13,000 --> 01:45:15,000
Okay.

1035
01:45:15,000 --> 01:45:17,000
Okay.

1036
01:45:17,000 --> 01:45:19,000
Okay.

1037
01:45:19,000 --> 01:45:21,000
Okay.

1038
01:45:21,000 --> 01:45:23,000
Okay.

1039
01:45:23,000 --> 01:45:25,000
Okay.

1040
01:45:25,000 --> 01:45:27,000
Okay.

1041
01:45:27,000 --> 01:45:29,000
Okay.

1042
01:45:29,000 --> 01:45:31,000
Okay.

1043
01:45:31,000 --> 01:45:33,000
Okay.

1044
01:45:33,000 --> 01:45:35,000
Okay.

1045
01:45:35,000 --> 01:45:37,000
Okay.

1046
01:45:37,000 --> 01:45:39,000
Okay.

1047
01:45:39,000 --> 01:45:41,000
Okay.

1048
01:45:41,000 --> 01:45:43,000
Okay.

1049
01:45:43,000 --> 01:45:45,000
Okay.

1050
01:45:45,000 --> 01:45:47,000
Okay.

1051
01:45:47,000 --> 01:45:49,000
Okay.

1052
01:45:49,000 --> 01:45:51,000
Okay.

1053
01:45:51,000 --> 01:45:53,000
Okay.

1054
01:45:53,000 --> 01:45:55,000
Okay.

1055
01:45:55,000 --> 01:45:57,000
Okay.

1056
01:45:57,000 --> 01:45:59,000
Okay.

1057
01:45:59,000 --> 01:46:01,000
Okay.

1058
01:46:01,000 --> 01:46:03,000
Okay.

1059
01:46:03,000 --> 01:46:05,000
Okay.

1060
01:46:05,000 --> 01:46:07,000
Okay.

1061
01:46:07,000 --> 01:46:09,000
Okay.

1062
01:46:09,000 --> 01:46:11,000
Okay.

1063
01:46:11,000 --> 01:46:13,000
Okay.

1064
01:46:13,000 --> 01:46:15,000
Okay.

1065
01:46:15,000 --> 01:46:17,000
Okay.

1066
01:46:17,000 --> 01:46:19,000
Okay.

1067
01:46:19,000 --> 01:46:21,000
Okay.

1068
01:46:21,000 --> 01:46:23,000
Okay.

1069
01:46:23,000 --> 01:46:25,000
Okay.

1070
01:46:25,000 --> 01:46:27,000
Okay.

1071
01:46:27,000 --> 01:46:29,000
Okay.

1072
01:46:29,000 --> 01:46:31,000
Okay.

1073
01:46:31,000 --> 01:46:33,000
Okay.

1074
01:46:33,000 --> 01:46:35,000
Okay.

1075
01:46:35,000 --> 01:46:37,000
Okay.

1076
01:46:37,000 --> 01:46:39,000
Okay.

1077
01:46:39,000 --> 01:46:41,000
Okay.

1078
01:46:41,000 --> 01:46:43,000
Okay.

1079
01:46:43,000 --> 01:46:45,000
Okay.

1080
01:46:45,000 --> 01:46:47,000
Okay.

1081
01:46:47,000 --> 01:46:49,000
Okay.

1082
01:46:49,000 --> 01:46:51,000
Okay.

1083
01:46:51,000 --> 01:46:53,000
Okay.

1084
01:46:53,000 --> 01:46:55,000
Okay.

1085
01:46:55,000 --> 01:46:57,000
Okay.

1086
01:46:57,000 --> 01:46:59,000
Okay.

1087
01:46:59,000 --> 01:47:01,000
Okay.

1088
01:47:01,000 --> 01:47:03,000
Okay.

1089
01:47:03,000 --> 01:47:05,000
Okay.

1090
01:47:05,000 --> 01:47:07,000
Okay.

1091
01:47:07,000 --> 01:47:09,000
Okay.

1092
01:47:09,000 --> 01:47:11,000
Okay.

1093
01:47:11,000 --> 01:47:13,000
Okay.

1094
01:47:13,000 --> 01:47:15,000
Okay.

1095
01:47:15,000 --> 01:47:17,000
Okay.

1096
01:47:17,000 --> 01:47:19,000
Okay.

1097
01:47:19,000 --> 01:47:21,000
Okay.

1098
01:47:21,000 --> 01:47:23,000
Okay.

1099
01:47:23,000 --> 01:47:25,000
Okay.

1100
01:47:25,000 --> 01:47:27,000
Okay.

1101
01:47:27,000 --> 01:47:29,000
Okay.

1102
01:47:29,000 --> 01:47:31,000
Okay.

1103
01:47:31,000 --> 01:47:33,000
Okay.

1104
01:47:33,000 --> 01:47:35,000
Okay.

1105
01:47:35,000 --> 01:47:37,000
Okay.

1106
01:47:37,000 --> 01:47:39,000
Okay.

1107
01:47:39,000 --> 01:47:41,000
Okay.

1108
01:47:41,000 --> 01:47:43,000
Okay.

1109
01:47:43,000 --> 01:47:45,000
Okay.

1110
01:47:45,000 --> 01:47:47,000
Okay.

1111
01:47:47,000 --> 01:47:49,000
Okay.

1112
01:47:49,000 --> 01:47:51,000
Okay.

1113
01:47:51,000 --> 01:47:53,000
Okay.

1114
01:47:53,000 --> 01:47:55,000
Okay.

1115
01:47:55,000 --> 01:47:57,000
Okay.

1116
01:47:57,000 --> 01:47:59,000
Okay.

1117
01:47:59,000 --> 01:48:01,000
Okay.

1118
01:48:01,000 --> 01:48:03,000
Okay.

1119
01:48:03,000 --> 01:48:05,000
Okay.

1120
01:48:05,000 --> 01:48:07,000
Okay.

1121
01:48:07,000 --> 01:48:09,000
Okay.

1122
01:48:09,000 --> 01:48:11,000
Okay.

1123
01:48:11,000 --> 01:48:13,000
Okay.

1124
01:48:13,000 --> 01:48:15,000
Okay.

1125
01:48:15,000 --> 01:48:17,000
Okay.

1126
01:48:17,000 --> 01:48:19,000
Okay.

1127
01:48:19,000 --> 01:48:21,000
Okay.

1128
01:48:21,000 --> 01:48:23,000
Okay.

1129
01:48:23,000 --> 01:48:25,000
Okay.

1130
01:48:25,000 --> 01:48:27,000
Okay.

1131
01:48:27,000 --> 01:48:29,000
Okay.

1132
01:48:29,000 --> 01:48:31,000
Okay.

1133
01:48:31,000 --> 01:48:33,000
Okay.

1134
01:48:33,000 --> 01:48:35,000
Okay.

1135
01:48:35,000 --> 01:48:37,000
Okay.

1136
01:48:37,000 --> 01:48:39,000
Okay.

1137
01:48:39,000 --> 01:48:41,000
Okay.

1138
01:48:41,000 --> 01:48:43,000
Okay.

1139
01:48:43,000 --> 01:48:45,000
Okay.

1140
01:48:45,000 --> 01:48:47,000
Okay.

1141
01:48:47,000 --> 01:48:49,000
Okay.

1142
01:48:49,000 --> 01:48:51,000
Okay.

1143
01:48:51,000 --> 01:48:53,000
Okay.

1144
01:48:53,000 --> 01:48:55,000
Okay.

1145
01:48:55,000 --> 01:48:57,000
Okay.

1146
01:48:57,000 --> 01:48:59,000
Okay.

1147
01:48:59,000 --> 01:49:01,000
Okay.

1148
01:49:01,000 --> 01:49:03,000
Okay.

1149
01:49:03,000 --> 01:49:05,000
Okay.

1150
01:49:05,000 --> 01:49:07,000
Okay.

1151
01:49:07,000 --> 01:49:09,000
Okay.

1152
01:49:09,000 --> 01:49:11,000
Okay.

1153
01:49:11,000 --> 01:49:13,000
Okay.

1154
01:49:13,000 --> 01:49:15,000
Okay.

1155
01:49:15,000 --> 01:49:17,000
Okay.

1156
01:49:17,000 --> 01:49:19,000
Okay.

1157
01:49:19,000 --> 01:49:21,000
Okay.

1158
01:49:21,000 --> 01:49:23,000
Okay.

1159
01:49:23,000 --> 01:49:25,000
Okay.

1160
01:49:25,000 --> 01:49:27,000
Okay.

1161
01:49:27,000 --> 01:49:29,000
Okay.

1162
01:49:29,000 --> 01:49:31,000
Okay.

1163
01:49:31,000 --> 01:49:33,000
Okay.

1164
01:49:33,000 --> 01:49:35,000
Okay.

1165
01:49:35,000 --> 01:49:37,000
Okay.

1166
01:49:37,000 --> 01:49:39,000
Okay.

1167
01:49:39,000 --> 01:49:41,000
Okay.

1168
01:49:41,000 --> 01:49:43,000
Okay.

1169
01:49:43,000 --> 01:49:45,000
Okay.

1170
01:49:45,000 --> 01:49:47,000
Okay.

1171
01:49:47,000 --> 01:49:49,000
Okay.

1172
01:49:49,000 --> 01:49:51,000
Okay.

1173
01:49:51,000 --> 01:49:53,000
Okay.

1174
01:49:53,000 --> 01:49:55,000
Okay.

1175
01:49:55,000 --> 01:49:57,000
Okay.

1176
01:49:57,000 --> 01:49:59,000
Okay.

1177
01:49:59,000 --> 01:50:01,000
Okay.

1178
01:50:01,000 --> 01:50:03,000
Okay.

1179
01:50:03,000 --> 01:50:05,000
Okay.

1180
01:50:05,000 --> 01:50:07,000
Okay.

1181
01:50:07,000 --> 01:50:09,000
Okay.

1182
01:50:09,000 --> 01:50:11,000
Okay.

1183
01:50:11,000 --> 01:50:13,000
Okay.

1184
01:50:13,000 --> 01:50:15,000
Okay.

1185
01:50:15,000 --> 01:50:17,000
Okay.

1186
01:50:17,000 --> 01:50:19,000
Okay.

1187
01:50:19,000 --> 01:50:21,000
Okay.

1188
01:50:21,000 --> 01:50:23,000
Okay.

1189
01:50:23,000 --> 01:50:25,000
Okay.

1190
01:50:25,000 --> 01:50:27,000
Okay.

1191
01:50:27,000 --> 01:50:29,000
Okay.

1192
01:50:29,000 --> 01:50:31,000
Okay.

1193
01:50:31,000 --> 01:50:33,000
Okay.

1194
01:50:33,000 --> 01:50:35,000
Okay.

1195
01:50:35,000 --> 01:50:37,000
Okay.

1196
01:50:37,000 --> 01:50:39,000
Okay.

1197
01:50:39,000 --> 01:50:41,000
Okay.

1198
01:50:41,000 --> 01:50:43,000
Okay.

1199
01:50:43,000 --> 01:50:45,000
Okay.

1200
01:50:45,000 --> 01:50:47,000
Okay.

1201
01:50:47,000 --> 01:50:49,000
Okay.

1202
01:50:49,000 --> 01:50:51,000
Okay.

1203
01:50:51,000 --> 01:50:53,000
Okay.

1204
01:50:53,000 --> 01:50:55,000
Okay.

1205
01:50:55,000 --> 01:50:57,000
Okay.

1206
01:50:57,000 --> 01:50:59,000
Okay.

1207
01:50:59,000 --> 01:51:01,000
Okay.

1208
01:51:01,000 --> 01:51:03,000
Okay.

1209
01:51:03,000 --> 01:51:05,000
Okay.

1210
01:51:05,000 --> 01:51:07,000
Okay.

1211
01:51:07,000 --> 01:51:09,000
Okay.

1212
01:51:09,000 --> 01:51:11,000
Okay.

1213
01:51:11,000 --> 01:51:13,000
Okay.

1214
01:51:13,000 --> 01:51:15,000
Okay.

1215
01:51:15,000 --> 01:51:17,000
Okay.

1216
01:51:17,000 --> 01:51:19,000
Okay.

1217
01:51:19,000 --> 01:51:21,000
Okay.

1218
01:51:21,000 --> 01:51:23,000
Okay.

1219
01:51:23,000 --> 01:51:25,000
Okay.

1220
01:51:25,000 --> 01:51:27,000
Okay.

1221
01:51:27,000 --> 01:51:29,000
Okay.

1222
01:51:29,000 --> 01:51:31,000
Okay.

1223
01:51:31,000 --> 01:51:33,000
Okay.

1224
01:51:33,000 --> 01:51:35,000
Okay.

1225
01:51:35,000 --> 01:51:37,000
Okay.

1226
01:51:37,000 --> 01:51:39,000
Okay.

1227
01:51:39,000 --> 01:51:41,000
Okay.

1228
01:51:41,000 --> 01:51:43,000
Okay.

1229
01:51:43,000 --> 01:51:45,000
Okay.

1230
01:51:45,000 --> 01:51:47,000
Okay.

1231
01:51:47,000 --> 01:51:49,000
Okay.

1232
01:51:49,000 --> 01:51:51,000
Okay.

1233
01:51:51,000 --> 01:51:53,000
Okay.

1234
01:51:53,000 --> 01:51:55,000
Okay.

1235
01:51:55,000 --> 01:51:57,000
Okay.

1236
01:51:57,000 --> 01:51:59,000
Okay.

1237
01:51:59,000 --> 01:52:01,000
Okay.

1238
01:52:01,000 --> 01:52:03,000
Okay.

1239
01:52:03,000 --> 01:52:05,000
Okay.

1240
01:52:05,000 --> 01:52:07,000
Okay.

1241
01:52:07,000 --> 01:52:09,000
Okay.

1242
01:52:09,000 --> 01:52:11,000
Okay.

1243
01:52:11,000 --> 01:52:13,000
Okay.

1244
01:52:13,000 --> 01:52:15,000
Okay.

1245
01:52:15,000 --> 01:52:17,000
Okay.

1246
01:52:17,000 --> 01:52:19,000
Okay.

1247
01:52:19,000 --> 01:52:21,000
Okay.

1248
01:52:21,000 --> 01:52:23,000
Okay.

1249
01:52:23,000 --> 01:52:25,000
Okay.

1250
01:52:25,000 --> 01:52:27,000
Okay.

1251
01:52:27,000 --> 01:52:29,000
Okay.

1252
01:52:29,000 --> 01:52:31,000
Okay.

1253
01:52:31,000 --> 01:52:33,000
Okay.

1254
01:52:33,000 --> 01:52:35,000
Okay.

1255
01:52:35,000 --> 01:52:37,000
Okay.

1256
01:52:37,000 --> 01:52:39,000
Okay.

1257
01:52:39,000 --> 01:52:41,000
Okay.

1258
01:52:41,000 --> 01:52:43,000
Okay.

1259
01:52:43,000 --> 01:52:45,000
Okay.

1260
01:52:45,000 --> 01:52:47,000
Okay.

1261
01:52:47,000 --> 01:52:49,000
Okay.

1262
01:52:49,000 --> 01:52:51,000
Okay.

1263
01:52:51,000 --> 01:52:53,000
Okay.

1264
01:52:53,000 --> 01:52:55,000
Okay.

1265
01:52:55,000 --> 01:52:57,000
Okay.

1266
01:52:57,000 --> 01:52:59,000
Okay.

1267
01:52:59,000 --> 01:53:01,000
Okay.

1268
01:53:01,000 --> 01:53:03,000
Okay.

1269
01:53:03,000 --> 01:53:05,000
Okay.

1270
01:53:05,000 --> 01:53:07,000
Okay.

1271
01:53:07,000 --> 01:53:09,000
Okay.

1272
01:53:09,000 --> 01:53:11,000
Okay.

1273
01:53:11,000 --> 01:53:13,000
Okay.

1274
01:53:13,000 --> 01:53:15,000
Okay.

1275
01:53:15,000 --> 01:53:17,000
Okay.

1276
01:53:17,000 --> 01:53:19,000
Okay.

1277
01:53:19,000 --> 01:53:21,000
Okay.

1278
01:53:21,000 --> 01:53:23,000
Okay.

1279
01:53:23,000 --> 01:53:25,000
Okay.

1280
01:53:25,000 --> 01:53:27,000
Okay.

1281
01:53:27,000 --> 01:53:29,000
Okay.

1282
01:53:29,000 --> 01:53:31,000
Okay.

1283
01:53:31,000 --> 01:53:33,000
Okay.

1284
01:53:33,000 --> 01:53:35,000
Okay.

1285
01:53:35,000 --> 01:53:37,000
Okay.

1286
01:53:37,000 --> 01:53:39,000
Okay.

1287
01:53:39,000 --> 01:53:41,000
Okay.

1288
01:53:41,000 --> 01:53:43,000
Okay.

1289
01:53:43,000 --> 01:53:45,000
Okay.

1290
01:53:45,000 --> 01:53:47,000
Okay.

1291
01:53:47,000 --> 01:53:49,000
Okay.

1292
01:53:49,000 --> 01:53:51,000
Okay.

1293
01:53:51,000 --> 01:53:53,000
Okay.

1294
01:53:53,000 --> 01:53:55,000
Okay.

1295
01:53:55,000 --> 01:53:57,000
Okay.

1296
01:53:57,000 --> 01:53:59,000
Okay.

1297
01:53:59,000 --> 01:54:01,000
Okay.

1298
01:54:01,000 --> 01:54:03,000
Okay.

1299
01:54:03,000 --> 01:54:05,000
Okay.

1300
01:54:05,000 --> 01:54:07,000
Okay.

1301
01:54:07,000 --> 01:54:09,000
Okay.

1302
01:54:09,000 --> 01:54:11,000
Okay.

1303
01:54:11,000 --> 01:54:13,000
Okay.

1304
01:54:13,000 --> 01:54:15,000
Okay.

1305
01:54:15,000 --> 01:54:17,000
Okay.

1306
01:54:17,000 --> 01:54:19,000
Okay.

1307
01:54:19,000 --> 01:54:21,000
Okay.

1308
01:54:21,000 --> 01:54:23,000
Okay.

1309
01:54:23,000 --> 01:54:25,000
Okay.

1310
01:54:25,000 --> 01:54:27,000
Okay.

1311
01:54:27,000 --> 01:54:29,000
Okay.

1312
01:54:29,000 --> 01:54:31,000
Okay.

1313
01:54:31,000 --> 01:54:33,000
Okay.

1314
01:54:33,000 --> 01:54:35,000
Okay.

1315
01:54:35,000 --> 01:54:37,000
Okay.

1316
01:54:37,000 --> 01:54:39,000
Okay.

1317
01:54:39,000 --> 01:54:41,000
Okay.

1318
01:54:41,000 --> 01:54:43,000
Okay.

1319
01:54:43,000 --> 01:54:45,000
Okay.

1320
01:54:45,000 --> 01:54:47,000
Okay.

1321
01:54:47,000 --> 01:54:49,000
Okay.

1322
01:54:49,000 --> 01:54:51,000
Okay.

1323
01:54:51,000 --> 01:54:53,000
Okay.

1324
01:54:53,000 --> 01:54:55,000
Okay.

1325
01:54:55,000 --> 01:54:57,000
Okay.

1326
01:54:57,000 --> 01:54:59,000
Okay.

1327
01:54:59,000 --> 01:55:01,000
Okay.

1328
01:55:01,000 --> 01:55:03,000
Okay.

1329
01:55:03,000 --> 01:55:05,000
Okay.

1330
01:55:05,000 --> 01:55:07,000
Okay.

1331
01:55:07,000 --> 01:55:09,000
Okay.

1332
01:55:09,000 --> 01:55:11,000
Okay.

1333
01:55:11,000 --> 01:55:13,000
Okay.

1334
01:55:13,000 --> 01:55:15,000
Okay.

1335
01:55:15,000 --> 01:55:17,000
Okay.

1336
01:55:17,000 --> 01:55:19,000
Okay.

1337
01:55:19,000 --> 01:55:21,000
Okay.

1338
01:55:21,000 --> 01:55:23,000
Okay.

1339
01:55:23,000 --> 01:55:25,000
Okay.

1340
01:55:25,000 --> 01:55:27,000
Okay.

1341
01:55:27,000 --> 01:55:29,000
Okay.

1342
01:55:29,000 --> 01:55:31,000
Okay.

1343
01:55:31,000 --> 01:55:33,000
Okay.

1344
01:55:33,000 --> 01:55:35,000
Okay.

1345
01:55:35,000 --> 01:55:37,000
Okay.

1346
01:55:37,000 --> 01:55:39,000
Okay.

1347
01:55:39,000 --> 01:55:41,000
Okay.

1348
01:55:41,000 --> 01:55:43,000
Okay.

1349
01:55:43,000 --> 01:55:45,000
Okay.

1350
01:55:45,000 --> 01:55:47,000
Okay.

1351
01:55:47,000 --> 01:55:49,000
Okay.

1352
01:55:49,000 --> 01:55:51,000
Okay.

1353
01:55:51,000 --> 01:55:53,000
Okay.

1354
01:55:53,000 --> 01:55:55,000
Okay.

1355
01:55:55,000 --> 01:55:57,000
Okay.

1356
01:55:57,000 --> 01:55:59,000
Okay.

1357
01:55:59,000 --> 01:56:01,000
Okay.

1358
01:56:01,000 --> 01:56:03,000
Okay.

1359
01:56:03,000 --> 01:56:05,000
Okay.

1360
01:56:05,000 --> 01:56:07,000
Okay.

1361
01:56:07,000 --> 01:56:09,000
Okay.

1362
01:56:09,000 --> 01:56:11,000
Okay.

1363
01:56:11,000 --> 01:56:13,000
Okay.

1364
01:56:13,000 --> 01:56:15,000
Okay.

1365
01:56:15,000 --> 01:56:17,000
Okay.

1366
01:56:17,000 --> 01:56:19,000
Okay.

1367
01:56:19,000 --> 01:56:21,000
Okay.

1368
01:56:21,000 --> 01:56:23,000
Okay.

1369
01:56:23,000 --> 01:56:25,000
Okay.

1370
01:56:25,000 --> 01:56:27,000
Okay.

1371
01:56:27,000 --> 01:56:29,000
Okay.

1372
01:56:29,000 --> 01:56:31,000
Okay.

1373
01:56:31,000 --> 01:56:33,000
Okay.

1374
01:56:33,000 --> 01:56:35,000
Okay.

1375
01:56:35,000 --> 01:56:37,000
Okay.

1376
01:56:37,000 --> 01:56:39,000
Okay.

1377
01:56:39,000 --> 01:56:41,000
Okay.

1378
01:56:41,000 --> 01:56:43,000
Okay.

1379
01:56:43,000 --> 01:56:45,000
Okay.

1380
01:56:45,000 --> 01:56:47,000
Okay.

1381
01:56:47,000 --> 01:56:49,000
Okay.

1382
01:56:49,000 --> 01:56:51,000
Okay.

1383
01:56:51,000 --> 01:56:53,000
Okay.

1384
01:56:53,000 --> 01:56:55,000
Okay.

1385
01:56:55,000 --> 01:56:57,000
Okay.

1386
01:56:57,000 --> 01:56:59,000
Okay.

1387
01:56:59,000 --> 01:57:01,000
Okay.

1388
01:57:01,000 --> 01:57:03,000
Okay.

1389
01:57:03,000 --> 01:57:05,000
Okay.

1390
01:57:05,000 --> 01:57:07,000
Okay.

1391
01:57:07,000 --> 01:57:09,000
Okay.

1392
01:57:09,000 --> 01:57:11,000
Okay.

1393
01:57:11,000 --> 01:57:13,000
Okay.

1394
01:57:13,000 --> 01:57:15,000
Okay.

1395
01:57:15,000 --> 01:57:17,000
Okay.

1396
01:57:17,000 --> 01:57:19,000
Okay.

1397
01:57:19,000 --> 01:57:21,000
Okay.

1398
01:57:21,000 --> 01:57:23,000
Okay.

1399
01:57:23,000 --> 01:57:25,000
Okay.

1400
01:57:25,000 --> 01:57:27,000
Okay.

1401
01:57:27,000 --> 01:57:29,000
Okay.

1402
01:57:29,000 --> 01:57:31,000
Okay.

1403
01:57:31,000 --> 01:57:33,000
Okay.

1404
01:57:33,000 --> 01:57:35,000
Okay.

1405
01:57:35,000 --> 01:57:37,000
Okay.

1406
01:57:37,000 --> 01:57:39,000
Okay.

1407
01:57:39,000 --> 01:57:41,000
Okay.

1408
01:57:41,000 --> 01:57:43,000
Okay.

1409
01:57:43,000 --> 01:57:45,000
Okay.

1410
01:57:45,000 --> 01:57:47,000
Okay.

1411
01:57:47,000 --> 01:57:49,000
Okay.

1412
01:57:49,000 --> 01:57:51,000
Okay.

1413
01:57:51,000 --> 01:57:53,000
Okay.

1414
01:57:53,000 --> 01:57:55,000
Okay.

1415
01:57:55,000 --> 01:57:57,000
Okay.

1416
01:57:57,000 --> 01:57:59,000
Okay.

1417
01:57:59,000 --> 01:58:01,000
Okay.

1418
01:58:01,000 --> 01:58:03,000
Okay.

1419
01:58:03,000 --> 01:58:05,000
Okay.

1420
01:58:05,000 --> 01:58:07,000
Okay.

1421
01:58:07,000 --> 01:58:09,000
Okay.

1422
01:58:09,000 --> 01:58:11,000
Okay.

1423
01:58:11,000 --> 01:58:13,000
Okay.

1424
01:58:13,000 --> 01:58:15,000
Okay.

1425
01:58:15,000 --> 01:58:17,000
Okay.

1426
01:58:17,000 --> 01:58:19,000
Okay.

1427
01:58:19,000 --> 01:58:21,000
Okay.

1428
01:58:21,000 --> 01:58:23,000
Okay.

1429
01:58:23,000 --> 01:58:25,000
Okay.

1430
01:58:25,000 --> 01:58:27,000
Okay.

1431
01:58:27,000 --> 01:58:29,000
Okay.

1432
01:58:29,000 --> 01:58:31,000
Okay.

1433
01:58:31,000 --> 01:58:33,000
Okay.

1434
01:58:33,000 --> 01:58:35,000
Okay.

1435
01:58:35,000 --> 01:58:37,000
Okay.

1436
01:58:37,000 --> 01:58:39,000
Okay.

1437
01:58:39,000 --> 01:58:41,000
Okay.

1438
01:58:41,000 --> 01:58:43,000
Okay.

1439
01:58:43,000 --> 01:58:45,000
Okay.

1440
01:58:45,000 --> 01:58:47,000
Okay.

1441
01:58:47,000 --> 01:58:49,000
Okay.

1442
01:58:49,000 --> 01:58:51,000
Okay.

1443
01:58:51,000 --> 01:58:53,000
Okay.

1444
01:58:53,000 --> 01:58:55,000
Okay.

1445
01:58:55,000 --> 01:58:57,000
Okay.

1446
01:58:57,000 --> 01:58:59,000
Okay.

1447
01:58:59,000 --> 01:59:01,000
Okay.

1448
01:59:01,000 --> 01:59:03,000
Okay.

1449
01:59:03,000 --> 01:59:05,000
Okay.

1450
01:59:05,000 --> 01:59:07,000
Okay.

1451
01:59:07,000 --> 01:59:09,000
Okay.

1452
01:59:09,000 --> 01:59:11,000
Okay.

1453
01:59:11,000 --> 01:59:13,000
Okay.

1454
01:59:13,000 --> 01:59:15,000
Okay.

1455
01:59:15,000 --> 01:59:17,000
Okay.

1456
01:59:17,000 --> 01:59:19,000
Okay.

1457
01:59:19,000 --> 01:59:21,000
Okay.

1458
01:59:21,000 --> 01:59:23,000
Okay.

1459
01:59:23,000 --> 01:59:25,000
Okay.

1460
01:59:25,000 --> 01:59:27,000
Okay.

1461
01:59:27,000 --> 01:59:29,000
Okay.

1462
01:59:29,000 --> 01:59:31,000
Okay.

1463
01:59:31,000 --> 01:59:33,000
Okay.

1464
01:59:33,000 --> 01:59:35,000
Okay.

1465
01:59:35,000 --> 01:59:37,000
Okay.

1466
01:59:37,000 --> 01:59:39,000
Okay.

1467
01:59:39,000 --> 01:59:41,000
Okay.

1468
01:59:41,000 --> 01:59:43,000
Okay.

1469
01:59:43,000 --> 01:59:45,000
Okay.

1470
01:59:45,000 --> 01:59:47,000
Okay.

1471
01:59:47,000 --> 01:59:49,000
Okay.

1472
01:59:49,000 --> 01:59:51,000
Okay.

1473
01:59:51,000 --> 01:59:53,000
Okay.

1474
01:59:53,000 --> 01:59:55,000
Okay.

1475
01:59:55,000 --> 01:59:57,000
Okay.

1476
01:59:57,000 --> 01:59:59,000
Okay.

1477
01:59:59,000 --> 02:00:01,000
Okay.

1478
02:00:01,000 --> 02:00:03,000
Okay.

1479
02:00:03,000 --> 02:00:05,000
Okay.

1480
02:00:05,000 --> 02:00:07,000
Okay.

1481
02:00:07,000 --> 02:00:09,000
Okay.

1482
02:00:09,000 --> 02:00:11,000
Okay.

1483
02:00:11,000 --> 02:00:13,000
Okay.

1484
02:00:13,000 --> 02:00:15,000
Okay.

1485
02:00:15,000 --> 02:00:17,000
Okay.

1486
02:00:17,000 --> 02:00:19,000
Okay.

1487
02:00:19,000 --> 02:00:21,000
Okay.

1488
02:00:21,000 --> 02:00:23,000
Okay.

1489
02:00:23,000 --> 02:00:25,000
Okay.

1490
02:00:25,000 --> 02:00:27,000
Okay.

1491
02:00:27,000 --> 02:00:29,000
Okay.

1492
02:00:29,000 --> 02:00:31,000
Okay.

1493
02:00:31,000 --> 02:00:33,000
Okay.

1494
02:00:33,000 --> 02:00:35,000
Okay.

1495
02:00:35,000 --> 02:00:37,000
Okay.

1496
02:00:37,000 --> 02:00:39,000
Okay.

1497
02:00:39,000 --> 02:00:41,000
Okay.

1498
02:00:41,000 --> 02:00:43,000
Okay.

1499
02:00:43,000 --> 02:00:45,000
Okay.

1500
02:00:45,000 --> 02:00:47,000
Okay.

1501
02:00:47,000 --> 02:00:49,000
Okay.

1502
02:00:49,000 --> 02:00:51,000
Okay.

1503
02:00:51,000 --> 02:00:53,000
Okay.

1504
02:00:53,000 --> 02:00:55,000
Okay.

1505
02:00:55,000 --> 02:00:57,000
Okay.

1506
02:00:57,000 --> 02:00:59,000
Okay.

1507
02:00:59,000 --> 02:01:01,000
Okay.

1508
02:01:01,000 --> 02:01:03,000
Okay.

1509
02:01:03,000 --> 02:01:05,000
Okay.

1510
02:01:05,000 --> 02:01:07,000
Okay.

1511
02:01:07,000 --> 02:01:09,000
Okay.

1512
02:01:09,000 --> 02:01:11,000
Okay.

1513
02:01:11,000 --> 02:01:13,000
Okay.

1514
02:01:13,000 --> 02:01:15,000
Okay.

1515
02:01:15,000 --> 02:01:17,000
Okay.

1516
02:01:17,000 --> 02:01:19,000
Okay.

1517
02:01:19,000 --> 02:01:21,000
Okay.

1518
02:01:21,000 --> 02:01:23,000
Okay.

1519
02:01:23,000 --> 02:01:25,000
Okay.

1520
02:01:25,000 --> 02:01:27,000
Okay.

1521
02:01:27,000 --> 02:01:29,000
Okay.

1522
02:01:29,000 --> 02:01:31,000
Okay.

1523
02:01:31,000 --> 02:01:33,000
Okay.

1524
02:01:33,000 --> 02:01:35,000
Okay.

1525
02:01:35,000 --> 02:01:37,000
Okay.

1526
02:01:37,000 --> 02:01:39,000
Okay.

1527
02:01:39,000 --> 02:01:41,000
Okay.

1528
02:01:41,000 --> 02:01:43,000
Okay.

1529
02:01:43,000 --> 02:01:45,000
Okay.

1530
02:01:45,000 --> 02:01:47,000
Okay.

1531
02:01:47,000 --> 02:01:49,000
Okay.

1532
02:01:49,000 --> 02:01:51,000
Okay.

1533
02:01:51,000 --> 02:01:53,000
Okay.

1534
02:01:53,000 --> 02:01:55,000
Okay.

1535
02:01:55,000 --> 02:01:57,000
Okay.

1536
02:01:57,000 --> 02:01:59,000
Okay.

1537
02:01:59,000 --> 02:02:01,000
Okay.

1538
02:02:01,000 --> 02:02:03,000
Okay.

1539
02:02:03,000 --> 02:02:05,000
Okay.

1540
02:02:05,000 --> 02:02:07,000
Okay.

1541
02:02:07,000 --> 02:02:09,000
Okay.

1542
02:02:09,000 --> 02:02:11,000
Okay.

1543
02:02:11,000 --> 02:02:13,000
Okay.

1544
02:02:13,000 --> 02:02:15,000
Okay.

1545
02:02:15,000 --> 02:02:17,000
Okay.

1546
02:02:17,000 --> 02:02:19,000
Okay.

1547
02:02:19,000 --> 02:02:21,000
Okay.

1548
02:02:21,000 --> 02:02:23,000
Okay.

1549
02:02:23,000 --> 02:02:25,000
Okay.

1550
02:02:25,000 --> 02:02:27,000
Okay.

1551
02:02:27,000 --> 02:02:29,000
Okay.

1552
02:02:29,000 --> 02:02:31,000
Okay.

1553
02:02:31,000 --> 02:02:33,000
Okay.

1554
02:02:33,000 --> 02:02:35,000
Okay.

1555
02:02:35,000 --> 02:02:37,000
Okay.

1556
02:02:37,000 --> 02:02:39,000
Okay.

1557
02:02:39,000 --> 02:02:41,000
Okay.

1558
02:02:41,000 --> 02:02:43,000
Okay.

1559
02:02:43,000 --> 02:02:45,000
Okay.

1560
02:02:45,000 --> 02:02:47,000
Okay.

1561
02:02:47,000 --> 02:02:49,000
Okay.

1562
02:02:49,000 --> 02:02:51,000
Okay.

1563
02:02:51,000 --> 02:02:53,000
Okay.

1564
02:02:53,000 --> 02:02:55,000
Okay.

1565
02:02:55,000 --> 02:02:57,000
Okay.

1566
02:02:57,000 --> 02:02:59,000
Okay.

1567
02:02:59,000 --> 02:03:01,000
Okay.

1568
02:03:01,000 --> 02:03:03,000
Okay.

1569
02:03:03,000 --> 02:03:05,000
Okay.

1570
02:03:05,000 --> 02:03:07,000
Okay.

1571
02:03:07,000 --> 02:03:09,000
Okay.

1572
02:03:09,000 --> 02:03:11,000
Okay.

1573
02:03:11,000 --> 02:03:13,000
Okay.

1574
02:03:13,000 --> 02:03:15,000
Okay.

1575
02:03:15,000 --> 02:03:17,000
Okay.

1576
02:03:17,000 --> 02:03:19,000
Okay.

1577
02:03:19,000 --> 02:03:21,000
Okay.

1578
02:03:21,000 --> 02:03:23,000
Okay.

1579
02:03:25,000 --> 02:03:27,000
Jaa.

1580
02:03:27,000 --> 02:03:29,000
Juhh.

1581
02:03:29,000 --> 02:03:31,000
Call.

1582
02:03:31,000 --> 02:03:31,900
It's

1583
02:03:33,000 --> 02:03:35,000
jiii

1584
02:03:37,000 --> 02:03:39,000
joi

1585
02:03:41,000 --> 02:03:43,000
joi

1586
02:03:43,000 --> 02:03:45,000
joi

1587
02:03:46,000 --> 02:03:48,000
joi

1588
02:03:48,000 --> 02:03:50,000
no

1589
02:03:51,000 --> 02:04:02,000
Jadi, biar saya buka dokumentasi kita.

1590
02:04:02,000 --> 02:04:04,000
Tidak di sana.

1591
02:04:04,000 --> 02:04:06,000
Ya.

1592
02:04:08,000 --> 02:04:13,000
Jadi, rendering HTML.

1593
02:04:13,000 --> 02:04:21,000
Menciptakan HTML dengan string concatenasi, itu menjengkelkan.

1594
02:04:21,000 --> 02:04:24,000
Dan itu berbahaya.

1595
02:04:24,000 --> 02:04:32,000
Biasanya orang menggunakan mesin template.

1596
02:04:32,000 --> 02:04:40,000
Dan yang paling terkenal dalam dunia Python adalah Ginger 2.

1597
02:04:40,000 --> 02:04:43,000
Oh, sekarang harus lebih baik.

1598
02:04:43,000 --> 02:04:45,000
Ya.

1599
02:04:45,000 --> 02:04:49,000
Saya mencoba untuk menyelamatkan mata.

1600
02:04:49,000 --> 02:04:55,000
Jika Anda tidak memiliki mata, silahkan mengelak.

1601
02:04:55,000 --> 02:05:03,000
Jadi, Ginger 2 tidak memiliki pengetahuan tentang IHDP.

1602
02:05:03,000 --> 02:05:13,000
Dan IHDP tidak memiliki mesin template yang dianggap.

1603
02:05:13,000 --> 02:05:19,000
Tapi kami menawarkan library tertarik.

1604
02:05:19,000 --> 02:05:23,000
Ini library tertarik, tapi saya menerima sokongan.

1605
02:05:23,000 --> 02:05:27,000
Saya menulisnya, saya menerima sokongan, dan juga IHDP.

1606
02:05:27,000 --> 02:05:29,000
Mengapa library yang berbeda?

1607
02:05:29,000 --> 02:05:33,000
Karena dekomposisinya adalah ide yang bagus secara umum.

1608
02:05:33,000 --> 02:05:49,000
Karena dengan ini, kami menikmati jika IHDP bagus dan cukup selesa untuk membiarkan memasukkan,

1609
02:05:49,000 --> 02:05:59,000
untuk contoh ini, mesin template tanpa memubah kod IHDP sendiri.

1610
02:05:59,000 --> 02:06:09,000
Jadi, ia berada untuk beberapa alasan.

1611
02:06:09,000 --> 02:06:25,000
Kita menuliskan Ginger dan IHDP, dan kita memiliki server yang mudah, dan kita memiliki folder untuk template.

1612
02:06:25,000 --> 02:06:35,000
Template di Ginger terlihat seperti kod HTML, dengan yang Anda lihat,

1613
02:06:35,000 --> 02:06:39,000
dan juga untuk pembantuan varian.

1614
02:06:39,000 --> 02:06:51,000
Ginger juga memiliki sintek untuk flow yang lebih kompleks seperti if-block, 4-block,

1615
02:06:51,000 --> 02:06:57,000
template inheritance, dan lain-lain.

1616
02:06:57,000 --> 02:07:03,000
Tapi sekarang, kita memiliki template yang mudah.

1617
02:07:03,000 --> 02:07:14,000
Selanjutnya, kita harus menggunakan plugin IHDP Ginger 2.

1618
02:07:14,000 --> 02:07:20,000
Biasanya plugin ini disiarkan dengan cara ini.

1619
02:07:20,000 --> 02:07:28,000
Mereka memiliki metode set up yang mengisinya aplikasi dan parameter-parameter.

1620
02:07:28,000 --> 02:07:32,000
Parameternya bergantung pada third party.

1621
02:07:32,000 --> 02:07:41,000
Di sini kita memberikan file system loader, yang mengatakan,

1622
02:07:41,000 --> 02:07:52,000
menggunakan subfolder template dan melihat templates di folder ini.

1623
02:07:52,000 --> 02:08:01,000
Dan kod kita, yang sudah diketahui dari snippet pertama,

1624
02:08:01,000 --> 02:08:06,000
disiarkan untuk render template.

1625
02:08:06,000 --> 02:08:10,000
Ginger diperbuat dengan cara ini.

1626
02:08:10,000 --> 02:08:14,000
Anda membuat diksyonari, menyebutnya konteks.

1627
02:08:15,000 --> 02:08:25,000
Diksyonari adalah nama variable konteks, dan nama value diksyonari adalah nama.

1628
02:08:25,000 --> 02:08:35,000
Jadi, Anda memiliki konteks, dan Anda meminta template Ginger untuk render.

1629
02:08:35,000 --> 02:08:38,000
Ini adalah nama template.

1630
02:08:38,000 --> 02:08:42,000
Anda memasang request, dan Anda memasang konteks.

1631
02:08:42,000 --> 02:08:46,000
Dan Anda mendapatkan result yang dikoreksi.

1632
02:08:46,000 --> 02:08:50,000
Mari kita lihat bagaimana ini berfungsi.

1633
02:08:50,000 --> 02:08:54,000
Ini harusnya ada di sini.

1634
02:08:54,000 --> 02:08:58,000
Kod 06, templates.

1635
02:09:04,000 --> 02:09:06,000
Bagus.

1636
02:09:06,000 --> 02:09:10,000
Sekarang, buka link.

1637
02:09:12,000 --> 02:09:16,000
Apa?

1638
02:09:16,000 --> 02:09:18,000
Maaf.

1639
02:09:20,000 --> 02:09:24,000
Mungkin saya harus menyatakan sesuatu.

1640
02:09:24,000 --> 02:09:33,000
Jadi, Anda lihat, ini menggantikan nama saya.

1641
02:09:33,000 --> 02:09:44,000
Dan, nama page adalah hasil rendering template.

1642
02:09:44,000 --> 02:09:49,000
Dan, diubahkan, date dan username.

1643
02:09:49,000 --> 02:09:53,000
Anda lihat, date, apa?

1644
02:09:53,000 --> 02:09:58,000
Menarik, karena saya tidak menjadikannya.

1645
02:09:58,000 --> 02:10:02,000
Dan, username.

1646
02:10:03,000 --> 02:10:05,000
Bagus.

1647
02:10:05,000 --> 02:10:09,000
Jadi, mari kita menambahkan...

1648
02:10:09,000 --> 02:10:15,000
...sebuah sisi pengganti untuk bekerja dengan blog.

1649
02:10:15,000 --> 02:10:18,000
Kami memiliki API.

1650
02:10:18,000 --> 02:10:24,000
Sekarang, kita memerlukan sesuatu untuk menunjukkan kepada pengganti.

1651
02:10:24,000 --> 02:10:29,000
Sekarang, kita memerlukan...

1652
02:10:29,000 --> 02:10:32,000
...sebuah page untuk menunjukkan.

1653
02:10:32,000 --> 02:10:38,000
Untuk menciptakan baru, untuk menunjukkan yang berada, untuk menerima...

1654
02:10:38,000 --> 02:10:44,000
...menjelaskan informasi yang terperinci.

1655
02:10:44,000 --> 02:10:46,000
Apa yang saya lupa?

1656
02:10:46,000 --> 02:10:48,000
Untuk mengubahnya.

1657
02:10:54,000 --> 02:10:57,000
Yang saya ingin menunjukkan juga.

1658
02:10:57,000 --> 02:11:03,000
Ada dua cara yang berbeda untuk menggunakan HTTP Ginger 2.

1659
02:11:03,000 --> 02:11:06,000
Ini adalah fungsi eksplisit.

1660
02:11:06,000 --> 02:11:12,000
Call, render, template, with passing, name, request, and context.

1661
02:11:12,000 --> 02:11:16,000
Dan, satu lainnya adalah menggunakan dekorator.

1662
02:11:16,000 --> 02:11:20,000
Dan, silahkan, pesanan bergantung.

1663
02:11:20,000 --> 02:11:28,000
Pertama, Anda harus menggunakan dekorator, template dekorator, dan kemudian menggunakan route.

1664
02:11:28,000 --> 02:11:30,000
Mengapa?

1665
02:11:30,000 --> 02:11:32,000
Karena...

1666
02:11:32,000 --> 02:11:36,000
...signature web handler terubah.

1667
02:11:36,000 --> 02:11:38,000
Anda melihat...

1668
02:11:38,000 --> 02:11:41,000
Pertama...

1669
02:11:41,000 --> 02:11:50,000
Pertama, kita memiliki fungsi async yang menerima permintaan dan menerima objek respons.

1670
02:11:50,000 --> 02:11:57,000
Tetapi, dengan template dekorator, kita memiliki fungsi async yang menerima permintaan.

1671
02:11:57,000 --> 02:12:01,000
Pertama, ini menerima...

1672
02:12:01,000 --> 02:12:05,000
...diksonari string pada objek.

1673
02:12:05,000 --> 02:12:08,000
Ini menerima konteks Ginger.

1674
02:12:08,000 --> 02:12:14,000
Dan dekorator mengambil konteks ini dan menghasilkan template.

1675
02:12:14,000 --> 02:12:18,000
Ini seperti gula.

1676
02:12:18,000 --> 02:12:24,000
Tidak ada apa-apa yang menarik, tapi menyimpan...

1677
02:12:24,000 --> 02:12:27,000
...seperti beberapa tali.

1678
02:12:27,000 --> 02:12:32,000
Tetapi, kedua-duanya adalah...

1679
02:12:32,000 --> 02:12:35,000
...alternatif, mereka melakukan yang sama.

1680
02:12:35,000 --> 02:12:38,000
Jadi...

1681
02:12:38,000 --> 02:12:45,000
Sekarang saatnya untuk bekerja dengan blog kami.

1682
02:12:45,000 --> 02:12:55,000
Kami memiliki page indeks yang menerima semua dari database.

1683
02:12:55,000 --> 02:13:00,000
Kami membuat konteks, yang dipanggil RET.

1684
02:13:00,000 --> 02:13:03,000
Di conteks ini.

1685
02:13:03,000 --> 02:13:08,000
Ini adalah list dikonteks.

1686
02:13:08,000 --> 02:13:13,000
Dan kami menerima konteks ini ke template.

1687
02:13:13,000 --> 02:13:19,000
Template harus dikendalikan.

1688
02:13:19,000 --> 02:13:23,000
Template indeks sedikit mengerikan.

1689
02:13:23,000 --> 02:13:29,000
Saya menggunakan template inheritance di sini.

1690
02:13:29,000 --> 02:13:31,000
Ginger template inheritance.

1691
02:13:31,000 --> 02:13:37,000
Anda bisa membaca lebih banyak tentang site Ginger sendiri.

1692
02:13:37,000 --> 02:13:41,000
Tetapi idea ini adalah...

1693
02:13:41,000 --> 02:13:48,000
...page index kami menerima base HTML.

1694
02:13:48,000 --> 02:13:50,000
Base HTML...

1695
02:13:50,000 --> 02:13:52,000
...sekejap.

1696
02:13:52,000 --> 02:13:54,000
Di bawah.

1697
02:13:54,000 --> 02:13:57,000
HTML dengan dua blok.

1698
02:13:57,000 --> 02:14:03,000
Satu blok untuk titel dan satu blok untuk konten.

1699
02:14:03,000 --> 02:14:07,000
Dan dengan inheritance kami mengubah...

1700
02:14:07,000 --> 02:14:12,000
...blok yang benar di page inheritance.

1701
02:14:12,000 --> 02:14:15,000
Mengapa orang melakukannya?

1702
02:14:15,000 --> 02:14:19,000
Untuk...

1703
02:14:19,000 --> 02:14:21,000
...menyiapkan...

1704
02:14:21,000 --> 02:14:24,000
...site styling...

1705
02:14:24,000 --> 02:14:27,000
...CSS...

1706
02:14:27,000 --> 02:14:30,000
...basis layout, apapun.

1707
02:14:30,000 --> 02:14:33,000
Di template base.

1708
02:14:33,000 --> 02:14:38,000
Dan menerima template base ini dengan konten benar...

1709
02:14:38,000 --> 02:14:41,000
...yang bergantung pada page to page...

1710
02:14:41,000 --> 02:14:43,000
...dengan page inheritance.

1711
02:14:43,000 --> 02:14:45,000
Jadi...

1712
02:14:45,000 --> 02:14:47,000
...dapatkan...

1713
02:14:47,000 --> 02:14:49,000
...4 loop.

1714
02:14:49,000 --> 02:14:54,000
Ini cara 4 loop terlihat di Ginger, jika Anda tidak tahu.

1715
02:14:54,000 --> 02:15:00,000
Dan kami menerima pos di sini.

1716
02:15:00,000 --> 02:15:02,000
Seperti...

1717
02:15:02,000 --> 02:15:04,000
...referensi A.

1718
02:15:04,000 --> 02:15:06,000
Hyperlink.

1719
02:15:06,000 --> 02:15:08,000
Jadi...

1720
02:15:08,000 --> 02:15:10,000
...itu saja.

1721
02:15:10,000 --> 02:15:12,000
Sama untuk...

1722
02:15:12,000 --> 02:15:14,000
...menyeditasi.

1723
02:15:14,000 --> 02:15:16,000
Tapi...

1724
02:15:16,000 --> 02:15:18,000
...menyeditasi sedikit mengerikan.

1725
02:15:18,000 --> 02:15:24,000
Biar saya lihat bagaimana terlihat.

1726
02:15:24,000 --> 02:15:30,000
Kami memiliki server template.

1727
02:15:30,000 --> 02:15:34,000
Dan...

1728
02:15:34,000 --> 02:15:40,000
Dan...

1729
02:15:40,000 --> 02:15:44,000
Kami memiliki list pos.

1730
02:15:44,000 --> 02:15:46,000
Maaf untuk...

1731
02:15:46,000 --> 02:15:50,000
...terkumpulkan titel.

1732
02:15:50,000 --> 02:15:56,000
Saya tidak sempurna saat menulis database.

1733
02:15:56,000 --> 02:16:00,000
Jadi, ini...

1734
02:16:00,000 --> 02:16:06,000
...page dikondisi oleh Ginger.

1735
02:16:06,000 --> 02:16:10,000
Menurut saya, ini agak mudah.

1736
02:16:10,000 --> 02:16:14,000
Tidak ada colorizing, tidak ada styling.

1737
02:16:14,000 --> 02:16:20,000
Anda mendapatkan idea.

1738
02:16:20,000 --> 02:16:26,000
Kami memiliki...

1739
02:16:26,000 --> 02:16:29,000
...page untuk menunjukkan...

1740
02:16:29,000 --> 02:16:31,000
...list pos.

1741
02:16:31,000 --> 02:16:34,000
Sekarang saya ingin...

1742
02:16:34,000 --> 02:16:38,000
...bicara bagaimana untuk menunjukkan pos.

1743
02:16:38,000 --> 02:16:43,000
Untuk menunjukkan, kita perlu...

1744
02:16:43,000 --> 02:16:45,000
...menulis yang berikutnya.

1745
02:16:45,000 --> 02:16:49,000
Kita harus menunjukkan...

1746
02:16:49,000 --> 02:16:51,000
...form HTML.

1747
02:16:51,000 --> 02:16:53,000
Menulisnya dengan...

1748
02:16:53,000 --> 02:16:56,000
...valu-valu yang berada.

1749
02:16:56,000 --> 02:16:58,000
Dan...

1750
02:16:58,000 --> 02:17:01,000
Biar saya...

1751
02:17:01,000 --> 02:17:05,000
...menunjukkan.

1752
02:17:05,000 --> 02:17:07,000
Kami menunjukkan form.

1753
02:17:07,000 --> 02:17:11,000
Kami memiliki titel baru.

1754
02:17:11,000 --> 02:17:13,000
Kami memiliki konten...

1755
02:17:13,000 --> 02:17:15,000
...fancy...

1756
02:17:15,000 --> 02:17:19,000
...konten.

1757
02:17:19,000 --> 02:17:21,000
Dan ketika saya tekan...

1758
02:17:21,000 --> 02:17:23,000
...menulis boton...

1759
02:17:23,000 --> 02:17:25,000
...form konten...

1760
02:17:25,000 --> 02:17:29,000
...dia akan dihantar ke server kami.

1761
02:17:29,000 --> 02:17:34,000
Sekarang kita berada di...

1762
02:17:34,000 --> 02:17:41,000
...page yang menunjukkan form.

1763
02:17:41,000 --> 02:17:43,000
Sepertinya agak mudah.

1764
02:17:43,000 --> 02:17:45,000
Kami memiliki...

1765
02:17:45,000 --> 02:17:49,000
...post-edit...

1766
02:17:49,000 --> 02:17:51,000
...path.

1767
02:17:51,000 --> 02:17:53,000
Kami menulis...

1768
02:17:53,000 --> 02:17:56,000
...post dari database...

1769
02:17:56,000 --> 02:17:58,000
...dengan post-edit.

1770
02:17:58,000 --> 02:18:00,000
Dan...

1771
02:18:00,000 --> 02:18:02,000
...menulisnya sebagai...

1772
02:18:02,000 --> 02:18:04,000
...konten ginger...

1773
02:18:04,000 --> 02:18:07,000
...dan menulis form ini.

1774
02:18:07,000 --> 02:18:10,000
Template untuk form rendering...

1775
02:18:10,000 --> 02:18:14,000
...ada di sini.

1776
02:18:14,000 --> 02:18:17,000
Anda lihat...

1777
02:18:17,000 --> 02:18:20,000
...ini form.

1778
02:18:20,000 --> 02:18:23,000
Action adalah...

1779
02:18:23,000 --> 02:18:26,000
...url untuk menghantar data form.

1780
02:18:26,000 --> 02:18:29,000
Kami menggunakan method-post...

1781
02:18:29,000 --> 02:18:32,000
...yang dikonsumsi dengan cara yang dikonsumsi.

1782
02:18:32,000 --> 02:18:34,000
Jangan menggunakan get jika...

1783
02:18:34,000 --> 02:18:39,000
...kalau Anda tidak yakin.

1784
02:18:39,000 --> 02:18:42,000
Dan kodin-kodin adalah...

1785
02:18:42,000 --> 02:18:46,000
...data form yang berbagai bagian.

1786
02:18:46,000 --> 02:18:48,000
Kami memiliki beberapa...

1787
02:18:48,000 --> 02:18:50,000
...pada bidang untuk edit...

1788
02:18:50,000 --> 02:18:52,000
...submit button.

1789
02:18:52,000 --> 02:18:53,000
Itulah.

1790
02:18:53,000 --> 02:18:56,000
Ketika saya tekan...

1791
02:18:56,000 --> 02:18:59,000
...submit...

1792
02:18:59,000 --> 02:19:01,000
...saya menghantar...

1793
02:19:01,000 --> 02:19:04,000
...request untuk servis.

1794
02:19:04,000 --> 02:19:05,000
Biar saya lakukan.

1795
02:19:05,000 --> 02:19:06,000
Klik.

1796
02:19:06,000 --> 02:19:07,000
Ya.

1797
02:19:07,000 --> 02:19:10,000
Kami memiliki titel yang diubah.

1798
02:19:10,000 --> 02:19:14,000
Dan database juga diubah.

1799
02:19:18,000 --> 02:19:21,000
Bagaimana itu terjadi?

1800
02:19:21,000 --> 02:19:25,000
Data post dihantar dalam form ini.

1801
02:19:25,000 --> 02:19:28,000
Anda lihat...

1802
02:19:28,000 --> 02:19:32,000
...kodin-kodin yang sedikit kompleks.

1803
02:19:32,000 --> 02:19:35,000
Ada dua bagian.

1804
02:19:35,000 --> 02:19:38,000
Yang pertama dan kedua.

1805
02:19:38,000 --> 02:19:41,000
Ini separator antara...

1806
02:19:41,000 --> 02:19:42,000
...bagaimana...

1807
02:19:42,000 --> 02:19:44,000
...kalau kami...

1808
02:19:44,000 --> 02:19:46,000
...menyelidikan...

1809
02:19:46,000 --> 02:19:49,000
...kodin-kodin yang diubah...

1810
02:19:49,000 --> 02:19:52,000
...ke...

1811
02:19:52,000 --> 02:19:54,000
...tex...

1812
02:19:54,000 --> 02:19:55,000
...dan...

1813
02:19:55,000 --> 02:19:57,000
...di dalam form kodin-kodin...

1814
02:19:57,000 --> 02:20:00,000
...kodin-kodin itu sangat besar.

1815
02:20:00,000 --> 02:20:04,000
HTTP tahu bagaimana...

1816
02:20:04,000 --> 02:20:08,000
...menyelidikannya.

1817
02:20:08,000 --> 02:20:12,000
Jadi, post kita...

1818
02:20:12,000 --> 02:20:14,000
...webhandler...

1819
02:20:14,000 --> 02:20:16,000
...reit data post.

1820
02:20:16,000 --> 02:20:19,000
Semua itu dalam memori, maaf.

1821
02:20:19,000 --> 02:20:20,000
Menyelidikannya.

1822
02:20:20,000 --> 02:20:22,000
Menyelidikannya.

1823
02:20:22,000 --> 02:20:23,000
Menyelidikannya.

1824
02:20:23,000 --> 02:20:24,000
Menyelidikannya.

1825
02:20:24,000 --> 02:20:26,000
Memori konsumsi.

1826
02:20:26,000 --> 02:20:29,000
Tapi saya...

1827
02:20:29,000 --> 02:20:32,000
...tidak ingin membuang...

1828
02:20:32,000 --> 02:20:37,000
...tutorial ini.

1829
02:20:37,000 --> 02:20:40,000
Mari kita simpan...

1830
02:20:40,000 --> 02:20:42,000
...secepat mungkin.

1831
02:20:42,000 --> 02:20:44,000
Jadi, kita memiliki...

1832
02:20:44,000 --> 02:20:46,000
...data post baru.

1833
02:20:46,000 --> 02:20:48,000
Kita mengelakkan...

1834
02:20:48,000 --> 02:20:50,000
...database...

1835
02:20:50,000 --> 02:20:52,000
...kodin-kodin SQL...

1836
02:20:52,000 --> 02:20:53,000
...untuk mengubah...

1837
02:20:53,000 --> 02:20:55,000
...title dan teks.

1838
02:20:55,000 --> 02:20:56,000
Di sini.

1839
02:20:56,000 --> 02:20:58,000
Kita harus mengumumkan...

1840
02:20:58,000 --> 02:21:00,000
...atau mengubah...

1841
02:21:00,000 --> 02:21:01,000
...bagaimana...

1842
02:21:01,000 --> 02:21:02,000
...library ini berfungsi.

1843
02:21:02,000 --> 02:21:04,000
Dan...

1844
02:21:04,000 --> 02:21:05,000
...kita tidak...

1845
02:21:05,000 --> 02:21:06,000
...membuang...

1846
02:21:06,000 --> 02:21:07,000
...konten baru...

1847
02:21:07,000 --> 02:21:08,000
...segera.

1848
02:21:08,000 --> 02:21:10,000
Tapi...

1849
02:21:10,000 --> 02:21:11,000
...kita akan...

1850
02:21:11,000 --> 02:21:12,000
...menerima...

1851
02:21:12,000 --> 02:21:14,000
...penggunaan.

1852
02:21:14,000 --> 02:21:16,000
Dan browser...

1853
02:21:16,000 --> 02:21:20,000
...akan pergi...

1854
02:21:20,000 --> 02:21:22,000
...ke lokasi ini.

1855
02:21:22,000 --> 02:21:24,000
Tapi dengan...

1856
02:21:24,000 --> 02:21:26,000
...metode GET.

1857
02:21:26,000 --> 02:21:28,000
Sangat komen...

1858
02:21:28,000 --> 02:21:32,000
...di perkembangan web.

1859
02:21:32,000 --> 02:21:34,000
Sangat komen teknik.

1860
02:21:34,000 --> 02:21:38,000
Yang...

1861
02:21:38,000 --> 02:21:40,000
...yang...

1862
02:21:40,000 --> 02:21:42,000
...sangat...

1863
02:21:42,000 --> 02:21:44,000
...kita harus melakukan...

1864
02:21:44,000 --> 02:21:46,000
...penggunaan.

1865
02:21:46,000 --> 02:21:48,000
Semua orang...

1866
02:21:48,000 --> 02:21:50,000
...seharusnya...

1867
02:21:50,000 --> 02:21:52,000
...menerima...

1868
02:21:52,000 --> 02:21:54,000
...data post baru.

1869
02:21:54,000 --> 02:21:56,000
Jadi...

1870
02:21:56,000 --> 02:21:58,000
...kita...

1871
02:21:58,000 --> 02:22:00,000
...memiliki...

1872
02:22:00,000 --> 02:22:02,000
...seberapa...

1873
02:22:02,000 --> 02:22:04,000
...pengetahuan...

1874
02:22:04,000 --> 02:22:06,000
...untuk...

1875
02:22:06,000 --> 02:22:08,000
...sebarang...

1876
02:22:08,000 --> 02:22:10,000
...menunjukkan...

1877
02:22:10,000 --> 02:22:12,000
...forma...

1878
02:22:12,000 --> 02:22:14,000
...forma baru...

1879
02:22:14,000 --> 02:22:16,000
...dan menerima data...

1880
02:22:16,000 --> 02:22:18,000
...menerima ke database.

1881
02:22:18,000 --> 02:22:20,000
Menunjukkan post, edit post,

1882
02:22:20,000 --> 02:22:22,000
menerima data...

1883
02:22:22,000 --> 02:22:24,000
...menerima...

1884
02:22:24,000 --> 02:22:26,000
...post.

1885
02:22:26,000 --> 02:22:28,000
Tidak...

1886
02:22:28,000 --> 02:22:30,000
...di REST...

1887
02:22:30,000 --> 02:22:32,000
...kita bebas untuk menggunakan...

1888
02:22:32,000 --> 02:22:34,000
...patch...

1889
02:22:34,000 --> 02:22:36,000
...dan...

1890
02:22:36,000 --> 02:22:38,000
...menerima...

1891
02:22:38,000 --> 02:22:40,000
...menggunakan...

1892
02:22:40,000 --> 02:22:42,000
...browser...

1893
02:22:42,000 --> 02:22:44,000
...tanpa JavaScript.

1894
02:22:44,000 --> 02:22:46,000
Tidak hanya...

1895
02:22:46,000 --> 02:22:48,000
...tentang menerima dan menerima.

1896
02:22:48,000 --> 02:22:50,000
Jadi kita butuh...

1897
02:22:50,000 --> 02:22:52,000
...lebih...

1898
02:22:52,000 --> 02:22:54,000
...menerima...

1899
02:22:54,000 --> 02:22:56,000
...menerima.

1900
02:22:56,000 --> 02:22:58,000
Dan...

1901
02:22:58,000 --> 02:23:00,000
...kita butuh...

1902
02:23:00,000 --> 02:23:02,000
...2...

1903
02:23:02,000 --> 02:23:04,000
...webhandlers untuk...

1904
02:23:04,000 --> 02:23:06,000
...post-edit lagi.

1905
02:23:06,000 --> 02:23:08,000
Untuk alasan yang sama.

1906
02:23:08,000 --> 02:23:10,000
Satu untuk menunjukkan...

1907
02:23:10,000 --> 02:23:12,000
...forma HTML...

1908
02:23:12,000 --> 02:23:14,000
...dan...

1909
02:23:14,000 --> 02:23:16,000
...salah satu untuk...

1910
02:23:16,000 --> 02:23:18,000
...menerima data.

1911
02:23:22,000 --> 02:23:24,000
Lihatlah...

1912
02:23:24,000 --> 02:23:26,000
...ini adalah...

1913
02:23:26,000 --> 02:23:28,000
...fungsi...

1914
02:23:28,000 --> 02:23:30,000
...yang dianggap...

1915
02:23:30,000 --> 02:23:32,000
...semuanya berhasil.

1916
02:23:34,000 --> 02:23:36,000
Saya ingin...

1917
02:23:36,000 --> 02:23:38,000
...menyebutkan...

1918
02:23:38,000 --> 02:23:40,000
...kita tidak...

1919
02:23:40,000 --> 02:23:42,000
...menjadikan...

1920
02:23:42,000 --> 02:23:44,000
...menyelidikkan tes untuk tutorial ini.

1921
02:23:44,000 --> 02:23:46,000
Dan itu menakutkan...

1922
02:23:46,000 --> 02:23:48,000
...sikit.

1923
02:23:48,000 --> 02:23:50,000
Biasanya saya...

1924
02:23:50,000 --> 02:23:52,000
...menyelidikkan dengan...

1925
02:23:52,000 --> 02:23:54,000
...menjadikan tes unit yang bagus, tapi...

1926
02:23:54,000 --> 02:23:56,000
...tapi...

1927
02:23:58,000 --> 02:24:00,000
...menjadikan...

1928
02:24:00,000 --> 02:24:02,000
...tutorial ini...

1929
02:24:02,000 --> 02:24:04,000
...menjadikan tes yang bagus.

1930
02:24:04,000 --> 02:24:06,000
Mungkin...

1931
02:24:06,000 --> 02:24:08,000
...ada yang salah.

1932
02:24:08,000 --> 02:24:10,000
Tapi...

1933
02:24:10,000 --> 02:24:12,000
...kita coba.

1934
02:24:12,000 --> 02:24:14,000
Saya mencoba secara manual.

1935
02:24:16,000 --> 02:24:18,000
Text...

1936
02:24:18,000 --> 02:24:20,000
...submit...

1937
02:24:20,000 --> 02:24:22,000
...seperti...

1938
02:24:22,000 --> 02:24:24,000
...text...

1939
02:24:24,000 --> 02:24:26,000
...anonymous, karena...

1940
02:24:26,000 --> 02:24:28,000
...kita butuh sesi untuk...

1941
02:24:30,000 --> 02:24:32,000
...memanfaatkan login, logout...

1942
02:24:32,000 --> 02:24:34,000
...teknik...

1943
02:24:34,000 --> 02:24:36,000
...text, text...

1944
02:24:36,000 --> 02:24:38,000
...new text...

1945
02:24:44,000 --> 02:24:46,000
...submit...

1946
02:24:46,000 --> 02:24:48,000
...seperti...

1947
02:24:48,000 --> 02:24:50,000
...new one...

1948
02:24:50,000 --> 02:24:52,000
...dan kita bisa...

1949
02:24:52,000 --> 02:24:54,000
...tukar delete...

1950
02:24:58,000 --> 02:25:00,000
...postnya hilang.

1951
02:25:02,000 --> 02:25:04,000
Mungkin ergonomik...

1952
02:25:04,000 --> 02:25:06,000
...tidak...

1953
02:25:06,000 --> 02:25:08,000
...tidak sangat bagus, tapi...

1954
02:25:08,000 --> 02:25:10,000
...berfungsi dan...

1955
02:25:10,000 --> 02:25:12,000
...kamu bisa memperbaikinya jika kamu mau.

1956
02:25:16,000 --> 02:25:18,000
Seperti biasa...

1957
02:25:18,000 --> 02:25:20,000
...kita punya...

1958
02:25:22,000 --> 02:25:24,000
...teks penuh untuk contoh ini.

1959
02:25:26,000 --> 02:25:28,000
Sebenarnya...

1960
02:25:28,000 --> 02:25:30,000
...menampaknya cukup dekat...

1961
02:25:30,000 --> 02:25:32,000
...ke dalam server...

1962
02:25:32,000 --> 02:25:34,000
...tapi...

1963
02:25:34,000 --> 02:25:36,000
...tidak menerima...

1964
02:25:36,000 --> 02:25:38,000
...JSON...

1965
02:25:38,000 --> 02:25:40,000
...tapi render HTML page.

1966
02:25:40,000 --> 02:25:42,000
Terakhir.

1967
02:25:46,000 --> 02:25:48,000
Pesan template Ginger...

1968
02:25:48,000 --> 02:25:50,000
...sudah selesai.

1969
02:25:52,000 --> 02:25:54,000
Pertanyaan.

1970
02:25:54,000 --> 02:25:56,000
Petani

1971
02:26:14,000 --> 02:26:16,000
Oh, the other!

1972
02:26:16,000 --> 02:26:18,000
atau 302, saya rasa.

1973
02:26:22,000 --> 02:26:24,000
Bukan 200.

1974
02:26:24,000 --> 02:26:26,000
Ini kode redireksi.

1975
02:26:30,000 --> 02:26:34,000
Jika Anda buka tutorial

1976
02:26:34,000 --> 02:26:36,000
untuk Django,

1977
02:26:36,000 --> 02:26:38,000
untuk Flask,

1978
02:26:38,000 --> 02:26:40,000
Anda akan melihat kode yang

1979
02:26:40,000 --> 02:26:42,000
kelihatan sangat

1980
02:26:42,000 --> 02:26:44,000
serupa dengan yang ini.

1981
02:26:44,000 --> 02:26:48,000
Tapi tanpa asing weight syntax.

1982
02:26:50,000 --> 02:26:52,000
Semua framework web

1983
02:26:52,000 --> 02:26:54,000
di Python

1984
02:26:56,000 --> 02:26:58,000
yang bekerja dengan templates,

1985
02:27:00,000 --> 02:27:02,000
menciptakan konteks,

1986
02:27:02,000 --> 02:27:04,000
mengerjakan,

1987
02:27:04,000 --> 02:27:06,000
menerima bentuk,

1988
02:27:08,000 --> 02:27:10,000
menerima data baru

1989
02:27:10,000 --> 02:27:12,000
ke database,

1990
02:27:12,000 --> 02:27:14,000
dan itu saja.

1991
02:27:18,000 --> 02:27:20,000
Sebuah bahan selanjutnya adalah

1992
02:27:20,000 --> 02:27:22,000
imaj.

1993
02:27:28,000 --> 02:27:30,000
Database kita

1994
02:27:30,000 --> 02:27:32,000
sebenarnya memiliki

1995
02:27:32,000 --> 02:27:34,000
imaj

1996
02:27:34,000 --> 02:27:36,000
di

1997
02:27:38,000 --> 02:27:40,000
pos

1998
02:27:40,000 --> 02:27:42,000
SQL table

1999
02:27:44,000 --> 02:27:46,000
dengan jenis bytes.

2000
02:27:46,000 --> 02:27:48,000
Ini adalah

2001
02:27:48,000 --> 02:27:50,000
blop field.

2002
02:27:50,000 --> 02:27:52,000
Biasanya,

2003
02:27:52,000 --> 02:27:54,000
Anda ingin menyimpan

2004
02:27:54,000 --> 02:27:56,000
imaj Anda

2005
02:27:56,000 --> 02:27:58,000
pada CDN

2006
02:27:58,000 --> 02:28:00,000
atau Amazon S3,

2007
02:28:00,000 --> 02:28:02,000
apapun.

2008
02:28:02,000 --> 02:28:04,000
Bukan di database.

2009
02:28:06,000 --> 02:28:08,000
Tapi untuk sebab

2010
02:28:08,000 --> 02:28:10,000
tutorial,

2011
02:28:10,000 --> 02:28:12,000
database itu

2012
02:28:12,000 --> 02:28:14,000
sudah cukup baik.

2013
02:28:16,000 --> 02:28:18,000
Bagaimana

2014
02:28:18,000 --> 02:28:20,000
kita menangani

2015
02:28:20,000 --> 02:28:22,000
imaj?

2016
02:28:22,000 --> 02:28:24,000
Kita butuh

2017
02:28:24,000 --> 02:28:26,000
jenis yang lain

2018
02:28:28,000 --> 02:28:30,000
yang dipanggil post-image,

2019
02:28:32,000 --> 02:28:34,000
yang dikirimkan dengan nombor

2020
02:28:34,000 --> 02:28:36,000
post,

2021
02:28:36,000 --> 02:28:38,000
image content dari

2022
02:28:38,000 --> 02:28:40,000
database,

2023
02:28:40,000 --> 02:28:42,000
dan kembali ke respons

2024
02:28:42,000 --> 02:28:44,000
dengan jenis image jpg.

2025
02:28:46,000 --> 02:28:48,000
Content itu

2026
02:28:48,000 --> 02:28:50,000
image content,

2027
02:28:50,000 --> 02:28:52,000
hanya bytes jpg

2028
02:28:52,000 --> 02:28:54,000
representasi.

2029
02:28:54,000 --> 02:28:56,000
Jika formnya

2030
02:28:56,000 --> 02:28:58,000
tidak memiliki imaj,

2031
02:28:58,000 --> 02:29:00,000
kita cepat menyerang

2032
02:29:00,000 --> 02:29:02,000
kecil

2033
02:29:02,000 --> 02:29:04,000
untuk

2034
02:29:04,000 --> 02:29:06,000
menunjukkan sesuatu.

2035
02:29:08,000 --> 02:29:10,000
Kita memodifkan

2036
02:29:10,000 --> 02:29:12,000
template kita

2037
02:29:14,000 --> 02:29:16,000
untuk menunjukkan

2038
02:29:16,000 --> 02:29:18,000
imaj

2039
02:29:18,000 --> 02:29:20,000
dengan

2040
02:29:20,000 --> 02:29:22,000
dengan

2041
02:29:22,000 --> 02:29:24,000
EMG

2042
02:29:24,000 --> 02:29:26,000
HTML tag

2043
02:29:26,000 --> 02:29:28,000
dengan

2044
02:29:28,000 --> 02:29:30,000
source image

2045
02:29:30,000 --> 02:29:32,000
yang menandai pada image web handler kita.

2046
02:29:34,000 --> 02:29:36,000
Itu saja untuk

2047
02:29:38,000 --> 02:29:40,000
menunjukkan.

2048
02:29:40,000 --> 02:29:42,000
Saya tidak melihat

2049
02:29:42,000 --> 02:29:44,000
imaj di sini,

2050
02:29:44,000 --> 02:29:46,000
karena saya harus

2051
02:29:46,000 --> 02:29:48,000
menjalin server

2052
02:29:48,000 --> 02:29:50,000
lain

2053
02:29:50,000 --> 02:29:52,000
dari

2054
02:29:52,000 --> 02:29:54,000
section baru.

2055
02:30:04,000 --> 02:30:06,000
Jadi,

2056
02:30:06,000 --> 02:30:08,000
ya,

2057
02:30:08,000 --> 02:30:10,000
lihat,

2058
02:30:10,000 --> 02:30:12,000
ini

2059
02:30:12,000 --> 02:30:14,000
imaj kecil

2060
02:30:14,000 --> 02:30:16,000
dengan sesuatu.

2061
02:30:16,000 --> 02:30:18,000
Sesuatu

2062
02:30:18,000 --> 02:30:20,000
dengan

2063
02:30:20,000 --> 02:30:22,000
teks.

2064
02:30:22,000 --> 02:30:24,000
Oke.

2065
02:30:24,000 --> 02:30:26,000
Jadi,

2066
02:30:26,000 --> 02:30:28,000
konten ini

2067
02:30:28,000 --> 02:30:30,000
dimulai dari database.

2068
02:30:30,000 --> 02:30:32,000
Untuk menerima

2069
02:30:32,000 --> 02:30:34,000
imaj,

2070
02:30:34,000 --> 02:30:36,000
kita menerima

2071
02:30:36,000 --> 02:30:38,000
form

2072
02:30:38,000 --> 02:30:40,000
baru

2073
02:30:40,000 --> 02:30:42,000
yang

2074
02:30:42,000 --> 02:30:44,000
menolong

2075
02:30:44,000 --> 02:30:46,000
meneliti file

2076
02:30:50,000 --> 02:30:52,000
dan

2077
02:30:52,000 --> 02:30:54,000
klik butang

2078
02:30:54,000 --> 02:30:56,000
menerima.

2079
02:30:56,000 --> 02:30:58,000
Imaj itu sudah diubah.

2080
02:30:58,000 --> 02:31:00,000
Saya tidak

2081
02:31:00,000 --> 02:31:02,000
menyiapkan

2082
02:31:02,000 --> 02:31:04,000
cat yang

2083
02:31:04,000 --> 02:31:06,000
meneliti,

2084
02:31:06,000 --> 02:31:08,000
tapi, Anda bisa melakukannya.

2085
02:31:10,000 --> 02:31:12,000
Bagaimana

2086
02:31:12,000 --> 02:31:14,000
untuk menerima

2087
02:31:14,000 --> 02:31:16,000
imaj?

2088
02:31:18,000 --> 02:31:20,000
Form mudah.

2089
02:31:20,000 --> 02:31:22,000
Langkah selanjutnya

2090
02:31:22,000 --> 02:31:24,000
sedikit lebih kompleks.

2091
02:31:24,000 --> 02:31:26,000
Lihat,

2092
02:31:26,000 --> 02:31:28,000
kita memiliki

2093
02:31:28,000 --> 02:31:30,000
form,

2094
02:31:30,000 --> 02:31:32,000
kita

2095
02:31:32,000 --> 02:31:34,000
mendapatkan

2096
02:31:34,000 --> 02:31:36,000
imaj dari form,

2097
02:31:36,000 --> 02:31:38,000
dan jika imaj

2098
02:31:38,000 --> 02:31:40,000
ada,

2099
02:31:40,000 --> 02:31:42,000
kita menerima,

2100
02:31:42,000 --> 02:31:44,000
menerima dari database.

2101
02:31:44,000 --> 02:31:46,000
Imaj tidak

2102
02:31:46,000 --> 02:31:48,000
ada jika saya tidak meneliti file.

2103
02:31:48,000 --> 02:31:50,000
Lihat,

2104
02:31:50,000 --> 02:31:52,000
jadi,

2105
02:31:52,000 --> 02:31:54,000
sekarang,

2106
02:31:54,000 --> 02:31:56,000
kita

2107
02:31:56,000 --> 02:31:58,000
menukarkan titel,

2108
02:31:58,000 --> 02:32:00,000
tapi bukan konten imaj.

2109
02:32:00,000 --> 02:32:02,000
Jadi, titel

2110
02:32:02,000 --> 02:32:04,000
diubah,

2111
02:32:04,000 --> 02:32:06,000
imaj sama.

2112
02:32:06,000 --> 02:32:08,000
Dan,

2113
02:32:08,000 --> 02:32:10,000
yang juga

2114
02:32:10,000 --> 02:32:12,000
saya ingin

2115
02:32:12,000 --> 02:32:14,000
tunjukkan,

2116
02:32:14,000 --> 02:32:16,000
benar-benar,

2117
02:32:16,000 --> 02:32:18,000
imaj

2118
02:32:18,000 --> 02:32:20,000
yang diubah,

2119
02:32:20,000 --> 02:32:22,000
diubah

2120
02:32:22,000 --> 02:32:24,000
ke server,

2121
02:32:24,000 --> 02:32:26,000
itu cukup besar.

2122
02:32:26,000 --> 02:32:28,000
Imaj

2123
02:32:28,000 --> 02:32:30,000
dari dokumen saya,

2124
02:32:30,000 --> 02:32:32,000
yang saya

2125
02:32:32,000 --> 02:32:34,000
hanya memakainya

2126
02:32:34,000 --> 02:32:36,000
dari

2127
02:32:36,000 --> 02:32:38,000
telefon saya.

2128
02:32:38,000 --> 02:32:40,000
Dan,

2129
02:32:44,000 --> 02:32:46,000
saya tidak tahu

2130
02:32:46,000 --> 02:32:48,000
berapa banyak megapiksel,

2131
02:32:48,000 --> 02:32:50,000
tapi, ukuran itu besar.

2132
02:32:50,000 --> 02:32:52,000
Saya ingin mencetakkan

2133
02:32:52,000 --> 02:32:54,000
gambar

2134
02:32:54,000 --> 02:32:56,000
sebelum menyimpan di database.

2135
02:32:58,000 --> 02:33:00,000
Itulah kenapa

2136
02:33:00,000 --> 02:33:02,000
saya memiliki

2137
02:33:02,000 --> 02:33:04,000
satu lagi corotin

2138
02:33:04,000 --> 02:33:06,000
yang menggunakan

2139
02:33:06,000 --> 02:33:08,000
imaj

2140
02:33:08,000 --> 02:33:10,000
yang menggunakan PIL

2141
02:33:10,000 --> 02:33:12,000
untuk mencetakkan data imaj.

2142
02:33:12,000 --> 02:33:14,000
Lihat,

2143
02:33:14,000 --> 02:33:16,000
kita mendapatkan

2144
02:33:16,000 --> 02:33:18,000
konstruksi PIL,

2145
02:33:18,000 --> 02:33:20,000
PIL,

2146
02:33:20,000 --> 02:33:22,000
Imaj Library,

2147
02:33:22,000 --> 02:33:24,000
PIL,

2148
02:33:24,000 --> 02:33:26,000
Imaj Library.

2149
02:33:26,000 --> 02:33:28,000
Kita memiliki objek imaj,

2150
02:33:28,000 --> 02:33:30,000
kita memiliki

2151
02:33:30,000 --> 02:33:32,000
kecil-kecil

2152
02:33:32,000 --> 02:33:34,000
menggunakan

2153
02:33:34,000 --> 02:33:36,000
alias

2154
02:33:36,000 --> 02:33:38,000
yang sangat kuat

2155
02:33:38,000 --> 02:33:40,000
aliasin

2156
02:33:40,000 --> 02:33:42,000
metode,

2157
02:33:42,000 --> 02:33:44,000
mendapatkan imaj baru,

2158
02:33:44,000 --> 02:33:46,000
dan menyimpan di database

2159
02:33:46,000 --> 02:33:48,000
konten kecil-kecil

2160
02:33:48,000 --> 02:33:50,000
imaj.

2161
02:33:50,000 --> 02:33:52,000
Dan saya menggunakan run in executor

2162
02:33:52,000 --> 02:33:54,000
disini.

2163
02:33:54,000 --> 02:33:56,000
Run in executor

2164
02:33:56,000 --> 02:33:58,000
itu

2165
02:33:58,000 --> 02:34:00,000
untuk alasan yang berikutnya.

2166
02:34:00,000 --> 02:34:02,000
Imaj resizing,

2167
02:34:02,000 --> 02:34:04,000
terutama resizing dari imaj besar,

2168
02:34:04,000 --> 02:34:06,000
mengambil waktu.

2169
02:34:06,000 --> 02:34:08,000
Ini adalah

2170
02:34:08,000 --> 02:34:10,000
operasi CPU yang berat,

2171
02:34:10,000 --> 02:34:12,000
yang dipanggil

2172
02:34:12,000 --> 02:34:14,000
operasi CPU bound.

2173
02:34:16,000 --> 02:34:18,000
Tapi,

2174
02:34:18,000 --> 02:34:20,000
dalam async IOU world,

2175
02:34:20,000 --> 02:34:22,000
Anda harus mengelakkan

2176
02:34:22,000 --> 02:34:24,000
operasi seperti itu

2177
02:34:24,000 --> 02:34:26,000
dalam fungsi async Anda.

2178
02:34:26,000 --> 02:34:28,000
Karena resizing

2179
02:34:28,000 --> 02:34:30,000
bisa mengambil

2180
02:34:30,000 --> 02:34:32,000
waktu,

2181
02:34:32,000 --> 02:34:34,000
dan pada waktu resizing,

2182
02:34:34,000 --> 02:34:36,000
server Anda

2183
02:34:36,000 --> 02:34:38,000
tidak bertanggung jawab.

2184
02:34:38,000 --> 02:34:40,000
Ia tidak

2185
02:34:40,000 --> 02:34:42,000
menjaga

2186
02:34:42,000 --> 02:34:44,000
pengguna lain.

2187
02:34:44,000 --> 02:34:46,000
Ia mengambil

2188
02:34:46,000 --> 02:34:48,000
waktu,

2189
02:34:48,000 --> 02:34:50,000
dan

2190
02:34:50,000 --> 02:34:52,000
memanfaatkan

2191
02:34:52,000 --> 02:34:54,000
pengguna-guna

2192
02:34:54,000 --> 02:34:56,000
yang berat.

2193
02:34:56,000 --> 02:34:58,000
Jadi,

2194
02:34:58,000 --> 02:35:00,000
async IOU

2195
02:35:00,000 --> 02:35:02,000
bisa

2196
02:35:02,000 --> 02:35:04,000
menggunakan

2197
02:35:04,000 --> 02:35:06,000
CPU bound

2198
02:35:06,000 --> 02:35:08,000
atau

2199
02:35:08,000 --> 02:35:10,000
operasi sincronis

2200
02:35:10,000 --> 02:35:12,000
untuk

2201
02:35:12,000 --> 02:35:14,000
mengambil

2202
02:35:14,000 --> 02:35:16,000
pengguna-guna

2203
02:35:16,000 --> 02:35:18,000
yang berat.

2204
02:35:18,000 --> 02:35:20,000
Dan

2205
02:35:20,000 --> 02:35:22,000
pengguna-guna

2206
02:35:22,000 --> 02:35:24,000
memiliki beberapa pengguna-guna

2207
02:35:24,000 --> 02:35:26,000
yang berat

2208
02:35:26,000 --> 02:35:28,000
pada async IOU

2209
02:35:28,000 --> 02:35:30,000
untuk mengambil

2210
02:35:30,000 --> 02:35:32,000
waktu resizing.

2211
02:35:32,000 --> 02:35:34,000
Atau 8?

2212
02:35:34,000 --> 02:35:36,000
8.

2213
02:35:36,000 --> 02:35:38,000
Jadi,

2214
02:35:38,000 --> 02:35:40,000
laptop

2215
02:35:40,000 --> 02:35:42,000
laptop memiliki 8

2216
02:35:42,000 --> 02:35:44,000
pengguna-guna yang berat.

2217
02:35:44,000 --> 02:35:46,000
Kami menggunakan kerja baru

2218
02:35:46,000 --> 02:35:48,000
untuk pengguna-guna yang berat.

2219
02:35:50,000 --> 02:35:52,000
Dalam

2220
02:35:52,000 --> 02:35:54,000
pengguna-guna yang berat,

2221
02:35:54,000 --> 02:35:56,000
image

2222
02:35:56,000 --> 02:35:58,000
resizing.

2223
02:35:58,000 --> 02:36:00,000
Kami menunggu

2224
02:36:00,000 --> 02:36:02,000
di sini.

2225
02:36:02,000 --> 02:36:04,000
Menunggu

2226
02:36:04,000 --> 02:36:06,000
berarti server kita

2227
02:36:06,000 --> 02:36:08,000
sudah

2228
02:36:08,000 --> 02:36:10,000
mengganti

2229
02:36:10,000 --> 02:36:12,000
ke kerutin lain

2230
02:36:12,000 --> 02:36:14,000
dan menghadapi permintaan lain.

2231
02:36:14,000 --> 02:36:16,000
Ini

2232
02:36:16,000 --> 02:36:18,000
tidak sejatuh.

2233
02:36:18,000 --> 02:36:20,000
Tapi, ketika resizing

2234
02:36:20,000 --> 02:36:22,000
sudah selesai,

2235
02:36:22,000 --> 02:36:24,000
image baru

2236
02:36:24,000 --> 02:36:26,000
yang berhasil resizing

2237
02:36:26,000 --> 02:36:28,000
telah dikeluarkan

2238
02:36:28,000 --> 02:36:30,000
dari thread pool

2239
02:36:30,000 --> 02:36:32,000
dan kita bisa

2240
02:36:32,000 --> 02:36:34,000
bekerja lagi.

2241
02:36:38,000 --> 02:36:40,000
Sebenarnya, mungkin

2242
02:36:40,000 --> 02:36:42,000
saya tidak bisa

2243
02:36:42,000 --> 02:36:44,000
mengekalkan

2244
02:36:44,000 --> 02:36:46,000
pengguna-guna

2245
02:36:46,000 --> 02:36:48,000
seperti image

2246
02:36:48,000 --> 02:36:50,000
open, image

2247
02:36:50,000 --> 02:36:52,000
save,

2248
02:36:52,000 --> 02:36:54,000
tapi bergantung.

2249
02:36:54,000 --> 02:36:56,000
Bergantung dengan berapa banyak

2250
02:36:56,000 --> 02:36:58,000
waktu yang diperlukan

2251
02:36:58,000 --> 02:37:00,000
pada

2252
02:37:00,000 --> 02:37:02,000
pengguna-guna ini.

2253
02:37:02,000 --> 02:37:04,000
Saya akan bilang

2254
02:37:04,000 --> 02:37:06,000
bahwa

2255
02:37:06,000 --> 02:37:08,000
membuka

2256
02:37:08,000 --> 02:37:10,000
image

2257
02:37:10,000 --> 02:37:12,000
yang tidak dikenali

2258
02:37:12,000 --> 02:37:14,000
dengan ukuran

2259
02:37:14,000 --> 02:37:16,000
yang dikeluarkan oleh klien

2260
02:37:16,000 --> 02:37:18,000
mungkin lebih baik

2261
02:37:18,000 --> 02:37:20,000
dikeluarkan

2262
02:37:20,000 --> 02:37:22,000
ke thread pool.

2263
02:37:22,000 --> 02:37:24,000
Mencetakkan

2264
02:37:24,000 --> 02:37:26,000
image kecil 64

2265
02:37:26,000 --> 02:37:28,000
yang berbasis 64

2266
02:37:28,000 --> 02:37:30,000
cukup cepat.

2267
02:37:30,000 --> 02:37:32,000
Setiap

2268
02:37:32,000 --> 02:37:34,000
waktu, harus memutuskan

2269
02:37:34,000 --> 02:37:36,000
apakah Anda ingin

2270
02:37:36,000 --> 02:37:38,000
menulis lebih banyak kode untuk

2271
02:37:38,000 --> 02:37:40,000
mengekalkan pada thread pool

2272
02:37:40,000 --> 02:37:42,000
atau

2273
02:37:42,000 --> 02:37:44,000
Anda percaya

2274
02:37:44,000 --> 02:37:46,000
bahwa operasi ini cukup cepat

2275
02:37:46,000 --> 02:37:48,000
tidak menghalang

2276
02:37:48,000 --> 02:37:50,000
loop,

2277
02:37:50,000 --> 02:37:52,000
hampir segera,

2278
02:37:52,000 --> 02:37:54,000
jadi, lakukan saja di tempat.

2279
02:37:56,000 --> 02:37:58,000
Terima kasih.

2280
02:38:00,000 --> 02:38:02,000
Jadi,

2281
02:38:02,000 --> 02:38:04,000
sekarang

2282
02:38:04,000 --> 02:38:06,000
kita

2283
02:38:06,000 --> 02:38:08,000
memiliki

2284
02:38:08,000 --> 02:38:10,000
image, ya.

2285
02:38:22,000 --> 02:38:24,000
Pertanyaan yang bagus.

2286
02:38:24,000 --> 02:38:26,000
Anda

2287
02:38:26,000 --> 02:38:28,000
lihat

2288
02:38:28,000 --> 02:38:30,000
bagaimana

2289
02:38:30,000 --> 02:38:32,000
saya menggunakan kode ini.

2290
02:38:32,000 --> 02:38:34,000
Kita memiliki Python 7.

2291
02:38:34,000 --> 02:38:36,000
Kita bisa menggunakan

2292
02:38:36,000 --> 02:38:38,000
pilihan ini.

2293
02:38:38,000 --> 02:38:40,000
Ia memenuhi

2294
02:38:40,000 --> 02:38:42,000
mod debag

2295
02:38:42,000 --> 02:38:44,000
untuk Python, bukan hanya untuk

2296
02:38:44,000 --> 02:38:46,000
async.io, tapi juga

2297
02:38:46,000 --> 02:38:48,000
beberapa debag yang

2298
02:38:48,000 --> 02:38:50,000
berguna.

2299
02:38:50,000 --> 02:38:52,000
Dan jika

2300
02:38:52,000 --> 02:38:54,000
operasi ini

2301
02:38:54,000 --> 02:38:56,000
mengambil

2302
02:38:56,000 --> 02:38:58,000
kebenaran,

2303
02:38:58,000 --> 02:39:00,000
saya tidak tahu

2304
02:39:00,000 --> 02:39:02,000
apakah

2305
02:39:02,000 --> 02:39:04,000
saya bisa

2306
02:39:04,000 --> 02:39:06,000
memproduksi sekarang

2307
02:39:06,000 --> 02:39:08,000
atau tidak, tapi biarkan saya mencoba.

2308
02:39:18,000 --> 02:39:20,000
Wow, ini

2309
02:39:20,000 --> 02:39:22,000
file yang sudah dikunci.

2310
02:39:22,000 --> 02:39:24,000
Sangat buruk.

2311
02:39:24,000 --> 02:39:26,000
Masih

2312
02:39:26,000 --> 02:39:28,000
semuanya

2313
02:39:28,000 --> 02:39:30,000
sangat cepat.

2314
02:39:30,000 --> 02:39:32,000
Tapi jika

2315
02:39:32,000 --> 02:39:34,000
kode

2316
02:39:34,000 --> 02:39:36,000
antara dua awet

2317
02:39:36,000 --> 02:39:38,000
kode

2318
02:39:38,000 --> 02:39:40,000
async

2319
02:39:40,000 --> 02:39:42,000
menghalang

2320
02:39:42,000 --> 02:39:44,000
event loop

2321
02:39:44,000 --> 02:39:46,000
lebih lama dari 100

2322
02:39:46,000 --> 02:39:48,000
millisecond,

2323
02:39:48,000 --> 02:39:50,000
kamu akan melihat

2324
02:39:50,000 --> 02:39:52,000
keputusan debag untuknya.

2325
02:39:52,000 --> 02:39:54,000
Ini

2326
02:39:54,000 --> 02:39:56,000
sebuah tanda baik

2327
02:39:56,000 --> 02:39:58,000
yang harus

2328
02:39:58,000 --> 02:40:00,000
Anda letakkan. Biasanya Anda harus

2329
02:40:00,000 --> 02:40:02,000
letak kode berlenggak

2330
02:40:02,000 --> 02:40:04,000
dalam executor.

2331
02:40:04,000 --> 02:40:06,000
Apakah kode

2332
02:40:06,000 --> 02:40:08,000
yang berlenggak

2333
02:40:08,000 --> 02:40:10,000
dalam executor?

2334
02:40:10,000 --> 02:40:12,000
Ini kode berlenggak.

2335
02:40:12,000 --> 02:40:14,000
Ya, jika

2336
02:40:14,000 --> 02:40:16,000
saya letak sleep

2337
02:40:16,000 --> 02:40:18,000
kemudian saya akan melihatnya

2338
02:40:18,000 --> 02:40:20,000
di sini. Anda bisa mencoba.

2339
02:40:22,000 --> 02:40:24,000
Jika saya akan

2340
02:40:24,000 --> 02:40:26,000
menggunakan

2341
02:40:26,000 --> 02:40:28,000
library request

2342
02:40:28,000 --> 02:40:30,000
biasa

2343
02:40:30,000 --> 02:40:32,000
untuk mendapatkan laman dari Python

2344
02:40:32,000 --> 02:40:34,000
atau saya akan melihat

2345
02:40:36,000 --> 02:40:38,000
kewarnian.

2346
02:40:40,000 --> 02:40:42,000
Saya tidak tahu.

2347
02:40:42,000 --> 02:40:44,000
Sangat besar file dari

2348
02:40:44,000 --> 02:40:46,000
local file system juga

2349
02:40:46,000 --> 02:40:48,000
berlenggak.

2350
02:40:48,000 --> 02:40:50,000
Setiap kode

2351
02:40:50,000 --> 02:40:52,000
yang berlenggak

2352
02:40:52,000 --> 02:40:54,000
adalah

2353
02:40:54,000 --> 02:40:56,000
berlenggak.

2354
02:40:56,000 --> 02:40:58,000
Saya pikir

2355
02:40:58,000 --> 02:41:00,000
ini bagus. Saya pikir

2356
02:41:00,000 --> 02:41:02,000
kode ini harus dihidangkan.

2357
02:41:02,000 --> 02:41:04,000
Python

2358
02:41:04,000 --> 02:41:06,000
saya pikir

2359
02:41:06,000 --> 02:41:08,000
ayo debag

2360
02:41:08,000 --> 02:41:10,000
environment variable

2361
02:41:10,000 --> 02:41:12,000
berlenggak

2362
02:41:12,000 --> 02:41:14,000
sama.

2363
02:41:14,000 --> 02:41:16,000
Tapi dash x dev

2364
02:41:16,000 --> 02:41:18,000
mudah untuk menyatakan

2365
02:41:18,000 --> 02:41:20,000
dan saya suka ini.

2366
02:41:24,000 --> 02:41:26,000
Juga

2367
02:41:26,000 --> 02:41:28,000
maaf, saya

2368
02:41:28,000 --> 02:41:30,000
lupa kode

2369
02:41:30,000 --> 02:41:32,000
yang berlenggak.

2370
02:41:32,000 --> 02:41:34,000
Kode selanjutnya adalah

2371
02:41:34,000 --> 02:41:36,000
middleware.

2372
02:41:38,000 --> 02:41:40,000
Middleware adalah idea yang

2373
02:41:40,000 --> 02:41:42,000
saya pikirkan.

2374
02:41:42,000 --> 02:41:44,000
Ini fungsi

2375
02:41:44,000 --> 02:41:46,000
yang mengambil

2376
02:41:46,000 --> 02:41:48,000
request dan next handler

2377
02:41:48,000 --> 02:41:50,000
dalam chain handle.

2378
02:41:52,000 --> 02:41:54,000
Jadi ketika kamu pikir

2379
02:41:54,000 --> 02:41:56,000
middleware, kamu bisa

2380
02:41:56,000 --> 02:41:58,000
bayangkan onion

2381
02:41:58,000 --> 02:42:00,000
dengan middleware,

2382
02:42:00,000 --> 02:42:02,000
middleware di dalam

2383
02:42:02,000 --> 02:42:04,000
dan web handler

2384
02:42:04,000 --> 02:42:06,000
dalam core.

2385
02:42:06,000 --> 02:42:08,000
Jadi

2386
02:42:08,000 --> 02:42:10,000
ketika

2387
02:42:10,000 --> 02:42:12,000
request

2388
02:42:12,000 --> 02:42:14,000
diproces

2389
02:42:14,000 --> 02:42:16,000
top level

2390
02:42:16,000 --> 02:42:18,000
middleware dipanggil

2391
02:42:18,000 --> 02:42:20,000
inner middleware

2392
02:42:20,000 --> 02:42:22,000
atau web handler

2393
02:42:22,000 --> 02:42:24,000
dipasang sebagai

2394
02:42:24,000 --> 02:42:26,000
handler. Middleware

2395
02:42:26,000 --> 02:42:28,000
bisa melakukan sesuatu sebelum

2396
02:42:28,000 --> 02:42:30,000
pengelan

2397
02:42:30,000 --> 02:42:32,000
ke inner handler

2398
02:42:32,000 --> 02:42:34,000
atau

2399
02:42:34,000 --> 02:42:36,000
bisa melakukan

2400
02:42:36,000 --> 02:42:38,000
sesuatu

2401
02:42:38,000 --> 02:42:40,000
dan bisa melakukan sesuatu

2402
02:42:40,000 --> 02:42:42,000
setelah pengelan.

2403
02:42:44,000 --> 02:42:46,000
Menurut saya

2404
02:42:46,000 --> 02:42:48,000
sangat teoretik,

2405
02:42:48,000 --> 02:42:50,000
tetapi

2406
02:42:50,000 --> 02:42:52,000
ini adalah contoh yang berguna.

2407
02:42:54,000 --> 02:42:56,000
Jika kita

2408
02:42:56,000 --> 02:42:58,000
dapat

2409
02:42:58,000 --> 02:43:00,000
kelebihan yang tidak dikenal

2410
02:43:00,000 --> 02:43:02,000
dari web handler kita,

2411
02:43:02,000 --> 02:43:04,000
kita render

2412
02:43:04,000 --> 02:43:06,000
sebuah

2413
02:43:06,000 --> 02:43:08,000
page yang istimewa.

2414
02:43:08,000 --> 02:43:10,000
Sangat mudah.

2415
02:43:10,000 --> 02:43:12,000
Kita harus mengurangi

2416
02:43:12,000 --> 02:43:14,000
web HTTP exception karena

2417
02:43:14,000 --> 02:43:16,000
ini bisa menjadi redireksi.

2418
02:43:20,000 --> 02:43:22,000
Kita lepaskan

2419
02:43:22,000 --> 02:43:24,000
istimewa

2420
02:43:24,000 --> 02:43:26,000
untuk kancelasi tugas.

2421
02:43:28,000 --> 02:43:30,000
Jangan berbicara terlalu banyak.

2422
02:43:30,000 --> 02:43:32,000
Tetapi semua exception yang tidak dikenal

2423
02:43:32,000 --> 02:43:34,000
dikancelasi

2424
02:43:34,000 --> 02:43:36,000
oleh page ginger euro.

2425
02:43:36,000 --> 02:43:38,000
Bagaimana ini berfungsi?

2426
02:43:42,000 --> 02:43:44,000
Kita mengelakkan kode

2427
02:43:44,000 --> 02:43:46,000
dari middleware

2428
02:43:50,000 --> 02:43:52,000
dan mencoba

2429
02:43:52,000 --> 02:43:54,000
memperlihatkan

2430
02:43:54,000 --> 02:43:56,000
post yang tidak ada.

2431
02:43:56,000 --> 02:43:58,000
Di sini

2432
02:43:58,000 --> 02:44:00,000
maaf

2433
02:44:00,000 --> 02:44:02,000
Anda tidak bisa membaca,

2434
02:44:02,000 --> 02:44:03,000
tetapi ini hanya

2435
02:44:03,000 --> 02:44:05,000
sebuah nombor yang besar.

2436
02:44:11,000 --> 02:44:13,000
Post tidak ada.

2437
02:44:13,000 --> 02:44:14,000
Saya memiliki

2438
02:44:14,000 --> 02:44:16,000
exception dari

2439
02:44:16,000 --> 02:44:18,000
dalam mesinari

2440
02:44:18,000 --> 02:44:20,000
dan teks ini

2441
02:44:20,000 --> 02:44:22,000
dikancelasi

2442
02:44:22,000 --> 02:44:24,000
oleh page euro istimewa.

2443
02:44:26,000 --> 02:44:28,000
Tidak terlalu susah.

2444
02:44:36,000 --> 02:44:38,000
Kita memiliki middleware,

2445
02:44:38,000 --> 02:44:40,000
kita memiliki

2446
02:44:40,000 --> 02:44:42,000
template ginger

2447
02:44:42,000 --> 02:44:44,000
untuk mengurangi teks ini.

2448
02:44:48,000 --> 02:44:50,000
Kita perlu

2449
02:44:50,000 --> 02:44:52,000
menginitialisasi

2450
02:44:52,000 --> 02:44:54,000
untuk menceritakan

2451
02:44:54,000 --> 02:44:56,000
HTTP

2452
02:44:56,000 --> 02:44:58,000
di mana middleware

2453
02:44:58,000 --> 02:45:00,000
yang saya gunakan.

2454
02:45:00,000 --> 02:45:02,000
Saya lupa untuk menetapkannya

2455
02:45:06,000 --> 02:45:08,000
di website, tetapi

2456
02:45:08,000 --> 02:45:10,000
idea ini

2457
02:45:10,000 --> 02:45:12,000
disini.

2458
02:45:12,000 --> 02:45:14,000
Kita membuat aplikasi

2459
02:45:14,000 --> 02:45:16,000
dengan

2460
02:45:16,000 --> 02:45:18,000
list

2461
02:45:18,000 --> 02:45:20,000
middleware yang dikancelasi.

2462
02:45:20,000 --> 02:45:22,000
Ini satu cara

2463
02:45:22,000 --> 02:45:24,000
untuk melakukannya.

2464
02:45:24,000 --> 02:45:26,000
Dan juga

2465
02:45:26,000 --> 02:45:28,000
client max size.

2466
02:45:28,000 --> 02:45:30,000
Ini karena saya memuat

2467
02:45:30,000 --> 02:45:32,000
besar, benar-benar besar

2468
02:45:32,000 --> 02:45:34,000
gambar

2469
02:45:34,000 --> 02:45:36,000
dan default

2470
02:45:38,000 --> 02:45:40,000
HTTP

2471
02:45:40,000 --> 02:45:42,000
limit

2472
02:45:42,000 --> 02:45:44,000
tidak memungkinkan

2473
02:45:44,000 --> 02:45:46,000
gambar besar

2474
02:45:46,000 --> 02:45:48,000
dan saya ingin memperbaikinya.

2475
02:45:50,000 --> 02:45:52,000
HTTP

2476
02:45:52,000 --> 02:45:54,000
mencoba

2477
02:45:54,000 --> 02:45:56,000
mengawal memori

2478
02:45:56,000 --> 02:45:58,000
untuk tidak

2479
02:45:58,000 --> 02:46:00,000
memiliki

2480
02:46:00,000 --> 02:46:02,000
gambar memori besar.

2481
02:46:06,000 --> 02:46:08,000
Apa yang middleware

2482
02:46:08,000 --> 02:46:10,000
juga bisa melakukan?

2483
02:46:10,000 --> 02:46:12,000
Ia bisa

2484
02:46:14,000 --> 02:46:16,000
memodifikasi permintaan,

2485
02:46:16,000 --> 02:46:18,000
sebenarnya mengklonkannya dengan

2486
02:46:18,000 --> 02:46:20,000
nilai.

2487
02:46:20,000 --> 02:46:22,000
Pemintaan nilai

2488
02:46:22,000 --> 02:46:24,000
tidak bisa

2489
02:46:24,000 --> 02:46:26,000
dimutasi.

2490
02:46:26,000 --> 02:46:28,000
Anda tidak bisa memodifikasi

2491
02:46:28,000 --> 02:46:30,000
mereka di tempat

2492
02:46:30,000 --> 02:46:32,000
tetapi Anda bisa

2493
02:46:32,000 --> 02:46:34,000
klon

2494
02:46:36,000 --> 02:46:38,000
permintaan

2495
02:46:38,000 --> 02:46:40,000
dengan

2496
02:46:40,000 --> 02:46:42,000
pasang

2497
02:46:42,000 --> 02:46:44,000
dan memasang

2498
02:46:44,000 --> 02:46:46,000
remote dan schema.

2499
02:46:46,000 --> 02:46:48,000
Anda bisa

2500
02:46:48,000 --> 02:46:50,000
memusik server

2501
02:46:50,000 --> 02:46:52,000
di belakang Nginx

2502
02:46:52,000 --> 02:46:54,000
untuk contoh.

2503
02:46:54,000 --> 02:46:56,000
Dan untuk mendapatkan

2504
02:46:56,000 --> 02:46:58,000
IP pengguna

2505
02:46:58,000 --> 02:47:00,000
Anda tidak

2506
02:47:00,000 --> 02:47:02,000
bisa menggunakan

2507
02:47:02,000 --> 02:47:04,000
IP IP

2508
02:47:04,000 --> 02:47:06,000
tetapi harus

2509
02:47:06,000 --> 02:47:08,000
mendapatkan

2510
02:47:08,000 --> 02:47:10,000
X forward

2511
02:47:10,000 --> 02:47:12,000
untuk HTTP

2512
02:47:12,000 --> 02:47:14,000
ini. Ini saja

2513
02:47:14,000 --> 02:47:16,000
tapi

2514
02:47:16,000 --> 02:47:18,000
apapun, Anda dapat idea

2515
02:47:18,000 --> 02:47:20,000
Anda mengklon

2516
02:47:20,000 --> 02:47:22,000
permintaan dengan nilai baru

2517
02:47:22,000 --> 02:47:24,000
dan memasang ke

2518
02:47:24,000 --> 02:47:26,000
pengendalannya.

2519
02:47:26,000 --> 02:47:28,000
Anda bisa

2520
02:47:28,000 --> 02:47:30,000
menggulung pengendalannya

2521
02:47:32,000 --> 02:47:34,000
dan mengelakkan

2522
02:47:34,000 --> 02:47:36,000
database

2523
02:47:36,000 --> 02:47:38,000
transaksi

2524
02:47:38,000 --> 02:47:40,000
komitif jika

2525
02:47:40,000 --> 02:47:42,000
semuanya berjalan baik.

2526
02:47:42,000 --> 02:47:44,000
Jika

2527
02:47:44,000 --> 02:47:46,000
sesuatu yang buruk terjadi, jika kelebihan

2528
02:47:46,000 --> 02:47:48,000
adalah kode, Anda

2529
02:47:48,000 --> 02:47:50,000
bisa mengulang

2530
02:47:50,000 --> 02:47:52,000
database transaksi.

2531
02:47:52,000 --> 02:47:54,000
Mungkin

2532
02:47:54,000 --> 02:47:56,000
berguna.

2533
02:47:56,000 --> 02:47:58,000
Anda bisa

2534
02:47:58,000 --> 02:48:00,000
mengikuti jika

2535
02:48:00,000 --> 02:48:02,000
pengguna dikodokkan

2536
02:48:04,000 --> 02:48:06,000
dan

2537
02:48:06,000 --> 02:48:08,000
ini adalah

2538
02:48:08,000 --> 02:48:10,000
fungsi yang tidak terdapat

2539
02:48:10,000 --> 02:48:12,000
ayo kita mengingatkan

2540
02:48:12,000 --> 02:48:14,000
jika pengguna

2541
02:48:14,000 --> 02:48:16,000
dan

2542
02:48:16,000 --> 02:48:18,000
bagaimana

2543
02:48:18,000 --> 02:48:20,000
pengguna

2544
02:48:20,000 --> 02:48:22,000
akan kembali dari

2545
02:48:22,000 --> 02:48:24,000
penggunaan informasi

2546
02:48:24,000 --> 02:48:26,000
dan jika pengguna

2547
02:48:26,000 --> 02:48:28,000
tidak ada

2548
02:48:28,000 --> 02:48:30,000
penggunaan

2549
02:48:30,000 --> 02:48:32,000
penggunaan sebagai aplikasi

2550
02:48:32,000 --> 02:48:34,000
adalah objek yang

2551
02:48:34,000 --> 02:48:36,000
seperti dikodokkan

2552
02:48:36,000 --> 02:48:38,000
tetapi jika

2553
02:48:38,000 --> 02:48:40,000
penggunaan tidak ada

2554
02:48:42,000 --> 02:48:44,000
dan pengguna

2555
02:48:44,000 --> 02:48:46,000
sebagai pengguna

2556
02:48:46,000 --> 02:48:48,000
memerlukan

2557
02:48:48,000 --> 02:48:50,000
logit di pengguna, tidak berfungsi

2558
02:48:50,000 --> 02:48:52,000
dengan anonimus

2559
02:48:52,000 --> 02:48:54,000
mari kita kembali ke

2560
02:48:54,000 --> 02:48:56,000
login page, jika tidak

2561
02:48:56,000 --> 02:48:58,000
bekerja seperti biasa

2562
02:49:02,000 --> 02:49:04,000
ini adalah contoh

2563
02:49:04,000 --> 02:49:06,000
contoh untuk

2564
02:49:06,000 --> 02:49:08,000
memperlihatkan

2565
02:49:08,000 --> 02:49:10,000
percobaan

2566
02:49:10,000 --> 02:49:12,000
selanjutnya

2567
02:49:12,000 --> 02:49:14,000
adalah

2568
02:49:14,000 --> 02:49:16,000
session

2569
02:49:16,000 --> 02:49:18,000
session

2570
02:49:18,000 --> 02:49:20,000
dalam konteks ini

2571
02:49:20,000 --> 02:49:22,000
adalah storage

2572
02:49:22,000 --> 02:49:24,000
untuk menyimpan

2573
02:49:24,000 --> 02:49:26,000
data terkait pengguna

2574
02:49:26,000 --> 02:49:28,000
storage

2575
02:49:28,000 --> 02:49:30,000
tidak besar

2576
02:49:30,000 --> 02:49:32,000
biasanya

2577
02:49:32,000 --> 02:49:34,000
tapi Anda bisa menggunakan

2578
02:49:34,000 --> 02:49:36,000
username

2579
02:49:36,000 --> 02:49:38,000
beberapa

2580
02:49:38,000 --> 02:49:40,000
informasi

2581
02:49:42,000 --> 02:49:44,000
HTTP

2582
02:49:44,000 --> 02:49:46,000
search plugin

2583
02:49:46,000 --> 02:49:48,000
library

2584
02:49:48,000 --> 02:49:50,000
yang perlu

2585
02:49:50,000 --> 02:49:52,000
dikodokkan

2586
02:49:52,000 --> 02:49:54,000
dan Anda melalui

2587
02:49:54,000 --> 02:49:56,000
jenis storage

2588
02:49:56,000 --> 02:49:58,000
untuk session

2589
02:50:00,000 --> 02:50:02,000
kita menggunakan

2590
02:50:02,000 --> 02:50:04,000
untuk menyimpan

2591
02:50:04,000 --> 02:50:06,000
memperlukan storage

2592
02:50:06,000 --> 02:50:08,000
kukus

2593
02:50:08,000 --> 02:50:10,000
seperti ini

2594
02:50:10,000 --> 02:50:12,000
ada

2595
02:50:12,000 --> 02:50:14,000
kukus

2596
02:50:14,000 --> 02:50:16,000
yang kita sokong

2597
02:50:16,000 --> 02:50:18,000
2 dari kotak

2598
02:50:18,000 --> 02:50:20,000
Anda bisa menggunakan

2599
02:50:20,000 --> 02:50:22,000
session storage

2600
02:50:26,000 --> 02:50:28,000
idea ini

2601
02:50:28,000 --> 02:50:30,000
setidaknya

2602
02:50:30,000 --> 02:50:32,000
data ini

2603
02:50:32,000 --> 02:50:34,000
dikode

2604
02:50:34,000 --> 02:50:36,000
browser kukus

2605
02:50:36,000 --> 02:50:38,000
browser kukus

2606
02:50:38,000 --> 02:50:40,000
memiliki

2607
02:50:40,000 --> 02:50:42,000
sekitar 8 kilobit

2608
02:50:42,000 --> 02:50:44,000
biasanya

2609
02:50:44,000 --> 02:50:46,000
untuk single record

2610
02:50:46,000 --> 02:50:48,000
jadi Anda tidak bisa

2611
02:50:48,000 --> 02:50:50,000
menyimpan kukus

2612
02:50:50,000 --> 02:50:52,000
gambar Anda

2613
02:50:56,000 --> 02:50:58,000
atau kadang-kadang

2614
02:50:58,000 --> 02:51:00,000
kukus

2615
02:51:00,000 --> 02:51:02,000
memiliki

2616
02:51:04,000 --> 02:51:06,000
ID

2617
02:51:06,000 --> 02:51:08,000
identity key

2618
02:51:08,000 --> 02:51:10,000
untuk mencari semua

2619
02:51:10,000 --> 02:51:12,000
data yang lain

2620
02:51:12,000 --> 02:51:14,000
data session

2621
02:51:14,000 --> 02:51:16,000
di database

2622
02:51:16,000 --> 02:51:18,000
apa yang Anda gunakan?

2623
02:51:18,000 --> 02:51:20,000
sesuatu yang tersebut

2624
02:51:20,000 --> 02:51:22,000
objek session

2625
02:51:22,000 --> 02:51:24,000
adalah dikodokkan

2626
02:51:24,000 --> 02:51:26,000
dengan beberapa

2627
02:51:26,000 --> 02:51:28,000
kualitas seperti

2628
02:51:28,000 --> 02:51:30,000
session baru

2629
02:51:30,000 --> 02:51:32,000
tidak penting

2630
02:51:32,000 --> 02:51:34,000
dan

2631
02:51:34,000 --> 02:51:36,000
kita memiliki

2632
02:51:38,000 --> 02:51:40,000
beberapa pembantu

2633
02:51:42,000 --> 02:51:44,000
lihat, ini adalah dekorator

2634
02:51:44,000 --> 02:51:46,000
yang menandakan

2635
02:51:46,000 --> 02:51:48,000
fungsi yang

2636
02:51:48,000 --> 02:51:50,000
memerlukan login

2637
02:51:50,000 --> 02:51:52,000
sangat mudah

2638
02:51:52,000 --> 02:51:54,000
kita memiliki middleware

2639
02:51:54,000 --> 02:51:56,000
dari contoh yang sebelumnya

2640
02:51:56,000 --> 02:51:58,000
yang

2641
02:51:58,000 --> 02:52:00,000
pertama

2642
02:52:00,000 --> 02:52:02,000
menandakan

2643
02:52:02,000 --> 02:52:04,000
apakah ini

2644
02:52:04,000 --> 02:52:06,000
proteksi

2645
02:52:06,000 --> 02:52:08,000
atau tidak

2646
02:52:08,000 --> 02:52:10,000
dan jika

2647
02:52:10,000 --> 02:52:12,000
login yang diperlukan

2648
02:52:12,000 --> 02:52:14,000
dan endpoint yang diperlukan

2649
02:52:14,000 --> 02:52:16,000
dan

2650
02:52:16,000 --> 02:52:18,000
pengguna tidak di login

2651
02:52:18,000 --> 02:52:20,000
maka redirect

2652
02:52:20,000 --> 02:52:22,000
jika tidak

2653
02:52:22,000 --> 02:52:24,000
terlalu

2654
02:52:24,000 --> 02:52:26,000
terlalu terlalu

2655
02:52:26,000 --> 02:52:28,000
terlalu jauh

2656
02:52:28,000 --> 02:52:30,000
dan penggunaan ini

2657
02:52:30,000 --> 02:52:32,000
untuk

2658
02:52:32,000 --> 02:52:34,000
endpoint yang diperlukan

2659
02:52:34,000 --> 02:52:36,000
seperti

2660
02:52:36,000 --> 02:52:38,000
kita memutuskan

2661
02:52:38,000 --> 02:52:40,000
yang

2662
02:52:40,000 --> 02:52:42,000
penyelidik

2663
02:52:42,000 --> 02:52:44,000
bisa melihat

2664
02:52:44,000 --> 02:52:46,000
list blog

2665
02:52:46,000 --> 02:52:48,000
bisa melihat

2666
02:52:48,000 --> 02:52:50,000
konten post yang tertentu

2667
02:52:50,000 --> 02:52:52,000
dan harus log in

2668
02:52:52,000 --> 02:52:54,000
jadi

2669
02:52:54,000 --> 02:52:56,000
endpoint editpost

2670
02:52:56,000 --> 02:52:58,000
diperlukan dengan

2671
02:52:58,000 --> 02:53:00,000
login dekorator

2672
02:53:00,000 --> 02:53:02,000
kita menandakan

2673
02:53:04,000 --> 02:53:06,000
middleware

2674
02:53:06,000 --> 02:53:08,000
di registren

2675
02:53:08,000 --> 02:53:10,000
untuk log in middleware

2676
02:53:10,000 --> 02:53:12,000
dan

2677
02:53:14,000 --> 02:53:16,000
hampir itu

2678
02:53:16,000 --> 02:53:18,000
dan

2679
02:53:18,000 --> 02:53:20,000
bagian terakhir

2680
02:53:20,000 --> 02:53:22,000
kita harus

2681
02:53:22,000 --> 02:53:24,000
mengurangi

2682
02:53:24,000 --> 02:53:26,000
login page

2683
02:53:26,000 --> 02:53:28,000
login dan log out

2684
02:53:28,000 --> 02:53:30,000
untuk

2685
02:53:30,000 --> 02:53:32,000
completeness

2686
02:53:32,000 --> 02:53:34,000
login

2687
02:53:36,000 --> 02:53:38,000
seperti

2688
02:53:38,000 --> 02:53:40,000
semplifikasi

2689
02:53:40,000 --> 02:53:42,000
post edit page

2690
02:53:42,000 --> 02:53:44,000
kita render

2691
02:53:44,000 --> 02:53:46,000
dan

2692
02:53:46,000 --> 02:53:48,000
kita

2693
02:53:48,000 --> 02:53:50,000
memiliki

2694
02:53:50,000 --> 02:53:52,000
post route untuk form ini

2695
02:53:52,000 --> 02:53:54,000
dan

2696
02:53:54,000 --> 02:53:56,000
menyimpan username

2697
02:53:56,000 --> 02:53:58,000
ke sesi

2698
02:53:58,000 --> 02:54:00,000
lihat

2699
02:54:00,000 --> 02:54:02,000
sangat

2700
02:54:02,000 --> 02:54:04,000
mudah

2701
02:54:04,000 --> 02:54:06,000
log out lebih mudah

2702
02:54:06,000 --> 02:54:08,000
untuk log out kita

2703
02:54:08,000 --> 02:54:10,000
mencuci sesi username

2704
02:54:10,000 --> 02:54:12,000
bagaimana

2705
02:54:12,000 --> 02:54:14,000
books

2706
02:54:18,000 --> 02:54:20,000
sessions

2707
02:54:20,000 --> 02:54:22,000
session

2708
02:54:22,000 --> 02:54:24,000
jadi

2709
02:54:24,000 --> 02:54:26,000
mari kita ke

2710
02:54:26,000 --> 02:54:28,000
route

2711
02:54:32,000 --> 02:54:34,000
saya akan menulis

2712
02:54:34,000 --> 02:54:36,000
nanti

2713
02:54:36,000 --> 02:54:38,000
menunjukkan

2714
02:54:38,000 --> 02:54:40,000
saya log in

2715
02:54:40,000 --> 02:54:42,000
log out

2716
02:54:42,000 --> 02:54:44,000
saya bisa

2717
02:54:44,000 --> 02:54:46,000
lihat

2718
02:54:46,000 --> 02:54:48,000
post

2719
02:54:48,000 --> 02:54:50,000
tapi saya tidak bisa menunjukkan

2720
02:54:50,000 --> 02:54:52,000
tidak bisa menunjukkan

2721
02:54:52,000 --> 02:54:54,000
untuk pasti

2722
02:54:54,000 --> 02:54:56,000
untuk login

2723
02:54:56,000 --> 02:54:58,000
saya harus

2724
02:54:58,000 --> 02:55:00,000
menunjukkan sesuatu

2725
02:55:00,000 --> 02:55:02,000
menunjukkan password sangat mudah

2726
02:55:02,000 --> 02:55:04,000
tapi

2727
02:55:04,000 --> 02:55:06,000
tidak perlu menunjukkan

2728
02:55:06,000 --> 02:55:08,000
saya akan

2729
02:55:08,000 --> 02:55:10,000
menunjukkan

2730
02:55:10,000 --> 02:55:12,000
password

2731
02:55:12,000 --> 02:55:14,000
sebagai

2732
02:55:14,000 --> 02:55:16,000
latihan yang berbeda

2733
02:55:18,000 --> 02:55:20,000
jadi sekarang kita

2734
02:55:22,000 --> 02:55:24,000
lihat saya log in

2735
02:55:24,000 --> 02:55:26,000
dan

2736
02:55:26,000 --> 02:55:28,000
saya bisa menunjukkan

2737
02:55:28,000 --> 02:55:30,000
post

2738
02:55:30,000 --> 02:55:32,000
menuliskan alamatnya

2739
02:55:32,000 --> 02:55:34,000
ini

2740
02:55:34,000 --> 02:55:36,000
ini

2741
02:55:36,000 --> 02:55:38,000
saya menunjukkan

2742
02:55:38,000 --> 02:55:40,000
post

2743
02:55:40,000 --> 02:55:42,000
saya menunjukkan

2744
02:55:42,000 --> 02:55:44,000
semua

2745
02:55:44,000 --> 02:55:46,000
bagus

2746
02:55:50,000 --> 02:55:52,000
terakhir

2747
02:55:52,000 --> 02:55:54,000
saya

2748
02:55:54,000 --> 02:55:56,000
Jinja

2749
02:55:56,000 --> 02:55:58,000
ada

2750
02:55:58,000 --> 02:56:00,000
konteks prosesor

2751
02:56:00,000 --> 02:56:02,000
konteks prosesor

2752
02:56:02,000 --> 02:56:04,000
adalah cara

2753
02:56:04,000 --> 02:56:06,000
menggunakan

2754
02:56:06,000 --> 02:56:08,000
varian

2755
02:56:08,000 --> 02:56:10,000
untuk menjalankan konteks Jinja

2756
02:56:10,000 --> 02:56:12,000
tapi tidak

2757
02:56:12,000 --> 02:56:14,000
untuk

2758
02:56:14,000 --> 02:56:16,000
untuk

2759
02:56:16,000 --> 02:56:18,000
untuk menjalankan

2760
02:56:18,000 --> 02:56:20,000
dalam contoh kita

2761
02:56:20,000 --> 02:56:22,000
username dalam

2762
02:56:22,000 --> 02:56:24,000
web handler

2763
02:56:24,000 --> 02:56:26,000
maksud saya

2764
02:56:26,000 --> 02:56:28,000
saya bisa

2765
02:56:28,000 --> 02:56:30,000
menukar kod

2766
02:56:30,000 --> 02:56:32,000
saya

2767
02:56:32,000 --> 02:56:34,000
ini adalah indeks

2768
02:56:36,000 --> 02:56:38,000
saya bisa menulis

2769
02:56:38,000 --> 02:56:40,000
username

2770
02:56:40,000 --> 02:56:42,000
adalah

2771
02:56:42,000 --> 02:56:44,000
sesuatu

2772
02:56:44,000 --> 02:56:46,000
tentang

2773
02:56:46,000 --> 02:56:48,000
sesuatu

2774
02:56:48,000 --> 02:56:50,000
username

2775
02:56:50,000 --> 02:56:52,000
dan

2776
02:56:52,000 --> 02:56:54,000
kopi

2777
02:56:54,000 --> 02:56:56,000
ini

2778
02:56:56,000 --> 02:56:58,000
di mana-mana

2779
02:56:58,000 --> 02:57:00,000
di mana-mana

2780
02:57:00,000 --> 02:57:02,000
di sini

2781
02:57:02,000 --> 02:57:04,000
new post

2782
02:57:04,000 --> 02:57:06,000
edit post

2783
02:57:06,000 --> 02:57:08,000
dan Anda memiliki ide

2784
02:57:08,000 --> 02:57:10,000
tapi saya tidak mau melakukannya

2785
02:57:10,000 --> 02:57:12,000
saya lelaki yang lemah

2786
02:57:12,000 --> 02:57:14,000
saya ingin menggunakan

2787
02:57:16,000 --> 02:57:18,000
template base

2788
02:57:22,000 --> 02:57:24,000
untuk menggantikan di sini

2789
02:57:24,000 --> 02:57:26,000
adakah pengguna anonimus atau tidak

2790
02:57:26,000 --> 02:57:28,000
dan menunjukkan login

2791
02:57:28,000 --> 02:57:30,000
atau login

2792
02:57:30,000 --> 02:57:32,000
atau log out

2793
02:57:32,000 --> 02:57:34,000
link

2794
02:57:34,000 --> 02:57:36,000
dan saya bisa

2795
02:57:36,000 --> 02:57:38,000
melakukannya secara otomatis

2796
02:57:38,000 --> 02:57:40,000
dengan menjelaskan

2797
02:57:42,000 --> 02:57:44,000
konteks

2798
02:57:44,000 --> 02:57:46,000
yang menyebabkan

2799
02:57:46,000 --> 02:57:48,000
bagian dari konteks

2800
02:57:48,000 --> 02:57:50,000
sebenarnya

2801
02:57:50,000 --> 02:57:52,000
diksjenya yang dikosongkan

2802
02:57:52,000 --> 02:57:54,000
ke konteks utama

2803
02:57:54,000 --> 02:57:56,000
dan

2804
02:57:58,000 --> 02:58:00,000
untuk fungsi asing yang menerima permintaan

2805
02:58:00,000 --> 02:58:02,000
menerima

2806
02:58:02,000 --> 02:58:04,000
konteks

2807
02:58:04,000 --> 02:58:06,000
dikosongkan

2808
02:58:06,000 --> 02:58:08,000
saya harus

2809
02:58:08,000 --> 02:58:10,000
menyiapkannya

2810
02:58:10,000 --> 02:58:12,000
dengan jenja middleware

2811
02:58:12,000 --> 02:58:14,000
sangat mudah

2812
02:58:14,000 --> 02:58:16,000
secara basic

2813
02:58:16,000 --> 02:58:18,000
jenja

2814
02:58:18,000 --> 02:58:20,000
dikosongkan

2815
02:58:20,000 --> 02:58:22,000
saya menambah

2816
02:58:22,000 --> 02:58:24,000
versi asing

2817
02:58:24,000 --> 02:58:26,000
untuk

2818
02:58:26,000 --> 02:58:28,000
mendukung

2819
02:58:28,000 --> 02:58:30,000
kekosongan

2820
02:58:30,000 --> 02:58:32,000
ini

2821
02:58:32,000 --> 02:58:34,000
jadi kita

2822
02:58:34,000 --> 02:58:36,000
sekarang

2823
02:58:36,000 --> 02:58:38,000
versi middleware

2824
02:58:38,000 --> 02:58:40,000
contohnya

2825
02:58:40,000 --> 02:58:42,000
untuk mereka

2826
02:58:42,000 --> 02:58:44,000
hampir selesai

2827
02:58:44,000 --> 02:58:46,000
jadi

2828
02:58:46,000 --> 02:58:48,000
ada pertanyaan

2829
02:58:56,000 --> 02:58:58,000
ya

2830
02:58:58,000 --> 02:59:00,000
saya pikir

2831
02:59:00,000 --> 02:59:02,000
mungkin itu menurut Anda

2832
02:59:02,000 --> 02:59:04,000
apakah ini

2833
02:59:04,000 --> 02:59:06,000
untuk ORM?

2834
02:59:06,000 --> 02:59:08,000
saya

2835
02:59:08,000 --> 02:59:10,000
akan bilang tidak

2836
02:59:10,000 --> 02:59:12,000
ada

2837
02:59:12,000 --> 02:59:14,000
ada

2838
02:59:14,000 --> 02:59:16,000
ada library

2839
02:59:18,000 --> 02:59:20,000
untuk

2840
02:59:20,000 --> 02:59:22,000
PVORM

2841
02:59:22,000 --> 02:59:24,000
saya pikir PV

2842
02:59:24,000 --> 02:59:26,000
dan itu mungkin

2843
02:59:28,000 --> 02:59:30,000
untuk

2844
02:59:30,000 --> 02:59:32,000
beberapa library seperti

2845
02:59:32,000 --> 02:59:34,000
IO-PG, IO MySQL

2846
02:59:34,000 --> 02:59:36,000
Anda bisa

2847
02:59:36,000 --> 02:59:38,000
menggunakan

2848
02:59:38,000 --> 02:59:40,000
SQL ALGIM

2849
02:59:40,000 --> 02:59:42,000
untuk menerima tabel

2850
02:59:42,000 --> 02:59:44,000
bukan objek

2851
02:59:44,000 --> 02:59:46,000
tidak ada

2852
02:59:46,000 --> 02:59:48,000
map

2853
02:59:48,000 --> 02:59:50,000
tapi definisi tabel

2854
02:59:50,000 --> 02:59:52,000
Anda bisa menggunakan definisi tabel

2855
02:59:52,000 --> 02:59:54,000
untuk membuat

2856
02:59:54,000 --> 02:59:56,000
kodik

2857
02:59:56,000 --> 02:59:58,000
lebih baik dari string concatenation

2858
02:59:58,000 --> 03:00:00,000
full ORM

2859
03:00:00,000 --> 03:00:02,000
sangat

2860
03:00:02,000 --> 03:00:04,000
sulit

2861
03:00:04,000 --> 03:00:06,000
dan besar

2862
03:00:06,000 --> 03:00:08,000
kerja

2863
03:00:08,000 --> 03:00:10,000
sebuah

2864
03:00:10,000 --> 03:00:12,000
SQL ALGIM

2865
03:00:12,000 --> 03:00:14,000
tidak disediakan

2866
03:00:14,000 --> 03:00:16,000
untuk membiarkan

2867
03:00:16,000 --> 03:00:18,000
asingan

2868
03:00:18,000 --> 03:00:20,000
inget

2869
03:00:20,000 --> 03:00:22,000
tidak mungkin untuk

2870
03:00:22,000 --> 03:00:24,000
menggunakan

2871
03:00:24,000 --> 03:00:26,000
tabel untuk SQL ALGIM

2872
03:00:26,000 --> 03:00:28,000
asingan

2873
03:00:28,000 --> 03:00:30,000
jadi

2874
03:00:30,000 --> 03:00:32,000
situasi sekarang

2875
03:00:32,000 --> 03:00:34,000
itu

2876
03:00:34,000 --> 03:00:36,000
Anda bisa melakukan

2877
03:00:36,000 --> 03:00:38,000
sesuatu

2878
03:00:38,000 --> 03:00:40,000
tapi tidak full

2879
03:00:40,000 --> 03:00:42,000
full-ledged ORM

2880
03:00:42,000 --> 03:00:44,000
dan

2881
03:00:44,000 --> 03:00:46,000
mungkin tidak begitu

2882
03:00:46,000 --> 03:00:48,000
buruk karena

2883
03:00:48,000 --> 03:00:50,000
sekarang

2884
03:00:50,000 --> 03:00:52,000
kita memiliki

2885
03:00:54,000 --> 03:00:56,000
2019

2886
03:00:56,000 --> 03:00:58,000
database relasi

2887
03:00:58,000 --> 03:01:00,000
tidak

2888
03:01:00,000 --> 03:01:02,000
dominant

2889
03:01:04,000 --> 03:01:06,000
biasanya kita memiliki

2890
03:01:06,000 --> 03:01:08,000
kompleks

2891
03:01:08,000 --> 03:01:10,000
sistem heterogen

2892
03:01:10,000 --> 03:01:12,000
dengan

2893
03:01:12,000 --> 03:01:14,000
data secara bagian

2894
03:01:14,000 --> 03:01:16,000
di database secara bagian

2895
03:01:16,000 --> 03:01:18,000
terutama

2896
03:01:18,000 --> 03:01:20,000
di tempat lain

2897
03:01:20,000 --> 03:01:22,000
saya tidak tahu

2898
03:01:22,000 --> 03:01:24,000
key value storage, blob storage

2899
03:01:24,000 --> 03:01:26,000
apa-apa

2900
03:01:26,000 --> 03:01:28,000
data

2901
03:01:28,000 --> 03:01:30,000
tidak normalisasi

2902
03:01:30,000 --> 03:01:32,000
jadi

2903
03:01:32,000 --> 03:01:34,000
sebab

2904
03:01:34,000 --> 03:01:36,000
bagus ORM

2905
03:01:36,000 --> 03:01:38,000
tidak hilang

2906
03:01:38,000 --> 03:01:40,000
tapi menjadi

2907
03:01:40,000 --> 03:01:42,000
lebih

2908
03:01:42,000 --> 03:01:44,000
lebih tinggi dari 10 tahun lalu

2909
03:01:44,000 --> 03:01:46,000
saya ingin menanyakan

2910
03:01:46,000 --> 03:01:48,000
soal

2911
03:01:48,000 --> 03:01:50,000
apakah

2912
03:01:50,000 --> 03:01:52,000
kita bisa memiliki

2913
03:01:52,000 --> 03:01:54,000
Mongo

2914
03:01:54,000 --> 03:01:56,000
dan Elastic

2915
03:01:56,000 --> 03:01:58,000
ada

2916
03:01:58,000 --> 03:02:00,000
asingan

2917
03:02:00,000 --> 03:02:02,000
untuk Mongo dan Elastic

2918
03:02:02,000 --> 03:02:04,000
hanya

2919
03:02:04,000 --> 03:02:06,000
gunakan Google

2920
03:02:06,000 --> 03:02:08,000
dan cari sesuatu

2921
03:02:14,000 --> 03:02:16,000
apakah kita bisa memiliki

2922
03:02:16,000 --> 03:02:18,000
data secara bagian

2923
03:02:18,000 --> 03:02:20,000
yang terutama

2924
03:02:20,000 --> 03:02:22,000
static

2925
03:02:22,000 --> 03:02:24,000
seperti TSM

2926
03:02:24,000 --> 03:02:26,000
atau

2927
03:02:26,000 --> 03:02:28,000
apa?

2928
03:02:28,000 --> 03:02:30,000
bagus

2929
03:02:30,000 --> 03:02:32,000
saya harus memilih dan menjual

2930
03:02:32,000 --> 03:02:34,000
file static

2931
03:02:34,000 --> 03:02:36,000
kamu bisa

2932
03:02:36,000 --> 03:02:38,000
bilang

2933
03:02:40,000 --> 03:02:42,000
application router

2934
03:02:42,000 --> 03:02:44,000
dan

2935
03:02:44,000 --> 03:02:46,000
untuk menjual

2936
03:02:46,000 --> 03:02:48,000
tapi

2937
03:02:48,000 --> 03:02:50,000
biasanya

2938
03:02:50,000 --> 03:02:52,000
kamu meluncurkan

2939
03:02:52,000 --> 03:02:54,000
aplikasi

2940
03:02:54,000 --> 03:02:56,000
di belakang

2941
03:02:56,000 --> 03:02:58,000
reverse proxy

2942
03:02:58,000 --> 03:03:00,000
di belakang Nginx

2943
03:03:00,000 --> 03:03:02,000
di belakang

2944
03:03:02,000 --> 03:03:04,000
Elastic Cloud Balancer

2945
03:03:04,000 --> 03:03:06,000
di belakang sesuatu

2946
03:03:06,000 --> 03:03:08,000
dan

2947
03:03:08,000 --> 03:03:10,000
server depan

2948
03:03:10,000 --> 03:03:12,000
server

2949
03:03:12,000 --> 03:03:14,000
biasanya

2950
03:03:14,000 --> 03:03:16,000
lebih baik

2951
03:03:16,000 --> 03:03:18,000
untuk menjaga file static

2952
03:03:18,000 --> 03:03:20,000
jadi

2953
03:03:20,000 --> 03:03:22,000
mereka tidak

2954
03:03:22,000 --> 03:03:24,000
bisa

2955
03:03:24,000 --> 03:03:26,000
menjaga

2956
03:03:26,000 --> 03:03:28,000
AIO?

2957
03:03:28,000 --> 03:03:30,000
mereka bisa

2958
03:03:30,000 --> 03:03:32,000
tapi

2959
03:03:32,000 --> 03:03:34,000
Nginx menjaga file static

2960
03:03:34,000 --> 03:03:36,000
lebih cepat

2961
03:03:36,000 --> 03:03:38,000
HTTP masih bisa

2962
03:03:38,000 --> 03:03:40,000
mereka bisa melakukan itu

2963
03:03:40,000 --> 03:03:42,000
tapi

2964
03:03:42,000 --> 03:03:44,000
bukan kompetitor

2965
03:03:44,000 --> 03:03:46,000
dengan kode C yang sangat

2966
03:03:46,000 --> 03:03:48,000
teroptimis

2967
03:03:48,000 --> 03:03:50,000
untuk menjaga file static

2968
03:03:50,000 --> 03:03:52,000
juga

2969
03:03:54,000 --> 03:03:56,000
Python tidak

2970
03:03:56,000 --> 03:03:58,000
terlalu cepat

2971
03:03:58,000 --> 03:04:00,000
jadi

2972
03:04:00,000 --> 03:04:02,000
saya mengesankan

2973
03:04:02,000 --> 03:04:04,000
keputusan

2974
03:04:04,000 --> 03:04:06,000
jika kamu

2975
03:04:06,000 --> 03:04:08,000
menggunakan kode

2976
03:04:08,000 --> 03:04:10,000
dan logik

2977
03:04:10,000 --> 03:04:12,000
itu mengapa kamu menggunakan Python

2978
03:04:12,000 --> 03:04:14,000
bukan C

2979
03:04:14,000 --> 03:04:16,000
itu mengapa kamu menggunakan

2980
03:04:16,000 --> 03:04:18,000
HTTP

2981
03:04:18,000 --> 03:04:20,000
tapi規則 sama

2982
03:04:20,000 --> 03:04:22,000
dengan Django

2983
03:04:22,000 --> 03:04:24,000
untuk Flask

2984
03:04:24,000 --> 03:04:26,000
tidak terlalu baru

2985
03:04:26,000 --> 03:04:28,000
saya pikir

2986
03:04:28,000 --> 03:04:30,000
dengan Django

2987
03:04:30,000 --> 03:04:32,000
Flask bisa menjaga file static

2988
03:04:32,000 --> 03:04:34,000
HTTP bisa melakukan itu juga

2989
03:04:36,000 --> 03:04:38,000
jadi

2990
03:04:38,000 --> 03:04:40,000
ada waktu atau tidak?

2991
03:04:40,000 --> 03:04:42,000
kita ada sekitar 15 menit

2992
03:04:42,000 --> 03:04:44,000
15 menit

2993
03:04:44,000 --> 03:04:46,000
oke

2994
03:04:48,000 --> 03:04:50,000
saya

2995
03:04:50,000 --> 03:04:52,000
ingin

2996
03:04:52,000 --> 03:04:54,000
sangat sederhana

2997
03:04:54,000 --> 03:04:56,000
mengenai cara mencoba

2998
03:04:56,000 --> 03:04:58,000
tes

2999
03:04:58,000 --> 03:05:00,000
asingkronos

3000
03:05:00,000 --> 03:05:02,000
ini

3001
03:05:02,000 --> 03:05:04,000
sangat

3002
03:05:04,000 --> 03:05:06,000
serupa dengan

3003
03:05:06,000 --> 03:05:08,000
standard

3004
03:05:08,000 --> 03:05:10,000
asingkronos 1

3005
03:05:10,000 --> 03:05:12,000
tapi

3006
03:05:12,000 --> 03:05:14,000
ini

3007
03:05:14,000 --> 03:05:16,000
juga

3008
03:05:16,000 --> 03:05:18,000
fungsi asingkronos

3009
03:05:18,000 --> 03:05:20,000
juga

3010
03:05:20,000 --> 03:05:22,000
saya tidak ingin

3011
03:05:22,000 --> 03:05:24,000
bercerita tentang

3012
03:05:24,000 --> 03:05:26,000
unit test

3013
03:05:26,000 --> 03:05:28,000
karena

3014
03:05:28,000 --> 03:05:30,000
bisa

3015
03:05:30,000 --> 03:05:32,000
untuk unit test dengan

3016
03:05:32,000 --> 03:05:34,000
third party library

3017
03:05:34,000 --> 03:05:36,000
tapi saya lebih suka pi test

3018
03:05:36,000 --> 03:05:38,000
dan

3019
03:05:38,000 --> 03:05:40,000
apa yang harus kamu lakukan?

3020
03:05:40,000 --> 03:05:42,000
kamu harus

3021
03:05:42,000 --> 03:05:44,000
menggunakan pi test

3022
03:05:44,000 --> 03:05:46,000
ihtp plugin

3023
03:05:46,000 --> 03:05:48,000
untuk pi test

3024
03:05:48,000 --> 03:05:50,000
dan tolong

3025
03:05:50,000 --> 03:05:52,000
perhatikan pi test ihtp

3026
03:05:52,000 --> 03:05:54,000
ini tidak bisa dikongsi dengan pi test asingkronos

3027
03:05:54,000 --> 03:05:56,000
itu cerita yang panjang

3028
03:05:56,000 --> 03:05:58,000
kenapa?

3029
03:05:58,000 --> 03:06:00,000
dengan

3030
03:06:00,000 --> 03:06:02,000
pi test ihtp

3031
03:06:02,000 --> 03:06:04,000
kamu bisa

3032
03:06:04,000 --> 03:06:06,000
menulis

3033
03:06:06,000 --> 03:06:08,000
pi test style

3034
03:06:08,000 --> 03:06:10,000
bukan

3035
03:06:10,000 --> 03:06:12,000
hanya dev test

3036
03:06:12,000 --> 03:06:14,000
tapi asing dev

3037
03:06:14,000 --> 03:06:16,000
dan plugin akan

3038
03:06:16,000 --> 03:06:18,000
mengangkutnya secara automatis

3039
03:06:18,000 --> 03:06:20,000
jika plugin melihat

3040
03:06:20,000 --> 03:06:22,000
fungsi test

3041
03:06:22,000 --> 03:06:24,000
asingkronos

3042
03:06:24,000 --> 03:06:26,000
itu menciptakan loop

3043
03:06:26,000 --> 03:06:28,000
loop instance

3044
03:06:28,000 --> 03:06:30,000
per fungsi test

3045
03:06:30,000 --> 03:06:32,000
run

3046
03:06:32,000 --> 03:06:34,000
untuk membuat

3047
03:06:34,000 --> 03:06:36,000
istilah di dunia

3048
03:06:36,000 --> 03:06:38,000
untuk

3049
03:06:38,000 --> 03:06:40,000
mencetakkan

3050
03:06:40,000 --> 03:06:42,000
dan

3051
03:06:42,000 --> 03:06:44,000
terkoneksi

3052
03:06:44,000 --> 03:06:46,000
kelihatan mudah

3053
03:06:46,000 --> 03:06:48,000
tapi tidak penting

3054
03:06:48,000 --> 03:06:50,000
untuk mencetakkan

3055
03:06:50,000 --> 03:06:52,000
aplikasi kita

3056
03:06:52,000 --> 03:06:54,000
kita perlu memodifikasi

3057
03:06:54,000 --> 03:06:56,000
sedikit

3058
03:06:56,000 --> 03:06:58,000
lihat, saya melalui

3059
03:06:58,000 --> 03:07:00,000
db-path

3060
03:07:00,000 --> 03:07:02,000
ke database

3061
03:07:02,000 --> 03:07:04,000
ke kod kita

3062
03:07:04,000 --> 03:07:06,000
dan

3063
03:07:06,000 --> 03:07:08,000
dengan ini kita bisa menggunakan

3064
03:07:08,000 --> 03:07:10,000
satu database untuk

3065
03:07:10,000 --> 03:07:12,000
kita panggil produksi

3066
03:07:12,000 --> 03:07:14,000
dan satu lagi untuk mencetakkan

3067
03:07:14,000 --> 03:07:16,000
dan

3068
03:07:16,000 --> 03:07:18,000
saya

3069
03:07:18,000 --> 03:07:20,000
bisa

3070
03:07:20,000 --> 03:07:22,000
menggunakan

3071
03:07:22,000 --> 03:07:24,000
untuk menciptakan

3072
03:07:24,000 --> 03:07:26,000
fitur untuk

3073
03:07:26,000 --> 03:07:28,000
menciptakan database

3074
03:07:28,000 --> 03:07:30,000
di lokasi

3075
03:07:30,000 --> 03:07:32,000
sementara

3076
03:07:32,000 --> 03:07:34,000
setiap

3077
03:07:34,000 --> 03:07:36,000
waktu, database baru untuk

3078
03:07:36,000 --> 03:07:38,000
mencetakkan

3079
03:07:38,000 --> 03:07:40,000
untuk mencetakkan

3080
03:07:40,000 --> 03:07:42,000
jika saya mau, saya bisa

3081
03:07:42,000 --> 03:07:44,000
menceritakan database

3082
03:07:44,000 --> 03:07:46,000
jadi saya memiliki fitur untuk

3083
03:07:46,000 --> 03:07:48,000
menciptakan database

3084
03:07:48,000 --> 03:07:50,000
saya memiliki

3085
03:07:50,000 --> 03:07:52,000
fitur lain, fitur isinkron

3086
03:07:52,000 --> 03:07:54,000
lihat, Anda bisa menggunakan

3087
03:07:54,000 --> 03:07:56,000
await untuk fitur

3088
03:07:56,000 --> 03:07:58,000
untuk

3089
03:08:00,000 --> 03:08:02,000
menghubungkan database

3090
03:08:02,000 --> 03:08:04,000
untuk mencetakkan

3091
03:08:04,000 --> 03:08:06,000
pengendal

3092
03:08:06,000 --> 03:08:08,000
untuk menghubungkan

3093
03:08:08,000 --> 03:08:10,000
untuk mengakses database

3094
03:08:10,000 --> 03:08:12,000
kemudian

3095
03:08:12,000 --> 03:08:14,000
kita perlu

3096
03:08:14,000 --> 03:08:16,000
fitur untuk

3097
03:08:16,000 --> 03:08:18,000
menciptakan klien

3098
03:08:18,000 --> 03:08:20,000
HTTP menciptakan

3099
03:08:20,000 --> 03:08:22,000
fitur

3100
03:08:22,000 --> 03:08:24,000
yang menciptakan

3101
03:08:24,000 --> 03:08:26,000
klien tes

3102
03:08:26,000 --> 03:08:28,000
apa maksudnya

3103
03:08:28,000 --> 03:08:30,000
kita memiliki

3104
03:08:30,000 --> 03:08:32,000
aplikasi initialisasi

3105
03:08:32,000 --> 03:08:34,000
kita menyebutkan

3106
03:08:34,000 --> 03:08:36,000
ke klien HTTP

3107
03:08:36,000 --> 03:08:38,000
dan klien HTTP

3108
03:08:38,000 --> 03:08:40,000
untuk mencetakkan

3109
03:08:40,000 --> 03:08:42,000
fitur tes

3110
03:08:42,000 --> 03:08:44,000
untuk mencetakkan

3111
03:08:44,000 --> 03:08:46,000
klien

3112
03:08:46,000 --> 03:08:48,000
dan mencetakkan

3113
03:08:48,000 --> 03:08:50,000
server

3114
03:08:50,000 --> 03:08:52,000
untuk mencetakkan

3115
03:08:52,000 --> 03:08:54,000
untuk mencetakkan

3116
03:08:54,000 --> 03:08:56,000
dan menciptakan

3117
03:08:56,000 --> 03:08:58,000
semua

3118
03:08:58,000 --> 03:09:00,000
jadi

3119
03:09:00,000 --> 03:09:02,000
secara dasarnya

3120
03:09:02,000 --> 03:09:04,000
kita bisa membuat

3121
03:09:04,000 --> 03:09:06,000
server instance

3122
03:09:06,000 --> 03:09:08,000
server instance

3123
03:09:08,000 --> 03:09:10,000
per tes

3124
03:09:10,000 --> 03:09:12,000
dan ini berfungsi

3125
03:09:12,000 --> 03:09:14,000
dengan cepat

3126
03:09:14,000 --> 03:09:16,000
dan sangat mudah

3127
03:09:16,000 --> 03:09:18,000
jadi kita memiliki

3128
03:09:18,000 --> 03:09:20,000
klien tes

3129
03:09:20,000 --> 03:09:22,000
seperti klien

3130
03:09:22,000 --> 03:09:24,000
klien sesi

3131
03:09:24,000 --> 03:09:26,000
tapi berfungsi dengan

3132
03:09:26,000 --> 03:09:28,000
FML

3133
03:09:30,000 --> 03:09:32,000
server, dimulai dari port random

3134
03:09:32,000 --> 03:09:34,000
dan

3135
03:09:34,000 --> 03:09:36,000
kita tes API kita

3136
03:09:36,000 --> 03:09:38,000
kalian lihat

3137
03:09:38,000 --> 03:09:40,000
ada respons

3138
03:09:40,000 --> 03:09:42,000
cek kode, cek

3139
03:09:42,000 --> 03:09:44,000
konten JSON

3140
03:09:44,000 --> 03:09:46,000
setelah

3141
03:09:46,000 --> 03:09:48,000
secara default setelah

3142
03:09:48,000 --> 03:09:50,000
kreatif database itu kosong

3143
03:09:50,000 --> 03:09:52,000
kita bisa

3144
03:09:52,000 --> 03:09:54,000
menyimpan sesuatu

3145
03:09:54,000 --> 03:09:56,000
ke database, bukan menggunakan

3146
03:09:56,000 --> 03:09:58,000
rest API kita, tapi

3147
03:09:58,000 --> 03:10:00,000
langsung

3148
03:10:00,000 --> 03:10:02,000
langsung mengemaskan data

3149
03:10:02,000 --> 03:10:04,000
ke database

3150
03:10:04,000 --> 03:10:06,000
dan kemudian menggunakan

3151
03:10:06,000 --> 03:10:08,000
klien HTTP untuk mencek

3152
03:10:08,000 --> 03:10:10,000
bagaimana API

3153
03:10:10,000 --> 03:10:12,000
rest kita

3154
03:10:12,000 --> 03:10:14,000
berfungsi

3155
03:10:16,000 --> 03:10:18,000
dengan ini

3156
03:10:18,000 --> 03:10:20,000
kita bisa

3157
03:10:20,000 --> 03:10:22,000
tes semua

3158
03:10:22,000 --> 03:10:24,000
semuanya di server kita

3159
03:10:24,000 --> 03:10:26,000
jika kalian ingin

3160
03:10:26,000 --> 03:10:28,000
tes bagaimana

3161
03:10:28,000 --> 03:10:30,000
template

3162
03:10:30,000 --> 03:10:32,000
rendering

3163
03:10:32,000 --> 03:10:34,000
berfungsi

3164
03:10:34,000 --> 03:10:36,000
bukan

3165
03:10:36,000 --> 03:10:38,000
API post

3166
03:10:38,000 --> 03:10:40,000
tapi

3167
03:10:40,000 --> 03:10:42,000
nilai

3168
03:10:42,000 --> 03:10:44,000
dan

3169
03:10:44,000 --> 03:10:46,000
tes respons

3170
03:10:46,000 --> 03:10:48,000
dan lihat bagaimana

3171
03:10:48,000 --> 03:10:50,000
terlihat

3172
03:10:50,000 --> 03:10:52,000
seperti

3173
03:10:52,000 --> 03:10:54,000
tes

3174
03:10:54,000 --> 03:10:56,000
biasa

3175
03:10:56,000 --> 03:10:58,000
klien

3176
03:10:58,000 --> 03:11:00,000
ingat, kita juga

3177
03:11:00,000 --> 03:11:02,000
ada klien dari

3178
03:11:02,000 --> 03:11:04,000
seksyen 5

3179
03:11:04,000 --> 03:11:06,000
rest klien

3180
03:11:06,000 --> 03:11:08,000
jika kalian punya kode untuk server

3181
03:11:10,000 --> 03:11:12,000
cukup mudah

3182
03:11:14,000 --> 03:11:16,000
mari kita gunakan

3183
03:11:16,000 --> 03:11:18,000
lain

3184
03:11:18,000 --> 03:11:20,000
toolkit HTTP

3185
03:11:20,000 --> 03:11:22,000
feature

3186
03:11:22,000 --> 03:11:24,000
disini kita gunakan klien HTTP

3187
03:11:24,000 --> 03:11:26,000
untuk mencek

3188
03:11:26,000 --> 03:11:28,000
klien

3189
03:11:28,000 --> 03:11:30,000
sekarang kita ada server HTTP

3190
03:11:30,000 --> 03:11:32,000
untuk

3191
03:11:32,000 --> 03:11:34,000
mencek server lagi

3192
03:11:34,000 --> 03:11:36,000
di random port

3193
03:11:36,000 --> 03:11:38,000
sebenarnya klien HTTP

3194
03:11:38,000 --> 03:11:40,000
menggunakan

3195
03:11:40,000 --> 03:11:42,000
server HTTP

3196
03:11:42,000 --> 03:11:44,000
secara internal

3197
03:11:44,000 --> 03:11:46,000
dan

3198
03:11:46,000 --> 03:11:48,000
kita ada

3199
03:11:48,000 --> 03:11:50,000
server instance

3200
03:11:50,000 --> 03:11:52,000
di random port

3201
03:11:52,000 --> 03:11:54,000
kita ada

3202
03:11:54,000 --> 03:11:56,000
URL server

3203
03:11:56,000 --> 03:11:58,000
make URL

3204
03:11:58,000 --> 03:12:00,000
terserah

3205
03:12:00,000 --> 03:12:02,000
root

3206
03:12:02,000 --> 03:12:04,000
endpoint

3207
03:12:04,000 --> 03:12:06,000
dengan host dan port

3208
03:12:06,000 --> 03:12:08,000
host sebenarnya

3209
03:12:08,000 --> 03:12:10,000
localhost dengan port yang benar

3210
03:12:10,000 --> 03:12:12,000
untuk server yang dimulai

3211
03:12:12,000 --> 03:12:14,000
dan kita bisa

3212
03:12:14,000 --> 03:12:16,000
hanya mengunjungi

3213
03:12:16,000 --> 03:12:18,000
URL ini

3214
03:12:18,000 --> 03:12:20,000
tes user

3215
03:12:20,000 --> 03:12:22,000
menggunakan klien rest

3216
03:12:22,000 --> 03:12:24,000
instance

3217
03:12:24,000 --> 03:12:26,000
menangkut

3218
03:12:26,000 --> 03:12:28,000
saya pikir konteks manager

3219
03:12:28,000 --> 03:12:30,000
dari

3220
03:12:30,000 --> 03:12:32,000
kita berbicara sebelum

3221
03:12:32,000 --> 03:12:34,000
berhenti

3222
03:12:34,000 --> 03:12:36,000
tentangnya

3223
03:12:36,000 --> 03:12:38,000
dan

3224
03:12:40,000 --> 03:12:42,000
lakukan sesuatu

3225
03:12:42,000 --> 03:12:44,000
tes

3226
03:12:44,000 --> 03:12:46,000
yang memiliki

3227
03:12:46,000 --> 03:12:48,000
klien rest kita

3228
03:12:48,000 --> 03:12:50,000
database connection

3229
03:12:50,000 --> 03:12:52,000
kita

3230
03:12:52,000 --> 03:12:54,000
menulis

3231
03:12:54,000 --> 03:12:56,000
post baru

3232
03:12:56,000 --> 03:12:58,000
menggunakan klien rest

3233
03:12:58,000 --> 03:13:00,000
API

3234
03:13:00,000 --> 03:13:02,000
dan menggunakan database

3235
03:13:02,000 --> 03:13:04,000
untuk mencoba

3236
03:13:04,000 --> 03:13:06,000
apakah

3237
03:13:06,000 --> 03:13:08,000
post diambil

3238
03:13:08,000 --> 03:13:10,000
database

3239
03:13:10,000 --> 03:13:12,000
jika kamu tidak

3240
03:13:12,000 --> 03:13:14,000
ada server

3241
03:13:14,000 --> 03:13:16,000
mungkin server

3242
03:13:16,000 --> 03:13:18,000
berseparasi

3243
03:13:18,000 --> 03:13:20,000
kita bisa

3244
03:13:20,000 --> 03:13:22,000
menggunakan

3245
03:13:22,000 --> 03:13:24,000
GitHub repository

3246
03:13:24,000 --> 03:13:26,000
dan memiliki project berseparasi

3247
03:13:26,000 --> 03:13:28,000
kamu tidak bisa memiliki server

3248
03:13:28,000 --> 03:13:30,000
kamu tidak bisa memulai server

3249
03:13:30,000 --> 03:13:32,000
ada cara

3250
03:13:32,000 --> 03:13:34,000
untuk

3251
03:13:34,000 --> 03:13:36,000
kita melakukan

3252
03:13:36,000 --> 03:13:38,000
aplikasi

3253
03:13:38,000 --> 03:13:40,000
hanya satu endpoint

3254
03:13:40,000 --> 03:13:42,000
hanya satu handler

3255
03:13:42,000 --> 03:13:44,000
dan di handler

3256
03:13:44,000 --> 03:13:46,000
kita melakukan

3257
03:13:46,000 --> 03:13:48,000
cek

3258
03:13:48,000 --> 03:13:50,000
yang

3259
03:13:50,000 --> 03:13:52,000
endpoint diambil

3260
03:13:52,000 --> 03:13:54,000
dengan test

3261
03:13:54,000 --> 03:13:56,000
yang bagus untuk kita

3262
03:13:56,000 --> 03:13:58,000
dua asursi

3263
03:13:58,000 --> 03:14:00,000
dan menulis

3264
03:14:00,000 --> 03:14:02,000
beberapa data yang gagal

3265
03:14:02,000 --> 03:14:04,000
dan cek data kembali

3266
03:14:04,000 --> 03:14:06,000
terlihat seperti

3267
03:14:06,000 --> 03:14:08,000
berbicara

3268
03:14:08,000 --> 03:14:10,000
tapi tidak, lebih baik dari berbicara

3269
03:14:10,000 --> 03:14:12,000
kenapa?

3270
03:14:12,000 --> 03:14:14,000
karena

3271
03:14:14,000 --> 03:14:16,000
kamu membuat

3272
03:14:16,000 --> 03:14:18,000
server yang benar

3273
03:14:18,000 --> 03:14:20,000
dan kamu mencoba

3274
03:14:22,000 --> 03:14:24,000
lebih banyak

3275
03:14:24,000 --> 03:14:26,000
bahan bergerak

3276
03:14:26,000 --> 03:14:28,000
kamu menghantar

3277
03:14:28,000 --> 03:14:30,000
permintaan dan menerima

3278
03:14:30,000 --> 03:14:32,000
respons menggunakan

3279
03:14:32,000 --> 03:14:34,000
protokol network

3280
03:14:34,000 --> 03:14:36,000
menggunakan sistem

3281
03:14:36,000 --> 03:14:38,000
network benar

3282
03:14:38,000 --> 03:14:40,000
lebih baik dari

3283
03:14:40,000 --> 03:14:42,000
monkey patch

3284
03:14:42,000 --> 03:14:44,000
kita cek

3285
03:14:44,000 --> 03:14:46,000
bagaimana monkey patchnya

3286
03:14:46,000 --> 03:14:48,000
berjalan

3287
03:14:48,000 --> 03:14:50,000
HTTP

3288
03:14:50,000 --> 03:14:52,000
oh, maaf

3289
03:14:52,000 --> 03:14:54,000
HTP

3290
03:14:54,000 --> 03:14:56,000
secure

3291
03:14:56,000 --> 03:14:58,000
sedikit

3292
03:14:58,000 --> 03:15:00,000
sulit untuk tes

3293
03:15:00,000 --> 03:15:02,000
karena kamu membutuhkan

3294
03:15:02,000 --> 03:15:04,000
sertifikat

3295
03:15:04,000 --> 03:15:06,000
dan kamu bisa memasukkan

3296
03:15:06,000 --> 03:15:08,000
sertifikat untuk tes

3297
03:15:08,000 --> 03:15:10,000
tapi masalahnya

3298
03:15:10,000 --> 03:15:12,000
dengan namanya DNS

3299
03:15:12,000 --> 03:15:14,000
kamu harus memulai

3300
03:15:14,000 --> 03:15:16,000
dan mungkin

3301
03:15:16,000 --> 03:15:18,000
ini gagal

3302
03:15:18,000 --> 03:15:20,000
selain

3303
03:15:20,000 --> 03:15:22,000
kamu memutuskan server produksi

3304
03:15:24,000 --> 03:15:26,000
tidak sangat handa untuk

3305
03:15:26,000 --> 03:15:28,000
tes HTP

3306
03:15:28,000 --> 03:15:30,000
di laptop lokal saya

3307
03:15:30,000 --> 03:15:32,000
tanpa namanya DNS

3308
03:15:32,000 --> 03:15:34,000
terkumpul dengan ini

3309
03:15:34,000 --> 03:15:36,000
tapi, Nathanial Smith

3310
03:15:36,000 --> 03:15:38,000
yang

3311
03:15:38,000 --> 03:15:40,000
sangat bagus

3312
03:15:40,000 --> 03:15:42,000
task me library

3313
03:15:42,000 --> 03:15:44,000
dan terima kasih

3314
03:15:44,000 --> 03:15:46,000
Svetoslav untuk mengadoptikannya

3315
03:15:46,000 --> 03:15:48,000
untuk tes HTTP

3316
03:15:50,000 --> 03:15:52,000
jadi, idea ini

3317
03:15:52,000 --> 03:15:54,000
bukan menggunakan

3318
03:15:54,000 --> 03:15:56,000
sertifikat

3319
03:15:56,000 --> 03:15:58,000
dari

3320
03:15:58,000 --> 03:16:00,000
sistem operasi kamu

3321
03:16:00,000 --> 03:16:02,000
untuk tes saja

3322
03:16:02,000 --> 03:16:04,000
kita membuat

3323
03:16:04,000 --> 03:16:06,000
sendiri

3324
03:16:06,000 --> 03:16:08,000
secara temporary

3325
03:16:08,000 --> 03:16:10,000
root

3326
03:16:10,000 --> 03:16:12,000
sertifikat

3327
03:16:12,000 --> 03:16:14,000
kita menyebut

3328
03:16:14,000 --> 03:16:16,000
sertifikat untuk lokal

3329
03:16:16,000 --> 03:16:18,000
untuk tes saja

3330
03:16:18,000 --> 03:16:20,000
hanya untuk waktu

3331
03:16:20,000 --> 03:16:22,000
menggunakan program ini

3332
03:16:22,000 --> 03:16:24,000
atau

3333
03:16:24,000 --> 03:16:26,000
untuk tes spesifik

3334
03:16:26,000 --> 03:16:28,000
sebenarnya, dalam kes ini

3335
03:16:28,000 --> 03:16:30,000
kita membuat

3336
03:16:30,000 --> 03:16:32,000
konfigurasi server

3337
03:16:32,000 --> 03:16:34,000
kita membuat

3338
03:16:34,000 --> 03:16:36,000
konteks SSL

3339
03:16:36,000 --> 03:16:38,000
dan konteks SSL klien

3340
03:16:38,000 --> 03:16:40,000
dan konteks ini

3341
03:16:40,000 --> 03:16:42,000
bisa dikonsumsi

3342
03:16:42,000 --> 03:16:44,000
ke HTTP

3343
03:16:44,000 --> 03:16:46,000
atau async IO

3344
03:16:46,000 --> 03:16:48,000
teknik, konteks

3345
03:16:48,000 --> 03:16:50,000
bisa dikonsumsi

3346
03:16:50,000 --> 03:16:52,000
ke socket

3347
03:16:52,000 --> 03:16:54,000
ke request

3348
03:16:54,000 --> 03:16:56,000
library, by the way

3349
03:16:56,000 --> 03:16:58,000
dan kamu memiliki

3350
03:16:58,000 --> 03:17:00,000
dua panggilan

3351
03:17:00,000 --> 03:17:02,000
konteks yang bisa dikonsumsi

3352
03:17:02,000 --> 03:17:04,000
untuk menciptakan

3353
03:17:04,000 --> 03:17:06,000
koneksi HTTPS

3354
03:17:06,000 --> 03:17:08,000
dan kedua

3355
03:17:08,000 --> 03:17:10,000
bagian, kondisi

3356
03:17:10,000 --> 03:17:12,000
satu sama lain

3357
03:17:14,000 --> 03:17:16,000
jadi, ini

3358
03:17:16,000 --> 03:17:18,000
cara paling konvenient untuk tes

3359
03:17:18,000 --> 03:17:20,000
HTTPS

3360
03:17:20,000 --> 03:17:22,000
jika kamu ingin

3361
03:17:24,000 --> 03:17:26,000
bagian terakhir

3362
03:17:26,000 --> 03:17:28,000
jika kamu masih

3363
03:17:28,000 --> 03:17:30,000
ingin

3364
03:17:30,000 --> 03:17:32,000
atau harus

3365
03:17:32,000 --> 03:17:34,000
menggunakan mocking

3366
03:17:34,000 --> 03:17:36,000
ada respons

3367
03:17:36,000 --> 03:17:38,000
dengan mocks session

3368
03:17:40,000 --> 03:17:42,000
itu menggigil

3369
03:17:42,000 --> 03:17:44,000
internal representation

3370
03:17:44,000 --> 03:17:46,000
dan kamu bisa bilang

3371
03:17:46,000 --> 03:17:48,000
jika kamu pergi ke example com

3372
03:17:48,000 --> 03:17:50,000
kemudian

3373
03:17:50,000 --> 03:17:52,000
kembali tes body

3374
03:17:52,000 --> 03:17:54,000
dengan status 200

3375
03:17:54,000 --> 03:17:56,000
terlihat

3376
03:17:56,000 --> 03:17:58,000
lebih mudah

3377
03:17:58,000 --> 03:18:00,000
saya tidak suka

3378
03:18:00,000 --> 03:18:02,000
tapi

3379
03:18:02,000 --> 03:18:04,000
kadang-kadang

3380
03:18:04,000 --> 03:18:06,000
bisa jadi mudah

3381
03:18:06,000 --> 03:18:08,000
jadi, ini sangat mudah

3382
03:18:08,000 --> 03:18:10,000
overview tes

3383
03:18:12,000 --> 03:18:14,000
jika kamu yakin dengan

3384
03:18:14,000 --> 03:18:16,000
tes by test

3385
03:18:16,000 --> 03:18:18,000
saya percaya

3386
03:18:18,000 --> 03:18:20,000
kamu akan dapat idea

3387
03:18:20,000 --> 03:18:22,000
bagaimana untuk bekerja dengan tes

3388
03:18:22,000 --> 03:18:24,000
di HTTP

3389
03:18:24,000 --> 03:18:26,000
di dunia terorong

3390
03:18:26,000 --> 03:18:28,000
jika tidak

3391
03:18:28,000 --> 03:18:30,000
maaf

3392
03:18:30,000 --> 03:18:32,000
tes

3393
03:18:32,000 --> 03:18:34,000
berbeda

3394
03:18:34,000 --> 03:18:36,000
3 jam

3395
03:18:36,000 --> 03:18:38,000
mungkin tidak cukup

3396
03:18:38,000 --> 03:18:40,000
tapi, apapun

3397
03:18:40,000 --> 03:18:42,000
saya sudah selesai

3398
03:18:42,000 --> 03:18:44,000
pertanyaan

3399
03:18:54,000 --> 03:18:56,000
saya

3400
03:18:56,000 --> 03:18:58,000
tidak bisa

3401
03:18:58,000 --> 03:19:00,000
mencoba

3402
03:19:00,000 --> 03:19:02,000
untuk mencoba

3403
03:19:02,000 --> 03:19:04,000
untuk mencoba

3404
03:19:04,000 --> 03:19:06,000
untuk mencoba

3405
03:19:06,000 --> 03:19:08,000
untuk mencoba

3406
03:19:08,000 --> 03:19:10,000
untuk mencoba

3407
03:19:10,000 --> 03:19:12,000
untuk mencoba

3408
03:19:12,000 --> 03:19:14,000
untuk mencoba

3409
03:19:14,000 --> 03:19:16,000
untuk mencoba

3410
03:19:16,000 --> 03:19:18,000
untuk mencoba

3411
03:19:18,000 --> 03:19:20,000
untuk mencoba

3412
03:19:20,000 --> 03:19:22,000
untuk mencoba

3413
03:19:22,000 --> 03:19:24,000
kelihatan seperti

3414
03:19:24,000 --> 03:19:26,000
semuanya bersih

3415
03:19:26,000 --> 03:19:28,000
terima kasih

3416
03:19:28,000 --> 03:19:30,000
itu bagus

3417
03:19:30,000 --> 03:19:32,000
terima kasih

3418
03:19:32,000 --> 03:19:34,000
terima kasih semua yang datang

