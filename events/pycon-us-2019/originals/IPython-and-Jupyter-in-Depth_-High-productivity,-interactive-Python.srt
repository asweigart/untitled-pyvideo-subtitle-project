1
00:00:00,000 --> 00:00:09,000
And I think everybody is seated, so we're going to start the recording.

2
00:00:09,000 --> 00:00:15,040
And then we can go on, and we're good.

3
00:00:15,040 --> 00:00:16,040
So hi, everyone.

4
00:00:16,040 --> 00:00:21,200
This is a Jupyter and IPython tutorial at PyCon.

5
00:00:21,200 --> 00:00:24,600
You have some instruction that we get back to the slide.

6
00:00:24,600 --> 00:00:25,600
I'm Mathias.

7
00:00:25,600 --> 00:00:29,040
I've been part of the Jupyter team since about 2012.

8
00:00:29,440 --> 00:00:32,960
If you want to see my email, you clone one of our repository and you git log.

9
00:00:32,960 --> 00:00:37,320
And as a day jobs, I'm at the University of California, Merced.

10
00:00:37,320 --> 00:00:38,640
Denis would not be here today.

11
00:00:38,640 --> 00:00:39,520
He couldn't make it.

12
00:00:39,520 --> 00:00:42,440
So I'm going to try to fill in for him as much as I can.

13
00:00:42,440 --> 00:00:45,200
But we have another Jupyter code in the back here.

14
00:00:45,200 --> 00:00:46,640
Paul, who is waving to you.

15
00:00:46,640 --> 00:00:47,800
Say hi to Paul.

16
00:00:47,800 --> 00:00:49,040
Hi, Paul.

17
00:00:49,040 --> 00:00:52,840
There's also a backstretch.

18
00:00:52,840 --> 00:00:56,880
So he will be going through, helping you if you have any issues.

19
00:00:57,000 --> 00:00:59,120
And maybe at some point he will come in front of the camera.

20
00:00:59,120 --> 00:01:00,880
But it's not his job.

21
00:01:00,880 --> 00:01:03,520
So he's just helping today.

22
00:01:03,520 --> 00:01:06,480
You should have received these instructions.

23
00:01:06,480 --> 00:01:10,760
We're going to make sure that everything is slow in the first 15 minutes.

24
00:01:10,760 --> 00:01:14,960
If you have everything installed and you go to a terminal and do JupyterLab,

25
00:01:14,960 --> 00:01:17,240
you should have JupyterLab popping up.

26
00:01:17,240 --> 00:01:22,360
If it's not OK, raise your hand or put a red sticky note on your laptop.

27
00:01:22,360 --> 00:01:26,040
And we're going to come help you make sure everything is installed

28
00:01:26,040 --> 00:01:27,840
so that we can move forward.

29
00:01:27,840 --> 00:01:31,400
If everything is good, you put a green or a blue sticky note

30
00:01:31,400 --> 00:01:34,720
so that I can have a quick overview of for whom it's going well

31
00:01:34,720 --> 00:01:37,000
and for who it's not going well.

32
00:01:37,000 --> 00:01:38,960
So you see those people are nice.

33
00:01:38,960 --> 00:01:45,120
And they put the sticky note up so that I can see that it's mostly doing fine.

34
00:01:45,120 --> 00:01:47,600
We're going to do a short presentation for you to finish installation.

35
00:01:47,600 --> 00:01:50,200
Some of you I know just started to download.

36
00:01:50,200 --> 00:01:54,120
And then we can directly dive into Jupyter.

37
00:01:54,160 --> 00:01:57,280
And if you're stuck, if you can't install it on your machine,

38
00:01:57,280 --> 00:01:58,480
just don't stay quiet.

39
00:01:58,480 --> 00:02:00,520
We have a way to set you up online.

40
00:02:00,520 --> 00:02:02,720
We don't have hundreds of machines,

41
00:02:02,720 --> 00:02:05,320
but we have a couple of machines where you can play online

42
00:02:05,320 --> 00:02:08,080
if it doesn't work on your laptop.

43
00:02:08,080 --> 00:02:09,920
So what is Jupyter?

44
00:02:09,920 --> 00:02:13,080
Well, it depends who you talk to.

45
00:02:13,080 --> 00:02:15,400
But mostly when people talk about Jupyter,

46
00:02:15,400 --> 00:02:18,360
and I pay it on for some old timers like me,

47
00:02:18,360 --> 00:02:22,040
it's mostly known for what they call the notebook.

48
00:02:22,040 --> 00:02:24,520
We're going to monitor what is in the notebook later.

49
00:02:24,520 --> 00:02:26,960
It's usually like it's a web server and a web app

50
00:02:26,960 --> 00:02:29,120
that can contain code, narrative, math and results.

51
00:02:29,120 --> 00:02:32,560
You probably all have seen Jupyter maybe once before.

52
00:02:32,560 --> 00:02:35,440
Who has never seen Jupyter before?

53
00:02:35,440 --> 00:02:37,280
Okay, good.

54
00:02:37,280 --> 00:02:39,240
So nobody raise their hands.

55
00:02:39,240 --> 00:02:44,080
And usually these things is attached to a kernel doing computation.

56
00:02:44,080 --> 00:02:48,440
And here we're going to use Python.

57
00:02:48,440 --> 00:02:50,400
If we dive more into what Jupyter is,

58
00:02:50,400 --> 00:02:53,200
it's assessed as standard and protocols.

59
00:02:53,200 --> 00:02:55,560
We have the notebook document format,

60
00:02:55,560 --> 00:02:59,000
which is usually a file that ends in the IPYMB,

61
00:02:59,000 --> 00:03:00,280
which is JSON inside.

62
00:03:00,280 --> 00:03:02,080
It's relatively easy to manipulate.

63
00:03:02,080 --> 00:03:03,760
It's a ZMQ protocol.

64
00:03:03,760 --> 00:03:04,600
So why ZMQ?

65
00:03:04,600 --> 00:03:07,160
ZMQ is a library which is available in many languages

66
00:03:07,160 --> 00:03:08,840
that allows the front end you interact with

67
00:03:08,840 --> 00:03:11,240
to talk with the process that does computation.

68
00:03:12,440 --> 00:03:15,160
And the kernel can be local or remote,

69
00:03:15,160 --> 00:03:17,080
and the front ends can interact with the users,

70
00:03:17,080 --> 00:03:18,880
but sometimes not.

71
00:03:18,880 --> 00:03:21,400
And we have the default implementation.

72
00:03:21,400 --> 00:03:25,560
The default implementation is the one you usually know about.

73
00:03:25,560 --> 00:03:28,240
It means that we have many languages

74
00:03:28,240 --> 00:03:30,080
that are maintained by the community.

75
00:03:30,080 --> 00:03:31,920
You can run Scala, you can run Haskell,

76
00:03:31,920 --> 00:03:34,400
you can run Julia, Erlang, Ruby, whatever.

77
00:03:35,600 --> 00:03:37,360
But because Jupyter is written in Python,

78
00:03:37,360 --> 00:03:40,560
we're going to focus on IPython,

79
00:03:40,560 --> 00:03:44,520
which is one implementation that implements the Python language

80
00:03:44,520 --> 00:03:47,880
as one of the kernels that can run in Jupyter.

81
00:03:47,880 --> 00:03:50,840
But you can use Jupyter only with R if you wish to.

82
00:03:52,160 --> 00:03:54,240
And there are many front ends.

83
00:03:54,240 --> 00:03:57,080
You can see that you can hook Jupyter with VS code,

84
00:03:57,080 --> 00:04:00,640
with interact, with Atom, with a normal notebook.

85
00:04:00,640 --> 00:04:03,280
And we're going to mostly focus on one front end today

86
00:04:03,280 --> 00:04:05,680
that you may have heard it's called JupyterLab.

87
00:04:07,520 --> 00:04:09,920
We are going to do everything using Python 3.

88
00:04:09,920 --> 00:04:12,720
I remind some of you that Python 2 End of Life

89
00:04:12,720 --> 00:04:15,720
is supposed to be January 1st of next year.

90
00:04:15,720 --> 00:04:17,720
You can still use Python 2 after that,

91
00:04:18,560 --> 00:04:19,800
but the support is going to decrease really fast.

92
00:04:19,800 --> 00:04:21,480
It has already started to decrease really fast.

93
00:04:21,480 --> 00:04:24,720
So there is no problem if you want to use Python 2.

94
00:04:24,720 --> 00:04:27,680
You can still use Python 2 with Jupyter,

95
00:04:27,680 --> 00:04:29,720
with older version of the kernel.

96
00:04:29,720 --> 00:04:34,720
If you have any questions, you can come talk to me later.

97
00:04:35,440 --> 00:04:37,240
I'm going to do a quick FAQ.

98
00:04:37,240 --> 00:04:38,160
And at the end of the FAQ,

99
00:04:38,160 --> 00:04:39,320
or even if you have question now,

100
00:04:39,320 --> 00:04:40,240
be free to raise your hand

101
00:04:40,240 --> 00:04:42,200
and I want to answer your question now.

102
00:04:43,240 --> 00:04:46,160
So that you can be on peace of mind

103
00:04:46,880 --> 00:04:48,400
and focus on the tutorial after.

104
00:04:49,520 --> 00:04:51,520
How do I pay for hosted Jupyter?

105
00:04:51,520 --> 00:04:53,400
This is non-exhaustive, but you can Google

106
00:04:53,400 --> 00:04:54,520
and there are many companies

107
00:04:54,520 --> 00:04:56,360
that pay for hosted Jupyter online.

108
00:04:56,360 --> 00:04:57,840
So if you want to have a big server

109
00:04:57,840 --> 00:04:59,120
with thousands of machine,

110
00:05:00,160 --> 00:05:02,160
probably don't want to talk to the Jupyter team

111
00:05:02,160 --> 00:05:03,680
who are mostly volunteers and open source.

112
00:05:03,680 --> 00:05:05,160
Some of us know and can redirect you

113
00:05:05,160 --> 00:05:07,240
to how to pay for hosted.

114
00:05:08,080 --> 00:05:11,000
But you can find a lot of company doing that online.

115
00:05:12,320 --> 00:05:14,600
How do I run Jupyter at scale?

116
00:05:14,600 --> 00:05:17,080
If you came here to know how to deploy Jupyter

117
00:05:17,080 --> 00:05:20,320
for your lab or your company,

118
00:05:20,320 --> 00:05:23,200
we're not going to talk about that too much.

119
00:05:23,200 --> 00:05:25,280
You want to Google about Jupyter Hub.

120
00:05:25,280 --> 00:05:27,600
As soon as you have more than one user,

121
00:05:27,600 --> 00:05:29,600
you probably want to run Jupyter Hub.

122
00:05:29,600 --> 00:05:31,840
Jupyter Hub is one way of dispatching user

123
00:05:31,840 --> 00:05:34,720
to their own servers and do things at scale on Kubernetes

124
00:05:34,720 --> 00:05:36,360
if you know what Kubernetes is

125
00:05:36,360 --> 00:05:39,400
or on raw hardware if you want to use raw hardware.

126
00:05:40,640 --> 00:05:41,720
Those are two links.

127
00:05:41,720 --> 00:05:44,040
All of that will be online, don't worry.

128
00:05:44,840 --> 00:05:47,360
Tell you how to deploy Jupyter, Jupyter Hub.

129
00:05:47,360 --> 00:05:49,880
So that one is the core documentation,

130
00:05:49,880 --> 00:05:52,680
but if you want to just do things to copy and paste

131
00:05:52,680 --> 00:05:56,120
and get a server for 20 people, that would be this one.

132
00:05:58,240 --> 00:06:01,520
After that, there's a lot of customization possible.

133
00:06:02,880 --> 00:06:04,720
How do I share static notebook?

134
00:06:04,720 --> 00:06:05,880
You will do notebooks.

135
00:06:05,880 --> 00:06:09,400
You might want to have some of your colleagues or friends

136
00:06:11,000 --> 00:06:13,120
to view those notebooks

137
00:06:13,200 --> 00:06:15,880
without when they don't have Jupyter installed.

138
00:06:15,880 --> 00:06:19,840
For that, you might want to use nbviewer at nbviewer.org.

139
00:06:19,840 --> 00:06:22,480
What happens is you give it a URL to a public notebook.

140
00:06:22,480 --> 00:06:26,560
We don't do integration, we don't do authentication.

141
00:06:26,560 --> 00:06:30,080
So as long as a notebook JSON file is public,

142
00:06:30,080 --> 00:06:33,320
you pass the URL here and it will convert it to HTML

143
00:06:33,320 --> 00:06:35,200
on the fly for the person.

144
00:06:35,200 --> 00:06:38,480
It's static, so it means that they can't interact with it.

145
00:06:38,480 --> 00:06:39,600
It's automatically updated.

146
00:06:39,600 --> 00:06:40,960
It looks at the latest Git.

147
00:06:41,000 --> 00:06:43,440
Usually this work doesn't work only with GitHub,

148
00:06:43,440 --> 00:06:45,160
but it's mostly work with GitHub.

149
00:06:45,160 --> 00:06:47,400
It looks at whether the commit hash has changed

150
00:06:47,400 --> 00:06:50,040
and if the commit hash has changed, it will be rendered.

151
00:06:50,040 --> 00:06:52,720
It means that you just have to push on GitHub

152
00:06:52,720 --> 00:06:55,520
and the notebook will be refreshed.

153
00:06:55,520 --> 00:06:58,040
So it's a nice way of sharing it.

154
00:06:58,040 --> 00:07:00,200
And we just got one new Jupyter developer

155
00:07:00,200 --> 00:07:03,920
that arrived in the back, Matt from Netflix.

156
00:07:03,920 --> 00:07:06,720
Say hi, Matt, thank you for being here that early today.

157
00:07:07,640 --> 00:07:09,680
So Matt is working on mostly the things

158
00:07:09,680 --> 00:07:13,000
that powers NB viewer in the back,

159
00:07:13,000 --> 00:07:14,680
NB convert and paper mill.

160
00:07:14,680 --> 00:07:16,480
That is a nice project from Netflix.

161
00:07:20,240 --> 00:07:22,200
If you want to share a live notebook,

162
00:07:22,200 --> 00:07:23,560
like you want someone to interact,

163
00:07:23,560 --> 00:07:27,640
you have a data set that you've explored,

164
00:07:27,640 --> 00:07:29,320
but there are thousands of images

165
00:07:29,320 --> 00:07:32,840
and you don't want to print a thousand page report

166
00:07:32,840 --> 00:07:35,040
for your boss or your colleague.

167
00:07:36,040 --> 00:07:38,120
Or you have a paper that you've published

168
00:07:38,120 --> 00:07:41,920
and you only show some data sets in your supplementary,

169
00:07:41,920 --> 00:07:44,760
but you want people to interact with other data sets.

170
00:07:44,760 --> 00:07:46,880
You want to go to mindbinder.org.

171
00:07:46,880 --> 00:07:49,080
Slightly more complicated than NB viewer.

172
00:07:49,080 --> 00:07:50,520
It doesn't take a single notebook.

173
00:07:50,520 --> 00:07:52,640
It tells the full GitHub repository.

174
00:07:53,640 --> 00:07:55,800
And what it does, it will try to analyze dependency.

175
00:07:55,800 --> 00:07:58,960
If you do the right file, it will create for you on the fly

176
00:07:58,960 --> 00:08:01,840
a Docker image in the cloud, which is there for two hours

177
00:08:01,840 --> 00:08:04,320
and you will be able to interact with that.

178
00:08:04,320 --> 00:08:05,640
So if you have some notebook

179
00:08:05,640 --> 00:08:06,920
and you want people to be able to see

180
00:08:06,920 --> 00:08:09,880
how some parameters change, how the plot look like,

181
00:08:09,880 --> 00:08:11,680
or which data set to look,

182
00:08:11,680 --> 00:08:13,400
you might want to look at mindbinder.org.

183
00:08:13,400 --> 00:08:17,160
It's hosted so far by the Jupyter project

184
00:08:17,160 --> 00:08:20,240
from front from UC Berkeley.

185
00:08:20,240 --> 00:08:23,960
So there are some limitation on how much compute you can do.

186
00:08:23,960 --> 00:08:25,720
So please don't mind Bitcoin.

187
00:08:27,400 --> 00:08:30,640
And if some of you don't manage

188
00:08:30,640 --> 00:08:32,280
to install the tutorial material,

189
00:08:32,280 --> 00:08:36,360
you can use binder to try the tutorial.

190
00:08:36,360 --> 00:08:40,640
Or if you're on YouTube or whatever video system

191
00:08:40,640 --> 00:08:42,480
is being used to record me right now.

192
00:08:44,160 --> 00:08:46,800
Which language are supported?

193
00:08:46,800 --> 00:08:48,840
We said that there is only Python

194
00:08:48,840 --> 00:08:50,640
that we're going to see today.

195
00:08:50,640 --> 00:08:52,760
There is a Wiki if you develop your own kernel

196
00:08:52,760 --> 00:08:54,080
for your own language.

197
00:08:55,400 --> 00:08:58,640
Some people have liked to invent languages.

198
00:08:58,640 --> 00:09:00,760
You can go there and add your own kernel.

199
00:09:00,760 --> 00:09:02,640
It's mostly community maintained.

200
00:09:02,640 --> 00:09:05,680
You go on the Jupyter Wiki

201
00:09:05,680 --> 00:09:07,520
and you look at Fortran,

202
00:09:07,520 --> 00:09:09,480
where is the documentation for Fortran

203
00:09:09,480 --> 00:09:12,080
and you can install the Fortran kernel.

204
00:09:14,040 --> 00:09:16,080
One of the question that we often have

205
00:09:16,080 --> 00:09:17,600
is starting to get better is,

206
00:09:17,600 --> 00:09:19,640
what is the difference between Jupyter Notebook

207
00:09:19,640 --> 00:09:20,760
and Jupyter Lab?

208
00:09:20,760 --> 00:09:24,160
We're mostly going to talk about the Jupyter Lab today.

209
00:09:24,160 --> 00:09:27,680
Jupyter Lab is a new front-end that we rewrote from scratch

210
00:09:27,680 --> 00:09:29,400
starting two or three years ago.

211
00:09:30,280 --> 00:09:31,600
Because we were Python developers

212
00:09:31,600 --> 00:09:34,280
and we started to write JavaScript for the main notebook.

213
00:09:34,560 --> 00:09:37,480
The main notebook still exists, can still run.

214
00:09:37,480 --> 00:09:39,120
Usually when you use a main notebook,

215
00:09:39,120 --> 00:09:41,640
you can only have one notebook on the page.

216
00:09:41,640 --> 00:09:45,120
And Jupyter Lab is better software engineering.

217
00:09:45,120 --> 00:09:46,680
You can have several notebook on the page.

218
00:09:46,680 --> 00:09:47,680
You can have text editor.

219
00:09:47,680 --> 00:09:50,200
You can have a terminal.

220
00:09:50,200 --> 00:09:52,560
Why do you want to use one or the other?

221
00:09:52,560 --> 00:09:54,720
It's more like Vim versus Emacs,

222
00:09:54,720 --> 00:09:56,840
so left of the room versus right of the room.

223
00:09:57,720 --> 00:09:59,720
GIF versus GIF.

224
00:09:59,720 --> 00:10:01,120
It doesn't really matter.

225
00:10:01,120 --> 00:10:02,920
You can work with each other.

226
00:10:02,920 --> 00:10:04,080
You should be friends.

227
00:10:05,000 --> 00:10:06,760
They read exactly the same file format.

228
00:10:06,760 --> 00:10:08,440
So if you have a file in Jupyter Lab,

229
00:10:08,440 --> 00:10:09,680
it will work in classic notebook.

230
00:10:09,680 --> 00:10:11,720
If you have a file in classic notebook,

231
00:10:11,720 --> 00:10:13,480
it will work with Jupyter Lab.

232
00:10:13,480 --> 00:10:16,120
They can connect to the same kernel.

233
00:10:16,120 --> 00:10:17,440
There is only some extensions

234
00:10:17,440 --> 00:10:19,560
that exist for one and not the other.

235
00:10:19,560 --> 00:10:22,400
And the classic notebooks that you may have seen

236
00:10:22,400 --> 00:10:24,400
when you do Jupyter Notebook on the terminal

237
00:10:24,400 --> 00:10:26,800
will probably go away someday.

238
00:10:26,800 --> 00:10:29,680
So it's slowly being sunset.

239
00:10:29,680 --> 00:10:31,240
And Jupyter Lab should be in version 1.0

240
00:10:31,280 --> 00:10:32,120
or relatively soon.

241
00:10:32,120 --> 00:10:35,280
We're going to use something which is slightly before 1.0.

242
00:10:35,280 --> 00:10:37,440
So if you see bugs or think that I know you,

243
00:10:38,280 --> 00:10:39,600
you can still give us feedback.

244
00:10:39,600 --> 00:10:40,960
Say, this doesn't make sense.

245
00:10:40,960 --> 00:10:43,080
It would be nice to change it before 1.0.

246
00:10:45,440 --> 00:10:50,440
How do you get help once you are out of the tutorial?

247
00:10:51,120 --> 00:10:54,720
I would suggest you go to Jupyter.org slash community.

248
00:10:54,720 --> 00:10:55,880
There are a lot of channel,

249
00:10:55,880 --> 00:10:59,040
and I would suggest for you to join the discourse.

250
00:10:59,920 --> 00:11:02,880
You can log in with GitHub or with Google

251
00:11:02,880 --> 00:11:04,280
if you deactivate ad block,

252
00:11:04,280 --> 00:11:07,000
because ad block tend to remove the things that tells you

253
00:11:07,000 --> 00:11:10,000
you can log in with GitHub or GitLab

254
00:11:12,360 --> 00:11:15,480
or any other provider.

255
00:11:15,480 --> 00:11:17,160
And of course, if you're in the room here,

256
00:11:17,160 --> 00:11:19,240
you put your red sticky note or you raise your hand

257
00:11:19,240 --> 00:11:21,320
and we're going to help you.

258
00:11:21,320 --> 00:11:23,680
And so that's the slide about the sticky notes.

259
00:11:23,680 --> 00:11:25,520
I already told you a bit how it works.

260
00:11:26,680 --> 00:11:28,720
So when everything is good,

261
00:11:28,720 --> 00:11:30,040
when you think I can go faster,

262
00:11:30,040 --> 00:11:31,680
you put a green sticky note,

263
00:11:31,680 --> 00:11:34,600
and don't forget to put a task to remind you

264
00:11:34,600 --> 00:11:35,760
to remove your sticky note.

265
00:11:35,760 --> 00:11:37,640
Sorry, people forget to have the green sticky note.

266
00:11:37,640 --> 00:11:38,760
I think everything is fine,

267
00:11:38,760 --> 00:11:41,360
and I just go faster and faster and faster,

268
00:11:41,360 --> 00:11:45,240
and you will get lost.

269
00:11:45,240 --> 00:11:48,480
And as soon as something is wrong,

270
00:11:48,480 --> 00:11:50,280
you put a red sticky note app,

271
00:11:50,280 --> 00:11:51,960
and some of the helper will come

272
00:11:51,960 --> 00:11:53,200
and try to help you to install,

273
00:11:53,200 --> 00:11:55,560
or I will stop and ask questions.

274
00:11:55,680 --> 00:11:59,120
You can think that as a try-except in your brain,

275
00:11:59,120 --> 00:12:00,560
and as soon as there is an exception,

276
00:12:00,560 --> 00:12:02,160
you put the red sticky note,

277
00:12:02,160 --> 00:12:04,000
and I will slow down.

278
00:12:07,400 --> 00:12:10,720
Do you have any questions so far?

279
00:12:10,720 --> 00:12:13,240
Does everybody has everything installed?

280
00:12:14,880 --> 00:12:16,680
Feel free to interrupt me during the tutorial.

281
00:12:16,680 --> 00:12:19,320
Ask me to rephrase if I have a question,

282
00:12:19,320 --> 00:12:20,760
or if I forget to do something.

283
00:12:20,760 --> 00:12:24,280
I know I can have a really strong French accent sometime.

284
00:12:25,960 --> 00:12:28,840
So if you don't understand, it's because of me.

285
00:12:28,840 --> 00:12:33,320
And so again, the install instructions are here.

286
00:12:33,320 --> 00:12:35,480
PyCon 2019 branch, it should be the default one,

287
00:12:35,480 --> 00:12:36,720
so you shouldn't have to do anything,

288
00:12:36,720 --> 00:12:38,800
but just in case, I've put it here.

289
00:12:38,800 --> 00:12:43,800
And once everyone is ready, we can go to the tutorial.

290
00:12:44,640 --> 00:12:46,640
So I don't see any red stickies.

291
00:12:49,080 --> 00:12:52,640
So we have about one hour before getting food.

292
00:12:53,640 --> 00:12:54,480
Okay.

293
00:13:01,040 --> 00:13:03,160
Is that big enough for people in the back?

294
00:13:03,160 --> 00:13:06,280
No, it's not big enough for people in the back.

295
00:13:06,280 --> 00:13:07,880
Say I want something bigger.

296
00:13:08,880 --> 00:13:09,720
More?

297
00:13:17,840 --> 00:13:18,680
Okay.

298
00:13:21,000 --> 00:13:21,840
Yeah, I want me to...

299
00:13:21,840 --> 00:13:24,480
Change your operating system too.

300
00:13:24,480 --> 00:13:26,400
So some people want me to change PS1,

301
00:13:26,400 --> 00:13:27,520
so what is written before,

302
00:13:27,520 --> 00:13:29,320
and others want me to change my OS.

303
00:13:31,680 --> 00:13:33,520
Yeah, I would prefer to change my keyboard,

304
00:13:33,520 --> 00:13:36,620
who is starting to have keys that type two times,

305
00:13:36,620 --> 00:13:37,760
and keys that don't type.

306
00:13:37,760 --> 00:13:39,400
You probably have heard of that.

307
00:13:39,400 --> 00:13:40,640
So I'm going to do a lot of typo.

308
00:13:40,640 --> 00:13:42,280
It's definitely not because I'm not awake,

309
00:13:42,280 --> 00:13:43,720
it's because of my keyboard.

310
00:13:44,720 --> 00:13:47,960
So here we are in where you should have probably

311
00:13:47,960 --> 00:13:52,600
gotten your material from GitHub.

312
00:13:53,800 --> 00:13:56,120
You see here that I'm on the PyCon 2019 branch

313
00:13:56,120 --> 00:14:00,480
because I have my terminal set up this way.

314
00:14:00,480 --> 00:14:01,720
And you see that nothing have changed

315
00:14:01,720 --> 00:14:02,840
because I have the green check mark.

316
00:14:02,840 --> 00:14:04,120
You might not have that.

317
00:14:04,120 --> 00:14:05,840
And so the first thing we want to do,

318
00:14:05,840 --> 00:14:07,240
and not forget to do that,

319
00:14:07,240 --> 00:14:10,280
is kind of activate PyCon 2019

320
00:14:10,280 --> 00:14:13,820
to be in the environment I should have had you create.

321
00:14:14,880 --> 00:14:16,560
And so now I'm in PyCon 2019,

322
00:14:16,560 --> 00:14:18,200
and I don't have much space,

323
00:14:18,200 --> 00:14:20,600
but we're just going to start with one thing,

324
00:14:20,600 --> 00:14:25,600
which is to press Jupyter, then space, and lab.

325
00:14:26,120 --> 00:14:30,000
If you have any questions, you can do dash dash help,

326
00:14:30,000 --> 00:14:33,360
or it's a little normal command line, you can run things.

327
00:14:33,360 --> 00:14:34,720
And once you do that,

328
00:14:34,720 --> 00:14:38,640
it should hopefully start Jupyter lab,

329
00:14:38,640 --> 00:14:41,280
which is kind of like Jupyter Notebook,

330
00:14:41,280 --> 00:14:44,000
and open your web browser at a specific URL.

331
00:14:44,760 --> 00:14:49,760
One thing I would suggest you do later after the tutorial,

332
00:14:50,720 --> 00:14:53,920
if you want to use it on your machine,

333
00:14:53,920 --> 00:14:56,520
is to look at the documentation

334
00:14:56,520 --> 00:14:58,920
on how to set up a password.

335
00:15:00,280 --> 00:15:03,160
Because this is running a server on your machine.

336
00:15:03,160 --> 00:15:06,440
Normally people cannot access it from the outside,

337
00:15:06,440 --> 00:15:08,480
but other processes on your machine

338
00:15:08,480 --> 00:15:11,520
may try to access Jupyter unless you set a password.

339
00:15:11,520 --> 00:15:14,080
There is an automatic token that is set up,

340
00:15:14,080 --> 00:15:16,760
and so on and so forth, so this should be secure.

341
00:15:16,760 --> 00:15:18,560
But better safe than sorry, look online,

342
00:15:18,560 --> 00:15:21,560
look on how to set up a password with Jupyter.

343
00:15:21,560 --> 00:15:24,040
And now you should be prompted by your password

344
00:15:24,040 --> 00:15:25,480
the first time you log in.

345
00:15:27,280 --> 00:15:29,880
So here we will have the Jupyter lab interface.

346
00:15:29,880 --> 00:15:32,940
We're going to see exactly what is a Jupyter lab interface,

347
00:15:32,940 --> 00:15:35,400
and how it works later in the tutorial.

348
00:15:35,400 --> 00:15:39,040
We're just going to focus on some of the Python first,

349
00:15:39,040 --> 00:15:41,880
because playing with buttons is not too interesting

350
00:15:41,880 --> 00:15:43,600
at the beginning of a tutorial.

351
00:15:43,600 --> 00:15:45,320
You can see that there is a bug already here,

352
00:15:45,320 --> 00:15:47,240
that's weird, there is no icon here.

353
00:15:48,080 --> 00:15:49,520
I don't know why.

354
00:15:49,520 --> 00:15:51,120
Let me try to force refresh.

355
00:15:52,740 --> 00:15:54,760
Okay, so that needs to be filled somewhere,

356
00:15:54,760 --> 00:15:57,720
and figure out why, probably because I'm zooming.

357
00:15:57,720 --> 00:15:59,400
So here you have a file browser

358
00:15:59,400 --> 00:16:02,120
that you can expand and collapse using this

359
00:16:02,120 --> 00:16:05,160
if you want to have more space in your screen.

360
00:16:05,160 --> 00:16:08,480
You'll see that I have relatively few real estate

361
00:16:08,560 --> 00:16:10,000
on my screen, so I will do things

362
00:16:10,000 --> 00:16:12,080
slightly different than you.

363
00:16:12,080 --> 00:16:13,840
But you should be able to have more space

364
00:16:13,840 --> 00:16:15,800
and see more clearly what is happening.

365
00:16:16,920 --> 00:16:21,000
You see that you have a menu at the top.

366
00:16:21,000 --> 00:16:23,080
Here I'm full screen, so I remove the,

367
00:16:23,080 --> 00:16:25,220
actually in a web browser.

368
00:16:25,220 --> 00:16:27,000
So most of, some of your short cut here

369
00:16:27,000 --> 00:16:28,880
you might be used to, like go to the next tab

370
00:16:28,880 --> 00:16:31,600
of previous type, might be slightly different.

371
00:16:31,600 --> 00:16:33,160
So if you're confused of what's happening

372
00:16:33,160 --> 00:16:34,760
when you are a big keyboard user,

373
00:16:34,760 --> 00:16:37,080
that's because you have two level of interaction.

374
00:16:37,080 --> 00:16:39,080
You have the interaction with your browser windows,

375
00:16:39,080 --> 00:16:41,600
and the interaction with the JupyterLab.

376
00:16:41,600 --> 00:16:44,040
And so what we're going to do is,

377
00:16:44,040 --> 00:16:46,280
well first look at that, you will see that

378
00:16:46,280 --> 00:16:49,720
we always have first the notebook, the folders,

379
00:16:49,720 --> 00:16:52,040
and directories of where you are.

380
00:16:52,040 --> 00:16:55,240
Then we have this small orange icon on notebooks,

381
00:16:55,240 --> 00:16:57,240
and then we have other kinds of file.

382
00:16:57,240 --> 00:17:01,360
And so when we sort by name or by last modify,

383
00:17:01,360 --> 00:17:03,720
you see that it's actually three groups.

384
00:17:03,720 --> 00:17:06,560
You have the folders on top, you have the notebooks after,

385
00:17:06,560 --> 00:17:09,520
and you have the other files after.

386
00:17:09,520 --> 00:17:10,840
So don't be confused if you think,

387
00:17:10,840 --> 00:17:12,920
well no, it's not sorted by name,

388
00:17:12,920 --> 00:17:16,160
it's because the folders themselves are sorted by name,

389
00:17:16,160 --> 00:17:19,200
or by last modified, and it's a transfer, and so forth.

390
00:17:20,200 --> 00:17:22,400
And we're going to just start with going with

391
00:17:22,400 --> 00:17:25,120
notebook number one, and double click on it,

392
00:17:25,120 --> 00:17:27,480
and it should open a new panel like that.

393
00:17:27,480 --> 00:17:29,720
And now I'm going to collapse that

394
00:17:29,720 --> 00:17:34,040
just to have a bigger real estate.

395
00:17:35,040 --> 00:17:39,000
And now we're going to directly interact with our notebook

396
00:17:39,000 --> 00:17:40,400
using the JupyterLab interface,

397
00:17:40,400 --> 00:17:42,800
which is quite similar to the normal notebook interface

398
00:17:42,800 --> 00:17:44,920
with some differences if you use normal notebook,

399
00:17:44,920 --> 00:17:47,320
or if you want to use normal notebook after.

400
00:17:48,280 --> 00:17:52,320
You'll see that we have many cells,

401
00:17:52,320 --> 00:17:54,560
so it's sometimes hard to figure out where the cells are.

402
00:17:54,560 --> 00:17:57,440
You can see that you have the indicator here

403
00:17:57,440 --> 00:17:59,040
of which cells I'm currently selecting,

404
00:17:59,040 --> 00:18:01,040
which is this blue line, and you can see that

405
00:18:01,040 --> 00:18:05,760
I can move it up and down with my keyboard when it works,

406
00:18:05,760 --> 00:18:06,960
or click with the mouse.

407
00:18:08,120 --> 00:18:11,360
And you will see that usually we have a model interface,

408
00:18:11,360 --> 00:18:14,680
which means that you can either be in a mode

409
00:18:14,680 --> 00:18:17,280
where you are going to manipulate cells themselves

410
00:18:17,280 --> 00:18:20,320
in a notebook, so a cell is a chunk of text or code,

411
00:18:20,320 --> 00:18:22,920
or you can be in a mode if I press enter,

412
00:18:22,920 --> 00:18:24,320
where I edit the cell.

413
00:18:25,640 --> 00:18:27,160
So that might be one of the tricky things

414
00:18:27,160 --> 00:18:29,920
where you might get lost, is that if you are in a mode

415
00:18:29,920 --> 00:18:32,560
where you are manipulating cells themselves

416
00:18:32,560 --> 00:18:34,680
and try to type, it won't edit the cell,

417
00:18:34,680 --> 00:18:36,720
it won't write things in the cells.

418
00:18:36,720 --> 00:18:38,880
It will basically just do things with the cell.

419
00:18:38,880 --> 00:18:40,800
Like for example, if I press D twice,

420
00:18:40,800 --> 00:18:42,000
it will delete the cell.

421
00:18:43,200 --> 00:18:45,280
So that's something to keep in mind.

422
00:18:45,280 --> 00:18:47,800
But usually the keyboard shortcut you will use

423
00:18:47,800 --> 00:18:51,440
most of the time is shift enter.

424
00:18:51,440 --> 00:18:54,080
So you press shift and you press enter,

425
00:18:54,080 --> 00:18:56,040
and what it will do, it will execute

426
00:18:56,040 --> 00:18:57,480
or render the current cell.

427
00:18:58,320 --> 00:19:01,280
So if it's some markdown, it will just display it.

428
00:19:01,280 --> 00:19:03,480
If it's some code, it will send it to the kernel,

429
00:19:03,480 --> 00:19:06,040
execute the things and show the result back.

430
00:19:06,040 --> 00:19:07,680
So usually when you want to go through a notebook,

431
00:19:07,680 --> 00:19:10,560
you press shift enter many times to go down.

432
00:19:10,560 --> 00:19:13,240
Some useful things when you're prototyping,

433
00:19:13,240 --> 00:19:15,600
there is also alt enter that executes

434
00:19:15,600 --> 00:19:17,160
and insert a cell below.

435
00:19:18,120 --> 00:19:19,720
If you have some long code and you want to add

436
00:19:19,720 --> 00:19:22,680
some debug statements, and control enter to just rerun

437
00:19:22,680 --> 00:19:24,640
the same thing again and again and again and again,

438
00:19:24,640 --> 00:19:27,280
so you don't have to do shift enter up, shift enter up.

439
00:19:28,360 --> 00:19:33,360
So we'll see that, but first let's do some Python first.

440
00:19:33,960 --> 00:19:35,880
So here you have the first cell that's a print high.

441
00:19:35,880 --> 00:19:38,840
I'm going to assume all of you know what that does in Python.

442
00:19:38,840 --> 00:19:42,200
And if I print shift enter, it will just say hi.

443
00:19:42,200 --> 00:19:46,240
And now I can go up and modify my code,

444
00:19:46,240 --> 00:19:48,120
everyone, and press shift enter,

445
00:19:48,120 --> 00:19:50,560
and it says hi everyone.

446
00:19:50,560 --> 00:19:53,720
And you see that I have this number in front here.

447
00:19:53,720 --> 00:19:57,160
In normal notebook you would see in two,

448
00:19:57,920 --> 00:20:00,680
and that means that it's the second statement

449
00:20:00,680 --> 00:20:02,960
I have executed in my current session.

450
00:20:02,960 --> 00:20:05,120
Because of document I'm editing,

451
00:20:05,120 --> 00:20:09,080
and the process that is running in the back are different,

452
00:20:09,080 --> 00:20:10,600
I can restart the process without having

453
00:20:10,600 --> 00:20:11,800
to destroy my documents.

454
00:20:12,800 --> 00:20:15,480
And so now we're going to that normal Python,

455
00:20:15,480 --> 00:20:18,760
but IPython itself, because we have IPython in the back,

456
00:20:18,760 --> 00:20:20,360
who is just executing Python,

457
00:20:20,360 --> 00:20:23,400
can do more things than pure Python can do.

458
00:20:23,400 --> 00:20:26,160
And we are mostly targeted to all having interactive stuff

459
00:20:26,160 --> 00:20:30,280
and making you interactive data analysis more efficient.

460
00:20:30,280 --> 00:20:32,040
And so the first thing you should be really happy about

461
00:20:32,040 --> 00:20:35,360
is a question mark operator that allow you to get help

462
00:20:35,360 --> 00:20:37,000
on a large number of things,

463
00:20:37,000 --> 00:20:39,560
and we try to pull more help information

464
00:20:39,560 --> 00:20:41,960
than what pure Python does with a help function.

465
00:20:43,120 --> 00:20:45,160
And so if you just want global help because you're lost

466
00:20:45,160 --> 00:20:46,680
and you don't know how to do things,

467
00:20:46,680 --> 00:20:49,840
question mark will give you a quick summary

468
00:20:49,840 --> 00:20:51,720
of what you can do in IPython.

469
00:20:51,720 --> 00:20:54,560
So this is question mark itself,

470
00:20:54,960 --> 00:20:58,000
introduction overview of IPython features.

471
00:20:58,000 --> 00:21:00,960
If you want some information about an object, any object,

472
00:21:00,960 --> 00:21:04,000
you can use object question mark and then shift enter,

473
00:21:04,000 --> 00:21:06,440
or question mark object and then shift enter.

474
00:21:06,440 --> 00:21:08,720
If you want more detailed information,

475
00:21:08,720 --> 00:21:11,240
you can use two question mark, we'll do that later.

476
00:21:12,160 --> 00:21:14,120
You also have present quick ref,

477
00:21:14,120 --> 00:21:18,800
and you can also call a pure Python help system.

478
00:21:21,120 --> 00:21:24,240
This is quite long, so I'm not going to do that now,

479
00:21:24,240 --> 00:21:25,880
and I'm going to just collapse this cell

480
00:21:25,880 --> 00:21:29,320
by pressing the green, the blue button here on the side,

481
00:21:29,320 --> 00:21:30,160
which is green.

482
00:21:31,000 --> 00:21:34,040
We'll see more about the interface of our JupyterLab later.

483
00:21:35,440 --> 00:21:39,080
And so now we're going to see how to get help on objects.

484
00:21:39,080 --> 00:21:42,240
We're going to use, to look at the collection module.

485
00:21:42,240 --> 00:21:43,400
We are going to import it

486
00:21:43,400 --> 00:21:46,720
and look at collection name tuple, question mark.

487
00:21:46,720 --> 00:21:48,560
Name tuple is a nice, really nice thing.

488
00:21:48,560 --> 00:21:51,120
It's like a tuple, except you can give name

489
00:21:51,120 --> 00:21:53,560
to each of the elements.

490
00:21:53,560 --> 00:21:56,720
And you see that we're going to pull the signature

491
00:21:56,720 --> 00:22:00,400
from the Python, the Python documentation.

492
00:22:00,400 --> 00:22:04,440
So it gives you the positional arguments,

493
00:22:04,440 --> 00:22:06,080
the keywords arguments.

494
00:22:06,080 --> 00:22:08,680
So this means that, the star here means

495
00:22:08,680 --> 00:22:13,680
that those arguments are keyword arguments only.

496
00:22:13,840 --> 00:22:15,320
Then it pulls a docstring,

497
00:22:15,320 --> 00:22:19,180
it tries to find where this file is defined.

498
00:22:19,180 --> 00:22:21,440
So you know that if you have different version

499
00:22:21,440 --> 00:22:24,280
of Numpy installed or different version of Python installed,

500
00:22:27,360 --> 00:22:29,760
you can figure out that it's the right one

501
00:22:31,320 --> 00:22:32,560
and that it's a function.

502
00:22:34,280 --> 00:22:37,440
Let's call up that as well, but you don't have to.

503
00:22:37,440 --> 00:22:39,420
And if you want more information,

504
00:22:39,420 --> 00:22:42,520
well, you're going to put two question mark.

505
00:22:42,520 --> 00:22:45,260
And what you should get is not only everything

506
00:22:45,260 --> 00:22:47,920
you got before, but you should get the full source.

507
00:22:47,920 --> 00:22:51,160
So if you ever wonder how a function was defined,

508
00:22:51,880 --> 00:22:53,560
instead of going through the source of the library

509
00:22:53,560 --> 00:22:58,400
and searching through it, you can actually directly see

510
00:22:58,400 --> 00:23:01,000
how it has been written, which is really useful

511
00:23:01,000 --> 00:23:03,640
when you do science, you want to figure out

512
00:23:03,640 --> 00:23:07,840
how things are done to understand correctly

513
00:23:07,840 --> 00:23:09,200
if there is a bug or not.

514
00:23:10,360 --> 00:23:12,520
It does some other fancy stuff.

515
00:23:12,520 --> 00:23:16,400
It will try to find if there are subclasses at the bottom.

516
00:23:16,400 --> 00:23:17,680
Here there is no subclasses.

517
00:23:17,680 --> 00:23:19,840
So if you want something more specific,

518
00:23:20,680 --> 00:23:22,640
in something like Matplotlib, it will say,

519
00:23:22,640 --> 00:23:25,160
well, here you have an artist,

520
00:23:25,160 --> 00:23:26,760
but you also have an artist which are,

521
00:23:26,760 --> 00:23:29,200
you have the circle artist or you have the ellipse artist

522
00:23:29,200 --> 00:23:30,920
or you have the square artist.

523
00:23:30,920 --> 00:23:34,880
And so you can drill down into more specific things.

524
00:23:38,520 --> 00:23:43,160
Another useful things, let me re-scroll up, sorry,

525
00:23:43,160 --> 00:23:46,840
is you know that there is some function somewhere

526
00:23:46,840 --> 00:23:48,880
where have that name somewhere in it,

527
00:23:48,880 --> 00:23:51,880
but you don't exactly remember how it's called.

528
00:23:51,880 --> 00:23:54,480
You can use wildcard with a question mark

529
00:23:54,480 --> 00:23:56,920
and it will try to recurse your own namespace

530
00:23:56,920 --> 00:23:59,760
and find something that match this pattern.

531
00:23:59,760 --> 00:24:01,760
So I know that there is something I want to use

532
00:24:01,760 --> 00:24:04,680
that have int in it, where I have the ability

533
00:24:04,680 --> 00:24:07,720
to get either a floating point error or is it break point

534
00:24:07,720 --> 00:24:09,520
or is it int or is it print.

535
00:24:10,480 --> 00:24:12,560
So then you can search in things

536
00:24:12,560 --> 00:24:15,320
when you don't really remember what you want to use

537
00:24:15,320 --> 00:24:19,920
because you only use it once in a while.

538
00:24:21,960 --> 00:24:23,720
There is also the quick reference

539
00:24:24,680 --> 00:24:27,720
that is slightly more compact than what we've seen before

540
00:24:27,720 --> 00:24:29,320
with just question mark.

541
00:24:30,240 --> 00:24:31,560
So it will tell you, well, yeah,

542
00:24:31,560 --> 00:24:35,240
you can search for everything that have ABC

543
00:24:35,240 --> 00:24:37,440
in the full namespace.

544
00:24:37,440 --> 00:24:40,160
You will have many of IPython specific syntax

545
00:24:40,160 --> 00:24:43,000
that starts a line with a single percent or two percent.

546
00:24:43,000 --> 00:24:44,120
We'll see that later.

547
00:24:45,120 --> 00:24:49,120
And you have a number of reminders of things

548
00:24:50,080 --> 00:24:52,160
you can do.

549
00:24:52,160 --> 00:24:56,520
We'll go through all of that in this notebook.

550
00:24:59,920 --> 00:25:04,320
As any other idea, we provide tab completion.

551
00:25:04,320 --> 00:25:06,480
So if you have some code and you want to figure out

552
00:25:06,480 --> 00:25:09,040
what you can write after, you can press tab.

553
00:25:09,040 --> 00:25:11,920
As Fernando Perez, the creator of IPython said,

554
00:25:11,920 --> 00:25:13,560
we weaponize the tab key.

555
00:25:13,560 --> 00:25:15,720
Tab key does a lot of things.

556
00:25:15,720 --> 00:25:17,800
So we've imported the collection module.

557
00:25:17,800 --> 00:25:20,520
We can press tab and it will tell you

558
00:25:20,520 --> 00:25:24,080
what you can complete with that.

559
00:25:24,080 --> 00:25:25,880
This is a really nice example because here you see

560
00:25:25,880 --> 00:25:28,120
that only ABC has an M in front.

561
00:25:28,120 --> 00:25:30,560
I'm going to just dismiss that and repress it.

562
00:25:31,520 --> 00:25:33,360
It had time to compute more information

563
00:25:33,360 --> 00:25:35,520
and now it shows me more information.

564
00:25:36,520 --> 00:25:38,600
And it shows me that I can complete to ABC,

565
00:25:38,600 --> 00:25:41,640
to chain map, to default DQ, et cetera.

566
00:25:41,640 --> 00:25:44,520
And it gives me the type of each of those things.

567
00:25:44,520 --> 00:25:48,960
So unlike many IDE computers, this is not statically inferred.

568
00:25:48,960 --> 00:25:51,840
This is actually inspecting live objects,

569
00:25:51,840 --> 00:25:54,320
which means that if you don't, if you have an API

570
00:25:54,320 --> 00:25:56,240
that written on a different kind of object,

571
00:25:56,240 --> 00:25:59,040
once the object is in the namespace,

572
00:25:59,040 --> 00:26:00,280
you can tab complete on that.

573
00:26:00,280 --> 00:26:02,080
And it will also tab complete everything

574
00:26:04,800 --> 00:26:05,920
that you have defined.

575
00:26:07,000 --> 00:26:10,480
So here, let's say I want to look at DQ

576
00:26:10,640 --> 00:26:13,480
and can go down to DQ and press enter to get that.

577
00:26:13,480 --> 00:26:15,200
And now we're going to see the second thing

578
00:26:15,200 --> 00:26:16,800
that tab can be used for.

579
00:26:16,800 --> 00:26:19,160
I'm going to open parentheses

580
00:26:19,160 --> 00:26:22,120
and I'm going to press shift tab instead of tab.

581
00:26:22,120 --> 00:26:24,680
And it's going to give me a quick help.

582
00:26:24,680 --> 00:26:27,560
So if you don't remember the signature of a function,

583
00:26:27,560 --> 00:26:29,880
you can press shift tab and it will show you

584
00:26:29,880 --> 00:26:31,440
approximately the same things

585
00:26:31,440 --> 00:26:33,840
that question mark will show you.

586
00:26:33,840 --> 00:26:36,200
You'll see that it's slightly different in classic notebook.

587
00:26:36,200 --> 00:26:40,280
But here you see that collection DQ takes,

588
00:26:40,280 --> 00:26:42,520
so the signature is not really useful now,

589
00:26:42,520 --> 00:26:43,920
but the doc string is.

590
00:26:43,920 --> 00:26:46,600
It takes an iterable and then a max length

591
00:26:46,600 --> 00:26:49,480
and it returns to you a DQ object.

592
00:26:49,480 --> 00:26:54,480
So now I can actually do one, two, three,

593
00:26:54,720 --> 00:26:56,680
and a max length of five, for example.

594
00:26:57,560 --> 00:26:59,680
We're not going to look into what DQ is

595
00:26:59,680 --> 00:27:04,680
and then I press shift enter and now I have my objects here.

596
00:27:05,280 --> 00:27:07,400
Not going to DQ itself,

597
00:27:07,400 --> 00:27:11,340
but it's just trying to go through things you can do.

598
00:27:12,480 --> 00:27:14,200
A lot of things that you do interactively,

599
00:27:14,200 --> 00:27:16,040
you might forget to assign a variable.

600
00:27:16,040 --> 00:27:18,160
So now we're going to see how you can use

601
00:27:18,160 --> 00:27:21,840
some IPython features to get back some results

602
00:27:21,840 --> 00:27:23,240
you forgot to assign, especially if they're

603
00:27:23,240 --> 00:27:24,840
a large computation.

604
00:27:24,840 --> 00:27:27,000
So we're just going to do a dummy computation.

605
00:27:27,000 --> 00:27:30,000
We added the two and 10.

606
00:27:30,000 --> 00:27:31,960
We could have done that using TensorFlow,

607
00:27:31,960 --> 00:27:33,800
but it might have been a bit overkill.

608
00:27:34,800 --> 00:27:37,800
Well, if you want to do that, you can see,

609
00:27:37,800 --> 00:27:39,160
you can see FizzBuzz in TensorFlow,

610
00:27:39,160 --> 00:27:42,240
which is a nice one, an article online by Joel Groose.

611
00:27:43,560 --> 00:27:46,680
And now we want to basically add 10 to that,

612
00:27:46,680 --> 00:27:49,880
but TensorFlow basically computed for five hours

613
00:27:49,880 --> 00:27:53,440
on our GPU and we don't want to rerun that.

614
00:27:53,440 --> 00:27:55,300
So you can use a single underscore.

615
00:27:55,300 --> 00:27:57,480
If you haven't assigned to single underscore,

616
00:27:57,480 --> 00:27:59,420
it's automatically there in your namespace

617
00:27:59,420 --> 00:28:02,640
and refer to the previous result.

618
00:28:03,520 --> 00:28:06,520
So now hopefully the previous result is 12.

619
00:28:06,520 --> 00:28:11,440
If I add 10, it's going to be 22.

620
00:28:11,440 --> 00:28:13,880
We also have, we'll see later, we have double underscore,

621
00:28:13,880 --> 00:28:16,240
which is two results before, and triple underscore,

622
00:28:16,240 --> 00:28:18,080
which is three results before.

623
00:28:18,080 --> 00:28:21,080
And they shift all along, so it might be sometimes

624
00:28:22,480 --> 00:28:23,620
hard to follow.

625
00:28:24,720 --> 00:28:27,920
You saw here that, well, you wrote something

626
00:28:27,920 --> 00:28:29,760
and it was automatically displayed

627
00:28:30,680 --> 00:28:32,840
in the interactive shell.

628
00:28:32,840 --> 00:28:35,640
If you have a big result, like a panorama frame

629
00:28:35,640 --> 00:28:38,400
or a matplotlib figure or something,

630
00:28:38,400 --> 00:28:40,080
you might want to not display it.

631
00:28:41,240 --> 00:28:43,200
So one of the specific IPython syntax

632
00:28:43,200 --> 00:28:44,880
is if you end your line with semicolon,

633
00:28:44,880 --> 00:28:47,140
it will suppress the output.

634
00:28:48,640 --> 00:28:53,360
So here 10 plus 20 is 30, but it's not displayed.

635
00:28:53,360 --> 00:28:56,920
And now if we look at the previous results,

636
00:28:56,920 --> 00:28:58,240
because we didn't display it,

637
00:28:58,240 --> 00:29:00,120
that's one of the thing you need to remember,

638
00:29:00,120 --> 00:29:03,580
is it still refers to the previous one that was displayed.

639
00:29:03,580 --> 00:29:07,000
So because this one was none, actually,

640
00:29:07,000 --> 00:29:09,160
it skipped and still refers to this one.

641
00:29:09,160 --> 00:29:10,560
So it might be useful if you want to do

642
00:29:10,560 --> 00:29:12,360
some temporary computation and just refer

643
00:29:12,360 --> 00:29:14,400
to what you have back.

644
00:29:15,380 --> 00:29:19,760
One of the issue with underscore, double underscore,

645
00:29:19,760 --> 00:29:22,320
and triple underscore is that they keep shifting around.

646
00:29:22,320 --> 00:29:24,080
You don't know which ones they are.

647
00:29:25,120 --> 00:29:27,920
So what you can do is actually refer either

648
00:29:27,920 --> 00:29:31,600
to underscore and the number of the output,

649
00:29:31,600 --> 00:29:35,240
so 10 would be this one, or directly refer to out

650
00:29:35,240 --> 00:29:38,660
with an uppercase O and the number you want in it.

651
00:29:38,660 --> 00:29:42,080
And so hopefully underscore 10 should be equal to out 10

652
00:29:42,080 --> 00:29:44,080
and should be equal to 22.

653
00:29:48,440 --> 00:29:52,440
And so they're both equal, and we are going to check

654
00:29:52,440 --> 00:29:56,680
the value of 10, it's actually 22, so that's good.

655
00:29:56,680 --> 00:29:58,600
So when you have a lot of things that you've done

656
00:29:58,600 --> 00:30:02,640
and you want to reuse, you can refer to it.

657
00:30:02,640 --> 00:30:04,700
One of the drawback of that, especially if you're working

658
00:30:04,700 --> 00:30:07,520
with really large data sets, is that some outputs

659
00:30:07,520 --> 00:30:09,720
will stay in memory, where in normal pythons

660
00:30:09,720 --> 00:30:11,920
it will be garbage collected.

661
00:30:11,920 --> 00:30:14,120
So be careful, you might use way more memory

662
00:30:14,120 --> 00:30:16,640
when you use IPythons than when you use a normal python.

663
00:30:16,640 --> 00:30:17,760
And we have a question here.

664
00:30:17,760 --> 00:30:19,840
So my column appended that computation,

665
00:30:19,840 --> 00:30:23,080
it was still done, it's just not displayed.

666
00:30:23,080 --> 00:30:25,520
So, well, this computation, yes, this computation

667
00:30:25,600 --> 00:30:26,960
has done, but not displayed.

668
00:30:26,960 --> 00:30:30,160
So that's a good question, well, we can try.

669
00:30:30,160 --> 00:30:32,640
I'm going to talk a bit about the JupyterLab interface

670
00:30:32,640 --> 00:30:35,040
while I'm here, I'm going to not edit,

671
00:30:35,040 --> 00:30:37,000
I'm in edit mode here inside the cell,

672
00:30:37,000 --> 00:30:38,960
I'm going to press escape, so I'm modifying

673
00:30:38,960 --> 00:30:42,240
the notebook itself, I'm going to press A for above

674
00:30:42,240 --> 00:30:46,480
to create a new cell, I'm going to define a function

675
00:30:46,480 --> 00:30:51,480
that prints, let's do double quotes,

676
00:30:56,160 --> 00:31:01,160
I'm called and return result.

677
00:31:04,560 --> 00:31:05,800
Really difficult.

678
00:31:07,360 --> 00:31:10,760
So now I'm going to call F and put a semicolon,

679
00:31:10,760 --> 00:31:13,080
and so we are going to check that the function

680
00:31:13,080 --> 00:31:16,040
is actually called, but the result,

681
00:31:16,040 --> 00:31:18,360
it returned was not displayed.

682
00:31:18,360 --> 00:31:21,000
So it's called, but the result is not displayed.

683
00:31:21,000 --> 00:31:25,160
If I remove the semicolon, it's called,

684
00:31:25,160 --> 00:31:26,400
but I have a result.

685
00:31:26,400 --> 00:31:28,920
You see here that there is a slight difference

686
00:31:28,920 --> 00:31:32,080
between printing and returning the value,

687
00:31:32,080 --> 00:31:33,880
you see that the value which is printing

688
00:31:33,880 --> 00:31:36,400
doesn't have a prompt in front of it.

689
00:31:36,400 --> 00:31:39,240
So you can't refer to something that has been printed.

690
00:31:39,240 --> 00:31:42,320
But you can refer to the value of the last statement

691
00:31:42,320 --> 00:31:44,480
of a cell, so a result.

692
00:31:46,280 --> 00:31:50,280
So let's do this example, let's go create a new cell,

693
00:31:50,280 --> 00:31:55,120
let's do one, two, three, so we have three statements.

694
00:31:56,040 --> 00:31:57,400
Only the last statement would be printed,

695
00:31:57,400 --> 00:32:01,840
which will be three, we can check that 18

696
00:32:01,840 --> 00:32:03,680
is actually only three.

697
00:32:03,680 --> 00:32:06,640
And one and two were executed,

698
00:32:06,640 --> 00:32:10,120
but the result were not outputted.

699
00:32:10,120 --> 00:32:12,120
If we print them, it's the same,

700
00:32:12,120 --> 00:32:17,120
we can print one, print two,

701
00:32:20,520 --> 00:32:23,040
and you see here that we have one and two,

702
00:32:23,040 --> 00:32:25,280
but they don't have a prompt number in front.

703
00:32:27,400 --> 00:32:28,240
Good question.

704
00:32:30,520 --> 00:32:33,640
If you want to access what you've written before,

705
00:32:33,640 --> 00:32:36,720
you can also do that with in instead of out.

706
00:32:36,720 --> 00:32:41,040
So you saw that on input 11, I got 10 plus 20

707
00:32:41,040 --> 00:32:44,240
that I had to pass output, you can also use things

708
00:32:44,240 --> 00:32:47,600
with I, I, I, I, I, I, I, I, I, I, et cetera.

709
00:32:48,600 --> 00:32:53,600
Or if you want to have more information

710
00:32:53,680 --> 00:32:56,320
about everything you wrote, especially since you can edit

711
00:32:56,320 --> 00:32:58,920
what has been previously done in the notebook,

712
00:32:58,920 --> 00:33:00,520
you might want to really see exactly

713
00:33:00,520 --> 00:33:02,080
the command of sequence you have.

714
00:33:02,080 --> 00:33:04,600
You can use the percent history magic,

715
00:33:04,600 --> 00:33:08,520
we'll see what the magic is later, with line one to five.

716
00:33:08,520 --> 00:33:12,760
So here I would see only the first five inputs I've done.

717
00:33:13,760 --> 00:33:18,200
And you see that the first five, five times I've done

718
00:33:18,200 --> 00:33:20,200
was to print high, print high to everyone,

719
00:33:20,200 --> 00:33:23,320
I edited the first cell, used question mark,

720
00:33:23,320 --> 00:33:26,200
worked with import collection and collection name tuples,

721
00:33:26,200 --> 00:33:29,360
and then did collection counter to question mark.

722
00:33:29,360 --> 00:33:31,640
And now we're going to do a small exercise,

723
00:33:31,640 --> 00:33:35,440
I'm going to let you look at history question mark

724
00:33:35,440 --> 00:33:37,840
to see what the documentation of history is,

725
00:33:37,840 --> 00:33:41,560
and try to see if you can extract the last 10 line

726
00:33:41,560 --> 00:33:44,200
of history to a file name log dot py.

727
00:33:44,200 --> 00:33:45,640
And we have a question here.

728
00:33:45,640 --> 00:33:49,960
So are the, in number 23, the one to five,

729
00:33:49,960 --> 00:33:53,760
is that referencing those, the numbers to the left?

730
00:33:54,800 --> 00:33:58,040
So the question is, in history, one to five,

731
00:33:58,040 --> 00:34:01,240
what are one to five referring to?

732
00:34:01,240 --> 00:34:03,200
Are they referring to the number on the left here?

733
00:34:03,200 --> 00:34:05,480
Yes, they're referring to the in number.

734
00:34:05,480 --> 00:34:08,280
But that's something that should be hopefully documented

735
00:34:08,280 --> 00:34:10,800
when you do percent history question mark,

736
00:34:10,800 --> 00:34:12,480
to give you more information.

737
00:34:12,480 --> 00:34:14,480
And some of the information you will see

738
00:34:14,480 --> 00:34:16,660
is that this is not related to only the notebook,

739
00:34:16,660 --> 00:34:18,280
it's related to iPad on itself.

740
00:34:19,280 --> 00:34:23,040
And you can refer to either this session,

741
00:34:23,040 --> 00:34:24,200
the current session you're in,

742
00:34:24,200 --> 00:34:27,280
or you can also refer to previous session.

743
00:34:27,280 --> 00:34:29,400
If I remember correctly, if I do that,

744
00:34:29,400 --> 00:34:34,400
that's going to be what I showed earlier today to Mike.

745
00:34:34,880 --> 00:34:38,000
I showed him how to do some of the auto-avoid stuff.

746
00:34:38,000 --> 00:34:43,000
And you see that it's my 383rd iPad on session,

747
00:34:44,360 --> 00:34:47,600
and that the fifth line of the 383rd session

748
00:34:47,600 --> 00:34:49,440
was auto-avoid true.

749
00:34:49,440 --> 00:34:53,800
And here I used tilde to do the previous session,

750
00:34:53,800 --> 00:34:56,440
but all of the syntax should be defined

751
00:34:56,440 --> 00:34:58,280
in history question mark,

752
00:34:58,280 --> 00:35:00,080
where you will get some information.

753
00:35:02,760 --> 00:35:06,040
So let's take two or three minutes

754
00:35:06,040 --> 00:35:10,520
to make sure that you're fine with all of that.

755
00:35:10,520 --> 00:35:12,160
If everything is good or bad,

756
00:35:12,160 --> 00:35:15,400
you can put your green sticky note and red sticky notes.

757
00:35:15,400 --> 00:35:17,000
You can ask questions.

758
00:35:36,040 --> 00:35:36,880
Okay.

759
00:36:06,040 --> 00:36:06,880
Okay.

760
00:36:36,040 --> 00:36:36,880
F.

761
00:36:41,240 --> 00:36:42,080
F.

762
00:36:42,080 --> 00:36:42,920
Okay.

763
00:36:55,480 --> 00:36:56,320
Okay.

764
00:36:56,320 --> 00:36:58,840
So I didn't remember everything correctly.

765
00:36:58,840 --> 00:37:02,040
So the N was just printing line number.

766
00:37:02,040 --> 00:37:04,560
It was not referring to the actual range.

767
00:37:05,360 --> 00:37:07,240
It's its own parameter.

768
00:37:07,240 --> 00:37:11,800
And so if I do history question mark

769
00:37:11,800 --> 00:37:14,040
and put a percent in front,

770
00:37:14,040 --> 00:37:15,720
so I have the information.

771
00:37:17,080 --> 00:37:18,520
So it give me some examples.

772
00:37:18,520 --> 00:37:21,840
It tell me what N print line number for each input.

773
00:37:21,840 --> 00:37:25,080
I also want to have the F file name.

774
00:37:25,080 --> 00:37:28,120
So I'm going to do minus F log.py.

775
00:37:29,120 --> 00:37:31,480
And I only want to see,

776
00:37:31,480 --> 00:37:35,560
get the last N line from all sessions.

777
00:37:35,560 --> 00:37:37,560
So if you ask for any one session,

778
00:37:37,560 --> 00:37:40,040
that should be that.

779
00:37:40,040 --> 00:37:42,080
And so if I do, yes?

780
00:37:42,080 --> 00:37:43,320
So how do you,

781
00:37:43,320 --> 00:37:48,320
since the dash L is the last N lines from all sessions,

782
00:37:48,400 --> 00:37:51,400
is there another option that makes it say

783
00:37:51,400 --> 00:37:52,520
just the current session?

784
00:37:52,520 --> 00:37:55,160
So if you don't give any,

785
00:37:55,160 --> 00:37:57,240
the session are the things before the slashes here.

786
00:37:57,240 --> 00:38:00,280
I think the communication might be slightly unclear here.

787
00:38:00,280 --> 00:38:04,400
So here you're asking for sessions eight to six.

788
00:38:04,400 --> 00:38:08,200
Well, six back and eight back.

789
00:38:08,200 --> 00:38:09,240
If you don't give anything,

790
00:38:09,240 --> 00:38:11,040
it will only assume it's one session.

791
00:38:11,040 --> 00:38:16,040
Like if I did minus L with tilde eight dash tilde six,

792
00:38:16,040 --> 00:38:20,840
it would give me the last L lines of all the session

793
00:38:20,840 --> 00:38:23,040
tilde eight to tilde six.

794
00:38:23,040 --> 00:38:24,680
So if you don't put any session,

795
00:38:24,680 --> 00:38:27,160
it will assume it's only the current one.

796
00:38:28,720 --> 00:38:30,200
If it's unclear, you can send the pull request

797
00:38:31,120 --> 00:38:32,160
if you think you can write it better.

798
00:38:33,600 --> 00:38:35,280
So, oh, well, I already did that.

799
00:38:35,280 --> 00:38:38,400
File.log exists, overwrite, yes?

800
00:38:38,400 --> 00:38:39,480
Overwriting file.

801
00:38:40,320 --> 00:38:42,000
And now we're going to see,

802
00:38:42,000 --> 00:38:43,920
well, that's nice because we can do that just after.

803
00:38:43,920 --> 00:38:46,080
We can see that IPython have some nice integration

804
00:38:46,080 --> 00:38:47,880
when you can call the underlying shell.

805
00:38:47,880 --> 00:38:49,240
If you don't know how to do things in Python,

806
00:38:49,240 --> 00:38:50,540
you can do it in bash.

807
00:38:50,540 --> 00:38:52,900
You just prepend your line with a bang

808
00:38:52,900 --> 00:38:54,560
and then you write some bash.

809
00:38:54,560 --> 00:38:59,560
And now it will run bash for you in the bash.

810
00:39:00,760 --> 00:39:02,040
And give you the result.

811
00:39:02,040 --> 00:39:06,920
So you can see here that I have created a file code log.py

812
00:39:06,920 --> 00:39:11,920
that have the last 10 items of as a history

813
00:39:13,200 --> 00:39:14,380
of my current session.

814
00:39:18,600 --> 00:39:22,440
And that's just what we had with perfect transition.

815
00:39:22,440 --> 00:39:25,760
You can in IPython access underlying operating system

816
00:39:25,760 --> 00:39:28,440
using the bang and bang bang operators

817
00:39:28,720 --> 00:39:31,160
when they are in, when IPython figure out

818
00:39:31,160 --> 00:39:33,080
they are invalid in Python syntax,

819
00:39:33,080 --> 00:39:34,600
it will automatically try to do

820
00:39:34,600 --> 00:39:36,640
all the right things for you.

821
00:39:36,640 --> 00:39:39,280
So if I want to see in which directory I am,

822
00:39:39,280 --> 00:39:41,900
I can do pwd and it will print it.

823
00:39:43,040 --> 00:39:45,560
And we have also one other special casing

824
00:39:45,560 --> 00:39:50,560
which is equaled followed by some spaces or none and bang.

825
00:39:51,200 --> 00:39:53,560
And so if you do that, it will attempt

826
00:39:53,560 --> 00:39:57,760
to run the command here and get the output of it

827
00:39:57,760 --> 00:40:00,600
into an object that you can assign.

828
00:40:00,600 --> 00:40:03,480
So basically if you don't know that in Python

829
00:40:03,480 --> 00:40:05,160
you want to do os.listdir,

830
00:40:06,400 --> 00:40:08,160
because it's something that you would take

831
00:40:08,160 --> 00:40:09,900
like 10 minutes to Google,

832
00:40:09,900 --> 00:40:14,040
you can just do bang and use your bash.

833
00:40:14,040 --> 00:40:14,880
If you're on Windows,

834
00:40:14,880 --> 00:40:16,760
I believe it use underlying command shell,

835
00:40:16,760 --> 00:40:19,720
I'm unsure, or power shell if you use it with power shell.

836
00:40:19,720 --> 00:40:22,680
So this specific syntax is a syntax

837
00:40:22,680 --> 00:40:24,600
of the underlying shell.

838
00:40:24,760 --> 00:40:27,640
So I assume that's just using standard and centered out.

839
00:40:27,640 --> 00:40:29,840
So the question was, I assume it's using

840
00:40:29,840 --> 00:40:31,200
standard in and standard out.

841
00:40:32,560 --> 00:40:34,080
Yes it does.

842
00:40:34,080 --> 00:40:35,880
We're not going to do exactly into the detail

843
00:40:35,880 --> 00:40:38,080
of what this object is.

844
00:40:38,080 --> 00:40:41,520
It's not purely a string, it's a wrapper around strings

845
00:40:41,520 --> 00:40:44,320
where you can ask for each line independently

846
00:40:44,320 --> 00:40:47,320
or the full bytes or something like that.

847
00:40:47,320 --> 00:40:48,640
So if you want to play with that,

848
00:40:48,640 --> 00:40:49,960
once you've run these cells,

849
00:40:49,960 --> 00:40:53,560
I would let you play with it and do files?

850
00:40:53,560 --> 00:40:55,720
And files.tab to see what's in it.

851
00:40:56,640 --> 00:40:59,040
And so here I want to look at everything

852
00:40:59,040 --> 00:41:01,520
which is in my notebooks folder.

853
00:41:01,520 --> 00:41:03,360
Well let me just change that to ls

854
00:41:03,360 --> 00:41:06,240
to see what are the current working directory.

855
00:41:06,240 --> 00:41:09,800
You see that I have a notebooks folder.

856
00:41:09,800 --> 00:41:12,760
I can pass option to ls if I want it to be more complete

857
00:41:12,760 --> 00:41:14,520
and be as a list, you can do that.

858
00:41:14,520 --> 00:41:18,120
So it's pure bash if you know, if you know, if you know bash.

859
00:41:18,120 --> 00:41:22,440
And so now you see that you have those files

860
00:41:22,440 --> 00:41:25,720
in the current working directory.

861
00:41:25,720 --> 00:41:28,520
So now if you want to loop through those files,

862
00:41:28,520 --> 00:41:29,760
it will work.

863
00:41:29,760 --> 00:41:31,320
So that's relatively useful

864
00:41:31,320 --> 00:41:33,520
if you want to manipulate things.

865
00:41:33,520 --> 00:41:38,200
I like to match Python and bash.

866
00:41:38,200 --> 00:41:40,720
Like you want to copy only the ipynb file

867
00:41:40,720 --> 00:41:42,360
or only some py file.

868
00:41:42,360 --> 00:41:45,840
If I want to get only my py file,

869
00:41:45,840 --> 00:41:49,800
I would do star.py and I would get only my py file.

870
00:41:50,640 --> 00:41:54,080
So let me remove that.

871
00:41:54,080 --> 00:41:55,800
Let me rerun that.

872
00:41:55,800 --> 00:41:59,000
And so now we basically got something from bash

873
00:41:59,000 --> 00:42:03,120
and got it into Python relatively easily using the bang.

874
00:42:03,120 --> 00:42:04,640
We might want to do the opposite.

875
00:42:04,640 --> 00:42:06,720
You might want to take a Python variable

876
00:42:06,720 --> 00:42:09,240
and send it to a bash command.

877
00:42:09,240 --> 00:42:11,760
And so when you run a bash command

878
00:42:11,760 --> 00:42:14,200
with a shell command with a bang,

879
00:42:14,200 --> 00:42:17,120
when you know that the shell variables

880
00:42:17,160 --> 00:42:19,880
are usually starting with dollars like that,

881
00:42:19,880 --> 00:42:22,160
if ipython finds that some of that

882
00:42:22,160 --> 00:42:24,480
is actually in your current namespace,

883
00:42:24,480 --> 00:42:29,480
it will actually replace that by the value of files.

884
00:42:30,960 --> 00:42:35,240
So if I do that, it should basically use bash

885
00:42:35,240 --> 00:42:38,400
to echo the value of the list as a string.

886
00:42:40,720 --> 00:42:43,240
So the value of a file as a string here

887
00:42:43,240 --> 00:42:46,480
is not super useful,

888
00:42:46,480 --> 00:42:49,200
but what you can do is you can actually do

889
00:42:49,200 --> 00:42:54,200
some extra Python syntax inside here

890
00:42:55,480 --> 00:42:57,520
by using curly brackets.

891
00:42:57,520 --> 00:43:00,920
So it's curly brackets or dollar, not both.

892
00:43:02,800 --> 00:43:04,480
And you can see that you can, for example,

893
00:43:04,480 --> 00:43:07,760
get the file name, the first file name,

894
00:43:07,760 --> 00:43:11,440
theta.ipynb as a pre-case.

895
00:43:11,440 --> 00:43:12,920
And what you can do with that

896
00:43:12,920 --> 00:43:15,400
is actually put it inside some Python syntax,

897
00:43:15,400 --> 00:43:17,000
some Python loops, for example.

898
00:43:18,800 --> 00:43:20,640
And so here, if I want to see,

899
00:43:22,920 --> 00:43:27,160
I want you to number my file and remove the extensions.

900
00:43:27,160 --> 00:43:31,000
What I could do is just loop through my file,

901
00:43:31,000 --> 00:43:33,040
and if it's n with ipynb,

902
00:43:33,040 --> 00:43:36,960
I will print a two-digit number, a dash,

903
00:43:36,960 --> 00:43:40,480
and the file name, and otherwise put two dashes.

904
00:43:40,480 --> 00:43:42,560
So that's not extremely useful,

905
00:43:42,560 --> 00:43:44,400
but what you could do here is, for example,

906
00:43:44,400 --> 00:43:49,400
do SSH or SCP or any other manipulation of file system

907
00:43:50,760 --> 00:43:52,560
that you know how to do that,

908
00:43:52,560 --> 00:43:56,000
or submit a job in Slurm if you're using HPC

909
00:43:56,000 --> 00:43:57,760
or something like that,

910
00:43:57,760 --> 00:44:00,680
directly from within Python.

911
00:44:00,680 --> 00:44:02,640
So you can use the flexibility of the command line

912
00:44:02,640 --> 00:44:07,200
and the power of the Python analysis tool.

913
00:44:07,200 --> 00:44:08,040
Question?

914
00:44:08,040 --> 00:44:10,160
Is that flexibility where the curly braces

915
00:44:10,160 --> 00:44:14,000
were used in Python also present in other kernels,

916
00:44:15,000 --> 00:44:20,000
so are those capabilities present in non-Python kernels?

917
00:44:21,560 --> 00:44:22,560
It depends.

918
00:44:22,560 --> 00:44:24,960
They are implemented in the Python kernel,

919
00:44:24,960 --> 00:44:28,000
and it's a Python-specific features.

920
00:44:28,000 --> 00:44:32,120
Some other kernels have mimicked this feature.

921
00:44:32,120 --> 00:44:35,240
It's not Jupyter-specific, it's IPython-specific.

922
00:44:35,240 --> 00:44:37,640
If you use something, I believe the Scala kernel

923
00:44:37,640 --> 00:44:41,640
have some of that, the exact syntax that varies,

924
00:44:41,640 --> 00:44:45,160
and one of the reason is that we use syntax

925
00:44:45,160 --> 00:44:47,160
which is non-valid Python syntax

926
00:44:47,160 --> 00:44:48,560
so that we can escape that and say,

927
00:44:48,560 --> 00:44:50,040
oh, that's actually not Python,

928
00:44:50,040 --> 00:44:52,320
but we know how to handle that.

929
00:44:52,320 --> 00:44:56,640
In other languages, that wouldn't be invalid syntax,

930
00:44:56,640 --> 00:44:59,360
and so the kernel cannot have exactly the same syntax.

931
00:44:59,360 --> 00:45:01,880
They might want to use a different escape characters.

932
00:45:01,880 --> 00:45:04,040
Like instead of persons, they will use hash,

933
00:45:04,040 --> 00:45:06,240
or they will use at.

934
00:45:06,240 --> 00:45:09,600
Small story before that,

935
00:45:10,600 --> 00:45:12,080
before I joined the project,

936
00:45:12,080 --> 00:45:14,120
instead of using percent something

937
00:45:14,120 --> 00:45:15,240
that you've seen with history,

938
00:45:15,240 --> 00:45:16,920
it used to be an at symbol,

939
00:45:17,920 --> 00:45:20,840
and this was before Python had decorators.

940
00:45:20,840 --> 00:45:22,680
So if you've used Python decorators,

941
00:45:22,680 --> 00:45:24,480
decorators used to have at,

942
00:45:24,480 --> 00:45:27,720
and so in 2005 or six, I believe,

943
00:45:27,720 --> 00:45:28,920
was way before my time,

944
00:45:30,320 --> 00:45:33,120
you used to do at history instead of percent history.

945
00:45:35,800 --> 00:45:38,040
And there are some things, like you will realize

946
00:45:38,040 --> 00:45:40,080
that that kind of syntax is really close

947
00:45:40,080 --> 00:45:43,280
to what you have with f string in recent Python,

948
00:45:43,280 --> 00:45:45,560
but this predates f string.

949
00:45:45,560 --> 00:45:48,760
So we might have some conflict with newer Python features,

950
00:45:48,760 --> 00:45:50,200
and when this is the case,

951
00:45:50,200 --> 00:45:54,840
we'll prefer to tilt toward having the Python way

952
00:45:54,840 --> 00:45:55,680
than our own way.

953
00:45:55,680 --> 00:45:58,120
So some features, if they conflict with Python,

954
00:45:58,120 --> 00:46:01,480
will slightly change.

955
00:46:03,480 --> 00:46:07,560
So that bring us to magic functions.

956
00:46:07,560 --> 00:46:09,640
So usually you have things that you want to do

957
00:46:09,640 --> 00:46:11,280
that are beyond Python.

958
00:46:11,280 --> 00:46:13,320
For example, you want to embed SQL,

959
00:46:13,320 --> 00:46:15,400
or you want to automatically time some code

960
00:46:15,400 --> 00:46:17,120
to figure out if it's fast or not.

961
00:46:18,760 --> 00:46:20,840
And IPython has this percent that allow you

962
00:46:20,840 --> 00:46:24,080
to escape from Python and do some things.

963
00:46:24,080 --> 00:46:26,320
You will find two kind of magics,

964
00:46:26,320 --> 00:46:29,160
and you see that they have more a bash-like syntax.

965
00:46:29,160 --> 00:46:31,880
You will have one with a single percent in front.

966
00:46:31,880 --> 00:46:33,520
When you have a single percent in front,

967
00:46:33,520 --> 00:46:35,440
it means that they work only on everything

968
00:46:35,440 --> 00:46:36,520
which follows a line.

969
00:46:37,480 --> 00:46:41,240
So this percent magic will do the thing it does

970
00:46:41,240 --> 00:46:42,240
only on the rest of the line,

971
00:46:42,240 --> 00:46:44,520
which here is nothing, it takes no argument.

972
00:46:44,520 --> 00:46:46,440
And you will see also things with two percent,

973
00:46:46,440 --> 00:46:49,800
and when it's two percent, it acts on the rest of the cell.

974
00:46:50,680 --> 00:46:51,760
Here it's in a notebook.

975
00:46:51,760 --> 00:46:53,000
If it's not in a notebook,

976
00:46:53,000 --> 00:46:56,040
there are some rules of to which scope it applies.

977
00:46:57,560 --> 00:47:02,200
But basically this is most of the magic take strings,

978
00:47:02,200 --> 00:47:04,520
so they will take the value of that as a string

979
00:47:04,520 --> 00:47:06,560
and do any manipulations they want.

980
00:47:06,560 --> 00:47:10,000
Most of them only accept Python syntax,

981
00:47:10,000 --> 00:47:12,880
but you don't have to, you can use non-Python syntax.

982
00:47:14,680 --> 00:47:18,360
And so that allow you to basically escape from the Python

983
00:47:18,360 --> 00:47:20,480
to the Python syntax to do a lot of things.

984
00:47:20,480 --> 00:47:22,400
So if you just do percent magic,

985
00:47:22,400 --> 00:47:25,360
it will give you a nice explanation of what it does,

986
00:47:25,360 --> 00:47:28,720
how it works, some of the possibilities,

987
00:47:28,720 --> 00:47:31,640
and we're going to go through some of them.

988
00:47:31,640 --> 00:47:34,160
So let me just go back to the top

989
00:47:34,760 --> 00:47:39,200
and just compact that.

990
00:47:39,200 --> 00:47:43,480
So one of the first one we're going to see is timeit.

991
00:47:43,480 --> 00:47:45,360
And so timeit is really nice when you want to get

992
00:47:45,360 --> 00:47:48,240
precise measurement of how long a block of code does.

993
00:47:48,240 --> 00:47:49,680
So Python has a timeit module,

994
00:47:49,680 --> 00:47:52,360
but it's relatively heavy to use.

995
00:47:52,360 --> 00:47:55,160
We've done some open-united default things.

996
00:47:55,160 --> 00:47:58,320
So if you say I want to time this piece of code

997
00:47:58,320 --> 00:48:01,520
and see how much it runs,

998
00:48:01,520 --> 00:48:04,520
timeit will run it a couple of times in a tight loop

999
00:48:04,520 --> 00:48:09,440
to see how long this specific piece of code runs.

1000
00:48:09,440 --> 00:48:13,440
And you see that doing this take 10.7 microsecond

1001
00:48:13,440 --> 00:48:18,440
plus or minus 40.9 nanoseconds per loop,

1002
00:48:18,480 --> 00:48:20,560
mean percent deviation.

1003
00:48:20,560 --> 00:48:25,560
And we actually did seven run with 100,000 loops each.

1004
00:48:25,560 --> 00:48:27,480
Because this is really, really fast,

1005
00:48:27,480 --> 00:48:30,080
timeit decided, tried to do some experiments

1006
00:48:30,080 --> 00:48:32,160
and decided, well, if I want to be able to measure

1007
00:48:32,160 --> 00:48:35,240
precise that I need to run this one,

1008
00:48:35,240 --> 00:48:37,160
these things at least 100,000 times

1009
00:48:37,160 --> 00:48:39,160
because there is an overhead of starting the computation

1010
00:48:39,160 --> 00:48:40,760
and stopping the computation.

1011
00:48:40,760 --> 00:48:42,920
So it's going to run that, measure the time

1012
00:48:42,920 --> 00:48:47,200
and divide by 100,000 to get 10.7 microseconds.

1013
00:48:47,200 --> 00:48:49,080
And to get the standard deviation,

1014
00:48:49,080 --> 00:48:53,320
it did the experiments seven times.

1015
00:48:53,320 --> 00:48:56,160
So that's what gives you the standard deviation.

1016
00:48:56,160 --> 00:49:01,160
So now you have some confidence of how things are working.

1017
00:49:01,200 --> 00:49:03,920
And if you have a big block of code,

1018
00:49:03,920 --> 00:49:05,480
which is not a single function,

1019
00:49:05,480 --> 00:49:09,760
what you can do is put 2% and it will run all of that.

1020
00:49:09,760 --> 00:49:11,160
This has a slightly different syntax

1021
00:49:11,160 --> 00:49:13,520
that if you need to do some setup only once,

1022
00:49:13,520 --> 00:49:16,280
you can put a setup code just on the line

1023
00:49:16,280 --> 00:49:18,360
and it will run the setup code on the line only once

1024
00:49:18,360 --> 00:49:19,800
and then run that.

1025
00:49:19,800 --> 00:49:23,280
So now if I want to see how much that is taking,

1026
00:49:24,280 --> 00:49:27,840
taking, I can do so shift enter again.

1027
00:49:27,840 --> 00:49:29,720
And now I have my percent, percent time it,

1028
00:49:29,720 --> 00:49:32,280
which is running this piece of code a number of time.

1029
00:49:32,280 --> 00:49:35,040
And you see that hopefully counting to 110

1030
00:49:35,040 --> 00:49:37,520
is faster than counting to a thousand.

1031
00:49:41,960 --> 00:49:44,680
If you want to test a function on the wide range

1032
00:49:44,680 --> 00:49:47,480
of parameters to see how the behavior here is,

1033
00:49:47,480 --> 00:49:50,600
if it's N squared or N cubed or even worse,

1034
00:49:50,600 --> 00:49:51,920
if it's exponential,

1035
00:49:52,160 --> 00:49:57,160
what you can do is you can actually use the line magic

1036
00:49:57,520 --> 00:49:59,640
inside Python syntax.

1037
00:49:59,640 --> 00:50:02,320
And so IPython will be able to convert that

1038
00:50:02,320 --> 00:50:03,960
into proper Python code

1039
00:50:03,960 --> 00:50:08,480
and runs the test for this specific size.

1040
00:50:13,560 --> 00:50:16,320
And so you see that it's currently running for size 100.

1041
00:50:17,240 --> 00:50:20,600
I should run for 200 and et cetera, et cetera.

1042
00:50:21,920 --> 00:50:22,760
So,

1043
00:50:30,880 --> 00:50:34,320
I would suggest for you to look at the percent time it help

1044
00:50:34,320 --> 00:50:35,400
with a question mark.

1045
00:50:35,400 --> 00:50:37,680
You will see that there is an option

1046
00:50:37,680 --> 00:50:39,840
that allow you to not only print the result

1047
00:50:39,840 --> 00:50:43,440
but return them as an option, like as an object.

1048
00:50:43,440 --> 00:50:45,920
And this object has all the information

1049
00:50:45,920 --> 00:50:47,640
about the code you ran.

1050
00:50:47,640 --> 00:50:49,360
And so now if you want to make a graph

1051
00:50:49,400 --> 00:50:53,280
of how long it takes depending on which parameters you gave,

1052
00:50:53,280 --> 00:50:54,800
you can do that.

1053
00:50:54,800 --> 00:50:56,440
So let's do that as an exercise.

1054
00:50:56,440 --> 00:51:01,440
Let's do a question.

1055
00:51:01,520 --> 00:51:03,920
You're a time that is a little more provoked

1056
00:51:03,920 --> 00:51:04,760
than what I have.

1057
00:51:09,040 --> 00:51:10,960
So you don't have, the question is your time

1058
00:51:10,960 --> 00:51:12,960
it doesn't have the standard deviation.

1059
00:51:13,840 --> 00:51:15,320
I don't know why.

1060
00:51:15,320 --> 00:51:19,240
What operating system or Python installation are you using?

1061
00:51:19,800 --> 00:51:22,720
Three, four, five, Windows.

1062
00:51:22,720 --> 00:51:26,760
So Windows, okay, so I don't know why.

1063
00:51:26,760 --> 00:51:28,920
I know there are some codes to be careful

1064
00:51:28,920 --> 00:51:31,840
that the plus or minus Unicode can show.

1065
00:51:31,840 --> 00:51:33,400
It might be that.

1066
00:51:33,400 --> 00:51:35,920
So we can try to take some time as a break to,

1067
00:51:39,480 --> 00:51:40,320
to see that.

1068
00:51:40,320 --> 00:51:41,160
And another question here.

1069
00:51:41,160 --> 00:51:44,520
Is there any way to cancel or stop something from running?

1070
00:51:44,520 --> 00:51:46,560
Is there any way to stop or something

1071
00:51:46,560 --> 00:51:48,000
which is running in a cell?

1072
00:51:48,000 --> 00:51:49,240
Yes, there is.

1073
00:51:49,240 --> 00:51:52,040
That would be the equivalent of control C.

1074
00:51:52,040 --> 00:51:53,960
So let me do import.

1075
00:51:53,960 --> 00:51:55,640
It will work only in Python code.

1076
00:51:55,640 --> 00:51:56,800
Like if it's in C code

1077
00:51:56,800 --> 00:51:58,720
and the C code doesn't have an interrupt handler,

1078
00:51:58,720 --> 00:52:00,160
it won't be able to stop it.

1079
00:52:01,880 --> 00:52:03,840
Import slip.

1080
00:52:05,760 --> 00:52:07,320
Or from time import slip.

1081
00:52:09,440 --> 00:52:13,120
And let me sleep for 15 seconds.

1082
00:52:13,120 --> 00:52:15,560
And what I'm going to do is press I twice

1083
00:52:16,160 --> 00:52:18,640
for interrupt.

1084
00:52:18,640 --> 00:52:22,640
And once might be a mistake, so we have to press it twice.

1085
00:52:22,640 --> 00:52:24,880
And so that will send the control C to the kernel

1086
00:52:24,880 --> 00:52:25,880
and it will interrupt.

1087
00:52:31,680 --> 00:52:35,440
And so the way to, I think we're slowly slower

1088
00:52:35,440 --> 00:52:38,400
than my other plan, so I'm going to skip that.

1089
00:52:39,680 --> 00:52:42,200
And so same thing, like we've seen that single bank

1090
00:52:42,200 --> 00:52:43,840
can allow you to do bash on one line.

1091
00:52:43,840 --> 00:52:45,240
If you do percent, percent bash,

1092
00:52:45,240 --> 00:52:47,160
you can write multi, multi-line bash

1093
00:52:47,160 --> 00:52:48,600
in the middle of your script.

1094
00:52:48,600 --> 00:52:52,720
So that's kind of already some cross-language integration.

1095
00:52:52,720 --> 00:52:55,000
If you need to drop a file on disk

1096
00:52:55,000 --> 00:52:56,520
to do something specific

1097
00:52:56,520 --> 00:52:57,840
and you want it to be in the notebook,

1098
00:52:57,840 --> 00:52:59,200
you can use write file.

1099
00:52:59,200 --> 00:53:01,280
So write file here, we'll write a file

1100
00:53:01,280 --> 00:53:05,080
could test.txt with this content.

1101
00:53:06,640 --> 00:53:11,640
So you can write, I need to speed up

1102
00:53:11,800 --> 00:53:16,800
speed up, cause food is in 20 minutes.

1103
00:53:23,000 --> 00:53:28,000
And you can see that I now have this file on just here.

1104
00:53:31,000 --> 00:53:33,600
If you want to see all the magic

1105
00:53:33,600 --> 00:53:37,440
you have at your disposition, you can use LS magic.

1106
00:53:37,440 --> 00:53:39,240
And you can see, well, you can start to see

1107
00:53:39,240 --> 00:53:43,000
one nice feature here in Jupiter and Python

1108
00:53:43,000 --> 00:53:45,760
is that objects don't always have to be texts.

1109
00:53:45,760 --> 00:53:47,960
They can actually be rich representation.

1110
00:53:47,960 --> 00:53:50,640
So here we have an HTML thing.

1111
00:53:50,640 --> 00:53:52,600
And you can see that you have a two magic

1112
00:53:52,600 --> 00:53:55,600
or a call alias magic page, few print X modes.

1113
00:53:55,600 --> 00:53:57,120
We're not going to go through all of those

1114
00:53:57,120 --> 00:53:59,280
because it would take us forever.

1115
00:53:59,280 --> 00:54:01,080
You can see that we have alias,

1116
00:54:01,080 --> 00:54:02,800
we have alias couple of things

1117
00:54:02,800 --> 00:54:06,840
so that you have consistency between windows and Unix.

1118
00:54:07,200 --> 00:54:11,640
And you have a couple of things that work on multi-line.

1119
00:54:11,640 --> 00:54:15,080
So you have a latech magic, you have HTML markdown,

1120
00:54:15,080 --> 00:54:17,760
we have profile run that we're going to see,

1121
00:54:17,760 --> 00:54:20,280
we have time it if we just saw,

1122
00:54:20,280 --> 00:54:22,160
write file that we just saw.

1123
00:54:22,160 --> 00:54:23,520
And if you want to run something,

1124
00:54:23,520 --> 00:54:25,120
for example, on the Python two subshell,

1125
00:54:25,120 --> 00:54:27,080
you might be able to do that.

1126
00:54:27,080 --> 00:54:28,960
It's not sharing namespace, but it might be useful

1127
00:54:28,960 --> 00:54:30,280
if you have some specific software,

1128
00:54:30,280 --> 00:54:31,480
which is Python two only.

1129
00:54:32,800 --> 00:54:36,000
And so let's call up that and feel free to look at that.

1130
00:54:37,480 --> 00:54:39,120
So the other thing we can look at,

1131
00:54:39,120 --> 00:54:40,360
if you're writing some scientific code,

1132
00:54:40,360 --> 00:54:41,880
you might want to optimize your codes.

1133
00:54:41,880 --> 00:54:44,360
And to do that, it might be nice to run a profiler.

1134
00:54:44,360 --> 00:54:47,480
Running a profiler is often relatively hard.

1135
00:54:47,480 --> 00:54:52,360
So I have this function that's just some computation.

1136
00:54:54,080 --> 00:54:56,760
What I can do is I can time it.

1137
00:54:58,760 --> 00:55:03,760
And I see that it takes 332 milliseconds using time it.

1138
00:55:04,000 --> 00:55:05,960
You see that time it decided to run the loop

1139
00:55:05,960 --> 00:55:08,560
only once each because the function was already slow.

1140
00:55:09,880 --> 00:55:14,880
And what you can do is run prun to optimize.

1141
00:55:15,120 --> 00:55:17,800
So that's shipped in with Python

1142
00:55:17,800 --> 00:55:20,960
and it will tell you, well, here is the breakdown

1143
00:55:20,960 --> 00:55:23,040
of which functions, if it's something way bigger,

1144
00:55:23,040 --> 00:55:25,520
which function took how much time.

1145
00:55:25,520 --> 00:55:27,680
In this specific case, it's not really useful

1146
00:55:27,680 --> 00:55:30,080
because we only have one function.

1147
00:55:30,080 --> 00:55:33,680
But what you can do is you can actually ask some packages

1148
00:55:33,680 --> 00:55:36,040
to inject some magic into the namespace.

1149
00:55:36,040 --> 00:55:38,360
So not everything has to be built in in IPython.

1150
00:55:38,360 --> 00:55:40,080
As soon as you install a package,

1151
00:55:40,080 --> 00:55:42,360
when you follow the instruction, you install rpy2.

1152
00:55:42,360 --> 00:55:43,800
rpy2 installs the magic.

1153
00:55:44,720 --> 00:55:46,760
When you install line profiler in these instructions,

1154
00:55:46,760 --> 00:55:48,960
line profiler provides the magic as well.

1155
00:55:48,960 --> 00:55:52,800
And so what you can say is, well, IPython look for magics

1156
00:55:52,800 --> 00:55:57,040
that are available in the line profiler package.

1157
00:55:57,920 --> 00:56:01,560
And so if I tried before doing that to do lprun,

1158
00:56:01,560 --> 00:56:03,760
it would say, well, I don't know what lprun is.

1159
00:56:03,760 --> 00:56:05,920
Sorry, I need to do a percent first.

1160
00:56:05,920 --> 00:56:07,960
Say no, I don't know what that is.

1161
00:56:07,960 --> 00:56:09,840
Well, what I can do is say, well, load magic

1162
00:56:09,840 --> 00:56:12,080
from this line profiler package.

1163
00:56:12,080 --> 00:56:15,120
And now you have lprun, which is available.

1164
00:56:15,120 --> 00:56:16,600
So how do you know that lprun is available?

1165
00:56:16,600 --> 00:56:18,920
You have to look at the package documentation.

1166
00:56:18,920 --> 00:56:20,720
And now what you can ask lprun

1167
00:56:20,720 --> 00:56:25,160
is to run this specific function or functions

1168
00:56:25,160 --> 00:56:28,080
and track the performance of this one.

1169
00:56:28,080 --> 00:56:30,680
So that means run the line profiler.

1170
00:56:30,680 --> 00:56:35,680
So line profiler run, track the function to optimize.

1171
00:56:36,480 --> 00:56:38,960
And while here I'm running the same function,

1172
00:56:38,960 --> 00:56:41,640
but I might have some other code that runs that

1173
00:56:41,640 --> 00:56:45,240
and run to optimize with 1,000 iteration.

1174
00:56:46,400 --> 00:56:49,840
And if I do that, well, my code is going to be way slower,

1175
00:56:49,840 --> 00:56:52,880
but I'm going to have a nice breakdown

1176
00:56:52,880 --> 00:56:56,160
of how much time each line is taking.

1177
00:56:56,160 --> 00:56:57,800
So you have the line number,

1178
00:56:57,800 --> 00:56:59,880
how many times a line was executed,

1179
00:56:59,880 --> 00:57:02,880
the times a line took, the times per,

1180
00:57:02,880 --> 00:57:05,480
like time divided by the number of hits,

1181
00:57:05,480 --> 00:57:07,360
the percent of the total time,

1182
00:57:07,360 --> 00:57:08,920
and actually my code here.

1183
00:57:10,960 --> 00:57:13,360
And so here, well, you can see that,

1184
00:57:13,360 --> 00:57:15,560
well, my function was not super efficient.

1185
00:57:15,560 --> 00:57:17,360
You see, well, it's relatively good,

1186
00:57:17,360 --> 00:57:19,560
but I'm doing this computation

1187
00:57:19,560 --> 00:57:22,320
that takes about 30% of my time,

1188
00:57:23,360 --> 00:57:25,400
but it doesn't depend on j.

1189
00:57:26,760 --> 00:57:29,160
It's relatively easy, I know.

1190
00:57:29,160 --> 00:57:34,160
So here we were taking 322 millisecond.

1191
00:57:35,760 --> 00:57:40,760
Let's just try to move this one level above.

1192
00:57:43,360 --> 00:57:44,200
Oops.

1193
00:57:46,360 --> 00:57:48,320
Redefine and we run.

1194
00:57:51,080 --> 00:57:54,200
And if everything is fine, it should probably be faster.

1195
00:57:55,120 --> 00:57:58,280
It may take slower to text because if time it figure out

1196
00:57:58,280 --> 00:58:01,920
the function is faster, it will run more iteration.

1197
00:58:01,920 --> 00:58:05,240
So you see here that it ran each time,

1198
00:58:05,240 --> 00:58:08,280
it ran like 10 times in a row,

1199
00:58:08,280 --> 00:58:11,880
and my function is about twice as fast.

1200
00:58:11,880 --> 00:58:14,880
And now I can rerun my line profiler,

1201
00:58:18,120 --> 00:58:21,520
and you can see that, well, now the other

1202
00:58:21,520 --> 00:58:23,720
have increased in proportional time

1203
00:58:24,480 --> 00:58:29,480
because this one is basically now taking, well, 0%.

1204
00:58:31,680 --> 00:58:33,520
It's called way less often.

1205
00:58:34,560 --> 00:58:36,640
I'm going to skim that, but what you would see

1206
00:58:36,640 --> 00:58:40,480
is that it won't break down in sidelines,

1207
00:58:40,480 --> 00:58:42,960
but if you try to dive more into this function,

1208
00:58:42,960 --> 00:58:47,600
you will see that actually accessing the first

1209
00:58:47,600 --> 00:58:49,320
and second value takes time.

1210
00:58:49,320 --> 00:58:52,640
So it might be better to define ta and tb

1211
00:58:52,640 --> 00:58:54,880
and do ta plus equal and tb plus equal

1212
00:58:54,880 --> 00:58:58,920
and then we would shave a few more milliseconds,

1213
00:58:59,960 --> 00:59:01,160
a few more milliseconds.

1214
00:59:02,880 --> 00:59:04,640
Couple of nice things.

1215
00:59:04,640 --> 00:59:06,840
You probably work by Googling

1216
00:59:06,840 --> 00:59:08,640
and copy pasting from Stack Overflow.

1217
00:59:10,160 --> 00:59:14,200
You don't, I don't judge, I don't judge.

1218
00:59:14,200 --> 00:59:16,000
I'm only judging you, Paul,

1219
00:59:16,840 --> 00:59:19,120
because I know you answered to me on Stack Overflow,

1220
00:59:19,120 --> 00:59:20,560
so I'm copy pasting your code.

1221
00:59:20,720 --> 00:59:23,920
And so you will have some codes

1222
00:59:23,920 --> 00:59:28,880
that already have this prefix here

1223
00:59:28,880 --> 00:59:31,480
and it's sometimes relatively annoying to edit.

1224
00:59:32,920 --> 00:59:34,880
Well, we are going to strip that

1225
00:59:34,880 --> 00:59:37,320
and understand that it's actually Python code

1226
00:59:37,320 --> 00:59:39,360
so you can copy past.

1227
00:59:39,360 --> 00:59:41,920
If you want to amaze your coworker,

1228
00:59:41,920 --> 00:59:44,600
as that works also in the pure terminal,

1229
00:59:44,600 --> 00:59:46,360
if you are in the notebook, what you can do

1230
00:59:46,360 --> 00:59:48,240
is actually do multi-line editing.

1231
00:59:49,240 --> 00:59:53,000
So if you press, I believe on Mac, it's alt,

1232
00:59:53,000 --> 00:59:55,120
you can do rectangle selections.

1233
00:59:58,960 --> 01:00:02,080
You can also put many cursors by pressing command

1234
01:00:02,080 --> 01:00:04,760
and putting a cursor in many location

1235
01:00:04,760 --> 01:00:07,880
and type in three places at once.

1236
01:00:09,600 --> 01:00:11,120
Can you do that again?

1237
01:00:11,120 --> 01:00:13,080
Can you do that again was the question.

1238
01:00:14,720 --> 01:00:17,640
Yes, I'm going to do that, I'm going to do something else,

1239
01:00:17,680 --> 01:00:20,320
I'm going to replace a variable with something else.

1240
01:00:20,320 --> 01:00:24,360
So I'm going to use my mouse and I'm going to use my thumb

1241
01:00:24,360 --> 01:00:26,120
to press on the command key on Mac.

1242
01:00:26,120 --> 01:00:29,600
I believe on Windows it's control, I wouldn't bet on it.

1243
01:00:31,520 --> 01:00:34,480
And now what I can do is actually click on several locations.

1244
01:00:34,480 --> 01:00:38,680
So I keep command pressed and I'm going to click here

1245
01:00:38,680 --> 01:00:40,920
and click here and that thing, that's all.

1246
01:00:42,560 --> 01:00:47,560
And now I'm going to write b-r-a-c-a-d-a-b-r-a.

1247
01:00:48,440 --> 01:00:53,440
And now I have a variable that has been changed several times.

1248
01:00:53,800 --> 01:00:57,080
I believe you can also do double click

1249
01:00:57,080 --> 01:00:59,320
to select three variables.

1250
01:00:59,320 --> 01:01:01,560
So if I double click, I will select three variables

1251
01:01:01,560 --> 01:01:03,360
and get back to a.

1252
01:01:03,360 --> 01:01:04,640
And here I have four cursors,

1253
01:01:04,640 --> 01:01:06,280
so this one I had to get rid of.

1254
01:01:08,560 --> 01:01:09,880
That was fine.

1255
01:01:11,280 --> 01:01:12,120
Do it.

1256
01:01:12,120 --> 01:01:13,520
Do it again.

1257
01:01:14,440 --> 01:01:15,280
Okay.

1258
01:01:16,720 --> 01:01:19,040
You can just, you know how in your text editor

1259
01:01:19,040 --> 01:01:20,800
you can have one cursor.

1260
01:01:20,800 --> 01:01:23,560
You can actually drop many.

1261
01:01:23,560 --> 01:01:25,480
Like it's exactly the same interaction

1262
01:01:25,480 --> 01:01:27,760
as you normally have with your text editor,

1263
01:01:27,760 --> 01:01:30,600
except on Mac if you press command

1264
01:01:30,600 --> 01:01:33,920
and on Windows if you press control I believe,

1265
01:01:33,920 --> 01:01:36,200
instead of removing the previous one,

1266
01:01:36,200 --> 01:01:38,200
it will create a new one.

1267
01:01:38,200 --> 01:01:41,400
So if I do command, here I have a cursor here,

1268
01:01:41,440 --> 01:01:44,520
if I do click, click, click, click,

1269
01:01:44,520 --> 01:01:46,680
I will have five cursors.

1270
01:01:46,680 --> 01:01:49,440
So it's the original one plus four new ones.

1271
01:01:49,440 --> 01:01:51,800
And now if I press a key,

1272
01:01:51,800 --> 01:01:55,200
the value will be done at those five locations.

1273
01:01:55,200 --> 01:01:58,440
So whether I insert a, in which case I have a,

1274
01:01:58,440 --> 01:02:00,640
I mean I'm not going to do a because it's hard to see,

1275
01:02:00,640 --> 01:02:02,520
I'm going to do x because it's bigger,

1276
01:02:02,520 --> 01:02:04,840
I now have five x's.

1277
01:02:04,840 --> 01:02:07,560
If I press delete, it's going to delete one character

1278
01:02:07,560 --> 01:02:08,840
at all my cursors.

1279
01:02:09,200 --> 01:02:12,560
So if I want to change a variable,

1280
01:02:12,560 --> 01:02:15,640
I can create a cursor after the first one,

1281
01:02:15,640 --> 01:02:18,480
I'm going to press command and click after the first,

1282
01:02:18,480 --> 01:02:20,320
the second one and the third one.

1283
01:02:20,320 --> 01:02:23,400
So now I have three cursors, one after each A,

1284
01:02:24,880 --> 01:02:27,000
and I type.

1285
01:02:28,040 --> 01:02:30,040
It's, I mean here it's easier,

1286
01:02:30,040 --> 01:02:31,920
if it's something bigger you will do search and replace,

1287
01:02:31,920 --> 01:02:32,960
right?

1288
01:02:32,960 --> 01:02:35,040
You wouldn't do that.

1289
01:02:35,040 --> 01:02:37,480
But it's possible if you want to do some,

1290
01:02:37,760 --> 01:02:39,000
some editing,

1291
01:02:39,000 --> 01:02:42,120
but if you want to, you can also select the words.

1292
01:02:42,120 --> 01:02:45,360
So if I double click on Abra Cadabra, I will select it.

1293
01:02:45,360 --> 01:02:47,400
So if I double click here without pressing command,

1294
01:02:47,400 --> 01:02:48,280
I will select this one.

1295
01:02:48,280 --> 01:02:50,720
And if I double click here, I will select this one.

1296
01:02:50,720 --> 01:02:53,240
What I'm going to do is select the first one,

1297
01:02:53,240 --> 01:02:56,160
start to press command, double click on the second one,

1298
01:02:56,160 --> 01:02:57,760
double click on the third one.

1299
01:02:57,760 --> 01:03:00,440
And now I have that selected three times,

1300
01:03:00,440 --> 01:03:04,280
and now I can change it to PyCon.

1301
01:03:04,280 --> 01:03:06,320
And there I have PyCon three times.

1302
01:03:06,840 --> 01:03:07,680
Thank you.

1303
01:03:07,680 --> 01:03:08,520
Thank you.

1304
01:03:08,520 --> 01:03:09,360
Thank you.

1305
01:03:09,360 --> 01:03:11,520
I, yeah.

1306
01:03:13,040 --> 01:03:14,600
So the library,

1307
01:03:17,400 --> 01:03:19,240
so libraries that does that,

1308
01:03:19,240 --> 01:03:21,440
almost none of that was written by the Jupiter folks.

1309
01:03:21,440 --> 01:03:23,480
It's written by the underlying library,

1310
01:03:23,480 --> 01:03:25,480
which is called card mirror.

1311
01:03:25,480 --> 01:03:26,680
So I'm going to get the,

1312
01:03:28,960 --> 01:03:31,200
let me do that.

1313
01:03:32,080 --> 01:03:33,040
Code mirror.

1314
01:03:33,880 --> 01:03:36,440
So code mirror.net,

1315
01:03:36,440 --> 01:03:39,320
this has a number of plugins and nice documentation

1316
01:03:39,320 --> 01:03:41,800
on what you can do in your text editor.

1317
01:03:41,800 --> 01:03:43,680
That's what does the highlighting and so on and so forth.

1318
01:03:43,680 --> 01:03:47,440
So thanks to the author of this library

1319
01:03:47,440 --> 01:03:49,280
if you really like multi-line editing.

1320
01:03:50,720 --> 01:03:52,960
It doesn't work for me.

1321
01:03:52,960 --> 01:03:53,800
Doesn't work for you.

1322
01:03:53,800 --> 01:03:54,640
Let's see.

1323
01:03:54,640 --> 01:03:56,720
Because control click is the,

1324
01:03:56,720 --> 01:03:57,720
it's like a right click.

1325
01:03:57,720 --> 01:03:58,560
Is command click.

1326
01:03:58,560 --> 01:04:00,960
Yeah, command click.

1327
01:04:00,960 --> 01:04:01,800
Command, yes.

1328
01:04:01,800 --> 01:04:05,200
It's command or Apple for some of you

1329
01:04:05,200 --> 01:04:07,080
who had Mac for a long time.

1330
01:04:07,080 --> 01:04:08,880
Because it used to be an Apple on the key

1331
01:04:08,880 --> 01:04:12,360
before it was this weird clever things with for loops.

1332
01:04:15,680 --> 01:04:16,520
Okay.

1333
01:04:16,520 --> 01:04:18,880
And if you use IPython in the terminal,

1334
01:04:18,880 --> 01:04:21,120
you will see also those things

1335
01:04:21,120 --> 01:04:24,760
and it also take care of those things for you.

1336
01:04:28,160 --> 01:04:30,880
If you're scared about tracebacks,

1337
01:04:31,800 --> 01:04:34,320
you want to look at the X mode magic

1338
01:04:34,320 --> 01:04:37,680
which remove some of the information in traceback

1339
01:04:37,680 --> 01:04:38,920
to be less scary.

1340
01:04:38,920 --> 01:04:40,640
Or if you like tracebacks,

1341
01:04:40,640 --> 01:04:42,640
you can make it more verbose

1342
01:04:42,640 --> 01:04:45,240
and it will try to find the actual value

1343
01:04:45,240 --> 01:04:48,000
of the local variable.

1344
01:04:49,120 --> 01:04:51,680
So here we are going to create several functions

1345
01:04:51,680 --> 01:04:53,240
and we're going to divide by zero

1346
01:04:53,240 --> 01:04:55,520
which usually computer don't like.

1347
01:04:55,520 --> 01:04:57,920
Maybe in JavaScript they like it, I don't know.

1348
01:04:59,280 --> 01:05:00,840
So that's usually what you get.

1349
01:05:01,800 --> 01:05:04,680
You get your stake trace.

1350
01:05:04,680 --> 01:05:06,920
You are in mode G and you called F

1351
01:05:06,920 --> 01:05:09,800
and in F you called X minus one.

1352
01:05:09,800 --> 01:05:10,920
If you know what you're doing

1353
01:05:10,920 --> 01:05:13,240
and you remember all your 10,000 function,

1354
01:05:13,240 --> 01:05:14,760
you figure out that X was one,

1355
01:05:14,760 --> 01:05:16,720
so X minus one is zero.

1356
01:05:16,720 --> 01:05:20,040
But it can be hard to get everything in your head.

1357
01:05:20,040 --> 01:05:21,720
So if you do X mode plain,

1358
01:05:21,720 --> 01:05:24,880
it will actually give you less information.

1359
01:05:24,880 --> 01:05:26,800
Instead of showing you context,

1360
01:05:26,800 --> 01:05:28,520
you see that here I have the line before

1361
01:05:28,520 --> 01:05:29,960
and the line after.

1362
01:05:29,960 --> 01:05:31,360
Here I don't have context.

1363
01:05:31,360 --> 01:05:34,480
I only have where the error are.

1364
01:05:34,480 --> 01:05:37,480
If you have really long stack trace, it's helpful.

1365
01:05:38,480 --> 01:05:41,360
But in our case, we probably want to do verbose.

1366
01:05:42,320 --> 01:05:44,880
And you see that the difference is

1367
01:05:44,880 --> 01:05:48,960
it will try to say, well, what is the value of G?

1368
01:05:48,960 --> 01:05:51,160
And G is a function.

1369
01:05:51,160 --> 01:05:52,960
What is the value of F?

1370
01:05:52,960 --> 01:05:56,400
F is this function and also Y is equal to zero.

1371
01:05:57,280 --> 01:06:02,280
And if in here, if Y is equal to zero,

1372
01:06:02,920 --> 01:06:05,080
Y plus one is one.

1373
01:06:05,080 --> 01:06:09,240
So now in F, we actually have X equal one when you do this.

1374
01:06:09,240 --> 01:06:13,160
So we actually have figured out

1375
01:06:13,160 --> 01:06:14,720
that here we divide it by zero.

1376
01:06:15,760 --> 01:06:17,360
So of course, here is a toy example,

1377
01:06:17,360 --> 01:06:20,480
but in big code, it might be relatively convenient.

1378
01:06:20,480 --> 01:06:24,120
Of course, when you do that, it makes IPython slower

1379
01:06:24,120 --> 01:06:25,640
and it's not on by default

1380
01:06:25,640 --> 01:06:27,160
because you might write codes

1381
01:06:27,160 --> 01:06:29,680
that deals with password and authentication tokens.

1382
01:06:33,160 --> 01:06:34,800
And so it's not on by default

1383
01:06:34,800 --> 01:06:36,640
and you can get back to the original value,

1384
01:06:36,640 --> 01:06:37,800
which is context.

1385
01:06:39,200 --> 01:06:44,200
Let's go fast and we are going to go to break after.

1386
01:06:44,320 --> 01:06:46,320
If you want to, we have some magic

1387
01:06:46,320 --> 01:06:48,920
that allow you to run different languages.

1388
01:06:48,920 --> 01:06:51,080
So here we write Perl, here we write Ruby

1389
01:06:51,080 --> 01:06:54,000
and it works to process the same as bang.

1390
01:06:56,000 --> 01:06:58,000
You can also run a debugger.

1391
01:06:58,000 --> 01:07:01,480
So if you had a trace back just after you do debug,

1392
01:07:01,480 --> 01:07:03,000
you're going to be in PDB.

1393
01:07:03,000 --> 01:07:06,120
If you know about PDB, you can learn about that.

1394
01:07:06,120 --> 01:07:08,560
So you're basically stopped in the middle of the stack trace

1395
01:07:08,560 --> 01:07:10,680
and you can say, well, what is the value of X?

1396
01:07:10,680 --> 01:07:12,080
X is one.

1397
01:07:12,080 --> 01:07:13,760
Let me go back into G.

1398
01:07:13,760 --> 01:07:14,880
What is the value of Y?

1399
01:07:14,880 --> 01:07:15,880
It's zero.

1400
01:07:15,880 --> 01:07:17,360
Let's go back to F.

1401
01:07:18,400 --> 01:07:20,080
So you can debug interactively.

1402
01:07:20,080 --> 01:07:23,280
So that's post-mortem debugger just to present debug.

1403
01:07:23,280 --> 01:07:25,480
Don't forget to press exit once you're done.

1404
01:07:26,320 --> 01:07:31,320
Otherwise you won't be able to continue executing code.

1405
01:07:31,320 --> 01:07:33,240
You can ask the user for input.

1406
01:07:33,240 --> 01:07:35,920
No, it's too slow.

1407
01:07:37,840 --> 01:07:39,480
So you can get user inputs.

1408
01:07:40,480 --> 01:07:42,800
And the one that you probably see often

1409
01:07:42,800 --> 01:07:46,160
is matplotlib inlines that allow matplotlib

1410
01:07:46,160 --> 01:07:49,560
to actually display things directly inside your notebook.

1411
01:07:51,320 --> 01:07:54,720
You might see often sometimes other value here.

1412
01:07:54,720 --> 01:07:56,080
So if you want the Windows to pop up,

1413
01:07:56,080 --> 01:07:58,640
you can change to Qt or WX or OSX

1414
01:07:58,640 --> 01:08:00,400
depending on which platform you are.

1415
01:08:00,400 --> 01:08:02,480
We're not going to do that.

1416
01:08:02,480 --> 01:08:04,720
And I'm just going to stop with this one.

1417
01:08:04,720 --> 01:08:06,320
Something we might want to see later,

1418
01:08:06,320 --> 01:08:09,040
but Dennis is not here, so we're probably going to go fast.

1419
01:08:09,040 --> 01:08:11,680
If you want to transform a function

1420
01:08:11,680 --> 01:08:13,400
into something more interactive,

1421
01:08:13,400 --> 01:08:18,200
I would advise for you to look for what Jupyter widgets are,

1422
01:08:18,200 --> 01:08:23,200
and in particular the IPY widgets package.

1423
01:08:23,680 --> 01:08:27,760
So if you import interact from IPY widgets

1424
01:08:27,760 --> 01:08:31,720
and you use at interact, you don't have to put all of that

1425
01:08:31,720 --> 01:08:33,920
unless you want to do some modification

1426
01:08:33,920 --> 01:08:35,360
on top of a function.

1427
01:08:35,360 --> 01:08:37,360
What it will do, it will try to automatically

1428
01:08:37,360 --> 01:08:40,440
make a GUI for you where you can tweak parameters.

1429
01:08:40,440 --> 01:08:43,360
So for example here, I've just copied and pasted

1430
01:08:43,360 --> 01:08:45,000
the code that was above,

1431
01:08:45,000 --> 01:08:46,960
and it made a function with a plot,

1432
01:08:46,960 --> 01:08:50,040
and it say well, I want my color to be,

1433
01:08:50,040 --> 01:08:53,720
the value of color here to be either C0, C1, or C2.

1434
01:08:53,720 --> 01:08:56,960
My function is either to be a sign or a cosine,

1435
01:08:56,960 --> 01:09:00,580
and I saw that lambda is a float value,

1436
01:09:00,580 --> 01:09:02,320
so I'm going to automatically make a slider

1437
01:09:02,320 --> 01:09:04,040
to make you change lambda.

1438
01:09:04,040 --> 01:09:06,240
And so now if I want to see how this function change

1439
01:09:06,240 --> 01:09:07,840
when I change lambda, I move it,

1440
01:09:07,840 --> 01:09:10,880
and it's going to recompute it and re-plot it.

1441
01:09:10,880 --> 01:09:12,280
And so now I can basically say,

1442
01:09:12,280 --> 01:09:14,520
oh, here is a sign, here is a cosine,

1443
01:09:14,520 --> 01:09:17,200
and actually wants the cosine to have color C1.

1444
01:09:18,160 --> 01:09:21,000
So now if you want to have some interaction,

1445
01:09:21,000 --> 01:09:23,280
you can do that using interact.

1446
01:09:23,280 --> 01:09:26,120
You can build some relatively complex UI

1447
01:09:26,120 --> 01:09:27,880
if you go deep into this package.

1448
01:09:30,880 --> 01:09:33,600
But usually using a single line after a function,

1449
01:09:33,600 --> 01:09:38,200
you can basically get something which is interactive.

1450
01:09:38,200 --> 01:09:42,520
And I think it's 10.13, so we have two minutes before breaks.

1451
01:09:42,520 --> 01:09:45,080
We're going to stop the recording for a few minutes,

1452
01:09:45,080 --> 01:09:48,680
but you get some stretch your legs, get some coffee,

1453
01:09:48,680 --> 01:09:50,760
and get back for the second round.

1454
01:09:51,080 --> 01:10:01,200
So here is a rigid,

1455
01:10:07,200 --> 01:10:13,080
spreadable object for race.

1456
01:10:13,080 --> 01:10:18,080
I have some Jupiter stickers in the front if you want some.

1457
01:10:23,880 --> 01:10:25,040
Stickers and stickers.

1458
01:10:26,080 --> 01:10:27,080
Yes.

1459
01:10:27,080 --> 01:10:30,080
They need to be rewritten.

1460
01:10:30,080 --> 01:10:35,080
In Jupiter notebook you have a single instance of the notebook.

1461
01:10:36,080 --> 01:10:39,080
And in Jupiter lab you may have several instances.

1462
01:10:39,080 --> 01:10:44,080
And so you basically get assumptions or extensions that you only have one notebook.

1463
01:10:44,080 --> 01:10:47,080
And so you can't just...

1464
01:10:47,080 --> 01:10:50,080
Because everything was global in the previous one.

1465
01:10:50,080 --> 01:10:51,080
Yes.

1466
01:10:51,080 --> 01:10:56,080
But the story for extension is way better in Jupiter lab because it's officially supported.

1467
01:10:56,080 --> 01:10:59,080
There is actual APIs, there is stability.

1468
01:10:59,080 --> 01:11:02,080
There is a lot of stuff that you can do.

1469
01:11:02,080 --> 01:11:07,080
So I have to wait until that particular person transfers.

1470
01:11:07,080 --> 01:11:10,080
Or you rewrite it.

1471
01:11:10,080 --> 01:11:11,080
Thank you.

1472
01:11:11,080 --> 01:11:14,080
Two very specific questions.

1473
01:11:14,080 --> 01:11:21,080
One of them, for the multi-line select, the S code, there's a control T that will take

1474
01:11:21,080 --> 01:11:22,080
the highlighted variable.

1475
01:11:22,080 --> 01:11:24,080
Yes, it's there.

1476
01:11:24,080 --> 01:11:27,080
I don't remember how to do it.

1477
01:11:28,080 --> 01:11:31,080
I think it's not in the default key map, but it's possible.

1478
01:11:31,080 --> 01:11:33,080
Because you can...

1479
01:11:33,080 --> 01:11:37,080
Because one of the things is settings.

1480
01:11:37,080 --> 01:11:39,080
We won't see that.

1481
01:11:39,080 --> 01:11:41,080
Advanced setting editor.

1482
01:11:41,080 --> 01:11:43,080
Card mirror.

1483
01:11:43,080 --> 01:11:46,080
Control D is sublime, right?

1484
01:11:46,080 --> 01:11:47,080
Yes.

1485
01:11:47,080 --> 01:11:50,080
And then you can change the settings.

1486
01:11:50,080 --> 01:11:53,080
Card mirror.

1487
01:11:55,080 --> 01:11:58,080
Control D is sublime, right?

1488
01:11:58,080 --> 01:12:00,080
It's VS code.

1489
01:12:00,080 --> 01:12:04,080
I think it's originally sublime.

1490
01:12:06,080 --> 01:12:09,080
Are you going to highlight first, maybe?

1491
01:12:09,080 --> 01:12:13,080
I'm pretty sure no, but I've seen it.

1492
01:12:13,080 --> 01:12:16,080
But control D is already mapped to something else.

1493
01:12:16,080 --> 01:12:18,080
But yeah, you can do it.

1494
01:12:18,080 --> 01:12:21,080
You can go into the specific settings of code mirror.

1495
01:12:21,080 --> 01:12:23,080
I don't know how.

1496
01:12:23,080 --> 01:12:26,080
And yes, you can bind your own keyboard.

1497
01:12:26,080 --> 01:12:29,080
And then, other question.

1498
01:12:29,080 --> 01:12:38,080
In the spider ID, there's like a double percentage magic that is like an auto reload for imports.

1499
01:12:38,080 --> 01:12:39,080
Yes.

1500
01:12:39,080 --> 01:12:40,080
Does that exist?

1501
01:12:40,080 --> 01:12:42,080
I mean, it's actually come from my Bible.

1502
01:12:42,080 --> 01:12:43,080
Oh, yeah.

1503
01:12:43,080 --> 01:12:44,080
I figured.

1504
01:12:44,080 --> 01:12:45,080
But I never see it.

1505
01:12:45,080 --> 01:12:46,080
It's one of my later demo.

1506
01:12:46,080 --> 01:12:48,080
I can show it to you now.

1507
01:12:48,080 --> 01:12:54,080
Well, yeah, we're probably going to have to speed up because I'm 15 or 20 minutes late on my schedule.

1508
01:12:54,080 --> 01:12:56,080
So I want to show some of the latest.

1509
01:12:56,080 --> 01:12:57,080
But yes, it works.

1510
01:12:57,080 --> 01:12:59,080
And we're improving it.

1511
01:12:59,080 --> 01:13:03,080
The latest version of Python can do things with auto reload.

1512
01:13:03,080 --> 01:13:05,080
The previous couldn't.

1513
01:13:05,080 --> 01:13:07,080
It is limited, right?

1514
01:13:07,080 --> 01:13:08,080
It won't do everything.

1515
01:13:08,080 --> 01:13:14,080
But I think since the latest version, it's our two versions, two small versions ago,

1516
01:13:14,080 --> 01:13:20,080
it can actually remove and add methods from classes that it used to not do.

1517
01:13:20,080 --> 01:13:22,080
It used to only add or reload.

1518
01:13:22,080 --> 01:13:24,080
But now it's actually more.

1519
01:13:24,080 --> 01:13:30,080
You can always just pull up a terminal and make a new environment and have that one in the background.

1520
01:13:30,080 --> 01:13:31,080
Yeah.

1521
01:13:31,080 --> 01:13:33,080
I'm just too happy with mine.

1522
01:13:33,080 --> 01:13:35,080
I'm going to be representing this nation.

1523
01:13:35,080 --> 01:13:36,080
OK.

1524
01:13:36,080 --> 01:13:37,080
Thanks.

1525
01:13:37,080 --> 01:13:43,080
I have a few tutorials on separate things, tutorials, just trying to learn.

1526
01:13:43,080 --> 01:13:50,080
We just set up environments where I'm using the tool.

1527
01:13:50,080 --> 01:13:55,080
So I think here, I figured out some little things.

1528
01:13:55,080 --> 01:14:00,080
So I was able to like create a chart stream, I chose the widgets to render.

1529
01:14:00,080 --> 01:14:05,080
And I wanted that because I didn't do this in the virtual environment.

1530
01:14:05,080 --> 01:14:07,080
In other places, I've done it in the room.

1531
01:14:07,080 --> 01:14:13,080
So I need to install each installation of JupyterLab and the separate projects I'm working on.

1532
01:14:13,080 --> 01:14:17,080
I need to install the widgets in that environment, not just like...

1533
01:14:17,080 --> 01:14:18,080
Yes.

1534
01:14:18,080 --> 01:14:27,080
Well, the other thing you can do is we can discuss that later, but you can actually install JupyterLab once outside of the environment.

1535
01:14:27,080 --> 01:14:31,080
But after we sum up what you can do is actually you see here is Python 3.

1536
01:14:31,080 --> 01:14:33,080
What you can do is here select the environment.

1537
01:14:33,080 --> 01:14:37,080
So you can have one JupyterLab with many environments.

1538
01:14:37,080 --> 01:14:39,080
It's not super easy, but it's doable.

1539
01:14:39,080 --> 01:14:47,080
If you want to have one notebook in Python 3, one notebook in Python 2 in the same JupyterLab, it's possible.

1540
01:14:47,080 --> 01:14:50,080
And usually that's how I am set up.

1541
01:14:50,080 --> 01:14:58,080
Like basically I will have one JupyterLab or one JupyterNotebook and I just say, oh no, I want this notebook to be in this environment, this notebook to be in this environment.

1542
01:14:58,080 --> 01:15:02,080
And then you don't need to do the lab extension in the environment.

1543
01:15:02,080 --> 01:15:04,080
You can do the lab extension outside of the environment.

1544
01:15:04,080 --> 01:15:10,080
You still need to have the widgets, the IqI widget installed in the environment, but that's way easier because it's just bit.

1545
01:15:10,080 --> 01:15:15,080
I think that's the reason I didn't understand.

1546
01:15:15,080 --> 01:15:19,080
The extensions needed to also be in the environment every other time I use it.

1547
01:15:19,080 --> 01:15:25,080
Yeah, no, it's not always obvious.

1548
01:15:25,080 --> 01:15:28,080
Yeah, and we can work on that.

1549
01:15:28,080 --> 01:15:30,080
See if I can get something to drink.

1550
01:15:58,080 --> 01:16:06,080
Yeah.

1551
01:16:06,080 --> 01:16:16,080
First.

1552
01:16:36,080 --> 01:16:56,080
Yeah.

1553
01:16:56,080 --> 01:17:11,080
So all we did was.

1554
01:17:11,080 --> 01:17:13,080
It's the instruction is not working.

1555
01:17:13,080 --> 01:17:15,080
There is a binder.

1556
01:17:15,080 --> 01:17:18,080
Yeah, it's working.

1557
01:17:18,080 --> 01:17:22,080
Got stuck in a very interesting.

1558
01:17:22,080 --> 01:17:24,080
Do you dare try it again?

1559
01:17:24,080 --> 01:17:27,080
Double clicking something in the item.

1560
01:17:27,080 --> 01:17:36,080
You're stuck in.

1561
01:17:36,080 --> 01:17:39,080
It's depending whether you press command or not.

1562
01:17:39,080 --> 01:17:52,080
If you press command and click, it won't behave the same as if you just click.

1563
01:17:52,080 --> 01:17:58,080
Don't do it.

1564
01:17:58,080 --> 01:18:03,080
How do you try turning it up and down again?

1565
01:18:03,080 --> 01:18:19,080
That's sounds about right.

1566
01:18:19,080 --> 01:18:47,080
Okay.

1567
01:18:47,080 --> 01:18:58,080
Yeah.

1568
01:18:58,080 --> 01:19:18,080
Depends what people are doing.

1569
01:19:18,080 --> 01:19:27,080
So you speak to the friends.

1570
01:19:27,080 --> 01:19:29,080
So yeah, it might be that might be memory.

1571
01:19:29,080 --> 01:19:35,080
You probably have to talk to that folks.

1572
01:19:35,080 --> 01:19:43,080
So yeah, usually, usually people who use pandas and you learn stuff because pandas a lot of copy our memory down.

1573
01:19:43,080 --> 01:19:49,080
But do you have your own server or your own Amazon cloud?

1574
01:19:49,080 --> 01:19:54,080
Is it is it like your physical machine or is it it's your physical?

1575
01:19:54,080 --> 01:19:57,080
Is it's.

1576
01:19:57,080 --> 01:20:02,080
Academic research.

1577
01:20:02,080 --> 01:20:03,080
Company.

1578
01:20:03,080 --> 01:20:04,080
Company.

1579
01:20:04,080 --> 01:20:06,080
Okay.

1580
01:20:06,080 --> 01:20:10,080
So Jupiter habit itself won't take much.

1581
01:20:10,080 --> 01:20:19,080
What what what you might want to look at is our users living long time notebook where they don't interact.

1582
01:20:19,080 --> 01:20:23,080
They forgot to forget to shut down the notebook.

1583
01:20:23,080 --> 01:20:30,080
And if that's the case, you might want to look into some Jupiter that automatically stop the book that are not running.

1584
01:20:30,080 --> 01:20:34,080
If someone has not been interacting for minutes, just stop it.

1585
01:20:34,080 --> 01:20:38,080
And so then you will use less resources in general.

1586
01:20:38,080 --> 01:20:53,080
Otherwise, I would suggest to start to look at things that are not to be there have been inside using like Dask distributed and other stuff that allow you to distribute things across many computers.

1587
01:20:53,080 --> 01:20:58,080
And where where usually you want to set up things in a way where you have is actually a small machine.

1588
01:20:58,080 --> 01:21:04,080
And what it does is just a font that will start each user on a different machine.

1589
01:21:04,080 --> 01:21:10,080
And that's how you would say that's how you would scale to 700 users.

1590
01:21:10,080 --> 01:21:13,080
I'm not the best person to talk about that.

1591
01:21:13,080 --> 01:21:18,080
You can try to talk with Paul, but most of the developer who are doing that are not here.

1592
01:21:18,080 --> 01:21:22,080
So I won't be that helpful.

1593
01:21:22,080 --> 01:21:26,080
Yeah, but that's a great point.

1594
01:21:26,080 --> 01:21:40,080
And one of the questions is if one user wants to share his notebook, is that enough on the source side to make that notebook read by text?

1595
01:21:40,080 --> 01:21:43,080
So, yes, as long as two people don't open the same notebook at the same time.

1596
01:21:43,080 --> 01:21:51,080
It's basically like if two people were to open the same file in Vim or in Emacs or in the last one who writes Win.

1597
01:21:51,080 --> 01:21:57,080
We had a prototype. We have a prototype of real time collaboration that works with Google document.

1598
01:21:57,080 --> 01:22:02,080
The problem is Google deprecated that so we can't release it.

1599
01:22:02,080 --> 01:22:13,080
It works, but you need you need as a user for your account when you set up, you need to go to Google and say, oh, I want an API key and you can't create new ones.

1600
01:22:13,080 --> 01:22:20,080
So we can't we can't release it because it works, but it's useless unless you already have a key.

1601
01:22:20,080 --> 01:22:23,080
And anyway, I know that your girl is going to shut that down.

1602
01:22:23,080 --> 01:22:27,080
And so most of the work is now to actually rewrite the backend of the right.

1603
01:22:27,080 --> 01:22:29,080
So write some some collaboration.

1604
01:22:29,080 --> 01:22:41,080
And once you have a time collaboration, yes, you will have ways of saying, well, like Google document, you open a notebook, you send a URL to your collaborators and they just open something.

1605
01:22:41,080 --> 01:22:42,080
And they just like basically.

1606
01:22:51,080 --> 01:22:54,080
So it does to save.

1607
01:22:54,080 --> 01:22:57,080
So if you when you execute to actually change the notebook and it will auto save.

1608
01:22:57,080 --> 01:23:06,080
But if you set the permission right, if you set the permission to read, write for the owner and read only for the group on Unix, that's fine.

1609
01:23:11,080 --> 01:23:15,080
Yes, they just won't be able to save the modified version.

1610
01:23:17,080 --> 01:23:20,080
They will. They might get some error messages in the thing.

1611
01:23:20,080 --> 01:23:23,080
Oh, this is really only our X, Y, Z, but that should be fine.

1612
01:23:32,080 --> 01:23:33,080
Sure.

1613
01:23:42,080 --> 01:23:43,080
Where is he?

1614
01:23:48,080 --> 01:23:52,080
OK, so you can talk to him about oh, he's just there with a green shirt.

1615
01:23:57,080 --> 01:24:02,080
It's fine. It's OK. It's it's it's it's a sticky thing is is not sticky anymore.

1616
01:24:06,080 --> 01:24:07,080
On the what?

1617
01:24:08,080 --> 01:24:09,080
No, nothing.

1618
01:24:12,080 --> 01:24:14,080
I OK. Good. Good.

1619
01:24:25,080 --> 01:24:26,080
Sweet.

1620
01:24:27,080 --> 01:24:30,080
I know some people in the core team as we're working on the robot framework.

1621
01:24:32,080 --> 01:24:34,080
I think you should talk to Nick Bollweg.

1622
01:24:34,080 --> 01:24:40,080
In Google, Jupiter dash R.S. and those folks would be really happy to get to get feedback from you.

1623
01:24:47,080 --> 01:24:50,080
I can't. I have to to leave on Sunday morning.

1624
01:24:52,080 --> 01:24:57,080
Ask ask Paul and let you hear in the green shirt if they are here.

1625
01:24:57,080 --> 01:24:59,080
I think Paul will do will do it.

1626
01:24:59,080 --> 01:25:02,080
I think we are happy to get to get some contribution.

1627
01:25:29,080 --> 01:25:30,080
Uh huh.

1628
01:25:38,080 --> 01:25:40,080
Oh, you mean a lot of my frame in Jupiter?

1629
01:25:44,080 --> 01:25:48,080
I don't know, but probably I'm not the right person to ask.

1630
01:25:48,080 --> 01:25:51,080
I would ask Paul who is standing over there with a black coat.

1631
01:25:51,080 --> 01:25:54,080
He might direct you to the right person.

1632
01:26:05,080 --> 01:26:07,080
Oh, yeah, that's not too far away.

1633
01:26:07,080 --> 01:26:09,080
Oh, yeah, that's not too far away.

1634
01:26:29,080 --> 01:26:31,080
You probably mean the.

1635
01:26:31,080 --> 01:26:43,080
So you can also you can also display JavaScript as a probably need an extension for Jupiter lab, but you can you can display JavaScript and get the handle on the elements where you do whatever you want.

1636
01:27:31,080 --> 01:27:49,080
Should we restart slowly? At least I'm going to give you tips to blew up your colleagues mine.

1637
01:27:49,080 --> 01:27:56,080
So how many of you write math, use gamma Greek letters and stuff like that often?

1638
01:27:56,080 --> 01:28:00,080
We have two people that know how to write Greek.

1639
01:28:00,080 --> 01:28:09,080
Okay, so sometimes you want to have, you know, we are always told that don't use variable names with only one letter.

1640
01:28:09,080 --> 01:28:15,080
So, of course, you use, you know, you use alpha beta because it's easier.

1641
01:28:15,080 --> 01:28:24,080
What you can actually do in in in IPython is if you actually want an alpha, you will precede it by a backslash.

1642
01:28:24,080 --> 01:28:29,080
You know, like in LaTeX and you should press tab and you will get an alpha.

1643
01:28:29,080 --> 01:28:39,080
And if it's a if it's a derivative or actually a second derivative, you can put a double dot on it and you can say that it's equal to whatever.

1644
01:28:39,080 --> 01:28:44,080
And so now you can have your your variables that are that are extremely compact.

1645
01:28:44,080 --> 01:28:51,080
And so you can do that with many of the things like if you want to have a force with a vector on top.

1646
01:28:51,080 --> 01:28:58,080
Well, here I don't have the font, but you can do you can do stuff like that.

1647
01:28:58,080 --> 01:29:03,080
Can I use emojis and things like that?

1648
01:29:03,080 --> 01:29:07,080
Well, no, because they're not supported identifiers by by Python.

1649
01:29:07,080 --> 01:29:12,080
We only complete two things that will be actually recognized as variable names.

1650
01:29:12,080 --> 01:29:19,080
So you can't you can't do that. Not not all the things are recognized by Python as as actual variables.

1651
01:29:19,080 --> 01:29:27,080
There are a few a few gotchas like epsilon and var epsilon are actually exactly the same.

1652
01:29:27,080 --> 01:29:29,080
So they can look different.

1653
01:29:29,080 --> 01:29:39,080
But if I do if I do epsilon press tab equal one and I ask the value of var epsilon, it's also one.

1654
01:29:39,080 --> 01:29:44,080
So that's something like that. Same for phi and var phi.

1655
01:29:44,080 --> 01:29:49,080
What? So I know some people really like that.

1656
01:29:49,080 --> 01:29:53,080
But it was just to get your attention so that we can we can restart.

1657
01:29:59,080 --> 01:30:06,080
Why? Can you try to force refresh? Yes.

1658
01:30:06,080 --> 01:30:13,080
So if for some of you, the widgets don't work, try to force refresh because sometimes your browser will cache Jupiter lab.

1659
01:30:13,080 --> 01:30:21,080
The first Jupiter lab, if it doesn't, we can figure that out exactly how to install things correctly so that you have you have widgets.

1660
01:30:21,080 --> 01:30:25,080
We won't do much with jets. So that's a good good thing.

1661
01:30:25,080 --> 01:30:35,080
OK, let's slowly move forward and let make you Python experts at things that not a lot of people on Earth understand,

1662
01:30:35,080 --> 01:30:39,080
which is a second notebook. So I'm going to let's do things slowly.

1663
01:30:39,080 --> 01:30:43,080
I'm going to close this notebook, say no, I don't want to save it.

1664
01:30:43,080 --> 01:30:50,080
I'm going to go to these things where you have a person running hopefully on your laptop.

1665
01:30:50,080 --> 01:30:53,080
I don't have it. I don't know why.

1666
01:30:53,080 --> 01:30:56,080
So when you close the document, you have the document and you have the computation back end.

1667
01:30:56,080 --> 01:31:00,080
You need to shut down the computation back end as well as the kernel.

1668
01:31:00,080 --> 01:31:05,080
You see that I have here one which is still attached to to one beyond playing Python.

1669
01:31:05,080 --> 01:31:09,080
I'm going to shut that down to free some of the resources on my laptop.

1670
01:31:09,080 --> 01:31:19,080
You don't have to right now, but if you have tens of notebooks, they can still run in the background and use use memory and a little bit of of CPU.

1671
01:31:19,080 --> 01:31:23,080
And I'm going to reopen the second one.

1672
01:31:23,080 --> 01:31:27,080
So again, I can I can open and collapse things by clicking here.

1673
01:31:27,080 --> 01:31:34,080
And once you open this one, you should see here is that now you have a notebook notebook running.

1674
01:31:34,080 --> 01:31:42,080
Depending on what you're doing and what you're working on, you may have heard about new thing in Python called a sink and a wait.

1675
01:31:42,080 --> 01:31:47,080
And you most likely have heard that things are super complicated and it's hard to run.

1676
01:31:47,080 --> 01:31:55,080
And we tried to make that pretty easy for you, especially if you're interacting with remote resources like if you're downloading your eyes or something like that.

1677
01:31:55,080 --> 01:31:59,080
I think in a way it can be useful for you to make this mixing concurrent.

1678
01:31:59,080 --> 01:32:01,080
So not parallel. There is a slight difference.

1679
01:32:01,080 --> 01:32:14,080
It won't make your code magically faster, but it may make some of the tasks you're doing when you're waiting from something which is remote easier to work with.

1680
01:32:14,080 --> 01:32:19,080
So just as a quick introduction, I think in a way I'm trying to understand what it is.

1681
01:32:19,080 --> 01:32:22,080
It allows Python to interleave tasks.

1682
01:32:22,080 --> 01:32:28,080
And so usually the way your computer does that on a day to day basis is just stop a task in the middle of what it's doing.

1683
01:32:28,080 --> 01:32:31,080
The CPU does that magically and it's not another task.

1684
01:32:31,080 --> 01:32:36,080
And so you may have heard about threads when you do thread that you have different tasks and you have preemptive multitasking.

1685
01:32:36,080 --> 01:32:41,080
The CPU will suddenly say, no, you stop and you start.

1686
01:32:41,080 --> 01:32:42,080
So that's that's the OS level.

1687
01:32:42,080 --> 01:32:46,080
What we can do is move that at some point at the Python level.

1688
01:32:46,080 --> 01:32:49,080
But we need some kind of agreement.

1689
01:32:49,080 --> 01:32:59,080
And so to take a metaphor, when you're going to a restaurant and you're going to get seated to a table, the waiter will be able to take care of several people at once.

1690
01:32:59,080 --> 01:33:02,080
It will be able to take your orders and the order of the next person.

1691
01:33:02,080 --> 01:33:09,080
But you have social conventions that tell us when the waiter can move from your table to another.

1692
01:33:09,080 --> 01:33:15,080
It's not he's not going or she's not going to to leave your table while you're giving your order.

1693
01:33:15,080 --> 01:33:23,080
And at the same time, the convention is that you won't hold the waiter here if you're still reading the reading the menu.

1694
01:33:23,080 --> 01:33:25,080
No, no, it's fine. I'm not ready.

1695
01:33:25,080 --> 01:33:27,080
You can take care of somebody else.

1696
01:33:27,080 --> 01:33:30,080
And that's basically what I think in a way are in Python.

1697
01:33:30,080 --> 01:33:38,080
You basically have to say at which point Python or the scheduler is allowed to move from one point to another.

1698
01:33:38,080 --> 01:33:41,080
And so that's why you can have this weird syntax.

1699
01:33:41,080 --> 01:33:46,080
We say, well, if I have a function which is a sink, it may be interrupted in the middle.

1700
01:33:46,080 --> 01:33:55,080
Like basically a function going to the restaurant is going to be a sink because while you're going to the restaurant, you may at some point like the waiter can go somewhere else.

1701
01:33:55,080 --> 01:34:05,080
And so if you try to do that, some of what I've seen here in pure Python or a top level in the Python file and do Python dot my Python file, it might not work.

1702
01:34:05,080 --> 01:34:14,080
So let's let's deactivate I Python automatic integration with this magic as you can await and try to run some code.

1703
01:34:14,080 --> 01:34:22,080
And so let's say, well, instead of wait, importing from time, I'm going to import probably zoom a tiny bit import from as in K.O.

1704
01:34:22,080 --> 01:34:25,080
And I say, well, sleep five seconds.

1705
01:34:25,080 --> 01:34:34,080
I didn't sleep because you actually need to to await sleep because sleep you say, well, you can do something else while you're sleeping.

1706
01:34:34,080 --> 01:34:37,080
But if you do that in pure Python, it will just say, no, it's a syntax error.

1707
01:34:37,080 --> 01:34:40,080
I don't know how to do that.

1708
01:34:40,080 --> 01:34:43,080
Let's keep a bit about exactly how you would try to solve that.

1709
01:34:43,080 --> 01:34:44,080
And that doesn't work.

1710
01:34:44,080 --> 01:34:55,080
And so what you can do in a Python is start with auto it equal true and say, well, if you see in a wait and I haven't told you how to deal with that, do something magic.

1711
01:34:55,080 --> 01:35:01,080
And so now what we can do in a Python that we can do in pure Python is just have a sleep five within the wait.

1712
01:35:01,080 --> 01:35:05,080
And then you have before and after and it's set for five seconds.

1713
01:35:05,080 --> 01:35:08,080
So sleep is not really interesting.

1714
01:35:08,080 --> 01:35:18,080
So let's try to do some some interesting things and get fifty try to get fifty results from an API of ice and fire characters.

1715
01:35:18,080 --> 01:35:21,080
Let's get the fifty first character from this API.

1716
01:35:21,080 --> 01:35:27,080
You may have guessed where this is coming from if you're watching HBO on Sunday.

1717
01:35:27,080 --> 01:35:32,080
And so let's try to get like ask for the first character, get it and do a loop with that.

1718
01:35:32,080 --> 01:35:41,080
But you will see that in a normal Python, if you use requests, if you use request before or you are a lib, what's happening is it's relatively fast.

1719
01:35:41,080 --> 01:35:48,080
But you see that you start a request, get the response and start the next request after the first response came back.

1720
01:35:48,080 --> 01:35:52,080
So here I have only 50. And so it took quite some time.

1721
01:35:52,080 --> 01:35:56,080
And if you look at the CPU of my machine, it was not going to the maximum.

1722
01:35:56,080 --> 01:35:58,080
It was basically doing only one task at a time.

1723
01:35:58,080 --> 01:36:03,080
And most of the time it's pain waiting for something to happen.

1724
01:36:03,080 --> 01:36:07,080
And so what I think in a way it will allow you to do is to do that concurrently.

1725
01:36:07,080 --> 01:36:17,080
The computer will be able to start many connections at once without having to use threads and start the request for the first character and start the request for the second character before the request from the first characters ended.

1726
01:36:19,080 --> 01:36:27,080
If you want to really know more about how to use that, I would suggest one of this afternoon tutorial on AOHTDP.

1727
01:36:27,080 --> 01:36:29,080
We are just going to see how we can use that.

1728
01:36:29,080 --> 01:36:39,080
And so what you can do with in Python is to just import AOHTDP, which is similar to requests, except every now and then you have to await the object.

1729
01:36:39,080 --> 01:36:43,080
And when you object, what awaits the object, something else can run at the same time.

1730
01:36:43,080 --> 01:36:47,080
So this is how to use AOHTDP.

1731
01:36:47,080 --> 01:36:52,080
You have to create a session and then you have to manipulate this session and ask this session to get things.

1732
01:36:52,080 --> 01:36:56,080
So let's try to get a single result.

1733
01:36:56,080 --> 01:36:58,080
So here is someone who knows nothing.

1734
01:37:00,080 --> 01:37:07,080
Let's put that in a function async def like that.

1735
01:37:07,080 --> 01:37:09,080
And let's see if we can just.

1736
01:37:09,080 --> 01:37:12,080
So this function is async def because it uses await.

1737
01:37:12,080 --> 01:37:14,080
You can't use await in functions that don't have async.

1738
01:37:14,080 --> 01:37:17,080
That's about everything you need to know.

1739
01:37:19,080 --> 01:37:27,080
And now we're going to again do this client session and await getting this character.

1740
01:37:27,080 --> 01:37:32,080
And again, this just works in IPython or in pure Python.

1741
01:37:32,080 --> 01:37:34,080
It will be a syntax error.

1742
01:37:34,080 --> 01:37:41,080
So now if you want to speed up looking at who has died in the last season,

1743
01:37:41,080 --> 01:37:44,080
because everyone is dying anyway at some point in this show,

1744
01:37:44,080 --> 01:37:52,080
what you would do is do a for loop and you will create, you say, well, I want to have this 50 task

1745
01:37:52,080 --> 01:37:57,080
where I will get the character, the nth character.

1746
01:37:57,080 --> 01:38:00,080
And you create a list of those things that you want to do.

1747
01:38:01,080 --> 01:38:10,080
And what you will do after is just await from all of the things you wanted to do.

1748
01:38:10,080 --> 01:38:14,080
And because now they are, we can see here, they are async def.

1749
01:38:14,080 --> 01:38:21,080
It means that on this line, each of these functions you called can be run concurrently.

1750
01:38:21,080 --> 01:38:27,080
So you will have the 12th and the 23rd that will be running at the same time.

1751
01:38:27,080 --> 01:38:35,080
And so now hopefully what should happen is that we will fetch the first one

1752
01:38:35,080 --> 01:38:39,080
and start to fetch the second one before the first one is actually there.

1753
01:38:41,080 --> 01:38:49,080
And you see that, well, suddenly getting 50 of those characters was way, way faster

1754
01:38:49,080 --> 01:38:54,080
because we were able to actually start them all in a bunch.

1755
01:38:54,080 --> 01:38:59,080
And then hopefully if it took one second to get one character, it takes only one second to get 50.

1756
01:39:00,080 --> 01:39:02,080
Does that make some sense?

1757
01:39:03,080 --> 01:39:08,080
And so what you can see here is that, well, you might not exactly understand

1758
01:39:08,080 --> 01:39:14,080
how each of the library works and which call to do, but you won't have in IPython and in Jupyter,

1759
01:39:14,080 --> 01:39:19,080
you won't have to mess with creating your own event loop or submitting tasks or things like that.

1760
01:39:19,080 --> 01:39:26,080
You can just use normal syntax at top level without having to create an application and run the thing.

1761
01:39:26,080 --> 01:39:32,080
So that's just to tell you that if you want to touch async and await, you can do that.

1762
01:39:32,080 --> 01:39:36,080
It's not as scary as people show you online.

1763
01:39:36,080 --> 01:39:38,080
And we've been working hard on that.

1764
01:39:38,080 --> 01:39:47,080
If you don't want to use async IOs, there are also other libraries that do async and await that are sometimes easier to use.

1765
01:39:48,080 --> 01:39:53,080
And so what you can also do is tell IPython to use those.

1766
01:39:54,080 --> 01:40:03,080
So just to show you, if you want to have two tasks that do things like one every two seconds and one every second,

1767
01:40:04,080 --> 01:40:06,080
we will use this other library.

1768
01:40:08,080 --> 01:40:16,080
So here we will create a function that sleeps for n seconds and then print a message.

1769
01:40:17,080 --> 01:40:21,080
I'm going to do it only 30 times just to avoid having an infinite loop.

1770
01:40:23,080 --> 01:40:30,080
I'm going to tell IPython to use trio because here I'm using sleep from trio and not async IO.

1771
01:40:31,080 --> 01:40:35,080
And what I will do here is start two tasks.

1772
01:40:35,080 --> 01:40:44,080
One, I will start every task every one second to print plick and the other one every two seconds to print pluck.

1773
01:40:45,080 --> 01:40:46,080
Choose less.

1774
01:40:47,080 --> 01:40:49,080
And now everything is fine.

1775
01:40:49,080 --> 01:40:53,080
You have two concurrent tasks running in your notebook.

1776
01:40:54,080 --> 01:40:58,080
So if you're interacting with a remote service and you want to check something periodically,

1777
01:40:59,080 --> 01:41:02,080
you can do that relatively easily and you see that it keeps running.

1778
01:41:02,080 --> 01:41:03,080
It keeps working.

1779
01:41:03,080 --> 01:41:06,080
And you didn't have to use threads.

1780
01:41:08,080 --> 01:41:11,080
So that's some of the new features in IPython 7.

1781
01:41:12,080 --> 01:41:14,080
I don't remember.

1782
01:41:15,080 --> 01:41:17,080
I'm going to interrupt that.

1783
01:41:21,080 --> 01:41:23,080
And let you, is everyone okay?

1784
01:41:23,080 --> 01:41:26,080
Do you want to play with that or is it maybe too advanced?

1785
01:41:31,080 --> 01:41:39,080
Now I'm going to go back to the terminal because IPython is about powers running Python

1786
01:41:39,080 --> 01:41:43,080
and even if things are possible in the notebook, they're also possible at the shell.

1787
01:41:44,080 --> 01:41:47,080
So what you can do is you can either follow along in the browser.

1788
01:41:47,080 --> 01:41:53,080
What you can do is go there, create a new, scroll down and a new terminal.

1789
01:41:53,080 --> 01:41:58,080
Or if you have your own terminal you like, you can also go in your own terminal

1790
01:41:58,080 --> 01:42:01,080
and don't forget to activate the PyCon 2019 environment.

1791
01:42:02,080 --> 01:42:08,080
And let me just use the light theme because I'm going to guess you're going to see better in the light theme.

1792
01:42:10,080 --> 01:42:12,080
If I can zoom in.

1793
01:42:12,080 --> 01:42:17,080
When you launch the terminal, does it just automatically launch whatever your default terminal on your system is?

1794
01:42:17,080 --> 01:42:19,080
Or is it always a batch?

1795
01:42:19,080 --> 01:42:23,080
So the question was if you launch a terminal, does it automatically launch a terminal on your system?

1796
01:42:23,080 --> 01:42:25,080
It should.

1797
01:42:26,080 --> 01:42:30,080
I know there might be some issue on Windows where it might not be able to,

1798
01:42:30,080 --> 01:42:33,080
sometimes it will try to run command on PowerShell.

1799
01:42:33,080 --> 01:42:38,080
And it might be some issues there where we might need to work on that on some machines.

1800
01:42:40,080 --> 01:42:43,080
Of course, if it's trying to run batch, you need to have batch installed.

1801
01:42:44,080 --> 01:42:48,080
Depending on how you, with Anaconda I don't remember exactly what it does on Windows,

1802
01:42:48,080 --> 01:42:55,080
but depending on how you install on Windows, it may sometimes start batch or sometimes start PowerShell,

1803
01:42:55,080 --> 01:42:57,080
depending on how you install it.

1804
01:42:57,080 --> 01:43:00,080
Okay, but on Mac or Linux it would just run whatever your default?

1805
01:43:00,080 --> 01:43:02,080
Yes, on Mac and Linux it would run whatever your default.

1806
01:43:02,080 --> 01:43:04,080
Yes, on Mac and Linux it would run whatever your default is.

1807
01:43:04,080 --> 01:43:09,080
And it's compared to other browser terminals, this is a full feature terminal.

1808
01:43:09,080 --> 01:43:15,080
So if I want to use Vim and play with Vim, I can use Vim in my terminal.

1809
01:43:15,080 --> 01:43:20,080
You don't have to, I'm a Vim person, I can't quit.

1810
01:43:21,080 --> 01:43:23,080
I'm stealing Paul's jokes.

1811
01:43:23,080 --> 01:43:24,080
Okay.

1812
01:43:28,080 --> 01:43:29,080
Okay.

1813
01:43:30,080 --> 01:43:32,080
How did you launch the terminal?

1814
01:43:32,080 --> 01:43:34,080
How did I launch the terminal? Good question.

1815
01:43:34,080 --> 01:43:40,080
We're going to see the JupyterLab UI later, but usually if you go on the folder here,

1816
01:43:40,080 --> 01:43:44,080
you have these new things that create those panels here.

1817
01:43:44,080 --> 01:43:47,080
Let me reopen that and close the launcher.

1818
01:43:48,080 --> 01:43:51,080
If you press plus, it will open a launcher.

1819
01:43:51,080 --> 01:43:53,080
And the launcher allows you to create Python notebook.

1820
01:43:53,080 --> 01:43:56,080
I also have a bash kernel, so I can create bash notebook if I want to.

1821
01:43:56,080 --> 01:43:59,080
Console, you're not going to see that.

1822
01:43:59,080 --> 01:44:01,080
And terminal and text file.

1823
01:44:01,080 --> 01:44:06,080
And if I click on terminal, it should open a terminal here, which says terminal 2.

1824
01:44:06,080 --> 01:44:12,080
If I go to my running things here, I still see my old terminal, terminal 1.

1825
01:44:12,080 --> 01:44:14,080
So here I have my two terminals.

1826
01:44:14,080 --> 01:44:17,080
I'm going to close terminal 1, shut down terminal 1.

1827
01:44:17,080 --> 01:44:19,080
And I have my terminal 2 here.

1828
01:44:19,080 --> 01:44:22,080
I'm going to close my notebook and shut down my notebook.

1829
01:44:22,080 --> 01:44:28,080
Again, I'm going to go there, click plus, and I can go to terminal.

1830
01:44:28,080 --> 01:44:34,080
Or if you close all your tabs, the launcher automatically appear and you can go to terminal.

1831
01:44:35,080 --> 01:44:38,080
What does the little red X indicate in your terminal?

1832
01:44:38,080 --> 01:44:45,080
So that's a custom thing that tells me that I have a Git repository and the Git repository has changes.

1833
01:44:45,080 --> 01:44:47,080
It's not specific to Jupyter.

1834
01:44:47,080 --> 01:44:50,080
It's specific to how I configure my machine.

1835
01:44:50,080 --> 01:44:54,080
And that tells me I am in the PyCon 2019 branch.

1836
01:44:54,080 --> 01:45:03,080
I need to do, I need to do conda activate PyCon 2019.

1837
01:45:03,080 --> 01:45:06,080
If I want to be in the PyCon 2019 environment.

1838
01:45:06,080 --> 01:45:12,080
And if I want to change my PS1, if that is too long, I just need to call up that.

1839
01:45:12,080 --> 01:45:20,080
That's more bash things, but you can do PS1 equal to H.

1840
01:45:22,080 --> 01:45:24,080
No space.

1841
01:45:27,080 --> 01:45:31,080
That's work. I don't know why. Anyway, probably did something wrong.

1842
01:45:32,080 --> 01:45:35,080
Whatever, that's my own configuration. Sorry about that.

1843
01:45:35,080 --> 01:45:41,080
Let's erase the screen and let's start IPython as a repo.

1844
01:45:41,080 --> 01:45:48,080
So that's a pure terminal IPython. That's strange. It's 7.2. It will be 7.5. Anyway.

1845
01:45:48,080 --> 01:45:53,080
So unlike normal Python repo, we have way more feature in the terminal as well.

1846
01:45:54,080 --> 01:45:59,080
It is a full-fledged terminal. It's not using a kernel like a notebook.

1847
01:45:59,080 --> 01:46:03,080
Which means that something that you can't do in a notebook, you can do in a terminal.

1848
01:46:03,080 --> 01:46:07,080
So for example, you've seen in a notebook that I was using cat.

1849
01:46:07,080 --> 01:46:12,080
And I don't remember the name of the file that we did was log.py.

1850
01:46:12,080 --> 01:46:17,080
So in the notebook, I did cat log.py.

1851
01:46:17,080 --> 01:46:24,080
But one thing I didn't tell you is that you can't run commands in a notebook that asks you to interact with them.

1852
01:46:24,080 --> 01:46:28,080
Like in a notebook, you wouldn't be able to do bang-vim or the notebook will hang.

1853
01:46:29,080 --> 01:46:33,080
In the pure terminal, you can actually call things like that.

1854
01:46:33,080 --> 01:46:42,080
So if I do bang-vim log.py, I remember you that bang runs something in an underlying shell.

1855
01:46:42,080 --> 01:46:48,080
Now I should be able to just edit my log file.

1856
01:46:51,080 --> 01:46:57,080
And quit if you know how to quit. Or you can use nano if you prefer to use nano if you know what you're doing in a terminal.

1857
01:46:58,080 --> 01:47:05,080
I can exit. It just means that you have more power when you want to run subcommands in the terminal.

1858
01:47:05,080 --> 01:47:08,080
Especially subcommands, we will ask you to interact with them.

1859
01:47:08,080 --> 01:47:14,080
If you want to do app get install and interact, you can't do that from a notebook. You can do that from the terminal.

1860
01:47:15,080 --> 01:47:20,080
It also means that we allow you to do some of the stuff in the terminal that is easy.

1861
01:47:20,080 --> 01:47:28,080
If you define a function, let's say I define a Fibonacci which is definitively wrong because it returns one.

1862
01:47:28,080 --> 01:47:32,080
And actually Fibonacci needs to take a number.

1863
01:47:33,080 --> 01:47:38,080
After some time, it's going to be annoying to write something really long.

1864
01:47:38,080 --> 01:47:44,080
So what you can do is you can actually configure a Python to tell it what your preferred editor is.

1865
01:47:44,080 --> 01:47:48,080
And use, well I want to edit my Fibonacci function.

1866
01:47:48,080 --> 01:47:52,080
And it will create a temporary file and now you're in your favorite text editor.

1867
01:47:52,080 --> 01:47:54,080
And you can edit your function.

1868
01:47:54,080 --> 01:48:07,080
If you like to use blind text or VS code or atom, those editors have specific flags that you need to pass to them for this to work.

1869
01:48:07,080 --> 01:48:13,080
But you can configure and say well open an atom window and when I close the atom window tell IPython to continue where it is.

1870
01:48:14,080 --> 01:48:18,080
So now you can properly define your function.

1871
01:48:21,080 --> 01:48:22,080
Yes.

1872
01:48:23,080 --> 01:48:26,080
So you see that now I saved and quit my editor.

1873
01:48:26,080 --> 01:48:31,080
And it brought me back to IPython and updated my Fibonacci.

1874
01:48:31,080 --> 01:48:34,080
Now if I do Fibonacci 3 and I will redo that again.

1875
01:48:34,080 --> 01:48:38,080
Now it's returning 2 which is still wrong but principal.

1876
01:48:38,080 --> 01:48:41,080
So you define a function. Let's say you define a function.

1877
01:48:41,080 --> 01:48:42,080
My function.

1878
01:48:42,080 --> 01:48:44,080
My function.

1879
01:48:46,080 --> 01:48:49,080
And you want to edit it at some point in the future.

1880
01:48:49,080 --> 01:48:56,080
Once you've configured properly IPython you can do percent edit which is one of the line magic we've seen.

1881
01:48:56,080 --> 01:49:02,080
We haven't seen but it's a line magic because it starts with percent and then you tell it the object you want to edit.

1882
01:49:02,080 --> 01:49:06,080
So my underscore function.

1883
01:49:06,080 --> 01:49:10,080
And what it will do it will squeeze error message without my system.

1884
01:49:10,080 --> 01:49:12,080
It will create a temporary file on this.

1885
01:49:12,080 --> 01:49:17,080
Invoke your editor to edit this file in a blocking manner.

1886
01:49:17,080 --> 01:49:18,080
Whatever.

1887
01:49:19,080 --> 01:49:21,080
Now you can edit that.

1888
01:49:22,080 --> 01:49:26,080
So if you haven't configured by default it's going to be Vim so you might want to have to quit.

1889
01:49:26,080 --> 01:49:28,080
So you edit your function.

1890
01:49:28,080 --> 01:49:32,080
So I want to write in Vim so I'm going to press I to be in edit mode.

1891
01:49:32,080 --> 01:49:35,080
In insert mode so you know that there is insert here.

1892
01:49:35,080 --> 01:49:37,080
Now you say you.

1893
01:49:39,080 --> 01:49:43,080
You change your function using your editor to return a value.

1894
01:49:45,080 --> 01:49:49,080
It's Vim so I need to press escape and it's press colon WQ.

1895
01:49:49,080 --> 01:49:53,080
And now my function is has been updated.

1896
01:49:54,080 --> 01:49:55,080
My.

1897
01:49:56,080 --> 01:49:57,080
Function.

1898
01:49:58,080 --> 01:50:00,080
I need to call it if I want to get the value.

1899
01:50:00,080 --> 01:50:05,080
That's not the best way to do it but it's just to show you that you can interact if you want to.

1900
01:50:05,080 --> 01:50:09,080
You can you will see that we already have a lot of things like Python.

1901
01:50:09,080 --> 01:50:11,080
We have syntax highlighting.

1902
01:50:11,080 --> 01:50:13,080
We have type completion as well.

1903
01:50:13,080 --> 01:50:16,080
Which is relatively advanced like in the notebook.

1904
01:50:17,080 --> 01:50:19,080
Import numpy as NP.

1905
01:50:19,080 --> 01:50:22,080
If I do NP dot and I press tab.

1906
01:50:22,080 --> 01:50:28,080
It should get it should take some time at the beginning to show up because it did inspect things.

1907
01:50:28,080 --> 01:50:31,080
It gives you all the completion you can do.

1908
01:50:31,080 --> 01:50:38,080
And one of the recent new thing is when you highlight one of them it will try to give you the type here.

1909
01:50:39,080 --> 01:50:43,080
And if it's a function it should try to tell you the signature of the function.

1910
01:50:43,080 --> 01:50:47,080
So here it didn't have the chance to complete everything when it said unknown.

1911
01:50:47,080 --> 01:50:52,080
When it says unknown it needs to actually get some more time to complete things.

1912
01:50:52,080 --> 01:50:54,080
So I re-invoke the computer.

1913
01:50:54,080 --> 01:51:00,080
And you see that now your functions you have parentheses because they are functions.

1914
01:51:00,080 --> 01:51:03,080
And it will give you the signature of the function here.

1915
01:51:03,080 --> 01:51:06,080
So you know that's numpy add new doc.

1916
01:51:06,080 --> 01:51:08,080
Well add new doc is maybe not super interesting.

1917
01:51:08,080 --> 01:51:11,080
But maybe maybe array is.

1918
01:51:11,080 --> 01:51:16,080
And you see that array is a function that take an object that you type.

1919
01:51:16,080 --> 01:51:19,080
Whether you need to copy which order and other parameters.

1920
01:51:24,080 --> 01:51:27,080
And so one of the things we have especially in IPython.

1921
01:51:27,080 --> 01:51:28,080
Yes.

1922
01:51:28,080 --> 01:51:31,080
I'm sorry but what mode are you in right now?

1923
01:51:31,080 --> 01:51:33,080
Is that a terminal? A console?

1924
01:51:33,080 --> 01:51:35,080
So that's a terminal. That's a pure terminal.

1925
01:51:35,080 --> 01:51:39,080
I'm doing that in my browser but I could do that in iTerm if I wish to.

1926
01:51:39,080 --> 01:51:42,080
I can open iTerm which is super small.

1927
01:51:42,080 --> 01:51:46,080
And I could do IPython in my terminal.

1928
01:51:46,080 --> 01:51:48,080
And now I have IPython.

1929
01:51:48,080 --> 01:51:50,080
Oh you're in a terminal and you ran IPython. Okay.

1930
01:51:50,080 --> 01:51:51,080
Yes.

1931
01:51:51,080 --> 01:51:56,080
So that works on a remote cluster if you're on a ssh or something like that.

1932
01:51:56,080 --> 01:51:59,080
Let me come back to this.

1933
01:52:10,080 --> 01:52:16,080
So Matt says that using IPython to write some quick Python is way better than using idle.

1934
01:52:16,080 --> 01:52:18,080
Not my words.

1935
01:52:18,080 --> 01:52:21,080
Well yeah because we have syntax highlighting.

1936
01:52:21,080 --> 01:52:23,080
Again we have syntax highlighting.

1937
01:52:23,080 --> 01:52:27,080
You will see a lot of tutorials that tell you to use a Python repel.

1938
01:52:27,080 --> 01:52:29,080
For quick things here we have multi-line editing.

1939
01:52:29,080 --> 01:52:40,080
If you do for i in range 10, print i.

1940
01:52:40,080 --> 01:52:42,080
Well you want to do range 12.

1941
01:52:42,080 --> 01:52:46,080
In the normal Python repel you can't go up.

1942
01:52:46,080 --> 01:52:48,080
You have to rewrite the thing.

1943
01:52:48,080 --> 01:52:49,080
In IPython you can.

1944
01:52:49,080 --> 01:52:54,080
It's a small thing but a lot of really small things that are helpful.

1945
01:52:54,080 --> 01:52:57,080
And so that should just work.

1946
01:52:57,080 --> 01:52:58,080
What was I going to say?

1947
01:52:58,080 --> 01:52:59,080
Yes.

1948
01:52:59,080 --> 01:53:11,080
But one of the things that you might want to do is develop a library next to it or have some code you want to update that you don't want to iterate over in a notebook or prefer in a file.

1949
01:53:11,080 --> 01:53:19,080
So I have here demoautoreload.py.

1950
01:53:19,080 --> 01:53:28,080
It's a small library I used that I was bad at math at the time that tried to compute the square of a number.

1951
01:53:28,080 --> 01:53:29,080
It's definitely wrong.

1952
01:53:29,080 --> 01:53:34,080
It's multiplied by two but it works with a equal to actually.

1953
01:53:34,080 --> 01:53:37,080
If I did a equal to and I had to square it, it works.

1954
01:53:37,080 --> 01:53:39,080
And I want to develop that.

1955
01:53:39,080 --> 01:53:44,080
So one of the things you may have learned is that you can't reload a Python module.

1956
01:53:44,080 --> 01:53:48,080
You have to quit your interpreter and come back if you change your py file.

1957
01:53:48,080 --> 01:53:52,080
We do our best to allow you to do that in IPython.

1958
01:53:52,080 --> 01:53:54,080
You have to opt in.

1959
01:53:54,080 --> 01:53:56,080
And so let's try to do the normal mode.

1960
01:53:56,080 --> 01:54:04,080
Let's do from demoautoreload import my class.

1961
01:54:04,080 --> 01:54:07,080
And then do c equal my class of two.

1962
01:54:07,080 --> 01:54:15,080
Well, because it works with two and like as a square of two and it's definitely four.

1963
01:54:15,080 --> 01:54:16,080
It works right.

1964
01:54:16,080 --> 01:54:22,080
If we do with four, well, c square is not right.

1965
01:54:22,080 --> 01:54:27,080
That's not supposed to be eight, 16, probably a factor of two somewhere.

1966
01:54:27,080 --> 01:54:32,080
Here, if you were to modify that and put actually square, it wouldn't work.

1967
01:54:32,080 --> 01:54:38,080
So let's quit IPython and restart just for the sake of restarting.

1968
01:54:38,080 --> 01:54:42,080
And this time we are going to do load ext.

1969
01:54:42,080 --> 01:54:44,080
Go back to the beginning.

1970
01:54:44,080 --> 01:54:47,080
Autoreload.

1971
01:54:47,080 --> 01:54:50,080
So that's set up something in IPython.

1972
01:54:50,080 --> 01:54:56,080
It's now slower, but it has some capabilities of really reloading code on the fly.

1973
01:54:56,080 --> 01:54:57,080
There are different modes.

1974
01:54:57,080 --> 01:54:58,080
There are different modes.

1975
01:54:58,080 --> 01:55:03,080
You have either explicitly telling it what you want to reload or just try to reload as much as you can.

1976
01:55:03,080 --> 01:55:11,080
We're going to be lazy and do autoreload mode two, which is try to reload as much as you can.

1977
01:55:11,080 --> 01:55:17,080
And now we're going to go back and import my class.

1978
01:55:17,080 --> 01:55:25,080
We're going to create c, which is my class of 10, because square of 10 is relatively easy to compute.

1979
01:55:25,080 --> 01:55:28,080
I don't remember the other one.

1980
01:55:28,080 --> 01:55:33,080
And realize that c square is wrong.

1981
01:55:33,080 --> 01:55:41,080
But now if everything works fine, if I update my file with just a new star, I save it.

1982
01:55:41,080 --> 01:55:47,080
Don't forget to save and compute c square.

1983
01:55:47,080 --> 01:55:51,080
It has updated our thing and we didn't have to to read our code.

1984
01:55:51,080 --> 01:55:57,080
So here it's relatively simple, but you may have a big data set in the library where you want to run something on the data set.

1985
01:55:57,080 --> 01:56:02,080
And the data set might take like five minutes to load.

1986
01:56:02,080 --> 01:56:08,080
Same thing is if you do if you do c cube.

1987
01:56:08,080 --> 01:56:09,080
Well, that does not exist.

1988
01:56:09,080 --> 01:56:18,080
I'm going to do the same thing that you apparently liked earlier is to select multiple things and delete at once.

1989
01:56:18,080 --> 01:56:22,080
Question.

1990
01:56:22,080 --> 01:56:24,080
Does it work if a module import another module?

1991
01:56:24,080 --> 01:56:26,080
It depends.

1992
01:56:26,080 --> 01:56:29,080
It's we do it's the best effort.

1993
01:56:29,080 --> 01:56:34,080
Well, not in the sense that we do as little as we can and we just want to tell you that we're doing our best we can.

1994
01:56:34,080 --> 01:56:37,080
But we literally do as much as we can.

1995
01:56:37,080 --> 01:56:38,080
But not everything works.

1996
01:56:38,080 --> 01:56:40,080
It's it's really on a case by case basis.

1997
01:56:40,080 --> 01:56:44,080
If you really want to be sure you have to restart your your your session.

1998
01:56:44,080 --> 01:56:47,080
So I know some of the things that don't work.

1999
01:56:47,080 --> 01:56:49,080
I know some of that works, but it depends.

2000
01:56:49,080 --> 01:56:54,080
It does more.

2001
01:56:54,080 --> 01:57:00,080
If you use import live with a reload function, it uses that internally plus some other things.

2002
01:57:00,080 --> 01:57:07,080
But as for his question, if you wanted to force it to reload something, I use it reload.

2003
01:57:07,080 --> 01:57:14,080
Well, it's it does it does use import live reload, but it does some extra things on top.

2004
01:57:14,080 --> 01:57:21,080
So using import live reload explicitly will probably not do more than what auto reload does.

2005
01:57:21,080 --> 01:57:23,080
Maybe.

2006
01:57:23,080 --> 01:57:24,080
But I'm unsure.

2007
01:57:24,080 --> 01:57:34,080
And another question there.

2008
01:57:34,080 --> 01:57:35,080
So that's correct.

2009
01:57:35,080 --> 01:57:45,080
And that's what I'm going to show there just after is if you change some if you change in it, you would need to you have to reinstated the glass like we can attach and remove things.

2010
01:57:45,080 --> 01:57:48,080
But things that happen in it are not propagating.

2011
01:57:48,080 --> 01:57:50,080
So let's just do it.

2012
01:57:50,080 --> 01:57:52,080
Cube is now defined.

2013
01:57:52,080 --> 01:58:01,080
But if I do something like self be equal one over a.

2014
01:58:01,080 --> 01:58:03,080
C.B. will not be defined.

2015
01:58:03,080 --> 01:58:10,080
I will have to redo C called my class and see that.

2016
01:58:10,080 --> 01:58:15,080
So we do as much as we can, but we can't do everything.

2017
01:58:15,080 --> 01:58:19,080
Everything that has like all the we try to reattach method.

2018
01:58:19,080 --> 01:58:21,080
We try to update things.

2019
01:58:21,080 --> 01:58:23,080
And so you will have weird H case.

2020
01:58:23,080 --> 01:58:29,080
But that is extremely useful when you actually want to develop a library.

2021
01:58:29,080 --> 01:58:34,080
Because you can have something which is almost as if you were to completely rerun your scripts.

2022
01:58:34,080 --> 01:58:39,080
But it will try to update as much as possible from your name space.

2023
01:58:39,080 --> 01:58:46,080
I would again advise you to look at authority load question mark.

2024
01:58:46,080 --> 01:58:48,080
So that's that's a bit big.

2025
01:58:48,080 --> 01:58:49,080
So let's do that.

2026
01:58:49,080 --> 01:58:57,080
It tells you what are the different different things you have to do the one or two or two or zero.

2027
01:58:57,080 --> 01:59:00,080
To try to do as much as it can.

2028
01:59:00,080 --> 01:59:05,080
If you do it or reload one, you can't just import something you use.

2029
01:59:05,080 --> 01:59:09,080
You have to use percent auto auto reload import.

2030
01:59:09,080 --> 01:59:14,080
And if you do that, it will only try to reload this specific things.

2031
01:59:14,080 --> 01:59:18,080
It can't reload things that are compiled in C.

2032
01:59:18,080 --> 01:59:20,080
If some of you develop C is right.

2033
01:59:20,080 --> 01:59:22,080
See, but I would advise.

2034
01:59:22,080 --> 01:59:26,080
I think that's that's good enough.

2035
01:59:26,080 --> 01:59:29,080
Is there anything else I wanted to say about that?

2036
01:59:32,080 --> 01:59:34,080
So that's about it.

2037
01:59:34,080 --> 01:59:38,080
So that's I don't have a comment question.

2038
01:59:43,080 --> 01:59:46,080
So is there a way to say what you've done in the console in the Jupyter notebook?

2039
01:59:46,080 --> 01:59:52,080
We've seen one thing at the beginning of our session that was history.

2040
01:59:52,080 --> 01:59:57,080
And history will tell you everything you've done in your console.

2041
01:59:57,080 --> 02:00:03,080
And so now what you can do is actually make it to a file and.

2042
02:00:04,080 --> 02:00:06,080
Oops, I forgot.

2043
02:00:07,080 --> 02:00:09,080
Come back.

2044
02:00:09,080 --> 02:00:13,080
You do history to the one or two.

2045
02:00:13,080 --> 02:00:17,080
Oh, and you need to do one hundred.

2046
02:00:17,080 --> 02:00:22,080
You can get previous sessions.

2047
02:00:22,080 --> 02:00:24,080
I don't remember how to do that.

2048
02:00:24,080 --> 02:00:26,080
Yeah, there you go.

2049
02:00:26,080 --> 02:00:31,080
So one session ago, line one from one hundred.

2050
02:00:31,080 --> 02:00:33,080
Take me if you want to.

2051
02:00:33,080 --> 02:00:39,080
Technically, every all of that is stored in a SQL database in your home.

2052
02:00:39,080 --> 02:00:43,080
So don't type your passwords in clear.

2053
02:00:43,080 --> 02:00:50,080
Like, don't put like don't put password equal and your actual password.

2054
02:00:52,080 --> 02:00:55,080
Because otherwise it will be stored in this SQL database.

2055
02:00:55,080 --> 02:00:57,080
You can project, you can do stuff.

2056
02:00:57,080 --> 02:01:02,080
But yeah, everything is also you can come back in time, see when what was done.

2057
02:01:02,080 --> 02:01:05,080
And small result or string small result are also stored in the database.

2058
02:01:05,080 --> 02:01:08,080
So you can also react to some of the outputs.

2059
02:01:08,080 --> 02:01:12,080
But that's that's the date.

2060
02:01:15,080 --> 02:01:17,080
Four was Jupiter.

2061
02:01:17,080 --> 02:01:19,080
Yes.

2062
02:01:19,080 --> 02:01:21,080
Can you what?

2063
02:01:23,080 --> 02:01:25,080
Can you play back on history?

2064
02:01:25,080 --> 02:01:27,080
Probably.

2065
02:01:29,080 --> 02:01:34,080
I wouldn't do it because often you have like a thing that you have to back and forth.

2066
02:01:34,080 --> 02:01:35,080
You often have mistakes.

2067
02:01:35,080 --> 02:01:37,080
So you probably want to expose your history to a file.

2068
02:01:37,080 --> 02:01:39,080
It is a file.

2069
02:01:39,080 --> 02:01:46,080
And then once you have once you have a file, you can actually you question was, can you replay a history?

2070
02:01:47,080 --> 02:01:48,080
You can use the run magic.

2071
02:01:48,080 --> 02:02:01,080
So run magic allow you to in different ways or options to run a Python file almost as if you had typed it into the report.

2072
02:02:01,080 --> 02:02:06,080
You wouldn't get the input and outputs.

2073
02:02:06,080 --> 02:02:07,080
You could.

2074
02:02:07,080 --> 02:02:09,080
There are options.

2075
02:02:09,080 --> 02:02:11,080
There are many options.

2076
02:02:11,080 --> 02:02:24,080
But I mean, at some point, I want to discourage you for just doing that and more thinking if I have a thing that I run often, you want to make a Python module out of that.

2077
02:02:24,080 --> 02:02:27,080
You want to make functions and you want to call your functions.

2078
02:02:27,080 --> 02:02:30,080
You don't want to venture too far from normal Python.

2079
02:02:30,080 --> 02:02:33,080
And at some point, there is convenience.

2080
02:02:33,080 --> 02:02:38,080
And once you move away from convenience, you can make them into a into a PY file.

2081
02:02:46,080 --> 02:02:54,080
We have a sarcastic comment from from Matt in the back says that there is a nice things to track snippet of code called notebook.

2082
02:02:54,080 --> 02:02:57,080
Yeah.

2083
02:02:57,080 --> 02:02:59,080
He does help with these type of things.

2084
02:02:59,080 --> 02:03:01,080
He is tracking the history of course.

2085
02:03:01,080 --> 02:03:04,080
He can delete the things you don't care about as you go.

2086
02:03:04,080 --> 02:03:06,080
That's quite more of a value.

2087
02:03:06,080 --> 02:03:07,080
There is.

2088
02:03:07,080 --> 02:03:12,080
You have different different way of of doing various things.

2089
02:03:12,080 --> 02:03:15,080
And I have something in my head that I forgot now.

2090
02:03:15,080 --> 02:03:18,080
It's fine.

2091
02:03:18,080 --> 02:03:19,080
Plenty of things.

2092
02:03:19,080 --> 02:03:22,080
Look at the IPY documentation on IPY.

2093
02:03:22,080 --> 02:03:24,080
There is way more on that question.

2094
02:03:36,080 --> 02:03:41,080
So does the database also store history for the input?

2095
02:03:41,080 --> 02:03:44,080
It does store some of the outputs.

2096
02:03:44,080 --> 02:03:46,080
I don't remember the exact criteria.

2097
02:03:46,080 --> 02:03:54,080
But yes, I believe if they're small and purely text and less than I don't remember hundred characters, they are going to be stored.

2098
02:04:02,080 --> 02:04:12,080
So now I was going to go to the folder number four and going to describe a tiny bit of the Jupiter lab UI so that you know a tiny bit what you can do if you're working in the browser.

2099
02:04:13,080 --> 02:04:16,080
So you've already played a bit with it.

2100
02:04:16,080 --> 02:04:20,080
One of the features of the Jupiter lab is that everything is a plugin.

2101
02:04:20,080 --> 02:04:23,080
So every event, the core components are plugins.

2102
02:04:23,080 --> 02:04:26,080
And if you want to swap them, you can.

2103
02:04:26,080 --> 02:04:30,080
So that means that it's extremely, extremely flexible.

2104
02:04:30,080 --> 02:04:40,080
I'm going to unzoom a tiny bit to to be able to get some real estate because now the exact content of things are not that important.

2105
02:04:40,080 --> 02:04:42,080
You've already been familiar with the launcher.

2106
02:04:42,080 --> 02:04:48,080
If you install a different kernel, the kernel will allow you to run to create notebooks in different languages.

2107
02:04:48,080 --> 02:04:52,080
So here you see that I have to have Python and I have bash.

2108
02:04:52,080 --> 02:04:54,080
You can change after the fact.

2109
02:04:54,080 --> 02:04:57,080
So here I created a Python notebook.

2110
02:04:57,080 --> 02:05:00,080
You say that it says Python three here.

2111
02:05:00,080 --> 02:05:03,080
I can't change it to actually be bash.

2112
02:05:03,080 --> 02:05:05,080
And so now I'm not writing Python.

2113
02:05:05,080 --> 02:05:07,080
I actually do bash.

2114
02:05:07,080 --> 02:05:16,080
If you have several virtual environments or condom environments, there is also one way to have here Python for each of the condom environments.

2115
02:05:16,080 --> 02:05:18,080
I'm not going to do that today.

2116
02:05:18,080 --> 02:05:29,080
The other possibility and we're not going to dive into that too much because of time is if you have already a notebook with a kernel, you can attach another notebook to the same kernel.

2117
02:05:29,080 --> 02:05:31,080
So you're basically sharing namespace.

2118
02:05:31,080 --> 02:05:32,080
You're sharing your assets.

2119
02:05:32,080 --> 02:05:33,080
You're sharing your functions.

2120
02:05:33,080 --> 02:05:41,080
But you might want to have a scratch pad where you just to run some small analysis and an actual notebook that you want to do for a report.

2121
02:05:41,080 --> 02:05:43,080
And that's possible here again.

2122
02:05:43,080 --> 02:05:45,080
You just create a notebook and you just attach to.

2123
02:05:47,080 --> 02:05:49,080
So how do I got that?

2124
02:05:49,080 --> 02:05:51,080
I'm going to read it.

2125
02:05:51,080 --> 02:05:54,080
So here it tells you which language your notebook is in.

2126
02:05:54,080 --> 02:05:57,080
It's actually not which language is usually which kernel.

2127
02:05:57,080 --> 02:06:02,080
The name of the kernel doesn't have to be equal to the language, but it's a default.

2128
02:06:02,080 --> 02:06:06,080
So here you see that I have Python 3, I have bash.

2129
02:06:06,080 --> 02:06:11,080
I could have something called Python 3.8 or I could have a kernel called PyCon if I wanted to.

2130
02:06:11,080 --> 02:06:14,080
That's specific to each kernel and how to do that.

2131
02:06:14,080 --> 02:06:20,080
So you're just going to go to go here to the one where this is just a quick way of doing it.

2132
02:06:20,080 --> 02:06:22,080
There are more generic way of doing things.

2133
02:06:24,080 --> 02:06:26,080
You do have to have the kernel installed.

2134
02:06:26,080 --> 02:06:28,080
You probably don't have bash.

2135
02:06:28,080 --> 02:06:30,080
I have because I have it installed.

2136
02:06:30,080 --> 02:06:32,080
And it's across all of the Jupyter things.

2137
02:06:32,080 --> 02:06:38,080
So if you use Ntract or if you use integration with VS code, you will be able to see those kernel as well.

2138
02:06:38,080 --> 02:06:43,080
This indicator that you might have seen is kernel busy.

2139
02:06:43,080 --> 02:06:47,080
So when the thing is doing computation, it will be black.

2140
02:06:47,080 --> 02:06:51,080
So import time and not bash.

2141
02:06:51,080 --> 02:06:53,080
I want to actually do Python now.

2142
02:06:53,080 --> 02:06:59,080
Time dot sleep 10.

2143
02:06:59,080 --> 02:07:03,080
You see that it's actually busy running.

2144
02:07:03,080 --> 02:07:10,080
So that's a quick way of knowing whether computation are actually happening or if something is just stuck.

2145
02:07:10,080 --> 02:07:14,080
You will also see that the number becomes a star when something is running.

2146
02:07:14,080 --> 02:07:17,080
But this is slightly more accurate.

2147
02:07:17,080 --> 02:07:21,080
You have a number of shortcuts here.

2148
02:07:21,080 --> 02:07:31,080
Change the type of a cell to markdown if you want to actually write some markdown and then press shift enter to render.

2149
02:07:31,080 --> 02:07:33,080
So it's relatively similar to the normal notebook.

2150
02:07:33,080 --> 02:07:37,080
I'm not going to go too much into detail of what you can do in a normal notebook.

2151
02:07:37,080 --> 02:07:39,080
I will let you play with that.

2152
02:07:39,080 --> 02:07:43,080
You have the restart kernel.

2153
02:07:43,080 --> 02:07:50,080
So if you're not sure what's happening and what you have done and have not done, if you press that and you press restart,

2154
02:07:50,080 --> 02:07:53,080
then the kernel has been killed and a new one starts.

2155
02:07:53,080 --> 02:08:01,080
Now you have a fresh namespace on which you can be referencing one by one and make sure that your computation actually does the right thing.

2156
02:08:01,080 --> 02:08:12,080
The shortcut to restart is when you're not editing a cell, but when you're actually in command mode, you can press 00 twice.

2157
02:08:12,080 --> 02:08:14,080
And it will bring the same data.

2158
02:08:14,080 --> 02:08:17,080
Question.

2159
02:08:17,080 --> 02:08:20,080
Question about the cells.

2160
02:08:20,080 --> 02:08:27,080
In the notebook, there's a plug-in that you want to convert in.

2161
02:08:27,080 --> 02:08:31,080
You don't need to make a hard point to convert into a presentation.

2162
02:08:31,080 --> 02:08:32,080
Rise?

2163
02:08:32,080 --> 02:08:35,080
Yes. Is that the same thing we would use in the left?

2164
02:08:35,080 --> 02:08:47,080
So the question is, there is a plug-in or normal notebook called Rise for Reveal, JS, IPython, Slideshow extensions that allow you to convert a notebook into a slideshow.

2165
02:08:47,080 --> 02:08:49,080
Is there the same thing for JupyterLab?

2166
02:08:49,080 --> 02:09:00,080
I'm not sure it has been completely updated to run with JupyterLab, but because the files are the same and exactly the same,

2167
02:09:00,080 --> 02:09:07,080
what you can do is close it in JupyterLab, go to Help and launch Classic Notebook.

2168
02:09:07,080 --> 02:09:09,080
And now you're back to the classic UI.

2169
02:09:09,080 --> 02:09:15,080
And from the classic UI, then you can open your things and start the Rise plug-in if you're a Rise user.

2170
02:09:15,080 --> 02:09:24,080
Or for any extensions that does not work with JupyterLab yet, you can just come back to the old interface and use that.

2171
02:09:24,080 --> 02:09:30,080
Don't open the same notebook into interface at once because it's the last one that writes to disk that will win.

2172
02:09:30,080 --> 02:09:38,080
So I'm not going to go into detail on how to go to normal notebook.

2173
02:09:38,080 --> 02:09:42,080
But let me just go back to the tree here.

2174
02:09:42,080 --> 02:09:45,080
And go back to Lab.

2175
02:09:45,080 --> 02:10:02,080
And I should be back here.

2176
02:10:02,080 --> 02:10:06,080
And the command that Matt said is that there are also command line tools for all of that.

2177
02:10:06,080 --> 02:10:10,080
So you can also use the command line tools.

2178
02:10:10,080 --> 02:10:23,080
One other thing you should question.

2179
02:10:23,080 --> 02:10:28,080
The question was, is there a difference between starting JupyterLab, changing the, like what I did,

2180
02:10:28,080 --> 02:10:31,080
help launch Classic Notebook and change the URL to slash tree?

2181
02:10:31,080 --> 02:10:34,080
No, it's the same.

2182
02:10:34,080 --> 02:10:37,080
It will work in some circumstance.

2183
02:10:37,080 --> 02:10:40,080
It kind of is aware of JupyterLab and things like that.

2184
02:10:40,080 --> 02:10:50,080
But it's mostly that we don't actually want users and we should not need to know the URL structure.

2185
02:10:50,080 --> 02:10:56,080
So we have this nice shortcut as a convenience.

2186
02:10:56,080 --> 02:10:59,080
And it's actually not launching. There is nothing at launch. It's already running.

2187
02:10:59,080 --> 02:11:03,080
It's just like switching the URL.

2188
02:11:03,080 --> 02:11:08,080
One thing you should be really familiar with is this palette here called the command palette.

2189
02:11:08,080 --> 02:11:12,080
Here you will find all the action you can do in JupyterLab.

2190
02:11:12,080 --> 02:11:18,080
Regardless of whether they are in menus, in right clicks, or even not available anywhere.

2191
02:11:18,080 --> 02:11:22,080
Else, it's basically like searching everything you can do.

2192
02:11:22,080 --> 02:11:29,080
And you can see that you even have the shortcuts that are shown on the side here.

2193
02:11:29,080 --> 02:11:37,080
So for example, if I have a Notebook and I want to change the kernel from Python 3 to Bash,

2194
02:11:37,080 --> 02:11:41,080
which was one of the questions I had before, I would go to search.

2195
02:11:41,080 --> 02:11:49,080
I could either click here and get the select kernel, or I can Google here and do kernel,

2196
02:11:49,080 --> 02:11:55,080
and search for, I have restart kernel, I have clear all outputs, and I have the change kernel menu.

2197
02:11:55,080 --> 02:12:02,080
And if I click the change kernel, it will pop up this window here and ask me what kernel do I want.

2198
02:12:02,080 --> 02:12:05,080
And now I can switch to Bash.

2199
02:12:05,080 --> 02:12:09,080
You could do a lot of things. Let me open a bigger Notebook from before.

2200
02:12:09,080 --> 02:12:16,080
Let me reopen this one. I'm going to close my untitled one.

2201
02:12:16,080 --> 02:12:21,080
You see that I still have my prompt number of what I have done before,

2202
02:12:21,080 --> 02:12:26,080
but I want to basically clear everything, every output on my Notebook.

2203
02:12:26,080 --> 02:12:31,080
I would go to the command palette here and search for clear.

2204
02:12:31,080 --> 02:12:37,080
I have clear output for a person operation, and Notebook operation, I have clear all outputs.

2205
02:12:37,080 --> 02:12:43,080
And if I click that, well, all my outputs and prompts are now gone.

2206
02:12:43,080 --> 02:12:47,080
And so that's relatively useful.

2207
02:12:47,080 --> 02:12:55,080
And if you want to learn keyboard shortcut as well, which is at least on Mac,

2208
02:12:55,080 --> 02:13:00,080
if I'm here, I can press command shift C, and it will bring that.

2209
02:13:00,080 --> 02:13:06,080
And so now I can just look for what I want. I want to run all cells.

2210
02:13:06,080 --> 02:13:12,080
And now it's going to run all cells one by one until it finds an exception, and then it will start.

2211
02:13:12,080 --> 02:13:15,080
So if you want to run one Notebook completely from top to bottom,

2212
02:13:15,080 --> 02:13:20,080
you could restart your kernel to make sure your namespace is clean and then to run all cells.

2213
02:13:20,080 --> 02:13:23,080
And it will run them one by one until there's an exception.

2214
02:13:23,080 --> 02:13:25,080
And they say, oh, well, this was wrong.

2215
02:13:25,080 --> 02:13:32,080
And you can fix it and make sure that your Notebook is actually safe.

2216
02:13:32,080 --> 02:13:38,080
Because it's a completely new interface from the classic Notebook that some of you may have seen,

2217
02:13:38,080 --> 02:13:47,080
there's a lot of new features that were not possible in normal Notebook.

2218
02:13:47,080 --> 02:13:50,080
So I'm going to go back here.

2219
02:13:50,080 --> 02:13:55,080
I actually, oops, that's the exercise one. I want to open that.

2220
02:13:55,080 --> 02:13:58,080
We can render a Markdown file, for example.

2221
02:13:58,080 --> 02:14:02,080
So if I have a Markdown file and I double click, I will get the Markdown file.

2222
02:14:02,080 --> 02:14:05,080
Markdown might be hard to read.

2223
02:14:05,080 --> 02:14:13,080
So what you might want to do is right click here and say Open With and the Preview one.

2224
02:14:13,080 --> 02:14:18,080
And so now you actually have a render Markdown file, which is easier to read.

2225
02:14:18,080 --> 02:14:24,080
And to cut up that, and you might want to edit the Markdown file.

2226
02:14:24,080 --> 02:14:27,080
So that view is nice to edit. That view is nice to view.

2227
02:14:27,080 --> 02:14:30,080
So, well, can I have both?

2228
02:14:30,080 --> 02:14:32,080
Well, yes, you can drag tabs around.

2229
02:14:32,080 --> 02:14:34,080
So you can see that we've seen that before.

2230
02:14:34,080 --> 02:14:38,080
And you will have a blue indicator that shows you where on the screen you can put that.

2231
02:14:38,080 --> 02:14:40,080
And I'm going to put them side by side.

2232
02:14:40,080 --> 02:14:44,080
And they are actually different view on the same model.

2233
02:14:44,080 --> 02:14:49,080
Both are actually, like, if you edit one, the other one will update live.

2234
02:14:49,080 --> 02:14:57,080
So here is, with a few seconds of difference, some modifications.

2235
02:14:57,080 --> 02:15:00,080
And so now you can have the same thing open in two different ways.

2236
02:15:00,080 --> 02:15:04,080
So you can, for example, or even like the same one twice,

2237
02:15:04,080 --> 02:15:08,080
and you want to copy things over between two different locations.

2238
02:15:10,080 --> 02:15:11,080
So let me remove that.

2239
02:15:11,080 --> 02:15:19,080
So in the folder for JupyterLab UI, you should have some exercise.

2240
02:15:19,080 --> 02:15:26,080
And let's, well, I would suggest we take five or ten minutes to go through that

2241
02:15:26,080 --> 02:15:29,080
and try to play with UI.

2242
02:15:29,080 --> 02:15:35,080
There is some guideline here of things that you might want to try.

2243
02:15:37,080 --> 02:15:41,080
And so that you get a feeling of what you can do with JupyterLab.

2244
02:15:41,080 --> 02:15:47,080
And then we'll do, I'm going to run through that and show you all the features.

2245
02:15:47,080 --> 02:15:50,080
But I think it's best for you to take ten minutes to see what you can do.

2246
02:15:50,080 --> 02:15:53,080
Also, I'll show you some of the Python stuff you can do.

2247
02:16:11,080 --> 02:16:12,080
You have the sticky notes.

2248
02:16:12,080 --> 02:16:16,080
If you're already finished on board, you can put the green one.

2249
02:16:16,080 --> 02:16:19,080
If you have issues, you can put the red one.

2250
02:16:19,080 --> 02:16:24,080
If you want to go get something to drink, you can also get something to drink.

2251
02:16:24,080 --> 02:16:30,080
We have stickers in the front also, Jupyter stickers for your laptops.

2252
02:16:46,080 --> 02:16:47,080
Select.

2253
02:17:16,080 --> 02:17:29,080
It's fine.

2254
02:17:29,080 --> 02:17:30,080
I don't know what happened.

2255
02:17:30,080 --> 02:17:34,080
It seems to be enough.

2256
02:17:34,080 --> 02:17:37,080
And you can't run.

2257
02:17:51,080 --> 02:17:53,080
I don't know why.

2258
02:17:53,080 --> 02:17:57,080
It seems to work now.

2259
02:17:57,080 --> 02:17:58,080
That's relatively fast.

2260
02:17:58,080 --> 02:17:59,080
That's fine.

2261
02:17:59,080 --> 02:18:01,080
That's a normal error.

2262
02:18:01,080 --> 02:18:04,080
Error, yeah, this 10 is not the right number.

2263
02:18:04,080 --> 02:18:06,080
It seems to work now.

2264
02:18:06,080 --> 02:18:07,080
I don't know.

2265
02:18:07,080 --> 02:18:13,080
Maybe we can try to sit down later in the week and recheck everything if you still have issues.

2266
02:18:13,080 --> 02:18:36,080
Okay.

2267
02:18:36,080 --> 02:18:40,080
Right click on the tab of one.

2268
02:18:40,080 --> 02:18:47,080
And right click in the file itself.

2269
02:18:47,080 --> 02:18:51,080
Show Margon preview.

2270
02:18:51,080 --> 02:19:01,080
You can also in the file browser here, if you right click on the regular size one.

2271
02:19:01,080 --> 02:19:04,080
And you can also open it.

2272
02:19:04,080 --> 02:19:23,080
And you find either the editor or the Margon preview.

2273
02:19:23,080 --> 02:19:24,080
Sorry.

2274
02:19:24,080 --> 02:19:25,080
Sorry.

2275
02:19:25,080 --> 02:19:26,080
I just have a question for you.

2276
02:19:26,080 --> 02:19:27,080
I'm going to try to reach you.

2277
02:19:27,080 --> 02:19:28,080
I was making a note.

2278
02:19:28,080 --> 02:19:29,080
It's a pretty tricky thing.

2279
02:19:29,080 --> 02:19:30,080
I'm trying to do a good job.

2280
02:19:30,080 --> 02:19:31,080
So thank you.

2281
02:19:31,080 --> 02:19:32,080
Right click.

2282
02:19:32,080 --> 02:19:33,080
And then right click.

2283
02:19:33,080 --> 02:19:34,080
And then right click.

2284
02:19:34,080 --> 02:19:35,080
And then right click.

2285
02:19:35,080 --> 02:19:36,080
And then right click.

2286
02:19:36,080 --> 02:19:37,080
And then right click.

2287
02:19:37,080 --> 02:19:38,080
And then right click.

2288
02:19:38,080 --> 02:19:39,080
And then right click.

2289
02:19:39,080 --> 02:19:40,080
And then right click.

2290
02:19:40,080 --> 02:19:41,080
And then right click.

2291
02:19:41,080 --> 02:19:42,080
And then right click.

2292
02:19:42,080 --> 02:19:43,080
And then right click.

2293
02:19:43,080 --> 02:19:44,080
And then right click.

2294
02:19:44,080 --> 02:19:45,080
And then right click.

2295
02:19:45,080 --> 02:19:46,080
And then right click.

2296
02:19:46,080 --> 02:19:47,080
And then right click.

2297
02:19:47,080 --> 02:19:48,080
And then right click.

2298
02:19:48,080 --> 02:19:49,080
And then right click.

2299
02:19:49,080 --> 02:19:50,080
And then right click.

2300
02:19:50,080 --> 02:19:51,080
And then right click.

2301
02:19:51,080 --> 02:19:52,080
And then right click.

2302
02:19:52,080 --> 02:19:53,080
And then right click.

2303
02:19:53,080 --> 02:19:54,080
And then right click.

2304
02:19:54,080 --> 02:19:55,080
And then right click.

2305
02:19:55,080 --> 02:19:56,080
And then right click.

2306
02:19:56,080 --> 02:19:57,080
And then right click.

2307
02:19:57,080 --> 02:19:58,080
And then right click.

2308
02:19:58,080 --> 02:19:59,080
And then right click.

2309
02:19:59,080 --> 02:20:00,080
And then right click.

2310
02:20:00,080 --> 02:20:01,080
And then right click.

2311
02:20:01,080 --> 02:20:02,080
And then right click.

2312
02:20:02,080 --> 02:20:03,080
And then right click.

2313
02:20:03,080 --> 02:20:04,080
And then right click.

2314
02:20:04,080 --> 02:20:05,080
And then right click.

2315
02:20:05,080 --> 02:20:06,080
And then right click.

2316
02:20:06,080 --> 02:20:07,080
And then right click.

2317
02:20:07,080 --> 02:20:08,080
And then right click.

2318
02:20:08,080 --> 02:20:09,080
And then right click.

2319
02:20:09,080 --> 02:20:10,080
And then right click.

2320
02:20:10,080 --> 02:20:11,080
And then right click.

2321
02:20:11,080 --> 02:20:12,080
And then right click.

2322
02:20:12,080 --> 02:20:13,080
And then right click.

2323
02:20:13,080 --> 02:20:14,080
And then right click.

2324
02:20:14,080 --> 02:20:15,080
And then right click.

2325
02:20:15,080 --> 02:20:16,080
And then right click.

2326
02:20:16,080 --> 02:20:17,080
And then right click.

2327
02:20:17,080 --> 02:20:18,080
And then right click.

2328
02:20:18,080 --> 02:20:19,080
And then right click.

2329
02:20:19,080 --> 02:20:20,080
And then right click.

2330
02:20:20,080 --> 02:20:21,080
And then right click.

2331
02:20:22,080 --> 02:20:26,080
If you click in the middle, it will do Schumacher.

2332
02:20:26,080 --> 02:20:28,080
There are different ways.

2333
02:20:51,080 --> 02:20:52,080
Okay.

2334
02:20:52,080 --> 02:20:53,080
So that's it.

2335
02:20:53,080 --> 02:20:54,080
Thank you.

2336
02:20:54,080 --> 02:20:55,080
Thank you.

2337
02:20:55,080 --> 02:20:56,080
Thank you.

2338
02:20:56,080 --> 02:20:57,080
Thank you.

2339
02:20:57,080 --> 02:20:58,080
Thank you.

2340
02:20:58,080 --> 02:20:59,080
Thank you.

2341
02:20:59,080 --> 02:21:00,080
Thank you.

2342
02:21:00,080 --> 02:21:01,080
Thank you.

2343
02:21:01,080 --> 02:21:02,080
Thank you.

2344
02:21:02,080 --> 02:21:03,080
Thank you.

2345
02:21:03,080 --> 02:21:04,080
Thank you.

2346
02:21:04,080 --> 02:21:05,080
Thank you.

2347
02:21:05,080 --> 02:21:06,080
Thank you.

2348
02:21:06,080 --> 02:21:07,080
Thank you.

2349
02:21:07,080 --> 02:21:08,080
Thank you.

2350
02:21:08,080 --> 02:21:09,080
Thank you.

2351
02:21:09,080 --> 02:21:10,080
Thank you.

2352
02:21:10,080 --> 02:21:11,080
Thank you.

2353
02:21:11,080 --> 02:21:12,080
Thank you.

2354
02:21:12,080 --> 02:21:13,080
Thank you.

2355
02:21:13,080 --> 02:21:14,080
Thank you.

2356
02:21:14,080 --> 02:21:15,080
Thank you.

2357
02:21:15,080 --> 02:21:16,080
Thank you.

2358
02:21:16,080 --> 02:21:17,080
Thank you.

2359
02:21:17,080 --> 02:21:18,080
Thank you.

2360
02:21:18,080 --> 02:21:19,080
Thank you.

2361
02:21:19,080 --> 02:21:20,080
Thank you.

2362
02:21:20,080 --> 02:21:21,080
Okay.

2363
02:21:21,080 --> 02:21:22,080
So that's the typo for me.

2364
02:21:22,080 --> 02:21:23,080
Okay.

2365
02:21:23,080 --> 02:21:24,080
We should file them.

2366
02:21:24,080 --> 02:21:25,080
Yeah.

2367
02:21:25,080 --> 02:21:26,080
Okay.

2368
02:21:26,080 --> 02:21:27,080
So I don't know.

2369
02:21:27,080 --> 02:21:28,080
So I think that's a good way to do it.

2370
02:21:28,080 --> 02:21:29,080
So we can use the free file.

2371
02:21:29,080 --> 02:21:30,080
So we can say to remind folks to find the file before with their browser.

2372
02:21:30,080 --> 02:21:31,080
Okay.

2373
02:21:31,080 --> 02:21:48,080
So that's what I wanted to find within here, but it's not yet.

2374
02:21:49,080 --> 02:22:12,080
So there is a typo.

2375
02:22:12,080 --> 02:22:13,080
You don't know Markdown?

2376
02:22:13,080 --> 02:22:14,080
No.

2377
02:22:14,080 --> 02:22:15,080
Okay.

2378
02:22:15,080 --> 02:22:16,080
I'm going to go through it.

2379
02:22:16,080 --> 02:22:17,080
So this is two star for bold, one underscore for italic.

2380
02:22:17,080 --> 02:22:18,080
Each side.

2381
02:22:18,080 --> 02:22:19,080
If you put hash at the front of the line, it's a header number.

2382
02:22:19,080 --> 02:22:20,080
Okay.

2383
02:22:20,080 --> 02:22:21,080
What about the math?

2384
02:22:21,080 --> 02:22:22,080
Each dollar.

2385
02:22:22,080 --> 02:22:23,080
Okay.

2386
02:22:23,080 --> 02:22:24,080
I have the example.

2387
02:22:24,080 --> 02:22:25,080
And single dollar is going to be nine math and double dollar is going to be display math.

2388
02:22:25,080 --> 02:22:26,080
Okay.

2389
02:22:26,080 --> 02:22:27,080
So that's the typo.

2390
02:22:27,080 --> 02:22:28,080
So that's the typo.

2391
02:22:28,080 --> 02:22:29,080
So that's the typo.

2392
02:22:29,080 --> 02:22:30,080
So that's the typo.

2393
02:22:30,080 --> 02:22:31,080
So that's the typo.

2394
02:22:31,080 --> 02:22:32,080
So that's the typo.

2395
02:22:32,080 --> 02:22:33,080
So that's the typo.

2396
02:22:33,080 --> 02:22:34,080
So that's the typo.

2397
02:22:34,080 --> 02:22:35,080
So that's the typo.

2398
02:22:35,080 --> 02:22:36,080
So that's the typo.

2399
02:22:36,080 --> 02:22:37,080
So that's the typo.

2400
02:22:37,080 --> 02:22:38,080
So that's the typo.

2401
02:22:38,080 --> 02:22:39,080
So that's the typo.

2402
02:22:39,080 --> 02:22:40,080
So that's the typo.

2403
02:23:40,080 --> 02:23:42,080
Okay.

2404
02:24:10,080 --> 02:24:12,080
Okay.

2405
02:24:40,080 --> 02:24:42,080
Okay.

2406
02:25:10,080 --> 02:25:12,080
Okay.

2407
02:25:40,080 --> 02:25:42,080
Okay.

2408
02:26:10,080 --> 02:26:11,080
Okay.

2409
02:26:40,080 --> 02:26:41,080
Okay.

2410
02:27:10,080 --> 02:27:11,080
Okay.

2411
02:27:40,080 --> 02:27:41,080
Okay.

2412
02:28:10,080 --> 02:28:11,080
Okay.

2413
02:28:40,080 --> 02:28:41,080
Okay.

2414
02:28:41,080 --> 02:28:42,080
Okay.

2415
02:28:42,080 --> 02:28:43,080
Okay.

2416
02:28:43,080 --> 02:28:44,080
Okay.

2417
02:28:44,080 --> 02:28:45,080
Okay.

2418
02:28:45,080 --> 02:28:46,080
Okay.

2419
02:28:46,080 --> 02:28:47,080
Okay.

2420
02:28:47,080 --> 02:28:48,080
Okay.

2421
02:28:48,080 --> 02:28:49,080
Okay.

2422
02:28:49,080 --> 02:28:50,080
Okay.

2423
02:28:50,080 --> 02:28:51,080
Okay.

2424
02:28:51,080 --> 02:28:52,080
Okay.

2425
02:28:52,080 --> 02:28:53,080
Okay.

2426
02:28:53,080 --> 02:28:54,080
Okay.

2427
02:28:54,080 --> 02:28:55,080
Okay.

2428
02:28:55,080 --> 02:28:56,080
Okay.

2429
02:28:56,080 --> 02:28:57,080
Okay.

2430
02:28:57,080 --> 02:28:58,080
Okay.

2431
02:28:58,080 --> 02:28:59,080
Okay.

2432
02:28:59,080 --> 02:29:00,080
Okay.

2433
02:29:00,080 --> 02:29:01,080
Okay.

2434
02:29:01,080 --> 02:29:02,080
Okay.

2435
02:29:02,080 --> 02:29:03,080
Okay.

2436
02:29:03,080 --> 02:29:04,080
Okay.

2437
02:29:04,080 --> 02:29:05,080
Okay.

2438
02:29:05,080 --> 02:29:06,080
Okay.

2439
02:29:06,080 --> 02:29:07,080
Okay.

2440
02:29:07,080 --> 02:29:08,080
Okay.

2441
02:29:08,080 --> 02:29:09,080
Okay.

2442
02:29:10,080 --> 02:29:14,080
It's Jason or it's lower-case t or maybe, I don't know.

2443
02:29:14,080 --> 02:29:15,080
It's installed.

2444
02:29:15,080 --> 02:29:18,080
I don't know then.

2445
02:29:18,080 --> 02:29:21,080
We can try to debug that later in the world.

2446
02:29:21,080 --> 02:29:22,080
Maybe they can.

2447
02:29:22,080 --> 02:29:25,080
Yes, no, no, because the node is-

2448
02:29:25,080 --> 02:29:26,080
Is the node, yeah, yeah.

2449
02:29:26,080 --> 02:29:28,080
So it's trying to-

2450
02:29:28,080 --> 02:29:31,080
Okay, so it's the node, yeah.

2451
02:29:31,080 --> 02:29:34,080
Okay, let's try to move quickly forward.

2452
02:29:34,080 --> 02:29:38,240
Some of the solutions are in the example notebook here.

2453
02:29:40,060 --> 02:29:43,620
So some of the people struggle because I was too fast before.

2454
02:29:43,620 --> 02:29:47,780
So let me show again how to create these two markdown things.

2455
02:29:52,060 --> 02:29:54,540
You have several ways of doing it.

2456
02:29:54,540 --> 02:29:57,340
So if I double click on the exercise one dot markdown,

2457
02:29:57,340 --> 02:29:59,520
I get the edit view.

2458
02:29:59,520 --> 02:30:02,780
I can either right click on exercise one

2459
02:30:02,780 --> 02:30:05,140
and do open with markdown preview,

2460
02:30:05,140 --> 02:30:07,500
and then it will open a markdown preview,

2461
02:30:07,500 --> 02:30:11,400
and then I can put each of the preview

2462
02:30:11,400 --> 02:30:14,660
and the edit next to each other.

2463
02:30:14,660 --> 02:30:17,860
Or I can right click directly somewhere

2464
02:30:17,860 --> 02:30:22,020
in the markdown file and do show markdown preview.

2465
02:30:23,720 --> 02:30:24,900
I'm going to get rid of that,

2466
02:30:24,900 --> 02:30:27,500
and now I have the preview as well.

2467
02:30:27,500 --> 02:30:31,500
You can also try to click on the tab that some of you did.

2468
02:30:31,500 --> 02:30:34,540
You see that there is no way to get a preview,

2469
02:30:34,540 --> 02:30:36,580
but you can make a new view.

2470
02:30:36,580 --> 02:30:40,620
There are slight differences depending on where you click.

2471
02:30:40,620 --> 02:30:43,180
And one other thing that you might have seen

2472
02:30:43,180 --> 02:30:44,660
is create console for editor.

2473
02:30:44,660 --> 02:30:46,740
We're not going to dive too much into that,

2474
02:30:46,740 --> 02:30:49,780
but you can actually attach any file

2475
02:30:49,780 --> 02:30:52,040
in JupyterLab to a kernel.

2476
02:30:52,040 --> 02:30:55,660
And if you have here something that say print

2477
02:30:55,660 --> 02:30:57,980
hello, hello, hello, hello.

2478
02:30:59,020 --> 02:31:00,100
Hello, PyCon.

2479
02:31:01,320 --> 02:31:05,660
I'm just going to show you so that you know it's possible.

2480
02:31:05,660 --> 02:31:07,120
And close the triple quotes,

2481
02:31:07,120 --> 02:31:10,160
which is a way in markdown to show code blocks.

2482
02:31:10,160 --> 02:31:12,680
If you go there and press shift enter,

2483
02:31:12,680 --> 02:31:15,680
oh, missing a quote here, press shift enter,

2484
02:31:15,680 --> 02:31:17,540
you actually take the code block

2485
02:31:17,540 --> 02:31:19,800
and send it to the console to execute it.

2486
02:31:19,800 --> 02:31:21,180
So if you prefer to write something

2487
02:31:21,180 --> 02:31:24,580
more like R markdown but Py markdown,

2488
02:31:24,620 --> 02:31:26,060
you can do something similar.

2489
02:31:28,180 --> 02:31:30,300
Let's close that.

2490
02:31:32,140 --> 02:31:35,220
Let's reopen the app solution.

2491
02:31:38,020 --> 02:31:39,500
So what you see is here,

2492
02:31:39,500 --> 02:31:42,100
like we have some example of notebooks

2493
02:31:42,100 --> 02:31:44,620
that show what a few things you can do.

2494
02:31:44,620 --> 02:31:46,060
So here it's markdown.

2495
02:31:46,060 --> 02:31:47,740
If you press enter to edit,

2496
02:31:47,740 --> 02:31:51,620
or if you double click,

2497
02:31:51,620 --> 02:31:52,900
you will be able to edit.

2498
02:31:53,060 --> 02:31:56,380
I'll give you a quick reminder of the markdown syntax.

2499
02:31:56,380 --> 02:31:59,540
If you use GitHub or some other website,

2500
02:31:59,540 --> 02:32:00,460
you might know it.

2501
02:32:01,500 --> 02:32:04,220
We can have math, either display math,

2502
02:32:04,220 --> 02:32:05,820
when you have two dollar sign,

2503
02:32:05,820 --> 02:32:08,180
or in math you have a single dollar sign.

2504
02:32:09,580 --> 02:32:11,660
You can write a subset of LaTeX

2505
02:32:12,620 --> 02:32:16,780
and do shift enter to render some small differences

2506
02:32:16,780 --> 02:32:18,700
between when you use backtick for the language

2507
02:32:18,700 --> 02:32:20,820
with two Ls because my keyboard is broken.

2508
02:32:21,780 --> 02:32:24,140
Or four spaces, one will be highlighted,

2509
02:32:24,140 --> 02:32:25,420
the other will not.

2510
02:32:27,220 --> 02:32:29,740
One of the things that we've slightly seen before

2511
02:32:29,740 --> 02:32:31,860
is that objects do not need to be pure text.

2512
02:32:31,860 --> 02:32:35,300
They can actually be displayed as LaTeX,

2513
02:32:35,300 --> 02:32:38,100
or as PNG, or SVG, or interactive stuff.

2514
02:32:38,100 --> 02:32:40,340
We're going to see that later if we have time.

2515
02:32:41,380 --> 02:32:42,540
And then it's just,

2516
02:32:43,580 --> 02:32:46,300
how do you go through some of the kernel functionality,

2517
02:32:46,300 --> 02:32:50,620
like having a question mark to get some information,

2518
02:32:50,660 --> 02:32:51,740
how you could use,

2519
02:32:52,980 --> 02:32:55,260
you didn't import it so it won't work.

2520
02:32:55,260 --> 02:32:56,340
Import pandas as pd.

2521
02:32:58,700 --> 02:33:02,540
Press tab to actually complete the data frame.

2522
02:33:02,540 --> 02:33:03,540
Once I have my data frame,

2523
02:33:03,540 --> 02:33:05,700
I can use shift tab to get the signature.

2524
02:33:05,700 --> 02:33:06,540
We've seen that.

2525
02:33:06,540 --> 02:33:10,420
We've seen the shell escape with bang.

2526
02:33:11,780 --> 02:33:15,260
Now you can see how some object of some libraries

2527
02:33:15,260 --> 02:33:17,300
are already nice, represented in HTML,

2528
02:33:17,300 --> 02:33:18,500
and not purely text.

2529
02:33:19,100 --> 02:33:23,060
How matplotlib, as I was typing somewhere,

2530
02:33:24,060 --> 02:33:26,620
can actually render in your graphs.

2531
02:33:26,620 --> 02:33:29,020
If I don't execute everything, it won't work.

2532
02:33:35,300 --> 02:33:36,740
Let's print something long.

2533
02:33:36,740 --> 02:33:39,100
If you click here, you can collapse,

2534
02:33:39,100 --> 02:33:42,540
or if you right click, you should be able to find

2535
02:33:42,540 --> 02:33:44,380
how to make it scrollable.

2536
02:33:45,380 --> 02:33:47,900
I can't read from here.

2537
02:33:47,900 --> 02:33:49,860
Enable scrolling for output.

2538
02:33:49,860 --> 02:33:51,060
So if you have a long output,

2539
02:33:51,060 --> 02:33:52,740
so it don't take too much space,

2540
02:33:54,580 --> 02:33:57,380
you probably have read that you can,

2541
02:33:57,380 --> 02:33:59,660
when you see these four arrow things,

2542
02:33:59,660 --> 02:34:01,980
you can drag cell around.

2543
02:34:01,980 --> 02:34:05,100
If you have a second notebook next to it,

2544
02:34:05,940 --> 02:34:07,300
you can grab a cell,

2545
02:34:07,300 --> 02:34:08,620
you should be able to grab a cell

2546
02:34:08,620 --> 02:34:10,180
and move it between notebooks,

2547
02:34:11,460 --> 02:34:13,740
so you don't have to copy and paste.

2548
02:34:13,780 --> 02:34:15,940
There are a lot of small things like that

2549
02:34:15,940 --> 02:34:17,540
that make so many things

2550
02:34:17,540 --> 02:34:19,340
that I won't go through everything.

2551
02:34:19,340 --> 02:34:20,540
You have the shortcut here,

2552
02:34:20,540 --> 02:34:24,220
like undo cell operation, reduce cell operation.

2553
02:34:28,380 --> 02:34:30,660
And here, well, something if you want to,

2554
02:34:30,660 --> 02:34:33,380
to have some JavaScript, you can have some JavaScript.

2555
02:34:33,380 --> 02:34:37,060
You may have seen, depending on exactly how you do that,

2556
02:34:37,060 --> 02:34:38,860
hopefully when you load it the first time,

2557
02:34:38,860 --> 02:34:40,860
the things did not appear,

2558
02:34:40,860 --> 02:34:41,980
but on my machine it did,

2559
02:34:41,980 --> 02:34:44,020
because I already ran the full notebook once,

2560
02:34:44,020 --> 02:34:47,220
so we have a notion of trusted notebook.

2561
02:34:48,540 --> 02:34:49,980
There are security vulnerability

2562
02:34:49,980 --> 02:34:51,780
if a code you don't trust

2563
02:34:51,780 --> 02:34:54,380
can run JavaScript in your browser.

2564
02:34:54,380 --> 02:34:57,540
So once you have run a complete notebooks once

2565
02:34:57,540 --> 02:34:59,740
from top to bottom and saved it,

2566
02:35:00,660 --> 02:35:04,100
we will keep a file on your computer

2567
02:35:04,100 --> 02:35:06,780
that says that this notebook is trusted.

2568
02:35:06,780 --> 02:35:09,780
And so JavaScript that has is in this notebook,

2569
02:35:09,780 --> 02:35:11,540
because you were one of the last person

2570
02:35:11,540 --> 02:35:14,140
to completely run it from top to bottom,

2571
02:35:14,140 --> 02:35:18,740
this notebook is able to show JavaScript at load time.

2572
02:35:18,740 --> 02:35:21,460
So what you will see is that some notebook

2573
02:35:21,460 --> 02:35:23,300
might not look exactly the same

2574
02:35:23,300 --> 02:35:25,060
when you receive them from someone,

2575
02:35:25,900 --> 02:35:28,260
and after you have completely executed them,

2576
02:35:29,820 --> 02:35:31,100
if that makes sense.

2577
02:35:31,100 --> 02:35:33,220
If it doesn't, we can come back to us

2578
02:35:33,220 --> 02:35:34,580
and we can talk about that.

2579
02:35:37,420 --> 02:35:39,380
But basically everything which is JavaScript-based

2580
02:35:39,540 --> 02:35:43,460
and interactive plant-based might not appear

2581
02:35:43,460 --> 02:35:46,180
exactly as it does when you load a notebook

2582
02:35:46,180 --> 02:35:47,580
from an external source.

2583
02:35:50,980 --> 02:35:52,020
Any questions?

2584
02:35:53,340 --> 02:35:56,060
Is there a way to make it trusted?

2585
02:35:56,060 --> 02:35:58,300
Is there a way to make it trusted?

2586
02:35:58,300 --> 02:35:59,200
Yes.

2587
02:36:03,260 --> 02:36:06,380
You go to the command palette and you can do trust notebook.

2588
02:36:07,380 --> 02:36:09,820
Well, in that case, when you do that, we trust you,

2589
02:36:09,820 --> 02:36:14,420
but if there is any code in the output,

2590
02:36:14,420 --> 02:36:16,020
if the notebook has been forged,

2591
02:36:16,020 --> 02:36:18,500
and well, that's basically the equivalent

2592
02:36:18,500 --> 02:36:23,500
of accepting an unknown Excel macro

2593
02:36:23,540 --> 02:36:25,300
or an unknown Word macro,

2594
02:36:25,300 --> 02:36:27,900
and you probably have heard what's happened in the past.

2595
02:36:27,900 --> 02:36:29,660
So it's up to you.

2596
02:36:29,660 --> 02:36:30,540
You can do that.

2597
02:36:30,540 --> 02:36:34,380
There is also a command line thing

2598
02:36:34,380 --> 02:36:38,540
if you do Jupyter notebook trust,

2599
02:36:38,540 --> 02:36:40,100
or is it just Jupyter trust?

2600
02:36:45,380 --> 02:36:47,100
Yep, it seems to be Jupyter trust.

2601
02:36:47,980 --> 02:36:48,820
Does help.

2602
02:36:50,300 --> 02:36:53,900
Yep, you can pass it a number of notebooks

2603
02:36:53,900 --> 02:36:58,260
and it will trust them so that when you open them,

2604
02:36:58,260 --> 02:36:59,860
the JavaScript will be displayed.

2605
02:37:05,380 --> 02:37:06,380
Any more questions?

2606
02:37:07,740 --> 02:37:11,980
So I'm used to the original Jupyter notebook experience,

2607
02:37:11,980 --> 02:37:14,220
but if I'm in the lab and I have multiple notebooks

2608
02:37:14,220 --> 02:37:17,780
and I restart, like I want to clean up the in numbers,

2609
02:37:17,780 --> 02:37:20,020
and I restart kernel,

2610
02:37:20,020 --> 02:37:23,700
will it affect the other tabs that have other?

2611
02:37:23,700 --> 02:37:26,460
So if you have the same notebook in multiple tabs.

2612
02:37:28,300 --> 02:37:29,820
You're opening multiple tabs if you work,

2613
02:37:29,820 --> 02:37:30,660
not the same.

2614
02:37:31,380 --> 02:37:36,380
Like Chrome tabs, like browser tabs.

2615
02:37:37,580 --> 02:37:40,140
No, in Jupyter lab, like a second notebook.

2616
02:37:41,420 --> 02:37:42,620
Okay, so the question is yes,

2617
02:37:42,620 --> 02:37:46,660
if you have several notebook and you have,

2618
02:37:46,660 --> 02:37:48,300
so two notebooks here,

2619
02:37:48,300 --> 02:37:51,300
I have exercise one and untitled.ipoinb,

2620
02:37:51,300 --> 02:37:54,700
and I want to clear all outputs,

2621
02:37:55,700 --> 02:37:59,380
and I go to command palette,

2622
02:37:59,380 --> 02:38:02,660
and I go to clear all outputs.

2623
02:38:02,660 --> 02:38:06,540
Will it affect one tab or all tabs?

2624
02:38:06,540 --> 02:38:07,380
So that's the question.

2625
02:38:07,380 --> 02:38:10,700
Or restart the kernel or clear tab.

2626
02:38:10,700 --> 02:38:15,700
It should affect only the current focused notebook.

2627
02:38:16,060 --> 02:38:18,140
So here it's discrete,

2628
02:38:18,140 --> 02:38:21,020
but you will see that untitled.ipoinb at top

2629
02:38:21,020 --> 02:38:25,020
has a blue line on the top of the tab,

2630
02:38:25,020 --> 02:38:29,860
and so that would only affect the one which is in focus.

2631
02:38:30,780 --> 02:38:34,260
And so if I restart,

2632
02:38:34,260 --> 02:38:36,860
it will also restart only the one which is in focus.

2633
02:38:37,780 --> 02:38:39,860
I don't believe there is a way to do that for all notebooks.

2634
02:38:39,860 --> 02:38:41,740
If you want to do restart for all notebook,

2635
02:38:41,740 --> 02:38:44,220
what I would suggest is go to the running tab here,

2636
02:38:44,220 --> 02:38:46,060
and just do shutdown, shutdown, shutdown, shutdown,

2637
02:38:46,060 --> 02:38:47,860
shutdown, shutdown.

2638
02:38:47,860 --> 02:38:50,900
And now it will say, well, no kernel for this notebook.

2639
02:38:51,740 --> 02:38:53,020
Let me just get rid of that one.

2640
02:38:53,020 --> 02:38:55,580
It says no kernel because the kernel is gone now.

2641
02:38:55,580 --> 02:38:59,220
You can read the Python 3, and now you have a clean thing.

2642
02:38:59,220 --> 02:39:00,260
You have a shutdown all,

2643
02:39:00,260 --> 02:39:01,860
but I don't think you have a restart all.

2644
02:39:01,860 --> 02:39:03,980
It's possible to add, I think it's an extension.

2645
02:39:03,980 --> 02:39:05,140
Let's see if there is a restart all,

2646
02:39:05,140 --> 02:39:06,580
but I don't believe there is.

2647
02:39:08,180 --> 02:39:09,020
No, there is not.

2648
02:39:09,020 --> 02:39:11,300
But we could add that if necessary,

2649
02:39:11,300 --> 02:39:12,940
because everything is plugin-based.

2650
02:39:15,420 --> 02:39:16,740
Other questions?

2651
02:39:16,740 --> 02:39:17,580
Or we move on?

2652
02:39:18,660 --> 02:39:19,660
We have, okay.

2653
02:39:21,860 --> 02:39:24,660
So let's go to reach this place.

2654
02:39:24,660 --> 02:39:25,860
We are already at five.

2655
02:39:27,860 --> 02:39:30,180
So that's some examples mostly.

2656
02:39:30,180 --> 02:39:32,740
So this one you won't have to change much.

2657
02:39:32,740 --> 02:39:34,620
It's basically explained to you that

2658
02:39:34,620 --> 02:39:36,140
if you know a bit about Python,

2659
02:39:36,140 --> 02:39:40,020
you know that Python objects have a wrapper, a dander wrapper.

2660
02:39:40,020 --> 02:39:41,660
So when you have dander in Python,

2661
02:39:41,660 --> 02:39:44,060
it means a method with two underscore before

2662
02:39:44,060 --> 02:39:45,540
and two underscore after.

2663
02:39:45,540 --> 02:39:47,940
So you will hear dander init, dander equal,

2664
02:39:47,940 --> 02:39:50,140
dander wrapper, dander stir.

2665
02:39:51,300 --> 02:39:54,620
And so we extended that in Python to say well,

2666
02:39:54,620 --> 02:39:58,780
and Jupyter, say well, you don't need to be text only.

2667
02:39:58,780 --> 02:40:01,340
You can be PNG, you can be SVG,

2668
02:40:01,340 --> 02:40:02,780
you can be anything you want.

2669
02:40:04,980 --> 02:40:09,420
And so I'm going to go slightly faster on this one.

2670
02:40:09,420 --> 02:40:11,780
So the equivalent of print,

2671
02:40:11,780 --> 02:40:15,380
but for all the formats is called display.

2672
02:40:15,380 --> 02:40:18,380
So if you use Python, either you can import it explicitly

2673
02:40:18,380 --> 02:40:21,500
on relatively recent version of Python is already there.

2674
02:40:22,460 --> 02:40:24,660
So if you call the display on an object,

2675
02:40:24,660 --> 02:40:28,380
like a pandas.frame, it will show itself as HTML.

2676
02:40:30,140 --> 02:40:32,780
And so that's just showcasing some of,

2677
02:40:35,460 --> 02:40:36,300
what's wrong?

2678
02:40:36,300 --> 02:40:37,140
That's okay, anyway.

2679
02:40:38,860 --> 02:40:39,700
Where is it?

2680
02:40:41,940 --> 02:40:42,780
Good question.

2681
02:40:43,980 --> 02:40:44,820
It's not there.

2682
02:40:45,180 --> 02:40:48,700
Well, a bug, I would pick that.

2683
02:40:48,700 --> 02:40:51,860
So hopefully the output is still saved.

2684
02:40:51,860 --> 02:40:55,500
So if you have an image and you do shift enter,

2685
02:40:55,500 --> 02:40:57,700
it should show an image or you can display it.

2686
02:40:57,700 --> 02:40:59,900
You can also give it a URL

2687
02:40:59,900 --> 02:41:02,300
and it will get the URL and display it.

2688
02:41:02,300 --> 02:41:06,140
Or you can use, this one is gone as well, I don't know why.

2689
02:41:07,700 --> 02:41:10,900
So you can have rich things in line.

2690
02:41:10,900 --> 02:41:14,060
When you have images, you can have either embedded

2691
02:41:14,060 --> 02:41:15,740
or you get the data of the image

2692
02:41:15,740 --> 02:41:19,900
or what's it called, not embedded or soft linked.

2693
02:41:20,820 --> 02:41:24,620
So here, there is not much differences,

2694
02:41:24,620 --> 02:41:27,100
but here is the image of

2695
02:41:28,820 --> 02:41:32,380
Lawrence Berkeley Lab Hall of Science.

2696
02:41:32,380 --> 02:41:35,100
And you see that this one is a value of the image

2697
02:41:35,100 --> 02:41:37,300
at the time I ran this notebook last time.

2698
02:41:37,300 --> 02:41:42,300
So you see it was on April 28th at 12, 13 p.m. local time.

2699
02:41:44,060 --> 02:41:45,540
I'm in Berkeley.

2700
02:41:45,540 --> 02:41:46,940
And if you look at this image,

2701
02:41:46,940 --> 02:41:49,580
which is about the same code except

2702
02:41:51,340 --> 02:41:53,660
the way I've called it is slightly different.

2703
02:41:53,660 --> 02:41:57,700
You see that it's actually just the image at is now.

2704
02:41:57,700 --> 02:41:59,420
So every time I will reload this notebook,

2705
02:41:59,420 --> 02:42:01,420
this image will be just soft link.

2706
02:42:01,420 --> 02:42:03,420
It's basically just having an image tag.

2707
02:42:04,900 --> 02:42:06,660
You can of course display HTML.

2708
02:42:10,580 --> 02:42:12,980
I forgot to import it, starting to be tired.

2709
02:42:14,780 --> 02:42:17,580
And so you can have your own custom object

2710
02:42:17,580 --> 02:42:19,940
or you can use a percent percent HTML magic

2711
02:42:19,940 --> 02:42:22,740
if you want to just get some quick HTML.

2712
02:42:22,740 --> 02:42:24,140
You can display LaTeX.

2713
02:42:26,100 --> 02:42:31,100
And you can have your Maxwell equations.

2714
02:42:32,380 --> 02:42:33,700
That's relatively useful.

2715
02:42:34,660 --> 02:42:36,540
So that's just showing some of the things

2716
02:42:36,540 --> 02:42:39,540
that can be displayed on your laptop.

2717
02:42:39,540 --> 02:42:43,060
You can run this one and you will have some audio files.

2718
02:42:43,220 --> 02:42:45,380
One of the funny one was a couple of years ago,

2719
02:42:45,380 --> 02:42:48,300
you've found the Lego detected two black holes

2720
02:42:48,300 --> 02:42:49,500
that merged together.

2721
02:42:49,500 --> 02:42:52,260
They actually computed, like they shifted

2722
02:42:52,260 --> 02:42:53,820
a frequency into the audible range

2723
02:42:53,820 --> 02:42:56,460
and you can actually listen to the two black holes colliding.

2724
02:42:59,100 --> 02:43:02,100
And you can embed videos, like for example,

2725
02:43:02,100 --> 02:43:06,860
having the heat equations on some system

2726
02:43:06,860 --> 02:43:11,860
or embed a different website if you want to add them,

2727
02:43:12,220 --> 02:43:14,500
have people interact with that.

2728
02:43:14,500 --> 02:43:16,780
So of course that ties into the security issue

2729
02:43:16,780 --> 02:43:19,580
that we talked about and why notebook get trusted or not

2730
02:43:19,580 --> 02:43:22,060
because you can actually execute things in the browser

2731
02:43:22,060 --> 02:43:24,560
and you should be careful about that.

2732
02:43:25,900 --> 02:43:29,860
For JupyterLab, we extended this notion of rich output

2733
02:43:29,860 --> 02:43:34,780
and so now you can basically teach Jupyter and JupyterLab

2734
02:43:34,780 --> 02:43:36,780
how to render specific file types

2735
02:43:36,780 --> 02:43:38,580
or more specifically MIME types.

2736
02:43:41,860 --> 02:43:46,420
In some of the instruction, you might have seen that

2737
02:43:46,420 --> 02:43:49,860
we did install GeoJSON extension and FASTA extension.

2738
02:43:49,860 --> 02:43:54,060
So GeoJSON is a way to represent landmarks using JSON

2739
02:43:54,060 --> 02:43:57,540
and FASTA is a biology file format

2740
02:43:57,540 --> 02:43:59,460
that shows some like MIME.

2741
02:44:00,540 --> 02:44:02,380
And what you can do is install extensions

2742
02:44:02,380 --> 02:44:04,940
that both teach JupyterLab and the notebook

2743
02:44:04,940 --> 02:44:08,140
how to render that in the browser.

2744
02:44:08,140 --> 02:44:11,300
So here I have somewhere

2745
02:44:12,260 --> 02:44:14,420
if I can make that wide enough.

2746
02:44:16,900 --> 02:44:19,300
I have a GeoJSON file.

2747
02:44:19,300 --> 02:44:21,540
If you open with a normal editor,

2748
02:44:21,540 --> 02:44:23,460
you will see that it's just JSON.

2749
02:44:25,780 --> 02:44:30,780
But because I have taught JupyterLab how to render it,

2750
02:44:31,180 --> 02:44:33,940
I can now view GeoJSON file directly in my browser

2751
02:44:33,940 --> 02:44:36,300
and if the internet connection is good,

2752
02:44:36,300 --> 02:44:38,900
the tile should load and now I see my,

2753
02:44:39,620 --> 02:44:44,620
I see directly this file as it's supposed to be shown.

2754
02:44:45,980 --> 02:44:48,460
And same thing if you have a specific,

2755
02:44:48,460 --> 02:44:51,260
like if you know what a FASTA file is,

2756
02:44:51,260 --> 02:44:54,540
you can have a specific renderer for this FASTA file.

2757
02:44:54,540 --> 02:44:56,620
Let's look at the FASTA file.

2758
02:44:58,860 --> 02:45:00,500
I want to have the row view.

2759
02:45:01,580 --> 02:45:06,180
So Zika assembly opening with editor.

2760
02:45:06,260 --> 02:45:09,700
Let me try to get the two next to each other.

2761
02:45:11,300 --> 02:45:12,460
And one of the nice things,

2762
02:45:12,460 --> 02:45:15,580
or let's look, the first one is a dash here,

2763
02:45:15,580 --> 02:45:17,620
the first one is a dash here.

2764
02:45:17,620 --> 02:45:21,460
If I change, hopefully it should automatically update

2765
02:45:21,460 --> 02:45:24,220
without having to save so the two view are synchronized.

2766
02:45:25,160 --> 02:45:29,060
But now that you've taught JupyterLab how to render a file,

2767
02:45:29,060 --> 02:45:31,420
well you can do the same in a notebook

2768
02:45:31,420 --> 02:45:34,580
and hopefully this works now.

2769
02:45:36,180 --> 02:45:38,380
You can have this FASTA.ipynb

2770
02:45:38,380 --> 02:45:43,380
and now here is the complete code

2771
02:45:44,420 --> 02:45:48,300
to display a FASTA file or a FASTA data set

2772
02:45:48,300 --> 02:45:51,340
without having it to actually be a file into the browser.

2773
02:45:52,300 --> 02:45:57,300
So here I'm defining FASTA class

2774
02:45:58,060 --> 02:46:01,140
and say well now I want to teach IPython

2775
02:46:01,140 --> 02:46:03,560
how to display it as non-text.

2776
02:46:04,560 --> 02:46:07,240
Well if I can only render text,

2777
02:46:07,240 --> 02:46:09,780
just send the data as is.

2778
02:46:10,880 --> 02:46:15,880
Otherwise, tell JupyterLab to render it

2779
02:46:16,240 --> 02:46:20,660
using the FASTA viewer that we used for our file before.

2780
02:46:21,440 --> 02:46:24,120
And that's it, you can actually make that in a py file,

2781
02:46:24,120 --> 02:46:27,000
you can actually distribute it on PyPI if you want.

2782
02:46:28,160 --> 02:46:33,160
And now if you create an object like this one,

2783
02:46:33,920 --> 02:46:38,560
like FASTA objects equal FASTA

2784
02:46:38,560 --> 02:46:41,200
and now do FASTA object,

2785
02:46:41,200 --> 02:46:44,680
it should display with my keyboard that just type to is.

2786
02:46:52,420 --> 02:46:54,120
It should display properly.

2787
02:46:54,120 --> 02:46:56,520
So now what you can do is you can write

2788
02:46:56,520 --> 02:46:58,800
with a bit of time an extension for JupyterLab

2789
02:46:58,800 --> 02:47:01,280
and say well I have this specific kind of data

2790
02:47:01,280 --> 02:47:03,480
that I want to see in a specific way.

2791
02:47:04,400 --> 02:47:05,800
Here is how to display them.

2792
02:47:06,680 --> 02:47:07,840
Question in the back.

2793
02:47:09,280 --> 02:47:10,280
Is it similar to Ripper HTML

2794
02:47:10,280 --> 02:47:13,280
that we used in the Ripper HTML?

2795
02:47:15,960 --> 02:47:19,160
So is it similar to Ripper HTML

2796
02:47:19,160 --> 02:47:21,520
that you have in classic notebook?

2797
02:47:21,520 --> 02:47:25,720
Yes it's similar in the sense that Ripper HTML,

2798
02:47:25,720 --> 02:47:27,560
you could actually do here,

2799
02:47:27,560 --> 02:47:30,560
you could do a text HTML

2800
02:47:31,240 --> 02:47:36,240
and then here compute HTML representation

2801
02:47:40,120 --> 02:47:43,000
in the kernel.

2802
02:47:49,080 --> 02:47:49,920
So data.

2803
02:47:50,840 --> 02:47:53,840
So you would actually send HTML to the front end

2804
02:47:53,840 --> 02:47:56,400
and the front end will say okay, oh here is our HTML.

2805
02:47:57,400 --> 02:47:59,040
But here it's doing something slightly different

2806
02:47:59,280 --> 02:48:01,200
in the sense that it's sending the data itself

2807
02:48:01,200 --> 02:48:04,520
and the front end is deciding how to render it.

2808
02:48:04,520 --> 02:48:09,520
So the HTML here is computed by JupyterLab itself

2809
02:48:09,880 --> 02:48:12,920
not by the running process in the back.

2810
02:48:12,920 --> 02:48:16,520
Which means that usually when you do Ripper HTML

2811
02:48:16,520 --> 02:48:18,440
that you've seen in the other notebook,

2812
02:48:18,440 --> 02:48:22,360
you usually, the library author is in control

2813
02:48:22,360 --> 02:48:24,960
of how the object will be displayed.

2814
02:48:25,840 --> 02:48:28,880
While here the library author just sends some data

2815
02:48:29,800 --> 02:48:32,440
and the users can decide which plugins

2816
02:48:32,440 --> 02:48:34,840
they want to use for which rendering.

2817
02:48:34,840 --> 02:48:36,880
Which is a slight difference

2818
02:48:36,880 --> 02:48:39,880
but we're not going to dive too much into that.

2819
02:48:39,880 --> 02:48:43,760
On the big difference also from classic notebook

2820
02:48:43,760 --> 02:48:47,600
is that when you register a plugin on JupyterLab

2821
02:48:47,600 --> 02:48:50,440
because you don't have to do a kernel computation,

2822
02:48:50,440 --> 02:48:52,760
it will work with a file browser.

2823
02:48:52,760 --> 02:48:54,120
While if you do Ripper HTML,

2824
02:48:54,120 --> 02:48:55,680
you have to get a process in the back

2825
02:48:55,680 --> 02:48:57,600
that does some computation.

2826
02:48:57,600 --> 02:48:59,840
And that was not possible in normal notebook.

2827
02:49:05,360 --> 02:49:07,160
Questions, other questions?

2828
02:49:08,600 --> 02:49:10,480
How did you get to write that because

2829
02:49:10,480 --> 02:49:12,560
you didn't represent the things?

2830
02:49:12,560 --> 02:49:16,680
It should be root of the repository notebook

2831
02:49:16,680 --> 02:49:19,200
and FASTA.IPYNB.

2832
02:49:19,200 --> 02:49:22,240
In FASTA.IPYNB the only thing that does

2833
02:49:22,240 --> 02:49:25,760
is create a dummy object that defines this.

2834
02:49:25,760 --> 02:49:28,520
I'm going to remove that or at least comment it.

2835
02:49:28,520 --> 02:49:30,520
That defines this IPYTON display things

2836
02:49:30,520 --> 02:49:34,640
and say well, here is a MIME type

2837
02:49:34,640 --> 02:49:36,000
if you know what a MIME type is

2838
02:49:36,000 --> 02:49:38,000
and here is a data for this MIME type.

2839
02:49:39,440 --> 02:49:41,720
The kernel will send all of that to the front end

2840
02:49:41,720 --> 02:49:43,200
and the front end will say well,

2841
02:49:43,200 --> 02:49:45,880
I know how to represent FASTA file,

2842
02:49:45,880 --> 02:49:47,920
I'm going to use the FASTA representation.

2843
02:49:49,400 --> 02:49:51,000
Or the GeoJSON.

2844
02:49:52,000 --> 02:49:55,280
So let's try to do it with GeoJSON.

2845
02:49:55,280 --> 02:49:56,920
If it already exists this one,

2846
02:49:56,920 --> 02:50:01,920
so from IPYTON.display import GeoJSON.

2847
02:50:05,080 --> 02:50:07,480
Let's look at our GeoJSON object.

2848
02:50:08,800 --> 02:50:13,720
JSONable dicts, so we probably want to do JG equal

2849
02:50:13,720 --> 02:50:17,320
and what was the name of our file?

2850
02:50:17,360 --> 02:50:22,360
The name of our file was data museum in DC.

2851
02:50:23,720 --> 02:50:28,720
So let's do with open dot dot slash

2852
02:50:33,520 --> 02:50:38,320
data museum in DC as F.

2853
02:50:38,320 --> 02:50:42,320
Let's try to just do that F dot read

2854
02:50:42,320 --> 02:50:44,440
and let's try to do G, will that work?

2855
02:50:44,440 --> 02:50:45,280
Yep, that works.

2856
02:50:46,280 --> 02:50:49,840
There's a warning, not JSON string.

2857
02:50:51,080 --> 02:50:54,640
And so now we are able to directly source on JSON.

2858
02:50:54,640 --> 02:50:57,200
If we know our JSON is supposed to represent

2859
02:50:57,200 --> 02:51:00,320
some geographic data, it doesn't need to be a file

2860
02:51:00,320 --> 02:51:02,800
if it was an API here.

2861
02:51:02,800 --> 02:51:06,480
I could have done something like as an example,

2862
02:51:06,480 --> 02:51:11,480
but I don't know, request dot get HTTPS kernel slash slash

2863
02:51:11,520 --> 02:51:16,520
HTTPS kernel slash slash museums dot org slash DC

2864
02:51:19,080 --> 02:51:21,440
slash location dot JSON.

2865
02:51:23,560 --> 02:51:25,880
And that would be dot content with requests

2866
02:51:25,880 --> 02:51:30,880
and do GeoJSON of that.

2867
02:51:31,640 --> 02:51:34,200
And if I had to do that, if this was an actual API

2868
02:51:34,200 --> 02:51:37,000
that works, I would just like directly

2869
02:51:37,000 --> 02:51:39,040
instead of printing JSON, it would actually print

2870
02:51:39,040 --> 02:51:40,280
the location of the museum.

2871
02:51:41,480 --> 02:51:46,480
And so how, and 5B is how to do that on your own.

2872
02:51:48,800 --> 02:51:50,760
So that introduced some of the display HTML

2873
02:51:50,760 --> 02:51:54,040
which is slightly simpler that Mike talked about.

2874
02:51:55,400 --> 02:51:57,280
And it shows you, like for example,

2875
02:51:57,280 --> 02:52:00,760
if you have a custom class which is a circle class,

2876
02:52:00,760 --> 02:52:05,760
that's relatively simple, how would you create,

2877
02:52:06,040 --> 02:52:08,200
how would you do that on your own?

2878
02:52:08,240 --> 02:52:10,840
And so the way to do that is to create

2879
02:52:11,920 --> 02:52:16,920
underscore repr underscore png or HTML

2880
02:52:17,000 --> 02:52:21,200
or whatever underscore methods that returns

2881
02:52:21,200 --> 02:52:25,640
what data for HTML or for LaTeX or for something else is.

2882
02:52:27,120 --> 02:52:29,480
And so here is what you would return for HTML,

2883
02:52:29,480 --> 02:52:33,240
what you would return for LaTeX or for JavaScript,

2884
02:52:33,240 --> 02:52:34,440
for example.

2885
02:52:34,440 --> 02:52:36,920
And one of the exercise here is to rewrite

2886
02:52:36,920 --> 02:52:40,200
my class circle to try to display a circle

2887
02:52:40,200 --> 02:52:43,360
instead of printing some text, I am a circle.

2888
02:52:43,360 --> 02:52:46,040
So we're going to take five minutes to do that

2889
02:52:47,720 --> 02:52:50,520
and then move on to the last part.

2890
02:52:52,040 --> 02:52:52,880
Questions?

2891
02:52:58,320 --> 02:53:00,640
Okay, so that takes five minutes.

2892
02:53:06,920 --> 02:53:07,760
Okay.

2893
02:53:36,920 --> 02:53:37,760
Thank you.

2894
02:53:52,360 --> 02:53:53,200
Thank you.

2895
02:54:06,920 --> 02:54:11,920
I have to do two more minutes, I have to produce some sugars.

2896
02:54:11,920 --> 02:54:13,760
I have some to do some.

2897
02:54:31,280 --> 02:54:34,440
It's 5B, 5B custom display logic.

2898
02:54:36,960 --> 02:54:37,740
Okay, sounds cool.

2899
02:54:39,200 --> 02:54:40,040
Sorry.

2900
02:54:47,800 --> 02:54:49,000
Does this work?

2901
02:54:50,240 --> 02:54:51,400
I just saw it.

2902
02:55:36,920 --> 02:55:55,800
Sorry.

2903
02:55:55,800 --> 02:56:01,960
Are we good?

2904
02:56:01,960 --> 02:56:05,680
So if you're developing your own library, you can create your object and say here is

2905
02:56:05,680 --> 02:56:10,080
how to display yourself as HTML.

2906
02:56:10,080 --> 02:56:14,560
So I've done it with repr HTML, and you have the solution.

2907
02:56:14,560 --> 02:56:21,720
Let's see how the solution differs while print HTML and also in LaTeX.

2908
02:56:21,720 --> 02:56:26,800
Or you can have several different methods like that depending on if you are going to

2909
02:56:26,800 --> 02:56:30,280
convert your notebook to PDF, which is one of the possibilities, say how to represent

2910
02:56:30,280 --> 02:56:32,920
yourself in LaTeX.

2911
02:56:32,920 --> 02:56:41,360
And then you can force IPython to display as a specific, or Jupyter as a specific things.

2912
02:56:41,360 --> 02:56:46,720
Here I haven't defined for LaTeX, so let's redefine it and now it will display with LaTeX.

2913
02:56:46,720 --> 02:56:52,840
If you want to do something more complicated, what you can do is define how to do it in

2914
02:56:52,840 --> 02:56:57,000
PNG using Matplotlib.

2915
02:56:57,000 --> 02:57:02,080
So you can create a Matplotlib object.

2916
02:57:02,080 --> 02:57:03,080
Yes?

2917
02:57:03,080 --> 02:57:10,120
So there must be a list of formats that are ranked somewhere.

2918
02:57:10,120 --> 02:57:15,280
So there is a list, the question is which one do you choose when you have several.

2919
02:57:15,280 --> 02:57:18,920
So yes, in the front end, the front end will decide, you actually send everything and the

2920
02:57:18,920 --> 02:57:21,600
front end will decide which one to display.

2921
02:57:21,600 --> 02:57:27,360
It stores everything in the notebook document, which means that when you reload in either

2922
02:57:28,360 --> 02:57:32,440
or another front end, the front end can after the fact decide which one to show.

2923
02:57:32,440 --> 02:57:36,840
Also, for example, if you create a display JavaScript, it's going to be a high priority

2924
02:57:36,840 --> 02:57:41,480
and it will display in JupyterLab.

2925
02:57:41,480 --> 02:57:45,800
And if you convert to PDF, well, the PDF converter will say, no, I don't know how to deal with

2926
02:57:45,800 --> 02:57:47,800
JavaScript, I don't know how to deal with HTML.

2927
02:57:47,800 --> 02:57:48,960
Oh, here is a LaTeX one.

2928
02:57:48,960 --> 02:57:53,800
I'm going to use a LaTeX one.

2929
02:57:53,840 --> 02:57:57,760
But you can force when you have display underscore PNG or display underscore HTML, you can force

2930
02:57:57,760 --> 02:57:59,160
which one to send.

2931
02:57:59,160 --> 02:58:08,160
Actually, what you can do is do display has two keyword arguments, exclude and include,

2932
02:58:08,160 --> 02:58:09,160
I believe.

2933
02:58:09,160 --> 02:58:11,760
I don't remember why it doesn't work.

2934
02:58:11,760 --> 02:58:18,720
And you can say, well, I want you to send everything except image SVG.

2935
02:58:18,720 --> 02:58:21,560
Or I want to only send those one.

2936
02:58:21,600 --> 02:58:26,160
And that's a slightly advanced thing, so we're not going to do that.

2937
02:58:26,160 --> 02:58:32,120
So the other thing that here that exercise notebook show you is what if you don't control

2938
02:58:32,120 --> 02:58:34,240
the object itself?

2939
02:58:34,240 --> 02:58:38,960
What if you want to already have your circle object, you want it to be able to represent

2940
02:58:38,960 --> 02:58:43,000
it as PNG, but you can't change the circle object itself anymore?

2941
02:58:43,000 --> 02:58:48,000
What you can do is teach IPython here, and IPython not Jupyter.

2942
02:58:48,000 --> 02:58:54,360
Like, no, don't use that to display the object as PNG or HTML.

2943
02:58:54,360 --> 02:58:58,240
Use my own function that I want, because I know what I'm doing and I want to overwrite

2944
02:58:58,240 --> 02:59:00,760
what the library author is doing.

2945
02:59:00,760 --> 02:59:05,320
So here we have the function that convert our circle to PNG.

2946
02:59:05,320 --> 02:59:11,800
And what we can do is get the handle on IPython itself and say IPython when you're requested

2947
02:59:11,800 --> 02:59:15,200
to do some formatters for image PNG.

2948
02:59:15,440 --> 02:59:16,440
So we're moving two steps.

2949
02:59:16,440 --> 02:59:20,920
We're getting the things that converts, that try to loop through object and say, oh, how

2950
02:59:20,920 --> 02:59:23,360
do I make things as PNG?

2951
02:59:23,360 --> 02:59:29,840
And so the PNG formatter, when you see something which is a my circle, to generate the PNG,

2952
02:59:29,840 --> 02:59:30,840
use this function.

2953
02:59:30,840 --> 02:59:36,960
So now we have these functions that take a circle and return a figure object, which is

2954
02:59:36,960 --> 02:59:37,960
a PNG.

2955
02:59:37,960 --> 02:59:44,920
And now if we do that, because PNG is higher on the list you requested, well, now we have

2956
02:59:44,960 --> 02:59:47,920
an actual circle which is displayed as PNG.

2957
02:59:47,920 --> 02:59:53,040
And so the typical use case is what is just after is what if you have NumPy arrays?

2958
02:59:53,040 --> 02:59:57,280
NumPy arrays will usually have different meaning in your domain specific.

2959
02:59:57,280 --> 03:00:02,480
You know that they are a map or they are actually matrices where you are interested in the numbers.

2960
03:00:02,480 --> 03:00:09,280
What you can do is say, well, here is a function to convert a NumPy array to a PNG or to HTML,

2961
03:00:09,280 --> 03:00:12,920
if you prefer HTML because you want to see the number.

2962
03:00:12,920 --> 03:00:18,200
And now we're going to tell IPyTown when you see an NumPy array, so here is a PNG formatter

2963
03:00:18,200 --> 03:00:25,120
for type NumPy and DRA, use this function to generate a PNG for my NumPy array.

2964
03:00:25,120 --> 03:00:30,240
NumPy doesn't have a default PNG representation because I think that it might not be the right

2965
03:00:30,240 --> 03:00:31,240
thing.

2966
03:00:31,240 --> 03:00:37,600
And so once you do that, now IPyTown says, well, if I see a NumPy array when I display

2967
03:00:37,600 --> 03:00:42,040
or if it's a last statement of a cell, I'm going to generate a PNG for that and send

2968
03:00:42,440 --> 03:00:43,440
it over.

2969
03:00:43,440 --> 03:00:48,560
And so now if I create a NumPy array which is just random end by end, well, I have these

2970
03:00:48,560 --> 03:00:49,560
things.

2971
03:00:49,560 --> 03:00:59,400
If I prefer to, you could use map.lib and change the color and change the size, you

2972
03:00:59,400 --> 03:01:05,600
can do whatever you want as long as you know how to go from a specific data to a given

2973
03:01:05,600 --> 03:01:08,880
representation.

2974
03:01:08,880 --> 03:01:13,640
And then you can force to get back for NumPy, for example, NumPy has a pretty representation

2975
03:01:13,640 --> 03:01:20,280
that adds ellipses and so you can force to have a pretty text representation for these

2976
03:01:20,280 --> 03:01:27,600
NumPy arrays if you want to skip the PNG representation.

2977
03:01:27,600 --> 03:01:34,760
And so here is a nice gradient to finish that.

2978
03:01:34,760 --> 03:01:40,960
And for the, well, not even 15 minutes we have left, we're going to venture a tiny

2979
03:01:40,960 --> 03:01:43,640
bit into cross-language integration.

2980
03:01:43,640 --> 03:01:48,240
That you will have to go to specific libraries, but I want to show you that a lot of people

2981
03:01:48,240 --> 03:01:51,640
think one notebook is one language, one kernel is one language.

2982
03:01:51,640 --> 03:01:54,400
It's usually the case, but not always.

2983
03:01:54,400 --> 03:01:57,480
What you can do is cross-language integration.

2984
03:01:57,480 --> 03:02:02,920
If you're doing statistics, you might want to mix, mix, and match R and Python.

2985
03:02:03,760 --> 03:02:07,040
If you're doing some high performance, you might want to put some site on or some scene

2986
03:02:07,040 --> 03:02:08,040
side.

2987
03:02:08,040 --> 03:02:16,480
And there are many libraries that provide, we've seen the LP run line profiler, Python

2988
03:02:16,480 --> 03:02:20,120
magic that you can load from line profiler package.

2989
03:02:20,120 --> 03:02:23,960
And here we're going to load some extension for Rpy2 to move data back and forth between

2990
03:02:23,960 --> 03:02:29,800
Python and R.

2991
03:02:29,800 --> 03:02:36,160
So there is a lot of explanation, but I basically just created a Fibonacci sequence.

2992
03:02:36,160 --> 03:02:45,520
So it goes from, it grows, if I remember correctly from my university time, it should be exponential

2993
03:02:45,520 --> 03:02:48,400
at some point or close to exponential.

2994
03:02:48,400 --> 03:02:50,200
So let's just try to plot it.

2995
03:02:50,200 --> 03:02:56,280
I'm assuming you kind of know how to use Matplotlib, but we can dive into that at some point.

2996
03:02:56,280 --> 03:02:58,360
And it does look like that.

2997
03:02:58,360 --> 03:03:02,120
But the question is, how can we check that?

2998
03:03:02,120 --> 03:03:07,360
Well, my thought is that if we do in a semi-log axis and do a linear regression, it should

2999
03:03:07,360 --> 03:03:11,960
be close to a line and we should be able to find the intercept at the origin and the slope,

3000
03:03:11,960 --> 03:03:15,640
which would give us some information about the exponential growth.

3001
03:03:15,640 --> 03:03:18,160
I actually am not quite sure how to do that in Python.

3002
03:03:18,160 --> 03:03:22,320
Actually, I know how to do that in Python, but it's an example.

3003
03:03:22,320 --> 03:03:29,080
So I'm going to use rpy2, which is a really nice package, which in itself has a lot of

3004
03:03:29,080 --> 03:03:34,360
Python API to move things back and forth between Python and R. And it has specific integration

3005
03:03:34,360 --> 03:03:35,560
with ipython.

3006
03:03:35,560 --> 03:03:40,680
So again, I'm going to do rpy2.iPython.

3007
03:03:40,680 --> 03:03:47,840
And what this does is it injected in my namespace several percent or percent percent R something

3008
03:03:48,320 --> 03:03:55,320
that can take non-Python code and do what should be done with it.

3009
03:03:55,320 --> 03:03:58,200
And so the first thing it gives us is R push.

3010
03:03:58,200 --> 03:04:04,000
And what R push does is it takes y, the value of our Fibonacci sequence, and x, the index

3011
03:04:04,000 --> 03:04:11,000
of our Fibonacci sequence, and sends that to R. If the variable names are not valid

3012
03:04:11,000 --> 03:04:12,000
R, it does its magic.

3013
03:04:12,000 --> 03:04:14,120
I'm not quite sure I understand what that does.

3014
03:04:14,120 --> 03:04:20,560
And now we have a persistent R session with x and y, which we can access from our Python

3015
03:04:20,560 --> 03:04:22,440
notebook.

3016
03:04:22,440 --> 03:04:26,920
And now every cell that we want to execute in the R process, we are going to proceed

3017
03:04:26,920 --> 03:04:30,160
with percent percent R. And it's going to be persisted on the R session.

3018
03:04:30,160 --> 03:04:34,040
We still need to manage some of the movement, but some extension on other languages will

3019
03:04:34,040 --> 03:04:37,360
do the time movement automatically for you.

3020
03:04:37,360 --> 03:04:41,240
If you write some R, that would make sense.

3021
03:04:41,240 --> 03:04:44,800
You do a linear model of log of y versus x.

3022
03:04:44,800 --> 03:04:49,880
So that hopefully should be a line if our value is long enough.

3023
03:04:49,880 --> 03:04:54,120
We do a summary statistics of that that we put to value.

3024
03:04:54,120 --> 03:05:00,440
We do plot x and log of y, which hopefully should look like a straight line, and look

3025
03:05:00,440 --> 03:05:01,440
at our fits.

3026
03:05:01,440 --> 03:05:05,320
And so one thing we will see here is that not only you can run computation, but the

3027
03:05:05,320 --> 03:05:09,120
computation can send results and display rich objects.

3028
03:05:09,200 --> 03:05:13,960
R knows how to plot something, and it displays in the notebook, which is not a trivial thing

3029
03:05:13,960 --> 03:05:14,960
to do.

3030
03:05:14,960 --> 03:05:21,320
And indeed, our Fibonacci sequence seems to grow exponentially.

3031
03:05:21,320 --> 03:05:23,560
We can look at the summary value.

3032
03:05:23,560 --> 03:05:27,080
If you've done some R, this should mean some things to you.

3033
03:05:27,080 --> 03:05:29,280
You should understand that better than me.

3034
03:05:29,280 --> 03:05:37,120
But it tells you that it looks like, sorry, on the intercept is at minus 0.77, and the

3035
03:05:37,120 --> 03:05:41,800
slope is that much with the standard error and the p-value.

3036
03:05:41,800 --> 03:05:44,600
But now you want to do more from that.

3037
03:05:44,600 --> 03:05:48,600
So you want to get the value out.

3038
03:05:48,600 --> 03:05:54,520
You can just print them or actually return them as an MPI array.

3039
03:05:54,520 --> 03:05:58,360
So percent R, this is a line magic.

3040
03:05:58,360 --> 03:05:59,360
So this returns a value.

3041
03:05:59,360 --> 03:06:02,320
This is a cell magic, because it just prints a value.

3042
03:06:02,320 --> 03:06:06,840
You can see this difference, because here there is an output, and here there is no input.

3043
03:06:06,840 --> 03:06:10,240
No out number.

3044
03:06:10,240 --> 03:06:17,760
And if you remember correctly from the previous notebooks at the beginning, if you have a

3045
03:06:17,760 --> 03:06:21,080
line magic that returns a value, you can assign it.

3046
03:06:21,080 --> 03:06:26,760
And so you should be able to do something in Python equal to something in R.

3047
03:06:26,760 --> 03:06:28,800
So let's look at that.

3048
03:06:28,800 --> 03:06:34,080
R coef variable does not exist.

3049
03:06:34,080 --> 03:06:38,040
So we are going to assign it from R, and R pi 2 is going to do the type conversion

3050
03:06:38,040 --> 03:06:40,160
for us.

3051
03:06:40,160 --> 03:06:46,480
And then we can basically do some Python unpacking and get the first two values into the intercept

3052
03:06:46,480 --> 03:06:49,440
and the slope.

3053
03:06:49,440 --> 03:06:53,000
And now we have our value back in Python.

3054
03:06:53,000 --> 03:06:54,280
So we've mixed and matched Python.

3055
03:06:54,280 --> 03:06:55,280
We created a function in Python.

3056
03:06:55,280 --> 03:07:00,360
We did some statistical analysis in R, and we are back in Python for the analysis.

3057
03:07:00,360 --> 03:07:04,680
R is nice for analysis, but it's not the fastest language around.

3058
03:07:04,680 --> 03:07:07,120
Python is not either.

3059
03:07:07,120 --> 03:07:08,560
Cyton does work well.

3060
03:07:08,560 --> 03:07:13,440
If you heard about Cyton, it's like Python plus some type annotation, and it will compile

3061
03:07:13,440 --> 03:07:17,920
to C, and hopefully you will get something fast.

3062
03:07:17,920 --> 03:07:21,920
But using Cyton can be quite challenging, because you have to write your own module

3063
03:07:21,920 --> 03:07:24,040
and so on and so forth.

3064
03:07:24,040 --> 03:07:29,720
But the Cyton developer were nice enough to write some integration with Python so that

3065
03:07:29,720 --> 03:07:33,080
we can just basically do things on the fly.

3066
03:07:33,080 --> 03:07:38,480
So what you will do is the same as with R. You will load an extension from this module

3067
03:07:38,480 --> 03:07:39,480
so it's not shipped with IPython.

3068
03:07:39,480 --> 03:07:43,120
You have to have Cyton installed.

3069
03:07:43,120 --> 03:07:51,080
And if you do percent-percent Cyton, then all of that is going to be compiled in C.

3070
03:07:51,080 --> 03:07:58,080
So you see that it looks a lot like Python, except now you say that n is an integer, but

3071
03:07:58,080 --> 03:07:59,840
it can be a Python integer.

3072
03:07:59,840 --> 03:08:09,120
But inside the loop itself, x and y are going to be integers as well, but C integers.

3073
03:08:09,120 --> 03:08:13,800
And now you have something that really looks like Python, but just computes your function

3074
03:08:13,800 --> 03:08:15,680
way faster.

3075
03:08:15,680 --> 03:08:21,000
And you just have to basically put percent-percent Cyton at the top, put some type annotation.

3076
03:08:21,000 --> 03:08:27,280
And now you just define a function which is way faster than if it was in pure Python.

3077
03:08:27,320 --> 03:08:31,320
And you can directly use it without having to import it or anything.

3078
03:08:31,320 --> 03:08:35,640
And one of the nice things also is that you can redefine it on the fly.

3079
03:08:35,640 --> 03:08:39,280
So here you see that it does 1, 1, 2, and let's change that.

3080
03:08:39,280 --> 03:08:42,360
Let's put it to 6, which is not correct.

3081
03:08:42,360 --> 03:08:46,120
But you see that you were able to redefine this function on the fly, which usually you

3082
03:08:46,120 --> 03:08:47,120
cannot.

3083
03:08:47,120 --> 03:08:55,160
Which means that now you can also have quick interactive workflow with a faster language

3084
03:08:55,160 --> 03:08:57,160
than Python in some case.

3085
03:08:57,320 --> 03:09:06,480
So let's go back to 2 and let's compute our two things here.

3086
03:09:06,480 --> 03:09:15,280
And we see that, well, we got about a factor of 10 in speedup, slightly less, between our

3087
03:09:15,280 --> 03:09:19,800
normal Fibonacci function and our Cyton Fibonacci function.

3088
03:09:19,800 --> 03:09:25,680
Here what I've done with the time-it magic is to force it to do three loops of 100 each,

3089
03:09:25,680 --> 03:09:32,680
just to have something to show you some extra example for the time-it magic.

3090
03:09:32,680 --> 03:09:40,080
And I think we have a couple of minutes for questions and if you want to play with that.

3091
03:09:40,080 --> 03:09:45,080
And after it will be time for lunch.

3092
03:09:45,080 --> 03:09:53,680
And there is one survey that they asked me to ask you to fill in.

3093
03:09:54,680 --> 03:10:00,680
And so let me just write that here and then we can wrap that up.

3094
03:10:00,680 --> 03:10:05,680
And if you have any feedback, feel free to write on the sticky notes and stick them next

3095
03:10:05,680 --> 03:10:07,680
to the door when you exit.

3096
03:10:07,680 --> 03:10:12,680
And I will be happy to take that into account for the next tutorial.

3097
03:10:15,680 --> 03:10:17,680
Questions?

3098
03:10:17,680 --> 03:10:18,680
Tired?

3099
03:10:18,680 --> 03:10:19,680
Coffee?

3100
03:10:19,680 --> 03:10:20,680
Yes, question.

3101
03:10:20,680 --> 03:10:31,680
What do you recommend for version control of Jupyter Notebooks?

3102
03:10:31,680 --> 03:10:33,680
So what do I recommend for version control of Jupyter Notebooks?

3103
03:10:33,680 --> 03:10:38,680
I actually put them like that in Git and just push everything, even the outputs.

3104
03:10:38,680 --> 03:10:41,680
It's not the best when you want to merge things.

3105
03:10:41,680 --> 03:10:47,680
If you try to merge things, I would suggest to install some extension of Jupyter Notebooks

3106
03:10:47,680 --> 03:10:50,680
that store them as plain text file.

3107
03:10:50,680 --> 03:10:52,680
But if you do that, you lose the outputs.

3108
03:10:52,680 --> 03:10:55,680
And one of the critical thing in Jupyter Notebook is because it stores the output,

3109
03:10:55,680 --> 03:11:06,680
you can send them to someone and they can see the output without having to rerun everything.

3110
03:11:06,680 --> 03:11:08,680
Does that answer your question?

3111
03:11:08,680 --> 03:11:13,680
Jupyter Texts, something which is relatively recent that does some of that.

3112
03:11:19,680 --> 03:11:21,680
UGT2TZG.

3113
03:11:21,680 --> 03:11:23,680
Let me see if that works.

3114
03:11:23,680 --> 03:11:25,680
Yeah, that works.

3115
03:11:25,680 --> 03:11:28,680
And so if you have some time to answer.

3116
03:11:28,680 --> 03:11:32,680
Make it bigger.

3117
03:11:38,680 --> 03:11:40,680
Like that.

3118
03:11:45,680 --> 03:11:48,680
Can you do multiple kernels on the same Notebook?

3119
03:11:48,680 --> 03:11:50,680
No, I don't think.

3120
03:11:50,680 --> 03:11:53,680
I mean, there is technically no limitations.

3121
03:11:53,680 --> 03:11:56,680
But I don't think there is any option to do that.

3122
03:11:56,680 --> 03:11:59,680
And what would you want to do with several kernel?

3123
03:11:59,680 --> 03:12:02,680
You want to move data back and forth between kernels?

3124
03:12:08,680 --> 03:12:11,680
And the filter cell with the batch.

3125
03:12:11,680 --> 03:12:15,680
So you want to run one cell with Python 2, one cell with Python 3, and one cell with batch.

3126
03:12:15,680 --> 03:12:17,680
I would use cell magic.

3127
03:12:17,680 --> 03:12:22,680
I would start a single kernel and the single kernel can talk to several languages.

3128
03:12:22,680 --> 03:12:25,680
For example, if I want to...

3129
03:12:25,680 --> 03:12:27,680
If I do...

3130
03:12:27,680 --> 03:12:30,680
If I do...

3131
03:12:30,680 --> 03:12:39,680
Python 2 print high.

3132
03:12:39,680 --> 03:12:41,680
It works.

3133
03:12:41,680 --> 03:12:44,680
So here I have a Python 3 Notebook that runs Python 2.

3134
03:12:44,680 --> 03:12:47,680
It did run Python 2 in a super process, though.

3135
03:12:47,680 --> 03:12:49,680
Sorry.

3136
03:12:50,680 --> 03:12:53,680
That would be the same as Perl and Ruby.

3137
03:12:53,680 --> 03:12:59,680
And so now the magic author can decide whether the process that it's talking to is persistent or not.

3138
03:12:59,680 --> 03:13:03,680
So the percent-percent Perl, the percent-percent Ruby are non-persistent.

3139
03:13:03,680 --> 03:13:06,680
Like as soon as the cell is end-executed, it stops.

3140
03:13:06,680 --> 03:13:15,680
But the R author decided that the process was going to be persistent and provided R push and R pull to get and push values.

3141
03:13:15,680 --> 03:13:19,680
And so now if you want to write a Python 2 magic, you can overwrite execution magic.

3142
03:13:19,680 --> 03:13:27,680
And a Python 2 magic that knows how to serialize the parallel array, sends them to a Python 2 process, and does its things, it's possible.

3143
03:13:35,680 --> 03:13:37,680
The kernel is always at notebook level.

3144
03:13:37,680 --> 03:13:39,680
Yes, one kernel can be at many notebooks.

3145
03:13:39,680 --> 03:13:47,680
So a kernel is just a remote process that gets user input and figure out how to execute it.

3146
03:13:47,680 --> 03:13:52,680
And so there are some kernels that are made to be multi-languages.

3147
03:13:52,680 --> 03:13:55,680
You tend to have one kernel equal one language.

3148
03:13:55,680 --> 03:14:01,680
But for example, at work, I have a kernel which is on my local machine.

3149
03:14:01,680 --> 03:14:07,680
But if I want to run something on the supercomputer, I just switch a kernel to actually be on the HPC system.

3150
03:14:07,680 --> 03:14:10,680
So I can have a kernel which is a different conda environment.

3151
03:14:10,680 --> 03:14:14,680
Or I can have a kernel that have a limitation in memory or something like that.

3152
03:14:18,680 --> 03:14:21,680
So kernel switching UI.

3153
03:14:24,680 --> 03:14:27,680
Sorry, it's zooming, so it's hard to manipulate.

3154
03:14:27,680 --> 03:14:32,680
But here you can select kernels.

3155
03:14:33,680 --> 03:14:42,680
And so, yeah, and you can, I could attach to an already existing, like for example, let's go to the FASTA one and select.

3156
03:14:42,680 --> 03:14:52,680
And now this notebook, which is called, I don't remember what, if I do FASTA object, I will get my FASTA object from, because it's actually the same running kernel.

3157
03:14:52,680 --> 03:15:01,680
And food is there in two minutes.

3158
03:15:01,680 --> 03:15:04,680
If you want to be the first one to have food, feel free to run outside.

3159
03:15:08,680 --> 03:15:14,680
And come and talk to us for the rest of the conference and enjoy the rest of your conference.

