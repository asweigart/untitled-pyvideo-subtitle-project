1
00:00:00,000 --> 00:00:01,560
Thank you, everyone.

2
00:00:01,560 --> 00:00:02,200
Good afternoon.

3
00:00:02,200 --> 00:00:03,000
My name's Yi Kang.

4
00:00:03,000 --> 00:00:06,000
And with my co-speakers, Ariel and Marina,

5
00:00:06,000 --> 00:00:09,440
you're going to not make the same mistake that we made

6
00:00:09,440 --> 00:00:10,920
or learn from our mistakes.

7
00:00:10,920 --> 00:00:18,000
So three of us are data scientists from Capital One.

8
00:00:18,000 --> 00:00:20,200
And starting from a few years ago,

9
00:00:20,200 --> 00:00:23,560
Capital One has committed to make substantial investment

10
00:00:23,560 --> 00:00:28,120
in the public cloud computing and open source software

11
00:00:28,120 --> 00:00:31,780
in order to run all our business critical functions

12
00:00:31,780 --> 00:00:34,160
and processes and models.

13
00:00:34,160 --> 00:00:36,480
So to that end, we wanted to get our analysts

14
00:00:36,480 --> 00:00:38,840
to learn and use Python.

15
00:00:38,840 --> 00:00:45,160
And starting from a few years ago,

16
00:00:45,160 --> 00:00:48,200
we have some hard lessons learned

17
00:00:48,200 --> 00:00:52,000
along the way that may not be strictly obvious to people who

18
00:00:52,000 --> 00:00:56,600
are not in the business of teaching people to use

19
00:00:56,600 --> 00:00:57,920
Python for their day job.

20
00:00:58,720 --> 00:01:02,400
A lot of us are very experienced practitioners of Python

21
00:01:02,400 --> 00:01:02,920
language.

22
00:01:02,920 --> 00:01:03,800
And we love Python.

23
00:01:03,800 --> 00:01:05,240
That's why we're here at PyCon.

24
00:01:05,240 --> 00:01:08,720
But imagine a scenario where you wanted

25
00:01:08,720 --> 00:01:11,600
to teach Python to a new group of people

26
00:01:11,600 --> 00:01:16,440
in your new workplace or your new research lab who have not

27
00:01:16,440 --> 00:01:18,240
seen any programming language before

28
00:01:18,240 --> 00:01:20,200
and may not have the technical background

29
00:01:20,200 --> 00:01:23,920
to learn a new language from scratch on his or her own

30
00:01:23,920 --> 00:01:24,840
initiative.

31
00:01:24,840 --> 00:01:27,440
So how do we go about solving that question?

32
00:01:35,000 --> 00:01:35,500
Hold on.

33
00:01:38,880 --> 00:01:39,880
I have some AV issues.

34
00:01:47,400 --> 00:01:50,160
So for those of you who are not familiar with Capital One

35
00:01:50,160 --> 00:01:52,640
company, we're one of the biggest banks in the United

36
00:01:52,640 --> 00:01:53,520
States.

37
00:01:53,520 --> 00:01:56,240
We'd like to imagine ourselves as a bank a technology

38
00:01:56,240 --> 00:01:57,360
company would build.

39
00:01:57,360 --> 00:02:00,560
We specialize in a few financial service products,

40
00:02:00,560 --> 00:02:04,280
such as credit cards, auto finance, and banking and savings

41
00:02:04,280 --> 00:02:05,240
accounts.

42
00:02:05,240 --> 00:02:07,840
We're headquartered in the Washington, DC area,

43
00:02:07,840 --> 00:02:10,480
just outside in McLean, Virginia.

44
00:02:10,480 --> 00:02:13,720
We have business presence in US, Canada, and UK,

45
00:02:13,720 --> 00:02:16,800
serving over 45 million customer accounts.

46
00:02:16,800 --> 00:02:20,640
We globally have over 47,000 employees.

47
00:02:20,640 --> 00:02:23,080
And out of those, more than 9,000 of them

48
00:02:23,080 --> 00:02:28,360
are technology professionals and over 2,500 analysts

49
00:02:28,360 --> 00:02:31,000
and over 500 data scientists and quants,

50
00:02:31,000 --> 00:02:35,280
like us, who build models and build tools for our business.

51
00:02:35,280 --> 00:02:38,120
So for the focus of today, we're going

52
00:02:38,120 --> 00:02:40,360
to talk about our analysts.

53
00:02:40,360 --> 00:02:43,640
And your question, my first question

54
00:02:43,640 --> 00:02:47,080
might be, why do we want to teach Python to our analysts?

55
00:02:47,080 --> 00:02:50,920
Why can't we just let them use existing tool that they use?

56
00:02:50,920 --> 00:02:52,760
There's three things about Python

57
00:02:52,760 --> 00:02:56,320
that we really like at PlaceWell with our analyst workforce.

58
00:02:56,320 --> 00:02:57,800
The first one is ease of learning.

59
00:02:57,800 --> 00:03:00,960
It has a very easy to understand syntax,

60
00:03:00,960 --> 00:03:03,400
although the analysts might not think it that way.

61
00:03:03,400 --> 00:03:06,360
But compared with other programming languages,

62
00:03:06,360 --> 00:03:08,520
it's relatively easy to understand.

63
00:03:08,520 --> 00:03:10,640
It has a battery-included philosophy,

64
00:03:10,640 --> 00:03:14,240
which means that it comes with a very powerful standard library

65
00:03:14,240 --> 00:03:17,320
that can do already a lot of things out of the box.

66
00:03:17,320 --> 00:03:20,060
And if you're not satisfied with a single library,

67
00:03:20,060 --> 00:03:23,960
you have access to an extensive ecosystem of other libraries

68
00:03:23,960 --> 00:03:26,540
that can help you do things that you need to do.

69
00:03:26,540 --> 00:03:30,060
And it comes also with a series of notebook-like tools

70
00:03:30,060 --> 00:03:33,780
which exposes very powerful computing environment

71
00:03:33,780 --> 00:03:36,300
to analysts who are not familiar with programming.

72
00:03:36,300 --> 00:03:38,420
So that's all great.

73
00:03:38,420 --> 00:03:42,560
For our analysts who do data processing day in, day out,

74
00:03:42,560 --> 00:03:46,180
we use Python for a lot of its data-centric tools,

75
00:03:46,180 --> 00:03:49,900
all the way from data ingestion using SQL engines or API

76
00:03:49,900 --> 00:03:54,180
interfaces to data wrangling using open source libraries,

77
00:03:54,180 --> 00:03:56,620
such as Pandas, NumPy, and PySpark,

78
00:03:56,620 --> 00:04:03,220
to modeling using Scikit-learn or XGBoost or TensorFlow,

79
00:04:03,220 --> 00:04:05,480
to data visualization with a series

80
00:04:05,480 --> 00:04:08,380
of static or interactive visualization libraries

81
00:04:08,380 --> 00:04:09,740
that you can choose from.

82
00:04:09,740 --> 00:04:13,300
And lastly, this is something that we slowly

83
00:04:13,300 --> 00:04:16,340
are beginning to realize how important this is for now

84
00:04:16,340 --> 00:04:21,140
that we see the end results playing out a few more years.

85
00:04:21,140 --> 00:04:26,340
Because for our stakeholders to all use and work

86
00:04:26,340 --> 00:04:29,040
on the same programming language, that drastically

87
00:04:29,040 --> 00:04:31,460
speeds up the deployment costs.

88
00:04:31,460 --> 00:04:35,660
If you imagine a case where people are writing stuff

89
00:04:35,660 --> 00:04:37,780
in Python, but they have to deploy in Java,

90
00:04:37,780 --> 00:04:41,460
or people were writing SQL queries in their SQL engine,

91
00:04:41,460 --> 00:04:43,660
but they have to wrap it in Python somehow,

92
00:04:43,660 --> 00:04:47,580
all that translation costs can induce errors and cost time.

93
00:04:47,580 --> 00:04:50,900
So if you have everyone from data scientists and analysts

94
00:04:50,900 --> 00:04:53,780
to software engineers working on the same language,

95
00:04:53,780 --> 00:04:56,920
that slows down a lot less speeds up the deployment.

96
00:04:56,920 --> 00:05:00,540
And it also is compatible with open source and public cloud

97
00:05:00,540 --> 00:05:06,300
DevOps and tooling, which our engineers really like.

98
00:05:06,300 --> 00:05:09,620
So what do our analysts do day to day?

99
00:05:09,620 --> 00:05:12,420
And this is a question that can be best summarized

100
00:05:13,380 --> 00:05:14,260
as they analyze data.

101
00:05:14,260 --> 00:05:18,420
They use data to solve business challenges

102
00:05:18,420 --> 00:05:20,580
and to find new opportunities.

103
00:05:20,580 --> 00:05:22,820
So they do a lot of things outside of data.

104
00:05:22,820 --> 00:05:26,300
But let's focus on what they do with data in this slide.

105
00:05:26,300 --> 00:05:29,620
The first one they do is a lot of business monitoring.

106
00:05:29,620 --> 00:05:33,580
We have a vibrant business that needs a lot of analysts

107
00:05:33,580 --> 00:05:36,260
workforce to keep an eye on to make sure we don't screw up.

108
00:05:36,260 --> 00:05:39,740
So routine business monitoring may include questions

109
00:05:40,420 --> 00:05:43,340
how many people applied to our credit card last week,

110
00:05:43,340 --> 00:05:46,300
or last month, or last quarter, how many people

111
00:05:46,300 --> 00:05:49,860
applied to each credit card and on which application channels,

112
00:05:49,860 --> 00:05:50,900
and stuff like that.

113
00:05:50,900 --> 00:05:52,420
And outside of routine monitoring,

114
00:05:52,420 --> 00:05:54,620
people need to answer at high questions,

115
00:05:54,620 --> 00:05:57,020
like why did this particular zip code has

116
00:05:57,020 --> 00:05:59,860
much more application than a year ago?

117
00:05:59,860 --> 00:06:01,220
What was happening there?

118
00:06:01,220 --> 00:06:04,380
Is there the potential for a fraud attack, for example?

119
00:06:04,380 --> 00:06:07,820
And the analysts are also responsible for doing

120
00:06:07,860 --> 00:06:10,780
a lot of the data management to make sure the quality

121
00:06:10,780 --> 00:06:12,780
of the data and the quality of the metadata

122
00:06:12,780 --> 00:06:14,900
is up to enterprise standards.

123
00:06:14,900 --> 00:06:18,180
They have to communicate the data risk to non-data people.

124
00:06:18,180 --> 00:06:21,020
So on top of that, they are also expected

125
00:06:21,020 --> 00:06:22,980
to upscale as necessary.

126
00:06:22,980 --> 00:06:24,620
So use the right tool for the job,

127
00:06:24,620 --> 00:06:26,700
even if it requires using new tool.

128
00:06:26,700 --> 00:06:30,780
So the point of this slide is that they have a lot of stuff

129
00:06:30,780 --> 00:06:33,100
they have to do on their plate already.

130
00:06:34,740 --> 00:06:36,860
So what we're trying to get to them

131
00:06:36,860 --> 00:06:40,180
from a traditional workflow in this table from the left,

132
00:06:40,180 --> 00:06:44,140
and someone coined it as a Microsoft Office Stack,

133
00:06:44,140 --> 00:06:46,980
is that you start from a relational database

134
00:06:46,980 --> 00:06:48,340
that hosts your raw data.

135
00:06:48,340 --> 00:06:51,660
You interact with the raw data using SQL libraries

136
00:06:51,660 --> 00:06:55,180
in some graphical user interface.

137
00:06:55,180 --> 00:06:58,260
You query the data, you copy and paste the query results

138
00:06:58,260 --> 00:07:00,180
to Excel, you make some plots,

139
00:07:00,180 --> 00:07:02,820
you make more wrangling to the data,

140
00:07:02,820 --> 00:07:05,460
and then you copy and paste the plot,

141
00:07:05,460 --> 00:07:06,820
you make Excel to PowerPoint.

142
00:07:07,780 --> 00:07:09,620
And if you want to get really fancy,

143
00:07:09,620 --> 00:07:12,300
you might even make a Tableau dashboard out of it.

144
00:07:12,300 --> 00:07:14,620
In this entire process, you can see that

145
00:07:14,620 --> 00:07:16,220
every step is manual.

146
00:07:16,220 --> 00:07:18,380
It's very prone to errors,

147
00:07:18,380 --> 00:07:21,620
and we can give a whole talk about the errors,

148
00:07:21,620 --> 00:07:23,220
the funny errors that people has made

149
00:07:23,220 --> 00:07:24,540
not realizing it during the years.

150
00:07:24,540 --> 00:07:27,660
But on the right-hand side is the Python-based workflow,

151
00:07:27,660 --> 00:07:29,180
where in the data storage,

152
00:07:29,180 --> 00:07:30,660
not only do they have the option

153
00:07:30,660 --> 00:07:32,660
to get relational databases data,

154
00:07:32,660 --> 00:07:34,860
they can also get other data sources,

155
00:07:35,380 --> 00:07:39,580
and polycloud file storage that are in ever or parquet format.

156
00:07:39,580 --> 00:07:41,300
They can get the data using query,

157
00:07:41,300 --> 00:07:43,460
but they can also package their query

158
00:07:43,460 --> 00:07:45,540
in reusable notebooks and Python scripts

159
00:07:45,540 --> 00:07:47,580
so that they can share it more easily

160
00:07:47,580 --> 00:07:50,140
and run it over and over again.

161
00:07:50,140 --> 00:07:52,980
They have the data wrangling libraries

162
00:07:52,980 --> 00:07:55,660
that are like Pandas, PySpark, and Dask.

163
00:07:55,660 --> 00:07:57,500
They have data visualization options

164
00:07:57,500 --> 00:07:59,860
that include static, interactive,

165
00:07:59,860 --> 00:08:01,900
or dashboard-like visualizations,

166
00:08:01,900 --> 00:08:03,180
and all of that can be automated

167
00:08:03,180 --> 00:08:05,180
using open-source libraries as well.

168
00:08:05,180 --> 00:08:06,980
So all of us in this room would agree

169
00:08:06,980 --> 00:08:09,860
the right column is the right way.

170
00:08:11,740 --> 00:08:13,580
But what can go wrong

171
00:08:13,580 --> 00:08:16,060
when we try to do this to the analysts?

172
00:08:16,060 --> 00:08:17,220
When we want to convince them,

173
00:08:17,220 --> 00:08:19,300
hey, Python is really the right way to go.

174
00:08:20,340 --> 00:08:23,060
So the first thing we have to realize

175
00:08:23,060 --> 00:08:25,780
is that a lot of our workforce

176
00:08:25,780 --> 00:08:27,380
may not have the technical background

177
00:08:27,380 --> 00:08:28,340
or programming background

178
00:08:28,340 --> 00:08:30,740
to learn a new language from scratch.

179
00:08:30,740 --> 00:08:33,140
So learning something from scratch

180
00:08:34,140 --> 00:08:35,700
with the goal of making it productive

181
00:08:35,700 --> 00:08:37,900
in their day job is a daunting task.

182
00:08:37,900 --> 00:08:39,100
They do have a lot on their plate,

183
00:08:39,100 --> 00:08:40,180
as I mentioned earlier.

184
00:08:40,180 --> 00:08:43,900
So having them using Python

185
00:08:43,900 --> 00:08:45,140
or learning how to do Python

186
00:08:45,140 --> 00:08:47,660
may mean taking things away from their day job,

187
00:08:47,660 --> 00:08:51,740
which their managers or their teammates

188
00:08:51,740 --> 00:08:53,180
may not appreciate.

189
00:08:53,180 --> 00:08:56,500
And lastly, it's also not just about Python,

190
00:08:56,500 --> 00:08:58,700
the programming language and syntax.

191
00:08:58,700 --> 00:09:01,620
In order to get productive in Python in their day job,

192
00:09:01,620 --> 00:09:03,900
they also have to learn other concepts,

193
00:09:03,900 --> 00:09:08,500
such as how to run scripts from Unix command line,

194
00:09:08,500 --> 00:09:11,700
how to check in your code into GitHub

195
00:09:11,700 --> 00:09:12,820
so it's open source,

196
00:09:12,820 --> 00:09:14,020
also it's source controlled

197
00:09:14,020 --> 00:09:16,580
and can be shared with other people on your team

198
00:09:16,580 --> 00:09:18,140
and even outside your team.

199
00:09:18,140 --> 00:09:21,460
And how do you run things from the cloud,

200
00:09:21,460 --> 00:09:23,900
spin up instances so that your script

201
00:09:23,900 --> 00:09:27,020
is not dependent on some analyst's laptop

202
00:09:27,020 --> 00:09:29,780
that has to be turned on a certain time in the day.

203
00:09:29,780 --> 00:09:31,940
All these concepts are necessary

204
00:09:31,940 --> 00:09:33,900
for them to get productive.

205
00:09:33,900 --> 00:09:36,660
So to that end, I want to turn it to Ariel

206
00:09:36,660 --> 00:09:38,740
to discuss the materials that we have

207
00:09:38,740 --> 00:09:41,340
for teaching analysts to use these tools.

208
00:09:42,460 --> 00:09:43,300
Thanks.

209
00:09:44,420 --> 00:09:46,660
Yeah, how many of you guys have ever tried

210
00:09:46,660 --> 00:09:48,820
teaching a novice programmer Python?

211
00:09:50,260 --> 00:09:51,100
Wow, a lot of you.

212
00:09:51,100 --> 00:09:53,540
How many of you guys did it end in tears for?

213
00:09:55,420 --> 00:09:57,460
A few hands, yeah, I've seen some tears.

214
00:10:00,740 --> 00:10:03,540
We obviously want to teach Python to these people

215
00:10:03,540 --> 00:10:07,220
and we live in a world with infinite training available.

216
00:10:07,220 --> 00:10:08,820
We're really lucky in that way.

217
00:10:10,020 --> 00:10:12,540
But it's a really daunting task nevertheless.

218
00:10:12,540 --> 00:10:17,340
So we use the fact that there's so much great content

219
00:10:17,340 --> 00:10:20,980
out there to really focus on relevancy and engagement,

220
00:10:20,980 --> 00:10:23,580
try and get people's buy-in from the beginning.

221
00:10:23,580 --> 00:10:26,140
And we try to do that through customization.

222
00:10:26,140 --> 00:10:29,380
So as part of an organization we called Big Data Academy,

223
00:10:29,980 --> 00:10:31,620
on the left here, we tailored our content

224
00:10:31,620 --> 00:10:34,100
towards the analyst and quant community

225
00:10:34,100 --> 00:10:36,660
who typically have good business sense,

226
00:10:36,660 --> 00:10:39,060
modeling background, maybe not so much

227
00:10:39,060 --> 00:10:40,900
software engineering fundamentals.

228
00:10:40,900 --> 00:10:42,660
And we let other organizations in the company

229
00:10:42,660 --> 00:10:45,060
like Tech College kind of cater

230
00:10:45,060 --> 00:10:47,060
to that more technical audience.

231
00:10:47,060 --> 00:10:51,300
And we let them take care of the stuff

232
00:10:51,300 --> 00:10:54,020
where maybe they need a little bit more math stats

233
00:10:54,020 --> 00:10:56,180
fundamentals in their courses.

234
00:10:56,180 --> 00:10:58,740
And in general, the workflow that we try to follow

235
00:10:58,740 --> 00:11:00,980
is just to keep this audience in mind

236
00:11:02,380 --> 00:11:04,180
and then select and filter context,

237
00:11:04,180 --> 00:11:06,700
based on filter the content that we wanted to include

238
00:11:06,700 --> 00:11:08,540
based on that audience.

239
00:11:08,540 --> 00:11:11,020
And then think about presentation and interaction modes

240
00:11:11,020 --> 00:11:12,180
that would be appropriate.

241
00:11:12,180 --> 00:11:14,140
And then add a little bit of capital one flavor,

242
00:11:14,140 --> 00:11:16,380
you know, a little bit of spin based on the unique way

243
00:11:16,380 --> 00:11:19,300
that we have to get things done inside this corporation.

244
00:11:20,740 --> 00:11:22,900
And so one example of this is, you know,

245
00:11:22,900 --> 00:11:25,260
we decided to have the content in Big Data Academy

246
00:11:25,260 --> 00:11:27,660
be self-paced content that you could go through

247
00:11:27,660 --> 00:11:28,740
kind of on your own time,

248
00:11:28,740 --> 00:11:30,940
partially because of what Ikang said about

249
00:11:30,940 --> 00:11:32,580
how people have very demanding schedules

250
00:11:32,580 --> 00:11:35,100
in the BA community, analyst community.

251
00:11:37,020 --> 00:11:39,900
And so what we ended up with looks something like this.

252
00:11:39,900 --> 00:11:42,820
This is a curriculum which has kind of a foundational level

253
00:11:42,820 --> 00:11:45,820
on the top, which leads into more analytical courses

254
00:11:45,820 --> 00:11:47,740
in the central piece.

255
00:11:47,740 --> 00:11:50,540
And there's some auxiliary material as well.

256
00:11:50,540 --> 00:11:52,300
Python features very heavily in this curriculum

257
00:11:52,300 --> 00:11:53,420
from the very beginning.

258
00:11:53,420 --> 00:11:57,260
And in all, we had 18 self-paced courses here.

259
00:11:57,780 --> 00:12:00,420
They were created and maintained largely by volunteers,

260
00:12:00,420 --> 00:12:01,460
which is great.

261
00:12:02,620 --> 00:12:04,620
And all of them were pretty much hosted

262
00:12:04,620 --> 00:12:06,740
on GitHub pages, I think.

263
00:12:06,740 --> 00:12:08,460
So that was also great.

264
00:12:09,500 --> 00:12:11,100
We really wanted to engage the community

265
00:12:11,100 --> 00:12:13,580
and we really wanted analysts to use GitHub.

266
00:12:13,580 --> 00:12:15,700
So check, check.

267
00:12:15,700 --> 00:12:18,860
A little secret is that we actually kind of needed

268
00:12:18,860 --> 00:12:21,500
both of those things to happen in order to scale

269
00:12:21,500 --> 00:12:24,340
to the number of people that we wanted to take this content.

270
00:12:24,340 --> 00:12:25,860
If we didn't have the crowdsourcing,

271
00:12:25,860 --> 00:12:30,780
if we didn't have kind of GitHub as this platform

272
00:12:30,780 --> 00:12:32,420
for doing self-paced learning,

273
00:12:32,420 --> 00:12:34,420
it would have been very hard for us to get

274
00:12:34,420 --> 00:12:36,740
the number of completions that we did.

275
00:12:36,740 --> 00:12:39,500
And so completions are kind of this one metric

276
00:12:39,500 --> 00:12:41,420
that we measure, maybe not the best.

277
00:12:41,420 --> 00:12:44,540
But as of March, we had over 8,000

278
00:12:44,540 --> 00:12:48,060
from about 3,000 associates.

279
00:12:48,060 --> 00:12:49,860
And we know that from our analytics,

280
00:12:49,860 --> 00:12:52,540
there's a lot more people who kind of use the content

281
00:12:52,540 --> 00:12:53,380
as a reference.

282
00:12:53,380 --> 00:12:56,340
Kind of open it up, check something out,

283
00:12:56,340 --> 00:12:59,460
copy some code and then close the site.

284
00:12:59,460 --> 00:13:02,780
So all in all, this was an approach

285
00:13:02,780 --> 00:13:04,340
that gained a lot of traction.

286
00:13:07,860 --> 00:13:09,980
So what I wanna segue into is talking about

287
00:13:09,980 --> 00:13:11,860
some of the lessons we learned along the way

288
00:13:11,860 --> 00:13:13,620
as we deployed this curriculum

289
00:13:13,620 --> 00:13:15,660
and kind of experienced what it was like.

290
00:13:16,980 --> 00:13:19,500
The first lesson really requires putting yourself

291
00:13:19,500 --> 00:13:21,860
in the shoes of one of these analysts.

292
00:13:21,860 --> 00:13:25,060
And thinking back to when you were first learning Python

293
00:13:25,060 --> 00:13:28,540
and then tacking on to those circumstances,

294
00:13:29,620 --> 00:13:32,020
a full day job, like Yikang was saying,

295
00:13:32,020 --> 00:13:33,860
significant time constraints,

296
00:13:33,860 --> 00:13:35,380
maybe a lot of money on the line,

297
00:13:35,380 --> 00:13:36,620
somebody breathing down your neck,

298
00:13:36,620 --> 00:13:38,980
somebody waiting for the result of your analysis.

299
00:13:41,660 --> 00:13:42,980
And then somebody comes along and says,

300
00:13:42,980 --> 00:13:44,380
by the way, you should be doing things

301
00:13:44,380 --> 00:13:45,540
completely differently.

302
00:13:47,860 --> 00:13:50,660
And you're like, okay, well, when am I going to do that?

303
00:13:52,260 --> 00:13:54,380
In a world of infinite training,

304
00:13:54,380 --> 00:13:55,700
we don't have infinite time.

305
00:13:55,700 --> 00:13:57,460
And it can be hard to learn something

306
00:13:57,460 --> 00:13:59,220
just for the sake of learning it.

307
00:13:59,220 --> 00:14:01,900
I know that at conferences like this,

308
00:14:01,900 --> 00:14:03,020
I kind of love the break.

309
00:14:03,020 --> 00:14:05,580
I use it to dig into a whole bunch of the GitHub repos

310
00:14:05,580 --> 00:14:07,340
that get posted.

311
00:14:07,340 --> 00:14:09,860
And then I go back to my real job and I'm like,

312
00:14:09,860 --> 00:14:12,740
oh, I really wanna finish making

313
00:14:12,740 --> 00:14:15,100
that JavaScript visualization.

314
00:14:15,100 --> 00:14:16,500
But, you know.

315
00:14:20,500 --> 00:14:25,580
So how can we kind of tackle this?

316
00:14:25,580 --> 00:14:28,340
The symptom of this problem is really,

317
00:14:28,340 --> 00:14:30,180
I think, at its core,

318
00:14:30,180 --> 00:14:32,820
is that it sucks to be the only person.

319
00:14:32,820 --> 00:14:33,900
Sucks to be alone.

320
00:14:33,900 --> 00:14:36,500
It sucks to be the only person trying to learn Python

321
00:14:37,900 --> 00:14:39,740
or using Python on your team.

322
00:14:41,340 --> 00:14:43,380
Your teammates or manager may not be interested at all.

323
00:14:43,380 --> 00:14:44,860
They don't see the value.

324
00:14:45,580 --> 00:14:47,780
And it can be really hard to overcome

325
00:14:47,780 --> 00:14:49,740
kind of an organizational inertia.

326
00:14:52,380 --> 00:14:54,380
Many of you are probably familiar with the kind of

327
00:14:54,380 --> 00:14:57,980
manual painstaking task that this comic is trying to describe

328
00:14:57,980 --> 00:15:01,220
where we have this routine monitoring.

329
00:15:01,220 --> 00:15:02,980
It has to happen once every quarter.

330
00:15:02,980 --> 00:15:04,700
It goes to the regulators.

331
00:15:04,700 --> 00:15:08,060
We've got to take some data from these million SQL tables,

332
00:15:08,060 --> 00:15:10,060
make a pivot table in Excel,

333
00:15:10,060 --> 00:15:12,820
and then copy paste a chart into a PowerPoint deck

334
00:15:12,860 --> 00:15:14,540
that somebody else will process.

335
00:15:15,500 --> 00:15:17,700
And that's just the way it's always been done.

336
00:15:19,500 --> 00:15:22,740
So, why do we even need Python here?

337
00:15:26,020 --> 00:15:29,340
Another challenge is that when you're alone,

338
00:15:29,340 --> 00:15:31,460
you don't really have a great path forward

339
00:15:31,460 --> 00:15:32,900
to learning the best practices

340
00:15:32,900 --> 00:15:35,340
that come with Python development.

341
00:15:35,340 --> 00:15:37,860
You can maybe look up how to do a particular thing,

342
00:15:37,860 --> 00:15:39,980
but you don't necessarily get everything else.

343
00:15:40,020 --> 00:15:42,980
Everything like version control, like unit tests,

344
00:15:42,980 --> 00:15:45,980
like not hard coding your password in your program,

345
00:15:45,980 --> 00:15:49,260
like naming variables so they can be reusable.

346
00:15:50,780 --> 00:15:52,580
And of course, documentation.

347
00:15:52,580 --> 00:15:56,900
So, you can talk to your rubber duck all you want.

348
00:15:56,900 --> 00:15:59,060
The rubber duck is not gonna teach you

349
00:15:59,060 --> 00:16:00,620
how to build Sphinx docs

350
00:16:00,620 --> 00:16:03,140
and how to format docstrings and functions.

351
00:16:03,140 --> 00:16:06,980
So, when you're alone, it's really, really daunting

352
00:16:06,980 --> 00:16:09,300
to kind of break into this path.

353
00:16:09,300 --> 00:16:10,700
I mean, we're all on this journey

354
00:16:10,700 --> 00:16:12,680
of trying to be better programmers.

355
00:16:12,680 --> 00:16:14,500
We know it doesn't happen all at once,

356
00:16:14,500 --> 00:16:16,580
but even just to take that one next step

357
00:16:16,580 --> 00:16:18,660
of like, I have something in a Jupyter Notebook,

358
00:16:18,660 --> 00:16:20,660
let me make it into a function,

359
00:16:20,660 --> 00:16:22,900
that can be hard to do when you're by yourself.

360
00:16:24,180 --> 00:16:26,900
So, we tried to build a community.

361
00:16:26,900 --> 00:16:29,580
We tried to build a community from the ground up

362
00:16:29,580 --> 00:16:33,260
and create a support system that analysts could be a part of

363
00:16:33,260 --> 00:16:35,100
outside of their immediate team.

364
00:16:35,100 --> 00:16:37,420
We used something called the Analyst Development Program.

365
00:16:37,420 --> 00:16:41,180
It's a cohort-based thing we do every year,

366
00:16:41,180 --> 00:16:43,280
and each new batch of analysts goes through it.

367
00:16:43,280 --> 00:16:45,700
We put Python like front and center in that program

368
00:16:45,700 --> 00:16:48,180
so that they could kind of go through the process together.

369
00:16:48,180 --> 00:16:51,220
And we also tried to enable cross-functional collaborations

370
00:16:51,220 --> 00:16:54,340
between analysts and other kind of job,

371
00:16:54,340 --> 00:16:56,660
related technical job families at the company.

372
00:16:57,680 --> 00:17:00,100
Of course, we had support from the highest levels.

373
00:17:00,100 --> 00:17:01,460
That really helps a lot.

374
00:17:01,460 --> 00:17:02,700
It helps to have that backing.

375
00:17:02,700 --> 00:17:04,820
It helps to have that keynote speaker

376
00:17:04,820 --> 00:17:06,660
on the first day of the program saying,

377
00:17:06,660 --> 00:17:08,300
hey, you guys should learn Python.

378
00:17:08,300 --> 00:17:09,780
Like, that goes a long way.

379
00:17:09,780 --> 00:17:12,420
But at the end of the day, the bottom-up community

380
00:17:12,420 --> 00:17:14,380
is, I think, where the real value is.

381
00:17:14,380 --> 00:17:19,180
And key to this is teaching these analysts

382
00:17:19,180 --> 00:17:21,980
how to extract value from that community.

383
00:17:21,980 --> 00:17:25,460
Right, it's very easy to say, hey, be in this community.

384
00:17:25,460 --> 00:17:27,900
But, you know, what are they gonna get out of it?

385
00:17:27,900 --> 00:17:30,220
And largely, I think we centered our efforts there

386
00:17:30,220 --> 00:17:31,760
around GitHub and Slack.

387
00:17:34,100 --> 00:17:36,400
We had a lot of kind of self-service support

388
00:17:36,800 --> 00:17:37,640
through GitHub.

389
00:17:37,640 --> 00:17:38,480
Like I said, we wanted people to use GitHub.

390
00:17:38,480 --> 00:17:39,800
So we were like, you should make an issue.

391
00:17:39,800 --> 00:17:40,920
You should make a pull request.

392
00:17:40,920 --> 00:17:43,400
Let's talk about the problems you're having

393
00:17:43,400 --> 00:17:44,780
alongside the code.

394
00:17:46,000 --> 00:17:48,220
And then Slack is simply,

395
00:17:48,220 --> 00:17:50,520
it simply answers a lot of the pain points that we had.

396
00:17:50,520 --> 00:17:51,360
You know, we could have done this

397
00:17:51,360 --> 00:17:52,840
in something other than Slack.

398
00:17:52,840 --> 00:17:54,680
But if you think about some of the common problems

399
00:17:54,680 --> 00:17:59,000
you may have, like, I don't know who to ask the question to

400
00:17:59,000 --> 00:18:00,380
in the first place.

401
00:18:00,380 --> 00:18:02,440
Well, you know, there's a little thing over there

402
00:18:02,440 --> 00:18:04,240
that's like, questions, try asking.

403
00:18:04,240 --> 00:18:05,640
Steven, Python guru.

404
00:18:07,280 --> 00:18:10,440
Or, you know, maybe somebody is really tired

405
00:18:10,440 --> 00:18:12,520
of answering the same question over and over again

406
00:18:12,520 --> 00:18:15,240
about how to write a conda environment.yml file.

407
00:18:15,240 --> 00:18:17,800
Like we could have a pinned item in the Slack channel.

408
00:18:17,800 --> 00:18:18,640
Or,

409
00:18:23,640 --> 00:18:26,560
or, you know, something that's happened to me a bunch

410
00:18:26,560 --> 00:18:29,320
is you just need somebody to screen share with.

411
00:18:29,320 --> 00:18:32,160
And let's get you through this one roadblock you're having.

412
00:18:32,160 --> 00:18:34,320
And if you like squint at this screenshot,

413
00:18:34,320 --> 00:18:35,720
there's like a little phone,

414
00:18:36,600 --> 00:18:37,960
little phone call button up here.

415
00:18:37,960 --> 00:18:40,880
And that actually like triggers a video call with somebody.

416
00:18:40,880 --> 00:18:43,240
So you can actually like get help,

417
00:18:43,240 --> 00:18:45,200
get some value out of this community.

418
00:18:46,100 --> 00:18:47,720
So the Slack channel is very active.

419
00:18:47,720 --> 00:18:49,720
We have a lot of questions and answers going on there

420
00:18:49,720 --> 00:18:50,560
all the time.

421
00:18:54,000 --> 00:18:55,680
The second thing I wanna tell you about is,

422
00:18:55,680 --> 00:18:59,760
you know, system setup issues, dun dun dun.

423
00:19:01,120 --> 00:19:02,800
If you looked at that Slack screenshot,

424
00:19:02,800 --> 00:19:06,240
I would wager that like a significant fraction

425
00:19:06,240 --> 00:19:08,080
of those messages were related to help me.

426
00:19:08,080 --> 00:19:11,120
I can't install Python on my Windows machine,

427
00:19:11,120 --> 00:19:15,280
or, you know, I tried to install this thing

428
00:19:15,280 --> 00:19:16,240
and it didn't work.

429
00:19:17,360 --> 00:19:19,240
And for any of you who like me have worked

430
00:19:19,240 --> 00:19:21,600
in like technical support, you know,

431
00:19:21,600 --> 00:19:24,520
we've probably experienced some version of this haiku.

432
00:19:24,520 --> 00:19:26,040
I like to recite it every now and again,

433
00:19:26,040 --> 00:19:30,260
because it's just so emblematic of the kind of conversation

434
00:19:30,260 --> 00:19:32,520
that you end up having so often.

435
00:19:32,520 --> 00:19:35,760
It's not the proxy, it cannot be the proxy,

436
00:19:37,120 --> 00:19:38,200
it was the proxy.

437
00:19:39,840 --> 00:19:44,680
And you can replace proxy with DNS or, you know,

438
00:19:44,680 --> 00:19:48,440
anything that, you know, is kind of a bug bear

439
00:19:48,440 --> 00:19:50,980
for this kind of environment setup.

440
00:19:52,200 --> 00:19:53,820
And really the thing is that our associates

441
00:19:53,820 --> 00:19:55,480
are really self-sufficient and resourceful,

442
00:19:55,480 --> 00:19:58,480
and that leads them to create solutions to these problems,

443
00:19:58,480 --> 00:20:00,240
which they then share with their friends,

444
00:20:00,240 --> 00:20:02,280
and their friends share it with their friends.

445
00:20:03,040 --> 00:20:05,480
And so, you know, we're in this copy paste

446
00:20:05,480 --> 00:20:09,080
kind of game of telephone, and, you know,

447
00:20:09,080 --> 00:20:11,080
it gets outdated, and then somebody's system

448
00:20:11,080 --> 00:20:13,560
is borked in some like insane way that you've never seen

449
00:20:13,560 --> 00:20:15,560
because you just joined the company 18 months ago.

450
00:20:18,320 --> 00:20:22,840
I've seen like .bashrc.txt files,

451
00:20:22,840 --> 00:20:26,320
and tried to figure out like why that doesn't,

452
00:20:26,320 --> 00:20:27,680
like why is this not working?

453
00:20:29,080 --> 00:20:30,240
So that's the problem.

454
00:20:30,400 --> 00:20:31,680
And the solution was to really take setup

455
00:20:31,680 --> 00:20:34,480
out of the learner's hands as much as we possibly could.

456
00:20:35,680 --> 00:20:37,960
We got better at this over time, I think.

457
00:20:37,960 --> 00:20:41,120
We started out trying to do things like pre-install Python

458
00:20:41,120 --> 00:20:43,960
on a bunch of like loaner laptops,

459
00:20:43,960 --> 00:20:45,640
and then hand them out to people.

460
00:20:45,640 --> 00:20:49,760
And that works, but does it meet our scalability criteria?

461
00:20:49,760 --> 00:20:52,120
No, obviously, we can't keep doing that.

462
00:20:52,120 --> 00:20:54,760
So we started doing things like using a centralized place

463
00:20:54,760 --> 00:20:58,040
to store all of this setup information as best we could,

464
00:20:58,040 --> 00:21:01,160
and be diligent about updating it regularly.

465
00:21:01,160 --> 00:21:04,800
And that was good too, if time consuming for us.

466
00:21:04,800 --> 00:21:08,520
So I think really what the next level thing to do here is,

467
00:21:08,520 --> 00:21:13,520
in our case, is to leverage shared analytical environments.

468
00:21:13,520 --> 00:21:16,760
And we use these pre-canned Linux sandboxes

469
00:21:16,760 --> 00:21:18,000
that we can just spin up.

470
00:21:18,920 --> 00:21:20,920
They have taken care of all of the setup issues.

471
00:21:20,920 --> 00:21:24,880
You know, they have the git command already in the terminal.

472
00:21:24,880 --> 00:21:27,800
They have the proxy solution already in place.

473
00:21:28,560 --> 00:21:30,880
And the courses that we wanna run can have startup scripts

474
00:21:30,880 --> 00:21:35,000
that kind of handle data retrieval, permissions,

475
00:21:35,000 --> 00:21:36,920
GitHub interactions, things like that,

476
00:21:36,920 --> 00:21:38,920
so that the learner basically presses a button

477
00:21:38,920 --> 00:21:40,920
that's like, do, do, do, do, do, do, okay.

478
00:21:41,840 --> 00:21:44,040
And really, I think that's the bottom line here,

479
00:21:44,040 --> 00:21:47,080
is that for experienced practitioners,

480
00:21:47,080 --> 00:21:49,960
you spend maybe 1% of your time fiddling with the setup,

481
00:21:49,960 --> 00:21:52,320
and 99% of the time, you get to have fun.

482
00:21:53,240 --> 00:21:55,960
But for somebody who's really new, it's completely flipped.

483
00:21:56,920 --> 00:21:58,400
They spend the majority of the time

484
00:21:58,400 --> 00:22:01,320
just trying to get the thing working in the first place.

485
00:22:01,320 --> 00:22:03,960
And then that little piece of the course at the very end,

486
00:22:03,960 --> 00:22:05,640
that's when they get to have fun.

487
00:22:05,640 --> 00:22:07,600
And so that really sucks.

488
00:22:07,600 --> 00:22:11,920
So I wanna hand it over to Marina to talk more about

489
00:22:11,920 --> 00:22:15,920
how we can really get adoption of Python going.

490
00:22:17,280 --> 00:22:18,360
Thanks, Ariel.

491
00:22:19,440 --> 00:22:23,480
So making the setup easier definitely helped more people

492
00:22:23,480 --> 00:22:25,080
to start the courses.

493
00:22:25,080 --> 00:22:28,360
But remember, our goal is much more ambitious than that.

494
00:22:28,360 --> 00:22:32,120
We wanted people not only to start the courses,

495
00:22:32,120 --> 00:22:35,320
but to actually be more productive in their work.

496
00:22:35,320 --> 00:22:37,760
So we want them to complete the courses,

497
00:22:37,760 --> 00:22:40,720
and more importantly, use what they have learned

498
00:22:40,720 --> 00:22:42,760
in their day-to-day work.

499
00:22:42,760 --> 00:22:44,160
Sounds tricky, right?

500
00:22:45,360 --> 00:22:48,160
So let me start with what can go wrong here,

501
00:22:48,160 --> 00:22:52,000
and take a look at this example of situation

502
00:22:52,000 --> 00:22:54,840
that can occur in real world.

503
00:22:55,520 --> 00:22:59,600
Here, a proud analyst just completed her Python training,

504
00:22:59,600 --> 00:23:02,440
and she feels that she knows everything there is

505
00:23:02,440 --> 00:23:05,880
about iterators, generators, decorators, classes,

506
00:23:05,880 --> 00:23:08,480
inheritance, and all the other jargon

507
00:23:08,480 --> 00:23:12,200
that she was so afraid just a few weeks ago.

508
00:23:12,200 --> 00:23:14,600
And she feels that she's ready to tackle

509
00:23:14,600 --> 00:23:18,560
all the big data problems and make data-driven decisions

510
00:23:18,560 --> 00:23:21,200
using artificial intelligence.

511
00:23:21,200 --> 00:23:24,760
While in the reality, even though her manager

512
00:23:25,680 --> 00:23:27,520
is very supportive of her training,

513
00:23:27,520 --> 00:23:32,520
she can be asked to connect some dashboard to a database,

514
00:23:33,200 --> 00:23:36,120
something not related to Python and boring,

515
00:23:36,120 --> 00:23:39,440
and just old way of doing things.

516
00:23:39,440 --> 00:23:40,760
And it makes sense.

517
00:23:40,760 --> 00:23:42,720
Just because you have learned Python

518
00:23:42,720 --> 00:23:44,440
doesn't mean that all the processes

519
00:23:44,440 --> 00:23:47,240
will be automatically translated into Python.

520
00:23:47,240 --> 00:23:50,720
And of course, you still have your day-to-day work

521
00:23:50,720 --> 00:23:51,960
that you need to complete.

522
00:23:52,920 --> 00:23:57,320
And we have seen that in our Python courses.

523
00:23:57,320 --> 00:24:01,240
So we had those foundation courses for a while,

524
00:24:01,240 --> 00:24:05,120
and we have seen that a lot of people start the course,

525
00:24:05,120 --> 00:24:07,360
but never finish.

526
00:24:07,360 --> 00:24:08,920
Some of them got distracted,

527
00:24:08,920 --> 00:24:12,120
some of them just get stuck,

528
00:24:12,120 --> 00:24:16,240
some of them never bother to complete the final assessment

529
00:24:16,240 --> 00:24:17,880
or click complete in the system.

530
00:24:18,840 --> 00:24:22,600
And it can be somewhat similar to MOOCs,

531
00:24:22,600 --> 00:24:24,480
massive open online courses,

532
00:24:24,480 --> 00:24:26,760
although the completion rate for our courses,

533
00:24:26,760 --> 00:24:29,360
which was much higher.

534
00:24:29,360 --> 00:24:32,320
And we have, probably all of us have taken

535
00:24:32,320 --> 00:24:33,360
some of the MOOCs, right?

536
00:24:33,360 --> 00:24:37,320
We go to the system, we saw that the content is interesting,

537
00:24:37,320 --> 00:24:40,600
but it requires motivation and time commitment

538
00:24:40,600 --> 00:24:43,240
to actually go through the course.

539
00:24:43,240 --> 00:24:46,120
And even though if you complete the course,

540
00:24:46,120 --> 00:24:47,920
or at least complete the course,

541
00:24:47,920 --> 00:24:51,440
there is still a challenge to use what you have learned

542
00:24:51,440 --> 00:24:53,000
in your day-to-day work,

543
00:24:53,000 --> 00:24:55,640
especially if you have deadlines.

544
00:24:55,640 --> 00:24:58,160
Because imagine yourself being an analyst

545
00:24:58,160 --> 00:25:01,280
who need to complete something by tomorrow.

546
00:25:01,280 --> 00:25:05,200
And you know how to get it done in the old,

547
00:25:05,200 --> 00:25:08,240
maybe manual, but working way.

548
00:25:08,240 --> 00:25:11,200
And you may not have all the knowledge and confidence

549
00:25:11,200 --> 00:25:13,880
that you need to do it in Python.

550
00:25:14,760 --> 00:25:17,240
So, how have we addressed that?

551
00:25:19,080 --> 00:25:21,440
It may not come as a surprise to you

552
00:25:21,440 --> 00:25:23,560
that it's really important to teach

553
00:25:23,560 --> 00:25:26,640
what people need to do in their daily work.

554
00:25:26,640 --> 00:25:31,080
So, we need to provide people with examples

555
00:25:31,080 --> 00:25:34,880
and code cookbooks to actually do what they need to do.

556
00:25:34,880 --> 00:25:38,880
So, if an analyst needs to create a dashboard, perfect.

557
00:25:38,880 --> 00:25:42,280
Put together some code to help them do that.

558
00:25:42,320 --> 00:25:45,000
Same with automation, visualization,

559
00:25:45,000 --> 00:25:46,920
whatever they need to do.

560
00:25:46,920 --> 00:25:50,280
And here, it's really important to partner with analysts,

561
00:25:50,280 --> 00:25:52,440
both to understand their pain points,

562
00:25:52,440 --> 00:25:54,200
because being a data scientist,

563
00:25:54,200 --> 00:25:59,200
you may not do what analysts do in their daily work.

564
00:25:59,200 --> 00:26:02,800
And it's also important to discover

565
00:26:02,800 --> 00:26:05,000
some of the tips and tricks that they may have,

566
00:26:05,000 --> 00:26:09,280
and try to popularize that with a bigger community.

567
00:26:09,280 --> 00:26:11,800
Also, the next thing.

568
00:26:11,800 --> 00:26:15,240
Here at PyCon, we all know and love Python, right?

569
00:26:16,240 --> 00:26:18,160
And we are very excited about the language.

570
00:26:18,160 --> 00:26:22,400
We tell other people how awesome it is, and it's great,

571
00:26:22,400 --> 00:26:26,280
but it doesn't necessarily help non-technical people

572
00:26:26,280 --> 00:26:29,080
to get it adopted.

573
00:26:29,080 --> 00:26:31,840
So, it's really important to imagine yourself

574
00:26:31,840 --> 00:26:36,840
in other shoes, and actually reimagine people's workflow

575
00:26:36,920 --> 00:26:38,760
in Python for them.

576
00:26:38,760 --> 00:26:41,280
And here, we have an example of the course

577
00:26:41,280 --> 00:26:45,640
that we put together with help of analysts.

578
00:26:45,640 --> 00:26:49,760
So, one analyst went through our foundation courses,

579
00:26:49,760 --> 00:26:54,760
and he was fascinated by how Python make his work easier.

580
00:26:57,160 --> 00:26:59,960
But he struggled to make other people on his team

581
00:26:59,960 --> 00:27:03,360
to use Python, and so we partnered together

582
00:27:03,360 --> 00:27:05,320
to put together this content

583
00:27:05,320 --> 00:27:08,320
that is focused on their workflow.

584
00:27:08,320 --> 00:27:10,080
And people got really good feedback,

585
00:27:10,080 --> 00:27:14,080
because they were able to take the course,

586
00:27:14,080 --> 00:27:17,720
and go back to their desk, and use what they have learned,

587
00:27:19,000 --> 00:27:20,640
and get the job done much faster.

588
00:27:22,480 --> 00:27:25,280
Finally, it will not come as a surprise to you

589
00:27:25,280 --> 00:27:28,360
that leadership helps,

590
00:27:28,360 --> 00:27:33,360
and leadership can provide some motivation,

591
00:27:33,600 --> 00:27:36,160
like prizes or equipment upgrades,

592
00:27:36,160 --> 00:27:39,600
if you want to drive Python adoption.

593
00:27:40,280 --> 00:27:43,240
And of course, you can improve

594
00:27:43,240 --> 00:27:44,760
on the things that you can measure.

595
00:27:44,760 --> 00:27:48,440
So, it helps to provide leadership

596
00:27:48,440 --> 00:27:50,960
with a view of course completions,

597
00:27:50,960 --> 00:27:54,720
and some measure of adoption in different organizations.

598
00:27:54,720 --> 00:27:58,200
Because if you put multiple very successful people

599
00:27:58,200 --> 00:28:02,040
on the leaderboard, they would try to get higher.

600
00:28:02,040 --> 00:28:03,640
Competition is good.

601
00:28:04,960 --> 00:28:05,800
Anyway.

602
00:28:06,800 --> 00:28:11,800
So, this Python for Analyst course was definitely a success.

603
00:28:12,440 --> 00:28:16,240
But remember, we have thousands of analysts.

604
00:28:16,240 --> 00:28:20,000
And all of them are very smart people, and creative,

605
00:28:20,000 --> 00:28:25,000
and we want them to be able to share some of their,

606
00:28:25,200 --> 00:28:28,040
you know, good ideas, good solutions,

607
00:28:28,040 --> 00:28:30,480
without involvement from our team.

608
00:28:31,400 --> 00:28:34,360
So, what can go wrong here?

609
00:28:36,800 --> 00:28:41,160
And again, let me start with comics

610
00:28:41,160 --> 00:28:44,680
that can depict real world situation.

611
00:28:44,680 --> 00:28:49,680
So, here, a proud analyst spent his last week

612
00:28:49,760 --> 00:28:54,640
working on a script that puts some Excel plots

613
00:28:54,640 --> 00:28:56,320
into PowerPoints.

614
00:28:56,320 --> 00:28:59,920
And the code works great, so she's happy.

615
00:28:59,920 --> 00:29:02,480
But she just realized that someone has done that

616
00:29:02,480 --> 00:29:05,960
in like 2015, and all discouraged,

617
00:29:05,960 --> 00:29:08,800
she like thinks whether the cycle goes on forever

618
00:29:08,800 --> 00:29:11,840
and forever, and putting that to the extreme,

619
00:29:11,840 --> 00:29:16,840
you can see how, you know, someone can pass over

620
00:29:17,640 --> 00:29:21,760
big stacks of SQL queries from generation to generation.

621
00:29:21,760 --> 00:29:22,880
Makes sense.

622
00:29:22,880 --> 00:29:24,720
Sounds like a great decision, right?

623
00:29:25,680 --> 00:29:28,760
And again, those of you who work at big companies

624
00:29:28,760 --> 00:29:30,160
can relate to that.

625
00:29:30,160 --> 00:29:33,680
Different people solve the same problems over and over

626
00:29:33,680 --> 00:29:36,680
again, reinventing the wheel, reinventing the bicycles,

627
00:29:36,680 --> 00:29:37,600
whatever they want.

628
00:29:38,920 --> 00:29:41,720
And it's hard to get communication right,

629
00:29:41,720 --> 00:29:44,040
especially when there are many people.

630
00:29:44,040 --> 00:29:48,040
And analysts can easily get siloed and reuse

631
00:29:48,040 --> 00:29:51,800
some of the bad scripts and practices in their work.

632
00:29:51,800 --> 00:29:53,760
Because when they have an issue,

633
00:29:53,760 --> 00:29:55,920
they go to their immediate team,

634
00:29:55,920 --> 00:29:58,120
and the solution that they have

635
00:29:58,160 --> 00:30:02,280
may not necessarily be the best and greatest.

636
00:30:02,280 --> 00:30:06,960
And we have seen a lot of those in our experience.

637
00:30:06,960 --> 00:30:11,160
Finally, discoverability is a big problem.

638
00:30:11,160 --> 00:30:14,760
And there are some good solutions that never get discovered.

639
00:30:16,480 --> 00:30:20,640
And you may have heard some of those phrases,

640
00:30:20,640 --> 00:30:23,840
like someone not committing code to GitHub

641
00:30:23,840 --> 00:30:26,400
because the code is not ready.

642
00:30:26,400 --> 00:30:28,520
Anyone have heard something like that?

643
00:30:28,520 --> 00:30:29,360
Yeah, perfect.

644
00:30:30,560 --> 00:30:32,960
Guess what, it probably never will be ready.

645
00:30:32,960 --> 00:30:37,960
Anyway, another problem is people may prefer

646
00:30:38,120 --> 00:30:41,040
with their wonderful solution in a private repo.

647
00:30:41,040 --> 00:30:45,360
So to keep it secret, because good solution.

648
00:30:45,360 --> 00:30:47,680
Anyway, so how can we address that?

649
00:30:49,640 --> 00:30:52,520
First, best practices do help.

650
00:30:52,520 --> 00:30:57,520
But it's important not only to use those best practices,

651
00:30:58,080 --> 00:31:01,320
but also codify and champion them.

652
00:31:01,320 --> 00:31:05,400
And things like cookie cutters and templates can help.

653
00:31:05,400 --> 00:31:09,720
Because with cookie cutter, it's much easier to start

654
00:31:11,000 --> 00:31:12,960
with project in the way it should be,

655
00:31:12,960 --> 00:31:16,800
rather than having analysts trying to figure out

656
00:31:16,800 --> 00:31:20,480
how to structure their code so it can be packaged.

657
00:31:20,880 --> 00:31:25,880
It's also important to provide gentle yet clear introduction

658
00:31:28,440 --> 00:31:30,000
of the best practices.

659
00:31:30,000 --> 00:31:32,840
So if someone has just learned Python

660
00:31:32,840 --> 00:31:37,120
and has a bunch of hard-coded variables in their code,

661
00:31:37,120 --> 00:31:40,480
great, encourage them to put it in a variable.

662
00:31:40,480 --> 00:31:44,360
If they have a lot of random repetitive code in notebooks,

663
00:31:44,360 --> 00:31:47,720
fantastic, encourage them to create a function,

664
00:31:47,720 --> 00:31:51,960
add doc tests, doc strings unit tests,

665
00:31:51,960 --> 00:31:55,000
and finally and hopefully make it into a package,

666
00:31:55,000 --> 00:31:58,200
especially if it solves a common problem.

667
00:31:58,200 --> 00:32:02,160
And in an ideal world, this package will be then open-sourced

668
00:32:02,160 --> 00:32:04,680
as some of the other projects that we have built.

669
00:32:07,840 --> 00:32:11,920
Next, we at Capital One really use and love GitHub,

670
00:32:11,920 --> 00:32:14,480
and of course we use it to store code.

671
00:32:14,480 --> 00:32:17,280
But it's also important to make it a home

672
00:32:17,280 --> 00:32:20,800
for living documentation that can get evolved.

673
00:32:21,720 --> 00:32:24,800
And it's really hard to make people write the docs

674
00:32:24,800 --> 00:32:27,240
or get excited about the documentation.

675
00:32:27,240 --> 00:32:30,600
That's why it's so important to make it easy for people

676
00:32:30,600 --> 00:32:34,760
to make the documentation stylish and look cool.

677
00:32:34,760 --> 00:32:39,760
And tools like Docsify or creating interactive GIFs

678
00:32:40,520 --> 00:32:45,440
really help people to get some pride in writing those docs

679
00:32:45,440 --> 00:32:47,320
and share them with other people.

680
00:32:49,080 --> 00:32:52,560
And finally, sharing information is great.

681
00:32:52,560 --> 00:32:56,840
So different conferences or regular demos

682
00:32:56,840 --> 00:32:59,120
help to disseminate the knowledge.

683
00:33:02,600 --> 00:33:07,600
So we hope that we didn't get you scared

684
00:33:08,280 --> 00:33:10,960
with all the issues that you may face

685
00:33:10,960 --> 00:33:13,880
while building a community of practice.

686
00:33:13,880 --> 00:33:16,200
I feel that we've made a wonderful progress,

687
00:33:16,200 --> 00:33:18,880
although it's a never-ending journey.

688
00:33:18,880 --> 00:33:22,800
And we believe that Python is super useful

689
00:33:22,800 --> 00:33:24,760
to a big group of people.

690
00:33:24,760 --> 00:33:29,760
So we do want to finish our talk with some summary

691
00:33:30,720 --> 00:33:34,000
of some of the lessons so you can build

692
00:33:34,000 --> 00:33:36,560
your community of practice as well

693
00:33:36,560 --> 00:33:39,080
and help other people to use Python.

694
00:33:39,680 --> 00:33:44,680
So first, adoption is definitely easier

695
00:33:45,080 --> 00:33:47,640
when you start with a cohort of people.

696
00:33:47,640 --> 00:33:50,400
So when a lot of people are together in the room,

697
00:33:50,400 --> 00:33:54,080
it's much easier for them to help each other

698
00:33:54,080 --> 00:33:57,440
to get unstuck and solve problems together.

699
00:33:57,440 --> 00:33:59,800
Although top-down support definitely helps

700
00:33:59,800 --> 00:34:02,440
with the resources and incentives.

701
00:34:02,440 --> 00:34:06,640
Setup, it will always be a problem,

702
00:34:06,760 --> 00:34:10,040
but it's important to minimize the problem

703
00:34:10,040 --> 00:34:14,520
and cloud and DevOps best practices can help.

704
00:34:14,520 --> 00:34:18,080
But it's also important to separate that pain of setup

705
00:34:18,080 --> 00:34:19,680
from the joy of programming.

706
00:34:20,800 --> 00:34:25,320
Next, advocate for Python, tell how Python is great,

707
00:34:25,320 --> 00:34:29,600
but also try to put yourself in other shoes

708
00:34:29,600 --> 00:34:33,080
and reimagine people's workflow in Python.

709
00:34:33,880 --> 00:34:38,160
And finally, use best practices in your own coding

710
00:34:38,160 --> 00:34:40,720
and provide gentle yet clear introduction

711
00:34:40,720 --> 00:34:43,240
of those best practices to others.

712
00:34:43,240 --> 00:34:45,400
And use cookie cutters and templates.

713
00:34:49,640 --> 00:34:51,960
Hopefully that gives people food for thought

714
00:34:51,960 --> 00:34:55,160
and hopefully that sharing of our journey

715
00:34:55,160 --> 00:34:56,880
is helpful to other people.

716
00:34:56,880 --> 00:34:59,120
If you want, all three of us on the Capital One

717
00:34:59,120 --> 00:35:01,440
Data Science team, here's our contact info

718
00:35:01,480 --> 00:35:03,040
if you need to reach out to us.

719
00:35:03,040 --> 00:35:04,360
And I do want to mention,

720
00:35:04,360 --> 00:35:08,800
because our company kindly fly us here, we are hiring.

721
00:35:08,800 --> 00:35:10,560
We do have a booth in PyCon,

722
00:35:10,560 --> 00:35:13,160
and no, we are not trying to get people to sign up

723
00:35:13,160 --> 00:35:14,680
for our credit card in the booth.

724
00:35:14,680 --> 00:35:17,760
If you want to do that, go online, but come talk to us.

725
00:35:17,760 --> 00:35:20,680
We are hiring for people with Python skills

726
00:35:20,680 --> 00:35:22,240
in software engineering, data science,

727
00:35:22,240 --> 00:35:23,720
and on-the-shop families.

728
00:35:23,720 --> 00:35:26,080
We're hiring across the geographical location

729
00:35:26,080 --> 00:35:26,920
and experience levels.

730
00:35:26,920 --> 00:35:28,600
So come visit our booth,

731
00:35:28,600 --> 00:35:30,040
they were interested in learning more

732
00:35:30,040 --> 00:35:31,760
about working at Capital One.

733
00:35:31,760 --> 00:35:32,600
Thank you.

734
00:35:33,600 --> 00:35:38,600
All right, so now we're gonna be receiving

735
00:35:42,360 --> 00:35:43,320
a couple of questions.

736
00:35:43,320 --> 00:35:45,880
The mic is on the career at the end.

737
00:35:56,480 --> 00:35:57,320
Hi.

738
00:35:58,320 --> 00:36:01,200
So we have an analyst community

739
00:36:01,200 --> 00:36:04,320
that is kind of spread across a range of technologies,

740
00:36:04,320 --> 00:36:09,320
R, SAS, Excel, and then a few people dribbling into Python.

741
00:36:09,560 --> 00:36:11,920
And some of the pushback that we've received

742
00:36:11,920 --> 00:36:16,160
is if you have people move on to a new language,

743
00:36:16,160 --> 00:36:17,160
they're gonna move on,

744
00:36:17,160 --> 00:36:19,200
and then someone's gonna have to pick up this.

745
00:36:19,200 --> 00:36:22,960
And there's kind of like two schools of thought.

746
00:36:22,960 --> 00:36:24,320
We should have everyone standardized

747
00:36:24,320 --> 00:36:25,480
to what we've always been doing,

748
00:36:25,560 --> 00:36:28,080
which is maybe something more in the SAS realm,

749
00:36:28,080 --> 00:36:31,880
versus not let anyone go into this new thing.

750
00:36:31,880 --> 00:36:33,440
Or the second school of thought

751
00:36:33,440 --> 00:36:35,600
is kind of like encouraging something more in your direction.

752
00:36:35,600 --> 00:36:39,240
I'm just curious if you guys have any feedback

753
00:36:39,240 --> 00:36:40,680
or learnings around that,

754
00:36:40,680 --> 00:36:42,880
or if that was something you experienced in your company.

755
00:36:42,880 --> 00:36:46,640
Is the question around picking a standard language

756
00:36:46,640 --> 00:36:47,800
that people use?

757
00:36:47,840 --> 00:36:48,680
Or?

758
00:36:50,960 --> 00:36:52,320
So part of it is,

759
00:36:54,640 --> 00:36:59,360
if the team uses a mix of Python, R, and SAS,

760
00:36:59,360 --> 00:37:01,040
so that you have one Python person,

761
00:37:01,040 --> 00:37:03,200
and then they move on to a new job,

762
00:37:03,200 --> 00:37:05,480
how do you have your team pick up that code?

763
00:37:05,480 --> 00:37:09,800
So do you enforce standardization across your teams,

764
00:37:09,800 --> 00:37:14,800
or do you say you're just gonna have

765
00:37:15,280 --> 00:37:18,560
that extra work that needs to be done

766
00:37:18,560 --> 00:37:21,200
in order to team catch up on that code?

767
00:37:21,200 --> 00:37:24,680
Yeah, we actually, I mean, I think at any kind

768
00:37:24,680 --> 00:37:26,600
of larger company, you end up with these pockets

769
00:37:26,600 --> 00:37:29,440
of expertise, and you have some really well-established

770
00:37:29,440 --> 00:37:30,560
Java code base over here.

771
00:37:30,560 --> 00:37:33,240
You might have a really established SAS code base over here.

772
00:37:33,240 --> 00:37:35,520
One of the reasons we wanted to move people to Python

773
00:37:35,520 --> 00:37:40,520
is that it is, I think, easier to go into somebody's old

774
00:37:41,080 --> 00:37:44,520
kind of Python code and kind of decipher what's going on

775
00:37:45,520 --> 00:37:46,600
than in other languages.

776
00:37:46,600 --> 00:37:48,320
Maybe that's my own opinion,

777
00:37:48,320 --> 00:37:51,360
but that's something that we've seen.

778
00:37:51,360 --> 00:37:53,960
And so that's one reason to kind of standardize on Python.

779
00:37:53,960 --> 00:37:56,400
I think another part of your question is kind of,

780
00:37:58,160 --> 00:38:00,400
I see it through the lens of people's development,

781
00:38:00,400 --> 00:38:02,840
and if we're gonna imagine ourselves as a tech company

782
00:38:02,840 --> 00:38:05,560
that just happens to do banking,

783
00:38:05,560 --> 00:38:09,440
then we should develop people in terms of

784
00:38:09,440 --> 00:38:12,440
the relevant tech skills of today and tomorrow

785
00:38:12,440 --> 00:38:13,520
and all of that.

786
00:38:13,520 --> 00:38:16,640
And so if we see analysis kind of moving towards

787
00:38:16,640 --> 00:38:20,320
cloud solutions, if we see things moving towards Python,

788
00:38:20,320 --> 00:38:22,440
then we wanna get people using that,

789
00:38:22,440 --> 00:38:26,800
even if it's going to make us spend some admittedly painful

790
00:38:27,760 --> 00:38:30,160
time kind of migrating things from the old way

791
00:38:30,160 --> 00:38:31,720
of doing things to the new way of doing things.

792
00:38:31,720 --> 00:38:34,120
And that's one of the areas where I think

793
00:38:34,120 --> 00:38:36,000
the top-down support is especially helpful

794
00:38:36,000 --> 00:38:39,040
because we can have people like our CEO come and say,

795
00:38:39,040 --> 00:38:41,920
we are all moving to Python, we are getting off SAS.

796
00:38:41,920 --> 00:38:46,680
And then it kind of gets everybody on board real quick.

797
00:38:48,680 --> 00:38:49,520
All right, thank you.

798
00:38:49,520 --> 00:38:51,600
I just have to have your CEO call my CEO.

799
00:38:55,680 --> 00:38:59,160
So I really enjoyed the page that you had up

800
00:38:59,160 --> 00:39:01,000
that listed out all of the templates

801
00:39:01,000 --> 00:39:04,480
and sort of common uploaded code and GitHub,

802
00:39:04,480 --> 00:39:05,640
for lack of a better phrase.

803
00:39:05,640 --> 00:39:07,360
I think something that we're encountering,

804
00:39:07,360 --> 00:39:10,120
and I'd love to sort of hear how you're thinking about this,

805
00:39:10,640 --> 00:39:14,040
what are you planning sort of as more people

806
00:39:14,040 --> 00:39:18,080
create templates and more people create patterns of work,

807
00:39:18,080 --> 00:39:19,760
thinking about like when there are thousands

808
00:39:19,760 --> 00:39:22,840
or tens of thousands of notebooks committed to GitHub,

809
00:39:22,840 --> 00:39:26,400
how are you thinking about making sure that the most

810
00:39:26,400 --> 00:39:31,400
relevant and ideal solutions are easily found

811
00:39:32,080 --> 00:39:33,040
in your community?

812
00:39:33,040 --> 00:39:36,040
Yeah, I mean, that's a very good question.

813
00:39:36,040 --> 00:39:41,040
I would say that even those notebooks are well documented,

814
00:39:42,040 --> 00:39:44,920
so people can understand what actually is happening there.

815
00:39:44,920 --> 00:39:48,680
Then search over GitHub works pretty good

816
00:39:48,680 --> 00:39:52,520
and people can just search for relevant projects

817
00:39:52,520 --> 00:39:57,520
and get inspired by some of the solutions.

818
00:39:57,520 --> 00:39:59,240
So yeah, my answer would be yes.

819
00:39:59,280 --> 00:40:01,520
I would just add, it's pretty similar

820
00:40:01,520 --> 00:40:04,080
to just open source software in general, I think.

821
00:40:05,120 --> 00:40:07,600
How do we find relevant things that are out there?

822
00:40:07,600 --> 00:40:10,280
And we would like to have some internal version

823
00:40:10,280 --> 00:40:12,400
of Stack Overflow, internal version of Google,

824
00:40:12,400 --> 00:40:13,600
internal version of, I mean,

825
00:40:13,600 --> 00:40:15,120
the search is not always the best.

826
00:40:15,120 --> 00:40:17,720
If you've used Slack search, you know how easy and fun it is

827
00:40:17,720 --> 00:40:19,520
to find things that happen in the past.

828
00:40:19,520 --> 00:40:21,160
But I think that's a good question.

829
00:40:21,160 --> 00:40:22,000
I think that's a good question.

830
00:40:22,000 --> 00:40:23,840
I think that's a good question.

831
00:40:23,840 --> 00:40:25,440
I think that's a good question.

832
00:40:25,440 --> 00:40:26,880
I think that's a good question.

833
00:40:26,920 --> 00:40:27,720
So yeah, I think it's easy and fun it is

834
00:40:27,720 --> 00:40:30,360
to find things that happen in the past.

835
00:40:30,360 --> 00:40:34,040
But we do want to have some sort of aggregation

836
00:40:34,040 --> 00:40:38,680
that's basically by topic or something like that.

837
00:40:38,680 --> 00:40:41,240
And people are working on those things,

838
00:40:41,240 --> 00:40:44,960
but that is, I guess, still a constant struggle.

839
00:40:48,200 --> 00:40:50,000
Thanks so much, guys.

840
00:40:50,000 --> 00:40:52,080
I have a question about different languages

841
00:40:52,080 --> 00:40:53,200
that people might want to use.

842
00:40:53,200 --> 00:40:55,960
I know some examples in R,

843
00:40:56,000 --> 00:40:58,960
when some analysts are doing very statistics heavy modeling,

844
00:40:58,960 --> 00:41:00,320
R might be better than Python,

845
00:41:00,320 --> 00:41:01,280
and some of the Python packages

846
00:41:01,280 --> 00:41:03,280
can't even keep up yet at the moment.

847
00:41:04,200 --> 00:41:06,800
Is your project, I don't want to kind of say,

848
00:41:06,800 --> 00:41:09,920
really use Python unless you have very specific cases

849
00:41:09,920 --> 00:41:12,120
not to use it, or is it a little more flexible,

850
00:41:12,120 --> 00:41:13,720
especially in those edge cases?

851
00:41:15,360 --> 00:41:17,840
Yeah, I think, thank you.

852
00:41:17,840 --> 00:41:20,520
Yeah, just as a person who also uses R

853
00:41:20,520 --> 00:41:23,120
and works with people who use R,

854
00:41:23,120 --> 00:41:25,840
I would say, I mean, we embrace both.

855
00:41:26,680 --> 00:41:29,160
Of course, Python is awesome for many reasons,

856
00:41:29,160 --> 00:41:32,600
but there are some packages in R

857
00:41:32,600 --> 00:41:34,440
with some fancy statistical methods

858
00:41:34,440 --> 00:41:39,440
that don't have its similar analogs in Python.

859
00:41:42,360 --> 00:41:47,360
And I mean, it's usually like a team makes a decision

860
00:41:47,520 --> 00:41:49,800
what language do they want to embrace.

861
00:41:49,800 --> 00:41:53,640
Also, with some clever pipelining

862
00:41:53,640 --> 00:41:55,720
and good core code organization,

863
00:41:56,560 --> 00:42:00,840
it's easier to pipeline different programs altogether.

864
00:42:02,040 --> 00:42:05,240
So yeah, I hope that gives you some sense.

865
00:42:11,600 --> 00:42:14,200
We have space only for one last question.

866
00:42:14,200 --> 00:42:16,880
I'm sorry, we can continue.

867
00:42:16,880 --> 00:42:19,000
I guess you can be committed on the corridor.

868
00:42:19,000 --> 00:42:19,840
But.

869
00:42:20,760 --> 00:42:22,220
Yeah, thanks a lot for the great talk.

870
00:42:22,220 --> 00:42:23,780
So I had a question.

871
00:42:24,700 --> 00:42:26,580
Since you're, it seems like you're now using

872
00:42:26,580 --> 00:42:30,060
a lot of external open source tools,

873
00:42:30,060 --> 00:42:33,260
how do you handle updates on those tools?

874
00:42:33,260 --> 00:42:36,140
Especially when you now have a group of internal analysts

875
00:42:36,140 --> 00:42:37,900
who are building some things on top of them

876
00:42:37,900 --> 00:42:40,380
that may not be compatible between versions,

877
00:42:40,380 --> 00:42:43,980
and also who may not be trained software engineers

878
00:42:43,980 --> 00:42:47,420
who are really experienced with version bumps.

879
00:42:48,300 --> 00:42:49,140
That's a great question.

880
00:42:49,140 --> 00:42:53,020
But I would point out that many of our analysts use tools

881
00:42:53,020 --> 00:42:56,060
that are pretty widespread and standard,

882
00:42:56,060 --> 00:42:58,940
things like SQL Alchemy, things like Pandas,

883
00:42:58,940 --> 00:43:03,380
things like Netplotlib and OK or stuff like that,

884
00:43:03,380 --> 00:43:06,540
that doesn't have nearly as big a deal

885
00:43:06,540 --> 00:43:08,460
in terms of version updates.

886
00:43:08,460 --> 00:43:13,460
And we do see some of those conflicts or issues when,

887
00:43:14,140 --> 00:43:17,140
for example, some of our data or data scientists

888
00:43:17,140 --> 00:43:21,500
take a particular library that hasn't been updated

889
00:43:21,500 --> 00:43:22,420
for two to three years.

890
00:43:22,580 --> 00:43:25,020
And then we still have an ongoing product support

891
00:43:25,020 --> 00:43:26,900
for an existing internal project.

892
00:43:26,900 --> 00:43:28,540
What do you do then?

893
00:43:28,540 --> 00:43:30,660
I feel like I don't have a very good solution to that,

894
00:43:30,660 --> 00:43:33,340
but I do want to know that it is something

895
00:43:33,340 --> 00:43:35,860
that we are also experiencing the plain point of,

896
00:43:35,860 --> 00:43:39,540
and we are trying to learn from experience of picking,

897
00:43:39,540 --> 00:43:43,420
like which, how you pick your stack is important.

898
00:43:43,420 --> 00:43:46,780
And there's risks when you're picking a stack

899
00:43:46,780 --> 00:43:48,580
that ended up not getting updated.

900
00:43:50,020 --> 00:43:52,380
Sorry that if the answer is not very satisfying,

901
00:43:53,300 --> 00:43:55,260
but it's something they're also trying to deal with.

902
00:43:56,620 --> 00:44:00,780
And make sure to fix the versions for packages

903
00:44:00,780 --> 00:44:01,660
in the environment.

904
00:44:01,660 --> 00:44:05,060
And we encourage for whatever projects people are working on

905
00:44:05,060 --> 00:44:08,220
to fix those versions, just because there are so many errors

906
00:44:08,220 --> 00:44:09,580
that can be caused by that.

907
00:44:12,380 --> 00:44:15,020
And I'll just add in the last 10 seconds,

908
00:44:16,460 --> 00:44:17,860
it actually is really tempting sometimes

909
00:44:17,860 --> 00:44:19,660
to use some of these more niche packages

910
00:44:19,660 --> 00:44:21,580
that kind of solve a very particular use case.

911
00:44:21,580 --> 00:44:25,020
And we found that actually just minimizing the dependencies

912
00:44:25,020 --> 00:44:27,380
prevents this problem from coming up as often.

913
00:44:27,380 --> 00:44:30,620
So while there may be some cool stuff out there

914
00:44:30,620 --> 00:44:35,620
to handle something very close to what they're doing,

915
00:44:35,620 --> 00:44:38,380
if they stick with the more well trodden path,

916
00:44:38,380 --> 00:44:42,300
then the version update thing doesn't bite as often.

917
00:44:42,300 --> 00:44:44,300
So that is one tangible thing you can do

918
00:44:44,300 --> 00:44:49,300
is kind of take a hard look at the requirements.txt

919
00:44:49,580 --> 00:44:51,300
or environment.yml and make sure that

920
00:44:52,500 --> 00:44:54,100
you absolutely need these things.

921
00:44:56,300 --> 00:44:58,140
All right, thank you.

922
00:44:58,140 --> 00:44:59,140
Thank you.

