1
00:00:00,000 --> 00:00:06,080
Thank you everyone. Welcome to the first afternoon session here on Saturday. First

2
00:00:06,080 --> 00:00:10,960
up we're gonna have Dustin Ingram talking about pep572, the walrus

3
00:00:10,960 --> 00:00:15,360
operator. Please welcome Dustin Ingram.

4
00:00:19,040 --> 00:00:26,360
Hi everybody. Yeah so I'm Dustin. I'm a developer advocate at Google. I focus on

5
00:00:26,360 --> 00:00:30,880
Python. I also work on the Python package index and some other things but

6
00:00:30,880 --> 00:00:34,080
I want you to just sort of think of me as for this the purposes of this talk as

7
00:00:34,080 --> 00:00:39,640
just a regular Python user just like all of y'all and what we're gonna talk about

8
00:00:39,640 --> 00:00:48,200
today is a pep, pep572. But before I tell you about this pep and what it does we

9
00:00:48,200 --> 00:00:52,280
need to talk a little bit about Python governance. So Python governance is the

10
00:00:52,280 --> 00:00:57,320
answer to the question how do we govern the language of Python? How do we make

11
00:00:57,320 --> 00:01:00,760
changes to the language? How do we implement new features and that kind of

12
00:01:00,760 --> 00:01:05,400
thing? How do we make decisions about Python? So when Python was first created

13
00:01:05,400 --> 00:01:10,440
its creator installed himself as the BDFL, the benevolent dictator for life.

14
00:01:10,440 --> 00:01:15,040
Dictator meaning that he can do whatever he wants to the language. Benevolent

15
00:01:15,040 --> 00:01:19,440
meaning that he's generally going to be looking out for us. So this is creator of

16
00:01:19,440 --> 00:01:25,280
Python, Gito Van Rassum and yeah he's our BDFL and the thing to note is you

17
00:01:25,280 --> 00:01:28,000
know maybe at the beginning of Python Gito was making all these decisions

18
00:01:28,000 --> 00:01:32,240
himself. Gito didn't until recently didn't really make all these decisions

19
00:01:32,240 --> 00:01:36,400
himself anymore. Instead what we do is we have a process and that's called the

20
00:01:36,400 --> 00:01:43,120
Python enhancement proposal process, the pep. So a pep is kind of like an

21
00:01:43,120 --> 00:01:47,440
amendment to the Constitution for a country. The Constitution determines how

22
00:01:47,440 --> 00:01:51,200
a country is going to be governed. So each pep determines what we're going to

23
00:01:51,200 --> 00:01:54,280
do with the language and how we're going to change the language and each one sort

24
00:01:54,280 --> 00:01:57,840
of builds on a previous pep. So we started with pep one and we went along.

25
00:01:57,840 --> 00:02:08,680
So can anyone name a pep? Yeah, pep eight. I thought you were gonna say that. So pep eight is a

26
00:02:08,680 --> 00:02:13,400
style guide for Python code. It's a pep that describes sort of a general way to

27
00:02:13,400 --> 00:02:18,080
write Python code. Its author is Gito Van Rassum. So this is a pretty early pep and

28
00:02:18,080 --> 00:02:22,840
it was authored by Gito himself. Another well-known pep is pep 20. This is the

29
00:02:22,840 --> 00:02:26,920
Zen of Python. This is what you get if you type import this in your Python

30
00:02:26,920 --> 00:02:32,600
REPL. Its author was Tim Peters. Tim was one of the also the core Python

31
00:02:32,600 --> 00:02:39,000
contributors. My favorite pep is pep 566, metadata for Python software packages 2.1.

32
00:02:39,000 --> 00:02:44,160
The reason I like this pep so much is because I am the author of this pep. So

33
00:02:44,160 --> 00:02:49,040
when I wrote this pep, this is kind of what the process was like. First I wrote

34
00:02:49,040 --> 00:02:52,560
a draft of the pep in sort of this format that all the sort of peps fall

35
00:02:52,560 --> 00:02:57,440
into. Then the pep was accepted by somebody and then it was implemented. So

36
00:02:57,440 --> 00:03:00,760
sort of a three-step process. And the important thing to note here is that

37
00:03:00,760 --> 00:03:05,680
Gito himself did not approve my pep directly. I'm actually quite sure he has

38
00:03:05,680 --> 00:03:12,880
never read it and he has no idea who I am. Instead, and that's okay, instead we

39
00:03:12,880 --> 00:03:16,640
have what we call BDFL delegates. So these are people that Gito has entrusted

40
00:03:16,640 --> 00:03:20,720
to make decisions about the language either because they know more about a

41
00:03:20,720 --> 00:03:24,960
certain area of the language or about Python than him. He thinks they're

42
00:03:24,960 --> 00:03:29,080
better stewards of that area or he just doesn't know or doesn't care about that.

43
00:03:29,080 --> 00:03:32,680
So for example, packaging stuff, he thinks other people can make that

44
00:03:32,680 --> 00:03:36,080
decision better and so he's entrusted someone else to approve peps in that

45
00:03:36,080 --> 00:03:42,160
area. So the flow of power is kind of like this. Gito gives power to the BDFL

46
00:03:42,160 --> 00:03:46,760
delegates and those delegates can then approve or reject peps and thus change

47
00:03:46,760 --> 00:03:51,280
the language. And sometimes Gito is also still, you know, accepting peps himself.

48
00:03:51,280 --> 00:03:56,560
So you might have heard about pep 572. This is a relatively recent pep that was

49
00:03:56,560 --> 00:04:01,200
created. Its title was assignment expressions and the reason you might have

50
00:04:01,240 --> 00:04:04,440
heard about it is because it caused just a little bit of drama and we'll talk

51
00:04:04,440 --> 00:04:10,040
about that in a second. This pep is centered around just two characters. This

52
00:04:10,040 --> 00:04:13,840
is a new operator in Python. It has a name. I'm not going to tell you what it

53
00:04:13,840 --> 00:04:18,320
is. Instead, I'm going to call this the walrus operator because it kind of looks

54
00:04:18,320 --> 00:04:23,400
like a walrus lying on its side, right? And an important thing to note is I gave

55
00:04:23,400 --> 00:04:26,840
this talk once before and someone was really concerned that this walrus was

56
00:04:26,840 --> 00:04:35,720
dead. He's not dead. He is just resting. Okay. So instead of just reading you the

57
00:04:35,720 --> 00:04:39,120
pep, I'm going to give you some short examples to show you how the walrus

58
00:04:39,120 --> 00:04:42,720
operator can be used and what you can do with it. So one thing that you might want

59
00:04:42,720 --> 00:04:48,680
to use it for is balancing lines of code and complexity. LOC versus big O

60
00:04:48,680 --> 00:04:54,280
complexity. So here's an example where we have a list and in this list we have

61
00:04:54,280 --> 00:04:58,760
three items. F of X, F of X to the power of two, F of X to the power of three, right?

62
00:04:58,760 --> 00:05:02,760
And we're assigning it to the value foo. Let's say that the function F of X is

63
00:05:02,760 --> 00:05:06,160
really expensive to compute here. Let's say it takes like a full minute to run

64
00:05:06,160 --> 00:05:11,120
that function. So when we create this list, we're calling F of X three times

65
00:05:11,120 --> 00:05:16,920
and if it's really expensive, it's going to take three times as long to run. So

66
00:05:16,920 --> 00:05:19,440
what can we do to make this a little bit more efficient? We're going to get the

67
00:05:19,440 --> 00:05:23,520
same answer from it regardless of how many times we call it. So let's just call

68
00:05:23,520 --> 00:05:26,640
it once and put it in a variable and then we can reuse that variable in the

69
00:05:26,640 --> 00:05:31,000
list. So this is great but some people might say I kind of like that first one

70
00:05:31,000 --> 00:05:34,160
better because it was on one line. This one's on two lines and I'm like creating

71
00:05:34,160 --> 00:05:37,880
a variable. With the walrus operator, you don't need to do either of those

72
00:05:37,880 --> 00:05:44,000
things. Instead, you can use the walrus operator to assign to the variable Y

73
00:05:44,000 --> 00:05:48,960
inside the list and then reuse Y later on in that list. You can just reuse that

74
00:05:48,960 --> 00:05:54,560
variable right there in line in the list. So that's avoiding expensive

75
00:05:54,560 --> 00:05:59,400
computations. Another thing you can do is avoid inefficient comprehensions. So

76
00:05:59,400 --> 00:06:03,920
here's a little example and I'll just walk through this real quick. So first we

77
00:06:03,920 --> 00:06:09,040
initialize a list that's empty, results. Then we iterate over something called a

78
00:06:09,040 --> 00:06:13,040
variable data and for everything in data, we call a function and we get a result

79
00:06:13,040 --> 00:06:18,120
from it. And if that result is truthy, we append the result to our results and if

80
00:06:18,160 --> 00:06:21,280
it's not, we don't do anything with it. So this is just a pretty straightforward

81
00:06:21,280 --> 00:06:25,000
little loop and generally when I look at something like this where we have that

82
00:06:25,000 --> 00:06:28,600
initialization of an empty list sitting outside of a for loop like that, that's

83
00:06:28,600 --> 00:06:32,960
kind of a code smell, right? Generally if you see that in Python, you know that I

84
00:06:32,960 --> 00:06:36,600
could probably turn that into a list comprehension. If you did, you would be

85
00:06:36,600 --> 00:06:40,000
right. You could turn that into a list comprehension pretty easily and it would

86
00:06:40,000 --> 00:06:43,800
look a lot nicer and be a few shorter lines of code. However, it would also be

87
00:06:43,800 --> 00:06:48,280
more inefficient. So the problem here is that we're calling f of x again and if f

88
00:06:48,280 --> 00:06:51,840
of x is again really expensive to compute, we're doing it twice here instead

89
00:06:51,840 --> 00:06:55,840
of before when we were only doing it once. With the walrus operator, we can do

90
00:06:55,840 --> 00:07:01,240
the same thing. So in the sub-expression of this comprehension, in the filter

91
00:07:01,240 --> 00:07:05,960
clause, so that if statement, we can assign y to the value of f of x and then we can

92
00:07:05,960 --> 00:07:11,240
reuse it in the comprehension later. Another thing we can do, we can avoid

93
00:07:11,240 --> 00:07:16,160
unnecessary variables in scope. So here's an example. This is kind of familiar if

94
00:07:16,160 --> 00:07:21,240
you do anything with regular expressions. Maybe we search over some pattern or

95
00:07:21,240 --> 00:07:24,800
search over some set of data for a pattern and we get this like match object

96
00:07:24,800 --> 00:07:28,200
back and then we need to test if the match object is truth or not and

97
00:07:28,200 --> 00:07:32,200
determine if we have a match or not. So this might look a little weird to you

98
00:07:32,200 --> 00:07:35,760
because we're creating this match object but we're only using it inside that if

99
00:07:35,760 --> 00:07:38,960
statement. That's not going to be used later and we just need to know if it

100
00:07:38,960 --> 00:07:42,800
exists or not and then we can do things with it if it does. With the walrus

101
00:07:42,800 --> 00:07:47,640
expression, walrus operator, we can just in that if conditional assign match

102
00:07:47,640 --> 00:07:50,480
right there and then it doesn't exist outside the scope of that if statement.

103
00:07:50,480 --> 00:07:54,120
It's just like a little bit of a tighter piece of syntax and it's just right there

104
00:07:54,120 --> 00:07:59,680
in two lines and match isn't hanging around later. Another example, processing

105
00:07:59,680 --> 00:08:03,440
streams in chunks. This is a pretty common pattern. So if we have like a

106
00:08:03,440 --> 00:08:07,840
really big file and we want to read it in little pieces at a time, one common

107
00:08:07,880 --> 00:08:11,160
way to do this is we'll take a chunk and then we'll iterate. We'll process that

108
00:08:11,160 --> 00:08:14,320
chunk and we'll take a new chunk and we'll reassign to a chunk variable over

109
00:08:14,320 --> 00:08:19,680
and over and over again until the file is empty. So while chunk. So this is

110
00:08:19,680 --> 00:08:23,880
works, this is fine but one thing that's kind of like not pretty here is that

111
00:08:23,880 --> 00:08:28,360
that chunk equals file.read and some magic number is being repeated twice

112
00:08:28,360 --> 00:08:31,760
here. So like if I decide I want to change the size of the chunk, I have to

113
00:08:31,760 --> 00:08:34,920
change it on two lines not just one and like maybe I could put that in a

114
00:08:35,040 --> 00:08:38,880
variable and that could live outside but we can make it even simpler with the

115
00:08:38,880 --> 00:08:43,320
walrus operator. So here again we just use chunk just like that if statement

116
00:08:43,320 --> 00:08:47,720
before, put it inside the while expression and then we just process it

117
00:08:47,720 --> 00:08:54,560
until it's falsy and then the while loop exits. Okay some short examples. You might

118
00:08:54,560 --> 00:08:58,160
say why? Why do we need to do this? All those examples before work totally fine

119
00:08:58,160 --> 00:09:05,000
and you know let's not change anything. Okay so one thing to note is that

120
00:09:05,000 --> 00:09:10,360
generally fewer lines are better. Programmers kind of hate change and so if

121
00:09:10,360 --> 00:09:14,200
you can minimize your diffs by just at least like one line it's usually worth

122
00:09:14,200 --> 00:09:19,400
it right? It's less noise in your pull requests and things like that. So here in

123
00:09:19,400 --> 00:09:22,640
this example if I can take these two lines I can turn them into just one line

124
00:09:22,640 --> 00:09:26,320
like my co-workers are gonna totally love me and it's a 50% reduction in code

125
00:09:26,320 --> 00:09:31,600
so it's just less lines to review. Also fewer lines could be more efficient too.

126
00:09:31,600 --> 00:09:34,800
So some of the people that were sort of evaluating this pep they went and found

127
00:09:34,800 --> 00:09:38,440
some examples. They found an example like this where we're doing the regular

128
00:09:38,440 --> 00:09:42,400
expression thing and we're checking to see if the match is in a group and

129
00:09:42,400 --> 00:09:46,960
instead of writing this the programmer wrote this. They decided I'm just gonna

130
00:09:46,960 --> 00:09:52,000
throw this all on one line and you know then it's just a simpler read one line

131
00:09:52,000 --> 00:09:55,640
fine. But what they're doing here is they're calling read out match twice and

132
00:09:55,640 --> 00:09:59,320
again that's more inefficient right? You're calling the exact same thing over

133
00:09:59,320 --> 00:10:03,880
again. This line is gonna be twice as slow as it was before. With a Wallace

134
00:10:03,880 --> 00:10:07,360
operator they could have written this. It's exactly the same length it's still

135
00:10:07,360 --> 00:10:11,080
one line but you're only calling match once. So ultimately this is kind of a

136
00:10:11,080 --> 00:10:17,080
trade-off between developer and computer efficiency. Okay you might be looking at

137
00:10:17,080 --> 00:10:20,400
all this and you might say yeah this kind of actually looks like something I

138
00:10:20,400 --> 00:10:25,480
know this kind of looks like the equals operator and even kind of looks like the

139
00:10:25,480 --> 00:10:29,120
equals operator too right? It's got the equal sign in it. One thing it's

140
00:10:29,120 --> 00:10:33,000
important to note that this is actually nothing like the equals operator and

141
00:10:33,000 --> 00:10:37,200
everywhere that you can use the equals operator you cannot use the Wallace

142
00:10:37,200 --> 00:10:41,840
operator. So one example is multiple targets. With the equals operator you can

143
00:10:41,840 --> 00:10:46,280
say X equals Y equals Z equals zero X Y and Z all become zero. You can't do that

144
00:10:46,280 --> 00:10:52,000
with a Wallace operator. Another example is assigning two things other than a

145
00:10:52,000 --> 00:10:58,000
variable name. So we can do A of I the index and set that to a variable. You

146
00:10:58,000 --> 00:11:03,640
can't do that with the Wallace operator. Another one is assignments to things

147
00:11:03,640 --> 00:11:08,400
other than a name. So we can set self dot rest to an empty list. You can't do that

148
00:11:08,400 --> 00:11:13,920
with the Wallace operator. And again here's another one comma priority. So X

149
00:11:13,920 --> 00:11:17,980
one comma two that creates a tuple one two. With the Wallace operator that

150
00:11:17,980 --> 00:11:21,700
doesn't. It sets X equal to one. The priority is with the comma it's closer

151
00:11:21,700 --> 00:11:27,820
to the operator. Another one is augmented assignment operator so the plus equals.

152
00:11:27,820 --> 00:11:33,900
So we can do you know total plus equals tax with the regular operator. We can't

153
00:11:33,900 --> 00:11:37,540
do that with the Wallace operator. And actually like I don't even know what we

154
00:11:37,540 --> 00:11:44,060
would call that at that point. It's kind of like a walrus with a popat on top.

155
00:11:44,620 --> 00:11:51,180
Okay so that's PEP 572. Let's talk about the reception of how this PEP was

156
00:11:51,180 --> 00:11:55,020
received when it was first drafted. So like I said before most people kind of

157
00:11:55,020 --> 00:11:58,820
hate change. Programmers especially hate it when things change. So one of the

158
00:11:58,820 --> 00:12:03,580
first like most obvious receptions to this was backwards incompatibility. So

159
00:12:03,580 --> 00:12:08,260
this is changing where is this gonna work? Like if we add this to Python it's

160
00:12:08,260 --> 00:12:11,180
not gonna work on older versions of Python. It's not backwards compatible at

161
00:12:11,180 --> 00:12:16,260
all. Another concern was teachability. Like what do we call this? So I've

162
00:12:16,260 --> 00:12:19,340
avoided actually using the real name for this operator. I've been calling the

163
00:12:19,340 --> 00:12:22,340
Wallace operator. We can't call it the Wallace operator. That's jargon.

164
00:12:22,340 --> 00:12:26,180
We need a real name for it that tells us what it does. So we can't call it the

165
00:12:26,180 --> 00:12:30,020
assignment operator. We could call it the becomes operator. We could call it the

166
00:12:30,020 --> 00:12:33,700
named expression operator. And so that last one is actually the name for it. The

167
00:12:33,700 --> 00:12:37,740
named expression operator. But it's still it's hard like if I tell you oh we're

168
00:12:37,740 --> 00:12:40,580
adding a named expression operator to Python you might not understand what

169
00:12:40,580 --> 00:12:44,620
that means. Another is just attractiveness. A lot of people looked at

170
00:12:44,620 --> 00:12:48,420
this and they said wow that is that's just ugly. I hate it. It's really weird

171
00:12:48,420 --> 00:12:54,180
and different. And so there was a lot of discussion about this. There was long

172
00:12:54,180 --> 00:12:59,380
mailing list threads debating the merits of this pep. Like really long mailing list

173
00:12:59,380 --> 00:13:05,000
threads. There were polls where core contributors were polled to see if they

174
00:13:05,000 --> 00:13:08,260
liked it or not and the results were actually you know a lot of a lot of

175
00:13:08,260 --> 00:13:12,780
people disliked it. Some people liked it. Some people had no opinions. Some of the

176
00:13:12,780 --> 00:13:15,580
core contributors weighed in with opinions of their own. So Tim Peters said

177
00:13:15,580 --> 00:13:18,780
that the current proposal would have a modest but clear improvement in quite a

178
00:13:18,780 --> 00:13:23,020
few bits of code. Barry Warslaw said that since it changes the syntax of the

179
00:13:23,020 --> 00:13:26,300
language people are tending to focus on that without understanding the kind of

180
00:13:26,300 --> 00:13:31,260
deeper issues here. Uka Shalanga said dictators should dictate. He thought that

181
00:13:31,260 --> 00:13:35,140
Guido should just do whatever he wanted and ignore what everyone is talking

182
00:13:35,140 --> 00:13:38,820
about. And in fact Guido himself said that he had to stop reading the threads so he

183
00:13:38,820 --> 00:13:46,500
wouldn't go insane. So after a long period of discussion Guido accepted this

184
00:13:46,500 --> 00:13:50,860
pep. He marked it as except it went from draft to accepted. He merged the pull

185
00:13:50,860 --> 00:13:54,300
request and then he sent this email to the Python committers mailing list

186
00:13:54,300 --> 00:14:00,020
stepping down as BDFL. He said that now peps 572 is done I don't ever want to

187
00:14:00,020 --> 00:14:04,740
have to fight so hard for a pep and find that people despise my decisions. And so

188
00:14:04,740 --> 00:14:10,740
he's going to remove himself entirely from the decision process. So in my

189
00:14:10,740 --> 00:14:14,500
talks I like to post Twitter reactions that people have. So here's some of the

190
00:14:14,500 --> 00:14:17,860
things that people said afterwards. This person is pretty funny. A long time

191
00:14:17,860 --> 00:14:20,980
before this happened he said dear Python all I want for my birthday is the chunk

192
00:14:20,980 --> 00:14:24,380
example that I showed before. And then after this happened he said I just

193
00:14:24,380 --> 00:14:27,820
realized that thanks to pep 572 I'm getting my birthday present but at what

194
00:14:27,820 --> 00:14:33,860
cost? Our BDFL has stepped down. Henix said pep 572 rocks. What a

195
00:14:33,860 --> 00:14:41,700
farewell gift. This person said TFW Reddit says pep 572 lost the zen of Python

196
00:14:41,700 --> 00:14:49,020
but the author of the zen of Python is a co-author of the pep. This person said

197
00:14:49,020 --> 00:14:54,740
Guido is stepping down as BDFL Python and he quoted the first line of

198
00:14:54,740 --> 00:14:58,980
that message and he said I'm shocked by the vitriol we throw at the people who

199
00:14:58,980 --> 00:15:03,100
run our most important free and open source software projects. And as an

200
00:15:03,100 --> 00:15:07,100
example of that there was also this tweet. Pep 572 is a trash feature and I'm

201
00:15:07,100 --> 00:15:11,580
sad that it was the straw that broke Guido's back. So I want to be really

202
00:15:11,580 --> 00:15:15,140
explicit and clear here. If we're talking about straws that are breaking people's

203
00:15:15,140 --> 00:15:19,540
backs the straw that broke Guido's back was not trash peps that were heaped upon

204
00:15:19,540 --> 00:15:23,580
him by pep authors. The straw that broke Guido's back was when people were

205
00:15:23,580 --> 00:15:27,500
calling your work trash by like anonymous and strange people on the

206
00:15:27,500 --> 00:15:32,140
internet. I think when we're on the internet we kind of tend to forget who

207
00:15:32,140 --> 00:15:41,020
we're talking to. Like dictators are people too right? And it's true Guido is

208
00:15:41,020 --> 00:15:44,860
a person his thoughts and feelings just like all of us and just because he's

209
00:15:44,860 --> 00:15:47,740
like super famous creator of our language doesn't mean that we have to

210
00:15:47,740 --> 00:15:50,900
get to treat him that way and actually it's not just true for Guido this is

211
00:15:50,900 --> 00:15:54,140
true for like all people that maintain and work on open source software in our

212
00:15:54,140 --> 00:15:57,460
community. Maintainers are people too. Really just like think about like this

213
00:15:57,460 --> 00:16:02,780
people are people too right? Okay I'm gonna preempt some questions about this

214
00:16:02,780 --> 00:16:07,780
so one question what does this mean for Python? Okay it actually had a pretty big

215
00:16:07,780 --> 00:16:11,140
effect on Python. I had someone asked a question is this gonna be the pep to end

216
00:16:11,140 --> 00:16:15,500
all peps and that was kind of true actually so like I said before the power

217
00:16:15,500 --> 00:16:19,740
to approve and change language drives power from Guido so when Guido stepped

218
00:16:19,740 --> 00:16:23,980
down with no Guido we had no BDFL delegates that got their power from him

219
00:16:23,980 --> 00:16:27,700
and thus we could not approve any peps and we couldn't make any change to the

220
00:16:27,700 --> 00:16:31,980
language so we're like a little bit stuck. That said it's gonna be okay so

221
00:16:31,980 --> 00:16:36,260
really immediately after this happened some smart people got to work on this

222
00:16:36,260 --> 00:16:40,200
new governance problem and they created another pep the Python language

223
00:16:40,200 --> 00:16:43,340
governance proposal overview and this sort of outlined exactly what we were

224
00:16:43,340 --> 00:16:47,780
gonna do to create a new governance model for Python. They also created pep

225
00:16:47,780 --> 00:16:53,940
8001 which outlined the voting process for how we're going to decide who gets

226
00:16:53,940 --> 00:16:57,700
to vote and decide what we're gonna do and had made an explicit list of who

227
00:16:57,700 --> 00:17:02,300
could vote on that and also they did a survey of all the other open source

228
00:17:02,300 --> 00:17:07,420
projects and ecosystems that have similar governance models and see if we

229
00:17:07,420 --> 00:17:11,180
could emulate them or learn from them in some way. There were a whole bunch of

230
00:17:11,180 --> 00:17:15,860
proposals there was a voting period where we selected one of them the one

231
00:17:15,860 --> 00:17:20,460
that was selected was announced in December of last year and that was pep

232
00:17:20,460 --> 00:17:25,140
8016 the steering council model and this was proposed by Nathaniel Smith

233
00:17:25,140 --> 00:17:30,380
and Donald Stuffed. Then we voted on who would be on that steering council and

234
00:17:30,380 --> 00:17:35,660
I'm not gonna tell you what happened because tomorrow morning the keynote is

235
00:17:35,660 --> 00:17:38,820
actually the steering council everyone that was elected to steering council is

236
00:17:38,820 --> 00:17:42,700
gonna be up on the stage doing a panel discussion moderated by Eva and

237
00:17:42,700 --> 00:17:46,620
actually even right after that if you really want to geek out about the

238
00:17:46,620 --> 00:17:51,580
governance problem Shana Gordon-McKean is gonna give a talk right afterwards in

239
00:17:51,580 --> 00:17:55,900
the first track about the new era of governance so I'll leave that to her

240
00:17:55,900 --> 00:18:01,860
it's gonna be a great talk. Let's get back to the the walrus operator so

241
00:18:01,860 --> 00:18:07,620
some more Q&A. Will this become part of Python? The answer to this is actually it

242
00:18:07,620 --> 00:18:11,380
already has so most of you probably aren't using Python 3.8 but you could be

243
00:18:11,380 --> 00:18:15,700
using right now it's in alpha. Emily Morehouse is a core developer she's

244
00:18:15,700 --> 00:18:18,940
already implemented this in 3.8 so it exists you can go and play with it today

245
00:18:18,940 --> 00:18:26,140
if you install Python 3.8. You might say I don't like it that's totally fine you

246
00:18:26,140 --> 00:18:29,900
don't have to like it if you don't like it then don't write it it's that simple

247
00:18:29,900 --> 00:18:34,140
no one is gonna force you to use the walrus operator if someone on your team

248
00:18:34,140 --> 00:18:38,180
is telling you that you should be using it then just convince them that you don't

249
00:18:38,180 --> 00:18:41,140
have to use it or that they shouldn't use it you know that's a discussion you

250
00:18:41,140 --> 00:18:45,380
need to have with your team. Another question you might have is Guido coming

251
00:18:45,380 --> 00:18:49,220
back so this kind of depends on what you mean right so like is Guido coming

252
00:18:49,220 --> 00:18:52,820
back to Python well yeah he's he's here like he's here he's gonna be there for

253
00:18:52,820 --> 00:18:58,620
us he's not actually on a vacation on a beach somewhere. Is Guido, the answer

254
00:18:58,620 --> 00:19:02,700
that's yes, is Guido gonna come back as BDFL? The answer to that is definitely no

255
00:19:02,700 --> 00:19:06,380
we have solved the governance process we found a new model we've elected new

256
00:19:06,380 --> 00:19:12,020
people to that committee and so there will no longer be a BDFL for Python. Another

257
00:19:12,020 --> 00:19:16,780
question you might have will this ever happen again and that again kind of

258
00:19:16,780 --> 00:19:21,140
depends on what you mean so maybe your question is will another pep ever be

259
00:19:21,140 --> 00:19:27,060
this controversial? I'm gonna say probably not this pep was an outlier it

260
00:19:27,060 --> 00:19:31,180
was a very small syntax change that was easily understandable by people that

261
00:19:31,180 --> 00:19:34,460
looked at they could look at it and make a decision really quickly kind of a gut

262
00:19:34,460 --> 00:19:39,180
reaction to it I think this was just the unique it was a unique pep that was

263
00:19:39,180 --> 00:19:43,500
particularly controversial however maybe your question is will people

264
00:19:43,500 --> 00:19:50,380
continue to be negative on the internet? And my answer is like I don't know I

265
00:19:50,380 --> 00:19:55,820
hope not I'd really like it if we all could learn from this and sort of just

266
00:19:55,820 --> 00:19:59,700
treat each other a little bit better and be more open and receptive to new ideas

267
00:19:59,700 --> 00:20:05,140
but so many people use Python now and for most of those people the language

268
00:20:05,140 --> 00:20:10,820
already kind of feels perfect and they don't want to change so maybe this is the

269
00:20:10,820 --> 00:20:13,420
new status quo maybe we're gonna get really upset about every time the

270
00:20:13,420 --> 00:20:19,220
language changes but I think we can work past that so come to find me after the

271
00:20:19,220 --> 00:20:22,540
talk and if you promise that you're gonna be nice on the internet I will

272
00:20:22,540 --> 00:20:26,540
happily give you one of these walrus operator stickers that that Emily

273
00:20:26,540 --> 00:20:32,220
created I'll be happy to give one to you thanks everybody

274
00:20:35,660 --> 00:20:45,620
do we have time for questions okay I'll take some questions

275
00:20:45,620 --> 00:21:06,340
please be please be sure to phrase your question as a question I mean I didn't

276
00:21:06,340 --> 00:21:09,860
know anything about this but it sounds like it's actually a good thing because

277
00:21:09,860 --> 00:21:14,380
you know keto is not going to be around forever and having a council like this

278
00:21:14,380 --> 00:21:19,060
means Python will live on beyond Gitos lifetime yeah I think we were probably

279
00:21:19,060 --> 00:21:23,700
all hoping that you know would live forever but yeah I like I said he's a

280
00:21:23,700 --> 00:21:27,140
person too so yeah yeah we had to solve this problem eventually anyway

281
00:21:27,140 --> 00:21:31,340
unfortunately it was a bit dramatic would have nice to have you know like

282
00:21:31,340 --> 00:21:35,500
actually just choose to retire than reactionary to some event but yeah it's

283
00:21:35,500 --> 00:21:39,220
a good thing that we solve this problem because we're gonna we're gonna do at

284
00:21:39,220 --> 00:21:45,700
some point anyway right thank you for the talk and the thing about there about

285
00:21:45,700 --> 00:21:49,940
having it being my birthday present but not what I expected cost that sort of

286
00:21:49,940 --> 00:21:54,060
sums up my feeling as well my question is other languages have something like

287
00:21:54,060 --> 00:21:59,940
this and Python is a continually developing language do you see more

288
00:21:59,940 --> 00:22:03,580
changes like this where Python is pulling things in from other languages or

289
00:22:03,580 --> 00:22:08,620
do you see Python as being more static and a leader in terms of what a language

290
00:22:08,620 --> 00:22:13,540
should be and therefore not changing to adopt these that's a great question so

291
00:22:13,540 --> 00:22:16,700
I'll preface that with I'm not a core developer so I'm not actually making any

292
00:22:16,700 --> 00:22:21,580
it's a value judgment sure actually it's funny when I was originally talking to

293
00:22:21,580 --> 00:22:25,780
this to someone about this pep they were like oh we should just make Python a

294
00:22:25,780 --> 00:22:29,500
standard like literally just freeze the language make it an ANSI standard and

295
00:22:29,500 --> 00:22:33,780
it just will never change and like that that's great but like Python needs to be

296
00:22:33,780 --> 00:22:37,860
able to evolve to keep up with other programming languages but also just to

297
00:22:37,860 --> 00:22:42,220
you know add new features and syntax when we find new uses for the language

298
00:22:42,220 --> 00:22:47,060
so like I said Python is being used everywhere for lots of things so yeah

299
00:22:47,060 --> 00:22:51,540
it's it's totally likely that we might you know again need to add pulling things

300
00:22:51,540 --> 00:22:54,900
to other languages make modifications and improvements the language it's it's

301
00:22:54,900 --> 00:23:01,340
still evolving thank you any other question you've still got a few minutes

302
00:23:01,340 --> 00:23:04,660
if anybody else has a question

303
00:23:07,860 --> 00:23:12,540
okay thanks everybody I'll be in the hallway afterwards

