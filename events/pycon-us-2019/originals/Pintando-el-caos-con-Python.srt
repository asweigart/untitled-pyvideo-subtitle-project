1
00:00:00,000 --> 00:00:07,280
Bueno, PyCon charleros, vamos a la tercera de la tarde.

2
00:00:07,280 --> 00:00:12,800
Tenemos el honor de tener a Isabel Ruiz desde Colombia

3
00:00:12,800 --> 00:00:16,400
pintando el caos con Python.

4
00:00:16,400 --> 00:00:17,200
Un aplauso para ella.

5
00:00:17,200 --> 00:00:22,200
Hola.

6
00:00:22,200 --> 00:00:26,360
Pues me pueden decir Isa.

7
00:00:26,360 --> 00:00:30,320
Soy de Colombia y esta charla es muy especial para mí porque

8
00:00:30,320 --> 00:00:35,040
fue como mi primer acercamiento al lenguaje Python y algo que

9
00:00:35,040 --> 00:00:37,680
supuso un cambio muy significativo en mi vida.

10
00:00:37,680 --> 00:00:41,120
Yo siempre quise ser bióloga, pero por cosas de la vida

11
00:00:41,120 --> 00:00:43,880
terminé estudiando ingeniería en sistemas.

12
00:00:43,880 --> 00:00:47,720
Durante más o menos unos 5 años trabajé desarrollando con

13
00:00:47,720 --> 00:00:50,280
PL SQL a nivel de base de datos.

14
00:00:50,280 --> 00:00:55,480
Entonces, pues ya venía desde hace mucho tiempo como aburrida

15
00:00:55,480 --> 00:00:59,600
en trabajar con pantallas negras, como que todo es tan monótono.

16
00:00:59,600 --> 00:01:04,480
Y un día buscando en internet conocí el concepto de Fractal,

17
00:01:04,480 --> 00:01:07,560
me pareció muy chévere y quise aprender a hacerlos.

18
00:01:07,560 --> 00:01:10,480
Fue mi primer acercamiento con Python y también algo que me

19
00:01:10,480 --> 00:01:13,760
ayudó mucho a desarrollar mis habilidades fue participar en

20
00:01:13,760 --> 00:01:15,080
comunidades.

21
00:01:15,080 --> 00:01:17,280
Entonces, les recomiendo mucho.

22
00:01:17,280 --> 00:01:20,240
Apoyen a las comunidades de su ciudad y compartan lo que saben

23
00:01:20,240 --> 00:01:24,160
y les aseguro que uno aprende mucho más tratando de enseñar

24
00:01:24,160 --> 00:01:29,000
a otros que leyendo o que trabajando solo.

25
00:01:29,000 --> 00:01:35,640
Entonces, pues sabemos que la naturaleza es caótica.

26
00:01:35,640 --> 00:01:39,280
Durante muchísimo tiempo se pensó que era muy difícil

27
00:01:39,280 --> 00:01:43,560
descubrir las matemáticas que estaban detrás de todas estos

28
00:01:43,560 --> 00:01:45,520
sistemas naturales.

29
00:01:45,520 --> 00:01:52,320
Pero resulta que realmente no es algo tan complejo y era algo

30
00:01:52,320 --> 00:01:54,960
que desde hace mucho tiempo muchos diferentes matemáticos

31
00:01:54,960 --> 00:01:56,400
venían planteando.

32
00:01:56,400 --> 00:02:01,000
Pero no fue sino hasta 1975 que el matemático polaco Benoit

33
00:02:01,000 --> 00:02:05,880
Mandelbrot condensó todo este conocimiento en un concepto que

34
00:02:05,880 --> 00:02:07,760
se llama Fractal.

35
00:02:07,760 --> 00:02:11,760
Un Fractal es básicamente una figura irregular que se puede

36
00:02:11,760 --> 00:02:15,760
dividir en diferentes escalas y cada una de estas escalas es

37
00:02:15,760 --> 00:02:21,360
algo muy semejante al conjunto entero y lo puede hacer de manera

38
00:02:21,360 --> 00:02:21,960
infinita.

39
00:02:21,960 --> 00:02:30,080
Entonces, hay tres características importantes

40
00:02:30,080 --> 00:02:33,960
que debe cumplir una figura para considerarse Fractal.

41
00:02:33,960 --> 00:02:37,000
La primera es la autosimilitud.

42
00:02:37,000 --> 00:02:40,480
Pero no es la única porque hay muchas figuras que son similares,

43
00:02:40,480 --> 00:02:45,440
pero no representan mayor complejidad.

44
00:02:45,440 --> 00:02:49,800
La segunda característica fundamental es que esta forma es

45
00:02:49,800 --> 00:02:53,400
demasiado irregular o demasiado compleja para ser descrita en

46
00:02:53,400 --> 00:02:58,760
los términos de geométricos tradicionales y por eso este

47
00:02:58,760 --> 00:03:01,400
matemático inventó un nuevo concepto que se llama Dimensión

48
00:03:01,400 --> 00:03:02,400
Fractal.

49
00:03:02,400 --> 00:03:05,360
Básicamente es una figura que está entre el primer plano y el

50
00:03:05,360 --> 00:03:06,600
segundo plano.

51
00:03:06,640 --> 00:03:13,280
Entonces, la Dimensión Fractal es un número racional que tiende

52
00:03:13,280 --> 00:03:16,360
a estar como un intermedio entre estos dos espacios.

53
00:03:16,360 --> 00:03:22,960
Por ejemplo, hay figuras que son, yo las puedo ir como abriendo,

54
00:03:22,960 --> 00:03:25,080
abriendo y abriendo, como que les voy quitando espacio,

55
00:03:25,080 --> 00:03:28,000
entonces al final pareciera que no tuvieran área.

56
00:03:28,000 --> 00:03:32,200
Pero sí están ocupando un espacio, cosas de ese estilo.

57
00:03:32,200 --> 00:03:35,360
Y la tercera característica que está implícita en el mismo

58
00:03:35,360 --> 00:03:38,080
nombre es la recursividad.

59
00:03:38,080 --> 00:03:42,480
Es decir, yo puedo hacer múltiples iteraciones para

60
00:03:42,480 --> 00:03:46,600
obtener un resultado y lo más curioso de los fractales es que

61
00:03:46,600 --> 00:03:50,000
a pesar de que son figuras tan complicadas a simple vista,

62
00:03:50,000 --> 00:03:52,480
las matemáticas que hay detrás son muy sencillas,

63
00:03:52,480 --> 00:03:55,080
son generalmente una función que está definida en términos de

64
00:03:55,080 --> 00:03:58,360
sí mismo y que la voy iterando.

65
00:03:58,360 --> 00:04:06,680
Entonces, el primer reto que mostraron los fractales es que

66
00:04:06,680 --> 00:04:09,440
presentaron, perdón, es cómo medir esta forma.

67
00:04:09,440 --> 00:04:14,520
Entonces, un ejemplo clásico es la costa de Gran Bretaña.

68
00:04:14,520 --> 00:04:16,680
Entre más nivel de detalle tenga yo,

69
00:04:16,680 --> 00:04:21,400
pues más larga va a ser la medición que haga alrededor de

70
00:04:21,400 --> 00:04:22,480
la figura.

71
00:04:22,480 --> 00:04:26,760
Es decir, más lejos va a llegar mi longitud.

72
00:04:26,760 --> 00:04:31,040
Entonces, por eso los fractales son una forma, digamos,

73
00:04:31,040 --> 00:04:35,720
muy chévere de poder describir estas figuras.

74
00:04:35,720 --> 00:04:40,240
Y ya más adelante vamos a ver otras aplicaciones muy útiles.

75
00:04:40,240 --> 00:04:44,160
Y la última característica que les mencionaba que es la

76
00:04:44,160 --> 00:04:47,280
recursividad, que es el proceso mediante el cual una función se

77
00:04:47,280 --> 00:04:48,080
llama sí misma.

78
00:04:48,080 --> 00:04:51,840
Este es un concepto básico y clave en la mayoría de

79
00:04:51,840 --> 00:04:53,720
lenguajes de programación.

80
00:04:53,800 --> 00:04:57,000
Y nos ayuda a resolver de forma muy simple una infinidad de

81
00:04:57,000 --> 00:04:58,080
problemas.

82
00:04:58,080 --> 00:05:00,920
Pero hay dos cosas que deben tenerse muy en cuenta cuando

83
00:05:00,920 --> 00:05:03,040
aplicamos el concepto de recursividad.

84
00:05:03,040 --> 00:05:06,400
Y es que yo necesito un caso base que al mismo tiempo es mi

85
00:05:06,400 --> 00:05:07,840
condición de parada.

86
00:05:07,840 --> 00:05:12,520
Y sobre ese caso base es que voy haciendo el llamado recursivo.

87
00:05:12,520 --> 00:05:16,320
Entonces, por ejemplo, tengo la función de Fionnaging que lo

88
00:05:16,320 --> 00:05:20,480
que me dice es, si este número es menor a 1,

89
00:05:20,480 --> 00:05:22,760
entonces retorno el número.

90
00:05:22,760 --> 00:05:26,440
Es decir, esa es mi última condición,

91
00:05:26,440 --> 00:05:28,000
esa es mi caso base.

92
00:05:28,000 --> 00:05:31,920
Y si no, entonces el total de Fionnaging es la entrada

93
00:05:31,920 --> 00:05:37,160
anterior más el resultado de las dos últimas entradas.

94
00:05:37,160 --> 00:05:39,080
Entonces, abajo vamos bien.

95
00:05:39,080 --> 00:05:43,480
Entonces, para 1 me devuelve 1, para 1 me devuelve 2.

96
00:05:43,480 --> 00:05:46,600
Para el 2, entonces, es la suma de los dos últimos.

97
00:05:46,600 --> 00:05:48,080
Entonces, 0 y 1, 2.

98
00:05:48,080 --> 00:05:52,280
Y así voy construyendo mi sucesión.

99
00:05:52,280 --> 00:05:55,320
Pero si yo no tuviera esta condición de parada bien

100
00:05:55,320 --> 00:05:58,920
especificada, entonces lo que tendría es lo que se conoce como

101
00:05:58,920 --> 00:06:03,080
un error de recursión o una llamada circular,

102
00:06:03,080 --> 00:06:05,280
que es que esa función no sabe cuándo parar.

103
00:06:05,280 --> 00:06:08,480
Y básicamente lo que estás haciendo es reventando la

104
00:06:08,480 --> 00:06:09,280
memoria del computador.

105
00:06:09,280 --> 00:06:13,320
Como que se va a quedar ahí de forma infinita.

106
00:06:13,320 --> 00:06:15,360
Bueno.

107
00:06:15,360 --> 00:06:17,560
Hay muchas formas de dibujar fractales.

108
00:06:17,560 --> 00:06:20,800
Hay unas librerías que son más sencillas que otras.

109
00:06:20,840 --> 00:06:25,520
Cuando yo empecé a buscar, pues como no sabía casi de Python,

110
00:06:25,520 --> 00:06:29,200
como que la primera que vi fue Turtool,

111
00:06:29,200 --> 00:06:31,920
que es muy sencilla y muy accesible.

112
00:06:31,920 --> 00:06:34,200
También es una librería que se utiliza mucho para enseñar a

113
00:06:34,200 --> 00:06:36,000
los niños lo que es la programación.

114
00:06:36,000 --> 00:06:39,320
Yo tengo mi tortuguita que está en un plano y le voy dando unas

115
00:06:39,320 --> 00:06:42,160
indicaciones para que la tortuguita se mueva hacia la

116
00:06:42,160 --> 00:06:43,880
izquierda, hacia la derecha, gire, baje.

117
00:06:43,880 --> 00:06:46,360
Y entonces ahí voy remando mi figura.

118
00:06:46,360 --> 00:06:49,320
Pero hay otras que son más complejas como Mapplot que me

119
00:06:49,320 --> 00:06:53,840
permite crear gráficos, iterar sobre esos gráficos,

120
00:06:53,840 --> 00:07:00,920
darles muchos aspectos como título, escala, coordenada.

121
00:07:00,920 --> 00:07:03,880
Y es muy utilizado en lo que es la ciencia de datos.

122
00:07:03,880 --> 00:07:08,560
NumPy nos permite generar números complejos que también es

123
00:07:08,560 --> 00:07:09,520
muy útil.

124
00:07:09,520 --> 00:07:11,800
Podría también utilizar la función random,

125
00:07:11,800 --> 00:07:14,240
pero ya más adelante les explico por qué el tema de los

126
00:07:14,240 --> 00:07:15,680
números complejos.

127
00:07:15,720 --> 00:07:18,880
Y NumPy en este caso es una librería que me permite

128
00:07:18,880 --> 00:07:22,000
precompilar código Python y entonces me ayuda a que la

129
00:07:22,000 --> 00:07:24,640
generación de esos fractales se haga de forma más rápida.

130
00:07:28,760 --> 00:07:30,800
El primer ejemplo que les quiero mostrar es el árbol de

131
00:07:30,800 --> 00:07:32,200
Pitágoras.

132
00:07:32,200 --> 00:07:36,000
Y aquí vamos a ver muy claro el concepto de recursos.

133
00:07:36,000 --> 00:07:41,440
Yo tengo un cuadrado y mi primera iteración es sobre la

134
00:07:41,440 --> 00:07:45,040
cima de esos cuadrados voy a pintar otros dos inclinados.

135
00:07:45,040 --> 00:07:47,320
Sobre esos otros dos voy a pintar otros dos cuadrados

136
00:07:47,320 --> 00:07:51,440
inclinados y así voy y voy haciéndolo hasta que lo llego

137
00:07:51,440 --> 00:07:53,160
a lo que es un árbol.

138
00:07:53,160 --> 00:07:57,520
Pero como sabemos que en la vida real las cosas no son tan

139
00:07:57,520 --> 00:08:02,520
estáticas, yo le puedo colocar un poco de variación y entonces

140
00:08:02,520 --> 00:08:04,840
puedo empezar a tener figuras que ya son mucho más realistas

141
00:08:04,840 --> 00:08:07,800
como por ejemplo este árbol donde simplemente le cambié el

142
00:08:07,800 --> 00:08:12,000
color, la profundidad y el ancho de las ramas y después de

143
00:08:12,000 --> 00:08:14,000
muchas iteraciones entonces puedo llegar a tener estos

144
00:08:14,000 --> 00:08:15,520
resultados.

145
00:08:15,520 --> 00:08:21,280
O algo si lo quiero hacer un poco más cercano a la realidad

146
00:08:21,280 --> 00:08:26,240
entonces puedo seguir cambiando pues el largo, el ancho,

147
00:08:26,240 --> 00:08:29,160
profundidad, el color de las hojas.

148
00:08:29,160 --> 00:08:32,440
Entonces, por ejemplo, para hacer un árbol,

149
00:08:32,440 --> 00:08:37,000
una primera aproximación de un árbol con Matplot y utilizando

150
00:08:37,000 --> 00:08:41,960
la librería Mat pues podemos tener una función que necesita

151
00:08:42,000 --> 00:08:47,960
un punto, un x1 y un y1, un ángulo que es cuánto voy a girar

152
00:08:47,960 --> 00:08:52,960
cada punto y una profundidad para saber hasta qué nivel voy a

153
00:08:52,960 --> 00:08:54,880
estarlo dibujando.

154
00:08:54,880 --> 00:08:58,600
Entonces, básicamente lo que hago aquí es mi profundidad

155
00:08:58,600 --> 00:09:04,640
sería mi primera condición entonces de acuerdo a eso y al

156
00:09:04,640 --> 00:09:08,520
punto inicial de entrada pues entonces calculo el punto

157
00:09:08,520 --> 00:09:13,920
siguiente que es el x2 y el y2 y así lo voy iterando y en cada

158
00:09:13,920 --> 00:09:16,840
iteración o sea después del primer punto entonces hago un

159
00:09:16,840 --> 00:09:19,400
llamado recurso y voy a esa función y voy variando el

160
00:09:19,400 --> 00:09:21,440
ángulo y variando la profundidad y eso lo que me

161
00:09:21,440 --> 00:09:25,480
hace es generar primero el lado izquierdo y luego genero el lado

162
00:09:25,480 --> 00:09:31,520
derecho y pues abajo son ya líneas de código propias de la

163
00:09:31,520 --> 00:09:35,080
librería para que la figurada pues ocupe cierto espacio para

164
00:09:35,120 --> 00:09:38,200
definir el color, el título que le puse arriba y luego ya

165
00:09:38,200 --> 00:09:39,200
muestra la figura.

166
00:09:39,200 --> 00:09:46,440
Entonces hay muchísimos fractales muy conocidos hoy les

167
00:09:46,440 --> 00:09:50,800
quiero pues mostrar los dos primeros que es el conjunto de

168
00:09:50,800 --> 00:09:54,800
Cantor y el triángulo de Sierpinski desde diferentes

169
00:09:54,800 --> 00:09:56,680
enfoques.

170
00:09:56,680 --> 00:10:00,040
Entonces lo primero que necesitamos para conocer para

171
00:10:00,040 --> 00:10:03,000
dibujar un fractal ya después de conocer las características es

172
00:10:03,000 --> 00:10:06,680
encontrar el paso a paso de cómo hacer esto porque es eso,

173
00:10:06,680 --> 00:10:08,880
este paso a paso es mi caso base y eso es lo que va a estar

174
00:10:08,880 --> 00:10:09,720
repitiendo.

175
00:10:09,720 --> 00:10:13,000
Entonces esto es muy sencillo, entonces yo digo una línea,

176
00:10:13,000 --> 00:10:16,440
la dio en tres partes y borro el segmento a la mitad y así una

177
00:10:16,440 --> 00:10:19,560
y otra vez con cada segmento que me quedo.

178
00:10:19,560 --> 00:10:23,320
Si yo fuera a escribir esto a pasito nada más para las la

179
00:10:23,320 --> 00:10:27,200
primera iteración tendría que escribir línea por línea y si

180
00:10:27,200 --> 00:10:30,120
quiero más profundidad y más profundidad pues se vuelve una

181
00:10:30,120 --> 00:10:34,360
tarea muy compleja o no tanto lo complejo sino lo repetitivo y

182
00:10:34,360 --> 00:10:38,320
largo porque pues simplemente estoy dibujando líneas y

183
00:10:38,320 --> 00:10:41,720
moviendo mi punto inicial y mi punto final.

184
00:10:41,720 --> 00:10:44,880
Pero entonces si yo utilizo por ejemplo la librería de

185
00:10:44,880 --> 00:10:50,280
Kinter que lo que me permite es dibujar en un canvas al que yo

186
00:10:50,280 --> 00:10:53,680
le doy una altura y un ancho, entonces yo le estoy diciendo

187
00:10:53,680 --> 00:10:59,920
sobre ese canvas, dibújeme una línea de esta x y esta y

188
00:10:59,920 --> 00:11:04,320
entrada con este largo y vaya iterándolo y vaya moviendo y en

189
00:11:04,320 --> 00:11:08,280
cada iteración entonces dibujo el lado derecho que es un tercio

190
00:11:08,280 --> 00:11:12,320
de esa línea o dibujo el lado izquierdo que es moverla desde

191
00:11:12,320 --> 00:11:15,560
los dos tercios hasta el final de la línea y miren que pues el

192
00:11:15,560 --> 00:11:20,200
código es mucho más claro, más bonito y es algo muy

193
00:11:20,200 --> 00:11:27,400
entretendido y pues puedo ponerme a jugar con la posición de

194
00:11:27,400 --> 00:11:30,920
los puntos y pues crear mis propios fractales o mis propias

195
00:11:30,920 --> 00:11:31,920
figuritas.

196
00:11:35,120 --> 00:11:39,360
Lo mismo sucede para el triángulo de Sierpinski que es lo que les

197
00:11:39,360 --> 00:11:44,560
comentaba ahorita, a esta figura yo le estoy quitando espacio y

198
00:11:44,560 --> 00:11:48,920
después de muchas iteraciones pareciera que fuera una coca

199
00:11:48,920 --> 00:11:53,720
vacía entonces ahí es donde estaba la complejidad para

200
00:11:53,720 --> 00:11:56,520
calcular el área de esta figura con una geometría normal.

201
00:11:58,520 --> 00:12:04,400
Y de nuevo, yo aquí utilicé otra librería que es Turtel, como

202
00:12:04,400 --> 00:12:09,160
les contaba, entonces yo estoy dibujando ese triángulo y

203
00:12:09,160 --> 00:12:14,040
solamente necesito un lado que es más básicamente desde donde voy

204
00:12:14,040 --> 00:12:17,080
a empezar y el nivel que es el número de iteraciones que

205
00:12:17,080 --> 00:12:19,240
quiero hacer para esa figura.

206
00:12:19,240 --> 00:12:24,480
Le doy un color, les digo como lléneme ese color y entonces en

207
00:12:24,480 --> 00:12:31,160
este ejemplo dibujé un triángulo,

208
00:12:31,160 --> 00:12:38,040
es este que está acá, de más de nueve niveles y pues aquí está

209
00:12:38,040 --> 00:12:41,800
el paso a paso con mi tortuguita que es otra versión diferente,

210
00:12:41,800 --> 00:12:44,120
puedo también hacerlo con Maple o puedo también hacerlo con

211
00:12:44,160 --> 00:12:49,080
De Kinter, digamos ya es lo que con lo que se sienta más común.

212
00:12:49,080 --> 00:12:52,440
En mi caso, como les contaba, yo lo hice fue por curiosidad,

213
00:12:52,440 --> 00:12:57,000
entonces fue como quiero ver de cuántas formas puedo hacer esto

214
00:12:57,000 --> 00:13:00,760
y unas son infinitamente mucho más simples que otras.

215
00:13:03,280 --> 00:13:08,960
Pero de nuevo, pues los fractales, solo estas figuras,

216
00:13:08,960 --> 00:13:12,480
hay unas que son muy simples y otras que son muy complejas.

217
00:13:12,520 --> 00:13:17,360
Entonces, en este guide les muestro lo que es el fractal más

218
00:13:17,360 --> 00:13:19,520
famoso o el que hizo famosa este señor,

219
00:13:19,520 --> 00:13:22,360
que son el conjunto de Julia y el conjunto de Mandelbrot.

220
00:13:22,360 --> 00:13:23,520
Entonces, ¿qué pasa?

221
00:13:23,520 --> 00:13:25,840
Yo tengo una figura y a medida que le voy haciendo una esa

222
00:13:25,840 --> 00:13:31,280
figura, la veo repetirse a diferentes escalas y eso se hace

223
00:13:31,280 --> 00:13:33,920
de forma infinita.

224
00:13:33,920 --> 00:13:36,800
Y ahora les explico lo de los números complejos,

225
00:13:36,800 --> 00:13:38,440
entonces, ¿qué pasa?

226
00:13:38,440 --> 00:13:40,800
Yo defino una función que es z más 1,

227
00:13:40,960 --> 00:13:44,880
mi siguiente número es igual al cuadrado anterior más c.

228
00:13:44,880 --> 00:13:49,840
C es un número complejo sobre el que yo estoy iterando.

229
00:13:49,840 --> 00:13:52,200
Entonces, recordemos que el número complejo está compuesto

230
00:13:52,200 --> 00:13:53,960
en una parte real, una parte imaginaria,

231
00:13:53,960 --> 00:13:58,080
entonces, la traducción es que eso básicamente termina

232
00:13:58,080 --> 00:14:00,440
haciendo una coordenada en un plano,

233
00:14:00,440 --> 00:14:02,040
termina haciendo un punto.

234
00:14:02,040 --> 00:14:07,280
Entonces, digamos que la genialidad del Mandelbrot fue

235
00:14:07,320 --> 00:14:13,000
hacer que en cada cambio de sucesión él pintaba la

236
00:14:13,000 --> 00:14:15,240
frontera de un color diferente.

237
00:14:15,240 --> 00:14:18,360
Entonces, por eso fue que empezaron a ver las formas que

238
00:14:18,360 --> 00:14:21,520
eran mucho más estratas porque, pues, es muy difícil imaginarse

239
00:14:21,520 --> 00:14:27,640
una figura negra como que no da mucho nivel de detalle.

240
00:14:27,640 --> 00:14:30,200
Mientras que si yo voy variando el color en la frontera,

241
00:14:30,200 --> 00:14:33,760
entonces, pues, ya empiezo a ver todas las variaciones y todos

242
00:14:33,760 --> 00:14:35,800
los detalles y la profundidad que puedo meterle ahí.

243
00:14:38,720 --> 00:14:44,440
En este caso, lo dibujo utilizando Matplot, NumPy y Numba.

244
00:14:44,440 --> 00:14:48,080
Matplot, como les comentaba, la librería enfocada en ciencia

245
00:14:48,080 --> 00:14:50,360
datos que me permite generar gráficas.

246
00:14:50,360 --> 00:14:53,040
NumPy lo estoy utilizando para generar un conjunto de números

247
00:14:53,040 --> 00:14:59,800
complejos que me permitan llenar la información de este fractal.

248
00:14:59,800 --> 00:15:03,080
Numba es para que no se demore tanto al hacerlo como una

249
00:15:03,080 --> 00:15:05,280
especie de precompilado.

250
00:15:05,280 --> 00:15:10,200
Y también hay otra cosa que tiene Matplot que es muy chévere

251
00:15:10,200 --> 00:15:13,520
y es la librería nos da también una gama de colores que

252
00:15:13,520 --> 00:15:15,000
podemos utilizar.

253
00:15:15,000 --> 00:15:17,760
Y, entonces, dependiendo de lo que yo quiera hacer,

254
00:15:17,760 --> 00:15:20,760
pues, puedo tener diferentes figuras.

255
00:15:20,760 --> 00:15:23,760
Es el mismo código para todos.

256
00:15:23,760 --> 00:15:27,560
Lo único que yo le estoy variando es la entrada, o sea,

257
00:15:27,560 --> 00:15:31,520
el punto C y la gama de color.

258
00:15:31,520 --> 00:15:35,680
Entonces, aquí les coloco algunos ejemplos.

259
00:15:35,680 --> 00:15:38,960
Pero para llegar a esto, digamos que hice muchas iteraciones y

260
00:15:38,960 --> 00:15:40,320
combinaciones de colores.

261
00:15:40,320 --> 00:15:45,040
Hay algunos colores que no se mezclaban bien con diferentes

262
00:15:45,040 --> 00:15:45,720
formas.

263
00:15:45,720 --> 00:15:48,280
Por ejemplo, la figura de la mitad.

264
00:15:48,280 --> 00:15:51,880
Si yo utilizaba una gama donde tuviera diferentes tonos,

265
00:15:51,880 --> 00:15:55,120
entre morado, azul, rojo, amarillo,

266
00:15:55,120 --> 00:15:56,880
como que no se veía bien la profundidad.

267
00:15:56,880 --> 00:15:59,520
Mientras que si utilizaba una gama que fuera el mismo color en

268
00:15:59,520 --> 00:16:02,640
diferentes escalas, entonces, ya podía representar lo mejor.

269
00:16:05,360 --> 00:16:09,440
Bueno, como les contaba, los fractales en sus inicios

270
00:16:09,440 --> 00:16:12,400
fueron muy utilizados para realizar animaciones de

271
00:16:12,400 --> 00:16:13,120
computadoras.

272
00:16:13,120 --> 00:16:15,400
Los primeros en utilizarlo fueron Pizzar.

273
00:16:15,400 --> 00:16:18,800
Ellos lo hicieron para generar paisajes.

274
00:16:18,800 --> 00:16:20,720
También se utilizó mucho en videojuegos.

275
00:16:20,720 --> 00:16:24,040
Un ejemplo de aplicación de la vida real fue la primera

276
00:16:24,040 --> 00:16:27,760
película de Star Trek, donde los fractales se utilizaron para

277
00:16:27,760 --> 00:16:32,320
diseñar todo el paisaje de los planetas.

278
00:16:32,320 --> 00:16:35,560
Y también entre las otras aplicaciones que destacan está el

279
00:16:35,560 --> 00:16:41,960
que cuando un circuito se construye de manera fractal,

280
00:16:41,960 --> 00:16:46,160
la señal alcanza a tener una mayor longitud.

281
00:16:46,160 --> 00:16:49,840
O sea, llega más lejos y la figura está ocupando menos

282
00:16:49,840 --> 00:16:50,640
espacio.

283
00:16:50,640 --> 00:16:52,080
¿Y esto por qué es tan importante?

284
00:16:52,080 --> 00:16:53,480
Porque sabemos que los circuitos,

285
00:16:53,720 --> 00:16:58,480
tienen oro para que la electricidad circule bien.

286
00:16:58,480 --> 00:17:02,400
Y entonces, mientras menos oro gaste, pues más barato.

287
00:17:02,400 --> 00:17:05,040
También lo vemos en el arte.

288
00:17:05,040 --> 00:17:09,840
Salvador Dalí pintó el rostro de la guerra.

289
00:17:09,840 --> 00:17:13,480
Y el artista japonés Hokusai pintó la granola,

290
00:17:13,480 --> 00:17:19,320
que ambas figuras, pues es la misma figura,

291
00:17:19,320 --> 00:17:22,800
pero a diferentes escalas y a diferente profundidad.

292
00:17:22,800 --> 00:17:26,280
Esos son solamente algunos ejemplos, hay muchos más.

293
00:17:26,280 --> 00:17:28,840
También se ha utilizado para medicina,

294
00:17:28,840 --> 00:17:33,080
para medir las variaciones de los latidos del corazón o para

295
00:17:33,080 --> 00:17:36,760
finanzas para saber dónde podría haber una alteración si la

296
00:17:36,760 --> 00:17:40,080
figura se sale del patrón.

297
00:17:40,080 --> 00:17:41,520
Les dejé un repositorio.

298
00:17:41,520 --> 00:17:46,800
Tienen muchos ejemplos de muchas fractales de diferentes formas.

299
00:17:46,800 --> 00:17:51,920
Digamos, puedo tener el de Julia tres o cuatro veces.

300
00:17:51,920 --> 00:17:55,840
Y bueno, también quería darle las gracias a Pailadies,

301
00:17:55,840 --> 00:17:58,560
a las Pankun charlas por tener este espacio.

302
00:17:58,560 --> 00:18:01,320
Y no se olviden la subasta de caridad de Pailadies este sábado

303
00:18:01,320 --> 00:18:04,320
a las 6.30.

304
00:18:04,320 --> 00:18:04,820
Pues bueno.

305
00:18:04,820 --> 00:18:05,320
Así está.

306
00:18:05,320 --> 00:18:15,880
Y si alguien tiene preguntas, si no, bueno.

307
00:18:15,880 --> 00:18:17,640
O algún comentario si no les gustó.

308
00:18:17,640 --> 00:18:19,240
No sé si les gustó.

309
00:18:19,240 --> 00:18:20,680
Espero no haberlos aburrido.

310
00:18:20,680 --> 00:18:25,800
Sé que omití muchos detalles a nivel de matemáticas porque es

311
00:18:25,800 --> 00:18:27,840
un poco complejo.

312
00:18:27,840 --> 00:18:31,360
Y pues la idea es que si es un primer acercamiento al lenguaje,

313
00:18:31,360 --> 00:18:35,240
sea algo ameno, algo agradable y algo que llame la atención.

314
00:18:35,240 --> 00:18:37,240
¿Qué es lo que ocupas para tu trabajo?

315
00:18:37,240 --> 00:18:37,720
¿Cómo?

316
00:18:47,720 --> 00:18:48,220
Caos.

317
00:18:48,220 --> 00:18:49,720
Caos.

318
00:18:49,720 --> 00:18:55,360
Mi pregunta era si ocupas esto de fractal en tu trabajo,

319
00:18:55,360 --> 00:18:57,360
si tienes, pues, las aplicaciones.

320
00:18:57,360 --> 00:19:00,760
¿Has podido encontrar alguna aplicación para?

321
00:19:00,760 --> 00:19:01,520
No.

322
00:19:01,520 --> 00:19:03,360
Yo soy de LOPAC.

323
00:19:04,120 --> 00:19:06,360
Yo soy developer con Django.

324
00:19:06,360 --> 00:19:08,680
No trabajo nada.

325
00:19:08,680 --> 00:19:11,240
Pero entonces de interés.

326
00:19:11,240 --> 00:19:12,280
La historia fue así.

327
00:19:12,280 --> 00:19:16,680
Yo en las clases de, bueno, en mi universidad todo era Java.

328
00:19:16,680 --> 00:19:17,800
Java para todo.

329
00:19:17,800 --> 00:19:18,720
O C++.

330
00:19:18,720 --> 00:19:21,280
Pues ambos lenguajes, digamos, no tengo quejas,

331
00:19:21,280 --> 00:19:25,280
pero es como que no nos enseñaban más cosas.

332
00:19:25,280 --> 00:19:26,920
Y en una clase de computación gráfica,

333
00:19:26,920 --> 00:19:31,360
como en el séptimo semestre, un profesor nos mencionó Python

334
00:19:31,360 --> 00:19:34,560
y nos dijo cómo pueden hacer tales figuras con Python.

335
00:19:34,560 --> 00:19:39,280
Pero fue como muy casual porque las clases de computación

336
00:19:39,280 --> 00:19:42,480
gráfica las vimos con OpenCV, que es en C++.

337
00:19:42,480 --> 00:19:44,800
Entonces, como que ahí me quedó la duda.

338
00:19:44,800 --> 00:19:47,440
Y ya mucho tiempo después fue que lo busqué y dije,

339
00:19:47,440 --> 00:19:48,840
ah, está chévere.

340
00:19:48,840 --> 00:19:49,340
Y ya.

341
00:19:56,200 --> 00:19:58,080
Pues si les da curiosidad al tema,

342
00:19:58,080 --> 00:20:01,040
les dejo algunos recursos que me ayudaron mucho

343
00:20:01,120 --> 00:20:04,040
a aclarar muchos conceptos.

344
00:20:04,040 --> 00:20:06,040
Y eso es todo.

345
00:20:06,040 --> 00:20:06,520
[?

346
00:20:06,520 --> 00:20:09,880
Aplausos. ?]

