1
00:00:00,000 --> 00:00:01,440
Make big noise for Terry.

2
00:00:01,440 --> 00:00:04,200
He's going to tell us how we can have better Python security

3
00:00:04,200 --> 00:00:04,700
tools.

4
00:00:04,700 --> 00:00:16,640
So this talk is for anyone who's ever done this search.

5
00:00:16,640 --> 00:00:18,780
And if you haven't done this search lately,

6
00:00:18,780 --> 00:00:22,280
let me remind you as to what it looks like.

7
00:00:22,280 --> 00:00:26,100
You get a bunch of maybe not the most useful results,

8
00:00:26,100 --> 00:00:28,680
like how to hide your source code, which

9
00:00:28,680 --> 00:00:30,080
is a type of security.

10
00:00:30,080 --> 00:00:32,160
As an open source person, it's not my favorite type

11
00:00:32,160 --> 00:00:34,560
of security, but it's a problem that people have.

12
00:00:34,560 --> 00:00:38,640
You get that dude who answers every question about security

13
00:00:38,640 --> 00:00:40,000
to say, oh, I just use PyLint.

14
00:00:40,000 --> 00:00:42,880
It's fine.

15
00:00:42,880 --> 00:00:45,160
Or you get, when you're asked around in your company

16
00:00:45,160 --> 00:00:47,520
or whatever, you get the response that, well,

17
00:00:47,520 --> 00:00:48,880
Python's inherently secure.

18
00:00:48,880 --> 00:00:50,320
It doesn't have buffer overflows,

19
00:00:50,320 --> 00:00:52,440
so you don't need any of that crap.

20
00:00:52,440 --> 00:00:56,240
Maybe you should just use PyLint.

21
00:00:56,240 --> 00:00:59,240
So none of that is really super useful

22
00:00:59,240 --> 00:01:01,680
to answer your question, unless what you were really

23
00:01:01,680 --> 00:01:04,040
deep in your heart of hearts hoping for

24
00:01:04,040 --> 00:01:06,440
was that the answer was that Python was perfect.

25
00:01:06,440 --> 00:01:08,120
Everything was solved, and you did not

26
00:01:08,120 --> 00:01:10,640
have to do any more work before you released your product.

27
00:01:10,640 --> 00:01:12,520
Which I admit, like there's a lot of people in this room

28
00:01:12,520 --> 00:01:13,800
who are very big Python advocates.

29
00:01:13,800 --> 00:01:15,640
I want to believe that everything is perfect

30
00:01:15,640 --> 00:01:17,840
and we can move on.

31
00:01:17,840 --> 00:01:20,720
But as a security person, I'm not super

32
00:01:20,720 --> 00:01:22,280
comfortable with that feeling.

33
00:01:22,280 --> 00:01:23,880
And that's the reason that I don't even

34
00:01:23,880 --> 00:01:26,400
like some of the results that are maybe useful.

35
00:01:26,400 --> 00:01:30,000
So up on that first page, you'll see some links

36
00:01:30,000 --> 00:01:33,560
about how we've done work to secure the Python interpreter,

37
00:01:33,560 --> 00:01:37,120
which is great if you are a Python developer, a CPython,

38
00:01:37,120 --> 00:01:38,640
or PyPy developer.

39
00:01:38,640 --> 00:01:41,600
And if you're not, you might think, well, oh, all

40
00:01:41,600 --> 00:01:43,440
the problems have been solved in the interpreter.

41
00:01:43,440 --> 00:01:43,940
I'm done.

42
00:01:43,940 --> 00:01:44,960
We're good.

43
00:01:44,960 --> 00:01:47,680
And similarly, there's some nice links from OWASP

44
00:01:47,680 --> 00:01:49,840
on how to secure your Python web application.

45
00:01:50,280 --> 00:01:53,280
And again, that's great if that's what you're doing.

46
00:01:53,280 --> 00:01:57,520
And sometimes you'll go, oh, well, I'm a data scientist.

47
00:01:57,520 --> 00:02:00,200
As of last year, half of our population

48
00:02:00,200 --> 00:02:01,960
is filled with data scientists.

49
00:02:01,960 --> 00:02:05,120
So that's a lot of people here.

50
00:02:05,120 --> 00:02:07,680
And if you see, well, you only need security for your web

51
00:02:07,680 --> 00:02:10,520
application, then you're like, I'm a scientist.

52
00:02:10,520 --> 00:02:11,360
I'm done.

53
00:02:11,360 --> 00:02:12,560
We're good.

54
00:02:12,560 --> 00:02:15,320
So none of that makes me super comfortable either.

55
00:02:15,720 --> 00:02:20,600
So none of that makes me super comfortable either.

56
00:02:20,600 --> 00:02:24,280
So why should you listen to me?

57
00:02:24,280 --> 00:02:29,080
I mean, I'm hoping you think that the PyCon community

58
00:02:29,080 --> 00:02:31,560
wouldn't choose someone incompetent to talk to you.

59
00:02:31,560 --> 00:02:33,880
But I'm Dr. Terry Oda.

60
00:02:33,880 --> 00:02:35,840
I have a PhD in horribleness, by which

61
00:02:35,840 --> 00:02:38,600
I'm in computer security, which is actually kind of horrible.

62
00:02:38,600 --> 00:02:42,040
I specialize in web security, so not Python at all.

63
00:02:42,040 --> 00:02:45,080
But the reason you should trust me

64
00:02:45,080 --> 00:02:46,760
is not that I have an academic degree.

65
00:02:46,760 --> 00:02:48,320
There's lots of people in this room

66
00:02:48,320 --> 00:02:49,400
who have academic degrees.

67
00:02:49,400 --> 00:02:51,680
I know quite a few of you.

68
00:02:51,680 --> 00:02:55,120
The reason you should feel that I have useful opinions for you

69
00:02:55,120 --> 00:03:00,800
is that I've spent most of my adult life focused on security,

70
00:03:00,800 --> 00:03:06,880
but also that I've spent many years now working in industry

71
00:03:06,880 --> 00:03:10,480
at doing open source security for Intel.

72
00:03:10,480 --> 00:03:13,200
I imagine most of you in this room are familiar with Intel.

73
00:03:13,200 --> 00:03:15,000
You may have a processor in your laptop

74
00:03:15,000 --> 00:03:17,920
right now that comes from us.

75
00:03:17,920 --> 00:03:20,160
We make most of our money off of hardware.

76
00:03:20,160 --> 00:03:22,800
But hardware is no good if it doesn't have good software.

77
00:03:22,800 --> 00:03:24,760
And so we do a lot of open source work.

78
00:03:24,760 --> 00:03:27,440
And it's my job to make sure that our open source work

79
00:03:27,440 --> 00:03:28,640
is good before it goes out.

80
00:03:28,640 --> 00:03:30,280
I'm not the only one who does this.

81
00:03:30,280 --> 00:03:32,560
I focus on a couple of different areas.

82
00:03:32,560 --> 00:03:38,000
But I go through probably 10 to 20 projects a year

83
00:03:38,000 --> 00:03:40,760
from beginning to end, helping them with their security,

84
00:03:40,760 --> 00:03:44,240
helping them with working on their privacy policies,

85
00:03:44,240 --> 00:03:46,520
making sure they do good code review,

86
00:03:46,520 --> 00:03:51,440
and understanding what makes security hard for them, what

87
00:03:51,440 --> 00:03:52,960
can make security better for them,

88
00:03:52,960 --> 00:03:56,440
and what sort of things we're doing right and wrong.

89
00:03:56,440 --> 00:03:59,880
As far as Python goes, I did say that my PhD is in web security,

90
00:03:59,880 --> 00:04:01,560
which doesn't have much to do with Python.

91
00:04:01,560 --> 00:04:03,720
But hopefully a few of you in this room

92
00:04:03,720 --> 00:04:07,560
actually recognize me as a mailman developer,

93
00:04:07,560 --> 00:04:10,600
which if you think of mailman is that thing

94
00:04:10,600 --> 00:04:12,480
that emails you your password once a month

95
00:04:12,480 --> 00:04:16,640
may make you feel less inclined to listen to what I have to say.

96
00:04:16,640 --> 00:04:18,320
And if that's how you feel about mailman,

97
00:04:18,320 --> 00:04:20,120
let me tell you, you need to upgrade.

98
00:04:20,120 --> 00:04:21,720
It's going to blow your mind.

99
00:04:21,720 --> 00:04:23,720
It does not do that anymore.

100
00:04:23,720 --> 00:04:25,840
The other thing that I do in the Python community

101
00:04:25,840 --> 00:04:28,220
that you may know me for is Google Summer of Code.

102
00:04:28,220 --> 00:04:31,520
I run the summer mentoring program for the Python Software

103
00:04:31,520 --> 00:04:32,600
Foundation.

104
00:04:32,600 --> 00:04:35,720
And you can ask me all about that later.

105
00:04:35,720 --> 00:04:36,880
It's super cool.

106
00:04:36,880 --> 00:04:38,640
I can't wait to announce our new students,

107
00:04:38,640 --> 00:04:40,040
but it's not happening till Monday.

108
00:04:40,040 --> 00:04:43,600
So I can't tell you how many there are or anything right now.

109
00:04:43,600 --> 00:04:45,760
The other cool thing that I do for Intel

110
00:04:45,760 --> 00:04:47,760
is this URL in the middle, which I am not

111
00:04:47,760 --> 00:04:48,880
going to talk about again.

112
00:04:48,880 --> 00:04:50,640
So if you need to take a picture of it right now,

113
00:04:50,640 --> 00:04:51,960
you should take a picture of it.

114
00:04:51,960 --> 00:04:55,800
But I am working on a small Python tool that

115
00:04:55,800 --> 00:04:58,160
is not designed for improving your Python security,

116
00:04:58,160 --> 00:05:01,400
but is designed to help you figure out

117
00:05:01,400 --> 00:05:03,240
whether you have known vulnerabilities

118
00:05:03,240 --> 00:05:03,920
in your binaries.

119
00:05:03,920 --> 00:05:09,200
So those of you who may be working with C libraries,

120
00:05:09,200 --> 00:05:10,760
super useful.

121
00:05:10,760 --> 00:05:13,760
If you work at a company where you have a problem where

122
00:05:13,760 --> 00:05:17,080
sometimes people ship really old versions of OpenSSL,

123
00:05:17,080 --> 00:05:18,500
and you want to have something to put

124
00:05:18,500 --> 00:05:20,480
in your continuous integration to make sure

125
00:05:20,480 --> 00:05:22,400
that doesn't happen, this is the tool for you.

126
00:05:22,400 --> 00:05:23,440
And it's super cool.

127
00:05:23,440 --> 00:05:25,020
I'm not going to talk about it today,

128
00:05:25,020 --> 00:05:27,400
because it doesn't help most Python programmers.

129
00:05:27,400 --> 00:05:28,940
But I will talk about a lot of things

130
00:05:28,940 --> 00:05:30,840
that I've learned in developing it.

131
00:05:30,840 --> 00:05:32,320
And that just came out in February,

132
00:05:32,320 --> 00:05:34,520
so you're not late in learning about it or anything.

133
00:05:35,520 --> 00:05:40,440
So there's a bunch of different problems in security

134
00:05:40,440 --> 00:05:42,800
of differing levels of difficulty.

135
00:05:42,800 --> 00:05:44,960
In theory, the easiest one should

136
00:05:44,960 --> 00:05:47,520
be detecting things that we already know

137
00:05:47,520 --> 00:05:49,160
are security vulnerabilities.

138
00:05:49,160 --> 00:05:50,200
So they call these CVEs.

139
00:05:52,960 --> 00:05:57,000
There's a huge database of them.

140
00:05:57,000 --> 00:06:01,160
And when I say huge database, I really mean huge database.

141
00:06:01,160 --> 00:06:03,320
It's not untractable to download,

142
00:06:03,360 --> 00:06:07,840
but it has vulnerabilities of all software forever,

143
00:06:07,840 --> 00:06:09,640
all in one thing.

144
00:06:09,640 --> 00:06:11,720
It's called the National Vulnerability Database,

145
00:06:11,720 --> 00:06:14,160
because it's based in the US, but it's not national.

146
00:06:14,160 --> 00:06:16,240
It's the international horror show

147
00:06:16,240 --> 00:06:18,600
of every bit of software that's ever gone wrong.

148
00:06:20,720 --> 00:06:23,800
And that wouldn't be such a problem,

149
00:06:23,800 --> 00:06:30,000
except that everyone wants that two-letter Python pip install

150
00:06:30,000 --> 00:06:31,640
whatever package.

151
00:06:31,640 --> 00:06:35,720
And so we all use fairly simple names for a lot of things.

152
00:06:35,720 --> 00:06:39,040
I went to the great talk on cross-stitch yesterday,

153
00:06:39,040 --> 00:06:41,520
and the package is called ih, I-H.

154
00:06:41,520 --> 00:06:45,400
And if you search for that in a database with all known

155
00:06:45,400 --> 00:06:47,800
software vulnerabilities forever,

156
00:06:47,800 --> 00:06:49,480
you're going to get a lot of hits.

157
00:06:49,480 --> 00:06:50,880
And that's kind of annoying.

158
00:06:50,880 --> 00:06:53,280
But you think, well, OK, whatever.

159
00:06:53,280 --> 00:06:56,200
I do that once, and it'll be fine.

160
00:06:56,200 --> 00:07:00,960
It's annoying, but it's not intractable.

161
00:07:00,960 --> 00:07:03,000
Except that you don't do it just once,

162
00:07:03,000 --> 00:07:07,000
because many Python packages have never had a vulnerability,

163
00:07:07,000 --> 00:07:09,240
and therefore, they're not in the database yet.

164
00:07:09,240 --> 00:07:11,600
So every single time you want to check and see

165
00:07:11,600 --> 00:07:13,080
whether there are new vulnerabilities,

166
00:07:13,080 --> 00:07:15,320
you're going to have to search for all of those generically

167
00:07:15,320 --> 00:07:18,880
named packages again and try to build new mappings.

168
00:07:18,880 --> 00:07:21,720
And that's not great.

169
00:07:21,720 --> 00:07:25,600
But then it gets worse, because of course it does.

170
00:07:25,600 --> 00:07:29,040
The mapping isn't quite as perfect

171
00:07:29,040 --> 00:07:30,800
as you would hope it would be.

172
00:07:31,640 --> 00:07:35,840
So what we find is people are usually pretty good about it,

173
00:07:35,840 --> 00:07:37,440
but people are people.

174
00:07:37,440 --> 00:07:40,800
And so you go and you say libjpeg

175
00:07:40,800 --> 00:07:44,600
is vulnerable to something in all versions between 4.09.

176
00:07:44,600 --> 00:07:47,440
And if you're lucky, that means that the database

177
00:07:47,440 --> 00:07:51,880
will have 4.08, 4.07, 4.06, and all the way down,

178
00:07:51,880 --> 00:07:53,800
and it'll be really easy to query.

179
00:07:53,800 --> 00:07:57,640
But that's not usually what you see.

180
00:07:57,640 --> 00:08:01,720
What you sometimes see, especially for smaller packages,

181
00:08:01,720 --> 00:08:06,520
is 4.08 is vulnerable, but nothing about the other ones.

182
00:08:06,520 --> 00:08:08,880
Or if you're especially unlucky, and this is one

183
00:08:08,880 --> 00:08:12,120
that we've hit, it'll say 4.09 is the latest version

184
00:08:12,120 --> 00:08:15,600
that's safe, but it'll show up as the vulnerable version,

185
00:08:15,600 --> 00:08:16,840
so you'll get this false positive,

186
00:08:16,840 --> 00:08:18,360
and it's completely annoying.

187
00:08:18,360 --> 00:08:21,560
And we fix these as we find them.

188
00:08:21,560 --> 00:08:23,280
I have definitely found bugs.

189
00:08:23,280 --> 00:08:26,360
The NIST team that handles this is super responsive,

190
00:08:26,360 --> 00:08:27,400
and it's awesome.

191
00:08:28,360 --> 00:08:32,520
And they have ways to say, and all previous versions,

192
00:08:32,520 --> 00:08:36,280
but most people just grab the JSON and try to use it,

193
00:08:36,280 --> 00:08:38,440
and it doesn't have all that data in it.

194
00:08:38,440 --> 00:08:42,360
So the mappings can be kind of bad if you do it naively

195
00:08:42,360 --> 00:08:45,120
and you just aren't aware that that's what they're like.

196
00:08:47,560 --> 00:08:50,120
And then, in case that wasn't enough,

197
00:08:50,120 --> 00:08:53,440
this is a database maintained by a bazillion people.

198
00:08:53,440 --> 00:08:56,040
It was designed to be done by vendors,

199
00:08:56,040 --> 00:08:58,880
so big software companies would each have someone

200
00:08:58,880 --> 00:09:02,280
and they would do it, but now we have open source software,

201
00:09:02,280 --> 00:09:05,000
and we have a bazillion people who could,

202
00:09:05,000 --> 00:09:07,720
anyone can volunteer to be a vendor now.

203
00:09:07,720 --> 00:09:09,000
That was not always true.

204
00:09:09,920 --> 00:09:12,960
I don't know if any of you have ever asked around,

205
00:09:12,960 --> 00:09:16,160
like how do you file vulnerabilities

206
00:09:16,160 --> 00:09:18,400
for your open source project, but you may have learned

207
00:09:18,400 --> 00:09:21,880
that we owe a great debt of gratitude to the team at Red Hat.

208
00:09:21,880 --> 00:09:26,000
Red Hat Enterprise Linux files CVEs against all the packages

209
00:09:26,000 --> 00:09:31,000
that they maintain, and so there's a huge pile of those,

210
00:09:32,240 --> 00:09:34,440
but everyone else, it's sort of meh.

211
00:09:35,760 --> 00:09:37,840
And then, even if we figure out,

212
00:09:37,840 --> 00:09:39,960
so we don't know what sort of name they're gonna use,

213
00:09:39,960 --> 00:09:42,480
like if the first person to file a bug against your project

214
00:09:42,480 --> 00:09:45,600
calls it Python dash whatever, then that's fine,

215
00:09:45,600 --> 00:09:47,800
but when you search for just the whatever,

216
00:09:47,800 --> 00:09:50,360
you're not gonna find it, it's a pain.

217
00:09:51,120 --> 00:09:56,120
It's a, and then while open source,

218
00:09:56,200 --> 00:09:58,960
thanks to Red Hat especially, has been really good

219
00:09:58,960 --> 00:10:02,520
about filing CVEs, that's not true everywhere.

220
00:10:02,520 --> 00:10:04,880
If you're a small company,

221
00:10:04,880 --> 00:10:06,760
sometimes it's super uncomfortable

222
00:10:06,760 --> 00:10:09,440
to file a CVE against your project.

223
00:10:09,440 --> 00:10:12,560
Sometimes your management will say, we can't admit that,

224
00:10:12,560 --> 00:10:14,520
we're just gonna solve it, and it'll be quiet,

225
00:10:14,520 --> 00:10:15,560
and it'll happen.

226
00:10:15,560 --> 00:10:17,280
Or if you're a small open source project,

227
00:10:17,280 --> 00:10:19,720
you have no idea how to file a CVE,

228
00:10:19,720 --> 00:10:21,800
you don't even know that that's a thing.

229
00:10:21,800 --> 00:10:24,880
You don't even know that the bug you got was a security bug.

230
00:10:24,880 --> 00:10:27,480
You just fix it and you move on.

231
00:10:27,480 --> 00:10:29,440
And so, there's a lot of things that aren't even

232
00:10:29,440 --> 00:10:32,240
in the database that we probably would like to know about

233
00:10:32,240 --> 00:10:34,960
that are real security bugs and maybe are known.

234
00:10:34,960 --> 00:10:38,480
So, putting it all up on one slide so you can see in there,

235
00:10:38,480 --> 00:10:42,480
the mapping is bad, there's no canonicalization of names,

236
00:10:43,560 --> 00:10:46,000
there's lots of packages that aren't in there,

237
00:10:46,000 --> 00:10:49,320
there's some bugs in the data that we have.

238
00:10:49,320 --> 00:10:52,120
People fix things that probably qualify as CVEs

239
00:10:52,120 --> 00:10:53,840
without ever doing that.

240
00:10:53,840 --> 00:10:56,040
So, if you're looking at all this and thinking,

241
00:10:56,040 --> 00:10:58,720
God, that's a lot of work, you're right.

242
00:10:58,720 --> 00:11:01,440
Thankfully, someone else has done it for us.

243
00:11:03,860 --> 00:11:07,560
So, enter one of my favorite security tools ever,

244
00:11:07,560 --> 00:11:09,380
pyup.io safety.

245
00:11:10,560 --> 00:11:13,360
It checks your dependencies for known vulnerabilities,

246
00:11:13,360 --> 00:11:15,720
it's got a free database that's available

247
00:11:15,720 --> 00:11:18,720
and updated monthly, or you can get a subscription

248
00:11:18,720 --> 00:11:20,200
to do it more real time.

249
00:11:21,040 --> 00:11:22,540
They've recently changed their pricing,

250
00:11:22,540 --> 00:11:24,240
but it's still really, really reasonable

251
00:11:24,240 --> 00:11:25,520
for the amount of work that you're doing

252
00:11:25,520 --> 00:11:27,800
if you're talking about more than five Python packages.

253
00:11:27,800 --> 00:11:32,160
So, I don't have any affiliation with this company,

254
00:11:32,160 --> 00:11:33,960
but I definitely spend a lot of time

255
00:11:33,960 --> 00:11:36,240
recommending it to people because it's so much less work

256
00:11:36,240 --> 00:11:39,000
than doing it yourself and it's so much less error prone.

257
00:11:39,000 --> 00:11:41,060
And it's even more amazing than that,

258
00:11:41,060 --> 00:11:43,640
because not only have they figured out all the mappings

259
00:11:43,640 --> 00:11:45,480
and they've committed to finding new ones

260
00:11:45,480 --> 00:11:47,240
for everything in PIP.

261
00:11:47,240 --> 00:11:50,840
Like, if you've got something in PIP, it can figure it out.

262
00:11:50,840 --> 00:11:53,000
They also go and read all those change logs

263
00:11:53,000 --> 00:11:55,960
and see, hey, that looks like it might have been

264
00:11:55,960 --> 00:11:58,760
a security issue, and so you'll note that,

265
00:11:58,760 --> 00:12:01,880
hopefully you can read that, it's a little bit dark,

266
00:12:01,880 --> 00:12:04,620
but they have IDs that are not CVE numbers,

267
00:12:04,620 --> 00:12:07,460
and that's why, is because they have some vulnerabilities

268
00:12:07,460 --> 00:12:10,020
or potential vulnerabilities that are not in there.

269
00:12:11,100 --> 00:12:15,400
So, on top of having a command line utility

270
00:12:15,400 --> 00:12:17,960
that works in, you can just put it in your virtual M

271
00:12:17,960 --> 00:12:21,880
and say, go, tell me everything in here that's scary.

272
00:12:21,880 --> 00:12:25,040
They have the option to just take your requirements.txt

273
00:12:25,040 --> 00:12:27,040
and throw it into this web interface

274
00:12:27,040 --> 00:12:27,880
and it'll give you a list.

275
00:12:27,880 --> 00:12:31,520
And you can tell that I did this screenshot like a year ago

276
00:12:31,520 --> 00:12:34,000
because that is not the latest version of Django

277
00:12:34,000 --> 00:12:35,280
that you should be using.

278
00:12:35,280 --> 00:12:36,900
So, do not take that as advice.

279
00:12:36,900 --> 00:12:39,760
But you can see here the interface where

280
00:12:39,760 --> 00:12:41,900
there's no CVE associated with this,

281
00:12:41,900 --> 00:12:43,240
so it's showing you the change logs.

282
00:12:43,240 --> 00:12:46,160
So, you can go and see whether that particular issue

283
00:12:46,160 --> 00:12:48,080
might impact your product or not.

284
00:12:48,080 --> 00:12:51,400
Usually, as a security person, I always recommend

285
00:12:51,400 --> 00:12:52,560
you just update to the latest.

286
00:12:52,560 --> 00:12:54,440
It's way less maintenance and hassle,

287
00:12:54,440 --> 00:12:55,800
but depending on what you're doing,

288
00:12:55,800 --> 00:12:58,040
sometimes you need to know whether this bug impacts you

289
00:12:58,040 --> 00:12:59,440
and whether we have to do it right now,

290
00:12:59,440 --> 00:13:01,540
or maybe we could wait until next release.

291
00:13:04,920 --> 00:13:07,680
For those of you who might already be using Pipenv,

292
00:13:09,080 --> 00:13:11,360
safety is not the only way you can do this check.

293
00:13:11,360 --> 00:13:15,840
Pipenv has a bunch of tools for managing your Python,

294
00:13:15,840 --> 00:13:19,780
and it also does the equivalent of safety check.

295
00:13:20,920 --> 00:13:23,840
And it looks, again, this is probably a bit dark,

296
00:13:25,060 --> 00:13:26,560
it looks like this.

297
00:13:26,560 --> 00:13:30,840
This one gives you the short description of each CVE,

298
00:13:30,840 --> 00:13:32,580
so you can see it right there.

299
00:13:32,580 --> 00:13:36,280
It gives you the recommendations that you need,

300
00:13:36,280 --> 00:13:38,800
and it gives you a little bit of extra information

301
00:13:38,800 --> 00:13:40,100
about PEP 508.

302
00:13:41,920 --> 00:13:44,120
So why am I telling you about two?

303
00:13:44,120 --> 00:13:45,500
Which one's better?

304
00:13:45,500 --> 00:13:47,440
The answer is neither of them, they're actually the same.

305
00:13:47,440 --> 00:13:52,440
They use the same database from the safety people.

306
00:13:52,440 --> 00:13:55,340
It can even, Pipenv can even use your subscription key

307
00:13:55,340 --> 00:13:56,360
if you have one.

308
00:13:56,360 --> 00:13:59,000
So basically, try them both out,

309
00:13:59,000 --> 00:14:01,560
see which one works best for your workflow.

310
00:14:01,560 --> 00:14:05,320
Safety's got this nice GitHub CI,

311
00:14:05,320 --> 00:14:07,400
Pipenv's got other stuff that you might already be using,

312
00:14:07,400 --> 00:14:08,840
so it might be easier to integrate with you.

313
00:14:08,840 --> 00:14:11,820
But seriously, use one of them.

314
00:14:11,820 --> 00:14:16,820
It's amazing to me how many security vulnerabilities

315
00:14:17,200 --> 00:14:19,800
we have that are just, we never upgraded this

316
00:14:19,800 --> 00:14:21,460
because we didn't think of it.

317
00:14:25,280 --> 00:14:27,940
So assuming we have sort of solved

318
00:14:27,940 --> 00:14:30,140
the known vulnerability problems,

319
00:14:30,140 --> 00:14:31,560
we need to go into the next problem.

320
00:14:31,560 --> 00:14:34,680
What about actual quality of our code?

321
00:14:36,240 --> 00:14:38,240
So let's go back to PyLint.

322
00:14:38,240 --> 00:14:42,360
So the goal of PyLint is code quality and consistency.

323
00:14:42,360 --> 00:14:45,280
Sometimes you get security gains as a side effect.

324
00:14:45,280 --> 00:14:49,360
The security value is not zero, but it's low.

325
00:14:49,360 --> 00:14:51,640
So that person who is recommending it

326
00:14:51,640 --> 00:14:56,640
as the only tool you need has some wishful thinking going on,

327
00:14:56,640 --> 00:14:58,460
but it's not zero.

328
00:14:58,460 --> 00:15:01,140
And I don't have a great Python example,

329
00:15:01,140 --> 00:15:03,980
but this is the famous Apple go-to fail,

330
00:15:03,980 --> 00:15:06,880
which is often held up as an example

331
00:15:06,880 --> 00:15:09,080
of something that would be caught by a linter

332
00:15:09,080 --> 00:15:12,440
that is a security issue, even though it's also a code issue.

333
00:15:12,440 --> 00:15:15,400
So making your code clearer and easier to read

334
00:15:15,400 --> 00:15:18,020
definitely has security implications that are good.

335
00:15:19,800 --> 00:15:22,980
But those people who told you to use PyLint

336
00:15:22,980 --> 00:15:24,720
were just off by one.

337
00:15:24,720 --> 00:15:26,520
You know, we're programmers, off by whatevers.

338
00:15:26,520 --> 00:15:29,960
So Bandit is the new kid on the block,

339
00:15:29,960 --> 00:15:33,000
not really new anymore, but this is a tool

340
00:15:33,000 --> 00:15:35,460
that was written for OpenStack

341
00:15:35,460 --> 00:15:37,620
because the problem with designing

342
00:15:37,620 --> 00:15:39,220
your cloud infrastructure by committee

343
00:15:39,220 --> 00:15:41,940
is that not everyone has the same code quality standards,

344
00:15:41,940 --> 00:15:45,460
and so they worked on this tool to help people

345
00:15:45,460 --> 00:15:47,060
work on their security standards.

346
00:15:47,060 --> 00:15:52,060
And this was made part of Python's PyCQA,

347
00:15:52,780 --> 00:15:54,380
and it's kind of awesome.

348
00:15:56,920 --> 00:16:00,780
So Bandit's goal is to find security issues.

349
00:16:00,780 --> 00:16:02,180
It includes blacklists.

350
00:16:02,180 --> 00:16:04,900
It has some linters for common mistakes.

351
00:16:05,580 --> 00:16:07,620
It's not technically a linter.

352
00:16:07,620 --> 00:16:09,940
It's actually more of a static analysis tool,

353
00:16:09,940 --> 00:16:12,500
but it's fast enough that you can treat it like a linter,

354
00:16:12,500 --> 00:16:14,380
and if you don't really care too much about exactly

355
00:16:14,380 --> 00:16:16,460
what's going on under the hood, that's fine.

356
00:16:16,460 --> 00:16:18,100
The security value here is high,

357
00:16:18,100 --> 00:16:21,080
and that's a big difference from PyLint.

358
00:16:22,740 --> 00:16:26,700
So here's what the tail end of an output looks like.

359
00:16:26,700 --> 00:16:29,480
You can see it gives you something telling you

360
00:16:29,480 --> 00:16:31,400
that it's blacklisted, explaining why

361
00:16:31,400 --> 00:16:32,380
and what you should look at.

362
00:16:32,380 --> 00:16:33,760
It gives you a little bit of code

363
00:16:33,760 --> 00:16:35,480
so you can figure out where it is,

364
00:16:35,480 --> 00:16:37,880
and it gives you some summary information

365
00:16:37,880 --> 00:16:39,560
about the issues that it's found.

366
00:16:41,640 --> 00:16:44,320
I put up there showing you how to just get it.

367
00:16:44,320 --> 00:16:46,040
I do recommend you run it in a virtualenv.

368
00:16:46,040 --> 00:16:46,880
It's easier.

369
00:16:46,880 --> 00:16:48,160
If you're running it in a virtualenv,

370
00:16:48,160 --> 00:16:50,840
do not put your virtualenv into the directory

371
00:16:50,840 --> 00:16:52,400
that you're running Bandit on.

372
00:16:52,400 --> 00:16:55,840
Bandit hates virtualenv, and your vnv

373
00:16:55,840 --> 00:17:00,640
will trigger approximately 1,200 Bandit errors

374
00:17:00,640 --> 00:17:02,720
that are not your fault and not in your code,

375
00:17:02,720 --> 00:17:04,760
and every time I see someone do it at work,

376
00:17:04,760 --> 00:17:06,960
and they're like, oh god, I'm doomed.

377
00:17:06,960 --> 00:17:08,120
My project's never gonna ship.

378
00:17:08,120 --> 00:17:09,400
So don't do that.

379
00:17:09,400 --> 00:17:11,360
Put your virtualenv somewhere else.

380
00:17:11,360 --> 00:17:13,000
Scan just the code that you wrote.

381
00:17:13,000 --> 00:17:15,040
It'll make your life a whole lot easier.

382
00:17:17,000 --> 00:17:18,040
But that's pretty much it.

383
00:17:18,040 --> 00:17:19,200
Pip install Bandit.

384
00:17:19,200 --> 00:17:21,120
Run it on your code.

385
00:17:21,120 --> 00:17:23,720
You can do it right now in the audience if you want.

386
00:17:25,480 --> 00:17:28,820
So Bandit has more rules than this,

387
00:17:28,820 --> 00:17:31,000
but here's an example of some of the rules

388
00:17:31,000 --> 00:17:33,040
that you're looking at.

389
00:17:33,040 --> 00:17:35,080
That first one came up for me last week

390
00:17:35,080 --> 00:17:37,240
when scanning TensorFlow, of all things.

391
00:17:38,160 --> 00:17:41,000
It's a reminder that assert in Python,

392
00:17:41,000 --> 00:17:43,320
as in most languages actually,

393
00:17:43,320 --> 00:17:45,520
gets compiled out by the optimizer

394
00:17:45,520 --> 00:17:48,720
because it's meant to be a sort of emergency debug check

395
00:17:48,720 --> 00:17:52,360
and is not good for doing security validation.

396
00:17:52,360 --> 00:17:56,800
So we found that in a lot of places in code at work

397
00:17:57,000 --> 00:18:01,600
and elsewhere where people are often just not aware

398
00:18:01,600 --> 00:18:05,080
that the minute this gets compiled, it's gone.

399
00:18:05,080 --> 00:18:07,080
So it's not super useful.

400
00:18:07,080 --> 00:18:08,840
So it's really useful in your test cases

401
00:18:08,840 --> 00:18:10,520
and not so useful elsewhere.

402
00:18:10,520 --> 00:18:13,000
Some of the other ones, if you know anything about security,

403
00:18:13,000 --> 00:18:13,840
are sort of obvious.

404
00:18:13,840 --> 00:18:18,840
Exec tends to be the whipping boy of all scripting languages.

405
00:18:19,000 --> 00:18:23,080
There's some stuff about cryptography and so on.

406
00:18:24,080 --> 00:18:24,920
Pickle.

407
00:18:27,240 --> 00:18:29,160
It's worth, if you're not familiar with any,

408
00:18:29,160 --> 00:18:31,240
with why any of these things are,

409
00:18:31,240 --> 00:18:33,000
Bandit has a little description,

410
00:18:33,000 --> 00:18:36,680
including what the message means in short,

411
00:18:36,680 --> 00:18:38,160
what the message means a little bit long,

412
00:18:38,160 --> 00:18:40,880
and often it has links back to the OpenStack wiki pages

413
00:18:40,880 --> 00:18:43,320
on how to resolve this and what to do better.

414
00:18:43,320 --> 00:18:47,200
So it's actually pretty comprehensive on how it does that.

415
00:18:49,000 --> 00:18:51,200
The other thing that I want to tell you about Bandit,

416
00:18:51,200 --> 00:18:52,840
other than don't put your virtual enven,

417
00:18:52,840 --> 00:18:54,200
the directory you're scanning,

418
00:18:54,200 --> 00:18:56,280
is that sometimes you don't actually want

419
00:18:56,280 --> 00:18:57,560
to fix all your Bandit errors.

420
00:18:57,560 --> 00:19:00,480
So if you're used to using other security tools,

421
00:19:00,480 --> 00:19:02,840
you tend to try to drive everything to zero.

422
00:19:02,840 --> 00:19:06,120
That's not the way I would recommend you use Bandit.

423
00:19:06,120 --> 00:19:10,440
Bandit is, again, it was designed originally for OpenStack

424
00:19:10,440 --> 00:19:13,240
and it calls out a lot of stuff that is dangerous

425
00:19:13,240 --> 00:19:15,240
but not necessarily wrong.

426
00:19:15,240 --> 00:19:18,800
So the one that hits me in the CVE binary tool

427
00:19:18,800 --> 00:19:22,040
is calling out to system functions via subprocess,

428
00:19:22,040 --> 00:19:23,880
which is the right way to do things

429
00:19:23,880 --> 00:19:26,640
but also potentially dangerous.

430
00:19:26,640 --> 00:19:30,400
And in my case, we call it to subprocess.

431
00:19:30,400 --> 00:19:35,400
In order to identify files, we use the Linux strings utility.

432
00:19:37,280 --> 00:19:40,920
And we actually have a Google Summer of Code student

433
00:19:40,920 --> 00:19:45,920
who was investigating making our code run

434
00:19:45,920 --> 00:19:49,560
on systems like Windows that don't necessarily have that.

435
00:19:49,600 --> 00:19:54,600
And so she put in a thing that does that parsing in Python.

436
00:19:55,920 --> 00:19:59,160
And that was great, except that the first thing I got

437
00:19:59,160 --> 00:20:01,800
was a email from the Yocto team saying,

438
00:20:01,800 --> 00:20:05,760
ah, your script used to run in 107 seconds.

439
00:20:05,760 --> 00:20:08,160
It's been five minutes and now I'm filing a bug.

440
00:20:09,000 --> 00:20:14,000
And then 45 minutes later, another message saying,

441
00:20:14,920 --> 00:20:17,200
it's been 45 minutes and it's still going.

442
00:20:17,200 --> 00:20:19,040
What did you do?

443
00:20:19,040 --> 00:20:21,400
So yeah, we want to use subprocess.

444
00:20:21,400 --> 00:20:24,480
It's much more performant than our pure Python solution.

445
00:20:24,480 --> 00:20:26,760
And that's not something I'm ever going to remove

446
00:20:26,760 --> 00:20:31,720
because short of compile, like why duplicate code?

447
00:20:31,720 --> 00:20:35,880
So using Bandit as a way to focus your code review

448
00:20:35,880 --> 00:20:37,440
is a good thing to do.

449
00:20:37,440 --> 00:20:40,720
As I said, it's got information about each of the bugs

450
00:20:40,720 --> 00:20:44,040
that you can look up on it and that's super helpful.

451
00:20:44,040 --> 00:20:46,040
What it doesn't have is it doesn't have

452
00:20:46,040 --> 00:20:48,240
sort of a code review facility

453
00:20:48,240 --> 00:20:51,240
where you can say this is not a bug or that I've checked this.

454
00:20:51,240 --> 00:20:54,240
If you want to add it though, you know, it's open source.

455
00:20:54,240 --> 00:20:56,280
I know I'd be interested in seeing it.

456
00:20:59,480 --> 00:21:03,120
So what's the next step?

457
00:21:03,120 --> 00:21:05,360
So these are things that are fast.

458
00:21:05,360 --> 00:21:06,320
You can run it in your CI,

459
00:21:06,320 --> 00:21:07,600
you can run it on every single commit

460
00:21:07,600 --> 00:21:09,320
and it's totally reasonable to do.

461
00:21:09,320 --> 00:21:11,800
With Bandit, you don't want it to block your commits.

462
00:21:11,800 --> 00:21:13,760
You do have to be a little bit careful

463
00:21:13,760 --> 00:21:15,720
about how you set it up.

464
00:21:15,720 --> 00:21:17,960
There are a number of other tools

465
00:21:17,960 --> 00:21:19,760
with different heuristics available.

466
00:21:19,760 --> 00:21:22,440
There's some open source ones like SonarCube.

467
00:21:22,440 --> 00:21:23,760
The only one I'm going to mention here,

468
00:21:23,760 --> 00:21:26,400
just because there's so many and they're very varied

469
00:21:26,400 --> 00:21:29,440
and I don't like all of them,

470
00:21:29,440 --> 00:21:31,680
but one that is interesting to us

471
00:21:31,680 --> 00:21:35,240
because it's being used by CPython is scan.covarity.com,

472
00:21:35,240 --> 00:21:36,640
which is free for open source.

473
00:21:36,640 --> 00:21:38,120
So if you have an open source project

474
00:21:38,120 --> 00:21:40,080
and you want to see what covarity looks like,

475
00:21:40,080 --> 00:21:42,480
you can sign up for that and do that.

476
00:21:42,480 --> 00:21:43,560
I would show you screenshots,

477
00:21:43,560 --> 00:21:45,160
but I accidentally broke my account

478
00:21:45,160 --> 00:21:46,600
by changing my email address.

479
00:21:46,600 --> 00:21:49,520
So yeah, that was unfortunate.

480
00:21:49,520 --> 00:21:53,360
But it basically runs, they have a commercial tool

481
00:21:53,360 --> 00:21:55,800
and it basically runs about a version behind,

482
00:21:55,800 --> 00:21:59,600
sometimes two, and gives you the full range of stuff

483
00:21:59,600 --> 00:22:01,500
and it's got a lot of good rules for Python

484
00:22:01,500 --> 00:22:03,200
that we've found very useful

485
00:22:03,200 --> 00:22:05,720
for the open source projects I use that use it.

486
00:22:10,240 --> 00:22:11,880
So let's go back to this.

487
00:22:11,880 --> 00:22:14,600
But Python is inherently secure.

488
00:22:14,600 --> 00:22:17,840
And it's all fine and good to say,

489
00:22:17,840 --> 00:22:20,560
okay, here's how you focus your code review,

490
00:22:20,560 --> 00:22:22,780
but what if you're working with a team of people

491
00:22:22,780 --> 00:22:27,000
who just in their heart of hearts believe Python is secure

492
00:22:27,000 --> 00:22:29,840
and are not going to do much looking at it?

493
00:22:31,160 --> 00:22:32,160
So that's a problem.

494
00:22:34,600 --> 00:22:37,480
It's worth noting, and I hope none of you were in here

495
00:22:37,480 --> 00:22:38,640
hoping I was going to tell you

496
00:22:38,640 --> 00:22:42,560
about very specific Python security issues.

497
00:22:42,560 --> 00:22:47,560
There are a few, but to be completely honest,

498
00:22:47,560 --> 00:22:49,240
most of the issues I see in Python

499
00:22:49,240 --> 00:22:51,600
are issues I see in other languages.

500
00:22:51,600 --> 00:22:55,440
So as I said, obsolete dependencies, that's a huge problem.

501
00:22:56,440 --> 00:22:59,280
Obsolete cryptography, if you run Bandit

502
00:22:59,280 --> 00:23:00,880
and it tells you you're still using PyCrypto,

503
00:23:00,880 --> 00:23:01,880
please don't do that.

504
00:23:04,160 --> 00:23:07,680
Secrets in code, people putting their keys

505
00:23:07,680 --> 00:23:09,460
where they shouldn't be.

506
00:23:09,460 --> 00:23:10,800
Not enough input validation.

507
00:23:10,800 --> 00:23:14,960
And all of these things are the same things you see

508
00:23:14,960 --> 00:23:17,640
in the whole list of the top 25 software errors

509
00:23:17,640 --> 00:23:19,840
that Sans puts out every couple of years.

510
00:23:21,120 --> 00:23:24,600
We're basically only missing two, I think.

511
00:23:24,600 --> 00:23:26,040
There's a buffer overflow one,

512
00:23:26,040 --> 00:23:27,640
and then there's another related one.

513
00:23:27,640 --> 00:23:29,240
Like all the integer arithmetic,

514
00:23:29,240 --> 00:23:30,840
we can still screw that up.

515
00:23:30,840 --> 00:23:33,720
There's very little that,

516
00:23:34,680 --> 00:23:37,680
there's nothing new under the sun in security, unfortunately.

517
00:23:38,600 --> 00:23:43,200
But if you have teams or you just want to work

518
00:23:43,200 --> 00:23:45,680
on your own education, you will find

519
00:23:45,680 --> 00:23:47,500
that it's actually kind of hard

520
00:23:47,500 --> 00:23:49,600
because all of the security guides were written

521
00:23:49,600 --> 00:23:53,480
for C, C++, Java.

522
00:23:53,480 --> 00:23:58,000
There's not very much written with Python examples in mind.

523
00:23:58,000 --> 00:24:01,360
So I mean, obviously Bandit does have some examples.

524
00:24:01,360 --> 00:24:04,240
I like this one when I'm giving it out to new teams

525
00:24:04,240 --> 00:24:07,360
that haven't done security work on Python before

526
00:24:07,360 --> 00:24:11,320
because it does have, at the time I did the screenshot,

527
00:24:11,320 --> 00:24:12,560
I think it might have a couple more.

528
00:24:12,560 --> 00:24:15,920
It does have Python examples for 109 different types

529
00:24:15,920 --> 00:24:19,200
of security issue and explanation as to why.

530
00:24:20,560 --> 00:24:23,760
Fortify does a number of other tools and fuzzing and stuff.

531
00:24:23,760 --> 00:24:26,320
So they're very familiar and very knowledgeable.

532
00:24:27,320 --> 00:24:29,920
So this is a great one if you need a place to start.

533
00:24:33,080 --> 00:24:35,780
So we have some tools.

534
00:24:38,200 --> 00:24:39,520
Where should you be using them?

535
00:24:39,520 --> 00:24:41,520
One, in your continuous integration.

536
00:24:41,520 --> 00:24:42,800
That's too much of a pain.

537
00:24:43,680 --> 00:24:45,120
Do it before you do code review.

538
00:24:45,120 --> 00:24:46,520
If you don't do code review,

539
00:24:46,520 --> 00:24:48,740
at least do it before your release, please.

540
00:24:52,720 --> 00:24:57,720
So this is what I really want to be the answer

541
00:24:58,040 --> 00:25:01,280
when you search for how do you secure Python.

542
00:25:01,280 --> 00:25:02,600
There are other things you can do.

543
00:25:02,600 --> 00:25:04,920
I went to a great talk this morning earlier today

544
00:25:04,920 --> 00:25:06,120
on type checking.

545
00:25:06,120 --> 00:25:07,880
There's a bazillion other tools,

546
00:25:07,880 --> 00:25:10,800
but this is the bare minimum that I want you to all like,

547
00:25:10,800 --> 00:25:14,280
please take a picture of that, send it to your team,

548
00:25:14,280 --> 00:25:16,400
put it on Twitter, whatever.

549
00:25:17,920 --> 00:25:19,760
Do your vulnerability checks.

550
00:25:19,760 --> 00:25:21,640
You can do it in a couple of ways.

551
00:25:21,640 --> 00:25:23,520
Do some code quality checks.

552
00:25:23,520 --> 00:25:24,600
Bandit is great.

553
00:25:24,600 --> 00:25:26,640
Please learn to love it.

554
00:25:26,640 --> 00:25:28,480
Maybe we can contribute some new things

555
00:25:28,480 --> 00:25:30,280
to make it easier for people to use.

556
00:25:31,280 --> 00:25:33,280
It's worth looking into other static analysis

557
00:25:33,280 --> 00:25:36,120
if you have access to the budget for that

558
00:25:36,120 --> 00:25:39,400
or are willing to suffer through the open source tools

559
00:25:39,400 --> 00:25:41,920
to get them up to what you want.

560
00:25:41,920 --> 00:25:45,040
And do learn about how to do code reviews for Python

561
00:25:45,040 --> 00:25:48,500
because they're the same as everything,

562
00:25:48,500 --> 00:25:53,500
but sometimes people just are so optimistic

563
00:25:53,640 --> 00:25:55,600
about our language that they don't realize

564
00:25:55,600 --> 00:25:58,040
that that's a thing they need to know.

565
00:25:58,040 --> 00:26:01,240
And we've got time for questions.

566
00:26:01,240 --> 00:26:04,680
I will say that if you don't want to be that jerk

567
00:26:04,680 --> 00:26:07,360
who forms their question not in the form of a question,

568
00:26:07,360 --> 00:26:10,160
but you do want to tell me about a really awesome tool

569
00:26:10,160 --> 00:26:11,520
that I should have been talking about,

570
00:26:11,520 --> 00:26:12,480
please send me an email.

571
00:26:12,480 --> 00:26:13,920
I love knowing about tools.

572
00:26:13,920 --> 00:26:15,440
I don't know that everyone in the room

573
00:26:15,440 --> 00:26:17,040
wants to hear us pontificate about them though,

574
00:26:17,040 --> 00:26:19,440
so please raise your question in the form of question

575
00:26:19,440 --> 00:26:21,240
and I'm done.

576
00:26:21,240 --> 00:26:23,760
Oh, and I should say, Intel is hiring.

577
00:26:23,760 --> 00:26:25,640
If you think my job sounds cool,

578
00:26:25,640 --> 00:26:27,960
we want a person just like me.

579
00:26:27,960 --> 00:26:29,840
I would be happy to talk to you about it.

580
00:26:30,240 --> 00:26:35,240
Okay, if anyone has questions,

581
00:26:39,120 --> 00:26:40,880
they should come to the mic now.

582
00:26:43,160 --> 00:26:44,360
Order one in the back.

583
00:26:44,360 --> 00:26:45,200
In the way.

584
00:26:57,200 --> 00:27:01,680
So I didn't get that earlier when you talked about safety

585
00:27:01,680 --> 00:27:03,600
versus PIP-NF check.

586
00:27:03,600 --> 00:27:05,400
So we're running PIP-NF check,

587
00:27:05,400 --> 00:27:07,440
but we never got a license from safety,

588
00:27:07,440 --> 00:27:10,920
so you said they access the same database if you have.

589
00:27:10,920 --> 00:27:13,040
Yeah, you're probably using the free database

590
00:27:13,040 --> 00:27:14,560
if you want an even better database,

591
00:27:14,560 --> 00:27:16,000
you can get a license to get that.

592
00:27:16,000 --> 00:27:18,120
Okay, so that's an extra, and that's worth it?

593
00:27:18,120 --> 00:27:19,560
Yeah.

594
00:27:19,560 --> 00:27:20,840
It seems worth it to me,

595
00:27:20,840 --> 00:27:23,360
but I work with a lot of projects at once,

596
00:27:23,360 --> 00:27:25,920
so it's a lot of big projects,

597
00:27:25,920 --> 00:27:28,200
so it may or may not be worth it to you.

598
00:27:28,200 --> 00:27:29,120
All right, thanks.

599
00:27:33,200 --> 00:27:34,480
Are you aware of any tools

600
00:27:34,480 --> 00:27:37,480
that automatically detect security flaws

601
00:27:37,480 --> 00:27:38,920
and try to fix it?

602
00:27:38,920 --> 00:27:42,120
Kind of like refactoring, similar likely two to three?

603
00:27:43,320 --> 00:27:45,400
I haven't seen any good ones for Python.

604
00:27:45,400 --> 00:27:47,280
I have seen them for other languages.

605
00:27:48,520 --> 00:27:51,400
So no, basically, I guess is the answer.

606
00:27:51,400 --> 00:27:53,200
It is possible.

607
00:27:53,200 --> 00:27:56,280
There's a lot of really interesting academic work

608
00:27:56,280 --> 00:28:00,080
in that area, really great papers if you're bored.

609
00:28:00,080 --> 00:28:02,120
Usenix Security is coming up in a few months,

610
00:28:02,120 --> 00:28:04,080
and they put all their papers out for free,

611
00:28:04,080 --> 00:28:05,520
and they're gonna have really cool research

612
00:28:05,520 --> 00:28:07,160
that'll include stuff like that,

613
00:28:07,160 --> 00:28:10,840
but usually people focus on C because that's scarier.

614
00:28:13,040 --> 00:28:13,880
Okay.

615
00:28:17,120 --> 00:28:18,800
Okay, thank you very much.

616
00:28:18,800 --> 00:28:19,800
Thank you.

