1
00:00:00,000 --> 00:00:04,520
All right. This seems slightly silly now since he's been talking to you. But this is Steve

2
00:00:04,520 --> 00:00:16,200
Dower from Microsoft to tell you that Python on Windows is okay, actually.

3
00:00:16,200 --> 00:00:21,600
Thank you. I am really excited to finally get to give this talk at PyCon. I've given

4
00:00:21,600 --> 00:00:25,240
it a couple of other times at some other conferences, and I'm actually using some data right at

5
00:00:25,240 --> 00:00:29,560
the start that's based on PyCon. So it's great to finally be here and get to share it with

6
00:00:29,560 --> 00:00:35,560
all of you who contributed to the first few graphs. Obviously, as we know, Python on Windows

7
00:00:35,560 --> 00:00:43,680
is not that big a thing, right? We look around at the operating systems, the computers that

8
00:00:43,680 --> 00:00:48,640
people at largely PyCon conferences in general use, and we see something like this. There's

9
00:00:48,640 --> 00:00:54,520
a really, really big section of people with glowing fruit on their laptops. There's a

10
00:00:54,520 --> 00:00:58,920
smaller group of people that didn't pay anything for their operating system at all, and then

11
00:00:59,080 --> 00:01:04,480
there's the people like me who are running Windows. And when you get into the talks,

12
00:01:04,480 --> 00:01:09,760
and if you look over and if you can see the laptops, then you see it's a little bit more

13
00:01:09,760 --> 00:01:14,600
narrow at least for the area that I'm sitting in. And, you know, I'll do a quick scan around

14
00:01:14,600 --> 00:01:25,720
this room now, and it kind of looks like this is where we're at. But is this reality? We

15
00:01:25,720 --> 00:01:30,800
actually have sources of real data. Obviously, these are made up charts, right? So let's grab

16
00:01:30,800 --> 00:01:37,000
some real data. PyPI has a way to access all of the data for who's downloading packages,

17
00:01:37,000 --> 00:01:43,760
and it's filtered. Some of it's censored. You can't actually get specific information. But

18
00:01:43,760 --> 00:01:48,200
looking across a handful of popular packages, the breakdown looks kind of like this. The majority

19
00:01:48,200 --> 00:01:53,240
is for Linux, unsurprisingly. That's where most of our code ends up running. But then you see a

20
00:01:53,240 --> 00:01:57,120
roughly even split between Windows and Mac OS, and depending on the package, it'll swing one way

21
00:01:57,120 --> 00:02:03,280
or the other. But for the most part, Linux dominates. If you look at packages installed

22
00:02:03,280 --> 00:02:11,800
using Conda, you start seeing a bigger chunk targeting Windows. Two years ago, there was a

23
00:02:11,800 --> 00:02:19,040
survey for the PSF where the question was not asked what operating system you're using, but

24
00:02:19,040 --> 00:02:22,760
apparently we decided afterwards that it would be great if we could figure that out. So we actually

25
00:02:22,920 --> 00:02:28,920
went through and looked at the people who submitted answers to the survey to see which kind of operating

26
00:02:28,920 --> 00:02:33,800
system they were submitting from, and this is roughly how it broke down. The big gap there,

27
00:02:33,800 --> 00:02:41,560
we assume, is like mobile phones, but it's not relevant to right now. When the survey was run

28
00:02:41,560 --> 00:02:47,080
last year, and you can look this data up, the question was asked. It was actually included,

29
00:02:47,080 --> 00:02:51,200
what operating systems do you run Python on? But it was multiple choice. That doesn't make

30
00:02:51,320 --> 00:02:56,760
a very good pie chart. But I can tell you what happened in that survey is the Windows and the

31
00:02:56,760 --> 00:03:03,520
Mac OS levels stayed about the same, and Linux grew to 60%. So that's 60% overlapping. Essentially,

32
00:03:03,520 --> 00:03:10,280
the ratios don't change, and the same percentage are using Windows, Mac OS, and there's a big

33
00:03:10,280 --> 00:03:16,720
overlap with using Linux as well. That's my read into the data at least. It was not asked

34
00:03:16,720 --> 00:03:22,800
specifically enough to make that assertion 100% solid, but that's certainly how it looks. The

35
00:03:23,760 --> 00:03:31,280
50% of Python developers on Windows from that survey did not change. And if we go to Visual

36
00:03:31,280 --> 00:03:38,320
Studio Code and look at some of the data, courtesy of Microsoft, we see that just over 50% of Visual

37
00:03:38,320 --> 00:03:43,120
Studio Code users are running on Windows, despite the fact that it runs just fine on Mac and Linux.

38
00:03:43,760 --> 00:03:50,800
And courtesy of JetBrains, if we look at pie chart usage data, we're up to about 70% actually

39
00:03:50,800 --> 00:03:55,840
running pie chart on Windows. The percentages are getting smaller and smaller for the other

40
00:03:55,840 --> 00:04:04,160
operating systems. Periodically, I am allowed access to the Python.org download stats. These

41
00:04:04,160 --> 00:04:11,800
are not normally public, but I'll do some analysis, especially for this talk. And so in March 2019,

42
00:04:12,360 --> 00:04:19,000
there were 29 million downloads of files from Python.org. The ratio is a little skewed. I'll

43
00:04:19,000 --> 00:04:23,240
be honest. There's not many reasons to go to Python.org to get Python for Linux. You're better off

44
00:04:23,240 --> 00:04:29,960
getting that from your distributor. Mac OS, similarly, homebrew is a far more common way that

45
00:04:29,960 --> 00:04:37,080
people get Python for Mac OS. Windows is the primary place. Python.org is the main place you

46
00:04:37,080 --> 00:04:41,560
would get it for Windows. So it's skewed that way. But I do just want to point out that this is 24

47
00:04:41,560 --> 00:04:48,360
million downloads in one month. That's 200 million downloads a year, more than that. That's a huge

48
00:04:48,360 --> 00:04:53,400
number. No matter what the breakdown is, there's a lot of people downloading and installing Python

49
00:04:53,400 --> 00:05:04,280
on Windows. So what that gives us is a community that probably looks something like this.

50
00:05:04,280 --> 00:05:11,880
But what we see around us is this part. When you go to a conference, this is the part that you get

51
00:05:11,880 --> 00:05:18,920
to see. And there's a huge, huge number of Python users out there who look different from what we

52
00:05:18,920 --> 00:05:26,520
see at a conference. There is, in fact, a serious gap here where these people are, for whatever

53
00:05:26,520 --> 00:05:29,880
reason, not participating in our community. They're not participating in our community.

54
00:05:30,120 --> 00:05:40,360
They're not coming to our conferences. They're not contributing packages. They're not writing blogs.

55
00:05:40,360 --> 00:05:45,880
They're not making a whole lot of noise and fuss on Twitter. But they're still using Python.

56
00:05:48,040 --> 00:05:51,880
So why aren't they part of our community? Why aren't they here? Why aren't they engaging with us?

57
00:05:53,960 --> 00:05:56,520
I want to be very clear. I'm not saying this is the conference's fault.

58
00:05:56,680 --> 00:06:00,680
I'm not saying this is something for conferences to change or they have a responsibility to fix.

59
00:06:00,680 --> 00:06:06,600
I'm simply saying conferences, I think, are where we would see this not being an issue were it not

60
00:06:06,600 --> 00:06:11,960
an issue. We'd be looking around and seeing a representation of operating systems that kind of

61
00:06:11,960 --> 00:06:19,960
matches the reality at conferences. And let me also be totally clear. This is not your fault.

62
00:06:20,920 --> 00:06:26,120
The reason I bring this topic up with all of you here in the room is not because it's your fault,

63
00:06:26,120 --> 00:06:29,720
but because part of this gap you can help fix.

64
00:06:32,600 --> 00:06:37,640
Python itself runs really well on many, many different operating systems. Those of you familiar

65
00:06:37,640 --> 00:06:43,880
with our engineering setup know there's a lot of effort going into running tests on many different

66
00:06:43,880 --> 00:06:49,880
OSs, keeping things in place. And Python is a great place to be. It's a great place to be.

67
00:06:49,960 --> 00:06:56,040
It's a great place for you to be. It's a great place to be. It's a great place for you to be.

68
00:06:56,520 --> 00:07:05,720
So, I want to say a few words about the environment. Python is running well. Making sure that it

69
00:07:05,720 --> 00:07:11,800
behaves the same as much as possible across OSs. But Python itself isn't all of Python. The

70
00:07:11,800 --> 00:07:19,480
ecosystem is so critical that users come to rely nearly 100% on libraries. And the libraries are

71
00:07:19,960 --> 00:07:25,480
that I'm going to ask. I'm going to point out ten ways to be wrong. And when you're wrong about

72
00:07:25,480 --> 00:07:30,680
these things, it leads to libraries that don't work well across different operating systems.

73
00:07:32,360 --> 00:07:35,800
For each of these five questions, I'm going to give you one simple way to make it right,

74
00:07:36,920 --> 00:07:45,800
which, spoiler, it's actually just writing more clean, more pure Python code. It's not adding

75
00:07:45,880 --> 00:07:52,680
operating system-specific code. It's actually ways that take out the assumptions that your code is

76
00:07:52,680 --> 00:07:57,880
only ever going to run in what you believe it's going to run in today. And anyone who's had to

77
00:07:57,880 --> 00:08:03,000
maintain code for more than a few years will know that it ends up in all kinds of places you didn't

78
00:08:03,000 --> 00:08:08,680
expect it. At the end, just to be completely upfront, is one simple checklist. If you're

79
00:08:08,680 --> 00:08:12,680
planning to take notes or photograph every single slide, feel free, but there is one slide at the

80
00:08:12,680 --> 00:08:18,120
end that you'll get warning. That's the one you want to take a picture of. And that's the one that

81
00:08:18,120 --> 00:08:27,000
I hope you'll take away and apply to your own projects. So question number one. How do I run

82
00:08:27,000 --> 00:08:35,240
Python? And this also includes how do I run my Python script? How do I run my Python code,

83
00:08:35,800 --> 00:08:38,280
particularly for those of us who are implementing tools?

84
00:08:38,280 --> 00:08:45,880
The first assumption is everything is on path. That's false. And I'll break down a little bit

85
00:08:45,880 --> 00:08:51,880
why that's false. If you're used to a POSIX-based system, you're used to kind of a hierarchy like

86
00:08:51,880 --> 00:08:57,240
this, where there's a user path, there's a site path or a distribution path and a system path.

87
00:08:57,240 --> 00:09:01,720
Different commands are going to show up at each level, and if the user installs something, then

88
00:09:01,720 --> 00:09:05,160
they get a command that's automatically going to be looked up from the user path, and that will

89
00:09:05,400 --> 00:09:09,720
override the lower level ones. It's actually a really good system. Works really nicely.

90
00:09:11,160 --> 00:09:17,640
Windows has a similar kind of path, but it doesn't look like that. The path is designed for system

91
00:09:17,640 --> 00:09:24,520
files, so those are on there. If you install an app and put that on path, then you'll show up

92
00:09:24,520 --> 00:09:30,440
somewhere in that hierarchy the order the files are going to be found. Someone else comes along

93
00:09:30,760 --> 00:09:36,600
and installs their app, and they put theirs on there as well. Someone else got a bonus for being

94
00:09:36,600 --> 00:09:42,680
the most important app in the world, and they get to come first. Which now means that they're

95
00:09:42,680 --> 00:09:48,600
actually more important than system files, and all sorts of things break. But more importantly,

96
00:09:48,600 --> 00:09:52,520
what this means is that if you rely on path or if you tell your users to rely on path,

97
00:09:53,320 --> 00:09:59,080
you are rolling the dice. You're going to get something. You're going to get a message,

98
00:09:59,320 --> 00:10:02,920
and a lot of the time, that something is going to be a crash.

99
00:10:08,440 --> 00:10:15,560
Next assumption is that Python 3 will launch Python. False-ish. Since the last time I gave

100
00:10:15,560 --> 00:10:20,920
this talk, I've actually done some work to fix this. So I'll get to that after this slide, but

101
00:10:21,960 --> 00:10:27,240
in general, for a long time on Windows, Python was not called Python 3. It was not Python 3.7.

102
00:10:27,800 --> 00:10:33,720
It was just Python. Python.exe. And so whenever you see commands online that say just type Python

103
00:10:33,720 --> 00:10:38,840
3, and it will launch Python, that flat out doesn't work on Windows. And what this means

104
00:10:38,840 --> 00:10:42,440
is that for people on platforms where it doesn't work, they try and follow your commands, and they

105
00:10:42,440 --> 00:10:48,280
fail right at the start, and it's very, very rare that there's any instruction to help them work

106
00:10:48,280 --> 00:10:57,000
around it. To make it easier to deal with finding the latest version on Windows, another launcher

107
00:10:57,480 --> 00:11:05,080
called py, which is secretly .exe. This one is guaranteed to be on path, and it has logic in it

108
00:11:05,080 --> 00:11:10,840
to locate and launch the correct version of Python for the particular script. But again,

109
00:11:10,840 --> 00:11:15,960
it's a different name. So your instruction that says use Python 3 or use Py on Windows

110
00:11:15,960 --> 00:11:24,920
now has a switch in it, which is not so great. Unless your users have installed Python from the

111
00:11:25,000 --> 00:11:30,840
Microsoft App Store. So on Windows 10, there is an App Store where you can, rather than installing

112
00:11:30,840 --> 00:11:36,520
packages through a regular installer, they are packaged up by the developers, in this case by the

113
00:11:37,240 --> 00:11:43,000
Python core development team, published to the store, reviewed by Microsoft, and put in their

114
00:11:43,000 --> 00:11:49,560
store so that you can easily access it. This package went up with Python 3.7.2 late last year

115
00:11:49,560 --> 00:11:55,560
and is freely available. It also includes a few added features. This one does include Python 3.

116
00:11:55,560 --> 00:12:01,560
It's Python 3.exe, but that part is optional. So if you give the instruction type Python 3,

117
00:12:01,560 --> 00:12:08,520
sometimes it will work if the user got Python from here. Our hope is that over time, more and more

118
00:12:08,520 --> 00:12:13,560
Windows users will get Python through the store. More and more of those standard commands that

119
00:12:13,560 --> 00:12:18,200
we've been telling people to use on Mac and Linux for years will start to work. Pip also works. Pip

120
00:12:18,200 --> 00:12:26,760
3 also works. Idle also works. Idle 3 works. Idle 3.7 works. However, the regular commands that have

121
00:12:26,760 --> 00:12:32,600
existed forever on POSIX are now available on Windows through this package. So some of this is

122
00:12:32,600 --> 00:12:37,560
getting better. There are still some caveats right now, some aspects of this that we're working

123
00:12:37,560 --> 00:12:42,760
through, but this package is available. So users today are installing Python through the Microsoft

124
00:12:42,840 --> 00:12:49,880
App Store and have access to those more commonly used commands from other platforms.

125
00:12:52,120 --> 00:12:59,320
So the one simple idea. Support dash M. Dash M, if you're not familiar with it, is a feature of Python

126
00:12:59,320 --> 00:13:04,280
that was added quite a while ago at this point. And what it lets you do is it lets you launch a

127
00:13:04,280 --> 00:13:09,160
module by name. Quite often if you install a tool, I'll use black as an example, not because black

128
00:13:09,160 --> 00:13:13,320
ever did this wrong, but because I like black and you should like it as well. If you pip install

129
00:13:13,320 --> 00:13:18,920
black, then you would run that by typing black on the command line. Because things are not always

130
00:13:18,920 --> 00:13:26,680
on path, because Python is not always started with Python or Python 3, you cannot always rely on

131
00:13:26,680 --> 00:13:34,600
black being on path either. But a very common work around for this is launching it as a module,

132
00:13:34,600 --> 00:13:38,680
but that's not automatic for the most part. There's a little bit of work to be done. I'll

133
00:13:38,760 --> 00:13:42,760
let you research that yourself. It's quite simple, but more than I'm going to include right now.

134
00:13:43,800 --> 00:13:48,680
But using dash M to launch that module provides many more ways for users to actually start your

135
00:13:48,680 --> 00:13:52,440
code, to actually use that tool that you've created. You can use it with the Py launcher.

136
00:13:52,440 --> 00:13:57,560
You can use it with a full path to the Python executable. It works better everywhere. There

137
00:13:57,560 --> 00:14:02,440
are certainly cases on Linux systems, on Mac systems, when this is useful as an option.

138
00:14:02,840 --> 00:14:09,240
So add it in and document it. Include in your readme that this works, because then when people

139
00:14:09,240 --> 00:14:14,200
encounter your project and need that alternate way of launching it, they'll know straight away

140
00:14:14,200 --> 00:14:16,680
that it's there and that it will work and help them out.

141
00:14:23,720 --> 00:14:25,720
How do I handle paths?

142
00:14:25,800 --> 00:14:31,480
Okay. Incorrect assumption one. Everyone uses forward slashes. That's false.

143
00:14:36,440 --> 00:14:45,480
Windows uses back slashes most of the time. As it turns out, you can give Windows functions

144
00:14:45,480 --> 00:14:49,080
forward slashes and it will correct them for you, which is very helpful. Unfortunately,

145
00:14:49,080 --> 00:14:54,920
if it ever gives you a path back, it's not going to work. It's going to be a very difficult

146
00:14:55,640 --> 00:14:59,640
it's going to give it to you with back slashes, which means when you wrote this path.split

147
00:15:01,560 --> 00:15:06,760
that's not going to do what you hope it will. That's going to give you one big path element.

148
00:15:09,800 --> 00:15:15,400
Second assumption is that you know how to handle paths. A lot of people think they know how to

149
00:15:15,400 --> 00:15:23,080
handle paths. Okay. Quick pop quiz. What's this? Which path is this? It's root directory.

150
00:15:23,240 --> 00:15:30,200
On Windows, what path is this? Also root directory. This is also a root directory.

151
00:15:31,720 --> 00:15:36,200
This is not a root directory. That's a root directory.

152
00:15:41,000 --> 00:15:45,480
Is your script able to handle that? Have you invested enough in manually managing paths

153
00:15:46,200 --> 00:15:49,400
to be able to handle this? I suspect the answer is no.

154
00:15:49,400 --> 00:15:56,520
So here's a better idea. As of Python 3.4, if I recall correctly, we added pathlib. Pathlib

155
00:15:56,520 --> 00:16:03,320
is an object-oriented module in the standard library for managing paths. It's cross-platform.

156
00:16:03,320 --> 00:16:06,840
It's going to work on any platform that Python works on. It's part of our test suite.

157
00:16:07,720 --> 00:16:11,400
So if Python is running on that system, pathlib is doing the right thing on that system.

158
00:16:12,520 --> 00:16:16,280
So rather than using string manipulation, you can use object-oriented Python.

159
00:16:16,360 --> 00:16:21,560
So rather than using string manipulation, you can use object-oriented methods. You can use some

160
00:16:22,440 --> 00:16:26,920
very neat-looking operator overloading. It will do forward slash and backslash conversions.

161
00:16:26,920 --> 00:16:32,840
It will do case conversions for comparisons. And it has enough functionality, therefore,

162
00:16:32,840 --> 00:16:37,960
very likely whatever it is you need to do to generate the correct paths for your platform.

163
00:16:37,960 --> 00:16:39,960
So we're going to go ahead and start the test.

164
00:16:47,000 --> 00:16:52,520
We very often like to store settings in places, or caches, or logs.

165
00:16:54,760 --> 00:16:59,000
And quite often, these go in the TILD directory, because that's the home directory everywhere,

166
00:16:59,000 --> 00:17:04,760
right? That's false. On Windows, TILD is just a character that you can put into any path,

167
00:17:05,080 --> 00:17:08,920
so if you really want to create a file called that and write settings into it, then

168
00:17:09,480 --> 00:17:12,840
the next program that also does the same thing is going to fight with you for it.

169
00:17:14,040 --> 00:17:20,760
It's not the home directory. But even assuming it was the home directory, is it the best directory?

170
00:17:21,640 --> 00:17:27,320
And the answer to that is definitely false on Windows and almost certainly false on most other

171
00:17:27,320 --> 00:17:32,920
operating systems as well. If you use that and you get as far as the user profile directory,

172
00:17:33,720 --> 00:17:40,840
that is the user's space. That is their space that they own, that they control. And depending

173
00:17:40,840 --> 00:17:43,880
on the platform, that's going to come with different assumptions about what's in there.

174
00:17:43,880 --> 00:17:46,360
To give you some idea of what Windows assumes is in there,

175
00:17:48,680 --> 00:17:54,120
there's at a minimum documents, pictures, videos, probably a few other folders that are for the user.

176
00:17:54,120 --> 00:17:58,520
These are actually user-visible. They can see them, they can edit them, they own the files inside it.

177
00:17:58,520 --> 00:18:03,240
That's their content. At the same time, there's a section for application data.

178
00:18:03,880 --> 00:18:08,360
Users can see this if they want, but for the most part, it's hidden. And it comes with local and

179
00:18:08,360 --> 00:18:13,080
roaming categories and a handful of others. Depending on your system configuration, how

180
00:18:13,720 --> 00:18:17,880
involved your IT department is, they may have very different semantics about where they get backed up

181
00:18:17,880 --> 00:18:25,000
to, when they get copied between machines. There's a lot of semantic information in the directory

182
00:18:25,080 --> 00:18:31,240
where your settings are stored, and getting it right is not as simple as using the user's profile

183
00:18:31,240 --> 00:18:43,880
directory. One simple idea, import apt-dos. It's a very small single file module which you can

184
00:18:43,880 --> 00:18:48,440
easily copy into your project if you don't want to add a dependency. It's very friendly licensed,

185
00:18:48,440 --> 00:18:54,600
and it just gives you some easy functions to find the right place. So whatever platform you're on,

186
00:18:54,600 --> 00:18:59,800
you can use the user data to find the directory to store user data in. Use a config if you're

187
00:18:59,800 --> 00:19:05,480
storing configuration. Machine data, machine configuration, logs, caches. It has some opinions.

188
00:19:05,480 --> 00:19:11,240
They're not necessarily universal opinions. Some platforms define these things, other platforms

189
00:19:11,240 --> 00:19:16,520
don't. But it's going to get you 90 something percent of the way in a way that's going to work

190
00:19:16,520 --> 00:19:27,480
with user expectations for the most part. Okay, which text encoding should I use?

191
00:19:32,440 --> 00:19:37,480
First incorrect assumption, UTF-8 is always the correct encoding, and that's false.

192
00:19:39,480 --> 00:19:45,640
History lesson. Who knows what happened in 1985, and who knows what happened in 1991?

193
00:19:46,760 --> 00:19:54,520
1985, a product called Windows 1.0 was released. As you know, when you lock down the first version,

194
00:19:55,560 --> 00:19:59,400
everything's basically locked down. You can't change it easily. 1991, I think called,

195
00:20:07,400 --> 00:20:10,920
apparently the power cord back here is not providing as much power as I hoped.

196
00:20:11,400 --> 00:20:16,040
Unicode 1.0 was released, 1991. A little bit late to update all of Windows to use a different

197
00:20:16,040 --> 00:20:22,200
system. So what that meant is that Windows comes with essentially two sets of APIs. It has what's

198
00:20:22,200 --> 00:20:28,840
called the A APIs, which take a char star. Those are all encoded in the current code page,

199
00:20:28,840 --> 00:20:34,680
which is a machine-wide setting. Then there's the W APIs, which take UTF-16.

200
00:20:34,680 --> 00:20:40,680
Why UTF-16 and not UTF-8? Okay, second history lesson. What happened in 1993 and what happened

201
00:20:40,680 --> 00:20:48,760
in 1996? Windows NT was actually the first version of Windows that had full Unicode support in the

202
00:20:48,760 --> 00:20:58,600
form of UTF-8, UTF-16. 1996 was when Unicode 2.0 was released that first defined not by

203
00:20:58,920 --> 00:21:02,920
name UTF-8, but it had all of the same semantics. It was later renamed to be UTF-8.

204
00:21:02,920 --> 00:21:08,920
And so again, Windows had already shipped without UTF-8 as a core part of the operating system.

205
00:21:08,920 --> 00:21:16,920
It's too late to go back and add it in. The second assumption is that bytes are not text.

206
00:21:16,920 --> 00:21:20,920
That sounds backwards because we often say that text is not bytes.

207
00:21:21,000 --> 00:21:25,480
But also bytes are not text. There's a common assumption because this works almost all the time on

208
00:21:25,480 --> 00:21:31,000
POSIX systems that if you take a blob of bytes, pass it to the operating system, and get it back,

209
00:21:31,000 --> 00:21:36,760
it will be completely unchanged. But that's a black box. Doesn't hold true everywhere.

210
00:21:36,760 --> 00:21:41,720
And on Windows, doesn't hold true at all because that black box is actually UTF-16.

211
00:21:41,720 --> 00:21:47,240
So that's the second assumption. What happened in the early 2000s?

212
00:21:48,120 --> 00:21:54,120
So the idea is that if you take a black box, pass it to the operating system, it will not hold true

213
00:21:54,120 --> 00:22:00,120
at all because that black box is actually UTF-16. Which means you can take any arbitrary blob of

214
00:22:00,120 --> 00:22:05,960
bytes and the operating system will convert it through an encoding that may be lossy and send

215
00:22:05,960 --> 00:22:11,960
back probably question marks, which means that your round trip no longer works if you're relying on bytes.

216
00:22:12,520 --> 00:22:17,880
So we have a great Strurr type, which as of Python 3 does whatever Unicode you need with

217
00:22:19,640 --> 00:22:23,960
linear time indexing, no matter how big your characters get, so emoji are totally fine.

218
00:22:24,840 --> 00:22:28,600
And Python will do the conversions for whatever operating system you happen to be on. You don't

219
00:22:28,600 --> 00:22:33,400
have to worry about it. Even on a POSIX system where you may get arbitrary bytes that are not

220
00:22:33,400 --> 00:22:38,520
valid Unicode, Strurr is able to do the right conversion if you let Python do its thing.

221
00:22:39,480 --> 00:22:42,360
That said, when you're accessing the contents of a file, that's yours.

222
00:22:43,160 --> 00:22:47,560
Python is not going to tell you what the contents of a file has to look like,

223
00:22:48,840 --> 00:22:53,880
but and so you should refuse the temptation to guess and always specify an encoding.

224
00:22:57,480 --> 00:23:00,280
Question five, how do I make my code work?

225
00:23:00,280 --> 00:23:03,400
False assumption, nobody can install anything on Windows.

226
00:23:04,600 --> 00:23:09,240
That's false. For a long time we've had very good installers on Windows that have been reliable,

227
00:23:09,240 --> 00:23:14,520
that have not required administrative privileges, that have been used by everyone from

228
00:23:15,160 --> 00:23:19,400
individuals at large companies through to IT departments at large companies through to

229
00:23:20,280 --> 00:23:26,600
young students in Africa on 15 year old laptops with great experience in the field of

230
00:23:27,240 --> 00:23:35,160
Windows. Installing Python on Windows is not a problem and with the Microsoft Store package,

231
00:23:35,160 --> 00:23:37,800
it's even easier for people who are on up-to-date systems.

232
00:23:45,960 --> 00:23:47,160
I always struggle with this one.

233
00:23:50,520 --> 00:23:54,680
I can't test on Windows, you can test on Windows. You don't want to.

234
00:23:56,840 --> 00:24:02,920
We saw earlier half the Python user base is trying to test your code on Windows,

235
00:24:04,920 --> 00:24:11,240
so if you think that you can't, sorry that's a personal problem. You can totally test on

236
00:24:11,240 --> 00:24:17,240
Windows, but you have to want to. You have to recognize that you are deliberately crippling

237
00:24:17,240 --> 00:24:24,040
your user base and restricting it down to the people that are most like you by not even making

238
00:24:24,040 --> 00:24:30,600
an attempt to reach out and understand them and empathize with them and run your code as they're

239
00:24:30,600 --> 00:24:38,680
going to be running it. Okay, you get a bonus idea on this one. Two simple ideas. Get continuous

240
00:24:38,680 --> 00:24:45,400
integration or collaborate. There are so many free CI providers out there right now. Azure

241
00:24:45,400 --> 00:24:50,440
Pipelines is one that I'm more than happy to talk to you about. AppBear can also do Windows.

242
00:24:50,920 --> 00:24:55,240
You don't have to actually own Windows. You don't have to own a second machine to be able to do this

243
00:24:55,240 --> 00:25:00,840
testing. So if you have a project that you know people are using and you don't have CI covering

244
00:25:00,840 --> 00:25:07,160
all of the operating systems that your users are using, then there's very few excuses for not being

245
00:25:07,160 --> 00:25:10,920
able to set that up. Like I say, I'm more than happy to help out. Come and chat to me afterwards.

246
00:25:12,200 --> 00:25:15,240
Also, there's a whole lot of Python users that are trying to run your code on Windows,

247
00:25:15,560 --> 00:25:21,960
but they try and they fail and they assume that they're not welcome. All it takes is one message

248
00:25:21,960 --> 00:25:27,480
on your GitHub page saying, hey, I don't have Windows. I need some help. If you can help me,

249
00:25:27,480 --> 00:25:33,240
here's how to get in touch. Get some collaborators. But it does take a deliberate reaching out.

250
00:25:37,560 --> 00:25:40,920
So where to from here? This is the point where you get your camera ready.

251
00:25:41,240 --> 00:25:44,680
So where to from here? This is the point where you get your camera ready.

252
00:25:49,960 --> 00:25:54,280
Next time you go to make a release of your project, run through this checklist. Ask yourself,

253
00:25:54,280 --> 00:25:59,720
does dash M work? If people need to launch my script, how many choices have I given them?

254
00:26:01,000 --> 00:26:08,440
Do I manipulate paths by hand? Do I put configuration in weird or unusual or unreliable places?

255
00:26:10,920 --> 00:26:19,160
Do I keep text in non-string types? And do I have continuous integration? Do I have collaborators?

256
00:26:19,160 --> 00:26:22,280
Do I know that this is going to work before I release it to the world?

257
00:26:25,640 --> 00:26:31,320
Because this bothers me. That's a lot of Python users out there who feel separated from the rest

258
00:26:31,320 --> 00:26:36,200
of the community. Part of that welcome is using the libraries that we write for them, that we

259
00:26:36,200 --> 00:26:46,520
distribute. And when those libraries fail is when they feel left out. Closing this gap is a huge

260
00:26:46,520 --> 00:26:52,040
task. It's going to take a long time. But one simple thing that you can do is the code that

261
00:26:52,040 --> 00:26:58,280
you're releasing, make it work. Make these people in your one small way through your one little

262
00:26:58,280 --> 00:27:04,280
thing that you're sharing with them, make them feel welcome, and make them feel as if you value

263
00:27:04,280 --> 00:27:11,080
them and want them to be using your code. With that, my name is Steve Dower, Python engineer

264
00:27:11,080 --> 00:27:13,720
at Microsoft. Thank you very much.

