1
00:00:00,000 --> 00:00:04,480
We are going to hear from Philip James.

2
00:00:04,480 --> 00:00:10,160
He is giving the elephant and the serpent using Mastodon with Python.

3
00:00:10,160 --> 00:00:13,160
Please welcome Philip.

4
00:00:13,160 --> 00:00:18,040
Hi.

5
00:00:18,040 --> 00:00:19,400
My name is Philip James.

6
00:00:19,400 --> 00:00:21,480
Welcome to the elephant and the serpent.

7
00:00:21,480 --> 00:00:23,600
This time slot is a slot of incredible talks.

8
00:00:23,600 --> 00:00:27,880
And I know you had to choose between myself, Lin Root talking about async, Simon Willison

9
00:00:27,880 --> 00:00:32,240
talking about SQLite APIs, Jacob Kaplan talking about Django and Webpack and a talk about

10
00:00:32,240 --> 00:00:33,680
Django channels.

11
00:00:33,680 --> 00:00:36,760
If any of those talks sound more interesting, feel free to go to one of them.

12
00:00:36,760 --> 00:00:38,320
I promise it will be fine.

13
00:00:38,320 --> 00:00:40,080
If you decide to stick around, thanks.

14
00:00:40,080 --> 00:00:42,960
I really appreciate it.

15
00:00:42,960 --> 00:00:47,920
So this talk is going to be about Mastodon, an open source federated social network and

16
00:00:47,920 --> 00:00:53,120
Python, the community wrapped around a programming language that brings us all here today.

17
00:00:53,120 --> 00:00:54,980
Before we get started, who am I?

18
00:00:55,020 --> 00:00:59,100
Like I said, my name is Philip James and I lead the platform team at Patreon who graciously

19
00:00:59,100 --> 00:01:00,300
support me being here.

20
00:01:00,300 --> 00:01:04,660
I've also given a number of talks at various PyCons across the globe, including a talk

21
00:01:04,660 --> 00:01:07,740
tomorrow with my frequent speaking buddy, Ashish Laroja.

22
00:01:07,740 --> 00:01:14,420
This slide here is from the talk we gave last year at PyCon titled All in the Timing.

23
00:01:14,420 --> 00:01:18,180
I speak about programming and technical topics all over the world because I still believe

24
00:01:18,180 --> 00:01:22,060
that programming is the closest I'll ever come to doing real magic.

25
00:01:22,140 --> 00:01:26,060
I've been programming professionally for over a decade and I still find it somewhat magical

26
00:01:26,060 --> 00:01:29,780
to be able to create something useful out of bits and bytes and computers that we've

27
00:01:29,780 --> 00:01:33,140
tricked into thinking by shoving lightning into them.

28
00:01:33,140 --> 00:01:36,220
Now some people in technology have trouble with the word magic.

29
00:01:36,220 --> 00:01:41,300
When I say magic, I mean something magical in its effect, not necessarily in its cause.

30
00:01:41,300 --> 00:01:44,260
The power that technology brings to the world is magical.

31
00:01:44,260 --> 00:01:47,820
The communities that technology help foster are magical.

32
00:01:47,820 --> 00:01:52,180
Even though we can explain every step that happens, every bit and byte and circuit, it

33
00:01:52,180 --> 00:01:56,820
is magical to the people who use it and still magical to me.

34
00:01:56,820 --> 00:02:00,220
And while I wouldn't call myself an expert on the subject of magic, I know more about

35
00:02:00,220 --> 00:02:02,660
stage magic than most.

36
00:02:02,660 --> 00:02:06,020
That is my username across the vast majority of the internet and I bet there are people

37
00:02:06,020 --> 00:02:09,620
in this room who have seen that name flit across their screen and didn't know who was

38
00:02:09,620 --> 00:02:11,620
on the other end until right now.

39
00:02:11,620 --> 00:02:14,180
Hello, I'm FilDini.

40
00:02:14,180 --> 00:02:17,740
But before FilDini was my internet handle, it was my stage name.

41
00:02:17,740 --> 00:02:21,740
I spent my early teenage years making pocket money by performing as the great FilDini at

42
00:02:21,740 --> 00:02:24,580
birthday parties all over California.

43
00:02:24,580 --> 00:02:28,700
The feeling I got then when I was able to pull off a trick is very similar to the feeling

44
00:02:28,700 --> 00:02:33,420
I get now when making a piece of technology do what I want it to do.

45
00:02:33,420 --> 00:02:37,340
Of course, that string is also instantly recognizable as a Twitter username.

46
00:02:37,340 --> 00:02:38,340
Twitter is magic.

47
00:02:38,340 --> 00:02:42,500
The communities that Twitter fosters, communities that many of us in this room take part of

48
00:02:42,500 --> 00:02:44,980
in a daily basis, are magical.

49
00:02:44,980 --> 00:02:49,740
Through Twitter, we make connections that help us find work, chat with our peers, share

50
00:02:49,740 --> 00:02:53,780
our favorite activities, or sometimes even find love.

51
00:02:53,780 --> 00:02:55,980
Twitter is also magic from an engineering perspective.

52
00:02:55,980 --> 00:02:59,340
It operates on a scale that many of us in this room have trouble fathoming and it mostly

53
00:02:59,340 --> 00:03:00,700
just works.

54
00:03:00,700 --> 00:03:04,940
The magic that exists in programming exists double in systems engineering and large amounts

55
00:03:04,940 --> 00:03:09,300
of it are performed at Twitter on a regular basis.

56
00:03:09,300 --> 00:03:13,420
Twitter is also dark magic, magic that destroys rather than creating.

57
00:03:13,420 --> 00:03:17,820
It's a place where the most misguided amongst us feel free to express every negative opinion,

58
00:03:17,820 --> 00:03:22,980
where we are constantly inundated with reminders of violence or targeted with violence ourselves,

59
00:03:22,980 --> 00:03:26,420
where it seems like the political bombs are always going off, and where it feels like

60
00:03:26,420 --> 00:03:30,660
we have to wade through toxic waste to get to the parts that we like.

61
00:03:30,660 --> 00:03:34,940
All of this happens in a set of systems that are currently using our data, our connections,

62
00:03:34,940 --> 00:03:40,220
and thoughts and ideas to aggregate ourselves and sell us off to advertisers.

63
00:03:40,220 --> 00:03:43,660
And this is because there is a misalignment of incentives with large social networks that

64
00:03:43,660 --> 00:03:45,960
I think cannot be easily resolved.

65
00:03:45,960 --> 00:03:49,540
The people running those social networks want to make money for their work, which is completely

66
00:03:49,540 --> 00:03:50,900
fair.

67
00:03:50,900 --> 00:03:55,020
Most of the people using those social networks don't want to or can't pay for them, but do

68
00:03:55,020 --> 00:03:58,980
want a place to form communities with all their friends already live.

69
00:03:58,980 --> 00:04:02,700
There is still a mental model amongst Internet users that the Internet is free, and it's

70
00:04:02,700 --> 00:04:04,020
hard to blame them.

71
00:04:04,020 --> 00:04:09,340
We in the industry of making the Internet haven't done enough to educate users otherwise.

72
00:04:09,340 --> 00:04:13,700
The piece of black magic that tries to bridge these incentives is advertising.

73
00:04:13,700 --> 00:04:18,500
I don't necessarily believe all advertising is inherently evil, but I do think the advertising

74
00:04:18,500 --> 00:04:24,600
at scale necessary to fund something like Twitter forces companies to make compromises

75
00:04:24,600 --> 00:04:28,780
that are hard to align with the average user's incentives, and which promote either a blind

76
00:04:28,780 --> 00:04:33,060
eye towards or willful encouragement of the dark magic I was talking about earlier.

77
00:04:33,060 --> 00:04:39,300
Towards the end of 2016, I was deeply despairing about all social networks, Twitter especially,

78
00:04:39,300 --> 00:04:41,420
and I thought we were never going to get anything better.

79
00:04:41,420 --> 00:04:46,260
I didn't think there was a way to build a global community online without funding it

80
00:04:46,260 --> 00:04:48,460
through ads.

81
00:04:48,460 --> 00:04:51,100
In early 2017, I discovered Macedon.

82
00:04:51,100 --> 00:04:52,600
Macedon is magic.

83
00:04:52,600 --> 00:04:56,180
Macedon is an open-source social networking platform based on a set of technologies that

84
00:04:56,180 --> 00:05:00,340
are being adopted as open standards for building social networks.

85
00:05:00,340 --> 00:05:04,580
Macedon solves some of the problems of modern social networks by not having any single server.

86
00:05:04,580 --> 00:05:08,520
Instead, anyone can create a server, and that server can federate with any other server

87
00:05:08,520 --> 00:05:10,140
on the network.

88
00:05:10,140 --> 00:05:14,080
Imagine anyone could start their own Twitter server, and you could join that server, but

89
00:05:14,080 --> 00:05:18,160
follow and be followed by anyone on any other server.

90
00:05:18,160 --> 00:05:21,340
Because there's no central service trying to make money from this, there's no tracking

91
00:05:21,340 --> 00:05:26,120
of user data, no ads engine trying to collect data, and each user and server admin has control

92
00:05:26,120 --> 00:05:29,320
over what they see and who they interact with.

93
00:05:29,320 --> 00:05:31,560
Macedon looks like this.

94
00:05:31,560 --> 00:05:33,660
This is the main Macedon web interface.

95
00:05:33,660 --> 00:05:37,000
If you think it looks like an older era tweet deck, you're not wrong.

96
00:05:37,000 --> 00:05:39,440
I know this text is small, and there's a lot going on here.

97
00:05:39,440 --> 00:05:42,720
I'm going to try to explain what's going on column by column.

98
00:05:42,720 --> 00:05:46,240
Also, anywhere I've blurred things out, it's because I felt I didn't have permission to

99
00:05:46,240 --> 00:05:50,840
make them public to the world, even if they might have been public status updates.

100
00:05:50,840 --> 00:05:53,520
This is the main compose bar.

101
00:05:53,520 --> 00:05:57,460
Here you can access your account settings, search hashtags and users, and compose toots.

102
00:05:57,460 --> 00:06:01,200
The standard way to describe a status update in Macedon is toot, mainly because that's

103
00:06:01,200 --> 00:06:03,520
what the button in the software says.

104
00:06:03,520 --> 00:06:07,800
We'll be using toot and status update pretty interchangeably in this talk.

105
00:06:07,800 --> 00:06:11,280
Default Macedon lets users send 500 character updates.

106
00:06:11,280 --> 00:06:15,320
Users can, of course, include emoji in their toots, including per server custom emoji that

107
00:06:15,320 --> 00:06:18,240
still get rendered correctly across all the servers.

108
00:06:18,240 --> 00:06:21,760
There's a robust community of creating and sharing custom emoji across servers.

109
00:06:21,760 --> 00:06:26,840
Toots can have polls, and you can set a visibility and content warning for each of your toots.

110
00:06:26,840 --> 00:06:28,600
A brief word on that.

111
00:06:28,600 --> 00:06:30,280
Content warnings deserve special mention.

112
00:06:30,280 --> 00:06:34,000
If you think your content, what you're trying to share with the world, needs a Twitter warning

113
00:06:34,000 --> 00:06:38,520
so that people can opt into seeing it, or as a spoiler for some pop media, like, say,

114
00:06:38,520 --> 00:06:42,280
end game of gamer or game of thrones, you can hide it behind some text and use it to

115
00:06:42,280 --> 00:06:46,860
chew to see it rather than being confronted with it.

116
00:06:46,860 --> 00:06:49,720
Content warnings and toot visibility make an attempt to solve the problems outlined

117
00:06:49,720 --> 00:06:51,840
in this XKCD.

118
00:06:51,840 --> 00:06:55,480
You can set your toots to be public, unlisted, or followers only.

119
00:06:55,480 --> 00:06:57,440
Public is what it says on the tin.

120
00:06:57,440 --> 00:07:00,480
It's public, but it won't show up in the federated or local timelines.

121
00:07:00,480 --> 00:07:02,000
More on that in a minute.

122
00:07:02,000 --> 00:07:03,300
Followers only is exactly that.

123
00:07:03,300 --> 00:07:08,040
It is only available to your followers.

124
00:07:08,040 --> 00:07:09,840
Speaking of followers, this is the home column.

125
00:07:09,840 --> 00:07:13,200
This is all the toots from all the people you follow, no matter what server they're

126
00:07:13,200 --> 00:07:14,200
on.

127
00:07:14,200 --> 00:07:17,080
You can do all the things you might expect from a social network, like replying, boosting,

128
00:07:17,080 --> 00:07:19,280
and liking.

129
00:07:19,280 --> 00:07:23,200
The local timeline shown here is all the public non-reply toots from people on the same server

130
00:07:23,200 --> 00:07:24,200
as you.

131
00:07:24,200 --> 00:07:27,360
What's being talked about on the local timeline is one of the best ways to judge the community

132
00:07:27,360 --> 00:07:29,480
you've joined on the local server.

133
00:07:29,480 --> 00:07:32,640
Here we can also see an example of marking images with a content warning.

134
00:07:32,640 --> 00:07:36,120
The user has to choose to see this image and therefore gets to choose what they want to

135
00:07:36,120 --> 00:07:39,040
be confronted with in their social media.

136
00:07:39,040 --> 00:07:42,040
The federated timeline is one of the most interesting things about Macedon, and we're

137
00:07:42,040 --> 00:07:45,240
going to talk more about it in a minute.

138
00:07:45,240 --> 00:07:48,340
This timeline is all the public toots your server knows about.

139
00:07:48,340 --> 00:07:53,520
If it gets federated to your server and it's public visibility, it'll end up here, and

140
00:07:53,520 --> 00:07:56,560
it's an incredible way to discover new people to follow and see what the Fediverse as a

141
00:07:56,560 --> 00:07:58,680
whole is talking about.

142
00:07:58,680 --> 00:08:01,960
I've said the word federation a lot, but I haven't really explained it.

143
00:08:01,960 --> 00:08:05,360
To give us all a grasp of what's going on, I'm going to talk about one of the open protocols

144
00:08:05,360 --> 00:08:07,880
that powers Macedon.

145
00:08:07,880 --> 00:08:11,360
Macedon is powered by a technology called Activity Pub, which is currently a recommendation

146
00:08:11,360 --> 00:08:13,400
to the W3C.

147
00:08:13,400 --> 00:08:17,320
Activity Pub is a decentralized social networking protocol, and it powers the vast majority

148
00:08:17,320 --> 00:08:22,560
of the universe of federated social networking sites, collectively known as the Fediverse.

149
00:08:22,560 --> 00:08:26,520
Activity Pub specifies two main pieces, a server-to-server federation protocol and a

150
00:08:26,520 --> 00:08:28,520
client-to-server protocol.

151
00:08:28,520 --> 00:08:31,880
To understand Macedon under the hood, you need to understand Activity Pub, and I'm going

152
00:08:31,880 --> 00:08:36,080
to explain Activity Pub with two of the most famous users in computing history, Alice and

153
00:08:36,080 --> 00:08:37,960
Bob.

154
00:08:37,960 --> 00:08:38,960
This is Alice.

155
00:08:38,960 --> 00:08:41,800
Alice is a user, what Activity Pub calls an actor.

156
00:08:41,800 --> 00:08:45,380
Alice, according to Activity Pub, has an inbox and an outbox.

157
00:08:45,380 --> 00:08:48,900
The inbox receives messages from the rest of the world, and the outbox is where Alice

158
00:08:49,540 --> 00:08:53,140
puts the messages she wants to send to the rest of the world.

159
00:08:53,140 --> 00:08:57,420
Alice's inbox and outbox live in a server, in this case, Macedon.social.

160
00:08:57,420 --> 00:09:01,840
Alice's full username in the Fediverse is at Alice at Macedon.social.

161
00:09:01,840 --> 00:09:06,040
Her client makes API requests against the server to take actions, like getting new messages

162
00:09:06,040 --> 00:09:09,980
from the inbox and posting messages she wants to send to her outbox.

163
00:09:09,980 --> 00:09:13,260
This is the client-to-server protocol.

164
00:09:13,260 --> 00:09:17,180
If Alice wants to send a message to Bob at Macedon.social, she posts a message to her

165
00:09:17,180 --> 00:09:21,660
outbox, which Macedon.social posts to Bob's inbox, which Bob then gets with his client

166
00:09:21,660 --> 00:09:22,660
and reads.

167
00:09:22,660 --> 00:09:26,860
If it feels like email, it is, deliberately so.

168
00:09:26,860 --> 00:09:32,180
If Bob is on a completely different server, this works mostly the same way.

169
00:09:32,180 --> 00:09:35,300
Macedon.social knows how to look up Bob on a different server, and Macedon.social will

170
00:09:35,300 --> 00:09:38,760
post the message to Bob at other servers' inbox.

171
00:09:38,760 --> 00:09:42,980
This is the server-to-server protocol of part of Activity Pub, and in many ways, it really

172
00:09:42,980 --> 00:09:43,980
is that simple.

173
00:09:44,100 --> 00:09:48,340
I'm simplifying somewhat, but not that much.

174
00:09:48,340 --> 00:09:51,660
This server-to-server protocol is the beating heart of Federation.

175
00:09:51,660 --> 00:09:54,660
Every user has a home server, and all the servers know how to talk to each other by

176
00:09:54,660 --> 00:09:59,100
posting to the right inboxes for the right users.

177
00:09:59,100 --> 00:10:02,100
Those of you who have worked with networks probably already understand this, but one

178
00:10:02,100 --> 00:10:06,160
of the benefits of Federation like this is resiliency to any one node in the network

179
00:10:06,160 --> 00:10:07,580
going down.

180
00:10:07,580 --> 00:10:13,340
This has, in fact, happened in the past to the largest English-speaking server, Macedon.social.

181
00:10:13,340 --> 00:10:18,620
Macedon.social has gone hard down for hours, and the rest of the network of servers kind

182
00:10:18,620 --> 00:10:19,820
of didn't notice.

183
00:10:19,820 --> 00:10:22,660
They kept sharing messages and kept the network alive.

184
00:10:22,660 --> 00:10:26,220
When Macedon.social came back up, the other servers attempted to replay messages back

185
00:10:26,220 --> 00:10:29,660
to the right users' inboxes, and the Fediverse rolled merrily along.

186
00:10:29,660 --> 00:10:33,960
Now, yes, messages can get dropped, but the software is smart enough to try really hard

187
00:10:33,960 --> 00:10:37,140
not to let that happen.

188
00:10:37,140 --> 00:10:40,200
This idea also applies to server-to-server moderation.

189
00:10:40,200 --> 00:10:44,400
If one server in the Fediverse decides to become a hotbed for trolls or Nazis, the admins

190
00:10:44,400 --> 00:10:48,160
of the other servers can choose to blacklist that node and prevent that garbage from entering

191
00:10:48,160 --> 00:10:49,160
their users' feeds.

192
00:10:49,160 --> 00:10:53,800
I want to say another word here about the magic of communities.

193
00:10:53,800 --> 00:10:56,380
Magical communities require community norms.

194
00:10:56,380 --> 00:10:59,820
In the modern parlance, this means that communities we belong to have codes of conduct, rules

195
00:10:59,820 --> 00:11:03,720
for how we should behave, and procedures that get followed if we break those rules.

196
00:11:03,720 --> 00:11:06,760
It's interesting to note, from my perspective, that it's only with the rise of sites like

197
00:11:06,760 --> 00:11:11,100
Twitter and Facebook that this has been seen as hotly contested or strange.

198
00:11:11,100 --> 00:11:15,080
When I joined the Internet back in the days of IRC and web forums, the admins and operators

199
00:11:15,080 --> 00:11:19,640
of those spaces had the power to enforce community norms through silencing and banning.

200
00:11:19,640 --> 00:11:23,140
Often this was at the whims of the admin, and I would argue that explicit codes of conduct

201
00:11:23,140 --> 00:11:27,000
make this better by making it clear what is expected of the admins as well as the community

202
00:11:27,000 --> 00:11:28,220
members.

203
00:11:28,220 --> 00:11:31,860
One of the cool things about Macedon is that admins on servers can mute or block entire

204
00:11:31,860 --> 00:11:36,720
remote servers and people on remote servers from interacting with the users of their server.

205
00:11:37,280 --> 00:11:40,680
An admin can enforce what happens on their server even if the users involved are on a

206
00:11:40,680 --> 00:11:42,120
remote server.

207
00:11:42,120 --> 00:11:44,160
This helps make magical communities.

208
00:11:44,160 --> 00:11:47,360
Admins can work with the users they're supporting to make sure the place they're building together

209
00:11:47,360 --> 00:11:50,120
is what everyone is looking for in an Internet home.

210
00:11:50,120 --> 00:11:52,460
Okay, so we have message sending.

211
00:11:52,460 --> 00:11:55,880
We have a federated network of servers, but we're not quite a social network yet.

212
00:11:55,880 --> 00:11:59,800
To power a true social network, we need one more thing, the ability to follow others and

213
00:11:59,800 --> 00:12:01,280
be followed.

214
00:12:01,280 --> 00:12:04,860
Activity Pub has a solution for this, a follower and following collection.

215
00:12:04,860 --> 00:12:07,060
Let's explain with an example.

216
00:12:07,060 --> 00:12:08,660
Bob wants to follow Alice.

217
00:12:08,660 --> 00:12:12,420
He via his server posts a follow action to Alice's inbox.

218
00:12:12,420 --> 00:12:17,180
Alice's server receives the message and adds Bob to Alice's follower collection.

219
00:12:17,180 --> 00:12:19,620
Now that's supposed to say Bob, not Ben.

220
00:12:19,620 --> 00:12:22,020
I have no idea why it says Ben.

221
00:12:22,020 --> 00:12:26,820
Now when Alice posts a message to her followers, Bob is on that list and Alice's server will

222
00:12:26,820 --> 00:12:29,780
post the message to Bob's inbox.

223
00:12:29,780 --> 00:12:31,620
Congrats!

224
00:12:31,620 --> 00:12:34,900
You now know most of what you need to know to understand how Macedon and the whole Fediverse

225
00:12:34,900 --> 00:12:38,060
operate and how all the servers connect to each other.

226
00:12:38,060 --> 00:12:41,500
If you're interested in learning more, definitely check out the Activity Pub Rock site and read

227
00:12:41,500 --> 00:12:42,940
the W3C spec.

228
00:12:42,940 --> 00:12:44,760
It's pretty straightforward.

229
00:12:44,760 --> 00:12:48,220
It's deliberately a simple protocol with a lot of power, and beyond powering Twitter-like

230
00:12:48,220 --> 00:12:52,660
sites like Macedon, the open source community is building alternatives to YouTube, Instagram,

231
00:12:52,660 --> 00:12:56,380
Facebook, and many more off the Activity Pub protocol.

232
00:12:56,380 --> 00:13:00,620
And the cool thing is, because they all speak that protocol, it's like you can follow someone

233
00:13:00,620 --> 00:13:04,860
on YouTube from your Twitter account, or follow someone on Instagram from your YouTube

234
00:13:04,860 --> 00:13:10,540
account because they all speak the same protocol.

235
00:13:10,540 --> 00:13:14,020
Because there is no central server, every Macedon server has a complete set of Macedon

236
00:13:14,020 --> 00:13:15,540
API endpoints.

237
00:13:15,540 --> 00:13:19,420
The Macedon API lets you basically do everything the Macedon web interface lets you do via

238
00:13:19,420 --> 00:13:20,860
the API.

239
00:13:20,860 --> 00:13:24,860
These two bots here use the Macedon API and special characters in the Unicode set to make

240
00:13:24,860 --> 00:13:27,380
aquariums and space scenes.

241
00:13:27,380 --> 00:13:30,540
Bot accounts aren't frowned upon in the network, and there are options in the account settings

242
00:13:30,540 --> 00:13:33,220
on Macedon to mark an account as a bot account.

243
00:13:33,220 --> 00:13:36,300
There are even some servers that are specifically bot-friendly.

244
00:13:36,300 --> 00:13:40,500
Botsin.space hosts some pretty neat art bots that are using the Macedon API on that server

245
00:13:40,500 --> 00:13:44,980
to make the whole Fediverse more interesting.

246
00:13:44,980 --> 00:13:46,980
So let's prove this by building a bot.

247
00:13:46,980 --> 00:13:48,280
What's our bot going to do?

248
00:13:48,280 --> 00:13:51,060
It's going to toot random lines from the Zen of Python.

249
00:13:51,060 --> 00:14:00,780
It's going to live on that botsin.space server since that server is so friendly to bots.

250
00:14:00,780 --> 00:14:06,180
The first thing we're going to need is an OAuth access token for an account on botsin.space.

251
00:14:06,180 --> 00:14:10,740
The Macedon API uses OAuth authorization to make API requests against protected endpoints

252
00:14:10,740 --> 00:14:11,740
like making status updates.

253
00:14:11,740 --> 00:14:15,260
And as a developer, you can choose the right scopes you need for the applications or bots

254
00:14:15,260 --> 00:14:17,200
you're developing.

255
00:14:17,200 --> 00:14:20,580
Fully explaining OAuth is sadly outside the scope of this talk, but I'm happy to chat

256
00:14:20,580 --> 00:14:23,460
about how OAuth works if you come find me afterwards.

257
00:14:23,460 --> 00:14:27,940
The Patreon API which I work on is also protected by OAuth and I help maintain our OAuth integration,

258
00:14:27,940 --> 00:14:30,020
so I'd love to chat with people about how that works.

259
00:14:30,020 --> 00:14:34,420
But we still need an access token, so let's get one from botsin.space.

260
00:14:34,420 --> 00:14:37,580
Let's make sure the video is working.

261
00:14:37,580 --> 00:14:38,580
Yeah.

262
00:14:38,580 --> 00:14:43,380
We're going to start by going into our settings for our botsin.space account, clicking development,

263
00:14:43,380 --> 00:14:47,180
and clicking new application.

264
00:14:47,180 --> 00:14:56,780
Our application needs a name and a website and some scopes to give us the right access.

265
00:14:56,780 --> 00:15:06,100
Since we're going to be the only ones using this app, the default scopes are fine.

266
00:15:06,100 --> 00:15:10,540
Once the app is created, we need the access token that's auto-generated for us.

267
00:15:10,540 --> 00:15:16,500
It's that long hex string that we're copying here.

268
00:15:16,500 --> 00:15:18,340
Note that there isn't really an approval process.

269
00:15:18,340 --> 00:15:23,460
Because every server hosts its own copy of the APIs, anyone can interact with the network

270
00:15:23,460 --> 00:15:26,820
and get kind of full access to the API.

271
00:15:26,820 --> 00:15:30,060
You just make apps on servers and start using them.

272
00:15:30,060 --> 00:15:34,900
With our access token, we can now make requests against the API at botsin.space.

273
00:15:34,900 --> 00:15:38,260
Whenever I'm building a bot, I like to test things in the Python shell first so I can

274
00:15:38,260 --> 00:15:40,580
play around and get a feel for what I'm doing.

275
00:15:40,580 --> 00:15:43,980
As we build our bot, we're going to do the same thing using the Python request library.

276
00:15:44,620 --> 00:15:47,660
Let me fire up a Python 3 shell real quick.

277
00:15:47,660 --> 00:15:51,820
I'm going to import requests in the Python shell.

278
00:15:51,820 --> 00:15:55,580
And then I'm going to make a post request against the botsin.space API with my oauth

279
00:15:55,580 --> 00:15:59,780
access token and a data blob saying what I want the status text to be.

280
00:15:59,780 --> 00:16:04,800
The response came back okay, so I should have successfully posted to botsin.space.

281
00:16:04,800 --> 00:16:06,300
And it turns out I did.

282
00:16:06,300 --> 00:16:09,580
I love using the request library when I'm playing with APIs because I get a feel for

283
00:16:09,580 --> 00:16:13,860
what goes into an API and what kind of responses come out.

284
00:16:13,860 --> 00:16:16,860
But when I'm ready to start building an app, I normally look for a client library for

285
00:16:16,860 --> 00:16:18,620
the API I want to use.

286
00:16:18,620 --> 00:16:22,900
It turns out there is a Python client library for Macedon called Macedon.py.

287
00:16:22,900 --> 00:16:26,620
Macedon.py is a community maintained Python library for Macedon that supports a large

288
00:16:26,620 --> 00:16:28,940
set of features in the Macedon API.

289
00:16:28,940 --> 00:16:32,260
Let's do what we just did in requests in Macedon.py.

290
00:16:32,260 --> 00:16:41,140
So the first thing I'm going to do is pip install Macedon.py, open a Python 3 shell,

291
00:16:42,140 --> 00:16:48,220
the correct class from Macedon.py, and then create an instance that I can use to interact

292
00:16:48,220 --> 00:17:01,340
with the API.

293
00:17:01,340 --> 00:17:09,340
Once I have my instance created, I should be able to use this to toot to botsin.space

294
00:17:09,540 --> 00:17:19,540
using the Zenbot account.

295
00:17:19,540 --> 00:17:26,660
Cool.

296
00:17:26,660 --> 00:17:29,660
In what I get back, I get a URL that should be the toot I just created.

297
00:17:29,660 --> 00:17:34,340
I'm going to use the Python web browser module in the standard library to open the URL directly

298
00:17:34,340 --> 00:17:39,340
that I just basically created by tooting at botsin.space.

299
00:17:39,340 --> 00:17:42,820
Cool.

300
00:17:42,820 --> 00:17:45,420
And there's the toot.

301
00:17:45,420 --> 00:17:48,340
So after that, we have a toot posted to botsin.space.

302
00:17:48,340 --> 00:17:49,980
Hooray!

303
00:17:49,980 --> 00:17:53,420
But you might be wondering why we would use a client library when requests work just as

304
00:17:53,420 --> 00:17:54,420
well.

305
00:17:54,420 --> 00:17:57,500
There's a few great reasons to use a client library that I can think of.

306
00:17:57,500 --> 00:18:01,800
You should use Macedon.py or any good client library because that library will almost certainly

307
00:18:02,360 --> 00:18:04,480
have tests for the functionality it provides.

308
00:18:04,480 --> 00:18:08,160
Tests that you don't have to write for your requests-based code.

309
00:18:08,160 --> 00:18:11,400
Libraries like Macedon.py even provide coverage metrics for their tests so you can make better

310
00:18:11,400 --> 00:18:14,200
choices about how much you trust the library.

311
00:18:14,200 --> 00:18:17,680
The second reason to use a client library is it provides abstractions.

312
00:18:17,680 --> 00:18:21,120
A good client library will translate the response from the API into Python objects that are

313
00:18:21,120 --> 00:18:25,360
easier to use in the rest of your Python code, i.e. translating a JSON response into a Python

314
00:18:25,360 --> 00:18:26,680
object.

315
00:18:26,680 --> 00:18:30,640
As a result of those abstractions, when the API changes and the library updates with the

316
00:18:30,640 --> 00:18:34,240
changes, often you as the developer don't need to worry about it because the abstraction

317
00:18:34,240 --> 00:18:36,880
the library provides hasn't changed.

318
00:18:36,880 --> 00:18:39,160
So why shouldn't we use a client library?

319
00:18:39,160 --> 00:18:42,600
Either because we have special functionality that isn't provided by the library that we

320
00:18:42,600 --> 00:18:46,680
want in our app, or we're really worried about lag between the API updating and the library

321
00:18:46,680 --> 00:18:47,680
updating.

322
00:18:47,680 --> 00:18:51,200
I would say in both those cases, consider committing a patch or diff to the library

323
00:18:51,200 --> 00:18:52,600
before rolling your own.

324
00:18:52,600 --> 00:18:55,480
If the patch is accepted, you get all the benefits of using a library in your special

325
00:18:55,480 --> 00:18:56,960
cases covered.

326
00:18:56,960 --> 00:18:58,920
Okay, we have an access token.

327
00:18:58,920 --> 00:18:59,920
We know how to post toots.

328
00:18:59,920 --> 00:19:02,440
Now we need to wire the Xen of Python into our bot.

329
00:19:02,440 --> 00:19:06,120
We need to get the Xen of Python as strings, randomly choose one of those strings, and

330
00:19:06,120 --> 00:19:09,920
put that string into a toot for our bot.

331
00:19:09,920 --> 00:19:16,040
So again, we're going to start a Python shell, import the Xen of Python by doing import this,

332
00:19:16,040 --> 00:19:34,520
a variable called Xen to the split string of the printed out Xen of Python.

333
00:19:34,520 --> 00:19:37,920
It prints with a bunch of new line characters that we want to split on so that we get the

334
00:19:37,920 --> 00:19:38,920
right strings.

335
00:19:38,920 --> 00:19:41,440
It looks like we've got some decent strings.

336
00:19:42,080 --> 00:19:47,840
We're going to import the random library after importing Macedon in web browser and try to

337
00:19:47,840 --> 00:19:50,880
choose some of those strings at random to make sure that we're actually getting what

338
00:19:50,880 --> 00:19:53,880
we want out of the output.

339
00:19:53,880 --> 00:20:03,880
Okay, that looks pretty good.

340
00:20:03,880 --> 00:20:05,920
Okay.

341
00:20:05,920 --> 00:20:09,640
So it looks like we're correctly choosing strings that can go into our Xen of Python

342
00:20:09,640 --> 00:20:10,840
bot.

343
00:20:10,840 --> 00:20:15,920
We're going to create an instance of the Macedon API like we did previously to post the toot

344
00:20:15,920 --> 00:20:35,480
and then compose a toot using one of the random strings that we chose.

345
00:20:35,480 --> 00:20:40,720
One of the nice things about the Macedon client library is that you can specify an

346
00:20:40,720 --> 00:20:44,600
API base URL and potentially use multiple base URLs if you are maintaining multiple

347
00:20:44,600 --> 00:20:48,940
clients for like a larger scale application instead of having to hard code that every

348
00:20:48,940 --> 00:20:53,640
time you want to use it with requests.

349
00:20:53,640 --> 00:20:57,800
So our toot is going to say the Xen of Python says and then some new lines and then use

350
00:20:57,800 --> 00:21:04,640
the magic of F strings to do random.choice on the Xen string.

351
00:21:04,640 --> 00:21:12,240
We'll toot that and then open the result in the web browser so that we can see it again.

352
00:21:12,240 --> 00:21:13,240
Cool.

353
00:21:13,240 --> 00:21:20,440
It got a little cut off, but there we go.

354
00:21:20,440 --> 00:21:25,940
We have created a little Xen bot that's tooting strings from the Xen of Python.

355
00:21:25,940 --> 00:21:31,840
This is the full script that I would be running if I wanted to have this running in the background.

356
00:21:31,840 --> 00:21:40,000
We don't the import random got cut off at the top and I'm using OS.getend because I

357
00:21:40,000 --> 00:21:43,760
want the access token not necessarily live in the script in case I check it into GitHub.

358
00:21:43,760 --> 00:21:46,800
I want it to be an environment variable that I can set somewhere else.

359
00:21:46,800 --> 00:21:51,120
But it's deliberately a pretty simple script because writing bots should be kind of a fun

360
00:21:51,120 --> 00:21:52,120
and simple activity.

361
00:21:52,120 --> 00:21:57,760
Another thing that I could do with the Macedon API through Macedon.py is look for replies

362
00:21:57,760 --> 00:22:02,840
to my bot and then respond to those replies or modulate my responses based on the replies.

363
00:22:02,840 --> 00:22:03,840
Okay.

364
00:22:03,840 --> 00:22:07,520
So now that we have our bot, where do we host it?

365
00:22:07,520 --> 00:22:09,120
Lots of places are options.

366
00:22:09,120 --> 00:22:12,360
If you only want it to run when your laptop is open, you can have it running in the background

367
00:22:12,360 --> 00:22:14,200
of your laptop with cron.

368
00:22:14,200 --> 00:22:16,200
That works for Mac and Linux.

369
00:22:16,200 --> 00:22:20,560
For Windows, you can use some Windows scheduling daemon things, but that's a little bit more

370
00:22:20,560 --> 00:22:21,560
complicated.

371
00:22:21,560 --> 00:22:25,000
If you have a server just laying around that you own, again, you can use that server in

372
00:22:25,000 --> 00:22:26,000
cron.

373
00:22:26,000 --> 00:22:31,640
My actual favorite way to host bots is to use Heroku plus the Heroku scheduler to run

374
00:22:31,640 --> 00:22:37,480
just a worker dino with the bot script on some sort of regular interval.

375
00:22:37,480 --> 00:22:39,820
With Heroku, you don't need to be running a web application.

376
00:22:39,820 --> 00:22:43,440
It can run background tasks just fine.

377
00:22:43,440 --> 00:22:45,120
Okay.

378
00:22:45,120 --> 00:22:48,840
All of that covered, how do you choose a server to be on?

379
00:22:48,840 --> 00:22:51,720
Hopefully by this point, I've convinced you to at least give Macedon a try.

380
00:22:51,720 --> 00:22:54,440
How do you know where you should be?

381
00:22:54,440 --> 00:22:57,720
The first thing you should do is go to join Macedon.org.

382
00:22:57,720 --> 00:22:59,800
There's some considerations.

383
00:22:59,800 --> 00:23:03,080
Because you can follow more or less anyone on more or less any server, the choice of

384
00:23:03,080 --> 00:23:08,240
which server to set up your account on becomes one of which community you want to most closely

385
00:23:08,240 --> 00:23:09,840
associate with.

386
00:23:09,840 --> 00:23:13,400
Generally speaking, you should find servers where you feel like you could find a home

387
00:23:13,400 --> 00:23:17,120
that have a good code of conduct and where the admins feel like they're on top of things.

388
00:23:17,120 --> 00:23:21,000
For example, I run a server called the wandering shop that accepts all kinds of people but

389
00:23:21,000 --> 00:23:24,840
is focused on people who enjoy or create science fiction and fantasy.

390
00:23:24,840 --> 00:23:27,320
If you want to learn more about that server, find me afterwards.

391
00:23:27,320 --> 00:23:31,280
Also, you can always try different servers out, have multiple identities, and ask your

392
00:23:31,280 --> 00:23:33,720
followers to follow you at a different server.

393
00:23:33,720 --> 00:23:37,040
Macedon even provides some tools for making this easier.

394
00:23:37,040 --> 00:23:39,760
Okay.

395
00:23:39,760 --> 00:23:41,240
That's basically it.

396
00:23:41,240 --> 00:23:45,600
So after this talk, what I want you to do is find a server, join the community, build

397
00:23:45,600 --> 00:23:48,120
a bot, and help make some magic.

398
00:23:48,120 --> 00:23:52,120
That top line there is my email address, phildini.net.

399
00:23:52,120 --> 00:23:54,520
I'm also at phildini at wandering.shop.

400
00:23:54,520 --> 00:23:56,760
And if you want to find me on Twitter, I'm at phildini.

401
00:23:56,760 --> 00:24:02,920
In this room tomorrow at 1 10, I'm going to be doing a talk with my co-presenter on account

402
00:24:02,920 --> 00:24:05,680
security best practices for Python web applications.

403
00:24:05,680 --> 00:24:08,640
And I think we do have a little bit of time for questions.

404
00:24:08,640 --> 00:24:09,640
Thanks.

405
00:24:09,640 --> 00:24:22,520
Do I see someone with a question?

406
00:24:22,520 --> 00:24:23,520
Yeah, great.

407
00:24:23,520 --> 00:24:24,520
Step up to the mic.

408
00:24:24,520 --> 00:24:27,000
I will say your question needs to be in the form of a question.

409
00:24:27,000 --> 00:24:29,200
If you have something that's not a question, come find me afterwards.

410
00:24:29,200 --> 00:24:30,200
Okay.

411
00:24:30,200 --> 00:24:33,000
So there are a lot of social media networks.

412
00:24:33,000 --> 00:24:39,200
How do you recommend that we get people involved necessarily in Mastodon, prying their Twitter

413
00:24:39,200 --> 00:24:41,760
out of their cold, dead hands?

414
00:24:41,760 --> 00:24:47,840
So Mastodon has some tools for helping with this, including a Twitter user follower where

415
00:24:47,840 --> 00:24:53,120
you can log in with your Twitter account and see which of your friends already have Mastodon

416
00:24:53,120 --> 00:24:54,120
accounts.

417
00:24:54,120 --> 00:24:56,560
That's one way to encourage people to start porting things over.

418
00:24:56,560 --> 00:25:01,480
There also are Twitter cross posters going in both directions, so you can still maintain

419
00:25:01,480 --> 00:25:03,960
a presence on both sides.

420
00:25:03,960 --> 00:25:07,720
In terms of how do we start moving people over, I'll be honest.

421
00:25:07,720 --> 00:25:12,080
One of the reasons I gave this talk is to show off Mastodon, to show how interesting

422
00:25:12,080 --> 00:25:16,020
and easy it is to make bots and interact with it as programmers, but also to encourage people

423
00:25:16,020 --> 00:25:17,600
to start using it.

424
00:25:17,600 --> 00:25:21,040
There was a time when no one in this room used Twitter because either Twitter didn't

425
00:25:21,040 --> 00:25:24,720
exist or Twitter was still so new that it didn't feel like something that people wanted

426
00:25:24,720 --> 00:25:25,720
to use.

427
00:25:25,720 --> 00:25:29,480
So I think it's one of those things where the more we build the network there, the easier

428
00:25:29,480 --> 00:25:33,560
it's going to be to convince people to move to that network.

429
00:25:33,560 --> 00:25:40,960
For me, it has the best combination of old school IRC chat rooms and forums where it

430
00:25:40,960 --> 00:25:46,600
felt like a very tight community that people had control over, but you still have access

431
00:25:46,600 --> 00:25:49,560
to the whole universe if you want that.

432
00:25:49,560 --> 00:25:53,800
We'll switch, so we'll go to you.

433
00:25:53,800 --> 00:26:00,080
In the Mastodon server that you helped moderate, have you encountered some of the darker people

434
00:26:00,520 --> 00:26:05,720
who are doing some not so nice things on the internet and how have you managed that and

435
00:26:05,720 --> 00:26:08,920
what kind of overhead is associated with that?

436
00:26:08,920 --> 00:26:09,920
That's a great question.

437
00:26:09,920 --> 00:26:14,400
I admin a server called the Wandering Shop that has about 1,500 users.

438
00:26:14,400 --> 00:26:19,160
By the way, the Mastodon community as a whole, I think, is getting close to 2 million total

439
00:26:19,160 --> 00:26:23,560
users, so it's not Twitter scale, but it's also not tiny.

440
00:26:23,560 --> 00:26:27,000
A lot of those servers are English speaking, but also there's a huge chunk that's French

441
00:26:27,000 --> 00:26:28,000
speaking.

442
00:26:28,000 --> 00:26:29,520
There's a massive chunk that speaks Japanese.

443
00:26:29,600 --> 00:26:32,560
I think we have users in most countries at this point.

444
00:26:32,560 --> 00:26:39,480
In terms of my admin overhead, it's less than an hour a week, realistically speaking.

445
00:26:39,480 --> 00:26:41,520
Have I seen those dark corners of the internet?

446
00:26:41,520 --> 00:26:42,920
Yes, 100%.

447
00:26:42,920 --> 00:26:48,160
There is a community of administrators that shares tips on, hey, this server seems bad.

448
00:26:48,160 --> 00:26:52,320
One of the nice things is because everyone on the server that I run has opted into the

449
00:26:52,320 --> 00:26:59,040
code of conduct, as an admin, I feel pretty okay just like whole on blocking or banning

450
00:26:59,040 --> 00:27:02,720
servers that are deliberately not following our code of conduct.

451
00:27:02,720 --> 00:27:09,080
There are some that are deliberately, we are a server that is full of free speech for Nazis,

452
00:27:09,080 --> 00:27:11,080
and I'm like, well, that's an easy instant block.

453
00:27:11,080 --> 00:27:15,160
We never want to see any of you have a great life.

454
00:27:15,160 --> 00:27:17,680
That's the kind of cool that you can do that.

455
00:27:17,680 --> 00:27:21,320
The Wandering Shop has blocked probably a dozen servers, like hard block.

456
00:27:21,320 --> 00:27:24,520
Nope, sorry, you're not going to be good members of the community.

457
00:27:24,520 --> 00:27:27,600
You can still be part of the rest of the Fetaverse, but you're not welcome here.

458
00:27:27,600 --> 00:27:29,160
It's cool that you can do that.

459
00:27:29,160 --> 00:27:34,560
You can also do that as a per user basis where you can, like, as a user say, I, as the user

460
00:27:34,560 --> 00:27:36,280
account, don't want to see anything from this server.

461
00:27:36,280 --> 00:27:37,280
Go away.

462
00:27:37,280 --> 00:27:44,000
Additionally, when you make a report on a Toot, it goes both to your server admin and

463
00:27:44,000 --> 00:27:48,840
the admin of whatever server the account that made the Toot is hosted on.

464
00:27:48,840 --> 00:27:52,080
There's a community of moderation as well, which is pretty cool to see.

465
00:27:52,080 --> 00:27:56,760
In fact, recently, we just blocked, the admin community just blocked a server that was refusing

466
00:27:56,800 --> 00:27:58,360
to accept reports on their users.

467
00:27:58,360 --> 00:28:02,360
And we're like, if you're not going to follow safe reporting practices, you don't get to play in our sandbox.

468
00:28:03,720 --> 00:28:04,920
Hi.

469
00:28:04,920 --> 00:28:07,000
Hello.

470
00:28:07,000 --> 00:28:08,840
My this kind of compound question.

471
00:28:08,840 --> 00:28:16,040
First is, what is the kind of the age demographic for Macedon user?

472
00:28:16,040 --> 00:28:18,280
Is that something that you're aware of?

473
00:28:18,280 --> 00:28:22,240
And the second is, do you remember FidoNet?

474
00:28:22,240 --> 00:28:25,640
Do I remember FidoNet?

475
00:28:25,720 --> 00:28:28,920
Vaguely not very well.

476
00:28:28,920 --> 00:28:29,920
Age demographics.

477
00:28:29,920 --> 00:28:33,640
One thing I forgot to mention, especially since people are starting to filter out, which

478
00:28:33,640 --> 00:28:34,640
is totally okay.

479
00:28:34,640 --> 00:28:37,600
I'm still impressed you all chose this talk.

480
00:28:37,600 --> 00:28:42,880
There is going to be a Macedon open space at 3 p.m. in room.

481
00:28:42,880 --> 00:28:43,880
Check the board.

482
00:28:43,880 --> 00:28:44,880
In room, check the board.

483
00:28:44,880 --> 00:28:47,600
If you're interested in learning more about Macedon, a couple of people who are using

484
00:28:47,600 --> 00:28:50,280
the software are going to be there.

485
00:28:50,280 --> 00:28:51,840
So definitely go check that out.

486
00:28:51,840 --> 00:28:53,440
Average age demographics.

487
00:28:53,440 --> 00:28:54,600
It runs the gamut.

488
00:28:54,600 --> 00:29:04,080
I would say that the average age of a Macedon user is probably, let's just call it millennial.

489
00:29:04,080 --> 00:29:07,560
But I've seen literally the gamut.

490
00:29:07,560 --> 00:29:09,560
There is, yeah.

491
00:29:09,560 --> 00:29:10,560
Yeah.

492
00:29:10,560 --> 00:29:11,560
Hi.

493
00:29:11,560 --> 00:29:12,560
Hi.

494
00:29:12,560 --> 00:29:17,360
I remember FidoNet.

495
00:29:17,360 --> 00:29:23,320
But my question is, would you speak a half a second or so about standing up a Macedon

496
00:29:23,320 --> 00:29:24,320
server?

497
00:29:25,040 --> 00:29:26,280
Yeah, absolutely.

498
00:29:26,280 --> 00:29:31,760
So there's three main ways to do it right now.

499
00:29:31,760 --> 00:29:36,680
One is there are a lot of hosting providers that are providing Macedon packages.

500
00:29:36,680 --> 00:29:41,360
I think DigitalOcean now has a built-in droplet for it, which is click button, receive Macedon.

501
00:29:41,360 --> 00:29:46,880
There's also a site called Masto.host, which is like this is what we do as Macedon as a

502
00:29:46,880 --> 00:29:47,880
service almost.

503
00:29:47,880 --> 00:29:50,320
You can stand up your own Macedon server and pay them 20 bucks a month.

504
00:29:50,320 --> 00:29:51,320
It's like, here you go.

505
00:29:51,320 --> 00:29:52,800
I have a Macedon server.

506
00:29:53,280 --> 00:29:55,200
There's two if you really want to get into it.

507
00:29:55,200 --> 00:29:58,920
And actually, those services didn't exist when I was spinning up the wandering shop.

508
00:29:58,920 --> 00:30:05,040
So the way that I do it is I have a DigitalOcean server that's running the Macedon Docker compose

509
00:30:05,040 --> 00:30:08,840
configuration because there is a Docker compose configuration and Docker images that are maintained

510
00:30:08,840 --> 00:30:10,200
by the project.

511
00:30:10,200 --> 00:30:17,220
And then there's a I am committed to systems administration way to run the application

512
00:30:17,220 --> 00:30:20,760
with the full NGINX config and maintaining your own Postgres and that kind of thing.

513
00:30:20,760 --> 00:30:24,040
So I am a very lazy systems administrator.

514
00:30:24,040 --> 00:30:25,840
And so Docker compose.

515
00:30:25,840 --> 00:30:26,840
Thanks.

516
00:30:26,840 --> 00:30:27,840
Yep.

517
00:30:27,840 --> 00:30:28,840
Hi.

518
00:30:28,840 --> 00:30:29,840
Thank you for the talk.

519
00:30:29,840 --> 00:30:32,840
And I think everybody's a lazy system admin.

520
00:30:32,840 --> 00:30:35,440
It's part of the job.

521
00:30:35,440 --> 00:30:40,400
My question was you talked about this being sort of similar to IRC where you can get to

522
00:30:40,400 --> 00:30:41,400
everything.

523
00:30:41,400 --> 00:30:46,120
Do you see it as a replacement for IRC, especially given that Mozilla is saying, OK, we can't

524
00:30:46,120 --> 00:30:47,120
support this anymore.

525
00:30:47,120 --> 00:30:50,120
I think we can't use it as our internal communications.

526
00:30:50,120 --> 00:30:52,320
Do you see this as being a real time communication platform?

527
00:30:52,320 --> 00:30:55,480
Do you see this being a sort of offline social network?

528
00:30:55,480 --> 00:30:58,680
How do you see this filling that space?

529
00:30:58,680 --> 00:31:00,160
That's a great question.

530
00:31:00,160 --> 00:31:07,560
I would call it closer to a social network but not a real time communication platform.

531
00:31:07,560 --> 00:31:12,880
And Activity Pub, if you're willing to poll a whole bunch, it can work in real time.

532
00:31:12,880 --> 00:31:16,320
But Activity Pub isn't necessarily designed for real time communication.

533
00:31:16,920 --> 00:31:20,800
It's designed for status updates and all of the possible things you can fit in a status

534
00:31:20,800 --> 00:31:25,640
update, like a follow request or a media request or posting a video.

535
00:31:25,640 --> 00:31:28,040
The thing that I haven't seen anybody build yet that I'm really looking forward to is

536
00:31:28,040 --> 00:31:33,760
some sort of event solution off of Activity Pub.

537
00:31:33,760 --> 00:31:37,080
What?

538
00:31:37,080 --> 00:31:40,680
So I don't think it's designed for real time.

539
00:31:40,680 --> 00:31:45,400
In terms of what's out there for real time in the open source space right now, there's

540
00:31:45,480 --> 00:31:47,640
going to be a ton of competing solutions.

541
00:31:47,640 --> 00:31:54,320
Probably the closest that we have to a real true end to end open source, viable alternative

542
00:31:54,320 --> 00:32:03,800
to modern proprietary chat systems is Matrix, quite honestly.

543
00:32:03,800 --> 00:32:07,360
They've been in the news a lot recently for some unfortunate reasons, but I still think

544
00:32:07,360 --> 00:32:11,960
that they probably are the best shot at a full end to end open source chat solution

545
00:32:11,960 --> 00:32:17,240
that can speak to all the protocols and still has a nice user interface and all that kind

546
00:32:17,240 --> 00:32:18,240
of stuff.

547
00:32:18,240 --> 00:32:19,240
Thank you very much.

548
00:32:19,240 --> 00:32:20,240
Thank you for the talk.

549
00:32:20,240 --> 00:32:21,240
Also Zulip.

550
00:32:21,240 --> 00:32:23,960
Yeah, thank you.

551
00:32:23,960 --> 00:32:24,960
Last question.

552
00:32:24,960 --> 00:32:26,880
Hi, thanks again for the talk.

553
00:32:26,880 --> 00:32:28,680
Kind of a quick question for you.

554
00:32:28,680 --> 00:32:32,440
Why do you still use Twitter while continuing to use Mastodon?

555
00:32:32,440 --> 00:32:39,560
For exactly related to the first question that was asked, I still use Twitter because

556
00:32:39,560 --> 00:32:44,960
most of my friends, especially my friends in tech, are still primarily posting to Twitter.

557
00:32:44,960 --> 00:32:48,960
As soon as I can get a critical mass of my friends to use Mastodon, and trust me, I encourage

558
00:32:48,960 --> 00:32:53,160
them on a regular basis to do so, I will happily turn off my Twitter account.

559
00:32:53,160 --> 00:32:58,240
The thing that I have done, which makes Twitter amazingly better, and there's even a little

560
00:32:58,240 --> 00:33:01,880
glitch app that you can Google for that will kind of auto do this for all your followers,

561
00:33:01,880 --> 00:33:03,420
turn off retweets.

562
00:33:03,420 --> 00:33:08,480
It turns out that the content that the people you follow are posting directly is often incredible

563
00:33:08,480 --> 00:33:13,120
content and all of the stuff that gets retweeted is like rage bait.

564
00:33:13,120 --> 00:33:17,360
So honestly, turning off Twitter has made Twitter a much better user experience in terms

565
00:33:17,360 --> 00:33:20,900
of like my happiness with the platform.

566
00:33:20,900 --> 00:33:25,160
But it still has some of the like dark magic that I talked about at the beginning in terms

567
00:33:25,160 --> 00:33:28,800
of being ads funded and what it allows and doesn't allow on the platform.

568
00:33:28,800 --> 00:33:35,840
But the reality is like here, if I were to search for the PyCon 2019 hashtag on Mastodon,

569
00:33:35,840 --> 00:33:40,760
it wouldn't be anywhere near the volume of searching for the PyCon 2019 hashtag on Twitter,

570
00:33:40,760 --> 00:33:41,760
right?

571
00:33:41,760 --> 00:33:45,640
And so while I would love for everybody to move, I also don't think it's reasonable to

572
00:33:45,640 --> 00:33:48,720
ask people to cut themselves off from the conversation.

573
00:33:48,720 --> 00:33:51,320
We should still have the conversation in the place where the conversation is, but we should

574
00:33:51,320 --> 00:33:55,160
be encouraging people to kind of like evaluate their social media choices and maybe move

575
00:33:55,160 --> 00:33:59,560
to a platform that has better community ideals.

576
00:33:59,560 --> 00:34:00,560
All right.

577
00:34:00,560 --> 00:34:01,560
Thanks, everybody.

578
00:34:01,560 --> 00:34:03,820
I think I'm going to call it there.

579
00:34:03,820 --> 00:34:05,580
Have a great rest of your PyCon and maybe see you tomorrow.

