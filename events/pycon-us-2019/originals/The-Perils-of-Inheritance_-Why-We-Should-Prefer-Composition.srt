1
00:00:00,000 --> 00:00:05,560
Please join me in welcoming Ariel Hortes, who will be presenting the Perils of Inheritance,

2
00:00:05,560 --> 00:00:08,440
Why We Should Prefer Composition.

3
00:00:08,440 --> 00:00:12,000
Thank you.

4
00:00:12,000 --> 00:00:18,440
Hi there.

5
00:00:18,440 --> 00:00:22,800
Just a quick notice, this is where you can download the slides.

6
00:00:22,800 --> 00:00:29,960
I prefer to put them right now because I oftentimes finish the presentation and don't have time

7
00:00:29,960 --> 00:00:30,960
left.

8
00:00:30,960 --> 00:00:37,640
So if you think you might need it, there's a QR code and there's the shortened URL there

9
00:00:37,640 --> 00:00:38,640
available.

10
00:00:38,640 --> 00:00:39,640
Okay?

11
00:00:39,640 --> 00:00:42,880
So I'll leave it a few seconds.

12
00:00:42,880 --> 00:00:46,120
Thank you very much for coming to this talk.

13
00:00:46,120 --> 00:00:49,800
As the presenter just said, my name is Ariel Hortes.

14
00:00:49,800 --> 00:00:52,440
I come from Mexico.

15
00:00:52,440 --> 00:00:58,280
I work at the Tecnologico de Monterrey, the Monterrey Tech, which is a private university

16
00:00:58,280 --> 00:00:59,280
in Mexico.

17
00:00:59,440 --> 00:01:06,600
One of the most important private universities in the south of Borden.

18
00:01:06,600 --> 00:01:14,960
I'm going to talk on this topic that has to do with the perils of inheritance and why

19
00:01:14,960 --> 00:01:17,120
we should prefer composition.

20
00:01:17,120 --> 00:01:26,440
So yesterday I was actually practicing a little bit my presentation and I really heard the

21
00:01:26,440 --> 00:01:31,520
name of the presentation out loud and said, well, this really sounds like click bait.

22
00:01:31,520 --> 00:01:39,280
I could have just as well put as a title the four dangers of inheritance and why you should

23
00:01:39,280 --> 00:01:45,280
avoid it and you won't believe number three or something like that.

24
00:01:45,280 --> 00:01:50,960
But it wasn't really my intention to make it a click bait, so I apologize if it sounds

25
00:01:50,960 --> 00:01:54,260
like that.

26
00:01:54,260 --> 00:01:58,940
So I'm a full time faculty member.

27
00:01:58,940 --> 00:02:06,300
I've been teaching computer science for more than 30 years and I've been using many, many

28
00:02:06,300 --> 00:02:07,300
languages.

29
00:02:07,300 --> 00:02:12,700
Python is one of them and it's one of the ones that I actually prefer to work with.

30
00:02:12,700 --> 00:02:19,820
But specifically using Python, I've used it in classes like data structures and CS1 and

31
00:02:19,820 --> 00:02:22,420
even web development and compiler construction.

32
00:02:22,420 --> 00:02:26,940
So we've had a chance to actually work pretty nicely with Python.

33
00:02:26,940 --> 00:02:33,580
I started working with Python version 2.0, somewhere I think around was the year 2001.

34
00:02:33,580 --> 00:02:40,140
So we've been able to see the evolution of the language in the last two decades.

35
00:02:40,140 --> 00:02:47,140
So let's go and start talking about what we care about in this presentation.

36
00:02:47,140 --> 00:02:52,180
So we need to define two specific concepts.

37
00:02:52,180 --> 00:02:55,480
One is inheritance and the other one is composition.

38
00:02:55,480 --> 00:02:59,980
So let's quickly look and see what they are.

39
00:02:59,980 --> 00:03:03,260
In the case of inheritance, we have this kind of relation.

40
00:03:03,260 --> 00:03:04,460
We have two classes.

41
00:03:04,460 --> 00:03:07,700
One we refer to as the base class.

42
00:03:07,700 --> 00:03:13,900
The other one is referred as the derived class.

43
00:03:13,900 --> 00:03:17,880
Let me see if we can put a little pointer here.

44
00:03:17,880 --> 00:03:22,560
So these sometimes actually come with different, with other names.

45
00:03:22,560 --> 00:03:27,680
Sometimes the base class is referred as the super class and the derived class is also

46
00:03:27,680 --> 00:03:30,640
referred as the sub class.

47
00:03:30,640 --> 00:03:32,920
So this is inheritance.

48
00:03:32,920 --> 00:03:40,720
Basically you have a certain amount of attributes, could be methods or instance variables and

49
00:03:40,720 --> 00:03:44,400
all of them are actually inherited to the derived class.

50
00:03:44,400 --> 00:03:48,480
So instances of this class basically has everything that this one has.

51
00:03:48,480 --> 00:03:54,200
Plus you can add some additional information if you want or additional attributes.

52
00:03:54,200 --> 00:03:55,200
Composition looks like this.

53
00:03:55,200 --> 00:04:04,320
Instead of using a triangle in the UML notation, we use a diamond and the one who's containing

54
00:04:04,320 --> 00:04:07,640
the other object, we call it the composite.

55
00:04:07,640 --> 00:04:10,360
Also it might be referred as the wrapper.

56
00:04:10,360 --> 00:04:12,700
And we have the component.

57
00:04:12,700 --> 00:04:19,580
This is what we are actually making or building our object with, the composite object.

58
00:04:19,580 --> 00:04:26,180
So if this one is known as a wrapper, some people actually call this the wrappy.

59
00:04:26,180 --> 00:04:27,540
So this is composition.

60
00:04:27,540 --> 00:04:29,500
So how does this look in Python?

61
00:04:29,500 --> 00:04:31,900
It's very straightforward.

62
00:04:31,900 --> 00:04:33,580
Probably most of you are fairly familiar.

63
00:04:33,580 --> 00:04:39,420
So here we have a syntactic example of how you would look at inheritance.

64
00:04:39,420 --> 00:04:43,820
Here you have a class called vehicle and you have a bicycle.

65
00:04:43,820 --> 00:04:48,360
So in this case you say that a bicycle is a vehicle.

66
00:04:48,360 --> 00:04:51,940
So in the case of inheritance you have an is a relationship.

67
00:04:51,940 --> 00:04:58,500
In the case of composition, here you have a class called engine and a class called car.

68
00:04:58,500 --> 00:05:01,380
And we say that a car has an engine.

69
00:05:01,380 --> 00:05:07,420
So in that case we're having a composition or a composite relationship there.

70
00:05:07,420 --> 00:05:14,340
So here, as you can see in the dunder init method, we're actually calling the initialization

71
00:05:14,340 --> 00:05:16,020
or construction of the engine.

72
00:05:16,020 --> 00:05:20,380
That information or that reference to that object could also be sent as part of this

73
00:05:20,380 --> 00:05:21,380
method.

74
00:05:21,380 --> 00:05:23,620
It really depends how we want to implement it.

75
00:05:23,620 --> 00:05:31,100
But that's the general idea between these two concepts, inheritance and composition.

76
00:05:31,100 --> 00:05:37,580
So this specific design suggestion or design principle or guideline, whatever you want

77
00:05:37,580 --> 00:05:42,140
to call it, which is favored composition over class inheritance, this actually appeared

78
00:05:42,140 --> 00:05:44,700
many years ago, more than two decades.

79
00:05:44,700 --> 00:05:50,300
And it was made popular in this book called Design Patterns, Elements of Reusable Object-Oriented

80
00:05:50,300 --> 00:05:51,720
Software.

81
00:05:51,720 --> 00:05:56,820
This was written by the Gang of Four, as it was actually called.

82
00:05:56,820 --> 00:06:05,180
This group of four people were Eric Gamma, Richard Helm, Ralph Johnson, and John Vlissitus.

83
00:06:05,180 --> 00:06:13,360
So in the first chapter of this book, they set certain suggestions or guiding principles

84
00:06:13,360 --> 00:06:21,420
that allowed them to explain how they went on presenting this catalog of design patterns.

85
00:06:21,420 --> 00:06:25,980
And one of the suggestions that they made from the very start was, should favor object

86
00:06:26,140 --> 00:06:28,580
composition over class inheritance.

87
00:06:28,580 --> 00:06:35,460
And this was an important situation because at that moment, most of the people were using

88
00:06:35,460 --> 00:06:38,860
inheritance almost for everything that had to do with reuse.

89
00:06:38,860 --> 00:06:41,660
And composition was a concept that not many people knew.

90
00:06:41,660 --> 00:06:47,580
Now, interesting thing is that even more than 20 years afterwards, most people tend to use

91
00:06:47,580 --> 00:06:55,900
inheritance as one of the main and first mechanisms for having the opportunity to reuse code.

92
00:06:56,820 --> 00:07:03,300
And since those decades ago, it has been actually recommended that you can use inheritance,

93
00:07:03,300 --> 00:07:09,060
but you should favor composition at the very beginning if that's possible.

94
00:07:09,060 --> 00:07:16,420
So specifically, they presented here two mechanisms of actually having code reuse.

95
00:07:16,420 --> 00:07:22,380
They refer to one of them as the white box reuse and the other one as the black box reuse.

96
00:07:22,860 --> 00:07:27,460
And white box, in this case, probably a better term would be crystal box.

97
00:07:27,460 --> 00:07:33,860
We can actually see the details of implementation, and this happens when we use inheritance.

98
00:07:33,860 --> 00:07:40,340
The derived class typically has access and can see many of the details that are related

99
00:07:40,340 --> 00:07:44,520
to the super class or the base class.

100
00:07:44,520 --> 00:07:49,720
So here you have a lot of information available, which many times might not necessarily be

101
00:07:49,720 --> 00:07:53,080
something that you really want to know.

102
00:07:53,080 --> 00:07:58,160
And in general, we prefer to use black box reuse, and this happens when you use composition.

103
00:07:58,160 --> 00:08:02,400
Black box basically means that you have your object, you only see the external part, which

104
00:08:02,400 --> 00:08:06,180
happens to be the interface, and the internal details of the implementation is something

105
00:08:06,180 --> 00:08:08,480
that is actually kept as a secret.

106
00:08:08,480 --> 00:08:13,720
Not because we don't want people to know how it's done, but because it's irrelevant on

107
00:08:13,720 --> 00:08:18,680
how we, or the information that we need to know in order to use the object successfully.

108
00:08:19,160 --> 00:08:25,600
So for example, if we drive a car, fortunately we don't need to be some sort of mechanical

109
00:08:25,600 --> 00:08:31,080
engineer wizard to know how the internal car actually works.

110
00:08:31,080 --> 00:08:37,080
We can just basically interact with the interface of the car, and fortunately not knowing how

111
00:08:37,080 --> 00:08:42,980
it works is really a blessing because otherwise I think most of us wouldn't be able to actually

112
00:08:42,980 --> 00:08:43,980
drive a car.

113
00:08:43,980 --> 00:08:47,280
So the same thing happens here with our objects.

114
00:08:47,280 --> 00:08:53,320
We try to encapsulate and hide most of the details, not because we're bad people and

115
00:08:53,320 --> 00:08:58,220
we don't want people to see how it's made, but it's just a situation that makes it simpler

116
00:08:58,220 --> 00:09:04,320
just to use if we can just eliminate or obviate some details of the implementation and just

117
00:09:04,320 --> 00:09:08,320
go and use our object through its interface.

118
00:09:08,320 --> 00:09:12,280
So inheritance doesn't have its advantages.

119
00:09:12,280 --> 00:09:17,840
So first of all, it's probably the easiest way to reuse code.

120
00:09:17,840 --> 00:09:23,700
If we're using Python, well, you just need to declare and find your class and you put

121
00:09:23,700 --> 00:09:28,500
a list after the name of the class, the list of the class or classes that you want to inherit

122
00:09:28,500 --> 00:09:33,520
from because you actually have the option of having multiple inheritance in Python.

123
00:09:33,520 --> 00:09:38,600
So it's very, very easy to actually do it through this way.

124
00:09:38,600 --> 00:09:41,000
So that's probably the main advantage.

125
00:09:41,000 --> 00:09:48,640
Secondly, once we inherit the subclass or the derived class is allowed to add new behaviors

126
00:09:48,640 --> 00:09:55,560
that didn't exist in the superclass and can modify behaviors that already exist or just

127
00:09:55,560 --> 00:09:59,760
add new ones if that's what we require.

128
00:09:59,760 --> 00:10:05,020
But here comes the dark side of this.

129
00:10:05,020 --> 00:10:17,140
So some of the disadvantages I actually establish here for that are some sort of drawbacks.

130
00:10:17,140 --> 00:10:22,100
The relationship between a base class and a derived class is statically fixed.

131
00:10:22,100 --> 00:10:28,260
Now this is technically not true in Python because Python is really dynamic in nature.

132
00:10:28,260 --> 00:10:34,900
So it is possible to actually at runtime actually create some inheritance relationships

133
00:10:34,900 --> 00:10:37,300
that are decided at that very moment.

134
00:10:37,300 --> 00:10:43,860
But in most object-arranged programming languages, once you establish who is your base class

135
00:10:43,860 --> 00:10:47,680
of a certain other class, derived class, you can't change it.

136
00:10:47,680 --> 00:10:50,220
This is something that typically is fixed.

137
00:10:50,220 --> 00:10:55,540
It's decided at compile time if you're using a language like C++ or Java.

138
00:10:55,860 --> 00:10:59,180
If you wanted to inherit from another class at runtime, that's something that typically

139
00:10:59,180 --> 00:11:00,940
you won't be able to do.

140
00:11:00,940 --> 00:11:04,860
So this is a drawback.

141
00:11:04,860 --> 00:11:10,460
Secondly, inheritance actually supports weak encapsulation and fragile structures.

142
00:11:10,460 --> 00:11:14,020
We're going to see an example where this happens.

143
00:11:14,020 --> 00:11:19,380
Sometimes because you know the information or the attributes that you're inheriting from,

144
00:11:19,380 --> 00:11:24,180
you can end up using them in some ways that are not necessarily compatible on how the

145
00:11:24,180 --> 00:11:29,500
designer of the base class wanted.

146
00:11:29,500 --> 00:11:33,820
Sometimes you might end up having name collisions in the derived class.

147
00:11:33,820 --> 00:11:39,780
For example, you might add a new method in the derived class and suddenly the author

148
00:11:39,780 --> 00:11:44,900
of the base class suddenly wants to use that same name for a totally different purpose.

149
00:11:44,900 --> 00:11:48,640
So you enter in some possible clashes with names there.

150
00:11:48,640 --> 00:11:54,360
So that might result in a very inconvenient situation if it happens.

151
00:11:54,360 --> 00:12:01,880
Thirdly, a derived class inherits everything, even things that we don't need or we don't

152
00:12:01,880 --> 00:12:03,680
want.

153
00:12:03,680 --> 00:12:09,960
Joe Armstrong, who is the creator of the Erlang programming language, he actually passed away

154
00:12:09,960 --> 00:12:11,720
a few days ago.

155
00:12:11,720 --> 00:12:17,520
But a few years ago, Joe Armstrong basically said that one thing that he didn't like about

156
00:12:18,400 --> 00:12:23,080
object-oriented programming is that you get many things that you don't necessarily need.

157
00:12:23,080 --> 00:12:29,040
So he said, well, if you want a banana, unfortunately sometimes you have to have the gorilla that's

158
00:12:29,040 --> 00:12:33,320
grabbing the banana and the whole jungle in order to reuse it.

159
00:12:33,320 --> 00:12:39,640
And so that's not necessarily something that you want to have in practice in many circumstances.

160
00:12:39,640 --> 00:12:44,000
So if you use inheritance, unfortunately that's what happens.

161
00:12:44,000 --> 00:12:51,120
And as a fourth point here, as I mentioned before, you can have changes in a base class.

162
00:12:51,120 --> 00:12:55,720
In the interface, this will impact all its derived classes.

163
00:12:55,720 --> 00:13:02,360
So as I explained, if you certainly have a new method name or whatever in the base class,

164
00:13:02,360 --> 00:13:09,160
well, automatically every one, every class that inherits from that one might be impacted.

165
00:13:09,160 --> 00:13:14,480
So let's have a look at a code example.

166
00:13:14,480 --> 00:13:19,040
The full source code, if you want to test it yourself later on, is available in GitHub.

167
00:13:19,040 --> 00:13:27,600
So just get a hold of the slides and follow the link that is available here.

168
00:13:27,600 --> 00:13:31,240
It's actually in GitHub, the information, the different sorts.

169
00:13:31,240 --> 00:13:36,040
And it basically represents the history, the commits represent the history of the way that

170
00:13:36,040 --> 00:13:37,800
I'm going to show it just in a moment.

171
00:13:37,800 --> 00:13:43,600
So if you check the source code, please check the history of commits and check them in order

172
00:13:43,600 --> 00:13:47,160
so you can see basically the same steps that I'm going to be taking here.

173
00:13:47,160 --> 00:13:52,560
And you can recreate basically everything that we're going to look at just now.

174
00:13:52,560 --> 00:13:55,640
So what are we going to do?

175
00:13:55,640 --> 00:14:00,280
We're going to implement a simple linked list.

176
00:14:00,280 --> 00:14:05,520
So if you've ever taken a data structures course, this might bring you good or bad memories.

177
00:14:05,760 --> 00:14:08,200
It depends how well it went.

178
00:14:08,200 --> 00:14:13,760
So we're going to define here a Dunder init method to initialize our linked list.

179
00:14:13,760 --> 00:14:17,280
We're going to have an insert and insert all methods.

180
00:14:17,280 --> 00:14:22,720
Insert is going to allow us to insert a certain value, one individual item or value.

181
00:14:22,720 --> 00:14:27,200
Insert all is going to take an iterable object and it's going to insert all those elements

182
00:14:27,200 --> 00:14:29,840
inside our linked list.

183
00:14:29,840 --> 00:14:35,720
Remove is going to allow us to eliminate or remove the element that is at the beginning

184
00:14:35,720 --> 00:14:36,720
of the list.

185
00:14:36,720 --> 00:14:42,080
In this case, as we explained a moment ago, it's a LIFO list.

186
00:14:42,080 --> 00:14:44,480
It means that it's a last in first out.

187
00:14:44,480 --> 00:14:47,520
So it really works more or less like a stack.

188
00:14:47,520 --> 00:14:48,880
So what does this mean?

189
00:14:48,880 --> 00:14:54,240
The most recent element that was inserted is going to be the one that goes out first.

190
00:14:54,240 --> 00:14:57,680
So it's a last in first out policy that we're going to be implementing.

191
00:14:57,680 --> 00:15:01,600
So remove removes the most recently inserted element.

192
00:15:01,600 --> 00:15:03,760
Clear eliminates all the elements of the list.

193
00:15:03,760 --> 00:15:05,880
And then we have these other Dunder functions.

194
00:15:05,880 --> 00:15:10,960
This one allows us to iterate over all the elements in a sequential fashion.

195
00:15:10,960 --> 00:15:14,960
STR gives us a string representation of our list.

196
00:15:14,960 --> 00:15:20,080
We're going to use basically the same notation that are used in standard arrays or lists

197
00:15:20,080 --> 00:15:22,280
in Python.

198
00:15:22,280 --> 00:15:25,440
And we have len that determines how many elements we currently have.

199
00:15:25,440 --> 00:15:31,200
So we're going to see how, in this case, we have this other class called InsertCounter.

200
00:15:31,200 --> 00:15:40,600
And this one is going to be responsible of adding two new, well, not two new methods,

201
00:15:40,600 --> 00:15:44,920
actually overriding two existing methods, insert and insertAll.

202
00:15:44,920 --> 00:15:52,640
We want to have here a class that only has a count of how many elements have been inserted

203
00:15:52,640 --> 00:15:54,280
so far.

204
00:15:54,280 --> 00:15:59,680
We don't want the exact number of elements contained in the class.

205
00:15:59,680 --> 00:16:01,300
This is actually determined by len.

206
00:16:01,300 --> 00:16:04,460
This one is going to count only the elements that have been inserted.

207
00:16:04,460 --> 00:16:07,000
Some of them might have been removed later on.

208
00:16:07,000 --> 00:16:13,120
But we only want to count of how many times we actually called the insert or the insertAll,

209
00:16:13,120 --> 00:16:17,440
counting exactly how many elements so far have been inserted without any regard on if

210
00:16:17,440 --> 00:16:19,880
they have or not been removed so far.

211
00:16:20,240 --> 00:16:24,280
The only new operation that we're adding is this one called counter.

212
00:16:24,280 --> 00:16:28,440
And we're going to inherit from this one here.

213
00:16:28,440 --> 00:16:32,480
So this is the first example using inheritance.

214
00:16:32,480 --> 00:16:39,200
And this allows us to basically have, for free, the operations that are not listed over

215
00:16:39,200 --> 00:16:40,200
here.

216
00:16:40,200 --> 00:16:44,980
So remove, clear, dunder, iter, dunder, str, dunder len, all of them are inherited automatically.

217
00:16:44,980 --> 00:16:47,260
We don't need to provide their implementation.

218
00:16:47,260 --> 00:16:51,200
So this is the code.

219
00:16:51,200 --> 00:16:56,100
First of all, for linked list, we have a nested class called node that represents individual

220
00:16:56,100 --> 00:16:58,380
nodes of our linked list.

221
00:16:58,380 --> 00:17:02,260
We have our init, which creates here the start of our linked list.

222
00:17:02,260 --> 00:17:05,900
We're using here a header or sentinel node.

223
00:17:05,900 --> 00:17:09,740
I'm not going to go into the details exactly how the linked list works.

224
00:17:09,740 --> 00:17:14,740
But in general, in a very high level, we're just inserting elements at the very beginning

225
00:17:14,800 --> 00:17:18,960
of the list, and we're removing them exactly from that same place.

226
00:17:18,960 --> 00:17:22,020
So insert does that.

227
00:17:22,020 --> 00:17:25,160
And we have this instance variable called length.

228
00:17:25,160 --> 00:17:27,640
We increment it every time we do an insert.

229
00:17:27,640 --> 00:17:32,920
And then the other insert all operation takes the iterall objects so we can traverse it

230
00:17:32,920 --> 00:17:37,400
using a standard for instruction.

231
00:17:37,400 --> 00:17:44,400
And once again, we do the corresponding updates of the references that we use to insert elements

232
00:17:44,700 --> 00:17:46,020
at the top.

233
00:17:46,020 --> 00:17:49,860
Actually, because we insert them in the same order in which they are presented in the iterall

234
00:17:49,860 --> 00:17:55,980
object, at the end they end up actually being inserted in reverse order, because that's

235
00:17:55,980 --> 00:18:02,340
basically how a LIFO, last in first out policy data structure works.

236
00:18:02,340 --> 00:18:03,340
Here's remove.

237
00:18:03,340 --> 00:18:06,300
It just checks that we don't have an empty list.

238
00:18:06,300 --> 00:18:12,740
Otherwise we remove that first element, we decrement the length counter, and we have

239
00:18:12,760 --> 00:18:17,720
the other support operations clear, iter, str, and length.

240
00:18:17,720 --> 00:18:21,400
So let's have a look at the subclass.

241
00:18:21,400 --> 00:18:25,860
We have the insert counter, and as we explained, we're using inheritance, so we indicated here

242
00:18:25,860 --> 00:18:30,940
that we were inheriting from that particular class.

243
00:18:30,940 --> 00:18:38,740
We have init, in which we call the init of the superclass so that the corresponding instance

244
00:18:38,740 --> 00:18:42,660
variables from the base class actually get created and so on.

245
00:18:42,660 --> 00:18:48,720
We have this special specific instance variable for this subclass that is called counter.

246
00:18:48,720 --> 00:18:54,440
We start in zero, and we're going to increment it, as you can see here, with one every time

247
00:18:54,440 --> 00:18:56,520
we insert one element.

248
00:18:56,520 --> 00:19:00,700
And if we want to do an insert all, here we actually have the iterall, because we're going

249
00:19:00,700 --> 00:19:04,180
to need to iterate twice over the same object here.

250
00:19:04,180 --> 00:19:10,700
We use this T method that actually allows us to create two clones of the same iterall

251
00:19:10,700 --> 00:19:11,860
object.

252
00:19:11,860 --> 00:19:17,300
And we use the first one to call the insert all from the superclass, and here we just

253
00:19:17,300 --> 00:19:23,240
use a generator expression to count how many elements effectively we have there.

254
00:19:23,240 --> 00:19:25,980
We sum them up together, and we add them here.

255
00:19:25,980 --> 00:19:31,860
So this one adds one to every element that we add one at a time, and this one adds the

256
00:19:31,860 --> 00:19:38,500
number of elements that it requires according to the length of the iterall object.

257
00:19:38,580 --> 00:19:40,860
We have a property here called counter.

258
00:19:40,860 --> 00:19:47,900
When we call this, it just returns what is in this internal counter object to indicate

259
00:19:47,900 --> 00:19:49,540
how many inserts we've done so far.

260
00:19:49,540 --> 00:19:55,220
So here's an object, here's an example, excuse me, where we create an instance of insert

261
00:19:55,220 --> 00:19:56,220
counter.

262
00:19:56,220 --> 00:20:01,580
We insert once, we insert using all, which are five elements that we have here.

263
00:20:01,580 --> 00:20:02,800
We remove it once.

264
00:20:02,800 --> 00:20:11,560
So as you can see, the content of the list is printed here, and we're going to see the

265
00:20:11,560 --> 00:20:14,540
length and the corresponding counter here.

266
00:20:14,540 --> 00:20:22,320
So when we run this, let's see.

267
00:20:22,320 --> 00:20:28,380
Okay.

268
00:20:28,380 --> 00:20:33,700
The contents are, as you can see, 23, 16, 15, 8, 4.

269
00:20:33,700 --> 00:20:36,620
We eliminated the 42 because we removed it over here.

270
00:20:36,620 --> 00:20:40,020
Remember we removed the last one we inserted.

271
00:20:40,020 --> 00:20:45,340
So it says correctly that we have a length of size 5, and the value of counter, which

272
00:20:45,560 --> 00:20:52,900
indicates how many individual elements we have inserted, is 6, which is correct.

273
00:20:52,900 --> 00:21:02,140
But now let's assume that the author of this module here does a code review and suddenly

274
00:21:02,140 --> 00:21:08,480
realizes that the insert and the insertall, basically they duplicate the same code.

275
00:21:08,480 --> 00:21:10,660
It's basically identical.

276
00:21:10,660 --> 00:21:15,120
All this part here, if you look at it, it's identical what is inside the 4.

277
00:21:15,120 --> 00:21:23,980
So the author can actually say, yeah, let's eliminate this, and let's call self.insert,

278
00:21:23,980 --> 00:21:29,620
which is the operation that we have up here.

279
00:21:29,620 --> 00:21:36,300
Just sending here the expected value.

280
00:21:36,300 --> 00:21:38,020
Oops.

281
00:21:38,020 --> 00:21:42,460
This is self.

282
00:21:42,460 --> 00:21:52,920
So now when we return to our subclass again and we run it, suddenly we realize that something

283
00:21:52,920 --> 00:21:53,920
happened to the counter.

284
00:21:53,920 --> 00:21:58,920
Instead of being 6, which is the correct number of elements that we have inserted, it's now

285
00:21:58,920 --> 00:22:01,760
11.

286
00:22:01,760 --> 00:22:03,160
So what happened?

287
00:22:03,160 --> 00:22:09,840
Well, what actually happened here when in the base class you did the insertall, you

288
00:22:10,060 --> 00:22:17,500
thought that calling this insert was calling this particular implementation insert.

289
00:22:17,500 --> 00:22:22,440
But actually that's not what happened because we're doing it in subclass.

290
00:22:22,440 --> 00:22:28,480
This insert is actually a polymorphic call to the corresponding insert of the derived

291
00:22:28,480 --> 00:22:29,800
class.

292
00:22:29,800 --> 00:22:35,820
So what I want you to understand very, very clearly is that we did not modify the client

293
00:22:35,820 --> 00:22:39,060
code, or in this case the derived code.

294
00:22:39,080 --> 00:22:42,880
We are basically still inheriting as usual.

295
00:22:42,880 --> 00:22:50,120
But a change in the original base class actually made the derived class actually work differently.

296
00:22:50,120 --> 00:22:51,120
Okay?

297
00:22:51,120 --> 00:22:55,420
And that's something that, well, typically you don't want to happen.

298
00:22:55,420 --> 00:23:04,800
And it all happens here that we're actually calling here from the insertall, we're calling

299
00:23:04,800 --> 00:23:10,380
insert which we'll actually call mine, which at the same time will call the inherited

300
00:23:10,380 --> 00:23:14,060
one, the inherited version over here.

301
00:23:14,060 --> 00:23:16,900
Okay?

302
00:23:16,900 --> 00:23:19,780
But it still will do the code that we provided over here.

303
00:23:19,780 --> 00:23:22,380
So it's producing wrong results.

304
00:23:22,380 --> 00:23:23,900
So how can we correct this?

305
00:23:23,900 --> 00:23:30,180
Well, we can use the other technique, which is known as composition.

306
00:23:30,180 --> 00:23:34,360
So what happens here is that instead of inheriting from the linked list, we receive the linked

307
00:23:34,360 --> 00:23:36,740
list as a parameter to init.

308
00:23:36,740 --> 00:23:43,860
And every time that we want to do an operation like insert and so on, we delegate it to the

309
00:23:43,860 --> 00:23:46,420
component object.

310
00:23:46,420 --> 00:23:51,620
In this case, what we're calling here the linked list instance variable.

311
00:23:51,620 --> 00:23:55,600
So when we call insert, we delegate it to the linked list.

312
00:23:55,600 --> 00:23:59,420
But we have to do that with every single method as well.

313
00:23:59,420 --> 00:24:00,420
Okay?

314
00:24:00,420 --> 00:24:02,720
The only, of course, that is unique here is the counter.

315
00:24:02,720 --> 00:24:03,940
This one still works the same.

316
00:24:03,960 --> 00:24:07,920
But even the other operations, I still want to support the full interface that we had

317
00:24:07,920 --> 00:24:13,120
from the original class that was the base class in the previous example.

318
00:24:13,120 --> 00:24:19,420
We need to provide one by one all the methods that delegate to the corresponding operations

319
00:24:19,420 --> 00:24:21,920
carried out by the linked list itself.

320
00:24:21,920 --> 00:24:24,880
Now, that's, of course, a little bit more of a problem.

321
00:24:24,880 --> 00:24:27,520
We have the same client code over here.

322
00:24:27,520 --> 00:24:33,160
But when we run this, we can see that we return once again to the correct results.

323
00:24:33,180 --> 00:24:39,220
So now changes in the implementation of the superclass do not affect this class, which

324
00:24:39,220 --> 00:24:41,420
is not inheriting anymore.

325
00:24:41,420 --> 00:24:43,660
It's actually using composition.

326
00:24:43,660 --> 00:24:44,660
Okay?

327
00:24:44,660 --> 00:24:50,740
Now, of course, there's a lot of work here on just doing the delegation.

328
00:24:50,740 --> 00:24:54,460
As you can see, we needed to repeat every single method because we're not inheriting

329
00:24:54,460 --> 00:24:56,900
them, so we need to explicitly provide them.

330
00:24:56,900 --> 00:25:01,980
So an alternative here is a really nice package called forwardable, which does a lot of the

331
00:25:02,000 --> 00:25:03,760
work for us.

332
00:25:03,760 --> 00:25:10,520
So how you use it is basically you define your class that is a composite.

333
00:25:10,520 --> 00:25:14,440
You put the forwardable annotation with parentheses here.

334
00:25:14,440 --> 00:25:17,800
And you use this function called defDelegators.

335
00:25:17,800 --> 00:25:22,120
And here you're saying that whenever we have any of these methods in this class called

336
00:25:22,120 --> 00:25:28,320
removeClearIterDunderIterDunderSTRDunderLen, it will automatically delegate it to that.

337
00:25:28,320 --> 00:25:31,060
So we don't need to explicitly write the code for that.

338
00:25:31,060 --> 00:25:36,080
We only need to provide the things that do not exclusively do delegation but do something

339
00:25:36,080 --> 00:25:38,000
additional to that.

340
00:25:38,000 --> 00:25:42,400
So once again, that reduces considerably the size of the class.

341
00:25:42,400 --> 00:25:47,600
And when we run this, it still works as expected.

342
00:25:47,600 --> 00:25:53,800
So that's a quick way of carrying on composition without having to write too much boilerplate

343
00:25:53,800 --> 00:25:54,800
code.

344
00:25:54,800 --> 00:26:00,280
The whole trick is letting the forwardable module do most of the trick.

345
00:26:01,220 --> 00:26:03,220
So what did we do?

346
00:26:03,220 --> 00:26:09,460
Just a moment ago, we created here this class called insertCounter.

347
00:26:09,460 --> 00:26:12,180
And we want to reuse some of the functionality from linked list.

348
00:26:12,180 --> 00:26:14,980
But instead of inheriting, we use composition.

349
00:26:14,980 --> 00:26:19,780
So in this case, this class becomes the composite.

350
00:26:19,780 --> 00:26:22,060
And this is a component here.

351
00:26:22,060 --> 00:26:24,500
And as you can see, it works.

352
00:26:24,560 --> 00:26:31,480
We get all these methods removeClear and so on for free, or more or less freely if we

353
00:26:31,480 --> 00:26:35,480
use the corresponding forwardable package.

354
00:26:35,480 --> 00:26:38,400
So what are the advantages of using composition?

355
00:26:38,400 --> 00:26:45,880
Well, we can have configurable implementations at runtime because we send as a parameter

356
00:26:45,880 --> 00:26:49,240
during initialization the object that we want to use as a component.

357
00:26:49,240 --> 00:26:51,120
We can change those dynamically in any moment.

358
00:26:51,120 --> 00:26:53,240
So that gives us a lot of flexibility.

359
00:26:54,140 --> 00:26:58,060
It supports good encapsulation and adaptable structures.

360
00:26:58,060 --> 00:27:02,940
Because we're only using the interface of the component, if at some point something

361
00:27:02,940 --> 00:27:09,500
changes in the interface, it only actually affects the code of the composite.

362
00:27:09,500 --> 00:27:14,220
So the problems or the errors that might occur are clearly contained there and not in the

363
00:27:14,220 --> 00:27:16,900
client.

364
00:27:16,900 --> 00:27:21,100
So interface changes have a limited ripple effect.

365
00:27:21,120 --> 00:27:25,480
Once again, it only affects internally the composite object.

366
00:27:25,480 --> 00:27:29,080
So once again, changes are fairly controlled.

367
00:27:29,080 --> 00:27:30,120
They might occur.

368
00:27:30,120 --> 00:27:34,400
We might have some errors, but they're more easy to identify and correct.

369
00:27:34,400 --> 00:27:42,280
Four, composition allows a composite class to have relationships with many component

370
00:27:42,280 --> 00:27:43,800
classes, not only one.

371
00:27:43,800 --> 00:27:47,440
So this is actually the basis of a pattern called facade.

372
00:27:47,440 --> 00:27:53,180
So the composite of it can actually have several components.

373
00:27:53,180 --> 00:27:59,660
And as a facade, we can actually simplify the way that clients actually access all these

374
00:27:59,660 --> 00:28:02,180
components there.

375
00:28:02,180 --> 00:28:06,060
We do have some disadvantages when using composition.

376
00:28:06,060 --> 00:28:10,340
So as we saw, typically we need a little bit more code when using inheritance.

377
00:28:10,340 --> 00:28:11,580
So that can be an issue.

378
00:28:11,580 --> 00:28:17,100
But once again, the package that we saw, forwardable, allows us to minimize a little bit of that.

379
00:28:18,100 --> 00:28:20,960
And this is probably the main problem here.

380
00:28:20,960 --> 00:28:24,780
It's typically more difficult to read than inheritance.

381
00:28:24,780 --> 00:28:28,660
So we have to be careful that if somebody looks at our code, it might not be immediately

382
00:28:28,660 --> 00:28:32,760
obvious that we're using and how we're using composition.

383
00:28:32,760 --> 00:28:35,460
So when do we use inheritance?

384
00:28:35,460 --> 00:28:39,200
If you are the author, the base class, and the derived class, and you're working in the

385
00:28:39,200 --> 00:28:42,960
same module, the same package, that's fine.

386
00:28:42,960 --> 00:28:45,120
You can see how your superclass is actually defined.

387
00:28:45,120 --> 00:28:46,440
So there's not a big issue.

388
00:28:46,440 --> 00:28:49,880
So if that's the case, feel free to use inheritance.

389
00:28:49,880 --> 00:28:55,820
If you're using classes that actually are designed to specifically support and document

390
00:28:55,820 --> 00:29:03,100
it correctly, the use of inheritance, that's also a good way of falling through.

391
00:29:03,100 --> 00:29:05,460
And some last things to note here.

392
00:29:05,460 --> 00:29:07,060
First of all, inheritance is not wrong.

393
00:29:07,060 --> 00:29:09,360
I mean, don't feel guilty if you use it.

394
00:29:09,360 --> 00:29:11,980
You do need to use it in many circumstances.

395
00:29:11,980 --> 00:29:15,260
It's just a matter of using it in the correct way.

396
00:29:15,260 --> 00:29:18,080
Usually use inheritance when a new class really does define a subtype.

397
00:29:18,080 --> 00:29:23,680
So it means that you have an is a relationship instead of a has a.

398
00:29:23,680 --> 00:29:25,840
Inheritance and composition are competitors.

399
00:29:25,840 --> 00:29:27,240
They usually complement each other.

400
00:29:27,240 --> 00:29:31,060
So just know how to use each of them correctly.

401
00:29:31,060 --> 00:29:36,360
And if you're going to define a class that will be allowed to be subclassed, just make

402
00:29:36,360 --> 00:29:37,920
sure that you document it correctly.

403
00:29:37,920 --> 00:29:40,040
So here's an example from the JSON encoder.

404
00:29:40,040 --> 00:29:43,460
I'm not going to look at it now because we're almost out of time.

405
00:29:43,460 --> 00:29:48,840
But it shows clearly what happens or how you could document a class that is actually designed

406
00:29:48,840 --> 00:29:51,840
for inheritance.

407
00:29:51,840 --> 00:29:55,840
And there's also this part known as the Lyskov substitution principle.

408
00:29:55,840 --> 00:30:00,360
LSP is one of the solid design principles.

409
00:30:00,360 --> 00:30:05,700
Basically says that functions that use references to base class objects must be able to use

410
00:30:05,700 --> 00:30:08,440
objects of derived classes without knowing it.

411
00:30:08,440 --> 00:30:13,440
In other words, if it looks like a duck, quacks like a duck, but walks on wheels, you mostly

412
00:30:13,440 --> 00:30:15,820
likely have the wrong abstraction there.

413
00:30:15,820 --> 00:30:23,260
So you have to make sure that subclasses actually work as the corresponding superclass should

414
00:30:23,260 --> 00:30:24,820
work.

415
00:30:24,820 --> 00:30:29,740
So as a conclusion, should we use inheritance or composition?

416
00:30:29,740 --> 00:30:34,500
You might know this girl from memes.

417
00:30:34,500 --> 00:30:35,500
She actually speaks in Spanish.

418
00:30:35,500 --> 00:30:36,500
She says, por que no los dos?

419
00:30:36,500 --> 00:30:38,740
Why not both of them?

420
00:30:38,740 --> 00:30:39,340
Thank you very much.

