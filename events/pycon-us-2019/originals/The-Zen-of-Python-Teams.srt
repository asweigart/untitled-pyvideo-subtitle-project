1
00:00:00,000 --> 00:00:15,680
Good morning, folks. How's everyone doing? Cool. Awesome. We've got a great talk. This

2
00:00:15,680 --> 00:00:21,960
is the Zen of Python teams. Please welcome Adrienne Lowe.

3
00:00:21,960 --> 00:00:29,520
Hey, everyone. Can you hear me okay? I'm so excited to be here. I always like to start

4
00:00:29,520 --> 00:00:33,760
with a thank you because it's such a pleasure and a privilege to get this stage and I don't

5
00:00:33,760 --> 00:00:39,160
take it for granted. Thank you for having me. I'm so excited to talk to you about the

6
00:00:39,160 --> 00:00:44,640
Zen of Python for teams. First, we need to talk about what the Zen of Python is. Let's

7
00:00:44,640 --> 00:00:50,280
do that. The Zen of Python is a collection of 19 guiding principles that have influenced

8
00:00:50,280 --> 00:00:55,800
the development of the language and you can see them here. The lines are short and open

9
00:00:55,800 --> 00:01:00,760
to interpretation on purpose. Typically, they're taken as direction on how we should write

10
00:01:00,760 --> 00:01:05,680
our code but they have plenty of guidance for us about how we should treat each other

11
00:01:05,680 --> 00:01:11,320
while we're writing that code. My argument is that not only has the Zen of Python influenced

12
00:01:11,320 --> 00:01:17,920
the design of the language but that it's influenced the way we interact on our development teams.

13
00:01:17,920 --> 00:01:23,560
There's something uniquely Pythonic about Python teams where we emphasize values of

14
00:01:23,560 --> 00:01:31,260
collaboration and transparency and trust. Reinterpreted for teams, the Zen of Python

15
00:01:31,260 --> 00:01:36,920
has plenty to tell us about communication and conflict, building inclusive and transparent

16
00:01:36,920 --> 00:01:42,760
processes and promoting psychological safety. And today, I want to teach you about some

17
00:01:42,760 --> 00:01:48,320
of the attitudes, processes and practices that can help you grow and be part of happier

18
00:01:48,320 --> 00:01:55,240
teams who deliver better software faster. Because delivering software to users in production

19
00:01:55,240 --> 00:02:00,640
is what we are here to do. I believe in shipping and I remind my teams that that's what we're

20
00:02:00,640 --> 00:02:06,600
here to do. I love this quote from Intercom's VP of Engineering from his article, shipping

21
00:02:06,600 --> 00:02:12,080
is your company's heartbeat and I recommend you read it. He reminds us that software only

22
00:02:12,080 --> 00:02:17,400
becomes valuable when we ship it to customers and that good products are really a side effect

23
00:02:17,400 --> 00:02:23,560
of combining great people with an idea in an agile and dynamic and collaborative environment

24
00:02:23,560 --> 00:02:30,960
that helps them ship. Unfortunately, lots of managers forget that the healthy culture

25
00:02:30,960 --> 00:02:38,080
is critical to helping people ship. The Zen of Python has lots to say about healthy culture.

26
00:02:38,080 --> 00:02:42,560
So let's talk about how to build psychologically safe teams that ship informed by the Zen

27
00:02:42,560 --> 00:02:47,880
of Python. Many of my stories will come from teams I currently manage, so let me tell you

28
00:02:47,880 --> 00:02:53,120
a little bit about us. I work as director of engineering at Juice Analytics leading our

29
00:02:53,120 --> 00:02:59,840
operations and platform teams. We use Python and Django to build what is basically Squarespace

30
00:02:59,840 --> 00:03:05,640
for data stories. If you or your company has some interesting data that you want to share,

31
00:03:05,640 --> 00:03:11,200
our product Juice Box helps you tell an interactive story that your users can explore by asking

32
00:03:11,200 --> 00:03:17,360
and answering questions in a really delightful way. Python has been a big part of my life

33
00:03:17,360 --> 00:03:21,820
for most of the last decade. I've been an individual contributor on Python teams and

34
00:03:21,820 --> 00:03:27,440
open source projects, an organizer of Django girls, an organizer of Python meetups including

35
00:03:27,440 --> 00:03:34,000
Pi ATL and a director at Django project. So my stories come from pretty varied work, from

36
00:03:34,080 --> 00:03:39,400
my work as an IC, as a volunteer on open source projects, but most recently as director of

37
00:03:39,400 --> 00:03:46,080
engineering. No matter where I've been or what I've worked on or who I've worked with,

38
00:03:46,080 --> 00:03:51,920
I've always valued working on a healthy team. So now as an engineering manager and director,

39
00:03:51,920 --> 00:03:57,840
I ask myself every day, how can I create a better experience for the people on my team?

40
00:03:57,840 --> 00:04:02,560
How can I help them feel safe and challenged so that we can ship valuable code to users

41
00:04:02,560 --> 00:04:09,560
together? How can I help them feel more connected or empowered or successful? What actions can

42
00:04:09,560 --> 00:04:16,500
I take to encourage that? So this talk is about the action that we can take inspired

43
00:04:16,500 --> 00:04:21,720
by the Zen of Python to improve our teams. As you hear me share my team's stories, I

44
00:04:21,720 --> 00:04:27,180
hope you'll compare it against your own experience. Think of the way the Zen has shaped you and

45
00:04:27,180 --> 00:04:33,860
your teams. Ask yourself, which of the sayings stick with you? Do any of them confuse you?

46
00:04:33,860 --> 00:04:40,460
Do you find any of them challenging? And why? When you leave PyCon and go back to your teams,

47
00:04:40,460 --> 00:04:46,620
what will you bring with you? So here's our roadmap for today. First, I'm going to introduce

48
00:04:46,620 --> 00:04:51,500
you to the Zen of Python. Maybe you haven't seen it in a while, maybe you've never seen

49
00:04:51,500 --> 00:04:57,020
it, so let's start by taking a look. Second, we'll walk through just six of the Zen's famous

50
00:04:57,020 --> 00:05:02,540
lines and interpret them for teams. I'll often start by giving an interpretation as

51
00:05:02,540 --> 00:05:07,460
it relates to code, but mostly I'll focus on reading it anew and applying it to teams

52
00:05:07,460 --> 00:05:12,660
and team dynamics. Third and finally, I'll wrap up with a call to action to take your

53
00:05:12,660 --> 00:05:18,300
reflections back to your team. It's fun, it's interactive, it's my own little Easter egg

54
00:05:18,300 --> 00:05:26,500
that I'm excited to share with you. So let's take a look at the Zen of Python. Here's where

55
00:05:26,500 --> 00:05:32,740
it all began, actually. The Zen of Python got started like many great ideas in a conversation

56
00:05:32,740 --> 00:05:39,000
on a mailing list. As you probably can't actually read from your seat, the author Tim Peters

57
00:05:39,000 --> 00:05:49,000
playfully offered up the 19 lines as an outline that Guido could start from. The Zen of Python

58
00:05:49,000 --> 00:05:58,120
is technically 20 lines with the final line left blank for Guido to fill in. I really

59
00:05:58,120 --> 00:06:04,000
like how Tim used the word outline and the phrase start from. From the beginning he emphasized

60
00:06:04,000 --> 00:06:09,980
how this is not complete, how it's a work in progress. By its very nature and from the

61
00:06:09,980 --> 00:06:16,720
very beginning, it's an invitation to interpretation. So we should feel really good about coming

62
00:06:16,720 --> 00:06:22,920
up with our own interpretations today. It's totally in the spirit. And the spirit is joyful

63
00:06:22,920 --> 00:06:30,080
and playful and fun. Let's take a look at the lines. I won't read these aloud, but please

64
00:06:30,080 --> 00:06:42,760
take a moment to read over them. So the Zen of Python came to us from this humble beginning

65
00:06:42,760 --> 00:06:47,200
on a mailing list to being incorporated as part of the Python enhancement proposals as

66
00:06:47,200 --> 00:06:52,240
PEP 20 to being printed on the back of our PyCon shirt two years ago. It's seemingly

67
00:06:52,240 --> 00:06:59,160
everywhere and it's also right here with you baked into your interpreter as an Easter egg.

68
00:06:59,160 --> 00:07:04,920
That's right. As long as you're running Python, you can run import this at nope, nope, wrong

69
00:07:04,920 --> 00:07:13,560
you. And read the Zen of Python. Give it a try. That's not the type of manager I am.

70
00:07:13,560 --> 00:07:19,040
I am not a snapping pointer just for the record, but that would have totally spoiled what we

71
00:07:19,040 --> 00:07:27,160
were trying to do. The word is here's your cue. So now that we've seen the Zen, let's

72
00:07:27,160 --> 00:07:31,520
step through six of the lines and interpret them for teams. Let's start at the beginning

73
00:07:31,520 --> 00:07:37,640
with beautiful is better than ugly. So okay, the Zen of Python totally comes out swinging

74
00:07:37,640 --> 00:07:42,960
with this one. It's a hard one. And it's hard because words like beautiful and ugly are

75
00:07:42,960 --> 00:07:48,840
tricky because we implicitly understand how subjective and contextual they are, right?

76
00:07:48,840 --> 00:07:54,360
They require context to make meaning. And even when we have that context, we can totally

77
00:07:54,360 --> 00:08:00,000
still argue about it. One person's clean code is another person's cave painting. And some

78
00:08:00,000 --> 00:08:06,160
people think clean code isn't even a thing and we should stop saying that phrase. When

79
00:08:06,160 --> 00:08:11,720
I was little, the word ugly didn't just mean aesthetically displeasing. It was actually

80
00:08:11,720 --> 00:08:19,540
used to describe behavior as in ugly behavior, as in actin ugly. Actin ugly meant misbehaving,

81
00:08:19,540 --> 00:08:25,880
but a special kind of misbehaving usually directed towards adults, usually connotating

82
00:08:26,080 --> 00:08:31,200
disrespect. You need a little context with parents and kids, possibly in the southern

83
00:08:31,200 --> 00:08:36,360
U.S., to wrap your head around the idea of actin ugly. But if you'll grant me the idea

84
00:08:36,360 --> 00:08:42,320
that we can act ugly, then we can ask what kind of behavior is ugly on our development

85
00:08:42,320 --> 00:08:49,120
teams? What have you personally seen done on your dev teams that has put your group

86
00:08:49,200 --> 00:08:56,200
two steps back? I have a few ideas of some things I've seen. How about hoarding information?

87
00:08:56,400 --> 00:09:01,440
That's when someone knows something helpful that they could share, but they choose not

88
00:09:01,440 --> 00:09:07,120
to. It defeats the purpose of collaboration and growing together when we hoard valuable

89
00:09:07,120 --> 00:09:12,780
information that could be used to help others. Or how about bitter cutting code reviews?

90
00:09:12,780 --> 00:09:16,920
Has anyone in this room ever been subject to a bitter or cutting code review that seemed

91
00:09:16,920 --> 00:09:22,320
designed just to cut you down and make you feel bad? That's horrible, and I'm sorry that

92
00:09:22,320 --> 00:09:26,360
was your experience, because that should not be the goal of a code review. It should be

93
00:09:26,360 --> 00:09:31,960
to critique the code, not the person. Or how about if somebody wants to get started on

94
00:09:31,960 --> 00:09:36,360
your project, but there's no information about how to get started? There's no read me, there's

95
00:09:36,360 --> 00:09:43,360
no docs, there's no one to ask for help, there's nobody who wants to help. So let's break this

96
00:09:44,360 --> 00:09:49,920
down just a little bit more. To help interpret this line for teams, I want to introduce you

97
00:09:49,920 --> 00:09:56,400
to Ron Westrom's typology of organizational cultures. Westrom wrote a paper in 1988 where

98
00:09:56,400 --> 00:10:01,440
he identified three types of leadership styles that give rise to different types of team

99
00:10:01,440 --> 00:10:08,040
culture and communication. He'd been researching human factors in system safety, particularly

100
00:10:08,360 --> 00:10:13,600
in the context of accidents and technological domains that were highly complex and risky,

101
00:10:13,600 --> 00:10:20,600
such as aviation and healthcare. So big deal. His types are pathological, bureaucratic,

102
00:10:22,040 --> 00:10:27,920
and generative. Your team's type will be reflected in its leadership, the way it approaches problems

103
00:10:27,920 --> 00:10:34,920
and conflict, and the way communication flows or does not flow in your organization. On

104
00:10:34,920 --> 00:10:40,240
pathological teams, information is viewed as a personal resource to be used in political

105
00:10:40,240 --> 00:10:46,200
power struggles. These power-oriented organizations are characterized by large amounts of fear

106
00:10:46,200 --> 00:10:52,720
and threat. People often hoard information or withhold it for political reasons or distort

107
00:10:52,720 --> 00:10:58,400
it to make themselves look better. These environments discourage taking responsibility because people

108
00:10:58,400 --> 00:11:05,400
are scared. Sounds pretty ugly to me. On bureaucratic teams, in contrast, alignment with one's team

109
00:11:06,560 --> 00:11:12,240
takes precedence over alignment with the larger mission. In other words, individuals feel

110
00:11:12,240 --> 00:11:17,280
more loyalty toward their immediate team or group than they do toward their company and

111
00:11:17,280 --> 00:11:23,440
its goals. They protect departments. There's an idea that they want to maintain their turf.

112
00:11:23,440 --> 00:11:28,520
They insist on their own rules. They want things to be done by the book, but by their

113
00:11:28,520 --> 00:11:34,560
book. It sounds imperious. It sounds authoritarian. And when you're working on teams, it is not

114
00:11:34,560 --> 00:11:41,560
a good look. Some might call it ugly. On generative teams, in contrast, and this is what you want,

115
00:11:42,400 --> 00:11:47,460
the leader emphasizes the company's mission and they rally people around that mission.

116
00:11:47,460 --> 00:11:54,460
They ask, how can we accomplish our goal? And they think of we expansively. Generative

117
00:11:54,860 --> 00:12:00,580
teams have high cooperation. People feel like they can take risks because the risks will

118
00:12:00,580 --> 00:12:06,980
be shared and they won't be scapegoated. Failure leads to inquiry, not blaming or scapegoating

119
00:12:06,980 --> 00:12:12,660
or root cause analysis, and information flows more freely as a result. I think we found

120
00:12:12,660 --> 00:12:19,180
something beautiful. Westrom noted that leaders set the tone for their team, but we're all

121
00:12:19,180 --> 00:12:23,920
still responsible for our own actions. So ask yourself, what kind of team do you want

122
00:12:23,920 --> 00:12:30,540
to be on? We could debate beautiful code all day. Thankfully, kind behavior is a lot more

123
00:12:30,540 --> 00:12:36,460
clear. Being explicitly welcoming and sharing information freely, providing support and

124
00:12:36,460 --> 00:12:42,280
making it safe to ask questions, challenging code, not people, are just a few of the hallmarks

125
00:12:42,280 --> 00:12:48,360
of a healthy team. For more on Westrom's model as well as other technical and leadership

126
00:12:48,360 --> 00:12:53,600
capabilities that will help your team ship, I highly recommend Nicole Forsgren's book

127
00:12:53,600 --> 00:12:59,280
Accelerate. It's been a huge help to me, but let's get back to the Zen of Python and our

128
00:12:59,280 --> 00:13:06,280
second line today. Explicit is better than implicit makes me think of how important documentation

129
00:13:06,840 --> 00:13:13,840
is. Healthy teams document their processes and expectations and offer how-to's. They

130
00:13:13,840 --> 00:13:19,600
provide playbooks and resources and onboarding guides and tutorials. They make it clear how

131
00:13:19,600 --> 00:13:25,440
to contribute and what steps to take and what to do when you're confused. They do this because

132
00:13:25,440 --> 00:13:32,440
documenting your processes makes it easier for others to join you. Now, without good

133
00:13:32,440 --> 00:13:38,680
docs, people who already know each other can mostly muddle through. This is because

134
00:13:38,680 --> 00:13:44,040
they are cheating and they're leaning on existing relationships that they already have to get

135
00:13:44,040 --> 00:13:49,240
unblocked and get their questions answered. But what if you're a new person? You don't

136
00:13:49,240 --> 00:13:55,320
have that shared context. You don't know the back channel. So we need to document our processes

137
00:13:55,320 --> 00:14:01,000
in order to make it more accessible to people who don't look like us or who aren't already

138
00:14:01,080 --> 00:14:06,840
part of our group. Along with public docs, it's also important to keep conversation in

139
00:14:06,840 --> 00:14:11,960
the open. Keeping your chat about your code in a public place is another way to lower

140
00:14:11,960 --> 00:14:17,640
the barrier to entry. If you use Slack or a similar tool, this means keeping your conversation

141
00:14:17,640 --> 00:14:23,840
about your work in the main channels and not buried in DMs or other obscure places. Keeping

142
00:14:23,840 --> 00:14:30,640
the conversation open makes it, as we see here in this example, possible for anyone

143
00:14:30,640 --> 00:14:37,640
to check it out and jump in or help if somebody has questions. And while Slack is not documentation,

144
00:14:41,160 --> 00:14:46,080
keeping your chats in the open does create something of a public record that is somewhat

145
00:14:46,080 --> 00:14:53,080
searchable depending on how you feel about Slack's search feature. All shade. So documenting

146
00:14:54,040 --> 00:15:01,040
your processes also improves relationships between teams. And this is part of my team.

147
00:15:01,760 --> 00:15:07,400
Healthy teams lead off conflict by setting ground rules and SLAs or service level agreements

148
00:15:07,400 --> 00:15:13,680
that define how they'll work with other teams. On our team, one of our values is consistency

149
00:15:13,680 --> 00:15:19,920
of process. We have several types of SLAs with our customers, both internal and external,

150
00:15:19,920 --> 00:15:25,800
where we try to be crystal clear about how work will get done and on what timeline and

151
00:15:25,800 --> 00:15:32,640
who will work it. Before we wrote these SLAs, our inter-team relationships were pretty strained.

152
00:15:32,640 --> 00:15:37,480
But once we took the time to document our processes and expectations, we found we had

153
00:15:37,480 --> 00:15:41,360
way less conflict and more mutual understanding of what it was going to take to get the work

154
00:15:41,360 --> 00:15:46,560
done. This meant fewer fire drills, fewer last-minute requests, fewer people paged on

155
00:15:46,560 --> 00:15:52,120
the weekend for work that should have been planned. We also publish our processes. Here's

156
00:15:52,120 --> 00:15:58,120
a snippet of our calendar, my calendar actually, that shows how we show when our sprints are

157
00:15:58,120 --> 00:16:02,120
going to happen and when we're going to be doing our sprint planning and demos. And we

158
00:16:02,120 --> 00:16:07,400
invite other people, not on our team, into our processes as observers, as listeners,

159
00:16:07,400 --> 00:16:13,760
and we share our documents and artifacts afterwards. We also document our people. Recently I put

160
00:16:13,800 --> 00:16:18,320
a call on Twitter to ask about your favorite lines and I really like this response from

161
00:16:18,320 --> 00:16:25,320
Lee. And Lee refers to code in this example, but I think we can do this with people too.

162
00:16:27,680 --> 00:16:32,520
On my team, I led us in an activity where we created individual profiles to share on

163
00:16:32,520 --> 00:16:38,240
our team. The profiles answer some of the following questions, and I ask that my people

164
00:16:38,240 --> 00:16:43,120
refer to these periodically, especially before working closely with others, because the doc

165
00:16:43,120 --> 00:16:48,080
explicitly reminds us how our colleagues know that they'll feel successful and what

166
00:16:48,080 --> 00:16:53,200
might cause them to stumble. It was a really fun activity. I just gave a whole talk on

167
00:16:53,200 --> 00:16:59,960
the process at Lead Dev this past Tuesday, and the video will be posted soon, so definitely

168
00:16:59,960 --> 00:17:04,440
check that out. A lot of people really, really loved it, and I hope you get a lot out of

169
00:17:04,440 --> 00:17:09,320
it as well. Because you're going to learn how to get answers like these, and these are

170
00:17:09,480 --> 00:17:15,280
real responses from my developers. I hope that you can already see as you're reading

171
00:17:15,280 --> 00:17:22,280
how valuable these answers are, and there's so much more that came out of that process.

172
00:17:24,960 --> 00:17:30,840
So let's move on to the next line of the Zen of Python. Simple is better than complex.

173
00:17:30,840 --> 00:17:36,280
We build complicated features and solve complex requirements with sets of smaller, more straightforward

174
00:17:36,440 --> 00:17:41,480
features, right? That's how it works. And we build meaningful relationships the same

175
00:17:41,480 --> 00:17:46,360
way. We work through tough issues by building a foundation of small interactions that build

176
00:17:46,360 --> 00:17:51,120
emotional bank account or trust with each other. So make sure that you're taking the

177
00:17:51,120 --> 00:17:56,120
time to have coffee with your colleagues or catch up on the weekend or ask about each

178
00:17:56,120 --> 00:18:01,800
other. Show that you care personally. You don't have to be a manager to do that. On

179
00:18:01,800 --> 00:18:05,940
our team, we're mostly remote, so we do something called remote happy hour, which is just where

180
00:18:05,940 --> 00:18:11,140
we meet and hang out, just kind of chat about our lives. And for some people, it might feel

181
00:18:11,140 --> 00:18:14,940
tempting to skip a meeting like this because you don't see the immediate value in the way

182
00:18:14,940 --> 00:18:20,540
that you might say spending some time debugging some code. But you're building that trust

183
00:18:20,540 --> 00:18:24,780
and familiarity with your colleagues when you do this. You're building that shared language

184
00:18:24,780 --> 00:18:29,660
and the good feelings that you can lean on when times get tough. Because things will

185
00:18:29,660 --> 00:18:35,500
get tough. Here's the thing about real work. It's messy. And it's messiness and pressure

186
00:18:35,500 --> 00:18:40,500
and ambiguity is frustrating and hard and painful and disappointing. And it can take

187
00:18:40,500 --> 00:18:47,300
a real toll on relationships unless they're strong. And we can make them strong by investing

188
00:18:47,300 --> 00:18:54,100
in them. So let's build that emotional bank account so that so we're ready when the real

189
00:18:54,100 --> 00:18:59,600
world comes to make withdrawals, when deadlines and stress and team conflict threaten to take

190
00:18:59,600 --> 00:19:05,340
its toll. Our relationships with each other are the most complex and complicated features

191
00:19:05,340 --> 00:19:10,380
of our lives. Like software, let's build them with small but meaningful actions that

192
00:19:10,380 --> 00:19:17,640
show that we care and we're here and we're invested. When I asked my team which line

193
00:19:17,640 --> 00:19:22,740
of the Zen of Python they like best, one of my ops engineers said this one. Makes sense,

194
00:19:22,740 --> 00:19:28,200
right? It's a good ops engineer. If something goes wrong, people want to know. David loves

195
00:19:28,200 --> 00:19:33,700
this line because as he says, if something is wrong with my code, I want to know. Interestingly,

196
00:19:33,740 --> 00:19:39,160
that very same week in another conversation with a different developer, the developer

197
00:19:39,160 --> 00:19:46,160
said if I do something to hurt someone, I want to know. With code, we can write more

198
00:19:46,700 --> 00:19:52,360
code to raise and log errors. But with humans, we have to rely on other humans to tell us

199
00:19:52,360 --> 00:19:57,700
when we broke them. And feedback is the tool that we have to help others understand the

200
00:19:57,700 --> 00:20:03,380
impact that they have on us. We owe it to ourselves and to each other to give timely

201
00:20:03,380 --> 00:20:08,980
actionable feedback that describes what happened and the impact that it had on us. On a healthy

202
00:20:08,980 --> 00:20:14,180
team, if someone screws up, they shouldn't feel like they need to hide it or from it.

203
00:20:14,180 --> 00:20:18,740
We understand that people make mistakes and feelings get hurt, but we value each other

204
00:20:18,740 --> 00:20:25,180
enough to take responsibility for our actions and try to improve. We don't let issues pass

205
00:20:25,180 --> 00:20:31,940
silently because we know that letting things pass silently damages trust on our teams.

206
00:20:31,940 --> 00:20:37,780
The pain of giving or receiving negative personal feedback is only painful in the moment, but

207
00:20:37,780 --> 00:20:43,420
it's bleeding. Allowing it to pass silently is something that can accrue and damage teams

208
00:20:43,420 --> 00:20:49,880
permanently. The other day, I tweeted about how to respond when you wake up to a wall

209
00:20:49,880 --> 00:20:53,860
of text from one of your developers who is like, oh, my goodness, I broke this thing.

210
00:20:53,940 --> 00:20:59,540
I fixed this thing, but I feel terrible about it. Basically, they were feeling shame for

211
00:20:59,540 --> 00:21:06,060
making a mistake, and we've all been there. But mistakes are normal. And I said that you

212
00:21:06,060 --> 00:21:11,260
should respond to things like that by hearing them and affirming them and appreciating them

213
00:21:11,260 --> 00:21:16,620
and reminding them that mistakes help us grow. I was careful about the way I responded because

214
00:21:16,620 --> 00:21:22,340
I love working on a team where we can be open with each other about our mistakes. It's a

215
00:21:22,340 --> 00:21:27,140
signal that your team is on the right track if they can talk about their mistakes. If

216
00:21:27,140 --> 00:21:31,740
they're hiding, if they're yelling at you, don't touch my garbage, that can indicate

217
00:21:31,740 --> 00:21:38,740
that like this possum, they're scared. But if they come right up to your door and they

218
00:21:38,740 --> 00:21:47,260
say, look at my trash, look at this beautiful trash that I have amassed, that can indicate

219
00:21:47,340 --> 00:21:54,340
that they trust you, right? That they're not scared. So be kind to people who show you

220
00:21:54,460 --> 00:22:00,220
their trash. It was probably hard for them. And let's show enough of our trash that we

221
00:22:00,220 --> 00:22:05,840
get so used to showing our trash that it becomes something that we enjoy doing. It gets easier

222
00:22:05,840 --> 00:22:12,840
for us the more we do it. So let's move on to the next line. In the face of ambiguity,

223
00:22:12,840 --> 00:22:19,040
anybody refuse the temptation to guess. When it comes to code, refuse the temptation to

224
00:22:19,040 --> 00:22:23,440
guess at someone's motives. Don't get blame and stew about it. You're only going to cause

225
00:22:23,440 --> 00:22:28,720
yourself more frustration. When you see code or behavior that frustrates you, don't assume

226
00:22:28,720 --> 00:22:33,760
the worst and certainly don't assume that that person is actively attacking you. Humans

227
00:22:33,760 --> 00:22:39,840
are complex and their actions are influenced by all kinds of ideas and experience and tradeoffs

228
00:22:39,840 --> 00:22:45,320
that you may never understand or have access to. So grab some time with them if you can

229
00:22:45,320 --> 00:22:49,360
and care enough to ask. Ask where they're coming from. Ask what they were trying to

230
00:22:49,360 --> 00:22:54,840
accomplish and why they took that particular strategy. And if you can't reach out to that

231
00:22:54,840 --> 00:22:59,640
person for whatever reason, try to get some context from someone who might be able to

232
00:22:59,640 --> 00:23:06,000
help you. Put the questions on the PR, open a GitHub issue, address it, confront it, be

233
00:23:06,000 --> 00:23:13,520
assertive, challenge directly while caring personally, refuse the temptation to guess. I really

234
00:23:13,520 --> 00:23:18,360
love this reflection from my lead, Megna, on why this is one of her favorite lines. And I think

235
00:23:18,360 --> 00:23:24,840
it works for people, too. It can be really tempting, sadly, to explain away people like we

236
00:23:24,840 --> 00:23:31,960
might say, well, she's in sales. She probably doesn't care how the code works. And while it

237
00:23:31,960 --> 00:23:37,320
can be tempting to explain away people like this, I found that if you set really clear expectations

238
00:23:37,320 --> 00:23:42,840
and give clear guidance and have good docs that show that you care and make it safe to fail,

239
00:23:42,840 --> 00:23:49,560
people will typically exceed any expectations you ever could have had for them. And one final note

240
00:23:49,560 --> 00:23:54,760
for the managers in the room. Do I have any managers in the room? Awesome. I really tried to

241
00:23:54,760 --> 00:23:59,040
keep manager-specific advice to a minimum in this talk, but this one's for you and I think it's

242
00:23:59,040 --> 00:24:04,880
important, so I'm going to call it out. Your weekly one-on-one time is your time to beat the

243
00:24:04,880 --> 00:24:11,480
guessing game. Please don't guess about how your direct reports are doing or what they're struggling

244
00:24:11,480 --> 00:24:18,760
with. Use the time you already have scheduled to ask good questions about what's really motivating

245
00:24:18,760 --> 00:24:25,680
them, what's frustrating them, and how they'd like to grow. Please don't guess. If you'd like advice

246
00:24:25,680 --> 00:24:30,240
on how to have better one-on-ones, I have another lead talk that I gave last year that's already

247
00:24:30,240 --> 00:24:35,920
available online. Okay. It's time for the last line of the Zen that we're going to focus on today,

248
00:24:35,920 --> 00:24:43,920
and what better time for the line is now is better than ever. One of my developers, Steven, shared

249
00:24:43,920 --> 00:24:50,000
this wisdom with me. He said, it's really easy for me to overthink my work. Sometimes in the process

250
00:24:50,000 --> 00:24:54,480
of trying to figure out what would be the most efficient thing to do with my code, I can end up

251
00:24:54,480 --> 00:25:01,040
being vastly inefficient. Now is better than ever reminds us of the value of taking some action,

252
00:25:01,040 --> 00:25:08,640
however small, to move closer to our goal. It's oriented toward doing, because doing, even if we

253
00:25:08,640 --> 00:25:15,360
end up being wrong, gives us information. When I was a developer, I had a single sticky note on my

254
00:25:15,360 --> 00:25:20,480
monitor. It's something that my EM said to me in a time when I was being really hard on myself.

255
00:25:21,360 --> 00:25:27,280
Doing and being wrong is a lot better than not doing it all. He gave me this wisdom in a time

256
00:25:27,280 --> 00:25:33,840
when I was being really hard on myself, and he saw that that was holding me back. He wanted me to

257
00:25:33,840 --> 00:25:40,400
feel safe to try things, even if it meant screwing up and breaking stuff. It helped me through some

258
00:25:40,400 --> 00:25:46,800
really hard times as a developer, and now I pass it on to my engineers as a manager. There comes a

259
00:25:46,800 --> 00:25:52,080
time in my relationship with each of my direct reports, no matter how senior they are, when I

260
00:25:52,080 --> 00:25:58,160
have to share this sticky note wisdom with them. I share it when I feel like they need it. Sometimes

261
00:25:58,160 --> 00:26:02,480
they're being too hard on themselves like I was. Sometimes they're just having a hard time getting

262
00:26:02,480 --> 00:26:07,760
started. But it doesn't matter how many years they've been working as a developer or how much

263
00:26:07,760 --> 00:26:14,960
they know about Python. They all benefit from this at some point. That's because everyone benefits

264
00:26:14,960 --> 00:26:20,080
from being reminded that they can start where they are. On a psychologically safe team, people

265
00:26:20,080 --> 00:26:28,400
feel safe to make mistakes because they understand it's part of growth. So there you have it. Six

266
00:26:28,400 --> 00:26:32,800
sayings from the Zen of Python interpreted for teams. I hope it's been useful for you. I hope

267
00:26:32,800 --> 00:26:36,720
you've been thinking about the teams you're a part of and how you'd like to improve them and how the

268
00:26:36,720 --> 00:26:41,200
Zen inspires you personally because if you have been thinking about these things, then you're ready

269
00:26:41,200 --> 00:26:50,000
for the third and final section of my talk, the Easter egg. Volunteers, this is your cue. Yes,

270
00:26:50,640 --> 00:26:58,720
the Easter egg. The Zen of Python is an Easter egg. So it just made sense that my talk would have an

271
00:26:58,720 --> 00:27:04,880
Easter egg as well, right? PyCon volunteers are now coming around the room with something special

272
00:27:04,880 --> 00:27:11,600
for you. Thank you, PyCon volunteers. It's an egg. But what are we going to do with these eggs? Well,

273
00:27:12,320 --> 00:27:19,040
we know that the Zen of Python is itself an Easter egg and we also know that the final line

274
00:27:19,040 --> 00:27:27,120
is as yet unwritten. And we remember that the Zen of Python started as an invitation to interpretation.

275
00:27:27,840 --> 00:27:34,560
And finally, we remember that Tim Peters left the last line of the Zen of Python blank for Guido to

276
00:27:34,560 --> 00:27:43,200
fill in. Well, here you go, Guido. We're going to help you out. Hashtag here you go, Guido.

277
00:27:44,160 --> 00:27:48,800
Inside the egg, you're going to find some directions. Write a phrase that you would

278
00:27:48,800 --> 00:27:54,160
like to bring back to your team. Write something that you want to be reminded of, something that

279
00:27:54,160 --> 00:27:59,360
you would stick on your monitor or something that you would tell someone new on your team or someone

280
00:27:59,360 --> 00:28:06,880
new to development. Write the 20th line of the Zen of Python and then share it. Post it on Twitter

281
00:28:06,880 --> 00:28:15,600
with the hashtag and the hashtag ZOP20. Tag me too. I'm Adrienne Friend. I'll probably retweet you.

282
00:28:16,720 --> 00:28:21,280
Take a picture and drop it in your team's Slack channel. Take your wisdom back to your teams.

283
00:28:21,280 --> 00:28:25,440
I'm really excited to read what you've been dreaming about and what's challenging you

284
00:28:25,520 --> 00:28:29,040
and how you want to grow. I'm thrilled for the teams that you're part of.

285
00:28:29,600 --> 00:28:43,120
Thank you again. Long live the Zen. Long live Python.

