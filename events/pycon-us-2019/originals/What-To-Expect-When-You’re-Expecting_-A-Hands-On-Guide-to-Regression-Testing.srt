1
00:00:00,000 --> 00:00:03,000
Hello, everyone.

2
00:00:03,000 --> 00:00:04,880
All right.

3
00:00:04,880 --> 00:00:07,200
I think we're going to get started.

4
00:00:07,200 --> 00:00:13,320
If anyone has not attempted to clone the repository yet,

5
00:00:13,320 --> 00:00:15,160
I recommend doing so now.

6
00:00:15,160 --> 00:00:19,240
We're going to start with kind of an introduction.

7
00:00:19,240 --> 00:00:21,040
So if you haven't done that yet, you

8
00:00:21,040 --> 00:00:23,360
will be able to kind of sit there and listen to me talk

9
00:00:23,360 --> 00:00:26,400
and attempt to clone.

10
00:00:26,400 --> 00:00:29,160
I did mention earlier, but for those who may not

11
00:00:29,160 --> 00:00:34,040
have been here yet, when you do go to the ReadMe,

12
00:00:34,040 --> 00:00:37,360
the instructions that it has for cloning the repository

13
00:00:37,360 --> 00:00:40,800
assumes that you have an SSH key installed.

14
00:00:40,800 --> 00:00:42,740
If you don't have an SSH key installed

15
00:00:42,740 --> 00:00:44,880
or you don't know what that means,

16
00:00:44,880 --> 00:00:48,440
you can also go to the top here, click the Clone or Download

17
00:00:48,440 --> 00:00:52,840
link, make sure that this says Clone with HTTPS,

18
00:00:52,840 --> 00:00:55,240
and then try to run a get clone on this

19
00:00:55,240 --> 00:00:58,520
instead of the other URL that's in the ReadMe.

20
00:00:58,520 --> 00:01:00,120
That should help solve some problems.

21
00:01:03,280 --> 00:01:03,780
All right.

22
00:01:03,780 --> 00:01:09,240
So how many people here, this is their first PyCon.

23
00:01:09,240 --> 00:01:10,240
Yeah, OK.

24
00:01:10,240 --> 00:01:10,920
Cool.

25
00:01:10,920 --> 00:01:14,400
That's quite a few of you.

26
00:01:14,400 --> 00:01:18,240
How many people did a workshop yesterday as well?

27
00:01:18,240 --> 00:01:18,740
OK.

28
00:01:18,740 --> 00:01:20,720
So you have like half a brain left

29
00:01:20,720 --> 00:01:23,400
after everything you crammed into it yesterday?

30
00:01:23,400 --> 00:01:25,880
Cool.

31
00:01:25,880 --> 00:01:27,600
So first off, I want to thank everyone

32
00:01:27,640 --> 00:01:30,760
who responded to the pre-workshop survey.

33
00:01:30,760 --> 00:01:34,120
I got almost 60% of people to respond,

34
00:01:34,120 --> 00:01:35,920
which is really, really great.

35
00:01:35,920 --> 00:01:40,080
That really helps me kind of cater my materials

36
00:01:40,080 --> 00:01:43,640
and the tutorial to all of you who are in the room.

37
00:01:43,640 --> 00:01:45,320
So thank you for that.

38
00:01:45,320 --> 00:01:48,320
I will note that there were quite a few more people who

39
00:01:48,320 --> 00:01:54,440
had very little experience with Python than I anticipated.

40
00:01:54,440 --> 00:01:57,320
And so I just want to encourage everyone to not,

41
00:01:57,360 --> 00:01:59,360
if you are somebody who's a beginner,

42
00:01:59,360 --> 00:02:02,120
try not to get caught up in the details.

43
00:02:02,120 --> 00:02:04,960
And if you happen to have problems with your environment

44
00:02:04,960 --> 00:02:08,480
or anything like that, I do sort of

45
00:02:08,480 --> 00:02:11,280
recommend pairing up with somebody

46
00:02:11,280 --> 00:02:14,120
who might be sitting near you who has it running

47
00:02:14,120 --> 00:02:16,160
and who can kind of walk you through it.

48
00:02:16,160 --> 00:02:18,520
I think that you'll get a lot more out of it

49
00:02:18,520 --> 00:02:20,720
if you try to just pair with somebody else instead

50
00:02:20,720 --> 00:02:23,880
of fighting, getting a virtual environment running

51
00:02:23,880 --> 00:02:26,800
or something like that.

52
00:02:26,800 --> 00:02:29,880
Does everybody have these resources?

53
00:02:29,880 --> 00:02:33,400
If not, get them now or get them from your neighbor.

54
00:02:33,400 --> 00:02:35,200
OK.

55
00:02:35,200 --> 00:02:37,000
All right, so a little bit about me.

56
00:02:37,000 --> 00:02:38,760
My name is Emily Morehouse.

57
00:02:38,760 --> 00:02:42,680
I am the director of engineering at a company called CuddleSoft.

58
00:02:42,680 --> 00:02:45,000
We are a digital product development company

59
00:02:45,000 --> 00:02:47,360
based in Denver, Colorado.

60
00:02:47,360 --> 00:02:53,200
So I get to kind of touch on a lot of different pieces of tech.

61
00:02:53,200 --> 00:02:56,280
I help write mobile applications, web applications,

62
00:02:56,280 --> 00:02:59,920
backends, CI pipelines, embedded systems,

63
00:02:59,920 --> 00:03:01,760
really the whole nine yards.

64
00:03:01,760 --> 00:03:05,960
So this talk is a little bit broader than most tutorials

65
00:03:05,960 --> 00:03:07,640
probably will be.

66
00:03:07,640 --> 00:03:12,480
It's probably more rare to see such a deep dive on back end

67
00:03:12,480 --> 00:03:16,560
testing as well as some front end JavaScript stuff.

68
00:03:16,560 --> 00:03:19,280
So I hope that you are all excited about that

69
00:03:19,280 --> 00:03:23,040
and that you are along for the ride.

70
00:03:23,040 --> 00:03:27,200
I'm also a Python core developer.

71
00:03:27,200 --> 00:03:28,600
If you are in the JavaScript world,

72
00:03:28,600 --> 00:03:30,920
I help maintain a package called Axios.

73
00:03:30,920 --> 00:03:34,040
It's basically like the requests of JavaScript.

74
00:03:34,040 --> 00:03:36,320
I'm a huge visual testing proponent.

75
00:03:36,320 --> 00:03:39,400
I'm a huge auto format fan, so you'll see that in my editor.

76
00:03:39,400 --> 00:03:44,120
And in general, I'm just a really big language nerd.

77
00:03:44,120 --> 00:03:47,320
OK, so this is our schedule that we have set up for today.

78
00:03:47,320 --> 00:03:48,860
Like I said, these first 20 minutes

79
00:03:48,860 --> 00:03:50,800
are really going to be me kind of talking to you

80
00:03:50,800 --> 00:03:53,680
and giving you an overview of the different things

81
00:03:53,680 --> 00:03:55,760
that we're going to cover in this talk,

82
00:03:55,760 --> 00:03:58,880
as well as the reasons why it's important.

83
00:03:58,880 --> 00:04:00,360
Just kind of like lay that foundation

84
00:04:00,360 --> 00:04:03,240
so that we can really dive into some code.

85
00:04:03,240 --> 00:04:05,400
We will have a quick 20 minute break after that

86
00:04:05,400 --> 00:04:08,800
just to make sure that as many people are up to speed

87
00:04:08,800 --> 00:04:11,480
as possible and have their environment set up.

88
00:04:11,480 --> 00:04:13,800
Hopefully all those really slow clones

89
00:04:13,800 --> 00:04:16,080
will be finished by then.

90
00:04:16,080 --> 00:04:17,640
And then we'll have about an hour

91
00:04:17,640 --> 00:04:20,920
to dive into regression testing in Django.

92
00:04:20,920 --> 00:04:23,240
And I'll talk a little bit more about exactly what

93
00:04:23,240 --> 00:04:25,680
to expect for that hour.

94
00:04:25,680 --> 00:04:27,280
Then we're going to have a quick break.

95
00:04:27,280 --> 00:04:30,920
There will be snacks and coffee and all that stuff

96
00:04:30,920 --> 00:04:33,760
out starting at 3 o'clock.

97
00:04:33,760 --> 00:04:35,880
Also during that time, if you need additional help

98
00:04:35,880 --> 00:04:39,000
setting up, whether for questions on the Django section

99
00:04:39,000 --> 00:04:42,160
or for the next section for JavaScript,

100
00:04:42,160 --> 00:04:46,400
that's an additional time that we can use to help everybody.

101
00:04:46,400 --> 00:04:49,240
And then for the last hour-ish, we'll

102
00:04:49,240 --> 00:04:51,360
dive into visual regression testing.

103
00:04:55,360 --> 00:04:57,640
So we're going to start this off with a quick overview

104
00:04:57,640 --> 00:05:01,040
of testing.

105
00:05:01,040 --> 00:05:02,880
I'm going to talk a little bit about why

106
00:05:02,880 --> 00:05:06,040
consistent testing is important and what consistent testing

107
00:05:06,040 --> 00:05:07,440
really means.

108
00:05:07,440 --> 00:05:10,060
We're going to talk a little bit about software correctness,

109
00:05:10,060 --> 00:05:11,800
because in order to test your software,

110
00:05:11,800 --> 00:05:13,720
you have to have a good understanding of what

111
00:05:13,720 --> 00:05:17,040
you're testing for and what correct software means.

112
00:05:17,040 --> 00:05:18,800
Going to go through a few different approaches

113
00:05:18,800 --> 00:05:20,720
for software testing.

114
00:05:20,720 --> 00:05:24,880
And then we're going to dive into the anatomy of the test

115
00:05:24,880 --> 00:05:27,760
and really all the different pieces

116
00:05:27,760 --> 00:05:29,080
that you're going to be touching,

117
00:05:29,080 --> 00:05:31,240
whether you're testing a back end or a front end.

118
00:05:36,920 --> 00:05:40,840
So I think that when you approach testing your software,

119
00:05:40,840 --> 00:05:43,400
it's really interesting because the time that you spend writing

120
00:05:43,400 --> 00:05:47,200
tests for your software is not time that you're actually

121
00:05:47,200 --> 00:05:51,120
delivering features or value directly to your users.

122
00:05:51,120 --> 00:05:52,660
So it's a really interesting mindset

123
00:05:52,660 --> 00:05:54,960
that you have to get yourself into of understanding

124
00:05:54,960 --> 00:05:58,120
why testing is important and why, especially

125
00:05:58,120 --> 00:06:01,680
for the longevity of a project, why it's really important

126
00:06:01,680 --> 00:06:05,160
to write solid tests.

127
00:06:05,160 --> 00:06:07,560
And specifically why regression tests

128
00:06:07,560 --> 00:06:11,360
are important to make sure that all of your future users

129
00:06:11,360 --> 00:06:13,220
are not encountering old bugs.

130
00:06:13,220 --> 00:06:15,780
And that you're not getting into a cycle where

131
00:06:15,780 --> 00:06:17,740
you break one thing and you fix the other thing

132
00:06:17,740 --> 00:06:18,940
and that breaks something else.

133
00:06:18,940 --> 00:06:21,980
And you just get into the cycle of your software not working.

134
00:06:25,300 --> 00:06:28,580
So there are a bunch of different types of testing.

135
00:06:28,580 --> 00:06:30,340
I'm not going to go through all of these.

136
00:06:30,340 --> 00:06:32,700
We don't need to focus on all of them.

137
00:06:32,700 --> 00:06:36,740
But if you start thinking about how to test your software,

138
00:06:36,740 --> 00:06:39,740
you're going to come up with a bunch of different ways

139
00:06:39,740 --> 00:06:42,580
to approach it.

140
00:06:42,580 --> 00:06:46,100
And so one of my favorite ways of testing software

141
00:06:46,100 --> 00:06:47,620
is using regression testing.

142
00:06:47,620 --> 00:06:51,300
So again, really focusing on known bugs that are coming up.

143
00:06:51,300 --> 00:06:52,780
And then visual regression testing,

144
00:06:52,780 --> 00:06:55,580
which we'll get into why visual regression testing is

145
00:06:55,580 --> 00:06:56,700
really cool in a minute.

146
00:06:59,180 --> 00:07:02,940
And so one of the really interesting things

147
00:07:02,940 --> 00:07:08,100
is the human brain is really terrible at distinguishing

148
00:07:08,100 --> 00:07:10,780
between stimuli.

149
00:07:10,780 --> 00:07:14,700
So if you take a look at these two images,

150
00:07:14,700 --> 00:07:18,140
they're both screenshots of the PyCon website.

151
00:07:18,140 --> 00:07:20,740
And even if you were to look at these full screen,

152
00:07:20,740 --> 00:07:23,580
it would be really, really difficult for the human brain

153
00:07:23,580 --> 00:07:26,540
to actually detect the differences between these two

154
00:07:26,540 --> 00:07:29,140
screenshots.

155
00:07:29,140 --> 00:07:31,300
But there is a difference.

156
00:07:31,300 --> 00:07:35,100
And so it's a lot better to let a computer kind of handle

157
00:07:35,100 --> 00:07:37,500
automatically detecting these changes

158
00:07:37,500 --> 00:07:41,100
than to rely on a developer or a QA engineer or somebody

159
00:07:41,100 --> 00:07:45,820
actually going through and looking at this themselves.

160
00:07:45,820 --> 00:07:47,940
And so one of the huge gotchas with tests

161
00:07:47,940 --> 00:07:50,580
is that tests only actually catch bugs

162
00:07:50,580 --> 00:07:57,100
when you run your tests and you write tests.

163
00:07:57,100 --> 00:07:59,460
And so knowing how to approach testing

164
00:07:59,460 --> 00:08:02,620
and how to kind of pinpoint these different areas where

165
00:08:02,620 --> 00:08:05,500
bugs can arise is super important

166
00:08:05,500 --> 00:08:08,260
and can actually be a bit trickier than a lot of people

167
00:08:08,260 --> 00:08:11,180
kind of expect.

168
00:08:11,180 --> 00:08:13,660
So with that in mind, we know that we

169
00:08:13,660 --> 00:08:16,420
need to have tests that are really fast so that we

170
00:08:16,420 --> 00:08:18,260
can run them locally.

171
00:08:18,260 --> 00:08:20,540
Maybe that's as we're developing,

172
00:08:20,540 --> 00:08:23,300
doing test-driven development, before we commit,

173
00:08:23,300 --> 00:08:26,900
before we push, before we release to production.

174
00:08:26,900 --> 00:08:29,980
All these things, you need to run your tests before that.

175
00:08:29,980 --> 00:08:31,860
We want to make sure that we can run them

176
00:08:31,860 --> 00:08:34,580
across different browsers and platforms

177
00:08:34,580 --> 00:08:37,660
and that we're not going to take the entire day for a test

178
00:08:37,660 --> 00:08:38,420
to run.

179
00:08:38,420 --> 00:08:41,380
Because if you have a test suite that takes 20 hours

180
00:08:41,380 --> 00:08:43,700
to run in the cloud, you're not going

181
00:08:43,700 --> 00:08:46,940
to be able to push out quick releases to your users.

182
00:08:46,940 --> 00:08:49,220
And then you'll basically be in a holding pattern

183
00:08:49,220 --> 00:08:52,460
for however long your tests have to run before you can,

184
00:08:52,460 --> 00:08:54,260
hopefully before you push production.

185
00:08:56,740 --> 00:09:01,100
So we know that our tests also need to be reliable.

186
00:09:01,100 --> 00:09:03,340
We need to know that when they're given the same input

187
00:09:03,340 --> 00:09:05,260
that they have the same output.

188
00:09:05,260 --> 00:09:07,820
And one of the things that you don't want to get stuck in

189
00:09:07,820 --> 00:09:09,900
is just constantly debugging your tests

190
00:09:09,900 --> 00:09:12,660
or having tests that break.

191
00:09:12,660 --> 00:09:14,820
So it's really important to put a lot of thought

192
00:09:14,820 --> 00:09:16,460
into your architecture around that.

193
00:09:18,900 --> 00:09:21,460
And thirdly, you want to make sure that your tests are really

194
00:09:21,460 --> 00:09:22,780
modular and direct.

195
00:09:22,780 --> 00:09:25,700
So in the same way that you want to think about having

196
00:09:25,700 --> 00:09:29,420
functions that maybe do one single thing really,

197
00:09:29,420 --> 00:09:31,860
really well in a few lines of code

198
00:09:31,860 --> 00:09:34,460
and then kind of modularize it out from there,

199
00:09:34,460 --> 00:09:36,980
you want to approach your tests in the same way.

200
00:09:36,980 --> 00:09:39,180
If you have too many things that a single test is

201
00:09:39,180 --> 00:09:44,900
trying to check, the whole test could fail

202
00:09:44,900 --> 00:09:47,780
and you would not know exactly what line is failing

203
00:09:47,780 --> 00:09:48,980
or what's happening there.

204
00:09:54,100 --> 00:09:56,740
OK, so a lot of this I like to borrow from something

205
00:09:56,740 --> 00:09:59,180
called formal verification.

206
00:09:59,180 --> 00:10:01,620
I see a lot of parallels between formal verification

207
00:10:01,620 --> 00:10:05,100
and software testing because the ultimate goals of both

208
00:10:05,100 --> 00:10:08,740
are to make sure that your software is correct

209
00:10:08,740 --> 00:10:12,420
and that your system is fault tolerant and stable.

210
00:10:12,420 --> 00:10:15,900
And so one of the pillars of formal verification

211
00:10:15,900 --> 00:10:20,260
is that no software is inherently correct.

212
00:10:20,260 --> 00:10:21,660
And so there are two different ways

213
00:10:21,660 --> 00:10:23,900
that we know software is correct.

214
00:10:23,900 --> 00:10:27,140
And I pulled this quote from a Medium article

215
00:10:27,140 --> 00:10:28,900
by somebody named Andrew Helver.

216
00:10:28,900 --> 00:10:30,520
So these are not my words, but I really

217
00:10:30,520 --> 00:10:32,480
kind of identified with it.

218
00:10:32,480 --> 00:10:35,120
So one of the ways that we know that software is correct

219
00:10:35,120 --> 00:10:37,880
is that the supreme deity of the universe

220
00:10:37,880 --> 00:10:40,160
descends from the heavens and decrees

221
00:10:40,160 --> 00:10:43,480
with all of the weight of objective truth

222
00:10:43,480 --> 00:10:45,360
that a certain piece of software is correct.

223
00:10:48,040 --> 00:10:51,240
But in reality, what happens a lot more frequently

224
00:10:51,240 --> 00:10:53,040
is that we'll have a list of things

225
00:10:53,040 --> 00:10:56,200
that we want the software to do and a certain amount of logic

226
00:10:56,200 --> 00:10:58,920
to prove that the software does these things.

227
00:10:58,920 --> 00:11:01,000
And as our software grows, this list

228
00:11:01,000 --> 00:11:02,800
gets longer and longer and longer,

229
00:11:02,800 --> 00:11:06,200
and it gets a lot harder to keep track of exactly what

230
00:11:06,200 --> 00:11:08,640
our software is supposed to do and what having correct

231
00:11:08,640 --> 00:11:11,880
software actually even means.

232
00:11:11,880 --> 00:11:14,600
So now in the first scenario, as silly as it is,

233
00:11:14,600 --> 00:11:16,360
we're talking about objective truths.

234
00:11:16,360 --> 00:11:19,520
We're talking about things that are not going to be debated.

235
00:11:19,520 --> 00:11:22,320
This sort of all-knowing, powerful knowledge

236
00:11:22,320 --> 00:11:24,520
that everything that has been and everything that

237
00:11:24,520 --> 00:11:27,520
will be known is right is not something

238
00:11:27,520 --> 00:11:29,480
that we actually get in software.

239
00:11:32,080 --> 00:11:35,920
And so functionality of our software can be subjective.

240
00:11:35,920 --> 00:11:40,000
It can be very ill-defined, and it can certainly be relative.

241
00:11:45,200 --> 00:11:48,560
So different approaches for testing.

242
00:11:48,560 --> 00:11:50,320
So when you start to approach testing,

243
00:11:50,320 --> 00:11:53,680
it's really common to come at it from one of two ways.

244
00:11:53,680 --> 00:11:56,120
The first way is that we can say,

245
00:11:56,120 --> 00:11:58,640
how do I know that the software is correct,

246
00:11:58,640 --> 00:12:02,840
or how can I break this?

247
00:12:02,840 --> 00:12:05,480
So this gets kind of fun.

248
00:12:05,480 --> 00:12:08,000
So the first way, when you have something that's really,

249
00:12:08,000 --> 00:12:11,320
really well-defined, you can take that logic

250
00:12:11,320 --> 00:12:13,600
and kind of put it forth into a test.

251
00:12:13,600 --> 00:12:18,160
So we know if we needed to test, say, multiplication,

252
00:12:18,160 --> 00:12:22,000
we know that we have a very finite set of input,

253
00:12:22,000 --> 00:12:26,160
whether that's a positive number, zero, a negative number,

254
00:12:26,160 --> 00:12:30,200
and how that can interact with the same input,

255
00:12:30,200 --> 00:12:31,720
multiplied together.

256
00:12:31,720 --> 00:12:34,160
So we can say, I know that when I have 2 times 2,

257
00:12:34,160 --> 00:12:35,680
that it's going to be 4.

258
00:12:35,680 --> 00:12:39,360
When I have 2 times 3, it's going to be 6.

259
00:12:39,360 --> 00:12:41,960
And we kind of have these very discrete set of rules

260
00:12:41,960 --> 00:12:42,720
that we can apply.

261
00:12:47,040 --> 00:12:50,120
But in this case, all of our edge cases

262
00:12:50,160 --> 00:12:52,360
were sort of defined for us, which

263
00:12:52,360 --> 00:12:54,720
is one of the really fun things about testing.

264
00:12:54,720 --> 00:12:57,160
And one of the reasons why it's really important

265
00:12:57,160 --> 00:12:59,480
is that you have to really start diving into what

266
00:12:59,480 --> 00:13:01,560
those edge cases are.

267
00:13:01,560 --> 00:13:05,160
And especially when you start testing front ends,

268
00:13:05,160 --> 00:13:08,520
it's like, what happens if a user mashes on the Submit

269
00:13:08,520 --> 00:13:09,200
button?

270
00:13:09,200 --> 00:13:11,960
Those are not things that you necessarily think about,

271
00:13:11,960 --> 00:13:14,320
but it's things that automated testing can help you with.

272
00:13:14,320 --> 00:13:17,560
So a lot of what I've been saying right now

273
00:13:17,560 --> 00:13:19,800
is kind of talking about software testing

274
00:13:19,800 --> 00:13:21,640
in theory versus reality.

275
00:13:21,640 --> 00:13:25,040
So in theory, you can have 100% test coverage,

276
00:13:25,040 --> 00:13:27,720
and all of your tests are going to catch every single bug that

277
00:13:27,720 --> 00:13:30,000
possibly exists in your code.

278
00:13:30,000 --> 00:13:33,160
But the reality is that that's not going to be the case.

279
00:13:33,160 --> 00:13:36,960
And even if you have 100% test coverage on paper,

280
00:13:36,960 --> 00:13:38,800
doesn't actually mean that you're necessarily

281
00:13:38,800 --> 00:13:41,440
catching all of the issues that could happen.

282
00:13:41,440 --> 00:13:44,080
And so as an engineer, going back to this idea

283
00:13:44,080 --> 00:13:47,000
that the time that you spend writing tests

284
00:13:47,000 --> 00:13:50,440
is not delivering direct value to your customers,

285
00:13:50,440 --> 00:13:53,680
or your clients, or whoever it is,

286
00:13:53,680 --> 00:13:58,640
I know that the more time that I can spend writing really

287
00:13:58,640 --> 00:14:02,080
useful, pointed tests is going to be a lot better than just

288
00:14:02,080 --> 00:14:05,080
arbitrarily writing tests for the sake of writing tests.

289
00:14:05,080 --> 00:14:08,280
So I'm going to talk about some of the things that you can do

290
00:14:08,280 --> 00:14:11,560
just arbitrarily writing tests for the sake of writing tests.

291
00:14:14,720 --> 00:14:17,760
So one of the ways that I've tried to optimize for this

292
00:14:17,760 --> 00:14:21,120
is a theory that's popular in a lot of software design.

293
00:14:21,120 --> 00:14:23,920
And that's that I really try to approach everything

294
00:14:23,920 --> 00:14:25,960
from the user's perspective.

295
00:14:25,960 --> 00:14:30,320
Because the user doesn't care if an API endpoint is broken.

296
00:14:30,320 --> 00:14:35,280
They just care if they can't log into your app kind of thing.

297
00:14:35,280 --> 00:14:38,080
So once we start framing what is important

298
00:14:38,080 --> 00:14:42,720
for the end user, we can also frame how we approach testing.

299
00:14:42,720 --> 00:14:46,160
And so regression tests, and especially

300
00:14:46,160 --> 00:14:48,440
the visual regression tests, really kind

301
00:14:48,440 --> 00:14:51,360
of frame that for the user.

302
00:14:51,360 --> 00:14:56,640
And it gives us the ability to say, OK, here's my application.

303
00:14:56,640 --> 00:15:00,920
If I don't directly test my authentication endpoints,

304
00:15:00,920 --> 00:15:04,120
et cetera, if I just test my login page

305
00:15:04,120 --> 00:15:06,600
and I know that my login page is failing

306
00:15:06,600 --> 00:15:10,800
and the user sees an error that says error could not,

307
00:15:10,800 --> 00:15:13,400
I wouldn't put this as a direct user facing message.

308
00:15:13,400 --> 00:15:15,900
But if there is some sort of error that says cannot connect

309
00:15:15,900 --> 00:15:18,920
to the server, like login failed,

310
00:15:18,920 --> 00:15:22,840
and you know that the user's credentials are correct,

311
00:15:22,840 --> 00:15:24,720
you can then pinpoint that, oh, there's

312
00:15:24,720 --> 00:15:28,440
something else going on that is affecting my user

313
00:15:28,440 --> 00:15:31,360
and give you a better idea from a really high level of what's

314
00:15:31,360 --> 00:15:34,840
broken in your application without having

315
00:15:34,840 --> 00:15:36,800
to write a million different integration

316
00:15:36,800 --> 00:15:38,240
tests across your stack.

317
00:15:48,880 --> 00:15:52,040
So I'm going to dive a little bit into the anatomy of the test.

318
00:15:52,040 --> 00:15:54,000
I think I'm doing OK on time.

319
00:15:54,000 --> 00:15:56,280
We're just a minute off.

320
00:15:56,280 --> 00:15:58,520
So the anatomy of a test, you need

321
00:15:58,520 --> 00:16:00,640
to have a test environment.

322
00:16:00,640 --> 00:16:03,360
You need to have a testing structure.

323
00:16:03,360 --> 00:16:05,440
You need to have some sort of assertion library

324
00:16:05,440 --> 00:16:10,320
to be able to say, if these certain set of requirements

325
00:16:10,320 --> 00:16:12,120
are met, then the test passes.

326
00:16:12,120 --> 00:16:15,320
Otherwise, the test fails.

327
00:16:15,320 --> 00:16:18,040
Some other really helpful things to have are mocks, spies,

328
00:16:18,040 --> 00:16:19,160
and stubs.

329
00:16:19,160 --> 00:16:21,680
So if you want to take different parts of your application

330
00:16:21,680 --> 00:16:27,400
and abstract them away, so say you do want to test an API call,

331
00:16:27,400 --> 00:16:30,880
but it's also relying on a third party API,

332
00:16:30,880 --> 00:16:33,920
you might want to mock out that third party API

333
00:16:33,920 --> 00:16:35,760
so that you're not necessarily relying

334
00:16:35,760 --> 00:16:39,520
on an external services success, that you're only

335
00:16:39,520 --> 00:16:43,440
relying on your code success.

336
00:16:43,440 --> 00:16:46,160
And then especially once you get into the front end testing

337
00:16:46,160 --> 00:16:49,280
world, you need some sort of browser

338
00:16:49,280 --> 00:16:51,040
or browser-like environment.

339
00:16:54,760 --> 00:16:59,000
So the process of testing consists of basically

340
00:16:59,000 --> 00:17:00,800
three major steps.

341
00:17:00,800 --> 00:17:04,520
So the first is that you want to generate, display, and watch

342
00:17:04,520 --> 00:17:06,160
your test results.

343
00:17:06,160 --> 00:17:08,080
So as you're running your test, it's

344
00:17:08,080 --> 00:17:11,600
going to tell you exactly which test it's running through.

345
00:17:11,600 --> 00:17:14,920
You can see the success and failure as you go.

346
00:17:14,920 --> 00:17:17,720
Maybe if you realize that your first 10 tests are failing,

347
00:17:17,720 --> 00:17:19,160
you just kill the process and try

348
00:17:19,160 --> 00:17:21,680
to figure out what's going on instead of just letting

349
00:17:21,680 --> 00:17:22,640
the whole process run.

350
00:17:25,360 --> 00:17:27,520
As those tests are running, each test

351
00:17:27,520 --> 00:17:30,280
that you're running through will compare and check

352
00:17:30,280 --> 00:17:31,800
different assertions.

353
00:17:31,800 --> 00:17:35,440
And we'll get into exactly what that means in a minute.

354
00:17:35,440 --> 00:17:39,640
And then at the end, you want to generate code coverage reports

355
00:17:39,640 --> 00:17:42,800
and really be able to see which areas of your application

356
00:17:42,800 --> 00:17:47,080
you are testing and the success and failures

357
00:17:47,080 --> 00:17:50,680
in those different areas.

358
00:17:50,680 --> 00:17:52,200
OK.

359
00:17:52,200 --> 00:17:54,000
So we're getting close to our first break.

360
00:17:54,000 --> 00:17:56,520
We're going to make sure that everyone is as set up

361
00:17:56,520 --> 00:17:59,360
as possible.

362
00:17:59,360 --> 00:18:01,920
I do want to go through a little bit of how the workshop is

363
00:18:01,920 --> 00:18:04,240
going to work.

364
00:18:04,240 --> 00:18:08,840
So there is example code in the repository.

365
00:18:08,840 --> 00:18:10,200
And so let me actually pull this up.

366
00:18:14,080 --> 00:18:15,720
OK.

367
00:18:15,720 --> 00:18:18,280
So there's a section in the README

368
00:18:18,280 --> 00:18:21,640
about how you can use this repository.

369
00:18:21,640 --> 00:18:23,880
And so basically, the way this is set up

370
00:18:23,880 --> 00:18:26,640
is that there are two separate branches.

371
00:18:26,640 --> 00:18:28,640
There's one for our Django walkthrough,

372
00:18:28,640 --> 00:18:31,760
and there's one for our visual test walkthrough.

373
00:18:31,760 --> 00:18:34,680
If you check out to the branch, you'll

374
00:18:34,680 --> 00:18:36,520
be at the end of the tutorial.

375
00:18:36,520 --> 00:18:40,720
So if you want to skip ahead and miss all the fun parts of learning

376
00:18:40,720 --> 00:18:42,880
and exploring along the way, that's

377
00:18:42,880 --> 00:18:45,920
what will happen if you check out the branch directly.

378
00:18:45,920 --> 00:18:50,120
But if we take a look at this branch, basically,

379
00:18:50,120 --> 00:18:54,960
all of the commits are kind of separated out by step.

380
00:18:54,960 --> 00:18:57,720
So any of these commits where you see a number in them,

381
00:18:57,760 --> 00:19:00,920
that corresponds back to the class notes, which

382
00:19:00,920 --> 00:19:03,160
I'll show you in a second.

383
00:19:03,160 --> 00:19:10,360
And so each branch also has a tag.

384
00:19:10,360 --> 00:19:18,440
And so the tag is the very first commit of that walkthrough.

385
00:19:18,440 --> 00:19:21,200
So there's a visual in it and a Django in it.

386
00:19:21,200 --> 00:19:23,880
So if you want to walk through on your own,

387
00:19:23,880 --> 00:19:27,600
that's where you'll want to check out.

388
00:19:27,600 --> 00:19:33,360
And then in here, you can click directly to the steps.

389
00:19:33,360 --> 00:19:37,760
Or there's also steps here in the content and notes.

390
00:19:37,760 --> 00:19:41,320
So for example, for regression testing in Django,

391
00:19:41,320 --> 00:19:43,760
if I click into this, this takes me

392
00:19:43,760 --> 00:19:47,360
to the readme, which has a list of all the steps.

393
00:19:47,360 --> 00:19:52,440
And then as you go through here, you can kind of follow along.

394
00:19:52,440 --> 00:19:55,680
These are the steps that will correspond to the code

395
00:19:55,680 --> 00:19:56,640
that we're going through.

396
00:19:56,680 --> 00:19:58,480
And then everything links together

397
00:19:58,480 --> 00:19:59,720
at the bottom between steps.

398
00:20:02,360 --> 00:20:06,960
And so I know that I have a pretty wide variety of skill

399
00:20:06,960 --> 00:20:08,680
levels in the room.

400
00:20:08,680 --> 00:20:12,040
And so there are a few ways that you can approach this.

401
00:20:12,040 --> 00:20:15,760
I am going to go through and explain everything.

402
00:20:15,760 --> 00:20:17,560
I'm going to walk through all these steps.

403
00:20:17,560 --> 00:20:20,120
I'm going to code it on my machine.

404
00:20:20,120 --> 00:20:21,360
I'm going to demo it.

405
00:20:21,360 --> 00:20:24,320
I'm going to explain it, all that stuff.

406
00:20:24,320 --> 00:20:28,120
After I do that, it's then up to you in terms of how

407
00:20:28,120 --> 00:20:30,400
you want to use your time.

408
00:20:30,400 --> 00:20:35,800
You could check out from the Django init tag

409
00:20:35,800 --> 00:20:38,360
and code everything yourself as well.

410
00:20:38,360 --> 00:20:40,680
You could pick a certain commit and go off

411
00:20:40,680 --> 00:20:42,280
in your own direction if you're like,

412
00:20:42,280 --> 00:20:45,080
I really want to dive into more of how

413
00:20:45,080 --> 00:20:48,000
this specific thing would work.

414
00:20:48,000 --> 00:20:52,040
Or your other option is that you can actually just check out

415
00:20:52,040 --> 00:20:56,680
commit by commit and run it on your machine locally

416
00:20:56,680 --> 00:20:58,720
and not necessarily code everything yourself,

417
00:20:58,720 --> 00:21:00,320
but just check out the commits and see

418
00:21:00,320 --> 00:21:02,560
it running on your machine.

419
00:21:02,560 --> 00:21:06,440
And then really just dive into the differences

420
00:21:06,440 --> 00:21:11,520
in the code that was written by looking at the commits.

421
00:21:11,520 --> 00:21:15,000
And to do that, I would say for anybody

422
00:21:15,000 --> 00:21:18,760
who's not as familiar with GitHub,

423
00:21:18,760 --> 00:21:21,680
there are some instructions about checking out

424
00:21:21,680 --> 00:21:23,600
different commits in the ReadMe.

425
00:21:23,600 --> 00:21:29,200
But you can also go in here and click on the commit ID.

426
00:21:29,200 --> 00:21:33,400
And then it will show you a diff of the previous code that

427
00:21:33,400 --> 00:21:33,920
was there.

428
00:21:33,920 --> 00:21:36,440
In this case, there wasn't any other code here.

429
00:21:36,440 --> 00:21:40,800
And then the new code that was added for these steps.

430
00:21:40,800 --> 00:21:45,840
So hopefully that gives everybody a lot of options

431
00:21:45,840 --> 00:21:48,800
that you can choose your own adventure on.

432
00:21:48,800 --> 00:21:50,720
And at this point, we have a few TAs

433
00:21:50,720 --> 00:21:55,000
that can help get people set up.

434
00:21:55,000 --> 00:21:58,640
Yeah, just let us know if you need any help.

435
00:21:58,640 --> 00:22:02,000
Just to be super clear, the only section

436
00:22:02,000 --> 00:22:04,000
that we're worried about right now

437
00:22:04,000 --> 00:22:07,400
is getting started and installing dependencies

438
00:22:07,400 --> 00:22:08,640
for a Django application.

439
00:22:11,280 --> 00:22:13,560
So if you haven't done that, check out subzero.

440
00:22:13,560 --> 00:22:15,120
Follow these instructions.

441
00:22:15,120 --> 00:22:17,960
Make sure you can get your virtual environment set up.

442
00:22:17,960 --> 00:22:20,680
And then hopefully, once you get that set up,

443
00:22:20,720 --> 00:22:23,920
you can run these three commands to get everything kicked off.

444
00:22:30,960 --> 00:22:33,560
All right.

445
00:22:33,560 --> 00:22:37,480
So I think it's probably about time

446
00:22:37,480 --> 00:22:40,880
to call it on attempting to get environment set up,

447
00:22:40,880 --> 00:22:42,420
because I want to make sure that we're

448
00:22:42,420 --> 00:22:45,560
using the rest of our time for at least me to go through

449
00:22:45,560 --> 00:22:48,600
and work through all this with everyone.

450
00:22:49,600 --> 00:22:51,760
I'm going to go through everything now,

451
00:22:51,760 --> 00:22:54,960
so I think this is going to be a lot of watching me do things.

452
00:22:54,960 --> 00:22:57,760
But at the end of this, if you haven't gotten your environment

453
00:22:57,760 --> 00:23:00,600
set up, it really is your call if you want

454
00:23:00,600 --> 00:23:02,280
to try to keep working on that.

455
00:23:02,280 --> 00:23:07,080
But otherwise, I suggest that you find a friendly face

456
00:23:07,080 --> 00:23:10,240
that you might be sitting next to who perhaps has this running

457
00:23:10,240 --> 00:23:13,400
that you can work through it all with them

458
00:23:13,400 --> 00:23:17,160
once we get to that point.

459
00:23:17,200 --> 00:23:18,520
Any questions before we dive in?

460
00:23:21,480 --> 00:23:23,600
OK.

461
00:23:23,600 --> 00:23:24,100
All right.

462
00:23:24,100 --> 00:23:28,200
So I have just run through all of the same initialization

463
00:23:28,200 --> 00:23:30,080
on my machine.

464
00:23:30,080 --> 00:23:34,000
So I've run the migrate, the create superuser,

465
00:23:34,000 --> 00:23:35,280
and I'm now running the server.

466
00:23:35,280 --> 00:23:36,160
Well, I'm not running the server.

467
00:23:36,160 --> 00:23:36,960
That's a lie.

468
00:23:36,960 --> 00:23:39,360
I'm not running the server.

469
00:23:39,360 --> 00:23:43,520
If you go to that URL, you should then

470
00:23:43,560 --> 00:23:49,760
see this example regression testing boilerplate.

471
00:23:49,760 --> 00:23:52,880
If you see this, everything is working correctly.

472
00:23:52,880 --> 00:23:55,400
We're not actually going to do a whole lot of interacting

473
00:23:55,400 --> 00:23:58,520
directly with the front end of this application.

474
00:23:58,520 --> 00:24:02,640
We're going to go through how we're approaching testing

475
00:24:02,640 --> 00:24:04,960
different pieces of our Django application.

476
00:24:07,800 --> 00:24:09,720
Let's see.

477
00:24:09,720 --> 00:24:18,440
So right off the bat, if we run Python manage by test,

478
00:24:18,440 --> 00:24:20,360
you'll see that there are currently not

479
00:24:20,360 --> 00:24:21,880
any tests in this repository.

480
00:24:21,880 --> 00:24:25,240
It's not finding anything.

481
00:24:25,240 --> 00:24:27,040
So the first thing that we're going to do

482
00:24:27,040 --> 00:24:33,720
is start diving into adding a test case.

483
00:24:33,720 --> 00:24:35,880
Hopefully, this is large enough for everyone.

484
00:24:35,880 --> 00:24:37,400
I think if I make it too much larger,

485
00:24:37,400 --> 00:24:41,040
it kind of doesn't fit on my screen.

486
00:24:41,040 --> 00:24:45,120
So if you need to follow along with the repository

487
00:24:45,120 --> 00:24:48,480
on your local machine, you can do that too.

488
00:24:48,480 --> 00:24:49,000
All right.

489
00:24:49,000 --> 00:24:53,120
So first, we're going to create a new file.

490
00:24:53,120 --> 00:24:53,880
So let's see.

491
00:24:53,880 --> 00:25:00,160
So I have my editor open to the source directory.

492
00:25:00,160 --> 00:25:01,280
So you can see that here.

493
00:25:01,280 --> 00:25:04,560
So the tree that you're seeing of all of our code

494
00:25:04,560 --> 00:25:08,600
is actually within that source directory already.

495
00:25:08,600 --> 00:25:09,440
All right.

496
00:25:09,440 --> 00:25:16,120
So inside of our regression testing boilerplate,

497
00:25:16,120 --> 00:25:19,920
we are going to add a file called test.py.

498
00:25:23,160 --> 00:25:23,680
Let's see.

499
00:25:23,680 --> 00:25:26,220
So the first thing that we're going to go through and test

500
00:25:26,220 --> 00:25:29,400
is something fairly straightforward.

501
00:25:29,400 --> 00:25:34,400
We're going to test that the page is actually just rendering.

502
00:25:34,480 --> 00:25:38,480
So when we go to this view, that we

503
00:25:38,480 --> 00:25:43,160
are able to retrieve the file from the index of our website

504
00:25:43,160 --> 00:25:48,000
and that we are getting a 200 and that this page renders.

505
00:25:48,000 --> 00:25:54,320
So to do so, we are going to grab not that.

506
00:25:54,320 --> 00:25:55,600
Don't have two minutes right now.

507
00:25:55,600 --> 00:25:56,240
VS Code.

508
00:25:56,240 --> 00:25:58,160
Sorry.

509
00:25:58,160 --> 00:26:01,280
So we're going to say, let's grab.

510
00:26:01,280 --> 00:26:05,840
There's a sort of base test case that we can grab.

511
00:26:05,840 --> 00:26:10,080
And as everyone knows, typing in front of 50 people

512
00:26:10,080 --> 00:26:11,520
is when you make the most typos.

513
00:26:11,520 --> 00:26:12,080
So that's fun.

514
00:26:14,880 --> 00:26:17,280
So we're going to grab our base test case.

515
00:26:17,280 --> 00:26:22,360
We're also going to go ahead and grab

516
00:26:22,360 --> 00:26:24,280
something called reverse that's basically

517
00:26:24,280 --> 00:26:28,280
going to let us retrieve the view based

518
00:26:28,280 --> 00:26:30,240
on the name of the view.

519
00:26:30,240 --> 00:26:34,160
So what we're seeing here in our Django application,

520
00:26:34,160 --> 00:26:36,280
this page is called home.

521
00:26:36,280 --> 00:26:42,040
So we can basically pass home to reverse and get the URL for it.

522
00:26:42,040 --> 00:26:43,880
So let's make our first test.

523
00:26:43,880 --> 00:26:47,680
Again, we're just testing that the page is opening.

524
00:26:47,680 --> 00:26:54,360
So I'm going to naively call this the page open test case.

525
00:26:54,360 --> 00:26:59,400
We are going to extend from the base class test case, which

526
00:26:59,400 --> 00:27:01,400
is going to give us a lot of mix-ins.

527
00:27:01,400 --> 00:27:04,400
It's going to give us a lot of those assertions

528
00:27:04,400 --> 00:27:05,840
that we talked about earlier.

529
00:27:05,840 --> 00:27:08,760
That's all going to be baked into this test case.

530
00:27:11,160 --> 00:27:15,040
So within this, we can now start defining basically

531
00:27:15,040 --> 00:27:17,400
different methods on this test case

532
00:27:17,400 --> 00:27:22,240
that will represent different isolated functions that

533
00:27:22,240 --> 00:27:26,280
are going to be called against our class.

534
00:27:26,280 --> 00:27:28,800
So these are the places that I mentioned earlier

535
00:27:29,120 --> 00:27:31,840
we want to make sure that these stay pretty small.

536
00:27:31,840 --> 00:27:33,520
Because when one of these tests fails,

537
00:27:33,520 --> 00:27:38,000
it will say, hey, function one failed.

538
00:27:38,000 --> 00:27:41,160
And sure, it will point you to an exact line.

539
00:27:41,160 --> 00:27:45,080
But if you're testing too much in one of those tests,

540
00:27:45,080 --> 00:27:47,280
it's going to get really confusing to try to actually

541
00:27:47,280 --> 00:27:50,120
pinpoint any of your errors.

542
00:27:50,120 --> 00:27:53,040
All right, so we first want to make sure

543
00:27:53,040 --> 00:27:57,000
that I would say that our home page exists.

544
00:27:57,080 --> 00:28:02,840
We're going to make sure that this page can be rendered.

545
00:28:02,840 --> 00:28:07,160
So we'll make our function for that.

546
00:28:07,160 --> 00:28:10,360
Again, we're going to retrieve our URL from reverse.

547
00:28:13,120 --> 00:28:15,640
Like I mentioned, this page is called home.

548
00:28:15,640 --> 00:28:17,640
I know that there are some people here who aren't

549
00:28:17,640 --> 00:28:19,960
necessarily fluent with Django.

550
00:28:19,960 --> 00:28:21,960
I unfortunately don't have a whole lot of time

551
00:28:21,960 --> 00:28:25,560
to dive into that and where exactly all this is set up.

552
00:28:25,560 --> 00:28:27,640
If that's something you want to learn more about,

553
00:28:27,640 --> 00:28:30,000
come find me afterwards or during one of the breaks.

554
00:28:30,000 --> 00:28:33,640
And I can show you all that.

555
00:28:33,640 --> 00:28:36,040
All right, so the next thing we're going to do

556
00:28:36,040 --> 00:28:40,560
is actually test to make sure that we

557
00:28:40,560 --> 00:28:43,320
can make a call to this URL.

558
00:28:43,320 --> 00:28:45,320
And so baked into this test case,

559
00:28:45,320 --> 00:28:49,000
we have something called the clients.

560
00:28:49,000 --> 00:28:52,320
So we can run a get on our clients

561
00:28:52,320 --> 00:28:56,000
using the URL that we just retrieved.

562
00:28:56,000 --> 00:28:59,160
So we've gotten the URL based on the name of this page

563
00:28:59,160 --> 00:29:00,800
that we have set up.

564
00:29:00,800 --> 00:29:03,720
And then we call a get to that URL

565
00:29:03,720 --> 00:29:07,640
to make sure that we have all this information.

566
00:29:07,640 --> 00:29:12,480
And so at this point, I'm just going to run this test.

567
00:29:12,480 --> 00:29:14,840
And my auto formatter is going to change everything

568
00:29:14,840 --> 00:29:16,840
I just typed.

569
00:29:16,840 --> 00:29:19,040
So I'm going to run this test and see what actually we're

570
00:29:19,040 --> 00:29:22,080
getting back from R. I'm actually

571
00:29:22,880 --> 00:29:24,480
that's probably just going to print out an object.

572
00:29:24,480 --> 00:29:28,000
So I'm going to also run dir on R

573
00:29:28,000 --> 00:29:29,920
so that we can see all of the different methods

574
00:29:29,920 --> 00:29:31,240
that we can get from it.

575
00:29:32,240 --> 00:29:36,160
Cool, okay, so now we've just run this test.

576
00:29:36,160 --> 00:29:40,000
We have a response object that we have retrieved back

577
00:29:40,000 --> 00:29:41,680
from calling this URL.

578
00:29:41,680 --> 00:29:44,040
We can already see that our status code is 200,

579
00:29:44,040 --> 00:29:46,440
which is good, 200 okay.

580
00:29:46,440 --> 00:29:47,700
That means that the page is rendering,

581
00:29:47,700 --> 00:29:49,640
everything is going normally.

582
00:29:49,640 --> 00:29:53,760
And then if we look at the dir of this object,

583
00:29:53,760 --> 00:29:55,760
we can see that we have a bunch of things

584
00:29:55,760 --> 00:29:57,380
that we can call on it.

585
00:29:58,560 --> 00:30:00,160
And so this is where it gets really interesting

586
00:30:00,160 --> 00:30:03,160
that you can kind of dive into more specifics

587
00:30:03,160 --> 00:30:04,720
of this request.

588
00:30:04,720 --> 00:30:07,080
But for right now, basically what we want to make sure

589
00:30:07,080 --> 00:30:09,480
is that when this page renders, we get a 200 okay.

590
00:30:11,560 --> 00:30:13,600
So now if we come back here,

591
00:30:13,600 --> 00:30:16,020
I'm going to take out my print statements.

592
00:30:17,020 --> 00:30:21,660
And at this point we can run an assert.

593
00:30:21,660 --> 00:30:24,100
So again, baked into our test case class,

594
00:30:24,100 --> 00:30:25,740
we now have something called,

595
00:30:26,980 --> 00:30:28,460
I'm going to use assert equal.

596
00:30:29,780 --> 00:30:34,020
And I want to make sure that the status code

597
00:30:34,020 --> 00:30:37,460
that we have retrieved is equal to 200.

598
00:30:39,540 --> 00:30:41,260
Hopefully I typed all that right.

599
00:30:42,100 --> 00:30:45,060
Hey, all right.

600
00:30:45,060 --> 00:30:50,060
So it ran one test and everything is successful.

601
00:30:51,660 --> 00:30:53,400
So one of the things that you'll also notice

602
00:30:53,400 --> 00:30:57,060
that you kind of get out of the box when you run this test

603
00:30:57,060 --> 00:31:00,120
is that it's already kind of baked into Django,

604
00:31:00,120 --> 00:31:03,500
that it's going to create a test database.

605
00:31:03,500 --> 00:31:06,420
And then it's going to destroy that test database for you.

606
00:31:06,420 --> 00:31:08,260
So that's just kind of one of the niceties

607
00:31:08,260 --> 00:31:11,420
that you get batteries included with Django.

608
00:31:15,620 --> 00:31:18,180
All right, so let's see what else we have on this page.

609
00:31:19,140 --> 00:31:21,820
Not a whole lot going on in this application quite yet.

610
00:31:21,820 --> 00:31:25,580
So we have our homepage and then we have our about page,

611
00:31:25,580 --> 00:31:27,380
which apparently we don't have.

612
00:31:29,040 --> 00:31:31,980
So let's actually, let's practice a little bit

613
00:31:31,980 --> 00:31:34,340
of test-driven development here.

614
00:31:34,340 --> 00:31:37,960
So let's say that we know that we want to add an about page.

615
00:31:37,960 --> 00:31:40,080
So we're going to write our test.

616
00:31:40,080 --> 00:31:42,760
And actually I'm going to do myself a favor.

617
00:31:42,760 --> 00:31:44,120
I'm going to copy this code

618
00:31:44,120 --> 00:31:46,320
because we're going to do basically the same thing

619
00:31:46,320 --> 00:31:51,320
for our about page as we did for our homepage.

620
00:31:52,960 --> 00:31:56,400
So now basically all I've done is I've added a new method

621
00:31:56,400 --> 00:32:00,720
to our page open test case.

622
00:32:00,720 --> 00:32:03,600
And I now have a method to test that the homepage exists

623
00:32:03,600 --> 00:32:05,960
and that the about page exists.

624
00:32:05,960 --> 00:32:08,960
So now if I run this, interesting.

625
00:32:15,720 --> 00:32:19,600
So it's not actually telling us anything at this point, right?

626
00:32:19,600 --> 00:32:22,120
So we're running this, it's saying that it ran two tests,

627
00:32:22,120 --> 00:32:27,120
but we know that this test case should be failing,

628
00:32:28,920 --> 00:32:30,360
which is sort of interesting.

629
00:32:36,000 --> 00:32:39,640
Let's see.

630
00:32:51,000 --> 00:32:53,000
I'm actually curious.

631
00:32:53,000 --> 00:32:54,600
So this whole thing is a lie

632
00:32:54,600 --> 00:32:56,320
because that's the joy of live demos

633
00:32:56,320 --> 00:32:58,280
and coding in front of people.

634
00:32:58,280 --> 00:33:02,240
So the reason why that about page didn't work before

635
00:33:02,240 --> 00:33:04,440
is because my server wasn't running.

636
00:33:04,440 --> 00:33:05,280
So that's fun.

637
00:33:05,280 --> 00:33:07,480
So if I go back to this page,

638
00:33:07,480 --> 00:33:09,880
we can actually see that the about page does exist

639
00:33:09,880 --> 00:33:12,240
and that's why all my tests were still passing.

640
00:33:13,240 --> 00:33:16,240
So now that's not what I want.

641
00:33:16,240 --> 00:33:18,920
So now if I go back, I'm gonna kill my server

642
00:33:20,160 --> 00:33:23,080
and if we go back to our code,

643
00:33:23,080 --> 00:33:26,600
we now know that our about page does exist already.

644
00:33:26,600 --> 00:33:28,760
We're gonna do the same thing for a new page

645
00:33:28,760 --> 00:33:30,640
that doesn't actually exist.

646
00:33:30,640 --> 00:33:33,480
So I'm gonna do this for our contact page

647
00:33:33,480 --> 00:33:36,640
and then hopefully we can actually see a test

648
00:33:36,640 --> 00:33:37,920
that properly fails.

649
00:33:37,920 --> 00:33:39,560
Hey, okay.

650
00:33:39,560 --> 00:33:42,680
So we can now see that we have a failing test,

651
00:33:42,680 --> 00:33:44,960
which is what I was going for.

652
00:33:44,960 --> 00:33:47,920
So we get this nice trace back.

653
00:33:47,920 --> 00:33:51,520
It tells us exactly which method failed.

654
00:33:51,520 --> 00:33:55,000
So again, that's helping us pinpoint what's going wrong

655
00:33:55,000 --> 00:33:56,960
and then we can see that we are getting an error

656
00:33:56,960 --> 00:33:58,680
that says no contact found,

657
00:33:58,680 --> 00:34:01,400
contact is not a valid view or pattern name.

658
00:34:03,480 --> 00:34:08,480
So I do kind of want to pull over to the readme real quick

659
00:34:10,240 --> 00:34:13,680
because I wanted to kind of point out a few different things

660
00:34:13,680 --> 00:34:16,000
that we have kind of right out of the bat

661
00:34:16,000 --> 00:34:19,440
or like right out of the gate for our test case.

662
00:34:19,440 --> 00:34:24,440
So there are a few different built-in test cases

663
00:34:25,720 --> 00:34:28,520
depending on exactly what you're trying to test.

664
00:34:28,520 --> 00:34:31,240
So there's a simple test case, a transaction test case.

665
00:34:31,240 --> 00:34:34,800
If you're specifically dealing with database transactions,

666
00:34:34,800 --> 00:34:36,320
live server test case,

667
00:34:36,320 --> 00:34:37,520
there's a bunch of different ones

668
00:34:37,520 --> 00:34:39,360
that you kind of have built in.

669
00:34:39,360 --> 00:34:41,360
So I definitely recommend kind of exploring

670
00:34:41,360 --> 00:34:45,800
and figuring out what efficiencies you can gain

671
00:34:45,800 --> 00:34:48,200
from using the built-in tests.

672
00:34:48,200 --> 00:34:52,880
But I also wanted to point out some of the main asserts

673
00:34:52,880 --> 00:34:55,520
that we have that basically come from unit tests

674
00:34:55,520 --> 00:34:57,200
that are built in.

675
00:34:57,200 --> 00:34:59,960
So asserting equal, not equal, true, false,

676
00:35:00,920 --> 00:35:03,960
it's really important to kind of rely

677
00:35:03,960 --> 00:35:06,000
on these built-in assertions to make sure

678
00:35:06,000 --> 00:35:09,240
that you're properly tying into your test runner

679
00:35:09,240 --> 00:35:11,600
and making sure that you're not relying

680
00:35:11,600 --> 00:35:14,080
on the actual Python assert statement

681
00:35:15,160 --> 00:35:17,360
because there are some weird things that happen

682
00:35:17,360 --> 00:35:19,320
if you use the Python assert statement

683
00:35:19,320 --> 00:35:21,640
and not one of these built-in functions.

684
00:35:21,640 --> 00:35:23,040
So these are just a few examples

685
00:35:23,040 --> 00:35:26,200
of what you can kind of rely on that's built in.

686
00:35:28,480 --> 00:35:29,320
Cool.

687
00:35:30,480 --> 00:35:34,040
All right, so now we have a nice failing test.

688
00:35:35,040 --> 00:35:39,560
So our goal here is going to be that we can actually

689
00:35:39,560 --> 00:35:44,560
fix this test case and get this test to work.

690
00:35:47,040 --> 00:35:49,960
So now we know that we have these two pages,

691
00:35:49,960 --> 00:35:51,960
we need to add a contact page.

692
00:35:53,200 --> 00:35:55,200
So the first thing that we're gonna wind up doing

693
00:35:55,200 --> 00:35:59,940
is adding a URL path.

694
00:36:00,240 --> 00:36:03,320
To our URL patterns, that's usually where I start

695
00:36:03,320 --> 00:36:05,840
when I go to add a new page.

696
00:36:08,200 --> 00:36:11,120
So we can put this anywhere in this array,

697
00:36:11,120 --> 00:36:14,520
but we're going to add a path for contact.

698
00:36:16,120 --> 00:36:20,080
Just kind of as a practice, I like having the slash

699
00:36:20,080 --> 00:36:25,080
at the end of all of my URLs just to keep things consistent.

700
00:36:25,520 --> 00:36:28,960
And then we're gonna do something similar to this,

701
00:36:28,960 --> 00:36:30,640
so I'll just copy it and paste it.

702
00:36:32,300 --> 00:36:36,180
So we are going to want to create a contact page,

703
00:36:37,280 --> 00:36:39,480
and this is where we set that name

704
00:36:39,480 --> 00:36:43,160
that we use for the reverse function.

705
00:36:44,880 --> 00:36:46,600
Cool, I think this looks good.

706
00:36:46,600 --> 00:36:48,840
I don't think I've misspelled anything

707
00:36:48,840 --> 00:36:50,280
or typed it wrong yet.

708
00:36:51,960 --> 00:36:54,440
All right, so next thing that we're going to want to do

709
00:36:54,440 --> 00:36:57,460
is actually create this contact page.

710
00:36:59,120 --> 00:37:01,740
So if we go to our views,

711
00:37:04,720 --> 00:37:07,360
I'm just gonna put it in this high level views.

712
00:37:07,360 --> 00:37:09,360
You can see here that we already have our home page

713
00:37:09,360 --> 00:37:11,120
and our about page.

714
00:37:11,120 --> 00:37:13,460
For a lot of Django applications,

715
00:37:13,460 --> 00:37:15,800
you're gonna wind up splitting these out,

716
00:37:15,800 --> 00:37:17,480
but for this example, we kind of have everything

717
00:37:17,480 --> 00:37:20,480
in one place just to make it a little bit easier to deal with.

718
00:37:22,280 --> 00:37:25,760
So we are going to create our contact page class.

719
00:37:29,840 --> 00:37:31,400
So we're gonna do the same thing

720
00:37:31,400 --> 00:37:32,600
that these other ones are doing.

721
00:37:32,600 --> 00:37:35,040
We're gonna create a template view,

722
00:37:35,040 --> 00:37:36,960
and then give it the template name.

723
00:37:36,960 --> 00:37:38,980
We're gonna make this a contact page.

724
00:37:43,600 --> 00:37:45,160
So basically what we've done so far

725
00:37:45,160 --> 00:37:47,060
is we have created the URL for it.

726
00:37:47,060 --> 00:37:49,120
We've pointed it to a view.

727
00:37:49,120 --> 00:37:50,560
Now we've created our view,

728
00:37:50,560 --> 00:37:54,520
and we need to actually provide the HTML content

729
00:37:54,520 --> 00:37:55,540
for this page.

730
00:37:56,540 --> 00:37:58,660
So if we go back and look,

731
00:37:58,660 --> 00:38:00,220
and my very small sidebar,

732
00:38:02,260 --> 00:38:04,060
we can take a look at this templates directory

733
00:38:04,060 --> 00:38:05,660
and we can see that we already have

734
00:38:05,660 --> 00:38:08,700
a few other HTML pages in here.

735
00:38:08,700 --> 00:38:13,240
So we're going to add our contact.html page.

736
00:38:15,420 --> 00:38:18,020
And this one I actually am going to

737
00:38:18,020 --> 00:38:19,820
just kind of copy paste in.

738
00:38:20,860 --> 00:38:23,820
The actual code that goes here

739
00:38:23,820 --> 00:38:26,060
does not necessarily matter at this point.

740
00:38:26,060 --> 00:38:27,860
We just know that this is going to be

741
00:38:29,540 --> 00:38:31,140
a page that is going to render something

742
00:38:31,140 --> 00:38:33,080
that we have just given it.

743
00:38:34,340 --> 00:38:37,860
So if we go back here,

744
00:38:40,500 --> 00:38:42,500
I think that everything is set up correctly.

745
00:38:42,500 --> 00:38:45,480
So even before having to run my server,

746
00:38:45,480 --> 00:38:47,020
I was able to run my test and see

747
00:38:47,020 --> 00:38:49,700
that I'm now getting back a 200 from this page.

748
00:38:50,700 --> 00:38:54,860
Just to make sure that we know what is going on

749
00:38:54,860 --> 00:38:57,440
and know that I can still type the word run server.

750
00:38:59,420 --> 00:39:00,820
We can now go back here.

751
00:39:02,500 --> 00:39:06,000
I haven't actually added a link to get to the contact page,

752
00:39:06,000 --> 00:39:10,100
but I can go here and go to my contact page,

753
00:39:10,100 --> 00:39:11,260
which is not rendering.

754
00:39:13,700 --> 00:39:15,640
So this is a pretty common approach

755
00:39:15,640 --> 00:39:18,720
for testing your views.

756
00:39:18,720 --> 00:39:22,120
Certain things that view testing is really important for

757
00:39:22,120 --> 00:39:23,600
is making sure that people have

758
00:39:23,600 --> 00:39:25,880
proper permissions to view pages.

759
00:39:25,880 --> 00:39:28,920
So if you have an admin portal or certain pages

760
00:39:28,920 --> 00:39:30,760
that are only controlled by somebody

761
00:39:30,760 --> 00:39:34,420
who is a super admin or admin of a site,

762
00:39:34,420 --> 00:39:36,120
it's important to make sure that those pages

763
00:39:36,120 --> 00:39:37,520
remain protected.

764
00:39:37,520 --> 00:39:41,320
So doing things like testing as an unauthenticated user

765
00:39:41,320 --> 00:39:46,320
that I get either a 404 or a 401 response from those pages,

766
00:39:47,080 --> 00:39:49,580
that's a really common way to use these view tests.

767
00:39:51,820 --> 00:39:53,420
Does anybody have any questions?

768
00:39:56,080 --> 00:39:57,620
Cool.

769
00:39:57,620 --> 00:40:00,880
All right, so I'm gonna close out all of my files

770
00:40:00,880 --> 00:40:02,200
that I was using there.

771
00:40:03,960 --> 00:40:05,960
Collapse that back up.

772
00:40:08,980 --> 00:40:12,120
So the next section that we are going to focus on testing

773
00:40:12,120 --> 00:40:13,800
is testing models.

774
00:40:13,800 --> 00:40:16,200
So if you're following along, this is step two.

775
00:40:18,520 --> 00:40:19,360
Yeah.

776
00:40:22,200 --> 00:40:25,880
All right, so now we can set up an example model test.

777
00:40:26,840 --> 00:40:31,840
So let's go ahead and dive into some of the existing models.

778
00:40:32,400 --> 00:40:34,100
So if we check out here,

779
00:40:35,640 --> 00:40:37,640
I can't make that any smaller.

780
00:40:37,640 --> 00:40:42,420
So if we look at this, this is our profile models page.

781
00:40:44,560 --> 00:40:48,320
We have a base profile that we're setting up.

782
00:40:48,320 --> 00:40:51,040
Again, we kind of have these like built-in classes

783
00:40:52,080 --> 00:40:54,620
that we're pulling in from Django itself

784
00:40:54,620 --> 00:40:58,360
that are letting us kind of scaffold out a lot of this code.

785
00:40:58,360 --> 00:41:00,000
So we have a basic user model.

786
00:41:01,120 --> 00:41:03,120
We have a slug that's going to allow us

787
00:41:03,120 --> 00:41:07,680
to get the user's profile, like page URL.

788
00:41:07,680 --> 00:41:09,680
The user's gonna have a picture, a bio,

789
00:41:09,680 --> 00:41:12,120
and we're gonna make sure that the user's email

790
00:41:12,120 --> 00:41:15,960
is verified before they are able to sign in.

791
00:41:15,960 --> 00:41:18,060
And so we're gonna default that to false.

792
00:41:20,120 --> 00:41:23,280
I think that is pretty much the important things in here.

793
00:41:26,160 --> 00:41:29,500
So let's write some tests for our user model.

794
00:41:33,200 --> 00:41:34,160
Let's see.

795
00:41:34,160 --> 00:41:37,120
So we already have our page open test case.

796
00:41:37,920 --> 00:41:42,220
Let's actually keep this a little bit more modular.

797
00:41:43,520 --> 00:41:45,840
So because we're writing tests specifically

798
00:41:45,840 --> 00:41:47,640
for our profile module

799
00:41:47,640 --> 00:41:50,200
and not for the application in general,

800
00:41:50,200 --> 00:41:53,520
we can actually go ahead and use our test file

801
00:41:53,520 --> 00:41:55,700
that is inside of our profile module.

802
00:41:55,700 --> 00:41:56,960
So I know it's a little bit hard to see

803
00:41:56,960 --> 00:41:59,960
because the screen is a little bit small,

804
00:42:01,240 --> 00:42:06,240
but this test file is inside of the profiles directory.

805
00:42:07,760 --> 00:42:10,760
All right.

806
00:42:10,760 --> 00:42:13,400
So some of the things that I like to test for this

807
00:42:13,400 --> 00:42:16,160
is just making sure that you can create objects

808
00:42:16,160 --> 00:42:17,240
for different models.

809
00:42:18,860 --> 00:42:23,600
And again, we have a few things from Django

810
00:42:23,600 --> 00:42:28,240
that we're going to kind of build off of.

811
00:42:28,240 --> 00:42:30,340
So if we go back here and look at,

812
00:42:32,040 --> 00:42:35,000
actually it isn't mentioned there, that's a lie.

813
00:42:35,000 --> 00:42:36,200
So somewhere along the lines,

814
00:42:36,200 --> 00:42:41,200
this is registered as our user model.

815
00:42:42,720 --> 00:42:46,400
So that is actually something that we can kind of tie into.

816
00:42:47,480 --> 00:42:52,480
So I'm gonna grab our get user model.

817
00:43:03,440 --> 00:43:04,480
There we go.

818
00:43:04,480 --> 00:43:07,360
That's the joys of linting folks.

819
00:43:07,360 --> 00:43:10,800
I'm also going to import our model itself.

820
00:43:16,520 --> 00:43:19,260
This is way harder than I expected it to be.

821
00:43:19,260 --> 00:43:20,840
Okay.

822
00:43:20,840 --> 00:43:22,800
And then basically we can say,

823
00:43:24,080 --> 00:43:28,120
we're gonna set our user model to this.

824
00:43:31,520 --> 00:43:33,080
So this is one of the helpful things

825
00:43:33,080 --> 00:43:36,400
about these little pop-ups that keep getting in our way.

826
00:43:36,400 --> 00:43:38,880
So get user model is going to return the user model

827
00:43:38,880 --> 00:43:40,920
that is actively set up for this project.

828
00:43:45,440 --> 00:43:46,280
Cool.

829
00:43:46,280 --> 00:43:47,880
Okay, that is all looking pretty good.

830
00:43:48,920 --> 00:43:53,920
So now we're gonna set up some test cases for user model.

831
00:43:54,500 --> 00:43:56,800
So I'm just gonna call this user test case.

832
00:43:56,800 --> 00:43:57,960
As your application grows,

833
00:43:57,960 --> 00:44:00,180
you'll figure out different kind of naming conventions

834
00:44:00,180 --> 00:44:02,120
that you want to use.

835
00:44:03,000 --> 00:44:04,520
A lot of times things will start out

836
00:44:04,520 --> 00:44:05,720
maybe a little bit more generic

837
00:44:05,720 --> 00:44:08,960
and you'll kind of increase the specificity

838
00:44:08,960 --> 00:44:13,160
of the names of all of your classes and methods and whatnot.

839
00:44:15,240 --> 00:44:18,080
So what we're gonna do here is we're gonna start tying

840
00:44:18,080 --> 00:44:21,280
into some of the life cycle methods of a test case.

841
00:44:21,280 --> 00:44:22,600
So one of the things that you can do

842
00:44:22,600 --> 00:44:25,160
is you can have a setup command.

843
00:44:25,160 --> 00:44:29,280
So if you want to kind of like create different resources

844
00:44:30,240 --> 00:44:32,440
to use while running your tests,

845
00:44:32,440 --> 00:44:34,560
you can do that in this setup command.

846
00:44:34,560 --> 00:44:37,140
And that will automatically take precedence

847
00:44:37,140 --> 00:44:39,820
over all of your other tests that are going to run.

848
00:44:39,820 --> 00:44:41,360
So basically it will go through and say,

849
00:44:41,360 --> 00:44:42,620
do I have a setup function?

850
00:44:42,620 --> 00:44:44,960
Do I need to create any objects?

851
00:44:44,960 --> 00:44:46,440
Yes, this has a setup function.

852
00:44:46,440 --> 00:44:49,480
I'm gonna create whatever it's asking me to

853
00:44:49,480 --> 00:44:52,020
and then that resource will kind of be available

854
00:44:52,020 --> 00:44:55,640
in the rest of your test methods that you're running.

855
00:44:56,480 --> 00:45:01,480
Okay, so let's say I want to,

856
00:45:04,880 --> 00:45:07,000
I'm gonna use get or create

857
00:45:07,000 --> 00:45:10,540
just in case this user has already been created.

858
00:45:17,220 --> 00:45:20,880
Okay, so now in my setup command,

859
00:45:20,880 --> 00:45:24,460
I am getting or creating this user object

860
00:45:24,460 --> 00:45:27,460
and then I wanna just test to make sure

861
00:45:28,500 --> 00:45:32,000
that we have different attributes

862
00:45:32,000 --> 00:45:34,380
that are defined on this user model.

863
00:45:34,380 --> 00:45:38,500
So I'm gonna say, we're gonna test our base profile

864
00:45:38,500 --> 00:45:39,860
because that is what we are,

865
00:45:41,780 --> 00:45:45,300
that is the model that we have set up as our user model.

866
00:45:45,300 --> 00:45:47,820
It is possible to have like a bunch of different user models.

867
00:45:47,820 --> 00:45:49,760
So you might have one that's different for admins

868
00:45:49,760 --> 00:45:53,260
or different like user hierarchies of your app.

869
00:45:53,260 --> 00:45:55,060
So I like to be really specific about

870
00:45:56,540 --> 00:45:58,600
which user I'm testing.

871
00:45:59,860 --> 00:46:02,360
Okay, so now I'm gonna test

872
00:46:02,360 --> 00:46:04,780
that our base profile can be created.

873
00:46:07,060 --> 00:46:10,020
So in here, since we already have this set up,

874
00:46:10,020 --> 00:46:13,520
all I have to do is actually retrieve that object.

875
00:46:13,520 --> 00:46:16,820
So I'm gonna say user.objects.get.

876
00:46:18,260 --> 00:46:20,660
It's gonna be the same email.

877
00:46:20,660 --> 00:46:22,460
So I retrieve that user.

878
00:46:23,660 --> 00:46:24,940
And then again, let's just see,

879
00:46:24,940 --> 00:46:28,180
make sure that we have all the things that we wanna have.

880
00:46:30,180 --> 00:46:31,900
So I'm gonna print out our object

881
00:46:31,900 --> 00:46:36,120
and then I'm gonna print out a dir of that object.

882
00:46:36,120 --> 00:46:38,260
So now if we go through and run our tests,

883
00:46:39,140 --> 00:46:41,860
cool, I have four tests that are running.

884
00:46:41,860 --> 00:46:45,060
You'll notice that this test is not yet failing

885
00:46:45,060 --> 00:46:47,700
because we don't have any asserts in it.

886
00:46:47,700 --> 00:46:49,300
We're just able to kind of like run it

887
00:46:49,300 --> 00:46:51,900
and print stuff out and kind of see what we've got.

888
00:46:54,140 --> 00:46:57,940
So I'm gonna kind of pick out just a couple of things

889
00:46:57,940 --> 00:47:00,980
that I think might be important on our user model.

890
00:47:00,980 --> 00:47:02,660
One of the things that's always super important

891
00:47:02,660 --> 00:47:05,420
for a user model to have is an ID.

892
00:47:05,420 --> 00:47:07,780
So we wanna make sure that that exists.

893
00:47:08,700 --> 00:47:12,960
We also wanna make sure maybe that when we create an object

894
00:47:12,960 --> 00:47:16,280
that the values that we're providing to create that object

895
00:47:16,280 --> 00:47:18,720
are getting set properly on it.

896
00:47:18,720 --> 00:47:21,100
So because this is a pretty simple example right now,

897
00:47:21,140 --> 00:47:23,580
the only thing that we're setting on the user object

898
00:47:23,580 --> 00:47:25,140
is its email.

899
00:47:25,140 --> 00:47:28,420
And so that might be one thing that we wanna make sure

900
00:47:28,420 --> 00:47:30,280
that the email gets set properly

901
00:47:30,280 --> 00:47:32,640
as we're like asking it to set the email.

902
00:47:35,260 --> 00:47:39,440
All right, so we've seen what that user object looks like.

903
00:47:40,680 --> 00:47:42,300
So let's just say,

904
00:47:47,180 --> 00:47:50,760
we wanna assert that the user has an ID.

905
00:47:52,100 --> 00:47:57,100
We want to assert that the email address

906
00:47:58,180 --> 00:48:01,580
that we have provided and the email address

907
00:48:01,580 --> 00:48:03,820
of the created object are the same.

908
00:48:04,820 --> 00:48:09,820
So I'm gonna say that is equal to u.email.

909
00:48:16,180 --> 00:48:17,580
And really you can kind of go through

910
00:48:17,580 --> 00:48:21,140
and if you look back at the user model,

911
00:48:21,140 --> 00:48:22,700
I would definitely try to make sure

912
00:48:22,700 --> 00:48:24,980
that all of these things exist.

913
00:48:25,820 --> 00:48:28,660
One of the things that I might do is assert

914
00:48:28,660 --> 00:48:32,180
that when I create the user object

915
00:48:34,020 --> 00:48:39,020
that the email verified setting is set to false

916
00:48:39,420 --> 00:48:40,340
because that's really important.

917
00:48:40,340 --> 00:48:42,260
Maybe it's part of our business logic

918
00:48:42,260 --> 00:48:45,420
that a user has to click a link in an email

919
00:48:45,420 --> 00:48:48,060
to make sure that they're using a valid email address first.

920
00:48:48,060 --> 00:48:49,820
So this is something that's probably important

921
00:48:49,820 --> 00:48:51,680
to make sure gets that correctly.

922
00:48:53,420 --> 00:48:54,940
So now hopefully,

923
00:48:58,540 --> 00:49:01,340
oh, this is why you're at test.

924
00:49:01,340 --> 00:49:03,540
So we want is not none.

925
00:49:03,540 --> 00:49:06,060
We definitely want them to have a user ID.

926
00:49:08,420 --> 00:49:09,260
So let's see.

927
00:49:09,260 --> 00:49:12,020
So user doesn't have an attribute email verified.

928
00:49:15,420 --> 00:49:19,120
So let me look back at what this object actually looks like.

929
00:49:30,100 --> 00:49:30,940
Yeah.

930
00:49:32,340 --> 00:49:33,920
Huh.

931
00:49:33,920 --> 00:49:38,920
Well, I'm not gonna dwell on this necessarily

932
00:49:39,340 --> 00:49:41,980
because I don't wanna debug why this isn't working

933
00:49:41,980 --> 00:49:42,960
at this moment.

934
00:49:43,040 --> 00:49:47,240
But just know that that's definitely just something else

935
00:49:47,240 --> 00:49:48,960
that you can kind of keep an eye out for

936
00:49:48,960 --> 00:49:50,160
in making sure that you're testing

937
00:49:50,160 --> 00:49:51,480
all these different pieces.

938
00:49:54,640 --> 00:49:56,600
Yeah, because I think I only have about,

939
00:49:56,600 --> 00:49:57,440
according to schedule,

940
00:49:57,440 --> 00:49:59,320
I only have about 15 minutes left for this section.

941
00:49:59,320 --> 00:50:01,160
So I'm gonna keep trucking.

942
00:50:03,520 --> 00:50:04,360
All right.

943
00:50:04,360 --> 00:50:09,360
So going back to a little bit more kind of like in depth

944
00:50:14,560 --> 00:50:16,040
on testing our views,

945
00:50:17,000 --> 00:50:18,880
sometimes it's going to be important to test

946
00:50:18,880 --> 00:50:22,300
more than just the status code that we received.

947
00:50:22,300 --> 00:50:24,400
Sometimes we're gonna want to make sure

948
00:50:24,400 --> 00:50:27,640
that different elements are appearing on the page,

949
00:50:27,640 --> 00:50:30,560
that there is a link to get to the signup page,

950
00:50:30,560 --> 00:50:31,460
that kind of stuff.

951
00:50:32,460 --> 00:50:35,820
And so we have a little bit more information

952
00:50:35,820 --> 00:50:39,220
from those views that is sometimes helpful

953
00:50:39,220 --> 00:50:40,340
to kind of dive into.

954
00:50:42,780 --> 00:50:44,460
Let's see.

955
00:50:44,460 --> 00:50:49,460
So if we go back here and look at what else we can get

956
00:50:50,900 --> 00:50:55,180
from our response objects.

957
00:50:55,980 --> 00:50:59,180
So let's look at,

958
00:50:59,180 --> 00:51:01,980
let's just look at the dir of R again

959
00:51:01,980 --> 00:51:04,020
and see what else we have here.

960
00:51:05,380 --> 00:51:06,660
Hopefully I put everything back

961
00:51:06,660 --> 00:51:07,560
and everything's passing.

962
00:51:07,560 --> 00:51:09,140
Okay.

963
00:51:09,140 --> 00:51:11,960
So as we kind of dive into this,

964
00:51:11,960 --> 00:51:15,060
one of the things that can be super important to look at

965
00:51:15,060 --> 00:51:18,420
is content, which is split between two lines.

966
00:51:20,460 --> 00:51:21,940
So just out of curiosity,

967
00:51:21,940 --> 00:51:24,740
let's see, not caps lock.

968
00:51:24,780 --> 00:51:26,580
Let's see exactly what this looks like.

969
00:51:28,900 --> 00:51:29,740
Ooh yeah.

970
00:51:29,740 --> 00:51:30,660
So this is cool.

971
00:51:30,660 --> 00:51:33,340
We actually get all of the HTML

972
00:51:35,060 --> 00:51:37,760
that is going to render on the page.

973
00:51:39,560 --> 00:51:41,860
And something that gets important

974
00:51:41,860 --> 00:51:44,020
when you're looking at making sure

975
00:51:44,020 --> 00:51:45,740
that your view code is working

976
00:51:45,740 --> 00:51:48,740
is you can make sure that,

977
00:51:48,740 --> 00:51:50,860
say you have different variables

978
00:51:50,860 --> 00:51:52,700
that are getting rendered in your template,

979
00:51:52,700 --> 00:51:54,180
you can make sure that those variables

980
00:51:54,180 --> 00:51:57,860
are getting interpolated and either calculated

981
00:51:57,860 --> 00:51:59,920
or retrieved correctly.

982
00:51:59,920 --> 00:52:03,220
So for example, I'm not gonna dive into this right now,

983
00:52:03,220 --> 00:52:05,900
but one of the things I would say to test is,

984
00:52:05,900 --> 00:52:08,060
say you have a user profile page

985
00:52:08,060 --> 00:52:11,020
that displays their name and their email address on it.

986
00:52:11,020 --> 00:52:15,140
I would make sure that I'm retrieving the user model

987
00:52:15,140 --> 00:52:16,460
correctly and that those values

988
00:52:16,460 --> 00:52:19,220
are getting displayed properly by asserting

989
00:52:20,060 --> 00:52:23,180
that the first name gets displayed in the page

990
00:52:23,180 --> 00:52:27,180
and is actually present where I expect it to be

991
00:52:27,180 --> 00:52:28,800
within all of this HTML.

992
00:52:30,940 --> 00:52:34,860
So again, you can kind of dive really, really deeply

993
00:52:34,860 --> 00:52:37,200
into exactly what parts of this you wanna test,

994
00:52:38,100 --> 00:52:41,400
but some of the really simple ways to approach it

995
00:52:41,400 --> 00:52:45,400
is just to make sure that a string exists in that content.

996
00:52:46,400 --> 00:52:48,500
So let's just say,

997
00:52:51,440 --> 00:52:54,280
let's see, this is gonna differ a little bit from the notes,

998
00:52:54,280 --> 00:52:56,880
but just kind of going along with following

999
00:52:56,880 --> 00:52:58,960
those best practices in terms of making sure

1000
00:52:58,960 --> 00:53:03,040
that our tests are really kind of like modular and atomic.

1001
00:53:03,040 --> 00:53:07,560
I'm gonna add a new method to say test home page title.

1002
00:53:11,120 --> 00:53:13,520
I think it's the title on this page.

1003
00:53:13,520 --> 00:53:14,360
Cool.

1004
00:53:16,120 --> 00:53:19,520
All right, so I can kind of do the same thing.

1005
00:53:19,520 --> 00:53:23,120
And again, I would suggest always taking a look at your code

1006
00:53:23,120 --> 00:53:26,080
and figuring out what you can move into a helper module.

1007
00:53:26,080 --> 00:53:28,000
If you have noticed a bit,

1008
00:53:28,000 --> 00:53:31,700
this is gonna get really redundant really, really quickly.

1009
00:53:31,700 --> 00:53:35,760
So perhaps you have a method that gets your response for you

1010
00:53:35,760 --> 00:53:38,000
and you just pass it the name kind of thing.

1011
00:53:39,160 --> 00:53:42,160
But yeah, again, see what kinds of patterns kind of emerge

1012
00:53:42,160 --> 00:53:43,440
as you're writing your own tests

1013
00:53:43,440 --> 00:53:46,480
to kind of find out how you can optimize this for yourself.

1014
00:53:47,360 --> 00:53:49,260
So now we can basically just say,

1015
00:53:50,880 --> 00:53:52,920
an interesting one is assert in.

1016
00:53:53,840 --> 00:53:56,440
And so you can use assert in HTML,

1017
00:53:56,440 --> 00:53:59,320
which gives you some other kind of like helper methods

1018
00:53:59,320 --> 00:54:02,240
for actually like targeting different pieces of HTML

1019
00:54:02,240 --> 00:54:04,040
based on different selectors and whatnot,

1020
00:54:04,040 --> 00:54:06,080
which we won't dive into right now.

1021
00:54:07,320 --> 00:54:09,000
But we can basically say,

1022
00:54:09,000 --> 00:54:14,000
I want to make sure that the word home appears

1023
00:54:15,040 --> 00:54:16,400
on my homepage.

1024
00:54:16,400 --> 00:54:18,880
So the user knows that they are on the homepage.

1025
00:54:19,880 --> 00:54:22,280
Hopefully this works.

1026
00:54:23,480 --> 00:54:24,480
Cool.

1027
00:54:24,480 --> 00:54:27,580
And so again, not gonna do it now,

1028
00:54:27,580 --> 00:54:29,880
but I would encourage you to kind of like figure out exactly

1029
00:54:29,880 --> 00:54:32,480
what exists on these pages that you wanna dive into.

1030
00:54:39,280 --> 00:54:41,200
Let's see.

1031
00:54:43,400 --> 00:54:45,080
How many more steps do I have?

1032
00:54:47,080 --> 00:54:50,080
I wanna make sure that we try to stick to time

1033
00:54:50,080 --> 00:54:51,320
as much as possible.

1034
00:54:54,080 --> 00:54:58,480
So we've got a little bit more on views and forms left.

1035
00:54:58,480 --> 00:54:59,320
Okay.

1036
00:55:01,400 --> 00:55:05,880
So I'm actually, I am going to skip over 3B,

1037
00:55:05,880 --> 00:55:08,680
but I'm gonna point it out here really quickly.

1038
00:55:09,560 --> 00:55:12,520
So 3B, we were basically going to like walk through

1039
00:55:12,520 --> 00:55:16,160
adding a variable that gets computed

1040
00:55:16,160 --> 00:55:18,600
and then rendered into our template.

1041
00:55:18,600 --> 00:55:22,800
So if we were to go into say our contact page,

1042
00:55:22,800 --> 00:55:27,800
we can add a way to kind of set this variable

1043
00:55:28,120 --> 00:55:31,420
within our context that will be rendered on our page.

1044
00:55:31,420 --> 00:55:32,840
This was just a simple example.

1045
00:55:32,840 --> 00:55:36,120
So I just set it to two plus two very arbitrarily.

1046
00:55:36,120 --> 00:55:39,240
So I could show that this was being interpolated.

1047
00:55:39,240 --> 00:55:40,280
So this gets calculated.

1048
00:55:40,280 --> 00:55:44,360
It gets set into this two plus two variable.

1049
00:55:44,360 --> 00:55:46,640
And then inside of our template,

1050
00:55:46,640 --> 00:55:49,040
we can then go through and actually render this

1051
00:55:49,040 --> 00:55:51,880
as a template variable.

1052
00:55:51,880 --> 00:55:53,640
So that's what these kind of curly braces mean

1053
00:55:53,640 --> 00:55:56,840
is that this is actually interpolated as a variable.

1054
00:55:56,840 --> 00:56:01,840
And then we can go back through and edit our test.

1055
00:56:03,680 --> 00:56:04,840
I think in this example,

1056
00:56:04,840 --> 00:56:08,240
I replaced contact with two plus two, but yeah.

1057
00:56:08,240 --> 00:56:10,400
Basically this section was going to be just testing

1058
00:56:10,400 --> 00:56:13,680
that variable gets interpolated

1059
00:56:13,680 --> 00:56:16,320
and then exists inside of our content.

1060
00:56:16,320 --> 00:56:17,920
But yeah, we're gonna skip ahead.

1061
00:56:20,980 --> 00:56:25,840
Okay, so next up is testing forms.

1062
00:56:25,840 --> 00:56:28,000
So this is one that gets, I think,

1063
00:56:28,000 --> 00:56:30,160
a little bit more complex

1064
00:56:30,160 --> 00:56:32,960
because this is where we get to deal with user input

1065
00:56:32,960 --> 00:56:34,600
and users like to break things

1066
00:56:34,600 --> 00:56:36,680
and do things that we don't expect them to.

1067
00:56:36,680 --> 00:56:38,400
So this is definitely one of the other areas

1068
00:56:38,400 --> 00:56:42,180
that I like focusing on different inputs

1069
00:56:42,180 --> 00:56:45,420
that I wouldn't necessarily expect to be rendered.

1070
00:56:47,040 --> 00:56:47,880
And we'll talk a little bit more

1071
00:56:47,880 --> 00:56:50,640
about how you can approach automating that as well.

1072
00:56:52,620 --> 00:56:54,600
All right, let's see.

1073
00:56:55,600 --> 00:57:00,240
So trying to see, do we have a user form?

1074
00:57:00,240 --> 00:57:01,680
We do have a user form, cool.

1075
00:57:04,240 --> 00:57:07,900
I don't know why my linter is sad right now.

1076
00:57:09,480 --> 00:57:11,560
Hopefully all of these things are gonna be okay.

1077
00:57:12,880 --> 00:57:16,440
All right, so if we already have our user form

1078
00:57:16,440 --> 00:57:19,200
that was already set up for us,

1079
00:57:19,200 --> 00:57:20,400
we're gonna do something similar

1080
00:57:20,400 --> 00:57:23,900
where we wanna make sure that our data

1081
00:57:23,900 --> 00:57:26,420
gets properly filled into our form.

1082
00:57:26,420 --> 00:57:30,260
So say for example, going back to that user profile page idea,

1083
00:57:30,260 --> 00:57:32,540
if we have a user object and they can say,

1084
00:57:32,540 --> 00:57:35,340
go in there and change their information,

1085
00:57:35,340 --> 00:57:36,900
edit their email, password,

1086
00:57:36,900 --> 00:57:40,380
well maybe not password in this, but bio,

1087
00:57:40,380 --> 00:57:42,740
anything that they would necessarily wanna change.

1088
00:57:43,620 --> 00:57:45,500
The thing that we're gonna test for is making sure

1089
00:57:45,500 --> 00:57:48,820
that our existing user model gets filled into our form

1090
00:57:51,180 --> 00:57:52,020
properly.

1091
00:57:53,020 --> 00:57:56,060
So we have this form here already.

1092
00:57:56,060 --> 00:57:57,760
I'm gonna keep this file open.

1093
00:57:59,620 --> 00:58:03,340
I'm going to go back to our profile tests.

1094
00:58:05,900 --> 00:58:07,260
Again, as your application grows,

1095
00:58:07,260 --> 00:58:09,980
you might separate these out into like a models test

1096
00:58:09,980 --> 00:58:12,580
and a views test and a forms test.

1097
00:58:12,580 --> 00:58:16,660
That's a pretty common pattern that you'll see.

1098
00:58:18,780 --> 00:58:20,460
But for right now, I'm actually just gonna go ahead

1099
00:58:20,460 --> 00:58:23,420
and extend off of this user test case

1100
00:58:23,420 --> 00:58:25,780
because our application is still pretty small.

1101
00:58:27,340 --> 00:58:30,620
So I'm gonna test that our form is valid.

1102
00:58:30,620 --> 00:58:33,100
So I'll call this test valid user form.

1103
00:58:36,820 --> 00:58:38,540
Kind of similar to what we did before,

1104
00:58:38,540 --> 00:58:41,700
we are going to want to retrieve our user object.

1105
00:58:44,220 --> 00:58:45,700
But at this point, I'm actually going to go ahead

1106
00:58:45,700 --> 00:58:49,660
and create a new object that has maybe a little bit

1107
00:58:49,660 --> 00:58:51,360
more information set on it.

1108
00:58:54,660 --> 00:58:59,660
So I'm actually going to, I'm gonna copy and paste this

1109
00:58:59,860 --> 00:59:00,700
for time.

1110
00:59:02,360 --> 00:59:05,620
Okay, so I'm gonna create a user object for Leia.

1111
00:59:07,940 --> 00:59:12,180
I'm going to set up a data object.

1112
00:59:13,540 --> 00:59:18,540
So I'm gonna say my name is set to my user's name.

1113
00:59:20,660 --> 00:59:23,380
And then I'm going to create my form,

1114
00:59:23,380 --> 00:59:26,660
which I think I will have to add an import for that.

1115
00:59:26,660 --> 00:59:27,860
I'll have to double check.

1116
00:59:29,420 --> 00:59:31,980
So I'm gonna say user form and I'm gonna pass it

1117
00:59:31,980 --> 00:59:33,500
my data object.

1118
00:59:36,100 --> 00:59:37,460
Let's make sure.

1119
00:59:39,180 --> 00:59:41,780
This is probably going to fail.

1120
00:59:41,780 --> 00:59:46,780
So I'm gonna say from forms, import.

1121
00:59:50,300 --> 00:59:51,140
User form.

1122
00:59:54,340 --> 00:59:55,180
Yeah.

1123
00:59:57,380 --> 00:59:58,860
Okay, that should work.

1124
00:59:58,860 --> 01:00:01,660
I don't know why it was sad about it.

1125
01:00:04,580 --> 01:00:06,300
And again, I'm just gonna make sure that all of this

1126
01:00:06,300 --> 01:00:09,740
is working before I get too far off.

1127
01:00:12,340 --> 01:00:15,140
Create takes one positional argument, but two are given.

1128
01:00:16,020 --> 01:00:20,020
Huh, oh, that's because I didn't.

1129
01:00:20,020 --> 01:00:20,860
There we go.

1130
01:00:23,780 --> 01:00:27,620
Okay, so now we can see here that we actually have

1131
01:00:27,620 --> 01:00:29,940
our form that is rendering.

1132
01:00:29,940 --> 01:00:31,480
If we take a look at this form,

1133
01:00:31,480 --> 01:00:34,060
it's a fairly straightforward form.

1134
01:00:34,060 --> 01:00:37,200
All it has set up right now is a name field.

1135
01:00:38,420 --> 01:00:40,540
So you can see, you can start to see some of the things

1136
01:00:40,540 --> 01:00:43,780
that Django gives you out of the box as well.

1137
01:00:43,780 --> 01:00:46,120
So we have this label for ID name.

1138
01:00:47,300 --> 01:00:52,300
We have an input field with name, value is set to layer,

1139
01:00:53,460 --> 01:00:56,180
max length required ID, all those things are kind of

1140
01:00:56,180 --> 01:00:57,780
already set on there for us.

1141
01:00:58,780 --> 01:01:03,780
So the thing that we're gonna test for right now

1142
01:01:03,940 --> 01:01:06,460
is just making sure that this form is valid.

1143
01:01:06,460 --> 01:01:09,100
So if we look at this form, the things that are required

1144
01:01:09,100 --> 01:01:10,860
on it are just the name.

1145
01:01:10,860 --> 01:01:14,100
And so since we've pulled out our user object,

1146
01:01:14,100 --> 01:01:16,220
initialized our form with this data,

1147
01:01:16,220 --> 01:01:19,380
we just basically wanna say that the form is valid

1148
01:01:19,380 --> 01:01:21,160
and that it has a name set.

1149
01:01:22,740 --> 01:01:25,540
So there are a couple of ways that you could go about this.

1150
01:01:27,140 --> 01:01:30,780
You could test directly that the name is set,

1151
01:01:30,780 --> 01:01:33,100
but what I'm really worried about is that the form is valid

1152
01:01:33,100 --> 01:01:36,060
and that the user will be able to submit a change.

1153
01:01:36,780 --> 01:01:40,940
So, I'm gonna add,

1154
01:01:41,980 --> 01:01:44,220
basically just using this helper method,

1155
01:01:44,220 --> 01:01:46,780
calling from the form directly to say that it's valid

1156
01:01:46,780 --> 01:01:47,820
and that that is true.

1157
01:01:49,240 --> 01:01:50,780
And I'll clean up after myself.

1158
01:01:53,700 --> 01:01:56,060
Cool, so this test is passing.

1159
01:02:01,920 --> 01:02:04,600
All right, let's see.

1160
01:02:06,180 --> 01:02:07,700
Where I'm at.

1161
01:02:11,200 --> 01:02:13,340
So other things that we wanna make sure that we test

1162
01:02:13,340 --> 01:02:17,020
are the things that users can break.

1163
01:02:17,020 --> 01:02:19,900
And so if we're setting requirements for a user,

1164
01:02:19,900 --> 01:02:21,500
we wanna make sure that those requirements

1165
01:02:21,500 --> 01:02:23,980
are actually being enforced.

1166
01:02:28,140 --> 01:02:31,780
And again, I'm just trying to be cognizant of time

1167
01:02:31,780 --> 01:02:33,580
because I know we still have a lot of stuff

1168
01:02:33,580 --> 01:02:35,660
for the actual visual testing part.

1169
01:02:37,060 --> 01:02:41,020
But this is one of those places where it's really important

1170
01:02:41,020 --> 01:02:44,980
to kind of like dive in and identify your edge cases.

1171
01:02:44,980 --> 01:02:49,100
So say that you have a user bio

1172
01:02:49,100 --> 01:02:53,980
and the user bio has a length requirement of 200 characters.

1173
01:02:53,980 --> 01:02:57,860
I would kind of test those boundaries around the edge cases.

1174
01:02:57,860 --> 01:03:00,900
So like testing with 199 characters,

1175
01:03:00,900 --> 01:03:03,460
with 200 characters, with 201 characters,

1176
01:03:03,460 --> 01:03:05,460
and making sure that I'm kind of like getting the errors

1177
01:03:05,460 --> 01:03:07,140
that I want on either end of it.

1178
01:03:08,420 --> 01:03:10,420
And then I also like to go for like extremes.

1179
01:03:10,420 --> 01:03:15,220
So like if somebody put in like 10,000 characters,

1180
01:03:15,220 --> 01:03:17,220
just to make sure that like there's not some sort

1181
01:03:17,220 --> 01:03:19,700
of weird bug where it's like, oh, well, we made sure

1182
01:03:19,700 --> 01:03:22,580
that it was less than 300 characters.

1183
01:03:22,580 --> 01:03:25,620
We rejected 201 to 300 characters,

1184
01:03:25,620 --> 01:03:28,480
but somehow somebody can put in like 10,000 characters.

1185
01:03:28,480 --> 01:03:30,980
So those are kind of like the fun pieces that you'll see

1186
01:03:32,020 --> 01:03:33,180
that you can dive into.

1187
01:03:34,020 --> 01:03:39,020
Also, I'm gonna skip coding out that part because of time.

1188
01:03:41,940 --> 01:03:46,220
So, oh, I think I have a broken link in my,

1189
01:03:47,700 --> 01:03:50,940
yeah, I have a broken link in the notes, by the way.

1190
01:03:50,940 --> 01:03:53,660
Testing forms, I think, refers back to itself

1191
01:03:53,660 --> 01:03:55,100
and doesn't let you continue.

1192
01:03:57,060 --> 01:03:59,740
All right, so one of the things that I did wanna kind

1193
01:03:59,740 --> 01:04:02,940
of leave you with for the Django testing section,

1194
01:04:02,940 --> 01:04:06,920
specifically, is a bunch of different testing tools.

1195
01:04:08,420 --> 01:04:11,220
So I highly recommend checking all these out,

1196
01:04:11,220 --> 01:04:14,060
especially if you're using Django specifically.

1197
01:04:14,060 --> 01:04:16,460
Django web test is really, really helpful.

1198
01:04:16,460 --> 01:04:18,540
Factory Boy is really helpful.

1199
01:04:18,540 --> 01:04:20,360
You can have fixtures that basically allow you

1200
01:04:20,360 --> 01:04:22,700
to like generate a bunch of different objects

1201
01:04:22,700 --> 01:04:24,300
for your tests.

1202
01:04:24,300 --> 01:04:25,660
So instead of having to go through

1203
01:04:25,660 --> 01:04:27,580
and like create a bunch of objects

1204
01:04:27,580 --> 01:04:30,120
and like having a bunch of stuff like hard coded

1205
01:04:30,120 --> 01:04:33,080
into your tests and like a bunch of data objects

1206
01:04:33,080 --> 01:04:35,080
hard coded into your tests, this is really helpful

1207
01:04:35,080 --> 01:04:37,720
with like spinning up a bunch of different objects.

1208
01:04:39,640 --> 01:04:41,200
I'm a huge fan of PyTest.

1209
01:04:41,200 --> 01:04:44,400
So everything so far has been using the built-in unit test

1210
01:04:44,400 --> 01:04:48,320
which Django ships with and works like out of the box.

1211
01:04:48,320 --> 01:04:50,760
I think I had a couple of people on the survey say

1212
01:04:50,760 --> 01:04:53,480
that they were really interested in PyTest specifically,

1213
01:04:53,480 --> 01:04:56,280
as well as PyTest is like standalone.

1214
01:04:56,280 --> 01:04:58,880
I'm a huge fan, definitely talk to me about that later

1215
01:04:58,880 --> 01:05:00,680
if you're interested and check it out

1216
01:05:00,680 --> 01:05:03,040
if you're trying to write tests for Django.

1217
01:05:03,040 --> 01:05:06,760
And then one of my favorite libraries is called Hypothesis.

1218
01:05:06,760 --> 01:05:10,080
And basically it allows you to like write parameterized tests

1219
01:05:10,080 --> 01:05:12,880
and generate a bunch of different information

1220
01:05:13,720 --> 01:05:16,720
to really kind of like ease the difficulty

1221
01:05:16,720 --> 01:05:18,620
of creating test data.

1222
01:05:18,620 --> 01:05:21,180
So in this example of like testing the user bio,

1223
01:05:22,240 --> 01:05:25,020
sure I could probably come up with a bio

1224
01:05:25,020 --> 01:05:27,900
or find like a lorem ipsum that I could copy and paste

1225
01:05:27,900 --> 01:05:32,260
and use as like my 200 character bio

1226
01:05:32,260 --> 01:05:34,420
or my 10,000 character bio.

1227
01:05:34,420 --> 01:05:36,740
But you can actually tell Hypothesis

1228
01:05:36,740 --> 01:05:38,700
to generate these things for you.

1229
01:05:38,700 --> 01:05:41,400
So Hypothesis will be able to generate like names

1230
01:05:41,400 --> 01:05:45,260
and addresses and data that looks realistic

1231
01:05:45,260 --> 01:05:48,460
but is not necessarily something that you have to hard code.

1232
01:05:48,460 --> 01:05:49,820
And one of the other really, really cool things

1233
01:05:49,820 --> 01:05:53,040
about this too is that by using a library

1234
01:05:53,040 --> 01:05:56,940
that's kind of randomly generating data for your tests

1235
01:05:56,940 --> 01:05:57,780
that you're running,

1236
01:05:57,780 --> 01:06:01,020
you can also sometimes find super weird edge cases.

1237
01:06:01,020 --> 01:06:04,120
So I have a story about that

1238
01:06:04,120 --> 01:06:06,000
but I'm not gonna go into it now.

1239
01:06:06,000 --> 01:06:08,740
If anybody's really interested in a really weird bug

1240
01:06:08,740 --> 01:06:13,040
that broke a car radio in Mazda 6s,

1241
01:06:14,400 --> 01:06:16,140
come talk to me.

1242
01:06:16,140 --> 01:06:18,020
But yeah, so it's just, it's kind of a cool way

1243
01:06:18,020 --> 01:06:20,500
to be able to test a bunch of different input,

1244
01:06:20,500 --> 01:06:22,700
test different address links and name links

1245
01:06:22,700 --> 01:06:24,260
and different character encodings

1246
01:06:24,260 --> 01:06:26,580
and stuff that you wouldn't necessarily think to test.

1247
01:06:26,580 --> 01:06:28,380
And it kind of handles it all for you.

1248
01:06:32,660 --> 01:06:35,580
And so I think I tried to touch on kind of pointing out

1249
01:06:35,580 --> 01:06:38,740
a lot of these best practices as we were going through it.

1250
01:06:40,340 --> 01:06:43,460
But again, modularizing your tests is super important.

1251
01:06:43,460 --> 01:06:45,380
Being able to kind of pinpoint which areas

1252
01:06:45,380 --> 01:06:49,340
that you're testing is also really important.

1253
01:06:49,340 --> 01:06:51,340
Running your tests is probably one

1254
01:06:51,340 --> 01:06:52,340
of the most important parts.

1255
01:06:52,340 --> 01:06:54,240
Because if you write tests and you don't run them,

1256
01:06:54,240 --> 01:06:56,260
one of the things I see a lot is that people write tests,

1257
01:06:56,260 --> 01:06:58,740
nobody runs them, somebody tries to run them

1258
01:06:58,740 --> 01:07:01,820
at some point a month down the road and they're all broken

1259
01:07:01,820 --> 01:07:03,860
and then nobody wants to fix the broken tests

1260
01:07:03,860 --> 01:07:05,860
and then you don't write tests anymore.

1261
01:07:07,180 --> 01:07:08,660
So running your tests is important.

1262
01:07:08,660 --> 01:07:12,400
If you can have a continuous integration server set up,

1263
01:07:12,400 --> 01:07:13,660
we'll dive into a little bit more

1264
01:07:13,660 --> 01:07:16,180
of what that looks like at the end.

1265
01:07:16,180 --> 01:07:19,260
But continuous integration is kind of the best way to do it

1266
01:07:19,260 --> 01:07:22,340
because you can run it on a server,

1267
01:07:22,340 --> 01:07:23,880
somebody else's machine, you're not worried

1268
01:07:23,880 --> 01:07:25,660
about configuration, everything is running

1269
01:07:25,660 --> 01:07:28,040
in the same environment and it can kind of run

1270
01:07:28,040 --> 01:07:29,380
without everybody thinking about it.

1271
01:07:29,380 --> 01:07:33,860
And you can enforce that for pull requests or merge requests

1272
01:07:33,860 --> 01:07:36,260
and actually make sure that your tests are passing

1273
01:07:36,260 --> 01:07:39,860
before merging code together or before pushing code

1274
01:07:39,860 --> 01:07:41,500
out to production.

1275
01:07:41,500 --> 01:07:45,580
I also highly recommend checking out using local Git hooks.

1276
01:07:45,580 --> 01:07:48,140
So there are ways to basically tell Git

1277
01:07:48,140 --> 01:07:51,680
to run certain commands before allowing a user

1278
01:07:51,680 --> 01:07:54,720
to either commit to a certain branch

1279
01:07:54,720 --> 01:07:57,300
or push to a remote repository.

1280
01:07:57,300 --> 01:07:59,540
Just make sure that all your tests are passing locally

1281
01:07:59,540 --> 01:08:02,080
before you go and push it off to somebody else.

1282
01:08:02,080 --> 01:08:04,960
And so one of the things you'll see oftentimes is like,

1283
01:08:04,960 --> 01:08:06,600
sure, you should make sure that your tests are passing

1284
01:08:06,600 --> 01:08:08,480
on your machine, but then once you push

1285
01:08:08,480 --> 01:08:10,900
to a continuous integration server,

1286
01:08:10,900 --> 01:08:13,920
it's gonna run on like a bunch of different machines,

1287
01:08:13,920 --> 01:08:15,960
especially with front end tests,

1288
01:08:15,960 --> 01:08:17,520
making sure that you're testing cross browser

1289
01:08:17,520 --> 01:08:18,520
and all that stuff.

1290
01:08:18,520 --> 01:08:20,040
That's something that's really nice to automate

1291
01:08:20,040 --> 01:08:21,760
and kind of like let CI handle.

1292
01:08:22,760 --> 01:08:26,640
And then of course, like set meaningful benchmarks.

1293
01:08:26,640 --> 01:08:28,680
Having 100% code coverage does not mean

1294
01:08:28,680 --> 01:08:30,920
that your software is bug free.

1295
01:08:30,920 --> 01:08:33,060
And so really just being able to like focus

1296
01:08:33,060 --> 01:08:36,840
on the really important parts of your code

1297
01:08:36,840 --> 01:08:38,040
is definitely important.

1298
01:08:39,100 --> 01:08:41,840
And then find a standard and stick to it.

1299
01:08:41,840 --> 01:08:43,240
Be willing to iterate, find the things

1300
01:08:43,240 --> 01:08:46,920
that are gonna work best for your team and for yourself

1301
01:08:46,920 --> 01:08:50,420
because making testing a more positive experience

1302
01:08:50,420 --> 01:08:53,900
is gonna encourage you and your teammates to write tests.

1303
01:08:53,900 --> 01:08:56,580
So if everybody hates writing tests

1304
01:08:56,580 --> 01:08:59,020
or thinks that certain things are like,

1305
01:08:59,020 --> 01:09:02,320
have too much boilerplate or are really difficult,

1306
01:09:02,320 --> 01:09:04,420
nobody's gonna wanna actually write the test.

1307
01:09:06,820 --> 01:09:08,260
All right, at this point,

1308
01:09:08,260 --> 01:09:11,540
we are just a couple of minutes over, which is good.

1309
01:09:11,540 --> 01:09:13,300
So we're gonna have a break.

1310
01:09:13,300 --> 01:09:15,340
We'll resume around 3.30.

1311
01:09:16,220 --> 01:09:20,080
So feel free, go grab coffee, snacks, water.

1312
01:09:20,080 --> 01:09:24,240
If you have anything remaining for phase two

1313
01:09:24,240 --> 01:09:27,520
for the visual regression testing that you wanna set up,

1314
01:09:27,520 --> 01:09:29,000
you can use this time to do so.

1315
01:09:29,000 --> 01:09:31,720
If you wanna dive into some of the Django stuff on your own,

1316
01:09:31,720 --> 01:09:35,280
again, this is kind of your time to use until 3.30.

1317
01:10:20,520 --> 01:10:25,520
All right, I think we are ready to get started.

1318
01:10:30,400 --> 01:10:35,120
Okay, so this is gonna be like a huge gear shift change.

1319
01:10:35,120 --> 01:10:36,440
This is something completely different

1320
01:10:36,440 --> 01:10:38,140
than we were doing 30 minutes ago,

1321
01:10:39,280 --> 01:10:41,200
which is part of the fun.

1322
01:10:41,200 --> 01:10:45,380
Okay, so what I have going here is I have my,

1323
01:10:46,380 --> 01:10:50,820
this bottom terminal I was running yarn start.

1324
01:10:50,820 --> 01:10:54,780
This is basically starting up my web application.

1325
01:10:54,780 --> 01:10:59,780
I can go to this URL and it will open in the wrong window.

1326
01:11:00,320 --> 01:11:04,200
And this is just a really silly example React application.

1327
01:11:05,220 --> 01:11:07,260
One of the really important takeaways from this

1328
01:11:07,260 --> 01:11:10,300
is that this approach for testing

1329
01:11:10,300 --> 01:11:12,980
is meant to be like really, really, really agnostic.

1330
01:11:13,980 --> 01:11:15,780
You do not have to be using React.

1331
01:11:15,780 --> 01:11:16,780
You do not have to be using

1332
01:11:16,780 --> 01:11:18,980
any sort of JavaScript framework.

1333
01:11:18,980 --> 01:11:22,860
You can apply the same mentality for testing

1334
01:11:22,860 --> 01:11:26,940
and same testing practices to a Django front end

1335
01:11:26,940 --> 01:11:30,340
or whatever, it could be a static site.

1336
01:11:30,340 --> 01:11:32,660
It really doesn't matter what you're testing.

1337
01:11:32,660 --> 01:11:34,180
It's very, very, very agnostic.

1338
01:11:35,040 --> 01:11:38,100
But in this example, we just have a React application

1339
01:11:38,100 --> 01:11:39,500
because that was a little bit easier

1340
01:11:39,500 --> 01:11:40,700
for me to throw together.

1341
01:11:41,100 --> 01:11:44,660
And let's see, what else do we have here?

1342
01:11:44,660 --> 01:11:48,180
So I've run all of my dependency installation.

1343
01:11:48,180 --> 01:11:49,860
Everything is set up.

1344
01:11:49,860 --> 01:11:52,180
I can now run a couple of things.

1345
01:11:52,180 --> 01:11:55,580
So I can run generate golden, which will now work.

1346
01:11:56,420 --> 01:11:58,720
An important thing to note is that you do have to have

1347
01:11:58,720 --> 01:12:01,540
your server running in order to run this.

1348
01:12:01,540 --> 01:12:04,340
Basically, we'll dive into exactly what's going on here,

1349
01:12:04,340 --> 01:12:08,020
but there are calls in the generate golden screenshots

1350
01:12:08,020 --> 01:12:12,460
and the testing that will actually call your web server.

1351
01:12:12,460 --> 01:12:14,620
So typically, you'll be testing against something

1352
01:12:14,620 --> 01:12:18,080
that's already deployed or that's kind of already running.

1353
01:12:18,980 --> 01:12:21,140
But when I'm testing locally right now,

1354
01:12:21,140 --> 01:12:24,160
I do have to have both of these processes running.

1355
01:12:24,160 --> 01:12:27,120
So I was just kind of running a sanity check here,

1356
01:12:27,120 --> 01:12:31,020
making sure that my generate golden was running.

1357
01:12:31,020 --> 01:12:34,620
And then if I run yarn test, that should also work.

1358
01:12:39,020 --> 01:12:40,780
Okay, cool.

1359
01:12:42,820 --> 01:12:45,060
Let's kind of hold my breath there for a second.

1360
01:12:45,980 --> 01:12:47,820
Okay, so let's see.

1361
01:12:47,820 --> 01:12:49,380
I'm actually gonna switch back.

1362
01:12:49,380 --> 01:12:52,220
I have a little bit more left in the slides

1363
01:12:52,220 --> 01:12:54,960
that I want to kind of go over first as well.

1364
01:12:58,220 --> 01:12:59,380
So there are a bunch of different ways

1365
01:12:59,380 --> 01:13:01,840
to approach visual regression testing.

1366
01:13:01,840 --> 01:13:05,180
If you have done anything in the JavaScript world,

1367
01:13:05,180 --> 01:13:06,780
especially with testing,

1368
01:13:06,780 --> 01:13:08,620
you probably will have heard of something

1369
01:13:08,620 --> 01:13:10,820
called snapshot testing.

1370
01:13:10,820 --> 01:13:12,320
Now snapshot testing is really interesting.

1371
01:13:12,320 --> 01:13:14,660
So if you remember when we were going through

1372
01:13:14,660 --> 01:13:16,580
our Django application,

1373
01:13:16,580 --> 01:13:21,580
how we basically were able to render a page

1374
01:13:21,660 --> 01:13:24,900
and get back the actual rendered HTML

1375
01:13:24,900 --> 01:13:26,900
that the browser had,

1376
01:13:26,900 --> 01:13:29,820
like with all of our template variables interpolated.

1377
01:13:29,820 --> 01:13:31,860
You can do something similar in the JavaScript world

1378
01:13:31,860 --> 01:13:33,820
where you can tell it to give you a snapshot.

1379
01:13:33,820 --> 01:13:37,580
And the snapshot is going to be a code representation

1380
01:13:37,580 --> 01:13:39,340
of what that page looks like.

1381
01:13:40,220 --> 01:13:42,920
But again, as you saw when we printed out

1382
01:13:42,920 --> 01:13:46,420
that big long HTML content,

1383
01:13:46,420 --> 01:13:48,020
there's not really a whole,

1384
01:13:48,020 --> 01:13:50,260
it's not as easy for a human to go through

1385
01:13:50,260 --> 01:13:51,780
and look at that and say like,

1386
01:13:51,780 --> 01:13:54,060
yeah, my snapshot is fine.

1387
01:13:54,060 --> 01:13:55,540
Everything looks good.

1388
01:13:55,540 --> 01:13:57,820
There's a lot more that you have to put into it manually

1389
01:13:57,820 --> 01:13:59,340
when you're doing those things.

1390
01:13:59,380 --> 01:14:04,220
So being able to identify different areas of the page

1391
01:14:04,220 --> 01:14:06,380
that you want to have rendered,

1392
01:14:06,380 --> 01:14:09,060
you're really missing out a lot of

1393
01:14:09,060 --> 01:14:10,980
like the visual side of things.

1394
01:14:10,980 --> 01:14:13,420
So you can take a snapshot and re-render it,

1395
01:14:13,420 --> 01:14:15,220
which we'll also talk about later.

1396
01:14:16,040 --> 01:14:19,800
But actually being able to go in and have a screenshot

1397
01:14:19,800 --> 01:14:21,340
that humans can look at

1398
01:14:21,340 --> 01:14:24,220
and make sure that everything looks good

1399
01:14:24,220 --> 01:14:25,220
is really important.

1400
01:14:25,980 --> 01:14:30,300
Okay, so the way that we're gonna dive into this is

1401
01:14:31,220 --> 01:14:33,020
when you approach testing,

1402
01:14:33,020 --> 01:14:38,020
a lot of times you'll have a set of data or information

1403
01:14:38,260 --> 01:14:41,540
that you know is correct or that should be correct.

1404
01:14:41,540 --> 01:14:45,900
And so whether that is screenshots or snapshots

1405
01:14:45,900 --> 01:14:48,900
or pieces of data, whatever it is,

1406
01:14:48,900 --> 01:14:50,820
we kind of have this idea of

1407
01:14:50,820 --> 01:14:53,380
what I like to call golden images.

1408
01:14:53,380 --> 01:14:57,580
So our golden images can be anything from mock-ups

1409
01:14:57,580 --> 01:14:59,620
that maybe a designer has provided to us

1410
01:14:59,620 --> 01:15:02,620
and we're trying to match as closely as possible.

1411
01:15:02,620 --> 01:15:06,140
Or it can be previous screenshots of the application

1412
01:15:06,140 --> 01:15:09,760
when everything was kind of in like an approved,

1413
01:15:10,700 --> 01:15:12,580
like solid testable state.

1414
01:15:13,660 --> 01:15:14,980
So we'll have golden images

1415
01:15:14,980 --> 01:15:18,060
and then our kind of current screenshots of the application

1416
01:15:18,980 --> 01:15:20,200
that we'll be using.

1417
01:15:20,800 --> 01:15:24,300
We're also gonna use an image diffing library.

1418
01:15:27,800 --> 01:15:30,280
There is a really neat cool called resemble.js

1419
01:15:30,280 --> 01:15:32,260
that basically allows you to take two images

1420
01:15:32,260 --> 01:15:36,080
and generate a bunch of different information on them,

1421
01:15:36,080 --> 01:15:40,040
including like a percent match between the two images.

1422
01:15:40,040 --> 01:15:42,400
And then it will actually also give you back

1423
01:15:42,400 --> 01:15:46,120
a rendered image of the two overlaid

1424
01:15:46,120 --> 01:15:48,440
with highlighted areas of where they're different.

1425
01:15:48,440 --> 01:15:50,520
And so this is gonna be one of the really key components

1426
01:15:50,520 --> 01:15:54,720
that we use and it's really specific for screenshot testing

1427
01:15:54,720 --> 01:15:56,480
that allows us to kind of do this.

1428
01:15:59,440 --> 01:16:02,920
So running visual regression tests

1429
01:16:02,920 --> 01:16:05,040
really relies on having a browser

1430
01:16:05,040 --> 01:16:06,740
or a browser-like environment.

1431
01:16:08,240 --> 01:16:10,440
And so previously visual regression testing

1432
01:16:10,440 --> 01:16:12,200
was tied to using an actual browser

1433
01:16:12,200 --> 01:16:15,440
using something like Selenium or Phantom.js.

1434
01:16:15,440 --> 01:16:16,760
There are now really interesting things

1435
01:16:17,280 --> 01:16:18,480
called headless browsers

1436
01:16:18,480 --> 01:16:20,760
that you don't actually need like an interface

1437
01:16:20,760 --> 01:16:22,140
to interact with it.

1438
01:16:22,140 --> 01:16:24,320
It's basically like interacting with a web browser

1439
01:16:24,320 --> 01:16:28,400
over strictly an API and not an interface,

1440
01:16:28,400 --> 01:16:29,760
which is kind of an interesting thing

1441
01:16:29,760 --> 01:16:32,880
to kind of wrap your head around.

1442
01:16:32,880 --> 01:16:34,440
I didn't do that on purpose.

1443
01:16:34,440 --> 01:16:35,280
Okay.

1444
01:16:38,240 --> 01:16:39,480
But yeah, so it makes it really, really easy

1445
01:16:39,480 --> 01:16:41,280
to programmatically interact with it.

1446
01:16:42,800 --> 01:16:45,540
It is also not 2018, which is kind of funny.

1447
01:16:45,540 --> 01:16:48,980
Since 2018, visual regression testing got a lot easier.

1448
01:16:48,980 --> 01:16:51,180
There is a library called Puppeteer.

1449
01:16:51,180 --> 01:16:53,700
It is maintained by Google,

1450
01:16:53,700 --> 01:16:55,460
but it makes interacting with headless Chrome

1451
01:16:55,460 --> 01:16:57,100
really, really, really easy.

1452
01:16:57,100 --> 01:16:59,300
So if you start looking into different techniques

1453
01:16:59,300 --> 01:17:01,260
for visual regression testing,

1454
01:17:01,260 --> 01:17:04,000
I really highly recommend just like sticking with Puppeteer

1455
01:17:04,000 --> 01:17:06,300
and headless Chrome and really just saving yourself

1456
01:17:06,300 --> 01:17:09,260
like the pain and suffering of dealing with stuff

1457
01:17:09,260 --> 01:17:11,140
like Selenium and Phantom.js.

1458
01:17:11,660 --> 01:17:16,500
There's also a lot of like built-in abilities

1459
01:17:16,500 --> 01:17:18,980
to interact with the browser

1460
01:17:18,980 --> 01:17:21,420
as well as to interact with your code.

1461
01:17:21,420 --> 01:17:23,420
So a lot of the same tools that you have

1462
01:17:23,420 --> 01:17:27,700
as a developer using like the in-browser developer tools

1463
01:17:27,700 --> 01:17:29,040
to debug your code,

1464
01:17:29,040 --> 01:17:32,420
you also have access to those things in Puppeteer.

1465
01:17:34,420 --> 01:17:35,860
Okay.

1466
01:17:35,860 --> 01:17:40,180
So now we're gonna switch over to kind of like the details

1467
01:17:40,180 --> 01:17:42,860
of how we're actually approaching this.

1468
01:17:42,860 --> 01:17:44,700
So like I mentioned, we're gonna use Puppeteer.

1469
01:17:44,700 --> 01:17:45,940
We're gonna use resemble.js,

1470
01:17:45,940 --> 01:17:48,660
which is our visual image comparison.

1471
01:17:48,660 --> 01:17:51,180
And then we're gonna use a test runner

1472
01:17:51,180 --> 01:17:52,660
and assertion library.

1473
01:17:52,660 --> 01:17:55,940
This is really up to you with whatever you want to use.

1474
01:17:55,940 --> 01:17:58,080
In this, we're using just an enzyme,

1475
01:17:58,080 --> 01:18:01,660
but it's really whatever you're most comfortable with

1476
01:18:01,660 --> 01:18:03,660
or whatever you wanna dive in and learn.

1477
01:18:04,740 --> 01:18:06,480
Those are very like up to you.

1478
01:18:07,320 --> 01:18:11,480
So those are like our key dependencies.

1479
01:18:11,480 --> 01:18:13,720
In the package JSON in your example project,

1480
01:18:13,720 --> 01:18:15,440
there's a bunch of other stuff

1481
01:18:15,440 --> 01:18:17,760
for like the boilerplate itself.

1482
01:18:17,760 --> 01:18:19,320
But these are really like the key players

1483
01:18:19,320 --> 01:18:22,440
for the agnostic part of our testing.

1484
01:18:24,160 --> 01:18:26,840
And so what I've done here is I've basically taken

1485
01:18:26,840 --> 01:18:28,260
the important parts of the code

1486
01:18:28,260 --> 01:18:32,160
and put them into the slides just because I think that

1487
01:18:32,160 --> 01:18:33,240
based on the survey that I got,

1488
01:18:33,240 --> 01:18:36,080
a lot of people were a lot less familiar with JavaScript.

1489
01:18:36,920 --> 01:18:38,920
I wanted to be able to kind of highlight these things

1490
01:18:38,920 --> 01:18:42,720
individually before like throwing everybody into code

1491
01:18:42,720 --> 01:18:44,520
and moving too quickly through that.

1492
01:18:46,000 --> 01:18:48,800
So the first thing we have to do is create our directories.

1493
01:18:48,800 --> 01:18:51,800
So we basically are going to have a golden directory

1494
01:18:51,800 --> 01:18:54,120
where we store all of our golden screenshots,

1495
01:18:54,120 --> 01:18:55,680
a screenshot directory where we store

1496
01:18:55,680 --> 01:18:59,020
like all the live versions of whatever test run

1497
01:18:59,020 --> 01:19:00,440
that we're going through.

1498
01:19:00,440 --> 01:19:03,400
And then a separate directory where we will output

1499
01:19:03,400 --> 01:19:07,200
those visual diffs of the two images overlaid

1500
01:19:07,200 --> 01:19:09,040
with the like highlighted differences.

1501
01:19:12,040 --> 01:19:14,600
Okay, so once we start our tests,

1502
01:19:14,600 --> 01:19:16,240
the same way that we kind of had this idea

1503
01:19:16,240 --> 01:19:19,480
of a setup function in our Django tests,

1504
01:19:19,480 --> 01:19:24,480
we have a similar kind of concept in our JavaScript tests.

1505
01:19:24,620 --> 01:19:28,040
So we can say either before all or before each test,

1506
01:19:28,040 --> 01:19:31,160
we want to kind of set up whatever environments

1507
01:19:31,160 --> 01:19:33,020
or dependencies that we want to use.

1508
01:19:34,160 --> 01:19:36,560
So for this, we're going to basically launch

1509
01:19:36,560 --> 01:19:39,600
a new web browser using puppeteer.launch,

1510
01:19:39,600 --> 01:19:41,960
and then we will create a new page

1511
01:19:41,960 --> 01:19:44,720
just using browser.newpage.

1512
01:19:44,720 --> 01:19:47,760
And so again, if you've worked with other

1513
01:19:47,760 --> 01:19:51,320
like browser emulators and libraries,

1514
01:19:51,320 --> 01:19:53,480
this is often a lot more difficult.

1515
01:19:53,480 --> 01:19:56,700
The API for puppeteer is really, really, really clean.

1516
01:19:56,700 --> 01:19:59,720
So this is all you've got to do to set up a browser page.

1517
01:19:59,800 --> 01:20:04,800
Okay, so we have basically a helper function

1518
01:20:05,600 --> 01:20:10,000
that's gonna let us navigate through our application

1519
01:20:10,000 --> 01:20:14,040
and also take a screenshot of that page as we've navigated.

1520
01:20:14,840 --> 01:20:19,240
So this is a function that takes in our page object

1521
01:20:19,240 --> 01:20:21,640
that we created from our setup function,

1522
01:20:21,640 --> 01:20:25,000
and then whatever route that we want to navigate to.

1523
01:20:25,000 --> 01:20:27,400
So this is a straightforward example.

1524
01:20:27,400 --> 01:20:29,440
This is directly navigating to a page.

1525
01:20:29,440 --> 01:20:32,080
We're not interacting with the page quite yet.

1526
01:20:32,080 --> 01:20:33,980
We're just going to be able to kind of like navigate

1527
01:20:33,980 --> 01:20:36,220
directly through the URL for different pages.

1528
01:20:37,320 --> 01:20:40,620
So we take that route.

1529
01:20:41,600 --> 01:20:44,220
You don't have to specify a route for your index view.

1530
01:20:44,220 --> 01:20:46,400
So we give it kind of a default file name,

1531
01:20:46,400 --> 01:20:48,240
and then we're gonna save our screenshot

1532
01:20:48,240 --> 01:20:51,120
based on the route name so that we can easily identify it

1533
01:20:51,120 --> 01:20:53,220
as a person looking at these images later.

1534
01:20:54,560 --> 01:20:58,440
So right now, this is hard-coded for our application

1535
01:20:58,440 --> 01:20:59,960
that's running on localhost.

1536
01:20:59,960 --> 01:21:01,200
It takes in the route.

1537
01:21:01,200 --> 01:21:04,160
You can call page.screenshots,

1538
01:21:04,160 --> 01:21:06,240
tell it the path where you want to save it,

1539
01:21:06,240 --> 01:21:11,240
and then we have a compare screenshot function

1540
01:21:11,760 --> 01:21:13,120
that we can then call

1541
01:21:13,120 --> 01:21:15,960
to retrieve our additional information on it.

1542
01:21:15,960 --> 01:21:18,960
One thing to note is that there are a lot of options

1543
01:21:18,960 --> 01:21:22,320
on how your screenshot is taken.

1544
01:21:22,320 --> 01:21:26,040
So you can kind of control if you only want to take

1545
01:21:26,040 --> 01:21:28,760
a screenshot of the page that's actually shown

1546
01:21:28,760 --> 01:21:31,200
within the browser viewport.

1547
01:21:31,200 --> 01:21:34,000
You can take a screenshot of the whole page.

1548
01:21:34,000 --> 01:21:35,300
A bunch of different stuff there

1549
01:21:35,300 --> 01:21:37,600
that's worth kind of like looking into the docs

1550
01:21:37,600 --> 01:21:39,700
and exactly how you want to set this up.

1551
01:21:42,280 --> 01:21:43,120
Okay.

1552
01:21:44,040 --> 01:21:45,160
So we have a helper function

1553
01:21:45,160 --> 01:21:47,400
that's going to process our screenshot.

1554
01:21:47,400 --> 01:21:50,960
And so this is just some JavaScript

1555
01:21:50,960 --> 01:21:55,960
that is retrieving the images off of our file system.

1556
01:21:56,440 --> 01:21:59,600
So this is just a way to basically run

1557
01:21:59,600 --> 01:22:03,160
a couple of parallel tasks and wait for them to come back.

1558
01:22:03,160 --> 01:22:06,480
So saying here are two images, read them,

1559
01:22:06,480 --> 01:22:09,320
and we can continue after they have both returned.

1560
01:22:10,840 --> 01:22:14,280
And then we destructure them off of that object.

1561
01:22:14,280 --> 01:22:15,440
So we read the two files out.

1562
01:22:15,440 --> 01:22:17,520
We now have our image1 and image2.

1563
01:22:18,560 --> 01:22:23,200
So compare is a built-in function to resemble js.

1564
01:22:23,200 --> 01:22:28,200
This is the programmatic API

1565
01:22:29,520 --> 01:22:32,240
for something that I'll also show you in a second.

1566
01:22:32,240 --> 01:22:34,620
But basically it takes in our two images,

1567
01:22:34,620 --> 01:22:39,300
some optional data, and that's just like a configuration file.

1568
01:22:40,480 --> 01:22:45,000
And then basically waits for this information to come back,

1569
01:22:45,000 --> 01:22:47,760
gives us back our image output,

1570
01:22:47,760 --> 01:22:49,240
and then also gives us back

1571
01:22:49,240 --> 01:22:51,600
something called our mismatch percentage.

1572
01:22:51,600 --> 01:22:54,640
So our goal is for a mismatch percentage to be,

1573
01:22:54,640 --> 01:22:56,400
this is actually wrong.

1574
01:22:56,400 --> 01:22:58,280
It's right in the code, I promise.

1575
01:22:58,280 --> 01:23:00,360
We actually want our mismatch percentage to be zero

1576
01:23:00,360 --> 01:23:02,280
because we want there to not be any difference

1577
01:23:02,280 --> 01:23:03,640
between our two screenshots.

1578
01:23:05,760 --> 01:23:07,560
And in the case that there is a difference

1579
01:23:07,560 --> 01:23:09,240
between our two screenshots,

1580
01:23:09,240 --> 01:23:12,120
that's where a human kind of has to come in and say like,

1581
01:23:12,120 --> 01:23:14,320
yes, I approve this change or no, I don't.

1582
01:23:17,000 --> 01:23:17,840
Okay.

1583
01:23:18,640 --> 01:23:21,800
So this is two separate screenshots

1584
01:23:21,800 --> 01:23:24,100
of the React application

1585
01:23:24,100 --> 01:23:27,440
that you could have running on your machine locally.

1586
01:23:27,440 --> 01:23:29,600
They have very slightly differing things.

1587
01:23:29,600 --> 01:23:31,000
You can kind of see that the images

1588
01:23:31,000 --> 01:23:33,260
are slightly different sizes.

1589
01:23:33,260 --> 01:23:35,400
In the image on the right,

1590
01:23:35,400 --> 01:23:39,120
the dinosaur images are slightly larger than the other one.

1591
01:23:40,400 --> 01:23:43,840
And so when we run this through the visual diff,

1592
01:23:43,840 --> 01:23:45,680
this is actually what we get.

1593
01:23:45,680 --> 01:23:47,800
So this would give us back a mismatch percentage

1594
01:23:48,800 --> 01:23:49,640
of greater than zero.

1595
01:23:49,640 --> 01:23:50,960
And it actually goes through and kind of highlights

1596
01:23:50,960 --> 01:23:55,960
and shows us exactly what pieces of the page have changed.

1597
01:23:56,600 --> 01:23:59,540
So you can see where your differences are.

1598
01:24:00,680 --> 01:24:03,680
And so kind of wrapping up this whole flow,

1599
01:24:03,680 --> 01:24:06,360
you run through your tests,

1600
01:24:06,360 --> 01:24:08,900
you take screenshots of all of your pages,

1601
01:24:08,900 --> 01:24:11,680
you can then compare the current screenshots

1602
01:24:11,680 --> 01:24:14,280
that you've taken against your golden images.

1603
01:24:14,280 --> 01:24:17,780
And then if you're getting any sort of mismatch percentage,

1604
01:24:18,780 --> 01:24:19,620
you can alert the user and say,

1605
01:24:19,620 --> 01:24:23,220
hey, this test failed, these screenshots don't match.

1606
01:24:23,220 --> 01:24:25,660
You should go check out this specific file

1607
01:24:25,660 --> 01:24:27,540
to see if those are changes

1608
01:24:27,540 --> 01:24:29,620
that you want to approve or disapprove.

1609
01:24:29,620 --> 01:24:31,420
And then at that point you can say,

1610
01:24:32,320 --> 01:24:33,740
yes, this is fine.

1611
01:24:33,740 --> 01:24:35,820
Generate my new golden screenshots

1612
01:24:35,820 --> 01:24:37,820
and keep everything up to date.

1613
01:24:37,820 --> 01:24:40,780
Or no, this change was not intentional.

1614
01:24:40,780 --> 01:24:41,980
There's something actually wrong.

1615
01:24:41,980 --> 01:24:43,440
We need to go back and fix this

1616
01:24:43,440 --> 01:24:46,140
before we can regenerate our screenshots.

1617
01:24:47,060 --> 01:24:50,020
And so some really good examples of this are,

1618
01:24:50,020 --> 01:24:53,500
say for example, you have a specific button

1619
01:24:53,500 --> 01:24:57,460
on your login page and the decision is like,

1620
01:24:57,460 --> 01:25:00,180
we're gonna make the login button purple.

1621
01:25:00,180 --> 01:25:03,400
But you accidentally change all the buttons to purple.

1622
01:25:03,400 --> 01:25:05,340
So this is something that would be able to catch that

1623
01:25:05,340 --> 01:25:07,300
and then you could say, okay,

1624
01:25:07,300 --> 01:25:09,860
we want to only change the button on the login screen,

1625
01:25:09,860 --> 01:25:12,340
regenerate that golden screenshot,

1626
01:25:12,340 --> 01:25:14,900
but the other ones are broken, we need to fix those.

1627
01:25:15,900 --> 01:25:16,740
Okay.

1628
01:25:18,260 --> 01:25:21,420
So now we're gonna switch over to a little bit of code.

1629
01:25:30,760 --> 01:25:32,980
Okay, so I do want to just kind of go through

1630
01:25:32,980 --> 01:25:35,780
and point out the different things

1631
01:25:35,780 --> 01:25:38,700
that are in this boilerplate at this point.

1632
01:25:38,700 --> 01:25:41,540
So I have opened up the code directory

1633
01:25:41,540 --> 01:25:45,700
and the visual regression testing directory.

1634
01:25:45,700 --> 01:25:50,360
I am on the visual init commit.

1635
01:25:51,840 --> 01:25:54,220
And let's see what we've got.

1636
01:25:54,220 --> 01:25:56,700
So we have our source directory.

1637
01:25:56,700 --> 01:25:59,940
All of our tests live in this, ironically,

1638
01:25:59,940 --> 01:26:02,300
Dunder tests directory,

1639
01:26:02,300 --> 01:26:04,300
which should feel familiar to some of us.

1640
01:26:05,340 --> 01:26:09,100
And then we have our directory where we store our diffs.

1641
01:26:09,100 --> 01:26:10,880
There are probably already some,

1642
01:26:12,820 --> 01:26:15,740
there are some directories in here from future steps

1643
01:26:15,740 --> 01:26:17,100
that we're gonna go through.

1644
01:26:18,440 --> 01:26:20,260
But basically we have our index page,

1645
01:26:20,260 --> 01:26:23,240
which is rendering sort of oddly in here.

1646
01:26:23,240 --> 01:26:25,420
We have our golden screenshots.

1647
01:26:25,420 --> 01:26:29,220
And then we have, oh wait, sorry.

1648
01:26:29,220 --> 01:26:31,420
This is our diffs, that's why it looks funny.

1649
01:26:31,420 --> 01:26:34,300
And then we have our two original golden screenshots.

1650
01:26:34,300 --> 01:26:36,800
And so currently, I haven't made any changes

1651
01:26:36,800 --> 01:26:37,780
to this application.

1652
01:26:37,780 --> 01:26:42,380
So my index and my, sorry, my golden index

1653
01:26:42,380 --> 01:26:45,200
and my screenshot index are identical right now.

1654
01:26:47,820 --> 01:26:50,940
All right, give me one second to pull up.

1655
01:27:08,300 --> 01:27:09,140
Okay.

1656
01:27:10,940 --> 01:27:15,460
So basically everything that we went through in the slides

1657
01:27:15,460 --> 01:27:20,600
has already been implemented in this code.

1658
01:27:20,600 --> 01:27:24,900
So all of our helpers are living in this helpers file.

1659
01:27:24,900 --> 01:27:28,120
We have these diff options, which are super interesting.

1660
01:27:28,120 --> 01:27:29,840
So I'm actually gonna show you,

1661
01:27:29,840 --> 01:27:33,080
resemble.js has a web interface

1662
01:27:33,080 --> 01:27:35,780
where you can go in and kind of test different things.

1663
01:27:36,720 --> 01:27:39,540
And so this was an example of,

1664
01:27:39,540 --> 01:27:43,100
I made some very small changes just live on the PyCon site

1665
01:27:44,020 --> 01:27:46,860
where I think I made the images on this slightly smaller

1666
01:27:46,860 --> 01:27:49,780
and I made the border slightly larger.

1667
01:27:49,780 --> 01:27:53,380
So you can see these really interesting specific changes

1668
01:27:53,380 --> 01:27:56,900
that happened in this area and how things were shifted.

1669
01:27:57,760 --> 01:28:00,020
But what I really like about using the web interface

1670
01:28:00,020 --> 01:28:03,980
is that it lets you play with the different settings

1671
01:28:03,980 --> 01:28:05,980
for resemble.js.

1672
01:28:05,980 --> 01:28:10,100
So I'm setting a bunch of our diff options

1673
01:28:10,100 --> 01:28:13,540
and so you can control the error types,

1674
01:28:13,540 --> 01:28:15,980
how transparent it is, the different colors.

1675
01:28:17,260 --> 01:28:21,080
One of the things that resemble.js does really well

1676
01:28:21,080 --> 01:28:22,740
is it handles anti-aliasing,

1677
01:28:22,740 --> 01:28:26,260
which basically means that it can ignore differences

1678
01:28:26,260 --> 01:28:29,500
in how fonts render depending on the machine.

1679
01:28:29,500 --> 01:28:31,940
That was one of the big problems with screenshot testing

1680
01:28:31,940 --> 01:28:34,500
is that you could compare screenshots

1681
01:28:34,500 --> 01:28:36,340
from different operating systems

1682
01:28:36,340 --> 01:28:38,240
and the fonts would render differently

1683
01:28:38,240 --> 01:28:41,220
and it would cause these false positives

1684
01:28:41,220 --> 01:28:43,520
for saying that there was a difference

1685
01:28:43,520 --> 01:28:45,180
when there wasn't really actually a difference.

1686
01:28:45,180 --> 01:28:47,260
It was just anti-aliasing of fonts.

1687
01:28:48,300 --> 01:28:49,420
So yeah, this is really, really cool,

1688
01:28:49,420 --> 01:28:52,340
especially if you wanna see different things

1689
01:28:52,340 --> 01:28:55,860
that you can kind of change and rerun it,

1690
01:28:55,860 --> 01:28:58,980
shows you the difference, that kind of stuff.

1691
01:29:01,940 --> 01:29:02,780
Okay.

1692
01:29:04,740 --> 01:29:05,900
So what else do we have in here?

1693
01:29:05,900 --> 01:29:08,100
So we've got Puppeteer.

1694
01:29:08,100 --> 01:29:11,620
We're using compare images from resemble.js.

1695
01:29:11,620 --> 01:29:14,500
We have our take screenshot, which takes in the route.

1696
01:29:14,500 --> 01:29:17,220
I think this is a little bit different from the slides,

1697
01:29:17,220 --> 01:29:19,540
so I'm glad I'm going through this.

1698
01:29:19,540 --> 01:29:21,640
But take screenshot gives you the directory

1699
01:29:21,640 --> 01:29:22,780
where you wanna put it.

1700
01:29:22,780 --> 01:29:26,020
This allows us to dynamically generate

1701
01:29:26,020 --> 01:29:29,980
either golden screenshots or live test run screenshots

1702
01:29:29,980 --> 01:29:31,620
and put them in different places.

1703
01:29:32,940 --> 01:29:34,860
Again, this is hard-coded, so maybe not

1704
01:29:34,860 --> 01:29:36,860
what you would actually want to do

1705
01:29:36,860 --> 01:29:38,420
in a production version of this.

1706
01:29:39,740 --> 01:29:42,540
Then we can go through, take all of our screenshots,

1707
01:29:42,540 --> 01:29:44,500
generate golden screenshots,

1708
01:29:47,660 --> 01:29:48,740
and process them.

1709
01:29:50,140 --> 01:29:52,840
So hopefully all this makes sense.

1710
01:29:55,300 --> 01:29:58,800
Let's take a look at our test file.

1711
01:30:02,820 --> 01:30:05,900
Okay, so in here, again, we're using just an enzyme,

1712
01:30:05,900 --> 01:30:07,660
so we're grabbing all of that stuff,

1713
01:30:08,580 --> 01:30:10,380
grabbing configuration.

1714
01:30:10,380 --> 01:30:13,380
So we do have a place for restoring the paths

1715
01:30:13,380 --> 01:30:16,700
for our directories, just so that we can

1716
01:30:16,700 --> 01:30:18,520
kind of reuse those throughout.

1717
01:30:19,500 --> 01:30:21,500
Very little test boilerplate, which is nice.

1718
01:30:21,500 --> 01:30:24,540
A lot of this stuff does kind of just work out of the box.

1719
01:30:24,540 --> 01:30:29,540
And then again, running this kind of before all setup,

1720
01:30:29,620 --> 01:30:33,860
making sure that our golden directories exist

1721
01:30:33,860 --> 01:30:36,660
and that our test directories and diff directories exist.

1722
01:30:37,580 --> 01:30:40,060
And then this is really where the meat of it is,

1723
01:30:40,060 --> 01:30:43,660
where we're running a test on our index page.

1724
01:30:43,660 --> 01:30:46,460
So we are going through setting our viewport.

1725
01:30:46,460 --> 01:30:49,800
Default viewport right now is 800 by 600.

1726
01:30:49,800 --> 01:30:52,980
And then we want to make sure that our index page

1727
01:30:52,980 --> 01:30:55,660
is rendering properly.

1728
01:30:55,660 --> 01:30:57,220
So this take and compare screenshot

1729
01:30:57,220 --> 01:31:02,140
is a really excellent helper for being able to go through,

1730
01:31:02,140 --> 01:31:03,980
take the screenshot, generate the difference,

1731
01:31:03,980 --> 01:31:06,660
make sure that everything is asserting properly,

1732
01:31:06,660 --> 01:31:10,800
and then you just return the true or false value

1733
01:31:10,800 --> 01:31:11,800
out of that helper.

1734
01:31:13,980 --> 01:31:14,820
All right.

1735
01:31:19,320 --> 01:31:22,140
Let's see, so I think one of the first things

1736
01:31:22,140 --> 01:31:24,700
that I wanted to go through and do was show

1737
01:31:25,580 --> 01:31:28,380
one of those strengths of using visual screenshot testing

1738
01:31:28,380 --> 01:31:31,860
is that you can test a bunch of different browser sizes,

1739
01:31:31,860 --> 01:31:34,140
as well as kind of emulate different devices.

1740
01:31:35,980 --> 01:31:40,740
So let's set up in our config,

1741
01:31:40,740 --> 01:31:45,380
where we also are storing diff options

1742
01:31:45,380 --> 01:31:47,780
and directory information.

1743
01:31:48,660 --> 01:31:53,260
I'm also going to set up a few screen sizes.

1744
01:31:55,100 --> 01:32:03,100
So let's say we want to test for both desktop and mobile.

1745
01:32:05,220 --> 01:32:09,140
And we want to maybe have a list of different viewport sizes

1746
01:32:09,140 --> 01:32:10,580
that we want to test.

1747
01:32:10,580 --> 01:32:13,420
So I'm cheating, and I have a list

1748
01:32:13,420 --> 01:32:15,420
of a couple of the common ones.

1749
01:32:15,420 --> 01:32:23,420
So 1024 by 768, and 1366 by 768.

1750
01:32:25,140 --> 01:32:28,140
And then we'll also test a couple of mobile ones.

1751
01:32:28,140 --> 01:32:31,340
I think these are all iPhone sizes.

1752
01:32:31,340 --> 01:32:34,780
So this is going to be a little bit more,

1753
01:32:37,940 --> 01:32:39,780
I can't think of the word I want to use.

1754
01:32:43,540 --> 01:32:46,940
It's not super realistic, because there are a lot

1755
01:32:46,940 --> 01:32:50,420
of other things that go into how a page is going to render,

1756
01:32:50,420 --> 01:32:54,460
whether that is the user agent of a phone

1757
01:32:54,460 --> 01:32:56,820
is going to cause pages to render differently.

1758
01:32:56,820 --> 01:33:00,020
Devices will have maybe certain pixel ratios

1759
01:33:00,020 --> 01:33:02,700
that cause pages to render a little bit differently.

1760
01:33:02,700 --> 01:33:04,180
And so these are all really interesting things

1761
01:33:04,180 --> 01:33:06,420
that you can actually use Puppeteer

1762
01:33:06,420 --> 01:33:11,420
to also emulate those different changes.

1763
01:33:13,300 --> 01:33:15,180
Let's see.

1764
01:33:15,180 --> 01:33:18,660
I'm actually going to copy the rest of the mobile ones.

1765
01:33:19,940 --> 01:33:22,580
Okay, so now we've set up our screenshot sizes.

1766
01:33:22,780 --> 01:33:26,380
We need to do a couple of things here, right?

1767
01:33:26,380 --> 01:33:31,380
So in our helpers, we're going to need to be able

1768
01:33:31,380 --> 01:33:34,700
to take in different screen sizes.

1769
01:33:38,940 --> 01:33:42,260
I'm actually really curious why I was doing this.

1770
01:33:42,260 --> 01:33:44,340
I think I was having issues with importing this,

1771
01:33:44,340 --> 01:33:45,980
so I'm going to move this over so that I'm not

1772
01:33:45,980 --> 01:33:48,700
debugging imports uselessly right now.

1773
01:33:49,580 --> 01:33:51,940
So you can pretend that that import would have worked.

1774
01:33:51,940 --> 01:33:53,540
I'm going to just put those here

1775
01:33:54,900 --> 01:33:58,020
so that we don't waste time on that.

1776
01:33:58,020 --> 01:34:00,020
Okay, so now we have our screenshot sizes.

1777
01:34:01,300 --> 01:34:03,580
So what else are we going to need to do?

1778
01:34:03,580 --> 01:34:07,500
We are going to want to update our take screenshot

1779
01:34:08,500 --> 01:34:13,500
so that we can also take into account our screen size.

1780
01:34:15,660 --> 01:34:17,220
And so we're going to do a couple of things.

1781
01:34:17,220 --> 01:34:21,100
We want to place these into a separate directory

1782
01:34:21,100 --> 01:34:23,340
so that we have everything in kind of one place,

1783
01:34:23,340 --> 01:34:24,780
depending on the screen size.

1784
01:34:26,340 --> 01:34:29,380
So let's say we need to get screen size

1785
01:34:29,380 --> 01:34:32,980
and our screenshot size.

1786
01:34:37,940 --> 01:34:42,180
Okay, so if we have screenshot and screenshot size,

1787
01:34:43,260 --> 01:34:48,260
let's say we want to, instead of just placing this

1788
01:34:49,260 --> 01:34:53,700
into a file name, we want to actually nest this

1789
01:34:53,700 --> 01:34:54,780
into our directory.

1790
01:34:55,820 --> 01:34:58,980
So this is like a string template.

1791
01:34:58,980 --> 01:35:02,060
So anything that's inside of the dollar curly brace

1792
01:35:02,060 --> 01:35:04,980
is going to get interpolated as a variable.

1793
01:35:04,980 --> 01:35:09,980
So I can also say here, let's take in our screen size

1794
01:35:10,100 --> 01:35:11,700
and group all of that together.

1795
01:35:12,740 --> 01:35:17,740
And then I'm actually also going to add in our screenshot

1796
01:35:18,900 --> 01:35:23,060
size and so let me be a little bit more specific

1797
01:35:23,060 --> 01:35:25,380
because I think these are a little confusing.

1798
01:35:25,380 --> 01:35:28,620
My intention for these variables is for screenshot size

1799
01:35:28,620 --> 01:35:32,460
to be the actual dimensions of the page that we're taking

1800
01:35:32,460 --> 01:35:35,960
and then screen size is just like mobile versus desktop.

1801
01:35:35,960 --> 01:35:38,060
So at the end of this, we're going to have a mobile

1802
01:35:38,060 --> 01:35:42,020
directory with all of our mobile screenshots separated

1803
01:35:42,020 --> 01:35:46,540
by the screenshot size, like the actual dimensions of it

1804
01:35:46,780 --> 01:35:47,940
and then same for desktop.

1805
01:35:50,380 --> 01:35:54,300
Okay, so this is where types comes in handy.

1806
01:35:54,300 --> 01:35:56,660
So screen size, I intend to be a string.

1807
01:35:56,660 --> 01:35:58,480
Screenshot size will be an array.

1808
01:36:00,840 --> 01:36:02,820
So let's see, I'm actually going to copy this as well

1809
01:36:02,820 --> 01:36:04,560
just for the sake of time.

1810
01:36:05,580 --> 01:36:08,780
So this is going to get nested, screenshot size nested

1811
01:36:08,780 --> 01:36:12,780
into the array, so this is grabbing the first value

1812
01:36:12,780 --> 01:36:17,220
by the second value and I'm missing the ending curly brace

1813
01:36:17,220 --> 01:36:19,020
and these are spelled differently.

1814
01:36:19,020 --> 01:36:22,180
Okay, cool, so now I have this directory that I'm going

1815
01:36:22,180 --> 01:36:24,580
to kind of like save everything into really neatly.

1816
01:36:26,300 --> 01:36:30,180
The next thing that I'm going to do is, so even once I have

1817
01:36:30,180 --> 01:36:33,380
my page object, you can go through and change your viewport

1818
01:36:33,380 --> 01:36:38,380
at any time, so also in this function, I'm going to say

1819
01:36:38,540 --> 01:36:43,540
page.setViewport and I'm going to set, again I'm going to

1820
01:36:47,820 --> 01:36:50,900
copy and paste this, I'm going to set my width and my height

1821
01:36:50,900 --> 01:36:52,620
to the values that I'm passing in.

1822
01:36:57,020 --> 01:36:59,980
Let's see, and apparently my linter is just going to freak

1823
01:36:59,980 --> 01:37:01,480
out about weird things.

1824
01:37:02,980 --> 01:37:07,500
Okay, so I think this take screenshot function should be

1825
01:37:07,500 --> 01:37:08,700
good to go at this point.

1826
01:37:09,880 --> 01:37:14,880
The next thing that we'll want to do is, we can make our

1827
01:37:16,100 --> 01:37:21,100
lives really easy, so basically for each route that we want

1828
01:37:21,940 --> 01:37:24,240
to take screenshots for, we can automatically take them

1829
01:37:24,240 --> 01:37:28,340
for every single viewport size that we wanted to define.

1830
01:37:29,220 --> 01:37:32,600
So let's see, let's actually look at our test file.

1831
01:37:33,980 --> 01:37:37,320
So when we run take and compare screenshot,

1832
01:37:37,320 --> 01:37:42,220
we're going to want to run this for every page.

1833
01:37:43,280 --> 01:37:48,000
So in take and compare screenshots, we're going to tell

1834
01:37:48,000 --> 01:37:50,280
us to take the screenshot and then process it.

1835
01:37:51,640 --> 01:37:55,080
Let's see, I actually think we might want to do this

1836
01:37:55,080 --> 01:37:57,020
at a different spot.

1837
01:37:59,400 --> 01:38:03,480
If we do it in take screenshot, we can make sure that

1838
01:38:03,480 --> 01:38:04,840
we're setting the viewport.

1839
01:38:08,000 --> 01:38:08,840
Hmm.

1840
01:38:14,120 --> 01:38:14,960
Let's see.

1841
01:38:16,560 --> 01:38:18,000
I think I'm confusing myself.

1842
01:38:21,720 --> 01:38:24,360
One second, so take and compare screenshot, take and compare

1843
01:38:24,360 --> 01:38:27,140
screenshot is going to call take screenshot.

1844
01:38:30,640 --> 01:38:32,520
Oh, and then we're going to also need to generate

1845
01:38:32,520 --> 01:38:34,680
our golden screenshots, that's where I was getting lost.

1846
01:38:34,720 --> 01:38:37,840
Okay, so let's take care of that first actually,

1847
01:38:37,840 --> 01:38:40,060
and make sure that all that gets generated properly.

1848
01:38:40,060 --> 01:38:42,760
So generate golden screenshot will call

1849
01:38:42,760 --> 01:38:44,020
take screenshot directly.

1850
01:38:45,640 --> 01:38:50,640
And let's see, if we now have our screen sizes object

1851
01:38:52,840 --> 01:38:56,840
in here, let's see, I'm going to go ahead and do this here.

1852
01:38:56,840 --> 01:39:01,840
So we can basically iterate over all of our screen sizes.

1853
01:39:05,440 --> 01:39:10,440
And we can say for each screen size, these are fancy

1854
01:39:14,960 --> 01:39:19,120
JavaScript arrow functions, so this is, I'm going to take

1855
01:39:19,120 --> 01:39:22,020
this in as an argument, and then I can basically say,

1856
01:39:23,960 --> 01:39:25,680
I'm going to copy this as well.

1857
01:39:25,680 --> 01:39:27,560
So at this point, we just want to make sure that all

1858
01:39:27,560 --> 01:39:30,880
these directories exist that we have just created.

1859
01:39:30,880 --> 01:39:34,560
So just creating these like base screen size for mobile

1860
01:39:34,560 --> 01:39:37,880
desktop, okay, so now we have that done.

1861
01:39:43,880 --> 01:39:46,840
We can now generate all of our desired screen sizes.

1862
01:39:46,840 --> 01:39:49,440
So again, this is generating all of our golden screenshots,

1863
01:39:49,440 --> 01:39:52,960
we just made sure that all of the directories existed.

1864
01:39:52,960 --> 01:39:55,880
Now instead of just taking screenshots for this exact

1865
01:39:55,880 --> 01:39:58,280
viewport, we're going to want to do the same thing

1866
01:39:59,200 --> 01:40:02,860
and kind of iterate over all of the screenshots.

1867
01:40:03,860 --> 01:40:07,860
So I'm also, for the sake of time, going to copy this

1868
01:40:07,860 --> 01:40:12,860
as well, or maybe I'm not, because it doesn't like me.

1869
01:40:16,260 --> 01:40:17,100
One second.

1870
01:40:32,860 --> 01:40:33,700
Okay.

1871
01:40:38,220 --> 01:40:42,980
So now instead of doing this directly, this is going to be

1872
01:40:42,980 --> 01:40:47,460
another iteration, so for every single screen size,

1873
01:40:47,460 --> 01:40:49,980
we want to go over every single screenshot type

1874
01:40:49,980 --> 01:40:54,980
and make sure that we are now generating for each of those.

1875
01:40:55,180 --> 01:40:58,900
So we create our screenshot size based on the screenshot

1876
01:40:58,900 --> 01:41:02,340
type, if you remember what that object looked like.

1877
01:41:02,340 --> 01:41:07,100
This is a nested, an array of arrays basically,

1878
01:41:07,100 --> 01:41:09,700
is what we're kind of indexing into here.

1879
01:41:10,980 --> 01:41:15,580
And then basically what we're doing is creating a list

1880
01:41:15,580 --> 01:41:19,380
of all of the screenshot actions that we need to take,

1881
01:41:19,380 --> 01:41:22,140
and then we can kind of run all of these in parallel

1882
01:41:22,980 --> 01:41:26,780
and make sure that they all complete and then return.

1883
01:41:27,780 --> 01:41:32,300
So we can actually replace this here and say like,

1884
01:41:33,300 --> 01:41:36,180
once all of our screenshots actions return,

1885
01:41:36,180 --> 01:41:39,140
then we can close our browser and clean everything up.

1886
01:41:40,140 --> 01:41:42,780
So I think at this point we've done everything

1887
01:41:42,780 --> 01:41:45,360
for generating our golden screenshots.

1888
01:41:45,360 --> 01:41:46,880
Let's just see, yeah.

1889
01:41:51,740 --> 01:41:53,940
So I did something funny with sub-uport.

1890
01:41:56,300 --> 01:41:57,140
Let's see.

1891
01:42:02,900 --> 01:42:05,900
So take screenshot, call setvport,

1892
01:42:09,060 --> 01:42:11,060
and this call setvport.

1893
01:42:19,020 --> 01:42:22,500
So I actually think this is not happy about

1894
01:42:23,900 --> 01:42:26,100
calling setvport here.

1895
01:42:26,780 --> 01:42:29,260
Calling setvport here.

1896
01:42:31,700 --> 01:42:33,860
I'm gonna try for the sake of time,

1897
01:42:33,860 --> 01:42:37,140
I'm gonna try just creating a new page here.

1898
01:42:37,140 --> 01:42:39,980
I think it's not happy about that.

1899
01:42:39,980 --> 01:42:41,220
Let's see if this works.

1900
01:42:48,540 --> 01:42:51,880
So I'm also going to take in our browser here,

1901
01:42:53,140 --> 01:42:55,500
creating a new page.

1902
01:42:55,500 --> 01:42:57,580
And then when we call take screenshot,

1903
01:42:57,580 --> 01:43:00,060
yeah, we now have a browser, okay.

1904
01:43:00,060 --> 01:43:01,780
Now this should work, hopefully.

1905
01:43:11,220 --> 01:43:13,020
Well, that's unexpected.

1906
01:43:13,020 --> 01:43:14,660
Something has to go wrong, right?

1907
01:43:19,340 --> 01:43:23,840
Interesting, I'm curious to see if it generated any of them.

1908
01:43:26,100 --> 01:43:28,220
I know this is really small, fix it in a second.

1909
01:43:28,220 --> 01:43:31,300
Interesting, so something actually did go right.

1910
01:43:31,300 --> 01:43:32,340
I don't think I can make,

1911
01:43:32,340 --> 01:43:34,740
I don't really know how to make this too much bigger,

1912
01:43:34,740 --> 01:43:37,380
but I can temporarily zoom in for you.

1913
01:43:37,380 --> 01:43:39,820
So something's definitely going right.

1914
01:43:39,820 --> 01:43:43,660
We have our desktop and our mobile directories.

1915
01:43:43,660 --> 01:43:46,300
We now have a bunch of screenshots that are taken,

1916
01:43:46,300 --> 01:43:50,140
and we have the different viewport sizes

1917
01:43:50,140 --> 01:43:54,220
and the filenames for desktop and mobile.

1918
01:43:54,220 --> 01:43:57,180
So something is going well.

1919
01:44:00,260 --> 01:44:02,940
Okay, so at this point,

1920
01:44:02,940 --> 01:44:07,020
I do know I'm starting to get tighter and tighter on time.

1921
01:44:07,020 --> 01:44:09,220
So I am going to cheat a little bit

1922
01:44:09,220 --> 01:44:13,780
and check out to these different commits

1923
01:44:13,780 --> 01:44:15,820
so that I wanna make sure that you all can see

1924
01:44:15,820 --> 01:44:16,940
all of this kind of working

1925
01:44:16,940 --> 01:44:19,180
and not just watch me kind of like struggle

1926
01:44:19,180 --> 01:44:20,940
through live coding in front of you.

1927
01:44:21,060 --> 01:44:26,060
Okay, so, and I'll actually show you what I'm doing too.

1928
01:44:28,820 --> 01:44:30,980
So this is kind of what I mentioned earlier

1929
01:44:30,980 --> 01:44:32,180
for like one of the possibilities

1930
01:44:32,180 --> 01:44:34,700
of how you can use this content.

1931
01:44:34,700 --> 01:44:36,900
So I'm going to go through,

1932
01:44:38,700 --> 01:44:42,420
I want to look at the commits that I have.

1933
01:44:42,420 --> 01:44:47,420
And so I think I was trying to get screenshots

1934
01:44:47,460 --> 01:44:50,300
for various desktop sizes working.

1935
01:44:50,300 --> 01:44:55,300
I do wanna show you for different devices specifically.

1936
01:44:55,420 --> 01:44:57,420
So if I go through and show you this diff,

1937
01:44:58,860 --> 01:45:01,740
we're basically now going to like take into account

1938
01:45:01,740 --> 01:45:05,900
different device types as well as the actual sizes.

1939
01:45:05,900 --> 01:45:09,020
And so this is some really cool stuff that you can do

1940
01:45:09,020 --> 01:45:12,260
is Puppeteer will actually have built in

1941
01:45:12,260 --> 01:45:15,100
like emulators for different devices.

1942
01:45:15,100 --> 01:45:16,500
So instead of having to go through

1943
01:45:16,500 --> 01:45:19,580
and like figure out the exact like pixel ratios

1944
01:45:19,580 --> 01:45:23,500
and like dimensions of devices

1945
01:45:23,500 --> 01:45:24,860
and trying to do that all yourself,

1946
01:45:24,860 --> 01:45:25,940
you can just tell it like,

1947
01:45:25,940 --> 01:45:28,460
I wanna emulate an iPhone 6 and iPhone 10,

1948
01:45:28,460 --> 01:45:33,460
a Galaxy S3, five, I don't, an iPhone person,

1949
01:45:34,860 --> 01:45:36,900
whatever the like the device types are,

1950
01:45:36,900 --> 01:45:38,900
you can just like give it a string

1951
01:45:38,900 --> 01:45:42,660
and it will actually kind of just render it based on that.

1952
01:45:43,540 --> 01:45:48,540
So I am going to cheat and show you this.

1953
01:45:49,860 --> 01:45:52,780
So you can see the screenshots.

1954
01:45:58,060 --> 01:45:59,180
So I'm gonna go through

1955
01:45:59,180 --> 01:46:00,900
and generate my golden screenshots real quick

1956
01:46:00,900 --> 01:46:03,940
and then I'm gonna go through and just run the test

1957
01:46:03,940 --> 01:46:05,940
and make sure that all of that is working.

1958
01:46:05,940 --> 01:46:06,780
Maybe.

1959
01:46:20,740 --> 01:46:21,660
Okay, cool.

1960
01:46:22,540 --> 01:46:24,420
So we can see here,

1961
01:46:24,420 --> 01:46:26,660
this is gonna go through and print out

1962
01:46:26,660 --> 01:46:28,100
all of our information.

1963
01:46:28,100 --> 01:46:30,420
And I'll show you exactly how this is doing it too.

1964
01:46:30,420 --> 01:46:33,540
So this is a little bit of like kind of generating

1965
01:46:33,540 --> 01:46:36,860
these different devices that you're seeing here.

1966
01:46:36,860 --> 01:46:38,500
So not all of these are hard coded.

1967
01:46:38,500 --> 01:46:39,820
We're actually iterating over this

1968
01:46:39,820 --> 01:46:43,020
and creating test cases for them automatically.

1969
01:46:43,020 --> 01:46:46,980
And then if we go through and look at our files

1970
01:46:46,980 --> 01:46:50,940
that we now have, you can see that we have desktop.

1971
01:46:50,940 --> 01:46:52,060
These didn't get regenerated,

1972
01:46:52,060 --> 01:46:54,740
these are just leftover from before.

1973
01:46:54,740 --> 01:46:57,420
And then we have our mobile devices.

1974
01:46:57,420 --> 01:47:01,580
So you can see this page looks really wonky on an iPhone 6,

1975
01:47:01,580 --> 01:47:04,180
but at least we can kind of like see this here now

1976
01:47:05,540 --> 01:47:07,260
and have a really good idea

1977
01:47:07,260 --> 01:47:09,780
of what needs to be fixed for different devices.

1978
01:47:12,700 --> 01:47:14,260
Okay, so let me see if I can pull up

1979
01:47:14,260 --> 01:47:17,100
exactly where this is doing this stuff.

1980
01:47:17,100 --> 01:47:20,820
So now if we go back and look at our tests,

1981
01:47:22,660 --> 01:47:25,100
let's see, so in our tests,

1982
01:47:25,100 --> 01:47:27,460
we, that's all the setup.

1983
01:47:27,740 --> 01:47:31,820
Cool, so here's where we're actually like generating tests

1984
01:47:31,820 --> 01:47:33,460
for different screen sizes.

1985
01:47:33,460 --> 01:47:36,740
So really similar to how we started off before,

1986
01:47:36,740 --> 01:47:41,020
we're just gonna iterate over the like setup config file

1987
01:47:41,020 --> 01:47:43,740
for all the screen sizes that we want to test.

1988
01:47:43,740 --> 01:47:48,580
And then we can generate these tests using describe.

1989
01:47:48,580 --> 01:47:53,100
And then I still really like using the string template

1990
01:47:53,100 --> 01:47:56,700
where you can interpolate in directly

1991
01:47:56,700 --> 01:48:01,700
in the function parameter and create all of this.

1992
01:48:04,060 --> 01:48:05,740
Yeah, and then it's taking the screenshot type,

1993
01:48:05,740 --> 01:48:10,740
screenshot size and is able to figure all of that out.

1994
01:48:10,860 --> 01:48:12,900
And then do we do have specifically,

1995
01:48:12,900 --> 01:48:15,040
we didn't add a configuration for,

1996
01:48:17,280 --> 01:48:20,020
we didn't add a configuration directly for the device types.

1997
01:48:20,020 --> 01:48:22,480
This was just an example with an iPhone,

1998
01:48:22,480 --> 01:48:24,440
but you can also go through and add like a device's

1999
01:48:24,440 --> 01:48:26,280
parameter and do the same thing here.

2000
01:48:28,800 --> 01:48:32,040
Okay, let me see if there was something else

2001
01:48:32,040 --> 01:48:35,000
that I wanted to specifically walk through on here.

2002
01:48:42,360 --> 01:48:45,840
Yeah, so a lot of this is gonna be kind of walking through

2003
01:48:45,840 --> 01:48:48,640
and just doing some sort of best practices.

2004
01:48:48,640 --> 01:48:53,640
So moving that base URL into a configuration variable,

2005
01:48:56,040 --> 01:48:57,600
creating all of our different

2006
01:49:01,600 --> 01:49:03,440
like routes and whatnot based on that.

2007
01:49:08,680 --> 01:49:11,620
Yeah, I think that's most of it that I had

2008
01:49:11,620 --> 01:49:13,260
in this repository currently.

2009
01:49:14,220 --> 01:49:18,580
Some other options for how you can actually

2010
01:49:18,580 --> 01:49:20,260
create all this stuff.

2011
01:49:20,260 --> 01:49:22,860
So I'm curious to see, let's just go ahead and check out

2012
01:49:23,900 --> 01:49:26,080
the end product.

2013
01:49:37,780 --> 01:49:39,620
So now we can go through and generate,

2014
01:49:39,620 --> 01:49:40,980
hopefully all of this works.

2015
01:49:43,980 --> 01:49:47,600
Yeah, somehow I'm not surprised.

2016
01:49:50,620 --> 01:49:53,980
So this probably, JavaScript does get kind of tricky

2017
01:49:53,980 --> 01:49:57,340
and kind of likes to complain about promises

2018
01:49:57,340 --> 01:49:58,340
and different things.

2019
01:49:59,580 --> 01:50:02,740
So there's probably just something that I didn't have caught

2020
01:50:02,740 --> 01:50:04,660
that was not getting returned properly.

2021
01:50:04,860 --> 01:50:07,860
Okay, so this is just not gonna like me much at all.

2022
01:50:09,380 --> 01:50:11,780
But this actually, so this leads me into the next section

2023
01:50:11,780 --> 01:50:14,780
that I really wanted to dive in and kind of talk through.

2024
01:50:15,740 --> 01:50:18,300
So at this point, you can kind of see that there are ways

2025
01:50:18,300 --> 01:50:21,060
to set up this foundation for visual testing

2026
01:50:21,060 --> 01:50:25,380
where you can go through and set up different devices,

2027
01:50:25,380 --> 01:50:27,460
different pages that you can view.

2028
01:50:27,460 --> 01:50:29,500
A lot of this, once you get through,

2029
01:50:29,500 --> 01:50:32,020
you can actually start to see what's going on

2030
01:50:32,100 --> 01:50:33,700
and then you can see the images that you can view.

2031
01:50:33,700 --> 01:50:37,660
A lot of this, once you get the base foundation set

2032
01:50:37,660 --> 01:50:39,660
is really easy to automate and just kind of like,

2033
01:50:39,660 --> 01:50:43,140
as you add new pages, you already have this foundation

2034
01:50:43,140 --> 01:50:45,700
for all of your different screen sizes and whatnot.

2035
01:50:46,680 --> 01:50:49,020
So again, this is probably a lot of boilerplate

2036
01:50:49,020 --> 01:50:50,780
and a lot of things understand,

2037
01:50:50,780 --> 01:50:53,660
but it's kind of like a set it and forget it kind of thing

2038
01:50:53,660 --> 01:50:55,460
and then you can build on top of it.

2039
01:50:56,340 --> 01:51:00,440
So next thing that I wanted to kind of talk through,

2040
01:51:03,020 --> 01:51:04,980
is actually navigating to pages.

2041
01:51:04,980 --> 01:51:06,540
So what we were doing in this example

2042
01:51:06,540 --> 01:51:10,620
was going directly to URLs, which is really, really great.

2043
01:51:10,620 --> 01:51:12,740
If that's your goal for screenshot testing,

2044
01:51:12,740 --> 01:51:14,660
is making sure that your site looks good

2045
01:51:14,660 --> 01:51:16,980
and is scaling across devices,

2046
01:51:16,980 --> 01:51:19,540
you're probably gonna be set with just kind of using

2047
01:51:19,540 --> 01:51:22,400
the URLs and navigating to it directly.

2048
01:51:23,540 --> 01:51:25,860
But there's a lot of power in what you can do

2049
01:51:25,860 --> 01:51:30,020
with actually navigating through your page as a user would.

2050
01:51:30,420 --> 01:51:35,420
And so you can use the standard CSS selectors,

2051
01:51:35,660 --> 01:51:37,760
if you haven't seen those before.

2052
01:51:37,760 --> 01:51:41,340
You can target HTML tags directly,

2053
01:51:41,340 --> 01:51:44,860
you can target classes directly, you can target IDs.

2054
01:51:44,860 --> 01:51:46,340
There's a whole list, I actually,

2055
01:51:46,340 --> 01:51:49,940
I really like the list that HTMLDog has.

2056
01:51:49,940 --> 01:51:53,180
That's a great resource, check it out if you need it.

2057
01:51:54,060 --> 01:51:56,660
But basically, you can use these selectors

2058
01:51:56,660 --> 01:51:58,980
to tell Puppeteer to interact with the page

2059
01:51:58,980 --> 01:52:00,500
in different ways.

2060
01:52:00,500 --> 01:52:04,940
And so you can do things like clicking on a button,

2061
01:52:04,940 --> 01:52:07,660
focusing on an input field, filling out an input field,

2062
01:52:07,660 --> 01:52:09,660
submitting a form, pressing enter.

2063
01:52:10,860 --> 01:52:13,660
There's actually a really, really, really huge list

2064
01:52:15,980 --> 01:52:18,440
of all the things that you can do with Puppeteer.

2065
01:52:20,380 --> 01:52:23,940
So I know this is probably kind of small,

2066
01:52:23,940 --> 01:52:27,920
but I wanna show you, where's the list of all of them?

2067
01:52:30,180 --> 01:52:32,740
Yeah, so this is the list of all the API interactions

2068
01:52:32,740 --> 01:52:33,580
that you have.

2069
01:52:34,420 --> 01:52:36,820
So some other cool things that you can do

2070
01:52:36,820 --> 01:52:41,300
is tap into these dev tools that I was talking about.

2071
01:52:41,300 --> 01:52:44,020
You actually have access to all of those.

2072
01:52:44,020 --> 01:52:47,500
There's a lot of ways to tap into your render cycles

2073
01:52:47,500 --> 01:52:50,400
for animations, that's all there.

2074
01:52:51,160 --> 01:52:54,280
And then there's just a bunch of different ways

2075
01:52:54,280 --> 01:52:56,700
to navigate throughout your application.

2076
01:52:56,700 --> 01:52:59,200
So especially when you're dealing with SPAs,

2077
01:52:59,200 --> 01:53:01,680
making sure that your back button actually works,

2078
01:53:01,680 --> 01:53:04,840
the way that your in-app back button works

2079
01:53:04,840 --> 01:53:06,340
is super important.

2080
01:53:08,520 --> 01:53:10,040
I think going through and using this,

2081
01:53:10,040 --> 01:53:13,280
I think that they have support for testing accessibility,

2082
01:53:13,280 --> 01:53:14,640
which is also really important,

2083
01:53:14,640 --> 01:53:17,380
and usually something that your developers

2084
01:53:17,380 --> 01:53:19,560
are probably not thinking about as frequently

2085
01:53:19,560 --> 01:53:21,120
while they're building it.

2086
01:53:21,120 --> 01:53:22,540
So making sure that you have tests

2087
01:53:22,540 --> 01:53:25,760
for things like accessibility can be really important

2088
01:53:25,760 --> 01:53:27,800
to make sure that that remains a priority

2089
01:53:27,800 --> 01:53:29,600
and doesn't break in your application.

2090
01:53:30,960 --> 01:53:33,000
So yeah, this is a really, really, really great resource.

2091
01:53:33,000 --> 01:53:36,020
There's so much stuff that you can do with this.

2092
01:53:36,020 --> 01:53:39,520
They just make it so easy that you can't not.

2093
01:53:42,440 --> 01:53:43,760
Okay, so I'm gonna talk a little bit

2094
01:53:43,760 --> 01:53:45,440
about some best practices.

2095
01:53:46,420 --> 01:53:48,840
One of the things that you'll often see

2096
01:53:48,840 --> 01:53:51,040
are really, really long selectors.

2097
01:53:51,040 --> 01:53:53,400
And so it's really interesting to kind of compare.

2098
01:53:53,400 --> 01:53:55,680
If you've worked with CSS,

2099
01:53:55,680 --> 01:54:00,360
you've probably learned a bit about some CSS best practices.

2100
01:54:00,360 --> 01:54:02,480
So the selectors are the same,

2101
01:54:02,480 --> 01:54:04,080
but the best practices are not.

2102
01:54:05,360 --> 01:54:08,600
In both worlds, long selectors are typically not great.

2103
01:54:08,600 --> 01:54:10,800
As you can see, this didn't even fit.

2104
01:54:10,800 --> 01:54:13,880
And so the more nested your selectors are,

2105
01:54:13,880 --> 01:54:16,160
the more prone to breakage they are.

2106
01:54:16,160 --> 01:54:19,320
And so if you, for example, figured out

2107
01:54:19,320 --> 01:54:24,040
that you didn't need this div

2108
01:54:24,040 --> 01:54:27,240
that was enclosing your container,

2109
01:54:27,240 --> 01:54:28,480
and you just took it out,

2110
01:54:28,480 --> 01:54:30,960
you would probably have a bunch of tests that would break

2111
01:54:30,960 --> 01:54:33,040
because your selector was relying

2112
01:54:33,040 --> 01:54:34,660
on this kind of useless div.

2113
01:54:35,960 --> 01:54:37,760
The other interesting thing is that

2114
01:54:38,880 --> 01:54:40,840
a sort of best practice for CSS

2115
01:54:40,840 --> 01:54:45,840
is to try to not use IDs as selectors as much as possible.

2116
01:54:47,040 --> 01:54:48,960
Because that typically makes it so that

2117
01:54:48,960 --> 01:54:52,960
you're only targeting a single element on a page,

2118
01:54:52,960 --> 01:54:54,540
which if that's the intention is great,

2119
01:54:54,540 --> 01:54:56,740
but if you're trying to style all of your buttons

2120
01:54:56,740 --> 01:54:57,580
or something like that,

2121
01:54:57,580 --> 01:54:59,500
that's typically not a good practice.

2122
01:55:00,840 --> 01:55:05,600
But IDs are really, really ideal with testing.

2123
01:55:05,600 --> 01:55:07,920
And a lot of frameworks actually have it built in,

2124
01:55:07,920 --> 01:55:12,240
so you can specify a test ID specifically that you can target.

2125
01:55:12,240 --> 01:55:15,040
So you can get really clever with how your team wants

2126
01:55:15,040 --> 01:55:17,600
to kind of set up your own best practices.

2127
01:55:17,600 --> 01:55:20,360
You can add your own data attributes to tags.

2128
01:55:21,240 --> 01:55:24,080
So like the same way that an input field

2129
01:55:24,080 --> 01:55:25,360
has like a type or a name,

2130
01:55:25,360 --> 01:55:28,360
you can set up your own kind of naming convention

2131
01:55:28,360 --> 01:55:31,560
for an attribute that you use for all of your tests.

2132
01:55:31,560 --> 01:55:33,040
And then even if you wanted to,

2133
01:55:33,040 --> 01:55:34,600
you could kind of strip all of those out

2134
01:55:34,600 --> 01:55:35,960
before you push them into production

2135
01:55:35,960 --> 01:55:38,400
so that all of your IDs are kept private

2136
01:55:38,400 --> 01:55:39,880
and internal for your company.

2137
01:55:41,360 --> 01:55:43,280
So IDs are really ideal.

2138
01:55:43,280 --> 01:55:46,200
It especially always follow best practices

2139
01:55:46,200 --> 01:55:48,040
where there's a single element on a page

2140
01:55:48,040 --> 01:55:49,560
that has a single ID.

2141
01:55:50,800 --> 01:55:54,480
Having multiple elements with IDs is not necessarily ideal.

2142
01:55:56,000 --> 01:55:58,440
I wanted to do a select your live code,

2143
01:55:58,440 --> 01:56:00,920
I don't think that it's going to work,

2144
01:56:00,920 --> 01:56:04,760
but I will pose it to you all as a potential exercise.

2145
01:56:06,400 --> 01:56:09,480
My intention was that I wanted to go through

2146
01:56:09,480 --> 01:56:14,480
and basically write a test for logging into the PyCon website.

2147
01:56:17,120 --> 01:56:19,680
And so it would be a really interesting,

2148
01:56:19,680 --> 01:56:21,560
if you want to use some of the time today

2149
01:56:21,560 --> 01:56:24,040
to go through that, I think that would be cool.

2150
01:56:24,040 --> 01:56:27,360
I was basically going to go through and test,

2151
01:56:27,360 --> 01:56:31,200
going to the homepage, clicking the login page,

2152
01:56:31,200 --> 01:56:33,400
and then submitting false information

2153
01:56:33,400 --> 01:56:36,840
or invalid credentials that would cause an error on the page.

2154
01:56:37,160 --> 01:56:40,440
And so taking this kind of foundation that's laid

2155
01:56:40,440 --> 01:56:42,800
and figuring out how you can navigate through,

2156
01:56:44,080 --> 01:56:46,440
I think would be a good exercise to build on this.

2157
01:56:46,440 --> 01:56:51,400
So, okay, so I wanted to talk a little bit more

2158
01:56:51,400 --> 01:56:55,440
about these best practices and what you should expect.

2159
01:56:57,920 --> 01:57:00,800
So some really great places to start are from user stories.

2160
01:57:00,800 --> 01:57:02,400
Again, this is really, really user-centric,

2161
01:57:02,400 --> 01:57:04,880
so focusing on what your user is going to see

2162
01:57:04,880 --> 01:57:06,520
and looking at your user stories

2163
01:57:06,520 --> 01:57:09,320
is going to be the best blueprint for you to get started.

2164
01:57:10,200 --> 01:57:12,080
But it's possible that you don't have user stories

2165
01:57:12,080 --> 01:57:15,480
or that your user stories are out of date, et cetera.

2166
01:57:16,120 --> 01:57:19,240
But again, they could be a good place to start.

2167
01:57:19,240 --> 01:57:20,400
The most important parts, I think,

2168
01:57:20,400 --> 01:57:22,480
are the critical business logic

2169
01:57:22,480 --> 01:57:25,200
and also the parts that are kind of set it and forget it.

2170
01:57:26,120 --> 01:57:29,760
So one thing that you don't want breaking is your login page.

2171
01:57:29,760 --> 01:57:32,320
That would be kind of a crucial piece that would break.

2172
01:57:32,320 --> 01:57:34,200
Also probably something that you set up

2173
01:57:34,200 --> 01:57:36,480
in the beginning of a project and don't really touch a lot.

2174
01:57:37,440 --> 01:57:39,080
So those kind of set it and forget it ones

2175
01:57:39,080 --> 01:57:41,360
are ones that you want to make sure have solid tests

2176
01:57:42,240 --> 01:57:43,920
that you don't forget about.

2177
01:57:43,920 --> 01:57:46,640
And also a good way to do it is just a site map.

2178
01:57:46,640 --> 01:57:47,520
You can go through and make sure

2179
01:57:47,520 --> 01:57:49,520
that all your pages are rendering right.

2180
01:57:50,760 --> 01:57:53,360
Again, those pages probably get forgotten sometimes.

2181
01:57:53,360 --> 01:57:55,760
If you have an about page or a static page

2182
01:57:55,760 --> 01:57:57,440
that nobody is really working on,

2183
01:57:58,320 --> 01:58:01,280
a lot of times you can have inadvertent style changes

2184
01:58:01,920 --> 01:58:04,360
or whatnot that make those pages render incorrectly.

2185
01:58:06,680 --> 01:58:09,320
Oh, I don't know why that's a problem.

2186
01:58:22,160 --> 01:58:24,760
Yes, I don't know why this is rendering really badly.

2187
01:58:28,160 --> 01:58:31,480
My notes got really torn into this.

2188
01:58:32,680 --> 01:58:34,640
So I wanted to talk about some next steps.

2189
01:58:35,560 --> 01:58:37,320
So I mentioned snapshots earlier.

2190
01:58:38,120 --> 01:58:39,840
There's a service called Percy

2191
01:58:39,840 --> 01:58:43,480
that does a really interesting kind of combination

2192
01:58:43,480 --> 01:58:45,480
of snapshot testing and screenshot testing

2193
01:58:46,280 --> 01:58:48,960
where they actually have custom rendering agents

2194
01:58:48,960 --> 01:58:51,240
that will take your snapshots and then rerender them

2195
01:58:51,240 --> 01:58:54,800
into like an in browser view

2196
01:58:54,800 --> 01:58:58,840
and let you approve and deny your changes in their website,

2197
01:58:59,360 --> 01:59:00,400
which is really, really helpful,

2198
01:59:00,400 --> 01:59:01,720
especially if you don't want to go through

2199
01:59:01,720 --> 01:59:05,560
and set up all of this kind of like from scratch.

2200
01:59:08,280 --> 01:59:12,520
I'm also totally down to talk about how to roll your own.

2201
01:59:13,040 --> 01:59:16,120
I didn't want to get too vendored in my talk specifically,

2202
01:59:16,120 --> 01:59:17,480
but I'm a huge fan of AWS.

2203
01:59:17,480 --> 01:59:20,480
They have a lot of code pipeline tools that I've used.

2204
01:59:20,480 --> 01:59:22,840
If you're interested in talking about how you can roll

2205
01:59:22,840 --> 01:59:26,760
all of this into like a fully featured CI service,

2206
01:59:27,760 --> 01:59:29,360
I'm here to talk about that.

2207
01:59:30,240 --> 01:59:32,960
And I think that was everything that's rendering there.

2208
01:59:34,360 --> 01:59:37,760
So at this point, I am hoping that all of you

2209
01:59:37,760 --> 01:59:39,880
can kind of dive in.

2210
01:59:39,880 --> 01:59:42,760
If you want to have discussions amongst yourselves,

2211
01:59:42,760 --> 01:59:44,400
if you want to come talk to me,

2212
01:59:44,400 --> 01:59:48,080
we have about 20 minutes left of our official time.

2213
01:59:50,840 --> 01:59:52,440
Yeah, I think that's it.

2214
01:59:54,320 --> 01:59:55,480
Does anybody have any questions

2215
01:59:55,480 --> 01:59:57,680
that they want to pose kind of to everyone?

2216
01:59:59,360 --> 02:00:00,360
Oh, okay.

2217
02:00:01,440 --> 02:00:02,440
Uh-oh.

2218
02:00:07,440 --> 02:00:08,440
Oh, okay.

2219
02:00:08,440 --> 02:00:10,880
Yes, that is one thing that I wanted to talk about.

2220
02:00:10,880 --> 02:00:14,200
It is totally possible to do all of this with Python.

2221
02:00:15,400 --> 02:00:19,400
So like Aaron mentioned, there is a library for this

2222
02:00:20,560 --> 02:00:23,080
that you can do all of this in Python.

2223
02:00:23,080 --> 02:00:26,600
You can still do all of like the rendering and whatnot.

2224
02:00:26,600 --> 02:00:31,600
I'm not sure if there is a good wrapper around resemble.js

2225
02:00:33,760 --> 02:00:36,080
but I know that there are really advanced

2226
02:00:36,080 --> 02:00:38,160
image processing libraries for Python

2227
02:00:38,160 --> 02:00:40,640
that you could kind of roll your own on this.

2228
02:00:40,640 --> 02:00:43,320
I forget the technical term but there's like a,

2229
02:00:45,200 --> 02:00:47,440
it's like a, some sort of like,

2230
02:00:47,440 --> 02:00:49,600
the image merging has like a specific name for it.

2231
02:00:49,600 --> 02:00:50,440
I can't think of it.

2232
02:00:50,440 --> 02:00:52,280
But all this stuff you can do in Python

2233
02:00:52,280 --> 02:00:53,520
if you really wanted to.

2234
02:00:53,520 --> 02:00:54,800
It's just gonna take a little bit more

2235
02:00:54,800 --> 02:00:57,360
of like piecing some parts together.

2236
02:00:57,360 --> 02:00:59,000
But yeah.

2237
02:01:00,640 --> 02:01:01,480
Awesome.

2238
02:01:03,240 --> 02:01:04,200
All right.

2239
02:01:04,200 --> 02:01:05,920
I leave you to yourselves.

2240
02:01:05,920 --> 02:01:07,200
I'm here if you need me.

