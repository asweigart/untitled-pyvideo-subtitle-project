1
00:00:00,000 --> 00:00:02,000
So, we're going to start with a quick

2
00:00:03,080 --> 00:00:05,080
announcement before we start.

3
00:00:06,880 --> 00:00:08,880
So, if you are a new person, please

4
00:00:10,060 --> 00:00:12,060
leave your chairs in the room.

5
00:00:13,680 --> 00:00:15,080
So, we're going to start with a quick announcement before we

6
00:00:15,080 --> 00:00:17,080
start.

7
00:00:19,200 --> 00:00:21,280
This room has occupancy only for as many as the chairs are in

8
00:00:21,280 --> 00:00:23,280
here. I know that not all the chairs are filled.

9
00:00:25,220 --> 00:00:26,760
But please make sure you get a chair so that when the new

10
00:00:26,760 --> 00:00:28,760
people come in, if they have only standing room, they would

11
00:00:30,040 --> 00:00:32,040
be able to sit in the room.

12
00:00:33,260 --> 00:00:34,900
So, I'm going to start with a quick announcement before we

13
00:00:34,900 --> 00:00:36,900
start.

14
00:00:38,220 --> 00:00:40,220
So, if you are new, please leave your chairs in the room.

15
00:00:42,440 --> 00:00:44,440
How do I talk to it with Python?

16
00:00:46,760 --> 00:00:48,760
And speakers, John Snumbert, please welcome.

17
00:00:51,880 --> 00:00:53,880
.

18
00:00:55,880 --> 00:00:57,800
Thank you. I'm going to start with a quick story about myself

19
00:00:57,800 --> 00:00:59,800
and why I'm giving this talk.

20
00:01:00,660 --> 00:01:02,660
It's a little different than I had ever seen.

21
00:01:04,180 --> 00:01:07,200
And since then I've been fascinated by the role that

22
00:01:07,200 --> 00:01:09,040
software plays in building these amazingly complex machines that

23
00:01:09,040 --> 00:01:11,040
we call factories.

24
00:01:13,480 --> 00:01:15,980
But I also sometimes feel a little bit like I've stumbled

25
00:01:15,980 --> 00:01:17,980
upon this weird niche.

26
00:01:19,260 --> 00:01:20,960
Most software developers never even encounter factory

27
00:01:20,960 --> 00:01:22,960
automation as a place where you can apply your skills.

28
00:01:24,960 --> 00:01:28,320
And at conferences like this, the topic has a little bit of a

29
00:01:28,320 --> 00:01:32,760
other places where software engineers exchange knowledge.

30
00:01:32,760 --> 00:01:38,880
So I thought to myself, I'm going to give a software conference talk about a factory

31
00:01:38,880 --> 00:01:41,000
topic every calendar year.

32
00:01:41,000 --> 00:01:46,640
And you all are here to see 2019 being checked off the list.

33
00:01:46,640 --> 00:01:53,680
The topic I decided to bring today is PLCs, and that stands for programmable logic controllers.

34
00:01:53,680 --> 00:01:56,800
And if you do a quick survey of people who've worked with PLCs before, they usually think

35
00:01:56,880 --> 00:01:59,280
of factories as the place where they live.

36
00:01:59,280 --> 00:02:03,040
So if you had to walk through there, you would look for the metal enclosure, the electronics

37
00:02:03,040 --> 00:02:06,720
cabinet, and it has a couple of buttons, a couple of readouts and stuff on it.

38
00:02:06,720 --> 00:02:09,120
You open it up, you might find a PLC in there.

39
00:02:09,120 --> 00:02:13,520
They're usually hanging out near the robots, also in standalone equipment like the window

40
00:02:13,520 --> 00:02:14,520
tinting machine.

41
00:02:14,520 --> 00:02:19,440
If you don't have access to factories out and about, maybe you're near wind energy,

42
00:02:19,440 --> 00:02:23,520
they have PLCs in the controller cabinet at the bottom, near the gearbox at the top.

43
00:02:23,520 --> 00:02:28,080
They control the angle at which the rotor blades are set to the wind.

44
00:02:28,080 --> 00:02:33,320
Construction machines, theme parks, car washes, public transit vehicles have PLCs.

45
00:02:33,320 --> 00:02:35,240
Trains often have a network of them.

46
00:02:35,240 --> 00:02:39,720
They're in each carriage doing stuff like traction control and AC, and then the cockpit

47
00:02:39,720 --> 00:02:42,200
at the driver's dashboard.

48
00:02:42,200 --> 00:02:46,400
Buildings like this, the HVAC system, the lighting, the elevators are controlled by

49
00:02:46,400 --> 00:02:47,400
PLCs.

50
00:02:47,400 --> 00:02:49,880
You go to the roof to get to the control room or into the basement.

51
00:02:49,880 --> 00:02:51,040
Sometimes it's at the elevator itself.

52
00:02:51,360 --> 00:02:55,480
There are places where you think there's a PLC, but there isn't one, like traffic control

53
00:02:55,480 --> 00:02:57,640
cabinets at your regular intersection.

54
00:02:57,640 --> 00:03:00,240
There are so many of these things, and they're pretty simple.

55
00:03:00,240 --> 00:03:04,680
You don't need programmable logic, so you just buy off-the-shelf electronics.

56
00:03:04,680 --> 00:03:08,000
But as soon as you have traffic management for the whole city wiring all these intersections

57
00:03:08,000 --> 00:03:13,360
up or you have a tram crossing the intersection, it becomes custom logic again, and more than

58
00:03:13,360 --> 00:03:16,920
likely you'll find a PLC in these boxes.

59
00:03:16,920 --> 00:03:21,000
So there's that thing where people say when you're in a big city, you're never more than

60
00:03:21,000 --> 00:03:23,920
10 feet away from a rat.

61
00:03:23,920 --> 00:03:27,520
I'm going to add to that urban myth and say you're also never more than 50 feet away from

62
00:03:27,520 --> 00:03:30,000
a PLC.

63
00:03:30,000 --> 00:03:32,560
Using that as motivation, this is the outline of the talk.

64
00:03:32,560 --> 00:03:34,640
Super simple because it's actually in the talk title.

65
00:03:34,640 --> 00:03:36,080
First we talk about what is a PLC.

66
00:03:36,080 --> 00:03:40,120
Second, we talk about what do we do with Python to interface to them.

67
00:03:40,200 --> 00:03:47,160
Then at the very end, we deal with the dreaded Raspberry Pi question.

68
00:03:47,160 --> 00:03:48,520
I talk fast.

69
00:03:48,520 --> 00:03:51,840
Some of my slides are really full because I want you to be able to use them as reference

70
00:03:51,840 --> 00:03:53,760
material after the talk is over.

71
00:03:53,760 --> 00:03:57,520
So if you want to follow along, the link to the slides is right there.

72
00:03:57,520 --> 00:04:01,400
If that's too much to type, my Twitter, you can look up, I just tweeted out a link to

73
00:04:01,400 --> 00:04:03,240
the slides as well.

74
00:04:03,240 --> 00:04:05,840
And with that, let's dive right in.

75
00:04:06,240 --> 00:04:10,640
I'm going to take you along the journey of what happens when you decide to use a PLC

76
00:04:10,640 --> 00:04:11,640
in your project.

77
00:04:11,640 --> 00:04:15,000
Step one, you go to your purchasing department, you get a quote and all that stuff.

78
00:04:15,000 --> 00:04:19,200
In the end, you order one, you get a package, you open it up, you get one of those things.

79
00:04:19,200 --> 00:04:22,200
Depending on how much money you spend, how difficult your application is, you get like

80
00:04:22,200 --> 00:04:27,480
a compact form factor which has a limited set of features that you can't extend or you

81
00:04:27,480 --> 00:04:33,480
go all the way to the expensive, expansible ones where you just keep adding modules to

82
00:04:33,520 --> 00:04:37,600
continue expanding the PLC to meet your features.

83
00:04:37,600 --> 00:04:40,040
Spend a day or maybe a week on setting it up.

84
00:04:40,040 --> 00:04:43,040
It looks like it's grown a ponytail or two.

85
00:04:43,040 --> 00:04:46,240
Those are the wires coming out of it.

86
00:04:46,240 --> 00:04:48,400
These are stock photos on the slide.

87
00:04:48,400 --> 00:04:52,440
When I do it, it looks like what's on the stage here because I actually brought a little

88
00:04:52,440 --> 00:04:59,240
PLC that's already blinking away waiting to be used in our demo.

89
00:04:59,240 --> 00:05:03,280
Those wires are actually a hint about what PLCs do because I have for anyone who hasn't

90
00:05:03,280 --> 00:05:06,880
used a PLC before, I haven't actually mentioned what they do yet.

91
00:05:06,880 --> 00:05:07,880
Those wires are a hint.

92
00:05:07,880 --> 00:05:12,000
They're connected to field devices that are out in the factory or in the wind turbine

93
00:05:12,000 --> 00:05:15,080
or whatever it is you're controlling.

94
00:05:15,080 --> 00:05:19,680
That tells you that the natural habitat for PLCs is always right at this boundary where

95
00:05:19,680 --> 00:05:24,760
the world of software with bits and bytes meets the world of the physical world with

96
00:05:24,760 --> 00:05:28,200
atoms and electrons.

97
00:05:28,200 --> 00:05:33,760
It actually makes sense to give a quick intro to field devices and I.O. input output.

98
00:05:33,760 --> 00:05:36,080
It's a term that gets used a lot.

99
00:05:36,080 --> 00:05:39,480
Field devices is just a fancy word for sensors and actuators.

100
00:05:39,480 --> 00:05:46,240
Sensors are the devices that look at observable phenomena in the physical world, turn it into

101
00:05:46,240 --> 00:05:50,040
an electrical signal which then becomes a variable in your code, and actuators are the

102
00:05:50,040 --> 00:05:51,040
other way around.

103
00:05:51,040 --> 00:05:54,760
They take a variable in your code, turn it into an electrical signal which then becomes

104
00:05:54,760 --> 00:05:56,720
an effect in the physical world.

105
00:05:57,240 --> 00:06:01,080
This slide is super complicated but it's really just to illustrate that there are many different

106
00:06:01,080 --> 00:06:06,800
kinds of electrical signals out there because physics is hard, standardization is hard.

107
00:06:06,800 --> 00:06:11,560
For your sensors you might have anywhere up to 10 different signal types and that's where

108
00:06:11,560 --> 00:06:13,800
those modules I mentioned earlier come in.

109
00:06:13,800 --> 00:06:17,420
You can't just plug any signal into any port of your PLC.

110
00:06:17,420 --> 00:06:21,840
You purchase the set of modules that matches the signals that you need.

111
00:06:21,840 --> 00:06:24,960
Really the only important distinction for us to understand here to follow the rest of

112
00:06:25,200 --> 00:06:28,920
this talk is that some signals are digital, which means the physical phenomenon is on

113
00:06:28,920 --> 00:06:34,560
or off, the electrical signal is high or low, and the variable becomes a Boolean variable.

114
00:06:34,560 --> 00:06:38,420
And there are analog signals which are things that are continuous variables.

115
00:06:38,420 --> 00:06:42,060
You need to measure the electrical signals much more accurately and then it becomes a

116
00:06:42,060 --> 00:06:44,640
number in your code.

117
00:06:44,640 --> 00:06:50,320
On the slide here I purchased a PLC and I added one, two, three, four, five, six modules

118
00:06:50,680 --> 00:06:55,680
to deal with different types of signals, both digital inputs, abbreviated DI, and analog

119
00:06:55,680 --> 00:06:58,800
inputs and stuff like that, and digital outputs, abbreviated DQ.

120
00:06:58,800 --> 00:07:00,120
Wait, what?

121
00:07:00,120 --> 00:07:02,160
That seems to be a common thing in automation engineering.

122
00:07:02,160 --> 00:07:06,560
I think it's because the O for output would be too similar to zero so they say DQ and

123
00:07:06,560 --> 00:07:09,840
you'll see that a couple of times in my variable names later.

124
00:07:09,840 --> 00:07:10,840
Cool.

125
00:07:10,840 --> 00:07:14,600
We purchase it, we wired it up.

126
00:07:14,600 --> 00:07:16,560
What does it do?

127
00:07:16,560 --> 00:07:18,960
Same thing as any compute device in the world.

128
00:07:18,960 --> 00:07:21,480
It goes through the IPO cycle.

129
00:07:21,480 --> 00:07:26,080
In the first step, input, we read the process variables from the field.

130
00:07:26,080 --> 00:07:30,320
That basically means we look at the electrical signals and the PLC turns those into variables,

131
00:07:30,320 --> 00:07:33,480
stores them in memory in a place called the process image in.

132
00:07:33,480 --> 00:07:38,800
Then in step two, we run some kind of logic, do some computation, and hopefully turn our

133
00:07:38,800 --> 00:07:42,720
input variables into output variables because that's what programmers usually do in their

134
00:07:42,720 --> 00:07:45,800
functions, and those get written to the process image out.

135
00:07:46,040 --> 00:07:50,320
PLC takes over again, turns those variables in the process image out to electrical signals

136
00:07:50,320 --> 00:07:55,960
to our actuators, which might be a motor or a fan or whatever it is that we're controlling.

137
00:07:55,960 --> 00:08:00,140
Obviously the interesting bit to us is step two because that's where we can have an effect

138
00:08:00,140 --> 00:08:01,800
on what's going on in the PLC.

139
00:08:01,800 --> 00:08:06,280
We can program it, and that's also where the name comes from because that's where the programmable

140
00:08:06,280 --> 00:08:10,440
logic lives.

141
00:08:10,440 --> 00:08:13,440
Just a quick recap.

142
00:08:14,080 --> 00:08:16,840
We determined that PLCs are the things that interface between the world of software and

143
00:08:16,840 --> 00:08:17,840
the physical world.

144
00:08:17,840 --> 00:08:22,640
They're wired up to field devices that show up as digital and analog inputs and the like,

145
00:08:22,640 --> 00:08:25,040
and we can program them to affect their behavior.

146
00:08:25,040 --> 00:08:29,520
So let's do a quick demo with this guy that I've got here, and I'm going to fire up my

147
00:08:29,520 --> 00:08:35,680
favorite text editor and start programming the PLC.

148
00:08:35,680 --> 00:08:36,680
Just kidding.

149
00:08:36,680 --> 00:08:40,720
You don't program PLCs with text, and also you don't use your favorite program.

150
00:08:40,720 --> 00:08:46,880
You use the one program that the vendor of your PLC gave you to program it.

151
00:08:46,880 --> 00:08:51,960
Actually I selected the PLC that I brought today based on the fact that the software

152
00:08:51,960 --> 00:08:55,840
is sort of like clean enough that I can put it on a presentation screen, and it's not

153
00:08:55,840 --> 00:08:57,700
like full of a million images.

154
00:08:57,700 --> 00:09:01,560
And I'm going to do this trick where I zoom in every now and to make it even easier for

155
00:09:01,560 --> 00:09:03,040
you to see.

156
00:09:03,040 --> 00:09:05,440
So this is the programming environment we have.

157
00:09:05,440 --> 00:09:08,260
On the very left, we see this big line.

158
00:09:08,260 --> 00:09:12,740
That's like under pressure or there's electricity coming in, and the electricity is trying to

159
00:09:12,740 --> 00:09:18,500
travel down those horizontal lines to get to the right, and we get to put like electrical

160
00:09:18,500 --> 00:09:23,980
circuit elements there, and I'm going to put normally open contact that looks at the variable

161
00:09:23,980 --> 00:09:25,140
di1.

162
00:09:25,140 --> 00:09:27,520
What that basically means, it's like an if statement.

163
00:09:27,520 --> 00:09:32,260
If di1 becomes true, current is traveling here where my cursor is dancing around, and

164
00:09:32,260 --> 00:09:35,060
if it stays false, well, current can't get there.

165
00:09:35,060 --> 00:09:39,060
So we're going to make use of that, and whenever current gets there, we're going to switch

166
00:09:39,060 --> 00:09:41,580
dq1 to true.

167
00:09:41,580 --> 00:09:46,000
So we really just have sort of the hello world of PLCs.

168
00:09:46,000 --> 00:09:48,580
If di is true, make dq true.

169
00:09:48,580 --> 00:09:50,580
Otherwise, both of them are false.

170
00:09:50,580 --> 00:09:55,560
I'm going to go online with my PLC, which I should have done before the talk.

171
00:09:55,560 --> 00:09:58,660
Now I can program it.

172
00:09:58,660 --> 00:10:01,220
And I connected the two with a network cable here.

173
00:10:01,220 --> 00:10:04,620
Just my laptop's connected to the PLC for programming.

174
00:10:04,620 --> 00:10:06,860
The program is over there now.

175
00:10:06,860 --> 00:10:09,500
Now we're going to test actually at home.

176
00:10:09,500 --> 00:10:13,780
I usually do this with an LED and stuff, and LED is a small thing, but since you can't

177
00:10:13,780 --> 00:10:20,580
see that, I grabbed one of those for you.

178
00:10:20,580 --> 00:10:27,420
So those are the digital outputs, and I got the corresponding digital input as well.

179
00:10:27,420 --> 00:10:30,700
And we press the button, and this is what's happening.

180
00:10:30,700 --> 00:10:31,820
Digital input is true.

181
00:10:31,820 --> 00:10:33,100
Digital output becomes true.

182
00:10:33,100 --> 00:10:36,900
And actually, I switched us into monitoring mode, so if you watch the screen, you can

183
00:10:36,900 --> 00:10:41,860
actually see what those variables are doing, which is really kind of cool.

184
00:10:41,860 --> 00:10:45,460
But then you install it, and the kids come, and they go like, ah.

185
00:10:45,460 --> 00:10:49,700
So we want to fix that a little bit, and instead of the output, we put a timer here.

186
00:10:49,700 --> 00:10:53,180
And we say we want to count up to two seconds, which in this weird programming language is

187
00:10:53,180 --> 00:10:54,880
200.

188
00:10:54,880 --> 00:10:59,060
And we're going to give it a variable name for the current value, and we're going to

189
00:10:59,060 --> 00:11:01,040
give it a variable name for when it's done.

190
00:11:01,040 --> 00:11:05,500
So timer one done will be true when timer's finished counting, and we add a second rule

191
00:11:05,500 --> 00:11:13,200
to our set of rules and say, if timer one is done, then we actually want to switch that

192
00:11:13,200 --> 00:11:17,560
output DQ one on.

193
00:11:17,560 --> 00:11:25,320
Program that over to the PLC again, and I'm going to do that zooming in trick.

194
00:11:25,320 --> 00:11:29,600
So if I press the button, you see the timer starts running, but the output doesn't come

195
00:11:29,600 --> 00:11:30,600
on yet.

196
00:11:31,160 --> 00:11:33,920
If I keep it running for two seconds, does the light come on?

197
00:11:33,920 --> 00:11:35,720
If I let go, the timer resets.

198
00:11:35,720 --> 00:11:38,880
I press it again, the timer starts counting again.

199
00:11:38,880 --> 00:11:44,120
So we already know two little primitives of this language that we're working in.

200
00:11:44,120 --> 00:11:47,480
I have one more sort of like party trick here.

201
00:11:47,480 --> 00:11:54,160
I'm going to insert another row before, second timer, which also counts to two seconds.

202
00:11:54,520 --> 00:12:00,360
I'm going to call this timer two value and timer two done.

203
00:12:00,360 --> 00:12:02,520
And now I'm going to put a couple of crazy rules in front of those.

204
00:12:02,520 --> 00:12:05,080
I'm going to say anomaly closed contact.

205
00:12:05,080 --> 00:12:09,320
So I want timer two to start counting when timer one is not done.

206
00:12:09,320 --> 00:12:12,960
So that little thing with a strike through here, that's basically an if not statement.

207
00:12:12,960 --> 00:12:15,840
Oops, thank you Windows.

208
00:12:15,840 --> 00:12:21,640
And then I change this to say timer one is counting when timer two is done.

209
00:12:21,640 --> 00:12:26,040
And then I want my output on when timer two is done.

210
00:12:26,040 --> 00:12:27,040
Look at this for a second.

211
00:12:27,040 --> 00:12:32,280
I'm going to click program and you have three more seconds to try to figure out what this

212
00:12:32,280 --> 00:12:35,400
is actually doing when it runs.

213
00:12:35,400 --> 00:12:40,680
And we build ourself a little flashing light.

214
00:12:40,680 --> 00:12:42,160
How cool is that?

215
00:12:42,160 --> 00:12:45,280
Quick pro tip for anyone who's coming to the US from outside the country, when you see

216
00:12:45,280 --> 00:12:48,240
a traffic signal like this, it's actually the equivalent of a stop sign.

217
00:12:48,240 --> 00:12:50,160
You have to stop before you keep moving.

218
00:12:50,160 --> 00:12:51,240
I lived here for three years.

219
00:12:51,240 --> 00:12:56,880
I had no idea.

220
00:12:56,880 --> 00:12:58,640
And it's a bit distracting.

221
00:12:58,640 --> 00:13:00,000
So I'm going to stop the PLC.

222
00:13:00,000 --> 00:13:02,680
So I actually over this network cable tell the PLC to stop.

223
00:13:02,680 --> 00:13:04,100
I should clarify this.

224
00:13:04,100 --> 00:13:06,040
All the code is running in the PLC.

225
00:13:06,040 --> 00:13:08,160
My laptop is only connected to do the programming.

226
00:13:08,160 --> 00:13:12,600
It's a programming interface and has this cool monitoring interface where the PLC reports

227
00:13:12,600 --> 00:13:14,280
what's going on inside of it.

228
00:13:14,280 --> 00:13:19,920
My laptop is not running any of the code.

229
00:13:19,920 --> 00:13:22,560
What did we just see?

230
00:13:22,560 --> 00:13:26,800
The language we program in, and here's a little ASCII representation of the same concept,

231
00:13:26,800 --> 00:13:32,440
is called ladder logic because when you add a lot of rules, it looks like a ladder.

232
00:13:32,440 --> 00:13:34,880
And the terminology is kind of cool.

233
00:13:34,880 --> 00:13:35,880
You have a hot rail.

234
00:13:35,880 --> 00:13:39,280
I told you the analogy is that it has voltage applied to it.

235
00:13:39,280 --> 00:13:40,520
When you touch it, it kind of saps you.

236
00:13:40,520 --> 00:13:41,520
It feels hot.

237
00:13:41,520 --> 00:13:44,400
There's a neutral rail where the current is trying to get to.

238
00:13:44,400 --> 00:13:49,480
And we call those conditionals that we place there the contacts and the outputs the coils.

239
00:13:50,440 --> 00:13:54,960
The general rule of thumb in textbook 101 is read from left to right, top to bottom,

240
00:13:54,960 --> 00:13:56,160
and you'll understand what's going on.

241
00:13:56,160 --> 00:13:58,400
But why are we doing this stuff?

242
00:13:58,400 --> 00:14:03,400
Ah, that is how you program control systems before PLCs existed.

243
00:14:03,400 --> 00:14:04,900
Those are relays.

244
00:14:04,900 --> 00:14:08,200
If you go to the top of an old building, you might find an elevator control room that still

245
00:14:08,200 --> 00:14:09,920
has this kind of stuff in it.

246
00:14:09,920 --> 00:14:16,200
And the way people programmed elevators, production lines, everything, is arrange these relays

247
00:14:16,440 --> 00:14:20,120
and wire them up in such a way that the logic results in it.

248
00:14:20,120 --> 00:14:23,600
And if you've ever used a relay, you know that the place where you hook up your voltage

249
00:14:23,600 --> 00:14:27,540
inputs is called the contact, like in that programming language which is used.

250
00:14:27,540 --> 00:14:32,360
And you energize the coil, which means the relay is activated and passes current through

251
00:14:32,360 --> 00:14:34,540
it, acting basically like a switch.

252
00:14:34,540 --> 00:14:35,840
So this is where this is coming from.

253
00:14:35,840 --> 00:14:41,200
It's taking inspiration from old relay control logic.

254
00:14:41,200 --> 00:14:42,600
You can have two views on this.

255
00:14:42,600 --> 00:14:47,180
You can have the hacker news view, where you think that everything is a startup opportunity

256
00:14:47,180 --> 00:14:51,760
and needs to be disrupted, and you say, many other industries are stuck in the technological

257
00:14:51,760 --> 00:14:52,840
dark ages.

258
00:14:52,840 --> 00:14:56,600
The industrial automation community still programs in ladder logic.

259
00:14:56,600 --> 00:15:04,840
Or, oh, by the way, this is the only reference to ladder logic in 13 years of hacker news.

260
00:15:04,840 --> 00:15:09,560
Or you can have a slightly more different attitude to things and realize that this programming

261
00:15:09,560 --> 00:15:14,560
language has been around for 50 years, so it's got to have something going for it.

262
00:15:14,560 --> 00:15:19,120
And maybe that something is, that it is truly the common denominator across all brands of

263
00:15:19,120 --> 00:15:21,440
PLC, which you can purchase.

264
00:15:21,440 --> 00:15:25,400
And it's part of the curriculum for most automation engineers and electricians in the world.

265
00:15:25,400 --> 00:15:27,880
They learn this as part of their degrees.

266
00:15:27,880 --> 00:15:32,000
And that's important because as soon as this thing is programmed by whoever the automation

267
00:15:32,000 --> 00:15:36,720
integrator is, it gets shipped to the factory and ownership transfers to the factory maintenance

268
00:15:36,720 --> 00:15:39,960
department, which is staffed with technicians and electricians.

269
00:15:39,960 --> 00:15:43,800
And they are now in charge of keeping this thing running and fixing it when it breaks,

270
00:15:43,800 --> 00:15:46,080
sometimes for decades.

271
00:15:46,080 --> 00:15:50,680
And if you think about that, it basically means that ladder logic is a programming language

272
00:15:50,680 --> 00:15:55,160
that's purely designed for debugging and not at all for the person writing it, which is

273
00:15:55,160 --> 00:15:56,160
kind of cool.

274
00:15:56,160 --> 00:16:00,720
Like none of the languages I work in every day have that trait.

275
00:16:00,720 --> 00:16:04,520
Cool.

276
00:16:04,520 --> 00:16:08,360
So we've looked at what the PLCs are.

277
00:16:08,360 --> 00:16:12,240
About halfway point here, everyone's like, where's Python?

278
00:16:12,240 --> 00:16:13,920
So second demo.

279
00:16:13,920 --> 00:16:15,600
And I need to do a little bit of setup.

280
00:16:15,600 --> 00:16:16,880
So you've got to bear with me.

281
00:16:16,880 --> 00:16:21,160
First of all, I'm going to close this project that we worked on, a little hello world.

282
00:16:21,160 --> 00:16:27,120
And I open up a slightly bigger one, which I prepared for this talk.

283
00:16:27,120 --> 00:16:30,440
And I'm going to program that over to the PLC.

284
00:16:30,440 --> 00:16:32,960
Actually what you see here in the background is a bit of a design pattern.

285
00:16:32,960 --> 00:16:38,300
In ladder logic, you often use the main program to call a couple of subtasks, like subroutines.

286
00:16:38,300 --> 00:16:41,360
The interesting one really is the pedestrian crossing one here.

287
00:16:41,360 --> 00:16:43,880
So I switch the PLC to run.

288
00:16:43,880 --> 00:16:45,840
I'm going to switch on my monitoring.

289
00:16:45,840 --> 00:16:48,720
And we'll just quickly run through this program as we actually run it.

290
00:16:48,720 --> 00:16:51,880
So I'm going to press the button, and you can watch the variables change on the screen

291
00:16:51,880 --> 00:16:52,880
again.

292
00:16:52,880 --> 00:16:53,880
So we press.

293
00:16:53,880 --> 00:16:55,920
There's a couple of timers down here that go in sequence.

294
00:16:55,920 --> 00:17:00,000
They all fire and are wired up so that one starts counting when the next one is done.

295
00:17:00,040 --> 00:17:04,040
And at the bottom, we have a bunch of logic that basically says which light needs to come on.

296
00:17:04,040 --> 00:17:06,880
I totally forgot I brought one of those as well.

297
00:17:06,880 --> 00:17:12,600
All right.

298
00:17:12,600 --> 00:17:17,600
Now what's different about this program compared to the one we had before, that if you zoom

299
00:17:17,600 --> 00:17:21,640
in on what this timer is doing, earlier we had a constant value here.

300
00:17:21,640 --> 00:17:23,200
I put 200 for two seconds.

301
00:17:23,200 --> 00:17:27,520
And now I put a variable there.

302
00:17:27,520 --> 00:17:30,040
It's actually a bit of a luxury that we have variable names in PLC.

303
00:17:30,040 --> 00:17:32,640
Some of them you still have to use memory addresses.

304
00:17:32,640 --> 00:17:38,200
This one hopefully has this tag database which lists all the variables we have to map them

305
00:17:38,200 --> 00:17:39,200
to memory address.

306
00:17:39,200 --> 00:17:44,160
So we have our di's, dq's, a bunch of timer done variables.

307
00:17:44,160 --> 00:17:48,700
And all the way at the bottom are my timer durations.

308
00:17:48,700 --> 00:17:50,320
And you can see that something's different about them.

309
00:17:50,320 --> 00:17:55,440
They have this mod start and mod end, which are addresses for a protocol called mod bus.

310
00:17:55,440 --> 00:17:59,920
So what's going on here is that obviously people wanted to wire these controllers together.

311
00:17:59,920 --> 00:18:05,240
So they developed a number of protocols where PLCs can write into each other's memory.

312
00:18:05,240 --> 00:18:09,520
And the way this particular protocol works is that you give a numeric address for certain

313
00:18:09,520 --> 00:18:12,640
variables and then they become accessible over the network.

314
00:18:12,640 --> 00:18:16,600
This was meant for other PLCs.

315
00:18:16,600 --> 00:18:18,120
But we have computers now.

316
00:18:18,120 --> 00:18:25,120
So we can pretend to be a PLC on your computer by doing pip install py mod bus.

317
00:18:25,120 --> 00:18:26,120
And I came prepared.

318
00:18:26,120 --> 00:18:28,280
So I have it already.

319
00:18:28,280 --> 00:18:31,400
So we're going to write a little bit of script to talk to the PLC.

320
00:18:31,400 --> 00:18:36,520
I'm running a bit behind, so I'm going to use that arrow up trick to autocomplete a

321
00:18:36,520 --> 00:18:38,100
number of times here.

322
00:18:38,100 --> 00:18:39,720
So we get a mod bus client.

323
00:18:39,720 --> 00:18:42,360
We connect to our PLC, which has an IP address.

324
00:18:42,360 --> 00:18:48,240
And then using this client, we can do things like read those registers.

325
00:18:48,240 --> 00:18:52,200
And I just know that I have to start at address zero and go for 12.

326
00:18:52,200 --> 00:18:53,520
And voila.

327
00:18:53,520 --> 00:18:57,480
We have our numbers that are the durations for our timers.

328
00:18:57,480 --> 00:18:58,480
That's cool.

329
00:18:58,480 --> 00:18:59,480
We can also write them.

330
00:18:59,480 --> 00:19:01,760
And I'm going to use that feature to fix the traffic light.

331
00:19:01,760 --> 00:19:06,120
Because why would pedestrians have to wait for two seconds until it even switches to

332
00:19:06,120 --> 00:19:07,120
yellow?

333
00:19:07,120 --> 00:19:09,760
Let's make that 100 milliseconds.

334
00:19:09,760 --> 00:19:14,120
By the way, that zero that's kicking around here, that's a bit of a quirk of the protocol.

335
00:19:14,120 --> 00:19:15,400
I don't have time to explain that.

336
00:19:15,400 --> 00:19:18,960
We'll just have to accept that we keep reading and writing a zero after the numbers we care

337
00:19:18,960 --> 00:19:20,800
about.

338
00:19:20,800 --> 00:19:24,440
So now I set the first variable to 10 instead of 200.

339
00:19:24,440 --> 00:19:25,780
You can read that right back.

340
00:19:25,780 --> 00:19:29,000
What that means, you press the button, it instantly goes to yellow.

341
00:19:29,000 --> 00:19:30,000
That's cool.

342
00:19:30,000 --> 00:19:31,000
We fix the traffic light.

343
00:19:31,000 --> 00:19:32,000
Pedestrians are happy.

344
00:19:32,000 --> 00:19:34,600
But word gets out that we are now the traffic engineer of our city.

345
00:19:34,600 --> 00:19:39,600
So the treasurer comes in and says, you know, we installed that red light camera, but we

346
00:19:39,600 --> 00:19:41,520
never catch anyone.

347
00:19:41,520 --> 00:19:43,280
Can we make yellow shorter?

348
00:19:43,280 --> 00:19:48,120
You're like, I don't know.

349
00:19:48,120 --> 00:19:49,120
But you're the treasurer.

350
00:19:49,120 --> 00:19:50,920
I'm going to pay my salary.

351
00:19:50,920 --> 00:19:52,880
So I guess let's make it a second.

352
00:19:52,880 --> 00:19:55,680
We go out to test.

353
00:19:55,680 --> 00:19:56,760
Yellow for one second.

354
00:19:56,760 --> 00:19:58,280
Red immediately.

355
00:19:58,280 --> 00:19:59,360
Drivers get caught.

356
00:19:59,360 --> 00:20:06,680
But the safety officer comes in and says, we keep having all these pedestrian accidents.

357
00:20:06,680 --> 00:20:11,480
Can we maybe make the time when red is on for the traffic and the don't walk is still

358
00:20:11,480 --> 00:20:14,120
on for the pedestrians a little bit longer so that there's a buffer?

359
00:20:14,120 --> 00:20:17,920
So you're like, I know that's at register address four.

360
00:20:17,920 --> 00:20:21,480
I'm going to make that four seconds for you.

361
00:20:21,480 --> 00:20:23,720
Got to try it out.

362
00:20:23,720 --> 00:20:24,720
One second of yellow.

363
00:20:24,720 --> 00:20:27,920
One, two, three, four.

364
00:20:27,920 --> 00:20:30,680
Pedestrians.

365
00:20:30,680 --> 00:20:31,680
And everyone's happy.

366
00:20:31,680 --> 00:20:33,600
City makes a lot of money from the red light camera.

367
00:20:33,600 --> 00:20:36,360
No insurance claims coming in from the pedestrian accidents.

368
00:20:36,360 --> 00:20:39,560
You have money to hire a chief data officer for your city.

369
00:20:39,560 --> 00:20:44,360
They come in and they're like, hey, so there's always these discussions about traffic light

370
00:20:44,360 --> 00:20:45,360
timing.

371
00:20:45,360 --> 00:20:46,360
Can't we use machine learning?

372
00:20:46,520 --> 00:20:50,880
And you're like, oh, man.

373
00:20:50,880 --> 00:20:52,840
So you're like, all right, let's import machine learning.

374
00:20:52,840 --> 00:20:54,120
Let's run some machine learning.

375
00:20:54,120 --> 00:20:56,600
Oh, these are some good traffic light times.

376
00:20:56,600 --> 00:21:01,000
How about we write them to the traffic light?

377
00:21:01,000 --> 00:21:02,320
So we started at zero.

378
00:21:02,320 --> 00:21:04,560
We run machine learning.

379
00:21:04,560 --> 00:21:06,320
We program into the traffic light.

380
00:21:06,320 --> 00:21:08,480
We press the button.

381
00:21:08,480 --> 00:21:12,320
Oh, that must be a case of bias in machine learning.

382
00:21:12,320 --> 00:21:18,120
It's biased towards runners because our data set was collected when the data marathon came

383
00:21:18,120 --> 00:21:19,120
through town.

384
00:21:19,120 --> 00:21:20,120
All right.

385
00:21:20,120 --> 00:21:26,240
The example's getting a bit silly, but I'm using it to make a point, obviously.

386
00:21:26,240 --> 00:21:28,920
There's a lot of discussion in industry right now.

387
00:21:28,920 --> 00:21:34,280
What's the right way to connect the low-level control programs running on a PLC?

388
00:21:34,280 --> 00:21:38,040
How to connect them to the sort of modern innovations in software engineering that often

389
00:21:38,040 --> 00:21:39,280
run in the cloud?

390
00:21:39,320 --> 00:21:45,200
And the buzzwords here are often IIOT, which stands for Industrial Internet of Things.

391
00:21:45,200 --> 00:21:49,440
Or if you're in Europe, they say Industry 4.0, but actually mean the same thing.

392
00:21:49,440 --> 00:21:55,960
And one way I like to think about it is that there are really two control loops running.

393
00:21:55,960 --> 00:22:00,920
One is the control loop that runs in the PLC and controls the field devices.

394
00:22:00,920 --> 00:22:04,360
And that runs in the sort of milliseconds per iteration cycle that interfaces with the

395
00:22:04,360 --> 00:22:08,320
physical world and does all the things that are timing critical or safety critical.

396
00:22:08,360 --> 00:22:11,480
And it really implements the laws of nature and the laws of the road.

397
00:22:11,480 --> 00:22:15,520
Like, don't show a green to both crossing traffic because you will have accidents and

398
00:22:15,520 --> 00:22:17,840
you will get sued.

399
00:22:17,840 --> 00:22:24,360
The other control loop is the one that is influencing the parameters of the inner control

400
00:22:24,360 --> 00:22:29,840
loop and can do things like adjust to the time of day, to the traffic situation elsewhere

401
00:22:29,840 --> 00:22:33,680
in the city, to maybe insights gained from data science.

402
00:22:33,680 --> 00:22:37,260
And that control loop is running much less frequently, either minutes, sometimes only

403
00:22:37,300 --> 00:22:38,820
every couple of months.

404
00:22:38,820 --> 00:22:42,980
And that's the one that has the ability to do non-real time things, things that take

405
00:22:42,980 --> 00:22:47,560
an unpredictable amount of time, talk to databases, reach out to web APIs.

406
00:22:47,560 --> 00:22:48,680
And sometimes it fails.

407
00:22:48,680 --> 00:22:53,860
And it doesn't matter because the inner control loop keeps running and everyone is safe.

408
00:22:53,860 --> 00:22:57,860
That also means that for the control loop, the small, the inner control loop running

409
00:22:57,860 --> 00:23:02,300
on the PLC, you often have a regulated release cycle where someone needs to sign off and

410
00:23:02,300 --> 00:23:06,740
certifications need to be obtained, whereas on the one that you implement in maybe your

411
00:23:06,740 --> 00:23:11,140
Python code in the higher level language, you can continue running your regular software

412
00:23:11,140 --> 00:23:17,380
release cycle with maybe biweekly sprints or whatever it is you're doing.

413
00:23:17,380 --> 00:23:19,420
Now come a couple of busy slides.

414
00:23:19,420 --> 00:23:20,760
You're not meant to read all of them.

415
00:23:20,760 --> 00:23:23,940
But we looked at Modbus and it's an OK protocol.

416
00:23:23,940 --> 00:23:28,300
You need to know weird numbers, there's zeros floating around, whatnot.

417
00:23:28,300 --> 00:23:30,700
There are many other protocols out there.

418
00:23:30,700 --> 00:23:36,340
In fact, there's a list of industrial communication protocols on Wikipedia, which has about, I

419
00:23:36,340 --> 00:23:38,060
think, 50 entries.

420
00:23:38,060 --> 00:23:43,860
And what I did here is I listed all the ones for which we have Python packages on PyPI.

421
00:23:43,860 --> 00:23:46,020
The first slide are the vendor-specific ones.

422
00:23:46,020 --> 00:23:51,060
So if you purchase a PLC from one of those vendors, you are in luck because someone has

423
00:23:51,060 --> 00:23:54,940
put in the effort to implement this in Python and you can just interface with it.

424
00:23:54,940 --> 00:23:59,700
If however you do not purchase a PLC that is supported by one of those, you have to

425
00:23:59,700 --> 00:24:04,920
go to this slide, which lists all the open standards that have been developed mostly

426
00:24:04,920 --> 00:24:08,800
for machine-to-machine communication that we can tap into.

427
00:24:08,800 --> 00:24:10,120
The list is significantly longer.

428
00:24:10,120 --> 00:24:13,560
I only include the ones for which Python packages exist.

429
00:24:13,560 --> 00:24:16,600
And it sort of gets the difficulty increases from top to bottom.

430
00:24:16,600 --> 00:24:20,440
So at the very top I have Modbus, which is like the grandpa of the protocols.

431
00:24:20,440 --> 00:24:23,280
Fortieth birthday is here.

432
00:24:23,280 --> 00:24:27,200
We've covered this and there are variants for serial port and network port.

433
00:24:27,200 --> 00:24:31,880
Then come the TCPIP-based standards, which are affectionately known as the office communications

434
00:24:31,880 --> 00:24:36,040
networking standards by the industrial automation community because you don't really have any

435
00:24:36,040 --> 00:24:37,040
real-time guarantees.

436
00:24:37,040 --> 00:24:39,960
You don't know how long it takes for the message to arrive.

437
00:24:39,960 --> 00:24:44,400
That protocol has been built for resilience against error, not for time-critical delivery

438
00:24:44,400 --> 00:24:45,400
of messages.

439
00:24:45,400 --> 00:24:48,880
There are a couple of industrial standards that do support this.

440
00:24:48,880 --> 00:24:50,160
Three of them are listed here.

441
00:24:50,160 --> 00:24:53,820
A couple others you might have to put in some extra work to build your own library.

442
00:24:53,820 --> 00:24:55,160
And it's actually not that hard.

443
00:24:55,160 --> 00:24:59,480
You get the standards document, do import socket, import C types, and you just start

444
00:24:59,480 --> 00:25:03,800
hacking away, implementing the right order of bytes to talk to the machines.

445
00:25:03,800 --> 00:25:07,200
It gets a little bit harder in the third box because those are the things where you still

446
00:25:07,200 --> 00:25:12,800
use the ethernet cable but no TCPIP, no more IP addresses for identifying other participants

447
00:25:12,800 --> 00:25:14,260
in networking.

448
00:25:14,260 --> 00:25:15,560
You can still do that.

449
00:25:15,560 --> 00:25:20,640
So first of all, I should say, there's only one protocol supported by a Python package.

450
00:25:20,640 --> 00:25:24,760
There are about 30 others that do not exist on PyPI.

451
00:25:24,760 --> 00:25:28,520
Some of them you can't because you cannot achieve the timing considerations.

452
00:25:28,560 --> 00:25:31,360
But the others you could do with sockets and C types.

453
00:25:31,360 --> 00:25:36,240
I actually learned about this by reading some of those packages mentioned in the small print

454
00:25:36,240 --> 00:25:40,240
here, raw socket pi and dnet to understand how you do networking in an environment where

455
00:25:40,240 --> 00:25:43,400
IP addresses aren't a thing, which was news to me.

456
00:25:43,400 --> 00:25:49,200
If you find yourself all the way at the bottom, sorry for you, because those are really standards

457
00:25:49,200 --> 00:25:53,300
that require custom hardware and sometimes custom types of cables.

458
00:25:53,300 --> 00:25:57,120
And your best shot, if you have to tap into that, is to purchase a conversion hardware

459
00:25:57,240 --> 00:26:00,680
or a gateway hardware that turns that traffic into network traffic for you.

460
00:26:00,680 --> 00:26:07,360
Two examples, PyADS is an implementation of Beckhoff's ADS protocol.

461
00:26:07,360 --> 00:26:08,360
Don't read all of it.

462
00:26:08,360 --> 00:26:12,520
It looks very similar to Modbus with the one difference that you can reference variables

463
00:26:12,520 --> 00:26:15,380
by name and you can subscribe to changes.

464
00:26:15,380 --> 00:26:20,200
Another one I really have to mention is OPC UA for which the amazing free OPC UA project

465
00:26:20,200 --> 00:26:21,200
exists.

466
00:26:21,200 --> 00:26:25,800
Now OPC UA is really the only one of those standards that you and I would recognize as

467
00:26:25,800 --> 00:26:28,440
having a beautiful API.

468
00:26:28,440 --> 00:26:31,060
One of the cool features about it is that it is discoverable.

469
00:26:31,060 --> 00:26:35,480
You point at the device, you connect to it, and you can discover a tree of objects that

470
00:26:35,480 --> 00:26:39,040
represent the variables and methods exposed by the device.

471
00:26:39,040 --> 00:26:43,240
I'm also mentioning this because the free OPC UA project has a number of Python packages

472
00:26:43,240 --> 00:26:48,760
in it that implement the standard, a client and server, another one with client and server

473
00:26:48,760 --> 00:26:53,440
and pure async I.O. and one called OPC UA client which is this GUI based thing that

474
00:26:53,440 --> 00:26:54,680
I have on the screen here.

475
00:26:54,880 --> 00:26:58,000
It's very actively maintained and really welcomes participation.

476
00:26:58,000 --> 00:27:00,520
If you're into this kind of stuff, you should check it out.

477
00:27:02,120 --> 00:27:03,720
I've reviewed 40-ish packages.

478
00:27:03,720 --> 00:27:06,600
I'm also running out of time in this talk so I'm going to blast through this.

479
00:27:06,600 --> 00:27:08,480
A couple of things that really surprised me.

480
00:27:08,480 --> 00:27:10,560
There's a lot of activity recently.

481
00:27:10,560 --> 00:27:13,080
Many packages have been started in the last year.

482
00:27:13,080 --> 00:27:14,900
Many of them are actively maintained.

483
00:27:14,900 --> 00:27:19,560
Many Python 3 only, very few Python 2 only, which really tells me that this is a space

484
00:27:19,560 --> 00:27:24,180
that's gaining traction compared to when I first did automation with Python about five

485
00:27:24,180 --> 00:27:25,540
years ago.

486
00:27:25,540 --> 00:27:28,780
Most of the activity is based in Europe which influences which brands are supported and

487
00:27:28,780 --> 00:27:32,780
which protocols because there are some regional preferences between Europe and America mostly

488
00:27:32,780 --> 00:27:38,660
on what's supported so you might see a preference towards things that are popular in Europe.

489
00:27:38,660 --> 00:27:42,460
And just surprising to me, a lot of overlap with the home automation community which I

490
00:27:42,460 --> 00:27:46,220
guess I was just totally not aware of before preparing for this talk.

491
00:27:46,220 --> 00:27:47,220
Cool.

492
00:27:47,220 --> 00:27:49,060
Talked about Python.

493
00:27:49,060 --> 00:27:53,820
So whenever you talk about industrial automation, someone comes out of the Woodworks and asks,

494
00:27:53,820 --> 00:27:55,020
I have a Raspberry Pi at home.

495
00:27:55,020 --> 00:27:56,020
It cost me 30 bucks.

496
00:27:56,020 --> 00:27:58,220
It can do all of the things you just said.

497
00:27:58,220 --> 00:28:02,980
And the canonical answer to that is, no, it can't.

498
00:28:02,980 --> 00:28:06,620
Your Raspberry Pi will probably die in places that PLCs work because it's too cold, too

499
00:28:06,620 --> 00:28:08,780
hot, too humid, too salty.

500
00:28:08,780 --> 00:28:11,620
It doesn't work next to welding machines because of electromagnetic interference.

501
00:28:11,620 --> 00:28:15,700
It doesn't have ESD protection so you blow up the chemicals factory, plug in the sensor

502
00:28:15,700 --> 00:28:18,460
the wrong way around, you fry your Raspberry Pi.

503
00:28:18,460 --> 00:28:22,180
Doesn't even mount to those DIN rails and work with the power supplies always used in

504
00:28:22,340 --> 00:28:23,820
most factories.

505
00:28:23,820 --> 00:28:26,660
And the manufacturer doesn't really give you supply chain guarantees.

506
00:28:26,660 --> 00:28:30,420
If you actually buy a PLC, you often have a guarantee that spare parts are available

507
00:28:30,420 --> 00:28:31,780
for several decades.

508
00:28:31,780 --> 00:28:37,500
So currently you see dates in the late 2020s and 2030s on manufacturer websites.

509
00:28:37,500 --> 00:28:38,500
That's on the hardware side.

510
00:28:38,500 --> 00:28:42,140
On the software side, I touched on this whole real time story a couple of times.

511
00:28:42,140 --> 00:28:46,700
PLCs are designed such that when you execute the code, no garbage collector or any of that

512
00:28:46,700 --> 00:28:47,900
nonsense comes in.

513
00:28:48,020 --> 00:28:53,260
You have guarantees about how long every instruction takes and it's actually used in the advertisements

514
00:28:53,260 --> 00:28:57,500
and data sheets of PLCs for what these cycle times are.

515
00:28:57,500 --> 00:29:03,220
All the other things are really reliant on the fact that there is this real time guarantee.

516
00:29:03,220 --> 00:29:06,580
And now comes the plot twist.

517
00:29:06,580 --> 00:29:09,780
Maybe your Raspberry Pi is a PLC.

518
00:29:09,780 --> 00:29:15,740
So the next two slides list a few projects that actually give you traits of PLCs in Raspberry

519
00:29:15,740 --> 00:29:16,740
Pis.

520
00:29:16,780 --> 00:29:20,260
Okay, first, if you don't care about any of the things on the previous slide, use your

521
00:29:20,260 --> 00:29:22,180
Raspberry Pi as is.

522
00:29:22,180 --> 00:29:25,100
If you do care about them, though, you might be interested in these things.

523
00:29:25,100 --> 00:29:30,060
The very popular one to turn your Raspberry Pi into a PLC at least software wise is Codesys

524
00:29:30,060 --> 00:29:31,540
for Raspberry Pi.

525
00:29:31,540 --> 00:29:35,860
Now, Codesys is a package that exists for many types of PLCs and hardwares.

526
00:29:35,860 --> 00:29:39,020
And the way it works is that they developed a real time kernel that lives next to your

527
00:29:39,020 --> 00:29:43,980
main operating system, in this case, Raspbian, that reserves some of the CPU capacity for

528
00:29:43,980 --> 00:29:44,980
real time computations.

529
00:29:45,540 --> 00:29:47,420
So they can have these real time guarantees.

530
00:29:47,420 --> 00:29:52,020
And then you use their free editor to write code that is compatible with that real time

531
00:29:52,020 --> 00:29:53,020
environment.

532
00:29:53,020 --> 00:29:55,860
All the other projects on here do the same.

533
00:29:55,860 --> 00:29:59,300
Open PLC is a very cool open source project actually written in Python that has an editor

534
00:29:59,300 --> 00:30:01,300
and one of those real time environments.

535
00:30:01,300 --> 00:30:02,380
So that's worth checking out.

536
00:30:02,380 --> 00:30:06,460
And PiLC is slightly more limited in scope because it tries to emulate a proprietary

537
00:30:06,460 --> 00:30:10,180
Siemens programming language but also has a runtime for Raspberry Pi.

538
00:30:10,180 --> 00:30:13,980
If you need the hardware stuff, you've got some products too.

539
00:30:13,980 --> 00:30:15,620
Two options really broadly speaking.

540
00:30:15,620 --> 00:30:19,460
You can either take the vanilla Raspberry Pi and add an add-on module to it that brings

541
00:30:19,460 --> 00:30:25,380
all the cool stuff you need like a rugged power supply, isolated I.O., support for various

542
00:30:25,380 --> 00:30:26,900
canvas and stuff like that.

543
00:30:26,900 --> 00:30:30,500
And that's what Pi Extend and Anduino, which I found out about really late, which there's

544
00:30:30,500 --> 00:30:31,980
no details, do.

545
00:30:31,980 --> 00:30:34,880
So they add an add-on to your existing Raspberry Pi.

546
00:30:34,880 --> 00:30:40,220
The other option that I found one manufacturer doing, that's the Revolution Pi product,

547
00:30:40,220 --> 00:30:44,380
they actually do not take the standard Raspberry Pi that you can order on the internet and

548
00:30:44,380 --> 00:30:48,580
instead they only take the compute chip from it and replace everything else that's on the

549
00:30:48,580 --> 00:30:53,420
Raspberry Pi board with components that meet the requirements of a PLC.

550
00:30:53,420 --> 00:30:56,700
So they end up with a new single board computer that doesn't look like a Raspberry Pi but

551
00:30:56,700 --> 00:31:03,340
can fit into one of those cool enclosures that look exactly like a PLC.

552
00:31:03,340 --> 00:31:05,940
If I had time, someone could come up and ask the Arduino question.

553
00:31:05,940 --> 00:31:11,580
I would give a very similar answer to that but slightly fewer products on that list.

554
00:31:11,580 --> 00:31:15,220
I'm out of time though and everyone says, hey, John, time's up, we want to have lunch,

555
00:31:15,220 --> 00:31:18,380
but what should I do next if I want to learn more about this PLC stuff?

556
00:31:18,380 --> 00:31:22,540
So I prepared this last slide for you, which on the left lists things that you might want

557
00:31:22,540 --> 00:31:28,500
to try out next and next to it on the right has a couple of products and projects listed

558
00:31:28,500 --> 00:31:30,340
that might move you in this direction.

559
00:31:30,340 --> 00:31:34,420
Also, there are a couple of appendix slides that you can look up online with longer lists

560
00:31:34,420 --> 00:31:35,420
of things.

561
00:31:35,420 --> 00:31:40,260
So from everything like free online simulators for ladder logic to using equipment that's

562
00:31:40,260 --> 00:31:44,060
actually used in real factories, which you often can buy on eBay.

563
00:31:44,060 --> 00:31:47,500
One word of warning on those, if you want to work with tools from the market leaders,

564
00:31:47,500 --> 00:31:51,580
which in the US is Alan Bradley and in Europe and most of the rest of the world is Siemens

565
00:31:51,580 --> 00:31:56,740
and sometimes Mitsubishi, they can use software as a revenue source, so they charge you big

566
00:31:56,740 --> 00:31:58,860
license fees for the programming environment.

567
00:31:58,860 --> 00:32:02,980
If you go for smaller vendors, you often get the programming environment for free, sometimes

568
00:32:02,980 --> 00:32:03,980
with a simulator.

569
00:32:03,980 --> 00:32:04,980
All right.

570
00:32:04,980 --> 00:32:05,980
That's my last slide.

571
00:32:05,980 --> 00:32:11,180
I don't have time for questions, but I did schedule an open space this afternoon where

572
00:32:11,180 --> 00:32:16,500
everyone's welcome to stop by, ask questions, play with the traffic light and the PLC.

573
00:32:16,500 --> 00:32:20,380
Obviously, if you're watching this on YouTube, you can't come, so my contact details are

574
00:32:20,380 --> 00:32:21,820
also on the slide.

575
00:32:21,820 --> 00:32:26,260
And one last thing, my work has given me a lot of slack recently for preparing all this

576
00:32:26,260 --> 00:32:28,740
stuff, time off and things.

577
00:32:28,940 --> 00:32:34,140
I lead a team of automation engineers using Python to automate a biotech factory.

578
00:32:34,140 --> 00:32:36,220
No ladder logic involved.

579
00:32:36,220 --> 00:32:37,620
And we are currently five people.

580
00:32:37,620 --> 00:32:41,780
We're getting ready to hire our six, and we still have a slot open for a summer intern,

581
00:32:41,780 --> 00:32:43,060
if you're kind of running late.

582
00:32:43,060 --> 00:32:45,860
So if that's interesting, you should also come talk to me.

583
00:32:45,860 --> 00:32:46,860
That's all from me.

584
00:32:46,860 --> 00:32:47,860
Thank you.

585
00:32:47,860 --> 00:32:48,860
Applause.

