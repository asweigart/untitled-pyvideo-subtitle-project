1
00:00:00,000 --> 00:00:10,680
All right. It is just after 1.20. So I think we can go ahead and get started if everybody

2
00:00:10,680 --> 00:00:20,440
feels ready. There are first of all, this is writing about Python. I hope you are all

3
00:00:20,440 --> 00:00:26,320
here for this workshop. If not, they did move the rooms around. So it's been a little bit

4
00:00:26,320 --> 00:00:34,760
confusing. I have a couple of tutorial housekeeping notes they have asked me to share. The afternoon's

5
00:00:34,760 --> 00:00:39,640
break will be at 3 p.m. in the lobby. We'll break at that point so that everybody can

6
00:00:39,640 --> 00:00:46,400
go get snacks. There are power outlets around the room, but probably not enough. So please

7
00:00:46,400 --> 00:00:51,600
share the outlets. And there is a survey link for this tutorial, which I really hope you

8
00:00:51,600 --> 00:01:01,920
wait until after the tutorial to fill out. But the link is up here. And I will just leave it here for anybody to grab.

9
00:01:01,920 --> 00:01:12,440
All right. So let's start with some introductions. I'm Thursday Bram. I've been writing about technology for over a decade.

10
00:01:12,440 --> 00:01:21,240
I've written blog posts, case studies, documentation, ebooks, and so very many social media posts, mostly about

11
00:01:21,280 --> 00:01:27,960
technical topics. I'm the editor of the Responsible Communications Style Guide, which covers how to write about identity in the

12
00:01:27,960 --> 00:01:35,440
context of technology. And through that project, I've worked with a bunch of amazing people who, some of which are in the

13
00:01:35,440 --> 00:01:43,960
Python community, some of which come from other tech communities. I've also written the Python Style Supplement to the

14
00:01:44,000 --> 00:01:49,960
Responsible Communications Style Guide, which is about writing about Python inclusively. And that was released a week and a

15
00:01:50,000 --> 00:02:00,240
half ago. So before I got here, I've been a member of PyLadies. I co-organized some conferences. You may have seen me around.

16
00:02:01,120 --> 00:02:06,800
And since we're going to be spending the next three hours together, I was thinking we could go around the room and introduce

17
00:02:06,800 --> 00:02:15,440
ourselves so that I get an idea of who you are. And if you want to share any sort of writing projects you're already working

18
00:02:15,440 --> 00:02:22,880
on or what you're thinking about writing next, that would be awesome. Can we just start up here with you?

19
00:02:24,120 --> 00:02:34,040
My name is Andy Trosek. I'm a book developer, primarily writing projects on technical documentation for my team and other teams.

20
00:02:36,560 --> 00:02:37,060
Awesome.

21
00:02:37,380 --> 00:02:45,780
Hi, I'm Anthony Taylor Collins. I'm a lead technical writer for Salesforce. I'm here, I'm going to be demonstrating how to do

22
00:02:45,780 --> 00:02:56,180
the Salesforce Py docs, which I just recently updated. We're using Receptor Text and Spanx to build those. It's an open

23
00:02:56,180 --> 00:03:03,380
source project that we have internally. Other than that, I do the internal Salesforce documentation for deploying the Salesforce

24
00:03:03,380 --> 00:03:04,500
application to this data.

25
00:03:13,860 --> 00:03:16,100
Okay, we'll work on that.

26
00:03:17,900 --> 00:03:22,940
My name is Andy Knight. I'm a software engineer and test for precision weather in Raleigh, North Carolina. I blog at

27
00:03:22,940 --> 00:03:24,340
automationpanda.com.

28
00:03:34,020 --> 00:03:37,020
Hi, I'm a software engineer. I'm trying to find nice patterns and help with...

29
00:03:37,020 --> 00:03:37,520
Great.

30
00:03:38,940 --> 00:03:45,100
My name is Lila. I'm a writer. I'm a head writer and I don't like to be in the media. But if you don't mind, I'll

31
00:03:45,100 --> 00:03:51,860
like to be in the media. I'm going to be writing for the world's super-wide writing studio that I'm going to be writing for.

32
00:03:51,860 --> 00:03:55,140
Great. We can do the sneak around.

33
00:03:55,140 --> 00:03:55,660
Yeah.

34
00:04:11,940 --> 00:04:12,460
Great.

35
00:04:25,140 --> 00:04:36,900
I'm Sean Peruggia, a developer and I need to write a lot more reading.

36
00:04:40,900 --> 00:04:49,900
I'm Chris Cordero. I'm also a web developer. I write my own blog, which I don't really think quite enough as I should.

37
00:04:49,900 --> 00:05:04,220
I'm Mike Alpera. I'm a developer at Markupork. We are just starting our journey down becoming a strong Python

38
00:05:04,220 --> 00:05:10,540
user and best practices and competition.

39
00:05:10,540 --> 00:05:11,540
Awesome.

40
00:05:11,540 --> 00:05:23,540
Hi, I'm Derek from India. I'm a research engineer for an engineering program in India. Currently, I have a

41
00:05:23,540 --> 00:05:25,540
project that I'm writing for a software.

42
00:05:25,540 --> 00:05:38,540
Hello, everyone. I'm Ashish Shadu. I'm a lecturer at the University of Kerala. I take astrogramming courses there.

43
00:05:38,540 --> 00:05:49,540
I think Sean Peruggia is supposed to understand things and maybe learn about how to write up and under.

44
00:05:50,540 --> 00:06:02,540
I'm Dan Aftar. I work for XR and Electronics. I'm a product marketing manager. I train materials. I lead Python for automation and BI.

45
00:06:02,540 --> 00:06:08,540
I'm a tutorials product marketing manager. I write papers.

46
00:06:08,540 --> 00:06:09,540
Awesome.

47
00:06:09,540 --> 00:06:33,540
I'm Sam. I can't read, write, and write. I'm a product engineer for one of our systems teams. A big part of my responsibility is writing end user documentation.

48
00:06:33,540 --> 00:06:46,540
As we move to doing a lot more of our tools in Python, I thought it might be a helpful thing because I'm not classically trained in either development or documentation when I'm writing.

49
00:06:46,540 --> 00:06:50,540
I have known the skills from before I left.

50
00:06:50,540 --> 00:07:04,540
I'm Renan Wichnil. I'm a red team operator for the DOD. I'm awful at writing. It's the big force of our jobs. We try to pass it off to new people. That's why I try to scoop up every technical writing project.

51
00:07:20,540 --> 00:07:41,540
I'm Chris. I'm a software engineer at Light Media. I'm an action engineer for the company in Python. I write both of them. I've always been a fan of documentation, but I wanted to be more into talking.

52
00:07:41,540 --> 00:07:51,540
I'm Aaron. I work with Blackhorne.

53
00:07:51,540 --> 00:08:00,540
I'm Holly. I work for Jays and the software developer.

54
00:08:00,540 --> 00:08:24,540
My name is Renan. I work at Hotscicle. I also work for the community. I also blog under the name of the group.

55
00:08:54,540 --> 00:09:11,540
I'm Demi. I'm a software developer at Percula. I'm trying to get better at technical writing. I'm involved in the software developer team at the company. I'd like to explain how Python's really worked for developers.

56
00:09:11,540 --> 00:09:30,540
My name is Brugel. I work as a developer in the network of Kdoch and Hotscicle. I'm a folder designer. I don't write documentation.

57
00:09:30,540 --> 00:09:58,540
My name is Charles Hill. I'm an assistant at the Landry Research Center. I'm a deputy project scientist for the Stratocenter. I'm an active coordinator at the ISS and a principal investigator at the University of California.

58
00:09:58,540 --> 00:10:19,540
We are doing a lot of QuickBooks, science data analysis, and Python for science algorithm development. I'm a big fan of auto generating documentation that speaks.

59
00:10:19,540 --> 00:10:38,540
I'm a new student at the University of California. I'm not yet a developer. My team has developed some software documentation on Python and Python. We don't have any different systems, so I'm not sure if we can do that.

60
00:10:38,540 --> 00:11:06,540
My name is John Hanson. I'm the director of IT at the University of California. I'm a professor of Linguistics at Homestead State University in New Jersey. I'd like to pick up writing from my students.

61
00:11:08,540 --> 00:11:36,540
My name is Bill Coleman. I came from Pittsburgh today. I'm an EIS analyst in the programming industry. I figured I'd take this class, but it didn't walk too well.

62
00:11:36,540 --> 00:11:51,540
My name is Michael. I'm an EIS programmer. I'm a professor of Linguistics at the University of California.

63
00:11:51,540 --> 00:11:55,460
My name is Thomas. I'm working on my

64
00:12:21,540 --> 00:12:51,540
My name is Mark. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python. I'm a developer of Python

65
00:12:51,540 --> 00:13:03,020
and they have a lot of projects ongoing and they have to do a lot of like some time documentation to start with apart from that part

66
00:13:21,540 --> 00:13:28,540
I think it's fine, but apparently it's not in the right style.

67
00:13:28,540 --> 00:13:35,540
It's not in the right time and place.

68
00:13:35,540 --> 00:13:40,540
I am a dog.

69
00:13:40,540 --> 00:13:45,540
I'm a dog.

70
00:13:45,540 --> 00:13:50,540
I'm a dog.

71
00:13:50,540 --> 00:13:55,540
I'm a dog.

72
00:13:55,540 --> 00:14:00,540
I'm a dog.

73
00:14:00,540 --> 00:14:05,540
I'm a dog.

74
00:14:06,540 --> 00:14:09,540
So, I'm actually an engineer.

75
00:14:09,540 --> 00:14:14,540
And I am a documentation for the product line on the card.

76
00:14:14,540 --> 00:14:19,540
So, even though it's not necessarily about coding, the technical.

77
00:14:19,540 --> 00:14:24,540
What's part of our product?

78
00:14:24,540 --> 00:14:29,540
I have Peter in the front.

79
00:14:29,540 --> 00:14:33,540
No worries.

80
00:14:33,540 --> 00:14:35,540
There's some chairs up here as well, a few.

81
00:14:35,540 --> 00:14:40,240
No worries then.

82
00:14:40,240 --> 00:14:41,240
All right.

83
00:14:41,240 --> 00:14:43,980
So there's definitely going to be something for all of you in

84
00:14:43,980 --> 00:14:45,480
this workshop.

85
00:14:45,480 --> 00:14:48,580
We're not going to dive too deeply into documentation

86
00:14:48,580 --> 00:14:51,500
itself, but we are going to talk about a lot of things that

87
00:14:51,500 --> 00:14:53,600
affect documentation.

88
00:14:53,600 --> 00:14:57,280
And I really like starting anything like this by telling

89
00:14:57,280 --> 00:15:00,480
you exactly what I'm going to tell you.

90
00:15:00,480 --> 00:15:04,040
I think it's the easiest way to get started.

91
00:15:04,040 --> 00:15:08,480
So in this workshop, we're going to learn how to effectively

92
00:15:08,480 --> 00:15:10,580
write about Python.

93
00:15:10,580 --> 00:15:13,020
We're going to be talking about some general mechanics of

94
00:15:13,020 --> 00:15:16,320
writing on technical topics as well as some Python specific

95
00:15:16,320 --> 00:15:20,020
topics, which include major pitfalls in Python

96
00:15:20,020 --> 00:15:23,880
communication, common Python audiences, strategies for

97
00:15:23,880 --> 00:15:28,440
editing and testing content, and writing opportunities in

98
00:15:28,440 --> 00:15:29,740
our community.

99
00:15:29,780 --> 00:15:31,980
We're going to do a couple of exercises to practice

100
00:15:31,980 --> 00:15:35,380
strategies, though they'll be a little bit different than the

101
00:15:35,380 --> 00:15:38,280
average workshop exercise at PyCon.

102
00:15:38,280 --> 00:15:41,840
You will not be writing any code in here.

103
00:15:41,840 --> 00:15:43,740
We're going to write pros instead.

104
00:15:43,740 --> 00:15:47,540
So this may be a little bit different.

105
00:15:47,540 --> 00:15:49,780
Before we get started, I also want to note a couple of

106
00:15:49,780 --> 00:15:52,280
specific topics that I'm going to cover that could be

107
00:15:52,280 --> 00:15:55,080
uncomfortable for some audiences.

108
00:15:55,080 --> 00:15:58,440
We're going to talk a little bit about race, gender, ability,

109
00:15:58,440 --> 00:16:03,140
and age, along with ways Python community members have been

110
00:16:03,140 --> 00:16:04,640
marginalized in the past.

111
00:16:04,640 --> 00:16:07,880
All right.

112
00:16:07,880 --> 00:16:10,980
So Python and pros.

113
00:16:10,980 --> 00:16:13,880
This is where I live.

114
00:16:13,880 --> 00:16:17,400
And I'm so glad all of you want to hear about it.

115
00:16:17,400 --> 00:16:22,000
So the Python community as a whole talks more about

116
00:16:22,000 --> 00:16:24,980
communication than a lot of our counterparts.

117
00:16:24,980 --> 00:16:27,980
I have a personal theory about this.

118
00:16:28,040 --> 00:16:31,580
My theory is that Python has kind of a special status in a

119
00:16:31,580 --> 00:16:33,040
lot of newsrooms.

120
00:16:33,040 --> 00:16:37,440
So a lot of journalists use it for data journalism, for web

121
00:16:37,440 --> 00:16:38,880
apps, that sort of thing.

122
00:16:38,880 --> 00:16:42,040
But I also think that Django's development is a really big

123
00:16:42,040 --> 00:16:43,980
factor in this.

124
00:16:43,980 --> 00:16:47,780
One of the most widely used Python frameworks came directly

125
00:16:47,780 --> 00:16:52,140
out of a newsroom, out of a daily newspaper.

126
00:16:52,140 --> 00:16:55,180
So as a result, or a little bit better, I like to think than

127
00:16:55,180 --> 00:16:57,820
some other communities about our documentation.

128
00:16:57,820 --> 00:17:02,920
We've got decades, actually, of good examples to build from.

129
00:17:02,920 --> 00:17:06,260
We've got some really great trained communicators in our

130
00:17:06,260 --> 00:17:10,720
community already who we can use as models.

131
00:17:10,720 --> 00:17:14,460
And we have some tools that can help us writing pros as much as

132
00:17:14,460 --> 00:17:17,580
they kind of help us with writing code.

133
00:17:17,580 --> 00:17:21,560
But writing code is definitely a different process

134
00:17:21,560 --> 00:17:23,680
than writing pros.

135
00:17:23,680 --> 00:17:27,280
One of the biggest differences is in the needs of audiences

136
00:17:27,280 --> 00:17:28,640
for each.

137
00:17:28,640 --> 00:17:33,320
The primary audience for Python code is the Python interpreter.

138
00:17:33,320 --> 00:17:36,440
It's a format intended to be readable by machines.

139
00:17:36,440 --> 00:17:39,580
We talk about the readability of our code in this community a

140
00:17:39,580 --> 00:17:44,380
lot because we value being able to understand our own code

141
00:17:44,380 --> 00:17:47,040
without mechanical intervention.

142
00:17:47,040 --> 00:17:53,980
But it's still written first for an audience that is not human.

143
00:17:53,980 --> 00:17:57,940
So we value human readable code because we humans are

144
00:17:57,940 --> 00:18:02,440
responsible for creating it, maintaining it, and our future

145
00:18:02,440 --> 00:18:05,980
selves always thank us for clear and understandable code.

146
00:18:05,980 --> 00:18:10,240
But they really, our future selves really like us when we

147
00:18:10,240 --> 00:18:15,480
document things, not just leaving code for them to look at.

148
00:18:15,480 --> 00:18:21,980
So humans are a secondary audience for Python code.

149
00:18:21,980 --> 00:18:25,440
Most people who will look at code have at least a little bit

150
00:18:25,440 --> 00:18:28,180
of a passing familiarity with Python, a little bit of

151
00:18:28,180 --> 00:18:29,780
technical knowledge.

152
00:18:29,780 --> 00:18:33,080
To get to the point where you're looking at actual code, you kind

153
00:18:33,080 --> 00:18:35,680
of have to have that knowledge.

154
00:18:35,680 --> 00:18:40,780
But pros in comparison is much more accessible to humans.

155
00:18:40,780 --> 00:18:46,040
Humans without technical knowledge can come across pros

156
00:18:46,040 --> 00:18:49,740
much more easily and understand it than code.

157
00:18:49,800 --> 00:18:55,680
So as we write for humans first, we want to keep that in mind

158
00:18:55,680 --> 00:18:59,100
that we are talking about audiences, about humans who are

159
00:18:59,100 --> 00:19:01,080
going to interact with this.

160
00:19:01,080 --> 00:19:05,640
And I kind of like that better than writing code because humans

161
00:19:05,640 --> 00:19:09,800
give much clearer and much more useful feedback than error.

162
00:19:12,040 --> 00:19:18,280
So we're going to do a deep dive into writing pros specifically.

163
00:19:19,020 --> 00:19:24,620
So let's talk about the pitfalls of writing about Python.

164
00:19:24,620 --> 00:19:28,540
As I worked on the Python style supplement, I conducted surveys

165
00:19:28,540 --> 00:19:32,040
and interviews with a bunch of members of the Python community.

166
00:19:32,040 --> 00:19:36,480
We talked about where they get their information, what books

167
00:19:36,480 --> 00:19:39,840
and blogs and other materials they rely on.

168
00:19:39,840 --> 00:19:43,220
And at the same time, I took that opportunity to talk to these

169
00:19:43,220 --> 00:19:48,120
folks about what problems they had with reading about Python.

170
00:19:48,180 --> 00:19:52,420
What issues made learning and using Python harder for them.

171
00:19:52,420 --> 00:19:56,660
And there are four issues that I heard and saw over and over

172
00:19:56,660 --> 00:19:58,620
and over again.

173
00:19:58,620 --> 00:20:02,560
And those issues are right here.

174
00:20:02,560 --> 00:20:06,720
Going through a tutorial, and it won't work because I'm using

175
00:20:06,720 --> 00:20:11,480
Python 3 and the tutorial writer used Python 2.7, but there was

176
00:20:11,480 --> 00:20:15,820
no indication anywhere on the tutorial.

177
00:20:15,820 --> 00:20:19,580
The writer basically told me to go read the code without giving

178
00:20:19,580 --> 00:20:22,920
any context for what that code does and just assumed that I

179
00:20:22,920 --> 00:20:27,360
would be able to figure out what was going on.

180
00:20:27,360 --> 00:20:31,620
There's a question of what all of our acronyms and jargon mean.

181
00:20:31,620 --> 00:20:37,780
I am particularly entertained by how many variations of the

182
00:20:37,780 --> 00:20:45,220
letter PY and PI there are in our community.

183
00:20:45,220 --> 00:20:48,520
Trying to get somebody to tell the difference between these

184
00:20:48,520 --> 00:20:53,420
three without any additional information is incredibly

185
00:20:53,420 --> 00:20:55,420
difficult.

186
00:20:55,420 --> 00:20:59,380
And then lastly here, I can't find anything written about a

187
00:20:59,380 --> 00:21:01,080
particular Python project.

188
00:21:01,080 --> 00:21:04,660
So if I'm looking at a library or framework that may have some

189
00:21:04,660 --> 00:21:09,060
documentation but may not have the documentation I need.

190
00:21:09,060 --> 00:21:12,960
So as writers, we want to avoid these pitfalls.

191
00:21:12,960 --> 00:21:15,960
But that version of them, I'm sorry about that.

192
00:21:15,960 --> 00:21:18,260
First question, can we ask questions while you're doing this?

193
00:21:18,260 --> 00:21:19,260
Yeah.

194
00:21:19,260 --> 00:21:23,020
Okay, the second question is, just raise your hand if you know

195
00:21:23,020 --> 00:21:26,420
the difference between these three.

196
00:21:26,420 --> 00:21:28,800
So I can answer that.

197
00:21:28,800 --> 00:21:30,800
Yeah.

198
00:21:32,100 --> 00:21:36,760
So these are rewritten from a more writerly perspective so we

199
00:21:36,760 --> 00:21:40,800
can actually talk about them and act on them rather than rely on

200
00:21:40,800 --> 00:21:42,760
a reader's approach.

201
00:21:42,760 --> 00:21:48,020
So as we're writing, we want to make sure that we're telling our

202
00:21:48,020 --> 00:21:51,220
readers which versions of Python and other dependencies we're

203
00:21:51,220 --> 00:21:52,600
using.

204
00:21:52,600 --> 00:21:55,720
And you may hear me talk about that a lot because that is one of

205
00:21:55,720 --> 00:21:56,720
my pet peeves.

206
00:21:56,720 --> 00:22:00,800
I cannot tell you how many times I have like gotten a submission

207
00:22:00,800 --> 00:22:04,160
of a tutorial to look at or something like that and somebody

208
00:22:04,160 --> 00:22:08,020
has talked about how great their Python tutorial is.

209
00:22:08,020 --> 00:22:10,820
But when I look at it, I can't tell you if it's for two, seven

210
00:22:10,820 --> 00:22:15,020
or three, not on a surface glance and a newer user definitely

211
00:22:15,020 --> 00:22:17,580
won't be able to.

212
00:22:17,580 --> 00:22:20,560
We also want to create context for our code.

213
00:22:20,560 --> 00:22:23,080
Even sample code is not self-documenting.

214
00:22:23,080 --> 00:22:27,120
We have to put some words around the code for our human readers

215
00:22:27,120 --> 00:22:30,080
because they're not going to respond to that material in the

216
00:22:30,080 --> 00:22:32,980
same way that machines are.

217
00:22:32,980 --> 00:22:36,120
We're also going to need to explain and disambiguate the

218
00:22:36,120 --> 00:22:40,620
jargon that is how we talk about Python.

219
00:22:40,680 --> 00:22:47,680
We have a lot of very specific terms that we use within Python

220
00:22:47,680 --> 00:22:51,480
but that are used different ways outside of the Python community

221
00:22:51,480 --> 00:22:54,980
which can change what shows up in search results.

222
00:22:54,980 --> 00:22:59,020
It can change who's looking at what we're building.

223
00:22:59,020 --> 00:23:01,720
One of my favorite examples is if you've seen the Pallets

224
00:23:01,720 --> 00:23:05,480
project, if you attempt to Google just for like Pallets

225
00:23:05,480 --> 00:23:10,480
project, you get pages of Pinterest projects of taking a

226
00:23:10,480 --> 00:23:14,680
part of shipping pallets and putting them back together

227
00:23:14,680 --> 00:23:15,680
again.

228
00:23:15,680 --> 00:23:21,680
So it is not easy to figure out that you're looking for a Python

229
00:23:21,680 --> 00:23:24,340
tool unless you have a little bit more of that context,

230
00:23:24,340 --> 00:23:27,180
that disambiguation.

231
00:23:27,180 --> 00:23:33,840
We're also looking at how we get resources to create and promote

232
00:23:33,840 --> 00:23:37,820
new writing, especially on open source projects.

233
00:23:37,820 --> 00:23:43,520
Open source projects sometimes suffer from poor documentation

234
00:23:43,520 --> 00:23:47,460
because there's just not resources to throw at it.

235
00:23:47,460 --> 00:23:52,220
Writing is something that takes time and often money.

236
00:23:52,220 --> 00:23:56,320
So we're going to go deeper into these pitfalls but I want you to

237
00:23:56,320 --> 00:23:57,920
keep these in mind.

238
00:23:57,920 --> 00:24:02,580
And I am also going to add one more pitfall to the list.

239
00:24:02,580 --> 00:24:06,820
I want to suggest that you think very carefully about setting

240
00:24:06,820 --> 00:24:12,320
your own expectations about what Python programmers know at

241
00:24:12,320 --> 00:24:16,620
different points in their careers.

242
00:24:16,620 --> 00:24:20,560
Python programmers can have a wide variety of knowledge.

243
00:24:20,560 --> 00:24:24,060
So let's talk about that one first.

244
00:24:24,060 --> 00:24:28,720
So when we're planning what we're going to write,

245
00:24:28,720 --> 00:24:31,920
we need to know who we're writing for.

246
00:24:31,920 --> 00:24:35,580
And within the Python community, we have loads of options.

247
00:24:35,580 --> 00:24:40,140
The Python community is not just one giant homogenous whole.

248
00:24:40,140 --> 00:24:44,180
Even if we're just talking about the Python skills individuals

249
00:24:44,180 --> 00:24:48,440
might have, we're talking about a range starting from people who

250
00:24:48,440 --> 00:24:51,140
copy and paste Python scripts without a clue of what they're

251
00:24:51,140 --> 00:24:55,680
doing all the way through to folks who have doctorates and

252
00:24:55,680 --> 00:24:58,620
other advanced degrees in computer science and understand

253
00:24:58,620 --> 00:25:01,780
all the bells and whistles under the hood.

254
00:25:01,840 --> 00:25:06,080
So writing something that is useful to every Python programmer

255
00:25:06,080 --> 00:25:09,580
on that spectrum is hard.

256
00:25:09,580 --> 00:25:11,620
It's also kind of rare.

257
00:25:11,620 --> 00:25:15,180
I'm a professional writer who writes about these topics a lot

258
00:25:15,180 --> 00:25:18,780
and I almost never am writing something for the entire Python

259
00:25:18,780 --> 00:25:20,420
community.

260
00:25:20,420 --> 00:25:24,140
Instead, I write for smaller sections of that spectrum.

261
00:25:24,140 --> 00:25:26,880
Sometimes I'll rewrite the material in different ways so

262
00:25:26,880 --> 00:25:30,680
that different skill levels can access it,

263
00:25:30,680 --> 00:25:33,580
make it useful to different audiences.

264
00:25:33,580 --> 00:25:37,840
But usually I have a specific group in mind that I want to be

265
00:25:37,840 --> 00:25:41,440
able to use a tutorial or a piece of documentation and I

266
00:25:41,440 --> 00:25:44,220
need to know what they're coming in with,

267
00:25:44,220 --> 00:25:46,780
what information they might already have.

268
00:25:46,780 --> 00:25:50,380
So talking about these differences in the abstract is

269
00:25:50,380 --> 00:25:51,640
kind of difficult.

270
00:25:51,640 --> 00:25:55,980
So let's talk about this in a more concrete way.

271
00:25:55,980 --> 00:25:58,320
So these are personas.

272
00:25:58,320 --> 00:26:00,580
These are a few different personas that we can find in the

273
00:26:00,580 --> 00:26:01,940
Python community.

274
00:26:01,940 --> 00:26:04,880
They are entirely made up.

275
00:26:04,880 --> 00:26:08,040
But we can talk about how each of these personas would respond

276
00:26:08,040 --> 00:26:10,280
to different types of writing.

277
00:26:10,280 --> 00:26:13,640
This is a concept that actually comes out of marketing because I

278
00:26:13,640 --> 00:26:16,920
have spent many hours in the marketing mines.

279
00:26:16,920 --> 00:26:21,920
And the idea is that we can sort of give these people

280
00:26:21,920 --> 00:26:27,120
characteristics that will then be able to match up with in our

281
00:26:27,120 --> 00:26:29,340
writing.

282
00:26:29,400 --> 00:26:33,040
So we have Pat, the newer Python dev.

283
00:26:33,040 --> 00:26:36,200
We have Piper, the experienced Python dev.

284
00:26:36,200 --> 00:26:40,040
We have Nat, the non-programmer.

285
00:26:40,040 --> 00:26:43,240
Ruby, the experienced in another language dev.

286
00:26:43,240 --> 00:26:45,800
And Darby, the decision maker.

287
00:26:45,800 --> 00:26:48,680
So these are my imaginary friends and I have gotten to

288
00:26:48,680 --> 00:26:50,640
know them very well.

289
00:26:50,640 --> 00:26:54,500
Pat is a recent programming boot camp grad.

290
00:26:54,500 --> 00:26:56,000
They're on the younger side.

291
00:26:56,000 --> 00:26:59,280
They love Game of Thrones and will get every reference

292
00:26:59,280 --> 00:27:02,320
to that show that you put into an article.

293
00:27:02,320 --> 00:27:05,380
But Pat can't tell you the difference between Monty Python

294
00:27:05,380 --> 00:27:06,940
and the Mickey Mouse Club.

295
00:27:06,940 --> 00:27:10,040
They weren't around for any of that.

296
00:27:10,040 --> 00:27:13,980
Ruby in comparison got started programming when cobalt was the

297
00:27:13,980 --> 00:27:15,540
hot new thing.

298
00:27:15,540 --> 00:27:19,340
Ruby hates all programming languages equally.

299
00:27:19,340 --> 00:27:22,980
Ruby also reads XKCD and probably knows more about

300
00:27:22,980 --> 00:27:25,880
Python's Easter eggs than Python itself.

301
00:27:25,880 --> 00:27:29,220
That's probably going to change next weekend though when Ruby

302
00:27:29,460 --> 00:27:33,860
learns enough Python to get through a job interview.

303
00:27:33,860 --> 00:27:36,820
Darby in comparison isn't a programmer.

304
00:27:36,820 --> 00:27:39,180
They're not responsible for writing code.

305
00:27:39,180 --> 00:27:42,860
Instead Darby gets to decide on whether to use Python to build

306
00:27:42,860 --> 00:27:45,280
new projects for their startup.

307
00:27:45,280 --> 00:27:46,960
Darby has money to spend.

308
00:27:46,960 --> 00:27:49,480
We like that about Darby.

309
00:27:49,480 --> 00:27:52,860
Darby also has titles like VP of Engineering or CTO

310
00:27:52,860 --> 00:27:55,080
on their resume.

311
00:27:55,080 --> 00:27:58,680
We know that Darby has worked internationally because they

312
00:27:58,680 --> 00:28:01,340
love football but not American football.

313
00:28:01,340 --> 00:28:03,980
They like to point that out.

314
00:28:03,980 --> 00:28:08,240
So you'll notice that I'm very deliberately fuzzy about the

315
00:28:08,240 --> 00:28:12,640
gender of these people and I'm also very fuzzy about the race

316
00:28:12,640 --> 00:28:15,880
because personas are not good tools for figuring out how to

317
00:28:15,880 --> 00:28:21,120
address facets of identity like gender or race.

318
00:28:21,120 --> 00:28:23,840
These personas are my imaginary friends.

319
00:28:23,840 --> 00:28:27,380
They're out of my imagination and they're a product of my

320
00:28:27,380 --> 00:28:28,680
experience.

321
00:28:28,680 --> 00:28:31,680
They can't know anything that I haven't experienced.

322
00:28:31,680 --> 00:28:35,520
The furthest outside of my own experience, I'll let them go,

323
00:28:35,520 --> 00:28:39,080
is that Pat is a Game of Thrones fan and I've only seen

324
00:28:39,080 --> 00:28:41,620
like two episodes.

325
00:28:41,620 --> 00:28:44,920
But personas are really valuable when we're looking at work and

326
00:28:44,920 --> 00:28:47,620
educational experience.

327
00:28:47,620 --> 00:28:50,540
We'll talk about some other strategies for inclusion on

328
00:28:50,540 --> 00:28:53,120
those other facets later on.

329
00:28:53,120 --> 00:28:56,580
But in the meanwhile, since we know these personas,

330
00:28:56,580 --> 00:28:58,480
we can talk about some characteristics we're going to

331
00:28:58,480 --> 00:29:00,540
assign to them.

332
00:29:00,540 --> 00:29:07,940
So this is a graph out of the Python Software Foundation survey

333
00:29:07,940 --> 00:29:10,820
of Python programmers from 2018.

334
00:29:10,820 --> 00:29:14,180
And this is one of my favorite sources of information about

335
00:29:14,180 --> 00:29:17,040
Python programmers.

336
00:29:17,140 --> 00:29:28,380
For example, I know that because 50% of Python programmers also

337
00:29:28,380 --> 00:29:33,400
use JavaScript, I can assume Piper, our more senior dev,

338
00:29:33,400 --> 00:29:35,540
has some JavaScript knowledge.

339
00:29:35,540 --> 00:29:38,780
They may not be like 100% perfect at it,

340
00:29:38,780 --> 00:29:40,680
but they're experienced enough to know how to

341
00:29:40,680 --> 00:29:43,240
Google their problems.

342
00:29:43,240 --> 00:29:46,000
Pat, though, our newer programmer,

343
00:29:46,000 --> 00:29:49,080
might have some JavaScript knowledge,

344
00:29:49,080 --> 00:29:52,140
but probably not enough to know what to do when

345
00:29:52,140 --> 00:29:53,700
something goes wrong.

346
00:29:53,700 --> 00:29:56,100
We're going to want to add more context,

347
00:29:56,100 --> 00:30:01,200
link to some resources, and give Pat more of an idea of the

348
00:30:01,200 --> 00:30:04,840
basic information when we're writing for them.

349
00:30:04,840 --> 00:30:08,300
As it happens, because Pat is my imaginary friend,

350
00:30:08,300 --> 00:30:11,200
I know Pat's boot camp curriculum.

351
00:30:11,200 --> 00:30:15,240
It was very thorough, and Pat did get to go through a

352
00:30:15,240 --> 00:30:16,900
JavaScript class.

353
00:30:16,900 --> 00:30:19,960
But Pat still wants to know why Java has its own scripting

354
00:30:19,960 --> 00:30:23,900
language, because even the most thorough curriculum is not

355
00:30:23,900 --> 00:30:27,840
going to cover naming decisions that happened when Pat wasn't

356
00:30:27,840 --> 00:30:31,300
yet in kindergarten.

357
00:30:31,300 --> 00:30:34,700
So we can make similar assumptions about Piper and

358
00:30:34,700 --> 00:30:38,660
Pat's familiarity with popular frameworks, libraries,

359
00:30:38,660 --> 00:30:39,900
in sort of the same way.

360
00:30:39,900 --> 00:30:45,100
This survey actually has a lot of information in it that I'm

361
00:30:45,100 --> 00:30:48,540
happy to go into later, maybe during the break,

362
00:30:48,540 --> 00:30:50,660
just so that we don't get too off track.

363
00:30:50,660 --> 00:30:55,160
But these are really useful pieces of information.

364
00:30:55,160 --> 00:30:59,300
They let us make assumptions, and assumptions are only as good

365
00:30:59,300 --> 00:31:01,300
as the data that they're based on.

366
00:31:01,300 --> 00:31:04,900
So I like using the PSF survey, even though it's based on

367
00:31:04,900 --> 00:31:11,140
self-reporting, because the PSF puts a lot of effort into

368
00:31:11,140 --> 00:31:13,900
contacting different Python communities and getting

369
00:31:13,900 --> 00:31:18,100
respondents from all over the world.

370
00:31:18,100 --> 00:31:21,500
There are probably some people who don't fill it out,

371
00:31:21,500 --> 00:31:24,860
but the data is pretty good.

372
00:31:24,860 --> 00:31:29,160
In contrast, some surveys of insular communities don't give

373
00:31:29,160 --> 00:31:31,000
us useful data.

374
00:31:31,000 --> 00:31:34,860
If you take a look at Stack Overflow's developer survey,

375
00:31:34,860 --> 00:31:38,820
you would be working off the assumption that 11% of women are

376
00:31:38,820 --> 00:31:41,900
11% of programmers are women.

377
00:31:41,900 --> 00:31:45,160
That's a gender disparity in programming,

378
00:31:45,160 --> 00:31:49,720
but it's actually different than the more general disparity that

379
00:31:49,720 --> 00:31:51,160
we know about.

380
00:31:51,160 --> 00:31:53,820
In most programming communities, we're looking at closer to

381
00:31:53,820 --> 00:31:59,900
24% women, and that's based off of surveys by a company named

382
00:31:59,900 --> 00:32:03,520
Accenture, who basically specializes in surveys.

383
00:32:03,520 --> 00:32:06,980
So if we took a look at the Stack Overflow information,

384
00:32:06,980 --> 00:32:10,220
we would be making some incorrect assumptions.

385
00:32:10,220 --> 00:32:13,460
So we want to evaluate where we're getting this information

386
00:32:13,460 --> 00:32:15,880
from.

387
00:32:15,880 --> 00:32:20,980
So another thing that we know from the Python survey is that

388
00:32:20,980 --> 00:32:26,660
the Python community is growing and is just continuing to grow.

389
00:32:26,660 --> 00:32:29,920
That expansion means that we kind of have to talk about what

390
00:32:29,920 --> 00:32:33,220
growth means for our personas in the long run.

391
00:32:33,320 --> 00:32:35,980
Since our community is starting to trend younger,

392
00:32:35,980 --> 00:32:39,620
which I think is great because it ensures longevity in our

393
00:32:39,620 --> 00:32:43,480
community, but that also means that we're getting community

394
00:32:43,480 --> 00:32:48,820
members who associate Monty Python with their grandparents.

395
00:32:48,820 --> 00:32:52,620
I have literally talked to a Python programmer who said,

396
00:32:52,620 --> 00:32:58,020
Monty Python, I think my grandma watches that.

397
00:32:58,020 --> 00:33:03,120
That made me feel old, but it also is a really important thing

398
00:33:03,120 --> 00:33:04,120
to think about.

399
00:33:04,120 --> 00:33:05,580
If they don't know what Monty Python is,

400
00:33:05,580 --> 00:33:08,680
they're not going to get references to it.

401
00:33:08,680 --> 00:33:12,220
Our community is also trending more global.

402
00:33:12,220 --> 00:33:16,960
We have many programmers in the Python community whose first

403
00:33:16,960 --> 00:33:21,620
language is not English, and only a fraction of Python

404
00:33:21,620 --> 00:33:24,080
writing happens in other languages.

405
00:33:24,080 --> 00:33:29,880
So English language documentation is important for

406
00:33:29,880 --> 00:33:33,180
all communities, which means we have to make it accessible

407
00:33:33,180 --> 00:33:35,420
to all communities.

408
00:33:35,420 --> 00:33:40,040
So both of these trends impact how we can write about Python.

409
00:33:40,040 --> 00:33:43,780
As more people use Python, we can't assume that everyone will

410
00:33:43,780 --> 00:33:47,580
have access to the same media, watch the same movies,

411
00:33:47,580 --> 00:33:50,140
get the same jokes.

412
00:33:50,140 --> 00:33:53,980
We need to think about context when we use references outside

413
00:33:53,980 --> 00:33:58,580
of the community, whether we're explaining an Easter egg or

414
00:33:58,580 --> 00:34:01,380
we're trying to explain why a certain decision was made in a

415
00:34:01,380 --> 00:34:03,340
certain way.

416
00:34:03,340 --> 00:34:06,420
Humor is particularly tricky when writing about technical

417
00:34:06,420 --> 00:34:07,420
topics.

418
00:34:07,420 --> 00:34:10,580
Jokes tend to need a lot of context to explain if you don't

419
00:34:10,580 --> 00:34:12,740
get it fairly quickly.

420
00:34:12,740 --> 00:34:17,320
Even puns require knowledge about, like, pronunciation.

421
00:34:17,320 --> 00:34:21,580
So without that information, it's not funny and it can even

422
00:34:21,580 --> 00:34:24,640
be a little bit of a distraction for somebody who is spending

423
00:34:24,640 --> 00:34:27,420
time trying to get the joke instead of reading the rest of

424
00:34:27,420 --> 00:34:29,420
your article.

425
00:34:31,620 --> 00:34:36,180
I will be snarking about Monty Python a lot during this talk.

426
00:34:36,180 --> 00:34:42,160
I, for my project, I watched all of Monty Python, including the

427
00:34:42,160 --> 00:34:43,720
episodes and the movies.

428
00:34:43,720 --> 00:34:47,460
And, well, let me put it this way.

429
00:34:47,460 --> 00:34:48,960
Punching up is funny.

430
00:34:48,960 --> 00:34:52,960
I feel comfortable making fun of Monty Python.

431
00:34:52,960 --> 00:34:55,660
The members of that comedy troupe have made bank.

432
00:34:55,660 --> 00:35:01,000
They have lots of defenders out on the Internet and I'm okay with,

433
00:35:01,000 --> 00:35:03,520
you know, making fun of them or snarking about them.

434
00:35:03,520 --> 00:35:07,420
In comparison, punching down or making jokes about people who

435
00:35:07,420 --> 00:35:10,960
are not powerful is not funny.

436
00:35:10,960 --> 00:35:12,700
It's not interesting.

437
00:35:12,700 --> 00:35:15,600
It's frankly boring.

438
00:35:15,600 --> 00:35:19,920
And if I want to watch somebody make jokes at other people's

439
00:35:19,920 --> 00:35:23,500
expense, I can just watch the news at this point.

440
00:35:23,560 --> 00:35:26,960
So we want to think about, like, the message that we're sending

441
00:35:26,960 --> 00:35:28,800
any time we use humor as well.

442
00:35:28,800 --> 00:35:29,800
Are we punching up?

443
00:35:29,800 --> 00:35:34,800
Are we making fun of a group of people who already have a hard time?

444
00:35:37,260 --> 00:35:42,260
So let's talk a little bit more about Monty Python.

445
00:35:46,300 --> 00:35:49,940
When Weedo named the Python programming language, he was

446
00:35:49,940 --> 00:35:54,340
referring to Monty Python, not a random snake.

447
00:35:54,340 --> 00:35:57,500
For anybody who hasn't experienced Monty Python, we're

448
00:35:57,500 --> 00:36:02,840
talking about a British sketch troupe who turned 45 episodes

449
00:36:02,840 --> 00:36:08,680
which were made between 1969 and 1973 into a full on industry

450
00:36:08,680 --> 00:36:15,140
with movies, books, games, musicals, and many other things.

451
00:36:15,140 --> 00:36:18,680
This year is Monty Python's 50th anniversary.

452
00:36:18,680 --> 00:36:22,440
So when I say people kind of are starting to associate it with

453
00:36:22,440 --> 00:36:26,440
their grandparents, it's because it's 50 years old.

454
00:36:28,540 --> 00:36:32,180
I'm making sure to describe Monty Python in a little bit of

455
00:36:32,180 --> 00:36:35,520
detail because we can't assume everyone using the Python

456
00:36:35,520 --> 00:36:40,180
programming language is culturally fluent in Monty Python.

457
00:36:40,180 --> 00:36:43,320
We might as well be asking programmers to get references to

458
00:36:43,320 --> 00:36:46,620
the Beverly Hillbillies or Petticoat Junction or Green

459
00:36:46,620 --> 00:36:51,720
Acres, none of which I could even get a joke for and I watch

460
00:36:51,720 --> 00:36:53,780
a lot of old TV.

461
00:36:53,780 --> 00:36:58,380
That isn't necessarily a problem, but some jokes also age

462
00:36:58,380 --> 00:37:01,920
better than others and Monty Python is not aging

463
00:37:01,920 --> 00:37:04,880
particularly well.

464
00:37:04,880 --> 00:37:09,380
By expecting Python programmers to be familiar with Monty Python's

465
00:37:09,380 --> 00:37:15,280
body of work, we might be sending them on searches that

466
00:37:15,280 --> 00:37:18,720
will lead them to lists of sketches that include things like

467
00:37:18,720 --> 00:37:21,120
titles with the N word in it.

468
00:37:21,120 --> 00:37:24,540
I don't think any of us want to accidentally send a Python

469
00:37:24,540 --> 00:37:26,720
programmer to something like that.

470
00:37:26,720 --> 00:37:30,440
We don't want to distract from the programming for sure, but we

471
00:37:30,440 --> 00:37:34,020
also don't want somebody to feel excluded by that.

472
00:37:34,020 --> 00:37:37,220
So let me be clear, I'm not saying you can't ever make a

473
00:37:37,220 --> 00:37:39,920
Monty Python reference again.

474
00:37:39,920 --> 00:37:43,240
What I am saying is that we all have to consider the context of

475
00:37:43,240 --> 00:37:46,280
our references before we slap them on projects we want to share

476
00:37:46,280 --> 00:37:48,280
with the whole world.

477
00:37:48,280 --> 00:37:51,040
I'd ask you to think about it kind of the same way that you

478
00:37:51,040 --> 00:37:53,980
might think about putting a picture of an actual Python in

479
00:37:53,980 --> 00:37:57,600
the middle of eating something on your project's home page.

480
00:37:57,600 --> 00:38:01,100
No matter how cool you are personally with snakes, there are

481
00:38:01,100 --> 00:38:04,400
a lot of us who will respond to a picture of a snake by clicking

482
00:38:04,400 --> 00:38:07,100
away as fast as we can.

483
00:38:07,100 --> 00:38:08,540
That includes me.

484
00:38:08,540 --> 00:38:09,880
I like cute snakes.

485
00:38:09,880 --> 00:38:11,480
I like cartoon snakes.

486
00:38:11,480 --> 00:38:12,680
Real snakes?

487
00:38:12,680 --> 00:38:15,580
Not my jam.

488
00:38:15,580 --> 00:38:17,080
All right.

489
00:38:17,080 --> 00:38:20,780
So since we've been talking about humor, we can talk a little bit

490
00:38:20,780 --> 00:38:23,540
about some of the other styles that we see in Python.

491
00:38:23,540 --> 00:38:27,520
Python does, you know, have a little bit of a humorous aspect

492
00:38:27,520 --> 00:38:30,820
that I think some communities don't have.

493
00:38:30,820 --> 00:38:35,180
But we also have some really standard styles that we can talk

494
00:38:35,180 --> 00:38:37,380
about as well.

495
00:38:37,380 --> 00:38:41,240
So we have PEP 8, which is the style guide for Python code.

496
00:38:41,300 --> 00:38:45,440
Includes naming conventions for variables, method names,

497
00:38:45,440 --> 00:38:46,940
that sort of thing.

498
00:38:46,940 --> 00:38:50,440
It does not include suggestions for how to write pros about

499
00:38:50,440 --> 00:38:54,480
Python, but some of its instructions are just as useful

500
00:38:54,480 --> 00:38:56,480
for writing pros as for code.

501
00:38:56,480 --> 00:39:00,780
PEP 8 prioritizes for readability and consistency,

502
00:39:00,780 --> 00:39:03,700
both of which are excellent instructions to take to heart

503
00:39:03,700 --> 00:39:06,500
when writing.

504
00:39:06,500 --> 00:39:10,380
Even if something is wrong, we want it to be consistent because

505
00:39:10,380 --> 00:39:13,680
we want somebody reading the article to not be distracted

506
00:39:13,680 --> 00:39:16,680
by those elements.

507
00:39:16,680 --> 00:39:23,480
We also have some less formal systems in Python that have kind

508
00:39:23,480 --> 00:39:26,480
of created certain kinds of jargons, certain kinds of

509
00:39:26,480 --> 00:39:29,080
constructions that we can expect.

510
00:39:29,080 --> 00:39:32,540
So, for instance, many Python conferences and user groups

511
00:39:32,540 --> 00:39:35,740
include the city that they're located in in their

512
00:39:35,740 --> 00:39:37,920
organizational names.

513
00:39:37,920 --> 00:39:43,220
Geography is a relatively easy way to disambiguate between

514
00:39:43,220 --> 00:39:47,920
different local communities from the larger community.

515
00:39:47,920 --> 00:39:50,780
We can tell that PyLadies Atlanta and PyLadies Santa

516
00:39:50,780 --> 00:39:55,460
Domingo are two separate groups just by looking at the name.

517
00:39:55,460 --> 00:39:59,480
It gets even easier because there are unique identifiers for

518
00:39:59,480 --> 00:40:03,460
different locations in the form of IATA codes.

519
00:40:03,460 --> 00:40:08,820
So IATA makes sure that all airport codes are unique because

520
00:40:08,820 --> 00:40:12,120
there are some extremely important differences between

521
00:40:12,120 --> 00:40:15,620
Portland, Oregon and Portland, Maine.

522
00:40:15,620 --> 00:40:17,200
My house is in Portland, Oregon.

523
00:40:17,200 --> 00:40:21,500
I want to make sure that I get home to the right Portland.

524
00:40:21,500 --> 00:40:28,720
So IATA has designated PDX as the code for Portland, Oregon,

525
00:40:28,720 --> 00:40:31,320
just so that we can all tell the difference.

526
00:40:31,320 --> 00:40:33,320
And these codes are super convenient.

527
00:40:33,320 --> 00:40:39,560
A lot of cities sort of adopt them as nicknames and

528
00:40:39,560 --> 00:40:44,780
identifiers, but not all IATA codes are intuitive.

529
00:40:44,780 --> 00:40:54,560
Chicago airports, Midway, O'Hare, both have some IATA codes

530
00:40:54,560 --> 00:40:58,080
that don't reference Chicago in any way.

531
00:40:58,080 --> 00:41:01,520
These departures from style, these sorts of inconsistencies

532
00:41:01,560 --> 00:41:04,960
are the sort of thing that requires explanation so that

533
00:41:04,960 --> 00:41:09,060
readers don't get distracted from the material that they're

534
00:41:09,060 --> 00:41:12,320
trying to learn while trying to figure out where the writer is

535
00:41:12,320 --> 00:41:15,220
from or a detail like that.

536
00:41:15,220 --> 00:41:20,260
And while I will always struggle to remember that both tickets to

537
00:41:20,260 --> 00:41:25,960
ORD and MDW will get me to Chicago, the sort of PY star

538
00:41:25,960 --> 00:41:30,020
prefix used in PyLadies has become an easy to remember

539
00:41:30,020 --> 00:41:32,920
signal that we're talking about Python.

540
00:41:32,920 --> 00:41:37,760
There are a variety of ways that PY has slid into Python project

541
00:41:37,760 --> 00:41:40,580
names and Python jargon.

542
00:41:40,580 --> 00:41:44,720
Some projects have chosen words whose letters already include

543
00:41:44,720 --> 00:41:49,880
PY, pyramid is a word that already came with that Y

544
00:41:49,880 --> 00:41:51,560
equipped.

545
00:41:51,560 --> 00:41:56,620
But other organizations have done things where they swap an

546
00:41:56,620 --> 00:41:57,980
I for a Y.

547
00:41:57,980 --> 00:42:04,520
So project Jupiter, for instance, is spelled J-U-P-Y-T-E-R.

548
00:42:04,520 --> 00:42:07,260
That can be handy for disambiguation and for

549
00:42:07,260 --> 00:42:10,860
findability because it's a little bit different, people can

550
00:42:10,860 --> 00:42:13,780
search for it a little bit more easily unless Google tries to be

551
00:42:13,780 --> 00:42:16,620
helpful and autocorrects things.

552
00:42:16,620 --> 00:42:20,460
There's also more than a few jokes about the word pie as in

553
00:42:20,460 --> 00:42:24,780
the sweet dessert with a crust and filling that we might eat.

554
00:42:24,780 --> 00:42:30,520
Cherry pie is an example that follows that naming schema.

555
00:42:30,520 --> 00:42:34,340
So a lot of projects also have developed their own internal

556
00:42:34,340 --> 00:42:38,920
naming schemas which as we're writing, if we're writing about

557
00:42:38,920 --> 00:42:42,620
those specific projects we have to be familiar with them.

558
00:42:42,620 --> 00:42:47,980
Beeware, for instance, uses a combination of so many puns

559
00:42:47,980 --> 00:42:52,640
about bees mostly and history occasionally to create

560
00:42:52,640 --> 00:42:55,900
descriptive names for their tools.

561
00:42:55,900 --> 00:42:59,680
So Beeware has a subtitle that's very clever.

562
00:42:59,680 --> 00:43:06,040
The full name is Beeware, call in the I-D-E's of Python as in

563
00:43:06,040 --> 00:43:12,240
the Ides of March if you are a Julius Caesar fan.

564
00:43:12,240 --> 00:43:14,940
I mean, Shakespeare fan maybe, I guess.

565
00:43:14,940 --> 00:43:18,940
It's been a while since Julius Caesar.

566
00:43:18,940 --> 00:43:28,000
So they also have a library named Toga as in the sheet that

567
00:43:28,000 --> 00:43:32,040
Julius Caesar would wear which provides wrappers.

568
00:43:32,040 --> 00:43:38,700
A bunch of nerds, all I'm saying.

569
00:43:38,700 --> 00:43:45,300
And of course, since Beeware is spelled B-E-E-ware,

570
00:43:45,300 --> 00:43:51,940
the pre-validator is B-4, B-E-E-4, two E's.

571
00:43:51,940 --> 00:43:54,640
So if it sounds like I'm saying a lot of names,

572
00:43:54,640 --> 00:43:57,260
that's because we name a lot of things.

573
00:43:57,260 --> 00:44:00,360
We name them pretty fast too.

574
00:44:00,360 --> 00:44:04,640
As technology moves forward, we are constantly having new things

575
00:44:04,640 --> 00:44:07,400
that we have to stick a name on.

576
00:44:07,400 --> 00:44:10,940
We're often moving fast enough that there are multiple projects

577
00:44:10,940 --> 00:44:12,500
sharing a name.

578
00:44:12,500 --> 00:44:15,440
So I think most of us in this room have probably heard of

579
00:44:15,440 --> 00:44:18,460
Django, the Python web-based framework.

580
00:44:18,460 --> 00:44:22,260
But there's also a piece of software out there named Django

581
00:44:22,260 --> 00:44:25,400
that's for tablature for musicians.

582
00:44:25,400 --> 00:44:28,760
And while most of the search engine results have started

583
00:44:28,760 --> 00:44:32,100
being really good about finding the Python framework,

584
00:44:32,100 --> 00:44:36,800
sometimes if you search for things like Django software or

585
00:44:36,800 --> 00:44:41,360
Django themes for musicians, you wind up over at the tablature

586
00:44:41,360 --> 00:44:43,520
software instead.

587
00:44:43,520 --> 00:44:49,420
So these sorts of name collisions are annoying.

588
00:44:49,420 --> 00:44:54,160
They are perhaps even like a full-on problem if you're

589
00:44:54,160 --> 00:44:56,720
trying to search online for help.

590
00:44:56,720 --> 00:45:00,020
Like how many times have each of us walked away from a meetup or

591
00:45:00,020 --> 00:45:04,020
a conference with like a module we know we want to look up when

592
00:45:04,020 --> 00:45:10,320
we get home and we're hoping that we remember the name or

593
00:45:10,320 --> 00:45:14,320
that our new contact or new friend who introduced us to it

594
00:45:14,320 --> 00:45:18,480
will send us a link or maybe we'll be able to find it through

595
00:45:18,480 --> 00:45:20,980
a search engine.

596
00:45:20,980 --> 00:45:27,780
Unless you have a pretty good memory, which I don't, you're

597
00:45:27,780 --> 00:45:31,120
basically going to wind up just adding keywords to a search

598
00:45:31,120 --> 00:45:35,180
engine, like adding and removing words like you're creating the

599
00:45:35,180 --> 00:45:39,180
right incantation to summon this module.

600
00:45:39,240 --> 00:45:43,140
And that's not necessarily the most effective way to make sure

601
00:45:43,140 --> 00:45:45,940
that somebody finds your work.

602
00:45:45,940 --> 00:45:49,980
And if you're looking for Python modules to help you with

603
00:45:49,980 --> 00:45:54,180
herpetology research or the study of snakes,

604
00:45:54,180 --> 00:45:55,980
you can't find them.

605
00:45:55,980 --> 00:45:58,780
I don't even know what to tell you about that.

606
00:45:58,780 --> 00:46:01,880
But it keeps getting more complicated because some

607
00:46:01,880 --> 00:46:06,040
herpetologists just named a species of Python after

608
00:46:06,040 --> 00:46:07,840
Monty Python.

609
00:46:07,900 --> 00:46:10,740
It's not going well there.

610
00:46:10,740 --> 00:46:14,400
So these name collisions just get more common.

611
00:46:14,400 --> 00:46:16,400
They are our future.

612
00:46:16,400 --> 00:46:19,100
The only way that we can write about them, the only way that we

613
00:46:19,100 --> 00:46:23,140
can make them accessible to people is to give context,

614
00:46:23,140 --> 00:46:24,740
to disambiguate.

615
00:46:24,740 --> 00:46:27,540
Unique identifiers are hard.

616
00:46:27,540 --> 00:46:32,340
And we keep building new things that we have to come up with at

617
00:46:32,340 --> 00:46:35,900
least a somewhat unique identifier for.

618
00:46:35,960 --> 00:46:42,260
So that is both a pitfall for us but also kind of an opportunity

619
00:46:42,260 --> 00:46:46,260
because it gives us an idea of the things that have to be in

620
00:46:46,260 --> 00:46:48,400
whatever we're writing.

621
00:46:48,400 --> 00:46:49,560
All right.

622
00:46:49,560 --> 00:46:51,860
So I keep saying the word disambiguation,

623
00:46:51,860 --> 00:46:55,100
which is a very fancy word and very long.

624
00:46:55,100 --> 00:46:57,860
But it just basically means clarifying what you mean by a

625
00:46:57,860 --> 00:46:59,760
particular word or name.

626
00:46:59,760 --> 00:47:02,460
So, for instance, if I'm talking about Python,

627
00:47:02,460 --> 00:47:06,320
I'll say Python the programming language, not the snake.

628
00:47:06,320 --> 00:47:08,660
Just like spelling out abbreviations,

629
00:47:08,660 --> 00:47:11,820
you usually only need to disambiguate terms once in a

630
00:47:11,820 --> 00:47:13,560
piece of writing.

631
00:47:13,560 --> 00:47:16,120
If you're the sort of person who likes footnotes,

632
00:47:16,120 --> 00:47:19,720
that's a great use of footnotes.

633
00:47:19,720 --> 00:47:22,660
As we're writing about a programming language with

634
00:47:22,660 --> 00:47:25,660
multiple versions, disambiguation becomes even

635
00:47:25,660 --> 00:47:27,600
more important.

636
00:47:27,600 --> 00:47:30,700
Like I said, nobody enjoys getting halfway through a

637
00:47:30,700 --> 00:47:33,740
tutorial before realizing that they're using the wrong version

638
00:47:33,740 --> 00:47:37,040
of Python or they don't have the right dependency or something

639
00:47:37,040 --> 00:47:38,960
like that.

640
00:47:38,960 --> 00:47:43,460
And once again, please, please, please note the version of

641
00:47:43,460 --> 00:47:47,060
Python you're using whenever you write about Python.

642
00:47:47,060 --> 00:47:49,960
I'm going to say that at least a couple more times.

643
00:47:49,960 --> 00:47:53,060
Even if you assume that everybody you know is using

644
00:47:53,060 --> 00:47:56,400
Python 3, include that version number.

645
00:47:56,400 --> 00:48:00,460
Python 4 is kind of a glimmer in some people's eyes right now.

646
00:48:00,860 --> 00:48:04,020
But there are folks who are starting to talk about what might

647
00:48:04,020 --> 00:48:06,460
be included in that version.

648
00:48:06,460 --> 00:48:11,520
And similarly, there are not only people still using Python 2.7.

649
00:48:11,520 --> 00:48:16,960
There are people who are still using earlier versions than 2.7.

650
00:48:16,960 --> 00:48:21,860
They're not going to have support, but that doesn't...

651
00:48:21,860 --> 00:48:24,760
Oh, they're not necessarily going to have support after the

652
00:48:24,760 --> 00:48:29,420
end of life for 2.7, but that doesn't mean they're not out there.

653
00:48:29,480 --> 00:48:30,680
You had a question?

654
00:48:30,680 --> 00:48:32,440
One more comment.

655
00:48:32,440 --> 00:48:36,440
Do you mind writing whenever I am writing about Python?

656
00:48:36,440 --> 00:48:40,440
I may put a disclaimer that Python is a version of Python

657
00:48:40,440 --> 00:48:44,040
if I try to never write about Python 2, specifically because

658
00:48:44,040 --> 00:48:47,440
I don't want to encourage that Python mission.

659
00:48:47,440 --> 00:48:52,940
So I know that there's legacy software that is supported,

660
00:48:52,940 --> 00:48:57,680
but I feel like we should try to move this community to just

661
00:48:57,680 --> 00:49:02,940
write Python 3 and Python 4 in which now it's not Python 3.

662
00:49:02,940 --> 00:49:06,540
Like, that's certainly the ideal that we move people more

663
00:49:06,540 --> 00:49:10,040
towards Python 3 instead of writing about Python 2.7,

664
00:49:10,040 --> 00:49:17,880
but my experience has been that a lot of people,

665
00:49:17,880 --> 00:49:22,440
if they are still using 2.7, don't see that as a reason

666
00:49:22,440 --> 00:49:24,540
to give it up.

667
00:49:24,600 --> 00:49:27,500
If they're using it, they're still using it for a reason,

668
00:49:27,500 --> 00:49:34,600
usually, so we still have to keep them in mind as we're writing.

669
00:49:34,600 --> 00:49:36,000
I'm sorry, what was that?

670
00:49:36,000 --> 00:49:38,800
They don't have any info.

671
00:49:38,800 --> 00:49:40,700
Mm-hmm.

672
00:49:40,700 --> 00:49:41,700
Yeah.

673
00:49:41,700 --> 00:49:43,900
Yeah, some companies move really slowly and they won't change

674
00:49:43,900 --> 00:49:45,400
until it's absolutely necessary.

675
00:49:45,400 --> 00:49:48,300
So I agree with whatever might be like that.

676
00:49:48,300 --> 00:49:49,940
You know, I know some bigger companies are like that.

677
00:49:49,940 --> 00:49:52,100
They just don't move.

678
00:49:52,100 --> 00:49:56,660
My question is, are you going to make a recommendation on putting

679
00:49:56,660 --> 00:49:59,560
a logo or something on the page and recognize automatically

680
00:49:59,560 --> 00:50:02,260
that it's free only or something like that at all?

681
00:50:02,260 --> 00:50:04,260
We're going to talk about visuals a little bit,

682
00:50:04,260 --> 00:50:09,760
but I would not rely on just putting a logo because what if

683
00:50:09,760 --> 00:50:14,000
you have a reader who uses a screen reader or uses another

684
00:50:14,000 --> 00:50:18,200
piece of software or is on a really slow internet connection

685
00:50:18,200 --> 00:50:20,260
and can't load images?

686
00:50:20,260 --> 00:50:25,360
I really recommend using the words and adding an image is

687
00:50:25,360 --> 00:50:27,820
great, but I wouldn't depend on that on it.

688
00:50:27,820 --> 00:50:28,820
So...

689
00:50:28,820 --> 00:50:29,820
Like in the documentation that you have,

690
00:50:29,820 --> 00:50:32,660
it applies to the 3.0.1 in the actual document.

691
00:50:32,660 --> 00:50:35,120
Mm-hmm, exactly.

692
00:50:35,120 --> 00:50:37,820
Absolutely.

693
00:50:37,820 --> 00:50:43,160
And that's basically what I'm saying.

694
00:50:43,160 --> 00:50:47,520
Please just do that always, always, always, always.

695
00:50:47,520 --> 00:50:50,160
All right, any other questions on that?

696
00:50:51,060 --> 00:50:53,060
Okay, great.

697
00:50:53,060 --> 00:50:58,320
So a lot of writers like using links for disambiguation and

698
00:50:58,320 --> 00:51:01,320
for the same reason that I'm not necessarily a fan of relying on

699
00:51:01,320 --> 00:51:05,420
images, I'm not necessarily a fan of relying on links for

700
00:51:05,420 --> 00:51:08,420
disambiguation.

701
00:51:08,420 --> 00:51:09,860
There's a couple of reasons for that.

702
00:51:09,860 --> 00:51:14,720
Like I said, I've spent too much time in marketing and the idea

703
00:51:14,720 --> 00:51:17,760
in marketing is you never want to send somebody away from your

704
00:51:17,760 --> 00:51:18,760
website.

705
00:51:18,760 --> 00:51:20,020
Once you have them on your website,

706
00:51:20,020 --> 00:51:22,420
you want to convince them to do whatever you're marketing to

707
00:51:22,420 --> 00:51:25,420
them.

708
00:51:25,420 --> 00:51:30,220
But also because not everybody has the same internet experience

709
00:51:30,220 --> 00:51:32,020
as we do.

710
00:51:32,020 --> 00:51:37,360
So a lot of us, for instance, are probably used to pretty high

711
00:51:37,360 --> 00:51:40,320
speed internet where we can access everything we need,

712
00:51:40,320 --> 00:51:44,360
we can download, we get all the images when we go to a new

713
00:51:44,360 --> 00:51:47,260
website, all that sort of stuff.

714
00:51:47,260 --> 00:51:50,120
The only time most of us really worry about what we have to

715
00:51:50,120 --> 00:51:53,260
download in advance is for workshops.

716
00:51:53,260 --> 00:51:57,860
Like this conference Wi-Fi is not always the most dependable.

717
00:51:57,860 --> 00:52:01,560
But that's not a universal experience of the internet.

718
00:52:01,560 --> 00:52:08,120
In fact, it's not even probably the experience of most people

719
00:52:08,120 --> 00:52:12,260
outside of the U.S., Europe, and Australia.

720
00:52:12,260 --> 00:52:17,460
So I'm going to use one example that I know personally.

721
00:52:17,460 --> 00:52:23,460
I know a Python instructor who lives in Alaska.

722
00:52:23,460 --> 00:52:27,720
A rural village on an island, he can work a little bit remotely

723
00:52:27,720 --> 00:52:30,260
using satellite internet.

724
00:52:30,260 --> 00:52:32,460
But every time he leaves his hometown,

725
00:52:32,460 --> 00:52:37,920
he downloads packages, updates, books, movies, everything,

726
00:52:37,920 --> 00:52:44,820
because he basically can't get anything beyond a simple website.

727
00:52:44,820 --> 00:52:49,180
In the state of Alaska, about 15% of households can't get

728
00:52:49,180 --> 00:52:52,520
internet faster than 10 megabits per second.

729
00:52:52,520 --> 00:52:56,320
You can technically watch Netflix with 10 megabits.

730
00:52:56,320 --> 00:52:59,960
It is not a good experience.

731
00:52:59,960 --> 00:53:05,160
Some of those households, about 5% of households in Alaska,

732
00:53:05,160 --> 00:53:08,060
can't get more than 3 megabits per second,

733
00:53:08,060 --> 00:53:10,920
which means a lot of modern websites with images,

734
00:53:10,920 --> 00:53:15,760
with animation, those sorts of things, don't load at all.

735
00:53:15,760 --> 00:53:21,860
So we can assume that a lot of programmers will have pretty

736
00:53:21,860 --> 00:53:27,320
decent internet access, but we can't assume that everybody will.

737
00:53:27,320 --> 00:53:32,500
So that's one of the reasons that links, images,

738
00:53:32,500 --> 00:53:35,860
relying on outside resources is not ideal.

739
00:53:35,860 --> 00:53:41,600
There are even Python programmers who do not have any internet access at all.

740
00:53:41,600 --> 00:53:47,700
There are programs in California where a couple of Python programmers

741
00:53:47,700 --> 00:53:52,660
are working with incarcerated students who do not have computers.

742
00:53:52,660 --> 00:53:55,300
They handwrite out all of their code.

743
00:53:55,300 --> 00:53:58,460
Instructors print off tutorials and bring them in.

744
00:53:58,460 --> 00:54:02,260
So if they need to look at a link for something,

745
00:54:02,260 --> 00:54:06,260
they're going to have to wait until next week when the instructor has printed off the link

746
00:54:06,260 --> 00:54:09,820
and brings that in next.

747
00:54:09,820 --> 00:54:15,460
Lastly, I don't entirely like links for disambiguation because links break.

748
00:54:15,460 --> 00:54:19,420
Even if you're really good about updating your content, maintaining it,

749
00:54:19,420 --> 00:54:23,520
link rot is a tough problem.

750
00:54:23,520 --> 00:54:30,520
It just can be difficult to notice even if you have tools to catch broken links

751
00:54:30,520 --> 00:54:36,480
because some sites will do redirects, some sites will just remove pages.

752
00:54:36,480 --> 00:54:39,980
Everybody does kind of what they want in that direction.

753
00:54:39,980 --> 00:54:46,280
I'm also not a huge fan of relying on search to provide context,

754
00:54:46,280 --> 00:54:53,580
both because not everybody will have a chance to search or the knowledge of how to Google particularly well.

755
00:54:53,580 --> 00:54:56,780
But it also does not always end well.

756
00:54:56,840 --> 00:55:05,320
I have seen readers Google for a fairly innocuous term and wind up on urban dictionary,

757
00:55:05,320 --> 00:55:09,140
which has extremely nonprofessional definitions.

758
00:55:09,140 --> 00:55:15,720
And that's probably not somewhere we want to send people to learn from.

759
00:55:15,720 --> 00:55:17,720
All right.

760
00:55:27,780 --> 00:55:30,580
Usually write in the paragraph.

761
00:55:30,580 --> 00:55:33,940
Just giving a little bit of context in the paragraph is usually enough.

762
00:55:33,940 --> 00:55:41,480
So, for instance, if I was writing about let's go with that herpetology example,

763
00:55:41,480 --> 00:55:44,520
it's not going to be easy to search for herpetology.

764
00:55:44,520 --> 00:55:48,780
But I would make sure that not only is the word herpetology in that,

765
00:55:48,780 --> 00:55:53,220
I would explain what herpetology is for anybody who lands on the page and doesn't know.

766
00:55:53,280 --> 00:56:01,460
I would also use terms like the study of snakes so that if somebody was looking on in terms of

767
00:56:01,460 --> 00:56:06,260
searching for the staying snakes or something like that, they get there.

768
00:56:06,260 --> 00:56:12,160
But then I'd also kind of point out the fact that this is a hard topic to disambiguate

769
00:56:12,160 --> 00:56:17,460
and make sure that people know what they're kind of getting themselves into.

770
00:56:17,460 --> 00:56:19,460
No worries.

771
00:56:20,320 --> 00:56:22,320
All right.

772
00:56:24,220 --> 00:56:26,220
All right.

773
00:56:26,220 --> 00:56:28,220
Clarity.

774
00:56:28,220 --> 00:56:32,220
So, when we're writing about Python, especially in documentation, our goal is always writing as

775
00:56:32,220 --> 00:56:34,220
clearly as possible.

776
00:56:34,220 --> 00:56:42,820
With documentation in particular, if something isn't clear, if it isn't fairly easy to understand,

777
00:56:42,820 --> 00:56:46,580
that's where a lot of people will just stop following the tutorial.

778
00:56:46,580 --> 00:56:48,580
They might not finish the project.

779
00:56:48,580 --> 00:56:50,580
They might move on.

780
00:56:50,580 --> 00:56:52,580
They might consider a different piece of software.

781
00:56:52,580 --> 00:56:54,580
They might try to understand and lose people.

782
00:56:54,580 --> 00:57:00,580
So, disambiguation is one of the keys to writing clearly about Python, but it's only one piece.

783
00:57:00,580 --> 00:57:08,580
Whether you're writing support documentation, whether you're writing tutorials, you want to

784
00:57:08,580 --> 00:57:16,580
sort of keep your eye out for a couple of key things that can make your information less clear.

785
00:57:16,580 --> 00:57:19,580
So, one of those factors is tone.

786
00:57:19,580 --> 00:57:25,580
So, if you have ever taken an English class, you have heard a lot about tone, but outside of that,

787
00:57:25,580 --> 00:57:27,580
it's not really that well-known.

788
00:57:27,580 --> 00:57:31,580
The idea is that as you're writing, you have a voice.

789
00:57:31,580 --> 00:57:37,580
Your writing sounds like you in the way that something written by somebody else will sound a little bit different.

790
00:57:37,580 --> 00:57:39,580
You have your own word choices.

791
00:57:39,580 --> 00:57:41,580
You have your own style.

792
00:57:42,580 --> 00:57:51,580
So, within that voice, within that tone, we also kind of want to still stay consistent with the overall tone of other Python projects.

793
00:57:51,580 --> 00:58:00,580
We want to have a pretty obvious connection between Python and Palettes and anything else you might be working with.

794
00:58:00,580 --> 00:58:10,580
So, in terms of clarity, or excuse me, in terms of tone, Python is kind of an informal community.

795
00:58:10,580 --> 00:58:13,580
A lot of people will write their materials in the first person.

796
00:58:13,580 --> 00:58:18,580
We don't get too hung up on job titles as much as other communities will.

797
00:58:18,580 --> 00:58:20,580
Those sorts of details.

798
00:58:23,580 --> 00:58:30,580
When we're looking at something a little bit more formal, we're still, we still sometimes slide in jokes.

799
00:58:30,580 --> 00:58:34,580
We still, you know, we make it look like Python.

800
00:58:35,580 --> 00:58:36,580
And that's great.

801
00:58:36,580 --> 00:58:39,580
That's something that kind of sets us apart.

802
00:58:40,580 --> 00:58:45,580
However, if we're too informal, things become a little bit more difficult to understand.

803
00:58:45,580 --> 00:58:51,580
So, the strategy is for keeping sort of informality on a manageable level.

804
00:58:51,580 --> 00:58:54,580
We want to keep our sentences really short.

805
00:58:54,580 --> 00:59:01,580
Especially like some people love a good compound sentence, a run-on sentence, anything like that.

806
00:59:01,580 --> 00:59:09,580
But especially with documentation, tutorials, we want short sentences because short sentences are clearer instructions.

807
00:59:10,580 --> 00:59:13,580
One step, one sentence.

808
00:59:13,580 --> 00:59:17,580
We also want to do some like basic grammar checks.

809
00:59:17,580 --> 00:59:21,580
We want to make sure that all of our verb tenses match.

810
00:59:21,580 --> 00:59:31,580
So, instead of saying, Python 3 does this and then did this, we want it to be does and does or did and did.

811
00:59:32,580 --> 00:59:35,580
We want to keep adverbs and adjectives to a minimum.

812
00:59:36,580 --> 00:59:40,580
They tend to bulk up sentences, but they're also very distracting.

813
00:59:40,580 --> 00:59:43,580
We want to make sure that we have antecedents for everything.

814
00:59:43,580 --> 00:59:50,580
Antecedents are, if you have a pronoun, the antecedent is what the pronoun refers to.

815
00:59:50,580 --> 00:59:54,580
So, my name is Thursday, my pronouns are she and her.

816
00:59:54,580 --> 00:59:56,580
Those are pronouns.

817
00:59:57,580 --> 01:00:00,580
We also want to avoid passive sentences.

818
01:00:00,580 --> 01:00:04,580
Those are usually the longest sentences you'll have in your writing.

819
01:00:05,580 --> 01:00:11,580
And passive sentences are kind of easy to identify.

820
01:00:11,580 --> 01:00:19,580
As you're writing, if you add the words, by zombies, to the end of the sentence, you can tell if it's passive, if it makes sense.

821
01:00:19,580 --> 01:00:24,580
So, for instance, the program was written to automate workflows.

822
01:00:24,580 --> 01:00:27,580
I can add by zombies to the end of it and still works.

823
01:00:27,580 --> 01:00:30,580
The program was written to automate workflows by zombies.

824
01:00:30,580 --> 01:00:33,580
That's a sentence that is grammatically totally correct.

825
01:00:33,580 --> 01:00:35,580
It's also very passive.

826
01:00:35,580 --> 01:00:50,580
Whereas if I said, I wrote the program to automate workflows and then added by zombies, it would be, I wrote the program to automate workflows by zombies, which isn't a grammatically correct sentence.

827
01:00:50,580 --> 01:00:53,580
Though, you know, it has a zombie in it.

828
01:00:53,580 --> 01:00:55,580
Zombie is the end of the sentence.

829
01:00:55,580 --> 01:00:56,580
You're writing for zombies.

830
01:00:56,580 --> 01:00:57,580
Right, right.

831
01:00:57,580 --> 01:01:08,580
I like zombies as a way to check for passivity because they look wrong in most sentences because we don't have a lot of zombies running around.

832
01:01:08,580 --> 01:01:11,580
We also want to be confident in our writing.

833
01:01:11,580 --> 01:01:20,580
Even if you're not 100% sure, you don't want to go too far in using phrases like I think or probably or most likely.

834
01:01:20,580 --> 01:01:24,580
You want your readers to be confident in what you're telling them.

835
01:01:24,580 --> 01:01:30,580
They want to think that you're the expert and because you know more than them, you are the expert.

836
01:01:30,580 --> 01:01:37,580
Wishi Washi language just gives people doubts on the usefulness of what they're reading.

837
01:01:37,580 --> 01:01:38,580
Claire.

838
01:01:38,580 --> 01:02:03,580
Clarity.

839
01:02:03,580 --> 01:02:08,580
So clarity can be measured as well.

840
01:02:08,580 --> 01:02:18,580
So you may see suggestions that documentation and other materials about technical topics should be written at an eighth grade reading level.

841
01:02:18,580 --> 01:02:25,580
This isn't the best metric, but it's kind of the metric that we have at the moment.

842
01:02:25,580 --> 01:02:34,580
So basing our reading levels on an abstract idea of what an eighth grader in the U.S. probably should be able to read.

843
01:02:34,580 --> 01:02:41,580
It doesn't tell us a lot for most audiences, but it gives us at least a number to look at.

844
01:02:41,580 --> 01:02:50,580
So there are a bunch of various tools that will give you this sort of evaluation of your work and tell you what grade level it's at.

845
01:02:50,580 --> 01:02:51,580
Hemingway is one.

846
01:02:51,580 --> 01:02:58,580
A lot of word processors have one built in and they just go through and they analyze what you're writing.

847
01:02:58,580 --> 01:03:07,580
They look at things like the length of words you use, the length of sentences you use, whether you have a lot of adjectives, all that sort of stuff.

848
01:03:07,580 --> 01:03:12,580
These tools are very automated, so use them with a grain of salt.

849
01:03:12,580 --> 01:03:16,580
But in general, we don't want to score too high.

850
01:03:16,580 --> 01:03:30,580
If we're scoring over 10, 11 or 12th grade, if it says that it's only accessible to college students, it really is more accessible to people who are expert level.

851
01:03:30,580 --> 01:03:40,580
So especially when we're writing for Pat or one of our newer personas, we want to keep it at a lower grade level like the sixth to eighth grade.

852
01:03:40,580 --> 01:03:50,580
For what it's worth, this talk scored closer to a 10th grade reading level, mostly because I use words like disambiguation and antecedents.

853
01:03:50,580 --> 01:04:01,580
Technical terms and jargon are also often considered more advanced, which will push your score up, which is another reason to take it kind of with a grain of salt.

854
01:04:01,580 --> 01:04:10,580
Even if you contextualize it, systems get a little concerned.

855
01:04:10,580 --> 01:04:16,580
So consider these reading levels sort of a rough guide.

856
01:04:16,580 --> 01:04:18,580
All right.

857
01:04:18,580 --> 01:04:23,580
Just a couple more of these and then we get to do an exercise, I promise.

858
01:04:23,580 --> 01:04:27,580
Findability is another factor that we really want to prioritize.

859
01:04:27,580 --> 01:04:30,580
It's just as important in clarity.

860
01:04:30,580 --> 01:04:36,580
No matter what your use case is, people have to find your writing to be able to use it.

861
01:04:36,580 --> 01:04:42,580
So the question of findability does overlap a bit with disambiguation.

862
01:04:42,580 --> 01:04:59,580
If you just search for Python without any of the words related to software, you might get the programming language, but you might also get papers about the use of Oracle snakes in ancient Greece, which is a topic I'm fascinated by, but is not relevant to this.

863
01:04:59,580 --> 01:05:08,580
So for some people, findability is kind of equivalent to search engine optimization or SEO.

864
01:05:08,580 --> 01:05:12,580
Once again, this is like my marketing experience throwing in.

865
01:05:12,580 --> 01:05:17,580
SEO techniques are all about telling search engines how to find your material.

866
01:05:17,580 --> 01:05:32,580
Search engines remain important because even though our readers are actual humans, most humans use search engines as their way to find information, even if they know where that information is.

867
01:05:32,580 --> 01:05:42,580
The number of people who go to Google and type in the website for like their email address, and I have seen a programmer do this.

868
01:05:42,580 --> 01:05:45,580
This is not just like somebody's parents who are older.

869
01:05:45,580 --> 01:05:48,580
I have seen programmers do this.

870
01:05:48,580 --> 01:05:53,580
It's pretty common, even though they know the website.

871
01:05:53,580 --> 01:06:04,580
So when we're talking about findability, we're also talking a little bit about whether people can find what they're looking for in the piece of information you're giving them.

872
01:06:04,580 --> 01:06:12,580
So if we're talking about a piece of documentation, most people are not going to read your entire documentation, everything you've ever written.

873
01:06:12,580 --> 01:06:16,580
They're looking for one small solution to their specific problem.

874
01:06:16,580 --> 01:06:20,580
So when they get to your documentation, they need to be able to find it.

875
01:06:20,580 --> 01:06:24,580
That might mean they're going to search within your documentation.

876
01:06:24,580 --> 01:06:28,580
It also probably means that they're going to skim the content.

877
01:06:28,580 --> 01:06:33,580
So as we're writing these things, we want to make them very skimable.

878
01:06:33,580 --> 01:06:52,580
This is sort of how humans read most websites these days, looking at headlines and subheads, bullet points, anything that is typeset differently, such as bold or italic.

879
01:06:52,580 --> 01:06:58,580
And then short paragraphs are also things that people look for.

880
01:06:58,580 --> 01:07:05,580
They read those pieces rather than the whole piece to make sure that they're getting the information that they need.

881
01:07:05,580 --> 01:07:10,580
So that might mean that you need a table of contents and an index.

882
01:07:10,580 --> 01:07:23,580
Depending on whether you're writing for print or screen, you might want to test some of the search functions on your documentation as you're writing it to make sure that it's still findable.

883
01:07:23,580 --> 01:07:27,580
And since this is Python, lots of white space.

884
01:07:27,580 --> 01:07:33,580
Lots of white space is good for skimming and for writing Python.

885
01:07:33,580 --> 01:07:38,580
We also want to do things like include error messages.

886
01:07:38,580 --> 01:07:47,580
So if somebody is trying to figure out a problem, they're probably going to just copy and paste the error message right into Google and see what pops up.

887
01:07:47,580 --> 01:07:56,580
And if you have a solution for that error message, but that error message isn't in the text of your documentation or article, it may not show up for people.

888
01:07:56,580 --> 01:08:04,580
So using the terms that they're looking for is super important.

889
01:08:04,580 --> 01:08:11,580
We also want to differentiate code samples when we're writing for people who skim.

890
01:08:11,580 --> 01:08:15,580
Python code is, of course, more human readable than average.

891
01:08:15,580 --> 01:08:21,580
But we want to make sure that it is visibly different from the pros that we're offering.

892
01:08:21,580 --> 01:08:30,580
So a lot of people use monospace fonts, indents, whatever makes sense to make sure that it's visibly different.

893
01:08:30,580 --> 01:08:38,580
Lastly, we just want to make sure that we're as consistent as possible with how terms are used outside of our writing.

894
01:08:38,580 --> 01:08:47,580
So like making sure we use brand names correctly, getting spelling right, that sort of thing.

895
01:08:47,580 --> 01:08:55,580
I really also want to say please don't create your own abbreviations that are different than other people's abbreviations because that happens a lot too.

896
01:08:55,580 --> 01:09:03,580
And it's very confusing. And if you're just making an abbreviation for just one article, it's OK to spell out the whole word.

897
01:09:03,580 --> 01:09:09,580
So on the internet, we have extra characters.

898
01:09:09,580 --> 01:09:13,580
OK, trustworthiness.

899
01:09:13,580 --> 01:09:20,580
So not all writers are trustworthy. And I'm not saying that we're a bunch of scammers.

900
01:09:20,580 --> 01:09:26,580
Rather, I'm saying that a lot of writers don't build trust with readers.

901
01:09:26,580 --> 01:09:31,580
They fail to earn the trust of their readers. So how do we earn trust?

902
01:09:31,580 --> 01:09:38,580
First of all, we have to respect the reader. We can't patronize or talk down to readers because we'll lose them.

903
01:09:38,580 --> 01:09:47,580
We want to talk to readers the same way we want people to talk to us. We want that kind of respect.

904
01:09:47,580 --> 01:09:59,580
We also want to respect the community. The Python community can feel really huge, but it's really quite tiny, especially when we consider how interconnected it is.

905
01:09:59,580 --> 01:10:11,580
None of us are going to know every other single Python user in the world, but I'll guarantee that most of us are familiar with the same authors, the same speakers, the same leaders.

906
01:10:11,580 --> 01:10:24,580
We do want to keep to that informal tone because people do tend to respond better to informal tones, especially if they are reading something written by an individual rather than a company.

907
01:10:24,580 --> 01:10:29,580
And a surprising number of programmers don't put their names on things.

908
01:10:29,580 --> 01:10:37,580
There are loads of software consultancy websites out there who I could not tell you who is the programmer behind them.

909
01:10:37,580 --> 01:10:48,580
There's no name, there's no picture, no nothing. And that's a really hard position to be in if you want to build trust because people don't see the human behind the organization.

910
01:10:48,580 --> 01:11:01,580
A little bit of personalization can also be useful. It helps convince readers that not only do you know what you're writing about, you're an actual human. This isn't generated by some content farm.

911
01:11:01,580 --> 01:11:06,580
You also want to include images if you have any.

912
01:11:06,580 --> 01:11:16,580
So I did just talk to you all about how images aren't something to necessarily rely on, but that doesn't mean that you shouldn't use them.

913
01:11:16,580 --> 01:11:27,580
If you have images, you absolutely want to include them because there are numerous studies that people respond much better to images than to the written word.

914
01:11:27,580 --> 01:11:42,580
With that in mind, please do not just put a photo with a pair of hands on a keyboard. I invented that in like 2004. We can move past that and do better images.

915
01:11:42,580 --> 01:11:53,580
We also want to avoid obsolete terms. Technology moves very fast and outdated material isn't trustworthy.

916
01:11:53,580 --> 01:12:06,580
If somebody realizes that there's some documentation going on on a website, they're not going to trust any of the material on that website. They're going to assume that everything is outdated.

917
01:12:06,580 --> 01:12:19,580
We also want to talk about obsolescence outside of strictly technical terms. So the Python community has mostly rejected terminology like master and slave.

918
01:12:19,580 --> 01:12:34,580
I don't want to rehash that whole argument here, but there are two points that I want to highlight. Whether or not you feel personally comfortable using terminology like this, there are people who experience pain when they have to use terms that remind them of terrible experiences.

919
01:12:34,580 --> 01:12:45,580
Furthermore, slavery still exists today, and diluting the meaning of a word like slave can make it harder to work against the end of that sort of practice.

920
01:12:45,580 --> 01:12:58,580
Second, language changes constantly. We should always be expecting more changes. Consider the word literally for a moment. When I tell you that I am literally freezing, you know that I'm cold.

921
01:12:58,580 --> 01:13:08,580
But am I actually literally experiencing a concerning drop in my core temperature? Like actually freezing? Not so much.

922
01:13:08,580 --> 01:13:23,580
And despite my own feelings on the developing interchangeability of the words literally and figuratively, and oh, I have some opinions, the reality is that we haven't just suddenly all agreed to switch the meaning of a word out of nowhere.

923
01:13:23,580 --> 01:13:34,580
Different communities use different words in different ways. Language grows, language changes, especially as we're trying to cover new concepts that we may not already have language for.

924
01:13:34,580 --> 01:13:51,580
Like how the word computer used to refer to a person who was making calculations, but now refers to a whole range of devices. These changes are pretty routine, whether through conversation, slang, academic use, memes, translation.

925
01:13:51,580 --> 01:14:11,580
Anytime that we communicate, these changes happen. English is particularly notorious for these changes. English has a reputation for rifling through other languages' pockets and stealing nouns, which can make the language evolution even a little bit more complicated.

926
01:14:11,580 --> 01:14:23,580
Trying to stop this sort of growth of language is like shouting into the wind. Even if it makes you feel better, it's not going to be effective at stopping the change.

927
01:14:23,580 --> 01:14:36,580
And honestly, a lot of attempts to control language come with some elitist and biased crap behind them. The history of the word ain't is basically a primer on classism and language.

928
01:14:36,580 --> 01:14:51,580
So instead, you really want to think about how you can stay up to date on how language is being used in the Python community. The easiest way to do that is reading widely within the community and see how other people are talking about Python.

929
01:14:51,580 --> 01:15:02,580
And as you see changes, you want to update your past writing so that it remains trustworthy, so that it remains up to date.

930
01:15:02,580 --> 01:15:09,580
All right, so we covered a lot there.

931
01:15:09,580 --> 01:15:16,580
But now we're going to talk about how this really actually applies when we pull out our pen and paper.

932
01:15:16,580 --> 01:15:20,580
So, ton of information that I've just thrown at you.

933
01:15:20,580 --> 01:15:29,580
And I'm a professional writer. I don't keep all those considerations in my head. I can't. If I'm writing, I'm focused on writing.

934
01:15:29,580 --> 01:15:36,580
But since we live in the future, we don't have to memorize this stuff. We can use checklists instead.

935
01:15:36,580 --> 01:15:43,580
And this is actually a checklist that I use specifically for Python projects.

936
01:15:43,580 --> 01:15:52,580
I write an outline and then I check this list. I write an incredibly bad first draft and then I check this list.

937
01:15:52,580 --> 01:15:57,580
I write another draft after I show it to somebody and improve some things and I check this list again.

938
01:15:57,580 --> 01:16:04,580
I check it over and over again because I want to make sure that I don't edit out something that is necessary.

939
01:16:04,580 --> 01:16:12,580
I want to make sure that I don't make changes that violate one of these rules along the way.

940
01:16:12,580 --> 01:16:20,580
So these checklists help us catch the potential issues that we've been discussing before they can turn into real problems.

941
01:16:20,580 --> 01:16:25,580
So in case I haven't said it enough yet, Python version numbers.

942
01:16:25,580 --> 01:16:30,580
We also are shooting for roughly an eighth grade reading level.

943
01:16:30,580 --> 01:16:34,580
If you find another metric you want to use, go for it.

944
01:16:34,580 --> 01:16:40,580
There's just not a lot of metrics that are easily accessible for writing complexity.

945
01:16:40,580 --> 01:16:44,580
We want to make sure that we've got up to date tech references.

946
01:16:44,580 --> 01:16:54,580
Pro tip, if you ever work on a project for more than a couple of months, you will have to like check for those tech references again and again.

947
01:16:54,580 --> 01:16:59,580
Because they may not stay the same over the months of the project.

948
01:16:59,580 --> 01:17:08,580
So with the Python style supplement, when I started writing it, there was an entirely different governance structure for this language.

949
01:17:08,580 --> 01:17:13,580
Which I then had to update as we were moving on.

950
01:17:13,580 --> 01:17:19,580
We also want to get rid of any of our passive zombies, unattended antecedents.

951
01:17:19,580 --> 01:17:22,580
So antecedents without pronouns.

952
01:17:22,580 --> 01:17:27,580
Or excuse me, antecedents, pronouns without nouns.

953
01:17:27,580 --> 01:17:31,580
We want to make sure that we've got a consistent style.

954
01:17:31,580 --> 01:17:36,580
Whether we're referring to brand names, sharing code samples.

955
01:17:36,580 --> 01:17:42,580
No matter what we do, we just want to be consistent with it throughout the whole piece.

956
01:17:42,580 --> 01:17:44,580
We also want to eliminate huge blocks of text.

957
01:17:44,580 --> 01:17:50,580
We want to have that white space so that people can skim where possible.

958
01:17:50,580 --> 01:17:52,580
We want to have those visuals.

959
01:17:52,580 --> 01:17:57,580
And then we also want to eliminate any wishy washy language.

960
01:17:57,580 --> 01:18:00,580
Your experts be confident in your knowledge.

961
01:18:00,580 --> 01:18:09,580
So now we are going to look at an actual article that I think is written pretty well.

962
01:18:09,580 --> 01:18:14,580
And I am going to hand that out whenever I find the bottom of the pile.

963
01:18:28,580 --> 01:18:36,580
I'm not 100% sure that we have enough copies, but we should have enough copies for everyone to share.

964
01:18:39,580 --> 01:18:48,580
Okay.

965
01:18:48,580 --> 01:18:57,580
So I'm also going to pull this up here so that we can all look at the same thing.

966
01:18:57,580 --> 01:19:02,580
So I'm going to give everybody a minute or two to actually read through this.

967
01:19:02,580 --> 01:19:05,580
And then we're going to talk about what it does well.

968
01:19:05,580 --> 01:19:09,580
So just take a minute and then we will start talking.

969
01:19:35,580 --> 01:19:40,580
Okay.

970
01:20:05,580 --> 01:20:30,580
Are we short back there?

971
01:20:30,580 --> 01:20:34,580
How many are we short?

972
01:20:34,580 --> 01:20:35,580
Two or three.

973
01:20:35,580 --> 01:20:47,580
Can I persuade a couple of people up front to share?

974
01:20:47,580 --> 01:21:02,580
Thank you.

975
01:21:17,580 --> 01:21:42,580
I think everybody has at least a copy to share back there, but you're welcome to take it back.

976
01:21:42,580 --> 01:22:07,580
Okay.

977
01:22:07,580 --> 01:22:36,580
Absolutely.

978
01:22:36,580 --> 01:22:39,580
So I'm going to go ahead and start with the first one.

979
01:22:39,580 --> 01:22:41,580
So I'm going to start with the first one.

980
01:22:41,580 --> 01:22:43,580
So I'm going to start with the first one.

981
01:22:43,580 --> 01:22:45,580
So I'm going to start with the first one.

982
01:22:45,580 --> 01:22:47,580
So I'm going to start with the first one.

983
01:22:47,580 --> 01:22:49,580
So I'm going to start with the first one.

984
01:22:49,580 --> 01:22:51,580
So I'm going to start with the first one.

985
01:22:51,580 --> 01:22:53,580
So I'm going to start with the first one.

986
01:22:53,580 --> 01:22:55,580
So I'm going to start with the first one.

987
01:22:55,580 --> 01:22:57,580
So I'm going to start with the first one.

988
01:22:57,580 --> 01:22:59,580
So I'm going to start with the first one.

989
01:22:59,580 --> 01:23:01,580
So I'm going to start with the first one.

990
01:23:01,580 --> 01:23:03,580
So I'm going to start with the first one.

991
01:23:03,580 --> 01:23:06,580
Okay.

992
01:23:06,580 --> 01:23:11,580
So this is a pretty decent article about Python packaging.

993
01:23:11,580 --> 01:23:22,580
I'm going to admit that this is kind of a trick because I don't think there is any version number mentioned in this article,

994
01:23:22,580 --> 01:23:28,580
but because of the topic that it's talking about, the version number is a little less necessary,

995
01:23:28,580 --> 01:23:35,580
so I would still email the person who wrote it and ask them to put it in.

996
01:23:35,580 --> 01:23:38,580
But let's talk about what works well here.

997
01:23:38,580 --> 01:23:48,580
So we have some pretty good explanations here.

998
01:23:48,580 --> 01:23:57,580
So here they're talking about what people will think in terms of release versions rather than like specific distributions.

999
01:23:57,580 --> 01:24:08,580
We don't even really necessarily need to know exactly in this context what they mean because they go through examples that explain what they mean.

1000
01:24:08,580 --> 01:24:21,580
So they're disambiguating what these terms might be used for elsewhere because not every single community uses release versions or distributions in exactly the same way.

1001
01:24:21,580 --> 01:24:24,580
So they explain it.

1002
01:24:24,580 --> 01:24:30,580
They also...

1003
01:24:30,580 --> 01:24:38,580
I don't know if you can tell on the screen, but you can see that on the paper that pip is in a monospace font.

1004
01:24:38,580 --> 01:24:48,580
So they made the choice that in addition to code samples, they're going to monospace anything that basically you're going to put into the command line.

1005
01:24:48,580 --> 01:24:50,580
I like that approach.

1006
01:24:50,580 --> 01:25:04,580
Some people feel that it's a little bit difficult, especially to make sure that when you copy and paste, your styles don't change, but I think it's a really good visual indicator.

1007
01:25:04,580 --> 01:25:14,580
So are there any pieces of this that might be really good for skimmability?

1008
01:25:14,580 --> 01:25:16,580
Yes, bullet points.

1009
01:25:16,580 --> 01:25:19,580
I may have cheated a little bit.

1010
01:25:19,580 --> 01:25:31,580
These paragraphs are kind of about as long as you would want to go in this situation, but they've made it more skimmable by breaking things up into bullet points here.

1011
01:25:31,580 --> 01:25:37,580
They also have given us like this very skimmable conclusion.

1012
01:25:37,580 --> 01:25:44,580
And a lot of programmers are like people who read novels and skip to the end.

1013
01:25:44,580 --> 01:25:51,580
They'll just read the conclusion and then just go back up to the top if it's the piece that they want.

1014
01:25:51,580 --> 01:25:56,580
There are a few things that I'm less excited about here.

1015
01:25:56,580 --> 01:26:01,580
They've got...

1016
01:26:01,580 --> 01:26:07,580
They mention things like PIDIST, but don't give any definition for it or any context.

1017
01:26:07,580 --> 01:26:12,580
But overall, it's a pretty good article.

1018
01:26:12,580 --> 01:26:17,580
So is there anything in here that anybody saw that was confusing?

1019
01:26:17,580 --> 01:26:25,580
Yeah.

1020
01:26:25,580 --> 01:26:27,580
Yes, they did not.

1021
01:26:27,580 --> 01:26:29,580
There are some typos in here.

1022
01:26:29,580 --> 01:26:33,580
I did not correct these typos.

1023
01:26:33,580 --> 01:26:41,580
But yeah, that's something that during your editing process you would go through and you would check those pieces to make sure that they're correct.

1024
01:26:41,580 --> 01:26:46,580
Any other questions about this article or issues that you see?

1025
01:26:46,580 --> 01:26:58,580
There was something at the top that I kind of highlighted on...

1026
01:26:58,580 --> 01:27:01,580
In most languages, said file.

1027
01:27:01,580 --> 01:27:04,580
But it might be a little confusing to some people.

1028
01:27:04,580 --> 01:27:15,580
But the main thing about that paragraph is we have basically a bullet list that you know the bytecode and it might be easier to consume if you're going to have to write it.

1029
01:27:15,580 --> 01:27:17,580
Absolutely.

1030
01:27:17,580 --> 01:27:27,580
With this sort of article, I think that what you're pointing out about the said file is particularly important because that's a construction that...

1031
01:27:27,580 --> 01:27:29,580
It's what I would call a fancy construction.

1032
01:27:29,580 --> 01:27:32,580
Like it's not something that everybody would use every day in their writing.

1033
01:27:32,580 --> 01:27:36,580
So not every reader would move smoothly over it.

1034
01:27:36,580 --> 01:27:43,580
And yeah, we definitely have an opportunity to make more bullet points here.

1035
01:27:43,580 --> 01:28:11,580
Yeah.

1036
01:28:11,580 --> 01:28:14,580
I think that that would be definitely a great improvement.

1037
01:28:14,580 --> 01:28:19,580
Who do you think is the persona, the audience for this article?

1038
01:28:19,580 --> 01:28:24,580
You already got part way there with knowing what package managers are.

1039
01:28:24,580 --> 01:28:35,580
Would you say that's a skill that...or a topic that a newer programmer would be familiar with or just a more experienced one?

1040
01:28:35,580 --> 01:28:37,580
Yeah.

1041
01:28:37,580 --> 01:28:46,580
So yeah, this is probably aimed more at our piper, our more senior developer than a newer developer.

1042
01:28:46,580 --> 01:28:50,580
If it was for a newer developer, we would want to see a lot more context.

1043
01:28:50,580 --> 01:28:52,580
We would want to see a lot more explanation.

1044
01:28:52,580 --> 01:28:58,580
But for somebody who has a good working knowledge, this is very accessible.

1045
01:28:58,580 --> 01:29:15,580
I think that even our expert in another language dev would find this material pretty easy to go through and make use of.

1046
01:29:15,580 --> 01:29:16,580
We're coming back.

1047
01:29:16,580 --> 01:29:21,580
So the checklist is for us, but the readers are for other people.

1048
01:29:21,580 --> 01:29:24,580
So we're going to talk about other people in a minute.

1049
01:29:24,580 --> 01:29:43,580
Yeah.

1050
01:29:43,580 --> 01:29:45,580
Absolutely.

1051
01:29:45,580 --> 01:29:49,580
This could be a case for footnotes even.

1052
01:29:49,580 --> 01:29:56,580
If you wanted to footnote some of the abbreviations to make sure it's clear or spell it out in line.

1053
01:29:56,580 --> 01:30:04,580
Both are perfectly reasonable approaches to this sort of question.

1054
01:30:04,580 --> 01:30:15,580
All right.

1055
01:30:15,580 --> 01:30:28,580
I have to get my notes back now.

1056
01:30:28,580 --> 01:30:31,580
All my super secret notes you get to see.

1057
01:30:31,580 --> 01:30:32,580
All right.

1058
01:30:32,580 --> 01:30:38,580
So we are 10 minutes to the break, and I have a bad example for us to look at.

1059
01:30:38,580 --> 01:30:44,580
And I realize that the stack is even smaller than the other ones, so I definitely don't have enough copies.

1060
01:30:44,580 --> 01:30:56,580
So what I'm going to do is I'm going to hand it out, and between now and the end of the break, if everybody can get a chance to look at one of these copies, we will discuss this article after we come back from the break.

1061
01:30:56,580 --> 01:31:00,580
So I'm going to put the checklist back up.

1062
01:31:00,580 --> 01:31:10,580
And I'd like everybody to try to find three things in here which violate that checklist and figure out how you would fix them in your experience.

1063
01:31:10,580 --> 01:31:11,580
Cool.

1064
01:31:11,580 --> 01:31:13,580
Does that make sense to everybody?

1065
01:31:13,580 --> 01:31:14,580
All right.

1066
01:31:14,580 --> 01:31:19,580
So this article may be a little bit more controversial.

1067
01:31:19,580 --> 01:31:21,580
It's also a little bit longer.

1068
01:31:21,580 --> 01:31:25,580
So there's two pages to that.

1069
01:31:25,580 --> 01:31:29,580
So everybody wants to just team up and share a copy.

1070
01:31:29,580 --> 01:31:34,580
This one is about PHP.

1071
01:31:34,580 --> 01:31:39,580
This is a comparison of PHP and Python.

1072
01:31:39,580 --> 01:31:54,580
Yes, it's two pages.

1073
01:31:54,580 --> 01:31:58,580
So I am confident you will find a lot of errors in this article.

1074
01:31:58,580 --> 01:32:03,580
This is as it ran online, by the way.

1075
01:32:03,580 --> 01:32:10,580
But the one thing that I don't necessarily want to talk about is whether or not PHP or Python is better.

1076
01:32:10,580 --> 01:32:22,580
Let us assume that the writer is trying to make that point, and we don't have to argue that point with them.

1077
01:32:22,580 --> 01:32:45,580
I can also make this available online if anybody wants to read it online.

1078
01:32:45,580 --> 01:32:47,580
So here's our checklist.

1079
01:32:47,580 --> 01:32:49,580
And I will wander around.

1080
01:33:17,580 --> 01:33:38,580
Oops.

1081
01:33:38,580 --> 01:33:40,580
I'm working on that right now.

1082
01:34:38,580 --> 01:34:45,580
Great.

1083
01:34:45,580 --> 01:34:50,580
So in five minutes, we will all head out for snack break.

1084
01:35:15,580 --> 01:35:42,580
Okay.

1085
01:35:42,580 --> 01:36:02,580
Okay.

1086
01:36:02,580 --> 01:36:08,580
There's now a version up at this link as well.

1087
01:36:08,580 --> 01:36:25,580
So if anybody wants to read online.

1088
01:36:25,580 --> 01:36:50,580
There we go.

1089
01:36:50,580 --> 01:37:15,580
Okay.

1090
01:37:15,580 --> 01:37:34,580
Okay.

1091
01:37:34,580 --> 01:37:57,580
Okay.

1092
01:37:57,580 --> 01:38:20,580
Okay.

1093
01:38:20,580 --> 01:38:44,580
Okay.

1094
01:38:44,580 --> 01:38:51,580
Of course it doesn't work because why should anything be easy when you are doing it live during a presentation?

1095
01:38:51,580 --> 01:38:52,580
Great.

1096
01:39:14,580 --> 01:39:29,580
Okay.

1097
01:39:29,580 --> 01:39:34,580
That is working when I tested.

1098
01:39:34,580 --> 01:39:39,580
Oh, it is 3 o'clock if folks want to get snacks.

1099
01:39:39,580 --> 01:39:42,580
And then we'll just meet back here and keep going.

1100
01:39:42,580 --> 01:39:51,580
I think the snack break is like 10 minutes long, 15 minutes long.

1101
01:39:51,580 --> 01:39:56,580
Okay.

1102
01:40:21,580 --> 01:40:44,580
Okay.

1103
01:40:44,580 --> 01:40:59,580
I do.

1104
01:40:59,580 --> 01:41:01,580
I've written some blog posts.

1105
01:41:01,580 --> 01:41:09,580
I was talking a couple of years ago about a WordPress book, but I don't like WordPress enough to write a book about it.

1106
01:41:09,580 --> 01:41:12,580
So.

1107
01:41:12,580 --> 01:41:24,580
Oh, there are a few people who love it to pieces.

1108
01:41:24,580 --> 01:41:44,580
I mean, WordPress is what kind of got me into programming because screen around under the hood is a good way to learn to program.

1109
01:41:44,580 --> 01:41:49,580
So have you heard like the number, the percentage of the web that runs on WordPress?

1110
01:41:49,580 --> 01:41:52,580
Yeah.

1111
01:41:52,580 --> 01:42:00,580
Yeah, like a third of the web supposedly runs on WordPress.

1112
01:42:00,580 --> 01:42:11,580
So that one, there was a 2018 update to that number and it was still about a third.

1113
01:42:11,580 --> 01:42:36,580
I mean, for people's first website.

1114
01:42:36,580 --> 01:43:03,580
Okay.

1115
01:43:03,580 --> 01:43:08,580
Okay.

1116
01:43:33,580 --> 01:44:00,580
Okay.

1117
01:44:00,580 --> 01:44:27,580
Okay.

1118
01:44:27,580 --> 01:44:54,580
Okay.

1119
01:44:54,580 --> 01:45:21,580
Okay.

1120
01:45:21,580 --> 01:45:49,580
Okay.

1121
01:45:49,580 --> 01:46:16,580
Okay.

1122
01:46:16,580 --> 01:46:43,580
Okay.

1123
01:46:43,580 --> 01:47:10,580
Okay.

1124
01:47:10,580 --> 01:47:38,580
Okay.

1125
01:47:38,580 --> 01:48:06,580
Okay.

1126
01:48:06,580 --> 01:48:34,580
Okay.

1127
01:48:34,580 --> 01:49:01,580
Okay.

1128
01:49:01,580 --> 01:49:28,580
Okay.

1129
01:49:28,580 --> 01:49:56,580
Okay.

1130
01:49:56,580 --> 01:50:21,580
Okay.

1131
01:50:21,580 --> 01:50:48,580
Okay.

1132
01:50:48,580 --> 01:51:16,580
Okay.

1133
01:51:16,580 --> 01:51:43,580
Okay.

1134
01:51:43,580 --> 01:52:11,580
Okay.

1135
01:52:11,580 --> 01:52:33,580
Okay.

1136
01:52:33,580 --> 01:52:55,580
Okay.

1137
01:52:55,580 --> 01:53:22,580
Okay.

1138
01:53:22,580 --> 01:53:50,580
Okay.

1139
01:53:50,580 --> 01:54:05,580
Okay.

1140
01:54:05,580 --> 01:54:20,580
Okay.

1141
01:54:20,580 --> 01:54:35,580
Okay.

1142
01:54:35,580 --> 01:54:50,580
Okay.

1143
01:54:50,580 --> 01:55:05,580
Okay.

1144
01:55:05,580 --> 01:55:24,580
Okay.

1145
01:55:24,580 --> 01:55:29,580
I think we have just about everybody back.

1146
01:55:29,580 --> 01:55:53,580
So yeah, let's get started talking about PHP and Python.

1147
01:55:53,580 --> 01:56:13,580
Okay.

1148
01:56:13,580 --> 01:56:18,580
I am pretty sure this person actually got paid to write this for a freelance position,

1149
01:56:18,580 --> 01:56:26,580
which the world is a cruel, cruel place, especially to people who care about writing.

1150
01:56:26,580 --> 01:56:28,580
Aaron?

1151
01:56:28,580 --> 01:56:56,580
Yeah.

1152
01:56:56,580 --> 01:56:57,580
Okay.

1153
01:56:57,580 --> 01:56:58,580
Okay.

1154
01:56:58,580 --> 01:56:59,580
Okay.

1155
01:56:59,580 --> 01:57:00,580
Okay.

1156
01:57:00,580 --> 01:57:01,580
Okay.

1157
01:57:01,580 --> 01:57:02,580
Okay.

1158
01:57:02,580 --> 01:57:03,580
Okay.

1159
01:57:03,580 --> 01:57:04,580
Okay.

1160
01:57:04,580 --> 01:57:05,580
Okay.

1161
01:57:05,580 --> 01:57:06,580
Okay.

1162
01:57:06,580 --> 01:57:07,580
Okay.

1163
01:57:07,580 --> 01:57:08,580
Okay.

1164
01:57:08,580 --> 01:57:09,580
Okay.

1165
01:57:09,580 --> 01:57:10,580
Okay.

1166
01:57:10,580 --> 01:57:11,580
Okay.

1167
01:57:11,580 --> 01:57:12,580
Okay.

1168
01:57:12,580 --> 01:57:13,580
Okay.

1169
01:57:13,580 --> 01:57:14,580
Okay.

1170
01:57:14,580 --> 01:57:15,580
Okay.

1171
01:57:15,580 --> 01:57:16,580
Okay.

1172
01:57:16,580 --> 01:57:17,580
Okay.

1173
01:57:17,580 --> 01:57:18,580
Okay.

1174
01:57:18,580 --> 01:57:19,580
Okay.

1175
01:57:19,580 --> 01:57:20,580
Okay.

1176
01:57:20,580 --> 01:57:21,580
Okay.

1177
01:57:21,580 --> 01:57:22,580
Okay.

1178
01:57:22,580 --> 01:57:23,580
Okay.

1179
01:57:23,580 --> 01:57:24,580
Okay.

1180
01:57:25,580 --> 01:57:30,580
Yeah, it's really hard to tell what audience they think they're writing for.

1181
01:57:30,580 --> 01:57:36,580
Like, this is a question that I would think most beginner programmers would have, like,

1182
01:57:36,580 --> 01:57:40,580
what's the first programming language you should really put a lot of effort to?

1183
01:57:40,580 --> 01:57:48,580
But it doesn't necessarily give enough context for one of our beginner programmer personas.

1184
01:57:48,580 --> 01:57:50,580
There's just not enough information.

1185
01:57:50,580 --> 01:57:51,580
I'm going to...

1186
01:57:51,580 --> 01:57:53,580
Oh, you have a follow-up?

1187
01:57:53,580 --> 01:57:54,580
Oh, yeah.

1188
01:57:54,580 --> 01:58:13,580
So that's a really good question, whether or not bias adds tone.

1189
01:58:13,580 --> 01:58:17,580
Bias does definitely have a connection to tone.

1190
01:58:17,580 --> 01:58:22,580
You do want to bring your opinions to a piece, your experience.

1191
01:58:22,580 --> 01:58:28,580
But this definitely is going too far in bias, in my opinion.

1192
01:58:28,580 --> 01:58:32,580
If it reads like an ad, just like you said, it feels like an ad.

1193
01:58:32,580 --> 01:58:40,580
And this definitely feels like something that somebody wrote just to put their opinion out there

1194
01:58:40,580 --> 01:58:48,580
and, you know, make an article without necessarily having a plan behind it.

1195
01:58:48,580 --> 01:58:52,580
Any other errors in the back?

1196
01:58:52,580 --> 01:59:14,580
Yeah.

1197
01:59:14,580 --> 01:59:20,580
Yeah, it's almost like they needed to hit some sort of word count and pad it,

1198
01:59:20,580 --> 01:59:23,580
just like we might have done in high school or something.

1199
01:59:23,580 --> 01:59:35,580
Yeah.

1200
01:59:35,580 --> 01:59:38,580
Yeah, we could probably get rid of the first two-thirds of this article

1201
01:59:38,580 --> 01:59:42,580
and still have roughly the same piece of communication.

1202
01:59:42,580 --> 01:59:43,580
Yeah.

1203
01:59:43,580 --> 01:59:48,580
So in the popularity section, well, there's no visualizations at all, right?

1204
01:59:48,580 --> 01:59:53,580
But then in the popularity section, where you could easily put a visualization

1205
01:59:53,580 --> 01:59:58,580
talking about some method of preparing the usage of HBA-5R

1206
01:59:58,580 --> 02:00:04,580
or something beyond just a connect connect that has no other context.

1207
02:00:04,580 --> 02:00:07,580
And there's also no tie-in on the first whole article,

1208
02:00:07,580 --> 02:00:12,580
so that that opinion is rooted in the context of what they put in.

1209
02:00:12,580 --> 02:00:16,580
Yeah, it's not even clear what version we're talking about

1210
02:00:16,580 --> 02:00:21,580
if maybe a newer version of PHP is more competitive to Python or vice versa.

1211
02:00:21,580 --> 02:00:23,580
Yeah.

1212
02:00:23,580 --> 02:00:25,580
Aaron?

1213
02:00:25,580 --> 02:00:53,580
Yeah.

1214
02:00:53,580 --> 02:00:55,580
Yeah.

1215
02:00:55,580 --> 02:00:59,580
I consider this kind of the prose version of just read the code.

1216
02:00:59,580 --> 02:01:00,580
It's fine.

1217
02:01:00,580 --> 02:01:01,580
You can do that.

1218
02:01:01,580 --> 02:01:04,580
Like, it's not giving the context for the decision or anything.

1219
02:01:04,580 --> 02:01:07,580
Yeah.

1220
02:01:07,580 --> 02:01:12,580
Yeah.

1221
02:01:12,580 --> 02:01:15,580
Yeah, this never saw an editor.

1222
02:01:15,580 --> 02:01:18,580
Just got tossed up.

1223
02:01:18,580 --> 02:01:35,580
And metaphors is kind of, they're kind of interesting, right?

1224
02:01:35,580 --> 02:01:40,580
Because a lot of our metaphors are really rooted in our own experiences.

1225
02:01:40,580 --> 02:01:46,580
I'm not 100% sure what this person's experiences are from the metaphors.

1226
02:01:46,580 --> 02:01:49,580
They just don't quite work.

1227
02:01:49,580 --> 02:01:54,580
When I read something that suffers from that problem,

1228
02:01:54,580 --> 02:02:01,580
it's usually because it was a person whose first language is not, who's written it.

1229
02:02:01,580 --> 02:02:04,580
And they can perfectly understand what they've written,

1230
02:02:04,580 --> 02:02:11,580
but their command of the language is not quite good enough to be applied to metaphors.

1231
02:02:11,580 --> 02:02:14,580
And I've seen that many times in my work.

1232
02:02:14,580 --> 02:02:17,580
And it's always someone whose first language is not.

1233
02:02:17,580 --> 02:02:18,580
Yeah.

1234
02:02:18,580 --> 02:02:25,580
So people who are writing with English as their second language will have some definite,

1235
02:02:25,580 --> 02:02:29,580
will be more likely to have some metaphor questions.

1236
02:02:29,580 --> 02:02:31,580
Why do you want to have them for reading?

1237
02:02:31,580 --> 02:02:32,580
Absolutely.

1238
02:02:32,580 --> 02:02:33,580
Absolutely.

1239
02:02:33,580 --> 02:02:36,580
I would also say that there are a lot of varieties of English,

1240
02:02:36,580 --> 02:02:40,580
and idioms are different in different varieties of English.

1241
02:02:40,580 --> 02:02:47,580
So it's not just a question of whether somebody speaks English as their first or second language.

1242
02:02:47,580 --> 02:02:52,580
It's kind of a question of which English that they speak.

1243
02:02:52,580 --> 02:02:57,580
For that reason, I'm kind of in favor of not putting too many metaphors.

1244
02:02:57,580 --> 02:03:01,580
The more precise your description rather than metaphorical,

1245
02:03:01,580 --> 02:03:05,580
at least on the technical topic, probably the clearer you're going to be.

1246
02:03:05,580 --> 02:03:07,580
I saw your hand, I think.

1247
02:03:07,580 --> 02:03:10,580
I'm very happy to have you.

1248
02:03:10,580 --> 02:03:12,580
I'm very happy to have you.

1249
02:03:12,580 --> 02:03:14,580
I'm very happy to have you.

1250
02:03:14,580 --> 02:03:18,580
But often people have to be out there to write.

1251
02:03:18,580 --> 02:03:22,580
I think that's another community that is more,

1252
02:03:22,580 --> 02:03:28,580
you shouldn't describe so much moment to moment speakers, right?

1253
02:03:28,580 --> 02:03:32,580
Because I think it's all like, even names speakers, right?

1254
02:03:32,580 --> 02:03:35,580
I'm really happy to be back.

1255
02:03:35,580 --> 02:03:49,580
But many programs that I've been working on, I just didn't get it.

1256
02:03:49,580 --> 02:03:51,580
Yeah, so that's very true.

1257
02:03:51,580 --> 02:03:57,580
Most projects do not have a lot of support for folks who don't speak English as their first language

1258
02:03:57,580 --> 02:04:00,580
who want to contribute on a writing level.

1259
02:04:00,580 --> 02:04:07,580
This is kind of one of my issues with open source is that we talk a lot about code reviews

1260
02:04:07,580 --> 02:04:14,580
and making sure our code is great, but we don't mirror that with documentation reviews on the same level

1261
02:04:14,580 --> 02:04:21,580
or editing one another's work or supporting the pieces of an open source project that aren't just code.

1262
02:04:21,580 --> 02:04:25,580
I think Python is maybe a little bit better than some communities about that,

1263
02:04:25,580 --> 02:04:35,580
but getting an open source project to designate documentation as a requirement for a library

1264
02:04:35,580 --> 02:04:42,580
before it can be released is a really tough argument to make to most communities.

1265
02:04:42,580 --> 02:04:48,580
To the definition of done, right, once you document it, and if you make documentation as code, right,

1266
02:04:48,580 --> 02:04:53,580
in the code that has to be reviewed, then it helps a lot.

1267
02:04:53,580 --> 02:04:57,580
It's better to have some documentation written by somebody who doesn't do English very well

1268
02:04:57,580 --> 02:05:01,580
because it's better for nothing as long as it doesn't confuse the point more, right?

1269
02:05:01,580 --> 02:05:04,580
But you've got to integrate it into your Python.

1270
02:05:04,580 --> 02:05:05,580
Yep.

1271
02:05:05,580 --> 02:05:11,580
So a lot of the writing I have to do tends to be for the global audience,

1272
02:05:11,580 --> 02:05:17,580
and I've always stumbled on metaphors. I've had to pull that out.

1273
02:05:17,580 --> 02:05:23,580
So do you have, like, pull out metaphors that don't apply globally?

1274
02:05:23,580 --> 02:05:27,580
But then I feel like, ah, I'm writing for him.

1275
02:05:27,580 --> 02:05:32,580
So do you have suggestions on what I could do to...

1276
02:05:32,580 --> 02:05:38,580
So the thing I would say first about technical writing is that sometimes it's allowed to be boring.

1277
02:05:38,580 --> 02:05:44,580
Sometimes the information that you're conveying is more important than making everybody...

1278
02:05:44,580 --> 02:05:48,580
Like, I think I'm the only person I know who reads documentation for fun.

1279
02:05:48,580 --> 02:05:52,580
Like, nobody does that, so...

1280
02:05:52,580 --> 02:05:56,580
Also, if you get really bored and want a great piece of documentation to read,

1281
02:05:56,580 --> 02:06:01,580
Mailchimp's is worth reading just straight through. It's pretty good.

1282
02:06:01,580 --> 02:06:04,580
Because it has these qualities?

1283
02:06:04,580 --> 02:06:09,580
Yeah. So it's globally minded. You won't see a lot of metaphors.

1284
02:06:09,580 --> 02:06:15,580
The metaphors that you'll see are more related to things that are a little bit more global.

1285
02:06:15,580 --> 02:06:19,580
So, like, food is a good one. Most people have to eat.

1286
02:06:19,580 --> 02:06:28,580
Whereas pop culture is tough, anything revolving around, like, mechanical skills is...

1287
02:06:28,580 --> 02:06:32,580
Like, I've seen a lot of... This is just like the carburetor in a car...

1288
02:06:32,580 --> 02:06:37,580
I'm sorry, I couldn't point out a carburetor if you paid me to.

1289
02:06:37,580 --> 02:06:43,580
I wouldn't even know.

1290
02:06:43,580 --> 02:06:56,580
I would also say that a lot of metaphors have context that if you really want to use them,

1291
02:06:56,580 --> 02:07:04,580
you can explain the context. But I would be very careful about metaphors that have cultural elements.

1292
02:07:04,580 --> 02:07:10,580
One of my pet peeves is actually the metaphor to open the kimono.

1293
02:07:10,580 --> 02:07:16,580
I think it is a terrible metaphor, and I hear it especially from, like, salespeople,

1294
02:07:16,580 --> 02:07:20,580
but I've heard it other places. Like, it's the idea of, like, drawing back the curtain,

1295
02:07:20,580 --> 02:07:23,580
which is much less offensive.

1296
02:07:24,580 --> 02:07:34,580
I do have a friend who responded to somebody telling her that with asking if they wanted to take off their shirt to explain it to her.

1297
02:07:34,580 --> 02:07:38,580
But, yeah, I wouldn't use certain metaphors as a result.

1298
02:07:38,580 --> 02:07:42,580
It is absolutely okay to be boring.

1299
02:07:42,580 --> 02:07:44,580
Yeah?

1300
02:08:00,580 --> 02:08:03,580
That's kind of a complicated question.

1301
02:08:12,580 --> 02:08:27,580
Right. So I would say that right now you're going to be seeing more things in English than any other language.

1302
02:08:27,580 --> 02:08:32,580
So for Python in particular, there are some folks writing in Spanish.

1303
02:08:32,580 --> 02:08:40,580
I've seen some German and I think some Chinese, Mandarin, but not a lot else.

1304
02:08:40,580 --> 02:08:48,580
And part of that, I think, is because English has sort of become this common language for most programming communities.

1305
02:08:48,580 --> 02:08:54,580
But it's also because there's not necessarily support to create materials in other languages.

1306
02:08:54,580 --> 02:09:01,580
Like, a lot of technical translators that I know who have translated documentation are doing this work on their own time.

1307
02:09:01,580 --> 02:09:07,580
It's open source, which is great. I'm very glad that people are willing to put in time.

1308
02:09:07,580 --> 02:09:16,580
But translation is one of those places that if you are able to throw some resources at it, it moves a lot faster and it moves a lot easier.

1309
02:09:16,580 --> 02:09:23,580
I do think that we're going to see English continue to be the main language for quite a while when it comes to programming.

1310
02:09:23,580 --> 02:09:32,580
Personally, though, I think there's a lot of value in exploring other languages and how they would impact programming.

1311
02:09:32,580 --> 02:09:40,580
There is currently only one programming language that reads right to left instead of left to right.

1312
02:09:40,580 --> 02:09:50,580
And it kind of astounds me that there's only one because it does make you think about things a little bit different if you're changing things up, if you use a different language.

1313
02:09:50,580 --> 02:10:00,580
Not all languages have the same concepts, the same terminology, though English is very willing to steal those words off of anybody else.

1314
02:10:00,580 --> 02:10:06,580
So as a result, I mean, English isn't one language.

1315
02:10:06,580 --> 02:10:10,580
It's like three languages stacked in a trench coat trying to get into a movie.

1316
02:10:10,580 --> 02:10:15,580
There's just so much going on.

1317
02:10:15,580 --> 02:10:19,580
All right. Any other thoughts on this article?

1318
02:10:30,580 --> 02:10:47,580
So, yeah, yeah.

1319
02:10:47,580 --> 02:10:58,580
So I do think this article uses both terms and spellings that are found in American English and British English.

1320
02:10:58,580 --> 02:11:02,580
I don't think that it matters which one you go with as long as you're consistent.

1321
02:11:02,580 --> 02:11:09,580
It's the consistency that makes it noticeably problematic rather than which choice it could have been.

1322
02:11:09,580 --> 02:11:18,580
So, I mean, you say that it's nitpicky, but little details like consistency completely change the experience somebody has.

1323
02:11:18,580 --> 02:11:26,580
So I think that this is one of those cases where being detail oriented is really valuable.

1324
02:11:26,580 --> 02:11:28,580
Anybody else? Good.

1325
02:11:28,580 --> 02:11:45,580
All right.

1326
02:11:45,580 --> 02:11:49,580
Sorry, this is.

1327
02:11:49,580 --> 02:11:52,580
There we go.

1328
02:11:52,580 --> 02:11:53,580
All right.

1329
02:11:53,580 --> 02:12:05,580
So on this article, if some poor, poor editor had had to go through it, a lot of the errors that we looked at probably wouldn't have made it through.

1330
02:12:05,580 --> 02:12:09,580
At least anything like a run on sentence, a typo, that sort of stuff.

1331
02:12:09,580 --> 02:12:13,580
But the reality is that a lot of us don't have access to an editor.

1332
02:12:13,580 --> 02:12:18,580
We're usually responsible for editing our own work.

1333
02:12:18,580 --> 02:12:27,580
In open source, that might be because there aren't a lot of people who do documentation or have the skill set to edit with you.

1334
02:12:27,580 --> 02:12:33,580
In companies, it just might be because there's not budget to bring in anybody else.

1335
02:12:33,580 --> 02:12:45,580
So self editing, while it is not enough to do all of your editing, sometimes we have to pretend that it's a good solution.

1336
02:12:45,580 --> 02:12:59,580
So when we don't have money for editors, how can we edit our work?

1337
02:12:59,580 --> 02:13:04,580
It's as simple as asking somebody, anybody to read your piece.

1338
02:13:04,580 --> 02:13:06,580
And I say anybody.

1339
02:13:06,580 --> 02:13:09,580
I don't necessarily mean anybody off the street.

1340
02:13:09,580 --> 02:13:20,580
But anybody who can give it a once over, even if they're not an expert, is better than having nobody at all look at it.

1341
02:13:20,580 --> 02:13:24,580
You want to build kind of a list of people you can convince to read things.

1342
02:13:24,580 --> 02:13:32,580
People that you can trust, people who maybe have different experiences than you and will catch things you can't.

1343
02:13:32,580 --> 02:13:36,580
And they're often people who have to be comfortable working for free.

1344
02:13:36,580 --> 02:13:43,580
So if they can and if they can't, that's okay.

1345
02:13:43,580 --> 02:13:49,580
Out of all of your readers, you want to look for three specific types of readers.

1346
02:13:49,580 --> 02:13:53,580
The first is diversity and sensitivity.

1347
02:13:53,580 --> 02:14:04,580
So sensitivity to readers is actually a practice out of fiction writing where writers can get specific feedback when they're writing about people or cultures outside of their own experience.

1348
02:14:04,580 --> 02:14:07,580
So disability reading is not just for fiction.

1349
02:14:07,580 --> 02:14:13,580
It's a really easy way to get feedback on issues that you may not even exist.

1350
02:14:13,580 --> 02:14:24,580
So for instance, until I had worked with an editor of color, I hadn't really noticed how often we code black as bad, such as blacklist or blackhat.

1351
02:14:24,580 --> 02:14:34,580
It might seem like a very small detail, but it can still be very hugely impactful on the sort of people who feel comfortable in our community.

1352
02:14:34,580 --> 02:14:48,580
If we're constantly coding black as bad, people who come from that background may not feel comfortable or may actively leave the community.

1353
02:14:48,580 --> 02:14:55,580
So we also want to talk about having somebody read as an accessibility reader or a test reader.

1354
02:14:55,580 --> 02:15:02,580
So the process of publishing is kind of complicated.

1355
02:15:02,580 --> 02:15:08,580
You have to write the thing, you have to put the thing up, you have to hope that people can see the thing once it's up.

1356
02:15:08,580 --> 02:15:17,580
And if it's online, it's not always as simple as just putting it up and hoping that people can use the information.

1357
02:15:17,580 --> 02:15:26,580
We've talked a little bit about how slow internet connections can make writing inaccessible, but there's a bunch of other layers of accessibility to look at.

1358
02:15:26,580 --> 02:15:33,580
So I just finished a project where I needed to ensure that readers with visual disabilities could fully access all materials.

1359
02:15:33,580 --> 02:15:39,580
And in print, that means things like using larger type, using specialized typefaces.

1360
02:15:39,580 --> 02:15:49,580
In digital format, that means making sure that your material works with screen readers, which is a whole other device than you might usually be working for.

1361
02:15:49,580 --> 02:15:57,580
So the only way to really check if something is accessible by a screen reader is to look at it on a screen reader.

1362
02:15:57,580 --> 02:16:02,580
If you don't have one, asking somebody with a screen reader is the closest you can get.

1363
02:16:02,580 --> 02:16:14,580
I'd also recommend actually asking people with multiple devices because different screen readers behave in different ways and none of them are easy to work with.

1364
02:16:14,580 --> 02:16:19,580
Lastly, you're going to want to look at usability and technical readers.

1365
02:16:19,580 --> 02:16:29,580
So having someone who has equal or greater Python experience to yourself review your piece for technical accuracy is a good idea.

1366
02:16:29,580 --> 02:16:39,580
But I'd also suggest consider bringing in readers who are less experienced, even sometimes bringing in programmers to read programming materials.

1367
02:16:39,580 --> 02:16:49,580
I have noticed that people who don't necessarily have a programming background are often better at catching typos because it's the only thing that they're really connecting with.

1368
02:16:49,580 --> 02:16:55,580
So it can be a faster way to catch some of those typos.

1369
02:16:55,580 --> 02:17:00,580
Also, they can spot some kinds of errors because they don't have implicit knowledge.

1370
02:17:00,580 --> 02:17:05,580
So implicit knowledge is all the stuff that we assume somebody knows.

1371
02:17:05,580 --> 02:17:17,580
So for our different personas, pipers, the more senior developer, we assume that they have implicit knowledge about JavaScript, about Python, about different libraries.

1372
02:17:17,580 --> 02:17:24,580
So you want somebody who doesn't have that implicit knowledge because they'll spot issues.

1373
02:17:24,580 --> 02:17:41,580
A person with a little distance from the project is always nice, especially when you have jokes to test because if your jokes rely on insider knowledge, somebody who's not an insider is the only one who's going to notice.

1374
02:17:41,580 --> 02:17:56,580
I'd also suggest that since we are talking about situations when you may not have access to an editor, especially if you need somebody who might not have the same programming experience, you have family members.

1375
02:17:56,580 --> 02:18:05,580
And if they're asking you for tech support on their computers, you can ask them to read articles in exchange.

1376
02:18:05,580 --> 02:18:17,580
I would suggest that only using one or two family members because they probably do have very similar experiences to you if they're related to you.

1377
02:18:17,580 --> 02:18:25,580
So you don't want to rely entirely on family, but you know, they're handy.

1378
02:18:25,580 --> 02:18:30,580
You also want to see if you can get one of your stakeholders to read it.

1379
02:18:30,580 --> 02:18:35,580
Even outside of commercial projects, most projects have certain stakeholders.

1380
02:18:35,580 --> 02:18:46,580
So those are the people who might be making decisions, might be most affected by the project going in a certain direction.

1381
02:18:46,580 --> 02:18:58,580
All those pieces. So depending on your project, stakeholders could be employers, they could be lawyers, they could be project contributors, they could be users, kind of depends on the situation.

1382
02:18:58,580 --> 02:19:06,580
But having their feedback early enough in the process to address it or ignore it is really useful.

1383
02:19:06,580 --> 02:19:13,580
And stakeholders are probably the only people who can give you feedback that I would say is a little bit more ignorable.

1384
02:19:13,580 --> 02:19:20,580
I mean, you have to make them happy, but you don't have to write to their specifications.

1385
02:19:20,580 --> 02:19:26,580
Lastly, if you do have some resources, it is worth paying an editor.

1386
02:19:26,580 --> 02:19:31,580
A lot of editors may be priced lower than you think.

1387
02:19:31,580 --> 02:19:34,580
I work with a lot of people on a per piece basis.

1388
02:19:34,580 --> 02:19:41,580
But more importantly, paying an editor is almost always cheaper than correcting a mistake.

1389
02:19:41,580 --> 02:19:47,580
And also a lot of editors aren't in a financial position to contribute to open source for free.

1390
02:19:47,580 --> 02:19:51,580
So money is the best way to get them involved.

1391
02:19:51,580 --> 02:19:56,580
I mean, on average, an editor isn't going to make anything near a programmer salary.

1392
02:19:56,580 --> 02:20:17,580
So I've also had some success getting other people who are writing about similar things to create sort of editing around Robbins where somebody hands me something, I edit it, I hand something else to the next person, we just go around in a circle.

1393
02:20:17,580 --> 02:20:19,580
And that will be a little bit insular as well.

1394
02:20:19,580 --> 02:20:22,580
So you do want to branch out from that.

1395
02:20:22,580 --> 02:20:35,580
But for something like writing resumes or writing short blog posts, just having a group of people that routinely give you feedback can be really useful.

1396
02:20:35,580 --> 02:20:41,580
You also want to give yourself time to go through those edits and those critiques.

1397
02:20:41,580 --> 02:20:56,580
This is this is something like I'm still working on and I've been writing for 15 years, getting a critique about your writing feels super personal because this is your writing, you have put it out into the world and hopefully everybody loves it.

1398
02:20:56,580 --> 02:20:59,580
And not everybody will love it.

1399
02:20:59,580 --> 02:21:11,580
Your readers, your editors, people who can give you criticism, they are on your side. It may not feel like that when you first look at those edits but once you've had a little time to sit with them.

1400
02:21:11,580 --> 02:21:22,580
It's a little bit easier to implement suggestions without getting caught up in anything emotional about your personal value and this article and feelings.

1401
02:21:22,580 --> 02:21:27,580
Taking criticism is as much of a skill as giving criticism.

1402
02:21:27,580 --> 02:21:33,580
So give yourself some time to work with the feedback that you get.

1403
02:21:33,580 --> 02:21:39,580
You also benefit from having like a day away from your work.

1404
02:21:39,580 --> 02:21:49,580
Anytime you can step away for a little while, you'll see things differently when you come back, if only because you'll notice typos in a different way.

1405
02:21:49,580 --> 02:21:59,580
Okay, so this part of the workshop we're going to talk a little bit about how to be really effectively lazy.

1406
02:21:59,580 --> 02:22:11,580
I am probably the laziest writer you know that doesn't mean I don't write a lot. It's just, I don't want to do more work than I have to, which I think is a pretty standard programmer mindset.

1407
02:22:11,580 --> 02:22:21,580
So there are a lot of tools out there. A few folks have mentioned like automated documentation tools.

1408
02:22:21,580 --> 02:22:28,580
But there's a couple of other tools I want to talk about first.

1409
02:22:28,580 --> 02:22:38,580
The best editing tools are the ones that have been in use for a while. So style guides, for instance, are a fairly well established tool.

1410
02:22:38,580 --> 02:22:46,580
Style guides started out in newspapers covering details like how big a headline should be and how to correctly refer to government officials.

1411
02:22:46,580 --> 02:22:54,580
Designers have used style guides to talk about details like what colors are in a company logo or reusable style elements.

1412
02:22:54,580 --> 02:22:58,580
Developers have style guides. We mentioned PEP 8 already.

1413
02:22:58,580 --> 02:23:09,580
But for writers, style guides are a little bit different. We're looking specifically at things like how do we disambiguate specific terms?

1414
02:23:09,580 --> 02:23:19,580
How do we make sure that we are getting all those weird camel case names correctly capitalized? Those sorts of details.

1415
02:23:19,580 --> 02:23:30,580
And we have a lot of options. So my first love was the AP Style book because I came up through journalism, journalism school, worked at Daily Paper, that sort of thing.

1416
02:23:30,580 --> 02:23:37,580
And it's used by a lot of newspapers and other print media, but it's also used by a lot of websites.

1417
02:23:37,580 --> 02:23:51,580
There's also a lot of technically specific style guides. So I mentioned that I've made one about Python, but a lot of communities have their own as well.

1418
02:23:51,580 --> 02:23:57,580
Red Hat has one. Microsoft has their own. There's a bunch of these style guides out there.

1419
02:23:57,580 --> 02:24:04,580
And because of that, I'm going to encourage you to have more than one style guide at your fingertips.

1420
02:24:04,580 --> 02:24:10,580
You should have more than one style guide because there's the question of graceful deprecation.

1421
02:24:10,580 --> 02:24:22,580
A style guide that is specifically about Python is not going to cover anything else. So if you want to write about open source more generally, you might need a style guide that covers open source more generally.

1422
02:24:22,580 --> 02:24:32,580
You might also want to have something that's more general. I like the AP Style book or the Chicago Manual of Style, both of which have online components.

1423
02:24:32,580 --> 02:24:44,580
But there's a wealth out there. So you can also build internal style guides, which is actually what the Python style supplement started as.

1424
02:24:44,580 --> 02:24:51,580
I kept making mistakes, so I wrote them down so I wouldn't make them again. And that's basically what a style guide is.

1425
02:24:51,580 --> 02:25:01,580
If you just open up a file and start writing your own, it's officially a style guide. It doesn't need some style guide stamp of approval.

1426
02:25:01,580 --> 02:25:17,580
Style guides are also very regularly updated. The AP Style book updates every year. Most people don't buy every year, but every couple of years is usually enough to stay in sync with a more general style guide.

1427
02:25:17,580 --> 02:25:22,580
For technical style guides, it can be a little bit more complicated.

1428
02:25:22,580 --> 02:25:26,580
Some update regularly, some don't.

1429
02:25:33,580 --> 02:25:47,580
Sorry about that. There are also loads and loads and loads of startups who are very excited to offer you some sort of cutting edge tool, whether it's for documentation or editing or grammar.

1430
02:25:47,580 --> 02:26:02,580
Grammarly and Hemingway are two that are used a lot for prose. Hemingway is a web app that analyzes your writing based on rules that Ernest Hemingway set out.

1431
02:26:02,580 --> 02:26:15,580
And leaving aside all of his many other issues, Hemingway was a decent writer, but not everyone writes like Hemingway and Hemingway's style doesn't fit all use cases.

1432
02:26:15,580 --> 02:26:25,580
So, we don't necessarily want to go completely with their suggestions.

1433
02:26:29,580 --> 02:26:30,580
Sorry.

1434
02:26:31,580 --> 02:26:45,580
Some of these tools even have some pretty dangerous flaws. Tools like Grammarly work by tracking everything you type. It's a keylogger. It's a keylogger with a real nice logo, but it's a keylogger.

1435
02:26:45,580 --> 02:27:01,580
By default, the browser plugin sees everything. I like Grammarly. I think it's a good tool and I still use it, but I don't keep the browser plugin constantly active because I don't entirely trust it.

1436
02:27:01,580 --> 02:27:17,580
A lot of automated tools that are fairly new will have kinks like this. And the thing to remember is that the tool isn't ever going to be able to make the decision for you.

1437
02:27:17,580 --> 02:27:26,580
So, you're the one assessing the feedback and deciding whether or not to incorporate it, just the same way that you assess feedback from a reader or an editor.

1438
02:27:26,580 --> 02:27:49,580
So, similarly, there are a lot of writing tools. Writing is a little bit harder to automate compared to editing. There's a lot of individual pieces that you have to make decisions about, like what word choices, where do you think there are going to be issues.

1439
02:27:49,580 --> 02:28:17,580
But there are some tools that are really, really effective. Templates in general are one of the best tools I have ever found for speeding up my writing process. And just to disambiguate, I'm talking about written templates, documents with blanks we can fill in like Mad Libs rather than templating engines and technical tools like that.

1440
02:28:17,580 --> 02:28:29,580
There are some tools like TextExpander, which can be used to fill in pre-existing templates, but a lot of writing templates are just always going to be text documents with sections where you can put your own materials.

1441
02:28:29,580 --> 02:28:49,580
I do a lot of templated writing because I do a lot of writing that has consistency or similar structure. So, tutorials, for example, are really good places to use templates because every tutorial is going to need an explanation at the top.

1442
02:28:49,580 --> 02:29:19,580
So, you're going to have a lot of people that are going to be like, oh, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write

1443
02:29:19,580 --> 02:29:24,040
this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write this, I'm going to write drop this, I'm going to write this, I'm going to write this, I'm going to write this warp drop drop print brilliant it's great page.

1444
02:29:24,040 --> 02:29:38,920
My template for call to action is just three words. It's do the thing. I know that I have to give my readers a concrete action. I don't know what it is going to be when I sit down for a new Instead there's more for you.

1445
02:29:38,920 --> 02:29:44,440
concrete action, I don't know what it is going to be when I sit down for a new article, but

1446
02:29:44,440 --> 02:29:48,960
I always know that it is going to have a verb and it is going to have a noun because it

1447
02:29:48,960 --> 02:29:50,160
is a full sentence.

1448
02:29:50,160 --> 02:29:54,860
So just putting do the thing and filling in what verb and noun later is good enough for

1449
02:29:54,860 --> 02:30:00,400
a template.

1450
02:30:00,400 --> 02:30:04,200
Most templates aren't, they don't start life as templates.

1451
02:30:04,200 --> 02:30:09,160
It's when you keep having to do similar things and you keep using the same material just

1452
02:30:09,160 --> 02:30:14,960
as libraries are built when you keep having the same problem and you don't want to keep

1453
02:30:14,960 --> 02:30:20,120
writing code to solve the same problem in different ways.

1454
02:30:20,120 --> 02:30:24,960
So before I start a new project, I rummage through all my past projects for similar pieces.

1455
02:30:24,960 --> 02:30:28,920
I find something that I might be able to use as a template, delete all the bits I don't

1456
02:30:28,920 --> 02:30:31,640
need and refill it.

1457
02:30:31,720 --> 02:30:35,520
And if I find it particularly useful, I might clean it up and save it with the rest of my

1458
02:30:35,520 --> 02:30:37,400
templates.

1459
02:30:37,400 --> 02:30:41,680
Any piece that you've already written can be a template.

1460
02:30:41,680 --> 02:30:46,100
And any piece that anybody else has written can be a template as well.

1461
02:30:46,100 --> 02:30:51,520
As long as you're not using their words verbatim, their structure can be an inspiration to you.

1462
02:30:51,520 --> 02:30:56,880
You can use it as a starting point rather than having to start from a blank page.

1463
02:30:56,880 --> 02:30:59,480
And blank pages are, they're terrifying.

1464
02:30:59,520 --> 02:31:04,000
I never want to start with a blank page if I can at least get a template or an outline

1465
02:31:04,000 --> 02:31:06,800
or something on there.

1466
02:31:06,800 --> 02:31:10,520
There are a lot of technical tools for writing as well.

1467
02:31:10,520 --> 02:31:16,240
Word processors are, of course, a standard tool.

1468
02:31:16,240 --> 02:31:20,120
Writing tools beyond that are kind of like time management apps.

1469
02:31:20,120 --> 02:31:26,880
Anybody who has the power to make one that follows their very precise writing workflow

1470
02:31:26,880 --> 02:31:28,920
probably has.

1471
02:31:28,920 --> 02:31:34,320
That does mean that some writing apps don't work as well for everybody.

1472
02:31:34,320 --> 02:31:38,480
And honestly, the only way that you can find out is by testing them out.

1473
02:31:38,480 --> 02:31:43,720
Scrivener, for instance, is a big fan favorite for writing long documents, especially like

1474
02:31:43,720 --> 02:31:44,720
book projects.

1475
02:31:44,720 --> 02:31:50,640
It's got a slew of features like keeping track of your references, helping you out if you

1476
02:31:50,640 --> 02:31:54,480
want to reorganize all your content and things like that.

1477
02:31:54,480 --> 02:31:58,620
It's an amazing piece of software and I can't use it.

1478
02:31:58,620 --> 02:32:00,980
My workflow doesn't follow that workflow.

1479
02:32:00,980 --> 02:32:09,220
So I have moved on to tools that do match my workflow.

1480
02:32:09,220 --> 02:32:17,100
So one of the reasons that Scrivener isn't necessarily the best fit for me is because

1481
02:32:17,100 --> 02:32:20,460
I don't do a strictly outlined approach.

1482
02:32:20,460 --> 02:32:22,340
Scrivener assumes that you're going to.

1483
02:32:22,340 --> 02:32:29,220
I'm more the just brain dump everything onto a page and just get that really dirty, awful

1484
02:32:29,220 --> 02:32:31,340
first draft done.

1485
02:32:31,340 --> 02:32:34,860
My first drafts are probably where I had the most fun writing.

1486
02:32:34,860 --> 02:32:42,180
Like the first draft for this workshop was, well, just a full page of put the version

1487
02:32:42,180 --> 02:32:43,180
number.

1488
02:32:43,180 --> 02:32:48,760
But then like some other stuff, some profanity, some jokes that did not make it into the talk.

1489
02:32:48,760 --> 02:32:53,960
But because I had this massive brain dump, I had a starting point that didn't really

1490
02:32:53,960 --> 02:32:56,240
need an outline.

1491
02:32:56,240 --> 02:33:00,640
The thing is though that writing workflows are intensely personal.

1492
02:33:00,640 --> 02:33:04,400
Until you've spent some time writing, you're not going to know that much about your own

1493
02:33:04,400 --> 02:33:05,400
workflow.

1494
02:33:05,400 --> 02:33:09,880
You're not going to know which tools make things easier on you.

1495
02:33:09,880 --> 02:33:15,160
So the way to really learn about where you can speed up your workflow or what tools you

1496
02:33:15,160 --> 02:33:22,680
can use is to write a bunch and to just pay attention to whether outlines seem to work

1497
02:33:22,680 --> 02:33:25,840
for you or whether brain dumps seem to work with you.

1498
02:33:25,840 --> 02:33:31,680
If there's a particular point in your process where you know that you want feedback, those

1499
02:33:31,680 --> 02:33:37,920
sorts of pieces of your workflow only come with experience.

1500
02:33:37,920 --> 02:33:41,840
So we're going to talk about this template right here.

1501
02:33:41,840 --> 02:33:45,600
This is my template for lightning talks.

1502
02:33:45,600 --> 02:33:49,680
I excuse me, lightning talk proposals.

1503
02:33:49,680 --> 02:33:54,260
I run lightning talk submissions at a couple of conferences.

1504
02:33:54,260 --> 02:33:57,000
And I give lightning talks pretty regularly.

1505
02:33:57,000 --> 02:34:00,040
So I just kept having to write the same things.

1506
02:34:00,040 --> 02:34:03,680
So I made it into a template.

1507
02:34:03,680 --> 02:34:07,720
This template covers most of the information you can be asked for when prepping a lightning

1508
02:34:07,720 --> 02:34:08,720
talk.

1509
02:34:08,720 --> 02:34:09,720
It's not universal.

1510
02:34:10,600 --> 02:34:12,200
So you can see that the events will have different requirements.

1511
02:34:12,200 --> 02:34:17,480
But just about every form I've seen will have most of these elements.

1512
02:34:17,480 --> 02:34:20,440
This will get you through filling it out.

1513
02:34:20,440 --> 02:34:26,240
So talk proposals are interesting because they have to be persuasive to an audience

1514
02:34:26,240 --> 02:34:29,240
that is not necessarily your final audience.

1515
02:34:29,240 --> 02:34:36,480
So for a talk proposal for a lightning talk, you have to convince the person who is selecting

1516
02:34:36,480 --> 02:34:41,720
the talk to write the talk.

1517
02:34:41,720 --> 02:34:47,400
So as we fill out this template, we want to keep that audience in mind rather than the

1518
02:34:47,400 --> 02:34:50,280
people who will be listening to the talk.

1519
02:34:50,280 --> 02:34:56,720
When you are ready to write the talk, that's when you get to think about that audience.

1520
02:34:56,720 --> 02:34:59,480
So let's go over this in a little bit more detail.

1521
02:34:59,480 --> 02:35:04,280
And then I'm going to give all of us a few minutes to use this template to write our

1522
02:35:04,280 --> 02:35:06,360
own proposals.

1523
02:35:07,240 --> 02:35:09,000
So name and email address.

1524
02:35:09,000 --> 02:35:11,840
In my version of the template, I already have mine put in.

1525
02:35:11,840 --> 02:35:15,200
But I figure I'm the only one with my name.

1526
02:35:15,200 --> 02:35:20,440
So you'll all want to fill that in with your information.

1527
02:35:20,440 --> 02:35:21,440
Short bios.

1528
02:35:21,440 --> 02:35:25,240
So bios are kind of hard sometimes to write.

1529
02:35:25,240 --> 02:35:29,180
But the shorter, the easier they might be.

1530
02:35:29,180 --> 02:35:32,960
So you don't want more than two lines here.

1531
02:35:33,360 --> 02:35:39,680
These two lines, their only job is to demonstrate to the reader that you are the person to give

1532
02:35:39,680 --> 02:35:40,880
this talk.

1533
02:35:40,880 --> 02:35:43,000
This is where you're being persuasive.

1534
02:35:43,000 --> 02:35:46,280
This is where you're telling people how awesome you are.

1535
02:35:46,280 --> 02:35:51,000
And some of us might be tempted to, you know, downplay our awesomeness.

1536
02:35:51,000 --> 02:35:53,540
This is not a point to downplay your awesomeness.

1537
02:35:53,540 --> 02:35:57,780
This is a point to brag.

1538
02:35:57,780 --> 02:36:00,640
You're also going to need your talk title.

1539
02:36:01,040 --> 02:36:06,520
Talk titles are super tempting to make talk titles super clever.

1540
02:36:06,520 --> 02:36:08,920
But you need to resist the urge.

1541
02:36:08,920 --> 02:36:12,680
The folks deciding on a lightning talk may just skim titles.

1542
02:36:12,680 --> 02:36:18,360
And if they can't tell what your talk is about, if your title is too clever, your talk won't

1543
02:36:18,360 --> 02:36:20,620
make it through the initial review process.

1544
02:36:20,620 --> 02:36:23,280
You want something straightforward.

1545
02:36:23,280 --> 02:36:27,380
This by the way is not a detail that is carved in stone.

1546
02:36:27,380 --> 02:36:31,640
The title that you have on your proposal may not be the title that's actually on your

1547
02:36:31,640 --> 02:36:33,820
lightning talk.

1548
02:36:33,820 --> 02:36:36,980
Hopefully they're very similar in that you're not trying to pull like a bait and switch

1549
02:36:36,980 --> 02:36:38,540
or anything.

1550
02:36:38,540 --> 02:36:42,700
But the audiences are different so the titles can be different.

1551
02:36:42,700 --> 02:36:45,020
You also want a talk description.

1552
02:36:45,020 --> 02:36:50,360
This is, you know, the meat of what your lightning talk is going to be.

1553
02:36:50,360 --> 02:36:51,360
This can be bullet points.

1554
02:36:51,360 --> 02:36:54,060
It doesn't even usually have to be a paragraph.

1555
02:36:54,100 --> 02:36:59,780
I like to always work in threes because I can always remember to put three things.

1556
02:36:59,780 --> 02:37:07,000
And if I can't find three things, then I probably don't have a full lightning talk yet.

1557
02:37:07,000 --> 02:37:11,020
If you have a big reveal in your talk, by the way, put it in here.

1558
02:37:11,020 --> 02:37:18,200
Do not leave your reviewers guessing because we're trying to convince the reviewers they

1559
02:37:18,200 --> 02:37:22,360
need as much material as possible.

1560
02:37:22,560 --> 02:37:26,360
If you've got a really good twist ending, the reviewers are not going to give it away

1561
02:37:26,360 --> 02:37:27,360
to the audience.

1562
02:37:27,360 --> 02:37:30,000
They're going to let you shot.

1563
02:37:30,000 --> 02:37:33,860
And lastly, you need a big idea or a take away.

1564
02:37:33,860 --> 02:37:39,080
What exactly are people going to learn after hearing this talk?

1565
02:37:39,080 --> 02:37:40,080
And it can be simple.

1566
02:37:40,080 --> 02:37:47,520
It can be audience members will learn to identify Python programs versus PHP programs.

1567
02:37:47,520 --> 02:37:50,300
Something just straight up easy.

1568
02:37:50,300 --> 02:37:54,920
But it's just a piece that a lot of reviewers want to see.

1569
02:37:54,920 --> 02:38:04,640
So I also want to note that if you follow the instructions of a submission process and

1570
02:38:04,640 --> 02:38:10,980
fill out all the forms, you are far and above more likely to actually get through the submission

1571
02:38:10,980 --> 02:38:12,860
process.

1572
02:38:12,860 --> 02:38:18,060
A lot of potential speakers do not fill out all the fields on the forms.

1573
02:38:18,060 --> 02:38:22,840
So it's an easy way to get a leg up.

1574
02:38:22,840 --> 02:38:28,360
So I'm going to give you about seven minutes to go ahead and go through this and think

1575
02:38:28,360 --> 02:38:30,800
about how you would fill this out.

1576
02:38:30,800 --> 02:38:34,760
You don't need to write a full paragraph or your talk description or anything like that.

1577
02:38:34,760 --> 02:38:36,520
Bullet points are just fine.

1578
02:38:36,520 --> 02:38:38,100
But think about that audience.

1579
02:38:38,100 --> 02:38:42,700
Think about what a talk reviewer is going to want to see from you.

1580
02:38:42,700 --> 02:38:43,960
All right.

1581
02:38:43,960 --> 02:38:44,960
Any questions?

1582
02:38:44,960 --> 02:38:48,920
What's that?

1583
02:38:48,920 --> 02:38:55,820
Oh, I had a note on that.

1584
02:38:55,820 --> 02:38:57,440
Anything about Python is fine.

1585
02:38:57,440 --> 02:39:03,600
But if you don't have a topic, you can do a talk about why a new programmer should choose

1586
02:39:03,600 --> 02:39:07,000
Python over another programming language.

1587
02:39:07,000 --> 02:39:14,160
Since you might have been thinking about that already.

1588
02:39:14,160 --> 02:39:19,360
And if anybody has any questions, please just grab me and I'm happy to come help.

1589
02:44:14,360 --> 02:44:29,360
All right.

1590
02:44:29,360 --> 02:44:42,360
How is everybody doing?

1591
02:44:42,560 --> 02:44:49,560
Need more time or I think we can start talking about this a little bit.

1592
02:44:49,560 --> 02:44:50,560
All right.

1593
02:44:50,560 --> 02:44:52,560
We'll start at the top of the list.

1594
02:44:52,560 --> 02:44:53,560
Okay.

1595
02:44:53,560 --> 02:44:57,560
I'm pretty confident that you all have name and email address on your own.

1596
02:44:57,560 --> 02:44:59,560
So we're not going to talk about that.

1597
02:44:59,560 --> 02:45:02,560
But let's talk about those short bios really quickly.

1598
02:45:02,560 --> 02:45:05,560
So why are you awesome?

1599
02:45:05,560 --> 02:45:11,560
Does anybody have like a bio that they want to share that talks about how awesome they

1600
02:45:12,260 --> 02:45:15,260
are?

1601
02:45:15,260 --> 02:45:16,260
Okay.

1602
02:45:16,260 --> 02:45:19,260
Let's hear it.

1603
02:45:19,260 --> 02:45:34,260
What do you mean that's not awesome?

1604
02:45:34,260 --> 02:45:35,260
You do things.

1605
02:45:35,260 --> 02:45:37,860
That right there is awesome.

1606
02:45:37,860 --> 02:45:44,860
If you want to amp up the bragging a little bit, I always like being able to say like

1607
02:45:45,360 --> 02:45:49,360
a specific project name you've worked on or anything with a big number.

1608
02:45:49,360 --> 02:45:56,360
People are very excited to hear, oh, I've supported a product with a million users or

1609
02:45:56,860 --> 02:45:57,860
something like that.

1610
02:45:57,860 --> 02:46:04,160
If it is a big number, people just tend to get excited because big numbers somehow make

1611
02:46:04,160 --> 02:46:09,160
a lot of people feel like you have more credentials, especially in this sort of situation.

1612
02:46:09,160 --> 02:46:12,960
But I think that's a really good bio for a lightning talk.

1613
02:46:12,960 --> 02:46:13,960
You've got who you are.

1614
02:46:13,960 --> 02:46:15,960
You've got why you're an expert.

1615
02:46:15,960 --> 02:46:17,960
That's pretty awesome.

1616
02:46:17,960 --> 02:46:24,960
Yeah.

1617
02:46:33,160 --> 02:46:38,660
For a Python conference, that is an extremely persuasive piece of information.

1618
02:46:38,660 --> 02:46:44,120
Knowing somebody is a contributor or maintainer definitely gives you a little bit of a credential

1619
02:46:44,120 --> 02:46:45,120
as a speaker.

1620
02:46:45,120 --> 02:46:46,120
All right.

1621
02:46:46,280 --> 02:46:47,280
Talk titles.

1622
02:46:47,280 --> 02:46:56,280
I gave you a version of a talk title, but you may have also gone off and done something

1623
02:46:56,280 --> 02:46:57,280
entirely different.

1624
02:46:57,280 --> 02:46:58,280
So who would like to share?

1625
02:46:58,280 --> 02:46:59,280
Would you like?

1626
02:46:59,280 --> 02:47:00,280
Is that at hand?

1627
02:47:00,280 --> 02:47:01,280
Okay.

1628
02:47:01,280 --> 02:47:06,280
Oh, I like that one.

1629
02:47:06,280 --> 02:47:07,280
I like that.

1630
02:47:07,280 --> 02:47:08,280
Like earthquake.

1631
02:47:08,280 --> 02:47:09,280
That sounds like something I would want to know.

1632
02:47:09,280 --> 02:47:10,280
I don't want to get stuck in an earthquake.

1633
02:47:10,280 --> 02:47:11,280
That's a good title.

1634
02:47:11,440 --> 02:47:12,440
Anybody else have a title they like?

1635
02:47:12,440 --> 02:47:15,440
I would say that that comprehending comprehension, that is a little bit clever.

1636
02:47:15,440 --> 02:47:20,440
You can probably get away with it in a community that like is already familiar.

1637
02:47:20,440 --> 02:47:23,440
But I think that's a good title.

1638
02:47:23,440 --> 02:47:26,440
I think that's a good title.

1639
02:47:26,440 --> 02:47:29,440
I think that's a good title.

1640
02:47:29,440 --> 02:47:32,440
I think that's a good title.

1641
02:47:32,440 --> 02:47:35,440
I think that's a good title.

1642
02:47:35,600 --> 02:47:36,600
Like a little bit clever.

1643
02:47:36,600 --> 02:47:39,600
You can probably get away with it in a community that like is already familiar.

1644
02:47:39,600 --> 02:47:46,600
But for a community that might be a little bit less experienced, you might want to be

1645
02:47:46,600 --> 02:47:51,600
more explanatory in your title rather than.

1646
02:47:51,600 --> 02:47:53,600
I mean, I like alliteration.

1647
02:47:53,600 --> 02:47:54,600
I like alliteration in a title too.

1648
02:47:54,600 --> 02:47:57,600
But save that for the actual lightning talk.

1649
02:47:57,600 --> 02:47:58,600
All right.

1650
02:47:58,600 --> 02:48:01,600
So talk description.

1651
02:48:01,600 --> 02:48:08,600
Does anybody have like a bullet point or two they'd be willing to share?

1652
02:48:08,600 --> 02:48:25,600
Aaron, I think we're just going to get to hear your whole talk here.

1653
02:48:25,600 --> 02:48:50,600
Perfect.

1654
02:48:50,600 --> 02:48:52,600
You've got a very straightforward takeaway.

1655
02:48:52,600 --> 02:48:54,600
You've got clear points that connect to it.

1656
02:48:54,600 --> 02:49:02,600
It sounds like you're giving a very clear picture to the reviewer of what they would be getting in a lightning talk.

1657
02:49:02,600 --> 02:49:06,600
Anybody else want to share part of theirs?

1658
02:49:06,600 --> 02:49:12,600
We can also move on because we're running out of time if nobody wants to volunteer.

1659
02:49:12,600 --> 02:49:14,600
I won't force anybody to.

1660
02:49:14,600 --> 02:49:18,600
Oh, though, by the way, there are lightning talks at PyCon.

1661
02:49:18,600 --> 02:49:26,600
Since you all have written proposals, if you like your idea, put it up on the lightning talk board later this week.

1662
02:49:26,600 --> 02:49:39,600
We only have 10 minutes left, so I'm going to skip a slide or two because I don't think we will get through them.

1663
02:49:39,600 --> 02:49:42,600
Let's skip ahead to writing for other people.

1664
02:49:42,600 --> 02:49:47,600
So far we've mostly talked about writing and editing on our own.

1665
02:49:47,600 --> 02:49:53,600
But we do belong to a thriving open source community where we can work with other people.

1666
02:49:53,600 --> 02:50:00,600
Sometimes we can even get paid to work with other people, which is just the most novel thing I've ever heard.

1667
02:50:00,600 --> 02:50:04,600
But we do need to know what opportunities are available.

1668
02:50:04,600 --> 02:50:12,600
So writing about Python, there are some standard opportunities that you'll probably run into.

1669
02:50:12,600 --> 02:50:18,600
Writing talks for PyCon and other conferences is a pretty common use case.

1670
02:50:18,600 --> 02:50:21,600
Documentation we all talked about a little bit.

1671
02:50:21,600 --> 02:50:30,600
Documentation is often suggested as a great entry point for new contributors who aren't yet confident in their technical skills.

1672
02:50:30,600 --> 02:50:33,600
I'm not necessarily comfortable with that.

1673
02:50:33,600 --> 02:50:38,600
That's a little like having an intern handle all of your social media.

1674
02:50:38,600 --> 02:50:44,600
If you are talking about working with somebody who's a little bit newer, you need to plan how you're going to mentor them,

1675
02:50:44,600 --> 02:50:51,600
how you're going to work with them to make sure that they have the capability to do the job.

1676
02:50:51,600 --> 02:50:59,600
Documenting open source projects is usually a labor of love, so you may not get a lot of choice in who you get to work with.

1677
02:50:59,600 --> 02:51:03,600
But you can always support people to become better writers and editors,

1678
02:51:03,600 --> 02:51:08,600
just like you can support people to become better programmers in the community.

1679
02:51:08,600 --> 02:51:20,600
Documentation also can be one of the more financially viable options because a lot of companies will pay documentation writers both as employees or contract.

1680
02:51:20,600 --> 02:51:25,600
If we're talking about blogs, there are people who pay for blog posts,

1681
02:51:25,600 --> 02:51:31,600
but it is a lower rate because a lot of people are interested in writing blog posts.

1682
02:51:31,600 --> 02:51:34,600
There are tons of websites that run material about Python.

1683
02:51:34,600 --> 02:51:37,600
All of them are always looking for more material.

1684
02:51:37,600 --> 02:51:41,600
The PSF blog, for instance, welcomes guest posts.

1685
02:51:41,600 --> 02:51:44,600
They're always looking for guest posts about the community,

1686
02:51:44,600 --> 02:51:49,600
and they pay freelance bloggers who work with the site on an ongoing basis.

1687
02:51:49,600 --> 02:51:53,600
Tutorial websites often operate about the same way.

1688
02:51:53,600 --> 02:52:01,600
They'll often pay for tutorials, or some of them will pay for tutorials and ask for guest posts for free.

1689
02:52:01,600 --> 02:52:05,600
It can kind of bounce out depending on where you're looking.

1690
02:52:05,600 --> 02:52:08,600
Written in tutorials are not the only option.

1691
02:52:08,600 --> 02:52:17,600
Video tutorials, which you're going to need to write the script beforehand, also tend to get premium rates when compared to articles.

1692
02:52:17,600 --> 02:52:18,600
There's books.

1693
02:52:18,600 --> 02:52:25,600
I am not necessarily recommending anybody write a book, especially if you're doing it for the money.

1694
02:52:25,600 --> 02:52:31,600
I've written several books, and I don't think I've ever earned enough to cover my time in sales from those.

1695
02:52:31,600 --> 02:52:36,600
That said, if you do have a topic that is book-worthy,

1696
02:52:36,600 --> 02:52:42,600
if you have that book inside of you that is bursting to get out and you are willing to put in the time,

1697
02:52:42,600 --> 02:52:45,600
there are loads of publishers with Python lines.

1698
02:52:45,600 --> 02:52:50,600
There are tons of publishers who are looking for Python books specifically.

1699
02:52:50,600 --> 02:52:55,600
You can always self-publish, of course, but being able to work with a professional publisher means

1700
02:52:55,600 --> 02:53:03,600
gaining access to editors and technical reviewers and marketers rather than having to do anything yourself.

1701
02:53:03,600 --> 02:53:08,600
And if you are thinking about book proposals, come talk to me afterwards.

1702
02:53:08,600 --> 02:53:13,600
There are some publishers in this sphere that I would definitely recommend over others.

1703
02:53:13,600 --> 02:53:23,600
So as you're writing all this material, hopefully you're going to wind up with just a file folder full of things you've written about Python.

1704
02:53:23,600 --> 02:53:26,600
And that means you can repurpose material.

1705
02:53:26,600 --> 02:53:28,600
Like I said, I'm very lazy.

1706
02:53:28,600 --> 02:53:31,600
I don't want to do any more work than I have to.

1707
02:53:31,600 --> 02:53:35,600
So I will take pieces and I will repurpose them.

1708
02:53:35,600 --> 02:53:40,600
For instance, if I was going around and pitching a Python book right now,

1709
02:53:41,600 --> 02:53:49,600
I'd probably have 10 to 20 blog posts that I've written about the topic of that book that I could just, you know,

1710
02:53:49,600 --> 02:53:55,600
add some transitions in between them, reword a little bit, and put into a book themselves.

1711
02:53:55,600 --> 02:54:03,600
Writing for just one purpose, especially when a lot of technical content doesn't necessarily

1712
02:54:04,600 --> 02:54:10,600
you need to adapt it for different audiences, but the underlying information remains the same.

1713
02:54:10,600 --> 02:54:16,600
You can do a lot of that sort of repurposing and do a little bit less work.

1714
02:54:16,600 --> 02:54:22,600
And aside from getting two projects for maybe 1.5 times the work,

1715
02:54:22,600 --> 02:54:27,600
it also gives you more material to persuade editors and publishers to work with you.

1716
02:54:27,600 --> 02:54:31,600
Also, conference content committees like seeing that sort of thing.

1717
02:54:31,600 --> 02:54:36,600
If you've got published blog posts about a topic, you're an expert in that topic.

1718
02:54:36,600 --> 02:54:39,600
It doesn't necessarily matter how long you've been working on it.

1719
02:54:39,600 --> 02:54:45,600
The fact that you have enough knowledge to write out the piece means that you're an expert to your readers.

1720
02:54:47,600 --> 02:54:51,600
It makes you a known quantity, which makes you easier to work with,

1721
02:54:51,600 --> 02:54:57,600
because people who are working with you will have a better idea of what to expect from your skills.

1722
02:54:58,600 --> 02:55:03,600
Most editors and publishers, even for guest posts, will want to see at least some sample of your writing

1723
02:55:03,600 --> 02:55:06,600
before they're willing to commit to a project.

1724
02:55:06,600 --> 02:55:10,600
So make those writing samples do as much work as possible.

1725
02:55:11,600 --> 02:55:16,600
Certain sites, or rather a lot of sites that routinely publish content about Python

1726
02:55:16,600 --> 02:55:20,600
or other technical topics will have specific site requirements.

1727
02:55:20,600 --> 02:55:26,600
Luckily, they'll usually share these details so that we can easily review them and submit.

1728
02:55:27,600 --> 02:55:32,600
Submission guidelines can be anything from an email address and a couple of sentences

1729
02:55:32,600 --> 02:55:35,600
to a fairly elaborate document.

1730
02:55:35,600 --> 02:55:40,600
And we are going to look at opensource.com.

1731
02:55:42,600 --> 02:55:46,600
So I'm mentioning opensource.com because their editor is here,

1732
02:55:46,600 --> 02:55:49,600
and he is specifically looking for Python articles.

1733
02:55:49,600 --> 02:55:54,600
So that makes them a great place to put in for right now.

1734
02:55:55,600 --> 02:56:11,600
All right. So in this document, opensource.com gives us the basics of how they want things sent to them,

1735
02:56:11,600 --> 02:56:16,600
like what file format, where to send it, basic questions, those sorts of things.

1736
02:56:17,600 --> 02:56:21,600
They also give us their full writing and style guide.

1737
02:56:21,600 --> 02:56:29,600
They tell you what spellings they're looking for, if there's any formatting that needs done,

1738
02:56:29,600 --> 02:56:32,600
what kind of images they want.

1739
02:56:32,600 --> 02:56:38,600
They also tell you exactly what kind of articles they want.

1740
02:56:38,600 --> 02:56:42,600
They're really interested in these 500-word short articles.

1741
02:56:42,600 --> 02:56:47,600
They also have a longer piece that's more of a magazine-style article.

1742
02:56:48,600 --> 02:56:54,600
And they also want big, long tutorials.

1743
02:56:54,600 --> 02:56:59,600
So those are the three sort of categories of articles that they're looking for,

1744
02:56:59,600 --> 02:57:03,600
which makes it a lot easier for us to write exactly what they're looking for.

1745
02:57:06,600 --> 02:57:10,600
This is a little bit rare, but if we go down far enough...

1746
02:57:17,600 --> 02:57:19,600
I'm having trouble finding it right now.

1747
02:57:19,600 --> 02:57:24,600
But they do tell us information about their audience, so they give us more information to add to our personas.

1748
02:57:24,600 --> 02:57:30,600
For instance, they tell us that most of their readers are Linux users,

1749
02:57:30,600 --> 02:57:36,600
so as I'm writing, I'd probably look at a persona that I would think has Linux experience.

1750
02:57:36,600 --> 02:57:39,600
So my senior dev, absolutely.

1751
02:57:39,600 --> 02:57:44,600
My newer dev, I'd have to think about exactly what they might know.

1752
02:57:45,600 --> 02:57:48,600
They also talk about their licensing.

1753
02:57:48,600 --> 02:57:52,600
Unless you're really focused on freelancing as a career,

1754
02:57:52,600 --> 02:57:57,600
licensing is not something you have to hugely worry about,

1755
02:57:57,600 --> 02:58:02,600
but I'm happy to talk about that more later, because that is a whole other tangent.

1756
02:58:04,600 --> 02:58:09,600
Oh, and we are right at the end without having...

1757
02:58:09,600 --> 02:58:12,600
It's 420. I think we wrap up at 420. Is that correct?

1758
02:58:13,600 --> 02:58:17,600
440. Oh, excellent. We do have time for this.

1759
02:58:24,600 --> 02:58:33,600
So what we're going to do to wind up is we have an exercise where we are going to start an article for opensource.com.

1760
02:58:33,600 --> 02:58:39,600
We're going to run up against the end of the session, so we won't be able to completely finish,

1761
02:58:40,600 --> 02:58:44,600
but we're going to talk about how we would get there,

1762
02:58:44,600 --> 02:58:49,600
and I'd be happy to look at any work you do afterwards as well.

1763
02:58:52,600 --> 02:58:56,600
One of the reasons I like an exercise like this is because it's more realistic.

1764
02:58:56,600 --> 02:59:02,600
We're going to use opensource.com's submission guidelines, try to match that,

1765
02:59:02,600 --> 02:59:08,600
and I'm going to add a couple of additional constraints, just so that we can practice our specific skills.

1766
02:59:08,600 --> 02:59:16,600
So for this exercise, we're each going to describe a Python library and explain its value in 500 words or less.

1767
02:59:16,600 --> 02:59:22,600
Try to pick a library that you're familiar with, because we don't have a lot of time to devote to research.

1768
02:59:22,600 --> 02:59:29,600
And just for the record, in the time we have left, I do not expect anybody to write the full 500 words.

1769
02:59:29,600 --> 02:59:36,600
It's more of an idea of what you would include, at least some notes, a vague outline.

1770
02:59:36,600 --> 02:59:42,600
And I'm going to really, even though I don't necessarily think outlines are necessary for our articles,

1771
02:59:42,600 --> 02:59:48,600
I am going to really push for everybody to have an outline just specifically answering these three questions.

1772
02:59:48,600 --> 02:59:54,600
So if we're describing a Python library and we're thinking about our personas,

1773
02:59:54,600 --> 03:00:00,600
we have our senior dev, we have our newer dev. Our newer dev is probably our persona here.

1774
03:00:00,600 --> 03:00:06,600
Our senior dev knows enough to go look at a bunch of libraries and decide for themselves.

1775
03:00:06,600 --> 03:00:15,600
So the things that a newer Python dev might be interested in or might need to know to make a decision,

1776
03:00:15,600 --> 03:00:23,600
what's an example of how a library has actually been used out in the real world rather than a school exercise?

1777
03:00:24,600 --> 03:00:30,600
If there's any knowledge beyond what's in the library that you need to have,

1778
03:00:30,600 --> 03:00:34,600
and then why is this library better than competing libraries?

1779
03:00:34,600 --> 03:00:41,600
And if you truly can't think of or find any competition, it's totally okay to just say,

1780
03:00:41,600 --> 03:00:48,600
there is no competition, nobody else is doing this, if that is in fact clear.

1781
03:00:48,600 --> 03:00:51,600
So don't worry about getting spelling and grammar absolutely correct.

1782
03:00:51,600 --> 03:00:56,600
This is that first draft where you just sort of get things down on paper.

1783
03:00:56,600 --> 03:01:02,600
And normally I would suggest doing a quick editing pass before handing it over to someone,

1784
03:01:02,600 --> 03:01:09,600
but since we're a little bit cramped on time, I am going to come around and look at your first drafts.

1785
03:01:09,600 --> 03:01:15,600
No judgment or anything, but just a little bit of personalized feedback on how you're doing and what's working.

1786
03:01:16,600 --> 03:01:22,600
I have some style guides up here that I will leave open if anybody needs to double check anything.

1787
03:01:22,600 --> 03:01:27,600
We probably won't get that far in the process, but those resources are here.

1788
03:01:27,600 --> 03:01:37,600
And yeah, we have 18 minutes left, so let's see how we're doing in 12ish minutes.

1789
03:01:37,600 --> 03:01:39,600
Any questions?

1790
03:01:45,600 --> 03:01:53,600
A newer dev, just tell them about a Python library that you like and just answer these three questions.

1791
03:01:53,600 --> 03:01:59,600
Yeah, bullet points are great, but you're just thinking about what would be persuasive to that younger audience,

1792
03:01:59,600 --> 03:02:01,600
or newer audience rather.

1793
03:02:01,600 --> 03:02:04,600
Newer devs aren't the same thing as younger devs.

1794
03:02:15,600 --> 03:02:28,600
And just in case anybody needs it, I'll paste that URL on as well.

1795
03:03:15,600 --> 03:03:40,600
Okay.

1796
03:03:40,600 --> 03:04:07,600
Okay.

1797
03:04:07,600 --> 03:04:28,600
Okay.

1798
03:04:28,600 --> 03:04:43,600
Okay.

1799
03:04:43,600 --> 03:04:58,600
Okay.

1800
03:04:58,600 --> 03:05:13,600
Okay.

1801
03:05:13,600 --> 03:05:18,600
Okay.

1802
03:05:43,600 --> 03:05:58,600
Okay.

1803
03:05:58,600 --> 03:06:13,600
Okay.

1804
03:06:13,600 --> 03:06:28,600
Okay.

1805
03:06:28,600 --> 03:06:43,600
Okay.

1806
03:06:43,600 --> 03:07:11,600
Okay.

1807
03:07:11,600 --> 03:07:36,600
Okay.

1808
03:07:36,600 --> 03:07:51,600
Okay.

1809
03:07:51,600 --> 03:08:06,600
Okay.

1810
03:08:06,600 --> 03:08:21,600
Okay.

1811
03:08:21,600 --> 03:08:36,600
Okay.

1812
03:08:36,600 --> 03:08:51,600
Okay.

1813
03:08:51,600 --> 03:09:06,600
Okay.

1814
03:09:06,600 --> 03:09:21,600
Okay.

1815
03:09:21,600 --> 03:09:36,600
Okay.

1816
03:09:36,600 --> 03:09:51,600
Okay.

1817
03:09:51,600 --> 03:10:06,600
Okay.

1818
03:10:06,600 --> 03:10:21,600
Okay.

1819
03:10:21,600 --> 03:10:36,600
Okay.

1820
03:10:36,600 --> 03:10:51,600
Okay.

1821
03:10:51,600 --> 03:11:06,600
Okay.

1822
03:11:06,600 --> 03:11:21,600
Okay.

1823
03:11:21,600 --> 03:11:36,600
Okay.

1824
03:11:36,600 --> 03:11:51,600
Okay.

1825
03:11:51,600 --> 03:12:06,600
Okay.

1826
03:12:06,600 --> 03:12:21,600
Okay.

1827
03:12:21,600 --> 03:12:36,600
Okay.

1828
03:12:36,600 --> 03:12:51,600
Okay.

1829
03:12:51,600 --> 03:13:06,600
Okay.

1830
03:13:06,600 --> 03:13:21,600
Okay.

1831
03:13:21,600 --> 03:13:36,600
Okay.

1832
03:13:36,600 --> 03:13:51,600
Okay.

1833
03:13:51,600 --> 03:14:06,600
Okay.

1834
03:14:06,600 --> 03:14:21,600
Okay.

1835
03:14:21,600 --> 03:14:36,600
Okay.

1836
03:14:36,600 --> 03:14:51,600
Okay.

1837
03:14:51,600 --> 03:15:06,600
Okay.

1838
03:15:06,600 --> 03:15:21,600
Okay.

1839
03:15:21,600 --> 03:15:36,600
Okay.

1840
03:15:36,600 --> 03:15:51,600
Okay.

1841
03:15:51,600 --> 03:16:06,600
Okay.

1842
03:16:06,600 --> 03:16:21,600
Okay.

1843
03:16:21,600 --> 03:16:36,600
Okay.

1844
03:16:36,600 --> 03:16:51,600
Okay.

1845
03:16:51,600 --> 03:17:06,600
Okay.

1846
03:17:06,600 --> 03:17:21,600
Okay.

1847
03:17:21,600 --> 03:17:36,600
Okay.

1848
03:17:36,600 --> 03:17:51,600
Okay.

1849
03:17:51,600 --> 03:18:06,600
Okay.

1850
03:18:06,600 --> 03:18:21,600
Okay.

1851
03:18:21,600 --> 03:18:36,600
Okay.

1852
03:18:36,600 --> 03:18:51,600
Okay.

1853
03:18:51,600 --> 03:19:06,600
Okay.

1854
03:19:06,600 --> 03:19:21,600
Okay.

1855
03:19:21,600 --> 03:19:36,600
Okay.

1856
03:19:36,600 --> 03:19:51,600
Okay.

1857
03:19:51,600 --> 03:20:06,600
Okay.

1858
03:20:06,600 --> 03:20:33,600
Okay.

1859
03:20:33,600 --> 03:20:40,600
Okay.

1860
03:20:40,600 --> 03:20:41,600
Okay.

1861
03:21:03,600 --> 03:21:04,600
Okay.

1862
03:21:33,600 --> 03:21:34,600
Okay.

1863
03:22:03,600 --> 03:22:07,680
Okay.

