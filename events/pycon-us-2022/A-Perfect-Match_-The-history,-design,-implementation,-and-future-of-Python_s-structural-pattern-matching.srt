1
00:00:00,000 --> 00:00:07,640
We have a full house today.

2
00:00:07,640 --> 00:00:08,640
So welcome.

3
00:00:08,640 --> 00:00:11,360
Thank you so much for being able to join us this morning.

4
00:00:11,360 --> 00:00:18,400
This talk is by our friend, Brandt Bucher, the perfect match, history, design, implementation,

5
00:00:18,400 --> 00:00:21,760
and future of Python's structural pattern matching.

6
00:00:21,760 --> 00:00:23,320
Brandt, take it away.

7
00:00:23,320 --> 00:00:24,320
Thank you.

8
00:00:24,320 --> 00:00:26,040
So, my name is Brandt Bucher.

9
00:00:26,040 --> 00:00:31,240
Today I'm going to talk about Python 3.10's new structural pattern matching feature.

10
00:00:31,240 --> 00:00:33,160
Before we get started, a little bit about me.

11
00:00:33,160 --> 00:00:38,400
I originally studied computer engineering in college.

12
00:00:38,400 --> 00:00:43,160
During my last two years, I encountered Python, and it taught me that I like developing software

13
00:00:43,160 --> 00:00:45,440
a lot more than I like developing hardware.

14
00:00:45,440 --> 00:00:49,000
So I quickly became involved in Python core development.

15
00:00:49,000 --> 00:00:52,120
I've been a core developer for almost two years now.

16
00:00:52,120 --> 00:00:57,520
I'm currently working at Microsoft as part of the faster CPython team.

17
00:00:57,520 --> 00:01:03,000
The biggest project that I've worked on as a Python core developer has been implementing

18
00:01:03,000 --> 00:01:08,280
and co-authoring the structural pattern matching proposal that we've talked about today.

19
00:01:08,280 --> 00:01:12,640
A lot of the work that I did on this proposal was also while I was working at research affiliates

20
00:01:12,640 --> 00:01:14,440
in Newport Beach, California.

21
00:01:14,440 --> 00:01:17,320
I think both these companies are actually going to be boothing at the job fair.

22
00:01:17,320 --> 00:01:18,320
You should check them both out.

23
00:01:18,320 --> 00:01:26,960
I'm going to start with the history of the match statement as it relates to Python.

24
00:01:26,960 --> 00:01:32,420
This feature probably began the way I imagine most new Python features starting, which is

25
00:01:32,420 --> 00:01:37,600
a nerd sniping email from Guido van Rossum on a Wednesday morning during COVID, where

26
00:01:37,600 --> 00:01:41,720
he said something to the effect of a lot of people want to add a match statement to Python.

27
00:01:41,720 --> 00:01:44,520
Do you want to help figure out what that would look like?

28
00:01:44,520 --> 00:01:46,640
And I thought, yeah, that sounds awesome.

29
00:01:46,640 --> 00:01:49,400
I'm stuck at home in lockdown and I need a good project.

30
00:01:49,400 --> 00:01:51,740
This seems like a good project.

31
00:01:51,740 --> 00:01:58,080
So eventually that work became PEP 622.

32
00:01:58,080 --> 00:01:59,560
It was early summer at this point.

33
00:01:59,560 --> 00:02:02,640
We're targeting Python 3.10.

34
00:02:02,640 --> 00:02:06,640
We had gotten four other authors by this point.

35
00:02:06,640 --> 00:02:08,280
This PEP was a monster.

36
00:02:08,280 --> 00:02:09,640
It was huge.

37
00:02:09,640 --> 00:02:12,080
It didn't really have a clear audience.

38
00:02:12,080 --> 00:02:19,200
It included a bunch of features and bolted on additions to the feature that just bloated

39
00:02:19,200 --> 00:02:25,440
the proposal and made it harder to figure out what was important and what wasn't.

40
00:02:25,440 --> 00:02:30,240
The steering council read it diligently and came back to us and said, hey, can you rewrite

41
00:02:30,240 --> 00:02:31,240
this thing?

42
00:02:31,240 --> 00:02:36,920
This is a big decision for us to make and you're not making it easy for us to make it.

43
00:02:37,920 --> 00:02:42,560
We rewrote it as PEP 634 and split it up into three new PEPs.

44
00:02:42,560 --> 00:02:46,960
This was great because it allowed us to present the proposal for three different intended

45
00:02:46,960 --> 00:02:48,920
audiences.

46
00:02:48,920 --> 00:02:55,040
Each different person who had curiosities about what exactly we were proposing had different

47
00:02:55,040 --> 00:02:58,360
places where they could find it.

48
00:02:58,360 --> 00:02:59,880
It was fall at this point.

49
00:02:59,880 --> 00:03:02,320
We still targeted Python 3.10.

50
00:03:02,320 --> 00:03:04,020
But now the three proposals were as follows.

51
00:03:04,020 --> 00:03:08,740
We had PEP 634, which is a very dry specification of the feature.

52
00:03:08,740 --> 00:03:10,060
I don't recommend reading it.

53
00:03:10,060 --> 00:03:14,980
It's mostly just for maintainers like me who are actually implementing the thing.

54
00:03:14,980 --> 00:03:20,220
We had PEP 635, which was intentionally written for the steering council.

55
00:03:20,220 --> 00:03:25,740
This basically explained why we felt the feature deserved to be added to the language and backed

56
00:03:25,740 --> 00:03:30,180
up each of the different design decisions that we made along the way.

57
00:03:30,180 --> 00:03:34,740
Then finally, we have the most important PEP in my opinion, PEP 636.

58
00:03:34,740 --> 00:03:38,820
If you take nothing else away from this talk, it's to read PEP 636.

59
00:03:38,820 --> 00:03:39,820
It's awesome.

60
00:03:39,820 --> 00:03:43,160
It's a really in-depth tutorial of how to use pattern matching in your own code.

61
00:03:43,160 --> 00:03:46,380
It's better than anything I could present to you today.

62
00:03:46,380 --> 00:03:47,380
Check it out.

63
00:03:47,380 --> 00:03:48,380
It's great.

64
00:03:48,380 --> 00:03:52,300
You basically write a text adventure game using pattern matching.

65
00:03:52,300 --> 00:03:59,740
One other thing that I want to highlight from this period was our use of a

66
00:03:59,740 --> 00:04:06,340
dedicated repository to facilitate collaboration on this project.

67
00:04:06,340 --> 00:04:07,340
It's on GitHub.

68
00:04:07,340 --> 00:04:08,340
It's public.

69
00:04:08,340 --> 00:04:09,340
It's still available.

70
00:04:09,340 --> 00:04:14,220
It's on Gito's GitHub account, gvanrossam.patma.

71
00:04:14,220 --> 00:04:16,300
This was great because it gave us a few things.

72
00:04:16,300 --> 00:04:22,140
It gave us an issue tracker where we could basically track all of the different parts

73
00:04:22,140 --> 00:04:27,200
of the feature and bugs in the implementation, et cetera, in real time.

74
00:04:27,200 --> 00:04:31,420
What we wanted to accept, what we had rejected, and what we're still figuring out.

75
00:04:31,420 --> 00:04:33,520
It also gave us a collaborative environment.

76
00:04:33,520 --> 00:04:38,800
This was a place where we could work on draft PEPs, have early prototype implementations,

77
00:04:38,800 --> 00:04:44,020
and we even had several medium-sized apps that extensively used pattern matching.

78
00:04:44,020 --> 00:04:48,660
Each time we changed the syntax or added or removed a feature, we were able to see whether

79
00:04:48,660 --> 00:04:52,680
that made pattern matching easier to use, harder to use, et cetera.

80
00:04:53,160 --> 00:04:58,660
Finally and most importantly, it was a source of information that is searchable.

81
00:04:58,660 --> 00:05:03,600
If you're curious why we made a decision that we made or what alternatives we considered

82
00:05:03,600 --> 00:05:09,300
or why we didn't include a specific feature, all the conversations that led to every single

83
00:05:09,300 --> 00:05:13,560
decision we made are there and they're well tagged, they're well titled, they're very

84
00:05:13,560 --> 00:05:15,120
searchable.

85
00:05:15,120 --> 00:05:18,780
You can see how we went back and forth on different proposals, how the authors might

86
00:05:18,780 --> 00:05:23,160
have been split at different points, what the steering council's input was.

87
00:05:23,160 --> 00:05:24,240
This was huge.

88
00:05:24,240 --> 00:05:28,500
I used it when preparing this talk today just because all that information is very valuable

89
00:05:28,500 --> 00:05:34,100
and it's nice to have it there all in one place.

90
00:05:34,100 --> 00:05:35,100
That's the history.

91
00:05:35,100 --> 00:05:39,060
Obviously, the proposal was eventually accepted.

92
00:05:39,060 --> 00:05:40,060
It's in Python 3.10.

93
00:05:40,060 --> 00:05:43,460
You can go to python.org, download it now, the big yellow download button.

94
00:05:43,460 --> 00:05:46,340
Let's talk a little bit about the design.

95
00:05:46,380 --> 00:05:52,820
I feel like a lot of people introducing structural pattern matching have oversimplified it to

96
00:05:52,820 --> 00:05:55,900
the point of defeating the purpose of the proposal itself.

97
00:05:55,900 --> 00:06:00,700
My goal is to reset your expectations for what pattern matching is and hopefully set

98
00:06:00,700 --> 00:06:04,960
you up for success in using it in your own code.

99
00:06:04,960 --> 00:06:06,420
What is structural pattern matching?

100
00:06:06,420 --> 00:06:09,580
I bet that's a lot of the reason why many of you are here today.

101
00:06:09,580 --> 00:06:14,540
I'm going to start by saying what structural pattern matching is not by quoting myself.

102
00:06:14,540 --> 00:06:16,540
Structural pattern matching is not a switch statement.

103
00:06:16,540 --> 00:06:19,580
I'm going to say it a second time.

104
00:06:19,580 --> 00:06:21,960
Structural pattern matching is not a switch statement.

105
00:06:21,960 --> 00:06:23,720
It looks a lot like a switch statement.

106
00:06:23,720 --> 00:06:26,220
It behaves sometimes like a switch statement.

107
00:06:26,220 --> 00:06:28,980
But ultimately, it's a lot more powerful than a switch statement.

108
00:06:28,980 --> 00:06:33,140
I feel that you're doing yourself a disservice if you try to use it like a switch statement.

109
00:06:33,140 --> 00:06:36,700
You won't be able to harness its full power and you'll be frustrated when it doesn't

110
00:06:36,700 --> 00:06:39,820
behave the way you expect it to.

111
00:06:39,820 --> 00:06:46,260
My goal today is to convince you that structural pattern matching is more than a switch statement

112
00:06:46,260 --> 00:06:48,460
and that it deserves a place in your code base.

113
00:06:48,460 --> 00:06:51,740
If it's not a switch statement, then what is it?

114
00:06:51,740 --> 00:06:55,980
It combines two ideas that we're all already very, very familiar with.

115
00:06:55,980 --> 00:06:58,980
The first is control flow and the second is destructuring.

116
00:06:58,980 --> 00:07:02,060
I'm going to go through each of these.

117
00:07:02,060 --> 00:07:04,700
Control flow is basically just branching.

118
00:07:04,700 --> 00:07:06,660
We do this all the time.

119
00:07:06,660 --> 00:07:11,860
Here we're branching based on the value of an object, whether it's equal to the string

120
00:07:11,860 --> 00:07:15,420
spam, the string eggs, or something else.

121
00:07:15,420 --> 00:07:21,540
We can also branch on what can more abstractly be called the shape of our subject.

122
00:07:21,540 --> 00:07:25,220
Instead of its exact value, we may actually care about the length of a sequence or mapping,

123
00:07:25,220 --> 00:07:26,220
for example.

124
00:07:26,220 --> 00:07:31,260
These are all valid ways of branching based on the shape of our data.

125
00:07:31,260 --> 00:07:32,420
That's control flow.

126
00:07:32,420 --> 00:07:34,380
What's destructuring?

127
00:07:34,380 --> 00:07:38,740
Destructuring is taking structured data and pulling it apart.

128
00:07:38,740 --> 00:07:41,580
In this example, we're using iterable unpacking.

129
00:07:41,580 --> 00:07:45,880
There are other ways of destructuring data that we do every day.

130
00:07:45,880 --> 00:07:48,300
You may access elements in a sequence.

131
00:07:48,300 --> 00:07:51,640
You could access key value pairs in a mapping.

132
00:07:51,640 --> 00:07:55,140
You can even access arbitrary attributes of arbitrary objects.

133
00:07:55,140 --> 00:07:59,920
These are all ways of getting at contained data and actually making it more usable in

134
00:07:59,920 --> 00:08:01,900
your own code.

135
00:08:02,820 --> 00:08:07,340
Structural pattern matching is asking, what if we can branch while we destructure?

136
00:08:07,340 --> 00:08:09,900
What if we can destructure while we branch?

137
00:08:09,900 --> 00:08:15,940
The answer to that question is really a very powerful, declarative programming style that

138
00:08:15,940 --> 00:08:20,300
creates a new way of viewing a lot of the same problems that we've been struggling

139
00:08:20,300 --> 00:08:24,300
with for a very long time.

140
00:08:24,300 --> 00:08:29,220
You may have noticed I've gotten about a third of the way into this talk, and I haven't

141
00:08:29,220 --> 00:08:31,540
actually shown you a match statement yet.

142
00:08:31,540 --> 00:08:33,380
I'm going to fix that.

143
00:08:33,380 --> 00:08:34,380
Here is a match statement.

144
00:08:34,380 --> 00:08:36,660
It's one of the more simple examples.

145
00:08:36,660 --> 00:08:38,540
It looks like this.

146
00:08:38,540 --> 00:08:41,740
It's just the word match followed by any expression.

147
00:08:41,740 --> 00:08:46,060
In this case, it's the name meal.

148
00:08:46,060 --> 00:08:48,540
It's followed by one or more cases that are tried top to bottom.

149
00:08:48,540 --> 00:08:51,940
In this case, we only have one case.

150
00:08:51,940 --> 00:08:55,140
The cases look like the word case followed by a pattern.

151
00:08:55,140 --> 00:08:57,180
I really want to emphasize this.

152
00:08:57,180 --> 00:09:01,060
Entree, side here is a pattern, not an expression.

153
00:09:01,060 --> 00:09:06,540
Rather than building a tuple of length two, we're telling Python how we want to pull apart

154
00:09:06,540 --> 00:09:10,060
a sequence of length two if it encounters one, sort of like the left-hand side of an

155
00:09:10,060 --> 00:09:12,300
equal sign.

156
00:09:12,300 --> 00:09:16,060
To clarify this a little bit more, I'm going to put the equivalent Python 3.9 code side

157
00:09:16,060 --> 00:09:18,540
by side with each of these examples.

158
00:09:18,540 --> 00:09:22,500
You can see here that this is matching any sequence of length two and then binding the

159
00:09:22,500 --> 00:09:26,780
first element to Entree and the second element to side.

160
00:09:26,780 --> 00:09:29,340
This is the sequence pattern.

161
00:09:29,340 --> 00:09:31,300
Inside it has two capture patterns.

162
00:09:31,300 --> 00:09:34,540
Entree and side are capture patterns.

163
00:09:34,540 --> 00:09:36,780
Patterns can be nested arbitrarily.

164
00:09:36,780 --> 00:09:42,460
You can see here the capture patterns.

165
00:09:42,460 --> 00:09:43,460
That was the end of my sentence.

166
00:09:43,460 --> 00:09:48,580
I just started talking.

167
00:09:49,580 --> 00:09:52,660
There are a few different equivalent forms for this.

168
00:09:52,660 --> 00:09:53,660
We saw it un-parenthesized.

169
00:09:53,660 --> 00:09:57,580
It can also be parenthesized or you can use square brackets.

170
00:09:57,580 --> 00:10:01,620
All of these forms are equivalent.

171
00:10:01,620 --> 00:10:06,720
That's capture patterns and sequence patterns.

172
00:10:06,720 --> 00:10:08,660
We also have what are called wildcard patterns.

173
00:10:08,660 --> 00:10:14,620
These are similar to capture patterns in that they match anything, but they don't actually

174
00:10:14,620 --> 00:10:16,340
bind any name.

175
00:10:17,300 --> 00:10:19,860
That underscore is a wildcard pattern.

176
00:10:19,860 --> 00:10:21,340
You just use an underscore.

177
00:10:21,340 --> 00:10:23,940
It behaves like a capture pattern where it matches anything, but you're just telling

178
00:10:23,940 --> 00:10:26,340
Python that you want to ignore that value.

179
00:10:26,340 --> 00:10:31,300
You can see here that we're not actually binding anything from the first element of the sequence

180
00:10:31,300 --> 00:10:32,300
there.

181
00:10:32,300 --> 00:10:37,380
We're only actually binding side there.

182
00:10:37,380 --> 00:10:39,580
Wildcard patterns, like I said, can be put anywhere.

183
00:10:39,580 --> 00:10:44,860
A common idiom is to include a case at the end that is just a wildcard pattern where

184
00:10:44,860 --> 00:10:47,500
this matches everything.

185
00:10:47,500 --> 00:10:50,620
Python's pattern matching is not exhaustive at runtime.

186
00:10:50,620 --> 00:10:55,620
If you fail to match each of the cases, it will just continue execution on the next line.

187
00:10:55,620 --> 00:11:01,700
This is really helpful if you want to raise in that case or assert false or whatever.

188
00:11:01,700 --> 00:11:07,820
Finally, the last pattern that we'll cover today are called value patterns.

189
00:11:07,820 --> 00:11:10,460
In this case, the string spam is a value pattern.

190
00:11:10,460 --> 00:11:14,540
Value patterns just look like atomic literal values.

191
00:11:14,540 --> 00:11:19,260
We have a string here, but we also support byte strings, integers, floats, complex numbers,

192
00:11:19,260 --> 00:11:21,660
Booleans, none.

193
00:11:21,660 --> 00:11:24,100
These basically just match based on equality.

194
00:11:24,100 --> 00:11:26,740
Here we're expressing a fairly complex condition.

195
00:11:26,740 --> 00:11:31,220
What we're saying is we want meal to be a sequence of length to where the first element

196
00:11:31,220 --> 00:11:33,220
is equal to the string spam.

197
00:11:33,220 --> 00:11:37,980
If that is the case, bind the second element aside and execute the corresponding case block

198
00:11:37,980 --> 00:11:39,180
below it.

199
00:11:39,180 --> 00:11:44,020
That would just be a list of statements, sort of like you would find in an if.

200
00:11:44,020 --> 00:11:47,360
Those are the only patterns that I'll cover today because it's kind of a good building

201
00:11:47,360 --> 00:11:49,940
block for examples that will come later.

202
00:11:49,940 --> 00:11:54,180
One thing that I do want to clarify is that there are many more patterns.

203
00:11:54,180 --> 00:11:57,700
I'm actually not showing you the most powerful and exciting ones.

204
00:11:57,700 --> 00:12:01,940
I will give you a little taste, though, but again, read pep 636 if you actually want to

205
00:12:01,940 --> 00:12:04,020
learn about all these things.

206
00:12:04,020 --> 00:12:08,040
Just to kind of pique your interest, we also have or patterns, which allow you to match

207
00:12:08,040 --> 00:12:10,440
one of several alternatives.

208
00:12:10,440 --> 00:12:17,320
We have guards, which allow you to attach arbitrarily complex expressions to your patterns

209
00:12:17,320 --> 00:12:19,800
as part of the matching logic.

210
00:12:19,800 --> 00:12:24,080
We have mapping patterns so that you can destructure arbitrary mappings that have the required

211
00:12:24,080 --> 00:12:25,880
values.

212
00:12:25,880 --> 00:12:30,280
These are especially useful when combined with sequence patterns so that you can, for

213
00:12:30,280 --> 00:12:34,000
example, parse JSON or other nested data structures.

214
00:12:34,000 --> 00:12:39,980
And finally, my favorite and the most exciting are what are called class patterns.

215
00:12:39,980 --> 00:12:41,620
These are really cool.

216
00:12:41,620 --> 00:12:47,100
What I have here is a meal class pattern with two contained food class patterns.

217
00:12:47,100 --> 00:12:54,560
What these do is they will match instances of a meal class with two instances of food

218
00:12:54,560 --> 00:12:57,500
classes contained within.

219
00:12:57,500 --> 00:12:59,680
This isn't actually building any instances.

220
00:12:59,680 --> 00:13:04,460
It's telling Python how to pull apart these classes if we encounter them.

221
00:13:04,460 --> 00:13:08,860
This just compiles to a bunch of instance checks and attribute accesses.

222
00:13:08,860 --> 00:13:13,740
Another thing that you get here for free is really powerful runtime type parameterization.

223
00:13:13,740 --> 00:13:16,980
There's a lot of exciting opportunities that you can use this in.

224
00:13:16,980 --> 00:13:22,940
This is awesome to use if you are writing AST traversals, for example.

225
00:13:22,940 --> 00:13:29,140
The big aha moment for me with pattern matching was when I was writing a red-black tree, a

226
00:13:29,140 --> 00:13:31,140
self-balancing binary tree.

227
00:13:31,140 --> 00:13:33,540
That's a structure that I've never really fully understood.

228
00:13:33,540 --> 00:13:38,740
I've implemented it before, but I never really got how it worked.

229
00:13:38,740 --> 00:13:44,220
Using a red-black tree, whether it's insertion, rebalancing, verification, deletion, using

230
00:13:44,220 --> 00:13:50,460
structural pattern matching and specifically class patterns really clarifies how the logic

231
00:13:50,460 --> 00:13:54,340
works because you get to see the shape of the data that you're working with and the

232
00:13:54,340 --> 00:13:59,580
different pieces that you're using as you're rearranging them.

233
00:13:59,580 --> 00:14:02,120
Those are all the different types of patterns.

234
00:14:02,120 --> 00:14:06,580
One thing that I really want to highlight about this is that we didn't invent really

235
00:14:06,580 --> 00:14:07,940
any of this.

236
00:14:07,940 --> 00:14:11,660
Structural pattern matching has been around in mostly functional programming languages

237
00:14:11,660 --> 00:14:14,980
for something like 50 years now, probably more.

238
00:14:14,980 --> 00:14:18,340
We had tons of prior art to draw upon.

239
00:14:18,340 --> 00:14:20,060
To highlight that, I have an example here.

240
00:14:20,060 --> 00:14:22,180
This is just a recursive factorial function.

241
00:14:22,180 --> 00:14:23,860
It has a parameter n.

242
00:14:23,860 --> 00:14:26,260
If n is 0 or 1, we return 1.

243
00:14:26,260 --> 00:14:29,180
Otherwise, we return the recursive factorial.

244
00:14:29,180 --> 00:14:34,320
I just want to put this side by side with two other modern examples of pattern matching

245
00:14:34,320 --> 00:14:35,940
in Rust and Scala.

246
00:14:35,940 --> 00:14:40,580
If I reformat the Rust and Scala examples to match Python's indentation style, it's

247
00:14:40,580 --> 00:14:45,100
very clear where our inspiration came from here.

248
00:14:45,100 --> 00:14:48,020
One thing that was important to us is that people who have used pattern matching in other

249
00:14:48,020 --> 00:14:52,700
languages find it natural to use in Python and that people who are using pattern matching

250
00:14:52,700 --> 00:14:58,660
in Python are well prepared to use it in other programming languages as well.

251
00:14:58,660 --> 00:15:02,520
With that said, I think we can all agree that the example on the far right looks and feels

252
00:15:02,520 --> 00:15:14,760
the most like Python, which was equally important to us.

253
00:15:14,760 --> 00:15:16,520
Next I'm going to talk a little bit about the implementation.

254
00:15:16,520 --> 00:15:22,840
I spent something like nine months working on this while in lockdown.

255
00:15:22,840 --> 00:15:26,520
I'm going to talk about it.

256
00:15:26,520 --> 00:15:29,580
The first thing, and my favorite part of the implementation, I actually don't get to take

257
00:15:29,580 --> 00:15:30,580
credit for this.

258
00:15:30,580 --> 00:15:34,260
Gito wrote this and it was the first code that was written to support structural pattern

259
00:15:34,260 --> 00:15:35,260
matching.

260
00:15:35,260 --> 00:15:37,540
It's called soft keywords and it's awesome.

261
00:15:37,540 --> 00:15:40,460
You may be hearing this talk and saying, well, Brant, this whole structural pattern matching

262
00:15:40,460 --> 00:15:45,200
thing sounds really cool, but I have a bunch of existing code that uses match and case

263
00:15:45,200 --> 00:15:46,200
as identifiers.

264
00:15:46,200 --> 00:15:50,080
This is going to break my code, right, just upgrading to 3.11.

265
00:15:50,080 --> 00:15:52,900
The answer is no.

266
00:15:52,900 --> 00:15:54,280
That's what soft keywords are.

267
00:15:54,280 --> 00:16:00,380
I have an example here that uses match and case as identifiers.

268
00:16:00,380 --> 00:16:04,360
This is a really good example of code that can be refactored using pattern matching.

269
00:16:04,360 --> 00:16:06,600
This is what that looks like.

270
00:16:06,600 --> 00:16:09,020
It looks a little weird, but it does work.

271
00:16:09,020 --> 00:16:14,240
You can see we're using match as a keyword in blue and case as a keyword in blue and

272
00:16:14,240 --> 00:16:17,420
match and case as identifiers.

273
00:16:17,420 --> 00:16:23,240
Python's parser since 3.9 has been powerful enough to detect based on context whether

274
00:16:23,240 --> 00:16:28,880
you meant to use it as a keyword or as an identifier since it's never actually ambiguous.

275
00:16:28,880 --> 00:16:32,840
This was really important to us because even though this is a big new change with a whole

276
00:16:32,840 --> 00:16:38,220
lot of surface area, we were actually able to completely preserve backward compatibility,

277
00:16:38,220 --> 00:16:43,080
which was something that was super important and we're glad that we were able to do that.

278
00:16:43,080 --> 00:16:48,080
All right, so next I'm going to talk about the structural pattern matching compiler,

279
00:16:48,080 --> 00:16:52,740
or since that's a little wordy, I like to call it the spam compiler.

280
00:16:52,740 --> 00:16:55,640
Just a warning, I'm going to show you some bytecode disassemblies.

281
00:16:55,640 --> 00:16:57,960
It is not important for using the feature.

282
00:16:57,960 --> 00:16:59,040
I think it's interesting.

283
00:16:59,040 --> 00:17:00,400
You might think it's interesting, too.

284
00:17:00,400 --> 00:17:05,160
I think it makes some good points about the value of native syntax features, but you could

285
00:17:05,160 --> 00:17:10,840
skip the next two minutes of the talk and you wouldn't actually miss anything.

286
00:17:10,840 --> 00:17:15,820
This is the same Python 3.10 match statement that I've been showing a couple of times now.

287
00:17:15,820 --> 00:17:20,860
Before I show you what Python does when it runs this, I want to show you for context

288
00:17:20,860 --> 00:17:25,560
what the equivalent Python 3.9 code does when you actually run it.

289
00:17:25,560 --> 00:17:29,200
This is the compiled bytecode output.

290
00:17:29,200 --> 00:17:32,440
As many of us know, CPython uses a stack-based virtual machine, so I'm going to show the

291
00:17:32,440 --> 00:17:35,720
stack there on the far right.

292
00:17:35,720 --> 00:17:43,980
So we execute this code, we start by loading three names, is instance, meal, and sequence.

293
00:17:43,980 --> 00:17:49,600
We call is instance on meal and sequence, and assuming that's true, we continue execution.

294
00:17:49,600 --> 00:17:52,720
Then we load two more names, len and meal.

295
00:17:52,720 --> 00:17:58,080
We call len on meal, load the constant to compare them for equality.

296
00:17:58,080 --> 00:18:01,800
Assuming that that is true, then we have a match.

297
00:18:01,800 --> 00:18:07,600
So we load meal a third time, unpack it into two elements, store the first element as entree

298
00:18:07,600 --> 00:18:09,800
and the second element as side.

299
00:18:09,800 --> 00:18:10,800
Okay.

300
00:18:10,800 --> 00:18:11,800
Not too bad.

301
00:18:11,800 --> 00:18:15,640
There's a little redundant work happening there, but for the most part, it just clearly

302
00:18:15,640 --> 00:18:20,040
follows from the code that you've sort of prescribed here on the left.

303
00:18:20,040 --> 00:18:25,680
Compare this to the code emitted for the match statement.

304
00:18:25,680 --> 00:18:27,840
People in the back will probably realize it's a fair bit shorter.

305
00:18:27,840 --> 00:18:31,840
The people in the front will probably realize that we got a couple of new opcodes here that

306
00:18:31,840 --> 00:18:35,060
are purpose-built for pattern matching.

307
00:18:35,060 --> 00:18:36,480
So this starts in much the same way.

308
00:18:36,480 --> 00:18:38,480
We load the name meal.

309
00:18:38,480 --> 00:18:41,600
Next we execute a new opcode, match sequence.

310
00:18:41,600 --> 00:18:42,600
This is really cool.

311
00:18:42,600 --> 00:18:46,860
This does the same is instance check that we saw in the Python 3.9 code, but thanks

312
00:18:47,340 --> 00:18:49,260
my colleague Mark Shannon.

313
00:18:49,260 --> 00:18:52,460
This is actually about as fast as you can perform that check.

314
00:18:52,460 --> 00:18:57,120
It's basically reduced to a quick flag check on the type at the C level.

315
00:18:57,120 --> 00:19:03,580
And so you get really, really optimized performance out of this simple opcode versus the equivalent

316
00:19:03,580 --> 00:19:06,020
pure Python code.

317
00:19:06,020 --> 00:19:09,660
Assuming that's true, we execute the new get len opcode, which is similar.

318
00:19:09,660 --> 00:19:14,420
Rather than loading the len object and going through a chain of calls, we actually just

319
00:19:14,500 --> 00:19:19,260
query the type directly for what the length of our sequence is.

320
00:19:19,260 --> 00:19:21,900
And then the rest of the code is basically the same.

321
00:19:21,900 --> 00:19:26,180
Compare that equal to two, unpack the sequence, and store our names.

322
00:19:26,180 --> 00:19:30,700
And I think this shows the value of actually having this as a native syntax.

323
00:19:30,700 --> 00:19:37,660
So you know, Python's compiler has an extraordinary knowledge of context when it's compiling this

324
00:19:37,660 --> 00:19:39,140
match statement.

325
00:19:39,140 --> 00:19:44,580
It knows exactly what you're looking for and exactly what you're trying to match against.

326
00:19:44,580 --> 00:19:49,060
And that's important because when we're writing this declarative style of code, we're trusting

327
00:19:49,060 --> 00:19:52,820
Python's compiler to generate efficient code for us.

328
00:19:52,820 --> 00:19:57,060
And so this is the sort of thing that you only get from native syntax.

329
00:19:57,060 --> 00:20:02,300
You don't get this from transpiled languages that emit Python code or maybe pip installable

330
00:20:02,300 --> 00:20:07,060
packages that have context managers and strings to achieve the same effect.

331
00:20:07,100 --> 00:20:11,580
And so this is a very valuable thing in terms of, you know, trusting the compiler to make

332
00:20:11,580 --> 00:20:14,420
the right choices for you.

333
00:20:14,420 --> 00:20:17,180
So finally, I want to talk about the future.

334
00:20:17,180 --> 00:20:20,740
Everything I'm about to show for the rest of the talk, none of it is actually in any

335
00:20:20,740 --> 00:20:22,220
version of Python yet.

336
00:20:22,220 --> 00:20:25,900
I have mostly working implementations that aren't PR ready.

337
00:20:25,900 --> 00:20:27,660
So maybe 3.12.

338
00:20:27,660 --> 00:20:30,000
We'll see if I find the time.

339
00:20:30,000 --> 00:20:31,880
But the future is faster.

340
00:20:31,880 --> 00:20:35,300
So one thing that I'm really excited about is improved control flow.

341
00:20:35,700 --> 00:20:39,260
And I think this is best illustrated by an example.

342
00:20:39,260 --> 00:20:41,500
So I have this match statement here.

343
00:20:41,500 --> 00:20:43,700
Briefly just walking through what it does.

344
00:20:43,700 --> 00:20:48,060
If meal is a two element sequence where the first element is equal to spam, I bind the

345
00:20:48,060 --> 00:20:52,380
second element to side and execute the corresponding case block.

346
00:20:52,380 --> 00:20:57,060
If meal is a two element sequence where the first element is equal to the string eggs,

347
00:20:57,060 --> 00:21:00,860
I bind the second element to side and execute the corresponding case block.

348
00:21:00,940 --> 00:21:06,300
Finally, if meal is a two element sequence, then bind the second element to side and execute

349
00:21:06,300 --> 00:21:08,020
the corresponding case block.

350
00:21:08,020 --> 00:21:14,180
Now the design of Python's compiler currently, or CPython's compiler currently, it makes

351
00:21:14,180 --> 00:21:18,540
it so that the way that Python actually executes this code is very similar to the way I verbally

352
00:21:18,540 --> 00:21:19,620
described it.

353
00:21:19,620 --> 00:21:22,460
We check whether meal is a sequence three times.

354
00:21:22,460 --> 00:21:25,020
We check the length of the sequence three times.

355
00:21:25,020 --> 00:21:30,820
We have three separate places where we actually bind the name to side.

356
00:21:31,420 --> 00:21:36,660
What you can see is that we're actually only checking if it's a sequence of length two

357
00:21:36,660 --> 00:21:38,700
one time that we care about.

358
00:21:38,700 --> 00:21:42,620
And if that's the case, then we're obviously going to bind the second element to side,

359
00:21:42,620 --> 00:21:46,380
and it's only after that that we care whether the first element was spam, eggs, or something

360
00:21:46,380 --> 00:21:47,780
else.

361
00:21:47,780 --> 00:21:55,060
So this is an exciting optimization opportunity, and it's more general than just this specific

362
00:21:55,060 --> 00:21:56,900
example.

363
00:21:56,900 --> 00:22:02,020
So to show you kind of the equivalent code here with all the redundant work, all of you

364
00:22:02,020 --> 00:22:06,900
as great Python programmers will look at that and say, Brant, you can refactor this to reduce

365
00:22:06,900 --> 00:22:10,460
repeated work, and it might look something like this.

366
00:22:10,460 --> 00:22:13,760
This is a really exciting optimization called decision trees, and there's lots of prior

367
00:22:13,760 --> 00:22:17,020
art and research on this in languages like OCaml.

368
00:22:17,020 --> 00:22:21,700
Basically the way it works is that you can merge overlapping checks and adjacent patterns.

369
00:22:21,700 --> 00:22:23,180
It's not too difficult to do.

370
00:22:23,180 --> 00:22:28,540
Python throws a couple curveballs your way that make it nontrivial, but I do working

371
00:22:28,540 --> 00:22:30,580
implementation for this.

372
00:22:30,580 --> 00:22:34,900
98% working.

373
00:22:34,900 --> 00:22:39,740
And as I said, it's more general, so this can apply to all sorts of patterns as well.

374
00:22:39,740 --> 00:22:44,340
One other really cool thing that falls out of this decision tree optimization is improved

375
00:22:44,340 --> 00:22:45,940
reachability checks.

376
00:22:45,940 --> 00:22:49,300
So again, I'll leave you with one final example.

377
00:22:49,300 --> 00:22:53,420
Let's say that I have some cutting edge program that tells me if a number is divisible by

378
00:22:53,420 --> 00:22:57,940
5, 3, 15, or none of those.

379
00:22:57,940 --> 00:23:00,420
So this is one possible implementation.

380
00:23:00,420 --> 00:23:01,900
Does anyone see the bug?

381
00:23:01,900 --> 00:23:06,140
I'll give you a second.

382
00:23:06,140 --> 00:23:07,980
So maybe some of you saw it.

383
00:23:07,980 --> 00:23:11,060
The third case is totally unreachable.

384
00:23:11,060 --> 00:23:13,140
The first case matches anything divisible by 3.

385
00:23:13,140 --> 00:23:16,260
The second case matches anything divisible by 5.

386
00:23:16,260 --> 00:23:20,060
Neither of those will catch anything that's divisible by 15.

387
00:23:20,060 --> 00:23:23,940
So this actually isn't that easy to catch in the compiler.

388
00:23:23,940 --> 00:23:28,460
But when compiling efficient decision trees for these two-element sequences, it actually

389
00:23:28,460 --> 00:23:30,460
becomes trivial to catch.

390
00:23:30,460 --> 00:23:34,820
And a future version of Python might give you a helpful run time warning, sorry, a syntax

391
00:23:34,820 --> 00:23:37,880
warning letting you know that your pattern is unreachable.

392
00:23:37,880 --> 00:23:39,940
And the fix is really simple.

393
00:23:39,940 --> 00:23:46,220
Since cases are tried from top to bottom, you simply reorder your cases and it works.

394
00:23:46,220 --> 00:23:48,060
So that's all I have today.

395
00:23:48,060 --> 00:23:49,060
Thank you for coming out here.

396
00:23:49,060 --> 00:23:50,380
I heard there was great hiking in Salt Lake City.

397
00:23:50,380 --> 00:23:52,340
I didn't realize it was inside the convention center.

398
00:23:52,340 --> 00:23:55,340
So thank you for making the trek out here.

399
00:23:55,340 --> 00:23:57,020
I'm at BrantFootground.GitHub.

400
00:23:57,020 --> 00:23:59,500
And you can also email me at Brant at Python.org.

401
00:23:59,500 --> 00:24:04,580
I was told we're not doing Q&A today, so I will be right outside that door.

402
00:24:04,580 --> 00:24:09,060
Feel free to ask me any questions or yell at me for ruining your language.

403
00:24:09,060 --> 00:24:09,740
Whatever.

