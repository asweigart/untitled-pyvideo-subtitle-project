1
00:00:00,000 --> 00:00:06,240
All right.

2
00:00:06,240 --> 00:00:08,280
I think we're finally ready to start.

3
00:00:08,280 --> 00:00:14,120
Sorry for the bit of a wait, but hopefully we're good to go.

4
00:00:14,120 --> 00:00:15,120
All right.

5
00:00:15,120 --> 00:00:19,240
Let's give Miranda a round of applause, please.

6
00:00:19,240 --> 00:00:21,200
Thank you.

7
00:00:21,200 --> 00:00:24,320
Hello, everyone.

8
00:00:24,320 --> 00:00:28,080
I hope that you are having a wonderful day so far.

9
00:00:28,080 --> 00:00:31,160
I am super excited to be here today.

10
00:00:31,160 --> 00:00:34,840
This is actually my first time speaking at a large conference.

11
00:00:34,840 --> 00:00:35,840
Woohoo!

12
00:00:35,840 --> 00:00:38,840
Yeah, thanks for the enthusiasm.

13
00:00:38,840 --> 00:00:39,840
Woo!

14
00:00:39,840 --> 00:00:46,880
Today we're going to be looking at animating with FuncAnimation() specifically, which is

15
00:00:46,880 --> 00:00:48,880
a matplotlib class.

16
00:00:48,880 --> 00:00:51,240
So a quick intro on myself.

17
00:00:51,240 --> 00:00:56,080
I had a wonderful introduction already, but my name is Miranda Auhl.

18
00:00:56,120 --> 00:01:03,320
I'm a developer advocate at Timescale, which is a time series database built on Postgres.

19
00:01:03,320 --> 00:01:06,160
So that's kind of where I'm coming from.

20
00:01:06,160 --> 00:01:11,760
And then I included my GitHub first, because I will be showing some code snippets in the

21
00:01:11,760 --> 00:01:16,240
talk today, but I won't be going into super detail.

22
00:01:16,240 --> 00:01:21,880
So if you want to make sure that you can see all the detail that you want in the Python

23
00:01:21,920 --> 00:01:25,160
script that I'm going to be kind of walking through today, you can access it through my

24
00:01:25,160 --> 00:01:26,160
GitHub account.

25
00:01:26,160 --> 00:01:28,840
So don't worry if you don't.

26
00:01:28,840 --> 00:01:31,720
If you skip something now, you can look at it later.

27
00:01:31,720 --> 00:01:33,080
Or ask me questions also.

28
00:01:33,080 --> 00:01:37,320
And I'll have a link to the exact repository at the end of the talk as well.

29
00:01:37,320 --> 00:01:41,120
And then that's just my email and also my Twitter handle, so feel free to reach out

30
00:01:41,120 --> 00:01:42,760
at any time.

31
00:01:42,760 --> 00:01:48,480
So I want to take you on a journey, and unfortunately not a hobbit's journey, because that would

32
00:01:48,480 --> 00:01:49,480
be awesome.

33
00:01:49,480 --> 00:01:57,280
So I want to start my journey from taking a static graph and transforming it into a

34
00:01:57,280 --> 00:01:59,880
data animation.

35
00:01:59,880 --> 00:02:04,400
And on this journey, we're going to walk through, this is kind of like the setup and the path

36
00:02:04,400 --> 00:02:05,800
that we're going to be following.

37
00:02:05,800 --> 00:02:10,720
So first, right before we can really visualize any data, we have to understand the data and

38
00:02:10,720 --> 00:02:12,200
actually grab the data.

39
00:02:12,200 --> 00:02:13,200
Important.

40
00:02:13,200 --> 00:02:18,040
Then we'll look at actually creating a static visualization.

41
00:02:18,040 --> 00:02:22,400
And then the last thing that we'll look at is actually transforming that static visualization

42
00:02:22,400 --> 00:02:25,600
into a data animation.

43
00:02:25,600 --> 00:02:31,780
So we start off as you probably could expect from the name of this talk.

44
00:02:31,780 --> 00:02:34,920
We're starting off with NFL and NFL data.

45
00:02:34,920 --> 00:02:39,720
So in 2015, the NFL did something really interesting.

46
00:02:39,720 --> 00:02:47,120
They started requiring that every stadium have RFID receivers and that every player

47
00:02:47,200 --> 00:02:53,440
have RFID tags and the ball as well actually have RFID tags that track every tenth of a

48
00:02:53,440 --> 00:02:57,080
second all their movement, speed, acceleration, all this stuff.

49
00:02:57,080 --> 00:03:03,920
So as you can imagine, we have from 2015 to now, the NFL tracking, speed, acceleration,

50
00:03:03,920 --> 00:03:08,960
all this stuff, every tenth of a second for every player for every single game.

51
00:03:08,960 --> 00:03:13,320
That is a lot of really cool time series data.

52
00:03:13,320 --> 00:03:18,820
And what's amazing and blew our minds at time scale was that the NFL actually gave

53
00:03:18,820 --> 00:03:25,240
access to people to access this data for free.

54
00:03:25,240 --> 00:03:26,240
Insane.

55
00:03:26,240 --> 00:03:32,480
Like, I could not believe that the NFL released free data for anyone to analyze.

56
00:03:32,480 --> 00:03:34,960
All you needed to do is have a Kaggle account.

57
00:03:34,960 --> 00:03:39,520
So starting in 2020, the NFL started these Big Data Bowl competitions where they released

58
00:03:39,600 --> 00:03:44,560
a subset of this awesome time series tracking data.

59
00:03:44,560 --> 00:03:49,280
And you could download it, download the CFEs and analyze it.

60
00:03:49,280 --> 00:03:55,960
And specifically in the 2021 Big Data Bowl competition, they released a bunch of the

61
00:03:55,960 --> 00:04:03,400
tenth of a second tracking data available and with kind of a bend towards passing plays

62
00:04:03,400 --> 00:04:05,080
specifically.

63
00:04:05,080 --> 00:04:10,920
But they can't release, of course, all the data because they don't want to release everything

64
00:04:10,920 --> 00:04:11,920
to the public.

65
00:04:11,920 --> 00:04:13,560
But they did release a huge portion.

66
00:04:13,560 --> 00:04:18,200
And so when my team and I found out about this, we were like, whoa, with great time

67
00:04:18,200 --> 00:04:22,840
series data comes great responsibility to analyze it.

68
00:04:22,840 --> 00:04:24,040
That's how the saying goes, right?

69
00:04:24,040 --> 00:04:28,580
Well, we're just going to roll with it and say that that's how it goes now.

70
00:04:28,580 --> 00:04:32,320
So all analysis, right, we saw this data.

71
00:04:32,320 --> 00:04:33,880
We knew that we wanted to analyze it.

72
00:04:33,880 --> 00:04:37,520
So the first step is actually getting to know the data.

73
00:04:37,520 --> 00:04:44,240
And so this is one table that you can access through the 2021 Big Data Bowl competition.

74
00:04:44,240 --> 00:04:49,320
So this is the tracking table, which is tracking that tenth of a second kind of IOT readings

75
00:04:49,320 --> 00:04:51,800
basically of the players in the ball.

76
00:04:51,800 --> 00:04:57,640
And this is actually a subset of the columns that you have access to in that competition.

77
00:04:57,640 --> 00:05:00,320
So we see that there's a lot of data here.

78
00:05:00,760 --> 00:05:07,400
First, I want to start off by just going through each column and just kind of like get helping

79
00:05:07,400 --> 00:05:09,440
everyone to get to know the data a little bit.

80
00:05:09,440 --> 00:05:12,600
So first off, we have time, which is a timestamp column.

81
00:05:12,600 --> 00:05:20,760
And we see that it is incrementing and a tenth of a second time like stamp.

82
00:05:20,760 --> 00:05:29,480
So first, we see that we have 14.599, essentially 14.6 in kind of the far left end of the timestamp

83
00:05:29,480 --> 00:05:31,560
or the far right, excuse me.

84
00:05:31,560 --> 00:05:34,040
And then the next timestamp is 14.7.

85
00:05:34,040 --> 00:05:38,320
So we're getting tenth of a second readings in this data.

86
00:05:38,320 --> 00:05:39,600
So it's really granular.

87
00:05:39,600 --> 00:05:40,600
That's super fun.

88
00:05:40,600 --> 00:05:44,280
That means that we could there's a lot of possibility for how you can analyze this data

89
00:05:44,280 --> 00:05:46,520
and aggregate it and stuff.

90
00:05:46,520 --> 00:05:53,160
And also notice that we have a bunch of repeated rows for each timestamp.

91
00:05:53,160 --> 00:05:57,960
And that's because the NFL, they put RFID tags on all the players and the ball.

92
00:05:57,960 --> 00:06:03,320
So each player and the ball is going to be taking in a reading for every tenth of a second.

93
00:06:03,320 --> 00:06:08,640
Now in this case, since again, the NFL can't release all of the data to us, they did though

94
00:06:08,640 --> 00:06:15,200
release for this data set all the most important players for a specific passing play and the

95
00:06:15,200 --> 00:06:17,160
ball for each tenth of a second.

96
00:06:17,160 --> 00:06:19,840
So that's why you see 14 rows here.

97
00:06:19,840 --> 00:06:24,400
So that's 13 of those are going to be players, one of which is going to be the ball.

98
00:06:24,400 --> 00:06:26,560
So cool beans.

99
00:06:26,560 --> 00:06:33,280
Next up we have X and Y. X and Y are columns that represent X and Y coordinates on a coordinate

100
00:06:33,280 --> 00:06:34,600
plane.

101
00:06:34,600 --> 00:06:41,240
The NFL set up the field, the football field, so that they could take in basically as an

102
00:06:41,240 --> 00:06:45,800
X-Y coordinate plane so that you could find out the location of any player or the ball

103
00:06:45,800 --> 00:06:49,880
at any moment in time during any of these games.

104
00:06:49,880 --> 00:06:51,420
Pretty sweet, right?

105
00:06:51,420 --> 00:06:55,460
And so that's really what these X-Y coordinates are.

106
00:06:55,460 --> 00:06:57,820
It's yards, it's in yards.

107
00:06:57,820 --> 00:07:02,460
It's saying exactly where that individual or the ball is at any given time.

108
00:07:02,460 --> 00:07:08,180
So then next we have speed, which the S is representing the speed of the individual at

109
00:07:08,180 --> 00:07:09,740
that moment in time.

110
00:07:09,740 --> 00:07:13,860
Then we have acceleration is what the A stands for.

111
00:07:13,860 --> 00:07:17,180
Game ID, which is a unique identifier for each game.

112
00:07:17,180 --> 00:07:21,140
Got to know which one is which, you know, good to know.

113
00:07:21,860 --> 00:07:29,740
This play ID is specifying since this data is kind of bent on just showing passing plays,

114
00:07:29,740 --> 00:07:37,060
this play ID is a unique identifier for us to know within a game a specific passing play.

115
00:07:37,060 --> 00:07:38,700
So that's what that play ID is.

116
00:07:38,700 --> 00:07:43,340
And then this last column is kind of important and what we're going to dig into a little

117
00:07:43,340 --> 00:07:46,340
bit more in today's talk, but it's this frame.

118
00:07:46,340 --> 00:07:50,620
And kind of at first glance, you know, it's not super clear what it is.

119
00:07:50,620 --> 00:07:55,620
Actually this frame column is taking every tenth of a second and mapping it to an integer

120
00:07:55,620 --> 00:07:56,620
value.

121
00:07:56,620 --> 00:08:00,620
And it also, it's not only just mapping it to an integer value, but it's mapping it to

122
00:08:00,620 --> 00:08:04,940
an integer value that's increasing continuously with time.

123
00:08:04,940 --> 00:08:10,940
So as you see right, the 14.599, tenth of a second is mapped to a frame value of one.

124
00:08:10,940 --> 00:08:16,640
And the 14.7 second, tenth of a second, is mapped to a frame value of two.

125
00:08:16,640 --> 00:08:21,920
So we see that as time is increasing, that frame value is increasing.

126
00:08:21,920 --> 00:08:30,480
And another note that when we looked at this data more is that for every play ID, it will

127
00:08:30,480 --> 00:08:35,960
count every tenth of a second and map each tenth of a second to the frame.

128
00:08:35,960 --> 00:08:42,080
But then as soon as you hit a new play value, so like if we were to go to 76, the frame

129
00:08:42,080 --> 00:08:45,060
value would kind of restart at one.

130
00:08:45,060 --> 00:08:52,520
So essentially we know from this data that that 14.599, tenth of a second, was the first

131
00:08:52,520 --> 00:08:56,780
tenth of a second to occur in the 75th play.

132
00:08:56,780 --> 00:09:02,300
And then, you know, the 14.7 was the second tenth of a second to occur in the 75th play.

133
00:09:02,300 --> 00:09:05,820
So these frame IDs are unique to the play.

134
00:09:05,820 --> 00:09:06,980
All right.

135
00:09:06,980 --> 00:09:08,780
So we get to know our data.

136
00:09:08,780 --> 00:09:10,140
Now right, we can get to the fun stuff.

137
00:09:10,140 --> 00:09:11,620
We can actually analyze it.

138
00:09:11,620 --> 00:09:13,660
We can create visualizations.

139
00:09:13,740 --> 00:09:19,500
So one of the visualizations that I wanted to know was, well, we have these X, Y coordinates.

140
00:09:19,500 --> 00:09:22,140
Let's actually plot these players on a field, right?

141
00:09:22,140 --> 00:09:23,140
That seems kind of fun.

142
00:09:23,140 --> 00:09:24,460
And we have the information.

143
00:09:24,460 --> 00:09:25,540
Let's do it.

144
00:09:25,540 --> 00:09:27,820
So I created a script.

145
00:09:27,820 --> 00:09:32,740
And I set up my Python script kind of with an argument because I wanted to focus on one

146
00:09:32,740 --> 00:09:34,900
play at a time.

147
00:09:34,900 --> 00:09:39,320
And so I defined the game ID that I wanted to look at and then the play ID that I wanted

148
00:09:39,320 --> 00:09:43,800
to kind of zoom in on and graph the data from.

149
00:09:43,800 --> 00:09:44,800
So I define that.

150
00:09:44,800 --> 00:09:48,680
And then I also pull in my data from my time scale DB database.

151
00:09:48,680 --> 00:09:53,080
So I'm pulling that data into my Python script for this specific play so then I can really

152
00:09:53,080 --> 00:09:55,860
dig in more and analyze it.

153
00:09:55,860 --> 00:09:58,520
So then I have data in my Python script.

154
00:09:58,520 --> 00:09:59,520
What's next?

155
00:09:59,520 --> 00:10:02,920
Well, if I'm going to plot players on a field, I'm going to need a field.

156
00:10:02,920 --> 00:10:09,840
So what I did was that I created a generate field function, which I could just call that

157
00:10:09,840 --> 00:10:12,560
and get this awesome field.

158
00:10:12,560 --> 00:10:17,760
So I made it so that I kind of like smoosh all of my matplotlib functions into one kind

159
00:10:17,760 --> 00:10:21,720
of wrap them all up into one function so that I can call that generate field and get, you

160
00:10:21,720 --> 00:10:26,000
know, the yard lines and the hash marks and all this good stuff.

161
00:10:26,000 --> 00:10:31,280
So then, right, we have a field, but now we need to actually plot the players.

162
00:10:31,280 --> 00:10:33,840
So I created another function.

163
00:10:33,840 --> 00:10:37,160
I created a draw play function.

164
00:10:37,160 --> 00:10:42,520
And this draw play function takes in a value of a frame, so it takes in a frame argument,

165
00:10:42,520 --> 00:10:47,940
and it's going to draw a play, kind of plot the play from that frame.

166
00:10:47,940 --> 00:10:52,520
So with the frame value, it represents, right, a moment in time.

167
00:10:52,520 --> 00:10:58,440
So I can put in a moment in time and get this plot plotted.

168
00:10:58,440 --> 00:11:01,520
So with this function, I made it so that I plot.

169
00:11:01,520 --> 00:11:04,920
Oh, this is just, you know, showing us the frame value.

170
00:11:04,920 --> 00:11:09,120
So with this plotting function, I take in, you know, that frame value, and then I can

171
00:11:09,120 --> 00:11:10,680
actually plot the players.

172
00:11:10,680 --> 00:11:14,400
I created a legend, and I also get a title.

173
00:11:14,400 --> 00:11:17,280
So all right.

174
00:11:17,280 --> 00:11:22,000
So now in order to actually create the function and plot it on a graph, I made it so that

175
00:11:22,000 --> 00:11:27,960
I can just call these four lines of code and get, you know, this static plot that I wanted.

176
00:11:27,960 --> 00:11:32,280
And so the first line is a figure, so I'm creating a map plot lib figure.

177
00:11:32,280 --> 00:11:35,680
Second line is I generate the field, so I produce the field on the figure.

178
00:11:35,680 --> 00:11:42,640
Third line is that I'm calling the draw play function for a frame ID value of 65.

179
00:11:42,640 --> 00:11:48,640
And then the last line is plot show that actually shows us the plot in, you know, so that we

180
00:11:48,640 --> 00:11:49,640
can see it.

181
00:11:49,640 --> 00:11:55,240
So this is the 75th, 10th of a second for this specific play that I'm kind of digging

182
00:11:55,240 --> 00:11:57,140
into for this script.

183
00:11:57,140 --> 00:12:00,860
And so, you know, we see we have home team, away team, we have the football.

184
00:12:00,860 --> 00:12:02,340
And like, you know, this is pretty cool.

185
00:12:02,340 --> 00:12:04,500
You know, this is an interesting graph.

186
00:12:04,500 --> 00:12:08,900
I can see that, like, I see the players on the field, but, like, you know, is the ball

187
00:12:08,900 --> 00:12:10,440
being passed right now?

188
00:12:10,440 --> 00:12:12,020
It seems to be kind of floating in air.

189
00:12:12,020 --> 00:12:13,540
No one's really attached to it.

190
00:12:13,540 --> 00:12:18,500
So really this static plot, I was like, it's not really doing it for me.

191
00:12:18,500 --> 00:12:24,460
And so I asked the question, well, what if I could animate it and actually not only just

192
00:12:24,860 --> 00:12:29,220
animate the players' movements as they were going through this play, but also see historically

193
00:12:29,220 --> 00:12:32,200
where they went as they went through the play.

194
00:12:32,200 --> 00:12:36,220
And this is really where FuncAnimation() comes into play.

195
00:12:36,220 --> 00:12:43,220
And so, but in order to understand how to use FuncAnimation(), I really feel that you

196
00:12:43,460 --> 00:12:48,620
have to understand how animations work in general because they play, they tie directly

197
00:12:48,620 --> 00:12:50,220
together.

198
00:12:50,220 --> 00:12:53,340
So let's consider a flip book.

199
00:12:53,340 --> 00:12:59,580
So a flip book is, you know, traditionally it's usually a set of static drawings that

200
00:12:59,580 --> 00:13:04,220
you flip through really fast to kind of give this illusion of motion.

201
00:13:04,220 --> 00:13:08,820
And so that is exactly, I actually created a digital flip book with my iPad.

202
00:13:08,820 --> 00:13:13,060
And so I drew a bunch of static images of this pink ball.

203
00:13:13,060 --> 00:13:14,340
Okay?

204
00:13:14,340 --> 00:13:17,660
Each one is just a static image, you know, cool beans.

205
00:13:17,660 --> 00:13:19,220
I get this static image.

206
00:13:19,220 --> 00:13:20,220
Awesome.

207
00:13:20,220 --> 00:13:27,220
Now, what's super cool is that when you play these static images one after the other in

208
00:13:27,220 --> 00:13:30,340
sequence, you get an animation.

209
00:13:30,340 --> 00:13:34,900
You take these static images, you string them together, and you get an animation.

210
00:13:34,900 --> 00:13:37,660
And that, folks, is exactly how FuncAnimation() works.

211
00:13:37,660 --> 00:13:41,100
It's basically a fancy digital flip book.

212
00:13:41,100 --> 00:13:46,240
So how FuncAnimation(), how the process works is that FuncAnimation() takes a static graphing

213
00:13:46,240 --> 00:13:50,280
function and it iterates over that function again and again.

214
00:13:50,280 --> 00:13:53,760
So it produces, you know, the static graphing function produces a graph.

215
00:13:53,760 --> 00:13:58,040
So FuncAnimation() iterates over that and it's creating all these static graphs, which it

216
00:13:58,040 --> 00:14:04,520
then kind of puts all together, plays one after another to create an animation.

217
00:14:04,520 --> 00:14:09,320
So if we're going to use FuncAnimation() in our code, we've got to understand how to use

218
00:14:09,320 --> 00:14:10,320
it, right?

219
00:14:10,320 --> 00:14:15,180
So here, I took this from the Matplotlib documentation.

220
00:14:15,180 --> 00:14:19,940
And this is a, just like all the arguments that we would need if we were going to use

221
00:14:19,940 --> 00:14:21,140
FuncAnimation().

222
00:14:21,140 --> 00:14:26,220
And I highlighted the two necessary requirements that you have to include when using FuncAnimation().

223
00:14:26,220 --> 00:14:28,340
So the first one is Fig.

224
00:14:28,340 --> 00:14:34,740
Fig requires a figure, Matplotlib, figure object that it can kind of produce this animation

225
00:14:34,740 --> 00:14:35,740
on.

226
00:14:35,740 --> 00:14:40,820
And then func represents a plotting function that matplot, or that FuncAnimation() can actually

227
00:14:41,820 --> 00:14:47,900
create all those static graphs, which it will then, you know, mesh, kind of weave all together.

228
00:14:47,900 --> 00:14:51,660
Hopefully at this point, you're like, wait a minute, I think we have that.

229
00:14:51,660 --> 00:14:54,340
I think we have these exact two things.

230
00:14:54,340 --> 00:14:56,420
And we do, in fact.

231
00:14:56,420 --> 00:15:00,580
By setting up the static graph like this, we create a figure.

232
00:15:00,580 --> 00:15:02,380
That's the first line of code that we do.

233
00:15:02,380 --> 00:15:03,380
Cool.

234
00:15:03,380 --> 00:15:04,380
We got the first requirement.

235
00:15:04,380 --> 00:15:05,380
Awesome.

236
00:15:05,380 --> 00:15:09,420
And then the third line of code calls the draw play function.

237
00:15:09,580 --> 00:15:14,620
We know that draw play function is, in fact, an iterable function.

238
00:15:14,620 --> 00:15:16,940
And that is because of the frame.

239
00:15:16,940 --> 00:15:21,580
This frame is directly tied to time.

240
00:15:21,580 --> 00:15:28,420
So as we iterate over this frame value, you know, we're going, you know, one, two, three,

241
00:15:28,420 --> 00:15:32,640
through these integer frame values, right, we're actually iterating over time.

242
00:15:32,640 --> 00:15:36,500
We're looking at the first tenth of a second, the second tenth of a second, and continually

243
00:15:36,500 --> 00:15:38,300
on and on and on.

244
00:15:38,300 --> 00:15:42,220
So when we iterate over this frame, we're actually iterating over time.

245
00:15:42,220 --> 00:15:43,860
And that's exactly what we want to plot, right?

246
00:15:43,860 --> 00:15:49,460
We want to plot the player's movements on this field over time.

247
00:15:49,460 --> 00:15:52,420
And so we have the two requirements.

248
00:15:52,420 --> 00:15:57,860
Well, now the next question is, can I just, you know, throw it into the FuncAnimation()

249
00:15:57,860 --> 00:16:00,180
function and we're good?

250
00:16:00,180 --> 00:16:03,860
And the answer is basically yes.

251
00:16:03,900 --> 00:16:09,340
But we need to do just a few quick adjustments to make sure that it works.

252
00:16:09,340 --> 00:16:15,380
So one thing is that if we were to animate our draw play function as it is right now,

253
00:16:15,380 --> 00:16:20,240
where I, you know, plot the figures on the field, create the legend, create the title,

254
00:16:20,240 --> 00:16:22,980
we would get something like this.

255
00:16:22,980 --> 00:16:23,980
Not ideal, right?

256
00:16:23,980 --> 00:16:27,100
This is not exactly what we want.

257
00:16:27,100 --> 00:16:28,980
So like the player's movements, that's good, right?

258
00:16:28,980 --> 00:16:33,540
I want to see how the players are moving over time and I want to keep their historical

259
00:16:33,540 --> 00:16:35,540
movement in view.

260
00:16:35,540 --> 00:16:37,940
But this legend is a problem.

261
00:16:37,940 --> 00:16:43,540
And so that takes me to wanting to talk about these two types of functions that you can

262
00:16:43,540 --> 00:16:50,200
use when you create your iterative function that you're going to insert into FuncAnimation().

263
00:16:50,200 --> 00:16:55,680
And that is plotting functions, plotting function types versus setting function types.

264
00:16:55,680 --> 00:17:01,220
So plotting function types, I highlighted the three functions that I call, the three

265
00:17:01,220 --> 00:17:05,020
types of functions that I call my iterative function, my draw play function.

266
00:17:05,020 --> 00:17:09,940
And this plot function that we're going to look at first, that is truly a plotting function.

267
00:17:09,940 --> 00:17:11,540
It's additive.

268
00:17:11,540 --> 00:17:17,160
As the animation is continuing, it's adding plots to the animation.

269
00:17:17,160 --> 00:17:22,620
So every time draw play is called, this plot function is going to add a new plot to the

270
00:17:22,620 --> 00:17:23,780
animation.

271
00:17:23,780 --> 00:17:24,780
It's additive.

272
00:17:24,780 --> 00:17:27,580
So that's what plotting functions are additive, okay?

273
00:17:27,580 --> 00:17:28,580
Saying that a lot.

274
00:17:28,580 --> 00:17:29,580
My apologies.

275
00:17:30,060 --> 00:17:32,060
You'll just remember it now forever.

276
00:17:32,060 --> 00:17:35,940
So then the next function that we're going to look at is set title.

277
00:17:35,940 --> 00:17:39,580
This function is a setting function.

278
00:17:39,580 --> 00:17:41,360
It's going to replace.

279
00:17:41,360 --> 00:17:44,600
So plotting functions add when you animate.

280
00:17:44,600 --> 00:17:47,780
Setting functions replace when you animate.

281
00:17:47,780 --> 00:17:52,060
And so the title, you know, it's not really causing a problem.

282
00:17:52,060 --> 00:17:56,140
Probably, you know, every time draw play is called, it's setting the title.

283
00:17:56,140 --> 00:17:58,700
So maybe for efficiency's sake, we might want to move it out.

284
00:17:58,700 --> 00:18:02,140
But I'm just going to leave it there for now because it's not causing tons of issues.

285
00:18:02,140 --> 00:18:05,460
But the legend, the last function, this is a problem, right?

286
00:18:05,460 --> 00:18:08,580
This is actually acting as a plotting function, right?

287
00:18:08,580 --> 00:18:13,460
Because it's adding a legend every single time the draw play function is called.

288
00:18:13,460 --> 00:18:15,300
So this is a problem.

289
00:18:15,300 --> 00:18:16,420
Easiest way?

290
00:18:16,420 --> 00:18:17,420
We remove it.

291
00:18:17,420 --> 00:18:21,280
And we move it to the generate field function, which we only call once.

292
00:18:21,280 --> 00:18:22,820
So that just makes it easy.

293
00:18:22,820 --> 00:18:26,700
It's an easy way, quick fix, to remove that plotting function.

294
00:18:27,380 --> 00:18:28,980
That is doing what we don't want it to do.

295
00:18:28,980 --> 00:18:35,460
So then the next caveat you want to make sure is that whenever you create your iterative

296
00:18:35,460 --> 00:18:42,540
function, the value that you iterate over or the argument that you iterate over has

297
00:18:42,540 --> 00:18:46,580
to be the first argument specified in the definition.

298
00:18:46,580 --> 00:18:48,220
So for draw play, right, it doesn't matter.

299
00:18:48,220 --> 00:18:50,020
We have only one argument value.

300
00:18:50,020 --> 00:18:53,940
But say that I had two other arguments in my iterative function.

301
00:18:54,100 --> 00:18:58,580
I need to make sure to call frame first and then all the other arguments after.

302
00:18:58,580 --> 00:19:02,340
So that's just something that FuncAnimation() really looks for.

303
00:19:02,340 --> 00:19:05,700
It will not work if you don't put that iterative argument first.

304
00:19:05,700 --> 00:19:06,740
Okay.

305
00:19:06,740 --> 00:19:09,260
So now we can actually create our animation.

306
00:19:09,260 --> 00:19:13,860
We can transform that static graph into an animation.

307
00:19:13,860 --> 00:19:18,620
So here is static graph, Python code.

308
00:19:18,620 --> 00:19:22,340
And we have FuncAnimation() at the top, a definition just for reference.

309
00:19:22,340 --> 00:19:26,180
So first off, we need to actually insert FuncAnimation() into our code.

310
00:19:26,180 --> 00:19:27,180
Cool beans.

311
00:19:27,180 --> 00:19:28,180
We put it in.

312
00:19:28,180 --> 00:19:34,780
The thing is that FuncAnimation(), it needs to store the animation into a variable.

313
00:19:34,780 --> 00:19:40,260
And so in this case, I called my variable anim, represents animation.

314
00:19:40,260 --> 00:19:42,380
And then it's just one of the requirements with FuncAnimation().

315
00:19:42,380 --> 00:19:44,720
It has to have somewhere to store the animation.

316
00:19:44,720 --> 00:19:47,580
So you create that variable.

317
00:19:47,580 --> 00:19:52,180
Next you have the two required arguments.

318
00:19:52,180 --> 00:19:53,620
So first we have fig.

319
00:19:53,620 --> 00:19:55,240
We throw our fig in there.

320
00:19:55,240 --> 00:19:58,460
And then draw play, which is the iterative function.

321
00:19:58,460 --> 00:20:00,500
That's the next required argument.

322
00:20:00,500 --> 00:20:01,580
And we just call the name.

323
00:20:01,580 --> 00:20:02,900
You don't add any of the arguments.

324
00:20:02,900 --> 00:20:06,580
You just call the name of the function and you throw it in there.

325
00:20:06,580 --> 00:20:12,260
And then lastly, I wanted to also, sorry, the mic was there.

326
00:20:12,260 --> 00:20:18,580
I also wanted to specify the frames that FuncAnimation() is going to iterate over.

327
00:20:18,580 --> 00:20:24,860
By default, FuncAnimation() will iterate starting at an integer value of zero.

328
00:20:24,860 --> 00:20:28,020
And it's going to iterate over integer values.

329
00:20:28,020 --> 00:20:32,860
So it goes zero, one, two, on, so on and so forth.

330
00:20:32,860 --> 00:20:35,460
In our case, we like the integer value.

331
00:20:35,460 --> 00:20:38,940
We want to iterate over an integer value.

332
00:20:38,940 --> 00:20:42,820
But we want it to start at one and iterate over the integer values.

333
00:20:42,820 --> 00:20:47,540
So we can actually specify the exact range of values we want from animation to iterate

334
00:20:47,540 --> 00:20:48,540
on.

335
00:20:48,540 --> 00:20:55,580
And in this case, I want values starting at one, increasing by one.

336
00:20:55,580 --> 00:21:03,580
And then this 113 is just the max value for the frame for this specific play.

337
00:21:03,580 --> 00:21:07,060
So I just put bounds around all the frame values.

338
00:21:07,060 --> 00:21:09,460
So that's where I get that one from because we're starting at one.

339
00:21:09,460 --> 00:21:12,580
And it goes all the way to 113.

340
00:21:12,580 --> 00:21:20,780
And then, friends, well, now we can actually comment out the draw play frame function that

341
00:21:20,780 --> 00:21:23,940
we call up there and the plot show there for the static graph.

342
00:21:23,940 --> 00:21:25,780
We can comment that out.

343
00:21:25,780 --> 00:21:29,860
And now put plot show underneath our animation.

344
00:21:29,860 --> 00:21:38,980
And oh, it doesn't get, okay, that's okay because I have another graph here.

345
00:21:38,980 --> 00:21:39,980
That's okay.

346
00:21:40,380 --> 00:21:44,100
I have a GIF of it, so not a problem.

347
00:21:44,100 --> 00:21:45,100
Technical issues, folks.

348
00:21:45,100 --> 00:21:46,100
Gotta love it.

349
00:21:46,100 --> 00:21:47,100
Okay.

350
00:21:47,100 --> 00:21:53,980
And I think I can go to the next slide.

351
00:21:53,980 --> 00:21:56,980
You can just, yeah.

352
00:21:56,980 --> 00:21:59,500
Okay.

353
00:21:59,500 --> 00:22:05,540
This is an added animation that I was hopefully going to show after the first animation.

354
00:22:05,540 --> 00:22:08,900
But what's cool is that I took this static plot.

355
00:22:08,900 --> 00:22:10,300
And so you can ignore the jersey numbers.

356
00:22:10,300 --> 00:22:12,460
Those are jersey numbers that I added.

357
00:22:12,460 --> 00:22:15,580
And this is far more interesting.

358
00:22:15,580 --> 00:22:19,860
Now we can actually see how this play, you know, we're not getting a snapshot of just

359
00:22:19,860 --> 00:22:22,020
seeing the ball floating in space.

360
00:22:22,020 --> 00:22:25,380
Now we actually see the pass being thrown.

361
00:22:25,380 --> 00:22:29,020
This person is just about to score a touchdown and actually does.

362
00:22:29,020 --> 00:22:32,500
This is super fun and way more engaging.

363
00:22:32,540 --> 00:22:37,660
And what's cool is that once you have an animation like this, you can add to it like I did here.

364
00:22:37,660 --> 00:22:41,820
So in this case, I used a setting function, a setting type function, to add the jersey

365
00:22:41,820 --> 00:22:49,740
numbers for each individual so that we know who's getting past what or who's tackling

366
00:22:49,740 --> 00:22:51,020
whoever.

367
00:22:51,020 --> 00:22:53,060
And I also added some statistics tables.

368
00:22:53,060 --> 00:22:56,620
And you could even add statistics to the individuals if you want on the graph.

369
00:22:56,620 --> 00:22:59,120
The possibilities are endless.

370
00:22:59,120 --> 00:23:00,940
So how can you use animation?

371
00:23:00,940 --> 00:23:08,300
Well, as long as you have a figure, you have a matplotlib figure, and an iterable plotting

372
00:23:08,300 --> 00:23:11,740
function, then you can animate it.

373
00:23:11,740 --> 00:23:13,140
That's really all you need.

374
00:23:13,140 --> 00:23:18,980
And especially if you have kind of set yourself up with avoiding kind of the full plotting,

375
00:23:18,980 --> 00:23:24,700
setting type functions, and also making sure that iterable frame value is the first, like

376
00:23:24,700 --> 00:23:26,500
you can animate it.

377
00:23:26,500 --> 00:23:32,900
And I hope that you feel encouraged to actually try this out in your static plots at home.

378
00:23:32,900 --> 00:23:35,300
And so, folks, that's it.

379
00:23:35,300 --> 00:23:36,980
That's pretty much it.

380
00:23:36,980 --> 00:23:37,980
Here are some resources.

381
00:23:37,980 --> 00:23:41,380
So this first link is a link to my GitHub project.

382
00:23:41,380 --> 00:23:46,100
I include all of the slides and also the Python script that I ran through here.

383
00:23:46,100 --> 00:23:50,460
It's the full script, so you get all the code that I didn't put here.

384
00:23:50,460 --> 00:23:56,100
The second is the Kaggle competition link for the 2021 Kaggle competitions.

385
00:23:56,100 --> 00:23:57,980
You can download the data yourself.

386
00:23:57,980 --> 00:24:00,660
All you need is a Kaggle account.

387
00:24:00,660 --> 00:24:06,620
And then the third and fourth links are actually the first one is a tutorial that my team made

388
00:24:06,620 --> 00:24:11,420
to help you basically walk you through ingesting the data from Kaggle, putting it into a time

389
00:24:11,420 --> 00:24:20,860
scale BB database, which is basically Postgres, and then actually analyzing it.

390
00:24:20,860 --> 00:24:25,860
And then the last is just a blog post kind of diving into other analytics that you could

391
00:24:25,860 --> 00:24:26,860
try out.

392
00:24:26,860 --> 00:24:29,220
So that is it.

393
00:24:29,220 --> 00:24:31,220
Happy coding, friends.

394
00:24:31,220 --> 00:24:35,500
Thank you so much for being so patient with all of these technical issues.

395
00:24:35,500 --> 00:24:38,460
And I hope that you have a wonderful rest of your day.

396
00:24:38,460 --> 00:24:44,140
Yes, thank you.

397
00:24:44,140 --> 00:24:47,580
If anyone wants stickers from time scale, come see me.

398
00:24:47,580 --> 00:24:49,540
Or if you have questions, also come see me.

399
00:24:49,540 --> 00:24:50,540
So thank you.

