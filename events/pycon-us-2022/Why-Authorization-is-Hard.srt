1
00:00:00,000 --> 00:00:09,440
Well, our next talk is about to start.

2
00:00:09,440 --> 00:00:15,960
Sam Scott, the co-founder and CTO of Oso, will talk about why authorization is hard.

3
00:00:15,960 --> 00:00:18,560
Thank you, Sam.

4
00:00:18,560 --> 00:00:19,560
Cool.

5
00:00:19,560 --> 00:00:23,560
Well, thanks very much, everyone.

6
00:00:23,560 --> 00:00:29,680
So to start with, I actually have an announcement, which is I will not be giving that talk.

7
00:00:29,680 --> 00:00:30,680
Sorry about that.

8
00:00:30,680 --> 00:00:35,440
When I sat down to write this, I decided it felt a little bit too negative.

9
00:00:35,440 --> 00:00:36,440
Everyone's just had a big lunch.

10
00:00:36,440 --> 00:00:40,320
You don't want to come in here and hear me whine about authorization for half an hour.

11
00:00:40,320 --> 00:00:43,680
So instead, I will be talking about why authorization is fun.

12
00:00:43,680 --> 00:00:47,080
Yeah, there you go.

13
00:00:47,080 --> 00:00:50,880
So this talk is for, I'd say, largely two types of people.

14
00:00:50,880 --> 00:00:54,280
This is your chance to run away if you're not one of those two.

15
00:00:54,280 --> 00:00:58,180
Either you have never heard about authorization before, and I'm basically going to give you

16
00:00:58,180 --> 00:01:02,820
a crash course in all the different ins and outs and what makes it fun.

17
00:01:02,820 --> 00:01:06,740
Or you've experienced authorization before, you have felt the pain, and you are incredibly

18
00:01:06,740 --> 00:01:08,700
skeptical about how it could possibly be fun.

19
00:01:08,700 --> 00:01:12,540
Okay, who am I to talk about this topic?

20
00:01:12,540 --> 00:01:17,100
Well, first of all, I did a PhD in cryptography, so I definitely know what fun is.

21
00:01:17,100 --> 00:01:21,500
But since then, I've been spending my time trying to make security less terrible for

22
00:01:21,500 --> 00:01:22,500
developers.

23
00:01:22,500 --> 00:01:26,180
And in the course of that, I've met with hundreds of companies speaking about how they're trying

24
00:01:26,180 --> 00:01:30,500
to do authorization and what's been fun about it.

25
00:01:30,500 --> 00:01:32,060
So just put some terms out there.

26
00:01:32,060 --> 00:01:35,580
So I'm talking about authorization, not authentication.

27
00:01:35,580 --> 00:01:41,500
So authentication is about identity, who is the user, username, password, multifactor

28
00:01:41,500 --> 00:01:43,500
auth, single sign on that kind of thing.

29
00:01:43,500 --> 00:01:44,780
I'm not talking about that.

30
00:01:44,780 --> 00:01:46,300
I'm not talking about OAuth.

31
00:01:46,300 --> 00:01:51,420
I'm not talking about access to infrastructure, like getting access to your S3 buckets.

32
00:01:51,420 --> 00:01:54,460
I'm talking about authorization inside an application.

33
00:01:54,460 --> 00:01:58,940
So once a user is logged in, what can they do inside that app?

34
00:01:58,940 --> 00:02:02,540
For some examples, I assume most people here are familiar with GitHub.

35
00:02:02,540 --> 00:02:05,500
I think GitHub is a pretty unobtrusive authorization model.

36
00:02:05,500 --> 00:02:09,020
Honestly, most of the time, I don't even think about it when I'm inside GitHub.

37
00:02:09,020 --> 00:02:13,460
I can just kind of go about my business and contribute to repositories.

38
00:02:13,460 --> 00:02:19,660
On the other hand, AWS has a product called IAM, super powerful, flexible, complex, can

39
00:02:19,660 --> 00:02:21,660
let you do really anything you want.

40
00:02:22,140 --> 00:02:25,340
Probably most people who have interacted with it wish they spent less time with it.

41
00:02:25,340 --> 00:02:28,180
There's a trade-off there.

42
00:02:28,180 --> 00:02:31,060
I think somewhere in the middle is products like Notion.

43
00:02:31,060 --> 00:02:36,460
They can give you a large degree of granularity, like on a per-page basis, I can specify people

44
00:02:36,460 --> 00:02:40,780
or groups of people who can read or edit that page.

45
00:02:40,780 --> 00:02:44,420
And they actually have some really nice UIs to help inform you of exactly what you can

46
00:02:44,420 --> 00:02:46,420
do.

47
00:02:46,420 --> 00:02:49,680
You can see this document, you belong to this group, so on.

48
00:02:49,680 --> 00:02:54,600
On the flip side of that, though, so Notion has historically had some performance problems,

49
00:02:54,600 --> 00:02:58,280
victim of their own success, and allegedly a lot of that is because of the complexity

50
00:02:58,280 --> 00:02:59,960
of their commission system.

51
00:02:59,960 --> 00:03:01,200
So there's really no free lunch here.

52
00:03:01,200 --> 00:03:05,880
It's like you can do a lot of work and then you're going to have a big engineering effort.

53
00:03:05,880 --> 00:03:08,360
So what is it about authorization that makes it important?

54
00:03:08,360 --> 00:03:12,360
Well, from the examples you just saw, it's a core part of the product.

55
00:03:12,360 --> 00:03:13,560
People need to get access to things.

56
00:03:13,560 --> 00:03:17,080
If you had a product without authorization, it would be an entire anarchy.

57
00:03:17,080 --> 00:03:18,880
Someone could just see and do absolutely everything.

58
00:03:18,880 --> 00:03:21,280
So it's a core part of the product.

59
00:03:21,280 --> 00:03:24,880
But equally, if it fails, your entire app probably goes down.

60
00:03:24,880 --> 00:03:28,280
If your authorization breaks, no one could do anything in your app.

61
00:03:28,280 --> 00:03:34,320
Or again, I don't like to harp on the security piece, but if you get authorization wrong,

62
00:03:34,320 --> 00:03:38,620
people might get access to data they're not supposed to, data breaches, things like that.

63
00:03:38,620 --> 00:03:40,840
So the stakes are pretty high for authorization.

64
00:03:40,840 --> 00:03:45,320
I think because of this, it's why people can often be a little bit scared to touch it.

65
00:03:45,320 --> 00:03:49,520
It can be kind of a piece of the code base that people will stay away from.

66
00:03:49,520 --> 00:03:52,920
And that's not fun.

67
00:03:52,920 --> 00:03:58,280
So in this talk, I'll be talking about three distinct areas of authorization, the modeling,

68
00:03:58,280 --> 00:04:00,240
the enforcement, and the architecture.

69
00:04:00,240 --> 00:04:04,320
And these all are kind of intertwined and relate to each other.

70
00:04:04,320 --> 00:04:10,560
So modeling, this is about basically figuring out what you want your application to do and

71
00:04:10,560 --> 00:04:13,240
then going and implementing it.

72
00:04:13,240 --> 00:04:20,400
So this is things like, do you want your app to have sharing or roles or administrators?

73
00:04:20,400 --> 00:04:21,640
Or what does that look like?

74
00:04:21,640 --> 00:04:24,200
And then how do you go and build it?

75
00:04:24,200 --> 00:04:28,560
As I mentioned at the beginning, I've spoken to a good hundreds of companies at this point.

76
00:04:28,560 --> 00:04:33,200
And typically, when I ask them, what kinds of things does the app do, about half of them

77
00:04:33,200 --> 00:04:39,120
will say, oh, we have something super bespoke custom that you probably haven't heard before.

78
00:04:39,440 --> 00:04:44,360
I'll kind of smile and nod knowingly as they list something that's on my list of different

79
00:04:44,360 --> 00:04:45,360
authorization patterns.

80
00:04:45,360 --> 00:04:47,840
And I'll go along and tick them off.

81
00:04:47,840 --> 00:04:50,060
But every now and then, I do hear something new.

82
00:04:50,060 --> 00:04:51,720
And so that list kind of keeps growing.

83
00:04:51,720 --> 00:04:56,960
It's now at 22 different authorization models that we've seen out there that different companies

84
00:04:56,960 --> 00:04:57,960
have.

85
00:04:57,960 --> 00:05:03,200
And so most companies will have some combination of these 22 different models.

86
00:05:03,200 --> 00:05:05,320
So the question is, what do we do?

87
00:05:05,320 --> 00:05:08,400
How do we implement this?

88
00:05:08,440 --> 00:05:11,440
A lot of authorization comes down to this core interface.

89
00:05:11,440 --> 00:05:16,120
It has three inputs, a user, an action, and a resource.

90
00:05:16,120 --> 00:05:19,920
And the thing we're trying to do is basically answer the question, can the user perform

91
00:05:19,920 --> 00:05:22,800
this action on this resource?

92
00:05:22,800 --> 00:05:27,120
And the thing you get back is normally a yes no.

93
00:05:27,120 --> 00:05:32,840
So as an example of a really simple authorization model, we might say that admins can do anything.

94
00:05:32,840 --> 00:05:35,840
This answer is always true when they're an admin.

95
00:05:35,880 --> 00:05:38,800
There's two core pieces of this model that I want to call out.

96
00:05:38,800 --> 00:05:39,800
One is the logic.

97
00:05:39,800 --> 00:05:43,600
It's kind of the abstract piece of this that says admins can do anything.

98
00:05:43,600 --> 00:05:45,960
And the second is the data that drives that.

99
00:05:45,960 --> 00:05:49,680
In this case, I'm just representing it as like an attribute pulled off of my Python

100
00:05:49,680 --> 00:05:50,680
class.

101
00:05:50,680 --> 00:05:53,640
So this is admin field.

102
00:05:53,640 --> 00:05:56,120
But equally, that data could come from the database.

103
00:05:56,120 --> 00:05:57,400
So in this case, the logic is the same.

104
00:05:57,400 --> 00:06:01,440
I'm still saying admins can do anything, but the data is coming from a database, maybe

105
00:06:01,440 --> 00:06:04,280
an admin's table or something like that.

106
00:06:04,280 --> 00:06:07,560
So those are two core pieces I'll come back to a lot.

107
00:06:07,560 --> 00:06:08,840
So this is a very simple model, right?

108
00:06:08,840 --> 00:06:10,320
It just says admins can do everything.

109
00:06:10,320 --> 00:06:12,240
We don't speak about non-admins.

110
00:06:12,240 --> 00:06:15,120
And typically in products, people want more granularity than this.

111
00:06:15,120 --> 00:06:18,080
I wouldn't be able to invite members to the organization maybe, but they can't change

112
00:06:18,080 --> 00:06:19,080
the billing info.

113
00:06:19,080 --> 00:06:22,200
You can read, but not write, and so on.

114
00:06:22,200 --> 00:06:26,560
And so in a product like GitHub, you have this concept of role-based access control.

115
00:06:26,560 --> 00:06:29,520
It's a very, very common thing that people reach for.

116
00:06:29,520 --> 00:06:33,840
The general idea is that you sort of group the kinds of things people can do by this

117
00:06:33,880 --> 00:06:34,880
thing called a role.

118
00:06:34,880 --> 00:06:39,640
And it kind of describes who you are or what you can do inside the app.

119
00:06:39,640 --> 00:06:44,360
So in GitHub, you can have one of five roles on a repository.

120
00:06:44,360 --> 00:06:48,960
These range from things like reads, which means you can read the repository, to triage,

121
00:06:48,960 --> 00:06:53,120
which means you can go and close issues all the way down to an admin that can basically

122
00:06:53,120 --> 00:06:55,200
do anything.

123
00:06:55,200 --> 00:06:59,940
So in Python, you might represent this role-based access control model by sort of mapping this

124
00:06:59,940 --> 00:07:02,800
to maybe like a dictionary or something.

125
00:07:02,800 --> 00:07:07,360
So here, we're saying for each role, we're basically creating a dictionary, or this is

126
00:07:07,360 --> 00:07:11,160
kind of like a matrix, from that role name to the kinds of things they can do.

127
00:07:11,160 --> 00:07:17,320
So read can read repository, clone repository, things like that.

128
00:07:17,320 --> 00:07:21,520
So given that we have that dictionary back in our logic, we can write our simple role-based

129
00:07:21,520 --> 00:07:23,840
access control model like this.

130
00:07:23,840 --> 00:07:28,000
So basically, the check becomes a user can do an action on a resource if they have a

131
00:07:29,000 --> 00:07:33,600
role has that permission on that kind of resource.

132
00:07:33,600 --> 00:07:35,600
And this is a really common thing that people reach for.

133
00:07:35,600 --> 00:07:39,920
This is a really good starting point to add a certain amount of granularity to your app.

134
00:07:39,920 --> 00:07:41,540
But it's still not enough.

135
00:07:41,540 --> 00:07:45,800
It's not enough because in, think about something like GitHub.

136
00:07:45,800 --> 00:07:48,080
You don't just have one repository role.

137
00:07:48,080 --> 00:07:51,360
You have it on a per repository basis.

138
00:07:51,360 --> 00:07:55,360
And so in reality, most applications look more like this.

139
00:07:55,360 --> 00:07:57,520
Most models rather look more like this.

140
00:07:57,520 --> 00:08:01,160
You have multiple tiers of resources that are related to each other.

141
00:08:01,160 --> 00:08:03,200
Users can have roles for the organization.

142
00:08:03,200 --> 00:08:04,560
They can have a role in the repository.

143
00:08:04,560 --> 00:08:07,760
They create issues and things like that.

144
00:08:07,760 --> 00:08:13,160
And so the logic and the data that backs this is similarly a lot more complex.

145
00:08:13,160 --> 00:08:18,440
So what I have here is a sort of kind of pseudo code, but pretty realistic example of that

146
00:08:18,440 --> 00:08:20,640
more complex authorization model.

147
00:08:20,640 --> 00:08:25,640
Now this is just for saying whether a user can do something on an issue inside GitHub.

148
00:08:25,640 --> 00:08:28,480
And we're doing things like checking the org roles, the repository roles, we're checking

149
00:08:28,480 --> 00:08:31,720
if they're an admin, we're checking if they created the issue.

150
00:08:31,720 --> 00:08:36,920
And this is not a, you know, this is not like an odd use case by any chance, by any stretch

151
00:08:36,920 --> 00:08:37,920
of the imagination.

152
00:08:37,920 --> 00:08:42,360
This is very common both in terms of the complexity of the model and also the implementation,

153
00:08:42,360 --> 00:08:43,360
honestly.

154
00:08:43,360 --> 00:08:46,920
Like you'll probably see equivalent code to this in many code bases.

155
00:08:46,920 --> 00:08:50,960
And so this is what tends to happen is that as your authorization model grows, so the

156
00:08:50,960 --> 00:08:51,960
code grows.

157
00:08:52,080 --> 00:08:57,800
And it kind of becomes this big ball of mud kind of sticking together different conditions.

158
00:08:57,800 --> 00:09:02,080
And like it's really sort of flaky, it's hard to maintain, people don't want to touch it.

159
00:09:02,080 --> 00:09:04,800
Because remember, again, authorization, it's like it's on the critical path.

160
00:09:04,800 --> 00:09:05,800
It needs to be fast.

161
00:09:05,800 --> 00:09:09,220
You've got, you know, performance hacks like thrown in there.

162
00:09:09,220 --> 00:09:11,720
And that's that that stuff is not fun.

163
00:09:11,720 --> 00:09:12,720
And I promise you fun.

164
00:09:12,720 --> 00:09:15,800
So how do we make this fun?

165
00:09:15,800 --> 00:09:20,920
So I think the solution is basically to turn to purpose built languages for authorization.

166
00:09:20,920 --> 00:09:25,280
There's quite a lot of good examples out there because authorization maps really nicely to

167
00:09:25,280 --> 00:09:28,480
like either declarative languages or logic based languages.

168
00:09:28,480 --> 00:09:32,720
It's just a paradigm that's really well suited for the problem space.

169
00:09:32,720 --> 00:09:34,200
So why is this fun?

170
00:09:34,200 --> 00:09:39,320
Well, first of all, building a language is a lot of fun.

171
00:09:39,320 --> 00:09:42,600
Spoilers, we built a language for authorization.

172
00:09:42,600 --> 00:09:44,240
That part is a lot of fun.

173
00:09:44,240 --> 00:09:48,160
But you'll probably struggle to make the case to your boss that you should go and implement

174
00:09:48,160 --> 00:09:49,960
a language for your authorization problems.

175
00:09:50,360 --> 00:09:51,160
It's not unheard of.

176
00:09:51,160 --> 00:09:53,560
And if you want to, I will help you make that pitch.

177
00:09:53,560 --> 00:09:57,520
But I think the thing that's really fun is once you have something like an expressive

178
00:09:57,520 --> 00:10:02,800
language for authorization, it kind of helps you get this get authorization, like the

179
00:10:02,800 --> 00:10:04,880
implementation details out of the way.

180
00:10:04,880 --> 00:10:08,640
Right. So instead of focusing on like the how do you want to make it all work, you get to

181
00:10:08,640 --> 00:10:11,320
focus on the sort of what do you want your product to do.

182
00:10:11,320 --> 00:10:14,000
And that is honestly that's the piece that I find really fun.

183
00:10:14,000 --> 00:10:16,680
Right. Going back to those 22 models, like which ones do I want?

184
00:10:16,680 --> 00:10:17,680
How do I get them working?

185
00:10:17,680 --> 00:10:19,000
What do I want the users to be able to do?

186
00:10:21,480 --> 00:10:23,440
So takeaways from modeling.

187
00:10:24,160 --> 00:10:26,280
Remember, it's all about logic and data.

188
00:10:27,240 --> 00:10:28,480
We're answering that question.

189
00:10:28,680 --> 00:10:30,800
Can the user perform an action on a resource?

190
00:10:31,440 --> 00:10:34,720
And it very commonly starts out simple, but over time gets more and more complex.

191
00:10:35,120 --> 00:10:36,480
And that's just something to be aware of.

192
00:10:36,760 --> 00:10:39,400
And so it's often a time where something like a language can be a good approach.

193
00:10:42,880 --> 00:10:44,640
OK, so next I want to talk about enforcement.

194
00:10:45,600 --> 00:10:49,920
So enforcement is all about taking that model that we just built and working out how to

195
00:10:49,920 --> 00:10:51,680
enforce it or carry it out.

196
00:10:52,880 --> 00:10:57,320
So in many ways, it's sort of the flip side of the authorized method I just showed you.

197
00:10:58,040 --> 00:11:01,040
Right. So this is a pretty common example, a typical example.

198
00:11:01,440 --> 00:11:05,880
Imagine we have a flask route that takes in a document ID and returns the document to

199
00:11:05,880 --> 00:11:09,680
the user. We want to make sure that the user can only read documents they're allowed to.

200
00:11:10,000 --> 00:11:13,160
So we add our enforcement that checks, OK, can the user do this thing?

201
00:11:13,480 --> 00:11:16,360
And if not, we return an exception or an error.

202
00:11:17,720 --> 00:11:20,720
And this is your bread and butter typical enforcement.

203
00:11:21,360 --> 00:11:23,000
But it's not sufficient. It's not enough.

204
00:11:23,720 --> 00:11:28,000
And the reason is because if you just do this, then typically what will happen is your user

205
00:11:28,000 --> 00:11:30,720
will stumble across some page and they get some big, horrible error.

206
00:11:31,120 --> 00:11:32,600
And that is not fun for anybody.

207
00:11:33,840 --> 00:11:38,560
And I'm claiming that this is our responsibility as developers to avoid people from

208
00:11:38,560 --> 00:11:40,440
hitting big, horrible error messages.

209
00:11:41,440 --> 00:11:46,320
And so the way we do that is we want to basically inform our users early on what they can

210
00:11:46,320 --> 00:11:47,320
and can't do inside the app.

211
00:11:48,440 --> 00:11:51,000
You can you can sort of think of this like Minority Report.

212
00:11:51,040 --> 00:11:54,680
If you've seen the film, it's like a pre-crime decision where they can sort of anticipate

213
00:11:54,680 --> 00:11:55,960
that someone is going to do something wrong.

214
00:11:55,960 --> 00:11:59,600
So they get there early and then they I'm pretty sure they just educate them and send

215
00:11:59,600 --> 00:12:00,400
them on their way. Right.

216
00:12:02,800 --> 00:12:03,800
That's what we're trying to do here.

217
00:12:05,240 --> 00:12:06,960
So an example of this in the wild.

218
00:12:07,320 --> 00:12:09,320
I have a little game here. It's going to be a spot the difference.

219
00:12:10,280 --> 00:12:11,880
I have the same page in GitHub.

220
00:12:11,920 --> 00:12:14,520
It's the organization at the top.

221
00:12:14,560 --> 00:12:16,280
I'm logged out and at the bottom I'm logged in.

222
00:12:18,080 --> 00:12:19,160
There's a bunch of differences.

223
00:12:19,280 --> 00:12:23,480
The one I want to call out in particular is this count of how many repositories also

224
00:12:23,480 --> 00:12:24,480
supposedly has.

225
00:12:25,320 --> 00:12:27,280
So at the top, if you can't read that, it's pretty small.

226
00:12:27,560 --> 00:12:31,080
At the top, it's saying there are 35 repositories and at the bottom there are 70.

227
00:12:32,440 --> 00:12:37,280
And basically what's happening here is GitHub is filtering out and hiding from me the

228
00:12:37,280 --> 00:12:39,920
repositories that I don't have access to when I'm logged out.

229
00:12:40,320 --> 00:12:43,280
So these are private repositories inside the organization.

230
00:12:44,000 --> 00:12:48,440
GitHub doesn't let me try and open this page and then give me a big error that says you

231
00:12:48,440 --> 00:12:50,840
don't have access. They just hide it from me entirely.

232
00:12:51,280 --> 00:12:54,800
So I'm unlikely to I'm unlikely to stumble into an error page saying I don't have access

233
00:12:54,840 --> 00:12:57,120
because I can't even try to get there in the first place.

234
00:12:59,360 --> 00:13:04,400
So the way we might try to achieve this, let's say in a Django app, is by taking that

235
00:13:04,400 --> 00:13:08,440
authorization model from before, taking our logic and trying to push it down into the

236
00:13:08,440 --> 00:13:14,480
database. The core idea here is by taking your logic and turning them into something

237
00:13:14,480 --> 00:13:18,360
like a query filter, right, so that when we fetching, you know, when we make a query to

238
00:13:18,360 --> 00:13:23,280
the database, let's say using Django's RM, it already has those conditions applied.

239
00:13:24,320 --> 00:13:29,320
So what I'm showing here is a specific Django technique that kind of lets you expose an

240
00:13:29,320 --> 00:13:33,160
object manager that has already had that authorization applied.

241
00:13:33,680 --> 00:13:36,840
And now anywhere in my app that I try and reference an object, you know, I go and get a

242
00:13:36,840 --> 00:13:39,520
specific document, I get a list of documents.

243
00:13:39,840 --> 00:13:42,200
It's always going to have that authorization logic applied.

244
00:13:42,640 --> 00:13:47,960
And so my app kind of almost behaves like if you don't have access to it, it doesn't exist.

245
00:13:49,640 --> 00:13:52,360
There are there's actually there's other ways you can achieve this as well.

246
00:13:52,800 --> 00:13:58,440
So some databases like Postgres have a concept called row level security where you can

247
00:13:58,440 --> 00:14:03,040
achieve the same thing but directly writing SQL filters in in the database.

248
00:14:04,160 --> 00:14:08,640
OK, so you do this and then you get this, you know, the if you don't have access, you

249
00:14:08,640 --> 00:14:11,440
don't see it applies. But that's not the end, right?

250
00:14:11,440 --> 00:14:13,000
It's not just about read or not read.

251
00:14:13,600 --> 00:14:15,920
So I have another game, another spot the difference.

252
00:14:16,160 --> 00:14:17,480
This one's going to be a bit harder.

253
00:14:19,920 --> 00:14:24,120
The difference here is that at the top you can see this close issue button, but not at

254
00:14:24,120 --> 00:14:28,920
the bottom. And this is because I'm looking at an issue inside an Oso repository versus

255
00:14:28,920 --> 00:14:30,280
in a Python repository.

256
00:14:30,800 --> 00:14:34,960
So, again, GitHub's not going to let me attempt to close the issue and then tell me you

257
00:14:34,960 --> 00:14:36,720
don't have access. So you're not allowed to do that.

258
00:14:37,000 --> 00:14:38,520
They'll just hide it from me entirely.

259
00:14:39,800 --> 00:14:41,200
And I can try and bypass this, right?

260
00:14:41,200 --> 00:14:44,520
This is this is purely a cosmetic thing on the front end.

261
00:14:44,520 --> 00:14:48,520
I could still go make the raw API request and GitHub will still enforce it.

262
00:14:49,360 --> 00:14:53,400
But what they're doing here is providing a really nice user experience that, again, is

263
00:14:53,400 --> 00:14:55,680
kind of informing me what I can do just by the UI.

264
00:14:55,920 --> 00:15:00,440
And you can you can get some sort of maybe breadcrumbs of how they might implement this

265
00:15:00,680 --> 00:15:02,800
by interacting with their APIs directly.

266
00:15:04,440 --> 00:15:09,960
So you can call the GitHub API for a specific repository and there will be a field on the

267
00:15:09,960 --> 00:15:11,600
data you get back called permissions.

268
00:15:12,200 --> 00:15:16,440
It kind of contains these five different permissions, which honestly, a bit blurry with

269
00:15:16,440 --> 00:15:18,720
roles and permissions here, but that's fine.

270
00:15:19,760 --> 00:15:22,480
And so basically, you can see the difference here.

271
00:15:22,840 --> 00:15:27,560
When I query this API for an Oso repository, I have the triage true permission.

272
00:15:28,280 --> 00:15:31,960
On the other hand, if I do this for the Python, I'm not a contributor to Python, so I get

273
00:15:31,960 --> 00:15:34,000
false back from that permission.

274
00:15:35,360 --> 00:15:40,080
And so with this small amount of data, you can see it'd be pretty easy as a UI developer

275
00:15:40,080 --> 00:15:44,120
to just implement the logic that says, you know, if you don't have the triage permission,

276
00:15:44,400 --> 00:15:46,520
hide the hide the close issue button.

277
00:15:46,520 --> 00:15:48,480
So in a nutshell, that's that's enforcement.

278
00:15:48,480 --> 00:15:48,680
Right.

279
00:15:48,680 --> 00:15:53,200
It's about taking that authorization model that we had previously, the logic, the data,

280
00:15:53,200 --> 00:15:57,040
all of that, and then figuring out how to apply it across these like three different

281
00:15:57,040 --> 00:15:57,640
parts of your app.

282
00:15:57,640 --> 00:16:02,560
It's like on both enforcement on a specific thing that is pushing it down into the database.

283
00:16:02,560 --> 00:16:03,800
You can filter objects.

284
00:16:04,040 --> 00:16:06,880
And then there's also like pushing it all the way to the front end so you can provide

285
00:16:06,880 --> 00:16:09,920
these like rich UIs that lets your users have a really fun experience.

286
00:16:11,000 --> 00:16:12,400
So that's the end of the demo.

287
00:16:12,440 --> 00:16:15,480
So I think until this point, many people just don't really know how to use the API.

288
00:16:15,480 --> 00:16:20,000
It's like, ah, this is why every company re-implement authorization from scratch again

289
00:16:20,000 --> 00:16:20,520
and again.

290
00:16:20,520 --> 00:16:23,840
Clearly they're having such fun with this problem that they don't want to, like, let

291
00:16:23,840 --> 00:16:27,600
someone else do this on a more serious note.

292
00:16:27,600 --> 00:16:31,960
You know, there is you know, because of the kind of two dimensions of modeling and enforcement,

293
00:16:32,160 --> 00:16:35,120
there is like a high degree of customization that every product kind of builds.

294
00:16:35,360 --> 00:16:38,920
And so I think until this point, many people just don't really know how to use the API.

295
00:16:38,960 --> 00:16:43,120
But my claim is that like with better frameworks, we can really make this a lot of fun.

296
00:16:43,600 --> 00:16:48,720
So as an example, we had an engineer at a company that was actually, you know, working

297
00:16:48,720 --> 00:16:50,720
with us to integrate Oso in their application.

298
00:16:51,120 --> 00:16:55,440
And they actually had so much fun working with us on making all this stuff work that

299
00:16:55,440 --> 00:16:58,960
they, after finishing the project, they then went and applied for a job and joined us as

300
00:16:58,960 --> 00:16:59,560
a team.

301
00:16:59,560 --> 00:17:01,560
And so we had a really fun experience with this.

302
00:17:01,560 --> 00:17:03,160
And I think that's the end of the demo.

303
00:17:03,160 --> 00:17:04,560
So I think that's the end of the demo.

304
00:17:04,560 --> 00:17:05,720
So I think that's the end of the demo.

305
00:17:05,960 --> 00:17:09,080
After finishing the project, they then went and applied for a job and joined us as an

306
00:17:09,080 --> 00:17:10,880
engineer, so they could work on it full time.

307
00:17:11,120 --> 00:17:16,040
So I have a warning, which is this stuff is so fun, you might not want to do anything

308
00:17:16,040 --> 00:17:17,240
else with your life afterwards.

309
00:17:20,400 --> 00:17:24,280
So the final the final area I want to talk about is about architecture and what makes

310
00:17:24,280 --> 00:17:24,680
this fun.

311
00:17:27,080 --> 00:17:29,880
So, again, I'm going to be talking a lot about logic and data.

312
00:17:30,800 --> 00:17:35,560
Remember, logic being the things like admins can do anything or you can do a

313
00:17:35,560 --> 00:17:37,000
thing if you have a role and so on.

314
00:17:37,000 --> 00:17:39,360
So the data is the piece that's backing it.

315
00:17:39,400 --> 00:17:44,000
You know, you have a specific role in an organization or, you know, this user created

316
00:17:44,000 --> 00:17:47,120
this issue for the following diagrams.

317
00:17:47,120 --> 00:17:48,680
I'll just use these icons to represent them.

318
00:17:51,840 --> 00:17:58,440
OK, so when we start out with a monolithic application, so this purple hexagon here is

319
00:17:58,440 --> 00:18:00,520
representing our service.

320
00:18:01,200 --> 00:18:02,680
Life is life is pretty OK.

321
00:18:03,160 --> 00:18:06,960
We have our authorization logic that's happily integrated inside our app.

322
00:18:07,680 --> 00:18:10,600
Our app talks to the database, so any time it needs to get that data, it can just call

323
00:18:10,600 --> 00:18:12,000
the database. Life is good.

324
00:18:13,720 --> 00:18:15,360
And then we go and implement a new service.

325
00:18:15,400 --> 00:18:18,760
We have some new application, product feature, whatever it is.

326
00:18:19,360 --> 00:18:21,640
So we have a new service and that has its own database.

327
00:18:23,440 --> 00:18:27,440
Now, that that service is probably going to want to do some authorization itself.

328
00:18:27,960 --> 00:18:32,040
And it's very likely that it's going to want to do the same kinds of things the first

329
00:18:32,040 --> 00:18:37,520
app was doing. For example, suppose you are building GitHub actions, right?

330
00:18:37,720 --> 00:18:41,000
So it's the CI pipeline thing to run your test suite, stuff like that.

331
00:18:41,800 --> 00:18:43,240
You're building GitHub actions.

332
00:18:43,520 --> 00:18:48,360
The kinds of things you need to authorize is, you know, who can read running workflows,

333
00:18:48,360 --> 00:18:50,400
who can cancel jobs and restart them?

334
00:18:51,040 --> 00:18:54,400
All of that is going to depend on the permissions you have in the repository.

335
00:18:54,880 --> 00:18:57,640
And that's the kind of thing that I was talking about that was implemented previously.

336
00:18:58,640 --> 00:19:03,320
And so what ends up happening is that you have like multiple applications and multiple

337
00:19:03,320 --> 00:19:07,480
services, but they have a lot of shared logic and shared data to kind of make them all work

338
00:19:07,480 --> 00:19:11,440
consistently. And so what ends up happening is you sort of have this problem of like,

339
00:19:11,440 --> 00:19:14,960
well, how do I make sure the right things have the right bits in the right places?

340
00:19:14,960 --> 00:19:17,760
And this part gets fun.

341
00:19:20,640 --> 00:19:23,840
So the option space is kind of falls on like a two by two.

342
00:19:24,320 --> 00:19:27,320
On one hand, you have the logic and the data that I've spoken about a bunch.

343
00:19:28,040 --> 00:19:32,080
And on the other dimension we have, to what extent can you centralize those two pieces?

344
00:19:33,720 --> 00:19:39,040
So to start out with decentralized logic, there's not really much to say here.

345
00:19:39,040 --> 00:19:42,840
This is kind of the sort of the default that you would just do by continuing to do what you

346
00:19:42,840 --> 00:19:44,200
were doing previously. Right.

347
00:19:44,200 --> 00:19:46,000
You keep writing your code in your apps.

348
00:19:46,480 --> 00:19:50,040
If you need to, you know, if you need to duplicate stuff, you go ahead and write that code

349
00:19:50,040 --> 00:19:52,600
multiple times. Very simple.

350
00:19:52,600 --> 00:19:56,600
Your sort of model of working on services doesn't change, but it can be kind of hard to keep

351
00:19:56,600 --> 00:20:00,800
things consistent. Right. Like if you want to make a change across everything, you need every

352
00:20:00,800 --> 00:20:02,080
team to go and make that change.

353
00:20:04,320 --> 00:20:06,800
So instead, we might try and centralize some of that logic.

354
00:20:08,240 --> 00:20:13,880
So, again, so take the take my example from before about the roles model.

355
00:20:13,920 --> 00:20:17,560
We had that like dictionary in Python of like what roles can be what.

356
00:20:18,360 --> 00:20:22,000
Imagine we were to just take that piece of data and put it into some central place.

357
00:20:22,440 --> 00:20:24,000
And we put it into an S3 bucket.

358
00:20:25,000 --> 00:20:29,920
And now, potentially, every application on startup periodically, I don't know what, can

359
00:20:29,920 --> 00:20:34,520
download that sort of blob dictionary and use that to drive its authorization logic.

360
00:20:35,360 --> 00:20:38,320
What's nice about this is we now have that central place to define roles.

361
00:20:38,560 --> 00:20:42,760
If I want to extend an existing one and say, you know, repository readers can read

362
00:20:43,680 --> 00:20:47,160
GitHub workflows, actions workflows, I can do that in one place.

363
00:20:49,160 --> 00:20:53,360
Now, the challenge is we've obviously introduced this new external dependency, external piece of

364
00:20:53,360 --> 00:20:55,440
state that's like shared between all of our services.

365
00:20:57,840 --> 00:21:02,320
So what we might do alternatively is kind of take that logic and wrap it inside a service.

366
00:21:02,960 --> 00:21:07,920
So, again, maybe the maybe all the service does is tells you, can this role do this action on

367
00:21:07,920 --> 00:21:08,720
this resource type?

368
00:21:10,320 --> 00:21:13,040
What's nice about this is now we're making that decision dynamically.

369
00:21:13,040 --> 00:21:16,480
We don't need to worry about like caching validation and things like that.

370
00:21:16,920 --> 00:21:20,280
But we've introduced that external service dependency to like every single request.

371
00:21:21,280 --> 00:21:26,360
This is going to keep coming up again and again in this in this world is, you know, you have this

372
00:21:26,360 --> 00:21:30,320
piece of shared logic that needs to be used across your entire architecture.

373
00:21:31,160 --> 00:21:32,680
There's just like no good way around this.

374
00:21:33,880 --> 00:21:36,200
But in this case, this is a pretty simple setup.

375
00:21:36,240 --> 00:21:40,080
You can even add things like caching if you want to, you know, locally, if you want to sort of,

376
00:21:41,080 --> 00:21:44,000
you know, increase the robustness to the network going down and stuff like that.

377
00:21:44,320 --> 00:21:45,600
But that's going to introduce complexity.

378
00:21:48,560 --> 00:21:49,720
OK, so what about the data?

379
00:21:50,800 --> 00:21:56,480
So in terms of having your data decentralized, so things like, you know, what roles do people have?

380
00:21:58,280 --> 00:22:00,480
If you have a very small amount of shared data.

381
00:22:00,960 --> 00:22:06,640
So let's say that in your application, users only really have like one role on an organization and

382
00:22:06,640 --> 00:22:11,520
that's it. Then what you can do is distribute that data on something like a cryptographic token.

383
00:22:12,640 --> 00:22:17,560
So maybe something like a JWT, you kind of encode it into that token that, you know, the user has a

384
00:22:17,560 --> 00:22:18,360
specific role.

385
00:22:19,360 --> 00:22:24,600
What's nice about this is now for an individual services standpoint, when a request comes in, you

386
00:22:24,600 --> 00:22:30,000
know, you do your JWT validation and now you have that data as if it already was local and you can

387
00:22:30,000 --> 00:22:30,880
read straight off of that.

388
00:22:30,880 --> 00:22:36,360
Like, OK, you know, what roles the user have and the rest of your app kind of continues as it was.

389
00:22:37,720 --> 00:22:40,200
That's a great option when your data is kind of small.

390
00:22:40,600 --> 00:22:45,400
But think, you know, if you had to encode in that token all of the orgs you have, all the repositories

391
00:22:45,520 --> 00:22:50,720
you have, all the issues you created, all the PRs you submitted in GitHub, that tokens can be huge.

392
00:22:51,160 --> 00:22:54,360
So this is not you can't really do this once data gets past a certain size.

393
00:22:57,000 --> 00:23:01,800
So one option for still keeping that data decentralized is you just leave the data where it is.

394
00:23:02,480 --> 00:23:06,000
You say, look, I have I have my microservices or my my services.

395
00:23:06,360 --> 00:23:09,840
They have good service boundaries of what data they manage.

396
00:23:10,200 --> 00:23:13,080
So every time I need that data, I'm going to do what microservices do.

397
00:23:13,160 --> 00:23:14,520
And I'm going to query that service.

398
00:23:15,000 --> 00:23:17,480
Maybe I have a role service that just manages roles.

399
00:23:17,760 --> 00:23:20,240
Any time you need to check that, I'll go create that service.

400
00:23:21,960 --> 00:23:26,000
I think this is this is like a good approach if you already have a very robust mechanism for

401
00:23:26,000 --> 00:23:27,440
creating other services.

402
00:23:27,760 --> 00:23:32,600
You've you've gone all in on microservices and you've got a phenomenal and a GPC method for doing

403
00:23:32,600 --> 00:23:38,120
this because it really needs to be good because this will make your app incredibly chatty.

404
00:23:38,760 --> 00:23:43,600
Right. So any time you do authorization, pretty much every request, you're potentially going and

405
00:23:43,600 --> 00:23:46,400
reaching out to another service and asking what roles this user have.

406
00:23:49,680 --> 00:23:52,680
So that brings me to the final option, centralizing the data.

407
00:23:53,920 --> 00:23:57,720
I'm going to claim that if you're centralizing data, you might as well centralize the logic as

408
00:23:57,720 --> 00:24:03,160
well. Like instead of just having it be like a dumb store of data, extend it with some logic.

409
00:24:04,760 --> 00:24:09,800
And so in this world, what happens is you're almost back to the simplicity of that initial monolithic

410
00:24:09,800 --> 00:24:15,920
API where an individual service can just ask authorized, can this user read this document?

411
00:24:16,680 --> 00:24:22,080
And that's just give me a network network request that goes in queries that central service that has

412
00:24:22,080 --> 00:24:26,040
all the data, has all the logic and it can make that decision and return that true or false.

413
00:24:27,160 --> 00:24:30,960
So from a downstream app standpoint, incredibly, incredibly clean and simple.

414
00:24:31,000 --> 00:24:32,040
There's like no work to do.

415
00:24:33,400 --> 00:24:36,680
The challenge here is building that central service.

416
00:24:37,360 --> 00:24:40,520
And it's kind of hard to understate just how challenging that is.

417
00:24:41,160 --> 00:24:47,920
So companies who've gone down this path, talking Google, Airbnb, Carter, just across the road, Carter,

418
00:24:49,120 --> 00:24:53,880
when they did this, they had, you know, a full team of engineers, six, eight engineers, you know,

419
00:24:53,880 --> 00:24:58,760
initial upfront work, multiple years and then ongoing forever maintenance work on keeping those services

420
00:24:58,760 --> 00:25:03,840
running. And so, like, for example, here's here's what the Google's Anzabar architecture looks like.

421
00:25:03,840 --> 00:25:06,640
Here's the architecture powering Google's authorization.

422
00:25:07,680 --> 00:25:10,960
Because remember, we're talking about this is on every single request.

423
00:25:10,960 --> 00:25:12,760
You're making this authorization query.

424
00:25:13,640 --> 00:25:16,920
Any latency out there is added basically to all of your applications.

425
00:25:16,920 --> 00:25:19,000
So it needs to be incredibly fast.

426
00:25:19,200 --> 00:25:21,040
Needs to be incredibly high availability.

427
00:25:21,840 --> 00:25:27,560
So, you know, some numbers from Google, they do something like 10 million queries to the service per second.

428
00:25:27,920 --> 00:25:31,520
They have like trillions and trillions, like trillions of rows in their database.

429
00:25:32,200 --> 00:25:34,560
They have something like five or six nines of availability.

430
00:25:34,560 --> 00:25:36,480
It's a hugely challenging problem.

431
00:25:37,440 --> 00:25:40,640
So very, very high benefit to doing this, right?

432
00:25:40,640 --> 00:25:42,920
You sort of if you do this, your applications stay simple.

433
00:25:42,920 --> 00:25:49,000
But I guess I'd say the fun part here is in building out this distributed systems problem.

434
00:25:50,280 --> 00:25:57,200
And that's kind of my takeaway from this whole architecture piece is fundamentally distributed systems are pretty hard.

435
00:25:57,200 --> 00:26:06,880
So, it's a really fun engineering challenge, but you sort of can't quite get away from that fact that it's going to be it's going to be a question of what trade offs do you want to make?

436
00:26:06,880 --> 00:26:08,960
It's a question of how much time do you want to invest?

437
00:26:09,280 --> 00:26:11,320
It's a question of like, do you want this?

438
00:26:11,360 --> 00:26:18,400
You know, do you want to balance ease of individual people collaborating on a service versus having something more abstracted?

439
00:26:20,680 --> 00:26:22,480
So it's summarized everything I just said, right?

440
00:26:22,520 --> 00:26:28,520
I spoke about modeling where you need something super flexible to handle those 22 different models.

441
00:26:29,400 --> 00:26:35,760
You then take enforcement, which requires you to take those models and put them across everything from the front end back to the database.

442
00:26:36,320 --> 00:26:43,880
And then for those lucky few who are working across multiple services, you take that already challenging problem and figure out how to distribute it across a whole architecture.

443
00:26:45,280 --> 00:26:46,680
It's a lot of fun. It's a lot of fun.

444
00:26:46,960 --> 00:26:53,760
On a serious note, I don't want to just like to leave you there with this like hugely challenging problem that with all these kind of trade offs.

445
00:26:54,120 --> 00:27:01,280
The you know, the reason I want to give this talk and the reason that my company exists is to try and make authorization easier for developers.

446
00:27:02,000 --> 00:27:04,200
And so to that end, there's a couple of resources we have.

447
00:27:04,880 --> 00:27:09,320
So number one, we put together a series of technical guides called Authorization Academy.

448
00:27:09,960 --> 00:27:13,560
This is basically long form content of the kinds of things I spoke about today.

449
00:27:13,640 --> 00:27:19,280
What are the trade offs? What are the things you need to do? Like when should you use different patterns and why?

450
00:27:20,160 --> 00:27:23,040
This is like fully vendor neutral. This isn't about Oso.

451
00:27:23,320 --> 00:27:28,160
This is purely like go read this as a developer if you want to like understand authorization deeper.

452
00:27:30,080 --> 00:27:36,120
On the other hand, we do have a product that is basically our take on the best way to solve these kinds of problems.

453
00:27:37,000 --> 00:27:40,440
So my sort of closing recommendations are sort of two things.

454
00:27:41,440 --> 00:27:45,840
Number one, if you listen to this talk and you thought, wow, this really does sound like a lot of fun.

455
00:27:45,840 --> 00:27:52,040
I totally buy everything Sam just said. You should come and work with us on it and have fun. Come build a language and distribute system. It's great.

456
00:27:52,800 --> 00:27:56,400
If on the other hand you were listening and you're like that sounds terrible.

457
00:27:56,400 --> 00:28:01,160
I really want to focus on making my app for my product work really well for my customers.

458
00:28:01,160 --> 00:28:03,160
This isn't the kind of thing we should be spending time on.

459
00:28:03,240 --> 00:28:09,760
Then you should check out our product because you know our mission as a company is basically to get people to spend a tenth of the time on

460
00:28:09,800 --> 00:28:11,800
this problem they currently do.

461
00:28:12,280 --> 00:28:14,720
So that concludes my talk. Thank you everyone for listening.

462
00:28:15,200 --> 00:28:23,760
I'll be hanging around to answer any questions and we're also doing an open space at 3 in room 251 D, I believe.

463
00:28:23,760 --> 00:28:31,040
So I hope to see you out there at the conference and I will happily talk about this topic for forever basically.

464
00:28:31,480 --> 00:28:33,480
So yeah, thank you everyone.

