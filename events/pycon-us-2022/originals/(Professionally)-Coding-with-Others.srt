1
00:00:00,000 --> 00:00:16,400
Hello, YouTube. My name is William Morrell. We had a little audio problem with recording at PyCon. I'm coming to you from the future with my talk, professionally coding with others. I am a software engineer at Sandia National Lab.

2
00:00:16,920 --> 00:00:23,000
It's a more academic work environment than a typical coding job.

3
00:00:23,840 --> 00:00:30,120
Some people write code as a full-time job, but more just happen to write code as a part of getting their work done.

4
00:00:31,040 --> 00:00:41,680
There's some things that I've noticed in my work over the years that helped to make software transcend its usefulness to its original author, and I thought talking about it would be a good topic for PyCon.

5
00:00:42,840 --> 00:00:52,440
A few disclaimers up front. You don't need to have any coding anywhere in your job description or even have an employment to get something out of this talk.

6
00:00:52,920 --> 00:01:01,920
And create professional quality code. You don't need to be on a team either. I believe everything that I'm going to talk about is just good practice for anyone writing software.

7
00:01:03,400 --> 00:01:18,160
So with that, I have a few topics that I want to cover in this talk. It is not at all exhaustive, but there are things that I've observed to be important to getting other people to understand code enough to use it and work with it.

8
00:01:19,160 --> 00:01:33,240
So first up is documentation. Documentation is really, really important, and it's a huge topic overall. There's entire conferences like Write the Docs that cover documentation topics, and I'm just going to cover the very basics in this talk.

9
00:01:34,640 --> 00:01:47,160
So the most basic of documentation is the humble README file. Your project should have one of them. Many tools that generate projects for you will add templates for one of these during project setup.

10
00:01:47,160 --> 00:02:05,160
The example that I'm showing on the slide is just a basic markdown template for README. Your goals for the README are to make it clear upfront what your code does and include instructions on building, running the code, how to use it, and contact information for you

11
00:02:05,160 --> 00:02:17,160
as the person who created the code. If code is ever going to leave your system, I recommend protecting yourself, your employer, or institution by including a license file with the code.

12
00:02:18,160 --> 00:02:28,160
And you should also check licenses and any policies that your organization has around licenses before modifying or including somebody else's code in your projects.

13
00:02:29,160 --> 00:02:38,160
Contributing instructions are also really important. Even if your project is entirely private right now, you should write them before you need to use them.

14
00:02:40,160 --> 00:02:54,160
And then there are site generators. So site generators build documentation from code. There were two really great talks in the last two PyCons about using site generators

15
00:02:55,160 --> 00:03:11,160
that I had in my original version of this talk, but are not in this version of the slides. But I do have a repo with links to those talks on GitHub that I will provide either in the description or later at the end of the talk.

16
00:03:13,160 --> 00:03:20,160
Site generators are great because you can keep documentation as close to the code as possible. It's literally right there in with the code.

17
00:03:21,160 --> 00:03:31,160
It also allows you to build documentation as a separate artifact to ship and deploy so others can view that documentation without having to dig through source directories.

18
00:03:36,160 --> 00:03:45,160
Moving on, version control is the next topic. And this was my method of version control when I first started seriously programming in university.

19
00:03:46,160 --> 00:04:01,160
This is a zip disk for those who don't know. It holds 100 megabytes of data. And when I worked on a project for class, I would make a folder on this disk or copy a folder from a previous assignment and then start working on that copy.

20
00:04:02,160 --> 00:04:07,160
And if I needed to roll back, well, I already had the previous copy before I started working.

21
00:04:08,160 --> 00:04:14,160
There were better options at the time like subversion, and there's even better options now, namely Git.

22
00:04:15,160 --> 00:04:23,160
So Git has become the de facto choice for version control mainly because of the ubiquity of GitHub. And I'm going to focus specifics on that.

23
00:04:24,160 --> 00:04:32,160
But the important bit is just to use something to track changes, whether it's Git or Mercurial or Subversion or something else.

24
00:04:33,160 --> 00:04:41,160
So if anybody is completely new to version control at a very high level, it allows for tracking changes to files over time.

25
00:04:42,160 --> 00:04:48,160
For the purposes of this talk, the essential details are that Git bundles these changes together into something called a commit.

26
00:04:49,160 --> 00:04:54,160
And each of these commits has a message associated with it describing the changes in that commit.

27
00:04:55,160 --> 00:05:00,160
These commits are joined together in a chain with a name at the end called a branch.

28
00:05:00,160 --> 00:05:06,160
And that branch name lets you trace the history of changes all the way back to the first commit.

29
00:05:08,160 --> 00:05:11,160
A full introduction to using Git would take too much time.

30
00:05:11,160 --> 00:05:16,160
So I like to point to the Atlassian tutorials as a freely available introduction.

31
00:05:17,160 --> 00:05:21,160
And it's a little bit more accessible than just directly reading the Git manual.

32
00:05:21,160 --> 00:05:31,160
There are other resources available online for doing things that aren't quite obvious from the commands, depending on how salty you want your language.

33
00:05:31,160 --> 00:05:32,160
You can choose one or the other.

34
00:05:34,160 --> 00:05:46,160
And using a graphical client can help when you're starting out to ease your transition into using it and be able to do things with a point and click kind of interface without having to memorize commands.

35
00:05:46,160 --> 00:05:59,160
So there's a particular failure mode and using Git and other version control that I want to highlight, shown in this XKCD comment, where sometimes you will start out with a reasonable description of what your changes are.

36
00:05:59,160 --> 00:06:06,160
And as you go on and you get tired, your descriptions basically become gibberish.

37
00:06:06,160 --> 00:06:12,160
And this isn't really useful to anybody coming to the repository later.

38
00:06:13,160 --> 00:06:23,160
So I will argue that your commit messages are documentation of code history, and you should treat your commit messages as just as important as any other documentation.

39
00:06:23,160 --> 00:06:31,160
So anybody coming to the code later can figure out what is going on based on the messages in the documentation.

40
00:06:31,160 --> 00:06:34,160
So what should a commit message look like?

41
00:06:34,160 --> 00:06:44,160
A good first level approximation that I've found is have a first line that is very short, about 50 characters or less, of what is changing as simple as possible.

42
00:06:44,160 --> 00:06:56,160
And you should write to complete the thought this commit will, and then that it is going to be a good first level approximation.

43
00:06:56,160 --> 00:07:03,160
And then you should write to complete the thought this commit will, and then that is your first line.

44
00:07:03,160 --> 00:07:16,160
Then have a blank line. So you have sort of a subject at the top, and then a body of the commit message later, sort of like an email that describes why you are changing the things that are changing.

45
00:07:16,160 --> 00:07:28,160
So this is a good first level approximation that I've found is that you should include any bug reports, error messages that were encountered, user stories for new features, things like that, to describe why this change is being made.

46
00:07:28,160 --> 00:07:40,160
So one of the design decisions about Git that I really like the most is the ability to stage changes for commit separately from actually committing those changes.

47
00:07:40,160 --> 00:07:47,160
Git allows you to do both these things at the same time, but I will argue that doing that is a mistake.

48
00:07:47,160 --> 00:08:06,160
Getting somebody to understand the changes you're making is a lot easier if you arrange them in a step by step way, and the easiest way to do that is to think about what you're going to put in your commit message and only add those things in each commit.

49
00:08:06,160 --> 00:08:14,160
So I've given a much longer talk on Git commands to help structure things in this way.

50
00:08:14,160 --> 00:08:32,160
I don't have time to do that whole thing in this talk but I do have a quick lightning round version of commands to use with Git. So we'll start out with git reset head tilde. This is a commit undo button.

51
00:08:32,160 --> 00:08:42,160
So you'll take the previous commit and leave everything in your working directory, but undo it in the history so you can try it again.

52
00:08:42,160 --> 00:08:54,160
So this is great for if you are doing work in progress and you have a big commit, you can undo it and then break it into smaller chunks that are easier to understand.

53
00:08:54,160 --> 00:08:58,160
The next is the patch flag to the git add command.

54
00:08:58,160 --> 00:09:11,160
This lets you choose individual lines or chunks of lines to stage for a commit. So sometimes you have multiple logical changes that end up within a single file, but they change for different reasons and you want to put them in different commits.

55
00:09:11,160 --> 00:09:29,160
Using a patch mode, you can avoid doing weird things like having a scratch pad and copy pasting in and out of the file or abusing your editor's undo and redo function. You can just add the parts that you want and leave everything else for later commit.

56
00:09:29,160 --> 00:09:39,160
The Rs and theirs flags to git checkout is a handy way to handle simple merge conflicts by choosing one side or the other of the merge to keep.

57
00:09:39,160 --> 00:09:52,160
And the cherry pick command allows you to take a given commit hash and add it to the tip of your current branch. So this is great if you, for example, stumble upon a bug while you're working on another feature.

58
00:09:52,160 --> 00:10:08,160
You can commit a change to fix that bug and continue working on your feature branch and then cherry pick that commit out into a separate branch for a different push later. So you can fix the bug immediately while still continuing to work on your feature.

59
00:10:08,160 --> 00:10:31,160
Last is the git rebase command, particularly with the interactive flag. This one is the most complicated, but a simple description as I can come up with is it allows you to break a branch off from where it diverged from the rest of the code and stick it on somewhere else and replay those changes from the new spot.

60
00:10:31,160 --> 00:10:49,160
So this is great if you have a feature that you worked on and then had to table and then come back to it and the code has changed since then, you can break it off from the past and stick it on to the present version of the code and continue working from that point.

61
00:10:49,160 --> 00:11:10,160
The next topic I wanted to talk about are code quality tools. So there's a long history of computer programs that are designed to analyze other programs and incorporating these tools into your workflow can help you to work faster, have better code, and make code that is easier for others to use.

62
00:11:10,160 --> 00:11:33,160
The classical example of this is the linter. So this comes from the Unix utility called lint that would scan over C code and find problems with style or problematic constructs, much like a lint roller going over your clothing can pick up bits of fur and dust and lint.

63
00:11:33,160 --> 00:11:51,160
And Python, the most widespread versions of linters are pilant and flake8. Both will check for conformance to the PEP8 official style guide and provide a bunch of additional style checks outside of PEP8 for potential errors or confusing constructs.

64
00:11:51,160 --> 00:12:01,160
They also each support plugins to add further code checks, and you can add your own checks if you find something is problematic in your own environment.

65
00:12:01,160 --> 00:12:10,160
So linters are great, but they only really give you a laundry list of details with your code. They don't modify your code.

66
00:12:10,160 --> 00:12:20,160
For that, we have another class of tools called auto formatters, and these will read in your code and then write that code back out following some deterministic rules.

67
00:12:20,160 --> 00:12:30,160
I will further classify formatters as being comprehensive, so they do the entire file or have narrow scope.

68
00:12:30,160 --> 00:12:46,160
So for narrow scope, we have tools like isort that will read in the import statements in your code and arrange them alphabetically, much like a bookstore will have sections of books arranged alphabetically by authors.

69
00:12:46,160 --> 00:12:56,160
So that just makes it easier when you have a longer list of things to quickly narrow in on where something is located.

70
00:12:56,160 --> 00:13:06,160
There's also the upgrade tools like two to three in the standard library or pyupgrade that will rewrite your code and then run it back to the library.

71
00:13:06,160 --> 00:13:30,160
There's also the upgrade tools like two to three in the standard library or pyupgrade that will rewrite code in older Python code idioms and write them in newer idioms, such as taking the print expression from Python 2 and making it a print function in Python 3.

72
00:13:30,160 --> 00:13:40,160
Or pyupgrade will do things like take percent formatted strings and convert them to string.format calls and then into f strings.

73
00:13:40,160 --> 00:13:46,160
Comprehensive formatters are black and Python.

74
00:13:46,160 --> 00:13:54,160
Black will read in your code and write it out in a standard style.

75
00:13:54,160 --> 00:14:11,160
There are other formatters for Python like yet another Python formatter or yapf that has a similar utility but has a little bit more flexibility.

76
00:14:11,160 --> 00:14:14,160
Black seems to be the standard these days.

77
00:14:14,160 --> 00:14:22,160
And I am stumbling here because I noticed that these slides are from a different version of this talk where I talked about more than just Python.

78
00:14:22,160 --> 00:14:26,160
So here are some other formatters that are available.

79
00:14:26,160 --> 00:14:31,160
My notes do not match my slides.

80
00:14:31,160 --> 00:14:35,160
So once you have these code quality tools, where do you run them?

81
00:14:35,160 --> 00:14:43,160
You can run all of these as standalone commands, which is great, but that's not always what you want to do.

82
00:14:43,160 --> 00:14:54,160
So integrating things in your IDE or editor can help with workflow quite a bit by giving you immediate feedback on changes that are being made.

83
00:14:54,160 --> 00:14:57,160
You can also run them with your project tests.

84
00:14:57,160 --> 00:15:06,160
So when you run your test suite, just also run all these code quality tools and treat it just as if it's another kind of test.

85
00:15:06,160 --> 00:15:11,160
It's a test on the quality of the code versus the functionality of the code.

86
00:15:11,160 --> 00:15:16,160
You can also have them run in continuous integration steps, and this is a great thing to do.

87
00:15:16,160 --> 00:15:29,160
So you just when you integrate your code in Jenkins or GitHub actions, just run these steps to check the quality of your code.

88
00:15:29,160 --> 00:15:33,160
The one that I want to highlight is using a tool called pre commit.

89
00:15:33,160 --> 00:15:39,160
So pre commit is a Python application, but it is not specific to Python code.

90
00:15:39,160 --> 00:15:45,160
It will run on any Git repo and you give it a config file like shown on the right.

91
00:15:45,160 --> 00:15:51,160
And you can define different checks to run on your code before you actually commit the code.

92
00:15:51,160 --> 00:16:02,160
So this helps to identify any issues in your code before you commit it and push it to others so you can fix it early.

93
00:16:02,160 --> 00:16:06,160
The next topic that I want to talk about is pull requests.

94
00:16:06,160 --> 00:16:17,160
Pull requests are a way of collaboration that has gained a lot of popularity over the last 15 or so years due to the implementations of GitHub and similar tools.

95
00:16:17,160 --> 00:16:33,160
So common Git platforms provide many extra features around pull requests to do things like line by line suggestions and review approvals of requests, automation folks, and it can be a little bit daunting if you're not accustomed to working this way.

96
00:16:33,160 --> 00:16:40,160
So what are pull requests at a basic level? They are quite literally a request to pull code.

97
00:16:40,160 --> 00:16:50,160
The request has a source branch and a target branch where the desired end state is for the target branch to reach out to the source and pull those changes in.

98
00:16:50,160 --> 00:16:59,160
This process looks similar to a practice that has been around much longer of sending a patch of additions and deletions to the code from a known state.

99
00:16:59,160 --> 00:17:06,160
The difference is rather than tossing this patch over to someone, the patch is pulled by those that are maintaining the target branch.

100
00:17:06,160 --> 00:17:20,160
As a consequence, either or both of these branches can change between initiating the pull request and the merging of that pull request and all the updates that happen in that intervening time are included.

101
00:17:20,160 --> 00:17:28,160
So I think this is the killer feature of pull requests and I want to really stress how understanding this can unlock better collaborations.

102
00:17:28,160 --> 00:17:43,160
I've seen so many devs treat sending a pull request like sending a patch where rather than doing a simple update to the branch in response to feedback, they close the original request, make a new branch, make a new pull request and submit it.

103
00:17:43,160 --> 00:17:51,160
And it's so much better to just update your branches and keep all that context in your original review.

104
00:17:52,160 --> 00:17:55,160
So what are the goals that we have with pull requests?

105
00:17:55,160 --> 00:17:59,160
The obvious one is getting the code merged.

106
00:17:59,160 --> 00:18:02,160
But I don't think that's the full story.

107
00:18:02,160 --> 00:18:11,160
Some people will work on projects and just merge directly into the main branch and it's entirely possible to work without pull requests at all.

108
00:18:11,160 --> 00:18:12,160
So what else do you get?

109
00:18:12,160 --> 00:18:18,160
Part of what you get is the ability to get feedback from fellow humans in an easy manner.

110
00:18:18,160 --> 00:18:32,160
You just push your branch, submit a pull request and somebody has a quick web view into the code and can scan through it and give quick feedback.

111
00:18:32,160 --> 00:18:37,160
I will argue that the most important piece is context transfer.

112
00:18:37,160 --> 00:18:44,160
So getting somebody else to understand the changes that you're making to the code and the code base overall.

113
00:18:44,160 --> 00:18:48,160
So it's a little bit like doing asynchronous pair programming.

114
00:18:48,160 --> 00:18:59,160
So the more people you have who know how to maintain a particular project, the more that everyone involved gets the ability to take a vacation without the project dying.

115
00:18:59,160 --> 00:19:07,160
Chelsea Troy has a series of articles about this on her website under the temporarily distributed tag.

116
00:19:07,160 --> 00:19:21,160
I got a lot of inspiration on her writing on this and using pull requests as an effective way to transfer knowledge and context in both directions between the submitter and the reviewer.

117
00:19:21,160 --> 00:19:28,160
Doing this is a lot more work than it would initially seem, but it's work that is really worth it.

118
00:19:28,160 --> 00:19:34,160
And I think her insights into this are really great.

119
00:19:34,160 --> 00:19:38,160
The last topic that I have for today is dependency management.

120
00:19:38,160 --> 00:19:47,160
So it's practically impossible today to have any software that doesn't at some level depend on other software or firmware to function correctly.

121
00:19:47,160 --> 00:19:55,160
And dependency management is a set of tools and practices we have to make sure that software has everything it needs to function in place.

122
00:19:55,160 --> 00:19:58,160
So I have a story to illustrate this.

123
00:19:58,160 --> 00:20:05,160
There's a tradition in computer science of telling stories about software with characters having names following the letters of the alphabet.

124
00:20:05,160 --> 00:20:10,160
And traditionally the first two characters in the story are named Alice and Bob.

125
00:20:10,160 --> 00:20:15,160
So we have Alice and Alice has a problem to solve.

126
00:20:15,160 --> 00:20:20,160
And Bob has a program that solves a similar problem.

127
00:20:20,160 --> 00:20:25,160
So Alice asks for advice from Bob on how to solve that problem.

128
00:20:25,160 --> 00:20:33,160
And Bob gives the advice and points out sections of the code to modify for Alice's problem.

129
00:20:33,160 --> 00:20:38,160
Alice makes those changes, runs the code, and gets an import error.

130
00:20:38,160 --> 00:20:41,160
So in Python, we know how to solve this.

131
00:20:41,160 --> 00:20:45,160
You look at the package that is missing in the import error.

132
00:20:45,160 --> 00:20:51,160
And then in the import error, you find out what Python package is, needs to be installed for that.

133
00:20:51,160 --> 00:20:54,160
You install it and you run it again.

134
00:20:54,160 --> 00:21:01,160
So Alice does this a few times and gets a couple more import errors and everything is unsolved.

135
00:21:01,160 --> 00:21:09,160
And then gets a file not found error because there's a config file that needs to be put in place but it's missing from code.

136
00:21:09,160 --> 00:21:16,160
So you can imagine after doing all of this, if Alice gets asked by Bob, hey, how's it going?

137
00:21:16,160 --> 00:21:21,160
Did everything work? Alice would respond, not great, Bob.

138
00:21:21,160 --> 00:21:31,160
So this problem of it works on my machine is a big one and we want to avoid it.

139
00:21:31,160 --> 00:21:38,160
It's something that wasted a lot of Alice's time in taking something that would have been just a quick modification to code.

140
00:21:38,160 --> 00:21:46,160
And then having all these sort of knock on following issues because the environment wasn't set up properly.

141
00:21:46,160 --> 00:21:54,160
So one way we have to ameliorate this is to do version pinning of dependencies.

142
00:21:54,160 --> 00:22:03,160
So when you pip install something like pip install flask, that installs flask, but it also installs a few other things.

143
00:22:03,160 --> 00:22:15,160
You have to keep a list of the things that you're installing like the packages on the left, but you also need to keep a list of the exact versions of those things that you're installing like the list on the right.

144
00:22:15,160 --> 00:22:25,160
Because a minor version of one of the things on the right can update and end up breaking your code.

145
00:22:25,160 --> 00:22:31,160
In Python, we also have this comic that gets sent around quite a bit.

146
00:22:31,160 --> 00:22:39,160
It's not always easy to get an environment set up in the proper way and things used to be pretty bad.

147
00:22:39,160 --> 00:22:43,160
This comic is only a little bit hyperbole.

148
00:22:43,160 --> 00:22:53,160
You would often have several different Pythons installed on a system and it wasn't entirely clear which one was running at any given point in time.

149
00:22:53,160 --> 00:22:59,160
And multiple different site packages directories with Python packages installed.

150
00:22:59,160 --> 00:23:03,160
I would just recommend using a tool like poetry.

151
00:23:03,160 --> 00:23:09,160
There's a couple different projects now like poetry.

152
00:23:09,160 --> 00:23:13,160
I've just found poetry the easiest to use.

153
00:23:13,160 --> 00:23:23,160
And this provides high-level dependency management similar to what other languages have had for a while like cargo with rust or yarn for node.

154
00:23:23,160 --> 00:23:35,160
Poetry provides an interface to pip for managing packages, to VM for managing virtual environments, and to set up tools for building and packaging your own packages.

155
00:23:35,160 --> 00:23:37,160
You can use all the underlying tools still.

156
00:23:37,160 --> 00:23:43,160
It also gets you version pinning by default and also includes content hashes for the files in each package.

157
00:23:43,160 --> 00:23:53,160
This provides an extra layer of protection for certain supply chain attacks where a legitimate package has files replaced with malicious code.

158
00:23:53,160 --> 00:24:02,080
One other method of helping with the

159
00:24:02,080 --> 00:24:05,080
dependency management is using containers.

160
00:24:05,080 --> 00:24:10,080
So there's a few caveats to using Python in containers.

161
00:24:10,080 --> 00:24:20,080
There's the ways that some people recommend structuring Docker containers don't really work very well for Python.

162
00:24:20,080 --> 00:24:30,080
But it has a site, Python speed.com, that has a lot of different things that you can do to help you build your own containers.

163
00:24:30,080 --> 00:24:35,080
That has a lot of articles on using Docker and Python together.

164
00:24:35,080 --> 00:24:45,080
He has over 50 so far on packaging security performance and other things to get the most out of using Docker.

165
00:24:45,080 --> 00:24:49,080
And that's all I have for the talk.

166
00:24:49,080 --> 00:24:51,080
Thank you all for your attention.

167
00:24:51,080 --> 00:24:58,080
And I'll just leave you with a few words to try to summarize the last few minutes of this talk.

168
00:24:58,080 --> 00:25:13,080
I think all of this really comes down to leaving the code better off than you originally found it and taking opportunities to consider a project as if you're a newcomer and make it easier to dive in and make incremental improvements.

169
00:25:13,080 --> 00:25:28,080
So just having that thought in mind as you apply all these tools and resources helps to make your code consistent and easier to understand and make all your code useful by others.

170
00:25:28,080 --> 00:25:30,080
So thank you all again.

