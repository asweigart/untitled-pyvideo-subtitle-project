1
00:00:00,000 --> 00:00:13,720
Okay, good morning. Good morning, everyone. Did you have a good trip? Yep. Awesome. Okay.

2
00:00:13,720 --> 00:00:21,520
Thank you very much. Thank you for enrolling to this tutorial. Okay. I just sent a message

3
00:00:21,520 --> 00:00:29,920
a moment ago sharing this link as well. So if you're unable to type this, check out the

4
00:00:29,920 --> 00:00:40,800
messages at our website or at the conference website. Okay. So I think we're going to

5
00:00:40,800 --> 00:00:48,320
start now. My name is Ariel Ortiz. You can just call me Ariel. I'm a full-time faculty

6
00:00:48,320 --> 00:00:54,280
member at Tecnologico Monterrey. This is a university back in Mexico. It's the largest

7
00:00:55,200 --> 00:01:02,200
there. I've been in the teaching business for several years now. I've been actually

8
00:01:02,960 --> 00:01:09,960
a full-time faculty member for 28 years. And I started coming here to PyCon recently. Well,

9
00:01:12,720 --> 00:01:19,320
relatively recently, 2017 was the first time I've come to this conference. And it's really

10
00:01:19,360 --> 00:01:26,360
awesome to be here again after two years of not being able to see everyone in person.

11
00:01:27,320 --> 00:01:32,600
I've been working with Python since, I think it was a year 2001, so I have a little bit

12
00:01:32,600 --> 00:01:38,560
more than 20 years using the language. I really, really like Python. It's one of several languages

13
00:01:38,560 --> 00:01:45,560
that I use in my courses. And, well, this is a Pythonesis introductory guide to WebAssembly.

14
00:01:46,560 --> 00:01:53,560
Once again, this is a really interesting topic, and it would take us a lot of time to actually

15
00:01:54,360 --> 00:01:59,260
see it in much more detail. So hopefully after this tutorial, you should have a general idea

16
00:01:59,260 --> 00:02:03,520
of what it is. And if you're interested in going deeper, well, I'll give you some pointers

17
00:02:03,520 --> 00:02:08,480
so that you can check more information. But once again, just to keep our expectations

18
00:02:08,480 --> 00:02:14,240
in place, just have in mind that there's a lot to see. And we're just going to cover

19
00:02:14,240 --> 00:02:21,240
a little bit of this really awesome technology. So these are the tutorial notes. Hopefully,

20
00:02:21,440 --> 00:02:26,600
I hope everybody is connected to the internet, to the Wi-Fi, because we're going to be working

21
00:02:26,600 --> 00:02:33,600
on the cloud for simplicity's sake. So what we're going to be looking at today, these

22
00:02:35,760 --> 00:02:41,160
are the four main topics. First of all, we're going to be looking at what is WebAssembly,

23
00:02:41,160 --> 00:02:48,160
a general overview. And then as a second topic here, we're going to look quickly to

24
00:02:48,720 --> 00:02:54,440
this technology called Piodite. This will allow us to see how we can use Python on a

25
00:02:54,440 --> 00:03:01,440
web browser, thanks to this WebAssembly technology. Our third topic is hand coding WebAssembly.

26
00:03:02,520 --> 00:03:07,760
We're going to have a hands-on experience on how to write a little bit of WebAssembly

27
00:03:07,760 --> 00:03:14,760
by hand. And finally, our fourth topic is writing a tiny compiler. Actually, most of

28
00:03:17,840 --> 00:03:21,480
the compiler is actually written. We're just really going to explain how it works, and

29
00:03:21,480 --> 00:03:27,680
you're going to be having the opportunity to extend it with some additional functionality.

30
00:03:27,680 --> 00:03:34,680
So what is WebAssembly? WebAssembly is a binary instruction format for a virtual machine.

31
00:03:34,680 --> 00:03:41,680
We call it a stack-based virtual machine. So it is what we call an instruction set,

32
00:03:45,520 --> 00:03:52,520
just like x86, just like ARM, just like the instruction set for the Java virtual machine,

33
00:03:52,840 --> 00:03:59,840
or the instruction set for the common language infrastructure, which is the .NET technology.

34
00:04:00,840 --> 00:04:06,120
Basically it's a series of instructions that are executed. In this case, we call it a virtual

35
00:04:06,120 --> 00:04:13,120
machine because it's not really a CPU which is in hardware. It's actually a software machine.

36
00:04:15,000 --> 00:04:22,000
But we can get some really interesting properties when we actually use this. So what's special

37
00:04:24,280 --> 00:04:28,080
about this? Because once again, this idea of having a virtual machine is really not

38
00:04:28,080 --> 00:04:33,640
new. It's something that we've had since many, many decades ago. Specifically, WebAssembly

39
00:04:33,640 --> 00:04:39,640
was designed to be a portable compiler-generated language for implementing client and server

40
00:04:39,640 --> 00:04:45,520
side applications. It's not meant to be written by hand, although we're going to do that here.

41
00:04:45,520 --> 00:04:50,480
I think it's really interesting. It's really educational to do it. But strictly speaking,

42
00:04:50,480 --> 00:04:55,640
the most common use case is to actually use a compiler for a higher level language and

43
00:04:55,640 --> 00:05:01,360
let that high level language actually produce the WebAssembly code. But we're actually going

44
00:05:01,360 --> 00:05:06,480
to see both situations when you write it by hand and when you actually use a tool in order

45
00:05:06,480 --> 00:05:13,480
to generate our WebAssembly programs. So WebAssembly actually is a fairly recent technology. It

46
00:05:16,840 --> 00:05:23,840
was proposed somewhere around 2015. They started writing an initial draft which appeared somewhere,

47
00:05:24,560 --> 00:05:31,560
I think it was March 2017. And around, I think it was October, November 2017, the four major

48
00:05:34,720 --> 00:05:41,160
browser players actually had an implementation that was actually being able to run programs

49
00:05:41,160 --> 00:05:47,760
designed for this minimal viable product of WebAssembly 1.0. So as you can see here, there

50
00:05:47,760 --> 00:05:54,760
was support at the end of 2017, there was support for WebAssembly in Chrome and Edge,

51
00:05:55,640 --> 00:06:02,640
in Firefox and in Safari. What are the main features of this technology? Well, it's secure.

52
00:06:07,280 --> 00:06:12,560
The WebAssembly implementation that runs on browsers actually uses the same sandbox as

53
00:06:12,560 --> 00:06:18,480
JavaScript. So in general, it has been tested fairly well. And as usual, we always get some

54
00:06:18,480 --> 00:06:23,640
security issues at some point, but most of the security issues have been solved so far.

55
00:06:23,640 --> 00:06:29,640
So in general, we do consider this platform fairly secure. It's portable. We can run this

56
00:06:29,640 --> 00:06:36,640
in not only web browsers, but it actually runs on a variety of devices. It runs on mobile

57
00:06:36,640 --> 00:06:43,640
devices, in the same browsers that we mentioned ago. And actually, by the year 2021, last

58
00:06:45,520 --> 00:06:52,280
year actually, it was estimated that 94% of all browsers in the world actually supported

59
00:06:52,280 --> 00:06:59,280
WebAssembly. So it's a fairly ubiquitous technology that we can now depend on.

60
00:07:00,480 --> 00:07:06,360
Another feature, and this is probably the main motivation that I had, it is really performant.

61
00:07:06,360 --> 00:07:13,360
It runs very, very fast. This instruction set, which is WebAssembly, is really made

62
00:07:13,400 --> 00:07:20,400
for a compute intensive processes. Okay? So typically, you will need to understand that

63
00:07:21,520 --> 00:07:27,560
when we talk about WebAssembly, what we can do is fairly limited in the sense that we

64
00:07:27,560 --> 00:07:32,560
can only do computations on numerical values. If we need to interface with the rest of the

65
00:07:32,880 --> 00:07:37,840
world, it is important that we actually call some auxiliary functions written probably

66
00:07:37,840 --> 00:07:41,040
in some other language. Typically, it could be JavaScript, but we're going to see that

67
00:07:41,040 --> 00:07:45,720
it can be Python or some other language as well.

68
00:07:45,720 --> 00:07:51,000
How performant is it? Well, the original design of WebAssembly was made to actually try to

69
00:07:51,000 --> 00:07:58,000
run as close as possible to native code. I did a few months ago a little benchmark of

70
00:07:58,200 --> 00:08:05,200
my own, which wasn't really scientific or any of that kind of stuff in the sense that

71
00:08:05,360 --> 00:08:11,040
it wasn't really formal. I just wrote a program. It was a program that actually used numerical

72
00:08:11,040 --> 00:08:16,600
integration to compute the value of pi doing a few, I don't remember if it was a few million

73
00:08:16,600 --> 00:08:23,680
iterations. I benchmarked and saw how that program run, if it was running in Python,

74
00:08:23,680 --> 00:08:29,200
and how fast it was when converting this same code in Python to C, and then using a

75
00:08:29,200 --> 00:08:33,400
compiler to produce WebAssembly and to produce native code.

76
00:08:33,400 --> 00:08:40,400
In the case of Python compared to the native code running on an x86 computer, the Python

77
00:08:41,480 --> 00:08:48,480
code was 80 times slower, or the native code was 80 times faster, if you want to see it

78
00:08:48,480 --> 00:08:55,480
more clearly, than the corresponding Python code. Then, once again, I translated that

79
00:08:55,800 --> 00:09:02,800
C code into WebAssembly and ran the same benchmark. It was 40 times faster than Python. We do

80
00:09:04,680 --> 00:09:10,680
have that this technology is fast, but it tries to be as fast as native code, but currently

81
00:09:10,680 --> 00:09:15,600
it's not really as fast. More or less, what I was able to see is that was about twice

82
00:09:15,600 --> 00:09:22,160
as fast as native code, but very, very much faster than Python. I didn't measure this

83
00:09:22,160 --> 00:09:27,480
program with other languages like JavaScript, but probably wouldn't see, I guess, not too

84
00:09:27,480 --> 00:09:34,480
much of a difference of what Python actually takes in a matter of time.

85
00:09:34,520 --> 00:09:40,840
And lastly, and this is also something very important, it is an open standard. So here,

86
00:09:40,920 --> 00:09:48,040
the browser vendors are able to actually implement their own versions and any other people that

87
00:09:48,040 --> 00:09:54,440
want to have their own implementation of WebAssembly. They can just go and implement the specifications.

88
00:09:54,440 --> 00:09:59,960
They don't need to pay any royalties. So it really makes it a very convenient technology

89
00:09:59,960 --> 00:10:06,720
because there's no main company who owns this technology. Several companies actually are

90
00:10:06,720 --> 00:10:12,000
involved in the design of the technology, but in general, the standard is open, so this

91
00:10:12,000 --> 00:10:19,000
is very good news. So in 2019, what happened? Well, the World Wide Web Consortium, the W3C,

92
00:10:20,900 --> 00:10:25,640
it announced that WebAssembly was now the fourth language of the open web, and this

93
00:10:25,640 --> 00:10:32,640
is together with HTML, CSS, and JavaScript. One thing worth noting here is that WebAssembly

94
00:10:33,040 --> 00:10:39,120
is not a substitute of JavaScript. They're actually complementary, okay? So it means

95
00:10:39,120 --> 00:10:43,520
that a lot of the things that are done in the browser are typically going to still be

96
00:10:43,520 --> 00:10:49,960
done using JavaScript, but now we have another option that will allow us to write parts of

97
00:10:49,960 --> 00:10:56,960
our program in some more high-performant language like C or like Rust or many other languages,

98
00:10:57,840 --> 00:11:03,040
and we're going to be able to integrate it with JavaScript or some other language, and

99
00:11:03,040 --> 00:11:08,040
we should be able to actually get programs that still are able to interact with the user,

100
00:11:08,040 --> 00:11:13,440
but in certain parts, they can run actually faster than typical JavaScript code if we're

101
00:11:13,440 --> 00:11:17,080
thinking just in terms of the browser. But once again, the technology is not limited

102
00:11:17,080 --> 00:11:21,800
to the browser, okay? Currently, there are several implementations of the WebAssembly

103
00:11:21,800 --> 00:11:28,720
runtime that are able to run in embedded devices and in your ordinary laptop and desktop

104
00:11:28,720 --> 00:11:35,360
computers, okay? So we're going to have the chance to actually see these use cases in

105
00:11:35,360 --> 00:11:42,360
Python when it runs on the browser and when it runs on our computer, in a more generic

106
00:11:42,760 --> 00:11:49,760
computer, okay? So it's worth noting that there are some few disadvantages at the current

107
00:11:49,960 --> 00:11:54,680
technology, how it is currently at this moment. First of all, as I mentioned a moment ago,

108
00:11:54,680 --> 00:12:01,080
it really only has support for numeric types, okay? It supports integers, it supports floating

109
00:12:01,080 --> 00:12:06,920
point numbers, okay? But anything else is a little bit more elaborate, okay? You do

110
00:12:06,920 --> 00:12:11,000
or you are able to actually accumulate and have support for other data types like objects

111
00:12:11,000 --> 00:12:15,800
and strings and arrays and so on, okay? But it doesn't come directly supported by the

112
00:12:16,280 --> 00:12:22,280
technology itself. You have to do some additional tweaks to actually get this running, okay?

113
00:12:22,280 --> 00:12:26,640
But once again, this is because WebAssembly in this first version is actually designed

114
00:12:26,640 --> 00:12:33,640
just to focus on computations, on numerical computations, okay? Another thing that is

115
00:12:34,840 --> 00:12:39,920
a limitation is that it does not have garbage collection. Most modern languages actually

116
00:12:39,920 --> 00:12:45,040
rely on garbage collection to manage their memory. That's the case of Python. But most

117
00:12:45,040 --> 00:12:52,040
languages that have appeared in the past few years include languages like Go, traditionally

118
00:12:53,160 --> 00:12:56,880
interpreted languages like Ruby and JavaScript, all of them depend on garbage collection,

119
00:12:56,880 --> 00:13:03,880
okay? So the few exceptions to this are languages like C, C++ and Rust. So most languages will

120
00:13:04,640 --> 00:13:10,480
find this as a limitation. So the work around currently is to actually add the garbage collection

121
00:13:10,480 --> 00:13:17,480
as an additional supported sort of module to your code, which of course takes a little

122
00:13:17,560 --> 00:13:23,320
bit of time. And hopefully next version probably of WebAssembly might actually have garbage

123
00:13:23,320 --> 00:13:27,680
collection. So we'll have to see in the next few months if that's actually incorporated.

124
00:13:27,680 --> 00:13:33,320
But this is something they do have planned to do, okay? But at the very moment, at least

125
00:13:33,320 --> 00:13:40,320
how most browsers implemented, they do not have this support, not yet at least. And things

126
00:13:40,720 --> 00:13:43,800
like that. So thinking of this as being as a Web technology, one of the main limitations

127
00:13:43,800 --> 00:13:49,040
also is that there's no direct access to the document object model. Remember the DOM is

128
00:13:49,040 --> 00:13:54,720
this data structure in memory that represents the HTML structure of a Web page. Okay, you're

129
00:13:54,720 --> 00:14:01,840
not allowed directly at least to modify your DOM tree from WebAssembly. You need to do

130
00:14:01,840 --> 00:14:09,600
it through some other language like JavaScript, okay? Once again, this might actually get

131
00:14:09,600 --> 00:14:13,400
changed in the future. It might actually be different. But at this moment, you still

132
00:14:13,400 --> 00:14:18,120
need to interact with the hosting platform to actually do that, okay? And typically that

133
00:14:18,120 --> 00:14:25,120
means calling code written in some other language. So what languages, what tools are currently

134
00:14:27,000 --> 00:14:32,520
available? These are probably the most popular ones, but there are many, many others and

135
00:14:32,520 --> 00:14:38,360
many others are being designed at this moment, okay? So one of the most popular ones is this

136
00:14:38,360 --> 00:14:45,360
compiler called M-scripten. This runs over the LLVM tool set or tool chain. This one

137
00:14:46,800 --> 00:14:53,360
was designed actually to work with mainly initially with C and C++, okay? But actually

138
00:14:53,360 --> 00:15:00,040
does support some other languages that actually are able to be integrated with LLVM. So this

139
00:15:00,040 --> 00:15:05,120
is a very popular technology and has been used to actually port a lot of already written

140
00:15:05,120 --> 00:15:11,400
in C code to WebAssembly, okay? Actually we're going to see in a moment this Piodi technology

141
00:15:11,400 --> 00:15:17,680
is actually a port of CPython compiled using M-scripten so that it can be executed in a

142
00:15:17,680 --> 00:15:23,680
web browser, okay? So this is a very central technology for us people that work with Python.

143
00:15:23,680 --> 00:15:30,680
Rust, this is a relatively new language. It has a really interesting concept around shared

144
00:15:30,680 --> 00:15:37,680
memory and it's considered much, much more safer than C and C++ to run really performant

145
00:15:38,960 --> 00:15:44,760
code. So this is really interesting technology. If you haven't seen it or used it, probably

146
00:15:44,760 --> 00:15:51,760
it's worth to check out. And a lot of what is done currently in WebAssembly is done through

147
00:15:51,760 --> 00:15:57,720
Rust. Another technology that I've seen that has been becoming fairly popular is this thing

148
00:15:57,720 --> 00:16:01,920
called Blazor from Microsoft. This allows you to use C sharp to actually produce your

149
00:16:01,920 --> 00:16:07,280
WebAssembly modules. And there's this new language called AssemblyScript which is basically a

150
00:16:07,280 --> 00:16:14,280
subset of TypeScript which is a variation or extension of JavaScript which is targeted

151
00:16:15,160 --> 00:16:20,680
exclusively to run or to produce code for WebAssembly. So this is an interesting alternative

152
00:16:20,680 --> 00:16:24,520
if you want to run, if you need to learn a language and you want to use a language that

153
00:16:24,520 --> 00:16:31,520
is really designed to produce adequate code for WebAssembly, AssemblyScript is the way

154
00:16:31,520 --> 00:16:38,520
to go. And it's worth mentioning there's this other technology. We're not going to go too

155
00:16:38,720 --> 00:16:44,880
much into discussing it. Just I want you to know that it exists. It's called Wazzy and

156
00:16:44,880 --> 00:16:50,040
this probably is going to be very relevant in the future. Wazzy is a WebAssembly system

157
00:16:50,120 --> 00:16:55,040
interface. This is an independent technology from WebAssembly but it works with WebAssembly.

158
00:16:55,040 --> 00:17:01,360
I mean, it's totally linked or bound to this technology. But it is considered a separate

159
00:17:01,360 --> 00:17:06,240
project and it's currently being developed. And basically what Wazzy is, is it allows

160
00:17:06,240 --> 00:17:11,520
to run WebAssembly outside the browser. That's probably the most interesting thing. It could

161
00:17:11,520 --> 00:17:16,880
happen. It's not the current state now but in the future we might actually be producing

162
00:17:17,440 --> 00:17:24,440
WebAssembly plus Wazzy modules written originally in some compiler, a compiled language like

163
00:17:24,560 --> 00:17:30,240
C++ or like Rust or whatever. And we would have a portable executable that could run

164
00:17:30,240 --> 00:17:36,120
without any modifications or without having to recompile it in other platforms. So this

165
00:17:36,120 --> 00:17:41,400
sounds like a really convenient technology and we have to keep an eye on it. Okay? It's

166
00:17:41,800 --> 00:17:46,880
basically a standardized API for WebAssembly modules that allows them to access system

167
00:17:46,880 --> 00:17:52,000
resources. Currently, you're not allowed to access from WebAssembly directly things like

168
00:17:52,000 --> 00:17:57,160
the file system or networking or any kind of interesting packages that we typically

169
00:17:57,160 --> 00:18:03,320
use. But hopefully with Wazzy we will be able to do this in a very portable fashion. Okay?

170
00:18:03,320 --> 00:18:10,320
So this is something that is once again worth keeping an eye on. Okay? So, Wazzy is a very

171
00:18:12,360 --> 00:18:18,640
good developer. Let's go to our tutorial notes. Okay? Just a quick reminder especially for

172
00:18:18,640 --> 00:18:25,640
the people who arrived a little bit late. This is the URL for our tutorial notes. Okay?

173
00:18:29,440 --> 00:18:36,440
Once again this URL I sent it through the message board in the corresponding PyCon interface

174
00:18:36,440 --> 00:18:43,440
in the Web or in the Web site that we have available for all of us. And let's go and

175
00:18:46,040 --> 00:18:53,040
see what we have here. Excuse me. Okay. So here are the notes. Let's make this significantly

176
00:18:54,560 --> 00:19:01,560
larger. Okay. So the slides that you saw are available from this link. Okay? So if you

177
00:19:01,840 --> 00:19:07,360
want to check them again, they're available there. Okay? This introduction is the same

178
00:19:07,360 --> 00:19:12,080
description that you had when you enrolled to this tutorial. So I'm not going to spend

179
00:19:12,080 --> 00:19:18,240
any time with that. You've already read it. Okay. So what we're going to do here is use

180
00:19:18,240 --> 00:19:25,240
this site called GitPod. Okay? And once again if you remember I sent you, I think it was

181
00:19:26,240 --> 00:19:31,920
a couple of days ago, just a message saying that you needed just to make sure that you

182
00:19:31,920 --> 00:19:38,280
had an account in GitHub. Okay? GitHub and GitPod are two different services. They work

183
00:19:38,280 --> 00:19:43,800
together. Okay? But they're two different sites. Okay? So just have in mind that although

184
00:19:43,800 --> 00:19:48,960
they work together they are not the same thing. Okay? So if you don't have a GitHub account

185
00:19:48,960 --> 00:19:53,320
just make sure to create one before you proceed. And the only thing that you need to do for

186
00:19:53,360 --> 00:20:00,360
this tutorial is follow this link here. This will open a new window or a new tab. And if

187
00:20:01,680 --> 00:20:08,680
everything is working fine we should have a clone of my GitHub repository which has

188
00:20:09,000 --> 00:20:13,120
all the software that we're going to be using now. Okay? You're probably going to see this

189
00:20:13,120 --> 00:20:20,120
in a light color. Okay? And probably make sense to make this larger. Okay. So this is

190
00:20:23,320 --> 00:20:27,960
the theme. Okay. So well there's some settings that you can change here. Probably you might

191
00:20:27,960 --> 00:20:33,880
need to change, if you don't like the original light color you can change it to a darker

192
00:20:33,880 --> 00:20:39,840
color. Okay? So just go here where the cog is at the bottom and there's an option that

193
00:20:39,840 --> 00:20:46,840
says here settings. Okay? And for the color of the theme just type theme here, up here,

194
00:20:46,840 --> 00:20:53,840
theme t-h-e-m-e. And probably you're looking at this site with something like, I think

195
00:21:01,680 --> 00:21:08,680
the default is default light, something like this. Okay? So if you don't like it change

196
00:21:09,000 --> 00:21:16,000
it to whatever it is. What you see here is actually a web version of Visual Studio Code.

197
00:21:16,000 --> 00:21:20,640
Okay? So if you use Visual Studio, this should, Visual Studio Code, this should be practically

198
00:21:20,640 --> 00:21:25,840
the same experience. Most of the functionality in Visual Studio Code in the desktop is here.

199
00:21:25,840 --> 00:21:30,520
You probably have a message saying that if you want to run Visual Studio Code from the

200
00:21:30,520 --> 00:21:36,480
desktop just close that window there. Okay? We're not going to be using the desktop version.

201
00:21:36,480 --> 00:21:41,920
We're going to be using the web version. Okay? Because that is running a virtual machine

202
00:21:41,920 --> 00:21:47,880
that actually makes sense for what we're going to be doing here. Okay? So let me make this

203
00:21:47,880 --> 00:21:54,880
a little bit larger. Can everybody see here the words that we have over here? Is that

204
00:21:54,960 --> 00:22:01,280
okay? Yeah? Okay. Thank you. So I know that the default sizes might be very, very tiny.

205
00:22:01,280 --> 00:22:08,280
And if you want to change your font size, okay, just type over here in the settings.

206
00:22:08,480 --> 00:22:15,480
We're still there. Just type font. And somewhere you should see the size of the font. Here

207
00:22:15,920 --> 00:22:20,600
it is. It says editor font size. I'm currently using 18, but I actually made it a little

208
00:22:20,600 --> 00:22:24,880
bit larger so that you can see it here. I think by default it's 12, but you can change

209
00:22:24,880 --> 00:22:29,360
it to something that makes much more sense to you. Okay? Once again, put it according

210
00:22:29,360 --> 00:22:36,360
to your personal preferences. Okay? So let me go back to the themes. I usually like a

211
00:22:37,080 --> 00:22:41,680
theme that is called Dracula. It seems to be very popular. This is not installed by

212
00:22:41,680 --> 00:22:46,040
default, so if you want to install it, go to this icon here in the left-hand side that

213
00:22:46,040 --> 00:22:51,160
says extensions. Okay? And just type here. If you know the name of your favorite, your

214
00:22:51,160 --> 00:22:58,160
preferred theme, just type it there. Okay? I particularly like this one called sweet

215
00:22:58,400 --> 00:23:01,960
Dracula. Okay? And I already have it installed, but if you don't have it installed, you should

216
00:23:01,960 --> 00:23:05,880
have a button like this that says install. So just put it there and you should be able

217
00:23:05,880 --> 00:23:12,880
to install it and start using it. Okay? So I'm going to request it to change it to RDracula.

218
00:23:17,120 --> 00:23:24,120
Dracula soft. Sweet Dracula, this is the one that I like. Okay? For some reason, most developers

219
00:23:28,640 --> 00:23:35,640
actually prefer dark themes. Okay? I'm going to go back to the theme. Okay? I'm going to

220
00:23:35,880 --> 00:23:38,960
go back to the theme. The problem is that if you use a light theme, many people say,

221
00:23:38,960 --> 00:23:43,840
how do people know that I'm a hacker if I'm using a light theme? Okay? So they prefer

222
00:23:43,840 --> 00:23:50,680
to use a dark because that's how it appears always in the movies. Okay? So let's take

223
00:23:50,680 --> 00:23:55,240
some space here. And well, here's some information if you want to see how to use here. This is

224
00:23:55,240 --> 00:24:02,240
the Gitpod workspace. Okay? So just a quick mention here. Whenever you go back to the

225
00:24:02,240 --> 00:24:09,240
Gitpod IO URL, this is the main site for Gitpod, it will take you to the dashboard.

226
00:24:10,320 --> 00:24:14,200
Okay? So if at any moment you need to go to the dashboard, probably the easiest thing

227
00:24:14,200 --> 00:24:21,200
is just to put in your address bar, Gitpod. IO. Okay? And it will take you here to your

228
00:24:23,880 --> 00:24:30,880
workspaces. Okay? As many as you have. Okay? And we'll probably go there and we'll probably

229
00:24:32,240 --> 00:24:36,400
be there several times in a moment. Okay? We're going to be using the terminal a lot.

230
00:24:36,400 --> 00:24:42,800
Okay? So I hope you don't get frightened by using the terminal. So depending on what kind

231
00:24:42,800 --> 00:24:48,240
of system you're using, if you're using Windows, Linux, Chromebook, whatever, with Control-J

232
00:24:48,240 --> 00:24:53,080
you should be able to open a terminal. If you're using Mac OS, Command-J should actually

233
00:24:53,080 --> 00:24:59,600
open it. Okay? So let's go back to the workspace. Okay? I currently have it open here, but I

234
00:24:59,600 --> 00:25:05,160
think you probably don't. Okay? So if you currently are not looking at the terminal,

235
00:25:05,160 --> 00:25:11,680
the terminal is usually a window that is in the bottom part of your browser here. So just

236
00:25:11,680 --> 00:25:17,840
type Control-J or Command-J and it opens the terminal. Okay? At any moment you can close

237
00:25:17,840 --> 00:25:23,480
it and using here the little x or you can once again type Control-J or Command-J and

238
00:25:23,480 --> 00:25:27,960
it will close it if it's open and open if it's closed. Okay? So it toggles the terminal

239
00:25:28,360 --> 00:25:35,360
very easily. Okay? Something that is very important, please make sure that you get this.

240
00:25:36,440 --> 00:25:42,200
We need to set some environment variables. Okay? So for simplicity I put it here in this

241
00:25:42,200 --> 00:25:48,680
file that's called PyCon 2022. So just type at the terminal source PyCon. You need to

242
00:25:48,680 --> 00:25:55,680
do this every time you open a new terminal. Okay? So just type source PyCon 2022. Okay?

243
00:25:56,680 --> 00:26:02,120
And you'll see this little message saying PyCon USA 2022 tutorial and the name of the

244
00:26:02,120 --> 00:26:09,120
tutorial and the prompt here appears with the name that you have probably in GitHub.

245
00:26:09,840 --> 00:26:14,920
And it tells us the current working directory in our system. Okay? And here is just an ordinary

246
00:26:14,920 --> 00:26:20,920
bash terminal. It's running here Linux. This is a virtual machine running in the Git pod

247
00:26:20,960 --> 00:26:27,480
servers. Okay? And it's really nice. I really hadn't used this tool before. I've used other

248
00:26:27,480 --> 00:26:32,040
integrated development environments. In particular I'm a very fond user of Cloud9 which used

249
00:26:32,040 --> 00:26:38,160
to be an independent project but it was bought by AWS a few years ago. And basically you

250
00:26:38,160 --> 00:26:42,520
have a full integrated development environment. You've got a narrative. You've got your terminal.

251
00:26:42,520 --> 00:26:48,640
And it's really nice. And as a teacher, as an instructor, I really like this because

252
00:26:48,680 --> 00:26:53,800
I get all my students working exactly in the same environment. Okay? In the past, for example,

253
00:26:53,800 --> 00:27:00,280
whenever I taught web design, I had some issues because the people that were using Windows

254
00:27:00,280 --> 00:27:03,880
didn't exactly work the same as the people who were using Mac or the people who were

255
00:27:03,880 --> 00:27:07,960
using Linux. They usually weren't a lot but there were sometimes some people that were

256
00:27:07,960 --> 00:27:13,840
using that system. So having everything in the Cloud is a really convenient way of everybody

257
00:27:13,840 --> 00:27:17,800
working the same way. Okay? So that's the same reason why I'm requesting you to use

258
00:27:17,800 --> 00:27:23,320
it here. We now have all the software that we need for the tutorial is here. We got

259
00:27:23,320 --> 00:27:28,720
several important tools here. We got Python, the most recent version of Python available.

260
00:27:28,720 --> 00:27:34,560
You can try it out. Just type here, Python. Remember, type this after what I explained

261
00:27:34,560 --> 00:27:40,240
a moment ago. Always, you always, whenever you open a terminal, make sure that you've

262
00:27:41,240 --> 00:27:48,240
actually executed this command source, PyCon 2022. Okay? And you should see this, okay?

263
00:27:50,120 --> 00:27:55,040
This little title. And if you now type Python, okay, you should see that we're using Python

264
00:27:55,040 --> 00:28:00,400
3.10.4, okay? Until I think yesterday, this was the most recent version of Python. I'll

265
00:28:00,400 --> 00:28:07,360
see Python. Okay? And once again, this is Python running on the Cloud, okay? On a server

266
00:28:07,360 --> 00:28:12,440
that's running on the Cloud at courtesy of this company called GitPo. Okay? To exit,

267
00:28:12,440 --> 00:28:16,520
just type Control D, okay? This is Control D independent of what platform you're at,

268
00:28:16,520 --> 00:28:23,360
okay? It's Control and D, okay? Not command if you're using Mac OS. It's Control, okay?

269
00:28:23,360 --> 00:28:27,880
And apart from the most recent version of Python, we also have here some tools from

270
00:28:27,880 --> 00:28:34,880
a suite called WebVet. Do you have a question? No? Okay. Okay. There's a package or a suite

271
00:28:35,880 --> 00:28:40,840
of applications called WebVet. Okay, we're going to use one of those tools in a moment.

272
00:28:40,840 --> 00:28:45,800
They allow us to do several interesting things with WebAssembly from the terminal. And we

273
00:28:45,800 --> 00:28:50,600
have Wasm 3, which is an interpreter of WebAssembly, which we're going to use in a moment. And

274
00:28:50,600 --> 00:28:57,600
we also have Wasm for Python installed, okay? So all these things work. They have been tested

275
00:28:57,880 --> 00:29:03,000
and it doesn't matter what system you're using locally. Because we're running all this in

276
00:29:03,000 --> 00:29:08,560
a virtual machine, this should work without any issues, okay? Hopefully. Okay, so just

277
00:29:08,560 --> 00:29:15,560
a few words about GitPod FreePlan. Okay? Once you've opened and cloned our repository, GitPod

278
00:29:20,720 --> 00:29:26,280
enrolls you or subscribes you to a free plan that is called open source. You get something

279
00:29:26,280 --> 00:29:32,480
that is called some GitPod hours. By default, you actually get 50 in this free plan, which

280
00:29:32,480 --> 00:29:39,480
is called open source plan. One GitPod hour is basically the opportunity to work in your

281
00:29:40,680 --> 00:29:46,280
workspace for one hour, okay? So if it gives you 50 GitPod hours, you can use it for 50

282
00:29:46,280 --> 00:29:52,240
hours per month, okay? So that's a fairly decent amount. You can open simultaneously

283
00:29:52,240 --> 00:29:58,200
several work spaces, but each workspace is consuming independently. So for example, if

284
00:29:58,200 --> 00:30:03,000
you open two parallel work spaces for one hour, it actually counts you for two hours,

285
00:30:03,000 --> 00:30:08,760
okay? So just have that in mind, okay? Whenever you want to finish your workspace, there is

286
00:30:08,760 --> 00:30:13,200
an option there. Please don't exit at this moment. I just want to show you where to exit,

287
00:30:13,200 --> 00:30:18,840
but don't do it at this very moment. There's a button here that says GitPod, okay, in the

288
00:30:18,840 --> 00:30:25,840
bottom left corner, okay? And you get a menu here and there's this option called stop workspace,

289
00:30:25,920 --> 00:30:32,760
okay? So that's a way of stopping it at this very moment, okay? If you don't stop it, but

290
00:30:32,760 --> 00:30:37,120
for example, let's say you just close your laptop and you go somewhere, 30 minutes of

291
00:30:37,120 --> 00:30:43,080
inactivity will also stop your workspace, okay? So, I mean, if you really wanted to

292
00:30:43,080 --> 00:30:48,160
stop right now, just select that option. Otherwise, whenever you stop using it 30 minutes afterwards,

293
00:30:48,160 --> 00:30:53,760
you actually get disconnected, okay? So it doesn't matter if you don't necessarily stop

294
00:30:53,840 --> 00:31:00,840
it by hand, okay? Another thing which is worth mentioning right now, okay, once again, go

295
00:31:01,720 --> 00:31:08,720
to the dashboard here and once again you can go with typing gitpod.io at any new tab or

296
00:31:10,280 --> 00:31:16,080
window that you have there open. You should see only one of this, I mean, the workspace

297
00:31:16,080 --> 00:31:23,080
that you just created now, which is this one that is in green, okay? You need or it's recommended

298
00:31:23,160 --> 00:31:29,360
that you go here where there are three dots, then you select this option called pin, okay?

299
00:31:29,360 --> 00:31:36,360
Pin actually pins the workspace into your, well, your dashboard, okay? If you do not

300
00:31:38,200 --> 00:31:45,200
pin it, 14 days after you last use it, it will automatically get deleted, okay? So if

301
00:31:46,840 --> 00:31:51,160
you don't mind it to get deleted, you can leave it without the pin, but if you want

302
00:31:51,320 --> 00:31:56,240
to pin it, this actually guarantees that it will still be there hopefully after two weeks,

303
00:31:56,240 --> 00:32:01,760
okay? So just have that in mind once again because otherwise you might expect things

304
00:32:01,760 --> 00:32:05,800
to be there and then come back and see that they're not, okay? So any un-pinned workspaces

305
00:32:05,800 --> 00:32:11,560
get deleted after two weeks. So I think that's all you need to know. And of course, if you,

306
00:32:11,560 --> 00:32:17,480
well, another thing that we're over here, if you go to the settings option here, the

307
00:32:17,480 --> 00:32:23,720
settings tab, and you go to plans, okay, there are several things that you can check here.

308
00:32:23,720 --> 00:32:29,000
First of all, there's the plans. I mean, if anybody is interested in using this and doesn't

309
00:32:29,000 --> 00:32:33,920
mind paying, you can see that there are several options here. You should have been enrolled

310
00:32:33,920 --> 00:32:40,040
or subscribed here to the open source one, which gives you 50 hours. But in my case,

311
00:32:40,040 --> 00:32:46,320
I got the personal because I'm an instructor and I have some special benefits from GitHub

312
00:32:46,320 --> 00:32:53,120
and these are extended to Gitpod as well. So I have 100 hours per month given by the

313
00:32:53,120 --> 00:32:57,360
Gitpod company. But you have other options. But the most important part that I wanted

314
00:32:57,360 --> 00:33:01,080
you to see is this one here. This tells you how many hours you have remaining in the month,

315
00:33:01,080 --> 00:33:07,200
okay? Once a month has gone, it resets to 50 hours again, okay? So if you want to keep

316
00:33:07,200 --> 00:33:11,660
on using it, just have that in mind, okay? But once again, if you just wanted to do this

317
00:33:11,660 --> 00:33:15,400
during the tutorial and then forget about everything, probably the three hours that

318
00:33:15,400 --> 00:33:19,800
we're going to be here is enough time for you to actually learn what we're going to

319
00:33:19,800 --> 00:33:30,800
present here. So, well, let's go to our section number three, which is this technology called

320
00:33:30,800 --> 00:33:38,520
Piodite. As I mentioned before, Piodite actually was developed using, was produced using the

321
00:33:39,520 --> 00:33:45,120
M script and toolchain and its support of CPython, okay? So this is the most common

322
00:33:45,120 --> 00:33:51,640
implementation of Python and M script and actually got, received all the source code

323
00:33:51,640 --> 00:33:56,960
written in C and it produced WebAssembly and this allows us to run, as we've explained

324
00:33:56,960 --> 00:34:05,880
before, to run Python on the browser directly, okay? So as a first example here, let's run

325
00:34:05,880 --> 00:34:12,160
a REPL. Remember the REPL is a read, eval, print, loop, okay? So just click it here,

326
00:34:12,160 --> 00:34:17,680
it should open a new tab or a new window. Let's make this a little bit larger. And this

327
00:34:17,680 --> 00:34:28,240
is a standard, standard terminal for Python, okay? This is running on the browser, okay?

328
00:34:28,240 --> 00:34:31,680
The Python that we saw a moment ago was running on the Web in some other server, okay? We're

329
00:34:32,680 --> 00:34:37,240
the browser as an interface. But this one is running here locally on our computer now,

330
00:34:37,240 --> 00:34:41,760
okay? Probably the first time you actually load this, it might take a few seconds because

331
00:34:41,760 --> 00:34:49,280
I think somewhere the full module that contains all the WebAssembly code for CPython is somewhere

332
00:34:49,280 --> 00:34:53,800
I think around seven or eight megs, so it might actually take a little bit of while,

333
00:34:53,800 --> 00:34:58,640
a few seconds to actually load, okay? I think currently the, I did some tests on the speed

334
00:34:58,640 --> 00:35:02,280
of the, of the Wi-Fi connections that we have here and they run pretty, pretty fast,

335
00:35:02,280 --> 00:35:07,680
okay? So hopefully we shouldn't have any issues with, with the speed of the, of the Wi-Fi

336
00:35:07,680 --> 00:35:13,120
connection, okay? But here you can put whatever you like. For example, let's say that we put

337
00:35:13,120 --> 00:35:24,120
here a list comprehension to produce the, the first 11 powers of two, okay? So, I mean,

338
00:35:25,120 --> 00:35:32,120
standard, standard code. And an interesting thing here is that they also ported here some

339
00:35:33,640 --> 00:35:39,320
of the standard or, well, not, not necessarily standard but typical libraries used by the

340
00:35:39,320 --> 00:35:46,320
people from data science. So we can import here NumPy, okay? Once again, the first time

341
00:35:46,320 --> 00:35:53,320
you actually bring it might be a little bit, take a little bit of time because sometimes

342
00:35:55,600 --> 00:36:00,800
it needs to download and, and convert this to, to the internal representation that it

343
00:36:00,800 --> 00:36:07,800
requires. And I mean, you can do things as usual here, okay? And P dot, let's say, create

344
00:36:07,880 --> 00:36:14,880
a vector of zeros, okay? And do whatever operation you want, okay? So as you can see, this, all

345
00:36:15,880 --> 00:36:20,760
this is running in the browser, okay? It's running locally in your browser. And actually

346
00:36:20,760 --> 00:36:25,240
this works the same in a tablet or in a cell phone, okay? Really interesting because once

347
00:36:25,240 --> 00:36:31,240
again it's running locally in your browser. So this is a really demonstration, really

348
00:36:31,240 --> 00:36:36,240
cool demonstration of what WebAssembly can actually give you, okay? So this is, this

349
00:36:36,240 --> 00:36:41,640
is something to have in mind. But once again, I mean, this might seem just like a curiosity.

350
00:36:41,800 --> 00:36:47,840
How do we really implement this in, in the context of, of a client that actually wants

351
00:36:47,840 --> 00:36:54,840
to use some, some Python code instead of JavaScript? Or additionally, because once again, in order

352
00:36:55,240 --> 00:37:00,480
to run this, we will need to, to add some JavaScript code, okay? So this is a Python

353
00:37:00,480 --> 00:37:07,480
code. Here we're in section 3.1, okay? So these are, these are very simple examples

354
00:37:07,680 --> 00:37:13,040
just to demonstrate what we could do. I mean, but this is, this is something that has a

355
00:37:13,040 --> 00:37:19,400
little bit of Python code. It has a list with some, some quotes, some one-liners, okay?

356
00:37:19,400 --> 00:37:24,040
We have a function here called getVersion, which actually gives us the current version

357
00:37:24,040 --> 00:37:30,200
of, of Python, whatever is running in the, in the local system. GetDateAndTime gives

358
00:37:30,200 --> 00:37:37,200
us a time of this very instant, converts it into this ISO, ESO 8601 format. And then

359
00:37:37,920 --> 00:37:44,920
getQuote actually chooses a random sentence here from this list of one-liners, okay? And

360
00:37:47,560 --> 00:37:52,760
we have some, some code here just to, to run it if you want to run it locally. So let's

361
00:37:52,760 --> 00:37:58,120
do that, okay? So we need to change to the pyodite directory. If you're fluent running

362
00:37:58,120 --> 00:38:05,120
in, in, in a Linux terminal, feel free to do it some other way. Let's just look at the,

363
00:38:05,880 --> 00:38:12,880
currently what the terminal looks like, okay? So if you type ls, it will give you a listing

364
00:38:13,240 --> 00:38:18,080
of the current directory, okay? We want to change here to the directory called pyodite.

365
00:38:18,080 --> 00:38:24,640
So you can do it with the command that is explained here. This is a change directory

366
00:38:24,640 --> 00:38:30,160
with a full absolute path, okay? But you can do it also changing with a local directory,

367
00:38:30,160 --> 00:38:37,160
with a relative directory, excuse me. So, so we want to change to py, pyodite here,

368
00:38:38,280 --> 00:38:44,160
okay? This is a standard bash terminal, so if you've ever used it, remember you can use

369
00:38:44,160 --> 00:38:50,480
tab to do quick competitions. You can use up and down hours to go through the history

370
00:38:50,480 --> 00:38:54,200
of your command, so that will allow you to, to go a little bit faster, okay? So if we

371
00:38:54,200 --> 00:39:01,200
list the contents here of our current working directory, okay? We have here a five icon.

372
00:39:03,120 --> 00:39:08,600
We got an index HTML, we've got some Python code dot py. Let's run this some, some Python

373
00:39:08,600 --> 00:39:14,280
code. So the typical way of running this is just putting Python and then the name of your

374
00:39:14,280 --> 00:39:19,160
script, some Python code. And this runs the three functions that we defined a moment ago.

375
00:39:19,160 --> 00:39:24,960
The first one gives us what version of Python we're using. We're using 3.10.4. It gives

376
00:39:24,960 --> 00:39:31,960
us the current date of your, of your system. Here, it's actually, I think it's using here

377
00:39:32,320 --> 00:39:39,320
the UTC. Oh yes, it's, because we're running this on, on, on the web, on, on the cloud,

378
00:39:39,800 --> 00:39:46,800
okay? It uses the hour of the, the time and date of, of our server, of the Gitpod server,

379
00:39:47,120 --> 00:39:51,200
okay? It's not the local computer that we're using. It's the server that we're running

380
00:39:51,200 --> 00:39:55,920
this, this code on, okay? Remember, this is being executed on the cloud, the GitHub, the

381
00:39:55,920 --> 00:40:02,360
Gitpod cloud, excuse me. And here we have a, a random message here, okay? If we run it

382
00:40:02,360 --> 00:40:09,360
again, and again, okay, sometimes you do get some different funny quotes over here, okay?

383
00:40:10,360 --> 00:40:17,360
So, and once again, here the, the hour, the, the date, the, the time, excuse me, the time

384
00:40:17,680 --> 00:40:23,920
specifically here is the servers typically work with a universal coordinated time. So,

385
00:40:23,920 --> 00:40:30,920
so we, we get here a normalized time instead of our local time, okay? So this is the command

386
00:40:32,640 --> 00:40:36,760
to, to run the code that we just used, and this is what you probably, something similar

387
00:40:37,240 --> 00:40:42,520
you get to use, okay? So how do we integrate this with, with a web page, okay? We have

388
00:40:42,520 --> 00:40:48,800
here, the index file actually has what we need to do in order to integrate this with

389
00:40:48,800 --> 00:40:54,720
the Piodide and run our program in the browser, okay? So important things that you need to

390
00:40:54,720 --> 00:41:01,720
do here is that you need to use a script tag over here where you're accessing actually

391
00:41:01,720 --> 00:41:08,720
the, the Piodide code necessary to run all this. This is really just an ordinary web

392
00:41:09,600 --> 00:41:14,840
page that has a few paragraphs with some IDs. We use the IDs to actually update the contents

393
00:41:14,840 --> 00:41:21,840
of, of these paragraph tags, okay? And we need to put some JavaScript here. This is

394
00:41:22,040 --> 00:41:26,320
the, the only JavaScript that we're going to be using during this tutorial. You have

395
00:41:26,480 --> 00:41:33,480
here your, your main function that loads the, the, the Piodide module here. So we're using

396
00:41:33,480 --> 00:41:39,840
some asynchronous code here. And then this part runs Python code of the code that we

397
00:41:39,840 --> 00:41:45,880
saw a moment ago written in ordinary standard Python, okay? So we, we fetch it, we get it

398
00:41:45,880 --> 00:41:52,880
in, in our browser available to, to be ran by the WebAssembly CPython implementation

399
00:41:53,880 --> 00:42:00,880
that we actually obtained with, with this source of the script of, of our Piodide module.

400
00:42:02,760 --> 00:42:09,760
And here we actually go, let's make this a little bit smaller. This part here is the,

401
00:42:13,080 --> 00:42:19,040
the specific code on, on JavaScript that is calling our Python functions, okay? So here

402
00:42:19,040 --> 00:42:24,760
we have, we call the get version. Here we call get date and time. Here we call get,

403
00:42:24,760 --> 00:42:30,920
get quote. And all this actually calls the, the programs that we were, the functions that

404
00:42:30,920 --> 00:42:35,720
we were looking at a moment ago. Okay, let's, let's open it here. If you want to see that,

405
00:42:35,720 --> 00:42:41,640
that code open here, this section, that is the file explorer. And we're at the Piodide

406
00:42:41,640 --> 00:42:48,640
directory now. So if we open some Python code, this is, this file contains here our, our

407
00:42:48,840 --> 00:42:53,160
code that we saw a moment ago in Python. So the, the functions that are getting called

408
00:42:53,160 --> 00:42:58,520
is this one here, the get version, the get date and time, and the get quote. And these

409
00:42:58,520 --> 00:43:05,060
are being called by the JavaScript in the index HTML file, okay? So this is where they

410
00:43:05,060 --> 00:43:10,920
actually get called. Anything in Python can be translated into equivalent JavaScript objects

411
00:43:10,920 --> 00:43:14,640
and the other way around, okay? I'm, I'm keeping things a little bit simpler. This actually

412
00:43:15,040 --> 00:43:20,800
returns get version, get date, get quote. They return strings. And strings in Python

413
00:43:20,800 --> 00:43:25,600
are converted to strings in JavaScript, so this is a really direct translation and no,

414
00:43:25,600 --> 00:43:30,000
no additional things have to be done. And here we just upload the paragraphs. We put

415
00:43:30,000 --> 00:43:36,200
their inner HTML with whatever these three Python functions actually return, okay? So

416
00:43:36,200 --> 00:43:42,200
in order to see this running, you need to type the command that we have just here in

417
00:43:42,200 --> 00:43:48,800
a moment, okay, which is a standard command to run an HTTP server in, in Python, okay?

418
00:43:48,800 --> 00:43:54,280
So just type, type that command. You can just copy paste it. Okay, this runs the module

419
00:43:54,280 --> 00:44:01,280
HTTP server, okay? And you should see in a few moments a, a little alert message over

420
00:44:04,560 --> 00:44:11,560
here and go with the button that says open, open browser, okay? Usually the browser, the

421
00:44:12,200 --> 00:44:17,760
browser is gonna stop it because it's, it's sort of like a pop-up window there. So you

422
00:44:17,760 --> 00:44:22,000
should see in your browser a message saying that, in this case the browser that I'm using,

423
00:44:22,000 --> 00:44:27,160
Firefox prevented this site from opening. So just give permissions for this to, to open,

424
00:44:27,160 --> 00:44:34,160
okay? And there's my web page, my index web page where what we have here was actually

425
00:44:34,280 --> 00:44:40,800
produced by Python, okay? So we got Python, the version that is running here. Notice it's

426
00:44:40,800 --> 00:44:45,120
not the same, exact same version that we ran a moment ago because when we ran it at

427
00:44:45,120 --> 00:44:52,120
the terminal it was running the Python interpreter installed in our environment, our, our workspace

428
00:44:56,440 --> 00:45:03,440
provided by Gitpod, okay? Here we do see the local time, okay, 944, and we also get to

429
00:45:04,440 --> 00:45:11,440
see this, okay? The funny one-liner quote, okay? If we refresh it, okay, you'll see an

430
00:45:12,400 --> 00:45:19,400
updated time over here and once again you might see a different funny quote over here,

431
00:45:20,440 --> 00:45:27,440
okay? So has everybody been able to, to run this? Yep, okay. Once again remember to get

432
00:45:27,440 --> 00:45:34,440
the full experience you should really be doing the exercises, okay? Once again, I mean,

433
00:45:36,000 --> 00:45:39,880
anybody can decide if you just want to listen it's okay, okay? But if you really want to

434
00:45:39,880 --> 00:45:46,880
have the experience it's, it's really worth doing these exercises, okay? So this is one

435
00:45:48,320 --> 00:45:53,920
way that this could actually be seen in your, your browser. And just a quick mention here,

436
00:45:53,920 --> 00:45:57,480
now you can use Control C at the terminal. Don't do it, don't do it at this very moment,

437
00:45:57,480 --> 00:46:01,480
but at the terminal where the server is running just type Control C whenever you want to stop

438
00:46:01,480 --> 00:46:05,040
it. Don't stop it yet, okay, because we're still going to use it. If you stopped it already

439
00:46:05,040 --> 00:46:12,040
just run the command again to, to make this get executed, okay? Some typical errors that

440
00:46:12,040 --> 00:46:16,280
people do is that they open a second terminal and they run again the web server and sometimes

441
00:46:16,280 --> 00:46:22,120
you get a message saying that the port is already in use, okay? If that's the case you

442
00:46:22,120 --> 00:46:26,600
probably need to check out all the terminals that you have open and use the, the little

443
00:46:26,600 --> 00:46:32,960
garbage can here to close all those terminals and that will usually, that, that stops any

444
00:46:32,960 --> 00:46:38,080
processes that are running including the web servers, okay? But in the most simple fashion

445
00:46:38,080 --> 00:46:44,240
just type Control C at the terminal and that stops the browser, okay? So it's time for

446
00:46:44,240 --> 00:46:51,240
you to do your first exercise. So we're now in section 3.2, exercise A. And it says here

447
00:46:52,040 --> 00:46:56,960
modify the get date and time function from the Pyrodite's sum Python code, okay? So you

448
00:46:56,960 --> 00:47:01,960
need to open this file if you haven't already. It's the sum Python code dot py, okay? I already

449
00:47:01,960 --> 00:47:08,360
have it open over here. And you need to go to, this is currently in line 27, get date

450
00:47:08,360 --> 00:47:15,360
and time. And you're required here according to the instructions, okay, to modify this

451
00:47:15,560 --> 00:47:22,560
function so that it concatenates to the, the results, okay? Notice that there is a variable

452
00:47:22,560 --> 00:47:29,380
called result. So before you return it here you're required to concatenate it with one

453
00:47:29,380 --> 00:47:36,380
of these two strings, okay? So if today happens to be your birthday, okay, it should say happy

454
00:47:36,600 --> 00:47:41,720
birthday to me, okay? And if it's not your birthday it should have the string concatenated.

455
00:47:41,720 --> 00:47:48,720
This is a very merry un-birthday to me, okay? So you just need to put an if there somewhere,

456
00:47:49,640 --> 00:47:56,640
okay? I'll leave that to you to check it out where that would go. And first test it out.

457
00:47:58,160 --> 00:48:05,160
And once again here you can open a new terminal here, probably to do the testing. Let's open

458
00:48:06,000 --> 00:48:12,560
it here. There's in this menu over here where you have the three lines. Do you know how

459
00:48:12,560 --> 00:48:13,720
this is called? What's the?

460
00:48:13,720 --> 00:48:14,760
The hamburger menu.

461
00:48:14,760 --> 00:48:18,640
The hamburger menu. Yeah, that's how most people actually call it, okay? I think it's

462
00:48:18,640 --> 00:48:23,480
called something like the collapse menu or something, okay? But here you click it and

463
00:48:23,480 --> 00:48:27,320
in the terminal this allows you to create a new terminal here, okay? So let's open a

464
00:48:27,320 --> 00:48:34,320
new terminal. Notice here that I'm currently running two terminals. So as usual make sure

465
00:48:34,480 --> 00:48:41,480
that you, because we opened a new terminal type here source followed by PyCon 2022. Once

466
00:48:47,360 --> 00:48:52,480
again remember it's very important that whenever you open a terminal that you type the source

467
00:48:52,480 --> 00:48:58,800
space PyCon 22 command, okay? And once again you can go from one, the previous terminal

468
00:48:58,800 --> 00:49:04,200
where the web server is running to the new terminal by just clicking here the corresponding

469
00:49:04,200 --> 00:49:11,200
icon for that terminal, okay? So once again let's change to the PyOdi directory. And

470
00:49:11,240 --> 00:49:15,480
once again do whatever change you need to do on this code and first test it locally

471
00:49:15,480 --> 00:49:20,920
here, okay? So run Python and some Python code again. I mean we haven't changed anything

472
00:49:20,920 --> 00:49:25,760
so far so we're going to get the same output that we did. But you need to change this so

473
00:49:25,760 --> 00:49:32,760
make sure that it runs here locally. And once you're sure it runs there go to your window

474
00:49:33,080 --> 00:49:38,680
or to your tab where you have this code already. And once again if the server is still running

475
00:49:38,680 --> 00:49:45,000
you just need to refresh it here, okay? Just press the refresh button or use whatever shortcut

476
00:49:45,000 --> 00:49:52,000
your browser uses to refresh, okay? And you should see now the new output, okay? So something

477
00:49:52,040 --> 00:49:59,040
needs to happen inside this function, okay? So I'll give you, it's, I think it's easy.

478
00:49:59,360 --> 00:50:05,600
Just a quick tip here so that you don't need to check any documentation. The now variable

479
00:50:05,600 --> 00:50:12,600
actually has today's date, okay? This is the now variable. So that one has two attributes.

480
00:50:14,520 --> 00:50:17,680
One is called day which is the current day and month which is the current month, okay?

481
00:50:17,680 --> 00:50:23,920
So you can use those to hard code, compare it through the hard coded values of your birthday

482
00:50:23,920 --> 00:50:29,160
or whatever that happens to be, okay? And once you've done that and if you've done it

483
00:50:29,160 --> 00:50:36,160
properly you should see the, well, this additional string as part of your result, okay? And if

484
00:50:37,440 --> 00:50:43,080
it's your birthday you should say happy birthday to me and if it's not very happy, a very merry

485
00:50:43,080 --> 00:50:50,080
un-birthday to me, okay? So how many minutes do you think you can do this?

486
00:50:54,720 --> 00:51:01,720
Almost done. Okay, great. So I'll give you five minutes. If anybody has any questions

487
00:51:05,440 --> 00:51:12,440
you can ask me. I could go around answering any questions or solving any issues that you

488
00:51:12,440 --> 00:51:19,440
might have.

489
00:51:23,920 --> 00:51:30,920
Okay, great. Thank you. Can I see the... Yeah, sure.

490
00:51:30,920 --> 00:51:55,920
Okay, let's go back to... Okay, sometimes you need to have a little bit of a

491
00:52:00,920 --> 00:52:06,960
time to think. You need to do a hard refresh in your browser. So typically in many systems

492
00:52:06,960 --> 00:52:13,960
you press... I think it's shift and then press the refresh button and it typically does it,

493
00:52:14,520 --> 00:52:21,520
okay? But you're missing the if to actually ask if it is or not your birthday. So typically

494
00:52:22,400 --> 00:52:29,400
you would put now.day and compare it to whatever day your birthday is and so on, okay? And

495
00:52:29,800 --> 00:52:34,800
then according to that you actually place the correct string at the end of result just

496
00:52:34,800 --> 00:52:41,800
like you did a while ago. Yeah?

497
00:52:41,800 --> 00:52:48,800
That could be an issue, yeah, because as you can see, yes, the code is visible. So,

498
00:52:48,800 --> 00:52:55,800
yeah, you have to be careful with that, okay? And use some other mechanism to store any

499
00:52:55,800 --> 00:53:02,800
other information that might be sensitive. Okay, good point.

500
00:53:09,320 --> 00:53:16,320
Okay, so I think that's it. Thank you.

501
00:53:25,800 --> 00:53:32,800
Anybody else finished? Great. Let's have a look. Okay. Can you see the code? Okay, very...

502
00:53:32,800 --> 00:53:39,800
Okay, sure. Great, excellent.

503
00:53:46,320 --> 00:53:49,320
Okay.

504
00:53:49,320 --> 00:53:52,320
Okay.

505
00:53:52,320 --> 00:53:55,320
Okay.

506
00:53:55,320 --> 00:53:58,320
Okay.

507
00:53:58,840 --> 00:54:05,840
Yeah, if you have hard coded to today's birthday. Okay, yeah, sure. Okay, thank you. Yeah, great.

508
00:54:14,000 --> 00:54:21,000
Anybody else finished or has any questions? Okay, can we see the code? Oh, the code is

509
00:54:21,480 --> 00:54:28,480
over here. Okay, sure. Great. Awesome.

510
00:54:28,480 --> 00:54:35,480
Okay. Yeah, as long as it works. Okay. So it is your birthday today or you're just checking

511
00:54:37,840 --> 00:54:44,840
if it does work. You put today's date. Okay, awesome. Yeah, thanks. Great. Okay. Great.

512
00:54:45,840 --> 00:54:52,840
Excellent. Thank you. Anybody have any questions or any issues? No? It's working? Okay. Yeah,

513
00:55:01,120 --> 00:55:08,120
sure. Thank you. Okay. Awesome. Thank you. Okay, great.

514
00:55:14,840 --> 00:55:17,840
Okay.

515
00:55:17,840 --> 00:55:20,840
Okay.

516
00:55:20,840 --> 00:55:23,840
Okay.

517
00:55:23,840 --> 00:55:26,840
Okay.

518
00:55:26,840 --> 00:55:29,840
Okay.

519
00:55:29,840 --> 00:55:32,840
Okay.

520
00:55:32,840 --> 00:55:35,840
Okay.

521
00:55:35,840 --> 00:55:38,840
Okay.

522
00:55:38,840 --> 00:55:45,840
Okay. So what I've seen so far, the people who showed them the code, the code is working

523
00:55:48,840 --> 00:55:55,840
fine. So thank you very much. Let's go to the next section because there's still a lot

524
00:55:58,600 --> 00:56:03,600
of things to cover. We're going to leave aside what we did a moment ago which is programming

525
00:56:03,600 --> 00:56:10,600
or using Python to program code that is going to be run by the browser. As you can see,

526
00:56:11,400 --> 00:56:18,400
we were able to have our code written in Python, running in an ordinary Python interpreter

527
00:56:21,080 --> 00:56:28,080
locally in our cloud in the server provided by Gitpot. But also we saw that we were able

528
00:56:29,080 --> 00:56:36,080
to use PyLite to run it in the browser. So that gives us some interesting new possibilities.

529
00:56:38,560 --> 00:56:44,560
Let's look at WebAssembly a little bit more in detail. So far we've just been using WebAssembly

530
00:56:44,560 --> 00:56:51,560
without really looking at how it works and how it actually behaves internally. So we're

531
00:56:51,560 --> 00:56:58,560
going to do some exercises here that once again, this is not the typical use case of

532
00:57:01,720 --> 00:57:08,720
WebAssembly but it does give a lot of insight. It's something that really is educational.

533
00:57:09,480 --> 00:57:15,480
Once again remember, WebAssembly is typically produced by some other tool, by a compiler.

534
00:57:15,480 --> 00:57:20,080
But it is possible to write it by hand. And we're going to use this format called WebAssembly

535
00:57:20,080 --> 00:57:27,080
and text format. We're going to distinguish these two formats. When we talk about WASM,

536
00:57:27,640 --> 00:57:31,540
we're talking about the WebAssembly binary format, which is really what the technology

537
00:57:31,540 --> 00:57:37,080
is. But there is a counterpart that is represented textually, which is called WebAssembly text

538
00:57:37,080 --> 00:57:42,960
format. And we usually just call it Watt. So there's WASM, which is binary, there's

539
00:57:42,960 --> 00:57:49,460
Watt, which is textual. And when we actually write it by hand, what we're going to be writing

540
00:57:49,460 --> 00:57:53,860
is Watt. And we need a tool to translate Watt, which is textual, into WASM, which

541
00:57:53,860 --> 00:58:00,240
is in binary form. Just out of curiosity, has anybody programmed any kind of assembly

542
00:58:00,240 --> 00:58:06,300
language before? Oh, several of you have experienced it. Great. I used to teach assembly language

543
00:58:06,300 --> 00:58:13,300
about 20 years ago. X86 assembly language. So compared to those assembly languages of

544
00:58:13,300 --> 00:58:20,300
the past, even when I was in school actually, I think I programmed assembly language for

545
00:58:22,300 --> 00:58:29,300
the 6502 processor. 6502 was the processor that was available for the Apple IIs. I don't

546
00:58:29,300 --> 00:58:35,300
know if you remember those kinds of computers. I mean, I'm talking about the mid-1980s.

547
00:58:35,300 --> 00:58:42,300
Well, WebAssembly in its textual format is similar to that. It's a really low level language.

548
00:58:43,180 --> 00:58:48,580
But we're going to see that it's stack-based. So this requires a little bit of thinking,

549
00:58:48,580 --> 00:58:54,540
a little bit different from most traditional assembly languages that are available for

550
00:58:54,540 --> 00:59:01,540
different real hardware CPUs, which typically are based on registers. Here we're going to

551
00:59:01,860 --> 00:59:05,580
see WebAssembly is stack-based, and we're going to see what that means in a moment.

552
00:59:05,580 --> 00:59:11,940
But first of all, we need to mention that WebAssembly actually works with, in the textual

553
00:59:12,340 --> 00:59:19,340
format, works with S expressions. So this is what an S expression looks like. We're

554
00:59:20,020 --> 00:59:26,340
in section 4.1. So an S expression is something that starts with an opening parenthesis, then

555
00:59:26,340 --> 00:59:33,340
has some symbols or elements there, and then a closing parenthesis. Those symbols or elements

556
00:59:33,380 --> 00:59:40,020
that are nested can be all their S expressions. So this notation was actually first used in

557
00:59:40,020 --> 00:59:47,020
Lisp in the late 1950s. If anyone has used Lisp or any of its variants before, it could

558
00:59:47,420 --> 00:59:51,460
be, I don't know, Scheme, Rackett, Clojure, any of these languages. This is the same notation

559
00:59:51,460 --> 00:59:56,420
that is actually used there. They're called S expressions. If you haven't used it before,

560
00:59:56,420 --> 01:00:03,420
no, don't worry. You'll have a chance to look at or use this notation just briefly.

561
01:00:03,860 --> 01:00:08,540
So well, we're going to be writing our code using S expressions. A quick reminder here,

562
01:00:08,660 --> 01:00:15,180
we mentioned this already. There are only four data types supported in WebAssembly.

563
01:00:15,180 --> 01:00:22,180
So we got an I32, which represents a 32-bit integer. An I64, which is a 64-bit integer,

564
01:00:23,500 --> 01:00:30,500
can be positive or negative numbers. And we also have two versions of floating point numbers,

565
01:00:30,500 --> 01:00:37,500
32-bit float, which is called F32, and F64, which is a 64-bit floating point number. So

566
01:00:37,900 --> 01:00:42,900
these floating point numbers usually are equivalent to floats and doubles in other languages.

567
01:00:42,900 --> 01:00:43,420
Yes?

568
01:00:43,420 --> 01:00:49,860
>>[INAUDIBLE question asked off mic.]

569
01:00:49,860 --> 01:00:55,300
I think they actually decided to use these because that's typically what is supported

570
01:00:55,300 --> 01:01:02,300
in most physical, real hardware CPUs. Okay? I mean, x86 actually supports also the extended

571
01:01:02,300 --> 01:01:09,300
floating point format, which is 80 bits wide. But it's not very common in modern years because,

572
01:01:10,940 --> 01:01:17,620
as I've seen at least, most of the variations of SIMD instructions and so on are typically

573
01:01:17,620 --> 01:01:23,380
used at most 64-bit floats. Okay? So I think it was more of a decision because of what

574
01:01:23,380 --> 01:01:28,900
hardware is currently used and what was easier to translate from WebAssembly to a real hardware

575
01:01:29,380 --> 01:01:36,380
CPU. Okay? And, well, it is a coincidence actually here that F64 is the data type supported

576
01:01:37,500 --> 01:01:43,820
by JavaScript. Okay? But JavaScript, for example, does not support I64. Okay? There's no way

577
01:01:43,820 --> 01:01:50,500
of directly supporting in JavaScript 64-bit integers. Okay? Because in JavaScript, everything

578
01:01:50,500 --> 01:01:57,500
is actually a float. Okay? A 64-bit float in practice. Okay. Let's just, let's just

579
01:01:58,900 --> 01:02:05,900
mention here on our stack, what is a stack machine? Let's start discussing what a stack

580
01:02:06,820 --> 01:02:12,420
is. Okay? A stack is a data structure. Okay? If you've taken a data structure course in

581
01:02:12,420 --> 01:02:18,780
the past, this should probably be very, very familiar. So a stack is just a collection

582
01:02:18,780 --> 01:02:25,660
where all the elements are inserted and removed from the same place. Okay? So if we think

583
01:02:25,660 --> 01:02:31,540
of it as a stock, for example, here in our illustration stack of pancakes, whenever

584
01:02:31,540 --> 01:02:35,140
you want to add a pancake, you put it on the top. Okay? And whenever you want to remove

585
01:02:35,140 --> 01:02:39,660
it, you remove the one that is most at the top. So we say that this data structure works

586
01:02:39,660 --> 01:02:46,660
using a LIFO policy, or you pronounce it LIFO, not really sure. Last in, first out way. Okay?

587
01:02:50,300 --> 01:02:54,220
Sometimes if I pronounce words a little bit strange, just have in mind that my natal or

588
01:02:54,620 --> 01:02:58,860
my native language is Spanish, so many of these words I only see them reading, so sometimes

589
01:02:58,860 --> 01:03:03,420
I don't necessarily know how they're pronounced, I just pronounce them as I imagine. Okay?

590
01:03:03,420 --> 01:03:10,420
But it's not necessarily the correct way. Okay? So this is how the evaluation of all

591
01:03:14,020 --> 01:03:20,220
computations actually takes place in WebAssembly. Okay? So for example, if I want to add two

592
01:03:20,620 --> 01:03:26,060
numbers, let's say that I want to add a 7 and a 5, okay? These are the steps that I

593
01:03:26,060 --> 01:03:33,060
need to do, okay? As mentioned over here. So I want to add 7 plus 5. So what do I do?

594
01:03:34,020 --> 01:03:40,140
I push first the 7 on the stack, then I push the 5 on the stack. Okay? So now we have a

595
01:03:40,140 --> 01:03:46,740
stack if we want to imagine it going from the bottom growing upwards. Okay? We got a

596
01:03:46,740 --> 01:03:52,300
7 and then upwards we got a 5. And then when we do the add, the add actually involves popping

597
01:03:52,300 --> 01:03:57,460
the two elements on the top of the stack. Okay? We pop them, which means we remove them.

598
01:03:57,460 --> 01:04:02,500
We apply the operation, in this case the addition. We get the result and we place the result,

599
01:04:02,500 --> 01:04:07,140
we push it into the stack again. Okay? So this is described here, but we have a better

600
01:04:07,140 --> 01:04:14,140
illustration just down over here. Okay? So this probably is a little bit easier to understand.

601
01:04:14,140 --> 01:04:21,140
So there we go. In step number one we push the 7. Okay? Step number two, we push the

602
01:04:21,940 --> 01:04:26,940
5. So as you can see here, we got the 5 and the 7. Okay? The 5 is the top, the top of

603
01:04:26,940 --> 01:04:31,940
the stack. The 7 is just underneath the top. And then we do a pop here. Now the order of

604
01:04:31,940 --> 01:04:36,500
the pops, I mean, you can only do the pop with whatever is there, okay? But we're doing

605
01:04:36,500 --> 01:04:41,500
two pops. An important thing that you need to understand is that we pop the first element

606
01:04:41,500 --> 01:04:46,540
and this is going to be the second operand in the operation. Okay? I mean, at this point

607
01:04:46,540 --> 01:04:50,220
it really doesn't matter because in the example we're doing addition, but when you do operations

608
01:04:50,220 --> 01:04:54,580
that are not commutative like subtraction and division, the order in which things actually

609
01:04:54,580 --> 01:04:59,860
are carried out is very, very important. Now the easiest thing here to remember is that

610
01:04:59,860 --> 01:05:04,820
if I want, for example, to subtract two numbers, okay, I push the elements in the same order

611
01:05:04,820 --> 01:05:08,820
in which I think that subtraction is going to be taking place. So for example, if instead

612
01:05:08,820 --> 01:05:13,700
of adding 7 plus 5, I want to do 7 minus 5, I still push them in the same order. Okay?

613
01:05:13,700 --> 01:05:19,860
You push the 7, push the 5, and when it pops, even though the second operand is going to

614
01:05:19,860 --> 01:05:24,820
be popped first, okay, it's going to be used in the correct place. Okay? So as you can

615
01:05:24,820 --> 01:05:29,380
see here in the illustration, okay, we pop the first element and this is going to be

616
01:05:29,380 --> 01:05:33,900
the second operand and we pop the one that was in the bottom here and that's going to

617
01:05:34,660 --> 01:05:38,940
be the first operand and then we carry out the operation, 7 plus 5 or whatever operation

618
01:05:38,940 --> 01:05:45,940
it was, and we push the result into the stack, okay, so we get the 12 here. But once again,

619
01:05:46,380 --> 01:05:50,380
the order in which this is done is illustrated here and once again, it usually is the order

620
01:05:50,380 --> 01:05:54,980
in which you think how things are actually carried out, okay? So in whatever order you're

621
01:05:54,980 --> 01:05:58,780
doing the operation, you push them in the same order. When it's popped, it's going to

622
01:05:58,780 --> 01:06:04,420
be popped in the reverse order, but the operation is done exactly as you might imagine, okay?

623
01:06:04,420 --> 01:06:11,420
So this simplifies things. This is the code, the actual code in WebAssembly in text format

624
01:06:11,420 --> 01:06:18,420
in Watt that actually does what we need here, okay? So we're going to use this instruction,

625
01:06:18,740 --> 01:06:25,740
I32 const, okay, and we're pushing a 7, I32 const of 5, this pushes a 5, and I32 at notice

626
01:06:26,580 --> 01:06:33,580
here that we need to prefix the type of data that we're pushing and that we're popping,

627
01:06:33,580 --> 01:06:40,580
okay? So we always need to provide if this is an I32, an I64, or an F32 or an F64, okay?

628
01:06:41,380 --> 01:06:45,500
So typically most of the examples that we're going to see, we're only using always one

629
01:06:45,500 --> 01:06:49,580
single data type, okay? But it is possible to do conversions between the data types,

630
01:06:49,580 --> 01:06:54,180
okay? But at this moment, we're not going to be doing that, okay? But it is possible

631
01:06:54,180 --> 01:06:59,260
if it's required, okay? So let's have a look at a complete example here, okay? There's

632
01:06:59,260 --> 01:07:06,260
in the Watt directory, there is an examples.watt file, okay? So let's open that one. We can

633
01:07:07,140 --> 01:07:13,260
close this now and we can now shut down our server, okay? So open the terminal that currently

634
01:07:13,260 --> 01:07:20,260
has your server and just type control C to abort it, okay? And I don't think we're going

635
01:07:20,660 --> 01:07:26,060
to be using that one again, so we can send it to the garbage. And we currently only have

636
01:07:26,060 --> 01:07:31,220
this other terminal currently here, okay? So we're going to change our directory in

637
01:07:31,220 --> 01:07:38,220
a moment, but let's open here the Watt folder and there's only one file there, examples.watt.

638
01:07:41,980 --> 01:07:47,660
Okay, so this is a complete full example of Watt, of a Watt source file, WebAssembly text

639
01:07:47,660 --> 01:07:54,660
format source file. And here, does, do you get to see it in colors or is everything in

640
01:07:56,460 --> 01:08:03,460
the same color? If it's the same color, if you want to see it in color, just go to the

641
01:08:03,460 --> 01:08:10,460
extensions icon over here and the extension is called WebAssembly, okay? Type WebAssembly

642
01:08:10,580 --> 01:08:14,940
there and it's the very first option here. I currently have it installed and thanks to

643
01:08:14,940 --> 01:08:18,980
that we get to see it in colors here, okay? But probably makes sense that you also get

644
01:08:18,980 --> 01:08:25,980
the support for syntax highlight, okay? We live in an era where we do have syntax highlights,

645
01:08:27,940 --> 01:08:34,940
so we should use it whenever possible. I remember when I was studying my undergrad degree, in

646
01:08:35,860 --> 01:08:40,740
the very first semester I had a classmate that actually, we were programming at that

647
01:08:40,740 --> 01:08:46,020
time, it was Pascal, what we were learning. And we were using Turbo Pascal at that time

648
01:08:46,020 --> 01:08:49,260
and didn't have syntax highlight. I mean, once again, remember, I'm talking about the

649
01:08:49,260 --> 01:08:54,620
mid-1980s, okay? Syntax highlight was at least available in the Borland products like Turbo

650
01:08:54,620 --> 01:09:01,620
C and Turbo Pascal until almost the beginning of the 1990s. But before that, everything

651
01:09:02,180 --> 01:09:06,940
appeared exactly in the editor in one single color, okay? So I remember that he was working

652
01:09:06,940 --> 01:09:13,860
in his final project for CS1 and suddenly everything stopped working. He started getting

653
01:09:13,860 --> 01:09:20,860
a lot of errors and because he actually mistakenly closed or deleted the closing symbol or symbols

654
01:09:22,180 --> 01:09:27,980
that were required for a block comment, okay? And it was very easy to do that. I mean, it's

655
01:09:27,980 --> 01:09:33,220
just the line that he accidentally deleted. But because you don't see the colors, you

656
01:09:33,220 --> 01:09:37,500
always see that it was actually the same, suddenly things stopped working and it took

657
01:09:37,500 --> 01:09:41,580
him about, I don't know, three, four hours to actually see the error and he was really

658
01:09:41,580 --> 01:09:48,580
getting very upset, okay? Until somebody said, oh, you forgot to close this comment. And

659
01:09:51,020 --> 01:09:56,180
once again, it wasn't that he hadn't closed it originally. It was that he accidentally

660
01:09:56,180 --> 01:10:00,620
deleted the symbol that was used to close the block, okay? So once again, this is a

661
01:10:00,660 --> 01:10:07,660
situation that could have been avoided if we had syntax highlight. So this is a program.

662
01:10:08,380 --> 01:10:13,660
Notice here it starts with an opening parenthesis and we have here a module. Everything in Web

663
01:10:13,660 --> 01:10:20,180
Assembly, every program that we write in Web Assembly or that is produced is inside a module,

664
01:10:20,180 --> 01:10:24,540
okay? The module can have several things, okay? I'm really omitting a lot of information,

665
01:10:24,540 --> 01:10:31,540
but Web Assembly modules inside, they can have one big memory object, okay, which can

666
01:10:33,420 --> 01:10:40,420
be used for any kind of information that you want to store as a big array of bytes, okay?

667
01:10:41,380 --> 01:10:46,100
You have tables that allow you to have pointers to functions and so on. These are used for

668
01:10:46,100 --> 01:10:51,460
implementing, for example, pointers to functions in languages like C or virtual functions like

669
01:10:51,540 --> 01:10:56,700
are supported in object-oriented languages like C++. You don't need to use them and

670
01:10:56,700 --> 01:11:01,700
we're not going to use them here, okay, but they are available to provide that functionality.

671
01:11:01,700 --> 01:11:08,700
You can have functions. You can have global variables. You have a question?

672
01:11:08,700 --> 01:11:15,700
Yes? Yeah, exactly. Yes, notice that we're not providing an explicit name of a module

673
01:11:22,020 --> 01:11:26,460
not in the declaration line number one. It is the name of the module is the name of the

674
01:11:26,460 --> 01:11:32,580
file with WASM extension. Remember here it's a WAD extension because we're using the textual

675
01:11:32,580 --> 01:11:39,580
format, okay? So here, because this is probably the most interesting part, we're just defining

676
01:11:39,580 --> 01:11:44,260
one function. Notice here once again it starts with an opening parenthesis here and this

677
01:11:44,260 --> 01:11:49,780
one is closing it. The closing parenthesis that we have here in line 22 is the one that

678
01:11:49,780 --> 01:11:56,780
corresponds to the module, okay? Remember this is the S expression format, okay? So

679
01:11:56,900 --> 01:12:03,900
here we have several, we can call these directives. We have an export. This is the name that is

680
01:12:06,340 --> 01:12:12,340
going to be available for external tools, okay? So any external tool that wants to use

681
01:12:12,340 --> 01:12:19,340
this WASM module once it's converted into WASM will be able to use the name that we

682
01:12:19,460 --> 01:12:24,500
are exporting. If we don't export it, it's private to the module, okay? Actually the

683
01:12:24,500 --> 01:12:30,220
name of the local, locally here in line number 10, I'm using the same name AVG but just notice

684
01:12:30,220 --> 01:12:36,900
that these local names that we use inside our WebAssembly text format code have to start

685
01:12:36,900 --> 01:12:43,740
with a dollar sign, okay? So you can see it here, the name of the function if we wanted

686
01:12:43,740 --> 01:12:47,740
to use it locally. Strictly this part wasn't really required because I never call it from

687
01:12:47,820 --> 01:12:52,860
within this code, within another function here, okay? But if I needed to call it, I

688
01:12:52,860 --> 01:12:57,100
would use this name but it's only available local here, okay? Because I export it here,

689
01:12:57,100 --> 01:13:04,100
this allows other tools to actually call this code whenever it's required. Here we define

690
01:13:04,100 --> 01:13:11,100
the parameters, okay? Notice that we're, I'm using here this, this is actually Python but

691
01:13:11,100 --> 01:13:16,780
using some type annotations, okay? Just to explain what it is. It's saying here A is

692
01:13:16,780 --> 01:13:21,580
a float, B is a float and it returns a float, okay? So this is really what I'm putting over

693
01:13:21,580 --> 01:13:27,980
here. So A and B are F64 data types, variables of this data type, they're parameters, okay?

694
01:13:27,980 --> 01:13:33,300
They're considered inputs. And the output, the output is a, notice here it says result.

695
01:13:33,300 --> 01:13:39,660
We're telling that at the very end of the execution of this function, there should be

696
01:13:39,660 --> 01:13:44,660
in the top of the stack one only item and that item has to be an F64, okay? If there

697
01:13:44,660 --> 01:13:48,940
are more elements, this actually produces a validation error, okay? So we have to be

698
01:13:48,940 --> 01:13:53,620
very careful that if we push elements into the stack, at some point we take them back

699
01:13:53,620 --> 01:13:58,340
and that we only leave, if this function is actually returning a result, we only leave

700
01:13:58,340 --> 01:14:02,460
one result in the top of the stack, okay? The function does not require to return anything

701
01:14:02,460 --> 01:14:07,380
if we want to, okay? That would be an equivalent to a void function in other languages. And

702
01:14:07,380 --> 01:14:11,820
if that's the case, you need to leave the stack empty, okay, without any elements in

703
01:14:11,820 --> 01:14:17,900
the top of the stack, okay? And here is the code, what you see here in this sort of pinkish

704
01:14:17,900 --> 01:14:24,460
color, okay? So you do a local get A, so what does this do? It reads the variable A, the

705
01:14:24,460 --> 01:14:28,900
parameter A, and pushes it into the top of the stack and then we do the same thing with

706
01:14:28,900 --> 01:14:33,860
B. So currently in the stack we have A and B, we have, in the bottom we have B and then

707
01:14:33,860 --> 01:14:40,460
we have the value of A in the top of the stack. We do an F64 add here in line number 17 and

708
01:14:40,540 --> 01:14:46,540
when we do that, we pop two top elements in the top of the stack, from the top of the

709
01:14:46,540 --> 01:14:50,580
stack, we do the operation, in this case the addition, and we place the result in the stack

710
01:14:50,580 --> 01:14:57,580
again, okay? And then in a push operation, okay? And then we push the value two on the

711
01:14:58,140 --> 01:15:02,860
top of the stack and now we do a div, okay? And as I explained, in the order in which

712
01:15:02,860 --> 01:15:06,180
the elements were actually pushed, this is how the division is going to be carried out,

713
01:15:06,300 --> 01:15:12,900
okay? So the division is going to divide the result of the add by two, because those are

714
01:15:12,900 --> 01:15:16,940
the two values in the top of the stack, those are divided and the result is placed on the

715
01:15:16,940 --> 01:15:21,340
top of the stack, okay? And we leave the top of the stack with that value, that's what

716
01:15:21,340 --> 01:15:25,620
is going to be returned, okay? There is a return instruction that you could use if you

717
01:15:25,620 --> 01:15:31,220
wanted, okay? But it's not really required if it's a very last instruction in your function,

718
01:15:31,220 --> 01:15:38,220
okay? Yes? It doesn't have any artificial limitation, okay? I mean everything in life

719
01:15:41,700 --> 01:15:47,380
has a limit, okay? So I can't really say, oh yeah, you can use all your memory in the

720
01:15:47,380 --> 01:15:52,540
stack. But there's no limitation initially, okay? Now remember that this code here, once

721
01:15:52,540 --> 01:15:59,540
it gets translated to WASM, the runtime environment is typically going to do just in time, okay?

722
01:16:01,220 --> 01:16:06,180
Just in time compilation of the WebAssembly so that it gets translated from this WebAssembly

723
01:16:06,180 --> 01:16:12,600
binary format into, once again, this can be done in several ways, but the JIT or Just

724
01:16:12,600 --> 01:16:18,900
in Time compiler takes the code and translate it into native machine code in your platform,

725
01:16:18,900 --> 01:16:25,900
whatever platform is where you're actually running this code. So most of our real hardware

726
01:16:26,460 --> 01:16:31,820
CPUs that we use are typically register based. They're not stack based. So this means that

727
01:16:31,820 --> 01:16:37,060
we'll need to use some registers and some additional memory in case not everything fits.

728
01:16:37,060 --> 01:16:42,020
But in general, all that part is actually sold by the implementer of the runtime system,

729
01:16:42,020 --> 01:16:48,700
okay? So we don't really need to put any limitations. I haven't read anywhere that it says that

730
01:16:48,700 --> 01:16:52,380
there is a limit to how many elements you can put in the stack. But in practice, I've

731
01:16:52,380 --> 01:16:59,380
seen that you usually don't need more than four or five elements in the stack at the

732
01:16:59,380 --> 01:17:06,380
same time. Yeah. Exactly. Yeah, just in case you didn't listen, the observation that he

733
01:17:10,620 --> 01:17:17,620
does is that the specification and the way that the virtual machine works is as a stack

734
01:17:18,500 --> 01:17:25,100
machine, okay? But once this typically gets translated using the Just in Time compiler,

735
01:17:25,100 --> 01:17:29,700
once again, this really depends on how it's implemented by the runtime system, typically

736
01:17:29,700 --> 01:17:36,700
needs to convert this same code into the instruction set of a register computer, okay? For example,

737
01:17:37,140 --> 01:17:43,460
when you run this in your, most of you probably using an x86 based machine. Some of you, if

738
01:17:43,460 --> 01:17:49,380
you're using a recent version of Mac OS, probably you're using M1. So when we actually

739
01:17:49,380 --> 01:17:55,580
loaded Piodite, it translated into the corresponding native instruction set, okay? And most of

740
01:17:55,580 --> 01:18:02,020
the CPUs used in hardware currently are typically register based, okay? But once again, that

741
01:18:02,020 --> 01:18:09,020
translation happens automatically. You don't really need to be aware of it. Yes?

742
01:18:09,020 --> 01:18:16,020
Yeah, you need to just check if there is an implementation of the WebAssembly runtime

743
01:18:27,020 --> 01:18:33,220
system in some fashion, okay? And if that's the case, of course it is able in microcontrollers,

744
01:18:33,220 --> 01:18:40,220
okay? Like Raspberry Pi or...

745
01:18:41,220 --> 01:18:47,620
Yeah, exactly. Yes, WebAssembly, one of the use cases it has is working for devices, small

746
01:18:47,620 --> 01:18:52,620
devices that you use in typical Internet of Things kind of things, kind of stuff, okay?

747
01:18:52,620 --> 01:18:58,220
Yeah. Okay, but once again, you need to check and see if there is that support for that

748
01:18:58,220 --> 01:19:01,980
particular hardware that you're using, okay? But if there is, of course you can use it.

749
01:19:01,980 --> 01:19:02,980
Yes, there was a question over here.

750
01:19:02,980 --> 01:19:11,980
It actually does, if you see, we actually push these two elements. Those got popped

751
01:19:11,980 --> 01:19:18,740
with the add, then we push another element. And the diff does two pops and a single push.

752
01:19:18,740 --> 01:19:22,700
So at the end, if you look at the stack, the stack is going to only have one element. And

753
01:19:22,700 --> 01:19:27,780
it is consistent with this directive that says it should be a 64-bit floating point

754
01:19:27,780 --> 01:19:30,780
in the resulting stack, okay?

755
01:19:30,780 --> 01:19:36,380
It is required. If it's not, you actually get a validation error. Okay, there is before

756
01:19:36,380 --> 01:19:41,180
your code is actually executed, there is a phase called validation. We usually don't

757
01:19:41,180 --> 01:19:45,660
talk a lot about it, but it's part of the security of the system. So one of the things

758
01:19:45,660 --> 01:19:50,980
that it does is it makes sure that the stack is being used in a consistent fashion. So

759
01:19:50,980 --> 01:19:55,900
if you try to do, for example, a pop when there's no elements there, okay, or you finish

760
01:19:55,900 --> 01:19:59,420
your function and you said that this is only going to return one result and you have, for

761
01:19:59,940 --> 01:20:06,940
example, two values in the stack, that actually produces a violation in the validation. Yes?

762
01:20:09,660 --> 01:20:15,260
You get a, I don't remember if they call it a trap. There is some kind of runtime exception

763
01:20:15,260 --> 01:20:19,540
being produced. Okay, one second. You can always check the documentation to see all

764
01:20:19,540 --> 01:20:26,540
those particular issues and I'll show you where it is in a moment, okay? Yes?

765
01:20:29,420 --> 01:20:36,420
Yeah. Yeah. No, there is a stack per every block. A function creates a block, but there

766
01:20:46,260 --> 01:20:50,580
are other instructions. There's one actually called block, but also there are loops and

767
01:20:50,580 --> 01:20:55,980
there's ifs that create blocks and each of those have their individual stack independent

768
01:20:55,980 --> 01:21:02,980
of any other stack that might be there, okay? There is no shared stack among blocks. Yeah,

769
01:21:04,340 --> 01:21:11,340
that's right. Okay, so just to use this, the way that we're going to be using this is as

770
01:21:11,740 --> 01:21:18,740
follows, okay? Let's go here. We need to change to the directory for wet, okay? Once again,

771
01:21:18,740 --> 01:21:25,740
you can use this instruction. We have it here. We're here and it's still in section 4.4,

772
01:21:30,020 --> 01:21:37,020
okay? So you can just copy paste this one. This doesn't really matter in what directory

773
01:21:40,100 --> 01:21:46,260
you are. It will take you to wet. If you know how to navigate within the terminal, you can

774
01:21:46,260 --> 01:21:51,380
just go upwards to this directory and then go down to wet, okay? But whatever way you

775
01:21:51,380 --> 01:21:56,300
do it, it is important that you are in the wet directory, okay? The wet directory, if

776
01:21:56,300 --> 01:22:00,980
we check here the contents, ls, we only have the example wet and this is consistent to

777
01:22:00,980 --> 01:22:07,980
what we see here with the explorer, okay? So the first thing that we need to do is convert

778
01:22:08,620 --> 01:22:15,620
the wet source file into binary WASM, okay? So in order to do that, we have a tool called

779
01:22:19,820 --> 01:22:26,820
wet to WASM. Remember, very important, if the system says that it doesn't find this

780
01:22:28,260 --> 01:22:33,740
particular command is that you did not execute the source PyCon 2022 instruction at the

781
01:22:33,740 --> 01:22:39,540
very beginning when you started, when you opened your terminal, okay? You can just try

782
01:22:39,540 --> 01:22:46,540
it. Just type wet to WASM, okay? And if you see command.find here, it did find it but

783
01:22:47,700 --> 01:22:54,220
didn't do anything, okay? But if you get an error, remember, you need to go back to section

784
01:22:54,220 --> 01:23:01,220
2.2 and remember to execute or open a terminal and execute at wherever the terminal opens.

785
01:23:02,140 --> 01:23:06,300
This command source PyCon 2022, remember, if you don't do that, you won't have access

786
01:23:06,300 --> 01:23:11,740
to any of the commands that we're going to be using at this very moment, okay? So if

787
01:23:11,740 --> 01:23:18,340
everything's fine, we should be able just to type here wet to WASM and we just indicate

788
01:23:18,340 --> 01:23:22,780
here that it's the examples.wet file that we need to translate, okay? You can think

789
01:23:22,780 --> 01:23:28,100
of this being sort of like a compiler. Technically, it's what we would call an assembler because

790
01:23:28,100 --> 01:23:31,660
it's going to translate assembly code and text format into the corresponding binary

791
01:23:31,660 --> 01:23:38,380
code, okay? WebAssembly, the name is a little bit, I wouldn't say confusing, but it goes

792
01:23:38,380 --> 01:23:43,620
a little bit against what typically assembly is. Assembly should always or at least was

793
01:23:43,620 --> 01:23:48,380
always considered to be a text format, okay? But when we talk about WebAssembly and when

794
01:23:48,380 --> 01:23:53,500
we run WebAssembly, we're usually talking about something that is in a binary form,

795
01:23:53,500 --> 01:23:58,940
okay? So this might be a little bit confusing at first, but just have in mind what we're

796
01:23:58,940 --> 01:24:04,780
discussing at every point and hopefully that shouldn't confuse us too much afterwards.

797
01:24:04,780 --> 01:24:10,300
So wet to WASM, translate a wet file, which is what we have into a WASM file. So if we

798
01:24:10,300 --> 01:24:17,020
list the current directory now, we get that now we have the WASM file, okay? If you try

799
01:24:17,020 --> 01:24:20,780
to open it here in the editor, it will tell you this is a binary file, it cannot open

800
01:24:20,780 --> 01:24:27,780
it, okay? So once you have the WASM, you can do something like this. You can run it. We

801
01:24:28,540 --> 01:24:35,540
have a utility called WASM3. And here, this is also explained a little bit downwards over

802
01:24:38,180 --> 01:24:43,860
here. It's WASM3. We need to use this option REPL followed by the name of the WASM file,

803
01:24:43,860 --> 01:24:49,860
okay? The REPL opens a read eval print loop, so it's an interactive prompt here that we're

804
01:24:49,860 --> 01:24:55,260
going to be able to use to test our code. So we just put it there. It's double, double

805
01:24:55,260 --> 01:25:01,660
dash REPL. And the file is called examples that. It's the WASM file that we want to run

806
01:25:01,660 --> 01:25:06,940
here, okay? Just a quick note, WASM3 is an interpreter. This is not a just-in-time compiler,

807
01:25:06,940 --> 01:25:12,860
okay? But for testing purposes, it works perfectly well for what we need here, okay? So here

808
01:25:12,860 --> 01:25:18,940
we have the prompt. And now what we need to do is call our function using the exported

809
01:25:18,940 --> 01:25:25,940
name. Excuse me. It's AVG2, okay? And you provide, just separating these by spaces,

810
01:25:28,420 --> 01:25:32,340
the arguments that are expected here. So this is going to compute the average of two numbers.

811
01:25:32,340 --> 01:25:37,500
So let's say that we give it a 5 and a 10. You can include a decimal point and some decimal

812
01:25:37,500 --> 01:25:43,220
fractions if you want to, okay? But you need to provide the two arguments that are required,

813
01:25:43,220 --> 01:25:49,100
okay, for A and B. The 5 is going to be A and the 10 is going to be B as expected. And

814
01:25:49,100 --> 01:25:53,420
you press enter, okay? And if everything is fine, you should see something like this,

815
01:25:53,420 --> 01:25:58,100
okay? I mean, so far we hadn't really modified the code, so we would expect this to work

816
01:25:58,100 --> 01:26:05,100
without any issues, okay? So this is the average two function working. To exit WASM3, to exit

817
01:26:06,460 --> 01:26:12,140
this prompt, just type control C or control D, okay? It has to be control without any

818
01:26:12,140 --> 01:26:18,220
regard if you're using a Mac or a Windows or a Linux computer, okay? Control C or control

819
01:26:18,220 --> 01:26:25,220
D, okay? So let's have a look at exercise B, okay? Exercise B says add to the WAT, example

820
01:26:33,820 --> 01:26:39,900
WAT file, the file, the WAT file that we were looking at, a new function called AVG3. It's

821
01:26:39,900 --> 01:26:45,620
going to do the same thing, but instead of receiving three, instead of receiving two

822
01:26:45,620 --> 01:26:48,580
arguments, it's going to receive three arguments, okay? It's going to compute the average of

823
01:26:48,580 --> 01:26:55,580
three, three integer numbers, okay? So just in case, here's a link to the corresponding

824
01:27:01,980 --> 01:27:08,980
operations, okay? And you can see some individual things or operations that are in the code

825
01:27:09,900 --> 01:27:15,620
or notice individual particularities of these instructions following the corresponding links,

826
01:27:15,620 --> 01:27:20,020
okay? So these are instructions that we need to use to solve this one, okay? So this is

827
01:27:20,020 --> 01:27:27,020
probably very simple, okay? We can use this one here as our model, okay? So we would typically

828
01:27:29,540 --> 01:27:36,540
do something like this. I'm going to do with you this example. This is AVG3, okay? And

829
01:27:39,980 --> 01:27:46,980
we need to use an export, export, not expert, export instruction here with the name that

830
01:27:47,140 --> 01:27:54,140
we're going to use, which is AVG3. And we're going to use param, okay? And we need to provide

831
01:27:57,260 --> 01:28:04,260
here three parameters, okay? Let's copy this, paste this to do this quickly. This is the

832
01:28:05,300 --> 01:28:09,220
first one is going to be called A, the second one is going to be called B, and the third

833
01:28:09,220 --> 01:28:13,020
one is going to be called C. Remember, they need to start these local names and they need

834
01:28:13,020 --> 01:28:17,940
to start with a dollar sign, okay? It's not optional. It's part of the notation, okay?

835
01:28:17,940 --> 01:28:22,700
So how do we solve this? How do we obtain the average of these three numbers? What do

836
01:28:22,700 --> 01:28:25,700
we need to do? Yes?

837
01:28:25,700 --> 01:28:32,700
Okay. Okay, yeah. Okay, yes. So here we need to push the variable, okay? So we need to

838
01:28:55,700 --> 01:28:59,980
add the variable. Remember, we can only add two elements at a time, okay? So we can, in

839
01:28:59,980 --> 01:29:03,860
this case, the addition doesn't really matter the order in which you want to do it. We can

840
01:29:03,860 --> 01:29:09,580
push A and B into the stack and then do the addition and that leaves the results, okay,

841
01:29:09,580 --> 01:29:16,580
in the top of the stack. Then we can push the C and we call add again and that would

842
01:29:17,860 --> 01:29:22,980
add the previous result of the addition plus C, okay, and puts that in the stack. And then

843
01:29:22,980 --> 01:29:29,980
finally we push a three and do the division, okay? Once again, remember because addition

844
01:29:30,700 --> 01:29:35,500
is commutative, the order in which we do the additions is really not important to the final

845
01:29:35,500 --> 01:29:42,500
result, okay? So let's start here by adding first A and B. Here we have these two, okay?

846
01:29:42,500 --> 01:29:49,500
What instruction we use to add? F64 dot, F64 dot add, okay? So that adds the two top elements,

847
01:30:01,060 --> 01:30:08,060
pops the two top elements and pushes the results back, okay? Then let's load or push into the

848
01:30:08,580 --> 01:30:15,580
stack C. Then what do we do? We add again, yes, F64 add, okay? Then we divide by three.

849
01:30:25,860 --> 01:30:29,700
Notice that at this point we have the addition of A plus B plus C, okay? We got the three

850
01:30:29,700 --> 01:30:33,700
numbers added and that's in the top of the stack, okay? That's currently what we have

851
01:30:33,700 --> 01:30:40,700
in the top of the stack. So to divide by three, what do we do? We push using F64 const, we

852
01:30:41,540 --> 01:30:48,540
push a three and we finally call div to do the division, okay? So just a quick mention

853
01:30:55,460 --> 01:30:59,500
here in Gitpod you don't need to save your files automatically once you do a modification

854
01:30:59,500 --> 01:31:05,340
into a file that actually gets automatically saved, okay? I usually instinctively always

855
01:31:05,340 --> 01:31:11,100
press control C or command C, okay? But strictly speaking it's not really required, okay? You

856
01:31:11,100 --> 01:31:18,100
can check that out. And, okay, so here at the terminal what do we need to do? Watu-wasm,

857
01:31:19,460 --> 01:31:24,260
okay? We can use exactly the same command because we're modifying the same file here.

858
01:31:24,260 --> 01:31:31,260
And oops, oh, I missed something here. Anybody notice what I was missing? The result. This

859
01:31:32,940 --> 01:31:36,580
is why we're getting a validation error because I did not say that it was going to return

860
01:31:36,580 --> 01:31:43,580
something. So here we need to add F64. This is the expected result in F64, okay? The code

861
01:31:46,660 --> 01:31:53,660
is correct but I needed to declare that I'm requiring here to leave always an F64 in the

862
01:31:54,260 --> 01:32:01,260
top of the stack once we finish here, okay? So there we go. Notice here that we get here

863
01:32:02,020 --> 01:32:07,860
a type mismatch. This is the error that we got here. It was expecting. This means the

864
01:32:07,860 --> 01:32:12,260
square brackets, empty square brackets, this is I was expecting an empty stack but I got

865
01:32:12,260 --> 01:32:19,260
a stack with an F64, okay? So this is a validation error, okay, done by the translator. And we

866
01:32:20,260 --> 01:32:26,780
call it again. And we call wasm3 again with the REPL option here, okay? How do I test

867
01:32:26,780 --> 01:32:33,780
it? Well, we call AVG3. There are three examples that we can use here with 1, 2, and 3 or with

868
01:32:34,900 --> 01:32:41,140
14.5. I mean you can use whatever data value you want to check, okay? But here are three

869
01:32:41,140 --> 01:32:47,700
possibilities if you don't want to think on any test cases. So if we put just 1, 2, 3,

870
01:32:48,060 --> 01:32:52,180
the average of 1, 2, 3 is 2, okay? But you can check it out with the other examples as

871
01:32:52,180 --> 01:32:59,180
well. Okay, any questions? Once again remember what we're doing here is hand coding WebAssembly,

872
01:33:01,300 --> 01:33:07,180
okay? This is not the typical way that you use WebAssembly, okay? But once again I consider

873
01:33:07,180 --> 01:33:11,740
it very educational to do it, okay? Because if you do it, you're more or less understanding

874
01:33:11,740 --> 01:33:18,740
how this is supposed to work, okay? But then we're going to see higher level tools to actually

875
01:33:18,940 --> 01:33:25,940
get this done automatically, okay? I think it's a good moment to take a break, okay?

876
01:33:27,020 --> 01:33:34,020
So let's, what do you think? Fifteen minutes? Is it enough or do you want more? Yeah, fifteen

877
01:33:34,900 --> 01:33:41,900
minutes, okay. So if you'd like, let's continue here at ten to eleven, okay? Sure. Thank you

878
01:33:44,980 --> 01:33:51,980
very much for being back here. Okay, so let's continue. And let's go with exercise C. I'm

879
01:33:51,980 --> 01:33:58,980
going to give you a few minutes to solve this problem here. Just like we did with the previous

880
01:34:05,860 --> 01:34:12,860
function AVG3, here you need to create a new function called toCell, okay? Here's the name.

881
01:34:13,860 --> 01:34:20,860
This one only takes one parameter, okay? And you need to implement this formula here. So

882
01:34:22,260 --> 01:34:28,620
hopefully with what we've seen so far you should be able to carry out this, convert

883
01:34:28,620 --> 01:34:34,140
this formula into the corresponding instructions in the WebAssembly text format, okay? And

884
01:34:34,140 --> 01:34:41,140
here we have a few examples that you can use, okay? So once again, try to solve this by

885
01:34:41,500 --> 01:34:48,500
your own, okay? If you need any help, you can ask me. And I'll give you five minutes

886
01:34:48,780 --> 01:34:55,780
to see if you can solve it in that time, okay?

887
01:35:11,140 --> 01:35:18,140
Okay.

888
01:35:41,140 --> 01:35:48,140
Okay.

889
01:36:11,140 --> 01:36:18,140
Okay.

890
01:36:41,140 --> 01:36:48,140
Okay.

891
01:37:12,140 --> 01:37:19,140
Okay.

892
01:37:21,140 --> 01:37:28,140
Okay.

893
01:37:28,140 --> 01:37:35,140
Okay.

894
01:37:35,140 --> 01:37:42,140
Okay.

895
01:38:05,140 --> 01:38:12,140
Okay.

896
01:38:12,140 --> 01:38:19,140
Okay.

897
01:38:19,140 --> 01:38:26,140
Okay.

898
01:38:26,140 --> 01:38:33,140
Okay.

899
01:38:35,140 --> 01:38:42,140
Okay.

900
01:39:05,140 --> 01:39:12,140
Okay.

901
01:39:12,140 --> 01:39:19,140
Okay.

902
01:39:19,140 --> 01:39:26,140
Okay.

903
01:39:26,140 --> 01:39:33,140
Okay. Okay.

904
01:39:33,140 --> 01:39:40,140
Okay.

905
01:39:40,140 --> 01:39:47,140
Okay.

906
01:39:47,140 --> 01:39:54,140
Okay.

907
01:39:56,140 --> 01:40:03,140
Okay. Thank you.

908
01:40:03,140 --> 01:40:06,140
Awesome.

909
01:40:06,140 --> 01:40:13,140
Okay. How many finished? Okay. Well, great. Any questions with this last exercise? No?

910
01:40:16,140 --> 01:40:23,140
Yeah.

911
01:40:23,140 --> 01:40:30,140
There are several instructions that allow you to manipulate the stack. In those cases,

912
01:40:42,140 --> 01:40:46,540
you can have local variables, and that's the easiest thing. I mean, if you need to put

913
01:40:46,540 --> 01:40:50,820
something in a place that you'll later put it, just put it in a variable like you do

914
01:40:50,820 --> 01:40:55,620
in most languages at the end. But once again, it is always much more efficient if you can

915
01:40:55,620 --> 01:40:59,620
do all the operations only in the stack, okay? But if you can't, you can always use additional

916
01:40:59,620 --> 01:41:06,620
memory to process whatever you need, okay? Okay. Let's go to the next section. We're

917
01:41:06,720 --> 01:41:13,720
now going to section number five, okay? This is basically the last half of our presentation

918
01:41:13,720 --> 01:41:20,720
here. Okay. As I explained before, WebAssembly, as the couple of last exercises that we did

919
01:41:25,920 --> 01:41:30,720
in which we wrote the WebAssembly text format code, that's typically not the way that you

920
01:41:30,720 --> 01:41:35,320
should use WebAssembly, okay? WebAssembly really isn't, I mean, you can do it, but it's

921
01:41:35,320 --> 01:41:42,020
really not designed for coding it by hand, okay? So what do you do? Well, you use, you

922
01:41:42,020 --> 01:41:49,020
typically use a tool to somehow convert or produce this WebAssembly text code or the

923
01:41:49,220 --> 01:41:56,220
binary format or whatever, okay? So in practice, typically you would start from a high level

924
01:41:56,220 --> 01:42:03,220
language like C, like C++, like Rust, like Go. If you think about it, these are languages

925
01:42:03,780 --> 01:42:09,620
that are typically much more performant, okay? They're used to write code that typically

926
01:42:09,620 --> 01:42:15,060
has to be executed faster than what you typically do in Python or in JavaScript or some other

927
01:42:15,060 --> 01:42:22,060
languages are typically interpreted. So most of the time, once again, if you want to use

928
01:42:24,220 --> 01:42:29,740
WebAssembly, even if you at some point use Python, typically you would use some other

929
01:42:29,740 --> 01:42:36,420
language to produce the WebAssembly, okay? There is not currently a compiler that translates

930
01:42:36,420 --> 01:42:43,420
Python code directly into WebAssembly, okay? Typically you use a lower level language to

931
01:42:43,820 --> 01:42:48,860
actually do that, okay? And once again, even if you start with C or with Rust, the advantage

932
01:42:48,860 --> 01:42:53,940
is that if you're producing WebAssembly, your code will be more portable than if you just

933
01:42:53,940 --> 01:43:00,940
compile it directly into native code, okay? So that's the most common use case. So in

934
01:43:00,940 --> 01:43:04,140
this section here, what we're going to do is we're going to see how to write our own

935
01:43:04,340 --> 01:43:10,140
compiler, okay? So we're going to write that tool that translates some code in some language,

936
01:43:10,140 --> 01:43:16,660
we're going to see what language it is, into WebAssembly, okay? Now, originally when I

937
01:43:16,660 --> 01:43:23,660
was designing this particular tutorial, I thought of implementing an esoteric language

938
01:43:25,700 --> 01:43:30,220
that is called Brainfuck, okay? That's its name. I'm sorry, I don't really like to use

939
01:43:30,300 --> 01:43:37,300
these explicatives, okay? And I did during my Easter vacations, I actually did a prototype

940
01:43:42,620 --> 01:43:46,740
and it did work, but I thought it was more complicated than it really was worth. So instead

941
01:43:46,740 --> 01:43:52,140
of that, I decided to go for a language that is called Forth. I don't know if anybody has

942
01:43:52,140 --> 01:43:59,140
used or heard even about Forth, okay? Forth appeared somewhere in the 1970s, and the advantage

943
01:43:59,980 --> 01:44:04,820
of Forth is that its semantics is very similar to WebAssembly, it's a stack-based language,

944
01:44:04,820 --> 01:44:10,180
okay? So you push elements in a stack and then you pop them and do operations and push

945
01:44:10,180 --> 01:44:16,740
the result back. So the translation of the code in Forth to WebAssembly is very straightforward,

946
01:44:16,740 --> 01:44:22,580
okay? So the language is going to seem a little bit strange at first, if you've ever used

947
01:44:22,580 --> 01:44:27,740
a stack-based language, but you have to be aware that they're not that uncommon. I mean,

948
01:44:27,900 --> 01:44:31,740
WebAssembly is stack-based, but also other virtual machines are stack-based. The Java

949
01:44:31,740 --> 01:44:38,740
virtual machine is stack-based. The common language infrastructure that is used in the

950
01:44:39,580 --> 01:44:46,060
.NET technology is also stack-based. Languages like POS script, which you use to, I mean,

951
01:44:46,060 --> 01:44:50,620
typically send information to a printer, laser printer and so on, it also works with the

952
01:44:50,620 --> 01:44:55,540
language and that language is also stack-based, okay? So this use of stack is really not that

953
01:44:55,540 --> 01:45:00,300
uncommon. Most of the time we don't deal with it directly, okay, but it is there. But

954
01:45:00,300 --> 01:45:07,300
this language actually does expose a lot of the semantics of using a stack-based architecture.

955
01:45:09,100 --> 01:45:13,940
And the language that we're going to implement here is not Forth. I mean, Forth is not a

956
01:45:13,940 --> 01:45:18,540
big language, it's fairly small, but we're going to be working with an even smaller language,

957
01:45:18,540 --> 01:45:23,940
okay? And I'll call it here Chicky Forth, okay? Where Chicky is, in Spanish, it's sort

958
01:45:23,940 --> 01:45:29,380
of an informal word to indicate something that is tiny or that is small, okay? Chicky

959
01:45:29,380 --> 01:45:34,860
comes from the word chiquiton or chiquita, something tiny, something small. And I use

960
01:45:34,860 --> 01:45:39,380
this name because everything, all other names were already taken. I mean, I said, well,

961
01:45:39,380 --> 01:45:43,540
is there a tiny Forth? And yes, there was an implementation tiny Forth. Is there a micro

962
01:45:43,540 --> 01:45:47,380
Forth? And yes, there is a micro Forth. Is there a mini Forth? Yeah, all these things

963
01:45:47,380 --> 01:45:52,300
that had to do with Forth and something small, all these names seem to be already used, okay?

964
01:45:52,300 --> 01:45:56,740
So I said, well, let's combine something in Spanish and surely the name is not going

965
01:45:56,740 --> 01:46:00,700
to be taken. And that's exactly what happened here. So this is why it's called Chicky, Chicky

966
01:46:00,700 --> 01:46:07,700
Forth, okay? But it's a very small subset of the Forth. And of course, I took some additional

967
01:46:07,700 --> 01:46:12,540
liberties to make this work in a way that I found interesting, okay? So it is a subset

968
01:46:12,540 --> 01:46:16,020
of Forth and many of the things that I'm going to say are true for Forth, but not everything,

969
01:46:16,020 --> 01:46:22,780
okay? So Chicky Forth works as typically you would expect. Let's have a look directly

970
01:46:22,780 --> 01:46:30,740
here in this example. I usually include a lot of explanations here just in case at some

971
01:46:30,740 --> 01:46:34,820
point in the future you want to review them. You have the full context to understand what's

972
01:46:34,820 --> 01:46:39,580
happening, okay? But I'm not going to spend a lot of time reading what's there, okay?

973
01:46:39,580 --> 01:46:44,860
But you can read it on your own if you find it interesting or amusing or relevant. So

974
01:46:44,980 --> 01:46:52,500
here's an example of a Chicky Forth program, okay? So whenever you find a number here,

975
01:46:52,500 --> 01:46:56,460
for example, the one you push it into the stack, okay? Just see a number, push it into

976
01:46:56,460 --> 01:47:00,820
the stack. When you see an operation, for example, here the plus, well, you do what

977
01:47:00,820 --> 01:47:07,820
is expected to do, which is do two pop operations, do the plus operation and push the result

978
01:47:07,820 --> 01:47:14,820
back into the stack, okay? So here, as you can see, we are evaluating one plus two, okay?

979
01:47:18,540 --> 01:47:22,180
And the result, which is three, is placed in the top of the stack, okay? Then we do

980
01:47:22,180 --> 01:47:26,260
three plus four, okay? And seven is placed in the top of the stack. And then we do a

981
01:47:26,260 --> 01:47:32,020
star. In this case, we take the seven, we pop the seven, we pop the three, which were

982
01:47:32,020 --> 01:47:36,060
currently in the stack, the result of the previous two add operations, and we multiply

983
01:47:36,220 --> 01:47:41,260
it so we get a twenty-one. And the dot, the final dot, is that it takes the element in

984
01:47:41,260 --> 01:47:46,260
the top of the stack and prints it, okay? So this is gonna print a twenty-one at the

985
01:47:46,260 --> 01:47:53,260
end, okay? So as you might imagine here, this is exactly the same thing as in Python, this

986
01:47:56,100 --> 01:48:00,820
instruction over here, okay? So it adds one plus two, three plus four, multiplies those

987
01:48:00,820 --> 01:48:05,340
two values and prints the result, which is twenty-one, okay? So that's the general way

988
01:48:05,340 --> 01:48:08,220
in which Cheki-forth and, fourth in general works, okay?

989
01:48:08,220 --> 01:48:15,220
So let's add some additional things that Cheki-forth is gonna do. Well, to start off, something

990
01:48:15,380 --> 01:48:21,020
that is very important, the input is just gonna be a file that contains these, this

991
01:48:21,020 --> 01:48:27,220
text. We're gonna use a split, the Python split operation to separate what fourth calls

992
01:48:27,220 --> 01:48:31,380
words, okay? Every single element that is delimited by spaces is a word, okay? A number,

993
01:48:31,380 --> 01:48:36,100
like one is a word. Plus is a word, okay? The dot is a word, okay? So sometimes we

994
01:48:36,100 --> 01:48:41,300
need comments. So in order to represent comments, we're gonna use parentheses, okay? So we open

995
01:48:41,300 --> 01:48:45,700
a parentheses. This means this is the start of a comment. Until we find the closing parentheses,

996
01:48:45,700 --> 01:48:51,060
that's where the comment ends, okay? And these comments are just gonna be eliminated, okay?

997
01:48:51,060 --> 01:48:56,220
It's just for convenience for us to write some meaningful information that might make

998
01:48:56,220 --> 01:49:01,220
sense to us later on when we inspect the code again and never remember what we did before.

999
01:49:01,580 --> 01:49:07,620
And well, the comments hopefully help us to understand what we were thinking, okay? Just

1000
01:49:07,620 --> 01:49:14,620
have in mind, okay, for this to work, there needs to be spaces before or after the parentheses,

1001
01:49:15,100 --> 01:49:20,020
okay? Because we're just gonna split it here. So we're assuming that there exist spaces

1002
01:49:20,020 --> 01:49:25,100
between the different elements that we want to exist in the program in general and here

1003
01:49:25,100 --> 01:49:30,980
in comments. Just make sure that the parentheses, you do not put it together without any spaces

1004
01:49:31,140 --> 01:49:36,900
next to any other elements, okay? We're gonna be representing variables and in general,

1005
01:49:36,900 --> 01:49:43,900
variable is anything, any word that starts with a letter and follows, is followed by

1006
01:49:44,100 --> 01:49:49,500
zero or more letters or digits, okay? So like very similar like any other language, this

1007
01:49:49,500 --> 01:49:56,500
is how we're gonna represent variables. And if the variable appears by itself, this means

1008
01:49:56,900 --> 01:50:01,500
that we want to read the value of the variable, okay? So if my program says X, that means

1009
01:50:01,500 --> 01:50:04,740
that I'm gonna read the value of X, okay? And what does it mean to read the value of

1010
01:50:04,740 --> 01:50:09,900
X? It means that we get the value of that variable and we push it into the stack, okay?

1011
01:50:09,900 --> 01:50:17,180
When we wanna do a write operation, in this case we wanna update or set or assign a variable,

1012
01:50:17,180 --> 01:50:21,140
we're just gonna use the name of the variable followed immediately and placed together without

1013
01:50:21,140 --> 01:50:26,820
any spaces with an exclamation mark, okay? So if we have X, we're reading the value of

1014
01:50:26,820 --> 01:50:30,700
X, which means take the value of that variable and place it on top of the stack, do a push

1015
01:50:30,700 --> 01:50:37,220
operation. But when you find X followed by an exclamation mark, I think you typically

1016
01:50:37,220 --> 01:50:41,620
call it a bang there, okay? I don't know if most of you call it that way, but I've heard

1017
01:50:41,620 --> 01:50:46,300
that that's the term that you use here or at least many people in the States use it.

1018
01:50:46,300 --> 01:50:50,460
So if you find X bang or X followed by an exclamation mark, it means take the value

1019
01:50:50,460 --> 01:50:56,020
that is on top of the stack and copy it or pop it and copy that value to that variable,

1020
01:50:56,020 --> 01:51:02,260
okay? So we have getting and setting of our variables, okay? And look at this example

1021
01:51:02,260 --> 01:51:10,060
that we have here. So what's happening here in the first line? We are pushing a two, a

1022
01:51:10,060 --> 01:51:14,260
one, a two and then a plus, so we have a three in the top of the stack. And then we do X

1023
01:51:14,260 --> 01:51:18,420
bang. This, what it does is that it pops the three in the top of the stack and copies it

1024
01:51:18,420 --> 01:51:23,940
to the variable X, okay? Once again, we do that set operation because we have an exclamation

1025
01:51:23,940 --> 01:51:32,940
mark. What happens in the next line, in line number two? Here we read the value of X the

1026
01:51:32,940 --> 01:51:36,620
first time and we push into the stack and then we read it again and push into the stack

1027
01:51:36,620 --> 01:51:40,700
and then we do a plus. So at the end we are adding three plus three, that gives us six

1028
01:51:40,700 --> 01:51:45,780
and with a dot we print it, okay? So this little program would print a six, okay, using

1029
01:51:45,780 --> 01:51:54,820
a variable. Just a quick mention here. It is valid. I mean, you don't need, as you can

1030
01:51:54,820 --> 01:52:01,420
see in the program, you don't need to declare variables here, okay? And actually any variable

1031
01:52:01,420 --> 01:52:04,820
that hasn't been set before, I mean, if you have a variable that you're reading it but

1032
01:52:04,820 --> 01:52:09,860
you didn't place any value before that, by default it has a zero, okay? So in any moment

1033
01:52:09,860 --> 01:52:14,900
you can just introduce a variable and if you read it without setting it before, you have

1034
01:52:14,900 --> 01:52:22,580
a zero there, okay, by default. Okay? So that's the use of variables in Cheeky Fourth. We

1035
01:52:22,580 --> 01:52:31,100
got these instructions for input and output. Okay? We already saw the dot by itself. This

1036
01:52:31,100 --> 01:52:38,940
one pops an integer value from the top of the stack and prints it, okay? And something

1037
01:52:38,940 --> 01:52:43,740
that I didn't mention before, it adds single space afterwards, okay? So this allows us

1038
01:52:44,220 --> 01:52:49,220
to actually have several numbers and print them using just a dot because they're going

1039
01:52:49,220 --> 01:52:55,460
to be placed together. We just add a space so that not everything gets all placed in

1040
01:52:55,460 --> 01:53:02,500
just one single big string, okay? So we add here a space immediately after we do a print

1041
01:53:02,500 --> 01:53:08,100
here, okay? Then we have an emit. Emit actually, what it does is similar to the dot. It's going

1042
01:53:08,100 --> 01:53:14,860
to pop a value from the top of the stack but instead of printing that number, it's going

1043
01:53:14,860 --> 01:53:22,460
to consider that number the character code of whatever value we have there and display

1044
01:53:22,460 --> 01:53:27,660
the corresponding character, okay? Now, you can think in terms of ASCII, the American

1045
01:53:27,660 --> 01:53:32,300
Standard Code for Information Interchange. So if, let's say that we have a 65 in the

1046
01:53:32,300 --> 01:53:38,020
top of the stack, that 65 is the character code for the letter, capital letter A, okay?

1047
01:53:38,020 --> 01:53:44,780
So if I have a 65 and I use emit, what I get is an A displayed, okay? The character A.

1048
01:53:44,780 --> 01:53:48,580
Technically speaking, we can talk about ASCII characters, okay? But strictly, it's a Unicode

1049
01:53:48,580 --> 01:53:53,060
characters. It's a Unicode code point that you're placing there, okay? So remember that

1050
01:53:53,060 --> 01:53:58,620
ASCII is actually a subset of Unicode. The first 128 characters of Unicode are the same

1051
01:53:58,940 --> 01:54:04,820
character codes for ASCII, okay? So you can think in terms of ASCII but it's really much

1052
01:54:04,820 --> 01:54:10,300
more. It's a Unicode code point that we really have here, okay? So it is valid to actually

1053
01:54:10,300 --> 01:54:16,140
use, for example, if I want a euro sign or want some sort of emoji or some, if I know

1054
01:54:16,140 --> 01:54:20,380
the character code of that one, we can place that number and do the emit and it will display

1055
01:54:20,380 --> 01:54:27,380
that corresponding value, okay? The corresponding character. NL represents a new line and new

1056
01:54:27,700 --> 01:54:34,420
line actually prints or advances to the next line, okay? By default, that doesn't happen

1057
01:54:34,420 --> 01:54:40,060
so we need to explicitly put it. And notice here that the new line is actually equivalent

1058
01:54:40,060 --> 01:54:46,420
to this, these two words together, okay? A 10 which is the character code for the new

1059
01:54:46,420 --> 01:54:51,220
line, okay? And emit would actually print it, okay? So actually, new line, this is really

1060
01:54:51,220 --> 01:54:57,620
not a new operation per se, it's just the combination of these two, okay? And we also

1061
01:54:57,620 --> 01:55:04,620
have input. Input will read from the standard input an integer and it reads from the keyboard

1062
01:55:06,020 --> 01:55:10,220
technically. I mean, it's a standard input so technically it could be redirected if you

1063
01:55:10,220 --> 01:55:17,220
want it. But well, it takes that value and whatever is read is placed on top of the stack,

1064
01:55:17,220 --> 01:55:23,980
okay? If you want to later on copy it to a variable, we'll just use the variable bang

1065
01:55:23,980 --> 01:55:30,980
operation that we saw a moment ago, okay? So that's a general description of our compiler.

1066
01:55:34,300 --> 01:55:39,380
Let's see how we write it, okay? The concurrent version of the compiler is about 170 lines

1067
01:55:39,380 --> 01:55:46,380
of code. I mean, it's not huge, okay? But it's fairly tiny if you think of it what all that

1068
01:55:46,780 --> 01:55:51,100
it actually does, okay? So I'm not gonna go line by line what it is. Let's just look at

1069
01:55:51,100 --> 01:55:58,100
the parts that are more interesting, okay? So the code is actually available here if

1070
01:55:59,420 --> 01:56:06,420
you go back to your workspace. Let's close the file that we had here and let's go to

1071
01:56:08,940 --> 01:56:15,940
the fourth directory and let's look at the cheeky fourth file, cheeky fourth.py. Okay,

1072
01:56:17,380 --> 01:56:24,380
as you can see actually a lot of what we have here are actually comments or document strings,

1073
01:56:24,580 --> 01:56:30,060
okay? So the code is really smaller, okay? So let me just show you some parts that are

1074
01:56:30,060 --> 01:56:37,060
relevant for us to understand the compiler. I have some strings here as symbolic constants,

1075
01:56:37,900 --> 01:56:44,900
okay? The first one is a multi-line string that has what we need to have at the top of

1076
01:56:46,420 --> 01:56:51,620
the beginning of every module that I'm gonna be producing, okay? That my compiler is gonna

1077
01:56:51,620 --> 01:56:56,380
be producing. As you can see at the very beginning it has a comment saying cheeky fourth compiler.

1078
01:56:56,380 --> 01:57:03,020
I think I didn't necessarily mention it but anything that starts with two columns is a

1079
01:57:03,020 --> 01:57:07,820
comment in WebAssembly, okay? WebAssembly text format, okay? So here's our module. Here's

1080
01:57:07,820 --> 01:57:14,820
where it starts. We are going to import three functions, okay? Import here, what it means

1081
01:57:14,820 --> 01:57:19,020
is that this function is defined somewhere else. I'm gonna be able to call it from my

1082
01:57:19,020 --> 01:57:25,340
WebAssembly code here, okay? And as you can see these happen to be the input output functions,

1083
01:57:25,340 --> 01:57:30,700
okay? We have emit, input, and print, okay? These are our functions. This is, you can

1084
01:57:30,700 --> 01:57:35,100
think of it as being the signature of the function. If it takes parameters it's gonna

1085
01:57:35,100 --> 01:57:40,020
tell me so and if it returns something it's gonna have a result as expression here saying

1086
01:57:40,020 --> 01:57:44,580
that it's gonna result in something, okay? Notice that we're just using here I32 so it's

1087
01:57:44,580 --> 01:57:49,780
gonna only work with 32 bit integers, okay? And here we start the declaration of our

1088
01:57:49,780 --> 01:57:56,340
function, okay? Notice that I'm only placing here its export directive. I'm saying that

1089
01:57:56,340 --> 01:58:02,820
I'm gonna export our function as a dunder, well it's not dunder, it's just an underscore,

1090
01:58:02,820 --> 01:58:08,020
underscore start, okay? This is the name of my function and this is where the execution

1091
01:58:08,020 --> 01:58:12,940
of the function is gonna begin, okay? We're gonna use that name, the underscore start

1092
01:58:13,100 --> 01:58:19,340
to indicate in our Python code that we wanna execute this, all this function. And in line

1093
01:58:19,340 --> 01:58:26,340
number 32, notice here that we have here just two closing parentheses. This is one and this

1094
01:58:26,420 --> 01:58:32,420
is the second one. The first one actually closes the function and the last one closes

1095
01:58:32,420 --> 01:58:37,940
the module, okay? So everything, every program that I produce here in my compiler has to

1096
01:58:37,940 --> 01:58:44,700
start with these several lines of instructions and has to end with these two couple of closing

1097
01:58:44,700 --> 01:58:50,820
parentheses, okay? So this is something that has to happen here. And in line number 35,

1098
01:58:50,820 --> 01:58:56,140
we have a dictionary here, okay? And this dictionary is the mapping between the words

1099
01:58:56,140 --> 01:59:02,460
of our cheeky forth programs and the corresponding instruction or instructions in WebAssembly,

1100
01:59:02,460 --> 01:59:08,380
okay, in WebAssembly text format. So in line 36, you can see that for doing a multiplication,

1101
01:59:08,380 --> 01:59:13,740
okay, we have the key in this dictionary is the star, okay? It means that whenever I find

1102
01:59:13,740 --> 01:59:20,740
a star, I need to convert this into the I32.mul instruction in WebAssembly text format, okay?

1103
01:59:21,620 --> 01:59:27,300
It's actually contained within square brackets. It's a list, what we have associated to each

1104
01:59:27,380 --> 01:59:32,940
value because we can have several instructions. As you can see, for example, in line 41, we

1105
01:59:32,940 --> 01:59:39,180
got the nl word, okay? And this one actually gets converted into two WebAssembly instructions.

1106
01:59:39,180 --> 01:59:44,100
The first one is I32 constant, which pushes the 10 to the top of the stack, and then a

1107
01:59:44,100 --> 01:59:49,580
call to emit, okay? Call, emit, well, calls the emit function that is defined somewhere

1108
01:59:49,580 --> 01:59:54,060
else, which is available here thanks to the important instructions that we did before,

1109
01:59:54,060 --> 02:00:01,060
okay? So notice here we already have implemented the star, the plus, the dot, the period, the

1110
02:00:01,420 --> 02:00:07,540
emit input and nl instructions here, okay? So that's what our compiler currently is able

1111
02:00:07,540 --> 02:00:13,460
to do, plus some additional functionality that is actually provided later on that has

1112
02:00:13,460 --> 02:00:18,900
to do with things like accessing variables and so on, which is not here, but those are

1113
02:00:18,900 --> 02:00:23,020
special because they work a little bit different. They're a little bit more elaborate, okay?

1114
02:00:23,020 --> 02:00:30,020
So let's go to the very end of our code. We have the main, and this is actually designed

1115
02:00:30,180 --> 02:00:35,860
so that you can just read the main and have a general idea of how this works, okay? So

1116
02:00:35,860 --> 02:00:39,220
any moment, remember, if you want to see the implementation of any of these functions,

1117
02:00:39,220 --> 02:00:45,340
just, I think, if you tap, if you press control and then just click with your mouse on the

1118
02:00:45,340 --> 02:00:50,180
name, it will take you to the definition or use command, I think, if you're using a Mac,

1119
02:00:50,460 --> 02:00:57,460
so if you want to see, for example, how check args works or how it's implemented or remove

1120
02:00:57,860 --> 02:01:04,860
comments or whatever, just press command or control and then you hover over the name and

1121
02:01:04,900 --> 02:01:08,780
as you can see, there's sort of like a link there, so for example, here in remove comments,

1122
02:01:08,780 --> 02:01:15,780
if I press command and then click over here, it takes me to the definition of the corresponding

1123
02:01:15,780 --> 02:01:21,780
code, okay? So this is a standard Visual Studio Code behavior, okay? So this is a fast way

1124
02:01:21,780 --> 02:01:27,740
that you can see the implementation. But the general thing that it's doing is pretty obvious,

1125
02:01:27,740 --> 02:01:33,460
hopefully, I hope, by the names that I'm using here in the different instructions. So in

1126
02:01:33,460 --> 02:01:40,460
line 153, we check the arguments. This program is going to be run as a script in the command

1127
02:01:41,460 --> 02:01:48,460
line, in the terminal, so check args is just going to verify that I've sent one command

1128
02:01:48,460 --> 02:01:51,460
line argument that is the name of the file that I'm, the cheeky fourth file that I'm

1129
02:01:51,460 --> 02:01:58,460
compiling, okay? If it's not, it just produces an error and ends the program. Line 154 takes

1130
02:01:59,780 --> 02:02:06,780
from this argv, argv, remember, is the vector of arguments, it's just a list that contains

1131
02:02:06,780 --> 02:02:12,620
arguments in the command line, okay? So in index one, this is where the name of the cheeky

1132
02:02:12,620 --> 02:02:18,140
fourth file should be found, okay? So I just put it here in this variable called full source

1133
02:02:18,140 --> 02:02:25,140
name. This is the name, includes any directories if that's part of the path of the file. All

1134
02:02:25,900 --> 02:02:31,920
of this is included here, so full source name is the full name of our cheeky fourth source

1135
02:02:32,320 --> 02:02:37,360
program, okay? Then we do this thing called read words. Read words, actually what it does

1136
02:02:37,360 --> 02:02:42,360
is that it reads the contents of the corresponding file, if the file is actually there and it's

1137
02:02:42,360 --> 02:02:46,360
found and it can be opened, it gets opened and then as I mentioned before, it uses the

1138
02:02:46,360 --> 02:02:52,360
split operation, the Python split over a string and it returns a list of all the individual

1139
02:02:52,360 --> 02:02:56,640
words, okay? Remember, these words are just things that are separated by spaces or new

1140
02:02:56,680 --> 02:03:03,680
lines or whatever, okay? So this variable in line 155 called words contains all the

1141
02:03:04,720 --> 02:03:11,720
words of our program, okay? Separated as individual strings now, okay? There's a list of strings

1142
02:03:11,920 --> 02:03:18,920
representing the single words in our program. In line 156, remove comments looks for words

1143
02:03:19,320 --> 02:03:25,280
that actually represent or an individual word that starts with an opening parenthesis, so

1144
02:03:25,360 --> 02:03:29,240
when it finds it, it knows that everything that follows should be ignored until it finds

1145
02:03:29,240 --> 02:03:34,760
the corresponding closing parenthesis, okay? So remove words, remove comments, excuse me,

1146
02:03:34,760 --> 02:03:40,480
does what you might imagine, it actually eliminates the comments from our words, okay? So at this

1147
02:03:40,480 --> 02:03:46,080
point we only have the code that we really care about of our cheeky fourth input. Result

1148
02:03:46,080 --> 02:03:50,960
is a local variable here that starts as an empty list, okay? This is where I'm going

1149
02:03:50,960 --> 02:03:56,040
to be putting all the instructions that are going to go as part of my output once we

1150
02:03:56,040 --> 02:04:01,360
start generating it, okay? So it will include all the instructions, the part that goes at

1151
02:04:01,360 --> 02:04:06,960
the beginning at the end of my what source file and then all the individual instructions

1152
02:04:06,960 --> 02:04:13,960
that we need to place. So they get appended using, well, append, okay? So this is an ordinary

1153
02:04:15,960 --> 02:04:20,200
list, so we start here by appending everything that goes at the beginning, okay? Remember,

1154
02:04:20,200 --> 02:04:25,280
we saw this multi-line string that contained all the initial declarations that have to

1155
02:04:25,280 --> 02:04:32,280
go in a what source file at the very beginning, okay? Then in line 159, this specific instruction,

1156
02:04:34,160 --> 02:04:41,160
this function, well, if we look at it from the nested part, first this function is called,

1157
02:04:42,440 --> 02:04:46,280
this is going to look for all the variables that are used in the program, okay? So it

1158
02:04:46,280 --> 02:04:50,040
just looks and see which variables are used and they can be used in two ways. They can

1159
02:04:50,040 --> 02:04:54,160
be used just the name of the variable. If you remember, if the variable appears by itself,

1160
02:04:54,160 --> 02:05:01,160
it means that we should detect or whenever we use it, it's just read the name of the,

1161
02:05:02,400 --> 02:05:08,120
read the value of the variable and push that value into the top of the stack or we find

1162
02:05:08,120 --> 02:05:12,480
a variable name followed by a bang symbol, the exclamation mark, okay? And in that case,

1163
02:05:12,480 --> 02:05:16,120
we know that we need to set that value. But at the end, it doesn't really matter how we

1164
02:05:16,360 --> 02:05:21,320
use it. As long as we use a variable, we need to find it. So findVar is just returns me.

1165
02:05:21,320 --> 02:05:27,720
I think it's a list of all the variables that are used in the program in any fashion, okay?

1166
02:05:27,720 --> 02:05:34,720
And then once we found them, we declare them, okay? And the declareVar is actually, if we

1167
02:05:34,720 --> 02:05:41,720
look at the implementation here of declareVar is, okay? It uses this instruction here, local

1168
02:05:42,720 --> 02:05:49,080
followed by the name of the variable, starting with a dollar sign, okay? Because all local

1169
02:05:49,080 --> 02:05:53,040
names in WebAssembly have to start with a dollar sign. But here we put the name of the variable,

1170
02:05:53,040 --> 02:05:58,960
okay? And we declare it as an I32 and place everything within these parentheses, okay?

1171
02:05:58,960 --> 02:06:03,760
The opening and closing here. And there's this other variable, it's actually named constant.

1172
02:06:03,760 --> 02:06:07,960
Indentation is just a string with four spaces, okay? This is just for legibility's sake,

1173
02:06:07,960 --> 02:06:11,640
okay? Strictly speaking, it's not really required, but it makes our code a little bit easier.

1174
02:06:11,960 --> 02:06:18,960
To understand, okay? It just adds some nice looking indentation there, okay? So this declares

1175
02:06:20,240 --> 02:06:25,040
all the variables that appear. Any variable declared here has a default value of zero,

1176
02:06:25,040 --> 02:06:29,600
so we don't need even to initialize it, okay? Automatically these local variables all have

1177
02:06:29,600 --> 02:06:34,840
an initial value of zero, okay? So as we mentioned before, if we happen to use a variable without

1178
02:06:34,840 --> 02:06:41,240
assigning any previous value to it, by default it's a zero that we get there, okay?

1179
02:06:41,320 --> 02:06:46,320
Go back here. So declare virus is the one that actually adds any variable declarations

1180
02:06:46,320 --> 02:06:52,400
that are required here. And then this is really the core, the core of our compiler. It's called

1181
02:06:52,400 --> 02:06:57,120
code generation. This is really where all the code generation actually happens, okay?

1182
02:06:57,120 --> 02:07:06,120
Let's have a look at it because it is interesting and relevant, okay? So the code generation

1183
02:07:06,120 --> 02:07:11,600
function takes where the result is going to be placed and all the words of our program

1184
02:07:11,600 --> 02:07:17,000
that we're going to consider here for translation. We just do a for, okay? We iterate over all

1185
02:07:17,000 --> 02:07:22,520
the words. Each and each iteration, each individual word is called word, okay? And these are the

1186
02:07:22,520 --> 02:07:29,520
things that I'm considering here. First of all, if the word is a number, okay? If the,

1187
02:07:30,760 --> 02:07:34,800
here the word that we're currently analyzing happens to be a number, we just push it here

1188
02:07:34,800 --> 02:07:39,800
using this instruction that we used in the past, i32.const and then the, whatever the

1189
02:07:39,800 --> 02:07:45,240
word is, okay? So if we find a five, if we find a three, if we find a 42 in our input,

1190
02:07:45,240 --> 02:07:51,720
in our input cheeky forth source program, we just push it into the stack, okay? Using

1191
02:07:51,720 --> 02:07:58,720
the i32.const instruction. If the word that we're currently processing belongs to any

1192
02:07:59,040 --> 02:08:05,800
of the keys of the operation dictionary, remember the operation dictionary is this one here,

1193
02:08:05,800 --> 02:08:12,800
so if any of the words is a star, a plus, a dot, an emit, an input, an L, any of those,

1194
02:08:15,520 --> 02:08:19,320
okay? If it's any of those, what we're going to do is that we're just going to place the

1195
02:08:19,320 --> 02:08:24,120
associated statements that we have in the dictionary and we are going to just put them

1196
02:08:24,120 --> 02:08:28,760
in the result, okay? We use another internal four because there might be several and this

1197
02:08:28,760 --> 02:08:33,720
is just done two in practice just to make sure that we add the indentation to each individual

1198
02:08:33,720 --> 02:08:40,720
statement here, okay? If we find a variable, just a variable, plain variable to read, not

1199
02:08:40,720 --> 02:08:47,720
to set, okay? The variable that instruction just gets translated into a local get with

1200
02:08:47,960 --> 02:08:52,280
the name of the variable and the dollar sign at the beginning and this is the other case

1201
02:08:52,280 --> 02:08:56,920
when we have variables that end in a bang operation, okay? So here's the exclamation

1202
02:08:56,920 --> 02:09:01,240
mark at the very end of the word and if the rest of the word, the things that go before

1203
02:09:01,240 --> 02:09:07,240
the bang are a valid variable name, then we convert that into a set, okay? So get and

1204
02:09:07,240 --> 02:09:12,880
set, this local get and local set are responsible for, in the case of get, reading the value

1205
02:09:12,880 --> 02:09:16,880
of a variable and pushing it into the top of the stack and set does the opposite which

1206
02:09:16,880 --> 02:09:22,640
is takes the top of the value of the stack and copies it into the variable, okay? So

1207
02:09:22,640 --> 02:09:27,520
we got the two things that we want to do with variables which is read those values and then

1208
02:09:27,520 --> 02:09:33,520
update them, okay? Or assigning them which is what the set operation does in WebAssembly

1209
02:09:33,520 --> 02:09:39,200
and here remember it corresponds in cheeky forth when you use an exclamation mark, okay?

1210
02:09:39,200 --> 02:09:43,080
If none of these actually went in, it means that we found a word that we don't know what

1211
02:09:43,080 --> 02:09:49,600
it is and if it's not something that we want, which it isn't, we just throw an exception,

1212
02:09:49,600 --> 02:09:58,600
raise an exception here, okay? Once again, this example, this compiler is fairly simple

1213
02:09:58,600 --> 02:10:04,240
to a really full-blown compiler. I've been teaching compiler construction for 20 years

1214
02:10:04,240 --> 02:10:09,360
at my university. So typically building a compiler is something that we take a full

1215
02:10:09,360 --> 02:10:15,440
semester to do, okay? And we have to do lexical analysis and syntactic analysis, semantic

1216
02:10:15,440 --> 02:10:20,560
analysis and then we do code generation and optimizations and stuff. So all that takes

1217
02:10:20,560 --> 02:10:27,560
a lot of time, okay? But now, well, in just around 150 lines of code, we see a full working

1218
02:10:28,200 --> 02:10:32,400
compiler because once again the language that we're really compiling is very, very simple,

1219
02:10:32,400 --> 02:10:37,440
okay? The essence really, if you want to think of what does it do is that it takes the name

1220
02:10:37,440 --> 02:10:42,600
of a file, it reads a file, it uses split to separate the individual words and then

1221
02:10:42,600 --> 02:10:46,360
looks at each word and says, okay, what do we need to do with this word, okay? And most

1222
02:10:46,360 --> 02:10:51,560
of the words can actually be translated thanks to this dictionary called operation, okay?

1223
02:10:51,560 --> 02:10:58,560
So that's a general overview of our compiler, okay? And yes, we need to, in the produce

1224
02:10:59,040 --> 02:11:02,320
code we need to put something at the beginning and then at the end. So at the end we have

1225
02:11:02,720 --> 02:11:09,720
something that is a complete full valid WebAssembly text file, okay? At the end, if we follow

1226
02:11:10,040 --> 02:11:16,440
once again, go back to the description here in the main what's happening, okay? We were

1227
02:11:16,440 --> 02:11:21,800
looking here at code generation, okay? Once we've finished code generation, we just add

1228
02:11:21,800 --> 02:11:26,760
what goes at the very end of the two closing parentheses that were in the string. We put

1229
02:11:26,760 --> 02:11:33,760
that in result, okay? And then we do this magical function called join, okay? We're

1230
02:11:33,760 --> 02:11:38,760
joining all the strings together, just separating each string with a new line, okay? I don't

1231
02:11:38,760 --> 02:11:45,080
know if you've used join in other languages, but Python actually has the object and the

1232
02:11:45,080 --> 02:11:50,400
arguments switched in the opposite order in which you typically find the join operation

1233
02:11:50,400 --> 02:11:55,360
in most other languages, okay? Most languages typically you have an object which is a list

1234
02:11:55,520 --> 02:12:00,280
and over the list you do the join and just tell it, use this string to separate these

1235
02:12:00,280 --> 02:12:03,280
individual lines, but for some reason the...

1236
02:12:03,280 --> 02:12:10,280
Yes, but in other object oriented languages, I don't remember for example JavaScript has

1237
02:12:12,400 --> 02:12:18,440
a join, but if it does, typically is the method is associated to the list and the argument

1238
02:12:18,440 --> 02:12:25,000
is the string that is going to be used to...

1239
02:12:25,200 --> 02:12:30,200
I think it wasn't really that difficult to do it the other way around, but for some reason

1240
02:12:30,200 --> 02:12:35,200
they decided, I really don't know if it was Guido who decided to do it this way, but once

1241
02:12:35,200 --> 02:12:40,080
again, if you're using Python only, it's not a big issue because you already know this,

1242
02:12:40,080 --> 02:12:44,080
but I find it sometimes confusing because in other languages I'm expecting to use it

1243
02:12:44,080 --> 02:12:49,480
and the arguments in the other way, okay? But it's just a comment there, okay? It really

1244
02:12:49,480 --> 02:12:53,520
doesn't really have to be in a certain way, okay?

1245
02:12:53,520 --> 02:13:00,520
Here in line 163, 163, we separate, we extract the extension of the file that was provided

1246
02:13:04,620 --> 02:13:11,620
in the command line arguments, okay? So if my file was called hello world dot fourth,

1247
02:13:12,040 --> 02:13:16,160
the fourth extension we're going to use is a four followed by th, okay? It's a fourth

1248
02:13:16,160 --> 02:13:22,880
extension. We eliminate the extension, the dot and the extension, and now we have the

1249
02:13:22,880 --> 02:13:29,240
full name without extension of our input file and we use that file name for two things.

1250
02:13:29,240 --> 02:13:36,240
We're going to create a what file in our file directory as part of our local file system

1251
02:13:38,000 --> 02:13:43,200
and corresponding wasm and this wasm here, this actually calls, if we look at the implementations

1252
02:13:43,200 --> 02:13:48,680
right here, calls a function called what to wasm which does exactly the same thing as

1253
02:13:48,680 --> 02:13:54,160
the what to wasm utility that we use from the command line, okay? These happen to have

1254
02:13:54,160 --> 02:14:00,400
the same name but the one that we use in the command line was part of this webit tools

1255
02:14:00,400 --> 02:14:06,120
that you can use from the command line. This what to wasm is part of a package called wasmer,

1256
02:14:06,120 --> 02:14:13,120
okay? Wasmer python, okay? Which is another runtime, runtime system for web assembly

1257
02:14:14,080 --> 02:14:19,240
and this one particularly well runs with python, okay? But the general idea is the same. It

1258
02:14:19,240 --> 02:14:25,040
converts, in this case, what is contained in a string. It's converted into a binary

1259
02:14:25,040 --> 02:14:31,240
object, okay? Which we then in line 148 write into a file, okay? So I'm writing these two

1260
02:14:31,240 --> 02:14:37,680
files, the what and the wasm file. Strictly speaking, we commit the what file because

1261
02:14:37,800 --> 02:14:43,880
this was created just as an intermediately thing, an intermediate thing but actually

1262
02:14:43,880 --> 02:14:48,440
we don't really need it once we used it to create the wasm file, okay? But because it's

1263
02:14:48,440 --> 02:14:53,120
useful and educational, we can have the what file and we can open it in an editor and see

1264
02:14:53,120 --> 02:14:58,160
what it has. Especially when we're doing the development, it's very useful for debugging

1265
02:14:58,160 --> 02:15:02,180
purposes and see if we did everything correctly, okay? So this is why we're creating these

1266
02:15:02,180 --> 02:15:02,880
two files. Yes?

1267
02:15:02,880 --> 02:15:09,880
You need to use special tools to actually do that, okay? So just for example, I mean

1268
02:15:19,600 --> 02:15:26,600
if you want to look at it now, I'm currently still here at the web directory and I wasn't

1269
02:15:26,720 --> 02:15:33,720
really prepared for this but let's see if I remember. There is a utility available here

1270
02:15:34,240 --> 02:15:41,240
that is called wasm, I think it's wasm object, object dump it's called, obgdump. Where here

1271
02:15:44,800 --> 02:15:49,180
you can use for example the option minus d, this one disassembles and then you specify

1272
02:15:49,180 --> 02:15:55,640
here your wasm file. And this one will generate the disassembled code of whatever you have

1273
02:15:55,640 --> 02:16:00,000
in here, okay? This is not in the notes, okay? But just write it down if you find this amusing

1274
02:16:00,000 --> 02:16:06,840
or interesting. Here it actually displays the disassembly. As you can see it's basically

1275
02:16:06,840 --> 02:16:12,600
the same instructions but the rest of it is not using the names of our parameters and

1276
02:16:12,600 --> 02:16:17,840
even the constants as you can see are actually in hexadecimal so they might be a little bit

1277
02:16:17,840 --> 02:16:24,840
complicated to understand. But here these are the hexadecimal equivalent byte codes

1278
02:16:24,840 --> 02:16:31,840
you can call them, okay? For the program that we have here, okay? So this is a way of inspecting

1279
02:16:32,200 --> 02:16:36,160
your binary file if you want to. Okay, once again you can't or you shouldn't really open

1280
02:16:36,160 --> 02:16:39,880
wasm files in an editor but there are tools that allow you to inspect it like this one

1281
02:16:39,880 --> 02:16:46,880
here. Okay, the wasm hyphen or dash object dump, okay? Using minus d this allows you

1282
02:16:47,880 --> 02:16:54,880
to do a disassembly. So this you can see the corresponding code. As you can see this one

1283
02:16:54,880 --> 02:17:00,880
here represents the AVG2 function and this one is the AVG3 one, okay? And it has the

1284
02:17:00,880 --> 02:17:05,880
same instructions that we have here plus it adds some, for example we didn't put an explicit

1285
02:17:05,880 --> 02:17:12,880
end but here it's actually added. And instead of using the option minus d you can use the

1286
02:17:12,880 --> 02:17:19,880
minus x and this one gives you the disposition of the different sections that the wasm file

1287
02:17:20,720 --> 02:17:26,600
has, okay? It has a section for types, a section for functions, a section for exports and then

1288
02:17:26,600 --> 02:17:31,300
a section for code, okay? So this one allows us to see more in detail the corresponding

1289
02:17:31,300 --> 02:17:38,300
sections that are available, okay? So this utility is wasm dash obj dump, okay? If you

1290
02:17:39,100 --> 02:17:45,540
want to look at what's in the wasm file, okay? Once again if you try to open it, I mean you

1291
02:17:45,540 --> 02:17:50,580
can try it, open the wasm file you get this message saying the file is not displayable

1292
02:17:50,580 --> 02:17:54,860
in the editor because it's either binary or uses unsupported text encoding, okay? Do you

1293
02:17:54,860 --> 02:18:01,860
want to open it anyway? Well, let's say yes, okay? Use the text editor and okay, it doesn't

1294
02:18:02,620 --> 02:18:07,740
really look like anything useful, okay? As you can see something interesting that is available

1295
02:18:07,740 --> 02:18:12,420
there is that it contains a name, you can see the name of our exported functions, avg2

1296
02:18:12,420 --> 02:18:19,420
and avg3, here they are. Yeah, and another interesting thing is that it has a magic number

1297
02:18:23,540 --> 02:18:28,980
at the beginning, okay? It starts with, don't remember what's the very beginning here, it's

1298
02:18:28,980 --> 02:18:35,980
probably easier to look here at using an ordinary xdump. Let's see if this works. Okay, so this

1299
02:18:37,740 --> 02:18:44,740
xdump just places all the contents and you can see here the magic number at the beginning

1300
02:18:48,740 --> 02:18:55,740
of this file is zero which is this represented as this dot and here we have 6173 and 6D,

1301
02:18:57,300 --> 02:19:01,700
these are hexadecimal numbers, they correspond to the letters A, S and M. This is how we

1302
02:19:01,860 --> 02:19:07,540
can see that this is actually a binary as in WebAssembly text file, okay? Binary file,

1303
02:19:07,540 --> 02:19:14,540
binary file, okay? So this is using a standard Unix or Linux utility call xdump just to see

1304
02:19:14,580 --> 02:19:20,900
the content of the files. Notice that xdumps allow us to see an hexadecimal of the corresponding

1305
02:19:20,900 --> 02:19:25,580
bytes that are in part, so this is useful when you have a binary file, okay? But it

1306
02:19:25,580 --> 02:19:31,180
doesn't really give us a lot of information, it just, well, it's not immediately obvious

1307
02:19:31,380 --> 02:19:35,580
but it contains all the byte encoding for the instructions and here's the magic number

1308
02:19:35,580 --> 02:19:41,580
and as you can see here, this is a section of the exports, okay? That is in the previous

1309
02:19:41,580 --> 02:19:48,580
output that we had here, export two, it has A, B, G, 2 and 3 which we can see that they're

1310
02:19:48,580 --> 02:19:54,220
actually here, okay? And well, the rest is obviously valid information but an interesting

1311
02:19:54,220 --> 02:20:00,660
thing here is that the WebAssembly binary files that we can see here are fairly small.

1312
02:20:00,660 --> 02:20:07,660
I don't know if you've seen, for example, if you use any compiler for C or C++ or Go

1313
02:20:07,660 --> 02:20:15,660
or Rust. In C and C++ typically an executable binary file is, with all the information that

1314
02:20:15,660 --> 02:20:23,660
it requires, is typically a few hundred or maybe tens of thousands of kilobytes, of bytes,

1315
02:20:23,660 --> 02:20:28,980
excuse me, big, okay? So you might have a Hello World and it's, I don't know, just to

1316
02:20:28,980 --> 02:20:35,980
say number, 80,000 bytes wide or big, your corresponding file, okay? WebAssembly is very,

1317
02:20:35,980 --> 02:20:42,380
very, very small and this is very useful when you're transporting or sending your files

1318
02:20:42,380 --> 02:20:46,980
between a server and a client. You want really your files to be very small, okay, because

1319
02:20:46,980 --> 02:20:51,060
if they're very big, of course, it's going to take much more bandwidth to actually get

1320
02:20:51,060 --> 02:20:56,820
it there where you want to. So WebAssembly is a really compact and small format and it's

1321
02:20:56,820 --> 02:21:08,820
very useful as it is, okay? So going back, let's see, where were we? We should be able

1322
02:21:08,820 --> 02:21:17,540
at this point, here's a description of what we explained a moment ago. There's this thing

1323
02:21:17,540 --> 02:21:23,460
that we need to see. In order to run our code, remember WebAssembly needs a hosting environment

1324
02:21:23,460 --> 02:21:30,220
to run. The examples that we saw a moment ago using WASM3, that was a runtime environment.

1325
02:21:30,220 --> 02:21:35,020
That actually is an interpreter that allows us to see our code running. But we're now

1326
02:21:35,020 --> 02:21:43,060
going to be integrating it using this Python package called WASMIR, okay? WASMIR has all

1327
02:21:43,060 --> 02:21:47,540
the functionality to do most of the things that you would expect to process WebAssembly

1328
02:21:48,540 --> 02:21:54,340
and binary files, okay? It allows you to take a WebAssembly, a WAT file, a WebAssembly text

1329
02:21:54,340 --> 02:22:00,300
format, and it converts into WASM, to the binary format. It can take an already compiled

1330
02:22:00,300 --> 02:22:08,020
WASM file in binary form. It can actually take it, translate it, convert it, get the

1331
02:22:08,020 --> 02:22:14,460
module converted into an instance that it's called, and execute that, okay, within a Python

1332
02:22:14,860 --> 02:22:19,540
program, okay? So this is a really interesting part of how all this is integrated. And in

1333
02:22:19,540 --> 02:22:24,340
order to see that, there is this program here. I'm not going to look at it in too much detail.

1334
02:22:24,340 --> 02:22:31,100
But this one is in this program called execute.py. It has all the functionality. Let's open

1335
02:22:31,100 --> 02:22:47,300
it here quickly. Where am I? Oh, here we are. Let's close this. And let's open here execute.py.

1336
02:22:47,300 --> 02:22:53,700
So here, if you go to the very end, okay, this is what the main function does here.

1337
02:22:53,700 --> 02:22:57,380
Just as we did in the previous program, it checks that the number of arguments are correct

1338
02:22:57,380 --> 02:23:04,020
here. We're expecting to receive a WASM file, okay? If it is, we create an instance. This

1339
02:23:04,020 --> 02:23:09,500
create instance just encapsulates all the logic that is required. Here it is. This actually

1340
02:23:09,500 --> 02:23:15,220
uses extensively a lot of functionality provided by WASM. So if you really want to go and see

1341
02:23:15,220 --> 02:23:20,900
how all this works, check the WASM documentation. It needs to create several objects, a store

1342
02:23:20,900 --> 02:23:25,340
object, an instance, a module, and so on. So I'm putting everything here just together

1343
02:23:25,340 --> 02:23:31,260
so that it just works. As long as you send a file name, they're in line number 54, a

1344
02:23:31,260 --> 02:23:38,180
file name that is actually a valid WASM file, okay, it will be able to read it, to instantiate

1345
02:23:38,180 --> 02:23:42,780
it, and to do just-in-time compilation and everything that is required. Notice here that

1346
02:23:42,780 --> 02:23:49,180
we're using this operation called engine.jit. Okay, this is the just-in-time compilation.

1347
02:23:49,180 --> 02:23:53,820
Okay? And at the end, we return this instance object that contains all the information.

1348
02:23:53,820 --> 02:23:57,020
Now, another thing that is important here is that it calls this make import object,

1349
02:23:57,020 --> 02:24:03,860
which is a function that is just over here. And the interesting part here is that it contains

1350
02:24:03,860 --> 02:24:11,500
the code that we imported from our WebAssembly modules, okay? Remember, at the very beginning

1351
02:24:11,500 --> 02:24:17,660
of what we're going to be producing, we had three import instructions. And these are the

1352
02:24:17,660 --> 02:24:21,900
functions that are going to be called whenever we do a call to the corresponding function,

1353
02:24:21,900 --> 02:24:26,700
okay? So here we have the emit, the input, and the print instructions. These are Python

1354
02:24:26,700 --> 02:24:31,220
instructions. As you can see, for example, the print is very simple. It's, we receive

1355
02:24:31,220 --> 02:24:36,060
here an integer. We use actually annotations here so that the tool knows what we're expecting

1356
02:24:36,060 --> 02:24:41,660
to send as input and to produce as output. But here, we receive here an integer. And

1357
02:24:41,660 --> 02:24:45,780
we just use standard print. Actually, this function is called underscore print because

1358
02:24:45,780 --> 02:24:50,260
otherwise it would enter into a conflict with a predefined function called print. We just

1359
02:24:50,500 --> 02:24:55,740
print the value of x, which is an integer. And we put it at the end just instead of a

1360
02:24:55,740 --> 02:25:00,060
standard new line, which is what typically ends our print instruction, we're ending with

1361
02:25:00,060 --> 02:25:07,260
a space here, okay? For the input, we use the input instruction and we call int. If

1362
02:25:07,260 --> 02:25:12,220
this happens to produce an exception, a value error exception, we just return a zero, okay?

1363
02:25:12,220 --> 02:25:16,860
So the input doesn't crash, okay? If you put anything that is not a valid integer, it just

1364
02:25:16,860 --> 02:25:23,860
returns a zero, okay? And here we have the emit, which is very similar to print. We just

1365
02:25:24,580 --> 02:25:31,020
convert x, which is an integer, into its corresponding character. So we use the chr, which is a standard

1366
02:25:31,020 --> 02:25:36,900
function in Python, that takes an integer value and converts it into a string that contains

1367
02:25:36,900 --> 02:25:41,660
the corresponding character of that code point, okay? And in the case of the end, we don't

1368
02:25:41,660 --> 02:25:48,660
add a space, we just keep the cursor where it is, okay? So with all that in mind, we

1369
02:25:49,300 --> 02:25:54,220
should be able to see how this can work. So in order to make it work, we need to change

1370
02:25:54,220 --> 02:25:59,420
first to this directory called forth, okay? Once again, remember you can change it. Here's

1371
02:25:59,420 --> 02:26:04,780
the command if you want to change it from anywhere in your current system. So you can

1372
02:26:04,780 --> 02:26:11,020
use that one there. It's a CD instruction. Or you can, if you know how to navigate here

1373
02:26:11,020 --> 02:26:17,020
in Linux, you can go to the correct directory. You can change to a parameter directory and

1374
02:26:17,020 --> 02:26:24,020
go to the directory you want, okay? And here in the forth, so in order to run the compiler,

1375
02:26:24,380 --> 02:26:30,460
the compiler is called cheeky forth, okay? You just put the name. Remember here, the

1376
02:26:30,460 --> 02:26:35,780
cheeky forth actually has a hash bang at the beginning and it has execution permission,

1377
02:26:35,780 --> 02:26:41,540
so we can just execute it like this, okay? Dot slash and then the name, okay, has, it

1378
02:26:41,540 --> 02:26:48,540
knows, the operating system knows that we are able to run this program, okay? And let's

1379
02:26:48,540 --> 02:26:54,780
try it with first example, which is called numbers, okay? This is a forth program. Let's

1380
02:26:54,780 --> 02:27:01,780
quickly look at it. Here's examples and here's numbers, okay? So we have a quick description

1381
02:27:02,620 --> 02:27:07,740
of what this does. As you can see, it says adds and multiplies two user provided numbers.

1382
02:27:07,740 --> 02:27:13,140
So here we start with these two emit instructions. This actually just prints a greater than symbol

1383
02:27:13,140 --> 02:27:19,100
and then a space, so it looks like a prompt and then allows us the user to do an input

1384
02:27:19,100 --> 02:27:22,400
and whatever its input is placed on top of the stack and with this, we pop the stack

1385
02:27:22,400 --> 02:27:28,520
and just copy this into the variable x and we do the same thing with y. And then we have

1386
02:27:28,520 --> 02:27:34,080
all this, which will print actually the value of x plus the value of y and gives us a corresponding

1387
02:27:34,080 --> 02:27:39,520
result, okay? So this is our first program. Remember, this is forth. This is our input

1388
02:27:39,520 --> 02:27:46,520
program that we're, our compiler currently knows how to translate into WebAssembly, okay?

1389
02:27:46,640 --> 02:27:51,540
We run it. We shouldn't have any problems. Notice here that it creates two files, a wasm

1390
02:27:51,540 --> 02:27:57,340
and a watt, okay? We can inspect with the editor the watt file, okay? So we can open

1391
02:27:57,340 --> 02:28:04,340
it and see what it is, what we have here. So now this is the code produced by the compiler,

1392
02:28:04,560 --> 02:28:11,560
okay? As you can see, it's quite a lot of code. Our program was, original program was

1393
02:28:12,400 --> 02:28:18,780
much shorter. It was actually just 14 lines of code, okay? But the corresponding watt

1394
02:28:18,780 --> 02:28:24,220
code, well, requires much more lines, okay? But I mean, at the end, that's the point of

1395
02:28:24,240 --> 02:28:29,040
actually writing a compiler so that we don't need to write all this by hand, okay? I mean,

1396
02:28:29,040 --> 02:28:34,960
that's why compilers were actually born. Remember that when computer as an industry started,

1397
02:28:34,960 --> 02:28:39,440
all programming was done in machine code or in assembly language, okay? But then suddenly

1398
02:28:39,440 --> 02:28:45,440
some people realized, well, what if we had a program that we could write our code in

1399
02:28:45,440 --> 02:28:49,480
a much higher level and then translate it into machine code or assembly, okay? That's

1400
02:28:49,480 --> 02:28:56,340
exactly what we're doing here, okay? So very powerful, the idea of getting something written

1401
02:28:56,340 --> 02:29:00,940
in a certain notation, translating it into something that the computer can understand

1402
02:29:00,940 --> 02:29:07,940
more easily, okay? So how do we run it? Once again, you can inspect all this with much

1403
02:29:09,140 --> 02:29:15,380
more detail, okay? But this is exactly what we had in this program here translated into

1404
02:29:15,380 --> 02:29:20,160
WebAssembly. So just to run it here, once again in the terminal, we now run the execute

1405
02:29:20,160 --> 02:29:27,160
script and we tell it where to find the WASM file, okay? In this case, it's also, it's

1406
02:29:28,580 --> 02:29:34,480
placed in the same place where the source file was. So here we have WASM and Watt. We

1407
02:29:34,480 --> 02:29:41,480
run the WASM, okay? The Watt was useful to create the WASM. And it's now running, okay?

1408
02:29:42,240 --> 02:29:48,680
So think of it, what's happening here. We, WASM, this Python package that is the WebAssembly

1409
02:29:48,680 --> 02:29:55,680
runtime is able to read this file, okay, which is in this binary format. It does a just-in-time

1410
02:29:57,080 --> 02:30:04,080
translation of that file into the native platform, whatever is running here in our, in our Git

1411
02:30:04,280 --> 02:30:11,280
pod workspace, okay? It gets translated. This is actually an x86 computer. So it gets translated

1412
02:30:11,560 --> 02:30:18,040
into that native code based on, on, on registers and so on. And once again, the, strictly speaking,

1413
02:30:18,040 --> 02:30:22,480
the WASM code can't really interface with the rest of the world, but because we have

1414
02:30:22,480 --> 02:30:28,280
these imports, we're able to call Python functions that will do that, that job for us, okay?

1415
02:30:28,280 --> 02:30:32,560
But notice that even though what we're looking at, what, what gets printed, and in this moment

1416
02:30:32,560 --> 02:30:37,760
it's actually expecting us to type something, all that is being done through Python. But

1417
02:30:37,920 --> 02:30:41,600
the order in which the things are done and the arithmetic operations like the addition

1418
02:30:41,600 --> 02:30:45,400
and multiplication is going to be done, all that is done through the native code that

1419
02:30:45,400 --> 02:30:49,840
was translated from the WebAssembly binary code, okay? So, I mean, there's a lot of stuff

1420
02:30:49,840 --> 02:30:54,760
actually happening here, okay? But at the end it gives me just illusion of everything

1421
02:30:54,760 --> 02:31:01,760
working nicely together. So let's put, I don't know, a 10 and let's put a minus 5, okay?

1422
02:31:01,760 --> 02:31:08,760
And these two lines, 11 and 14, these are the ones in charge of displaying what we have

1423
02:31:11,280 --> 02:31:17,600
here, okay? So as you can see, it is, it is working. And we have a Hello World, okay?

1424
02:31:17,600 --> 02:31:23,720
We typically start with Hello World in many languages, but here it's not that really interesting.

1425
02:31:23,720 --> 02:31:30,720
As you can see here, we start in line number 4, we start pushing a 72. What's that 72?

1426
02:31:32,440 --> 02:31:39,440
It's the capital letter H, yes, exactly. And we do an emit, so that prints the H, okay?

1427
02:31:40,560 --> 02:31:46,280
And then we have 101 emit, that would be the lowercase e, okay? And we emit it, okay? And

1428
02:31:46,280 --> 02:31:52,000
so on. As you can see, putting messages here is pretty, pretty difficult, pretty error-prone,

1429
02:31:52,000 --> 02:31:59,000
okay? But it works, okay? And at the end it has a new line. So we can now try it out,

1430
02:31:59,160 --> 02:32:05,320
okay? So we first need to compile it. We use a Cheeky Fourth compiler. The file is in the

1431
02:32:05,320 --> 02:32:11,920
examples directory and it's called HelloWorld.fourth, okay? Once again, remember when we use Cheeky

1432
02:32:11,920 --> 02:32:17,960
Fourth, this creates two files and here they are. One has same, both have the same extension

1433
02:32:17,960 --> 02:32:23,920
of the program that it compiled. The program that received with, as input has a .f4th,

1434
02:32:24,880 --> 02:32:30,320
fourth extension, okay? And it produces two files with the same name but different extensions,

1435
02:32:30,320 --> 02:32:37,320
WASM and Watt. Once again, you can open the Watt to see what it has. So this is the HelloWorld.

1436
02:32:38,240 --> 02:32:45,240
As you can see, it's pretty, pretty long, 37 lines of code, okay? And in order to run

1437
02:32:46,480 --> 02:32:53,480
it, we use execute. And we specify the directory. And then we have the directory. And then we

1438
02:32:53,920 --> 02:33:00,920
run the file with extension WASM here in this case. And it says HelloWorld, okay? So it's

1439
02:33:04,040 --> 02:33:11,040
working fine. Okay. I don't know if there are any questions so far. No? Okay. Okay,

1440
02:33:11,040 --> 02:33:18,040
now we're going to give you, but basically there's only two exercises left, okay? I'm

1441
02:33:24,440 --> 02:33:31,120
going to give you some time so that you can solve them now. Okay, let's just quickly explain

1442
02:33:31,120 --> 02:33:37,880
what you're supposed to do in both these exercises, okay? So exercise D, which is section 5.5 of

1443
02:33:37,960 --> 02:33:44,960
our tutorial notes, okay? We're going to add a bunch of new operations, okay? And this

1444
02:33:46,280 --> 02:33:51,360
is fairly easy, okay? So, for example, if we want to have support for minus, which we

1445
02:33:51,360 --> 02:33:57,000
currently don't have, okay? What are we going to do? We're going to add this word, the minus,

1446
02:33:57,000 --> 02:34:02,160
to the dictionary called operation. And I'm giving you here so that you don't need to

1447
02:34:02,160 --> 02:34:06,480
look it up. This is the corresponding instruction that needs to be done whenever it finds a

1448
02:34:06,480 --> 02:34:12,600
minus, okay? So let me go here quickly. You would go to the cheeky forth file. Here it

1449
02:34:12,600 --> 02:34:19,600
is. Look for the operations dictionary, the operation dictionary, okay? It doesn't really

1450
02:34:19,920 --> 02:34:23,800
matter where you put it. I'm going to put it here after the plus, but it really doesn't

1451
02:34:23,800 --> 02:34:29,920
really matter. You put the name of the word. In this case, it's the minus. And inside a

1452
02:34:29,920 --> 02:34:36,440
list, you need to put a string with a corresponding WebAssembly instruction. What's the corresponding

1453
02:34:36,440 --> 02:34:41,520
WebAssembly instruction here? It's I32.sub. Remember, I'm putting you there a link if

1454
02:34:41,520 --> 02:34:45,880
you wanted to look at the documentation and see exactly how it works and variations of

1455
02:34:45,880 --> 02:34:50,160
this instruction, okay? But at this moment, if you just use the instruction that I placed

1456
02:34:50,160 --> 02:34:54,360
over there, that should do all the trick, okay? So you can even copy-paste it if you

1457
02:34:54,360 --> 02:35:01,360
prefer. I32 sub, okay? And you need to do exactly the same thing there for all the instructions

1458
02:35:02,160 --> 02:35:08,560
here, okay? Which are the one we just did, the minus, the slash, which does division,

1459
02:35:08,560 --> 02:35:15,560
and then we have equal, not equal, less than, less or equal, greater than, greater or equal,

1460
02:35:16,880 --> 02:35:21,840
okay? And please check out the corresponding instructions. Some of them are not necessarily

1461
02:35:21,840 --> 02:35:27,280
immediately obvious what they are, okay? But I placed it here. So you need to complete

1462
02:35:27,280 --> 02:35:34,280
that dictionary so that it has all of them, okay? And if everything works correctly, okay,

1463
02:35:34,760 --> 02:35:41,760
you should be able to test it for this exercise D using this file which is called operators.forth,

1464
02:35:42,000 --> 02:35:49,000
okay? So if we go and open that file, here it is, operators.forth, okay? This one tests

1465
02:35:50,000 --> 02:35:56,600
us everything, okay? The subtraction, the division, the equal operation, the not equal,

1466
02:35:56,600 --> 02:36:02,640
and so on, and it generates some values there, okay? All these operations that are like equal

1467
02:36:02,640 --> 02:36:06,740
and different and so on, the way that this works is that, for example, here it's asking

1468
02:36:06,740 --> 02:36:12,760
if x is equal to y. If they are, it pushes a 1 in the top of the stack, the 1 indicating

1469
02:36:12,760 --> 02:36:17,480
true, okay? And if they're not equal, it puts a 0 indicating that it's false, meaning that

1470
02:36:17,480 --> 02:36:24,480
they're not equal, okay? So I take the expected values here that are produced, add some additional

1471
02:36:25,240 --> 02:36:32,160
values over here and do some emits. So if you run this and everything is working fine,

1472
02:36:32,160 --> 02:36:37,240
it says here that it prints everything is working fine if everything is working fine,

1473
02:36:37,240 --> 02:36:43,200
okay? So if you did all your work correctly, it should print this. If some of the characters

1474
02:36:43,240 --> 02:36:48,040
are not correct, maybe you mistakenly did something else, okay? If something's wrong,

1475
02:36:48,040 --> 02:36:51,520
instead of looking at all these individual characters, you might see some characters

1476
02:36:51,520 --> 02:36:57,120
change, okay? So if it's not exactly this string, you need to check and see if you did

1477
02:36:57,120 --> 02:37:03,160
something wrong or if you get an error, okay? Something was missing there, okay? So hopefully

1478
02:37:03,160 --> 02:37:06,400
with that introduction, you should be able to solve this one here. And let's go directly

1479
02:37:06,400 --> 02:37:13,400
with exercise E as well, okay? Exercise E, what we're gonna do is we're gonna add a do

1480
02:37:13,920 --> 02:37:20,920
loop here, okay? Two words that actually correspond to like a while loop in other languages including

1481
02:37:23,000 --> 02:37:30,000
Python, okay? It basically works exactly like that, like a while in Python or in C or in

1482
02:37:30,080 --> 02:37:36,360
Java or in any other language, okay? So do indicates this word, indicates the very start

1483
02:37:36,360 --> 02:37:43,360
of our loop, okay? Then we expect a condition here. The condition is just a cheeky fourth

1484
02:37:44,280 --> 02:37:51,280
code that if the result in the top of the stack once the condition is evaluated is the

1485
02:37:52,040 --> 02:37:57,920
value of zero, okay? Zero, remember, represents a false value, okay? If we have a zero on

1486
02:37:57,920 --> 02:38:02,240
the top of the stack, well, we pop it. If we find a zero, we go to the end of the loop,

1487
02:38:02,240 --> 02:38:07,240
okay? That means go to whatever instruction follows the loop word here, okay? So just

1488
02:38:07,240 --> 02:38:11,160
like a while in other languages, okay? We evaluate. If this is false, we end the loop.

1489
02:38:11,160 --> 02:38:15,800
Exactly the same thing happens here. We evaluate the condition. If we get a zero on the top

1490
02:38:15,800 --> 02:38:22,800
of the stack, we pop it and we go to the end of our do loop structure here, okay? Or construct.

1491
02:38:23,800 --> 02:38:30,400
But if it's true, and true means anything that is not zero, okay? We go to whatever

1492
02:38:30,400 --> 02:38:34,880
is after the question mark and we call here the body. We execute the body here as many

1493
02:38:34,880 --> 02:38:39,560
times as we want, okay? So here's an example how this is supposed to work, okay? So we

1494
02:38:39,560 --> 02:38:44,440
start here X. We initialize it. Remember, this sets the value of X to whatever we have

1495
02:38:44,440 --> 02:38:47,800
on the top of the stack, which in this case is going to be a one. We want to print all

1496
02:38:47,800 --> 02:38:52,680
the numbers from one to ten, each number in its own line. Then here we start our loop,

1497
02:38:52,680 --> 02:38:56,200
okay? I'm using indentation not because it's required, just because it makes it simpler

1498
02:38:56,200 --> 02:39:03,200
to understand. We have this. I'm asking here if X is less or equal to ten. If it is, these

1499
02:39:07,240 --> 02:39:10,800
words here are going to leave a one in the top of the stack, so we pop the stack. And

1500
02:39:10,800 --> 02:39:14,960
if it's true, we'll continue with what falls. But if it's false, which means we had a zero

1501
02:39:15,000 --> 02:39:21,160
here, it goes and executes, continues executing whatever falls as a loop instruction here

1502
02:39:21,160 --> 02:39:26,680
of a loop word, okay? But if it's true, okay? I mean, if it's false, it ends the loop. But

1503
02:39:26,680 --> 02:39:31,560
if it's true, it does the body. In this case, this body is these instructions. We print

1504
02:39:31,560 --> 02:39:37,760
the current value of X, okay? And we print a new line. And in this last instruction,

1505
02:39:37,760 --> 02:39:44,600
we add X plus one and then we assign the result to X, okay, using X bang here. And we go again

1506
02:39:44,600 --> 02:39:49,600
to the beginning and ask if we, our current value of X is still less or equal to ten,

1507
02:39:49,600 --> 02:39:55,600
okay? So this prints one, two, three, four until the ten, okay? So once we add this instruction

1508
02:39:55,600 --> 02:39:59,960
here, you notice that we're not going to add an if instruction. The if, believe it or not,

1509
02:39:59,960 --> 02:40:04,680
can be simulated using a do with a little bit of imagination. It's probably not as simple

1510
02:40:04,680 --> 02:40:11,680
as to use a standard if instruction, but if you think of it, the do loop, even though

1511
02:40:12,320 --> 02:40:17,680
this is supposed to be repeated several times, you can guarantee that it only does the condition

1512
02:40:17,680 --> 02:40:22,880
once and then set another variable so it doesn't go in again, okay? So the do loop, even in

1513
02:40:22,880 --> 02:40:28,960
the primitive way, can actually support some kind of if construct, okay? Once we add the

1514
02:40:28,960 --> 02:40:35,960
do loop here, just as an interesting fact here, the cheeky fourth language is converted

1515
02:40:36,000 --> 02:40:42,440
into something we computer scientists call Turing complete language, okay? And in general,

1516
02:40:42,440 --> 02:40:48,360
this is CS jargon to say that our program, our language actually is able to do the same

1517
02:40:48,360 --> 02:40:53,280
thing that a Turing machine can do, okay? So we basically have a full programming language

1518
02:40:53,280 --> 02:40:59,320
here available that can do some pretty neat stuff, okay? And the good news for us is that

1519
02:40:59,320 --> 02:41:05,280
the do and the loop and the question mark are really straightforward to implement. I'm

1520
02:41:05,440 --> 02:41:11,760
not going to explain exactly how they do it, okay? If you have that kind of curiosity,

1521
02:41:11,760 --> 02:41:15,920
check out here the links of these instructions, block, loop, and branch, which are the ones

1522
02:41:15,920 --> 02:41:20,440
that we need to use. But notice here, you're going to change the operation dictionary just

1523
02:41:20,440 --> 02:41:25,040
like in the previous exercise, and when you find a do, okay, you put a list with these

1524
02:41:25,040 --> 02:41:30,480
two instructions, okay, as strings. When you find a question mark, okay, the associated

1525
02:41:30,480 --> 02:41:37,480
text or code in this case is these two instructions. And finally, the loop. When you find the loop

1526
02:41:38,120 --> 02:41:44,640
as a word in the cheeky fourth program, you convert it into these three instructions in

1527
02:41:44,640 --> 02:41:48,960
the corresponding, well, in the list, each one as an individual string, okay? And the

1528
02:41:48,960 --> 02:41:54,840
rest is actually, the compiler actually knows how to produce or generate all this code directly

1529
02:41:54,840 --> 02:42:00,200
as long as it's in the dictionary in the way that I just described, okay? So once you have

1530
02:42:00,200 --> 02:42:04,120
that, you should be able, well, just a quick note over here, and this is something that

1531
02:42:04,120 --> 02:42:11,120
was mentioned a moment ago. The do loop actually introduces a new stack, which is independent

1532
02:42:14,280 --> 02:42:20,000
of the stack that was actually available before the do loop started, okay? So you have to

1533
02:42:20,000 --> 02:42:26,200
understand that you start with a brand, when you have a do, you start with a brand new

1534
02:42:26,200 --> 02:42:31,760
empty stack, okay? And you have to make sure that at the end, the stack is empty, okay?

1535
02:42:31,760 --> 02:42:37,360
When you finish your code, okay, you have a condition, you have a body. At the end of

1536
02:42:37,360 --> 02:42:41,040
the body, you have to make sure, and at the end of the condition as well, you have to

1537
02:42:41,040 --> 02:42:46,440
make sure that the stack has no elements there, okay? The example that we just saw a moment

1538
02:42:46,440 --> 02:42:50,960
ago guarantees that that's how it works, okay? So most of the time it should make sense to

1539
02:42:50,960 --> 02:42:55,680
make it work that way, but if it doesn't, you'll get a validation error, okay? So just

1540
02:42:55,680 --> 02:43:02,680
mention that. So, yes?

1541
02:43:02,680 --> 02:43:09,680
Yes. Yeah, in this case, you need to use div underscore s because for integers, you can

1542
02:43:19,160 --> 02:43:23,480
have two interpretations. They can be signed or unsigned. In the case of floating point

1543
02:43:23,480 --> 02:43:28,200
numbers, they are always signed, okay? But integer numbers can have or not signed. So

1544
02:43:28,200 --> 02:43:32,880
you have two versions there. There's a div underscore s for signed values and a div underscore

1545
02:43:32,880 --> 02:43:37,000
u for unsigned, okay? And this is one of the reasons that I actually place explicitly the

1546
02:43:37,000 --> 02:43:42,920
instruction, okay? Because these are some of those things that are not necessarily obvious,

1547
02:43:42,920 --> 02:43:48,640
immediately obvious, okay? So yes, use div s. And this actually happens as well when you

1548
02:43:48,800 --> 02:43:53,680
use less than or less or equal. You need to specify you're using the signed version or

1549
02:43:53,680 --> 02:43:57,440
the unsigned, okay? Because it's a different instruction depending if you want to consider

1550
02:43:57,440 --> 02:44:04,440
or not your integers with or not a sign, okay? So once again, here you just need to add these,

1551
02:44:05,720 --> 02:44:09,920
associate these words in the dictionary, in the operation dictionary with these instructions,

1552
02:44:09,920 --> 02:44:16,920
okay? And if everything is fine, you should be able to run these remaining three programs,

1553
02:44:17,000 --> 02:44:24,000
one to t, one to ten dot fourth, triangle dot fourth, and pow two dot fourth, okay?

1554
02:44:27,240 --> 02:44:33,120
Just in the case of triangle and pow, I actually tested this code with my students a couple

1555
02:44:33,120 --> 02:44:39,520
days ago. And the immediate question is what am I supposed to input in these two programs?

1556
02:44:39,520 --> 02:44:45,520
So for these last two programs, try any value between five and twenty and see what happens,

1557
02:44:45,520 --> 02:44:52,520
okay? I'll be with you in just a moment, okay? So do these two exercises, test it finally

1558
02:44:53,880 --> 02:44:58,240
at the end with these three examples, okay? And if everything works, you're all done,

1559
02:44:58,240 --> 02:45:03,040
okay? I'll be here just to answer in general any questions that you might have. But just

1560
02:45:03,040 --> 02:45:10,040
let me tell you what's available here in the next section. These are some books. I've actually

1561
02:45:10,280 --> 02:45:13,960
read completely this one. This is a really short book and read a few chapters, not all

1562
02:45:13,960 --> 02:45:20,360
of it. But this is a very nice book if you want to have a really technical in-depth overview

1563
02:45:20,360 --> 02:45:25,660
of WebAssembly, okay? Both are available through the O'Reilly Media site, okay? But they're

1564
02:45:25,660 --> 02:45:31,840
also available on paper, I think. And some additional resources, okay? So check them

1565
02:45:31,840 --> 02:45:38,840
out if you want to see a little bit more in-depth any of the things that we've described so

1566
02:45:39,520 --> 02:45:45,760
far. And remember, the notes are full of links to Wasmr and to all the technologies that

1567
02:45:45,760 --> 02:45:48,720
we mentioned. So in any moment if you want to learn more about that, just follow the

1568
02:45:48,720 --> 02:45:54,120
link, okay? So please work on these. And basically, that's all the material that I'm going to

1569
02:45:54,120 --> 02:46:00,080
be presenting. So we have here until 12.30. If you have time and want to finish these

1570
02:46:00,080 --> 02:46:05,720
exercises, I've seen some people that needed to leave a little bit early. But I hope you

1571
02:46:05,720 --> 02:46:11,840
can try it because it's really interesting to see the final results of the full compiler

1572
02:46:11,840 --> 02:46:17,400
working, okay? And remember that at the end, this is typically the use case that we have

1573
02:46:17,400 --> 02:46:20,880
most of the time on WebAssembly. We've got a higher level language, in this case, Cheeky

1574
02:46:20,880 --> 02:46:25,640
Forth producing WebAssembly that we call from, in this case, a runtime system which happens

1575
02:46:25,640 --> 02:46:31,080
to be Python, okay? So here we're using Cheeky Forth, but in practice this could be produced,

1576
02:46:32,080 --> 02:46:38,600
the Wasmr file could have been produced by C compiler, C++ compiler, Rust, Go, et cetera.

1577
02:46:38,600 --> 02:46:43,480
There are many plenty of languages that you can use. But at the end, you typically write

1578
02:46:43,480 --> 02:46:47,320
it in a higher level language and let the compiler do the translation, okay? So what

1579
02:46:47,320 --> 02:46:52,400
we're doing here is writing our own compiler so that we can see how this process is done.

1580
02:46:52,400 --> 02:46:56,800
I hope you find interesting and amusing. A little compiler, I mean, it's fairly simple,

1581
02:46:56,800 --> 02:47:02,360
fairly straightforward, but it actually does produce a complete WebAssembly output, okay,

1582
02:47:02,360 --> 02:47:07,360
that we can actually run, okay? So please carry on with these exercises if you do have

1583
02:47:07,360 --> 02:47:12,880
time and I'll be here answering any questions that you might have at this point, okay? So

1584
02:47:12,880 --> 02:47:18,000
I think for recording purposes that would be all, okay? Thank you very much.

