1
00:00:00,000 --> 00:00:15,440
Hello, hello.

2
00:00:15,440 --> 00:00:17,440
Hi everybody.

3
00:00:17,440 --> 00:00:22,040
How's everyone doing today?

4
00:00:22,040 --> 00:00:24,440
Some people are doing okay, other people are face down on their computer.

5
00:00:24,440 --> 00:00:26,280
That's okay, we're still going to have a good time.

6
00:00:26,280 --> 00:00:27,280
How's everyone doing today?

7
00:00:27,280 --> 00:00:28,280
Good.

8
00:00:28,440 --> 00:00:29,960
Good, that's a little better.

9
00:00:29,960 --> 00:00:32,200
All right, awesome.

10
00:00:32,200 --> 00:00:37,440
My name is Andy Knight and I'm the automation panda and I will be your instructor for today.

11
00:00:37,440 --> 00:00:41,240
Just curious, are you all fairly familiar with Python?

12
00:00:41,240 --> 00:00:43,840
Say you have at least intermediate level experience?

13
00:00:43,840 --> 00:00:46,040
What kinds of roles do you all do?

14
00:00:46,040 --> 00:00:51,000
Raise your hand if you would consider yourself a developer or a software engineer.

15
00:00:51,000 --> 00:00:53,480
Okay, oh wow, a lot.

16
00:00:53,480 --> 00:00:56,280
Anybody who primarily would consider themselves a tester?

17
00:00:56,920 --> 00:00:59,160
Oh, a couple, a couple.

18
00:00:59,160 --> 00:01:04,160
Anyone who maybe like data science or DevOps oriented?

19
00:01:04,160 --> 00:01:07,120
Okay, okay, managers out there.

20
00:01:07,120 --> 00:01:09,880
Oh, okay, okay, very cool.

21
00:01:09,880 --> 00:01:11,560
Any other roles I didn't mention?

22
00:01:11,560 --> 00:01:19,840
Awesome, woo, I wish I had a prize for you.

23
00:01:19,840 --> 00:01:22,280
Cool, cool, good to know.

24
00:01:22,280 --> 00:01:25,440
That kind of helps me gauge what's going on here.

25
00:01:25,440 --> 00:01:30,280
Also some more questions, has anyone ever done automated testing, whether that's unit

26
00:01:30,280 --> 00:01:32,840
testing, web UI testing, raise your hand.

27
00:01:32,840 --> 00:01:37,400
Okay, so man, it seems like everybody has, almost everybody has touched it.

28
00:01:37,400 --> 00:01:40,520
Has anyone used Playwright before?

29
00:01:40,520 --> 00:01:41,840
That's what we're here to learn, right?

30
00:01:41,840 --> 00:01:44,680
One guy over there knows, so you're going to be my little helper, right?

31
00:01:44,680 --> 00:01:50,360
Sweet, all right, cool, cool, cool, fantastic.

32
00:01:50,360 --> 00:01:55,760
So like I said before, I am the Automation Panda.

33
00:01:55,760 --> 00:01:59,720
I like to talk and write about testing things.

34
00:01:59,720 --> 00:02:06,120
Be sure to read my blog at automationpanda.com, as well as keep up with me on Twitter.

35
00:02:06,120 --> 00:02:08,560
You can reach out to me any time after this workshop.

36
00:02:08,560 --> 00:02:10,160
Be like, hey Andy, what's going on?

37
00:02:10,160 --> 00:02:11,160
Got a question?

38
00:02:11,160 --> 00:02:12,440
Twitter's probably the best way to reach me.

39
00:02:12,440 --> 00:02:16,480
Plus, give me them nice, awesome follower counts going on.

40
00:02:16,480 --> 00:02:19,260
Sweet, right.

41
00:02:19,260 --> 00:02:25,500
So right now I work as a developer advocate at this awesome company called Appletools.

42
00:02:25,500 --> 00:02:28,660
Anyone know what Appletools does?

43
00:02:28,660 --> 00:02:33,420
Yeah, specifically visual testing.

44
00:02:33,420 --> 00:02:36,980
Anyone do visual testing before?

45
00:02:36,980 --> 00:02:39,940
Let me show you what visual testing is all about.

46
00:02:39,940 --> 00:02:43,420
So we got this picture here.

47
00:02:43,420 --> 00:02:45,900
Can we spot the differences?

48
00:02:45,900 --> 00:02:48,620
Got this happy little underwater scene.

49
00:02:48,620 --> 00:02:54,020
Take a moment and see how many differences you can spot between these two pictures.

50
00:03:15,220 --> 00:03:16,220
How many did we find?

51
00:03:18,940 --> 00:03:22,340
So five, six, eight, seven.

52
00:03:22,340 --> 00:03:25,980
Okay, let's name them out.

53
00:03:25,980 --> 00:03:28,740
What did we find?

54
00:03:28,740 --> 00:03:29,980
Mouth is different.

55
00:03:29,980 --> 00:03:30,980
That's one of them.

56
00:03:30,980 --> 00:03:37,060
Bubbles, crab, there's a whole missing fish, right?

57
00:03:37,060 --> 00:03:41,540
Oh yeah, the star.

58
00:03:41,540 --> 00:03:42,540
Okay.

59
00:03:42,540 --> 00:03:47,540
So we can look at this manually ourselves as humans and try to spot all the differences.

60
00:03:47,540 --> 00:03:52,420
What Appletools Visual AI does is it does this very, very easily.

61
00:03:52,420 --> 00:03:55,900
There are actually 10 differences between these.

62
00:03:55,900 --> 00:03:57,340
Nobody got 10, did they?

63
00:03:57,340 --> 00:03:59,580
No, we got like five, six, eight.

64
00:03:59,580 --> 00:04:03,020
This is the power of automated visual testing.

65
00:04:03,020 --> 00:04:07,340
Imagine doing this kind of thing on your web apps or your mobile apps.

66
00:04:07,340 --> 00:04:09,540
You make a change, how do you know that it's good?

67
00:04:09,540 --> 00:04:14,300
Well, maybe it accidentally made your layout shift over or a button disappear.

68
00:04:14,300 --> 00:04:18,720
You can incorporate automated visual testing techniques like this into your test cases

69
00:04:18,720 --> 00:04:23,020
and help catch errors and visual bugs like these.

70
00:04:23,020 --> 00:04:27,420
I like to say if a picture is worth a thousand words, a snapshot like this comparison is

71
00:04:27,420 --> 00:04:31,500
worth a thousand assertions.

72
00:04:31,500 --> 00:04:35,580
Other things I do at Appletools other than help people spot the differences is I run

73
00:04:35,580 --> 00:04:39,500
this thing or I'm director of this thing called Test Automation University.

74
00:04:39,500 --> 00:04:41,300
Has anyone heard of this before?

75
00:04:41,300 --> 00:04:42,540
Raise your hand.

76
00:04:43,420 --> 00:04:44,940
Nobody's heard of TAU?

77
00:04:44,940 --> 00:04:46,500
Oh my gosh.

78
00:04:46,500 --> 00:04:48,380
That's okay.

79
00:04:48,380 --> 00:04:52,540
So TAU is an online platform for learning about testing and automation.

80
00:04:52,540 --> 00:04:56,860
We have courses from some of the most awesome instructors across the world.

81
00:04:56,860 --> 00:04:59,860
Currently we have about 70 courses or so.

82
00:04:59,860 --> 00:05:03,820
So if you like this workshop and you want to learn more about testing and automation

83
00:05:03,820 --> 00:05:08,060
stuff, I would highly recommend checking out TAU.

84
00:05:08,060 --> 00:05:09,500
It's a pretty awesome thing.

85
00:05:09,500 --> 00:05:13,260
Okey dokey.

86
00:05:13,260 --> 00:05:21,060
So with all that front matter out of the way, let's talk about what we're going to do today.

87
00:05:21,060 --> 00:05:26,780
The name of this workshop is Awesome Web Testing with Playwright and Python.

88
00:05:26,780 --> 00:05:28,140
Something similar to that, right?

89
00:05:28,140 --> 00:05:32,860
If that's not the workshop you came for, sorry you're in the wrong room.

90
00:05:32,860 --> 00:05:41,420
So my goal today is not so much simply to teach you how to use Playwright as a tool.

91
00:05:41,420 --> 00:05:49,340
What I want us to learn today is how do we build good test automation projects for web

92
00:05:49,340 --> 00:05:52,460
apps, right?

93
00:05:52,460 --> 00:05:56,820
And this tutorial is one that I've actually given quite a few times in different forms.

94
00:05:56,820 --> 00:05:58,900
If you notice, this is me.

95
00:05:58,900 --> 00:06:00,420
I'm still wearing the same shirt.

96
00:06:00,420 --> 00:06:02,180
I even got better jeans this time.

97
00:06:02,180 --> 00:06:04,620
I'll check this out.

98
00:06:04,620 --> 00:06:08,980
But this was taken at DjangoCon 2019.

99
00:06:08,980 --> 00:06:14,860
And at DjangoCon 2019, I gave this workshop except I used Selenium instead of Playwright.

100
00:06:14,860 --> 00:06:16,780
And I did the Selenium workshop a number of times.

101
00:06:16,780 --> 00:06:22,940
In fact, at PyCon 2020 virtual, I gave this workshop and it was Selenium.

102
00:06:22,940 --> 00:06:28,580
So you might be wondering, Andy, why did you flip over to Playwright?

103
00:06:29,580 --> 00:06:37,500
I think Playwright today is a superior browser automation tool to Selenium.

104
00:06:37,500 --> 00:06:38,500
Now each is good.

105
00:06:38,500 --> 00:06:40,060
It doesn't mean Selenium sucks or anything.

106
00:06:40,060 --> 00:06:41,620
Selenium is still very good.

107
00:06:41,620 --> 00:06:44,020
But I believe Playwright is more Pythonic.

108
00:06:44,020 --> 00:06:45,540
I believe it is more feature rich.

109
00:06:45,540 --> 00:06:49,780
And I believe it helps you write better tests more easily.

110
00:06:49,780 --> 00:06:54,060
So now instead of building the test automation project in Selenium, we're building it with

111
00:06:54,060 --> 00:06:55,060
Playwright.

112
00:06:55,460 --> 00:06:58,900
If you really want to do Selenium, all the stuff I'm going to show you today, almost

113
00:06:58,900 --> 00:07:02,700
all the stuff I'm going to show you today, you can do in Selenium as well as Playwright.

114
00:07:02,700 --> 00:07:06,900
I just think Playwright is easier, better, and safer.

115
00:07:06,900 --> 00:07:11,780
So what is Playwright?

116
00:07:11,780 --> 00:07:18,260
Playwright is a browser automation tool at its core.

117
00:07:18,260 --> 00:07:20,540
I would not call Playwright a full framework.

118
00:07:20,540 --> 00:07:22,660
I would call PyTest a framework.

119
00:07:22,660 --> 00:07:29,340
But what Playwright helps you do is it helps you automate end-to-end tests through a WebUI

120
00:07:29,340 --> 00:07:32,980
very easily and very simply.

121
00:07:32,980 --> 00:07:37,460
In that sense, it is very much like an alternative to Selenium WebDriver.

122
00:07:37,460 --> 00:07:41,500
Playwright is an open source project.

123
00:07:41,500 --> 00:07:46,540
It comes from Microsoft, the same group in Microsoft that has brought you things like

124
00:07:46,540 --> 00:07:49,820
Visual Studio Code and TypeScript.

125
00:07:49,820 --> 00:07:52,180
They're all under the same organization.

126
00:07:52,180 --> 00:07:57,220
Maybe they have about six engineers or so on it.

127
00:07:57,220 --> 00:08:00,100
Playwright is also available in multiple languages.

128
00:08:00,100 --> 00:08:02,300
Today, obviously, we're going to learn Python.

129
00:08:02,300 --> 00:08:06,580
It would be pretty weird if we didn't do Python at PyCon.

130
00:08:06,580 --> 00:08:12,620
But you can also use Playwright in JavaScript, in Java, and in C Sharp.

131
00:08:12,620 --> 00:08:17,140
So in that case, it's very much like Selenium in that it has multiple language bindings.

132
00:08:17,140 --> 00:08:19,980
The other major browser automation tool out there is something called Cypress.

133
00:08:19,980 --> 00:08:22,100
Has anyone heard of Cypress?

134
00:08:23,020 --> 00:08:26,580
Yeah, if you've done front-end JavaScript web dev, you may have heard of Cypress, may

135
00:08:26,580 --> 00:08:30,180
have even used Cypress.

136
00:08:30,180 --> 00:08:34,700
Playwright and Cypress are kind of similar in that they're more modern browser automation

137
00:08:34,700 --> 00:08:37,700
tools that are feature-rich.

138
00:08:37,700 --> 00:08:43,740
Some of the things that makes Playwright distinctive, other than the multiple language bindings,

139
00:08:43,740 --> 00:08:49,740
it uses debug protocols within your browser instead of the WebDriver protocol.

140
00:08:49,740 --> 00:08:51,900
What does that mean?

141
00:08:51,900 --> 00:08:53,500
You can use either protocol.

142
00:08:53,500 --> 00:08:56,060
Selenium WebDriver uses the WebDriver protocol.

143
00:08:56,060 --> 00:08:59,820
But debug protocols typically are faster, a lot faster.

144
00:08:59,820 --> 00:09:06,540
So that gives Playwright a significant speed boost over a Selenium WebDriver implementation.

145
00:09:06,540 --> 00:09:12,220
Some other advantages Playwright has, automatic waiting, which we'll look at, easier browser

146
00:09:12,220 --> 00:09:13,220
setup.

147
00:09:13,220 --> 00:09:17,500
If anyone's ever done a Selenium WebDriver setup, oh my gosh, the versions and the paths

148
00:09:17,500 --> 00:09:19,540
and stuff, that can be a thing.

149
00:09:19,540 --> 00:09:21,540
It's doable, but anywho.

150
00:09:22,580 --> 00:09:27,620
Does anybody have any initial questions about what Playwright is before we start learning?

151
00:09:30,020 --> 00:09:32,020
Okay, very cool.

152
00:09:33,020 --> 00:09:41,260
So, I mentioned this to folks as they were trickling in, but all of the stuff we're

153
00:09:41,260 --> 00:09:44,460
going to do today is in this GitHub repository.

154
00:09:44,460 --> 00:09:50,700
Now, this is not something that we're going to clone and work within, but rather you can

155
00:09:50,740 --> 00:09:53,820
use this as a reference as you go.

156
00:09:53,820 --> 00:09:56,860
The hands-on coding we're going to do will not use this repository.

157
00:09:56,860 --> 00:10:02,060
We will literally be at the keyboard in Visual Studio Code programming the automation as

158
00:10:02,060 --> 00:10:04,380
we are going through the tutorial.

159
00:10:04,380 --> 00:10:09,500
What this is here is, first of all, it is the completed example code for the project.

160
00:10:09,500 --> 00:10:16,780
In fact, at each step of the project, I have different branches for each chapter.

161
00:10:16,780 --> 00:10:20,980
So if you're stuck in the second part that we're going through, you can always reference

162
00:10:20,980 --> 00:10:24,140
this in a browser and be like, oh, what's the code supposed to look like?

163
00:10:24,140 --> 00:10:27,540
Also, you might want to have this open so you can copy and paste easier than just typing

164
00:10:27,540 --> 00:10:29,660
everything out slowly.

165
00:10:29,660 --> 00:10:36,340
But more importantly, in the tutorial folder of this repository, you will find all the

166
00:10:36,340 --> 00:10:41,820
completed instructions for this entire workshop.

167
00:10:41,820 --> 00:10:43,380
It comes in six parts.

168
00:10:43,380 --> 00:10:47,660
We will probably tap out around part number five.

169
00:10:47,660 --> 00:10:54,300
Anything that we do not get done, you can complete as a take-home assignment.

170
00:10:54,300 --> 00:10:59,800
What I want to do today is not so much have a race to the finish, but I want us to make

171
00:10:59,800 --> 00:11:05,860
sure that we get through as much as we can, but still have time to discuss when we have

172
00:11:05,860 --> 00:11:08,380
questions or solve problems as they come up.

173
00:11:08,380 --> 00:11:10,620
This is meant to be interactive.

174
00:11:10,620 --> 00:11:13,460
So if you hit trouble along the way, raise your hand.

175
00:11:13,460 --> 00:11:17,420
If you have a question because you don't understand something, please bring it up.

176
00:11:17,420 --> 00:11:19,420
Don't suffer in silence.

177
00:11:19,420 --> 00:11:23,340
Does that make sense to everybody?

178
00:11:23,340 --> 00:11:25,300
All right.

179
00:11:25,300 --> 00:11:28,980
So are we ready to begin?

180
00:11:28,980 --> 00:11:29,980
Okay.

181
00:11:29,980 --> 00:11:31,880
Very cool.

182
00:11:31,880 --> 00:11:35,100
So let me get my terminal open here.

183
00:11:35,100 --> 00:11:36,100
Oh, gosh.

184
00:11:36,100 --> 00:11:37,100
Where did it go?

185
00:11:37,100 --> 00:11:38,100
Wrong screen.

186
00:11:38,100 --> 00:11:39,100
My bad.

187
00:11:39,100 --> 00:11:40,100
Is that?

188
00:11:40,580 --> 00:11:41,580
Oh, oh, oh.

189
00:11:41,580 --> 00:11:42,580
We can do better.

190
00:11:42,580 --> 00:11:43,580
We can do better.

191
00:11:43,580 --> 00:11:46,580
Okay.

192
00:11:46,580 --> 00:11:55,580
So, first thing we're going to do is...

193
00:11:55,580 --> 00:11:56,580
Excuse me.

194
00:11:56,580 --> 00:11:57,580
Oh, wait.

195
00:11:57,580 --> 00:12:00,580
No, I don't want that first.

196
00:12:00,580 --> 00:12:04,180
Actually, first thing we're going to do is we're going to talk about the test case we're

197
00:12:04,180 --> 00:12:05,180
going to automate.

198
00:12:05,180 --> 00:12:11,900
Okey-dokey.

199
00:12:11,900 --> 00:12:23,540
So this may sound basic, but we are going to spend five chapters of this tutorial automating

200
00:12:23,540 --> 00:12:24,540
one test case.

201
00:12:24,540 --> 00:12:25,540
You're like, what?

202
00:12:25,540 --> 00:12:29,140
Don't we want to do multiple testing?

203
00:12:29,140 --> 00:12:30,140
Trust me.

204
00:12:30,140 --> 00:12:33,460
This is going to be a thorough walkthrough and you're going to come out better for it.

205
00:12:33,460 --> 00:12:35,540
What we need a test case to do.

206
00:12:35,540 --> 00:12:42,260
I'm a strong believer that we want to write our test cases before we write our test code.

207
00:12:42,260 --> 00:12:47,300
Test code is simply an implementation of a well-formed related test case.

208
00:12:47,300 --> 00:12:52,740
And the test case that we're going to automate together today is a basic search using DuckDuckGo.

209
00:12:52,740 --> 00:12:56,460
DuckDuckGo is like Google or Bing or Yahoo.

210
00:12:56,460 --> 00:12:57,460
Just different.

211
00:12:57,460 --> 00:12:58,580
Why did I pick it?

212
00:12:58,580 --> 00:13:01,820
Because the locators are more consistent, not because I have any sort of preference one

213
00:13:01,900 --> 00:13:03,780
way or the other.

214
00:13:03,780 --> 00:13:08,020
So how do I go about doing a DuckDuckGo search?

215
00:13:08,020 --> 00:13:09,020
What's step one?

216
00:13:09,020 --> 00:13:17,460
Go to the site, load the page, go to DuckDuckGo.com, wait for the page to load.

217
00:13:17,460 --> 00:13:18,460
Awesome.

218
00:13:18,460 --> 00:13:19,460
What do I do now?

219
00:13:19,460 --> 00:13:20,460
Do what?

220
00:13:20,460 --> 00:13:23,460
Yeah, what do we want to search for?

221
00:13:23,460 --> 00:13:26,460
We want to search for pandas.

222
00:13:26,460 --> 00:13:27,460
Why?

223
00:13:27,460 --> 00:13:28,460
Because pandas are awesome.

224
00:13:28,460 --> 00:13:29,460
We could do Pikachu as well.

225
00:13:29,500 --> 00:13:30,500
Why?

226
00:13:30,500 --> 00:13:31,500
Because pandas are awesome.

227
00:13:31,500 --> 00:13:33,420
We could do Pikachu as well, but that's all right.

228
00:13:33,420 --> 00:13:34,420
So I type in panda.

229
00:13:34,420 --> 00:13:35,420
Now what?

230
00:13:35,420 --> 00:13:36,420
Ah, okay.

231
00:13:36,420 --> 00:13:42,620
We'll click the search button.

232
00:13:42,620 --> 00:13:43,620
Now what?

233
00:13:43,620 --> 00:13:44,620
Read.

234
00:13:44,620 --> 00:13:50,140
Oh, right.

235
00:13:50,140 --> 00:13:51,780
We did our interactions.

236
00:13:51,780 --> 00:13:54,220
Now we have to do our verifications.

237
00:13:54,220 --> 00:13:55,220
Here's the result page.

238
00:13:55,220 --> 00:14:01,980
How do I know that this result page is good?

239
00:14:01,980 --> 00:14:02,980
Sorry, what?

240
00:14:02,980 --> 00:14:04,380
There's pandas on it.

241
00:14:04,380 --> 00:14:07,500
Where do I see pandas on it?

242
00:14:07,500 --> 00:14:08,900
You see some panda images.

243
00:14:08,900 --> 00:14:11,740
Where else do we see pandas?

244
00:14:11,740 --> 00:14:12,740
We see words.

245
00:14:12,740 --> 00:14:13,740
Where do we see the words?

246
00:14:13,740 --> 00:14:17,500
There we go.

247
00:14:17,500 --> 00:14:23,420
So we have the hyperlinks have those titles that have, you know, like panda express.

248
00:14:24,260 --> 00:14:25,260
I don't know what this is.

249
00:14:25,260 --> 00:14:27,260
This looks like some sort of ad.

250
00:14:27,260 --> 00:14:31,180
But if we were to scroll down, yep, here we go.

251
00:14:31,180 --> 00:14:33,340
Giant panda from National Geographic.

252
00:14:33,340 --> 00:14:34,340
We've got panda facts.

253
00:14:34,340 --> 00:14:36,060
Right, okay, so we can look at links.

254
00:14:36,060 --> 00:14:42,900
Are there any other interesting places on this page where pandas might appear?

255
00:14:42,900 --> 00:14:48,540
Maybe the search bar up here has the same search query or maybe the page title in my

256
00:14:48,540 --> 00:14:49,540
tab.

257
00:14:49,540 --> 00:14:50,540
All right.

258
00:14:50,860 --> 00:14:53,780
So these are all different points that we could check.

259
00:14:53,780 --> 00:14:54,780
We could check the title.

260
00:14:54,780 --> 00:14:56,980
We could check the search bar.

261
00:14:56,980 --> 00:15:02,700
And then we could scrape the different hyperlinks to see if they contain the title panda.

262
00:15:02,700 --> 00:15:06,580
If you wanted to match images, you're going to have to get Apple tools for that.

263
00:15:06,580 --> 00:15:07,580
We're not going to do that today.

264
00:15:07,580 --> 00:15:10,620
But it's good, right?

265
00:15:10,620 --> 00:15:17,700
So when we go to formulate test cases, you know, testing in a nutshell is interaction

266
00:15:17,700 --> 00:15:18,700
plus verification.

267
00:15:19,620 --> 00:15:23,380
Doesn't matter what kind of testing you're doing, functional testing, unit testing, integration

268
00:15:23,380 --> 00:15:25,340
testing, performance testing.

269
00:15:25,340 --> 00:15:30,420
You do something and you make sure it works.

270
00:15:30,420 --> 00:15:31,420
Interaction plus verification.

271
00:15:31,420 --> 00:15:35,980
So we had our interactions, load the page, type it in, boom, wait, and the verifications

272
00:15:35,980 --> 00:15:40,340
of scrape things off the page and make sure that they're doing something good, use some

273
00:15:40,340 --> 00:15:42,580
sort of assertions there.

274
00:15:42,580 --> 00:15:46,100
Has anyone heard of a pattern called arrange act assert?

275
00:15:46,100 --> 00:15:48,620
Raise your hand.

276
00:15:48,700 --> 00:15:49,700
Only one person.

277
00:15:49,700 --> 00:15:50,700
Oh, my gosh.

278
00:15:50,700 --> 00:15:53,020
It's a break in my heart.

279
00:15:53,020 --> 00:15:54,020
That's okay.

280
00:15:54,020 --> 00:15:55,020
That's what we're here for.

281
00:15:55,020 --> 00:15:56,020
We're here to learn.

282
00:15:56,020 --> 00:16:00,420
When I was at the testing conference, everyone knew arrange act assert and nobody knew Python.

283
00:16:00,420 --> 00:16:06,740
If you take away something big from today, take this away.

284
00:16:06,740 --> 00:16:07,820
Arrange act assert.

285
00:16:07,820 --> 00:16:08,820
Write it down.

286
00:16:08,820 --> 00:16:09,820
Write it on your arm.

287
00:16:09,820 --> 00:16:10,820
Type a note.

288
00:16:10,820 --> 00:16:11,820
Tattoo it to your back.

289
00:16:11,820 --> 00:16:12,820
Whatever.

290
00:16:12,820 --> 00:16:15,620
This is how you write good functional test cases.

291
00:16:15,620 --> 00:16:21,900
This is the pattern for identifying individual independent behaviors for good testing.

292
00:16:21,900 --> 00:16:27,420
You set the things up, you interact with the things, and you make sure they work.

293
00:16:27,420 --> 00:16:28,420
Arrange act assert.

294
00:16:28,420 --> 00:16:35,500
This pattern is something that I believe originally came from the .net community 10, 20 years

295
00:16:35,500 --> 00:16:40,820
ago and it was used primarily as a pattern for unit testing.

296
00:16:40,820 --> 00:16:45,380
But it applies as well more broadly for any kind of functional testing because it helps

297
00:16:45,380 --> 00:16:48,820
you frame the things you want to test well.

298
00:16:48,820 --> 00:16:53,980
For example, if I wanted to ... We just did the panda search.

299
00:16:53,980 --> 00:17:01,820
If I wanted to then test to see what happens when I do an images search, that would arguably

300
00:17:01,820 --> 00:17:07,140
be a separate ... Or should be a separate test case because it's a different behavior

301
00:17:07,140 --> 00:17:12,860
because you would have arrange act assert and then act assert.

302
00:17:12,860 --> 00:17:14,020
You want to separate those out.

303
00:17:14,020 --> 00:17:16,980
You don't want to repeat your act assert steps.

304
00:17:16,980 --> 00:17:19,820
Separate behaviors, better testing, test case independence.

305
00:17:19,820 --> 00:17:22,260
Does that all make sense?

306
00:17:22,260 --> 00:17:23,260
Cool.

307
00:17:23,260 --> 00:17:24,260
Arrange act assert.

308
00:17:24,260 --> 00:17:28,860
Wonderful.

309
00:17:28,860 --> 00:17:35,940
Now that we know what our test case steps are, let's then take that test case and put it

310
00:17:35,940 --> 00:17:39,540
into test code.

311
00:17:40,540 --> 00:17:46,140
We don't yet have a test code project to do that, do we?

312
00:17:46,140 --> 00:17:47,140
No.

313
00:17:47,140 --> 00:17:48,140
Guess what we're going to do now?

314
00:17:48,140 --> 00:17:51,460
We're going to create the project.

315
00:17:51,460 --> 00:17:55,260
I am going to drop to the terminal to create directories and stuff.

316
00:17:55,260 --> 00:18:02,420
You can do this from within Finder or Windows Explorer or whatever way you want to do this.

317
00:18:02,420 --> 00:18:08,260
But basically, I am in a directory where I want to create my project and I'm going to

318
00:18:08,300 --> 00:18:17,860
call this something, McDeer Playwright Python Tutorial.

319
00:18:17,860 --> 00:18:23,940
Inside this directory, we'll change directory inside of there, I want to create another

320
00:18:23,940 --> 00:18:32,420
folder, McDeer, called tests.

321
00:18:32,420 --> 00:18:35,660
Now I'm here and basic structure.

322
00:18:36,260 --> 00:18:41,060
We'll explain why this in a moment.

323
00:18:41,060 --> 00:18:46,820
I also need some dependency packages, right, because Python standard library is not going

324
00:18:46,820 --> 00:18:49,540
to have all the stuff I need.

325
00:18:49,540 --> 00:18:54,140
So I need to install some testing things, including Playwright.

326
00:18:54,140 --> 00:18:57,860
Is everyone familiar with virtual environments?

327
00:18:57,860 --> 00:18:59,060
Anybody not done that before?

328
00:18:59,060 --> 00:19:00,060
It's okay.

329
00:19:00,060 --> 00:19:02,620
We're in the safe space.

330
00:19:02,620 --> 00:19:07,700
So we all know then that you can install Python packages globally for your whole machine

331
00:19:07,700 --> 00:19:10,140
and everybody shares the same thing.

332
00:19:10,140 --> 00:19:14,460
Or you can define them using virtual environments per project to kind of keep those protected

333
00:19:14,460 --> 00:19:15,460
and safe.

334
00:19:15,460 --> 00:19:20,940
Typically, with good programming practices, we want to do that local virtual thing.

335
00:19:20,940 --> 00:19:22,340
And there's many ways to do that.

336
00:19:22,340 --> 00:19:26,460
You can use poetry or virtual end.

337
00:19:26,460 --> 00:19:30,620
I like using the VNV module that's in the standard library.

338
00:19:30,620 --> 00:19:32,100
So that's what I'm going to do.

339
00:19:32,140 --> 00:19:38,780
I'm going to create a Python 3 and VNV.

340
00:19:38,780 --> 00:19:41,780
And I'm just going to call it VNV because I'm boring.

341
00:19:41,780 --> 00:19:43,260
Boring is good.

342
00:19:43,260 --> 00:19:45,260
Simple is better than complex.

343
00:19:45,260 --> 00:19:46,260
Okay.

344
00:19:46,260 --> 00:19:49,260
Is that in Python?

345
00:19:49,260 --> 00:19:50,260
Everybody?

346
00:19:50,260 --> 00:19:51,260
Okay.

347
00:19:51,260 --> 00:19:57,860
And I'm going to activate my virtual environment.

348
00:19:57,860 --> 00:19:59,860
Boom.

349
00:19:59,860 --> 00:20:00,860
Okay.

350
00:20:00,860 --> 00:20:01,860
Okay.

351
00:20:02,620 --> 00:20:09,620
So, Windows, the command will look something like VNV, what is it?

352
00:20:09,620 --> 00:20:11,620
Scripts, yeah.

353
00:20:11,620 --> 00:20:13,420
Activate.bat.

354
00:20:13,420 --> 00:20:15,860
That would be where the path is on a Windows machine.

355
00:20:15,860 --> 00:20:17,580
But I'm on Mac.

356
00:20:17,580 --> 00:20:19,580
I like my, I have one of these new M1 Macs.

357
00:20:19,580 --> 00:20:22,100
Oh my goodness, they are amazing.

358
00:20:22,100 --> 00:20:23,940
Highly recommended.

359
00:20:23,940 --> 00:20:24,940
So cool.

360
00:20:24,940 --> 00:20:27,060
No, Apple does not pay me money.

361
00:20:27,060 --> 00:20:29,340
I work for Apple tools, not Apple.

362
00:20:29,340 --> 00:20:30,340
Okay.

363
00:20:30,340 --> 00:20:31,340
Okay.

364
00:20:31,820 --> 00:20:35,140
So, when you've activated your virtual environment, you see the little parenthesis thing, that's

365
00:20:35,140 --> 00:20:36,140
how you know you're in there.

366
00:20:36,140 --> 00:20:37,140
Okay.

367
00:20:37,140 --> 00:20:41,940
So, there are three main packages that we need.

368
00:20:41,940 --> 00:20:45,180
First package we need is Playwright.

369
00:20:45,180 --> 00:20:48,580
Pip, install, Playwright.

370
00:20:48,580 --> 00:20:53,100
Thankfully, it's the name of the, the name of the tool is the name of the package, which

371
00:20:53,100 --> 00:20:54,380
is pretty cool.

372
00:20:54,380 --> 00:20:57,420
That should go fairly quick.

373
00:20:57,420 --> 00:20:59,580
Playwright is going to handle, like I said, our browser automation.

374
00:20:59,580 --> 00:21:01,060
It is not a full framework.

375
00:21:01,060 --> 00:21:03,580
Playwright is a browser automation tool.

376
00:21:03,580 --> 00:21:10,820
It's the thing that helps us go to Chromium and say, click the button or give me the text.

377
00:21:10,820 --> 00:21:16,300
Another thing we're going to install is Pip install PyTest.

378
00:21:16,300 --> 00:21:18,100
Has anyone used PyTest before?

379
00:21:18,100 --> 00:21:19,100
Yeah.

380
00:21:19,100 --> 00:21:20,100
Oh my gosh.

381
00:21:20,100 --> 00:21:21,620
I love PyTest.

382
00:21:21,620 --> 00:21:23,860
Who here, who here loves PyTest?

383
00:21:23,860 --> 00:21:24,860
Yes.

384
00:21:24,860 --> 00:21:25,940
Yes.

385
00:21:25,940 --> 00:21:32,020
I do test automation in very many languages, on very many kinds of projects, testing tons

386
00:21:32,020 --> 00:21:33,900
of different kinds of things.

387
00:21:33,900 --> 00:21:37,540
And PyTest is my favorite test framework in any language.

388
00:21:37,540 --> 00:21:40,100
Close second to SpecFlow, which is C sharp.

389
00:21:40,100 --> 00:21:43,500
But PyTest is just so awesome for so many reasons.

390
00:21:43,500 --> 00:21:47,820
And if you want to gush about PyTest with me, we can meet up after this and we can have

391
00:21:47,820 --> 00:21:49,740
a fan session.

392
00:21:49,740 --> 00:21:51,340
There I've given talks on this.

393
00:21:51,340 --> 00:21:53,100
Other people have given talks on this.

394
00:21:53,100 --> 00:21:59,780
I strongly prefer PyTest over Python's baked in unit test library because PyTest is more

395
00:21:59,780 --> 00:22:00,780
extensible.

396
00:22:00,780 --> 00:22:02,860
PyTest uses functions instead of classes.

397
00:22:02,860 --> 00:22:05,860
I have a whole opinion about that.

398
00:22:05,860 --> 00:22:10,500
And so Playwright, today we're going to use Playwright with PyTest.

399
00:22:10,500 --> 00:22:15,220
And that is what honestly I would recommend as the recommended practice.

400
00:22:15,220 --> 00:22:19,000
Because of what I'm going to show you next, Playwright and PyTest work awesome together.

401
00:22:19,000 --> 00:22:21,000
So let's install PyTest.

402
00:22:21,000 --> 00:22:22,460
And it might suck in other packages too.

403
00:22:22,460 --> 00:22:23,460
That's totally cool.

404
00:22:23,460 --> 00:22:25,340
And finally, third package.

405
00:22:25,340 --> 00:22:26,340
This is where magic happens.

406
00:22:26,340 --> 00:22:32,060
We're going to pip3 install PyTest dash Playwright.

407
00:22:32,060 --> 00:22:33,060
Oops.

408
00:22:33,060 --> 00:22:36,900
Now, it's like, wait a minute.

409
00:22:36,900 --> 00:22:38,860
I installed Playwright, then I installed PyTest.

410
00:22:38,860 --> 00:22:41,340
Now I need PyTest dash Playwright?

411
00:22:41,340 --> 00:22:42,700
Yes.

412
00:22:42,700 --> 00:22:47,420
This is the PyTest plugin for Playwright.

413
00:22:47,420 --> 00:22:48,900
So PyTest is extensible.

414
00:22:48,900 --> 00:22:52,140
You can write your own plugins that add fixtures and all this other stuff.

415
00:22:52,140 --> 00:22:57,900
The PyTest Playwright plugin is amazing.

416
00:22:57,900 --> 00:23:01,740
Playwright by itself is pretty awesome, but it needs a little bit of boilerplate code.

417
00:23:01,740 --> 00:23:06,180
This plugin, which also comes from the Microsoft Playwright team, simplifies all of that.

418
00:23:06,180 --> 00:23:11,080
And so it just streamlines our automation development.

419
00:23:11,080 --> 00:23:16,620
So if we look then, I could do a pip freeze.

420
00:23:16,620 --> 00:23:20,860
And we can see all of the dependencies that we should now have in our virtual environment.

421
00:23:20,860 --> 00:23:24,060
We can see we have Playwright.

422
00:23:24,060 --> 00:23:26,980
We can see we have PyTest.

423
00:23:26,980 --> 00:23:27,980
We can see we have the plugin.

424
00:23:27,980 --> 00:23:30,060
There's a lot of P's and PL sounds.

425
00:23:30,060 --> 00:23:31,580
And we have all the other GORP that got sucked in.

426
00:23:31,580 --> 00:23:32,580
Yeah.

427
00:23:32,580 --> 00:23:35,060
Cool, cool.

428
00:23:35,060 --> 00:23:36,780
So everybody with me so far?

429
00:23:36,780 --> 00:23:38,860
Everybody got the packages installed?

430
00:23:38,860 --> 00:23:40,460
Anybody having trouble so far?

431
00:23:40,460 --> 00:23:41,460
Awesome.

432
00:23:41,460 --> 00:23:42,460
Good.

433
00:23:42,460 --> 00:23:43,460
Yes.

434
00:23:43,460 --> 00:23:47,060
Yesterday, it took like half an hour just to get everybody at this point.

435
00:23:47,060 --> 00:23:48,060
This is good.

436
00:23:48,060 --> 00:23:49,060
We're doing good, y'all.

437
00:23:49,060 --> 00:23:50,060
Yes.

438
00:23:50,060 --> 00:23:51,060
We're doing good.

439
00:23:51,060 --> 00:23:52,060
Go Python.

440
00:23:52,060 --> 00:23:53,060
Go.

441
00:23:53,060 --> 00:23:54,060
Love the Python community.

442
00:23:54,060 --> 00:23:56,300
Love the testing community too, but they need to do more Python.

443
00:23:56,300 --> 00:23:57,300
Yeah.

444
00:23:57,300 --> 00:23:58,300
Okay.

445
00:23:58,300 --> 00:24:03,980
So I occupy this weird intersectionality between testing world and Python world.

446
00:24:03,980 --> 00:24:06,700
There aren't very many of us.

447
00:24:06,700 --> 00:24:12,280
But Python is used by a decent slice of the pie in the testing world.

448
00:24:12,280 --> 00:24:17,940
But most of the test automation still to this day is Java and JavaScript.

449
00:24:17,940 --> 00:24:22,500
Little slice of Python, little slice of .NET, and a really little slice ever decreasing

450
00:24:22,500 --> 00:24:23,620
of Ruby.

451
00:24:23,620 --> 00:24:27,860
Other languages basically do not exist in the test automation space at large.

452
00:24:27,860 --> 00:24:28,860
At large.

453
00:24:28,860 --> 00:24:30,340
I've got data to back it up.

454
00:24:30,340 --> 00:24:33,980
If you want to find that out, I can share it later.

455
00:24:33,980 --> 00:24:34,980
Okay.

456
00:24:34,980 --> 00:24:42,900
So final thing we need to do is we need to install the browsers for Playwright.

457
00:24:42,900 --> 00:24:45,580
Now, you might be thinking, hey, Andy, wait a minute.

458
00:24:45,580 --> 00:24:46,580
Time out.

459
00:24:46,580 --> 00:24:47,580
Time out.

460
00:24:48,220 --> 00:24:50,220
I already have Safari or I already have Firefox.

461
00:24:50,220 --> 00:24:52,580
What do you mean I need to install browsers?

462
00:24:52,580 --> 00:24:55,340
Is this like that WebDriver executable thing?

463
00:24:55,340 --> 00:24:56,460
No, no, no.

464
00:24:56,460 --> 00:25:02,820
So one of the unique things about Playwright is that Playwright doesn't actually directly

465
00:25:02,820 --> 00:25:07,580
test the main browsers you have installed on your machine.

466
00:25:07,580 --> 00:25:10,180
It doesn't directly test Google Chrome.

467
00:25:10,180 --> 00:25:13,700
It doesn't directly test Microsoft Edge or Apple Safari.

468
00:25:14,100 --> 00:25:20,100
Instead, it uses browser projects or what you might think of as browser engines.

469
00:25:20,100 --> 00:25:21,980
It uses Chromium.

470
00:25:21,980 --> 00:25:27,420
It uses the Firefox open source piece, Gecko, whatever it's called, but they call it Firefox

471
00:25:27,420 --> 00:25:28,420
here, and WebKit.

472
00:25:28,420 --> 00:25:29,420
You're like, what?

473
00:25:29,420 --> 00:25:31,700
Wait, wait, wait, wait, wait.

474
00:25:31,700 --> 00:25:34,420
I want to test Chrome and I want to test Safari.

475
00:25:34,420 --> 00:25:37,500
Why am I testing Chromium and why am I testing WebKit?

476
00:25:37,500 --> 00:25:39,460
That seems a little weird.

477
00:25:39,460 --> 00:25:48,460
Well, the reason why Playwright does that, and it is opinionated, is that you can get

478
00:25:48,460 --> 00:25:52,940
pretty much the coverage you need off of just those browser projects.

479
00:25:52,940 --> 00:25:57,820
You don't need the full stock browser with all the other bells and whistles and features

480
00:25:57,820 --> 00:25:58,820
like Chrome.

481
00:25:58,820 --> 00:26:03,020
You've got your bookmarks and you've got your caching, you've got all these settings and

482
00:26:03,020 --> 00:26:04,020
all this stuff.

483
00:26:04,020 --> 00:26:08,180
When it comes to WebUI testing, really, you just need that rendering engine to make it

484
00:26:08,180 --> 00:26:11,940
go on the boom on the screen.

485
00:26:11,940 --> 00:26:17,300
The Playwright team took a design decision to say, we're not going to mess around with

486
00:26:17,300 --> 00:26:20,100
stock browsers on the machine that you're testing on.

487
00:26:20,100 --> 00:26:26,700
We're going to simplify, use browser projects, and that will make things easier to set up

488
00:26:26,700 --> 00:26:28,740
and more efficient.

489
00:26:28,740 --> 00:26:29,740
That's the opinion.

490
00:26:29,740 --> 00:26:37,100
Now, if you're in a company or team or org where you have very strict requirements around

491
00:26:37,780 --> 00:26:42,060
the browsers that you do test for compatibility reasons or whatever, like if you're working

492
00:26:42,060 --> 00:26:45,900
in some government org and they say, you absolutely must test the last five versions of Google

493
00:26:45,900 --> 00:26:49,740
Chrome, and it has to be that and you can't not do that, Playwright ain't going to work

494
00:26:49,740 --> 00:26:50,740
for you.

495
00:26:50,740 --> 00:26:51,740
Sorry.

496
00:26:51,740 --> 00:26:59,220
But 99.9 odd percent of shops doing this kind of testing is going to be totally fine.

497
00:26:59,220 --> 00:27:04,180
That was part of the thought there, too.

498
00:27:04,180 --> 00:27:13,620
To install the Playwright browsers, what we do is we run a command, Playwright install.

499
00:27:13,620 --> 00:27:17,700
Now mine is going to know off very quickly because I already have the three browsers

500
00:27:17,700 --> 00:27:18,700
installed.

501
00:27:18,700 --> 00:27:22,780
But when you do this, you should probably see immediately it's going to start downloading

502
00:27:22,780 --> 00:27:25,500
Chromium and it's going to slowly start ticking away.

503
00:27:25,500 --> 00:27:26,500
Am I right?

504
00:27:26,500 --> 00:27:27,500
Yeah, you've seen it.

505
00:27:27,500 --> 00:27:28,500
Okay, cool.

506
00:27:28,500 --> 00:27:31,900
It's going to download Chromium, then it's going to download Firefox, then it's going

507
00:27:31,900 --> 00:27:34,020
to download WebKit.

508
00:27:34,860 --> 00:27:38,020
That's the alphabetization.

509
00:27:38,020 --> 00:27:42,500
This step might take a little while, especially on conference Wi-Fi.

510
00:27:42,500 --> 00:27:43,640
That's not a problem.

511
00:27:43,640 --> 00:27:47,640
You could let this go in your terminal while we move on to other things.

512
00:27:47,640 --> 00:27:51,140
But just make sure that everything gets fully downloaded and installed.

513
00:27:51,140 --> 00:27:54,260
You don't need to install anything else after this.

514
00:27:54,260 --> 00:27:55,900
Playwright install gets the browser's finishes.

515
00:27:55,900 --> 00:27:57,300
If it's successful, you're good.

516
00:27:57,300 --> 00:27:59,580
You don't need to add anything to your path explicitly.

517
00:27:59,580 --> 00:28:02,420
You don't need to download another executable file.

518
00:28:02,420 --> 00:28:06,180
This gets the job done.

519
00:28:06,180 --> 00:28:08,180
Was that a question?

520
00:28:08,180 --> 00:28:10,500
Okay, okay.

521
00:28:10,500 --> 00:28:13,540
Cool, cool.

522
00:28:13,540 --> 00:28:15,020
Fire that off, let that go.

523
00:28:15,020 --> 00:28:17,540
If it freezes, try killing it and restarting.

524
00:28:17,540 --> 00:28:23,940
I would guess it'll probably take about up to five minutes for it to fully install.

525
00:28:23,940 --> 00:28:30,320
In the meantime, let's go back into that project directory that we created.

526
00:28:30,320 --> 00:28:34,960
I am going to open Visual Studio Code.

527
00:28:34,960 --> 00:28:41,240
I am going to make my color theme a little easier to see.

528
00:28:41,240 --> 00:28:44,160
I'm also going to increase the size here, so hold on.

529
00:28:44,160 --> 00:28:45,960
Hang tight.

530
00:28:45,960 --> 00:28:46,960
Open.

531
00:28:46,960 --> 00:28:49,960
Code scratch.

532
00:28:49,960 --> 00:28:56,880
I'm going to write Python tutorial.

533
00:28:56,880 --> 00:28:59,120
Is this text a good size for everyone to see?

534
00:28:59,120 --> 00:29:00,120
Okay.

535
00:29:00,120 --> 00:29:01,120
Okay.

536
00:29:01,120 --> 00:29:10,120
So I like using Visual Studio Code with the Python extension.

537
00:29:10,120 --> 00:29:11,860
It's pretty awesome.

538
00:29:11,860 --> 00:29:13,500
I also like using PyCharm.

539
00:29:13,500 --> 00:29:15,500
PyCharm is also awesome.

540
00:29:15,500 --> 00:29:20,700
I just recommend that you use a good Python editor, especially when it comes to the autocomplete

541
00:29:20,700 --> 00:29:25,820
stuff for figuring things out as we go.

542
00:29:25,820 --> 00:29:30,180
Here we are in our project, and it is right now empty.

543
00:29:30,180 --> 00:29:36,560
We have the name of the directory, top level we have our tests directory, which is empty,

544
00:29:36,560 --> 00:29:40,980
and we have our virtual environment directory, which if I were committing this to source

545
00:29:40,980 --> 00:29:45,060
control I would add vnv as a path to my gitignore file.

546
00:29:45,060 --> 00:29:48,160
So that wouldn't be committed.

547
00:29:48,160 --> 00:29:54,400
Whenever you are doing, or whenever you are automating tests with PyTest, whether it's

548
00:29:54,400 --> 00:29:59,560
unit testing, integration testing, and end testing, the conventional practice is all

549
00:29:59,560 --> 00:30:02,280
test modules go under the tests folder.

550
00:30:02,280 --> 00:30:07,200
You can change that if you want, but simple is better than complex, and readability counts,

551
00:30:07,200 --> 00:30:09,160
and I would recommend going with convention.

552
00:30:09,160 --> 00:30:11,400
So we're going to go with convention today.

553
00:30:11,400 --> 00:30:13,720
In here we're going to put our test module.

554
00:30:13,720 --> 00:30:17,720
I'm going to create a new file under tests, and I'm going to call it test underscore

555
00:30:17,720 --> 00:30:20,160
search dot py.

556
00:30:20,840 --> 00:30:26,440
Again, convention in PyTest is that your modules that contain test cases not only appear in

557
00:30:26,440 --> 00:30:29,040
this directory, but then start test underscore.

558
00:30:29,040 --> 00:30:34,960
PyTest does this magical little discovery thing, and everybody's happy.

559
00:30:34,960 --> 00:30:41,440
So in here we're going to put our first test case, and that's going to be that basic duck

560
00:30:41,440 --> 00:30:46,160
dot go search test that we did before.

561
00:30:46,160 --> 00:30:55,120
Def test basic duck duck go search parentheses, boom, and we're going to make that, we're

562
00:30:55,120 --> 00:30:56,480
just going to leave that blank for right now.

563
00:30:56,480 --> 00:30:59,200
We're going to put a pass in there.

564
00:30:59,200 --> 00:31:06,560
What I like to do when I write my test cases, as I said before, I like to write my test

565
00:31:06,560 --> 00:31:14,360
cases before I write test code, and so I actually like to write my test steps in comments inside

566
00:31:14,400 --> 00:31:20,680
my test case, and then when I go to implement it, I will under each of those steps put the

567
00:31:20,680 --> 00:31:24,640
implementation code.

568
00:31:24,640 --> 00:31:29,560
And also I like to phrase my steps in that arrange act assert pattern.

569
00:31:29,560 --> 00:31:33,640
Furthermore, I like to use given when then language.

570
00:31:33,640 --> 00:31:36,400
Arrange act assert is the equivalent of given when then.

571
00:31:36,400 --> 00:31:38,360
Has anyone used given when then before?

572
00:31:38,360 --> 00:31:39,360
Yes.

573
00:31:39,360 --> 00:31:42,480
So y'all know, so gurken, yes.

574
00:31:42,480 --> 00:31:43,880
Oh I love gurken.

575
00:31:43,880 --> 00:31:46,200
That's a whole nother topic.

576
00:31:46,200 --> 00:31:49,800
We're not going to get in there today, but oh I love gurken.

577
00:31:49,800 --> 00:31:54,480
Gurken gives you the guardrails of writing well-defined behaviors.

578
00:31:54,480 --> 00:31:58,120
That's why we write our tests arrange act assert given when then.

579
00:31:58,120 --> 00:32:16,320
So given the DuckDuckGo home page is displayed, when the user searches for a phrase, then

580
00:32:16,320 --> 00:32:30,720
the search result query is the, oh gosh, is the phrase, and the search result links

581
00:32:30,720 --> 00:32:40,840
pertain to the phrase, and the search result title contains the phrase.

582
00:32:41,600 --> 00:32:45,360
So basic plain language descriptions.

583
00:32:45,360 --> 00:32:51,400
We have not only described our test, but we have dissected it into the phases, the arrange

584
00:32:51,400 --> 00:32:57,520
act assert, and then defined them carefully with given when then format.

585
00:32:57,520 --> 00:33:02,180
And so these will kind of guide us along as we go to automate.

586
00:33:02,180 --> 00:33:07,840
Even as we write the Python code, I will still leave these lines in because that shows a

587
00:33:07,920 --> 00:33:12,440
very descriptive line of what's going on followed by the implementation, right?

588
00:33:12,440 --> 00:33:14,800
Kind of separated by paragraphs if you will.

589
00:33:14,800 --> 00:33:19,960
And that preserves my test case within the test code.

590
00:33:19,960 --> 00:33:26,200
One thing I want you to remember, another nugget of wisdom to take away today is test

591
00:33:26,200 --> 00:33:34,880
engineering is not just about automating some scripts.

592
00:33:34,880 --> 00:33:38,480
It is about developing good test cases.

593
00:33:38,480 --> 00:33:41,720
A test case is more than the automation script.

594
00:33:41,720 --> 00:33:44,040
A test case is this.

595
00:33:44,040 --> 00:33:46,160
The script is just how it runs.

596
00:33:46,160 --> 00:33:47,160
Got a question in the back?

597
00:33:47,160 --> 00:33:48,160
No.

598
00:33:48,160 --> 00:33:55,640
You could put in a doc string like this.

599
00:33:55,640 --> 00:33:56,640
Do do do, oopsie.

600
00:33:56,640 --> 00:33:58,960
Oh gosh, hold on.

601
00:33:58,960 --> 00:34:03,800
Do do do, and then pop all your given when then stuff here.

602
00:34:03,800 --> 00:34:05,200
You could do that.

603
00:34:05,200 --> 00:34:10,060
The reason why I'm going to be putting it in comment lines like this is because when

604
00:34:10,060 --> 00:34:18,000
we write the code, I'm going to be doing Python stuff here and Python stuff here and so it

605
00:34:18,000 --> 00:34:19,960
kind of follows along with it.

606
00:34:19,960 --> 00:34:22,200
That's all.

607
00:34:22,200 --> 00:34:23,200
Personal preference.

608
00:34:23,200 --> 00:34:25,120
Coding style.

609
00:34:25,120 --> 00:34:28,400
Readability counts.

610
00:34:28,400 --> 00:34:31,160
Everyone knows the Zen of Python, right?

611
00:34:32,000 --> 00:34:33,000
Does anyone not know?

612
00:34:33,000 --> 00:34:34,000
Here, here.

613
00:34:34,000 --> 00:34:40,360
I'm just, in case there's anybody who's shy, open up your Python interpreter and do import

614
00:34:40,360 --> 00:34:41,360
this.

615
00:34:41,360 --> 00:34:44,760
These are the set of guiding principles for the Python language.

616
00:34:44,760 --> 00:34:46,640
Beautiful is better than ugly.

617
00:34:46,640 --> 00:34:48,960
Simple better than complex.

618
00:34:48,960 --> 00:34:49,960
Readability counts.

619
00:34:49,960 --> 00:34:53,040
That's where I'm pulling all these things.

620
00:34:53,040 --> 00:34:54,840
Python community factoid right there.

621
00:34:54,840 --> 00:34:56,920
Just want to make sure everybody knows this.

622
00:34:56,920 --> 00:34:58,920
It's fun stuff.

623
00:34:59,920 --> 00:35:02,040
All righty.

624
00:35:02,040 --> 00:35:06,800
So now we have our test case well defined.

625
00:35:06,800 --> 00:35:11,400
We have a project set up.

626
00:35:11,400 --> 00:35:13,920
Has everyone's Playwright been installed by this point?

627
00:35:13,920 --> 00:35:16,440
Okay, good, good.

628
00:35:16,440 --> 00:35:20,520
There was a snafu the other day and it didn't download for some people and I was like, oh

629
00:35:20,520 --> 00:35:21,520
my gosh.

630
00:35:21,520 --> 00:35:28,880
So what we can do now, just to make sure everything is kosher, let's run this test just to make

631
00:35:29,040 --> 00:35:34,320
sure Python, not Python, that PyTest is there.

632
00:35:34,320 --> 00:35:36,640
It can discover your test and all that.

633
00:35:36,640 --> 00:35:41,200
So to run your PyTest test, be at the top level directory in your project, so Playwright

634
00:35:41,200 --> 00:35:49,960
Python tutorial, Python 3-M for running a module, PyTest is the module we want to run,

635
00:35:49,960 --> 00:35:54,960
give it the path to the tests directory and now PyTest will discover everything in our

636
00:35:54,960 --> 00:35:57,920
test directory, find the test functions and run them as test functions.

637
00:35:58,320 --> 00:36:00,600
And it should know what pass.

638
00:36:00,600 --> 00:36:02,480
So you should see something like this.

639
00:36:02,480 --> 00:36:03,480
Here's the one module.

640
00:36:03,480 --> 00:36:07,560
The green dot means passing test, summary, one test passed.

641
00:36:07,560 --> 00:36:08,560
There's nothing going on here.

642
00:36:08,560 --> 00:36:09,560
It was a know-all.

643
00:36:09,560 --> 00:36:12,960
But we just want to make sure that the framework identifies and runs.

644
00:36:12,960 --> 00:36:14,760
So everybody good?

645
00:36:14,760 --> 00:36:16,960
Anybody have an issue running the test?

646
00:36:16,960 --> 00:36:17,960
Good.

647
00:36:17,960 --> 00:36:18,960
Oh, thank goodness.

648
00:36:18,960 --> 00:36:21,960
Wonderful, wonderful.

649
00:36:21,960 --> 00:36:23,960
Cool.

650
00:36:23,960 --> 00:36:34,680
Other thing I will mention here, we created a whole new project for our test cases.

651
00:36:34,680 --> 00:36:44,560
You may or may not want to put your tests in a separate project from the application

652
00:36:44,560 --> 00:36:45,560
you were testing.

653
00:36:45,560 --> 00:36:46,560
Right?

654
00:36:46,560 --> 00:36:51,600
It's an age-old question, should you put your tests in the same repo or a different repo?

655
00:36:51,600 --> 00:36:53,520
There's pros and cons to both.

656
00:36:53,520 --> 00:36:58,560
It's usually a best practice to put your tests in the same repo so that they can be version

657
00:36:58,560 --> 00:37:03,400
controlled together, so that developers can get to them more easily.

658
00:37:03,400 --> 00:37:07,760
Times you would not want to do that would be if your test cases are actually covering

659
00:37:07,760 --> 00:37:11,800
features that span separate repos, then you might want to put it separately.

660
00:37:11,800 --> 00:37:17,040
Or if your dev and test teams are completely separated by brick walls and never talk, which

661
00:37:17,040 --> 00:37:19,280
there are other issues with that.

662
00:37:20,280 --> 00:37:25,080
If it's a burden to constantly have to clone the dev repo and it's a gigabyte large and

663
00:37:25,080 --> 00:37:28,600
you have a very small test repo, then it might make sense to separate.

664
00:37:28,600 --> 00:37:30,960
I just want to throw that out there.

665
00:37:30,960 --> 00:37:35,320
We're creating our own directory because we're starting from scratch.

666
00:37:35,320 --> 00:37:38,080
Does that make sense?

667
00:37:38,080 --> 00:37:40,120
Cool, cool.

668
00:37:40,120 --> 00:37:41,600
All right.

669
00:37:41,600 --> 00:37:45,760
So all that boilerplate out of the way, who's ready to actually do some playwright stuff?

670
00:37:45,760 --> 00:37:46,760
Yeah.

671
00:37:46,760 --> 00:37:47,760
Sweet, sweet.

672
00:37:47,760 --> 00:37:48,760
Let's do it.

673
00:37:48,760 --> 00:37:49,760
Let's do it.

674
00:37:49,760 --> 00:37:50,760
Let's do it.

675
00:37:50,760 --> 00:37:51,760
Okay.

676
00:37:51,760 --> 00:37:59,760
So, first thing we need to do is we need to set up playwright for the project.

677
00:37:59,760 --> 00:38:01,760
No, no, no.

678
00:38:01,760 --> 00:38:02,760
Sorry.

679
00:38:02,760 --> 00:38:04,760
We already set up playwright for the project.

680
00:38:08,560 --> 00:38:12,760
We need to understand how to manipulate browsers with playwright.

681
00:38:12,760 --> 00:38:14,560
That's what I'm trying to say.

682
00:38:14,560 --> 00:38:20,360
So we already have gone over that playwright uses browser projects, not full browser, like

683
00:38:20,360 --> 00:38:22,160
stock browsers on your machine.

684
00:38:22,160 --> 00:38:26,840
So we're going to be testing it against Chromium or Firefox or WebKit.

685
00:38:26,840 --> 00:38:33,640
But there's another efficiency that comes into play with how playwright treats browsers.

686
00:38:33,640 --> 00:38:36,560
Raise your hand if you've done stuff with Selenium WebDriver before.

687
00:38:36,560 --> 00:38:37,560
Okay.

688
00:38:37,560 --> 00:38:39,880
So there's a good number of people.

689
00:38:39,880 --> 00:38:48,120
So with Selenium WebDriver, when you set it up, how it goes is in your code, you will

690
00:38:48,120 --> 00:38:52,840
for every test case and a setup routine or the beginning, you're going to initiate a

691
00:38:52,840 --> 00:38:53,840
WebDriver instance, right?

692
00:38:53,840 --> 00:38:57,400
You're going to say like driver equals new ChromeDriver.

693
00:38:57,400 --> 00:39:02,360
And what that does is it goes to your path, finds the ChromeDriver process, starts it

694
00:39:02,360 --> 00:39:06,840
as a new process on your machine, which then in turn goes to the Chrome browser instance

695
00:39:06,840 --> 00:39:09,280
on your machine and starts that as a process.

696
00:39:09,280 --> 00:39:11,240
And then the WebDriver interacts with that.

697
00:39:11,240 --> 00:39:16,040
You say things like driver find element, driver navigate, all those kinds of things.

698
00:39:16,040 --> 00:39:17,680
Then you do all your stuff in your test.

699
00:39:17,680 --> 00:39:21,960
And at the end of the test case, you will do driver.quit.

700
00:39:21,960 --> 00:39:26,160
So you'll quit the thing and that kills the processes and so it cleans it up.

701
00:39:26,160 --> 00:39:29,280
Then the next test case in your suite comes along and repeats the whole thing.

702
00:39:29,280 --> 00:39:33,920
And it is a strongly recommended practice that every test case has its own WebDriver

703
00:39:33,920 --> 00:39:37,720
instance that you start and stop because we all know WebDriver is a little flaky.

704
00:39:37,720 --> 00:39:41,560
We all know that if you, the longer a WebDriver instance lives, the more likely it is to do

705
00:39:41,560 --> 00:39:44,120
something terrible.

706
00:39:44,120 --> 00:39:47,560
And also if you're parallelizing your test suite, every test needs a separate process

707
00:39:47,560 --> 00:39:48,840
anyway.

708
00:39:48,840 --> 00:39:53,880
The problem with that is every time you're starting up not only a WebDriver executable

709
00:39:53,880 --> 00:39:59,900
process but also a full browser process, that is slow and resource intensive on your machine.

710
00:39:59,900 --> 00:40:03,640
We all know how many bajiga bytes Chrome likes to suck out of memory.

711
00:40:03,640 --> 00:40:08,480
And so the process of starting and stopping browsers for every single automated test in

712
00:40:08,480 --> 00:40:13,000
your suite could be anywhere from like two to five seconds, maybe even 10 seconds per

713
00:40:13,000 --> 00:40:14,000
test.

714
00:40:14,000 --> 00:40:15,000
Right?

715
00:40:15,000 --> 00:40:16,000
And you think that's not too bad.

716
00:40:16,000 --> 00:40:18,000
Imagine you have a suite of 100 tests.

717
00:40:18,000 --> 00:40:21,000
Imagine you have a suite of 1,000 tests.

718
00:40:21,000 --> 00:40:22,000
Right?

719
00:40:22,000 --> 00:40:25,840
That is a huge time tax.

720
00:40:25,840 --> 00:40:29,760
But it's necessary to preserve test case independence.

721
00:40:29,760 --> 00:40:32,680
So what Playwright says is, well, wait a minute, time out.

722
00:40:32,680 --> 00:40:38,280
We can get away with only one browser instance, one instance of Chromium, one instance of

723
00:40:38,280 --> 00:40:41,720
WebKit or one instance of Firefox.

724
00:40:41,720 --> 00:40:49,480
And using that one instance, what I can do on a...

725
00:40:49,480 --> 00:40:53,320
I can create one instance on a per test suite basis.

726
00:40:53,320 --> 00:40:59,400
But on a per test case basis, I can peel out browser contexts.

727
00:40:59,400 --> 00:41:06,000
Now what a browser context is, is basically like an incognito session within your browser.

728
00:41:06,000 --> 00:41:12,920
So it has all of its own cached state and stuff in and of itself within, you know, that

729
00:41:12,920 --> 00:41:15,480
browser address space and process.

730
00:41:15,480 --> 00:41:22,000
But contexts are essentially isolated, almost as if these are two Docker containers.

731
00:41:22,000 --> 00:41:24,760
And contexts are super fast to spin up.

732
00:41:24,760 --> 00:41:27,720
We're not talking seconds, we're talking milliseconds.

733
00:41:27,720 --> 00:41:35,160
So typically what the execution flow of Playwright, a player test suite would look like is you

734
00:41:35,160 --> 00:41:40,400
would start before any test run, let's say a Chromium browser instance, then at the start

735
00:41:40,400 --> 00:41:43,280
of each test you would spin off a browser context.

736
00:41:43,280 --> 00:41:46,320
And at the end of the test you would close the browser context.

737
00:41:46,320 --> 00:41:49,600
So that way you're getting massive performance savings.

738
00:41:49,600 --> 00:41:50,600
Right?

739
00:41:50,600 --> 00:41:56,600
When it comes to test automation efficiency, it's usually not about like the actual execution

740
00:41:56,600 --> 00:42:00,280
of the browser interactions, it's the waiting for those and the setup and cleanup of all

741
00:42:00,280 --> 00:42:01,840
the browser stuff.

742
00:42:01,840 --> 00:42:05,760
That's where you really get slow.

743
00:42:05,760 --> 00:42:12,320
So furthermore, within a browser context, you can also have multiple pages.

744
00:42:12,320 --> 00:42:15,760
Typically you'll only ever need one page per test case because you're going to load that

745
00:42:15,760 --> 00:42:17,960
page and navigate through it and click and scrape.

746
00:42:17,960 --> 00:42:21,240
But you could in theory have multiple pages per context.

747
00:42:21,240 --> 00:42:24,360
That would be like you click a button and it opens in a new tab.

748
00:42:24,360 --> 00:42:28,760
That would still be within one context, but it would be a separate page.

749
00:42:28,760 --> 00:42:35,280
So all that to say, when you go run your Playwright test, there is a browser, a browser context,

750
00:42:35,280 --> 00:42:37,040
and a page.

751
00:42:37,040 --> 00:42:42,520
Browsers for the whole test suite, context is for test case, and pages, usually you'll

752
00:42:42,520 --> 00:42:44,280
only need one per test case.

753
00:42:44,280 --> 00:42:46,640
Does this make sense?

754
00:42:46,640 --> 00:42:48,840
Okay, okay.

755
00:42:48,840 --> 00:42:50,160
Good.

756
00:42:50,160 --> 00:42:51,980
So conceptual stuff.

757
00:42:51,980 --> 00:42:55,460
How do we actually make that happen?

758
00:42:55,460 --> 00:42:58,300
Let's get back into the code here.

759
00:42:58,300 --> 00:43:03,360
So if you were just doing Playwright on its own, like no PyTest or anything, you'd have

760
00:43:03,360 --> 00:43:08,100
to do something like this.

761
00:43:08,100 --> 00:43:12,860
You'd have to say something like, okay, first of all, I need to get a browser.

762
00:43:12,860 --> 00:43:18,100
I don't know, like Playwright.

763
00:43:18,100 --> 00:43:19,100
Don't write this down, by the way.

764
00:43:19,100 --> 00:43:20,100
I just want to show you the example.

765
00:43:20,220 --> 00:43:26,100
We're going to delete this in just a moment.

766
00:43:26,100 --> 00:43:34,500
You need to launch a browser, then you need to get a context from that browser, and then

767
00:43:34,500 --> 00:43:41,140
from the context you need to get a page.

768
00:43:41,140 --> 00:43:46,100
And so essentially, this is basically what we just talked about in terms of the concepts,

769
00:43:46,100 --> 00:43:47,100
right?

770
00:43:48,100 --> 00:43:52,020
You would need to do this in like, you know, once per test week, but then you need to repeat

771
00:43:52,020 --> 00:43:53,900
this code all the time.

772
00:43:53,900 --> 00:43:54,900
That's not good.

773
00:43:54,900 --> 00:43:56,260
We don't like to repeat code.

774
00:43:56,260 --> 00:43:57,940
Repeating code is bad.

775
00:43:57,940 --> 00:44:01,460
So remember that PyTest Playwright plugin we installed?

776
00:44:01,460 --> 00:44:04,500
Remember, like, what was that?

777
00:44:04,500 --> 00:44:06,960
That will take care of all this for us automatically.

778
00:44:06,960 --> 00:44:09,620
So we can just say, hey, give me a page.

779
00:44:09,620 --> 00:44:18,420
So instead of doing this, what we can do is this.

780
00:44:18,420 --> 00:44:32,760
From Playwright import, oh, no, no, no, Playwright.sync API imports page.

781
00:44:32,760 --> 00:44:37,340
This is a type, because we're going to use type annotations.

782
00:44:37,340 --> 00:44:39,380
Does everyone use type annotations in Python?

783
00:44:39,380 --> 00:44:41,820
It's becoming pretty ubiquitous.

784
00:44:41,820 --> 00:44:42,820
It's optional.

785
00:44:42,820 --> 00:44:44,300
I highly recommend it.

786
00:44:44,300 --> 00:44:45,300
We're going to do it today.

787
00:44:45,300 --> 00:44:47,100
So if it's new to you, just kind of follow along.

788
00:44:47,100 --> 00:44:48,420
It'll be cool.

789
00:44:48,420 --> 00:44:51,580
Pick up another new skill.

790
00:44:51,580 --> 00:45:01,140
And in here, all I'm going to need to do is this.

791
00:45:01,140 --> 00:45:04,460
And I'll add the type annotation here for this.

792
00:45:04,460 --> 00:45:08,100
So in PyTest, this is a fixture.

793
00:45:08,100 --> 00:45:13,180
A fixture is a special function that you can use to do setup and cleanup.

794
00:45:13,180 --> 00:45:15,340
The fixture runs before your test.

795
00:45:15,340 --> 00:45:18,420
It'll create whatever objects, return that object.

796
00:45:18,420 --> 00:45:22,660
And then when you declare it in the arguments of a test case function, whatever's returned

797
00:45:22,660 --> 00:45:25,300
gets injected into this function.

798
00:45:25,300 --> 00:45:32,940
So page is the name of a fixture from that PyTest Playwright plugin for constructing

799
00:45:33,020 --> 00:45:40,340
a new page object off of a browser context, off of a browser.

800
00:45:40,340 --> 00:45:41,340
So we didn't need to know any of that.

801
00:45:41,340 --> 00:45:43,060
All we need to say, hey, give me a page.

802
00:45:43,060 --> 00:45:44,060
Give me the page.

803
00:45:44,060 --> 00:45:45,060
And it gives it to you.

804
00:45:45,060 --> 00:45:46,060
Easy, right?

805
00:45:46,060 --> 00:45:47,060
Isn't this amazing?

806
00:45:47,060 --> 00:45:48,060
Yes, no?

807
00:45:48,060 --> 00:45:49,060
Yeah, there we go.

808
00:45:49,060 --> 00:45:50,060
Okay, cool.

809
00:45:50,060 --> 00:45:51,060
Cool.

810
00:45:51,060 --> 00:45:52,060
It is amazing.

811
00:45:52,060 --> 00:45:57,060
I thought it was amazing.

812
00:45:57,060 --> 00:46:01,660
So this will give us our page very simply.

813
00:46:01,660 --> 00:46:06,940
Once we have our page, now we can start doing stuff with the page.

814
00:46:06,940 --> 00:46:09,260
So let's implement this first step.

815
00:46:09,260 --> 00:46:13,600
Given the DuckDuckGo home page is displayed, a lot of Playwright calls are going to start

816
00:46:13,600 --> 00:46:14,600
with your page.

817
00:46:14,600 --> 00:46:15,600
Why?

818
00:46:15,600 --> 00:46:18,100
Because stuff is what's happening on the page.

819
00:46:18,100 --> 00:46:20,060
Page dot.

820
00:46:20,060 --> 00:46:25,540
Now here, the type annotation plus the fact that I'm using an editor like VS Code is going

821
00:46:25,540 --> 00:46:28,120
to give me this wonderful autocomplete.

822
00:46:28,120 --> 00:46:29,920
So I will be straight with you.

823
00:46:29,920 --> 00:46:32,240
I don't know the whole Playwright API.

824
00:46:32,240 --> 00:46:33,240
I don't need to.

825
00:46:33,240 --> 00:46:35,200
Because I can just go kind of figure things out.

826
00:46:35,200 --> 00:46:36,200
But I'm not sure.

827
00:46:36,200 --> 00:46:38,480
Like, hey, how do I load a page?

828
00:46:38,480 --> 00:46:39,480
Do I navigate?

829
00:46:39,480 --> 00:46:41,880
No, do I go to...

830
00:46:41,880 --> 00:46:46,600
Oh, I go to the page like this.

831
00:46:46,600 --> 00:46:52,120
So if you want to load a page, page dot go to, and then you can see here it also gives

832
00:46:52,120 --> 00:46:53,120
you the context to help.

833
00:46:53,120 --> 00:46:54,120
What do I put in?

834
00:46:54,120 --> 00:46:56,280
You put in the URL as a string.

835
00:46:56,280 --> 00:47:04,400
So HTTP, yes, colon slash slash www dot duck duck go dot com.

836
00:47:04,400 --> 00:47:05,400
Oh, yes.

837
00:47:05,400 --> 00:47:06,400
Boom.

838
00:47:06,400 --> 00:47:09,760
And that's how we do it.

839
00:47:09,760 --> 00:47:10,760
Make sense?

840
00:47:10,760 --> 00:47:11,760
Questions, concerns?

841
00:47:11,760 --> 00:47:17,560
Seems pretty basic, right?

842
00:47:17,560 --> 00:47:20,760
One other thing I want to shout out.

843
00:47:20,760 --> 00:47:33,080
You may have noticed this part of the import, Playwright dot sync API.

844
00:47:33,080 --> 00:47:39,180
You can use Playwright in Python either synchronously or asynchronously.

845
00:47:39,180 --> 00:47:43,180
You can choose which one you want to do.

846
00:47:44,180 --> 00:47:51,180
For almost all testing purposes, the sync API is sufficient.

847
00:47:51,180 --> 00:47:52,740
You don't need to make it async.

848
00:47:52,740 --> 00:47:55,220
All you're going to do if you do that is...

849
00:47:55,220 --> 00:47:58,220
Oh, what was that?

850
00:47:58,220 --> 00:47:59,220
Uh-oh.

851
00:47:59,220 --> 00:48:00,220
That was odd.

852
00:48:00,220 --> 00:48:01,220
Sorry, folks.

853
00:48:01,220 --> 00:48:05,940
All you're going to do if you do async is just start adding await calls to everything.

854
00:48:05,940 --> 00:48:09,500
And it's not really going to make a huge difference for this application.

855
00:48:10,460 --> 00:48:13,460
I'm going to stick to using the sync API.

856
00:48:13,460 --> 00:48:19,940
If you look at the docs online for Playwright Python, almost all their stuff is the sync

857
00:48:19,940 --> 00:48:23,660
API, though they show you how to do the async one.

858
00:48:23,660 --> 00:48:28,980
It would make sense to do async if you're using Playwright for something other than

859
00:48:28,980 --> 00:48:32,480
automating tests, like if you just wanted to make a web scraper or something.

860
00:48:32,480 --> 00:48:34,140
That would be when you'd want to use async.

861
00:48:34,140 --> 00:48:36,900
Does that make sense?

862
00:48:36,900 --> 00:48:38,700
Okay.

863
00:48:38,700 --> 00:48:41,100
So who wants to run this test?

864
00:48:41,100 --> 00:48:44,020
Yeah, let's do it.

865
00:48:44,020 --> 00:48:49,340
So let's come back down to our terminal and let's run the test and see what happens.

866
00:48:49,340 --> 00:48:52,380
Three, two, one, go.

867
00:48:52,380 --> 00:48:54,420
It passed.

868
00:48:54,420 --> 00:48:55,860
Yay.

869
00:48:55,860 --> 00:48:59,940
Did it all pass on your machines?

870
00:48:59,940 --> 00:49:01,700
But there's just a problem here.

871
00:49:01,700 --> 00:49:04,260
I didn't see anything.

872
00:49:04,260 --> 00:49:05,260
I didn't see it.

873
00:49:05,260 --> 00:49:06,820
Did any of you see anything?

874
00:49:06,820 --> 00:49:07,820
No.

875
00:49:07,820 --> 00:49:09,500
Oh, man.

876
00:49:09,500 --> 00:49:15,580
When I'm developing tests, I want to see it happen because seeing is believing, right?

877
00:49:15,580 --> 00:49:25,860
By default, when you run your tests, Playwright uses headless mode, so you can't see anything.

878
00:49:25,860 --> 00:49:29,420
That's a good thing because when you run your tests in, let's say, a continuous integration

879
00:49:29,420 --> 00:49:33,700
environment, you want it to be headless because you don't want it to use those extra resources

880
00:49:33,700 --> 00:49:34,700
or anything.

881
00:49:34,700 --> 00:49:36,300
You want it to be fast, lean, all that good stuff.

882
00:49:36,300 --> 00:49:40,540
But when we're developing tests, we want to use headed mode because we want to see

883
00:49:40,540 --> 00:49:43,780
the things to make sure it's actually doing what we expect.

884
00:49:43,780 --> 00:49:51,020
So to run it in headed mode, you can add a command line option, dash, dash, headed, like

885
00:49:51,020 --> 00:49:54,340
this.

886
00:49:54,340 --> 00:49:59,420
This is another nifty thing about the PyTest plugin.

887
00:49:59,420 --> 00:50:03,740
It will add these special things to the PyTest command line.

888
00:50:03,740 --> 00:50:05,880
Another reason why we use that.

889
00:50:05,880 --> 00:50:12,480
So let's run it in headed mode and see what happens.

890
00:50:12,480 --> 00:50:17,360
See the browser is coming up, and it should be navigating.

891
00:50:17,360 --> 00:50:20,080
Man, that's really slow.

892
00:50:20,080 --> 00:50:23,520
What happened?

893
00:50:23,520 --> 00:50:24,520
There it goes.

894
00:50:24,520 --> 00:50:25,520
Boom.

895
00:50:25,520 --> 00:50:27,360
Let me try that one more time.

896
00:50:27,360 --> 00:50:29,320
That seemed really slow.

897
00:50:29,320 --> 00:50:31,920
There it goes.

898
00:50:31,920 --> 00:50:34,040
Okay, boom, boom.

899
00:50:34,040 --> 00:50:36,080
So we saw it came up really fast and then closed.

900
00:50:36,080 --> 00:50:39,520
Because all we did was load it, and then the test is done.

901
00:50:39,520 --> 00:50:41,800
Did headed mode work for all y'all?

902
00:50:41,800 --> 00:50:43,760
Yeah, sweet.

903
00:50:43,760 --> 00:50:49,560
Now another frustrating thing, though, with that is PlayFright is very fast.

904
00:50:49,560 --> 00:50:52,440
Usually it'll be like bloop, bloop, like really fast, like boom, boom.

905
00:50:52,440 --> 00:50:56,760
You won't be able to track it kind of like at human speed because it's moving at machine

906
00:50:56,760 --> 00:50:57,960
speed.

907
00:50:57,960 --> 00:51:02,080
Not only do I like to do headed mode, but I like to slow it down while I'm developing.

908
00:51:02,080 --> 00:51:09,880
So there's another command line option called dash dash slow mo, S-L-O-W-M-O.

909
00:51:09,880 --> 00:51:13,680
And this you can give a number of milliseconds to slow down every single interaction that

910
00:51:13,680 --> 00:51:15,160
PlayFright performs.

911
00:51:15,160 --> 00:51:19,800
So I like putting in something like a thousand or two thousand, one to two seconds.

912
00:51:19,800 --> 00:51:23,680
Let's see what happens when we do this.

913
00:51:23,680 --> 00:51:27,560
So that gives us a little bit of pause to see like, oh, it actually did load the DuckDuckGo

914
00:51:27,560 --> 00:51:29,560
page.

915
00:51:29,560 --> 00:51:31,560
Cool.

916
00:51:31,560 --> 00:51:36,040
All right.

917
00:51:36,040 --> 00:51:37,040
Everybody with me so far?

918
00:51:37,040 --> 00:51:38,040
Cool.

919
00:51:38,040 --> 00:51:41,480
Who's ready to do the next step?

920
00:51:41,480 --> 00:51:43,440
Sweet.

921
00:51:43,440 --> 00:51:51,560
So given DuckDuckGo home page is displayed, when the user searches for a phrase, how do

922
00:51:51,560 --> 00:51:52,720
we search for a phrase again?

923
00:51:52,720 --> 00:51:57,080
We got to enter in that, what you call it, the search bar.

924
00:51:57,080 --> 00:52:09,640
So if I go back to my browser, how do we know where this search bar is located on the

925
00:52:09,640 --> 00:52:10,640
page?

926
00:52:10,640 --> 00:52:13,280
How do we tell PlayFright where that is?

927
00:52:13,280 --> 00:52:15,800
We have to use something called a locator.

928
00:52:15,800 --> 00:52:18,520
Have you all used locators before?

929
00:52:18,520 --> 00:52:19,800
Maybe some, maybe not.

930
00:52:19,800 --> 00:52:20,800
Okay.

931
00:52:20,800 --> 00:52:23,920
Locators are a pain in the butt.

932
00:52:23,920 --> 00:52:26,080
Real talk.

933
00:52:26,080 --> 00:52:29,200
Locators make WebUI automation a pain.

934
00:52:29,200 --> 00:52:31,280
That plus waiting, but waiting is problem solved.

935
00:52:31,280 --> 00:52:33,680
We'll see that in just a moment here.

936
00:52:33,680 --> 00:52:41,800
So when we look at a page as humans, we see this visual thing, right?

937
00:52:41,800 --> 00:52:47,200
When you look at the page as a browser, I'm going to inspect the page code, it's a bunch

938
00:52:47,200 --> 00:52:49,440
of HTML.

939
00:52:49,440 --> 00:52:53,200
There's also some CSS thrown in there for styling and maybe some JavaScript to make

940
00:52:53,200 --> 00:52:54,440
it move.

941
00:52:54,560 --> 00:53:00,120
The structure of the page is defined in HTML and it's all these different tags and stuff.

942
00:53:00,120 --> 00:53:04,800
Every element on the page has a corresponding HTML tag that defines where and how it should

943
00:53:04,800 --> 00:53:06,720
be rendered.

944
00:53:06,720 --> 00:53:12,480
In this case, what I want to do is I want to find the HTML tag for this particular search

945
00:53:12,480 --> 00:53:14,440
bar.

946
00:53:14,440 --> 00:53:16,560
Google Chrome makes this really easy.

947
00:53:16,560 --> 00:53:19,480
Like I showed, you can right click and go to inspect.

948
00:53:19,480 --> 00:53:23,000
It opens up Google Chrome's DevTools.

949
00:53:23,000 --> 00:53:25,080
In here, there is a pane called elements.

950
00:53:25,080 --> 00:53:26,400
I know this is really small.

951
00:53:26,400 --> 00:53:27,400
I'm so sorry.

952
00:53:27,400 --> 00:53:28,400
I don't know if...

953
00:53:28,400 --> 00:53:31,400
Am I able to zoom this in?

954
00:53:31,400 --> 00:53:35,080
I don't know if I can zoom in on this.

955
00:53:35,080 --> 00:53:36,080
Oh, we can.

956
00:53:36,080 --> 00:53:37,080
Cool.

957
00:53:37,080 --> 00:53:39,840
That's marginally better.

958
00:53:39,840 --> 00:53:44,160
But just right click, inspect, you'll see it on your machine.

959
00:53:44,160 --> 00:53:47,760
And so you can see the entire HTML source of the page.

960
00:53:47,760 --> 00:53:52,640
Then what you can do in this upper left corner of Google Chrome DevTools, there's this little

961
00:53:52,640 --> 00:53:54,240
arrow with a box.

962
00:53:54,240 --> 00:53:55,240
Click that.

963
00:53:55,240 --> 00:53:56,360
It should turn blue.

964
00:53:56,360 --> 00:54:03,520
Then when you hover over the rendered web page, you'll see it's highlighting a section

965
00:54:03,520 --> 00:54:08,480
for that element and then showing you the corresponding HTML code in the source.

966
00:54:08,480 --> 00:54:11,720
So what I do is I want to get this search bar.

967
00:54:11,720 --> 00:54:14,400
I highlight the search bar and I click it.

968
00:54:14,400 --> 00:54:16,280
And then here, I come over here and look.

969
00:54:16,280 --> 00:54:17,280
Ah, okay.

970
00:54:17,280 --> 00:54:20,480
So that search bar is this input element.

971
00:54:20,480 --> 00:54:23,240
From this input element, then I'm trying...

972
00:54:23,240 --> 00:54:28,960
Then my next thing is I need to come up with a selector that will pinpoint that element.

973
00:54:28,960 --> 00:54:34,000
Because what a locator does is it points to that element on the page.

974
00:54:34,000 --> 00:54:35,200
Locators are just pointers.

975
00:54:35,200 --> 00:54:41,100
The selector is the query that we're using to build that locator.

976
00:54:41,100 --> 00:54:45,240
And so you can have selectors of many different types.

977
00:54:45,240 --> 00:54:50,120
The easiest kind of selector would be if you have a unique ID.

978
00:54:50,120 --> 00:54:54,200
If you have a unique ID attribute, like this one here has a unique ID search form input

979
00:54:54,200 --> 00:55:02,840
home page, we can make a selector for that ID and then build a locator with that ID.

980
00:55:02,840 --> 00:55:04,760
Easy peasy.

981
00:55:04,760 --> 00:55:10,600
If you don't have an ID, you can do things like, well, maybe I can write a CSS selector.

982
00:55:10,600 --> 00:55:14,780
Just like regular CSS for styling, you can write a CSS selector of the same syntax for

983
00:55:14,780 --> 00:55:17,380
pinpointing elements on your page.

984
00:55:17,380 --> 00:55:19,640
You can also use XPath.

985
00:55:19,640 --> 00:55:23,200
XPath is a bit of a sledgehammer.

986
00:55:23,200 --> 00:55:27,960
If you all have used XPath before, it's like that double slash and then the attribute name,

987
00:55:27,960 --> 00:55:30,200
the more slashes and dots.

988
00:55:30,200 --> 00:55:34,840
Nice thing about XPath is you have functions that you can pop in there.

989
00:55:34,840 --> 00:55:39,640
Cool thing about XPath, it is more powerful than CSS selectors because you can uniquely

990
00:55:39,640 --> 00:55:42,520
identify any element on the page with an XPath.

991
00:55:42,520 --> 00:55:49,400
You cannot always uniquely identify any element on a page with a CSS selector.

992
00:55:49,400 --> 00:55:55,120
But those tend to be the top three kinds of selectors that people use traditionally,

993
00:55:55,120 --> 00:55:57,120
whether it's Selenium, Playwright, whatever.

994
00:55:57,120 --> 00:56:00,440
IDs, CSS selectors, or XPaths.

995
00:56:00,440 --> 00:56:04,080
Playwright also has some more advanced selectors.

996
00:56:04,080 --> 00:56:11,280
For example, if you had a button that was named something like login, you can use a

997
00:56:11,280 --> 00:56:12,960
text selector.

998
00:56:12,960 --> 00:56:14,080
Text equals login.

999
00:56:14,080 --> 00:56:17,560
Pop the text in and Playwright will look at all the elements on the page for one that

1000
00:56:17,560 --> 00:56:20,400
has the text login.

1001
00:56:20,400 --> 00:56:21,400
Pretty powerful.

1002
00:56:21,400 --> 00:56:23,040
Selenium doesn't do that.

1003
00:56:23,040 --> 00:56:30,900
If you are using React or Vue as your front-end framework, React and Vue have some particular

1004
00:56:30,900 --> 00:56:37,000
special locator or selector syntax for their own little special projects.

1005
00:56:37,000 --> 00:56:39,720
Playwright supports those syntaxes as well.

1006
00:56:39,720 --> 00:56:44,920
So you have a lot of ways that you can come up with locators.

1007
00:56:44,920 --> 00:56:51,040
My recommendation on locators, write the simplest locator you can that uniquely identifies

1008
00:56:51,040 --> 00:56:54,920
the element on the page.

1009
00:56:54,920 --> 00:56:58,560
IDs are a lot simpler than very long XPaths.

1010
00:56:58,560 --> 00:57:04,480
Another thing is, don't like, I don't know if it'll do it here.

1011
00:57:04,480 --> 00:57:06,080
Let's see.

1012
00:57:06,080 --> 00:57:11,240
I know some tools, it's like you can right-click on an element and then say, give me the locator

1013
00:57:11,240 --> 00:57:15,800
and have Chrome or whatever tool you're using auto-generate locators.

1014
00:57:15,800 --> 00:57:18,680
Nine times out of ten, those locators are garbage.

1015
00:57:18,680 --> 00:57:22,520
Always write your own.

1016
00:57:22,520 --> 00:57:33,740
If you want to learn more about how to write good locators, there is a test automation

1017
00:57:33,740 --> 00:57:37,640
university course entirely about different locators.

1018
00:57:37,640 --> 00:57:42,560
If you want to get deep down into what it means to write advanced XPaths or CSS selectors

1019
00:57:42,560 --> 00:57:46,040
and stuff, take this course totally free.

1020
00:57:46,040 --> 00:57:51,160
I developed this, yay.

1021
00:57:51,160 --> 00:57:54,800
Typically what I found when I'm doing this workshop, when I give it to testing people,

1022
00:57:54,800 --> 00:57:58,120
they already all know about locators, so it's no big deal.

1023
00:57:58,120 --> 00:58:02,840
When I give it to people like Python folks, a lot of times some of the folks might not

1024
00:58:02,840 --> 00:58:06,560
be as familiar with testing, might not be as familiar with locators.

1025
00:58:06,560 --> 00:58:09,080
In this workshop, I typically just give the locators.

1026
00:58:09,080 --> 00:58:12,620
I don't go through this whole song and dance of inspect and scrape every time, but I do

1027
00:58:12,620 --> 00:58:18,040
want to walk through it once so that you all can see how we get locators.

1028
00:58:18,040 --> 00:58:19,040
That makes sense.

1029
00:58:19,040 --> 00:58:22,720
If you're already comfortable with this, awesome.

1030
00:58:22,720 --> 00:58:26,040
If you feel like you want to learn more and brush up, you've got resources.

1031
00:58:26,040 --> 00:58:27,040
Question.

1032
00:58:27,040 --> 00:58:43,680
If it's your practice that you stuff data tags in there for uniquely identifying things

1033
00:58:43,680 --> 00:58:45,840
and that's what you want to roll with, no problem.

1034
00:58:45,840 --> 00:58:51,960
That is a very easy CSS selector.

1035
00:58:52,960 --> 00:58:56,400
I'm going to go ahead and start with the

1036
00:58:56,400 --> 00:58:57,400
question.

1037
00:58:57,400 --> 00:59:03,640
A lot of times what I have found, unfortunately, is that in a lot of teams, developers and

1038
00:59:03,640 --> 00:59:05,600
testers are kind of separate.

1039
00:59:05,600 --> 00:59:09,280
When testers have to come in, it's going to be the tester's responsibility to automate.

1040
00:59:09,280 --> 00:59:12,280
They kind of have to deal with the page as it is.

1041
00:59:12,280 --> 00:59:16,680
They always get the privilege of being able to make sure there's IDs or make sure there's

1042
00:59:16,680 --> 00:59:17,680
data tags.

1043
00:59:17,680 --> 00:59:21,680
If you can collaborate with the people doing your automation or if you're doing the automation,

1044
00:59:22,680 --> 00:59:25,920
all the locators in this app are going to be super easy because DuckDuckGo is super

1045
00:59:25,920 --> 00:59:28,920
awesome, but that's not always the case.

1046
00:59:28,920 --> 00:59:29,920
Yes.

1047
00:59:29,920 --> 00:59:40,920
Does Playwright give me the opportunity to do what?

1048
00:59:40,920 --> 00:59:46,800
I'm sorry.

1049
00:59:46,800 --> 00:59:47,800
If they need to verify.

1050
00:59:47,800 --> 00:59:48,800
Yes.

1051
00:59:48,800 --> 00:59:57,800
So like typing in your username and password?

1052
00:59:57,800 --> 00:59:58,800
Yes.

1053
00:59:58,800 --> 01:00:03,440
So you can, within your browser context, you can slap on authentication stuff like that,

1054
01:00:03,440 --> 01:00:07,480
like headers or cookies or whatnot, or certs, so it just kind of goes through.

1055
01:00:07,480 --> 01:00:11,280
Or you can do it the old-fashioned way of like type in username, type in login, or type

1056
01:00:11,280 --> 01:00:13,080
in password, hit login.

1057
01:00:13,080 --> 01:00:16,080
There's ways you can handle that, yes.

1058
01:00:16,080 --> 01:00:20,200
Is he good?

1059
01:00:20,200 --> 01:00:23,200
You seem a little skeptical.

1060
01:00:23,200 --> 01:00:26,200
Okay.

1061
01:00:26,200 --> 01:00:29,200
Sorry.

1062
01:00:29,200 --> 01:00:34,200
Pardon me.

1063
01:00:34,200 --> 01:00:37,200
All right.

1064
01:00:37,320 --> 01:00:49,320
So let's take our ID and let's make this interaction happen.

1065
01:00:49,320 --> 01:00:52,320
So what we're going to do is we're going to start with the page again.

1066
01:00:52,320 --> 01:00:57,320
We're going to say page.locator.

1067
01:00:57,320 --> 01:01:02,840
In parentheses, we are going to put ID equals bam.

1068
01:01:02,840 --> 01:01:08,280
What this does is this will create a locator object using the selector, and the locator

1069
01:01:08,280 --> 01:01:11,480
will be what is used to fetch the element on the page.

1070
01:01:11,480 --> 01:01:14,280
So this is not like an element object.

1071
01:01:14,280 --> 01:01:16,080
This is a locator object.

1072
01:01:16,080 --> 01:01:18,760
This is essentially a pointer to an element.

1073
01:01:18,760 --> 01:01:21,040
You can create locators at any time.

1074
01:01:21,040 --> 01:01:25,200
It's only when you call them with interactions that they'll actually go to the page and try

1075
01:01:25,200 --> 01:01:27,520
to do something.

1076
01:01:27,520 --> 01:01:33,520
So we've got the locator, and what do we want to do to that particular element?

1077
01:01:33,520 --> 01:01:38,840
We want to type something in, right?

1078
01:01:38,840 --> 01:01:40,840
So is there like a type?

1079
01:01:40,840 --> 01:01:43,640
Is there like a send key?

1080
01:01:43,640 --> 01:01:46,000
No, that's not it.

1081
01:01:46,000 --> 01:01:49,640
There's a method called fill.

1082
01:01:49,640 --> 01:02:00,040
What we want to do is we want to use the fill method to send our search phrase, panda.

1083
01:02:00,040 --> 01:02:02,280
So we have a small separation of concerns here.

1084
01:02:02,280 --> 01:02:07,680
We have structure of the page versus interaction on the page.

1085
01:02:07,680 --> 01:02:11,680
But this will essentially do that typing for us.

1086
01:02:11,680 --> 01:02:13,080
Sweet.

1087
01:02:13,080 --> 01:02:18,640
Alternatively, you could do this command, page.fill.

1088
01:02:18,640 --> 01:02:22,240
Oh my gosh, you mean I don't have to create a locator object directly?

1089
01:02:22,240 --> 01:02:26,640
I can just say page.fill and do it like this?

1090
01:02:26,640 --> 01:02:28,120
Yes, yes, you can.

1091
01:02:28,120 --> 01:02:31,320
You can use one method instead of two.

1092
01:02:31,320 --> 01:02:36,760
However, I recommend not doing it that way.

1093
01:02:36,760 --> 01:02:38,760
I recommend splitting.

1094
01:02:38,760 --> 01:02:40,320
Why?

1095
01:02:40,320 --> 01:02:41,960
Separation of concerns.

1096
01:02:41,960 --> 01:02:48,560
Plus, when we refactor this into page objects a little bit later, it'll be easier and cleaner.

1097
01:02:49,480 --> 01:02:57,640
In fact, the Playwright team today recommends strongly that you go about it this way.

1098
01:02:57,640 --> 01:03:01,000
Even though this is still supported in the syntax, they recommend that you do not do

1099
01:03:01,000 --> 01:03:06,000
it that way.

1100
01:03:06,000 --> 01:03:09,800
So we enter the text.

1101
01:03:09,800 --> 01:03:10,800
What else do we need to do?

1102
01:03:10,800 --> 01:03:18,160
We need to click the search button so it actually submits.

1103
01:03:18,160 --> 01:03:23,520
So to do that, page.locator is going to be another locator.

1104
01:03:23,520 --> 01:03:27,000
I'm just going to give you the ID.

1105
01:03:27,000 --> 01:03:35,420
It's ID equals search button home page.

1106
01:03:35,420 --> 01:03:38,920
Any guesses as to what this method is going to be?

1107
01:03:38,920 --> 01:03:39,920
Click.

1108
01:03:39,920 --> 01:03:40,920
Boom.

1109
01:03:40,920 --> 01:03:41,920
Ta-da.

1110
01:03:41,920 --> 01:03:42,920
All righty.

1111
01:03:42,920 --> 01:03:45,920
Who wants to run it?

1112
01:03:46,680 --> 01:03:48,000
Yeah, let's run it.

1113
01:03:48,000 --> 01:03:49,000
See what happens.

1114
01:03:49,000 --> 01:03:59,040
Again, I'm going to use headed and slow-mo.

1115
01:03:59,040 --> 01:04:00,040
It did the thing.

1116
01:04:00,040 --> 01:04:01,040
Sweet.

1117
01:04:01,040 --> 01:04:04,340
It didn't check anything when it was done, but it did the thing.

1118
01:04:04,340 --> 01:04:08,100
We have our interaction part covered.

1119
01:04:08,100 --> 01:04:11,560
Now all we got to do is the verification part.

1120
01:04:11,560 --> 01:04:15,820
So yeah, if I shrink my terminal down a little bit.

1121
01:04:15,820 --> 01:04:17,900
So far, yep, we've got the first two steps done.

1122
01:04:17,900 --> 01:04:21,900
Our test case should look like this.

1123
01:04:21,900 --> 01:04:27,260
Cool.

1124
01:04:27,260 --> 01:04:33,020
So we are now one hour into our tutorial.

1125
01:04:33,020 --> 01:04:37,580
I would like to stop for a little break if that's cool with everyone.

1126
01:04:37,580 --> 01:04:41,580
Before we break, are there any other questions folks have?

1127
01:04:41,580 --> 01:04:44,060
Nope, nope.

1128
01:04:44,060 --> 01:04:45,540
Okay, cool.

1129
01:04:46,260 --> 01:04:49,700
How do we feel about a five-minute break?

1130
01:04:49,700 --> 01:04:50,700
That'd be good.

1131
01:04:50,700 --> 01:04:52,700
Stretch legs, maybe hit the head.

1132
01:04:52,700 --> 01:04:53,700
All righty.

1133
01:04:53,700 --> 01:04:57,740
So, Apple time, 2.40 Mountain Time.

1134
01:04:57,740 --> 01:05:01,220
We'll be back in here and we shall implement those verifications.

1135
01:05:01,220 --> 01:05:06,900
We're good to go?

1136
01:05:06,900 --> 01:05:09,460
Hi everyone again.

1137
01:05:09,460 --> 01:05:10,460
Welcome back.

1138
01:05:10,460 --> 01:05:12,460
How are we feeling?

1139
01:05:12,460 --> 01:05:13,460
Good.

1140
01:05:13,460 --> 01:05:14,460
Are we excited?

1141
01:05:14,460 --> 01:05:15,460
Yeah.

1142
01:05:16,380 --> 01:05:17,380
Awesome.

1143
01:05:17,380 --> 01:05:18,540
I'm feeling pretty good.

1144
01:05:18,540 --> 01:05:22,340
I had a rough morning getting here, but I'm feeling all right.

1145
01:05:22,340 --> 01:05:27,220
So before we jump back into the verification part of testing, I just want to say I have

1146
01:05:27,220 --> 01:05:31,340
some cool stuff for you if you would be interested.

1147
01:05:31,340 --> 01:05:33,940
First of all, I have a bunch of Playwright stickers.

1148
01:05:33,940 --> 01:05:36,220
I got these directly from the Microsoft team.

1149
01:05:36,220 --> 01:05:39,660
So I have way more than I need for myself or even this class.

1150
01:05:39,660 --> 01:05:42,100
So feel free to take as many as you like.

1151
01:05:42,100 --> 01:05:47,300
I also have my own Panty Night Automation Panda stickers.

1152
01:05:47,300 --> 01:05:48,780
These are usually popular with kids.

1153
01:05:48,780 --> 01:05:49,780
Oh, look at this.

1154
01:05:49,780 --> 01:05:50,780
So cute, right?

1155
01:05:50,780 --> 01:05:53,900
So yeah, feel free to take some of those.

1156
01:05:53,900 --> 01:05:59,220
And also, I have some swag from the previous conference I was at in Orlando.

1157
01:05:59,220 --> 01:06:01,940
So like I said, I am with Apple tools.

1158
01:06:01,940 --> 01:06:03,660
I'm a developer advocate.

1159
01:06:03,660 --> 01:06:09,400
I do all things testing, automation, not just visual testing, but I'm very passionate about

1160
01:06:09,400 --> 01:06:11,220
doing high quality work.

1161
01:06:11,220 --> 01:06:13,940
And that includes testing and automation.

1162
01:06:13,940 --> 01:06:19,620
And so I just gave a talk, which I entitled Making Great Waves, Eight Software Testing

1163
01:06:19,620 --> 01:06:21,020
Convictions.

1164
01:06:21,020 --> 01:06:29,820
And the theme of that talk was I hold certain convictions, things like shift left and right,

1165
01:06:29,820 --> 01:06:32,540
automate, prioritize your work based on risk.

1166
01:06:32,540 --> 01:06:36,380
But I compared that to Japanese woodblock printing.

1167
01:06:36,380 --> 01:06:37,700
Everybody probably knows the great wave.

1168
01:06:37,700 --> 01:06:39,600
Unfortunately, all my great wave prints are gone.

1169
01:06:39,600 --> 01:06:41,480
So here's Red Fuji instead.

1170
01:06:41,480 --> 01:06:43,360
But I've always loved these prints.

1171
01:06:43,360 --> 01:06:47,240
They're very cool, very colorful.

1172
01:06:47,240 --> 01:06:52,760
Here so I've got like a Kabuki actor and I have the Matsumoto frog.

1173
01:06:52,760 --> 01:06:54,200
Look at this good boy.

1174
01:06:54,200 --> 01:06:55,200
Isn't that just amazing?

1175
01:06:55,200 --> 01:06:56,200
Right?

1176
01:06:56,200 --> 01:06:57,640
I got some other stuff here too.

1177
01:06:57,640 --> 01:06:59,720
Geisha, you know, plum trees.

1178
01:06:59,720 --> 01:07:06,920
But anyway, my talk was we can learn things from the Okiawa Japanese woodblock print artists

1179
01:07:06,920 --> 01:07:11,320
and how they approach quality and how we approach quality as software engineers.

1180
01:07:11,320 --> 01:07:16,280
Because testing and development are as much an art as they are a science.

1181
01:07:16,280 --> 01:07:18,600
So I had these left over.

1182
01:07:18,600 --> 01:07:24,440
If you want pictures of Red Fuji's and cool little good boy frogs or you want to see what

1183
01:07:24,440 --> 01:07:29,200
my eight software testing convictions are or if you want to scan this QRR code on the

1184
01:07:29,200 --> 01:07:35,480
back and do an Apple tools visual testing challenge and win a $250 PayPal gift card,

1185
01:07:35,480 --> 01:07:39,200
feel free to come up and take these on the brakes.

1186
01:07:39,200 --> 01:07:40,940
Please make them disappear.

1187
01:07:40,940 --> 01:07:42,280
Enjoy the art.

1188
01:07:42,280 --> 01:07:45,560
Enjoy the convictions and enjoy the little hackathon there.

1189
01:07:45,560 --> 01:07:46,680
So cool.

1190
01:07:46,680 --> 01:07:49,360
Any questions about that before we get back to this?

1191
01:07:49,360 --> 01:07:52,720
No, I didn't think so.

1192
01:07:52,720 --> 01:07:53,720
Cool.

1193
01:07:53,720 --> 01:07:55,240
All righty.

1194
01:07:55,240 --> 01:07:57,360
Let's do some verifications.

1195
01:07:57,360 --> 01:08:00,280
Oh, boy.

1196
01:08:00,280 --> 01:08:04,400
And let me get my own little code back.

1197
01:08:04,400 --> 01:08:11,000
We're now in part three of the tutorial.

1198
01:08:11,000 --> 01:08:19,440
So as we said before, when we perform a search, what we want to do is we want to look for

1199
01:08:19,440 --> 01:08:20,720
certain things on the page.

1200
01:08:20,720 --> 01:08:22,800
We want to get the search bar text.

1201
01:08:22,800 --> 01:08:24,160
We want to get the title text.

1202
01:08:24,160 --> 01:08:31,880
And we want to get the, pardon me, scrape the links and get the text there.

1203
01:08:31,880 --> 01:08:39,240
So really we have three main kinds of assertions that we want.

1204
01:08:39,240 --> 01:08:43,320
First one we'll do is the search result query being the phrase.

1205
01:08:43,320 --> 01:08:51,000
So that was making sure this bar up here has whatever we typed in on the other page.

1206
01:08:51,000 --> 01:08:56,920
How we're going to do that is, well, I want to do something like I want to say, okay,

1207
01:08:56,920 --> 01:08:59,160
I know I need to get that element off the page.

1208
01:08:59,200 --> 01:09:03,640
So I'm going to need to use what to do to get elements on the page?

1209
01:09:03,640 --> 01:09:04,640
Locator.

1210
01:09:04,640 --> 01:09:05,640
Right.

1211
01:09:05,640 --> 01:09:08,920
So page locator.

1212
01:09:08,920 --> 01:09:11,620
And again, I'll just, I'll give you the ID.

1213
01:09:11,620 --> 01:09:13,520
You can scrape it from the page if you want.

1214
01:09:13,520 --> 01:09:14,520
Oops.

1215
01:09:14,520 --> 01:09:17,520
I don't want to use this.

1216
01:09:17,520 --> 01:09:23,440
ID equals, get out of the way, search form input.

1217
01:09:23,440 --> 01:09:26,440
And what do I want to do once I get this?

1218
01:09:26,720 --> 01:09:28,720
What am I trying to obtain from it?

1219
01:09:28,720 --> 01:09:32,240
I'm trying to obtain its value.

1220
01:09:32,240 --> 01:09:33,240
Let's see.

1221
01:09:33,240 --> 01:09:34,720
It's input value.

1222
01:09:34,720 --> 01:09:36,720
Okay, okay.

1223
01:09:36,720 --> 01:09:41,080
And then what do I want to do?

1224
01:09:41,080 --> 01:09:42,880
I got the element I want.

1225
01:09:42,880 --> 01:09:46,680
I got the value I want.

1226
01:09:46,680 --> 01:09:47,680
I want to do what?

1227
01:09:47,680 --> 01:09:48,680
Sorry.

1228
01:09:48,680 --> 01:09:52,840
Compare it to, okay.

1229
01:09:52,840 --> 01:09:58,880
Equal equal panda because we can use the equal equal operator for strings in Python.

1230
01:09:58,880 --> 01:10:04,840
And I probably want to make this an assertion.

1231
01:10:04,840 --> 01:10:13,920
We know in PyTest that we use the basic Python assert command, right?

1232
01:10:13,920 --> 01:10:18,200
Unlike unit test, you have to use the unit test assertion library.

1233
01:10:18,200 --> 01:10:22,200
PyTest has assert statement introspection, which is pretty awesome.

1234
01:10:22,200 --> 01:10:23,960
And so this would work.

1235
01:10:23,960 --> 01:10:27,080
This would get the job done.

1236
01:10:27,080 --> 01:10:29,960
This is not the right way to do this in Playwright.

1237
01:10:29,960 --> 01:10:30,960
What?

1238
01:10:30,960 --> 01:10:31,960
What?

1239
01:10:31,960 --> 01:10:32,960
Psh.

1240
01:10:32,960 --> 01:10:39,800
For almost all PyTest test automation, this would be the right way to do it.

1241
01:10:39,800 --> 01:10:42,760
But there is a bit of an issue here.

1242
01:10:42,760 --> 01:10:50,480
And that is that if we were to do something like this, it doesn't fully handle waiting

1243
01:10:50,480 --> 01:10:52,960
appropriately.

1244
01:10:52,960 --> 01:10:57,480
We've up until this point taken waiting for granted.

1245
01:10:57,480 --> 01:10:58,760
Now what do I mean when I say waiting?

1246
01:10:58,760 --> 01:11:01,040
I've mentioned this before.

1247
01:11:01,040 --> 01:11:07,760
Ultimately, what we have when we're doing this style of black box test automation, not

1248
01:11:07,760 --> 01:11:13,380
unit testing that has direct access to code, but black box meaning it's trying to interact

1249
01:11:13,380 --> 01:11:16,160
with some live system under test.

1250
01:11:16,160 --> 01:11:21,320
Any type of black box test automation, whether it's REST APIs, Web UIs, mobile, command line,

1251
01:11:21,320 --> 01:11:25,920
what have you, you always have a risk of race conditions.

1252
01:11:25,920 --> 01:11:27,560
Why?

1253
01:11:27,560 --> 01:11:34,560
Because the app under test is doing its own thing by itself, and the automation process

1254
01:11:34,560 --> 01:11:37,560
is doing its own thing by itself.

1255
01:11:37,560 --> 01:11:43,080
And so any time you want to interact with the application under test from the automation,

1256
01:11:43,080 --> 01:11:47,480
you need to make sure the app under test is ready to handle that.

1257
01:11:47,480 --> 01:11:52,840
The classic race condition that happens with Web UI testing is I try to click a button,

1258
01:11:52,840 --> 01:11:54,560
but the page hasn't loaded the button yet.

1259
01:11:54,560 --> 01:11:56,960
And so it tries and it's not there.

1260
01:11:56,960 --> 01:11:57,960
Right?

1261
01:11:57,960 --> 01:12:01,920
Could also any other, like you're trying to scrape text or whatnot.

1262
01:12:01,920 --> 01:12:05,160
If you've done Selenium WebDriver, I guarantee you've hit that issue before.

1263
01:12:05,160 --> 01:12:07,280
And it's very painful.

1264
01:12:07,280 --> 01:12:09,800
And you're like, ah.

1265
01:12:09,800 --> 01:12:13,080
And the thing that makes it really painful is sometimes it works because the page loads

1266
01:12:13,080 --> 01:12:16,000
fast enough, but sometimes it doesn't.

1267
01:12:16,000 --> 01:12:23,800
And so what we want, what we have to do that's really annoying is that for every single interaction,

1268
01:12:23,800 --> 01:12:27,300
we need to make sure that it waits for the thing before we do it.

1269
01:12:27,300 --> 01:12:31,640
If you're using Selenium WebDriver, those must be explicit waits, meaning you have to

1270
01:12:31,640 --> 01:12:36,920
add a whole nother line of code to wait before you interact or take chances.

1271
01:12:37,160 --> 01:12:42,840
You set a universal implicit wait and that is also an anti-pattern.

1272
01:12:42,840 --> 01:12:46,120
But here in Playwright, we didn't do that.

1273
01:12:46,120 --> 01:12:47,600
Because Playwright is smart.

1274
01:12:47,600 --> 01:12:49,880
Playwright is modern.

1275
01:12:49,880 --> 01:12:56,080
Any time you have a locator in Playwright and then you do something to it, there's an

1276
01:12:56,080 --> 01:12:59,160
implicit automatic wait done for you.

1277
01:12:59,160 --> 01:13:05,480
So even though we're saying, let's say here, page locator fill with text, what's going

1278
01:13:05,520 --> 01:13:09,600
on underneath the hood is Playwright is saying, okay, I have a locator, which is not an element,

1279
01:13:09,600 --> 01:13:11,760
it's a pointer.

1280
01:13:11,760 --> 01:13:17,200
Playwright by default will wait for up to five seconds for this to appear and become

1281
01:13:17,200 --> 01:13:19,600
interactable.

1282
01:13:19,600 --> 01:13:23,720
If within the first, let's say, three seconds this isn't loaded, it's okay.

1283
01:13:23,720 --> 01:13:25,860
It does a smart wait and continuously check.

1284
01:13:25,860 --> 01:13:29,760
As soon as that bad boy is ready, that's when it sends the fill.

1285
01:13:29,760 --> 01:13:31,740
That's an automatic wait and that's a smart wait.

1286
01:13:31,740 --> 01:13:36,300
And that's something that is done for you.

1287
01:13:36,300 --> 01:13:40,660
Because expressively, what we want to say is fill it.

1288
01:13:40,660 --> 01:13:43,660
We don't want to have to explicitly say wait and then fill.

1289
01:13:43,660 --> 01:13:44,660
Yes.

1290
01:13:44,660 --> 01:13:45,660
Exactly.

1291
01:13:45,660 --> 01:13:55,940
So you can change it for that one interaction like this.

1292
01:13:55,940 --> 01:14:04,100
You can use the timeout equals and it's milliseconds, so I could say I want to change that to 10

1293
01:14:04,100 --> 01:14:05,100
seconds.

1294
01:14:05,100 --> 01:14:07,500
And that would affect only this call.

1295
01:14:07,500 --> 01:14:11,980
Or you can set a global setting to say I want to change it from five to eight everywhere

1296
01:14:11,980 --> 01:14:14,500
by default.

1297
01:14:14,500 --> 01:14:17,620
Pretty sweet.

1298
01:14:17,620 --> 01:14:19,500
Great question.

1299
01:14:19,500 --> 01:14:24,860
So now, coming back down to our assertion.

1300
01:14:24,860 --> 01:14:31,820
So there is actually some automatic waiting done here, right?

1301
01:14:31,820 --> 01:14:36,420
Because we have locator and then it's saying get me the input value.

1302
01:14:36,420 --> 01:14:44,460
So the waiting that is done here is this call that I've highlighted will wait for the input

1303
01:14:44,460 --> 01:14:47,380
element for this locator to appear on the page.

1304
01:14:47,380 --> 01:14:51,020
And then as soon as it appears on the page, it will get its input value.

1305
01:14:51,020 --> 01:14:54,460
You might think, okay, well, that's good enough automatic waiting, right?

1306
01:14:54,460 --> 01:14:55,460
No.

1307
01:14:55,460 --> 01:15:01,620
Because there might not only do you need to wait for this element to appear on the page,

1308
01:15:01,620 --> 01:15:06,940
but you need to wait for this element's input value to become populated with your desired

1309
01:15:06,940 --> 01:15:08,480
thing.

1310
01:15:08,480 --> 01:15:13,260
Because it may be the case that when it first loads, it's empty and then it fills the text.

1311
01:15:13,260 --> 01:15:14,260
Right?

1312
01:15:14,260 --> 01:15:16,140
Oh, it's another race condition.

1313
01:15:16,140 --> 01:15:17,700
Gosh, dang it.

1314
01:15:17,700 --> 01:15:19,940
Chances are small, but I guarantee you run enough tests.

1315
01:15:19,940 --> 01:15:21,900
Eventually statistically, you will hit it.

1316
01:15:21,900 --> 01:15:22,900
Right?

1317
01:15:22,900 --> 01:15:23,900
Think about this.

1318
01:15:23,900 --> 01:15:28,500
If your tests are, if you have some race condition in your code and you're not handling it properly

1319
01:15:28,500 --> 01:15:32,780
and it causes flaky tests, let's say it's only like a 0.1% chance that the time is going

1320
01:15:32,780 --> 01:15:33,780
to happen.

1321
01:15:33,780 --> 01:15:36,540
You have a thousand tests run, you're going to hit it once.

1322
01:15:36,540 --> 01:15:37,540
Okay?

1323
01:15:37,540 --> 01:15:42,340
A thousand tests is a really low number of tests to run for a lot of teams.

1324
01:15:43,340 --> 01:15:47,660
We would run a thousand tests within about like the first two hours of a business day

1325
01:15:47,660 --> 01:15:51,500
because we'd have tests continuously running.

1326
01:15:51,500 --> 01:15:55,220
And that is only a 0.1% chance of a failure.

1327
01:15:55,220 --> 01:15:56,260
Right?

1328
01:15:56,260 --> 01:16:00,500
Usually flaky tests fail more in the range of 1% to 10% of the time.

1329
01:16:00,500 --> 01:16:03,100
Oh my gosh, it's horrible.

1330
01:16:03,100 --> 01:16:07,900
And usually the number one reason for flaky tests is not because any particular tool is

1331
01:16:07,900 --> 01:16:08,900
lousy.

1332
01:16:08,900 --> 01:16:13,660
It's because people aren't thinking about how to properly wait for things.

1333
01:16:13,660 --> 01:16:20,220
And in my opinion, a tool like Selenium WebDriver does not encourage good practice around that.

1334
01:16:20,220 --> 01:16:23,340
It leaves it up to you to do it so you have to know to do it.

1335
01:16:23,340 --> 01:16:27,220
Whereas Playwright, 90% of the time will handle it for you.

1336
01:16:27,220 --> 01:16:30,740
There's only a little bit of time you may have to do explicit waiting or you may have

1337
01:16:30,740 --> 01:16:32,820
to change something to get it to be what you want.

1338
01:16:32,820 --> 01:16:37,860
And we'll see one of those for this condition here.

1339
01:16:37,860 --> 01:16:42,980
So how then do we handle that extra little race condition that I just mentioned?

1340
01:16:42,980 --> 01:16:43,980
You have a question?

1341
01:16:43,980 --> 01:16:44,980
Okay, pause.

1342
01:16:44,980 --> 01:16:45,980
Question.

1343
01:16:45,980 --> 01:16:46,980
No, it's okay.

1344
01:16:46,980 --> 01:16:47,980
Ah, okay.

1345
01:16:47,980 --> 01:17:02,980
So the question was why do browser automations have to be so slow?

1346
01:17:03,980 --> 01:17:10,620
So, the question was why do browser automation tools struggle with waiting?

1347
01:17:10,620 --> 01:17:12,620
And specifically Selenium and Playwright.

1348
01:17:12,620 --> 01:17:18,260
First I want to say Playwright, like I said, does it provide you the mechanisms and the

1349
01:17:18,260 --> 01:17:22,380
implicit waiting a lot of time that it works flawlessly.

1350
01:17:22,380 --> 01:17:25,900
So I would say Playwright, auto-waiting is not so much an issue.

1351
01:17:25,900 --> 01:17:28,700
So I'm going to redirect to why Selenium.

1352
01:17:28,700 --> 01:17:32,460
Something to keep in mind with the Selenium project that makes it categorically different

1353
01:17:32,460 --> 01:17:37,860
from something like Playwright or Cypress is Selenium WebDriver is meant to be a low

1354
01:17:37,860 --> 01:17:39,020
level tool.

1355
01:17:39,020 --> 01:17:44,220
It is meant to be kind of like the most basic API around the WebDriver protocol for you

1356
01:17:44,220 --> 01:17:46,200
to drive browser traffic.

1357
01:17:46,200 --> 01:17:52,180
And so in that sense, if we're talking in granularity, yes, you're going to have to

1358
01:17:52,180 --> 01:17:56,020
imperatively and explicitly do a lot of the types of things.

1359
01:17:56,020 --> 01:18:02,420
So with a low level tool, the onus is on you to do the waiting how you want it to be done.

1360
01:18:03,380 --> 01:18:07,380
That's why in Selenium you have to make explicit waits and then do your interactions.

1361
01:18:07,380 --> 01:18:14,860
The problem is most people coming to do test automation with Selenium don't recognize that.

1362
01:18:14,860 --> 01:18:20,220
They're told Selenium is the tool you're using and when they see selenium.click they think

1363
01:18:20,220 --> 01:18:23,820
that's sufficient.

1364
01:18:23,820 --> 01:18:26,860
It's necessary but not fully sufficient.

1365
01:18:26,860 --> 01:18:27,900
That's the problem.

1366
01:18:27,900 --> 01:18:31,900
There's a misunderstanding around how to use Selenium WebDriver as a tool.

1367
01:18:58,900 --> 01:19:07,420
So when it comes to the timeout there, I have had that situation where sometimes it's really

1368
01:19:07,420 --> 01:19:13,620
performant and another day you come in and it's like really hecking slow.

1369
01:19:13,620 --> 01:19:21,940
Setting a timeout is a necessary evil for any sort of black box testing because ultimately

1370
01:19:21,940 --> 01:19:24,820
you have to have a give up point.

1371
01:19:24,820 --> 01:19:28,820
So you can't avoid that.

1372
01:19:28,820 --> 01:19:38,020
What I like to do when I design projects or solutions or pick up a tool is make sure that

1373
01:19:38,020 --> 01:19:45,260
you can have a way to globally tweak a timeout such that if today, yeah we know somebody

1374
01:19:45,260 --> 01:19:47,740
blew up our staging environment.

1375
01:19:47,740 --> 01:19:52,340
Today I'm going to dial it up to 30 just to punch through for the functional testing and

1376
01:19:52,340 --> 01:20:00,500
then we'll monitor it and then once they fix it, dial it back down to five seconds.

1377
01:20:00,500 --> 01:20:04,540
Popping it in here as like a parameter would be like if you know this particular view or

1378
01:20:04,540 --> 01:20:08,900
this particular page is going to be longer because we just know that particular one and

1379
01:20:08,900 --> 01:20:12,100
all the web app loads the gigabytes of data.

1380
01:20:12,100 --> 01:20:14,100
That's when you would do this technique.

1381
01:20:14,100 --> 01:20:16,100
Does that make sense?

1382
01:20:22,580 --> 01:20:24,580
Correct.

1383
01:20:24,580 --> 01:20:26,580
Correct.

1384
01:20:26,580 --> 01:20:30,860
Oh, I saw questions back there but let me explain this point real quick.

1385
01:20:30,860 --> 01:20:33,860
Let's dispel that.

1386
01:20:33,860 --> 01:20:38,140
Hard sleeps in test automation are a horrific anti-pattern.

1387
01:20:38,140 --> 01:20:41,700
That's another nugget I want you to tattoo to your arm and take home with you today.

1388
01:20:41,700 --> 01:20:43,340
Never use hard sleeps.

1389
01:20:43,340 --> 01:20:46,380
Never do a time dot sleep and put seconds in there.

1390
01:20:46,380 --> 01:20:49,460
We have slow-mo to help slow it down if we need to.

1391
01:20:49,460 --> 01:20:51,580
If you want to wait for something, use these smart waits.

1392
01:20:51,620 --> 01:20:56,620
The way these implicit waits and smart waits work is the time out by default is five seconds.

1393
01:20:56,620 --> 01:20:59,820
That doesn't mean it waits five seconds for every single interaction.

1394
01:20:59,820 --> 01:21:01,860
It means it waits up to five seconds.

1395
01:21:01,860 --> 01:21:07,740
It's up to five seconds of as soon as the thing enters the ready state, it stops waiting

1396
01:21:07,740 --> 01:21:08,940
and moves on.

1397
01:21:08,940 --> 01:21:14,100
It goes, it checks repeatedly for up to five seconds before giving up and saying I'm done

1398
01:21:14,100 --> 01:21:15,820
and yielding an error.

1399
01:21:15,820 --> 01:21:17,980
So we always want smart waits.

1400
01:21:18,020 --> 01:21:22,980
We want auto waits, which is what Playwright provides.

1401
01:21:22,980 --> 01:21:24,900
So I saw two more hands go up.

1402
01:21:24,900 --> 01:21:27,900
I think the gentleman in the back and then the gentleman in row two.

1403
01:21:35,060 --> 01:21:36,420
Okay, you're good.

1404
01:21:36,420 --> 01:21:37,660
So next question.

1405
01:21:46,900 --> 01:21:47,620
Yes, yes, yes.

1406
01:21:47,620 --> 01:21:50,940
So the question was if you've got a slow loading page with some sort of like spinner

1407
01:21:50,940 --> 01:21:53,900
or something, can you make Playwright wait for that to go away?

1408
01:21:55,900 --> 01:21:56,900
Pardon me.

1409
01:21:56,900 --> 01:21:58,300
The answer is yes.

1410
01:21:59,660 --> 01:22:01,540
There are various ways you can do it.

1411
01:22:01,540 --> 01:22:03,980
You can check for certain events on a page.

1412
01:22:03,980 --> 01:22:10,500
If the spinner's a particular element on the page, you can say wait.

1413
01:22:10,500 --> 01:22:12,820
There's an explicit type of wait we can do in Playwright.

1414
01:22:12,820 --> 01:22:13,820
We'll see in a little bit.

1415
01:22:13,820 --> 01:22:15,620
We could tailor for something like that.

1416
01:22:15,620 --> 01:22:21,540
So going back to something I kind of mentioned out of the side a little bit earlier, probably

1417
01:22:21,540 --> 01:22:26,980
about 80 to 90% of the waiting you need to do will automatically be handled for you by

1418
01:22:26,980 --> 01:22:29,020
Playwright if you're doing the right things.

1419
01:22:29,020 --> 01:22:32,620
Only about 10% of the time will you need to make an explicit wait.

1420
01:22:32,620 --> 01:22:36,060
But when you need to make an explicit wait like what you're talking about, there are

1421
01:22:36,060 --> 01:22:38,820
ways that do that that make it easy.

1422
01:22:38,820 --> 01:22:41,700
Good question.

1423
01:22:41,700 --> 01:22:42,700
Any other questions?

1424
01:22:42,700 --> 01:22:43,700
This is good.

1425
01:22:45,620 --> 01:22:46,620
Okay.

1426
01:22:46,620 --> 01:22:47,620
Okay.

1427
01:22:47,620 --> 01:22:52,020
So let's come back to this assertion here.

1428
01:22:52,020 --> 01:22:57,380
So we said we wrote it the way we would typically think to write an assertion in PyTest.

1429
01:22:57,380 --> 01:23:00,700
Then we realized, oh wait, there's actually two race conditions and they're buried and

1430
01:23:00,700 --> 01:23:03,780
this handles one but not the other.

1431
01:23:03,780 --> 01:23:08,700
So now we're asking, well, how do we do it right for Playwright?

1432
01:23:08,700 --> 01:23:14,260
And what we need to do for Playwright is we need to import a special function.

1433
01:23:15,220 --> 01:23:17,540
So let's go back to the top here.

1434
01:23:17,540 --> 01:23:22,860
From Playwright sync API, not only do we want to import page, we want to import a function

1435
01:23:22,860 --> 01:23:25,780
called expect.

1436
01:23:25,780 --> 01:23:28,260
What's this going to do for us?

1437
01:23:28,260 --> 01:23:32,780
So down here, I'm going to rewrite my assertion.

1438
01:23:32,780 --> 01:23:37,420
Instead of this, I'm going to say expect parenthesis.

1439
01:23:37,420 --> 01:23:40,700
And inside those parenthesis, I'm going to put my locator object.

1440
01:23:40,700 --> 01:23:44,140
I'm going to get rid of all this stuff here.

1441
01:23:44,140 --> 01:23:52,700
So expect parenthesis, target object being my locator, close that parenthesis, dot.

1442
01:23:52,700 --> 01:23:59,340
And after the dot, I'm going to put the name of a condition to be met.

1443
01:23:59,340 --> 01:24:03,220
Now as you can see with autocomplete, we have lots of conditions.

1444
01:24:03,220 --> 01:24:06,580
Not to be checked, not to be disabled, not to be editable, and of course, it's going

1445
01:24:06,580 --> 01:24:08,920
to be the 2B versions of all these.

1446
01:24:08,920 --> 01:24:11,620
So on and so forth.

1447
01:24:11,620 --> 01:24:22,300
The condition I want is I want it to have the value of my search phrase panda.

1448
01:24:22,300 --> 01:24:25,940
This is what we call a web first assertion.

1449
01:24:25,940 --> 01:24:30,420
This is one thing that makes Playwright pretty cool.

1450
01:24:30,420 --> 01:24:36,820
This assertion will not only wait for this element to appear on the page, but it will

1451
01:24:37,820 --> 01:24:41,660
include a wait for it to have this particular value.

1452
01:24:41,660 --> 01:24:46,600
So it's waiting until the final state is reached that we want.

1453
01:24:46,600 --> 01:24:49,220
This is the safest way to do this.

1454
01:24:49,220 --> 01:24:54,020
You could get away with that old assert version that we used, but it is not fully correct

1455
01:24:54,020 --> 01:24:58,700
because it still has that tiny little chance something could go bad.

1456
01:24:58,700 --> 01:24:59,700
Question?

1457
01:24:59,700 --> 01:25:07,700
Yes, if you don't provide a timeout, is the timeout infinite?

1458
01:25:07,700 --> 01:25:09,260
I hope not.

1459
01:25:09,260 --> 01:25:11,660
Default timeout is five seconds.

1460
01:25:11,660 --> 01:25:16,780
But you also bring up a good point of well-designed test automation solutions absolutely need

1461
01:25:16,780 --> 01:25:18,540
a timeout somewhere.

1462
01:25:18,540 --> 01:25:22,260
Infinite timeout means it spends forever, means your CI job never ends.

1463
01:25:22,260 --> 01:25:24,980
That's bad.

1464
01:25:24,980 --> 01:25:27,300
Timeouts are safety.

1465
01:25:27,300 --> 01:25:30,420
Good question though.

1466
01:25:30,420 --> 01:25:33,940
All righty.

1467
01:25:33,940 --> 01:25:34,940
Any other questions?

1468
01:25:34,940 --> 01:25:35,940
This is good.

1469
01:25:35,940 --> 01:25:36,940
I like this.

1470
01:25:36,940 --> 01:25:37,940
We're all engaged.

1471
01:25:37,940 --> 01:25:38,940
Okay.

1472
01:25:38,940 --> 01:25:43,340
So let's run this again.

1473
01:25:43,340 --> 01:25:44,340
Make sure it works.

1474
01:25:44,340 --> 01:25:45,340
Oops.

1475
01:25:45,340 --> 01:25:46,340
Never go.

1476
01:25:46,340 --> 01:25:47,340
Same old song and dance.

1477
01:25:47,340 --> 01:25:48,340
Boom, boom.

1478
01:25:48,340 --> 01:25:49,340
Boom, boom.

1479
01:25:49,340 --> 01:25:50,340
And we're passing still.

1480
01:25:50,340 --> 01:25:51,340
Good.

1481
01:25:51,340 --> 01:25:52,340
Good, good, good.

1482
01:25:52,340 --> 01:25:53,340
Everybody's doing great.

1483
01:25:53,380 --> 01:25:54,380
Nice.

1484
01:25:54,380 --> 01:25:57,380
All righty.

1485
01:25:57,380 --> 01:26:11,540
Let's move on to the next assertion.

1486
01:26:11,540 --> 01:26:15,580
Checking if the search result links pertain to the phrase.

1487
01:26:15,580 --> 01:26:19,780
So this is the one where we said let's get all the result links and try to do stuff to

1488
01:26:19,780 --> 01:26:20,780
it.

1489
01:26:21,340 --> 01:26:27,620
Unfortunately, this one is going to be a bit more challenging because we're dealing not

1490
01:26:27,620 --> 01:26:34,100
just with a single element, but we're dealing with a list of elements.

1491
01:26:34,100 --> 01:26:36,140
Right?

1492
01:26:36,140 --> 01:26:38,300
Can Playwright handle this?

1493
01:26:38,300 --> 01:26:39,300
Yes it can.

1494
01:26:39,300 --> 01:26:40,780
Otherwise we wouldn't be here doing this.

1495
01:26:40,780 --> 01:26:41,780
Right?

1496
01:26:41,780 --> 01:26:42,780
Oh, yeah.

1497
01:26:42,780 --> 01:26:43,780
Can it do it?

1498
01:26:43,780 --> 01:26:44,780
No it can.

1499
01:26:44,780 --> 01:26:45,780
We've got to move on now.

1500
01:26:45,780 --> 01:26:46,780
No, no, it can do it.

1501
01:26:47,180 --> 01:26:51,860
Ultimately what we want to do for this.

1502
01:26:51,860 --> 01:26:55,740
Pardon me.

1503
01:26:55,740 --> 01:27:01,740
We want to scrape all of the hyperlink titles off of this page.

1504
01:27:01,740 --> 01:27:05,060
There should be a list of about 10 of them or so.

1505
01:27:05,060 --> 01:27:06,500
Sometimes it might only give us like five.

1506
01:27:06,500 --> 01:27:10,620
You know, we'll want to scrape all those titles.

1507
01:27:10,620 --> 01:27:12,820
Or we want to scrape all those elements.

1508
01:27:12,860 --> 01:27:20,100
From the elements then, we want to map that list of elements found to their string titles.

1509
01:27:20,100 --> 01:27:23,980
So we get a list of strings that represent all the titles.

1510
01:27:23,980 --> 01:27:27,900
And then what we want to do is we want to go over that list and make sure that the strings

1511
01:27:27,900 --> 01:27:33,300
in that list somehow contain the substring panda.

1512
01:27:33,300 --> 01:27:34,300
Right?

1513
01:27:34,300 --> 01:27:41,700
As we can say, well, if every title has panda in it, then we know that we got it right.

1514
01:27:41,700 --> 01:27:50,940
I would recommend even further not that every link contains the word panda, but that in

1515
01:27:50,940 --> 01:27:54,220
the worst case, at least one of them relates to panda.

1516
01:27:54,220 --> 01:28:02,380
It's a very weak assertion, but in this case, this is really nothing more than like a smoke

1517
01:28:02,380 --> 01:28:06,500
test where we're dealing with uncontrolled data.

1518
01:28:06,500 --> 01:28:14,300
So the caveat is if you have a weak high level test, make weak high level assertions.

1519
01:28:14,300 --> 01:28:17,860
We're going to parameterize in a little bit and some of the other phrases we have don't

1520
01:28:17,860 --> 01:28:21,100
always bind up nicely because these are live results.

1521
01:28:21,100 --> 01:28:24,500
I don't have this like some mocked thing behind here.

1522
01:28:24,500 --> 01:28:27,220
So when you're dealing with that, weak assertions.

1523
01:28:27,220 --> 01:28:30,500
So what we'll do is we'll just make sure that at least one of the strings in our list of

1524
01:28:30,500 --> 01:28:32,100
titles contains our search phrase.

1525
01:28:32,100 --> 01:28:34,540
And if it does, we're going to call it good and move on.

1526
01:28:34,540 --> 01:28:35,540
Sound reasonable?

1527
01:28:35,940 --> 01:28:38,420
I know it's not ideal, but this is the thing we have.

1528
01:28:38,420 --> 01:28:42,060
This is also a case for why you should control your test data.

1529
01:28:42,060 --> 01:28:48,380
If you can control your test data, you can have stronger assertions.

1530
01:28:48,380 --> 01:28:49,980
So let's start to bang this out here.

1531
01:28:49,980 --> 01:28:56,580
We're going to have to bust out our elite Python programming skills.

1532
01:28:58,580 --> 01:28:59,580
All right.

1533
01:29:01,460 --> 01:29:03,380
So oh shoot, let me go back to here.

1534
01:29:03,380 --> 01:29:06,780
So we will inspect.

1535
01:29:06,780 --> 01:29:12,940
This selector is going to be a bit longer, but I'm going to give it to you here.

1536
01:29:12,940 --> 01:29:15,580
Dot result.

1537
01:29:15,580 --> 01:29:16,580
That's tiny.

1538
01:29:16,580 --> 01:29:19,980
It'll appear bigger on the Visual Studio Code.

1539
01:29:19,980 --> 01:29:21,620
Just bear with me a moment.

1540
01:29:21,620 --> 01:29:24,060
But I want to show you something here.

1541
01:29:24,060 --> 01:29:27,060
So result underscore underscore title.

1542
01:29:27,060 --> 01:29:33,060
Dot result.

1543
01:29:41,060 --> 01:29:42,060
Really?

1544
01:29:43,060 --> 01:29:44,060
Hold on.

1545
01:29:47,060 --> 01:29:48,060
Refresh this page.

1546
01:29:48,060 --> 01:29:49,060
Something's not right.

1547
01:29:51,060 --> 01:29:52,060
There we go.

1548
01:29:52,060 --> 01:29:53,060
Try that again.

1549
01:29:53,060 --> 01:29:54,060
Okay, there we go.

1550
01:29:54,060 --> 01:29:59,340
So what I like to do, especially when I'm dealing with lists of elements, I like to

1551
01:29:59,340 --> 01:30:06,100
make sure that whatever selector I'm using is getting the elements I intend.

1552
01:30:06,100 --> 01:30:13,460
So here there's a, each of these result links has, the header has the result title class,

1553
01:30:13,460 --> 01:30:18,080
and then underneath of that there's a hyperlink with the result A class.

1554
01:30:18,080 --> 01:30:20,140
And I can see there are 10 on this page.

1555
01:30:20,140 --> 01:30:22,060
So I know I'm getting a list of things.

1556
01:30:24,900 --> 01:30:31,060
So if I want to get that list of elements, what do we think I'm going to be typing in?

1557
01:30:31,060 --> 01:30:33,060
Page dot what?

1558
01:30:33,060 --> 01:30:35,060
Locator, yeah.

1559
01:30:35,060 --> 01:30:40,060
In this case, I'm just going to, since this is a CSS selector, we can just pop that in.

1560
01:30:40,060 --> 01:30:45,060
Don't need to say id equal or text equal or CSS equal.

1561
01:30:45,060 --> 01:30:50,060
We can just, it'll figure out it's a CSS selector.

1562
01:30:51,060 --> 01:31:00,060
So the first thing I want to do is I want to make sure that these links all appear on the page.

1563
01:31:02,060 --> 01:31:09,060
When you're dealing with one target element and you're sending commands to it, you can

1564
01:31:09,060 --> 01:31:15,060
rely on Playwright's implicit automatic waiting because that one is either there or not.

1565
01:31:15,060 --> 01:31:21,060
But when you're waiting for a list of items to appear on the page, what could happen?

1566
01:31:21,060 --> 01:31:29,060
The page could load the first one, wait, load the second one, wait, load the third one, wait, because it's slow.

1567
01:31:29,060 --> 01:31:31,060
How do you know when it's done?

1568
01:31:31,060 --> 01:31:34,060
You don't. It's the halting problem.

1569
01:31:34,060 --> 01:31:37,060
It is a, I'm not joking here.

1570
01:31:37,060 --> 01:31:39,060
Look up halting problem. It's from Alan Turing.

1571
01:31:39,060 --> 01:31:44,060
This is a fundamentally unsolvable computer science problem.

1572
01:31:44,060 --> 01:31:46,060
You never know when it's done until it's done.

1573
01:31:46,060 --> 01:31:50,060
So in this case, we never know it's loaded until it's loaded.

1574
01:31:50,060 --> 01:31:57,060
So what we want to do is we want to say, hey, you know, I know it's going to give me multiple.

1575
01:31:57,060 --> 01:32:04,060
I want to wait until a certain number of these elements appears on the page so that I can have,

1576
01:32:04,060 --> 01:32:08,060
so I can make sure that I'm getting a list with something in it.

1577
01:32:08,060 --> 01:32:13,060
Because if you just say, give me the list at an instantaneous moment without forcing the explicit wait,

1578
01:32:13,060 --> 01:32:16,060
if the page hasn't loaded, you could get it a list of zero elements.

1579
01:32:16,060 --> 01:32:17,060
And that's no bueno.

1580
01:32:17,060 --> 01:32:21,060
We want to make sure it waits until a certain number has appeared.

1581
01:32:21,060 --> 01:32:29,060
So what we can do for that is on top of our locator,

1582
01:32:29,060 --> 01:32:34,060
because we know this is going to return a, this locator query will return a list of elements,

1583
01:32:34,060 --> 01:32:41,060
we can specify a particular, we can refer to elements in that list of,

1584
01:32:48,060 --> 01:32:51,060
we can refer to items in that list of elements by index.

1585
01:32:51,060 --> 01:32:53,060
That's what I'm trying to say.

1586
01:32:53,060 --> 01:33:01,060
So if we wanted to wait for, say, five elements to appear on the page, I could say dot nth four.

1587
01:33:01,060 --> 01:33:05,060
Four, I thought you said five.

1588
01:33:05,060 --> 01:33:07,060
Zero indexed.

1589
01:33:07,060 --> 01:33:09,060
Zero is one.

1590
01:33:09,060 --> 01:33:15,060
One is the second index, or second element, so four would be the fifth element in that list.

1591
01:33:15,060 --> 01:33:21,060
So what this is doing is say, hey, that locator is going to give me a list of elements, give me the fifth one.

1592
01:33:21,060 --> 01:33:25,060
And what do we want to do on that fifth one?

1593
01:33:25,060 --> 01:33:28,060
Wait for it, though.

1594
01:33:28,060 --> 01:33:31,060
Theme, done.

1595
01:33:31,060 --> 01:33:37,060
This line is an example of one of Playwright's explicit waits.

1596
01:33:37,060 --> 01:33:43,060
Typically, you will be using explicit waits not for when you're dealing with one element at a time,

1597
01:33:43,060 --> 01:33:47,060
but usually moreover when you're dealing with multiple elements at a time.

1598
01:33:47,060 --> 01:33:52,060
Not always the case, like that spinner example someone asked about before.

1599
01:33:52,060 --> 01:33:58,060
But, like I said, most of the time you can get away without having to be explicit about waits,

1600
01:33:58,060 --> 01:34:03,060
but if you need to, like in this case, you can.

1601
01:34:03,060 --> 01:34:11,060
So this, in plain English, will wait for the fifth element of that list of elements to appear.

1602
01:34:11,060 --> 01:34:13,060
Boom.

1603
01:34:15,060 --> 01:34:20,060
Now that we have those elements rendered on the page,

1604
01:34:20,060 --> 01:34:25,060
we know in terms of execution, after this there's going to be at least five elements, if not more.

1605
01:34:25,060 --> 01:34:30,060
So we can safely move forward to scrape those elements.

1606
01:34:30,060 --> 01:34:35,060
So what do I want to scrape from these elements?

1607
01:34:37,060 --> 01:34:40,060
The text, right? The titles. Very good.

1608
01:34:40,060 --> 01:34:49,060
So I'm going to say titles equal page.locator, and this is just a copy-paste.

1609
01:34:49,060 --> 01:34:52,060
Oh, copy-paste, that hurts. We'll get back to that later.

1610
01:34:52,060 --> 01:34:57,060
Just roll with it for now. I know it's not dry. We're going to fix it.

1611
01:35:00,060 --> 01:35:03,060
But now we have another challenge.

1612
01:35:03,060 --> 01:35:09,060
If this were a single element, we could say something like text content, right?

1613
01:35:09,060 --> 01:35:11,060
And we get the text content of that.

1614
01:35:11,060 --> 01:35:15,060
But this is going to return a list of elements, so we can't get the text content for just...

1615
01:35:15,060 --> 01:35:18,060
We can't use the text content method to get all elements,

1616
01:35:18,060 --> 01:35:23,060
or we're going to need to do a list comprehension here and map all the things.

1617
01:35:23,060 --> 01:35:30,060
Yeah, make a for loop. That's painful. No, no, no, no, no.

1618
01:35:30,060 --> 01:35:34,060
Playwright has a method for this.

1619
01:35:34,060 --> 01:35:38,060
Locator, all text contents.

1620
01:35:39,060 --> 01:35:47,060
Oh, so if you have a list of elements and you want to get the text for each one as a list, boom.

1621
01:35:48,060 --> 01:35:51,060
Amazing. I love it.

1622
01:35:51,060 --> 01:35:56,060
You all are probably like, man, Andy, you get so excited over silly, trivial things.

1623
01:35:56,060 --> 01:36:02,060
But believe me, when I have worked on large Selenium WebDriver projects,

1624
01:36:02,060 --> 01:36:04,060
that does not exist in Selenium WebDriver.

1625
01:36:04,060 --> 01:36:08,060
I have had to implement that in a reusable way, in a framework I've built.

1626
01:36:08,060 --> 01:36:14,060
So the fact that Playwright gives it to you for free is like, oh, it warms my heart and soul.

1627
01:36:14,060 --> 01:36:16,060
Like a bowl of Quaker oatmeal.

1628
01:36:16,060 --> 01:36:20,060
Well, for Brimley, rest in peace.

1629
01:36:20,060 --> 01:36:23,060
Some people got it, thank you.

1630
01:36:23,060 --> 01:36:27,060
You have the diabetes. Oh, my gosh.

1631
01:36:27,060 --> 01:36:31,060
Yeah, he passed away about a year or two ago. Broke my heart.

1632
01:36:31,060 --> 01:36:33,060
He was always a good guy.

1633
01:36:33,060 --> 01:36:37,060
So, anywho.

1634
01:36:37,060 --> 01:36:41,060
So now, okay, we have a list of strings that has our titles.

1635
01:36:41,060 --> 01:36:46,060
Next step is let's check that list of titles to see if it has our search phrase in it.

1636
01:36:46,060 --> 01:36:47,060
Right?

1637
01:36:47,060 --> 01:36:54,060
So what I would like to do is the next step in that is to filter down for all of the matching titles.

1638
01:36:54,060 --> 01:36:56,060
So we can do something like this.

1639
01:36:56,060 --> 01:37:03,060
Matches, equals, and I'm going to do a list comprehension.

1640
01:37:03,060 --> 01:37:10,060
Most people, I'm guessing a lot of you probably have used list comprehensions, but maybe not some.

1641
01:37:10,060 --> 01:37:16,060
Real quick, brief thing, list comprehensions are an intermediate to advanced kind of Python technique.

1642
01:37:16,060 --> 01:37:19,060
But basically what you're doing is it's list-based operations.

1643
01:37:19,060 --> 01:37:28,060
So you can either take all the stuff in a list and for each element somehow transform it into something else or map it to something else.

1644
01:37:28,060 --> 01:37:36,060
Or if you have a list of elements and you're trying to filter it down based on some criteria, like does it have a substring, you can filter.

1645
01:37:36,060 --> 01:37:40,060
We are going to be doing a filtering list comprehension here.

1646
01:37:40,060 --> 01:37:43,060
The syntax is going to look like this.

1647
01:37:43,060 --> 01:37:47,060
So T for T in titles.

1648
01:37:47,060 --> 01:38:02,060
What this is going to do is say, hey, pick some arbitrary, iterate over the list of titles and each iteration you're going to store that value in a variable called T for T in titles.

1649
01:38:02,060 --> 01:38:04,060
And the filter is if.

1650
01:38:04,060 --> 01:38:06,060
And now we're going to put a condition.

1651
01:38:06,060 --> 01:38:20,060
If my search phrase panda is in, meaning a substring, of that title, and we're going to be safe about it, I'm going to make that title go to lowercase.

1652
01:38:20,060 --> 01:38:27,060
That way if it's capital P panda, it'll lowercase it and then we can check it against our search phrase.

1653
01:38:27,060 --> 01:38:35,060
And so ultimately what this will do, matches will contain all of the elements and titles that contained the phrase panda.

1654
01:38:35,060 --> 01:38:38,060
Make sense? Cool. Cool. Yeah.

1655
01:38:38,060 --> 01:38:40,060
List comprehensions are awesome.

1656
01:38:40,060 --> 01:38:44,060
If you do C sharp programming, it's very similar to link.

1657
01:38:44,060 --> 01:38:46,060
Question.

1658
01:38:46,060 --> 01:38:50,060
Can I put a break point in?

1659
01:38:50,060 --> 01:39:00,060
Oh, so.

1660
01:39:00,060 --> 01:39:04,060
So I want to nuance this.

1661
01:39:04,060 --> 01:39:06,060
Just in general in a test case.

1662
01:39:06,060 --> 01:39:10,060
Yeah, yeah, yeah. Okay. So yes. Question, just to repeat for the thing you're doing.

1663
01:39:10,060 --> 01:39:14,060
Can you put break points in your test cases? The answer is yes.

1664
01:39:14,060 --> 01:39:18,060
I've done it before with Visual Studio Code.

1665
01:39:18,060 --> 01:39:21,060
I think there's like a special way you have to do it to set it up there.

1666
01:39:21,060 --> 01:39:23,060
I know PyCharm, it's very easy.

1667
01:39:23,060 --> 01:39:27,060
But it should like it's very helpful when I've done debugging.

1668
01:39:27,060 --> 01:39:31,060
It's like you set a break point and then you just kind of run to that point.

1669
01:39:31,060 --> 01:39:33,060
It does the thing and then it kind of freezes your browser open.

1670
01:39:33,060 --> 01:39:41,060
If you've got it like indefinitely hanging or something and not moving forward, I don't know.

1671
01:39:41,060 --> 01:39:44,060
Maybe maybe there's some weird playwright edge case that went wonky.

1672
01:39:44,060 --> 01:39:49,060
Maybe there was some issue in your your editor or setup or something.

1673
01:39:49,060 --> 01:39:52,060
But the universe, the general answer is yes.

1674
01:39:52,060 --> 01:40:00,060
Break point should work with this. If it doesn't, I don't know. Sorry.

1675
01:40:00,060 --> 01:40:03,060
Also, I should use that to bring up another point.

1676
01:40:03,060 --> 01:40:11,060
If you ever get stuck with playwright, you can go to the playwright slack room and ask for help.

1677
01:40:11,060 --> 01:40:15,060
And the Microsoft team is very quick to respond.

1678
01:40:15,060 --> 01:40:22,060
Most likely you will get quicker and better help if you ask them than if you ask me.

1679
01:40:22,060 --> 01:40:24,060
Unless like we're one on one.

1680
01:40:24,060 --> 01:40:30,060
So I strongly recommend join playwright slack if you're picking this up to do projects with it.

1681
01:40:30,060 --> 01:40:32,060
Their docs are really good. Go to the docs first.

1682
01:40:32,060 --> 01:40:34,060
If you can't find it there, go to the slack.

1683
01:40:34,060 --> 01:40:36,060
Hey, I can't I need help with this.

1684
01:40:36,060 --> 01:40:40,060
And so I'm going to go, oh, thank you. That worked.

1685
01:40:40,060 --> 01:40:43,060
So and they're active like you do get help.

1686
01:40:43,060 --> 01:40:48,060
It's not like screaming out into the void.

1687
01:40:48,060 --> 01:40:54,060
Okay. So we have our list comprehension done.

1688
01:40:54,060 --> 01:41:02,060
We have the matches list now having all of the strings that contain our search phrase.

1689
01:41:02,060 --> 01:41:06,060
And so finally we can make our assertion.

1690
01:41:06,060 --> 01:41:11,060
And the assertion we want to do is we want to make sure at least one of those had a match.

1691
01:41:11,060 --> 01:41:19,060
Meaning assert length of matches is greater than zero.

1692
01:41:19,060 --> 01:41:24,060
Does that make sense? Yeah.

1693
01:41:24,060 --> 01:41:29,060
Anybody going, well, Andy, Andy, don't we need that fancy expect function in here?

1694
01:41:29,060 --> 01:41:31,060
In this case, no.

1695
01:41:31,060 --> 01:41:39,060
This case we got what we needed from playwright, you know, and this was all race condition safe, thread safe, all that.

1696
01:41:39,060 --> 01:41:42,060
So we got data in a safe way.

1697
01:41:42,060 --> 01:41:51,060
And really all this was was doing was doing some manipulation on that data to get it into a state where we could do some meaningful checking.

1698
01:41:51,060 --> 01:41:53,060
And so this check is really just a plain old check.

1699
01:41:53,060 --> 01:42:01,060
And so we can safely use an assert here and we're good to go.

1700
01:42:01,060 --> 01:42:02,060
All right.

1701
01:42:02,060 --> 01:42:03,060
All right.

1702
01:42:03,060 --> 01:42:10,060
So as always, let's run this test case and make sure it works.

1703
01:42:10,060 --> 01:42:16,060
Please work.

1704
01:42:16,060 --> 01:42:19,060
Oh, still green.

1705
01:42:19,060 --> 01:42:20,060
All right.

1706
01:42:20,060 --> 01:42:22,060
Everyone else got a green test case?

1707
01:42:22,060 --> 01:42:31,060
All right.

1708
01:42:31,060 --> 01:42:46,060
Okey dokey.

1709
01:42:46,060 --> 01:42:47,060
Oh, sorry.

1710
01:42:47,060 --> 01:42:50,060
Yeah.

1711
01:42:50,060 --> 01:42:55,060
To be fair, I think I did call it a method when I was typing it out.

1712
01:42:55,060 --> 01:42:56,060
No worries.

1713
01:42:56,060 --> 01:42:57,060
No worries.

1714
01:42:57,060 --> 01:42:58,060
Oh.

1715
01:42:58,060 --> 01:42:59,060
Oh.

1716
01:42:59,060 --> 01:43:00,060
Oh.

1717
01:43:00,060 --> 01:43:01,060
Oh.

1718
01:43:01,060 --> 01:43:02,060
Oh.

1719
01:43:02,060 --> 01:43:03,060
Oh.

1720
01:43:03,060 --> 01:43:04,060
Oh.

1721
01:43:04,060 --> 01:43:05,060
Oh.

1722
01:43:05,060 --> 01:43:06,060
Oh.

1723
01:43:06,060 --> 01:43:07,060
Oh.

1724
01:43:07,060 --> 01:43:08,060
Oh.

1725
01:43:08,060 --> 01:43:09,060
Oh.

1726
01:43:09,060 --> 01:43:10,060
Oh.

1727
01:43:10,060 --> 01:43:11,060
Oh.

1728
01:43:11,060 --> 01:43:12,060
Oh.

1729
01:43:12,060 --> 01:43:13,060
Oh.

1730
01:43:13,060 --> 01:43:14,060
Oh.

1731
01:43:14,060 --> 01:43:15,060
Oh.

1732
01:43:15,060 --> 01:43:16,060
Oh.

1733
01:43:16,060 --> 01:43:17,060
Oh.

1734
01:43:17,060 --> 01:43:18,060
Oh.

1735
01:43:18,060 --> 01:43:19,060
Oh.

1736
01:43:19,060 --> 01:43:20,060
Oh.

1737
01:43:20,060 --> 01:43:21,060
Oh.

1738
01:43:21,060 --> 01:43:22,060
Oh.

1739
01:43:22,060 --> 01:43:23,060
Oh.

1740
01:43:23,060 --> 01:43:24,060
Oh.

1741
01:43:25,060 --> 01:43:26,060
Oh.

1742
01:43:26,060 --> 01:43:27,060
Shucks.

1743
01:43:27,060 --> 01:43:32,060
I'm sorry.

1744
01:43:32,060 --> 01:43:34,060
Yeah.

1745
01:43:34,060 --> 01:43:35,060
Well, okay.

1746
01:43:35,060 --> 01:43:41,060
So, yeah, this is why you control your test data.

1747
01:43:41,060 --> 01:43:44,060
This is why you have controlled environments.

1748
01:43:44,060 --> 01:43:50,060
The reason why historically I've used DuckDuckGo is because it has been fairly consistent,

1749
01:43:50,060 --> 01:43:51,060
you know?

1750
01:43:51,060 --> 01:43:55,060
But sometimes you get stuff like this and it's like, oh my gosh.

1751
01:43:55,060 --> 01:44:01,060
Like originally, when I had done talks and tutorials around this type of thing, I used

1752
01:44:01,060 --> 01:44:03,060
Google and then Google would mess with me all the time.

1753
01:44:03,060 --> 01:44:04,060
I'm like, screw that.

1754
01:44:04,060 --> 01:44:05,060
I'm going to DuckDuckGo.

1755
01:44:05,060 --> 01:44:07,060
And DuckDuckGo is consistent for a while.

1756
01:44:07,060 --> 01:44:11,060
Now you're telling me it's screwing up.

1757
01:44:11,060 --> 01:44:12,060
Good.

1758
01:44:12,060 --> 01:44:20,060
Another thing that I have seen, and this is, again, particular to DuckDuckGo, if you run

1759
01:44:20,060 --> 01:44:24,060
headless mode, it may just freeze you.

1760
01:44:24,060 --> 01:44:31,060
And the reason why, I'm pretty sure, is that DuckDuckGo senses that that's a bot and they

1761
01:44:31,060 --> 01:44:32,060
don't want to serve it.

1762
01:44:32,060 --> 01:44:37,060
So, like, usually if I just run, like, one headless run or two, it's okay.

1763
01:44:37,060 --> 01:44:41,060
But if I do multiple back to back or if I try to do a lot of headless in parallel, it's

1764
01:44:41,060 --> 01:44:43,060
like, oh, no, no, no, no, you're a bot.

1765
01:44:43,060 --> 01:44:44,060
Stop.

1766
01:44:44,060 --> 01:44:47,060
And then my test will fail after 30 seconds for the universal timeout.

1767
01:44:47,060 --> 01:44:48,060
Oh, my gosh.

1768
01:44:49,060 --> 01:44:53,060
But headed mode usually works for me versus headless.

1769
01:44:53,060 --> 01:44:54,060
So, yeah.

1770
01:44:54,060 --> 01:44:56,060
Sorry if you hit those troubles.

1771
01:44:56,060 --> 01:44:59,060
If you hit it, just do it again and node the caveat.

1772
01:44:59,060 --> 01:45:03,060
I wish I had a better application I could just give you, but then that complicates setup.

1773
01:45:07,060 --> 01:45:13,060
So, anyway, barring some sketchy A-B testing or bot blocking, this should work.

1774
01:45:13,060 --> 01:45:18,060
Okay.

1775
01:45:18,060 --> 01:45:19,060
Doki.

1776
01:45:19,060 --> 01:45:22,060
So, we have one more assertion to do.

1777
01:45:22,060 --> 01:45:25,060
And this one is for the page title.

1778
01:45:25,060 --> 01:45:26,060
Right?

1779
01:45:26,060 --> 01:45:28,060
The page title was that little thing at the top.

1780
01:45:28,060 --> 01:45:31,060
The page title is not an element on the page.

1781
01:45:31,060 --> 01:45:33,060
It's an aspect of the page.

1782
01:45:33,060 --> 01:45:38,060
So, in this case, what we want to do is we want to get the page title and make sure it

1783
01:45:38,060 --> 01:45:40,060
has pandas in it.

1784
01:45:40,060 --> 01:45:42,060
So we could do something like this.

1785
01:45:42,060 --> 01:45:53,060
We could say assert page.title or we could say assert panda in page.title and do something

1786
01:45:53,060 --> 01:45:55,060
like that.

1787
01:45:55,060 --> 01:45:58,060
But we also know there's a race condition there.

1788
01:45:58,060 --> 01:46:01,060
What if the title hasn't synced yet?

1789
01:46:01,060 --> 01:46:08,060
So the better way to do it using a web-first assertion is not this, but using our expect.

1790
01:46:08,060 --> 01:46:16,060
Expect page and then we have assertions not only on locators but assertions on pages to

1791
01:46:16,060 --> 01:46:29,060
have title panda at duck, duck, go.

1792
01:46:29,060 --> 01:46:30,060
Okay.

1793
01:46:30,060 --> 01:46:36,060
So that is the proper way to do it.

1794
01:46:36,060 --> 01:46:38,060
So, again, it will do that smart waiting.

1795
01:46:38,060 --> 01:46:42,060
It will wait for the page title to sync and all that stuff.

1796
01:46:42,060 --> 01:46:47,060
Now, one frustrating thing here is like, wait a minute, hold on, hold on.

1797
01:46:47,060 --> 01:46:52,060
Yeah, I know that, like, if you look at the page title itself, this might be kind of small,

1798
01:46:52,060 --> 01:46:54,060
but it is panda at duck, duck, go.

1799
01:46:54,060 --> 01:46:57,060
If you just hover over in Chrome, you'll see that, you know.

1800
01:46:57,060 --> 01:47:01,060
That's going to be a full exact match on the title.

1801
01:47:01,060 --> 01:47:11,060
You might want to just do like a substring check, like to say expect page to contain title.

1802
01:47:11,060 --> 01:47:15,060
Unfortunately, that is not a available method.

1803
01:47:15,060 --> 01:47:20,060
But something you can do if you want, you can pass in a regular expression.

1804
01:47:20,060 --> 01:47:23,060
So you could say import re for the regular expression.

1805
01:47:23,060 --> 01:47:36,060
And then you could say re.compile r star dot star panda dot star.

1806
01:47:36,060 --> 01:47:42,060
I think if it, oh, gosh, come on, do it like that.

1807
01:47:42,060 --> 01:47:46,060
And so that way you can do like a substring check and it's more powerful.

1808
01:47:46,060 --> 01:47:48,060
You can do a full reg ex check.

1809
01:47:48,060 --> 01:47:52,060
So if you only had a part of the title, you want to check versus the entirety of the title.

1810
01:47:52,060 --> 01:47:57,060
You could do something like this.

1811
01:47:57,060 --> 01:48:01,060
I'm going to not do that.

1812
01:48:01,060 --> 01:48:05,060
But I'll leave that in comments.

1813
01:48:05,060 --> 01:48:09,060
And I'll just, I like simple is better than complex.

1814
01:48:09,060 --> 01:48:13,060
So we're just going to, since we know what the full title should be anyway,

1815
01:48:13,060 --> 01:48:17,060
panda at duck, duck, go.

1816
01:48:17,060 --> 01:48:19,060
Boom, just like that.

1817
01:48:19,060 --> 01:48:21,060
Does that make sense, everybody?

1818
01:48:21,060 --> 01:48:31,060
Question.

1819
01:48:31,060 --> 01:48:32,060
Yes.

1820
01:48:32,060 --> 01:48:34,060
Yes, you can.

1821
01:48:34,060 --> 01:48:36,060
That's an excellent question.

1822
01:48:36,060 --> 01:48:40,060
And yes, to have value, you could put a regular expression in here as well.

1823
01:48:40,060 --> 01:48:44,060
In fact, let me make sure I'm 90% sure you can.

1824
01:48:44,060 --> 01:48:45,060
Hold on.

1825
01:48:45,060 --> 01:48:46,060
To have value.

1826
01:48:46,060 --> 01:48:47,060
Yes.

1827
01:48:47,060 --> 01:48:49,060
So value, string, or pattern.

1828
01:48:49,060 --> 01:48:54,060
That was one thing that kind of threw me at first because I was like, I want contains.

1829
01:48:54,060 --> 01:48:57,060
And then the playwright guys were like, Andy, just pop in a reg ex.

1830
01:48:57,060 --> 01:49:01,060
And I'm just like, you can do that?

1831
01:49:01,060 --> 01:49:02,060
You know.

1832
01:49:02,060 --> 01:49:06,060
So yeah, anywhere you see like a to have some sort of string value,

1833
01:49:06,060 --> 01:49:10,060
it's usually going to be string or reg ex.

1834
01:49:10,060 --> 01:49:20,060
Question.

1835
01:49:20,060 --> 01:49:30,060
I mean, you could say get all text contents and then like your filtering condition could be like if panda matches a particular reg ex instead of string contains.

1836
01:49:30,060 --> 01:49:32,060
You could do something like that.

1837
01:49:32,060 --> 01:49:35,060
I think that's a little bit of overkill.

1838
01:49:35,060 --> 01:49:41,060
Regular expressions are categorically more complex, therefore categorically more thinking overhead,

1839
01:49:41,060 --> 01:49:44,060
therefore a little tougher to try to figure out as you're going about.

1840
01:49:44,060 --> 01:49:48,060
So only use them as you need them.

1841
01:49:48,060 --> 01:49:50,060
But great questions.

1842
01:49:50,060 --> 01:49:52,060
I love reg ex.

1843
01:49:52,060 --> 01:49:53,060
Be safe with them.

1844
01:49:53,060 --> 01:49:58,060
Don't do dangerous long things.

1845
01:49:58,060 --> 01:49:59,060
All right.

1846
01:49:59,060 --> 01:50:04,060
So let's yet again, one last time, run the test, make sure it works.

1847
01:50:04,060 --> 01:50:12,060
Yes.

1848
01:50:12,060 --> 01:50:14,060
Passing.

1849
01:50:14,060 --> 01:50:16,060
Everyone else got it passing?

1850
01:50:16,060 --> 01:50:17,060
Sweet.

1851
01:50:17,060 --> 01:50:18,060
Cool, cool.

1852
01:50:18,060 --> 01:50:23,060
So there's one more thing I want to point out about this.

1853
01:50:23,060 --> 01:50:27,060
We'll take another five minute break and then we'll come back and refactor.

1854
01:50:27,060 --> 01:50:29,060
But congratulations.

1855
01:50:29,060 --> 01:50:32,060
You all have completed your first playwright test.

1856
01:50:32,060 --> 01:50:34,060
Give yourselves a hand.

1857
01:50:34,060 --> 01:50:36,060
Yeah, man, come on.

1858
01:50:36,060 --> 01:50:38,060
We did it.

1859
01:50:38,060 --> 01:50:40,060
Gosh, I know it's the afternoon.

1860
01:50:40,060 --> 01:50:41,060
We got this.

1861
01:50:41,060 --> 01:50:42,060
Get some coffee.

1862
01:50:42,060 --> 01:50:46,060
So where's my little green pointer thingy?

1863
01:50:46,060 --> 01:50:48,060
So interesting thing.

1864
01:50:48,060 --> 01:50:51,060
Remember I was talking about like the automatic weights and stuff.

1865
01:50:51,060 --> 01:50:57,060
So is it showing the photo?

1866
01:50:57,060 --> 01:51:16,060
So when I first developed this tutorial years ago with Selenium WebDriver, when I wrote my then steps here, my verification steps, I actually made this the first one.

1867
01:51:16,060 --> 01:51:22,060
I moved this up here and then I did the search bar and then I did the result links.

1868
01:51:22,060 --> 01:51:23,060
Why?

1869
01:51:23,060 --> 01:51:26,060
Well, first of all, that's top to bottom on the page.

1870
01:51:26,060 --> 01:51:29,060
And secondly, this is arguably the simplest.

1871
01:51:29,060 --> 01:51:35,060
This is slightly more complicated because it then adds the locator and then this is the most complicated one.

1872
01:51:35,060 --> 01:51:45,060
But when I did that and I had this up here and I run my test against Chrome, it would be fine.

1873
01:51:45,060 --> 01:51:48,060
But then I would run it against Firefox and it would fail.

1874
01:51:48,060 --> 01:51:58,060
And the reason why was because Firefox takes two or three seconds to change that title of the page.

1875
01:51:58,060 --> 01:52:01,060
There was a race condition in waiting for this title.

1876
01:52:01,060 --> 01:52:03,060
And I was like, dang it.

1877
01:52:03,060 --> 01:52:04,060
Ha, sucks.

1878
01:52:04,060 --> 01:52:10,060
And so I was actually recording video of this tutorial for something.

1879
01:52:10,060 --> 01:52:14,060
And so I'm like, well, I already recorded the chapter of like doing all the things, had the code there.

1880
01:52:14,060 --> 01:52:19,060
So I was like, OK, we're just going to move this assertion to the end because by the time we get done these two,

1881
01:52:19,060 --> 01:52:25,060
the page title will definitely have loaded and we'll just kind of like leave that as an implicit race condition that's never ever going to get hit.

1882
01:52:25,060 --> 01:52:26,060
Right.

1883
01:52:26,060 --> 01:52:34,060
Because there's the if you wanted to wait explicitly in sliding mode drivers would be a much more interesting thing or a much more challenging thing to do.

1884
01:52:34,060 --> 01:52:42,060
But in playwright, it has that web first assertion that automatically waits not just on elements but also on the title.

1885
01:52:42,060 --> 01:52:44,060
And that's another reason playwrights better.

1886
01:52:44,060 --> 01:52:53,060
And so what I really ought to have done for today's tutorial is move this back up here to go simple, more complex, more complex,

1887
01:52:53,060 --> 01:52:58,060
because I can now do that the way I originally intended where I couldn't easily do it with Selenium.

1888
01:52:58,060 --> 01:53:02,060
But then I kept it here anyway because I wanted to point out that example.

1889
01:53:02,060 --> 01:53:04,060
Question?

1890
01:53:04,060 --> 01:53:11,060
Oh, that's a great question.

1891
01:53:11,060 --> 01:53:12,060
Oh, I forgot to mention that.

1892
01:53:12,060 --> 01:53:13,060
OK.

1893
01:53:13,060 --> 01:53:28,060
So when you're doing playwright with Python using the pi test plug in playwright, Python, pi test, plug in so many piece by default, this is using chromium.

1894
01:53:28,060 --> 01:53:31,060
If you don't specify otherwise, it's using chromium.

1895
01:53:31,060 --> 01:53:37,060
We can specify other browsers and I will show you how a little bit later.

1896
01:53:37,060 --> 01:53:43,060
Caveat, if you are doing if you're using playwright in other languages, that may not be the case.

1897
01:53:43,060 --> 01:53:51,060
For example, if you were to if we were doing playwright in JavaScript or TypeScript and we didn't specify browser,

1898
01:53:51,060 --> 01:53:57,060
it actually by default runs all three browsers in parallel at the same time.

1899
01:53:57,060 --> 01:54:02,060
So we would be running three tests instead of one and on three different threads.

1900
01:54:02,060 --> 01:54:07,060
So that's why I give that caveat with the plug in by default, it's going to be chromium.

1901
01:54:07,060 --> 01:54:09,060
But good question.

1902
01:54:09,060 --> 01:54:12,060
Chrome is typically the fastest of the three as well.

1903
01:54:12,060 --> 01:54:14,060
If you have to pick one, I recommend chromium.

1904
01:54:14,060 --> 01:54:19,060
Why? Highest market share, fastest speed.

1905
01:54:19,060 --> 01:54:21,060
Cool, cool.

1906
01:54:21,060 --> 01:54:26,060
Any other questions for now?

1907
01:54:26,060 --> 01:54:27,060
All right.

1908
01:54:27,060 --> 01:54:30,060
So let's take another five minute break.

1909
01:54:30,060 --> 01:54:36,060
Be sure to pick up some stickers and postcards in the front and let's be back here at 338 Apple time.

1910
01:54:56,060 --> 01:54:58,060
Thank you.

1911
01:55:26,060 --> 01:55:28,060
Thank you.

1912
01:55:56,060 --> 01:55:58,060
Thank you.

1913
01:56:26,060 --> 01:56:28,060
Thank you.

1914
01:56:56,060 --> 01:56:58,060
Thank you.

1915
01:57:26,060 --> 01:57:28,060
Thank you.

1916
01:57:56,060 --> 01:57:58,060
Thank you.

1917
01:58:26,060 --> 01:58:28,060
Thank you.

1918
01:58:56,060 --> 01:58:58,060
Thank you.

1919
01:59:26,060 --> 01:59:28,060
Thank you.

1920
01:59:56,060 --> 01:59:58,060
Thank you.

1921
01:59:58,060 --> 02:00:00,060
Thank you.

1922
02:00:00,060 --> 02:00:02,060
Thank you.

1923
02:00:02,060 --> 02:00:04,060
Thank you.

1924
02:00:04,060 --> 02:00:06,060
Thank you.

1925
02:00:06,060 --> 02:00:08,060
Thank you.

1926
02:00:08,060 --> 02:00:10,060
Thank you.

1927
02:00:10,060 --> 02:00:12,060
Thank you.

1928
02:00:12,060 --> 02:00:14,060
Thank you.

1929
02:00:14,060 --> 02:00:16,060
Thank you.

1930
02:00:16,060 --> 02:00:18,060
Thank you.

1931
02:00:18,060 --> 02:00:20,060
Thank you.

1932
02:00:20,060 --> 02:00:22,060
Thank you.

1933
02:00:22,060 --> 02:00:24,060
Thank you.

1934
02:00:24,060 --> 02:00:26,060
Thank you.

1935
02:00:26,060 --> 02:00:28,060
Hello, hello.

1936
02:00:28,060 --> 02:00:30,060
We're back.

1937
02:00:30,060 --> 02:00:32,060
Cool.

1938
02:00:32,060 --> 02:00:34,060
All righty.

1939
02:00:34,060 --> 02:00:36,060
So I saw a whole bunch of people swarmed around the swag.

1940
02:00:36,060 --> 02:00:39,060
I saw the pandas went missing so I threw some more panda stickers down.

1941
02:00:39,060 --> 02:00:41,060
We still have some of those postcards.

1942
02:00:41,060 --> 02:00:43,060
Please take them.

1943
02:00:43,060 --> 02:00:45,060
They're beautiful.

1944
02:00:45,060 --> 02:00:52,060
If y'all are remote or you didn't get a postcard, here's the page for that visual AI challenge I was mentioning that my company is running right now.

1945
02:00:52,060 --> 02:01:02,060
So basically what you do is you pick a language, pick a web browser tool or framework, and you follow along with the steps in the coding challenge, submit your results.

1946
02:01:02,060 --> 02:01:04,060
It's pretty basic.

1947
02:01:04,060 --> 02:01:06,060
It should take you like 30, 60 minutes.

1948
02:01:06,060 --> 02:01:08,060
Not too hard.

1949
02:01:08,060 --> 02:01:13,060
This kind of shows you not only what we're doing today with automated testing but how to use visual testing techniques.

1950
02:01:13,060 --> 02:01:17,060
You can submit that for the pure joy of learning.

1951
02:01:17,060 --> 02:01:20,060
But also if you submit, you get entered for pretty cool prizes.

1952
02:01:20,060 --> 02:01:25,060
So we're raffling away four PayPal gift cards worth 250 bucks each.

1953
02:01:25,060 --> 02:01:28,060
So it's pretty significant.

1954
02:01:28,060 --> 02:01:39,060
I've blown up the link here for this page, appletools.com slash apple tools visual AI challenge, start east 2022.

1955
02:01:39,060 --> 02:01:46,060
It was meant for the previous conference I came from but I'm pretty sure nobody would be upset if PyCon folks joined in too.

1956
02:01:46,060 --> 02:01:49,060
So take a picture, jot it down, go find it.

1957
02:01:49,060 --> 02:01:52,060
You have until Sunday, May 1st to give it a try.

1958
02:01:52,060 --> 02:01:54,060
Of course you can always give it a try afterwards.

1959
02:01:54,060 --> 02:01:56,060
You just won't win a prize.

1960
02:01:56,060 --> 02:02:16,060
So that being said, let's get back to the playwrights.

1961
02:02:16,060 --> 02:02:17,060
Okay.

1962
02:02:17,060 --> 02:02:26,060
So if we look at our test overall, we're going to push the terminal down just a little bit so we can see a full screen here.

1963
02:02:26,060 --> 02:02:28,060
Oh, that's as far as it's going to go.

1964
02:02:28,060 --> 02:02:29,060
Okay.

1965
02:02:29,060 --> 02:02:31,060
Be as it may, what is it is.

1966
02:02:31,060 --> 02:02:33,060
Come on, come on.

1967
02:02:33,060 --> 02:02:36,060
Good enough.

1968
02:02:36,060 --> 02:02:39,060
So when we look at this code, what do we think about this code?

1969
02:02:39,060 --> 02:02:41,060
Do we like this code?

1970
02:02:41,060 --> 02:02:43,060
We think it's pretty hot.

1971
02:02:43,060 --> 02:02:47,060
Do we think there's some problems with this code?

1972
02:02:47,060 --> 02:02:49,060
What don't we like?

1973
02:02:49,060 --> 02:02:52,060
What don't we like?

1974
02:02:52,060 --> 02:02:56,060
It's hard coded with what, panda?

1975
02:02:56,060 --> 02:02:59,060
What else is hard coded?

1976
02:02:59,060 --> 02:03:00,060
The URL is hard coded?

1977
02:03:00,060 --> 02:03:04,060
Yeah.

1978
02:03:04,060 --> 02:03:11,060
The fourth or fifth, well, that one we want to make sure we have a certain number of elements loaded.

1979
02:03:11,060 --> 02:03:16,060
So we did choose it.

1980
02:03:16,060 --> 02:03:19,060
It's been chosen.

1981
02:03:19,060 --> 02:03:22,060
Do we see some duplication?

1982
02:03:22,060 --> 02:03:24,060
Yeah, selectors.

1983
02:03:24,060 --> 02:03:28,060
Yeah.

1984
02:03:28,060 --> 02:03:31,060
Overall, I think this code is okay.

1985
02:03:31,060 --> 02:03:40,060
But the biggest problem I see overall, other than some of the hard coding, is these steps are rather imperative.

1986
02:03:41,060 --> 02:03:42,060
They're kind of granular.

1987
02:03:42,060 --> 02:03:46,060
They're a little bit of saying, give me a locator, do this very low level mechanical action.

1988
02:03:46,060 --> 02:03:51,060
Whereas when I think about testing, I think more in terms of what's going on in the comments.

1989
02:03:51,060 --> 02:03:53,060
It's not for me a page go-to.

1990
02:03:53,060 --> 02:03:54,060
It's that I'm loading a page.

1991
02:03:54,060 --> 02:03:57,060
It's not that I'm doing locator fill, locator click.

1992
02:03:57,060 --> 02:04:01,060
I'm really thinking, search is the page.

1993
02:04:01,060 --> 02:04:05,060
And we have that duplication problem where these things aren't very reusable.

1994
02:04:05,060 --> 02:04:07,060
Question?

1995
02:04:07,060 --> 02:04:17,060
Yes.

1996
02:04:17,060 --> 02:04:23,060
Mm-hmm.

1997
02:04:23,060 --> 02:04:25,060
You can do that.

1998
02:04:25,060 --> 02:04:29,060
It's not native in Playwright, but you can do some if-else logic there.

1999
02:04:29,060 --> 02:04:36,060
So the question was, what if when I load my page, okay, so context for the recording and who's ever remote.

2000
02:04:36,060 --> 02:04:43,060
There was a problem where because we're using DuckDuckGo, some people were getting stuck in A-B testing where the locators were different.

2001
02:04:43,060 --> 02:04:49,060
Is there a way that I could fall back on a secondary locator if the primary one doesn't work?

2002
02:04:49,060 --> 02:04:50,060
Yes, there's a way.

2003
02:04:50,060 --> 02:04:53,060
You have to implement it yourself, be an if-else.

2004
02:04:53,060 --> 02:04:56,060
If I try to get this and it's not there, then fall back on the other one.

2005
02:04:56,060 --> 02:04:58,060
It's not clean.

2006
02:04:58,060 --> 02:05:02,060
Then again, like I said before, caveat, we're dealing with an uncontrolled app.

2007
02:05:02,060 --> 02:05:04,060
I'm sorry.

2008
02:05:04,060 --> 02:05:09,060
And I'm a little ticked because that wasn't happening like two days ago.

2009
02:05:09,060 --> 02:05:11,060
We weren't hitting this A-B problem two days ago.

2010
02:05:11,060 --> 02:05:15,060
I don't know why it happened to me today during Tutorial Day at PyCon.

2011
02:05:15,060 --> 02:05:16,060
Go figure.

2012
02:05:16,060 --> 02:05:17,060
Thanks, DuckDuckGo.

2013
02:05:17,060 --> 02:05:21,060
If someone from DuckDuckGo is listening, we see you.

2014
02:05:21,060 --> 02:05:24,060
Oh, gosh.

2015
02:05:24,060 --> 02:05:26,060
So where were we?

2016
02:05:26,060 --> 02:05:28,060
Don't repeat yourself and all that good stuff.

2017
02:05:28,060 --> 02:05:34,060
Okay, so yes.

2018
02:05:34,060 --> 02:05:42,060
When I automate my WebUI tests or mobile tests or really any other kind of, well, yeah, WebUI mobile,

2019
02:05:42,060 --> 02:05:48,060
I don't like to use raw calls like this because they tend to, and they're not very reusable.

2020
02:05:48,060 --> 02:05:56,060
What I like to do is use a design pattern to help improve the reusability and the readability.

2021
02:05:56,060 --> 02:06:01,060
My design pattern of choice is called the screenplay pattern.

2022
02:06:01,060 --> 02:06:04,060
Has anyone heard of screenplay pattern?

2023
02:06:04,060 --> 02:06:05,060
Nobody.

2024
02:06:05,060 --> 02:06:06,060
Not surprised.

2025
02:06:06,060 --> 02:06:07,060
That's okay.

2026
02:06:07,060 --> 02:06:11,060
Screenplay exists more in the non-Python world.

2027
02:06:11,060 --> 02:06:13,060
I have opinions about these things.

2028
02:06:13,060 --> 02:06:16,060
We can wax philosophically later.

2029
02:06:16,060 --> 02:06:23,060
But a more common pattern that has a little bit lower barrier to entry and actually works really well

2030
02:06:23,060 --> 02:06:26,060
with Playwright is called page objects.

2031
02:06:26,060 --> 02:06:29,060
Has anyone heard page objects before?

2032
02:06:29,060 --> 02:06:31,060
One person, two people?

2033
02:06:31,060 --> 02:06:34,060
You all Selenium folks know page objects?

2034
02:06:34,060 --> 02:06:35,060
Oh, okay.

2035
02:06:35,060 --> 02:06:37,060
Well, we're going to learn more new stuff here.

2036
02:06:37,060 --> 02:06:39,060
Page objects are not specific to Playwright.

2037
02:06:39,060 --> 02:06:40,060
You can use them with Cypress.

2038
02:06:40,060 --> 02:06:41,060
You can use them with Selenium.

2039
02:06:41,060 --> 02:06:44,060
You can use them with Appium.

2040
02:06:44,060 --> 02:06:46,060
Page objects are decent.

2041
02:06:46,060 --> 02:06:48,060
I think screenplay is better.

2042
02:06:48,060 --> 02:06:51,060
But we don't have a screenplay implementation in Python yet.

2043
02:06:51,060 --> 02:06:53,060
So we're going to stick with page objects.

2044
02:06:53,060 --> 02:06:58,060
The idea of a page object is rather than have all these raw calls spilled out in a test case,

2045
02:06:58,060 --> 02:07:02,060
we're going to define classes that represent pages.

2046
02:07:02,060 --> 02:07:07,060
So in this test, how many pages are we interacting with?

2047
02:07:07,060 --> 02:07:08,060
Two.

2048
02:07:08,060 --> 02:07:13,060
The search page and result page.

2049
02:07:13,060 --> 02:07:18,060
So we're going to implement two page object classes, a search page and a result page.

2050
02:07:18,060 --> 02:07:24,060
Each page object class has a collection of locators that model structure of the page,

2051
02:07:24,060 --> 02:07:29,060
as well as a set of methods for interactions.

2052
02:07:29,060 --> 02:07:34,060
So let's build some page objects together.

2053
02:07:34,060 --> 02:07:40,060
Where we put our page objects, we are not going to put them in the tests directory

2054
02:07:40,060 --> 02:07:45,060
because page object classes are not tests, therefore they do not belong there.

2055
02:07:45,060 --> 02:07:53,060
My recommended practice is we create a new top level folder in our project and call it pages.

2056
02:07:53,060 --> 02:07:56,060
This should be equal in hierarchy to the tests folder.

2057
02:07:56,060 --> 02:08:00,060
It should not be under the tests folder.

2058
02:08:00,060 --> 02:08:02,060
And we are not going to leave this as a directory.

2059
02:08:02,060 --> 02:08:05,060
We are going to make this a package.

2060
02:08:05,060 --> 02:08:11,060
And so as we know, in Python, we add a file named dunder init, that is underscore underscore init,

2061
02:08:11,060 --> 02:08:14,060
underscore underscore dot py.

2062
02:08:14,060 --> 02:08:18,060
And all of a sudden now we turn a directory into a package that we can import other modules.

2063
02:08:18,060 --> 02:08:19,060
Yay!

2064
02:08:19,060 --> 02:08:23,060
And we're going to leave this file blank, which always struck me as odd, but we're just going to do that.

2065
02:08:23,060 --> 02:08:25,060
And it's okay. It's okay to leave that file blank.

2066
02:08:25,060 --> 02:08:28,060
That is an okay practice. It's not a bad practice and not a good practice.

2067
02:08:28,060 --> 02:08:29,060
It is a standard practice.

2068
02:08:29,060 --> 02:08:33,060
You can add stuff in there too. It gets wonky.

2069
02:08:33,060 --> 02:08:38,060
So in my pages directory, side by side with init py, I'm going to, oh, wrong one.

2070
02:08:38,060 --> 02:08:42,060
I'm going to add a module called search dot py.

2071
02:08:42,060 --> 02:08:46,060
And this is where we'll put our search page class.

2072
02:08:46,060 --> 02:08:57,060
So in the search page class, I'm going to start off by, remember this import of the page type from the other module?

2073
02:08:57,060 --> 02:09:00,060
I'm just going to copy paste that over because I want that type again.

2074
02:09:00,060 --> 02:09:03,060
Play writes in KPI, import page.

2075
02:09:03,060 --> 02:09:08,060
And I'm going to define a class.

2076
02:09:08,060 --> 02:09:12,060
If classes are new to you in Python, totally cool.

2077
02:09:12,060 --> 02:09:14,060
These classes are going to be fairly simple.

2078
02:09:14,060 --> 02:09:22,060
If you're an old hat pro with object oriented programming, then this is going to be a piece of cake.

2079
02:09:22,060 --> 02:09:24,060
Either way, it should be pretty straightforward.

2080
02:09:24,060 --> 02:09:26,060
If you have any questions, just let me know.

2081
02:09:26,060 --> 02:09:30,060
We can kind of step through what it means to have a class and an object.

2082
02:09:30,060 --> 02:09:36,060
So I'm going to call this class duck, duck, go, search, page.

2083
02:09:36,060 --> 02:09:41,060
Boom, boom. And we are using Python 3, which is beautiful.

2084
02:09:41,060 --> 02:09:44,060
So in here, I'm going to add some data.

2085
02:09:44,060 --> 02:09:51,060
One thing I'm going to add as a class variable is the URL.

2086
02:09:51,060 --> 02:09:53,060
URL equals this.

2087
02:09:53,060 --> 02:10:02,060
Now, I'm going to caveat this and say this is actually not a recommended practice.

2088
02:10:02,060 --> 02:10:11,060
Whenever we are doing Web UI testing, we are targeting some page, therefore we need some URL to start with.

2089
02:10:11,060 --> 02:10:22,060
It is a much better practice to pass in any URLs you're testing as an input into your automation, not to hard code it in your code.

2090
02:10:22,060 --> 02:10:30,060
The reason why is because a lot of times when you're developing Web apps, you may have multiple instances of that Web app that you could test against.

2091
02:10:30,060 --> 02:10:40,060
You might have a development environment, you might have a test environment, you might have a staging environment, and yes, you should have a production environment.

2092
02:10:40,060 --> 02:10:45,060
And really, you should be able to target your tests at any environment and see how they run.

2093
02:10:45,060 --> 02:10:53,060
So if you hard code the URL for one particular environment, then you can't quickly just switch it to other environments.

2094
02:10:53,060 --> 02:11:08,060
If you want to learn more about input strategies like that, I'm giving a talk on Sunday afternoon called Managing the Test Data Nightmare,

2095
02:11:08,060 --> 02:11:12,060
where I'll show you different ways you can pass in data like this into your tests.

2096
02:11:12,060 --> 02:11:18,060
But because we're not focusing on that, I'm trying to stick more towards Playwright Python.

2097
02:11:18,060 --> 02:11:22,060
If I wanted to show how to architect a whole bigger thing, it would take a lot more time.

2098
02:11:22,060 --> 02:11:29,060
We're going to take the easy path, pop it in here for convenience with that little asterisk to say, hey, don't do this in the real world.

2099
02:11:29,060 --> 02:11:40,060
Okay, so next thing in our class we're going to do is we're going to make the init method.

2100
02:11:40,060 --> 02:11:46,060
Def init as dunder init, underscore underscore init.

2101
02:11:46,060 --> 02:11:51,060
And we all know, yeah, it's like a constructor, but it's not actually a constructor.

2102
02:11:51,060 --> 02:11:54,060
It's an initializer, but we're just going to roll with it.

2103
02:11:54,060 --> 02:11:55,060
It's going to be cool.

2104
02:11:55,060 --> 02:12:03,060
So self and the thing that I want to pass in for this constructor as a form of dependency injection,

2105
02:12:03,060 --> 02:12:09,060
I want to pass a reference to the Playwright page.

2106
02:12:09,060 --> 02:12:14,060
And init methods return a none type.

2107
02:12:14,060 --> 02:12:18,060
So I'm going to store a reference to the page, self.page equals page.

2108
02:12:18,060 --> 02:12:20,060
Cool.

2109
02:12:20,060 --> 02:12:31,060
And then what I want to do is I want to create instance variables for each locator for things I want to get off of the search page.

2110
02:12:31,060 --> 02:12:38,060
So page, how many elements did we interact with?

2111
02:12:38,060 --> 02:12:43,060
Two. What were they?

2112
02:12:43,060 --> 02:12:47,060
Search bar and the search button.

2113
02:12:47,060 --> 02:12:48,060
Yes.

2114
02:12:48,060 --> 02:12:50,060
So what I'm going to do, I'm going to be lazy.

2115
02:12:50,060 --> 02:12:55,060
I'm going to copy and paste this over and then make some changes.

2116
02:12:55,060 --> 02:13:01,060
So what I want is I want that locator.

2117
02:13:01,060 --> 02:13:07,060
So I'm going to say, I'm going to call it self dot, what's a good name for this?

2118
02:13:07,060 --> 02:13:10,060
Search input.

2119
02:13:10,060 --> 02:13:12,060
Let's call it input because this is an input.

2120
02:13:12,060 --> 02:13:14,060
That's like the HTML thing.

2121
02:13:14,060 --> 02:13:16,060
So you can call it search bar. Totally cool.

2122
02:13:16,060 --> 02:13:17,060
Totally cool.

2123
02:13:17,060 --> 02:13:22,060
And then this one, I'm going to do this thing and this one.

2124
02:13:22,060 --> 02:13:29,060
Let's tab it in and self dot search button.

2125
02:13:29,060 --> 02:13:32,060
Yeah.

2126
02:13:32,060 --> 02:13:38,060
Okay. Ta-da!

2127
02:13:38,060 --> 02:13:40,060
Remember what I said before.

2128
02:13:40,060 --> 02:13:43,060
Locators are pointer objects.

2129
02:13:43,060 --> 02:13:58,060
So even if this page isn't loaded yet in the web application under test, in my automation, I can still construct this page object with these locator objects way before page ever appears and it's okay.

2130
02:13:58,060 --> 02:14:07,060
And then we can use these locators later once the page is loaded to actually get the things.

2131
02:14:07,060 --> 02:14:08,060
Okay.

2132
02:14:08,060 --> 02:14:17,060
So we had how many interactions we were doing with these thingydings?

2133
02:14:17,060 --> 02:14:18,060
Two?

2134
02:14:18,060 --> 02:14:21,060
What were the things we were doing?

2135
02:14:21,060 --> 02:14:27,060
We're going to load and then we're going to search.

2136
02:14:27,060 --> 02:14:28,060
Yes. Yeah, we do click.

2137
02:14:28,060 --> 02:14:33,060
But really, click is like a menial level kind of task.

2138
02:14:33,060 --> 02:14:38,060
But the intention of our step is to search.

2139
02:14:38,060 --> 02:14:45,060
So let's make a method called load that will load our page.

2140
02:14:45,060 --> 02:14:48,060
Oopsie. And again, this isn't going to return anything.

2141
02:14:48,060 --> 02:14:50,060
Loading a page is a task.

2142
02:14:50,060 --> 02:14:52,060
It does something and it's done.

2143
02:14:52,060 --> 02:14:53,060
There's nothing to return.

2144
02:14:53,060 --> 02:14:55,060
It's just do the needful.

2145
02:14:55,060 --> 02:14:59,060
So how do we load the page?

2146
02:14:59,060 --> 02:15:00,060
Self.page.

2147
02:15:00,060 --> 02:15:03,060
What was the name of the method?

2148
02:15:03,060 --> 02:15:04,060
Goto.

2149
02:15:04,060 --> 02:15:05,060
Why did they use Goto?

2150
02:15:05,060 --> 02:15:08,060
Why didn't they say something like get or navigate?

2151
02:15:08,060 --> 02:15:11,060
Doesn't Goto like hurt you and your soul?

2152
02:15:11,060 --> 02:15:18,060
Like didn't we all learn at some point when we were programming, don't use Goto statements that bad.

2153
02:15:18,060 --> 02:15:19,060
That's bad.

2154
02:15:19,060 --> 02:15:20,060
I don't know.

2155
02:15:20,060 --> 02:15:26,060
That's what when I, okay, so I learned how to do programming in the starting in the early thousands.

2156
02:15:26,060 --> 02:15:31,060
I was in high school, picked up a TI-83 Plus calculator, started programming math formulas.

2157
02:15:31,060 --> 02:15:34,060
This is the best thing ever.

2158
02:15:34,060 --> 02:15:37,060
Then picked up Java and C++ and I did that whole thing.

2159
02:15:37,060 --> 02:15:47,060
And at that time, the instruction in programming courses was very much like you learn hello world, variables, if, for,

2160
02:15:47,060 --> 02:15:50,060
structure programming, and then object-oriented programming.

2161
02:15:50,060 --> 02:15:52,060
And they always put in there like Goto is such a bad thing.

2162
02:15:52,060 --> 02:15:54,060
You don't want to use that.

2163
02:15:54,060 --> 02:15:55,060
And I'll say, okay.

2164
02:15:55,060 --> 02:15:57,060
Also, global variables are a bad thing.

2165
02:15:57,060 --> 02:15:58,060
Don't use that.

2166
02:15:58,060 --> 02:16:02,060
So that's like in my generation of learning programming, it's like drilled into my brain.

2167
02:16:02,060 --> 02:16:03,060
I can't get out of it.

2168
02:16:03,060 --> 02:16:04,060
Is anyone else like that?

2169
02:16:04,060 --> 02:16:05,060
Am I the only one?

2170
02:16:05,060 --> 02:16:06,060
Okay.

2171
02:16:06,060 --> 02:16:07,060
If you're not, it's okay.

2172
02:16:07,060 --> 02:16:08,060
It's okay.

2173
02:16:08,060 --> 02:16:11,060
Maybe that was either before you, maybe that was after you.

2174
02:16:11,060 --> 02:16:16,060
We have so thrown Goto in the trash that it wasn't even a thing worth bringing up.

2175
02:16:16,060 --> 02:16:17,060
That's a good thing.

2176
02:16:17,060 --> 02:16:18,060
But it just hurts me to see this.

2177
02:16:18,060 --> 02:16:19,060
I'm like, really?

2178
02:16:19,060 --> 02:16:20,060
Come on.

2179
02:16:20,060 --> 02:16:21,060
Or girls?

2180
02:16:21,060 --> 02:16:22,060
Really, people?

2181
02:16:22,060 --> 02:16:23,060
Come on.

2182
02:16:23,060 --> 02:16:24,060
I'm bashing that.

2183
02:16:24,060 --> 02:16:25,060
It's meant to be a joke.

2184
02:16:25,060 --> 02:16:26,060
It's meant to be funny.

2185
02:16:26,060 --> 02:16:27,060
Oh, the pain.

2186
02:16:27,060 --> 02:16:37,500
Because TI-83 Plus calculator, basically, you had to use Goto.

2187
02:16:37,500 --> 02:16:40,180
And so I taught myself how to program using Goto.

2188
02:16:40,180 --> 02:16:41,980
Then I go to Java class, and they say, don't do that.

2189
02:16:41,980 --> 02:16:42,980
That's bad.

2190
02:16:42,980 --> 02:16:43,980
I'm like, crap.

2191
02:16:43,980 --> 02:16:44,980
Oh, and then I learned.

2192
02:16:44,980 --> 02:16:45,980
Actually, it is bad.

2193
02:16:45,980 --> 02:16:46,980
Hey.

2194
02:16:46,980 --> 02:16:50,060
I started learning Python in senior year of high school.

2195
02:16:50,060 --> 02:16:54,060
Python 2, like 4, 2, 3.

2196
02:16:54,060 --> 02:16:56,060
That's when I got started.

2197
02:16:56,060 --> 02:16:58,060
Anywho, that's a little bit more about me.

2198
02:16:58,060 --> 02:16:59,060
Keep it interesting.

2199
02:16:59,060 --> 02:17:00,060
So, ta-da!

2200
02:17:00,060 --> 02:17:03,060
Load method.

2201
02:17:03,060 --> 02:17:07,060
Let's also do a search method.

2202
02:17:07,060 --> 02:17:09,060
Dev search.

2203
02:17:09,060 --> 02:17:14,060
Now, this one, I'm going to make this a little fancier.

2204
02:17:14,060 --> 02:17:19,060
I'm going to write this such that we can pass in any phrase to search.

2205
02:17:19,060 --> 02:17:25,060
We could hard code the word panda in here, but if we were to write other search tests,

2206
02:17:25,060 --> 02:17:28,060
we might want to search for other things, like Pikachu.

2207
02:17:28,060 --> 02:17:29,060
Right?

2208
02:17:29,060 --> 02:17:30,060
Pikachu's pretty cool, too.

2209
02:17:30,060 --> 02:17:33,060
I mean, why don't we want to search for that dude?

2210
02:17:33,060 --> 02:17:40,060
So, generalizing parameterizing like this is usually a good practice when building interactions like this.

2211
02:17:40,060 --> 02:17:44,060
So, even though we don't necessarily need this for this one test case, it can help for the future.

2212
02:17:44,060 --> 02:17:46,060
And it's just good practice.

2213
02:17:46,060 --> 02:17:48,060
Again, this is a task of an interaction.

2214
02:17:48,060 --> 02:17:53,060
Therefore, we are going to give it a non-return type.

2215
02:17:53,060 --> 02:17:59,060
And in this case, who wants to try to spell this out for me?

2216
02:17:59,060 --> 02:18:02,060
Self dot, what do I do?

2217
02:18:02,060 --> 02:18:08,060
Which of these wonderful locators should I use?

2218
02:18:08,060 --> 02:18:16,060
Search input dot fill phrase.

2219
02:18:16,060 --> 02:18:18,060
Boom.

2220
02:18:18,060 --> 02:18:19,060
Then what?

2221
02:18:19,060 --> 02:18:26,060
Self dot search button dot click.

2222
02:18:26,060 --> 02:18:28,060
Yeah.

2223
02:18:28,060 --> 02:18:30,060
Awesome.

2224
02:18:30,060 --> 02:18:33,060
So, let's take a step back and look at this.

2225
02:18:33,060 --> 02:18:34,060
Wow.

2226
02:18:34,060 --> 02:18:35,060
Congrats.

2227
02:18:35,060 --> 02:18:38,060
We have just written our first page object.

2228
02:18:38,060 --> 02:18:39,060
Woo.

2229
02:18:39,060 --> 02:18:41,060
Awesome.

2230
02:18:41,060 --> 02:18:42,060
What do we think about this?

2231
02:18:42,060 --> 02:18:44,060
Do we like this?

2232
02:18:44,060 --> 02:18:46,060
Yeah, I think it's pretty good.

2233
02:18:46,060 --> 02:18:52,060
What do we like about this?

2234
02:18:52,060 --> 02:18:53,060
Abstracts a little bit.

2235
02:18:53,060 --> 02:18:56,060
Okay.

2236
02:18:56,060 --> 02:18:58,060
It's far more structured, right?

2237
02:18:58,060 --> 02:19:00,060
We have separated loosely.

2238
02:19:00,060 --> 02:19:02,060
We've kind of.

2239
02:19:02,060 --> 02:19:03,060
We haven't fully separated concerns.

2240
02:19:03,060 --> 02:19:09,060
But we kind of separated concerns between structure and interaction.

2241
02:19:09,060 --> 02:19:13,060
If you want to fully separate and be solid about it, that's what screenplay is about.

2242
02:19:13,060 --> 02:19:15,060
So, I would say this is decent.

2243
02:19:15,060 --> 02:19:16,060
You know, it's okay.

2244
02:19:16,060 --> 02:19:18,060
It makes a little more sense.

2245
02:19:18,060 --> 02:19:23,060
Any other things we'd like about this?

2246
02:19:23,060 --> 02:19:25,060
Sorry, what was that?

2247
02:19:25,060 --> 02:19:26,060
It's reusable.

2248
02:19:26,060 --> 02:19:28,060
Yes, yes.

2249
02:19:28,060 --> 02:19:31,060
We could use this for multiple different searches.

2250
02:19:31,060 --> 02:19:35,060
Or if there's other things we wanted to do on the page, we could just add more methods

2251
02:19:35,060 --> 02:19:37,060
that could then be reusable.

2252
02:19:37,060 --> 02:19:40,060
I also like that this is self-documenting, right?

2253
02:19:40,060 --> 02:19:42,060
Look at the search method.

2254
02:19:42,060 --> 02:19:45,060
Search input fill, search button click.

2255
02:19:45,060 --> 02:19:51,060
That's a lot more readable than page locator some ugly gorp dot fill, right?

2256
02:19:51,060 --> 02:19:57,060
Ah.

2257
02:19:57,060 --> 02:19:58,060
That's right.

2258
02:19:58,060 --> 02:20:03,060
So, if you're stuck in some A-B testing hell, you can come here and change your locators

2259
02:20:03,060 --> 02:20:04,060
all in one place.

2260
02:20:04,060 --> 02:20:05,060
And you know where.

2261
02:20:05,060 --> 02:20:11,060
Instead of trying to like search through every heck and line of test code through however

2262
02:20:11,060 --> 02:20:15,060
many test modules and functions, you can be like, ah, I know the one place.

2263
02:20:15,060 --> 02:20:17,060
I go to my pages package.

2264
02:20:17,060 --> 02:20:19,060
I go to the search page.

2265
02:20:19,060 --> 02:20:21,060
And I just change it there and everybody's happy.

2266
02:20:21,060 --> 02:20:23,060
Yes, yes.

2267
02:20:23,060 --> 02:20:24,060
Everybody.

2268
02:20:24,060 --> 02:20:25,060
Very, very good.

2269
02:20:25,060 --> 02:20:26,060
Very good.

2270
02:20:26,060 --> 02:20:28,060
So, our objects are decent.

2271
02:20:28,060 --> 02:20:30,060
They're better than raw calls.

2272
02:20:30,060 --> 02:20:35,060
So, now that we have our page object, let's go back and refactor our test case to use

2273
02:20:35,060 --> 02:20:37,060
our page object.

2274
02:20:37,060 --> 02:20:39,060
Oops.

2275
02:20:39,060 --> 02:20:43,060
Hold on one second.

2276
02:20:43,060 --> 02:20:44,060
Okay.

2277
02:20:44,060 --> 02:20:53,060
So, what we're going to need to do is we're going to need to import that particular object.

2278
02:20:53,060 --> 02:21:01,060
So, from pages.search import duck.go search page.

2279
02:21:01,060 --> 02:21:05,060
Again, that's why we put it in a package so we can easily import it.

2280
02:21:05,060 --> 02:21:08,060
If you stuff this under your test directory, you can't import it.

2281
02:21:08,060 --> 02:21:09,060
Why?

2282
02:21:09,060 --> 02:21:10,060
Test is just a directory.

2283
02:21:10,060 --> 02:21:11,060
It's not a package.

2284
02:21:11,060 --> 02:21:15,060
Why don't we make tests a package by adding an init py?

2285
02:21:15,060 --> 02:21:17,060
Read the Python docs or read the PyTest docs.

2286
02:21:17,060 --> 02:21:19,060
They'll tell you why not to do that.

2287
02:21:19,060 --> 02:21:21,060
Bad things can happen.

2288
02:21:21,060 --> 02:21:24,060
So, recommended practice, do it like this.

2289
02:21:24,060 --> 02:21:26,060
So, I got this page.

2290
02:21:26,060 --> 02:21:31,060
So now, at the top of my test case, I'm going to create a page, a search page.

2291
02:21:31,060 --> 02:21:36,060
I'm going to say search page equals duck.go search page.

2292
02:21:36,060 --> 02:21:39,060
And remember, we have to inject the playwright page like that.

2293
02:21:39,060 --> 02:21:42,060
That's dependency injection in action.

2294
02:21:42,060 --> 02:21:44,060
And now, I can simplify my calls.

2295
02:21:44,060 --> 02:21:51,060
I can say instead of page.go to hard coding, I can say search page.load.

2296
02:21:51,060 --> 02:22:00,060
And here, instead of these two lines that are very long, I can say search page.search.

2297
02:22:00,060 --> 02:22:03,060
And we'll still put in Panda here.

2298
02:22:03,060 --> 02:22:05,060
I think it's okay to put in Panda here.

2299
02:22:05,060 --> 02:22:07,060
This is specification by example.

2300
02:22:07,060 --> 02:22:09,060
What's specification by example?

2301
02:22:09,060 --> 02:22:13,060
It shows that you're illustrating behavior that you're testing with real live examples,

2302
02:22:13,060 --> 02:22:14,060
not some abstractions.

2303
02:22:14,060 --> 02:22:15,060
Why?

2304
02:22:15,060 --> 02:22:17,060
People understand it better.

2305
02:22:17,060 --> 02:22:20,060
So, for now, this is good enough.

2306
02:22:20,060 --> 02:22:25,060
And so, just like that, boom, we have used our first page object.

2307
02:22:25,060 --> 02:22:26,060
Everybody with me?

2308
02:22:26,060 --> 02:22:27,060
Yeah.

2309
02:22:27,060 --> 02:22:32,060
So, let's run this test again because we always like to make sure we test things along the way.

2310
02:22:32,060 --> 02:22:34,060
It's a new type of TDD.

2311
02:22:34,060 --> 02:22:37,060
Wah-hah-hah-hah.

2312
02:22:37,060 --> 02:22:40,060
And boom, boom, boom, boom.

2313
02:22:40,060 --> 02:22:41,060
Cool. We're good.

2314
02:22:41,060 --> 02:22:42,060
Page objects work.

2315
02:22:42,060 --> 02:22:44,060
So, there was no...

2316
02:22:44,060 --> 02:22:47,060
Oh, am I getting hung up in this A-B testing crap now?

2317
02:22:47,060 --> 02:22:49,060
Ah.

2318
02:22:49,060 --> 02:22:51,060
Y'all poisoned me.

2319
02:22:51,060 --> 02:22:53,060
Oh, are we all getting it?

2320
02:22:53,060 --> 02:22:54,060
Is it like pinging?

2321
02:22:54,060 --> 02:22:56,060
Are we all in like one shared IP in this location?

2322
02:22:56,060 --> 02:22:58,060
It's like, oh, we're going to send them all there.

2323
02:22:58,060 --> 02:22:59,060
Oh, my gosh.

2324
02:22:59,060 --> 02:23:00,060
I'm sorry, friends.

2325
02:23:00,060 --> 02:23:01,060
Okay.

2326
02:23:01,060 --> 02:23:02,060
Let me inspect this.

2327
02:23:02,060 --> 02:23:03,060
Okay.

2328
02:23:03,060 --> 02:23:04,060
Who had the better locator for that?

2329
02:23:04,060 --> 02:23:05,060
There was like some...

2330
02:23:05,060 --> 02:23:06,060
Yeah.

2331
02:23:06,060 --> 02:23:07,060
Yeah.

2332
02:23:07,060 --> 02:23:13,060
Let me try this one time without slow-mo and see if it does it better.

2333
02:23:13,060 --> 02:23:16,060
If not, help me out, friends.

2334
02:23:16,060 --> 02:23:17,060
Okay.

2335
02:23:17,060 --> 02:23:18,060
It did it that...

2336
02:23:18,060 --> 02:23:19,060
Whatever.

2337
02:23:19,060 --> 02:23:20,060
Okay.

2338
02:23:20,060 --> 02:23:21,060
We'll just...

2339
02:23:21,060 --> 02:23:22,060
Sorry again.

2340
02:23:22,060 --> 02:23:24,060
It was not doing this like yesterday, I promise.

2341
02:23:24,060 --> 02:23:27,060
Anyway, so page object worked.

2342
02:23:27,060 --> 02:23:34,060
So, page objects don't change functionally how something works, but it helps us write

2343
02:23:34,060 --> 02:23:35,060
better tests.

2344
02:23:35,060 --> 02:23:36,060
Why?

2345
02:23:36,060 --> 02:23:41,060
Readability counts.

2346
02:23:41,060 --> 02:23:48,060
If you do your page objects right, you may not even need these comment line given when

2347
02:23:48,060 --> 02:23:52,060
thens anymore because your test code may be so readable.

2348
02:23:52,060 --> 02:23:55,060
It's just as if you were almost writing plain language.

2349
02:23:55,060 --> 02:24:04,060
You know, the way I explain Python to non-Pythonistas, especially like people in my testing communities,

2350
02:24:04,060 --> 02:24:10,060
Python is kind of like executable pseudo code, and it clicks with them like, oh, right.

2351
02:24:10,060 --> 02:24:11,060
So, do it well.

2352
02:24:11,060 --> 02:24:15,060
You may not even need to keep those given when thens.

2353
02:24:15,060 --> 02:24:17,060
I will keep them because I like them.

2354
02:24:17,060 --> 02:24:18,060
I think they're pretty.

2355
02:24:18,060 --> 02:24:21,060
I think they still help, but if you want to...

2356
02:24:21,060 --> 02:24:22,060
You can.

2357
02:24:22,060 --> 02:24:23,060
All righty.

2358
02:24:23,060 --> 02:24:26,060
So, who's ready to make a result page?

2359
02:24:26,060 --> 02:24:28,060
Oh, no.

2360
02:24:28,060 --> 02:24:31,060
Some people are not excited about writing another page object.

2361
02:24:31,060 --> 02:24:32,060
Oh, you're breaking my heart.

2362
02:24:32,060 --> 02:24:33,060
It's okay.

2363
02:24:33,060 --> 02:24:34,060
I'd rather write screenplay calls, too.

2364
02:24:34,060 --> 02:24:35,060
I understand.

2365
02:24:35,060 --> 02:24:40,060
But we're going to do page objects because they're a little easier for this application.

2366
02:24:40,060 --> 02:24:41,060
Result.py.

2367
02:24:41,060 --> 02:24:42,060
New module.

2368
02:24:42,060 --> 02:24:51,060
We're going to copy that import statement again, again, again, again.

2369
02:24:51,060 --> 02:24:53,060
And then...

2370
02:24:53,060 --> 02:24:59,060
Oh, there's another thing we need to import because we're going to be dealing with lists

2371
02:24:59,060 --> 02:25:06,060
from typing import the list type and just roll with it.

2372
02:25:06,060 --> 02:25:07,060
Huh?

2373
02:25:07,060 --> 02:25:08,060
I don't know.

2374
02:25:08,060 --> 02:25:09,060
Maybe not.

2375
02:25:09,060 --> 02:25:10,060
We'll find out.

2376
02:25:10,060 --> 02:25:11,060
I thought I did.

2377
02:25:11,060 --> 02:25:12,060
Oh, I can do this.

2378
02:25:12,060 --> 02:25:13,060
Oh, well, I just learned something.

2379
02:25:13,060 --> 02:25:14,060
I don't have to use it at all.

2380
02:25:14,060 --> 02:25:15,060
Oh, well, damn.

2381
02:25:15,060 --> 02:25:16,060
Nice.

2382
02:25:16,060 --> 02:25:17,060
Sweet.

2383
02:25:17,060 --> 02:25:18,060
Awesome.

2384
02:25:18,060 --> 02:25:25,060
And then, I'm going to do a little bit of a demo.

2385
02:25:25,060 --> 02:25:29,140
Awesome.

2386
02:25:29,140 --> 02:25:32,860
And this is why we do pair programming and code reviews.

2387
02:25:32,860 --> 02:25:35,260
So we learn from each other.

2388
02:25:35,260 --> 02:25:38,660
Because, yeah, even though I'm...

2389
02:25:38,660 --> 02:25:39,660
Okay, another sidebar.

2390
02:25:39,660 --> 02:25:43,540
I know I'm up here on stage and I'm doing this thing and I'm like, pandificating about

2391
02:25:43,540 --> 02:25:44,900
all these good testing practices.

2392
02:25:44,900 --> 02:25:47,100
I'm still learning stuff, too.

2393
02:25:47,100 --> 02:25:49,100
So don't feel like...

2394
02:25:49,100 --> 02:25:54,940
Just because you may feel like imposter syndrome or you feel nervous or you feel like, maybe

2395
02:25:54,940 --> 02:26:00,540
I don't know as well as I can, you still have value to offer to help others.

2396
02:26:00,540 --> 02:26:01,540
Mic drop.

2397
02:26:01,540 --> 02:26:02,540
Yeah.

2398
02:26:02,540 --> 02:26:08,220
It's what it means to be part of the Python community.

2399
02:26:08,220 --> 02:26:13,060
You can use Python, but when you're part of a community of Python, like coming to PyCon

2400
02:26:13,060 --> 02:26:17,220
or PyOhio or whatever Python conference you want or going to your local meetup or getting

2401
02:26:17,220 --> 02:26:22,020
involved online, right, makes it so much better and so much more valuable and so much more

2402
02:26:22,020 --> 02:26:24,540
helpful to everybody.

2403
02:26:24,540 --> 02:26:28,380
That's why even though I don't use a whole lot of Python all the time, I still do quite

2404
02:26:28,380 --> 02:26:34,540
a bit, I still love to come to the Python events and the Python community to have this.

2405
02:26:34,540 --> 02:26:37,420
Because Python community is awesome.

2406
02:26:37,420 --> 02:26:39,540
Oops, sorry.

2407
02:26:39,540 --> 02:26:42,540
Duck, duck, duck.

2408
02:26:42,540 --> 02:26:45,580
Duck, duck, duck, duck, duck, duck.

2409
02:26:45,580 --> 02:26:46,580
Okay.

2410
02:26:46,580 --> 02:26:47,580
It's not dry.

2411
02:26:47,580 --> 02:26:48,580
It's just duck, duck, duck.

2412
02:26:48,580 --> 02:26:49,580
Okay.

2413
02:26:49,580 --> 02:26:50,580
Duck, duck, go.

2414
02:26:50,580 --> 02:26:51,580
Result page.

2415
02:26:51,580 --> 02:26:52,980
Are we having fun, y'all?

2416
02:26:52,980 --> 02:26:54,140
I'm having a blast.

2417
02:26:54,140 --> 02:26:56,100
It's kind of hard to, because everybody's kind of heads down on code.

2418
02:26:56,100 --> 02:26:57,580
I'm having fun up here.

2419
02:26:57,580 --> 02:26:59,140
I was afraid this was going to be painful.

2420
02:26:59,140 --> 02:27:00,140
This is a lot of fun.

2421
02:27:00,140 --> 02:27:01,140
I hope you all are having fun too.

2422
02:27:01,140 --> 02:27:05,420
And if you're watching the recording afterwards, I hope you're having fun at home.

2423
02:27:05,420 --> 02:27:06,420
Okay.

2424
02:27:06,420 --> 02:27:07,780
So, what do we do?

2425
02:27:07,780 --> 02:27:08,780
Same kind of thing.

2426
02:27:08,780 --> 02:27:09,780
I'm sorry.

2427
02:27:09,780 --> 02:27:10,780
Okay.

2428
02:27:10,780 --> 02:27:13,780
So, we're going to make a knit method again.

2429
02:27:13,780 --> 02:27:14,780
And knit.

2430
02:27:14,780 --> 02:27:17,340
Whoa, it did the autocomplete thing.

2431
02:27:17,340 --> 02:27:18,340
Nice.

2432
02:27:18,340 --> 02:27:19,340
I'm going to need page.

2433
02:27:19,340 --> 02:27:20,340
Oh.

2434
02:27:20,340 --> 02:27:21,340
Oh, yeah.

2435
02:27:21,340 --> 02:27:22,340
Okay.

2436
02:27:22,340 --> 02:27:23,340
So, page, page.

2437
02:27:24,340 --> 02:27:27,340
Self.page equals page.

2438
02:27:29,940 --> 02:27:32,340
And again, we're going to do our locators.

2439
02:27:32,340 --> 02:27:38,020
So, the locators that we were using for the result page, we had this one here for the

2440
02:27:38,020 --> 02:27:40,020
search form input.

2441
02:27:40,020 --> 02:27:48,260
So, self.search input equals that.

2442
02:27:48,260 --> 02:27:53,460
And then there was also this one for the result links.

2443
02:27:53,460 --> 02:27:56,380
So, I'm going to copy that over.

2444
02:27:56,380 --> 02:28:01,540
Self.resultlinks equals this.

2445
02:28:01,540 --> 02:28:02,540
And there we go.

2446
02:28:02,540 --> 02:28:04,340
We have our initializer.

2447
02:28:04,340 --> 02:28:08,180
Now, one thing I'm going to nitpick here, and I should go back and do it on the other

2448
02:28:08,180 --> 02:28:09,540
one as well.

2449
02:28:09,540 --> 02:28:18,100
Something I like to do in my page objects, I like to alphabetize my locators.

2450
02:28:18,100 --> 02:28:22,060
That makes it easier for me to find.

2451
02:28:22,060 --> 02:28:23,540
It may seem kind of trivial.

2452
02:28:23,540 --> 02:28:25,660
It may seem like a nitpick.

2453
02:28:25,660 --> 02:28:32,460
But I have worked on page objects that have had dozens and dozens to hundreds of locators.

2454
02:28:32,460 --> 02:28:36,380
I have worked on page objects that have extended into thousands upon thousands, even tens of

2455
02:28:36,380 --> 02:28:38,180
thousands of lines.

2456
02:28:38,180 --> 02:28:39,900
I'm not saying that's right.

2457
02:28:39,900 --> 02:28:43,600
I am in fact saying that's categorically horrible.

2458
02:28:43,600 --> 02:28:45,900
You should not have page objects that big.

2459
02:28:45,900 --> 02:28:52,260
But sometimes you're working on projects where you don't have the agency to make it better.

2460
02:28:52,260 --> 02:29:00,100
So in that case, I like making them alphabetized so they're a little easier to find and you

2461
02:29:00,100 --> 02:29:04,980
can mentally map them out a little better.

2462
02:29:04,980 --> 02:29:06,660
Okay.

2463
02:29:06,660 --> 02:29:10,500
Now this page object is going to be a little different than the other one.

2464
02:29:10,500 --> 02:29:12,500
I mean, of course, because it's a different page.

2465
02:29:12,500 --> 02:29:18,380
I mean, in our approach to implementing our interactions.

2466
02:29:18,380 --> 02:29:23,860
On the search page, we were all doing, we were doing nothing but tasks.

2467
02:29:23,860 --> 02:29:25,380
Do the needful.

2468
02:29:25,380 --> 02:29:26,700
Don't return anything.

2469
02:29:26,700 --> 02:29:31,180
However, on the result page, we're not doing tasks.

2470
02:29:31,180 --> 02:29:34,460
We're asking questions, right?

2471
02:29:34,460 --> 02:29:37,500
We're asking what's in the search bar?

2472
02:29:37,500 --> 02:29:39,160
What's in the title?

2473
02:29:39,160 --> 02:29:40,740
What are the result links?

2474
02:29:40,740 --> 02:29:47,380
It's a fundamentally different kind of interaction because it's querying state on the page, asking

2475
02:29:47,380 --> 02:29:53,380
a question, and then returning that result or answer.

2476
02:29:53,380 --> 02:30:03,740
And so, and then what we do with those answers is we make assertions upon those answers.

2477
02:30:03,740 --> 02:30:05,100
Everybody with me?

2478
02:30:05,100 --> 02:30:09,660
Why am I digging into this so deep?

2479
02:30:09,660 --> 02:30:14,060
Because we need to maintain a healthy separation of concerns here, right?

2480
02:30:14,060 --> 02:30:20,620
The concern of performing an assertion is separate from the concern of querying that

2481
02:30:20,620 --> 02:30:23,520
state of asking that question.

2482
02:30:23,520 --> 02:30:30,500
We should never, and I mean never, embed assertions into page objects.

2483
02:30:30,500 --> 02:30:34,300
I'm going to say that again.

2484
02:30:34,300 --> 02:30:43,580
We should never, ever bury assertions in our page objects.

2485
02:30:43,580 --> 02:30:44,580
Don't do that.

2486
02:30:44,580 --> 02:30:46,380
You might be like, why?

2487
02:30:46,380 --> 02:30:47,380
Why wouldn't we do that?

2488
02:30:47,380 --> 02:30:49,980
And why am I banging on the table about this?

2489
02:30:49,980 --> 02:30:51,700
First of all, bad things have happened.

2490
02:30:51,700 --> 02:30:54,580
Everything I'm telling you is because some bad thing happened in my life.

2491
02:30:54,580 --> 02:30:56,580
I want you to not have to suffer like I did.

2492
02:30:56,580 --> 02:31:00,780
But anyway, specifically why this one?

2493
02:31:00,780 --> 02:31:08,260
Whenever you're asking a question to get an answer, the goodness or badness of that

2494
02:31:08,260 --> 02:31:12,540
answer is contextual.

2495
02:31:12,540 --> 02:31:19,780
So if I'm searching for pandas, how many result links do I want to relate to come back and

2496
02:31:19,780 --> 02:31:22,140
relate to something related to pandas?

2497
02:31:22,140 --> 02:31:23,140
At least one, right?

2498
02:31:23,140 --> 02:31:25,160
I want something, right?

2499
02:31:25,720 --> 02:31:32,720
What if I type in an absolute garbage string and I query the page or ask the question for

2500
02:31:32,720 --> 02:31:37,480
the result links and I get back nothing, empty list?

2501
02:31:37,480 --> 02:31:41,200
In that context for that test, empty list is good.

2502
02:31:41,200 --> 02:31:45,480
But in the context of the panda test, empty list is bad.

2503
02:31:45,480 --> 02:31:47,240
It's the same question.

2504
02:31:47,240 --> 02:31:49,440
It's the same interaction.

2505
02:31:49,440 --> 02:31:54,280
If I were to embed my assertions in those calls, I'd effectively have to duplicate

2506
02:31:54,360 --> 02:31:59,840
the code to make the interaction just to have separate true falses for assertions at the

2507
02:31:59,840 --> 02:32:01,280
end.

2508
02:32:01,280 --> 02:32:02,760
That is why we separate our concerns.

2509
02:32:02,760 --> 02:32:04,520
It makes it more reusable.

2510
02:32:04,520 --> 02:32:10,800
So always keep your assertions in the test function, in the test case, because they are

2511
02:32:10,800 --> 02:32:15,700
test case concerns.

2512
02:32:15,700 --> 02:32:20,560
And offload your questions and your tasks to your page object separately.

2513
02:32:20,560 --> 02:32:22,560
Does that make sense?

2514
02:32:23,560 --> 02:32:25,560
Okay, good.

2515
02:32:25,560 --> 02:32:26,560
Foundations of good testing.

2516
02:32:26,560 --> 02:32:29,120
I told you, you came in here and thought you were learning Playwright.

2517
02:32:29,120 --> 02:32:32,120
You're actually learning all the best things about test automation.

2518
02:32:32,120 --> 02:32:33,120
Ha ha, success.

2519
02:32:33,120 --> 02:32:35,120
And you learn Playwright along the way.

2520
02:32:35,120 --> 02:32:37,120
Yes, ha ha, success.

2521
02:32:37,120 --> 02:32:38,120
Blowing people's minds.

2522
02:32:38,120 --> 02:32:40,120
I hope you all are learning good stuff.

2523
02:32:40,120 --> 02:32:42,640
I'm having fun learning, teaching and all that.

2524
02:32:42,640 --> 02:32:47,940
So in that case, we're going to make sure in our approach, we're going to keep the assertions

2525
02:32:47,940 --> 02:32:49,120
in here.

2526
02:32:49,120 --> 02:32:53,680
So really what we want to do is we want to kind of separate out these other pieces and

2527
02:32:53,680 --> 02:32:56,080
kind of move them over.

2528
02:32:56,080 --> 02:32:58,200
Now we were doing Selenium-based page objects.

2529
02:32:58,200 --> 02:33:00,800
There's a whole, we'll probably move all three of these things.

2530
02:33:00,800 --> 02:33:06,840
But with Playwright, we also have to remember that the web-first assertions are very much

2531
02:33:06,840 --> 02:33:11,040
tied to, you know, like the locator objects themselves.

2532
02:33:11,040 --> 02:33:20,400
So if I'm looking at this here assertion, expect my page locator of this thing to have

2533
02:33:20,400 --> 02:33:21,400
a particular value.

2534
02:33:21,400 --> 02:33:23,520
I mean, just textually.

2535
02:33:23,520 --> 02:33:25,720
We know the expect is ought to stay.

2536
02:33:25,720 --> 02:33:28,400
We know to have value ought to stay.

2537
02:33:28,400 --> 02:33:35,800
The locator is the only thing that we really need from the page objects, right?

2538
02:33:35,800 --> 02:33:38,520
In this case, we don't need to write a method to ask a question.

2539
02:33:38,520 --> 02:33:44,480
You just need to make the page object, make that locator available for the assertion to

2540
02:33:44,480 --> 02:33:46,520
do its thing.

2541
02:33:46,520 --> 02:33:49,120
Interesting.

2542
02:33:49,120 --> 02:33:56,640
So in this case, what I'm going to do, let's import from, let's do it alphabetized.

2543
02:33:56,640 --> 02:33:58,120
I'm going to be picky.

2544
02:33:58,120 --> 02:34:04,360
From, oh gosh, from pages, result, import, dot, dot, go, result page.

2545
02:34:05,360 --> 02:34:06,600
I'm going to do the same thing.

2546
02:34:06,600 --> 02:34:13,560
Result page equal duck, duck, go, result page, page.

2547
02:34:13,560 --> 02:34:18,760
And so down here, all I'm going to do is I'm just going to say, hey, you know that locator,

2548
02:34:18,760 --> 02:34:22,360
result page dot, what is it?

2549
02:34:22,360 --> 02:34:23,360
Search input.

2550
02:34:23,360 --> 02:34:24,360
There we go.

2551
02:34:24,360 --> 02:34:25,360
Auto complete, yay.

2552
02:34:25,360 --> 02:34:31,040
So now when we read this test, it's like if we try to read this line in plain language,

2553
02:34:31,040 --> 02:34:37,200
it's like saying, hey, expect the result page, start result to have the value panda.

2554
02:34:37,200 --> 02:34:39,480
Does that look like code to you?

2555
02:34:39,480 --> 02:34:44,320
That's like plain language to me.

2556
02:34:44,320 --> 02:34:47,960
That's another thing that makes PlayWrite really, really cool with its assertions and

2557
02:34:47,960 --> 02:34:49,280
its formatting like this.

2558
02:34:49,280 --> 02:34:53,080
It reads a lot like plain language.

2559
02:34:53,080 --> 02:34:59,800
So I'm just going to leave that search input purely as a locator.

2560
02:34:59,800 --> 02:35:03,720
I don't even need to write a method in my result page to do anything with that.

2561
02:35:03,720 --> 02:35:12,040
I just need it to specify page structure so that I can call it in the assertion here.

2562
02:35:12,040 --> 02:35:16,080
Now if I look at this thing, this is a little more complex, right?

2563
02:35:16,080 --> 02:35:19,000
Simple is better than complex, but complex is better than complicated.

2564
02:35:19,000 --> 02:35:22,560
I would say this is complex, not complicated.

2565
02:35:22,560 --> 02:35:27,320
So we know here we have what we're trying to do.

2566
02:35:27,320 --> 02:35:30,200
First of all, we are trying to get a list of titles from the page.

2567
02:35:30,200 --> 02:35:32,520
We're asking for a list of titles, right?

2568
02:35:32,520 --> 02:35:34,560
That's a question we're asking.

2569
02:35:34,560 --> 02:35:39,840
And then the second thing we're doing is we are doing a data transformation, right?

2570
02:35:39,840 --> 02:35:44,240
And then the third thing we're doing is we are assessing a Boolean condition, which is

2571
02:35:44,240 --> 02:35:48,380
kind of like asking a question that's indirectly on the page.

2572
02:35:48,380 --> 02:35:54,120
We could kind of wholesale move this off into one method in our page objects, but I kind

2573
02:35:54,280 --> 02:35:59,280
of want to split it into two, and I want to split it into here.

2574
02:35:59,280 --> 02:36:02,760
So let's do that together.

2575
02:36:02,760 --> 02:36:14,280
So first function, result link titles.

2576
02:36:14,280 --> 02:36:18,920
And now this time I'm going to have to return a type because we're asking a question.

2577
02:36:18,920 --> 02:36:21,520
And so it should be a list of strings.

2578
02:36:21,520 --> 02:36:26,240
Oh, yeah, that's pretty nice.

2579
02:36:26,240 --> 02:36:28,200
I learned a thing too.

2580
02:36:28,200 --> 02:36:29,520
All right.

2581
02:36:29,520 --> 02:36:35,680
So I'm basically going to wholesale copy and paste and then simplify.

2582
02:36:35,680 --> 02:36:44,920
So page locator, you know, this thing should be self.result links.

2583
02:36:44,920 --> 02:36:47,600
And we still need to do that nth and that wait for.

2584
02:36:48,320 --> 02:36:54,040
But then down here, I can say instead of I want to return the list of titles we get.

2585
02:36:54,040 --> 02:37:00,640
So and again, it's going to be the same locator that I'm going to reference again.

2586
02:37:00,640 --> 02:37:06,920
And now here's the first time we see the value of having a locator here and reusing it.

2587
02:37:06,920 --> 02:37:10,000
Longer pages, the more you're going to reuse these locators.

2588
02:37:10,000 --> 02:37:15,280
And so return self result links, all text contents.

2589
02:37:15,280 --> 02:37:24,160
And this to me looks a whole lot better than this.

2590
02:37:24,160 --> 02:37:26,200
Now let's make a second method.

2591
02:37:26,200 --> 02:37:27,840
Like I said, we could combine them in one.

2592
02:37:27,840 --> 02:37:29,120
I want to do them separate.

2593
02:37:29,120 --> 02:37:30,120
Why?

2594
02:37:30,120 --> 02:37:31,920
Because I made a design decision.

2595
02:37:31,920 --> 02:37:38,000
Testing is as much art as it is engineering.

2596
02:37:38,000 --> 02:37:47,600
This one I'm going to say def result link titles contains phrase.

2597
02:37:47,600 --> 02:37:48,600
Huh?

2598
02:37:48,600 --> 02:37:51,320
What is this?

2599
02:37:51,320 --> 02:37:56,680
So self and I'm going to pass in a phrase that is a string.

2600
02:37:56,680 --> 02:37:59,120
Oops oops oops oops.

2601
02:37:59,120 --> 02:38:03,400
And this is going to return a Boolean.

2602
02:38:03,400 --> 02:38:07,140
Oh shoot.

2603
02:38:07,140 --> 02:38:08,140
You might think it's odd.

2604
02:38:08,140 --> 02:38:10,180
Okay, why are we phrasing it like this?

2605
02:38:10,180 --> 02:38:17,420
This is a type of question that is returning a true false value.

2606
02:38:17,420 --> 02:38:19,140
It's assessing a condition.

2607
02:38:19,140 --> 02:38:22,940
It's not performing the assertion, but it's setting up for the assertion.

2608
02:38:22,940 --> 02:38:27,340
This is like the setup and the assertion is going to be the spike.

2609
02:38:27,340 --> 02:38:30,540
And like I said, that makes it more reusable because I could use, I could assert either

2610
02:38:30,540 --> 02:38:33,740
true or false depending on my context.

2611
02:38:33,740 --> 02:38:36,920
Another thing I want to add in here.

2612
02:38:36,920 --> 02:38:47,740
Instead of hard coding that is greater than zero, we can actually include a minimum value.

2613
02:38:47,740 --> 02:38:51,920
And by default we can set that to one, but we can override it if we want.

2614
02:38:51,920 --> 02:38:52,920
Why?

2615
02:38:52,920 --> 02:38:54,920
Reusability.

2616
02:38:54,920 --> 02:38:57,480
So what goes on in this method?

2617
02:38:57,480 --> 02:39:00,800
First of all, I want to get those titles.

2618
02:39:00,800 --> 02:39:04,860
Equal self dot result link titles.

2619
02:39:04,860 --> 02:39:14,320
And then I want to say that matches thing.

2620
02:39:14,320 --> 02:39:18,220
Matches equals this.

2621
02:39:18,220 --> 02:39:29,800
And titles if my phrase, phrase dot lower in t dot lower because I don't want to hard

2622
02:39:29,800 --> 02:39:31,800
code that panda anymore.

2623
02:39:31,800 --> 02:39:37,760
And then I'm going to return the length of matches.

2624
02:39:37,760 --> 02:39:39,300
And it's not going to be greater than zero now.

2625
02:39:39,300 --> 02:39:44,380
It's going to be greater than or equal to the minimum.

2626
02:39:44,380 --> 02:39:51,880
So a little more robust than what we had before.

2627
02:39:51,880 --> 02:39:58,120
And likewise, we can come back over to our search test.

2628
02:39:58,120 --> 02:40:00,380
Just wait a moment for people to finish typing.

2629
02:40:00,540 --> 02:40:01,540
Yes, question.

2630
02:40:15,900 --> 02:40:20,260
I wouldn't know what's going on under the hood precisely, but what my gut tells me is

2631
02:40:20,260 --> 02:40:22,420
that your page is loaded.

2632
02:40:22,420 --> 02:40:25,180
The first call is waiting for that thing to be there.

2633
02:40:25,180 --> 02:40:29,340
And I'm guessing the second time you'd be like, oh, I don't think it would cache or

2634
02:40:29,340 --> 02:40:30,340
privacy.

2635
02:40:30,340 --> 02:40:31,340
And it would just happen to be there.

2636
02:40:31,340 --> 02:40:34,700
And so it would be like, boom, done.

2637
02:40:34,700 --> 02:40:35,700
It's an easy check.

2638
02:40:35,700 --> 02:40:41,980
It uses Chrome DevTools so it's faster than WebDriver protocol.

2639
02:40:41,980 --> 02:40:46,420
So then once we have this, let's go back and refactor our test.

2640
02:40:46,420 --> 02:40:49,300
So we already did this one.

2641
02:40:49,300 --> 02:41:01,260
So we can get rid of these three lines and say, assert that my result page dot result

2642
02:41:01,260 --> 02:41:05,740
links titles contains the phrase panda.

2643
02:41:05,740 --> 02:41:09,100
And I'm OK with the limit of one.

2644
02:41:09,100 --> 02:41:10,100
Don't need to change that.

2645
02:41:10,100 --> 02:41:11,140
I could if I wanted.

2646
02:41:11,140 --> 02:41:12,140
Maybe in another test.

2647
02:41:12,140 --> 02:41:14,060
I don't know.

2648
02:41:14,060 --> 02:41:16,940
And that one's done too.

2649
02:41:16,940 --> 02:41:18,580
Another question.

2650
02:41:18,580 --> 02:41:20,580
Do we need to change anything about this one?

2651
02:41:20,580 --> 02:41:25,300
Should we be porting this over to result page object?

2652
02:41:25,300 --> 02:41:27,580
No.

2653
02:41:27,580 --> 02:41:31,460
What would you do?

2654
02:41:31,460 --> 02:41:35,620
The title is an aspect of the page, whatever the page is.

2655
02:41:35,620 --> 02:41:37,780
It's not specific to the result page.

2656
02:41:37,780 --> 02:41:42,300
So in this case, even though we are checking the title while it happens to be on the result

2657
02:41:43,300 --> 02:41:47,260
This is not something that we should clutter up our result page object with.

2658
02:41:47,260 --> 02:41:52,780
It's totally cool just to kind of leave this way.

2659
02:41:52,780 --> 02:41:54,460
Cool cool.

2660
02:41:54,460 --> 02:41:56,980
So let's run the test again.

2661
02:41:56,980 --> 02:41:57,980
Please A, B testing.

2662
02:41:57,980 --> 02:41:58,980
Don't screw me.

2663
02:41:58,980 --> 02:41:59,980
Boom.

2664
02:41:59,980 --> 02:42:00,980
Pass.

2665
02:42:00,980 --> 02:42:06,980
So we go with page objects.

2666
02:42:06,980 --> 02:42:07,980
Yeah.

2667
02:42:07,980 --> 02:42:09,860
All righty.

2668
02:42:09,860 --> 02:42:11,860
Tutorial ends at five o'clock, right?

2669
02:42:12,340 --> 02:42:14,900
So let's take another five minute break.

2670
02:42:14,900 --> 02:42:17,140
Be back here at 426.

2671
02:42:17,140 --> 02:42:24,300
I'll show you how to do a little bit more cleanup with setup and then also some play

2672
02:42:24,300 --> 02:42:25,300
right tricks.

2673
02:42:25,300 --> 02:42:26,660
And that should carry us to five.

2674
02:46:41,860 --> 02:47:09,460
Back in.

2675
02:47:09,460 --> 02:47:10,460
Woo sound.

2676
02:47:10,460 --> 02:47:11,460
Thank you.

2677
02:47:11,620 --> 02:47:12,620
Awesome.

2678
02:47:12,620 --> 02:47:13,620
Okay.

2679
02:47:13,620 --> 02:47:16,620
So we go with page objects.

2680
02:47:16,620 --> 02:47:17,620
Yeah.

2681
02:47:17,620 --> 02:47:18,620
Page objects are okay.

2682
02:47:18,620 --> 02:47:19,620
They're decent.

2683
02:47:19,620 --> 02:47:24,220
I beat up on them from time to time, but yeah, they get the job done enough usually, unless

2684
02:47:24,220 --> 02:47:25,220
it's scary.

2685
02:47:25,220 --> 02:47:34,220
So here, one thing I wanted to point out is how these things are constructed.

2686
02:47:34,220 --> 02:47:39,220
Here in this test, we see that, okay, the first thing I did is I constructed my page

2687
02:47:39,220 --> 02:47:40,220
objects, right?

2688
02:47:40,220 --> 02:47:41,220
Okay, whatever.

2689
02:47:41,740 --> 02:47:47,460
But what if I had another test, like a second test function?

2690
02:47:47,460 --> 02:47:51,460
I'd have to construct those page objects again there, right?

2691
02:47:51,460 --> 02:47:53,580
They use the same search page and all.

2692
02:47:53,580 --> 02:47:55,740
What if I had another test?

2693
02:47:55,740 --> 02:47:57,740
Copy and paste that code again.

2694
02:47:57,740 --> 02:48:01,060
Ooh, we're duplicating code.

2695
02:48:01,060 --> 02:48:03,780
Who likes to duplicate code?

2696
02:48:03,780 --> 02:48:05,580
Nobody likes to duplicate it.

2697
02:48:05,580 --> 02:48:06,580
Don't repeat yourself.

2698
02:48:07,220 --> 02:48:12,580
Well, it'd be really nice if we could make some sort of setup thing that is shared for

2699
02:48:12,580 --> 02:48:15,580
creating these page objects and injecting them into our tests.

2700
02:48:15,580 --> 02:48:20,620
Hmm, I wonder if there's a way we can do that in PyTest.

2701
02:48:20,620 --> 02:48:22,740
That's what fixtures are for.

2702
02:48:22,740 --> 02:48:27,980
As a recommended practice, I recommend creating fixtures to create your page objects and then

2703
02:48:27,980 --> 02:48:31,340
declaring them to inject them into your pages.

2704
02:48:31,340 --> 02:48:36,740
So fixtures are a bit of an advanced PyTest thing.

2705
02:48:36,740 --> 02:48:40,180
A lot of times you may use fixtures and not even know it.

2706
02:48:40,180 --> 02:48:45,060
And so building your own fixtures may seem something new or may seem intimidating, but

2707
02:48:45,060 --> 02:48:47,060
it's actually pretty straightforward.

2708
02:48:47,060 --> 02:48:48,540
Nothing to be afraid of.

2709
02:48:48,540 --> 02:48:54,580
In fact, we've already used a fixture for the page from Playwright here.

2710
02:48:54,580 --> 02:48:57,900
So to make fixtures, we're going to go to our tests directory and we're going to create

2711
02:48:57,900 --> 02:48:58,900
a new file.

2712
02:48:58,980 --> 02:49:04,820
It's going to be called conftest.py, C-O-N-F-T-E-S-T.

2713
02:49:04,820 --> 02:49:07,100
Conftest.py, the name matters.

2714
02:49:07,100 --> 02:49:08,100
You can't make this arbitrary.

2715
02:49:08,100 --> 02:49:09,660
It has to be conftest.py.

2716
02:49:09,660 --> 02:49:15,940
This is a special PyTest module that you add to your test directory in order to share things

2717
02:49:15,940 --> 02:49:19,020
such as fixtures.

2718
02:49:19,020 --> 02:49:23,100
So let's add the fixtures to conftest.py.

2719
02:49:23,100 --> 02:49:28,580
I'm going to need to import all of the stuff that I had in my test case, accept the expect

2720
02:49:28,660 --> 02:49:29,660
function.

2721
02:49:29,660 --> 02:49:30,660
Oh, geez.

2722
02:49:30,660 --> 02:49:31,660
Don't do that.

2723
02:49:31,660 --> 02:49:32,660
Okay.

2724
02:49:32,660 --> 02:49:33,660
So, no.

2725
02:49:33,660 --> 02:49:34,660
What?

2726
02:49:34,660 --> 02:49:35,660
Why didn't you copy?

2727
02:49:35,660 --> 02:49:39,260
Come on, Control-C. Don't do that to me.

2728
02:49:39,260 --> 02:49:40,580
There we go.

2729
02:49:40,580 --> 02:49:41,900
And I need to import one other thing.

2730
02:49:41,900 --> 02:49:46,660
I need to import the PyTest module directly.

2731
02:49:46,660 --> 02:49:49,060
Then I can make my fixtures.

2732
02:49:49,060 --> 02:49:52,460
And fixtures are just functions that build things.

2733
02:49:52,460 --> 02:49:54,660
So I'm going to make a function.

2734
02:49:54,660 --> 02:50:00,020
Define, let's do the result page because it's alphabetically first.

2735
02:50:00,020 --> 02:50:01,620
Result page.

2736
02:50:01,620 --> 02:50:08,100
And again, so in order to build a result page, we need the play write page.

2737
02:50:08,100 --> 02:50:12,740
And this is going to return a duck, duck, go result page.

2738
02:50:12,740 --> 02:50:20,740
And so to construct this, return duck, duck, go result page, page.

2739
02:50:21,420 --> 02:50:23,420
Okay.

2740
02:50:23,420 --> 02:50:24,980
That's all there is to a fixture.

2741
02:50:24,980 --> 02:50:27,140
We only need one more thing.

2742
02:50:27,140 --> 02:50:34,420
We need to add a decorator to this function to identify it as a PyTest fixture.

2743
02:50:34,420 --> 02:50:38,780
Decorators are these things that you tack on the top of functions and maybe sometimes

2744
02:50:38,780 --> 02:50:39,780
classes.

2745
02:50:39,780 --> 02:50:41,860
They begin with an at sign.

2746
02:50:41,860 --> 02:50:44,900
And in this case, and then the name of the decorator.

2747
02:50:44,900 --> 02:50:50,260
In this case, it's PyTest from the PyTest module, dot fixture.

2748
02:50:50,260 --> 02:50:57,140
And now what will happen is any time you run a test and your function has an argument

2749
02:50:57,140 --> 02:51:02,060
named result page, PyTest will look in all the fixtures it knows to see if it has a matching

2750
02:51:02,060 --> 02:51:03,060
name.

2751
02:51:03,060 --> 02:51:05,300
If it has a matching name, it's going to call that fixture.

2752
02:51:05,300 --> 02:51:08,860
And then when it calls the fixture and it's done, it's going to inject whatever's returned

2753
02:51:08,860 --> 02:51:11,020
into your test case as an input.

2754
02:51:11,020 --> 02:51:12,900
It's a really cool dependency injection.

2755
02:51:12,900 --> 02:51:15,380
This is one of my favorite things about PyTest.

2756
02:51:15,380 --> 02:51:18,220
So we have a fixture for our result page.

2757
02:51:18,220 --> 02:51:23,620
We're also going to do a picture, a fixture for our search page.

2758
02:51:23,620 --> 02:51:28,420
And that's going to be the DuckDuckGo search page.

2759
02:51:28,420 --> 02:51:31,020
And DuckDuckGo search page here.

2760
02:51:31,020 --> 02:51:34,020
And now what happened?

2761
02:51:34,020 --> 02:51:36,020
Oh, seach.

2762
02:51:36,020 --> 02:51:37,020
Wow.

2763
02:51:37,020 --> 02:51:39,020
I'm going to seach it.

2764
02:51:39,020 --> 02:51:40,020
Great.

2765
02:51:40,020 --> 02:51:43,940
Thankfully, I had a good editor as well as some very awesome code reviewers to help point

2766
02:51:43,940 --> 02:51:47,340
that out to me before it became a problem.

2767
02:51:48,060 --> 02:51:49,060
Oh my gosh.

2768
02:51:49,060 --> 02:51:50,060
I love it.

2769
02:51:50,060 --> 02:51:52,060
Teamwork makes the dream work.

2770
02:51:52,060 --> 02:51:53,060
Okay.

2771
02:51:53,060 --> 02:51:55,420
So now I have my two fixtures.

2772
02:51:55,420 --> 02:51:58,700
And what I can do is I can come back to the test search class.

2773
02:51:58,700 --> 02:52:04,740
And instead of having to instantiate those objects every time, I can declare them as

2774
02:52:04,740 --> 02:52:06,620
fixtures for my test case.

2775
02:52:06,620 --> 02:52:10,460
So I can say I want to search page.

2776
02:52:10,460 --> 02:52:13,780
And that's going to be the DuckDuckGo search page.

2777
02:52:14,180 --> 02:52:20,220
And I can declare the result page fixture DuckDuckGo result page.

2778
02:52:20,220 --> 02:52:22,300
I don't need to directly import the fixtures.

2779
02:52:22,300 --> 02:52:27,380
PyTest has magic that it will just automatically discover it and call it.

2780
02:52:27,380 --> 02:52:28,380
But yeah.

2781
02:52:28,380 --> 02:52:32,740
And so now I've removed that extra thing from my test procedure.

2782
02:52:32,740 --> 02:52:39,380
And so my test very much is really just focusing on the interactions and the verifications.

2783
02:52:39,380 --> 02:52:44,380
And if, as you guessed it, if we run it, it should work.

2784
02:52:47,180 --> 02:52:48,180
Boom!

2785
02:52:48,180 --> 02:52:50,180
4.868 seconds.

2786
02:52:50,180 --> 02:52:51,180
That's awesome.

2787
02:52:51,180 --> 02:52:52,180
Woo.

2788
02:52:52,180 --> 02:52:53,180
Cool.

2789
02:52:53,180 --> 02:52:56,180
Awesome.

2790
02:52:56,180 --> 02:52:59,180
So any questions about that?

2791
02:52:59,180 --> 02:53:02,180
Pretty straightforward?

2792
02:53:02,180 --> 02:53:04,180
Everybody got it working?

2793
02:53:04,180 --> 02:53:06,180
Yeah, nodding heads.

2794
02:53:06,180 --> 02:53:07,180
I know.

2795
02:53:07,180 --> 02:53:08,180
Home stretch.

2796
02:53:08,180 --> 02:53:09,180
28 minutes left.

2797
02:53:09,180 --> 02:53:10,180
We got this.

2798
02:53:10,180 --> 02:53:11,180
We got this.

2799
02:53:11,180 --> 02:53:20,180
So at this point, we are pretty much finished writing the test case.

2800
02:53:20,180 --> 02:53:22,180
Good job, everybody.

2801
02:53:22,180 --> 02:53:23,180
We did it.

2802
02:53:23,180 --> 02:53:24,180
We made it.

2803
02:53:24,180 --> 02:53:30,180
Not only did we automate our first test case in Playwright, but we did it well with page

2804
02:53:30,180 --> 02:53:31,180
objects.

2805
02:53:31,180 --> 02:53:32,180
Sweet.

2806
02:53:32,180 --> 02:53:34,180
Okay.

2807
02:53:34,180 --> 02:53:35,860
So where do we go from here?

2808
02:53:35,860 --> 02:53:39,260
What I'd like to do for the rest of the time is I'd like to show you some of Playwright's

2809
02:53:39,260 --> 02:53:42,860
more advanced tricks.

2810
02:53:42,860 --> 02:53:47,860
Primarily around how you can run cross-browser testing, run in parallel.

2811
02:53:47,860 --> 02:53:51,860
What other things do I have up my sleeve?

2812
02:53:51,860 --> 02:53:53,860
Oh, parameterization maybe if we get there.

2813
02:53:53,860 --> 02:53:55,860
Oh, oh, and screenshots and stuff.

2814
02:53:55,860 --> 02:53:56,860
All right.

2815
02:53:56,860 --> 02:53:57,860
All right.

2816
02:53:57,860 --> 02:53:58,860
Here we go.

2817
02:53:58,860 --> 02:53:59,860
Here we go.

2818
02:53:59,860 --> 02:54:00,860
I'll also caveat.

2819
02:54:00,860 --> 02:54:03,860
There's more to Playwright than I can show here today.

2820
02:54:03,860 --> 02:54:05,860
The Playwright team is very active every month or two.

2821
02:54:05,860 --> 02:54:08,860
They're popping out a new release that has some awesome features.

2822
02:54:08,860 --> 02:54:11,860
Today I am not going to demo things like the trace logging.

2823
02:54:11,860 --> 02:54:17,100
I'm not going to demo the network scraping and stuff, but there's a lot of stuff out

2824
02:54:17,100 --> 02:54:22,340
there that is really awesome to learn, and the docs are very well kept up to date.

2825
02:54:22,340 --> 02:54:26,420
So I just want to show you some of the smaller, simpler things that are quick value that most

2826
02:54:26,420 --> 02:54:29,940
people get really good value out of.

2827
02:54:29,940 --> 02:54:36,620
So with that, let's scroll up the terminal here.

2828
02:54:36,620 --> 02:54:42,140
As I mentioned before, Playwright uses three browser projects.

2829
02:54:42,140 --> 02:54:45,140
What were they?

2830
02:54:45,140 --> 02:54:52,140
Chromium, Firefox, WebKit, and that covers pretty much all modern web browsers, right?

2831
02:54:52,140 --> 02:54:56,940
Chromium is the base project for Google Chrome, Microsoft Edge, and Opera.

2832
02:54:57,940 --> 02:55:02,940
Firefox, clearly, from Mozilla Firefox, and WebKit for Apple Safari.

2833
02:55:02,940 --> 02:55:05,940
So with that, you're hitting the vast majority.

2834
02:55:05,940 --> 02:55:07,940
IE, that's old, right?

2835
02:55:07,940 --> 02:55:08,940
That's deprecated.

2836
02:55:08,940 --> 02:55:09,940
We don't care about that anymore.

2837
02:55:09,940 --> 02:55:10,940
We're not going to bother with it.

2838
02:55:10,940 --> 02:55:11,940
And Playwright is just like, screw IE.

2839
02:55:11,940 --> 02:55:13,940
We're not going to add coverage, right?

2840
02:55:13,940 --> 02:55:16,940
Because we all know IE is the one that's like in the corner over there.

2841
02:55:16,940 --> 02:55:17,940
It's always giving problems.

2842
02:55:17,940 --> 02:55:20,940
If you need to test IE, sorry, can't use Playwright.

2843
02:55:20,940 --> 02:55:24,940
Unless you do, there's a way you can do it indirectly with Apple tools, which is really

2844
02:55:24,940 --> 02:55:29,940
cool, but most intensive purposes, IE, eh, no.

2845
02:55:29,940 --> 02:55:31,940
And that's okay.

2846
02:55:31,940 --> 02:55:38,940
Back about two months ago, I gave a Talkity conference about cross-browser testing.

2847
02:55:38,940 --> 02:55:41,940
And I was trying to be funny.

2848
02:55:41,940 --> 02:55:42,940
I was trying to make jokes.

2849
02:55:42,940 --> 02:55:44,940
And so it was pre-recorded video.

2850
02:55:44,940 --> 02:55:47,940
So in the video, I was naming off the different browsers.

2851
02:55:47,940 --> 02:55:51,940
I was like, you can test in Google Chrome, and the Chrome icon goes up.

2852
02:55:51,940 --> 02:55:54,940
You can test in Firefox, and the Firefox icon.

2853
02:55:54,940 --> 02:55:56,940
Apple Safari, and the compass goes up.

2854
02:55:56,940 --> 02:55:57,940
Or you could do IE.

2855
02:55:57,940 --> 02:55:58,940
And I used the poop emoji.

2856
02:55:58,940 --> 02:55:59,940
Everybody died laughing.

2857
02:55:59,940 --> 02:56:00,940
It was beautiful.

2858
02:56:00,940 --> 02:56:04,940
So anyone who had to use IE, you understand.

2859
02:56:04,940 --> 02:56:09,940
If not, count your blessings one by one, because IE, oh my gosh, there's pain.

2860
02:56:09,940 --> 02:56:10,940
There is pain.

2861
02:56:10,940 --> 02:56:11,940
It used to be that way.

2862
02:56:11,940 --> 02:56:13,940
It used to be IE was like 20 years ago, like the good thing.

2863
02:56:13,940 --> 02:56:15,940
And then it turned into the bad thing.

2864
02:56:15,940 --> 02:56:17,940
Anyway, hot takes opinions.

2865
02:56:17,940 --> 02:56:20,940
Take them for what you will.

2866
02:56:20,940 --> 02:56:23,940
So we have three browsers we can test against.

2867
02:56:23,940 --> 02:56:31,940
If we don't specify which browser to test against, by default, the plugin will use Chrome, Chromium.

2868
02:56:31,940 --> 02:56:37,940
But we could use the dash, dash browser command line option.

2869
02:56:37,940 --> 02:56:40,940
And let's say do Firefox.

2870
02:56:40,940 --> 02:56:43,940
And it will run it in Firefox.

2871
02:56:43,940 --> 02:56:45,940
Boom, look at that.

2872
02:56:45,940 --> 02:56:46,940
That wasn't Chromium.

2873
02:56:46,940 --> 02:56:47,940
That was Firefox.

2874
02:56:47,940 --> 02:56:52,940
Oh, and it's going to do the thing again.

2875
02:56:52,940 --> 02:56:57,940
Sorry, what?

2876
02:56:57,940 --> 02:56:58,940
Where?

2877
02:56:58,940 --> 02:57:03,940
I don't see.

2878
02:57:03,940 --> 02:57:06,940
Oh, that's interesting.

2879
02:57:06,940 --> 02:57:11,940
Oh, because it would be the nightly Firefox build that it sucked down and used.

2880
02:57:11,940 --> 02:57:12,940
Because it's not a browser.

2881
02:57:12,940 --> 02:57:13,940
It's a browser project.

2882
02:57:13,940 --> 02:57:19,940
Therefore, it's like open source repo that it's oh, and it did that thing again.

2883
02:57:19,940 --> 02:57:20,940
Okay.

2884
02:57:20,940 --> 02:57:22,940
Well, it did test it in Firefox.

2885
02:57:22,940 --> 02:57:24,940
Sorry about the error.

2886
02:57:24,940 --> 02:57:27,940
If I wanted to do WebKit, you guessed it, I could do this.

2887
02:57:27,940 --> 02:57:28,940
Browser WebKit.

2888
02:57:28,940 --> 02:57:30,940
Boom, boom.

2889
02:57:30,940 --> 02:57:32,940
Please don't blow up on me.

2890
02:57:32,940 --> 02:57:34,940
Oh, it's doing the thing again.

2891
02:57:34,940 --> 02:57:40,940
But you can see this is clearly WebKit and not Chromium.

2892
02:57:40,940 --> 02:57:43,940
Just X out of this and call it Dunzo.

2893
02:57:43,940 --> 02:57:49,940
Also, another cool thing is you can do multiple browsers at the same time.

2894
02:57:49,940 --> 02:57:59,940
So if I wanted to do all three at the same time, browser, Chromium, browser, Firefox.

2895
02:57:59,940 --> 02:58:01,940
I can do all three at the same time.

2896
02:58:01,940 --> 02:58:03,940
And now if you saw it, it was doing three at once.

2897
02:58:03,940 --> 02:58:05,940
Collected three items.

2898
02:58:06,940 --> 02:58:10,940
And it'll be doing them sequentially.

2899
02:58:10,940 --> 02:58:16,940
So unfortunately, because it's doing that, oh, my gosh.

2900
02:58:16,940 --> 02:58:18,940
That one's going to fail.

2901
02:58:18,940 --> 02:58:20,940
But it brings up the next one in sequence.

2902
02:58:20,940 --> 02:58:23,940
And this is Chromium.

2903
02:58:23,940 --> 02:58:26,940
And now Chromium is going to do that thing too.

2904
02:58:26,940 --> 02:58:30,940
And then, yeah, pretend it's working.

2905
02:58:30,940 --> 02:58:33,940
I'm so sorry.

2906
02:58:33,940 --> 02:58:35,940
And yeah, that's stuck too.

2907
02:58:35,940 --> 02:58:36,940
Yep, yep.

2908
02:58:36,940 --> 02:58:43,940
But you can see it spills out the three different kinds of tests it did.

2909
02:58:43,940 --> 02:58:46,940
I wonder if doing it headless might be any better.

2910
02:58:46,940 --> 02:58:50,940
Let me try that just out of curiosity.

2911
02:58:57,940 --> 02:58:58,940
Doesn't look like it.

2912
02:58:58,940 --> 02:58:59,940
Oh, yep, it did.

2913
02:58:59,940 --> 02:59:00,940
Okay, cool.

2914
02:59:00,940 --> 02:59:01,940
So that's passing now.

2915
02:59:01,940 --> 02:59:03,940
Headless is magic.

2916
02:59:05,940 --> 02:59:06,940
So I want, yeah, okay.

2917
02:59:06,940 --> 02:59:10,940
So here we can see I ran all three browsers at the same time.

2918
02:59:10,940 --> 02:59:11,940
They ran them sequentially.

2919
02:59:11,940 --> 02:59:14,940
And it only took 11 seconds.

2920
02:59:14,940 --> 02:59:16,940
That's actually really good.

2921
02:59:16,940 --> 02:59:20,940
Typical industry expectations.

2922
02:59:20,940 --> 02:59:21,940
Unit tests.

2923
02:59:21,940 --> 02:59:23,940
How fast do you think they typically run?

2924
02:59:23,940 --> 02:59:25,940
Like a single unit test.

2925
02:59:25,940 --> 02:59:26,940
Like really fast.

2926
02:59:26,940 --> 02:59:27,940
Like split second.

2927
02:59:27,940 --> 02:59:30,940
Let's say like ordered magnitude of millisecond.

2928
02:59:30,940 --> 02:59:35,940
How about like an API test where you have to make a REST API call and get a response back?

2929
02:59:35,940 --> 02:59:37,940
About a second, right?

2930
02:59:37,940 --> 02:59:39,940
One second, order of magnitude.

2931
02:59:39,940 --> 02:59:42,940
Web UI test usually takes about a minute.

2932
02:59:42,940 --> 02:59:45,940
Now, smaller the app and whatever the faster it is, maybe a little faster.

2933
02:59:45,940 --> 02:59:47,940
But order of magnitude compared to the others.

2934
02:59:47,940 --> 02:59:50,940
Like you're testing some applications.

2935
02:59:50,940 --> 02:59:55,940
Typical web tests, especially with Selenium, can be like a minute long, if not more.

2936
02:59:55,940 --> 03:00:00,940
That's what we call the rule of ones for thinking in terms of magnitude.

2937
03:00:00,940 --> 03:00:04,940
That's why we like to have more unit tests and fewer end-to-end tests.

2938
03:00:04,940 --> 03:00:07,940
But with Playwright here, this is pretty fast.

2939
03:00:07,940 --> 03:00:09,940
You know, three tests, 11 seconds.

2940
03:00:09,940 --> 03:00:14,940
If we wanted to speed this up even more, we can go parallel.

2941
03:00:14,940 --> 03:00:19,940
So for all y'all who have done testing, has anyone tried doing parallel testing?

2942
03:00:19,940 --> 03:00:20,940
Anyone?

2943
03:00:20,940 --> 03:00:22,940
No, everyone's tried to run serial.

2944
03:00:22,940 --> 03:00:23,940
Oh my goodness.

2945
03:00:23,940 --> 03:00:24,940
Okay.

2946
03:00:24,940 --> 03:00:26,940
Run your tests in parallel.

2947
03:00:26,940 --> 03:00:28,940
Please run your tests in parallel.

2948
03:00:28,940 --> 03:00:30,940
Save yourself some time.

2949
03:00:30,940 --> 03:00:35,940
When you have a well-structured architecture for your test project,

2950
03:00:35,940 --> 03:00:40,940
it should be very simple to simply flip a switch and make it parallel and have it all safe.

2951
03:00:40,940 --> 03:00:43,940
The only thing you should have to consider if you've done good coding, then,

2952
03:00:43,940 --> 03:00:48,940
is making sure shared data in your application is safe and protected too.

2953
03:00:48,940 --> 03:00:53,940
Because we're using Playwright with PyTest, every one of our tests would be independent,

2954
03:00:53,940 --> 03:00:56,940
kind of on its own little, like, own isolated little bubble.

2955
03:00:56,940 --> 03:00:59,940
Therefore, I should be able to flip a switch here, make it parallel,

2956
03:00:59,940 --> 03:01:00,940
and these tests should run no problem.

2957
03:01:00,940 --> 03:01:01,940
Right?

2958
03:01:01,940 --> 03:01:04,940
Because they're also, when they're searching .doc.gov, they're not affecting each other.

2959
03:01:04,940 --> 03:01:08,940
If you want to run in parallel, it's not a Playwright thing, it's going to be a PyTest thing.

2960
03:01:08,940 --> 03:01:09,940
Right?

2961
03:01:09,940 --> 03:01:11,940
Playwright has the concern of browser automation.

2962
03:01:11,940 --> 03:01:13,940
PyTest is the test framework.

2963
03:01:13,940 --> 03:01:15,940
We do need another package.

2964
03:01:15,940 --> 03:01:20,940
So we need to do a pip install PyTest-xdist.

2965
03:01:20,940 --> 03:01:25,940
X distribution.

2966
03:01:25,940 --> 03:01:27,940
So let's install that.

2967
03:01:27,940 --> 03:01:28,940
Boom, boom.

2968
03:01:28,940 --> 03:01:33,940
Now, what I can do for my command line, I will use the same command, still headless,

2969
03:01:33,940 --> 03:01:39,940
three browsers, but now I'm going to say dash n and give it three.

2970
03:01:39,940 --> 03:01:44,940
This means three parallel threads, or three concurrency level max three.

2971
03:01:44,940 --> 03:01:52,940
And if I run this, now it's going to run them all in parallel and hope that it doesn't do the other thing.

2972
03:01:52,940 --> 03:01:57,940
Oh, it looks like two of the browsers are hitting A-B testing.

2973
03:01:57,940 --> 03:02:01,940
Ugh.

2974
03:02:01,940 --> 03:02:04,940
If it all works, they usually go like pew, pew, pew.

2975
03:02:04,940 --> 03:02:06,940
Let me try that again.

2976
03:02:06,940 --> 03:02:08,940
Control-C.

2977
03:02:08,940 --> 03:02:11,940
True, true.

2978
03:02:11,940 --> 03:02:12,940
Come on.

2979
03:02:12,940 --> 03:02:13,940
Come on.

2980
03:02:13,940 --> 03:02:14,940
Give me magic.

2981
03:02:14,940 --> 03:02:18,940
Give me magic, please.

2982
03:02:18,940 --> 03:02:20,940
It's doing it again.

2983
03:02:20,940 --> 03:02:24,940
Yeah, it should go like pew, pew, pew, and you'd see it like three tests in five seconds instead of 11.

2984
03:02:24,940 --> 03:02:25,940
That's amazing.

2985
03:02:25,940 --> 03:02:29,940
But it looks like it's not going to do that.

2986
03:02:29,940 --> 03:02:30,940
All right.

2987
03:02:30,940 --> 03:02:37,940
I'll try headed and see what happens.

2988
03:02:37,940 --> 03:02:39,940
Boom, boom, boom.

2989
03:02:39,940 --> 03:02:40,940
One pass.

2990
03:02:40,940 --> 03:02:41,940
Who's hanging?

2991
03:02:41,940 --> 03:02:43,940
Yeah, it's going to be annoying.

2992
03:02:43,940 --> 03:02:44,940
Okay.

2993
03:02:44,940 --> 03:02:45,940
Well, just trust me on that.

2994
03:02:45,940 --> 03:02:47,940
Maybe you're getting different results on your machine.

2995
03:02:47,940 --> 03:02:53,940
I'm going to have to redo this project for the next time.

2996
03:02:53,940 --> 03:02:55,940
Oh, my gosh.

2997
03:02:55,940 --> 03:02:56,940
Geez.

2998
03:02:56,940 --> 03:02:57,940
Can't win.

2999
03:02:57,940 --> 03:02:58,940
Of course.

3000
03:02:58,940 --> 03:02:59,940
Oh, well.

3001
03:02:59,940 --> 03:03:00,940
But you get what I'm saying.

3002
03:03:00,940 --> 03:03:04,940
You can easily parallelize and do that cool thing.

3003
03:03:04,940 --> 03:03:14,940
So another cool thing you can do with Playwright from the command line is you can capture artifacts of data from your test run.

3004
03:03:14,940 --> 03:03:15,940
So think about this.

3005
03:03:15,940 --> 03:03:18,940
Like, when a test passes, everything's good.

3006
03:03:18,940 --> 03:03:19,940
You're like, okay, move on to the next one.

3007
03:03:19,940 --> 03:03:26,940
But when a test fails, you know that you as a tester, developer, whoever, is going to have to go in there and figure out why it failed.

3008
03:03:26,940 --> 03:03:27,940
Right?

3009
03:03:27,940 --> 03:03:31,940
And if all you have is like a little red X, that's not very helpful, is it?

3010
03:03:31,940 --> 03:03:32,940
What do you want?

3011
03:03:32,940 --> 03:03:36,940
You want to be able to see the page in the moment that it failed.

3012
03:03:36,940 --> 03:03:44,940
So if you can get a screenshot and look at it and be like, ah, that's what went wrong, makes your root cause analysis a lot simpler.

3013
03:03:44,940 --> 03:03:50,940
Playwright has the capability to automatically capture screenshots after tests.

3014
03:03:50,940 --> 03:03:54,940
You can also explicitly capture a screenshot at any time.

3015
03:03:54,940 --> 03:04:03,940
But from the command line to be able to say, like, upon test failure, capture it and save it for me, so much easier.

3016
03:04:03,940 --> 03:04:07,940
So to do that, I'm going to not run parallel here.

3017
03:04:07,940 --> 03:04:11,940
We'll go back to just running on Chromium.

3018
03:04:11,940 --> 03:04:16,940
To do that, I can say screenshot as a command line option.

3019
03:04:16,940 --> 03:04:21,940
And I can say on if I want to capture a screenshot after every single test pass or fail.

3020
03:04:21,940 --> 03:04:27,940
Or I can say, hold on, where is it?

3021
03:04:30,940 --> 03:04:33,940
Only dash on failure.

3022
03:04:33,940 --> 03:04:41,940
And so it will only capture a screenshot in the case it fails because, yeah, if a test is passing, do you really want the screenshot?

3023
03:04:41,940 --> 03:04:42,940
I don't know.

3024
03:04:42,940 --> 03:04:47,940
So anyway, we'll turn it on so we can just show how that happens.

3025
03:04:47,940 --> 03:04:48,940
So it runs.

3026
03:04:48,940 --> 03:04:49,940
Boom.

3027
03:04:49,940 --> 03:04:50,940
Passed. Oh, thank goodness.

3028
03:04:50,940 --> 03:04:53,940
And here, it creates a folder called test results.

3029
03:04:53,940 --> 03:04:55,940
I have my screenshot.

3030
03:04:55,940 --> 03:04:57,940
That's a little tiny.

3031
03:04:57,940 --> 03:05:04,940
But here you can see that was where the test was, or that's where the page was at the end of the test.

3032
03:05:04,940 --> 03:05:14,940
And also I should note that even though I ran it headlessly, it was still able to capture that screenshot.

3033
03:05:14,940 --> 03:05:16,940
Question.

3034
03:05:16,940 --> 03:05:17,940
Question.

3035
03:05:17,940 --> 03:05:24,940
Can you export a GIF?

3036
03:05:24,940 --> 03:05:25,940
Ooh.

3037
03:05:25,940 --> 03:05:26,940
Ooh.

3038
03:05:26,940 --> 03:05:27,940
Can I export a GIF?

3039
03:05:27,940 --> 03:05:30,940
You mean like a video?

3040
03:05:30,940 --> 03:05:31,940
Hmm.

3041
03:05:31,940 --> 03:05:34,940
Video would be so much more helpful, wouldn't it?

3042
03:05:34,940 --> 03:05:36,940
Because you see the whole progression.

3043
03:05:36,940 --> 03:05:38,940
Can I do video?

3044
03:05:38,940 --> 03:05:40,940
Yes, you can.

3045
03:05:40,940 --> 03:05:41,940
Oh, yes.

3046
03:05:41,940 --> 03:05:43,940
It's amazing.

3047
03:05:43,940 --> 03:05:45,940
So same thing.

3048
03:05:45,940 --> 03:05:48,940
Instead of screenshot, dash dash video.

3049
03:05:48,940 --> 03:06:00,940
And again, you can have it for, you know, on for everything or it's retain on failure if you only want to save the failed ones.

3050
03:06:00,940 --> 03:06:03,940
So we'll do it on just in case.

3051
03:06:03,940 --> 03:06:08,940
And so now when we run it, let's see what happens.

3052
03:06:08,940 --> 03:06:11,940
Please, please, please don't take 30 seconds.

3053
03:06:11,940 --> 03:06:13,940
It's going to take 30 seconds.

3054
03:06:13,940 --> 03:06:14,940
Well, that's okay.

3055
03:06:14,940 --> 03:06:17,940
We'll wait for the 30 seconds and see the video and watch it play for 30 seconds.

3056
03:06:17,940 --> 03:06:22,940
But yeah, it captures it in like, I think the format file is like Web 3 or something.

3057
03:06:22,940 --> 03:06:26,940
Web M. It's not MP4, which I thought was weird.

3058
03:06:26,940 --> 03:06:31,940
But I think they do it for open source reasons and compression reasons.

3059
03:06:31,940 --> 03:06:34,940
But yeah, you can automatically capture video.

3060
03:06:34,940 --> 03:06:35,940
Yes.

3061
03:06:35,940 --> 03:06:45,940
Yes, that is something you need to be careful of.

3062
03:06:45,940 --> 03:06:50,940
Yes, yes.

3063
03:06:50,940 --> 03:06:51,940
So here, test results.

3064
03:06:51,940 --> 03:06:52,940
Here's this thing.

3065
03:06:52,940 --> 03:06:55,940
I'm going to open it for reveal and finder.

3066
03:06:55,940 --> 03:06:57,940
Open. I was going to open an edge.

3067
03:06:57,940 --> 03:06:59,940
Gosh. Chrome.

3068
03:06:59,940 --> 03:07:00,940
And we can open Chromium.

3069
03:07:00,940 --> 03:07:02,940
It'll do it right.

3070
03:07:02,940 --> 03:07:04,940
Yeah. So here's the video.

3071
03:07:04,940 --> 03:07:05,940
Boom, boom.

3072
03:07:05,940 --> 03:07:08,940
And then, oh, that just wasn't loading.

3073
03:07:08,940 --> 03:07:16,940
Oh, that was probably because it was blocking me, not because of the A, B thing.

3074
03:07:16,940 --> 03:07:18,940
We're losing twice over today.

3075
03:07:18,940 --> 03:07:25,940
But anyway, this is actually a good teachable moment to show when your test fails for a bug,

3076
03:07:25,940 --> 03:07:28,940
you can easily see much more easily than a screenshot.

3077
03:07:28,940 --> 03:07:30,940
You can see the whole flow in a video.

3078
03:07:30,940 --> 03:07:34,940
And that's why video is very valuable.

3079
03:07:34,940 --> 03:07:37,940
Selenium does not do video, period.

3080
03:07:37,940 --> 03:07:38,940
Like, you have to hack something.

3081
03:07:38,940 --> 03:07:41,940
Like, you can do it, but it is a real nasty hack.

3082
03:07:41,940 --> 03:07:44,940
Playwright, it's a command line option.

3083
03:07:44,940 --> 03:07:51,940
Question?

3084
03:07:51,940 --> 03:07:52,940
Yes, yes.

3085
03:07:52,940 --> 03:07:55,940
So like I showed before from the command line, dash, dash browser.

3086
03:07:55,940 --> 03:07:57,940
You choose a browser you want to run.

3087
03:07:57,940 --> 03:08:01,940
You mean like you just say PyTest and then it'll say browser, browser, browser, wrong,

3088
03:08:01,940 --> 03:08:03,940
wrong, wrong, wrong, wrong, wrong.

3089
03:08:03,940 --> 03:08:05,940
You mean PyTest parameterization?

3090
03:08:05,940 --> 03:08:06,940
Yes.

3091
03:08:06,940 --> 03:08:13,940
So you want to hard code browser choice into your test code.

3092
03:08:13,940 --> 03:08:15,940
That is a horrible anti-pattern.

3093
03:08:15,940 --> 03:08:16,940
Do not do that.

3094
03:08:16,940 --> 03:08:18,940
I am not going to show you how to do that.

3095
03:08:18,940 --> 03:08:20,940
I know how to do that.

3096
03:08:20,940 --> 03:08:22,940
You could jury-rig it in.

3097
03:08:22,940 --> 03:08:23,940
I am not going to show you how.

3098
03:08:23,940 --> 03:08:29,940
The reason that's an anti-pattern is because tests should run the same or I shouldn't say tests.

3099
03:08:29,940 --> 03:08:32,940
Behaviors should operate the same regardless of the browser.

3100
03:08:32,940 --> 03:08:40,940
Therefore, tests should work on those behaviors regardless of the browser so long as they're supported.

3101
03:08:40,940 --> 03:08:45,940
You may have a nuance of maybe there's like something special going on for whatever.

3102
03:08:45,940 --> 03:08:46,940
That seems odd to me.

3103
03:08:46,940 --> 03:08:48,940
I would scream at my product owner for that.

3104
03:08:48,940 --> 03:08:52,940
But if it really had to go through, what I would do is when I would go launch, I would

3105
03:08:52,940 --> 03:08:55,940
use PyTest tagging and filters to control.

3106
03:08:55,940 --> 03:08:57,940
I wouldn't embed that in test code.

3107
03:08:57,940 --> 03:08:58,940
That is a horrible anti-pattern.

3108
03:08:58,940 --> 03:08:59,940
Don't do that.

3109
03:08:59,940 --> 03:09:00,940
Don't do that.

3110
03:09:00,940 --> 03:09:01,940
Please don't do that.

3111
03:09:01,940 --> 03:09:02,940
Oh, you're hurting.

3112
03:09:02,940 --> 03:09:06,940
I have heartburn now.

3113
03:09:06,940 --> 03:09:09,940
Someone has hurt me in my past with that and now you hurt me again.

3114
03:09:09,940 --> 03:09:11,940
This is injury.

3115
03:09:11,940 --> 03:09:12,940
Okay.

3116
03:09:12,940 --> 03:09:15,940
But still a good question.

3117
03:09:15,940 --> 03:09:16,940
All righty.

3118
03:09:16,940 --> 03:09:18,940
So we saw the parallelization.

3119
03:09:18,940 --> 03:09:22,940
I'm not going to actually I'm not going to show you parameters because we kind of hit

3120
03:09:22,940 --> 03:09:24,940
that with the cross browser testing.

3121
03:09:24,940 --> 03:09:25,940
Yeah.

3122
03:09:25,940 --> 03:09:26,940
Okay.

3123
03:09:26,940 --> 03:09:39,940
So the last thing I will kind of cover as part of our tutorial today, it won't be a

3124
03:09:39,940 --> 03:09:47,940
coding thing we do together, but rather a not that.

3125
03:09:47,940 --> 03:09:48,940
So I'm going to go ahead and look at the repo.

3126
03:09:48,940 --> 03:09:54,940
So I mentioned before the repository has all the example code from this project.

3127
03:09:54,940 --> 03:09:58,940
And so there are actually six chapters instead of five.

3128
03:09:58,940 --> 03:10:04,940
I originally planned this tutorial to be a five chapter tutorial.

3129
03:10:04,940 --> 03:10:07,940
Hence it's actually ending roughly on time.

3130
03:10:07,940 --> 03:10:11,940
And the sixth chapter is what I would consider a bonus chapter.

3131
03:10:11,940 --> 03:10:15,940
And the sixth chapter covers API testing.

3132
03:10:15,940 --> 03:10:21,940
One really cool thing about I should say another really cool thing about Playwright is that

3133
03:10:21,940 --> 03:10:25,940
you can do API testing as well as Web UI testing.

3134
03:10:25,940 --> 03:10:32,940
It has the ability to make requests and parse responses baked into Playwright.

3135
03:10:32,940 --> 03:10:37,940
In Python I'm fairly certain it uses requests under the hood.

3136
03:10:37,940 --> 03:10:41,940
But it's still nice to have all that context within Playwright.

3137
03:10:41,940 --> 03:10:46,940
And so what I would encourage you to do as a homework assignment is to complete part six on your own.

3138
03:10:46,940 --> 03:10:48,940
You have the project already in place.

3139
03:10:48,940 --> 03:10:50,940
You've learned all the good stuff about Playwright.

3140
03:10:50,940 --> 03:10:52,940
You need to do this.

3141
03:10:52,940 --> 03:10:55,940
I will warn you though chapter six is a bit more intense.

3142
03:10:55,940 --> 03:11:02,940
You know, parts one through five it was one simple test and basically honing this into excellence.

3143
03:11:02,940 --> 03:11:05,940
Like beating a dead horse on it almost.

3144
03:11:05,940 --> 03:11:15,940
But this one, the exercise is log into GitHub with your GitHub account, create a project board,

3145
03:11:15,940 --> 03:11:21,940
and then test creating to-do cards, dragging and dropping, editing, those kinds of things.

3146
03:11:21,940 --> 03:11:25,940
So a little more real world intense interactions.

3147
03:11:25,940 --> 03:11:32,940
And the test will step you through things like a pure API test where you simply create a new card using the API

3148
03:11:32,940 --> 03:11:34,940
and then fetch it to make sure it's good.

3149
03:11:34,940 --> 03:11:39,940
Then you do tests where it's API and UI working together.

3150
03:11:39,940 --> 03:11:46,940
Where like you drag and drop one card from the UI, but then you call the API on the back end to make sure that the change synced.

3151
03:11:46,940 --> 03:11:54,940
Highly recommend that you take this on your own because it'll be kind of like the next level up in your Playwright and your test automation skills.

3152
03:11:54,940 --> 03:11:59,940
Again, all the instructions are here for you to do.

3153
03:11:59,940 --> 03:12:06,940
So yeah, also the way I designed this tutorial was so that everything is in the repository.

3154
03:12:06,940 --> 03:12:14,940
So let's say you go back to your office and you say, oh my gosh, team, I went to PyCon and my life changed and it was awesome.

3155
03:12:14,940 --> 03:12:16,940
And now part of the Python community.

3156
03:12:16,940 --> 03:12:24,940
I took this really cool tutorial from this weird panda kid, but he had this awesome project that you can learn this too so we can make this happen here.

3157
03:12:24,940 --> 03:12:26,940
Feel free to share this with your friends.

3158
03:12:26,940 --> 03:12:32,940
Feel free to encourage people to take it on their own.

3159
03:12:32,940 --> 03:12:35,940
That can be another way to use this as a resource.

3160
03:12:35,940 --> 03:12:44,940
You can also use what we built together as the basis of a test automation project that you would want to do on your team or on your own.

3161
03:12:44,940 --> 03:12:50,940
Just delete the DuckDuckGo test and put your tests and pages in there and you're good to go.

3162
03:12:50,940 --> 03:12:54,940
So I hope that you all have found this helpful.

3163
03:12:54,940 --> 03:12:57,940
I hope that you all have found this valuable and enjoyable.

3164
03:12:57,940 --> 03:13:04,940
Before we close, are there any final questions anyone might have about anything?

3165
03:13:04,940 --> 03:13:10,940
Playwright, PyTest, Python, testing, me, other things?

3166
03:13:10,940 --> 03:13:12,940
Ask me anything, yes.

3167
03:13:12,940 --> 03:13:14,940
Yes.

3168
03:13:14,940 --> 03:13:16,940
That's a great question.

3169
03:13:16,940 --> 03:13:21,940
So our friend here in the audience said, I know that Playwright has a code generator tool.

3170
03:13:21,940 --> 03:13:25,940
Is it good? Is it worth it? Do you recommend it? And if so, how?

3171
03:13:25,940 --> 03:13:29,940
Playwright's code gen tool is actually pretty good.

3172
03:13:29,940 --> 03:13:31,940
It's actually pretty decent.

3173
03:13:31,940 --> 03:13:38,940
What you do is you basically start recording on your browser, you click through, and then it poops out a Playwright script with interactions and selectors.

3174
03:13:38,940 --> 03:13:40,940
And their selectors are okay.

3175
03:13:40,940 --> 03:13:44,940
Would I use that for my workflows? Probably not.

3176
03:13:44,940 --> 03:13:46,940
Why? Simply because I'm older.

3177
03:13:46,940 --> 03:13:48,940
I'm not a player.

3178
03:13:48,940 --> 03:13:50,940
I'm not a player.

3179
03:13:50,940 --> 03:13:52,940
I'm not a player.

3180
03:13:52,940 --> 03:13:54,940
I'm not a player.

3181
03:13:54,940 --> 03:13:57,940
Would I use that for my workflows? Probably not.

3182
03:13:57,940 --> 03:14:00,940
Why? Simply because I'm old fashioned and old school.

3183
03:14:00,940 --> 03:14:06,940
I prefer to have the page on my own, go and inspect the elements, rip them out myself.

3184
03:14:06,940 --> 03:14:10,940
But I know there are plenty of people whose workflow is, oh, I need to do a test.

3185
03:14:10,940 --> 03:14:16,940
Let me record it, export that, pop it in my project, and now I'm going to refine it from there.

3186
03:14:16,940 --> 03:14:22,940
So if you find value in doing it that way, I'd say don't let anyone stop you.

3187
03:14:22,940 --> 03:14:24,940
Great question.

3188
03:14:24,940 --> 03:14:26,940
Any other questions?

3189
03:14:30,940 --> 03:14:32,940
All righty then.

3190
03:14:32,940 --> 03:14:34,940
Well, thank you for your attention.

3191
03:14:34,940 --> 03:14:36,940
Thank you for your time.

3192
03:14:36,940 --> 03:14:38,940
Thank you for being here.

3193
03:14:38,940 --> 03:14:40,940
I really appreciate it.

3194
03:14:40,940 --> 03:14:42,940
I always love the chance to get to show people cool stuff like this.

3195
03:14:42,940 --> 03:14:44,940
So again, my name is Pandy Knight.

3196
03:14:44,940 --> 03:14:46,940
I'm the Automation Panda.

3197
03:14:46,940 --> 03:14:48,940
You can follow me on Twitter, Automation Panda.

3198
03:14:48,940 --> 03:14:50,940
Read my blog, AutomationPanda.com.

3199
03:14:50,940 --> 03:14:52,940
Ask me things any time.

3200
03:14:52,940 --> 03:14:54,940
I'm glad to help.

3201
03:14:54,940 --> 03:14:56,940
I'll be around PyCon.

3202
03:14:56,940 --> 03:14:58,940
If you want to learn more about test data, like some of the things I was mentioning before,

3203
03:14:58,940 --> 03:15:00,940
Sunday afternoon, managing the test data nightmare, I'll be speaking there.

3204
03:15:02,940 --> 03:15:04,940
And yeah, enjoy PyCon.

3205
03:15:04,940 --> 03:15:06,940
Oh, and take stickers and postcards.

3206
03:15:06,940 --> 03:15:08,940
Thank you.

