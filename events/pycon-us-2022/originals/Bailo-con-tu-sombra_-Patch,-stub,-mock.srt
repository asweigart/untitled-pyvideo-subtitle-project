1
00:00:00,000 --> 00:00:13,840
Hola, así se pueden sentar para que vayamos a comenzar la última charla de este bloque

2
00:00:13,840 --> 00:00:20,120
del segundo día de las FaiConcharlas. Muy feliz también de tener a María Andrés Viño

3
00:00:20,120 --> 00:00:24,760
con la charla titulada Bailo con tu sombra, Patch, Stub and Mock. Le damos un aplauso.

4
00:00:24,760 --> 00:00:43,560
Buenas, ¿cómo les va? Primero una pequeña presentación, yo soy María Andrés Viño.

5
00:00:43,560 --> 00:00:50,240
Me pueden encontrar como M.A. Viño en todas partes menos en GitHub, que soy María Viño.

6
00:00:50,240 --> 00:00:55,760
Pueden decirme María, no hay ningún problema. Me dedico a hacer desarrollo desde hace mucho

7
00:00:55,760 --> 00:01:02,680
tiempo y me dedicaba a hacer pericias anteriormente, di algunas charlas y ahora,

8
00:01:02,680 --> 00:01:09,920
por suerte, estoy trabajando también como backend developer. Bueno, vengo de Argentina,

9
00:01:09,920 --> 00:01:18,480
así que acá estamos con otros con nacionales. Empecemos. Primero vamos a empezar a explicar

10
00:01:18,960 --> 00:01:26,000
el por qué vamos a usar simuladores. Después vamos a explicar cómo usar Patch, que es cómo

11
00:01:26,000 --> 00:01:32,680
utilizar dentro de nuestro sistema, dentro de nuestro software, los simuladores. Después,

12
00:01:32,680 --> 00:01:38,680
dos clases de simuladores y finalmente vamos a repasar un par de librerías especiales para

13
00:01:38,680 --> 00:01:46,320
el desarrollo web en este tema. Bueno, primero que nada vamos a explicar las razones para

14
00:01:46,320 --> 00:01:53,120
testear. Siempre sabemos que un código jamás, casi nunca, no funciona después de haberlo

15
00:01:53,120 --> 00:01:59,800
escrito inmediatamente. Siempre nos olvidamos de alguna coma, algo, elegimos un nombre, una variable,

16
00:01:59,800 --> 00:02:05,440
algo. Así que siempre necesitamos testear nuestro software. Sin embargo, cuando nosotros hacemos

17
00:02:05,440 --> 00:02:09,880
nuestros primeros scripts, por supuesto, lo primero que hacemos es testearlo a mano,

18
00:02:09,880 --> 00:02:15,480
pero cuando el software empieza a crecer y empieza a tener distintas partes móviles,

19
00:02:15,480 --> 00:02:22,320
nos conviene hacer que el testeo sea parte por parte y además automatizarlo de manera completa,

20
00:02:22,320 --> 00:02:28,800
porque si no, cada vez se hace más difícil tener la seguridad a través del testeo manual de que el

21
00:02:28,800 --> 00:02:38,080
software sigue funcionando. Hay dos tipos específicos de testeo que solemos utilizar. Un tipo de

22
00:02:38,640 --> 00:02:44,840
testeo que solemos utilizar es el testeo que llamamos de integración. Un testeo de integración

23
00:02:44,840 --> 00:02:52,040
es cuando nosotros testeamos una funcionalidad completa de un sistema y después tenemos los

24
00:02:52,040 --> 00:02:58,880
testeos unitarios, que es cuando testeamos solamente pedazos, clases, módulos de un

25
00:02:58,880 --> 00:03:05,960
sistema y no una funcionalidad completa. Es decir, nosotros estamos utilizando el software

26
00:03:05,960 --> 00:03:12,760
no como lo usaría un usuario o como lo podría ver un usuario, sino como lo ve otras partes de

27
00:03:12,760 --> 00:03:20,800
nuestro sistema. Y acá entramos en por qué necesitamos simuladores. Simuladores que son,

28
00:03:20,800 --> 00:03:31,480
son objetos o bibliotecas especiales que nos sirven para simular otros objetos,

29
00:03:31,480 --> 00:03:37,240
otras clases, otras bibliotecas y que nos permiten testear nuestro sistema por partes

30
00:03:37,240 --> 00:03:45,120
o también nos permiten testear cuando nosotros tenemos un problema con alguna API que es especial,

31
00:03:45,120 --> 00:03:52,200
o sea una API que por ahí es pagada y no podemos usarla extensivamente o que no tenemos disponible

32
00:03:52,200 --> 00:03:58,400
en este momento, un hardware que a lo mejor todavía no lo tenemos disponible, para poder

33
00:03:58,880 --> 00:04:05,320
testear operaciones de entrada y salida que muchas veces son muy lentas y muy costosas y para

34
00:04:05,320 --> 00:04:10,640
testear eventos que puedan llegar a resultar improbables como por ejemplo un fallo de hardware

35
00:04:10,640 --> 00:04:17,920
o alguna situación así que nosotros no nos resulta fácil en cada una de las corridas lograr

36
00:04:17,920 --> 00:04:25,400
digamos que se que ocurre realmente. Los simuladores por lo tanto para ser útiles

37
00:04:25,960 --> 00:04:31,880
suplantando las funciones, los objetos, las bibliotecas que queremos suplantar tienen que

38
00:04:31,880 --> 00:04:38,240
ser primero predecibles. Predecibles significa que siempre tienen que dar un resultado que pueda

39
00:04:38,240 --> 00:04:46,320
resultar digamos que siempre del mismo resultado que no nos da que no dependa de otras circunstancias

40
00:04:46,320 --> 00:04:52,880
repetibles. Quiere decir de que no tenemos que hacer ninguna modificación dentro del sistema,

41
00:04:52,880 --> 00:05:00,480
es decir si un testeo modifica un archivo que está dentro del sistema nosotros tenemos que

42
00:05:00,480 --> 00:05:09,120
o asegurarnos de que el sistema vuelva nuevamente al estado original o tratar de utilizar un

43
00:05:09,120 --> 00:05:15,680
simulador del sistema de archivo para que para evitar de que ese cambio en nuestro

44
00:05:15,680 --> 00:05:22,320
sistema de archivo nos genere que el siguiente test corra de una manera completamente diferente.

45
00:05:22,960 --> 00:05:29,240
Tienen que ser veloces, esto es muy importante primero por los recursos informáticos porque

46
00:05:29,240 --> 00:05:34,680
muchas veces nosotros queremos hacer integración continua es decir queremos que se corran los test

47
00:05:34,680 --> 00:05:39,880
en la nube para asegurarnos de que cada vez que se modifica siga en un estado correcto el

48
00:05:39,880 --> 00:05:47,120
sistema y también porque si no son veloces y llevan demasiado tiempo nosotros como desarrolladores

49
00:05:47,120 --> 00:05:53,520
podemos empezar a tener fieca pocas ganas de correrlos entonces lo importante es que sean

50
00:05:53,520 --> 00:06:04,880
livianos y que sean baratos. Vamos a primero pensar cómo se parchea, uno de los errores más

51
00:06:04,880 --> 00:06:11,240
importantes que se generan al parchear es decir parchear que es parchear es cuando nosotros estamos

52
00:06:11,240 --> 00:06:16,520
en tiempo de ejecución dentro de un módulo tenemos algo que llamamos un espacio de nombres

53
00:06:16,520 --> 00:06:23,480
un espacio de nombres es un diccionario en el cual está todo lo que sé todos los objetos todos

54
00:06:23,480 --> 00:06:31,280
los símbolos que tiene este este módulo y que por lo tanto nosotros lo tenemos disponibles dentro

55
00:06:31,280 --> 00:06:38,640
del módulo. Bien cuando nosotros parcheamos lo que hacemos es modificar este diccionario para

56
00:06:38,640 --> 00:06:46,480
que en vez de ir al objeto que originalmente tenía que llamar llame al simulador que nosotros

57
00:06:46,480 --> 00:06:54,360
estamos poniendo en su lugar y que de esa manera nosotros no corramos el objeto real. Ahora un

58
00:06:54,360 --> 00:07:00,400
problema que a veces tenemos es que nosotros tenemos que elegir parchear el objeto importado

59
00:07:00,400 --> 00:07:06,840
es decir este diccionario que representa el espacio de nombres y no parchear desde donde se

60
00:07:06,840 --> 00:07:13,120
hubiera importado a ver doy dos ejemplos acá si nosotros tenemos un módulo en el cual que se

61
00:07:13,120 --> 00:07:23,440
llamaría b.py si si nosotros ponemos from a import class nosotros al parchear tenemos que

62
00:07:23,440 --> 00:07:32,160
tener en cuenta que class ya se encuentra dentro del espacio de nombres de la clase b.py del módulo

63
00:07:32,160 --> 00:07:40,800
b.py perdón módulo b.py por lo tanto el parcheo tiene que ser b.class se entiende en cambio si

64
00:07:40,800 --> 00:07:48,760
nosotros importamos directamente a todavía estamos utilizando el espacio de nombres del módulo que

65
00:07:48,760 --> 00:07:58,320
estamos importando por lo tanto el parcheo tiene que ser a.class se entiende muy bien para parchear

66
00:07:58,320 --> 00:08:04,800
tenemos que elegir un alcance es decir nosotros lo que estamos haciendo es modificar un programa en

67
00:08:04,800 --> 00:08:11,200
tiempo de ejecución ya no está corriendo exactamente como se corre en la realidad este es nuestro

68
00:08:11,200 --> 00:08:17,920
objetivo si podemos parchear entonces para parchear tenemos que definir un alcance en el cual esta

69
00:08:17,920 --> 00:08:24,560
modificación es efectuada y nosotros tenemos que tratar de que no sea por todo el programa porque

70
00:08:24,560 --> 00:08:29,840
esto puede llevar a generar que se falsifique más de lo necesario justamente uno de los valores del

71
00:08:29,840 --> 00:08:37,440
test es que sea lo más fidedigno posible a la realidad entonces ahí estamos en un equilibrio

72
00:08:37,440 --> 00:08:43,520
no es cierto entre que sea entre que sea lo más fidedigno y que tengamos que parchear porque hay

73
00:08:43,520 --> 00:08:49,600
situaciones en las que no tenemos otra opción bueno si parcheamos podemos utilizar un decorador

74
00:08:49,600 --> 00:08:55,280
un decorador lo que va a tener es el alcance de toda la función o también existen decoradores

75
00:08:55,280 --> 00:09:04,920
de clase dentro de los cuales este parcheo va a ser efectivo digamos fíjense que acá tenemos dos

76
00:09:04,920 --> 00:09:10,840
parcheos podemos sumar decoradores uno arriba de otro que van a ir poniéndose luego como los

77
00:09:10,840 --> 00:09:18,300
argumentos en el orden correspondiente muy bien también podemos utilizar lo que llamamos a

78
00:09:18,300 --> 00:09:24,540
administradores de contexto que son bueno el famoso width con el cual podemos abrir archivos

79
00:09:24,540 --> 00:09:31,340
etcétera el administrador de contexto lo que tiene es que hace que haya un close cuando se termina el

80
00:09:31,340 --> 00:09:38,060
contexto y que entonces ahí cese ese cambio en tiempo de ejecución fíjense que tenemos unas

81
00:09:38,060 --> 00:09:45,180
similitudes en cómo es la sintaxis ponemos width patch y el objeto que vamos a parchear fíjense

82
00:09:45,180 --> 00:09:52,180
que el objeto que vamos a parchear siempre se lo refiere con un string este es uno de los temas

83
00:09:52,180 --> 00:09:57,660
que es delicado en el tema de parcheo porque a veces nos equivocamos en el string y luego

84
00:09:57,660 --> 00:10:05,580
tenemos el mock que nos devuelve o sea el objeto el puntero el objeto que se creó para ese parche

85
00:10:05,780 --> 00:10:07,860
el objeto falso el simulador

86
00:10:10,740 --> 00:10:17,260
también podemos parchear manualmente es decir podemos hacer de que un parche creamos un patch

87
00:10:17,260 --> 00:10:26,100
el patch con este en este caso con el nombre patcher lo que hacemos es empezar con patcher

88
00:10:26,100 --> 00:10:34,660
estar y terminar con patcher stop se va entendiendo más o menos cómo es el tema o sea esto depende de

89
00:10:34,660 --> 00:10:40,940
cuál sea el alcance que nosotros queremos ver más o menos acá tenemos un pequeño graficito en lo

90
00:10:40,940 --> 00:10:47,660
cual se va se va explicando podemos tener decoradores de clases que te decoran una clase

91
00:10:47,660 --> 00:10:53,820
completa decorador de función administrador de contexto o si no podemos tener inicio y terminación

92
00:10:53,820 --> 00:11:00,020
manual con lo cual somos nosotros los que somos responsables de iniciar el proceso de parcheo o

93
00:11:00,020 --> 00:11:08,540
terminarlo muy bien cuáles son las desventajas que tenemos a la hora de parchear primero que

94
00:11:08,540 --> 00:11:14,380
nosotros atamos fuertemente el test al código probado es decir ya fíjense que cuando cambiamos

95
00:11:14,380 --> 00:11:20,180
la manera de importar ya podemos ya tenemos que cambiar como es el string esto significa que

96
00:11:20,180 --> 00:11:28,700
existe una fuerte conexión entre el test y el módulo que estamos testeando después que por

97
00:11:28,700 --> 00:11:33,380
supuesto introducimos modificaciones en tiempo de ejecución nosotros esto significa simplemente

98
00:11:33,380 --> 00:11:40,820
que nuestro test no es fidedigno a la realidad pero eso es algo que una necesidad que ya habíamos

99
00:11:40,820 --> 00:11:48,620
visto anteriormente y por lo tanto puede ser complejo y puede ser costoso muy bien vamos a

100
00:11:48,620 --> 00:11:55,820
ver una alternativa a la generación de patch porque también podemos utilizar simuladores sin

101
00:11:55,820 --> 00:12:01,700
utilizar patch para utilizar simuladores sin utilizar patch nosotros tenemos que utilizar

102
00:12:01,700 --> 00:12:10,100
una técnica se llama de dependencia inversa o sea en vez de utilizar digamos nosotros inyectamos

103
00:12:10,100 --> 00:12:18,540
los clases de que vamos a necesitar dentro de nuestros objetos en vez de utilizar ineritancia

104
00:12:18,540 --> 00:12:23,820
a ver vamos a ver cómo podemos ver si nosotros creamos un pequeño un pequeño está un pequeño

105
00:12:23,820 --> 00:12:30,180
falsificador acá lo que estoy explicando es una pequeña clase mínima para inyectarla por

106
00:12:30,180 --> 00:12:35,900
medio de inversión de dependencia es lo que hacemos es en vez de utilizar ineritancia en

107
00:12:35,900 --> 00:12:43,980
vez de utilizar perro hereda de animal lo que nosotros hacemos es utilizar los métodos de

108
00:12:43,980 --> 00:12:51,540
animal pero lo primero que hacemos es tenemos clase perro y ahí en el init le mandamos le mandamos

109
00:12:51,540 --> 00:12:59,060
la clase que vamos a necesitar para después usarla desde adentro o sea la dependencia de

110
00:12:59,060 --> 00:13:06,820
la dependencia inversa nos obliga a cambiar la forma en la que programamos pero bueno con eso

111
00:13:06,820 --> 00:13:14,100
podemos utilizar directamente el está animal directamente lo podemos utilizar como reemplazo

112
00:13:14,100 --> 00:13:19,300
ya que es un argumento y no necesitamos utilizar el mecanismo de patching

113
00:13:21,700 --> 00:13:28,220
muy bien ahora que ponemos dentro del patch ya estuve mostrando que podemos utilizar nuestras

114
00:13:28,220 --> 00:13:35,540
propias clases falsas estábamos clases especiales que nosotros podamos crear pero también python

115
00:13:35,540 --> 00:13:45,500
nos da dos tipos de objetos que podemos utilizar mock y magic mock es un objeto que está

116
00:13:45,500 --> 00:13:52,180
especialmente diseñado para poder utilizarse en el parcheo tiene la ventaja de que cuando uno

117
00:13:52,180 --> 00:14:00,380
llama un método cuando uno llama una función mock lo genera automáticamente es decir uno puede ir

118
00:14:00,940 --> 00:14:07,860
se va adaptando a lo que se le va pidiendo cada vez que se lo utiliza entonces este objeto

119
00:14:07,860 --> 00:14:14,620
lo creamos a través del mecanismo de parcheo o de inversión de dependencia lo metemos dentro

120
00:14:14,620 --> 00:14:19,660
de nuestro código y ahí perfect y ahí van va a llamarse todos los métodos que tengan que llamar

121
00:14:19,660 --> 00:14:27,380
ya van a estar existentes la diferencia entre mock y magic mock es que magic mock ya tiene los

122
00:14:27,380 --> 00:14:32,580
métodos lo que se llama atributos mágicos o sea que nosotros podemos agarrar y podemos

123
00:14:32,580 --> 00:14:40,620
convertir un magic mock en entero podemos ver su longitud podemos devolverlo como lista podemos

124
00:14:40,620 --> 00:14:45,740
ver si hay un objeto dentro de esto o sea hay varios atributos mágicos lo que significa que

125
00:14:45,740 --> 00:14:54,940
ya tiene la capacidad de comportarse como otros objetos python muy bien también podemos utilizar

126
00:14:55,060 --> 00:15:03,940
en mock que digamos que lo que va a retornar cuando se lo llame es decir digamos que yo quiero acá

127
00:15:03,940 --> 00:15:10,860
está el ejemplo muy simple el valor deseado es un valor de retorno y cuando nosotros llamemos

128
00:15:10,860 --> 00:15:19,900
a mo al mock lo ejecutemos el mock va a devolver este valor otra forma de devolver valores que es

129
00:15:19,900 --> 00:15:28,140
un poco más flexible es utilizar side effect side effect no solamente nos permite digamos establecer

130
00:15:28,140 --> 00:15:35,140
un único valor sino que nos permite establecer un iterable una colección entonces cada uno de

131
00:15:35,140 --> 00:15:44,460
los llamados va a tener día va a ir devolviendo cada una de las de los objetos que nosotros les

132
00:15:44,460 --> 00:15:50,340
hemos dado como argumento también tenemos con seideffer la posibilidad de que devuelva

133
00:15:50,340 --> 00:15:59,620
una excepción sí muy bien el problema con mocks es que por su diseño va creando automáticamente

134
00:15:59,620 --> 00:16:05,340
todos los elementos que vamos necesitando esto tiene un problema y es que nos puede dar una

135
00:16:05,340 --> 00:16:11,180
falsa sensación de seguridad imaginemos que nosotros hacemos dentro de nuestro código un

136
00:16:11,180 --> 00:16:19,740
pequeño error de ortografía mock va digamos al crear automáticamente los métodos va a crear

137
00:16:19,740 --> 00:16:24,700
este objeto va a este método con un error de ortografía que estamos llamando y no nos va a

138
00:16:24,700 --> 00:16:33,060
avisar absolutamente nada por lo tanto para evitar de que esto ocurra mocks nos permite hacer algo

139
00:16:33,060 --> 00:16:42,780
que se llaman specs especificaciones donde nosotros tomamos la clase real y le obligamos al mock a que

140
00:16:42,780 --> 00:16:51,020
únicamente utilice los métodos y propiedades que están dentro de esa clase real autoespec además

141
00:16:51,020 --> 00:16:57,860
tiene la capacidad de hacerlo con otros objetos que están dentro de esta clase o sea lo hace de

142
00:16:57,860 --> 00:17:04,980
forma recursiva a este mecanismo de especificar de tomar las especificaciones acá vemos por

143
00:17:04,980 --> 00:17:12,300
ejemplo que como utilizamos create autoespec cuando nosotros hacemos una llamada que no tiene

144
00:17:12,300 --> 00:17:17,540
el mismo los mismos nombres o no tienen la misma cantidad de argumentos fíjense que está esperando

145
00:17:17,540 --> 00:17:23,940
tres argumentos y nosotros le estamos pasando uno ahí da un error como se puede ver en la última

146
00:17:23,940 --> 00:17:35,180
línea bueno también podemos utilizar algo que se llama wrapping o espías nosotros en este caso

147
00:17:35,180 --> 00:17:40,500
lo que estamos haciendo es algo un poquito diferente y es decirle a la biblioteca que en

148
00:17:40,500 --> 00:17:48,740
realidad si llame a la función objeto clase que está que estamos envolviendo y esto para qué sirve

149
00:17:48,740 --> 00:17:55,740
bueno ahora vamos a ver cómo sigue nosotros podemos utilizar con mocks aserciones o sea el

150
00:17:55,740 --> 00:18:01,940
mock tiene otra capacidad que es la de ir grabando digamos ir reservando dentro de una estructura

151
00:18:01,940 --> 00:18:08,740
de datos como fue llamado y a partir de ahí podemos utilizar si un montón de aserciones que están

152
00:18:08,740 --> 00:18:16,460
preparadas para ver cómo fue utilizado como utilizó otra parte de nuestro programa este mock entonces

153
00:18:16,460 --> 00:18:22,780
podemos ver si fue llamado hay específicas aserciones específicas para si fue llamado si fue

154
00:18:22,780 --> 00:18:29,620
llamado una sola vez si nunca fue llamado si fue llamado con determinados argumentos y nosotros le

155
00:18:29,620 --> 00:18:36,900
pasamos estos argumentos si fue llamado sólo una vez con estos argumentos si alguna llamada si hubo

156
00:18:36,900 --> 00:18:43,260
si alguna vez fue llamado de una manera determinada si ha tenido llamadas incluso podemos ver el

157
00:18:43,260 --> 00:18:50,340
listado completo de llamadas y de ahí hacer como queramos las aserciones bueno para ir

158
00:18:50,340 --> 00:18:57,980
cerrando más o menos sobre el tema digamos voy a hablar respecto de dos bibliotecas especiales

159
00:18:57,980 --> 00:19:09,220
para este tema de simulación que utilizó para el para desarrollo web una biblioteca que utilizo

160
00:19:09,220 --> 00:19:21,540
para desarrollo web frecuentemente es una que se llama bcr bcr es una una digamos una biblioteca

161
00:19:21,540 --> 00:19:28,500
que nos tiene que tiene la capacidad de grabar lo que está ocurriendo acá en este gráfico yo tengo

162
00:19:28,500 --> 00:19:37,020
una una nubecita y un cuadradito la nubecita representa algún servicio web que yo estoy

163
00:19:37,020 --> 00:19:44,300
utilizando y que yo necesito dentro de mi función testear y el cuadradito está representando mi

164
00:19:44,300 --> 00:19:52,620
software yo decoró las funciones con las que voy llamando voy haciendo request y response y voy

165
00:19:52,620 --> 00:20:01,700
teniendo un diálogo con el otro sistema remoto y entonces voy decorando y lo voy grabando a todo

166
00:20:01,700 --> 00:20:09,380
esto una vez que yo quiero dejar de grabar lo que tiene de bueno es que directamente se lee y por

167
00:20:09,380 --> 00:20:20,580
lo tanto que tengo con esto que tengo con esto tengo mayor velocidad porque no tengo que estar

168
00:20:20,580 --> 00:20:25,380
dependiendo de que haya un servicio en la nube que tenga que estar alto que tenga que estar

169
00:20:25,860 --> 00:20:33,060
respondiendo inmediatamente que tenga velocidad puedo tener también la posibilidad de no

170
00:20:33,060 --> 00:20:39,620
digamos de no incurrir en costos excesivos porque a veces los ricos a veces los el uso

171
00:20:39,620 --> 00:20:45,620
de servicios externos se paga por cada vez y entonces implicaría que cada vez que yo tengo que

172
00:20:45,620 --> 00:20:52,580
probar mi software o mejorarlo voy a tener que correrlo hasta digamos varias veces hasta que

173
00:20:52,580 --> 00:20:58,900
funcione y esto además me permite tenerlo digamos tener estos tipos de funciones en

174
00:20:58,900 --> 00:21:07,700
entornos de integración continua es decir cuando yo lo pongo en jenkins o en g-hub que se yo para

175
00:21:07,700 --> 00:21:15,660
poder para poder evitar de que desde esos entornos también se llame a otros servicios en la nube

176
00:21:15,660 --> 00:21:22,340
cosa que no es para nada deseable por supuesto todo esto tiene un solo problema y es que nosotros

177
00:21:22,340 --> 00:21:29,180
tenemos que asegurarnos de que si en algún momento el la api del sistema remoto cambia

178
00:21:29,180 --> 00:21:35,340
no yo tengo que volver a correr mis digamos tengo que adecuar absolutamente todo tanto

179
00:21:35,340 --> 00:21:41,700
mi software como los test como por supuesto los cassettes esto puede también darme una falsa

180
00:21:41,700 --> 00:21:47,100
sensación de seguridad porque claro que cambia la api y sin embargo los test funcionan no no no

181
00:21:47,100 --> 00:21:51,260
funcionan en realidad funcionan con lo que yo tenía grabado que era la versión anterior

182
00:21:53,340 --> 00:22:00,980
también es importante que ustedes si alguien usa los servicios de amazon web services existe

183
00:22:00,980 --> 00:22:07,980
una biblioteca especializada para generar mocs de los servicios de amazon web services también

184
00:22:07,980 --> 00:22:14,020
se utiliza sencillamente como decoradores dentro de las funciones y bueno la diferencia está en

185
00:22:14,020 --> 00:22:19,420
que en vez de llamarse a los verdaderos servicios de amazon que son costosos lo que hacemos es

186
00:22:19,420 --> 00:22:29,140
digamos utilizar esta biblioteca y bueno con esto más o menos voy cerrando acá expliqué

187
00:22:29,140 --> 00:22:35,900
por qué si porque utilizamos simuladores básicamente por comodidad economía velocidad

188
00:22:35,900 --> 00:22:43,460
cómo utilizamos patch recuerden entonces que patch para poder utilizarse correctamente tiene

189
00:22:43,460 --> 00:22:49,820
que modificar el espacio de nombre es correcto fíjense si se está modificando el espacio de

190
00:22:49,820 --> 00:22:59,260
nombre es correcto pongan digamos un pdb o algún brick para poder ver si realmente está utilizando

191
00:22:59,260 --> 00:23:05,020
el moc que ustedes generaron cómo se usan simuladores los simuladores que tenemos

192
00:23:05,020 --> 00:23:10,380
disponibles en la biblioteca estándar y bueno simuladores que podemos hacer nosotros mismos

193
00:23:10,500 --> 00:23:14,940
y bcr y moto como alguna como caso especial en internet

194
00:23:18,100 --> 00:23:19,620
alguna pregunta

195
00:23:25,900 --> 00:23:26,500
gracias

196
00:23:40,380 --> 00:24:01,220
si si

197
00:24:10,380 --> 00:24:27,580
a ver digamos en el caso de el de bcr lo que yo estoy haciendo es a ver lo que hace la biblioteca

198
00:24:27,580 --> 00:24:38,380
realmente es que captura los pedidos a exteriores a internet y ahí es donde se donde donde ejecuta

199
00:24:38,420 --> 00:24:45,220
su magia digamos sí o sea en ricos en la biblioteca ricos y en el response que luego

200
00:24:45,220 --> 00:24:54,580
llega es donde se inyecta este sistema automáticamente está como un plugin disponible

201
00:24:54,580 --> 00:24:59,180
como un plugin para pay test se lo puedo utilizar no sé si ustedes utilizan pay test

202
00:24:59,180 --> 00:25:11,140
y bueno lo que hace básicamente es que nosotros lo que pongo es cuando corro el test digo bcr record

203
00:25:11,140 --> 00:25:22,020
tal vez tal cosa y entonces lo graba y una vez que yo saco que digamos el bcr record lo que hace es

204
00:25:22,860 --> 00:25:30,140
utilizarlo automáticamente se entiende lo que lo que está haciendo esa biblioteca guarda internamente

205
00:25:30,140 --> 00:25:38,820
un archivo con cada con digamos ciertos ciertos datos de los ricos que yo mando y los response

206
00:25:38,820 --> 00:25:47,820
que me llegan y entonces cuando yo mando el ricos lo que hace es comparar con estos archivos

207
00:25:47,940 --> 00:25:54,940
que están disponibles ver si cumplen con las características y la url correcta si es el llamado

208
00:25:54,940 --> 00:26:02,860
de forma correcta etcétera y me devuelve el response que tiene para ese rico es ya ya ya

209
00:26:02,860 --> 00:26:09,500
ya ya memorizado digamos ya grabado dentro del sistema de archivos y también puede hacerlo con

210
00:26:09,500 --> 00:26:16,580
varios con una cadena de rico es respond recuez respond si cuando falla algo manda un error

211
00:26:18,100 --> 00:26:24,260
entonces porque cumple con la función de testeo porque digamos que yo agarro y cambio la lógica

212
00:26:24,260 --> 00:26:31,580
con la cual yo genero estos ricos y rompo todo no sé mando un url incorrecto por ejemplo ahí él

213
00:26:31,660 --> 00:26:34,500
que está haciendo que estoy haciendo algo mal

214
00:26:36,140 --> 00:26:41,740
es exacto no va a encontrar va a encontrar que fue grabado de otra forma y va a avisar

215
00:26:41,740 --> 00:26:49,140
de que fue grabado de otra forma con otras características el rico es y entonces va a romperse básicamente

