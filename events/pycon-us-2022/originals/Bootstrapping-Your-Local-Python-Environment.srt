1
00:00:00,000 --> 00:00:10,760
There are a lot of you in here because this is not as simple as it may seem as many of

2
00:00:10,760 --> 00:00:14,840
you have probably found out through, like, your first attempts at setting up your computer

3
00:00:14,840 --> 00:00:20,240
or the many follow-on failed attempts, you know, decades later as a seasoned Python developer

4
00:00:20,240 --> 00:00:25,120
still trying to do this type of thing.

5
00:00:25,120 --> 00:00:27,040
So a little bit of intention setting.

6
00:00:27,040 --> 00:00:30,280
I think that's important for kicking off the talk the right way.

7
00:00:30,280 --> 00:00:36,000
For those of you who may not be familiar, there is an Easter egg in Python that gives

8
00:00:36,000 --> 00:00:40,480
you the Zen of Python if you import and run this module.

9
00:00:40,480 --> 00:00:46,640
So I recommend to anyone who I've ever taught Python to or had the pleasure of teaching

10
00:00:46,640 --> 00:00:52,520
them how to get started with Python is to print this out, put it in a frame, put it

11
00:00:52,520 --> 00:00:57,000
in your bathroom, and read it every day when you brush your teeth, a couple times a day.

12
00:00:57,000 --> 00:00:58,520
It's good for the soul.

13
00:00:58,520 --> 00:01:01,280
It's good for more than just programming and coding.

14
00:01:01,280 --> 00:01:05,760
But it helps just everyone on the same page about how we're going to think about this

15
00:01:05,760 --> 00:01:12,160
kind of a problem of getting your computer ready to be your superpower tool that is going

16
00:01:12,160 --> 00:01:17,200
to be the thing that you use day in, day out as the role of a developer or a system engineer

17
00:01:17,200 --> 00:01:21,280
or whatever the role may be where you're going to be using Python, whether you're a data

18
00:01:21,280 --> 00:01:25,280
scientist or whether you're going to be a software developer or engineer.

19
00:01:25,280 --> 00:01:26,800
This is an important one.

20
00:01:26,800 --> 00:01:31,600
And we're going to highlight a couple of these throughout the talk, and I'll get to those

21
00:01:31,600 --> 00:01:32,800
in a moment.

22
00:01:32,800 --> 00:01:36,040
But the ultimate goal here is to end up not here.

23
00:01:36,040 --> 00:01:39,680
Some of you are familiar with XKCD.

24
00:01:39,680 --> 00:01:42,240
This was in April 2018.

25
00:01:42,240 --> 00:01:46,400
Randall Munroe posted this comic admitting he had did some bad things to his computer

26
00:01:46,400 --> 00:01:47,400
at this point.

27
00:01:47,400 --> 00:01:52,040
So if you've seen this, the Python Environmental Protection Agency wants to seal it in a cement

28
00:01:52,040 --> 00:01:53,760
chamber.

29
00:01:53,760 --> 00:01:57,360
And so that was the alt text on this specific one.

30
00:01:57,360 --> 00:01:58,360
But it was funny.

31
00:01:58,360 --> 00:02:01,800
It's like there's a lot of truth in this cartoon.

32
00:02:01,800 --> 00:02:06,720
And I can tell you from being someone who's been I've used Python since the year 2000.

33
00:02:06,720 --> 00:02:11,220
Very first version of Python ever installed was version one five two.

34
00:02:11,220 --> 00:02:12,220
And all this is true.

35
00:02:12,220 --> 00:02:17,320
And I've been through all of this stuff because I've been on a Mac or on Linux or on Windows.

36
00:02:17,320 --> 00:02:19,320
And I've ended up with five different installs.

37
00:02:19,320 --> 00:02:21,160
And I'm not sure where this Python is coming from.

38
00:02:21,160 --> 00:02:23,800
I'm not sure where PIP's putting something.

39
00:02:23,800 --> 00:02:25,920
I swear I installed something in one spot.

40
00:02:25,920 --> 00:02:27,520
I go over to use it in the project.

41
00:02:27,520 --> 00:02:29,000
And it's like module not found.

42
00:02:29,000 --> 00:02:31,120
I think we all can relate.

43
00:02:31,120 --> 00:02:34,720
And actually, if you all are, you know, if there's a quick question, don't hesitate to

44
00:02:34,720 --> 00:02:35,720
like raise your hand.

45
00:02:35,720 --> 00:02:36,720
I'll make sure I repeat it back.

46
00:02:36,720 --> 00:02:41,760
But I want to avoid this situation for you all.

47
00:02:41,760 --> 00:02:44,160
Because Python does live in many places.

48
00:02:44,160 --> 00:02:47,440
It is provided by your operating system.

49
00:02:48,440 --> 00:02:53,240
So if you're on a Mac or if you're typically on Linux, those are going to have Python preinstalled.

50
00:02:53,240 --> 00:02:55,000
And I know it sounds great.

51
00:02:55,000 --> 00:02:57,840
But be warned, that may not be the one for you.

52
00:02:57,840 --> 00:02:59,720
You may have installed Python from an app store.

53
00:02:59,720 --> 00:03:04,840
So for example, if you go to the Microsoft app store, there is a shiny Python that you

54
00:03:04,840 --> 00:03:06,800
can search and install in there.

55
00:03:06,800 --> 00:03:09,160
Great way to get started as a new developer.

56
00:03:09,160 --> 00:03:10,940
But may not be the right one for you either.

57
00:03:10,940 --> 00:03:13,920
You can download an installer from Python.org.

58
00:03:13,920 --> 00:03:15,800
So there are some binary package installers.

59
00:03:15,800 --> 00:03:18,120
There are source code downloads.

60
00:03:18,120 --> 00:03:21,600
As a beginner, that is also daunting and confusing because you're not sure which one is going

61
00:03:21,600 --> 00:03:23,720
to work for you necessarily.

62
00:03:23,720 --> 00:03:25,360
Or you can be using a package manager.

63
00:03:25,360 --> 00:03:26,760
There's lots of great choices there as well.

64
00:03:26,760 --> 00:03:29,440
If you're on Debian and Ubuntu, there's apt.

65
00:03:29,440 --> 00:03:34,240
If you're on the other Linuxes, you're going to have yum or whatever the latest installers

66
00:03:34,240 --> 00:03:36,160
there may be.

67
00:03:36,160 --> 00:03:39,120
Homebrew, which is actually a personal favorite of mine, and I highly recommend it.

68
00:03:39,120 --> 00:03:42,200
And I'll be showing off some homebrew stuff in this talk.

69
00:03:42,200 --> 00:03:44,820
If you're on Windows, there's an equivalent to homebrew called chocolatey.

70
00:03:44,820 --> 00:03:49,900
And all these will give you a way to install Python onto your machine.

71
00:03:49,900 --> 00:03:53,940
And you can also have Python installed via a Python distribution.

72
00:03:53,940 --> 00:03:58,580
So if you aren't familiar, there are custom package distributions like the Anaconda Python

73
00:03:58,580 --> 00:04:03,220
or the ActiveState Python that are kind of prepackaged and supposed to give you a great

74
00:04:03,220 --> 00:04:05,140
experience out of the box.

75
00:04:05,140 --> 00:04:07,860
But if you still are confused about these kinds of things, it may not give you that

76
00:04:07,860 --> 00:04:11,140
great experience you're totally expecting.

77
00:04:11,140 --> 00:04:14,900
So why should you care about all of this at all?

78
00:04:14,900 --> 00:04:18,940
It just sounds mind-numbingly boring almost to me to think we'd have to still be dealing

79
00:04:18,940 --> 00:04:22,020
with this in the year 2022.

80
00:04:22,020 --> 00:04:23,380
But we do.

81
00:04:23,380 --> 00:04:27,180
Because we want to make sure that everyone can stay zen.

82
00:04:27,180 --> 00:04:33,780
I mentioned we were going to highlight a couple of these in a Python statements, which specifically,

83
00:04:33,780 --> 00:04:38,020
the beautiful is better than ugly, the explicit is better than implicit, and simple is better

84
00:04:38,020 --> 00:04:39,020
than complex.

85
00:04:40,020 --> 00:04:45,540
I think one of the ways, if you've ever kind of heard the term the ceiling of complexity,

86
00:04:45,540 --> 00:04:49,420
one of the ways to break through, the only way you can break through the ceiling of complexity

87
00:04:49,420 --> 00:04:50,500
is to simplify.

88
00:04:50,500 --> 00:04:54,580
So that last one is very important is to keep things simple until they can't be any more

89
00:04:54,580 --> 00:04:55,580
simple.

90
00:04:55,580 --> 00:04:58,380
And then we'll talk about that beautiful is better than ugly.

91
00:04:58,380 --> 00:05:01,340
If it feels wrong, it might be wrong.

92
00:05:01,340 --> 00:05:05,420
Kind of that smell test as a developer when you're going through and writing some code

93
00:05:05,420 --> 00:05:07,540
and you're like, this doesn't feel right.

94
00:05:07,620 --> 00:05:10,100
It's getting the job done, but I'm not sure about it.

95
00:05:10,100 --> 00:05:14,220
Same thing goes for how you're installing and using Python in your local system.

96
00:05:14,220 --> 00:05:19,580
And I'm hoping that today we can talk about improving that process, making it more consistent,

97
00:05:19,580 --> 00:05:23,900
making it more simple, making it more explicit.

98
00:05:23,900 --> 00:05:26,900
Implicit Pythons are troublesome because you don't know where they came from.

99
00:05:26,900 --> 00:05:27,900
You don't know where the PIP's going.

100
00:05:27,900 --> 00:05:30,180
You don't know where the packages are being installed into.

101
00:05:30,180 --> 00:05:34,260
So let's start off with some ground rules first.

102
00:05:34,260 --> 00:05:39,260
And quick rules that will keep you as safe as possible on your own computer.

103
00:05:39,260 --> 00:05:47,220
So again, focusing on getting this right and having that foundational base is, in my mind,

104
00:05:47,220 --> 00:05:52,060
just an important factor of the fact that this is how I make my livelihood.

105
00:05:52,060 --> 00:05:59,260
I want to have this the most awesome killer setup on my machine that just makes me as

106
00:05:59,260 --> 00:06:00,580
productive as I possibly can.

107
00:06:00,700 --> 00:06:04,860
But we're going to start off with this first rule, which is no pseudo.

108
00:06:04,860 --> 00:06:09,500
You should not have to type pseudo to do anything with Python, whether you're installing Python

109
00:06:09,500 --> 00:06:14,220
or installing a package in Python or installing some kind of add-on for Python.

110
00:06:14,220 --> 00:06:17,220
There is no reason to ever use pseudo.

111
00:06:17,220 --> 00:06:18,220
I don't care.

112
00:06:18,220 --> 00:06:19,220
No whining.

113
00:06:19,220 --> 00:06:23,460
If you're using pseudo to do something on your machine or administrative privileges

114
00:06:23,460 --> 00:06:28,300
to do something on your machine, you're probably doing something incorrect or, again, it should

115
00:06:28,340 --> 00:06:29,340
feel wrong to you.

116
00:06:29,340 --> 00:06:35,060
That smell test should tell you that something is awry if you're using pseudo.

117
00:06:35,060 --> 00:06:39,860
I mean, the reason for this is you're most likely going to be installing a Python package

118
00:06:39,860 --> 00:06:44,420
into a place that it shouldn't be, like in, for example, the system Python.

119
00:06:44,420 --> 00:06:46,300
Do not use the system Python.

120
00:06:46,300 --> 00:06:51,100
That Python that came on your computer, if you're on Linux or on Mac, that's not for

121
00:06:51,100 --> 00:06:52,100
you.

122
00:06:52,100 --> 00:06:53,100
That's not your Python.

123
00:06:53,100 --> 00:06:55,220
That Python is for use by the system itself.

124
00:06:55,260 --> 00:07:00,460
The installed OS is going to be running its own scripts and its own programs and own kind

125
00:07:00,460 --> 00:07:02,220
of cleanup tasks.

126
00:07:02,220 --> 00:07:04,380
Those are going to be using the system Python.

127
00:07:04,380 --> 00:07:08,100
If you upgrade out from underneath the system Python some package that one of those scripts

128
00:07:08,100 --> 00:07:13,460
is relying on, you could actually be making your whole computer unstable and you're heading

129
00:07:13,460 --> 00:07:20,260
for a reinstall of the system or else a really terrible cleanup.

130
00:07:20,260 --> 00:07:22,020
Don't use it for anything.

131
00:07:22,020 --> 00:07:23,500
That system Python is not for you again.

132
00:07:23,500 --> 00:07:24,500
I repeat that.

133
00:07:24,500 --> 00:07:28,300
That's not for you because that is only for the OS.

134
00:07:28,300 --> 00:07:31,540
So now I know you're saying, okay, this Python on my computer, but you're telling me I can't

135
00:07:31,540 --> 00:07:32,540
use it.

136
00:07:32,540 --> 00:07:34,580
What do I do, smart guy?

137
00:07:34,580 --> 00:07:38,380
I'm going to hopefully encourage you to start down the right path.

138
00:07:38,380 --> 00:07:42,500
I'm going to give you a couple quick tools and techniques that I find to be very, very

139
00:07:42,500 --> 00:07:43,980
useful.

140
00:07:43,980 --> 00:07:51,020
The first one is going to be Pyenv and not to be confused with Pimpenv or pip or a million

141
00:07:51,020 --> 00:07:54,220
other tools that seem to be very, really similarly named.

142
00:07:54,220 --> 00:07:59,820
Pyenv is a really, really specific nice tool that has been open sourced that allows you

143
00:07:59,820 --> 00:08:02,860
to change your global Python that you would use.

144
00:08:02,860 --> 00:08:07,020
So if you are sitting in a terminal and you type the word Python, what you expect to have

145
00:08:07,020 --> 00:08:09,980
happen would actually be launching your Python that's yours.

146
00:08:09,980 --> 00:08:12,380
You've installed through Pyenv and not the system Python.

147
00:08:12,380 --> 00:08:17,860
So right now if you didn't have Pyenv installed and you typed the word Python, you're going

148
00:08:17,860 --> 00:08:19,260
to be using the system Python.

149
00:08:19,260 --> 00:08:20,820
Again, problematic.

150
00:08:20,820 --> 00:08:24,020
You can have per project Python versions.

151
00:08:24,020 --> 00:08:27,460
As a consultant, I deal with a lot of Pythons day in and day out.

152
00:08:27,460 --> 00:08:32,020
We've got projects that are running from Python 2.7 straight through to I don't think anything

153
00:08:32,020 --> 00:08:36,860
on 3.11 yet, but definitely 3.10, the most recent stable version of Python and everything

154
00:08:36,860 --> 00:08:37,860
in between.

155
00:08:37,860 --> 00:08:39,860
We've got projects on 3.7 or 3.8, 3.9.

156
00:08:39,860 --> 00:08:45,180
I need to have an easy way to be able to install each of those and keep them clean so that

157
00:08:45,180 --> 00:08:50,080
I can now have virtual sandboxed environments so that I'm not stomping on my own self as

158
00:08:50,080 --> 00:08:53,300
I go and install dependencies for various projects.

159
00:08:53,300 --> 00:08:56,620
Then the other quick tools here.

160
00:08:56,620 --> 00:09:00,060
This works for Linux and for Mac.

161
00:09:00,060 --> 00:09:06,340
If you're on Windows, there is a Pyenv win, but I probably wouldn't recommend using it.

162
00:09:06,340 --> 00:09:10,540
I'm going to recommend something for Windows folks would be to investigate and seriously

163
00:09:10,540 --> 00:09:13,580
consider using WSL2.

164
00:09:13,580 --> 00:09:18,780
The Windows subsystem for Linux is very mature now, much faster than the original version

165
00:09:18,780 --> 00:09:19,780
of it.

166
00:09:19,780 --> 00:09:23,980
When I give you an experience that is going to line up with a lot of how-tos online where

167
00:09:23,980 --> 00:09:28,100
people are using Linux, you'll just feel like one of the gang.

168
00:09:28,100 --> 00:09:32,740
Because basically the WSL2 gives you a full Ubuntu or full Debian or whatever you installed

169
00:09:32,740 --> 00:09:35,460
as your base Linux for WSL on Windows.

170
00:09:35,460 --> 00:09:39,460
It gives you that full environment out of the box, ready to go, and you'll be able to

171
00:09:39,460 --> 00:09:43,780
do everything you would see here today just like I'm doing on my Ubuntu here.

172
00:09:43,780 --> 00:09:44,780
You can do it on Mac.

173
00:09:44,780 --> 00:09:47,700
You'll be able to do it on Windows just the same.

174
00:09:47,700 --> 00:09:50,700
You'll see this actually in action here.

175
00:09:50,700 --> 00:09:51,700
Okay.

176
00:09:51,700 --> 00:09:58,580
I've got my terminal and I have Pyenv installed, but the way to install Pyenv is going to be

177
00:09:58,580 --> 00:10:02,140
with, in my case, I use Homebrew for everything.

178
00:10:02,140 --> 00:10:05,340
If I'm on Linux, there's Linux Homebrew.

179
00:10:05,340 --> 00:10:08,340
If I'm on Mac, the Mac Homebrew installs the same.

180
00:10:08,340 --> 00:10:10,860
It has cross-platform support between the two OSs.

181
00:10:10,860 --> 00:10:15,060
If you're on Windows and you're using WSL, that will work as well because you're just

182
00:10:15,060 --> 00:10:16,060
using Linux.

183
00:10:16,060 --> 00:10:21,380
Once you've done a brew install Pyenv, that will get you all the way there.

184
00:10:21,380 --> 00:10:25,060
I already got it installed, so I don't need it.

185
00:10:25,060 --> 00:10:29,420
Once I've got Pyenv installed, I can now see if there are versions of Python that are on

186
00:10:29,420 --> 00:10:30,420
this system.

187
00:10:30,420 --> 00:10:35,140
It's going to include out of the box the system Python in consideration for a Python you would

188
00:10:35,140 --> 00:10:36,540
want to use.

189
00:10:36,540 --> 00:10:42,420
Right now, it's showing me my global Python is set to the 3.10.3, which is installed into

190
00:10:43,420 --> 00:10:46,420
a specific folder on this system, which is in my home directory.

191
00:10:46,420 --> 00:10:50,420
Then you see I've got a 3.8 version available, I've got a 3.9 version available, and I'll

192
00:10:50,420 --> 00:10:55,180
talk about those other versions up there that are named and don't have necessarily version

193
00:10:55,180 --> 00:10:56,180
numbers in them.

194
00:10:56,180 --> 00:10:57,180
They are going to be virtual environments.

195
00:10:57,180 --> 00:11:05,620
If I wanted to just type the word Python, I will get a 3.10.3 Python environment.

196
00:11:05,620 --> 00:11:07,540
That's just the one that's installed from Pyenv.

197
00:11:07,540 --> 00:11:08,540
I didn't use sudo.

198
00:11:09,460 --> 00:11:13,460
For example, if I want to install another version, for example, 3.9.4.

199
00:11:13,460 --> 00:11:24,180
3.9.4, because we've got old projects that might be using that.

200
00:11:24,180 --> 00:11:28,060
That goes in downloads from python.org and grabs all the stuff.

201
00:11:28,060 --> 00:11:32,140
If you're using Homebrew, it's going to use all the zlib and read lines so that you've

202
00:11:32,140 --> 00:11:37,360
got all the dependencies satisfied to make sure you're good to go to install Python.

203
00:11:37,360 --> 00:11:40,360
We'll come back to that window here momentarily.

204
00:11:40,360 --> 00:11:47,320
If I can find my mouse, here we go.

205
00:11:47,320 --> 00:11:53,680
We can now also do, for example, if I go onto my desktop and I've got two folders here,

206
00:11:53,680 --> 00:11:54,680
project one and project two.

207
00:11:54,680 --> 00:11:59,880
If I go into project one and I want to use a specific version of Python here as opposed

208
00:11:59,880 --> 00:12:02,520
to another version of Python, like the default Python.

209
00:12:03,520 --> 00:12:08,080
I type Python, I get 3.10.3, which is that default global.

210
00:12:08,080 --> 00:12:18,240
If I type Pyenv local and say I want to use 3.9.11, excuse me.

211
00:12:18,240 --> 00:12:22,560
You'll notice my prompt actually automatically updated over there on the right side to show

212
00:12:22,560 --> 00:12:24,400
that I'm using 3.9.11.

213
00:12:24,400 --> 00:12:27,760
Now when I type the word Python, I get 3.9.11 by default.

214
00:12:27,760 --> 00:12:29,680
I'm in full control of my environments here.

215
00:12:29,680 --> 00:12:30,840
I know where it's coming from.

216
00:12:30,840 --> 00:12:31,920
It's explicit.

217
00:12:31,920 --> 00:12:37,080
I have said I want to use this version of Python when I'm in this folder.

218
00:12:37,080 --> 00:12:41,840
If I go up a directory, you'll see that the 3.9.11 went away.

219
00:12:41,840 --> 00:12:49,040
And when I type Python back in 3.10.3, excuse me, which is also super awesome.

220
00:12:49,040 --> 00:12:53,520
So again, seeding into that directory, Pyenv is doing the magic here to automatically give

221
00:12:53,520 --> 00:12:55,200
me now 3.9.3.

222
00:12:55,200 --> 00:12:56,200
How is it doing it?

223
00:12:56,200 --> 00:12:57,920
It's no serious magic.

224
00:12:57,920 --> 00:12:58,920
It is explicit.

225
00:12:59,280 --> 00:13:03,040
It has put a Python version dot file in that folder.

226
00:13:03,040 --> 00:13:05,800
And so Pyenv is looking for that as I invoke the Python command.

227
00:13:05,800 --> 00:13:09,080
There's basically a wrapper around all the Python commands to say I'm going to use the

228
00:13:09,080 --> 00:13:14,920
version specified in that Python version, which also makes it easy to now specify across

229
00:13:14,920 --> 00:13:17,400
a project what version of Python you're using.

230
00:13:17,400 --> 00:13:19,440
Although I don't think I would do that with this Python version.

231
00:13:19,440 --> 00:13:25,520
There are better Pyproject.toml files to specify specific Python requirements for your specific

232
00:13:25,520 --> 00:13:27,760
project that we'll talk about later.

233
00:13:28,600 --> 00:13:29,600
OK.

234
00:13:29,600 --> 00:13:34,240
So that's a quick, quick intro to Pyenv and kind of the explicit over implicit.

235
00:13:34,240 --> 00:13:37,800
I can say exactly what versions of Python I want and when I want them.

236
00:13:37,800 --> 00:13:42,120
Pyenv, one of the reasons I recommend it is it has some nice plugins.

237
00:13:42,120 --> 00:13:47,240
If you are using VLIMS right now, which you should be to make sandboxes, Pyenv supports

238
00:13:47,240 --> 00:13:50,840
these out of the box and it's really snappy and easy to use.

239
00:13:50,840 --> 00:13:54,120
If you're using VirtualLemv wrapper, it supports that as well.

240
00:13:54,120 --> 00:13:57,440
Since I've started using Pyenv, I've stopped using VirtualLemv wrapper because the benefit

241
00:13:57,440 --> 00:14:01,280
of VirtualLemv wrapper was it kind of hides that virtual environment sandbox away from

242
00:14:01,280 --> 00:14:03,200
you and I don't really need it here.

243
00:14:03,200 --> 00:14:09,240
So the way you can get these plugins, if you just do brucearch pyenv.

244
00:14:09,240 --> 00:14:13,720
There you go.

245
00:14:13,720 --> 00:14:14,720
Shoot.

246
00:14:14,720 --> 00:14:15,720
Too much.

247
00:14:15,720 --> 00:14:22,120
There'll be the Pyenv recipe, but you also have the pyenv-virtualenv.

248
00:14:22,120 --> 00:14:29,640
Let's go ahead and I'm going to make a pyenv for you real quick.

249
00:14:29,640 --> 00:14:31,760
The virtual environment.

250
00:14:31,760 --> 00:14:32,760
So I'm in project one.

251
00:14:32,760 --> 00:14:36,480
I've set up this 3.9.11, but that's not actually what I want to use.

252
00:14:36,480 --> 00:14:40,800
Technically that is going to be what I consider my base install of the versions of Python.

253
00:14:40,800 --> 00:14:42,440
I don't want to mess those up.

254
00:14:42,440 --> 00:14:47,160
If I do pip freeze right here, it should be empty.

255
00:14:47,160 --> 00:14:49,120
I should have no packages installed right now.

256
00:14:49,120 --> 00:14:53,520
I've got this pristine, clean environment and I will keep it that way.

257
00:14:53,520 --> 00:15:02,760
Instead, I will do pyenv-virtualenv and we'll make another one using 3.9.11.

258
00:15:02,760 --> 00:15:04,760
I'll just call it proj1-env.

259
00:15:04,760 --> 00:15:09,480
Oops, I misspelled it.

260
00:15:09,480 --> 00:15:10,480
It doesn't matter.

261
00:15:10,480 --> 00:15:12,520
Name, we can use it for whatever we want.

262
00:15:12,520 --> 00:15:16,560
But now it still says I'm using 3.9.11.

263
00:15:16,600 --> 00:15:20,800
I need to tell this project that I want to use my specific virtual environment right

264
00:15:20,800 --> 00:15:21,800
here.

265
00:15:21,800 --> 00:15:27,640
So I'll do that pyenv local command again and I will specify proj1 with the misspelled

266
00:15:27,640 --> 00:15:30,360
evin.

267
00:15:30,360 --> 00:15:34,240
And now the prompt on the right-hand side is updated to show that I'm actually using

268
00:15:34,240 --> 00:15:35,240
a sandbox.

269
00:15:35,440 --> 00:15:49,040
If I pip install into this sandbox, for example, like requests, very popular package.

270
00:15:49,040 --> 00:15:55,480
And now if I do pip freeze, you'll see I've got four packages installed.

271
00:15:55,480 --> 00:16:04,000
If I CD up out of the directory and do pip freeze, again, clean, pristine environment.

272
00:16:04,040 --> 00:16:08,320
I'm not polluting my system Python with any packages accidentally.

273
00:16:08,320 --> 00:16:13,440
I'm being very explicit and intentional about what version of Python and what sandbox of

274
00:16:13,440 --> 00:16:14,440
this version of Python.

275
00:16:14,440 --> 00:16:18,680
So for those of you who aren't familiar, that virtual environment is really critical to

276
00:16:18,680 --> 00:16:22,680
keeping your world sandboxed off from the other projects.

277
00:16:22,680 --> 00:16:24,400
And I'll show that here right now.

278
00:16:24,400 --> 00:16:26,240
I've got another project here, project two.

279
00:16:26,240 --> 00:16:31,840
If we go into project two, I've got a requirements file in there.

280
00:16:31,840 --> 00:16:36,120
So if we look at that requirements file, it's going to install requests using an extra

281
00:16:36,120 --> 00:16:39,800
called use sharday on py3.

282
00:16:39,800 --> 00:16:42,000
So I'll do the pyenv.

283
00:16:42,000 --> 00:16:45,960
Actually, I already made a virtual environment for this one just to speed up things.

284
00:16:45,960 --> 00:16:49,280
Call it proj2, backup.

285
00:16:49,280 --> 00:16:52,800
And if I do pip freeze, it should be empty.

286
00:16:52,800 --> 00:16:54,360
Oh, no, I did install it already.

287
00:16:54,360 --> 00:17:00,440
So this is going to have the py3 sharday version of requests already installed into it.

288
00:17:00,840 --> 00:17:04,800
If I go back into project one, well, I've already done that.

289
00:17:04,800 --> 00:17:07,520
So we'll just want to dip these real quick.

290
00:17:14,320 --> 00:17:16,840
Well, I'll just go into project one.

291
00:17:16,840 --> 00:17:22,400
We'll do pip freeze to compare it to the one that's up there right above it.

292
00:17:25,200 --> 00:17:28,920
Like the joys of live demoing, right?

293
00:17:29,000 --> 00:17:36,040
So you'll see there's a difference here that sharday version four is missing from the bottom

294
00:17:36,040 --> 00:17:39,880
one where it was included in the top one up here.

295
00:17:39,880 --> 00:17:40,880
Oops.

296
00:17:42,280 --> 00:17:43,280
Oh, I scrolled too far.

297
00:17:43,280 --> 00:17:44,280
There it is.

298
00:17:44,280 --> 00:17:48,280
This line right here is missing in the bottom one because I've installed them in two different

299
00:17:48,280 --> 00:17:49,280
ways.

300
00:17:49,280 --> 00:17:52,440
I installed the same package in two different ways because I may have two projects that

301
00:17:52,440 --> 00:17:58,400
need to use those kind of subtle differences between having maybe a different version of

302
00:17:58,480 --> 00:18:02,840
requests installed in one versus another because maybe you've not run your full regression

303
00:18:02,840 --> 00:18:06,920
tests against your code with an upgraded version of requests.

304
00:18:06,920 --> 00:18:10,760
So you may be working between two projects where you need to maintain two different versions

305
00:18:10,760 --> 00:18:14,320
of the same package even across those two spots.

306
00:18:14,320 --> 00:18:20,920
And so pipenv plus, I'm sorry, pyenv plus the virtual environment plugin makes this

307
00:18:20,920 --> 00:18:25,080
like just super seamless because you can now CD between the directories.

308
00:18:25,120 --> 00:18:29,560
So you're not activating, deactivating, and forgetting because sometimes the biggest problem

309
00:18:29,560 --> 00:18:32,240
I always have with virtual environments is I would forget to deactivate.

310
00:18:32,240 --> 00:18:34,000
I'd CD into another directory for another project.

311
00:18:34,000 --> 00:18:38,040
I would pip install something and it would end up over in the other virtual environment

312
00:18:38,040 --> 00:18:40,680
and I'm like and then nothing works.

313
00:18:40,680 --> 00:18:45,640
So to solve that problem, Python has a nice environment injection that basically CDs in

314
00:18:45,640 --> 00:18:47,800
and out and lets you do that real quick.

315
00:18:47,800 --> 00:18:53,480
So that is that part of this.

316
00:18:53,480 --> 00:18:58,640
Now if you have simpler needs where maybe you aren't just wanting to go down the whole

317
00:18:58,640 --> 00:19:08,840
pyenv path, since Python 3.3, Python has included bundled in it kind of a simplified version

318
00:19:08,840 --> 00:19:11,200
of virtualenv called venv.

319
00:19:11,200 --> 00:19:16,200
And so if you were to invoke Python with a minus m venv which basically says I want to

320
00:19:16,200 --> 00:19:19,120
run the module venv that's packaged inside of Python.

321
00:19:19,120 --> 00:19:20,280
You can do the same thing with pip.

322
00:19:20,280 --> 00:19:25,200
So if you run Python minus m pip, it will run the packaged version of pip that is in

323
00:19:25,200 --> 00:19:29,080
the Python interpreter you're dealing with directly as opposed to maybe some random pip

324
00:19:29,080 --> 00:19:30,360
that's in your path.

325
00:19:30,360 --> 00:19:34,480
So kind of a surefire way to make sure you're getting a virtual environment for the version

326
00:19:34,480 --> 00:19:39,120
of Python you're currently running is to run minus m venv like that and it will use the

327
00:19:39,120 --> 00:19:44,000
included virtualenv which is kind of a stripped down linear version of the standard virtual

328
00:19:44,000 --> 00:19:50,120
environment package to give you a venv called venv in this case.

329
00:19:50,960 --> 00:19:52,960
Now, some side notes here.

330
00:19:52,960 --> 00:19:54,760
Sometimes you've got tools you want to get installed.

331
00:19:54,760 --> 00:19:59,960
Like you want to use black and you want to use docker compose or HTTPX or all these kind

332
00:19:59,960 --> 00:20:04,000
of cool Python command line tools.

333
00:20:04,000 --> 00:20:08,200
How do you manage those various tools like that?

334
00:20:08,200 --> 00:20:11,040
So I recommend to folks to use pipx.

335
00:20:11,040 --> 00:20:16,560
If you've not checked out pipx, it is super awesome, super easy to use and it will greatly

336
00:20:16,560 --> 00:20:20,000
simplify your life being able to install these kinds of tools.

337
00:20:20,880 --> 00:20:21,880
So let's look real quick here.

338
00:20:21,880 --> 00:20:23,880
I'm going to go to my home directory.

339
00:20:23,880 --> 00:20:26,320
I already have pipx installed.

340
00:20:26,320 --> 00:20:31,760
But for example, if I want to use who's here with HTTP, it's an awesome tool for messing

341
00:20:31,760 --> 00:20:36,280
around with APIs and calling, making get requests and post requests and kind of a replacement

342
00:20:36,280 --> 00:20:40,360
for curl but it does some cooler stuff like it will give you colorized output.

343
00:20:40,360 --> 00:20:45,760
Normally it has a command called HTTP and when you ran it, you would invoke HTTP from

344
00:20:45,760 --> 00:20:47,760
the command line.

345
00:20:48,520 --> 00:20:55,280
The instructions may tell you to pip install HTTP but I'll implore you to install pipx

346
00:20:55,280 --> 00:21:00,160
first and do pipx install HTTP.

347
00:21:00,160 --> 00:21:03,880
And this is going to create in the background for you another little virtual environment

348
00:21:03,880 --> 00:21:06,920
sandboxed away that you don't see, you don't have to deal with.

349
00:21:06,920 --> 00:21:10,600
And then it's going to inject these three, in this case for HTTP, it's going to inject

350
00:21:10,600 --> 00:21:13,560
these three commands into your path automatically.

351
00:21:13,560 --> 00:21:16,600
So now you saw before where I typed in HTTP.

352
00:21:16,600 --> 00:21:27,560
Now if I type HTTP, it's green and I can go ahead and grab a URL maybe.

353
00:21:27,560 --> 00:21:28,560
There we go.

354
00:21:28,560 --> 00:21:29,560
And there you go.

355
00:21:29,560 --> 00:21:34,560
There's obviously a redirect to HTTPS because it's all good websites should be HTTPS.

356
00:21:34,560 --> 00:21:35,560
That one doesn't.

357
00:21:35,560 --> 00:21:38,000
Now you see it's all colorized and pretty.

358
00:21:38,000 --> 00:21:40,120
HTTP is an awesome tool.

359
00:21:40,120 --> 00:21:42,440
But install it into my system Python.

360
00:21:42,440 --> 00:21:44,160
I didn't use sudo to install it.

361
00:21:44,200 --> 00:21:47,760
I didn't even install it using like a user flag which I'll talk about here in a second.

362
00:21:47,760 --> 00:21:53,920
I've installed into its own little environment that is now managed just by pipx.

363
00:21:53,920 --> 00:21:59,640
So tools like you see here I've got black, isort, pipenv, watchdog which has a watch

364
00:21:59,640 --> 00:22:01,400
me do thing.

365
00:22:01,400 --> 00:22:06,240
Cool command line tools like that totally deserve to be installed via pipx and not put

366
00:22:06,240 --> 00:22:10,600
into a virtual environment or into some other kind of non-standard place.

367
00:22:10,600 --> 00:22:13,200
There's a good consistent way to do this.

368
00:22:13,880 --> 00:22:15,880
So that was pipx.

369
00:22:15,880 --> 00:22:16,880
The kind of pipx.

370
00:22:16,880 --> 00:22:19,600
Let's do some damage I just showed you that.

371
00:22:19,600 --> 00:22:20,600
All right.

372
00:22:20,600 --> 00:22:25,160
And I mentioned this just briefly and if you didn't catch it, what about this user scheme?

373
00:22:25,160 --> 00:22:32,520
There is in Python the ability to pip install packages with a dash dash user flag there.

374
00:22:32,520 --> 00:22:35,240
And this allows you to install without using sudo.

375
00:22:35,240 --> 00:22:37,400
So you're following like my number one rule.

376
00:22:37,400 --> 00:22:39,320
Don't install using sudo.

377
00:22:40,240 --> 00:22:48,800
But you're installing into a Python environment or location in your home directory that basically

378
00:22:48,800 --> 00:22:51,400
gives you one version of whatever you just installed.

379
00:22:51,400 --> 00:22:56,920
So if you're using requests 23 and you need request 22 for another project, using this

380
00:22:56,920 --> 00:23:04,560
pip install dash dash user, you know, request sql 22, you know, 0.22, will end up overriding

381
00:23:04,560 --> 00:23:09,040
the already installed version because basically it's just one little sandbox thing.

382
00:23:09,400 --> 00:23:13,080
I find this just again confusing for folks who have never seen it.

383
00:23:13,080 --> 00:23:17,840
It may be an allure or a way to like not use sudo to install a package, but you may end

384
00:23:17,840 --> 00:23:23,640
up with, for example, if I installed HTTP into with the user scheme and then I proceeded

385
00:23:23,640 --> 00:23:27,560
to install another tool that had a conflicting version of a dependency using the user scheme,

386
00:23:27,560 --> 00:23:30,640
I would break my HTTP and no longer have the working script.

387
00:23:30,640 --> 00:23:34,320
So again, not a good place to be installing packages.

388
00:23:34,320 --> 00:23:37,600
Leverage tools like pipx for installing command-link tools because it keeps them all separate.

389
00:23:37,600 --> 00:23:40,880
They all have their own dependencies, no conflicts there.

390
00:23:40,880 --> 00:23:43,320
And when you're using your projects, make sure you're using the virtual environments

391
00:23:43,320 --> 00:23:44,320
from pyamp.

392
00:23:44,320 --> 00:23:47,640
But what about, I know there's so many options out there, right?

393
00:23:47,640 --> 00:23:49,080
This is the mind blowing part about Python.

394
00:23:49,080 --> 00:23:52,680
What makes it so hard, you know, what about Anaconda Python and Conda?

395
00:23:52,680 --> 00:23:56,360
The kind of data science folks would be more familiar with the Conda package manager.

396
00:23:56,360 --> 00:24:00,720
It's like, there's just, again, too many options.

397
00:24:00,720 --> 00:24:04,400
ActiveState Python, pipm, you used to kind of have a tool that was in favor and then

398
00:24:04,400 --> 00:24:06,600
kind of fell out of favor because of performance issues.

399
00:24:06,600 --> 00:24:08,240
It was interesting in the beginning.

400
00:24:08,240 --> 00:24:15,080
ASDF is a very similar tool to pyenv in that it can install multiple versions of a language,

401
00:24:15,080 --> 00:24:16,080
any language actually.

402
00:24:16,080 --> 00:24:19,360
You can use it with Rust or with Ruby or Python.

403
00:24:19,360 --> 00:24:23,920
But it doesn't have the same plug-in environment that the pyenv one does have for doing Python

404
00:24:23,920 --> 00:24:24,920
specific work.

405
00:24:24,920 --> 00:24:30,800
For example, having that virtual element plug-in or the C cache plug-in for speeding up builds.

406
00:24:30,800 --> 00:24:33,260
Poetry is a great tool if you're building libraries.

407
00:24:33,260 --> 00:24:38,300
But as a new person to Python or if you're just trying to get work done and you're not

408
00:24:38,300 --> 00:24:43,540
developing specifically on a library, I wouldn't recommend necessarily starting off there because

409
00:24:43,540 --> 00:24:49,540
there's going to be an extra overhead of all the kind of poetry dance and protocol and

410
00:24:49,540 --> 00:24:53,100
commands and APIs that you would need to use.

411
00:24:53,100 --> 00:24:59,860
PDM, another Python package manager, kind of maybe less popular than say something like

412
00:24:59,860 --> 00:25:00,860
pyenv.

413
00:25:00,860 --> 00:25:05,900
And then pyproject.toml is also another place where you can specify dependencies for your

414
00:25:05,900 --> 00:25:06,900
project.

415
00:25:06,900 --> 00:25:10,100
And some tools like poetry, for example, would use that for understanding what your dependencies

416
00:25:10,100 --> 00:25:11,100
are.

417
00:25:11,100 --> 00:25:15,180
I think there's a lot of promise for using pyproject.toml files.

418
00:25:15,180 --> 00:25:18,180
I think there's a PEP right now that I don't think has been approved.

419
00:25:18,180 --> 00:25:23,620
But look for more to come there around build tools in Python and using that pyproject.toml

420
00:25:23,620 --> 00:25:28,980
file instead of a requirements.txt file.

421
00:25:29,100 --> 00:25:32,820
So, all that said, I just want repeatability and simplicity.

422
00:25:32,820 --> 00:25:36,300
I want this thing to be simple and easy, kind of like Zen of Python.

423
00:25:36,300 --> 00:25:41,620
I want to be a Zen Python master and I want to follow that simple is better than complex

424
00:25:41,620 --> 00:25:43,540
line of the Zen of Python.

425
00:25:43,540 --> 00:25:48,300
One of the tools I'll highly recommend to folks is going to be piptools package.

426
00:25:48,300 --> 00:25:53,980
If you've not installed piptools, it has a piptools compile command built into it that

427
00:25:53,980 --> 00:25:57,020
will allow me to manage my dependencies for my project.

428
00:25:57,060 --> 00:26:00,860
So, if I'm working on a Django project and I got a specific version of Django, specific

429
00:26:00,860 --> 00:26:05,380
version of requests, specific version of this and that, piptools allows me to specify my

430
00:26:05,380 --> 00:26:10,420
main dependencies that I'm using in the project as opposed to every dependency I'm using in

431
00:26:10,420 --> 00:26:11,420
the project.

432
00:26:11,420 --> 00:26:18,380
Who here has had a requirements file where it's just gotten like 200, 300 lines long

433
00:26:18,380 --> 00:26:23,820
and it's got every version penned, but there's always moving dependencies underneath the

434
00:26:23,820 --> 00:26:24,820
covers.

435
00:26:24,900 --> 00:26:29,740
One tool upgrades one dependency, you want to make sure you grab all of its recommended

436
00:26:29,740 --> 00:26:30,740
dependencies.

437
00:26:30,740 --> 00:26:35,060
You also want to make sure you're able to easily grab security fixes, performance fixes,

438
00:26:35,060 --> 00:26:39,940
bug fixes that are coming in very minor versions of these dependencies.

439
00:26:39,940 --> 00:26:44,420
So managing dependencies can be really tricky, especially if you're trying to pin them all.

440
00:26:44,420 --> 00:26:46,940
Maybe everyone doesn't know what I mean when I say pinning dependencies.

441
00:26:46,940 --> 00:26:51,340
If I look at, I've got an example.

442
00:27:04,340 --> 00:27:05,340
Yeah, there we go.

443
00:27:08,140 --> 00:27:12,580
Here's a requirements file that has got all the dependencies for this Python script specified

444
00:27:12,780 --> 00:27:17,340
and it's using a double equals to say whenever you pip install, always grab exactly that

445
00:27:17,340 --> 00:27:21,300
version and exactly that version and exactly this version because any other ones may not

446
00:27:21,300 --> 00:27:23,340
work.

447
00:27:23,340 --> 00:27:27,020
This will work most of the time and we want something that works all the time so we get

448
00:27:27,020 --> 00:27:33,900
that repeatability and scalability, simplicity of being able to install and know that our

449
00:27:33,900 --> 00:27:38,140
six months from now, when I come back to this project, it will run again.

450
00:27:38,140 --> 00:27:41,780
It is a common problem we've all had.

451
00:27:41,780 --> 00:27:46,860
You go update the dependencies, something has broken, maybe a minor dependency happened

452
00:27:46,860 --> 00:27:53,180
or worse yet, you probably heard in the news a lot of the supply chain security issues

453
00:27:53,180 --> 00:27:56,020
that come along with using some of these packages.

454
00:27:56,020 --> 00:27:58,900
You want to make sure you're getting the exact same package you got six months ago.

455
00:27:58,900 --> 00:28:00,940
So pip tool solves this problem.

456
00:28:00,940 --> 00:28:04,740
I won't have full time to necessarily demo all of it but it basically solves this problem

457
00:28:04,740 --> 00:28:09,300
by taking the cryptographic hashes of the various packages and the wheels that are on

458
00:28:09,380 --> 00:28:13,900
PyPy and comparing those against the last time you installed it.

459
00:28:13,900 --> 00:28:21,340
Pip tools allows me to manage instead of saying you see requests right here, 2.25.1.

460
00:28:21,340 --> 00:28:26,420
Request has sub-dependencies which we saw in the previous demo of Charday and Certify

461
00:28:26,420 --> 00:28:27,420
and IDNA.

462
00:28:27,420 --> 00:28:30,380
I don't want to necessarily specify those.

463
00:28:30,380 --> 00:28:36,100
I want to rely on requests to manage what he knows about its dependencies.

464
00:28:36,100 --> 00:28:43,820
So I will only specify that requests is going to say this is my version of requests I want

465
00:28:43,820 --> 00:28:48,060
and requests will specify the other versions but if I want to repeat it, the pip tools

466
00:28:48,060 --> 00:28:51,860
will actually output all the hashes for me into another file where I can get exactly

467
00:28:51,860 --> 00:28:53,580
the same thing over again.

468
00:28:53,580 --> 00:28:57,900
I think with that I am kind of heading toward the end here.

469
00:28:57,900 --> 00:29:01,060
One last thing if you really want really, really repeatable, it's going to be Docker

470
00:29:01,060 --> 00:29:02,620
and pip tools.

471
00:29:02,860 --> 00:29:07,660
Using Docker containers to really solidify and shore up exactly what version of Python

472
00:29:07,660 --> 00:29:11,460
you are using is a great way to make sure you get exactly the same build over again

473
00:29:11,460 --> 00:29:15,500
and you can come back to it a year later and rerun that container without having to worry

474
00:29:15,500 --> 00:29:19,580
about installing things on your system to get things running again.

475
00:29:19,580 --> 00:29:24,020
If you all have questions, I will be at the JetBrains booth in the expo hall right after

476
00:29:24,020 --> 00:29:28,400
this so feel free to come down and pick my brain about setting up your system and building

477
00:29:28,400 --> 00:29:31,060
your awesome killer workstation.

478
00:29:31,060 --> 00:29:32,060
Thank you all for being here.

