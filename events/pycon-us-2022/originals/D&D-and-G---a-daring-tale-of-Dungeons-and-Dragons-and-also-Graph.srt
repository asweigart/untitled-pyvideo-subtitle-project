1
00:00:00,000 --> 00:00:07,400
Hello everyone, welcome back.

2
00:00:07,400 --> 00:00:14,280
So we have second talk of the day, D&D and G, a Dating Tale of Dungans and Dragons and

3
00:00:14,280 --> 00:00:16,880
also Grabs by Mohammed Adar.

4
00:00:16,880 --> 00:00:20,640
Over to you, Mohammed.

5
00:00:20,640 --> 00:00:23,200
Hey everybody.

6
00:00:23,200 --> 00:00:27,760
Thanks for being patient with me.

7
00:00:28,000 --> 00:00:31,200
It's hard to stand.

8
00:00:31,200 --> 00:00:33,440
I'm usually not this rude.

9
00:00:33,440 --> 00:00:35,520
Let's go ahead and get started.

10
00:00:35,520 --> 00:00:42,120
Yeah, so since I have mostly spent my career in large corporations and my brain is broken,

11
00:00:42,120 --> 00:00:44,560
I have to give you an agenda.

12
00:00:44,560 --> 00:00:49,840
We're just going to really quickly talk about myself, do some level setting about where

13
00:00:49,840 --> 00:00:55,200
you guys are at, and then I'm going to very briefly introduce graphs and why they're really

14
00:00:55,200 --> 00:00:57,560
cool and why they matter.

15
00:00:57,600 --> 00:01:02,520
And then I'm going to talk about a handful of algorithms that I've divided into three

16
00:01:02,520 --> 00:01:04,920
different classes.

17
00:01:04,920 --> 00:01:08,400
So yeah, let's go ahead and dive in.

18
00:01:08,400 --> 00:01:12,880
If you want to follow along in this presentation, you can check out my link tree.

19
00:01:12,880 --> 00:01:19,800
It's just Mohammed Adar and it's got a link to a PDF of the presentation and some other

20
00:01:19,800 --> 00:01:20,800
stuff.

21
00:01:20,800 --> 00:01:24,920
I'll be adding to that so, you know, check back occasionally.

22
00:01:24,920 --> 00:01:30,640
So yeah, amongst my many, many interests, I really think graphs are neat.

23
00:01:30,640 --> 00:01:32,560
Obviously, I like Python.

24
00:01:32,560 --> 00:01:39,240
I like drawing and DMing sometimes, so this is a nice little intersection of all of those.

25
00:01:39,240 --> 00:01:43,080
About you, hopefully you've got some programming under your belt.

26
00:01:43,080 --> 00:01:47,100
This isn't going to be a real coding heavy presentation, so that should be all right.

27
00:01:47,100 --> 00:01:53,920
If you don't, hopefully you're familiar with maps or dictionaries in Python.

28
00:01:53,920 --> 00:01:59,720
Real basic object oriented stuff, nothing too hardcore there.

29
00:01:59,720 --> 00:02:02,160
There will be some matrices here.

30
00:02:02,160 --> 00:02:04,400
If you aren't familiar with those, don't worry.

31
00:02:04,400 --> 00:02:09,280
You can always circle back to them and learn them later or just don't use them and use

32
00:02:09,280 --> 00:02:13,120
something else because graphs are flexible like that.

33
00:02:13,120 --> 00:02:20,480
So people who are familiar with graphs may recognize this map of the city of Konigsberg.

34
00:02:21,160 --> 00:02:28,960
That's a classic problem in graph theory that presented a city separated by a river and

35
00:02:28,960 --> 00:02:32,320
in between the river, or in the river there are two land masses.

36
00:02:32,320 --> 00:02:35,840
That's four land masses connected by seven bridges.

37
00:02:35,840 --> 00:02:43,640
The question was, can you take a tour of the city and cross each bridge exactly once?

38
00:02:43,640 --> 00:02:48,840
I'd rather motivate graphs by asking you about your friend group.

39
00:02:48,840 --> 00:02:55,480
If I was to ask you about your friend group, you probably wouldn't tell me a bullet point

40
00:02:55,480 --> 00:03:00,600
list of their name and date of birth and height and stuff like that.

41
00:03:00,600 --> 00:03:09,320
You're more likely going to tell me a story of something like, oh, this is my friend Alice

42
00:03:09,320 --> 00:03:17,320
who I met through our mutual friend Bob at a party thrown by Claire where I lost a whole

43
00:03:17,400 --> 00:03:21,880
bunch of money to my friend Dan and Ellen.

44
00:03:21,880 --> 00:03:30,160
What that is, is you're describing these people and the relationships you have with those

45
00:03:30,160 --> 00:03:31,160
people.

46
00:03:31,160 --> 00:03:36,960
That's what's really exciting about graphs is there are data structures that can codify

47
00:03:36,960 --> 00:03:41,760
systems as entities and relationships.

48
00:03:41,760 --> 00:03:48,160
A lot of other data structures purport to do that, but graphs treat these relationships

49
00:03:48,160 --> 00:03:53,920
as first class members and that's where their strength really lies.

50
00:03:53,920 --> 00:04:00,160
Two special relationships that they can encode particularly well are directional relationships

51
00:04:00,160 --> 00:04:05,840
where, for example, a friendship type of relationship is two directional.

52
00:04:05,840 --> 00:04:10,440
If you're friends with someone, you assume they're friends with you, but if you're following

53
00:04:10,600 --> 00:04:16,400
someone, say on Twitter or something like that, then they don't necessarily have to

54
00:04:16,400 --> 00:04:17,800
follow you.

55
00:04:17,800 --> 00:04:23,040
That's where graphs are really useful as far as encoding directional relationships.

56
00:04:23,040 --> 00:04:25,960
There's also transitive relationships.

57
00:04:25,960 --> 00:04:32,480
The example I like to use to motivate this is if an ad company made a viral video and

58
00:04:32,480 --> 00:04:35,560
then paid to put it up on Twitter.

59
00:04:36,200 --> 00:04:41,160
If you really liked it and you retweeted it, but you weren't really in the market for their

60
00:04:41,160 --> 00:04:46,560
product, that ad campaign is a failure using classic analytics.

61
00:04:46,560 --> 00:04:52,800
If you dig a little deeper into this, your friend may have seen the video, been in the

62
00:04:52,800 --> 00:04:57,080
market for that product and bought it.

63
00:04:57,080 --> 00:05:02,060
You can use graph analytics to encode those transitive relationships and dig a little

64
00:05:02,140 --> 00:05:09,140
deeper into the success or failure of any particular ad campaign or other relationships.

65
00:05:09,140 --> 00:05:13,020
This is a more classic illustration of a graph.

66
00:05:13,020 --> 00:05:17,420
The more formal definition is that a graph is a collection of nodes and edges.

67
00:05:17,420 --> 00:05:22,940
Nodes are just the fundamental atomic unit in a graph, and then edges are pairs of nodes

68
00:05:22,940 --> 00:05:25,860
that represent a connection between them.

69
00:05:26,420 --> 00:05:33,140
For example, we have node A, C, B, and D here.

70
00:05:33,140 --> 00:05:34,340
We have edges between them.

71
00:05:34,340 --> 00:05:37,420
We can also have directed edges.

72
00:05:37,420 --> 00:05:43,160
That's just in a directed graph and your edges would have to be ordered pairs then.

73
00:05:43,160 --> 00:05:48,440
One thing I really want to talk about but couldn't figure out how to wedge into this

74
00:05:48,440 --> 00:05:50,580
presentation is pads and sub-graphs.

75
00:05:50,580 --> 00:05:52,140
They're really useful tools.

76
00:05:52,140 --> 00:05:56,060
If you're doing graph analytics, you'll definitely want to be familiar with that.

77
00:05:56,060 --> 00:05:57,780
A path is just what it sounds like.

78
00:05:57,780 --> 00:06:02,780
It's just a collection of nodes.

79
00:06:02,780 --> 00:06:12,160
You get a starting node and an ending node, and you get a path through other nodes to

80
00:06:12,160 --> 00:06:13,980
get to that ending node.

81
00:06:13,980 --> 00:06:19,300
Then a sub-graph is just a portion of a graph.

82
00:06:19,300 --> 00:06:23,540
These will be really useful if you ever do graph analytics more.

83
00:06:23,540 --> 00:06:29,420
The last little awkward thing that I want to cover is labels, which are a way to describe

84
00:06:29,420 --> 00:06:30,940
the class of a node.

85
00:06:30,940 --> 00:06:36,620
For example, in this graph, we've got either servers or clients, and that's a label.

86
00:06:36,620 --> 00:06:40,660
You can also add a property to any graph, and that's any other information.

87
00:06:40,660 --> 00:06:44,920
That's where the real strength of graphs comes in, because you can add a name or a model

88
00:06:45,920 --> 00:06:51,080
free space on a particular machine, or the latency between two machines and stuff like

89
00:06:51,080 --> 00:06:58,000
that, and really start doing some really cool analytics and exploit your data a little further.

90
00:06:58,000 --> 00:07:00,900
As far as applications, they're everywhere.

91
00:07:00,900 --> 00:07:04,560
If you're here, hopefully you're already excited about that, but you've probably seen them

92
00:07:04,560 --> 00:07:11,560
in maps, social networks, puzzle solving in state spaces, disease propagation, community

93
00:07:11,560 --> 00:07:13,300
identification, chemical- I'm not going to read this.

94
00:07:13,300 --> 00:07:14,840
You guys can read it later.

95
00:07:15,160 --> 00:07:16,160
It's everywhere.

96
00:07:16,160 --> 00:07:22,920
Okay, so this is PyCon, so I'm going to very briefly cover representing graphs in Python.

97
00:07:22,920 --> 00:07:27,800
You can use either an adjacency or degree matrix, an edge list, a dictionary, or you

98
00:07:27,800 --> 00:07:32,620
can use packages like NetworkX.

99
00:07:32,620 --> 00:07:36,160
When you have a matrix representation, a matrix is just really a table of numbers.

100
00:07:36,160 --> 00:07:41,020
You let your rows represent the from node, and your columns represent the to node.

101
00:07:41,020 --> 00:07:47,580
For example, we've got the number 2 over here, so that's from A to D, and we have

102
00:07:47,580 --> 00:07:52,060
two edges from A to D, so the number in the table represents the number of edges.

103
00:07:52,060 --> 00:07:57,700
You'll see that along the diagonal, there's all zeros, because none of these nodes connect

104
00:07:57,700 --> 00:07:59,860
to themselves.

105
00:07:59,860 --> 00:08:02,180
One more thing is you'll see that this matrix is symmetric.

106
00:08:02,180 --> 00:08:07,540
For example, from A to B is 1, but from B to A is also 1, because there's one edge from

107
00:08:07,580 --> 00:08:11,780
A to B and from B to A, because this graph is undirected.

108
00:08:11,780 --> 00:08:15,860
Just be careful if you're using directed graphs, because the matrix won't be symmetric, and

109
00:08:15,860 --> 00:08:18,660
certain assumptions fall apart.

110
00:08:18,660 --> 00:08:20,380
That just looks like a list in Python.

111
00:08:20,380 --> 00:08:24,480
If you want to get fancy, you can use a NumPy array.

112
00:08:24,480 --> 00:08:27,620
You can also just use an edge list, which is just pairs.

113
00:08:27,620 --> 00:08:31,320
One thing to note here is that I've got the edge CD in here twice.

114
00:08:31,320 --> 00:08:36,620
That's because there are two edges from C to D.

115
00:08:36,660 --> 00:08:37,660
These are nice.

116
00:08:37,660 --> 00:08:40,260
They're better for directed graphs.

117
00:08:40,260 --> 00:08:43,900
There's a lot of redundancy in this one, because I want to represent the same graph over and

118
00:08:43,900 --> 00:08:44,900
over.

119
00:08:44,900 --> 00:08:52,540
They're also nice because you can use any hashable object as the key to your dictionary.

120
00:08:52,540 --> 00:08:58,620
Depending on how you write up a custom node class, you can just use that object as the

121
00:08:58,620 --> 00:09:03,860
key and just have a list of the actual nodes.

122
00:09:03,860 --> 00:09:08,420
You can make your own custom-made node objects and your own graph objects and throw your

123
00:09:08,420 --> 00:09:11,920
logic in there.

124
00:09:11,920 --> 00:09:15,500
As much as I love graphs, they aren't great for everything.

125
00:09:15,500 --> 00:09:20,980
If you're exploring graphs and graph databases especially, avoid them if you've got a lot

126
00:09:20,980 --> 00:09:25,980
of writes, if you have a write-heavy system.

127
00:09:25,980 --> 00:09:29,660
Or if you're querying large parts of a database, you lose a lot of the efficiencies that graphs

128
00:09:29,660 --> 00:09:32,860
provide.

129
00:09:32,860 --> 00:09:33,860
Let's go ahead and dive in.

130
00:09:33,860 --> 00:09:34,860
Oh, that's right.

131
00:09:34,860 --> 00:09:35,860
Quick disclaimer.

132
00:09:35,860 --> 00:09:40,420
DND is inherently racist.

133
00:09:40,420 --> 00:09:46,820
This is something that Wizards of the Coast is addressing, but it's baked in there.

134
00:09:46,820 --> 00:09:52,660
If that's something that bothers you, I've tried very hard to not have representations

135
00:09:52,660 --> 00:09:56,420
like that in here, but I'm not perfect.

136
00:09:56,420 --> 00:10:00,220
If it does, please let me know because I'm always trying to be better.

137
00:10:00,220 --> 00:10:05,380
It's not inherently violent, but there sometimes tends to be violence in DND adventures.

138
00:10:05,380 --> 00:10:08,780
I've also tried to minimize that.

139
00:10:08,780 --> 00:10:10,660
Let's go ahead and get started.

140
00:10:10,660 --> 00:10:17,580
You meet in a tavern and you want to get a lager because the ales are gross.

141
00:10:17,580 --> 00:10:21,660
The bar is all the way up here, but you're all the way down here.

142
00:10:21,660 --> 00:10:24,100
You need to get through this very busy bar.

143
00:10:24,100 --> 00:10:25,540
You're like, you know what?

144
00:10:25,540 --> 00:10:26,540
No problem.

145
00:10:27,540 --> 00:10:30,420
You come to a fork in the road.

146
00:10:30,420 --> 00:10:32,340
Now you're like, oh man, okay.

147
00:10:32,340 --> 00:10:33,900
I'm just going to go down a random fork.

148
00:10:33,900 --> 00:10:35,900
I don't know, whichever one.

149
00:10:35,900 --> 00:10:40,020
That means you end up hitting a dead end because you run into this nice, I don't know, it's

150
00:10:40,020 --> 00:10:41,580
like a dog woman person.

151
00:10:41,580 --> 00:10:45,340
This is the only picture I didn't draw, so I don't know everything in it.

152
00:10:45,340 --> 00:10:47,700
The guy, I did credit him in the first one.

153
00:10:47,700 --> 00:10:49,940
Noah QH, check him out.

154
00:10:49,940 --> 00:10:51,180
Support artists.

155
00:10:51,180 --> 00:10:55,340
Anyways, you run into this obstacle.

156
00:10:55,340 --> 00:11:00,020
You end up backtracking to the intersection and you go down one of the other options,

157
00:11:00,020 --> 00:11:01,500
the fork in the road.

158
00:11:01,500 --> 00:11:05,580
You basically can keep doing that until you get to the bar.

159
00:11:05,580 --> 00:11:09,340
In the worst case scenario, your triple looks something like this.

160
00:11:09,340 --> 00:11:15,260
You start over here, you come to an intersection and you just make a decision.

161
00:11:15,260 --> 00:11:19,940
If that decision leads you to a dead end, then you backtrack and you try another path.

162
00:11:19,940 --> 00:11:22,380
This is known as depth first search.

163
00:11:22,380 --> 00:11:23,380
Oh, just kidding.

164
00:11:23,380 --> 00:11:25,300
I need to practice more.

165
00:11:25,300 --> 00:11:29,140
First I'm going to tell you about converting maps to graphs.

166
00:11:29,140 --> 00:11:38,460
You can treat the corridors as edges and entities and the intersections as nodes.

167
00:11:38,460 --> 00:11:43,100
This is sort of less naturally than a lot of other things, but does naturally turn into

168
00:11:43,100 --> 00:11:44,100
a graph.

169
00:11:44,100 --> 00:11:48,700
You've got your nodes that I've just labeled alphabetically and then dead end nodes I've

170
00:11:48,700 --> 00:11:50,380
just labeled as an X.

171
00:11:50,380 --> 00:11:52,860
Then you have your edges connecting those nodes.

172
00:11:52,860 --> 00:11:59,340
You can use depth first search, which is a nice simple recursive algorithm that is quick

173
00:11:59,340 --> 00:12:02,660
to implement, easy to use, yada yada.

174
00:12:02,660 --> 00:12:03,660
I can run through this.

175
00:12:03,660 --> 00:12:04,660
Do we have time?

176
00:12:04,660 --> 00:12:05,660
Yeah, we got time.

177
00:12:05,660 --> 00:12:11,300
The way depth first search runs, it's recursive, so you always want to put that end condition

178
00:12:11,300 --> 00:12:14,220
there at the beginning.

179
00:12:14,220 --> 00:12:17,820
One little gotcha that always threw me off is to make sure you mark your current node

180
00:12:17,820 --> 00:12:19,480
as visited.

181
00:12:19,560 --> 00:12:24,320
The way these algorithms work is they will build lists of unvisited nodes.

182
00:12:24,320 --> 00:12:28,720
If you don't mark them as visited, you're going to end up going in loops.

183
00:12:28,720 --> 00:12:34,880
Then you basically just check every node if it is the target node.

184
00:12:34,880 --> 00:12:36,560
Just recurse into it.

185
00:12:36,560 --> 00:12:40,200
What that looks like, I wanted to go through just one or two iterations here.

186
00:12:40,200 --> 00:12:44,680
We'll start at the node down at the bottom that we've marked as visited.

187
00:12:44,680 --> 00:12:47,920
It's not the endpoint, so we're going to mark it as visited.

188
00:12:48,000 --> 00:12:52,000
We're going to check every one of its unvisited neighbors.

189
00:12:52,000 --> 00:12:56,440
We're going to perform DFS by going to the top of this.

190
00:12:56,440 --> 00:13:00,060
This isn't the endpoint, so we're not going to return true here.

191
00:13:00,060 --> 00:13:02,480
We are going to mark it as visited.

192
00:13:02,480 --> 00:13:07,520
For every one of its neighbors, we're going to just recurse further in.

193
00:13:07,520 --> 00:13:12,760
Eventually you end up recursing through the whole thing and getting to the end.

194
00:13:12,760 --> 00:13:19,680
You can finally order a beer or a non-alcoholic beer if you're under 21 in America.

195
00:13:19,680 --> 00:13:23,240
As you're ordering your beer, a little street urchin comes up to you and asks you for help.

196
00:13:23,240 --> 00:13:24,600
You're like, oh, you know what?

197
00:13:24,600 --> 00:13:25,600
I'm there.

198
00:13:25,600 --> 00:13:27,800
I'm here to answer the call to adventure.

199
00:13:27,800 --> 00:13:30,680
You get kicked out of the bar for drawing a weapon in the middle of a bar.

200
00:13:30,680 --> 00:13:33,280
Everybody's just trying to have a good time.

201
00:13:33,280 --> 00:13:36,760
He leads you to the sewers where there's been trouble, but it's locked.

202
00:13:36,760 --> 00:13:39,760
You're like, I got to find a key.

203
00:13:39,760 --> 00:13:40,840
He's all like, you know what?

204
00:13:40,840 --> 00:13:41,840
Don't worry.

205
00:13:41,920 --> 00:13:43,440
You're like, Alice or Bob have the key.

206
00:13:43,440 --> 00:13:44,720
It's a weird town.

207
00:13:44,720 --> 00:13:46,520
Everyone's names are alphabetically ordered.

208
00:13:46,520 --> 00:13:48,360
You're like, you know what?

209
00:13:48,360 --> 00:13:49,360
That's fine.

210
00:13:49,360 --> 00:13:51,440
I'll just go ask Alice and see if she's got the key.

211
00:13:51,440 --> 00:13:55,400
Alice is like, I don't have the key, but maybe you can ask Carmen or Dev.

212
00:13:55,400 --> 00:13:56,560
You're like, okay, you know what?

213
00:13:56,560 --> 00:13:58,840
That's fine, but first I got to ask Bob.

214
00:13:58,840 --> 00:14:06,720
Bob is like, I don't have the key either and my face looks like toast, so maybe ask Ellen.

215
00:14:06,720 --> 00:14:09,720
Then you're like, all right, I'm going to add Ellen to my list, but I first got to go

216
00:14:09,720 --> 00:14:11,320
see Carmen.

217
00:14:11,800 --> 00:14:12,800
I don't have the key either.

218
00:14:12,800 --> 00:14:14,600
Go ask Bob.

219
00:14:14,600 --> 00:14:17,560
This is where things start running circles and you're like, this is ridiculous.

220
00:14:17,560 --> 00:14:24,000
Why am I just going down the list like this asking people when I have the magic of graphs

221
00:14:24,000 --> 00:14:27,000
to help me organize this search?

222
00:14:27,000 --> 00:14:33,800
If we revisit this search by treating people as nodes, the edges between each node represent

223
00:14:33,800 --> 00:14:35,880
the relationships between those people.

224
00:14:35,880 --> 00:14:40,680
This could be relationships like Alice knows Bob, Alice follows Bob, or Alice and Bob are

225
00:14:40,680 --> 00:14:45,120
friends with each other, or Alice thinks Bob has the key, which is the relationship

226
00:14:45,120 --> 00:14:47,120
we're going to use.

227
00:14:47,120 --> 00:14:51,600
Let's revisit this problem using ... Oh, man, I have 15 minutes left.

228
00:14:51,600 --> 00:14:52,600
Holy cow.

229
00:14:52,600 --> 00:14:55,240
I thought this was a 45-minute presentation.

230
00:14:55,240 --> 00:14:56,240
Dang.

231
00:14:56,240 --> 00:14:57,920
Guys, breadth-first search is great.

232
00:14:57,920 --> 00:14:58,920
Do it.

233
00:14:58,920 --> 00:15:00,640
All right.

234
00:15:00,640 --> 00:15:03,000
One thing, you want to make sure your mark your nodes is visited.

235
00:15:03,000 --> 00:15:06,040
This is actually ... Yeah, you're crossing them off off the top.

236
00:15:06,040 --> 00:15:09,600
When Carmen finally tells you to go visit Bob, you're like, ha, I already took care

237
00:15:09,600 --> 00:15:10,600
of that.

238
00:15:11,520 --> 00:15:12,520
You're on a trip, dog.

239
00:15:12,520 --> 00:15:14,880
Then what else do you need to know about breadth-first search?

240
00:15:14,880 --> 00:15:20,760
Oh, this is cool too because as you're solving a problem, you can build the graph on the

241
00:15:20,760 --> 00:15:21,760
fly.

242
00:15:21,760 --> 00:15:22,960
That's cool.

243
00:15:22,960 --> 00:15:26,960
You don't have to know everything about the graph as you're solving whatever problem you're

244
00:15:26,960 --> 00:15:27,960
solving.

245
00:15:27,960 --> 00:15:31,880
That's another thing I really like about graphs is they are more than any other database, really

246
00:15:31,880 --> 00:15:36,280
open to modifying things on the fly.

247
00:15:36,280 --> 00:15:37,280
That's breadth-first search.

248
00:15:37,280 --> 00:15:38,280
Everyone knows it.

249
00:15:38,280 --> 00:15:39,280
Look it up.

250
00:15:39,280 --> 00:15:40,280
It's great.

251
00:15:40,960 --> 00:15:42,160
Your mark nodes is visited.

252
00:15:42,160 --> 00:15:43,280
This is another thing.

253
00:15:43,280 --> 00:15:47,160
This is what depth-first search would look like along this network.

254
00:15:47,160 --> 00:15:49,920
This is what breadth-first search would look like.

255
00:15:49,920 --> 00:15:56,520
It's cool because you can get to whatever solution in as few jumps as possible.

256
00:15:56,520 --> 00:16:01,720
Whereas with depth-first search, you have to go to the end of a particular path.

257
00:16:01,720 --> 00:16:04,680
That's definitely something you want to keep in your back pocket is breadth-first search

258
00:16:04,680 --> 00:16:08,080
is the way to go for most simple things.

259
00:16:08,080 --> 00:16:09,240
You get the key.

260
00:16:09,240 --> 00:16:10,640
You are in the sewer.

261
00:16:10,640 --> 00:16:11,640
There's a map.

262
00:16:11,640 --> 00:16:12,920
You're like, you know what?

263
00:16:12,920 --> 00:16:13,920
No problem.

264
00:16:13,920 --> 00:16:16,960
I've already converted maps to graphs and I've done breadth-first search.

265
00:16:16,960 --> 00:16:18,680
I can get there in two hops.

266
00:16:18,680 --> 00:16:19,680
Easy.

267
00:16:19,680 --> 00:16:22,680
You run off and the kid's looking at you like you're an idiot.

268
00:16:22,680 --> 00:16:23,680
He beats you there.

269
00:16:23,680 --> 00:16:24,680
You're like, what?

270
00:16:24,680 --> 00:16:31,080
He's like, I know a faster way from a wizard named Dykstra because you didn't think about

271
00:16:31,080 --> 00:16:32,880
the path lengths.

272
00:16:32,880 --> 00:16:37,080
If you consider the path lengths, you can get a faster path.

273
00:16:37,080 --> 00:16:42,160
Just because if you go from S to A to B, you're going to go along this big corridor versus

274
00:16:42,160 --> 00:16:51,280
if you take a little detour from S to A to B, you can take B to E, which is shorter.

275
00:16:51,280 --> 00:16:55,600
That's a really great algorithm that I'd love to talk you through sometime.

276
00:16:55,600 --> 00:16:56,600
There it is.

277
00:16:56,600 --> 00:16:57,600
This is all in the PowerPoint.

278
00:16:57,600 --> 00:17:03,000
If you guys want to know about it, that's one thing about this is you just want to repeat

279
00:17:03,000 --> 00:17:05,200
it until you mark your targeted node as visited.

280
00:17:05,640 --> 00:17:07,520
It's a little gotcha if you're doing Dykstra.

281
00:17:07,520 --> 00:17:09,520
Don't end too early.

282
00:17:09,520 --> 00:17:13,520
Then you go into the evil guy's lair and you make Batman noises.

283
00:17:13,520 --> 00:17:17,960
You find a ... Turns out this guy wasn't really a big bad.

284
00:17:17,960 --> 00:17:19,520
He's just a messenger.

285
00:17:19,520 --> 00:17:26,520
Now you have a whole bunch of messages that people have been sending to each other.

286
00:17:26,520 --> 00:17:30,680
You say Frank's messaging Gina, Gina's messaging Hector, and so on and so on.

287
00:17:30,680 --> 00:17:32,440
That's getting real confusing.

288
00:17:32,440 --> 00:17:33,600
You turn it into a graph.

289
00:17:33,600 --> 00:17:38,120
Now you've got a messaging graph saying, oh, these people are messaging these people.

290
00:17:38,120 --> 00:17:44,720
It doesn't get confusing at all because graphs make the problem a lot more simple to illustrate.

291
00:17:44,720 --> 00:17:50,560
It looks something like this instead of just a bullet point list.

292
00:17:50,560 --> 00:17:55,560
The algorithms you can use here are how do you determine who's actually in charge of

293
00:17:55,560 --> 00:17:56,560
this network.

294
00:17:56,560 --> 00:17:58,360
There's a lot of different algorithms for this.

295
00:17:58,360 --> 00:18:00,360
There's two classes.

296
00:18:00,360 --> 00:18:05,640
points which sort of tell you what node or edge you can remove to separate the graph

297
00:18:05,640 --> 00:18:07,520
completely from each other.

298
00:18:07,520 --> 00:18:13,120
Basically turn it into two separate graphs or one disconnected graph.

299
00:18:13,120 --> 00:18:20,760
Those are great if you have a point like that, but those don't always exist.

300
00:18:20,760 --> 00:18:26,280
Another tool you can use is centrality, which is just determining a node's influence.

301
00:18:26,280 --> 00:18:29,160
I'm going to use degree centrality because it's really easy to calculate.

302
00:18:29,160 --> 00:18:32,680
It's literally just counting the degrees per node.

303
00:18:32,680 --> 00:18:37,360
You can normalize it by n minus one, the number of nodes minus one.

304
00:18:37,360 --> 00:18:40,080
That's the maximum number of connections any node can have.

305
00:18:40,080 --> 00:18:42,440
That ends up looking like this.

306
00:18:42,440 --> 00:18:46,880
Then you can take out someone that's sort of at the center, a high-influenced person.

307
00:18:46,880 --> 00:18:48,200
There's a lot of other centralities.

308
00:18:48,200 --> 00:18:50,160
Degree centrality is just the most simple one.

309
00:18:50,160 --> 00:18:53,080
You definitely want to look at other ones.

310
00:18:53,080 --> 00:18:55,000
You go and you make more Batman noises.

311
00:18:55,000 --> 00:18:57,400
You get a big bag of money and you go to the mayor.

312
00:18:57,640 --> 00:18:59,200
They're like, yes, this is great.

313
00:18:59,200 --> 00:19:03,480
I can finally fund the town, but I don't know how to distribute it.

314
00:19:03,480 --> 00:19:06,880
This is our town charter and we have to fund all these things.

315
00:19:06,880 --> 00:19:09,240
I don't know where to start.

316
00:19:09,240 --> 00:19:12,000
You can use community detection, which is another class of algorithms.

317
00:19:12,000 --> 00:19:15,880
I'm only going to go over prims because I have zero time.

318
00:19:15,880 --> 00:19:23,320
Basically you take that charter and every entity in the charter, you turn it into its

319
00:19:23,320 --> 00:19:24,320
own node.

320
00:19:25,240 --> 00:19:26,760
Entity 1, 1 is the mayor.

321
00:19:26,760 --> 00:19:29,520
1, 2 is the mayor's aide, etc.

322
00:19:29,520 --> 00:19:34,200
Then you connect them by basically saying, oh, are they mentioned in the same section

323
00:19:34,200 --> 00:19:35,200
of the charter?

324
00:19:35,200 --> 00:19:41,440
Then you can keep connecting them a little more loosely by saying, okay, if they're mentioned

325
00:19:41,440 --> 00:19:46,240
at all in the charter, that's not as strong a connection.

326
00:19:46,240 --> 00:19:48,520
I want to be aware of that.

327
00:19:48,720 --> 00:19:54,840
I'm going to weight that connection by 2 to just say, oh, these entities are a little

328
00:19:54,840 --> 00:19:58,760
more distant from each other according to the charter.

329
00:19:58,760 --> 00:20:05,280
Then you have a list of edges and their weight.

330
00:20:05,280 --> 00:20:09,880
I ordered them by their edge weight because you need to for prims algorithm.

331
00:20:09,880 --> 00:20:18,240
You basically take out all the nodes and you start adding edges back to your graph until

332
00:20:18,240 --> 00:20:20,600
you get what's known as a spanning tree.

333
00:20:20,600 --> 00:20:21,600
That's what this looks like.

334
00:20:21,600 --> 00:20:25,960
You add an edge and then you add an edge and then you're just going through your ordered

335
00:20:25,960 --> 00:20:28,720
list of edges ordered by weight.

336
00:20:28,720 --> 00:20:35,720
If you do that, you may end up getting a loop, which is contrary to what a tree is because

337
00:20:35,720 --> 00:20:40,320
we're trying to get a graph that has the minimum weight while still being fully connected.

338
00:20:40,320 --> 00:20:41,640
We don't actually need this one.

339
00:20:41,640 --> 00:20:42,640
We can just remove that.

340
00:20:42,640 --> 00:20:46,560
We keep doing this process and we end up connecting the graph with what's known as a minimum spanning

341
00:20:46,560 --> 00:20:47,560
tree.

342
00:20:48,200 --> 00:20:56,480
Then we can start removing edges to build out the community detection algorithm.

343
00:20:56,480 --> 00:21:00,880
That is basically just going backwards until the desired number of groups is achieved.

344
00:21:00,880 --> 00:21:04,640
We're going to take out the edge AF and the edge BF.

345
00:21:04,640 --> 00:21:07,160
Now we have three communities.

346
00:21:07,160 --> 00:21:13,240
We end up funding the mayor's office and the mayor's aid equally as much as water well

347
00:21:13,320 --> 00:21:19,760
maintenance roads, animal crossing, fire medical and hazardous magic because graphs are not

348
00:21:19,760 --> 00:21:22,200
a silver bullet.

349
00:21:22,200 --> 00:21:28,000
One thing I did want to talk about is your algorithms only work the way they're supposed

350
00:21:28,000 --> 00:21:29,000
to.

351
00:21:29,000 --> 00:21:33,720
You should always ask yourself, what kind of results do I expect before running out

352
00:21:33,720 --> 00:21:34,720
any algorithm?

353
00:21:34,720 --> 00:21:38,200
This was, yeah, no, I'm not going to share that anecdote.

354
00:21:38,200 --> 00:21:39,200
That's fine.

355
00:21:39,200 --> 00:21:44,720
Basically, you want to know what success and failure looks like before you run an algorithm.

356
00:21:44,720 --> 00:21:49,840
If you don't get results that you expected, check if it's implemented correctly.

357
00:21:49,840 --> 00:21:51,160
Check if there's similar algorithms.

358
00:21:51,160 --> 00:21:54,000
I did mention there's a lot of community detection algorithms out there.

359
00:21:54,000 --> 00:21:55,000
Try it.

360
00:21:55,000 --> 00:22:01,400
Then lastly, redefine what a node or edge is because maybe this arbitrary relationship

361
00:22:01,400 --> 00:22:07,920
of being in the same paragraph of the charter, that doesn't really encode any useful information.

362
00:22:09,520 --> 00:22:11,400
So wow, I made it on time.

363
00:22:11,400 --> 00:22:13,040
I still have time to spare.

364
00:22:13,040 --> 00:22:14,040
Great.

365
00:22:14,040 --> 00:22:15,960
I practiced this like five times and thought I got it.

366
00:22:15,960 --> 00:22:21,120
But when you're up here and the lights are shining, time doesn't matter.

367
00:22:21,120 --> 00:22:25,560
But I just wanted to leave you guys with a few little things.

368
00:22:25,560 --> 00:22:30,240
Graphs are great and, oh, I can't cross your arms over the mic.

369
00:22:30,240 --> 00:22:35,080
They're really great because they encode systems as entities and relationships.

370
00:22:35,120 --> 00:22:39,240
If you don't walk away with any other algorithm today, check out Breth for a search.

371
00:22:39,240 --> 00:22:40,240
It's really useful.

372
00:22:40,240 --> 00:22:42,680
You can use it for a lot of different things.

373
00:22:42,680 --> 00:22:44,720
They're also very resilient to on-the-fly changes.

374
00:22:44,720 --> 00:22:51,120
You can add information to your graph or to any node or edge in your database without

375
00:22:51,120 --> 00:22:56,760
having to update the entire thing, without having to rewrite schemas and stuff.

376
00:22:56,760 --> 00:23:01,880
The three big classes of algorithms we went through are paths, connections, and communities.

377
00:23:01,880 --> 00:23:03,640
There's a lot of different stuff out there.

378
00:23:03,640 --> 00:23:06,720
So definitely check it out yourself.

379
00:23:06,720 --> 00:23:07,720
Check out my link tree.

380
00:23:07,720 --> 00:23:13,240
It's got my GitHub on there that I thought I could populate between when my plane landed

381
00:23:13,240 --> 00:23:14,640
last night and now.

382
00:23:14,640 --> 00:23:19,160
But I will definitely have it populated later this week with more resources for you guys

383
00:23:19,160 --> 00:23:20,160
to look through.

384
00:23:20,160 --> 00:23:21,160
Great.

385
00:23:21,160 --> 00:23:23,360
I can't believe I made it with time to spare.

386
00:23:23,360 --> 00:23:24,360
Look at that.

387
00:23:24,360 --> 00:23:25,360
You get five minutes of your life back.

