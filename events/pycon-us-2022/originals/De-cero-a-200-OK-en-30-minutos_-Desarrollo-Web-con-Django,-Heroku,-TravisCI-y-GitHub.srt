1
00:00:00,000 --> 00:00:14,100
Okay, buenas tardes. Algunos problemas técnicos, pero bueno, sobrevivimos. En esta sección

2
00:00:14,100 --> 00:00:21,440
ahora casi terminando lo que son el round de 5-1 charlas del día de hoy, sábado, tenemos

3
00:00:21,440 --> 00:00:27,560
a Luis Conejo que nos estará presentando de cero a doscientos, okay, en treinta minutos.

4
00:00:27,560 --> 00:00:42,260
Desfruten. Un aplauso, por favor. Primero que nada, una disculpa por el atraso, como

5
00:00:42,260 --> 00:00:48,400
le dijimos, tenemos algunos problemas técnicos. Parece que hay un nuevo feature en el último

6
00:00:48,400 --> 00:00:54,440
release que hizo Apple de Mac OS que hace que se active como un copyright protection

7
00:00:54,440 --> 00:00:59,920
a momento de conectarse a menos a este dispositivo. Creo que estoy tratando, supongo, de piratear

8
00:00:59,920 --> 00:01:05,520
mi propia presentación, pues. O tal vez ya me conocen la fama de cuando estaba en el

9
00:01:05,520 --> 00:01:13,160
colegio. Bueno, en todo caso, buenas tardes. Es súper difícil expresar la alegría que

10
00:01:13,160 --> 00:01:18,920
siento de poder estar aquí esta tarde. Han sido dos años bien duros de pandemia en todo

11
00:01:19,920 --> 00:01:24,920
el mundo. Es un gusto poder verlos a ustedes enmascarados, pero tal vez ya la siguiente,

12
00:01:24,920 --> 00:01:32,280
estemos ya todos sin máscaras. Ha sido una época bien dura. Cuando recién llegué a

13
00:01:32,280 --> 00:01:37,440
la conferencia me lleve un susto tremendo. Siempre cuando pasé de los 40, llegué a

14
00:01:37,440 --> 00:01:41,280
esa etapa de la vida en que comienzan a preguntarse, estoy muy viejo para esto, estoy muy viejo

15
00:01:41,280 --> 00:01:46,400
para lo otro, y cuando llegué vi a todo mundo súper joven y todo mundo súper fit y fue

16
00:01:46,400 --> 00:01:51,320
cuando me di cuenta de que también había una convención de gimnasia a la par. Entonces,

17
00:01:51,320 --> 00:01:59,160
ya me tranquilicé. Pero sí, sí, sí fue bastante la sorpresa en el momento. Dije,

18
00:01:59,160 --> 00:02:07,040
no, ya me sentí como en un concierto, en general, cuando ves que todo mundo parece

19
00:02:07,040 --> 00:02:11,880
que viene saliendo del colegio apenas. La charla esta tarde muestra un poco una serie

20
00:02:12,880 --> 00:02:17,200
de pasos bastante simples utilizando herramientas que todos están disponibles ya sea de manera

21
00:02:17,200 --> 00:02:21,680
gratuita o por menos que tienen un, lo que se llama un free tier como una sección gratuita

22
00:02:21,680 --> 00:02:26,880
que permite desarrollar un sitio web, al menos un prototipo de sitio web completamente en

23
00:02:26,880 --> 00:02:28,840
python.

24
00:02:28,840 --> 00:02:33,640
Contándoles un poquito de mí, bueno, soy freelancer por accidente, o sea, tengo 43

25
00:02:33,640 --> 00:02:40,640
años, soy costarricense, oregoniano por trasplante, después de que estuve en Austin, estuve

26
00:02:40,760 --> 00:02:45,720
en California, pues acabé en Oregon, llevo bastante tiempo ahí. Tengo 19 años de ser

27
00:02:45,720 --> 00:02:51,480
ingeniero y de trabajar en una corporación. Tengo 6 años como papá, no creo que nunca

28
00:02:51,480 --> 00:02:57,040
vaya a llegar a ser experto en esa área, pero trato de hacer lo mejor posible. Hace

29
00:02:57,040 --> 00:03:01,320
un poquito más de 4 años y también como en esta línea de bueno, ¿qué pasa cuando

30
00:03:01,320 --> 00:03:05,680
vamos llegando a los 40 y todo eso? En un punto de la vida profesional en el que uno

31
00:03:05,680 --> 00:03:11,080
se pregunta, estoy donde quiero estar, antes de eso siempre era como, puedo hacer esto

32
00:03:11,080 --> 00:03:14,560
después, puedo hacer esto a continuación, puedo esperarme otros 5 años, puedo quedarme

33
00:03:14,560 --> 00:03:21,560
aquí, puedo quedarme allá, ver lo que hacen otras personas de tu misma edad y te preguntas

34
00:03:21,960 --> 00:03:28,960
qué he hecho en mi carrera, pues me entró un poquito el gusanito de la enseñanza y

35
00:03:29,360 --> 00:03:35,360
me, como me dicen en México, me aventé, me tiré al agua como dirían en Costa Rica y

36
00:03:35,360 --> 00:03:41,160
apliqué a una posición como instructor remoto con la Universidad de Washington. Como yo

37
00:03:41,160 --> 00:03:44,920
vivo en el área de Portland, obviamente no era muy factible pues estar viajando hacia

38
00:03:44,920 --> 00:03:49,480
a los para dar clases. La universidad en esa época abrió como parte de su certificación

39
00:03:49,480 --> 00:03:56,480
en Python una versión online, es self-paced, como que los estudiantes tienen todo el material

40
00:03:56,640 --> 00:04:02,200
que requieren y cuando tienen alguna duda o para revisar sus tareas pues tenía un instructor

41
00:04:02,200 --> 00:04:07,380
que en ese caso era el rol que desempeñaba yo. Luego cayó la pandemia y eso habilitó

42
00:04:07,380 --> 00:04:13,560
que cursos que en otra época eran solamente presenciales en Seattle, de pronto se volvieron

43
00:04:13,560 --> 00:04:18,360
completamente en línea. Entonces ya mi jefe de la universidad me dijo, oye, ¿te gustaría

44
00:04:18,360 --> 00:04:25,360
dar el curso, el curso, el curso de clase? Y fue tamaño reto, cada semana mía cuando

45
00:04:26,320 --> 00:04:32,160
estoy dando las clases, mis martes de 6 a 9 de la noche estoy básicamente haciendo live

46
00:04:32,160 --> 00:04:36,080
coding, estoy escribiendo código en vivo. Tengo una ventaja, es un pequeño truco que

47
00:04:36,080 --> 00:04:40,480
algunos estudiantes me dijeron, ah, te los tenías escondido. Tengo siempre una pantalla

48
00:04:40,480 --> 00:04:43,480
aparte en la que está todo el código que estoy escribiendo y otra en la que estoy

49
00:04:43,480 --> 00:04:47,880
haciendo live coding, no es que estoy como, no estoy a ese nivel que puedo nada más escribir

50
00:04:47,880 --> 00:04:52,360
todo y de pronto funciona, si estoy más o menos reconstruyendo lo que tengo, pero si

51
00:04:52,440 --> 00:04:58,440
he descubierto que a mis estudiantes les ayudo un montón para poder seguir el progreso

52
00:04:58,440 --> 00:05:05,000
de ver básicamente un script completo vacío, a verlo ya funcionando, pero vieron cómo

53
00:05:05,000 --> 00:05:10,200
se fueron agregando elementos y elementos hasta llegar al resultado final. No fui tan

54
00:05:10,200 --> 00:05:16,720
valiente para esta presentación, entonces lo que van a ver son grabaciones de live coding,

55
00:05:16,720 --> 00:05:20,960
siempre temor cuando hay una presentación y sobre todo cuando hay una cierta limitante

56
00:05:20,960 --> 00:05:25,520
en la cantidad de tiempo disponible, pues es que algo no funcione y te quedes pegado

57
00:05:25,520 --> 00:05:30,120
y que aquí de hecho también con el tiempo vamos a estar un poquito más restringidos

58
00:05:30,120 --> 00:05:37,120
de la cuenta. El proyecto que les voy a mostrar es sencillamente una demostración, pero

59
00:05:37,120 --> 00:05:41,920
si es algo que pienso utilizar en mi trabajo actual, que es lo que yo llamaría como project

60
00:05:41,920 --> 00:05:46,840
management glorificado, me toca estar siguiendo varios proyectos, estar siguiendo varios,

61
00:05:46,840 --> 00:05:51,480
que se llaman milestones como puntos críticos en esos proyectos y a menudo me pasa que me

62
00:05:51,480 --> 00:05:56,960
doy cuenta de, oye, tenía que tener listo tal milestone para tardía y ya estamos tarde

63
00:05:56,960 --> 00:06:01,160
y tengo que ver cómo coordine, buscar a la gente que tiene que trabajar en eso y ver

64
00:06:01,160 --> 00:06:04,800
igual también la parte feo de ver cómo salvar cara, es decir, fue que se me olvidó que

65
00:06:04,800 --> 00:06:09,000
estábamos en este punto. Entonces me ocurrió que para el demo de esta podía ser algo que

66
00:06:09,000 --> 00:06:16,000
también me podía servir en eso, una aplicación sencillita basada en web para llevar una lista

67
00:06:16,480 --> 00:06:21,400
de proyectos y decir, bueno, este milestone, este hito del proyecto, ¿cuándo tiene que

68
00:06:21,400 --> 00:06:25,920
estar listo? O los siguientes hitos tienen que estar listos en las próximas dos semanas,

69
00:06:25,920 --> 00:06:32,440
en las próximas tres semanas y mostrar eso en una página web. Sí pienso eso en general,

70
00:06:32,440 --> 00:06:36,520
aún cuando se está tratando de dar una demostración, en este caso para una conferencia o cuando

71
00:06:36,520 --> 00:06:41,240
se hace a nivel académico, funciona muy bien tratar de hacer algo que de verdad se piensa

72
00:06:41,240 --> 00:06:48,240
utilizar que de verdad podría servir de algo.

73
00:06:50,520 --> 00:06:55,320
Herramientas utilizadas originalmente, y eso todavía lo hacemos en el curso que yo

74
00:06:55,320 --> 00:07:01,240
enseño en la Universidad de Washington, para lo que era integración continua usábamos

75
00:07:01,240 --> 00:07:06,760
Travis CI. El problema con Travis en una época reciente es que para nuevos desarrolladores

76
00:07:06,760 --> 00:07:12,560
que se inscriben como en el free tier ahora es un trial y ese trial expira después de

77
00:07:12,560 --> 00:07:16,000
cierta cantidad de días. Entonces me he encontrado con un problema de estudiantes que me dicen,

78
00:07:16,000 --> 00:07:21,480
oye, estoy al final del curso, estoy implementando la parte de continuous integration y me dice

79
00:07:21,480 --> 00:07:26,400
que ya mi trial está expirado, que tengo que ponerle una tarjeta y todo eso. Y el espíritu

80
00:07:26,400 --> 00:07:33,400
de esto era hacerlo de manera que se pudiera ver cómo hacer casi que un proyecto completo

81
00:07:34,400 --> 00:07:39,400
siempre manteniéndose en el free tier. Una cosa que se me olvidó comentarles antes es

82
00:07:39,400 --> 00:07:46,400
que también tiempo después de que comencé como instructor por una conexión loca de

83
00:07:47,200 --> 00:07:53,240
eso que conoces gente y demás me salió un proyecto de una editorial, ellos lo que hacen

84
00:07:53,240 --> 00:07:59,360
es crean libros en chino, didactizados para personas que están aprendiendo chino. Yo

85
00:07:59,360 --> 00:08:03,680
llevo diez años tratando de aprender el idioma, ya puedo llegar y pedir comida y la mitad

86
00:08:03,680 --> 00:08:09,120
de las veces me traen lo que pedí. Entonces voy llegando por ahí, pero entonces comencé

87
00:08:09,120 --> 00:08:13,240
a leer libros de esta editorial y los contacté como un fanático más para decirles qué buen

88
00:08:13,240 --> 00:08:18,000
trabajo están haciendo y de casualidad hice contacto con uno de ellos. De hecho, uno de

89
00:08:18,000 --> 00:08:22,560
mis jefes de ese proyecto está aquí en Salt Lake, ayer nos conocimos cara a cara por primera

90
00:08:22,560 --> 00:08:26,200
vez, pero ellos hacen este trabajo que para mí es súper interesante, no hay nada que

91
00:08:26,200 --> 00:08:31,240
se abra el entendimiento entre culturas como el idioma. Pues el asunto fue que el tool

92
00:08:31,240 --> 00:08:36,240
que usan ellos para generar sus libros es en python y ahora están haciendo un proyecto

93
00:08:36,240 --> 00:08:41,280
que es para migrar ese tool de una herramienta que es en línea de comandos totalmente manual

94
00:08:41,280 --> 00:08:46,600
a algo que sea basado en la nube y que puedan tener gente no técnica trabajando en las

95
00:08:46,600 --> 00:08:52,280
etapas. Cuando haces un libro tienes gente haciendo imágenes, tienes gente haciendo

96
00:08:52,280 --> 00:08:57,440
el contenido del libro, traducciones, portadas y demás y no necesariamente vas a tener gente

97
00:08:57,440 --> 00:09:01,800
que sepa python haciendo eso. Entonces el proyecto en que estoy haciendo freelancing

98
00:09:01,800 --> 00:09:05,560
uses también las herramientas que las aprendí como instructor, súper interesante para

99
00:09:05,560 --> 00:09:11,160
mí porque un estudiante me decía ahora vas a ver lo que se siente tener que hacer las

100
00:09:11,160 --> 00:09:16,160
cosas desde cero y no tener nada más la experiencia de ver el mismo curso una y otra vez. Pero

101
00:09:16,160 --> 00:09:21,600
bueno, vamos a usar Visual Studio Code, GitHub, donde vamos a poner nuestro repositorio, vamos

102
00:09:21,600 --> 00:09:25,920
a usar Django que va a ser el framework para crear nuestra página web y Heroku que es

103
00:09:25,920 --> 00:09:30,800
donde vamos a hacer el deployment de la página web. No recibo un solo sentado en ninguna

104
00:09:30,800 --> 00:09:35,320
de estas compañías aplicaciones, es nada más básicamente lo que uso con mis estudiantes

105
00:09:35,320 --> 00:09:39,400
para enseñarles el desarrollo web, es lo que uso yo en este proyecto de freelance que les

106
00:09:39,400 --> 00:09:46,400
mencionaba ahora, es sencillamente conveniente y todas tienen una sección gratuita que permite

107
00:09:47,200 --> 00:09:53,160
utilizarlas hasta donde tengo entendido de manera indefinida para prototipar una aplicación.

108
00:09:53,160 --> 00:09:57,080
Ya cuando pasen por ejemplo en un caso de un freelance, cuando pasan el prototipo a

109
00:09:57,080 --> 00:10:00,480
una cuestión comercial, algunas de esas sí van a pedir, bueno ahora ya estás haciendo

110
00:10:00,480 --> 00:10:06,880
dinero con esto, regístrate, páganos, pero en general toda la etapa de desarrollo de

111
00:10:06,880 --> 00:10:13,880
prototipo se puede hacer en la sección gratuita. Lo primero que hacemos en el proyecto es la

112
00:10:13,880 --> 00:10:19,600
creación de un repositorio, en este caso lo estoy haciendo público, la idea es poder

113
00:10:19,600 --> 00:10:24,520
compartirlo, creo que Github va a abrir la posibilidad de que aún usuarios en la parte

114
00:10:24,520 --> 00:10:29,480
gratuita tengan repositorios privados, en mi caso tengo el derecho de uso de repositorios

115
00:10:29,480 --> 00:10:35,960
privados por el hecho de estar en academia, Github tiene un programa muy bueno con la

116
00:10:35,960 --> 00:10:41,160
academia de que te dan descuentos con varias de las herramientas y una de ellas es esa

117
00:10:41,160 --> 00:10:48,160
posibilidad de crear repositorios privados. En todo caso al crear repositorio, en este

118
00:10:53,080 --> 00:10:58,280
caso lo hice público para que sea posible compartirlo, usé la opción de crear un Git

119
00:10:58,280 --> 00:11:05,280
Ignore que sea específico para Python, Github trae esa opción, eso ayuda a que un montón

120
00:11:05,840 --> 00:11:11,080
de contenido que no queremos que acabe en nuestro repositorio de una vez quede filtrado,

121
00:11:11,080 --> 00:11:17,000
yo luego lo modificamos para necesidades específicas pero es bueno usarlo y le pedí

122
00:11:17,000 --> 00:11:22,040
que creara un Rhythm y luego poner un poco de nota sobre qué más tenía.

123
00:11:22,040 --> 00:11:29,040
Lo siguiente es una vez creado el repositorio hacemos un clone local, como les dije vamos

124
00:11:29,040 --> 00:11:32,560
a usar Visual Studio Code pero en mi caso siempre prefiero hacer la mayoría de cosas

125
00:11:32,560 --> 00:11:37,720
en un terminal, aún dentro de Visual Studio Code uso el terminal, aquí lo que hago nada

126
00:11:37,720 --> 00:11:44,720
más es hacer el clone, apuntarlo directamente al repositorio para que cada cambio que hago

127
00:11:45,600 --> 00:11:47,800
se crea ahí. Una cosa que también le digo a los estudiantes

128
00:11:47,800 --> 00:11:52,840
y cuesta es convencerlos, ellos están trabajando en sus propios proyectos, en sus propios repositorios

129
00:11:52,840 --> 00:11:57,440
y normalmente son el único desarrollador, entonces me dicen para qué, si puedo usar

130
00:11:57,440 --> 00:12:04,440
el lenguaje, para qué carajos tengo que quedar un branch en vez de porque no puedo escribir

131
00:12:04,440 --> 00:12:10,360
solamente en el main, viene toda la discusión, tener un branch te permite hacer pull requests,

132
00:12:10,360 --> 00:12:14,000
si tienes que incorporar más gente en el equipo le permite a cada uno estar trabajando

133
00:12:14,000 --> 00:12:20,200
en lo suyo y nada más eventualmente integrar todo en el main, pero siempre es una discusión

134
00:12:20,200 --> 00:12:27,200
interesante. Lo siguiente que también siempre es una discusión

135
00:12:28,520 --> 00:12:33,280
es la importancia de crear algún tipo de aislamiento para nuestro proyecto con respecto a la máquina

136
00:12:33,280 --> 00:12:37,680
en la que estamos trabajando, en el caso de nosotros yo les digo que usen un ambiente

137
00:12:37,680 --> 00:12:43,480
virtual, hay estudiantes que me dicen yo sé usar Docker, voy a crear un Docker container,

138
00:12:43,480 --> 00:12:48,400
pero algo que permita aislar la máquina en la que estamos trabajando de todo el ambiente,

139
00:12:48,400 --> 00:12:52,320
importante porque eso ayuda a que en los proyectos sea fácil de distribuirse, luego creamos

140
00:12:52,320 --> 00:12:57,680
un requirements.txt que solo tiene los paquetes que necesitamos y en el caso de a la hora

141
00:12:57,680 --> 00:13:03,360
de hacer deployment por ejemplo a Jeroco tienes una limitante de espacio muy clara,

142
00:13:03,360 --> 00:13:09,440
entonces obviamente es importante que no tengan paquetes adicionales. Como una anécdota,

143
00:13:09,440 --> 00:13:14,640
una vez me tocó de bugear por horas tratando de ver por qué diablos mi aplicación se

144
00:13:14,640 --> 00:13:20,640
había hecho gigante y Jeroco me estaba diciendo mira te pasaste, esto mide más de un gigabyte,

145
00:13:20,640 --> 00:13:26,400
límite en el free tier, creo que el hard limit es como 450 megabytes, no puedes hacer eso

146
00:13:26,400 --> 00:13:32,640
y había hecho un cambio mínimo y lo que me di cuenta era que había olvidado activar

147
00:13:32,640 --> 00:13:39,200
el virtual environment, creé mi requirements.txt y ese archivo de requirements tenía 166

148
00:13:39,200 --> 00:13:44,480
paquetes diferentes, cuando lo normal en un proyecto como este hubiera sido unos 4 o 5,

149
00:13:44,480 --> 00:13:49,360
pues era algo bastante sencillo, siempre la importancia de esto de crear el ambiente virtual,

150
00:13:49,360 --> 00:13:53,160
pues luego instalamos Django, Django tiene también la opción con un comando muy sencillo

151
00:13:53,160 --> 00:13:56,680
que es Django admin start project y luego le das el nombre del proyecto y te crea un

152
00:13:56,680 --> 00:14:02,600
esqueleto para el proyecto, ya con ese esqueleto podemos comenzar a trabajar, algo importante

153
00:14:02,600 --> 00:14:06,680
con todos estos frameworks, esos que te crean esqueletos que puedes de una vez lanzar y

154
00:14:06,680 --> 00:14:13,120
ya hay algo ahí, como una especie de placeholder que te permite correr.

155
00:14:13,120 --> 00:14:18,440
Luego para cada característica, para cada funcionalidad que vas agregando en Django

156
00:14:18,440 --> 00:14:24,040
se usan apps, en este caso nuestro proyecto es muy sencillo, sencillamente muestra proyectos

157
00:14:24,040 --> 00:14:30,320
y muestra diferentes tareas dentro de ese proyecto, entonces vamos a crear un solo app

158
00:14:30,320 --> 00:14:36,360
que se llama Milestones y es como se divide la funcionalidad.

159
00:14:36,360 --> 00:14:43,840
Ahí ya lo creó y ven que se crea un folder aparte, ese folder tiene un cierto también

160
00:14:43,840 --> 00:14:49,800
esqueleto básico con vistas y otros elementos que van a ser propios de la app.

161
00:14:49,800 --> 00:14:55,520
Lo siguiente que hacemos es crear un modelo de base de datos, ese modelo va a definir

162
00:14:55,520 --> 00:14:59,160
cómo se maneja la información dentro de nuestra aplicación.

163
00:14:59,160 --> 00:15:10,160
Para este que es bien sencillo, lo que hice, para este lo que hice fue igual crear un par

164
00:15:10,320 --> 00:15:17,320
de tablas de bases de datos, una es la que lleva los proyectos, la otra lleva los milestones,

165
00:15:18,600 --> 00:15:21,720
creo que se podría modificar la estructura para que quedara una relación más clara

166
00:15:21,720 --> 00:15:26,680
entre los proyectos y los milestones, pero igual en este caso era hacerlo algo sencillo.

167
00:15:26,680 --> 00:15:30,800
Para el proyecto, capturamos el nombre del proyecto que es único pero no es el primary

168
00:15:30,800 --> 00:15:35,920
key y creamos una fecha de lanzamiento, una fecha en que el proyecto tiene que estar lista

169
00:15:36,000 --> 00:15:40,280
y le agregamos un string representation, eso nada más es para efectos de la interfaz de

170
00:15:40,280 --> 00:15:45,880
administrador de Django, ella va a usar el string representation como la versión en

171
00:15:45,880 --> 00:15:52,200
string de eso para mostrar los elementos en vez de enseñarlos los primary keys.

172
00:15:52,200 --> 00:15:59,200
Para los milestones creamos una constante que es una lista de opciones en donde puede

173
00:15:59,720 --> 00:16:05,720
estar cada tarea, puede estar no iniciada, puede estar en progreso, puede estar bloqueada,

174
00:16:05,720 --> 00:16:11,120
idealmente va a estar completada y luego creamos como tal los campos que va a tener la tabla

175
00:16:11,120 --> 00:16:15,800
correspondiente, uno va a ser el nombre del milestone como tal, por ejemplo iniciar el

176
00:16:15,800 --> 00:16:22,800
proyecto, otro va a ser una llave que viene de la otra tabla que es el nombre del proyecto

177
00:16:23,520 --> 00:16:30,520
como tal y cuando tiene que estar lista esta tarea en particular y cuál es el estatus

178
00:16:30,520 --> 00:16:32,240
actual.

179
00:16:32,240 --> 00:16:37,920
En proyectos más complejos, uno me tocó guardar archivos binarios, no quería hacer

180
00:16:37,920 --> 00:16:44,120
eso con una base de datos en SQL como es esta, eso no lo menciono aquí en este pero usé

181
00:16:44,120 --> 00:16:48,880
MongoDB Cloud Atlas, también tiene una versión gratuita, en el caso de ellos lo que hacen

182
00:16:48,880 --> 00:16:55,880
es que te dan una especie de hash de acceso y se integra super bien en Django, para mí

183
00:16:55,880 --> 00:17:01,920
fue super conveniente, ellos tienen una cosa que se llama GridFS, que te permite guardar

184
00:17:01,920 --> 00:17:06,920
hasta en la sección gratuita hasta 500 megabytes de información.

185
00:17:06,920 --> 00:17:13,920
Vamos a ver cómo estamos con el tiempo pero seguimos.

186
00:17:14,120 --> 00:17:18,360
Luego viene la parte de la interfaz de administrador, esto me encanta en Django, cuando lo comparo

187
00:17:18,360 --> 00:17:25,360
con por ejemplo con Flask, Django te permite una vez que creas tu modelo de base de datos

188
00:17:25,360 --> 00:17:30,000
incorporarlo en la interfaz de administrador que ya está creada por Django que te da una

189
00:17:30,000 --> 00:17:34,160
interfaz de usuario que te permite agregar elementos dentro de las tablas que creaste

190
00:17:34,160 --> 00:17:38,720
en la base de datos, entonces sin necesidad de escribir una sola línea de código de

191
00:17:38,720 --> 00:17:44,400
plantillas ni nada para crear la base de datos como tal, pero para crear los elementos de

192
00:17:44,400 --> 00:17:51,400
la base de datos puedo meter proyectos, meter magas, hacer todo y aquí lo ven nada más

193
00:17:51,680 --> 00:17:58,680
lo agregué en la interfaz de admin y ya me salen las dos nuevas tablas.

194
00:17:59,640 --> 00:18:05,640
Luego la vista de pantalla inicial, en el caso de Django una vista lo que hace es toma

195
00:18:05,640 --> 00:18:10,160
información, esa vista la vamos a asociar con una ruta dentro de nuestro website, en

196
00:18:10,160 --> 00:18:13,800
este caso esta va a ser nuestro Main View, va a ser la lista que va a salir con solo

197
00:18:13,800 --> 00:18:18,200
abrir la página, por lo pronto solo esta vista se va a ocupar y esta vista también

198
00:18:18,200 --> 00:18:25,200
define cuál plantilla en HTML se va a usar para definir el, perdón, para mostrar la

199
00:18:30,560 --> 00:18:34,840
información que la vista recolecta y en este caso lo estoy haciendo de manera por ejemplo

200
00:18:34,840 --> 00:18:39,240
de que me enseñe cuáles tareas van a tener que estar listas en las próximas dos semanas

201
00:18:39,240 --> 00:18:43,520
que es la necesidad particular que estoy tratando de suplir, me va a también enseñar

202
00:18:43,520 --> 00:18:49,840
cuáles ya fueron completadas para yo saber que ya no tengo que preocuparme de esas y

203
00:18:49,840 --> 00:18:53,640
me va a enseñar organizadas por proyecto. Yo lo que quiero es que básicamente cada

204
00:18:53,640 --> 00:18:58,080
mañana yo pueda llegar y abrir la lista de proyectos, listas de tareas que tengo y

205
00:18:58,080 --> 00:19:02,320
me diga mira en dos semanas tiene que estar esta, esta ya está tarde, esta ya está completa

206
00:19:02,320 --> 00:19:05,880
y lo pueda ver para todos los proyectos en los que estoy trabajando.

207
00:19:06,520 --> 00:19:09,680
Y eventualmente, probablemente le voy a agregar la opción también de editar el estatus de

208
00:19:09,680 --> 00:19:16,600
esto y todo sin tener que usar la interfaz de administrador, pero por lo pronto esta versión,

209
00:19:16,600 --> 00:19:23,100
esta versión simplificada sirve. Vamos a quedar cortos de tiempo, voy a tratar de pasar

210
00:19:23,100 --> 00:19:27,800
a la siguiente también para enseñarles que seguiría.

211
00:19:27,800 --> 00:19:32,200
Luego está la plantilla de la pantalla inicial, entonces teníamos la vista, esa vista llama

212
00:19:32,200 --> 00:19:38,480
una plantilla, esta plantilla va a ser alimentada con una serie de variables basadas a través

213
00:19:38,480 --> 00:19:44,440
de una variable general que se llama contexto y esa, la plantilla es básicamente código

214
00:19:44,440 --> 00:19:51,440
en HTML con un poquito de código adicional correspondiente a Django que permite implementar

215
00:19:52,640 --> 00:19:59,640
a como for loops, permite implementar a ifs y otros elementos que ayudan a determinar

216
00:19:59,720 --> 00:20:03,800
cómo se construye la página. Esto puede ser increíblemente complejo, entonces a la

217
00:20:03,800 --> 00:20:10,800
hora de hacer uno, por ejemplo para una aplicación de verdad comercial, pues allá van a ver

218
00:20:11,560 --> 00:20:15,880
cascade style sheets, van a ver imágenes, van a ver otros elementos, van a ver una plantilla

219
00:20:15,880 --> 00:20:22,880
base de la cual se sirven las plantillas hijas, en este caso para efectos de simplificación

220
00:20:23,720 --> 00:20:30,720
estamos haciendo uno en la que toda la plantilla está autocontenida en esta plantilla inicial

221
00:20:32,020 --> 00:20:38,720
y lo que ve en este momento, por ejemplo esa referencia project es uno de los elementos

222
00:20:38,720 --> 00:20:44,720
que estamos obteniendo de la variable de contexto que está pasando la vista.

223
00:20:44,720 --> 00:20:51,720
Entonces aquí van a ver como se va, básicamente a la hora de generar la plantilla ya dinámica

224
00:20:52,360 --> 00:20:57,360
para mostrarla en pantalla va usando lo que le alimentó la vista.

225
00:20:57,360 --> 00:21:04,360
Voy a pasar a la siguiente, aunque no está completa esta para que nos dé.

226
00:21:04,360 --> 00:21:10,800
Lo último que faltaría es definir rutas, Django utiliza un archivo llamado urls.py,

227
00:21:10,800 --> 00:21:16,360
se tiene uno general y se tiene uno específico para cada uno de los apps, en este caso les

228
00:21:16,440 --> 00:21:23,440
estoy mostrando el general, por la simplicidad de este proyecto, si alguien trata de acceder

229
00:21:24,560 --> 00:21:29,840
a esta ruta a la hora de abrir esta página vas a darle este view y luego el view que

230
00:21:29,840 --> 00:21:36,840
está en views.py va a entregar una plantilla en particular que va a mostrar la información

231
00:21:38,000 --> 00:21:39,440
que le estamos pidiendo.

232
00:21:39,440 --> 00:21:43,920
Es un poquito complejo, la ventaja es que se vuelve muy sencillo de mantener, si fuera

233
00:21:43,920 --> 00:21:50,920
algo más rápido como flash sería más directo con un decorador.

234
00:21:51,120 --> 00:21:54,640
Lo siguiente que implementamos, ya en este punto tenemos una página web que funciona

235
00:21:54,640 --> 00:22:00,160
que se podría lanzar como un servidor local, ya es algo que funciona, el siguiente paso

236
00:22:00,160 --> 00:22:06,240
es hacer tests, crear test para esta aplicación, aquí estoy creando un test extremadamente

237
00:22:06,240 --> 00:22:12,040
básico, la parte interesante es, le podemos crear fixtures, esos fixtures similares a

238
00:22:12,120 --> 00:22:16,960
los que se usan un poquito más elaborados que los de PyTest, permiten crear una mini

239
00:22:16,960 --> 00:22:23,960
base de datos para hacer pruebas y probar desde el back end de nuestro código como

240
00:22:23,960 --> 00:22:27,680
la funcionalidad interna hasta el front end, asegurarnos por ejemplo que el título no

241
00:22:27,680 --> 00:22:34,680
esté cambiando o que se esté mostrando un dato que debería estar oculto, cosas similares.

242
00:22:34,680 --> 00:22:41,680
¿Cómo estamos con el tiempo? Gracias, voy a acelerar un poquito, todo el contenido

243
00:22:49,000 --> 00:22:52,200
que estamos presentando aquí, voy a regresar a la diapositiva inicial para que vean un

244
00:22:52,200 --> 00:22:57,000
poco el link de GitHub, ahí está todo esto que estamos mostrando aquí, el código está

245
00:22:57,000 --> 00:23:00,680
posteado en ese repositorio.

246
00:23:00,680 --> 00:23:05,560
Lo siguiente sencillamente es guardar nuestro progreso en GitHub, añadimos todos los datos

247
00:23:05,560 --> 00:23:10,280
a un commit, creamos nuestro commit y hacemos push, siempre es importante, es una cosa que

248
00:23:10,280 --> 00:23:14,760
también enfatizo con los estudiantes, yo no siempre lo hago tan bien como quisiera,

249
00:23:14,760 --> 00:23:19,880
es bueno estar creando commits constantemente, a menudo me ha pasado que me encuentro que

250
00:23:19,880 --> 00:23:25,320
hice una serie de cambios y rompí algo de una manera tal que ocupo regresar bastante

251
00:23:25,320 --> 00:23:30,560
atrás y me doy cuenta que no tengo la granularidad que quisiera porque aguanté mucho entre

252
00:23:30,560 --> 00:23:34,480
commits, entonces siempre es importante esa parte.

253
00:23:34,480 --> 00:23:40,440
Esto es lo que antes decíamos con Travis.ai, la configuración de integración continua,

254
00:23:40,440 --> 00:23:44,600
aprendí gracias a un estudiante que GitHub Actions cumple con una función similar que

255
00:23:44,600 --> 00:23:49,600
es lo que se muestra aquí, eso sí lo voy a mostrar completo, GitHub Actions lo que

256
00:23:49,600 --> 00:23:54,440
permite definirle, bueno, tiene ya templates prestabrecidos, yo le he puesto y mira estoy

257
00:23:55,440 --> 00:24:01,160
usando Django, entonces cada vez que te haga un push de mi proyecto de Django vas a correr

258
00:24:01,160 --> 00:24:05,320
requirements.txt, vas a hacer una instalación similar a lo que hace Heroku después para

259
00:24:05,320 --> 00:24:12,320
ponerlo a funcionar y vas a correr las pruebas que estén establecidas en mi proyecto de

260
00:24:12,440 --> 00:24:19,440
Django y me vas a decir si esas pruebas fallaron o pasaron y ese feedback le sirve a cualquiera

261
00:24:19,440 --> 00:24:22,680
que esté revisando, ya sea ese código a la hora de hacer push o a la hora de hacer un

262
00:24:22,680 --> 00:24:27,840
pull request para hacer ya la integración dentro del proyecto, dentro del main, alguien

263
00:24:27,840 --> 00:24:31,040
va a poder decir bueno, tengo que revisar este código pero ya sé que todos los tests

264
00:24:31,040 --> 00:24:35,440
que estamos corriendo están pasando, entonces tengo esa garantía de que igual voy a ver

265
00:24:35,440 --> 00:24:41,440
el código pero por lo menos ya sé que una serie mínima de tests se corrieron como parte

266
00:24:41,440 --> 00:24:48,440
del proceso de cuando se hizo push o cuando se hizo pull request.

267
00:24:49,320 --> 00:24:55,320
El paso final, nos vamos a quedar un poco cortos para eso, es la configuración en despliegue

268
00:24:55,320 --> 00:25:00,720
en Heroku. Heroku funciona como, a menos en la manera más básica es como hacer deployments

269
00:25:00,720 --> 00:25:04,720
a GitHub, entonces sencillamente hacemos un git push, en este caso estoy haciendo un git

270
00:25:04,720 --> 00:25:09,800
push desde mi branch de development, lo estoy haciendo hacia, Heroku todavía usa el término

271
00:25:09,800 --> 00:25:16,800
master, ya están haciendo la transición entre master y main, otra cosa que hago que estoy

272
00:25:17,440 --> 00:25:24,440
mostrando aquí es que se crea un archivo aparte, Heroku.py que abstrae settings.py

273
00:25:24,440 --> 00:25:28,480
de Django, de manera que tengamos siempre cuando corremos local, tenemos un ambiente

274
00:25:28,480 --> 00:25:33,800
que tiene la bandera de debug activa, tenemos un montón de configuraciones locales que

275
00:25:33,800 --> 00:25:37,280
no sería buena idea tener ya cuando tenemos una aplicación que es visible para alguien

276
00:25:37,280 --> 00:25:41,320
afuera, entonces Heroku.py lo que nos crea es un entorno que solo va a correr cuando

277
00:25:41,320 --> 00:25:48,320
estamos en Heroku y que es más seguro que no va a exponer secret keys, que no va a mostrarte

278
00:25:48,680 --> 00:25:53,280
un montón de información de debug si algo sale mal, que un usuario malicioso podría

279
00:25:53,280 --> 00:26:00,280
usar para otras cosas. Voy a pasar al siguiente, al final lo que haces es un push a Heroku,

280
00:26:00,280 --> 00:26:07,280
Heroku te va a decir de qué tamaño quedó lo que ellos llaman un dyno como tu container

281
00:26:11,760 --> 00:26:16,040
en el lado de Heroku, la versión gratis es bastante generosa, pienso yo, porque tiene

282
00:26:16,040 --> 00:26:21,040
un límite máximo de 450 megabytes, para la mayor parte de proyectos que me ha tocado

283
00:26:21,040 --> 00:26:25,480
hacer sobre todo a nivel de prototipo ha sido más que suficiente. Ahora tengo un reto,

284
00:26:25,480 --> 00:26:29,840
en el proyecto este de la editorial que les contaba ellos usan LaTeX que es un lenguaje

285
00:26:29,840 --> 00:26:34,080
que se usaba, cuando yo lo aprendí por lo menos era para hacer papers técnicos, pero

286
00:26:34,080 --> 00:26:38,200
también se usa para generar PDFs que es una manera, cuando se publica un libro impreso

287
00:26:38,200 --> 00:26:44,080
se usa un PDF y eso instala un montón de librerías que son bastante grandes, me encontré

288
00:26:44,080 --> 00:26:48,880
una que es para soportar lenguajes asiáticos, particularmente chino y coreano que se lleva

289
00:26:48,880 --> 00:26:54,800
casi 200 megabytes, ahí estoy luchando para ver cómo optimizamos. Próximos pasos que

290
00:26:54,800 --> 00:27:00,600
no se muestran aquí, uno es de explique continuo, entonces crear un branch de release

291
00:27:00,600 --> 00:27:05,240
y decirle a Heroku monitorea este branch, entonces tengo mi main, tengo mi equipo de

292
00:27:05,240 --> 00:27:09,120
desarrollo trabajando, yo mismo trabajando solo en eso, cuando tengo un código nuevo

293
00:27:09,120 --> 00:27:12,560
lo paso a main y en algún momento estoy listo que ya quiero hacer un release, ya quiero

294
00:27:12,560 --> 00:27:17,240
liberar para mis usuarios nueva funcionalidad, entonces voy a hacer un pull request desde

295
00:27:17,240 --> 00:27:22,280
mi main hasta mi release branch y tengo a Heroku monitoreando ese release branch, entonces

296
00:27:22,280 --> 00:27:25,880
en vez de todos los comandos que mostré para hacer el push a Heroku, en el momento

297
00:27:25,880 --> 00:27:32,880
en que mi código cae en el release branch, ese código acaba en mi dyno de Heroku. El

298
00:27:33,440 --> 00:27:37,640
siguiente posiblemente páginas web más elaboradas, estamos listos, información de contacto,

299
00:27:37,640 --> 00:27:44,640
bueno ahí está mi link de github, ahí van a encontrar este proyecto que les mostré,

300
00:27:45,840 --> 00:27:49,600
si me quieren contactar en LinkedIn, siempre me encanta hablar con gente que trabaja en

301
00:27:49,600 --> 00:27:55,040
Python, se volvió una pasión para mí, no lo hago mucho en mi trabajo del día, lo hago

302
00:27:55,040 --> 00:27:59,840
un montón en mi trabajo académico y en freelance, me gusta un montón, mi dirección de correo

303
00:27:59,840 --> 00:28:05,440
en la universidad de Washington, si alguna vez quieren estudiar o si siempre estamos

304
00:28:05,440 --> 00:28:12,440
buscando instructores y gente que nos ayude, mi link de twitter también, les agradezco

305
00:28:12,440 --> 00:28:19,440
un montón, disculpen en serio el inicio tan accidentado, pero un placer haber estado aquí

306
00:28:19,600 --> 00:28:26,600
y que me guste mucho, gracias.

307
00:28:26,600 --> 00:28:33,600
Sí, como es un programa de la universidad, ellos quieren estudiarlo, yo diría que lo

308
00:28:42,560 --> 00:28:46,800
que ayuda a estar en un programa académico a veces es que te da sistema y te crea compromiso,

309
00:28:46,800 --> 00:28:51,800
mi experiencia particular, hay gente que es muy buena aprendiendo aun si es gratis,

310
00:28:51,800 --> 00:28:56,800
y a veces dice, pues es gratuito, lo voy a hacer, pero no tienes el compromiso, esta

311
00:28:56,800 --> 00:29:01,800
es la ventaja que a veces le veo cuando te dicen, mira pagaste mil dólares por un curso,

312
00:29:01,800 --> 00:29:06,800
yo veo a mis estudiantes que a veces dicen, me pasó esto, me pasó lo otro, mi perro

313
00:29:06,800 --> 00:29:11,800
lo mató un carro, lo que sea, pero tengo que terminar este curso, me puede dar una

314
00:29:11,800 --> 00:29:14,800
semana más lo que sea, porque valoran el hecho de que tuvieron que poner no solo su

315
00:29:14,800 --> 00:29:19,800
dinero en el curso, tanto disponible así no hay, yo personalmente si trato de poner

316
00:29:19,800 --> 00:29:23,800
código que yo genero, código que son ejemplos míos, si así lo trato de poner todo en mi

317
00:29:23,800 --> 00:29:30,800
repositorio, bueno, en estos links, si no ahora si quieren hablar conmigo voy a estar por

318
00:29:32,800 --> 00:29:34,800
acá un rato, muchas gracias.

