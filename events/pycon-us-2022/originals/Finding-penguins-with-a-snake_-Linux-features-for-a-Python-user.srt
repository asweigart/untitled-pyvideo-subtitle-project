1
00:00:00,000 --> 00:00:05,000
Thank you.

2
00:00:05,000 --> 00:00:11,840
Hello everyone.

3
00:00:11,840 --> 00:00:12,840
My name is Mario.

4
00:00:12,840 --> 00:00:14,640
And I want to make sure you're in the right room.

5
00:00:14,640 --> 00:00:17,040
This is not the pattern matching talk, okay?

6
00:00:17,040 --> 00:00:18,040
That's in another room.

7
00:00:18,040 --> 00:00:19,520
I'm surprised to see many people here.

8
00:00:19,520 --> 00:00:22,440
You still have time to go to the other one.

9
00:00:22,440 --> 00:00:25,000
Well, as I was saying, my name is Mario.

10
00:00:25,000 --> 00:00:27,120
I work at Bloomberg.

11
00:00:27,200 --> 00:00:31,520
And yeah, I want to speak today about basically how to explore

12
00:00:31,520 --> 00:00:37,240
some Linux features and concepts from Python.

13
00:00:37,240 --> 00:00:39,560
The talk could have been just named that, but

14
00:00:39,560 --> 00:00:42,120
it's all about the clickbait, right?

15
00:00:42,120 --> 00:00:46,400
So after the talk, I'm gonna be around, I'm one of these people that love to get

16
00:00:48,280 --> 00:00:51,120
stopped in the hallway and chat about anything.

17
00:00:51,120 --> 00:00:54,800
There are a lot of topics you can speak with me about that doesn't have to be

18
00:00:54,800 --> 00:00:56,200
necessarily Python.

19
00:00:56,760 --> 00:00:59,880
But yeah, hopefully we'll get to meet and share some time together.

20
00:01:01,560 --> 00:01:05,200
So as I was saying, we're gonna speak about Linux and Python.

21
00:01:05,200 --> 00:01:09,640
And we'll see some basic Linux concepts, hopefully through APIs that

22
00:01:09,640 --> 00:01:10,960
you already know.

23
00:01:10,960 --> 00:01:14,760
The objective of this talk is that you will get to hopefully know a little bit

24
00:01:14,760 --> 00:01:18,160
more of Linux through an environment that you're comfortable with.

25
00:01:20,360 --> 00:01:23,360
I think we don't have time for questions at the end, but

26
00:01:23,360 --> 00:01:24,640
I'll be at the hallway.

27
00:01:26,680 --> 00:01:29,680
Okay, so first of all, Linux or Python?

28
00:01:29,680 --> 00:01:33,080
You might be wondering, what does CPython build against?

29
00:01:33,080 --> 00:01:37,680
There is output here to URLs that you can check that will help you figure out

30
00:01:37,680 --> 00:01:41,800
whether the platform you're working on is supported at Python.

31
00:01:41,800 --> 00:01:45,760
On the second link, there's a pipe that defines what that supported means.

32
00:01:45,760 --> 00:01:49,440
There are situations where a release may be blocked based on issues in

33
00:01:49,440 --> 00:01:50,320
that platform.

34
00:01:50,320 --> 00:01:53,720
And there are some others where it is kind of like most best effort.

35
00:01:53,720 --> 00:01:58,800
There is also the Python billboards, where it's basically the farm

36
00:01:58,800 --> 00:02:03,280
that's building CPython against multiple platforms every day.

37
00:02:03,280 --> 00:02:06,120
There is even a watch with a really cool shield.

38
00:02:06,120 --> 00:02:08,200
It's kind of like a really slight group.

39
00:02:08,200 --> 00:02:13,200
You have some people that belong to that here in the talk.

40
00:02:13,200 --> 00:02:17,120
But basically, there is people that are making sure that CPython continues to

41
00:02:17,120 --> 00:02:23,600
build and to run in multiple platforms whenever there's any new mic change and

42
00:02:23,600 --> 00:02:27,120
whenever there is a new change that's made in the source code.

43
00:02:27,120 --> 00:02:31,640
Additionally, you should be aware that CPython release managers only release

44
00:02:31,640 --> 00:02:35,080
pre-built interpreters for macOS and Windows.

45
00:02:35,080 --> 00:02:40,480
And what that means is that if you are using CPython in Linux in any of

46
00:02:40,480 --> 00:02:44,080
its distribution, you are basically using something that's built from source.

47
00:02:44,080 --> 00:02:46,360
You will need, I mean, everything is built from source, but

48
00:02:46,360 --> 00:02:47,720
you will need to build it on your own.

49
00:02:47,720 --> 00:02:51,400
Or in some cases, for example, you're using Ubuntu or something like that.

50
00:02:51,400 --> 00:02:54,560
There will be some package manager that does that for you.

51
00:02:54,560 --> 00:02:57,360
But it's not the Python release managers that are doing that.

52
00:02:57,360 --> 00:02:58,360
It's some other third party.

53
00:03:00,440 --> 00:03:05,640
So getting into the meat, I'm gonna speak through multiple modules that

54
00:03:05,640 --> 00:03:09,160
allow you to interact with APIs that are at the end providing

55
00:03:09,160 --> 00:03:11,240
you services that belong to the OS.

56
00:03:11,240 --> 00:03:14,640
And before we start into that, there's something I'd like to tell you.

57
00:03:14,640 --> 00:03:18,360
Because I work with a lot of Python developers, and

58
00:03:18,400 --> 00:03:21,520
sometimes I find that people don't know about many of the modules that are

59
00:03:21,520 --> 00:03:22,880
part of the Sunday library.

60
00:03:22,880 --> 00:03:27,360
And we're proud to say that our language come with batteries included, but

61
00:03:27,360 --> 00:03:30,360
we never get to know about all the batteries that include.

62
00:03:30,360 --> 00:03:34,200
So here I'm basically listing some of the modules that allow you to interact with

63
00:03:34,200 --> 00:03:39,000
the OS, and I'm sure that many people here in the audience have not seen some of them.

64
00:03:39,000 --> 00:03:43,480
Some, a module, for example, I see many people don't know about, and

65
00:03:43,520 --> 00:03:48,720
it's, in my opinion, quite handy, is filecmp.

66
00:03:48,720 --> 00:03:52,440
That basically allows you to compare if two files are equal or

67
00:03:52,440 --> 00:03:54,120
even compare to directories.

68
00:03:54,120 --> 00:03:58,600
It's super cool, and I'm sure that many of you have written that code on your

69
00:03:58,600 --> 00:04:01,160
own to compare it to directories of files, isn't it?

70
00:04:02,960 --> 00:04:06,880
So if you have the time after this talk or after PyCon or whatever, you can.

71
00:04:06,880 --> 00:04:09,800
There is a page in the CPython documentation

72
00:04:09,800 --> 00:04:12,440
that lists all the module in the standard library.

73
00:04:12,440 --> 00:04:15,480
Just go through it, I'm sure that you'll learn some new cool module.

74
00:04:17,000 --> 00:04:21,760
So we can speak about Linux and Python without speaking about processes.

75
00:04:21,760 --> 00:04:24,880
So a really beef introduction, when we're writing a program,

76
00:04:24,880 --> 00:04:27,520
all we're doing is basically creating instructions, right?

77
00:04:27,520 --> 00:04:30,560
And then those instructions define a program when it's in disk, and

78
00:04:30,560 --> 00:04:35,400
you're gonna move it into memory, and that creates a process in some way.

79
00:04:35,400 --> 00:04:39,120
The process is made of those instructions that we wrote,

80
00:04:39,120 --> 00:04:41,840
together with some state, there is some memory around it.

81
00:04:42,240 --> 00:04:43,920
If you have no experience with it,

82
00:04:43,920 --> 00:04:48,320
I recommend that you read some information around the memory layout of a process.

83
00:04:48,320 --> 00:04:50,400
I promise you, you're gonna be fascinated.

84
00:04:50,400 --> 00:04:54,480
And basically, once you have that in memory, the OS through the scheduler

85
00:04:54,480 --> 00:04:57,400
will prioritize what instructions are being executed.

86
00:04:58,440 --> 00:05:02,280
And that's cool, but how do we create a process in Python, right?

87
00:05:02,280 --> 00:05:05,800
So if you haven't seen it before, no, the slides are cut.

88
00:05:05,800 --> 00:05:10,680
But so is there the media people,

89
00:05:10,680 --> 00:05:16,880
is there any way I can make the, don't worry.

90
00:05:16,880 --> 00:05:22,640
There is a part here in the corner that is going to put on all the slides,

91
00:05:22,640 --> 00:05:24,400
I'll publish the slides afterwards.

92
00:05:24,400 --> 00:05:28,040
But there is a main command for each of the slides that I'm putting that allows

93
00:05:28,040 --> 00:05:29,720
you to go deeper if you want.

94
00:05:29,720 --> 00:05:32,360
But I'll just say that, that's a pity.

95
00:05:32,360 --> 00:05:37,680
So well, fork, through the OS model, you will be able to run the Cisco fork.

96
00:05:37,680 --> 00:05:41,400
And what that allows you to do is basically get the current program and

97
00:05:41,400 --> 00:05:44,520
create a clone on its own.

98
00:05:44,520 --> 00:05:47,320
And that's gonna be a child process.

99
00:05:47,320 --> 00:05:52,400
This is kind of like the most, well, the way to create new processes on Linux.

100
00:05:52,400 --> 00:05:55,920
You can see that what the API allows you is you call os.fork, and

101
00:05:55,920 --> 00:05:57,080
that's gonna give you a return code.

102
00:05:57,080 --> 00:06:00,120
The return code is gonna be 0 in the case of the child, and

103
00:06:00,120 --> 00:06:02,400
it's gonna be the PID of the parent, sorry,

104
00:06:02,400 --> 00:06:04,360
the PID of the child in the case of the parent.

105
00:06:05,760 --> 00:06:11,120
This is really handy way to just allow you to run some coding parallel, right?

106
00:06:11,120 --> 00:06:16,440
Here you can see how in this example, we are basically starting a program, right?

107
00:06:16,440 --> 00:06:22,400
Then we're calling fork, and those two things are going to be executed in parallel.

108
00:06:22,400 --> 00:06:25,480
The child process is gonna run the first section of the if, and

109
00:06:25,480 --> 00:06:27,600
the parent process is going to run the second part.

110
00:06:27,600 --> 00:06:31,280
When I say that when you run fork, the process is duplicated,

111
00:06:31,280 --> 00:06:36,200
you might be thinking that, wow, that has to be really expensive, right?

112
00:06:36,200 --> 00:06:39,000
And there are many optimizations to make sure that that's not the case.

113
00:06:39,000 --> 00:06:40,160
A good example is that, for example,

114
00:06:40,160 --> 00:06:43,040
in Linux there's a concept what's called copy and write.

115
00:06:43,040 --> 00:06:45,080
And what that means is that when you're actually forking,

116
00:06:45,080 --> 00:06:46,160
you are not copying the whole thing.

117
00:06:46,160 --> 00:06:50,880
You are only going to start to copy that part of memory when you modify them.

118
00:06:50,880 --> 00:06:53,240
Which is really handy if you think about, for example, these functions and

119
00:06:53,240 --> 00:06:56,720
all the code that are there, which is not going to be changed.

120
00:06:56,720 --> 00:06:58,840
Something that I also wanted to mention here, and

121
00:06:58,840 --> 00:07:01,320
which you can find in the man page if you read that.

122
00:07:01,320 --> 00:07:04,560
And I really recommend that you run man fork if you ever have to interact with

123
00:07:04,560 --> 00:07:07,320
any of this, is that threads are not copied.

124
00:07:07,320 --> 00:07:11,760
When you run fork, only the thread that's executing that is going to be the one

125
00:07:11,760 --> 00:07:12,880
that's going to be cloned.

126
00:07:14,360 --> 00:07:18,360
Again, don't be afraid of the Linux manual, I promise you.

127
00:07:18,360 --> 00:07:22,520
It's really nice and easy to read, especially when you know what

128
00:07:22,520 --> 00:07:24,360
the thing is doing.

129
00:07:24,360 --> 00:07:27,000
So it's a pity that we cannot see it here in the slides, but

130
00:07:27,000 --> 00:07:28,840
there at the top it says man fork.

131
00:07:31,600 --> 00:07:33,240
The second thing I want to speak about,

132
00:07:33,240 --> 00:07:38,880
you can speak about fork without exec, is the exec API.

133
00:07:38,880 --> 00:07:42,000
This is going to allow you to interact, well, there are multiple functions.

134
00:07:42,000 --> 00:07:46,520
You can find in the OS documentation of Python the different functions that

135
00:07:46,520 --> 00:07:49,000
allows you to interact with exec in different ways.

136
00:07:49,000 --> 00:07:50,960
Because you might want to pass different,

137
00:07:50,960 --> 00:07:53,960
basically the API just changes how you can pass parameters.

138
00:07:54,040 --> 00:07:55,360
And some other things, so for example,

139
00:07:55,360 --> 00:07:59,720
where the path environment variable is going to be used to find the command.

140
00:08:00,800 --> 00:08:05,520
But basically what this is going to do is it's going to replace the current process

141
00:08:05,520 --> 00:08:08,440
with the one that you passed it here.

142
00:08:08,440 --> 00:08:11,880
So here we're just saying this program is just importing OS and

143
00:08:11,880 --> 00:08:15,200
then it's saying, okay, replace myself with this new program.

144
00:08:15,200 --> 00:08:18,400
And that's going to execute Python 3.9 and it's going to execute that.

145
00:08:18,400 --> 00:08:23,400
You can realize that line number six is never going to be executed.

146
00:08:23,400 --> 00:08:24,800
Because you're replacing the whole program and

147
00:08:24,800 --> 00:08:27,640
therefore the instructions of the previous program,

148
00:08:27,640 --> 00:08:29,280
that no longer sticks in that process.

149
00:08:30,680 --> 00:08:33,880
At the top there, you can see a new man reference, which is man exec.

150
00:08:36,160 --> 00:08:41,060
Okay, something else that might be handy when you are doing fork and

151
00:08:41,060 --> 00:08:46,000
exec is that you can register at fork handlers.

152
00:08:46,000 --> 00:08:50,240
What this allows you to do is to execute code before you fork or after you fork.

153
00:08:50,240 --> 00:08:55,000
And you can customize that in both in the parent and in the child.

154
00:08:55,000 --> 00:08:59,320
Python allows you to do this really nicely through this OS register at fork.

155
00:08:59,320 --> 00:09:02,120
You can basically pass function there with what you want to execute.

156
00:09:04,320 --> 00:09:06,920
Okay, so you might be wondering, okay, Mario, I've never used any of this.

157
00:09:06,920 --> 00:09:08,440
Why are you speaking to me about it?

158
00:09:08,440 --> 00:09:11,080
Well, have you used a subprocess?

159
00:09:11,080 --> 00:09:14,000
If you have ever used a process to run anything like this,

160
00:09:14,000 --> 00:09:17,560
this is a code example taken from the subprocess documentation.

161
00:09:17,560 --> 00:09:19,320
You are indeed using this.

162
00:09:19,320 --> 00:09:23,040
This is the source code behind subprocess, so you can see there.

163
00:09:23,040 --> 00:09:24,600
I'm not lying to you.

164
00:09:24,600 --> 00:09:27,720
And here is basically doing fork and exec.

165
00:09:27,720 --> 00:09:30,400
Something similar to how we say go and

166
00:09:30,400 --> 00:09:33,880
read the different modules that they have in the standard library.

167
00:09:33,880 --> 00:09:37,840
There are some modules that are really easy to read and understand what's going on.

168
00:09:37,840 --> 00:09:41,520
So I would encourage you as well to go and read the source code of some modules,

169
00:09:41,520 --> 00:09:44,760
because then you can understand what's actually happening behind.

170
00:09:44,760 --> 00:09:48,800
In this case, indeed, it's just calling fork and exec.

171
00:09:48,800 --> 00:09:52,840
And you can see here how it's the same structure that we saw before,

172
00:09:52,840 --> 00:09:56,080
where it's just calling fork, getting the PID of the child, right?

173
00:09:56,080 --> 00:10:00,760
And here it's checking if the PID is zero, that means that we are in the child.

174
00:10:00,760 --> 00:10:04,560
So it means that we are in the parent, so we are just returning.

175
00:10:04,560 --> 00:10:06,560
Otherwise, here you have the code for the child.

176
00:10:06,560 --> 00:10:10,080
You can see here again the code to the after fork in the child.

177
00:10:10,080 --> 00:10:13,320
There is also another section in the code that does the after fork of the parent,

178
00:10:13,320 --> 00:10:16,920
but I didn't include it in this slide.

179
00:10:16,960 --> 00:10:19,600
Similar to how a process just do fork and exec,

180
00:10:19,600 --> 00:10:21,360
multiprocessing does something really similar.

181
00:10:21,360 --> 00:10:23,880
So believe it or not, you have been using this all the time, and

182
00:10:23,880 --> 00:10:25,120
not only on Python, of course.

183
00:10:27,040 --> 00:10:30,160
Some more things, if we start to speak about files,

184
00:10:30,160 --> 00:10:35,520
something I love also to show some people is how you can just,

185
00:10:35,520 --> 00:10:40,680
you probably know that your process is always writing to standard output, right?

186
00:10:40,680 --> 00:10:42,240
And it's reading from standard.

187
00:10:42,240 --> 00:10:44,520
Those are just normal files.

188
00:10:44,520 --> 00:10:46,880
They're really not text files, but those are files that you

189
00:10:46,880 --> 00:10:48,200
can even open on your own.

190
00:10:48,200 --> 00:10:52,080
Here you can see how, for example, you can just open std out and

191
00:10:52,080 --> 00:10:54,080
append to it and read from stdin.

192
00:10:55,800 --> 00:11:00,960
Something to mention here that I know catches some people is

193
00:11:00,960 --> 00:11:04,800
you can see here how we write hello, PyCon, add Solixct, but

194
00:11:04,800 --> 00:11:11,280
only the first line is actually printed before we read stdin.

195
00:11:11,280 --> 00:11:15,560
If you wonder why that's happening, in the sense of why do we see hello, Python,

196
00:11:15,560 --> 00:11:19,080
we have to press Enter and then the other line appears when in the code we

197
00:11:19,080 --> 00:11:23,360
can see that it's writing twice to std out and then reading from stdin.

198
00:11:23,360 --> 00:11:25,840
That's because the output is being buffered.

199
00:11:25,840 --> 00:11:31,520
I'm sure that many of you have loved to live cowboy lives and

200
00:11:31,520 --> 00:11:36,080
have removed your USB-staking windows without extracting the device.

201
00:11:36,080 --> 00:11:39,280
But that's actually the reason why it's happening, and that's because the Python

202
00:11:39,280 --> 00:11:42,760
or the OS, depending, there are multiple layers, will be buffering the output that

203
00:11:42,760 --> 00:11:45,240
you write to a file or to a media or anything like that.

204
00:11:45,240 --> 00:11:47,480
So you need to make sure that those are buffered before you close.

205
00:11:48,560 --> 00:11:51,960
If you want to go a little bit further and see what's actually std out,

206
00:11:51,960 --> 00:11:55,240
because you might wonder, hey, if this is just a file,

207
00:11:55,240 --> 00:12:00,760
how come that I can have multiple processes running right into it and

208
00:12:00,760 --> 00:12:02,160
they are not colliding, right?

209
00:12:02,160 --> 00:12:06,040
I can have multiple terminal screens and they are not interacting with each other.

210
00:12:06,040 --> 00:12:07,320
How does this work?

211
00:12:07,320 --> 00:12:09,280
So what's actually happening is that std out and

212
00:12:09,280 --> 00:12:11,920
std error just point to this like, proc self.

213
00:12:11,920 --> 00:12:15,520
If you haven't ever walked a little bit through proc,

214
00:12:15,520 --> 00:12:17,680
I encourage you to do it as well.

215
00:12:17,680 --> 00:12:21,000
You can find all the information about the process there.

216
00:12:21,000 --> 00:12:24,240
And what's actually happening is that's basically just pointing to a file

217
00:12:24,240 --> 00:12:29,400
descriptor, your process, and then I think I have time.

218
00:12:29,400 --> 00:12:33,400
And that's actually, I'm gonna show you what actually happens there.

219
00:12:33,400 --> 00:12:36,480
And that then is pointing to your terminal.

220
00:12:36,520 --> 00:12:41,800
So for example, here, if you see proc self,

221
00:12:41,800 --> 00:12:45,840
live demo, woo, fd1.

222
00:12:47,520 --> 00:12:52,080
So that's actually just a symlink to my terminal.

223
00:12:52,080 --> 00:12:55,360
You can see here if I run tty, that matches.

224
00:12:55,360 --> 00:12:59,480
And what that means is that basically std out is being pointed to that file

225
00:12:59,480 --> 00:13:02,680
descriptor, and then that file descriptor is pointed to my terminal.

226
00:13:02,680 --> 00:13:07,240
And this is as fun as you can just take this and write things here.

227
00:13:07,240 --> 00:13:09,720
You can write, hello PyCon from here.

228
00:13:12,680 --> 00:13:14,120
And that totally works, it's just a file.

229
00:13:14,120 --> 00:13:16,080
You can even write from a different terminal.

230
00:13:19,600 --> 00:13:20,680
And that will work.

231
00:13:20,680 --> 00:13:23,280
And of course you can do exactly the same thing from PyCon.

232
00:13:23,280 --> 00:13:24,440
You can see it's here.

233
00:13:24,440 --> 00:13:27,600
You can even cut it, you can even read from it if you want.

234
00:13:27,600 --> 00:13:29,680
And then fun things start to happen.

235
00:13:29,680 --> 00:13:32,080
Like for example, if you write here,

236
00:13:36,160 --> 00:13:39,240
both of them are running and you'll see it in both places.

237
00:13:39,240 --> 00:13:43,840
It's at the end, the API I'm working with is just a file descriptor.

238
00:13:43,840 --> 00:13:46,240
So you can just work with it as with any other file descriptor.

239
00:13:47,400 --> 00:13:48,680
Really cool stuff.

240
00:13:48,680 --> 00:13:52,000
You can, yeah, let's continue because I'm actually running out of time.

241
00:13:54,680 --> 00:13:56,560
Similar to how you can open and read files,

242
00:13:56,560 --> 00:13:58,720
you can also read about the metadata from Python.

243
00:13:58,720 --> 00:14:00,320
There's a stat command in Linux and

244
00:14:00,320 --> 00:14:04,080
you have the stat module in Python that allows you to read all of that.

245
00:14:05,920 --> 00:14:08,600
Okay, how am I doing with time?

246
00:14:10,000 --> 00:14:14,320
Okay, so next thing is the locale module.

247
00:14:14,320 --> 00:14:19,360
Again, you can read man set locale and that will allow you to learn a little

248
00:14:19,360 --> 00:14:23,240
bit more on the Linux man pages about how the locale works.

249
00:14:23,240 --> 00:14:27,760
But this allows you to handle all kind of like cultural

250
00:14:27,760 --> 00:14:30,160
specificities about your code.

251
00:14:30,160 --> 00:14:32,640
Here I'm putting an example of how you, for example,

252
00:14:32,640 --> 00:14:41,080
can use locale to parse that string 43, 210 into a float.

253
00:14:41,080 --> 00:14:44,320
And you can see that you get different results whether you're using the US locale

254
00:14:44,320 --> 00:14:45,720
or the Spanish locales.

255
00:14:45,720 --> 00:14:50,360
All programs start with what's called the legacy C locale.

256
00:14:50,360 --> 00:14:53,920
But you can change that once you start by changing the locale here.

257
00:14:53,920 --> 00:14:58,400
Probably when you are working with locale specific programs,

258
00:14:58,400 --> 00:15:00,080
you're using more high level modules.

259
00:15:00,080 --> 00:15:02,160
But it's always good to know what's behind the hoods.

260
00:15:02,160 --> 00:15:06,000
And this basically what allows you is to read that information from the OS.

261
00:15:06,000 --> 00:15:09,200
If you wanted to add more locales, what you need to do is basically install

262
00:15:09,200 --> 00:15:11,560
the interior as some language pack and that will give you that.

263
00:15:13,840 --> 00:15:15,920
Okay, so time, this is a topic I love.

264
00:15:16,880 --> 00:15:20,240
If you might be wondering, what's so hard about time?

265
00:15:20,240 --> 00:15:23,040
Why do I need the OS to give me the time?

266
00:15:23,040 --> 00:15:28,880
Well, the thing is, time is not, hopefully this is not new to you,

267
00:15:28,880 --> 00:15:35,400
but time is a complex concept to, it's just hard to know what time is this.

268
00:15:35,400 --> 00:15:37,000
How crazy it sounds.

269
00:15:37,000 --> 00:15:42,280
But the thing is like in Python, the time is being provided by the OS.

270
00:15:42,280 --> 00:15:45,200
And the OS actually works with some hardware code,

271
00:15:45,200 --> 00:15:49,200
which is just using quotes because that provides,

272
00:15:49,240 --> 00:15:53,760
that gives you something that gives you a periodic event that you can check.

273
00:15:53,760 --> 00:15:59,680
And then your PC is going to be able to track how seconds pass by using quotes.

274
00:15:59,680 --> 00:16:02,120
And then your OS will be able to read that and

275
00:16:02,120 --> 00:16:08,040
will combine that with the time from all the PCs which is being given to you by NTP.

276
00:16:08,040 --> 00:16:11,000
At the end, the time is just given to you,

277
00:16:11,000 --> 00:16:15,640
it's actually being provided by some atomic clocks that you don't have to worry about.

278
00:16:15,640 --> 00:16:19,000
But it's good to know that whenever you are asking Python for

279
00:16:19,000 --> 00:16:21,320
what time is it, all this is happening.

280
00:16:21,320 --> 00:16:25,800
And the reason why I'm saying that is because you might start to build some

281
00:16:25,800 --> 00:16:28,040
assumptions around it that you should not.

282
00:16:28,040 --> 00:16:31,680
Like for example, that the time is monotonic and extending.

283
00:16:31,680 --> 00:16:33,520
So that's something you can actually not rely on time.

284
00:16:36,240 --> 00:16:40,760
Yeah, this basically allows us to call to the OS and get the time that it is.

285
00:16:40,760 --> 00:16:43,880
And you might wonder, yeah, but I never use time.time, I use daytime.

286
00:16:43,880 --> 00:16:46,800
Well, if you read the code, it's actually the same thing.

287
00:16:46,800 --> 00:16:51,480
All time in Python is actually being provided by the OS by just calling time.time.

288
00:16:51,480 --> 00:16:52,520
Here is the underscore time,

289
00:16:52,520 --> 00:16:55,800
which is the extension that's actually calling them to the OS.

290
00:16:57,560 --> 00:17:01,560
You cannot see the man pages here, but here actually it says man and tpd.

291
00:17:01,560 --> 00:17:05,760
And it allows you to know how this protocol that synchronizes your time with

292
00:17:05,760 --> 00:17:07,640
all the PCs work.

293
00:17:07,640 --> 00:17:12,440
Because probably many of you here will have a watch.

294
00:17:12,440 --> 00:17:16,400
And it's important to realize that your watch will have a different time from my

295
00:17:16,400 --> 00:17:17,000
watch.

296
00:17:17,000 --> 00:17:21,560
And even if we were to synchronize them right now, after a day or a month or

297
00:17:21,560 --> 00:17:27,080
a year, because your watch is probably based on quarts or it's mechanical,

298
00:17:27,080 --> 00:17:30,240
it will lose synchronization with each other.

299
00:17:30,240 --> 00:17:32,440
And you need to synchronize them from time to time to make sure that you are

300
00:17:32,440 --> 00:17:33,680
following the same time.

301
00:17:35,600 --> 00:17:39,560
So you get all of this for free in Python because it's just asking the OS to give

302
00:17:39,560 --> 00:17:40,060
it the time.

303
00:17:41,020 --> 00:17:45,820
And in case you wonder, because you have seen this YouTube channel, Veritasium,

304
00:17:45,820 --> 00:17:49,300
call like, how can I handle leap seconds?

305
00:17:49,300 --> 00:17:53,180
Well, the thing is the OS is giving you the time in what's called Unix time.

306
00:17:53,180 --> 00:17:55,100
And that's not include leap seconds.

307
00:17:55,100 --> 00:17:57,740
So if the OS does not know about leap seconds,

308
00:17:57,740 --> 00:17:59,580
Python cannot know about leap seconds.

309
00:18:02,340 --> 00:18:04,220
Okay, so let's go with signals.

310
00:18:04,220 --> 00:18:08,220
So signals are just a software interrupt to notify a process of an important event.

311
00:18:08,220 --> 00:18:12,020
There are many events that your process might want to know about, and

312
00:18:12,020 --> 00:18:14,380
the OS can pass that to them.

313
00:18:14,380 --> 00:18:18,580
You can also just call kill and basically pass a signal to your program.

314
00:18:18,580 --> 00:18:21,860
There are usual signals that you can customize yourself.

315
00:18:21,860 --> 00:18:25,260
And then there are signals to tell the process to interrupt itself.

316
00:18:25,260 --> 00:18:30,340
Or there's also a signal that surprised many people, which is the sigpipe.

317
00:18:30,340 --> 00:18:36,540
What that means is that you saw how before we saw there's std out,

318
00:18:36,580 --> 00:18:42,580
std in, in Linux when you have a command and

319
00:18:42,580 --> 00:18:45,380
then you put the pipe symbol and another command.

320
00:18:45,380 --> 00:18:49,260
What actually happened there is that the OS is mapping the std out of your first

321
00:18:49,260 --> 00:18:51,620
command to the stdn to the first one.

322
00:18:51,620 --> 00:18:55,700
So if one of the, there's no file there really, right?

323
00:18:55,700 --> 00:18:57,980
So what's happening is that when one of those processes die,

324
00:18:57,980 --> 00:19:00,540
the pipe is broken because one is not connected anymore.

325
00:19:00,540 --> 00:19:07,180
So that's the OS is going to notify you via that pipe broken signal.

326
00:19:08,300 --> 00:19:11,140
Something where you might have seen signals as well if you're running web

327
00:19:11,140 --> 00:19:16,620
applications, a really common practice, is to basically handle the siginterrupt

328
00:19:16,620 --> 00:19:20,580
as a way to have a way to tell your process like, hey, I want you to stop

329
00:19:20,580 --> 00:19:22,740
because I'm running or start the machine or whatever.

330
00:19:22,740 --> 00:19:26,180
So you can customize what to do with sigint and

331
00:19:26,180 --> 00:19:29,140
basically clean up your process before exiting.

332
00:19:29,140 --> 00:19:32,660
And if they don't exit, then you can just run sigkill,

333
00:19:32,660 --> 00:19:37,380
which no one can overwrite, and it will just kill your process in a nice way.

334
00:19:37,380 --> 00:19:40,780
And how is all of this handled in Python?

335
00:19:40,780 --> 00:19:43,620
Well, you can call, you have the signal module, and

336
00:19:43,620 --> 00:19:45,500
here you have an example of how to register a signal.

337
00:19:47,220 --> 00:19:50,300
This might cause you a nightmare because you might have realized that now any

338
00:19:50,300 --> 00:19:54,180
instruction in your Python program can run any kind of,

339
00:19:54,180 --> 00:19:55,820
can raise any kind of exception.

340
00:19:55,820 --> 00:19:59,860
Please don't start to capture zero division errors around time.sleep, okay?

341
00:20:01,180 --> 00:20:05,100
So here you can see how to register a handler for any signal.

342
00:20:05,100 --> 00:20:08,540
And something to be aware is how does Python handle those signals, right?

343
00:20:08,540 --> 00:20:12,700
Because signals are done on a lower level.

344
00:20:12,700 --> 00:20:16,820
So what's actually happening is that Python will always pass those signals and

345
00:20:16,820 --> 00:20:18,500
call the signal handlers in the main thread.

346
00:20:19,540 --> 00:20:21,660
And the same way that signals are handled in the main thread,

347
00:20:21,660 --> 00:20:23,340
signal needs to be registered in the main thread.

348
00:20:23,340 --> 00:20:25,900
You cannot register a signal in any other thread.

349
00:20:25,900 --> 00:20:27,540
Something that Python will do by default for

350
00:20:27,540 --> 00:20:31,980
you is translate sigint to a keyboard interrupt exception.

351
00:20:31,980 --> 00:20:34,060
And sigpipe to a broken pipe error exception.

352
00:20:35,300 --> 00:20:40,500
If for every reason you wanted to overwrite sigfold and some other signals,

353
00:20:40,500 --> 00:20:43,860
that won't work as you expect in Python because at the end they're gonna be

354
00:20:43,860 --> 00:20:48,860
passed again to the C level and your program will not behave as you probably expect.

355
00:20:48,860 --> 00:20:51,780
So you have another module in the standard library called

356
00:20:53,660 --> 00:20:55,140
fold handler that will allow you to do that.

357
00:20:57,180 --> 00:20:59,980
Okay, so main pipes, I don't know why I love this.

358
00:20:59,980 --> 00:21:03,740
They are a really simple way to have inter-process communication.

359
00:21:03,740 --> 00:21:07,180
What this allows you to do is you can have a file where you can have two, well,

360
00:21:07,180 --> 00:21:10,540
a file, where you can have two process connect and

361
00:21:10,540 --> 00:21:12,180
pass information from one to another.

362
00:21:12,180 --> 00:21:16,740
It's unidirectional and here you have an example on how to do that.

363
00:21:17,740 --> 00:21:21,740
Something to note is that you need to have both sides connected,

364
00:21:21,740 --> 00:21:24,580
otherwise they will by default block on it.

365
00:21:24,580 --> 00:21:28,460
So that's why here you see some API's related to how to connect without blocking

366
00:21:28,460 --> 00:21:30,020
and things like that.

367
00:21:30,020 --> 00:21:34,220
And basically, yeah, you cannot see the man page there, but

368
00:21:34,220 --> 00:21:38,220
you can read man.fifo and you'll get more information about that.

369
00:21:38,220 --> 00:21:42,020
If you want to use main pipes, go and read that because maybe something that

370
00:21:42,020 --> 00:21:43,020
surprises you.

371
00:21:43,020 --> 00:21:46,700
Something I like to do when I'm using main pipes as well is on the reader

372
00:21:46,700 --> 00:21:56,460
process I like to have as well an open file descriptor with the right permission.

373
00:21:56,460 --> 00:22:00,420
That's a way to unblock myself if I have some kind of multi-threading application.

374
00:22:02,220 --> 00:22:06,980
But if you like this, you would love Unix domain sockets.

375
00:22:06,980 --> 00:22:09,380
So what this allows you to do is similar,

376
00:22:09,380 --> 00:22:13,140
you have kind of like a file that allows you to have two process communicate with

377
00:22:13,140 --> 00:22:13,820
each other.

378
00:22:13,820 --> 00:22:16,020
But here you have a bidirectional channel.

379
00:22:16,020 --> 00:22:20,140
So that means that you'll need to use send and recv.

380
00:22:20,140 --> 00:22:23,100
But this allows you to have basically a communication between two processes.

381
00:22:23,100 --> 00:22:26,620
Similar to how you can use a socket to communicate with a process in

382
00:22:26,620 --> 00:22:27,620
a different host.

383
00:22:27,620 --> 00:22:30,820
You can use Unix domain socket to communicate with a process in the same host.

384
00:22:32,860 --> 00:22:36,540
Something that's amazing about this is that because it's a file,

385
00:22:36,540 --> 00:22:38,260
you can control permissions.

386
00:22:38,260 --> 00:22:41,220
Like who can read and who can write just with file permissions,

387
00:22:41,220 --> 00:22:43,420
which I think it's beautiful.

388
00:22:43,420 --> 00:22:48,300
Okay, so if you want to do this and

389
00:22:48,300 --> 00:22:51,900
you want to combine it with fork and exec,

390
00:22:51,900 --> 00:22:54,460
here we have an example that's kind of like full end to end.

391
00:22:55,900 --> 00:22:58,140
So here you can see how you can use socket socketper,

392
00:22:58,140 --> 00:23:00,540
which is another function that you have in the standard library.

393
00:23:00,540 --> 00:23:04,260
And that's going to give you basically two variables that you can use to

394
00:23:04,260 --> 00:23:05,500
communicate between each other.

395
00:23:05,500 --> 00:23:10,700
So here you can see that we call socketper and then we have the call to fork.

396
00:23:10,700 --> 00:23:12,500
So now you have to know, okay, so

397
00:23:12,500 --> 00:23:15,500
I have now two programs running through this, right?

398
00:23:15,500 --> 00:23:19,140
And we can see that in the child, we can use this child socket to send

399
00:23:19,140 --> 00:23:22,380
information to the parent and the other way around.

400
00:23:22,380 --> 00:23:27,140
Which is a super easy way to send information from one process to another.

401
00:23:29,620 --> 00:23:33,700
If you wonder what is all of this useful for, that allows you to then create,

402
00:23:33,700 --> 00:23:35,500
this is the sponsor slide.

403
00:23:35,500 --> 00:23:38,540
This allows you then to create products like Mainbray.

404
00:23:38,540 --> 00:23:42,060
So if you haven't heard about Mainbray, it's a new memory profiler that we built.

405
00:23:44,780 --> 00:23:49,300
The reason why I'm including here is because if you like to know more about

406
00:23:49,300 --> 00:23:52,540
some Linux feature, I would really recommend that you read through

407
00:23:52,540 --> 00:23:53,980
the source code.

408
00:23:53,980 --> 00:23:58,020
It has not only some advanced and beautiful concepts, but

409
00:23:58,020 --> 00:23:59,940
it's really well documented.

410
00:23:59,940 --> 00:24:04,260
And we have actually got some really cool comments from people

411
00:24:04,260 --> 00:24:07,060
about how well and fine is to read the source code.

412
00:24:07,060 --> 00:24:07,740
I promise, really.

413
00:24:08,940 --> 00:24:11,420
It basically, have a look through it.

414
00:24:11,420 --> 00:24:18,380
I am not one of these fanboys that will just publish

415
00:24:18,380 --> 00:24:22,860
a tool with flags and T-shirts and everything.

416
00:24:22,860 --> 00:24:24,620
Don't trust that kind of people, okay?

417
00:24:24,620 --> 00:24:31,020
But if you have the time, I would really recommend that you have a look at it.

418
00:24:31,020 --> 00:24:33,820
Totally objective, okay?

419
00:24:33,860 --> 00:24:37,980
And yeah, check it out because you have many concepts that you might like that

420
00:24:37,980 --> 00:24:39,580
are related to this presentation as well.

421
00:24:40,660 --> 00:24:41,980
And that's all I have.

422
00:24:42,940 --> 00:24:43,620
Thank you.

423
00:24:43,620 --> 00:24:46,020
Thank you.

424
00:24:46,020 --> 00:24:48,120
Thank you.

