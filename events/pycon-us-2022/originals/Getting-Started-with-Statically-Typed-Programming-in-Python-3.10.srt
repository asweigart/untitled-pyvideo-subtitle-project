1
00:00:00,000 --> 00:00:13,000
Hello. Good afternoon, everyone. Now we will have a talk on getting started with statically

2
00:00:13,000 --> 00:00:19,400
type programming in Python by Peacock. And since COVID is still a thing, we're not doing

3
00:00:19,400 --> 00:00:26,000
a Q&A here. The speaker will be happy to take your questions in the hallway. Thank you.

4
00:00:27,000 --> 00:00:39,840
Okay. Thank you. It is first time speaking for being outside in person, so I feel so nervous.

5
00:00:39,840 --> 00:00:47,520
So, okay. Let's start. My talk title is Getting Started with Statically

6
00:00:47,520 --> 00:01:01,960
Typed Programming in Python 3.10. Okay. Oops. Before I start my talking, let me self-introduce

7
00:01:01,960 --> 00:01:15,600
the table of contents. Okay. Previewed pictures or screenshots on suite. The hashtag is the

8
00:01:16,080 --> 00:01:29,760
oops. Python US 2022. Slide is uploaded. You can also see there. Okay. That is me. Self-introduction.

9
00:01:29,760 --> 00:01:44,880
My name is Peacock or Yoichi Takai. Social media ID is Peacock0803SZ. And so my full name is Yoichi

10
00:01:44,880 --> 00:01:55,080
Takai. But please call me Peacock. Just. Okay. My hobbies and favorites is playing with the

11
00:01:55,080 --> 00:02:05,840
clarinet and listening classical music, skiing, gadgets, or more. And I'm 20 years old. This is

12
00:02:05,840 --> 00:02:20,000
my first trip abroad. So it's tiresome. Thank you. Okay. My works and communities is there. My company

13
00:02:20,000 --> 00:02:34,040
is CMS Fulltime since 2020. There is my boss. I'm a web application developer using Flask,

14
00:02:34,360 --> 00:02:47,440
Pyramid, or Brom. Yes. I have experience learning Haskell and TypeScript. And now I'm reading

15
00:02:47,440 --> 00:02:56,640
program types and programming languages as well as for Tuple. And my communities, I belong to

16
00:02:56,640 --> 00:03:09,320
my community. I'm a member of Brom JP. And I'm staff of PyCon JP since 2020. And this year,

17
00:03:09,320 --> 00:03:22,960
2022 is Vice Chair and operating member of PyCon JP Association. I'm director of PyCon JP TV. It is

18
00:03:22,960 --> 00:03:35,800
YouTube Live about local PyCons and other events monthly. There is today's topics. First, why I

19
00:03:35,800 --> 00:03:49,680
talk about typing. This is motivation. And second, I introduce basically uses first step of typing.

20
00:03:49,680 --> 00:04:04,080
That is what I most want to say. And then GenX and user-defined types. Oh, okay. It is best practice

21
00:04:04,080 --> 00:04:17,640
is included. And last, update overview and background compatibility for 3.9 of before. And last topic,

22
00:04:17,760 --> 00:04:32,320
overviews new features on 3.10. And one topic about 3.11. Okay. This is my motivations. Yes. It's

23
00:04:32,320 --> 00:04:46,360
been seven years since typing the PRs in Python 3.5 at 2015. So many big tips were adapted and

24
00:04:46,680 --> 00:04:57,600
updated over the years. So even now, I think many people don't know where to start because there is

25
00:04:57,600 --> 00:05:12,480
coherent information. Yes. This is what I will not talk about. Yes. Configurations of MyPy is

26
00:05:12,480 --> 00:05:27,640
so important topic, but it's so long, so I skipped. And for example, CIS, history, implementation,

27
00:05:27,640 --> 00:05:38,960
and AST, I will not talk about. And yes, this is my bodies. Okay. Let's start look how to

28
00:05:38,960 --> 00:05:52,000
the other start typing. Okay. This is what makes you happy. It knows type when you reference it

29
00:05:52,000 --> 00:06:04,800
in such as VSCode or Vim. It gets angry when I try to give it long ones. And the dot computation

30
00:06:04,800 --> 00:06:15,200
will work when accessing return value of the function using dot. Okay. Without typing, yes,

31
00:06:15,200 --> 00:06:31,480
we can't know the errors. Yes. It will cause type errors, but we can't know. With typing,

32
00:06:31,480 --> 00:06:45,240
but with typing, yes, like this. And as I can tell, argument is long, yes, like this. In code review,

33
00:06:45,240 --> 00:07:03,040
this is actually in my experience that this, my boss said, what types do functionally dance?

34
00:07:03,040 --> 00:07:21,480
Strings, false or null. That's made two types. So it is unhappy. But like this, yes. But with

35
00:07:21,480 --> 00:07:32,160
typing, boss said, it looks like this function may return three types. Isn't that too much? I see.

36
00:07:32,160 --> 00:07:46,240
That could be bad design. Let me fix it. Sure, please. Yes. Okay. Starting this, let's start

37
00:07:47,240 --> 00:07:55,000
of definitions. This is nothing too difficult. Just the right type. After the arguments,

38
00:07:55,000 --> 00:08:02,880
write colon and the types. Before the colon and the end of the function definition,

39
00:08:02,880 --> 00:08:18,800
write arrow and the types. Okay. This is standard types using to do nothing. There are bytes,

40
00:08:18,800 --> 00:08:32,800
floats, int and str. And null is used for functions that returns nothing, yes. Such as

41
00:08:32,800 --> 00:08:47,640
main functions. Yes. Yes, this is very, very danger, final result. Any can hold instance of

42
00:08:47,640 --> 00:08:59,560
any types. Of course, it is better not to use it. When using it, import use and then typing when

43
00:08:59,560 --> 00:09:13,360
necessary. Yes. This is very danger, final result. Okay. Since stats from the upper case,

44
00:09:13,360 --> 00:09:28,560
yes, collections, so it can use without import. Yes. Before 3.9, you must, you have to write this

45
00:09:28,560 --> 00:09:41,920
sentence. But now it's deprecated. So you may use dict or list using stats with small case. And

46
00:09:42,880 --> 00:09:52,080
these collections can be written with square brackets for the type inside. Okay. Other modules

47
00:09:52,080 --> 00:10:01,480
are available in standard library. A collection is, for example, q or default dict. Collection.abc,

48
00:10:01,480 --> 00:10:14,120
the interval or the protocol related. Yes. And RE has regular expression modules. And finally,

49
00:10:14,120 --> 00:10:30,400
context-related items such as using data or data leave. Okay. There is so many types in

50
00:10:30,560 --> 00:10:41,680
collections.abc. So it is better to use collections with few methods in case to readability and

51
00:10:41,680 --> 00:10:52,480
portability. The next figure, next page figure shows that relationships that between collections.abc

52
00:10:52,480 --> 00:11:00,120
and the sequence of the built-in types is defined by the method, instance method,

53
00:11:00,120 --> 00:11:14,880
the implementation. It is good idea to look at method, fewer methods, so narrowing. Okay.

54
00:11:15,360 --> 00:11:25,440
Let's see. Yeah. This is great method in 3.9. So it is complex but do not feel difficult.

55
00:11:25,440 --> 00:11:40,440
The bottom of the figure, the fewer method it has on the top side, this side, you just want

56
00:11:40,440 --> 00:11:52,640
the more method it has. For example, if you want to loop over sequence of the arguments in the

57
00:11:52,640 --> 00:12:06,120
function, you can use the collections.abc.iterable. Yes. If you need random access, use sequences.

58
00:12:06,120 --> 00:12:22,080
Or if you need change the value, the use type is immutable. Or if you simply specify the list

59
00:12:22,080 --> 00:12:35,680
of the arguments type, you will not be able to pass or set or it can't. However, I think

60
00:12:36,040 --> 00:12:47,520
it is easier to understand using this. Yes. There is the differences between tuples or the

61
00:12:47,520 --> 00:13:00,200
sequences. If you are not, tuple is fix up the length information. You must specify the type

62
00:13:00,200 --> 00:13:15,640
or the number of elements. Yes. Like this. Or you can use also mixing types such as tuple of int,

63
00:13:15,640 --> 00:13:28,560
str, and float. Okay. A sequence such as this has the same constraints for the elements. Yes. This

64
00:13:28,560 --> 00:13:40,920
is the difference of the tuples. It can be used regardless of the length sequences of the setting.

65
00:13:40,920 --> 00:13:52,520
Okay. Next is advanced. There is a few advanced types. Okay. Looking. At first is union and

66
00:13:53,360 --> 00:14:03,960
multiple types. Probably it's this style of pipes. Yes. It's a higher scale or type script.

67
00:14:03,960 --> 00:14:18,440
The next code. This top code is the example is a function that accepts both integers or

68
00:14:18,600 --> 00:14:32,600
floats and returns integers or floats. Next bottom examples. There can be tested equalities.

69
00:14:32,600 --> 00:14:50,200
So first nested union are flattened. Next, this type is removed. Yes. This int is removed.

70
00:14:50,200 --> 00:15:02,840
And all that is ignored. You can swap them. And convertible is typing.union. Yes. This is

71
00:15:02,840 --> 00:15:17,240
3.9 or before styles and then this style is for 3.10. Okay. Optional types. It is shorthand for

72
00:15:17,280 --> 00:15:27,080
the option of t. Union is now. Yes. So we have strikes that just like union of t pipe or now.

73
00:15:27,080 --> 00:15:36,760
Yeah. If you type was a function of returns the value of something, it will propagate. So be careful

74
00:15:36,760 --> 00:15:59,360
when you use it. Yes. This is a bad example for using optionals. It may returns nulls. So when

75
00:15:59,360 --> 00:16:09,840
you use this function, you might be another girl so return unknown. So in this case, it would be

76
00:16:09,840 --> 00:16:22,160
cleaner to raise the runtime error. Yes. As the keynote speakers, the cost of raising exceptions

77
00:16:22,160 --> 00:16:32,880
in Python is relatively low. Yes. It is little performance impact unlike Java. And the lack of

78
00:16:32,880 --> 00:16:44,640
the null safe method in Python is also a factor. JavaScript has null safe method, double questions,

79
00:16:44,640 --> 00:16:58,800
but no Pythons. But if there are such as methods, they would be upset. Okay. And then next is

80
00:16:58,800 --> 00:17:15,960
callable. Since 3.9 using this import, and it is various function such as flask or fast API. And

81
00:17:15,960 --> 00:17:33,680
yes. That returns callable. It is function. Okay. Yes. It may returns this. This function is because

82
00:17:33,680 --> 00:17:46,520
this is. Okay. And the next is user defined generic types. Yes. It is typically declared by

83
00:17:46,520 --> 00:18:01,600
inheriting from the insertion of the class is one more type variables. Yes. Using defining and using

84
00:18:01,600 --> 00:18:20,360
the KT and VT. And passing. New defining X and Y. And this using mapping. Yes.

85
00:18:20,360 --> 00:18:36,000
This takes mapping of X and Y and returns Y. Okay. Yes. I talked about some new features. It is

86
00:18:36,000 --> 00:18:48,920
backwards compatibility for older versions. Okay. What is the Dundar future modules? It is using

87
00:18:48,920 --> 00:18:57,240
typing new features on the older versions. Like this import statement. In addition to typing,

88
00:18:57,240 --> 00:19:08,960
it was also used to call to 3.x features in 3.x for example, which functions. Yes. That is Dundar

89
00:19:08,960 --> 00:19:26,640
modules. Okay. Now I talked about I will talk about recent update. Yes. This is overview. Yes.

90
00:19:26,640 --> 00:19:43,080
3.7 has data classes. 3.8 has F strings. Equals F strings. Yes. It is for debugging. And 3.9 is

91
00:19:43,080 --> 00:20:01,040
union operators in the dict. And 3.10 as you know, pattern matching. And 3.11 it will be released 2022

92
00:20:01,040 --> 00:20:16,120
October. Performance tuning. It focus on performance tuning. New features on type hints on 3.10.

93
00:20:16,120 --> 00:20:30,760
There is four features. Yes. And there is difficult topic. Yes. This is I'm not sure so I can explain

94
00:20:30,760 --> 00:20:43,720
well. Okay. As you know, new type of union operator is in pipe. The union above can be used operator.

95
00:20:43,720 --> 00:20:57,720
You can also asking is instance. Yes. Like this. Option of T is also written by like this. T pipe

96
00:20:57,720 --> 00:21:10,520
or now using this. Okay. Yes. This is very difficult. But I'm not sure I can explain. It's

97
00:21:10,520 --> 00:21:24,440
motivation is needed represent function that returns same argument as a specified function. Yes. That

98
00:21:24,440 --> 00:21:38,920
is readability. But approach is here. Adding the argument type code is like this. Using this to use

99
00:21:38,920 --> 00:21:50,040
them. Use this import from typing. Yes. It can be used with cover to behave like a general cover object.

100
00:21:50,040 --> 00:22:12,440
Yes. Before I'm logging to this. We can't know the argument of types. But after this, yes. Like this.

101
00:22:12,440 --> 00:22:34,880
You can know that the keyword args is dict and args is tuple. Yes. And using this. Okay. The

102
00:22:34,880 --> 00:22:45,600
second, third one, type areas. Motivation is we consider global bias with type hints is type areas.

103
00:22:45,600 --> 00:22:55,440
This tends cause problem with forward experience, forward reference, scoping and more. So we are

104
00:22:55,440 --> 00:23:06,480
going to make it possible to define type areas. Okay. Approach. Adding new typing to type areas.

105
00:23:06,480 --> 00:23:20,800
You can write just like this. T colon type areas is equal. Yes. You can write like this using

106
00:23:20,800 --> 00:23:33,440
double quotes for using forward references. Okay. This is before and after. Okay. This is global

107
00:23:33,440 --> 00:23:45,720
expressions is areas. And typed global expression. And then this is using for forward references.

108
00:23:45,720 --> 00:24:00,440
Okay. This is last week for 3.10 user defined type guards. Motivation is type checker to the

109
00:24:00,440 --> 00:24:11,200
technical code type narrowing to determine the type of information. Yes. On this line, type of

110
00:24:11,200 --> 00:24:32,000
var is narrow to SDR. Next, this line, narrow to null. Okay. However, that will not act as intended

111
00:24:32,000 --> 00:24:45,760
as if user defined user function is used. Yes. This is invalid type. But type guards allows to

112
00:24:45,760 --> 00:24:57,880
define user defined types because you realize a new typing. Yes. Writing like this. And the

113
00:24:57,880 --> 00:25:13,520
narrowing type works like next. Yes. This narrowed in tuple of SDR and SDR. And next is one or two

114
00:25:13,520 --> 00:25:30,320
SDRs. Okay. Okay. This is last topic. New features on Python 3.11. If you know, Python 3.11 is focused

115
00:25:30,320 --> 00:25:47,200
on performance tuning. But there are also a new feature on typing. Yes. This is PEP 673. It's a way to annotate

116
00:25:47,200 --> 00:26:14,760
methods that return instance of their class. Okay. Let's see. Motivation is here. The calling set scale of the subclass shape. The type checker is in first returns the shape. Yes. This is the shape not circle.

117
00:26:14,760 --> 00:26:43,320
Using this, shape has no attribute set radius. So it occurs. But there is work around but intuitive. Yes. There is not so good to

118
00:26:43,320 --> 00:27:11,480
read. But using typing dot self results that is import and using like this. This self starts with the upper S. And using subclass, it will be the circle. Okay.

119
00:27:11,480 --> 00:27:36,720
This is my summaries I talked. First benefits starting with using definitions, building types. And using standard collections since 3.9. And collections, unions, options,

120
00:27:36,720 --> 00:28:00,720
and then the next update overview and standard feature for compatibility. And last, new features on 3.10 and 3.11. Yes. 3.10 has new type union operator,

121
00:28:00,720 --> 00:28:25,920
parameters, variables, type areas, user defined types, type guards. And last 3.11 has self type annotated. Okay. That is references. I want to say thank you. Okay. Thank you so much.

122
00:28:25,920 --> 00:28:36,120
Thank you for listening. See you again next time in Japan, middle of October. Okay. See you.

