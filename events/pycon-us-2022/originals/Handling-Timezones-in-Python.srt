1
00:00:00,000 --> 00:00:13,560
And we do frontend through backend, databases, integrations, all that stuff.

2
00:00:13,560 --> 00:00:15,280
The reason I'm giving this talk, well, there's two.

3
00:00:15,280 --> 00:00:17,300
First, our primary backend language is Python.

4
00:00:17,300 --> 00:00:20,600
We do a lot of work in Python, in particular Python Django.

5
00:00:20,600 --> 00:00:26,400
So I've seen a lot of Python used in different contexts in a lot of different industries.

6
00:00:26,400 --> 00:00:29,960
And then the second, one of the joys of doing software consulting is I get to see the same

7
00:00:29,960 --> 00:00:34,080
problems over and over again in a number of different contexts and come up with solutions

8
00:00:34,080 --> 00:00:36,160
that work across all of them.

9
00:00:36,160 --> 00:00:42,160
And I will tell you one of the problems that comes up over and over again as time zones.

10
00:00:42,160 --> 00:00:43,240
So that's why I'm giving this talk.

11
00:00:43,240 --> 00:00:44,840
Why are you here?

12
00:00:44,840 --> 00:00:47,840
Let's start with a seemingly simple question.

13
00:00:47,840 --> 00:00:48,840
What is today's date?

14
00:00:48,840 --> 00:00:54,400
If you look at your phone, it will tell you that correctly here today's date is the 29th.

15
00:00:54,400 --> 00:00:58,940
But if you ask somebody in Tokyo right now, they will tell you correctly that today's

16
00:00:58,940 --> 00:01:00,640
date is the 30th.

17
00:01:00,640 --> 00:01:06,560
So already with a seemingly simple question, we've uncovered something incredibly complicated.

18
00:01:06,560 --> 00:01:11,400
And that complicated thing is that whenever you are working with dates or times, you are

19
00:01:11,400 --> 00:01:12,900
working with time zones.

20
00:01:12,900 --> 00:01:18,120
Whether you think you are or not, and if you don't think you are, oh, you're in trouble.

21
00:01:18,120 --> 00:01:20,160
That's how you get time zone bugs.

22
00:01:20,160 --> 00:01:24,000
So I'm here to tell you how to think about time zones and avoid those nasty time zone

23
00:01:24,000 --> 00:01:25,000
bugs.

24
00:01:25,000 --> 00:01:29,040
Now, there might be some of you in the audience thinking, okay, but what if all my users are

25
00:01:29,040 --> 00:01:30,040
in one time zone?

26
00:01:30,040 --> 00:01:32,200
I don't care.

27
00:01:32,200 --> 00:01:37,760
But you still care because time zones aren't just about users being in multiple different

28
00:01:37,760 --> 00:01:38,760
time zones.

29
00:01:38,760 --> 00:01:42,520
It's also about the rules of how time behaves in a time zone, things like daylight savings

30
00:01:42,520 --> 00:01:43,940
time.

31
00:01:43,940 --> 00:01:48,640
And even if the Sunshine Protection Act, currently up for consideration by Congress, which will

32
00:01:48,840 --> 00:01:51,880
end daylight savings time by making it permanent, it's a little weird.

33
00:01:51,880 --> 00:01:58,080
Even if that passes, as software engineers, we are cursed with daylight savings time forever

34
00:01:58,080 --> 00:01:59,080
because of historic time stamps.

35
00:01:59,080 --> 00:02:00,880
Oh, yeah, in Europe, they still exist.

36
00:02:00,880 --> 00:02:04,420
They still do daylight savings time, even if we stop.

37
00:02:04,420 --> 00:02:08,400
So having correct time zone support also gives you daylight savings time support, all these

38
00:02:08,400 --> 00:02:10,960
other weird temporal anomalies.

39
00:02:10,960 --> 00:02:14,280
All of that is bundled into this umbrella of time zones.

40
00:02:14,280 --> 00:02:17,960
And you want to have that in your code base from the start so that when you do have to

41
00:02:17,960 --> 00:02:21,600
deal with historic time stamps or you do start having users in other time zones or

42
00:02:21,600 --> 00:02:25,920
daylight savings time happens, which it does, you don't get burned.

43
00:02:25,920 --> 00:02:28,540
This is also the time for this talk.

44
00:02:28,540 --> 00:02:33,120
It's the time because Python is changing or it already has changed.

45
00:02:33,120 --> 00:02:38,840
In Python 3.9, Python finally has standard library support for all time zones.

46
00:02:38,840 --> 00:02:41,480
Before that, it had support for one, UTC.

47
00:02:41,480 --> 00:02:47,160
Now with Python 3.9, the zone info module adds support for all time zones.

48
00:02:47,160 --> 00:02:49,200
And the community is shifting.

49
00:02:49,200 --> 00:02:54,080
Django, for example, and Django 4 is replacing PyTZ with zone info as the default time zone

50
00:02:54,080 --> 00:02:55,080
provider.

51
00:02:55,080 --> 00:02:57,480
And if you're using PyTZ, you should make that same change.

52
00:02:57,480 --> 00:02:59,620
I'll tell you why in a bit.

53
00:02:59,620 --> 00:03:00,880
So here's what we're going to go through.

54
00:03:00,880 --> 00:03:02,160
First, what not to do.

55
00:03:02,160 --> 00:03:05,320
As I go through that, think, do I do this anyway?

56
00:03:05,320 --> 00:03:06,320
Code base.

57
00:03:06,320 --> 00:03:07,880
Make notes.

58
00:03:07,880 --> 00:03:09,920
Then we're going to talk about what to do high level.

59
00:03:09,920 --> 00:03:12,320
How to think about time zones well.

60
00:03:12,320 --> 00:03:13,320
And then we're going to get low level.

61
00:03:13,320 --> 00:03:16,840
We're going to actually get into code recipes for how to handle the common problems that

62
00:03:16,840 --> 00:03:18,880
show up when working with time zones.

63
00:03:18,880 --> 00:03:21,500
Those things that show up again and again in every industry.

64
00:03:21,500 --> 00:03:24,000
And then we'll take a few minutes at the end, anyone using Django.

65
00:03:24,000 --> 00:03:29,360
Django's got some extra utils for handling time zones that I'll run you through.

66
00:03:29,360 --> 00:03:31,380
So what not to do.

67
00:03:31,380 --> 00:03:34,360
The language in this section is going to be intentionally extreme.

68
00:03:35,360 --> 00:03:40,320
The reason I'm going to be extreme is not to say never do these, but because these are

69
00:03:40,320 --> 00:03:44,320
all things that don't do what the average developer expects.

70
00:03:44,320 --> 00:03:48,640
And so if you do them, not only should you know what you're doing, but you should comment

71
00:03:48,640 --> 00:03:52,960
your code so that the next person knows what you did and doesn't copy the stuff you did

72
00:03:52,960 --> 00:03:56,640
in the wrong context and introduce time zone bugs.

73
00:03:56,640 --> 00:03:59,720
So number one, don't use naive date times.

74
00:03:59,720 --> 00:04:01,080
Ever.

75
00:04:01,080 --> 00:04:03,200
What is a naive date time?

76
00:04:03,240 --> 00:04:08,400
A date time in Python is a seven tuple, your month day, hour, minute, second, and second.

77
00:04:08,400 --> 00:04:12,960
And then it has an optional tz info attribute for time zone information.

78
00:04:12,960 --> 00:04:16,760
Now it's optional because, well, as I just said, Python didn't have full time zone support

79
00:04:16,760 --> 00:04:23,120
until 3.9, so it couldn't exactly require you to pass time zone information in.

80
00:04:23,120 --> 00:04:28,040
But that leaves us in a really nasty situation where the default way to construct a date

81
00:04:28,040 --> 00:04:31,840
time is without time zone information, and that's not what you want.

82
00:04:31,840 --> 00:04:36,440
An aware date time, one that has time zone information, represents what you think a

83
00:04:36,440 --> 00:04:41,480
date time represents, which is an actual point in time, past, present, or future.

84
00:04:41,480 --> 00:04:47,140
A naive date time, on the other hand, represents the idea of a time, a template, if you will.

85
00:04:47,140 --> 00:04:54,520
This naive date time represents the idea of noon on New Year's Day 2022, and that actually

86
00:04:54,520 --> 00:04:57,320
represents dozens of different points in time.

87
00:04:57,320 --> 00:05:01,920
A full 26 hours of ambiguity are represented by that naive date time.

88
00:05:01,920 --> 00:05:05,720
Time zones range from UTC minus 12 to plus 14.

89
00:05:05,720 --> 00:05:10,080
So if you're constructing a date time, and what you are trying to represent is a point

90
00:05:10,080 --> 00:05:14,580
in time, which is probably what you're doing if you're constructing a date time, please

91
00:05:14,580 --> 00:05:16,720
attach a time zone to it.

92
00:05:16,720 --> 00:05:20,040
You'll regret it if you don't.

93
00:05:20,040 --> 00:05:24,160
Now that's simple, but what about libraries?

94
00:05:24,160 --> 00:05:26,560
I assume you use them.

95
00:05:26,560 --> 00:05:29,160
There's a whole bunch of libraries.

96
00:05:29,160 --> 00:05:32,040
I'm not going to cover all of them, but what I am going to cover is the two biggest perils

97
00:05:32,040 --> 00:05:34,040
in the Python standard library.

98
00:05:34,040 --> 00:05:35,300
Date time now.

99
00:05:35,300 --> 00:05:39,680
If you call date time now in your code with no arguments, you have time zone bugs.

100
00:05:39,680 --> 00:05:40,840
The reason is twofold.

101
00:05:40,840 --> 00:05:43,360
Date time now does not attach a time zone.

102
00:05:43,360 --> 00:05:46,720
It gives you a naive date time, so that's already bad, as I hopefully just convinced

103
00:05:46,720 --> 00:05:50,140
you, and also the return is dependent on system time.

104
00:05:50,140 --> 00:05:54,560
So this means you can run the same code at the same instant locally and on a server,

105
00:05:54,560 --> 00:05:56,080
get totally different results.

106
00:05:56,080 --> 00:05:58,640
This is unintentional, non-deterministic behavior.

107
00:05:58,640 --> 00:06:06,320
That is a very bad bug to have in your code, really an anti-feature.

108
00:06:06,320 --> 00:06:10,400
And it's a particularly pernicious kind of bug because it's one that doesn't show up

109
00:06:10,400 --> 00:06:11,400
in local testing.

110
00:06:11,400 --> 00:06:12,400
You run your code locally, it's perfect.

111
00:06:12,400 --> 00:06:15,320
You push it to the server, everything's ruined.

112
00:06:15,320 --> 00:06:18,080
Now you might think, okay, I'll use date time UTC now.

113
00:06:18,080 --> 00:06:20,560
UTC fixes a lot of problems.

114
00:06:20,560 --> 00:06:24,400
Now at least we've solved the problem of we don't get different results in different time

115
00:06:24,400 --> 00:06:25,400
zones.

116
00:06:25,400 --> 00:06:30,120
Now, again, as part of the history, that function is old enough that it returns a naive date

117
00:06:30,120 --> 00:06:31,120
time.

118
00:06:31,120 --> 00:06:35,760
So you know it was UTC when you constructed it, but as soon as you go hand it to somebody

119
00:06:35,760 --> 00:06:41,560
else, you put it in a database or you convert it to an ISO string and send it through an

120
00:06:41,560 --> 00:06:48,040
API, you have lost the time zone information and instead handed them 26 hours of ambiguity.

121
00:06:48,040 --> 00:06:50,320
So don't use naive date times.

122
00:06:50,320 --> 00:06:52,700
That's the big takeaway here.

123
00:06:52,700 --> 00:06:54,600
Next up, don't use dates without a time zone.

124
00:06:54,600 --> 00:06:59,680
Now hopefully there is at least someone in the audience thinking, but Zags, dates don't

125
00:06:59,680 --> 00:07:01,960
have time zones.

126
00:07:01,960 --> 00:07:05,480
There's no TZ info attribute on dates and you would be technically correct, but have

127
00:07:05,480 --> 00:07:07,800
missed the bigger picture.

128
00:07:07,800 --> 00:07:14,280
What a date represents in your code is an actual 24 hour interval, past, present, or

129
00:07:14,280 --> 00:07:15,280
future.

130
00:07:15,280 --> 00:07:19,920
You're talking about actual points on the timeline and you need to have a time zone.

131
00:07:19,920 --> 00:07:23,320
You need to have a time zone in mind that you're constructing that date in or else you're

132
00:07:23,320 --> 00:07:25,800
going to be getting the wrong date in some cases.

133
00:07:25,800 --> 00:07:31,960
So for example, if you call date.today, you have time zone bugs.

134
00:07:31,960 --> 00:07:37,000
The reason that date.today is nasty is what it does is it takes the current system time,

135
00:07:37,000 --> 00:07:41,800
pulls out the date, and so you can run the same code at the same instant locally and

136
00:07:41,800 --> 00:07:45,120
on a server and get results a day apart.

137
00:07:45,120 --> 00:07:47,120
And this is the worst kind of bug.

138
00:07:47,120 --> 00:07:51,240
Not only does this bug show up, not show up in local development, only shows up when you

139
00:07:51,240 --> 00:07:56,160
push it to the server, but this bug only shows up outside of business hours.

140
00:07:56,160 --> 00:07:59,400
This is a bug that shows up late at night for U.S. developers or early in the morning

141
00:07:59,400 --> 00:08:01,720
for European developers.

142
00:08:01,720 --> 00:08:04,340
And so you won't catch it.

143
00:08:04,340 --> 00:08:09,280
You won't catch it in QA, but your users or your overnight jobs, they absolutely will

144
00:08:09,280 --> 00:08:10,700
catch it.

145
00:08:10,700 --> 00:08:15,080
If you write a form validation saying, you know, the date must not be in the future and

146
00:08:15,080 --> 00:08:19,800
you use date.today, that user in Tokyo who's trying to fill out the current date, your

147
00:08:19,840 --> 00:08:22,720
website's broken for them.

148
00:08:22,720 --> 00:08:25,820
So the solution to this is kind of in the title.

149
00:08:25,820 --> 00:08:29,920
When you're constructing a date, if what you're talking about is an interval of time that

150
00:08:29,920 --> 00:08:36,100
actually has or will happen, have a time zone in mind.

151
00:08:36,100 --> 00:08:40,120
Number three, don't do duration arithmetic outside of UTC.

152
00:08:40,120 --> 00:08:44,920
So duration arithmetic is if we're taking two date times and we're saying, well, what's

153
00:08:44,920 --> 00:08:47,000
the difference in time between the two?

154
00:08:47,000 --> 00:08:51,160
Or if we're taking one daytime and saying, add some number of hours to it.

155
00:08:51,160 --> 00:08:54,760
Now this is a very specific date time that I have in this example.

156
00:08:54,760 --> 00:08:59,880
Okay, 1.30 in the morning, March 13th, U.S. Eastern, 30 minutes before daylight savings

157
00:08:59,880 --> 00:09:00,880
time.

158
00:09:00,880 --> 00:09:04,480
Okay, this equals itself converted to UTC.

159
00:09:04,480 --> 00:09:08,960
That is correct.

160
00:09:08,960 --> 00:09:12,480
Converting a time from one time zone to another, they still fundamentally represent the same

161
00:09:12,480 --> 00:09:13,600
point in time.

162
00:09:13,600 --> 00:09:17,640
If we add two hours to both sides, they're no longer equal.

163
00:09:17,640 --> 00:09:22,680
So for anyone mathy in the audience, what I just said, Python does, you can run this.

164
00:09:22,680 --> 00:09:27,480
A equals B. A plus two does not equal B plus two.

165
00:09:27,480 --> 00:09:30,120
That should terrify you.

166
00:09:30,120 --> 00:09:34,120
That should tell you this code isn't doing what you expect.

167
00:09:34,120 --> 00:09:35,440
And it's not.

168
00:09:35,440 --> 00:09:41,680
When you add a time delta to a daytime in Python, what Python is doing is it's saying, please

169
00:09:42,000 --> 00:09:46,600
take the hour hand on the clock and move it forward that much and then do some date rollover.

170
00:09:46,600 --> 00:09:50,000
And then once we're done with that, we can reexamine time zones.

171
00:09:50,000 --> 00:09:54,400
And so what that means is that we haven't actually added two hours of duration.

172
00:09:54,400 --> 00:09:57,680
We've just changed the clock by two hours, but the UTC offset has changed.

173
00:09:57,680 --> 00:10:03,100
And so adding two hours in Python to 1.30 in the morning in U.S. Eastern on this date

174
00:10:03,100 --> 00:10:06,140
gives us a result only one hour later.

175
00:10:06,140 --> 00:10:11,080
The fix for this, again in the title, do duration arithmetic in UTC.

176
00:10:11,080 --> 00:10:16,680
Because UTC doesn't have these pesky temporal discontinuities.

177
00:10:16,680 --> 00:10:19,120
Next up, don't use PyTZ.

178
00:10:19,120 --> 00:10:21,720
That's a really flagrant statement right there.

179
00:10:21,720 --> 00:10:27,120
This is not to say the entire PyTZ library is bad, but there are aspects of it that are

180
00:10:27,120 --> 00:10:28,120
very dangerous.

181
00:10:28,120 --> 00:10:33,520
PyTZ is a great library last decade.

182
00:10:33,520 --> 00:10:38,160
PyTZ has been around since 2004, and I really appreciate its contribution to adding daytime

183
00:10:38,160 --> 00:10:39,240
support to Python.

184
00:10:39,240 --> 00:10:43,200
But it's so old that it's not compatible with the directions Python has gone in in terms

185
00:10:43,200 --> 00:10:46,680
of how time zones should work.

186
00:10:46,680 --> 00:10:52,040
So for example, if we take this actually normal daytime, there's no magic on this one, there's

187
00:10:52,040 --> 00:10:55,640
no daylight savings time or anything like this, totally normal daytime in April of this

188
00:10:55,640 --> 00:11:01,240
year, and we attach the PyTZ time zone of U.S. Eastern to this at time of construction,

189
00:11:01,240 --> 00:11:04,680
we get a UTC offset of four hours and 56 minutes.

190
00:11:04,680 --> 00:11:05,680
That is not correct.

191
00:11:05,880 --> 00:11:11,480
The correct number is minus four hours, and that number has not been correct for American

192
00:11:11,480 --> 00:11:15,160
New York since 1883.

193
00:11:15,160 --> 00:11:18,400
That's what I mean by incompatibilities with the Python standard library.

194
00:11:18,400 --> 00:11:22,360
The solution to this, very simple, the Python standard library now has time zone support.

195
00:11:22,360 --> 00:11:23,360
It's called zone info.

196
00:11:23,360 --> 00:11:25,960
You should use it.

197
00:11:25,960 --> 00:11:30,960
The last one before we get into what to actually do is don't replace the time zone info on

198
00:11:30,960 --> 00:11:32,680
an aware daytime.

199
00:11:32,680 --> 00:11:35,320
Now this is specifically for aware daytime.

200
00:11:35,320 --> 00:11:38,880
An aware daytime is one that already has time zone information.

201
00:11:38,880 --> 00:11:42,480
The reason you shouldn't do this is, as is broadly the theme here, it doesn't do what

202
00:11:42,480 --> 00:11:44,240
you expect.

203
00:11:44,240 --> 00:11:48,100
What I would expect replacing the time zone on an aware daytime would do would be, please

204
00:11:48,100 --> 00:11:51,400
convert this same point in time, but just give it to me in a different time zone.

205
00:11:51,400 --> 00:11:52,400
That's not what happens.

206
00:11:52,400 --> 00:11:56,280
What happens is you take the date, you take the time, you pick them up off the page, you

207
00:11:56,280 --> 00:11:59,120
go put them in a different time zone.

208
00:11:59,120 --> 00:12:03,040
So what that's actually doing, right, the numbers of the daytime aren't changing, but

209
00:12:03,040 --> 00:12:07,360
the time represented by it is changing by many hours.

210
00:12:07,360 --> 00:12:10,560
And so replacing the time zone info, what you're fundamentally, you're saying, this

211
00:12:10,560 --> 00:12:16,840
is actually in a different time zone, whoops, and this represents in all likelihood a different

212
00:12:16,840 --> 00:12:17,840
point in time.

213
00:12:17,840 --> 00:12:19,920
So probably not what you want to do.

214
00:12:19,920 --> 00:12:20,920
Almost certainly not.

215
00:12:20,920 --> 00:12:24,400
If what you want to do is convert a daytime to another time zone, use the function as

216
00:12:24,400 --> 00:12:25,400
time zone.

217
00:12:25,400 --> 00:12:26,400
All right.

218
00:12:26,400 --> 00:12:29,840
So let's talk about how to do it right.

219
00:12:29,840 --> 00:12:32,120
I've said UTC a lot already.

220
00:12:32,120 --> 00:12:33,120
What is UTC?

221
00:12:33,120 --> 00:12:36,560
Well, first and foremost is a bad acronym.

222
00:12:36,560 --> 00:12:39,440
What they did was they took the English, they took the French, they had the same letters

223
00:12:39,440 --> 00:12:40,440
in a different order.

224
00:12:40,440 --> 00:12:42,280
The compromise was no one wins.

225
00:12:42,280 --> 00:12:46,140
So if you want, UTC stands for utterly terrible compromise.

226
00:12:46,140 --> 00:12:49,600
But bad acronyms aside, it's an amazing standard.

227
00:12:49,600 --> 00:12:52,200
First of all, no temporal discontinuities.

228
00:12:52,200 --> 00:12:53,200
Leap seconds.

229
00:12:53,200 --> 00:12:54,200
Oh, sorry.

230
00:12:54,200 --> 00:12:55,200
All right.

231
00:12:55,200 --> 00:12:56,200
We're ignoring leap seconds because Python does.

232
00:12:56,200 --> 00:12:59,100
Python actually ignores them, leaves it to network time protocol to sort them out.

233
00:12:59,100 --> 00:13:00,520
So we're not talking about those.

234
00:13:00,880 --> 00:13:05,080
If we aren't talking about those, UTC does not have any of those temporal discontinuities.

235
00:13:05,080 --> 00:13:07,920
Daily savings time, what's that?

236
00:13:07,920 --> 00:13:11,760
Pacific Islands switching sides of the international dateline, don't care.

237
00:13:11,760 --> 00:13:18,280
So this is a great place to work in because we can actually do duration arithmetic safely.

238
00:13:18,280 --> 00:13:21,080
Next up, all other time zones are defined in relation to UTC.

239
00:13:21,080 --> 00:13:22,960
And this one I don't have an asterisk on.

240
00:13:22,960 --> 00:13:25,240
As far as I can tell, that is true.

241
00:13:25,240 --> 00:13:26,240
There's some weird offsets out there.

242
00:13:26,240 --> 00:13:28,560
There's some half-hour offsets, some 15-minute offsets.

243
00:13:28,600 --> 00:13:31,280
But all of them are still defined in relation to UTC.

244
00:13:31,280 --> 00:13:34,680
There is still some offset, depending on the time of year.

245
00:13:34,680 --> 00:13:39,080
So UTC is a great central place to work when you're trying to get...

246
00:13:39,080 --> 00:13:44,400
You can convert to and from other time zones very easily because UTC is the time zone by

247
00:13:44,400 --> 00:13:45,880
which all other time zones are measured.

248
00:13:45,880 --> 00:13:49,640
And then finally, it's the official time zone of the International Space Station, and space

249
00:13:49,640 --> 00:13:52,560
is cool.

250
00:13:52,560 --> 00:13:56,600
This diagram is the most important slide in this talk.

251
00:13:56,600 --> 00:13:58,040
Don't worry about getting it all at once.

252
00:13:58,520 --> 00:14:02,040
We're going to zoom in on various pieces of it when we go into code recipes, but we are

253
00:14:02,040 --> 00:14:04,720
also going to take a little bit of time here and explore this.

254
00:14:04,720 --> 00:14:09,200
So right here in the middle, we have this beautiful green bubble.

255
00:14:09,200 --> 00:14:12,480
This is the idyllic paradise of UTC.

256
00:14:12,480 --> 00:14:16,320
In the time zone safe zone of UTC, we don't care about temporal discontinuities.

257
00:14:16,320 --> 00:14:18,800
We don't care about there even being more than one time zone.

258
00:14:18,800 --> 00:14:22,960
If we have time zone-aware UTC date times, we can do duration arithmetic on them all

259
00:14:22,960 --> 00:14:25,120
day, pun intended.

260
00:14:25,160 --> 00:14:28,040
We can put them in time zone-aware database storage and back out.

261
00:14:28,040 --> 00:14:31,080
We can send them to other systems as ISO strings.

262
00:14:31,080 --> 00:14:36,080
And if we get the current time in UTC, we're still in this beautiful paradise where time

263
00:14:36,080 --> 00:14:37,400
zones don't exist.

264
00:14:37,400 --> 00:14:43,480
And we could stay here forever if it weren't for one pesky little thing, the user.

265
00:14:43,480 --> 00:14:46,320
Software would be a lot easier without them.

266
00:14:46,320 --> 00:14:47,560
So let's deal with users.

267
00:14:47,560 --> 00:14:48,560
Okay.

268
00:14:48,560 --> 00:14:50,040
So we've got user input, right?

269
00:14:50,040 --> 00:14:52,560
Users have time zones.

270
00:14:52,560 --> 00:14:56,040
In order to deal with users, we actually need to know what time zone a user is talking about.

271
00:14:56,040 --> 00:15:00,040
So we need to either have a time zone attribute on the user or have the user provide us the

272
00:15:00,040 --> 00:15:03,200
time zone they're talking about when we get whatever they're giving us.

273
00:15:03,200 --> 00:15:07,680
So if we take the user input of a year, a month, a day, a time, and they give us a time

274
00:15:07,680 --> 00:15:12,440
zone, we can attach that time zone to all that other information.

275
00:15:12,440 --> 00:15:17,320
We can get an aware date time and then as time zone that into UTC.

276
00:15:17,320 --> 00:15:21,200
ISO strings up at the top here, they're actually easier to deal with because correct ISO strings

277
00:15:21,360 --> 00:15:23,040
have a UTC offset baked in.

278
00:15:23,040 --> 00:15:24,960
So we actually know how to get that.

279
00:15:24,960 --> 00:15:30,440
We can use strp time or from ISO format, we can get an aware non-UTC date time as time

280
00:15:30,440 --> 00:15:32,800
zone that into UTC.

281
00:15:32,800 --> 00:15:35,760
And going back the other way, as time zone does double duty.

282
00:15:35,760 --> 00:15:39,280
That can also get us to a user's local time zone, a local date time.

283
00:15:39,280 --> 00:15:43,280
And from that, we can turn that into a string or we can get those dates that you probably

284
00:15:43,280 --> 00:15:45,740
really want to use at some point.

285
00:15:45,740 --> 00:15:49,680
And that would be it, except for this one little arrow over here, which is calendar

286
00:15:49,680 --> 00:15:50,720
arithmetic.

287
00:15:51,360 --> 00:15:55,560
Instead of saying I want to add or subtract durations, saying what I want to do is change

288
00:15:55,560 --> 00:15:59,240
the date by some amount, that you should do on dates.

289
00:15:59,240 --> 00:16:04,240
If you do calendar arithmetic, you say I want to change my date by some number of days,

290
00:16:04,240 --> 00:16:10,080
add the duration in UTC and then convert to a local time zone, all of those temporal discontinuities

291
00:16:10,080 --> 00:16:13,280
now show up as bugs in the math you just did.

292
00:16:13,280 --> 00:16:18,240
So if we're talking about changing time, that needs to happen in UTC.

293
00:16:18,240 --> 00:16:21,280
If we're talking about editing the date, do that on a date.

294
00:16:24,840 --> 00:16:31,160
I mentioned already to use zone info, Python standard library, especially instead of PyTZ.

295
00:16:31,160 --> 00:16:32,520
That's not to say this is the only option.

296
00:16:32,520 --> 00:16:33,520
There's other options out there.

297
00:16:33,520 --> 00:16:36,760
DateUtil, for example, is actually compatible with the Python standard library.

298
00:16:36,760 --> 00:16:43,460
But at least in terms of sensible defaults, zone info gets us what we want, which is addability

299
00:16:43,460 --> 00:16:46,000
with the rest of the Python standard library.

300
00:16:46,000 --> 00:16:51,920
We can take that same totally normal, no tricks here, totally normal daytime, attach

301
00:16:51,920 --> 00:16:56,520
US Eastern to it and get the correct offset of four hours, the correct at least for this

302
00:16:56,520 --> 00:17:00,760
century, not for 1883.

303
00:17:00,760 --> 00:17:05,000
Now zone info isn't added until Python 3.9, but you don't have to wait.

304
00:17:05,000 --> 00:17:07,320
If you're still on older versions of Python, there's a backport.

305
00:17:07,320 --> 00:17:11,960
You can pip install it, add this to your requirements file, nice and easy.

306
00:17:11,960 --> 00:17:16,280
You can even do the pre and post Python 3.9 compatible import statement if you want to

307
00:17:16,280 --> 00:17:20,000
get really fancy and save yourself hassle when you do upgrade.

308
00:17:20,000 --> 00:17:24,200
And the one other recommendation on here for compatibility, add the TZ data library.

309
00:17:24,200 --> 00:17:30,920
The TZ data library is a compilation of all of the time zone information that Python will

310
00:17:30,920 --> 00:17:35,240
use as a fallback if it can't find the system time zone information files.

311
00:17:35,240 --> 00:17:38,440
And these are the files that keep track of all of the rules of all of the time zones

312
00:17:38,440 --> 00:17:40,100
in the world of which there's a lot.

313
00:17:40,100 --> 00:17:43,860
That's really helpful for either minimal distributions of Linux or whatever that might not chip with

314
00:17:43,860 --> 00:17:48,860
that or Windows where Python has no idea where anything is.

315
00:17:48,860 --> 00:17:50,740
So now we're going to zoom in on pieces of the diagram.

316
00:17:50,740 --> 00:17:55,180
And we're actually going to, I mean, there's been some code so far, but this is the killer

317
00:17:55,180 --> 00:17:56,180
code.

318
00:17:56,180 --> 00:17:59,020
This is the code you should use in your code base.

319
00:17:59,020 --> 00:18:00,860
So first, getting the current time.

320
00:18:00,860 --> 00:18:02,060
How do we do it?

321
00:18:02,060 --> 00:18:08,860
What we want is the current time, UTC, with the times on attached.

322
00:18:08,860 --> 00:18:09,860
Surprisingly simple.

323
00:18:10,620 --> 00:18:13,620
All you have to do is actually pass the UTC time zone as an argument to datetime now.

324
00:18:13,620 --> 00:18:16,780
So datetime now, turns out it is the right function after all.

325
00:18:16,780 --> 00:18:19,340
You just have to use it right.

326
00:18:19,340 --> 00:18:20,780
Compare that to UTC now.

327
00:18:20,780 --> 00:18:25,180
They will give you the same value, but this first one will actually attach that time zone

328
00:18:25,180 --> 00:18:30,540
information so you're not running around with the extremely dangerous, naive datetimes.

329
00:18:30,540 --> 00:18:33,980
If we want to get the current date, that only makes sense to do in a time zone.

330
00:18:33,980 --> 00:18:35,420
There is no such thing as the current date.

331
00:18:35,420 --> 00:18:37,860
There's only the current date in a time zone.

332
00:18:37,860 --> 00:18:41,420
Datetime now actually takes some other arguments besides UTC.

333
00:18:41,420 --> 00:18:45,100
You can actually give it the time zone that you want, and it will get you the current

334
00:18:45,100 --> 00:18:48,940
time in that time zone, and then you can pull out a date.

335
00:18:48,940 --> 00:18:56,060
So this will safely get you the date in that time zone.

336
00:18:56,060 --> 00:18:59,380
Let's say we already have some UTC datetimes, and we want to do output.

337
00:18:59,380 --> 00:19:01,500
So we want to turn that into a date.

338
00:19:01,500 --> 00:19:04,700
So here, I mean, as time zone is going to do most of the work.

339
00:19:04,700 --> 00:19:09,100
As time zone gets us into the user's time zone, we can pull out the date.

340
00:19:09,100 --> 00:19:10,100
No problem.

341
00:19:10,100 --> 00:19:15,060
Similarly, if we want to output to a string as time zone, get into the user's time, then

342
00:19:15,060 --> 00:19:19,420
we can do strf time or whatever we want to pull out a string on that.

343
00:19:19,420 --> 00:19:26,860
Input a little hairier because with input, we might be ending up touching naive datetimes

344
00:19:26,860 --> 00:19:28,580
at some point, and we want to avoid that.

345
00:19:28,580 --> 00:19:34,500
So if we're handling input, the best way to do it is actually don't handle a naive datetime.

346
00:19:34,500 --> 00:19:39,340
If you can build that datetime with the time zone in it right away, you're great.

347
00:19:39,340 --> 00:19:41,260
Well, you're half great.

348
00:19:41,260 --> 00:19:44,540
Then as time zone, then to UTC, and you're great.

349
00:19:44,540 --> 00:19:49,540
If you can't, so for example, if you're using strp time and that hands you back a naive

350
00:19:49,540 --> 00:19:53,740
datetime, you do need to attach a time zone to that, and here's where we get into a little

351
00:19:53,740 --> 00:19:55,100
bit of potential trouble.

352
00:19:55,100 --> 00:20:00,220
Because the way to attach a time zone to a naive datetime is replacing the tzinfo, which,

353
00:20:00,220 --> 00:20:05,380
if you remember back to cardinal sin number five, you don't want to do replace tzinfo

354
00:20:05,380 --> 00:20:07,900
on an aware datetime.

355
00:20:07,900 --> 00:20:12,340
It's fine on a naive datetime because what you're saying here fundamentally is I know

356
00:20:12,340 --> 00:20:14,840
what time zone this is and I'm filling in that information.

357
00:20:14,840 --> 00:20:18,380
So that's why I have added here this assert statement, assert that the time zone information

358
00:20:18,380 --> 00:20:19,620
is none.

359
00:20:19,620 --> 00:20:25,060
Please use an actual exception there if you're writing this code, but check that this is

360
00:20:26,060 --> 00:20:32,020
before attaching time zone information to it so that you don't accidentally replace time

361
00:20:32,020 --> 00:20:36,740
zones on aware datetimes by accident and then add time zone into UTC.

362
00:20:36,740 --> 00:20:40,300
ISO strings, slightly easier because we've got that UTC offset baked in.

363
00:20:40,300 --> 00:20:45,340
So here we can use strp time or from ISO format, get that into an aware datetime and add time

364
00:20:45,340 --> 00:20:48,940
zone that into UTC as long as we don't stop halfway.

365
00:20:48,940 --> 00:20:53,940
The thing that's weird if we stop halfway is that's not a time zone in that string.

366
00:20:53,940 --> 00:20:56,740
That's a UTC offset and those are different.

367
00:20:56,740 --> 00:20:59,060
That doesn't tell you US Eastern.

368
00:20:59,060 --> 00:21:03,660
That tells you UTC offset of four hours, which you will notice is not the US Eastern time

369
00:21:03,660 --> 00:21:04,660
zone.

370
00:21:04,660 --> 00:21:09,020
So all that tells you is enough information to get to UTC and nothing else.

371
00:21:09,020 --> 00:21:13,660
So don't stop halfway when converting ISO strings.

372
00:21:13,660 --> 00:21:17,420
Now one of the reasons that we've done all of this work, finally we can do duration math

373
00:21:17,420 --> 00:21:18,420
in UTC.

374
00:21:18,420 --> 00:21:21,980
So here's this pesky example from earlier, 30 minutes before daylight savings time in

375
00:21:21,980 --> 00:21:23,180
US Eastern.

376
00:21:23,180 --> 00:21:27,900
If we add time zone into UTC, we add two hours and then we add time zone back into US Eastern,

377
00:21:27,900 --> 00:21:34,940
we get the correct two hours later datetime of 4.30 in the morning and notice that 4.30

378
00:21:34,940 --> 00:21:42,740
is two hours after 1.30 because the UTC offset has changed by one hour.

379
00:21:42,740 --> 00:21:43,980
Now here's the other side of it.

380
00:21:43,980 --> 00:21:46,860
If what you want to do is calendar math, you need to do that on dates.

381
00:21:46,860 --> 00:21:51,460
If we've got, let's say we've got August 1st here.

382
00:21:51,460 --> 00:21:55,740
If we convert, we do that in local time, we pull out the date, we want to add 120 days,

383
00:21:55,740 --> 00:21:56,740
great.

384
00:21:56,740 --> 00:22:01,420
November 29th, that is in fact 120 days later, take my word for it.

385
00:22:01,420 --> 00:22:08,540
But if we do 120 days as a UTC duration, we're going to run into problems because daylight

386
00:22:08,540 --> 00:22:13,300
savings time, an extra hour gets added and so our duration doesn't actually cover all

387
00:22:13,300 --> 00:22:17,340
of that because fundamentally, well we're not trying to add 120 days of duration.

388
00:22:17,340 --> 00:22:24,220
We're not trying to add 120 days times 24 hours times 3600 seconds.

389
00:22:24,220 --> 00:22:30,980
So if we do that, what we end up with is this thing a day early with 23 hours hanging out

390
00:22:30,980 --> 00:22:34,740
and then if you call date on that, you're going to be missing a day due to rounding

391
00:22:34,740 --> 00:22:35,740
errors.

392
00:22:35,740 --> 00:22:39,220
So really this guy right here, that's what you actually want to do.

393
00:22:39,220 --> 00:22:42,820
Do the rule here, if you've got dates, do date math on dates.

394
00:22:42,820 --> 00:22:49,380
If you want to do time math, do that on UTC date times.

395
00:22:49,380 --> 00:22:52,780
All right, we're going to do a couple things, a couple of extras for those of you using

396
00:22:52,780 --> 00:22:54,420
Django.

397
00:22:54,420 --> 00:22:59,820
If you're using Django, Django has wonderful time zone support, use it.

398
00:22:59,820 --> 00:23:01,900
Set use tz to true.

399
00:23:01,900 --> 00:23:05,380
This will happen by default in Django 5, please do not wait that long.

400
00:23:05,380 --> 00:23:09,500
And then Django has a setting time zone and this defines the default time zone for your

401
00:23:09,500 --> 00:23:10,900
Django project.

402
00:23:10,900 --> 00:23:15,460
If all of your users are in one time zone, sure set that to be your user's time zone.

403
00:23:15,460 --> 00:23:20,580
If not, set it to UTC and then what you need to do is you need to call activate on your

404
00:23:20,580 --> 00:23:22,940
user's time zone whenever you're working with that user.

405
00:23:22,940 --> 00:23:28,020
Best way to do this, store the time zone name on the user object, call this in a middleware

406
00:23:28,020 --> 00:23:31,460
so that whenever you're working with that user, right, for the rest of that view or

407
00:23:31,460 --> 00:23:35,100
whatever, for the rest of that view, you've got the user's time zone active.

408
00:23:35,100 --> 00:23:39,180
And Django will then do magic for you.

409
00:23:39,180 --> 00:23:41,940
Django templates automatically convert to the active time zone.

410
00:23:41,940 --> 00:23:44,900
Woo, that's so cool.

411
00:23:44,900 --> 00:23:49,080
So if we've got US Eastern active, we've got UTC date times in our database, we render

412
00:23:49,080 --> 00:23:52,060
that in a template, boom, convert it to US Eastern.

413
00:23:52,060 --> 00:23:53,060
Love it.

414
00:23:53,060 --> 00:23:58,860
Django then has a bunch of utilities, most of which also work with the active time zone.

415
00:23:58,860 --> 00:24:01,820
The one that doesn't, this is just truly generic, time zone now.

416
00:24:01,820 --> 00:24:08,100
This is Django's time zone module, by the way, not the date time dot time zone module.

417
00:24:08,100 --> 00:24:12,740
Time zone dot now, that will give you the current time in UTC with that UTC time zone

418
00:24:12,740 --> 00:24:13,740
attached.

419
00:24:13,740 --> 00:24:14,740
Great.

420
00:24:14,740 --> 00:24:18,580
If you want the current date in the active time zone, you can call local date and that'll

421
00:24:18,580 --> 00:24:23,300
do the work of putting the time zone into date time now and pulling out the date for

422
00:24:23,300 --> 00:24:24,580
you.

423
00:24:24,580 --> 00:24:29,380
If you want to convert UTC date times to the user's time zone, we've got local date and

424
00:24:29,380 --> 00:24:33,540
local time here, both of which will convert to the active time zone and then local date

425
00:24:33,540 --> 00:24:37,180
pulls out the date, local time leaves it as a date time and you can do whatever you want,

426
00:24:37,260 --> 00:24:40,260
call start time on it.

427
00:24:40,260 --> 00:24:46,780
And then finally going back in, so if we take a user input, if we get a naive date time,

428
00:24:46,780 --> 00:24:51,380
Django has this handy function make aware, which does exactly what you'd expect.

429
00:24:51,380 --> 00:24:54,260
It turns it into an aware date time.

430
00:24:54,260 --> 00:24:58,500
This is the same thing that I showed you earlier with replacing the time zone info with the

431
00:24:58,500 --> 00:25:03,820
added benefit of it will check that this is in fact a naive date time so that you don't

432
00:25:03,820 --> 00:25:07,540
accidentally replace the time zone on an aware date time.

433
00:25:07,540 --> 00:25:13,260
And then of course the thing to do with that, add time zone into UTC.

434
00:25:13,260 --> 00:25:17,660
So the summary here, pretty simple.

435
00:25:17,660 --> 00:25:24,500
Take your input, get that into UTC, write all your code against UTC and then when you're

436
00:25:24,500 --> 00:25:28,740
done and you actually need to talk to the user again, get that back into the user's

437
00:25:28,740 --> 00:25:32,140
time.

438
00:25:32,140 --> 00:25:34,340
That's all I've got for you today.

439
00:25:34,340 --> 00:25:35,820
Thank you very much to you all.

440
00:25:35,820 --> 00:25:41,380
I'd also like to extend a thank you to Paul Gansel in addition to authoring the zone info

441
00:25:41,380 --> 00:25:44,020
module that got added to the Python standard library.

442
00:25:44,020 --> 00:25:45,020
So wonderful.

443
00:25:45,020 --> 00:25:47,940
We can, we now all have the benefit of his work.

444
00:25:47,940 --> 00:25:52,760
He also reached out to me and really helped me hammer through the, some of the thornier

445
00:25:52,760 --> 00:25:53,780
examples in this talk.

446
00:25:53,780 --> 00:25:54,780
So really appreciate that.

447
00:25:54,780 --> 00:25:57,100
This is my email right here.

448
00:25:57,100 --> 00:26:01,580
If you've got questions, I will be sticking around afterwards, but anyone on video, if

449
00:26:01,620 --> 00:26:03,980
you've got questions, feel free to email me.

450
00:26:03,980 --> 00:26:07,900
If you need contract software work, time zone related or otherwise, happy to help.

451
00:26:07,900 --> 00:26:08,900
So drop me a line.

452
00:26:08,900 --> 00:26:09,900
Thank you.

453
00:26:09,900 --> 00:26:10,900
Applause

