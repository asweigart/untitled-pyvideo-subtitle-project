1
00:00:00,000 --> 00:00:03,000
All right.

2
00:00:03,000 --> 00:00:04,000
Excellent.

3
00:00:04,000 --> 00:00:05,000
All right.

4
00:00:05,000 --> 00:00:09,360
And thank you for the, for attending.

5
00:00:09,360 --> 00:00:12,880
This is the last, last presentation of the session.

6
00:00:12,880 --> 00:00:13,880
We have Benjamin.

7
00:00:13,880 --> 00:00:14,880
Bear-toe.

8
00:00:14,880 --> 00:00:15,880
Bear-toe.

9
00:00:15,880 --> 00:00:21,940
Benjamin Bear-toe giving us a presentation on how he, not we, migrated 3.8 million lines

10
00:00:21,940 --> 00:00:25,240
of Python 2 without interrupting development.

11
00:00:25,240 --> 00:00:26,240
All yours, Benjamin.

12
00:00:26,240 --> 00:00:27,240
Cool.

13
00:00:27,240 --> 00:00:28,240
Hi.

14
00:00:28,240 --> 00:00:29,240
I'm Ben Bear-toe.

15
00:00:29,240 --> 00:00:31,920
I'm a software engineer at Yelp.

16
00:00:31,920 --> 00:00:34,640
And we're going to get right into it.

17
00:00:34,640 --> 00:00:36,800
So first a little bit about me.

18
00:00:36,800 --> 00:00:45,060
I grew up in Louisville, Kentucky, or Louisville if you're not from there.

19
00:00:45,060 --> 00:00:46,440
And I went to Georgia Tech.

20
00:00:46,440 --> 00:00:49,680
I was the class of 2014.

21
00:00:49,680 --> 00:00:54,320
I got a bachelor's of science in computer science.

22
00:00:54,320 --> 00:00:58,680
And I've worked at Yelp since graduating for almost eight years now.

23
00:00:58,720 --> 00:01:03,720
I work on the core services team, which we do a lot of back-end infrastructure, things

24
00:01:03,720 --> 00:01:08,960
like tooling, just test runners, stuff like that.

25
00:01:08,960 --> 00:01:13,000
And we also are specifically on a lot of the Python infrastructure at Yelp.

26
00:01:13,000 --> 00:01:21,320
That's things like our PyPI servers, a lot of base libraries for doing stuff in Python.

27
00:01:21,320 --> 00:01:26,160
If you want to contact me, my Twitter is at Ben Bear-toe and my GitHub is GitHub.com slash

28
00:01:26,160 --> 00:01:27,160
Ben Bear-toe.

29
00:01:27,160 --> 00:01:32,080
So, first of all, I'm from Yelp.

30
00:01:32,080 --> 00:01:36,280
And at Yelp, we're all about connecting people to great local businesses.

31
00:01:36,280 --> 00:01:40,000
And to that end, our code needs to work.

32
00:01:40,000 --> 00:01:41,920
So let's talk about Yelp main.

33
00:01:41,920 --> 00:01:46,360
That's the name of the repo that we're concerned with today.

34
00:01:46,360 --> 00:01:47,360
It's our monolith.

35
00:01:47,360 --> 00:01:50,800
It was sort of the original code base at Yelp.

36
00:01:50,800 --> 00:01:55,320
We've since moved to a service-oriented architecture, but it still exists and it still has a ton

37
00:01:55,360 --> 00:01:58,760
of code in it that's really important.

38
00:01:58,760 --> 00:02:01,600
So where does Yelp main exist in our ecosystem?

39
00:02:01,600 --> 00:02:06,760
It's sort of important to understanding why we need to do this and what it looks like

40
00:02:06,760 --> 00:02:09,080
when we're doing this migration.

41
00:02:09,080 --> 00:02:11,400
So this is sort of a flow of a request.

42
00:02:11,400 --> 00:02:14,520
And there's basically two basic ways it works.

43
00:02:14,520 --> 00:02:16,540
First is we get a request from a user.

44
00:02:16,540 --> 00:02:20,680
It goes into what we call the routing service, which is a reverse proxy layer.

45
00:02:20,680 --> 00:02:23,200
That goes into Yelp main.

46
00:02:23,400 --> 00:02:27,680
And Yelp main is responsible then for creating an HTML page.

47
00:02:27,680 --> 00:02:32,760
It'll get data from its own database, and maybe it'll call into some independent services,

48
00:02:32,760 --> 00:02:35,040
things we call backend services.

49
00:02:35,040 --> 00:02:38,160
And then it will render a full HTML page.

50
00:02:38,160 --> 00:02:41,800
That will end up being shown to the user.

51
00:02:41,800 --> 00:02:46,960
And the alternative way, and this is the sort of more modern way that things happen, is

52
00:02:46,960 --> 00:02:50,760
a request will have the routing service, and instead it'll go to what we call front-end

53
00:02:50,800 --> 00:02:55,240
service, which is a different service than Yelp main that is responsible for creating

54
00:02:55,240 --> 00:02:57,840
that HTML.

55
00:02:57,840 --> 00:03:02,440
And then front-end service will call into some backend services to get data.

56
00:03:02,440 --> 00:03:07,460
And it'll probably also call into internal API, which is the part of Yelp main that exposes

57
00:03:07,460 --> 00:03:12,900
a restful JSON API in order to get the data that's in its database.

58
00:03:12,900 --> 00:03:19,900
So either way you slice it, Yelp main is really important to when a user is actually getting

59
00:03:21,320 --> 00:03:23,920
web pages from us.

60
00:03:23,920 --> 00:03:27,640
So let's go a little deeper on how it's structured.

61
00:03:27,640 --> 00:03:30,860
So first Yelp main has a web server.

62
00:03:30,860 --> 00:03:37,860
This web server is responsible for serving all of the web traffic that it's responsible

63
00:03:38,160 --> 00:03:43,420
for, which is six different sites, as we call them.

64
00:03:43,420 --> 00:03:46,380
And so we have www.yelp.com.

65
00:03:46,380 --> 00:03:48,180
That's sort of our consumer-facing website.

66
00:03:48,180 --> 00:03:53,140
If you've ever used Yelp, that's probably what you've been looking at.

67
00:03:53,140 --> 00:03:57,580
Biz.yelp.com, which is our business owner-facing website, and then as I mentioned, internal

68
00:03:57,580 --> 00:03:59,100
API.

69
00:03:59,100 --> 00:04:02,500
And in total, these are over 2,000 endpoints.

70
00:04:02,500 --> 00:04:06,900
So it's a ton of logic and code.

71
00:04:06,900 --> 00:04:10,980
In addition to the web server, there's also things that we call batches.

72
00:04:10,980 --> 00:04:12,360
These are just background processes.

73
00:04:12,360 --> 00:04:15,300
They're called batches for kind of historical reasons, but that's the terminology that we

74
00:04:15,300 --> 00:04:17,360
use.

75
00:04:17,360 --> 00:04:25,540
And we have over 800 individual batches, and these all run as independent processes.

76
00:04:25,540 --> 00:04:31,280
So the web server is a single process, and then each batch is an individual process.

77
00:04:31,280 --> 00:04:36,380
And it's used for all sorts of things, but anything that we don't want to do during

78
00:04:36,380 --> 00:04:41,800
a web request, things like time-intensive reports, data backfills, maybe things like

79
00:04:41,800 --> 00:04:47,160
billing, really anything that you wouldn't be able to complete during the course of a

80
00:04:47,200 --> 00:04:51,320
normal web request.

81
00:04:51,320 --> 00:04:58,240
So in terms of how we actually develop on Yelp main, we have about 20 to 30 changes

82
00:04:58,240 --> 00:05:01,400
per day, and it changes just a branch.

83
00:05:01,400 --> 00:05:06,960
So a branch can be huge, it can be small, but that's sort of how we measure it.

84
00:05:06,960 --> 00:05:10,400
And we batch up these changes into what we call pushes.

85
00:05:10,400 --> 00:05:15,460
And so that push or deploy takes about two hours on average.

86
00:05:15,460 --> 00:05:19,140
That's part of the reason why we batch it is because it takes so long, so otherwise

87
00:05:19,140 --> 00:05:24,320
there just wouldn't be enough hours in the day to push out all the code.

88
00:05:24,320 --> 00:05:28,940
And about 800 developers are simultaneously working on this.

89
00:05:28,940 --> 00:05:33,180
This is part of the reason why there's a lot of techniques in here that you might not necessarily

90
00:05:33,180 --> 00:05:35,140
use on a smaller code base.

91
00:05:35,140 --> 00:05:39,340
It really prevents the sort of one big branch-type migration.

92
00:05:39,340 --> 00:05:44,900
And we also have about 700 Python package dependencies in here, which is not definitely

93
00:05:44,900 --> 00:05:51,900
the biggest that you could get, but it's definitely a lot more than your typical Python app.

94
00:05:52,100 --> 00:05:54,140
Also it's pretty old.

95
00:05:54,140 --> 00:05:58,820
The first commit was in 2004, and you may or may not remember, Hey Ya was still topping

96
00:05:58,820 --> 00:06:03,420
the charts, it came out in 2003, but it was still out.

97
00:06:03,420 --> 00:06:08,260
And as I mentioned in the title, it's 3.8 million Python lines of code.

98
00:06:08,260 --> 00:06:15,980
There's more of other stuff like JavaScript and CSS, which if you printed that out would

99
00:06:15,980 --> 00:06:22,980
be about as long as 63 copies of War and Peace, which is a famously long historical fiction novel.

100
00:06:27,180 --> 00:06:32,020
It has about 100,000 tests, which is just kind of an unfathomable number.

101
00:06:32,020 --> 00:06:36,100
So I figured out, okay, how long does that take to run end to end?

102
00:06:36,140 --> 00:06:38,420
And it takes about 35 hours.

103
00:06:38,420 --> 00:06:39,780
We don't actually do that.

104
00:06:39,780 --> 00:06:41,840
We have a parallel test runner.

105
00:06:41,840 --> 00:06:47,900
But that 35 hours in total is about a little over three watches of the extended Lord of

106
00:06:47,900 --> 00:06:51,740
the Rings trilogy, which I'm sure some of you have done that before.

107
00:06:51,740 --> 00:06:52,740
It's definitely a marathon.

108
00:06:52,740 --> 00:06:56,940
You can do that three times.

109
00:06:56,940 --> 00:06:59,020
But this is all really important.

110
00:06:59,020 --> 00:07:00,380
We have lots of users.

111
00:07:00,380 --> 00:07:03,580
We have lots of people who use this stuff.

112
00:07:03,580 --> 00:07:10,580
You'll get about 33 million monthly users, which is about the total population of Peru.

113
00:07:13,140 --> 00:07:18,620
So let's talk about the actual migration and sort of what we needed to do in order to make

114
00:07:18,620 --> 00:07:20,100
this happen.

115
00:07:20,100 --> 00:07:22,620
So why did we do it, first of all?

116
00:07:22,620 --> 00:07:26,540
It's kind of obvious, I think, to most people why you'd want to do this, but it's worth

117
00:07:26,540 --> 00:07:32,580
saying anyway, which is that we knew that important libraries that we used were going

118
00:07:32,580 --> 00:07:34,420
to drop Python 2 support.

119
00:07:34,420 --> 00:07:40,340
Things like PyTest and PIP have already dropped Python 2 support right now.

120
00:07:40,340 --> 00:07:45,100
And also it's really nice to just be able to use the newer language features.

121
00:07:45,100 --> 00:07:48,660
It's a sort of developer productivity thing.

122
00:07:48,660 --> 00:07:53,980
In terms of what we needed to do in order to make this happen, we knew that we couldn't

123
00:07:53,980 --> 00:07:57,340
have normal development stop during this project.

124
00:07:57,340 --> 00:08:03,500
We couldn't just say, hey, we're not going to ship any new features.

125
00:08:03,500 --> 00:08:06,100
We're not going to increase revenue.

126
00:08:06,100 --> 00:08:08,340
That was just not an option.

127
00:08:08,340 --> 00:08:14,220
And also importantly, in order to make sure this was safe, we needed to make sure that

128
00:08:14,220 --> 00:08:16,140
all the changes were rolled back safe.

129
00:08:16,140 --> 00:08:20,420
So we couldn't be like, okay, we're going to make this big change, and if it breaks

130
00:08:20,420 --> 00:08:23,740
something, we can't go back.

131
00:08:23,740 --> 00:08:26,500
We don't want to get in that position.

132
00:08:26,500 --> 00:08:31,460
So let's talk about sort of the different phases of this and what that timeline looked

133
00:08:31,460 --> 00:08:32,460
like.

134
00:08:32,460 --> 00:08:37,740
So first was basically making sure that the code parsed under Python 3.

135
00:08:37,740 --> 00:08:41,060
That was a really simple task, actually.

136
00:08:41,060 --> 00:08:45,060
There's a lot of, there were very few actual changes in that space.

137
00:08:45,060 --> 00:08:48,300
So it took us about two weeks.

138
00:08:48,300 --> 00:08:49,300
Importability was next.

139
00:08:49,300 --> 00:08:53,460
This was basically making sure that we could actually import the code under Python 3.

140
00:08:53,460 --> 00:08:56,580
That seems kind of trivial, but it's actually a good amount of work, and it took us about

141
00:08:56,580 --> 00:08:58,140
two months.

142
00:08:58,140 --> 00:09:03,100
But the biggest one by far is the third phase, which was what I call functional parity, which

143
00:09:03,100 --> 00:09:04,660
took us about a year.

144
00:09:04,660 --> 00:09:07,620
And this is basically just making sure that the code works the same.

145
00:09:07,620 --> 00:09:10,660
I'll go into a lot of details about that later.

146
00:09:10,660 --> 00:09:16,860
And then finally, once we actually were confident that our code was working the same under Python

147
00:09:16,860 --> 00:09:22,260
2 and 3, we went to the rollout phase, where we actually rolled it out to production.

148
00:09:22,660 --> 00:09:26,180
And that took us about two months.

149
00:09:26,180 --> 00:09:32,140
So in terms of actually tracking this work, you have to understand what needs to be done

150
00:09:32,140 --> 00:09:34,620
and making sure that people are coordinating all that stuff.

151
00:09:34,620 --> 00:09:37,260
So this is sort of what we did for each of those.

152
00:09:37,260 --> 00:09:38,540
First is the parsability, as I mentioned.

153
00:09:38,540 --> 00:09:40,980
This was a really small part of the task.

154
00:09:40,980 --> 00:09:44,180
And so it was literally like you just try and parse all the files.

155
00:09:44,180 --> 00:09:47,860
You just kind of run Python 3 on it, did it parse?

156
00:09:47,860 --> 00:09:49,540
Okay.

157
00:09:49,540 --> 00:09:53,140
If it didn't make a ticket, that was like a single pass.

158
00:09:53,140 --> 00:09:58,340
For importability, what we did is we just imported all the files and then inspected

159
00:09:58,340 --> 00:10:03,940
the import error stack trace and looked at what was the last file that's actually in

160
00:10:03,940 --> 00:10:07,500
our repo that caused this import error.

161
00:10:07,500 --> 00:10:15,220
And then just sort of pipe that to unique dash C and then sort dash N. And then you

162
00:10:15,220 --> 00:10:19,620
get, you know, here are your top files that are causing import errors.

163
00:10:19,620 --> 00:10:24,500
And you just kind of run that script every week or something, file tickets, and then

164
00:10:24,500 --> 00:10:27,820
pick up the tickets and fix them.

165
00:10:27,820 --> 00:10:30,900
For the functional parity, most of it was about running tests.

166
00:10:30,900 --> 00:10:37,740
So we have a test runner already, which groups all of the test failures by trace back.

167
00:10:37,740 --> 00:10:42,900
And so we basically ran the test periodically.

168
00:10:42,900 --> 00:10:44,940
We basically run it every day.

169
00:10:44,940 --> 00:10:52,980
And then we would file the tickets of like what was at the top in terms of issues.

170
00:10:52,980 --> 00:10:57,500
And then, you know, pick stuff off of the, out of that pool.

171
00:10:57,500 --> 00:11:01,540
So an important tool in this, which some of you may or may not be familiar with, is Python

172
00:11:01,540 --> 00:11:02,860
modernize.

173
00:11:02,860 --> 00:11:05,900
So Python modernize is a great tool.

174
00:11:05,900 --> 00:11:11,940
It's an open source tool that we used, which converts Python 2 only code to Python 2 and

175
00:11:11,980 --> 00:11:13,740
3 compatible code.

176
00:11:13,740 --> 00:11:19,140
Since we wanted to make sure that this rollout was, you know, rollback safe, we needed to

177
00:11:19,140 --> 00:11:20,740
make sure that it was compatible.

178
00:11:20,740 --> 00:11:25,340
We couldn't just use 2 to 3, even though Python modernize actually uses lib 2 to 3.

179
00:11:25,340 --> 00:11:32,700
It uses a lot of the functionality in lib 2 to 3 to get you to that state.

180
00:11:32,700 --> 00:11:37,220
Some of the 2 to 3 fixes are actually just totally compatible.

181
00:11:37,220 --> 00:11:40,180
But some of them use 6 as a compatibility layer.

182
00:11:40,220 --> 00:11:45,020
There's actually a similar tool called Python futureize, which uses future.

183
00:11:45,020 --> 00:11:49,580
We were already using 6, so we decided to use modernize instead.

184
00:11:49,580 --> 00:11:53,540
There's not really like a particular reason to use one or the other other than, you know,

185
00:11:53,540 --> 00:11:55,660
your particular setup.

186
00:11:55,660 --> 00:12:00,100
In terms of what it actually does is, you know, it fixes some of the syntax changes.

187
00:12:00,100 --> 00:12:03,340
It fixes some of the standard lib import changes.

188
00:12:03,340 --> 00:12:06,540
And also some of the behavior changes.

189
00:12:06,540 --> 00:12:13,380
I'll go through this example that I have on the right in terms of each of the changes.

190
00:12:13,380 --> 00:12:22,300
So first is in Python 2, you imported the Q object, the Q class from the Q module where

191
00:12:22,300 --> 00:12:25,380
it was capital case.

192
00:12:25,380 --> 00:12:30,340
But in Python 3, you import it from the lower case module name.

193
00:12:30,340 --> 00:12:32,700
So you can't really import it from both at the same time.

194
00:12:32,740 --> 00:12:37,940
So we use this 6 shim to import that class.

195
00:12:37,940 --> 00:12:44,420
Another one is that the values method and the items method and the keys method, those

196
00:12:44,420 --> 00:12:50,580
all return iterators instead of lists in Python 3.

197
00:12:50,580 --> 00:12:55,460
So in order to be compatible, you have to wrap those in a list.

198
00:12:55,460 --> 00:12:57,460
And it does that for you automatically.

199
00:12:57,500 --> 00:13:03,980
Similarly, there was the iter items method, iter values and iter keys which were removed

200
00:13:03,980 --> 00:13:06,500
in Python 3 because they were now redundant.

201
00:13:06,500 --> 00:13:12,660
And so now there's a shim for 6 and automatically replaces the regular method call with that

202
00:13:12,660 --> 00:13:14,140
shim.

203
00:13:14,140 --> 00:13:20,140
And then finally, there's a syntax change which is that you used to be able to raise

204
00:13:20,140 --> 00:13:25,220
exceptions like this where you would give the exception class comma and then arguments.

205
00:13:25,220 --> 00:13:26,540
But you can't do that anymore.

206
00:13:26,540 --> 00:13:32,460
So now it just constructs the exception for you.

207
00:13:32,460 --> 00:13:38,940
So let's talk a little bit about some of the tooling that we used during this migration.

208
00:13:38,940 --> 00:13:40,980
So one of the things is that we used precommit.

209
00:13:40,980 --> 00:13:44,380
Python modernized is actually a precommit hook.

210
00:13:44,380 --> 00:13:50,260
And precommit's really nice because it allows us to run all these linters and code mods

211
00:13:50,260 --> 00:13:53,220
and make sure that they get run for new branches.

212
00:13:53,260 --> 00:13:58,100
So we made sure that any new code checked in would be run through these code mods so

213
00:13:58,100 --> 00:14:03,300
that they were as compatible as possible with Python 3.

214
00:14:03,300 --> 00:14:07,300
And one of the things that was kind of cool is that we actually added black to this repo

215
00:14:07,300 --> 00:14:11,060
during the work on this migration.

216
00:14:11,060 --> 00:14:12,660
And it didn't require any extra dev time.

217
00:14:12,660 --> 00:14:15,020
It just sort of happened and we didn't really think about it.

218
00:14:15,020 --> 00:14:18,380
And it just worked.

219
00:14:18,380 --> 00:14:21,180
So let's sort of take this piece of code.

220
00:14:21,180 --> 00:14:27,900
I made up this silly piece of code which allows us to sort of go through the phases of this

221
00:14:27,900 --> 00:14:32,380
migration and what those looked like at each stage.

222
00:14:32,380 --> 00:14:35,300
So first is possibility, as I mentioned.

223
00:14:35,300 --> 00:14:40,620
So in this case, you basically just run, we ran Python modernize.

224
00:14:40,620 --> 00:14:42,300
And this fixed a couple of syntax errors.

225
00:14:42,300 --> 00:14:46,860
As I mentioned, there's the change to the raise syntax.

226
00:14:46,860 --> 00:14:48,780
There's also a change to the accept syntax.

227
00:14:48,940 --> 00:14:55,020
You used to be able to say, accept, exception, comma, and then a variable name that you bind

228
00:14:55,020 --> 00:14:57,540
the exception to.

229
00:14:57,540 --> 00:14:58,540
That was removed in Python 3.

230
00:14:58,540 --> 00:15:00,820
So you now have to say as.

231
00:15:00,820 --> 00:15:05,340
And Python modernize just fixes this for you.

232
00:15:05,340 --> 00:15:06,340
And that's it.

233
00:15:06,340 --> 00:15:07,700
That's possibility.

234
00:15:07,700 --> 00:15:15,540
So importability is basically, we're again using Python modernize.

235
00:15:15,540 --> 00:15:18,020
And we did it in chunks mostly for rollback safety.

236
00:15:18,260 --> 00:15:22,380
We wanted to make sure that our changes were relatively small.

237
00:15:22,380 --> 00:15:27,420
And then we also had to fix our package importability.

238
00:15:27,420 --> 00:15:33,020
So a lot of that was sort of upgrading those packages to versions that now had Python 3

239
00:15:33,020 --> 00:15:34,020
support.

240
00:15:34,020 --> 00:15:39,180
Some of them we had to replace because they never got Python 3 support.

241
00:15:39,180 --> 00:15:43,380
We usually used some sort of fork or something like that.

242
00:15:43,380 --> 00:15:45,580
And some of them we just kind of had to refactor away.

243
00:15:45,580 --> 00:15:47,380
They never got Python 3 support.

244
00:15:47,380 --> 00:15:49,500
And we were like, well, we don't really need these that bad.

245
00:15:49,500 --> 00:15:51,260
We can just refactor it.

246
00:15:51,260 --> 00:15:53,660
And then we also had our internal packages.

247
00:15:53,660 --> 00:15:57,540
So those, some of them didn't have Python 3 support yet.

248
00:15:57,540 --> 00:15:59,060
They were too old.

249
00:15:59,060 --> 00:16:04,580
And so we had to upgrade them to have Python 3 support and then bump them in Yelp main.

250
00:16:04,580 --> 00:16:09,000
And mostly that was just running Python modernize on them.

251
00:16:09,000 --> 00:16:12,380
So now we get this piece of code importable.

252
00:16:12,580 --> 00:16:18,460
And one of the things is that C pickle is removed in Python 3 in favor of being merged

253
00:16:18,460 --> 00:16:19,940
into the pickle module.

254
00:16:19,940 --> 00:16:21,900
So there's a sixth shim for that.

255
00:16:21,900 --> 00:16:28,380
And Python modernize just fixes that and all of the import and all of the references.

256
00:16:28,380 --> 00:16:32,780
So functional parity is the next thing.

257
00:16:32,780 --> 00:16:38,100
Functional parity for this was mostly that, so first of all is we built this parallel

258
00:16:38,100 --> 00:16:39,100
virtual AMP.

259
00:16:39,140 --> 00:16:44,940
We made a second virtual AMP that was Python 3 based that used most of the same packages.

260
00:16:44,940 --> 00:16:48,420
We had to filter out a few things that were mostly backports that you can't install in

261
00:16:48,420 --> 00:16:50,620
Python 3.

262
00:16:50,620 --> 00:17:04,020
Things like typing and features were things that we just didn't need in Python 3.

263
00:17:04,020 --> 00:17:07,460
And this also let us do development against Python 3.

264
00:17:07,460 --> 00:17:15,580
So people could use Python 3 to verify their code would work once we flipped.

265
00:17:15,580 --> 00:17:18,300
Next we wanted to get our tests to pass.

266
00:17:18,300 --> 00:17:22,100
As I mentioned, we need to fix 100,000 tests, which is a ton.

267
00:17:22,100 --> 00:17:25,020
We still used a lot of Python modernize stuff.

268
00:17:25,020 --> 00:17:27,380
Some of that was automatable.

269
00:17:27,380 --> 00:17:31,180
As you can see on the right, this is our code again.

270
00:17:31,180 --> 00:17:36,020
And one of the things is that we're using the Unicode built in in Python 2, which doesn't

271
00:17:36,420 --> 00:17:38,260
exist in Python 3.

272
00:17:38,260 --> 00:17:44,180
So we used a six shim in order to get around that.

273
00:17:44,180 --> 00:17:50,740
So that was nice, but the elephant in the room is always going to be text, text and

274
00:17:50,740 --> 00:17:55,860
bytes, and mixing those up was really easy in Python 2.

275
00:17:55,860 --> 00:17:58,380
So we had to fix those in Python 3.

276
00:17:58,380 --> 00:18:02,740
And mostly that was relying on tests.

277
00:18:02,740 --> 00:18:06,260
There were some other tricky things, things like double under bool versus double under

278
00:18:06,260 --> 00:18:07,740
non-zero.

279
00:18:07,740 --> 00:18:16,380
These were in Python 3, double under bool is used for if statement truthiness.

280
00:18:16,380 --> 00:18:20,820
That's how you customize if statement truthiness.

281
00:18:20,820 --> 00:18:22,900
And in Python 2, it's double under non-zero.

282
00:18:22,900 --> 00:18:28,380
So there were some custom classes that had double under non-zero defined but not double

283
00:18:28,380 --> 00:18:30,020
under bool.

284
00:18:30,500 --> 00:18:34,660
The thing about that is it's confusing because it just sort of passes the if statement or

285
00:18:34,660 --> 00:18:39,140
doesn't pass the if statement when you expect.

286
00:18:39,140 --> 00:18:44,740
So you have to make sure that that gets, that you sort of figure out where the actual error

287
00:18:44,740 --> 00:18:45,740
is.

288
00:18:45,740 --> 00:18:49,900
And the fix is simple, but actually figuring out where the error is is more difficult.

289
00:18:49,900 --> 00:18:51,580
Similar with meta classes.

290
00:18:51,580 --> 00:18:55,740
With meta classes, this is actually fixable by Python modernize.

291
00:18:55,740 --> 00:18:59,580
Anytime you're using meta class, it uses a shim to make sure that it's working in both

292
00:18:59,580 --> 00:19:05,740
Python 2 and Python 3, but the behavior can be confusing.

293
00:19:05,740 --> 00:19:12,020
But our goal was always to have behavior consistency between Python 2 and Python 3 so that we could

294
00:19:12,020 --> 00:19:17,980
make sure that everything worked when we rolled forward.

295
00:19:17,980 --> 00:19:23,020
One of the other things we had to deal with was the fact that we had these caches that

296
00:19:23,020 --> 00:19:24,580
used pickle.

297
00:19:24,580 --> 00:19:28,420
And if you've ever had to deal with pickle across Python 2 and 3, it doesn't really work

298
00:19:28,420 --> 00:19:29,420
super great.

299
00:19:29,420 --> 00:19:31,180
It's sort of like weird gotchas.

300
00:19:31,180 --> 00:19:35,900
So we just decided that we were just going to get rid of pickle entirely.

301
00:19:35,900 --> 00:19:39,880
So what we did is we decided to switch to JSON.

302
00:19:39,880 --> 00:19:43,320
But we didn't want to just completely bust our caches because these caches are important

303
00:19:43,320 --> 00:19:45,340
for the performance of our website.

304
00:19:45,340 --> 00:19:52,060
So what I did is basically started logging these JSON encoded values.

305
00:19:53,060 --> 00:20:00,700
And then we would check the quality of the values once they were encoded.

306
00:20:00,700 --> 00:20:07,900
So we basically make sure that the pickle and the JSON encoded cache values ended up

307
00:20:07,900 --> 00:20:09,820
being the same.

308
00:20:09,820 --> 00:20:15,420
And once we got those to a working state, we would basically switch to what we call

309
00:20:15,420 --> 00:20:19,260
the mixed mode where we would try to read the JSON values.

310
00:20:19,340 --> 00:20:22,300
And if that didn't work, we would fall back to pickle, read the pickle value, and then

311
00:20:22,300 --> 00:20:25,460
we would write back JSON.

312
00:20:25,460 --> 00:20:28,580
And then any time we were writing a new value, write JSON.

313
00:20:28,580 --> 00:20:32,700
Eventually over time, if you wait long enough, you end up with mostly JSON and you can flip

314
00:20:32,700 --> 00:20:36,100
to doing just JSON only.

315
00:20:36,100 --> 00:20:41,420
There were a few things that were really complex, weird setups that we just couldn't fix.

316
00:20:41,420 --> 00:20:43,980
And so we ended up just using a cache prefix.

317
00:20:43,980 --> 00:20:49,460
So those things just were different on Python 2 and Python 3.

318
00:20:49,460 --> 00:20:55,340
Another thing we had to deal with was context lib nested, which was removed in Python 3.

319
00:20:55,340 --> 00:20:58,580
This was relatively easy to fix.

320
00:20:58,580 --> 00:21:04,780
It just didn't have an automated fix, which is basically we wrote a function which used

321
00:21:04,780 --> 00:21:10,420
exit stack to replicate the interface and we used a little bit of sed to replace the

322
00:21:10,460 --> 00:21:16,060
imports and the usages.

323
00:21:16,060 --> 00:21:20,860
Another thing is that you can actually end up, you may or may not be familiar with the

324
00:21:20,860 --> 00:21:27,780
CMP function that used to be in Python 2's sorted and list.sort.

325
00:21:27,780 --> 00:21:35,340
So that was mostly, that was the key function was added in, I can't remember what version

326
00:21:35,340 --> 00:21:39,220
of Python 2, but eventually the CMP function was removed.

327
00:21:39,220 --> 00:21:44,460
And these were just slightly different ways of dealing with sorting, deciding how to sort

328
00:21:44,460 --> 00:21:45,460
things.

329
00:21:45,460 --> 00:21:49,020
But it turns out you can actually use both.

330
00:21:49,020 --> 00:21:55,060
There's a shim function for converting a CMP function to a key function in func tools,

331
00:21:55,060 --> 00:21:58,060
func tools CMP to key, which is really useful.

332
00:21:58,060 --> 00:22:02,400
But it turns out that sometimes you can use both and that wasn't really supported.

333
00:22:02,400 --> 00:22:06,700
So we wrote this function which takes both of those functions and converts it into a

334
00:22:06,700 --> 00:22:07,700
new key function.

335
00:22:08,300 --> 00:22:15,140
And all it really does is it just calls the CMP to key on the CMP function and that calls

336
00:22:15,140 --> 00:22:21,300
the key function on the value that's passed in and passes that new value to the CMP to

337
00:22:21,300 --> 00:22:24,380
key created function.

338
00:22:24,380 --> 00:22:31,420
Sorry, I should just, whatever.

339
00:22:31,420 --> 00:22:38,620
So that's, and that was really useful because there are some situations where that was just

340
00:22:38,620 --> 00:22:41,200
really hard to refactor.

341
00:22:41,200 --> 00:22:43,200
So rollout.

342
00:22:43,200 --> 00:22:44,780
This is I think the coolest part.

343
00:22:44,780 --> 00:22:50,980
This is the part that I found was the most difficult.

344
00:22:50,980 --> 00:22:57,780
But we came up with a way of dealing with the situation that I think is really interesting,

345
00:22:57,780 --> 00:23:03,020
which is that since we had these parallel Python 2 and 3 virtual ends, we were able

346
00:23:03,020 --> 00:23:08,940
to actually run separate instances, some under Python 2 and under Python 3, but running the

347
00:23:08,940 --> 00:23:11,740
same code otherwise.

348
00:23:11,740 --> 00:23:16,880
And we would use a reverse, we would use the reverse proxy layer that we have to basically

349
00:23:16,880 --> 00:23:24,860
look at the URL prefix and go to the Python 3 instance or the Python 2 instance.

350
00:23:24,900 --> 00:23:29,860
And this allowed us to granulately roll out individual URL prefixes.

351
00:23:29,860 --> 00:23:33,780
And it was really great because if we were having errors with a particular prefix, we

352
00:23:33,780 --> 00:23:35,100
didn't have to roll back everything.

353
00:23:35,100 --> 00:23:37,580
We just had to say, oh, that prefix is bad.

354
00:23:37,580 --> 00:23:38,580
Let's roll it back.

355
00:23:38,580 --> 00:23:41,980
Let's fix the issue and then roll it back forward.

356
00:23:41,980 --> 00:23:46,820
This was really valuable because some of the errors were just not caught by tests.

357
00:23:46,820 --> 00:23:53,960
Our test coverage is okay, but you're just never going to be 100% perfect in that way.

358
00:23:53,960 --> 00:23:58,000
So it was really valuable that we were able to do this.

359
00:23:58,000 --> 00:24:01,400
And we coordinated using an ownership spreadsheet.

360
00:24:01,400 --> 00:24:05,340
There were about 800 end point prefixes across the six sites.

361
00:24:05,340 --> 00:24:07,500
And then we did a similar thing for batches.

362
00:24:07,500 --> 00:24:13,120
Since they were individual processes, we could actually just flip them to Python 3 independently.

363
00:24:13,120 --> 00:24:17,840
And we did a similar ownership spreadsheet.

364
00:24:17,840 --> 00:24:23,000
So in terms of the outcomes, it was very much a very long tail, especially during the functional

365
00:24:23,040 --> 00:24:24,040
parity page.

366
00:24:24,040 --> 00:24:32,040
This is a graph of our test failures over time.

367
00:24:32,040 --> 00:24:40,680
So we started out really high test failure or sort of passing percentage.

368
00:24:40,680 --> 00:24:45,680
We started out really low passing percentage, but we quickly got up to very, very high.

369
00:24:45,680 --> 00:24:52,960
But the last few percentage points took a lot longer because we were doing less impactful

370
00:24:53,920 --> 00:24:56,200
fixes each time.

371
00:24:56,200 --> 00:24:58,760
Type annotations would have been really useful.

372
00:24:58,760 --> 00:25:02,840
We thought about adding type annotations before this project, but we decided that was a huge

373
00:25:02,840 --> 00:25:05,320
project in itself, so we didn't do it.

374
00:25:05,320 --> 00:25:10,760
But it would have been exceptionally useful, especially for the text and bytes issues.

375
00:25:10,760 --> 00:25:12,240
The rollout did take longer than expected.

376
00:25:12,240 --> 00:25:14,840
We were originally scoping for a month.

377
00:25:14,840 --> 00:25:18,200
Part of that was that we were blocked by teams doing verification.

378
00:25:18,200 --> 00:25:21,600
And that was kind of our fault for not really notifying them earlier.

379
00:25:22,240 --> 00:25:29,160
So because of this sort of this curve, we didn't really know exactly when we'd be done.

380
00:25:29,160 --> 00:25:31,760
So we just kind of like, oh, we're close to done.

381
00:25:31,760 --> 00:25:32,760
Let's let people know.

382
00:25:32,760 --> 00:25:35,680
But that was a little bit too late.

383
00:25:35,680 --> 00:25:40,920
In the end, we ended up with about a 15 to 20 percent speed up, which is great.

384
00:25:40,920 --> 00:25:42,240
We were not going for that at all.

385
00:25:42,240 --> 00:25:45,880
We just wanted to get our code working on a newer version of Python, but it was faster.

386
00:25:45,880 --> 00:25:47,400
It was great.

387
00:25:47,400 --> 00:25:51,280
Plus we used about 26 percent less memory.

388
00:25:51,280 --> 00:25:57,680
I think both of these really show that this type of basic sort of maintenance can really

389
00:25:57,680 --> 00:26:01,160
have an effect on your bottom line.

390
00:26:01,160 --> 00:26:04,360
And it's really valuable to do it for reasons like this.

391
00:26:06,360 --> 00:26:10,480
In terms of the future, what we're doing right now is we're automating minor Python version

392
00:26:10,480 --> 00:26:11,480
bumps.

393
00:26:11,480 --> 00:26:16,040
We're trying to leverage the existing tool that we already have, which is used to bump

394
00:26:16,040 --> 00:26:17,040
packages.

395
00:26:17,040 --> 00:26:22,000
We're using PIP tools to do targeted upgrades and then run tests to ensure functional parity.

396
00:26:22,000 --> 00:26:26,880
And this is actually running as one of our internal tools.

397
00:26:26,880 --> 00:26:28,120
And it's actually running right now.

398
00:26:28,120 --> 00:26:33,560
And we can do these upgrades where we go from, you know, to newer minor Python versions.

399
00:26:33,560 --> 00:26:36,160
It's really great.

400
00:26:36,160 --> 00:26:37,160
So that's it.

401
00:26:37,160 --> 00:26:42,640
I know that there's no, like, official Q&A, but I'm not doing anything after this.

402
00:26:42,640 --> 00:26:45,800
So if you want to ask me any questions, I'm happy to do it in the hallway.

