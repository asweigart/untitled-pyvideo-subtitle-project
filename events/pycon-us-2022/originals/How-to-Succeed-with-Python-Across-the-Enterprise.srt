1
00:00:00,000 --> 00:00:08,680
All right, so we're going to introduce the last speaker of our session.

2
00:00:08,680 --> 00:00:13,680
This is Greg Komposteen from, looks like he's from, oh, he didn't put it up.

3
00:00:13,680 --> 00:00:14,680
Oh, yes.

4
00:00:14,680 --> 00:00:16,680
Bloomberg, I could not even read it on the slides.

5
00:00:16,680 --> 00:00:17,680
So Greg is going to give us a talk.

6
00:00:17,680 --> 00:00:21,920
It's going to be on how to succeed with Python across the enterprise, and the subtitle on

7
00:00:21,920 --> 00:00:26,320
this one is by trying really, really, really, really hard.

8
00:00:26,320 --> 00:00:27,320
All for you, Greg.

9
00:00:27,560 --> 00:00:31,640
Okay, thank you so much for that introduction, and I'm surprised with how loud I suddenly

10
00:00:31,640 --> 00:00:32,640
am.

11
00:00:32,640 --> 00:00:36,440
I was having a little bit of a technical struggle with the display earlier.

12
00:00:36,440 --> 00:00:40,360
Thank you for being patient with that.

13
00:00:40,360 --> 00:00:42,680
Just a bit about Bloomberg first.

14
00:00:42,680 --> 00:00:46,000
We celebrated our 40th anniversary just last year.

15
00:00:46,000 --> 00:00:53,400
It was founded as a pretty small company that provides information to the financial industry,

16
00:00:53,480 --> 00:00:58,440
and over the years we've grown to be a fairly large and well-established company.

17
00:00:58,440 --> 00:01:03,520
We have offices all over the world, almost 200 of them.

18
00:01:03,520 --> 00:01:08,480
They tend to be in real high-priced real estate locations because we're near financial districts

19
00:01:08,480 --> 00:01:12,840
and world capitals and things like that.

20
00:01:12,840 --> 00:01:16,480
We have over 20,000 employees at this point.

21
00:01:16,480 --> 00:01:22,880
Almost 7,000 of them are software engineers, and quite a few of them are using Python today.

22
00:01:23,560 --> 00:01:28,760
We've also appeared in television and movies.

23
00:01:28,760 --> 00:01:35,480
If you have a drama or any kind of television or movie show and it finances part of the

24
00:01:35,480 --> 00:01:41,240
story, to look authentic, you have to have a Bloomberg terminal on a desk somewhere.

25
00:01:41,240 --> 00:01:49,080
This is from Billions, but our product has also appeared in The Big Short, one of my

26
00:01:49,120 --> 00:01:58,400
favorite movies, Silicon Valley and Enterprise.

27
00:01:58,400 --> 00:02:05,400
For much of its history, C++ was the development language of choice at Bloomberg.

28
00:02:05,400 --> 00:02:12,400
In the mid-2000s, JavaScript started gaining traction for UI development mostly.

29
00:02:12,440 --> 00:02:19,440
We did do some server-side JavaScript before Node.js was the thing, but that aspect of

30
00:02:19,440 --> 00:02:22,040
it never really caught on.

31
00:02:22,040 --> 00:02:26,360
Python was starting to make some inroads at around the same time.

32
00:02:26,360 --> 00:02:33,360
Myself, I began working with Python at another company around 2007.

33
00:02:35,160 --> 00:02:37,720
Mostly started off doing data massaging.

34
00:02:37,720 --> 00:02:44,720
I did build this one, large-scale automation of processes that leverage Python.

35
00:02:49,280 --> 00:02:55,360
I also wrote this pretty interesting testing framework that isolated some C++ libraries

36
00:02:55,360 --> 00:03:02,360
in this really large, complicated application and allowed for essentially a level of integration

37
00:03:02,400 --> 00:03:06,440
testing that hadn't been possible before that work.

38
00:03:06,440 --> 00:03:11,920
Why Python?

39
00:03:11,920 --> 00:03:18,920
I mentioned JavaScript was popular, but doing some code archaeology in our repos, I found

40
00:03:19,760 --> 00:03:25,600
that there's a lot of other languages that the company has investigated or is using to

41
00:03:25,600 --> 00:03:32,360
a certain extent within the company today, but none of them have really achieved the

42
00:03:32,360 --> 00:03:38,720
level of success that Python has.

43
00:03:38,720 --> 00:03:44,440
There are three pillars, really, to how we built up Python to be successful.

44
00:03:44,440 --> 00:03:51,320
The first was strong community interest, but this in itself is a necessary but not a sufficient

45
00:03:51,320 --> 00:03:53,480
condition for success.

46
00:03:53,480 --> 00:04:00,480
On top of that, we put together organizations that helped us manage communication and coordination

47
00:04:02,760 --> 00:04:09,760
throughout the Python community, and we also organized planned technical support for Python.

48
00:04:14,720 --> 00:04:19,280
The community interest started out as it might do at a lot of other companies.

49
00:04:19,280 --> 00:04:24,200
People were looking at it as this great general purpose tool with the batteries included.

50
00:04:24,200 --> 00:04:26,040
You could do your data analysis with it.

51
00:04:26,040 --> 00:04:31,320
You could play around with machine learning and other cool stuff.

52
00:04:31,320 --> 00:04:34,720
You could stand up web services with it pretty easily.

53
00:04:34,720 --> 00:04:38,520
Unfortunately, that wasn't enough at Bloomberg.

54
00:04:38,520 --> 00:04:45,520
The company had a lot of bespoke network and database APIs that were used by most of the

55
00:04:46,560 --> 00:04:48,920
applications there.

56
00:04:48,920 --> 00:04:51,600
If you do all this work, you're an island unto yourself.

57
00:04:51,600 --> 00:04:56,360
You really can't communicate the results of your work to other applications within the

58
00:04:56,360 --> 00:05:00,240
company.

59
00:05:00,560 --> 00:05:07,120
As often happens in innovation, an intern project got started.

60
00:05:07,120 --> 00:05:12,200
This person took some of the more popular C++ libraries, created a wrapper around them

61
00:05:12,200 --> 00:05:15,480
so that they could be embedded into the Python interpreter.

62
00:05:15,480 --> 00:05:20,680
Suddenly, people were able to write real business applications and communicate with other applications

63
00:05:20,680 --> 00:05:27,680
in the company, and things started to take off.

64
00:05:28,200 --> 00:05:33,280
At about the same time, the company embraced this concept of the guild.

65
00:05:33,280 --> 00:05:36,040
We have this nice bureaucratic definition here.

66
00:05:36,040 --> 00:05:43,040
Essentially, a guild is a group of volunteers who are focusing on technology considered

67
00:05:43,080 --> 00:05:50,080
important to Bloomberg and working to promote the best use of that technology.

68
00:05:53,020 --> 00:05:55,320
The Python guild is just one of several guilds.

69
00:05:55,320 --> 00:06:02,320
There's also a database guild, a JavaScript guild, a C++ guild, a testing guild.

70
00:06:06,640 --> 00:06:13,640
Our guild is focused on helping to communicate with the internal Python community at Bloomberg.

71
00:06:17,080 --> 00:06:24,080
They organize meetings, they send out newsletters, they contribute to internal projects.

72
00:06:24,560 --> 00:06:30,880
There's also some open source contributions that go on.

73
00:06:30,880 --> 00:06:35,440
Early on, they're also doing some work to maintain this extended interpreter that I

74
00:06:35,440 --> 00:06:38,440
mentioned earlier.

75
00:06:38,440 --> 00:06:45,440
For technical support, the Python infrastructure team was started in early 2016.

76
00:06:47,840 --> 00:06:51,280
There was one person in San Francisco.

77
00:06:51,320 --> 00:06:56,640
A few months after it started, I was hired as number two.

78
00:06:56,640 --> 00:06:59,240
This is our office.

79
00:06:59,240 --> 00:07:00,540
It's a really nice office.

80
00:07:00,540 --> 00:07:02,360
It's one of the nicer offices I've worked in.

81
00:07:02,360 --> 00:07:05,880
A lot of the Bloomberg offices are pretty spiff.

82
00:07:05,880 --> 00:07:12,440
I'm fond of this one.

83
00:07:12,440 --> 00:07:18,920
My team set out some objectives about what we need to do on the technical side.

84
00:07:18,920 --> 00:07:22,800
We needed to stabilize what was in front of us.

85
00:07:22,800 --> 00:07:29,480
The C++ extensions in this interpreter had some issues, and we had to deal with those.

86
00:07:29,480 --> 00:07:33,680
We needed to figure out how we were going to move forward with how these libraries had

87
00:07:33,680 --> 00:07:35,160
been wrapped.

88
00:07:35,160 --> 00:07:42,160
We needed to figure out how to manage the interpreters and upgrades to them.

89
00:07:43,760 --> 00:07:48,840
Packaging and deployment was also a bit of a challenge.

90
00:07:48,840 --> 00:07:52,160
This was just two people.

91
00:07:52,160 --> 00:07:57,880
We also were setting out standards about how to use the interpreter in these libraries

92
00:07:57,880 --> 00:08:04,880
as well, trying to document a bunch of stuff.

93
00:08:05,760 --> 00:08:09,840
When I arrived, the community was running ahead of what the Guild and infrastructure

94
00:08:09,840 --> 00:08:11,680
team were doing.

95
00:08:11,680 --> 00:08:16,520
They were downloading just random versions of Python and building up applications out

96
00:08:16,520 --> 00:08:17,560
of it.

97
00:08:17,560 --> 00:08:23,840
They were creating one-offs of the extended interpreter that the intern had created.

98
00:08:23,840 --> 00:08:29,000
There was a lot of dependency management issues that were creeping up.

99
00:08:29,000 --> 00:08:34,360
This was especially problematic in this environment because our infrastructure had been built

100
00:08:34,360 --> 00:08:40,560
around this concept of C++ applications, which are distributed as big, standalone binary

101
00:08:41,040 --> 00:08:48,040
blobs, and the notion of shared applications on a server running out of one interpreter

102
00:08:49,760 --> 00:08:55,640
setup didn't really play well with that.

103
00:08:55,640 --> 00:08:59,480
The C++ wrapper, it had a lot of drawbacks as well.

104
00:08:59,480 --> 00:09:05,440
While it was popular and a lot of people were using it, it was a thin wrapper over the C++

105
00:09:05,440 --> 00:09:08,900
code.

106
00:09:09,540 --> 00:09:13,660
A lot of C++ idioms percolated to the top.

107
00:09:13,660 --> 00:09:19,100
There was a bunch of classes there that you wouldn't need in a normal Python environment,

108
00:09:19,100 --> 00:09:21,860
and the naming conventions looked like C++ code.

109
00:09:21,860 --> 00:09:25,420
It looked like you're writing C++ without the curly braces.

110
00:09:25,420 --> 00:09:28,140
It wasn't that great to look at.

111
00:09:28,140 --> 00:09:32,940
There were also a lot of issues around memory management because writing this kind of code,

112
00:09:32,940 --> 00:09:37,700
when you're a normal path for developing a binary extension is you write it with that

113
00:09:37,700 --> 00:09:39,420
purpose in mind.

114
00:09:39,420 --> 00:09:46,420
Wrapping code that was never intended for that is quite a bit more complicated.

115
00:09:51,700 --> 00:09:58,700
The Python community, while it was largely volunteer driven early on, now they're relying

116
00:09:59,700 --> 00:10:06,700
more on the guild or they're participating in the guild to help facilitate what's going

117
00:10:08,460 --> 00:10:11,040
on in Python.

118
00:10:11,040 --> 00:10:18,040
They're also contributing to what the infrastructure team is doing in various ways.

119
00:10:18,420 --> 00:10:24,380
They're standing up their own inner source projects.

120
00:10:24,380 --> 00:10:28,960
That's also really pretty interesting to see.

121
00:10:28,960 --> 00:10:34,100
The guild early on had a lot of challenges it was facing.

122
00:10:34,100 --> 00:10:36,700
It was all volunteer effort.

123
00:10:36,700 --> 00:10:38,420
It was a very small team.

124
00:10:38,420 --> 00:10:40,860
There was an awful lot to do.

125
00:10:40,860 --> 00:10:47,860
Burnout was an easy thing to face.

126
00:10:49,700 --> 00:10:53,260
We changed the guidelines for participation.

127
00:10:53,260 --> 00:10:59,480
It used to be you had to be very experienced in the details of Python to join.

128
00:10:59,480 --> 00:11:03,180
We said, well, all you have to have is an interest in participating.

129
00:11:03,180 --> 00:11:06,180
It doesn't matter what your skill level is.

130
00:11:06,180 --> 00:11:07,580
There's lots of work here to do.

131
00:11:07,580 --> 00:11:11,220
We'll find something that's appropriate for you.

132
00:11:11,220 --> 00:11:15,580
Or you can come with your own idea and work on that.

133
00:11:15,580 --> 00:11:22,580
We adopted this structure of working groups, which are kind of like little committees.

134
00:11:23,260 --> 00:11:30,260
So, my team's challenge is we had to get reined in all these different versions of

135
00:11:30,540 --> 00:11:36,820
Python that were cropping up and get proper management of these things for rolling out.

136
00:11:36,820 --> 00:11:41,260
We also had to smooth out the whole deployment process.

137
00:11:41,260 --> 00:11:47,500
To do this all for multiple architectures where compilers and backends and various things

138
00:11:47,500 --> 00:11:53,140
didn't really want to play nice with each other or with what we were trying to do.

139
00:11:53,140 --> 00:12:00,140
So one of the first things we did was just draw some clear lines about what our goals

140
00:12:01,220 --> 00:12:03,060
were.

141
00:12:03,060 --> 00:12:06,760
We also adopted an intersource model.

142
00:12:06,760 --> 00:12:09,140
So all of our projects are open.

143
00:12:09,140 --> 00:12:12,460
Communication about what we're doing is very open.

144
00:12:12,460 --> 00:12:19,460
We are very welcoming of issues and pull requests to the projects that we have.

145
00:12:20,140 --> 00:12:27,140
We're constantly engaged in conversations with the community, often in online forums

146
00:12:27,140 --> 00:12:30,740
like chat rooms where people come to us with various questions.

147
00:12:30,740 --> 00:12:35,740
In fact, I was just dealing with one like three hours ago.

148
00:12:35,740 --> 00:12:42,740
So it's a big part of our job is this communication aspect.

149
00:12:42,740 --> 00:12:49,740
My team focused on using the guild as a representative of the community.

150
00:12:53,980 --> 00:12:58,700
So we went to them to get feedback on the plans that we had for going forward and the

151
00:12:58,700 --> 00:13:03,540
designs that were coming up for the APIs that were going to replace the C++ wrappers that

152
00:13:03,540 --> 00:13:06,060
had been created before.

153
00:13:06,060 --> 00:13:13,060
They helped us send out newsletters to update the Bloomberg engineers about what was going

154
00:13:13,660 --> 00:13:15,340
on.

155
00:13:15,340 --> 00:13:20,380
They also helped organize internal meetups where we could present the technology we'd

156
00:13:20,380 --> 00:13:24,260
been developing.

157
00:13:24,260 --> 00:13:30,780
We also got their involvement in the online conversations so that we weren't always asking

158
00:13:30,780 --> 00:13:33,140
the questions.

159
00:13:33,140 --> 00:13:39,380
The guild would step in and help us with those issues.

160
00:13:39,380 --> 00:13:45,180
We also put together, got the documentation organized.

161
00:13:45,180 --> 00:13:50,340
Before it was all kind of scattered and hard to find and we kind of centralized it a bit.

162
00:13:50,340 --> 00:13:55,580
It began with a very simple mission statement and an FAQ and kind of grew from there as

163
00:13:55,580 --> 00:13:57,620
we produced packages.

164
00:13:57,620 --> 00:14:01,860
We built a lot of documentation for those as well.

165
00:14:02,580 --> 00:14:06,700
There's now like reference manuals for each of the packages we support.

166
00:14:06,700 --> 00:14:09,260
There's a bunch of how-to guides.

167
00:14:09,260 --> 00:14:13,380
I have no idea what the total size would be if you print it out, but I think it would

168
00:14:13,380 --> 00:14:18,940
be pretty substantial.

169
00:14:18,940 --> 00:14:24,940
The other thing is that we needed a plan for how to replace that extended interpreter.

170
00:14:24,940 --> 00:14:29,940
It was just too ugly to support.

171
00:14:29,940 --> 00:14:38,340
We decided to provide packages for each of the important C++ libraries that were involved

172
00:14:38,340 --> 00:14:46,880
and just dramatically changed the architecture of these things and really reduced the source

173
00:14:46,880 --> 00:14:55,940
of maintenance on these.

174
00:14:55,940 --> 00:15:01,020
To start off, we picked one of the most popular packages that was being used in the company

175
00:15:01,020 --> 00:15:06,900
or popular C++ libraries really.

176
00:15:06,900 --> 00:15:12,340
What is the minimum amount of functionality we can ship for this library that will gain

177
00:15:12,340 --> 00:15:17,620
attention and be useful for delivering value?

178
00:15:17,620 --> 00:15:34,260
We ran through our designs with the guild and worked hard to come up with something

179
00:15:34,260 --> 00:15:39,700
that supported Python idioms, had really good performance because that was important to

180
00:15:39,700 --> 00:15:45,940
people and wanted something that was really reliable.

181
00:15:45,940 --> 00:15:51,060
We rolled out our first release and crickets.

182
00:15:51,060 --> 00:15:55,380
Nobody wanted to pick it up first, so that took a bit of effort.

183
00:15:55,380 --> 00:15:57,900
Again, we got help from the guild on this.

184
00:15:57,900 --> 00:16:02,400
We had a lot more conversations with the community about what we had when they came to us with

185
00:16:02,400 --> 00:16:05,080
problems about the old API.

186
00:16:05,080 --> 00:16:10,060
We would suggest they try the new one as an alternative.

187
00:16:10,060 --> 00:16:13,620
Over time, we showed that we had a really good track record both on the performance

188
00:16:13,660 --> 00:16:24,580
aspects and on reliability, which also helped pick up adoption of these things.

189
00:16:24,580 --> 00:16:29,660
Today Python is a first-class language within the company.

190
00:16:29,660 --> 00:16:37,100
If you go to our careers site, we have a careers site, and do a search for Python, it's the

191
00:16:37,100 --> 00:16:42,340
most popular entry in a job description for languages there.

192
00:16:42,740 --> 00:16:48,140
It easily outnumbers what's there for C++ and JavaScript.

193
00:16:48,140 --> 00:16:55,400
When we bring on new hires, we start them off with Python as the language for introducing

194
00:16:55,400 --> 00:17:00,500
the concepts for how applications are built in the company.

195
00:17:00,500 --> 00:17:06,660
There's really no reason to not use it when you're developing a new application, except

196
00:17:06,740 --> 00:17:13,220
for very special use cases.

197
00:17:13,220 --> 00:17:18,500
We've seen the internal community grow to several thousand.

198
00:17:18,500 --> 00:17:23,460
We've seen a lot of growth in community-driven projects as well.

199
00:17:23,460 --> 00:17:29,020
What I like is they've modeled how they do their projects after the way my team does

200
00:17:29,020 --> 00:17:30,020
them.

201
00:17:30,260 --> 00:17:35,260
And a lot of the other projects also come out with good documentation, high reliability,

202
00:17:35,260 --> 00:17:37,240
good design.

203
00:17:38,660 --> 00:17:43,860
What I thought was really interesting is the authors of the C++ library have also embraced

204
00:17:43,860 --> 00:17:44,860
what we've done.

205
00:17:44,860 --> 00:17:48,620
They're taking our libraries and using them in their own testing.

206
00:17:48,620 --> 00:17:56,620
They're also using Python to write their own utilities.

207
00:17:56,620 --> 00:17:59,940
The way the guild is currently structured is we have two co-leads.

208
00:17:59,940 --> 00:18:05,340
them the, or two co-chairs, I like to call them the Python Devon, that sounds kind of

209
00:18:05,340 --> 00:18:12,340
open and welcoming. We have about a dozen working groups, staffed by about 20 members.

210
00:18:12,540 --> 00:18:19,080
Each working group focuses on a specific issue. There's one working group that was responsible

211
00:18:19,080 --> 00:18:24,020
for helping organize all of Bloomberg's participation at this conference, and I don't know how we

212
00:18:24,060 --> 00:18:31,060
could have done all this without them. We hold twice monthly meetings, and we have a

213
00:18:31,740 --> 00:18:38,740
publicly shared agenda, so anyone is welcome to attend our meetings, and often they just

214
00:18:38,820 --> 00:18:45,820
lurk, but sometimes they jump in with good questions or comments. My team has grown,

215
00:18:45,980 --> 00:18:51,500
I'm happy to say it's no longer just two people. Four of my team members are attending

216
00:18:51,820 --> 00:18:58,820
PyCon. Mario and Pablo are also presenting. They're pretty famous within the Python community.

217
00:19:05,580 --> 00:19:12,580
Putting in and out. Matt Wasnicki is also attending. He is one of the contributors to

218
00:19:12,660 --> 00:19:19,660
the memory project that we just open sourced, which has gotten a lot of buzz.

219
00:19:22,500 --> 00:19:29,500
We continue to work with the guild. In fact, two of my team members are guild working group

220
00:19:30,740 --> 00:19:37,740
leads, and we talk to each other constantly on a cross-consulting basis. It's a relationship

221
00:19:40,540 --> 00:19:47,540
that works really well for us. Most of the C++ wrappers, the packages that we developed

222
00:19:48,540 --> 00:19:55,540
are now in maintenance mode, and I'm really happy to say that they very rarely cause any

223
00:19:56,540 --> 00:20:03,540
problems within Bloomberg in terms of production problems or just issues in general. We achieved

224
00:20:09,540 --> 00:20:16,540
quite a bit there. A lot of our work now focuses on improving the upgrade cycle for interpreters,

225
00:20:17,740 --> 00:20:24,740
and getting better development experience in our programmers' hands. It's just hard

226
00:20:27,700 --> 00:20:33,500
to cut over to new versions of interpreters, especially bridging from two to three. We've

227
00:20:33,500 --> 00:20:38,980
done a lot of work to try to help people with that. With packaging, package changes. Our

228
00:20:38,980 --> 00:20:45,980
packages are very stable, but outside three-party packages, not so much. The developer experience

229
00:20:47,540 --> 00:20:52,460
side, deployment is still a big issue. We've done a lot of work to improve that. We've

230
00:20:52,460 --> 00:20:59,460
got a bunch of best of class diagnostic tools. Memory is one of them. I'm hoping we can open

231
00:21:01,420 --> 00:21:08,420
source some of the others. We're constantly working on our documentation, and also communication.

232
00:21:08,620 --> 00:21:15,620
It's all about communication. For cultivating guilds, if this is something you want to do

233
00:21:19,300 --> 00:21:26,300
in your own company, your own enterprise, there are a few things that work. You can't

234
00:21:26,700 --> 00:21:33,700
expect this to happen strictly on a volunteer-after-hours basis. It has to be something that is considered

235
00:21:33,700 --> 00:21:40,700
part of the developer's responsibilities. It doesn't necessarily have to be a high priority.

236
00:21:42,620 --> 00:21:47,820
Other things always take priority, but time has to be accounted for on the management

237
00:21:47,820 --> 00:21:54,820
side. My team is globally distributed. I'm in San Francisco. Some of our team is in New

238
00:21:55,820 --> 00:22:02,820
York. The rest is in London, in Europe. This is unusual. This predates the pandemic, in

239
00:22:05,180 --> 00:22:12,180
fact. It's something that we proposed to them. The company has a history of co-locating teams,

240
00:22:13,100 --> 00:22:17,700
but they made an exception for us, and we've been able to make it work really well. Other

241
00:22:17,700 --> 00:22:24,700
teams are now picking up our model as well. The other thing we're working with on the

242
00:22:25,180 --> 00:22:31,940
management is improving how the whole upgrade lifecycle works. A lot of people tend to look

243
00:22:31,940 --> 00:22:38,940
at it as a secondary activity. It doesn't really improve revenue. If it isn't broken,

244
00:22:38,980 --> 00:22:45,980
why do I have to pay attention to it? We have to inform people of the risks here and how

245
00:22:47,260 --> 00:22:54,260
to plan it out as future activities for projects.

246
00:22:55,820 --> 00:23:00,720
So one of the other challenges that we found is because we are globally distributed, not

247
00:23:00,720 --> 00:23:05,760
just as a team, but as a company, a lot of our communication takes place in these online

248
00:23:05,760 --> 00:23:12,760
forums. It's very easy to get tired or make a comment that comes off as too curt or sarcastic

249
00:23:16,460 --> 00:23:23,460
or rude and cause a bad reaction. Now, Bloomberg prides itself on being a very, very, very

250
00:23:24,820 --> 00:23:31,820
civil and inclusive community. Occasionally, this does happen though, where something inappropriate

251
00:23:33,460 --> 00:23:40,460
or rude was said, and we have to have a conversation. Often that goes through the guild, and that's

252
00:23:45,180 --> 00:23:52,180
all that has to happen. I'm happy to say that's become much less a problem over time. I think

253
00:23:53,180 --> 00:23:59,420
that people participating in these conversations are setting a good example in keeping the

254
00:23:59,420 --> 00:24:06,420
water level up on the conversation. I mentioned memory earlier. This is a fantastic tool for

255
00:24:11,500 --> 00:24:17,060
diagnosing what's going on in the memory of your application. It not only looks at what's

256
00:24:17,100 --> 00:24:22,660
going on in your Python code, but it will dig into the binary extensions that you're

257
00:24:22,660 --> 00:24:29,100
using, regardless of what language it was written in, and give you a good view of what's

258
00:24:29,100 --> 00:24:36,100
happening there. And I should mention that some other Bloomberg colleagues are talking

259
00:24:39,700 --> 00:24:46,700
at PyCon as well. There's a great talk later today by Nandita and Sagar, and they're going

260
00:24:47,620 --> 00:24:54,620
to talk about the transition to open source. Fred Phillips is talking tomorrow about the

261
00:24:59,260 --> 00:25:06,260
import system, and Bernat, he's a great guy. He's going to be talking about editable installs.

262
00:25:07,860 --> 00:25:14,860
He's also a big contributor to the TOCS project. So when I wrote this, I thought I would have

263
00:25:15,860 --> 00:25:21,660
time for questions. As I understand it right now, questions will be taking place in the

264
00:25:21,660 --> 00:25:28,660
open area. But thank you all for attending and for waiting a little extra for lunch.

265
00:25:31,620 --> 00:25:32,220
So thank you.

