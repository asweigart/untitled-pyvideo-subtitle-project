1
00:00:00,000 --> 00:00:11,600
And thank you very much for coming to the last set of sessions, our last session for

2
00:00:11,600 --> 00:00:13,280
the day.

3
00:00:13,280 --> 00:00:18,840
Our presenter today will be Juan Gonzalez, I think, right?

4
00:00:18,840 --> 00:00:24,080
And the title of his talk is Improving App Performance with Snapshots.

5
00:00:24,080 --> 00:00:28,960
Hey everyone, thank you so much for being here.

6
00:00:28,960 --> 00:00:32,880
My name is Juan and I'm here to talk to you about improving your app performance with

7
00:00:32,880 --> 00:00:35,320
snapshots.

8
00:00:35,320 --> 00:00:39,720
I am a staff engineer at Cedar and Cedar is a digital health startup.

9
00:00:39,720 --> 00:00:42,840
Our mission is to make the patient billing experience a lot better, a lot smoother and

10
00:00:42,840 --> 00:00:43,840
a lot more transparent.

11
00:00:43,840 --> 00:00:48,720
And a big part of that is making sure that we have a very reliable app.

12
00:00:48,720 --> 00:00:52,040
If you want to have a reliable app, a big part of that is having an app that performs

13
00:00:52,040 --> 00:00:53,040
pretty well.

14
00:00:53,040 --> 00:00:56,640
So this is a very important topic for us.

15
00:00:56,640 --> 00:01:02,080
Now I'll be honest with you, every application is unique and because every application is

16
00:01:02,080 --> 00:01:08,240
unique I cannot give to you today one perfect bullet, golden bullet to solve all of your

17
00:01:08,240 --> 00:01:09,980
performance issues.

18
00:01:09,980 --> 00:01:13,240
Every application's performance issues are going to have a different unique solution

19
00:01:13,240 --> 00:01:14,240
to it.

20
00:01:14,240 --> 00:01:19,120
So at best what I can try to do to you is give you some advice from my own anecdotal

21
00:01:20,120 --> 00:01:25,320
And from what I've experienced for a lot of applications that have been started up in

22
00:01:25,320 --> 00:01:30,280
a very fast way and are starting to experience scale for the first time, they'll often realize

23
00:01:30,280 --> 00:01:33,640
that their database is actually their bottleneck.

24
00:01:33,640 --> 00:01:37,120
And if they're not seeing that, then it's a good chance that in a few days or a few

25
00:01:37,120 --> 00:01:40,520
weeks or a few months that they will actually realize that their database is actually now

26
00:01:40,520 --> 00:01:41,520
their bottleneck.

27
00:01:41,520 --> 00:01:44,000
And the reason for that is pretty simple.

28
00:01:44,000 --> 00:01:48,480
A lot of applications start off with a single server database model, meaning your database

29
00:01:48,480 --> 00:01:51,040
becomes a single point of failure.

30
00:01:51,040 --> 00:01:55,040
And it's just so easy to set up a database that way and it's just also a really good

31
00:01:55,040 --> 00:01:58,080
idea to start your database that way and not overcomplicate it.

32
00:01:58,080 --> 00:02:01,440
But another reason why is because databases themselves, they have tons of IO that they

33
00:02:01,440 --> 00:02:07,400
have to go through and IO is just a notoriously slow set of operations to deal with.

34
00:02:07,400 --> 00:02:12,680
So it's not uncommon to realize for the first time, hey, my application is slow and you

35
00:02:12,680 --> 00:02:15,360
realize, oh wait, it's actually my database.

36
00:02:15,360 --> 00:02:20,920
So today, I want to kind of get us to focus on improving your database's performance.

37
00:02:20,920 --> 00:02:24,120
And that's what I kind of want to focus this talk about.

38
00:02:24,120 --> 00:02:28,720
And there's really kind of two different categories for improving your database's performance.

39
00:02:28,720 --> 00:02:31,240
One of them is database scaling.

40
00:02:31,240 --> 00:02:34,240
And there's kind of two different ways you can do that.

41
00:02:34,240 --> 00:02:37,660
One way is vertically scaling your database.

42
00:02:37,660 --> 00:02:44,440
And that's the approach of taking your single database and basically beefing it up.

43
00:02:44,440 --> 00:02:51,440
That could be improving its CPU, increasing its RAM, increasing your database's disk speed.

44
00:02:51,440 --> 00:02:54,800
That all falls into the category of vertical scaling.

45
00:02:54,800 --> 00:02:59,880
Another way you can do it is horizontal scaling.

46
00:02:59,880 --> 00:03:04,920
Horizontal scaling is the approach of taking your database and basically splitting it up.

47
00:03:04,920 --> 00:03:05,920
You can do that in a few ways.

48
00:03:05,920 --> 00:03:10,000
You can add other databases to handle all the reads in your database or you can split

49
00:03:10,000 --> 00:03:15,200
your database up in ways such that different reads go to different databases, aka database

50
00:03:15,200 --> 00:03:16,200
sharding.

51
00:03:16,200 --> 00:03:22,520
But they all fall under the same category of horizontal scaling.

52
00:03:22,520 --> 00:03:25,160
And that's basically infrastructure scaling.

53
00:03:25,160 --> 00:03:28,040
But there's another way to do this and it's actually query tuning.

54
00:03:28,040 --> 00:03:31,680
So for some of you, you may not know what I mean when I say query tuning.

55
00:03:31,680 --> 00:03:36,960
And what I'm basically talking about here is the process of taking your SQL and basically

56
00:03:36,960 --> 00:03:38,220
cleaning it up.

57
00:03:38,220 --> 00:03:43,240
So what that means is you're taking your queries and you're finding ways to rewrite them so

58
00:03:43,240 --> 00:03:48,900
that they are doing the same jobs but doing them in a much more efficient way so that

59
00:03:48,900 --> 00:03:52,820
you don't have to actually improve your infrastructure of your database and you can actually just

60
00:03:52,820 --> 00:03:55,580
improve your application code itself.

61
00:03:55,580 --> 00:04:00,020
And query tuning is great, but unfortunately it's actually really hard to do.

62
00:04:00,020 --> 00:04:04,700
Surprisingly horizontal scaling and vertical scaling, two complicated tasks themselves

63
00:04:04,860 --> 00:04:08,500
have many step-by-step instruction guides for how to accomplish them.

64
00:04:08,500 --> 00:04:13,960
And actually nowadays there's tons of tools built into cloud infrastructure or your databases

65
00:04:13,960 --> 00:04:18,780
themselves to help you out with this process of vertically scaling or horizontally scaling.

66
00:04:18,780 --> 00:04:22,060
But query tuning on the other hand is not easy.

67
00:04:22,060 --> 00:04:26,340
There's no step-by-step guide for query tuning because every application, like I said, is

68
00:04:26,340 --> 00:04:27,340
unique.

69
00:04:27,340 --> 00:04:33,460
So the issues with an application's queries are going to be different for every application.

70
00:04:33,460 --> 00:04:38,360
And it's going to require tons of research to figure out what is the issue.

71
00:04:38,360 --> 00:04:39,780
So it's not an easy task.

72
00:04:39,780 --> 00:04:44,900
But with that said, it's actually quite worth it.

73
00:04:44,900 --> 00:04:48,420
Horizontal scaling and vertical scaling, that requires you to actually spend more money

74
00:04:48,420 --> 00:04:53,100
to accomplish the same task of improving your database performance.

75
00:04:53,100 --> 00:04:58,580
Whereas query tuning is actually a process that actually reduces infrastructure costs

76
00:04:58,580 --> 00:05:01,260
because you're actually putting less load on your database.

77
00:05:01,260 --> 00:05:05,020
And hopefully also reducing complexity because it could end up with queries themselves that

78
00:05:05,020 --> 00:05:11,020
are easier to understand but also less of them in general.

79
00:05:11,020 --> 00:05:14,820
So query tuning is hard.

80
00:05:14,820 --> 00:05:16,140
We understand that.

81
00:05:16,140 --> 00:05:20,380
But there's another complication to this all.

82
00:05:20,380 --> 00:05:22,540
We are at a PyCon conference.

83
00:05:22,540 --> 00:05:28,140
So it's easy to guess that applications we're talking about here are Python applications.

84
00:05:28,180 --> 00:05:32,300
And because they're Python applications, if they are dealing with a database, they're

85
00:05:32,300 --> 00:05:34,540
probably using an ORM.

86
00:05:34,540 --> 00:05:40,420
And in case you don't know what an ORM is or what it does, an ORM is basically a tool

87
00:05:40,420 --> 00:05:45,300
to help you deal with your database's operations in a way that is object-oriented.

88
00:05:45,300 --> 00:05:51,580
And that allows you to do things such as define all your tables as classes, batch all the

89
00:05:51,580 --> 00:05:57,340
rows of table data as objects in memory, and also just offer some tactic sugar for joining

90
00:05:57,340 --> 00:06:00,780
together data that are related to each other.

91
00:06:00,780 --> 00:06:01,780
And ORMs are great.

92
00:06:01,780 --> 00:06:04,900
They're very popular for a reason.

93
00:06:04,900 --> 00:06:07,220
We use them at Cedar.

94
00:06:07,220 --> 00:06:10,900
But they also make query tuning harder.

95
00:06:10,900 --> 00:06:14,980
And it's kind of hard to explain them without giving you an example of why.

96
00:06:14,980 --> 00:06:15,980
Sorry.

97
00:06:15,980 --> 00:06:21,100
Catching my breath here.

98
00:06:21,100 --> 00:06:23,660
So yeah, ORMs make query tuning harder.

99
00:06:23,660 --> 00:06:26,280
And I'm going to try to explain this to you by example.

100
00:06:26,280 --> 00:06:29,640
So imagine that you are working for a company.

101
00:06:29,640 --> 00:06:33,600
And this company has made the perfect restaurant app.

102
00:06:33,600 --> 00:06:37,960
It's an app that's made for restaurants to download and for eaters that enjoy their times

103
00:06:37,960 --> 00:06:39,440
at these restaurants to download as well.

104
00:06:39,440 --> 00:06:43,880
And it's supposed to make a perfect little synergized experience for restaurants and

105
00:06:43,880 --> 00:06:46,960
consumers alike.

106
00:06:46,960 --> 00:06:51,480
And you are a newly hired site reliability engineer for this company.

107
00:06:51,480 --> 00:06:53,840
And the company has experienced tons of growth.

108
00:06:53,840 --> 00:06:57,480
And unfortunately with that growth, they're experiencing tons of database performance

109
00:06:57,480 --> 00:06:58,920
problems.

110
00:06:58,920 --> 00:07:04,520
So you come in and you are now becoming the savior to try to fix all these problems.

111
00:07:04,520 --> 00:07:11,560
And you learn that this application is written in Django, which is a very popular ORM.

112
00:07:11,560 --> 00:07:15,920
But unfortunately, you are not very familiar with Django.

113
00:07:15,920 --> 00:07:20,000
You do not know yet that Django has some issues that are going to make query tuning harder

114
00:07:20,000 --> 00:07:22,000
for you.

115
00:07:22,000 --> 00:07:28,640
So you naively agree to tune these queries in this ORM's code.

116
00:07:28,640 --> 00:07:31,440
And you run into three problems along the way.

117
00:07:31,440 --> 00:07:35,760
One of the problems that you run into are ORM code can look very different from SQL

118
00:07:35,760 --> 00:07:37,760
that is executed by that ORM.

119
00:07:37,760 --> 00:07:43,520
ORMs are basically just translators of Python code to SQL.

120
00:07:43,520 --> 00:07:48,040
And what you see is not always what you get or to someone who's not experienced, at least

121
00:07:48,040 --> 00:07:50,440
that's what can be the experience.

122
00:07:50,440 --> 00:07:52,240
And I'll kind of show you an example of this.

123
00:07:52,240 --> 00:07:58,720
So here on the right, this is some Django code that allows me to see every dish that

124
00:07:58,720 --> 00:08:01,840
is ordered by this customer named Juan.

125
00:08:01,840 --> 00:08:04,360
It looks like very clean Python code maybe.

126
00:08:04,360 --> 00:08:07,560
If you're familiar with Django, you might know exactly what's going to happen.

127
00:08:07,560 --> 00:08:12,200
But if you're not familiar with Django, you might be very surprised to see that that Python

128
00:08:12,200 --> 00:08:16,560
code that you just saw produced this query here, which was operating on three different

129
00:08:16,560 --> 00:08:17,560
tables.

130
00:08:17,560 --> 00:08:21,960
And you actually saw four different tables because the Python code itself almost suggested

131
00:08:21,960 --> 00:08:25,240
it was acting on just this dish table.

132
00:08:25,240 --> 00:08:28,120
So that's the first problem you run into and you find that to be very annoying.

133
00:08:28,120 --> 00:08:33,640
But you start to learn the ins and outs of Django and how it produces SQL.

134
00:08:33,640 --> 00:08:36,000
But you run into the second problem as well.

135
00:08:36,000 --> 00:08:40,720
Even after you understand Django, you're working in a Python application.

136
00:08:40,720 --> 00:08:42,920
So you start to realize there's another problem here.

137
00:08:43,560 --> 00:08:48,000
You know, Python code is written in such a way that functions call other functions and

138
00:08:48,000 --> 00:08:50,280
those functions call other functions.

139
00:08:50,280 --> 00:08:52,280
And they call them for different reasons.

140
00:08:52,280 --> 00:08:57,040
And you're having a hard time understanding exactly when and where these ORMs are actually

141
00:08:57,040 --> 00:09:00,640
triggering query execution and why.

142
00:09:00,640 --> 00:09:04,480
And what you would really love to see is like a stack trace explaining what exact line of

143
00:09:04,480 --> 00:09:09,340
code is actually triggering these query executions.

144
00:09:09,380 --> 00:09:14,820
So as an example, if you're not familiar with Django, you might look at this code and wonder

145
00:09:14,820 --> 00:09:17,460
how many queries are being executed here.

146
00:09:17,460 --> 00:09:21,140
So on the first line, you might notice, hey, there's orders.

147
00:09:21,140 --> 00:09:22,860
Maybe we're dealing with all the orders in this table.

148
00:09:22,860 --> 00:09:27,100
Are we executing a query there to grab every object from the orders table?

149
00:09:27,100 --> 00:09:28,860
On the second line, you're doing an annotation.

150
00:09:28,860 --> 00:09:30,660
Is that where we're running a query?

151
00:09:30,660 --> 00:09:32,260
Is that where we finally run our first query?

152
00:09:32,260 --> 00:09:33,980
Or is it on the next few lines?

153
00:09:33,980 --> 00:09:35,700
Or is it at the end?

154
00:09:35,700 --> 00:09:38,980
And if you're familiar with Django, you'll probably know right away it's actually at

155
00:09:39,020 --> 00:09:40,220
the very end here.

156
00:09:40,220 --> 00:09:43,420
This is the first and only place where a query is actually executed.

157
00:09:43,420 --> 00:09:47,500
But then again, you may not be – you may be surprised to see that this is the actual

158
00:09:47,500 --> 00:09:48,500
query that gets executed.

159
00:09:48,500 --> 00:09:51,220
It's something very complicated.

160
00:09:51,220 --> 00:09:53,260
But that's really the second problem you start to notice.

161
00:09:53,260 --> 00:09:57,460
You're not sure where and why things are happening because you're not an expert on this yet.

162
00:09:57,460 --> 00:10:02,380
And then the final problem really kind of – you know, really kind of grinds your gears here.

163
00:10:02,380 --> 00:10:06,800
And that's that there is this n plus 1 queries problem, which technically is not unique to

164
00:10:07,560 --> 00:10:14,040
ORMs, but can happen in ORMs much easier than an application that was written in pure SQL.

165
00:10:14,040 --> 00:10:18,460
And that's because an ORM makes it easy to fetch related objects from another one.

166
00:10:18,460 --> 00:10:23,920
And unfortunately, this can make it extremely easy to accidentally query one table many

167
00:10:23,920 --> 00:10:27,560
times when you could have actually queried it exactly once to fetch all these different

168
00:10:27,560 --> 00:10:28,560
objects.

169
00:10:28,560 --> 00:10:35,040
And as an example here, we have some bad code that is trying to get all the orders that

170
00:10:35,080 --> 00:10:38,120
include a dish named Kobe beef.

171
00:10:38,120 --> 00:10:42,320
And at the end of that, once we have all these orders, we want to get the customer name for

172
00:10:42,320 --> 00:10:44,160
each of those orders.

173
00:10:44,160 --> 00:10:48,480
Now if you're familiar with Django, you might realize this is bad code because what's

174
00:10:48,480 --> 00:10:53,760
going to happen is you're going to do an additional query for every single order to

175
00:10:53,760 --> 00:10:57,160
grab the customer name on that order.

176
00:10:57,160 --> 00:11:00,520
And to see that in pure SQL, here's what happens.

177
00:11:00,520 --> 00:11:03,640
You do one query to get all the Kobe beef orders.

178
00:11:03,640 --> 00:11:09,960
And then for each of those orders, you're going to query the customer table to get the

179
00:11:09,960 --> 00:11:12,360
name for the first customer on that order.

180
00:11:12,360 --> 00:11:14,840
And then you're going to get the customer for the second order.

181
00:11:14,840 --> 00:11:16,960
And then you're going to get the customer for the third order.

182
00:11:16,960 --> 00:11:21,880
So you just did a bunch of unnecessary queries on the same customer table that you could

183
00:11:21,880 --> 00:11:25,080
have gotten in actually one execution.

184
00:11:25,080 --> 00:11:26,840
And that's a pretty bad problem.

185
00:11:27,080 --> 00:11:34,200
So the better code is to select all the customers at once when you're grabbing all the orders

186
00:11:34,200 --> 00:11:35,560
as well.

187
00:11:35,560 --> 00:11:41,040
And that's what using this nice and tactical function on your original query set to select

188
00:11:41,040 --> 00:11:43,760
all the related customers when you grab all the orders.

189
00:11:43,760 --> 00:11:49,160
And that's going to produce a much more performant query execution where you do actually just

190
00:11:49,160 --> 00:11:50,160
one query.

191
00:11:50,160 --> 00:11:53,520
The problem with that is that you have to basically be an expert in Django to know that's

192
00:11:53,520 --> 00:11:54,520
the case.

193
00:11:54,600 --> 00:11:59,560
And even still, it may not be obvious after the fact that you wrote code that actually

194
00:11:59,560 --> 00:12:02,280
did this the right way.

195
00:12:02,280 --> 00:12:08,200
So you see this, and you think that you might have taken on this task prematurely, and you

196
00:12:08,200 --> 00:12:12,720
kind of just come to the conclusion that query tuning is probably too hard with an ORM.

197
00:12:12,720 --> 00:12:16,680
You may even think, hey, maybe the team should just stop using ORMs altogether.

198
00:12:16,680 --> 00:12:21,160
And you may think that the act of query tuning is not a worthwhile endeavor.

199
00:12:21,160 --> 00:12:22,160
It's basically impossible.

200
00:12:22,640 --> 00:12:26,120
You should always just scale your infrastructure and call it a day.

201
00:12:26,120 --> 00:12:30,720
But that's unfortunate because in reality, query tuning can actually be pretty easy.

202
00:12:30,720 --> 00:12:36,080
The problem is that there aren't enough tools to really help this problem.

203
00:12:36,080 --> 00:12:40,640
And that story I just gave to you, it kind of hits very close to a home procedure because

204
00:12:40,640 --> 00:12:47,840
in 2019, we were experiencing tons of growth, and our database was the bottleneck for us.

205
00:12:47,840 --> 00:12:50,840
And we did do infrastructure scaling.

206
00:12:50,840 --> 00:12:53,000
We introduced read replicas.

207
00:12:53,000 --> 00:12:56,720
We scaled our database horizontally.

208
00:12:56,720 --> 00:13:00,400
We beefed up our database, made it stronger vertically.

209
00:13:00,400 --> 00:13:04,000
But we still wanted to find a problem to this query tuning problem.

210
00:13:04,000 --> 00:13:09,040
So one of our models is no mediocrity.

211
00:13:09,040 --> 00:13:12,880
So we didn't want to just settle with the idea of having a non-performant ORM code.

212
00:13:12,880 --> 00:13:16,480
We wanted to kind of find an answer for this problem.

213
00:13:16,480 --> 00:13:20,920
And so we kind of introduced this concept of query snapshots.

214
00:13:20,920 --> 00:13:25,960
And what we wanted from it was kind of simple.

215
00:13:25,960 --> 00:13:34,200
What we wanted was a way to see every query that we were executing in our ORM code.

216
00:13:34,200 --> 00:13:38,760
And we also wanted to understand exactly where those queries were executing.

217
00:13:38,760 --> 00:13:41,760
And we also wanted to actually isolate the Python code that was triggering those queries

218
00:13:41,760 --> 00:13:43,240
very quickly.

219
00:13:43,240 --> 00:13:47,360
And we wanted to get this info at basically every stage of local development.

220
00:13:47,360 --> 00:13:51,600
And it's important to make that to kind of pause in this one statement here.

221
00:13:51,600 --> 00:13:57,160
There are tons of tools available today where you can actually do query inspection.

222
00:13:57,160 --> 00:14:01,560
A popular one is Django debug toolbar, which lets you do this deep dive of queries that

223
00:14:01,560 --> 00:14:03,920
are being executed on a browser page.

224
00:14:03,920 --> 00:14:06,560
But you have to do everything from a browser.

225
00:14:06,560 --> 00:14:10,440
So that's kind of what I mean by we wanted to be able to use this at any stage in local

226
00:14:11,400 --> 00:14:18,120
development from a terminal and the browser and middleware and tests basically everywhere.

227
00:14:18,120 --> 00:14:25,400
And because we have a model of no mediocrity, we also wanted this to have a very simple

228
00:14:25,400 --> 00:14:28,440
and intuitive interface as well.

229
00:14:28,440 --> 00:14:32,800
And what we ended up doing was we created this tool called snapshot queries, which is

230
00:14:32,800 --> 00:14:36,720
now today an open source ORM query capture.

231
00:14:36,720 --> 00:14:39,440
And I'm going to kind of show you what it looks like.

232
00:14:39,440 --> 00:14:44,320
So it is out of the box a context manager.

233
00:14:44,320 --> 00:14:50,440
What it does is it lets you look at, it lets you capture every query that any block of

234
00:14:50,440 --> 00:14:56,280
Python code that is using Django or SQL Alchemy is executing.

235
00:14:56,280 --> 00:15:00,560
So on the right here, all you have to do to use it is run this little snapshot queries

236
00:15:00,560 --> 00:15:02,280
context manager.

237
00:15:02,280 --> 00:15:07,860
And what gets returned back to you is a list of all the queries that were executed.

238
00:15:07,900 --> 00:15:12,620
So on the right here, what I would expect is after this block of code exits, I would

239
00:15:12,620 --> 00:15:18,500
see all the queries that were executed to grab this customer named Juan, to see the

240
00:15:18,500 --> 00:15:22,660
query that was executed to create this order for Juan, and to see all the queries that

241
00:15:22,660 --> 00:15:26,340
were executed to add all these different dishes to his order.

242
00:15:26,340 --> 00:15:27,580
And that's right out of the box.

243
00:15:27,580 --> 00:15:29,540
That's what you get from this tool.

244
00:15:29,540 --> 00:15:31,460
And that's great as is.

245
00:15:31,460 --> 00:15:37,340
But after we introduced this tool, we also started to enhance it, added more features

246
00:15:37,420 --> 00:15:42,940
to it, and I kind of want to talk to you about the top five features that were added to this,

247
00:15:42,940 --> 00:15:45,700
because I can't go over all of them in probably in time.

248
00:15:45,700 --> 00:15:47,600
So I just want to highlight the top five.

249
00:15:47,600 --> 00:15:52,300
So feature number five is kind of what I described to you.

250
00:15:52,300 --> 00:15:54,500
You get to see every query that's executed.

251
00:15:54,500 --> 00:15:56,140
But not just the query itself.

252
00:15:56,140 --> 00:16:00,740
You get to see the query SQL, which is probably pretty obvious to you all.

253
00:16:00,740 --> 00:16:06,220
But you get to also see very quickly all the Python code that was executed to trigger that query.

254
00:16:06,260 --> 00:16:10,700
Sorry, when I say Python code, I mean the line of Python code that was executed to trigger that query.

255
00:16:10,700 --> 00:16:15,300
And then you also get to see exactly how long it took to execute that query, which from

256
00:16:15,300 --> 00:16:21,940
my own personal experience when I was in 2019 helping us figure out ways to reduce our site's

257
00:16:21,940 --> 00:16:26,500
impact on our database, just these three features alone were extremely useful for me, as I was

258
00:16:26,500 --> 00:16:29,820
doing local enhancements to our code to make it a lot faster.

259
00:16:29,820 --> 00:16:30,820
But it's still number five.

260
00:16:30,820 --> 00:16:34,300
So that means that there's four better features than just this alone.

261
00:16:34,300 --> 00:16:39,820
Number four is right out of the bat, when you use this tool, when you have this list

262
00:16:39,820 --> 00:16:44,940
of queries that are executed, there is a method on this object that lets you display a beautiful

263
00:16:44,940 --> 00:16:47,860
summary of every query that was executed for you.

264
00:16:47,860 --> 00:16:51,820
And it gets printed to the terminal with nice formatting and also nice coloring to kind

265
00:16:51,820 --> 00:16:55,380
of just give you a quick snapshot of all the information that is probably going to be relevant

266
00:16:55,380 --> 00:16:56,380
to you.

267
00:16:56,380 --> 00:17:01,020
An example of this is on the right here, we have an output from this query executed.display

268
00:17:01,020 --> 00:17:02,340
call.

269
00:17:02,340 --> 00:17:07,100
The first thing you're going to see is the amount of time it took to run this first query.

270
00:17:07,100 --> 00:17:10,380
You're going to see the actual line of Python code that triggered it.

271
00:17:10,380 --> 00:17:13,980
You're going to see the actual code itself that triggered it.

272
00:17:13,980 --> 00:17:17,780
And you're going to see the SQL statement printed in a nice formatted way for you.

273
00:17:17,780 --> 00:17:19,260
And that's just out of the box.

274
00:17:19,260 --> 00:17:21,140
It's a pretty great feature.

275
00:17:21,140 --> 00:17:24,460
I use it a ton at work when I'm just trying to debug something or trying to figure out

276
00:17:24,460 --> 00:17:26,140
what's going on with code.

277
00:17:26,140 --> 00:17:27,140
So number four.

278
00:17:27,140 --> 00:17:29,980
So there's three better features than just this.

279
00:17:29,980 --> 00:17:30,980
Number three.

280
00:17:30,980 --> 00:17:36,540
Like I said before, the stack trace is really important if you want to know exactly where

281
00:17:36,540 --> 00:17:44,980
code is called because knowing where a function that is used throughout your code base is

282
00:17:44,980 --> 00:17:51,220
is not enough if you need to also understand how you got to that path because code is complicated.

283
00:17:51,220 --> 00:17:55,580
Code calls other code and that code calls other code, et cetera, et cetera.

284
00:17:55,580 --> 00:18:01,260
So this to me is one of the top features because in the beginning when I just saw the lines

285
00:18:01,260 --> 00:18:07,340
of code that were being executed to run queries since our code is pretty dry, just seeing

286
00:18:07,340 --> 00:18:11,340
the code itself wasn't enough, I had to get a full detail of the entire stack trace for

287
00:18:11,340 --> 00:18:14,260
these queries that were being executed to get a fuller picture of what was going on.

288
00:18:14,260 --> 00:18:20,180
So I consider this to be the third best feature because it just does so much for us when we're

289
00:18:20,180 --> 00:18:23,320
trying to optimize our queries themselves.

290
00:18:23,320 --> 00:18:24,620
So not the top feature.

291
00:18:24,620 --> 00:18:30,260
So a better feature than that is this one here.

292
00:18:30,260 --> 00:18:35,480
This is an answer to the N plus one selects problem that I think is pretty neat.

293
00:18:35,480 --> 00:18:41,060
What it does for you is that query executed object that I showed before, it has a method

294
00:18:41,060 --> 00:18:47,000
called similar and what it will do for you is group together all the queries that look

295
00:18:47,000 --> 00:18:51,740
similar to each other and display them out to you if you want to or you can just loop

296
00:18:51,740 --> 00:18:52,980
over them.

297
00:18:52,980 --> 00:19:02,700
What we mean by similar are any queries that have the same SQL besides the parameters themselves.

298
00:19:02,700 --> 00:19:06,900
So in this example here from this output that you would see from the top, you can see that

299
00:19:06,900 --> 00:19:09,660
there are two similar queries that have been detected.

300
00:19:09,660 --> 00:19:14,420
The first query is similar to the second query because the queries themselves only differ

301
00:19:14,420 --> 00:19:16,020
on the customer ID.

302
00:19:16,020 --> 00:19:19,380
So for us in this simple example you just see two queries but for us when we ran this

303
00:19:20,380 --> 00:19:25,460
production, sorry when we ran this on our code locally we started to see tons of info

304
00:19:25,460 --> 00:19:29,740
about queries that were similar that gave us a lot of insight on potential areas of

305
00:19:29,740 --> 00:19:33,620
our code base because again you can see the lines of code themselves to try to figure

306
00:19:33,620 --> 00:19:37,860
out hey this might be a place where we're doing the N plus one selects problem.

307
00:19:37,860 --> 00:19:41,540
Let's figure out a way to fix it.

308
00:19:41,540 --> 00:19:42,860
And this is the top feature.

309
00:19:42,860 --> 00:19:45,420
It may seem there's not a lot of details here.

310
00:19:45,420 --> 00:19:49,220
I wish I could fit more details on this slide because there's actually quite a lot to unpack

311
00:19:50,060 --> 00:19:53,540
here but this feature is something that we use all the time at work.

312
00:19:53,540 --> 00:19:58,900
In 2019 when we were improving our app's performance, when we were improving the load times of our

313
00:19:58,900 --> 00:20:03,500
home pages or like the pages that customers go to to see all their bills, things of that

314
00:20:03,500 --> 00:20:08,740
nature we did tons of work using this library to help figure out what was going on but we

315
00:20:08,740 --> 00:20:14,780
were very afraid that this work would eventually undo itself because we can't always be there

316
00:20:14,980 --> 00:20:17,140
to improve your app.

317
00:20:17,140 --> 00:20:21,660
Eventually you have to stop and you have to get back to do other things.

318
00:20:21,660 --> 00:20:24,100
So we came up with this solution here.

319
00:20:24,100 --> 00:20:27,660
So how many of you are familiar with HTML snapshot testing?

320
00:20:27,660 --> 00:20:30,620
Okay so not a lot of you are.

321
00:20:30,620 --> 00:20:33,380
So let me kind of give a brief explanation of what that is because I'll give a lot of

322
00:20:33,380 --> 00:20:35,320
insight on what this will do.

323
00:20:35,320 --> 00:20:42,940
So for a lot of apps that render HTML it's hard to verify the HTML that's getting output.

324
00:20:42,940 --> 00:20:49,940
So a common strategy is to have your tests render the HTML with some specific inputs,

325
00:20:50,820 --> 00:20:56,740
save a snapshot of that HTML to some local file and then on each subsequent test run

326
00:20:56,740 --> 00:21:00,700
the HTML be re-rendered and then compared with that snapshot.

327
00:21:00,700 --> 00:21:04,700
If the snapshot changes you can see a very quick diff to understand what has changed

328
00:21:04,700 --> 00:21:10,220
or nothing has changed and if there is a difference it will fail explaining why and that's called

329
00:21:10,220 --> 00:21:11,620
HTML snapshot testing.

330
00:21:12,100 --> 00:21:17,100
It's a very common strategy for front end development and I thankfully have some experience

331
00:21:17,100 --> 00:21:21,140
with front end development and when we were doing this, we were dealing with this issue

332
00:21:21,140 --> 00:21:24,300
of performance enhancement.

333
00:21:24,300 --> 00:21:31,300
We got this idea to capture every query in our code that was particularly hot, that had

334
00:21:31,620 --> 00:21:37,620
a lot of performance problems, capture those queries to a file, save the output including

335
00:21:37,700 --> 00:21:43,020
where those queries were executed into that file so that when something changed on that

336
00:21:43,020 --> 00:21:48,300
particular hot piece of code we would get a test that failed explaining exactly why

337
00:21:48,300 --> 00:21:55,300
with a diff so that the code owners of that test would be able to inspect the difference

338
00:21:55,580 --> 00:22:01,300
and understand why it changed and give the okay or the thumbs down if there was actually

339
00:22:01,300 --> 00:22:05,500
a new performance problem being introduced.

340
00:22:05,580 --> 00:22:09,980
That's what we call query snapshot testing and I call it our top feature because it's

341
00:22:09,980 --> 00:22:11,260
the feature that we use the most.

342
00:22:11,260 --> 00:22:15,100
It's the thing that we kind of take for granted that runs every day on our code base.

343
00:22:15,100 --> 00:22:22,100
We run it in all of our tests and it has made the burden of maintaining quality a lot easier

344
00:22:23,140 --> 00:22:29,420
so we can sleep at night better because of it and that is the query snapshot testing

345
00:22:29,420 --> 00:22:32,300
tool that we have at Cedar.

346
00:22:32,300 --> 00:22:35,500
It helped us grip through 2019 really well.

347
00:22:35,500 --> 00:22:38,780
I'm happy to say today we are performing a lot better.

348
00:22:38,780 --> 00:22:43,140
The problem with query tuning seems like a much less daunting task for us and we're still

349
00:22:43,140 --> 00:22:47,580
obviously dealing with performance issues as we get bigger and bigger but this is I

350
00:22:47,580 --> 00:22:54,420
think a very big win for us and it is available for you to try out.

351
00:22:54,420 --> 00:22:59,380
We have a, that URL, that QR code there should actually reach through our GitHub page for

352
00:22:59,460 --> 00:23:00,460
it.

353
00:23:00,460 --> 00:23:04,100
It is very recently open source so if you guys want to take a snapshot of that and just

354
00:23:04,100 --> 00:23:09,140
take a look at it, if you want to improve it, test it out yourself, give us ideas of

355
00:23:09,140 --> 00:23:13,380
how we can make it better or give us ideas of what tools have done this better if you

356
00:23:13,380 --> 00:23:14,380
can find any.

357
00:23:14,380 --> 00:23:20,460
We would love that and if you have any questions about Cedar as well and you are interested

358
00:23:20,460 --> 00:23:24,980
in maybe joining us, you can take a look at cedar.com and if you scan the QR code because

359
00:23:24,980 --> 00:23:28,540
you're interested in joining us, you can see our careers page and see what is available

360
00:23:28,700 --> 00:23:33,220
for us, for you to join us and that is my talk.

361
00:23:33,220 --> 00:23:35,220
Thank you all for being here.

