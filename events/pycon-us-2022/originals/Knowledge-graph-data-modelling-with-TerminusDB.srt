1
00:00:00,000 --> 00:00:06,920
So hello.

2
00:00:06,920 --> 00:00:13,520
Sorry about the slight delay, but I hope that you are well prepared.

3
00:00:13,520 --> 00:00:17,000
So if you still have some set up questions and stuff, we'll have time later when we do

4
00:00:17,000 --> 00:00:18,640
the break.

5
00:00:18,640 --> 00:00:20,840
So don't worry about that.

6
00:00:20,840 --> 00:00:24,880
Like maybe I explained a little bit or you have looked at the slides.

7
00:00:24,880 --> 00:00:26,360
So sorry about that.

8
00:00:26,360 --> 00:00:29,480
My computer just restarted, so it's like weird things going on.

9
00:00:29,480 --> 00:00:34,320
So yeah, so the tutorial basically will consist of two parts.

10
00:00:34,320 --> 00:00:35,440
I will explain a little bit later.

11
00:00:35,440 --> 00:00:41,060
So there will be a lot of information given to you and then we will do some hand-on exercise.

12
00:00:41,060 --> 00:00:43,840
So without further ado, this is me.

13
00:00:43,840 --> 00:00:44,840
Hello, I'm Chirk.

14
00:00:44,840 --> 00:00:48,920
I am from, I live in London, so I came all the way.

15
00:00:48,920 --> 00:00:52,520
I spent 20 hours traveling yesterday, so fun.

16
00:00:52,520 --> 00:00:57,080
So I work for TerminusDB, which is the tool that we tried to use a little bit today.

17
00:00:57,080 --> 00:01:02,120
But the information, the knowledge that I gave you is not tied to TerminusDB, so I hope

18
00:01:02,120 --> 00:01:07,520
you have learned something that is universally useful for you.

19
00:01:07,520 --> 00:01:11,000
Also I just love giving talk and talk to people.

20
00:01:11,000 --> 00:01:13,320
And so if you have more questions, feel free to ask me.

21
00:01:13,320 --> 00:01:17,720
I was a data scientist, so maybe some of you are data scientists, maybe?

22
00:01:17,720 --> 00:01:18,720
Yes?

23
00:01:18,720 --> 00:01:19,720
Or work with data?

24
00:01:19,720 --> 00:01:20,720
You work with data?

25
00:01:20,720 --> 00:01:21,720
Yes.

26
00:01:22,360 --> 00:01:26,240
So I work with data a lot.

27
00:01:26,240 --> 00:01:28,040
I still work with data a lot.

28
00:01:28,040 --> 00:01:29,040
So I'm a Pythonista.

29
00:01:29,040 --> 00:01:30,040
I love Python.

30
00:01:30,040 --> 00:01:34,080
I love open source software.

31
00:01:34,080 --> 00:01:37,360
So if I'm on Twitter, minor stuff.

32
00:01:37,360 --> 00:01:42,640
So in this workshop, we would learn what is a semantic knowledge graph.

33
00:01:42,640 --> 00:01:48,880
So this is, again, I emphasize again, this is a universal knowledge.

34
00:01:48,880 --> 00:01:50,800
It's not tied to TerminusDB.

35
00:01:50,800 --> 00:01:54,960
So we'll try a little bit of TerminusDB, which is open source software, but you don't have

36
00:01:54,960 --> 00:01:56,400
to use it if you don't like it.

37
00:01:56,400 --> 00:02:00,320
I hope you like it, but if you don't like it, you don't have to use it.

38
00:02:00,320 --> 00:02:05,200
So why we store data in a semantic knowledge graph?

39
00:02:05,200 --> 00:02:12,200
Why we don't want to use a relational database like we did all the time?

40
00:02:12,200 --> 00:02:15,400
So why is it different?

41
00:02:15,400 --> 00:02:17,560
And how a knowledge graph is constructed.

42
00:02:17,560 --> 00:02:21,320
So there's some building blocks in a knowledge graph that we're going to learn today.

43
00:02:21,320 --> 00:02:24,400
If you haven't heard about that before, if you haven't heard about triple, quad, all

44
00:02:24,400 --> 00:02:28,800
these crazy wordings, we're going to have a look today.

45
00:02:28,800 --> 00:02:30,240
Also we would do some hand-on exercise.

46
00:02:30,240 --> 00:02:32,200
Like I said, we would try to use TerminusDB a little bit.

47
00:02:32,200 --> 00:02:34,320
We would try to build a knowledge graph schema.

48
00:02:34,320 --> 00:02:36,480
We would try to code in Python.

49
00:02:36,480 --> 00:02:38,400
Amazing stuff.

50
00:02:38,400 --> 00:02:43,760
And we would try to make some query using the things that we learned today.

51
00:02:43,760 --> 00:02:46,240
So these are just technical details.

52
00:02:46,240 --> 00:02:47,240
We will figure it out later.

53
00:02:47,240 --> 00:02:50,840
We will have trouble with time, like I said.

54
00:02:50,840 --> 00:02:53,760
So everyone can learn this knowledge.

55
00:02:53,760 --> 00:02:54,760
It's not tied to Python.

56
00:02:54,760 --> 00:02:57,360
Like I said, it's a universal knowledge.

57
00:02:57,360 --> 00:02:58,360
You don't have to learn TerminusDB.

58
00:02:58,360 --> 00:03:00,120
You don't have to learn Python.

59
00:03:00,120 --> 00:03:04,920
But the knowledge that I gave you today in the knowledge graph, so it's actually anybody

60
00:03:04,920 --> 00:03:06,640
can learn about it.

61
00:03:06,640 --> 00:03:08,840
But of course the hand-on exercise will be in Python.

62
00:03:08,840 --> 00:03:13,760
So also the setup will be using Docker and using Python.

63
00:03:13,760 --> 00:03:18,200
Or you can use the cloud version if you can't use Docker.

64
00:03:18,200 --> 00:03:22,240
But otherwise you can just enjoy the lecture.

65
00:03:22,240 --> 00:03:23,240
So we're here.

66
00:03:23,240 --> 00:03:24,520
I'm just giving a brief introduction.

67
00:03:24,520 --> 00:03:26,320
We are slightly delayed.

68
00:03:26,320 --> 00:03:28,960
But hopefully we'll have time to catch up later.

69
00:03:28,960 --> 00:03:30,480
So there will be a presentation.

70
00:03:30,480 --> 00:03:31,800
So around 60 minutes.

71
00:03:31,800 --> 00:03:37,640
It depends on how much stuff I'm saying or how much questions I receive.

72
00:03:37,640 --> 00:03:39,080
Feel free to ask questions at any time.

73
00:03:39,080 --> 00:03:40,860
I love questions.

74
00:03:40,860 --> 00:03:41,860
Then we have a break.

75
00:03:41,860 --> 00:03:46,260
We'll try to figure out all the setup problems and stuff.

76
00:03:46,260 --> 00:03:48,260
Also get yourself charged.

77
00:03:48,260 --> 00:03:49,860
Refill your coffee.

78
00:03:49,860 --> 00:03:56,020
And then we will start the hands-on exercise, which we will be coding together.

79
00:03:56,020 --> 00:04:00,340
So actually there's a tutorial that I already written a while ago.

80
00:04:00,340 --> 00:04:03,300
But we'll try to do it step-by-step together.

81
00:04:03,300 --> 00:04:07,060
If you have questions, you can ask me immediately.

82
00:04:07,060 --> 00:04:11,820
So at the end we'll just have a brief closing, review what we have learned, and how everybody

83
00:04:11,820 --> 00:04:15,540
can go in and ask more questions if you want to.

84
00:04:15,540 --> 00:04:16,540
So yeah.

85
00:04:16,540 --> 00:04:19,380
So this is a knowledge graph.

86
00:04:19,380 --> 00:04:25,660
So there's some kind of keywords that we go through today.

87
00:04:25,660 --> 00:04:29,780
Learning what is a triple, what is a quad, and then how a graph data model is different

88
00:04:29,780 --> 00:04:32,120
from a relational data model.

89
00:04:32,120 --> 00:04:35,500
So I always compare them with like, oh, one is 3D, one is 2D.

90
00:04:35,500 --> 00:04:36,500
What does that mean?

91
00:04:36,500 --> 00:04:41,540
There's also other terms that we use describing things in a knowledge graph, like objects,

92
00:04:41,820 --> 00:04:43,580
elements, properties, and other stuff.

93
00:04:43,580 --> 00:04:45,700
So we'll explain that.

94
00:04:45,700 --> 00:04:52,820
Yeah, so also we'll look at a use case, kind of a use case that I make up.

95
00:04:52,820 --> 00:04:57,340
But through that you can build your first knowledge graph.

96
00:04:57,340 --> 00:04:59,900
So what is a triple?

97
00:04:59,900 --> 00:05:06,540
So the triple actually, if you kind of talk to someone who loves semantic knowledge graph,

98
00:05:06,540 --> 00:05:09,900
you always come across something that's called triple.

99
00:05:09,900 --> 00:05:13,180
It's a building block of a semantic data model.

100
00:05:13,180 --> 00:05:20,980
So a lot of times when you go through a semantic data, you'll come across some file formats,

101
00:05:20,980 --> 00:05:28,020
like some of them is called RDF, some of them is called Turtoi, T-T-L, something like that.

102
00:05:28,020 --> 00:05:32,460
So they're actually a different file format that we use.

103
00:05:32,460 --> 00:05:36,060
So instead of, on the other hand, you have your relational database.

104
00:05:36,060 --> 00:05:41,460
It will be stored in a tablet format, in CSV, in a database, or in Excel, something like that.

105
00:05:41,460 --> 00:05:44,420
So, but today we focus on the knowledge graph.

106
00:05:44,420 --> 00:05:49,620
So we have triple, which we store everything in triple.

107
00:05:49,620 --> 00:05:52,740
And triple consists of three main things.

108
00:05:52,740 --> 00:05:56,260
So there's a subject, a predicate, and an object.

109
00:05:56,260 --> 00:06:01,700
So yeah, it's kind of like remind you of the lesson that you had when you first learned

110
00:06:01,700 --> 00:06:02,660
the English lesson.

111
00:06:02,660 --> 00:06:04,780
Let's say I learned English as a second language.

112
00:06:04,780 --> 00:06:09,540
So for me, it's like the teacher would tell us how an English sentence is structured.

113
00:06:09,540 --> 00:06:14,380
You have your noun, your objective, and all this stuff.

114
00:06:14,380 --> 00:06:15,980
So it's kind of like that.

115
00:06:15,980 --> 00:06:17,860
It's logical.

116
00:06:17,860 --> 00:06:19,780
You always have three things.

117
00:06:19,780 --> 00:06:25,300
You always have two things, like subject and object, and the predicate to describe their relationship.

118
00:06:25,300 --> 00:06:29,740
So some example would be Apple is red.

119
00:06:29,820 --> 00:06:36,860
But it's not like one to one equivalent to a language because instead of like Apple is red,

120
00:06:36,860 --> 00:06:44,420
sometimes you can have multiple kind of word in one, for example, predicate.

121
00:06:44,420 --> 00:06:46,860
Because for example, you have past tense.

122
00:06:46,860 --> 00:06:49,100
I don't know why, but Apple used to be red.

123
00:06:49,100 --> 00:06:53,580
Maybe now it turned black because you haven't eaten it for months.

124
00:06:53,580 --> 00:06:58,620
So predicate could not just be a word.

125
00:06:58,620 --> 00:07:06,380
So it's not a direct one to one relationship between a triple and a sentence.

126
00:07:06,380 --> 00:07:09,340
But the logic kind of goes the same.

127
00:07:09,340 --> 00:07:15,980
So it's kind of like you can construct a complex idea with triples.

128
00:07:15,980 --> 00:07:18,900
So here, these examples are very, very simple examples.

129
00:07:18,900 --> 00:07:20,780
It's just one idea at a time.

130
00:07:20,780 --> 00:07:23,700
So each triple carries one idea.

131
00:07:23,700 --> 00:07:24,820
So Apple is red.

132
00:07:24,860 --> 00:07:26,860
So Chuck teaches a workshop.

133
00:07:26,860 --> 00:07:29,300
And Cal loves duck, for example.

134
00:07:29,300 --> 00:07:31,180
So this is kind of kid-like stuff.

135
00:07:31,180 --> 00:07:36,740
So anybody can come up with some example of triples?

136
00:07:36,740 --> 00:07:40,060
Very quiet.

137
00:07:40,060 --> 00:07:40,780
Coffee is good?

138
00:07:40,780 --> 00:07:42,620
Yes, I agree with that.

139
00:07:42,620 --> 00:07:44,780
Anybody else?

140
00:07:44,780 --> 00:07:46,420
Python is awesome, of course.

141
00:07:46,420 --> 00:07:47,860
Yes.

142
00:07:47,860 --> 00:07:50,700
So yeah, that's just a very simple idea.

143
00:07:50,700 --> 00:07:51,660
They are triples.

144
00:07:51,660 --> 00:07:53,340
So they are atoms.

145
00:07:53,340 --> 00:07:57,780
They are the most basic things that construct a knowledge graph.

146
00:07:57,780 --> 00:08:03,980
So for example, here, you can see it's like a kid's bedtime story things.

147
00:08:03,980 --> 00:08:11,980
So like, oh, there's a cow says moo, and then a duck says quack.

148
00:08:11,980 --> 00:08:15,780
But in this picture, if you want to describe this picture,

149
00:08:15,780 --> 00:08:19,060
so instead of just one idea at a time, you

150
00:08:19,060 --> 00:08:20,980
may have a lot of ideas in this picture.

151
00:08:20,980 --> 00:08:23,940
You can have like, oh, cows have always a cow.

152
00:08:23,940 --> 00:08:26,380
So cow has four legs.

153
00:08:26,380 --> 00:08:27,900
Cow will say moo.

154
00:08:27,900 --> 00:08:31,260
And then duck has wings.

155
00:08:31,260 --> 00:08:34,340
And duck will say quack, things like that.

156
00:08:34,340 --> 00:08:39,220
So if you combine all of them together, then it will paint the picture.

157
00:08:39,220 --> 00:08:44,220
It will construct a more complex idea that's not just one single idea.

158
00:08:44,220 --> 00:08:46,180
So this is world building.

159
00:08:46,180 --> 00:08:47,980
This is how we build a knowledge graph.

160
00:08:47,980 --> 00:08:52,460
This is how we build a graph that can describe everything in the world,

161
00:08:52,460 --> 00:08:53,900
ideally.

162
00:08:53,900 --> 00:08:57,660
Of course, I would come up with some other more complex stuff that will come up.

163
00:08:57,660 --> 00:09:01,820
But in theory, you can describe everything

164
00:09:01,820 --> 00:09:04,860
by just using a lot of, lot of triples.

165
00:09:04,860 --> 00:09:09,900
You can build a world with all these triples.

166
00:09:09,900 --> 00:09:16,340
So sometimes we have problems, right?

167
00:09:16,380 --> 00:09:19,180
What if I have two cows?

168
00:09:19,180 --> 00:09:23,740
And they're actually from two different farms, right?

169
00:09:23,740 --> 00:09:27,980
So they are different things, and they speak different languages.

170
00:09:27,980 --> 00:09:30,300
So one cow says moo, one cow says meow.

171
00:09:30,300 --> 00:09:32,380
I don't know why.

172
00:09:32,380 --> 00:09:39,180
So yeah, so how can I distinguish these two cows from different farms, right?

173
00:09:39,180 --> 00:09:43,860
So sometimes a triple is not good enough to distinguish different things.

174
00:09:43,860 --> 00:09:46,220
You will see the practical reason why later.

175
00:09:46,220 --> 00:09:49,820
But this is the problem that we have.

176
00:09:49,820 --> 00:09:52,020
We have two cows.

177
00:09:52,020 --> 00:09:52,820
They're both cows.

178
00:09:52,820 --> 00:09:53,940
They're not different animals.

179
00:09:53,940 --> 00:09:58,460
But they're just from different farms, and they're slightly different.

180
00:09:58,460 --> 00:10:04,860
Then how we should solve this problem is to add an additional identifier

181
00:10:04,860 --> 00:10:07,180
to identify these two farms.

182
00:10:07,180 --> 00:10:11,500
They should not overlap because they are a different world.

183
00:10:11,500 --> 00:10:15,420
For cows, the farm is their whole world, so it's different.

184
00:10:15,460 --> 00:10:19,860
So we add one more element to the triple, so it becomes a quad.

185
00:10:19,860 --> 00:10:22,860
So triple, quad, three and four.

186
00:10:22,860 --> 00:10:25,820
Straightforward.

187
00:10:25,820 --> 00:10:32,380
So now you can compare the two different cows from two different universes, right?

188
00:10:32,380 --> 00:10:37,980
Because you can identify them specifically with a quad.

189
00:10:37,980 --> 00:10:39,620
So you can cross-reference.

190
00:10:39,620 --> 00:10:42,060
You can even cross-reference between the two of them.

191
00:10:42,060 --> 00:10:48,340
So that expands the idea of using triple to represent anything.

192
00:10:48,340 --> 00:10:53,100
You cannot just describe the whole world with many, many triples.

193
00:10:53,100 --> 00:10:57,820
You can even describe the two worlds that are similar but also different,

194
00:10:57,820 --> 00:10:59,180
then you can compare them.

195
00:10:59,180 --> 00:11:00,300
So why is this good?

196
00:11:00,300 --> 00:11:04,580
Because we do that all the time with Git.

197
00:11:04,580 --> 00:11:05,100
Right?

198
00:11:05,100 --> 00:11:10,660
So with Git, you have two sets of codes, but they are slightly different

199
00:11:10,660 --> 00:11:13,100
because someone makes some changes and you want to compare them.

200
00:11:13,100 --> 00:11:19,940
So by using not just triple but quads, we can also do something like what Git does,

201
00:11:19,940 --> 00:11:23,220
which we'll come back to later.

202
00:11:23,220 --> 00:11:26,860
So that's the basic of what is triple.

203
00:11:26,860 --> 00:11:29,340
So is there any questions?

204
00:11:29,340 --> 00:11:35,020
Is it sounds really crazy or does it make sense?

205
00:11:35,020 --> 00:11:35,540
Yes?

206
00:11:35,540 --> 00:11:42,340
What is just a triple with an extra element or attribute

207
00:11:42,340 --> 00:11:46,420
to identify what graph is this in?

208
00:11:46,420 --> 00:11:48,740
So we can have many, many triples in one graph,

209
00:11:48,740 --> 00:11:51,060
but we have multiple graphs and we can compare them.

210
00:11:54,540 --> 00:11:55,040
Yes?

211
00:11:59,660 --> 00:12:01,980
We haven't go there yet.

212
00:12:01,980 --> 00:12:07,300
In theory, you can, but I think because at the beginning,

213
00:12:07,300 --> 00:12:08,380
triple is good enough.

214
00:12:08,380 --> 00:12:11,020
Like I said, you can link up all the ideas together.

215
00:12:11,020 --> 00:12:13,020
But when you do something similar to Git,

216
00:12:13,020 --> 00:12:17,700
you want to compare the two sets of things, then a quad will help.

217
00:12:17,700 --> 00:12:23,740
So I haven't think about how we can make it five or six, but yeah.

218
00:12:23,740 --> 00:12:25,540
Any more questions?

219
00:12:25,540 --> 00:12:26,040
Yes?

220
00:12:26,040 --> 00:12:28,520
Is there a fourth element in the graph?

221
00:12:31,520 --> 00:12:32,840
Sorry, I can't really hear.

222
00:12:32,840 --> 00:12:33,340
Sorry.

223
00:12:35,340 --> 00:12:40,240
Is there a fourth element in the graph?

224
00:12:40,240 --> 00:12:42,960
Yes, the fourth element is the ID for the graph.

225
00:12:42,960 --> 00:12:45,560
So triple lives in a graph.

226
00:12:45,560 --> 00:12:46,680
Triple forms a graph.

227
00:12:46,680 --> 00:12:49,680
And the last element that we add to a triple

228
00:12:49,680 --> 00:12:53,000
is to identify which graph they are in.

229
00:12:53,000 --> 00:12:55,320
So yes, kind of ID, but ID for graph.

230
00:12:58,880 --> 00:12:59,600
Anything else?

231
00:13:07,120 --> 00:13:09,840
Yeah, so in relational database, for example,

232
00:13:09,840 --> 00:13:11,900
you have multiple tables, right?

233
00:13:11,900 --> 00:13:15,120
So graph is kind of like that in that sense.

234
00:13:15,120 --> 00:13:20,840
But how relational database works is different from a graph.

235
00:13:20,840 --> 00:13:23,640
Then we will compare about them soon.

236
00:13:23,640 --> 00:13:26,520
So yeah.

237
00:13:26,520 --> 00:13:27,920
So maybe I will move on.

238
00:13:27,920 --> 00:13:32,520
If you have more questions, feel free to ask at any time.

239
00:13:32,520 --> 00:13:37,320
So in the graph, let's talk about relational database model first.

240
00:13:37,320 --> 00:13:38,640
So we are familiar with it.

241
00:13:38,640 --> 00:13:41,000
We use it all the time.

242
00:13:41,000 --> 00:13:44,080
Even though you are like, oh, I am a Python programmer.

243
00:13:44,080 --> 00:13:44,840
I code.

244
00:13:44,840 --> 00:13:46,560
But you come across it all the time, right?

245
00:13:46,560 --> 00:13:48,080
For example, you use Django.

246
00:13:48,120 --> 00:13:52,320
Django use the back end is relational database, right?

247
00:13:52,320 --> 00:13:57,760
No matter you use MySQL or Postgres, they are relational database.

248
00:13:57,760 --> 00:14:00,040
So SQL database.

249
00:14:00,040 --> 00:14:02,520
Or if you, let's say, oh, I'm a data scientist.

250
00:14:02,520 --> 00:14:03,880
I do CSPs.

251
00:14:03,880 --> 00:14:07,360
They are also tablet format, right?

252
00:14:07,360 --> 00:14:11,320
Or if you are like, oh, at work, I use even

253
00:14:11,320 --> 00:14:15,360
I use a lot of Google spreadsheet just for administrative stuff, right?

254
00:14:15,360 --> 00:14:17,440
So they are all tablet.

255
00:14:17,440 --> 00:14:20,320
They are all kind of in the same sense of models.

256
00:14:20,320 --> 00:14:25,200
They are all like SQL kind of table, tablet format of data.

257
00:14:25,200 --> 00:14:31,200
So I use CSV a lot in the past when I was a data scientist.

258
00:14:31,200 --> 00:14:33,680
Of course, it's not just comma separated.

259
00:14:33,680 --> 00:14:35,680
You have some kind of weird stuff.

260
00:14:35,680 --> 00:14:41,200
Sometimes you have like, oh, maybe the, how do you call that character?

261
00:14:41,200 --> 00:14:42,680
There's a line.

262
00:14:42,680 --> 00:14:43,880
I don't know.

263
00:14:43,880 --> 00:14:44,680
Pipe, yeah.

264
00:14:44,680 --> 00:14:48,240
So pipe separated values sometimes.

265
00:14:48,240 --> 00:14:50,360
You know, they use different characters.

266
00:14:50,360 --> 00:14:52,000
But they are the same, right?

267
00:14:52,000 --> 00:14:56,000
So they're also just a file.

268
00:14:56,000 --> 00:14:58,840
So the thing is that when you work with them,

269
00:14:58,840 --> 00:15:04,520
when I used to work with CSPs or the SQL databases, a lot of times,

270
00:15:04,520 --> 00:15:07,680
what I really struggle with is to do a simple thing,

271
00:15:07,680 --> 00:15:11,160
find a simple answer by joining many, many tables together.

272
00:15:11,160 --> 00:15:14,960
Sometimes you aggregate and join it back to itself.

273
00:15:14,960 --> 00:15:18,920
So you can very easily write 1,000 lines of SQL

274
00:15:18,920 --> 00:15:22,920
just to get an answer from your data.

275
00:15:22,920 --> 00:15:26,280
So that's why sometimes I just want to write a Python program

276
00:15:26,280 --> 00:15:27,600
to deal with it, you know?

277
00:15:27,600 --> 00:15:29,440
But sometimes it's not possible.

278
00:15:29,440 --> 00:15:35,720
I remember when I worked in a company, they have a legacy database,

279
00:15:35,720 --> 00:15:37,160
very, very huge.

280
00:15:37,160 --> 00:15:40,640
And I can't load them all in Python to find out my answer.

281
00:15:40,640 --> 00:15:43,920
I have to use SQL to do the stuff.

282
00:15:43,920 --> 00:15:47,280
So not always possible.

283
00:15:47,280 --> 00:15:51,240
Sometimes it involves lots of very awkward joins and aggregations

284
00:15:51,240 --> 00:15:52,680
that I don't like.

285
00:15:52,680 --> 00:15:54,800
Maybe you like it, but I don't like it.

286
00:15:54,800 --> 00:16:00,680
So on the other hand, knowledge graph, it sounds a little bit

287
00:16:00,680 --> 00:16:01,640
complicated, right?

288
00:16:01,640 --> 00:16:05,240
Because relational database is a table.

289
00:16:05,240 --> 00:16:07,640
So it's very easy to visualize, right?

290
00:16:07,640 --> 00:16:10,160
You look at this column, this rows.

291
00:16:10,160 --> 00:16:10,960
You look at it.

292
00:16:10,960 --> 00:16:12,360
It's easy to understand.

293
00:16:12,360 --> 00:16:15,520
But knowledge graph, I would say, is the 3D,

294
00:16:15,520 --> 00:16:18,280
because you can link everything.

295
00:16:18,280 --> 00:16:19,600
It consists of triples.

296
00:16:19,600 --> 00:16:21,760
You can just link things together.

297
00:16:21,760 --> 00:16:25,920
It's not limited to rows and columns, which I describe as 2D.

298
00:16:25,920 --> 00:16:28,840
You can link it in multi-dimension, not just 3D,

299
00:16:28,840 --> 00:16:32,480
but multi-dimensional, right?

300
00:16:32,480 --> 00:16:38,240
So yeah, so a lot of common format instead of CSV

301
00:16:38,240 --> 00:16:42,800
is stored in this RDF XML format, which is a markup language.

302
00:16:42,800 --> 00:16:45,840
So it looks very similar to HTML, but it's not.

303
00:16:45,840 --> 00:16:48,040
It's an XML format.

304
00:16:48,040 --> 00:16:50,720
We follow some kind of RDF standard.

305
00:16:50,720 --> 00:16:53,840
That's why it's called RDF XML.

306
00:16:53,840 --> 00:16:57,880
This TTL file, the turtoys sometimes, I call it.

307
00:16:57,880 --> 00:16:58,720
I don't know.

308
00:16:58,720 --> 00:17:00,280
It's TTL.

309
00:17:00,280 --> 00:17:04,720
So again, it's something that is designed specifically

310
00:17:04,720 --> 00:17:08,760
of describing how triples are linked to each other.

311
00:17:08,760 --> 00:17:14,400
JSON-LD is what we use in TerminusDB.

312
00:17:14,400 --> 00:17:19,400
I would say that's the easiest to use, because if you look at XML or TTL,

313
00:17:19,400 --> 00:17:21,520
it looks like HTML.

314
00:17:21,520 --> 00:17:25,600
Those brackets and stuff is so difficult to read with human eyes.

315
00:17:25,600 --> 00:17:29,120
But JSON-LD looks like a JSON.

316
00:17:29,120 --> 00:17:32,800
JSON looks like a Python dictionary.

317
00:17:32,800 --> 00:17:37,800
So it's very easy to look at it with human eyes

318
00:17:37,800 --> 00:17:40,480
until they get too big, until they become too big

319
00:17:40,480 --> 00:17:42,480
and the indentation go crazy.

320
00:17:42,480 --> 00:17:45,200
And it's difficult to see.

321
00:17:45,200 --> 00:17:49,320
So the difference between the knowledge graph

322
00:17:49,320 --> 00:17:54,520
and a tablet format or a SQL database is that data

323
00:17:54,520 --> 00:17:56,920
is kind of unstructured.

324
00:17:56,920 --> 00:17:59,880
Like I said, it's not rows and columns.

325
00:17:59,880 --> 00:18:01,480
You can link everything together.

326
00:18:02,480 --> 00:18:04,160
Imagine you have like Legos.

327
00:18:04,160 --> 00:18:08,160
You can just put them together without any limitations.

328
00:18:08,160 --> 00:18:12,160
So it's not really confined to just rows and columns.

329
00:18:12,160 --> 00:18:15,320
So it's kind of unstructured, if you think about that.

330
00:18:15,320 --> 00:18:18,680
I would say that you use triple to paint a new world,

331
00:18:18,680 --> 00:18:20,240
paint a new picture.

332
00:18:20,240 --> 00:18:21,240
So same with data.

333
00:18:21,240 --> 00:18:24,480
You can model your data to work this way.

334
00:18:24,480 --> 00:18:28,480
So it's not limited to just rows and columns to describe your data.

335
00:18:28,480 --> 00:18:32,840
You can just describe the relationship

336
00:18:32,840 --> 00:18:34,440
between different things.

337
00:18:34,440 --> 00:18:35,720
So how can we do that?

338
00:18:35,720 --> 00:18:36,760
How can we do that?

339
00:18:36,760 --> 00:18:37,760
We'll find out today.

340
00:18:37,760 --> 00:18:38,920
So yes?

341
00:18:51,880 --> 00:18:53,080
That's a very good question.

342
00:18:53,080 --> 00:18:57,840
Because I would say that actually, I'll show you later.

343
00:18:57,840 --> 00:19:02,600
Actually, you can automatically write a script to convert them.

344
00:19:02,600 --> 00:19:06,720
Because a knowledge graph is like a 3D.

345
00:19:06,720 --> 00:19:10,440
So it's more flexible than a relational database.

346
00:19:10,440 --> 00:19:13,800
So if you can store things in rows and columns

347
00:19:13,800 --> 00:19:17,960
and maybe multiple tables, you can actually store them

348
00:19:17,960 --> 00:19:19,680
in knowledge graph for sure.

349
00:19:19,680 --> 00:19:21,760
It's just how to convert them.

350
00:19:21,760 --> 00:19:24,720
So how to convert them will require the knowledge

351
00:19:24,720 --> 00:19:27,040
of how to model them.

352
00:19:27,040 --> 00:19:28,760
That's actually similar to the exercise

353
00:19:28,760 --> 00:19:32,560
that we will do later, how we have a relational database

354
00:19:32,560 --> 00:19:36,360
and then how we can convert them into a knowledge graph.

355
00:19:36,360 --> 00:19:40,040
So a knowledge graph, I would say, is like a bigger

356
00:19:40,040 --> 00:19:42,600
set than a relational database.

357
00:19:42,600 --> 00:19:44,560
If you can store things in a relational database,

358
00:19:44,560 --> 00:19:47,760
you can store it in a knowledge graph.

359
00:19:47,760 --> 00:19:51,560
So yeah, that's one of the advantages.

360
00:19:51,560 --> 00:19:53,120
It's more flexible.

361
00:19:53,120 --> 00:20:00,000
So the knowledge is very flexible.

362
00:20:00,000 --> 00:20:02,040
Things you can store in table, you can easily store it

363
00:20:02,040 --> 00:20:04,960
in a knowledge graph, no problem.

364
00:20:04,960 --> 00:20:08,760
Also, you can actually add some constraint to it.

365
00:20:08,760 --> 00:20:13,880
So rather than just free for all, you can link anything together.

366
00:20:13,880 --> 00:20:16,400
If you build some governing structure on top,

367
00:20:16,400 --> 00:20:18,840
which we will talk about, schema later,

368
00:20:18,880 --> 00:20:24,000
then you can have a very flexible way structure

369
00:20:24,000 --> 00:20:24,880
to store your data.

370
00:20:29,160 --> 00:20:35,040
So sometimes if you have data that is not too differently,

371
00:20:35,040 --> 00:20:38,240
not good installing in a tablet format, for example,

372
00:20:38,240 --> 00:20:40,680
you have some data that's very nested

373
00:20:40,680 --> 00:20:42,800
or you have a lot of cross-reference.

374
00:20:42,800 --> 00:20:45,920
So instead of using some key to refer to each other,

375
00:20:45,920 --> 00:20:48,520
you can easily just link them.

376
00:20:48,840 --> 00:20:51,240
Let's say two people, you can link them together.

377
00:20:51,240 --> 00:20:54,440
And each people can have their own attribute and stuff.

378
00:20:54,440 --> 00:20:59,200
So that's actually why some people find that a knowledge

379
00:20:59,200 --> 00:21:01,320
graph is the only option to store their data.

380
00:21:01,320 --> 00:21:04,920
Because if they try to flatten it, store it in 2D,

381
00:21:04,920 --> 00:21:07,640
all these cross-reference, all these nested format

382
00:21:07,640 --> 00:21:09,280
will give them a headache.

383
00:21:09,280 --> 00:21:12,560
So that's why it's the best way to do it,

384
00:21:12,560 --> 00:21:15,840
is to store it in a graph format.

385
00:21:15,840 --> 00:21:18,200
Also, if you make queries, like I said,

386
00:21:18,200 --> 00:21:21,440
the advantage of doing knowledge graph

387
00:21:21,440 --> 00:21:25,040
is that you don't have to join things back together,

388
00:21:25,040 --> 00:21:26,880
because they are already linked.

389
00:21:26,880 --> 00:21:29,320
So let's say you have two people that

390
00:21:29,320 --> 00:21:31,640
is cross-referencing each other.

391
00:21:31,640 --> 00:21:34,840
You just have a link from one object, which is the person,

392
00:21:34,840 --> 00:21:35,840
to another person.

393
00:21:35,840 --> 00:21:39,120
So you don't have to find the ID and then join them back

394
00:21:39,120 --> 00:21:39,680
together.

395
00:21:39,680 --> 00:21:44,600
So you're kind of like, oh, I know that now this is related.

396
00:21:44,600 --> 00:21:47,880
Because they are naturally linked together by the triple.

397
00:21:47,880 --> 00:21:52,640
And so it very naturally works as a graph.

398
00:21:52,640 --> 00:21:57,600
So sometimes it's easier to find the answer you want from data

399
00:21:57,600 --> 00:22:01,680
to just traverse the graph, instead of making a lot of joins

400
00:22:01,680 --> 00:22:04,000
and connecting everything back together.

401
00:22:04,000 --> 00:22:08,000
Because let's say you only need to find the relationship

402
00:22:08,000 --> 00:22:09,920
between two people.

403
00:22:09,920 --> 00:22:13,360
You don't have to join the whole graph of every users

404
00:22:13,360 --> 00:22:14,040
that you have.

405
00:22:14,040 --> 00:22:15,840
Let's say you have users, and you just

406
00:22:15,840 --> 00:22:17,840
want to know that, oh, who referenced this user?

407
00:22:17,840 --> 00:22:20,760
Instead of you have to do a lookup, which

408
00:22:20,760 --> 00:22:23,600
look at everything, you can just traverse the graph,

409
00:22:23,600 --> 00:22:25,320
because they're already linked together.

410
00:22:25,320 --> 00:22:26,600
Who are the referencee?

411
00:22:26,600 --> 00:22:29,120
They can just, oh, I found that person.

412
00:22:29,120 --> 00:22:34,160
So yeah, so that's sometimes it's better.

413
00:22:34,160 --> 00:22:39,400
So I know that recently or in the last few years,

414
00:22:39,400 --> 00:22:41,680
data lake is a big hype.

415
00:22:42,680 --> 00:22:46,880
Lots of different cloud service is providing data lake.

416
00:22:46,880 --> 00:22:49,360
You can store a lot of things in it.

417
00:22:49,360 --> 00:22:50,640
It's just referenced by a link.

418
00:22:50,640 --> 00:22:53,960
So you can have a blob that put in the data lake,

419
00:22:53,960 --> 00:22:58,000
and you just find the link to that blob of things.

420
00:22:58,000 --> 00:22:59,560
So it's like a lake.

421
00:22:59,560 --> 00:23:02,400
Everything can put it in.

422
00:23:02,400 --> 00:23:07,840
So the advantage of that, but sometimes we want structure.

423
00:23:07,840 --> 00:23:11,480
So with a knowledge graph, you can add a schema on top.

424
00:23:11,480 --> 00:23:12,600
Then you have structure.

425
00:23:12,600 --> 00:23:16,160
Then you can find the things you dumped in the data lake

426
00:23:16,160 --> 00:23:17,040
much easier.

427
00:23:17,040 --> 00:23:18,920
Rather than just have a bunch of links,

428
00:23:18,920 --> 00:23:20,160
you don't know what they are.

429
00:23:20,160 --> 00:23:22,160
But with a schema, it will help you

430
00:23:22,160 --> 00:23:25,440
to find important information from your graph.

431
00:23:25,440 --> 00:23:28,600
So how do we do that?

432
00:23:28,600 --> 00:23:34,160
A schema is needed when you have cases that, for example, you

433
00:23:34,160 --> 00:23:38,520
want to monitor what data come into your graph.

434
00:23:39,360 --> 00:23:43,680
So naturally, a graph, you can just

435
00:23:43,680 --> 00:23:47,120
link all the triples together and build something.

436
00:23:47,120 --> 00:23:48,640
But sometimes you don't want that.

437
00:23:48,640 --> 00:23:51,080
Sometimes you want to have a structure that, for example,

438
00:23:51,080 --> 00:23:53,240
a person always have a name.

439
00:23:53,240 --> 00:23:55,360
Let's say, we first name, last name,

440
00:23:55,360 --> 00:23:57,360
but it's a bad model because some people only

441
00:23:57,360 --> 00:23:59,840
got one name, but anyway.

442
00:23:59,840 --> 00:24:01,760
So let's say a person needs to have a name.

443
00:24:01,760 --> 00:24:04,360
Let's say a person needs to have a contact number,

444
00:24:04,360 --> 00:24:05,680
because if we can't contact them,

445
00:24:05,680 --> 00:24:07,640
they don't exist in our database.

446
00:24:07,640 --> 00:24:11,800
So you can build a schema, a structure,

447
00:24:11,800 --> 00:24:15,840
to govern how your data look like.

448
00:24:15,840 --> 00:24:18,360
For example, contact number need to be digits.

449
00:24:18,360 --> 00:24:22,360
Let's say contact number need to be only digits.

450
00:24:22,360 --> 00:24:25,000
Let's say, again, it's a bad model, a bad example,

451
00:24:25,000 --> 00:24:28,080
but let's say you designed it that way.

452
00:24:28,080 --> 00:24:31,840
Or a person's name can't have emoji on it, something like that.

453
00:24:31,840 --> 00:24:34,920
So you can actually, having a schema,

454
00:24:34,920 --> 00:24:39,800
you can govern governance, like how your data will look like.

455
00:24:39,800 --> 00:24:42,360
You can't just have anything that just come in.

456
00:24:42,360 --> 00:24:47,360
You need to confine a certain format to be in your graph.

457
00:24:47,360 --> 00:24:50,280
So that's what schema is for, and that's why it's useful,

458
00:24:50,280 --> 00:24:52,720
most of the time.

459
00:24:52,720 --> 00:24:56,880
So I'm using TerminusDB as an example here,

460
00:24:56,880 --> 00:25:00,360
but generally, you have similar design

461
00:25:00,360 --> 00:25:04,160
for graphs to be useful, to be honest.

462
00:25:04,160 --> 00:25:06,240
Because you have objects, first of all.

463
00:25:06,240 --> 00:25:08,160
You have a lot of objects in it.

464
00:25:08,160 --> 00:25:10,280
Even though you can describe anything with triples,

465
00:25:10,280 --> 00:25:13,680
but to make things more systematic in the schema,

466
00:25:13,680 --> 00:25:17,080
you will have objects.

467
00:25:17,080 --> 00:25:20,240
So it's kind of like Python, everything is an object.

468
00:25:20,240 --> 00:25:27,640
So you also need to have objects in your graph.

469
00:25:27,640 --> 00:25:33,520
So just like Python objects, they also will have properties.

470
00:25:33,520 --> 00:25:35,120
Another object can be their property,

471
00:25:35,120 --> 00:25:39,840
so you can build anything with it.

472
00:25:39,840 --> 00:25:40,960
Also, there's documents.

473
00:25:40,960 --> 00:25:42,960
So documents and objects, they are very tricky.

474
00:25:42,960 --> 00:25:45,320
They are basically the same thing.

475
00:25:45,320 --> 00:25:47,640
So how we design it is that document will have an ID,

476
00:25:47,640 --> 00:25:49,240
object don't have an ID.

477
00:25:49,240 --> 00:25:51,600
So later, we rename it into sub-documents,

478
00:25:51,600 --> 00:25:56,840
and it just goes into more like quite a crazy terminology.

479
00:25:56,840 --> 00:25:58,400
But just imagine they're the same thing.

480
00:25:58,400 --> 00:26:01,400
Sometimes I use the word interchangeably,

481
00:26:01,400 --> 00:26:02,800
like objects and documents.

482
00:26:02,800 --> 00:26:06,240
But just remember, documents always have an ID,

483
00:26:06,240 --> 00:26:08,360
objects doesn't.

484
00:26:08,360 --> 00:26:09,000
Enums.

485
00:26:09,000 --> 00:26:13,000
So enums is sort of very useful.

486
00:26:13,000 --> 00:26:14,440
Well, we are all familiar with it.

487
00:26:14,440 --> 00:26:18,280
But yeah, so more details.

488
00:26:18,280 --> 00:26:25,320
So objects, we are not alien with it, right?

489
00:26:25,320 --> 00:26:29,600
Because Python, naturally, you would already

490
00:26:29,600 --> 00:26:31,760
come across object-oriented programming

491
00:26:31,760 --> 00:26:33,640
if you use Python.

492
00:26:33,640 --> 00:26:38,800
And so you can create an object in a schema,

493
00:26:38,800 --> 00:26:42,760
or document in a schema, that is like a class.

494
00:26:42,760 --> 00:26:46,800
So you can create instance of it.

495
00:26:46,800 --> 00:26:53,120
So that's how I see it, is that documents or objects

496
00:26:53,120 --> 00:26:55,480
in a schema is the class.

497
00:26:55,480 --> 00:27:01,680
And then the data you put it in is the instance of it.

498
00:27:01,680 --> 00:27:06,120
So again, like I said, objects are sub-documents.

499
00:27:06,120 --> 00:27:06,960
They don't have an ID.

500
00:27:06,960 --> 00:27:08,640
Documents, they have an ID.

501
00:27:08,640 --> 00:27:12,240
It's just a funny naming things.

502
00:27:12,240 --> 00:27:14,000
So later, we'll see the example there

503
00:27:14,000 --> 00:27:19,000
that I would have a person, a person have an address.

504
00:27:19,000 --> 00:27:24,040
So in an address, we just get all the street numbers,

505
00:27:24,040 --> 00:27:28,520
a postcode, or zip code, city, town, county,

506
00:27:28,520 --> 00:27:31,080
all this stuff into one package.

507
00:27:31,080 --> 00:27:32,720
So address will be an object with a lot

508
00:27:32,720 --> 00:27:36,560
of different properties of all those things.

509
00:27:36,560 --> 00:27:39,720
So or attributes in Python, there are attributes,

510
00:27:39,720 --> 00:27:43,200
but it could be properties.

511
00:27:43,200 --> 00:27:44,520
So just different naming, right?

512
00:27:47,280 --> 00:27:51,240
So you can also put this address as an object

513
00:27:51,240 --> 00:27:52,960
itself into different things.

514
00:27:52,960 --> 00:27:54,560
For example, you have different users.

515
00:27:54,560 --> 00:27:57,360
Or you have one user, they can have different address.

516
00:27:57,360 --> 00:28:00,640
Or different users can share the same address.

517
00:28:00,640 --> 00:28:03,480
So you can also reference it to another object as well.

518
00:28:06,760 --> 00:28:10,560
So yeah, document is just, again, having an ID.

519
00:28:10,560 --> 00:28:13,840
The reason why we made this difference,

520
00:28:13,840 --> 00:28:17,480
because sometimes you just want, for example, the address

521
00:28:17,480 --> 00:28:22,200
that I mentioned, you just, so let's say two different users

522
00:28:22,200 --> 00:28:23,760
can't have the same address.

523
00:28:23,760 --> 00:28:24,800
You design it this way.

524
00:28:24,800 --> 00:28:26,440
Don't ask why.

525
00:28:26,440 --> 00:28:29,080
So an address always lives inside a user,

526
00:28:29,080 --> 00:28:31,240
lives inside a person.

527
00:28:31,240 --> 00:28:34,040
Then you don't have to cross-reference it.

528
00:28:34,040 --> 00:28:36,840
And it's just a package of stuff.

529
00:28:36,840 --> 00:28:40,320
But a document will be, let's say, different users.

530
00:28:40,320 --> 00:28:43,400
They will have to have an ID so you can identify them.

531
00:28:43,400 --> 00:28:46,040
So you can find out who they are.

532
00:28:46,040 --> 00:28:47,720
So you can cross-reference each other.

533
00:28:47,720 --> 00:28:51,440
For example, one user is referring the other user.

534
00:28:51,440 --> 00:28:53,920
So they both get a discount or something like that.

535
00:28:53,920 --> 00:28:55,240
So you may want that.

536
00:28:55,240 --> 00:28:59,240
You need to use an ID to identify them.

537
00:28:59,240 --> 00:29:02,400
So each of them will have a unique ID.

538
00:29:02,400 --> 00:29:04,640
So that's the only difference, really.

539
00:29:04,640 --> 00:29:06,520
It just makes things a little bit different

540
00:29:06,520 --> 00:29:09,980
when it works in the graph.

541
00:29:09,980 --> 00:29:13,360
So pretty confusingly, we also have different naming issues.

542
00:29:13,360 --> 00:29:15,160
But that's how we name it.

543
00:29:15,160 --> 00:29:18,640
So this ID, which is a unique identifier,

544
00:29:18,640 --> 00:29:20,520
try to ignore the one before the slash.

545
00:29:20,520 --> 00:29:23,400
Because I put it there because the old version

546
00:29:23,400 --> 00:29:25,440
used the old naming, which is on the left.

547
00:29:25,440 --> 00:29:27,760
But we're focusing on the right of the slash.

548
00:29:27,760 --> 00:29:35,200
So ID is the unique identifier, just like a key, a pyramid key.

549
00:29:35,200 --> 00:29:37,520
And name is a human readable name.

550
00:29:37,520 --> 00:29:40,640
So you can use emoji in there.

551
00:29:40,640 --> 00:29:44,280
So has anybody tried to import something as emoji?

552
00:29:44,280 --> 00:29:49,000
So my friend has tried to import pandas as panda emoji.

553
00:29:49,000 --> 00:29:51,920
So yeah, you can use emoji in there.

554
00:29:52,000 --> 00:29:57,600
Or sometimes, let's say ID, you need to be confined.

555
00:29:57,600 --> 00:30:06,320
Because of how we store stuff, so ID need to be, let's say,

556
00:30:06,320 --> 00:30:07,920
URL save.

557
00:30:07,920 --> 00:30:14,520
But name, sometimes people's name will have those accent.

558
00:30:14,520 --> 00:30:18,880
So then the ID doesn't reflect the name correctly.

559
00:30:18,880 --> 00:30:22,120
So you may want to store the name as a different thing.

560
00:30:22,120 --> 00:30:24,760
So it could be any string as a name.

561
00:30:24,760 --> 00:30:27,000
And then you have a longer description and stuff.

562
00:30:27,000 --> 00:30:34,280
So that's how all the documents, we make it work like that.

563
00:30:34,280 --> 00:30:37,520
And so again, it's just an example

564
00:30:37,520 --> 00:30:39,960
how a document works in TerminusDB.

565
00:30:39,960 --> 00:30:41,960
But I think that's a really good model.

566
00:30:41,960 --> 00:30:47,520
Because you will need an ID and a name and description.

567
00:30:47,520 --> 00:30:50,720
Just like every talk, right?

568
00:30:50,720 --> 00:30:53,800
Imagine a lot of things are like that.

569
00:30:53,800 --> 00:30:57,160
Let's say you submit a proposal to a conference.

570
00:30:57,160 --> 00:30:58,920
You have an ID of your talk.

571
00:30:58,920 --> 00:31:00,520
And then you have the title of your talk

572
00:31:00,520 --> 00:31:01,840
and the abstract of your talk.

573
00:31:01,840 --> 00:31:03,360
So a lot of things work like that.

574
00:31:03,360 --> 00:31:07,600
So that's why it's kind of like that in TerminusDB.

575
00:31:07,600 --> 00:31:09,400
Of course, you can add more properties in there.

576
00:31:09,400 --> 00:31:10,720
So these three are the defaults.

577
00:31:10,720 --> 00:31:12,220
You can add more properties in there.

578
00:31:12,220 --> 00:31:15,880
For example, like I said, the talk, the proposal you submit

579
00:31:15,880 --> 00:31:17,640
is to a conference.

580
00:31:17,640 --> 00:31:19,800
Then you may want to have other things, right?

581
00:31:19,800 --> 00:31:25,360
You may have the duration or the type of this proposal.

582
00:31:25,360 --> 00:31:30,160
Or you may want to add your bio in there as well.

583
00:31:30,160 --> 00:31:30,680
I don't know.

584
00:31:30,680 --> 00:31:32,400
So it will have more stuff.

585
00:31:32,400 --> 00:31:36,240
But the basics are there.

586
00:31:36,240 --> 00:31:36,960
So enum.

587
00:31:36,960 --> 00:31:40,360
Enum is just like enum in SQL or enum in Python.

588
00:31:40,360 --> 00:31:42,000
It's just a list of values.

589
00:31:42,000 --> 00:31:44,440
So a lot of times, we need to use enum

590
00:31:44,440 --> 00:31:48,120
because we want to limit the choice of what people have.

591
00:31:48,120 --> 00:31:50,680
Like if you're in a farm, a lot of times,

592
00:31:50,680 --> 00:31:54,760
you came across a drop-down menu of choosing things.

593
00:31:54,760 --> 00:31:56,400
For example, which country you're from.

594
00:31:56,400 --> 00:31:59,320
So there's lots of different countries you can choose.

595
00:31:59,320 --> 00:31:59,960
Things like that.

596
00:32:03,760 --> 00:32:10,240
So any confusion about documents, objects, and enums?

597
00:32:10,240 --> 00:32:15,080
So there are three different things that we have.

598
00:32:15,080 --> 00:32:18,680
When we build our schema, we're basically just creating

599
00:32:18,680 --> 00:32:20,080
these three types of things.

600
00:32:20,080 --> 00:32:21,280
We will create a enum.

601
00:32:21,280 --> 00:32:22,600
We will create a document.

602
00:32:22,600 --> 00:32:25,800
We will create an object or sub-document.

603
00:32:25,800 --> 00:32:26,300
Yes?

604
00:32:31,120 --> 00:32:34,840
A document is the object itself, but with an ID.

605
00:32:34,840 --> 00:32:35,320
Yes.

606
00:32:35,320 --> 00:32:36,320
I know it's very confusing.

607
00:32:36,320 --> 00:32:38,240
So that's why I want to pause and see

608
00:32:38,240 --> 00:32:39,640
if people are clear about that.

609
00:32:45,560 --> 00:32:47,280
Everything is an object except enum,

610
00:32:47,280 --> 00:32:49,440
which is just a list of choice, which that's

611
00:32:49,440 --> 00:32:51,400
why it's structured a little bit different.

612
00:32:51,400 --> 00:32:53,920
So it's kind of like, is that Python?

613
00:32:53,920 --> 00:32:56,840
So it's like, let's say, Python classes and Python name

614
00:32:56,840 --> 00:32:58,280
triple kind of thing.

615
00:32:58,280 --> 00:33:00,360
It's just different things.

616
00:33:00,360 --> 00:33:01,080
But yeah.

617
00:33:01,080 --> 00:33:07,080
So for the objects or documents, they will have properties.

618
00:33:07,080 --> 00:33:10,960
So the property itself, so this is actually,

619
00:33:10,960 --> 00:33:13,600
when we do hands-on exercise, this is not going to,

620
00:33:13,600 --> 00:33:15,440
we won't use this information.

621
00:33:15,440 --> 00:33:18,040
But I'm giving this to you again because this

622
00:33:18,040 --> 00:33:20,800
is how, when someone describes a semantic graph,

623
00:33:20,800 --> 00:33:22,440
sometimes they describe things this way.

624
00:33:22,440 --> 00:33:25,120
So that's why I give you extra information to understand it.

625
00:33:25,120 --> 00:33:28,240
But in our exercise, we will use the same information

626
00:33:29,240 --> 00:33:29,880
to understand it.

627
00:33:29,880 --> 00:33:34,360
But in our exercise, we won't use this just to warn you.

628
00:33:34,360 --> 00:33:36,600
So if you think it's complicated, don't worry.

629
00:33:36,600 --> 00:33:39,000
We won't touch this.

630
00:33:39,000 --> 00:33:40,760
So properties.

631
00:33:40,760 --> 00:33:43,600
So so far, so how we look at things, right?

632
00:33:43,600 --> 00:33:46,600
It's like, oh, I have an object and I have a relationship.

633
00:33:46,600 --> 00:33:53,600
And another object, let's say, I'm my mother's daughter.

634
00:33:53,600 --> 00:33:56,800
My mother, so like give birth to me, let's say.

635
00:33:56,800 --> 00:33:58,880
So there's like three kind of things,

636
00:33:58,880 --> 00:34:01,760
triple relationship, all this stuff.

637
00:34:01,760 --> 00:34:03,920
But now we want to look at it differently.

638
00:34:03,920 --> 00:34:07,000
So look at, OK, so there's a relationship.

639
00:34:07,000 --> 00:34:09,320
So my mother, me, relationship.

640
00:34:09,320 --> 00:34:11,240
Look at the relationship itself.

641
00:34:11,240 --> 00:34:15,680
So we will look at the two ends of it.

642
00:34:15,680 --> 00:34:17,640
So it's kind of like that property.

643
00:34:17,640 --> 00:34:19,000
Let me think of a better example.

644
00:34:19,000 --> 00:34:22,400
So let's say I am the object.

645
00:34:22,400 --> 00:34:24,040
So I have an ID.

646
00:34:24,040 --> 00:34:26,600
My ID is 001 because I'm the first person that I created

647
00:34:26,600 --> 00:34:27,760
in the graph.

648
00:34:27,760 --> 00:34:32,600
And then name will be my name, right, check.

649
00:34:32,600 --> 00:34:34,640
That's usually how we look at things.

650
00:34:34,640 --> 00:34:38,960
So there's a thing and then a property.

651
00:34:38,960 --> 00:34:40,960
And then that would be our name will be check.

652
00:34:40,960 --> 00:34:43,360
Check is a string, right?

653
00:34:43,360 --> 00:34:46,840
But sometimes we want to look at things a little bit different.

654
00:34:46,840 --> 00:34:48,520
We look at the property itself.

655
00:34:48,520 --> 00:34:51,600
So we look at name.

656
00:34:51,600 --> 00:34:54,760
So name is a property.

657
00:34:54,760 --> 00:34:57,840
But a name will also have a domain and a range.

658
00:34:57,840 --> 00:34:59,480
So what is that?

659
00:35:02,440 --> 00:35:04,960
So name is a property of a person.

660
00:35:08,640 --> 00:35:12,280
So that's why name's domain is a person.

661
00:35:12,280 --> 00:35:14,160
It's a person object.

662
00:35:14,160 --> 00:35:16,240
And the name's range would be a string

663
00:35:16,240 --> 00:35:18,560
because it's store string.

664
00:35:18,560 --> 00:35:22,640
So it's kind of like a property-centric way

665
00:35:22,640 --> 00:35:24,200
of looking at things.

666
00:35:24,200 --> 00:35:31,640
Instead of looking at, oh, name is a property of a person,

667
00:35:31,640 --> 00:35:34,000
which name will be very passive.

668
00:35:34,000 --> 00:35:36,800
But now I look at name actively.

669
00:35:36,800 --> 00:35:38,360
So what is name's domain?

670
00:35:38,360 --> 00:35:41,480
Oh, it's person because it belongs to person.

671
00:35:41,480 --> 00:35:44,680
And its range will be a string because it stores string.

672
00:35:44,680 --> 00:35:47,200
So we talk about that.

673
00:35:47,200 --> 00:35:49,960
We mainly just look at, oh, person,

674
00:35:49,960 --> 00:35:52,240
we have a property name that stores a string.

675
00:35:52,240 --> 00:35:53,640
So it's the other way around.

676
00:35:53,840 --> 00:35:57,000
But sometimes we mention domain and range,

677
00:35:57,000 --> 00:36:00,080
and that's what we mean.

678
00:36:00,080 --> 00:36:03,840
So sometimes range can be another person.

679
00:36:03,840 --> 00:36:06,560
Let's say later you see in the examples

680
00:36:06,560 --> 00:36:09,720
that we have a lot of employees, and they'll have managers.

681
00:36:09,720 --> 00:36:12,320
So you can have employee, and then manager

682
00:36:12,320 --> 00:36:14,880
will be another employee because your manager is

683
00:36:14,880 --> 00:36:16,920
another employee.

684
00:36:16,920 --> 00:36:19,120
So range could be another object.

685
00:36:19,120 --> 00:36:23,160
So it could be not just a string or number or any data type.

686
00:36:23,160 --> 00:36:24,880
So it comes to two things.

687
00:36:24,880 --> 00:36:26,680
It's like, make it more complicated.

688
00:36:26,680 --> 00:36:30,280
So there's the data property or object properties.

689
00:36:30,280 --> 00:36:39,560
So a data property means that things are just data.

690
00:36:39,560 --> 00:36:42,000
How can I describe it?

691
00:36:42,000 --> 00:36:43,760
We call them data types.

692
00:36:43,760 --> 00:36:47,720
It's just text, like string, or it's just

693
00:36:48,080 --> 00:36:53,800
like integer or decimal, or they are Booleans.

694
00:36:53,800 --> 00:36:55,920
You can be more complicated, like unsigned type,

695
00:36:55,920 --> 00:36:59,240
you know, the unsigned integer or something like that.

696
00:36:59,240 --> 00:37:02,120
But they are not another object.

697
00:37:02,120 --> 00:37:04,800
That's why they are called data types.

698
00:37:04,800 --> 00:37:06,960
They are sometimes literal data types,

699
00:37:06,960 --> 00:37:08,080
because they're literal.

700
00:37:08,080 --> 00:37:09,320
They are just what they are.

701
00:37:09,320 --> 00:37:11,000
They are not another object.

702
00:37:11,000 --> 00:37:12,800
Of course, you can say, oh, in Python, string

703
00:37:12,800 --> 00:37:16,160
is also another object, and integer is another object.

704
00:37:16,160 --> 00:37:19,560
Well, not in our case here.

705
00:37:19,560 --> 00:37:22,840
That string is just like text.

706
00:37:22,840 --> 00:37:26,840
It's not another object.

707
00:37:26,840 --> 00:37:30,480
So object property, on the other hand, is another object.

708
00:37:30,480 --> 00:37:33,720
So for example, like I just described,

709
00:37:33,720 --> 00:37:37,800
so employee is an object.

710
00:37:37,800 --> 00:37:42,600
So if the property, if the range of that property

711
00:37:42,600 --> 00:37:45,880
is another object, then it's an object property.

712
00:37:46,720 --> 00:37:50,360
You can think of it as a link between two different objects.

713
00:37:50,360 --> 00:37:52,840
It could be not just employees.

714
00:37:52,840 --> 00:37:55,760
It could be like someone, let's say, a user

715
00:37:55,760 --> 00:37:58,120
has the billing address.

716
00:37:58,120 --> 00:38:00,840
But you make billing address is an address object.

717
00:38:00,840 --> 00:38:03,720
So you have user, an address, two different objects.

718
00:38:03,720 --> 00:38:06,760
You link them together, because this is the billing address,

719
00:38:06,760 --> 00:38:09,840
it's the property of the user.

720
00:38:09,840 --> 00:38:12,720
So billing address will have a domain of user

721
00:38:12,760 --> 00:38:17,080
and a range of an address.

722
00:38:17,080 --> 00:38:21,000
So OK, hands up, yes.

723
00:38:21,000 --> 00:38:22,000
Data about the relationship.

724
00:38:22,000 --> 00:38:49,040
So you would have to think about what this data mean,

725
00:38:49,040 --> 00:38:54,840
because you can also, for example,

726
00:38:54,840 --> 00:38:58,720
we have the billing address thing again.

727
00:38:58,720 --> 00:39:01,200
So you could, oh, how can I describe this billing address

728
00:39:01,200 --> 00:39:05,840
that is a billing address that is not a residential address,

729
00:39:05,840 --> 00:39:07,240
let's say?

730
00:39:07,240 --> 00:39:10,280
Or can I have a property for this billing address,

731
00:39:10,280 --> 00:39:13,080
but not just a, how can I describe it?

732
00:39:13,080 --> 00:39:15,080
Is that what you mean?

733
00:39:15,080 --> 00:39:17,040
That describing the relationship.

734
00:39:19,040 --> 00:39:34,960
Yes, so in this case, this link is a property.

735
00:39:34,960 --> 00:39:39,640
So it really only makes sense when

736
00:39:39,640 --> 00:39:42,080
it belongs to the user.

737
00:39:42,080 --> 00:39:43,760
The billing address doesn't make any sense

738
00:39:43,760 --> 00:39:48,920
if it does not belong to a user, because it's a property.

739
00:39:49,040 --> 00:39:50,040
It's the property of the user.

740
00:39:57,920 --> 00:40:02,920
So yeah, in this case, it's not bidirectional,

741
00:40:02,920 --> 00:40:06,640
because the domain and the range is obviously

742
00:40:06,640 --> 00:40:08,080
two sides of the thing.

743
00:40:08,080 --> 00:40:10,320
So you can't have the other way around.

744
00:40:10,320 --> 00:40:13,080
So you can't have the, well, if you

745
00:40:13,080 --> 00:40:15,000
want to go back in the other direction,

746
00:40:15,000 --> 00:40:16,680
let's say you have the address, and then

747
00:40:16,680 --> 00:40:18,680
who this address belongs to, then you

748
00:40:18,680 --> 00:40:20,920
may have to add a property for the address

749
00:40:20,920 --> 00:40:22,120
to link it back to the user.

750
00:40:24,880 --> 00:40:31,240
But by nature, the properties, the link between the object,

751
00:40:31,240 --> 00:40:34,600
the object properties, they are one directional only,

752
00:40:34,600 --> 00:40:37,440
because they have one side, which is domain,

753
00:40:37,440 --> 00:40:39,160
and the other side, which is the range.

754
00:40:39,160 --> 00:40:40,440
So it's not bidirectional.

755
00:40:44,640 --> 00:40:47,800
So wow, it's information overload.

756
00:40:47,800 --> 00:40:48,880
How can we do this?

757
00:40:48,880 --> 00:40:52,800
How can we represent data in a knowledge graph?

758
00:40:52,800 --> 00:40:57,360
So let's say we have a case now, a case study now.

759
00:40:57,360 --> 00:40:59,760
So in the next slides, I will give you

760
00:40:59,760 --> 00:41:04,440
an example of things that I made up.

761
00:41:04,440 --> 00:41:06,840
It's a database in a tablet format,

762
00:41:06,840 --> 00:41:09,440
and then we could try to create a schema

763
00:41:09,440 --> 00:41:12,240
to model it into a knowledge graph.

764
00:41:12,240 --> 00:41:13,680
So it's governance by the schema,

765
00:41:13,680 --> 00:41:15,400
so that's why we build a schema.

766
00:41:15,400 --> 00:41:18,280
And then also in exercise, we try

767
00:41:18,280 --> 00:41:19,960
to put the data in it as well.

768
00:41:19,960 --> 00:41:23,520
So it'll be nice.

769
00:41:23,520 --> 00:41:26,080
So don't worry.

770
00:41:26,080 --> 00:41:27,720
I know that there's a lot of information.

771
00:41:27,720 --> 00:41:30,320
It may be your first time thinking that way, the data,

772
00:41:30,320 --> 00:41:33,760
but we'll do it step by step and slowly.

773
00:41:33,760 --> 00:41:37,080
So for example, I hope it's clear enough.

774
00:41:37,080 --> 00:41:40,480
Otherwise, you can refer to your notes.

775
00:41:40,480 --> 00:41:43,840
That I have made up this is a small company.

776
00:41:44,000 --> 00:41:46,320
It's a small startup company, only four people working there

777
00:41:46,320 --> 00:41:48,160
at the moment.

778
00:41:48,160 --> 00:41:49,000
So it's a phone book.

779
00:41:49,000 --> 00:41:50,200
It's a phone book database.

780
00:41:50,200 --> 00:41:53,800
So I've made it very, very simple.

781
00:41:53,800 --> 00:41:56,720
All this data are fabricated and generated randomly.

782
00:41:56,720 --> 00:41:59,160
So don't ask me why I have all these names.

783
00:41:59,160 --> 00:42:03,440
They are just generated, so I don't even know.

784
00:42:03,440 --> 00:42:05,320
So there are four employees, and then they

785
00:42:05,320 --> 00:42:08,560
will have the name, the title, and then which team they

786
00:42:08,560 --> 00:42:09,800
belong to, and the manager.

787
00:42:10,320 --> 00:42:15,360
This table is describing the whole company structure.

788
00:42:15,360 --> 00:42:17,520
But there's no personal information in there

789
00:42:17,520 --> 00:42:18,840
because they are sensitive.

790
00:42:18,840 --> 00:42:23,040
We only allow, let's say, certain people to access it.

791
00:42:23,040 --> 00:42:25,240
So we store it separately.

792
00:42:25,240 --> 00:42:27,760
This is another spreadsheet or database

793
00:42:27,760 --> 00:42:32,000
or whatever that store the contact details of the employee.

794
00:42:32,000 --> 00:42:36,240
So they have the ID, because we need to link them back together.

795
00:42:36,240 --> 00:42:38,920
Joins, we love joins.

796
00:42:38,920 --> 00:42:42,600
And context numbers, and then home address, and then

797
00:42:42,600 --> 00:42:44,000
postcode and stuff.

798
00:42:44,000 --> 00:42:46,680
So this is a relational database.

799
00:42:46,680 --> 00:42:48,480
And there's two tables.

800
00:42:48,480 --> 00:42:52,480
You can imagine they are just two tables in your database.

801
00:42:52,480 --> 00:42:55,640
And they have the primary key, which is the employee ID.

802
00:42:55,640 --> 00:42:56,520
They should be unique.

803
00:43:00,040 --> 00:43:03,040
So let's start modeling.

804
00:43:03,040 --> 00:43:04,640
So what we'll do now, we will try

805
00:43:04,640 --> 00:43:07,400
to design the schema together first.

806
00:43:07,400 --> 00:43:11,280
And then later, when we code, then we

807
00:43:11,280 --> 00:43:13,880
would put that really into practice.

808
00:43:13,880 --> 00:43:16,320
But to make things simple, we would just

809
00:43:16,320 --> 00:43:18,640
decide on some design first.

810
00:43:18,640 --> 00:43:21,480
So documents.

811
00:43:21,480 --> 00:43:23,960
So what would be our documents in this case?

812
00:43:23,960 --> 00:43:32,880
So what would be the main things that has an ID in our graph?

813
00:43:32,880 --> 00:43:35,240
Anybody want to try?

814
00:43:35,240 --> 00:43:38,160
I know you have the slides, but yeah.

815
00:43:38,160 --> 00:43:43,080
So that would be, obviously, employee.

816
00:43:43,080 --> 00:43:43,880
Yes, I heard it.

817
00:43:43,880 --> 00:43:45,560
I heard it.

818
00:43:45,560 --> 00:43:47,080
So employee would have an ID.

819
00:43:47,080 --> 00:43:50,920
So naturally, there would be objects or documents

820
00:43:50,920 --> 00:43:52,680
that has an ID.

821
00:43:52,680 --> 00:43:54,320
So OK, good, good.

822
00:43:54,320 --> 00:43:56,320
We have employees.

823
00:43:56,320 --> 00:44:00,480
So now we have to populate the information about them.

824
00:44:00,480 --> 00:44:01,760
So they will have properties.

825
00:44:01,760 --> 00:44:05,160
So what properties do we want to have?

826
00:44:05,240 --> 00:44:07,160
So of course, they'll have a name.

827
00:44:07,160 --> 00:44:10,040
And then they will have their title and then a team.

828
00:44:10,040 --> 00:44:12,360
So oh, team, we only have two teams right now.

829
00:44:12,360 --> 00:44:14,440
So maybe make it an enum.

830
00:44:14,440 --> 00:44:16,000
Yeah, that makes sense.

831
00:44:16,000 --> 00:44:17,160
And oh, they have a manager.

832
00:44:17,160 --> 00:44:18,880
And then now we have object properties.

833
00:44:18,880 --> 00:44:20,880
I can link employees together.

834
00:44:20,880 --> 00:44:21,920
Yay.

835
00:44:21,920 --> 00:44:25,960
So we have, wow, all these cases.

836
00:44:25,960 --> 00:44:28,320
And then to make it more tidy, we

837
00:44:28,320 --> 00:44:32,520
can get all the address or the contact detail in one thing.

838
00:44:32,520 --> 00:44:34,080
We can have the address.

839
00:44:34,080 --> 00:44:37,000
Even break it smaller, we can have the town.

840
00:44:37,000 --> 00:44:38,520
So this is still pretty British.

841
00:44:41,120 --> 00:44:45,440
The postcode is also British, I know, because I live in the UK.

842
00:44:45,440 --> 00:44:49,160
So you have, let's say, the street number and street name,

843
00:44:49,160 --> 00:44:51,000
the town, and the postcode.

844
00:44:51,000 --> 00:44:55,040
So we can tidy them up into one sub-document object.

845
00:44:55,040 --> 00:44:56,920
It's address.

846
00:44:56,920 --> 00:44:59,360
So yes, let's work it this way.

847
00:44:59,360 --> 00:45:03,000
So this is the summary of what we would do.

848
00:45:03,000 --> 00:45:05,920
So you can see the thinking process behind it.

849
00:45:05,920 --> 00:45:09,000
So first you design on what will be the object,

850
00:45:09,000 --> 00:45:11,560
and then what would be the property.

851
00:45:11,560 --> 00:45:13,880
Sometimes it helps to gather some property together

852
00:45:13,880 --> 00:45:16,280
into some sub-documents.

853
00:45:16,280 --> 00:45:18,160
How we do it.

854
00:45:18,160 --> 00:45:19,440
So name, just a string.

855
00:45:19,440 --> 00:45:21,160
Simple title, just a string.

856
00:45:21,160 --> 00:45:22,240
Simple name.

857
00:45:22,240 --> 00:45:23,760
You can also try to break it down

858
00:45:23,760 --> 00:45:26,280
into first name, second name, whatever.

859
00:45:26,280 --> 00:45:29,360
But because name is a very tricky thing,

860
00:45:29,360 --> 00:45:31,760
if you have seen my tweet or something about name.

861
00:45:31,760 --> 00:45:36,040
So let's not make it complicated and just have name.

862
00:45:36,040 --> 00:45:39,880
And then team, it would be enum, so just two team right now.

863
00:45:39,880 --> 00:45:42,880
Managers, there will be object property.

864
00:45:42,880 --> 00:45:47,520
And then contact number, little type.

865
00:45:47,520 --> 00:45:51,040
So just, I will start a string because we have

866
00:45:51,040 --> 00:45:54,280
the crazy bracket there, so just a string.

867
00:45:54,280 --> 00:45:56,560
And then home address, we make that nice

868
00:45:56,560 --> 00:45:59,920
into an address object, or address sub-document.

869
00:45:59,920 --> 00:46:02,720
And then postcode, I'll put that into address as well.

870
00:46:02,720 --> 00:46:07,120
So, yeah, employee ID.

871
00:46:07,120 --> 00:46:09,600
So okay, here's the caveat.

872
00:46:09,600 --> 00:46:11,760
I think I've changed my mind a little bit here

873
00:46:11,760 --> 00:46:13,600
when I designed the exercise.

874
00:46:14,560 --> 00:46:17,760
So actually it's not necessarily to give them the ID,

875
00:46:17,760 --> 00:46:20,000
like 01, 02, all those stuff.

876
00:46:21,000 --> 00:46:26,000
Because if you put a document into Terminus DB,

877
00:46:26,640 --> 00:46:28,480
Terminus DB will say, oh, you haven't given ID

878
00:46:28,480 --> 00:46:30,280
to the document, I'll give one for you.

879
00:46:30,280 --> 00:46:33,720
So just randomly create it, or you can actually tell

880
00:46:33,720 --> 00:46:36,000
Terminus DB how to create an ID for it.

881
00:46:36,000 --> 00:46:39,160
But I think in the exercise, I want to make things

882
00:46:39,160 --> 00:46:42,360
more simple, I just create an ID for them

883
00:46:42,360 --> 00:46:43,560
to make things easier.

884
00:46:44,680 --> 00:46:46,640
But it's not necessarily.

885
00:46:47,840 --> 00:46:50,840
So I won't spend too much time into ID because

886
00:46:50,840 --> 00:46:54,840
it could be a lot of other sidetracks and stuff.

887
00:46:54,840 --> 00:46:56,960
So not going to sidetrack myself too much.

888
00:46:57,160 --> 00:46:59,000
So, yes.

889
00:47:29,080 --> 00:47:31,400
So I can insert the first person twice, right?

890
00:47:31,400 --> 00:47:34,040
So how can I make sure that is unique?

891
00:47:34,040 --> 00:47:38,040
So what happened is that in Terminus DB,

892
00:47:38,040 --> 00:47:41,360
so I just said that, oh, if you insert a document,

893
00:47:41,360 --> 00:47:43,080
it will just generate an ID for you.

894
00:47:43,080 --> 00:47:46,120
So if you insert the same document twice without an ID,

895
00:47:47,640 --> 00:47:50,520
so I'm talking about when you're actually coding

896
00:47:50,520 --> 00:47:53,240
and do the stuff that we are doing later,

897
00:47:53,240 --> 00:47:55,000
then it will just treat as two things.

898
00:47:55,000 --> 00:47:58,160
If you don't give it a unique ID, then you just,

899
00:47:58,160 --> 00:48:00,880
oh, you have inserted the same set of things twice,

900
00:48:00,880 --> 00:48:03,320
so I'll just treat them as two separate things.

901
00:48:03,320 --> 00:48:05,440
So there will be two person with the same name,

902
00:48:05,440 --> 00:48:07,120
same title, same credential and stuff,

903
00:48:07,120 --> 00:48:10,280
which may not be something that you want.

904
00:48:10,280 --> 00:48:13,280
But if you give them an ID, give them a unique ID,

905
00:48:13,280 --> 00:48:17,920
for example, let's say I hard-coded as 0010203,

906
00:48:17,920 --> 00:48:20,120
they would just be like a relation database,

907
00:48:20,120 --> 00:48:21,520
the primary key.

908
00:48:21,520 --> 00:48:25,120
If you insert the same ID twice,

909
00:48:25,120 --> 00:48:26,800
then there will be an error.

910
00:48:26,800 --> 00:48:29,240
You have to tell TerminusDB that, oh, I'm repasing it

911
00:48:29,240 --> 00:48:31,920
or I'm updating it, then it will update it.

912
00:48:31,920 --> 00:48:33,480
Otherwise, it will be like, oh, you can't insert

913
00:48:33,480 --> 00:48:35,760
the same things with the same ID twice.

914
00:48:37,720 --> 00:48:40,120
So in TerminusDB, you can also say, oh,

915
00:48:40,120 --> 00:48:43,360
I don't wanna hard-code it, I don't want to make it random,

916
00:48:43,360 --> 00:48:46,720
you can find a middle ground of, oh, can I use the name

917
00:48:46,720 --> 00:48:49,880
as the unique identifier, so generate an ID using the name,

918
00:48:49,880 --> 00:48:50,880
something like that.

919
00:48:53,440 --> 00:48:54,280
Exactly.

920
00:48:57,440 --> 00:49:00,560
Yes, you have to create a unique identifier.

921
00:49:00,560 --> 00:49:05,120
So yeah, if you don't specify it, TerminusDB

922
00:49:05,120 --> 00:49:07,000
will just generate one randomly for you,

923
00:49:07,000 --> 00:49:09,600
and it will ensure that it will be unique.

924
00:49:09,600 --> 00:49:12,360
But for example, you're migrating your database,

925
00:49:12,360 --> 00:49:13,960
you need to find what is the key,

926
00:49:13,960 --> 00:49:15,840
what is the unique identifier,

927
00:49:15,840 --> 00:49:17,960
and then use that as the ID.

928
00:49:17,960 --> 00:49:22,520
So yeah, so that's why you will see it when we code.

929
00:49:22,520 --> 00:49:23,360
Okay.

930
00:49:26,800 --> 00:49:27,640
So,

931
00:49:34,600 --> 00:49:35,440
yes, you can.

932
00:49:35,440 --> 00:49:40,320
So I don't wanna drive into detail, but actually, yes.

933
00:49:40,320 --> 00:49:42,080
You can have, so there are different ways

934
00:49:42,080 --> 00:49:43,640
of how you can generate an ID.

935
00:49:43,640 --> 00:49:46,240
So I've mentioned two, one is hard-coding it,

936
00:49:46,240 --> 00:49:48,200
every object you give it an ID.

937
00:49:48,200 --> 00:49:51,200
The other way is randomly, but there are also other ways,

938
00:49:51,200 --> 00:49:53,200
like this one that's called,

939
00:49:56,800 --> 00:49:57,640
yeah.

940
00:50:05,960 --> 00:50:06,800
Yeah.

941
00:50:13,040 --> 00:50:13,880
Yeah.

942
00:50:15,320 --> 00:50:16,160
Yeah.

943
00:50:16,160 --> 00:50:18,000
So, wait a second.

944
00:50:18,000 --> 00:50:18,840
Let me answer that question.

945
00:50:18,840 --> 00:50:20,120
So you can combine different things.

946
00:50:20,120 --> 00:50:21,920
So there's literal things that you could have,

947
00:50:21,920 --> 00:50:23,840
not just one field, not just the name.

948
00:50:23,840 --> 00:50:26,560
Let's say you need the name and the title to be unique.

949
00:50:26,560 --> 00:50:28,360
So you can be like name and title,

950
00:50:28,360 --> 00:50:29,680
and it would generate a unique ID

951
00:50:29,680 --> 00:50:31,400
based on the name plus the title, right?

952
00:50:31,400 --> 00:50:32,440
You can have to combine.

953
00:50:32,440 --> 00:50:37,440
So for the second question, that you need to have,

954
00:50:38,080 --> 00:50:41,440
so if you insert the same document with the same ID,

955
00:50:41,440 --> 00:50:44,160
you have an error if you use insert.

956
00:50:44,160 --> 00:50:46,360
So what if I want to change things

957
00:50:46,360 --> 00:50:47,920
for something that I already know,

958
00:50:47,920 --> 00:50:50,120
that I already inserted before, I wanna change it?

959
00:50:50,120 --> 00:50:51,840
Then you have to replace it.

960
00:50:51,840 --> 00:50:53,480
You have to use replace.

961
00:50:53,480 --> 00:50:56,640
So you can't mix up the two operation.

962
00:50:56,640 --> 00:51:00,680
You can, in the Python client, I added some function

963
00:51:00,680 --> 00:51:03,120
that it would check whether it's already exist.

964
00:51:03,120 --> 00:51:04,480
If it does, then it will replace it.

965
00:51:04,480 --> 00:51:05,800
If not, then it will just insert it.

966
00:51:05,800 --> 00:51:08,640
But in the raw design,

967
00:51:08,640 --> 00:51:11,120
you can't mix up the insert and the replace.

968
00:51:11,120 --> 00:51:12,520
So if you insert the same thing twice,

969
00:51:12,520 --> 00:51:13,400
you'll have an error.

970
00:51:13,400 --> 00:51:16,200
If you want to update something, you have to use replace.

971
00:51:17,160 --> 00:51:18,640
Yeah.

972
00:51:18,640 --> 00:51:19,480
Okay.

973
00:51:20,440 --> 00:51:25,440
So, yeah, I've talked a lot about how Terminus DB work.

974
00:51:26,440 --> 00:51:29,080
So Terminus DB, again, is open source.

975
00:51:29,080 --> 00:51:33,240
So everybody can get it for free on Docker.

976
00:51:33,240 --> 00:51:34,200
It will be open source forever.

977
00:51:34,200 --> 00:51:36,600
That's what my boss told me.

978
00:51:36,600 --> 00:51:39,120
The founder said that it will be open source forever.

979
00:51:39,120 --> 00:51:44,000
You can always just download it and use it for free,

980
00:51:44,000 --> 00:51:45,440
or build from source if someone,

981
00:51:46,320 --> 00:51:48,560
if you are very, you know,

982
00:51:48,560 --> 00:51:50,960
if you're tech-savvy enough to build from source,

983
00:51:50,960 --> 00:51:53,720
you can do that, source code, open.

984
00:51:53,720 --> 00:51:54,560
Okay.

985
00:51:54,560 --> 00:51:58,520
So it will have some feature that you may like.

986
00:51:58,520 --> 00:52:00,160
You know, like revision control.

987
00:52:00,160 --> 00:52:02,000
If you like it, you may like it.

988
00:52:02,960 --> 00:52:06,280
Also, we tried to create a cloud version

989
00:52:06,280 --> 00:52:08,920
which you can easily collaborate

990
00:52:08,920 --> 00:52:12,200
to share a database within two people, like GitHub,

991
00:52:12,200 --> 00:52:15,400
that can share a Red Bull between people.

992
00:52:16,360 --> 00:52:19,800
You can see whether they can merge something.

993
00:52:19,800 --> 00:52:24,280
You know, there's a lot of kind of roles

994
00:52:24,280 --> 00:52:28,440
that you can give them, what access level they have.

995
00:52:28,440 --> 00:52:32,840
So that's the idea of what we want to achieve

996
00:52:32,840 --> 00:52:36,520
for original control and the collaboration.

997
00:52:37,800 --> 00:52:40,120
So open source, I think I don't have to explain it.

998
00:52:40,120 --> 00:52:41,920
You know, we all love open source.

999
00:52:41,920 --> 00:52:43,320
We know what is open source.

1000
00:52:43,320 --> 00:52:45,960
It means that the source code is up in open,

1001
00:52:45,960 --> 00:52:47,320
is for the community.

1002
00:52:47,320 --> 00:52:50,000
The license is Apoche2, I think.

1003
00:52:50,000 --> 00:52:52,800
So it doesn't mean that you can do it wherever.

1004
00:52:52,800 --> 00:52:53,920
You have to follow the license.

1005
00:52:53,920 --> 00:52:58,000
But generally, it's a very common open source license.

1006
00:52:58,000 --> 00:52:59,400
So it's not saying different.

1007
00:53:06,520 --> 00:53:10,360
Yes, so Neo4j works a little bit differently

1008
00:53:10,360 --> 00:53:11,200
from what we are.

1009
00:53:11,200 --> 00:53:15,520
So I don't have a benchmark like to like comparison.

1010
00:53:15,520 --> 00:53:17,200
Maybe my colleague has done it in the past,

1011
00:53:17,200 --> 00:53:20,680
but we have improved it over the past few months.

1012
00:53:20,680 --> 00:53:23,400
So the answer is I don't have a good answer for that.

1013
00:53:26,040 --> 00:53:28,720
Also graph database, like you just mentioned,

1014
00:53:28,720 --> 00:53:30,600
there are other graph database in the market,

1015
00:53:30,600 --> 00:53:34,440
Neo4j and stuff, but we just work slightly differently.

1016
00:53:34,440 --> 00:53:35,640
You know, choose your own adventure.

1017
00:53:35,640 --> 00:53:38,560
I'm not trying to say that you must use TerminusDB,

1018
00:53:38,560 --> 00:53:41,000
but there are a few things that we are different

1019
00:53:41,800 --> 00:53:42,640
from Neo4j.

1020
00:53:42,640 --> 00:53:45,080
Let's say Neo4j, the query language is Cyper,

1021
00:53:45,080 --> 00:53:47,640
so it's a text-based query language.

1022
00:53:47,640 --> 00:53:50,920
We use JSON-LD, so it's a JSON format.

1023
00:53:50,920 --> 00:53:53,000
So we think that JSON is better

1024
00:53:53,000 --> 00:53:55,400
because you can't inject a tag it.

1025
00:53:55,400 --> 00:53:57,720
So that's one thing.

1026
00:53:57,720 --> 00:53:59,800
So also we try to do revision control.

1027
00:54:00,680 --> 00:54:04,120
I know that MongoDB can't do revision control,

1028
00:54:04,120 --> 00:54:08,360
so that's why we try to have some way

1029
00:54:08,360 --> 00:54:12,160
that you can actually do this comparison

1030
00:54:12,160 --> 00:54:15,880
with MongoDB as well.

1031
00:54:17,120 --> 00:54:20,320
So we're just trying to build more feature

1032
00:54:20,320 --> 00:54:21,640
for people to use.

1033
00:54:21,640 --> 00:54:23,840
If you think a feature is very important for you,

1034
00:54:23,840 --> 00:54:26,160
talk to me and we'll see how we can help.

1035
00:54:27,720 --> 00:54:30,720
So other things, you know, we have this document API,

1036
00:54:30,720 --> 00:54:35,720
so we found that after a few years

1037
00:54:36,240 --> 00:54:38,400
of development and experimentation,

1038
00:54:39,320 --> 00:54:42,360
inserting data as triple is quite tricky,

1039
00:54:42,360 --> 00:54:44,480
especially when you have a schema.

1040
00:54:44,480 --> 00:54:47,120
So we built this document API recall,

1041
00:54:47,120 --> 00:54:49,640
so it's kind of like you can build a schema

1042
00:54:49,640 --> 00:54:53,200
more in an object-oriented programming style

1043
00:54:53,200 --> 00:54:55,400
instead of writing triples,

1044
00:54:55,400 --> 00:54:58,440
but we also try a little bit of triple things at the end,

1045
00:54:59,320 --> 00:55:03,480
but that will be a query, not as inserting data.

1046
00:55:03,480 --> 00:55:07,680
So there's Python client, proudly maintained by me.

1047
00:55:07,680 --> 00:55:11,080
So if you find any bugs, you can complain to me.

1048
00:55:11,080 --> 00:55:14,600
So we used to have these graph representation in D3,

1049
00:55:14,600 --> 00:55:16,920
it's very nice, but we have put it down for a bit,

1050
00:55:16,920 --> 00:55:19,080
and then hopefully we're coming back up again,

1051
00:55:19,080 --> 00:55:20,800
so I won't talk too much about it

1052
00:55:20,800 --> 00:55:22,400
because it doesn't exist anymore.

1053
00:55:23,640 --> 00:55:26,880
So TerminusDB is on Docker Hub.

1054
00:55:26,880 --> 00:55:30,000
I hope that you can get the image

1055
00:55:30,000 --> 00:55:33,560
or just have one version of TerminusDB,

1056
00:55:33,560 --> 00:55:36,760
the latest version of TerminusDB working in your computer.

1057
00:55:36,760 --> 00:55:39,400
If you don't, the workaround will be signing up

1058
00:55:39,400 --> 00:55:42,600
on TerminusX in terminusdb.com.

1059
00:55:42,600 --> 00:55:43,640
So that's the cloud version.

1060
00:55:43,640 --> 00:55:44,920
Right now we are not charging.

1061
00:55:44,920 --> 00:55:48,080
We are still letting people to try and test it.

1062
00:55:49,280 --> 00:55:52,600
So I can't say what the future will be like,

1063
00:55:52,600 --> 00:55:54,800
but right now it's free.

1064
00:55:54,800 --> 00:55:57,280
That's what I can tell you.

1065
00:55:57,280 --> 00:55:59,920
So there are two clients that are working.

1066
00:55:59,920 --> 00:56:02,160
Platform client we'll be using today, JavaScript client.

1067
00:56:02,160 --> 00:56:05,360
If you are building web app, you may be interested in that,

1068
00:56:05,360 --> 00:56:07,880
but that will be another time.

1069
00:56:07,880 --> 00:56:10,600
So we're back to here.

1070
00:56:10,600 --> 00:56:13,080
I'll let everybody to take a break.

1071
00:56:13,080 --> 00:56:15,160
I'm so bad with time.

1072
00:56:15,160 --> 00:56:17,880
Let's say we take, how much time do you think we need?

1073
00:56:17,880 --> 00:56:19,520
I don't think we need 20 minutes, right?

1074
00:56:19,520 --> 00:56:24,520
Let's say 15 minutes max, then we'll come back,

1075
00:56:25,280 --> 00:56:27,840
and then we will try to do some coding coding stuff.

1076
00:56:27,840 --> 00:56:32,480
If you are struggling with getting either the Python client

1077
00:56:32,480 --> 00:56:36,120
or the TerminusDB running, then let me know.

1078
00:56:36,120 --> 00:56:37,320
I'll try to help.

1079
00:56:37,320 --> 00:56:38,200
Any other questions?

1080
00:56:38,200 --> 00:56:39,040
Also let me know.

1081
00:56:39,040 --> 00:56:40,680
I'll try to help.

1082
00:56:40,680 --> 00:56:45,200
Otherwise, I think, let's say now it's 4 T past 2

1083
00:56:45,200 --> 00:56:46,520
or 20 to 3.

1084
00:56:47,600 --> 00:56:50,400
Let's come back at 5 to 3 p.m.

1085
00:56:50,800 --> 00:56:51,640
Okay.

1086
00:56:53,640 --> 00:56:54,480
Okay, hello.

1087
00:56:54,480 --> 00:56:55,320
Okay.

1088
00:56:55,320 --> 00:56:58,360
It's a bit small to see and difficult to see, isn't it?

1089
00:56:58,360 --> 00:56:59,360
Sorry about that.

1090
00:57:00,360 --> 00:57:02,640
Just shout if you think this too small.

1091
00:57:02,640 --> 00:57:06,320
And like, you know, things like that.

1092
00:57:07,160 --> 00:57:08,760
Because I need to find a right balance

1093
00:57:08,760 --> 00:57:10,080
that I can see what I'm doing,

1094
00:57:10,080 --> 00:57:12,200
but at the same time you can see what I'm doing.

1095
00:57:12,200 --> 00:57:13,520
So let's put this away.

1096
00:57:13,520 --> 00:57:16,720
This is not what I'm doing right now, I think.

1097
00:57:16,720 --> 00:57:19,560
I may need some help there, but that's later.

1098
00:57:19,640 --> 00:57:22,880
Okay, so let's zoom this in as well.

1099
00:57:29,040 --> 00:57:29,880
Awful.

1100
00:57:31,320 --> 00:57:33,400
Okay, we'll adjust it when we're using that.

1101
00:57:33,400 --> 00:57:35,720
So let's come here.

1102
00:57:35,720 --> 00:57:40,040
If you go to the tutorials, devices,

1103
00:57:41,440 --> 00:57:43,320
I would just see.

1104
00:57:43,320 --> 00:57:45,400
Yeah, so I hope everybody's fine.

1105
00:57:45,400 --> 00:57:48,040
I know some of you have some issues with that.

1106
00:57:48,040 --> 00:57:51,560
I'm so sorry if you really can't get it set up today.

1107
00:57:51,560 --> 00:57:54,920
I'm so sorry, but all the information is given to you.

1108
00:57:54,920 --> 00:57:57,360
So if you want to try it at home, feel free to.

1109
00:57:57,360 --> 00:58:01,200
And if you have questions later, you can also contact me.

1110
00:58:01,200 --> 00:58:02,200
Happy to answer.

1111
00:58:04,480 --> 00:58:08,280
So I hope you also have the Python client installed.

1112
00:58:09,680 --> 00:58:11,640
And I'm using poetry as well.

1113
00:58:11,640 --> 00:58:14,720
So also advertising for poetry.

1114
00:58:14,720 --> 00:58:16,680
I really like that tool.

1115
00:58:16,680 --> 00:58:18,000
I recently converted to it.

1116
00:58:18,000 --> 00:58:22,840
I was using the Python virtual anthem for it,

1117
00:58:22,840 --> 00:58:27,000
but now I fall in love with poetry because it's nice.

1118
00:58:28,000 --> 00:58:30,920
So I hope everybody's okay with the setup.

1119
00:58:30,920 --> 00:58:34,800
So like I said, if you really struggle or something,

1120
00:58:34,800 --> 00:58:36,960
everything is hosted online.

1121
00:58:36,960 --> 00:58:41,080
So you can catch up or follow or do the lesson

1122
00:58:41,080 --> 00:58:44,680
that I didn't cover today by yourself at home as well.

1123
00:58:44,680 --> 00:58:45,840
I'm happy to answer questions.

1124
00:58:45,840 --> 00:58:48,360
Just give me a shout online or something.

1125
00:58:48,360 --> 00:58:51,320
Or you can join the discord and talk to the team.

1126
00:58:51,320 --> 00:58:52,760
Sometimes they have better answers than me

1127
00:58:52,760 --> 00:58:55,960
because they know inside of the database.

1128
00:58:55,960 --> 00:59:00,040
So we are going to use this getting started tutorial.

1129
00:59:00,040 --> 00:59:02,840
So we have developed a lot of tutorials.

1130
00:59:02,840 --> 00:59:04,840
Not all of them are my work.

1131
00:59:04,840 --> 00:59:05,920
Some of them are my colleagues work,

1132
00:59:05,920 --> 00:59:08,600
but we're focusing on the Python client

1133
00:59:08,600 --> 00:59:11,240
getting started tutorial there.

1134
00:59:11,240 --> 00:59:12,760
It should be working the link.

1135
00:59:12,760 --> 00:59:14,920
If you click on it, it should go to this page.

1136
00:59:16,080 --> 00:59:20,480
And then we are focusing on lesson one, three and seven.

1137
00:59:20,480 --> 00:59:22,680
There are more than that in this.

1138
00:59:22,680 --> 00:59:26,120
Again, feel free to try everything at home,

1139
00:59:26,120 --> 00:59:29,520
but I don't think we have time to go through seven lessons.

1140
00:59:29,520 --> 00:59:31,480
We're focusing on one, three and seven.

1141
00:59:31,480 --> 00:59:35,120
Also one thing before we start,

1142
00:59:35,120 --> 00:59:37,600
all the codes are actually available in the Red Bull,

1143
00:59:37,600 --> 00:59:40,360
but you don't have to clone the whole thing.

1144
00:59:40,360 --> 00:59:44,840
All you need is the two CSV, these two,

1145
00:59:44,840 --> 00:59:47,160
the contact and employee CSV.

1146
00:59:47,160 --> 00:59:48,000
But they're very small.

1147
00:59:48,000 --> 00:59:49,360
Even though you can't clone it,

1148
00:59:49,360 --> 00:59:52,760
you can just copy and then paste it in the text file

1149
00:59:52,760 --> 00:59:55,840
and rename it the same thing as I did here.

1150
00:59:57,360 --> 00:59:58,360
That's all you need.

1151
00:59:59,400 --> 01:00:01,800
And then we'll do things step by step.

1152
01:00:01,800 --> 01:00:04,680
Even though the code is available,

1153
01:00:04,680 --> 01:00:06,320
I would recommend you try it yourself

1154
01:00:06,320 --> 01:00:08,400
or do it differentially.

1155
01:00:08,400 --> 01:00:11,560
Because it feels better if you make it work by yourself,

1156
01:00:11,560 --> 01:00:13,440
rather than copy and pasting.

1157
01:00:13,440 --> 01:00:17,000
The code here is just for me to cheat when I'm struggling.

1158
01:00:17,000 --> 01:00:18,880
Because you know live coding always have accident

1159
01:00:18,880 --> 01:00:20,200
and it doesn't work sometimes,

1160
01:00:20,200 --> 01:00:23,520
then I can cheat by using the code that I've written before.

1161
01:00:23,520 --> 01:00:25,480
But I highly recommend you to not copy and paste

1162
01:00:25,480 --> 01:00:27,600
and try to write your own code.

1163
01:00:27,600 --> 01:00:28,600
If you're really struggling,

1164
01:00:28,600 --> 01:00:31,760
yes of course you can do what I did, copy and paste.

1165
01:00:31,760 --> 01:00:33,400
But yeah.

1166
01:00:34,480 --> 01:00:36,320
So yeah, let's look at it.

1167
01:00:36,320 --> 01:00:37,840
So first thing.

1168
01:00:39,480 --> 01:00:42,440
So again, what we gotta do here

1169
01:00:42,440 --> 01:00:46,120
for lesson one, three and seven is to create a schema.

1170
01:00:46,120 --> 01:00:48,920
Like we talked about in the slide.

1171
01:00:48,920 --> 01:00:50,560
So we'll actually go back to the slides

1172
01:00:50,560 --> 01:00:51,480
when we create a schema.

1173
01:00:51,480 --> 01:00:54,480
We'll use what we have designed as the blueprint.

1174
01:00:54,480 --> 01:00:56,960
So we'll follow that and how to convert it into code

1175
01:00:56,960 --> 01:00:58,200
and make it work.

1176
01:00:58,200 --> 01:00:59,320
We'll do that.

1177
01:00:59,320 --> 01:01:03,440
And then we would also try to insert data

1178
01:01:03,440 --> 01:01:07,840
how you can have the CSV and do some data handling.

1179
01:01:08,680 --> 01:01:12,400
Yeah, to make it into the database

1180
01:01:12,400 --> 01:01:16,600
and see how Python client make everything work as an object.

1181
01:01:18,200 --> 01:01:20,440
Yeah, so that's what lesson three.

1182
01:01:20,440 --> 01:01:22,800
And then lesson seven is actually the fun bit

1183
01:01:22,800 --> 01:01:26,040
that we would try to make some query using triples.

1184
01:01:26,040 --> 01:01:27,560
So yeah, triple.

1185
01:01:27,560 --> 01:01:28,480
We learned triple today.

1186
01:01:28,480 --> 01:01:29,320
We want to use it.

1187
01:01:29,320 --> 01:01:30,920
So that's why we are doing that.

1188
01:01:30,920 --> 01:01:35,320
So right now, so go to start a new.

1189
01:01:35,320 --> 01:01:39,840
So you can start it in a new directory.

1190
01:01:39,840 --> 01:01:41,320
So you will have things like that.

1191
01:01:41,320 --> 01:01:43,360
Oh, sorry about everything.

1192
01:01:43,360 --> 01:01:44,200
I'm here.

1193
01:01:44,200 --> 01:01:45,120
I was testing it before.

1194
01:01:45,120 --> 01:01:47,560
So that's why I have so many things.

1195
01:01:47,560 --> 01:01:48,640
It's still a bit small.

1196
01:01:48,640 --> 01:01:50,000
Why is it so small?

1197
01:01:50,000 --> 01:01:50,820
Please.

1198
01:01:51,960 --> 01:01:53,040
Is it big enough?

1199
01:01:53,040 --> 01:01:53,880
Was it not good?

1200
01:01:54,760 --> 01:01:55,600
I don't know.

1201
01:01:56,480 --> 01:01:57,320
Also it's dark mode.

1202
01:01:57,320 --> 01:02:00,880
So give me a shout if it's too small for you.

1203
01:02:00,880 --> 01:02:02,720
For those at the back, you may struggle a little bit,

1204
01:02:02,720 --> 01:02:07,000
but let me know if you want me to make it bigger.

1205
01:02:07,000 --> 01:02:08,640
So I'm using poetry.

1206
01:02:08,640 --> 01:02:10,040
So this is my poetry shelf.

1207
01:02:10,040 --> 01:02:11,400
So I have TerminusDB installed.

1208
01:02:11,400 --> 01:02:14,240
If I do a list, you'll see this bunch of things.

1209
01:02:15,360 --> 01:02:19,280
So what we have is TerminusDB here.

1210
01:02:19,280 --> 01:02:20,200
Who is it?

1211
01:02:20,200 --> 01:02:21,200
Yeah, TerminusDB client.

1212
01:02:21,200 --> 01:02:23,680
So I'm good to go, I think.

1213
01:02:23,680 --> 01:02:24,520
I have it.

1214
01:02:24,520 --> 01:02:25,340
Yes.

1215
01:02:25,340 --> 01:02:26,180
So yeah.

1216
01:02:26,180 --> 01:02:28,920
And then I'm also clearing again.

1217
01:02:28,920 --> 01:02:30,360
So I'm in a new directory.

1218
01:02:30,400 --> 01:02:33,720
So I have, well, it's not really new for me.

1219
01:02:33,720 --> 01:02:34,800
So I use poetry.

1220
01:02:34,800 --> 01:02:38,280
That's why I have the poetry log and the pyproject.toml.

1221
01:02:39,360 --> 01:02:42,400
So it doesn't really matter for the substance

1222
01:02:42,400 --> 01:02:45,920
in the pyproject.toml, but what is vendor?

1223
01:02:45,920 --> 01:02:46,840
I don't know what is vendor.

1224
01:02:46,840 --> 01:02:47,920
I don't know why it's there.

1225
01:02:47,920 --> 01:02:50,280
But anyway, I have the two CSVs there.

1226
01:02:50,280 --> 01:02:52,880
That is just the CSV I showed you before.

1227
01:02:52,880 --> 01:02:55,560
You can find that in the tutorial red poll.

1228
01:02:55,560 --> 01:02:56,860
So it's just this, right?

1229
01:02:58,080 --> 01:02:59,700
I have them.

1230
01:02:59,700 --> 01:03:01,060
But otherwise, I haven't done anything.

1231
01:03:01,060 --> 01:03:03,060
Imagine I haven't done anything else, right?

1232
01:03:03,060 --> 01:03:04,420
I just have poetry.

1233
01:03:04,420 --> 01:03:06,100
I got the thing installed.

1234
01:03:06,100 --> 01:03:07,740
I have just copied the CSV.

1235
01:03:07,740 --> 01:03:09,220
This is how I start.

1236
01:03:09,220 --> 01:03:12,780
So also, oh, one other thing.

1237
01:03:12,780 --> 01:03:17,780
I have my Docker running.

1238
01:03:18,060 --> 01:03:21,460
So if I do Docker, this is so small,

1239
01:03:21,460 --> 01:03:23,780
but this is not important, so I won't make it too big.

1240
01:03:23,780 --> 01:03:26,820
So Docker PS, it should show me that it's running.

1241
01:03:26,820 --> 01:03:28,420
Yeah, I have my container running.

1242
01:03:28,420 --> 01:03:29,780
So all good?

1243
01:03:31,380 --> 01:03:32,320
Right.

1244
01:03:32,320 --> 01:03:35,160
So I will demonstrate it with the local image.

1245
01:03:35,160 --> 01:03:36,820
So if, oh, sorry.

1246
01:03:38,500 --> 01:03:39,800
Zoom in a bit, yeah, sure.

1247
01:03:40,860 --> 01:03:41,860
Okay.

1248
01:03:41,860 --> 01:03:43,460
Is it better?

1249
01:03:43,460 --> 01:03:46,220
Yeah, I'll create as well, so it go back to the top.

1250
01:03:46,220 --> 01:03:50,400
So for, I'm using it locally, the Docker container.

1251
01:03:50,400 --> 01:03:52,340
If you're using Terminus X,

1252
01:03:52,340 --> 01:03:54,380
it will be a little bit different

1253
01:03:54,380 --> 01:03:56,420
when you connect to Terminus X.

1254
01:03:57,100 --> 01:04:02,100
I would also explain it, but I'm using the local one.

1255
01:04:03,540 --> 01:04:06,940
Okay, so if I start, we would have,

1256
01:04:06,940 --> 01:04:09,180
so when you install the Python client,

1257
01:04:09,180 --> 01:04:14,180
there is the Terminus db command should be,

1258
01:04:16,420 --> 01:04:18,300
typing with one hand is very difficult.

1259
01:04:18,300 --> 01:04:21,580
So the command will be available to you, Terminus db.

1260
01:04:21,580 --> 01:04:24,580
So I built it using click,

1261
01:04:24,580 --> 01:04:26,060
for those of you who are interested.

1262
01:04:26,700 --> 01:04:28,020
So there's a bunch of commands that you could do.

1263
01:04:28,020 --> 01:04:32,140
They kind of basically help you to work with your database.

1264
01:04:32,140 --> 01:04:33,580
But before that, you have to start project.

1265
01:04:33,580 --> 01:04:35,460
So you see there's a start project.

1266
01:04:35,460 --> 01:04:37,020
It's kind of similar to Django, right?

1267
01:04:37,020 --> 01:04:38,900
I got the sign from there.

1268
01:04:38,900 --> 01:04:41,780
But yeah, start project makes you kind of,

1269
01:04:41,780 --> 01:04:45,180
you have to set it up how, for this project,

1270
01:04:45,180 --> 01:04:48,460
it kind of connects to the database.

1271
01:04:48,460 --> 01:04:49,900
So that's why I start the project

1272
01:04:49,900 --> 01:04:51,380
and store the configuration there.

1273
01:04:51,380 --> 01:04:53,440
So if you do start project,

1274
01:04:56,820 --> 01:04:57,660
oop.

1275
01:04:59,780 --> 01:05:03,180
So I hope this is also complete, but I'm not so sure.

1276
01:05:03,180 --> 01:05:05,900
Okay, so if you just start project,

1277
01:05:05,900 --> 01:05:06,940
it will ask you a bunch of things.

1278
01:05:06,940 --> 01:05:09,900
So a project name, so I would,

1279
01:05:10,780 --> 01:05:13,900
you can do anything, but remember this name

1280
01:05:13,900 --> 01:05:15,340
because you would use it again

1281
01:05:15,340 --> 01:05:17,380
when you use it in the script to connect to the database.

1282
01:05:17,380 --> 01:05:20,260
So I would call it workshop, maybe.

1283
01:05:21,740 --> 01:05:25,100
Yes, and then okay, here is the,

1284
01:05:25,100 --> 01:05:27,940
when it got different if you're using Terminus X.

1285
01:05:27,940 --> 01:05:29,580
So if you're just using locally,

1286
01:05:29,580 --> 01:05:31,860
you can just press enter and that's it for you.

1287
01:05:31,860 --> 01:05:34,580
But for those of you who are using Terminus X,

1288
01:05:34,580 --> 01:05:37,860
let's see if I can demonstrate it with my Terminus X.

1289
01:05:37,860 --> 01:05:41,340
So, oop, sorry, it should be dashboard.

1290
01:05:42,460 --> 01:05:43,300
Yeah, oop.

1291
01:05:44,280 --> 01:05:45,940
I hope I have logged in before.

1292
01:05:47,180 --> 01:05:48,320
I don't know, I'm not so sure.

1293
01:05:48,320 --> 01:05:50,680
Oh, I haven't logged in, but I can just log in.

1294
01:05:51,580 --> 01:05:53,180
Logged in, yes.

1295
01:05:55,100 --> 01:05:58,780
Ah, right, it's very small, right?

1296
01:06:00,260 --> 01:06:01,660
So if you're using Terminus X,

1297
01:06:01,660 --> 01:06:04,380
oop, I have other things, don't worry about that.

1298
01:06:04,380 --> 01:06:06,740
Oops, then I should be in this one as well.

1299
01:06:06,740 --> 01:06:09,300
Okay, so I have other things, don't worry about that.

1300
01:06:09,300 --> 01:06:12,420
But what you can do is you will see something like that.

1301
01:06:12,420 --> 01:06:14,580
Not my bit warden, sorry about that.

1302
01:06:14,580 --> 01:06:15,860
So you'll see something like that, right,

1303
01:06:15,860 --> 01:06:17,220
if you're using Terminus X.

1304
01:06:17,220 --> 01:06:22,220
So you can go to your profile and then you will see the,

1305
01:06:23,020 --> 01:06:25,740
so you will see how you can connect to it.

1306
01:06:25,740 --> 01:06:30,740
So now, when you ask here, can you see the last line there?

1307
01:06:32,180 --> 01:06:35,100
Yeah, when you ask, oh, what's your endpoint location?

1308
01:06:35,100 --> 01:06:36,740
You just have to copy this one.

1309
01:06:37,820 --> 01:06:40,620
This is your endpoint location there.

1310
01:06:40,620 --> 01:06:44,020
I think we felt the team name, just until .com, right?

1311
01:06:44,020 --> 01:06:45,700
Just the domain there.

1312
01:06:45,700 --> 01:06:50,220
So clouds.terminusdb.com, and that's your endpoint location.

1313
01:06:50,220 --> 01:06:53,420
And then you would also ask other questions,

1314
01:06:53,420 --> 01:06:55,060
like what is team?

1315
01:06:55,060 --> 01:06:57,860
So when you ask about the team,

1316
01:06:57,860 --> 01:07:00,100
so the team will be the team you set up here.

1317
01:07:00,100 --> 01:07:02,340
So this will be your team, it will be different from yours,

1318
01:07:02,340 --> 01:07:05,580
but just look for the team and then put the team there.

1319
01:07:05,580 --> 01:07:08,060
And then also it will ask whether you want to set up

1320
01:07:08,060 --> 01:07:10,300
your API key, you can either set it up yourself

1321
01:07:10,300 --> 01:07:12,860
in your console like this, or other means.

1322
01:07:13,900 --> 01:07:16,740
I know someone just set it up with Python.

1323
01:07:16,740 --> 01:07:19,420
So you can say, oh no, I don't need to set it up.

1324
01:07:19,420 --> 01:07:22,100
Or you can just say yes and then set it up

1325
01:07:22,100 --> 01:07:24,460
by generating an API key and put it there.

1326
01:07:25,420 --> 01:07:30,420
So if you have any struggle using terminusx to connect,

1327
01:07:30,420 --> 01:07:33,780
then let me know, I'll try to troubleshoot where I go.

1328
01:07:34,780 --> 01:07:37,940
But for me, I use it locally, just enter.

1329
01:07:37,940 --> 01:07:39,100
Easiest way to do it.

1330
01:07:40,980 --> 01:07:45,980
Now, if you look at, so I use Atom, so sorry about that.

1331
01:07:46,260 --> 01:07:48,620
If you don't like Atom, I'm using Atom.

1332
01:07:49,140 --> 01:07:52,700
I don't care what you think about Atom, but I'm using it.

1333
01:07:52,700 --> 01:07:55,140
So you can use other things,

1334
01:07:55,140 --> 01:07:56,780
but I'm not saying you have to use Atom.

1335
01:07:56,780 --> 01:07:59,060
So in your project, you should now have

1336
01:07:59,060 --> 01:08:01,060
this convict.json file.

1337
01:08:01,060 --> 01:08:02,380
So you have the name of your database,

1338
01:08:02,380 --> 01:08:04,620
your endpoint and your team.

1339
01:08:04,620 --> 01:08:09,420
If you have, yeah, you have a different thing

1340
01:08:09,420 --> 01:08:12,580
if you're using the terminusx, the endpoint and the team.

1341
01:08:12,580 --> 01:08:14,940
I think it will also maybe also ask about your login

1342
01:08:14,940 --> 01:08:16,900
or something, just answer the questions

1343
01:08:16,940 --> 01:08:19,700
by grabbing the information you have on the dashboard.

1344
01:08:19,700 --> 01:08:21,780
So you have something similar to this.

1345
01:08:24,380 --> 01:08:25,900
Also you have a schema.

1346
01:08:25,900 --> 01:08:28,980
So this is, like the title said, this is an example.

1347
01:08:28,980 --> 01:08:31,060
This is not a schema that we're using today, right?

1348
01:08:31,060 --> 01:08:32,580
Just a bunch of other things.

1349
01:08:34,260 --> 01:08:36,300
But we'll start from here,

1350
01:08:36,300 --> 01:08:40,500
because it demonstrates how a schema should kind of look like.

1351
01:08:40,500 --> 01:08:45,020
So you'll see that we'll have to import the certain things

1352
01:08:45,020 --> 01:08:49,180
because all the objects are actually,

1353
01:08:50,980 --> 01:08:53,020
actually all the documents,

1354
01:08:53,020 --> 01:08:56,660
including the sub-documents, which is objects,

1355
01:08:56,660 --> 01:09:00,140
they are inherited from the document template.

1356
01:09:01,540 --> 01:09:06,540
And also all the enums are inherited from the enum templates.

1357
01:09:06,900 --> 01:09:08,660
So for the hash key and tag union,

1358
01:09:08,660 --> 01:09:10,540
we are not using them today, I think,

1359
01:09:10,540 --> 01:09:13,580
so we can just ignore them by deleting them.

1360
01:09:14,580 --> 01:09:16,020
So, yes, question.

1361
01:09:19,180 --> 01:09:22,180
Yeah, Wacol is, well, history of a Wacol.

1362
01:09:22,180 --> 01:09:24,780
So we decided this query language called Wacol,

1363
01:09:24,780 --> 01:09:27,540
which we'll try a little bit at lesson seven.

1364
01:09:28,380 --> 01:09:32,660
But it's just, it's a very silly naming mistake

1365
01:09:32,660 --> 01:09:34,460
that we made, we just called everything Wacol

1366
01:09:34,460 --> 01:09:36,380
at the beginning, so it's just like everything

1367
01:09:36,380 --> 01:09:38,700
start with a Wacol here.

1368
01:09:38,700 --> 01:09:42,020
But even though they are not related to the Wacol query,

1369
01:09:42,020 --> 01:09:45,700
but yeah, just a stupid name, sorry about that.

1370
01:09:47,260 --> 01:09:51,100
Yeah, so we have to type four characters.

1371
01:09:51,100 --> 01:09:53,620
Anyway, I wish I would rename it one day,

1372
01:09:53,620 --> 01:09:55,260
but it's still a work in progress.

1373
01:09:58,860 --> 01:10:00,620
So here you can see the example of how,

1374
01:10:00,620 --> 01:10:02,380
so I'll go through this example first

1375
01:10:02,380 --> 01:10:03,740
and then we'll build our own.

1376
01:10:03,740 --> 01:10:08,740
So you can see how we can declare a document class.

1377
01:10:08,900 --> 01:10:11,580
So this is not a actual document object

1378
01:10:11,620 --> 01:10:12,900
because we are building the schema.

1379
01:10:12,900 --> 01:10:16,180
The schema is kind of like, like I said before,

1380
01:10:16,180 --> 01:10:17,460
this is the class, right?

1381
01:10:17,460 --> 01:10:20,500
And then the document itself would be the instance.

1382
01:10:20,500 --> 01:10:21,740
This is just the schema,

1383
01:10:21,740 --> 01:10:24,060
it's describing how things will look like.

1384
01:10:24,060 --> 01:10:26,740
So that's why it's a class.

1385
01:10:27,700 --> 01:10:31,580
So this is a country class,

1386
01:10:31,580 --> 01:10:34,260
it's inherited from document template.

1387
01:10:34,260 --> 01:10:39,260
And then here you can add the docstring here,

1388
01:10:39,700 --> 01:10:43,380
which will be used as an explanation.

1389
01:10:43,380 --> 01:10:47,460
So remember all this stuff they have,

1390
01:10:47,460 --> 01:10:49,260
they talk about all the documents,

1391
01:10:49,260 --> 01:10:51,580
they will have an ID, they will have a name,

1392
01:10:51,580 --> 01:10:53,860
and then they will have a description.

1393
01:10:53,860 --> 01:10:56,900
So this is the name of this class will be this,

1394
01:10:56,900 --> 01:10:58,900
and then this is the description.

1395
01:10:58,900 --> 01:11:00,140
And then all these attributes

1396
01:11:00,140 --> 01:11:04,620
will actually add the attribute to these properties.

1397
01:11:04,620 --> 01:11:07,140
So it's just documentation, right?

1398
01:11:07,300 --> 01:11:09,460
I won't go through too much detail in it,

1399
01:11:09,460 --> 01:11:11,820
it's just how you can actually document it

1400
01:11:11,820 --> 01:11:14,420
just like you document your docstring.

1401
01:11:14,420 --> 01:11:16,260
So this is very familiar for me

1402
01:11:16,260 --> 01:11:18,620
because it's just like NumPy documentation.

1403
01:11:22,020 --> 01:11:25,420
Oh, you can also document the whole schema as well.

1404
01:11:25,420 --> 01:11:29,100
But again, like this is, you can change it,

1405
01:11:29,100 --> 01:11:31,700
but it doesn't matter too much how things function,

1406
01:11:31,700 --> 01:11:33,580
just a good practice to document things.

1407
01:11:33,580 --> 01:11:38,180
So here is how we make the key of the document work.

1408
01:11:38,180 --> 01:11:41,220
So the thing is that we set an underscore key here,

1409
01:11:41,220 --> 01:11:44,260
it need to be the key object that we kind of,

1410
01:11:44,260 --> 01:11:45,820
oh, I just deleted it.

1411
01:11:45,820 --> 01:11:49,100
But yeah, it's a key object that we need to get from here.

1412
01:11:49,100 --> 01:11:50,140
So this one won't work now

1413
01:11:50,140 --> 01:11:52,340
because I just deleted the hash key.

1414
01:11:52,340 --> 01:11:54,940
And hash key just means that use the name field.

1415
01:11:54,940 --> 01:11:56,660
So this is how we kind of do the,

1416
01:11:57,620 --> 01:12:00,460
tell TerminusDB how to generate the key, right?

1417
01:12:00,460 --> 01:12:02,700
We won't make the example too complicated

1418
01:12:02,700 --> 01:12:06,300
so we won't mess with the hash key or the literal,

1419
01:12:06,300 --> 01:12:07,220
is that called literal key?

1420
01:12:07,220 --> 01:12:11,100
I think it's called, I can't remember,

1421
01:12:11,100 --> 01:12:14,020
but there's different keys that you can use.

1422
01:12:15,380 --> 01:12:19,180
But we just hard code the key here for the document

1423
01:12:19,180 --> 01:12:22,220
so we won't play with this setting.

1424
01:12:22,220 --> 01:12:23,460
But if you're interested,

1425
01:12:23,460 --> 01:12:26,900
you can find all this information in the documentation.

1426
01:12:26,900 --> 01:12:28,460
So this is basically saying that,

1427
01:12:28,460 --> 01:12:29,380
oh, use the name field

1428
01:12:29,380 --> 01:12:31,540
and then generate a hash key based on that.

1429
01:12:31,540 --> 01:12:33,100
So but we're not doing that.

1430
01:12:33,940 --> 01:12:37,580
So we will delete it anyway, so let's leave it be.

1431
01:12:37,580 --> 01:12:41,460
So name is a property of that,

1432
01:12:41,460 --> 01:12:44,340
that thing which is a country and is a string.

1433
01:12:44,340 --> 01:12:46,140
So it is how we,

1434
01:12:46,980 --> 01:12:48,300
is kind of making some attribute

1435
01:12:48,300 --> 01:12:51,040
and then using the typing to tell,

1436
01:12:51,980 --> 01:12:54,820
to create the schema.

1437
01:12:54,820 --> 01:12:57,180
So also if it's a list of string,

1438
01:12:57,180 --> 01:12:58,540
you can do it this with list.

1439
01:12:58,540 --> 01:12:59,740
So this is just typing.

1440
01:12:59,740 --> 01:13:01,220
If you know how to do typing in Python,

1441
01:13:01,220 --> 01:13:04,260
this is just how you do it, this typing.

1442
01:13:06,740 --> 01:13:10,220
Okay, so if you're new to typing,

1443
01:13:10,220 --> 01:13:11,900
don't worry about it too much,

1444
01:13:11,900 --> 01:13:14,300
you can just copy the example.

1445
01:13:14,300 --> 01:13:16,820
But if you know typing, this is just typing.

1446
01:13:16,820 --> 01:13:18,420
So how to make a sub document?

1447
01:13:18,420 --> 01:13:22,940
A sub document is, well, this is black doing this for me

1448
01:13:22,940 --> 01:13:23,820
because this is too long,

1449
01:13:23,820 --> 01:13:28,180
but sub document is just, you can basically just do this.

1450
01:13:28,180 --> 01:13:29,460
Let me make it easier.

1451
01:13:29,460 --> 01:13:30,300
You just do this.

1452
01:13:30,660 --> 01:13:33,780
Just add an empty list to a attribute call

1453
01:13:33,780 --> 01:13:35,260
and this was a sub document.

1454
01:13:35,260 --> 01:13:39,060
That's how you make this document a sub document.

1455
01:13:39,060 --> 01:13:40,700
So this one will have an ID.

1456
01:13:40,700 --> 01:13:42,500
You don't have to worry about ID of the object,

1457
01:13:42,500 --> 01:13:45,860
of the address because you make it a sub document.

1458
01:13:45,860 --> 01:13:47,740
It shouldn't have an ID.

1459
01:13:47,740 --> 01:13:49,900
Okay, and it needs to always live

1460
01:13:49,900 --> 01:13:51,300
within the document as well.

1461
01:13:52,780 --> 01:13:53,900
Yeah, so,

1462
01:13:55,820 --> 01:13:59,700
so this is again showing how you can reference another,

1463
01:13:59,700 --> 01:14:01,180
so person can link to a person.

1464
01:14:01,180 --> 01:14:03,340
So this is an object property.

1465
01:14:03,340 --> 01:14:05,380
So this again, this is just like typing.

1466
01:14:05,380 --> 01:14:09,700
I'm setting that oh, friends of need to be a set of person.

1467
01:14:12,700 --> 01:14:13,980
Anything else I want to tell you?

1468
01:14:13,980 --> 01:14:15,500
Oh, maybe enum.

1469
01:14:15,500 --> 01:14:18,020
So you can also do other more complicated things

1470
01:14:18,020 --> 01:14:20,100
like inherit location from address and code on it,

1471
01:14:20,100 --> 01:14:23,220
but we won't go into detail here.

1472
01:14:24,300 --> 01:14:27,300
So tech union, I want to show this.

1473
01:14:27,300 --> 01:14:29,940
Yeah, forget about tech union, we won't go through it.

1474
01:14:29,940 --> 01:14:34,940
So enum is that you just need to,

1475
01:14:35,540 --> 01:14:40,380
so this is just like a Python enum, that's how you do it.

1476
01:14:40,380 --> 01:14:42,820
It just works slightly differentially than a Python enum

1477
01:14:42,820 --> 01:14:46,860
because we have created this custom enum template.

1478
01:14:46,860 --> 01:14:51,100
Just have some enum working that when we push it

1479
01:14:51,100 --> 01:14:52,660
to TerminusDB, it will do something.

1480
01:14:52,660 --> 01:14:57,660
But it's just like making your Python enum.

1481
01:14:59,540 --> 01:15:01,140
So it's just like that.

1482
01:15:01,140 --> 01:15:05,500
Yeah, so let's start working on our thing.

1483
01:15:05,500 --> 01:15:10,500
So let's go back to our blueprint,

1484
01:15:10,860 --> 01:15:12,260
talk about the blueprint.

1485
01:15:12,260 --> 01:15:14,220
The blueprint, where is it?

1486
01:15:14,220 --> 01:15:16,460
I think somewhere here, yeah.

1487
01:15:16,460 --> 01:15:20,220
So this is how we're gonna base on this, this page.

1488
01:15:20,220 --> 01:15:22,100
We're gonna build a schema.

1489
01:15:22,100 --> 01:15:24,580
So first of all, we need an employee object.

1490
01:15:24,580 --> 01:15:27,380
So let's go back to our schema.

1491
01:15:27,380 --> 01:15:29,460
And okay, so we already have an employee object,

1492
01:15:29,460 --> 01:15:30,420
but we don't want it like this.

1493
01:15:30,420 --> 01:15:31,380
So it's got a bit different.

1494
01:15:31,380 --> 01:15:33,420
So let's start from scratch.

1495
01:15:33,420 --> 01:15:35,380
Let me try to delete all this stuff.

1496
01:15:40,780 --> 01:15:43,860
So is it okay if I don't use a mic?

1497
01:15:43,860 --> 01:15:47,620
Yeah, it will free my hand and I can talk at the same time.

1498
01:15:47,620 --> 01:15:51,380
So we have employee.

1499
01:15:52,500 --> 01:15:55,380
So it needs to be a document template.

1500
01:15:55,380 --> 01:15:56,820
So you put it there.

1501
01:15:59,500 --> 01:16:02,460
And this, okay, so like I said,

1502
01:16:02,460 --> 01:16:04,140
we don't have to worry about the key

1503
01:16:04,140 --> 01:16:06,500
because we are hard-coded IDs

1504
01:16:06,500 --> 01:16:08,940
which make things more simple.

1505
01:16:08,940 --> 01:16:11,100
But we need to put all the property in.

1506
01:16:11,100 --> 01:16:12,620
So what property do we have?

1507
01:16:12,620 --> 01:16:14,580
We have a name, right?

1508
01:16:14,580 --> 01:16:17,580
So name will be a string.

1509
01:16:17,580 --> 01:16:18,740
So this is how you do it.

1510
01:16:18,740 --> 01:16:20,380
This name will be a string.

1511
01:16:20,380 --> 01:16:23,220
You can also make some doc string here if you want to.

1512
01:16:24,420 --> 01:16:25,420
Doc string here if you want to,

1513
01:16:25,420 --> 01:16:27,860
but I won't bother with it at the moment.

1514
01:16:29,820 --> 01:16:32,260
So name, what else do we have?

1515
01:16:32,260 --> 01:16:33,740
We have the title.

1516
01:16:35,220 --> 01:16:36,060
All right.

1517
01:16:38,580 --> 01:16:39,980
Contact number.

1518
01:16:39,980 --> 01:16:40,820
Oh.

1519
01:16:40,820 --> 01:16:41,900
Contact number.

1520
01:16:41,900 --> 01:16:42,940
Contact number, yes.

1521
01:16:44,940 --> 01:16:46,980
Yes, but do we, oh yeah.

1522
01:16:46,980 --> 01:16:48,900
Contact number and string, you're right.

1523
01:16:50,740 --> 01:16:53,140
No, like that.

1524
01:16:53,140 --> 01:16:55,540
Yep, and then what else do we have?

1525
01:16:55,540 --> 01:16:56,380
We have address.

1526
01:16:56,380 --> 01:16:57,860
Okay, address is interesting

1527
01:16:57,860 --> 01:17:00,860
because address will be an address object.

1528
01:17:02,340 --> 01:17:03,180
Just like that.

1529
01:17:03,180 --> 01:17:05,220
Because we haven't make the address class yet.

1530
01:17:05,220 --> 01:17:06,540
That's why we need the quotation.

1531
01:17:06,540 --> 01:17:10,140
So in general, I just add quotation to everything

1532
01:17:10,140 --> 01:17:12,820
because I can't remember where I put the stuff.

1533
01:17:12,820 --> 01:17:14,740
So what else do we have?

1534
01:17:14,740 --> 01:17:17,500
We have the, so postcode will be belongs to address.

1535
01:17:17,500 --> 01:17:19,180
We have the manager and the team.

1536
01:17:19,220 --> 01:17:23,700
So team would be a enum of teams.

1537
01:17:23,700 --> 01:17:26,300
Again, I haven't created that yet.

1538
01:17:26,300 --> 01:17:30,260
And then also manager would be another employee.

1539
01:17:31,860 --> 01:17:33,260
Right?

1540
01:17:33,260 --> 01:17:34,180
Kind of like that.

1541
01:17:35,180 --> 01:17:36,020
Sorry?

1542
01:17:39,380 --> 01:17:40,220
Come here.

1543
01:17:45,220 --> 01:17:47,060
Yeah, I'm changing that.

1544
01:17:47,060 --> 01:17:49,780
Yeah, this is the file that I generated.

1545
01:17:49,780 --> 01:17:51,500
I deleted all the other stuff.

1546
01:17:51,500 --> 01:17:52,340
You can see that.

1547
01:17:52,340 --> 01:17:53,180
Yeah?

1548
01:17:56,020 --> 01:17:57,540
Yeah, it has, but it will be different.

1549
01:17:57,540 --> 01:17:59,460
So I rather start from scratch.

1550
01:17:59,460 --> 01:18:00,300
Yep.

1551
01:18:06,300 --> 01:18:07,140
Yes, correct.

1552
01:18:07,140 --> 01:18:08,220
I oversee it.

1553
01:18:08,220 --> 01:18:09,460
Then thank you for reminding me.

1554
01:18:09,460 --> 01:18:11,340
So optional means that some,

1555
01:18:11,340 --> 01:18:13,140
because if you look at the table, right?

1556
01:18:13,140 --> 01:18:14,020
If you look at the table,

1557
01:18:14,020 --> 01:18:16,180
some of them don't have a manager

1558
01:18:16,180 --> 01:18:18,620
because the manager doesn't have a manager.

1559
01:18:18,620 --> 01:18:22,580
I remember the first employee, not this one,

1560
01:18:22,580 --> 01:18:23,580
first employee, yeah,

1561
01:18:23,580 --> 01:18:24,900
so Dynasty doesn't have a manager

1562
01:18:24,900 --> 01:18:26,900
because she is the manager herself.

1563
01:18:26,900 --> 01:18:31,620
So we will make it optional.

1564
01:18:31,620 --> 01:18:36,020
Otherwise, when we created the schema

1565
01:18:36,020 --> 01:18:38,500
and then when we insert Destiny in it,

1566
01:18:38,500 --> 01:18:41,860
then we have a problem because we are expecting

1567
01:18:41,860 --> 01:18:44,220
Destiny to have a manager, which she doesn't have.

1568
01:18:44,220 --> 01:18:47,460
So we have to make it optional to give it a,

1569
01:18:47,460 --> 01:18:49,340
so it can be a missing data, right?

1570
01:18:49,340 --> 01:18:51,100
So it's kind of like, remember,

1571
01:18:51,100 --> 01:18:54,860
every data scientist's nightmare, missing data.

1572
01:18:55,900 --> 01:18:59,220
So optional just make it like, oh, it's okay to be NA.

1573
01:18:59,220 --> 01:19:00,700
It's okay to be missing.

1574
01:19:00,700 --> 01:19:02,100
That's basically what it is.

1575
01:19:03,660 --> 01:19:06,300
Address, okay, let's move on.

1576
01:19:06,300 --> 01:19:07,820
Address is also a document template.

1577
01:19:07,820 --> 01:19:08,660
Any questions?

1578
01:19:08,660 --> 01:19:09,500
Is that okay?

1579
01:19:10,260 --> 01:19:11,100
Yeah.

1580
01:19:11,980 --> 01:19:14,340
So addressed is also document template,

1581
01:19:14,340 --> 01:19:17,100
but this one is different because this is a document.

1582
01:19:19,340 --> 01:19:21,140
So just make it like that.

1583
01:19:21,140 --> 01:19:22,300
Sorry for typos.

1584
01:19:26,420 --> 01:19:29,660
Okay, and then address will have a bunch of things.

1585
01:19:29,660 --> 01:19:31,620
We have, I forgot how I designed it.

1586
01:19:31,620 --> 01:19:34,380
I think we have a street number or something like that.

1587
01:19:37,220 --> 01:19:38,780
Yep, close code.

1588
01:19:38,780 --> 01:19:39,620
So street number,

1589
01:19:39,660 --> 01:19:41,860
I think I've made it an integer or something.

1590
01:19:42,940 --> 01:19:44,020
Yes.

1591
01:19:44,020 --> 01:19:46,020
Don't worry, I would copy and paste at the end.

1592
01:19:46,020 --> 01:19:48,060
I would make it meet at the end.

1593
01:19:48,060 --> 01:19:49,460
So we can make mistake now.

1594
01:19:49,460 --> 01:19:50,460
It's fine, it's fine.

1595
01:19:51,660 --> 01:19:52,860
Street name maybe.

1596
01:19:54,460 --> 01:19:58,100
STR, and then postcode, yes.

1597
01:20:00,660 --> 01:20:03,020
Will be a string because there is some,

1598
01:20:03,020 --> 01:20:06,620
because it's UK postcode, there's other letters in it.

1599
01:20:07,620 --> 01:20:09,700
We also have a,

1600
01:20:11,020 --> 01:20:13,180
I don't remember, oh, town, maybe town.

1601
01:20:13,180 --> 01:20:14,620
Let's say town, I don't know.

1602
01:20:16,100 --> 01:20:18,540
And then I think that's it.

1603
01:20:18,540 --> 01:20:20,100
I think that's it.

1604
01:20:20,100 --> 01:20:21,500
Yeah, it's fine.

1605
01:20:21,500 --> 01:20:22,740
Like I said, I would cheat at the end

1606
01:20:22,740 --> 01:20:24,860
because I want the demo to work.

1607
01:20:24,860 --> 01:20:27,340
So it's okay to make mistakes, okay.

1608
01:20:28,260 --> 01:20:30,420
So next one is enum, so we have the team.

1609
01:20:30,420 --> 01:20:32,500
So we have to create a team.

1610
01:20:32,500 --> 01:20:35,300
So team would be a enum template.

1611
01:20:36,660 --> 01:20:37,500
Ooh.

1612
01:20:40,140 --> 01:20:41,300
Lots of stuff.

1613
01:20:41,300 --> 01:20:44,460
So we only have two teams of marketing.

1614
01:20:46,820 --> 01:20:50,620
And then you can just do it like that to make it simple.

1615
01:20:50,620 --> 01:20:52,060
Yeah, because we don't have a value actually.

1616
01:20:52,060 --> 01:20:53,420
We just have two options.

1617
01:20:54,660 --> 01:20:59,660
So I think that's it for this.

1618
01:20:59,780 --> 01:21:02,340
So yeah, it should work.

1619
01:21:02,340 --> 01:21:04,500
But like I said, I would cheat a little bit.

1620
01:21:04,500 --> 01:21:05,340
You don't have to,

1621
01:21:05,340 --> 01:21:07,460
but you're also welcome to cheat.

1622
01:21:08,900 --> 01:21:10,540
After you have created it,

1623
01:21:10,540 --> 01:21:11,780
then you can actually check,

1624
01:21:11,780 --> 01:21:15,220
maybe check against the one that I've created

1625
01:21:15,220 --> 01:21:16,860
in the tutorials.

1626
01:21:16,860 --> 01:21:20,020
So would you show how you do the team in there?

1627
01:21:20,020 --> 01:21:22,380
Oh, team is enum template.

1628
01:21:22,380 --> 01:21:23,500
Instead of document template,

1629
01:21:23,500 --> 01:21:25,300
you have to use enum template.

1630
01:21:25,300 --> 01:21:27,100
And then when you do that, it's just like,

1631
01:21:27,100 --> 01:21:30,860
you can just, so there will be two options here now.

1632
01:21:30,860 --> 01:21:33,060
It will be marketing and IT.

1633
01:21:33,060 --> 01:21:35,180
You can just assign a empty triple to it

1634
01:21:36,020 --> 01:21:37,700
because normally when you do enum,

1635
01:21:37,700 --> 01:21:39,740
you assign a value, but we don't have a value.

1636
01:21:39,740 --> 01:21:41,540
So we can do it like that.

1637
01:21:41,540 --> 01:21:43,740
And you just did like a straight version

1638
01:21:43,740 --> 01:21:45,900
of the pillars in marketing

1639
01:21:45,900 --> 01:21:48,140
and the multiple marketing?

1640
01:21:48,140 --> 01:21:50,300
Yeah, I did that in the example,

1641
01:21:50,300 --> 01:21:52,700
but and then I realized that it's more efficient

1642
01:21:52,700 --> 01:21:54,580
to do it this way when I insert the data.

1643
01:21:54,580 --> 01:21:56,460
So I just do it like that.

1644
01:21:56,460 --> 01:21:58,940
Yeah, because otherwise I don't have to fiddle around

1645
01:21:58,940 --> 01:22:00,700
with all the underscore,

1646
01:22:00,700 --> 01:22:02,780
this blank space become underscore, this stuff,

1647
01:22:02,780 --> 01:22:04,340
which may get more complicated.

1648
01:22:05,420 --> 01:22:07,100
Because I think when you have the value,

1649
01:22:07,100 --> 01:22:10,860
it has to be, it has to be,

1650
01:22:10,860 --> 01:22:14,340
it will, you know, internally it will do something with it.

1651
01:22:14,340 --> 01:22:15,980
So it's a bit crazy.

1652
01:22:15,980 --> 01:22:16,820
So yeah.

1653
01:22:20,260 --> 01:22:23,220
Yeah, I think that's more or less what we do for the example.

1654
01:22:23,220 --> 01:22:25,740
Let me see if I can pick up the example here.

1655
01:22:27,780 --> 01:22:30,460
So, let me have a look.

1656
01:22:30,460 --> 01:22:32,220
Okay, schema apply.

1657
01:22:32,220 --> 01:22:35,060
This is the one that I already did.

1658
01:22:35,900 --> 01:22:39,020
So you see this is more time to make it nicer

1659
01:22:39,020 --> 01:22:40,340
or it look like that.

1660
01:22:40,340 --> 01:22:42,460
Also typing, we only use optional here.

1661
01:22:42,460 --> 01:22:43,940
Okay.

1662
01:22:43,940 --> 01:22:46,300
You can also document everything if you want to.

1663
01:22:47,300 --> 01:22:48,820
So the thing about it is like,

1664
01:22:48,820 --> 01:22:51,340
we won't have this employee from CSV.

1665
01:22:51,340 --> 01:22:53,660
This is generated from lesson two or something.

1666
01:22:53,660 --> 01:22:55,540
So we won't need it.

1667
01:22:55,540 --> 01:22:58,180
So we just copy from the team.

1668
01:22:58,180 --> 01:23:00,540
So we just copy the three objects that we have.

1669
01:23:01,700 --> 01:23:03,460
Let's copy this.

1670
01:23:03,500 --> 01:23:05,300
So I can make sure that it works.

1671
01:23:08,380 --> 01:23:09,580
Yeah, like that.

1672
01:23:09,580 --> 01:23:12,660
Also I don't need list and set.

1673
01:23:12,660 --> 01:23:14,660
It doesn't matter, but if you like black it,

1674
01:23:14,660 --> 01:23:16,380
it will just correct it for you.

1675
01:23:16,380 --> 01:23:17,300
I love using black.

1676
01:23:17,300 --> 01:23:18,900
It's just making so nice.

1677
01:23:18,900 --> 01:23:21,340
But yeah, anyway, it's fine.

1678
01:23:21,340 --> 01:23:23,500
It's just, you just have to make it work.

1679
01:23:23,500 --> 01:23:27,340
So yeah, you can check against, again,

1680
01:23:27,340 --> 01:23:29,180
like you can check your,

1681
01:23:29,180 --> 01:23:31,220
the one you just written with the,

1682
01:23:31,380 --> 01:23:33,500
with the one, the model answer.

1683
01:23:34,780 --> 01:23:36,460
If you are confident, you can just move on.

1684
01:23:36,460 --> 01:23:39,620
Otherwise you can just copy it to make sure that it works.

1685
01:23:39,620 --> 01:23:43,420
But yeah, just not very confident

1686
01:23:43,420 --> 01:23:45,100
about my own coding, but yeah.

1687
01:23:45,100 --> 01:23:45,940
Okay.

1688
01:23:45,940 --> 01:23:48,380
So now we have created a schema.

1689
01:23:48,380 --> 01:23:49,620
Make sure you save.

1690
01:23:49,620 --> 01:23:51,020
Save, double check.

1691
01:23:51,020 --> 01:23:51,860
Okay.

1692
01:23:51,860 --> 01:23:53,260
So it's, but it's not there yet.

1693
01:23:53,260 --> 01:23:54,500
We just saved the text file.

1694
01:23:54,500 --> 01:23:55,540
It's just a text file, right?

1695
01:23:55,540 --> 01:23:57,740
How can we put it to TerminusDB?

1696
01:23:57,740 --> 01:24:01,340
So I have created this very, very handy command

1697
01:24:01,340 --> 01:24:03,460
called commit here.

1698
01:24:03,460 --> 01:24:06,340
So now go back to this terminal,

1699
01:24:06,340 --> 01:24:07,420
whatever that you're doing.

1700
01:24:07,420 --> 01:24:11,060
So TerminusDB, type it correctly.

1701
01:24:11,060 --> 01:24:13,260
So use commit.

1702
01:24:13,260 --> 01:24:17,820
So this one will just get what you have in a schema.py

1703
01:24:17,820 --> 01:24:20,660
and put it as a schema for your database, right?

1704
01:24:22,540 --> 01:24:27,540
So this is, oh, again, like this thing we internally,

1705
01:24:27,980 --> 01:24:30,860
in my company, we call it a scaffolding tool

1706
01:24:30,860 --> 01:24:32,860
because everything is just done for you.

1707
01:24:34,140 --> 01:24:37,180
Yeah, like you can do it yourself

1708
01:24:37,180 --> 01:24:38,460
with a pattern script as well,

1709
01:24:38,460 --> 01:24:42,060
but it's just easier if you do it like this.

1710
01:24:42,900 --> 01:24:46,620
So also you can add a commit message.

1711
01:24:46,620 --> 01:24:51,620
Like let's say create schema, something like that.

1712
01:24:51,780 --> 01:24:53,660
You can add a commit message as well.

1713
01:24:53,660 --> 01:24:56,940
So when you do this, this work.

1714
01:24:57,100 --> 01:24:58,820
So you can see that workshop,

1715
01:24:58,820 --> 01:25:00,580
the database is named workshop, right?

1716
01:25:00,580 --> 01:25:04,220
Workshop is created, workshop schema is updated.

1717
01:25:04,220 --> 01:25:09,220
So now if you check, if you type TerminusDB log,

1718
01:25:10,100 --> 01:25:15,100
you will see that now we have created schema, okay?

1719
01:25:16,980 --> 01:25:20,460
So yeah, this scaffolding tool also make it more git-like

1720
01:25:20,460 --> 01:25:23,860
so you can do things like that to check

1721
01:25:23,900 --> 01:25:26,540
because for the Docker image,

1722
01:25:26,540 --> 01:25:30,300
we don't have the web interface like TerminusX.

1723
01:25:30,300 --> 01:25:32,260
TerminusX, you can also check it on TerminusX

1724
01:25:32,260 --> 01:25:34,140
if you are using TerminusX.

1725
01:25:34,140 --> 01:25:36,860
For example, do I have it here?

1726
01:25:36,860 --> 01:25:40,020
Yeah, for example, I go to a random,

1727
01:25:40,020 --> 01:25:42,620
I go to a random repo that I created before.

1728
01:25:42,620 --> 01:25:44,980
I can look at the, yeah,

1729
01:25:44,980 --> 01:25:46,380
you can see all the commit message here.

1730
01:25:46,380 --> 01:25:48,540
You can see what's inside, right?

1731
01:25:48,540 --> 01:25:52,060
So, but if you're using TerminusX, you can check this.

1732
01:25:52,100 --> 01:25:54,300
You see a very nice graph here,

1733
01:25:54,300 --> 01:25:56,060
but if you're not using, it's fine.

1734
01:25:56,060 --> 01:25:57,500
We can just use the command line.

1735
01:25:57,500 --> 01:25:58,540
It works well.

1736
01:25:58,540 --> 01:25:59,380
Where was it?

1737
01:26:00,900 --> 01:26:03,340
Just use the command line, it works well, it's fine.

1738
01:26:05,860 --> 01:26:07,420
Sometimes I prefer the command line

1739
01:26:07,420 --> 01:26:09,540
rather than the web interface, so.

1740
01:26:11,660 --> 01:26:13,500
So that's our...

1741
01:26:13,500 --> 01:26:16,900
What was the command line?

1742
01:26:16,900 --> 01:26:17,740
Sorry, the...

1743
01:26:17,740 --> 01:26:18,580
V3.

1744
01:26:18,580 --> 01:26:19,420
Yeah.

1745
01:26:21,300 --> 01:26:24,060
You mean the command, the commit command?

1746
01:26:24,060 --> 01:26:25,580
Whatever you can do is very easy.

1747
01:26:25,580 --> 01:26:26,420
The log, you mean?

1748
01:26:26,420 --> 01:26:27,540
Oh yeah, log, yes.

1749
01:26:27,540 --> 01:26:28,380
TerminusDB log.

1750
01:26:29,380 --> 01:26:32,100
So, commit is one thing.

1751
01:26:32,100 --> 01:26:32,940
Sorry?

1752
01:26:32,940 --> 01:26:34,700
Commit is the schema.

1753
01:26:36,500 --> 01:26:38,820
Yeah, it's pushing the schema to,

1754
01:26:38,820 --> 01:26:40,700
it's committing the schema only.

1755
01:26:43,700 --> 01:26:45,020
Yeah, you can also update it.

1756
01:26:45,020 --> 01:26:46,740
If you, oh, I made a mistake.

1757
01:26:46,900 --> 01:26:50,140
You change it, you can commit again.

1758
01:26:50,140 --> 01:26:50,980
Then we change it.

1759
01:26:51,940 --> 01:26:53,540
Can I ask a question?

1760
01:26:53,540 --> 01:26:55,220
There's a concept of like,

1761
01:26:55,220 --> 01:26:57,260
branching and learning,

1762
01:26:57,260 --> 01:27:00,340
so is this to allow what we're doing

1763
01:27:00,340 --> 01:27:02,620
in our organization and the organization's

1764
01:27:02,620 --> 01:27:03,700
humanization?

1765
01:27:05,180 --> 01:27:07,300
So, you mean like all this binding,

1766
01:27:07,300 --> 01:27:08,620
I think, with the SQL, like the schema?

1767
01:27:08,620 --> 01:27:10,140
Yeah, what's the purpose of that?

1768
01:27:10,140 --> 01:27:11,580
Does this allow for any kind of like,

1769
01:27:11,580 --> 01:27:12,500
different things?

1770
01:27:12,500 --> 01:27:14,580
Yeah, so those things are something like,

1771
01:27:14,820 --> 01:27:16,060
we quite keep like, kind of,

1772
01:27:16,060 --> 01:27:17,500
we usually don't do things.

1773
01:27:17,500 --> 01:27:20,580
So, what happened is that, for example,

1774
01:27:20,580 --> 01:27:24,500
well, I can't tell you how to use it,

1775
01:27:24,500 --> 01:27:26,660
no, like I can't tell you when to use it.

1776
01:27:26,660 --> 01:27:28,980
You have to decide that, oh,

1777
01:27:28,980 --> 01:27:30,580
for example, I want to do some experiment,

1778
01:27:30,580 --> 01:27:32,420
I want to change something,

1779
01:27:32,420 --> 01:27:34,180
and then you can create a branch

1780
01:27:34,180 --> 01:27:35,020
and then message it,

1781
01:27:35,020 --> 01:27:36,180
and then if you don't like it,

1782
01:27:36,180 --> 01:27:37,540
you can go back.

1783
01:27:37,540 --> 01:27:38,940
Or you can, or if you like it,

1784
01:27:38,940 --> 01:27:39,780
you can merge it back,

1785
01:27:39,780 --> 01:27:40,900
and merge it not here yet,

1786
01:27:40,900 --> 01:27:42,460
because we have to,

1787
01:27:42,500 --> 01:27:44,940
I think we just finished developing work,

1788
01:27:44,940 --> 01:27:46,940
because merge is more complicated.

1789
01:27:46,940 --> 01:27:48,940
So, we're not going to do it.

1790
01:27:48,940 --> 01:27:52,540
We can, like, if it's a bit too short,

1791
01:27:52,540 --> 01:27:54,540
no, we can use a key type.

1792
01:27:54,540 --> 01:27:55,380
I'm sorry.

1793
01:27:57,380 --> 01:27:58,220
I'm sorry.

1794
01:27:58,220 --> 01:27:59,060
Like, the key type is like,

1795
01:27:59,060 --> 01:27:59,900
you can change the key type,

1796
01:27:59,900 --> 01:28:03,660
and then you can learn how to include your graph.

1797
01:28:03,660 --> 01:28:07,500
Yeah, you can change the schema and the graph,

1798
01:28:07,500 --> 01:28:10,180
instance graph, which is where the data is.

1799
01:28:10,180 --> 01:28:12,060
Yeah, can you follow the flow?

1800
01:28:12,900 --> 01:28:13,740
When you create a branch,

1801
01:28:13,740 --> 01:28:14,560
it's just like a,

1802
01:28:14,560 --> 01:28:15,400
you create a new...

1803
01:28:15,400 --> 01:28:16,340
You know, I know what it's like when you get

1804
01:28:16,340 --> 01:28:18,020
the data in my view.

1805
01:28:18,020 --> 01:28:19,020
Oh yeah, yeah, I mean,

1806
01:28:19,020 --> 01:28:20,140
I can't really, like,

1807
01:28:20,140 --> 01:28:21,900
exactly how you learn,

1808
01:28:21,900 --> 01:28:23,580
but yeah, the reason why is because

1809
01:28:23,580 --> 01:28:25,380
you want to experiment with things,

1810
01:28:25,380 --> 01:28:29,020
you know, or maybe you collaborate with someone,

1811
01:28:29,020 --> 01:28:29,860
or something like that,

1812
01:28:29,860 --> 01:28:32,940
is, yeah, whatever you can imagine.

1813
01:28:32,940 --> 01:28:33,780
Okay.

1814
01:28:38,900 --> 01:28:40,980
Okay, so,

1815
01:28:41,020 --> 01:28:42,340
has someone finished, actually?

1816
01:28:42,340 --> 01:28:43,480
Very easy, right?

1817
01:28:43,480 --> 01:28:45,700
So, lesson three.

1818
01:28:45,700 --> 01:28:46,780
Yeah, we are not doing everything,

1819
01:28:46,780 --> 01:28:48,100
so lesson three.

1820
01:28:48,100 --> 01:28:49,880
So lesson three, we are inserting the data.

1821
01:28:49,880 --> 01:28:52,280
So, we have to look at our data.

1822
01:28:54,700 --> 01:28:58,060
We have our employee CSV and the contact CSV.

1823
01:28:58,060 --> 01:29:02,500
So, what we have to do is to create a new Fiber file.

1824
01:29:02,500 --> 01:29:06,340
So, data.py.

1825
01:29:06,340 --> 01:29:07,800
It's a data.py, so,

1826
01:29:07,960 --> 01:29:11,600
to start with, we have to import stuff, right?

1827
01:29:11,600 --> 01:29:13,940
So, import.

1828
01:29:13,940 --> 01:29:15,800
So, terminus db client.

1829
01:29:18,020 --> 01:29:20,520
Actually, I normally, how I do is,

1830
01:29:20,520 --> 01:29:22,860
I would only import the thing I need, so.

1831
01:29:27,040 --> 01:29:27,880
So yeah, again, like,

1832
01:29:27,880 --> 01:29:29,840
Vaco is just a seeded name at the moment,

1833
01:29:29,840 --> 01:29:32,060
so I know it's still stupid,

1834
01:29:32,060 --> 01:29:34,280
but we try to rename it in the future.

1835
01:29:34,280 --> 01:29:37,480
So, the client is the,

1836
01:29:37,520 --> 01:29:39,200
well, it's just the API client

1837
01:29:39,200 --> 01:29:43,200
that it will communicate with your terminus db.

1838
01:29:43,200 --> 01:29:45,980
So, I have to create a client,

1839
01:29:47,200 --> 01:29:49,480
which I will have to communicate.

1840
01:29:49,480 --> 01:29:52,000
So, let me teach you how to use the client first.

1841
01:29:52,000 --> 01:29:55,320
So, to create a client, you just need to

1842
01:29:58,640 --> 01:30:02,960
create a Vaco client object with the endpoint in it.

1843
01:30:02,960 --> 01:30:05,600
So, remember the endpoint was,

1844
01:30:05,600 --> 01:30:07,760
you can look at it from the convict.json,

1845
01:30:07,760 --> 01:30:10,760
it's convenient, just copy this one,

1846
01:30:10,760 --> 01:30:11,840
whatever you're using.

1847
01:30:12,680 --> 01:30:15,640
Let's copy it back to here.

1848
01:30:17,760 --> 01:30:20,560
So, this will create a client that talks to this endpoint.

1849
01:30:21,800 --> 01:30:24,600
So, for those who are using terminus x,

1850
01:30:24,600 --> 01:30:28,400
you may also need to use the team equal to that,

1851
01:30:28,400 --> 01:30:29,760
and then also,

1852
01:30:30,800 --> 01:30:33,200
so it's also use token

1853
01:30:33,880 --> 01:30:37,960
equals to true or something like that.

1854
01:30:37,960 --> 01:30:39,400
I can double check for you later,

1855
01:30:39,400 --> 01:30:41,280
because I think I have it in the,

1856
01:30:42,720 --> 01:30:44,560
I have it in the model answer script,

1857
01:30:44,560 --> 01:30:46,680
we have this one as well.

1858
01:30:46,680 --> 01:30:48,240
But for those who use locally,

1859
01:30:48,240 --> 01:30:50,280
you just need to have this,

1860
01:30:50,280 --> 01:30:52,760
because you don't need API token lock-in,

1861
01:30:52,760 --> 01:30:55,080
so you can just connect like that.

1862
01:30:55,080 --> 01:30:58,480
And then, how can you connect to a database?

1863
01:30:58,480 --> 01:30:59,840
So, you just connect,

1864
01:30:59,840 --> 01:31:01,840
and then db equals to the database,

1865
01:31:01,880 --> 01:31:03,680
the name of the database.

1866
01:31:03,680 --> 01:31:06,600
Okay, so this is how you connect to a set database.

1867
01:31:09,200 --> 01:31:10,800
There are also other ways of using a client,

1868
01:31:10,800 --> 01:31:11,960
you can create a database,

1869
01:31:11,960 --> 01:31:12,960
you can, all this,

1870
01:31:12,960 --> 01:31:17,960
but we just follow the workflow for this use case today.

1871
01:31:18,320 --> 01:31:20,240
You can explore a little bit further,

1872
01:31:20,240 --> 01:31:22,080
if you're interested.

1873
01:31:22,080 --> 01:31:24,520
Yeah, but because we already created a database,

1874
01:31:24,520 --> 01:31:25,880
we will just connect to it.

1875
01:31:27,080 --> 01:31:28,840
So, here we go.

1876
01:31:28,840 --> 01:31:30,640
So, now we have to get our data, right?

1877
01:31:30,640 --> 01:31:34,600
So, how we gotta do this is to use a,

1878
01:31:35,440 --> 01:31:36,600
you can use pandas,

1879
01:31:36,600 --> 01:31:38,200
for those pandas lockers,

1880
01:31:38,200 --> 01:31:40,480
if you have pandas installed,

1881
01:31:40,480 --> 01:31:41,320
feel free to use it,

1882
01:31:41,320 --> 01:31:42,160
sometimes I use it,

1883
01:31:42,160 --> 01:31:44,760
but in this example, I use CSV,

1884
01:31:44,760 --> 01:31:46,400
because not everybody have pandas,

1885
01:31:46,400 --> 01:31:49,240
not everybody like to have something heavy-weight,

1886
01:31:49,240 --> 01:31:51,840
like pandas, to do this task.

1887
01:31:51,840 --> 01:31:55,600
So, I will also import CSV, okay?

1888
01:31:55,600 --> 01:31:57,240
Oops, why are you doing this to me?

1889
01:31:57,240 --> 01:31:58,640
I just want CSV, okay.

1890
01:32:01,240 --> 01:32:04,120
Right, so, now,

1891
01:32:05,120 --> 01:32:07,040
what I can do is to,

1892
01:32:08,760 --> 01:32:12,720
to, I need some helpers to help me,

1893
01:32:12,720 --> 01:32:16,960
because I need some things to intermediately store the data

1894
01:32:16,960 --> 01:32:19,400
when I load things from the CSV.

1895
01:32:19,400 --> 01:32:22,200
So, I will need to have a few dictionaries.

1896
01:32:22,200 --> 01:32:27,200
So, for example, I will have the employee dictionary,

1897
01:32:27,520 --> 01:32:29,480
just create a dictionary,

1898
01:32:29,640 --> 01:32:31,280
for employee, I don't know,

1899
01:32:31,280 --> 01:32:34,680
like, you can, yeah.

1900
01:32:34,680 --> 01:32:36,240
Sometimes, if it's dictionary,

1901
01:32:36,240 --> 01:32:38,440
I like to edit, so I know it's dictionary,

1902
01:32:38,440 --> 01:32:39,960
but it's a small script,

1903
01:32:39,960 --> 01:32:41,680
so it doesn't really matter here, I think.

1904
01:32:41,680 --> 01:32:44,840
And also, I want to have a one,

1905
01:32:44,840 --> 01:32:46,080
that store the relationship

1906
01:32:46,080 --> 01:32:47,600
between the employee and the manager,

1907
01:32:47,600 --> 01:32:51,360
because I would need to,

1908
01:32:53,760 --> 01:32:56,280
yeah, I would need to handle that later.

1909
01:32:56,280 --> 01:32:59,160
There's actually many, many ways of doing it, I think.

1910
01:32:59,200 --> 01:33:00,800
The way I'm doing may not be the best one,

1911
01:33:00,800 --> 01:33:03,160
so just do whatever you like.

1912
01:33:03,160 --> 01:33:05,760
Some of you, of course, you're better than me,

1913
01:33:05,760 --> 01:33:09,320
and do better stuff, so you don't have to follow it.

1914
01:33:09,320 --> 01:33:13,440
So, I need a manager, so, also an address, yeah.

1915
01:33:13,440 --> 01:33:16,440
Do you mind, what we're trying to do,

1916
01:33:16,440 --> 01:33:19,160
what we're trying to do in this page now?

1917
01:33:19,160 --> 01:33:23,840
Oh, yeah, so what we're trying to do is to, yeah,

1918
01:33:23,840 --> 01:33:27,000
read the CSV, and the other one as well,

1919
01:33:27,280 --> 01:33:30,120
to put it into, so we use a Python script

1920
01:33:30,120 --> 01:33:33,200
to scan through this, and then create some object

1921
01:33:33,200 --> 01:33:35,040
that we can put in TerminusDB.

1922
01:33:35,040 --> 01:33:39,080
Okay, so TerminusDB require a dictionary,

1923
01:33:39,080 --> 01:33:42,320
how can we use that?

1924
01:33:42,320 --> 01:33:45,560
Yes, we'll come to it in a bit, so, yeah.

1925
01:33:45,560 --> 01:33:47,360
Your question will be answered.

1926
01:33:47,360 --> 01:33:50,040
Sorry, I'm also slow, I'm just thinking as I go,

1927
01:33:50,040 --> 01:33:52,240
but if you look at the answer, you already know it,

1928
01:33:52,240 --> 01:33:56,720
so what we'll do is like, open,

1929
01:33:56,920 --> 01:33:58,440
actually I really want to cheat right now,

1930
01:33:58,440 --> 01:34:00,040
because I really can't remember.

1931
01:34:01,280 --> 01:34:04,440
What am I doing, okay, sorry about that.

1932
01:34:04,440 --> 01:34:08,400
Sometimes, just like, I'm still having a jet lag,

1933
01:34:08,400 --> 01:34:09,880
I'm like, this is very late for me,

1934
01:34:09,880 --> 01:34:13,240
so I'm like, I'm just living on coffee right now,

1935
01:34:14,600 --> 01:34:16,320
and I'm like, sometimes doing silly stuff

1936
01:34:16,320 --> 01:34:19,120
and don't know what I'm saying, sorry about that.

1937
01:34:19,120 --> 01:34:20,560
So, that's lesson three, right?

1938
01:34:20,560 --> 01:34:23,320
Lesson two, lesson three, I think, yeah, so.

1939
01:34:24,080 --> 01:34:25,720
Yeah, right, so.

1940
01:34:28,000 --> 01:34:30,120
Oh, also I forgot to import the schema,

1941
01:34:30,120 --> 01:34:32,360
so yeah, that's what I mean, like I'm too tired.

1942
01:34:32,360 --> 01:34:35,480
So, we also need to get all the classes

1943
01:34:35,480 --> 01:34:38,120
that we created from schema,

1944
01:34:38,120 --> 01:34:39,440
that's why you have to question,

1945
01:34:39,440 --> 01:34:41,120
I know why, because I forgot something.

1946
01:34:41,120 --> 01:34:43,960
So, you have to also import everything

1947
01:34:43,960 --> 01:34:45,840
that we created in schema.py,

1948
01:34:45,840 --> 01:34:49,920
reason being, we are creating the instance of these classes,

1949
01:34:49,920 --> 01:34:51,960
remember this is the schema, this is telling that,

1950
01:34:52,000 --> 01:34:54,040
oh, what the document will look like, right?

1951
01:34:54,040 --> 01:34:56,640
So, the document itself is the instance of them,

1952
01:34:56,640 --> 01:35:00,600
so that's why we have to import it, right?

1953
01:35:00,600 --> 01:35:01,840
So, after you import that,

1954
01:35:01,840 --> 01:35:03,480
and after you have these dictionaries,

1955
01:35:03,480 --> 01:35:07,480
again, I will cheat by copying this,

1956
01:35:07,480 --> 01:35:09,480
because yeah, I think that is quite complicated

1957
01:35:09,480 --> 01:35:12,720
when I set it up, so yeah, that's why I said,

1958
01:35:12,720 --> 01:35:14,160
you can do it better than me,

1959
01:35:14,160 --> 01:35:16,320
like by how to read the CSV and stuff,

1960
01:35:16,320 --> 01:35:17,920
I'm not doing it very efficiently.

1961
01:35:18,120 --> 01:35:23,120
So, okay, so, I will cheat by just copying

1962
01:35:23,480 --> 01:35:24,600
the first three lines,

1963
01:35:24,600 --> 01:35:28,000
because this is just how you open a CSV, right?

1964
01:35:28,000 --> 01:35:33,000
So, I'm now opening the context of CSV,

1965
01:35:33,000 --> 01:35:35,000
I think I want to create all the address object first,

1966
01:35:35,000 --> 01:35:36,160
that's why I'm doing this.

1967
01:35:36,160 --> 01:35:38,400
So, I created a bunch of dictionaries,

1968
01:35:38,400 --> 01:35:42,160
which help me to store the stuff intermediately in Python,

1969
01:35:42,160 --> 01:35:45,160
before I can put things in terminal,

1970
01:35:45,640 --> 01:35:48,680
before I can put things in terminus db.

1971
01:35:48,680 --> 01:35:53,680
So, I opened the CSV file, just like, you know,

1972
01:35:54,080 --> 01:35:56,560
and then I used the CSV reader to read the files,

1973
01:35:56,560 --> 01:35:59,400
which it would give me every single row,

1974
01:35:59,400 --> 01:36:03,520
as comma separated, that it would be the list of stuff.

1975
01:36:03,520 --> 01:36:07,400
So, here, I would do a next at the beginning,

1976
01:36:07,400 --> 01:36:08,680
because I want to skip the header,

1977
01:36:08,680 --> 01:36:10,920
again, I'm not very efficient in doing that,

1978
01:36:10,920 --> 01:36:13,640
I'm sure that you will have a better solution for this.

1979
01:36:13,640 --> 01:36:18,640
So, now, for row in CSV file,

1980
01:36:23,080 --> 01:36:25,200
for each row, I will have those four values, right?

1981
01:36:25,200 --> 01:36:27,280
I will have, what do I have?

1982
01:36:28,380 --> 01:36:31,920
I would have employee, and then the contact number,

1983
01:36:31,920 --> 01:36:34,840
and then the address, and then the postcode.

1984
01:36:34,840 --> 01:36:39,560
So, what I'm doing here is that I would break them apart,

1985
01:36:40,600 --> 01:36:43,360
not break them apart, but like, store them one by one.

1986
01:36:43,360 --> 01:36:48,360
So, addresses, so there will be,

1987
01:36:49,800 --> 01:36:53,040
there will be their ID, so the employee ID,

1988
01:36:53,040 --> 01:36:54,160
so they will be the first one, right?

1989
01:36:54,160 --> 01:36:59,160
So, it will be row zero, would be the key of the dictionary,

1990
01:36:59,720 --> 01:37:04,720
and then I will store their address,

1991
01:37:07,080 --> 01:37:10,680
so I will store their address,

1992
01:37:10,680 --> 01:37:12,520
the address will be an address object,

1993
01:37:13,680 --> 01:37:14,640
right?

1994
01:37:14,640 --> 01:37:15,880
So, address object will have,

1995
01:37:15,880 --> 01:37:17,720
what would the address object have?

1996
01:37:17,720 --> 01:37:21,600
The address object will have a street number, so,

1997
01:37:21,600 --> 01:37:23,280
oh, I can't remember, I can just look at this,

1998
01:37:23,280 --> 01:37:24,720
what am I thinking, okay?

1999
01:37:24,720 --> 01:37:27,840
So, I have street number, so street number,

2000
01:37:27,840 --> 01:37:29,440
what would be the street number?

2001
01:37:31,960 --> 01:37:34,680
So, the street number will be actually quite tricky,

2002
01:37:34,680 --> 01:37:35,760
let me break it down first,

2003
01:37:35,760 --> 01:37:37,320
so the street number will be the,

2004
01:37:41,000 --> 01:37:41,920
so now look at it,

2005
01:37:41,920 --> 01:37:44,720
so this is zero one two,

2006
01:37:44,720 --> 01:37:46,920
so this is this one that I want, right?

2007
01:37:46,920 --> 01:37:49,000
So, one marketplace, I want the one,

2008
01:37:49,000 --> 01:37:52,760
so it will be the row two,

2009
01:37:53,920 --> 01:37:57,200
and then I break it up to what I want, so,

2010
01:37:58,720 --> 01:38:02,720
the row two, and then I do a dot split,

2011
01:38:03,960 --> 01:38:07,000
and then I want the first one,

2012
01:38:07,000 --> 01:38:09,280
or something like that, I'm not so sure,

2013
01:38:09,280 --> 01:38:11,280
this is, well, I think it would work.

2014
01:38:11,280 --> 01:38:12,840
So, I take the whole address,

2015
01:38:12,840 --> 01:38:14,760
I split it up with the spaces,

2016
01:38:14,760 --> 01:38:17,120
and then I take the first one, I think.

2017
01:38:18,320 --> 01:38:20,920
So, look at that again, so, like I said,

2018
01:38:20,920 --> 01:38:23,520
this is more like data handling,

2019
01:38:23,520 --> 01:38:27,480
or data, you know, we just break things up,

2020
01:38:27,480 --> 01:38:32,320
and put them into their place, so,

2021
01:38:34,120 --> 01:38:36,680
street name, street name,

2022
01:38:36,680 --> 01:38:38,720
or just street here, I think I call it.

2023
01:38:38,720 --> 01:38:40,440
So, again, row two split,

2024
01:38:41,800 --> 01:38:44,880
this time I want to split with the comma, I think.

2025
01:38:46,280 --> 01:38:49,120
Over here, I want the comma as well, sorry about that.

2026
01:38:50,120 --> 01:38:52,320
No, this one, no, it's a space, because it's,

2027
01:38:53,560 --> 01:38:55,680
so I split it by the comma,

2028
01:38:55,680 --> 01:38:59,680
and then I want the, huh, it is tricky.

2029
01:38:59,680 --> 01:39:01,600
So, maybe I should do it like this, so,

2030
01:39:03,200 --> 01:39:05,760
split by the comma first, right?

2031
01:39:05,760 --> 01:39:08,400
And I take the first one, and I split it again,

2032
01:39:09,400 --> 01:39:12,160
and then I would put them into,

2033
01:39:13,680 --> 01:39:14,960
street number will be the,

2034
01:39:17,000 --> 01:39:18,800
will be first one of it,

2035
01:39:18,800 --> 01:39:21,000
and then this one with the second one of it.

2036
01:39:27,400 --> 01:39:29,280
Okay, so I split it with the comma,

2037
01:39:29,280 --> 01:39:31,600
and then the first one will be the street number,

2038
01:39:31,600 --> 01:39:34,040
and the street name, and I split it again with the spaces,

2039
01:39:34,040 --> 01:39:36,040
and then I just take the two,

2040
01:39:36,440 --> 01:39:37,800
two different things,

2041
01:39:38,680 --> 01:39:41,440
I think you can do it like this, right, like street,

2042
01:39:42,400 --> 01:39:43,400
something like that.

2043
01:39:44,600 --> 01:39:47,320
I think you can do it like that, I think.

2044
01:39:48,320 --> 01:39:49,680
Correct me if I'm wrong.

2045
01:39:50,840 --> 01:39:52,680
Sometimes I don't know what I'm doing.

2046
01:39:52,680 --> 01:39:55,560
Okay, so, split it and put it into the thing,

2047
01:39:55,560 --> 01:39:59,400
and then you can also do the town, I think, the town.

2048
01:40:00,240 --> 01:40:01,080
Okay,

2049
01:40:05,600 --> 01:40:08,960
okay, row two, and then this time,

2050
01:40:08,960 --> 01:40:13,240
I want the second one of this, right?

2051
01:40:16,600 --> 01:40:19,760
So, and then, after you have this, you can put it here.

2052
01:40:19,760 --> 01:40:21,520
You can put it like, oh, street number will be street number,

2053
01:40:21,520 --> 01:40:23,560
right, and then street,

2054
01:40:24,720 --> 01:40:25,560
be street,

2055
01:40:26,080 --> 01:40:29,080
and then town will be equals to town,

2056
01:40:29,080 --> 01:40:30,960
or something like that, and then,

2057
01:40:32,400 --> 01:40:34,000
so you just create a bunch of,

2058
01:40:34,000 --> 01:40:35,840
so what we're doing here in principle is,

2059
01:40:35,840 --> 01:40:38,000
I just create a bunch of address instance,

2060
01:40:38,000 --> 01:40:40,840
and then for each instance, they are the sub-documents,

2061
01:40:40,840 --> 01:40:43,360
and then they will have the properties,

2062
01:40:43,360 --> 01:40:45,560
and the properties, I get it from the CSV.

2063
01:40:46,400 --> 01:40:47,240
That is what I'm doing here.

2064
01:40:47,240 --> 01:40:49,280
So all this, also, I will store them

2065
01:40:49,280 --> 01:40:52,160
as an object within dictionary.

2066
01:40:52,160 --> 01:40:54,400
The key of the dictionary will be the city,

2067
01:40:54,440 --> 01:40:58,760
the key of the dictionary will be the ID of the thing.

2068
01:41:01,480 --> 01:41:03,200
Okay, so this is how I do it.

2069
01:41:04,520 --> 01:41:06,280
You can also have the postcode later,

2070
01:41:06,280 --> 01:41:09,840
but I will put in the postcode later when I read the,

2071
01:41:11,720 --> 01:41:14,000
what do I have the postcode in here, sorry.

2072
01:41:14,000 --> 01:41:14,840
Let me see.

2073
01:41:16,720 --> 01:41:19,040
Oh, the postcode is, yeah, the postcode is the postcode,

2074
01:41:19,040 --> 01:41:23,360
so it will be the zero, one, two, three,

2075
01:41:23,400 --> 01:41:26,280
and the first thing in the CSV.

2076
01:41:28,800 --> 01:41:31,200
So I will put the postcode.

2077
01:41:31,200 --> 01:41:33,200
So what I'll do is that,

2078
01:41:34,520 --> 01:41:38,200
just so, this time this is already an address object,

2079
01:41:38,200 --> 01:41:39,680
so I can do postcode,

2080
01:41:42,000 --> 01:41:47,000
equals to the third object in the row, something like that.

2081
01:41:49,680 --> 01:41:50,600
Does it make sense?

2082
01:41:51,600 --> 01:41:52,680
Or does it not make sense?

2083
01:41:52,680 --> 01:41:54,400
Well, I'm crazy.

2084
01:41:56,080 --> 01:41:57,800
I think in the model answer, I do it differently,

2085
01:41:57,800 --> 01:42:02,320
but I hope you get an idea, so it's just like,

2086
01:42:02,320 --> 01:42:06,200
now every, so now every value of those,

2087
01:42:07,040 --> 01:42:10,080
the values in the dictionary are address objects

2088
01:42:10,080 --> 01:42:13,760
that I created, and later I can put them in the,

2089
01:42:13,760 --> 01:42:15,400
in TerminusDB.

2090
01:42:15,400 --> 01:42:20,080
So I will actually cheat a little bit and skip all this,

2091
01:42:20,080 --> 01:42:22,560
because this is just, like I said, it's just data,

2092
01:42:24,160 --> 01:42:26,720
data managing, how you can split up all the CSV

2093
01:42:26,720 --> 01:42:31,240
and then model it into different objects.

2094
01:42:31,240 --> 01:42:33,360
But instead of me struggling to,

2095
01:42:34,840 --> 01:42:37,120
with my very sleepy brain to make it work,

2096
01:42:37,120 --> 01:42:39,760
I would just copy this and then I would explain it.

2097
01:42:40,760 --> 01:42:42,120
I think I explained a little bit as well,

2098
01:42:42,120 --> 01:42:47,120
but I think this will be better if I explain that in full.

2099
01:42:47,200 --> 01:42:52,200
Oh, so here, so this is what it's supposed to be like.

2100
01:42:52,680 --> 01:42:55,400
So here you see that I, for each row,

2101
01:42:55,400 --> 01:42:58,000
I would break it up into different things.

2102
01:42:58,000 --> 01:43:00,960
So the contact number is,

2103
01:43:02,520 --> 01:43:05,600
so I created the contact number, this is what, okay.

2104
01:43:05,600 --> 01:43:07,440
So I have the contact number as a dictionary,

2105
01:43:07,440 --> 01:43:11,400
so I also have always, the key is always the ID

2106
01:43:11,400 --> 01:43:13,920
of the employee, and I will store them,

2107
01:43:13,920 --> 01:43:17,200
and I also break up the street address,

2108
01:43:17,200 --> 01:43:20,720
and then I would create address object like I did here,

2109
01:43:20,720 --> 01:43:24,000
and I just put everything together like that.

2110
01:43:26,240 --> 01:43:27,960
So these are the address instances,

2111
01:43:27,960 --> 01:43:30,880
they are the address object that we created.

2112
01:43:30,880 --> 01:43:34,520
We just store them with the key being the ID of the employee,

2113
01:43:34,520 --> 01:43:36,120
I store them in the dictionary,

2114
01:43:36,120 --> 01:43:39,720
which we will be putting it in later, haven't done it yet.

2115
01:43:39,720 --> 01:43:41,440
So same with the employee CSV,

2116
01:43:41,480 --> 01:43:43,320
I read all the information there,

2117
01:43:44,760 --> 01:43:47,640
and then, so this is a bit tricky, the team,

2118
01:43:47,640 --> 01:43:51,160
because it's supposed to be like this, right?

2119
01:43:51,160 --> 01:43:53,000
So this one, if I don't do it like that,

2120
01:43:53,000 --> 01:43:58,000
it should be team.it or team.marketing, right?

2121
01:44:00,840 --> 01:44:02,480
But this needs to be in the code,

2122
01:44:02,480 --> 01:44:07,360
so that's why I use eval to do it like that.

2123
01:44:07,360 --> 01:44:10,560
So that's why it's easier to just call it it and marketing,

2124
01:44:10,560 --> 01:44:12,840
because I can just read it and I just lower case

2125
01:44:12,840 --> 01:44:14,760
and then do eval with it.

2126
01:44:15,640 --> 01:44:18,600
But in enum, you should do it like team.id

2127
01:44:18,600 --> 01:44:22,760
or team.marketing, that's why it's the eval there.

2128
01:44:24,840 --> 01:44:27,880
So also I artificially create ID for it,

2129
01:44:27,880 --> 01:44:31,720
it's how I hard coded it, I read the,

2130
01:44:31,720 --> 01:44:34,560
so role zero will be 001, 002, right?

2131
01:44:34,560 --> 01:44:38,600
So I just created employee slash 001, employee slash 002,

2132
01:44:38,640 --> 01:44:41,240
that's how I create a unique ID for them,

2133
01:44:41,240 --> 01:44:42,680
it's not the best way to generate,

2134
01:44:42,680 --> 01:44:46,720
I think the best would be make terminus DB creative for you,

2135
01:44:46,720 --> 01:44:49,760
but I just want to make it simple

2136
01:44:49,760 --> 01:44:52,360
and not mess with extra features, so.

2137
01:44:56,280 --> 01:44:57,120
Yeah.

2138
01:44:58,320 --> 01:44:59,960
And address, I put the address in,

2139
01:44:59,960 --> 01:45:02,160
I put the addresses in, so you can see that,

2140
01:45:02,160 --> 01:45:05,840
remember the address, all the values in the address

2141
01:45:05,880 --> 01:45:09,960
dictionary are the address object we created, right?

2142
01:45:09,960 --> 01:45:14,320
So now I just put it in, so a property,

2143
01:45:14,320 --> 01:45:17,280
so this address property, right, this address property

2144
01:45:17,280 --> 01:45:22,280
of the employee would be an address object, okay?

2145
01:45:22,800 --> 01:45:23,800
Does that make sense?

2146
01:45:29,320 --> 01:45:31,760
And the contact number team will be the team

2147
01:45:31,760 --> 01:45:35,040
that we create with eval here, okay?

2148
01:45:36,320 --> 01:45:39,480
So how do you use the address property?

2149
01:45:41,760 --> 01:45:45,440
How will it affect the contact number team?

2150
01:45:45,440 --> 01:45:49,000
Yes, it's because this address role zero,

2151
01:45:49,000 --> 01:45:53,800
remember this is the, so addresses become a dictionary

2152
01:45:53,800 --> 01:45:56,280
with the key that's 0102034,

2153
01:45:57,160 --> 01:46:00,720
the values will be this address objects that we created, okay?

2154
01:46:01,920 --> 01:46:05,720
So we just put that in here.

2155
01:46:05,720 --> 01:46:07,240
I temporarily store them in dictionary

2156
01:46:07,240 --> 01:46:08,800
because I have two CSV to read,

2157
01:46:08,800 --> 01:46:11,320
that's why I temporarily store them in dictionary,

2158
01:46:11,320 --> 01:46:15,280
but then I can put it, but then I get it back

2159
01:46:15,280 --> 01:46:17,240
from the dictionary and put it there

2160
01:46:17,240 --> 01:46:20,880
as a property of the employees.

2161
01:46:21,960 --> 01:46:24,640
So when you see how I do the manager, maybe it's clearer,

2162
01:46:24,640 --> 01:46:28,000
because like manager, right now I only store like a map page,

2163
01:46:28,000 --> 01:46:31,160
it's just a map page from one ID to another ID right now.

2164
01:46:31,160 --> 01:46:34,440
So we haven't put the manager yet, actually.

2165
01:46:34,440 --> 01:46:38,960
So how we put the manager in is to use this.

2166
01:46:38,960 --> 01:46:42,760
So I get all the mappings,

2167
01:46:42,760 --> 01:46:45,040
because I want to read the whole CSV

2168
01:46:45,040 --> 01:46:48,000
and understand all the mapping before I put it there.

2169
01:46:48,000 --> 01:46:52,600
Because for example, if I haven't created a manager yet,

2170
01:46:52,600 --> 01:46:56,160
so I don't have a manager to put it in here, which is bad.

2171
01:46:56,160 --> 01:47:00,320
So that's why I store the mapping of the manager first

2172
01:47:00,320 --> 01:47:02,760
and then later I can get back.

2173
01:47:02,760 --> 01:47:06,280
So I use the employee ID of the employee

2174
01:47:06,280 --> 01:47:07,560
to get back the employee object

2175
01:47:07,560 --> 01:47:09,520
and I can just dot manager.

2176
01:47:09,520 --> 01:47:11,000
So if you don't want to do it this way,

2177
01:47:11,000 --> 01:47:13,640
you can just like do it similar to this.

2178
01:47:13,640 --> 01:47:16,760
You can just use the employees and then the ID

2179
01:47:16,760 --> 01:47:21,320
and then dot address equals to address and then this one.

2180
01:47:22,000 --> 01:47:22,840
Yes.

2181
01:47:46,840 --> 01:47:50,600
So here, how we design it is that addresses

2182
01:47:50,760 --> 01:47:52,200
are sub-documents.

2183
01:47:52,200 --> 01:47:55,360
So they have to live inside the employee.

2184
01:47:55,360 --> 01:47:57,520
Once they go into the Terminus DB,

2185
01:47:57,520 --> 01:48:00,680
the addresses need to live inside the employee's object.

2186
01:48:00,680 --> 01:48:02,280
They can't live by themselves.

2187
01:48:02,280 --> 01:48:07,280
If you want to address to be able to live by themselves,

2188
01:48:07,320 --> 01:48:10,120
you have to create it as a document, not as a document.

2189
01:48:11,320 --> 01:48:13,960
Yeah, so if you want to just link the address

2190
01:48:13,960 --> 01:48:14,920
and the employees,

2191
01:48:14,920 --> 01:48:18,080
so you can have a bunch of address floating around.

2192
01:48:18,080 --> 01:48:20,400
You can also set what their owner is

2193
01:48:21,200 --> 01:48:22,440
by linking them to the employee,

2194
01:48:22,440 --> 01:48:24,680
but then they have to become their own document.

2195
01:48:24,680 --> 01:48:25,880
But in this case,

2196
01:48:25,880 --> 01:48:29,280
because we make the address a sub-document or an object,

2197
01:48:29,280 --> 01:48:31,200
so sub-document doesn't have an ID, right?

2198
01:48:31,200 --> 01:48:33,920
It needs to live within a document.

2199
01:48:33,920 --> 01:48:35,400
So you can imagine all this stuff.

2200
01:48:35,400 --> 01:48:37,800
Actually, you don't need to have an address sub-document.

2201
01:48:37,800 --> 01:48:39,280
If you don't want to,

2202
01:48:39,280 --> 01:48:41,000
you can just have a bunch of these things.

2203
01:48:41,000 --> 01:48:44,200
You can just have address street, address street number,

2204
01:48:44,200 --> 01:48:47,840
address name, no, address street name, all that stuff.

2205
01:48:47,840 --> 01:48:49,680
You can just...

2206
01:48:50,920 --> 01:48:51,760
Mm-hmm.

2207
01:49:17,760 --> 01:49:18,920
I don't quite get your question.

2208
01:49:18,920 --> 01:49:21,920
So are you talking about exactly this use case

2209
01:49:21,920 --> 01:49:24,440
or imagine that we don't have the employee?

2210
01:49:27,760 --> 01:49:31,520
Yeah, yeah, maybe that's easier when we talk one-to-one.

2211
01:49:31,520 --> 01:49:34,200
So in this case,

2212
01:49:34,200 --> 01:49:36,280
every employee has to have an address,

2213
01:49:36,280 --> 01:49:39,480
and the address has to be living inside an employee

2214
01:49:39,480 --> 01:49:41,600
when it got created in the database.

2215
01:49:41,600 --> 01:49:42,520
In Python, it's fine.

2216
01:49:42,520 --> 01:49:45,520
In Python, whenever Python allows, you can do it,

2217
01:49:45,520 --> 01:49:48,000
but because now we only put it in Python,

2218
01:49:48,040 --> 01:49:50,160
we haven't put it in TerminusDB yet.

2219
01:49:50,160 --> 01:49:54,200
So it's just that the limit is your Python knowledge,

2220
01:49:54,200 --> 01:49:56,440
basically, of what Python allows you to do.

2221
01:50:00,320 --> 01:50:02,280
So yeah, now it comes to the last bit.

2222
01:50:02,280 --> 01:50:03,320
How we can put all these...

2223
01:50:03,320 --> 01:50:04,720
So we have a bunch of objects.

2224
01:50:04,720 --> 01:50:09,360
So we have a bunch of employees' documents

2225
01:50:09,360 --> 01:50:12,120
that live inside this dictionary.

2226
01:50:12,120 --> 01:50:14,040
But how can I put that in a TerminusDB?

2227
01:50:14,040 --> 01:50:15,720
So this is how.

2228
01:50:15,760 --> 01:50:18,520
So the last thing we have to do is to...

2229
01:50:18,520 --> 01:50:19,680
So we already connected,

2230
01:50:19,680 --> 01:50:21,320
so we can already use this client.

2231
01:50:21,320 --> 01:50:22,520
So how can I use this client?

2232
01:50:22,520 --> 01:50:26,520
So what I can do is to insert documents.

2233
01:50:32,440 --> 01:50:33,960
So what should I insert?

2234
01:50:33,960 --> 01:50:37,080
I should insert all these employees back, right?

2235
01:50:37,080 --> 01:50:42,080
So I think I just call the employees.values,

2236
01:50:43,960 --> 01:50:45,280
and then use it as a list.

2237
01:50:46,240 --> 01:50:47,680
Something like that, I think.

2238
01:50:52,240 --> 01:50:54,160
I'm not sure if I would double check.

2239
01:50:54,160 --> 01:50:57,080
So I just get all the employees from the dictionary

2240
01:50:57,080 --> 01:51:00,000
and put it into TerminusDB.

2241
01:51:00,000 --> 01:51:01,640
Yeah, something like that.

2242
01:51:01,640 --> 01:51:04,040
And you can also add the commit message as well.

2243
01:51:04,040 --> 01:51:05,520
So I'll just click this.

2244
01:51:10,040 --> 01:51:11,720
Yeah.

2245
01:51:11,720 --> 01:51:15,440
So I just grabbed all these employee objects, four of them.

2246
01:51:15,440 --> 01:51:17,600
You don't need the address object because it already...

2247
01:51:17,600 --> 01:51:20,800
So remember, we already put them in the employees object,

2248
01:51:20,800 --> 01:51:23,280
and they should not be living by themselves.

2249
01:51:23,280 --> 01:51:25,240
They should always live inside employee objects.

2250
01:51:25,240 --> 01:51:28,160
So it's okay, we don't have to insert them separately.

2251
01:51:28,160 --> 01:51:30,320
We only need to insert the employees object.

2252
01:51:30,320 --> 01:51:32,040
It will include the address already.

2253
01:51:32,040 --> 01:51:36,360
So to get all of them, put them in a list,

2254
01:51:36,360 --> 01:51:38,960
and then put them using the insert document,

2255
01:51:38,960 --> 01:51:43,520
and then you can add a commit message to make it nicer.

2256
01:51:43,520 --> 01:51:44,600
Adding four employees.

2257
01:51:44,600 --> 01:51:46,720
So in theory, this one should work.

2258
01:51:46,720 --> 01:51:48,520
So let's test it out.

2259
01:51:48,520 --> 01:51:52,680
Okay, so let's test it out.

2260
01:51:54,320 --> 01:51:57,320
So this time, I just run the Python scripts of Python

2261
01:51:58,480 --> 01:52:01,160
in search data.py,

2262
01:52:01,160 --> 01:52:02,920
and then doesn't have an error message.

2263
01:52:02,920 --> 01:52:04,200
Good sign, but we don't know.

2264
01:52:04,200 --> 01:52:06,120
So let's have a look at the log.

2265
01:52:07,160 --> 01:52:09,680
Oh, so we have another commit, which is good.

2266
01:52:09,680 --> 01:52:12,040
So I've done something, at least.

2267
01:52:12,040 --> 01:52:13,240
But is it correct?

2268
01:52:13,240 --> 01:52:14,080
We don't know.

2269
01:52:14,400 --> 01:52:15,240
How are we gonna do it?

2270
01:52:15,240 --> 01:52:18,760
So terminus db, and then all docs.

2271
01:52:20,000 --> 01:52:20,920
This is how we do it.

2272
01:52:20,920 --> 01:52:23,120
But look at all the documents.

2273
01:52:23,120 --> 01:52:25,560
So wow, a lot of things.

2274
01:52:25,560 --> 01:52:29,520
So these are the four employees that we have inserted.

2275
01:52:29,520 --> 01:52:32,320
So if you look at it, address will be this,

2276
01:52:32,320 --> 01:52:33,680
is the address.

2277
01:52:33,680 --> 01:52:36,160
So you can see that even though address has an ID,

2278
01:52:37,200 --> 01:52:40,160
terminus db won't allow it to be its own thing.

2279
01:52:40,160 --> 01:52:45,160
So you always need to live inside the employee object here.

2280
01:52:45,280 --> 01:52:48,800
Okay, so yeah.

2281
01:52:50,080 --> 01:52:52,240
This is how it looks like inside terminus db.

2282
01:52:52,240 --> 01:52:55,200
So it is in JSON-LD format.

2283
01:52:55,200 --> 01:52:57,680
So you can also, if you can write this,

2284
01:52:57,680 --> 01:52:59,240
you can insert it directly.

2285
01:52:59,240 --> 01:53:04,240
But for me, myself, I find it easier to write script like this.

2286
01:53:04,400 --> 01:53:06,280
Like this is already complicated enough, right?

2287
01:53:06,280 --> 01:53:08,960
So if you also have to construct a JSON like this,

2288
01:53:08,960 --> 01:53:11,400
then I would be, no, I don't want to do that.

2289
01:53:12,400 --> 01:53:13,240
So yeah.

2290
01:53:13,240 --> 01:53:18,240
So both the employee and the address are documents?

2291
01:53:18,280 --> 01:53:21,360
Yeah, the employee's documents, address are sub-documents.

2292
01:53:21,360 --> 01:53:24,400
Sub-documents is object which doesn't have an ID.

2293
01:53:24,400 --> 01:53:26,320
Even though you can see that, oh, no,

2294
01:53:26,320 --> 01:53:28,600
but you were lying because there's an ID here.

2295
01:53:28,600 --> 01:53:32,200
But this one is the ID that terminus db generated for it

2296
01:53:32,200 --> 01:53:34,040
to use internally.

2297
01:53:34,040 --> 01:53:36,560
You should not be able to give it an ID.

2298
01:53:37,400 --> 01:53:39,160
Yeah, it should not be visible to you actually,

2299
01:53:39,160 --> 01:53:40,800
but you just print everything.

2300
01:53:40,800 --> 01:53:44,640
So it's used internally, but not for your use.

2301
01:53:44,640 --> 01:53:46,520
So it shouldn't have an ID.

2302
01:53:46,520 --> 01:53:47,360
That's why.

2303
01:53:52,920 --> 01:53:55,160
And also if you look at it, it's very weird, right?

2304
01:53:55,160 --> 01:53:58,800
It has the employee address and an address like that.

2305
01:53:58,800 --> 01:54:00,400
And then that's how you see the ID.

2306
01:54:00,400 --> 01:54:03,800
You know this is a document because it lives

2307
01:54:03,840 --> 01:54:05,880
within another object which is employee for 004.

2308
01:54:08,520 --> 01:54:11,520
So both the command and the c is output?

2309
01:54:11,520 --> 01:54:12,360
Hmm?

2310
01:54:12,360 --> 01:54:13,560
What was the command?

2311
01:54:13,560 --> 01:54:15,240
Command is all docs.

2312
01:54:15,240 --> 01:54:18,800
So this one, all docs.

2313
01:54:18,800 --> 01:54:21,680
So in case you forgot, you can always use dash dash help.

2314
01:54:21,680 --> 01:54:24,120
It will give you all the command options.

2315
01:54:24,120 --> 01:54:24,960
Yeah.

2316
01:54:27,880 --> 01:54:29,280
So okay, now we have everything.

2317
01:54:29,280 --> 01:54:32,760
So fun bit, we got to do query using cryptos.

2318
01:54:32,800 --> 01:54:36,480
So now it's lesson seven.

2319
01:54:36,480 --> 01:54:41,000
So lesson seven, we got to do some query

2320
01:54:41,000 --> 01:54:43,000
with what we have learned.

2321
01:54:43,000 --> 01:54:48,000
So again, lesson seven, we will create new file,

2322
01:54:48,840 --> 01:54:50,400
new Python file.

2323
01:54:50,400 --> 01:54:55,400
So mark all query.py.

2324
01:54:56,840 --> 01:55:01,440
Okay, so this time we need the client of course.

2325
01:55:01,440 --> 01:55:03,280
So let's do the same thing from,

2326
01:55:04,640 --> 01:55:05,480
kind of spell it.

2327
01:55:06,400 --> 01:55:10,520
NSDB client, import again the Wacl client.

2328
01:55:12,160 --> 01:55:14,120
This time we also need the query.

2329
01:55:15,000 --> 01:55:16,720
So we have created the Wacl query

2330
01:55:16,720 --> 01:55:21,720
which we now mainly use for queries.

2331
01:55:22,240 --> 01:55:23,320
So Wacl query.

2332
01:55:23,320 --> 01:55:26,600
Also we noticed that we have to type this a lot.

2333
01:55:26,600 --> 01:55:29,080
So what I'll do is just shorten it

2334
01:55:29,880 --> 01:55:31,200
just like pandas, right?

2335
01:55:31,200 --> 01:55:33,960
PD or NumPy or MP, you know.

2336
01:55:33,960 --> 01:55:34,800
Yeah, why not?

2337
01:55:36,000 --> 01:55:36,840
Just to make it shorter.

2338
01:55:36,840 --> 01:55:40,960
So this one, I'm getting myself ready to make queries.

2339
01:55:40,960 --> 01:55:44,760
So how Wacl query works is that you would have to,

2340
01:55:45,720 --> 01:55:47,840
so Wacl query, first of all,

2341
01:55:47,840 --> 01:55:50,240
warning, Wacl query is very complicated.

2342
01:55:52,160 --> 01:55:54,040
Yes, because today we just learned triple.

2343
01:55:54,040 --> 01:55:56,600
If you can do the query today, it's really good

2344
01:55:56,600 --> 01:56:00,040
because you know, you can already use what you learn

2345
01:56:00,040 --> 01:56:03,800
and make some queries and make some logical reasoning.

2346
01:56:03,800 --> 01:56:06,200
But if you really want to dive it down,

2347
01:56:06,200 --> 01:56:08,400
it will require some practice.

2348
01:56:08,400 --> 01:56:11,320
Even for me, sometimes I have to, you know,

2349
01:56:11,320 --> 01:56:12,680
wrap my head around and think,

2350
01:56:12,680 --> 01:56:14,280
oh, how can I query it?

2351
01:56:14,280 --> 01:56:15,120
Things like that.

2352
01:56:15,120 --> 01:56:18,040
So we'll give it a try, we'll give it a try.

2353
01:56:18,040 --> 01:56:20,960
So again, we need a client, so let's do that.

2354
01:56:21,880 --> 01:56:24,520
We can actually copy and paste what we did.

2355
01:56:24,960 --> 01:56:26,720
For those of you connected to Terminus X,

2356
01:56:26,720 --> 01:56:29,840
it's quite complicated, so just copy it.

2357
01:56:32,080 --> 01:56:34,760
Just do the same thing, connect to a database as well.

2358
01:56:34,760 --> 01:56:35,920
So we just do this.

2359
01:56:38,280 --> 01:56:41,520
Similar to what we did before, nothing to add here.

2360
01:56:41,520 --> 01:56:45,120
So now we create a query object.

2361
01:56:45,120 --> 01:56:50,120
So for me, whenever I do the query,

2362
01:56:50,120 --> 01:56:53,920
I will first want to look at at least some of the things,

2363
01:56:53,920 --> 01:56:56,280
not everything, but like, if you can look at everything,

2364
01:56:56,280 --> 01:56:58,480
that's good, because you have an idea how it looks like.

2365
01:56:58,480 --> 01:56:59,840
Sometimes the database is too big,

2366
01:56:59,840 --> 01:57:03,520
then maybe you have to not query everything.

2367
01:57:03,520 --> 01:57:04,960
But I'll show you how to query everything.

2368
01:57:04,960 --> 01:57:09,960
So you can make a query by using WQ.

2369
01:57:10,360 --> 01:57:11,480
Or you can type the whole thing,

2370
01:57:11,480 --> 01:57:13,240
but I just shot this WQ.

2371
01:57:14,280 --> 01:57:16,480
So it just needs to be an object itself.

2372
01:57:16,480 --> 01:57:18,840
And then you can start query things.

2373
01:57:18,840 --> 01:57:21,560
Like for example, you can do like triple,

2374
01:57:21,560 --> 01:57:23,240
and then ask for triple or something.

2375
01:57:23,240 --> 01:57:25,200
You'll go into it later.

2376
01:57:25,200 --> 01:57:26,880
Right now I just want to do star,

2377
01:57:28,120 --> 01:57:31,760
which star is just like star in SQL,

2378
01:57:31,760 --> 01:57:33,400
it gives you everything.

2379
01:57:33,400 --> 01:57:36,960
But use it carefully, because if your database is big,

2380
01:57:36,960 --> 01:57:41,040
this will probably have consequences.

2381
01:57:41,040 --> 01:57:44,920
So right now our database is not big, so we can do that.

2382
01:57:44,920 --> 01:57:49,920
So let's try to see everything as triple inside the database.

2383
01:57:50,160 --> 01:57:51,240
That is not like all docs.

2384
01:57:51,240 --> 01:57:54,240
All docs you can see all the documents as documents, right?

2385
01:57:54,240 --> 01:57:57,920
They are very nicely presented to you

2386
01:57:57,920 --> 01:58:01,320
in the JSON-LD format as documents.

2387
01:58:01,320 --> 01:58:06,320
But now we also look at it as JSON-LD, but as triples.

2388
01:58:06,400 --> 01:58:08,200
So it's going to be very interesting.

2389
01:58:09,520 --> 01:58:12,520
So this is our query, but we have to execute it.

2390
01:58:12,520 --> 01:58:14,840
So how we do it is to do .execute,

2391
01:58:17,000 --> 01:58:18,400
and then put a client in it.

2392
01:58:19,360 --> 01:58:22,800
Oh, actually this will give you the results.

2393
01:58:22,800 --> 01:58:25,200
So let's just print it out to see what's happening.

2394
01:58:26,480 --> 01:58:27,720
Scary stuff, okay.

2395
01:58:28,640 --> 01:58:30,720
Oh, actually what is better is to use preprint,

2396
01:58:30,720 --> 01:58:31,920
because it will be messy.

2397
01:58:37,160 --> 01:58:41,680
I love using preprint, so maybe .pprint.

2398
01:58:41,680 --> 01:58:46,680
So let's print everything within the database as triples.

2399
01:58:46,720 --> 01:58:47,480
Let's see what happens.

2400
01:58:47,480 --> 01:58:52,480
So go back to our beloved terminal.

2401
01:58:52,560 --> 01:58:55,760
So now what I want to do is to do the query thing.

2402
01:58:59,240 --> 01:59:00,080
What was that called again?

2403
01:59:00,080 --> 01:59:01,480
Awako query, yes.

2404
01:59:02,680 --> 01:59:04,440
Whoa, what's this?

2405
01:59:05,880 --> 01:59:06,720
Look at all this.

2406
01:59:06,720 --> 01:59:08,440
Wow, it's a very, very big,

2407
01:59:08,440 --> 01:59:09,920
well, even though our database was small,

2408
01:59:09,920 --> 01:59:11,360
it's only four objects.

2409
01:59:11,360 --> 01:59:14,760
It contains a lot of triples in it.

2410
01:59:15,760 --> 01:59:18,960
It's, wow, all this stuff.

2411
01:59:18,960 --> 01:59:20,040
What are these?

2412
01:59:20,040 --> 01:59:24,080
So let's have a deeper look inside.

2413
01:59:24,080 --> 01:59:26,920
So let's pick something that we kind of understand.

2414
01:59:26,920 --> 01:59:28,480
So let's look at,

2415
01:59:31,680 --> 01:59:34,520
here we have a, okay.

2416
01:59:34,520 --> 01:59:36,320
So we have, what does this mean?

2417
01:59:36,320 --> 01:59:40,160
So we have an object, okay.

2418
01:59:40,160 --> 01:59:43,040
So, oh, by the way, for all this query,

2419
01:59:43,080 --> 01:59:44,000
when you get a result,

2420
01:59:44,000 --> 01:59:46,640
so it's kind of like API getting the result,

2421
01:59:46,640 --> 01:59:49,520
but your result will be stored in bindings.

2422
01:59:49,520 --> 01:59:51,720
So we just look at bindings most of the time.

2423
01:59:53,080 --> 01:59:54,400
So we have object, predicate, and subject,

2424
01:59:54,400 --> 01:59:56,480
because remember all triples,

2425
01:59:56,480 --> 01:59:59,120
they are object, predicate, and subject, right?

2426
01:59:59,120 --> 02:00:00,800
Well, the order is a little bit different here,

2427
02:00:00,800 --> 02:00:02,040
but doesn't matter.

2428
02:00:02,040 --> 02:00:03,600
Order doesn't matter in the dictionary,

2429
02:00:03,600 --> 02:00:06,360
so unless it's auditing,

2430
02:00:06,360 --> 02:00:07,680
but order doesn't matter.

2431
02:00:07,680 --> 02:00:11,200
So we have object, predicate, subject.

2432
02:00:11,200 --> 02:00:12,840
So there's these three things.

2433
02:00:13,680 --> 02:00:14,880
So these are all the triples, every triples,

2434
02:00:14,880 --> 02:00:17,080
that you can find in our instance graph.

2435
02:00:17,960 --> 02:00:22,960
You can also get it from the schema graph if you want to,

2436
02:00:23,040 --> 02:00:24,320
but we are not doing it right now.

2437
02:00:24,320 --> 02:00:25,720
We only look at the instance graph.

2438
02:00:25,720 --> 02:00:27,840
So these are all the instance, all the documents,

2439
02:00:27,840 --> 02:00:30,640
but as triples, that's how it looks like.

2440
02:00:30,640 --> 02:00:32,840
So very interesting, right?

2441
02:00:32,840 --> 02:00:36,840
You have something that is employee slash O one,

2442
02:00:36,840 --> 02:00:38,080
so that's the subject,

2443
02:00:39,040 --> 02:00:42,600
and then the type of it is an employee.

2444
02:00:42,600 --> 02:00:43,920
So it tells you something.

2445
02:00:43,920 --> 02:00:46,800
It tells you some information about this object.

2446
02:00:46,800 --> 02:00:48,440
Employee slash O one.

2447
02:00:48,440 --> 02:00:50,360
It's an employee.

2448
02:00:50,360 --> 02:00:51,680
That's what it's saying.

2449
02:00:51,680 --> 02:00:53,640
I'm trying to translate it.

2450
02:00:53,640 --> 02:00:56,600
So another thing, let's look at this.

2451
02:00:56,600 --> 02:00:58,000
Whoop.

2452
02:00:58,000 --> 02:00:59,920
So employee slash O one,

2453
02:01:01,000 --> 02:01:03,640
schema, contact number,

2454
02:01:03,640 --> 02:01:06,080
and then object is another dictionary.

2455
02:01:06,080 --> 02:01:07,680
It's saying it's a XSD string,

2456
02:01:07,680 --> 02:01:09,360
and then it's a string.

2457
02:01:09,360 --> 02:01:11,160
The value is a string.

2458
02:01:11,160 --> 02:01:14,600
So it's saying that employee O one

2459
02:01:14,600 --> 02:01:17,600
has a property called contact number,

2460
02:01:17,600 --> 02:01:19,240
which is a string.

2461
02:01:19,240 --> 02:01:20,280
The value is that one.

2462
02:01:21,320 --> 02:01:22,560
Okay, so this is how it looks like

2463
02:01:22,560 --> 02:01:24,600
within TerminusDB as triples.

2464
02:01:24,600 --> 02:01:26,960
So this is how a knowledge graph look like, actually.

2465
02:01:26,960 --> 02:01:27,800
Yes?

2466
02:01:27,800 --> 02:01:32,720
So where does the concept of ranges come to be?

2467
02:01:32,720 --> 02:01:34,160
Yes, good question.

2468
02:01:34,160 --> 02:01:35,800
So if you look at this.

2469
02:01:35,800 --> 02:01:39,040
So this contact number, right?

2470
02:01:39,840 --> 02:01:41,440
What do you think the range is?

2471
02:01:44,240 --> 02:01:47,120
The string, yes, XSD string is the range.

2472
02:01:47,120 --> 02:01:50,000
And the domain is the employee O one.

2473
02:01:51,080 --> 02:01:52,920
Okay, this is, huh.

2474
02:01:52,920 --> 02:01:53,760
Huh?

2475
02:01:56,000 --> 02:01:56,840
Because of?

2476
02:01:59,760 --> 02:02:03,040
Yes, so this XSD string actually is telling you

2477
02:02:03,040 --> 02:02:04,680
that it's actually a string.

2478
02:02:04,680 --> 02:02:06,200
Because everything is a string here, right?

2479
02:02:06,200 --> 02:02:08,920
It just, well, I just print everything out there all string,

2480
02:02:09,760 --> 02:02:12,560
but it means that that value there is not a number,

2481
02:02:12,560 --> 02:02:13,760
it's a string.

2482
02:02:13,760 --> 02:02:15,360
Even though I don't have the bracket, right?

2483
02:02:15,360 --> 02:02:20,360
Imagine it's only this one month free, free, six, seven.

2484
02:02:20,400 --> 02:02:22,320
It can be an integer, it can be a string.

2485
02:02:22,320 --> 02:02:25,760
So because the type is saying XSD string is a string.

2486
02:02:25,760 --> 02:02:27,400
That's how you declare a type.

2487
02:02:27,400 --> 02:02:29,280
So that's why you don't have the problem of,

2488
02:02:29,280 --> 02:02:32,360
sometimes Excel thought that,

2489
02:02:32,360 --> 02:02:34,040
if you import a CSV in Excel,

2490
02:02:34,040 --> 02:02:35,880
sometimes it thought that, oh, it's an integer,

2491
02:02:35,880 --> 02:02:37,080
but actually it's a string.

2492
02:02:37,080 --> 02:02:39,800
So then you lose all these trailing zeros and stuff.

2493
02:02:39,800 --> 02:02:43,400
So it won't happen here because we have the type.

2494
02:02:43,400 --> 02:02:46,440
There's no ambiguity, there's no guessing.

2495
02:02:46,440 --> 02:02:50,160
That thing happened in Excel because Excel was guessing.

2496
02:02:50,160 --> 02:02:52,720
But in here, there's no guessing.

2497
02:02:54,720 --> 02:02:57,000
So this is how it looks like.

2498
02:02:57,000 --> 02:03:01,880
And by using this knowledge, we can ask some questions.

2499
02:03:01,880 --> 02:03:05,240
So in lesson seven, we have make some assumption.

2500
02:03:05,240 --> 02:03:07,960
We have an imaginary situation

2501
02:03:07,960 --> 02:03:10,360
that we want to contact someone in the company.

2502
02:03:10,360 --> 02:03:12,640
So let's take this out.

2503
02:03:12,640 --> 02:03:14,240
It's scary when you take this out.

2504
02:03:14,240 --> 02:03:17,760
So, okay, so let's think that,

2505
02:03:20,280 --> 02:03:22,840
so instead of looking at these two CSV,

2506
02:03:22,840 --> 02:03:27,160
we want to find the contact information of Darcy, right?

2507
02:03:27,160 --> 02:03:29,000
So we only know the name of Darcy

2508
02:03:29,000 --> 02:03:31,240
because we are not working in a company.

2509
02:03:31,240 --> 02:03:34,360
We don't have access of this spreadsheet or something.

2510
02:03:34,400 --> 02:03:37,080
We just know that, oh, I want to ask a question.

2511
02:03:38,160 --> 02:03:40,840
I want to have the contact number of this person.

2512
02:03:40,840 --> 02:03:42,200
How can I do that?

2513
02:03:42,200 --> 02:03:44,440
By asking the database.

2514
02:03:44,440 --> 02:03:46,440
So let's ask the database.

2515
02:03:46,440 --> 02:03:48,040
So let's make a query.

2516
02:03:48,040 --> 02:03:52,240
So query equals to, oh, before that,

2517
02:03:52,240 --> 02:03:54,840
what I do is like, because remember,

2518
02:03:54,840 --> 02:03:57,040
every string we have to declare the type, right?

2519
02:03:57,040 --> 02:04:01,400
Otherwise, ThomasDB don't know that it's a string.

2520
02:04:01,480 --> 02:04:05,440
Well, for Darcy's case, the name is obviously a string,

2521
02:04:05,440 --> 02:04:07,400
but because we don't guess things,

2522
02:04:07,400 --> 02:04:09,480
we always have to declare the type.

2523
02:04:09,480 --> 02:04:12,800
So what I do is that I create this state called,

2524
02:04:12,800 --> 02:04:17,800
so Darcy, I will have to declare it as say, wacl string.

2525
02:04:20,240 --> 02:04:22,760
So this is how I declare it, it's a string.

2526
02:04:22,760 --> 02:04:24,960
And then it's, what's the name of Darcy?

2527
02:04:24,960 --> 02:04:26,280
Oh, sorry, where is it?

2528
02:04:28,920 --> 02:04:30,880
Yeah, here, this is Darcy's full name.

2529
02:04:31,040 --> 02:04:32,040
I'll just copy it.

2530
02:04:33,840 --> 02:04:37,240
It would be nice if I can just do like a fussy search

2531
02:04:37,240 --> 02:04:38,760
for anybody who called Darcy,

2532
02:04:38,760 --> 02:04:42,120
but well, we are not stepping into that yet.

2533
02:04:42,120 --> 02:04:43,920
So let's just look at it.

2534
02:04:43,920 --> 02:04:46,000
If I know the full name of Darcy,

2535
02:04:46,000 --> 02:04:49,200
I want to find her contact detail.

2536
02:04:49,200 --> 02:04:51,680
So before that, I have to declare

2537
02:04:51,680 --> 02:04:54,880
that it's not a normal string, it's a wacl string.

2538
02:04:54,880 --> 02:04:57,480
It's a string type that we use in ThomasDB, okay?

2539
02:04:57,480 --> 02:05:00,800
So now we really make the query.

2540
02:05:00,800 --> 02:05:02,480
Query equals to wq.triple.

2541
02:05:05,600 --> 02:05:07,640
So what questions should I ask?

2542
02:05:07,640 --> 02:05:09,640
Okay, so I have a person, right?

2543
02:05:09,640 --> 02:05:13,440
So we have to make a variable in the query

2544
02:05:14,320 --> 02:05:17,160
because we don't know the ID of Darcy, right?

2545
02:05:17,160 --> 02:05:21,000
I don't know what Darcy's ID within the database,

2546
02:05:21,000 --> 02:05:24,760
so I will just ask someone that I know, a person.

2547
02:05:24,800 --> 02:05:28,720
So that name, so I have to do schema, I think.

2548
02:05:28,720 --> 02:05:31,760
Schema like that, name, I would double check.

2549
02:05:31,760 --> 02:05:34,520
So I have to say that, oh, there's a person,

2550
02:05:34,520 --> 02:05:39,520
name is Darcy, oh, not this one, but the wacl string.

2551
02:05:41,440 --> 02:05:42,840
The other way won't work

2552
02:05:42,840 --> 02:05:45,120
because it doesn't know that it's a wacl string.

2553
02:05:45,120 --> 02:05:50,120
So this person, so this query, if I run it,

2554
02:05:50,600 --> 02:05:53,440
it would give me the ID of Darcy, but it's not helpful

2555
02:05:53,440 --> 02:05:56,680
because I want to know the contact number, right?

2556
02:05:56,680 --> 02:06:00,760
So I have to add another one, add some condition,

2557
02:06:00,760 --> 02:06:01,760
add another triple.

2558
02:06:05,480 --> 02:06:07,560
The other triple will be the same person

2559
02:06:10,600 --> 02:06:14,600
who have a contact number.

2560
02:06:17,120 --> 02:06:19,560
And then I also don't know the contact number,

2561
02:06:19,560 --> 02:06:22,440
so phone number maybe, phone number.

2562
02:06:23,560 --> 02:06:24,560
Give me the number.

2563
02:06:36,800 --> 02:06:38,560
Like that, right?

2564
02:06:38,560 --> 02:06:39,840
I can't remember actually.

2565
02:06:44,040 --> 02:06:46,000
Oh, like this?

2566
02:06:47,000 --> 02:06:48,720
Oh, yeah, like that, yeah.

2567
02:06:48,720 --> 02:06:51,440
Actually I would double check whether I have the type

2568
02:06:51,440 --> 02:06:53,920
because I really can't remember whether I need to add or not.

2569
02:06:53,920 --> 02:06:56,080
So let me double check.

2570
02:06:56,080 --> 02:07:00,000
Yeah, I need to add, so it should work like that.

2571
02:07:01,520 --> 02:07:03,320
Sometimes I also have to reference it back

2572
02:07:03,320 --> 02:07:05,600
because this syntax is complex.

2573
02:07:06,680 --> 02:07:08,880
But I'm showing you the basic of the basics

2574
02:07:08,880 --> 02:07:12,200
so you can do it deeper when you want to yourself.

2575
02:07:12,200 --> 02:07:16,080
So, okay, so this is how I make it very simple for a query

2576
02:07:16,080 --> 02:07:21,080
is that I ask questions and then I will get the answer back.

2577
02:07:21,600 --> 02:07:23,520
That's variables, okay?

2578
02:07:23,520 --> 02:07:25,880
So now I want to know the phone number is a variable.

2579
02:07:25,880 --> 02:07:30,000
Well, I also accidentally got the ID, but well, I don't mind.

2580
02:07:30,960 --> 02:07:34,600
So when I have to query, I have to get the results from the query.

2581
02:07:34,600 --> 02:07:38,080
So result equals to query.execute.

2582
02:07:41,520 --> 02:07:43,720
Put the client in here, remember to put the client.

2583
02:07:44,800 --> 02:07:46,360
So now I should have a result back.

2584
02:07:47,400 --> 02:07:49,640
And I can print it out actually.

2585
02:07:49,640 --> 02:07:51,240
Let's print it out and see what happens.

2586
02:07:51,880 --> 02:07:56,200
Hello, yeah, we can debug as we go.

2587
02:07:56,200 --> 02:07:58,920
So let's do this again, right?

2588
02:07:58,920 --> 02:08:03,080
Clean it up and then do this and,

2589
02:08:03,080 --> 02:08:04,280
oh, I doesn't got anything.

2590
02:08:04,280 --> 02:08:05,640
I must have a typo or something.

2591
02:08:05,640 --> 02:08:07,000
Wait a second, let me fix it.

2592
02:08:07,000 --> 02:08:11,480
Oh, yeah, I spread it wrong or something.

2593
02:08:11,480 --> 02:08:13,440
Don't worry, I can just copy this.

2594
02:08:13,440 --> 02:08:15,440
Yeah, that's why it's quite difficult

2595
02:08:15,440 --> 02:08:19,360
because for someone like me, oh, no, not here.

2596
02:08:19,840 --> 02:08:22,880
For someone like me that make typos a lot,

2597
02:08:22,880 --> 02:08:25,600
then it's quite challenging because it's difficult to debug.

2598
02:08:27,120 --> 02:08:29,200
Yeah, I got it, okay.

2599
02:08:30,080 --> 02:08:31,640
Let's replace this.

2600
02:08:31,640 --> 02:08:33,680
Yeah, I just felt something wrong.

2601
02:08:33,680 --> 02:08:35,040
So yeah, let's try again.

2602
02:08:40,240 --> 02:08:44,720
So, yes, I got something back.

2603
02:08:44,720 --> 02:08:47,320
I asked the right question this time.

2604
02:08:47,320 --> 02:08:48,600
So there are the findings.

2605
02:08:48,640 --> 02:08:50,320
So this time we have the bindings.

2606
02:08:51,520 --> 02:08:52,440
So we have the person.

2607
02:08:52,440 --> 02:08:54,320
So actually, I accidentally also got the ID,

2608
02:08:54,320 --> 02:08:55,760
but I didn't care.

2609
02:08:55,760 --> 02:08:59,240
But what's important is that I have the phone number,

2610
02:08:59,240 --> 02:09:02,760
which is this one here, right?

2611
02:09:02,760 --> 02:09:05,600
So you can peel everything off like an onion.

2612
02:09:05,600 --> 02:09:08,520
You can peel it off and find the answer here.

2613
02:09:08,520 --> 02:09:12,680
But I think I already did in the code in the model answer here.

2614
02:09:12,680 --> 02:09:16,760
So, yeah, if I found it, then I just go to the bindings,

2615
02:09:16,800 --> 02:09:20,080
get it, and then get the phone number and the value and stuff.

2616
02:09:20,080 --> 02:09:21,600
Otherwise, I can't find anything.

2617
02:09:21,600 --> 02:09:24,080
So this is a very nice Python code.

2618
02:09:24,080 --> 02:09:25,640
We'll just paste it here.

2619
02:09:25,640 --> 02:09:28,680
We'll print out the result for you, thank you.

2620
02:09:28,680 --> 02:09:29,760
Yeah, so this time if I run it,

2621
02:09:29,760 --> 02:09:32,400
it will be very nicely presented to me.

2622
02:09:32,400 --> 02:09:33,240
All right.

2623
02:09:34,240 --> 02:09:36,480
Yes, now I have the contact number.

2624
02:09:36,480 --> 02:09:37,720
Good.

2625
02:09:37,720 --> 02:09:42,200
So this is how you can query by using the triple.

2626
02:09:42,200 --> 02:09:43,680
There are simpler way to do it.

2627
02:09:43,680 --> 02:09:45,480
It's called query document.

2628
02:09:45,480 --> 02:09:49,000
Then you can get all the information about Darcy, actually.

2629
02:09:49,000 --> 02:09:54,000
But, well, this is more fun.

2630
02:09:54,120 --> 02:09:55,920
It's more fun to just make triple and stuff.

2631
02:09:55,920 --> 02:09:57,320
I love it.

2632
02:09:57,320 --> 02:09:59,960
So now ask a more difficult question,

2633
02:09:59,960 --> 02:10:02,560
which I think is better to answer with triple

2634
02:10:02,560 --> 02:10:07,560
than query documents, is that now imagine Darcy is on holiday

2635
02:10:07,880 --> 02:10:11,360
and I really need to talk to someone in a company

2636
02:10:11,360 --> 02:10:12,280
about something.

2637
02:10:12,280 --> 02:10:14,640
So maybe I should talk to Darcy's manager, right?

2638
02:10:14,640 --> 02:10:17,520
So how can I do that?

2639
02:10:17,520 --> 02:10:22,360
Because, well, imagine if you are making SQL query,

2640
02:10:22,360 --> 02:10:24,560
you'll have to first find the manager of Darcy

2641
02:10:24,560 --> 02:10:28,520
and then find the phone number of Darcy's manager.

2642
02:10:29,520 --> 02:10:33,680
But in Wacol, we can just traverse the graph

2643
02:10:33,680 --> 02:10:36,240
instead of joining it back using the key.

2644
02:10:36,240 --> 02:10:38,320
Remember the employee ID is the primary key

2645
02:10:38,320 --> 02:10:39,440
and then you have to join back together

2646
02:10:39,440 --> 02:10:41,200
to find who is the manager of who.

2647
02:10:41,200 --> 02:10:42,800
We can just traverse the graph

2648
02:10:42,800 --> 02:10:44,800
and use triple to find the answer.

2649
02:10:44,800 --> 02:10:47,200
So here's how we do it.

2650
02:10:47,200 --> 02:10:49,060
So this time, Darcy's on holiday,

2651
02:10:49,060 --> 02:10:51,520
so we make another query.

2652
02:10:51,520 --> 02:10:54,720
So query is, so this time,

2653
02:10:54,720 --> 02:10:56,160
so I know someone who's called Darcy,

2654
02:10:56,160 --> 02:10:59,200
so let's get this begin, right?

2655
02:10:59,200 --> 02:11:01,480
But this time instead of getting Darcy's number,

2656
02:11:01,480 --> 02:11:04,000
I want to get who's Darcy's manager.

2657
02:11:04,000 --> 02:11:06,120
So I do the similar thing,

2658
02:11:06,120 --> 02:11:07,760
but it's just I'm a one manager.

2659
02:11:08,600 --> 02:11:13,360
So I want manager,

2660
02:11:14,680 --> 02:11:18,360
and this time I should call the manager a manager

2661
02:11:18,360 --> 02:11:21,540
because I don't even know the name of the manager, okay?

2662
02:11:21,540 --> 02:11:23,920
I don't know anything about the company, imagine.

2663
02:11:23,920 --> 02:11:27,200
So I would have,

2664
02:11:28,480 --> 02:11:30,600
I have two variables here so far.

2665
02:11:30,600 --> 02:11:34,120
I would have a person, which is Darcy,

2666
02:11:34,120 --> 02:11:36,720
but I don't know the ID of Darcy.

2667
02:11:36,720 --> 02:11:38,760
And the ID of Darcy's manager,

2668
02:11:38,760 --> 02:11:40,820
but it's not good enough because I know the ID,

2669
02:11:40,820 --> 02:11:42,280
but I don't know what's the name

2670
02:11:42,280 --> 02:11:45,460
and the contact number of this person, so, of the manager.

2671
02:11:45,460 --> 02:11:50,080
So what I'm gonna do is to also get the phone number

2672
02:11:50,080 --> 02:11:51,480
of Darcy's manager.

2673
02:11:51,480 --> 02:11:53,580
So it's very similar to what we did here.

2674
02:11:54,800 --> 02:11:57,280
So we just recycle the code.

2675
02:11:57,280 --> 02:11:59,700
So here is that person, I want manager.

2676
02:12:02,720 --> 02:12:06,420
And then also maybe I should have the name as well

2677
02:12:06,420 --> 02:12:09,860
just to be polite and be able to call the person's name

2678
02:12:09,860 --> 02:12:10,860
on the phone number.

2679
02:12:12,300 --> 02:12:15,880
So I want to have the manager's name.

2680
02:12:19,120 --> 02:12:23,540
So is that phone number, maybe I should be manager name.

2681
02:12:25,900 --> 02:12:26,820
So something like that.

2682
02:12:26,820 --> 02:12:29,700
So if I run this query, I should be able to get

2683
02:12:29,700 --> 02:12:32,220
Darcy's ID, which is person.

2684
02:12:32,220 --> 02:12:35,300
I should be able to get the manager's ID, which is manager.

2685
02:12:35,300 --> 02:12:38,700
I should be able to get the phone number of the manager

2686
02:12:38,700 --> 02:12:40,260
and the name of the manager.

2687
02:12:41,420 --> 02:12:45,940
So again, I can do result.execute.

2688
02:12:48,100 --> 02:12:50,740
And I put the client in it, remember to put the client in it.

2689
02:12:50,740 --> 02:12:54,740
Oh, result equals to, sorry, query.result.

2690
02:12:59,220 --> 02:13:01,340
Because we have merging result and query together now.

2691
02:13:01,340 --> 02:13:02,820
I'm like so crazy.

2692
02:13:03,380 --> 02:13:05,620
So let's print the binding of it.

2693
02:13:05,620 --> 02:13:09,100
Let's try to just imagine it works and print a binding

2694
02:13:09,100 --> 02:13:11,100
of it to see whether we can see something.

2695
02:13:13,340 --> 02:13:15,340
Code bindings, yes.

2696
02:13:15,340 --> 02:13:17,740
Let's see if it works.

2697
02:13:27,100 --> 02:13:30,000
Oh, manager, manager, man.

2698
02:13:32,820 --> 02:13:33,660
This one?

2699
02:13:33,660 --> 02:13:34,500
Yeah.

2700
02:13:39,140 --> 02:13:40,980
I love this like live debugging.

2701
02:13:44,260 --> 02:13:45,900
I wish my robot can do the same thing.

2702
02:13:45,900 --> 02:13:47,860
It will tell me you have to talk.

2703
02:13:47,860 --> 02:13:50,340
Okay, well, right.

2704
02:13:50,340 --> 02:13:51,540
Let's see.

2705
02:13:54,180 --> 02:13:56,940
Okay, so ignore what we did before.

2706
02:13:56,940 --> 02:14:00,940
So we have the binding, which I have a manager's ID, yes.

2707
02:14:00,980 --> 02:14:03,940
Our manager's name is a string, it's called Destiny.

2708
02:14:03,940 --> 02:14:05,460
Oh, good.

2709
02:14:05,460 --> 02:14:09,620
So we have ID for the person, which is Darcy.

2710
02:14:09,620 --> 02:14:12,340
And we have the phone number of Destiny this time.

2711
02:14:12,340 --> 02:14:15,500
So we can probably print it out like before

2712
02:14:15,500 --> 02:14:16,340
to make it nicer.

2713
02:14:16,340 --> 02:14:20,100
So if you copy the code from the model answer,

2714
02:14:20,100 --> 02:14:22,100
it should print out very nicely for you.

2715
02:14:23,500 --> 02:14:24,340
Yeah.

2716
02:14:27,540 --> 02:14:30,820
Copy the whole thing and paste it the whole thing.

2717
02:14:31,660 --> 02:14:32,500
Okay, and it should work.

2718
02:14:32,500 --> 02:14:33,320
Let's see.

2719
02:14:38,380 --> 02:14:39,820
Yes, so now I have the manager's name

2720
02:14:39,820 --> 02:14:41,580
and the manager's contact number.

2721
02:14:41,580 --> 02:14:45,220
So this is a taste of how you can make use

2722
02:14:45,220 --> 02:14:47,780
of Wacom Query to actually,

2723
02:14:49,380 --> 02:14:51,780
when you see how I do it, right,

2724
02:14:51,780 --> 02:14:53,820
of course I think about that before,

2725
02:14:53,820 --> 02:14:55,580
but this is exactly my thought process

2726
02:14:55,580 --> 02:14:57,340
when I'm creating this query.

2727
02:14:57,340 --> 02:14:58,660
I'm like asking question.

2728
02:14:58,660 --> 02:15:00,980
I'm asking, oh, what do I want to know?

2729
02:15:00,980 --> 02:15:03,700
And then making variables to link up all this information.

2730
02:15:03,700 --> 02:15:06,900
It's just like linking triples to build a world.

2731
02:15:06,900 --> 02:15:08,540
But instead of building the world for sure,

2732
02:15:08,540 --> 02:15:10,420
I have variables in it.

2733
02:15:10,420 --> 02:15:14,220
But by answering, so what happened is that

2734
02:15:14,220 --> 02:15:17,280
Thomas DB will take this query and then put it,

2735
02:15:17,280 --> 02:15:19,540
so you have some variables, you have a hole in it.

2736
02:15:19,540 --> 02:15:20,380
It's fine, it's okay.

2737
02:15:20,380 --> 02:15:23,220
You just put this on top of the graph

2738
02:15:23,220 --> 02:15:25,780
and then the answer will shine through this hole

2739
02:15:25,780 --> 02:15:28,260
and come back to you as an answer.

2740
02:15:28,820 --> 02:15:30,020
So this is very efficient.

2741
02:15:30,020 --> 02:15:32,340
Imagine you have a big company

2742
02:15:32,340 --> 02:15:34,220
and you have to do a join,

2743
02:15:34,220 --> 02:15:37,860
like using the table and join it back to itself again.

2744
02:15:37,860 --> 02:15:41,380
Or maybe you have to also join a contact table together

2745
02:15:41,380 --> 02:15:44,740
and all this stuff to get this answer,

2746
02:15:44,740 --> 02:15:46,180
which is crazy.

2747
02:15:47,740 --> 02:15:52,740
Now you just need to think of how I can get the answer

2748
02:15:52,740 --> 02:15:54,700
by using the variables and go through the graph

2749
02:15:54,700 --> 02:15:56,580
and then you can get the answer.

2750
02:15:56,580 --> 02:16:00,380
So this is very different from what we know.

2751
02:16:01,340 --> 02:16:02,940
You run applications like

2752
02:16:02,940 --> 02:16:04,460
counting, working with it,

2753
02:16:04,460 --> 02:16:08,300
keeping the group of the group in mind.

2754
02:16:08,300 --> 02:16:09,140
Yes, exactly.

2755
02:16:09,140 --> 02:16:11,540
We also have that in Wacol, but that's more complicated.

2756
02:16:11,540 --> 02:16:14,180
And if you're interested,

2757
02:16:14,180 --> 02:16:16,580
you can have a look at the documentation.

2758
02:16:17,740 --> 02:16:19,100
Yeah, it's available there.

2759
02:16:19,100 --> 02:16:20,180
There's the count.

2760
02:16:20,180 --> 02:16:24,140
If you look at the Wacol documentation on the website,

2761
02:16:24,140 --> 02:16:26,460
actually, yeah, we're still building it,

2762
02:16:27,340 --> 02:16:28,460
but yeah, we do have the counts.

2763
02:16:28,460 --> 02:16:31,140
We do have the goodbye and all this stuff,

2764
02:16:31,140 --> 02:16:32,740
but that will be more complicated.

2765
02:16:34,180 --> 02:16:37,580
That's very scary for me to do those things,

2766
02:16:37,580 --> 02:16:38,820
but it's available.

2767
02:16:38,820 --> 02:16:39,980
That's all I can say, tell you.

2768
02:16:39,980 --> 02:16:40,820
Yes.

2769
02:16:41,740 --> 02:16:46,740
You talked about the impact in the TRIBLE packet.

2770
02:16:46,820 --> 02:16:48,980
Why is there a B colon compound

2771
02:16:48,980 --> 02:16:52,700
with the app team on the community climate for us?

2772
02:16:52,700 --> 02:16:56,380
Yes, the B colon actually is a variable.

2773
02:16:57,220 --> 02:16:58,460
So you see that here,

2774
02:16:58,460 --> 02:17:01,780
all the B colon will get the answer at the binding.

2775
02:17:01,780 --> 02:17:02,900
You see all the bindings.

2776
02:17:02,900 --> 02:17:06,900
It's giving me the manager, manager name.

2777
02:17:06,900 --> 02:17:08,500
So these are the variables we created

2778
02:17:08,500 --> 02:17:10,420
by using the B colon here.

2779
02:17:10,420 --> 02:17:13,420
So that's the answer that we will get back.

2780
02:17:13,420 --> 02:17:16,380
We can also use this to link up different questions,

2781
02:17:16,380 --> 02:17:17,540
different TRIBLES.

2782
02:17:17,540 --> 02:17:18,380
That's how we do it.

2783
02:17:19,740 --> 02:17:21,940
Also for the schema thing,

2784
02:17:21,940 --> 02:17:24,860
this is just saying that it's a property.

2785
02:17:24,860 --> 02:17:26,100
So it's a property from the schema.

2786
02:17:26,820 --> 02:17:27,780
It's just saying that, oh, what is this manager?

2787
02:17:27,780 --> 02:17:30,220
Because manager is a name that's very ambiguous.

2788
02:17:31,180 --> 02:17:33,620
But a schema just means, oh, look it up.

2789
02:17:33,620 --> 02:17:34,580
Look at the schema.

2790
02:17:34,580 --> 02:17:36,420
So yeah, it's a property.

2791
02:17:36,420 --> 02:17:37,660
It's declared in the schema.

2792
02:17:37,660 --> 02:17:38,500
Look at it.

2793
02:17:38,500 --> 02:17:40,500
So that's why there's this.

2794
02:17:41,540 --> 02:17:43,060
Are there other side-frames?

2795
02:17:43,060 --> 02:17:46,700
There could be, there could be a team-wide or other?

2796
02:17:46,700 --> 02:17:47,540
There are.

2797
02:17:48,580 --> 02:17:50,220
I have to look it up.

2798
02:17:50,220 --> 02:17:53,140
I'm not so sure, but if you look at the big,

2799
02:17:53,140 --> 02:17:54,700
this star thing before,

2800
02:17:55,580 --> 02:17:57,540
all you can see are the schemas.

2801
02:17:57,540 --> 02:17:58,980
Usually the thing we start with add

2802
02:17:58,980 --> 02:18:02,740
is some keyword that we use internally in TerminusDB.

2803
02:18:02,740 --> 02:18:06,380
So there are also other stuff like RDF.

2804
02:18:06,380 --> 02:18:11,380
So RDF is declared because we are knowledge graph, right?

2805
02:18:11,380 --> 02:18:13,940
So it's a hidden feature.

2806
02:18:13,940 --> 02:18:18,620
So every graph hidden, there's an RDF document

2807
02:18:18,620 --> 02:18:22,260
that kind of store all the default things for the graph,

2808
02:18:22,260 --> 02:18:23,860
so all the settings for the graph.

2809
02:18:23,900 --> 02:18:25,420
So this is RDF type.

2810
02:18:25,420 --> 02:18:27,660
It's just saying that it's a type keyword

2811
02:18:27,660 --> 02:18:32,300
that is declared in the RDF file internally,

2812
02:18:32,300 --> 02:18:33,700
so something like that.

2813
02:18:33,700 --> 02:18:38,580
So also XSD is a standard type or something like that.

2814
02:18:38,580 --> 02:18:41,260
So yeah, there are a few of these things,

2815
02:18:41,260 --> 02:18:44,940
but yeah, it's more advanced, I would say,

2816
02:18:44,940 --> 02:18:46,940
if you want to dive deeper.

2817
02:18:46,940 --> 02:18:47,780
So yeah.

2818
02:18:48,740 --> 02:18:49,580
Yes.

2819
02:18:49,740 --> 02:18:51,700
Can you describe in some detail

2820
02:18:51,700 --> 02:18:53,140
how this makes a difference,

2821
02:18:53,140 --> 02:18:55,940
if you say MOTO or NOSECRO,

2822
02:18:55,940 --> 02:18:57,700
where you're looking at some sort of document

2823
02:18:57,700 --> 02:18:59,180
and you're making a mark on the object

2824
02:18:59,180 --> 02:19:00,300
in the document,

2825
02:19:00,300 --> 02:19:03,300
how is that coming into your graph

2826
02:19:03,300 --> 02:19:05,260
to say they're for a different page and then,

2827
02:19:05,260 --> 02:19:07,580
I think you call it that in Terminus?

2828
02:19:07,580 --> 02:19:08,420
Yeah, so.

2829
02:19:09,380 --> 02:19:10,900
So NOSECRO, well.

2830
02:19:10,900 --> 02:19:13,500
And why do you use MOTO again?

2831
02:19:13,500 --> 02:19:15,700
Yeah, NOSECRO is the thing,

2832
02:19:15,700 --> 02:19:19,220
it's like how we do this triple phase,

2833
02:19:19,220 --> 02:19:22,460
because NOSECRO is more similar

2834
02:19:22,460 --> 02:19:25,100
to the document interface that we created.

2835
02:19:25,100 --> 02:19:28,460
This is what is more unique to Knowledge Graph

2836
02:19:28,460 --> 02:19:30,780
that we are looking at at the end here.

2837
02:19:30,780 --> 02:19:34,860
So a document, that's why we have both available,

2838
02:19:34,860 --> 02:19:36,540
because this is very scary.

2839
02:19:37,820 --> 02:19:40,500
Unless you are from an academic background

2840
02:19:40,500 --> 02:19:42,460
that you deal with as an academic Knowledge Graph

2841
02:19:42,460 --> 02:19:43,700
all the time, then you're afraid,

2842
02:19:43,700 --> 02:19:46,060
humans will make sense, this is no problem.

2843
02:19:46,100 --> 02:19:51,100
But most people can work with what the document interface

2844
02:19:51,660 --> 02:19:56,660
or the syntax closer to NOSECRO much easier,

2845
02:19:56,660 --> 02:19:59,540
because it's very structured in a way that is,

2846
02:19:59,540 --> 02:20:00,380
oh, these are the object

2847
02:20:00,380 --> 02:20:02,220
and this is the property of the object.

2848
02:20:02,220 --> 02:20:04,620
So it's more like an object-oriented programming,

2849
02:20:04,620 --> 02:20:06,820
the object-oriented programming.

2850
02:20:06,820 --> 02:20:09,900
So at the beginning, when we have TerminusDB,

2851
02:20:09,900 --> 02:20:14,660
so we only have this, so it's a Knowledge Graph.

2852
02:20:14,660 --> 02:20:15,980
So everything is a Knowledge Graph.

2853
02:20:16,900 --> 02:20:18,220
Internally, it works like that.

2854
02:20:18,220 --> 02:20:20,900
For someone who worked with it, you need to understand it.

2855
02:20:20,900 --> 02:20:23,900
And then later, we discovered that it's too limited.

2856
02:20:23,900 --> 02:20:27,340
So we created a document interface

2857
02:20:27,340 --> 02:20:32,340
that you could actually use for syntax to work with.

2858
02:20:32,780 --> 02:20:36,260
So that's why today, we are trying to use both.

2859
02:20:36,260 --> 02:20:38,580
We tried a little bit of the document interface

2860
02:20:38,580 --> 02:20:40,460
at the beginning, it's simpler,

2861
02:20:40,460 --> 02:20:43,100
it's got us to work so faster, you can see,

2862
02:20:43,100 --> 02:20:44,980
you already have a simple Knowledge Graph very quickly,

2863
02:20:45,020 --> 02:20:47,180
it's been an hour or so.

2864
02:20:47,180 --> 02:20:51,100
But then, at the end, we try to apply what we learned today,

2865
02:20:51,100 --> 02:20:53,500
but it takes practice to be very fluent with it.

2866
02:20:53,500 --> 02:20:56,500
So we kind of start to use a little bit of triple,

2867
02:20:56,500 --> 02:20:59,700
understanding how triple works and stuff.

2868
02:21:00,700 --> 02:21:02,820
How triple works and stuff.

2869
02:21:04,100 --> 02:21:06,260
Ooh, good, I hope I did okay.

2870
02:21:08,460 --> 02:21:11,100
So you can see that TerminusDB can work with both.

2871
02:21:11,100 --> 02:21:12,860
So I think it's the advantage.

2872
02:21:13,260 --> 02:21:15,300
You can use both.

2873
02:21:18,100 --> 02:21:18,940
Yes?

2874
02:21:19,940 --> 02:21:22,500
If you have a more than knowledge graph,

2875
02:21:22,500 --> 02:21:25,300
it may be often a more kind of connection,

2876
02:21:25,300 --> 02:21:27,300
more kind of relationship,

2877
02:21:27,300 --> 02:21:28,620
and you will find a lot of it,

2878
02:21:28,620 --> 02:21:30,420
you don't need to keep a label,

2879
02:21:30,420 --> 02:21:34,220
because maybe, oh, what's that the algorithm is?

2880
02:21:34,220 --> 02:21:38,540
That came from a way to do kind of self-collection graphs.

2881
02:21:38,540 --> 02:21:41,300
Are you thinking about the A-class, like this,

2882
02:21:41,300 --> 02:21:43,780
or something like this?

2883
02:21:43,780 --> 02:21:44,620
Yeah, you mean the graph.

2884
02:21:44,620 --> 02:21:47,940
It's kind of a lot of what people know.

2885
02:21:49,260 --> 02:21:51,340
So you're talking about the graph algorithms, right?

2886
02:21:51,340 --> 02:21:53,460
Like, oh, how many neighbors are there?

2887
02:21:53,460 --> 02:21:55,620
Those are not available yet, I can tell you.

2888
02:21:55,620 --> 02:21:57,380
Because I know it's available in new projects,

2889
02:21:57,380 --> 02:22:00,580
but actually, you just need to,

2890
02:22:00,580 --> 02:22:02,540
actually, it could be something that just add on,

2891
02:22:02,540 --> 02:22:05,260
because our core team, well, we are a small team,

2892
02:22:05,260 --> 02:22:08,060
the core team basically work on the inner working of this,

2893
02:22:08,060 --> 02:22:10,580
try to optimize it, build a foundation.

2894
02:22:10,580 --> 02:22:12,140
I would say this is the foundation.

2895
02:22:12,140 --> 02:22:13,420
All those things that you mentioned,

2896
02:22:13,420 --> 02:22:15,060
the graph algorithm and stuff,

2897
02:22:15,060 --> 02:22:18,700
are the stuff that you can edit on top.

2898
02:22:19,660 --> 02:22:24,020
It takes time to implement, but it's not as difficult as,

2899
02:22:24,020 --> 02:22:27,780
like, to, our most effort now is to polish this,

2900
02:22:27,780 --> 02:22:30,100
to make this foundation work well.

2901
02:22:30,100 --> 02:22:32,700
And then, when we grow, when the company grow,

2902
02:22:32,700 --> 02:22:34,980
when the team grow, then we can add those algorithms.

2903
02:22:34,980 --> 02:22:37,300
You just need someone who just specialize

2904
02:22:37,300 --> 02:22:40,340
in writing those algorithms, put it on top.

2905
02:22:40,340 --> 02:22:41,700
I won't say it's not difficult,

2906
02:22:41,700 --> 02:22:45,220
but it's just like, it's not the main focus for us right now.

2907
02:22:45,220 --> 02:22:47,860
So, well, hopefully in the future, we have those.

2908
02:22:47,860 --> 02:22:48,700
Yeah.

2909
02:22:50,620 --> 02:22:51,460
Yes?

2910
02:22:51,460 --> 02:22:52,980
Sorry, I just wanted to ask you,

2911
02:22:52,980 --> 02:22:55,980
but so we've been talking about graph editing,

2912
02:22:55,980 --> 02:23:00,140
so you said you do that in a way that you know is an edge.

2913
02:23:00,140 --> 02:23:03,420
You know, and can you help us understand

2914
02:23:03,420 --> 02:23:06,860
how triples equate to those in the way

2915
02:23:06,860 --> 02:23:09,220
that you can get all the data?

2916
02:23:09,220 --> 02:23:13,220
Yeah, I would say that you can think.

2917
02:23:13,220 --> 02:23:15,700
So, yeah, I also have the same question

2918
02:23:15,700 --> 02:23:18,140
when I started to use the triple and all this stuff

2919
02:23:18,140 --> 02:23:20,580
to understand semantic knowledge graph.

2920
02:23:20,580 --> 02:23:21,980
Sometimes it seemed that we are talking

2921
02:23:21,980 --> 02:23:24,500
about two different languages because, you know,

2922
02:23:24,500 --> 02:23:28,100
oh, triple is so big, you know,

2923
02:23:28,100 --> 02:23:30,420
you can also describe the properties of that.

2924
02:23:30,420 --> 02:23:32,180
But if you think about it, right,

2925
02:23:32,180 --> 02:23:35,020
if we can look at it as the document interface.

2926
02:23:35,020 --> 02:23:36,420
So, if we look at the documents,

2927
02:23:36,420 --> 02:23:39,380
you can imagine documents are notes, right?

2928
02:23:39,380 --> 02:23:41,340
And then you can imagine the object properties

2929
02:23:41,340 --> 02:23:44,580
are the edges that we talk about.

2930
02:23:44,620 --> 02:23:45,860
But then you will be like,

2931
02:23:45,860 --> 02:23:48,780
oh, what about the data type properties?

2932
02:23:48,780 --> 02:23:50,740
Then it's a bit complicated.

2933
02:23:50,740 --> 02:23:53,980
Then you have to also consider the XFD types,

2934
02:23:53,980 --> 02:23:56,780
the literal types as also notes,

2935
02:23:56,780 --> 02:23:59,860
which doesn't feel correct.

2936
02:23:59,860 --> 02:24:03,140
So, if this is a graph that you ignore

2937
02:24:03,140 --> 02:24:05,420
all the data types, properties,

2938
02:24:05,420 --> 02:24:07,500
if you only look at object properties,

2939
02:24:07,500 --> 02:24:11,180
it's like what we said, they're objects, they're notes,

2940
02:24:11,180 --> 02:24:13,340
and they are the lanes, which are the edges.

2941
02:24:13,340 --> 02:24:16,460
But if you include data type properties, it's more,

2942
02:24:17,500 --> 02:24:19,740
and then it doesn't seem that it aligns.

2943
02:24:19,740 --> 02:24:20,660
Does it make sense?

2944
02:24:20,660 --> 02:24:21,500
Yeah.

2945
02:24:24,620 --> 02:24:25,620
Any questions?

2946
02:24:28,220 --> 02:24:29,180
I don't know about the time,

2947
02:24:29,180 --> 02:24:31,140
what time does this tutorial end?

2948
02:24:32,940 --> 02:24:33,780
Double check?

2949
02:24:34,660 --> 02:24:36,620
Yeah, sorry, I'm so bad with the time.

2950
02:24:36,620 --> 02:24:39,220
I think we, okay, we still have half an hour.

2951
02:24:39,220 --> 02:24:42,500
So, I would say that the rest of the time

2952
02:24:42,500 --> 02:24:46,860
you can feel free to play around with the other lessons.

2953
02:24:47,820 --> 02:24:49,260
Or if you have more questions

2954
02:24:49,260 --> 02:24:50,900
and you want to ask me one-to-one,

2955
02:24:50,900 --> 02:24:54,420
or yeah, then feel free to do so.

2956
02:24:54,420 --> 02:24:57,300
I think I would leave this podium,

2957
02:24:57,300 --> 02:24:58,420
but I would come around,

2958
02:24:58,420 --> 02:25:00,700
and then you can play around with stuff.

2959
02:25:00,700 --> 02:25:04,540
You can ask me questions more one-to-one

2960
02:25:04,540 --> 02:25:06,100
so I can answer it better,

2961
02:25:06,100 --> 02:25:08,060
because sometimes I can't hear you or something.

2962
02:25:08,060 --> 02:25:11,860
So, yeah, so the rest of the time is yours.

2963
02:25:11,860 --> 02:25:12,700
Do whatever you like.

2964
02:25:12,700 --> 02:25:13,940
Or if you have other plans,

2965
02:25:13,940 --> 02:25:15,100
you want to leave early, it's fine.

2966
02:25:15,100 --> 02:25:16,740
You're welcome to do that as well.

2967
02:25:16,740 --> 02:25:19,420
But I will stay here and answer your questions, okay?

2968
02:25:21,020 --> 02:25:22,780
So, oh, oh, I forgot the closing.

2969
02:25:22,780 --> 02:25:23,900
So, let me quickly do the closing,

2970
02:25:23,900 --> 02:25:26,020
and then you can do whatever you like, okay?

2971
02:25:26,020 --> 02:25:28,780
So, just a few slides just to close it.

2972
02:25:28,780 --> 02:25:32,140
So, this is summarize what we have learned.

2973
02:25:33,860 --> 02:25:35,820
So, we have learned a few things.

2974
02:25:35,820 --> 02:25:37,340
We have learned that what is Knowledge Graph.

2975
02:25:37,340 --> 02:25:39,980
We've learned that Knowledge Graph model,

2976
02:25:39,980 --> 02:25:42,660
that's something that they can do.

2977
02:25:42,660 --> 02:25:46,540
That's how they work different from the relational database,

2978
02:25:46,540 --> 02:25:50,060
and there's lots of good questions about how they compare.

2979
02:25:50,060 --> 02:25:52,980
There's like what's the advantage of thinking things

2980
02:25:52,980 --> 02:25:54,540
like the scary triples.

2981
02:25:55,820 --> 02:25:58,460
Also, how we have already achieved

2982
02:25:58,460 --> 02:26:02,980
how we can model a data from 2Ds

2983
02:26:02,980 --> 02:26:07,980
with the spreadsheets or CSVs into a graph.

2984
02:26:08,260 --> 02:26:10,900
And then we also try to play with triple,

2985
02:26:10,900 --> 02:26:15,900
try to use triple to ask questions and make queries.

2986
02:26:16,300 --> 02:26:18,620
So, I think we have achieved quite a lot today.

2987
02:26:18,620 --> 02:26:20,980
So, you should be proud of yourself.

2988
02:26:20,980 --> 02:26:24,140
If you have more questions, this is how to find a team.

2989
02:26:24,140 --> 02:26:26,740
We have Discord, if you use Discord, join that.

2990
02:26:26,740 --> 02:26:30,260
And like my colleagues, they are more knowledgeable than me.

2991
02:26:30,260 --> 02:26:31,820
They can answer your questions.

2992
02:26:31,820 --> 02:26:35,180
Sometimes specific questions about internals of the database

2993
02:26:35,180 --> 02:26:37,700
or questions about JavaScript,

2994
02:26:38,540 --> 02:26:39,780
how to use the drafts for quiet and all that stuff.

2995
02:26:39,780 --> 02:26:42,580
Please come and talk to us, love to talk to you.

2996
02:26:42,580 --> 02:26:44,700
And I think that's it, so do whatever you like,

2997
02:26:44,700 --> 02:26:47,740
and I will stay here and answer your questions, okay?

2998
02:26:47,740 --> 02:26:48,580
Thank you.

2999
02:26:48,580 --> 02:26:49,400
Thank you.

3000
02:26:49,400 --> 02:26:50,240
Thank you.

3001
02:26:50,240 --> 02:26:51,080
Thank you.

3002
02:26:51,080 --> 02:26:51,900
Thank you.

3003
02:26:51,900 --> 02:26:52,740
Thank you.

3004
02:26:52,740 --> 02:26:53,580
Thank you.

