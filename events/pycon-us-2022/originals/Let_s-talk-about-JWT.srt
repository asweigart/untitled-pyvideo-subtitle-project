1
00:00:00,000 --> 00:00:07,040
I'm super happy to be here.

2
00:00:07,040 --> 00:00:10,760
And in case you don't know me yet, let me introduce myself.

3
00:00:10,760 --> 00:00:15,240
Hi, I'm Jessica, but you can call me Jess.

4
00:00:15,240 --> 00:00:17,600
My pronouns are she and her.

5
00:00:17,600 --> 00:00:21,100
And I work as a senior developer advocate at Auth0.

6
00:00:21,100 --> 00:00:24,000
If you don't know what Auth0 is, not a problem.

7
00:00:24,000 --> 00:00:29,920
We are an identity platform, so we make it as easy as possible for you to implement authentication

8
00:00:29,920 --> 00:00:34,840
on your applications so that you can focus on the fun stuff that you want to do for your

9
00:00:34,840 --> 00:00:35,840
users, right?

10
00:00:35,840 --> 00:00:37,280
We all want to do that.

11
00:00:37,280 --> 00:00:40,520
I'm also an instructor at Data Boot Camp and LinkinD Learning.

12
00:00:40,520 --> 00:00:46,120
I'm Brazilian, and I have the first podcast about data science in Brazil called Pizza

13
00:00:46,120 --> 00:00:47,120
de Dados.

14
00:00:47,120 --> 00:00:52,600
My last project that I just created is called Git Fishes, and it's a collection of Git

15
00:00:52,600 --> 00:00:53,600
study cards.

16
00:00:53,600 --> 00:00:55,800
So if you need help with Git, check it out.

17
00:00:56,000 --> 00:01:01,000
Also, you may find me on most social networks under the handle Jess Temporal, so if you

18
00:01:01,000 --> 00:01:05,360
are shy and no one that asks questions right here, you can find me on Twitter later.

19
00:01:05,360 --> 00:01:06,360
Cool?

20
00:01:06,360 --> 00:01:07,360
But enough about me.

21
00:01:07,360 --> 00:01:10,840
And a little disclaimer before we get started.

22
00:01:10,840 --> 00:01:16,640
So I come from Brazil, and I know for a fact that most countries that don't speak English

23
00:01:16,640 --> 00:01:22,360
as a first language prefer to call JSON Web Tokens JWT.

24
00:01:22,400 --> 00:01:28,040
But if you come from an English-speaking country, you might hear the word JOT.

25
00:01:28,040 --> 00:01:33,240
So I'm going to be using those two terms along the presentation, so just get used to that.

26
00:01:33,240 --> 00:01:36,760
It's a little weird, I might be honest.

27
00:01:36,760 --> 00:01:41,800
The first time I ever heard about this, I was like, oh, interesting, something new.

28
00:01:41,800 --> 00:01:47,040
But anyways, you're going to get used to it along this presentation.

29
00:01:47,080 --> 00:01:53,800
So it is impossible to start talking about JSON Web Tokens without mentioning the amazing

30
00:01:53,800 --> 00:02:00,280
effort that was made to create a collection of standards and specifications that is known

31
00:02:00,280 --> 00:02:02,680
as the Hosea specification.

32
00:02:02,680 --> 00:02:10,600
Hosea stands for JSON Objects, Signing, and Encryption, and it brings light to many things

33
00:02:10,600 --> 00:02:16,480
that we need to work with JSON Web Tokens and other objects that we might need while

34
00:02:16,480 --> 00:02:19,400
working on the web.

35
00:02:19,400 --> 00:02:27,680
So part of the Hosea specification is the IFC, the Request for Comments 7519, that is

36
00:02:27,680 --> 00:02:32,480
commonly known as the JOT or JWT specification.

37
00:02:32,480 --> 00:02:35,400
And that's going to be our main focus for today.

38
00:02:35,400 --> 00:02:37,040
Let's discuss it.

39
00:02:37,040 --> 00:02:45,120
So a JOT or a JSON Web Token usually is a standardized string that represents some information.

40
00:02:45,120 --> 00:02:49,360
So it conveys some meaning depending on context.

41
00:02:49,360 --> 00:02:51,080
But let's take a closer look.

42
00:02:51,080 --> 00:02:56,960
So we have three words, JSON, which means how we're going to structure the information

43
00:02:56,960 --> 00:03:01,240
that we want to pass from 1.8 to 1.8.

44
00:03:02,240 --> 00:03:06,440
So JSON Web Token is the part where everything happens, where we make this information go

45
00:03:06,440 --> 00:03:08,280
from one point to another.

46
00:03:08,280 --> 00:03:13,500
And the curious thing is it is a very space-constrained environment.

47
00:03:13,500 --> 00:03:18,440
So we need to be mindful of the information we are carrying along these points.

48
00:03:18,440 --> 00:03:24,360
And the last part, the token, as a friend of mine likes to say, it usually is a unique

49
00:03:24,360 --> 00:03:28,800
identifier that conveys some meaning.

50
00:03:28,800 --> 00:03:33,080
So if you've never seen a JSON Web Token before, for those that are new to it, I introduce

51
00:03:33,080 --> 00:03:36,320
you to your first JSON Web Token.

52
00:03:36,320 --> 00:03:43,300
At a first glance, this gigantic string looks like a random sequence of characters and numbers,

53
00:03:43,300 --> 00:03:46,240
but actually it has a structure.

54
00:03:46,240 --> 00:03:50,360
So usually a JSON Web Token has three parts.

55
00:03:50,360 --> 00:03:53,860
The header, that's the beginning of my string.

56
00:03:53,860 --> 00:03:58,860
The payload that is right in the middle is also known as the body.

57
00:03:58,860 --> 00:04:06,200
And the signature is the last part, one of the most coolest ones, if I do say so myself.

58
00:04:06,200 --> 00:04:10,440
So the header usually has the information about the token.

59
00:04:10,440 --> 00:04:19,240
So what token it is, the token ID, and what type of algorithm was used for signing the token.

60
00:04:19,240 --> 00:04:24,580
It is a JSON object, and if you're a part-time user, you probably know that it looks like

61
00:04:24,580 --> 00:04:26,940
a dictionary, right?

62
00:04:26,940 --> 00:04:32,420
And this JSON object is then turning into a basic string so that we can make the first

63
00:04:32,420 --> 00:04:35,280
part of our token.

64
00:04:35,280 --> 00:04:37,180
Then we have the payload.

65
00:04:37,180 --> 00:04:41,300
And the payload carries information about a given resource.

66
00:04:41,300 --> 00:04:46,300
In a login scenario, this means a resource is my user.

67
00:04:46,360 --> 00:04:51,240
So for example, here I have information about me in a scenario that I was like picturing it.

68
00:04:51,240 --> 00:04:57,120
So I have the name of the user, I have what it prefers to be called, I have the sub, which

69
00:04:57,120 --> 00:05:03,800
is the subject of the token, and in this case, it would be the user ID, and so on.

70
00:05:03,800 --> 00:05:08,620
The cool thing about the payload is that it also has the information about when the token

71
00:05:08,620 --> 00:05:10,200
expires.

72
00:05:10,200 --> 00:05:11,440
So you also have that in there.

73
00:05:11,440 --> 00:05:15,920
It's one of the steps that you do for verifying a token.

74
00:05:15,980 --> 00:05:23,260
It's also basic CIFO encoded, and you can take that and decode it anywhere.

75
00:05:23,260 --> 00:05:27,460
So that is one very important thing about the payload and the header, because they are

76
00:05:27,460 --> 00:05:32,780
a little bit different from the signature, is that each key value pair here is what we

77
00:05:32,780 --> 00:05:34,480
call claims.

78
00:05:34,480 --> 00:05:37,020
And there are actually three types of claims.

79
00:05:37,020 --> 00:05:40,060
So the first type of claims are the reserved claims.

80
00:05:40,060 --> 00:05:44,380
These claims came from the JOD specification.

81
00:05:44,380 --> 00:05:48,640
So they are very important because these are the claims like the expiration date, where

82
00:05:48,640 --> 00:05:51,600
you can check if a token is expired or not.

83
00:05:51,600 --> 00:05:54,920
They have information on who issued that token.

84
00:05:54,920 --> 00:05:58,160
And be mindful, this is just an example.

85
00:05:58,160 --> 00:06:01,360
And the second type we have are the public claims.

86
00:06:01,360 --> 00:06:07,960
They are standardized in a way by IANA, one of the organizations on the internet.

87
00:06:07,980 --> 00:06:15,460
The public claims are made to carry the most common information we usually share when using

88
00:06:15,460 --> 00:06:16,780
a token.

89
00:06:16,780 --> 00:06:21,540
So for example, if you were to give the information of the first name of the user and the last

90
00:06:21,540 --> 00:06:26,620
name, IANA has a standard that says, oh, we're not going to call it first name.

91
00:06:26,620 --> 00:06:28,940
We're going to call it given name.

92
00:06:28,940 --> 00:06:32,380
And we're not going to call it last name, but we're going to call it family name, and

93
00:06:32,380 --> 00:06:33,380
so on.

94
00:06:33,380 --> 00:06:35,520
There is a long list.

95
00:06:35,520 --> 00:06:42,380
The idea is to provide a way for interoperability between systems to happen so everybody would

96
00:06:42,380 --> 00:06:46,140
be speaking, well, the same language.

97
00:06:46,140 --> 00:06:50,100
And the last type of claims that we have are the private claims.

98
00:06:50,100 --> 00:06:54,540
And they are the coolest because the private claims are supposed to be anything that you

99
00:06:54,540 --> 00:07:00,280
want, anything that your systems need for properly functioning.

100
00:07:00,280 --> 00:07:06,560
So as long as you keep a valid JSON object, you can put anything there, anything really.

101
00:07:06,560 --> 00:07:08,560
But that is a caveat.

102
00:07:08,560 --> 00:07:14,420
First, the more information you put on the JSON token, the bigger the output string you're

103
00:07:14,420 --> 00:07:18,100
going to have to pass along the request that you make.

104
00:07:18,100 --> 00:07:21,900
So be mindful of the data you put in there.

105
00:07:21,900 --> 00:07:25,380
Keep only the relevant data is a general advice.

106
00:07:25,380 --> 00:07:31,760
The second one is because both of the header and the payload are only base64 encoded, we

107
00:07:31,760 --> 00:07:34,560
don't put sensitive data in the token.

108
00:07:34,560 --> 00:07:41,600
Well, because anybody that has internet connection could Google up how to decode a base64 string.

109
00:07:41,600 --> 00:07:43,480
It doesn't even have to code.

110
00:07:43,480 --> 00:07:45,520
And they could get a hold of that data.

111
00:07:45,520 --> 00:07:46,880
So we don't want that to happen.

112
00:07:46,880 --> 00:07:50,960
We don't want the data to be publicly available if it is sensitive.

113
00:07:50,960 --> 00:07:54,060
Now you know about the header and the payload.

114
00:07:54,060 --> 00:07:56,440
Let's talk about the signature.

115
00:07:56,440 --> 00:08:01,620
And the signature is really special because the signature takes the header and the payload

116
00:08:01,620 --> 00:08:02,620
to happen.

117
00:08:02,620 --> 00:08:08,300
And depending on the algorithm, a secret or a key.

118
00:08:08,300 --> 00:08:16,180
And the interesting thing is right here I have a symmetrical algorithm that's HMAC SHA256.

119
00:08:16,180 --> 00:08:17,980
It only takes a secret.

120
00:08:17,980 --> 00:08:23,140
But you may notice that my secret is your 256-bit secret.

121
00:08:23,140 --> 00:08:24,140
Not that safe.

122
00:08:24,140 --> 00:08:26,500
In real life you would have something like this.

123
00:08:26,500 --> 00:08:31,260
A random string that is generated has a lot of characters to make everybody's lives a

124
00:08:31,260 --> 00:08:33,080
little bit safer.

125
00:08:33,080 --> 00:08:37,460
So we take the header and the payload together with the secret and a key for signing the

126
00:08:37,460 --> 00:08:38,460
token.

127
00:08:38,460 --> 00:08:41,620
Now, speaking of algorithms, we have two types.

128
00:08:41,620 --> 00:08:43,580
This one takes the secret.

129
00:08:43,580 --> 00:08:45,420
The first one is the symmetrical algorithm.

130
00:08:45,420 --> 00:08:47,460
And you can think of a secret.

131
00:08:47,460 --> 00:08:49,800
You don't want to share that with everybody, right?

132
00:08:49,800 --> 00:08:54,440
So the secret is shared in between the party that signs the token and the party that needs

133
00:08:54,440 --> 00:08:56,900
to verify the token.

134
00:08:56,900 --> 00:08:59,580
But there is a second type of algorithm.

135
00:08:59,580 --> 00:09:01,100
That's the one that I like the most.

136
00:09:01,100 --> 00:09:02,940
The asymmetrical ones.

137
00:09:02,940 --> 00:09:07,580
Because the asymmetrical algorithms takes a pair of two keys.

138
00:09:07,580 --> 00:09:13,500
For one for signing, the private key, and one for verifying the token, the public key.

139
00:09:13,900 --> 00:09:19,620
And you can keep the private key safe and secure and you shouldn't.

140
00:09:19,620 --> 00:09:26,620
And you can publish the public key so that anybody could verify the token that you signed

141
00:09:26,620 --> 00:09:29,100
to make sure that it was really you.

142
00:09:29,100 --> 00:09:34,180
If you were implementing a web application, for example, and if you were using Auth0,

143
00:09:34,180 --> 00:09:42,020
for example, Auth0 would create the tokens for you and you could get the public key from

144
00:09:42,020 --> 00:09:48,660
a well-known endpoint so that you could validate that the token came from Auth0.

145
00:09:48,660 --> 00:09:54,180
You could also validate whether or not this token must tamper with because the signature

146
00:09:54,180 --> 00:09:56,420
allows us to do that.

147
00:09:56,420 --> 00:10:00,700
Because the only person that should be able to sign the token is the person that is holding

148
00:10:00,700 --> 00:10:03,420
the secret or the private key.

149
00:10:03,420 --> 00:10:06,700
Keeping your data a little bit more safer.

150
00:10:06,700 --> 00:10:13,020
Now, speaking of keys, there is a format for you to share your keys alone.

151
00:10:13,020 --> 00:10:17,820
And if you're following OpenID Connect, you're going to have an endpoint that has a format

152
00:10:17,820 --> 00:10:21,620
like other JSON token.

153
00:10:21,620 --> 00:10:28,860
And this is defined by another RFC that is the 7517 and looks like this.

154
00:10:28,860 --> 00:10:32,540
So it has a bunch of information there.

155
00:10:32,540 --> 00:10:37,140
Because key pairs are bound by mathematical properties that you don't need to know if

156
00:10:37,140 --> 00:10:40,300
you don't want to or if you're not interested in cryptography.

157
00:10:40,300 --> 00:10:42,700
So well, it is up to you.

158
00:10:42,700 --> 00:10:48,420
And most of the packages and libraries that we use today, they support getting this key

159
00:10:48,420 --> 00:10:54,300
from this endpoint so that you can actually use it without having to know what each of

160
00:10:54,300 --> 00:10:55,740
these parts means.

161
00:10:55,740 --> 00:10:58,100
But there are two important things that you need to notice here.

162
00:10:59,100 --> 00:11:02,100
So we know what algorithm usually this key is used for.

163
00:11:02,100 --> 00:11:03,780
And we know the key ID.

164
00:11:03,780 --> 00:11:09,220
Because you can have more than one public key for a user depending on how your systems

165
00:11:09,220 --> 00:11:12,160
are set up.

166
00:11:12,160 --> 00:11:13,800
And let's see some code, right?

167
00:11:13,800 --> 00:11:15,860
Because I like to code in Python.

168
00:11:15,860 --> 00:11:16,860
Don't you?

169
00:11:16,860 --> 00:11:22,240
Well, there are a few libraries that you can use to handle JWTs in Python.

170
00:11:22,240 --> 00:11:24,300
My favorite one is PyGWT.

171
00:11:24,300 --> 00:11:25,780
I'm a little biased.

172
00:11:25,780 --> 00:11:27,520
And it does all the cool stuff.

173
00:11:27,520 --> 00:11:33,560
So the first thing you want to do is install PyGWT with the cryptography dependency on

174
00:11:33,560 --> 00:11:35,840
your Python environment.

175
00:11:35,840 --> 00:11:42,160
And then you can just import JWT on your Python console and give it a token.

176
00:11:42,160 --> 00:11:45,400
And it's going to do its magic for us.

177
00:11:45,400 --> 00:11:50,560
So the first thing I'm going to do is actually import my JWT module.

178
00:11:50,560 --> 00:11:56,960
After that, I can copy the token, put in a variable for me to use as a string.

179
00:11:56,960 --> 00:11:59,940
And then the easiest part comes.

180
00:11:59,940 --> 00:12:03,600
We call the JWT.Decode method.

181
00:12:03,600 --> 00:12:07,440
And you pass it on the token, the secret, and the algorithms.

182
00:12:07,440 --> 00:12:11,960
Now this assumes that you know the secret and you know the algorithms.

183
00:12:11,960 --> 00:12:19,160
Once the decode method does its magic, you are going to be able to retrieve the payload

184
00:12:19,160 --> 00:12:20,620
of the token.

185
00:12:20,620 --> 00:12:26,760
That means the verification process was well done, was successful.

186
00:12:26,880 --> 00:12:30,680
And of course, now I know every little thing that needs to know about this token.

187
00:12:30,680 --> 00:12:31,680
I know the secret.

188
00:12:31,680 --> 00:12:33,280
I know the algorithms.

189
00:12:33,280 --> 00:12:41,240
And once I pass it along to the method, I can see the result in there.

190
00:12:41,240 --> 00:12:42,480
And it comes as a dictionary.

191
00:12:42,480 --> 00:12:47,400
So you can save that into a variable and use that on your applications whichever way you

192
00:12:47,400 --> 00:12:49,680
want.

193
00:12:49,680 --> 00:12:55,360
But let's say, for example, that somebody told you the secret, but they forgot to tell

194
00:12:55,440 --> 00:12:58,800
which algorithm was used for the token.

195
00:12:58,800 --> 00:13:01,360
So that is a way actually you can find that out.

196
00:13:01,360 --> 00:13:04,400
And it's using the method get unverified header.

197
00:13:04,400 --> 00:13:06,980
It also gives back a dictionary.

198
00:13:06,980 --> 00:13:07,980
So I did the same process.

199
00:13:07,980 --> 00:13:09,440
I imported JWT.

200
00:13:09,440 --> 00:13:11,360
I put my token in there.

201
00:13:11,360 --> 00:13:16,440
And then I use the method get unverified header, pass along the token.

202
00:13:16,440 --> 00:13:19,200
I do a lot of typos when I'm coding.

203
00:13:19,200 --> 00:13:21,360
And then I can get the header.

204
00:13:21,360 --> 00:13:23,880
After that, I can see the header.

205
00:13:24,080 --> 00:13:25,560
It is also a dictionary.

206
00:13:25,560 --> 00:13:29,560
So I can put that into a variable so that I can use on my code.

207
00:13:29,560 --> 00:13:36,720
So you don't have to actually know beforehand what was the algorithm used.

208
00:13:36,720 --> 00:13:40,920
And then I put that header data because, well, what better name?

209
00:13:40,920 --> 00:13:48,760
And then I call again JWT.code, pass along the token, pass along the key.

210
00:13:49,440 --> 00:13:55,360
Well, in this case, a secret because the algorithm is still HS256.

211
00:13:55,360 --> 00:13:57,160
And please don't use that secret.

212
00:13:57,160 --> 00:13:58,960
It's not the good one.

213
00:14:01,280 --> 00:14:06,040
And then pass along the algorithms in the format of accessing the dictionary data.

214
00:14:09,120 --> 00:14:09,800
And there you go.

215
00:14:11,400 --> 00:14:18,360
After that, we are going to be able to get, once again, my dictionary of the payload.

216
00:14:18,360 --> 00:14:23,000
This means that everything was successful on verifying the token.

217
00:14:23,000 --> 00:14:26,600
Now, let's say you are not successful.

218
00:14:26,600 --> 00:14:28,560
Something goes wrong.

219
00:14:28,560 --> 00:14:29,720
What should you do?

220
00:14:29,720 --> 00:14:31,920
Well, I have an answer for that.

221
00:14:31,920 --> 00:14:37,600
JWT, PyDWT actually gives you all the exceptions it raises when something goes wrong.

222
00:14:37,600 --> 00:14:43,080
So if, for example, you get an expired signature, it will show you an expired signature.

223
00:14:43,080 --> 00:14:47,600
And you, being the good Python Easter that you are, the good developer that you are,

224
00:14:47,600 --> 00:14:54,560
you are going to want to try and use that exception to treat it, to maybe log the error.

225
00:14:54,560 --> 00:14:58,560
So I did that, right, except with my code in, they try.

226
00:14:58,560 --> 00:15:00,320
Then did I accept?

227
00:15:00,320 --> 00:15:02,520
I know this is a possible error.

228
00:15:02,520 --> 00:15:03,680
I put error in there.

229
00:15:06,840 --> 00:15:11,880
And then I can use that information to log what went wrong because, well,

230
00:15:11,880 --> 00:15:15,040
you want to keep track of these things, right?

231
00:15:15,040 --> 00:15:16,560
Now, there I'm just printing.

232
00:15:16,560 --> 00:15:19,840
So be mindful of that because it's just an example.

233
00:15:19,840 --> 00:15:22,480
But in my systems, I would be logging it out.

234
00:15:22,480 --> 00:15:28,240
And then I can use a string that I know and I can find that information on my logs.

235
00:15:28,240 --> 00:15:28,920
And there you go.

236
00:15:31,680 --> 00:15:36,680
After I run that, I'm able to see that, well, it didn't blow up in my face anymore.

237
00:15:38,200 --> 00:15:44,560
The last part I want to show you in code is there is a possibility that you are not using

238
00:15:45,520 --> 00:15:49,520
a symmetrical algorithm like the examples I just showed you.

239
00:15:49,520 --> 00:15:55,960
So you can either request a key or you can load the key yourself from your machine.

240
00:15:55,960 --> 00:16:01,840
In this case, this example token that I have, I created it using an SSH key.

241
00:16:01,840 --> 00:16:06,240
So I can load that in using PyGWT.

242
00:16:06,240 --> 00:16:12,360
And after I load that in, I can use it with read because I want a string of it.

243
00:16:12,360 --> 00:16:18,680
And then I can use the serialization module of PyGWT to load any type of key that you might have.

244
00:16:19,680 --> 00:16:24,560
For example, this is an SSH one, but you're going to see that we have other methods in there.

245
00:16:24,560 --> 00:16:28,000
Like, for example, the PEM type of keys.

246
00:16:28,000 --> 00:16:31,680
And I'm going to load my SSH key because I want to verify the token.

247
00:16:33,200 --> 00:16:37,320
I passed it along as a byte string.

248
00:16:37,320 --> 00:16:38,120
So I encoded.

249
00:16:39,080 --> 00:16:44,040
And then I can use that back again with my decode method.

250
00:16:45,960 --> 00:16:50,240
Now keep in mind, if you are using a service as out of zero as an example,

251
00:16:50,240 --> 00:16:56,080
you would have to make a request for the well-known endpoint to get the key.

252
00:16:56,080 --> 00:16:59,760
And you need the well-known endpoint and the key ID for that.

253
00:16:59,760 --> 00:17:01,080
And that is a way to do that.

254
00:17:01,080 --> 00:17:04,600
I linked that information in the description of this slide.

255
00:17:04,600 --> 00:17:06,720
This is going to be available to you, so you can check it out.

256
00:17:08,800 --> 00:17:13,080
And then again, I put it along the algorithm that I'm using.

257
00:17:13,080 --> 00:17:16,840
And if everything goes well, you should be able to see the payload data.

258
00:17:18,000 --> 00:17:18,520
There you go.

259
00:17:20,040 --> 00:17:21,120
Awesome.

260
00:17:21,120 --> 00:17:24,760
So now you're wondering, okay, I know everything that is to know about JWTs.

261
00:17:24,760 --> 00:17:27,080
I know how they came to life.

262
00:17:27,080 --> 00:17:29,360
I know what the payload and the header are.

263
00:17:29,360 --> 00:17:33,880
I know that I have a lot of algorithms that I can use, two types of them.

264
00:17:33,880 --> 00:17:35,600
I know I have claims and so on.

265
00:17:35,600 --> 00:17:39,600
But where do I find JWTs in the wild?

266
00:17:39,600 --> 00:17:41,000
Where do they live?

267
00:17:41,000 --> 00:17:42,640
How do they feed?

268
00:17:42,640 --> 00:17:45,960
So the first time I think of JWTs, and

269
00:17:45,960 --> 00:17:50,960
the first time that I actually saw one, was actually making requests to protected APIs.

270
00:17:50,960 --> 00:17:53,040
So when you are talking about protected APIs,

271
00:17:53,040 --> 00:17:55,720
you're going to think about access tokens.

272
00:17:55,720 --> 00:17:58,280
So let's say you wanna make a request to a protected API,

273
00:17:58,280 --> 00:18:04,080
you need an access token to access the protected routes.

274
00:18:04,080 --> 00:18:08,920
So the access token is going to have all of the information that you need for

275
00:18:08,920 --> 00:18:10,480
dealing with that API.

276
00:18:10,480 --> 00:18:16,880
Now, access tokens doesn't necessarily need to be JWTs, but

277
00:18:16,880 --> 00:18:20,360
there is a new IFC in the block that came out last year.

278
00:18:20,360 --> 00:18:22,320
It was authored by Vittorio Bertotti,

279
00:18:22,320 --> 00:18:26,320
our Zeroes Principal Architect, that outlines how

280
00:18:27,600 --> 00:18:32,240
JWT as an access token should behave, what kind of information needs to have,

281
00:18:32,240 --> 00:18:34,680
how the information must be structured, and so on.

282
00:18:34,680 --> 00:18:36,120
It's a very interesting read.

283
00:18:36,120 --> 00:18:37,640
If you are curious, you should check it out.

284
00:18:39,040 --> 00:18:44,680
The other type of JWTs you may find in the wild are the ID tokens.

285
00:18:44,680 --> 00:18:49,040
And they are the coolest, at least for me.

286
00:18:49,040 --> 00:18:54,200
Because they carry information of the user after the user did the logging,

287
00:18:54,200 --> 00:18:55,800
for example.

288
00:18:55,800 --> 00:19:01,920
So that way, your front end doesn't have to make an extra request to get,

289
00:19:01,920 --> 00:19:03,440
for example, the user profile.

290
00:19:04,520 --> 00:19:07,000
It is going to be able to have that information in there.

291
00:19:09,280 --> 00:19:13,800
Also, because we're talking about tokens, you may have heard of refresh tokens.

292
00:19:13,800 --> 00:19:17,600
Refresh tokens are not JWTs, that is why I'm not going to be speaking about it.

293
00:19:18,760 --> 00:19:19,920
Maybe in a new talk.

294
00:19:21,200 --> 00:19:27,200
So now that you know how you can use that JWTs, how they work,

295
00:19:27,200 --> 00:19:30,520
how they come to life, how you can structure the information,

296
00:19:30,520 --> 00:19:34,320
you may be wondering, well, this seems a little bit dangerous.

297
00:19:34,320 --> 00:19:36,240
There's going to be information in there.

298
00:19:36,240 --> 00:19:39,480
How do I, I don't know, be safer with it?

299
00:19:39,480 --> 00:19:42,560
Well, I have a few tips for you.

300
00:19:42,560 --> 00:19:46,640
So don't store your JWTs in local storage.

301
00:19:46,640 --> 00:19:53,720
That's a bad idea, because it opens you up for a type of attack known as XSS attack.

302
00:19:53,720 --> 00:19:57,440
And we don't want to do that, because once JWTs are out there,

303
00:19:57,440 --> 00:20:00,560
you cannot call them back, it is a hassle.

304
00:20:00,560 --> 00:20:02,360
So don't start that in local storage.

305
00:20:02,360 --> 00:20:08,200
If you need to start somewhere for verification process, you may do it in memory.

306
00:20:08,200 --> 00:20:09,120
That's the best idea.

307
00:20:10,600 --> 00:20:15,120
The other tip is, we don't verify JWTs in the front end.

308
00:20:15,120 --> 00:20:19,600
Because, well, let's say you have a JWT that was signed using a symmetrical

309
00:20:19,600 --> 00:20:24,920
algorithm, you will need to have the key for it for translating the token,

310
00:20:24,920 --> 00:20:26,840
for verifying the signature.

311
00:20:26,840 --> 00:20:30,320
And we don't want to have that in the front end, because anybody could go

312
00:20:30,320 --> 00:20:34,520
inspect elements on your page and get that information.

313
00:20:34,520 --> 00:20:35,360
And we don't want to do that.

314
00:20:36,760 --> 00:20:41,400
The last one, and I cannot stress this enough, me being an ex-data scientist,

315
00:20:41,400 --> 00:20:43,840
well, if you're a data scientist at heart,

316
00:20:43,840 --> 00:20:47,600
don't put sensitive data in the payload of your token.

317
00:20:47,600 --> 00:20:53,720
It's a bad idea, because once again, anybody can inspect your web application and

318
00:20:53,720 --> 00:20:55,640
get a hold of that token.

319
00:20:55,640 --> 00:20:58,320
And then your sensitive data is going to be out there.

320
00:20:58,320 --> 00:21:00,400
So it's not a good idea to put that in the token.

321
00:21:02,000 --> 00:21:05,440
Finally, I want to give you some tools to help you out.

322
00:21:05,440 --> 00:21:07,840
Because I know, JWTs may be hard.

323
00:21:07,840 --> 00:21:12,800
I made this talk thinking of me a few years back that I wanted this content and

324
00:21:12,800 --> 00:21:14,160
I didn't find any.

325
00:21:14,160 --> 00:21:16,240
I had to figure it out by myself.

326
00:21:16,240 --> 00:21:19,480
So the first one I'm going to tell you is JWT.io.

327
00:21:19,480 --> 00:21:21,080
This was made by Alt Zero.

328
00:21:21,080 --> 00:21:24,520
It's going to help you debug your access tokens.

329
00:21:24,520 --> 00:21:26,600
And it's going to make your life easier.

330
00:21:26,600 --> 00:21:31,680
You can check out, right in browser, the information of your token.

331
00:21:31,680 --> 00:21:34,120
Now be mindful where you're placing the token,

332
00:21:34,120 --> 00:21:37,440
because if it is a real production token, it's not a good idea.

333
00:21:37,440 --> 00:21:42,480
But JWT.io is a safe environment where you can check out your token if you need to.

334
00:21:42,480 --> 00:21:46,960
And we don't store the tokens for ourselves, so it's safer.

335
00:21:48,080 --> 00:21:51,400
The other one is you may need more information about JWTs,

336
00:21:51,400 --> 00:21:53,720
because we're very curious about it.

337
00:21:53,720 --> 00:21:57,280
So we actually made a handbook with a few examples and

338
00:21:57,280 --> 00:22:01,480
use cases of JWTs, and I encourage you to read it.

339
00:22:02,920 --> 00:22:04,240
And that was it.

340
00:22:04,240 --> 00:22:08,280
I don't know if you have time for more questions, but you may find me on, again,

341
00:22:08,280 --> 00:22:10,960
on most social networks under the handle jaztemporal.

342
00:22:10,960 --> 00:22:16,280
And my slides are on that link, slides.com, jaztemporal, jwt,

343
00:22:16,280 --> 00:22:17,880
if you want to check out all the links.

344
00:22:17,880 --> 00:22:18,520
That's it.

345
00:22:18,520 --> 00:22:23,520
We don't take questions as part of the presentation, but

346
00:22:23,520 --> 00:22:30,960
please come forward and ask Jessica directly if you have any questions,

347
00:22:30,960 --> 00:22:35,960
or just swing by the O0 booth.

348
00:22:35,960 --> 00:22:38,080
We are on the line 600.

349
00:22:38,080 --> 00:22:38,560
Thank you.

350
00:22:38,560 --> 00:22:39,600
Thank you.

351
00:22:39,600 --> 00:22:40,120
See ya.

