1
00:00:00,000 --> 00:00:14,560
Good morning, everybody. Good morning. Thank you for everyone that decided to come this

2
00:00:14,560 --> 00:00:19,280
early to the first of the lightning talks. We really appreciate it. We have a couple

3
00:00:19,280 --> 00:00:26,220
speakers before Emily comes back and we have keynotes coming back. So let's welcome them

4
00:00:26,220 --> 00:00:30,700
up to the stage to get ready and we can kick it off. Right?

5
00:00:30,700 --> 00:00:34,540
Indeed. I think everyone is still waking up, waiting

6
00:00:34,540 --> 00:00:41,460
for the coffee to kick in. First up we have Jeff who is giving us a talk on teaching Python

7
00:00:41,460 --> 00:00:44,700
for community outreach. Let's give him a very loud round of applause because there's not

8
00:00:44,700 --> 00:00:53,820
many of us here. Hi, everyone. Thanks for coming up this early.

9
00:00:53,820 --> 00:00:59,900
So, yeah, I'm Jeff. I'm a bioengineer at the rehab neural engineering labs at the University

10
00:00:59,900 --> 00:01:07,180
of Pittsburgh. But I'll be talking a little bit about teaching Python and community outreach.

11
00:01:07,180 --> 00:01:11,900
So this is a picture of my lab from a couple years ago. We've grown to this large group.

12
00:01:11,900 --> 00:01:15,780
I have our lab mission up here, but I'm not really going to talk about that if those words

13
00:01:15,780 --> 00:01:20,980
confuse you a bit. I'm happy to talk about it if you find me later. But I'd like to show

14
00:01:21,460 --> 00:01:27,740
that in the past couple of years, especially, my lab has formalized a list of both scientific

15
00:01:27,740 --> 00:01:32,740
and community values. And we've really emphasized that, you know, it's not just about doing

16
00:01:32,740 --> 00:01:38,300
the technical work and the science, but, you know, we've emphasized the importance of dignity

17
00:01:38,300 --> 00:01:44,620
and respect, diversity, equity and inclusion, actually being anti-racist, not just not racist.

18
00:01:44,620 --> 00:01:49,540
There's a difference. Of course, especially in education, there's always been a big focus

19
00:01:49,580 --> 00:01:54,460
on mentorship and training. That's what education is all about. And I think these ideals, you

20
00:01:54,460 --> 00:01:58,500
know, really overlap with open source software, too, right? Like, we want to share knowledge

21
00:01:58,500 --> 00:02:03,660
and provide opportunities to all with this software. So, you know, these are just some

22
00:02:03,660 --> 00:02:09,060
important things to keep in mind. And I'd also like to talk about the context of my

23
00:02:09,060 --> 00:02:14,220
university in the city that we're in, Pittsburgh. So if you've never been to Pittsburgh, it's

24
00:02:14,220 --> 00:02:18,860
a pretty cool city. I recommend checking it out. We are surrounded by these three rivers.

25
00:02:18,860 --> 00:02:24,100
So most of the city kind of forms this triangle. And so on the west side here, on the west,

26
00:02:24,100 --> 00:02:31,100
we've got downtown. That's really this triangle area. I've highlighted the university in red,

27
00:02:31,100 --> 00:02:35,340
where it's in this neighborhood called Oakland. We've also got Carnegie Mellon University,

28
00:02:35,340 --> 00:02:39,900
our neighbors to the west, also in Oakland. So it's this really big kind of second downtown

29
00:02:39,900 --> 00:02:45,380
area that's this, like, hub of education and technology. But in between that and the main

30
00:02:45,420 --> 00:02:48,740
downtown area is this neighborhood called the Hill District. It's actually like this

31
00:02:48,740 --> 00:02:54,740
really big hill. And, you know, of course, these are our literal neighbors in the city.

32
00:02:54,740 --> 00:02:59,340
This was, like, it's an interesting neighborhood. In the, especially in the earlier decades

33
00:02:59,340 --> 00:03:04,460
of the 20th century, it was actually known as Little Harlem. It was this really thriving

34
00:03:04,460 --> 00:03:10,180
center of African American culture, and especially, like, jazz, things like that, in Pittsburgh.

35
00:03:10,340 --> 00:03:15,500
Like many cities in the U.S., it unfortunately faced a lot of decline and, you know, issues

36
00:03:15,500 --> 00:03:20,420
later in the 20th century. I highlighted here that they constructed these highways, and

37
00:03:20,420 --> 00:03:24,220
they put up some sports arenas. They actually had the knockdown housing to do that, and

38
00:03:24,220 --> 00:03:28,340
they kind of cut it off from downtown. And so now it's seen as this really disadvantaged

39
00:03:28,340 --> 00:03:33,380
neighborhood after that. It's really unfortunate. But these are our neighbors, and we'd like

40
00:03:33,380 --> 00:03:39,260
to engage with them and, you know, help change things for the better. So some of the grad

41
00:03:39,260 --> 00:03:44,300
students in my lab planned this intro to the Python course. The university actually

42
00:03:44,300 --> 00:03:49,260
has this community engagement center in this neighborhood. Something I'd like to emphasize

43
00:03:49,260 --> 00:03:53,620
is that the students who put this on are not expert coders. I mean, they are bioengineering

44
00:03:53,620 --> 00:03:59,180
PhD students, primarily. But they planned some short lectures to go over the fundamentals

45
00:03:59,180 --> 00:04:04,740
of programming, things like variables, control flow, loops, functions. But actually most

46
00:04:04,740 --> 00:04:10,620
of the course time was spent just doing programming practice. And we really emphasized one-on-one

47
00:04:10,620 --> 00:04:14,900
help from volunteers. So we got a big group of volunteers from the lab. You know, we had

48
00:04:14,900 --> 00:04:19,860
different people come each week, but we tended to have about as many volunteers as students,

49
00:04:19,860 --> 00:04:26,860
which really meant we could do one-on-one time throughout, like, the whole class. And,

50
00:04:27,020 --> 00:04:30,980
you know, we had a lot of interesting students of various ages. We kind of targeted adults,

51
00:04:31,180 --> 00:04:35,660
they ranged from high school age to senior citizens, different career backgrounds. You

52
00:04:35,660 --> 00:04:41,780
know, some had had a little bit of program experience, most had none. You know, the woman

53
00:04:41,780 --> 00:04:46,900
shown here actually brought her son with her, which was really cool. He was interested as

54
00:04:46,900 --> 00:04:51,260
well, even though he was very young. So since we had all these different ages and career

55
00:04:51,260 --> 00:04:57,260
levels, the one-on-one tutoring really helped. And the course ended with some final projects

56
00:04:57,340 --> 00:05:01,380
where they had two weeks to work with us to do something really creative and really impressive

57
00:05:01,380 --> 00:05:07,060
considering how little time they had to learn. They did things like creating password generators,

58
00:05:07,060 --> 00:05:12,500
actually creating a Python tutorial and cheat sheet in Python, music playlists and games

59
00:05:12,500 --> 00:05:19,400
like Hangman. We ended with this graduation little ceremony where they presented their

60
00:05:19,400 --> 00:05:24,340
final projects. And, you know, the feedback from the course was really great. They wrote

61
00:05:24,420 --> 00:05:29,300
these sticky notes. We tried to teach them how they could learn more in the future and

62
00:05:29,300 --> 00:05:35,140
keep this going. So it was just a really great experience and I hope this encourages more

63
00:05:35,140 --> 00:05:40,100
people to do something like this. You don't need to be an expert at coding or teaching

64
00:05:40,100 --> 00:05:44,100
to do something like this and to give back to your community. So with that, I'm out of

65
00:05:44,100 --> 00:05:47,100
time. So thank you.

66
00:05:47,860 --> 00:05:54,860
Thanks. I realize I forgot to explain what I was doing up here with my fingers. If you

67
00:05:54,860 --> 00:05:58,860
haven't seen the lightning talk before, it was tiny clapping which is what we do as the

68
00:05:58,860 --> 00:06:02,500
speakers get close to their five-minute mark to give them a little signal, time to wrap

69
00:06:02,500 --> 00:06:03,500
it up. Lorena?

70
00:06:03,500 --> 00:06:09,340
Yeah. I was going to say, as someone from Chicago, I can connect with the cool Python

71
00:06:09,340 --> 00:06:14,300
teaching all that jazz. So thank you so much for speaking. And up next, we have Jessica.

72
00:06:14,300 --> 00:06:18,500
I'm very intrigued what we're going to hear.

73
00:06:18,500 --> 00:06:25,980
Good morning, good afternoon, good evening, guys, gals, and non-binary pals. My name is

74
00:06:25,980 --> 00:06:30,540
Jessica and I'm a data engineer at Elastic. I like to call myself a career data pusher

75
00:06:30,540 --> 00:06:34,740
but I also do a lot of automation engineering and scripting in my current role. And most

76
00:06:34,740 --> 00:06:38,300
importantly, I am a devoted cat mom which may not be relevant to this talk but is pretty

77
00:06:38,300 --> 00:06:43,260
relevant in general so you should know that. Now, over the next few minutes while you're

78
00:06:43,300 --> 00:06:48,300
enjoying your coffee here in the PyCon ballroom, I am going to change your life. I'm going

79
00:06:48,300 --> 00:06:52,140
to tell you how removing one word from your vocabulary will not only make you a better

80
00:06:52,140 --> 00:06:56,820
developer but a better teammate and mentor to those around you. This is a personal philosophy

81
00:06:56,820 --> 00:07:01,500
of mine but I think it will work for you. Maybe not exactly but I hope you get something

82
00:07:01,500 --> 00:07:06,340
out of this. So a little bit of background. My previous job was at a consulting company

83
00:07:06,340 --> 00:07:11,380
where I spent most of my career there as a data-decent developer in some way, shape or

84
00:07:11,380 --> 00:07:16,860
form starting in the humble role of data warehouse developer in 2014. As a data dev

85
00:07:16,860 --> 00:07:19,860
and if there are any data engineers in the audience you may feel this as well, you get

86
00:07:19,860 --> 00:07:24,940
a lot of questions along the lines of hey, why are the numbers like this? I would as

87
00:07:24,940 --> 00:07:29,620
best I could explain how the data pipelines work, you know, but I'm not the business owner

88
00:07:29,620 --> 00:07:33,300
of the data so if there's some issue with the source data that's not really my purview.

89
00:07:33,300 --> 00:07:37,940
I can only explain how data gets from A to B, how C is transformed into D but not why

90
00:07:37,940 --> 00:07:42,700
the source value N was correct or incorrect. So one day during a stint with my second data

91
00:07:42,700 --> 00:07:46,620
warehousing client I was chatting with a business analyst about a dashboard and she

92
00:07:46,620 --> 00:07:52,380
was confused about a few numbers. To her they just did not make sense. I was as usual explaining

93
00:07:52,380 --> 00:07:56,540
limitations of what kinds of things I could do, like why the source data couldn't fit

94
00:07:56,540 --> 00:08:01,180
into the report she was expecting but she just looked at me and said why can't you

95
00:08:01,180 --> 00:08:05,920
just do this thing with the data to make the numbers better which what does better even

96
00:08:05,920 --> 00:08:10,960
mean in this case. Then a couple months later I was transitioning off this client and I

97
00:08:10,960 --> 00:08:15,100
was handing the work off to another consultant. As I was explaining a rather complex data

98
00:08:15,100 --> 00:08:20,960
pipeline which needed much ugly manipulation to even get from source data to a number resembling

99
00:08:20,960 --> 00:08:26,600
the output, he looked at me and said but why didn't you just insert technical solution

100
00:08:26,600 --> 00:08:29,340
that obviously works because I don't know the context of anything that you're talking

101
00:08:29,340 --> 00:08:35,040
about and clearly you should have done instead. I hope you can all see where this is going.

102
00:08:35,040 --> 00:08:39,360
Since these two occurrences I have been on a campaign against the word just when posing

103
00:08:39,360 --> 00:08:43,440
a question with someone I'm working with. To me just implies that the person you're

104
00:08:43,440 --> 00:08:49,120
just asking a question to is missing something so obvious, so inconceivably unmissable that

105
00:08:49,120 --> 00:08:52,800
they should have thought of it in the first place. With the first story the BA was saying

106
00:08:52,800 --> 00:08:57,140
it kind of out of frustration, there was a number she didn't understand and wanted to

107
00:08:57,140 --> 00:09:01,920
have me fix it but the second one it was definitely with an air of arrogance, this idea of like

108
00:09:01,920 --> 00:09:07,400
I didn't know enough to do the correct solution. So by phrasing the question in a way that

109
00:09:07,400 --> 00:09:12,680
promotes discussion rather than blame or ignorance which in my opinion is what just implies you

110
00:09:12,680 --> 00:09:16,440
can go much farther and maybe even learn a little something along the way. So here are

111
00:09:16,440 --> 00:09:21,400
a few of my favorite ways to rephrase can't you just, so like what if we tried, what if

112
00:09:21,400 --> 00:09:27,720
you did something, have you considered, did you know about next time you come across this,

113
00:09:27,720 --> 00:09:32,520
would you be able to explain why? And to me taking the time to rephrase this question

114
00:09:32,520 --> 00:09:35,920
may even get you thinking about why it even came up in your mind in the first place, like

115
00:09:35,920 --> 00:09:41,200
was there something that I missed or is there something I didn't consider? So to me phrasing

116
00:09:41,200 --> 00:09:44,600
questions in this way paves the way to more understanding teams and colleagues who are

117
00:09:44,600 --> 00:09:48,960
willing to learn from one another. Also if you find yourself using it don't worry I caught

118
00:09:48,960 --> 00:09:55,400
myself using it in this presentation. So basically be gentle to yourself, know that you're all

119
00:09:55,480 --> 00:09:59,880
learning. As an ex-jerk programmer every day I'm still thinking about how I can remove this

120
00:09:59,880 --> 00:10:04,200
word and be kinder to especially the junior devs around me. There's not, we don't know

121
00:10:04,200 --> 00:10:08,960
everything some of you may all know that ex-KCD comic of like every day there's like one person

122
00:10:08,960 --> 00:10:13,080
who's learning something that you thought was very obvious for the first time. So I'm

123
00:10:13,080 --> 00:10:17,080
here to leave you with this very relevant motivational poster which is if your question

124
00:10:17,080 --> 00:10:23,360
starts with can't you just, the answer is no. Thank you for listening to my talk, come

125
00:10:23,360 --> 00:10:27,320
find me the elastic booth I'll be there around 11 if you want to share cat pics with me.

126
00:10:27,320 --> 00:10:31,320
All these photos come from the Canadian Internet Registration Authority they have the best

127
00:10:31,320 --> 00:10:36,320
stock photos on the internet and you should use them. Thank you so much.

128
00:10:36,320 --> 00:10:43,320
I think Lorraine is getting her phone out now to show you cat pics. I'm sorry, I'm so

129
00:10:44,200 --> 00:10:51,000
sorry. I love that talk. Another word I strike for my vocabulary is simply. Nothing is actually

130
00:10:51,480 --> 00:10:57,640
simple. Just stop saying simply. All right. Next up we have Roy with biometric attack.

131
00:10:57,640 --> 00:11:04,640
Let's give a hand to Roy. Hi. My name is Roy. I'm a security software

132
00:11:05,760 --> 00:11:12,760
engineer and today we're going to talk about biometric attack. So is anybody in the audience

133
00:11:12,760 --> 00:11:19,760
using Face ID like I do or any other technology? Cool. Have you ever stopped for a moment and

134
00:11:19,760 --> 00:11:26,080
thought about how this magic actually occur? How you can show your face to the phone and

135
00:11:26,080 --> 00:11:31,360
the phone recognizes you as yourself and unlock itself? And more importantly have you ever

136
00:11:31,360 --> 00:11:38,360
thought how secure is it? So let's dive straight into it. When your phone see a picture of

137
00:11:38,360 --> 00:11:44,040
yourself or any other person it firstly detect where the face is inside the picture and using

138
00:11:44,040 --> 00:11:49,680
a deep learning algorithm provide us a feature vector of that face. Those features can be

139
00:11:49,680 --> 00:11:55,560
anything from the length of your nose or something weird as the ratio of your eye length and

140
00:11:55,560 --> 00:12:01,600
your mouth. We don't really know what's the meaning of those floats but because they are

141
00:12:01,600 --> 00:12:05,920
generated by a deep learning algorithm but we know that this feature vector which is

142
00:12:05,920 --> 00:12:12,920
sized 128 most of the time supposed to represent you very well. So all your phone has a feature

143
00:12:14,040 --> 00:12:19,920
vector. So what you have to do is save this feature vector inside of it and compare every new

144
00:12:19,920 --> 00:12:26,920
photo to that feature vector. So let's simplify thing a little bit. I will take this 128 feature

145
00:12:28,920 --> 00:12:33,920
vector and make it into a 3D vector so our mind can comprehend better what's going on here. So

146
00:12:33,920 --> 00:12:38,920
point number, point A is our first scan when we bought our new iPhone and we don't really

147
00:12:44,040 --> 00:12:49,640
try to match that exact point because today I look a bit different than I look yesterday. My hair

148
00:12:49,640 --> 00:12:55,440
is a little bit longer. I didn't shave. So we're trying to do some circles, some sphere around

149
00:12:55,440 --> 00:13:00,920
that point that everything inside it's fear like point number C which is a bit different than

150
00:13:00,920 --> 00:13:07,920
point number A represents me. Point number B on the other hand is very far which means it's not

151
00:13:07,920 --> 00:13:13,920
me. It's probably one of you who tried to hack my phone. So now I understand the process. We got

152
00:13:13,920 --> 00:13:20,560
a picture and deep learning algorithm provide us a feature vector out of it. So we've got

153
00:13:20,560 --> 00:13:25,560
ourselves a feature vector which is a representation of our face but is this representation any good?

154
00:13:28,340 --> 00:13:35,340
Let me show you something a bit weird. So we tried to put many, many images of many, many people

155
00:13:35,340 --> 00:13:41,980
into many, many iPhones and most of the people got exactly one hit. They were able to open their

156
00:13:41,980 --> 00:13:49,580
own phone but this dude here at index number 27 has something really weird going on with him. He

157
00:13:49,580 --> 00:13:57,060
was able to unlock more than 50 phone with his face. So let's try to understand how is that. So

158
00:13:57,060 --> 00:14:03,900
if we take the example from before about the length of your nose, most noses are two inches or five

159
00:14:03,900 --> 00:14:10,300
centimeters for non-American friends. And although you can have a little bit of bigger nose or smaller

160
00:14:10,300 --> 00:14:19,540
nose, most noses will be at that range of five centimeters. And we found out that most of those

161
00:14:19,540 --> 00:14:29,260
features are normally distributed as well. Now let me show you. We were able to hack a phone 13 times

162
00:14:29,260 --> 00:14:36,820
in a million attempts which means your phone is secure as in five-digit numbers. So let me show you

163
00:14:36,820 --> 00:14:43,580
how this attack was done. We generated here many, many faces. We as human can see that those faces

164
00:14:43,580 --> 00:14:51,500
aren't real at all but because we were able to generate the distribution map for each feature,

165
00:14:51,500 --> 00:14:58,620
we could create the most generic faces from most generic to least generic. And during this attack,

166
00:14:58,620 --> 00:15:07,940
find a face that will be close enough to yours in terms of iPhone and unlock your phone so no one

167
00:15:07,940 --> 00:15:13,620
is safe. Thank you very much. This is my mail and please feel free to approach me with any question.

168
00:15:13,620 --> 00:15:25,620
Thank you so much for your talk. Up next we have Gajendra continuing on a really relevant topic on

169
00:15:25,620 --> 00:15:32,300
security. Good morning everyone. My name is Gajendra Deshpande working as assistant professor at KLS

170
00:15:32,300 --> 00:15:37,940
Institute of Technology India. So I'll be delivering a short talk on security considerations in Python

171
00:15:37,940 --> 00:15:42,980
packaging. So in brief we are going to discuss three tools. One is Bandit, second one is the safety,

172
00:15:42,980 --> 00:15:49,700
and third one is SemGraph. So why hackers are targeting Python is that we know that Python is

173
00:15:49,700 --> 00:15:56,060
gaining lots of popularity and especially in TOB index it has reached number one position and even

174
00:15:56,060 --> 00:16:02,300
in stack overflow it has been ranked third and even in non-JITUB stats you can see that in terms

175
00:16:02,300 --> 00:16:09,500
of number of active repositories Python is on third position. Now there is a general misconception

176
00:16:09,500 --> 00:16:13,980
about the security of the open source software. So some people cite that the major reason is that

177
00:16:13,980 --> 00:16:19,660
the code is open source. The code is available to everyone. But generally speaking open source

178
00:16:19,660 --> 00:16:24,780
software are secure by design and security issues are mostly due to the lack of understanding of

179
00:16:24,780 --> 00:16:29,500
secure coding principles and Python is secure but vulnerabilities may be present in the Python

180
00:16:29,500 --> 00:16:36,020
packages. So importance of secure package is that insecure package will make your application

181
00:16:36,020 --> 00:16:41,220
vulnerable and prone to external threats. Compromise and unauthorized disclosure of information may

182
00:16:41,220 --> 00:16:46,260
result into personal and company reputation and money. So unsecure code may damage the system of

183
00:16:46,260 --> 00:16:52,100
users and sometimes it may also lead to the physical damage. Now these are some of the articles which

184
00:16:52,100 --> 00:16:57,460
you can go through later. So these articles have been published recently and they have highlighted

185
00:16:57,460 --> 00:17:02,220
several security issues such as dependency confusion attack mounted by a PyPy repository,

186
00:17:02,220 --> 00:17:06,500
then JFrog detects malicious PyPy packages, stealing credit cards and injecting code,

187
00:17:06,500 --> 00:17:13,180
and potential remote code execution in PyPy and supplies and flaws found in the Python package.

188
00:17:13,180 --> 00:17:19,060
Let's see the Band-Aid tool. It's a tool designed to find common security issues in the Python code.

189
00:17:19,060 --> 00:17:24,020
So to do this Band-Aid processes each file, builds an abstract syntax tree from it and runs

190
00:17:24,020 --> 00:17:28,980
appropriate plugins against AST nodes. So once Band-Aid finished scanning all the files it generates

191
00:17:28,980 --> 00:17:35,100
a report. So this is how you can use it. You can run it independently. You can run it against a code

192
00:17:35,100 --> 00:17:40,100
repository. You can also specify a profile. So in this slide the shell injection profile has been

193
00:17:40,100 --> 00:17:47,460
mentioned. So you can also write your own custom tests using Band-Aid. So there are some plugins

194
00:17:47,460 --> 00:17:53,740
and these are the various types of tests you can perform and there are various tests. These are the

195
00:17:53,740 --> 00:17:59,500
categories. So these are the tests under those specific categories. The next is the safety check.

196
00:17:59,500 --> 00:18:04,660
So safety checks your installed dependencies for known security vulnerabilities. By default it uses

197
00:18:04,820 --> 00:18:10,780
the Python vulnerability database safety DB but can be upgraded to use pyapp.io safety API

198
00:18:10,780 --> 00:18:17,700
using key option. It supports Python 3.5 and above versions. Now how to test it is by installing

199
00:18:17,700 --> 00:18:25,660
an insecure package. So these are some of the commands how you can use it. So this is a screenshot

200
00:18:25,660 --> 00:18:31,660
you can find out. This is the screenshot before installing insecure package and this is the

201
00:18:31,660 --> 00:18:36,060
screenshot after installing insecure package and you can see that it has appeared here but these

202
00:18:36,060 --> 00:18:44,700
are the insecure package installed on my machine. Now you can use safety DB. It's a database of

203
00:18:44,700 --> 00:18:50,620
known security vulnerabilities in Python packages. The data is made available by pyapp.io and it is

204
00:18:50,620 --> 00:18:57,980
synced with the repository once per month. So you can visit the URL mentioned here, the first URL to

205
00:18:57,980 --> 00:19:03,140
see the list of insecure Python packages. It doesn't mean that just because it appears in the list it is

206
00:19:03,140 --> 00:19:11,500
insecure. So there are some safety DB tools which you can use. The safety CI, safety Django, then

207
00:19:11,500 --> 00:19:18,860
safety bar, pip and check and so on. The next one is the semgrep which is the open source static

208
00:19:18,860 --> 00:19:25,620
analyzer. It works on mostly 17 plus languages, supports Python also. It is not vendor controlled

209
00:19:26,460 --> 00:19:33,780
and it has

210
00:19:33,780 --> 00:19:45,960
thousands of bugs which onioned private

211
00:19:45,960 --> 00:19:51,400
developers. JPEG, it forMUSIC. If you want to run some optim tast a fewノ

212
00:19:51,400 --> 00:19:55,540
a package maintainer, then ensure that the package you are maintaining is secure and

213
00:19:55,540 --> 00:19:57,300
practice secure coding principles.

214
00:19:57,300 --> 00:20:02,180
So as an application developer, follow secure coding principles while writing, then use

215
00:20:02,180 --> 00:20:07,820
tools to check vulnerabilities, then periodically scan your environment, sign and verify packages

216
00:20:07,820 --> 00:20:13,460
using PGP keys, use Twine for improved security, scan packages before upgrading, ensure that

217
00:20:13,460 --> 00:20:17,900
you install code from package from trusted source.

218
00:20:17,900 --> 00:20:18,900
Thank you.

219
00:20:18,900 --> 00:20:24,800
Great talk.

220
00:20:24,800 --> 00:20:26,600
Very interesting to me personally as well.

221
00:20:26,600 --> 00:20:28,240
Thank you for giving it.

222
00:20:28,240 --> 00:20:34,360
And next up we have Diamond, who is giving us a talk on scaling PyTorch and fraud, real

223
00:20:34,360 --> 00:20:37,080
world ML with Torch package and deploy.

224
00:20:37,080 --> 00:20:40,080
Let's give it away for Diamond.

225
00:20:40,080 --> 00:20:43,080
Hey, everyone.

226
00:20:43,080 --> 00:20:44,720
Morning.

227
00:20:44,720 --> 00:20:45,720
I'm Diamond.

228
00:20:45,720 --> 00:20:48,320
I'm an engineering manager over at Meta.

229
00:20:48,320 --> 00:20:51,920
In particular, I work on PyTorch, which is I'm sure your favorite machine learning framework

230
00:20:51,920 --> 00:20:52,920
for Python.

231
00:20:52,920 --> 00:20:55,920
Apologies if we have anyone here from TensorFlow.

232
00:20:55,920 --> 00:20:58,040
But it's a great framework.

233
00:20:58,040 --> 00:21:00,500
I'm going to be talking about one of the things that are near and dear to my heart, which

234
00:21:00,500 --> 00:21:03,340
is scaling this for production use.

235
00:21:03,340 --> 00:21:09,020
Really awesome when people use PyTorch for learning machine learning, for research, for

236
00:21:09,020 --> 00:21:10,140
everything like that.

237
00:21:10,140 --> 00:21:14,300
But one of the really important things to me is that we make sure it works really well

238
00:21:14,300 --> 00:21:15,300
in production as well.

239
00:21:15,980 --> 00:21:20,300
We're going to be talking about one particular aspect of that in this lightning talk.

240
00:21:20,300 --> 00:21:22,660
The solution to the Gill problem.

241
00:21:22,660 --> 00:21:26,240
Solution put in quotes here because we're not actually solving the Gill problem.

242
00:21:26,240 --> 00:21:27,940
Someone much smarter than me is doing that.

243
00:21:27,940 --> 00:21:32,560
Instead, I'm looking at a small part of this problem, which is if you're running a production

244
00:21:32,560 --> 00:21:36,260
scale machine learning framework or machine learning system, most of the time you actually

245
00:21:36,260 --> 00:21:38,100
don't want to just write everything in Python.

246
00:21:38,100 --> 00:21:39,900
There's a bunch of different reasons for that.

247
00:21:39,900 --> 00:21:43,720
I know it's kind of a hard thing to say at a Python conference.

248
00:21:43,920 --> 00:21:49,540
Usually you end up writing your service in C++ or something that is really highly performant

249
00:21:49,540 --> 00:21:52,880
because you want really high throughput.

250
00:21:52,880 --> 00:21:57,280
What you want to do is have this model that you've trained in Python and use it in this

251
00:21:57,280 --> 00:22:02,240
potentially C++ or other faster framework service that is very efficient.

252
00:22:02,240 --> 00:22:06,040
That's really hard to do unless you take the model and translate it into some other language.

253
00:22:06,040 --> 00:22:07,440
Translations are incredibly painful.

254
00:22:07,440 --> 00:22:12,980
Instead, you want to be able to use Python, run it with C++, and profit.

255
00:22:12,980 --> 00:22:14,500
How do you do that?

256
00:22:14,500 --> 00:22:18,500
We have two different libraries, two different features that we've actually introduced pretty recently.

257
00:22:18,500 --> 00:22:21,100
One is called Torch Package and one is Torch Deploy.

258
00:22:21,100 --> 00:22:25,740
Torch Package lets you serialize and de-serialize your Python code.

259
00:22:25,740 --> 00:22:29,100
Keep your model in Python so your scientists can be happy, your machine learning engineers

260
00:22:29,100 --> 00:22:30,100
can be happy.

261
00:22:30,100 --> 00:22:35,340
They don't have to do all this messy translations where you end up losing functionality of Python

262
00:22:35,340 --> 00:22:38,740
that you really want because we do love actually keeping the model in Python, writing the model

263
00:22:38,740 --> 00:22:41,540
in Python, training the model in Python.

264
00:22:41,540 --> 00:22:46,740
You're able to then deploy that and use it in your C++ system.

265
00:22:46,740 --> 00:22:51,940
Under the hood, the way that works for a Torch Deploy is that we have actually an interpreter

266
00:22:51,940 --> 00:22:54,660
manager so that you have n Python interpreters.

267
00:22:54,660 --> 00:22:58,300
You're not just running one because if you were just running one, you'd have run into

268
00:22:58,300 --> 00:23:01,260
the Gill problem where you have the global interpreter lock that makes it so you can

269
00:23:01,260 --> 00:23:02,940
only run in one thread.

270
00:23:02,940 --> 00:23:08,140
Instead, if you have, let's say, an EC2 instance or something else that has tons of cores that

271
00:23:08,180 --> 00:23:10,980
you're paying for, you can actually use each of those cores.

272
00:23:10,980 --> 00:23:17,980
Each core is able to run a copy of your model and we do that by having a separate Python

273
00:23:18,340 --> 00:23:21,700
interpreter per core.

274
00:23:21,700 --> 00:23:23,340
An example of this is pretty straightforward.

275
00:23:23,340 --> 00:23:24,980
You've got your C++ program.

276
00:23:24,980 --> 00:23:28,740
Once you package up your model, you can make a call straight to it.

277
00:23:28,740 --> 00:23:32,540
We have here that you're loading up the model from your package.

278
00:23:32,540 --> 00:23:35,940
Then at the very bottom, you can see that we're actually going to run inference with

279
00:23:36,020 --> 00:23:38,500
it, execute your model with the tensor that you're passing.

280
00:23:38,500 --> 00:23:45,940
That tensor represents the data that you have in the real world interaction.

281
00:23:45,940 --> 00:23:49,300
How do you actually put your model into that state?

282
00:23:49,300 --> 00:23:51,540
Use Torch Package, which is part two of this.

283
00:23:51,540 --> 00:23:55,980
It's hermetically sealing dependencies in with your source code, your source model.

284
00:23:55,980 --> 00:23:59,700
It's Python-ic so you can make changes to the dependencies that you're covering with

285
00:23:59,700 --> 00:24:05,340
it, that you're wrapping with it, and you have fine-grained control of it.

286
00:24:05,340 --> 00:24:07,460
Torch Package example here.

287
00:24:07,460 --> 00:24:11,180
This is in Python, not in C++, so it's not as ugly.

288
00:24:11,180 --> 00:24:12,540
This is something that you can see.

289
00:24:12,540 --> 00:24:14,220
We're packaging up the model.

290
00:24:14,220 --> 00:24:17,500
In our situation, we're saying extern is really when you're saying we're going to rely on

291
00:24:17,500 --> 00:24:18,500
an external dependency.

292
00:24:18,500 --> 00:24:19,500
We're okay with that.

293
00:24:19,500 --> 00:24:21,340
It doesn't need to be hermetically sealed.

294
00:24:21,340 --> 00:24:25,300
Intern is when you're saying we're going to actually pull this in as part of our package.

295
00:24:25,300 --> 00:24:26,780
This is an internal package dependency.

296
00:24:26,780 --> 00:24:31,620
A couple different options you have here.

297
00:24:31,620 --> 00:24:34,020
These graphs are hard to parse, so apologies.

298
00:24:34,700 --> 00:24:38,180
The main important thing is that there's a bunch of different ways, like TorchScript,

299
00:24:38,180 --> 00:24:41,620
which is turning it into another language that you can use to make this much faster.

300
00:24:41,620 --> 00:24:46,300
Instead, we show that you naturally, without having to do any performance work, are able

301
00:24:46,300 --> 00:24:50,220
to get higher performance than your single thread for certain types of models, most small

302
00:24:50,220 --> 00:24:51,740
to medium-sized models.

303
00:24:51,740 --> 00:24:52,980
Larger models are a bit more complicated.

304
00:24:52,980 --> 00:24:58,540
We get some improvements, but not as much as we'd like.

305
00:24:58,540 --> 00:24:59,540
Here are the public docs.

306
00:25:00,060 --> 00:25:04,260
I'm going to actually be hosting an open space as well at 5 p.m. for anyone who wants to

307
00:25:04,260 --> 00:25:07,020
talk about PyTorch or machine learning in production.

308
00:25:07,020 --> 00:25:08,500
You can come talk to me.

309
00:25:08,500 --> 00:25:09,500
We can chat about it.

310
00:25:09,500 --> 00:25:11,020
I love to hear your pain points.

311
00:25:11,020 --> 00:25:14,500
In particular, I have a whole group that really focuses on how do we make PyTorch better for

312
00:25:14,500 --> 00:25:16,500
you, better for production.

313
00:25:16,500 --> 00:25:19,940
If you are using it or you're using machine learning in production and you want something

314
00:25:19,940 --> 00:25:21,300
from us, come by.

315
00:25:21,300 --> 00:25:24,580
I'm always trying to figure out what else we can do to make it easier and better for

316
00:25:24,580 --> 00:25:25,580
everyone.

317
00:25:25,580 --> 00:25:28,460
Software is eating the world, and ML is eating software.

318
00:25:29,380 --> 00:25:30,380
So please help us make that happen.

319
00:25:30,380 --> 00:25:31,380
Thank you very much.

320
00:25:31,380 --> 00:25:38,380
I might be at that open space.

321
00:25:38,380 --> 00:25:43,380
Up next we have Manabu who's going to ... I think it's a really relevant topic, so I'm

322
00:25:43,380 --> 00:25:46,380
just going to pass it on to you now.

323
00:25:46,380 --> 00:25:48,380
Hi, good morning.

324
00:25:48,380 --> 00:25:54,500
I will talk about the spread Python community with COVID-19 in Japan.

325
00:25:55,260 --> 00:26:00,260
My name is Manabu Terada from Tokyo, Japan.

326
00:26:00,260 --> 00:26:13,260
I was tough to live from overseas, but I came back to here very nice.

327
00:26:13,260 --> 00:26:23,260
I'm board chair of PyCon JP, PyCon Japan Association, and a PSF follow-up member and more.

328
00:26:24,020 --> 00:26:31,020
We launched the PyCon JP, PyCon Japan in 2011, about 10 years ago.

329
00:26:31,020 --> 00:26:39,020
At that time, the Python community in Japan was very small, so Masuda-san and Ikubara-san

330
00:26:39,020 --> 00:26:44,020
and Ian-san and I took the land.

331
00:26:44,020 --> 00:26:51,020
Other Python users who were active in Tokyo and other parts of Japan started from PyCon

332
00:26:51,020 --> 00:26:52,020
JP.

333
00:26:52,780 --> 00:27:03,780
At first, it was only 150 people joined PyCon JP.

334
00:27:03,780 --> 00:27:14,780
Now, we are able to have 1,000 people at PyCon JP.

335
00:27:14,780 --> 00:27:17,780
Thank you very much.

336
00:27:18,540 --> 00:27:26,540
Of course, this year we will have an in-person event in October.

337
00:27:26,540 --> 00:27:31,540
If you can come to Japan, please join us.

338
00:27:31,540 --> 00:27:42,540
Other activities were to promote Python all over Japan and create more valuable community

339
00:27:42,540 --> 00:27:45,540
all over Japan.

340
00:27:46,300 --> 00:27:51,300
One of those is a tutorial event, Python Bootcamp.

341
00:27:51,300 --> 00:27:58,300
This could be introduced in the poster session in US PyCon 2019.

342
00:28:02,300 --> 00:28:06,300
We supported PyLadies Tokyo, PyLadies Caravan.

343
00:28:06,300 --> 00:28:14,300
It makes local women's community and connecting all over Japan.

344
00:28:15,060 --> 00:28:24,060
However, you all know the world has changed in the spring of 2020.

345
00:28:24,060 --> 00:28:35,060
But we thought it would not be good to stop our activity here.

346
00:28:35,060 --> 00:28:42,060
So we made some activities.

347
00:28:42,820 --> 00:28:49,820
The first one, we held Python Charity Talks in Japan.

348
00:28:49,820 --> 00:28:56,820
It was donated to the Python Software Foundation.

349
00:28:57,580 --> 00:29:04,580
The first time we donated $10,000.

350
00:29:04,580 --> 00:29:12,580
Total is $25,000.

351
00:29:12,580 --> 00:29:15,580
So we held three times.

352
00:29:15,580 --> 00:29:20,580
Other activities, we have a YouTube Live every month.

353
00:29:21,340 --> 00:29:28,340
We share some news for Python and Python community and introducing some events.

354
00:29:28,340 --> 00:29:35,340
And a new feature for Python 3.10 and more.

355
00:29:35,340 --> 00:29:42,340
Last, we are taking the interview for the next PyCon JPTV.

356
00:29:42,340 --> 00:29:49,340
This is my PyCon JPTV.

357
00:29:50,100 --> 00:30:07,100
We have an open space session at 2.50 F.

358
00:30:07,100 --> 00:30:12,100
It started at 13.30.

359
00:30:12,860 --> 00:30:19,860
Please come to the room if you have a message to Japanese Python Easter.

360
00:30:24,860 --> 00:30:29,860
Thank you very much.

361
00:30:33,860 --> 00:30:34,860
Thank you.

362
00:30:34,860 --> 00:30:39,860
I just want to reiterate that $25,000 donation was really awesome.

363
00:30:40,620 --> 00:30:45,620
The folks at the PyCon JP Association got a community service award.

364
00:30:45,620 --> 00:30:46,620
Many people.

365
00:30:46,620 --> 00:30:47,620
Thanks for that.

366
00:30:47,620 --> 00:30:48,620
Thank you.

367
00:30:48,620 --> 00:30:57,620
Next up, Jay is going to talk about DevRel.

368
00:30:57,620 --> 00:31:00,620
Sharing your company's skills with the world.

369
00:31:00,620 --> 00:31:03,620
Give it up for Jay.

370
00:31:04,380 --> 00:31:07,380
I'm going to be honest.

371
00:31:07,380 --> 00:31:10,380
I did the sliding talk for two reasons.

372
00:31:10,380 --> 00:31:13,380
One, a lot of people ask me what is DevRel.

373
00:31:13,380 --> 00:31:16,380
And I go, eh.

374
00:31:16,380 --> 00:31:21,380
The other reason is when I talk to all of my friends in DevRel, they all say, hey, do

375
00:31:21,380 --> 00:31:24,380
you know anybody that would be interested in a job at DevRel?

376
00:31:24,380 --> 00:31:26,380
It's growing.

377
00:31:26,380 --> 00:31:29,380
Every company I've talked to is hiring advocates.

378
00:31:29,380 --> 00:31:31,380
We're hiring content creators.

379
00:31:32,140 --> 00:31:36,940
If you've ever thought that getting up on stage and giving a lightning talk or going

380
00:31:36,940 --> 00:31:42,440
to PyCon and getting to walk around and talk to your friends and then getting paid to do

381
00:31:42,440 --> 00:31:47,440
that is something that you might be interested in, hey, let's figure it out.

382
00:31:47,440 --> 00:31:49,440
Like I said, DevRel.

383
00:31:49,440 --> 00:31:50,440
I don't know.

384
00:31:50,440 --> 00:31:52,440
It's a good thing, though.

385
00:31:52,440 --> 00:31:53,440
Don't worry.

386
00:31:53,440 --> 00:31:59,440
Every company that tells you what DevRel is, they're telling you what their version of

387
00:31:59,440 --> 00:32:00,440
DevRel is.

388
00:32:00,500 --> 00:32:03,500
It's going to be different every time.

389
00:32:03,500 --> 00:32:05,500
It may change with the seasons.

390
00:32:05,500 --> 00:32:07,500
It may change with the weather.

391
00:32:07,500 --> 00:32:12,500
And again, this is a good thing because static sites are cool.

392
00:32:12,500 --> 00:32:15,500
Static teams and companies, not so much.

393
00:32:15,500 --> 00:32:17,500
We have to be flexible.

394
00:32:17,500 --> 00:32:20,500
We have to be able to adapt to what is happening in the space.

395
00:32:20,500 --> 00:32:24,500
So your job is to be a communicator.

396
00:32:24,500 --> 00:32:29,500
Your job is to communicate to the community that you serve.

397
00:32:29,560 --> 00:32:34,560
But it's also your job to communicate to your company the needs of your community.

398
00:32:34,560 --> 00:32:37,560
If you're not doing both, I'm sorry you're wrong.

399
00:32:37,560 --> 00:32:39,560
I'm hoarse.

400
00:32:39,560 --> 00:32:41,560
I don't have time to argue that point.

401
00:32:41,560 --> 00:32:47,560
If you can't provide value to both the community and your company, then you're doing a disservice

402
00:32:47,560 --> 00:32:50,560
to one of those two.

403
00:32:50,560 --> 00:32:52,560
So how do you get into DevRel?

404
00:32:52,560 --> 00:32:54,560
This is going to be the quick three-minute version.

405
00:32:54,560 --> 00:32:57,560
Choose at least one of each of these three kinds of things.

406
00:32:57,620 --> 00:33:01,620
Ephemeral content, a recurring presence, and a longer sustained commitment.

407
00:33:01,620 --> 00:33:04,620
If you do more than one, great, you get bonus points.

408
00:33:04,620 --> 00:33:08,620
That will also give you an idea of what type of role in DevRel you want to take on.

409
00:33:08,620 --> 00:33:11,620
So we're going to start with the first one, ephemeral content.

410
00:33:11,620 --> 00:33:12,620
This is a Twitter space.

411
00:33:12,620 --> 00:33:13,620
That's the new hotness.

412
00:33:13,620 --> 00:33:14,620
I love Twitter spaces.

413
00:33:14,620 --> 00:33:15,620
They're amazing.

414
00:33:15,620 --> 00:33:19,620
I did my first one when I was driving, and then I was like, I want to talk, but I also

415
00:33:19,620 --> 00:33:20,620
don't want to crash.

416
00:33:20,620 --> 00:33:23,620
And that was like, all right, pull over to the side.

417
00:33:23,620 --> 00:33:25,620
Tell everybody why this is amazing.

418
00:33:25,620 --> 00:33:26,620
Okay, then get back on the road.

419
00:33:26,680 --> 00:33:27,680
We'll do safe stuff here.

420
00:33:28,680 --> 00:33:29,680
YouTube Live, Twitch.

421
00:33:29,680 --> 00:33:34,680
If you've always wanted to tell people to like, follow, hit the bell, do all that stuff.

422
00:33:34,680 --> 00:33:40,680
Like, hey, maybe this is a way that you can do that and not have to, A, fight the algorithm,

423
00:33:40,680 --> 00:33:43,680
or B, worry about subscribers, clicks, and downloads.

424
00:33:43,680 --> 00:33:45,680
Or TikTok.

425
00:33:45,680 --> 00:33:47,680
I'm not going to do a TikTok dance.

426
00:33:47,680 --> 00:33:48,680
You can't make me.

427
00:33:48,680 --> 00:33:49,680
I'm sorry.

428
00:33:49,680 --> 00:33:53,680
IG Live, YouTube Shorts, all of these things, all of these pieces of content that happen,

429
00:33:53,680 --> 00:33:55,680
they're like a flash in the pan.

430
00:33:55,740 --> 00:33:56,740
Then they're gone.

431
00:33:57,740 --> 00:34:00,740
If you like doing that, maybe being a developer advocate is for you.

432
00:34:01,740 --> 00:34:08,740
A recurring presence, being at meetups, being at conferences, joining online communities

433
00:34:08,740 --> 00:34:13,740
and discords, Slack channels, appearing on other people's podcasts, doing guest posts

434
00:34:13,740 --> 00:34:14,740
and things.

435
00:34:14,740 --> 00:34:19,740
These are things where people in the community will see you or at least hear your name.

436
00:34:19,800 --> 00:34:24,800
You don't have to worry about whether or not you did good because you're going to come

437
00:34:24,800 --> 00:34:26,800
back and you're going to do better.

438
00:34:26,800 --> 00:34:28,800
You're going to iterate over time.

439
00:34:28,800 --> 00:34:30,800
Just like when you're learning to code.

440
00:34:30,800 --> 00:34:33,800
Your first code, your first lightning talk, you're nervous.

441
00:34:33,800 --> 00:34:34,800
You're scared.

442
00:34:34,800 --> 00:34:37,800
You want to push that button and your buddy Seth is like, don't worry, you got this.

443
00:34:37,800 --> 00:34:38,800
That was a true story.

444
00:34:38,800 --> 00:34:41,800
That was the story of my first pull request.

445
00:34:42,800 --> 00:34:44,800
But the more you show up, the better you get at it.

446
00:34:44,800 --> 00:34:47,800
The better you get at it, the more people notice that you're getting better at it.

447
00:34:47,860 --> 00:34:50,860
And then the more people are going to want to talk to you because then you go from being

448
00:34:50,860 --> 00:34:53,860
the person that was learning to the person that's now teaching.

449
00:34:55,860 --> 00:34:57,860
And then finally, the longer sustainable commitment.

450
00:34:57,860 --> 00:34:58,860
This is your blog.

451
00:34:58,860 --> 00:34:59,860
This is your podcast.

452
00:34:59,860 --> 00:35:00,860
This is your personal YouTube channel.

453
00:35:00,860 --> 00:35:02,860
This is your newsletter.

454
00:35:02,860 --> 00:35:05,860
This is you posting cat pics on Twitter.

455
00:35:08,860 --> 00:35:11,860
Sorry, I've been trying to convince some people to get into dev role lately.

456
00:35:11,920 --> 00:35:16,920
So anything that allows people to see you, know you, know who you are, and feel like

457
00:35:16,920 --> 00:35:20,920
they can connect with you and they know exactly where they can find you, that is going to

458
00:35:20,920 --> 00:35:22,920
be the thing that you need to focus on.

459
00:35:22,920 --> 00:35:24,920
And like I said, it's not just being an advocate.

460
00:35:24,920 --> 00:35:25,920
You can be a content creator.

461
00:35:25,920 --> 00:35:26,920
You can be a writer.

462
00:35:26,920 --> 00:35:27,920
You can get in the video team.

463
00:35:27,920 --> 00:35:29,920
You can do all of these things.

464
00:35:30,920 --> 00:35:32,920
But I know what you're going to tell me.

465
00:35:32,920 --> 00:35:33,920
I'm introverted.

466
00:35:33,920 --> 00:35:34,920
Me too.

467
00:35:34,920 --> 00:35:36,920
I'm going to go home and go to sleep for a few days.

468
00:35:37,920 --> 00:35:38,920
You might have ADHD.

469
00:35:38,920 --> 00:35:40,920
How do you focus on all these things?

470
00:35:40,980 --> 00:35:41,980
Me too.

471
00:35:41,980 --> 00:35:45,980
Having a lot of different things to focus on actually makes the job fun and easy.

472
00:35:45,980 --> 00:35:48,980
And you can bounce from one idea and then when you're tired of that idea, you put it

473
00:35:48,980 --> 00:35:50,980
down and then you pick up another one and then you work on that stuff.

474
00:35:50,980 --> 00:35:52,980
And you're not the most tech savvy.

475
00:35:52,980 --> 00:35:53,980
That's fine.

476
00:35:53,980 --> 00:35:56,980
Your job is to learn and to show people what you've learned.

477
00:35:56,980 --> 00:35:58,980
There are a lot of people in the expo hall.

478
00:35:58,980 --> 00:36:02,980
If you're interested, you can find me or find someone in a booth and ask them.

479
00:36:02,980 --> 00:36:04,980
Your favorite part, your least favorite part.

480
00:36:04,980 --> 00:36:05,980
Thank you.

481
00:36:06,040 --> 00:36:07,040
Thank you.

482
00:36:12,040 --> 00:36:15,040
So I have two Maine Coons who I'm very, very proud of.

483
00:36:15,040 --> 00:36:20,040
One of them is named Per Card after Jean-Luc Picard and all those things.

484
00:36:20,040 --> 00:36:22,040
And yes, I do put them on Twitch.

485
00:36:22,040 --> 00:36:25,040
I'm very excited for this next talk and we have Jack.

486
00:36:32,040 --> 00:36:33,040
Yeah.

487
00:36:33,040 --> 00:36:34,040
Hi, I'm Jack.

488
00:36:34,100 --> 00:36:37,100
You might be able to tell by the title of this talk that it's going to be a bit different

489
00:36:37,100 --> 00:36:41,100
in terms of content from the other talks, but I'll be talking about what I think is

490
00:36:41,100 --> 00:36:43,100
an interesting use of binary search.

491
00:36:43,100 --> 00:36:46,100
And I swear this is more interesting than Leap Code.

492
00:36:47,100 --> 00:36:51,100
Okay, so as a quick review, I'm assuming most of you are familiar with what binary search

493
00:36:51,100 --> 00:36:54,100
is, so we're going to go over an easy problem.

494
00:36:54,100 --> 00:36:58,100
So you have this list of a positive number of zeros followed by a positive number of

495
00:36:58,100 --> 00:37:02,100
ones, and your task with binary search is to find the index of this first one in the

496
00:37:02,160 --> 00:37:03,160
list.

497
00:37:03,160 --> 00:37:07,160
So how we can do this is that we have two pointers, low and high, to indicate the current

498
00:37:07,160 --> 00:37:08,160
search range.

499
00:37:09,160 --> 00:37:14,160
And then in each step, we try to reduce the search range by a factor of two until

500
00:37:14,160 --> 00:37:16,160
eventually we end at our answer.

501
00:37:17,160 --> 00:37:19,160
Okay, so that's pretty simple.

502
00:37:19,160 --> 00:37:22,160
So now we're going to look at how we can apply this to solve a harder problem.

503
00:37:23,160 --> 00:37:24,160
And this is the problem statement.

504
00:37:24,160 --> 00:37:29,160
Partition a given list with n positive integers indicate contiguous segments such that

505
00:37:29,160 --> 00:37:31,160
the maximum segment sum is minimized.

506
00:37:31,220 --> 00:37:35,220
That's a lot to take in, so I think this is best explained with an example.

507
00:37:37,220 --> 00:37:42,220
So we have this list here with 10 elements, and we want to partition it into four parts.

508
00:37:43,220 --> 00:37:45,220
So one way we can do it is like this.

509
00:37:45,220 --> 00:37:48,220
So the sums are 10, 18, 6, and 8 respectively.

510
00:37:49,220 --> 00:37:53,220
So the maximum segment sum is 18, and this red number here is what we want to minimize.

511
00:37:54,220 --> 00:37:56,220
And it turns out that we can actually do better than 18.

512
00:37:56,280 --> 00:37:57,280
So we can do better than 18.

513
00:37:58,280 --> 00:38:03,280
If instead we partition the list like this, where the sums are 10, 10, 12, and then 8,

514
00:38:04,280 --> 00:38:06,280
the maximum segment is 12, and it turns out this is optimal.

515
00:38:07,280 --> 00:38:10,280
So to get to solving this problem, it isn't very easy.

516
00:38:10,280 --> 00:38:12,280
We have to first make a few observations.

517
00:38:14,280 --> 00:38:19,280
So the first observation is that if we fix some number m, it's easy to construct a partition

518
00:38:19,280 --> 00:38:21,280
where no segment has sum exceeding m.

519
00:38:21,340 --> 00:38:25,340
So here's this function I have called constructPartition.

520
00:38:26,340 --> 00:38:32,340
We take in a list, k and m, and then we either produce a partition satisfying these constraints,

521
00:38:33,340 --> 00:38:36,340
or just for convenience we return none if no partition exists.

522
00:38:37,340 --> 00:38:40,340
So the idea is to just build each segment one by one.

523
00:38:41,340 --> 00:38:44,340
And once we get to a point where our segment sum is about to exceed m,

524
00:38:45,340 --> 00:38:46,340
we add the segment to the partition.

525
00:38:46,400 --> 00:38:49,400
And we're going to keep doing this through the whole list, and you get the idea.

526
00:38:50,400 --> 00:38:52,400
So eventually we end up with our partition from the previous slide.

527
00:38:55,400 --> 00:39:00,400
Okay, so now with this function constructPartition, we can decide whether or not we can partition the list

528
00:39:01,400 --> 00:39:04,400
so that the maximum segment sum is at most m, and we can also provide a construction.

529
00:39:05,400 --> 00:39:09,400
But what we want is to partition the list so that the maximum segment sum is minimized.

530
00:39:11,400 --> 00:39:13,400
So to do this, we have to make another observation.

531
00:39:13,460 --> 00:39:15,460
And we're going to look at this funny-looking list comprehension here.

532
00:39:16,460 --> 00:39:19,460
Here we're going to construct a partition for just about every possible value of m

533
00:39:20,460 --> 00:39:23,460
that might be interesting to us, from zero to the sum of the whole list.

534
00:39:24,460 --> 00:39:26,460
And this list has a few special properties.

535
00:39:27,460 --> 00:39:29,460
First of all is that the last element is not none,

536
00:39:30,460 --> 00:39:33,460
and this is because any partition has the property that the maximum segment sum

537
00:39:34,460 --> 00:39:36,460
is at most the sum of the whole list.

538
00:39:37,460 --> 00:39:40,460
And also the elements in this list, which are all the same,

539
00:39:40,520 --> 00:39:45,520
and also the elements in this list, which are partitions, are suffix of the list.

540
00:39:46,520 --> 00:39:48,520
So if you think about this list comprehension structurally,

541
00:39:49,520 --> 00:39:53,520
it's some number of none's followed by some number of partitions that you can construct.

542
00:39:56,520 --> 00:40:00,520
And then if you look at the first partition, it also has maximum segment sum of exactly j

543
00:40:01,520 --> 00:40:03,520
if we say that this partition is at index j.

544
00:40:04,520 --> 00:40:07,520
And then using the same proof-by-contradiction logic,

545
00:40:07,580 --> 00:40:10,580
we can also show that this first partition is actually your answer.

546
00:40:11,580 --> 00:40:13,580
It's the partition that minimizes the maximum segment sum.

547
00:40:16,580 --> 00:40:19,580
But if we treat all the none's as zero's and all the partitions as one's,

548
00:40:20,580 --> 00:40:22,580
this problem of finding the first partition is basically the same

549
00:40:23,580 --> 00:40:27,580
as the problem that I discussed earlier of finding the first one in this list of zero's and one's.

550
00:40:29,580 --> 00:40:31,580
So this is the code.

551
00:40:32,580 --> 00:40:33,580
That's a pretty short code,

552
00:40:34,580 --> 00:40:36,580
and you'll notice that it's actually pretty similar to this first problem that I described.

553
00:40:37,580 --> 00:40:40,580
And now I want to take some time to revisit the title slide.

554
00:40:41,580 --> 00:40:43,580
So actually, an hour before this talk, when I was preparing,

555
00:40:44,580 --> 00:40:46,580
I realized that this is actually a Leak Code problem.

556
00:40:49,580 --> 00:40:51,580
But nonetheless, I still think it's pretty interesting.

557
00:40:52,580 --> 00:40:53,580
So this is Leak Code Problem 410.

558
00:40:54,580 --> 00:40:56,580
If you want to have a crack at it, maybe during lunch,

559
00:40:57,580 --> 00:40:59,580
I think it'd be pretty interesting.

560
00:41:00,580 --> 00:41:02,580
And that's all. Thank you.

561
00:41:05,580 --> 00:41:06,580
Thanks very much.

562
00:41:07,580 --> 00:41:11,580
We have Henry who's going to give us a talk on Scikit-HEP Developer Pages.

563
00:41:12,580 --> 00:41:14,580
Let's give it up for Henry.

564
00:41:19,580 --> 00:41:20,580
Okay, thank you.

565
00:41:21,580 --> 00:41:23,580
So I want to talk about the Scikit-HEP Developer Pages.

566
00:41:24,580 --> 00:41:29,580
So Scikit-HEP is a GitHub organization that was built around providing high energy physics packages.

567
00:41:30,580 --> 00:41:33,580
So we have a bunch of high energy physics specific packages

568
00:41:34,580 --> 00:41:35,580
that have been built up over the last few years.

569
00:41:35,640 --> 00:41:37,640
You can see a few of them listed here.

570
00:41:38,640 --> 00:41:42,640
But we have also worked on some general purpose packages as well.

571
00:41:43,640 --> 00:41:47,640
So we have some packages that are there like Vector for vector manipulations,

572
00:41:48,640 --> 00:41:53,640
Awkward Array for JSON-like data structure, but NumPy-like access, and histograms.

573
00:41:54,640 --> 00:41:58,640
But one of the products that has come out of this is the Scikit-HEP Developer Pages.

574
00:41:59,640 --> 00:42:01,640
And this is the most general, I think, of all of these.

575
00:42:02,640 --> 00:42:04,640
And that's why I wanted to talk to you today about it.

576
00:42:05,640 --> 00:42:07,640
If you want to find these, you can just go to scikit-hep.org.

577
00:42:08,640 --> 00:42:10,640
It's also linked to my blog, isinumpy.dev.

578
00:42:11,640 --> 00:42:13,640
And you'll get to a page that looks like this.

579
00:42:14,640 --> 00:42:18,640
You can click on either of these two places, and you'll get to the Developer Pages.

580
00:42:19,640 --> 00:42:23,640
So when you get to the Developer Pages, you'll be greeted with something that looks like this.

581
00:42:24,640 --> 00:42:28,640
You have a variety of different pages there, and it'll guide, sort of walks you through the different pages.

582
00:42:29,640 --> 00:42:31,640
These pages can sort of be grouped into these areas.

583
00:42:31,700 --> 00:42:35,700
There are some tutorial-like pages that sort of tell you how to set up a development environment,

584
00:42:36,700 --> 00:42:38,700
use PyTest, static typing, things like that,

585
00:42:39,700 --> 00:42:43,700
including a very nice GitHub Actions tutorial, including how to do binary packages,

586
00:42:44,700 --> 00:42:48,700
regular PurePython packages, and a discussion of how you'd use a TaskRunner like Knox.

587
00:42:49,700 --> 00:42:51,700
And then there's some specifications.

588
00:42:52,700 --> 00:42:55,700
The packaging is in two different sort of groups,

589
00:42:55,760 --> 00:42:59,760
so a classic packaging and a simple 6.21 style packaging.

590
00:43:00,760 --> 00:43:03,760
And then there's a style guide, and then there's a couple extra tools,

591
00:43:04,760 --> 00:43:06,760
which I'll show you, Cookie and repo review, that support this.

592
00:43:07,760 --> 00:43:11,760
So this is the simple Python packaging page.

593
00:43:12,760 --> 00:43:14,760
It used to be called PurePython packaging,

594
00:43:15,760 --> 00:43:19,760
but hopefully this is sort of going to include some binary packaging soon.

595
00:43:20,760 --> 00:43:22,760
And so you have this little toggle here,

596
00:43:22,820 --> 00:43:26,820
and you can actually just switch this toggle from Flit to Hatched, PDM, Setup Tools.

597
00:43:27,820 --> 00:43:30,820
The whole page is the same. All this part on the page is the same.

598
00:43:31,820 --> 00:43:33,820
It's really just that tool that changes,

599
00:43:34,820 --> 00:43:38,820
just those two lines, which is a really nice feature of PEP6.21.

600
00:43:39,820 --> 00:43:41,820
And so this can be a guide for any one of those.

601
00:43:42,820 --> 00:43:44,820
For style, there's a bunch of different things.

602
00:43:45,820 --> 00:43:48,820
It sort of tells you how to set up pre-commit hooks for all of these different tools,

603
00:43:49,820 --> 00:43:51,820
with recommendations for how you would configure these.

604
00:43:52,820 --> 00:43:56,820
And sort of describing what each one is.

605
00:43:57,820 --> 00:44:00,820
Now, this all comes together in Scikit-HEP Cookie,

606
00:44:01,820 --> 00:44:02,820
which is a cookie cutter package.

607
00:44:03,820 --> 00:44:05,820
It gives you 11 different backends to choose from.

608
00:44:06,820 --> 00:44:08,820
So if you want a Setup Tools traditional package,

609
00:44:09,820 --> 00:44:11,820
or if you want a Setup Tools PEP6.21, or Flit or Hatched, or PDM,

610
00:44:12,820 --> 00:44:13,820
or several others.

611
00:44:14,820 --> 00:44:16,820
And it even has some binary packaging,

612
00:44:17,820 --> 00:44:19,820
which you don't see very often in sort of a general cookie cutter.

613
00:44:19,880 --> 00:44:21,880
So you can go to Scikit-Build, or just plain Setup Tools C++,

614
00:44:22,880 --> 00:44:24,880
or even Rust is supported there.

615
00:44:25,880 --> 00:44:27,880
So to do this, you could just do a PEPX run cookie cutter,

616
00:44:28,880 --> 00:44:29,880
or however you like to run cookie cutter,

617
00:44:30,880 --> 00:44:32,880
and then that's the path that you can put in.

618
00:44:33,880 --> 00:44:35,880
And this is all backed by the Scikit-HEP Developer Guidelines,

619
00:44:36,880 --> 00:44:40,880
so you're not just thrown at a bunch of different styles and things.

620
00:44:41,880 --> 00:44:43,880
You can actually go look up and see why each choice is made,

621
00:44:44,880 --> 00:44:46,880
and why each package is there.

622
00:44:46,940 --> 00:44:48,940
And then there's the Scikit-HEP Repo review.

623
00:44:49,940 --> 00:44:51,940
And this is something that I sort of wrote for myself.

624
00:44:52,940 --> 00:44:54,940
This is a rich application.

625
00:44:55,940 --> 00:44:57,940
And you can just run this,

626
00:44:58,940 --> 00:45:01,940
and it will see how close a repository is to following these guidelines.

627
00:45:02,940 --> 00:45:04,940
So it'll go through and check a variety of these different guidelines.

628
00:45:05,940 --> 00:45:07,940
There's lots of different ones here,

629
00:45:08,940 --> 00:45:10,940
and tell you if it matches or not.

630
00:45:11,940 --> 00:45:13,940
And this is really nice,

631
00:45:14,000 --> 00:45:17,000
but it's still something you have to go manually run.

632
00:45:18,000 --> 00:45:20,000
So what I've recently done

633
00:45:21,000 --> 00:45:23,000
is written the Scikit-HEP Repo review Pydite app.

634
00:45:24,000 --> 00:45:26,000
This Pydite app sits there in the Scikit-HEP Developer pages.

635
00:45:27,000 --> 00:45:29,000
It's just one of the pages in that list.

636
00:45:30,000 --> 00:45:32,000
You can just type in your repository, pick a branch,

637
00:45:33,000 --> 00:45:35,000
and click a button.

638
00:45:36,000 --> 00:45:38,000
And in your browser, Python,

639
00:45:39,000 --> 00:45:41,000
and this is a Python 3.10 application that uses pattern matching and things,

640
00:45:41,060 --> 00:45:43,060
but it's able to just run right there in your browser

641
00:45:44,060 --> 00:45:46,060
without installing anything

642
00:45:47,060 --> 00:45:49,060
and give you a report that looks like this in your browser.

643
00:45:50,060 --> 00:45:52,060
So you don't have to leave the Scikit-HEP Developer pages anymore.

644
00:45:53,060 --> 00:45:55,060
And a day later, another HEP user took this.

645
00:45:56,060 --> 00:45:58,060
I was also really excited just in this technology and the ability to do this.

646
00:45:59,060 --> 00:46:01,060
One day later, another of our Scikit-HEP developers took this

647
00:46:02,060 --> 00:46:06,060
and adapted it to one of the other packages there.

648
00:46:07,060 --> 00:46:09,060
So that was something that was exactly what I wanted to happen from this

649
00:46:09,120 --> 00:46:11,120
and was really excited to see other applications.

650
00:46:12,120 --> 00:46:14,120
Okay.

651
00:46:15,120 --> 00:46:17,120
So, Fett, thank you very much.

652
00:46:18,120 --> 00:46:20,120
Applause

653
00:46:21,120 --> 00:46:23,120
Thank you so much, Henry.

654
00:46:24,120 --> 00:46:26,120
I just want to do a quick plug.

655
00:46:27,120 --> 00:46:29,120
PyLadies Auction is tonight.

656
00:46:30,120 --> 00:46:32,120
It's a really great organization, hence the shirt I'm wearing.

657
00:46:33,120 --> 00:46:35,120
And it helps us raise money for folks to come to PyCon

658
00:46:36,120 --> 00:46:38,120
and do really great things.

659
00:46:39,120 --> 00:46:41,120
So thank you for the support that you've given us.

660
00:46:42,120 --> 00:46:44,120
And I'm really grateful for the support that you've given us.

661
00:46:45,120 --> 00:46:47,120
Thank you so much.

662
00:46:48,120 --> 00:46:50,120
Thank you.

663
00:46:51,120 --> 00:46:53,120
Thank you.

664
00:46:54,120 --> 00:46:56,120
Thank you.

665
00:46:57,120 --> 00:46:59,120
Thank you.

666
00:47:00,120 --> 00:47:02,120
Thank you.

667
00:47:03,120 --> 00:47:05,120
Thank you.

668
00:47:06,120 --> 00:47:08,120
Thank you.

669
00:47:09,120 --> 00:47:11,120
Okay, I'm here to tell you to stop running your tests.

670
00:47:12,120 --> 00:47:14,120
But Chris, I hear you saying,

671
00:47:15,120 --> 00:47:17,120
tests are how I am confident that my code works.

672
00:47:18,120 --> 00:47:20,120
And that's true.

673
00:47:21,120 --> 00:47:23,120
Having good test coverage is a great way to be absolutely certain

674
00:47:24,120 --> 00:47:26,120
that your implementations are correct

675
00:47:27,120 --> 00:47:29,120
and making sure that you don't break things as you develop.

676
00:47:30,120 --> 00:47:32,120
But on the other hand, tests have a lot of problems.

677
00:47:33,120 --> 00:47:35,120
They're slow.

678
00:47:36,120 --> 00:47:38,120
When you run your full test suite, most of the tests you run are irrelevant

679
00:47:39,120 --> 00:47:41,120
but you don't run your entire test suite except in CI

680
00:47:42,120 --> 00:47:44,120
because it's slow.

681
00:47:45,120 --> 00:47:47,120
So in short, you have tests but you don't run your tests.

682
00:47:48,120 --> 00:47:50,120
You have no tests.

683
00:47:51,120 --> 00:47:53,120
What would be better is if you could keep not running your tests

684
00:47:54,120 --> 00:47:56,120
as often as you do now,

685
00:47:57,120 --> 00:47:59,120
but still know which of your tests are correct.

686
00:48:00,120 --> 00:48:02,120
That world actually exists.

687
00:48:03,120 --> 00:48:05,120
I'm a maintainer on an open source project called PantsBuild

688
00:48:06,120 --> 00:48:08,120
where a tool that orchestrates all the other tools that you use

689
00:48:09,120 --> 00:48:11,120
is running through to testing and packaging.

690
00:48:12,120 --> 00:48:14,120
Our goal is to make the Python tools you already use

691
00:48:15,120 --> 00:48:17,120
more efficient than they are in their default configurations

692
00:48:18,120 --> 00:48:20,120
even on huge code bases with complex interdependencies.

693
00:48:21,120 --> 00:48:23,120
We do that by identifying work that can be run in parallel

694
00:48:24,120 --> 00:48:26,120
or redundant or duplicated work

695
00:48:27,120 --> 00:48:29,120
which will save you from having to run at all.

696
00:48:30,120 --> 00:48:32,120
Watch this. You can run an entire test suite.

697
00:48:33,120 --> 00:48:35,120
That is not surprising.

698
00:48:36,120 --> 00:48:38,120
You can see we run PyTest under the hood

699
00:48:39,120 --> 00:48:41,120
and it takes 20 seconds wall clock time to run this 60-second test suite.

700
00:48:42,120 --> 00:48:44,120
That's great but not completely surprising.

701
00:48:45,120 --> 00:48:47,120
A lot of test runners do this.

702
00:48:48,120 --> 00:48:50,120
What else can we do?

703
00:48:51,120 --> 00:48:53,120
Well, if we change one of the test files and rerun the entire test suite,

704
00:48:54,120 --> 00:48:56,120
it looks like this.

705
00:48:57,120 --> 00:48:59,120
It looks like it runs everything but it actually doesn't.

706
00:49:00,120 --> 00:49:02,120
All of those tests that we ran before and we didn't change get reused.

707
00:49:03,120 --> 00:49:05,120
Only the test that we change gets rerun.

708
00:49:06,120 --> 00:49:08,120
That is because Pants will cache every single run down to the process level.

709
00:49:09,120 --> 00:49:11,120
The 60-second test suite takes only 10 seconds to run now.

710
00:49:12,120 --> 00:49:14,120
That's still not surprising. A lot of test runners do this.

711
00:49:15,120 --> 00:49:17,120
Let's reset that change and run those tests again.

712
00:49:18,120 --> 00:49:20,120
Pants will cache every test run,

713
00:49:21,120 --> 00:49:23,120
not just the most recent one.

714
00:49:24,120 --> 00:49:26,120
If we run a command that's identical to the one we've run before,

715
00:49:27,120 --> 00:49:29,120
Pants will pull all of those test results out of the cache and reuse them.

716
00:49:30,120 --> 00:49:32,120
Our 60-second test suite will now run instantly.

717
00:49:33,120 --> 00:49:35,120
Now, what if instead of changing a test file,

718
00:49:36,120 --> 00:49:38,120
we change an implementation file that is under test?

719
00:49:39,120 --> 00:49:41,120
We can rerun the entire test suite

720
00:49:42,120 --> 00:49:44,120
and this time the only test we rerun

721
00:49:45,120 --> 00:49:47,120
is the one that tests the implementation file that we changed,

722
00:49:48,120 --> 00:49:50,120
that we're testing.

723
00:49:51,120 --> 00:49:53,120
With this, you can make all the changes you want to your implementation files

724
00:49:54,120 --> 00:49:56,120
that you like and you can rerun the entire test suite

725
00:49:57,120 --> 00:49:59,120
and Pants will only rerun the tests where you change the code.

726
00:50:00,120 --> 00:50:02,120
This is because Pants does automatic dependency inference.

727
00:50:03,120 --> 00:50:05,120
It will do static analysis on your code base

728
00:50:06,120 --> 00:50:08,120
and it will figure out all of your Python code sets

729
00:50:09,120 --> 00:50:11,120
and it will map those dependencies automatically.

730
00:50:12,120 --> 00:50:14,120
This Pants Dependees command will show that dependency analysis for you

731
00:50:15,120 --> 00:50:17,120
and again, it has figured all of this out automatically.

732
00:50:18,120 --> 00:50:20,120
We didn't need to do any configuration.

733
00:50:21,120 --> 00:50:23,120
This is all the configuration we needed to do.

734
00:50:24,120 --> 00:50:26,120
We just said there are some source files, said there are some test files.

735
00:50:27,120 --> 00:50:29,120
If you've ever written a build file before, you know how short this is.

736
00:50:30,120 --> 00:50:32,120
You don't have to map any dependencies yourself.

737
00:50:33,120 --> 00:50:35,120
Our static analysis, if it misses a dependency,

738
00:50:36,120 --> 00:50:38,120
you can add it manually, but normally you don't need to.

739
00:50:39,120 --> 00:50:41,120
If you want to modify yourself, we have scripts

740
00:50:42,120 --> 00:50:44,120
that will automatically generate all of your build files.

741
00:50:45,120 --> 00:50:47,120
If this is interesting to you and you want more of a demo

742
00:50:48,120 --> 00:50:50,120
or you want to talk about how Pants could help in your code base,

743
00:50:51,120 --> 00:50:53,120
you can find myself or Benji or John.

744
00:50:54,120 --> 00:50:56,120
They're wearing shirts with the Pants logo on it.

745
00:50:57,120 --> 00:50:59,120
I've got a talk on Sunday at 1 o'clock

746
00:51:00,120 --> 00:51:02,120
about how Pants does all this fine-grained caching

747
00:51:03,120 --> 00:51:05,120
underneath the hood and we'll be sprinting on Monday

748
00:51:06,120 --> 00:51:08,120
where we will help you run Pants on your own code base.

749
00:51:09,120 --> 00:51:13,120
This is how you can use Pants to stop running your tests unnecessarily.

750
00:51:14,120 --> 00:51:16,120
My name is Christopher Neugebauer. Thank you very much.

751
00:51:17,120 --> 00:51:19,120
Cantaloupe!

