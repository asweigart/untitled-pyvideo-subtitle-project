1
00:00:00,000 --> 00:00:02,000
We will be starting in about a minute.

2
00:00:06,360 --> 00:00:08,360
So, welcome to the end of day two.

3
00:00:11,180 --> 00:00:13,180
Yes, welcome.

4
00:00:14,260 --> 00:00:16,260
Let's kick it off with some lightning talks, shall we?

5
00:00:17,260 --> 00:00:19,260
We shall, we shall.

6
00:00:20,360 --> 00:00:22,360
As a reminder, each of our speakers will get five minutes.

7
00:00:23,460 --> 00:00:25,460
When we get down to around 20 seconds, we'll start with our

8
00:00:26,500 --> 00:00:28,500
small claps, one, then two, and then we'll go into a full clap

9
00:00:30,160 --> 00:00:32,160
of applause for our first speaker, Cristian.

10
00:00:34,680 --> 00:00:36,680
Hello. Can you hear me?

11
00:00:37,800 --> 00:00:39,800
Cool. Okay.

12
00:00:40,920 --> 00:00:42,920
So, I will do some live coding so maybe everything will explode,

13
00:00:42,920 --> 00:00:44,920
but let's see.

14
00:00:46,920 --> 00:00:48,920
Hola, bonjour, hola, hello, ciao.

15
00:00:50,200 --> 00:00:52,200
We know languages are beautiful, but sometimes they can be a

16
00:00:52,200 --> 00:00:54,200
barrier. My name is Cristian.

17
00:00:56,320 --> 00:00:58,320
I'm going to talk to you about Python and Espanol, so you can

18
00:00:58,440 --> 00:01:00,440
hear me, but I'm not going to talk about the code.

19
00:01:02,620 --> 00:01:04,620
I'm going to talk about the code.

20
00:01:05,720 --> 00:01:07,720
I'm going to talk about the code.

21
00:01:09,880 --> 00:01:11,880
So, how many non-native English speakers do we have here in the

22
00:01:11,880 --> 00:01:13,880
audience? A few.

23
00:01:16,040 --> 00:01:18,040
Okay. Fair enough.

24
00:01:20,140 --> 00:01:22,140
So, for us, usually learning to code requires learning English,

25
00:01:23,240 --> 00:01:25,240
which is not bad, but of course it's an extra step.

26
00:01:25,240 --> 00:01:27,240
So, I'm going to talk about Python and Espanol.

27
00:01:29,240 --> 00:01:31,240
So, I'm going to talk about Python and Espanol.

28
00:01:33,360 --> 00:01:35,360
I like to play a little bit about Python, so I was thinking

29
00:01:35,360 --> 00:01:37,360
of doing something maybe silly.

30
00:01:39,560 --> 00:01:41,560
So, let's start with a simple Python interpreter. Nothing

31
00:01:42,680 --> 00:01:44,680
wrong there.

32
00:01:46,280 --> 00:01:48,280
I'm pretty sure everything makes sense.

33
00:01:49,560 --> 00:01:51,560
So, the first thing I learned in Python was a list.

34
00:01:52,120 --> 00:01:54,120
You can use the list, you can use the list.

35
00:01:55,500 --> 00:01:57,500
You can use the list to create a list, and you can also create a

36
00:01:57,500 --> 00:01:59,500
list.

37
00:02:00,800 --> 00:02:02,800
Okay, a list is cool.

38
00:02:03,920 --> 00:02:05,920
But then you can create it in a more simple way.

39
00:02:08,040 --> 00:02:10,040
How can you populate a list?

40
00:02:12,260 --> 00:02:14,260
You can use the famous mientras loop.

41
00:02:15,620 --> 00:02:17,620
You can go and say, let's try with a contador.

42
00:02:17,820 --> 00:02:19,820
And then you can do the same thing.

43
00:02:21,920 --> 00:02:23,920
You can use the list to create a list.

44
00:02:25,920 --> 00:02:27,920
And then you can use the list to create a list.

45
00:02:29,920 --> 00:02:31,920
And then you have the list.

46
00:02:33,520 --> 00:02:35,520
By the way, if you don't know about this atjuntar thing, you

47
00:02:36,520 --> 00:02:38,520
can always, of course, do the ayuda.

48
00:02:40,620 --> 00:02:42,620
And you can get that.

49
00:02:44,040 --> 00:02:46,040
But the cool thing about Python when I just learned it, it was

50
00:02:47,640 --> 00:02:49,640
that I can do the same thing.

51
00:02:51,920 --> 00:02:53,920
So, if you want to create a list for an item in L, you can do

52
00:02:58,020 --> 00:03:00,020
L2 atjuntar the item.

53
00:03:02,120 --> 00:03:04,120
And then you have the same thing.

54
00:03:06,120 --> 00:03:08,120
You can, of course, make sure that these things are the same

55
00:03:08,120 --> 00:03:10,120
with the typical afirmar, of course.

56
00:03:12,540 --> 00:03:14,540
Okay, they are the same.

57
00:03:14,940 --> 00:03:16,940
So, you can do this.

58
00:03:18,740 --> 00:03:20,740
And then you can do the same thing.

59
00:03:22,820 --> 00:03:24,820
You can go there and get the item.

60
00:03:27,800 --> 00:03:29,800
And then the typical atjuntar method that you already learned.

61
00:03:32,840 --> 00:03:34,840
And then you have this thing. Be careful with ranges, though.

62
00:03:36,000 --> 00:03:38,000
Because if you access a range, sometimes if the item doesn't

63
00:03:38,000 --> 00:03:40,000
exist, then you will get an exception.

64
00:03:41,240 --> 00:03:43,240
So, how do we handle exceptions in Python?

65
00:03:44,560 --> 00:03:46,540
So, you can go to the

66
00:03:48,540 --> 00:03:50,540
L2, and you can go to the L2.

67
00:03:52,760 --> 00:03:54,760
And then you go intetar, and you go, for

68
00:03:55,860 --> 00:03:57,860
example, something crazy, like, I don't know, 99.

69
00:04:00,440 --> 00:04:02,440
You can capture the execcion.

70
00:04:04,360 --> 00:04:06,360
And then typically imprimir something.

71
00:04:07,440 --> 00:04:09,440
Oh, no, right?

72
00:04:11,560 --> 00:04:13,560
Okay, so, of course, this thing was just playing around with the

73
00:04:14,560 --> 00:04:16,560
solution, and you can do this.

74
00:04:17,860 --> 00:04:19,860
And then you can go to the L2, and you

75
00:04:20,960 --> 00:04:22,960
can go to the L2, and you can do this.

76
00:04:24,980 --> 00:04:26,980
And now this is not the solution. I don't expect Python to be in

77
00:04:26,980 --> 00:04:29,280
Spanish, of course, at any moment. But we could help

78
00:04:29,280 --> 00:04:31,280
differently.

79
00:04:32,580 --> 00:04:34,580
So, maybe you can start your projects, having in mind that

80
00:04:35,680 --> 00:04:37,680
at some point, someone will be really keen into maybe

81
00:04:38,780 --> 00:04:40,780
translating the documentation, all the readme and all the

82
00:04:41,800 --> 00:04:43,800
things that you have, and we can see this, for example, in this

83
00:04:44,640 --> 00:04:46,640
video, and you can see that there's a lot of information

84
00:04:47,780 --> 00:04:49,780
that we can take from the Python community, and we can

85
00:04:50,780 --> 00:04:52,780
share it with people, maybe a year.

86
00:04:54,240 --> 00:04:56,240
And other things, like, for example, that's Python charlas,

87
00:04:56,240 --> 00:04:58,240
that's usually an instance that helps us, of course, to be

88
00:04:59,380 --> 00:05:01,380
around people that speak the same language, and, you know,

89
00:05:01,480 --> 00:05:03,480
learning your own language will make you feel home.

90
00:05:04,780 --> 00:05:06,780
So, at least from the Spanish community point of view, we

91
00:05:07,900 --> 00:05:09,900
started to do something like that, and this is Python and

92
00:05:10,000 --> 00:05:12,000
Espanol, you can check the information.

93
00:05:12,100 --> 00:05:14,100
So, we started to do this, and we're really excited to be

94
00:05:15,260 --> 00:05:17,260
able to help people to learn their own language.

95
00:05:18,780 --> 00:05:20,780
Maybe you can start your own communities just to encourage

96
00:05:21,800 --> 00:05:23,800
and enable, as Peter was saying in the keynote, to enable more

97
00:05:24,900 --> 00:05:26,900
people to have more developers and what else than learning your

98
00:05:28,000 --> 00:05:30,000
own language. That's it. Thank you very much.

99
00:05:31,220 --> 00:05:33,220
APPLAUSE

100
00:05:36,220 --> 00:05:38,220
. » What a great talk. I'm so glad

101
00:05:38,220 --> 00:05:40,220
we're not changing very much between Python 3 and Python 4.

102
00:05:42,000 --> 00:05:44,000
I'm going to turn it over to Peter to give us a little bit

103
00:05:45,100 --> 00:05:47,100
of a brief introduction. » Hi, everyone.

104
00:05:51,140 --> 00:05:53,140
This is my first PyCon. Reflections.

105
00:05:56,240 --> 00:06:00,240
Yes. Again, I'm Mario. You can find me on Twitter, Python by

106
00:06:00,240 --> 00:06:04,240
Knight. So, my journey to PyCon began with a call to adventure.

107
00:06:04,240 --> 00:06:10,240
It was actually this tweet by the PyCon Twitter handle with a

108
00:06:10,480 --> 00:06:12,480
comment, and I thought to myself, why not? It can't be

109
00:06:13,480 --> 00:06:15,480
that hard, right? And I was surprised in early February when

110
00:06:16,480 --> 00:06:18,480
they were, I guess it wasn't that hard. I got my tutorial

111
00:06:20,480 --> 00:06:22,480
proposal accepted. So, that just meant that I had to have a bit

112
00:06:24,480 --> 00:06:26,480
of help to get to PyCon, some supernatural aid, and that was

113
00:06:28,480 --> 00:06:30,480
in the form of the travel grant. Thanks, PSF. Thank you very

114
00:06:30,480 --> 00:06:32,480
much.

115
00:06:33,480 --> 00:06:35,480
APPLAUSE

116
00:06:36,480 --> 00:06:38,480
. » So, to cross that threshold

117
00:06:38,720 --> 00:06:40,720
and make the journey, my family and I had to make the journey

118
00:06:41,720 --> 00:06:43,720
from Regents, California up to the Salt Palace Convention

119
00:06:44,720 --> 00:06:46,720
Center. It was a little over a nine-hour drive. We thought to

120
00:06:47,720 --> 00:06:49,720
do it in two days, since my three-year-old daughter probably

121
00:06:49,720 --> 00:06:53,720
couldn't handle that drive. We stopped at a place called the

122
00:06:53,720 --> 00:06:57,720
Valley of Fire, Nevada, where I saw some cool cave paintings,

123
00:06:57,720 --> 00:07:01,720
petrographs, I guess they're called, over 4,000 years old.

124
00:07:01,720 --> 00:07:03,720
This is me and my best caveman cosplay.

125
00:07:03,960 --> 00:07:05,960
You may see my daughter there in the middle of that one, this

126
00:07:06,960 --> 00:07:08,960
Martian landscape, my wife there walking through, trekking

127
00:07:09,960 --> 00:07:13,960
through Mars, apparently. And eventually we arrived. The next

128
00:07:13,960 --> 00:07:17,960
day I was ready to go. This is me at the entrance of the

129
00:07:17,960 --> 00:07:21,960
Convention Center. Yes, I chose the silly pose, of course. My

130
00:07:21,960 --> 00:07:23,960
wife will not like that. And then I was ready to enter the

131
00:07:23,960 --> 00:07:25,960
belly of the whale to tackle my tutorial.

132
00:07:25,960 --> 00:07:27,960
I was there in the middle of that schedule, so I began to get

133
00:07:27,960 --> 00:07:29,960
ready. This is me preparing for battle, looking through my

134
00:07:32,960 --> 00:07:36,960
slides. And then I went out and started to get ready. I went

135
00:07:36,960 --> 00:07:51,480
into the

136
00:07:51,480 --> 00:07:55,480
area and it was perfect. I was there on the panel. I was

137
00:07:55,480 --> 00:07:57,480
there in the middle of the space, preparing for battle,

138
00:07:57,480 --> 00:08:01,720
looking through my slides. And then I went ahead and delivered

139
00:08:01,720 --> 00:08:05,720
this tutorial, 1.30 p.m. on Wednesday. It was awesome. My

140
00:08:05,720 --> 00:08:09,720
preparation paid off. Again, I invite you to check it out, when

141
00:08:09,720 --> 00:08:13,720
all this is said and done. Along my journey, I met some allies,

142
00:08:13,720 --> 00:08:17,720
some enemies, no, not enemies. This is PyCon. Just allies.

143
00:08:17,720 --> 00:08:21,000
I helped set up, volunteered for that.

144
00:08:21,000 --> 00:08:23,620
I met Marietta, that was really awesome.

145
00:08:23,620 --> 00:08:26,740
I met a couple cool guys, and here's me awkwardly posing

146
00:08:26,740 --> 00:08:28,840
with them, Anthony and Jay.

147
00:08:28,840 --> 00:08:30,000
I don't know who this guy is,

148
00:08:30,000 --> 00:08:31,920
but he just wanted to take a picture.

149
00:08:33,040 --> 00:08:35,340
I'm just kidding, Peter, sorry.

150
00:08:35,340 --> 00:08:39,960
So then I had a big ordeal.

151
00:08:39,960 --> 00:08:41,800
I wanted to get really involved.

152
00:08:41,800 --> 00:08:43,700
I started volunteering.

153
00:08:43,700 --> 00:08:46,320
I did some session running and chairing.

154
00:08:46,320 --> 00:08:47,380
That was really cool.

155
00:08:48,020 --> 00:08:48,940
I didn't realize that session running

156
00:08:48,940 --> 00:08:50,740
meant a lot of running.

157
00:08:50,740 --> 00:08:55,000
That's my steps yesterday, 11.98 kilometers.

158
00:08:56,560 --> 00:09:00,700
Then the supreme ordeal came while I was playing

159
00:09:00,700 --> 00:09:03,460
a wonderful game of exploding kittens.

160
00:09:03,460 --> 00:09:06,120
Now, what could that supreme ordeal be?

161
00:09:06,120 --> 00:09:08,780
Well, that was that my lightning talk got accepted.

162
00:09:08,780 --> 00:09:11,580
And I was like, oh boy, now what do I do?

163
00:09:11,580 --> 00:09:16,220
So I had to prepare, furiously putting slides together,

164
00:09:16,260 --> 00:09:21,260
but here I am, enjoying every bit of PyCon

165
00:09:21,580 --> 00:09:22,760
as much as I can.

166
00:09:23,980 --> 00:09:26,660
This journey, it's been great, it's been awesome.

167
00:09:26,660 --> 00:09:29,540
I've loved it, and it's not all for nothing.

168
00:09:29,540 --> 00:09:31,580
There's wonderful bounty to be had.

169
00:09:31,580 --> 00:09:35,180
Here's just a slight bit of stuff that I've gotten.

170
00:09:35,180 --> 00:09:37,100
So it's pretty great.

171
00:09:37,100 --> 00:09:39,780
I'm sure some of you have even greater bounty.

172
00:09:39,780 --> 00:09:42,820
But I was really happy, because you can barely see on there,

173
00:09:42,820 --> 00:09:45,180
I got the last metal straws

174
00:09:45,260 --> 00:09:48,300
that they were handing out at one of those booths.

175
00:09:48,300 --> 00:09:49,740
Really cool thing.

176
00:09:49,740 --> 00:09:52,900
All right, so that's been my journey so far.

177
00:09:52,900 --> 00:09:55,820
I know that pretty soon it's gonna be time

178
00:09:55,820 --> 00:09:58,340
for the road back, time to head home.

179
00:09:58,340 --> 00:10:00,420
Not sure how I'm gonna do that.

180
00:10:00,420 --> 00:10:03,780
At best, I'll just follow the signs,

181
00:10:03,780 --> 00:10:06,460
and I hope to see all of you again in one year

182
00:10:06,460 --> 00:10:07,980
at the next PyCon.

183
00:10:07,980 --> 00:10:08,820
Thank you.

184
00:10:08,820 --> 00:10:09,640
Thank you.

185
00:10:17,340 --> 00:10:20,620
I think Mario, you have had a very eventful first PyCon.

186
00:10:20,620 --> 00:10:22,300
Next up we have Georgie,

187
00:10:22,300 --> 00:10:24,860
who's gonna talk to us about how open source

188
00:10:24,860 --> 00:10:25,680
is the walk in the park.

189
00:10:25,680 --> 00:10:27,700
But real quick, I wanna give a shout out to Georgie,

190
00:10:27,700 --> 00:10:30,420
because Georgie did all of the beautiful graphics

191
00:10:30,420 --> 00:10:34,140
that you see for PyCon in the new PSF annual report,

192
00:10:34,140 --> 00:10:34,980
which just came out.

193
00:10:34,980 --> 00:10:37,700
She did all those as well, and they are terrific.

194
00:10:37,700 --> 00:10:39,500
So let's give her a round of applause.

195
00:10:39,500 --> 00:10:40,300
Wow.

196
00:10:40,300 --> 00:10:48,540
I like how the captions spell my name.

197
00:10:48,540 --> 00:10:50,740
Well, hi, everyone.

198
00:10:50,740 --> 00:10:53,380
I have no slides, so you can just concentrate on me.

199
00:10:57,420 --> 00:11:00,100
How many of you like to take a walk in a park?

200
00:11:02,740 --> 00:11:06,380
How many of you like to walk in a paid park?

201
00:11:08,660 --> 00:11:10,540
Expensive, right?

202
00:11:10,540 --> 00:11:13,700
Well, a free park, yeah, why not?

203
00:11:13,700 --> 00:11:18,020
So open source is like a community park.

204
00:11:18,020 --> 00:11:18,980
It's free.

205
00:11:18,980 --> 00:11:23,620
Anyone can just walk in there, enjoy the nature,

206
00:11:23,620 --> 00:11:25,820
enjoy the birds.

207
00:11:25,820 --> 00:11:32,260
You use all the facilities there and do whatever you want.

208
00:11:32,260 --> 00:11:33,780
Not everything.

209
00:11:33,780 --> 00:11:34,340
I don't know.

210
00:11:34,340 --> 00:11:35,140
That's the limit.

211
00:11:35,140 --> 00:11:36,620
That's the limit.

212
00:11:36,620 --> 00:11:40,700
So there's always something magical happening

213
00:11:40,700 --> 00:11:43,740
when you spend your time outside and you

214
00:11:43,740 --> 00:11:46,860
get to share your time with people

215
00:11:46,860 --> 00:11:49,220
and to interact with people.

216
00:11:49,220 --> 00:11:53,340
But it requires maintenance.

217
00:11:53,340 --> 00:11:56,100
You need to clear the fallen leaves.

218
00:11:56,100 --> 00:11:59,380
You need to clear the garbages.

219
00:11:59,380 --> 00:12:01,740
And sometimes you have people who

220
00:12:01,740 --> 00:12:06,500
started doing some graffiti here and there.

221
00:12:07,500 --> 00:12:11,860
Well, you need to trim the plants and the trees.

222
00:12:11,860 --> 00:12:16,940
So why do I say that open source is like a park?

223
00:12:16,940 --> 00:12:18,420
Because it's free.

224
00:12:18,420 --> 00:12:19,700
You are free to go.

225
00:12:19,700 --> 00:12:25,740
You can do anything you want, but you still need maintenance.

226
00:12:25,740 --> 00:12:30,180
Contributors are like people like you and me.

227
00:12:30,180 --> 00:12:32,140
We can always walk in the park.

228
00:12:32,140 --> 00:12:35,740
But if we are the person who actually

229
00:12:35,740 --> 00:12:40,100
create and throw the rubbish, someone else needs to clear it.

230
00:12:40,100 --> 00:12:42,380
And if you want to be a contributor,

231
00:12:42,380 --> 00:12:45,180
to be a nice, really great contributor,

232
00:12:45,180 --> 00:12:49,580
make the park nicer, you help to pick the garbage.

233
00:12:49,580 --> 00:12:52,980
You can help to remove the graffiti.

234
00:12:52,980 --> 00:12:57,500
You can help to create more space.

235
00:12:57,500 --> 00:13:03,500
Sometimes you have really cool companies coming in and say,

236
00:13:03,500 --> 00:13:05,260
hey, I would like to make a donation.

237
00:13:05,260 --> 00:13:06,940
I would like to help.

238
00:13:06,940 --> 00:13:13,100
And how about I create a bridge and make this place nicer,

239
00:13:13,100 --> 00:13:18,180
a playground for the kids or some benches?

240
00:13:21,540 --> 00:13:26,340
And yeah, of course, when you have all this coming in,

241
00:13:26,340 --> 00:13:29,380
the community park will look more beautiful,

242
00:13:29,380 --> 00:13:30,860
will look more sustainable.

243
00:13:30,860 --> 00:13:33,780
The next time when you come back, you can use it again.

244
00:13:33,940 --> 00:13:37,700
It will look more beautiful as compared to a community park

245
00:13:37,700 --> 00:13:40,020
that has not been maintained.

246
00:13:40,020 --> 00:13:45,380
So I'm not going to spend the entire five minutes.

247
00:13:45,380 --> 00:13:50,020
So if another lightning talk wasn't come up, feel free.

248
00:13:50,020 --> 00:13:53,500
Anyway, so if you want to contribute,

249
00:13:53,500 --> 00:13:55,620
you want to have a beautiful park,

250
00:13:55,620 --> 00:14:01,020
start improving this open source community and do something,

251
00:14:01,020 --> 00:14:04,180
whether you're a company or whether you're a contributor.

252
00:14:04,180 --> 00:14:05,260
That's it.

253
00:14:05,260 --> 00:14:06,260
Thank you.

254
00:14:06,260 --> 00:14:07,260
Thank you.

255
00:14:11,380 --> 00:14:13,980
Thanks, Georgie.

256
00:14:13,980 --> 00:14:16,260
Hey, Lorena, you sticking around?

257
00:14:16,260 --> 00:14:18,340
Unfortunately, I have to leave.

258
00:14:18,340 --> 00:14:20,980
I'm an auctioneer for the Pi Ladies auction tonight.

259
00:14:20,980 --> 00:14:23,260
So I'm actually going to be heading out.

260
00:14:23,260 --> 00:14:25,500
Quick plug, the Pilates auction is today.

261
00:14:25,500 --> 00:14:27,060
So maybe I'll see some of you there.

262
00:14:27,060 --> 00:14:29,660
I'll be there, but only after the lightning talks are finished.

263
00:14:29,660 --> 00:14:30,740
Exactly.

264
00:14:31,420 --> 00:14:33,980
So next up, we have Bence, who's going

265
00:14:33,980 --> 00:14:37,500
to give us a talk on Lint, your playlist, and fashion.

266
00:14:37,500 --> 00:14:38,900
Let's give it up for Bence.

267
00:14:43,500 --> 00:14:44,940
All right.

268
00:14:44,940 --> 00:14:46,420
Hi, everyone.

269
00:14:46,420 --> 00:14:48,420
I'm actually here for the gymnastics thing,

270
00:14:48,420 --> 00:14:49,780
so I'm not sure what.

271
00:14:49,780 --> 00:14:51,140
No, I'm just kidding.

272
00:14:51,140 --> 00:14:56,260
So I need to just give you one minute of real quick context,

273
00:14:56,260 --> 00:14:58,860
and then we can get to the fun parts.

274
00:14:58,860 --> 00:15:00,620
I work on this project called Semgrab.

275
00:15:00,620 --> 00:15:03,140
And you need to know just three things.

276
00:15:03,140 --> 00:15:05,860
First of all, it's like this tool.

277
00:15:05,860 --> 00:15:10,140
You get to write a code search pattern, sort of like regex.

278
00:15:10,140 --> 00:15:12,380
It looks through your code and finds occurrences

279
00:15:12,380 --> 00:15:13,820
of whatever you were searching for.

280
00:15:13,820 --> 00:15:17,460
So here, we type logging.info dot dot dot,

281
00:15:17,460 --> 00:15:20,660
and it's just going to find all occurrences of this call,

282
00:15:20,660 --> 00:15:23,380
even if the developers are trying to be sneaky,

283
00:15:23,380 --> 00:15:25,180
and they all get highlighted.

284
00:15:25,180 --> 00:15:28,340
Second, you can write not only one pattern,

285
00:15:28,340 --> 00:15:30,740
you can write multiple, and you can combine them

286
00:15:30,740 --> 00:15:33,300
with logic operators.

287
00:15:33,300 --> 00:15:36,780
So for instance, here, we are looking at login calls.

288
00:15:36,780 --> 00:15:39,700
You can read the left side of the screen line by line.

289
00:15:39,700 --> 00:15:42,700
So whenever inside the login call, there is a getenv,

290
00:15:42,700 --> 00:15:44,860
and the envar has secret in the name.

291
00:15:44,860 --> 00:15:46,660
Well, you shouldn't be printing that, probably,

292
00:15:46,660 --> 00:15:47,740
because it's secret.

293
00:15:47,740 --> 00:15:50,740
And so Semgrab will flag it for you.

294
00:15:50,740 --> 00:15:53,940
Third thing, it's not only Python.

295
00:15:53,940 --> 00:15:55,620
It works on many languages.

296
00:15:55,620 --> 00:15:58,620
And what we need to have fun is JSON.

297
00:15:58,620 --> 00:16:01,820
And this is the first time anyone ever said that.

298
00:16:01,820 --> 00:16:04,900
OK, so now the actual talk.

299
00:16:04,900 --> 00:16:06,340
I know that my code is messed up,

300
00:16:06,340 --> 00:16:08,100
but I've recently been wondering,

301
00:16:08,100 --> 00:16:10,500
maybe the world is more messed up.

302
00:16:10,500 --> 00:16:12,660
So we're just going to make this assumption

303
00:16:12,660 --> 00:16:14,220
for the rest of this talk.

304
00:16:14,220 --> 00:16:18,140
And so then, how is it that we have linters for my code,

305
00:16:18,140 --> 00:16:19,860
but not the world?

306
00:16:19,860 --> 00:16:22,700
It just feels unfair, right?

307
00:16:22,700 --> 00:16:25,540
So I created Super Semgrab.

308
00:16:25,580 --> 00:16:28,820
This is basically a wrapper on Semgrab that just abuses it,

309
00:16:28,820 --> 00:16:30,500
but also lends the world.

310
00:16:30,500 --> 00:16:31,620
So that's good.

311
00:16:31,620 --> 00:16:34,380
And now what I mean is whenever there's something in the world,

312
00:16:34,380 --> 00:16:38,500
you can sort of translate it, represent it in JSON.

313
00:16:38,500 --> 00:16:40,340
Here's what I mean.

314
00:16:40,340 --> 00:16:42,340
There's this thing out there in the world.

315
00:16:42,340 --> 00:16:44,220
It's one of our GitHub projects.

316
00:16:44,220 --> 00:16:45,940
Something is wrong with it.

317
00:16:45,940 --> 00:16:49,140
I challenge you to find what it is.

318
00:16:49,140 --> 00:16:51,220
But no, as humans, we cannot really do that.

319
00:16:51,220 --> 00:16:53,060
So I'm going to translate it to JSON,

320
00:16:53,060 --> 00:16:55,540
because computers can look through it pretty easily.

321
00:16:55,540 --> 00:17:00,620
They will see something is funky.

322
00:17:00,620 --> 00:17:03,820
And specifically, the rule I wrote for this specific case

323
00:17:03,820 --> 00:17:06,700
is if we get a JSON object from the GitHub API that says,

324
00:17:06,700 --> 00:17:09,860
we have a repository where the star count of the repository

325
00:17:09,860 --> 00:17:12,820
is over 100, so it's kind of a popular project,

326
00:17:12,820 --> 00:17:14,300
then it's kind of a problem if it

327
00:17:14,300 --> 00:17:16,460
doesn't have a code of conduct.

328
00:17:16,460 --> 00:17:20,380
So if we run Semgrab, it's going to output exactly this.

329
00:17:20,420 --> 00:17:23,460
Hey, you have this project in your organization.

330
00:17:23,460 --> 00:17:24,180
Quite popular.

331
00:17:24,180 --> 00:17:24,940
No code of conduct.

332
00:17:24,940 --> 00:17:26,100
Fix it.

333
00:17:26,100 --> 00:17:26,860
OK.

334
00:17:26,860 --> 00:17:29,620
Now this sort of eased you into the concept.

335
00:17:29,620 --> 00:17:32,540
Here come the actual fun stuff.

336
00:17:32,540 --> 00:17:34,140
Spotify playlist.

337
00:17:34,140 --> 00:17:36,060
What is wrong with this playlist?

338
00:17:36,060 --> 00:17:38,900
I'll give you a couple seconds.

339
00:17:38,900 --> 00:17:40,420
You're not going to know, by the way.

340
00:17:40,420 --> 00:17:41,740
Spoiler alert.

341
00:17:41,740 --> 00:17:44,340
Some people say that it has Taylor Swift in it.

342
00:17:44,340 --> 00:17:48,700
And to those people, I say broaden your horizons.

343
00:17:48,700 --> 00:17:50,420
The actual issue is, you know what?

344
00:17:50,420 --> 00:17:51,300
I shouldn't spoil it.

345
00:17:51,300 --> 00:17:52,140
I can do a live demo.

346
00:17:57,220 --> 00:17:59,580
So this is a rule I wrote for Spotify.

347
00:17:59,580 --> 00:18:03,780
And it's going to prompt me to input a playlist ID.

348
00:18:03,780 --> 00:18:05,980
The issue with the playlist was that the tempo changes

349
00:18:05,980 --> 00:18:07,900
too much between two songs.

350
00:18:07,900 --> 00:18:09,980
So shake it off.

351
00:18:09,980 --> 00:18:11,940
Going right into smells like teen spirit

352
00:18:11,940 --> 00:18:13,300
is too much of a change.

353
00:18:13,300 --> 00:18:14,100
Over 20%.

354
00:18:14,100 --> 00:18:17,460
You shouldn't do that, I guess.

355
00:18:17,460 --> 00:18:20,220
The way it works is this linter rule.

356
00:18:20,220 --> 00:18:22,340
So we look at consecutive tracks.

357
00:18:22,340 --> 00:18:23,740
We extract the tempo.

358
00:18:23,740 --> 00:18:26,740
And we just do some math.

359
00:18:26,740 --> 00:18:28,260
And the last one.

360
00:18:28,260 --> 00:18:32,900
One of the SEMGRIP maintainers visited me in Greece earlier,

361
00:18:32,900 --> 00:18:34,380
something like a year ago.

362
00:18:34,380 --> 00:18:37,740
This is a picture of us in front of the Greek parliament.

363
00:18:37,740 --> 00:18:41,060
And there is something wrong with this picture.

364
00:18:41,060 --> 00:18:41,940
Yet another challenge.

365
00:18:41,940 --> 00:18:45,020
What is wrong with this picture?

366
00:18:45,020 --> 00:18:47,740
I'm just going to run SEMGRIP on it.

367
00:18:47,740 --> 00:18:48,260
You know what?

368
00:18:48,260 --> 00:18:50,100
Maybe I'm going to help you out a little.

369
00:18:50,100 --> 00:18:52,220
This is the JSON representation after running it

370
00:18:52,220 --> 00:18:58,500
through Google Cloud Vision API and some post-processing.

371
00:18:58,500 --> 00:19:00,020
OK, let's see what SEMGRIP has to say.

372
00:19:04,700 --> 00:19:07,820
We found a Greek fashion police violation.

373
00:19:07,820 --> 00:19:10,780
You're not supposed to go out in pants in the Mediterranean.

374
00:19:11,780 --> 00:19:20,220
The way this works is Google recognized the Greek parliament,

375
00:19:20,220 --> 00:19:23,300
told us what the latitude of the Greek parliament is.

376
00:19:23,300 --> 00:19:26,380
And then we can just look whether there's a person

377
00:19:26,380 --> 00:19:28,300
somewhere in the picture.

378
00:19:28,300 --> 00:19:31,060
And there's pants inside the person.

379
00:19:31,060 --> 00:19:33,820
I guess that's how computers think.

380
00:19:33,820 --> 00:19:34,980
But yeah, that's basically it.

381
00:19:40,780 --> 00:19:42,100
That was awesome.

382
00:19:42,100 --> 00:19:43,100
That was so cool.

383
00:19:43,100 --> 00:19:44,100
Thanks for that.

384
00:19:44,100 --> 00:19:45,900
Next, we have Mark, who's going to tell us

385
00:19:45,900 --> 00:19:49,500
about how you can help speed up Python with benchmarks.

386
00:19:49,500 --> 00:19:50,340
Give it up for Mark.

387
00:19:57,060 --> 00:19:59,820
OK, I'll see how I can get this over before Larry is set up,

388
00:19:59,820 --> 00:20:01,700
just to upset him.

389
00:20:01,700 --> 00:20:03,220
OK, I'm Mark Shannon.

390
00:20:03,220 --> 00:20:05,900
I work with a Faster C Python team.

391
00:20:05,900 --> 00:20:08,060
And I'm here to ask you a question.

392
00:20:09,060 --> 00:20:12,860
And I'm here to ask you a favor.

393
00:20:12,860 --> 00:20:16,860
So I'm often asked how much faster

394
00:20:16,860 --> 00:20:20,460
is 3.11 going to be than 3.10?

395
00:20:20,460 --> 00:20:27,500
And I'm an honest person, so I always say it depends.

396
00:20:27,500 --> 00:20:29,580
I realize that's a somewhat unsatisfying answer,

397
00:20:29,580 --> 00:20:30,500
but it's the true one.

398
00:20:30,500 --> 00:20:32,220
And the reason we don't really know

399
00:20:32,220 --> 00:20:35,060
is because we don't know what your workload is.

400
00:20:35,060 --> 00:20:37,020
We don't know what you're using Python for.

401
00:20:40,980 --> 00:20:42,940
We have a bunch of benchmarks.

402
00:20:42,940 --> 00:20:45,420
They're kind of the standard Python benchmarks,

403
00:20:45,420 --> 00:20:48,580
but they're sort of a bit of an historical oddity.

404
00:20:48,580 --> 00:20:50,580
And there's also quite a wide range of results.

405
00:20:50,580 --> 00:20:52,500
It doesn't really allow us to tell you very much

406
00:20:52,500 --> 00:20:55,180
about how much faster your program is going to be.

407
00:20:55,180 --> 00:20:58,020
So we have Delta Blue, which is twice as fast,

408
00:20:58,020 --> 00:21:02,220
and Telco, which is no faster.

409
00:21:02,220 --> 00:21:04,180
Does your application resemble something

410
00:21:04,180 --> 00:21:06,540
that does lots of numerical processing,

411
00:21:06,540 --> 00:21:10,940
or does it do some constraint solving?

412
00:21:10,940 --> 00:21:17,500
So basically, what we need is you to help.

413
00:21:17,500 --> 00:21:24,660
I know about how to make a Python virtual machine faster,

414
00:21:24,660 --> 00:21:28,380
but I don't know a great deal about web apps or machine

415
00:21:28,380 --> 00:21:31,060
learning or whatever other thing you do with Python.

416
00:21:31,060 --> 00:21:34,820
There's a million and one things that people use Python for.

417
00:21:34,820 --> 00:21:38,660
We would like to make your program faster in 3.12,

418
00:21:38,660 --> 00:21:41,380
but we can't do that unless we know what your program does

419
00:21:41,380 --> 00:21:46,460
or have some representative version of it.

420
00:21:46,460 --> 00:21:49,460
And that's where you can help.

421
00:21:49,460 --> 00:21:50,780
I think this is the last slide.

422
00:21:50,780 --> 00:21:53,220
Yeah, this is a very short talk.

423
00:21:53,220 --> 00:21:58,340
So there's a benchmark website called PyPerformance.

424
00:21:58,340 --> 00:22:00,700
You can read it on Redox here.

425
00:22:00,700 --> 00:22:01,660
It's on GitHub.

426
00:22:01,660 --> 00:22:06,540
That's a framework for doing benchmarking.

427
00:22:06,540 --> 00:22:09,420
It also holds a standard benchmark suite.

428
00:22:09,420 --> 00:22:11,260
But you can run your benchmarks on it.

429
00:22:11,260 --> 00:22:15,980
So even if you don't have a ready-made benchmark,

430
00:22:15,980 --> 00:22:20,260
you can at least try and encapsulate your software.

431
00:22:20,260 --> 00:22:23,100
Even if it's proprietary or there's

432
00:22:23,100 --> 00:22:26,780
confidential information in it, you could maybe run it locally

433
00:22:26,780 --> 00:22:30,940
and at least let us know what sort of results you have.

434
00:22:30,940 --> 00:22:32,100
Yeah, there's a website here.

435
00:22:32,100 --> 00:22:33,300
It's PyPerformance.

436
00:22:33,300 --> 00:22:35,820
Read the docs and then the GitHub thing.

437
00:22:35,820 --> 00:22:38,580
And if you need help doing that or you

438
00:22:38,580 --> 00:22:40,580
have suggestions or sort of benchmarks

439
00:22:40,580 --> 00:22:41,780
you think we should add.

440
00:22:41,780 --> 00:22:43,580
I mean, even if you can't add a benchmark,

441
00:22:43,580 --> 00:22:45,820
but you think there's a domain in which we're obviously

442
00:22:45,820 --> 00:22:48,260
missing stuff, then let us know.

443
00:22:48,260 --> 00:22:52,780
And then if you go to GitHub, fastercpython slash ideas,

444
00:22:52,780 --> 00:22:54,620
there's a whole bunch of ideas on people

445
00:22:54,620 --> 00:22:55,660
how to make it faster.

446
00:22:55,660 --> 00:22:59,100
But there's also any ideas that are welcome on benchmarking

447
00:22:59,100 --> 00:23:01,140
or anything like that.

448
00:23:01,140 --> 00:23:05,260
So yeah, we need your help.

449
00:23:05,260 --> 00:23:07,460
We can't come up with benchmarks for domains

450
00:23:07,460 --> 00:23:11,180
that we just don't understand or aren't experts in.

451
00:23:11,180 --> 00:23:12,220
But you can.

452
00:23:12,220 --> 00:23:14,420
So that's it.

453
00:23:14,420 --> 00:23:14,740
[?

454
00:23:14,740 --> 00:23:21,060
Applause. ?]

455
00:23:21,060 --> 00:23:21,900
Thanks, Mark.

456
00:23:21,900 --> 00:23:24,180
What you all didn't just see was happening while Mark was

457
00:23:24,180 --> 00:23:27,300
speaking, was Larry restarted his laptop

458
00:23:27,300 --> 00:23:28,420
to get the monitor to work.

459
00:23:28,420 --> 00:23:31,060
And it worked just right before Mark finished his talk.

460
00:23:31,060 --> 00:23:31,900
So it was perfect.

461
00:23:31,900 --> 00:23:32,540
Absolutely perfect.

462
00:23:32,540 --> 00:23:34,260
So next, Larry is going to talk to us

463
00:23:34,260 --> 00:23:37,020
about correlating your data with correlate.

464
00:23:37,020 --> 00:23:38,620
Let's give him a round of applause.

465
00:23:38,620 --> 00:23:43,460
[? Applause. ?]

466
00:23:43,460 --> 00:23:43,980
Thanks.

467
00:23:43,980 --> 00:23:47,220
I watch the IT crowd too.

468
00:23:47,220 --> 00:23:49,700
So I have a problem.

469
00:23:49,700 --> 00:23:53,620
I like old time radio, like the radio dramas from the 40s,

470
00:23:53,620 --> 00:23:56,020
like detective shows and westerns.

471
00:23:56,020 --> 00:23:57,620
But I hate bad file names.

472
00:23:57,620 --> 00:23:59,740
If you go onto the internet and download a big zip

473
00:23:59,740 --> 00:24:02,660
file containing, like let's say, Boston Blackie,

474
00:24:02,660 --> 00:24:06,620
these file names are crap.

475
00:24:06,620 --> 00:24:09,540
However, you can get very nice clean metadata

476
00:24:09,540 --> 00:24:13,020
about the old show if you go onto Wikipedia,

477
00:24:13,020 --> 00:24:15,500
or in this case, an episode log thing.

478
00:24:15,500 --> 00:24:18,700
So I'd like to rename all of those MP3s

479
00:24:18,700 --> 00:24:21,380
and give them nice proper readable names.

480
00:24:21,380 --> 00:24:24,980
But I have a lot of work to do.

481
00:24:24,980 --> 00:24:27,460
There are 199 episodes of Boston Blackie.

482
00:24:27,460 --> 00:24:29,700
There's 446 of Gunsmoke.

483
00:24:29,700 --> 00:24:32,420
There's 809 of yours truly, Johnny Dollar.

484
00:24:32,420 --> 00:24:34,260
And what if they came up with a new zip file

485
00:24:34,260 --> 00:24:35,220
and they update things?

486
00:24:35,220 --> 00:24:37,100
Now I have to do all that by hand.

487
00:24:37,100 --> 00:24:38,100
So I have more problems.

488
00:24:38,100 --> 00:24:39,060
I'm really lazy.

489
00:24:39,060 --> 00:24:41,220
I don't want to do this by hand.

490
00:24:41,220 --> 00:24:43,460
Also, it turns out I'm bad at CS,

491
00:24:43,460 --> 00:24:46,180
because apparently nobody has solved this problem

492
00:24:46,180 --> 00:24:47,780
in a general way before.

493
00:24:47,780 --> 00:24:48,260
I know.

494
00:24:48,260 --> 00:24:49,460
I looked on Google.

495
00:24:49,460 --> 00:24:51,820
I guess I'm bad at that too.

496
00:24:51,820 --> 00:24:54,620
I will point out this is not the Gayle Shapley stable marriage

497
00:24:54,620 --> 00:24:54,900
problem.

498
00:24:54,900 --> 00:24:56,420
It's a slightly different problem.

499
00:24:56,420 --> 00:24:59,020
But the basic idea is I have two sets of data.

500
00:24:59,020 --> 00:25:01,580
Conceptually, they represent the same things.

501
00:25:01,580 --> 00:25:03,140
And I want to match them up together.

502
00:25:03,140 --> 00:25:04,620
How do I do that?

503
00:25:04,620 --> 00:25:06,580
So I wrote it.

504
00:25:06,580 --> 00:25:07,700
It's called Correlate.

505
00:25:07,700 --> 00:25:09,140
And I'm going to walk you through.

506
00:25:09,140 --> 00:25:11,420
I knocked together this sample code this afternoon

507
00:25:11,420 --> 00:25:13,100
to write this lightning talk.

508
00:25:13,100 --> 00:25:15,100
I basically took the list of the MP3s,

509
00:25:15,100 --> 00:25:16,740
and I took the list of all the episodes

510
00:25:16,740 --> 00:25:20,460
I scraped off of a web page somewhere.

511
00:25:20,460 --> 00:25:21,580
So I import Correlate.

512
00:25:21,580 --> 00:25:23,220
I create my Correlator object.

513
00:25:23,220 --> 00:25:24,580
I split out the two data sets.

514
00:25:24,580 --> 00:25:27,020
That's where you're going to put in all of your data.

515
00:25:27,020 --> 00:25:27,300
Here's the MP3s.

516
00:25:27,300 --> 00:25:28,940
Here's the episodes.

517
00:25:28,940 --> 00:25:32,940
This parses the MP3 file names and pulls out

518
00:25:32,940 --> 00:25:34,860
the date and the title.

519
00:25:34,860 --> 00:25:38,100
This parses the list of episodes and pulls out the title

520
00:25:38,100 --> 00:25:40,620
and the date and the star.

521
00:25:40,620 --> 00:25:43,340
The important lines are these.

522
00:25:43,340 --> 00:25:45,860
We're saying, here's a key, something interesting

523
00:25:45,860 --> 00:25:47,820
about this metadata, about this value.

524
00:25:47,820 --> 00:25:49,580
And that matches to this one.

525
00:25:49,580 --> 00:25:53,020
So this MP3 file, here's the date, or here is.

526
00:25:53,020 --> 00:25:55,420
The best way to do it is take the words of the title

527
00:25:55,420 --> 00:25:57,620
and lowercase them and send them in separately.

528
00:25:57,620 --> 00:26:02,180
So I do that for both the MP3s and the episode.

529
00:26:02,180 --> 00:26:04,640
It's a good idea to make sure that the data that's going in

530
00:26:04,640 --> 00:26:05,860
is actually what you intended.

531
00:26:05,860 --> 00:26:06,980
So there's a print thing.

532
00:26:06,980 --> 00:26:08,620
You can say, print out my data sets.

533
00:26:08,620 --> 00:26:09,900
And this looks correct.

534
00:26:09,900 --> 00:26:11,260
I'm getting proper dates.

535
00:26:11,260 --> 00:26:14,980
I'm getting proper keys, both for data set A and data set B.

536
00:26:14,980 --> 00:26:16,780
And so I run it.

537
00:26:16,780 --> 00:26:18,080
You just run correlate.

538
00:26:18,080 --> 00:26:19,780
This is the feature I'll tell you about in a second.

539
00:26:19,780 --> 00:26:21,220
And you just print out the results.

540
00:26:21,220 --> 00:26:23,300
And a fifth of a second later, it

541
00:26:23,300 --> 00:26:25,940
has correlated the 200 elements from this and the 200 elements

542
00:26:25,940 --> 00:26:28,220
and that and matched them together.

543
00:26:28,220 --> 00:26:29,300
And the results look great.

544
00:26:29,300 --> 00:26:30,860
It's doing a perfect job.

545
00:26:30,860 --> 00:26:33,540
What's really interesting is you've scanned through the results

546
00:26:33,540 --> 00:26:34,020
a little bit.

547
00:26:34,020 --> 00:26:37,000
This one, there are no words in common between the two titles,

548
00:26:37,000 --> 00:26:38,160
but the dates were the same.

549
00:26:38,160 --> 00:26:39,820
So it said, oh, those are a match.

550
00:26:39,820 --> 00:26:41,540
This one didn't have a date at all.

551
00:26:41,540 --> 00:26:43,260
Both sides of the date was invalid.

552
00:26:43,260 --> 00:26:45,220
But there were a couple of words that matched out

553
00:26:45,220 --> 00:26:46,420
of the title, John Davis.

554
00:26:46,420 --> 00:26:48,420
And those were unique enough that Coralite said,

555
00:26:48,420 --> 00:26:50,380
oh, that's a good match.

556
00:26:50,380 --> 00:26:54,100
So Coralite features, you can weight the individual mappings

557
00:26:54,100 --> 00:26:55,660
of keys to values.

558
00:26:55,660 --> 00:26:56,900
You can have redundant keys.

559
00:26:56,900 --> 00:26:58,420
And you might think that was not helpful,

560
00:26:58,420 --> 00:26:59,700
but it's actually very helpful.

561
00:26:59,700 --> 00:27:03,620
If the word the matches three times to these two values,

562
00:27:03,620 --> 00:27:06,140
those are probably a good match.

563
00:27:06,140 --> 00:27:09,300
I support ranking or what you probably think of ordering,

564
00:27:09,300 --> 00:27:10,180
I call it ranking.

565
00:27:10,180 --> 00:27:13,340
So if two values at the top of the data sets

566
00:27:13,340 --> 00:27:15,660
seem like a good match, that might be better than one

567
00:27:15,660 --> 00:27:17,580
at the top and one at the bottom.

568
00:27:17,580 --> 00:27:19,860
And I support fuzzy keys, which slows everything down.

569
00:27:19,860 --> 00:27:22,300
But sometimes you just need fuzzy keys.

570
00:27:22,300 --> 00:27:24,740
So you can install it right now on PIP.

571
00:27:24,740 --> 00:27:26,380
You can also look at the source on GitHub.

572
00:27:26,380 --> 00:27:27,740
It's open source.

573
00:27:27,740 --> 00:27:28,580
I'm done.

574
00:27:28,580 --> 00:27:29,140
Thank you.

575
00:27:29,140 --> 00:27:29,640
Thank you.

576
00:27:29,640 --> 00:27:30,140
Thank you.

577
00:27:30,140 --> 00:27:34,940
Thank you, Larry.

578
00:27:34,940 --> 00:27:36,660
I think I understand Coralite now.

579
00:27:36,660 --> 00:27:37,660
It is magic.

580
00:27:37,660 --> 00:27:38,380
Cool.

581
00:27:38,380 --> 00:27:39,260
Thanks for the talk.

582
00:27:39,500 --> 00:27:41,180
Next, we have Rich to give us a talk

583
00:27:41,180 --> 00:27:44,540
on the importance of effective, concise communication.

584
00:27:44,540 --> 00:27:45,460
Give it up for Rich.

585
00:27:51,020 --> 00:27:52,100
Hello, everyone.

586
00:27:52,100 --> 00:27:55,980
I'm Rich Taggart, and I'm a software developer.

587
00:27:55,980 --> 00:27:59,580
If I had to describe myself in one word,

588
00:27:59,580 --> 00:28:03,220
I would probably say that I'm a skier.

589
00:28:03,220 --> 00:28:07,540
I spend as much time as I can in the snow

590
00:28:07,540 --> 00:28:09,780
and in the mountains.

591
00:28:09,780 --> 00:28:15,180
A word that I would not use to describe myself is brevity.

592
00:28:15,180 --> 00:28:17,140
If you were to ask any of my friends,

593
00:28:17,140 --> 00:28:19,660
they would probably tell you that I'm long-winded

594
00:28:19,660 --> 00:28:23,140
and I have a tendency to ramble about whatever

595
00:28:23,140 --> 00:28:27,100
it is that comes to my mind without any filter,

596
00:28:27,100 --> 00:28:29,700
especially in situations where I might

597
00:28:29,700 --> 00:28:33,940
be nervous for some reason.

598
00:28:33,940 --> 00:28:37,700
So as it turns out, that ended up

599
00:28:37,700 --> 00:28:41,900
spilling over into my writing and my technical writing.

600
00:28:41,900 --> 00:28:45,220
So I thought I would share with you some things

601
00:28:45,220 --> 00:28:50,900
that I've learned as I've tried to improve that.

602
00:28:50,900 --> 00:28:56,700
Identify and convey the most important idea when you

603
00:28:56,700 --> 00:29:00,220
communicate with another person.

604
00:29:00,220 --> 00:29:04,220
This will allow you to achieve the greatest effect

605
00:29:04,220 --> 00:29:07,340
for your intent and effort.

606
00:29:07,340 --> 00:29:11,220
In today's world, we wish to spend our energy

607
00:29:11,220 --> 00:29:16,460
on more activities than we have time for.

608
00:29:16,460 --> 00:29:19,580
Various distractions pull our attention

609
00:29:19,580 --> 00:29:22,820
in many facets of our life.

610
00:29:22,820 --> 00:29:27,100
Allow your recipient to interpret your message

611
00:29:27,100 --> 00:29:30,700
with as little energy as possible.

612
00:29:30,700 --> 00:29:34,060
I've included here some tips to consider

613
00:29:34,060 --> 00:29:35,540
when composing a message.

614
00:29:35,540 --> 00:29:40,340
First, write down the topics, ideas, and thoughts

615
00:29:40,340 --> 00:29:42,500
you wish to send.

616
00:29:42,500 --> 00:29:47,080
Then identify the common theme between these thoughts.

617
00:29:47,080 --> 00:29:52,220
Last, convey that main idea with one or two

618
00:29:52,220 --> 00:29:55,020
brief supporting examples.

619
00:29:55,020 --> 00:29:58,740
And this does not need to be a long, extensive process.

620
00:29:58,740 --> 00:30:00,780
Most of the time, it takes a few seconds

621
00:30:00,780 --> 00:30:03,740
to jot down ideas or maybe a couple minutes,

622
00:30:03,740 --> 00:30:06,100
depending on the message.

623
00:30:06,100 --> 00:30:09,220
If you're not sure where to get started,

624
00:30:09,220 --> 00:30:13,860
I've found the Hemingway Editor to be a great tool

625
00:30:13,860 --> 00:30:16,500
to help learn how to do this.

626
00:30:16,500 --> 00:30:17,140
That's my talk.

627
00:30:17,140 --> 00:30:17,740
Thanks, everyone.

628
00:30:23,180 --> 00:30:24,500
Thanks, Rich.

629
00:30:24,540 --> 00:30:27,540
And next, we have Sebastian, who's

630
00:30:27,540 --> 00:30:29,820
going to talk to us about testing migrations.

631
00:30:29,820 --> 00:30:31,100
Give it up for Sebastian.

632
00:30:31,100 --> 00:30:31,600
Yeah.

633
00:30:31,600 --> 00:30:36,100
Hello, everyone.

634
00:30:36,100 --> 00:30:37,940
I'm going to talk a little bit about something

635
00:30:37,940 --> 00:30:41,260
that really bugs me, that I get to see a lot of in the real

636
00:30:41,260 --> 00:30:42,100
world.

637
00:30:42,100 --> 00:30:43,660
It's causing real problems.

638
00:30:43,660 --> 00:30:45,260
So it's not going to be funny.

639
00:30:45,260 --> 00:30:47,020
It's going to be a little bit more serious.

640
00:30:47,020 --> 00:30:48,780
So we're here at PyCon.

641
00:30:48,780 --> 00:30:53,020
So I assume you are way better programmers than I am.

642
00:30:53,020 --> 00:30:56,020
So you all write bug-free code, right?

643
00:30:56,020 --> 00:30:58,540
Or maybe not.

644
00:30:58,540 --> 00:31:02,300
So I see a lot of smaller applications out there,

645
00:31:02,300 --> 00:31:05,540
mostly web applications, that don't test code that is

646
00:31:05,540 --> 00:31:10,540
directly touching production databases.

647
00:31:10,540 --> 00:31:12,740
And I'm here to convince you that you should do that.

648
00:31:12,740 --> 00:31:16,900
Otherwise, say that you have a small application.

649
00:31:16,900 --> 00:31:19,180
And a small application treats its database

650
00:31:19,180 --> 00:31:20,940
as a managed dependency.

651
00:31:20,940 --> 00:31:23,100
What that means is that your database

652
00:31:23,100 --> 00:31:26,180
is the only application that will ever talk to the database.

653
00:31:26,180 --> 00:31:28,580
It has a complete control over your database.

654
00:31:28,580 --> 00:31:30,620
If other applications will try to communicate

655
00:31:30,620 --> 00:31:32,940
through your database, they have to do it to an API,

656
00:31:32,940 --> 00:31:35,820
or not at all.

657
00:31:35,820 --> 00:31:37,500
And every interaction your application

658
00:31:37,500 --> 00:31:40,060
has with the database is hidden from the outside world.

659
00:31:40,060 --> 00:31:42,260
So you could say that your database lies within the

660
00:31:42,260 --> 00:31:46,300
boundaries of your own application.

661
00:31:46,300 --> 00:31:48,300
Often, in such a situation, your application

662
00:31:48,300 --> 00:31:51,020
defines the table structures or the schemas

663
00:31:51,020 --> 00:31:52,460
it needs in the database.

664
00:31:52,460 --> 00:31:55,420
And a migration tool like Alembic or Django's migration

665
00:31:55,420 --> 00:31:59,220
system takes care of actually bringing about the structure

666
00:31:59,220 --> 00:32:00,540
of your database.

667
00:32:00,540 --> 00:32:03,460
But sometimes, our migrations go a little bit further.

668
00:32:03,460 --> 00:32:05,980
You might want to change the contents of your database.

669
00:32:05,980 --> 00:32:07,460
You might want to add names together

670
00:32:07,460 --> 00:32:08,620
to get a full name column.

671
00:32:08,620 --> 00:32:10,820
You might want to change currencies.

672
00:32:10,820 --> 00:32:13,460
And when you do that, in Django, you write something

673
00:32:13,460 --> 00:32:15,460
called a data migration.

674
00:32:15,460 --> 00:32:17,620
And in a data migration, you write a little bit of Python

675
00:32:17,620 --> 00:32:21,220
code or a little bit of SQL code that performs the logic.

676
00:32:21,220 --> 00:32:24,220
You can do very much the same with Alembic.

677
00:32:24,220 --> 00:32:27,500
Well, this is actual code you write.

678
00:32:27,500 --> 00:32:32,140
And this is actual code that you should test,

679
00:32:32,140 --> 00:32:35,220
because it could have dramatic effects on your production data.

680
00:32:35,220 --> 00:32:36,420
And I really mean that.

681
00:32:36,420 --> 00:32:37,980
You don't want to lose customer data.

682
00:32:37,980 --> 00:32:39,820
You don't want to lose your scientific data

683
00:32:39,820 --> 00:32:43,300
that you so preciously and so expensively gained.

684
00:32:43,300 --> 00:32:45,340
So you should really test your data.

685
00:32:45,340 --> 00:32:46,740
And one thing that I hear a lot is

686
00:32:46,740 --> 00:32:49,620
that people say, well, I have rollback capabilities.

687
00:32:49,620 --> 00:32:52,060
If something goes wrong, I'll just roll back my database,

688
00:32:52,060 --> 00:32:55,180
roll back to migration, and I'm fine again.

689
00:32:55,180 --> 00:32:56,900
But that's not really the case.

690
00:32:56,900 --> 00:32:59,580
Because what the problem is is that basically,

691
00:32:59,580 --> 00:33:01,860
things working fine and things exploding

692
00:33:01,860 --> 00:33:06,260
are just two separate parts of your bug scale.

693
00:33:06,260 --> 00:33:09,300
And both situations are relatively benign.

694
00:33:09,300 --> 00:33:11,980
And you might be surprised when I say that things exploding

695
00:33:11,980 --> 00:33:13,340
is relatively OK.

696
00:33:13,340 --> 00:33:15,900
But then at least you know that things are not working.

697
00:33:15,900 --> 00:33:17,420
You can roll back.

698
00:33:17,420 --> 00:33:20,060
But it's much more of an issue is

699
00:33:20,060 --> 00:33:22,660
that when you're in the middle of that landscape,

700
00:33:22,660 --> 00:33:25,460
when you're in the middle of that scale,

701
00:33:25,460 --> 00:33:27,220
that's where things get really tricky.

702
00:33:27,220 --> 00:33:30,620
You've executed something, and migration works,

703
00:33:30,620 --> 00:33:34,020
but you might have actually messed up your data.

704
00:33:34,020 --> 00:33:36,340
For example, say that you accidentally

705
00:33:36,340 --> 00:33:38,780
truncate all the addresses of your customers

706
00:33:38,780 --> 00:33:40,420
or only the long addresses.

707
00:33:40,420 --> 00:33:42,660
Your migration will work, but you will no longer

708
00:33:42,660 --> 00:33:45,300
be able to ship anything to your customers.

709
00:33:45,780 --> 00:33:47,500
If these distortions are massive,

710
00:33:47,500 --> 00:33:48,660
you detect them right away.

711
00:33:48,660 --> 00:33:49,180
You fix them.

712
00:33:49,180 --> 00:33:50,180
You go on.

713
00:33:50,180 --> 00:33:53,460
But if they're small, and they're often small,

714
00:33:53,460 --> 00:33:55,300
you might only notice them after months.

715
00:33:55,300 --> 00:33:57,700
And then you've been working with flawed data all along,

716
00:33:57,700 --> 00:34:00,500
and you cannot really, really fix it anymore.

717
00:34:00,500 --> 00:34:02,460
So the solution is to treat the code

718
00:34:02,460 --> 00:34:04,920
you write for those migrations as real code,

719
00:34:04,920 --> 00:34:06,420
and you should test it.

720
00:34:06,420 --> 00:34:07,860
Now, how can you do that?

721
00:34:07,860 --> 00:34:09,740
Well, you can write integration tests

722
00:34:09,740 --> 00:34:11,700
because this is a managed dependency.

723
00:34:11,700 --> 00:34:14,740
And that's in the classicist way of thinking

724
00:34:14,740 --> 00:34:18,220
that's promoted in this book, for instance.

725
00:34:18,220 --> 00:34:20,100
And you should just test your migrations

726
00:34:20,100 --> 00:34:23,020
with a test database that's very much like your own production

727
00:34:23,020 --> 00:34:24,060
database.

728
00:34:24,060 --> 00:34:25,020
And you should do that.

729
00:34:25,020 --> 00:34:26,500
Now, how does that work?

730
00:34:26,500 --> 00:34:28,220
Well, it's actually very simple.

731
00:34:28,220 --> 00:34:30,700
You have a before state before your migration.

732
00:34:30,700 --> 00:34:32,620
And in your test, you should make sure

733
00:34:32,620 --> 00:34:35,620
that you migrate your test database to that state.

734
00:34:35,620 --> 00:34:38,980
You just dump test data into your database.

735
00:34:38,980 --> 00:34:41,020
Then you run your migration, and then you

736
00:34:41,020 --> 00:34:43,820
assert that the result is what you want it to be.

737
00:34:43,820 --> 00:34:45,700
For Django, there's a very handy package.

738
00:34:45,700 --> 00:34:47,580
It's called Django Test Migrations.

739
00:34:47,580 --> 00:34:49,620
I didn't write it, but I use it a lot.

740
00:34:49,620 --> 00:34:51,700
You should definitely use that.

741
00:34:51,700 --> 00:34:53,380
There are some remarks.

742
00:34:53,380 --> 00:34:54,980
Use realistic data.

743
00:34:54,980 --> 00:34:57,380
Faker data often isn't good enough.

744
00:34:57,380 --> 00:34:59,260
It doesn't contain the edge cases.

745
00:34:59,260 --> 00:35:01,580
If there are edge cases that you are ignoring,

746
00:35:01,580 --> 00:35:05,820
please, please do make sure that you insert barriers,

747
00:35:05,820 --> 00:35:09,460
raise exceptions when they do occur in your production data.

748
00:35:09,460 --> 00:35:13,220
And finally, those tests can be really, really costly.

749
00:35:13,220 --> 00:35:14,540
They can cost a lot of time.

750
00:35:14,540 --> 00:35:18,300
So don't put them in your regular unit test suite.

751
00:35:18,300 --> 00:35:22,060
And before we go, we all love PyCon,

752
00:35:22,060 --> 00:35:24,340
but please support your local conferences.

753
00:35:24,340 --> 00:35:26,060
I'm a volunteer for EuroPython.

754
00:35:26,060 --> 00:35:28,780
Please go there, but also go to your local conferences.

755
00:35:28,780 --> 00:35:29,380
Thanks a lot.

756
00:35:29,380 --> 00:35:29,860
This was it.

757
00:35:36,860 --> 00:35:38,380
Thank you, Sebastian.

758
00:35:38,380 --> 00:35:40,420
And next, we have William, who's going

759
00:35:40,420 --> 00:35:44,500
to tell you all how to secure your PyPI account.

760
00:35:44,500 --> 00:35:45,020
Awesome.

761
00:35:45,020 --> 00:35:46,100
Give it up for William.

762
00:35:46,100 --> 00:35:50,980
Hi, everybody.

763
00:35:50,980 --> 00:35:52,940
Yeah, so this talk really only has two slides.

764
00:35:52,940 --> 00:35:55,300
So basically, this talk is about how

765
00:35:55,300 --> 00:35:56,340
to secure your PyPI account.

766
00:35:56,340 --> 00:35:57,100
My name is William.

767
00:35:57,100 --> 00:35:58,500
This is the one slide.

768
00:35:58,500 --> 00:36:01,100
First, as a show of hands, how many of you

769
00:36:01,100 --> 00:36:03,500
have a package on PyPI?

770
00:36:03,500 --> 00:36:05,060
OK, so like about half the room.

771
00:36:05,060 --> 00:36:08,140
So immediately, this talk immediately applies to you.

772
00:36:08,180 --> 00:36:10,420
But for a good other portion of you,

773
00:36:10,420 --> 00:36:12,500
you will probably end up publishing a package on PyPI

774
00:36:12,500 --> 00:36:12,980
at some point.

775
00:36:12,980 --> 00:36:14,500
Or you might be a manager of a team

776
00:36:14,500 --> 00:36:16,940
where people on your team are publishing packages.

777
00:36:16,940 --> 00:36:18,500
So hopefully, you'll have somebody

778
00:36:18,500 --> 00:36:20,220
to take away from this, too.

779
00:36:20,220 --> 00:36:21,700
So basically, what I'm going to demo

780
00:36:21,700 --> 00:36:25,140
is three main techniques you can use currently on PyPI

781
00:36:25,140 --> 00:36:26,940
to lock down and secure your account.

782
00:36:26,940 --> 00:36:29,100
We'll talk about enabling two-factor, WebAuth and TOT,

783
00:36:29,100 --> 00:36:32,020
or both, adding scoped API tokens for your projects,

784
00:36:32,020 --> 00:36:33,660
and also recovery codes.

785
00:36:33,660 --> 00:36:37,660
So without further ado, so I have a local copy of Warehouse

786
00:36:37,820 --> 00:36:39,700
which is a software that powers PyPI.

787
00:36:39,700 --> 00:36:42,780
And you'll notice that I am not actually E-Dirban,

788
00:36:42,780 --> 00:36:46,300
but I am logged in as them, and I will begin

789
00:36:46,300 --> 00:36:47,860
making some security changes.

790
00:36:47,860 --> 00:36:50,100
So if I go to Settings, you will see

791
00:36:50,100 --> 00:36:53,060
that I have the ability to add two-factor for my account.

792
00:36:53,060 --> 00:36:54,420
There's a two-factor requirement.

793
00:36:54,420 --> 00:36:55,940
In order to add a two-factor, I have

794
00:36:55,940 --> 00:36:58,900
to add recovery codes first.

795
00:36:58,900 --> 00:37:00,980
So I'm going to go ahead and generate some recovery codes.

796
00:37:00,980 --> 00:37:02,700
And to do this, it's going to be for my password, which,

797
00:37:02,700 --> 00:37:05,180
because this is a local setup, is password,

798
00:37:05,180 --> 00:37:06,540
which I then mistyped.

799
00:37:08,820 --> 00:37:09,660
Hello.

800
00:37:11,300 --> 00:37:12,940
Third time's a charm, okay.

801
00:37:12,940 --> 00:37:16,660
So it's going to ask me to save your recovery codes.

802
00:37:16,660 --> 00:37:17,900
I'm going to go ahead and not save them,

803
00:37:17,900 --> 00:37:19,820
because this is a demo, but I'm going to copy one of them,

804
00:37:19,820 --> 00:37:21,580
just in case, because it's going to ask me to enter one

805
00:37:21,580 --> 00:37:23,180
to make sure that I actually did save them,

806
00:37:23,180 --> 00:37:24,380
which I didn't do.

807
00:37:24,380 --> 00:37:26,860
So I am going to verify.

808
00:37:26,860 --> 00:37:28,580
It's now verified, right?

809
00:37:28,580 --> 00:37:30,020
And now it's going to let me do real two-factor.

810
00:37:30,020 --> 00:37:31,220
So I have two options.

811
00:37:31,220 --> 00:37:32,380
I'm going to do both of them for you.

812
00:37:32,380 --> 00:37:34,740
I'm going to add two-factor with authentication application,

813
00:37:34,780 --> 00:37:36,740
also known as TOTP, and then also do one

814
00:37:36,740 --> 00:37:39,620
with the security device, AKA WebAuthnToken.

815
00:37:39,620 --> 00:37:42,060
So for two-factor with a authentication application,

816
00:37:42,060 --> 00:37:43,500
it's going to give me a little QR code.

817
00:37:43,500 --> 00:37:44,340
And now you're going to have to trust me

818
00:37:44,340 --> 00:37:46,420
that I'm going to use one of my phone.

819
00:37:46,420 --> 00:37:47,500
You're not going to be able to verify this,

820
00:37:47,500 --> 00:37:49,460
but I'm going to go ahead and scan it.

821
00:37:51,340 --> 00:37:54,460
It's going to give me a little six-digit code.

822
00:37:54,460 --> 00:37:55,460
I'm going to go ahead and put that in,

823
00:37:55,460 --> 00:37:58,420
so it can confirm that I haven't just deleted it again.

824
00:37:58,420 --> 00:38:00,820
So in this case, again, this does not matter

825
00:38:00,820 --> 00:38:02,700
that you can see it, because this is going to get deleted

826
00:38:02,700 --> 00:38:04,140
as soon as I stop.

827
00:38:04,140 --> 00:38:06,100
But I have now added TOTP.

828
00:38:06,100 --> 00:38:08,300
And what this means is that the next time you log on to PyPI,

829
00:38:08,300 --> 00:38:11,500
it will prompt you for a code, basically,

830
00:38:11,500 --> 00:38:13,860
to ensure that you are in fact possessing the device

831
00:38:13,860 --> 00:38:15,780
that has the token.

832
00:38:15,780 --> 00:38:16,940
But we can go one step further,

833
00:38:16,940 --> 00:38:18,340
and we can actually add a security device, too.

834
00:38:18,340 --> 00:38:20,860
So go ahead and do that.

835
00:38:20,860 --> 00:38:22,380
Similarly, I'm going to go ahead and name it.

836
00:38:22,380 --> 00:38:24,460
So you might have multiple WebAuthn devices.

837
00:38:24,460 --> 00:38:28,140
So in this case, I'm going to call mine the laptop key.

838
00:38:29,500 --> 00:38:31,940
Click Setup. It's going to prompt me for permission.

839
00:38:32,500 --> 00:38:34,380
I'm going to do a security device.

840
00:38:34,380 --> 00:38:35,980
I'm going to go ahead and touch it.

841
00:38:37,180 --> 00:38:39,780
And security device is set up.

842
00:38:39,780 --> 00:38:42,500
So now, if you see the bottom here,

843
00:38:42,500 --> 00:38:44,500
I have two two-factor authentication methods.

844
00:38:44,500 --> 00:38:45,860
I have my TOTP application,

845
00:38:45,860 --> 00:38:47,980
and I have my laptop key, security key.

846
00:38:47,980 --> 00:38:49,780
I can remove any of them at any time.

847
00:38:50,820 --> 00:38:52,300
And yeah, pretty much it.

848
00:38:52,300 --> 00:38:53,420
You can also see the security events.

849
00:38:53,420 --> 00:38:55,140
So on your account, if you log in,

850
00:38:55,140 --> 00:38:57,660
you'll see if someone has set one up for you on your behalf,

851
00:38:57,660 --> 00:38:59,380
perhaps without you knowing.

852
00:38:59,380 --> 00:39:00,460
Actually, just to demo this really quick,

853
00:39:00,460 --> 00:39:02,620
I'm going to go ahead and log out and log back in.

854
00:39:02,620 --> 00:39:03,460
So,

855
00:39:07,820 --> 00:39:11,780
get with the device, touch my thing, and I'm logged in.

856
00:39:11,780 --> 00:39:16,180
So the one last thing I wanted to demo was API tokens.

857
00:39:16,180 --> 00:39:18,940
And so we've had API tokens for a couple of years now,

858
00:39:18,940 --> 00:39:19,780
but one of the cool things you can do

859
00:39:19,780 --> 00:39:20,820
that not as many people know about

860
00:39:20,820 --> 00:39:22,860
is that you can scope them to individual projects.

861
00:39:22,860 --> 00:39:25,660
So I'm going to go ahead and add an API token.

862
00:39:25,660 --> 00:39:27,420
This is the standard API token view.

863
00:39:27,420 --> 00:39:29,740
And I'm going to name it, you know, crap.

864
00:39:29,740 --> 00:39:32,780
And I'm going to scope it to Clendest 90.

865
00:39:32,780 --> 00:39:35,060
So when I do this, again, this token is not actually secret,

866
00:39:35,060 --> 00:39:36,940
but in the real deployment,

867
00:39:36,940 --> 00:39:38,580
this would be a token that you would add to get up actions

868
00:39:38,580 --> 00:39:41,060
or to your local workflow to publish.

869
00:39:41,060 --> 00:39:42,300
So you can use this instead of a password.

870
00:39:42,300 --> 00:39:43,500
It's much more secure.

871
00:39:43,500 --> 00:39:45,540
Instead of copying your password everywhere,

872
00:39:45,540 --> 00:39:47,780
you can remove the token if that was a mistake.

873
00:39:48,780 --> 00:39:51,420
And you will note that doing all of this

874
00:39:51,420 --> 00:39:53,740
also corresponds to events on page.

875
00:39:53,740 --> 00:39:55,540
So again, you can audit this.

876
00:39:55,540 --> 00:39:56,580
And that is all I have.

877
00:39:56,580 --> 00:39:57,420
So thank you.

878
00:39:57,700 --> 00:39:58,540
Thank you.

879
00:40:03,100 --> 00:40:03,940
Round of applause for William.

880
00:40:03,940 --> 00:40:06,820
And also, what William didn't say was he was the person

881
00:40:06,820 --> 00:40:08,420
that implemented a lot of this for PyPI.

882
00:40:08,420 --> 00:40:10,820
So let's give him another round of applause for that as well.

883
00:40:10,820 --> 00:40:11,820
All right.

884
00:40:15,340 --> 00:40:18,500
Next up, we have Alexa with generating recipes

885
00:40:18,500 --> 00:40:21,940
of varying quality with GTP2.

886
00:40:21,940 --> 00:40:23,300
Give it away for Alexa.

887
00:40:23,820 --> 00:40:28,740
Hi, I'm Alexa.

888
00:40:28,740 --> 00:40:32,180
And today I want to talk to you about generating recipes

889
00:40:32,180 --> 00:40:33,500
with deep learning in Python.

890
00:40:33,500 --> 00:40:35,420
My main goal for this talk is just to show you

891
00:40:35,420 --> 00:40:36,540
that it's pretty easy.

892
00:40:36,540 --> 00:40:38,300
It doesn't have to be intimidating

893
00:40:38,300 --> 00:40:40,540
to get started with deep learning.

894
00:40:40,540 --> 00:40:41,780
Excuse me.

895
00:40:41,780 --> 00:40:43,780
So this really only has five steps.

896
00:40:43,780 --> 00:40:45,940
I'll walk you through the whole thing.

897
00:40:45,940 --> 00:40:47,540
The first step is to get your model.

898
00:40:47,540 --> 00:40:49,940
Here, I'm gonna use GPT2.

899
00:40:49,940 --> 00:40:52,420
There's a great package called GPT2 Simple

900
00:40:52,420 --> 00:40:54,340
by Max Wolf on GitHub.

901
00:40:54,340 --> 00:40:55,020
I'll use that.

902
00:40:55,020 --> 00:40:56,540
It makes fine tuning really easy.

903
00:40:56,540 --> 00:40:58,740
But you can use pretty much any language generation

904
00:40:58,740 --> 00:41:00,020
model that you like.

905
00:41:00,020 --> 00:41:02,060
Here's my code.

906
00:41:02,060 --> 00:41:04,500
It's pretty easy to load up GPT2.

907
00:41:04,500 --> 00:41:06,820
I did this all in Google Colab.

908
00:41:06,820 --> 00:41:09,980
If you want more details about exactly how I loaded up

909
00:41:09,980 --> 00:41:12,820
this model, you can just search GPT2 Simple,

910
00:41:12,820 --> 00:41:15,740
and all the documentation is online.

911
00:41:15,740 --> 00:41:17,940
Our second step is to prepare your data.

912
00:41:17,940 --> 00:41:20,180
So you can use any data set you like.

913
00:41:20,180 --> 00:41:23,900
I just took a data set right off of Kaggle.

914
00:41:23,900 --> 00:41:27,220
I took the CSV file, changed it to a text file,

915
00:41:27,220 --> 00:41:30,100
and added some little tokens to make sure my model knew

916
00:41:30,100 --> 00:41:33,060
where the start and the end of the recipe was,

917
00:41:33,060 --> 00:41:36,420
as well as where the different sections of the recipe were.

918
00:41:36,420 --> 00:41:38,580
So our third step is to fine tune.

919
00:41:38,580 --> 00:41:41,020
Now, these language models that I'm using

920
00:41:41,020 --> 00:41:43,420
are pre-trained on a huge amount of data.

921
00:41:43,420 --> 00:41:46,020
All we're doing by fine tuning is getting it to focus in

922
00:41:46,020 --> 00:41:47,860
on recipes specifically.

923
00:41:47,860 --> 00:41:51,860
So this GPT2 Simple package makes it really, really easy.

924
00:41:51,860 --> 00:41:53,180
You can do it in one line.

925
00:41:53,180 --> 00:41:56,540
Fine tune, and then the name of your training file.

926
00:41:56,540 --> 00:41:59,220
But you also have some options to customize.

927
00:41:59,220 --> 00:42:02,100
So you can change the number of steps that you train for.

928
00:42:02,100 --> 00:42:05,620
You can change how often you print, sample, and save data.

929
00:42:05,620 --> 00:42:07,820
And you can also use some memory saving options

930
00:42:07,820 --> 00:42:10,780
if you're running it in Colab like I was.

931
00:42:10,780 --> 00:42:12,940
Our fourth step is to choose good prompts.

932
00:42:12,940 --> 00:42:14,940
Don't overlook this step, because it really

933
00:42:14,940 --> 00:42:17,060
makes a difference on how your model performs

934
00:42:17,060 --> 00:42:18,820
and how your output looks.

935
00:42:18,820 --> 00:42:21,020
So you can choose lots of options.

936
00:42:21,020 --> 00:42:23,420
You can prompt it with search terms or tags.

937
00:42:23,420 --> 00:42:25,500
You can give your model an ingredient list

938
00:42:25,500 --> 00:42:28,060
and ask it to generate a recipe from that.

939
00:42:28,060 --> 00:42:30,660
What I did was give it a recipe title.

940
00:42:30,660 --> 00:42:33,220
You can also use something called few shot learning,

941
00:42:33,220 --> 00:42:36,060
which essentially just means you give within your prompt

942
00:42:36,060 --> 00:42:37,980
a few examples of your desired output.

943
00:42:37,980 --> 00:42:39,900
So for my case, that would look like giving

944
00:42:39,900 --> 00:42:41,980
a few complete examples of recipes

945
00:42:41,980 --> 00:42:44,140
that I would like it to generate,

946
00:42:44,140 --> 00:42:46,060
and then a title at the end of my prompt

947
00:42:46,060 --> 00:42:48,060
that tells it actually which recipe I would

948
00:42:48,060 --> 00:42:48,940
like it to generate.

949
00:42:48,940 --> 00:42:50,480
And that just gives it a better idea

950
00:42:50,480 --> 00:42:54,020
of what kind of structure and format I'm looking for.

951
00:42:54,020 --> 00:42:57,220
So our first step and last step is to actually generate

952
00:42:57,220 --> 00:42:58,340
our recipes.

953
00:42:58,340 --> 00:43:03,700
So you can choose to generate it just in your terminal

954
00:43:03,700 --> 00:43:04,720
or to a file.

955
00:43:04,720 --> 00:43:08,540
You can see here I have it going to PyCon recipes.txt.

956
00:43:08,540 --> 00:43:10,700
You can change your temperature, which is essentially

957
00:43:10,700 --> 00:43:14,380
how expected or unexpected you want your generated text to be.

958
00:43:14,380 --> 00:43:17,420
Here's where you load in your prompt.

959
00:43:17,420 --> 00:43:21,900
I asked it to truncate when it reaches this little end recipe

960
00:43:21,900 --> 00:43:24,060
tag that will just tell us when it gets

961
00:43:24,060 --> 00:43:25,600
to the end of the recipe or it thinks

962
00:43:25,600 --> 00:43:26,980
it's gotten to the end of a recipe.

963
00:43:26,980 --> 00:43:27,980
We'll see.

964
00:43:27,980 --> 00:43:30,220
And you can also change the length and the number

965
00:43:30,220 --> 00:43:32,980
of samples that you generate.

966
00:43:32,980 --> 00:43:35,420
So this talk would not be fun if I

967
00:43:35,420 --> 00:43:37,700
didn't get to show you a bad example of a recipe

968
00:43:37,700 --> 00:43:39,460
that I generated.

969
00:43:39,460 --> 00:43:42,540
So I wanted to show you this one for almost sugar-free vanilla

970
00:43:42,540 --> 00:43:45,740
fudge cake, which is really something.

971
00:43:45,740 --> 00:43:49,180
You can see it's got several issues.

972
00:43:49,180 --> 00:43:51,460
It's got the general structure down.

973
00:43:51,460 --> 00:43:54,900
But there's some things to be improved there.

974
00:43:54,900 --> 00:43:57,740
My favorite part of this is when you look at the directions

975
00:43:57,740 --> 00:44:01,780
and it asks you to use an air conditioner as an appliance.

976
00:44:01,780 --> 00:44:05,260
Clearly, there's some improvement to be made here.

977
00:44:05,260 --> 00:44:07,000
If you want some better luck at home when

978
00:44:07,000 --> 00:44:08,920
you're doing this yourself, you can do things

979
00:44:08,920 --> 00:44:12,340
like include more training data, train for more steps,

980
00:44:12,340 --> 00:44:14,540
use few-shot learning, which we talked about earlier.

981
00:44:14,540 --> 00:44:16,860
It's just including examples of your desired output

982
00:44:16,860 --> 00:44:18,100
within your prompt.

983
00:44:18,100 --> 00:44:20,060
And also experiment with settings.

984
00:44:20,060 --> 00:44:21,780
Because it's a lightning talk, I can't really

985
00:44:21,780 --> 00:44:23,300
go deeper into the different settings

986
00:44:23,300 --> 00:44:25,500
that you can use and change.

987
00:44:25,500 --> 00:44:29,300
But definitely experiment with your models and see how it goes.

988
00:44:29,300 --> 00:44:33,540
If you want more info about the package that I used for this,

989
00:44:33,540 --> 00:44:34,500
here's a QR code.

990
00:44:34,500 --> 00:44:35,580
It's there on GitHub.

991
00:44:35,580 --> 00:44:36,580
But that's all.

992
00:44:36,580 --> 00:44:37,260
Thank you.

993
00:44:37,260 --> 00:44:37,760
Thank you.

994
00:44:42,940 --> 00:44:44,100
That was great.

995
00:44:44,100 --> 00:44:46,060
That cake looked delicious.

996
00:44:46,060 --> 00:44:48,060
My absolute favorite class of humor

997
00:44:48,060 --> 00:44:52,100
is like machines trying to be humans very badly.

998
00:44:52,100 --> 00:44:53,380
It's absolutely hilarious.

999
00:44:53,380 --> 00:44:57,420
OK, next we have a talk on the dreaded Django

1000
00:44:57,420 --> 00:44:59,260
upgrade by Srinivas.

1001
00:44:59,260 --> 00:45:00,900
Let's give Srinivas a round of applause.

1002
00:45:00,900 --> 00:45:03,580
All right.

1003
00:45:03,580 --> 00:45:04,580
Hello, everyone.

1004
00:45:04,580 --> 00:45:06,100
I'm Srinivas Buntula.

1005
00:45:06,100 --> 00:45:09,140
I'm a software engineer at Cox Automotive.

1006
00:45:09,140 --> 00:45:10,940
And yeah, I mean, this is my first PyCon.

1007
00:45:10,940 --> 00:45:12,500
And I'm having a great experience.

1008
00:45:12,500 --> 00:45:13,780
I hope you guys do.

1009
00:45:13,780 --> 00:45:15,260
Yeah.

1010
00:45:15,260 --> 00:45:17,180
One thing I wanted to share is it's

1011
00:45:17,180 --> 00:45:19,260
one story sitting there and listening to the talks

1012
00:45:19,260 --> 00:45:20,060
and enjoying them.

1013
00:45:20,060 --> 00:45:22,820
And it's a totally different experience standing here

1014
00:45:22,820 --> 00:45:24,060
and trying to talk.

1015
00:45:24,060 --> 00:45:26,180
It's so fast, my heart beat right now.

1016
00:45:26,180 --> 00:45:26,980
All right.

1017
00:45:26,980 --> 00:45:29,820
Without further ado, let's give Srinivas a round of applause.

1018
00:45:30,180 --> 00:45:33,940
Without further ado, I'll go into the talk.

1019
00:45:33,940 --> 00:45:36,020
So what I'm going to share with you today

1020
00:45:36,020 --> 00:45:41,740
is about our story of upgrading Django from like we were

1021
00:45:41,740 --> 00:45:44,940
running it on 1.11.x version and then upgrading it

1022
00:45:44,940 --> 00:45:46,220
to the latest version.

1023
00:45:46,220 --> 00:45:48,180
I'm going to share it with you soon.

1024
00:45:48,180 --> 00:45:49,620
And it's not reinventing the wheel.

1025
00:45:49,620 --> 00:45:51,100
It's more like sharing our story so

1026
00:45:51,100 --> 00:45:54,100
that some small fine tuning and steps that we did

1027
00:45:54,100 --> 00:45:57,620
to just get through the process faster.

1028
00:45:57,620 --> 00:45:59,620
All right.

1029
00:46:00,500 --> 00:46:01,220
Yeah.

1030
00:46:01,220 --> 00:46:01,720
All right.

1031
00:46:01,720 --> 00:46:03,660
So why upgrade?

1032
00:46:03,660 --> 00:46:07,940
Django, just like any other package or library, right?

1033
00:46:07,940 --> 00:46:10,220
What happens is over the time, you

1034
00:46:10,220 --> 00:46:12,140
won't receive the security hot patches

1035
00:46:12,140 --> 00:46:15,300
and then the support for the latest versions

1036
00:46:15,300 --> 00:46:18,020
or the latest transit of dependencies or libraries.

1037
00:46:18,020 --> 00:46:19,980
And same with the features too.

1038
00:46:19,980 --> 00:46:21,660
Like the older versions, they stop

1039
00:46:21,660 --> 00:46:24,620
developing the features just like any other library.

1040
00:46:24,620 --> 00:46:29,180
And what we observed over time is when we developed our code,

1041
00:46:29,180 --> 00:46:31,420
this was like 2015, 2016.

1042
00:46:31,420 --> 00:46:33,260
And we never upgraded the Django version

1043
00:46:33,260 --> 00:46:34,980
that we were running since then.

1044
00:46:34,980 --> 00:46:37,980
So towards the end of 2020 and 2021,

1045
00:46:37,980 --> 00:46:40,340
that's when we started noticing a lot of problems

1046
00:46:40,340 --> 00:46:43,180
because of this.

1047
00:46:43,180 --> 00:46:43,900
All right.

1048
00:46:43,900 --> 00:46:47,700
So just as I said earlier, we were running on Django 1.11.18.

1049
00:46:47,700 --> 00:46:49,900
And then if you look at the slide there,

1050
00:46:49,900 --> 00:46:53,160
that shows the end of cycle for the Django versions,

1051
00:46:53,160 --> 00:46:54,940
it's not even visible in that.

1052
00:46:54,940 --> 00:46:57,180
So it sort of ended even before 2019.

1053
00:46:57,180 --> 00:46:59,380
So now you know why we had to do that.

1054
00:46:59,380 --> 00:47:01,820
We were forced to do that.

1055
00:47:01,820 --> 00:47:04,660
But we're glad we did the upgrade

1056
00:47:04,660 --> 00:47:09,380
because right now you get the trooper, the runtime,

1057
00:47:09,380 --> 00:47:11,740
or the processing time in the application,

1058
00:47:11,740 --> 00:47:13,620
not even going to the database level.

1059
00:47:13,620 --> 00:47:16,100
But the application itself is fast.

1060
00:47:16,100 --> 00:47:17,340
And this applies.

1061
00:47:17,340 --> 00:47:19,460
So just to give an example, our system

1062
00:47:19,460 --> 00:47:22,300
is more monolith and tied up with the microservices.

1063
00:47:22,300 --> 00:47:24,780
But the approach that we took works

1064
00:47:24,780 --> 00:47:28,220
with any repository, smaller code repository,

1065
00:47:28,220 --> 00:47:30,540
thousands of lines of code or millions of lines of code,

1066
00:47:30,540 --> 00:47:32,300
et cetera, et cetera.

1067
00:47:32,300 --> 00:47:33,220
All right.

1068
00:47:33,220 --> 00:47:34,060
OK.

1069
00:47:34,060 --> 00:47:38,020
The first thing is, I think, the problem that most of us

1070
00:47:38,020 --> 00:47:39,980
face is about dependencies.

1071
00:47:39,980 --> 00:47:42,220
B, direct dependencies are transitive

1072
00:47:42,220 --> 00:47:44,300
that we see in the packages.

1073
00:47:44,300 --> 00:47:47,100
That is, our inbuilt packages are open source packages

1074
00:47:47,100 --> 00:47:48,860
that we pull into our system.

1075
00:47:48,860 --> 00:47:55,900
And one thing that we did it as a precursor before even moving

1076
00:47:55,900 --> 00:48:01,100
into the upgrade is making sure we have the dependency either

1077
00:48:01,100 --> 00:48:04,820
pinned or un-pinned, depending on what we need.

1078
00:48:04,820 --> 00:48:06,940
The pinned dependencies, obviously,

1079
00:48:06,940 --> 00:48:09,700
everyone prefers that because you know that even

1080
00:48:09,700 --> 00:48:10,860
with the upgrade.

1081
00:48:10,860 --> 00:48:12,380
And when you do the pip compile, it's

1082
00:48:12,380 --> 00:48:13,980
going to just install the same package.

1083
00:48:13,980 --> 00:48:17,140
So your code would run without any errors.

1084
00:48:17,140 --> 00:48:18,940
But there is a problem there in the sense

1085
00:48:18,940 --> 00:48:22,780
that you won't get the latest packages.

1086
00:48:22,780 --> 00:48:25,060
So Django, we know we are getting the latest package,

1087
00:48:25,060 --> 00:48:26,700
but not the other libraries.

1088
00:48:26,700 --> 00:48:29,700
So at some point, you've got to either unpin them

1089
00:48:29,700 --> 00:48:32,660
or define a specific version that works for you.

1090
00:48:32,660 --> 00:48:35,620
And then now coming to unpin.

1091
00:48:35,620 --> 00:48:38,300
So for us, as I said, it's a monolith tied

1092
00:48:38,300 --> 00:48:40,100
to different microservices.

1093
00:48:40,100 --> 00:48:42,540
So we made sure that the setup.py,

1094
00:48:42,540 --> 00:48:45,820
that the installation files for all the microservices,

1095
00:48:45,820 --> 00:48:48,860
you would never touch or you would never

1096
00:48:48,860 --> 00:48:51,300
pin any dependencies because when you're pulling it

1097
00:48:51,300 --> 00:48:53,020
into the monolith, you would want

1098
00:48:53,020 --> 00:48:54,660
to pull the latest versions for it

1099
00:48:54,660 --> 00:48:57,620
to run without any errors so that the transitive dependencies

1100
00:48:57,620 --> 00:48:59,820
are upgraded.

1101
00:48:59,820 --> 00:49:01,300
Moving on.

1102
00:49:01,300 --> 00:49:04,580
And another small thing that sort of helped us move quicker

1103
00:49:04,580 --> 00:49:07,380
is annotating the pip compile.

1104
00:49:07,380 --> 00:49:11,140
By that, I mean if you look at the hashes on the side,

1105
00:49:11,140 --> 00:49:12,620
you would know the exact dependencies

1106
00:49:12,620 --> 00:49:15,260
for packages in your output requirements.lock.

1107
00:49:15,260 --> 00:49:20,060
What that helped us in doing is when you are manually

1108
00:49:20,060 --> 00:49:22,060
installing or deleting a package,

1109
00:49:22,060 --> 00:49:24,860
you would know what transitive dependencies to remove even

1110
00:49:24,860 --> 00:49:26,860
before the pip compile step.

1111
00:49:26,860 --> 00:49:30,260
So that sort of helped us move quicker.

1112
00:49:30,260 --> 00:49:32,700
And then just going to the Django itself

1113
00:49:32,700 --> 00:49:33,900
has great documentation.

1114
00:49:33,900 --> 00:49:36,620
So just reading the release notes

1115
00:49:36,620 --> 00:49:40,540
or how to do the upgrade or the deprecated methods,

1116
00:49:40,540 --> 00:49:44,300
the most important thing, would give you more information

1117
00:49:44,300 --> 00:49:48,100
on what to address quickly.

1118
00:49:48,100 --> 00:49:52,500
And then we have a lot of open source code models,

1119
00:49:52,500 --> 00:49:55,340
I would call them, which is like automatic.

1120
00:49:55,340 --> 00:49:59,140
It's easy to fix the deprecations in your code.

1121
00:49:59,140 --> 00:50:00,300
These are not written by us.

1122
00:50:00,300 --> 00:50:03,860
These are open source libraries that we have.

1123
00:50:03,860 --> 00:50:04,940
Oh, we're at time.

1124
00:50:04,940 --> 00:50:06,420
Oh, out of time.

1125
00:50:06,420 --> 00:50:06,900
One second.

1126
00:50:06,900 --> 00:50:07,140
Go ahead.

1127
00:50:07,140 --> 00:50:07,420
Go.

1128
00:50:07,420 --> 00:50:07,700
Finish it.

1129
00:50:07,700 --> 00:50:08,180
Yeah.

1130
00:50:08,180 --> 00:50:09,220
This is the last slide.

1131
00:50:09,220 --> 00:50:11,180
So I just wanted to say these are the open source

1132
00:50:11,180 --> 00:50:13,820
libraries that help you fix the deprecations in the code

1133
00:50:13,820 --> 00:50:14,980
automatically.

1134
00:50:14,980 --> 00:50:16,500
Round of applause.

1135
00:50:16,500 --> 00:50:17,460
Thank you.

1136
00:50:17,460 --> 00:50:17,940
Thank you.

1137
00:50:20,900 --> 00:50:23,500
I had one job.

1138
00:50:23,500 --> 00:50:24,620
All right.

1139
00:50:24,620 --> 00:50:26,100
And I think for our last talk, we're

1140
00:50:26,100 --> 00:50:27,620
going to have Adrian, who's going

1141
00:50:27,620 --> 00:50:30,220
to talk to us about when to rewrite in Rust.

1142
00:50:30,220 --> 00:50:34,220
Let's give Adrian a round of applause.

1143
00:50:34,220 --> 00:50:35,580
Hello.

1144
00:50:35,580 --> 00:50:36,100
Hi, folks.

1145
00:50:36,100 --> 00:50:37,100
My name's Adrian.

1146
00:50:37,100 --> 00:50:39,340
So I rewrote a module in the standard library

1147
00:50:39,340 --> 00:50:40,180
called Graphlib.

1148
00:50:40,180 --> 00:50:42,260
It's available on 3.9 in Rust.

1149
00:50:42,580 --> 00:50:45,140
In this talk, I'm going to talk about what I learned from that.

1150
00:50:45,140 --> 00:50:47,820
It was my first time moving some of the Rust.

1151
00:50:47,820 --> 00:50:50,540
Maybe when you should rewrite something in Rust.

1152
00:50:50,540 --> 00:50:52,300
So the first thing I want to talk about

1153
00:50:52,300 --> 00:50:54,580
is when is it good to rewrite something in Rust,

1154
00:50:54,580 --> 00:50:57,060
or when you should think about that.

1155
00:50:57,060 --> 00:50:59,540
I think especially if it's your first time doing it,

1156
00:50:59,540 --> 00:51:02,740
you should pick something that's CPU bound, that's

1157
00:51:02,740 --> 00:51:06,540
a well-contained MPI, and ideally has existing tests.

1158
00:51:06,540 --> 00:51:09,940
So something like Graphlib, which is an existing, well-understood

1159
00:51:09,940 --> 00:51:12,300
piece of Python, is a good candidate for that.

1160
00:51:12,300 --> 00:51:14,140
If it's your first time trying to write something in Rust,

1161
00:51:14,140 --> 00:51:15,860
maybe trying to figure out how to test it,

1162
00:51:15,860 --> 00:51:18,180
how to learn Rust, all that in one go,

1163
00:51:18,180 --> 00:51:19,900
and figure out the API for your thing,

1164
00:51:19,900 --> 00:51:21,700
it's probably a little bit too much.

1165
00:51:21,700 --> 00:51:22,580
So the next couple slides are going

1166
00:51:22,580 --> 00:51:26,020
to be interesting things that I learned from my first time

1167
00:51:26,020 --> 00:51:27,460
writing something in Rust.

1168
00:51:27,460 --> 00:51:28,940
So the first one is the idea of fallibility.

1169
00:51:28,940 --> 00:51:30,980
In Python, you can raise an exception anywhere.

1170
00:51:30,980 --> 00:51:32,460
In Rust, you can't do that.

1171
00:51:32,460 --> 00:51:34,780
And in particular, for something like Graph-related,

1172
00:51:34,780 --> 00:51:38,140
in this case, it made sense to represent as a hash map

1173
00:51:38,140 --> 00:51:38,780
sort of thing.

1174
00:51:38,820 --> 00:51:40,180
There's many ways to open a graph,

1175
00:51:40,180 --> 00:51:42,260
but in this case, that's what made sense.

1176
00:51:42,260 --> 00:51:44,020
And the issue I encountered is that Python's hash function

1177
00:51:44,020 --> 00:51:44,660
is fallible.

1178
00:51:44,660 --> 00:51:46,020
You can raise an exception.

1179
00:51:46,020 --> 00:51:47,940
Like, there's things that are not hashable.

1180
00:51:47,940 --> 00:51:49,140
But Rust doesn't allow that.

1181
00:51:49,140 --> 00:51:51,340
And what happens if you try to do that

1182
00:51:51,340 --> 00:51:55,620
is you just get a panic, and everything's pretty ugly.

1183
00:51:55,620 --> 00:51:58,180
So the way I solve this problem is I just

1184
00:51:58,180 --> 00:51:59,740
created a little struct.

1185
00:51:59,740 --> 00:52:02,820
This is Python, but really this was written in Rust.

1186
00:52:02,820 --> 00:52:05,180
So we can all understand it.

1187
00:52:05,180 --> 00:52:08,140
And what I do is I hash the thing before I put it in here.

1188
00:52:08,140 --> 00:52:11,220
And so now my hash function is just returning a known value.

1189
00:52:11,220 --> 00:52:14,380
And that means that when I call Python's hash function,

1190
00:52:14,380 --> 00:52:16,460
I'm still at a point where I have control

1191
00:52:16,460 --> 00:52:19,980
and I can return a Python error, as opposed to Rust's hash

1192
00:52:19,980 --> 00:52:23,380
function calling it, where there's no error handling.

1193
00:52:23,380 --> 00:52:24,860
The next is boundary crossing.

1194
00:52:24,860 --> 00:52:26,700
One of the more expensive things,

1195
00:52:26,700 --> 00:52:30,300
especially for the current state of Rust Python bindings,

1196
00:52:30,300 --> 00:52:33,660
is doing a lot of calling from one place to the other.

1197
00:52:33,660 --> 00:52:37,100
So when you're designing, really even at the API level,

1198
00:52:37,100 --> 00:52:38,520
you want to minimize how much you're

1199
00:52:38,520 --> 00:52:40,780
going to have to call Python from Rust and Rust from Python.

1200
00:52:40,780 --> 00:52:41,900
Because if you're doing that all the time,

1201
00:52:41,900 --> 00:52:44,700
it's going to be slower than if you just did it in Python.

1202
00:52:44,700 --> 00:52:49,020
And the issue I encountered was when you have a hash map

1203
00:52:49,020 --> 00:52:51,960
and you find that something has the same hash,

1204
00:52:51,960 --> 00:52:53,620
so maybe it's the same thing, maybe it's

1205
00:52:53,620 --> 00:52:55,140
the thing you're looking for, then you still

1206
00:52:55,140 --> 00:52:57,020
need to do an equality comparison to make sure it actually

1207
00:52:57,020 --> 00:52:57,660
is the same thing.

1208
00:52:57,660 --> 00:53:00,220
And that meant that every time I looked something up in a hash

1209
00:53:00,220 --> 00:53:01,900
map, I had to call back into Python.

1210
00:53:01,900 --> 00:53:03,780
And that was really slow.

1211
00:53:03,780 --> 00:53:05,740
So I did a little optimization.

1212
00:53:05,740 --> 00:53:07,460
Python does this already, but what I did

1213
00:53:07,460 --> 00:53:09,660
is I just did a reference comparison in Rust

1214
00:53:09,660 --> 00:53:10,860
before calling into Python.

1215
00:53:10,860 --> 00:53:14,780
And so for most cases, when you're saying, with this API,

1216
00:53:14,780 --> 00:53:16,580
you're saying, this task is done.

1217
00:53:16,580 --> 00:53:19,940
That task exists in the hash map and it's the exact same object.

1218
00:53:19,940 --> 00:53:21,900
And so this means that I almost never

1219
00:53:21,900 --> 00:53:24,620
have to call back into Python.

1220
00:53:24,620 --> 00:53:27,100
The last more interesting one is mutability.

1221
00:53:27,100 --> 00:53:28,700
Rust has this whole borrow system.

1222
00:53:28,700 --> 00:53:30,200
One of the fundamental rules is you

1223
00:53:30,200 --> 00:53:32,680
can't have more than one mutable reference.

1224
00:53:32,680 --> 00:53:35,540
In Python, everything is kind of a mutable reference,

1225
00:53:35,540 --> 00:53:39,220
but you can't grab a value in a dictionary

1226
00:53:39,220 --> 00:53:41,360
and then mutate that and then use

1227
00:53:41,360 --> 00:53:42,900
that to look up something else.

1228
00:53:42,900 --> 00:53:44,700
You run into issues.

1229
00:53:44,700 --> 00:53:48,180
And the existing API for GraphLab is something like this.

1230
00:53:48,180 --> 00:53:51,260
There's a class that contains information on each node.

1231
00:53:51,260 --> 00:53:53,740
And it has some mutable parts, like whether the thing is

1232
00:53:53,740 --> 00:53:56,940
ready or not, and some parts that really aren't mutable,

1233
00:53:56,940 --> 00:53:59,140
like the parents of that task.

1234
00:53:59,140 --> 00:54:01,060
And so what I had to do is I had to destructure

1235
00:54:01,060 --> 00:54:03,140
and do two different things.

1236
00:54:03,140 --> 00:54:06,420
I had to have a mutable part and an immutable part.

1237
00:54:06,420 --> 00:54:09,380
And that allowed me to freely access the mutable part

1238
00:54:09,380 --> 00:54:11,620
and then access the mutable part, return the reference,

1239
00:54:11,620 --> 00:54:12,900
and then move on.

1240
00:54:12,900 --> 00:54:15,260
So you can see there's some issues with this.

1241
00:54:15,260 --> 00:54:17,700
The Python version, in my opinion, is a lot nicer.

1242
00:54:17,700 --> 00:54:19,260
Everything is contained in one place.

1243
00:54:19,260 --> 00:54:21,820
Here you can end up with different keys and mappings.

1244
00:54:21,820 --> 00:54:22,780
It gets weird.

1245
00:54:22,780 --> 00:54:25,300
But that's the way you have to do.

1246
00:54:25,300 --> 00:54:27,940
And so my takeaways for this are probably

1247
00:54:27,940 --> 00:54:29,780
write it in Python first.

1248
00:54:29,780 --> 00:54:31,340
Understand the API.

1249
00:54:31,340 --> 00:54:33,340
Understand where the hot loops are.

1250
00:54:33,340 --> 00:54:36,180
Understand where you can gain performance

1251
00:54:36,180 --> 00:54:37,180
before you move to Rust.

1252
00:54:37,180 --> 00:54:38,620
And once you are writing in Rust,

1253
00:54:38,620 --> 00:54:39,900
think about boundary crossing.

1254
00:54:39,900 --> 00:54:42,220
Try and minimize your calling back and forth.

1255
00:54:42,220 --> 00:54:43,740
Try and move work to Rust.

1256
00:54:43,740 --> 00:54:45,700
Do work in Rust, then come back to Python.

1257
00:54:45,700 --> 00:54:47,020
And think about fallibility.

1258
00:54:47,020 --> 00:54:49,220
That's something we don't really think about in Python.

1259
00:54:49,220 --> 00:54:50,500
Anything can raise an exception.

1260
00:54:50,500 --> 00:54:52,380
In Rust, you don't really have that luxury.

1261
00:54:52,380 --> 00:54:53,580
You have to be more explicit.

1262
00:54:53,580 --> 00:54:55,940
And sometimes you can't even raise an exception.

1263
00:54:55,940 --> 00:54:57,980
And then make things immutable as much as possible,

1264
00:54:57,980 --> 00:55:00,260
because that's going to make it a lot easier to work

1265
00:55:00,260 --> 00:55:01,420
with a borrow checker.

1266
00:55:01,420 --> 00:55:03,380
And so last question is probably, was this fast?

1267
00:55:03,380 --> 00:55:05,780
Yes, it was very fast.

1268
00:55:05,780 --> 00:55:08,260
And it worked great.

1269
00:55:08,780 --> 00:55:17,980
And that wraps it up for today's lightning talks.

1270
00:55:17,980 --> 00:55:19,740
If you want to watch more lightning talks,

1271
00:55:19,740 --> 00:55:21,580
we'll be back at it again tomorrow morning

1272
00:55:21,580 --> 00:55:23,060
for the keynotes at 8 AM.

1273
00:55:23,060 --> 00:55:23,860
Come back here.

1274
00:55:23,860 --> 00:55:24,540
Come and see us.

1275
00:55:24,540 --> 00:55:25,500
We'd love to have you.

1276
00:55:25,500 --> 00:55:27,740
Take care and have a good night.

