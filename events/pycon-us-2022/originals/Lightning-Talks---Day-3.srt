1
00:00:00,000 --> 00:00:02,000
.

2
00:00:08,860 --> 00:00:10,860
Hey, everybody. Good morning.

3
00:00:13,980 --> 00:00:16,980
It's 8 a.m. What does that mean? Do you know what that means?

4
00:00:16,980 --> 00:00:18,980
I don't know. What does it mean?

5
00:00:20,080 --> 00:00:23,980
I think it means we should start lightning talks. So first up,

6
00:00:23,980 --> 00:00:27,900
we have Pandy who is going to talk to us about, I can't see

7
00:00:27,900 --> 00:00:29,900
the slide, how to write a test case, of course.

8
00:00:30,000 --> 00:00:34,980
Hey, y'all. My name is Pandy Knight and I'm the automation

9
00:00:34,980 --> 00:00:38,980
panda. I'm a developer advocate at Apple tools and director of

10
00:00:38,980 --> 00:00:42,980
test automation university. Today, I'm going to show you a

11
00:00:42,980 --> 00:00:46,980
simple but powerful technique for writing test cases like a

12
00:00:46,980 --> 00:00:52,980
pro. First, let's define testing. Testing is interaction

13
00:00:52,980 --> 00:00:56,980
plus verification. That's it. You do something and you make

14
00:00:56,980 --> 00:01:01,960
sure that it works. A test case is a procedure for making those

15
00:01:01,960 --> 00:01:05,960
interactions and verifications. There are several kinds of tests

16
00:01:05,960 --> 00:01:09,960
like unit tests, integration tests or end-to-end tests. But

17
00:01:09,960 --> 00:01:13,960
all functional tests do the same basic thing. They try something

18
00:01:13,960 --> 00:01:19,960
and report pass or fail. That's how testing keeps us safe.

19
00:01:19,960 --> 00:01:22,960
Testing provides an empirical feedback loop for development.

20
00:01:22,960 --> 00:01:26,940
Without tests, we know when things break. Without tests,

21
00:01:26,940 --> 00:01:30,940
coding can be dangerous. The last thing we want to deploy are

22
00:01:30,940 --> 00:01:37,940
big old bugs. So if we intend to spend time writing tests, how

23
00:01:37,940 --> 00:01:42,940
can we write good tests? There's a simple but powerful pattern I

24
00:01:42,940 --> 00:01:49,940
like to follow. Arrange, act, assert. Arrange, act, assert is a

25
00:01:49,940 --> 00:01:53,920
tool that helps you capture your test cases. It prescribes an

26
00:01:53,920 --> 00:01:59,920
order of operations. First, arrange inputs and targets.

27
00:01:59,920 --> 00:02:03,920
Arrange steps should set up the test case. Does the test require

28
00:02:03,920 --> 00:02:07,920
any objects or special settings? Does it need to prep a

29
00:02:07,920 --> 00:02:11,920
database? Does it need to log into a web app? Handle all these

30
00:02:11,920 --> 00:02:17,920
operations at the start of the test. Second, act on the target

31
00:02:17,920 --> 00:02:21,900
behavior. Act steps should cover the main thing to be tested.

32
00:02:21,900 --> 00:02:25,900
This could be calling a function or method, calling a REST API,

33
00:02:25,900 --> 00:02:29,900
or interacting with a web page, or anything else you need to do.

34
00:02:29,900 --> 00:02:35,900
Keep actions focused on the target behavior. Third, assert

35
00:02:35,900 --> 00:02:39,900
expected outcomes. Act steps should elicit some sort of

36
00:02:39,900 --> 00:02:44,900
response. Assert steps verify the goodness or badness of that

37
00:02:44,900 --> 00:02:48,880
test. Sometimes assertions are as simple as checking numbers or

38
00:02:48,880 --> 00:02:51,880
string values, but other times they may require checking

39
00:02:51,880 --> 00:02:54,880
multiple facets of a system or using something like visual

40
00:02:54,880 --> 00:02:58,880
snapshots. Assertions will ultimately determine if the test

41
00:02:58,880 --> 00:03:03,880
passes or fails. You may have seen arrange, act, assert in a

42
00:03:03,880 --> 00:03:07,880
different way. Grrken's given when then format from BDD is the

43
00:03:07,880 --> 00:03:10,880
same thing as arrange, act, assert, just with different

44
00:03:10,880 --> 00:03:14,860
parameters. So here's a basic unit test for Python's absolute

45
00:03:14,860 --> 00:03:18,860
value function. I wrote this using PyTest. This test may seem

46
00:03:18,860 --> 00:03:21,860
trivial, but we can use it to illustrate our pattern. The

47
00:03:21,860 --> 00:03:25,860
arrange step creates a variable named negative for testing. The

48
00:03:25,860 --> 00:03:29,860
act step calls the abs function using the negative variable and

49
00:03:29,860 --> 00:03:32,860
stores the return value in a variable named answer, and the

50
00:03:32,860 --> 00:03:38,860
assert step verifies that answer is a positive value. I like to

51
00:03:38,860 --> 00:03:40,860
use this as a reference to noting each phase of the test

52
00:03:40,860 --> 00:03:44,860
case as well. Let's kick it up a notch with a more complicated

53
00:03:44,860 --> 00:03:50,860
test. The example test, this example test, the duck duck go

54
00:03:50,860 --> 00:03:53,860
instant answer API using the requests package that I'm sure

55
00:03:53,860 --> 00:03:57,860
many of you have used. The arrange step forms an end point

56
00:03:57,860 --> 00:04:01,860
URL for searching for Python programming. Notice the base

57
00:04:01,860 --> 00:04:07,860
URL and the query parameters. The act steps call the API using

58
00:04:07,860 --> 00:04:10,860
the URL with requests and then parse the response body from

59
00:04:10,860 --> 00:04:14,860
JSON into a Python dictionary. The assert steps then verify the

60
00:04:14,860 --> 00:04:19,860
HTTP status code was 200, meaning okay or success, and the word

61
00:04:19,860 --> 00:04:23,860
Python appears somewhere in the responses abstract text. We can

62
00:04:23,860 --> 00:04:26,860
clearly see that arrange act assert pattern works for both

63
00:04:26,860 --> 00:04:32,860
unit tests and feature tests. So why should we use arrange act

64
00:04:32,860 --> 00:04:36,860
assert? It makes each test focus on an individual behavior

65
00:04:36,860 --> 00:04:41,860
independently. If a test fails, you'll know the reason clearly.

66
00:04:41,860 --> 00:04:46,860
Remember, simple is better than complex. So thank you for

67
00:04:46,860 --> 00:04:49,860
listening to my lightning talk. Again, I'm the automation panda.

68
00:04:49,860 --> 00:04:51,860
If you want to learn more about testing and automation, check

69
00:04:51,860 --> 00:04:54,860
out test automation university. We've got about 70 courses for

70
00:04:54,860 --> 00:04:58,860
free. And I'll see you today at 1.45 for my talk managing the

71
00:04:58,860 --> 00:05:00,860
test data nightmare. Thank you.

72
00:05:00,860 --> 00:05:02,860
Applause.

73
00:05:02,860 --> 00:05:07,860
Excellent. Thank you so much. Up next we have Shreya.

74
00:05:07,860 --> 00:05:12,860
Thank you. Hi, everyone. I'm Shreya and I'm a product manager

75
00:05:12,860 --> 00:05:16,860
at Microsoft. Today I'm going to talk to you all about

76
00:05:16,860 --> 00:05:19,860
computational thinking and the potential effects of incorporating

77
00:05:19,860 --> 00:05:24,860
it into school curriculums. So when I was in the fourth grade, I

78
00:05:24,860 --> 00:05:29,860
had to figure out what day it would be 100 days from Tuesday.

79
00:05:29,860 --> 00:05:32,860
So to come up with my answer, I wrote on a page the days Sunday,

80
00:05:32,860 --> 00:05:35,860
Monday, Tuesday, Wednesday, and so on until I filled the whole

81
00:05:35,860 --> 00:05:39,860
sheet of paper. And then I counted from one to 100. And I did

82
00:05:39,860 --> 00:05:42,860
this about three times because I really, really wanted to make

83
00:05:42,860 --> 00:05:47,860
sure that I got the right answer. In contrast, today, if I find

84
00:05:47,860 --> 00:05:50,860
myself repeating the same task even once, I think to myself,

85
00:05:50,860 --> 00:05:53,860
you know, there must be a better way. Like, I could probably

86
00:05:53,860 --> 00:05:56,860
automate this or something could be different here to make this a

87
00:05:56,860 --> 00:06:00,860
more streamlined workflow. But this kind of reasoning can also be

88
00:06:00,860 --> 00:06:03,860
classified as pattern recognition. And this reasoning should be

89
00:06:03,860 --> 00:06:07,860
taught to students in all disciplines, across all curriculums,

90
00:06:07,860 --> 00:06:13,860
because it can really change the way we solve and analyze problems.

91
00:06:13,860 --> 00:06:17,860
So what is computational thinking? The way I like to think about

92
00:06:17,860 --> 00:06:20,860
computational thinking is that it's computer science concepts at

93
00:06:20,860 --> 00:06:25,860
their very core. So it's the ideas behind inventing effective

94
00:06:25,860 --> 00:06:29,860
solutions, but with no regards to the syntax or the structure of

95
00:06:29,860 --> 00:06:33,860
writing the actual code. Computational thinking contains four

96
00:06:33,860 --> 00:06:37,860
main components, decomposition, pattern recognition, abstraction,

97
00:06:37,860 --> 00:06:41,860
and algorithm design. These concepts directly play a role in

98
00:06:41,860 --> 00:06:45,860
computer science, but they also have a lot of value across all

99
00:06:45,860 --> 00:06:51,860
other disciplines, as well as real world scenarios. So when each of

100
00:06:51,860 --> 00:06:55,860
you got here to this convention center, at some point or another,

101
00:06:55,860 --> 00:06:59,860
it's probably likely that you had to go out of your way to find a room

102
00:06:59,860 --> 00:07:02,860
for a talk. For me to find this room, I went through the following

103
00:07:02,860 --> 00:07:06,860
steps. First, I looked around, are there any signs to the room? And

104
00:07:06,860 --> 00:07:10,860
if so, perfect, I found it. And if not, I picked a random direction to

105
00:07:10,860 --> 00:07:14,860
walk in and went back to step one. And I kept repeating this process

106
00:07:14,860 --> 00:07:18,860
over and over again until I found the room. So what I want to explain

107
00:07:18,860 --> 00:07:21,860
here is that without even knowing it, without even thinking about it, I

108
00:07:21,860 --> 00:07:25,860
was using decomposition for so many different scenarios this weekend.

109
00:07:25,860 --> 00:07:29,860
And by calling out my thought process, I can now optimize for better

110
00:07:29,860 --> 00:07:34,860
results and also carry over this logic to other aspects of my life.

111
00:07:34,860 --> 00:07:39,860
So you might be thinking now, why focus on computational thinking,

112
00:07:39,860 --> 00:07:42,860
right? Why don't we just teach everyone how to code, especially

113
00:07:42,860 --> 00:07:46,860
because we've had really good results with Python, which is an excellent

114
00:07:46,860 --> 00:07:50,860
introductory language, and we've seen how young students are able to

115
00:07:50,860 --> 00:07:54,860
successfully pick it up. So I really want to emphasize that my proposition

116
00:07:54,860 --> 00:07:58,860
is not that we replace teaching code with teaching computational thinking.

117
00:07:58,860 --> 00:08:03,860
Rather, I feel that computational thinking is a really solid precursor

118
00:08:03,860 --> 00:08:07,860
before we teach coding. And I feel like given the educational resource

119
00:08:07,860 --> 00:08:12,860
constraints that do exist across the world, and they do contribute to the

120
00:08:12,860 --> 00:08:15,860
barrier in entry when it comes to development, I think computational

121
00:08:15,860 --> 00:08:20,860
thinking is a great way to start, especially because we don't have to make

122
00:08:20,860 --> 00:08:24,860
a new class for computational thinking. So it's not like you're adding a

123
00:08:24,860 --> 00:08:28,860
subject to coursework, nothing like that. It's really actually just adding

124
00:08:28,860 --> 00:08:34,860
material to existing curriculums and reframing different conversations to

125
00:08:34,860 --> 00:08:38,860
make them more computational thinking based. So when I talked about finding

126
00:08:38,860 --> 00:08:42,860
the room earlier this weekend, or this week, all of you probably thought,

127
00:08:42,860 --> 00:08:46,860
well, yeah, I did that too, right? I somehow found the rooms that I went to.

128
00:08:46,860 --> 00:08:50,860
And my point is, you know, like, you didn't do anything new because I talked

129
00:08:50,860 --> 00:08:54,860
about that. It's just that you looked at it in a different way. You framed how

130
00:08:54,860 --> 00:08:59,860
maybe you see that same problem. So in that same theme, I feel that

131
00:08:59,860 --> 00:09:02,860
computational thinking should really lie beneath lesson plans and change the

132
00:09:02,860 --> 00:09:07,860
perspective in which the next generations can solve and analyze problems.

133
00:09:07,860 --> 00:09:11,860
As you go on for the rest of the day and perhaps the rest of the week, I

134
00:09:11,860 --> 00:09:15,860
encourage you to think about what medial tasks that you're completing and what,

135
00:09:15,860 --> 00:09:23,860
if any, component of computational thinking they might fall into. With that,

136
00:09:23,860 --> 00:09:26,860
thank you all so much for listening. If you want to discuss further or have any

137
00:09:26,860 --> 00:09:29,860
questions, please feel free to reach out to me. Thank you.

138
00:09:29,860 --> 00:09:41,860
All right. Next up, we have Patrick, who's going to talk to us about latest.cat.

139
00:09:41,860 --> 00:09:44,860
Okay, let's see what it is. Latest.cat, give him a round of applause.

140
00:09:44,860 --> 00:09:52,860
Yeah, hello, everyone. Today I wanted to show you a tool that I've been building

141
00:09:52,860 --> 00:09:57,860
for a couple of weeks. And I never showed anyone, to be honest. But I think it's

142
00:09:57,860 --> 00:10:02,860
quite useful. So my issue was that every time I wanted to install the latest

143
00:10:02,860 --> 00:10:07,860
version of Python or the latest version of 3.7, I was having to go to

144
00:10:07,860 --> 00:10:12,860
python.org, then try to find it maybe in the homepage. And then you had to find a

145
00:10:12,860 --> 00:10:19,860
couple of steps to go and just find the version and then put it into your favorite

146
00:10:19,860 --> 00:10:23,860
tool for installing Python. So I built this tool that's called latest.cat, where

147
00:10:23,860 --> 00:10:28,860
you can write the software name, which works with a couple of languages at the

148
00:10:28,860 --> 00:10:33,860
moment, but can be improved. So you type it and then it gives you the latest

149
00:10:33,860 --> 00:10:39,860
version for the Python that you want to check. And it should work also for 3.6,

150
00:10:39,860 --> 00:10:45,860
but that works on command line. I'm going to show you an example now. So yeah,

151
00:10:45,860 --> 00:10:49,860
made this quick demo here that you can use it using curl. So you can do curl

152
00:10:49,860 --> 00:10:55,860
dash L dash S Python and then it loads the latest Python version. Also works with

153
00:10:55,860 --> 00:11:01,860
other tools like Node.js. And it also works for some reason with SSH, which I think

154
00:11:01,860 --> 00:11:06,860
is quite cool. It was just fun to do. There's going to be a demo for that in a second.

155
00:11:06,860 --> 00:11:18,860
This is probably useless, but it was fun to do. Yeah. And hopefully it's going to be

156
00:11:18,860 --> 00:11:26,860
useful for any of you. It's open source, so you can add additional languages by

157
00:11:26,860 --> 00:11:34,860
going here. Software.yaml, it works with Go, Swift, Python, PHP, Rust and other

158
00:11:34,860 --> 00:11:39,860
things. And yeah, if you need something like this, if you need other tools, you just

159
00:11:39,860 --> 00:11:46,860
send a request and happy to merge it. Yeah, and that's me. That's not my cat, but

160
00:11:46,860 --> 00:11:58,860
this is my cat. Thank you. I'm a huge cat person, so that makes me very happy. Up

161
00:11:58,860 --> 00:12:05,860
next we have Ray. Hi, I'm Ray from Data Science Rebalanced. We make data science

162
00:12:05,860 --> 00:12:11,860
tutorials to help bridge the gap between academia and industry. Today we'll talk

163
00:12:11,860 --> 00:12:16,860
about behavior-driven machine learning. So let's say you want to build a machine

164
00:12:16,860 --> 00:12:21,860
learning model. You're going to need some data, push it through a training pipeline,

165
00:12:21,860 --> 00:12:28,860
and ultimately end up with model parameters. So how was I taught to do this in school?

166
00:12:28,860 --> 00:12:33,860
I was usually given a data set. Let's call it a binary classification. The two colors

167
00:12:33,860 --> 00:12:39,860
here represent the two classes. And I would be taught to use all of the data available,

168
00:12:39,860 --> 00:12:47,860
split it into a train test split. But not all data is actually equal. If I look at this

169
00:12:47,860 --> 00:12:55,860
data set, some of this data is more important than the rest. This data in particular. So

170
00:12:55,860 --> 00:13:01,860
how would I do it now that I'm in an industry? Well, I would think of my data set as a

171
00:13:01,860 --> 00:13:06,860
collection of behaviors, and I want to iteratively find all of the behaviors that are

172
00:13:06,860 --> 00:13:14,860
important from my data set. If I look at this data set, you might think, well, just take a

173
00:13:14,860 --> 00:13:20,860
random sample. But there's an issue with random sampling. It actually can lead to increased

174
00:13:20,860 --> 00:13:27,860
bias. For example, if I have a certain portion of my space where there's a dense amount of

175
00:13:27,860 --> 00:13:33,860
data points, if I randomly sample, that portion of the space will be overrepresented,

176
00:13:33,860 --> 00:13:40,860
therefore producing bias. As such, I actually want to take a clustering approach and then

177
00:13:40,860 --> 00:13:47,860
randomly sample, let's say, three data points from each one of my clusters, represented by

178
00:13:47,860 --> 00:13:53,860
the three green dots in each cluster here. Those green dots represent my initial training set

179
00:13:53,860 --> 00:13:59,860
that I build a model with. Now, if my model is represented by this red line, my model thinks

180
00:13:59,860 --> 00:14:04,860
everything above the line should be a blue dot and everything below it should be an orange

181
00:14:04,860 --> 00:14:12,860
dot. But clearly it's got a few things off. So how do I correct this? Well, that red line also

182
00:14:12,860 --> 00:14:18,860
happens to be the area where my model is confused. In binary classification, this would be a 50%

183
00:14:18,860 --> 00:14:26,860
confidence score. And so I want to select items that are around that 50% confidence score and

184
00:14:26,860 --> 00:14:33,860
add them to my original green dot training set. So now I have a larger data set, slightly larger,

185
00:14:33,860 --> 00:14:41,860
and I build a new model. I go from my first model to my second model. That's a little bit better.

186
00:14:41,860 --> 00:14:47,860
But I can repeat this process again with my second model, grabbing data points near 50%

187
00:14:47,860 --> 00:14:53,860
confidence, slapping them into a training set, and going ahead and going from my second model

188
00:14:53,860 --> 00:15:00,860
to my third model. But what does this actually mean in the real world? I'm probably going to

189
00:15:00,860 --> 00:15:08,860
actually run this process about 100 times, every time adding extra data onto my data set. And what

190
00:15:08,860 --> 00:15:13,860
each dot represents is a newly trained model. So my performance metric will improve and at some point

191
00:15:13,860 --> 00:15:19,860
it will actually top out. And after that, as I add more data, I'm actually going to get worse

192
00:15:19,860 --> 00:15:26,860
at performing models. So what does this end up buying us? A few things. First, if I have a labeled

193
00:15:26,860 --> 00:15:32,860
data set, I can actually build the best model possible, which probably isn't the one that uses

194
00:15:32,860 --> 00:15:40,860
all of my data. If I have an unlabeled data set, I can save a lot of time in labeling because I don't

195
00:15:40,860 --> 00:15:47,860
need to label the entire data set. And as we discussed already, I can reduce the bias in the model

196
00:15:47,860 --> 00:15:53,860
with this approach. If you're interested in this topic, in academia it's often referred to as

197
00:15:53,860 --> 00:15:59,860
active learning. There's a wonderful book called Human in the Loop Machine Learning by Robert Monarch.

198
00:15:59,860 --> 00:16:06,860
And if you're interested in any other data science content, please reach out to Data Science Rebalanced.

199
00:16:06,860 --> 00:16:12,860
We have a link tree. We teach all kinds of courses on Skillshare and provide medium articles.

200
00:16:12,860 --> 00:16:16,860
So reach out at any time. Thank you so much for your time.

201
00:16:16,860 --> 00:16:22,860
Applause.

202
00:16:22,860 --> 00:16:27,860
Awesome. Thank you, Ray. And next up we have Geir, who's going to talk to us about reading PEPs, right?

203
00:16:27,860 --> 00:16:30,860
Oh, I see it now. Reading PEPs. Let's give him a round of applause.

204
00:16:30,860 --> 00:16:34,860
Applause.

205
00:16:34,860 --> 00:16:40,860
Yeah. Thank you so much. And my name is Geir Aniala. I work with RealPython, creating content there.

206
00:16:40,860 --> 00:16:44,860
And now I want to talk to you about the joy of reading PEPs.

207
00:16:44,860 --> 00:16:51,860
So I suppose one of the things you hear quite early in your Python journey is the PEP 8 document.

208
00:16:51,860 --> 00:16:56,860
But the PEP part of this is often not really explained. So what are these PEPs?

209
00:16:56,860 --> 00:17:01,860
They are Python enhancement proposals. And these are actually fairly technical documents that are

210
00:17:01,860 --> 00:17:07,860
specifications for how Python should work, new features of Python, and also how the processes, the governance

211
00:17:07,860 --> 00:17:13,860
of Python is implemented. Really technical stuff that really needs to go into the details to show off

212
00:17:13,860 --> 00:17:18,860
all kind of edge cases that you have with them.

213
00:17:18,860 --> 00:17:22,860
One of the things I really like about reading PEPs is that they're also historical notes.

214
00:17:22,860 --> 00:17:27,860
They show how the language has evolved over time. They often capture some of the discussions that were made

215
00:17:27,860 --> 00:17:33,860
before introducing a feature and also some of the decisions and especially also which things were left out of the PEPs.

216
00:17:33,860 --> 00:17:39,860
It's been available online essentially all the time. And it's also on GitHub.

217
00:17:39,860 --> 00:17:44,860
And that's a nice place to go back and look at history of this.

218
00:17:44,860 --> 00:17:50,860
But in February this year, they redesigned the web page and now launched peps.python.org.

219
00:17:50,860 --> 00:17:55,860
And we can have a quick look at this. So it's this very nice page.

220
00:17:55,860 --> 00:17:59,860
And if you just go to peps.python.org, you come to the index of all the PEPs.

221
00:17:59,860 --> 00:18:05,860
And we can kind of scroll down and see that there's a lot of documentation here.

222
00:18:05,860 --> 00:18:09,860
The PEP 8 that you may have heard about is here, the style guide for Python Guide.

223
00:18:09,860 --> 00:18:15,860
And this is definitely one of the more readable PEPs that really goes into some of the more ways that we agree

224
00:18:18,860 --> 00:18:24,860
that we should write Python to make it Pythonic.

225
00:18:24,860 --> 00:18:30,860
What I've also done since I've been reading quite a lot of these when I'm creating tutorials,

226
00:18:30,860 --> 00:18:34,860
I've also created a small Python package called PEP docs.

227
00:18:34,860 --> 00:18:39,860
And this provides the PEP command which makes it easier to just download these PEPs.

228
00:18:39,860 --> 00:18:46,860
So if I go into a terminal like this, I can also just type PEP 8 and we see, okay, something happened here at least.

229
00:18:46,860 --> 00:18:53,860
So let me just pipe this into less. And we can see that this is the same document that we saw.

230
00:18:53,860 --> 00:18:56,860
So here we have the same introduction and these kind of things.

231
00:18:56,860 --> 00:19:01,860
But now I have it in a terminal so I can start to play with things in the terminal.

232
00:19:01,860 --> 00:19:04,860
Additionally, there's a few more things I can do here.

233
00:19:04,860 --> 00:19:12,860
So if I look at the help, we can see that I can also actually open this web page quite easily just by typing minus W.

234
00:19:12,860 --> 00:19:18,860
It pops up. So if I don't want to go to the browser and actually play around with this,

235
00:19:18,860 --> 00:19:22,860
I can also convert this to markdown.

236
00:19:22,860 --> 00:19:28,860
So the format of PEPs is that they're in REST format, Restructured Text.

237
00:19:28,860 --> 00:19:35,860
But sometimes markdown is easier to work with for many tools.

238
00:19:35,860 --> 00:19:40,860
So for instance, now I open a different PEP. This is PEP 13 about how the language is governed.

239
00:19:40,860 --> 00:19:44,860
It talks about the steering council which we'll also get to see afterwards.

240
00:19:45,860 --> 00:19:49,860
But I can now also then save this to a file.

241
00:19:49,860 --> 00:19:55,860
Now I have it here and I can for instance use the nice rich project to just look at this.

242
00:19:55,860 --> 00:20:01,860
Let's see, page. And we have a much more nicely formatted markdown here.

243
00:20:01,860 --> 00:20:05,860
So yeah, thank you, Rich.

244
00:20:05,860 --> 00:20:11,860
And also I can then use something like, let's say, PEN.

245
00:20:11,860 --> 00:20:15,860
Let's see, we need the markdown. PANDOCK to convert this directly to PDF.

246
00:20:15,860 --> 00:20:19,860
So if I now do PEP 657 PDF.

247
00:20:19,860 --> 00:20:27,860
I now have a PDF file of this. So I can read this nicely like this.

248
00:20:27,860 --> 00:20:31,860
And one of the cool things with the PEPs is that they have, as I mentioned,

249
00:20:31,860 --> 00:20:34,860
these discussions about how the features are implemented.

250
00:20:34,860 --> 00:20:37,860
So if I go to the motivation, I can see why was this feature included.

251
00:20:37,860 --> 00:20:41,860
And some of the more interesting discussions are within the rejected ideas,

252
00:20:41,860 --> 00:20:45,860
what things were not included and why were they rejected from the PEPs.

253
00:20:45,860 --> 00:20:55,860
Okay, so just to sum up a little bit, PEPs, they're fantastic to read if you want to figure out

254
00:20:55,860 --> 00:20:57,860
why some features are designed as they are.

255
00:20:57,860 --> 00:21:02,860
PEPs are not tutorials. There are a few exceptions to this.

256
00:21:02,860 --> 00:21:07,860
PEP 636, for instance, is a great tutorial on the pattern matching thing.

257
00:21:07,860 --> 00:21:11,860
But there are usually better ways if you're looking to learn how to use a feature.

258
00:21:11,860 --> 00:21:14,860
Then you should go out and look for the tutorials.

259
00:21:14,860 --> 00:21:17,860
But in general, PEPs are fun to read.

260
00:21:17,860 --> 00:21:22,860
So, yeah, thank you so much. And this is me. Thanks.

261
00:21:22,860 --> 00:21:31,860
Awesome. Thank you so much for that. Up next we have Jonathan.

262
00:21:31,860 --> 00:21:37,860
Hello. So I'm Jonathan. I like to build fun things.

263
00:21:37,860 --> 00:21:40,860
Not all of those things are useful.

264
00:21:40,860 --> 00:21:45,860
This talk will be about a fun thing. I don't know if it's going to be useful.

265
00:21:45,860 --> 00:21:49,860
So many of us use PIP. I don't know if everyone knows,

266
00:21:49,860 --> 00:21:53,860
but apparently PIP is also a backronym for PIP installs packages,

267
00:21:53,860 --> 00:21:56,860
which got me thinking, what exactly is a package?

268
00:21:56,860 --> 00:22:00,860
I mean, we know of source distributions. We know of wheels.

269
00:22:00,860 --> 00:22:03,860
If we've been around a while, maybe we've heard of eggs.

270
00:22:03,860 --> 00:22:09,860
But I was at a talk yesterday, I think, and they mentioned that you can put

271
00:22:09,860 --> 00:22:12,860
a command line tool inside of a package.

272
00:22:12,860 --> 00:22:16,860
And it was a compiled binary. It was Clang format.

273
00:22:16,860 --> 00:22:20,860
So we can put command line tools. So I thought, well, how about C Python?

274
00:22:20,860 --> 00:22:24,860
Could we put that in a package? Specifically, could we put that in a wheel?

275
00:22:24,860 --> 00:22:28,860
In which case then PIP wouldn't be PIP install packages.

276
00:22:28,860 --> 00:22:31,860
It would be PIP install Python.

277
00:22:31,860 --> 00:22:34,860
So we're going to do a demo. I want to say that there's no shenanigans here.

278
00:22:34,860 --> 00:22:38,860
This is actually like, okay, there's a little shenanigans,

279
00:22:38,860 --> 00:22:43,860
but only because I didn't want to rely on the conference Wi-Fi.

280
00:22:43,860 --> 00:22:46,860
And nobody wanted to see something download for two minutes.

281
00:22:46,860 --> 00:22:49,860
But you can follow along. You have to be on Linux.

282
00:22:49,860 --> 00:22:52,860
I just thought of this yesterday, so I didn't have time to build everything.

283
00:22:52,860 --> 00:22:55,860
So let's go to a terminal.

284
00:22:55,860 --> 00:22:59,860
So this is the Python 3.7 slim image.

285
00:22:59,860 --> 00:23:04,860
So we have Python. It's an older version.

286
00:23:04,860 --> 00:23:07,860
We can't use the walrus operator.

287
00:23:07,860 --> 00:23:11,860
So let's just PIP install. Unfortunately, someone's already taken the name

288
00:23:11,860 --> 00:23:16,860
C Python, and Python is like locked. You can't give it.

289
00:23:16,860 --> 00:23:21,860
So I said, give me Python. Give me Python.

290
00:23:21,860 --> 00:23:31,860
And we're going to want a version that is, let's say, compatible with 3.9.0.

291
00:23:31,860 --> 00:23:40,860
Yeah, that's not going to work. We need an equal sign.

292
00:23:40,860 --> 00:23:43,860
So this is going to be used to cache wheel. It would download,

293
00:23:43,860 --> 00:23:46,860
but it takes like two minutes to download, so nobody wants to see that.

294
00:23:46,860 --> 00:23:49,860
This is a real wheel. It's Mini Linux 2014.

295
00:23:49,860 --> 00:23:52,860
It actually passes the Mini Linux 14 standard.

296
00:23:52,860 --> 00:23:55,860
It's run through audit wheel.

297
00:23:55,860 --> 00:24:01,860
That said, it does vendor a whole bunch of shared libraries.

298
00:24:01,860 --> 00:24:05,860
And this could be done for other operating systems.

299
00:24:05,860 --> 00:24:09,860
Unfortunately, this is the boring part where we all sit and wait for PIP

300
00:24:09,860 --> 00:24:12,860
to do some things and install a whole lot of files.

301
00:24:12,860 --> 00:24:18,860
And we also see that I'm running as root. I'm sorry. YOLO.

302
00:24:18,860 --> 00:24:25,860
So now, of course, we have Python now 3.9.12, but we're not going to call it

303
00:24:25,860 --> 00:24:29,860
Python 3.9 because that might shadow your system Python.

304
00:24:29,860 --> 00:24:38,860
So it's going to be GM for give me Python 3.9. It works.

305
00:24:38,860 --> 00:24:43,860
You can do things. It has shared libraries.

306
00:24:43,860 --> 00:24:47,860
So what? So we installed CPython by PIP.

307
00:24:47,860 --> 00:24:52,860
Of course, could we install packages in that PIP as well?

308
00:24:52,860 --> 00:24:57,860
Like, could we do Python inside Python inside Python?

309
00:24:57,860 --> 00:25:03,860
So let's try it. So we need to do GM Python.

310
00:25:03,860 --> 00:25:13,860
We're going to run PIP and we're going to install give me Python.

311
00:25:13,860 --> 00:25:16,860
So this will work. It takes a while.

312
00:25:16,860 --> 00:25:25,860
And oh, I need to say install. Yes, that would be helpful.

313
00:25:25,860 --> 00:25:31,860
So this will go and fetch Python 3.10. It's going to take a while.

314
00:25:31,860 --> 00:25:34,860
So I'm going to skip over to this one that already has this installed.

315
00:25:34,860 --> 00:25:37,860
Unfortunately, you don't get a command line shell.

316
00:25:37,860 --> 00:25:40,860
Because this is inside another Python, it doesn't work.

317
00:25:40,860 --> 00:25:50,860
But we can just run the module. And now we have free time.

318
00:25:50,860 --> 00:25:58,860
All right. Thank you.

319
00:25:58,860 --> 00:26:02,860
Oh, that's it. All right. That is awesome.

320
00:26:02,860 --> 00:26:05,860
I'm waiting for the inevitable future when just everything is on PIP.

321
00:26:05,860 --> 00:26:07,860
Yeah, it's going to be great. All right.

322
00:26:07,860 --> 00:26:11,860
Next up we have Jelle talking to us about PEP 6.88.

323
00:26:11,860 --> 00:26:16,860
Let's give him a round of applause.

324
00:26:16,860 --> 00:26:18,860
Good morning. I'm Jelle Zellstra.

325
00:26:18,860 --> 00:26:21,860
I'm a Python core developer interested in static typing.

326
00:26:21,860 --> 00:26:24,860
And I'm here today to talk about the buffer protocol.

327
00:26:24,860 --> 00:26:30,860
The buffer protocol is a way for type implement in C to allow access to the raw bytes inside the representation.

328
00:26:30,860 --> 00:26:39,860
Like you can use it as a bytes object, a numpy array, but not, for example, a string, which isn't a raw array of bytes under the hood.

329
00:26:39,860 --> 00:26:41,860
But I told you I'm interested in typing.

330
00:26:41,860 --> 00:26:45,860
So when I write a function like this, I want to put type annotations.

331
00:26:45,860 --> 00:26:49,860
And the problem here is I don't have anything to put in those question marks.

332
00:26:49,860 --> 00:26:54,860
There's no way in Python right now to say any buffer type.

333
00:26:54,860 --> 00:26:58,860
So I want to fix that. And I wrote a PEP for it, PEP 6.88.

334
00:26:58,860 --> 00:27:08,860
And the first version that I wrote, which is now up on the PEP's websites, adds this new buffer type that you can implement in C.

335
00:27:08,860 --> 00:27:13,860
It has a subclass implementation that just checks whether the buffer protocol is implemented.

336
00:27:13,860 --> 00:27:18,860
So you can check that the bytes object is a buffer, a numpy array is a buffer,

337
00:27:18,860 --> 00:27:23,860
a string object is not a buffer. And it works fine for the function that I showed.

338
00:27:23,860 --> 00:27:29,860
But there's a problem. What if I want something more than just the buffer protocol?

339
00:27:29,860 --> 00:27:35,860
Like I want to also have a buffer that provides a length, which is a pretty common thing to have for a buffer,

340
00:27:35,860 --> 00:27:39,860
because inherently it's a collection of bytes, so it has a length.

341
00:27:39,860 --> 00:27:45,860
But in a type system, there's no way to say you want both a concrete class, like buffer is right now,

342
00:27:45,860 --> 00:27:52,860
but also a protocol, like sized. So I have another problem. I still can't write the types that I want to write.

343
00:27:52,860 --> 00:27:57,860
And I don't know how to fix that yet, so I'm going to show some ideas,

344
00:27:57,860 --> 00:28:03,860
and I would like to hear from people who have feedback on these, what they think the right solution is.

345
00:28:03,860 --> 00:28:08,860
One thing I thought of is to actually make it possible to implement a buffer protocol in Python

346
00:28:08,860 --> 00:28:13,860
by adding a DunderBuffer method that you could just implement in your own types too.

347
00:28:13,860 --> 00:28:17,860
The nice thing about this is that PyPy actually has the same thing already.

348
00:28:17,860 --> 00:28:22,860
I guess they need that, because in PyPy everything is Python, so you have to implement this in Python.

349
00:28:22,860 --> 00:28:26,860
It's also nice that this is useful outside of static typing potentially.

350
00:28:26,860 --> 00:28:30,860
But it's also a lot more complicated in just adding support for typing,

351
00:28:30,860 --> 00:28:34,860
because it changes the runtime representation of buffer types.

352
00:28:34,860 --> 00:28:41,860
And in the C protocol, there's this slot for releasing a buffer, and I don't know how I would represent that in Python.

353
00:28:42,860 --> 00:28:46,860
So there's also a simpler idea. We could just add a DunderBuffer flag to these types.

354
00:28:46,860 --> 00:28:50,860
You set it to true if it's a buffer, and if it's not a buffer, it's not there.

355
00:28:50,860 --> 00:28:56,860
It's a lot simpler, but it doesn't really feel like other Dunder attributes,

356
00:28:56,860 --> 00:28:58,860
because there's nothing else that really works this way.

357
00:28:58,860 --> 00:29:03,860
It also makes it pretty easy for types to lie about being buffers, which I don't like.

358
00:29:06,860 --> 00:29:10,860
So yeah, if you have any feedback on which of those approaches would work well,

359
00:29:10,860 --> 00:29:14,860
I'd love to hear about it. Come find me during the rest of the conference,

360
00:29:14,860 --> 00:29:20,860
or talk about it on discuss.python.org, or just email me. Thank you.

361
00:29:28,860 --> 00:29:31,860
Excellent. And up next we have Nick.

362
00:29:31,860 --> 00:29:34,860
All right. Good morning, PyCon.

363
00:29:34,860 --> 00:29:40,860
So today I'm going to be talking about post-pandemic meetup and an organizer's dilemma.

364
00:29:42,860 --> 00:29:47,860
So my name is Nick Mo. I am the CleePy meetup organizer.

365
00:29:47,860 --> 00:29:50,860
So that's the Cleveland Py... Yes, thank you.

366
00:29:50,860 --> 00:29:56,860
Cleveland Python Meetup group, and I work as a data scientist at Trimble Transportation.

367
00:29:56,860 --> 00:29:58,860
You can see my little logo at the bottom.

368
00:29:58,860 --> 00:30:05,860
So the last CleePy meetup was two years ago, March 9, 2020.

369
00:30:05,860 --> 00:30:11,860
I have a little picture here. It was an amazing day, filled with pizza, laughs,

370
00:30:11,860 --> 00:30:15,860
and so the occasional, does anybody have a dungle here?

371
00:30:15,860 --> 00:30:17,860
That was the occasional thing, right?

372
00:30:17,860 --> 00:30:22,860
But as you all well know, I'm a big fan of the CleePy meetup.

373
00:30:22,860 --> 00:30:27,860
The pandemic has changed everything. So what has happened since then?

374
00:30:27,860 --> 00:30:32,860
We had to go virtual, right? And everybody was like, virtual meetings?

375
00:30:32,860 --> 00:30:40,860
Ooh, yay. Right? So there was a lot of uncertainty about that.

376
00:30:40,860 --> 00:30:41,860
So how did this affect us?

377
00:30:41,860 --> 00:30:44,860
As I said, once we shared the news with the community,

378
00:30:44,860 --> 00:30:46,860
it was like, oh, I'm going to go virtual.

379
00:30:46,860 --> 00:30:51,860
So there was this dilemma about how can we get them engaged?

380
00:30:51,860 --> 00:30:55,860
So as I said, there was a lot of uncertainty.

381
00:30:55,860 --> 00:30:59,860
CleePy seemed to last people think about the pandemic was going on.

382
00:30:59,860 --> 00:31:00,860
There were so many things going on.

383
00:31:00,860 --> 00:31:04,860
There was so much uncertainty about what was going on in the world.

384
00:31:04,860 --> 00:31:07,860
Figuring out a way to engage the community,

385
00:31:07,860 --> 00:31:09,860
figuring out how to engage the community,

386
00:31:09,860 --> 00:31:11,860
figuring out how to engage the community,

387
00:31:11,860 --> 00:31:13,860
figuring out how to engage the community,

388
00:31:14,860 --> 00:31:18,860
figuring out a way to engage with the community was tricky.

389
00:31:18,860 --> 00:31:22,860
The best way to get them excited about going back to virtual meetings

390
00:31:22,860 --> 00:31:26,860
after being in countless meetings at work all day.

391
00:31:26,860 --> 00:31:29,860
Finding people to give talks, you would think, would be easier.

392
00:31:29,860 --> 00:31:31,860
It's a virtual meeting, less pressure in person.

393
00:31:31,860 --> 00:31:35,860
No, it's not as easy.

394
00:31:35,860 --> 00:31:39,860
And overall, personally for me as one of the co-organizers,

395
00:31:39,860 --> 00:31:44,860
it was pretty taxing having to deal with my life work

396
00:31:44,860 --> 00:31:49,860
and worrying about how to get our community back together and still strong.

397
00:31:49,860 --> 00:31:53,860
So how did CleePy fair throughout the pandemic?

398
00:31:53,860 --> 00:31:56,860
Well, I think we crushed it, right?

399
00:31:56,860 --> 00:32:01,860
We've had 21 very successful virtual meetups since our last in-person meetup.

400
00:32:01,860 --> 00:32:02,860
What does it mean?

401
00:32:02,860 --> 00:32:05,860
For the last two years, 2020, 2021,

402
00:32:05,860 --> 00:32:11,860
we've had a virtual meetup every second Monday of the month, nonstop.

403
00:32:11,860 --> 00:32:16,860
The community has been amazing and the turnout has been super encouraging.

404
00:32:16,860 --> 00:32:20,860
Honestly, there were days where I felt like we had to cancel it

405
00:32:20,860 --> 00:32:21,860
because I don't know what to do.

406
00:32:21,860 --> 00:32:25,860
But you can see here a couple of pictures we have here about all our virtual meetups.

407
00:32:25,860 --> 00:32:28,860
So it was really encouraging and really wonderful.

408
00:32:28,860 --> 00:32:30,860
I loved it.

409
00:32:30,860 --> 00:32:34,860
So what's the goal for 2022?

410
00:32:34,860 --> 00:32:37,860
In-person CleePy meetups again.

411
00:32:37,860 --> 00:32:40,860
That's the goal for 2022.

412
00:32:40,860 --> 00:32:43,860
And thanks to my company, Trimble,

413
00:32:43,860 --> 00:32:48,860
they are going to be sponsoring us and giving us a venue and feeding us too.

414
00:32:48,860 --> 00:32:51,860
So we're really excited about that.

415
00:32:51,860 --> 00:32:57,860
So if you're in Cleveland, please come to CleePy every second Monday of the month.

416
00:32:57,860 --> 00:33:00,860
You can see our next one is on May 9th.

417
00:33:00,860 --> 00:33:02,860
So if you're in the Cleveland area, please come by.

418
00:33:02,860 --> 00:33:06,860
You can see that's our Twitter handle and that's my Twitter handle,

419
00:33:06,860 --> 00:33:08,860
at Spirx on Twitter.

420
00:33:08,860 --> 00:33:10,860
Thank you so much.

421
00:33:10,860 --> 00:33:11,860
Thank you, CleePy.

422
00:33:11,860 --> 00:33:14,860
If you guys are watching this, I love you guys so much.

423
00:33:14,860 --> 00:33:16,860
Thank you, PyCon.

424
00:33:16,860 --> 00:33:17,860
All right. Have a nice day.

425
00:33:23,860 --> 00:33:24,860
Awesome.

426
00:33:24,860 --> 00:33:30,860
And next up, we're going to hear from Dustin about what is it going to be about?

427
00:33:30,860 --> 00:33:33,860
Next up, we have a parade of regional conferences.

428
00:33:33,860 --> 00:33:37,860
So I'm going to ask the organizers to come over here by the side.

429
00:33:37,860 --> 00:33:43,860
So we're going to go through just some excitingly upcoming recent and,

430
00:33:43,860 --> 00:33:47,860
sorry, regional conferences that are going to be happening in the next year.

431
00:33:47,860 --> 00:33:51,860
So if you like PyCon, maybe there's a conference happening near you.

432
00:33:51,860 --> 00:33:53,860
And let's see, where's Chook?

433
00:33:57,860 --> 00:33:58,860
All right.

434
00:33:58,860 --> 00:34:00,860
Let's give all the regional conferences a round of applause,

435
00:34:00,860 --> 00:34:02,860
and they're going to tell you why you should come.

436
00:34:05,860 --> 00:34:06,860
You first.

437
00:34:11,860 --> 00:34:12,860
You know, EuroPython.

438
00:34:12,860 --> 00:34:16,860
So, yeah, EuroPython is in July.

439
00:34:16,860 --> 00:34:21,860
I would say that the best PyCon in Europe will be EuroPython.

440
00:34:21,860 --> 00:34:23,860
The second one will be maybe PyCon Italy.

441
00:34:24,860 --> 00:34:27,860
Yeah, so it's like very similar format.

442
00:34:27,860 --> 00:34:30,860
Who really enjoy PyCon here this week?

443
00:34:30,860 --> 00:34:33,860
So, yeah, it will be very similar.

444
00:34:33,860 --> 00:34:34,860
We also have tutorial.

445
00:34:34,860 --> 00:34:38,860
We have conference talk for three days, and then we will have sprint.

446
00:34:38,860 --> 00:34:41,860
So also we have PyDataTrack for those data folks.

447
00:34:41,860 --> 00:34:43,860
You will find something that you like there.

448
00:34:43,860 --> 00:34:45,860
And also we have a lot of Guinness.

449
00:34:45,860 --> 00:34:47,860
I think that will be the main difference.

450
00:34:47,860 --> 00:34:49,860
So if you really like PyCon,

451
00:34:49,860 --> 00:34:54,860
if you really want to have another week-long conference at maybe somewhere closer or further,

452
00:34:54,860 --> 00:34:56,860
I don't know, then yeah, please come.

453
00:34:56,860 --> 00:34:58,860
So, yeah, I think that's it.

454
00:35:16,860 --> 00:35:17,860
Looking for my notes.

455
00:35:17,860 --> 00:35:18,860
Okay.

456
00:35:18,860 --> 00:35:19,860
Hi.

457
00:35:19,860 --> 00:35:25,860
My name is Phoebe Polk, and I'm here to invite you to join me and many other Python people

458
00:35:25,860 --> 00:35:29,860
in beautiful Mission Bay, San Francisco, on Saturday, September 10th.

459
00:35:29,860 --> 00:35:33,860
It is a one-day outdoor Python conference in the park.

460
00:35:33,860 --> 00:35:37,860
Tickets are on sale now at our website, pybay.com.

461
00:35:37,860 --> 00:35:39,860
Call for proposals are open.

462
00:35:39,860 --> 00:35:45,860
Please submit a talk before June 3rd, and I hope to see you again very soon at PyDay.

463
00:35:45,860 --> 00:35:46,860
Thank you.

464
00:35:47,860 --> 00:35:48,860
Thank you.

465
00:35:59,860 --> 00:36:00,860
Hi.

466
00:36:00,860 --> 00:36:01,860
I'm Yoshida.

467
00:36:01,860 --> 00:36:03,860
And I'm P. Kok.

468
00:36:03,860 --> 00:36:08,860
We are co-vice chair of PyCon JP 2022 from Japan.

469
00:36:08,860 --> 00:36:12,860
PyCon JP is the largest conference in Japan.

470
00:36:12,860 --> 00:36:16,860
This year, PyCon JP will be held in mid-October.

471
00:36:16,860 --> 00:36:21,860
The CFP application will be start next Monday, 9th of May.

472
00:36:21,860 --> 00:36:23,860
You can also make a talk online.

473
00:36:23,860 --> 00:36:29,860
The sponsor application will be start also this month.

474
00:36:29,860 --> 00:36:35,860
You can appeal to Python users with the largest PyCon in Japan.

475
00:36:35,860 --> 00:36:42,860
We will inform you of the latest information on our blog, Twitter and Facebook.

476
00:36:42,860 --> 00:36:47,860
For more information, please visit 2022.pycon.jp.

477
00:36:47,860 --> 00:36:49,860
Please join us.

478
00:36:59,860 --> 00:37:00,860
Thanks.

479
00:37:00,860 --> 00:37:03,860
I'm the only one from Taiwan, as far as I know, in this conference.

480
00:37:03,860 --> 00:37:09,860
So if you're by chance also from Taiwan, please contact me in this last set of conferences.

481
00:37:09,860 --> 00:37:17,860
So Taiwan is hosting the PyCon APEC this year, 2022 on September 3rd and 4th.

482
00:37:17,860 --> 00:37:24,860
And it's unfortunately a virtual conference because we still have very strict travel restrictions.

483
00:37:24,860 --> 00:37:26,860
Code for proposal, unfortunately, has ended.

484
00:37:26,860 --> 00:37:29,860
If you have already proposed, I hope you get selected.

485
00:37:29,860 --> 00:37:33,860
I don't make that decision, so good luck.

486
00:37:34,860 --> 00:37:42,860
Also code for sponsors, obviously we are representing the talent group in Asia in the APEC area.

487
00:37:42,860 --> 00:37:46,860
So you have access to the best talents in the world.

488
00:37:46,860 --> 00:37:48,860
Takes it on sale now.

489
00:37:48,860 --> 00:37:50,860
Right now it's early bird.

490
00:37:50,860 --> 00:37:52,860
I think there are some late bird and some corporate selections.

491
00:37:52,860 --> 00:37:55,860
Please come join us online and meet us all.

492
00:37:55,860 --> 00:37:57,860
Thank you.

493
00:38:03,860 --> 00:38:05,860
Hello everyone, I'm Patrick.

494
00:38:05,860 --> 00:38:10,860
I just wanted to invite you to PyCon Italy, which is going to be next month in Florence.

495
00:38:10,860 --> 00:38:12,860
It's going to be really nice.

496
00:38:12,860 --> 00:38:13,860
We have awesome keynoters.

497
00:38:13,860 --> 00:38:18,860
We have a PyData truck, we have a web truck, and lots of interesting social events.

498
00:38:18,860 --> 00:38:24,860
And if you cannot join, because I know it's in a month, we also have an online version, which is going to be free,

499
00:38:24,860 --> 00:38:26,860
which should probably be announced out soon.

500
00:38:26,860 --> 00:38:27,860
Thank you.

501
00:38:27,860 --> 00:38:29,860
Hope to see you there.

502
00:38:33,860 --> 00:38:38,860
Good morning.

503
00:38:38,860 --> 00:38:43,860
We are here to invite you to go to Python Brazil this year.

504
00:38:43,860 --> 00:38:54,860
It will be between 70 and 23 October in Manaus in Amazon Forest Zone.

505
00:38:54,860 --> 00:39:04,860
And we will see talks in Portuguese and Spanish, roundtables, sprint, tutorial, lightning talks, open space, job fairs,

506
00:39:04,860 --> 00:39:12,860
and all activities have signal language.

507
00:39:12,860 --> 00:39:20,860
It will be an online and in-person event, and there is a kid space.

508
00:39:20,860 --> 00:39:24,860
We are also going to have the PyLadies Brazil conference.

509
00:39:24,860 --> 00:39:29,860
We always have every year during Python Brazil, so I would like to invite every PyLadies to go to.

510
00:39:29,860 --> 00:39:32,860
And I hope I can see you there this year.

511
00:39:32,860 --> 00:39:37,860
Thank you.

