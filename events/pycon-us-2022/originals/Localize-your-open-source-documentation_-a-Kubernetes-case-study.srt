1
00:00:00,000 --> 00:00:08,160
Hello everyone.

2
00:00:08,160 --> 00:00:09,880
Welcome back.

3
00:00:09,880 --> 00:00:19,360
So we have our first talk in the evening by Zachary Sala Corleason on Localize Your Open

4
00:00:20,360 --> 00:00:23,360
Source Documentation, a Kubernetes case study.

5
00:00:23,360 --> 00:00:30,360
Over to you, Zach.

6
00:00:30,360 --> 00:00:33,000
Hello.

7
00:00:33,000 --> 00:00:40,000
So as advertised, this talk is about localizing documentation for open source projects based

8
00:00:40,000 --> 00:00:44,560
on the experience of localizing Kubernetes documentation.

9
00:00:44,560 --> 00:00:51,240
My goal today is to encourage you to localize your project's documentation.

10
00:00:51,240 --> 00:00:56,120
I will do that by sharing advice based on what the Kubernetes project has learned about

11
00:00:56,120 --> 00:00:59,680
localization in our own documentation set.

12
00:00:59,680 --> 00:01:05,160
I have given previous versions of this talk that focus on different aspects of the Kubernetes

13
00:01:05,160 --> 00:01:06,320
experience.

14
00:01:06,320 --> 00:01:11,440
If you are interested in research and tooling, I recommend watching my talk at FASDEM in

15
00:01:11,440 --> 00:01:15,380
2019 titled Multilingual Kubernetes.

16
00:01:15,380 --> 00:01:20,760
If you are more interested in site analytics relating to localization, I recommend watching

17
00:01:20,760 --> 00:01:30,280
my talk at Write the Docs EU in Prague also in 2019 titled Found in Translation.

18
00:01:30,280 --> 00:01:32,860
So who am I and why am I up here talking to you about all this?

19
00:01:32,860 --> 00:01:35,000
My name is Zach or Sarah.

20
00:01:35,000 --> 00:01:37,880
My pronouns are they, them or she, her.

21
00:01:37,880 --> 00:01:41,240
Feel free to use my names and pronouns interchangeably.

22
00:01:41,240 --> 00:01:46,520
I am currently a staff technical writer at Stripe, previously at the Linux Foundation.

23
00:01:46,520 --> 00:01:52,440
And I served as chair for Kubernetes documentation from 2017 to 2021.

24
00:01:52,440 --> 00:01:56,920
And I'm still an approver for the documentation in the Kubernetes project.

25
00:01:56,920 --> 00:02:03,120
And I'm also here because one of the maintainers of the NumPy library invited me to submit

26
00:02:03,120 --> 00:02:07,520
this talk and I said, sure.

27
00:02:07,520 --> 00:02:09,720
So what is localization?

28
00:02:09,720 --> 00:02:17,780
To paraphrase the W3C definition, localization is the adaptation of documentation to meet

29
00:02:17,780 --> 00:02:23,880
the language, cultural and other requirements of a specific target market.

30
00:02:23,880 --> 00:02:29,760
This definition, I like it because it highlights that localization is more than translation.

31
00:02:29,760 --> 00:02:35,440
And when I first started learning about localization for Kubernetes, I wondered why isn't machine

32
00:02:35,440 --> 00:02:36,840
translation good enough?

33
00:02:36,840 --> 00:02:40,200
Why can't I just plug all of this into Google Translate and have it work?

34
00:02:40,200 --> 00:02:45,280
And the short answer is that while machine translators are powerful tools, they often

35
00:02:45,280 --> 00:02:50,560
return translations that lack linguistic and cultural relevance.

36
00:02:50,560 --> 00:02:56,280
So in this talk, I'm going to speak to you as if you are all project maintainers, but

37
00:02:56,280 --> 00:03:05,200
this talk is for contributors in any role of an open source project.

38
00:03:05,200 --> 00:03:12,440
So TLDR this talk, I absolutely believe that most open source projects can and should localize

39
00:03:12,440 --> 00:03:14,360
their documentation.

40
00:03:14,360 --> 00:03:21,160
And while localization does require some effort, the rewards greatly exceed the work required

41
00:03:21,160 --> 00:03:25,120
to do it.

42
00:03:25,120 --> 00:03:32,640
So here I say expensive and costly to differentiate between two different things.

43
00:03:32,640 --> 00:03:35,920
Localization doesn't have to be expensive or costly.

44
00:03:35,920 --> 00:03:41,520
And by expensive, I mean the financial expense of localization tools, tool subscriptions,

45
00:03:41,520 --> 00:03:43,040
things like that.

46
00:03:43,040 --> 00:03:45,240
It doesn't have to be expensive.

47
00:03:45,240 --> 00:03:51,480
And by cost, it doesn't have to be costly.

48
00:03:51,480 --> 00:03:57,360
I mean the cost of attention and labor in projects where maintainers already struggle

49
00:03:57,360 --> 00:03:59,780
with the burden of maintenance in the project.

50
00:03:59,780 --> 00:04:04,860
So localization doesn't have to cost you a lot of money or impose a significant burden

51
00:04:04,860 --> 00:04:08,140
of labor.

52
00:04:08,140 --> 00:04:10,340
That said, localization does require maintenance.

53
00:04:10,340 --> 00:04:15,780
It requires maintenance to do and then some maintenance to upkeep.

54
00:04:15,780 --> 00:04:20,740
And for localization to be sustainable in open source projects, that means choosing

55
00:04:20,740 --> 00:04:23,860
our maintenance wisely.

56
00:04:24,860 --> 00:04:31,100
And I said on a previous slide that the benefits of localization are greater than additive.

57
00:04:31,100 --> 00:04:33,820
When you localize, you get more back than you put in.

58
00:04:33,820 --> 00:04:40,220
And one way in which localization benefits projects is that when localization...

59
00:04:40,220 --> 00:04:43,600
Sorry.

60
00:04:43,600 --> 00:04:50,900
My time has me hurrying along and I'm just going to stop that.

61
00:04:53,860 --> 00:05:03,860
So one way in which localization benefits projects is that when projects localize,

62
00:05:03,860 --> 00:05:08,980
they usually attract a new set of maintainers, new contributors and new maintainers.

63
00:05:08,980 --> 00:05:14,580
So when you localize, you open the door for more people to become contributors and maintainers

64
00:05:14,580 --> 00:05:18,680
to your project.

65
00:05:18,680 --> 00:05:25,640
So with the need for selective maintenance in mind, based on what we've learned in Kubernetes,

66
00:05:25,640 --> 00:05:30,440
some of these things we've learned the hard way, here is some advice about how to localize

67
00:05:30,440 --> 00:05:37,520
and scale your project while minimizing the amount of required maintenance.

68
00:05:37,520 --> 00:05:43,520
This is probably the single greatest factor to being able to scale localization in Kubernetes

69
00:05:43,520 --> 00:05:44,520
docs.

70
00:05:44,920 --> 00:05:49,240
Be indifferent to the origins of localized content.

71
00:05:49,240 --> 00:05:54,320
Don't care where it comes from before it shows up in a pull request.

72
00:05:54,320 --> 00:06:01,880
And this applied indifference is one of the keys to sustainable maintenance.

73
00:06:01,880 --> 00:06:07,360
There are some reasons to be indifferent to localized content before it shows up as a

74
00:06:07,360 --> 00:06:10,080
pull request in your repository.

75
00:06:10,080 --> 00:06:14,080
And one of those reasons is that different tools work better for different teams.

76
00:06:14,080 --> 00:06:17,480
There are a host of tools out there.

77
00:06:17,480 --> 00:06:23,560
TransFx, CrowdIn, Google Translate, your time and attention as a maintainer gaining expertise

78
00:06:23,560 --> 00:06:27,560
in these tools and then trying to support them for multiple localizations that doesn't

79
00:06:27,560 --> 00:06:32,920
scale and your attention and time are not valuable when you try to support these things.

80
00:06:32,920 --> 00:06:40,040
So applied indifference is one of those things that saves you maintenance.

81
00:06:40,080 --> 00:06:46,000
And every team has tools and processes that are going to work better for them.

82
00:06:46,000 --> 00:06:51,480
And that kind of non-standardization is healthy, but it also means that you as a maintainer

83
00:06:51,480 --> 00:06:59,520
have to be selective with how much attention you put into the origin of localized content.

84
00:06:59,520 --> 00:07:05,240
One of the benefits of this as well is that it is somewhat tool-proof.

85
00:07:05,240 --> 00:07:09,800
If machine translation somehow becomes the perfect localization tool tomorrow, you're

86
00:07:09,800 --> 00:07:13,640
already prepared because you already don't care.

87
00:07:13,640 --> 00:07:19,600
That said, once localized content does arrive in a pull request to your repository, you

88
00:07:19,600 --> 00:07:24,240
must care deeply about how it's reviewed and approved.

89
00:07:24,240 --> 00:07:30,760
So here are some tips for a good, strict review process.

90
00:07:30,760 --> 00:07:33,200
Don't allow authors to approve their own pull requests.

91
00:07:33,200 --> 00:07:35,000
This is seldom a good practice.

92
00:07:35,000 --> 00:07:39,360
It's especially not a good practice in localization.

93
00:07:39,360 --> 00:07:42,240
Require a review process.

94
00:07:42,240 --> 00:07:50,440
And in addition to requiring reviews, it's good to limit who can review localized content.

95
00:07:50,440 --> 00:07:55,440
I highly recommend requiring reviewers to have native or equivalent fluency with the

96
00:07:55,440 --> 00:07:57,200
content they review.

97
00:07:57,200 --> 00:07:59,040
I have zero fluency in Mandarin.

98
00:07:59,040 --> 00:08:03,940
I do not approve Mandarin language content for Kubernetes documentation.

99
00:08:04,940 --> 00:08:07,220
I know that strict reviews are required.

100
00:08:07,220 --> 00:08:13,940
I know that content, when it is approved, meets the standard of quality, that it is

101
00:08:13,940 --> 00:08:19,340
legible and meaningful to the people who consume that content.

102
00:08:19,340 --> 00:08:25,460
So establish a canonical source language and branch.

103
00:08:25,460 --> 00:08:29,700
A canonical language and branch are useful for the same reason that upstream Git remotes

104
00:08:29,700 --> 00:08:30,980
are useful.

105
00:08:31,020 --> 00:08:34,980
A canonical source language and branch helps your project scale.

106
00:08:34,980 --> 00:08:39,660
It means that localization teams are working from the same understood source.

107
00:08:39,660 --> 00:08:42,700
And it's an efficiency piece.

108
00:08:42,700 --> 00:08:49,100
I recommend matching your canonical source language to the primary language of your contributors

109
00:08:49,100 --> 00:08:52,780
and matching your canonical branch to the project's published branch.

110
00:08:52,780 --> 00:08:58,420
Whatever branch it is that you publish to the website, use that as your canonical branch.

111
00:08:58,420 --> 00:09:02,260
For Kubernetes, English is the canonical source because it's the primary working

112
00:09:02,260 --> 00:09:08,460
language for the majority of contributors, both to documentation and to feature development.

113
00:09:08,460 --> 00:09:13,580
Main is the canonical branch in Git because it's the most current version of docs published

114
00:09:13,580 --> 00:09:14,740
on the website.

115
00:09:14,740 --> 00:09:17,180
It doesn't have to be English.

116
00:09:17,180 --> 00:09:21,740
If your contributors work primarily in another language, consider using that language as

117
00:09:21,740 --> 00:09:24,300
a canonical source.

118
00:09:25,300 --> 00:09:30,980
I recommend establishing a minimum viable documentation set.

119
00:09:30,980 --> 00:09:35,060
The origin for this phrase, minimum viable documentation, is Heidi Waterhouse, who is

120
00:09:35,060 --> 00:09:39,900
seated here.

121
00:09:39,900 --> 00:09:44,740
Identifying a minimum viable documentation set serves a couple of purposes.

122
00:09:44,740 --> 00:09:49,900
I think the most valuable is that it clarifies your project's most critical content.

123
00:09:49,900 --> 00:09:52,340
This will help you develop empathy for your users.

124
00:09:52,340 --> 00:09:54,180
What do they most need?

125
00:09:54,180 --> 00:09:58,820
What can they not live without?

126
00:09:58,820 --> 00:10:04,900
Another reason is that it establishes a threshold at which a localization meets the requirements

127
00:10:04,900 --> 00:10:07,860
for inclusion in your published docs.

128
00:10:07,860 --> 00:10:13,500
You have a very clear understanding of what is the requirement for a localization to meet

129
00:10:13,500 --> 00:10:18,380
before it can be published.

130
00:10:18,380 --> 00:10:20,740
I recommend scripting away common functions.

131
00:10:20,740 --> 00:10:22,420
These links are to Python scripts.

132
00:10:22,420 --> 00:10:27,100
They're in very tiny print, for which I apologize deeply.

133
00:10:27,100 --> 00:10:32,580
These are Python scripts for tracking diffs between localization branches and for tracking

134
00:10:32,580 --> 00:10:38,500
diffs from upstream source, from the canonical branch.

135
00:10:38,500 --> 00:10:43,540
I talked earlier about how some translation tools, how it's good for each team to have

136
00:10:43,540 --> 00:10:48,220
their own workflow around creating localized content.

137
00:10:48,220 --> 00:10:54,340
As a corollary to that, there are some tasks that every localization team shares in common,

138
00:10:54,340 --> 00:10:58,260
and it's good to standardize those.

139
00:10:58,260 --> 00:11:04,300
Every team needs to track diffs across their own collaboration branches.

140
00:11:04,300 --> 00:11:08,020
This is a script to basically find out what did everyone else work on since the last time

141
00:11:08,020 --> 00:11:09,260
I ran the script.

142
00:11:09,260 --> 00:11:12,260
Where are we as a localization?

143
00:11:12,260 --> 00:11:17,340
The other script tracks upstream changes in order to keep that localization current.

144
00:11:17,340 --> 00:11:21,180
What changed upstream that we need to now localize?

145
00:11:21,180 --> 00:11:25,500
Unlike translation tools, which remember we don't care about, diffs are automatable.

146
00:11:25,500 --> 00:11:29,020
If it's automatable, it's therefore scalable.

147
00:11:29,020 --> 00:11:36,940
This also standardizing in this kind of scripted way makes it easier for you as a maintainer,

148
00:11:36,940 --> 00:11:42,940
and it makes it easier for teams to be able to support each other in a decentralized way.

149
00:11:42,940 --> 00:11:45,700
This is another one of those greater than additive benefits.

150
00:11:46,540 --> 00:11:57,340
I recommend using tools that support localization or internationalization.

151
00:11:57,340 --> 00:12:01,940
Choose a content management system and static site generator that have built-in support

152
00:12:01,940 --> 00:12:03,500
for localization.

153
00:12:03,500 --> 00:12:09,620
For example, Hugo and Gatsby are both static site generators that have built-in support

154
00:12:09,620 --> 00:12:12,620
for localization.

155
00:12:12,660 --> 00:12:18,620
I recommend using a tool, whatever it is that you use for a static site generator.

156
00:12:18,620 --> 00:12:23,420
Choose one that is built on a language that aligns with your own projects, languages,

157
00:12:23,420 --> 00:12:26,740
and source of expertise.

158
00:12:26,740 --> 00:12:31,020
This increases scalability.

159
00:12:31,020 --> 00:12:35,580
Kubernetes uses Hugo because Hugo is written in Go, and unsurprisingly, Kubernetes has

160
00:12:35,580 --> 00:12:41,140
a deep pool of Golang expertise.

161
00:12:41,140 --> 00:12:43,180
Avoid hard-coding strings.

162
00:12:43,180 --> 00:12:47,260
This is an efficiency piece, and it's also a scalability piece.

163
00:12:47,260 --> 00:12:51,500
I will say little about partials apart from mentioning just don't hard-code them.

164
00:12:51,500 --> 00:12:59,540
Instead, I will refer you to the Hugo documentation for partials and for the Kubernetes website

165
00:12:59,540 --> 00:13:05,660
repository as an applied example of what localized partials look like.

166
00:13:05,660 --> 00:13:10,340
Partials only work once you solve for repository permissions, or rather they're an example

167
00:13:10,340 --> 00:13:15,260
of what you need to solve for with repository permissions.

168
00:13:15,260 --> 00:13:17,460
Permissions are tricky to solve for.

169
00:13:17,460 --> 00:13:22,860
The permissions required for localization teams to work effectively don't map well

170
00:13:22,860 --> 00:13:29,340
to the granular permissions that Git allows repo admins to assign.

171
00:13:29,340 --> 00:13:33,860
I do have a recommendation for how to solve for permissions, but I want to dig into the

172
00:13:33,860 --> 00:13:39,220
specifics of why and how permissions are problematic for localization projects.

173
00:13:39,220 --> 00:13:41,780
One example is branches.

174
00:13:41,780 --> 00:13:49,020
Neither GitHub nor GitLab permit granular permissions to only create a branch.

175
00:13:49,020 --> 00:13:56,540
When you assign permission to create a branch that is bundled with the permission to merge

176
00:13:56,540 --> 00:14:03,180
or to delete not only a particular branch but any branch in that repository.

177
00:14:03,180 --> 00:14:08,420
The easiest way for localization teams to collaborate is on shared long-running branches

178
00:14:08,540 --> 00:14:10,460
in the project repository.

179
00:14:10,460 --> 00:14:17,660
This creates a challenge in projects where people contribute by forking the repository.

180
00:14:17,660 --> 00:14:22,420
There's a whole set of reasons why it's a poor idea for multiple contributors to work

181
00:14:22,420 --> 00:14:27,220
on a branch of one contributor's fork, especially for a long-running fork.

182
00:14:27,220 --> 00:14:32,700
Conversely, there are good reasons to localize on a long-running branch that is off of the

183
00:14:32,700 --> 00:14:35,700
project's main repository.

184
00:14:35,780 --> 00:14:42,140
That means assigning a localization team the permission to perform right operations in

185
00:14:42,140 --> 00:14:43,140
the project repo.

186
00:14:43,140 --> 00:14:48,220
That raises a whole host of concerns.

187
00:14:48,220 --> 00:14:56,260
With that comes the question of permissions for approvals.

188
00:14:56,260 --> 00:15:01,980
You will almost certainly not be able to assign repo permissions in a way that matches the

189
00:15:02,140 --> 00:15:08,340
permissions that localization teams require to configure themselves and only themselves.

190
00:15:08,340 --> 00:15:13,460
For example, Hugo requires that localized markdown files be placed along a language-specific

191
00:15:13,460 --> 00:15:17,660
path, slash content slash two-letter country code.

192
00:15:17,660 --> 00:15:24,100
It would be for Korean, it would be slash content slash KO.

193
00:15:24,100 --> 00:15:28,700
Hugo requires that localized content exist on that file path, but Hugo performs the site

194
00:15:28,740 --> 00:15:35,740
configuration for a localization in a root-level config file, config.toml.

195
00:15:35,740 --> 00:15:41,180
The Hugo parser will fail a build if content exists on a file path and it isn't properly

196
00:15:41,180 --> 00:15:43,620
configured in the root-level file.

197
00:15:43,620 --> 00:15:49,300
Localization requires permission to alter root-level files, and that's concerning for a whole host

198
00:15:49,300 --> 00:15:52,700
of reasons.

199
00:15:52,700 --> 00:15:55,260
Partials are another example of that.

200
00:15:55,260 --> 00:16:00,380
Hugo puts all of its string partials into a directory off of the root-level that is

201
00:16:00,380 --> 00:16:02,780
not on the localized content path.

202
00:16:02,780 --> 00:16:07,660
Granular permissions, it's impossible to assign them in a way that the Venn diagram is 100%

203
00:16:07,660 --> 00:16:08,660
overlap.

204
00:16:08,660 --> 00:16:17,660
Assigning permissions, giving localization teams enough permissions to do what they need

205
00:16:17,660 --> 00:16:24,660
to do, creates a problem of trust.

206
00:16:24,660 --> 00:16:30,700
The intersection of team needs and get permissions creates choices about security that are unfortunately

207
00:16:30,700 --> 00:16:32,820
pretty either or.

208
00:16:32,820 --> 00:16:35,740
It's all or nothing.

209
00:16:35,740 --> 00:16:38,740
Not 100%, but it's pretty hard binary sometimes.

210
00:16:38,740 --> 00:16:41,060
So let's talk about trust.

211
00:16:41,060 --> 00:16:46,300
And trust is where you as a project maintainer decide what kind of maintenance you want to

212
00:16:46,300 --> 00:16:48,580
engage in.

213
00:16:48,580 --> 00:16:55,140
Low trust means engaging in the custodial maintenance of periodically creating, merging,

214
00:16:55,140 --> 00:17:00,540
and deprecating branches at increasing scale, which is to say that it doesn't scale.

215
00:17:00,540 --> 00:17:06,940
Or you can have higher trust and engage in occasional forensic maintenance, forensic

216
00:17:06,940 --> 00:17:11,940
as opposed to custodial, forensic maintenance of undoing disruptive actions.

217
00:17:11,940 --> 00:17:13,660
Please note, disruptive, not malicious.

218
00:17:14,300 --> 00:17:19,220
There have been many disruptive actions related to localization work in the Kubernetes repo,

219
00:17:19,220 --> 00:17:20,220
but none of them were malicious.

220
00:17:20,220 --> 00:17:22,440
We're very fortunate in that regard.

221
00:17:22,440 --> 00:17:23,780
It does require vigilance.

222
00:17:23,780 --> 00:17:27,900
It does require maintenance.

223
00:17:27,900 --> 00:17:32,460
But this is where you as a project maintainer and you as a project figure out how you think

224
00:17:32,460 --> 00:17:35,960
about trust.

225
00:17:35,960 --> 00:17:40,940
So I recommend treating localization teams with the same trust that you would give to

226
00:17:40,980 --> 00:17:45,060
any release branch.

227
00:17:45,060 --> 00:17:50,180
And to treat localization maintainers the same way that you would any other release

228
00:17:50,180 --> 00:17:53,660
lead who has right permissions.

229
00:17:53,660 --> 00:17:58,380
Not everyone who contributes localized content needs right permissions, but in order to scale

230
00:17:58,380 --> 00:18:03,960
as a project, every localization team should have someone who serves as a team lead and

231
00:18:03,960 --> 00:18:10,960
with whom you as a maintainer have explicit and well documented conversations about security

232
00:18:10,960 --> 00:18:16,120
and trust.

233
00:18:16,120 --> 00:18:22,160
Perhaps unsurprising coming from a technical writer, but document everything.

234
00:18:22,160 --> 00:18:27,880
A frank and explicit conversation about trust and permissions requires a thorough written

235
00:18:27,880 --> 00:18:29,480
understanding.

236
00:18:29,480 --> 00:18:34,540
Every project has norms, expectations, and boundaries about what people who have certain

237
00:18:34,540 --> 00:18:39,280
levels of permission can do with those permissions.

238
00:18:39,280 --> 00:18:45,400
Because expectations and boundaries are cultural and because localization is also about cultural

239
00:18:45,400 --> 00:18:51,560
relevance, it is important, I would say critical, to document the expectations and boundaries

240
00:18:51,560 --> 00:18:56,280
around localization work in your project.

241
00:18:56,280 --> 00:19:01,660
Every single disruptive action in the Kubernetes website could have been prevented with better

242
00:19:01,660 --> 00:19:08,660
documentation about the expectations for permissions and what people can and can't do with them.

243
00:19:10,420 --> 00:19:17,340
So I recommend making issues and pull requests filterable by language and one of the easiest

244
00:19:17,340 --> 00:19:24,340
ways to do that is with repo labels that are specific to a language.

245
00:19:24,340 --> 00:19:29,860
They are an easy solution to what otherwise is a big maintenance burden.

246
00:19:29,860 --> 00:19:34,540
Without the ability to filter by language, it's just it's toil and as with any form

247
00:19:34,540 --> 00:19:39,500
of toil, I highly recommend automating it away.

248
00:19:39,500 --> 00:19:44,560
So I recommend language labels that follow the format of language plus the two letter

249
00:19:44,560 --> 00:19:48,920
country code or a two letter language code, excuse me.

250
00:19:49,000 --> 00:19:54,640
This tracks to the same standard that you use to set that content path in a repository,

251
00:19:54,640 --> 00:20:01,640
for example, and it makes it easy to correlate that this label applies to this content.

252
00:20:01,920 --> 00:20:05,840
And you can automate these with a GitHub action.

253
00:20:05,840 --> 00:20:10,160
There's a GitHub action that will specifically apply a label to a pull request based on the

254
00:20:10,160 --> 00:20:16,040
content in that file path.

255
00:20:16,040 --> 00:20:20,280
So when localization contributors identify something that needs to change in the upstream

256
00:20:20,280 --> 00:20:25,280
source, it will often open a pull request that includes both the change in the upstream

257
00:20:25,280 --> 00:20:28,560
source and their own localized content.

258
00:20:28,560 --> 00:20:33,720
And these are the most noble and well-intended pull requests and they almost always languish

259
00:20:33,720 --> 00:20:37,960
because multiple languages require multiple approvers.

260
00:20:37,960 --> 00:20:41,120
It's a bit of a hassle to say to somebody, hey, can you do this in two pull requests

261
00:20:41,200 --> 00:20:46,200
rather than one, but they will get approved more quickly based on practice.

262
00:20:48,840 --> 00:20:52,120
I recommend preview builds.

263
00:20:52,120 --> 00:20:59,120
It just makes the review process faster and easier for everyone regardless of localization.

264
00:20:59,120 --> 00:21:03,520
Kubernetes uses Netlify to generate preview builds.

265
00:21:03,520 --> 00:21:05,160
We use it as our content delivery network.

266
00:21:05,160 --> 00:21:08,720
It's what actually publishes our rendered content.

267
00:21:08,720 --> 00:21:09,720
And it works great.

268
00:21:09,720 --> 00:21:13,480
It works great as well with the site CI-CD.

269
00:21:13,480 --> 00:21:18,000
So this is one of the best kept secrets in the Kubernetes website and I wish it wasn't

270
00:21:18,000 --> 00:21:21,600
a secret because I wish every project had a smoke test page.

271
00:21:21,600 --> 00:21:27,320
A smoke test is one page generated from a single markdown file that contains an instance

272
00:21:27,320 --> 00:21:30,920
of every syntax or formatting element in your docs.

273
00:21:30,920 --> 00:21:35,840
And this is great for figuring out whether a proposed change works as intended.

274
00:21:35,960 --> 00:21:40,120
When you localize different languages have different site element requirements.

275
00:21:40,120 --> 00:21:42,440
And this is a great way to test that.

276
00:21:42,440 --> 00:21:46,320
And you can follow this particular path to a smoke test on preview builds so you can

277
00:21:46,320 --> 00:21:51,360
see whether it works before you approve it.

278
00:21:51,360 --> 00:21:55,940
So this page, the smoke test page is crawlable by robots, but it's de-indexed from site search

279
00:21:55,940 --> 00:21:58,860
so it doesn't interfere with organic search results.

280
00:21:58,860 --> 00:22:01,440
So handy.

281
00:22:01,440 --> 00:22:07,840
So it is easier in some ways to set up a framework for localization before any of the work actually

282
00:22:07,840 --> 00:22:09,720
happens.

283
00:22:09,720 --> 00:22:16,480
On the other hand, there are real benefits to adding localization tooling and workflows

284
00:22:16,480 --> 00:22:19,360
in equal partnership with the contributors who are actually doing that work.

285
00:22:19,360 --> 00:22:21,280
So both of these approaches are valid.

286
00:22:21,280 --> 00:22:23,560
Do it before you need it, wait until you need it.

287
00:22:23,560 --> 00:22:26,320
It's kind of a wash.

288
00:22:26,320 --> 00:22:29,280
So is localization worth it?

289
00:22:29,280 --> 00:22:33,600
All of the advice that I've offered so far has been on the level of implementation detail

290
00:22:33,600 --> 00:22:36,740
and systems level process.

291
00:22:36,740 --> 00:22:41,840
So it's not clear from my advice what maintaining a localization looks like in practice.

292
00:22:41,840 --> 00:22:44,720
So I want to examine some specific maintenance cases.

293
00:22:44,720 --> 00:22:49,640
And I would like to use the example of Korean language content on kubernetes.io for the

294
00:22:49,640 --> 00:22:53,600
month of March 2022.

295
00:22:53,600 --> 00:22:59,240
So in March of this year, six people contributed Korean language content to the kubernetes

296
00:22:59,240 --> 00:23:00,720
website.

297
00:23:00,720 --> 00:23:08,040
And site traffic for Korean content constituted approximately 2.1% of site visitors.

298
00:23:08,040 --> 00:23:12,400
At this point, you may be asking whether the advice that I'm giving you is worth the work

299
00:23:12,400 --> 00:23:16,340
for six contributors at 2.1% of site traffic.

300
00:23:16,340 --> 00:23:19,800
So let's unpack those numbers a bit.

301
00:23:19,800 --> 00:23:27,440
So in March, kubernetes.io had 1.4 million visitors for a total of 4 million sessions

302
00:23:27,440 --> 00:23:31,640
and 10 million page views.

303
00:23:31,640 --> 00:23:35,200
Forget those millions for a moment.

304
00:23:35,200 --> 00:23:41,300
For 1.4 million visitors, 2.1% of site traffic is 30,123 visitors.

305
00:23:41,300 --> 00:23:47,140
And those six contributors in March sustained a one to many support ratio of just one to

306
00:23:47,140 --> 00:23:48,140
over 5,000.

307
00:23:48,140 --> 00:23:49,140
One to 5,000.

308
00:23:49,140 --> 00:23:54,900
Each one of those people who contributed localized content had the net effect of supporting 5,000

309
00:23:54,900 --> 00:23:57,140
people in one month.

310
00:23:57,140 --> 00:24:00,280
And that is a phenomenal number.

311
00:24:00,280 --> 00:24:05,920
So yeah, 1.4 million people.

312
00:24:05,920 --> 00:24:12,500
Of those site visits, only 52% of those visitors viewed content in English.

313
00:24:13,500 --> 00:24:17,300
total monthly traffic was to localized content.

314
00:24:17,300 --> 00:24:20,580
It is absolutely worth it.

315
00:24:20,580 --> 00:24:25,580
So localization teams contribute more than just their own language content.

316
00:24:25,580 --> 00:24:27,940
Localization teams contribute to upstream source.

317
00:24:27,940 --> 00:24:30,900
They contribute to each other's mutual support.

318
00:24:30,900 --> 00:24:34,420
Localization teams in related language groups consult with each other for their own mutual

319
00:24:34,420 --> 00:24:36,280
benefit.

320
00:24:36,280 --> 00:24:39,280
Localization teams contribute to shared tooling.

321
00:24:39,280 --> 00:24:41,820
Both of the scripts that I linked to earlier.

322
00:24:41,820 --> 00:24:44,340
None of the English language maintainers contributed those scripts.

323
00:24:44,340 --> 00:24:47,860
Those were from the French and Korean teams respectively.

324
00:24:47,860 --> 00:24:52,420
And those are a benefit to the entire project.

325
00:24:52,420 --> 00:24:59,220
And localization teams often become not just contributors but maintainers to a project.

326
00:24:59,220 --> 00:25:00,720
So what's the point of all of this?

327
00:25:00,720 --> 00:25:02,100
Why do we localize?

328
00:25:02,100 --> 00:25:05,140
It is not for its own sake.

329
00:25:05,140 --> 00:25:07,860
We don't localize for our own sake.

330
00:25:07,900 --> 00:25:14,700
We localize to increase access to our projects and to drive adoption of our projects.

331
00:25:14,700 --> 00:25:16,340
And when you open a door, people come in.

332
00:25:16,340 --> 00:25:21,000
And that's beautiful.

333
00:25:21,000 --> 00:25:23,460
So here are some resources for this slide.

334
00:25:23,460 --> 00:25:26,180
Again in tiny print, deepest apologies.

335
00:25:26,180 --> 00:25:31,340
This is to the Kubernetes documentation for how to contribute localized content.

336
00:25:31,340 --> 00:25:35,660
This is a link to the website repository and the Python script directory.

337
00:25:35,660 --> 00:25:39,220
This is a link to the Hugo static site generator.

338
00:25:39,220 --> 00:25:44,980
And here's a link to the NumPy projects, that library's own localization work and the ongoing

339
00:25:44,980 --> 00:25:47,620
discussion there.

340
00:25:47,620 --> 00:25:49,580
Shameless plug, buy our book.

341
00:25:49,580 --> 00:25:53,260
Last year I co-authored a book called Docs for Developers, an engineer's field guide

342
00:25:53,260 --> 00:25:54,260
to technical writing.

343
00:25:54,260 --> 00:25:55,260
I co-wrote it with Heidi.

344
00:25:55,260 --> 00:25:59,060
It's a good book and you should totally buy it.

345
00:25:59,060 --> 00:26:00,060
Thank you very much.

