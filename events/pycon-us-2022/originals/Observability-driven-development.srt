1
00:00:00,000 --> 00:00:07,920
Good afternoon, everyone.

2
00:00:07,920 --> 00:00:14,640
Today we are in room 355 for the 2.30 talk, all the way from Rio, Brazil, software developer

3
00:00:14,640 --> 00:00:21,040
Bia with her presentation, observability driven development.

4
00:00:21,040 --> 00:00:23,080
Hi.

5
00:00:23,080 --> 00:00:26,400
Just testing.

6
00:00:26,400 --> 00:00:27,560
Okay.

7
00:00:27,560 --> 00:00:28,800
Hello.

8
00:00:28,800 --> 00:00:32,960
I'm super thrilled to be here at PyCon and I'm going to talk about observability driven

9
00:00:32,960 --> 00:00:38,400
development or more like invite you a little bit to think about observability before things

10
00:00:38,400 --> 00:00:40,760
start to crash in production.

11
00:00:40,760 --> 00:00:42,940
I hope you've all been there.

12
00:00:42,940 --> 00:00:46,440
It's a fun ride when things start to crash in production.

13
00:00:46,440 --> 00:00:52,360
So first, just like I've been presented, I'm Bianca.

14
00:00:52,360 --> 00:00:53,800
I'm also known as Bia.

15
00:00:53,800 --> 00:00:58,080
I'm from Brazil, from Rio more specifically, which is like amazing city, beautiful.

16
00:00:58,080 --> 00:01:02,040
If you ever want to meet Rio, it's going to be amazing.

17
00:01:02,040 --> 00:01:05,080
And we have an amazing Python community in Rio, too.

18
00:01:05,080 --> 00:01:10,080
We used to have meetings every last Saturday of the month before the pandemic.

19
00:01:10,080 --> 00:01:15,300
So at some point we're going to resume all the meetings and hopefully get back to a more

20
00:01:15,300 --> 00:01:17,260
active community.

21
00:01:17,260 --> 00:01:20,960
And right now I'm building something new at a startup called Lumos.

22
00:01:20,960 --> 00:01:23,840
My focus is engineering, but we are like this super tiny startup.

23
00:01:24,480 --> 00:01:29,880
It's still in stealth mode and we work around the field of productivity, identity and compliance.

24
00:01:29,880 --> 00:01:32,320
You're going to hear from us soon hopefully.

25
00:01:32,320 --> 00:01:37,160
And previously I worked at HeadHead building a platform for Relford Edge Systems and at

26
00:01:37,160 --> 00:01:40,200
Stone which is like a Brazilian fintech.

27
00:01:40,200 --> 00:01:45,040
And most of the time I was working as a backend developer, DevOps engineer, sometimes leading

28
00:01:45,040 --> 00:01:50,320
small teams, sometimes doing a little bit of management, but that wasn't for me so I

29
00:01:50,400 --> 00:01:54,440
came back to an IC world.

30
00:01:54,440 --> 00:02:00,640
So again, before I dive to deep, I want to talk about like I like all things DevOps, CI,

31
00:02:00,640 --> 00:02:03,840
CD, cloud infrastructure, observability.

32
00:02:03,840 --> 00:02:05,520
I also like Go a lot.

33
00:02:05,520 --> 00:02:08,840
I'm a Go developer just like I am a Python developer.

34
00:02:08,840 --> 00:02:11,800
I am still a World of Warcraft player.

35
00:02:11,800 --> 00:02:16,400
I grew up playing Pokemon and Ragnarok during countless nights.

36
00:02:16,400 --> 00:02:19,160
I'm passionate about coffee and beer.

37
00:02:19,200 --> 00:02:25,600
I used to listen to a lot of rock and roll but nowadays I listen to pop and reggaeton

38
00:02:25,600 --> 00:02:26,600
so I don't know what happened.

39
00:02:26,600 --> 00:02:30,280
I think it's the 30s catching up with me.

40
00:02:30,280 --> 00:02:35,680
And I like web, distributed systems, systems architecture and Python obviously otherwise

41
00:02:35,680 --> 00:02:38,720
I wouldn't be here at PyCon.

42
00:02:38,720 --> 00:02:41,400
First question is like why do we develop software?

43
00:02:41,400 --> 00:02:44,040
Like why are we software developers?

44
00:02:44,080 --> 00:02:48,720
I know that some of us think that's going to like this is going to be just a job but

45
00:02:48,720 --> 00:02:51,280
even if it is, why do we have that job?

46
00:02:51,280 --> 00:02:54,640
Like why is there like a need in the market for that?

47
00:02:54,640 --> 00:02:56,560
Why is it such in high demand?

48
00:02:56,560 --> 00:03:01,960
There are like many possible answers to that but one that I particularly like is that people

49
00:03:01,960 --> 00:03:04,320
need it or people want it.

50
00:03:04,320 --> 00:03:07,400
People are the users of our software, the end users.

51
00:03:07,400 --> 00:03:13,240
We can have like a lot of discussion of whether like this software is going to benefit our

52
00:03:13,240 --> 00:03:20,440
society or not but even if it's like something super silly like a game or not, people are

53
00:03:20,440 --> 00:03:24,400
going to use it and you want people to use it.

54
00:03:24,400 --> 00:03:28,400
So someone's needs have to be met.

55
00:03:28,400 --> 00:03:34,800
And software needs to meet someone's expectations like even in machine learning when you don't

56
00:03:34,840 --> 00:03:38,000
interact with it directly, you do want something out of it.

57
00:03:38,000 --> 00:03:44,600
You want like your software to learn something and give you a particular output.

58
00:03:44,600 --> 00:03:48,360
When you're just studying, you want to get something out of it.

59
00:03:48,360 --> 00:03:53,320
And what happens when that expectation like is in math?

60
00:03:53,320 --> 00:03:55,240
It's a bit hard to manage.

61
00:03:55,240 --> 00:03:59,240
Sometimes like a user wants to load a webpage and it can't.

62
00:03:59,240 --> 00:04:03,640
A user expects you to do something and they just can't.

63
00:04:03,640 --> 00:04:08,360
They just couldn't do it because software crashes sometimes.

64
00:04:08,360 --> 00:04:11,760
And not meeting expectations generates a lot of frustration.

65
00:04:11,760 --> 00:04:14,040
And business like that means money loss.

66
00:04:14,040 --> 00:04:18,440
We lose money because we're not meeting our users' expectations.

67
00:04:18,440 --> 00:04:24,040
So normally there's frustration and we enter the problem-solving mode and start putting

68
00:04:24,040 --> 00:04:27,480
out fires.

69
00:04:27,480 --> 00:04:30,640
And normally there's a bug in production.

70
00:04:30,640 --> 00:04:37,040
Software goes crazy, goes insane and tries to fix it right away, especially when it's

71
00:04:37,040 --> 00:04:40,160
a P01 bug.

72
00:04:40,160 --> 00:04:46,400
And we often realize that we don't have enough data.

73
00:04:46,400 --> 00:04:52,960
We think of observability way too late when there is a problem that is already happening

74
00:04:52,960 --> 00:04:57,680
and it's already hard to figure out what's going on.

75
00:04:57,680 --> 00:05:03,280
So this is sort of an open invitation to live fight or flight mode, the anxious moment where

76
00:05:03,280 --> 00:05:08,120
you have to fix everything super fast because it's broken.

77
00:05:08,120 --> 00:05:10,720
And think about this like beforehand.

78
00:05:10,720 --> 00:05:18,840
What can we do when we're just starting, when we are just creating our POC or MVP or studying

79
00:05:18,840 --> 00:05:20,080
our app?

80
00:05:20,080 --> 00:05:26,600
What can we do so that when it reaches production, it is easier for us to figure out what's going

81
00:05:26,600 --> 00:05:29,520
on?

82
00:05:29,520 --> 00:05:37,520
So I'm going to go through APM logging tools and setting up your application, a small problem.

83
00:05:37,520 --> 00:05:43,920
I'm going to talk about good logging practices and a slightly more complex performance issue.

84
00:05:43,920 --> 00:05:47,960
I have to fix that slide.

85
00:05:47,960 --> 00:05:52,080
And find the root cause of that problem.

86
00:05:52,160 --> 00:05:58,560
When I talk about observability, I think one of the first things that come to my mind when

87
00:05:58,560 --> 00:06:07,000
my background is mostly around back end development focused web is that we need an APM logging

88
00:06:07,000 --> 00:06:11,240
tool instead of an app.

89
00:06:11,240 --> 00:06:15,040
Most of those apps, most of those solutions come with both.

90
00:06:15,040 --> 00:06:19,200
So it's fine to just like one tool or a combination of two.

91
00:06:19,200 --> 00:06:21,040
There are some famous ones over there.

92
00:06:21,040 --> 00:06:25,920
We have elastic with elastic search, we have new relic, we have data dog, we have honeycomb,

93
00:06:25,920 --> 00:06:28,920
we have lightstep, we have Splunk.

94
00:06:28,920 --> 00:06:35,120
I use the couple over my jobs, my career.

95
00:06:35,120 --> 00:06:39,280
I don't have like a preference and I don't work for any of these companies.

96
00:06:39,280 --> 00:06:46,480
So I also like, I actually chose new relic because it's the one that I have more experience

97
00:06:46,480 --> 00:06:48,480
but I like a particular preference.

98
00:06:48,640 --> 00:06:53,320
It really depends on your use case and you have to go through the functionalities.

99
00:06:53,320 --> 00:06:59,000
And if you want something to think about and consider, like there's open telemetry, which

100
00:06:59,000 --> 00:07:06,640
I highly consider if you like open source, if you want something that is not going to

101
00:07:06,640 --> 00:07:10,320
lock you in particular vendor.

102
00:07:10,320 --> 00:07:16,040
Open telemetry is going to be like a collection of tools.

103
00:07:16,080 --> 00:07:25,000
You export telemetry data and that telemetry data is going to go from your app to a solution.

104
00:07:25,000 --> 00:07:32,680
So new relic can consume data from open telemetry, data dog can probably do the same, elastic

105
00:07:32,680 --> 00:07:34,320
can probably do the same.

106
00:07:34,320 --> 00:07:43,200
So you can just learn how to have that data exported in a format that is famous and known

107
00:07:43,200 --> 00:07:44,200
by tools.

108
00:07:46,400 --> 00:07:50,720
Like I said, new relic for that example.

109
00:07:50,720 --> 00:07:55,760
The reasoning, like more experience and I didn't want to learn something new just to

110
00:07:55,760 --> 00:07:56,760
present here.

111
00:07:56,760 --> 00:08:00,760
I'm anxious enough just without learning something new.

112
00:08:00,760 --> 00:08:02,880
So let's not do that.

113
00:08:02,880 --> 00:08:09,640
And I came up with the most boring example app that I'm letting you come up with.

114
00:08:10,320 --> 00:08:16,440
I am going to open that app and I want to go through it and show how new relic is set

115
00:08:16,440 --> 00:08:17,960
up on it.

116
00:08:17,960 --> 00:08:19,720
So let me do that here.

117
00:08:19,720 --> 00:08:34,680
This is our example app and new relic is set up here through, I have a main.py over there

118
00:08:34,840 --> 00:08:47,440
And you just import new relic agent to your app and you initialize it in register.

119
00:08:47,440 --> 00:08:52,600
When you do that in your application, new relic is going to be plugged in and going

120
00:08:52,600 --> 00:08:56,400
to look at all of the function calls that you have in your app.

121
00:08:56,400 --> 00:09:01,080
It's going to inspect your application when it's running in production mode.

122
00:09:01,080 --> 00:09:06,800
One thing that I think there's no reason to not do that when you're just starting

123
00:09:06,800 --> 00:09:13,800
an app like with new relic or another tool because it's like four lines of code sometimes.

124
00:09:13,800 --> 00:09:20,800
So we don't do that because no, we want to do it faster but we end up with less data

125
00:09:20,800 --> 00:09:22,680
in production.

126
00:09:22,680 --> 00:09:29,760
So here we have a flash cap, very simple one, non-production ready code, don't copy that.

127
00:09:30,520 --> 00:09:43,520
I also created a database here, populated schema, there are a couple of things here.

128
00:09:43,520 --> 00:09:54,320
When I run Docker and Compose here, this application is going to be up and running.

129
00:09:54,320 --> 00:09:59,200
If you're curious about other things that I have here, it's going to be on GitHub so

130
00:09:59,200 --> 00:10:02,120
you can go to later.

131
00:10:02,120 --> 00:10:05,520
I'm going to just make a request to make sure it's working.

132
00:10:05,520 --> 00:10:09,560
I'm going to bring that here.

133
00:10:09,560 --> 00:10:16,720
You just have to figure out the whole monitor setup because...

134
00:10:16,720 --> 00:10:17,720
Options.

135
00:10:17,720 --> 00:10:26,880
Move this right here.

136
00:10:26,880 --> 00:10:32,440
So here we have a different kind of postman which is Insomnia.

137
00:10:32,440 --> 00:10:36,560
I really like it too so if you ever want to try it out.

138
00:10:36,560 --> 00:10:41,160
You can do a health check on our app.

139
00:10:41,160 --> 00:10:42,400
We can create a new task.

140
00:10:42,400 --> 00:10:45,120
I have a cat, his name is Marcelino.

141
00:10:45,120 --> 00:10:49,120
I bought a leash for him and I go out with him.

142
00:10:49,120 --> 00:10:50,840
It's funny.

143
00:10:50,840 --> 00:10:53,400
He has a TikTok.

144
00:10:53,400 --> 00:10:58,560
So I can create a task to go out with Marcelino and there are a couple of things that my app

145
00:10:58,560 --> 00:10:59,560
can do.

146
00:10:59,560 --> 00:11:00,560
It's just a to-do list.

147
00:11:00,560 --> 00:11:05,960
It's a very simple one.

148
00:11:05,960 --> 00:11:13,760
Like I said, we have new relic setup so I'm going to move that to a new window.

149
00:11:13,760 --> 00:11:16,760
Also move that.

150
00:11:23,480 --> 00:11:37,200
So whenever there's a new request, I just send one.

151
00:11:37,200 --> 00:11:44,680
A new relic is just going to look through my app and it's instrumentation platform.

152
00:11:44,680 --> 00:11:49,560
You can see all the requests that happened, transactions.

153
00:11:49,560 --> 00:11:50,560
There was a patch.

154
00:11:50,560 --> 00:11:52,560
There was a list task.

155
00:11:52,720 --> 00:11:54,720
There was a create task here.

156
00:11:54,720 --> 00:12:00,120
Error rate, success, slowest trace, which is amazing.

157
00:12:00,120 --> 00:12:03,760
One thing that I really like is service maps.

158
00:12:03,760 --> 00:12:09,720
So if it makes external calls to a service or a Postgres database, it has everything

159
00:12:09,720 --> 00:12:16,760
here but I don't work for new relic so I hope they give me swag after this.

160
00:12:16,760 --> 00:12:20,800
And it also shows logs, something that is really cool too.

161
00:12:20,800 --> 00:12:29,400
You can have info endpoint hit and have your log here with a couple of cool things.

162
00:12:29,400 --> 00:12:36,040
And let's go back to presentation now.

163
00:12:36,040 --> 00:12:43,280
So problem is, what happens if a user tries to add a task without a description, something

164
00:12:43,280 --> 00:12:45,520
like that?

165
00:12:45,520 --> 00:12:47,320
Let's try that.

166
00:12:47,320 --> 00:12:53,880
I'm going to try to create a task here without a description, like just empty body.

167
00:12:53,880 --> 00:12:58,520
I know that normally you're going to check for that, the user is going to get the feedback,

168
00:12:58,520 --> 00:13:01,440
but what if you forgot something happened?

169
00:13:01,440 --> 00:13:04,400
User got internal server error.

170
00:13:04,400 --> 00:13:05,400
It's complaining.

171
00:13:05,400 --> 00:13:07,560
I cannot create my task.

172
00:13:07,560 --> 00:13:08,560
You suck.

173
00:13:08,560 --> 00:13:09,560
You're a bad developer.

174
00:13:09,560 --> 00:13:13,640
I'm not going to sign up for your to-do list anymore.

175
00:13:13,640 --> 00:13:16,520
And when you look at the logs, you just say like exception.

176
00:13:17,240 --> 00:13:18,240
Okay, exception.

177
00:13:19,240 --> 00:13:20,240
Could not create.

178
00:13:22,240 --> 00:13:23,240
What happened?

179
00:13:23,240 --> 00:13:29,760
Like, how can I make that user happy again?

180
00:13:29,760 --> 00:13:33,800
How can I let them know that, oh, okay, what happens if I try to create a task without

181
00:13:33,800 --> 00:13:34,800
a description?

182
00:13:34,800 --> 00:13:36,120
I had a problem.

183
00:13:36,120 --> 00:13:40,720
I didn't create my API in a way that you would have a good feedback about it.

184
00:13:40,920 --> 00:13:50,160
How can I make this better to actually give a good feedback to my user?

185
00:13:50,160 --> 00:13:53,000
We can add logs.

186
00:13:53,000 --> 00:13:56,720
That's what's missing, like logging.

187
00:13:56,720 --> 00:14:03,000
When we talk about good logging practices, this is a thing that I really like and I'm

188
00:14:03,000 --> 00:14:08,040
very passionate about, so if you ever want to talk about it, DM me on Twitter.

189
00:14:08,040 --> 00:14:09,240
Let's talk.

190
00:14:09,240 --> 00:14:16,800
I have my very own definition of what's good logging, but I didn't dream about it.

191
00:14:16,800 --> 00:14:22,520
It's personal, opinionated, but I was very backed up with researches and open to discussions.

192
00:14:22,520 --> 00:14:30,280
So if you think that I'm talking about something that you don't really agree, let's chat about

193
00:14:30,280 --> 00:14:31,280
it.

194
00:14:31,280 --> 00:14:32,280
Let's fight about it.

195
00:14:32,280 --> 00:14:33,280
I'm happy to do so.

196
00:14:33,280 --> 00:14:39,120
When I talk about logging, I like plain text messages without variables.

197
00:14:39,120 --> 00:14:47,600
So when you look at the logging message that has a variable, it's very nice for you to

198
00:14:47,600 --> 00:14:52,040
see like, okay, a task was created with an ID X.

199
00:14:52,040 --> 00:14:54,440
Awesome.

200
00:14:54,440 --> 00:15:01,400
But if you want to group these log messages in a tool like Splunk or New Relic or Elastic

201
00:15:01,400 --> 00:15:08,240
Search, you should write those logs for a computer to process it, not for a human to

202
00:15:08,800 --> 00:15:12,320
But also make it so that a human can read and understand.

203
00:15:12,320 --> 00:15:15,120
So your log messages should be like plain text messages.

204
00:15:15,120 --> 00:15:22,000
You should be able to group it, and you should be able to actually give me all log messages

205
00:15:22,000 --> 00:15:23,720
with that message.

206
00:15:23,720 --> 00:15:29,760
I'm going to have a sum of operations of task creators that I have in my app if I just did

207
00:15:29,760 --> 00:15:30,760
that.

208
00:15:30,760 --> 00:15:35,120
But also should have enough information for humans to read.

209
00:15:35,120 --> 00:15:41,640
So how can we, like with plain text messages without putting the task ID, how can I get

210
00:15:41,640 --> 00:15:43,000
that information?

211
00:15:43,000 --> 00:15:45,680
Well, use extra fields.

212
00:15:45,680 --> 00:15:50,520
So you take off the variables of messages.

213
00:15:50,520 --> 00:15:59,540
You take something called extra fields that Python standard logging library has.

214
00:15:59,540 --> 00:16:00,680
And you can use those.

215
00:16:00,680 --> 00:16:04,480
You can add like a big dictionary of variables.

216
00:16:04,880 --> 00:16:08,200
They're important for that log message.

217
00:16:08,200 --> 00:16:11,200
You put as much info as you can.

218
00:16:11,200 --> 00:16:16,360
Don't abuse it in the sense that you're going to send like this huge payload.

219
00:16:16,360 --> 00:16:20,800
But these fields are normally hidden by default view.

220
00:16:20,800 --> 00:16:22,160
And they're extremely useful.

221
00:16:22,160 --> 00:16:27,240
So you like put as much info as you can, like what customer, what is the request ID, all

222
00:16:27,240 --> 00:16:28,760
of that.

223
00:16:28,760 --> 00:16:32,120
And speaking of request ID.

224
00:16:32,120 --> 00:16:33,120
Traceability.

225
00:16:33,120 --> 00:16:42,200
We should have like for every web request, we should have a unique identifier for it.

226
00:16:42,200 --> 00:16:47,200
And this unique identifier should be present in all of our log messages that are related

227
00:16:47,200 --> 00:16:52,960
to that request in order to be able to trace exactly what happened in a particular request.

228
00:16:52,960 --> 00:17:02,640
So I've found myself a couple of times with a JSON payload and going through my code to

229
00:17:02,640 --> 00:17:11,360
understand where the heck this code broke because I have absolutely no idea.

230
00:17:11,360 --> 00:17:15,320
And I had to like go through, read all of the ifs and else and everything to see what

231
00:17:15,320 --> 00:17:17,900
would happen.

232
00:17:17,900 --> 00:17:22,560
So if I had a request identifier, I would be able to like in good logging, I would be

233
00:17:22,560 --> 00:17:25,720
able to see every single thing that happened.

234
00:17:25,720 --> 00:17:30,860
Like I just get the same identifier and get all the messages with that one.

235
00:17:30,940 --> 00:17:34,220
I can see every single thing that happened.

236
00:17:34,220 --> 00:17:36,580
So it's amazing.

237
00:17:36,580 --> 00:17:38,980
And also business traceability.

238
00:17:38,980 --> 00:17:42,220
Like what happened with that customer?

239
00:17:42,220 --> 00:17:43,660
What's going on with that customer?

240
00:17:43,660 --> 00:17:46,820
What's the kind of thing that they use in our app?

241
00:17:46,820 --> 00:17:52,220
So something that is really nice to have too, like customer identifiers, existing log requests

242
00:17:52,220 --> 00:17:55,540
in order to measure the experience of a particular customer.

243
00:17:55,540 --> 00:18:01,820
You can also create a particular SLA for a subset of customers that you have.

244
00:18:01,820 --> 00:18:07,260
So how do you figure out like, okay, what is the time that a particular request took

245
00:18:07,260 --> 00:18:09,060
for a particular customer?

246
00:18:09,060 --> 00:18:12,740
You can do that through logging.

247
00:18:12,740 --> 00:18:15,580
Keeping track of IDs is something that I really like too.

248
00:18:15,580 --> 00:18:19,540
Like every time that I save an object, I write a log line about it.

249
00:18:19,540 --> 00:18:21,580
And I also keep the ID as an extra field.

250
00:18:21,620 --> 00:18:23,660
This allows easy inspection.

251
00:18:23,660 --> 00:18:29,860
If I have to ever go through my database and see like, okay, was that really added?

252
00:18:29,860 --> 00:18:30,860
What's going on with that data?

253
00:18:30,860 --> 00:18:32,420
Is everything okay?

254
00:18:32,420 --> 00:18:37,180
So it gives me a really good overview of things.

255
00:18:37,180 --> 00:18:42,140
And the last thing is that we normally go like writing log lines, just whatever.

256
00:18:42,140 --> 00:18:46,660
I'm just going to go log info, log info everything.

257
00:18:46,660 --> 00:18:50,620
We should be more intentional about logging levels.

258
00:18:50,660 --> 00:18:55,340
You know what kind of information you want to see while developing, what kind of information

259
00:18:55,340 --> 00:18:58,300
is only useful for production.

260
00:18:58,300 --> 00:19:01,260
My rule of thumb is that error is something to pay attention.

261
00:19:01,260 --> 00:19:03,220
Like, I should worry.

262
00:19:03,220 --> 00:19:09,060
Info is extra info in production environment, and the bugs just made for my local development.

263
00:19:09,060 --> 00:19:11,820
That is like my rule of thumb.

264
00:19:11,820 --> 00:19:14,820
But you can also have like different rules across your teams.

265
00:19:14,820 --> 00:19:17,340
Like it's very particular.

266
00:19:17,340 --> 00:19:22,620
But I think that you should be very, very intentional.

267
00:19:22,620 --> 00:19:26,860
And like how can we apply this to our problem?

268
00:19:26,860 --> 00:19:36,940
How can we literally like get these things that I just said and make our customer happy

269
00:19:36,940 --> 00:19:41,380
with the tasks that was created without the description?

270
00:19:41,420 --> 00:19:48,100
So there's a cool thing about using a log handler or a library that is already established

271
00:19:48,100 --> 00:19:53,280
that most of the things like request ID traceability are already set up for us.

272
00:19:53,280 --> 00:20:01,540
So if you look at that log line here that I showed before, like there is like a trace

273
00:20:01,540 --> 00:20:02,540
ID here.

274
00:20:02,540 --> 00:20:09,020
I'm going to make it bigger so you don't suffer too much.

275
00:20:09,020 --> 00:20:10,340
There's a trace ID here.

276
00:20:10,340 --> 00:20:16,420
So Neuralic is already, there's a little log handler that is kind of an adapter of

277
00:20:16,420 --> 00:20:21,980
Python's log handler that does that.

278
00:20:21,980 --> 00:20:27,420
So there are a couple of things that are already here like file name, where the exception happened.

279
00:20:27,420 --> 00:20:31,180
A couple of things that are already like free for us.

280
00:20:31,180 --> 00:20:38,480
That is happening because of, let me open my to-do list app.

281
00:20:38,480 --> 00:20:46,880
That is happening because here in our logger API, make it bigger, we're using a new Relic

282
00:20:46,880 --> 00:20:52,480
log handler that is actually imported from Neuralic libraries.

283
00:20:52,480 --> 00:20:56,640
So this is something that I don't have to worry about when using Flask in Neuralic because

284
00:20:56,640 --> 00:21:00,120
it's already like for free set up for me.

285
00:21:00,120 --> 00:21:03,160
But we talked about like, okay, we lost some information.

286
00:21:03,160 --> 00:21:10,200
So how can we add that here and have more info?

287
00:21:10,200 --> 00:21:11,520
We can add some logs.

288
00:21:11,520 --> 00:21:14,840
So when I create a task, that's the spot.

289
00:21:14,840 --> 00:21:15,840
Bye.

290
00:21:15,840 --> 00:21:18,600
We were creating, right?

291
00:21:18,600 --> 00:21:20,100
So we can just come over here.

292
00:21:20,100 --> 00:21:23,040
We have a logger here.

293
00:21:23,040 --> 00:21:32,480
And I can just say like logger.info, creating task.

294
00:21:32,480 --> 00:21:38,200
When we said like let's use extra fields instead of variables here.

295
00:21:38,200 --> 00:21:42,440
I'm going to make sure that when creating a task, I'm logging my body.

296
00:21:42,440 --> 00:21:43,440
Okay.

297
00:21:43,440 --> 00:21:46,440
We can have that here.

298
00:21:46,440 --> 00:21:58,280
And other than that, like when I save a task, I also like doing the task created.

299
00:21:59,280 --> 00:22:05,960
Instead of doing like task created with ID, I just do task created.

300
00:22:05,960 --> 00:22:08,960
And then I come here.

301
00:22:08,960 --> 00:22:15,600
Task ID.

302
00:22:15,600 --> 00:22:24,120
And in the case of an exception, logger exception, message.

303
00:22:24,760 --> 00:22:29,760
And we're tempted to do this, aren't we?

304
00:22:29,760 --> 00:22:34,720
Could not create that, please.

305
00:22:34,720 --> 00:22:41,920
And your exception can be an extra field.

306
00:22:41,920 --> 00:22:47,840
I really feel like this makes it a lot easier for us to understand where the exception came

307
00:22:47,840 --> 00:22:49,400
from.

308
00:22:49,400 --> 00:22:54,040
Because you can see like, okay, that was what happened when that error in particular happened.

309
00:22:54,040 --> 00:22:59,240
Otherwise, you would have to have like very specific exceptions for every single thing

310
00:22:59,240 --> 00:23:00,960
that happened.

311
00:23:00,960 --> 00:23:05,040
So you could see good errors over there.

312
00:23:05,040 --> 00:23:09,000
I think this has auto reload unicorn.

313
00:23:09,000 --> 00:23:17,000
So I can probably, if the demo gods are with me today, if they are not.

314
00:23:17,000 --> 00:23:20,000
Yeah, I don't think they are.

315
00:23:20,000 --> 00:23:21,000
Oh, okay, yeah.

316
00:23:21,000 --> 00:23:22,000
Because I don't know what I'm doing.

317
00:23:22,960 --> 00:23:25,960
I don't know how to write Python anymore.

318
00:23:25,960 --> 00:23:28,320
And you see like, name is not defined.

319
00:23:28,320 --> 00:23:31,320
I have to do that.

320
00:23:31,320 --> 00:23:32,320
Okay.

321
00:23:32,320 --> 00:23:37,320
Let's see if it's good now.

322
00:23:37,320 --> 00:23:42,320
Wow, it's taking a while.

323
00:23:42,320 --> 00:23:49,600
It did take a internal server error.

324
00:23:49,600 --> 00:23:53,400
Maybe I do want to log that as an error instead of an exception.

325
00:23:53,400 --> 00:23:54,880
Oh, no, I think that's good.

326
00:23:54,880 --> 00:23:55,880
That is okay.

327
00:23:55,880 --> 00:24:02,080
Let's see the log lines here.

328
00:24:02,080 --> 00:24:05,080
Let's see if we have something new.

329
00:24:05,080 --> 00:24:08,080
We should.

330
00:24:08,080 --> 00:24:09,080
Yes.

331
00:24:09,080 --> 00:24:13,520
So smaller a little bit.

332
00:24:13,520 --> 00:24:18,480
So we do have like the same exception that we had before because it's still like, raised

333
00:24:18,480 --> 00:24:21,560
it an exception over there.

334
00:24:21,560 --> 00:24:25,080
But we have a message before.

335
00:24:25,080 --> 00:24:30,680
And these two messages, also I have my error message.

336
00:24:30,680 --> 00:24:37,640
And I can say, oh, okay, description violates not new constraint because the customer didn't

337
00:24:37,640 --> 00:24:39,120
give me a description.

338
00:24:39,120 --> 00:24:40,120
So I can create a bug.

339
00:24:40,120 --> 00:24:42,320
I can fix that now.

340
00:24:42,320 --> 00:24:45,560
And I can actually understand what happened.

341
00:24:46,440 --> 00:24:52,880
And the trace ID here is also equal to the trace ID over there.

342
00:24:52,880 --> 00:24:53,880
So oops.

343
00:24:53,880 --> 00:24:56,880
It's going to laugh.

344
00:24:56,880 --> 00:25:03,360
Supposed to be like equal to this trace ID, supposed to be equal to that one.

345
00:25:03,360 --> 00:25:09,640
So you can actually like look through all log messages with that trace ID.

346
00:25:09,720 --> 00:25:17,880
And that should give you a good idea of what happened with that particular customer.

347
00:25:17,880 --> 00:25:19,920
Which is super cool.

348
00:25:19,920 --> 00:25:20,920
So okay.

349
00:25:20,920 --> 00:25:27,960
First thing we solved.

350
00:25:27,960 --> 00:25:30,360
And did I forget something?

351
00:25:30,360 --> 00:25:31,360
Yeah.

352
00:25:31,360 --> 00:25:32,360
We did plain tags.

353
00:25:32,360 --> 00:25:33,360
We added extra fields.

354
00:25:33,360 --> 00:25:37,320
New relic log gave us a little bit more traceability.

355
00:25:37,480 --> 00:25:39,720
We kept track of the IDs.

356
00:25:39,720 --> 00:25:46,960
We used roughly the right log levels because those are logs that I care about in a production

357
00:25:46,960 --> 00:25:47,960
environment.

358
00:25:47,960 --> 00:25:54,840
I could add even more logs if I wanted more information in development mode.

359
00:25:54,840 --> 00:26:03,160
So when we get to a slightly more complex performance issue, like, okay, I update a

360
00:26:03,160 --> 00:26:05,480
task and it's going to be fine.

361
00:26:05,480 --> 00:26:08,840
You're going to see that.

362
00:26:08,840 --> 00:26:12,840
And here.

363
00:26:12,840 --> 00:26:13,840
Okay.

364
00:26:13,840 --> 00:26:14,840
Updated test.

365
00:26:14,840 --> 00:26:15,840
That task.

366
00:26:15,840 --> 00:26:16,840
And it's fine.

367
00:26:16,840 --> 00:26:25,840
But if I update like a bunch of tasks, it's going to be extra, extra, extra slow.

368
00:26:25,840 --> 00:26:30,480
So New Relic is going to give us like tracing data for that.

369
00:26:30,480 --> 00:26:33,200
Extra, extra, extra slow.

370
00:26:33,240 --> 00:26:35,240
I'm doing something very, very wrong.

371
00:26:35,240 --> 00:26:36,240
Very wrong.

372
00:26:36,240 --> 00:26:39,240
So if you look at traces.

373
00:26:45,240 --> 00:26:48,240
Here you're going to have a couple of trace transactions.

374
00:26:48,240 --> 00:26:49,240
Slow transactions.

375
00:26:49,240 --> 00:26:52,240
Didn't show yet.

376
00:26:52,240 --> 00:26:55,240
But I do have one that is already.

377
00:26:55,240 --> 00:26:58,240
I have a backup link here.

378
00:27:00,240 --> 00:27:01,240
Open.

379
00:27:01,280 --> 00:27:07,280
And it really shows like by segment.

380
00:27:07,280 --> 00:27:11,280
Like the duration of the thing that I did.

381
00:27:11,280 --> 00:27:17,280
And I really did something very, very common when we do patches that I did one at a time.

382
00:27:17,280 --> 00:27:19,280
So I do 100 selects on Postgres.

383
00:27:19,280 --> 00:27:21,280
I do 50 updates.

384
00:27:21,280 --> 00:27:23,280
A couple of rollbacks.

385
00:27:23,280 --> 00:27:29,280
And I called the logger API for 50 times for every log line that I did like updating tasks.

386
00:27:29,280 --> 00:27:30,280
So I really did that.

387
00:27:30,320 --> 00:27:33,320
New Relic is giving me like the time, the duration, all of that.

388
00:27:33,320 --> 00:27:35,320
Which is something that APMs really do.

389
00:27:35,320 --> 00:27:41,320
And once you learn how to read that, performance issues get like super easy to fix on your app.

390
00:27:41,320 --> 00:27:48,320
I am not going to have time to code the actual thing that is going to fix that.

391
00:27:48,320 --> 00:27:50,320
But there is a branch here.

392
00:27:50,320 --> 00:27:54,320
Like I'm going to share that.

393
00:27:54,320 --> 00:27:56,320
Move to new window.

394
00:27:56,320 --> 00:27:59,320
There are a couple of problems here.

395
00:27:59,360 --> 00:28:08,360
One of them, like we said, like Postgres was actually we are adding a select and an update for each task.

396
00:28:08,360 --> 00:28:19,360
So actually updating your patch to do a bulk save would be like the thing to fix here.

397
00:28:19,360 --> 00:28:22,360
So we get many instead of getting just one.

398
00:28:22,360 --> 00:28:24,360
We do a bulk save here.

399
00:28:24,400 --> 00:28:25,400
We do a bulk save here.

400
00:28:25,400 --> 00:28:28,400
That also fixed the 50 updates.

401
00:28:28,400 --> 00:28:32,400
And we did just one update on Postgres, which is awesome.

402
00:28:32,400 --> 00:28:42,400
And for the log, for calling the new Relic logger a couple of times, we are still going to call the API 50 times.

403
00:28:42,400 --> 00:28:44,400
But it could make it a sync.

404
00:28:44,440 --> 00:28:54,440
I actually made the log handler asynchronous by creating a sync new Relic log handler.

405
00:28:54,440 --> 00:28:56,440
So the response is going to come back to the user.

406
00:28:56,440 --> 00:28:58,440
The response time is going to be lower.

407
00:28:58,440 --> 00:29:03,440
And the log is going to be sent to new Relic in a different sync IOL loop.

408
00:29:03,440 --> 00:29:11,440
So I'm going to open that PR and leave it right there if you want to check in a little bit.

409
00:29:11,480 --> 00:29:15,480
And let me go back to the presentation.

410
00:29:15,480 --> 00:29:19,480
We found the root cause.

411
00:29:19,480 --> 00:29:20,480
It was nice.

412
00:29:20,480 --> 00:29:22,480
I once had this problem.

413
00:29:22,480 --> 00:29:28,480
I had to process roughly 8 million messages a day and write to a Firestore database.

414
00:29:28,480 --> 00:29:34,480
We had a couple of transactions, like 132 per second.

415
00:29:34,480 --> 00:29:40,480
And that was a performance issue because it was supposed to be real time.

416
00:29:40,520 --> 00:29:49,520
New Relic showed really easily to me that my issue, my bottleneck, was a commit on Firestore.

417
00:29:49,520 --> 00:29:55,520
So that was like a real case where Firestore, I was doing a bunch of updates on Firestore

418
00:29:55,520 --> 00:29:58,520
and doing too many commits.

419
00:29:58,520 --> 00:30:00,520
And that took a lot of time.

420
00:30:00,520 --> 00:30:05,520
When I saw that on New Relic, I was able to do a bulk update on Firestore.

421
00:30:05,560 --> 00:30:10,560
And that brought it up, my performance, to like eight times faster.

422
00:30:10,560 --> 00:30:11,560
And it was great.

423
00:30:11,560 --> 00:30:14,560
It was one of the best feelings in my life.

424
00:30:14,560 --> 00:30:17,560
I think that's because I'm a nerd.

425
00:30:17,560 --> 00:30:23,560
So in this particular problem, it took us like two months to solve this because we just

426
00:30:23,560 --> 00:30:25,560
didn't have the data.

427
00:30:25,560 --> 00:30:31,560
So I was a developer of UACs with good logging practice, APM monitoring, even if turned on

428
00:30:31,560 --> 00:30:33,560
by a flag.

429
00:30:33,600 --> 00:30:38,600
They often grow too fast and observability becomes an issue faster than we are able to

430
00:30:38,600 --> 00:30:39,600
foresee.

431
00:30:39,600 --> 00:30:40,600
So thank you.

432
00:30:40,600 --> 00:30:44,600
Follow me on Twitter for random things in English, Portuguese, sometimes Spanish.

433
00:30:44,600 --> 00:30:48,600
I answer them very, very slow, but I always try.

434
00:30:48,600 --> 00:30:49,600
Slides are here, codes are here.

435
00:30:49,600 --> 00:30:50,600
Thank you so much.

436
00:30:50,600 --> 00:30:51,600
It was great talking here.

