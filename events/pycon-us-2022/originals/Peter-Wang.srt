1
00:00:00,000 --> 00:00:06,120
All right.

2
00:00:06,120 --> 00:00:09,280
And now we're just going to take a minute to switch out the speakers, but I am very

3
00:00:09,280 --> 00:00:13,520
pleased to introduce Peter Wang, the CEO and co-founder of Anaconda.

4
00:00:30,000 --> 00:00:33,000
All right.

5
00:00:33,000 --> 00:00:40,200
How's everyone doing?

6
00:00:40,200 --> 00:00:45,600
I want to give a big, big thank you to the conference organizers, to Emily, the chair,

7
00:00:45,600 --> 00:00:49,680
to everyone, all the volunteers who have worked so hard to bring us all together here.

8
00:00:49,680 --> 00:00:51,840
It is really wonderful to be in person with everyone again.

9
00:00:51,840 --> 00:00:52,840
I know everyone keeps saying that.

10
00:00:52,840 --> 00:00:55,800
I just want to reiterate how awesome it is to see everyone here.

11
00:00:55,800 --> 00:00:58,640
Actually, I can't see anyone because the lights are very bright, but I'm assuming everyone's

12
00:00:58,640 --> 00:01:00,200
out there.

13
00:01:00,200 --> 00:01:03,160
But today I'm going to go through a bunch of different things.

14
00:01:03,160 --> 00:01:04,160
I'm going to talk really fast.

15
00:01:04,160 --> 00:01:06,060
I apologize.

16
00:01:06,060 --> 00:01:09,000
But there's a lot of ground to cover, and it's super exciting.

17
00:01:09,000 --> 00:01:10,840
Some new stuff we've been working on I want to tell you about.

18
00:01:10,840 --> 00:01:15,920
But the title of my talk is Programming for Everyone, or the Next 100 Million Pythonistas.

19
00:01:15,920 --> 00:01:17,560
You'll see why I call it that.

20
00:01:17,560 --> 00:01:21,000
But to get started, for those who don't know who I am or are not familiar with Anaconda,

21
00:01:21,000 --> 00:01:24,560
I am the CEO and co-founder of Anaconda.

22
00:01:24,560 --> 00:01:30,680
And about ten years ago, Travis Oliphant, the creator of NumPy and SciPy and my co-founder,

23
00:01:30,680 --> 00:01:35,200
we had this insight that Python's scientific tools, the ones that Sarah was just talking

24
00:01:35,200 --> 00:01:40,640
about, that the scientists have been nerding out on for over a decade at that point, that

25
00:01:40,640 --> 00:01:45,000
those tools were really, really ready for prime time in business data analysis and business

26
00:01:45,000 --> 00:01:46,000
data processing.

27
00:01:46,000 --> 00:01:50,000
At the time, it was Big Data and Hadoop and all these things, but we were a couple of

28
00:01:50,000 --> 00:01:53,480
weirdos at strata conferences saying, use Python.

29
00:01:53,520 --> 00:01:57,520
And since that time, we've created a lot of things that now I hope are recognizable to

30
00:01:57,520 --> 00:02:01,600
many of you, open source tools, as well as really important things like the NumFocus

31
00:02:01,600 --> 00:02:05,320
nonprofit, the PyData conferences, a lot of different things like that.

32
00:02:05,320 --> 00:02:07,760
So that's where we started.

33
00:02:07,760 --> 00:02:12,620
And the reason why, I guess, one of the things that is really important to appreciate why

34
00:02:12,620 --> 00:02:18,640
we did this is because there's a lot of things about Python that make it different and special.

35
00:02:18,640 --> 00:02:22,240
There's a lot that we love about Python, and hopefully this is not controversial to any

36
00:02:22,240 --> 00:02:23,680
of you.

37
00:02:23,680 --> 00:02:26,880
But I think there's a lot of other languages out there.

38
00:02:26,880 --> 00:02:30,560
If we just focus on software development, there's many different choices.

39
00:02:30,560 --> 00:02:37,040
Why are we, why was Travis and I, why were we so opinionated about taking Python to data

40
00:02:37,040 --> 00:02:38,520
science and to data analysis?

41
00:02:38,520 --> 00:02:40,800
And the reason is because of these things.

42
00:02:40,800 --> 00:02:45,920
It is something that is approachable by lots of people, more than just people with CS degrees.

43
00:02:45,920 --> 00:02:50,000
And this last part, too, this last bullet point, the fact that the communities are welcoming

44
00:02:50,200 --> 00:02:54,320
and generally pretty pleasant, that's a really, really big deal, a really big deal if you

45
00:02:54,320 --> 00:02:57,040
want to keep growing user base.

46
00:02:57,040 --> 00:03:00,440
There's one other thing that people don't talk about too much, which is the Python interpreter

47
00:03:00,440 --> 00:03:07,920
has essentially an under the hood capability to be extended with native extensions, as

48
00:03:07,920 --> 00:03:09,480
we call them, binary extensions.

49
00:03:09,480 --> 00:03:13,520
So I call it like a Honda Civic with mounting bolts for warp drive.

50
00:03:13,520 --> 00:03:15,060
And so it's very unassuming.

51
00:03:15,060 --> 00:03:16,360
It's a very common sort of thing.

52
00:03:16,480 --> 00:03:19,040
Learn how to do basic scripting with Python.

53
00:03:19,040 --> 00:03:23,040
And then you go into the trunk, you pop it open, and you bolt on warp nacelles.

54
00:03:23,040 --> 00:03:25,720
And now you're running faster than C or C++ in some cases.

55
00:03:25,720 --> 00:03:27,640
You're getting direct access to GPU.

56
00:03:27,640 --> 00:03:30,520
So this is one of those other things that is a little bit underappreciated.

57
00:03:30,520 --> 00:03:33,800
It's something that's obvious to me because I've been doing this stuff for 20 years.

58
00:03:33,800 --> 00:03:35,680
But it's something I think really bears repeating.

59
00:03:35,680 --> 00:03:37,280
It's not just like every other language.

60
00:03:37,280 --> 00:03:38,280
It's not just like Node.

61
00:03:38,280 --> 00:03:40,160
It's not just an alternative to Ruby.

62
00:03:40,160 --> 00:03:45,640
The actual architecture of the CPython virtual machine itself has enabled, well, the kind

63
00:03:45,640 --> 00:03:50,600
of research you just saw, right, and research besides on cancer research, on everything,

64
00:03:50,600 --> 00:03:51,600
right?

65
00:03:51,600 --> 00:03:55,200
Like the reason why Python got picked up by Wall Street 10 years ago, 15 years ago, was

66
00:03:55,200 --> 00:03:57,920
precisely because of this warp drive capability.

67
00:03:57,920 --> 00:03:59,720
And that's what's led this incredible growth.

68
00:03:59,720 --> 00:04:03,880
If you look at these charts from Stack Overflow, from TOB, you know, this year actually just

69
00:04:03,880 --> 00:04:04,880
hot off the press.

70
00:04:04,880 --> 00:04:07,280
TOB ranked Python as number one again, continues to grow.

71
00:04:07,280 --> 00:04:11,920
We continue to add users and popularity to the language.

72
00:04:11,920 --> 00:04:14,280
But all that being said, there's some things that are not so great, right?

73
00:04:14,440 --> 00:04:18,040
So here among friends, I'm sure we can talk candidly about what sucks about Python.

74
00:04:18,040 --> 00:04:21,380
And I'll be the first to go out there and say that, you know, packaging and installing

75
00:04:21,380 --> 00:04:22,380
all the bits, right?

76
00:04:22,380 --> 00:04:27,320
On the one hand, we have a diverse ecosystem of a huge number of libraries, over 100,000

77
00:04:27,320 --> 00:04:28,600
on PyPI, I believe.

78
00:04:28,600 --> 00:04:31,680
But at the same time, getting all these to work together is difficult.

79
00:04:31,680 --> 00:04:35,600
And although there are many solutions, they all are about 80%, right?

80
00:04:35,600 --> 00:04:39,480
Which means everyone's having a bad time about 20% of the time, which is not great.

81
00:04:39,480 --> 00:04:41,520
Secondly, this is a really odd thing.

82
00:04:41,560 --> 00:04:45,560
For the world's most popular language, which we are, woohoo, the challenge is we can't

83
00:04:45,560 --> 00:04:48,480
actually build things that have interfaces with.

84
00:04:48,480 --> 00:04:52,560
Like you can't go and build an iOS app with Python very easily.

85
00:04:52,560 --> 00:04:57,680
Rolling a native application on Windows, which is what runs on most corporate desktops.

86
00:04:57,680 --> 00:04:59,560
Trying to roll an application even with a web front end.

87
00:04:59,560 --> 00:05:02,180
You have to write JavaScript and CSS and HTML.

88
00:05:02,180 --> 00:05:06,120
So the fact that it's the world's most popular programming language, but we can't easily

89
00:05:06,880 --> 00:05:12,400
with user interfaces is kind of weird, but kind of interesting, right?

90
00:05:12,400 --> 00:05:16,160
And the consequence of one and two, of course, makes it hard to share our work.

91
00:05:16,160 --> 00:05:19,320
And I know some of you are thinking, aha, but that's why I use Docker, right?

92
00:05:19,320 --> 00:05:20,320
And that's peculiar.

93
00:05:20,320 --> 00:05:23,720
When you're using Docker, you are literally compressing, zipping up a hard drive and shipping

94
00:05:23,720 --> 00:05:24,720
it to someone.

95
00:05:24,720 --> 00:05:28,760
And that cannot be our way of getting this into kids' hands and getting people, millions

96
00:05:28,760 --> 00:05:30,560
of people to be using this stuff, right?

97
00:05:30,560 --> 00:05:32,000
There's got to be something easier.

98
00:05:32,000 --> 00:05:35,080
But again, despite all these challenges, Python continues to grow.

99
00:05:35,120 --> 00:05:39,960
Python continues to be the most popular language taught in schools at every level.

100
00:05:39,960 --> 00:05:43,160
And to some extent, I think Python is the victim of its own success.

101
00:05:43,160 --> 00:05:47,040
Precisely because it's so good at gluing together so many things, it's stuck to all those things

102
00:05:47,040 --> 00:05:49,820
it glues to, because it's glue, right?

103
00:05:49,820 --> 00:05:55,320
And so much of what we do in computing is tied to ideas, architectures, things that

104
00:05:55,320 --> 00:05:58,520
were built really in the 70s and maybe the 80s.

105
00:05:58,520 --> 00:06:02,640
And that is everything from the C programming language and the Unix process model and the

106
00:06:02,680 --> 00:06:08,320
compiler tool chains around all that to concepts like common internetworking, TCPIP and all

107
00:06:08,320 --> 00:06:09,640
these other kinds of things.

108
00:06:09,640 --> 00:06:13,000
There's a lot of infrastructure that Python's able to get into the nooks and crannies of,

109
00:06:13,000 --> 00:06:15,600
but then it itself gets dragged into.

110
00:06:15,600 --> 00:06:18,000
And so the thing is the language proper.

111
00:06:18,000 --> 00:06:22,320
So if you read a Python tutorial, you can teach that to a child in an afternoon.

112
00:06:22,320 --> 00:06:25,200
You can teach that to anyone in a weekend.

113
00:06:25,200 --> 00:06:28,640
But if you really want to go beyond that, if you want to go from there to, let's say,

114
00:06:29,120 --> 00:06:36,120
a native EXE on Windows or an iOS app on an iPad, that's a lot more work than an afternoon,

115
00:06:36,120 --> 00:06:37,120
right?

116
00:06:37,120 --> 00:06:41,520
And so can we, the question I would pose is can we unshackle Python from all of this,

117
00:06:41,520 --> 00:06:42,520
right?

118
00:06:42,520 --> 00:06:46,160
When you look at the stack overflow rankings of language popularity, JavaScript's right

119
00:06:46,160 --> 00:06:49,600
up there at the number one, and then there's HTML and CSS at number two.

120
00:06:49,600 --> 00:06:52,880
Python is right there sitting comfortably on the podium at third place.

121
00:06:52,880 --> 00:06:54,660
And can we ever get over that?

122
00:06:54,660 --> 00:06:59,420
Because the browser clearly has won the operating system wars, right?

123
00:06:59,420 --> 00:07:02,060
Is it the year, is 2022 the year of Linux on the desktop?

124
00:07:02,060 --> 00:07:03,060
I don't know.

125
00:07:03,060 --> 00:07:06,900
But I'll tell you 2022, there's a lot of web browsers on desktops, right?

126
00:07:06,900 --> 00:07:10,060
And the problem with the web browser, the reason why JavaScript is stuck there as king

127
00:07:10,060 --> 00:07:14,680
in number one is because it's the native language of the web browser, right?

128
00:07:14,680 --> 00:07:19,000
And so if we want to grow beyond that, right, we have to go where the people are.

129
00:07:19,000 --> 00:07:23,440
We have to use Dinglehoppers, or rather WebAssembly, to do this, because WebAssembly fundamentally

130
00:07:23,480 --> 00:07:25,520
changes the game.

131
00:07:25,520 --> 00:07:29,880
WebAssembly for those who are not familiar, it is a virtual CPU instruction set that recently

132
00:07:29,880 --> 00:07:30,880
became a standard.

133
00:07:30,880 --> 00:07:35,600
It has a 32-bit memory space, but it supports 64-bit arithmetic.

134
00:07:35,600 --> 00:07:40,620
And there's a compiler tool called mscripten that operates as sort of a pseudo operating

135
00:07:40,620 --> 00:07:41,680
system layer.

136
00:07:41,680 --> 00:07:45,840
It compiles a lot of C and C++ code to target WebAssembly.

137
00:07:45,840 --> 00:07:48,440
And it's also WebAssembly because it's a standard.

138
00:07:48,440 --> 00:07:53,280
It's well supported by most modern browsers, including mobile browsers.

139
00:07:53,840 --> 00:07:59,320
For those of you keeping track at home, Python, CPython, is also a C program.

140
00:07:59,320 --> 00:08:04,480
A lot of the Python numerical stack is also written in C and C++.

141
00:08:04,480 --> 00:08:09,360
So the work that was done over the last couple of years by projects like Piodide and Jupyter

142
00:08:09,360 --> 00:08:13,840
Lite, they've been compiling a large part of the Python data and scientific stack to

143
00:08:13,840 --> 00:08:15,420
target WebAssembly.

144
00:08:15,420 --> 00:08:20,880
And so if you go to Piodide.org, you'll get a nice little REPL, three little friendly

145
00:08:20,880 --> 00:08:24,840
angle brackets that you can import NumPy and Pandas into.

146
00:08:24,840 --> 00:08:30,040
If you go to Jupyter Lite, you can actually get a full JupyterLab environment, no server

147
00:08:30,040 --> 00:08:31,040
process at all.

148
00:08:31,040 --> 00:08:34,320
It just completely runs in your browser.

149
00:08:34,320 --> 00:08:39,520
And most recently, Christian Himes has been talking a lot about WebAssembly and doing

150
00:08:39,520 --> 00:08:41,320
some great work on this stuff.

151
00:08:41,320 --> 00:08:47,300
WebAssembly is going to be soon getting official CPython support as a tier two supported platform.

152
00:08:47,300 --> 00:08:53,900
So again, it's a virtual CPU kind of instruction set, and it would be an alternative at an

153
00:08:53,900 --> 00:08:58,340
architecture level to things like the ARM instruction set or the x86 instruction set.

154
00:08:58,340 --> 00:09:03,020
It's just another kind of thing that the Python code base, the interpreter, can target.

155
00:09:03,020 --> 00:09:09,500
So we've been looking at this stuff for a little while at Anaconda, and we came up with

156
00:09:09,500 --> 00:09:17,300
an idea for how to really maybe leverage some of this work and increase the accessibility

157
00:09:17,300 --> 00:09:20,860
of tools like Python to many, many more people.

158
00:09:20,860 --> 00:09:25,000
And so I'm very, very excited to announce a project called PyScript.

159
00:09:25,000 --> 00:09:26,000
So what is PyScript?

160
00:09:26,000 --> 00:09:31,300
I'll show you what PyScript is.

161
00:09:32,300 --> 00:09:40,300
I realize I am live coding my first PyCon keynote here.

162
00:09:40,300 --> 00:09:44,800
Maybe my last.

163
00:09:44,800 --> 00:09:45,800
Everyone is like, what the hell?

164
00:09:45,800 --> 00:09:46,800
What's going on over here?

165
00:09:46,800 --> 00:09:51,800
Are you all ready for this?

166
00:09:51,800 --> 00:09:52,800
Whoa.

167
00:09:52,800 --> 00:10:04,800
Forgot the language I was in.

168
00:10:04,800 --> 00:10:08,800
And because we're good citizens, we're going to close out that HTML tag right there.

169
00:10:08,800 --> 00:10:11,800
So that is an HTML file, and it is stored here.

170
00:10:11,800 --> 00:10:12,800
Where's my mouse?

171
00:10:12,800 --> 00:10:13,800
There it is.

172
00:10:13,800 --> 00:10:14,800
Here it is.

173
00:10:14,800 --> 00:10:18,800
If I double click that bad boy, there it is.

174
00:10:18,800 --> 00:10:20,800
Can you guys see that?

175
00:10:22,800 --> 00:10:23,800
It's HTML.

176
00:10:23,800 --> 00:10:25,300
Let's go have a little fun with it.

177
00:10:25,300 --> 00:10:26,800
Let's have a little fun with it.

178
00:10:26,800 --> 00:10:33,800
Let's put a blink tag in here.

179
00:10:33,800 --> 00:10:35,800
I say reload.

180
00:10:35,800 --> 00:10:37,300
No blink tag.

181
00:10:37,300 --> 00:10:38,800
See, I'm old school, right?

182
00:10:38,800 --> 00:10:41,800
I came from a time when there were blink tags, and now I have to explain to kids there's

183
00:10:41,800 --> 00:10:42,800
no more blink tag.

184
00:10:42,800 --> 00:10:45,800
So we're going to have to do something a little different.

185
00:10:45,800 --> 00:10:48,800
We're going to do, we're going to create a div out here.

186
00:10:48,800 --> 00:10:51,800
I'm going to call it output.

187
00:10:51,800 --> 00:10:53,800
All right.

188
00:10:53,800 --> 00:11:04,800
In our Py script, we're going to make our own blink tag.

189
00:11:04,800 --> 00:11:11,800
See where this is going.

190
00:11:11,800 --> 00:11:21,800
Hey, Vim, I love you.

191
00:11:21,800 --> 00:11:24,800
You've got to love me back.

192
00:11:24,800 --> 00:11:26,800
All right.

193
00:11:27,800 --> 00:11:38,800
This is not going to work because code.

194
00:11:38,800 --> 00:11:39,800
All right.

195
00:11:39,800 --> 00:11:40,800
What do you guys think?

196
00:11:40,800 --> 00:11:55,800
What's going to happen?

197
00:11:55,800 --> 00:11:56,800
So that's Py script.

198
00:11:56,800 --> 00:11:57,800
So what's really going on here?

199
00:11:57,800 --> 00:11:59,800
When you look at something like this, it's very simple.

200
00:11:59,800 --> 00:12:01,800
It's about ten lines of code.

201
00:12:01,800 --> 00:12:05,800
And we are just embedding HTML in the browser.

202
00:12:05,800 --> 00:12:10,800
It's a framework for creating rich Python apps in the browser.

203
00:12:10,800 --> 00:12:12,800
We interleave Python with HTML.

204
00:12:12,800 --> 00:12:14,800
We have full access to the DOM.

205
00:12:14,800 --> 00:12:16,800
We have full access to the DOM.

206
00:12:16,800 --> 00:12:18,800
We have full access to the DOM.

207
00:12:18,800 --> 00:12:20,800
We have full access to the DOM.

208
00:12:20,800 --> 00:12:22,800
We have full access to the DOM.

209
00:12:22,800 --> 00:12:24,800
We have full access to the DOM.

210
00:12:24,800 --> 00:12:26,800
And we can call and be called by JavaScript libraries.

211
00:12:26,800 --> 00:12:28,800
So all of your app logic, all your code is in one language in the browser.

212
00:12:28,800 --> 00:12:30,800
There's actually no web server needed.

213
00:12:30,800 --> 00:12:32,800
That was just an HTML file that I double clicked.

214
00:12:32,800 --> 00:12:34,800
I could put it on a USB stick and give it to somebody and they could double click it.

215
00:12:34,800 --> 00:12:36,800
Now, granted, you're like, okay, you have a script source equals.

216
00:12:36,800 --> 00:12:38,800
Yeah, there's a little bit of something you've got to do if you want to have the script locally.

217
00:12:38,800 --> 00:12:40,800
But the point is, all of the stuff is there in the HTML.

218
00:12:40,800 --> 00:12:42,800
Okay?

219
00:12:42,800 --> 00:12:44,800
So this is how it all works.

220
00:12:44,800 --> 00:12:46,800
So we have the HTML.

221
00:12:46,800 --> 00:12:48,800
We have the HTML.

222
00:12:48,800 --> 00:12:50,800
All of the stuff is there in the HTML.

223
00:12:50,800 --> 00:12:52,800
Okay?

224
00:12:52,800 --> 00:12:54,800
So this is how it actually works.

225
00:12:54,800 --> 00:12:56,800
It is not a variant of the Python language.

226
00:12:56,800 --> 00:12:58,800
I want to be very clear.

227
00:12:58,800 --> 00:13:00,800
This is the same CPython that all of you all run on your laptops and on your servers.

228
00:13:00,800 --> 00:13:02,800
It's just been compiled to target the virtual CPU

229
00:13:02,800 --> 00:13:04,800
sitting inside the browser tab.

230
00:13:04,800 --> 00:13:06,800
and because of the Piaudide work

231
00:13:06,800 --> 00:13:08,800
from the Piaudide team, that project,

232
00:13:08,800 --> 00:13:10,800
We're able to leverage all of the NumPy and SciPy

233
00:13:10,800 --> 00:13:12,800
and a lot of the core data and scientific stack in Python.

234
00:13:12,800 --> 00:13:14,800
and a lot of the core data and scientific stack in Python.

235
00:13:14,800 --> 00:13:16,800
and a lot of the core data and scientific stack in Python.

236
00:13:16,800 --> 00:13:22,320
in Python. The PyScript infrastructure itself, it's kind of an opinionated framework with

237
00:13:22,320 --> 00:13:26,480
these tags and a way to do some FFI stuff, a way to kind of talk to the various bits

238
00:13:26,480 --> 00:13:31,880
and pieces. And the idea here is that Python, you know, we have wrapped C, C++, we've swallowed

239
00:13:31,880 --> 00:13:36,400
them, right, we've swallowed C, C++, Fortran, we can also go and wrap and call JavaScript.

240
00:13:36,400 --> 00:13:42,440
Why not? So this is actually truly serverless computing. You can run client side only. So

241
00:13:42,600 --> 00:13:49,600
let's look at a couple of additional demos. So here's a basic REPL. All right. One plus

242
00:13:49,600 --> 00:13:56,600
three. Print. Hello. Well, you guys already saw this, but there's that, right? But you

243
00:13:56,720 --> 00:14:03,720
can also do, because it's just a DOM. Well, and you got a little autocomplete thing there

244
00:14:04,760 --> 00:14:11,760
going on. So, let's look at a couple of demos. So, let's look at a couple of demos. So, let's

245
00:14:12,440 --> 00:14:19,440
look at a couple of demos. This is the most number of people I've simultaneously Rickrolled.

246
00:14:21,840 --> 00:14:28,840
So there we go. Right? Yeah, we'll get a little bit of that going on. Anyway, so that's your

247
00:14:29,440 --> 00:14:33,480
REPL, but this isn't Jupyter. I want to be very, very clear. What is this? Let's look

248
00:14:33,480 --> 00:14:40,480
at what this, what this code for this looks like. Because this is a coding conference,

249
00:14:40,480 --> 00:14:45,440
so we're looking at some code. Okay. There's some stuff here. But at the end of the day,

250
00:14:45,440 --> 00:14:52,240
you have just a little REPL. And we have this little pyreple thing. And we have this autogenerate

251
00:14:52,240 --> 00:14:56,720
equals true. So pyreple is one of the primitives that PyScript provides. Autogenerate means

252
00:14:56,720 --> 00:15:03,720
that every time you execute, it will create a new line for you. But you can also, you

253
00:15:04,320 --> 00:15:09,600
can also change where that output goes. So here, this is REPL 2. There's a lot to kind

254
00:15:09,600 --> 00:15:13,200
of parse in here. But the key thing here is we are able to redirect standard output and

255
00:15:13,200 --> 00:15:20,200
standard error to different divs. So if I go here and I load up REPL 2, I can do this.

256
00:15:26,320 --> 00:15:30,680
And this is not, just to be very clear, this is not Jupyter. Many of you are familiar with

257
00:15:30,680 --> 00:15:36,560
Jupyter as the way of authoring and doing REPLs in the browser. This is just Python

258
00:15:36,640 --> 00:15:40,120
in the browser, PyScript, and then putting your output over here. So it's really nice.

259
00:15:40,120 --> 00:15:43,760
And you can, I won't rickroll you again, but I assure you, you can get rickrolled with

260
00:15:43,760 --> 00:15:50,760
this as well in the other div. No one needs to see that again twice in one day. Let's

261
00:15:50,760 --> 00:15:55,880
see here. The other thing I want to show is this little to do app. And so, you know, when

262
00:15:55,880 --> 00:16:01,160
you do web programming, the blog post, the to do app, these are kind of canonical examples.

263
00:16:01,160 --> 00:16:08,160
So eggs, we're going to add some things here, add the task. Hold on, I got to, oh, I know

264
00:16:09,800 --> 00:16:15,160
what's going on here. This is to do that HTML. Let's do this guy. All right. So we give this

265
00:16:15,160 --> 00:16:22,160
a little second to load up the Python infrastructure. And then if we do eggs, bacon, ham, and you

266
00:16:26,840 --> 00:16:28,920
can, you know, do this sort of thing. I don't know if you can see it, but it's actually

267
00:16:28,920 --> 00:16:35,920
crossing out the item when it clicks on it. And the code for this, I will show you, the

268
00:16:36,440 --> 00:16:43,440
code for this looks, oh, really? Oh, I'm in the wrong thing. Hold on. To do dot HTML.

269
00:16:47,440 --> 00:16:52,440
There it is. Okay. So the to do list app, most of the, this is it right here. This is

270
00:16:52,440 --> 00:16:56,200
the HTML. It's about 50 lines. There's a lot of like formatting and stuff, but ultimately

271
00:16:56,200 --> 00:17:02,840
what happens is we have a button here, this new task button, and we click it, we call

272
00:17:02,840 --> 00:17:08,600
the add task function, which is actually defined in all of our actual Python logic we put in

273
00:17:08,600 --> 00:17:15,600
a little helper file here just to keep it a little bit cleaner. Okay. My Vim is, there

274
00:17:17,960 --> 00:17:22,960
it is. Okay. So your add task, what we're doing here is we're really playing with the

275
00:17:22,960 --> 00:17:27,280
DOM, we're able to pull things out, we're able to set the check mark on things, we're

276
00:17:27,280 --> 00:17:30,960
able to do all these kinds of things here. This is a really, the point here is that there's

277
00:17:30,960 --> 00:17:35,160
no, there's not a whole lot of translating back and forth to server state, to client

278
00:17:35,160 --> 00:17:38,360
state and all these other things. You're literally just writing Python, you're able to import

279
00:17:38,360 --> 00:17:44,360
that Python code right into your page here and you just kind of play with all of it.

280
00:17:44,360 --> 00:17:48,920
Right? So it all sort of works. And that's nice. Okay. These are some toy examples. That's

281
00:17:48,920 --> 00:17:53,520
kind of cool. Let's see, showing you what's going to happen. Let me just walk through

282
00:17:53,520 --> 00:17:58,440
these a little bit. So you can load the JavaScript and the CSS and all these things from a local

283
00:17:58,440 --> 00:18:03,400
server or a server you run, or you can run it off of PyScript.net. You can output to

284
00:18:03,400 --> 00:18:07,600
divs, you can do all sorts of fun things like this. The REPL can output to various different

285
00:18:07,600 --> 00:18:13,200
places so you can build a nice little flexible set of REPL things. And you can do, actually,

286
00:18:14,200 --> 00:18:21,360
this is loading all of Python in there. We're able to do more sophisticated examples. Right?

287
00:18:21,360 --> 00:18:27,040
We're able to go and load, for instance, scikit learn and the panel dashboard library with

288
00:18:27,040 --> 00:18:32,480
bokeh, plotting and things like that. And so I'm able to sit here and actually do interactive

289
00:18:32,480 --> 00:18:38,120
scikit learn in the browser with zero install. So just to be very clear, this panel came

290
00:18:38,120 --> 00:18:44,840
inside HTML, which is this guy. Okay. Again, there's a lot of stuff in the head which we'll

291
00:18:44,840 --> 00:18:49,880
clean up. This is all very alpha. But we'll make a lot of this stuff get much simpler.

292
00:18:49,880 --> 00:18:55,160
But the core of the logic here is we have Pyenv. Oh, sorry. This is plotted with Altair,

293
00:18:55,160 --> 00:19:01,160
I guess. But we're declaring what we need in the environment to run. Those things get

294
00:19:01,160 --> 00:19:07,800
loaded up. And then the actual code here for this dashboard is all this Python. Right?

295
00:19:07,800 --> 00:19:13,720
We're using Vega to declare the plots. And so you have interactive selection here and update.

296
00:19:13,720 --> 00:19:19,000
All this stuff just runs client side. And if I take this HTML file, again, similar to

297
00:19:19,000 --> 00:19:22,920
with the little REPL or any of those other examples, if I take this HTML file, I zip

298
00:19:22,920 --> 00:19:27,080
it up and give it to someone else, they can just run it. There's no install needed. So

299
00:19:27,080 --> 00:19:33,200
this is a really, really powerful example of how the distribution, the sharing, all

300
00:19:33,200 --> 00:19:37,000
those things that I said, you know, what's Python not so great at, this, because it uses

301
00:19:37,000 --> 00:19:42,440
the browser as the primary interface and as the portable CPU, it just skips over a lot of those

302
00:19:42,440 --> 00:19:47,160
kinds of challenges. But you can do one step further. You can go and say, you know, there's a lot of

303
00:19:47,160 --> 00:19:50,840
really great stuff in JavaScript. What if we could just leverage all those libraries in JavaScript?

304
00:19:50,840 --> 00:19:55,400
Deck GL is a fantastic example of one of these powerful JavaScript visualization systems.

305
00:19:56,040 --> 00:20:02,200
And this example, again, uses the panel dashboard library, embeds a little visualization of the New

306
00:20:02,200 --> 00:20:07,960
York taxi cab data. We can animate it and see how, let's make the speed a little faster. So you

307
00:20:07,960 --> 00:20:13,240
can sort of see in these hex bins the number of taxi cab pickup and drop offs there are on the

308
00:20:13,240 --> 00:20:19,160
Isle of Manhattan. But what's, and you can modify this. So you can change the radius of, you know,

309
00:20:19,160 --> 00:20:23,320
how many, how big the radius is as you're contemplating these or creating these bins.

310
00:20:23,320 --> 00:20:26,920
You can also change kind of visually, configure the thing. This is all pretty cool, right? You

311
00:20:26,920 --> 00:20:31,160
can slide this along. It's actually kind of neat. All this is running in the browser. No install.

312
00:20:31,160 --> 00:20:34,520
I could put this on a USB stick, give it to anyone here. You load up on your machine and

313
00:20:34,520 --> 00:20:43,480
it would definitely work. Maybe. But pretty much. Look, I've been doing this a while. I know not to

314
00:20:43,480 --> 00:20:47,640
make sort of these absolutes. But, you know, the other thing you could do, though, because this is

315
00:20:47,640 --> 00:20:51,960
actually running in the browser and because you have a full Python environment here, you can actually

316
00:20:51,960 --> 00:20:57,160
compile, you can just play with all of this. Right? And notice how this changed this up there.

317
00:20:58,120 --> 00:21:03,320
Let's go back to 50. Right? Oh, also you can, when you click on a thing, I don't know if you guys can

318
00:21:03,320 --> 00:21:09,000
see that, but it shows you where the taxi routes actually went to. Isn't that neat? It's actually

319
00:21:09,000 --> 00:21:15,160
a really beautiful viz. But you can also access the data frame of data itself. So the data frame,

320
00:21:15,160 --> 00:21:19,800
DF, this is in the format is a little tricky here, but it's 50,000 rows. But I can actually say,

321
00:21:19,800 --> 00:21:26,280
look, I just want to look at, let's say the data frames where the trip distance was less than five

322
00:21:26,280 --> 00:21:39,160
miles. Can you guys see that? And it's interactive. So this is, you can do more complex expressions.

323
00:21:48,040 --> 00:21:52,920
I want to find the big tippers. See what's going on here. There you go. Where did the big tippers go?

324
00:21:53,560 --> 00:21:59,960
Right? So this is a really interesting capability where you have access to all of NumPy, SciPy,

325
00:21:59,960 --> 00:22:04,120
Scikit-learn, like I showed you. All these things just sit here in the browser, and your distribution

326
00:22:04,120 --> 00:22:11,400
is, you know, copying this on a flash drive, putting this on a file share. It's a dramatic

327
00:22:11,400 --> 00:22:16,360
simplification of what has been thus far a very difficult process, especially building interactive

328
00:22:16,360 --> 00:22:21,320
web applications like this. So Gary Bernhardt many years ago gave a fantastic PyCon talk,

329
00:22:21,960 --> 00:22:27,480
not the what talk, actually, the birth and death of JavaScript, as he called it. And he talked about

330
00:22:27,480 --> 00:22:31,400
this possibility happening, ASM.js becoming WebAssembly, and we're just making it happen.

331
00:22:31,400 --> 00:22:35,640
Right? This is what this is about. So I've got some of these demos. Oh, another cool demo here is

332
00:22:36,440 --> 00:22:41,080
there's, you know, because we can wrap JavaScript libraries, here's folium, which is very nice. I'll

333
00:22:41,080 --> 00:22:46,680
let this load here. I'm on conference Wi-Fi, so it's going to take a little bit. But, you know,

334
00:22:47,000 --> 00:22:52,520
how many people here have heard of D3? Know of D3? JavaScript Vis Library? A lot of Python data

335
00:22:52,520 --> 00:22:58,600
scientists have been lusting for D3 for a very long time. In many attempts, they've made a Python

336
00:22:58,600 --> 00:23:09,320
to wrap D3. This is actually a Python wrapper of D3. The code looks like this. So part of this code

337
00:23:09,320 --> 00:23:13,800
shows you what the D3 code looks like. This is actually the D3 JavaScript code. For comparison,

338
00:23:13,800 --> 00:23:20,840
that makes the left side. The right side, this is the PyScript code. I mean, just look at this

339
00:23:20,840 --> 00:23:28,600
right here. Import to D3. We can finally do that in Python now. Right? And the cool thing about this,

340
00:23:28,600 --> 00:23:35,720
this wrapper for D3 was done by one of the team members in two days. Now, it's not complete,

341
00:23:35,720 --> 00:23:41,160
but it's a pretty good job. And so this shows the power of when we say Python wrapping things and

342
00:23:41,160 --> 00:23:44,600
calling things. Python's never been about re-implementing the world. It's always been

343
00:23:44,600 --> 00:23:48,840
about going where the things are, going where the users are, binding to them. So that's,

344
00:23:49,560 --> 00:23:56,440
that's, anyway, kind of cool there. And then there's also, of course, there's 3JS. So this

345
00:23:56,440 --> 00:24:02,440
is interactive WebGL. The logic for this is actually written in Python itself. Again,

346
00:24:05,800 --> 00:24:07,560
I forgot what it's called, though. Oh, yeah, here it is.

347
00:24:11,160 --> 00:24:14,440
So here you can see there's a little bit of preamble in the head to load some things and

348
00:24:14,440 --> 00:24:20,600
install some things, but the actual logic from JavaScript import 3, we're actually using JavaScript

349
00:24:20,600 --> 00:24:27,640
to do the math. And here you're just doing raw WebGL in Python. This is the logic to generate the

350
00:24:27,640 --> 00:24:34,680
particles, all of the animation for this. It's not bad, right? But not only can we access JavaScript

351
00:24:34,680 --> 00:24:38,360
libraries, one of the really cool things we can do, oh, here's Foleum. Nice little Foleum example.

352
00:24:41,160 --> 00:24:47,320
One of the really cool things we can do is also we can take different JavaScript libraries and

353
00:24:47,320 --> 00:24:57,640
bind them together. So let's see if we actually make this work in a live demo environment. No

354
00:24:57,640 --> 00:25:02,680
pressure. Oh, it's got to load the model up over conference Wi-Fi. I'm going to keep blaming the

355
00:25:02,680 --> 00:25:06,040
conference Wi-Fi, although I appreciate the people who set up the Wi-Fi because it's very fast.

356
00:25:06,040 --> 00:25:16,120
Okay, here we go. Start the video. And when I move my hand, it's going to make Mario jump.

357
00:25:18,520 --> 00:25:25,400
And you're going to watch me die because there's a little bit of a lag. Oh! Woo! I can't jump very

358
00:25:25,400 --> 00:25:30,680
high, though. I'll always be a little Mario. Can I do that? No. But the point is this is tying

359
00:25:30,680 --> 00:25:38,520
together two different libraries. One of them is this JavaScript Mario clone. Don't go back on a

360
00:25:38,520 --> 00:25:45,880
demo. One of them is a JavaScript Mario implementation. The other one is it's a

361
00:25:45,880 --> 00:25:58,120
JavaScript-based gesture recognition library. And so the code for this looks like this. So this is

362
00:25:58,120 --> 00:26:02,280
not one of the trivial examples, but using a mushroomfireflower.js. There's a lot to get

363
00:26:02,280 --> 00:26:07,400
loaded here. But if you look here, the Python is doing all the work of binding these things together.

364
00:26:07,400 --> 00:26:12,200
We're turning on the video. We're going to use hand track to start the video. When we go and we

365
00:26:12,200 --> 00:26:17,800
get the detection, we're going to go and look at the prediction. We're looking to see if the user's

366
00:26:17,800 --> 00:26:21,480
trying to move the thing left or right. If the hand is open or closed, then we make the jump or,

367
00:26:21,480 --> 00:26:26,760
oh, I guess crouch is closed. But we're doing this in Python to bind these two JavaScript

368
00:26:26,760 --> 00:26:32,520
libraries together to do real-time camera video recognition to play a game. And I actually didn't

369
00:26:32,520 --> 00:26:36,520
get killed by a little goop. This is actually really, really neat. I think it's pretty cool.

370
00:26:39,880 --> 00:26:44,440
To do list app. So the recap. What have we seen here? We've seen we have Python and data science

371
00:26:44,440 --> 00:26:50,440
MLAI running in the browser. We've got performant stuff. We can harness the GPU. It's good enough to

372
00:26:50,440 --> 00:26:54,760
play Super Mario. That can keep me entertained for a number of hours at least. There's zero

373
00:26:54,760 --> 00:27:00,040
install. It runs everywhere. I'm the anaconda guy. You don't have to install anaconda to use this.

374
00:27:00,040 --> 00:27:06,920
You basically get a light anaconda in WebAssembly to run all these things that you need. So the idea

375
00:27:06,920 --> 00:27:11,080
here is that the most accessible language for the web should be the language that we already love

376
00:27:11,080 --> 00:27:15,320
and know. Let's make that happen. That's PyScript. The other key thing about this, though, is if you

377
00:27:15,320 --> 00:27:19,800
think about traditional web applications, what makes them complex isn't just that JavaScript is

378
00:27:19,800 --> 00:27:25,240
kind of a terrible language. Well, I'm willing to have beers with someone about that. But the

379
00:27:25,240 --> 00:27:30,680
point is what makes really a lot of them complex is because we have this client server architecture

380
00:27:30,680 --> 00:27:35,240
that splits the server state and a lot of the half of the session state puts on the server

381
00:27:35,240 --> 00:27:39,960
and the client is all the stuff written in JavaScript or TypeScript. And so it's a really,

382
00:27:39,960 --> 00:27:44,040
it's a hodgepodge of different things. It's very complex. Actually much more complex than I think

383
00:27:44,040 --> 00:27:48,440
it needs to be. And the thing we don't talk about is the fact that because we split the session

384
00:27:48,440 --> 00:27:53,320
state in half, a tremendous amount of stuff goes back to the server that, like in the 1980s and

385
00:27:53,320 --> 00:27:57,880
1990s, you wouldn't ever send back to a server. You would just, it would be part of the object

386
00:27:57,880 --> 00:28:04,360
model state kind of living in the app itself. And this is the root of a lot of modern evils in tech.

387
00:28:05,000 --> 00:28:08,040
I think many people here who understand how this stuff works know that's true.

388
00:28:08,840 --> 00:28:14,600
So if we do PyScript, we put all this power capability on the virtual CPU here in the browser

389
00:28:14,600 --> 00:28:19,160
tab, we can get rid of all of that stuff. Now we will still need to do, we'll have to talk to

390
00:28:19,160 --> 00:28:25,240
databases, we'll need to have synchronization primitives, but if we use libp2p and we use things

391
00:28:25,240 --> 00:28:32,200
like hyper or IPFS, we could really kind of maybe bring about a version of Web3 without the NFTs.

392
00:28:32,200 --> 00:28:35,960
We could actually do something where we're building applications that are properly client-server.

393
00:28:35,960 --> 00:28:46,360
And so what's next? Well, there's a lot of work. I mean, this is really, real cool stuff. I mean,

394
00:28:46,360 --> 00:28:49,960
some of the demos I think are pretty compelling, but there's a lot of really cool things that we

395
00:28:49,960 --> 00:28:53,080
can do, right? First of all, we've got to wrap all of the cool JavaScript libraries

396
00:28:53,880 --> 00:28:58,200
and make them even cooler. Like there's a SimCity clone out there, there's DOSBox,

397
00:28:58,200 --> 00:29:03,480
like JS DOSBox, where you can go and reach into the DOS emulator for any of the games that

398
00:29:03,480 --> 00:29:08,040
the older people here grew up with. We can port other languages, right? We call it PyScript,

399
00:29:08,040 --> 00:29:11,720
but there's no reason you couldn't have the PyScript tag have a language equals and embed

400
00:29:11,720 --> 00:29:19,320
much of Julia or R or like the PyData tag having SQL in line with your Python. So there's a lot

401
00:29:19,320 --> 00:29:23,400
of really cool stuff we want to do. We'd love to get other people to help us on the project and

402
00:29:23,400 --> 00:29:27,240
everyone's collaboration on this. There's a lot of really interesting problems, like what is the

403
00:29:27,240 --> 00:29:31,960
nicest native binding to React that we can do, right? What are some better ways to do efficient

404
00:29:31,960 --> 00:29:35,240
memory transfers back and forth between Python and JavaScript? All these different kinds of

405
00:29:35,240 --> 00:29:39,880
things, right? Better tooling for debugging and things like that. And there's a lot of hard

406
00:29:39,880 --> 00:29:43,160
problems too. Obviously packaging is a hard problem. We'd have to sit down and really think

407
00:29:43,160 --> 00:29:46,680
about how we're going to do this in a way that lets people deliver secure web apps, but at the

408
00:29:46,680 --> 00:29:51,240
same time, let the community quickly iterate and move forward on things. We want to avoid

409
00:29:51,240 --> 00:29:54,840
any additional kinds of things that we've seen in the JavaScript ecosystem when there's lots of

410
00:29:54,840 --> 00:29:59,960
packages moving very quickly. So there's a lot to learn here and to think about. There's

411
00:29:59,960 --> 00:30:04,840
async and multi-threading things. There's a lot of potential here for beautiful, really cool stuff

412
00:30:04,840 --> 00:30:09,000
with multi-processing subinterpreters and server-side stuff, but at the same time, it's pretty

413
00:30:09,000 --> 00:30:13,560
subtle work. So we've got to make sure all this stuff works. And then we can actually build

414
00:30:13,560 --> 00:30:19,400
multiple interpreter backends because many of the interpreters for Python, they can be targeted for

415
00:30:19,400 --> 00:30:25,480
WebAssembly, the alternative interpreters, and with all of the extension modules being targeted

416
00:30:25,480 --> 00:30:30,600
for WebAssembly now, all the other alternative interpreters to CPython can actually be on a level

417
00:30:30,600 --> 00:30:35,080
playing ground from an extension perspective, which has not been the case for a very long time.

418
00:30:35,080 --> 00:30:38,520
The reason why everyone keeps using CPython, not because the CPython devs aren't cool, they're

419
00:30:38,520 --> 00:30:43,000
awesome, but the point is that there's a giant ecosystem of native libraries and extensions that

420
00:30:43,000 --> 00:30:47,960
only speak to CPython. So this is, but now how do we do this without burning all the devs out?

421
00:30:47,960 --> 00:30:51,160
Because this is also a lot of really hard work. So as a community, we have to get together and

422
00:30:51,160 --> 00:30:54,840
really think about this and do this thoughtfully, but I think everyone recognizes there's a massive

423
00:30:54,840 --> 00:30:58,920
price to be won here. It's absolutely massive. Ariel can get her legs. We can just go on land

424
00:30:58,920 --> 00:31:04,120
and go where the people are and solve the most fundamental and important problem, which is

425
00:31:04,120 --> 00:31:08,760
doing programming for the 99%. And what I mean by that is this. I think this is something that

426
00:31:08,760 --> 00:31:13,800
most people maybe don't think about. One of the things that I've known for a long time, but

427
00:31:13,800 --> 00:31:18,280
I think it bears repeating, is that Python has a unique position as a programming language

428
00:31:18,920 --> 00:31:24,600
because it was designed, has this design ethos from the founder of it, this creator, and all of

429
00:31:25,400 --> 00:31:31,320
the core devs around it. There's this ethos about Python being approachable as a teaching language,

430
00:31:31,320 --> 00:31:35,560
as a language to learn, really, really prioritizing education in the community.

431
00:31:35,560 --> 00:31:39,320
Things in the Zen of Python like readability counts and explicit is better than implicit.

432
00:31:39,320 --> 00:31:43,560
These are lots of these little things all come together to make it so that Python is a language

433
00:31:43,560 --> 00:31:47,960
that can be learned not just by the programmers who learn a new language every year, but by all of

434
00:31:47,960 --> 00:31:53,080
the other people in the world who don't consider themselves programmers, but they can do a little

435
00:31:53,080 --> 00:31:58,920
bit of something on their computer. This is one of the dynamics that has allowed Python to

436
00:31:58,920 --> 00:32:05,000
dominate the way it has over the last 10, 15 years. So how do we extend this? And how can

437
00:32:05,000 --> 00:32:09,880
PyScript help? One question I like to ask everyone, and just give you a moment to think about how many

438
00:32:09,880 --> 00:32:16,200
software devs are there out there in the world? 100,000? Probably more than that. 100 million?

439
00:32:16,200 --> 00:32:22,040
Definitely not. How many are there? And when I did some research into this, the numbers all seem

440
00:32:22,040 --> 00:32:25,800
to converge somewhere around 25 million. Maybe a little bit more than that, maybe a little bit

441
00:32:25,800 --> 00:32:30,040
less than that. But if you put that in perspective on how many people there are on the planet,

442
00:32:31,960 --> 00:32:38,840
it's 0.3%. So can we turn the house lights on here real quick? Is that?

443
00:32:40,120 --> 00:32:46,680
Let me do the PyScript. Turn on house lights dot. No? Okay. There's a few, I asked a few people

444
00:32:46,680 --> 00:32:51,640
beforehand as my volunteers to stand up. Can my volunteers stand up? Who are my volunteers?

445
00:32:52,680 --> 00:32:59,640
All right. Oh, house lights, it worked. PyScript works. Great. So six people.

446
00:33:01,400 --> 00:33:05,320
If this room was the population of Earth, those six people are your software developers.

447
00:33:05,880 --> 00:33:10,200
Now, can three of you, this is a distributed computing problem, can three of you sit down?

448
00:33:12,840 --> 00:33:15,720
All right. There should be just three people standing. Okay. That's your Python programmers.

449
00:33:16,360 --> 00:33:19,080
Can one of you sit down and another person crouch?

450
00:33:21,000 --> 00:33:26,600
Okay. That's your number of people who know enough stats and whatnot to do some data science in ML.

451
00:33:28,440 --> 00:33:33,960
And then if we let the crouching person finally sit down and rest their legs, the one person

452
00:33:33,960 --> 00:33:40,760
standing, that is your AI ML engineer. All the rest of you have to use the systems that she

453
00:33:41,720 --> 00:33:51,080
builds, that she twiddles the knobs for. 0.3% and actually less than that, 0.1% of the population

454
00:33:51,080 --> 00:33:57,960
has anything approaching the skills and capability to do machine learning, ML, AI. And you can turn

455
00:33:57,960 --> 00:34:02,280
the house lights off now and thank you, you can sit down as well. The point of this is that

456
00:34:03,800 --> 00:34:06,920
this is not a good state of affairs. This is the state of affairs today

457
00:34:07,640 --> 00:34:10,840
and it will continue to be the state of affairs unless we do something dramatically different.

458
00:34:11,640 --> 00:34:14,760
One of the things that I found very inspiring when I lived in Boston was the Boston Public Library had

459
00:34:14,760 --> 00:34:19,960
this huge engraving on the side. It says the Commonwealth requires the education of the people

460
00:34:19,960 --> 00:34:25,800
as a safeguard of order and liberty. So all of us here, well, many of us, most of us here are

461
00:34:25,800 --> 00:34:29,880
coders and we like to code, we like to create things. Python is a wonderful language to help

462
00:34:29,880 --> 00:34:35,080
us do all those things. But we really have to ask ourselves, why do we code? What is it for?

463
00:34:36,040 --> 00:34:40,120
And I think it's really, really, really important that we keep our eye on the prize,

464
00:34:40,120 --> 00:34:46,760
which is that democratization and literacy, computational literacy as well as data literacy

465
00:34:47,480 --> 00:34:53,880
are foundational to ensure an open and free future for mankind, for humankind, sorry, for humankind.

466
00:34:53,880 --> 00:34:58,440
So when we created SciPy and Pydata and we did all these things to try to spearhead the open data

467
00:34:58,440 --> 00:35:03,160
science movement, that was to ensure that machine learning and business computation in a cybernetic

468
00:35:03,160 --> 00:35:09,160
world had at least some open source and accessible foundations. With PyScript, I'm really hoping that

469
00:35:09,160 --> 00:35:14,440
we can broaden that mission to the broader web and to computing in general, computing for the people

470
00:35:14,440 --> 00:35:21,400
and for their communities. So I would like to see kids' first introduction to programming to be

471
00:35:21,400 --> 00:35:27,000
PyScript. Install nothing. You have a tablet, you've got a little laptop, whatever it might be.

472
00:35:27,000 --> 00:35:31,400
You can go to the library computer and you're rocking and rolling, right? We don't have to

473
00:35:31,400 --> 00:35:36,520
reinvent anything because existing educational materials on HTML and CSS and Python, all these

474
00:35:36,520 --> 00:35:42,440
just pretty much will work. We can focus on productivity and quality of life issues for

475
00:35:42,440 --> 00:35:47,560
casual programmers, not the experienced software developers because you all will happily take on a

476
00:35:47,560 --> 00:35:54,440
ton of pain, obviously. You will, if you bash your head into a wall enough, eventually the wall turns

477
00:35:54,440 --> 00:35:59,640
into a pile of yaml, right, which is a softer thing to bash your head into. And so the idea here is

478
00:35:59,880 --> 00:36:04,760
that I would love for us to make the web a friendly, hackable place where anyone can make

479
00:36:04,760 --> 00:36:09,800
interesting things and share it with other people. The remix aspect of this culture has really been

480
00:36:09,800 --> 00:36:13,560
lost, I think, in the last 20 years or so as the stacks have gotten more and more complicated.

481
00:36:14,200 --> 00:36:20,920
And so the idea here is to put joy back into all of it, really to promote creativity, for everyone

482
00:36:20,920 --> 00:36:26,920
to have fun, really want everyone to bring some crazy and quirky stuff into it. And by that, what

483
00:36:26,920 --> 00:36:31,880
I mean is something like this. You know, the old XKCD thing that everyone saw, right?

484
00:36:34,120 --> 00:36:39,480
This is this comic where Randall Munroe was first getting introduced to Python. He just loved how

485
00:36:39,480 --> 00:36:44,280
it made him feel. Of course, later he added XKCD where he made fun of the packaging mess that we

486
00:36:44,280 --> 00:36:48,920
had, so that was not so good. But, you know, can everyone see that?

487
00:36:48,920 --> 00:36:56,920
Let's do that. Let's do more of that.

488
00:37:05,640 --> 00:37:09,320
All right. Well, thank you all very much. I want to thank the people who made this possible. This

489
00:37:09,320 --> 00:37:15,720
project has been kind of crazy, but it's been a lot of fun. Fabio, where are you, Fabio? Stand up.

490
00:37:15,720 --> 00:37:22,040
I don't know where he is. He's right there. Fabio, Fabio's the man. So tremendous amount of the work.

491
00:37:22,040 --> 00:37:27,080
All the credit, kudos to him. The Anaconda team making some of these demos and, you know, my late

492
00:37:27,080 --> 00:37:30,600
night slacks and everything, thank you all very much for being so responsive and making all this

493
00:37:30,600 --> 00:37:36,040
happen. The Piodide maintainers, so Roman and Hood have been amazing to work with and so friendly.

494
00:37:36,040 --> 00:37:39,720
They have a talk on Piodide and WebAssembly if you want to nerd out on the internals. They have a

495
00:37:39,720 --> 00:37:44,040
talk later this afternoon. Please go to that talk. And then Michael Dropboom and Christian Heimson,

496
00:37:44,040 --> 00:37:47,960
very supportive and very helpful with their feedback on all of this. The project is, again,

497
00:37:47,960 --> 00:37:53,080
I just want to reiterate, super, super, super alpha, right? In fact, when you put alpha in the

498
00:37:53,080 --> 00:37:58,360
URL for the JavaScript, you are signing the EULA to say you acknowledge this is alpha. But still,

499
00:37:58,360 --> 00:38:04,040
play with it. Kind of like mess with it. Figure stuff out. Piscript.net. Come check out our open

500
00:38:04,040 --> 00:38:08,920
space that we'll have later today. Or come by the Anaconda booth. Follow us, the Piscript dev on

501
00:38:08,920 --> 00:38:15,080
Twitter. If you are the squatter that has the Piscript Twitter tag, talk to me. I'll pay you

502
00:38:15,080 --> 00:38:20,760
money for it. And then also, please contribute and give us your thoughts on GitHub. So thank you all

503
00:38:20,760 --> 00:38:25,560
very, very much.

