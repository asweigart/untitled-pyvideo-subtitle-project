1
00:00:00,000 --> 00:00:13,680
Hola, hola, buenas tardes. Vamos a comenzar ya con nuestra siguiente charla a cargo de

2
00:00:13,680 --> 00:00:22,960
Andrés Pineda, Programación Reactiva Navegando en el Mundo de la Sincronía con RxPI. Bienvenido,

3
00:00:22,960 --> 00:00:25,960
Andrés. Le puedes dar un aplauso.

4
00:00:25,960 --> 00:00:38,440
Ya yo iba a hablar al inglés. Sé que no somos mucho, pero ese aplauso no se sintió. No,

5
00:00:38,440 --> 00:00:48,240
vamos a repetirlo. Bienvenido, Andrés. Yo quiero que ustedes entiendan que cuando un

6
00:00:48,240 --> 00:00:52,160
speaker se sube aquí, el nervio que siempre tiene, por lo más preparado que tiene, ese

7
00:00:52,160 --> 00:00:58,600
aplauso lo ayuda a que se suelte un poco. Gracias. Bueno, como Denny estaba diciendo,

8
00:00:58,600 --> 00:01:04,720
la charla de hoy es sobre programación reactiva y navegando en el mundo de la programación

9
00:01:04,720 --> 00:01:14,680
asincrónica. Y para eso vamos a estar hablando sobre RxPy, RxPy, que es la librería de Python,

10
00:01:14,680 --> 00:01:22,240
pero que se utiliza para eso. ¿Quién soy yo? Mi nombre es Andrés Pineda, soy desarrollador en

11
00:01:22,240 --> 00:01:29,160
Shopify actualmente, contribuidor a librerías open source y a lo que me encanta mucho es trabajar

12
00:01:29,160 --> 00:01:33,920
con diferentes comunidades. Dos de las comunidades con las cuales estoy trabajando ahora mismo son

13
00:01:33,920 --> 00:01:40,920
Python Latam, en el cual soy uno de los organizadores, y RealPython, que aunque no es una comunidad,

14
00:01:40,920 --> 00:01:49,440
ayuda mucho a las comunidades de Python específicamente con temas de tutoriales y

15
00:01:49,440 --> 00:01:56,520
cursos de videos para que se preparen, de forma de aprendizaje de Python. La agenda para el día

16
00:01:56,520 --> 00:02:02,920
de hoy es, vamos a estar hablando de lo que es programación reactiva, hablando de reactive extension,

17
00:02:02,920 --> 00:02:10,920
extensiones reactive, RxPy, ¿qué es? Y ver un holomundo, viendo que son los subjects y operadores,

18
00:02:10,920 --> 00:02:15,360
diferentes tipos de manejo, cómo podemos manejar errores cuando estamos trabajando con programación

19
00:02:15,360 --> 00:02:24,440
reactiva y unas cuantas consideraciones desde mi punto de vista. Antes de empezar, ¿quién ha programado

20
00:02:24,440 --> 00:02:33,000
en algún lenguaje, independientemente de si es Python o no, con programación reactiva? Pues fue bien

21
00:02:33,000 --> 00:02:41,240
que, justo ayer yo tenía dos presentaciones, una era un poco más profunda sobre el tema de programación

22
00:02:41,240 --> 00:02:47,600
reactiva y dije déjame agregar unas cuantas cosas que sean para esas personas que quizás nunca han

23
00:02:47,600 --> 00:02:52,480
visto programación reactiva, lleguen a la sala y no quisiera entrar con temas muy profundos y luego

24
00:02:52,480 --> 00:02:58,640
que se vayan de aquí con nada. Esto es para que salgamos de aquí con algún conocimiento.

25
00:02:58,640 --> 00:03:07,480
Pues podemos decir que programación reactiva está enfocada en el trabajo de flujos finitos o infinitos

26
00:03:07,480 --> 00:03:14,800
de datos de manera síncrona, casi no se entiende, ¿verdad? Entonces hay un flujo de datos, la

27
00:03:14,800 --> 00:03:21,320
programación reactiva permite conectarnos a ese flujo de datos y luego poder trabajar encima de

28
00:03:21,320 --> 00:03:27,360
ese flujo de datos y hacer algo con ello. Aún siguen en el aire pero podemos verlo más adelante,

29
00:03:27,360 --> 00:03:34,960
cuando vean código. Yo sé que muchos de nosotros trabajamos mejor con código y por eso a lo largo

30
00:03:34,960 --> 00:03:41,040
de la presentación voy a estar presentando, voy a estar mostrando algunos slides de código.

31
00:03:41,040 --> 00:03:46,480
Entonces reactivex es un conjunto de herramientas que permite que la programación reactiva sea

32
00:03:46,480 --> 00:03:53,120
posible. Reactivex es el corto de reactive extension y esto fue creado, hice ese slide,

33
00:03:53,120 --> 00:04:00,160
lo iba a sacar pero lo dejé ahí por algo muy importante. Reactive extension se generó en

34
00:04:00,160 --> 00:04:08,400
Microsoft en el 2007, era algo bien interno, luego se hizo open source en el 2008 y en el 2011 fue,

35
00:04:08,400 --> 00:04:14,000
bueno en el 2011 fue que se hizo open source y de ahí en adelante diferentes lenguajes,

36
00:04:14,000 --> 00:04:19,400
diferentes comunidades comenzaron a adoptarlo y a migrarlo a otro lenguaje. Dejé ese slide por

37
00:04:19,400 --> 00:04:24,760
eso mismo porque aunque esta presentación no es sobre open source, ahí se demuestra lo importante

38
00:04:24,760 --> 00:04:31,400
que es el open source cuando una librería que se hizo originalmente para un lenguaje específico,

39
00:04:31,400 --> 00:04:38,480
en este caso fue .net, ahora mismo es utilizada por todos, todos busquen un lenguaje que no existe

40
00:04:38,480 --> 00:04:43,720
ahí. Todos los lenguajes tienen una implementación de reactive extension actualmente. La que nos

41
00:04:43,720 --> 00:04:51,040
compete en esta presentación es Python y esa implementación es la que está en el título de

42
00:04:51,040 --> 00:04:57,040
la charla que se llama Rxpi. Entonces volé una parte cuando estuve hablando de reactivex,

43
00:04:57,040 --> 00:05:03,120
reactivex es un conjunto de librerías y ese conjunto de librerías es lo que permite que se

44
00:05:03,120 --> 00:05:09,160
pueda implementar la programación reactiva en los diferentes lenguajes que vimos que ya reactivex

45
00:05:09,160 --> 00:05:18,440
está soportado. Rxpy, Rxpy, no sé cómo se produce en español, disculpe, es la implementación para

46
00:05:18,440 --> 00:05:26,880
Python de ese set de librerías, ahora mismo está en su versión 4.0, salió recientemente, marzo

47
00:05:26,880 --> 00:05:33,640
2022 está calientica y esto quiere decir, se ve que el soporte está activo, no es una librería que

48
00:05:33,640 --> 00:05:39,200
se implementó en el 2011 y que más nunca se ha vuelto a poner la mano, sino que su desarrollo y

49
00:05:39,200 --> 00:05:45,960
su soporte sigue bien activo por diferentes miembros de la comunidad. Actualmente esta

50
00:05:45,960 --> 00:05:54,080
versión desde la 3 y la 4 solamente soportan Python 3, dígase que si son de las personas que

51
00:05:54,080 --> 00:05:59,760
no han migrado a Python 3, van a tener problemas utilizando estas dos versiones, la versión 1 y

52
00:05:59,760 --> 00:06:06,400
creo que las dos son soportadas, pero ¿por qué ya migranse a Python 3? Ya han pasado suficientes años

53
00:06:06,400 --> 00:06:15,240
y Python 3 es el presente, ni siquiera el futuro. Si hacemos una fórmula, yo le llamo esto la fórmula

54
00:06:15,240 --> 00:06:23,560
de la reactividad, de reactivex, no es más que operadores, observables, operadores y observers,

55
00:06:23,560 --> 00:06:30,640
si han trabajado con programación o op en algún momento en su vida, quizá han escuchado el patrón

56
00:06:30,640 --> 00:06:45,000
observer, el observer pattern donde hay algo que emite una secuencia y hay el observador que es

57
00:06:45,480 --> 00:06:51,720
ese ente en el otro lado que se suscribe a escuchar esos cambios que existen desde el lado del

58
00:06:51,720 --> 00:06:59,040
observable. Entonces la programación reactiva es eso mismo implementado con un set de librerías.

59
00:06:59,040 --> 00:07:06,760
Entonces cuando combinamos esas tres cosas, el observable, operador res en plural, porque

60
00:07:06,760 --> 00:07:12,920
se puede utilizar más de uno y el observer, que el observer es quien va a generar la suscripción,

61
00:07:12,920 --> 00:07:20,040
luego tenemos, podemos tener acceso a los diferentes eventos que va a emitir un observable.

62
00:07:20,040 --> 00:07:26,920
El observable puede emitir tres eventos que son el onnext, que ahí va a llegar la siguiente

63
00:07:26,920 --> 00:07:33,880
secuencia, el siguiente item, va a recibir un onerror que es cuando, guess, imagínense,

64
00:07:33,880 --> 00:07:41,480
cuando ocurre un error procesando la secuencia o un oncomplete, cuando quien emite la secuencia

65
00:07:41,480 --> 00:07:49,160
le dice a quien está suscrito ya no hay más items, este es el último. Entonces en ese momento se

66
00:07:49,160 --> 00:07:58,800
recibe ese callback, son tres diferentes callbacks. Un pequeño hola mundo de la programación utilizando

67
00:07:58,800 --> 00:08:05,600
RxPI, aquí vemos diferentes cosas, pero para hacerlo más claro lo separé, es exactamente lo mismo,

68
00:08:06,160 --> 00:08:14,560
todo puede ser chain, ¿quién me ayuda con chain? anidados, conectados, las diferentes

69
00:08:14,560 --> 00:08:20,480
funciones pueden ser conectadas de forma de que el final de uno sea el inicio del otro,

70
00:08:20,480 --> 00:08:27,400
eso es lo que vemos acá en esta primera presentación, anidados, en cadenas,

71
00:08:27,400 --> 00:08:33,920
gracias. Entonces aquí lo separamos para tener más claridad y poder ver las diferentes partes

72
00:08:33,920 --> 00:08:42,440
que están tomando parte, para dar redundancia en este pequeño ejemplo. Tenemos el source,

73
00:08:42,440 --> 00:08:49,080
que si pueden ver es el observable, ahí se está generando una secuencia o un observable que va a

74
00:08:49,080 --> 00:08:57,000
tener cinco elementos, números numéricos en este caso, del uno al cinco, estamos utilizando una de

75
00:08:57,000 --> 00:09:05,000
las funciones de reactivex, como pueden ver a Rx.of estamos generando un observable desde una,

76
00:09:05,000 --> 00:09:09,240
en este caso son diferentes items, por eso se puede generar de una lista y de otra forma,

77
00:09:09,240 --> 00:09:16,120
que vamos a ver más adelante. Luego en la segunda parte tenemos operadores, vemos que el source se

78
00:09:16,120 --> 00:09:22,800
utiliza el comando pipe y dentro de pipe estamos concatenando dos diferentes cosas, estamos haciendo

79
00:09:22,800 --> 00:09:32,000
map y estamos usando el filter, son dos de los operadores que reactivex ofrece y que en este

80
00:09:32,000 --> 00:09:38,160
caso utilicé esos dos específicamente porque otros lenguajes, inclusive tenemos map y filter

81
00:09:38,160 --> 00:09:46,440
en python, pero estos no son los map y filter de python, estos son map y filter de programación

82
00:09:46,440 --> 00:09:54,160
reactiva, que como pueden ver están haciendo exactamente lo mismo, map está proyectando el

83
00:09:54,160 --> 00:10:00,280
valor que recibe y el filter lo que está haciendo es filtrando el valor y luego en la secuencia más

84
00:10:00,280 --> 00:10:09,400
adelante el observer cuando se suscribe, es cuando el observer tiene acceso a esos valores, si la

85
00:10:09,400 --> 00:10:18,760
última sección, esta sección aquí no se agrega, el programa corre completamente, llega a fin y no

86
00:10:18,760 --> 00:10:26,160
imprime nada, por qué, porque los observables solamente van a emitir, si no hay una suscripción,

87
00:10:26,160 --> 00:10:33,120
no hay nadie quien esté escuchando y en este caso es un call, un observable frío, si nadie escucha,

88
00:10:33,120 --> 00:10:39,800
yo no emito, se entendió, se entiende, observable me suscribo en ese momento que puedo recibir

89
00:10:39,800 --> 00:10:46,520
cuál es la secuencia que están pasando y por eso si yo corro ese programa ahora mismo el resultado

90
00:10:46,520 --> 00:10:54,440
sería 4 y 16, luego le explico porque el 4 y 16, bueno ustedes quizás lo entiendan porque lo que

91
00:10:54,440 --> 00:11:00,640
estamos haciendo es llevando a la base 2 y luego estamos buscando lo que sean pares y solamente el

92
00:11:00,640 --> 00:11:08,800
4 y 16 de los números del 1 al 5 que son llevados a base 2 son pares, entonces siguiendo,

93
00:11:08,800 --> 00:11:15,040
están los generadores, generadores son esas funciones que nos permiten crear secuencia de

94
00:11:15,040 --> 00:11:22,360
string, cuando estamos trabajando de forma no asíncrona la mejor forma de llevar a asíncrono

95
00:11:22,360 --> 00:11:29,200
es utilizando generadores, existen varios, son como 15, intenté ponerlos todos pero entonces la

96
00:11:29,200 --> 00:11:35,840
presentación iba a ser demasiado pero ya vimos uno, este que está en esta línea, ese es un generador,

97
00:11:35,840 --> 00:11:44,000
off es un generador, estamos generando, estamos creando un observable en base a cinco valores,

98
00:11:44,000 --> 00:11:52,160
existen generadores que son también paralistas, hay uno que se llama Rx.from list, le pasas una

99
00:11:52,160 --> 00:11:59,720
lista, hay otro que es para iterables, así por el estilo, si están entrando al mundo de la

100
00:11:59,720 --> 00:12:07,040
programación reactiva muy frecuente se van a ver utilizando este tipo de generadores porque si no

101
00:12:07,040 --> 00:12:15,000
tienen un observable que esté generando la secuencia, la única forma de que usted tiene para probar que

102
00:12:15,000 --> 00:12:19,920
las secuencias están ocurriendo es ustedes generándolo ustedes mismos y por eso que acabo

103
00:12:19,920 --> 00:12:29,160
de decir quiero mencionar este tipo de objeto que es especial, subjects, los subjects se dice que es

104
00:12:29,160 --> 00:12:36,240
especial porque es un bridge que permite que un solo objeto pueda observar y pueda ser observado,

105
00:12:36,240 --> 00:12:47,520
un subject permite ser un observable y permite ser observer y esto sirve para cuando se necesita

106
00:12:48,320 --> 00:12:57,200
crear una secuencia como lo vimos en el ejemplo anterior y tú mismo tener el poder de poder decir

107
00:12:57,200 --> 00:13:05,040
cuándo se va a generar la próxima secuencia. En este ejemplo que está aquí, cuando corremos ese

108
00:13:05,040 --> 00:13:11,280
ejercicio todos los valores pasan automáticamente porque la secuencia está en los cinco automáticamente,

109
00:13:11,280 --> 00:13:17,000
si en el mundo real tú no tienes toda la secuencia en una lista sino que la secuencia van pasando

110
00:13:17,640 --> 00:13:24,960
de forma asíncrona, por eso digo que esto es para pruebas. Cuando tú estás trabajando con

111
00:13:24,960 --> 00:13:33,040
subjects, tú te permite, es posible, tú crear un objeto que es el subject y ese objeto tú dices,

112
00:13:33,040 --> 00:13:44,120
tú tienes la potestad de decir cuándo es que vas a publicar el siguiente valor y cualquier observer

113
00:13:44,120 --> 00:13:53,160
que esté escuchando por el valor va a recibirlo en el lambda. Aquí pueden ver que lambda es algo

114
00:13:53,160 --> 00:13:57,320
diferente, el callback de subscribers es un poquito diferente al que vimos anteriormente,

115
00:13:57,320 --> 00:14:05,160
aquí solamente estamos utilizando el onNext, eso es porque tú como suscriptor o como server puedes

116
00:14:05,160 --> 00:14:11,880
simplemente escuchar por el valor, el próximo onNext o puedes escuchar por los tres colvas

117
00:14:12,760 --> 00:14:20,560
que son onComplete y onError. Entonces si corremos ese ejemplo, si corremos ese programa,

118
00:14:20,560 --> 00:14:36,160
¿qué ustedes creen que saldría en línea en la consola? ¿Alguien? ¿Solamente esos dos verdad?

119
00:14:36,560 --> 00:14:44,280
Pues has entendido completamente, ¿por qué? Porque el C nunca sale, porque hemos enviado la

120
00:14:44,280 --> 00:14:51,760
notificación de que completo, el suscriptor que está aquí, el canal automáticamente se cierra,

121
00:14:51,760 --> 00:15:01,280
en el momento que la secuencia envía un onComplete, todas las suscripciones que existían a ese

122
00:15:01,280 --> 00:15:06,800
observable se cierran, ya no pasa más nada, por eso pudiéramos imprimir, pudiéramos después del

123
00:15:06,800 --> 00:15:15,480
onComplete enviar CDEFG y solamente los suscriptores van a recibir A y B. Con los

124
00:15:15,480 --> 00:15:20,600
subject que hay diferentes tipos, aquí estamos utilizando el subject que es la clase base,

125
00:15:20,600 --> 00:15:27,800
pero también existe el behavior subject, el replace subject y el async subject, el behavior,

126
00:15:28,280 --> 00:15:38,200
dándolo de una forma rápida, permite que puedas tener acceso al último valor. Si yo emito onNextA

127
00:15:38,200 --> 00:15:45,120
y luego hago otra suscripción, quien se suscribió de forma segunda no va a recibir el onNextA,

128
00:15:46,400 --> 00:15:53,200
el exacto, el valor A, porque cuando él se suscribió ya el valor había pasado, eso es como un río,

129
00:15:53,200 --> 00:15:57,440
por eso le llaman un stream de datos, porque piensa en un río que van pasando datos y yo

130
00:15:57,440 --> 00:16:01,360
me suscribo en ese momento al río, solamente voy a tener acceso a lo que está pasando de ahí en

131
00:16:01,360 --> 00:16:08,360
adelante, lo que pasó de ahí en atrás no existe para mí, existe en forma de tener acceso y

132
00:16:08,360 --> 00:16:14,440
utilizando estos tipos que por ejemplo el behavior subject, aquí cambiaríamos a behavior subject,

133
00:16:14,440 --> 00:16:18,960
te permite tener el acceso al último valor y a todos los que vienen de ahí en adelante,

134
00:16:18,960 --> 00:16:27,960
y el replace subject te deja tener acceso a n valores, y digo n porque puedes tener, tú tienes

135
00:16:27,960 --> 00:16:35,280
la potestad de decir yo quiero tener acceso a cinco últimos valores, importante que el límite sea

136
00:16:35,280 --> 00:16:42,800
algo que no afecte el performance, porque recuerden que todo eso se va a manejar en memoria dentro del

137
00:16:42,800 --> 00:16:47,920
programa, si han pasado, tú puedes poner 100 dependiendo cuáles sean tus necesidades,

138
00:16:47,920 --> 00:16:58,280
entonces esos son los subjects, muy importante podemos decir que en la comunidad hay un debate

139
00:16:58,280 --> 00:17:05,360
en de que si debemos o no utilizar subjects, subjects muchas personas lo ven como un antiparton,

140
00:17:05,360 --> 00:17:13,840
un patrón que no debería hacerse, porque los subjects abren la puerta a que se hagan cosas que

141
00:17:13,840 --> 00:17:19,880
no son bien vistas en el mundo de la programación reactiva, entonces digo esto para que lo tomen con

142
00:17:19,880 --> 00:17:26,840
como se dice con grano de sal, de que sirven y tienen utilidad, pero cuando vayan a utilizarlo,

143
00:17:26,840 --> 00:17:33,120
verifiquen, yo puedo utilizar otros operadores que me dan el mismo resultado, si su respuesta es sí,

144
00:17:33,120 --> 00:17:39,360
no utilicen el subject, utilicen otras cosas, operadores, siguiendo con operadores,

145
00:17:39,360 --> 00:17:45,080
como hemos visto unos cuantos operadores, son esas funciones predefinidas que es lo que hacen

146
00:17:45,080 --> 00:17:52,080
de reactive extension y cualquier implementación, en este caso RAPI que es la de python, que sean

147
00:17:52,080 --> 00:17:58,680
grandiosas, porque esos operadores que ya vienen de fábrica, vienen como parte de su implementación,

148
00:17:58,840 --> 00:18:05,600
permiten que tú puedas trabajar con esos flujos de datos sin necesidad de tú tener que reescribirlos

149
00:18:05,600 --> 00:18:12,880
o de tener que hacer la lógica, los operadores son muchos y están distribuidos de esta forma,

150
00:18:12,880 --> 00:18:19,800
matemática, de transformación, de filtrado, vimos filtro de uno de filtrado, error handling,

151
00:18:19,800 --> 00:18:26,520
como trabajar con errores, utilities, creación que vimos lo que son para la parte de los generadores,

152
00:18:26,520 --> 00:18:32,840
son operadores de creación y combining operators, el de combining es uno de mis favoritos porque,

153
00:18:32,840 --> 00:18:41,360
o el grupo de combining, porque te permiten tener varias secuencias de observable y combinarlos en

154
00:18:41,360 --> 00:18:48,960
un pipeline de forma que tú, todo el flujo de cuatro secuencias, imaginemos que estamos trabajando

155
00:18:48,960 --> 00:18:54,120
con tres diferentes secuencias, estamos trabajando con una secuencia que viene de un socket,

156
00:18:54,280 --> 00:19:00,480
otra secuencia que viene de, uno viene de un socket y otro viene de un bluetooth,

157
00:19:00,480 --> 00:19:06,160
estamos escuchando bluetooth y tenemos que agrupar esas dos secuencias en un solo resultado,

158
00:19:06,160 --> 00:19:11,800
necesitamos que una comunicación que venga del socket más una comunicación de bluetooth hagan par,

159
00:19:13,280 --> 00:19:18,960
si lo hacemos de forma separado tenemos que trabajar la lógica, fácilmente la misma lógica,

160
00:19:18,960 --> 00:19:23,680
de forma separada porque son dos stream totalmente aparte, utilizando esta librería,

161
00:19:23,680 --> 00:19:33,480
Rxpi, tú puedes tener estas dos secuencias y luego combinarlas utilizando uno de los operadores de

162
00:19:33,480 --> 00:19:39,920
combine, por ejemplo combine layers, que te va a combinar el último valor de cada una de las secuencias

163
00:19:39,920 --> 00:19:44,160
y ya que tienes los valores, tú puedes trabajar encima de esos valores y aplicar cualquier lógica

164
00:19:44,160 --> 00:19:52,520
que tú necesites, eso es lo que permite trabajar con, lo que permite es una de las ventajas de estos

165
00:19:52,520 --> 00:20:00,760
operadores que ofrece Rxpi de gratis, entonces pero también podemos crear operadores custom,

166
00:20:00,760 --> 00:20:08,520
se ven de aquí no sé si se ve tan bien pero operadores custom y eso es imaginémonos que tenemos

167
00:20:09,080 --> 00:20:15,160
esta pequeña función que tiene una secuencia de stream, en este caso son nombres de países,

168
00:20:15,160 --> 00:20:21,520
queremos filtrar los que tengan el nombre de país que tenga un límite más de 8 y luego hacemos

169
00:20:21,520 --> 00:20:27,040
simplemente un oper, algo quería hacer, algo que cambiara más de un operador, eso podemos cambiarlo

170
00:20:27,040 --> 00:20:35,440
creando una función que me permita tener, encapsular los operadores que utilizamos previamente

171
00:20:35,440 --> 00:20:42,800
y luego solamente tenemos que llamar esa función que creamos, eso gracias a pipe que fue agregado

172
00:20:42,800 --> 00:20:51,400
en la función en la versión 3.0 de esta librería, entonces con esto ya sabemos el valor que tienen

173
00:20:51,400 --> 00:20:56,760
las funciones, ya podemos reutilizar si en otro lugar necesitamos hacer la misma función, podemos

174
00:20:56,760 --> 00:21:02,760
extraerla, crear una función y luego llamarlo desde otro pipeline que esté haciendo lo mismo

175
00:21:03,640 --> 00:21:10,880
y el resultado será igual, hay otra forma, aquí estamos lo que se llama creando custom operators,

176
00:21:21,720 --> 00:21:27,240
aquí estamos viendo lo que son custom operators que es agrupando diferentes operadores que ya

177
00:21:27,240 --> 00:21:33,960
existen, pero también es posible crear custom operators sin operadores y creando nosotros

178
00:21:33,960 --> 00:21:40,880
nuestros propios operadores nuestra propia funcionalidad reactiva, entonces igual se crea

179
00:21:40,880 --> 00:21:46,400
una función, en este caso tendríamos que crear una clase y dentro de la clase nosotros tenemos

180
00:21:46,400 --> 00:21:55,520
que emitir los tres tipos de callbacks que existen porque ya como estamos explicando nosotros somos

181
00:21:55,520 --> 00:22:02,400
los responsables de que quien está suscribiéndose a nosotros sepa cuando hay un error y sepa cuando

182
00:22:02,400 --> 00:22:09,800
hemos completado la secuencia y por supuesto cada secuencia que se genere, eso explicando eso es lo

183
00:22:09,800 --> 00:22:15,720
que decía, los subjects están ahí y hacen eso por nosotros y digamos que es la ruta más fácil

184
00:22:15,720 --> 00:22:21,520
pero como sabemos no siempre la ruta más fácil es la mejor en todos los casos, entonces creando

185
00:22:21,520 --> 00:22:28,720
un custom operator podemos reemplazar un subjet y nosotros tener el mismo resultado que un subjet

186
00:22:28,720 --> 00:22:35,880
nos daría, manejo de errores, el manejo de errores es algo distinto porque imaginémonos ese fue el

187
00:22:35,880 --> 00:22:41,840
primer ejemplo que estamos viendo al inicio, tenemos una lista de las unas cinco y hemos

188
00:22:41,840 --> 00:22:48,360
creado un observable y estamos suscritos a ese observable y estamos escuchando los tres callbacks,

189
00:22:48,640 --> 00:22:58,160
si corro este ejemplo que ustedes creen que pasaría, están viendo que reemplacé el número 3 por un

190
00:22:58,160 --> 00:23:03,600
string ya no es un número pero sin embargo yo estoy haciendo una operación matemática encima

191
00:23:03,600 --> 00:23:09,080
de un número, vamos a recibir un error pero sorprendentemente el error no va a ser que el

192
00:23:09,080 --> 00:23:17,040
programa crashe, no es que si hacemos esto fuera de programación de reRxpi el programa va a

193
00:23:17,040 --> 00:23:22,840
crashar, si va a haber un error, aquí el programa finaliza como pueden ver la última línea el

194
00:23:22,840 --> 00:23:29,760
programa llega hasta el final y el error fue capturado por esta línea de código, así es que se

195
00:23:29,760 --> 00:23:35,920
trabaja con errores, si los errores no hacen que la, bueno algo muy importante, si los errores hacen

196
00:23:35,920 --> 00:23:41,120
que la secuencia termine, por eso solamente se imprimió el 4 en vez de todos los valores que

197
00:23:41,120 --> 00:23:48,840
debieron imprimirse, en el momento que existe un error en la, en el trabajo de la secuencia,

198
00:23:48,840 --> 00:23:55,840
los valores que están en la secuencia, todos los valores de ahí en adelante se ignora, es el link

199
00:23:55,840 --> 00:24:02,240
que había entre el suscriptor y quien está emitiendo los valores en el momento que el error pasa,

200
00:24:02,240 --> 00:24:08,960
ya ese link se rompe, pero por lo menos nos permite a nosotros como programadores que aquí

201
00:24:08,960 --> 00:24:15,160
en el onError trabajar de forma de que si queremos reconectar vamos a tener que crear la conexión

202
00:24:15,160 --> 00:24:20,400
nuevamente, pero no tuvimos que trabajar con exception, no hay accept, no hay capture, que

203
00:24:20,400 --> 00:24:25,560
como saben eso puede hacer que el flujo de nuestros programas cambien porque eso es lo que

204
00:24:25,560 --> 00:24:32,720
es trabajar con excepciones, entonces manejo de errores, concurrencia, sin entrar mucho en

205
00:24:32,720 --> 00:24:39,240
lleno porque me queda poco tiempo, RxBit trabaja dos tipos de concurrencia, que es concurrencia

206
00:24:39,240 --> 00:24:45,720
de CPU cuando quieres hacer diferentes cosas en el CPU al mismo tiempo y concurrencia de AIO,

207
00:24:45,720 --> 00:24:51,440
mucha gente pregunta, ok si yo tengo Async AIO por qué voy a utilizar, por qué necesito RxBit,

208
00:24:51,600 --> 00:24:58,480
RxBit se apoya sobre Async AIO para dar soporte a esta concurrencia, o sea no es una competencia,

209
00:24:58,480 --> 00:25:05,240
es simplemente otra forma de hacer, así que yo solamente te da una parte de la concurrencia,

210
00:25:05,240 --> 00:25:13,840
entonces quiero finalizando, uno de los beneficios que existen cuando trabajamos con programación

211
00:25:13,840 --> 00:25:21,120
reactiva, el código se organiza de una mejor manera porque todo está en un mismo pipeline,

212
00:25:21,120 --> 00:25:27,560
no existe en la programación reactiva, no hay if, porque es basado en funcional,

213
00:25:27,560 --> 00:25:32,720
si vieron la programación reactiva es lo más cerca a programación funcional que hay,

214
00:25:32,720 --> 00:25:36,520
entonces tenemos mejor organización de código, todo está en un solo pipeline,

215
00:25:36,520 --> 00:25:43,560
hay un notable incremento de performance, un asterisco bien en grande porque el performance

216
00:25:43,560 --> 00:25:49,960
es bien relativo y también va a depender de quién haga el pipeline, quién esté programando RxBit

217
00:25:49,960 --> 00:25:55,560
porque si tienes malas prácticas programando en RxBit, aunque es un poco más difícil,

218
00:25:55,560 --> 00:26:02,200
pero igual vas a tener problemas de performance, una manera más eficiente de liberar recursos,

219
00:26:02,200 --> 00:26:07,720
una cosa que yo volé por esto que está pasando aquí cuando nos suscribimos,

220
00:26:07,720 --> 00:26:14,800
eso es un dispositivo, todas las suscripciones para cerrar la suscripción se guardan en un

221
00:26:14,800 --> 00:26:21,720
objeto que luego al llamarse disposed se rompe la suscripción que existe, o sea que si esto está

222
00:26:21,720 --> 00:26:25,360
basado en eventos, todos los eventos que nos suscribimos y que estamos escuchando,

223
00:26:25,360 --> 00:26:31,640
esa suscripción genera un objeto que tiene un método que permite romper esa suscripción,

224
00:26:31,640 --> 00:26:42,080
que es el disposed. Otra cosa muy importante es que el conocimiento que se adquiere con RxBit

225
00:26:42,080 --> 00:26:50,320
puede ser traducido a diferentes lenguajes y plataformas. Esta implementación es muy

226
00:26:50,320 --> 00:26:55,840
parecida a la que tiene RS Ruby, la que tiene RS.net, la que tiene RS.net,

227
00:26:55,840 --> 00:27:01,040
se llama Rx.net y quiere decir que si en algún momento, no se los deseo,

228
00:27:01,040 --> 00:27:04,760
pero si en algún momento se ven trabajando con un lenguaje que no sea Python,

229
00:27:04,760 --> 00:27:10,520
el conocimiento que adquirieron utilizando esta librería se transfiere a las otras librerías,

230
00:27:11,400 --> 00:27:19,440
como pudieron ver, son otra implementación desde la misma base. Pero no todo es color de rosa,

231
00:27:19,440 --> 00:27:26,160
hay cosas que son malas, que quizás no sean tan malas, pero están ahí. La clave de aprendizaje

232
00:27:26,160 --> 00:27:31,920
es un poco larga porque requiere cambiar un poquito el mindset, la forma de pensar.

233
00:27:31,920 --> 00:27:38,280
Como le mencioné, esto está muy cerca a lo que es programación funcional y si han

234
00:27:39,240 --> 00:27:44,160
hecho programación funcional, saben que se maneja diferente, no se maneja estado,

235
00:27:44,160 --> 00:27:48,640
se maneja de forma diferente y eso mismo se tiene que aplicar aquí en muchos casos.

236
00:27:51,040 --> 00:27:57,800
Complejo para debugual porque las cosas no pasan, es asíncrono, ya no puedes poner un punto

237
00:27:57,800 --> 00:28:03,060
esperando que las cosas van a pasar donde debería pasar, sino que va a pasar cuando el callback se

238
00:28:03,060 --> 00:28:10,860
ejecute, eso lo hace un poco más complejo para encontrar los errores. Y la comunidad y la

239
00:28:10,860 --> 00:28:16,780
documentación, este último quizás es a nosotros mismos, porque nosotros somos los responsables de

240
00:28:16,780 --> 00:28:24,820
que esto, de que una tecnología o no, no solamente simplemente, sino también que sea, que esté bien

241
00:28:24,820 --> 00:28:32,480
documentada. La documentación es buena, si van a read the docs, todos los que se vio aquí está y

242
00:28:32,480 --> 00:28:38,400
bien profunda, pero en español, por ejemplo, yo no encontré nada. Antes de esta presentación,

243
00:28:38,400 --> 00:28:45,760
yo quería, me estuve buscando en español para RSPY, no encontré nada. Christian, pon un tique ahí

244
00:28:45,760 --> 00:28:53,800
para quizás comenzar a apoyar a hablemos en español, hablemos de Python con una documentación de

245
00:28:53,800 --> 00:29:01,880
esta librería en progresión español. Entonces, eso es una de las cosas que yo entiendo que no

246
00:29:01,880 --> 00:29:08,760
son tan bien. ¿Dónde puedo aprender más? reactivex.io, esa es la página principal, todo lo que tiene que

247
00:29:08,760 --> 00:29:17,880
ver con reactivex y todas las implementaciones están ahí. Está RSPY, read the docs, la documentación

248
00:29:17,880 --> 00:29:24,480
está muy buena y la versión 4.0 que acaba de salir en marzo y está actualizada, eso es propio

249
00:29:24,480 --> 00:29:33,280
de read the docs y esta última, rxmarbles, eso son, esa habla sobre rsjs y es para hablar de los

250
00:29:33,280 --> 00:29:40,600
gráficos marbles. No lo traje aquí, pero le dejo el link, entren, es una forma de tú entender cómo

251
00:29:40,600 --> 00:29:46,640
la documentación, cómo la programación reactiva funciona desde quien emite, los operadores,

252
00:29:46,640 --> 00:29:53,280
los scheduler y luego el suscriptor. Nada, muchas gracias, espero que se lleven algo y

253
00:29:54,480 --> 00:30:03,360
gracias. Preguntas, dudas.

254
00:30:09,240 --> 00:30:20,720
Sí, Pytext tiene una, existen librerías que soportan hacer testing a este tipo de programación

255
00:30:20,720 --> 00:30:28,880
rxma, parte de su implementación tiene forma, te enseña de cómo tú puedes hacer testing

256
00:30:30,480 --> 00:30:33,440
con diferentes librerías de los diferentes operadores.

257
00:30:38,560 --> 00:30:48,920
¿Alguien más? ¿Caso de uso? Sí, te voy a decir que las veces que lo he implementado han sido para

258
00:30:49,160 --> 00:30:59,400
esas aplicaciones donde se requiere, donde tener la data lo más actualizado es importante. Me explico,

259
00:30:59,400 --> 00:31:05,000
yo estuve trabajando con una aplicación que tenía que ver con stocks y como saben los stocks cambian

260
00:31:05,000 --> 00:31:11,800
muy frecuentemente, el tick, hacen tick muy frecuentemente y es importante de que ese valor

261
00:31:11,800 --> 00:31:18,560
último al momento de tu darle a comprar sea el más actualizado. En ese momento implementamos

262
00:31:19,280 --> 00:31:25,760
RSPI, también implementamos, yo lo he utilizado en otros lenguajes, por ejemplo, en aplicaciones

263
00:31:25,760 --> 00:31:34,480
móviles igual salud, donde igual cuando se requiere que la información esté actualizada,

264
00:31:34,480 --> 00:31:41,280
o sea que los objetos, el state del objeto tenga la información más actualizada es donde yo le veo

265
00:31:41,280 --> 00:31:43,800
mayor valor a programación reactiva.

266
00:32:11,280 --> 00:32:23,320
Sí, y ese es un buen punto, por ejemplo, porque si tenemos la reactiva, el reactivo no puede

267
00:32:23,320 --> 00:32:28,800
empezar solamente, no puede empezar en el código, si tú tienes acceso a llevar eso fuera, por ejemplo,

268
00:32:28,800 --> 00:32:35,360
MQ, MQ le notifica a los programas sobre cosas que están ocurriendo y tú puedes fácilmente

269
00:32:35,360 --> 00:32:41,040
tener listener a esas cosas que pasan y luego crear pipeline en base a esos eventos,

270
00:32:41,200 --> 00:32:50,360
entonces ahí tú estás combinando. Lo mismo si tú tienes, si tus APIs son REST, tú no tienes forma

271
00:32:50,360 --> 00:32:55,560
de sacarle provecho porque REST no notifica, REST solamente tú puedes llamar y jalar,

272
00:32:55,560 --> 00:33:02,160
entonces hay protocolos que sí te permiten que desde el servidor, que desde otro servidor,

273
00:33:02,160 --> 00:33:09,080
notificarle a tu servidor de que algo ocurrió a nivel de data, una actualización en una data,

274
00:33:09,080 --> 00:33:13,080
entonces tú escuchas tu programa, escucha en base a esa actualización,

275
00:33:13,080 --> 00:33:15,760
entonces también tú haces tu pipeline en base a eso.

276
00:33:25,480 --> 00:33:31,400
Exactamente, esto es un wrapper para ayudar a la programación orientada a eventos,

277
00:33:31,400 --> 00:33:38,440
que provee los diferentes schedules, los comandos, los operadores y formas de,

278
00:33:38,440 --> 00:33:43,280
porque si lo hacemos como lo hacíamos de forma manual, como se hacía anteriormente,

279
00:33:43,280 --> 00:33:50,280
es mucho boilerplate código que se tiene que hacer para tener un manejo eficiente de los recursos,

280
00:33:50,280 --> 00:33:57,600
saber que estamos escuchando los eventos correctos, cómo combinar esos eventos cuando tú necesitas

281
00:33:57,600 --> 00:34:04,160
escuchar más de un evento, por ejemplo, Christian, tú que trabajas con aplicaciones de escritorio,

282
00:34:04,160 --> 00:34:09,920
hay eventos que pasan con el mouse, si tú tienes una aplicación Python que está trabajando con

283
00:34:09,920 --> 00:34:15,400
eventos de la pantalla, hay muchos eventos que pasan, que ocurren con el teclado, el mouse,

284
00:34:15,400 --> 00:34:20,800
la cámara, entonces tú puedes combinar todos esos eventos y trabajar y crear lógica de negocio

285
00:34:20,800 --> 00:34:22,400
en base a la combinación de ellos.

