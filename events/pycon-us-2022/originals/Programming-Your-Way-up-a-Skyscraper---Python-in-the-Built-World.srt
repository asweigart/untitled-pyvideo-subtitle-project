1
00:00:00,000 --> 00:00:10,160
Hello and welcome.

2
00:00:10,160 --> 00:00:16,000
Our next presentation is about to start and for this presentation we have Tadej Hakobian

3
00:00:16,000 --> 00:00:24,000
who is going to be talking about programming your way up Skye Scrapper Python in the BWR.

4
00:00:24,000 --> 00:00:27,200
Help me welcome Tadej without a round of applause.

5
00:00:27,200 --> 00:00:31,200
Thank you everyone.

6
00:00:31,200 --> 00:00:33,200
Hope you can hear me.

7
00:00:33,200 --> 00:00:37,200
And by the way if you guys want to get a preview of the presentation before I get started if you want to catch up,

8
00:00:37,200 --> 00:00:41,200
I have the QR code and the tiny URL at PyArch.

9
00:00:41,200 --> 00:00:43,200
And I'll have it again at the end.

10
00:00:43,200 --> 00:00:47,200
So let's get started.

11
00:00:47,200 --> 00:00:53,200
A little bit about me, Tadej Hakobian, a program manager, background in architecture,

12
00:00:53,200 --> 00:01:01,200
and I have experience with architecture engineering construction, using data, VR workflows.

13
00:01:01,200 --> 00:01:09,200
I've been teaching people about all these things, low code, Python coding for a couple of years now.

14
00:01:09,200 --> 00:01:13,200
And in my experience one thing that was a big deal to me is that Python makes it possible.

15
00:01:13,200 --> 00:01:19,200
And this is a showcase of how Python can support architects and design in a lot of different ways.

16
00:01:19,200 --> 00:01:27,200
And just as we talk about these examples and I go over them, consider how you use your built space,

17
00:01:27,200 --> 00:01:33,200
your environment around you, how you interact with it, and consider what it takes to get there

18
00:01:33,200 --> 00:01:41,200
as far as the design, the intent, and making the concept into reality and the challenges therein.

19
00:01:41,200 --> 00:01:45,200
So to get started.

20
00:01:45,200 --> 00:01:47,200
We've got architects.

21
00:01:47,200 --> 00:01:49,200
Architects, I mean architects.

22
00:01:49,200 --> 00:01:51,200
So when people think architecture, especially this crowd,

23
00:01:51,200 --> 00:01:54,200
we're thinking like systems, pattern languages, what have you.

24
00:01:54,200 --> 00:01:56,200
And that's a big part of it, right?

25
00:01:56,200 --> 00:02:02,200
There's a lot of people who have a CS architecture background.

26
00:02:02,200 --> 00:02:04,200
But there's also architecture.

27
00:02:04,200 --> 00:02:06,200
Look at these examples of floor plans.

28
00:02:06,200 --> 00:02:08,200
And they actually have a common ground.

29
00:02:08,200 --> 00:02:14,200
The reason there's so much jargon shared between them is that there was a source material from the 60s and 70s

30
00:02:14,200 --> 00:02:20,200
called Christopher Alexander, who was a traditional architect who talked about design patterns.

31
00:02:20,200 --> 00:02:26,200
He's like, you know, in pattern language, he's like, you know, you can repeatedly use a pattern

32
00:02:26,200 --> 00:02:32,200
for designing a building, a floor plan, using windows in a certain arrangement.

33
00:02:32,200 --> 00:02:36,200
That makes sense for a small building, for a apartment block, for a city.

34
00:02:36,200 --> 00:02:39,200
And you can just scale this up.

35
00:02:39,200 --> 00:02:47,200
And some computer science students picked up on this in the 70s and said, hey, this is a great idea.

36
00:02:47,200 --> 00:02:52,200
So they borrowed a lot of his concepts and created the idea of pattern design patterns,

37
00:02:52,200 --> 00:02:55,200
which is where you get all these ideas of architecture into computer science.

38
00:02:55,200 --> 00:03:00,200
There's actually a lot of shared knowledge between the two groups as a lot of crossover appeal.

39
00:03:00,200 --> 00:03:03,200
So there's already a lot in common.

40
00:03:03,200 --> 00:03:06,200
And talk about architecture.

41
00:03:06,200 --> 00:03:09,200
This is what people usually think about what architects do.

42
00:03:09,200 --> 00:03:17,200
They think about, you know, a guy drawing on a board, coming up with ideas, being artistic, which is a big part of it.

43
00:03:17,200 --> 00:03:24,200
But these days, that would be more of a design sketch, whereas back in the day, they would just spend all day drawing.

44
00:03:24,200 --> 00:03:31,200
They only needed to do like 20 drawing sheets to get the whole building across, a couple of facades, a couple of plans, and you're good to go.

45
00:03:31,200 --> 00:03:35,200
These days, you need a couple thousand drawings to get anything done.

46
00:03:35,200 --> 00:03:40,200
So we moved on from this to something like this.

47
00:03:40,200 --> 00:03:43,200
This is kind of how we work today.

48
00:03:43,200 --> 00:03:46,200
It's not just a two dimensional image.

49
00:03:46,200 --> 00:03:51,200
Our buildings are fully 3D realized and not just in a plain 3D geometry.

50
00:03:51,200 --> 00:04:04,200
It includes the elevation of the buildings, the geometry, the every single account of the doors, windows, gross square footage, volumes, volumes of the walls, so forth.

51
00:04:04,200 --> 00:04:07,200
So a lot of data is embedded into how we work today.

52
00:04:07,200 --> 00:04:09,200
So it's not just an image or example.

53
00:04:09,200 --> 00:04:11,200
It's the real data.

54
00:04:11,200 --> 00:04:16,200
And now that we have this data rich format, we can have an easier time accessing it.

55
00:04:16,200 --> 00:04:21,200
It was before it was literally just sketching and drawing and just not very useful data.

56
00:04:21,200 --> 00:04:25,200
And this system, for reference, is called building information modeling.

57
00:04:25,200 --> 00:04:33,200
It takes the design intent, geometry and data and put it together into a common data environment where we can have access to all this at once.

58
00:04:33,200 --> 00:04:37,200
And I have to have different ways of storing the information.

59
00:04:37,200 --> 00:04:41,200
And it's just basically a relational database.

60
00:04:41,200 --> 00:04:45,200
All you saw there is just tables connected to each other.

61
00:04:45,200 --> 00:04:48,200
And this is how it works in the world today.

62
00:04:48,200 --> 00:04:49,200
We use some software.

63
00:04:49,200 --> 00:04:56,200
I'll just use the one that's very common just as a reference in this world of building information modeling, BIM, Revit.

64
00:04:56,200 --> 00:04:58,200
It's like billions of people use it.

65
00:04:58,200 --> 00:05:02,200
So there's other ones, but we'll just use this as reference today, which itself has the 3D modeling capability.

66
00:05:02,200 --> 00:05:06,200
And databases, which can give you something like an elevation.

67
00:05:06,200 --> 00:05:07,200
It'll just create drawings.

68
00:05:07,200 --> 00:05:15,200
You probably if you had been in a building of any kind that's either been renovated or built ground up in the last 10 years, that's probably how they put it together.

69
00:05:15,200 --> 00:05:20,200
So it's a lot more data rich and accessible than it's ever been before.

70
00:05:20,200 --> 00:05:24,200
But in order to access that, we need some special tools.

71
00:05:24,200 --> 00:05:27,200
And this plaid looking thing here is called Dynamo.

72
00:05:28,200 --> 00:05:38,200
It's a low code solution that connects the data and geometry from these BIM solutions so we can manipulate it and get some custom workflows out of it.

73
00:05:38,200 --> 00:05:40,200
And it's simple as this.

74
00:05:40,200 --> 00:05:42,200
You might have seen something like this before.

75
00:05:42,200 --> 00:05:45,200
Node-RED, for example, is the one that's pretty popular out there.

76
00:05:45,200 --> 00:05:50,200
It's just what they call a graph of nodes connected to each other with wires.

77
00:05:50,200 --> 00:05:55,200
It's basically your inputs, process, outputs, low code or no code solutions.

78
00:05:55,200 --> 00:05:56,200
That's what Dynamo looks like.

79
00:05:56,200 --> 00:05:59,200
It could use it to connect to the Revit API.

80
00:05:59,200 --> 00:06:03,200
And you know, you could do anything like do arithmetic operations.

81
00:06:03,200 --> 00:06:06,200
You could put two numbers together and get a result.

82
00:06:06,200 --> 00:06:08,200
But you can go further with it.

83
00:06:08,200 --> 00:06:12,200
You can actually use it for working with geometry.

84
00:06:12,200 --> 00:06:19,200
So you can draw a line in your model, select it here and actually figure out things like how do we point something on a line, especially something like this with a curve.

85
00:06:19,200 --> 00:06:22,200
You can just put the integers in there as a slider.

86
00:06:22,200 --> 00:06:27,200
And then you can just put the numbers in there, have the code block spacing out and you get a result.

87
00:06:27,200 --> 00:06:34,200
And you can input that in your model, which is really neat because you don't have to sit there and try to figure it out yourself and draw it out or it takes forever.

88
00:06:34,200 --> 00:06:36,200
So this is really cool automation technology.

89
00:06:36,200 --> 00:06:40,200
It's visual, on the spot, and you can see the results.

90
00:06:40,200 --> 00:06:41,200
And we can go further with it.

91
00:06:41,200 --> 00:06:43,200
I can create something like a floor plan.

92
00:06:43,200 --> 00:06:45,200
Let's say a rectangular floor plan.

93
00:06:45,200 --> 00:06:47,200
On the left there, I have 30 feet and 60 feet.

94
00:06:47,200 --> 00:06:51,200
And I just tie in my X, Y, Z coordinates for four corners.

95
00:06:51,200 --> 00:07:01,200
And then over here, I have my different kinds of materials, a curtain wall and levels, how many levels I want, and a concrete slab at six inches.

96
00:07:01,200 --> 00:07:08,200
I connect the dots on that rectangular corded set to create my shape.

97
00:07:08,200 --> 00:07:16,200
And then I embed the types of equipment I want in there and materials to get some output of floors and walls and levels.

98
00:07:16,200 --> 00:07:19,200
And we go from this geometry preview to this result.

99
00:07:19,200 --> 00:07:21,200
And that's about 70 stories of a tower.

100
00:07:21,200 --> 00:07:24,200
So we just built our skyscraper in like two seconds.

101
00:07:24,200 --> 00:07:25,200
It's that quick.

102
00:07:25,200 --> 00:07:28,200
If I did that manually, it would take me an hour, maybe two.

103
00:07:28,200 --> 00:07:32,200
So it's pretty cool results you can do with Dynamo.

104
00:07:32,200 --> 00:07:34,200
And you can also do some unconventional things.

105
00:07:34,200 --> 00:07:37,200
You could take these kind of code blocks, use some kind of wavy pattern on your wall.

106
00:07:37,200 --> 00:07:42,200
You could put some art on it if you want to do something a little unique.

107
00:07:42,200 --> 00:07:43,200
And again, you can replay all of it.

108
00:07:43,200 --> 00:07:46,200
And you don't have to be an expert in coding to use it.

109
00:07:46,200 --> 00:07:48,200
And also, you can just preview geometry.

110
00:07:48,200 --> 00:08:02,200
You can play around with, connect things, just see how things play out, which is really neat if you're kind of into that whole touchy feely kind of molding clay idea, which a lot of designers are not too comfortable with just visual textual code.

111
00:08:02,200 --> 00:08:05,200
But you might be asking, this is all cool, great.

112
00:08:05,200 --> 00:08:07,200
What does that have to do with Python?

113
00:08:07,200 --> 00:08:09,200
So I'm getting there.

114
00:08:09,200 --> 00:08:12,200
It also has a Python script node within it.

115
00:08:12,200 --> 00:08:16,200
This was my kind of gateway into the world of Python years ago.

116
00:08:16,200 --> 00:08:21,200
I was really wanting to use it, but I had no way of using it at work since I didn't do anything with Python for the most part.

117
00:08:21,200 --> 00:08:23,200
But Dynamo did have one.

118
00:08:23,200 --> 00:08:25,200
It has a little ID in it.

119
00:08:25,200 --> 00:08:27,200
You just import the runtime.

120
00:08:27,200 --> 00:08:31,200
You import the geometry library that comes with Dynamo software.

121
00:08:31,200 --> 00:08:32,200
And you have an input node.

122
00:08:32,200 --> 00:08:34,200
So you have to have a wire coming in.

123
00:08:34,200 --> 00:08:35,200
And you have an output node.

124
00:08:35,200 --> 00:08:40,200
It's a little different from your typical Python script, but otherwise very similar concept.

125
00:08:40,200 --> 00:08:42,200
And what's great about it, you don't have to use the API.

126
00:08:42,200 --> 00:08:45,200
You don't have to know anything about the SDK.

127
00:08:45,200 --> 00:08:50,200
You could just use this Python script plus Dynamo to get things into your Revit database.

128
00:08:50,200 --> 00:08:52,200
And that API for Revit is a beast.

129
00:08:52,200 --> 00:08:54,200
It's not user-friendly.

130
00:08:54,200 --> 00:08:56,200
And it's nice to get around it.

131
00:08:56,200 --> 00:09:02,200
So instead of using all that, you can just run with a Python script in Dynamo.

132
00:09:02,200 --> 00:09:07,200
And it uses iron Python or C Python at this point as for implementation.

133
00:09:07,200 --> 00:09:08,200
So I can give you an example.

134
00:09:08,200 --> 00:09:11,200
We could just do a loop to make a bunch of stuff.

135
00:09:11,200 --> 00:09:12,200
In this case, this happens all the time.

136
00:09:12,200 --> 00:09:15,200
With your keystrokes, you're trying to get things into your model real quick,

137
00:09:15,200 --> 00:09:16,200
whatever you're trying to build.

138
00:09:16,200 --> 00:09:21,200
So even with a low-code script, it will take me a little bit of time to create a loop.

139
00:09:21,200 --> 00:09:24,200
Because I'm saying, OK, how can I get some coordinates going on?

140
00:09:24,200 --> 00:09:29,200
So here's an example of a little script we have here where we just import our runtime environments,

141
00:09:29,200 --> 00:09:33,200
the geometry, and then also I want to write into Revit, so I have to import the Revit stuff in here.

142
00:09:33,200 --> 00:09:36,200
And all I'm doing is saying, whatever family I want to put in there,

143
00:09:36,200 --> 00:09:40,200
family being just the object you want to put in there, create some coordinates.

144
00:09:40,200 --> 00:09:42,200
So I can just do xyz000.

145
00:09:42,200 --> 00:09:43,200
It can be an output list.

146
00:09:43,200 --> 00:09:49,200
So it's an x range at 0 to 100 feet in 20-foot increments,

147
00:09:49,200 --> 00:09:56,200
less than the for loop for y in that x range, same thing, 0 to 120, and a z in that range.

148
00:09:56,200 --> 00:10:01,200
So I get my xyzs at however many intervals and however many steps.

149
00:10:01,200 --> 00:10:06,200
And then I spit out a point by coordinates, an xyz.

150
00:10:06,200 --> 00:10:12,200
I say, OK, the column is going to be the family instance times the point by coordinates,

151
00:10:12,200 --> 00:10:14,200
and then append the column to that.

152
00:10:14,200 --> 00:10:15,200
That's it.

153
00:10:15,200 --> 00:10:18,200
So that's the entirety of the effort.

154
00:10:18,200 --> 00:10:24,200
So I could take something like that, put it into the IDE for the script, and I push out all that.

155
00:10:24,200 --> 00:10:28,200
So I get, without having a bunch of nodes and wires and all that,

156
00:10:28,200 --> 00:10:30,200
I have the entire geometry listed right there in front of me,

157
00:10:30,200 --> 00:10:33,200
which is really neat because I could hand this off to just about anybody,

158
00:10:33,200 --> 00:10:36,200
if they don't know anything about coding or Python, just change those numbers.

159
00:10:36,200 --> 00:10:37,200
They're good enough.

160
00:10:37,200 --> 00:10:40,200
It's like, yes, just use the numbers, change them, and you can figure out the rest there.

161
00:10:40,200 --> 00:10:42,200
So that's really easy to read.

162
00:10:42,200 --> 00:10:47,200
It's compact, and it's just nice because you could take that and actually push that into your model.

163
00:10:47,200 --> 00:10:53,200
Recently, I've done this where I had to do this exact same thing, like, I don't know, 6,000 times.

164
00:10:53,200 --> 00:10:57,200
I did not want to manually do that 6,000 times or any other way.

165
00:10:57,200 --> 00:11:02,200
This is just a quick, as long as you know your range, it will spit out everything pretty cleanly.

166
00:11:02,200 --> 00:11:06,200
So it's kind of things we could do here, just some basic scripting and examples

167
00:11:06,200 --> 00:11:10,200
that we can't easily attain even with those low code nodes.

168
00:11:11,200 --> 00:11:12,200
And you could take it further.

169
00:11:12,200 --> 00:11:14,200
You can put everything in the script.

170
00:11:14,200 --> 00:11:18,200
If you know what you want, you could just assign, say, width and length parameters

171
00:11:18,200 --> 00:11:24,200
and have an origin point, have an axis, and tell it to turn the axis,

172
00:11:24,200 --> 00:11:26,200
and get this cool twisting tower effect.

173
00:11:26,200 --> 00:11:29,200
So the skyscraper I had before, which was like one of the semi-levels,

174
00:11:29,200 --> 00:11:32,200
if I had to use those nodes with all the strings, that would take a minute.

175
00:11:32,200 --> 00:11:35,200
But I could use this to just, say, twist it. And twist it it does.

176
00:11:35,200 --> 00:11:37,200
And you can have a lot of fun with this.

177
00:11:37,200 --> 00:11:39,200
Again, it's pretty easy to read. There's nothing really crazy about it.

178
00:11:39,200 --> 00:11:42,200
They can get longer, of course, but these are just compact examples.

179
00:11:42,200 --> 00:11:48,200
This is an example of just very easy, accessible use of Python in the design world.

180
00:11:48,200 --> 00:11:49,200
And you could take it further.

181
00:11:49,200 --> 00:11:56,200
You can use examples of how you can do something as complicated as having these array of steel girders

182
00:11:56,200 --> 00:11:58,200
and beams aligned in a weird way.

183
00:11:58,200 --> 00:12:01,200
You can use the script to help you to create that as well.

184
00:12:01,200 --> 00:12:03,200
Otherwise, it would be a bit of an effort.

185
00:12:03,200 --> 00:12:05,200
Some of our software is not very friendly to change.

186
00:12:05,200 --> 00:12:09,200
So this is great to have something like this between the low-code solution and the code solution

187
00:12:09,200 --> 00:12:14,200
to create geometry that we can use for some cool projects.

188
00:12:14,200 --> 00:12:17,200
And you can take it even further. This example here, I'll link it.

189
00:12:17,200 --> 00:12:27,200
It's this whole sample of how you make a train station canopy with these kind of tools very quickly.

190
00:12:27,200 --> 00:12:32,200
So you can manipulate all the diamond shapes you see here without having to spend literally a month modeling

191
00:12:32,200 --> 00:12:33,200
like the old-fashioned way.

192
00:12:33,200 --> 00:12:37,200
So these are kind of possibilities we have now with Python and all these other solutions

193
00:12:37,200 --> 00:12:41,200
that we didn't have even 10 years ago.

194
00:12:41,200 --> 00:12:43,200
And that encouraged me to make my own course about it.

195
00:12:43,200 --> 00:12:46,200
This was a couple years ago that I made my own course.

196
00:12:46,200 --> 00:12:48,200
I learned about it. I studied it.

197
00:12:48,200 --> 00:12:53,200
And I created my own little course about how you can do all this stuff with Python, with Dynamo,

198
00:12:53,200 --> 00:12:55,200
in this environment, so I could show other people in the design industry

199
00:12:56,200 --> 00:12:58,200
how they can use it for all sorts of different purposes.

200
00:12:58,200 --> 00:13:01,200
And of course, like anything else with code, you do have to debug it.

201
00:13:01,200 --> 00:13:04,200
That's what happens when things don't work, when you have errors and warnings.

202
00:13:04,200 --> 00:13:07,200
You get those yellow boxes. So you're not free from errors and all that.

203
00:13:07,200 --> 00:13:13,200
It's part of the reality of any coding.

204
00:13:13,200 --> 00:13:16,200
But it's a pretty fun learning experience with this because you can see your results.

205
00:13:16,200 --> 00:13:21,200
Either you have some crazy shapes that shouldn't happen or you have way too many objects or not enough.

206
00:13:21,200 --> 00:13:24,200
So it's kind of fun to see those results pop up in front of you.

207
00:13:24,200 --> 00:13:27,200
It's very encouraging. It's a very good experience for first-term learners.

208
00:13:27,200 --> 00:13:30,200
And you might ask, what about other things? What about drawings?

209
00:13:30,200 --> 00:13:36,200
Well, here's the thing. Everything we just saw was just the Dynamo solution, which comes with the Revit software.

210
00:13:36,200 --> 00:13:42,200
There's a whole community working with Python to create their own solutions.

211
00:13:42,200 --> 00:13:47,200
This, for example, is called PyRevit. It's a rapid application prototyping solution.

212
00:13:47,200 --> 00:13:52,200
The idea here is that if you really want to, you can skip all that stuff with low code,

213
00:13:52,200 --> 00:14:00,200
and Dynamo just have this sit on top of the software, and you instead have to worry about C Sharp and the SDK and all that.

214
00:14:00,200 --> 00:14:07,200
You just run with this PyRevit solution, which is built on another open source solution called Revit Python wrapper.

215
00:14:07,200 --> 00:14:12,200
So the whole community out there, nobody really wants to use the SDK for Revit.

216
00:14:12,200 --> 00:14:15,200
That's how badly you want to get around this. It's very painful.

217
00:14:15,200 --> 00:14:17,200
So everybody just kind of made their own solutions.

218
00:14:18,200 --> 00:14:23,200
So PyRevit was on project, the RPW, the Revit Python wrapper, was another project.

219
00:14:23,200 --> 00:14:26,200
And they just put their heads together and made this.

220
00:14:26,200 --> 00:14:32,200
And what's cool is there's a whole toolbar that does a lot of automation for you out of the box, and you can make your own tools.

221
00:14:32,200 --> 00:14:38,200
And people have been doing this, using these solutions for a couple of years now.

222
00:14:38,200 --> 00:14:46,200
It's been great because you can take inside of your software, you don't have to use the low code environments directly there.

223
00:14:46,200 --> 00:14:49,200
You can share it with your coworkers as an application.

224
00:14:49,200 --> 00:14:52,200
It's all kind of prepackaged batteries included for you.

225
00:14:52,200 --> 00:14:58,200
And it looks like this. That's the monstrous API nobody wants to use. You still have to learn how to use it.

226
00:14:58,200 --> 00:15:03,200
Fun story, this website here is actually another open source project called Revit API Docs that somebody else made,

227
00:15:03,200 --> 00:15:08,200
because the API documentation that the developers released was really bad.

228
00:15:08,200 --> 00:15:14,200
So this guy basically put it online, and the developers then used it themselves.

229
00:15:14,200 --> 00:15:18,200
They probably figured out their own documentation for different versions of the software.

230
00:15:18,200 --> 00:15:23,200
So that's an open source solution to figure out all the code samples.

231
00:15:23,200 --> 00:15:28,200
And then you can use, it's kind of hard to read, but that's Python based, not C Sharp, that you can use to create your own applications,

232
00:15:28,200 --> 00:15:33,200
to do cool things like edit unconventional shapes or weird shapes and things you can't do out of the box,

233
00:15:33,200 --> 00:15:37,200
or you have to spend a lot of money on third party solutions.

234
00:15:37,200 --> 00:15:42,200
So now you can just directly edit with Python into the model, which is great.

235
00:15:42,200 --> 00:15:47,200
And if I say I created it, it works. I can share it with anybody else, all for free.

236
00:15:47,200 --> 00:15:53,200
And we also, stepping outside is also the BIM software. We have Blender, a very popular software, general modeling.

237
00:15:53,200 --> 00:15:59,200
It does a lot of cool things. And everybody, it's like one of the most popular 3D modeling software out there.

238
00:15:59,200 --> 00:16:04,200
You can use it for animation, industrial design, you name it.

239
00:16:04,200 --> 00:16:11,200
And it's written in Python, it's written in C and C++, but it has a lot of support for Python with scripting.

240
00:16:11,200 --> 00:16:14,200
And this image has nothing to do with my talk, I just thought it was really cool.

241
00:16:14,200 --> 00:16:20,200
It's kind of what you can do in Blender. It's like animations and shading. It's really cool.

242
00:16:20,200 --> 00:16:23,200
It's a really awesome software. It's pretty user friendly too.

243
00:16:23,200 --> 00:16:28,200
And it's open source, totally free. Just grab it.

244
00:16:28,200 --> 00:16:34,200
And the way it works is it uses things called meshes, primitive meshes to create geometry.

245
00:16:34,200 --> 00:16:38,200
And it's pretty easy to play around with. As you see at the bottom there, it too has a low code solution.

246
00:16:38,200 --> 00:16:44,200
So these kind of solutions are pretty popular. You can use a low code, you can use a Python scripting, you can just use the keystrokes in the UI.

247
00:16:44,200 --> 00:16:53,200
It's pretty easy to play around with. But you can't use it immediately for architectural design.

248
00:16:53,200 --> 00:16:57,200
That's where the Blender BIM Admin comes in. It's an open source software that was like,

249
00:16:57,200 --> 00:17:01,200
hey, it would be really cool if we could just use Blender to model our building information modeling.

250
00:17:01,200 --> 00:17:05,200
Because right now, Blender just meshes and geometries, doesn't do the whole database side of things.

251
00:17:05,200 --> 00:17:08,200
But if we took the geometry and meshes and push it to the database.

252
00:17:08,200 --> 00:17:15,200
So this is the middle man here that can quickly take your model ideas into a software and continue working on the database side.

253
00:17:15,200 --> 00:17:22,200
And that's what happens when you have the geometry and meshes from the Blender solution and scale it up for a building.

254
00:17:22,200 --> 00:17:33,200
And all you're doing here is just taking those meshes, making those shapes, the shapes that have solids, the solids that become loaded with walls and doors, architectural elements.

255
00:17:33,200 --> 00:17:37,200
And then you can at the end see that section of a floor plan. They can then put on a sheet.

256
00:17:37,200 --> 00:17:44,200
Very, very fast, very cool. This is kind of like everybody's dream. Just quickly do something in the software.

257
00:17:44,200 --> 00:17:49,200
And I think this is kind of where things are going. They don't want to eat it to get to their awesome ideas.

258
00:17:49,200 --> 00:17:55,200
A lot of architects and people in engineering construction, they have to eat it to get to anything nice.

259
00:17:55,200 --> 00:18:01,200
And this cuts out a lot of that. And what's really cool is you can combine Blender BIM Admin with the IFC.

260
00:18:01,200 --> 00:18:08,200
IFC is like the JSON of the BIM world. It's industry foundation classes. So it's like a non-proprietary.

261
00:18:08,200 --> 00:18:18,200
And you can use that to then take the Blender stuff, use this IFC format to then through Blender into these other softwares that you can then load as an exchangeable file.

262
00:18:18,200 --> 00:18:25,200
And then you could start editing those in your proprietary BIM software, which there's a bunch of them, not just Revit, there's a whole gang of them.

263
00:18:25,200 --> 00:18:36,200
And you can do cool stuff like this. You could take your ideas as a giant mesh or a series of meshes, create generative options of a loft of a tower like this where the base is a bigger shape and the top is a smaller shape.

264
00:18:36,200 --> 00:18:42,200
You loft that up so the top and bottom connect. You give it a twist. And before you know it, you get architecture.

265
00:18:42,200 --> 00:18:52,200
And this is an amazingly fast way of doing it all in Blender. You can push it to your other software and work with it. It's very cool stuff.

266
00:18:53,200 --> 00:19:01,200
But we're not done yet. There's also this cool Ladybug. And what's cool about Ladybug tools, it's for climate and weather analysis.

267
00:19:01,200 --> 00:19:10,200
We're increasingly concerned about how the built environment of any kind is using energy, is good for comfort.

268
00:19:10,200 --> 00:19:18,200
And so there's been a whole spread of solutions, and one of them is Ladybug. And it works with just about any popular geometry engine.

269
00:19:18,200 --> 00:19:23,200
It's all written in Python. You just pip install lbt dash Ladybug if you want to try it out. It's all free.

270
00:19:23,200 --> 00:19:31,200
And what it does is stuff like this. It can help you do solar path analysis. A big old arch tube thing, look at the top there.

271
00:19:31,200 --> 00:19:37,200
That's just every position the sun would travel throughout the year in a given latitude.

272
00:19:37,200 --> 00:19:46,200
So you can just study a building and figure out what the solar properties were, what it looks like when the sun pops in through your window,

273
00:19:46,200 --> 00:19:55,200
what parts of the room at a given time of year are getting sunlight, what aren't, what's a good way to make it a comfortable space, not too much heat, not too cold.

274
00:19:55,200 --> 00:20:03,200
So you have to run the heater to make it efficient. These are the kind of tools and solutions coming around to help people study that and make a better design, better building,

275
00:20:03,200 --> 00:20:08,200
lower energy building that has a better carbon footprint for the environment.

276
00:20:08,200 --> 00:20:13,200
And this is just an example of running in that dynamo low-code platform, but it wouldn't do a lot of other things. So that's what's nice about it.

277
00:20:13,200 --> 00:20:20,200
It's very versatile. And it has its friend, Honeybee, which also does similar things. In this case, it does visualization for data energy analysis.

278
00:20:20,200 --> 00:20:28,200
So you can figure out highs and lows throughout the year, throughout a day, 24-hour period, a six-month period, whatever.

279
00:20:28,200 --> 00:20:38,200
It gives you some visualizations. They have a whole tool set here. Now you could do this all with the tool sets, but you could also do some cool stuff with generative design and optionaries that they call it,

280
00:20:38,200 --> 00:20:48,200
where you can just use the AI machine learning tools to your advantage to figure out every possible scenario, like different sizes of your room, windows, alignments, what have you,

281
00:20:48,200 --> 00:20:58,200
get a bunch of different results and help you kind of determine what is a better set of parameters you can use to move forward with and narrow down your selection.

282
00:20:58,200 --> 00:21:09,200
So you don't have to do that manually. These are the kind of tools people are using right now for just working on buildings and structures and making sure we have really sound ideas and sound design solutions.

283
00:21:09,200 --> 00:21:16,200
And again, all done through tools that you would use from either built on Python or from Python libraries.

284
00:21:16,200 --> 00:21:26,200
And that's what's great about it. The future is just going in a direction where Python is going to be a great exchange of data between all these different sets.

285
00:21:26,200 --> 00:21:36,200
So you can feed data from all sorts of different model formats and databases, SQL, integrate them through open exchanges to Python,

286
00:21:36,200 --> 00:21:44,200
and then for Python, use your different libraries like Pandas, what have you, to get some analysis out of it so that it's not stuck.

287
00:21:44,200 --> 00:21:51,200
That's been kind of the issue with the world I'm in, in the built environment. Things get stuck in one place or another.

288
00:21:51,200 --> 00:22:06,200
They look great until, like, you want to extract data. But this is one way to release that data, is through these open standards, accessible coding solutions for people at every stage, and use Python to create some data analysis.

289
00:22:06,200 --> 00:22:17,200
And the future, moving forward, will be, like I mentioned, more data science because there's more interest in how we can use data and things like machine learning to help us understand what's going on in our buildings.

290
00:22:17,200 --> 00:22:25,200
They're very complex. You only see the facade, but there's a whole engine of stuff happening under the hood that needs to be studied.

291
00:22:25,200 --> 00:22:32,200
Building something, depending on how you look at the references, it was like 20, 25% of our carbon footprint comes from buildings.

292
00:22:32,200 --> 00:22:36,200
So how do we better design buildings that have a lower carbon impact?

293
00:22:36,200 --> 00:22:45,200
IoT, things like MicroPython that can help us develop IoT solutions, digital twin solutions to help us monitor our buildings.

294
00:22:45,200 --> 00:22:51,200
Just about everything is moving in the direction of visual twins for structures small and big.

295
00:22:51,200 --> 00:22:56,200
And everything in the building industry is also kind of like 10 years behind the times.

296
00:22:56,200 --> 00:23:05,200
So if everything was already IoT, kind of kicking off 10 years ago as a big wave, this watch is an IoT device of my heart.

297
00:23:05,200 --> 00:23:15,200
So I'm with it. So we try to see, can we do something like that for the entire structure and get some real good data of like, you know, are we using too much energy?

298
00:23:15,200 --> 00:23:24,200
Are there spaces people aren't going to because it's inconvenient? Maybe like this room.

299
00:23:24,200 --> 00:23:34,200
Custom applications. Of course, I saw the demo this morning by Peter Wang of all the cool stuff you can do with Python, PyScript with WebAssembly.

300
00:23:34,200 --> 00:23:40,200
I'm like, well, there you go. So there's also the cool custom applications. I mentioned PyRev, what have you, earlier.

301
00:23:40,200 --> 00:23:47,200
You could just, if you don't want to buy a real robust solution because you don't need it or you don't know what to do with the other tools out there,

302
00:23:47,200 --> 00:23:54,200
you can at least try to make your own tools that are a lot more compact or use somebody else's tool set that's, you know, to the point and direct solutions for what you want.

303
00:23:54,200 --> 00:24:02,200
So this is all the fields that Python can feed into. And you know, shout out to all the open source maintainers out there.

304
00:24:02,200 --> 00:24:11,200
Everything I just talked about here was an open source project. Dynamo, even though it's based on a corporate, from out of this themselves, it's an open source.

305
00:24:11,200 --> 00:24:20,200
I could make my own copy, do whatever. They're a great team. I didn't show you Grasshopper this time, but that's a similar looking thing by another corporate sponsor.

306
00:24:20,200 --> 00:24:25,200
Blender, of course, completely open source, one of the best examples of open source, PyRev and all the other tools I showed you.

307
00:24:25,200 --> 00:24:30,200
These guys are great. I would not be able to speak to you guys today if it wasn't for these kind of tools.

308
00:24:30,200 --> 00:24:36,200
So I always like to shout out, show my appreciation, and of course, the Python Software Foundation. They're awesome, too.

309
00:24:36,200 --> 00:24:43,200
And you know, programming should be fun. That's why I picked Python. JavaScript's great. C Sharp's great. They're all great.

310
00:24:43,200 --> 00:24:52,200
But Python really made me enjoy what I'm doing with architecture and design. They feel like I was hitting a wall of pain trying to figure out how to debug something.

311
00:24:52,200 --> 00:24:58,200
It was way more accessible. So that's why I like this program language.

312
00:24:59,200 --> 00:25:05,200
Just to repeat, Python makes it possible. This is the beauty of Python. It does so many things great.

313
00:25:05,200 --> 00:25:18,200
And if you find interest in any of these things, any of the solutions I've shown you today, consider getting involved in any of these things, those tool sets,

314
00:25:18,200 --> 00:25:21,200
or if you're interested in any of these things, you can reach out to me about them.

315
00:25:21,200 --> 00:25:29,200
Because really at the end, we want more people to be aware what Python could do, not just in its traditional features, but also the built world.

316
00:25:29,200 --> 00:25:40,200
I think if we all kind of put eyes on what we can do for the built environment with automation, coding, data, it'll be a better built environment.

317
00:25:40,200 --> 00:25:44,200
Because at this point, it's kind of like everybody eyeballs and uses their intuition to design.

318
00:25:44,200 --> 00:25:50,200
But if we had more robust processes and better tools, we get a better version of the future.

319
00:25:50,200 --> 00:25:56,200
So it's kind of spreading words like to get more involvement in there into Python, into the built world.

320
00:25:56,200 --> 00:26:00,200
And this is all the resources for all the stuff I showed you today.

321
00:26:00,200 --> 00:26:08,200
On the right is all the links to the different repos and learning libraries for the different software.

322
00:26:08,200 --> 00:26:14,200
And on the left there is special thanks to all the contributors. He did that Brave API site.

323
00:26:14,200 --> 00:26:22,200
Asan for PyRev, Dion, Dimon for BlunderBim, Mustafa for Vladybug, Dynamo Team, and Grasshopper Team at their companies.

324
00:26:22,200 --> 00:26:28,200
I always give a shout to them because I'm really dependent on them. So thanks to them.

325
00:26:28,200 --> 00:26:32,200
And thank you so much, guys, for attending my talk. I really appreciate it.

326
00:26:32,200 --> 00:26:37,200
I got the QR code right there if you want the link. I guess it'll be in the video.

327
00:26:37,200 --> 00:26:41,200
So if you want to reach out, I'm not hard to find. Tadej Akopyan.

328
00:26:41,200 --> 00:26:49,200
And that's it. I can open up questions or I can whatever, here down the hall, as if you guys. Thank you.

329
00:26:49,200 --> 00:27:08,200
Does anyone have any questions that would like to?

330
00:27:08,200 --> 00:27:16,200
Otherwise we can meet the speaker here later and he can answer any questions, any doubts that you have about the presentation.

331
00:27:16,200 --> 00:27:23,200
Are you one at the mic? Okay. Give me a second.

332
00:27:23,200 --> 00:27:39,200
I just wanted to ask you where you think computing for design architecture is going to go because Revit and all the many of the open source tools that you mentioned are sort of hitting Revit, which is a proprietary infrastructure.

333
00:27:39,200 --> 00:27:43,200
But you also mentioned IFC, which is the open standard for buildings.

334
00:27:43,200 --> 00:27:47,200
And I was wondering what you think about IFC or which direction is going to go.

335
00:27:47,200 --> 00:27:51,200
We're going to remain proprietary or do you think this will go fully open source?

336
00:27:51,200 --> 00:28:00,200
My hopes and dreams is that it will go very open source to the point where the proprietary software is optional.

337
00:28:00,200 --> 00:28:03,200
You can use it. Maybe I'll give you like the better version of the workflows.

338
00:28:03,200 --> 00:28:12,200
But if you don't have to use it, you can use the Blender BIM and the IFC and all that to get your work done at a pretty high level.

339
00:28:12,200 --> 00:28:30,200
Though it's really I think the way I would say is the more interest and uses of these open source solutions people are pursuing at the grassroots level, the more the I guess the proprietary software solutions have to respond to that.

340
00:28:30,200 --> 00:28:36,200
They have to listen to customer demand and they fight each other all the time with these different companies that lock you into their thing.

341
00:28:36,200 --> 00:28:40,200
And then it's like, OK, you have to use this even between the different BIM solutions from the companies.

342
00:28:40,200 --> 00:28:43,200
They don't like to share anyway. You're locked into their format.

343
00:28:43,200 --> 00:28:50,200
So if we had something like an IFC, like a real robust one, which people are getting towards and people want more of that would accelerate it.

344
00:28:50,200 --> 00:28:56,200
I think it's totally possible. But it's got to be like people have to be aware of the companies that work at the who access the software,

345
00:28:56,200 --> 00:29:02,200
who work on these kind of solutions that they do want more of that open source without locked in to a vendor.

346
00:29:02,200 --> 00:29:05,200
So I think it's just a matter of like spreading the word, spreading the knowledge.

347
00:29:05,200 --> 00:29:09,200
And the more you spread and just kind of show these examples of like this is what's possible.

348
00:29:09,200 --> 00:29:12,200
It's pretty accessible. Then the more it will gain traction.

349
00:29:12,200 --> 00:29:15,200
So it's a matter of like grassroots movement in that direction.

350
00:29:15,200 --> 00:29:23,200
I do really think that so long as the people want it, the users want it, the companies, the vendors will respond and make it a lot more IFC friendly.

351
00:29:24,200 --> 00:29:31,200
But I'm not sure if it'll be IFC as like on the like we call like a let's call it a desktop version of it versus the Web.

352
00:29:31,200 --> 00:29:37,200
I'm not sure what would it all be going through the Web because everything's easier on the Web exchanges.

353
00:29:37,200 --> 00:29:43,200
It's a little more open there versus like exporting a file, manipulating that a little more.

354
00:29:43,200 --> 00:29:45,200
That's a little more old fashioned. A lot of friction.

355
00:29:45,200 --> 00:29:48,200
A lot of friction. So there might be a marriage between the IFC solution.

356
00:29:48,200 --> 00:29:53,200
I believe there is an IFC.JS that can help.

357
00:29:53,200 --> 00:30:00,200
So it might move in different directions, but I think it will move eventually the direction of like a better version of IFC if the people want it.

358
00:30:00,200 --> 00:30:04,200
I'm optimistic.

359
00:30:04,200 --> 00:30:11,200
So any other question, please? Today we'll be more than glad to continue this discussion.

360
00:30:11,200 --> 00:30:16,200
I'm sorry we run out of time, but as I said, he will be more than glad to continue the discussion.

361
00:30:16,200 --> 00:30:19,200
And thank you, Tede, for the great presentation.

362
00:30:19,200 --> 00:30:20,200
Thank you.

