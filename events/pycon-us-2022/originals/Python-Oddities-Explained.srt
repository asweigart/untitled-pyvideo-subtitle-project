1
00:00:00,000 --> 00:00:14,960
All right. So is everyone awake? Sort of. Okay. So my name is Trey and I help folks level

2
00:00:14,960 --> 00:00:19,520
up their Python skills through on-site and remote team training, mostly remote the last

3
00:00:19,520 --> 00:00:24,260
couple of years for obvious reasons, and with Python Morsels which helps experienced programmers

4
00:00:24,260 --> 00:00:30,140
develop a habit of deepening your Python skills every single week through hands-on learning

5
00:00:30,140 --> 00:00:34,180
because you don't learn by putting information into your head by trying to retrieve information

6
00:00:34,180 --> 00:00:40,540
from your head that you actually learn. So when I do team trainings, I often see some

7
00:00:40,540 --> 00:00:47,460
very weird code because my students are playing with Python, which is lovely because playing

8
00:00:47,460 --> 00:00:53,460
is a wonderful way to learn. Sometimes though, when I'm trying to explain something that

9
00:00:53,460 --> 00:01:00,180
Python is doing, I realize that I don't really know what Python is doing. Or at least I don't

10
00:01:00,180 --> 00:01:06,380
understand why it's doing what it's doing. So this talk was inspired by all of the individuals

11
00:01:06,380 --> 00:01:11,780
who asked me weird and confusing questions while I was holding a Python workshop at your

12
00:01:11,780 --> 00:01:18,420
company. So thank you for your confusion. This is a Python 3 only talk. If this was

13
00:01:18,420 --> 00:01:23,460
a Python 2 oddities talk, it would be much longer and much funnier. Feel free to ask

14
00:01:23,460 --> 00:01:28,940
me questions about Python 2 oddities later if you're strangely interested. All right,

15
00:01:28,940 --> 00:01:35,140
let's get started. So first I would like to talk about variables. Let's say we have a

16
00:01:35,140 --> 00:01:43,920
variable X that is equal to zero. And let's say we have a variable numbers, and that variable

17
00:01:43,920 --> 00:01:51,760
points to a list of numbers. If we loop over this list of numbers and assign Y to the square of each

18
00:01:51,760 --> 00:01:57,480
of these numbers, what do you think Y will be after this loop? What's your guess? Who thinks

19
00:01:57,480 --> 00:02:02,600
it'll be zero? Who thinks it'll be eight? Who thinks it'll be 64? Who thinks it's an error?

20
00:02:02,600 --> 00:02:08,120
We can't see what Y is. So it turns out we can see what Y is. It's 64. And if we access X,

21
00:02:08,120 --> 00:02:15,840
who thinks it's zero? X is still zero. Who thinks it's eight? Who thinks it's something else? So

22
00:02:15,840 --> 00:02:20,600
it's not something else. I'm not sure what you were thinking it was though. It's eight. And it's eight

23
00:02:20,600 --> 00:02:25,440
because inside of a loop, variables leak their scope. Loops don't have their own separate scope.

24
00:02:25,440 --> 00:02:31,840
So this 4X in numbers, this is actually an assignment that happens during each iteration

25
00:02:31,840 --> 00:02:36,080
of our loop. It works the same way that an assignment statement happens with an equal sign. The part

26
00:02:36,080 --> 00:02:40,880
between the 4 and the in, that X there is the same thing as the left-hand side of an equal sign.

27
00:02:40,880 --> 00:02:46,000
So if we take those same X and the same numbers variables and we make a list comprehension

28
00:02:46,000 --> 00:02:50,480
representing the squares of these numbers, and we use that X as our looping variable,

29
00:02:50,480 --> 00:02:55,760
what do you think X will be after we've executed this code? Who thinks it's zero this time? It wasn't

30
00:02:55,760 --> 00:03:01,040
zero before. Who thinks it's eight this time? Still eight. So it was eight in Python 2, but

31
00:03:01,040 --> 00:03:05,880
it's zero in Python 3, which is kind of nice. List comprehensions have their own scope. That's the

32
00:03:05,880 --> 00:03:10,680
last time I'm going to mention Python 2. It's just Python 3 from here on out. So let's say we have a

33
00:03:10,680 --> 00:03:16,920
global variable numbers, and we want to add more numbers to that by using the plus equals operator.

34
00:03:16,920 --> 00:03:21,080
What do you think will happen if we call add numbers, this function here with the list four,

35
00:03:21,080 --> 00:03:28,360
five, six? Now, it could modify numbers. It could just give us an error. It could make a local

36
00:03:28,360 --> 00:03:32,440
variable number. So who thinks it's going to give us an error? Who thinks it's going to make a local

37
00:03:32,440 --> 00:03:36,440
variable numbers? Won't modify the global. Who thinks it's going to modify that global variable

38
00:03:36,440 --> 00:03:40,040
numbers? So very mixed here. Most of you seem a little bit confused about what it's going to do.

39
00:03:40,040 --> 00:03:45,720
As you should be, this is a strange thing to do. It turns out it gives us an error. It gives us an

40
00:03:45,720 --> 00:03:50,520
error because this plus equals operator both reads from and assigns to the variable that's on the

41
00:03:50,520 --> 00:03:55,960
left-hand side. So we're trying to read from a global variable and assign to a global variable,

42
00:03:55,960 --> 00:04:01,960
and Python doesn't like that. But it's not because of the plus equals, not in particular. If instead

43
00:04:01,960 --> 00:04:08,520
we used an equals with a plus, we would still get an error. When we defined this function, Python

44
00:04:08,520 --> 00:04:14,920
actually parsed all of the assignment operations and claimed all of those variable names as local

45
00:04:15,480 --> 00:04:22,920
variables. Since numbers is a local variable, we can't read from it before we've written to it.

46
00:04:22,920 --> 00:04:27,960
That doesn't make sense. So let's look at one more example of the same thing. If you don't believe

47
00:04:27,960 --> 00:04:32,840
me yet, hopefully you'll believe me after this next one, if we make a similar function that prints

48
00:04:32,840 --> 00:04:37,640
the global variable numbers and then assigns to it right afterward, calling that function gives us

49
00:04:37,640 --> 00:04:47,400
an error. Variable names in Python cannot be both local and global in the same scope. So we're allowed

50
00:04:47,400 --> 00:04:53,240
to read a global variable and we're allowed to write to a local variable but not with the same name.

51
00:04:53,640 --> 00:04:58,200
Python doesn't allow that because that would probably be a bug in our code. This really

52
00:04:58,200 --> 00:05:03,400
doesn't make sense to do. We're allowed to read from global variables without writing to them,

53
00:05:03,400 --> 00:05:09,240
but once you assign to a variable, that variable magically becomes local. So if we swap these two

54
00:05:09,240 --> 00:05:15,160
lines of code, our function will not give us an error. This function actually does what's expected.

55
00:05:15,880 --> 00:05:21,400
But our global numbers variable hasn't changed because we're assigning to a local variable here

56
00:05:21,560 --> 00:05:26,280
and then we're reading from that local variable. So the global numbers variable and the local

57
00:05:26,280 --> 00:05:30,760
numbers variable both have the same name, but they're different variables pointing to different

58
00:05:30,760 --> 00:05:37,640
objects. Assignments in Python only change the local scope. You can't change the global scope with

59
00:05:37,640 --> 00:05:41,800
an assignment. Actually you can. There's an escape hatch to do so. I'm not going to mention it,

60
00:05:41,800 --> 00:05:45,880
though, because you shouldn't change the global scope with Python. You can only change the local

61
00:05:45,880 --> 00:05:50,440
scope with Python. All variable assignments are local. So this will always assign to a local

62
00:05:50,440 --> 00:05:56,120
variable here inside of a function. Now, what if instead of doing an assignment in this add

63
00:05:56,120 --> 00:06:01,720
numbers function, we use the extend method on this list? How is this any different? So when we call

64
00:06:01,720 --> 00:06:09,720
this function, Python might print out 123456 or it could give us an error or it could do something

65
00:06:09,720 --> 00:06:14,680
else. So who thinks this will give us an error? Python might print out 123456 or it could give

66
00:06:14,680 --> 00:06:21,480
us an error. Who thinks this will print out 123456? Who thinks it's also going to change the global

67
00:06:21,480 --> 00:06:26,040
variable numbers? All right. So a lot of you got this one right. You're right. This prints out

68
00:06:26,040 --> 00:06:31,320
123456 and it changes numbers. Now, what's going on here? The reason this works and a lot of you

69
00:06:31,320 --> 00:06:37,640
had some intuition about this is that the word change is tricky in Python. It's an ambiguous term.

70
00:06:38,520 --> 00:06:43,720
What are you changing? You can change a variable or you can change an object. So assignment

71
00:06:43,720 --> 00:06:48,520
statements change a variable. That is which object a variable is pointing to. That's what we

72
00:06:48,520 --> 00:06:53,080
talk about when we talk about scope. That's what we've been talking about. This isn't an assignment,

73
00:06:53,080 --> 00:06:58,520
though. This is changing an object. We're not changing which object a variable is pointing to

74
00:06:58,520 --> 00:07:04,040
with an assignment. We're doing a mutation which changes the object itself. So we can't assign to

75
00:07:04,040 --> 00:07:09,000
a global variable, but we can mutate any object that we can get our hands on as long as it's a

76
00:07:09,000 --> 00:07:16,120
mutable object. So you're allowed to read from global variables in Python, but you can only write

77
00:07:16,120 --> 00:07:22,680
to local variables. Every assignment statement assigns to a local variable. There are some

78
00:07:22,680 --> 00:07:25,960
escape hatches in Python to get around that limitation, but you shouldn't use them.

79
00:07:26,760 --> 00:07:32,840
List comprehensions have their own scope, but for loops do not because Python is function level

80
00:07:32,840 --> 00:07:38,360
scoped. It's function scoped, not block scoped. We don't really have blocks in Python. And Python's

81
00:07:38,360 --> 00:07:45,320
scope rules are entirely about assignments, not about mutations. Speaking of which, that's our next

82
00:07:45,320 --> 00:07:51,000
topic, mutability and mutations. Assignment is about changing variables, which object those

83
00:07:51,000 --> 00:07:56,680
variables point to. Mutability is about changing objects. So let's say we have a list of numbers

84
00:07:56,680 --> 00:08:04,120
and we assign numbers two to numbers. If we append to numbers two, how many elements will numbers two

85
00:08:04,120 --> 00:08:10,600
contain? So who thinks three? Who thinks four elements? Who thinks something else? There's a

86
00:08:10,600 --> 00:08:14,280
couple something else's. There's always a couple something else's. I'm curious what those would be.

87
00:08:14,280 --> 00:08:20,680
It's four elements. Numbers, what is numbers at this point? We append it to numbers two. Who thinks

88
00:08:20,680 --> 00:08:25,880
it's three still at this point? Who thinks it's four at this point? You're right. It is four,

89
00:08:26,600 --> 00:08:33,560
and it's four because these two variables are referencing the same object. So we have two

90
00:08:34,440 --> 00:08:38,360
variable names that are referencing the same object. These are not two different objects.

91
00:08:38,360 --> 00:08:43,160
Mutating one of these lists mutates the other because they're the exact same list. Changing

92
00:08:43,160 --> 00:08:51,720
objects and changing variables are distinct things. Assignment statements change which object a

93
00:08:51,720 --> 00:08:57,880
variable is pointing to, but mutations change the object itself. And that will change or seem to

94
00:08:57,880 --> 00:09:03,320
change any number of variables that might be pointing to that object. So

95
00:09:06,920 --> 00:09:13,640
can we make a tuple with a list inside it in Python? It's a weird thing to do. Is it possible?

96
00:09:13,640 --> 00:09:17,320
Who thinks you can do this? Python will allow it even though it's weird. Who thinks this is an error

97
00:09:17,320 --> 00:09:22,360
because it doesn't really make sense? So Python does allow this. We can do it. What if we call the

98
00:09:22,360 --> 00:09:27,560
append method on the first item in this list? Well, Python allow this. Who thinks it'll allow it?

99
00:09:27,560 --> 00:09:33,320
Who thinks this is not possible? Shouldn't be possible. So Python allows this. It does allow

100
00:09:33,320 --> 00:09:40,440
us to append to this list. It doesn't give us an error at least. The first item in this list has

101
00:09:40,440 --> 00:09:47,160
now changed. Now tuples are immutable, meaning we can't change them. It seems like we've changed

102
00:09:47,160 --> 00:09:52,440
this tuple though, but we haven't. We haven't actually changed the tuple. Not technically,

103
00:09:52,440 --> 00:09:57,160
not from the tuples perspective at least. If we take the first thing in this list and we assign

104
00:09:57,160 --> 00:10:03,000
a variable to it and then we append to that variable, we've changed the list that that

105
00:10:03,000 --> 00:10:07,000
variable is pointing to, but we've also changed every other reference to that variable because

106
00:10:07,000 --> 00:10:13,160
we changed an object and not a variable. Variables don't store objects. They're not like this

107
00:10:13,160 --> 00:10:18,440
bottle here that stores liquid. They don't contain a thing. They refer to something. They point to

108
00:10:18,440 --> 00:10:24,680
something. So variables are more like pointers or references. They don't actually contain objects.

109
00:10:24,680 --> 00:10:30,040
Now, what would happen if we make a new list and then we try to append the list to itself?

110
00:10:31,880 --> 00:10:36,600
Who thinks this is possible to do in Python? You think some weird things are possible in Python?

111
00:10:37,560 --> 00:10:43,560
I like you people. This works. You can append the list to itself. Now, this makes an infinitely

112
00:10:43,560 --> 00:10:49,640
recursive data structure. Python represents a bit strangely at the REPL. It does this to not break

113
00:10:49,640 --> 00:10:55,160
our machine. Otherwise, there would be an infinite amount of square brackets. Python represents this

114
00:10:55,160 --> 00:11:00,760
strangely, but it is possible to do. This really demonstrates that that analogy of a variable being

115
00:11:00,760 --> 00:11:05,480
a bucket that contains an object doesn't make sense because a bucket can't contain itself.

116
00:11:05,480 --> 00:11:10,760
A bucket can have a piece of paper in it though that refers back to itself. Lists are not buckets

117
00:11:10,760 --> 00:11:15,960
which contain objects. Instead, they're lookup tables that reference the memory locations of

118
00:11:15,960 --> 00:11:21,480
an object. Data structures list dictionaries, tuples, anything else that might contain something.

119
00:11:21,480 --> 00:11:26,600
They don't actually contain objects. They contain references to objects. Variables also don't contain

120
00:11:26,600 --> 00:11:32,040
objects. They just refer to or point to objects, which means that change is an ambiguous term in

121
00:11:32,040 --> 00:11:38,360
Python. We can change which object a variable is pointing to with an assignment statement,

122
00:11:38,360 --> 00:11:44,600
or we can mutate an object which actually changes the object itself. Regardless of what variables

123
00:11:44,600 --> 00:11:49,000
or data structures might be pointing to that object. If you feel rusty on this topic, I wrote

124
00:11:49,000 --> 00:11:55,560
an article on it recently called Overlooked Facts about Variables and Objects in Python.

125
00:11:55,560 --> 00:12:00,280
It's all about pointers. I highly recommend Ned Batchelder's talk from years ago at PyCon called

126
00:12:00,280 --> 00:12:05,240
Facts and Myths about Python Names and Values and Brandon Rhoads' talk from quite a while ago

127
00:12:05,240 --> 00:12:10,040
called Names, Objects, and Plummeting from the Cliff, which actually goes into quite a bit more

128
00:12:10,040 --> 00:12:19,720
than just this topic here. All right. Let's talk about ducks. Let's say we have a list called duck

129
00:12:19,720 --> 00:12:26,280
list. What do you think would happen if we used the plus equals operator to add a tuple of two

130
00:12:26,280 --> 00:12:33,000
values to this list? Will Python let us do this? Who thinks this will work? It will do something.

131
00:12:33,000 --> 00:12:38,440
Who thinks this will give us an error? It doesn't make sense to do. Python actually allows this.

132
00:12:39,160 --> 00:12:43,720
It allows us to do this. And what happens is Python loops over the tuple and adds each of the

133
00:12:43,720 --> 00:12:51,560
values to our list. Let's make a tuple called duck tuple that has two strings in it. Will Python

134
00:12:51,560 --> 00:12:57,880
allow us to use plus equals to do the same thing but with a list to a tuple? So we're trying to

135
00:12:57,880 --> 00:13:03,880
add these two items in our list to the tuple. So who thinks this will work? Still works. Who thinks

136
00:13:03,880 --> 00:13:08,840
we get an error at this point? We do get an error at this point, but the error isn't because we

137
00:13:08,840 --> 00:13:15,160
can't use plus equals with a list or rather plus equals with a tuple. Plus equals works with tuples.

138
00:13:15,160 --> 00:13:21,960
We're allowed to use plus equals on tuples as long as it's with another tuple. So plus equals on

139
00:13:21,960 --> 00:13:28,120
tuples only works with other tuples. It doesn't work with lists. That's the weird thing. And in

140
00:13:28,120 --> 00:13:35,240
fact, tuples aren't actually the odd one here. Lists are the odd one. Let's take an empty list

141
00:13:35,240 --> 00:13:40,280
and try to use a plus equals operator with a string. Who thinks this will work? It'll do something.

142
00:13:40,920 --> 00:13:48,680
Who thinks this is an error? So this does actually work, but it might not do what you think it does.

143
00:13:50,360 --> 00:13:55,640
It loops over the string and adds each of the characters to the list because the plus equals

144
00:13:55,640 --> 00:14:01,240
operator on a list accepts any interval of strings. As long as it can loop over it,

145
00:14:01,240 --> 00:14:05,400
it will loop over it and as long as it gets strings, it will add those strings to the list

146
00:14:05,400 --> 00:14:11,080
individually. So plus equals on lists does the same thing as the extend method on a list. The

147
00:14:11,080 --> 00:14:17,880
extend method accepts any interval and it loops over it and it pins each of the items to the list

148
00:14:17,880 --> 00:14:22,920
from that interval. So plus equals on lists is consistent, but not with plus equals on tuples.

149
00:14:22,920 --> 00:14:29,560
It's consistent with the extend method on lists. The list extend method and this plus equals

150
00:14:29,560 --> 00:14:36,280
operator on lists, they're not an isolated issue. Many other operations in Python accept any

151
00:14:36,280 --> 00:14:42,120
interval. For example, the string join method accepts a list, but it also accepts a tuple

152
00:14:42,120 --> 00:14:48,280
and even accepts strings. But again, it might not do what you expect it to do. What happens when you

153
00:14:48,280 --> 00:14:54,120
loop over strings? What do you get? Characters. Technically strings that represent characters

154
00:14:54,120 --> 00:14:58,680
because strings are recursive data structures. That's a whole other oddity, though. So when we

155
00:14:58,680 --> 00:15:02,200
loop over strings, we get substrings and that's what we're doing. We're joining together each of

156
00:15:02,200 --> 00:15:09,480
the characters in the string with space, which is a strange thing to do. So if we give the dictionary

157
00:15:09,480 --> 00:15:14,760
constructor in Python an interval of two item intervals, it will accept whatever we give to it

158
00:15:14,760 --> 00:15:18,280
as long as there are two item intervals and make the first thing a key and the second thing a value.

159
00:15:19,160 --> 00:15:23,960
Lots of things in Python accept any interval as long as it fits the shape and the style they're

160
00:15:23,960 --> 00:15:29,720
looking for. They don't really care what you give to it. What's the word for this? What's the animal

161
00:15:29,720 --> 00:15:36,040
that we use to describe this? I'm sure someone knows. A duck. Right. We're practicing duck typing.

162
00:15:36,040 --> 00:15:41,880
Rather, Python is practicing duck typing. So the idea behind duck typing is when we're trying to

163
00:15:41,880 --> 00:15:48,520
identify an animal, we don't check its DNA to see whether it's a duck. Instead, we observe it.

164
00:15:49,160 --> 00:15:53,720
We observe it and say, you know, if it looks like a duck, it walks like a duck, maybe it sounds kind

165
00:15:53,720 --> 00:16:01,720
of like a duck, then it's a duck. That means that checking the behavior of an object instead of

166
00:16:01,720 --> 00:16:07,560
checking what the actual class of that object is, we don't check its type, its class, we check its

167
00:16:07,560 --> 00:16:12,360
behavior. We don't usually care whether something is a list. We care whether it's a sequence or

168
00:16:12,360 --> 00:16:18,040
maybe whether it's an iterable. We don't care whether something is a function. We care whether

169
00:16:18,040 --> 00:16:24,600
it's a callable. We tend to use generic words for describing behaviors of objects instead of

170
00:16:24,600 --> 00:16:31,240
discussing the types of those objects. All right. So the list extend method accepts any interval

171
00:16:31,240 --> 00:16:36,520
and the plus equals operator on lists works the same way as the extend method. It's consistent with

172
00:16:36,520 --> 00:16:41,480
extend. But the plus equals operator works differently on tuples and in fact on most types

173
00:16:41,480 --> 00:16:48,760
of objects. And in many cases, Python doesn't do type checking at all. Because it's practicing duck

174
00:16:48,760 --> 00:16:54,760
typing. It's checking the behavior. It's trying something out and hoping for the best. So if you

175
00:16:54,760 --> 00:17:01,880
embrace duck typing in your own code by thinking in terms of behaviors like an iterable instead of a

176
00:17:01,880 --> 00:17:08,680
type like a list, you'll better understand what Python is doing. But you'll also probably write

177
00:17:08,680 --> 00:17:14,840
better Python code. Your code will fit in better in the Python ecosystem. So familiarize yourself

178
00:17:14,840 --> 00:17:20,760
with terms like iterable and callable and hashable, sequence mapping, these generic terms that describe

179
00:17:20,760 --> 00:17:27,320
behavior instead of the type of something. And if you're interested in specifically how iterables

180
00:17:27,320 --> 00:17:33,000
work in Python, I gave a talk on this some while back called loop better, a deeper look at iteration.

181
00:17:33,000 --> 00:17:37,000
Although it really dives into how iterables work deeply. You don't really need to understand it.

182
00:17:37,000 --> 00:17:43,720
But it's nice to embrace these generic terms when you're talking about types. Because in Python,

183
00:17:43,720 --> 00:17:49,800
we think in terms of behavior, not in terms of concrete types. Okay. So we're going to take

184
00:17:49,800 --> 00:17:57,080
a very quick mental break before our next session. Here is a dog in a mailbox.

185
00:18:00,200 --> 00:18:07,000
A chipmunk enjoying some tea. And a cat debugging its code.

186
00:18:09,480 --> 00:18:14,200
All right. That's a long enough break. Let's look at the plus equals operator again.

187
00:18:15,160 --> 00:18:20,200
Let's take two variables and assign them to the same tuple. Then let's try to use the plus equals

188
00:18:20,200 --> 00:18:26,040
operator to modify one of these tuples. Does Python allow plus equals on tuples? Who thinks

189
00:18:26,040 --> 00:18:31,720
Python allows plus equals on tuples? Okay. Good. You should know by now Python allows plus equals

190
00:18:31,720 --> 00:18:38,360
on tuples. We just saw it. So Python does allow plus equals on tuples. And we can use it with

191
00:18:38,360 --> 00:18:43,880
another tuple. So A at this point has four things in it. How many things does B have?

192
00:18:44,440 --> 00:18:50,840
Two or four? What do you think? Two things? Four things? So it turns out it has two things.

193
00:18:52,040 --> 00:18:59,080
So A has four things. B has two things. Because we changed A, we didn't change B. So plus equals on

194
00:18:59,080 --> 00:19:06,840
tuples is really the same as a plus operator followed by an equal sign. We're not mutating

195
00:19:06,840 --> 00:19:14,600
the tuple. We're just making a new tuple and then reassigning our variable to it. So X plus equals

196
00:19:14,600 --> 00:19:21,960
something is the same as X plus something followed by an equal sign afterward. Both of these statements

197
00:19:21,960 --> 00:19:26,520
make a new object and then afterward point our variable to that new object. All right. Let's take

198
00:19:26,520 --> 00:19:31,160
two variables and do the same thing. We'll assign them to the same list. Now let's use the plus

199
00:19:31,160 --> 00:19:35,880
equals operator to modify the first list. So our first list now has four things in it.

200
00:19:36,440 --> 00:19:41,480
How many things does our second list have? Two or four at this point? Yeah, at this point our list

201
00:19:41,480 --> 00:19:47,480
has four things different from the tuple. So the plus equals operator doesn't mutate tuples, but it

202
00:19:47,480 --> 00:19:54,920
does mutate lists. Now I find this interesting because that means that on lists A plus equals

203
00:19:54,920 --> 00:20:05,160
something does a mutation, but A equals A plus something creates a new object and then reassigns

204
00:20:05,160 --> 00:20:12,200
the variable to that new object. So in Python A plus equals B is not always the same as A equals

205
00:20:12,200 --> 00:20:19,400
A plus B. It is sometimes, but not always, these two things are the same on strings, on numbers,

206
00:20:19,400 --> 00:20:25,800
and on tuples, but they do different things on lists. Now this seems a little bit inconsistent,

207
00:20:25,800 --> 00:20:31,400
but from Python's perspective it's perfectly consistent. So this is because lists are mutable

208
00:20:31,400 --> 00:20:37,880
and plus equals is an in place addition operation, which means it performs a plus operation in place.

209
00:20:39,800 --> 00:20:45,560
So you're supposed to do a plus operation in place on mutable objects. It's actually supposed

210
00:20:45,560 --> 00:20:53,160
to mutate in place if it can, but it's convenient to use plus equals on immutable types like tuples

211
00:20:53,160 --> 00:21:00,120
and strings and numbers. This is a convenience for us because we don't want to have to type plus and

212
00:21:00,120 --> 00:21:05,160
then equals all the time in our code. So on immutable types in place assignments they just

213
00:21:05,160 --> 00:21:12,280
fall back to returning a new object instead. So on mutable types in place assignments mutate the object

214
00:21:13,000 --> 00:21:19,240
and on immutable types they return a new object to us. Now if we take a tuple with a list inside it,

215
00:21:19,240 --> 00:21:23,160
who thinks we can put a list inside of a tuple? Okay so we've stuck a list inside of a tuple,

216
00:21:23,160 --> 00:21:28,200
you remember that. We've already seen this, it's possible to do, but what happens if we say

217
00:21:28,200 --> 00:21:34,120
X sub zero plus equals a list three four? Now we've got a list in this tuple, who thinks it will

218
00:21:34,120 --> 00:21:39,240
mutate this list? It's actually going to mutate the list. Okay who thinks that this won't work,

219
00:21:39,240 --> 00:21:44,680
we're going to get an error. Who doesn't know what this is going to do? Okay so that was most

220
00:21:44,680 --> 00:21:50,520
of you here. Now it turns out that the first two of you here, you have an interesting situation

221
00:21:50,520 --> 00:21:58,840
going on. It actually does give us an error, but it also mutates the list. So everyone's happy at

222
00:21:58,840 --> 00:22:08,280
this point right? Now this is probably the most obscure Python oddity I've seen, and it's never

223
00:22:08,280 --> 00:22:14,600
going to bite you in real code, because why are you trying to mutate a list that's inside of a tuple

224
00:22:14,600 --> 00:22:19,320
by subscripting the tuple? Nothing seems like it's a good idea here, but we're going to take a look

225
00:22:19,320 --> 00:22:24,520
at what's going on anyway. So whenever we use the plus equals operator in Python, Python will try

226
00:22:24,520 --> 00:22:30,840
to call the Dunder i add method on the object that we're pointing to, and in that case it's our list.

227
00:22:30,840 --> 00:22:36,600
After that it will do an assignment. So the exception happened because the assignment failed,

228
00:22:37,080 --> 00:22:43,080
but that was after Dunder i add successfully mutated our list. So the list Dunder i add method

229
00:22:43,640 --> 00:22:50,040
mutates our list and then returns itself back for the sake of that assignment statement. But we're

230
00:22:50,040 --> 00:22:54,600
not allowed to assign into a tuple, so we get an error at this point. Now this isn't ever going to

231
00:22:54,600 --> 00:22:59,080
bite you in real code, because again why are you doing this in your code? What's the situation

232
00:22:59,080 --> 00:23:04,920
where this makes sense? But this is an implementation detail that we found an interesting

233
00:23:04,920 --> 00:23:13,880
excuse to learn about here. So some takeaways. The plus equals operator always performs an assignment,

234
00:23:14,600 --> 00:23:20,760
but plus equals and other augmented assignment operators, or in-place operators as they're all

235
00:23:20,760 --> 00:23:27,720
also called, are also allowed to mutate the object that they're called with. If that object chooses

236
00:23:27,720 --> 00:23:33,640
to mutate itself, if it's a mutable object, lists mutate themselves with plus equals, but tuples

237
00:23:33,640 --> 00:23:39,400
don't. Now this might seem inconsistent, but consistency is really about your frame of reference.

238
00:23:40,360 --> 00:23:45,560
According to the Python documentation, in-place additions are supposed to do their operation in

239
00:23:45,560 --> 00:23:50,840
place whenever possible, and lists just happen to be the most common data structure where it's

240
00:23:50,840 --> 00:23:58,040
actually possible to do that. So if Python doesn't do what you expect it to do, that doesn't necessarily

241
00:23:58,040 --> 00:24:05,080
mean you found a bug in Python. It does mean that what Python's doing doesn't match up with your own

242
00:24:05,080 --> 00:24:10,840
sense of reality. The way Python sees the world isn't the way you see the world. So

243
00:24:13,800 --> 00:24:19,400
I'd like to leave you with a few closing thoughts. Regardless of what programming language you're in,

244
00:24:20,200 --> 00:24:26,840
it's important to understand how the fundamentals of your programming language are different from

245
00:24:26,840 --> 00:24:33,080
other languages. How do function calls work? How do variables work at a fundamental level? And how

246
00:24:33,080 --> 00:24:39,080
do objects work? Also, what is an object in your language? It's important to understand the way

247
00:24:39,080 --> 00:24:43,000
that your programming language thinks about the world and more importantly thinks about itself.

248
00:24:44,520 --> 00:24:50,600
What does the world look like through the eyes of the Python interpreter? And if you think you found

249
00:24:50,680 --> 00:24:57,240
a bug in Python, it might just be that you're misunderstanding what tradeoffs the Python core

250
00:24:57,240 --> 00:25:01,880
developers were taking when they were implementing the particular bit of functionality that you're

251
00:25:01,880 --> 00:25:07,560
using. So if you see something odd going on in your code, before you fix that bug,

252
00:25:08,920 --> 00:25:13,880
poke around and see what there is to learn from it. Because breaking things is one of the best

253
00:25:13,880 --> 00:25:20,680
ways to learn. Also, if you find a Python audity of your own, use the Python audity hashtag if

254
00:25:20,680 --> 00:25:25,240
you're going to tweet it or put it on social media. Over the last many years, I've probably

255
00:25:25,240 --> 00:25:29,240
put out over 100 of these because there's lots of little weird things hiding in every programming

256
00:25:29,240 --> 00:25:36,680
language. So join me. Tweet out a Python audity if you find one. Also, if you would like Python

257
00:25:36,680 --> 00:25:44,040
morsel stickers because my logo is adorable, find me in the hallway afterward. Thank you.

