1
00:00:00,000 --> 00:00:13,520
Next up we have our keynote with Python steering council members, Pablo and Thomas. Unfortunately

2
00:00:13,520 --> 00:00:17,520
our other three Python steering council members weren't able to make it to PyCon this year

3
00:00:17,520 --> 00:00:25,600
for various reasons. You know, COVID, babies, et cetera. All very understandable reasons.

4
00:00:25,600 --> 00:00:30,680
They are certainly here in spirit. I did not have time to print out their faces, but that

5
00:00:30,680 --> 00:00:35,880
absolutely was my intention to have them sitting in these chairs with them. So just imagine

6
00:00:35,880 --> 00:00:40,240
little cutouts of their heads sitting here alongside. So we're just going to give them

7
00:00:40,240 --> 00:00:43,240
a moment to get everything hooked up and then we'll get started.

8
00:01:40,240 --> 00:02:09,720
Good morning, everyone. Welcome to the probably most boring keynote of the conference. At

9
00:02:09,720 --> 00:02:16,200
least my part. Pablo and I are two fifths of the Python steering council and we're going to talk

10
00:02:16,200 --> 00:02:27,680
about the steering council. Thank you. So here is what we're going to talk about. The steering

11
00:02:27,680 --> 00:02:33,440
council, highlights of the year, just a couple of highlights of the year. And Pablo is going to

12
00:02:33,440 --> 00:02:37,600
give a very exciting talk about what's new in Python 3.11. And then we'll have a little

13
00:02:38,480 --> 00:02:45,120
pre-recorded Q&A session. The questions were asked via the Internet over the last two weeks.

14
00:02:45,120 --> 00:02:53,920
So what is the steering council? The steering council, as defined in PEP 13, originally PEP

15
00:02:53,920 --> 00:03:02,080
8016, is in charge of Python, the programming language, and Python, the C-Python de-implementation.

16
00:03:02,080 --> 00:03:12,560
It replaced the BDFL, and yes, that is how you pronounce his name, when he retired in 2019. We

17
00:03:12,560 --> 00:03:19,200
are supposed to govern by consensus, so we're not authoritarian control. We listen to the core

18
00:03:19,200 --> 00:03:24,760
developers, we listen to the community, and we make decisions we think is best in all of that.

19
00:03:24,760 --> 00:03:30,320
We're also charged with fostering the community and fostering the core developers, making sure

20
00:03:30,400 --> 00:03:37,520
the volunteers can all do their work, all of that. And then also we make the final decision on Python

21
00:03:37,520 --> 00:03:44,200
enhancement proposals, at least the ones that we don't delegate to certain individuals who have

22
00:03:44,200 --> 00:03:48,880
better experience or better knowledge than we do, and who we trust to make those decisions.

23
00:03:48,880 --> 00:03:57,280
We meet weekly, and I say this because we take this seriously. There's a lot of stuff we have

24
00:03:57,480 --> 00:04:02,040
to go through. We meet for an hour and a half every week, and we fill that hour and a half talking

25
00:04:02,040 --> 00:04:07,680
about things. And then we also do some other work besides preparing emails, communications,

26
00:04:07,680 --> 00:04:14,680
et cetera. And just to make it very clear, the steering council is separate from the Python

27
00:04:14,680 --> 00:04:20,440
Software Foundation. The steering council is the technical direction of the language, and the Python

28
00:04:20,440 --> 00:04:26,680
Software Foundation is the community, the fundraising, the grants, this fantastic conference,

29
00:04:26,680 --> 00:04:35,160
infrastructure like PyPI. There is a lot of overlap. There are core developers on the PSF

30
00:04:35,160 --> 00:04:41,400
board of directors, including me, and there are board directors like me and former board directors

31
00:04:41,400 --> 00:04:48,000
like Brett on the steering council. We also have a very good work, had a very good working relationship

32
00:04:48,160 --> 00:04:55,000
with the former executive director, Eva. She attended our weekly meeting, not a voting member

33
00:04:55,000 --> 00:05:00,480
of the steering council, but very much part of the process and providing a lot of support, and

34
00:05:00,480 --> 00:05:05,720
keeping the lines of communication with the Software Foundation short so we can spend money,

35
00:05:05,720 --> 00:05:14,760
which I'll talk about later. Eva left the PSF last year after 14 years of service. We have a new

36
00:05:14,760 --> 00:05:19,000
executive director. We haven't quite established the same relationship yet, but I'm sure it will

37
00:05:19,000 --> 00:05:25,800
be fine because I loved it. For those who want to keep up to date on what the steering council does,

38
00:05:25,800 --> 00:05:32,360
we publish monthly updates on GitHub. We also send them to discuss.python.org, which is the

39
00:05:32,360 --> 00:05:38,040
discourse website we use. And if you have any questions, you can always ask us personally at

40
00:05:38,040 --> 00:05:45,200
the conference in email or you can send an email to steeringcouncil.python.org. So a little bit of

41
00:05:45,200 --> 00:05:50,800
the steering councils we've had in the past. Like I said, this was established in 2019 because Gido

42
00:05:50,800 --> 00:05:56,480
wanted to retire from being the one person in control, but as you can see from the first steering

43
00:05:56,480 --> 00:06:01,720
council, he didn't quite abandon us. He was part of the first steering council, creating a little

44
00:06:01,720 --> 00:06:11,080
bit of continuity. The year later, we had Nick and Gido step down and I came in and Victor Stinner.

45
00:06:11,080 --> 00:06:17,160
The year after that, Pablo replaced Victor Stinner. Victor stepped down, I should say, and Pablo

46
00:06:17,160 --> 00:06:24,160
replaced Victor. And then last year, Carol stepped down. Barry, who is probably somewhere in the

47
00:06:24,160 --> 00:06:31,160
audience heckling me, didn't get reelected and we had Gregory and Peter in their stead. Now I put the

48
00:06:31,160 --> 00:06:39,640
company names up there. We have a conflict of interest policy, no more than two people from the

49
00:06:39,640 --> 00:06:47,440
same company. If, for instance, Google acquired Microsoft, you never know. One of us would have to

50
00:06:47,440 --> 00:06:54,480
step down. I also put it up there because even though we have a nice turnover, and I colored the

51
00:06:54,480 --> 00:07:00,760
slide so you can see kind of the spread in years of service on the steering council, and we have a

52
00:07:00,760 --> 00:07:07,520
spread of experience as core developers. Greg and I have been core developers for 20-some years.

53
00:07:07,520 --> 00:07:15,200
Pablo and Peter are more recent core developers. We are still five white guys working at tech

54
00:07:15,200 --> 00:07:23,680
companies. So it's not exactly diverse. We are spread out over the world. We have a very diverse

55
00:07:23,680 --> 00:07:31,440
set of opinions to the point where occasionally we have discussions in our weekly meetings,

56
00:07:31,440 --> 00:07:38,480
specifically Pablo and I, and then when I come down from my office, my wife asks who I've been

57
00:07:38,480 --> 00:07:49,640
fighting with. And it's all good. I mean, we work together very, very well. It's just we have passion.

58
00:07:49,640 --> 00:07:59,800
I mean, the diversity is a reflection of the core developers. We are all core developers. It's not a

59
00:07:59,800 --> 00:08:06,560
requirement for steering council members to be core developers. I would love for a non-core developer

60
00:08:06,600 --> 00:08:12,600
to be on the steering council. But the people who vote for the steering council are core developers.

61
00:08:12,600 --> 00:08:19,840
So there is a trust issue, an experience issue. A lot of the decisions made by the steering council

62
00:08:19,840 --> 00:08:25,400
are very technical, so we want the technical knowledge, but there are also a lot of social things.

63
00:08:25,400 --> 00:08:33,120
We're looking at ways to spend money, acquire sponsorships. Those also require other expertise.

64
00:08:33,120 --> 00:08:41,000
So it is something I hope we can improve as core developers in the future. Here's a terrible picture

65
00:08:41,000 --> 00:08:49,640
of us on the top from left to right. Pablo, me, Greg, and the bottom, Peter and Brett. I apologize

66
00:08:49,640 --> 00:09:00,520
for the picture that makes me look young. It's very old. So some highlights of the year. First of all,

67
00:09:00,520 --> 00:09:13,920
bugs.python.org was migrated to GitHub. This was the result of years of planning, years of discussion

68
00:09:13,920 --> 00:09:22,040
before the years of planning. And then more than a year of work by Ezio, which was funded by GitHub,

69
00:09:22,040 --> 00:09:27,280
by donation from GitHub, and with support from GitHub. There were a lot of GitHub engineers involved

70
00:09:27,280 --> 00:09:37,120
as well. In the end, to try and get it the last mile done, we included Ukash as well. And it was completely

71
00:09:37,120 --> 00:09:46,280
finished on April 10th. There's still some cleanup to be done. The current state is that bugs.python.org

72
00:09:46,280 --> 00:09:51,600
is frozen. I don't know if a lot of people have used Roundup. I thought it was great, but it's not GitHub

73
00:09:51,600 --> 00:09:56,800
issues, and it doesn't have the network effect and the community knowledge that GitHub issues has,

74
00:09:56,800 --> 00:10:03,560
as well as the integration with the rest of GitHub. All old issues have been moved, including comments

75
00:10:03,560 --> 00:10:12,640
and other metadata. It was a lot of data. It took three days to migrate. It was originally going to take

76
00:10:12,640 --> 00:10:19,560
seven, but GitHub managed to provide some speed ups. All new issues have to be created on GitHub. All the

77
00:10:19,560 --> 00:10:24,960
changes have to be made on GitHub. It's all on GitHub now. All the documentation was updated, as far as we

78
00:10:24,960 --> 00:10:32,840
know. We may have missed some. We have a new FAQ on the migration and the effects of the migration. And

79
00:10:32,840 --> 00:10:38,720
we're still ironing out the last couple of things, but the bots and the workflows have all been updated.

80
00:10:38,720 --> 00:10:43,880
It's a funny thing. We did these slides before we knew that the GitHub migration was actually done, so we

81
00:10:43,880 --> 00:10:45,400
assumed that it was going to happen.

82
00:10:45,400 --> 00:10:57,840
We were never quite sure. Other news from the last year, we hired a developer in residence. This is something

83
00:10:57,840 --> 00:11:03,720
that the Steering Council has been working on since 2019, so since before my involvement. We originally

84
00:11:03,720 --> 00:11:11,480
wanted three developers in residence that we were going to fundraise for in 2020, but then the pandemic

85
00:11:11,480 --> 00:11:20,200
happened, and we weren't quite sure what state the PSF would be in. Last year, Google came to the PSF and

86
00:11:20,200 --> 00:11:28,640
wanted to provide a significant donation for a good project, and we convinced them very easily that it would be

87
00:11:28,640 --> 00:11:38,240
a good idea to hire a developer in residence to work on CPython, a full-time core developer. Lukas is a long-term

88
00:11:38,240 --> 00:11:47,680
core developer, release manager for 3.8, 3.9, and he gave a very uncontroversial keynote on Friday, which I was

89
00:11:47,680 --> 00:11:54,280
in agreement with, just for the record. So it's hired, the position is hired by the PSF. It's funded by Google

90
00:11:54,280 --> 00:12:00,760
this year. Meta has already provided funding for the next year, which starts in July, so we're good for a little

91
00:12:01,760 --> 00:12:09,840
while, but obviously we want this to continue in the future. And while it's managed by the PSF, because you need to make

92
00:12:09,840 --> 00:12:17,080
sure that people have everything they need to do the work, the direction is set by the Steering Council. We've asked Lukas

93
00:12:17,080 --> 00:12:22,600
to do a number of things, including the GitHub issues migration, and he's also been working through issues and pull

94
00:12:22,600 --> 00:12:29,920
requests, mentoring, and trying to figure out the best way to have impact. He's also been keeping the community up to

95
00:12:29,920 --> 00:12:39,960
date on his blog. Other news of the last year, multiple efforts to speed up CPython. This isn't entirely a new thing,

96
00:12:39,960 --> 00:12:46,800
but a lot of things came together last year. Microsoft has a faster CPython team that's been turning out changes to

97
00:12:46,800 --> 00:12:57,400
speed up CPython. Instagram released Cinder. Sam Gross came to Core Dev with a plan to remove the global interpreter lock,

98
00:12:57,440 --> 00:13:04,400
which would allow parallel threads to execute Python. We have Piston, Pigeon, all kinds of projects that have been going for a

99
00:13:04,400 --> 00:13:14,080
while that are still going and providing insights and patches and experiments. A lot of this work is experimental. Not all of

100
00:13:14,080 --> 00:13:21,600
the improvements will land. There's a lot of communication that needs to happen as well. There are tradeoffs to consider,

101
00:13:22,280 --> 00:13:28,840
but we already see good improvements in 3.11, which Pablo will talk about, and there is going to be more to come.

102
00:13:33,960 --> 00:13:36,840
Awesome. Who is excited for 3.11?

103
00:13:36,840 --> 00:13:48,280
Yes. Yeah, yeah. So what I'm going to do is I'm going to cover a bit of the things that you can expect for 3.11. We still

104
00:13:48,280 --> 00:13:56,520
have one week, so maybe some brave person will propose a gigantic pep. Sorry if that's missing. Please don't. I'm also a

105
00:13:56,520 --> 00:14:03,880
release manager, so better not give me more work. I'm going to cover briefly what is there. If you have more interest on

106
00:14:03,880 --> 00:14:11,360
some of these topics, you can read the What's New 3.11 or the Peps in particular. So let's go. So the first exciting thing is

107
00:14:11,360 --> 00:14:17,440
the Faster C Python project. So here you can see it's not important that you can read the different things, but what you're

108
00:14:17,440 --> 00:14:26,760
seeing here is the different benchmarks that we have on the official benchmark suite, showing 3.10 against 3.11. 3.11 is

109
00:14:26,760 --> 00:14:35,840
the orange one. 3.10 is the blue one. The interesting thing to see here is that bigger bars are worse and smaller bars are

110
00:14:35,840 --> 00:14:41,640
better, so a lot of these benchmarks have been improved. This is the biggest improvement in any patch release that we have done,

111
00:14:41,640 --> 00:14:48,000
sorry, in any minor release, which we are super exciting. How this will translate to your application, as Mark Shannon likes to

112
00:14:48,000 --> 00:14:56,040
say, it depends. Give us more benchmarks so they can appear here, but we are super excited. We are packing very interesting

113
00:14:56,040 --> 00:15:05,120
optimizations and we are very hopeful that you will enjoy them. Of course, there has been some interesting consequences of

114
00:15:05,120 --> 00:15:10,720
this. We have been working very hard to try to fix third-party projects and whatnot that have been affected by some of the most

115
00:15:10,720 --> 00:15:20,320
internal changes, so it may take a bit more for some projects to support 3.11, but we think that in total it will be worth it. So

116
00:15:20,320 --> 00:15:26,680
yeah, faster C Python. Everybody is excited about that. So what else? So we have more error messages. I'm not going to talk about

117
00:15:26,680 --> 00:15:33,760
all of them in particular, but I'm very excited to say that in 3.11, most of these error messages that you can see here, those are

118
00:15:33,760 --> 00:15:40,280
specialized syntax errors, have been continued by the community, so before I've been working on them, but a lot of people have

119
00:15:40,280 --> 00:15:46,280
been very excited about these things. Many of the ones that you see here, for instance, like function arguments with two stars,

120
00:15:46,320 --> 00:15:52,440
something like that, have been proposed and even continued by members of the community. So you could do that. It's very simple.

121
00:15:52,440 --> 00:15:59,440
You can watch the recording of one of my talks to know how to do that, but yeah, I think everybody loves better error messages and we

122
00:15:59,440 --> 00:16:07,120
are going to still pack those in 3.11 and even more in 3.12, so stay tuned for that. Something that we have also that we are super

123
00:16:07,120 --> 00:16:15,160
excited about is spec 657, which has this boring name, include fine grained error location in tracebacks. So what this pep is about is,

124
00:16:15,160 --> 00:16:25,720
for instance, here you can see like a traceback of an exception that says here, non-type object has no attribute x, and this is

125
00:16:25,720 --> 00:16:33,520
because something in this big formula here is none, and the problem is that in 3.10 and before, it was not possible to know which

126
00:16:33,520 --> 00:16:40,200
one of those things was none, but with this pep, we're super excited because now we can show you this instead in which we can point to

127
00:16:40,200 --> 00:16:46,880
you immediately that, ah, it was this guy here, the one that it was none, which is very cool. You can see other examples here, for

128
00:16:46,880 --> 00:16:58,680
instance. This is my favorite, actually. You can see here, like imagine that you have some big JSON with a lot of like, you know,

129
00:16:59,240 --> 00:17:06,440
you're accessing a bunch of things here, and the problem is like, yeah, non-type object is not subscriptable. Not good, right? But look at this

130
00:17:06,440 --> 00:17:19,200
beauty. Now it's telling you, yeah, it was this guy, the one that is not subscriptable. Nice. And also, who doesn't like dividing by zero?

131
00:17:19,200 --> 00:17:25,760
Dividing by zero is bad, right? We don't like it. But now it's even better because it will tell you which one was the one that was divided by zero

132
00:17:25,760 --> 00:17:32,480
with this nice arrow here. So much better debugging. You don't need to attach PDB or anything. You can know this thing from the trace

133
00:17:32,480 --> 00:17:41,120
back. So we are super excited about this one. More cool stuff. So for instance, we have now exception groups and exception star. This is a

134
00:17:41,120 --> 00:17:48,640
very interesting one. So right now we have this new API that still needs documentation. So if you try to look for documentation, we

135
00:17:49,640 --> 00:17:57,720
will get there. But the idea is that it's something that will work very similar as how trio nurseries work. So in AsyncIO, you can now say,

136
00:17:57,720 --> 00:18:04,000
I'm going to start a task group here with a context manager and a synchronous context manager. And here you can create a bunch of tasks. And the

137
00:18:04,000 --> 00:18:11,480
whole idea here, although it has more interesting semantics, but the main idea here is that the task group will basically wait until these two

138
00:18:11,480 --> 00:18:20,200
tasks finish. And you can handle correctly cancellation. So you cancel some of these tasks, it will behave as you expect and it does in

139
00:18:20,200 --> 00:18:27,280
trio and things like that. And this is very, very exciting because a lot of people have been waiting for this. These semantics have proven to be

140
00:18:27,280 --> 00:18:36,960
super, super interesting from the trio project. And we are bringing them then into C Python. Interestingly, to provide nice interoperability with

141
00:18:36,960 --> 00:18:47,760
the interpreter, this required a big change, which is the actual PEP that is here. The reason is because these tasks over here, like T1 and T2, are going to run

142
00:18:47,760 --> 00:18:56,800
concurrently, right? And both of them can raise exceptions. So we needed a way to communicate to the interpreter that some piece of code can raise

143
00:18:56,800 --> 00:19:05,680
multiple exceptions, not only one. And this is what this PEP is about. So now there is this new exception called exception group. Here I am raising one of

144
00:19:05,680 --> 00:19:13,560
them. And the whole idea of this exception group is that you can have many exceptions inside. For instance, I am adding here one value error and one index error.

145
00:19:13,560 --> 00:19:22,440
And for instance, if you raise these things, you will see that now we have this nicely formatted trace back code. So if this exception reaches the top level, it will tell you,

146
00:19:22,440 --> 00:19:31,200
okay, someone throw this exception group. And inside this exception group, you know it was a value error and an index error. This is very important because this will allow you to handle

147
00:19:31,200 --> 00:19:40,520
cancellation and many other things that happen with exceptions group in a nice way. And to provide very good interoperability with interpreter, now we have this extra

148
00:19:40,520 --> 00:19:50,480
keyword called except star. So now you can write this kind of code, which at the beginning looks a bit funky, but it's very easy to understand. The main idea here is that normally in an

149
00:19:50,480 --> 00:19:59,280
exception handler, only one of these will execute, right? If you throw an exception, it just happens to be a spam error. So the spam error handler will execute. If you happen to be a

150
00:19:59,280 --> 00:20:09,640
full error, then the full error handler will execute so forth and so on. But with except star, because it's made to handle exception groups, then multiple of these things can happen.

151
00:20:09,640 --> 00:20:19,080
So for instance, if you throw an exception group that has a spam error and a full error, then both the handle for the spam error and the handle for the full error will trigger.

152
00:20:19,080 --> 00:20:33,920
This will allow you to handle, for instance, an exception group that has cancellation and other things. So for instance, you could use some of the information to stop a database or to log the exceptions, whatever you want.

153
00:20:33,920 --> 00:20:47,760
The actual motivations and why this is useful is very well written in the PEP, so I really encourage you to go there and read about it. It reads very, very nicely. But we will also obviously put some examples in the documentation so you don't need to read all the technical document.

154
00:20:47,800 --> 00:20:57,600
But it's a very small change, but if you write a syncIO code and you are being using Trio, we think you are going to love this version on a syncIO. We are very excited for you to try it out.

155
00:20:58,720 --> 00:21:15,760
So we have a lot of type improvements. So the first thing that we have is the self-type. This is a small one, but this is very useful. So the idea is that if you have a function here that returns an instance of a class, so for instance, in this example,

156
00:21:16,240 --> 00:21:28,280
this method called setScale is returning an instance of the class shape. So before, normally, if you type annotate this code, instead of self here, you will put the name of the class, which in this case is shape.

157
00:21:29,320 --> 00:21:42,960
This, unfortunately, doesn't play very well if you now subclass shape because if you call setScale for a subclass, MyPy or other type checkers are going to freak out a bit because they are going to think you are returning shape here instead of the subclass and it's not going to play very well.

158
00:21:43,280 --> 00:21:59,120
But now you can basically type annotate this kind of code with self and it will do what you expect. If you use this here for a subclass, let's say, I don't know, circle, when you call setScale, it will think that it's a circle as you expect and also you don't need to type the name of the class over here, which is nice.

159
00:21:59,680 --> 00:22:17,760
Some more interesting type improvements is variadic generics. So the idea here is that you can now do this kind of code over here. So when you are annotating a generic, you can now put like an unpacking star and some type variable. We have a new one that is called type bar double.

160
00:22:17,760 --> 00:22:36,160
But the whole idea of the star shape is that now you can assign to this thing arrays that have multiple dimensions. For instance, here I am creating two types for the height and the width of an array and I can use this shape to match an array that has height and width, but I can also do this thing that has like four of them.

161
00:22:36,160 --> 00:22:43,160
So the idea is that this thing over here can support assignment to things that have multiple dimensions over there.

162
00:22:43,560 --> 00:23:03,560
Interestingly, this pep has some consequences on the language. For instance, now you can do this, which before it was illegal. The idea is that now you can unpack in get items. So for instance, I can define here a bunch of indexes, one and two, and I can unpack those indexes here when I'm accessing the array.

163
00:23:03,560 --> 00:23:17,160
This is equivalent to basically adding 0, 1, 2, and minus 1. And if you have an interval, it will basically impact the interval and access the index. This is not extremely useful. It's kind of a side effect of the other thing, but we think it's actually consistent with the language.

164
00:23:17,160 --> 00:23:26,160
Like there is other places where we allow to do these things and it's just for you to know that it's allowed. But this is not the actual feature. The actual feature is the one before.

165
00:23:26,760 --> 00:23:28,460
We also have.

166
00:23:28,460 --> 00:23:57,460
Literal string types and the idea here is that for instance, if you have, let's say you have a function called execute that is going to run some query on the database. So there is that if you annotate the query itself with this literal string type, the type checker will complain if you pass a string that is not a literal. For example, the second string here is a full literal string is not formatted, so that is good because it means that no data from the user or from the user.

167
00:23:58,460 --> 00:24:18,660
We are parts of the system that will allow SQL injection can make into my query, but if now I go and format my string either using F strings or format, this is not considered literal string is considered a regular string. So executing the query will error. There is other uses for this, but the security kind of.

168
00:24:19,660 --> 00:24:40,060
Thing is the most interesting one that is written the pet, but you can go to the pet to know how this change can actually be useful. So apart from typing improvements now we have to believe in the standard library. This was this took a while, but now we have it. So now you can open you know, Tomel Tomel files and you can also.

169
00:24:41,060 --> 00:24:57,060
Same thing with the strings we don't have dumps so you are thinking about the Jason module. You can load and dump Jason. We only have loads in the pet actually describes why you can only read Tomel and not write Tomel because writing Tomel up is kind of a mess.

170
00:24:57,060 --> 00:25:09,060
Especially because people expect like consistent formatting and whatnot, but now you can use this thing. You have my product almost you can directly read it with with Tomel live in the standard library in 311 and you don't need third party libraries.

171
00:25:10,060 --> 00:25:26,060
And basically that's it. We have for for 3,000,000 so far. Here is a lovely photo of the core the best spring. Sorry of the language summit this year at PyCon and this is not only the core of team that attended PyCon, but also a bunch of people that were in the in the summit.

172
00:25:26,060 --> 00:25:34,060
We are very excited for you to try 311. I think it's going to be the best release ever, but I'm also the release manager. So you know what I'm going to say.

173
00:25:34,060 --> 00:25:36,060
So we hope you like it.

174
00:25:39,060 --> 00:26:00,060
So I mentioned we put up a slide on the Internet two weeks ago to assemble some questions because we didn't think with COVID rules. It would be a good idea to hand around a microphone.

175
00:26:00,060 --> 00:26:04,060
By the way, Pablo and I are on stage unmasked close together.

176
00:26:04,060 --> 00:26:18,060
We're both vaccinated boosted and we both had COVID and still I'm only comfortable doing this because everyone followed the rules is wearing masks and everyone is safe.

177
00:26:18,060 --> 00:26:26,060
So thank you.

178
00:26:26,060 --> 00:26:36,060
So we put a slide on and started asking questions of people and I don't know how many of you saw yesterday saw Peter Wang's keynote, but.

179
00:26:37,060 --> 00:26:39,060
This.

180
00:26:39,060 --> 00:26:41,060
I don't know.

181
00:26:41,060 --> 00:26:46,060
This was the first the most upvoted question.

182
00:26:46,060 --> 00:26:51,060
What are the SC's plans to put Python in the browser?

183
00:26:51,060 --> 00:26:54,060
We don't need the plans anymore.

184
00:26:54,060 --> 00:27:03,060
Peter's taking care of it seriously though. This is one of those things where it feels like something the Syrian Council should care about.

185
00:27:03,060 --> 00:27:11,060
But we're only you know, we're only making decisions on proposals that other people bring to us. We're not driving the development of Python at this point.

186
00:27:11,060 --> 00:27:17,060
We probably could, especially if we had more core developers in residence.

187
00:27:17,060 --> 00:27:22,060
But at this point, we are not making these decisions.

188
00:27:22,060 --> 00:27:34,060
So I'm really glad that other people are doing the work and we're we're very happy with Christian Heimers was work to include was and builds in CPython and creating a supportive platform.

189
00:27:34,060 --> 00:27:41,060
But we're not the ones making the decisions or doing the work.

190
00:27:41,060 --> 00:27:48,060
So the like a very popular question that has been already actually answered many times in the conference, but I will try to do it again.

191
00:27:48,060 --> 00:27:55,060
So is don't cannot ask like so see Python 11 so it's not a noticeable performance improvement of Python 3.10.

192
00:27:55,060 --> 00:27:58,060
So how much faster do we expect?

193
00:27:58,060 --> 00:28:00,060
Well, it depends.

194
00:28:00,060 --> 00:28:07,060
I mean, we are measuring. I think every time I see this thing Mark Shannon corrects me because it's actually faster.

195
00:28:07,060 --> 00:28:20,060
So I think respect like 25% on the geometric mean on the performance test suite, but that doesn't really mean anything towards your application because as you saw yesterday, like depends on what you're doing.

196
00:28:20,060 --> 00:28:27,060
You're doing like number crunching. It may change a lot if you're doing I don't know, like faster, sorry, heavy object oriented code.

197
00:28:27,060 --> 00:28:35,060
So it depends a lot like but it will be faster for sure in most of the cases and in 312 it will be even faster.

198
00:28:35,060 --> 00:28:51,060
So stay tuned for the announcements of 311 like I try as release manager to always keep those numbers updated and I'm actually going to probably sit down with Mark to just find what is the best way to communicate improvements because like people like to know a number.

199
00:28:51,060 --> 00:28:54,060
But yeah, faster.

200
00:28:54,060 --> 00:29:07,060
How beneficial has it been to have a developer in residence? Are there any plans or desires to look for funding to expand this like having more folks asked by Pradhan?

201
00:29:07,060 --> 00:29:13,060
It has been a great success to have a cash as developer in residence.

202
00:29:13,060 --> 00:29:23,060
He's doing a ton of work, has a lot of positive effect and we would love to have three or more developers in residence.

203
00:29:23,060 --> 00:29:31,060
So we are looking for funding. There are other aspects of this. We hired Rukash. He was already a core developer.

204
00:29:31,060 --> 00:29:46,060
We didn't explicitly say we needed an existing core developer, but we did have a number of core developers apply even so that the pool of core developers who are looking for employment or willing to move to the Python Software Foundation is fairly small.

205
00:29:46,060 --> 00:29:56,060
So there's also the thing we have to consider. Are we comfortable hiring someone who's not already a core developer to work on on see Python and how long will it take them to get up to speed and all that?

206
00:29:56,060 --> 00:30:03,060
But it is something we're actively looking at and excited about as well in the future.

207
00:30:03,060 --> 00:30:10,060
Frank ask us, does the steam counts and think that some gross nuclear branch will be viable for see Python anytime in the next few years?

208
00:30:11,060 --> 00:30:20,060
So does it have a role? This is an interesting one. We have not discussed this thing in depth. Like we are excited about the war for sure.

209
00:30:20,060 --> 00:30:29,060
So we don't have a steam council official answer to this thing. But I mean, it's certainly feasible. Unfortunately, we don't have a roadmap.

210
00:30:29,060 --> 00:30:37,060
This means that we are excited about the idea. We have a lot of questions. This is this is a very big change in the past.

211
00:30:37,060 --> 00:30:45,060
Someone has said that probably if there will be any Python for ever will be something like this. This doesn't mean that is going to be Python for them. Freak out, please.

212
00:30:45,060 --> 00:30:56,060
But but it's a very big change and therefore it cannot be integrated easily on the core. So someone needs to put a roadmap and that is going to be very important.

213
00:30:56,060 --> 00:31:05,060
It's even more important as the chain itself, because like even if like it could be an scenario when we are super excited all this thing, but there is no way to do it.

214
00:31:05,060 --> 00:31:18,060
It's not only about like agreeing with that is trying to review those PR's making sure that user code is never going to be impacted ensuring that backwards compatibility is preserved as much as we decide to that is preserved.

215
00:31:18,060 --> 00:31:27,060
If we can everything if we cannot which ones to right now we are lacking a roadmap. This thing comes in is supportive of the work. I think.

216
00:31:27,060 --> 00:31:45,060
For sure we would like to see a pep and discussions, but unfortunately we don't have any particular roadmap right now. Also we have been focusing just as a disclaimer we have been focusing on all the peps that we have for 311 because as you know after I release the first beta next week there cannot be any more peps on 311.

217
00:31:45,060 --> 00:32:05,060
So you wanted to make sure that everyone that has submitted peps they have been reviewed by the steering Council. So I every all of our focus have been on that. So now that we have 311 kind of more or less set up we can start discussing this kind of things and how can the steering Council help some and the community to advance this work if this is what the community wants.

218
00:32:05,060 --> 00:32:27,060
Burnett asked what happened to H pie any other initiative to address this problem now first of all I want to say I don't think that's how we're not usually spells his name there's some accents involved I copied this verbatim out of fairness with all the questions from the slide so it's not my fault.

219
00:32:27,060 --> 00:32:40,060
For those who don't know H pie is an effort to define a C API for CPython and other Python implementations so you can have efficient extension modules.

220
00:32:40,060 --> 00:32:53,060
Modules for CPython that already have efficient extension modules that will also work well when you recompile them with other Python implementations.

221
00:32:53,060 --> 00:33:12,060
I don't think anything happened to it I'd still going still being developed it's something that takes a long time and it's also something that takes a long time to adopt because we have a lot of extension modules rewriting them is a lot of work so this is something that's just going to take a very long time.

222
00:33:13,060 --> 00:33:23,060
So anonymous ask what does the steering Council think of the process of attracting new contributors in general specifically for minority groups well we think it's super important.

223
00:33:24,060 --> 00:33:38,060
How we're going to achieve this thing so we as a steam council have this thing actually as a topic to discuss again we have been focused on the we started to discuss this thing at the beginning of the year we have some ideas then we have all this.

224
00:33:38,060 --> 00:33:56,060
Mountain of pups that we need to check another like the developer interesting stuff you have migrations but this is certainly on the agenda to keep discussing but also like many core developers are also like aware of this thing and they agree that is a very important thing to do some of the actually only mentoring people for minority groups.

225
00:33:56,060 --> 00:34:14,060
But we in general both the steam council and the core team I think we believe that this is extremely important especially for keeping Python for ensuring that Python serves all people from different backgrounds and ideas and especially if people are underrepresented in the community we know that we have a lot to do here.

226
00:34:15,060 --> 00:34:20,060
For sure but I just want to make you understand that we think it's been important we are working on that.

227
00:34:20,060 --> 00:34:33,060
Anonymous asked any uptake of new contributors post get up migration any other get up improvements planned I assume this is talking about the get up issues migration because we moved to get up a number of years ago.

228
00:34:33,060 --> 00:34:38,060
I think we saw an uptake from the original move from a curial to get on get up.

229
00:34:40,060 --> 00:34:44,060
It's been two weeks it's way too early to say anything about get up issues migration.

230
00:34:46,060 --> 00:35:00,060
As for further improvements some people are excited about new workflows new hooks new robots to do things for us on get up issues I think we need to figure out more policy around actually getting to the bottom of this.

231
00:35:00,060 --> 00:35:16,060
I think we need to figure out more policy around as the core developer group not as the steering council policy around how we deal with new bugs old bugs bugs that require more information or that we can reproduce and that kind of thing which people are absolutely working on.

232
00:35:16,060 --> 00:35:34,060
Another important thing on this topic is that we kind of we have migrated to have issues but we still have some rough corners that we are trying to cut so there are things that used to work on BPO that don't work exactly the same or don't work even so it's been like just two weeks as Thomas says since we moved.

233
00:35:34,060 --> 00:35:50,060
So we still even before having new stuff we need to make sure that you know everybody like most workflows keep working and things that you know used to work it working here so we are going to need some time to ensure that you know we polish everything and everything works as expected.

234
00:35:50,060 --> 00:36:02,060
So in Python, so Bernal asked again, so in Python 3.10 we got better messages what further improvements can we do to make it even better and it is to steal from the languages.

235
00:36:02,060 --> 00:36:16,060
Steal, that's an interesting word. I find this funny just as a small small parenthesis like every time like when we start announcing the error messages like like an enormous amount of people say like oh Python is stealing from Rust.

236
00:36:16,060 --> 00:36:32,060
Come on, we are not stealing from Rust. Rust still has it so it's not stolen. I mean it's great but like it's ugly. So we are like you know we are not even copying from Rust because there are compiler time errors that are actually easier right.

237
00:36:32,060 --> 00:36:55,060
Anyway like you can expect more for sure like we this is an area that we see that a lot of people really really like and they find super useful so we are super happy to keep working on this but I think the best way you can help us make better messages is telling us what do you think is a situation and an existing error that makes your life very difficult.

238
00:36:55,060 --> 00:37:22,060
Both as a user or if you especially are teaching Python to people that are learning programming for the first time and knowing those errors that are especially tricky or that people struggle with is super important like as core developers we are a bit biased towards like super fancy problems and things that we think is super important and even like we like to just tackle the most difficult things and sometimes we spend a lot of time with things that maybe are not that you know that useful for people.

239
00:37:22,060 --> 00:37:38,060
So even if you don't know you know how to even do error messages just open an issue and say look I teach Python every Monday or something like that and you know this thing always takes me an hour to explain to people even if it's a syntax error or if it's not.

240
00:37:38,060 --> 00:37:52,060
That will be super useful for us to know we may need to tell you that that is not possible but some of them and many of them actually is things that we can tackle or improve in certain ways so at least tell us what do you think we can improve so we can think about it.

241
00:37:53,060 --> 00:38:03,060
Burnett also asked are the core does generally happy with the steering Council election system would any of you like something to change on it.

242
00:38:03,060 --> 00:38:17,060
So the steering Council election system we elect a new steering Council after every major Python release so after 3.11.0 is released will elect the next steering Council and the entire Sarah Council gets replaced.

243
00:38:17,060 --> 00:38:37,060
Now a lot of us rerun and a lot of us get reelected at least you know the last couple of years but there's always the risk that the entire steering Council gets replaced up until last year that wasn't a major concern of mine because Eva was part of the weekly meetings and could provide continuity.

244
00:38:37,060 --> 00:38:51,060
We kind of lost that right now I'm not really worried that this entire steering Council is going to get booted out but in the future that might you know we don't know what's going to happen personally I would like to see.

245
00:38:51,060 --> 00:39:06,060
We have the two or three year terms and then overlapping terms which we've done on the PSF board of directors a couple of years ago which I think worked out really well that also allows people to take more risky votes.

246
00:39:06,060 --> 00:39:20,060
If they know that there's three people going to be on the board who aren't up for reelection then they that they approve of them they can take a risk at a minority candidate for the current election.

247
00:39:20,060 --> 00:39:34,060
I think that's what would happen but that's just my feeling and in the end it's not the steering Council who decides these things it's the core developers so there needs to be discussion among core developers on all of this.

248
00:39:34,060 --> 00:39:42,060
Yeah by the sign the steering Council cannot change the document where it says how the steering Council works which makes sense.

249
00:39:44,060 --> 00:39:55,060
So another anonymous this guy has a lot of questions so typing and packaging peps have been delegated down to BDFLs is this working out well and will any other RRWAS follow?

250
00:39:55,060 --> 00:40:01,060
Well I mean packaging peps are delegated right like we have the packaging authorities that is how it's called.

251
00:40:01,060 --> 00:40:12,060
And the fact with packaging is it's separate from Python language they use the pep system but the peps don't affect Python or CPython they only affect the packaging ecosystem.

252
00:40:12,060 --> 00:40:25,060
Right exactly and typing I mean typing is not fully delegated like we have delegated some typing peps but for instance I think almost all of the ones that I just saw here were decided by the steering Council especially the touch the syntax.

253
00:40:25,060 --> 00:40:27,060
And especially the ones that were rejected.

254
00:40:27,060 --> 00:40:30,060
And yeah and a bunch of them that were rejected as well.

255
00:40:30,060 --> 00:40:43,060
So I think it has been working really well so far I mean I don't know that much about the packaging world I see that some people have some restraints maybe but like so far it has not been like abundantly like a bad idea.

256
00:40:43,060 --> 00:40:55,060
For typing it has worked really well when we delegated and this is because like even if the steering Council we are very technical people we are not experts in typing and typing or other areas right.

257
00:40:55,060 --> 00:41:04,060
So it's always good to either like bring people that really know about this stuff or like to delegate if we think we trust a particular person and it's safe to delegate.

258
00:41:04,060 --> 00:41:19,060
But this is an interesting topic like we are thinking about how can we leverage better the community and the co-developer community to help us because like what happens sometimes is that we have this many peps and we cannot review them all in time.

259
00:41:19,060 --> 00:41:34,060
So delegation is something that we are always looking at but we are also careful to make sure that you know decisions that affect more areas than just typing are you know we make sure that the steering Council itself ensures that the whole community is represented when the decision is made.

260
00:41:34,060 --> 00:41:39,060
So I don't know the answer will be I think it has been working quite nicely.

261
00:41:39,060 --> 00:41:40,060
What do you think?

262
00:41:40,060 --> 00:41:44,060
Yeah I agree.

263
00:41:44,060 --> 00:41:46,060
We are pretty much out of time.

264
00:41:46,060 --> 00:41:52,060
We had a couple more questions but it was one from my manager I can answer him directly.

265
00:41:52,060 --> 00:42:08,060
So thank you all and if you have any more questions then Pablo and I are around at the conference.

266
00:42:08,060 --> 00:42:11,060
Hey I was in one of those pictures that's kind of cool.

267
00:42:11,060 --> 00:42:12,060
All right.

