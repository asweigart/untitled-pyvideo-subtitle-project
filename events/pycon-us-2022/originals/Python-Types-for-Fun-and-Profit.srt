1
00:00:00,000 --> 00:00:14,520
Hi, everyone. Let's get started. Hello. Yeah. Welcome to Python Types for Fun and Profit.

2
00:00:14,520 --> 00:00:22,080
I'm Pradeep. This is Shannon. Where's Jia? Okay. He's hiding over there. Jia. So we

3
00:00:22,080 --> 00:00:26,720
work at Meta on the Pyre Type Checker, Meta, Facebook, on the Pyre Type Checker, which

4
00:00:26,720 --> 00:00:31,160
runs on millions of lines of code every day, including Instagram's Python and helps catch

5
00:00:31,160 --> 00:00:39,720
bugs before they land into production. So we wanted to share some of that experience

6
00:00:39,720 --> 00:00:45,280
with you. So we've helped a lot of users adopt types in their real world projects and thought

7
00:00:45,280 --> 00:00:52,760
we'd share some lessons and tools that we have come up with along the way. And just

8
00:00:52,760 --> 00:00:56,440
upfront, this is not just the three of us. We've also got a lot of contributions from

9
00:00:56,440 --> 00:01:04,280
Stephen and Alex and Simran. So they'll also be around to help you around doing the exercises.

10
00:01:04,280 --> 00:01:09,160
So the overall structure is that we have four topics. In the first hour, I'll talk about

11
00:01:09,160 --> 00:01:15,880
why we need type checking and how that looks in Python. You'll also spend a bit of time

12
00:01:15,880 --> 00:01:22,520
working through exercises right in your browser to get a feel for how types work. Then next,

13
00:01:22,600 --> 00:01:27,400
Shannon will talk about how you can set type checking for your project, say, in GitHub,

14
00:01:27,400 --> 00:01:31,800
in your terminal and so on. We'll have a short break at midpoint. Then Shannon will talk

15
00:01:31,800 --> 00:01:37,240
about number three, which is typing in the real world where things get messy. Not everything

16
00:01:37,240 --> 00:01:42,680
is cleanly typed. So we have some tools that will help you adopt types in real world projects.

17
00:01:42,680 --> 00:01:46,800
So Shannon will talk about that. And finally, in the last hour, Jia will give you a tour

18
00:01:46,800 --> 00:01:51,600
of various Python features and how we can use typing for them effectively. Sounds good?

19
00:01:54,080 --> 00:02:00,400
All right. So let's begin. What are types? Why do you need type checking? First of all,

20
00:02:00,400 --> 00:02:05,200
Python is already pretty awesome. We all love Python. We're here at PyCon. Why do we need this

21
00:02:05,200 --> 00:02:12,240
thing called type checking? First, let me agree with you. We, too, love Python for many reasons.

22
00:02:12,240 --> 00:02:19,840
One of them is clean syntax. We all know that Python has short readable syntax for things like

23
00:02:19,840 --> 00:02:24,480
list comprehension, F strings, all kinds of features. The ecosystem has a great set of

24
00:02:24,480 --> 00:02:30,560
libraries for whether you like Django or PyTorch or whatever library you like. We have a bunch of

25
00:02:30,560 --> 00:02:36,480
them. And then finally, Python is dynamic, which is probably the biggest selling point for it.

26
00:02:36,560 --> 00:02:43,120
You can customize what happens when you look up an attribute, when you call a function, or you

27
00:02:43,840 --> 00:02:48,240
instantiate a class. All of that is customizable. So Python already comes with a great set of

28
00:02:48,240 --> 00:02:53,200
features. However, there are a few pain points that you and I might have run into. Let me give

29
00:02:53,200 --> 00:03:00,320
you an example of that. So we'll take a simple code snippet here, a get nickname, where you take

30
00:03:00,320 --> 00:03:06,640
a user ID, say a number like 42 or whatever, and you look up the user corresponding to that ID and

31
00:03:06,640 --> 00:03:11,200
then return the nickname for that user. It's a small made-up function, just four lines of code.

32
00:03:11,200 --> 00:03:14,800
In reality, it could be hundreds of lines long. I'm just giving it short for the sake of the

33
00:03:14,800 --> 00:03:20,640
example. So upon reading this, you and I might form a mental model of this saying that this

34
00:03:20,640 --> 00:03:27,600
function accepts an integer user ID and returns a string nickname. Right? And being good software

35
00:03:27,600 --> 00:03:32,560
engineers, we might even write that down in the form of a doc string so that future readers don't

36
00:03:32,560 --> 00:03:37,200
have to read the entire code. They can just read the doc string and live by that. So we can think

37
00:03:37,200 --> 00:03:43,760
of the doc string as the contract of the function. So as long as the caller satisfies their end of

38
00:03:43,760 --> 00:03:49,440
the contract, the function will satisfy its end. So for example, if you have someone calling get

39
00:03:49,440 --> 00:03:56,240
nickname with this ID, it's satisfying the fact that the user ID has to be an integer. So the

40
00:03:56,240 --> 00:04:00,800
function will return a nickname that is a string. So here it might be Shannon, and if you run the

41
00:04:00,800 --> 00:04:05,840
code, you'll get hello Shannon. So if everybody satisfies the contract, things will go fine.

42
00:04:05,840 --> 00:04:11,440
How can things go wrong? For one, the contract that you have could be violated by the caller.

43
00:04:12,640 --> 00:04:16,960
We said we wanted an integer, but there's nothing to stop a caller from just calling it with a

44
00:04:16,960 --> 00:04:23,360
string. So what if they pass in string 1033? They won't realize it immediately, but if you

45
00:04:23,360 --> 00:04:28,480
run the program, you'll get an error saying that you couldn't look up a user ID of type string.

46
00:04:29,520 --> 00:04:36,000
Or they may just fail to provide any arguments at all, and then that would blow up at runtime too.

47
00:04:36,640 --> 00:04:43,120
So what? This is pretty simple code. You might say just run the code, find the bugs, and fix them

48
00:04:43,120 --> 00:04:48,400
within seconds. But in reality, this function might be thousands of lines long. Your program

49
00:04:48,400 --> 00:04:53,040
might take five minutes to reach the point in the code where it blows up, and that will make

50
00:04:53,040 --> 00:04:59,600
your debugging cycle pretty long. We want to get these bugs as quickly as possible. So in a sense,

51
00:04:59,600 --> 00:05:06,080
it takes a while to figure out among all your callers which of them are violating your contract.

52
00:05:06,640 --> 00:05:11,760
This is the first problem that we have. Another issue is that the contract that you have could

53
00:05:11,760 --> 00:05:17,760
be violated by the function implementation itself. So this doc string claims that it returns a string

54
00:05:17,760 --> 00:05:24,960
nickname, but is that always true? So you can see that if user is none, it just returns none as the

55
00:05:24,960 --> 00:05:32,320
value, which is not a string. So if someone just passes in some ID like 9999, they're adding that

56
00:05:32,320 --> 00:05:37,360
to a string, which will blow up at runtime. Again, this is a small function. If it were

57
00:05:37,360 --> 00:05:42,560
hundreds of lines long, you would not discover it for maybe minutes, maybe not months, until a user

58
00:05:42,640 --> 00:05:48,480
files a bug report against your project. So again, it can take a while to figure out where in your

59
00:05:48,480 --> 00:05:55,840
function you are violating the contract in some subtle way. So this was just a simple example,

60
00:05:55,840 --> 00:06:01,440
but I hope it gave you a hint of the problems that many of us run into. So you might say,

61
00:06:02,080 --> 00:06:07,360
okay, I use unit testing a lot, so that should prevent all these issues. So unit testing is

62
00:06:07,360 --> 00:06:13,360
great, and we write a lot of unit tests. We hope everybody does. But one issue is that unit testing

63
00:06:13,360 --> 00:06:20,240
usually tests within the contract of the function. So if you're testing for the function that we had,

64
00:06:20,960 --> 00:06:26,400
you would check for cases like minus one, zero, one, 999. You would test for various cases,

65
00:06:26,400 --> 00:06:29,840
but you probably wouldn't test for things like strings or lists or dictionaries or none,

66
00:06:30,480 --> 00:06:36,960
cases like that. In general, we assume that surely no user is going to be crazy enough to

67
00:06:36,960 --> 00:06:41,360
send in a dictionary as a user ID, but if you've written enough production code, you've probably

68
00:06:41,360 --> 00:06:50,080
seen much stranger things than that. And even with unit tests, we may miss branches. So even in top

69
00:06:50,640 --> 00:06:56,320
Python projects, statement test coverage usually goes up to like 75 to 90%. There are always going

70
00:06:56,320 --> 00:07:01,680
to be gaps in your code where you haven't checked for the contract, and those gaps are probably where

71
00:07:01,680 --> 00:07:07,440
errors are going to look. And if you say I'll write great doc strings, yes, doc strings are great,

72
00:07:08,320 --> 00:07:12,640
but the problem is that either when you write them, you missed something and your doc string

73
00:07:12,640 --> 00:07:19,280
was wrong from the get-go, like ours was, or your doc string was right and the code changed and your

74
00:07:19,280 --> 00:07:25,120
doc string became stale, which could be worse than useless because it could mislead users and then

75
00:07:25,200 --> 00:07:32,720
cause subtle bugs. All this contributes to make you lack confidence in your code, because for one,

76
00:07:32,720 --> 00:07:39,120
you don't know if you're subtly landing bugs and causing crashes in production, or if you're too

77
00:07:39,120 --> 00:07:45,040
afraid of that, you may be hesitant to touch legacy code because you don't know what will break

78
00:07:45,040 --> 00:07:49,360
downstream. You may hesitate to make large refactorings across your code base even though

79
00:07:49,360 --> 00:07:54,960
it desperately needs it because you don't want to risk breaking things. So I hope it's not just me,

80
00:07:55,440 --> 00:08:03,040
I hope you've also come across such issues in your code. So let me now talk about how type checking

81
00:08:03,600 --> 00:08:09,760
can address these issues. So first, the way you would describe the contract of a function using

82
00:08:09,760 --> 00:08:16,000
type annotations is by saying this function accepts an integer, so you say user ID colon int,

83
00:08:16,000 --> 00:08:20,880
so that means user ID must be of type int, and then you say that it returns a string by saying

84
00:08:20,880 --> 00:08:26,720
arrow string. So this is valid Python syntax since Python 3. You don't need a special plugin

85
00:08:26,720 --> 00:08:31,760
for this. To a first approximation, you can think of this as basically a comment that is embedded

86
00:08:31,760 --> 00:08:38,160
within the code. It usually has no runtime effects. It won't affect the way your code works,

87
00:08:38,160 --> 00:08:45,520
but what it will do is help tools analyze your code, tools like Pyre or MyPy or PyWrite, which

88
00:08:45,520 --> 00:08:50,720
are type checkers, which use this to check your body. So if we run Pyre on this code,

89
00:08:50,720 --> 00:08:56,000
it will tell us that return user returns none, whereas this function claims to return string.

90
00:08:56,000 --> 00:09:03,920
It will highlight that spot right away so that you can fix it. So the way you would fix that is by

91
00:09:03,920 --> 00:09:09,120
saying this function can return either a string or it can return none. So the type for that is

92
00:09:09,840 --> 00:09:15,760
optional string. So optional string means it's either a string or it's a none. And once you do

93
00:09:15,760 --> 00:09:20,640
that, you fix that, and then you run Pyre again, it will tell you that there are no errors because

94
00:09:20,640 --> 00:09:24,640
right now everything you return is either a string or it's a none, so your function is valid.

95
00:09:24,640 --> 00:09:29,680
So this is how we can solve the first problem of checking our function body against its contract.

96
00:09:31,520 --> 00:09:38,560
Second, we need to check our callers and restrict them from passing in arbitrary nonsense.

97
00:09:39,520 --> 00:09:44,560
If you have a caller such as somebody who's passing in string, you run Pyre, it will tell you that

98
00:09:44,560 --> 00:09:48,800
this function expected an integer and you passed in a string. So it will warn you right at the call

99
00:09:48,800 --> 00:09:53,360
site so that that cannot go any further. Likewise, if somebody fails to pass in arguments, you run

100
00:09:53,360 --> 00:10:00,800
Pyre, it will show you that this function expected an argument. And we also want to make sure people

101
00:10:00,800 --> 00:10:04,160
are using the return value of our function correctly. So we saw that we're returning an

102
00:10:04,160 --> 00:10:08,320
optional string. Somebody might take the nickname and try to append it to a string.

103
00:10:09,760 --> 00:10:15,040
And as we saw, the return value could be a string or it could be a none. And Pyre will

104
00:10:15,040 --> 00:10:18,320
warn us about that because that could blow up at runtime and we need to fix our code.

105
00:10:19,840 --> 00:10:23,760
So again, this was a simple example, but I hope it showed you some of the ways in which type

106
00:10:23,760 --> 00:10:29,360
checking can help you out. So for one, type checking automatically checks all your function

107
00:10:29,440 --> 00:10:35,440
bodies and all your callers, no matter how many they are or how long your code is. So you can be

108
00:10:35,440 --> 00:10:40,800
guaranteed that your contract is being checked at each point. And because it's automatic,

109
00:10:41,360 --> 00:10:46,720
you can catch bugs as you edit. You don't have to wait for minutes for the program to run and then

110
00:10:46,720 --> 00:10:50,800
crash and then figure out bugs one by one. You can see all of them at once without running the

111
00:10:50,800 --> 00:10:55,280
program. So your debugging cycle basically shrinks usually on the order of seconds.

112
00:10:55,360 --> 00:11:00,560
And more importantly, that gives you confidence in your code. So we talked about silently landing

113
00:11:00,560 --> 00:11:06,400
bugs into production. You can be confident that you're not landing bugs of these kinds,

114
00:11:06,400 --> 00:11:14,480
like type mismatches. Likewise, you can confidently refactor code or like change touch legacy code

115
00:11:14,480 --> 00:11:19,600
which needs to be updated because you know that if you break something, Pyre will warn you about it.

116
00:11:19,600 --> 00:11:23,200
And if it doesn't, you can generally be confident that there are no errors lurking in your code.

117
00:11:23,200 --> 00:11:31,120
So my takeaway for you from this sort of short series was type checking lets you have the best

118
00:11:31,120 --> 00:11:36,160
of both worlds. You have what you have and what you love about Python. Syntax remains the same.

119
00:11:36,160 --> 00:11:40,720
Your code usually doesn't change. It's your function signatures that get type annotations.

120
00:11:40,720 --> 00:11:46,880
So you get the same syntax as before. You may not have known this before, but many of your favorite

121
00:11:46,880 --> 00:11:52,800
libraries have been using this. So you can use it to get the same syntax as before. You may not

122
00:11:52,800 --> 00:11:56,080
know that your favorite libraries already come with type annotations. So if you use PyTorch,

123
00:11:56,080 --> 00:12:00,800
a SQL alchemy, the standard library, all of that already has types for you to take advantage of.

124
00:12:02,320 --> 00:12:06,960
And you can keep your dynamic behavior, your decorators, meta classes, all of those,

125
00:12:07,760 --> 00:12:10,800
and you can still get the guarantees provided by a static type checker.

126
00:12:12,880 --> 00:12:18,080
So I'll pause at this point and ask you if you have any questions, comments, strong opinions.

127
00:12:18,880 --> 00:12:26,080
Anybody have any questions about what we've seen so far? No? Also, I was curious. Sorry, go ahead.

128
00:12:28,080 --> 00:12:34,080
I've heard rumbling that like static type checking in Python is this feasible or something. Any

129
00:12:34,080 --> 00:12:42,080
thoughts? What do you mean by feasible? Like, it's a territory I'm not familiar with, so I don't

130
00:12:42,080 --> 00:12:46,080
know how to elaborate, but I've heard that and what is your response?

131
00:12:46,080 --> 00:12:52,080
I would say, yeah, I think the whole tutorial is premised on it being feasible and doable. Yeah,

132
00:12:52,080 --> 00:12:58,080
it is. Yeah. So if you have any sort of concerns, we can deal with individual concerns. Yeah, I

133
00:12:58,080 --> 00:13:06,080
would definitely say it's feasible. Any other questions, comments? Yeah? Can you repeat that?

134
00:13:06,080 --> 00:13:16,080
Yes. Yes. We will mention that when we're talking about the real world messiness. Yeah,

135
00:13:16,080 --> 00:13:26,080
somebody else out there? His question was, does Pyre work with type stubs? So they are one way to

136
00:13:26,080 --> 00:13:32,080
inform Pyre about what a library exports, so we'll come to that in the later part of the tutorial.

137
00:13:32,080 --> 00:13:34,080
Yeah?

138
00:13:40,080 --> 00:13:50,080
Okay. So in this talk, what we're going to talk about applies to standard type checkers like Pyre,

139
00:13:50,080 --> 00:13:56,080
MyPy, PyWrite, so what we see here shouldn't differ among the three. So we can talk about the

140
00:13:56,080 --> 00:14:01,080
advantages and disadvantages maybe in a later section. So right now, what you see should be

141
00:14:01,080 --> 00:14:09,080
applicable to all three. Yeah. Anything else? Yeah? Yeah, and I was also curious, how many of you

142
00:14:09,080 --> 00:14:17,080
had little experience with types, like have used Python types in your code? Okay, a few of you.

143
00:14:17,080 --> 00:14:21,080
And how many, like this is the first time you're seeing types or you're learning about types in

144
00:14:21,080 --> 00:14:28,080
Python? Okay. Yeah, any of you? Also, I have one request, because you're all wearing masks, it's

145
00:14:28,080 --> 00:14:34,080
a bit hard to sort of connect, so I'll ask you if things are clear, so if things are clear, I'll just

146
00:14:34,080 --> 00:14:40,080
give me a thumbs up, if not, give me a thumbs down so I can sort of focus on what's not clear. All right?

147
00:14:40,080 --> 00:14:44,080
One second.

148
00:14:44,080 --> 00:14:58,080
So let's say you're convinced that you want to use types in your project and you want to know how.

149
00:14:58,080 --> 00:15:04,080
So I'll give you a brief whirlwind tour of the basic features of Python, so functions, classes, lists,

150
00:15:04,080 --> 00:15:10,080
variables, so the idea is that if all you take away from this tutorial is just this, you should be

151
00:15:10,080 --> 00:15:14,080
able to type check the majority of your Python code, and if you want to do further things like

152
00:15:14,080 --> 00:15:19,080
decorators and so on, we'll have that in the rest of the tutorial. So the idea is that for the next

153
00:15:19,080 --> 00:15:24,080
10, 15 minutes, we'll go over some of the theory and we'll try to make it interactive, we can ask

154
00:15:24,080 --> 00:15:28,080
questions. After that, for half an hour, you'll be playing around with Python in your browser, so

155
00:15:28,080 --> 00:15:35,080
get ready for that. All right, so we've already seen one example of a typed function, so if you want

156
00:15:35,080 --> 00:15:41,080
to have a typed parameter like name, you say name colon string, it's okay to have default values, you

157
00:15:41,080 --> 00:15:47,080
can have prefix colon string, colon string equals hello, so Pyre will check that. If anybody passes

158
00:15:47,080 --> 00:15:53,080
in a name, it is of type string, if somebody passes in a prefix, that's also fine, it should be of

159
00:15:53,080 --> 00:16:00,080
type string. If somebody passes in a one, and if you run Pyre, it will warn you because the name

160
00:16:00,080 --> 00:16:05,080
doesn't have a string, so it will catch that right away. Likewise, if somebody passes in something

161
00:16:05,080 --> 00:16:13,080
unexpected, it will catch that too. So far so good, it's pretty basic. Let's look at star args.

162
00:16:13,080 --> 00:16:18,080
So suppose you have a function that accepts any number of arguments and you want to make sure that

163
00:16:18,080 --> 00:16:24,080
all of them are, say, integers or strings, the way you say that is by saying star args colon string,

164
00:16:24,080 --> 00:16:31,080
which means that every single element of that argument list will be a string. So if somebody calls it

165
00:16:31,080 --> 00:16:37,080
with A, B, both of them are strings, so Pyre is happy with that, no complaints. If one of them

166
00:16:37,080 --> 00:16:43,080
happens to be a string or something not a string, then Pyre will complain about that, saying that it

167
00:16:43,080 --> 00:16:52,080
has to be of type string. Yeah, does that seem clear? Yeah. Star star quads are pretty similar.

168
00:16:52,080 --> 00:17:00,080
If you want keyword arguments where all of them have to have value of type, say, string or int,

169
00:17:00,080 --> 00:17:07,080
you can say star star quads colon int. So if I pass in foo equals one, bar equals two, that's fine

170
00:17:07,080 --> 00:17:13,080
because each keyword argument is given an integer, that's fine. Pyre has no complaints. If I try to do

171
00:17:13,080 --> 00:17:17,080
something that is not an integer, Pyre will complain about it. So I'm using integers and strings

172
00:17:17,080 --> 00:17:23,080
here, but in reality that applies to classes as well. We'll see that in a bit. So let's look at our

173
00:17:23,080 --> 00:17:30,080
first class. I'll take a simple example of an employee. We have this constructor here. It takes in an

174
00:17:30,080 --> 00:17:35,080
ID, takes in a name and an email address. Now I want to tell Pyre somehow that I want IDs to be

175
00:17:35,080 --> 00:17:41,080
restricted to ints. I want names to be strings and email addresses could be, say, either string or

176
00:17:41,080 --> 00:17:47,080
none. So how would I do that? For a function, the contract is in its function signature. For a class,

177
00:17:47,080 --> 00:17:54,080
it's in its constructor. So the way I say that is the same way as for functions. I say ID colon int,

178
00:17:54,080 --> 00:17:59,080
name colon string and email address is an optional string. So it could be a string or it could be none.

179
00:17:59,080 --> 00:18:05,080
So once I've specified this contract, Pyre will make sure that this class is being used correctly

180
00:18:05,080 --> 00:18:11,080
both within its methods and outside this class. So let's see a small example of that. Say I have a

181
00:18:11,080 --> 00:18:18,080
method called print email address. So this print employee's email is self.emailaddress. Should that be

182
00:18:18,080 --> 00:18:22,080
valid or not valid? What do you think?

183
00:18:22,080 --> 00:18:29,080
Yep. Can everybody see that? So email address was specified to be an optional string. So Pyre knows

184
00:18:29,080 --> 00:18:34,080
that this could have the value none. It need not be a string. So it will warn you about that because

185
00:18:34,080 --> 00:18:38,080
this could blow up at runtime. So the idea is if you want to prevent runtime errors, so it will catch

186
00:18:38,080 --> 00:18:43,080
these errors upfront. Is that clear? Yeah?

187
00:18:43,080 --> 00:18:48,080
Likewise, if somebody is calling a method, say we have a valid method called print name. It prints

188
00:18:48,080 --> 00:18:54,080
the employee's name. And say outside this class, I just construct an employee object with some ID,

189
00:18:54,080 --> 00:19:00,080
some name and some email address. And then I call print name with OK. Should that be valid?

190
00:19:00,080 --> 00:19:06,080
So this is a very simple method. So let's see a small example of that.

191
00:19:06,080 --> 00:19:12,080
So let's say I have a method called print email address. And then I call print name with OK.

192
00:19:12,080 --> 00:19:21,080
Should that be valid? So does print name accept any extra arguments? It does not accept any

193
00:19:21,080 --> 00:19:25,080
extra arguments. So if you run Pyre, it will warn you that this method is not being called properly.

194
00:19:25,080 --> 00:19:31,080
So just like it checks functions to check if they are called correctly, it does the same for methods

195
00:19:31,080 --> 00:19:37,080
Any questions here? OK, I'll move on.

196
00:19:37,080 --> 00:19:45,080
What about attributes? So here we have a method called print salary. It prints self.salary.

197
00:19:45,080 --> 00:19:52,080
Now nowhere have we declared that this class has an attribute called salary, which means that if you

198
00:19:52,080 --> 00:19:58,080
run this at runtime, it could blow up, right? So Pyre will warn you about that, saying that this class

199
00:19:58,080 --> 00:20:03,080
hasn't any declared attribute called salary. The reason is that if you try this in the

200
00:20:03,080 --> 00:20:08,080
REPL, if you construct an employee object and call employee.printsalary right away, it will

201
00:20:08,080 --> 00:20:14,080
fail, and Pyre doesn't like that. So it will prevent that from happening.

202
00:20:14,080 --> 00:20:20,080
And very quickly, I think if you construct an employee and then try to set name to something that is not a string,

203
00:20:20,080 --> 00:20:25,080
you can expect that Pyre will complain about that. So it makes sure that your class is being used

204
00:20:25,080 --> 00:20:32,080
appropriately, no matter where in your code.

205
00:20:32,080 --> 00:20:38,080
So let me know if anybody has any questions about classes, any lingering doubts.

206
00:20:38,080 --> 00:20:57,080
Yes, yeah. The general practice is that you want to specify the return type so that if somebody calls

207
00:20:57,080 --> 00:21:03,080
your function, the type checker will use that return type to realize what the type of that value will be.

208
00:21:03,080 --> 00:21:08,080
So it's a good practice to always annotate that.

209
00:21:08,080 --> 00:21:13,080
Any other questions? All right.

210
00:21:13,080 --> 00:21:18,080
And we'll have a couple more of these, and then we'll go on to the exercises. So bear with me for a bit.

211
00:21:18,080 --> 00:21:25,080
So let's look at lists. We have a small snippet called find employees by ID. It accepts a list of employees,

212
00:21:25,080 --> 00:21:32,080
it accepts a target ID, and then looks for an employee whose ID matches that target, and then returns it.

213
00:21:32,080 --> 00:21:39,080
So we want some way to specify that. Employees must be a list where all elements are employees.

214
00:21:39,080 --> 00:21:47,080
So the way to specify that is by saying, so we say that it's a list bracket employee.

215
00:21:47,080 --> 00:21:52,080
So this is syntax for every element of that list is guaranteed to be an employee.

216
00:21:52,080 --> 00:22:01,080
So if you try to use it, so here I'm initializing employees to a list where every element is an employee.

217
00:22:01,080 --> 00:22:05,080
I don't need to tell Pyre about this. It can already see that this is a list of employees.

218
00:22:05,080 --> 00:22:10,080
So if you ask for the type, Pyre will already tell you that this is of type list employee.

219
00:22:10,080 --> 00:22:15,080
So you don't need to change your code for that. And if you try to pass it in, that's a valid input,

220
00:22:15,080 --> 00:22:18,080
because this function expects a list of employees, and you're passing in a list of employees.

221
00:22:18,080 --> 00:22:22,080
So Pyre is happy with that. No errors. What about this case?

222
00:22:23,080 --> 00:22:31,080
Yeah, if you have employees where each element is a string, the type of that variable would be list of string.

223
00:22:31,080 --> 00:22:34,080
And if you try to pass that in, Pyre will catch that right away.

224
00:22:34,080 --> 00:22:39,080
So this is how Pyre checks that lists are being called appropriately.

225
00:22:42,080 --> 00:22:47,080
And there are other ways too. So if you have, say, a names variable, which is a list of strings,

226
00:22:47,080 --> 00:22:49,080
so every element is a string, so it's a list of strings.

227
00:22:49,080 --> 00:22:54,080
If you try to get the length of that, what should the type be?

228
00:22:57,080 --> 00:23:01,080
It should be an int. So if you're ever curious about what the type of something is going to be,

229
00:23:01,080 --> 00:23:06,080
you can always write reveal type of that expression and run Pyre.

230
00:23:06,080 --> 00:23:11,080
So it will tell you what it thinks the type is. So here it already knows that the type is an int.

231
00:23:11,080 --> 00:23:14,080
So this is what I meant when I said the standard library already comes with types.

232
00:23:14,080 --> 00:23:19,080
So things like lists, dictionaries already have these for you to take advantage of.

233
00:23:19,080 --> 00:23:23,080
What happens if you transform a list? So you have a list comprehension here.

234
00:23:23,080 --> 00:23:28,080
You have names. So you go with names and then you capitalize and append a string.

235
00:23:28,080 --> 00:23:31,080
So what should the resulting type be?

236
00:23:37,080 --> 00:23:42,080
So it's a list. So what is each element going to be of type? String.

237
00:23:42,080 --> 00:23:47,080
Can everybody see that? So if you ask Pyre, it will tell you that the type is a list of string.

238
00:23:47,080 --> 00:23:52,080
So we don't need to sort of tell it about each list that we create.

239
00:23:52,080 --> 00:24:00,080
Is it okay to index a list with an integer, which is fine. We can always look up an integer, an integer index.

240
00:24:00,080 --> 00:24:06,080
So Pyre is okay with that and it will know that the return type is an int because each element of the list is an int,

241
00:24:06,080 --> 00:24:11,080
so a string rather. So it will tell you that the return type is a string.

242
00:24:11,080 --> 00:24:20,080
What if I look up a string? So if I have a names list and I say names of foo, that's going to blow up at runtime.

243
00:24:20,080 --> 00:24:26,080
So Pyre will warn you saying that this, you can only look up an index, not something like a string.

244
00:24:27,080 --> 00:24:34,080
Likewise, if it names a list of string, so you can't just insert arbitrary things into it.

245
00:24:34,080 --> 00:24:40,080
So you can't insert an integer. If you do that, Pyre will complain about it. Sounds good?

246
00:24:40,080 --> 00:24:46,080
Dictionaries are very similar, so I'll just kind of breeze through it unless you have questions.

247
00:24:46,080 --> 00:24:54,080
So suppose you have a function that accepts a dictionary where all the keys are employees and all the values are ages,

248
00:24:54,080 --> 00:25:02,080
so ints, let's say. So the way you specify the type of a dictionary like that is dict employee int.

249
00:25:03,080 --> 00:25:06,080
Okay, so here, yeah, go ahead.

250
00:25:06,080 --> 00:25:07,080
Go ahead.

251
00:25:07,080 --> 00:25:15,080
Maybe get ahead, but for dictionaries, you have deeply nested JSON, and it's like keys are string,

252
00:25:15,080 --> 00:25:21,080
and values are another dictionary, which that dictionary is string, and values being dictionaries, and so on and so forth.

253
00:25:21,080 --> 00:25:28,080
Is there a good way to get around that without having the type that's 100 characters long?

254
00:25:28,080 --> 00:25:33,080
Yes. So first, you can always have nested dictionaries. So that's the long way around.

255
00:25:33,080 --> 00:25:41,080
And there are ways to have aliases, if you like, and there are things called recursive aliases where you can say that this dictionary

256
00:25:41,080 --> 00:25:46,080
can go arbitrarily deep. So there are more advanced features for that, if you'd like.

257
00:25:46,080 --> 00:25:49,080
So it's like type and alias, you're saying?

258
00:25:49,080 --> 00:25:50,080
Yes.

259
00:25:50,080 --> 00:25:51,080
Okay.

260
00:25:51,080 --> 00:25:57,080
Yeah. So the question was, can you have nested dictionaries and other sort of shorthand for that?

261
00:25:57,080 --> 00:26:01,080
Yeah, there are ways around that. We can discuss that later if you're interested.

262
00:26:01,080 --> 00:26:07,080
So yeah, is it clear that you can just use the employees to int?

263
00:26:07,080 --> 00:26:12,080
So if you ever look at, so we're iterating all the items and getting the keys and values, right?

264
00:26:12,080 --> 00:26:17,080
So the key type is known to be of type employee. So if you ask Paya, it'll tell you that.

265
00:26:17,080 --> 00:26:21,080
The value type is known to be int, so Paya already knows that.

266
00:26:21,080 --> 00:26:26,080
What if you had a dictionary like this? What is the type of this dictionary?

267
00:26:32,080 --> 00:26:36,080
You can guess. There's no wrong.

268
00:26:36,080 --> 00:26:41,080
Yeah, dict from string to int. So all the keys are strings, all the values are int.

269
00:26:41,080 --> 00:26:44,080
So if you ask Paya, it'll tell you it's a dict to string int.

270
00:26:44,080 --> 00:26:48,080
So if you look up a string, that's fine. Paya will allow that.

271
00:26:48,080 --> 00:26:51,080
And it could be an arbitrary string, not just one that is known to be in the dictionary.

272
00:26:51,080 --> 00:26:55,080
So Paya doesn't know what the exact contents are. It just accepts any string as a key.

273
00:26:55,080 --> 00:26:59,080
So if you look that up, you'll get back a value of type int.

274
00:26:59,080 --> 00:27:02,080
Like same as the list thing, you can't.

275
00:27:02,080 --> 00:27:05,080
So if you try to look up an integer, that's going to fail, guaranteed,

276
00:27:05,080 --> 00:27:10,080
because this dictionary is known to have only strings as keys.

277
00:27:10,080 --> 00:27:14,080
So Paya will warn you about that, prevent you from doing any mischief.

278
00:27:14,080 --> 00:27:20,080
Likewise, if you try to assign some non-integer as the value, Paya will again complain about that.

279
00:27:20,080 --> 00:27:25,080
I'm going a bit quickly, but let me know if anybody has any questions or confusion.

280
00:27:26,080 --> 00:27:31,080
One more data structure before we move on to the exercises.

281
00:27:31,080 --> 00:27:38,080
So we have tuples here. Say this function that returns h, which is hard-coded as 42,

282
00:27:38,080 --> 00:27:40,080
and your favorite language is Python.

283
00:27:40,080 --> 00:27:46,080
So the way you specify that as a type is tuple with whatever individual types you have.

284
00:27:46,080 --> 00:27:49,080
So tuple in words, t-u-p-l-e. You can't just use brackets.

285
00:27:49,080 --> 00:27:52,080
You have to say the type is t-u-p-l-e tuple.

286
00:27:52,080 --> 00:27:55,080
And because we have two elements, we have two types here.

287
00:27:55,080 --> 00:27:59,080
The first element is known to be of type int, so we say int.

288
00:27:59,080 --> 00:28:01,080
Second element is known to be of type string, so we say that.

289
00:28:01,080 --> 00:28:06,080
If you had three, then you would say tuple int string bool, and so on.

290
00:28:06,080 --> 00:28:10,080
So if you try to unpack this tuple or try to look up elements,

291
00:28:10,080 --> 00:28:13,080
Paya knows that the first element is going to be an integer.

292
00:28:13,080 --> 00:28:16,080
The second element is going to be a string.

293
00:28:16,080 --> 00:28:19,080
What if you tried this?

294
00:28:19,080 --> 00:28:22,080
This is going to blow up at runtime.

295
00:28:22,080 --> 00:28:25,080
So Paya will warn you about that, saying that this is known to be a tuple of two elements,

296
00:28:25,080 --> 00:28:28,080
and you're trying to unpack into four.

297
00:28:31,080 --> 00:28:33,080
And a quick note about global variables.

298
00:28:33,080 --> 00:28:39,080
So in general, you want to help out the type checker by telling it what the type of the global variable is.

299
00:28:39,080 --> 00:28:43,080
So if you have something like login counts, you want to tell it that it's going to be a dictionary

300
00:28:43,080 --> 00:28:47,080
from user to integer or whatever it is.

301
00:28:47,080 --> 00:28:50,080
In general, you don't need to annotate local variables.

302
00:28:50,080 --> 00:28:55,080
As I told you, you could see that employees was automatically inferred to be of type list of employees and so on.

303
00:28:55,080 --> 00:28:58,080
But in some cases, especially with empty containers,

304
00:28:58,080 --> 00:29:03,080
say you have this function which has visited equals empty list.

305
00:29:03,080 --> 00:29:07,080
Now, it's a list, sure, but what is it going to be a list of?

306
00:29:07,080 --> 00:29:09,080
It could be a list of integers, a list of strings.

307
00:29:09,080 --> 00:29:14,080
So Paya needs to know what the type is so that it can prevent incorrect use of that list.

308
00:29:14,080 --> 00:29:23,080
So in such cases, you can help Paya out by giving the variable an annotation saying visited is a list of nodes and then the empty list.

309
00:29:23,080 --> 00:29:27,080
So this is usually needed when you have empty list or empty dictionaries, empty sets, and so on.

310
00:29:30,080 --> 00:29:34,080
So quick recap. I know we went through a lot.

311
00:29:34,080 --> 00:29:36,080
So functions, how do you annotate them?

312
00:29:36,080 --> 00:29:44,080
Basically, you look at each parameter, you give it a type, and then you specify the return type as well.

313
00:29:44,080 --> 00:29:48,080
Classes, you do the same thing but for the constructor.

314
00:29:48,080 --> 00:29:51,080
So you say ID is an int and so on.

315
00:29:51,080 --> 00:29:58,080
And if you have lists and dictionaries and so on, you just say it's a list of employee or dictionary from string to int,

316
00:29:58,080 --> 00:30:03,080
tuple of int to string, and so on. Right? Makes sense?

317
00:30:03,080 --> 00:30:10,080
Also, I want to give a quick two-minute example of how Paya works,

318
00:30:10,080 --> 00:30:16,080
but if you're not feeling pretty overwhelmed, we can sort of tune out for a couple of minutes,

319
00:30:16,080 --> 00:30:22,080
but I think this might help you to figure out why it does what it does or how it does what it does.

320
00:30:22,080 --> 00:30:30,080
So let's take this example where we had an error called get nickname where it returned an optional string, but we only had string.

321
00:30:30,080 --> 00:30:35,080
So the way Paya starts is by assuming that the user ID is going to be of type integer.

322
00:30:35,080 --> 00:30:41,080
So it starts out knowing that user ID will be an int, then it goes on to the next expression.

323
00:30:41,080 --> 00:30:43,080
So we come to fetch user.

324
00:30:43,080 --> 00:30:48,080
So it needs to check the contract and check whether we are respecting fetch user's contract.

325
00:30:48,080 --> 00:30:52,080
So it looks up the type signature for fetch user.

326
00:30:52,080 --> 00:30:56,080
Let's say it's something like this. It takes an int and returns an optional user.

327
00:30:56,080 --> 00:31:01,080
So at this point, it checks whether the user ID we're passing in is an int, which it is.

328
00:31:01,080 --> 00:31:03,080
So that's fine. No problems there.

329
00:31:03,080 --> 00:31:06,080
And what is going to be the type of user?

330
00:31:06,080 --> 00:31:10,080
So user is being assigned to fetch user of that. So what is the type of user?

331
00:31:16,080 --> 00:31:19,080
Guesses? What's that? It's an optional user.

332
00:31:19,080 --> 00:31:24,080
So it's being assigned the value of this function, so the return type is going to be the type of user.

333
00:31:24,080 --> 00:31:28,080
So Paya remembers that as well. So it sort of stores that in its memory.

334
00:31:28,080 --> 00:31:32,080
Next, it checks whether user is none. So it goes into that branch.

335
00:31:32,080 --> 00:31:38,080
Now Paya is smart. So it knows that even though user was optional string, that is it could be an optional user,

336
00:31:38,080 --> 00:31:45,080
it could be either none or user, within this branch, because we checked for none, user is only possibly none.

337
00:31:45,080 --> 00:31:46,080
It cannot be a user.

338
00:31:46,080 --> 00:31:53,080
So now when you return user, it realizes you're returning none, whereas this function expects you to return a string.

339
00:31:53,080 --> 00:31:58,080
So that's how it figured out that you were making a mistake at that point. Sounds clear?

340
00:32:01,080 --> 00:32:04,080
It doesn't match, so it raises an error at that point.

341
00:32:04,080 --> 00:32:10,080
Next, we return from that branch and we're going to the other branch.

342
00:32:10,080 --> 00:32:12,080
Again, Paya is smart. It knows that you already checked for none.

343
00:32:12,080 --> 00:32:20,080
So what is the only possible type of user in this case? It's only user. It can't be none anymore.

344
00:32:20,080 --> 00:32:28,080
So Paya understands that it's only user and then it needs to look up the nickname attribute.

345
00:32:28,080 --> 00:32:34,080
So again, it fetches the user class. Let's say that class has a constructor like this, where nickname is a string.

346
00:32:34,080 --> 00:32:41,080
So now Paya knows that user.nickname is a string and you're returning that, so that's correct. There's no issue there.

347
00:32:41,080 --> 00:32:49,080
So I hope that gave you a brief idea of how Paya walks through your code, refining its understanding of what the type of each variable is.

348
00:32:49,080 --> 00:32:53,080
How completely does the code need to be developed?

349
00:32:53,080 --> 00:32:55,080
So like a fetch handler?

350
00:32:55,080 --> 00:33:02,080
That's exactly why I wanted to give you this. So you can sort of see where Paya might fail to check things.

351
00:33:02,080 --> 00:33:11,080
So I said it looks up the type signature of fetch user. So what if the user hadn't, the programmer hadn't written any type annotations for fetch user?

352
00:33:11,080 --> 00:33:17,080
At that point, Paya wouldn't know whether it expects an int or a string, so it wouldn't be able to check if you're passing the right argument.

353
00:33:17,080 --> 00:33:24,080
Likewise, what if I didn't annotate user ID? So in that case, Paya wouldn't know if I'm passing in a string or an int or so on.

354
00:33:24,080 --> 00:33:30,080
So that's why you need type annotations and that's what can happen if you don't add type annotations.

355
00:33:30,080 --> 00:33:34,080
Shannon will talk more about that later in the talk.

356
00:33:34,080 --> 00:33:36,080
So yeah, go ahead.

357
00:33:36,080 --> 00:33:41,080
Yeah.

358
00:33:41,080 --> 00:33:42,080
Yep.

359
00:33:42,080 --> 00:33:47,080
We have a URL if you want on some sticky notes. If you want to look at them now.

360
00:33:47,080 --> 00:33:52,080
Okay.

361
00:33:52,080 --> 00:33:56,080
Okay. Finally, we're done with theory. Let's do some exercises.

362
00:33:56,080 --> 00:34:02,080
We have a series of six short exercises where you will play around with Paya in your browser.

363
00:34:02,080 --> 00:34:09,080
We'll start with something simple. The idea is that if you're done, just paste a green sticky to your laptop.

364
00:34:09,080 --> 00:34:16,080
If you're stuck or feeling confused, just add a red sticky and one of us will sort of walk around and help you out.

365
00:34:16,080 --> 00:34:17,080
Okay.

366
00:34:17,080 --> 00:34:22,080
So the playground is basically simple. You just write your code, run, check.

367
00:34:22,080 --> 00:34:26,080
So that runs Paya and tells you where there are errors in your code.

368
00:34:26,080 --> 00:34:28,080
Okay.

369
00:34:28,080 --> 00:34:34,080
So your aim in the first exercise is to, there's a bug in the code. You need to find it not by sort of understanding it.

370
00:34:34,080 --> 00:34:39,080
Just add type annotations, run Paya and see if you can find out where the bug is.

371
00:34:39,080 --> 00:34:49,080
Go to this URL, shorturl.at slash psbg9 and then open.

372
00:34:49,080 --> 00:34:53,080
We have a series of exercises. Open the first one in a new tab.

373
00:35:09,080 --> 00:35:21,080
Open. So can you see a link for simple function?

374
00:35:21,080 --> 00:35:26,080
Can everybody see a link for simple function? Anybody not able to find it?

375
00:35:26,080 --> 00:35:32,080
Okay. Yeah, the first one, simple function.

376
00:35:32,080 --> 00:35:35,080
Open in a new tab.

377
00:35:35,080 --> 00:35:45,080
Yeah, green means good. Red is bad.

378
00:35:45,080 --> 00:35:52,080
Okay. Yeah.

379
00:35:52,080 --> 00:36:02,080
Okay.

380
00:36:02,080 --> 00:36:27,080
Okay.

381
00:36:27,080 --> 00:36:35,080
Are you able to run?

382
00:36:35,080 --> 00:36:42,080
Yes. Yeah. You have to annotate function signatures before Paya checks it. So we saw why, right?

383
00:36:42,080 --> 00:36:47,080
It doesn't know what the type signature is so it doesn't enter that code.

384
00:36:47,080 --> 00:36:55,080
There are. Yeah. We'll see them later on. Yeah.

385
00:36:55,080 --> 00:36:59,080
Okay. So I recommend it. So if people don't want to use it, right, it will be noisy for them.

386
00:36:59,080 --> 00:37:12,080
So by default it's off. But if you want to be strict, you can turn it on to strict mode.

387
00:37:12,080 --> 00:37:31,080
So the green is hash tag by dash strict.

388
00:37:31,080 --> 00:37:39,080
Okay. So we'll see things you can do for opt in, opt out, and so on.

389
00:37:39,080 --> 00:37:51,080
Okay. I see some green stickers already. Anybody stuck or are you still trying out stuff?

390
00:37:51,080 --> 00:37:55,080
I'm not able to think you just said that we don't need to annotate anything, right, because it just automatically.

391
00:37:55,080 --> 00:38:00,080
No. It doesn't know what user ID is, for example. So it's sort of.

392
00:38:00,080 --> 00:38:29,080
Yeah.

393
00:38:29,080 --> 00:38:49,080
Yes. Oh, you don't need to use typing.list. You say. Oh, wait. Is it a list, though? So it's meant to be a string, right?

394
00:38:49,080 --> 00:38:59,080
Yeah. So you could try different things. But yeah, the intention was that it should be a string.

395
00:38:59,080 --> 00:39:08,080
All right. Yeah. It looks like most people are finished. So I share the solution here.

396
00:39:08,080 --> 00:39:20,080
So if you're still confused, we can sort of walk around. Do you need some assistance? Simran?

397
00:39:20,080 --> 00:39:31,080
Okay. Yeah. I can just show you the solution for the first one. So I hope everybody got that it accepts a string and it returns an integer.

398
00:39:31,080 --> 00:39:43,080
And the error was where you passed in a list instead of a string. Yeah. And if you're super fast and you're finishing the exercises really quickly, feel free to move on. You don't have to wait for me.

399
00:39:43,080 --> 00:39:52,080
But if you want to move along with the tutorial class, you can sort of go one by one. All right. Let's go to the next one.

400
00:39:52,080 --> 00:39:59,080
So if you have a same URL, go to the link where it says multiple functions and open that in a new tab.

401
00:39:59,080 --> 00:40:20,080
Simran? Okay.

402
00:40:20,080 --> 00:40:37,080
Yeah.

403
00:40:37,080 --> 00:40:53,080
Yeah. You need to tell them about this. Yeah.

404
00:40:53,080 --> 00:41:03,080
Yeah. You should do it. Yeah. We want people to use. That's why we started creating a tutorial. Yeah.

405
00:41:03,080 --> 00:41:20,080
Run a type checker. Right. So even if you're not using a type checker, it serves as documentation. But the idea is you want the documentation to be checked so it's most useful when you have a tool. Otherwise, you can write something as a string or an int, but then it's actually a list.

406
00:41:20,080 --> 00:41:43,080
Yeah. So there is something called a runtime type checker. So this is a static type checker. It doesn't run your code. Runtime type checker checks at runtime whether it is an int. So there are tools that do that for you. They are like bare type and they're like a few.

407
00:41:43,080 --> 00:42:01,080
Not yet. Not yet. Yeah. So the philosophy is that Python is always, types are always optional. If you want it, add it. But yeah. Yeah. That's the philosophy. Yeah. Is everyone sort of done? Anybody stuck?

408
00:42:01,080 --> 00:42:26,080
We can move on. Okay. I'll share the solution in case I think most people are done here. So anybody want to share? Like what is the return type of get name? String. And greet name. What does it accept? String and returns? None. Right.

409
00:42:26,080 --> 00:42:43,080
And I hope you all got the error saying that num-vovels is an integer. You can't just add it to a string. Okay. So far it was pretty straightforward. We'll get into slightly more involved exercises from now on. So your first list exercise. So you can go to the third item, which is a list, and open that. Okay.

410
00:42:43,080 --> 00:43:11,080
Yeah. It's kind of a hygiene thing, but it's also useful when you want to, suppose somebody uses a return type and treats it like a string. You want to prevent that. Like somebody who says x equals greet name and then says x dot capitalize. We want to stop that.

411
00:43:11,080 --> 00:43:14,080
So in that case, it helps to have that none.

412
00:43:22,080 --> 00:43:26,080
Yes. So you added as, so what is name expected to be?

413
00:43:26,080 --> 00:43:45,080
Yep. Okay. And what is the return? But it's not returning any value at all, right?

414
00:43:45,080 --> 00:43:46,080
Oh, right.

415
00:43:46,080 --> 00:43:47,080
Right now.

416
00:43:50,080 --> 00:43:53,080
How do you see it is not squared? Because something here is.

417
00:43:53,080 --> 00:43:56,080
Yeah. So can you remove that and make it string again?

418
00:43:57,080 --> 00:43:58,080
No, this one is wrong.

419
00:44:00,080 --> 00:44:01,080
Okay.

420
00:44:02,080 --> 00:44:15,080
So can you see that it says on line 17, return type is expected to be string, but then implicitly returning none. So it wants you there. So the errors help you sort of figure out what you should do.

421
00:44:16,080 --> 00:44:17,080
Okay.

422
00:44:20,080 --> 00:44:22,080
You have like two minutes.

423
00:44:22,080 --> 00:44:23,080
For this one?

424
00:44:23,080 --> 00:44:24,080
Yeah.

425
00:44:24,080 --> 00:44:51,080
And if you're done quickly, you might want to experiment. Maybe try adding some code that you're curious about and see what Pyre thinks about it.

426
00:44:54,080 --> 00:45:03,080
Like for example, yeah, like at the end we have a couple of questions. You can try to answer that. Try using reveal type to see what the type of each expression is.

427
00:45:07,080 --> 00:45:19,080
It's a statement. It's just a statement that you add. So you say reveal type and then the expression. So when you run Pyre, it will print the type of that expression. And at runtime, it doesn't do anything.

428
00:45:24,080 --> 00:45:25,080
You have to like import that.

429
00:45:27,080 --> 00:45:33,080
So yeah, right now it's we're in the process of adding it to typing, but all type checkers sort of treat it as a magic built in.

430
00:45:34,080 --> 00:45:49,080
So yeah, if you run the code, it'll probably blow up right now because it's not a valid thing, but it's useful for debugging your type checking code. So you don't land the code. It's when you're trying to figure out where your program is going wrong. If you're curious, you can just add reveal type and then foo.

431
00:45:49,080 --> 00:46:01,080
Figure out what it is and then remove that. So in the future we'll be adding it to typing in the official library so that everybody can just import it and leave it in code if they're lazy.

432
00:46:05,080 --> 00:46:06,080
Pyre will flag it.

433
00:46:07,080 --> 00:46:09,080
So yeah, it won't go silently.

434
00:46:10,080 --> 00:46:18,080
Yeah, so the idea is you never want to allow people to have runtime errors as far as possible. The aim is to catch as many of them as you can up front.

435
00:46:20,080 --> 00:46:22,080
Shannon, how are we doing on time?

436
00:46:23,080 --> 00:46:31,080
Okay, yeah, time's up. Did everybody get it or are you still stuck on a few steps?

437
00:46:32,080 --> 00:46:33,080
Jia?

438
00:46:38,080 --> 00:46:42,080
I see quite a few green stickers. All right, let's look at.

439
00:46:42,080 --> 00:46:43,080
Let's look at.

440
00:46:48,080 --> 00:46:54,080
So what did you get for the first function? What does it expect as an argument?

441
00:46:55,080 --> 00:46:58,080
List of string and what does it return?

442
00:47:04,080 --> 00:47:05,080
Yeah.

443
00:47:05,080 --> 00:47:17,080
So let's look at the doc string, right? So it expects a list of strings and then it returns a list of list of strings. Did everybody get that?

444
00:47:18,080 --> 00:47:31,080
So it's a nested list. If you want to convince yourself by looking at each element. So it's a list where each element is again a list and the element of that is a string. So it's a list within brackets, list within brackets, string.

445
00:47:32,080 --> 00:47:34,080
Any questions or anybody has?

446
00:47:34,080 --> 00:47:35,080
What's that?

447
00:47:38,080 --> 00:47:39,080
Lowercase list.

448
00:47:42,080 --> 00:47:43,080
Yeah.

449
00:47:44,080 --> 00:47:46,080
And did everybody get the bug?

450
00:47:47,080 --> 00:47:51,080
Right, so the bug is that we're passing in something that is an integer in the middle of a list.

451
00:47:52,080 --> 00:47:56,080
So yeah, here's the solution if anybody is still doing it.

452
00:47:57,080 --> 00:48:04,080
And I hope you tried out like some of the questions below. If you try to reveal type of a variable, you can see what pyre thinks it is.

453
00:48:05,080 --> 00:48:08,080
So you can sort of experiment with that if you like.

454
00:48:09,080 --> 00:48:12,080
I'm going to move on to the next exercise unless there are any pressing questions. No?

455
00:48:14,080 --> 00:48:19,080
Okay. Yeah, if you're stuck, please add a red sticky so that we know. All right.

456
00:48:20,080 --> 00:48:22,080
First exercise with classes.

457
00:48:22,080 --> 00:48:27,080
Go to the URL for classes. I think it's called simple class.

458
00:48:42,080 --> 00:48:45,080
If you want to make it returns an instance of the same class.

459
00:48:45,080 --> 00:48:52,080
Okay. So yeah, the Dunder init doesn't always return none.

460
00:48:53,080 --> 00:49:00,080
But yeah, in case you want to return something of the same class, I think in later versions, I think from 310 onwards, you can just import.

461
00:49:01,080 --> 00:49:06,080
You can just use the class. In older versions, you have to use either from future import annotations.

462
00:49:15,080 --> 00:49:17,080
You said you could like quote it?

463
00:49:17,080 --> 00:49:20,080
Quote it. So you can say like return is like quote top.

464
00:49:20,080 --> 00:49:27,080
And then that way the type checker views that as the same thing, but you don't run into the runtime error of like referring to something that is.

465
00:49:28,080 --> 00:49:29,080
Is that pyre specific?

466
00:49:29,080 --> 00:49:33,080
No, it's standard. So everything here is standard. Yeah, this is, yeah.

467
00:49:33,080 --> 00:49:39,080
Like a lot of us have come into these dynamic patterns and like figured out workarounds.

468
00:49:45,080 --> 00:49:48,080
Yeah.

469
00:50:15,080 --> 00:50:18,080
Yeah.

470
00:50:18,080 --> 00:50:21,080
Yeah.

471
00:50:21,080 --> 00:50:23,080
Just need to keep that.

472
00:50:23,080 --> 00:50:25,080
Yeah.

473
00:50:25,080 --> 00:50:28,080
Yeah.

474
00:50:28,080 --> 00:50:30,080
Yeah.

475
00:50:30,080 --> 00:50:33,080
Yeah.

476
00:50:33,080 --> 00:50:38,080
Yeah.

477
00:50:38,080 --> 00:50:41,080
Oh yeah.

478
00:50:41,080 --> 00:50:43,080
Perfect.

479
00:50:43,080 --> 00:50:48,080
We expected.

480
00:50:48,080 --> 00:50:51,080
Just make it very of none.

481
00:50:51,080 --> 00:50:56,080
Yeah. So greed expects a string to be returned.

482
00:50:56,080 --> 00:50:59,080
So that's what it says. Expected string.

483
00:50:59,080 --> 00:51:05,080
So what you because you're not return anything by default means you're returning none.

484
00:51:05,080 --> 00:51:07,080
So that's the mismatch.

485
00:51:07,080 --> 00:51:17,080
Okay.

486
00:51:17,080 --> 00:51:21,080
I want one of these.

487
00:51:21,080 --> 00:51:22,080
Yeah.

488
00:51:22,080 --> 00:51:26,080
I don't have a guess.

489
00:51:26,080 --> 00:51:30,080
We should be like whoever wins like whoever finishes first.

490
00:51:30,080 --> 00:51:35,080
I know.

491
00:51:35,080 --> 00:51:37,080
Yeah, we have 30 seconds left.

492
00:52:00,080 --> 00:52:05,080
So.

493
00:52:05,080 --> 00:52:19,080
How's it go?

494
00:52:19,080 --> 00:52:21,080
So I annotated this up here.

495
00:52:21,080 --> 00:52:22,080
I think directly.

496
00:52:22,080 --> 00:52:23,080
Yeah, that's.

497
00:52:23,080 --> 00:52:24,080
I see that.

498
00:52:24,080 --> 00:52:25,080
Yeah.

499
00:52:25,080 --> 00:52:26,080
And then down here.

500
00:52:26,080 --> 00:52:31,080
I have a bug talking about how our.

501
00:52:31,080 --> 00:52:33,080
Sorry, our.

502
00:52:33,080 --> 00:52:34,080
String.

503
00:52:34,080 --> 00:52:35,080
So here.

504
00:52:35,080 --> 00:52:38,080
I'm just trying to figure out.

505
00:52:38,080 --> 00:52:42,080
How to like this looks like a string to me.

506
00:52:42,080 --> 00:52:44,080
So wait.

507
00:52:44,080 --> 00:52:46,080
This is on nine twenty two.

508
00:52:46,080 --> 00:52:48,080
Oh, okay.

509
00:52:48,080 --> 00:52:49,080
Okay.

510
00:52:49,080 --> 00:52:54,080
Thanks.

511
00:52:54,080 --> 00:52:55,080
Okay.

512
00:52:55,080 --> 00:52:59,080
I think I see a lot of people already done with this.

513
00:52:59,080 --> 00:53:03,080
So yeah, what do you end it for the constructor?

514
00:53:03,080 --> 00:53:04,080
Title.

515
00:53:04,080 --> 00:53:06,080
What do you get for title?

516
00:53:06,080 --> 00:53:09,080
String.

517
00:53:09,080 --> 00:53:13,080
R is int and the constructor returns none.

518
00:53:13,080 --> 00:53:15,080
And what were the errors?

519
00:53:15,080 --> 00:53:17,080
What are the bugs?

520
00:53:17,080 --> 00:53:22,080
Line number.

521
00:53:22,080 --> 00:53:23,080
Okay.

522
00:53:23,080 --> 00:53:25,080
Yeah, you're trying to passing in.

523
00:53:25,080 --> 00:53:27,080
You're trying to pass in R as a string.

524
00:53:27,080 --> 00:53:28,080
I think that was the error.

525
00:53:28,080 --> 00:53:29,080
Was that?

526
00:53:29,080 --> 00:53:30,080
Yeah.

527
00:53:30,080 --> 00:53:32,080
So like input is already defined in the standard library.

528
00:53:32,080 --> 00:53:34,080
So it already comes with types.

529
00:53:34,080 --> 00:53:36,080
Fire knows that input returns a string.

530
00:53:36,080 --> 00:53:38,080
So that's how it figured out that you could get something wrong.

531
00:53:38,080 --> 00:53:42,080
So if you tried this at runtime, it would blow up.

532
00:53:42,080 --> 00:53:44,080
Yeah.

533
00:53:44,080 --> 00:53:45,080
XS five.

534
00:53:45,080 --> 00:53:47,080
This is slightly more complicated.

535
00:53:47,080 --> 00:53:49,080
So it's okay to take a bit of time on this.

536
00:53:49,080 --> 00:53:55,080
It's fine.

537
00:53:55,080 --> 00:53:58,080
Oh, it's a bit really formatted.

538
00:53:58,080 --> 00:54:01,080
Yeah, we had to increase the font at the last minute.

539
00:54:01,080 --> 00:54:03,080
Sorry about that.

540
00:54:03,080 --> 00:54:13,080
So it's under multiple classes.

541
00:54:13,080 --> 00:54:16,080
So we didn't hand these out at the end?

542
00:54:16,080 --> 00:54:21,080
No.

543
00:54:21,080 --> 00:54:22,080
Next section.

544
00:54:22,080 --> 00:54:45,080
Okay.

545
00:54:45,080 --> 00:55:10,080
Okay.

546
00:55:10,080 --> 00:55:37,080
Okay.

547
00:55:37,080 --> 00:55:40,080
Okay.

548
00:56:07,080 --> 00:56:32,080
Okay.

549
00:56:32,080 --> 00:56:59,080
Okay.

550
00:56:59,080 --> 00:57:02,080
Okay.

551
00:57:29,080 --> 00:57:38,080
Any questions?

552
00:57:38,080 --> 00:57:51,080
I know this is a bit involved compared to the previous exercises.

553
00:57:51,080 --> 00:57:52,080
Yeah.

554
00:57:52,080 --> 00:57:53,080
So yeah, what does it return?

555
00:57:53,080 --> 00:57:54,080
String?

556
00:57:54,080 --> 00:57:55,080
Yeah, string.

557
00:57:55,080 --> 00:58:00,080
So if you try it and ask Fire, it will tell you.

558
00:58:00,080 --> 00:58:10,080
So on line 23.

559
00:58:10,080 --> 00:58:13,080
So that's the button.

560
00:58:13,080 --> 00:58:15,080
No, you're right.

561
00:58:15,080 --> 00:58:20,080
Yeah, you just sort of figured out that somebody just uses input and passes it.

562
00:58:20,080 --> 00:58:23,080
It's a string which will fail later on.

563
00:58:23,080 --> 00:58:24,080
Yeah.

564
00:58:24,080 --> 00:58:29,080
Just to show that you can find out what's here.

565
00:58:29,080 --> 00:58:33,080
People are routinely getting confused because of the line number.

566
00:58:33,080 --> 00:58:36,080
Even though we showed highlighting.

567
00:58:36,080 --> 00:59:02,080
Okay.

568
00:59:02,080 --> 00:59:04,080
I'm going to call time.

569
00:59:04,080 --> 00:59:05,080
Is everybody done?

570
00:59:05,080 --> 00:59:09,080
Is everybody sort of still stuck or needs some help?

571
00:59:09,080 --> 00:59:12,080
Okay.

572
00:59:12,080 --> 00:59:15,080
What did you get for?

573
00:59:15,080 --> 00:59:20,080
So did everybody annotate the constructor?

574
00:59:20,080 --> 00:59:21,080
Can you show me the code?

575
00:59:21,080 --> 00:59:22,080
I don't have the code in front of me.

576
00:59:22,080 --> 00:59:23,080
Oh darn, what is this?

577
00:59:23,080 --> 00:59:24,080
Multi classes?

578
00:59:24,080 --> 00:59:29,080
Yeah.

579
00:59:29,080 --> 00:59:30,080
Okay.

580
00:59:30,080 --> 00:59:31,080
Okay.

581
00:59:31,080 --> 00:59:32,080
Okay.

582
00:59:32,080 --> 00:59:33,080
Okay.

583
00:59:33,080 --> 00:59:34,080
Okay.

584
00:59:34,080 --> 00:59:35,080
Okay.

585
00:59:35,080 --> 00:59:36,080
Okay.

586
00:59:36,080 --> 00:59:39,080
Did everybody get location as string?

587
00:59:39,080 --> 00:59:42,080
Yeah, as int.

588
00:59:42,080 --> 00:59:45,080
Did you annotate the talk, self.talks?

589
00:59:45,080 --> 00:59:48,080
Yeah, wait.

590
00:59:48,080 --> 00:59:51,080
It's a list of talk.

591
00:59:51,080 --> 00:59:52,080
Oh.

592
00:59:52,080 --> 00:59:57,080
Oh, can you look into that?

593
00:59:58,080 --> 01:00:01,080
It should have been a list of talk.

594
01:00:01,080 --> 01:00:03,080
Did you get that?

595
01:00:03,080 --> 01:00:06,080
Is that what you got?

596
01:00:06,080 --> 01:00:11,080
So self.talks is annotated as a list of talks.

597
01:00:11,080 --> 01:00:16,080
So yeah.

598
01:00:16,080 --> 01:00:17,080
Okay.

599
01:00:17,080 --> 01:00:18,080
Cool.

600
01:00:18,080 --> 01:00:19,080
No worries.

601
01:00:19,080 --> 01:00:20,080
No worries.

602
01:00:20,080 --> 01:00:21,080
Yeah.

603
01:00:21,080 --> 01:00:23,080
So yeah, you can follow along here if you missed it.

604
01:00:23,080 --> 01:00:25,080
So self.talks is an empty list.

605
01:00:25,080 --> 01:00:30,080
So we need to help it out by saying this is a list of talks.

606
01:00:30,080 --> 01:00:31,080
So we annotate add talk.

607
01:00:31,080 --> 01:00:34,080
So add talk expects a talk.

608
01:00:34,080 --> 01:00:36,080
Calendar returns a string.

609
01:00:36,080 --> 01:00:41,080
And so you also need to annotate functions because we want Pyre to analyze them, right?

610
01:00:41,080 --> 01:00:45,080
So we say get start r takes a talk and returns an int.

611
01:00:45,080 --> 01:00:47,080
Did we get that?

612
01:00:47,080 --> 01:00:49,080
So did you catch the error?

613
01:00:49,080 --> 01:00:54,080
So we're using talk.start r, but talk doesn't have start r.

614
01:00:54,080 --> 01:00:55,080
It just has r.

615
01:00:55,080 --> 01:01:00,080
So this is the kind of sort of subtle bug you might miss if you're just reading code by yourself.

616
01:01:00,080 --> 01:01:05,080
But then if you have a type check, it just catches all these errors across your code base.

617
01:01:05,080 --> 01:01:07,080
Any questions about this?

618
01:01:07,080 --> 01:01:08,080
Yeah?

619
01:01:08,080 --> 01:01:09,080
Okay.

620
01:01:09,080 --> 01:01:18,080
This is a good question.

621
01:01:18,080 --> 01:01:30,080
So because the parameter was annotated, so locations, location, and the other one was annotated up in the parameters, you don't need to sort of say self.location colon string because Pyre can figure that out.

622
01:01:30,080 --> 01:01:39,080
But for things where you're initializing on the spot and not using a preexisting variable, you usually want to help Pyre out by saying this is a list of talks and things like that.

623
01:01:39,080 --> 01:01:40,080
Okay?

624
01:01:40,080 --> 01:01:41,080
So yeah, it doesn't hurt, though.

625
01:01:41,080 --> 01:01:43,080
You can always add an extra annotation.

626
01:01:43,080 --> 01:01:46,080
It doesn't hurt, but you don't need to do it.

627
01:01:46,080 --> 01:01:48,080
Any other questions?

628
01:01:48,080 --> 01:01:49,080
All right.

629
01:01:49,080 --> 01:01:52,080
We'll move to dictionaries and tuples.

630
01:01:52,080 --> 01:01:56,080
This is again a bit complicated, so it's okay to get stuck.

631
01:01:56,080 --> 01:02:01,080
If it takes some time, it's fine.

632
01:02:01,080 --> 01:02:04,080
Go to the next URL under dictionaries and tuples.

633
01:02:04,080 --> 01:02:08,080
I noticed for this one, like the ID didn't pick up the type error on this one.

634
01:02:08,080 --> 01:02:12,080
Is there like Jeff Reigns integrations for Pyre?

635
01:02:12,080 --> 01:02:13,080
Oh, are you doing it in ID?

636
01:02:13,080 --> 01:02:14,080
Yeah.

637
01:02:14,080 --> 01:02:15,080
Yes.

638
01:02:15,080 --> 01:02:18,080
So VS code comes with support.

639
01:02:18,080 --> 01:02:21,080
So I don't know if you have instructions for this tutorial, but yeah.

640
01:02:21,080 --> 01:02:27,080
There are some issues.

641
01:02:27,080 --> 01:02:28,080
There's issues with it?

642
01:02:28,080 --> 01:02:29,080
Yeah.

643
01:02:29,080 --> 01:02:33,080
So I would just run Pyre.

644
01:02:33,080 --> 01:02:35,080
Pyre comes with VS code.

645
01:02:35,080 --> 01:02:36,080
That's one option.

646
01:02:36,080 --> 01:02:38,080
Or you can just run Pyre in the terminal.

647
01:02:38,080 --> 01:02:40,080
Yeah.

648
01:02:40,080 --> 01:02:46,080
So yeah, we are sort of improving our ID support so that you can see stuff.

649
01:02:46,080 --> 01:02:47,080
You can do stuff like code navigation.

650
01:02:47,080 --> 01:02:50,080
Will there eventually be any Jeff Reigns IDs?

651
01:02:50,080 --> 01:02:52,080
I'm guessing, yeah.

652
01:02:52,080 --> 01:02:55,080
But yeah, so right now it's like the only Pyre ID is the major one.

653
01:02:55,080 --> 01:03:01,080
We have like LSP support, so anything that reads in like language server protocol should be able to use it.

654
01:03:01,080 --> 01:03:02,080
I'm not familiar with LSP.

655
01:03:02,080 --> 01:03:03,080
Oh, okay.

656
01:03:03,080 --> 01:03:11,080
I think a lot of editors communicate file changes and expect responses, so like syntax highlighting and stuff, or like error highlighting.

657
01:03:11,080 --> 01:03:14,080
So it's like a common API for all editors.

658
01:03:14,080 --> 01:03:15,080
Yeah.

659
01:03:15,080 --> 01:03:23,080
So yeah, we're not trying to demo it today.

660
01:03:23,080 --> 01:03:27,080
But yeah, so in the future I think Pyre should be able to support like...

661
01:03:27,080 --> 01:03:29,080
Oh yeah, I think he wants JetBrains in particular.

662
01:03:29,080 --> 01:03:30,080
JetBrains?

663
01:03:30,080 --> 01:03:32,080
I don't know how that communicates with...

664
01:03:32,080 --> 01:03:34,080
I'm not familiar with JetBrains.

665
01:03:34,080 --> 01:03:37,080
Okay, so if JetBrains is what you use, we can sort of figure that out.

666
01:03:37,080 --> 01:03:42,080
But then, yeah, if you really want to use type checking, I think right now Pyre is an option.

667
01:03:42,080 --> 01:03:47,080
I think in a few months we'll have support for Pyre as well, but then yeah, these are your options right now.

668
01:03:47,080 --> 01:03:54,080
I mean, you can just run it manually every time you do anything, but ideally, yeah, with...

669
01:03:54,080 --> 01:03:56,080
Yeah, that is ideally what we want to as well.

670
01:03:56,080 --> 01:03:57,080
Yeah.

671
01:03:57,080 --> 01:03:59,080
We're working on that.

672
01:03:59,080 --> 01:04:26,080
Yeah.

673
01:04:56,080 --> 01:05:06,080
We can probably answer all these in the final email to the attendees.

674
01:05:06,080 --> 01:05:08,080
We can just follow up questions.

675
01:05:08,080 --> 01:05:16,080
We can answer them later in the...

676
01:05:16,080 --> 01:05:17,080
Okay, yeah.

677
01:05:17,080 --> 01:05:21,080
Is everyone done or...

678
01:05:21,080 --> 01:05:26,080
I know this was a bit more involved than the previous one, so it's okay.

679
01:05:26,080 --> 01:05:28,080
Should we go ahead with the solution?

680
01:05:28,080 --> 01:05:30,080
Okay.

681
01:05:30,080 --> 01:05:43,080
What did you get for the constructor?

682
01:05:43,080 --> 01:05:46,080
Int, int, and it turns on, and then what...

683
01:05:46,080 --> 01:05:51,080
Did you annotate seating?

684
01:05:51,080 --> 01:06:00,080
Dict from...

685
01:06:00,080 --> 01:06:07,080
Okay, so dictionary from where the keys are ints and then the values are list of strings.

686
01:06:07,080 --> 01:06:08,080
Perfect, yeah.

687
01:06:08,080 --> 01:06:14,080
And then what was the bug?

688
01:06:14,080 --> 01:06:15,080
You didn't get it?

689
01:06:15,080 --> 01:06:17,080
Okay, yeah.

690
01:06:17,080 --> 01:06:22,080
Did you at least get a Pyre error at the bottom when you annotated the functions?

691
01:06:22,080 --> 01:06:25,080
Yeah?

692
01:06:25,080 --> 01:06:27,080
Okay, so let me show you.

693
01:06:27,080 --> 01:06:33,080
So yeah, as you said, you use a dictionary from integers to lists of integers, so I hope

694
01:06:33,080 --> 01:06:34,080
that part is clear.

695
01:06:34,080 --> 01:06:39,080
I can walk through that if anybody is still not convinced.

696
01:06:39,080 --> 01:06:41,080
Yeah, what about...

697
01:06:41,080 --> 01:06:50,080
So did everybody get the type of the attendees parameter?

698
01:06:50,080 --> 01:06:53,080
So we can see that it's a list, right, because we are looping over it.

699
01:06:53,080 --> 01:06:57,080
Let's assume, let's say we know it's a list, and then we sort of...

700
01:06:57,080 --> 01:07:01,080
Each item is a tuple of three elements.

701
01:07:01,080 --> 01:07:02,080
Can everybody see that?

702
01:07:02,080 --> 01:07:06,080
Right, because we say for row, column, attendee, right, so it's a tuple of three.

703
01:07:06,080 --> 01:07:07,080
So what would be the type?

704
01:07:07,080 --> 01:07:09,080
It's a list of...

705
01:07:09,080 --> 01:07:12,080
Yeah, tuple of three things.

706
01:07:12,080 --> 01:07:13,080
And what are those three things?

707
01:07:13,080 --> 01:07:18,080
So we have row, which we know is an integer, column is an integer, and then attendee is

708
01:07:18,080 --> 01:07:19,080
here, string.

709
01:07:19,080 --> 01:07:24,080
So it's a list of tuple of int, int, string, right?

710
01:07:24,080 --> 01:07:26,080
So I hope everybody got that.

711
01:07:26,080 --> 01:07:32,080
So Pyr would have pointed you to saying that this attendee is wrong over here.

712
01:07:32,080 --> 01:07:34,080
So I'll sort of walk through the error.

713
01:07:34,080 --> 01:07:36,080
So if you run Pyr, it says that...

714
01:07:36,080 --> 01:07:37,080
It's a bit hard to understand.

715
01:07:37,080 --> 01:07:41,080
It says list.setItem cannot be something that is a...

716
01:07:41,080 --> 01:07:43,080
Like, can't be a string.

717
01:07:43,080 --> 01:07:45,080
It has to be something that is indexed.

718
01:07:45,080 --> 01:07:46,080
So what does that mean?

719
01:07:46,080 --> 01:07:47,080
So I'll walk through that.

720
01:07:47,080 --> 01:07:50,080
So we know that cell.seeding is a dictionary from int to list.

721
01:07:50,080 --> 01:07:56,080
So then we know that row, row minus one is an integer.

722
01:07:56,080 --> 01:07:59,080
So if you look up an integer in that dictionary, you get a list of strings.

723
01:07:59,080 --> 01:08:01,080
So this whole thing is a list of strings.

724
01:08:01,080 --> 01:08:04,080
And we know that attendee is a string.

725
01:08:04,080 --> 01:08:06,080
But you can't index a list by a string, right?

726
01:08:06,080 --> 01:08:07,080
We saw that earlier.

727
01:08:07,080 --> 01:08:11,080
You can't do foo of some string because that will be an error at runtime.

728
01:08:11,080 --> 01:08:13,080
So that's what Pyr is complaining about.

729
01:08:13,080 --> 01:08:15,080
So in reality, what do you think this should be?

730
01:08:15,080 --> 01:08:17,080
Anybody has any idea?

731
01:08:17,080 --> 01:08:19,080
Column, column minus one, something like that.

732
01:08:19,080 --> 01:08:22,080
So in reality, we should probably...

733
01:08:22,080 --> 01:08:24,080
We intended this to be column minus one.

734
01:08:24,080 --> 01:08:26,080
So again, this is a dictionary.

735
01:08:26,080 --> 01:08:29,080
You look up row, you get list of string.

736
01:08:29,080 --> 01:08:33,080
And you look up the column, you get the string that you want.

737
01:08:33,080 --> 01:08:34,080
Make sense?

738
01:08:34,080 --> 01:08:35,080
So...

739
01:08:35,080 --> 01:08:37,080
Okay.

740
01:08:41,080 --> 01:08:42,080
Dictionary.

741
01:08:46,080 --> 01:08:47,080
Okay. Which one?

742
01:08:49,080 --> 01:08:50,080
The first one?

743
01:08:50,080 --> 01:08:51,080
Okay.

744
01:08:51,080 --> 01:08:53,080
So it's a...

745
01:08:53,080 --> 01:08:58,080
The outer thing is a dictionary comprehension where you have the key is a row.

746
01:08:58,080 --> 01:08:59,080
So row is an int.

747
01:08:59,080 --> 01:09:01,080
So we know that all the keys are ints.

748
01:09:01,080 --> 01:09:04,080
So it's a dictionary from ints to something.

749
01:09:04,080 --> 01:09:06,080
And then now we have to look at the values.

750
01:09:06,080 --> 01:09:08,080
So we know that it's a list.

751
01:09:08,080 --> 01:09:11,080
And then each element is going to be...

752
01:09:13,080 --> 01:09:15,080
A string, is it?

753
01:09:15,080 --> 01:09:17,080
Each element is a list again.

754
01:09:17,080 --> 01:09:20,080
And then each element of that list is a string.

755
01:09:20,080 --> 01:09:22,080
So we get it's a list of strings.

756
01:09:22,080 --> 01:09:24,080
Does that make sense?

757
01:09:24,080 --> 01:09:27,080
So dictionary from integer to list of strings.

758
01:09:29,080 --> 01:09:30,080
Yeah.

759
01:09:30,080 --> 01:09:32,080
Any other questions?

760
01:09:32,080 --> 01:09:33,080
No?

761
01:09:33,080 --> 01:09:35,080
Okay. Everybody's good.

762
01:09:35,080 --> 01:09:38,080
Do we have time for one quick refactoring exercise?

763
01:09:38,080 --> 01:09:39,080
No?

764
01:09:39,080 --> 01:09:41,080
Okay. We're over time.

765
01:09:41,080 --> 01:09:42,080
All right.

766
01:09:42,080 --> 01:09:43,080
I'll...

767
01:09:43,080 --> 01:09:46,080
We have a couple of take-home exercises in the read-me there.

768
01:09:46,080 --> 01:09:48,080
So feel free to try them out.

769
01:09:48,080 --> 01:09:50,080
And if you have any questions, they're always available.

770
01:09:50,080 --> 01:09:52,080
You can ask us.

771
01:09:53,080 --> 01:09:55,080
Oops. Am I going up or down?

772
01:09:56,080 --> 01:10:02,080
So we've learned how to add types to basic constructs like functions, classes, lists, variables.

773
01:10:02,080 --> 01:10:05,080
So with this, you should be able to type check the majority of your code.

774
01:10:05,080 --> 01:10:07,080
For the rest, we'll see the rest of the tutorial.

775
01:10:07,080 --> 01:10:09,080
I'll pass it on to Shannon.

776
01:10:09,080 --> 01:10:11,080
Thank you.

777
01:10:11,080 --> 01:10:13,080
Oh, I should turn this one off.

778
01:10:13,080 --> 01:10:15,080
Okay.

779
01:10:20,080 --> 01:10:22,080
All right.

780
01:10:22,080 --> 01:10:24,080
Oh, okay. Awesome. This works.

781
01:10:24,080 --> 01:10:26,080
So I need my hands to type.

782
01:10:26,080 --> 01:10:28,080
Different mic here.

783
01:10:28,080 --> 01:10:30,080
And this next section will be pretty short.

784
01:10:30,080 --> 01:10:32,080
We're just going to be sort of setting...

785
01:10:32,080 --> 01:10:34,080
Let me also do this.

786
01:10:34,080 --> 01:10:40,080
Setting up an example project so we can try out type checking outside of just the web UI sandbox.

787
01:10:40,080 --> 01:10:43,080
And then after this, we will adjourn for a break.

788
01:10:43,080 --> 01:10:48,080
So this part's kind of like installation heavy, and there's a little bit of demo on your local machine.

789
01:10:48,080 --> 01:10:51,080
So if you have any trouble at any point, just use the red sticky.

790
01:10:51,080 --> 01:10:53,080
People will come around and help.

791
01:10:53,080 --> 01:10:56,080
And then also in the break, which is 30 minutes long, feel free to stay after.

792
01:10:56,080 --> 01:10:58,080
We can help with anything.

793
01:10:58,080 --> 01:11:00,080
So just a heads up.

794
01:11:00,080 --> 01:11:02,080
All right.

795
01:11:02,080 --> 01:11:04,080
Where's my mouse?

796
01:11:04,080 --> 01:11:06,080
Okay.

797
01:11:07,080 --> 01:11:09,080
I'm having trouble clicking.

798
01:11:13,080 --> 01:11:15,080
Okay. I'll use arrow keys.

799
01:11:15,080 --> 01:11:17,080
Okay. Cool.

800
01:11:17,080 --> 01:11:19,080
So first, let's acquire the example project.

801
01:11:19,080 --> 01:11:24,080
We've set up a GitHub repository for you that you can fork or clone if you prefer.

802
01:11:24,080 --> 01:11:29,080
And if someone can come around and pass out these pieces of paper,

803
01:11:29,080 --> 01:11:33,080
we also have the setup instructions on paper in case you need to refer back to them

804
01:11:33,080 --> 01:11:37,080
or you want to take it home and try it on your own project later.

805
01:11:37,080 --> 01:11:42,080
For now, let's all just use this example GitHub repository.

806
01:11:42,080 --> 01:11:47,080
So again, if you run into trouble, please use the red sticky and flag us down

807
01:11:47,080 --> 01:11:52,080
and put up the green one once you get this working so I know that I can move on.

808
01:11:55,080 --> 01:12:01,080
Also, if you had cloned this ahead of time, just do a quick git pull to update

809
01:12:01,080 --> 01:12:05,080
just in case there are any changes that you missed, and that is up to date.

810
01:12:05,080 --> 01:12:07,080
Okay.

811
01:12:29,080 --> 01:12:33,080
There's nothing on the handout that isn't up here, so that's just for reference

812
01:12:33,080 --> 01:12:35,080
Just for reference, so you don't have to read it all.

813
01:13:03,080 --> 01:13:31,080
I wonder if the upstream is set correctly.

814
01:13:31,080 --> 01:13:37,080
So did you fork it or did you just directly clone it?

815
01:13:37,080 --> 01:13:40,080
Clone it directly?

816
01:13:40,080 --> 01:13:45,080
Hey Stephen, could you help us with a git pull?

817
01:13:45,080 --> 01:13:49,080
I think you have to maybe set your upstream to point to the right,

818
01:13:49,080 --> 01:14:04,080
because the git pull is not getting anything.

819
01:14:04,080 --> 01:14:14,080
Reminder to use the green sticky if you're done.

820
01:14:14,080 --> 01:14:17,080
Sorry, I stepped out.

821
01:14:17,080 --> 01:14:19,080
What's the purpose of SSH access?

822
01:14:19,080 --> 01:14:22,080
Because what we're going to fork it and maintain our own?

823
01:14:22,080 --> 01:14:24,080
So this is just for the tutorial.

824
01:14:24,080 --> 01:14:26,080
So we're just going to mess around with a local project.

825
01:14:26,080 --> 01:14:28,080
So just clone it.

826
01:14:28,080 --> 01:14:31,080
The trouble thing is, I don't know, common issues with cloning.

827
01:14:31,080 --> 01:14:38,080
Let me know if you run into it.

828
01:14:38,080 --> 01:14:40,080
So I would also recommend cloning this project,

829
01:14:40,080 --> 01:14:43,080
just because we're going to be using it for examples.

830
01:14:43,080 --> 01:14:47,080
So rather than if you're working on your own project.

831
01:14:47,080 --> 01:14:52,080
In case you clone it a few days ago, make sure you get the most up to date.

832
01:14:52,080 --> 01:14:58,080
If you just pull again, yeah.

833
01:14:58,080 --> 01:15:00,080
Okay, I'm going to flash the next screen.

834
01:15:00,080 --> 01:15:01,080
No rush.

835
01:15:01,080 --> 01:15:04,080
I think most people won't need the next screen.

836
01:15:04,080 --> 01:15:10,080
But if you haven't installed Python already or need to install Watchman,

837
01:15:10,080 --> 01:15:16,080
which is a file monitoring tool, that's also a good time to install these tools.

838
01:15:16,080 --> 01:15:19,080
I mean, Python is pretty self-explanatory.

839
01:15:19,080 --> 01:15:22,080
But for context, Watchman is a file monitoring service.

840
01:15:22,080 --> 01:15:25,080
It basically updates when your files change locally.

841
01:15:25,080 --> 01:15:29,080
And Pyre is kind of built for really, really big code bases,

842
01:15:29,080 --> 01:15:31,080
like millions of lines of code.

843
01:15:31,080 --> 01:15:33,080
We want to be able to give you type checking results within seconds

844
01:15:33,080 --> 01:15:35,080
based on your local changes.

845
01:15:35,080 --> 01:15:37,080
So that's why Watchman comes in handy.

846
01:15:37,080 --> 01:15:39,080
For a tiny project like this one,

847
01:15:39,080 --> 01:15:41,080
you can flash of a performance difference.

848
01:15:41,080 --> 01:15:44,080
So if you don't have Watchman and don't want it, you'll be fine.

849
01:15:44,080 --> 01:15:48,080
But if you want the full experience of fast type checking,

850
01:15:48,080 --> 01:15:54,080
then also install Watchman.

851
01:15:54,080 --> 01:15:56,080
Yeah.

852
01:15:56,080 --> 01:16:03,080
I'm using PyCharm, WSL, and I'll get a message like,

853
01:16:03,080 --> 01:16:09,080
oh, file watcher has failed repeatedly, ceasing indexing or something.

854
01:16:09,080 --> 01:16:14,080
Do you have any thoughts on that?

855
01:16:14,080 --> 01:16:16,080
File watching has failed?

856
01:16:16,080 --> 01:16:18,080
File watcher has failed.

857
01:16:18,080 --> 01:16:19,080
It depends.

858
01:16:19,080 --> 01:16:21,080
I mean, Watchman is one file watcher.

859
01:16:21,080 --> 01:16:25,080
So I'm not sure what the editor is using in that case.

860
01:16:25,080 --> 01:16:26,080
Yeah.

861
01:16:26,080 --> 01:16:28,080
I don't know.

862
01:16:28,080 --> 01:16:32,080
I think I would probably just go with the docs of what's going on there.

863
01:16:32,080 --> 01:16:34,080
Is this Pyright? PyCharm, right?

864
01:16:34,080 --> 01:16:35,080
PyCharm.

865
01:16:35,080 --> 01:16:38,080
They probably have, I don't know,

866
01:16:38,080 --> 01:16:40,080
I would recommend Googling around their forums.

867
01:16:40,080 --> 01:16:42,080
I think they have really decent...

868
01:16:42,080 --> 01:16:48,080
It's a little bit irritating that if I kill the app and then restart it,

869
01:16:48,080 --> 01:16:50,080
then usually it's kind of okay,

870
01:16:50,080 --> 01:16:52,080
and it only becomes a problem with like...

871
01:16:52,080 --> 01:16:54,080
Like big changes or something like that?

872
01:16:54,080 --> 01:16:56,080
Or moderately large code bases.

873
01:16:56,080 --> 01:16:58,080
Or yeah, big changes as well. Yeah, yeah.

874
01:16:58,080 --> 01:17:00,080
Okay.

875
01:17:00,080 --> 01:17:02,080
It'll just give up.

876
01:17:02,080 --> 01:17:05,080
So Watchman is really stable in our experience,

877
01:17:05,080 --> 01:17:08,080
but I doubt that that's what they're using.

878
01:17:08,080 --> 01:17:13,080
So we'll do big rebases in million line code bases,

879
01:17:13,080 --> 01:17:15,080
and Watchman pretty much keeps up.

880
01:17:15,080 --> 01:17:17,080
But I don't know in that case.

881
01:17:17,080 --> 01:17:20,080
For troubleshooting Watchman, usually we just ping it

882
01:17:20,080 --> 01:17:22,080
and see if it's running.

883
01:17:22,080 --> 01:17:24,080
Maybe you can do that under the hood too from the...

884
01:17:24,080 --> 01:17:28,080
like whatever watching service that editor is using.

885
01:17:28,080 --> 01:17:32,080
But yeah, I guess this is pretty common across any of the type checkers

886
01:17:32,080 --> 01:17:36,080
that are trying to do the fast updates.

887
01:17:38,080 --> 01:17:40,080
Okay, I see green stickies.

888
01:17:40,080 --> 01:17:43,080
If you're not able to get this working,

889
01:17:43,080 --> 01:17:45,080
put up a red one.

890
01:17:45,080 --> 01:17:48,080
Someone will come around to help, but I'm just going to keep moving.

891
01:17:51,080 --> 01:17:53,080
Oh, okay.

892
01:17:53,080 --> 01:17:55,080
Okay, cool.

893
01:17:55,080 --> 01:17:57,080
So hopefully everyone now has a project

894
01:17:57,080 --> 01:18:01,080
and Python and maybe Watchman.

895
01:18:01,080 --> 01:18:03,080
So now let's actually install the type checker.

896
01:18:03,080 --> 01:18:06,080
It's available on PyPI as a package.

897
01:18:06,080 --> 01:18:09,080
So these instructions just show you how to set it up

898
01:18:09,080 --> 01:18:12,080
within a virtual environment, just in case you prefer that.

899
01:18:12,080 --> 01:18:17,080
And yeah, the package works on Linux and Mac really well.

900
01:18:17,080 --> 01:18:19,080
Windows support is still on the road map,

901
01:18:19,080 --> 01:18:23,080
so if you do have a Windows machine, we have a repo it,

902
01:18:23,080 --> 01:18:26,080
and we also have a Windows subsystem for Linux instructions.

903
01:18:26,080 --> 01:18:29,080
And those are all in the email that was sent out earlier

904
01:18:29,080 --> 01:18:32,080
and also on the worksheet,

905
01:18:32,080 --> 01:18:35,080
there's a link to those detailed instructions if you need them.

906
01:18:35,080 --> 01:18:38,080
But again, use the red sticky here for sure if you need help.

907
01:18:38,080 --> 01:18:40,080
Yeah, I think that's it.

908
01:18:40,080 --> 01:18:42,080
Give it a try.

909
01:18:47,080 --> 01:18:49,080
Thanks.

910
01:19:17,080 --> 01:19:20,080
Running into issues?

911
01:19:20,080 --> 01:19:22,080
Oh.

912
01:19:22,080 --> 01:19:24,080
That'll do it.

913
01:19:28,080 --> 01:19:30,080
Oh, I'll tell you.

914
01:19:30,080 --> 01:19:32,080
You just run a slightly different command,

915
01:19:32,080 --> 01:19:34,080
but you can run a different command

916
01:19:34,080 --> 01:19:36,080
that will run on the same command.

917
01:19:36,080 --> 01:19:38,080
So I'll tell you how to run the command.

918
01:19:38,080 --> 01:19:40,080
And I'll show you how to run it.

919
01:19:40,080 --> 01:19:42,080
So let's run the command.

920
01:19:42,080 --> 01:19:44,080
So I'll tell you how to run it.

921
01:19:44,080 --> 01:19:46,080
I'll tell you.

922
01:19:46,080 --> 01:19:48,080
You just run a slightly different command,

923
01:19:48,080 --> 01:19:50,080
but everything will be the same.

924
01:20:04,080 --> 01:20:06,080
Oh, don't follow a lot.

925
01:20:06,080 --> 01:20:08,080
We'll actually do everything on the slides,

926
01:20:08,080 --> 01:20:10,080
so don't worry too much about the take-home next steps.

927
01:20:10,080 --> 01:20:13,080
If you haven't seen it up here, don't worry about it.

928
01:20:13,080 --> 01:20:15,080
Yeah, this is for you to take home

929
01:20:15,080 --> 01:20:19,080
if you want to try this again on your own project

930
01:20:19,080 --> 01:20:21,080
or if you need to refer back to something

931
01:20:21,080 --> 01:20:24,080
that we've already covered and I already moved on.

932
01:20:24,080 --> 01:20:28,080
No, no, I haven't done that yet.

933
01:20:28,080 --> 01:20:30,080
Yeah.

934
01:20:30,080 --> 01:20:32,080
Yeah.

935
01:20:32,080 --> 01:20:34,080
Well, actually, I guess we can hopefully move on.

936
01:20:34,080 --> 01:20:37,080
Anyone, again, if you need help, red sticky.

937
01:20:37,080 --> 01:20:39,080
Okay, we can get to the fun part now.

938
01:20:39,080 --> 01:20:41,080
We've installed everything, hopefully.

939
01:20:41,080 --> 01:20:43,080
Okay, cool.

940
01:20:43,080 --> 01:20:45,080
Let's run the type checker on your machine for the first time.

941
01:20:45,080 --> 01:20:47,080
So you have a project, you have a type checker,

942
01:20:47,080 --> 01:20:51,080
and if you did have problems installing anything,

943
01:20:51,080 --> 01:20:54,080
there is a sandbox version of the upcoming exercise.

944
01:20:54,080 --> 01:20:56,080
It's kind of limited.

945
01:20:56,080 --> 01:20:58,080
I would recommend you do the local setup if you have it,

946
01:20:58,080 --> 01:21:00,080
but that's there in case.

947
01:21:00,080 --> 01:21:02,080
Okay, great.

948
01:21:02,080 --> 01:21:04,080
So now let me also drag...

949
01:21:04,080 --> 01:21:06,080
Oh, are we in full screen mode?

950
01:21:08,080 --> 01:21:10,080
What's going on?

951
01:21:12,080 --> 01:21:14,080
Oh, okay.

952
01:21:14,080 --> 01:21:16,080
The orientation is not what I expected.

953
01:21:16,080 --> 01:21:18,080
Okay, cool.

954
01:21:18,080 --> 01:21:20,080
So that's just there for reference

955
01:21:20,080 --> 01:21:22,080
so you can kind of see what I'm doing.

956
01:21:22,080 --> 01:21:26,080
All right, so let's CD into the project that you just pulled.

957
01:21:26,080 --> 01:21:30,080
And then you can quickly take a look around.

958
01:21:30,080 --> 01:21:32,080
So we have a few directors in here,

959
01:21:32,080 --> 01:21:34,080
but for now let's start with demo project.

960
01:21:34,080 --> 01:21:36,080
So please CD into demo project.

961
01:21:37,080 --> 01:21:39,080
And if we look around in here,

962
01:21:39,080 --> 01:21:42,080
we just have basically two little Python files.

963
01:21:42,080 --> 01:21:45,080
There's a greet.py, a planets.py.

964
01:21:45,080 --> 01:21:48,080
If you're curious, this is just a little program

965
01:21:48,080 --> 01:21:50,080
that asks you how many times to say hello

966
01:21:50,080 --> 01:21:52,080
and then prints hello world that many times.

967
01:21:52,080 --> 01:21:54,080
Pretty simple.

968
01:21:54,080 --> 01:21:56,080
So let's try to run this through a type checker.

969
01:21:56,080 --> 01:21:58,080
The first step to do that...

970
01:21:58,080 --> 01:22:00,080
Oh, let me also make sure that I'm...

971
01:22:00,080 --> 01:22:03,080
Can I make it bigger? Probably.

972
01:22:05,080 --> 01:22:07,080
I don't know if that's actually helpful.

973
01:22:07,080 --> 01:22:09,080
Okay.

974
01:22:09,080 --> 01:22:11,080
Oh.

975
01:22:11,080 --> 01:22:13,080
Okay.

976
01:22:13,080 --> 01:22:16,080
So everyone should run pyre init.

977
01:22:16,080 --> 01:22:19,080
This is a really easy way to set up a pyre configuration.

978
01:22:19,080 --> 01:22:22,080
And you can just hit enter, accept all the defaults.

979
01:22:22,080 --> 01:22:25,080
Just for context, you can run pyre init.

980
01:22:25,080 --> 01:22:27,080
You can run pyre init.

981
01:22:27,080 --> 01:22:29,080
You can just hit enter, accept all the defaults.

982
01:22:29,080 --> 01:22:31,080
Just for context, you can run pyre

983
01:22:31,080 --> 01:22:33,080
by passing in what you want type checked manually

984
01:22:33,080 --> 01:22:35,080
on the command line.

985
01:22:35,080 --> 01:22:37,080
But a configuration is just an easy way

986
01:22:37,080 --> 01:22:39,080
to avoid typing that every time.

987
01:22:39,080 --> 01:22:41,080
It lets pyre create that server

988
01:22:41,080 --> 01:22:43,080
that does the fast type checking with watchmen

989
01:22:43,080 --> 01:22:45,080
that we talked about before.

990
01:22:45,080 --> 01:22:47,080
And it makes sure that your project

991
01:22:47,080 --> 01:22:49,080
is sort of consistently defined as a set of files

992
01:22:49,080 --> 01:22:51,080
for future type checking.

993
01:22:51,080 --> 01:22:53,080
So I always recommend just running pyre init.

994
01:22:53,080 --> 01:22:55,080
And then...

995
01:22:55,080 --> 01:22:57,080
Let me CD into that project down here, too.

996
01:22:57,080 --> 01:22:59,080
Okay.

997
01:22:59,080 --> 01:23:01,080
So now if everyone has run pyre init

998
01:23:01,080 --> 01:23:03,080
and just hit enter a couple times,

999
01:23:03,080 --> 01:23:05,080
let's just try running pyre.

1000
01:23:07,080 --> 01:23:09,080
And you should see a type error.

1001
01:23:15,080 --> 01:23:17,080
Just type pyre.

1002
01:23:17,080 --> 01:23:19,080
Yep.

1003
01:23:19,080 --> 01:23:21,080
And again, red sticky

1004
01:23:21,080 --> 01:23:23,080
or raise your hand if you need help.

1005
01:23:25,080 --> 01:23:27,080
Yes, we're expecting to see an error.

1006
01:23:27,080 --> 01:23:29,080
So if you see a type error,

1007
01:23:29,080 --> 01:23:31,080
you've done it right.

1008
01:23:35,080 --> 01:23:37,080
Hey, what's up?

1009
01:23:41,080 --> 01:23:43,080
Oh, do you already have a configuration set up?

1010
01:23:43,080 --> 01:23:45,080
Can you do ls-la?

1011
01:23:45,080 --> 01:23:47,080
Oh, dash...

1012
01:23:47,080 --> 01:23:49,080
Oh, yeah, that's fine.

1013
01:23:49,080 --> 01:23:51,080
Can you open up your local configuration?

1014
01:23:51,080 --> 01:23:53,080
Okay.

1015
01:23:53,080 --> 01:23:55,080
Local configuration.

1016
01:23:55,080 --> 01:23:57,080
Oh.

1017
01:23:57,080 --> 01:23:59,080
It's just...

1018
01:23:59,080 --> 01:24:01,080
Sorry, the dot pyre configuration local

1019
01:24:01,080 --> 01:24:03,080
is cat.

1020
01:24:09,080 --> 01:24:11,080
Oh.

1021
01:24:11,080 --> 01:24:13,080
Oh, oh.

1022
01:24:13,080 --> 01:24:15,080
I would just put a dot in the string there

1023
01:24:15,080 --> 01:24:17,080
just to say I want to type...

1024
01:24:17,080 --> 01:24:19,080
Maybe that was like a weird input into that prompt.

1025
01:24:19,080 --> 01:24:21,080
Just in the quoted string.

1026
01:24:21,080 --> 01:24:23,080
Yeah.

1027
01:24:23,080 --> 01:24:25,080
Yeah, and now try it again.

1028
01:24:31,080 --> 01:24:33,080
Oh, do you have something higher up?

1029
01:24:33,080 --> 01:24:35,080
Did you run pyre in the...

1030
01:24:35,080 --> 01:24:37,080
Oh, so go back up and just delete that.

1031
01:24:37,080 --> 01:24:39,080
Yeah, yeah, that's why.

1032
01:24:39,080 --> 01:24:41,080
Anyone else need help?

1033
01:24:41,080 --> 01:24:43,080
Oh, hey.

1034
01:24:43,080 --> 01:24:45,080
Oh, I'm sorry.

1035
01:24:45,080 --> 01:24:47,080
Oh, I'm sorry.

1036
01:24:47,080 --> 01:24:49,080
Oh, hey.

1037
01:24:49,080 --> 01:24:51,080
I'm just getting a...

1038
01:24:51,080 --> 01:24:53,080
Saying that pyre's giving a non-zero.

1039
01:24:57,080 --> 01:24:59,080
No watchman binary.

1040
01:24:59,080 --> 01:25:01,080
Okay, so you don't have watchman?

1041
01:25:01,080 --> 01:25:03,080
Oh, just run pyre check instead.

1042
01:25:03,080 --> 01:25:05,080
I thought that maybe it would just handle that.

1043
01:25:05,080 --> 01:25:07,080
Yeah, space check, yeah.

1044
01:25:11,080 --> 01:25:13,080
Oh, what happened here?

1045
01:25:13,080 --> 01:25:15,080
So I'm on like an engineering computing

1046
01:25:15,080 --> 01:25:19,080
build for my company, so I'm on like Suzy 11.

1047
01:25:19,080 --> 01:25:21,080
Did you successfully install pyre from PIP?

1048
01:25:21,080 --> 01:25:23,080
Like did that work?

1049
01:25:23,080 --> 01:25:25,080
Yeah, the PIP, yeah, installed from PIP just fine.

1050
01:25:27,080 --> 01:25:29,080
The init stuff was kind of weird

1051
01:25:29,080 --> 01:25:31,080
where it was asking me about...

1052
01:25:31,080 --> 01:25:33,080
It's going to give me the error saying I'm a...

1053
01:25:33,080 --> 01:25:35,080
Oh, that's okay.

1054
01:25:35,080 --> 01:25:37,080
Yeah.

1055
01:25:41,080 --> 01:25:43,080
Oh.

1056
01:25:43,080 --> 01:25:45,080
So...

1057
01:25:47,080 --> 01:25:49,080
Let me get...

1058
01:25:49,080 --> 01:25:51,080
I should move on, but let me...

1059
01:25:51,080 --> 01:25:53,080
Hey, could...

1060
01:25:53,080 --> 01:25:55,080
Maybe help here.

1061
01:25:55,080 --> 01:25:57,080
There's like a weird...

1062
01:25:57,080 --> 01:25:59,080
Pyre's not exiting with a weird error.

1063
01:25:59,080 --> 01:26:01,080
Oh, yes, break is almost here.

1064
01:26:01,080 --> 01:26:03,080
In case anyone's hungry.

1065
01:26:07,080 --> 01:26:09,080
Hi.

1066
01:26:09,080 --> 01:26:11,080
Nice to see you.

1067
01:26:11,080 --> 01:26:13,080
I forgot to do that earlier.

1068
01:26:13,080 --> 01:26:15,080
Oh, yeah, we're on track, yeah.

1069
01:26:25,080 --> 01:26:27,080
If you're really struggling

1070
01:26:27,080 --> 01:26:29,080
and you don't...

1071
01:26:29,080 --> 01:26:31,080
I'm going to move on just so we're on time for food.

1072
01:26:31,080 --> 01:26:33,080
You can use the sandbox link

1073
01:26:35,080 --> 01:26:37,080
if you want to follow along with the rest of this example,

1074
01:26:37,080 --> 01:26:39,080
but don't have it working locally.

1075
01:26:39,080 --> 01:26:41,080
And then the break is 30 minutes long,

1076
01:26:41,080 --> 01:26:43,080
so we can also help with more gnarly stuff

1077
01:26:43,080 --> 01:26:45,080
if you're running into installation problems.

1078
01:27:03,080 --> 01:27:05,080
Okay, let's move on.

1079
01:27:05,080 --> 01:27:07,080
Again, feel free to use that sandbox link here

1080
01:27:07,080 --> 01:27:09,080
if you need to,

1081
01:27:09,080 --> 01:27:11,080
but hopefully most of you see a type error.

1082
01:27:11,080 --> 01:27:13,080
So now let's do something about that type error.

1083
01:27:13,080 --> 01:27:15,080
Let's investigate.

1084
01:27:15,080 --> 01:27:17,080
So it says it's in greet.py, right?

1085
01:27:17,080 --> 01:27:19,080
So let's all open up greet.py.

1086
01:27:19,080 --> 01:27:21,080
Okay, and if we look at this function,

1087
01:27:21,080 --> 01:27:23,080
it looks like we ask the user

1088
01:27:23,080 --> 01:27:25,080
how many times you want to say hello,

1089
01:27:25,080 --> 01:27:27,080
and then you print that many times.

1090
01:27:27,080 --> 01:27:29,080
You know, based on the output here,

1091
01:27:29,080 --> 01:27:31,080
does anyone spot the problem

1092
01:27:31,080 --> 01:27:33,080
or know what we would change to fix it?

1093
01:27:33,080 --> 01:27:35,080
So, yeah, let's see.

1094
01:27:35,080 --> 01:27:37,080
Or know what we would change to fix it.

1095
01:27:37,080 --> 01:27:39,080
Yeah.

1096
01:27:39,080 --> 01:27:41,080
Yeah, yeah.

1097
01:27:41,080 --> 01:27:43,080
So you need to make sure we're passing an int

1098
01:27:43,080 --> 01:27:45,080
into greet.

1099
01:27:45,080 --> 01:27:47,080
So that's definitely a type error.

1100
01:27:47,080 --> 01:27:49,080
Pyre is complaining about it,

1101
01:27:49,080 --> 01:27:51,080
and if you are curious, if I can find my mouse,

1102
01:27:51,080 --> 01:27:53,080
you can also try this out at the runtime, right?

1103
01:27:53,080 --> 01:27:55,080
So if you do Python 3, greet.py,

1104
01:27:55,080 --> 01:27:57,080
you ask you, okay,

1105
01:27:57,080 --> 01:27:59,080
how many times do I want to greet?

1106
01:27:59,080 --> 01:28:01,080
Let's say three times, and like bam, this crashes

1107
01:28:01,080 --> 01:28:03,080
because you can't pass a string,

1108
01:28:03,080 --> 01:28:05,080
which I just passed in, to this function

1109
01:28:05,080 --> 01:28:07,080
that's trying to iterate over

1110
01:28:07,080 --> 01:28:09,080
a number of times to print.

1111
01:28:09,080 --> 01:28:11,080
So let's fix this.

1112
01:28:11,080 --> 01:28:13,080
So everyone should just follow along here.

1113
01:28:13,080 --> 01:28:15,080
Maybe like the easiest fix

1114
01:28:15,080 --> 01:28:17,080
is to cast the input

1115
01:28:17,080 --> 01:28:19,080
to an integer.

1116
01:28:21,080 --> 01:28:23,080
My...lost my cursor.

1117
01:28:29,080 --> 01:28:31,080
Okay, cool. So we should fix that.

1118
01:28:31,080 --> 01:28:33,080
And then you can go back here

1119
01:28:33,080 --> 01:28:35,080
and run Pyre again.

1120
01:28:35,080 --> 01:28:37,080
And now it should tell you no type errors are found.

1121
01:28:37,080 --> 01:28:39,080
If you don't have watchmen set up,

1122
01:28:39,080 --> 01:28:41,080
you can run Pyre space check.

1123
01:28:41,080 --> 01:28:43,080
That will basically

1124
01:28:43,080 --> 01:28:45,080
not try to look for file updates.

1125
01:28:45,080 --> 01:28:47,080
It will just recheck your whole project.

1126
01:28:47,080 --> 01:28:49,080
You might notice that this run was like

1127
01:28:49,080 --> 01:28:51,080
a tiny bit faster than the previous one.

1128
01:28:51,080 --> 01:28:53,080
It doesn't make a big difference

1129
01:28:53,080 --> 01:28:55,080
in a small project like this,

1130
01:28:55,080 --> 01:28:57,080
but in a really large project,

1131
01:28:57,080 --> 01:28:59,080
even if we had like millions of other files here

1132
01:28:59,080 --> 01:29:01,080
and we just ran Pyre like this,

1133
01:29:01,080 --> 01:29:03,080
this speed would be consistent.

1134
01:29:03,080 --> 01:29:05,080
So if you're running incremental with watchmen,

1135
01:29:05,080 --> 01:29:07,080
you aren't like

1136
01:29:07,080 --> 01:29:09,080
blocked on rechecking all these other

1137
01:29:09,080 --> 01:29:11,080
unrelated files just because you wanted

1138
01:29:11,080 --> 01:29:13,080
to update based on what you just changed.

1139
01:29:17,080 --> 01:29:19,080
Alright, I'm going to

1140
01:29:19,080 --> 01:29:21,080
keep moving.

1141
01:29:21,080 --> 01:29:23,080
Again, we'll be around to help

1142
01:29:23,080 --> 01:29:25,080
if you need to...

1143
01:29:25,080 --> 01:29:27,080
if you need to get help after.

1144
01:29:27,080 --> 01:29:29,080
So yeah, we should see no type errors found

1145
01:29:29,080 --> 01:29:31,080
after we made those changes

1146
01:29:31,080 --> 01:29:33,080
to greet.py to cast to an int.

1147
01:29:33,080 --> 01:29:35,080
So now let's say that

1148
01:29:35,080 --> 01:29:37,080
we realize

1149
01:29:37,080 --> 01:29:39,080
that actually it's kind of silly

1150
01:29:39,080 --> 01:29:41,080
to greet the same thing

1151
01:29:41,080 --> 01:29:43,080
multiple times, and this is actually not useful.

1152
01:29:43,080 --> 01:29:45,080
And we want to refactor

1153
01:29:45,080 --> 01:29:47,080
our greet function here to no longer

1154
01:29:47,080 --> 01:29:49,080
take repeat count.

1155
01:29:49,080 --> 01:29:51,080
So let's all change that.

1156
01:29:51,080 --> 01:29:53,080
We can delete this input.

1157
01:29:53,080 --> 01:29:55,080
We're just going to just print the greetings straight up.

1158
01:29:55,080 --> 01:29:57,080
We don't need this anymore.

1159
01:29:57,080 --> 01:29:59,080
And we can also, of course,

1160
01:29:59,080 --> 01:30:01,080
don't forget to refactor the call site

1161
01:30:01,080 --> 01:30:03,080
to no longer pass in the parameter

1162
01:30:03,080 --> 01:30:05,080
we don't support.

1163
01:30:05,080 --> 01:30:07,080
So let's write that.

1164
01:30:07,080 --> 01:30:09,080
And then

1165
01:30:09,080 --> 01:30:11,080
we can run py again.

1166
01:30:11,080 --> 01:30:13,080
Just to see.

1167
01:30:13,080 --> 01:30:15,080
Like, oh, oh boy.

1168
01:30:15,080 --> 01:30:17,080
Okay.

1169
01:30:17,080 --> 01:30:19,080
So we actually got...oh, sorry.

1170
01:30:19,080 --> 01:30:21,080
We actually got a type error.

1171
01:30:21,080 --> 01:30:23,080
Maybe we weren't expecting this because

1172
01:30:23,080 --> 01:30:25,080
we were just heads down in greet.py

1173
01:30:25,080 --> 01:30:27,080
changing things around.

1174
01:30:27,080 --> 01:30:29,080
But it does turn out that our project

1175
01:30:29,080 --> 01:30:31,080
has another call site

1176
01:30:31,080 --> 01:30:33,080
somewhere downstream. Like, maybe we don't own

1177
01:30:33,080 --> 01:30:35,080
this code. Maybe it's just something

1178
01:30:35,080 --> 01:30:37,080
that depends on our...

1179
01:30:37,080 --> 01:30:39,080
the function that we just

1180
01:30:39,080 --> 01:30:41,080
changed. And it does turn out that if we

1181
01:30:41,080 --> 01:30:43,080
look at greet.py...

1182
01:30:43,080 --> 01:30:45,080
Oh, whoops. Not greet.py.

1183
01:30:45,080 --> 01:30:47,080
Vim planets.

1184
01:30:47,080 --> 01:30:49,080
So, you know,

1185
01:30:49,080 --> 01:30:51,080
here we do see that we have

1186
01:30:51,080 --> 01:30:53,080
another function that depends on greet.

1187
01:30:53,080 --> 01:30:55,080
And it is passing in a parameter.

1188
01:30:55,080 --> 01:30:57,080
And we, you know, just didn't know about this call site.

1189
01:30:57,080 --> 01:30:59,080
So when we made the refactor,

1190
01:30:59,080 --> 01:31:01,080
Pyre is checking all the call sites

1191
01:31:01,080 --> 01:31:03,080
for us to inform us that this is a problem.

1192
01:31:03,080 --> 01:31:05,080
So you can feel free to fix this

1193
01:31:05,080 --> 01:31:07,080
locally if you want to.

1194
01:31:07,080 --> 01:31:09,080
We also have...

1195
01:31:09,080 --> 01:31:11,080
Oh, I think my window

1196
01:31:11,080 --> 01:31:13,080
is maybe gone.

1197
01:31:13,080 --> 01:31:15,080
That's okay.

1198
01:31:15,080 --> 01:31:17,080
Just in the interest of time, I will skip that part.

1199
01:31:17,080 --> 01:31:19,080
But if you do make a pull request

1200
01:31:19,080 --> 01:31:21,080
here and upload that pull request to GitHub,

1201
01:31:21,080 --> 01:31:23,080
you can set up Pyre

1202
01:31:23,080 --> 01:31:25,080
to run on all pull requests in your project.

1203
01:31:25,080 --> 01:31:27,080
So if someone were to say,

1204
01:31:27,080 --> 01:31:29,080
make this refactoring change, not fix

1205
01:31:29,080 --> 01:31:31,080
the planets.py call site, because maybe

1206
01:31:31,080 --> 01:31:33,080
they weren't running type checking locally, and they made

1207
01:31:33,080 --> 01:31:35,080
a pull request, you can have

1208
01:31:35,080 --> 01:31:37,080
a check that will run Pyre on

1209
01:31:37,080 --> 01:31:39,080
every PR and inform you that this isn't safe

1210
01:31:39,080 --> 01:31:41,080
to merge until they fix it.

1211
01:31:41,080 --> 01:31:43,080
During the break, I can pull it up if anyone's curious.

1212
01:31:43,080 --> 01:31:45,080
But, yeah, I think

1213
01:31:45,080 --> 01:31:47,080
that's it. So we've, you know, covered the

1214
01:31:47,080 --> 01:31:49,080
sort of basic motions of how you interact

1215
01:31:49,080 --> 01:31:51,080
with the type checker on the command line.

1216
01:31:51,080 --> 01:31:53,080
Pyre can also integrate with

1217
01:31:53,080 --> 01:31:55,080
code editors to show errors in line

1218
01:31:55,080 --> 01:31:57,080
as you type. But for now,

1219
01:31:57,080 --> 01:31:59,080
we will just adjourn for a break.

1220
01:31:59,080 --> 01:32:01,080
You can kind of continue to

1221
01:32:01,080 --> 01:32:03,080
mess with the example project if you want

1222
01:32:03,080 --> 01:32:05,080
to. We'll use it again right after the break.

1223
01:32:05,080 --> 01:32:07,080
And, of course, feel free to stay

1224
01:32:07,080 --> 01:32:09,080
if you have any questions or you just

1225
01:32:09,080 --> 01:32:11,080
want to talk to us not about this

1226
01:32:11,080 --> 01:32:13,080
specific installation process. We're also

1227
01:32:13,080 --> 01:32:15,080
happy to talk about other things.

1228
01:32:15,080 --> 01:32:17,080
And, yeah, I think the break is 30 minutes long, so we will start

1229
01:32:17,080 --> 01:32:19,080
at 2.30 sharp back here

1230
01:32:19,080 --> 01:32:21,080
with the next section.

1231
01:32:21,080 --> 01:32:23,080
Oh, sorry, 3.30. I'm on the wrong time zone.

1232
01:32:23,080 --> 01:32:27,080
Yeah, enjoy the break.

1233
01:32:45,080 --> 01:32:47,080
Thank you.

1234
01:33:15,080 --> 01:33:17,080
Thank you.

1235
01:33:45,080 --> 01:33:47,080
Thank you.

1236
01:34:15,080 --> 01:34:17,080
Thank you.

1237
01:34:45,080 --> 01:34:47,080
Thank you.

1238
01:35:15,080 --> 01:35:17,080
Thank you.

1239
01:35:45,080 --> 01:35:47,080
Thank you.

1240
01:36:15,080 --> 01:36:17,080
Thank you.

1241
01:36:45,080 --> 01:36:47,080
Thank you.

1242
01:37:15,080 --> 01:37:17,080
Thank you.

1243
01:37:45,080 --> 01:37:47,080
Thanks.

1244
01:37:47,080 --> 01:37:49,080
Thank you.

1245
01:37:51,080 --> 01:37:53,080
Thank you.

1246
01:37:53,080 --> 01:37:55,080
Thank you.

1247
01:38:13,080 --> 01:38:14,280
Yeah, so this will run a full

1248
01:38:14,280 --> 01:38:19,040
basically whichever project you want to define,

1249
01:38:19,040 --> 01:38:20,000
you can just check in.

1250
01:38:20,000 --> 01:38:22,320
I actually, it's in the...

1251
01:38:22,320 --> 01:38:23,640
Well, can you tell me the YAML file

1252
01:38:23,640 --> 01:38:26,640
that you figured out the Pyres in the...

1253
01:38:26,640 --> 01:38:28,920
Well, so we have a Pyre configuration file

1254
01:38:28,920 --> 01:38:30,940
like we created that just says,

1255
01:38:30,940 --> 01:38:32,600
oh, this is the directory to type check,

1256
01:38:32,600 --> 01:38:36,560
and the YAML file just calls into the Pyre action,

1257
01:38:36,560 --> 01:38:39,560
like GitHub action, and that's on the GitHub marketplace,

1258
01:38:39,560 --> 01:38:41,120
so you could download that.

1259
01:38:41,120 --> 01:38:43,200
But yeah, so you can sort of see,

1260
01:38:43,240 --> 01:38:44,760
okay, something went wrong.

1261
01:38:45,800 --> 01:38:46,640
And then...

1262
01:38:52,920 --> 01:38:53,760
Yeah.

1263
01:38:55,560 --> 01:38:56,400
Yeah.

1264
01:38:58,440 --> 01:38:59,280
Yeah.

1265
01:39:00,520 --> 01:39:01,360
Sure.

1266
01:39:11,240 --> 01:39:12,080
Oh yeah, okay.

1267
01:39:12,960 --> 01:39:13,800
Yep.

1268
01:39:15,880 --> 01:39:17,520
Yeah, I mean, it's not practical to...

1269
01:39:17,520 --> 01:39:18,360
Yeah.

1270
01:39:30,880 --> 01:39:32,220
No, it isn't, yeah.

1271
01:39:37,920 --> 01:39:39,160
Yeah, that's a great question.

1272
01:39:39,160 --> 01:39:41,500
It's actually kind of the focus of the next section too,

1273
01:39:41,580 --> 01:39:44,740
but yeah, so we basically, I guess for context,

1274
01:39:44,740 --> 01:39:46,420
and I'll mention this to everyone,

1275
01:39:46,420 --> 01:39:48,700
we went, we basically type checked

1276
01:39:48,700 --> 01:39:50,960
all of Instagram's server code base,

1277
01:39:50,960 --> 01:39:53,060
which is some of the many millions of lines,

1278
01:39:53,060 --> 01:39:55,420
and it went from pretty much lacking types

1279
01:39:55,420 --> 01:39:57,820
to I think 99% covered over the last few years,

1280
01:39:57,820 --> 01:40:02,220
and so we built a lot of sort of auxiliary integration

1281
01:40:02,220 --> 01:40:03,600
tooling on top of a type checker

1282
01:40:03,600 --> 01:40:06,220
to maybe make it really visible

1283
01:40:06,220 --> 01:40:07,940
whenever anyone's typing anything,

1284
01:40:07,940 --> 01:40:09,060
oh, are you missing types?

1285
01:40:09,060 --> 01:40:10,820
What's the type coverage of this file?

1286
01:40:10,820 --> 01:40:13,260
On CI2, you can sort of show type coverage

1287
01:40:13,260 --> 01:40:15,760
and the effect of your current change on type coverage,

1288
01:40:15,760 --> 01:40:17,460
so sort of making it really visible

1289
01:40:17,460 --> 01:40:19,860
to anyone who's changing or writing new code,

1290
01:40:19,860 --> 01:40:21,340
because it's always easier to add types

1291
01:40:21,340 --> 01:40:22,340
when you have that context,

1292
01:40:22,340 --> 01:40:25,700
rather than someone sweeping the trash after,

1293
01:40:25,700 --> 01:40:28,660
you know, trying to keep up, and...

1294
01:40:28,660 --> 01:40:29,900
The store manager, right?

1295
01:40:29,900 --> 01:40:31,380
Yeah, yeah.

1296
01:40:31,380 --> 01:40:33,820
So we would track contributions of individuals too

1297
01:40:33,820 --> 01:40:35,460
for better engineering pushes,

1298
01:40:35,460 --> 01:40:37,540
or just kind of over the long term,

1299
01:40:37,540 --> 01:40:40,700
are you generally contributing to typing efforts,

1300
01:40:41,580 --> 01:40:44,020
or is it just like, wherever it's convenient for you,

1301
01:40:44,020 --> 01:40:45,340
we have automated tooling

1302
01:40:45,340 --> 01:40:47,140
and a lot of other things too to add stuff.

1303
01:40:47,140 --> 01:40:49,900
Sorry, I'm talking a lot, but I'll go into all of this.

1304
01:40:49,900 --> 01:40:50,740
Yeah.

1305
01:40:50,740 --> 01:40:51,580
Yeah.

1306
01:40:51,580 --> 01:40:52,400
Yeah.

1307
01:40:52,400 --> 01:40:53,240
Oh, okay, yeah.

1308
01:40:53,240 --> 01:40:55,420
So like, yeah, we're, I'm trying to find like, okay,

1309
01:40:55,420 --> 01:40:58,220
what tooling can I like pick up,

1310
01:40:58,220 --> 01:40:59,700
that will kind of give me my best like,

1311
01:40:59,700 --> 01:41:00,540
thinking from my box,

1312
01:41:00,540 --> 01:41:01,380
because like rather than being like,

1313
01:41:01,380 --> 01:41:03,220
hey guys, do we need like a little...

1314
01:41:03,220 --> 01:41:04,060
Yes, yeah.

1315
01:41:04,060 --> 01:41:04,900
Because right now we're even like,

1316
01:41:04,900 --> 01:41:06,460
yeah, we're trying to get CI2 going,

1317
01:41:06,460 --> 01:41:07,820
but it's kind of like, you know,

1318
01:41:07,820 --> 01:41:08,740
to like make sure it's like,

1319
01:41:08,900 --> 01:41:09,740
yeah.

1320
01:41:09,740 --> 01:41:10,580
Yeah.

1321
01:41:10,580 --> 01:41:11,420
Yeah.

1322
01:41:11,420 --> 01:41:12,260
Yeah.

1323
01:41:12,260 --> 01:41:17,260
Yeah, that makes sense.

1324
01:41:17,260 --> 01:41:19,780
I think practically speaking for like,

1325
01:41:19,780 --> 01:41:21,500
I want this today,

1326
01:41:21,500 --> 01:41:23,220
I think there are a lot of other type checkers

1327
01:41:23,220 --> 01:41:25,820
with like better open source support right now than Pyre.

1328
01:41:25,820 --> 01:41:27,940
Pyre has a lot of like really awesome tools,

1329
01:41:27,940 --> 01:41:29,700
but a lot of them we haven't ported to open source,

1330
01:41:29,700 --> 01:41:30,980
so we want to do it soon.

1331
01:41:30,980 --> 01:41:32,880
So like some of the things I'll mention like,

1332
01:41:32,880 --> 01:41:35,020
oh, like gutters, where they show the coverage,

1333
01:41:35,020 --> 01:41:36,580
and that's just integrated into your editor.

1334
01:41:36,580 --> 01:41:37,740
Like we use that internally,

1335
01:41:37,740 --> 01:41:39,260
and we want to make it open source soon.

1336
01:41:39,260 --> 01:41:41,700
It's just like, you know, we need the hours to do it.

1337
01:41:41,700 --> 01:41:44,220
So in that sense, like some of the things I talk about,

1338
01:41:44,220 --> 01:41:46,180
like the tooling itself might not be

1339
01:41:46,180 --> 01:41:47,280
immediately ready for Pyre,

1340
01:41:47,280 --> 01:41:49,900
but I do think that like PyWrite has really good

1341
01:41:49,900 --> 01:41:53,020
editor integration, at least for showing types.

1342
01:41:53,020 --> 01:41:56,060
I don't know about like actually showing coverage

1343
01:41:56,060 --> 01:41:56,900
or things like that.

1344
01:41:56,900 --> 01:41:59,900
Yeah, yeah.

1345
01:41:59,900 --> 01:42:04,900
I know the type annotations are relatively new.

1346
01:42:08,100 --> 01:42:10,540
Relatively, yeah, yeah.

1347
01:42:10,540 --> 01:42:12,220
I mean, they used to just be comment strings,

1348
01:42:12,220 --> 01:42:14,740
and type checkers are parts of comment strings.

1349
01:42:14,740 --> 01:42:16,380
And so now they're in the syntax,

1350
01:42:16,380 --> 01:42:18,220
and I think it's growing really fast,

1351
01:42:18,220 --> 01:42:20,000
which is kind of exciting.

1352
01:42:20,000 --> 01:42:23,420
But yeah, like trying to like tooling for coverage.

1353
01:42:23,420 --> 01:42:27,380
I'll show you some like automatic type inference engines too,

1354
01:42:27,420 --> 01:42:30,220
to just like kind of do a lot of the trivial work at scale,

1355
01:42:30,220 --> 01:42:33,180
and that's available right now.

1356
01:42:33,180 --> 01:42:34,260
Yeah, some other stuff too.

1357
01:42:34,260 --> 01:42:36,160
Like we'll talk about like type checking modes,

1358
01:42:36,160 --> 01:42:38,580
and you know, if you want to like enforce

1359
01:42:38,580 --> 01:42:39,680
that all new code has types,

1360
01:42:39,680 --> 01:42:41,860
like what you can do that, things like that.

1361
01:42:41,860 --> 01:42:42,700
Yeah.

1362
01:42:42,700 --> 01:42:43,520
Yeah.

1363
01:42:43,520 --> 01:42:44,360
Yeah.

1364
01:42:44,360 --> 01:42:48,160
What do you mean?

1365
01:42:48,160 --> 01:42:49,740
Oh, like just having like a trick.

1366
01:42:49,740 --> 01:42:51,820
Oh yeah, no, it really makes a big difference.

1367
01:42:51,820 --> 01:42:52,660
Yeah.

1368
01:42:52,660 --> 01:42:53,780
Yeah, like even, I don't know,

1369
01:42:53,780 --> 01:42:55,500
if it's not even like an enforcement trick,

1370
01:42:55,500 --> 01:42:56,940
it's just like, hey, don't you want this?

1371
01:42:57,620 --> 01:42:58,460
Yeah, yeah, yeah, yeah.

1372
01:42:58,460 --> 01:43:00,580
Because like we've made like dashboards internally and stuff,

1373
01:43:00,580 --> 01:43:01,820
and I think that it's really helpful

1374
01:43:01,820 --> 01:43:04,220
if people would just like be able to know at a glance,

1375
01:43:04,220 --> 01:43:05,860
like what the state is.

1376
01:43:05,860 --> 01:43:07,500
That's pretty motivating.

1377
01:43:07,500 --> 01:43:08,820
Yeah, yeah, of course.

1378
01:43:08,820 --> 01:43:09,660
Hey, what's up?

1379
01:43:12,380 --> 01:43:13,220
Oh really?

1380
01:43:15,020 --> 01:43:20,020
Oh gosh, I always hate watching myself speak after the fact,

1381
01:43:20,020 --> 01:43:21,220
but I hope they're okay.

1382
01:43:22,380 --> 01:43:23,280
Oh, thanks.

1383
01:43:25,820 --> 01:43:26,780
Five years.

1384
01:43:27,620 --> 01:43:28,460
Yeah.

1385
01:43:28,460 --> 01:43:29,280
Yeah.

1386
01:43:29,280 --> 01:43:30,120
Yeah.

1387
01:43:33,980 --> 01:43:34,820
Oh cool.

1388
01:43:35,660 --> 01:43:36,500
Uh-huh.

1389
01:43:37,660 --> 01:43:39,660
Yeah, yeah, just like, like how.

1390
01:43:45,860 --> 01:43:49,500
Yeah, I think maybe a lot of it boils down

1391
01:43:49,500 --> 01:43:51,940
to like interview advice even.

1392
01:43:51,940 --> 01:43:54,620
I actually think a lot of tech companies,

1393
01:43:54,620 --> 01:43:59,620
I think Meta Included aren't super like strict about formal,

1394
01:43:59,620 --> 01:44:04,220
like oh, you have to have done like XYZ like previous things.

1395
01:44:08,620 --> 01:44:09,700
I think so, yeah.

1396
01:44:09,700 --> 01:44:11,100
So you'll do the interview process.

1397
01:44:11,100 --> 01:44:13,340
I mean, it really depends on like,

1398
01:44:13,340 --> 01:44:17,060
I guess like what level you're interviewing to join at,

1399
01:44:17,060 --> 01:44:20,340
because that, like I think they'll ask more like

1400
01:44:20,340 --> 01:44:22,980
system design questions or like previous experience

1401
01:44:22,980 --> 01:44:25,100
working at a software company questions

1402
01:44:25,100 --> 01:44:27,400
for like the non-entry level positions

1403
01:44:27,400 --> 01:44:28,380
in the interview process,

1404
01:44:28,380 --> 01:44:31,000
but I mean, I joined straight out of college,

1405
01:44:31,000 --> 01:44:32,600
and so I had no.

1406
01:44:34,780 --> 01:44:36,180
I didn't do an internship even.

1407
01:44:36,180 --> 01:44:37,660
Like I just interviewed,

1408
01:44:37,660 --> 01:44:39,860
so I had no like previous job experience,

1409
01:44:39,860 --> 01:44:41,860
so I interviewed for entry level position,

1410
01:44:41,860 --> 01:44:43,500
and they really just,

1411
01:44:43,500 --> 01:44:45,220
entry level position, yeah, yeah, yeah,

1412
01:44:45,220 --> 01:44:47,980
and they just, like they will just ask you

1413
01:44:47,980 --> 01:44:50,460
like coding questions so you can kind of just like demonstrate,

1414
01:44:50,460 --> 01:44:51,780
like they just want to see your thought process

1415
01:44:51,780 --> 01:44:53,380
like while you're coding and things like that,

1416
01:44:53,380 --> 01:44:55,820
and so I guess that's the only context I have.

1417
01:44:55,820 --> 01:44:58,220
I don't know if it's actually useful advice,

1418
01:44:58,220 --> 01:45:01,500
but yeah, oh, okay.

1419
01:45:02,940 --> 01:45:07,900
Yeah, so they also have a rotational engineering program

1420
01:45:07,900 --> 01:45:10,220
for people who are switching in from like,

1421
01:45:10,220 --> 01:45:11,660
you know, non-traditional background,

1422
01:45:11,660 --> 01:45:13,660
so maybe you should look at that program.

1423
01:45:15,340 --> 01:45:17,300
It's called the rotational,

1424
01:45:18,260 --> 01:45:20,340
okay, I don't have like off the top of my head,

1425
01:45:20,340 --> 01:45:22,540
I don't know, but I think if you Google like

1426
01:45:22,540 --> 01:45:25,740
Meta rotational engineer,

1427
01:45:25,740 --> 01:45:29,940
you can probably find something about it online,

1428
01:45:29,940 --> 01:45:34,100
and I also know that Meta has a booth at PyCon.

1429
01:45:34,100 --> 01:45:35,340
I think we sponsor PyCon,

1430
01:45:35,340 --> 01:45:37,540
and so in some of like the, you know,

1431
01:45:37,540 --> 01:45:38,380
when there are tables,

1432
01:45:38,380 --> 01:45:39,860
you should go ask someone there too

1433
01:45:39,860 --> 01:45:42,500
about like how to apply to the rotational program.

1434
01:45:42,500 --> 01:45:43,420
Yeah, that's right.

1435
01:45:44,420 --> 01:45:46,940
Yeah, so actually someone on our team

1436
01:45:46,940 --> 01:45:49,900
from a couple years ago joined the company through that

1437
01:45:49,900 --> 01:45:51,540
because she had like switched

1438
01:45:51,540 --> 01:45:52,660
from a different profession as well,

1439
01:45:52,660 --> 01:45:55,580
so that might actually be a good, yeah.

1440
01:45:57,980 --> 01:46:00,540
So Boot Camp is not a track,

1441
01:46:00,540 --> 01:46:02,260
it's every new hire goes through Boot Camp,

1442
01:46:02,260 --> 01:46:04,620
it's just like a way to introduce to a company.

1443
01:46:07,540 --> 01:46:09,580
No, it's not really like a,

1444
01:46:09,580 --> 01:46:11,460
it's not a test and it's not like,

1445
01:46:11,460 --> 01:46:12,700
it's not like a,

1446
01:46:12,700 --> 01:46:14,340
Boot Camp is maybe a harsh word for it,

1447
01:46:14,340 --> 01:46:15,180
it's really just like,

1448
01:46:15,180 --> 01:46:17,700
oh here's like, get to know like our internal tools,

1449
01:46:17,700 --> 01:46:18,780
you can pick a team,

1450
01:46:18,780 --> 01:46:19,900
like it's like that kind of stuff,

1451
01:46:19,900 --> 01:46:22,260
it's like onboarding, it's like basically onboarding.

1452
01:46:22,260 --> 01:46:24,220
So Boot Camp is not actually a Boot Camp,

1453
01:46:24,220 --> 01:46:27,460
it's like the, what we call the onboarding process.

1454
01:46:27,460 --> 01:46:28,420
So everyone does Boot Camp,

1455
01:46:28,420 --> 01:46:30,300
it doesn't matter like what job you have,

1456
01:46:30,300 --> 01:46:31,580
if you join the company, you do Boot Camp.

1457
01:46:31,580 --> 01:46:33,820
But this is actually a track of,

1458
01:46:33,820 --> 01:46:35,340
I think a hiring track where,

1459
01:46:36,500 --> 01:46:37,420
as far as I know,

1460
01:46:37,420 --> 01:46:39,940
and I'm probably not the person who knows the most about it,

1461
01:46:39,940 --> 01:46:42,060
you kind of sit with,

1462
01:46:42,060 --> 01:46:45,180
I think you may like work on an engineering team

1463
01:46:45,180 --> 01:46:46,580
and you get to try two,

1464
01:46:46,580 --> 01:46:48,580
I think like for six months at a time

1465
01:46:49,380 --> 01:46:50,540
before you commit to like a full,

1466
01:46:50,540 --> 01:46:52,540
joining like a team full time.

1467
01:46:52,540 --> 01:46:53,860
So that way you get like a little bit more

1468
01:46:53,860 --> 01:46:56,780
diversity of experience on like different teams.

1469
01:46:56,780 --> 01:46:59,300
And then, yeah, yeah, so you should,

1470
01:47:02,460 --> 01:47:03,740
oh cool, yeah.

1471
01:47:04,580 --> 01:47:06,020
You should definitely talk to,

1472
01:47:06,020 --> 01:47:08,020
so like I'm just telling you like what I remember,

1473
01:47:08,020 --> 01:47:10,580
so I don't, I might not,

1474
01:47:10,580 --> 01:47:11,400
I might not know everything,

1475
01:47:11,400 --> 01:47:13,460
but you should definitely find the Metabooth

1476
01:47:13,460 --> 01:47:14,540
and ask them about it there.

1477
01:47:14,540 --> 01:47:17,020
So, I think so, yeah.

1478
01:47:17,060 --> 01:47:17,900
I don't, I'm not,

1479
01:47:17,900 --> 01:47:19,140
I also don't know the schedule very well,

1480
01:47:19,140 --> 01:47:21,060
but like whenever the tables are,

1481
01:47:21,060 --> 01:47:23,900
like I know there are a lot of people tabling, yeah.

1482
01:47:23,900 --> 01:47:24,740
Yeah.

1483
01:47:26,500 --> 01:47:27,340
You can ask them about,

1484
01:47:27,340 --> 01:47:29,780
yeah, ask them about the rotational program.

1485
01:47:29,780 --> 01:47:31,020
At least if they don't know,

1486
01:47:31,020 --> 01:47:33,780
they'll probably get you to another person.

1487
01:47:33,780 --> 01:47:35,340
So I'm just passing down the chain,

1488
01:47:35,340 --> 01:47:37,060
but like, yeah, at least,

1489
01:47:37,060 --> 01:47:38,660
and the website should probably say something too,

1490
01:47:38,660 --> 01:47:40,780
I think, but yeah, yeah.

1491
01:47:47,700 --> 01:47:49,860
Ooh, I don't know.

1492
01:48:02,700 --> 01:48:05,100
Oh yeah, so security and programming languages,

1493
01:48:05,100 --> 01:48:07,100
so no, I don't know about that.

1494
01:48:07,100 --> 01:48:07,940
Yeah, I have no idea.

1495
01:48:07,940 --> 01:48:09,940
I don't wanna say that one thing, so.

1496
01:48:09,940 --> 01:48:11,260
Yeah, yeah.

1497
01:48:13,340 --> 01:48:14,340
Yeah, yeah, yeah, okay.

1498
01:48:14,340 --> 01:48:16,700
I hope that, yeah, I hope that's helpful, but.

1499
01:48:17,140 --> 01:48:17,980
Yeah.

1500
01:48:22,860 --> 01:48:26,220
No, degrees are not necessary.

1501
01:48:26,220 --> 01:48:27,860
I don't think, yeah.

1502
01:48:27,860 --> 01:48:29,500
No, I don't think they even ask,

1503
01:48:29,500 --> 01:48:32,940
like I remember when we were applying out of college,

1504
01:48:32,940 --> 01:48:34,220
like they don't even ask for your transcript.

1505
01:48:34,220 --> 01:48:35,260
Like I think it's really,

1506
01:48:35,260 --> 01:48:36,980
a lot of it's based on the interview.

1507
01:48:47,020 --> 01:48:50,940
I would really recommend preparing.

1508
01:48:50,940 --> 01:48:53,420
I think it's like, it's not something you wanna go in blind

1509
01:48:53,420 --> 01:48:56,260
because I think you can get a lot out of like,

1510
01:48:56,260 --> 01:48:58,060
just being familiar with the types of questions,

1511
01:48:58,060 --> 01:49:00,700
like reasoning about like data structures,

1512
01:49:00,700 --> 01:49:01,660
because they're all.

1513
01:49:04,420 --> 01:49:05,260
Yeah, we're good.

1514
01:49:05,260 --> 01:49:06,980
It starts again at 2.30.

1515
01:49:06,980 --> 01:49:07,820
Yeah, yeah.

1516
01:49:11,100 --> 01:49:13,700
I will have to speed a little bit of my second section.

1517
01:49:13,700 --> 01:49:16,780
I'll make sure to leave you 65 minutes, but yeah.

1518
01:49:17,300 --> 01:49:18,140
What?

1519
01:49:19,020 --> 01:49:21,060
Yeah, yeah, actually you might wanna even set up another one,

1520
01:49:21,060 --> 01:49:23,220
but yeah, you can, or we can just transfer actually.

1521
01:49:23,220 --> 01:49:24,060
It's fine.

1522
01:49:24,060 --> 01:49:24,980
No, it's okay, it's okay.

1523
01:49:24,980 --> 01:49:26,420
Well, I'll just give it to you.

1524
01:49:27,660 --> 01:49:29,340
Sorry, interviews.

1525
01:49:29,340 --> 01:49:31,820
Cracking the Coding Interview is a really great book.

1526
01:49:31,820 --> 01:49:33,700
Cracking the Coding Interview.

1527
01:49:33,700 --> 01:49:37,140
Yeah, I remember when I was studying for it.

1528
01:49:37,140 --> 01:49:40,860
I just, I was, I found it really helpful to like,

1529
01:49:40,860 --> 01:49:42,180
do a lot of the, like read through it,

1530
01:49:42,180 --> 01:49:43,300
do a lot of the exercises,

1531
01:49:43,300 --> 01:49:45,380
but then save a lot of them to just simulate,

1532
01:49:46,060 --> 01:49:49,580
just simulate interviews where like, you're asked a question,

1533
01:49:49,580 --> 01:49:52,860
and then at the time we were doing in-person interviews

1534
01:49:52,860 --> 01:49:55,060
where you would whiteboard the solution.

1535
01:49:55,060 --> 01:49:56,740
So yeah, yeah.

1536
01:49:59,100 --> 01:50:00,820
Yeah, yeah, yeah, so I really,

1537
01:50:00,820 --> 01:50:04,860
I remember I would book a room with a big whiteboard,

1538
01:50:04,860 --> 01:50:07,860
and I would just do the problems on the whiteboard

1539
01:50:07,860 --> 01:50:08,820
to practice.

1540
01:50:08,820 --> 01:50:09,820
So that helped me a lot.

1541
01:50:09,820 --> 01:50:11,700
I think actually after you do a lot of them,

1542
01:50:11,700 --> 01:50:15,260
you start to like, get a feel for like,

1543
01:50:16,820 --> 01:50:18,060
oh, like what kind of problem is this?

1544
01:50:18,060 --> 01:50:20,820
Kind of like on site, you can kind of like bucket like,

1545
01:50:20,820 --> 01:50:22,780
oh, this is like a, this kind of a question.

1546
01:50:22,780 --> 01:50:24,260
It typically uses like mappings,

1547
01:50:24,260 --> 01:50:26,620
or like it typically uses like a tree search,

1548
01:50:26,620 --> 01:50:29,540
or typically, so I found that super helpful

1549
01:50:29,540 --> 01:50:31,420
for preparing for interviews,

1550
01:50:31,420 --> 01:50:33,220
just like doing a lot of those questions.

1551
01:50:33,220 --> 01:50:34,540
And you can find some online too,

1552
01:50:34,540 --> 01:50:36,540
like just typical coding interview questions,

1553
01:50:36,540 --> 01:50:37,660
like Googling for them.

1554
01:50:37,660 --> 01:50:39,180
A lot of those are, yeah.

1555
01:50:42,060 --> 01:50:45,180
Yeah, well, I did some on the computer.

1556
01:50:45,180 --> 01:50:46,980
So usually the interview process is like,

1557
01:50:46,980 --> 01:50:48,100
the first round is online,

1558
01:50:48,100 --> 01:50:50,020
so it's on an editor, shared editor,

1559
01:50:50,020 --> 01:50:51,820
and then like final rounds, they used to do,

1560
01:50:51,820 --> 01:50:52,660
at least when I interviewed,

1561
01:50:52,660 --> 01:50:54,020
they did in person on a whiteboard.

1562
01:50:54,020 --> 01:50:57,020
These days, I think they're all online still

1563
01:50:57,020 --> 01:50:58,460
because of the pandemic,

1564
01:50:58,460 --> 01:51:01,100
but I might transfer back, I don't know.

1565
01:51:01,100 --> 01:51:03,260
Yeah, so I practiced some on the editor,

1566
01:51:03,260 --> 01:51:04,900
and some on a whiteboard,

1567
01:51:04,900 --> 01:51:07,300
and I thought it was, I thought that was helpful.

1568
01:51:07,300 --> 01:51:08,140
Yeah.

1569
01:51:11,740 --> 01:51:13,180
Yeah, it's, I don't know,

1570
01:51:13,180 --> 01:51:14,780
interviewing is like a whole,

1571
01:51:15,900 --> 01:51:17,860
like a whole thing to worry about.

1572
01:51:17,860 --> 01:51:22,020
I feel like sometimes it's not exactly what it's like,

1573
01:51:22,020 --> 01:51:23,860
it's not exactly the same skill set, I think,

1574
01:51:23,860 --> 01:51:27,140
as like developing a project in a large code base,

1575
01:51:27,140 --> 01:51:28,620
but you know, it's just something

1576
01:51:28,620 --> 01:51:30,220
you kind of have to hammer at.

1577
01:51:30,220 --> 01:51:31,060
Yeah.

1578
01:51:37,860 --> 01:51:38,700
Oh.

1579
01:51:39,420 --> 01:51:42,500
I don't, I think it probably really depends

1580
01:51:42,500 --> 01:51:43,820
on like where you're starting from,

1581
01:51:43,820 --> 01:51:46,100
because I'd done a lot of prep before

1582
01:51:46,100 --> 01:51:48,660
for like internships and stuff, like at other companies,

1583
01:51:48,660 --> 01:51:49,500
so I don't know,

1584
01:51:49,500 --> 01:51:51,420
I don't think an estimate would be very helpful,

1585
01:51:51,420 --> 01:51:53,260
but there are hundreds of problems in that book,

1586
01:51:53,260 --> 01:51:55,660
and I spent like a good couple weeks,

1587
01:51:55,660 --> 01:51:58,700
like just a couple weeks just doing problems,

1588
01:51:58,700 --> 01:51:59,980
but that was kind of from the point

1589
01:51:59,980 --> 01:52:01,100
of having already read the book,

1590
01:52:01,100 --> 01:52:04,780
and like kind of familiar, so yeah, I don't know.

1591
01:52:05,180 --> 01:52:08,780
Yeah, yeah, I mean that's just, again,

1592
01:52:08,780 --> 01:52:11,380
it's just my own perspective, so I don't know, yeah.

1593
01:52:14,540 --> 01:52:17,380
Yeah, yeah, no, I think that book really helped,

1594
01:52:17,380 --> 01:52:19,020
and just like hammering out a lot of the questions

1595
01:52:19,020 --> 01:52:20,620
really helped me prepare for that.

1596
01:52:24,980 --> 01:52:28,220
I'm mostly, I think I did most of the book.

1597
01:52:28,220 --> 01:52:31,220
It's a lot, it's a lot, but I think it's really helpful,

1598
01:52:31,220 --> 01:52:34,020
like once you start feeling like, oh, I see a question,

1599
01:52:34,100 --> 01:52:35,860
and like already know where to start,

1600
01:52:35,860 --> 01:52:36,820
I think that's really helpful,

1601
01:52:36,820 --> 01:52:38,220
because sometimes what hits you is like,

1602
01:52:38,220 --> 01:52:40,140
someone asks you a question in the interview,

1603
01:52:40,140 --> 01:52:42,700
and you just like don't have a starting point,

1604
01:52:42,700 --> 01:52:43,900
and that can be really stressful,

1605
01:52:43,900 --> 01:52:44,740
and like kind of throw you off,

1606
01:52:44,740 --> 01:52:47,260
but at least if you know like, oh, like this is,

1607
01:52:47,260 --> 01:52:48,580
this is what I can start talking about,

1608
01:52:48,580 --> 01:52:50,180
or start thinking about, it's like a lot easier

1609
01:52:50,180 --> 01:52:54,860
to just like, I don't know, like not get surprised.

1610
01:52:54,860 --> 01:52:55,700
What?

1611
01:52:57,580 --> 01:52:59,660
A little bit, yeah, at least to like, you know,

1612
01:52:59,660 --> 01:53:01,020
what framework should I use

1613
01:53:01,020 --> 01:53:02,340
to start thinking about this problem?

1614
01:53:02,380 --> 01:53:03,740
I think that kind of helps.

1615
01:53:04,980 --> 01:53:08,620
Yeah, but again, that's just how I happen to study for it.

1616
01:53:08,620 --> 01:53:11,420
But yeah, and if you have questions too,

1617
01:53:11,420 --> 01:53:15,300
like Alex and Simran are both Facebook engineers,

1618
01:53:15,300 --> 01:53:16,980
and they've both done, or at least,

1619
01:53:16,980 --> 01:53:19,300
I think, you guys both interned, right?

1620
01:53:19,300 --> 01:53:20,580
Yeah, I know.

1621
01:53:20,580 --> 01:53:21,420
Did you?

1622
01:53:21,420 --> 01:53:22,940
Oh, okay, she went through the interview process

1623
01:53:22,940 --> 01:53:25,100
more recently, if you have questions.

1624
01:53:25,100 --> 01:53:27,540
But yeah, I don't know if my knowledge is outdated.

1625
01:53:27,540 --> 01:53:28,380
Yeah.

1626
01:53:29,340 --> 01:53:30,460
That is definitely okay.

1627
01:53:30,460 --> 01:53:31,300
Yeah.

1628
01:53:58,380 --> 01:53:59,220
Yeah.

1629
01:54:02,540 --> 01:54:04,100
Is there water outside?

1630
01:54:04,100 --> 01:54:07,100
Yeah, just go out and take a right, and then another right.

1631
01:54:28,380 --> 01:54:29,220
Okay.

1632
01:54:58,380 --> 01:54:59,220
Yeah.

1633
01:55:12,020 --> 01:55:14,460
Do you mind if I leave this in the corner?

1634
01:55:14,460 --> 01:55:15,300
Okay, thank you.

1635
01:55:15,300 --> 01:55:17,180
Yeah, I did some major kind of,

1636
01:55:17,180 --> 01:55:18,340
whole full screen thing, I mean,

1637
01:55:18,340 --> 01:55:19,780
I don't know what it's about.

1638
01:55:19,780 --> 01:55:22,580
Really, okay, people struggle with it?

1639
01:55:22,580 --> 01:55:24,420
I'm so surprised that they don't do this.

1640
01:55:24,420 --> 01:55:26,980
I'm curious, like what the best solution is.

1641
01:55:26,980 --> 01:55:28,100
Oh, okay.

1642
01:55:44,580 --> 01:55:46,060
Yeah, yeah.

1643
01:55:48,900 --> 01:55:52,900
We, yeah, we honestly were gonna do that.

1644
01:55:52,900 --> 01:55:54,060
Oh my gosh.

1645
01:55:57,020 --> 01:55:59,540
Press the S button, oh.

1646
01:55:59,540 --> 01:56:03,180
So like go full screen, then pop up the presenter notes,

1647
01:56:03,180 --> 01:56:05,820
then drag it over, then make it full screen again.

1648
01:56:06,900 --> 01:56:08,700
Okay, I'm not gonna try this right now,

1649
01:56:08,700 --> 01:56:10,420
but thank you for doing the research.

1650
01:56:10,420 --> 01:56:11,420
That's good to know.

1651
01:56:12,700 --> 01:56:14,300
Yikes.

1652
01:56:14,300 --> 01:56:17,300
I'm shocked that people hasn't figured this out.

1653
01:56:19,420 --> 01:56:20,660
Okay, okay, okay.

1654
01:56:27,820 --> 01:56:30,300
Yeah, yeah, that's true.

1655
01:56:33,900 --> 01:56:35,340
That you can install, yeah.

1656
01:56:37,020 --> 01:56:37,860
That makes sense.

1657
01:56:43,300 --> 01:56:45,020
That just runs what?

1658
01:56:45,020 --> 01:56:45,860
Oh really?

1659
01:56:45,860 --> 01:56:48,860
I just need enough information so I can.

1660
01:56:48,860 --> 01:56:49,700
Oh.

1661
01:56:53,980 --> 01:56:58,140
All right, I mean, your screen looks like

1662
01:56:58,140 --> 01:57:01,700
it's got kind of crazy stuff going on on it too.

1663
01:57:01,700 --> 01:57:02,540
Seems like.

1664
01:57:07,980 --> 01:57:10,100
Oh yeah, I mean, it sounds like that's a good reason

1665
01:57:10,100 --> 01:57:13,140
to get a laptop as well, but it's, yeah.

1666
01:57:16,540 --> 01:57:17,380
Yeah.

1667
01:57:19,380 --> 01:57:22,380
And that's what it is, it's a really cool thing.

1668
01:57:22,380 --> 01:57:23,220
Oh, wow.

1669
01:57:25,220 --> 01:57:28,220
Yeah, it looks like that's all.

1670
01:57:28,220 --> 01:57:31,220
I'm gonna see if there's actually beyond the water.

1671
01:57:31,220 --> 01:57:34,220
I don't know if there's water in there.

1672
01:57:34,220 --> 01:57:37,220
I don't know if there's water in there.

1673
01:57:37,220 --> 01:57:40,220
I don't know if there's water in there.

1674
01:57:40,220 --> 01:57:43,220
I don't know if there's water in there.

1675
01:57:43,220 --> 01:57:46,220
I don't know if there's water in there.

1676
01:57:46,220 --> 01:57:49,220
I don't know if there's water in there.

1677
01:57:49,220 --> 01:57:51,900
I'm gonna see if I can do it.

1678
01:57:51,900 --> 01:57:54,220
Good, he actually did a bunch of research

1679
01:57:54,220 --> 01:57:56,220
into the full screen thing.

1680
01:57:56,220 --> 01:57:58,220
The forums are all full of angry people.

1681
01:57:58,220 --> 01:57:59,580
I can't get it to work.

1682
01:58:01,020 --> 01:58:04,660
Yeah, so he was just like the top voted comment

1683
01:58:04,660 --> 01:58:07,020
in everything is converted to a PowerPoint.

1684
01:58:07,020 --> 01:58:09,020
So I guess next time, next time we know.

1685
01:58:09,940 --> 01:58:10,780
Yeah, that's a.

1686
01:58:13,420 --> 01:58:15,420
I know you have it working nicely.

1687
01:58:21,700 --> 01:58:22,940
Apparently it's horrible.

1688
01:58:34,780 --> 01:58:35,620
A forward looking.

1689
01:58:37,620 --> 01:58:40,220
Hopefully I can answer them.

1690
01:58:40,220 --> 01:58:41,060
It's kind of nice.

1691
01:58:43,220 --> 01:58:44,060
Yeah.

1692
01:58:46,060 --> 01:58:46,900
Yeah.

1693
01:58:48,140 --> 01:58:51,340
Yeah, and so actually, okay, well,

1694
01:58:51,340 --> 01:58:52,180
I'm a senior developer.

1695
01:58:52,180 --> 01:58:54,740
My company finds it hard to convince junior developers

1696
01:58:54,740 --> 01:58:55,580
to do this.

1697
01:58:55,580 --> 01:58:56,580
I could beat them with a stick about it,

1698
01:58:56,580 --> 01:58:59,260
but what approach have you taken

1699
01:58:59,260 --> 01:59:01,220
to get a code base realistically converted?

1700
01:59:01,220 --> 01:59:03,220
And I was like, wow, I'm glad you asked.

1701
01:59:03,220 --> 01:59:04,060
That's great.

1702
01:59:04,060 --> 01:59:04,900
Yeah.

1703
01:59:04,900 --> 01:59:06,940
There's a basic car company,

1704
01:59:06,940 --> 01:59:09,540
and they work there and they try to add items.

1705
01:59:09,540 --> 01:59:11,940
And people there are also today trying to convince

1706
01:59:12,060 --> 01:59:14,140
the one we brought to make it different

1707
01:59:14,140 --> 01:59:16,340
from the data pipelines.

1708
01:59:16,340 --> 01:59:17,180
Oh, that's cool.

1709
01:59:19,380 --> 01:59:20,500
All right.

1710
01:59:20,500 --> 01:59:21,820
Can I get the mics?

1711
01:59:21,820 --> 01:59:22,660
Thank you.

1712
01:59:29,100 --> 01:59:29,940
Oh, sorry what?

1713
01:59:34,940 --> 01:59:36,140
Oh yeah, like whether.

1714
01:59:36,980 --> 01:59:37,820
Sorry, pretty big.

1715
01:59:38,860 --> 01:59:40,020
Okay.

1716
01:59:40,020 --> 01:59:41,060
Oh yeah, okay.

1717
01:59:41,060 --> 01:59:42,820
Hi everyone.

1718
01:59:42,820 --> 01:59:44,460
All right, we're gonna get started again.

1719
01:59:44,460 --> 01:59:48,620
It is 2.30 and we got more stuff to cover,

1720
01:59:48,620 --> 01:59:50,380
so I wanna make sure we get to it.

1721
01:59:52,180 --> 01:59:54,380
What's on the screen right now, if anyone was out,

1722
01:59:54,380 --> 01:59:56,780
is just like what the GitHub CI looks like

1723
01:59:56,780 --> 02:00:00,140
when you submit a PR with breaking changes.

1724
02:00:00,140 --> 02:00:02,100
So that's just for context,

1725
02:00:02,100 --> 02:00:03,940
but I will move it off the screen now.

1726
02:00:04,220 --> 02:00:06,900
Oh gosh, where'd it go?

1727
02:00:06,900 --> 02:00:07,740
Okay.

1728
02:00:09,380 --> 02:00:10,220
Okay, great.

1729
02:00:11,420 --> 02:00:12,900
Okay, so where were we?

1730
02:00:14,180 --> 02:00:15,780
All right, so just as a reminder,

1731
02:00:15,780 --> 02:00:18,340
things that we already went over in the first half

1732
02:00:18,340 --> 02:00:23,100
included what are types, why we might bother using them,

1733
02:00:23,100 --> 02:00:25,940
and then how to type the basic Python data structures,

1734
02:00:25,940 --> 02:00:28,780
and also how to run a type checker on your local project.

1735
02:00:30,580 --> 02:00:33,100
And so in the second half, things like,

1736
02:00:33,140 --> 02:00:34,220
the first one are

1737
02:00:37,220 --> 02:00:38,460
that you might take when you're

1738
02:00:38,460 --> 02:00:42,620
actually looking at preexisting projects that are huge,

1739
02:00:42,620 --> 02:00:46,100
not just like toy examples that we've been looking at already.

1740
02:00:46,100 --> 02:00:48,100
And then in the second part,

1741
02:00:48,100 --> 02:00:51,420
we will be talking about interesting features

1742
02:00:51,420 --> 02:00:53,700
in the type system and how you can express

1743
02:00:53,700 --> 02:00:58,660
more dynamic patterns in the type system.

1744
02:00:58,660 --> 02:01:00,740
So that's what's on the agenda.

1745
02:01:03,660 --> 02:01:05,940
Okay, so as you might guess,

1746
02:01:05,940 --> 02:01:08,020
and I think some of you have mentioned this already,

1747
02:01:08,020 --> 02:01:10,620
adding types to a real existing project

1748
02:01:10,620 --> 02:01:13,500
poses some challenges that you won't run into

1749
02:01:13,500 --> 02:01:15,180
or we haven't run into already.

1750
02:01:15,180 --> 02:01:16,860
So let's kind of identify them

1751
02:01:16,860 --> 02:01:19,100
and talk about how we might approach them.

1752
02:01:19,100 --> 02:01:22,340
And a lot of this is based on our experience

1753
02:01:22,340 --> 02:01:25,340
annotating the entirety of Instagram's

1754
02:01:25,340 --> 02:01:29,100
Python server code base, which is definitely a real project,

1755
02:01:29,100 --> 02:01:32,180
millions of lines of constantly changing production code.

1756
02:01:32,180 --> 02:01:35,540
So that's kind of the experience that we're speaking from.

1757
02:01:36,660 --> 02:01:39,700
So first thing that you might run into

1758
02:01:39,700 --> 02:01:42,340
is that you may find yourself adding type annotations

1759
02:01:42,340 --> 02:01:44,420
to a huge existing code base.

1760
02:01:44,420 --> 02:01:47,500
And thousands or millions of lines of untyped code

1761
02:01:47,500 --> 02:01:49,220
mean that when you run type checking over

1762
02:01:49,220 --> 02:01:51,140
for the first time, you're just hit with a wall

1763
02:01:51,140 --> 02:01:52,180
of type errors.

1764
02:01:52,180 --> 02:01:54,060
And you might not have a week or two weeks

1765
02:01:54,060 --> 02:01:57,580
to put aside to just dedicate to fixing those errors.

1766
02:01:57,580 --> 02:01:58,740
Like you have other things going on,

1767
02:01:58,740 --> 02:02:00,740
you can't just halt all other work.

1768
02:02:00,740 --> 02:02:04,180
And on top of that, you might feel like adding annotations

1769
02:02:04,180 --> 02:02:06,580
one at a time, it's really just a drop in the bucket

1770
02:02:06,580 --> 02:02:08,180
and you're never going to get anywhere

1771
02:02:08,180 --> 02:02:11,300
with real runtime guarantees,

1772
02:02:11,300 --> 02:02:14,660
just going one manual annotation at a time.

1773
02:02:14,660 --> 02:02:15,940
So that's one issue.

1774
02:02:17,380 --> 02:02:20,020
Secondly, many projects have multiple developers

1775
02:02:20,020 --> 02:02:23,500
and they have code bases are constantly changing,

1776
02:02:23,500 --> 02:02:25,380
code is being added, et cetera.

1777
02:02:25,380 --> 02:02:29,220
And so we care about maintaining a consistent developer experience

1778
02:02:29,220 --> 02:02:31,300
for everyone touching this code base.

1779
02:02:31,300 --> 02:02:33,980
And we also want to make sure that any hard earned coverage

1780
02:02:33,980 --> 02:02:36,940
that we do add doesn't just slowly erode over time

1781
02:02:36,940 --> 02:02:39,460
as that file gets changed and updated.

1782
02:02:39,460 --> 02:02:44,380
So finally, realistically, most projects have some legacy code

1783
02:02:44,380 --> 02:02:48,300
that might contain really highly dynamic patterns.

1784
02:02:48,300 --> 02:02:52,660
And you may not have time or the desire to refactor it upfront,

1785
02:02:52,660 --> 02:02:54,980
but you might still want non-noisy type checking

1786
02:02:54,980 --> 02:02:57,060
on the rest of your project where it can provide value.

1787
02:02:57,060 --> 02:03:00,140
So we'll talk about how we can get around this.

1788
02:03:00,140 --> 02:03:03,900
So given all of these things, you might be feeling like

1789
02:03:03,900 --> 02:03:07,580
it's really daunting to be adding types to a pre-existing code base

1790
02:03:07,580 --> 02:03:10,340
and it's not like we all aren't busy enough already.

1791
02:03:10,340 --> 02:03:12,540
So what can we do about this?

1792
02:03:13,820 --> 02:03:16,500
Thankfully, there are some tools that make this task

1793
02:03:16,500 --> 02:03:19,620
more incrementally approachable and doable and practical

1794
02:03:19,620 --> 02:03:22,180
even in a massive code base like Instagram's

1795
02:03:22,180 --> 02:03:24,180
with constantly changing production code.

1796
02:03:24,980 --> 02:03:29,860
So we'll talk about approaches that let us gradually but efficiently

1797
02:03:29,860 --> 02:03:33,380
convert a large untyped code base into a typed one.

1798
02:03:33,380 --> 02:03:37,300
You know, how to circumvent some of the extra tricky bits of the code base

1799
02:03:37,300 --> 02:03:40,220
while still providing some useful stand-in types

1800
02:03:40,220 --> 02:03:44,260
or escape hatches to just shut up the type checker when we need to.

1801
02:03:44,260 --> 02:03:47,940
And then we'll also talk about how we expose consistent expectations

1802
02:03:47,940 --> 02:03:50,700
for type checking and defend your progress.

1803
02:03:50,740 --> 02:03:54,660
So starting with the first thing on the list, which is gradual typing,

1804
02:03:54,660 --> 02:03:56,900
we're pretty lucky that the Python type system

1805
02:03:56,900 --> 02:03:58,900
was defined with a built-in solution

1806
02:03:58,900 --> 02:04:02,140
for onboarding large poorly typed code bases.

1807
02:04:02,140 --> 02:04:04,860
Namely, as we've run into a little bit already,

1808
02:04:04,860 --> 02:04:08,100
type annotations in Python are always optional

1809
02:04:08,100 --> 02:04:10,700
and there are a few ways in which this is true.

1810
02:04:10,700 --> 02:04:15,100
So first of all, type checkers will not analyze the body of any function

1811
02:04:15,100 --> 02:04:18,140
whose signature doesn't contain at least one type.

1812
02:04:18,180 --> 02:04:20,940
And this way you can add annotations at your own pace

1813
02:04:20,940 --> 02:04:24,060
and resolve errors that are kind of local to the context that you have

1814
02:04:24,060 --> 02:04:26,740
and whatever you just added annotations to.

1815
02:04:26,740 --> 02:04:30,780
And under the hood, the type system comes with an any type

1816
02:04:30,780 --> 02:04:36,460
and all omitted type annotations are implicitly treated as having the any type.

1817
02:04:36,460 --> 02:04:40,100
So this type is compatible with every other type in your type system

1818
02:04:40,100 --> 02:04:42,740
so you can always take any, you can always pass any,

1819
02:04:42,740 --> 02:04:45,780
and there will never be a type error that involves any.

1820
02:04:45,820 --> 02:04:48,300
And if types are omitted, the type checker assumes

1821
02:04:48,300 --> 02:04:50,380
that the omitted type is an any

1822
02:04:50,380 --> 02:04:52,460
and this effectively stops any type errors

1823
02:04:52,460 --> 02:04:56,140
from propagating further against that value.

1824
02:04:56,140 --> 02:04:59,060
So a function that has no types is assumed to take any,

1825
02:04:59,060 --> 02:05:00,820
is assumed to return any,

1826
02:05:00,820 --> 02:05:03,780
and the body of that function is omitted from type checking.

1827
02:05:03,780 --> 02:05:05,020
And this is true of all type checkers,

1828
02:05:05,020 --> 02:05:08,940
this is kind of defined in the Python type system.

1829
02:05:08,940 --> 02:05:12,300
And this behavior sort of creates a waterfall effect

1830
02:05:12,300 --> 02:05:15,660
where you'll very likely see few errors, if any,

1831
02:05:15,660 --> 02:05:18,700
when you just start adding types to your first module.

1832
02:05:18,700 --> 02:05:21,980
Any errors you see will probably be against the standard library

1833
02:05:21,980 --> 02:05:24,020
or against literals in your code,

1834
02:05:24,020 --> 02:05:26,700
but gradually every annotation that you add to your project

1835
02:05:26,700 --> 02:05:28,740
will have more to check against.

1836
02:05:28,740 --> 02:05:32,100
And so as any's are replaced with meaningful types,

1837
02:05:32,100 --> 02:05:35,380
type information can start flowing through your code base.

1838
02:05:35,380 --> 02:05:38,060
And we usually recommend therefore starting

1839
02:05:38,060 --> 02:05:40,220
with a very centrally connected dependency

1840
02:05:40,220 --> 02:05:44,540
or like a commonly used module when you start adding types

1841
02:05:44,540 --> 02:05:49,540
to just see the most benefits early on in the process

1842
02:05:49,620 --> 02:05:51,700
of onboarding a large untyped code base.

1843
02:05:52,580 --> 02:05:54,940
So all of these features together

1844
02:05:54,940 --> 02:05:57,980
describe what we call a gradual type system.

1845
02:05:57,980 --> 02:06:00,140
This means you can type check your project

1846
02:06:00,140 --> 02:06:01,980
even if not everything has types,

1847
02:06:01,980 --> 02:06:03,980
and the type system supports features

1848
02:06:03,980 --> 02:06:06,460
that let you add annotations incrementally

1849
02:06:06,460 --> 02:06:09,260
and deal with the fallout of those type annotations

1850
02:06:09,260 --> 02:06:10,100
incrementally.

1851
02:06:11,140 --> 02:06:13,740
And here we see a fun zoomed out picture,

1852
02:06:13,740 --> 02:06:16,780
it's a dependency graph of Instagram's server code base

1853
02:06:16,780 --> 02:06:19,620
from many years ago, and it's only grown a lot since then.

1854
02:06:19,620 --> 02:06:21,540
And so you can kind of see like,

1855
02:06:22,460 --> 02:06:24,580
you can start with some interconnected modules,

1856
02:06:24,580 --> 02:06:25,660
there are many to pick from,

1857
02:06:25,660 --> 02:06:28,100
and sort of go outwards at your own pace.

1858
02:06:28,100 --> 02:06:30,180
And hopefully this just helps visualize

1859
02:06:30,180 --> 02:06:34,500
just how unrealistic it might be to try to add annotations

1860
02:06:34,500 --> 02:06:37,500
and deal with all of the downstream fallout in one go,

1861
02:06:38,460 --> 02:06:40,740
and without sort of the hard stops

1862
02:06:40,740 --> 02:06:43,700
that gradual typing introduces.

1863
02:06:44,540 --> 02:06:48,180
And in case you want more detail for yourself to read after,

1864
02:06:48,180 --> 02:06:51,380
PEP 484, PEP is short for Python Enhancement Protocol,

1865
02:06:51,380 --> 02:06:54,460
but PEP 484 is the PEP that introduced the type system

1866
02:06:54,460 --> 02:06:56,520
and sort of defined the gradual type system,

1867
02:06:56,520 --> 02:06:58,340
so you can explore that on your own

1868
02:06:58,340 --> 02:07:01,420
if you're curious about some of the more of the details.

1869
02:07:03,500 --> 02:07:06,960
Okay, so now let's kind of poke at some of these

1870
02:07:06,960 --> 02:07:09,420
gradual typing features in our demo project

1871
02:07:09,420 --> 02:07:11,940
that we cloned before the break.

1872
02:07:11,940 --> 02:07:13,500
I don't recommend using the sandbox,

1873
02:07:14,500 --> 02:07:16,620
but if something happened with installation,

1874
02:07:16,620 --> 02:07:19,720
that's still an option, so you can use that short URL.

1875
02:07:20,720 --> 02:07:22,940
All right, let me pull up my,

1876
02:07:24,860 --> 02:07:27,700
all right, okay, so let's quit out

1877
02:07:27,700 --> 02:07:29,780
of whatever we had open before.

1878
02:07:29,780 --> 02:07:32,460
You can CD back up into your parent directory

1879
02:07:32,460 --> 02:07:34,580
and follow along locally,

1880
02:07:34,580 --> 02:07:38,960
and then let's now enter into another directory,

1881
02:07:38,960 --> 02:07:41,920
which is called gradual typing project.

1882
02:07:41,920 --> 02:07:44,360
Okay, so I'll CD into that.

1883
02:07:45,600 --> 02:07:49,880
Cool, okay, so there's a lot here,

1884
02:07:49,880 --> 02:07:53,720
but at a glance we see like, okay, there's a pet.py,

1885
02:07:53,720 --> 02:07:55,520
like maybe we have some pets,

1886
02:07:55,520 --> 02:07:56,960
maybe they interact with each other.

1887
02:07:56,960 --> 02:07:58,160
We don't have to worry about that for now.

1888
02:07:58,160 --> 02:08:00,620
Let's all just first open up main.py.

1889
02:08:03,240 --> 02:08:06,160
Okay, so here we see two functions.

1890
02:08:07,040 --> 02:08:10,200
Basically, if we focus on run,

1891
02:08:10,200 --> 02:08:12,360
I am also behind here.

1892
02:08:13,280 --> 02:08:14,760
Okay, so we see two functions.

1893
02:08:14,760 --> 02:08:19,760
There is run.py, this calls the other function in a loop.

1894
02:08:20,520 --> 02:08:21,980
You know, more or less it does some printing,

1895
02:08:21,980 --> 02:08:23,940
it does some math, that's about it.

1896
02:08:23,940 --> 02:08:28,760
So let's run pyre in it again to create our configuration,

1897
02:08:28,760 --> 02:08:30,400
and you can take all the defaults,

1898
02:08:31,400 --> 02:08:32,720
and then just run pyre.

1899
02:08:32,720 --> 02:08:35,920
So before we run pyre, what output are we expecting

1900
02:08:37,120 --> 02:08:38,680
from pyre?

1901
02:08:38,680 --> 02:08:39,540
Any guesses?

1902
02:08:40,600 --> 02:08:42,320
Yeah, yeah, no errors.

1903
02:08:42,320 --> 02:08:44,800
Okay, we run it, no type errors found.

1904
02:08:44,800 --> 02:08:47,200
Okay, you know, and this makes sense

1905
02:08:47,200 --> 02:08:49,440
because even if there are type errors

1906
02:08:49,440 --> 02:08:51,280
within the bodies of these functions,

1907
02:08:51,280 --> 02:08:53,840
there are no annotations anywhere in this file.

1908
02:08:53,840 --> 02:08:57,800
And so the type checking is aware that these functions exist,

1909
02:08:57,800 --> 02:08:59,820
you know, in case they're imported somewhere else,

1910
02:08:59,820 --> 02:09:01,820
but it's not type checking the body

1911
02:09:01,820 --> 02:09:03,120
of either of these functions.

1912
02:09:03,120 --> 02:09:04,780
So let's change that.

1913
02:09:04,780 --> 02:09:05,920
Maybe starting with run,

1914
02:09:05,920 --> 02:09:08,260
let's just add a slap on a really simple one.

1915
02:09:08,260 --> 02:09:09,440
So this doesn't return anything,

1916
02:09:09,440 --> 02:09:11,280
so let's just say it returns none.

1917
02:09:12,400 --> 02:09:14,800
Really the difference here is now there's a type annotation,

1918
02:09:14,800 --> 02:09:18,000
so we've opted this function in to type checking.

1919
02:09:18,000 --> 02:09:19,780
So let's run pyre again.

1920
02:09:24,280 --> 02:09:26,760
Interesting, okay, so it's now complaining

1921
02:09:26,760 --> 02:09:31,320
that on line 19, I'm not allowed to be adding a string

1922
02:09:31,320 --> 02:09:33,160
to a float, okay, that makes sense.

1923
02:09:34,160 --> 02:09:38,560
But, you know, if you notice on line 18,

1924
02:09:38,560 --> 02:09:40,800
right above line 19, doesn't it look like

1925
02:09:40,800 --> 02:09:42,760
we're basically doing the same thing, right?

1926
02:09:42,760 --> 02:09:44,920
That line is pretty much identical,

1927
02:09:44,920 --> 02:09:47,200
we're adding a string to a float.

1928
02:09:47,200 --> 02:09:50,040
Any guesses as to why pyre caught the one on line 19,

1929
02:09:50,040 --> 02:09:51,620
but not the one on line 18?

1930
02:09:53,360 --> 02:09:54,600
Is it this one?

1931
02:09:54,600 --> 02:09:55,440
Is it this one?

1932
02:09:55,440 --> 02:09:56,280
Is it this one?

1933
02:09:56,280 --> 02:09:57,120
Is it this one?

1934
02:09:57,120 --> 02:09:58,140
Shout, louder?

1935
02:10:00,800 --> 02:10:02,840
And does it know anything about the in-cat-now ratio

1936
02:10:02,840 --> 02:10:06,960
because it's not the other one type-per-in-the-mix?

1937
02:10:06,960 --> 02:10:07,860
Yes, exactly.

1938
02:10:07,860 --> 02:10:09,820
So in case you didn't hear it,

1939
02:10:09,820 --> 02:10:14,020
pyre is looking at get-cat-dog-ratio, this other function,

1940
02:10:14,020 --> 02:10:16,140
and it's saying, oh, the return type's missing,

1941
02:10:16,140 --> 02:10:18,580
so it must be any, I'm gonna treat it as any.

1942
02:10:18,580 --> 02:10:20,980
But on line, so that's line 16.

1943
02:10:20,980 --> 02:10:22,860
But on line 17, we see that we're using

1944
02:10:22,860 --> 02:10:24,940
the built-in division, and that is typed,

1945
02:10:24,940 --> 02:10:26,060
it's returning a float.

1946
02:10:26,060 --> 02:10:28,900
So really, the gradual typing is kind of putting

1947
02:10:28,900 --> 02:10:30,740
a hard stop on the return annotation

1948
02:10:30,740 --> 02:10:33,020
of get-cat-dog-ratio, it's just treating it as any.

1949
02:10:33,020 --> 02:10:34,980
So anything that calls this function

1950
02:10:34,980 --> 02:10:37,020
is going to assume that it's gonna get back any.

1951
02:10:37,020 --> 02:10:41,580
So that's basically suppressing the type error on line 18.

1952
02:10:41,580 --> 02:10:43,340
So let's also change that.

1953
02:10:43,340 --> 02:10:46,340
Why don't we annotate this correctly?

1954
02:10:46,340 --> 02:10:48,660
So this returns a float, right?

1955
02:10:50,180 --> 02:10:52,160
Okay, and now let's run pyre again,

1956
02:10:52,160 --> 02:10:54,760
and I will also catch up our slides.

1957
02:10:58,100 --> 02:11:00,180
Okay, I think we're on the right track,

1958
02:11:00,180 --> 02:11:01,620
so let's run pyre again.

1959
02:11:02,780 --> 02:11:04,340
Okay, we see both type errors now.

1960
02:11:04,340 --> 02:11:06,780
Does that make sense to everyone, like, what happened there?

1961
02:11:08,020 --> 02:11:10,900
Okay, so let's also say for the sake of example

1962
02:11:10,900 --> 02:11:14,340
that while I was annotating get-cat-dog-ratio

1963
02:11:14,340 --> 02:11:17,100
and saying it returns a float, I realized that,

1964
02:11:17,100 --> 02:11:19,580
actually, doesn't it show this always return a float?

1965
02:11:19,580 --> 02:11:22,660
You know, what if we don't have any dogs, right?

1966
02:11:22,660 --> 02:11:24,940
This is gonna crash, so maybe we should say,

1967
02:11:24,940 --> 02:11:28,600
if dogs is greater than zero, then we return,

1968
02:11:29,900 --> 02:11:32,300
then we return this float.

1969
02:11:32,300 --> 02:11:35,580
If you run pyre after this, you will notice that

1970
02:11:35,580 --> 02:11:37,740
this function body has already been opted

1971
02:11:37,740 --> 02:11:39,380
into type checking, we will catch this.

1972
02:11:39,380 --> 02:11:41,020
It's pretty similar to some of the examples

1973
02:11:41,020 --> 02:11:42,260
we maybe have seen before.

1974
02:11:43,460 --> 02:11:46,220
All right, great.

1975
02:11:46,220 --> 02:11:48,700
And again, use your red sticky if you aren't getting

1976
02:11:48,700 --> 02:11:53,220
to three type errors at the end of this exercise.

1977
02:11:53,220 --> 02:11:54,960
If you do see three type errors,

1978
02:11:54,960 --> 02:11:57,380
go ahead and fix them just for fun.

1979
02:11:57,380 --> 02:11:58,460
Don't spend too much time on it,

1980
02:11:58,460 --> 02:12:00,580
but it shouldn't be too bad.

1981
02:12:00,580 --> 02:12:02,580
I will go ahead and do the same thing here,

1982
02:12:02,580 --> 02:12:05,740
so maybe first of all, we want an optional, right,

1983
02:12:05,740 --> 02:12:07,340
because it sometimes returns none.

1984
02:12:09,380 --> 02:12:10,360
We fix that.

1985
02:12:11,660 --> 02:12:13,260
Okay, we have some more errors.

1986
02:12:14,900 --> 02:12:17,420
You know, here we maybe, since this is sometimes none,

1987
02:12:17,420 --> 02:12:19,660
we kinda have to handle that, so maybe we want this

1988
02:12:19,660 --> 02:12:24,460
to be none, if not else this.

1989
02:12:25,380 --> 02:12:27,420
And we probably wanna cast these to string.

1990
02:12:32,700 --> 02:12:35,700
Oh gosh, this is so confusing.

1991
02:12:42,700 --> 02:12:45,900
All right, and if you did a couple casts,

1992
02:12:45,900 --> 02:12:47,540
you know, did a little non-handling,

1993
02:12:47,540 --> 02:12:49,260
you should get back to no errors.

1994
02:12:49,260 --> 02:12:50,620
Again, red sticky if you're stuck,

1995
02:12:50,620 --> 02:12:51,820
and someone will come help.

1996
02:12:52,820 --> 02:12:55,980
So hopefully this kind of provided a very scaled down,

1997
02:12:55,980 --> 02:12:57,660
let me get back to the slides,

1998
02:12:57,660 --> 02:13:01,340
you know, very scaled down inside and outside

1999
02:13:01,340 --> 02:13:04,820
of insight into how the gradual type system works.

2000
02:13:04,820 --> 02:13:06,820
It basically allows you to incrementally address

2001
02:13:06,820 --> 02:13:09,700
type errors against things that you're currently annotating

2002
02:13:09,700 --> 02:13:12,300
without having to tackle the whole project at once.

2003
02:13:14,540 --> 02:13:15,380
All right.

2004
02:13:17,660 --> 02:13:20,340
Okay, so in the interest of time,

2005
02:13:20,340 --> 02:13:23,020
I will just leave this as a take-home exercise,

2006
02:13:23,020 --> 02:13:26,480
like the continuation of this example.

2007
02:13:27,680 --> 02:13:29,620
Yeah, I want to make sure we get to some other things,

2008
02:13:29,620 --> 02:13:32,500
but in a gist, like what we're covering here

2009
02:13:32,500 --> 02:13:34,660
is essentially like, oh, if I practically were trying

2010
02:13:34,660 --> 02:13:37,260
to annotate this project, maybe I would recommend

2011
02:13:37,260 --> 02:13:38,700
starting with pet.py.

2012
02:13:39,580 --> 02:13:42,460
That defines a bunch of pets,

2013
02:13:42,460 --> 02:13:45,140
and the other files kind of use those pets.

2014
02:13:45,140 --> 02:13:47,540
So if I add annotations to pet.py,

2015
02:13:47,540 --> 02:13:50,860
and then I start adding annotations in the rest of my module,

2016
02:13:50,860 --> 02:13:53,020
gradual typing will mean that I have something

2017
02:13:53,020 --> 02:13:54,900
to check against, and I'll start seeing

2018
02:13:54,900 --> 02:13:57,300
meaningful type errors kind of out of the gate.

2019
02:13:57,300 --> 02:14:00,820
So I won't actually demonstrate this live,

2020
02:14:00,820 --> 02:14:02,220
but if you have questions about it,

2021
02:14:02,220 --> 02:14:04,220
or you want to try it even at home,

2022
02:14:04,220 --> 02:14:05,620
and you want to message us about it after,

2023
02:14:05,620 --> 02:14:07,440
that's also totally an option.

2024
02:14:08,260 --> 02:14:10,660
Another thing I kind of mentioned here

2025
02:14:10,660 --> 02:14:14,260
is if you wanted to basically hand wave a type

2026
02:14:14,260 --> 02:14:15,980
that you didn't know, like say,

2027
02:14:15,980 --> 02:14:19,140
I guess I'll just show it, but you don't have to follow along,

2028
02:14:19,140 --> 02:14:22,540
but if you wanted to say, let's look at park.py,

2029
02:14:23,540 --> 02:14:27,980
we have a function in here that takes in a JSON input

2030
02:14:27,980 --> 02:14:32,980
and turns it into, basically looks at all these fields

2031
02:14:33,000 --> 02:14:34,420
and turns it into an object.

2032
02:14:34,420 --> 02:14:36,020
So I think there was a question earlier

2033
02:14:36,020 --> 02:14:38,480
about how do we handle gross dictionaries

2034
02:14:38,480 --> 02:14:40,420
with nested inputs?

2035
02:14:40,420 --> 02:14:43,740
So the very, maybe not recommended,

2036
02:14:43,740 --> 02:14:46,040
but a possible instantaneous workaround

2037
02:14:46,040 --> 02:14:49,500
is to just say, oh, input is a list of a dictionary

2038
02:14:49,500 --> 02:14:52,300
from string to any, and any can really be anything here,

2039
02:14:53,020 --> 02:14:54,460
and I'm just gonna say whatever I take out

2040
02:14:54,460 --> 02:14:56,620
of this dictionary is fine, just don't worry about it,

2041
02:14:56,620 --> 02:14:58,940
but there are some other things we'll explore later,

2042
02:14:58,940 --> 02:15:01,700
like data classes, type dictionaries,

2043
02:15:01,700 --> 02:15:04,020
or I think Pradeep earlier mentioned,

2044
02:15:04,020 --> 02:15:07,420
recursive type aliases that could let you actually specify

2045
02:15:07,420 --> 02:15:09,300
every single nested type in this dictionary.

2046
02:15:09,300 --> 02:15:10,140
Yeah.

2047
02:15:10,140 --> 02:15:11,800
Is there some tool where you can point it

2048
02:15:11,800 --> 02:15:15,300
to a JSON bot, say hey, come up with the specific

2049
02:15:15,300 --> 02:15:16,140
type of list?

2050
02:15:16,140 --> 02:15:19,740
We have a tool that essentially looks at what object

2051
02:15:19,740 --> 02:15:21,380
you're passing in at runtime,

2052
02:15:21,380 --> 02:15:24,580
and then compiles a type out of that.

2053
02:15:24,580 --> 02:15:26,100
So basically, yes.

2054
02:15:27,580 --> 02:15:29,700
Yeah, I'll demo it on a future slide.

2055
02:15:29,700 --> 02:15:31,780
It's called monkey type, and we use that a lot,

2056
02:15:31,780 --> 02:15:34,100
actually, for a lot of these situations.

2057
02:15:35,100 --> 02:15:37,000
Yeah, so that's a bit hand wavy,

2058
02:15:37,000 --> 02:15:38,820
but let's just keep going.

2059
02:15:38,820 --> 02:15:40,740
There's some more concepts to cover.

2060
02:15:40,740 --> 02:15:44,100
So we've talked a little bit about how

2061
02:15:44,100 --> 02:15:46,460
you can just incrementally add types to a large code base,

2062
02:15:46,460 --> 02:15:48,140
but we haven't really addressed

2063
02:15:48,140 --> 02:15:49,700
how we scale out this effort,

2064
02:15:49,700 --> 02:15:51,460
so we get to a point where we're actually

2065
02:15:51,460 --> 02:15:52,780
getting meaningful guarantees.

2066
02:15:52,780 --> 02:15:54,780
If you sprinkle a few types here and there,

2067
02:15:54,780 --> 02:15:56,260
you're not gonna get the confidence that

2068
02:15:56,260 --> 02:15:59,940
any change I make is really gonna catch everything.

2069
02:15:59,940 --> 02:16:04,940
So some approaches we've taken at Meta and at Instagram

2070
02:16:05,940 --> 02:16:09,560
to really drive type coverage include having tools

2071
02:16:09,560 --> 02:16:11,420
that expose coverage visually.

2072
02:16:11,420 --> 02:16:13,500
So this might be making it clear to authors,

2073
02:16:13,500 --> 02:16:17,140
like program authors, what is and isn't covered,

2074
02:16:17,140 --> 02:16:19,180
where type errors might be missing,

2075
02:16:19,180 --> 02:16:20,820
especially in code that they're already touching

2076
02:16:20,820 --> 02:16:23,060
or have context on, and then we can also use

2077
02:16:23,060 --> 02:16:26,740
coverage tooling to expose progress over time,

2078
02:16:26,740 --> 02:16:29,060
individual contributions, and kind of track,

2079
02:16:29,060 --> 02:16:31,100
like make it at a glance clear,

2080
02:16:31,100 --> 02:16:32,960
like what the current state of the world is

2081
02:16:32,960 --> 02:16:35,820
in terms of coverage and what effect you're making on it.

2082
02:16:37,260 --> 02:16:39,260
Another thing we rely on heavily

2083
02:16:39,260 --> 02:16:40,580
is automatic type inference.

2084
02:16:40,580 --> 02:16:42,660
So like the tool I just mentioned,

2085
02:16:42,660 --> 02:16:44,920
which uses runtime types to guess

2086
02:16:44,920 --> 02:16:46,700
and apply type annotations,

2087
02:16:47,700 --> 02:16:49,060
we have, yeah, the runtime one,

2088
02:16:49,060 --> 02:16:50,940
we have a static one as well that just,

2089
02:16:50,940 --> 02:16:52,820
based on the control flow, tries to guess types

2090
02:16:52,820 --> 02:16:55,140
and just bulk adds annotations for you.

2091
02:16:56,540 --> 02:16:58,860
And then finally, we have different type checking modes

2092
02:16:58,860 --> 02:17:00,860
so when you're ready to kind of move away

2093
02:17:00,860 --> 02:17:04,380
from the leniency that gradual typing provides,

2094
02:17:04,380 --> 02:17:06,180
different, like stricter type checking modes

2095
02:17:06,180 --> 02:17:09,420
can basically provide stronger guarantees

2096
02:17:09,420 --> 02:17:11,340
in exchange for that leniency.

2097
02:17:11,340 --> 02:17:13,940
So now let's kind of talk about each of these

2098
02:17:13,940 --> 02:17:15,700
in some more detail.

2099
02:17:15,700 --> 02:17:17,860
So first one, coverage visibility.

2100
02:17:17,860 --> 02:17:19,060
This is kind of a simple idea,

2101
02:17:19,060 --> 02:17:21,900
but it's actually really useful in practice.

2102
02:17:21,900 --> 02:17:24,400
We've driven, I think, the Instagram code base

2103
02:17:24,400 --> 02:17:26,980
from basically untyped to 99% typed,

2104
02:17:26,980 --> 02:17:28,100
that's millions of lines of code

2105
02:17:28,100 --> 02:17:29,400
over the past couple years,

2106
02:17:29,400 --> 02:17:31,460
and this is one big way we did it.

2107
02:17:31,460 --> 02:17:33,320
We kickstarted some better engineering pushes

2108
02:17:33,320 --> 02:17:36,320
that really relied on coverage tooling to track progress

2109
02:17:36,320 --> 02:17:40,260
and identify hot modules where type coverage was low

2110
02:17:40,260 --> 02:17:42,580
and we maybe want to prioritize first.

2111
02:17:42,580 --> 02:17:44,960
So let's kind of look at the raw data

2112
02:17:44,960 --> 02:17:47,760
that the type checker can provide about coverage.

2113
02:17:47,760 --> 02:17:51,240
So in your project,

2114
02:17:52,360 --> 02:17:54,360
so we're still in gradual typing project,

2115
02:17:54,360 --> 02:17:56,920
you can run pyre statistics.

2116
02:17:56,920 --> 02:17:58,280
I'm covering up the command.

2117
02:17:58,280 --> 02:18:00,680
Let me move this to the other side.

2118
02:18:00,680 --> 02:18:02,860
Pyre statistics.

2119
02:18:02,860 --> 02:18:07,860
And dash dash print summary is just a human readable version

2120
02:18:08,040 --> 02:18:09,920
so we can start with that.

2121
02:18:09,920 --> 02:18:13,120
And so it tells us, okay, overall annotation rate,

2122
02:18:13,280 --> 02:18:16,140
globally accessible values that could be annotated,

2123
02:18:16,140 --> 02:18:18,520
13% and some other stats.

2124
02:18:18,520 --> 02:18:20,520
If you're curious about the machine output,

2125
02:18:20,520 --> 02:18:23,200
you can run pyre statistics

2126
02:18:23,200 --> 02:18:25,460
and just it dumps a huge JSON,

2127
02:18:25,460 --> 02:18:27,400
but we have a lot of dashboards

2128
02:18:27,400 --> 02:18:29,920
and other tooling that consumes this JSON

2129
02:18:29,920 --> 02:18:32,520
and we can expose it in dashboards

2130
02:18:32,520 --> 02:18:33,640
for high level metrics.

2131
02:18:33,640 --> 02:18:36,360
We can show gutters in the editor

2132
02:18:36,360 --> 02:18:39,080
to demonstrate where coverage is and isn't missing.

2133
02:18:39,080 --> 02:18:42,040
We can also show this at pull request or diff time

2134
02:18:42,040 --> 02:18:44,200
so that authors know what the impact

2135
02:18:44,200 --> 02:18:47,960
of their current immediate change has on type coverage.

2136
02:18:47,960 --> 02:18:51,260
So those are some downstream consumers of this data.

2137
02:18:52,640 --> 02:18:53,480
Yeah, so.

2138
02:18:54,440 --> 02:18:56,400
How long should that take to finish?

2139
02:18:56,400 --> 02:18:59,280
I believe it may take a minute.

2140
02:18:59,280 --> 02:19:01,780
Oh, are you running it in gradual typing project?

2141
02:19:03,780 --> 02:19:05,000
No.

2142
02:19:05,000 --> 02:19:05,840
Oh, okay.

2143
02:19:05,840 --> 02:19:07,460
You should CD into.

2144
02:19:09,520 --> 02:19:11,000
Print summary.

2145
02:19:11,000 --> 02:19:13,520
That's for the human readable version.

2146
02:19:13,520 --> 02:19:15,680
Also, red stickies if you want personal help.

2147
02:19:16,760 --> 02:19:19,560
But yeah, other questions about this before we move on.

2148
02:19:22,560 --> 02:19:23,600
Okay, cool.

2149
02:19:23,600 --> 02:19:25,480
So that's the first one.

2150
02:19:32,480 --> 02:19:33,960
Yes, we'll get into that a little.

2151
02:19:33,960 --> 02:19:34,800
That's a good question.

2152
02:19:34,800 --> 02:19:38,920
So unsafe is what we call gradually typed modules.

2153
02:19:38,920 --> 02:19:40,600
So any module that's gradually typed

2154
02:19:40,600 --> 02:19:43,120
into the account is quote unquote unsafe.

2155
02:19:43,120 --> 02:19:44,180
We'll talk actually,

2156
02:19:44,180 --> 02:19:46,000
I mentioned earlier type checking modes, right?

2157
02:19:46,000 --> 02:19:48,520
So strict is another type checking mode.

2158
02:19:48,520 --> 02:19:51,000
So that's what it's telling you about there.

2159
02:19:51,000 --> 02:19:53,380
And yeah, again, we'll cover that

2160
02:19:53,380 --> 02:19:55,880
right after inference tooling.

2161
02:19:55,880 --> 02:20:00,480
So not all type coverage has to be added manually.

2162
02:20:00,480 --> 02:20:02,380
Although human input is usually a really good

2163
02:20:02,380 --> 02:20:04,800
starting point that a lot of tools,

2164
02:20:04,800 --> 02:20:06,480
like automatic tools kind of feed off of

2165
02:20:06,480 --> 02:20:08,720
and scale out once you have a little bit started.

2166
02:20:08,720 --> 02:20:11,440
And you still need the human expertise

2167
02:20:11,440 --> 02:20:12,520
for a lot of tricky cases.

2168
02:20:12,520 --> 02:20:16,520
But we've leaned really heavily on automatic type inference

2169
02:20:16,520 --> 02:20:19,620
to just bulk take care of all of the simple cases

2170
02:20:19,620 --> 02:20:21,400
that the machine can guess.

2171
02:20:21,400 --> 02:20:25,520
And so we both have PyreInfer,

2172
02:20:25,520 --> 02:20:28,880
which is a best effort static analysis tool

2173
02:20:28,880 --> 02:20:32,620
that right now it's kind of undergoing some changes,

2174
02:20:32,620 --> 02:20:34,880
but it will guess all of your simple cases.

2175
02:20:34,880 --> 02:20:36,040
And then we have MonkeyType,

2176
02:20:36,040 --> 02:20:37,960
which is the dynamic runtime one

2177
02:20:37,960 --> 02:20:40,640
that will sort of read in what the objects are at runtime

2178
02:20:40,640 --> 02:20:43,800
and then create types out of that to add to your project.

2179
02:20:43,800 --> 02:20:46,200
So let's give both of these a try.

2180
02:20:46,200 --> 02:20:47,860
I will move this back over here.

2181
02:20:49,200 --> 02:20:52,360
So for the first one, let's just run PyreInfer

2182
02:20:52,360 --> 02:20:54,000
dash dash in place.

2183
02:20:54,000 --> 02:20:56,400
And the in place flag just tells the tool,

2184
02:20:56,400 --> 02:20:58,920
I want you to directly change my files.

2185
02:20:58,920 --> 02:21:01,500
Otherwise it'll output them in a separate directory

2186
02:21:01,500 --> 02:21:03,820
so it doesn't touch your stuff.

2187
02:21:03,820 --> 02:21:05,160
Okay, so we did that.

2188
02:21:05,160 --> 02:21:06,880
Let's run PyreStatistics again.

2189
02:21:08,120 --> 02:21:09,800
Dash dash print summary.

2190
02:21:11,800 --> 02:21:12,960
Am I missing a Y?

2191
02:21:12,960 --> 02:21:13,800
Okay.

2192
02:21:14,720 --> 02:21:17,240
Okay, so we were at 13% before.

2193
02:21:17,240 --> 02:21:20,240
And PyreInfer just slapped a lot of nones on honestly

2194
02:21:20,240 --> 02:21:23,000
a lot of returns and like a lot of really simple stuff,

2195
02:21:23,000 --> 02:21:24,240
but we're at like 48.

2196
02:21:24,240 --> 02:21:28,120
And in practice too, that is a big proportion of types

2197
02:21:28,120 --> 02:21:29,640
in any real world project.

2198
02:21:29,640 --> 02:21:30,640
A lot of them are pretty simple.

2199
02:21:30,640 --> 02:21:32,400
A lot of them are non.

2200
02:21:32,400 --> 02:21:35,080
Maybe you wanna do this like a module at a time

2201
02:21:35,080 --> 02:21:38,260
and it's a little easier than going through it manually.

2202
02:21:39,280 --> 02:21:40,740
Let's also try monkey type.

2203
02:21:40,740 --> 02:21:43,800
So you can feel free to just watch

2204
02:21:43,800 --> 02:21:44,640
if you don't wanna do this,

2205
02:21:44,640 --> 02:21:46,600
but if you wanna follow along, you're welcome to.

2206
02:21:46,600 --> 02:21:49,580
So pip install monkey type would be the first step.

2207
02:21:49,580 --> 02:21:52,900
And then you can, let me actually before I do this,

2208
02:21:54,680 --> 02:21:57,220
there is a type error that we did not end up fixing

2209
02:21:57,220 --> 02:21:58,800
because we skipped some things.

2210
02:21:58,800 --> 02:22:02,060
So I will quickly comment out the problem.

2211
02:22:02,060 --> 02:22:04,920
Okay, so now let's do a monkey type.

2212
02:22:05,000 --> 02:22:06,720
Run main.py.

2213
02:22:07,880 --> 02:22:10,320
Okay, so this ran the program, printed those stats

2214
02:22:10,320 --> 02:22:12,920
that we were dealing with earlier with like floats and things.

2215
02:22:12,920 --> 02:22:17,920
And we can just show monkey type list modules,

2216
02:22:19,580 --> 02:22:23,080
tells us what modules monkey type knows about

2217
02:22:23,080 --> 02:22:25,480
and could add types to if we wanted to.

2218
02:22:25,480 --> 02:22:29,560
So let's try monkey type apply to each of those.

2219
02:22:29,560 --> 02:22:31,160
So it's gonna add a bunch of stuff.

2220
02:22:31,160 --> 02:22:36,160
Monkey type apply to another one and the final one.

2221
02:22:39,440 --> 02:22:43,420
Okay, and now let's do the statistics again.

2222
02:22:44,480 --> 02:22:45,840
Like, oh wow, we didn't even do anything.

2223
02:22:45,840 --> 02:22:47,400
We're at 83% covered.

2224
02:22:47,400 --> 02:22:50,320
And if you want to, you can kind of get this.

2225
02:22:51,680 --> 02:22:55,040
Look around at some of the annotations that have been added.

2226
02:22:55,040 --> 02:22:57,880
Again, feel free to play with this at home.

2227
02:22:57,880 --> 02:23:02,880
So you can see like, it's guessed a lot of these types.

2228
02:23:05,760 --> 02:23:08,160
I don't know if this is helpful, but yeah, see we,

2229
02:23:08,160 --> 02:23:10,560
oh, I added the any manually, so that's there.

2230
02:23:10,560 --> 02:23:12,520
But yeah, a lot of these are inferable

2231
02:23:12,520 --> 02:23:14,040
either at runtime or statically.

2232
02:23:14,040 --> 02:23:17,040
So we can get a lot of coverage for free kind of

2233
02:23:17,040 --> 02:23:18,440
with a lot of these tooling.

2234
02:23:20,280 --> 02:23:21,480
Any questions about this?

2235
02:23:24,080 --> 02:23:25,320
Nope, okay.

2236
02:23:25,320 --> 02:23:28,680
Cool, and the last thing that we mentioned earlier is,

2237
02:23:29,960 --> 02:23:32,360
gradual typing and how this quietly accepts

2238
02:23:32,360 --> 02:23:37,000
untyped values as any and doesn't check function bodies.

2239
02:23:37,000 --> 02:23:39,280
So like, what if we spent a bunch of time

2240
02:23:39,280 --> 02:23:40,840
manually adding annotations,

2241
02:23:40,840 --> 02:23:42,480
automatically adding annotations,

2242
02:23:42,480 --> 02:23:44,520
and now we're ready to trade this leniency

2243
02:23:44,520 --> 02:23:46,940
for stronger type guarantees?

2244
02:23:46,940 --> 02:23:49,400
So strict mode can be turned on per module

2245
02:23:49,400 --> 02:23:51,080
or all at once for your whole project

2246
02:23:51,080 --> 02:23:52,160
if you're ready for that.

2247
02:23:52,440 --> 02:23:56,580
And it will throw a type error on any non-local value

2248
02:23:56,580 --> 02:23:59,440
that's missing an annotation and would have injected

2249
02:23:59,440 --> 02:24:01,880
an any into your environment.

2250
02:24:01,880 --> 02:24:06,880
So as you convert more and more modules to strict mode,

2251
02:24:07,520 --> 02:24:10,040
the number of any's floating around in your code base

2252
02:24:10,040 --> 02:24:12,020
will decrease and you'll hide fewer and fewer errors

2253
02:24:12,020 --> 02:24:12,860
as a result.

2254
02:24:13,800 --> 02:24:16,180
Strict mode is also another really useful way

2255
02:24:16,180 --> 02:24:18,640
to kind of prevent anyone else from adding

2256
02:24:18,640 --> 02:24:21,220
new untyped code to a module.

2257
02:24:21,220 --> 02:24:23,060
And you can kind of use it to avoid

2258
02:24:23,060 --> 02:24:24,420
coverage decay over time.

2259
02:24:24,420 --> 02:24:26,700
If you've fully annotated a module,

2260
02:24:26,700 --> 02:24:28,380
you just want it to stay that way,

2261
02:24:28,380 --> 02:24:29,820
indefinitely into the future.

2262
02:24:30,820 --> 02:24:32,860
You can try this if you want by opening up,

2263
02:24:33,940 --> 02:24:35,220
say like pet.py.

2264
02:24:40,140 --> 02:24:42,980
Pyre strict is the way you opt in just a single module

2265
02:24:42,980 --> 02:24:47,020
and an otherwise unsafe or gradual project.

2266
02:24:47,020 --> 02:24:49,620
And if you run Pyre now, you'll kind of see like,

2267
02:24:50,020 --> 02:24:52,180
missing return annotations all over the place.

2268
02:24:52,180 --> 02:24:53,980
And these need to be fixed

2269
02:24:53,980 --> 02:24:55,580
because they're introducing any's.

2270
02:24:56,980 --> 02:25:00,700
So now that we've talked about gradual typing,

2271
02:25:00,700 --> 02:25:02,020
which provides smoother onboarding

2272
02:25:02,020 --> 02:25:05,860
and then strict typing which provides stronger guarantees,

2273
02:25:05,860 --> 02:25:07,380
I wanna be just a little more specific

2274
02:25:07,380 --> 02:25:09,960
about exactly what guarantees you can actually expect

2275
02:25:09,960 --> 02:25:11,700
when we're converting things to strict

2276
02:25:11,700 --> 02:25:14,400
and at different stages in the process.

2277
02:25:15,660 --> 02:25:17,340
So when you just have a module that's strict,

2278
02:25:17,340 --> 02:25:20,180
you do guarantee that all code in that module

2279
02:25:20,180 --> 02:25:23,300
is visible to the type checker and being analyzed.

2280
02:25:23,300 --> 02:25:27,140
And that module itself is not introducing any more any types

2281
02:25:27,140 --> 02:25:29,820
into your project's environment.

2282
02:25:29,820 --> 02:25:33,100
However, if you have dependencies that are poorly typed

2283
02:25:33,100 --> 02:25:35,340
or not strict, those dependencies

2284
02:25:35,340 --> 02:25:36,660
could be giving you any types,

2285
02:25:36,660 --> 02:25:39,540
like injecting them into your local logic

2286
02:25:39,540 --> 02:25:41,660
and that could still result in missed type errors

2287
02:25:41,660 --> 02:25:43,140
even in a strict module.

2288
02:25:43,140 --> 02:25:44,900
So it kind of follows that

2289
02:25:45,720 --> 02:25:47,380
strictifying your entire project

2290
02:25:47,380 --> 02:25:48,660
provides stronger guarantees.

2291
02:25:48,660 --> 02:25:49,900
I mean, part of it's linear.

2292
02:25:49,900 --> 02:25:52,340
Now, all the code in your entire project

2293
02:25:52,340 --> 02:25:54,140
is analyzed by the type checker.

2294
02:25:54,140 --> 02:25:56,460
But part of it is also that you now know

2295
02:25:56,460 --> 02:25:59,220
that all of your dependencies aren't feeding you any's.

2296
02:25:59,220 --> 02:26:01,900
So you can't be getting basically suppressed errors

2297
02:26:01,900 --> 02:26:03,380
because you're calling a dependency that,

2298
02:26:03,380 --> 02:26:04,540
oh my gosh, I'm sorry.

2299
02:26:08,300 --> 02:26:10,420
Yeah, you're calling into some dependency

2300
02:26:10,420 --> 02:26:11,460
that was not well typed

2301
02:26:11,460 --> 02:26:13,780
and therefore you're getting an any from there

2302
02:26:13,780 --> 02:26:16,260
that's suppressing errors within your module.

2303
02:26:16,260 --> 02:26:19,100
That said, poorly typed third party libraries

2304
02:26:19,100 --> 02:26:21,020
or dependencies or things you don't control

2305
02:26:21,020 --> 02:26:23,440
could still inject any's into your project.

2306
02:26:23,440 --> 02:26:26,100
So that's kind of third party boundaries

2307
02:26:26,100 --> 02:26:28,620
are kind of where problems could still lie.

2308
02:26:28,620 --> 02:26:30,040
So what now?

2309
02:26:34,380 --> 02:26:36,940
All right, so enter type stubs.

2310
02:26:36,940 --> 02:26:40,020
So we know that even in a fully typed strict project,

2311
02:26:40,060 --> 02:26:41,860
any's can still flow in from dependencies

2312
02:26:41,860 --> 02:26:42,900
that you don't own.

2313
02:26:42,900 --> 02:26:45,140
And maybe you own them,

2314
02:26:45,140 --> 02:26:47,340
but you can't type them like Cython code.

2315
02:26:47,340 --> 02:26:49,500
So stub files are one way to address this.

2316
02:26:49,500 --> 02:26:52,540
Basically stub files are a public interface

2317
02:26:52,540 --> 02:26:56,520
of type signatures that override the implementation logic

2318
02:26:56,520 --> 02:26:57,980
of that module.

2319
02:26:57,980 --> 02:27:02,020
So you can kind of create a stub file.

2320
02:27:02,020 --> 02:27:04,500
It can live right next to the file in question

2321
02:27:04,500 --> 02:27:06,060
that it's annotating.

2322
02:27:06,060 --> 02:27:07,940
Or you could have a whole directory of stubs

2323
02:27:07,940 --> 02:27:10,300
that you just import in and add it to your configuration

2324
02:27:10,300 --> 02:27:12,460
and Pyre will know about it.

2325
02:27:12,460 --> 02:27:17,460
So TypeShed is a sort of open sourced collection

2326
02:27:18,180 --> 02:27:21,900
of built in stubs, commonly used libraries.

2327
02:27:21,900 --> 02:27:23,420
All of these already come with stubs

2328
02:27:23,420 --> 02:27:25,380
and they come pre bundled in with the type checker.

2329
02:27:25,380 --> 02:27:26,900
Basically any type checker you use.

2330
02:27:26,900 --> 02:27:29,600
So you may have noticed that all of the standard library

2331
02:27:29,600 --> 02:27:32,060
functions we were calling were already well typed.

2332
02:27:32,060 --> 02:27:34,260
And that's because those types are defined in TypeShed.

2333
02:27:34,260 --> 02:27:37,300
It is a GitHub project you can play around with.

2334
02:27:37,300 --> 02:27:38,940
But those are all bundled in with the type checker

2335
02:27:38,940 --> 02:27:40,540
and we already know about that.

2336
02:27:41,660 --> 02:27:45,500
And then just as an FYI, in case anyone is surprised,

2337
02:27:45,500 --> 02:27:49,460
type annotations have been around for enough time

2338
02:27:49,460 --> 02:27:51,300
that actually most commonly used libraries

2339
02:27:51,300 --> 02:27:53,820
like the top 100 I think was what we looked at.

2340
02:27:53,820 --> 02:27:55,420
The majority of these do come with types.

2341
02:27:55,420 --> 02:27:58,620
We even have a PEP that specifies a way to bundle

2342
02:27:58,620 --> 02:28:00,660
and distribute type information as a package.

2343
02:28:00,660 --> 02:28:03,100
So chances are if you're using a library heavily

2344
02:28:03,100 --> 02:28:05,420
and you want those types, you can find them.

2345
02:28:05,780 --> 02:28:08,520
They exist for most commonly used libraries.

2346
02:28:10,860 --> 02:28:13,180
Hopefully we have a somewhat decent understanding

2347
02:28:13,180 --> 02:28:15,860
of how to approach typing a large code base.

2348
02:28:15,860 --> 02:28:17,560
Any questions before I keep going?

2349
02:28:19,680 --> 02:28:20,760
Okay, we'll power through.

2350
02:28:20,760 --> 02:28:22,180
I think we're almost done.

2351
02:28:22,180 --> 02:28:24,940
So the final question that we might wanna answer

2352
02:28:24,940 --> 02:28:28,060
is what if I have very dynamic code?

2353
02:28:28,060 --> 02:28:30,380
Maybe I'm generating a bunch of classes on the fly

2354
02:28:30,380 --> 02:28:32,020
and they have variable names

2355
02:28:32,020 --> 02:28:34,580
and there's no way I can statically know what they are.

2356
02:28:34,580 --> 02:28:37,580
Or other legacy code that I just don't wanna refactor.

2357
02:28:37,580 --> 02:28:39,600
But I still want the benefits of type checking

2358
02:28:39,600 --> 02:28:40,980
on the rest of my project.

2359
02:28:40,980 --> 02:28:43,900
So we'll kind of get into how to express

2360
02:28:43,900 --> 02:28:45,940
more dynamic patterns that you might think fall

2361
02:28:45,940 --> 02:28:47,900
under this category but actually are expressible

2362
02:28:47,900 --> 02:28:49,980
in the type system in the next section.

2363
02:28:49,980 --> 02:28:52,020
But let's assume that you really can't deal

2364
02:28:52,020 --> 02:28:52,880
with it right now.

2365
02:28:52,880 --> 02:28:57,040
So we have some escape patches to accommodate these cases.

2366
02:28:57,040 --> 02:28:59,100
We've already seen the any type.

2367
02:28:59,100 --> 02:29:01,940
It's often implicitly used when annotations are missing.

2368
02:29:01,940 --> 02:29:03,460
But you can also use it manually

2369
02:29:03,460 --> 02:29:04,820
to just tell the type checker,

2370
02:29:04,820 --> 02:29:06,620
I know you have a type guess for this,

2371
02:29:06,620 --> 02:29:09,140
but I want you to treat it as any.

2372
02:29:09,140 --> 02:29:13,500
And not err against it for the rest of the control flow

2373
02:29:13,500 --> 02:29:14,900
no matter where it's passed.

2374
02:29:16,180 --> 02:29:17,380
We also have type casting.

2375
02:29:17,380 --> 02:29:21,340
So if you maybe know that the type of this value

2376
02:29:21,340 --> 02:29:23,360
is something more specific or different

2377
02:29:23,360 --> 02:29:24,780
from what the type checker thinks,

2378
02:29:24,780 --> 02:29:26,540
maybe because of some side effect

2379
02:29:26,540 --> 02:29:30,100
or some other weird condition,

2380
02:29:30,100 --> 02:29:31,720
you can just tell the type checker,

2381
02:29:31,720 --> 02:29:34,640
trust me it's an int, don't ask any questions,

2382
02:29:34,640 --> 02:29:36,440
and it'll be an int from now on.

2383
02:29:36,440 --> 02:29:37,920
You have to be careful because if you're wrong,

2384
02:29:37,920 --> 02:29:40,600
then the type checker is just gonna lie at you later on.

2385
02:29:40,600 --> 02:29:42,040
But that is an option.

2386
02:29:42,040 --> 02:29:45,340
And then finally, if maybe you don't want to cast

2387
02:29:45,340 --> 02:29:48,440
this whole thing as any and have it ignore errors

2388
02:29:48,440 --> 02:29:49,820
against this value forever,

2389
02:29:49,820 --> 02:29:52,920
you just want this one assignment to stop complaining.

2390
02:29:53,880 --> 02:29:55,320
You can use an inline suppression

2391
02:29:55,320 --> 02:29:58,180
to just shut up the type checker in the moment.

2392
02:29:59,180 --> 02:30:03,020
And finally, you can kind of use stubs

2393
02:30:03,020 --> 02:30:05,620
as type casting at scale, right,

2394
02:30:05,620 --> 02:30:08,940
because we're overriding the whole interface of a module,

2395
02:30:08,940 --> 02:30:10,180
essentially casting.

2396
02:30:10,180 --> 02:30:13,600
And we also have error suppressions at scale,

2397
02:30:13,600 --> 02:30:15,620
which we'll talk about next.

2398
02:30:15,620 --> 02:30:16,900
In some really tricky cases,

2399
02:30:16,900 --> 02:30:21,140
we also support stuff that basically tell you anything,

2400
02:30:21,140 --> 02:30:23,180
any name, whatever gibberish you want,

2401
02:30:23,180 --> 02:30:24,320
you can import from this module

2402
02:30:24,320 --> 02:30:25,660
and the type checker won't complain about it

2403
02:30:25,660 --> 02:30:26,740
and just treat it as any.

2404
02:30:26,740 --> 02:30:28,780
So that's what a placeholder stub is.

2405
02:30:28,780 --> 02:30:31,640
It's not super often needed,

2406
02:30:31,640 --> 02:30:34,040
but if you have questions about it, feel free to ask.

2407
02:30:35,300 --> 02:30:36,980
All right, so let's quickly review.

2408
02:30:36,980 --> 02:30:37,940
We've seen all of these already.

2409
02:30:37,940 --> 02:30:39,180
There's strict mode.

2410
02:30:39,180 --> 02:30:40,300
This is usually the goal.

2411
02:30:40,300 --> 02:30:42,040
So where we stop introducing implicit any's

2412
02:30:42,040 --> 02:30:43,880
and we get some stronger guarantees

2413
02:30:43,880 --> 02:30:45,420
the more modules you have.

2414
02:30:45,420 --> 02:30:49,060
If you have high value code or sensitive code

2415
02:30:49,060 --> 02:30:51,580
or maybe hot modules that a lot of things depend on,

2416
02:30:51,580 --> 02:30:53,900
usually you probably want to get it to strict

2417
02:30:53,900 --> 02:30:54,940
as quickly as you can.

2418
02:30:55,780 --> 02:30:57,380
We've seen gradual typing.

2419
02:30:57,380 --> 02:31:00,340
So this is the default mode for type checking.

2420
02:31:00,340 --> 02:31:02,660
And all annotations are optional

2421
02:31:02,660 --> 02:31:05,500
and it kind of smooths out the process for onboarding.

2422
02:31:05,500 --> 02:31:06,980
And then finally, I mentioned earlier,

2423
02:31:06,980 --> 02:31:08,540
if you want suppression at scale,

2424
02:31:08,540 --> 02:31:10,140
you can just tell the type checker,

2425
02:31:11,700 --> 02:31:13,920
just don't error on anything in this file.

2426
02:31:13,920 --> 02:31:14,920
I don't care.

2427
02:31:14,920 --> 02:31:17,760
And so that is also a type checking mode.

2428
02:31:17,760 --> 02:31:20,700
So we often use these along with continuous integration

2429
02:31:21,540 --> 02:31:23,720
to sort of lock in all the forward progress that we make

2430
02:31:23,720 --> 02:31:25,800
and prevent any backsliding

2431
02:31:25,800 --> 02:31:28,200
as we gradually migrate sort of a large existing

2432
02:31:28,200 --> 02:31:30,520
poorly typed code base one step at a time

2433
02:31:30,520 --> 02:31:33,280
at whatever pace makes sense for us.

2434
02:31:35,360 --> 02:31:38,240
All right, so this is the initial set of challenges

2435
02:31:38,240 --> 02:31:40,560
and some of the approaches that we've talked about

2436
02:31:40,560 --> 02:31:42,480
to sort of address each of them.

2437
02:31:42,480 --> 02:31:43,600
I won't read them to you,

2438
02:31:43,600 --> 02:31:46,120
but what this combination of approaches,

2439
02:31:46,120 --> 02:31:49,880
at least we have had a really good experience

2440
02:31:49,880 --> 02:31:52,560
driving Instagram's millions of lines of code

2441
02:31:52,560 --> 02:31:56,400
to over 99% type annotated over the last couple of years.

2442
02:31:56,400 --> 02:31:58,800
And that's like without slowing down

2443
02:31:58,800 --> 02:32:01,000
all the other things that are going on,

2444
02:32:01,000 --> 02:32:02,280
other timelines or roadmaps

2445
02:32:02,280 --> 02:32:04,560
and without doing a huge overhaul upfront.

2446
02:32:05,500 --> 02:32:08,320
And we've also through this process kind of found

2447
02:32:08,320 --> 02:32:12,120
that a well typed code base has been pretty invaluable

2448
02:32:12,120 --> 02:32:14,560
for like increasing development speed,

2449
02:32:14,560 --> 02:32:16,960
reducing the number of crashes that like take down the site

2450
02:32:16,960 --> 02:32:19,660
or actually result in what we call a SEV,

2451
02:32:19,660 --> 02:32:21,680
like a production problem,

2452
02:32:21,680 --> 02:32:24,240
building smarter code mod tooling and linting

2453
02:32:24,240 --> 02:32:28,200
and also detecting privacy and security issues at scale

2454
02:32:28,200 --> 02:32:31,200
without having to do security reviews of,

2455
02:32:31,200 --> 02:32:32,280
well, we also do that,

2456
02:32:32,280 --> 02:32:35,040
but in addition to doing security reviews

2457
02:32:35,040 --> 02:32:35,960
line by line manually.

2458
02:32:35,960 --> 02:32:39,440
So those are just some of the applications we found

2459
02:32:39,440 --> 02:32:41,560
as we went through this journey

2460
02:32:41,560 --> 02:32:45,160
of converting a huge untyped code base to use types.

2461
02:32:45,160 --> 02:32:46,160
And yeah, that's it.

2462
02:32:46,160 --> 02:32:47,000
Any questions?

2463
02:32:47,720 --> 02:32:51,040
You mentioned this like to private CTN

2464
02:32:51,040 --> 02:32:52,560
or security and capacity

2465
02:32:52,560 --> 02:32:54,400
would you allow for a little bit of a verification?

2466
02:32:54,400 --> 02:32:58,280
Yeah, so actually Pradeep is giving a talk on Saturday

2467
02:32:58,280 --> 02:33:01,040
about one of the applications that a PEP just came out

2468
02:33:01,040 --> 02:33:04,840
that we're using the type systems or leveraging it

2469
02:33:04,840 --> 02:33:08,120
to enforce secure by default APIs

2470
02:33:08,120 --> 02:33:09,400
to prevent like shell injection

2471
02:33:09,400 --> 02:33:10,800
and other kinds of problems.

2472
02:33:10,800 --> 02:33:13,240
So I highly recommend going to that if you're interested.

2473
02:33:13,240 --> 02:33:15,160
But there are also other applications

2474
02:33:15,160 --> 02:33:16,800
just based on the semantic understanding

2475
02:33:17,600 --> 02:33:19,040
that the type checker has of the code.

2476
02:33:19,040 --> 02:33:22,400
We've built a analysis tool on top of our type checker

2477
02:33:22,400 --> 02:33:24,040
shares the same backend

2478
02:33:24,040 --> 02:33:26,640
that basically tracks data flow through code

2479
02:33:26,640 --> 02:33:30,120
and looks for bad data usage

2480
02:33:30,120 --> 02:33:33,280
or like user controlled data flowing somewhere it shouldn't

2481
02:33:33,280 --> 02:33:34,160
things like that.

2482
02:33:34,160 --> 02:33:36,400
We've also used, yeah, we can,

2483
02:33:36,400 --> 02:33:37,640
I could talk about it more.

2484
02:33:37,640 --> 02:33:38,480
Yeah.

2485
02:33:38,480 --> 02:33:40,360
Extending these types of like,

2486
02:33:40,360 --> 02:33:44,440
like this is the data of this level or whatever

2487
02:33:44,480 --> 02:33:47,000
and then if it's in range regions of the code

2488
02:33:47,000 --> 02:33:50,640
that's widely accessible in some places

2489
02:33:50,640 --> 02:33:53,680
you can have some tool that will flag those regions

2490
02:33:53,680 --> 02:33:54,680
where it's doing some of that.

2491
02:33:54,680 --> 02:33:57,960
Yeah, so either you can represent that kind of sensitive data

2492
02:33:57,960 --> 02:34:01,640
directly as a type or you can use the type knowledge

2493
02:34:01,640 --> 02:34:03,920
to basically build a really accurate call graph

2494
02:34:03,920 --> 02:34:05,400
of like your whole code base.

2495
02:34:05,400 --> 02:34:07,840
And that enables a lot of other static analysis

2496
02:34:07,840 --> 02:34:11,040
that's very similar, I guess, in concept to type checking

2497
02:34:11,040 --> 02:34:13,320
that like models that data and checks it.

2498
02:34:13,320 --> 02:34:15,360
And so we actually employ that

2499
02:34:15,360 --> 02:34:18,560
to catch a lot of security abilities before they land.

2500
02:34:20,840 --> 02:34:23,480
All right, I think I am at time.

2501
02:34:23,480 --> 02:34:25,080
Gia is going to talk about,

2502
02:34:26,480 --> 02:34:28,240
basically spend the rest of the tutorial

2503
02:34:28,240 --> 02:34:31,480
getting into like interesting Python patterns

2504
02:34:31,480 --> 02:34:34,360
and how to express them in the type system.

2505
02:34:34,360 --> 02:34:35,520
Yeah, I'll pass it off.

2506
02:34:35,520 --> 02:34:37,160
I'm gonna come get the mic.

2507
02:34:37,400 --> 02:34:38,240
Thank you.

2508
02:34:38,240 --> 02:34:39,080
Thank you.

2509
02:34:39,080 --> 02:34:39,920
Thank you.

2510
02:34:39,920 --> 02:34:40,740
Thank you.

2511
02:34:40,740 --> 02:34:41,580
Thank you.

2512
02:34:55,580 --> 02:34:57,080
Bing test.

2513
02:34:57,080 --> 02:34:57,920
Does this work?

2514
02:35:00,280 --> 02:35:01,600
Hello, test.

2515
02:35:01,600 --> 02:35:02,440
Hello, hi.

2516
02:35:07,240 --> 02:35:08,080
Yes.

2517
02:35:19,680 --> 02:35:22,440
Bing test ABC.

2518
02:35:22,440 --> 02:35:23,800
Right, okay, cool.

2519
02:35:28,240 --> 02:35:30,120
All right, so I'm Gia.

2520
02:35:30,120 --> 02:35:34,400
I'm gonna tell you about typing common program patterns.

2521
02:35:34,400 --> 02:35:35,880
I hope that at this point,

2522
02:35:35,880 --> 02:35:38,200
you are all familiar with the basics of typing.

2523
02:35:38,200 --> 02:35:41,040
This section will mostly focus on the trickier cases

2524
02:35:41,040 --> 02:35:42,480
and it will take you through

2525
02:35:42,480 --> 02:35:44,160
some of the more advanced utilities

2526
02:35:44,160 --> 02:35:46,560
you are gonna find in the typing module.

2527
02:35:46,560 --> 02:35:48,560
Content in this section are mostly focused

2528
02:35:48,560 --> 02:35:50,160
on the type system itself.

2529
02:35:50,160 --> 02:35:52,080
It's not tooling specific.

2530
02:35:52,080 --> 02:35:54,600
Like you can most of what I can tell you

2531
02:35:54,600 --> 02:35:58,200
is gonna be generalizable for most type checkers.

2532
02:35:58,200 --> 02:36:00,120
This is also designed to be a mixed session

2533
02:36:00,120 --> 02:36:02,880
of me presenting and you doing exercise.

2534
02:36:02,880 --> 02:36:04,360
I'm gonna be talking for a while

2535
02:36:04,360 --> 02:36:06,880
and then we're gonna do some simple exercise for practice

2536
02:36:06,880 --> 02:36:08,960
and then I'll come back and keep talking

2537
02:36:08,960 --> 02:36:12,200
and then we'll do exercise, rinse and repeat.

2538
02:36:12,200 --> 02:36:13,640
It's kind of difficult to estimate

2539
02:36:13,640 --> 02:36:15,520
how long the exercise is gonna take.

2540
02:36:15,520 --> 02:36:19,320
So I provided extra amount of content in the slide

2541
02:36:19,320 --> 02:36:21,440
just in case we're blasting through all the exercises.

2542
02:36:21,440 --> 02:36:24,600
But on the other hand, it may also happen

2543
02:36:24,600 --> 02:36:26,200
that we spend some extra time

2544
02:36:26,200 --> 02:36:27,600
with some of the exercises

2545
02:36:27,600 --> 02:36:31,740
and won't have enough time to go over

2546
02:36:31,740 --> 02:36:33,080
all the prepared contents.

2547
02:36:33,080 --> 02:36:34,720
That is totally expected.

2548
02:36:34,720 --> 02:36:36,320
If that happens, no big deal.

2549
02:36:36,320 --> 02:36:39,840
Slide for the remaining contents are there online.

2550
02:36:39,840 --> 02:36:44,840
So you can check them out at your leisure later as well.

2551
02:36:46,120 --> 02:36:48,560
So whenever you see this icon,

2552
02:36:48,560 --> 02:36:51,760
that means that I'm done talking and it's exercise time.

2553
02:36:51,760 --> 02:36:54,120
All the exercises in this section is located

2554
02:36:54,120 --> 02:36:58,600
as the typing pattern exercises subdirectory

2555
02:36:58,600 --> 02:36:59,800
in the GitHub repository

2556
02:36:59,800 --> 02:37:02,320
which is cloned in the previous section.

2557
02:37:02,320 --> 02:37:04,280
Please CD into this directory right now

2558
02:37:04,280 --> 02:37:06,300
in case you forget it later.

2559
02:37:06,300 --> 02:37:07,540
They are grouped by topics.

2560
02:37:07,540 --> 02:37:10,280
Each file is pretty self-contained.

2561
02:37:10,280 --> 02:37:12,120
Exercises can either be done locally

2562
02:37:12,120 --> 02:37:15,040
where you just CD into the most specific directory

2563
02:37:15,040 --> 02:37:17,640
and run pyrecheck to verify our answer there

2564
02:37:17,640 --> 02:37:20,440
or you can follow this short URL

2565
02:37:20,440 --> 02:37:22,240
where I provide pyre playgrounding

2566
02:37:22,240 --> 02:37:24,040
so that you can do them online

2567
02:37:24,040 --> 02:37:27,740
in case your setup or your installation has some problem

2568
02:37:27,740 --> 02:37:29,000
and you still want to follow along

2569
02:37:29,000 --> 02:37:30,960
with all the examples that I have here.

2570
02:37:33,080 --> 02:37:36,240
During the talk, I plan to go through only a subset

2571
02:37:36,240 --> 02:37:38,440
of all the provided exercises.

2572
02:37:38,440 --> 02:37:39,520
Those are not covered

2573
02:37:39,520 --> 02:37:41,520
will be considered take-home exercises

2574
02:37:41,520 --> 02:37:42,800
where you can just do them offline

2575
02:37:42,800 --> 02:37:44,120
if you're really into them.

2576
02:37:46,440 --> 02:37:48,200
Okay, so this section,

2577
02:37:48,200 --> 02:37:50,320
I'm gonna organize it into three topics.

2578
02:37:50,320 --> 02:37:53,400
First topic is about how to work with functions

2579
02:37:53,400 --> 02:37:57,480
that deal with more than one type of values.

2580
02:37:57,480 --> 02:37:59,420
The next is about issues you might run into

2581
02:37:59,420 --> 02:38:00,720
when working with classes.

2582
02:38:00,720 --> 02:38:04,680
And finally, we'll consider how one could type functions

2583
02:38:04,680 --> 02:38:06,540
that operate on other functions.

2584
02:38:06,540 --> 02:38:07,400
The first two topics,

2585
02:38:07,400 --> 02:38:10,960
I think I have enough time to cover live today.

2586
02:38:10,960 --> 02:38:13,680
The third topic is likely going to be the bonus part

2587
02:38:13,680 --> 02:38:16,340
of this talk where we may or may not skip it

2588
02:38:16,340 --> 02:38:17,320
or stop in the middle

2589
02:38:17,320 --> 02:38:20,400
depending on how much time is left at that point.

2590
02:38:20,400 --> 02:38:24,920
Okay, so first, how to work with functions

2591
02:38:24,920 --> 02:38:27,840
that handles multiple values,

2592
02:38:27,840 --> 02:38:30,200
handle values of multiple types.

2593
02:38:30,200 --> 02:38:31,480
I'll talk about three techniques

2594
02:38:31,480 --> 02:38:34,100
that can be used to annotate these kind of functions,

2595
02:38:34,100 --> 02:38:36,500
unions, generic functions, and overloads.

2596
02:38:37,400 --> 02:38:40,320
Let's start with the simplest technique, the union type.

2597
02:38:41,240 --> 02:38:42,080
In previous section,

2598
02:38:42,080 --> 02:38:43,800
we have gone through a lot of examples

2599
02:38:43,800 --> 02:38:45,320
and exercises on functions

2600
02:38:45,320 --> 02:38:47,920
that are relatively simple like this.

2601
02:38:47,920 --> 02:38:50,120
Parameter types can be uniquely determined,

2602
02:38:50,120 --> 02:38:51,760
return type can be uniquely determined.

2603
02:38:51,760 --> 02:38:53,400
There's no doubt and no ambiguities

2604
02:38:53,400 --> 02:38:55,240
on what this function operates on

2605
02:38:55,240 --> 02:38:57,200
what the function produces as a result.

2606
02:38:58,160 --> 02:38:59,960
But not all functions are written like that

2607
02:39:00,600 --> 02:39:04,160
especially in Python, which is a very flexible language.

2608
02:39:04,160 --> 02:39:06,040
You would run into functions

2609
02:39:06,040 --> 02:39:10,000
that work on more than one data types.

2610
02:39:10,000 --> 02:39:12,360
For example, we have a function here

2611
02:39:12,360 --> 02:39:15,440
that tries to send a piece of data to the network.

2612
02:39:15,440 --> 02:39:18,780
Its behavior depends on the argument data we pass to it.

2613
02:39:18,780 --> 02:39:20,400
If the data contains wrong bytes,

2614
02:39:20,400 --> 02:39:24,400
we forward the data directly to a lower level API.

2615
02:39:26,080 --> 02:39:27,640
But if the data contains string,

2616
02:39:27,640 --> 02:39:29,920
what we do is we encode the string first

2617
02:39:30,920 --> 02:39:32,680
and then send it through.

2618
02:39:32,680 --> 02:39:34,560
Send any other types of data

2619
02:39:34,560 --> 02:39:36,440
will be considered a runtime error.

2620
02:39:37,920 --> 02:39:40,400
Now the question here is what type annotations

2621
02:39:40,400 --> 02:39:43,320
should we give to this argument data here?

2622
02:39:43,320 --> 02:39:45,080
We can't just say it's a bytes,

2623
02:39:45,080 --> 02:39:47,060
we can't just say it's string.

2624
02:39:47,060 --> 02:39:50,920
We need a way of saying that it's either a byte or a string

2625
02:39:50,920 --> 02:39:53,980
and to represent that kind of or relation,

2626
02:39:53,980 --> 02:39:55,180
we need to use a union.

2627
02:39:56,920 --> 02:39:58,300
Here's how you use a union.

2628
02:39:58,300 --> 02:40:01,220
Before Python 3.10, this is what you do.

2629
02:40:01,220 --> 02:40:03,500
Import the name union from the typing module

2630
02:40:03,500 --> 02:40:06,940
and then you use union square bracket

2631
02:40:06,940 --> 02:40:08,820
to enclose all possible types

2632
02:40:08,820 --> 02:40:11,620
and use that as the annotation as we've shown here.

2633
02:40:12,880 --> 02:40:15,140
If you're on the most recent Python release,

2634
02:40:15,140 --> 02:40:17,820
then there's a syntactical shortcut you can take.

2635
02:40:17,820 --> 02:40:19,660
You no longer have to import anything.

2636
02:40:19,660 --> 02:40:22,060
Just use this vertical bar here

2637
02:40:22,060 --> 02:40:23,700
to separate the possibilities.

2638
02:40:23,700 --> 02:40:26,700
So I can just say my data is a string or a byte.

2639
02:40:26,700 --> 02:40:29,660
That means the same thing as union, string or byte.

2640
02:40:29,660 --> 02:40:32,780
It's just more compact and it's shorter.

2641
02:40:33,940 --> 02:40:36,340
Regardless of what syntax you use to annotate the functions

2642
02:40:36,340 --> 02:40:38,540
and the result is gonna be the same.

2643
02:40:38,540 --> 02:40:40,620
The type checker will happily let you invoke the function

2644
02:40:40,620 --> 02:40:43,500
with strings or bytes but will point out anything else.

2645
02:40:44,440 --> 02:40:45,580
They are not accepted.

2646
02:40:49,020 --> 02:40:50,940
This should be pretty straightforward.

2647
02:40:50,940 --> 02:40:53,520
We've seen an example where union types appear

2648
02:40:53,520 --> 02:40:54,660
on the parameters.

2649
02:40:54,660 --> 02:40:55,500
Turns out they could appear

2650
02:40:55,500 --> 02:40:57,540
on some return position as well.

2651
02:40:57,540 --> 02:40:59,380
Let's just do an exercise here

2652
02:40:59,380 --> 02:41:02,460
to see if we can figure out how this works yourself.

2653
02:41:02,460 --> 02:41:05,380
You can find this example in the subdirectory

2654
02:41:05,380 --> 02:41:09,140
topic one slash union slash example zero dot py

2655
02:41:09,140 --> 02:41:13,180
to check locally CD into topic one slash union.

2656
02:41:13,180 --> 02:41:14,700
Everything is up there for you

2657
02:41:14,700 --> 02:41:17,700
so don't worry about running pyenit or anything like that.

2658
02:41:17,700 --> 02:41:20,300
Just go to that directory, run pyre check

2659
02:41:20,300 --> 02:41:24,600
and you're gonna see the type checker outputs.

2660
02:41:25,580 --> 02:41:26,920
Or you can go to this short URL

2661
02:41:26,920 --> 02:41:29,240
to find the pyre playground links

2662
02:41:29,240 --> 02:41:31,120
with the relevant examples on the page.

2663
02:41:31,120 --> 02:41:35,360
It is recommended to right click on the pyre playground links

2664
02:41:35,360 --> 02:41:38,080
and to right click on the playground links

2665
02:41:38,080 --> 02:41:39,240
and open them in the new tab

2666
02:41:39,240 --> 02:41:42,520
and keep a reference to this short page

2667
02:41:42,520 --> 02:41:46,240
because we are gonna revisit that page later

2668
02:41:46,240 --> 02:41:47,480
throughout this section.

2669
02:41:47,480 --> 02:41:50,280
So let's dive into the exercise

2670
02:41:50,280 --> 02:41:52,480
and see if we can figure out how to do this.

2671
02:41:54,600 --> 02:41:59,600
Oh, if you're down, use the green sticky.

2672
02:42:04,080 --> 02:42:05,000
If you're running into problems,

2673
02:42:05,000 --> 02:42:07,400
use red sticky, same protocol as we had before.

2674
02:43:24,600 --> 02:43:25,440
Okay.

2675
02:43:54,600 --> 02:43:55,440
Okay.

2676
02:44:24,600 --> 02:44:25,440
Okay.

2677
02:44:54,720 --> 02:44:57,840
I was just curious, I didn't even know

2678
02:44:57,840 --> 02:44:59,000
you could do this in Python,

2679
02:44:59,000 --> 02:45:00,520
line five, these three dots here.

2680
02:45:00,520 --> 02:45:01,360
Oh.

2681
02:45:01,360 --> 02:45:02,960
Is that equivalent to what, like pass?

2682
02:45:02,960 --> 02:45:05,640
Yeah, it's like pass, don't care.

2683
02:45:05,640 --> 02:45:06,960
Has that always been a thing?

2684
02:45:06,960 --> 02:45:09,440
Yes, the runtime is gonna crash

2685
02:45:09,440 --> 02:45:10,280
if you remove that function.

2686
02:45:10,280 --> 02:45:11,680
Oh, they won't run that?

2687
02:45:11,680 --> 02:45:14,080
It won't run but it's just a way of like,

2688
02:45:14,080 --> 02:45:15,920
for us hacking, quickly hacking examples

2689
02:45:15,920 --> 02:45:17,120
for the type checker too.

2690
02:45:17,360 --> 02:45:18,200
Yeah.

2691
02:45:27,720 --> 02:45:31,000
Okay, are we, I see a lot of green stickies.

2692
02:45:31,000 --> 02:45:34,840
Is there any problems?

2693
02:45:34,840 --> 02:45:36,720
Should we move on or?

2694
02:46:47,120 --> 02:46:47,960
Okay.

2695
02:46:58,040 --> 02:46:59,920
Okay, for the sake of time,

2696
02:46:59,920 --> 02:47:01,880
I think we need to move on.

2697
02:47:03,760 --> 02:47:06,520
This should be a fairly straightforward example.

2698
02:47:06,520 --> 02:47:11,520
This is, the return type can either be a string or a bytes.

2699
02:47:12,520 --> 02:47:14,520
The parameter type can either be a string

2700
02:47:14,520 --> 02:47:15,520
or it can be none.

2701
02:47:17,280 --> 02:47:18,440
It's also fine if it's.

2702
02:47:20,560 --> 02:47:23,320
You can do optional string earlier in the talk.

2703
02:47:23,320 --> 02:47:25,280
It means the same thing as string or none.

2704
02:47:25,280 --> 02:47:28,240
Like these two function signatures

2705
02:47:28,240 --> 02:47:30,000
are just equivalent to each other.

2706
02:47:31,040 --> 02:47:32,960
Any questions on this exercise?

2707
02:47:36,120 --> 02:47:39,280
A ridiculous question but if you're doing

2708
02:47:39,280 --> 02:47:41,400
union string or that,

2709
02:47:42,680 --> 02:47:44,280
is just the order there matter?

2710
02:47:44,280 --> 02:47:46,120
Like, you know, from like a,

2711
02:47:46,120 --> 02:47:47,920
just from a user's development,

2712
02:47:47,920 --> 02:47:49,840
it's a ridiculous question.

2713
02:47:49,840 --> 02:47:51,800
Should I say norm, not for a string,

2714
02:47:51,800 --> 02:47:52,640
or a string or not?

2715
02:47:52,640 --> 02:47:54,440
Is it whichever is most much more important

2716
02:47:54,440 --> 02:47:55,960
than the left one?

2717
02:47:55,960 --> 02:47:57,200
I think it's a most matter.

2718
02:47:57,200 --> 02:47:59,920
The question is like, does the order matters

2719
02:47:59,920 --> 02:48:00,800
for the annotation?

2720
02:48:00,800 --> 02:48:02,480
The answer is it doesn't.

2721
02:48:02,480 --> 02:48:06,080
You can just use whatever orders that you prefer.

2722
02:48:07,480 --> 02:48:12,480
I think or none is like kind of a common pattern you see.

2723
02:48:13,280 --> 02:48:16,520
So I, but really it depends on like

2724
02:48:16,520 --> 02:48:18,120
your personal preference,

2725
02:48:18,120 --> 02:48:20,000
what the rest of the team does.

2726
02:48:20,000 --> 02:48:21,840
It's mostly a cosmetic concern.

2727
02:48:21,840 --> 02:48:23,440
It doesn't really affect how the type checker

2728
02:48:23,440 --> 02:48:25,200
consumes this annotation.

2729
02:48:28,440 --> 02:48:29,560
So unions are great.

2730
02:48:29,560 --> 02:48:31,440
It allows you function to handle values

2731
02:48:31,440 --> 02:48:35,200
of many different types in a very simple way.

2732
02:48:35,200 --> 02:48:37,240
But I also want to point out a caveat,

2733
02:48:37,240 --> 02:48:39,240
which is not so obvious as first glance.

2734
02:48:39,240 --> 02:48:42,000
You might have already noticed this in your exercise.

2735
02:48:43,000 --> 02:48:45,200
The caveat is that unions,

2736
02:48:45,200 --> 02:48:47,800
this is consumer to do split.

2737
02:48:47,800 --> 02:48:50,920
Remember this sample that we had earlier?

2738
02:48:51,960 --> 02:48:53,480
Here's on the parameter type.

2739
02:48:53,480 --> 02:48:54,840
And inside the function body

2740
02:48:54,840 --> 02:48:57,720
where we want to consume that parameter,

2741
02:48:57,720 --> 02:48:58,960
what do we do here?

2742
02:48:58,960 --> 02:49:02,680
We use instance check to branch out the logic

2743
02:49:02,680 --> 02:49:04,600
in the case by case basis.

2744
02:49:04,600 --> 02:49:06,520
This is required for safety reasons.

2745
02:49:06,520 --> 02:49:09,240
The encode method actually don't exist

2746
02:49:09,240 --> 02:49:11,160
if your data is a byte.

2747
02:49:11,160 --> 02:49:13,880
It only exists if your data is a string.

2748
02:49:13,880 --> 02:49:17,360
So it is not safe to invoke the encode method always.

2749
02:49:17,360 --> 02:49:20,640
So we need to do the case split

2750
02:49:20,640 --> 02:49:24,040
to make this thing, make the entire thing work.

2751
02:49:24,040 --> 02:49:26,640
The same issue of union appear on some return type.

2752
02:49:26,640 --> 02:49:28,480
If your function returns a union,

2753
02:49:28,480 --> 02:49:30,640
then every single caller of your function

2754
02:49:30,640 --> 02:49:32,240
that consumes your return value

2755
02:49:32,240 --> 02:49:34,240
must also first check exactly

2756
02:49:34,240 --> 02:49:37,800
which branch of a union the value belongs to.

2757
02:49:37,800 --> 02:49:40,600
It is safe to pass data to a downstream function

2758
02:49:40,680 --> 02:49:43,080
that exposes a string only if we're sure

2759
02:49:43,080 --> 02:49:46,640
that this data is actually a string.

2760
02:49:46,640 --> 02:49:48,000
Same for bytes.

2761
02:49:48,000 --> 02:49:49,800
But without doing this case split,

2762
02:49:49,800 --> 02:49:51,680
we can't say for sure which is which.

2763
02:49:51,680 --> 02:49:54,560
And as the function only hands us a union back.

2764
02:49:54,560 --> 02:49:58,920
So this often makes your function kind of awkward to use

2765
02:49:58,920 --> 02:50:02,520
because of the additional border plate

2766
02:50:02,520 --> 02:50:06,320
that you have to write for whenever you want to consume it.

2767
02:50:06,320 --> 02:50:09,600
But remember our intention when writing this function.

2768
02:50:09,600 --> 02:50:13,240
If the encode, then we don't do any decoding

2769
02:50:13,240 --> 02:50:14,440
return of bytes directly.

2770
02:50:14,440 --> 02:50:16,440
But if the encoding is not known,

2771
02:50:16,440 --> 02:50:17,840
we decode the byte into a string.

2772
02:50:17,840 --> 02:50:19,880
So in this particular case,

2773
02:50:19,880 --> 02:50:23,000
the parameter type and the return type are correlated.

2774
02:50:23,000 --> 02:50:25,480
We can sort of predict what the return type would be

2775
02:50:25,480 --> 02:50:27,720
by just looking at the parameter.

2776
02:50:27,720 --> 02:50:30,280
This kind of correlation is unfortunately

2777
02:50:30,280 --> 02:50:32,960
not expressible with union types.

2778
02:50:32,960 --> 02:50:36,200
We'll talk about what to do in next.

2779
02:50:36,200 --> 02:50:38,080
But before we go into the next section,

2780
02:50:38,160 --> 02:50:40,400
any particular question about union types.

2781
02:50:45,400 --> 02:50:46,240
Cool.

2782
02:50:47,880 --> 02:50:49,320
Onto the next topic.

2783
02:50:49,320 --> 02:50:51,280
In this section, we'll talk about a technique

2784
02:50:51,280 --> 02:50:54,360
that allow us to establish some simple correlation

2785
02:50:54,360 --> 02:50:56,240
between parameters and return.

2786
02:50:58,640 --> 02:51:00,160
Let's take a look at this example.

2787
02:51:00,160 --> 02:51:03,560
We have a function here called process data.

2788
02:51:03,560 --> 02:51:04,760
To make things simple,

2789
02:51:04,760 --> 02:51:07,080
let's assume that all the processing we do here

2790
02:51:07,080 --> 02:51:08,840
is just to log the data somewhere

2791
02:51:08,840 --> 02:51:10,880
and return the data intact.

2792
02:51:10,880 --> 02:51:12,920
So what we expect here is that

2793
02:51:12,920 --> 02:51:14,880
when you pass this function a string,

2794
02:51:14,880 --> 02:51:16,000
we get a string back.

2795
02:51:16,000 --> 02:51:18,040
If you pass it a bytes, we get a bytes back.

2796
02:51:18,040 --> 02:51:19,480
Pass it an int, we get an int back.

2797
02:51:19,480 --> 02:51:21,840
Basically, whatever we pass into it,

2798
02:51:21,840 --> 02:51:24,440
we get exactly the same thing back.

2799
02:51:24,440 --> 02:51:26,040
How do we type annotate this function?

2800
02:51:26,040 --> 02:51:28,880
Well, obviously union is not an answer here.

2801
02:51:28,880 --> 02:51:31,200
Say if we annotate this function with union,

2802
02:51:32,000 --> 02:51:34,760
not only does it suffer the same issue we mentioned before,

2803
02:51:34,760 --> 02:51:37,000
that is it can't really detect the correlation

2804
02:51:37,920 --> 02:51:39,400
and will always give us a union back,

2805
02:51:39,400 --> 02:51:42,560
which needs to be case split further downstream.

2806
02:51:42,560 --> 02:51:45,080
The other issue is that this type annotation

2807
02:51:45,080 --> 02:51:46,760
only works with these three types.

2808
02:51:46,760 --> 02:51:48,280
It's not super extensible.

2809
02:51:48,280 --> 02:51:52,700
If I say define a custom class myself and pass to it,

2810
02:51:52,700 --> 02:51:54,400
the type checker is gonna complain here.

2811
02:51:54,400 --> 02:51:55,880
This is definitely not our intention.

2812
02:51:55,880 --> 02:51:58,880
This function should be whatever we pass into it.

2813
02:52:00,400 --> 02:52:01,840
Another thing you might be thinking is

2814
02:52:01,840 --> 02:52:03,600
how about using the any type like this?

2815
02:52:03,600 --> 02:52:05,800
Well, the type checker definitely won't complain

2816
02:52:05,800 --> 02:52:08,840
no matter what you pass the function if any is involved.

2817
02:52:08,840 --> 02:52:11,760
The issue with this approach is that it completely destroys

2818
02:52:11,760 --> 02:52:14,520
the type info we have on the return type

2819
02:52:14,520 --> 02:52:16,240
because all of them are gonna be considered

2820
02:52:16,240 --> 02:52:17,680
to have the any type.

2821
02:52:17,680 --> 02:52:19,680
For example, if you try to invoke method

2822
02:52:19,680 --> 02:52:22,320
on the return value and you made a typo,

2823
02:52:22,320 --> 02:52:25,480
the type checker won't be able to help you catch this issue

2824
02:52:25,480 --> 02:52:27,720
because, well, you have any there.

2825
02:52:27,720 --> 02:52:30,720
We don't know exactly what methods are defined on there.

2826
02:52:32,660 --> 02:52:35,640
Now, let's take a step back and look at this function again.

2827
02:52:35,640 --> 02:52:38,080
Observe the properties of this function.

2828
02:52:38,080 --> 02:52:41,280
First, the return types and parameter types are correlated.

2829
02:52:41,280 --> 02:52:44,860
In fact, they are exactly the same in this particular case.

2830
02:52:46,440 --> 02:52:49,240
Second, the function body looks the same

2831
02:52:49,240 --> 02:52:52,000
regardless of what the parameter type.

2832
02:52:52,000 --> 02:52:55,200
When your function satisfy both properties,

2833
02:52:55,200 --> 02:52:56,940
that would give you a strong hint

2834
02:52:56,940 --> 02:52:59,600
that generics needs to be involved.

2835
02:52:59,600 --> 02:53:02,120
Here's how you do generics.

2836
02:53:02,120 --> 02:53:05,080
First, import this name called type var

2837
02:53:05,080 --> 02:53:06,640
from the typing module.

2838
02:53:06,640 --> 02:53:09,160
And then define a type var on the top level

2839
02:53:09,160 --> 02:53:10,800
of your source file.

2840
02:53:12,360 --> 02:53:15,920
There's one string parameter to this type var constructor.

2841
02:53:15,920 --> 02:53:19,300
That string is for runtime tooling only.

2842
02:53:19,300 --> 02:53:21,480
It's not relevant to the type checker,

2843
02:53:21,480 --> 02:53:23,320
but the convention there is that you should use

2844
02:53:23,320 --> 02:53:28,320
the same name in the string as the variable itself.

2845
02:53:28,920 --> 02:53:30,780
In this case, you should just use duty

2846
02:53:30,780 --> 02:53:32,280
if your variable is called t.

2847
02:53:33,280 --> 02:53:37,200
Now annotate your function we just defined.

2848
02:53:37,200 --> 02:53:40,880
Here, I'm using t as both the parameter and the annotation.

2849
02:53:40,880 --> 02:53:44,440
This means that this function takes any type as an input

2850
02:53:44,440 --> 02:53:46,600
and it will give us the same type back.

2851
02:53:48,540 --> 02:53:51,400
If you annotate it like this, they are guaranteed,

2852
02:53:51,400 --> 02:53:53,440
then like any of all of these things works.

2853
02:53:53,440 --> 02:53:55,040
If you give it a string, we get a string,

2854
02:53:55,040 --> 02:53:57,320
give it a byte, we get a byte.

2855
02:53:57,320 --> 02:53:59,360
If you have a custom class, no problem,

2856
02:53:59,360 --> 02:54:02,560
we're gonna get that exact thing back again.

2857
02:54:05,040 --> 02:54:08,700
So that is how generics and type words can be used.

2858
02:54:09,560 --> 02:54:14,000
Let's see if we can put this into practice.

2859
02:54:14,000 --> 02:54:16,900
Let's do some exercises this time.

2860
02:54:16,900 --> 02:54:20,240
Let's do both of these examples and use the green sticky

2861
02:54:20,240 --> 02:54:22,820
after you finish both of them.

2862
02:54:22,820 --> 02:54:24,680
If you're doing the exercise locally,

2863
02:54:24,680 --> 02:54:28,120
make sure you change your current working directory

2864
02:54:28,120 --> 02:54:30,660
to type-var.

2865
02:54:30,660 --> 02:54:32,760
If you're doing exercises online,

2866
02:54:32,760 --> 02:54:37,200
make sure to open the prior sandbox links in the new tab.

2867
02:54:37,200 --> 02:54:40,000
And yeah, let's work on this.

2868
02:55:28,120 --> 02:55:30,120
So, it's not like that.

2869
02:55:30,120 --> 02:55:32,120
It's not like that.

2870
02:55:32,120 --> 02:55:36,120
Yeah, so every reference has been the same signature.

2871
02:55:36,120 --> 02:55:38,120
It is down to your name.

2872
02:55:38,120 --> 02:55:41,120
And then you might have other.

2873
02:55:41,120 --> 02:55:44,120
Which is, however, you can see all the things

2874
02:55:44,120 --> 02:55:46,120
that are not probably gonna happen.

2875
02:55:46,120 --> 02:55:48,120
And then it's like this.

2876
02:55:48,120 --> 02:55:50,120
And then it's like this.

2877
02:55:50,120 --> 02:55:53,120
And then a lot of times, like you're doing it.

2878
02:55:53,120 --> 02:55:56,120
When you're doing it, you're gonna get it.

2879
02:55:56,120 --> 02:55:59,120
So, it's important to get all the attention

2880
02:55:59,120 --> 02:56:01,120
that you've got.

2881
02:56:01,120 --> 02:56:06,120
We don't get it in every day.

2882
02:56:06,120 --> 02:56:08,120
I've heard people say that.

2883
02:56:08,120 --> 02:56:12,120
But is this a resumption for that task?

2884
02:56:15,120 --> 02:56:17,120
So, it's a question.

2885
02:56:17,120 --> 02:56:19,120
Yeah, it is.

2886
02:56:19,120 --> 02:56:21,120
It's kind of like the age distinction.

2887
02:56:21,120 --> 02:56:23,120
Yeah, it's hard to get the attention.

2888
02:56:23,120 --> 02:56:25,120
Okay.

2889
02:56:53,120 --> 02:56:55,120
So, it's a question.

2890
02:56:55,120 --> 02:56:57,120
So, it's a question.

2891
02:56:57,120 --> 02:56:59,120
So, it's a question.

2892
02:56:59,120 --> 02:57:01,120
So, it's a question.

2893
02:57:01,120 --> 02:57:03,120
So, it's a question.

2894
02:57:03,120 --> 02:57:05,120
So, it's a question.

2895
02:57:05,120 --> 02:57:07,120
So, it's a question.

2896
02:57:07,120 --> 02:57:09,120
So, it's a question.

2897
02:57:09,120 --> 02:57:11,120
So, it's a question.

2898
02:57:11,120 --> 02:57:13,120
So, it's a question.

2899
02:57:13,120 --> 02:57:15,120
So, it's a question.

2900
02:57:15,120 --> 02:57:17,120
So, it's a question.

2901
02:57:17,120 --> 02:57:19,120
So, it's a question.

2902
02:57:19,120 --> 02:57:21,120
So, it's a question.

2903
02:57:21,120 --> 02:57:23,120
So, it's a question.

2904
02:57:23,120 --> 02:57:25,120
So, it's a question.

2905
02:57:25,120 --> 02:57:27,120
So, it's a question.

2906
02:57:27,120 --> 02:57:29,120
So, it's a question.

2907
02:57:29,120 --> 02:57:31,120
So, it's a question.

2908
02:57:31,120 --> 02:57:33,120
So, it's a question.

2909
02:57:33,120 --> 02:57:35,120
So, it's a question.

2910
02:57:35,120 --> 02:57:37,120
So, it's a question.

2911
02:57:37,120 --> 02:57:39,120
So, it's a question.

2912
02:57:39,120 --> 02:57:41,120
So, it's a question.

2913
02:57:41,120 --> 02:57:43,120
So, it's a question.

2914
02:57:43,120 --> 02:57:45,120
So, it's a question.

2915
02:57:45,120 --> 02:57:47,120
So, it's a question.

2916
02:57:47,120 --> 02:57:49,120
So, it's a question.

2917
02:57:49,120 --> 02:57:51,120
So, it's a question.

2918
02:57:51,120 --> 02:57:53,120
So, it's a question.

2919
02:57:53,120 --> 02:57:55,120
So, it's a question.

2920
02:57:55,120 --> 02:57:57,120
So, it's a question.

2921
02:57:57,120 --> 02:57:59,120
So, it's a question.

2922
02:57:59,120 --> 02:58:01,120
So, it's a question.

2923
02:58:01,120 --> 02:58:03,120
So, it's a question.

2924
02:58:03,120 --> 02:58:05,120
So, it's a question.

2925
02:58:05,120 --> 02:58:07,120
So, it's a question.

2926
02:58:07,120 --> 02:58:09,120
So, it's a question.

2927
02:58:09,120 --> 02:58:11,120
So, it's a question.

2928
02:58:11,120 --> 02:58:13,120
So, it's a question.

2929
02:58:13,120 --> 02:58:15,120
So, it's a question.

2930
02:58:15,120 --> 02:58:17,120
So, it's a question.

2931
02:58:17,120 --> 02:58:19,120
.

2932
02:58:31,120 --> 02:58:33,120
Are you guys doing okay?

2933
02:58:33,120 --> 02:58:35,120
Do you need any help?

2934
02:58:35,120 --> 02:58:37,120
Nope?

2935
02:58:39,120 --> 02:58:41,120
Any issue?

2936
02:58:41,120 --> 02:58:43,120
Oh, I'm really screwed at this one.

2937
02:58:43,120 --> 02:58:45,120
Oh, okay.

2938
02:58:45,120 --> 02:58:49,120
Yeah, the issue is that you're using the same var here, right?

2939
02:58:49,120 --> 02:58:53,120
This means that the type of X and Ys are the same.

2940
02:58:53,120 --> 02:58:55,120
Oh, so you have to have a separate...

2941
02:58:55,120 --> 02:58:57,120
Yes.

2942
02:58:57,120 --> 02:58:59,120
And the return here is also not a var.

2943
02:58:59,120 --> 02:59:01,120
It's a two-fold, right?

2944
02:59:01,120 --> 02:59:03,120
Okay.

2945
02:59:15,120 --> 02:59:17,120
.

2946
02:59:17,120 --> 02:59:19,120
.

2947
02:59:19,120 --> 02:59:21,120
.

2948
02:59:21,120 --> 02:59:23,120
.

2949
02:59:23,120 --> 02:59:25,120
.

2950
02:59:25,120 --> 02:59:27,120
.

2951
02:59:27,120 --> 02:59:29,120
.

2952
02:59:29,120 --> 02:59:31,120
.

2953
02:59:31,120 --> 02:59:33,120
.

2954
02:59:33,120 --> 02:59:35,120
.

2955
02:59:35,120 --> 02:59:37,120
.

2956
02:59:37,120 --> 02:59:39,120
.

2957
02:59:39,120 --> 02:59:41,120
.

2958
02:59:41,120 --> 02:59:43,120
.

2959
02:59:43,120 --> 02:59:45,120
.

2960
02:59:45,120 --> 02:59:47,120
.

2961
02:59:47,120 --> 02:59:49,120
.

2962
02:59:49,120 --> 02:59:51,120
.

2963
02:59:51,120 --> 02:59:53,120
.

2964
02:59:53,120 --> 02:59:55,120
.

2965
02:59:55,120 --> 02:59:57,120
.

2966
02:59:57,120 --> 02:59:59,120
.

2967
02:59:59,120 --> 03:00:01,120
.

2968
03:00:01,120 --> 03:00:03,120
.

2969
03:00:03,120 --> 03:00:05,120
.

2970
03:00:05,120 --> 03:00:07,120
.

2971
03:00:07,120 --> 03:00:09,120
.

2972
03:00:09,120 --> 03:00:11,120
.

2973
03:00:11,120 --> 03:00:13,120
.

2974
03:00:13,120 --> 03:00:15,120
.

2975
03:00:15,120 --> 03:00:17,120
.

2976
03:00:17,120 --> 03:00:19,120
.

2977
03:00:19,120 --> 03:00:21,120
.

2978
03:00:21,120 --> 03:00:23,120
.

2979
03:00:23,120 --> 03:00:25,120
.

2980
03:00:25,120 --> 03:00:27,120
.

2981
03:00:27,120 --> 03:00:29,120
.

2982
03:00:29,120 --> 03:00:31,120
.

2983
03:00:31,120 --> 03:00:33,120
.

2984
03:00:33,120 --> 03:00:35,120
.

2985
03:00:35,120 --> 03:00:37,120
.

2986
03:00:37,120 --> 03:00:39,120
.

2987
03:00:39,120 --> 03:00:41,120
.

2988
03:00:41,120 --> 03:00:43,120
.

2989
03:00:43,120 --> 03:00:45,120
.

2990
03:00:45,120 --> 03:00:47,120
.

2991
03:00:47,120 --> 03:00:49,120
.

2992
03:00:49,120 --> 03:00:51,120
.

2993
03:00:51,120 --> 03:00:53,120
.

2994
03:00:53,120 --> 03:00:55,120
.

2995
03:00:55,120 --> 03:00:57,120
.

2996
03:00:57,120 --> 03:00:59,120
.

2997
03:00:59,120 --> 03:01:01,120
.

2998
03:01:01,120 --> 03:01:03,120
.

2999
03:01:03,120 --> 03:01:05,120
.

3000
03:01:05,120 --> 03:01:07,120
.

3001
03:01:07,120 --> 03:01:09,120
.

3002
03:01:09,120 --> 03:01:11,120
.

3003
03:01:11,120 --> 03:01:13,120
.

3004
03:01:13,120 --> 03:01:15,120
.

3005
03:01:15,120 --> 03:01:17,120
.

3006
03:01:17,120 --> 03:01:19,120
.

3007
03:01:19,120 --> 03:01:21,120
.

3008
03:01:21,120 --> 03:01:23,120
.

3009
03:01:23,120 --> 03:01:25,120
.

3010
03:01:25,120 --> 03:01:27,120
.

3011
03:01:27,120 --> 03:01:29,120
.

3012
03:01:29,120 --> 03:01:31,120
.

3013
03:01:31,120 --> 03:01:33,120
.

3014
03:01:33,120 --> 03:01:35,120
.

3015
03:01:35,120 --> 03:01:37,120
.

3016
03:01:37,120 --> 03:01:39,120
.

3017
03:01:39,120 --> 03:01:41,120
.

3018
03:01:41,120 --> 03:01:43,120
.

3019
03:01:43,120 --> 03:01:45,120
.

3020
03:01:45,120 --> 03:01:47,120
.

3021
03:01:47,120 --> 03:01:49,120
.

3022
03:01:49,120 --> 03:01:51,120
.

3023
03:01:51,120 --> 03:01:53,120
.

3024
03:01:53,120 --> 03:01:55,120
.

3025
03:01:55,120 --> 03:01:57,120
.

3026
03:01:57,120 --> 03:01:59,120
.

3027
03:01:59,120 --> 03:02:01,120
.

3028
03:02:01,120 --> 03:02:03,120
.

3029
03:02:03,120 --> 03:02:05,120
.

3030
03:02:05,120 --> 03:02:07,120
.

3031
03:02:07,120 --> 03:02:09,120
.

3032
03:02:09,120 --> 03:02:11,120
.

3033
03:02:11,120 --> 03:02:13,120
.

3034
03:02:13,120 --> 03:02:15,120
.

3035
03:02:15,120 --> 03:02:17,120
.

3036
03:02:17,120 --> 03:02:19,120
.

3037
03:02:19,120 --> 03:02:21,120
.

3038
03:02:21,120 --> 03:02:23,120
.

3039
03:02:23,120 --> 03:02:25,120
.

3040
03:02:25,120 --> 03:02:27,120
.

3041
03:02:27,120 --> 03:02:29,120
.

3042
03:02:29,120 --> 03:02:31,120
.

3043
03:02:31,120 --> 03:02:33,120
.

3044
03:02:33,120 --> 03:02:35,120
.

3045
03:02:35,120 --> 03:02:37,120
.

3046
03:02:37,120 --> 03:02:39,120
.

3047
03:02:39,120 --> 03:02:41,120
.

3048
03:02:41,120 --> 03:02:43,120
.

3049
03:02:43,120 --> 03:02:45,120
.

3050
03:02:45,120 --> 03:02:47,120
.

3051
03:02:47,120 --> 03:02:49,120
.

3052
03:02:49,120 --> 03:02:51,120
.

3053
03:02:51,120 --> 03:02:53,120
.

3054
03:02:53,120 --> 03:02:55,120
.

3055
03:02:55,120 --> 03:02:57,120
.

3056
03:02:57,120 --> 03:02:59,120
.

3057
03:02:59,120 --> 03:03:01,120
.

3058
03:03:01,120 --> 03:03:03,120
.

3059
03:03:03,120 --> 03:03:05,120
.

3060
03:03:05,120 --> 03:03:07,120
.

3061
03:03:07,120 --> 03:03:09,120
.

3062
03:03:09,120 --> 03:03:11,120
.

3063
03:03:11,120 --> 03:03:13,120
.

3064
03:03:13,120 --> 03:03:15,120
.

3065
03:03:15,120 --> 03:03:17,120
.

3066
03:03:17,120 --> 03:03:19,120
.

3067
03:03:19,120 --> 03:03:21,120
.

3068
03:03:21,120 --> 03:03:23,120
.

3069
03:03:23,120 --> 03:03:25,120
.

3070
03:03:25,120 --> 03:03:27,120
.

3071
03:03:27,120 --> 03:03:29,120
.

3072
03:03:29,120 --> 03:03:31,120
.

3073
03:03:31,120 --> 03:03:33,120
.

3074
03:03:33,120 --> 03:03:35,120
.

3075
03:03:35,120 --> 03:03:37,120
.

3076
03:03:37,120 --> 03:03:39,120
.

3077
03:03:39,120 --> 03:03:41,120
.

3078
03:03:41,120 --> 03:03:43,120
.

3079
03:03:43,120 --> 03:03:45,120
.

3080
03:03:45,120 --> 03:03:47,120
.

3081
03:03:47,120 --> 03:03:49,120
.

3082
03:03:49,120 --> 03:03:51,120
.

3083
03:03:51,120 --> 03:03:53,120
.

3084
03:03:53,120 --> 03:03:55,120
.

3085
03:03:55,120 --> 03:03:57,120
.

3086
03:03:57,120 --> 03:03:59,120
.

3087
03:03:59,120 --> 03:04:01,120
.

3088
03:04:01,120 --> 03:04:03,120
.

3089
03:04:03,120 --> 03:04:05,120
.

3090
03:04:05,120 --> 03:04:07,120
.

3091
03:04:07,120 --> 03:04:09,120
.

3092
03:04:09,120 --> 03:04:11,120
.

3093
03:04:11,120 --> 03:04:13,120
.

3094
03:04:13,120 --> 03:04:15,120
.

3095
03:04:15,120 --> 03:04:17,120
.

3096
03:04:17,120 --> 03:04:19,120
.

3097
03:04:19,120 --> 03:04:21,120
.

3098
03:04:21,120 --> 03:04:23,120
.

3099
03:04:23,120 --> 03:04:25,120
.

3100
03:04:25,120 --> 03:04:27,120
.

3101
03:04:27,120 --> 03:04:29,120
.

3102
03:04:29,120 --> 03:04:31,120
.

3103
03:04:31,120 --> 03:04:33,120
.

3104
03:04:33,120 --> 03:04:35,120
.

3105
03:04:35,120 --> 03:04:37,120
.

3106
03:04:37,120 --> 03:04:39,120
.

3107
03:04:39,120 --> 03:04:41,120
.

3108
03:04:41,120 --> 03:04:43,120
.

3109
03:04:43,120 --> 03:04:45,120
.

3110
03:04:45,120 --> 03:04:47,120
.

3111
03:04:47,120 --> 03:04:49,120
.

3112
03:04:49,120 --> 03:04:51,120
.

3113
03:04:51,120 --> 03:04:53,120
.

3114
03:04:53,120 --> 03:04:55,120
.

3115
03:04:55,120 --> 03:04:57,120
.

3116
03:04:57,120 --> 03:04:59,120
.

3117
03:04:59,120 --> 03:05:01,120
.

3118
03:05:01,120 --> 03:05:03,120
.

3119
03:05:03,120 --> 03:05:05,120
.

3120
03:05:05,120 --> 03:05:07,120
.

3121
03:05:07,120 --> 03:05:09,120
.

3122
03:05:09,120 --> 03:05:11,120
.

3123
03:05:11,120 --> 03:05:13,120
.

3124
03:05:13,120 --> 03:05:15,120
.

3125
03:05:15,120 --> 03:05:17,120
.

3126
03:05:17,120 --> 03:05:19,120
.

3127
03:05:19,120 --> 03:05:21,120
.

3128
03:05:21,120 --> 03:05:23,120
.

3129
03:05:23,120 --> 03:05:25,120
.

3130
03:05:25,120 --> 03:05:27,120
.

3131
03:05:27,120 --> 03:05:29,120
.

3132
03:05:29,120 --> 03:05:31,120
.

3133
03:05:31,120 --> 03:05:33,120
.

3134
03:05:33,120 --> 03:05:35,120
.

3135
03:05:35,120 --> 03:05:37,120
.

3136
03:05:37,120 --> 03:05:39,120
.

3137
03:05:39,120 --> 03:05:41,120
.

3138
03:05:41,120 --> 03:05:43,120
.

3139
03:05:43,120 --> 03:05:45,120
.

3140
03:05:45,120 --> 03:05:47,120
.

3141
03:05:47,120 --> 03:05:49,120
.

3142
03:05:49,120 --> 03:05:51,120
.

3143
03:05:51,120 --> 03:05:53,120
.

3144
03:05:53,120 --> 03:05:55,120
.

3145
03:05:55,120 --> 03:05:57,120
.

3146
03:05:57,120 --> 03:05:59,120
.

3147
03:05:59,120 --> 03:06:01,120
.

3148
03:06:01,120 --> 03:06:03,120
.

3149
03:06:03,120 --> 03:06:05,120
.

3150
03:06:05,120 --> 03:06:07,120
.

3151
03:06:07,120 --> 03:06:09,120
.

3152
03:06:09,120 --> 03:06:11,120
.

3153
03:06:11,120 --> 03:06:13,120
.

3154
03:06:13,120 --> 03:06:15,120
.

3155
03:06:15,120 --> 03:06:17,120
.

3156
03:06:17,120 --> 03:06:19,120
.

3157
03:06:19,120 --> 03:06:21,120
.

3158
03:06:21,120 --> 03:06:23,120
.

3159
03:06:23,120 --> 03:06:25,120
.

3160
03:06:25,120 --> 03:06:27,120
.

3161
03:06:27,120 --> 03:06:29,120
.

3162
03:06:29,120 --> 03:06:31,120
.

3163
03:06:31,120 --> 03:06:33,120
.

3164
03:06:33,120 --> 03:06:35,120
.

3165
03:06:35,120 --> 03:06:37,120
.

3166
03:06:37,120 --> 03:06:39,120
.

3167
03:06:39,120 --> 03:06:41,120
.

3168
03:06:41,120 --> 03:06:43,120
.

3169
03:06:43,120 --> 03:06:45,120
.

3170
03:06:45,120 --> 03:06:47,120
.

3171
03:06:47,120 --> 03:06:49,120
.

3172
03:06:49,120 --> 03:06:51,120
.

3173
03:06:51,120 --> 03:06:53,120
.

3174
03:06:53,120 --> 03:06:55,120
.

3175
03:06:55,120 --> 03:06:57,120
.

3176
03:06:57,120 --> 03:06:59,120
.

3177
03:06:59,120 --> 03:07:01,120
.

3178
03:07:01,120 --> 03:07:03,120
.

3179
03:07:03,120 --> 03:07:05,120
.

3180
03:07:05,120 --> 03:07:07,120
.

3181
03:07:07,120 --> 03:07:09,120
.

3182
03:07:09,120 --> 03:07:11,120
.

3183
03:07:11,120 --> 03:07:13,120
.

3184
03:07:13,120 --> 03:07:15,120
.

3185
03:07:15,120 --> 03:07:17,120
.

3186
03:07:17,120 --> 03:07:19,120
.

3187
03:07:19,120 --> 03:07:21,120
.

3188
03:07:21,120 --> 03:07:23,120
.

3189
03:07:23,120 --> 03:07:25,120
.

3190
03:07:25,120 --> 03:07:27,120
.

3191
03:07:27,120 --> 03:07:29,120
.

3192
03:07:29,120 --> 03:07:31,120
.

3193
03:07:31,120 --> 03:07:33,120
.

3194
03:07:33,120 --> 03:07:35,120
.

3195
03:07:35,120 --> 03:07:37,120
.

3196
03:07:37,120 --> 03:07:39,120
.

3197
03:07:39,120 --> 03:07:41,120
.

3198
03:07:41,120 --> 03:07:43,120
.

3199
03:07:43,120 --> 03:07:45,120
.

3200
03:07:45,120 --> 03:07:47,120
.

3201
03:07:47,120 --> 03:07:49,120
.

3202
03:07:49,120 --> 03:07:51,120
.

3203
03:07:51,120 --> 03:07:53,120
.

3204
03:07:53,120 --> 03:07:55,120
.

3205
03:07:55,120 --> 03:07:57,120
.

3206
03:07:57,120 --> 03:07:59,120
.

3207
03:07:59,120 --> 03:08:01,120
.

3208
03:08:01,120 --> 03:08:03,120
.

3209
03:08:03,120 --> 03:08:05,120
.

3210
03:08:05,120 --> 03:08:07,120
.

3211
03:08:07,120 --> 03:08:09,120
.

3212
03:08:09,120 --> 03:08:11,120
.

3213
03:08:11,120 --> 03:08:13,120
.

3214
03:08:13,120 --> 03:08:15,120
.

3215
03:08:15,120 --> 03:08:17,120
.

3216
03:08:17,120 --> 03:08:19,120
.

3217
03:08:19,120 --> 03:08:21,120
.

3218
03:08:21,120 --> 03:08:23,120
.

3219
03:08:23,120 --> 03:08:25,120
.

3220
03:08:25,120 --> 03:08:27,120
.

3221
03:08:27,120 --> 03:08:29,120
.

3222
03:08:29,120 --> 03:08:31,120
.

3223
03:08:31,120 --> 03:08:33,120
.

3224
03:08:33,120 --> 03:08:35,120
.

3225
03:08:35,120 --> 03:08:37,120
.

3226
03:08:37,120 --> 03:08:39,120
.

3227
03:08:39,120 --> 03:08:41,120
.

3228
03:08:41,120 --> 03:08:43,120
.

3229
03:08:43,120 --> 03:08:45,120
.

3230
03:08:45,120 --> 03:08:47,120
.

3231
03:08:47,120 --> 03:08:49,120
.

3232
03:08:49,120 --> 03:08:51,120
.

3233
03:08:51,120 --> 03:08:53,120
.

3234
03:08:53,120 --> 03:08:55,120
.

3235
03:08:55,120 --> 03:08:57,120
.

3236
03:08:57,120 --> 03:08:59,120
.

3237
03:08:59,120 --> 03:09:01,120
.

3238
03:09:01,120 --> 03:09:03,120
.

3239
03:09:03,120 --> 03:09:05,120
.

3240
03:09:05,120 --> 03:09:07,120
.

3241
03:09:07,120 --> 03:09:09,120
.

3242
03:09:09,120 --> 03:09:11,120
.

3243
03:09:11,120 --> 03:09:13,120
.

3244
03:09:13,120 --> 03:09:15,120
.

3245
03:09:15,120 --> 03:09:17,120
.

3246
03:09:17,120 --> 03:09:19,120
.

3247
03:09:19,120 --> 03:09:21,120
.

3248
03:09:21,120 --> 03:09:23,120
.

3249
03:09:23,120 --> 03:09:25,120
.

3250
03:09:25,120 --> 03:09:27,120
.

3251
03:09:27,120 --> 03:09:29,120
.

3252
03:09:29,120 --> 03:09:31,120
.

3253
03:09:31,120 --> 03:09:33,120
.

3254
03:09:33,120 --> 03:09:35,120
.

3255
03:09:35,120 --> 03:09:37,120
.

3256
03:09:37,120 --> 03:09:39,120
.

3257
03:09:39,120 --> 03:09:41,120
.

3258
03:09:41,120 --> 03:09:43,120
.

3259
03:09:43,120 --> 03:09:45,120
.

3260
03:09:45,120 --> 03:09:47,120
.

3261
03:09:47,120 --> 03:09:49,120
.

3262
03:09:49,120 --> 03:09:51,120
.

3263
03:09:51,120 --> 03:09:53,120
.

3264
03:09:53,120 --> 03:09:55,120
.

3265
03:09:55,120 --> 03:09:57,120
.

3266
03:09:57,120 --> 03:09:59,120
.

3267
03:09:59,120 --> 03:10:01,120
.

3268
03:10:01,120 --> 03:10:03,120
.

3269
03:10:03,120 --> 03:10:05,120
.

3270
03:10:05,120 --> 03:10:07,120
.

3271
03:10:07,120 --> 03:10:09,120
.

3272
03:10:09,120 --> 03:10:11,120
.

3273
03:10:11,120 --> 03:10:13,120
.

3274
03:10:13,120 --> 03:10:15,120
.

3275
03:10:15,120 --> 03:10:17,120
.

3276
03:10:17,120 --> 03:10:19,120
.

3277
03:10:19,120 --> 03:10:21,120
.

3278
03:10:21,120 --> 03:10:23,120
.

3279
03:10:23,120 --> 03:10:25,120
.

3280
03:10:25,120 --> 03:10:27,120
.

3281
03:10:27,120 --> 03:10:29,120
.

3282
03:10:29,120 --> 03:10:31,120
.

3283
03:10:31,120 --> 03:10:33,120
.

3284
03:10:33,120 --> 03:10:35,120
.

3285
03:10:35,120 --> 03:10:37,120
.

3286
03:10:37,120 --> 03:10:39,120
.

3287
03:10:39,120 --> 03:10:41,120
.

3288
03:10:41,120 --> 03:10:43,120
.

3289
03:10:43,120 --> 03:10:45,120
.

3290
03:10:45,120 --> 03:10:47,120
.

3291
03:10:47,120 --> 03:10:49,120
.

3292
03:10:49,120 --> 03:10:51,120
.

3293
03:10:51,120 --> 03:10:53,120
.

3294
03:10:53,120 --> 03:10:55,120
.

3295
03:10:55,120 --> 03:10:57,120
.

3296
03:10:57,120 --> 03:10:59,120
.

3297
03:10:59,120 --> 03:11:01,120
.

3298
03:11:01,120 --> 03:11:03,120
.

3299
03:11:03,120 --> 03:11:05,120
.

3300
03:11:05,120 --> 03:11:07,120
.

3301
03:11:07,120 --> 03:11:09,120
.

3302
03:11:09,120 --> 03:11:11,120
.

3303
03:11:11,120 --> 03:11:13,120
.

3304
03:11:13,120 --> 03:11:15,120
.

3305
03:11:15,120 --> 03:11:17,120
.

3306
03:11:17,120 --> 03:11:19,120
.

3307
03:11:19,120 --> 03:11:21,120
.

3308
03:11:21,120 --> 03:11:23,120
.

3309
03:11:23,120 --> 03:11:25,120
.

3310
03:11:25,120 --> 03:11:27,120
.

3311
03:11:27,120 --> 03:11:29,120
.

3312
03:11:29,120 --> 03:11:31,120
.

3313
03:11:31,120 --> 03:11:33,120
.

3314
03:11:33,120 --> 03:11:35,120
.

3315
03:11:35,120 --> 03:11:37,120
.

3316
03:11:37,120 --> 03:11:39,120
.

3317
03:11:39,120 --> 03:11:41,120
.

3318
03:11:41,120 --> 03:11:43,120
.

3319
03:11:43,120 --> 03:11:45,120
.

3320
03:11:45,120 --> 03:11:47,120
.

3321
03:11:47,120 --> 03:11:49,120
.

3322
03:11:49,120 --> 03:11:51,120
.

3323
03:11:51,120 --> 03:11:53,120
.

3324
03:11:53,120 --> 03:11:55,120
.

3325
03:11:55,120 --> 03:11:57,120
.

3326
03:11:57,120 --> 03:11:59,120
.

3327
03:11:59,120 --> 03:12:01,120
.

3328
03:12:01,120 --> 03:12:03,120
.

3329
03:12:03,120 --> 03:12:05,120
.

3330
03:12:05,120 --> 03:12:07,120
.

3331
03:12:07,120 --> 03:12:09,120
.

3332
03:12:09,120 --> 03:12:11,120
.

3333
03:12:11,120 --> 03:12:13,120
.

3334
03:12:13,120 --> 03:12:15,120
.

3335
03:12:15,120 --> 03:12:17,120
.

3336
03:12:17,120 --> 03:12:19,120
.

3337
03:12:19,120 --> 03:12:21,120
.

3338
03:12:21,120 --> 03:12:23,120
.

3339
03:12:23,120 --> 03:12:25,120
.

3340
03:12:25,120 --> 03:12:27,120
.

3341
03:12:27,120 --> 03:12:29,120
.

3342
03:12:29,120 --> 03:12:31,120
.

3343
03:12:31,120 --> 03:12:33,120
.

3344
03:12:33,120 --> 03:12:35,120
.

3345
03:12:35,120 --> 03:12:37,120
.

3346
03:12:37,120 --> 03:12:39,120
.

3347
03:12:39,120 --> 03:12:41,120
.

3348
03:12:41,120 --> 03:12:43,120
.

3349
03:12:43,120 --> 03:12:45,120
.

3350
03:12:45,120 --> 03:12:47,120
.

3351
03:12:47,120 --> 03:12:49,120
.

3352
03:12:49,120 --> 03:12:51,120
.

3353
03:12:51,120 --> 03:12:53,120
.

3354
03:12:53,120 --> 03:12:55,120
.

3355
03:12:55,120 --> 03:12:57,120
.

3356
03:12:57,120 --> 03:12:59,120
.

3357
03:12:59,120 --> 03:13:01,120
.

3358
03:13:01,120 --> 03:13:03,120
.

3359
03:13:03,120 --> 03:13:05,120
.

3360
03:13:05,120 --> 03:13:07,120
.

3361
03:13:07,120 --> 03:13:09,120
.

3362
03:13:09,120 --> 03:13:11,120
.

3363
03:13:11,120 --> 03:13:13,120
.

3364
03:13:13,120 --> 03:13:15,120
.

3365
03:13:15,120 --> 03:13:17,120
.

3366
03:13:17,120 --> 03:13:19,120
.

3367
03:13:19,120 --> 03:13:21,120
.

3368
03:13:21,120 --> 03:13:23,120
.

3369
03:13:23,120 --> 03:13:25,120
.

3370
03:13:25,120 --> 03:13:27,120
.

3371
03:13:27,120 --> 03:13:29,120
.

3372
03:13:29,120 --> 03:13:31,120
.

3373
03:13:31,120 --> 03:13:33,120
.

3374
03:13:33,120 --> 03:13:35,120
.

3375
03:13:35,120 --> 03:13:37,120
.

3376
03:13:37,120 --> 03:13:39,120
.

3377
03:13:39,120 --> 03:13:41,120
.

3378
03:13:41,120 --> 03:13:43,120
.

3379
03:13:43,120 --> 03:13:45,120
.

3380
03:13:45,120 --> 03:13:47,120
.

3381
03:13:47,120 --> 03:13:49,120
.

3382
03:13:49,120 --> 03:13:51,120
.

3383
03:13:51,120 --> 03:13:53,120
.

3384
03:13:53,120 --> 03:13:55,120
.

3385
03:13:55,120 --> 03:13:57,120
.

3386
03:13:57,120 --> 03:13:59,120
.

3387
03:13:59,120 --> 03:14:01,120
.

3388
03:14:01,120 --> 03:14:03,120
.

3389
03:14:03,120 --> 03:14:05,120
.

3390
03:14:05,120 --> 03:14:07,120
.

3391
03:14:07,120 --> 03:14:09,120
.

3392
03:14:09,120 --> 03:14:11,120
.

3393
03:14:11,120 --> 03:14:13,120
.

3394
03:14:13,120 --> 03:14:15,120
.

3395
03:14:15,120 --> 03:14:17,120
.

3396
03:14:17,120 --> 03:14:19,120
.

3397
03:14:19,120 --> 03:14:21,120
.

3398
03:14:21,120 --> 03:14:23,120
.

3399
03:14:23,120 --> 03:14:25,120
.

3400
03:14:25,120 --> 03:14:27,120
.

3401
03:14:27,120 --> 03:14:29,120
.

3402
03:14:29,120 --> 03:14:31,120
.

3403
03:14:31,120 --> 03:14:33,120
.

3404
03:14:33,120 --> 03:14:35,120
.

3405
03:14:35,120 --> 03:14:37,120
.

3406
03:14:37,120 --> 03:14:39,120
.

3407
03:14:39,120 --> 03:14:41,120
.

3408
03:14:41,120 --> 03:14:43,120
.

3409
03:14:43,120 --> 03:14:45,120
.

3410
03:14:45,120 --> 03:14:47,120
.

3411
03:14:47,120 --> 03:14:49,120
.

3412
03:14:49,120 --> 03:14:51,120
.

3413
03:14:51,120 --> 03:14:53,120
.

3414
03:14:53,120 --> 03:14:55,120
.

3415
03:14:55,120 --> 03:14:57,120
.

3416
03:14:57,120 --> 03:14:59,120
.

3417
03:14:59,120 --> 03:15:01,120
.

3418
03:15:01,120 --> 03:15:03,120
.

3419
03:15:03,120 --> 03:15:05,120
.

3420
03:15:05,120 --> 03:15:07,120
.

3421
03:15:07,120 --> 03:15:09,120
.

3422
03:15:09,120 --> 03:15:11,120
.

3423
03:15:11,120 --> 03:15:13,120
.

3424
03:15:13,120 --> 03:15:15,120
.

3425
03:15:15,120 --> 03:15:17,120
.

3426
03:15:17,120 --> 03:15:19,120
.

3427
03:15:19,120 --> 03:15:21,120
.

3428
03:15:21,120 --> 03:15:23,120
.

3429
03:15:23,120 --> 03:15:25,120
.

3430
03:15:25,120 --> 03:15:27,120
.

3431
03:15:27,120 --> 03:15:29,120
.

3432
03:15:29,120 --> 03:15:31,120
.

3433
03:15:31,120 --> 03:15:33,120
.

3434
03:15:33,120 --> 03:15:35,120
.

3435
03:15:35,120 --> 03:15:37,120
.

3436
03:15:37,120 --> 03:15:39,120
.

3437
03:15:39,120 --> 03:15:41,120
.

3438
03:15:41,120 --> 03:15:43,120
.

3439
03:15:43,120 --> 03:15:45,120
.

3440
03:15:45,120 --> 03:15:47,120
.

3441
03:15:47,120 --> 03:15:49,120
.

3442
03:15:49,120 --> 03:15:51,120
.

3443
03:15:51,120 --> 03:15:53,120
.

3444
03:15:53,120 --> 03:15:55,120
.

3445
03:15:55,120 --> 03:15:57,120
.

3446
03:15:57,120 --> 03:15:59,120
.

3447
03:15:59,120 --> 03:16:01,120
.

3448
03:16:01,120 --> 03:16:03,120
.

3449
03:16:03,120 --> 03:16:05,120
.

3450
03:16:05,120 --> 03:16:07,120
.

3451
03:16:07,120 --> 03:16:09,120
.

3452
03:16:09,120 --> 03:16:11,120
.

3453
03:16:11,120 --> 03:16:13,120
.

3454
03:16:13,120 --> 03:16:15,120
.

3455
03:16:15,120 --> 03:16:17,120
.

3456
03:16:17,120 --> 03:16:19,120
.

3457
03:16:19,120 --> 03:16:21,120
.

3458
03:16:21,120 --> 03:16:23,120
.

3459
03:16:23,120 --> 03:16:25,120
.

3460
03:16:25,120 --> 03:16:27,120
.

3461
03:16:27,120 --> 03:16:29,120
.

3462
03:16:29,120 --> 03:16:31,120
.

3463
03:16:31,120 --> 03:16:33,120
.

3464
03:16:33,120 --> 03:16:35,120
.

3465
03:16:35,120 --> 03:16:37,120
.

3466
03:16:37,120 --> 03:16:39,120
.

3467
03:16:39,120 --> 03:16:41,120
.

3468
03:16:41,120 --> 03:16:43,120
.

3469
03:16:43,120 --> 03:16:45,120
.

3470
03:16:45,120 --> 03:16:47,120
.

3471
03:16:47,120 --> 03:16:49,120
.

3472
03:16:49,120 --> 03:16:51,120
.

3473
03:16:51,120 --> 03:16:53,120
.

3474
03:16:53,120 --> 03:16:55,120
.

3475
03:16:55,120 --> 03:16:57,120
.

3476
03:16:57,120 --> 03:16:59,120
.

3477
03:16:59,120 --> 03:17:01,120
.

3478
03:17:01,120 --> 03:17:03,120
.

3479
03:17:03,120 --> 03:17:05,120
.

3480
03:17:05,120 --> 03:17:07,120
.

3481
03:17:07,120 --> 03:17:09,120
.

3482
03:17:09,120 --> 03:17:11,120
.

3483
03:17:11,120 --> 03:17:13,120
.

3484
03:17:13,120 --> 03:17:15,120
.

3485
03:17:15,120 --> 03:17:17,120
.

3486
03:17:17,120 --> 03:17:19,120
.

3487
03:17:19,120 --> 03:17:21,120
.

3488
03:17:21,120 --> 03:17:23,120
.

3489
03:17:23,120 --> 03:17:25,120
.

3490
03:17:25,120 --> 03:17:27,120
.

3491
03:17:27,120 --> 03:17:29,120
.

3492
03:17:29,120 --> 03:17:31,120
.

3493
03:17:31,120 --> 03:17:33,120
.

3494
03:17:33,120 --> 03:17:35,120
.

3495
03:17:35,120 --> 03:17:37,120
.

3496
03:17:37,120 --> 03:17:39,120
.

3497
03:17:39,120 --> 03:17:41,120
.

3498
03:17:41,120 --> 03:17:43,120
.

3499
03:17:43,120 --> 03:17:45,120
.

3500
03:17:45,120 --> 03:17:47,120
.

3501
03:17:47,120 --> 03:17:49,120
.

3502
03:17:49,120 --> 03:17:51,120
.

3503
03:17:51,120 --> 03:17:53,120
.

3504
03:17:53,120 --> 03:17:55,120
.

3505
03:17:55,120 --> 03:17:57,120
.

3506
03:17:57,120 --> 03:17:59,120
.

3507
03:17:59,120 --> 03:18:01,120
.

3508
03:18:01,120 --> 03:18:03,120
.

3509
03:18:03,120 --> 03:18:05,120
.

3510
03:18:05,120 --> 03:18:07,120
.

3511
03:18:07,120 --> 03:18:09,120
.

3512
03:18:09,120 --> 03:18:11,120
.

3513
03:18:11,120 --> 03:18:13,120
.

3514
03:18:13,120 --> 03:18:15,120
.

3515
03:18:15,120 --> 03:18:17,120
.

3516
03:18:17,120 --> 03:18:19,120
.

3517
03:18:19,120 --> 03:18:21,120
.

3518
03:18:21,120 --> 03:18:23,120
.

3519
03:18:23,120 --> 03:18:25,120
.

3520
03:18:25,120 --> 03:18:27,120
.

3521
03:18:27,120 --> 03:18:29,120
.

3522
03:18:29,120 --> 03:18:31,120
.

3523
03:18:31,120 --> 03:18:33,120
.

3524
03:18:33,120 --> 03:18:35,120
.

3525
03:18:35,120 --> 03:18:37,120
.

3526
03:18:37,120 --> 03:18:39,120
.

3527
03:18:39,120 --> 03:18:41,120
.

3528
03:18:41,120 --> 03:18:43,120
.

3529
03:18:43,120 --> 03:18:45,120
.

3530
03:18:45,120 --> 03:18:47,120
.

3531
03:18:47,120 --> 03:18:49,120
.

3532
03:18:49,120 --> 03:18:51,120
.

3533
03:18:51,120 --> 03:18:53,120
.

3534
03:18:53,120 --> 03:18:55,120
.

3535
03:18:55,120 --> 03:18:57,120
.

3536
03:18:57,120 --> 03:18:59,120
.

3537
03:18:59,120 --> 03:19:01,120
.

3538
03:19:01,120 --> 03:19:03,120
.

3539
03:19:03,120 --> 03:19:05,120
.

3540
03:19:05,120 --> 03:19:07,120
.

3541
03:19:07,120 --> 03:19:09,120
.

3542
03:19:09,120 --> 03:19:11,120
.

3543
03:19:11,120 --> 03:19:13,120
.

3544
03:19:13,120 --> 03:19:15,120
.

3545
03:19:15,120 --> 03:19:17,120
.

3546
03:19:17,120 --> 03:19:19,120
.

3547
03:19:19,120 --> 03:19:21,120
.

3548
03:19:21,120 --> 03:19:23,120
.

3549
03:19:23,120 --> 03:19:25,120
.

3550
03:19:25,120 --> 03:19:27,120
.

3551
03:19:27,120 --> 03:19:29,120
.

3552
03:19:29,120 --> 03:19:31,120
.

3553
03:19:31,120 --> 03:19:33,120
.

3554
03:19:33,120 --> 03:19:35,120
.

3555
03:19:35,120 --> 03:19:37,120
.

3556
03:19:37,120 --> 03:19:39,120
.

3557
03:19:39,120 --> 03:19:41,120
.

3558
03:19:41,120 --> 03:19:43,120
.

3559
03:19:43,120 --> 03:19:45,120
.

3560
03:19:45,120 --> 03:19:47,120
.

3561
03:19:47,120 --> 03:19:49,120
.

3562
03:19:49,120 --> 03:19:51,120
.

3563
03:19:51,120 --> 03:19:53,120
.

3564
03:19:53,120 --> 03:19:55,120
.

3565
03:19:55,120 --> 03:19:57,120
.

3566
03:19:57,120 --> 03:19:59,120
.

3567
03:19:59,120 --> 03:20:01,120
.

3568
03:20:01,120 --> 03:20:03,120
.

3569
03:20:03,120 --> 03:20:05,120
.

3570
03:20:05,120 --> 03:20:07,120
.

3571
03:20:07,120 --> 03:20:09,120
.

3572
03:20:09,120 --> 03:20:11,120
.

3573
03:20:11,120 --> 03:20:13,120
.

3574
03:20:13,120 --> 03:20:15,120
.

3575
03:20:15,120 --> 03:20:17,120
.

3576
03:20:17,120 --> 03:20:19,120
.

3577
03:20:19,120 --> 03:20:21,120
.

3578
03:20:21,120 --> 03:20:23,120
.

3579
03:20:23,120 --> 03:20:25,120
.

3580
03:20:25,120 --> 03:20:27,120
.

3581
03:20:27,120 --> 03:20:29,120
.

3582
03:20:29,120 --> 03:20:31,120
.

3583
03:20:31,120 --> 03:20:33,120
.

3584
03:20:33,120 --> 03:20:35,120
.

3585
03:20:35,120 --> 03:20:37,120
.

3586
03:20:37,120 --> 03:20:39,120
.

3587
03:20:39,120 --> 03:20:41,120
.

3588
03:20:41,120 --> 03:20:43,120
.

3589
03:20:43,120 --> 03:20:45,120
.

3590
03:20:45,120 --> 03:20:47,120
.

3591
03:20:47,120 --> 03:20:49,120
.

3592
03:20:49,120 --> 03:20:51,120
.

3593
03:20:51,120 --> 03:20:53,120
.

3594
03:20:53,120 --> 03:20:55,120
.

3595
03:20:55,120 --> 03:20:57,120
.

3596
03:20:57,120 --> 03:20:59,120
.

3597
03:20:59,120 --> 03:21:01,120
.

3598
03:21:01,120 --> 03:21:03,120
.

3599
03:21:03,120 --> 03:21:05,120
.

3600
03:21:05,120 --> 03:21:07,120
.

3601
03:21:07,120 --> 03:21:09,120
.

3602
03:21:09,120 --> 03:21:11,120
.

3603
03:21:11,120 --> 03:21:13,120
.

3604
03:21:13,120 --> 03:21:15,120
.

3605
03:21:15,120 --> 03:21:17,120
.

3606
03:21:17,120 --> 03:21:19,120
.

3607
03:21:19,120 --> 03:21:21,120
.

3608
03:21:21,120 --> 03:21:23,120
.

3609
03:21:23,120 --> 03:21:25,120
.

3610
03:21:25,120 --> 03:21:27,120
.

3611
03:21:27,120 --> 03:21:29,120
.

3612
03:21:29,120 --> 03:21:31,120
.

3613
03:21:31,120 --> 03:21:33,120
.

3614
03:21:33,120 --> 03:21:35,120
.

3615
03:21:35,120 --> 03:21:37,120
.

3616
03:21:37,120 --> 03:21:39,120
.

3617
03:21:39,120 --> 03:21:41,120
.

3618
03:21:41,120 --> 03:21:43,120
.

3619
03:21:43,120 --> 03:21:45,120
.

3620
03:21:45,120 --> 03:21:47,120
.

3621
03:21:47,120 --> 03:21:49,120
.

3622
03:21:49,120 --> 03:21:51,120
.

3623
03:21:51,120 --> 03:21:53,120
.

3624
03:21:53,120 --> 03:21:55,120
.

3625
03:21:55,120 --> 03:21:57,120
.

3626
03:21:57,120 --> 03:21:59,120
.

3627
03:21:59,120 --> 03:22:01,120
.

3628
03:22:01,120 --> 03:22:03,120
.

3629
03:22:03,120 --> 03:22:05,120
.

3630
03:22:05,120 --> 03:22:07,120
.

3631
03:22:07,120 --> 03:22:09,120
.

3632
03:22:09,120 --> 03:22:11,120
.

3633
03:22:11,120 --> 03:22:13,120
.

3634
03:22:13,120 --> 03:22:15,120
.

3635
03:22:15,120 --> 03:22:17,120
.

3636
03:22:17,120 --> 03:22:19,120
.

3637
03:22:19,120 --> 03:22:21,120
.

3638
03:22:21,120 --> 03:22:23,120
.

3639
03:22:23,120 --> 03:22:25,120
.

3640
03:22:25,120 --> 03:22:27,120
.

3641
03:22:27,120 --> 03:22:29,120
.

3642
03:22:29,120 --> 03:22:31,120
.

3643
03:22:31,120 --> 03:22:33,120
.

3644
03:22:33,120 --> 03:22:35,120
.

3645
03:22:35,120 --> 03:22:37,120
.

3646
03:22:37,120 --> 03:22:39,120
.

3647
03:22:39,120 --> 03:22:41,120
.

3648
03:22:41,120 --> 03:22:43,120
.

3649
03:22:43,120 --> 03:22:45,120
.

3650
03:22:45,120 --> 03:22:47,120
.

3651
03:22:47,120 --> 03:22:49,120
.

3652
03:22:49,120 --> 03:22:51,120
.

3653
03:22:51,120 --> 03:22:53,120
.

3654
03:22:53,120 --> 03:22:55,120
.

3655
03:22:55,120 --> 03:22:57,120
.

3656
03:22:57,120 --> 03:22:59,120
.

3657
03:22:59,120 --> 03:23:01,120
.

3658
03:23:01,120 --> 03:23:03,120
.

3659
03:23:03,120 --> 03:23:05,120
.

3660
03:23:05,120 --> 03:23:07,120
.

3661
03:23:07,120 --> 03:23:09,120
.

3662
03:23:09,120 --> 03:23:11,120
.

3663
03:23:11,120 --> 03:23:13,120
.

3664
03:23:13,120 --> 03:23:15,120
.

3665
03:23:15,120 --> 03:23:17,120
.

3666
03:23:17,120 --> 03:23:19,120
.

3667
03:23:19,120 --> 03:23:21,120
.

3668
03:23:21,120 --> 03:23:23,120
.

3669
03:23:23,120 --> 03:23:25,120
.

3670
03:23:25,120 --> 03:23:27,120
.

3671
03:23:27,120 --> 03:23:29,120
.

3672
03:23:29,120 --> 03:23:31,120
.

3673
03:23:31,120 --> 03:23:33,120
.

3674
03:23:33,120 --> 03:23:35,120
.

3675
03:23:35,120 --> 03:23:37,120
.

3676
03:23:37,120 --> 03:23:39,120
.

3677
03:23:39,120 --> 03:23:41,120
.

3678
03:23:41,120 --> 03:23:43,120
.

3679
03:23:43,120 --> 03:23:45,120
.

3680
03:23:45,120 --> 03:23:47,120
.

3681
03:23:47,120 --> 03:23:49,120
.

3682
03:23:49,120 --> 03:23:51,120
.

3683
03:23:51,120 --> 03:23:53,120
.

3684
03:23:53,120 --> 03:23:55,120
.

3685
03:23:55,120 --> 03:23:57,120
.

3686
03:23:57,120 --> 03:23:59,120
.

3687
03:23:59,120 --> 03:24:01,120
.

3688
03:24:01,120 --> 03:24:03,120
.

3689
03:24:03,120 --> 03:24:05,120
.

3690
03:24:05,120 --> 03:24:07,120
.

3691
03:24:07,120 --> 03:24:09,120
.

3692
03:24:09,120 --> 03:24:11,120
.

3693
03:24:11,120 --> 03:24:13,120
.

3694
03:24:13,120 --> 03:24:15,120
.

3695
03:24:15,120 --> 03:24:17,120
.

3696
03:24:17,120 --> 03:24:19,120
.

3697
03:24:19,120 --> 03:24:21,120
.

3698
03:24:21,120 --> 03:24:23,120
.

3699
03:24:23,120 --> 03:24:25,120
.

3700
03:24:25,120 --> 03:24:27,120
.

3701
03:24:27,120 --> 03:24:29,120
.

3702
03:24:29,120 --> 03:24:31,120
.

3703
03:24:31,120 --> 03:24:33,120
.

3704
03:24:33,120 --> 03:24:35,120
.

3705
03:24:35,120 --> 03:24:37,120
.

3706
03:24:37,120 --> 03:24:39,120
.

3707
03:24:39,120 --> 03:24:41,120
.

3708
03:24:41,120 --> 03:24:43,120
.

3709
03:24:43,120 --> 03:24:45,120
.

3710
03:24:45,120 --> 03:24:47,120
.

3711
03:24:47,120 --> 03:24:49,120
.

3712
03:24:49,120 --> 03:24:51,120
.

3713
03:24:51,120 --> 03:24:53,120
.

3714
03:24:53,120 --> 03:24:55,120
.

3715
03:24:55,120 --> 03:24:57,120
.

3716
03:24:57,120 --> 03:24:59,120
.

3717
03:24:59,120 --> 03:25:01,120
.

3718
03:25:01,120 --> 03:25:03,120
.

3719
03:25:03,120 --> 03:25:05,120
.

3720
03:25:05,120 --> 03:25:07,120
.

3721
03:25:07,120 --> 03:25:09,120
.

3722
03:25:09,120 --> 03:25:11,120
.

3723
03:25:11,120 --> 03:25:13,120
.

3724
03:25:13,120 --> 03:25:15,120
.

3725
03:25:15,120 --> 03:25:17,120
.

3726
03:25:17,120 --> 03:25:19,120
.

3727
03:25:19,120 --> 03:25:21,120
.

3728
03:25:21,120 --> 03:25:23,120
.

3729
03:25:23,120 --> 03:25:25,120
.

3730
03:25:25,120 --> 03:25:27,120
.

3731
03:25:27,120 --> 03:25:29,120
.

3732
03:25:29,120 --> 03:25:31,120
.

3733
03:25:31,120 --> 03:25:33,120
.

3734
03:25:33,120 --> 03:25:35,120
.

3735
03:25:35,120 --> 03:25:37,120
.

3736
03:25:37,120 --> 03:25:39,120
.

3737
03:25:39,120 --> 03:25:41,120
.

3738
03:25:41,120 --> 03:25:43,120
.

3739
03:25:43,120 --> 03:25:45,120
.

3740
03:25:45,120 --> 03:25:47,120
.

3741
03:25:47,120 --> 03:25:49,120
.

3742
03:25:49,120 --> 03:25:51,120
.

3743
03:25:51,120 --> 03:25:53,120
.

3744
03:25:53,120 --> 03:25:55,120
.

3745
03:25:55,120 --> 03:25:57,120
.

3746
03:25:57,120 --> 03:25:59,120
.

3747
03:25:59,120 --> 03:26:01,120
.

3748
03:26:01,120 --> 03:26:03,120
.

3749
03:26:03,120 --> 03:26:05,120
.

3750
03:26:05,120 --> 03:26:07,120
.

3751
03:26:07,120 --> 03:26:09,120
.

3752
03:26:09,120 --> 03:26:11,120
.

3753
03:26:11,120 --> 03:26:13,120
.

3754
03:26:13,120 --> 03:26:15,120
.

3755
03:26:15,120 --> 03:26:17,120
.

3756
03:26:17,120 --> 03:26:19,120
.

3757
03:26:19,120 --> 03:26:21,120
.

3758
03:26:21,120 --> 03:26:23,120
.

3759
03:26:23,120 --> 03:26:25,120
.

3760
03:26:25,120 --> 03:26:27,120
.

3761
03:26:27,120 --> 03:26:29,120
.

3762
03:26:29,120 --> 03:26:31,120
.

3763
03:26:31,120 --> 03:26:33,120
.

3764
03:26:33,120 --> 03:26:35,120
.

3765
03:26:35,120 --> 03:26:37,120
.

3766
03:26:37,120 --> 03:26:39,120
.

3767
03:26:39,120 --> 03:26:41,120
.

3768
03:26:41,120 --> 03:26:43,120
.

3769
03:26:43,120 --> 03:26:45,120
.

3770
03:26:45,120 --> 03:26:47,120
.

3771
03:26:47,120 --> 03:26:49,120
.

3772
03:26:49,120 --> 03:26:51,120
.

3773
03:26:51,120 --> 03:26:53,120
.

3774
03:26:53,120 --> 03:26:55,120
.

3775
03:26:55,120 --> 03:26:57,120
.

3776
03:26:57,120 --> 03:26:59,120
.

3777
03:26:59,120 --> 03:27:01,120
.

3778
03:27:01,120 --> 03:27:03,120
.

3779
03:27:03,120 --> 03:27:05,120
.

3780
03:27:05,120 --> 03:27:07,120
.

3781
03:27:07,120 --> 03:27:09,120
.

3782
03:27:09,120 --> 03:27:11,120
.

3783
03:27:11,120 --> 03:27:13,120
.

3784
03:27:13,120 --> 03:27:15,120
.

3785
03:27:15,120 --> 03:27:17,120
.

3786
03:27:17,120 --> 03:27:19,120
.

3787
03:27:19,120 --> 03:27:21,120
.

3788
03:27:21,120 --> 03:27:23,120
.

3789
03:27:23,120 --> 03:27:25,120
.

3790
03:27:25,120 --> 03:27:27,120
.

3791
03:27:27,120 --> 03:27:29,120
.

3792
03:27:29,120 --> 03:27:31,120
.

3793
03:27:31,120 --> 03:27:33,120
.

3794
03:27:33,120 --> 03:27:35,120
.

3795
03:27:35,120 --> 03:27:37,120
.

3796
03:27:37,120 --> 03:27:39,120
.

3797
03:27:39,120 --> 03:27:41,120
.

3798
03:27:41,120 --> 03:27:43,120
.

3799
03:27:43,120 --> 03:27:45,120
.

3800
03:27:45,120 --> 03:27:47,120
.

3801
03:27:47,120 --> 03:27:49,120
.

3802
03:27:49,120 --> 03:27:51,120
.

3803
03:27:51,120 --> 03:27:53,120
.

3804
03:27:53,120 --> 03:27:55,120
.

3805
03:27:55,120 --> 03:27:57,120
.

3806
03:27:57,120 --> 03:27:59,120
.

3807
03:27:59,120 --> 03:28:01,120
.

3808
03:28:01,120 --> 03:28:03,120
.

3809
03:28:03,120 --> 03:28:05,120
.

3810
03:28:05,120 --> 03:28:07,120
.

3811
03:28:07,120 --> 03:28:09,120
.

3812
03:28:09,120 --> 03:28:11,120
.

3813
03:28:11,120 --> 03:28:13,120
.

3814
03:28:13,120 --> 03:28:15,120
.

3815
03:28:15,120 --> 03:28:17,120
.

3816
03:28:17,120 --> 03:28:19,120
.

3817
03:28:19,120 --> 03:28:21,120
.

3818
03:28:21,120 --> 03:28:23,120
.

3819
03:28:23,120 --> 03:28:25,120
.

3820
03:28:25,120 --> 03:28:27,120
.

3821
03:28:27,120 --> 03:28:29,120
.

3822
03:28:29,120 --> 03:28:31,120
.

3823
03:28:31,120 --> 03:28:33,120
.

3824
03:28:33,120 --> 03:28:35,120
.

3825
03:28:35,120 --> 03:28:37,120
.

3826
03:28:37,120 --> 03:28:39,120
.

3827
03:28:39,120 --> 03:28:41,120
.

3828
03:28:41,120 --> 03:28:43,120
.

3829
03:28:43,120 --> 03:28:45,120
.

3830
03:28:45,120 --> 03:28:47,120
.

3831
03:28:47,120 --> 03:28:49,120
.

3832
03:28:49,120 --> 03:28:51,120
.

3833
03:28:51,120 --> 03:28:53,120
.

3834
03:28:53,120 --> 03:28:55,120
.

3835
03:28:55,120 --> 03:28:57,120
.

3836
03:28:57,120 --> 03:28:59,120
.

3837
03:28:59,120 --> 03:29:01,120
.

3838
03:29:01,120 --> 03:29:03,120
.

3839
03:29:03,120 --> 03:29:05,120
.

3840
03:29:05,120 --> 03:29:07,120
.

3841
03:29:07,120 --> 03:29:09,120
.

3842
03:29:09,120 --> 03:29:11,120
.

3843
03:29:11,120 --> 03:29:13,120
.

3844
03:29:13,120 --> 03:29:15,120
.

3845
03:29:15,120 --> 03:29:17,120
.

3846
03:29:17,120 --> 03:29:19,120
.

3847
03:29:19,120 --> 03:29:21,120
.

3848
03:29:21,120 --> 03:29:23,120
.

3849
03:29:23,120 --> 03:29:25,120
.

3850
03:29:25,120 --> 03:29:27,120
.

3851
03:29:27,120 --> 03:29:29,120
.

3852
03:29:29,120 --> 03:29:31,120
.

3853
03:29:31,120 --> 03:29:33,120
.

3854
03:29:33,120 --> 03:29:35,120
.

3855
03:29:35,120 --> 03:29:37,120
.

3856
03:29:37,120 --> 03:29:39,120
.

3857
03:29:39,120 --> 03:29:41,120
.

3858
03:29:41,120 --> 03:29:43,120
.

3859
03:29:43,120 --> 03:29:45,120
.

3860
03:29:45,120 --> 03:29:47,120
.

3861
03:29:47,120 --> 03:29:49,120
.

3862
03:29:49,120 --> 03:29:51,120
.

3863
03:29:51,120 --> 03:29:53,120
.

3864
03:29:53,120 --> 03:29:55,120
.

3865
03:29:55,120 --> 03:29:57,120
.

3866
03:29:57,120 --> 03:29:59,120
.

3867
03:29:59,120 --> 03:30:01,120
.

3868
03:30:01,120 --> 03:30:03,120
.

3869
03:30:03,120 --> 03:30:05,120
.

3870
03:30:05,120 --> 03:30:07,120
.

3871
03:30:07,120 --> 03:30:09,120
.

3872
03:30:09,120 --> 03:30:11,120
.

3873
03:30:11,120 --> 03:30:13,120
.

3874
03:30:13,120 --> 03:30:15,120
.

3875
03:30:15,120 --> 03:30:17,120
.

3876
03:30:17,120 --> 03:30:19,120
.

3877
03:30:19,120 --> 03:30:21,120
.

3878
03:30:21,120 --> 03:30:23,120
.

3879
03:30:23,120 --> 03:30:25,120
.

3880
03:30:25,120 --> 03:30:27,120
.

3881
03:30:27,120 --> 03:30:29,120
.

3882
03:30:29,120 --> 03:30:31,120
.

3883
03:30:31,120 --> 03:30:33,120
.

3884
03:30:33,120 --> 03:30:35,120
.

3885
03:30:35,120 --> 03:30:37,120
.

3886
03:30:37,120 --> 03:30:39,120
.

3887
03:30:39,120 --> 03:30:41,120
.

3888
03:30:41,120 --> 03:30:43,120
.

3889
03:30:43,120 --> 03:30:45,120
.

3890
03:30:45,120 --> 03:30:47,120
.

3891
03:30:47,120 --> 03:30:49,120
.

3892
03:30:49,120 --> 03:30:51,120
.

3893
03:30:51,120 --> 03:30:53,120
.

3894
03:30:53,120 --> 03:30:55,120
.

3895
03:30:55,120 --> 03:30:57,120
.

3896
03:30:57,120 --> 03:30:59,120
.

3897
03:30:59,120 --> 03:31:01,120
.

3898
03:31:01,120 --> 03:31:03,120
.

3899
03:31:03,120 --> 03:31:05,120
.

3900
03:31:05,120 --> 03:31:07,120
.

3901
03:31:07,120 --> 03:31:09,120
.

3902
03:31:09,120 --> 03:31:11,120
.

3903
03:31:11,120 --> 03:31:13,120
.

3904
03:31:13,120 --> 03:31:15,120
.

3905
03:31:15,120 --> 03:31:17,120
.

3906
03:31:17,120 --> 03:31:19,120
.

3907
03:31:19,120 --> 03:31:21,120
.

3908
03:31:21,120 --> 03:31:23,120
.

3909
03:31:23,120 --> 03:31:25,120
.

3910
03:31:25,120 --> 03:31:27,120
.

3911
03:31:27,120 --> 03:31:29,120
.

3912
03:31:29,120 --> 03:31:31,120
.

3913
03:31:31,120 --> 03:31:33,120
.

3914
03:31:33,120 --> 03:31:35,120
.

3915
03:31:35,120 --> 03:31:37,120
.

3916
03:31:37,120 --> 03:31:39,120
.

3917
03:31:39,120 --> 03:31:41,120
.

3918
03:31:41,120 --> 03:31:43,120
.

3919
03:31:43,120 --> 03:31:45,120
.

3920
03:31:45,120 --> 03:31:47,120
.

3921
03:31:47,120 --> 03:31:49,120
.

3922
03:31:49,120 --> 03:31:51,120
.

3923
03:31:51,120 --> 03:31:53,120
.

3924
03:31:53,120 --> 03:31:55,120
.

3925
03:31:55,120 --> 03:31:57,120
.

3926
03:31:57,120 --> 03:31:59,120
.

3927
03:31:59,120 --> 03:32:01,120
.

3928
03:32:01,120 --> 03:32:03,120
.

3929
03:32:03,120 --> 03:32:05,120
.

3930
03:32:05,120 --> 03:32:07,120
.

3931
03:32:07,120 --> 03:32:09,120
.

3932
03:32:09,120 --> 03:32:11,120
.

3933
03:32:11,120 --> 03:32:13,120
.

3934
03:32:13,120 --> 03:32:15,120
.

3935
03:32:15,120 --> 03:32:17,120
.

3936
03:32:17,120 --> 03:32:19,120
.

3937
03:32:19,120 --> 03:32:21,120
.

3938
03:32:21,120 --> 03:32:23,120
.

3939
03:32:23,120 --> 03:32:25,120
.

3940
03:32:25,120 --> 03:32:27,120
.

3941
03:32:27,120 --> 03:32:29,120
.

3942
03:32:29,120 --> 03:32:31,120
.

3943
03:32:31,120 --> 03:32:33,120
.

3944
03:32:33,120 --> 03:32:35,120
.

3945
03:32:35,120 --> 03:32:37,120
.

3946
03:32:37,120 --> 03:32:39,120
.

3947
03:32:39,120 --> 03:32:41,120
.

3948
03:32:41,120 --> 03:32:43,120
.

3949
03:32:43,120 --> 03:32:45,120
.

3950
03:32:45,120 --> 03:32:47,120
.

3951
03:32:47,120 --> 03:32:49,120
.

3952
03:32:49,120 --> 03:32:51,120
.

3953
03:32:51,120 --> 03:32:53,120
.

3954
03:32:53,120 --> 03:32:55,120
.

3955
03:32:55,120 --> 03:32:57,120
.

3956
03:32:57,120 --> 03:32:59,120
.

3957
03:32:59,120 --> 03:33:01,120
.

3958
03:33:01,120 --> 03:33:03,120
.

3959
03:33:03,120 --> 03:33:05,120
.

3960
03:33:05,120 --> 03:33:07,120
.

3961
03:33:07,120 --> 03:33:09,120
.

3962
03:33:09,120 --> 03:33:11,120
.

3963
03:33:11,120 --> 03:33:13,120
.

3964
03:33:13,120 --> 03:33:15,120
.

3965
03:33:15,120 --> 03:33:17,120
.

3966
03:33:17,120 --> 03:33:19,120
.

3967
03:33:19,120 --> 03:33:21,120
.

3968
03:33:21,120 --> 03:33:23,120
.

3969
03:33:23,120 --> 03:33:25,120
.

3970
03:33:25,120 --> 03:33:27,120
.

3971
03:33:27,120 --> 03:33:29,120
.

3972
03:33:29,120 --> 03:33:31,120
.

3973
03:33:31,120 --> 03:33:33,120
.

3974
03:33:33,120 --> 03:33:35,120
.

3975
03:33:35,120 --> 03:33:37,120
.

3976
03:33:37,120 --> 03:33:39,120
.

3977
03:33:39,120 --> 03:33:41,120
.

3978
03:33:41,120 --> 03:33:43,120
.

3979
03:33:43,120 --> 03:33:45,120
.

3980
03:33:45,120 --> 03:33:47,120
.

3981
03:33:47,120 --> 03:33:49,120
.

3982
03:33:49,120 --> 03:33:51,120
.

3983
03:33:51,120 --> 03:33:53,120
.

3984
03:33:53,120 --> 03:33:55,120
.

3985
03:33:55,120 --> 03:33:57,120
.

3986
03:33:57,120 --> 03:33:59,120
.

3987
03:33:59,120 --> 03:34:01,120
.

3988
03:34:01,120 --> 03:34:03,120
.

3989
03:34:03,120 --> 03:34:05,120
.

3990
03:34:05,120 --> 03:34:07,120
.

3991
03:34:07,120 --> 03:34:09,120
.

3992
03:34:09,120 --> 03:34:11,120
.

3993
03:34:11,120 --> 03:34:13,120
.

3994
03:34:13,120 --> 03:34:15,120
.

3995
03:34:15,120 --> 03:34:17,120
.

3996
03:34:17,120 --> 03:34:19,120
.

3997
03:34:19,120 --> 03:34:21,120
.

3998
03:34:21,120 --> 03:34:23,120
.

3999
03:34:23,120 --> 03:34:25,120
.

4000
03:34:25,120 --> 03:34:27,120
.

4001
03:34:27,120 --> 03:34:29,120
.

4002
03:34:29,120 --> 03:34:31,120
.

4003
03:34:31,120 --> 03:34:33,120
.

4004
03:34:33,120 --> 03:34:35,120
.

4005
03:34:35,120 --> 03:34:37,120
.

4006
03:34:37,120 --> 03:34:39,120
.

4007
03:34:39,120 --> 03:34:41,120
.

4008
03:34:41,120 --> 03:34:43,120
.

4009
03:34:43,120 --> 03:34:45,120
.

4010
03:34:45,120 --> 03:34:47,120
.

4011
03:34:47,120 --> 03:34:49,120
.

4012
03:34:49,120 --> 03:34:51,120
.

4013
03:34:51,120 --> 03:34:53,120
.

4014
03:34:53,120 --> 03:34:55,120
.

4015
03:34:55,120 --> 03:34:57,120
.

4016
03:34:57,120 --> 03:34:59,120
.

4017
03:34:59,120 --> 03:35:01,120
.

4018
03:35:01,120 --> 03:35:03,120
.

4019
03:35:03,120 --> 03:35:05,120
.

4020
03:35:05,120 --> 03:35:07,120
.

4021
03:35:07,120 --> 03:35:09,120
.

4022
03:35:09,120 --> 03:35:11,120
.

4023
03:35:11,120 --> 03:35:13,120
.

4024
03:35:13,120 --> 03:35:15,120
.

4025
03:35:15,120 --> 03:35:17,120
.

4026
03:35:17,120 --> 03:35:19,120
.

4027
03:35:19,120 --> 03:35:21,120
.

4028
03:35:21,120 --> 03:35:23,120
.

4029
03:35:23,120 --> 03:35:25,120
.

4030
03:35:25,120 --> 03:35:27,120
.

4031
03:35:27,120 --> 03:35:29,120
.

4032
03:35:29,120 --> 03:35:31,120
.

4033
03:35:31,120 --> 03:35:33,120
.

4034
03:35:33,120 --> 03:35:35,120
.

4035
03:35:35,120 --> 03:35:37,120
.

4036
03:35:37,120 --> 03:35:39,120
.

4037
03:35:39,120 --> 03:35:41,120
.

4038
03:35:41,120 --> 03:35:43,120
.

4039
03:35:43,120 --> 03:35:45,120
.

4040
03:35:45,120 --> 03:35:47,120
.

4041
03:35:47,120 --> 03:35:49,120
.

4042
03:35:49,120 --> 03:35:51,120
.

4043
03:35:51,120 --> 03:35:53,120
.

4044
03:35:53,120 --> 03:35:55,120
.

4045
03:35:55,120 --> 03:35:57,120
.

4046
03:35:57,120 --> 03:35:59,120
.

4047
03:35:59,120 --> 03:36:01,120
.

4048
03:36:01,120 --> 03:36:03,120
.

4049
03:36:03,120 --> 03:36:05,120
.

4050
03:36:05,120 --> 03:36:07,120
.

4051
03:36:07,120 --> 03:36:09,120
.

4052
03:36:09,120 --> 03:36:11,120
.

4053
03:36:11,120 --> 03:36:13,120
.

4054
03:36:13,120 --> 03:36:15,120
.

4055
03:36:15,120 --> 03:36:17,120
.

4056
03:36:17,120 --> 03:36:19,120
.

4057
03:36:19,120 --> 03:36:21,120
.

4058
03:36:21,120 --> 03:36:23,120
.

4059
03:36:23,120 --> 03:36:25,120
.

4060
03:36:25,120 --> 03:36:27,120
.

4061
03:36:27,120 --> 03:36:29,120
.

4062
03:36:29,120 --> 03:36:31,120
.

4063
03:36:31,120 --> 03:36:33,120
.

4064
03:36:33,120 --> 03:36:35,120
.

4065
03:36:35,120 --> 03:36:37,120
.

4066
03:36:37,120 --> 03:36:39,120
.

4067
03:36:39,120 --> 03:36:41,120
.

4068
03:36:41,120 --> 03:36:43,120
.

4069
03:36:43,120 --> 03:36:45,120
.

4070
03:36:45,120 --> 03:36:47,120
.

4071
03:36:47,120 --> 03:36:49,120
.

4072
03:36:49,120 --> 03:36:51,120
.

4073
03:36:51,120 --> 03:36:53,120
.

4074
03:36:53,120 --> 03:36:55,120
.

4075
03:36:55,120 --> 03:36:57,120
.

4076
03:36:57,120 --> 03:36:59,120
.

4077
03:36:59,120 --> 03:37:01,120
.

4078
03:37:01,120 --> 03:37:03,120
.

4079
03:37:03,120 --> 03:37:05,120
.

4080
03:37:05,120 --> 03:37:07,120
.

4081
03:37:07,120 --> 03:37:09,120
.

4082
03:37:09,120 --> 03:37:11,120
.

4083
03:37:11,120 --> 03:37:13,120
.

4084
03:37:13,120 --> 03:37:15,120
.

4085
03:37:15,120 --> 03:37:17,120
.

4086
03:37:17,120 --> 03:37:19,120
.

4087
03:37:19,120 --> 03:37:21,120
.

4088
03:37:21,120 --> 03:37:23,120
.

4089
03:37:23,120 --> 03:37:25,120
.

4090
03:37:25,120 --> 03:37:27,120
.

4091
03:37:27,120 --> 03:37:29,120
.

4092
03:37:29,120 --> 03:37:31,120
.

4093
03:37:31,120 --> 03:37:33,120
.

4094
03:37:33,120 --> 03:37:35,120
.

4095
03:37:35,120 --> 03:37:37,120
.

4096
03:37:37,120 --> 03:37:39,120
.

4097
03:37:39,120 --> 03:37:41,120
.

4098
03:37:41,120 --> 03:37:43,120
.

4099
03:37:43,120 --> 03:37:45,120
.

4100
03:37:45,120 --> 03:37:47,120
.

4101
03:37:47,120 --> 03:37:49,120
.

4102
03:37:49,120 --> 03:37:51,120
.

4103
03:37:51,120 --> 03:37:53,120
.

4104
03:37:53,120 --> 03:37:55,120
.

4105
03:37:55,120 --> 03:37:57,120
.

4106
03:37:57,120 --> 03:37:59,120
.

4107
03:37:59,120 --> 03:38:01,120
.

