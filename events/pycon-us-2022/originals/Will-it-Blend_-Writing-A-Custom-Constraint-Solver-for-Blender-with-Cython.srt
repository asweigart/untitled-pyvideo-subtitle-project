1
00:00:00,000 --> 00:00:09,880
All right, hopefully this will advance my slides and I can move on.

2
00:00:09,880 --> 00:00:15,440
Okay, so, yeah, my talk is entitled Will It Blend?

3
00:00:15,440 --> 00:00:26,480
And it's about writing a custom constraint solver for Blender using Cython.

4
00:00:26,480 --> 00:00:32,200
So the agenda in terms of what I'm going to cover is a bit of motivation and background

5
00:00:32,200 --> 00:00:37,680
about why I looked at this particular problem and then go into the backend of why I chose

6
00:00:37,680 --> 00:00:44,480
to use Cython, looking at a toy problem for this, going over the Python package structure

7
00:00:44,480 --> 00:00:51,800
when you're using Cython, and then compiling Cython packages.

8
00:00:51,880 --> 00:00:57,680
And then moving on to performance, so how you can use Cython to release the gil, how

9
00:00:57,680 --> 00:01:04,480
you can profile Cython, and then on the front end, why did I choose to use Blender, and

10
00:01:04,480 --> 00:01:13,360
then going into some information about Blender developments and Blender add-ons.

11
00:01:13,360 --> 00:01:14,360
So a little bit about me.

12
00:01:14,360 --> 00:01:20,760
I used to be a structural engineer, so I worked on some landmark transit projects and, like,

13
00:01:20,760 --> 00:01:27,840
some of the big museums, but for the past year, I've worked on software before that.

14
00:01:27,840 --> 00:01:33,040
I've been writing Python since 2015, but I've made the switch to entirely just working

15
00:01:33,040 --> 00:01:39,000
on software, mainly focusing on full stack web applications, doing a lot of data visualization,

16
00:01:39,000 --> 00:01:41,560
and you can find me at my blog.

17
00:01:41,560 --> 00:01:46,560
I write about some of this kind of stuff, and also I'm on Twitter.

18
00:01:51,600 --> 00:01:57,600
So I could do an entire talk about the state of software for structural engineering, but

19
00:01:57,600 --> 00:02:01,680
the 30-second bit about it is that it's not great.

20
00:02:01,680 --> 00:02:07,640
You model building and commercial software to understand how it behaves under loads.

21
00:02:07,640 --> 00:02:12,640
You know, you want it to move, but not too much, and then you use an analysis program

22
00:02:12,640 --> 00:02:17,120
that might have a way of doing design, so how big should a column be, how much steel

23
00:02:17,440 --> 00:02:22,200
should you put in the floor, but often in consulting design practices, you usually go

24
00:02:22,200 --> 00:02:26,080
back to designing all this in Excel.

25
00:02:26,080 --> 00:02:31,600
And then most often you're using proprietary software to exchange data with other disciplines,

26
00:02:31,600 --> 00:02:36,160
so architectural, mechanical, electrical, and plumbing, to basically figure out how

27
00:02:36,160 --> 00:02:41,760
all of the structural stuff will fit together with all the other components.

28
00:02:41,760 --> 00:02:46,240
So having worked on software for a while, I have a lot of issues with the state of software

29
00:02:46,240 --> 00:02:49,040
in the built environment.

30
00:02:49,040 --> 00:02:54,000
The UIs are usually super outdated, and also it's very difficult to get information without

31
00:02:54,000 --> 00:02:57,320
pointing and clicking and going through a bunch of different submenus.

32
00:02:57,320 --> 00:03:00,280
It's very not developer-friendly.

33
00:03:00,280 --> 00:03:01,840
It's pretty expensive.

34
00:03:01,840 --> 00:03:06,560
Standard structural analysis software is usually about $10,000 a license, even with the terrible

35
00:03:06,560 --> 00:03:08,120
UI.

36
00:03:08,120 --> 00:03:13,040
For reference, the starting salary for a structural engineer is somewhere between $60,000 and

37
00:03:13,040 --> 00:03:15,560
$70,000 a year.

38
00:03:15,560 --> 00:03:20,320
In terms of how the software operates, it's pretty slow, I would say.

39
00:03:20,320 --> 00:03:25,120
There are a lot of matrix inversions required for the math behind structural analysis, and

40
00:03:25,120 --> 00:03:28,020
there really isn't any immediate feedback loop.

41
00:03:28,020 --> 00:03:32,880
You click on something, you walk away, you come back, and you see the results.

42
00:03:32,880 --> 00:03:36,560
Probably my biggest issue with it is that it's all a black box.

43
00:03:36,560 --> 00:03:41,440
If you're lucky, you'll get a manual that will have simple test cases and validations,

44
00:03:41,440 --> 00:03:44,280
but looking at the actual code is not possible.

45
00:03:44,280 --> 00:03:52,400
Before we had computers, some of the most exquisite buildings constructed used physical

46
00:03:52,400 --> 00:03:54,880
modeling methods called form-finding.

47
00:03:54,880 --> 00:03:59,320
The idea was that you could take a hanging weighted chain and tension and then invert

48
00:03:59,320 --> 00:04:03,800
it in order to find the form of a structure and pure compression.

49
00:04:03,800 --> 00:04:08,600
You might be familiar with Antonio Gaudi's still unfinished cathedral in Barcelona called

50
00:04:08,600 --> 00:04:13,000
the Sagrada Familia, which actually used this technique, as seen on the left, with his hanging

51
00:04:13,000 --> 00:04:20,400
chain model to form-find the pure compression form of the building, which is still unfinished

52
00:04:20,400 --> 00:04:24,960
and you can see on the right.

53
00:04:24,960 --> 00:04:29,280
Today the construction of the cathedral is being undertaken using computational geometric

54
00:04:29,280 --> 00:04:37,360
techniques as well as computational form-finding.

55
00:04:37,360 --> 00:04:40,840
I also became interested in computer graphics a few years ago, as it's a field that's

56
00:04:40,840 --> 00:04:46,680
miles ahead of structural analysis in terms of using real-time simulation.

57
00:04:46,680 --> 00:04:51,240
There was one particular constraint-solving algorithm for form-finding and real-time physics

58
00:04:51,240 --> 00:04:55,640
that actually has made it into built environment software through two plug-in implementations

59
00:04:55,640 --> 00:04:59,200
in a commercial 3D modeling software called Rhinoceros.

60
00:04:59,200 --> 00:05:03,840
The examples shown here are from the original implementation of the algorithm called Shapeop,

61
00:05:03,840 --> 00:05:09,000
which was developed at EPFL, but the one that's widely commercially used now is called Kangaroo

62
00:05:09,000 --> 00:05:21,960
So, you might ask if these already exist, why would I rewrite it?

63
00:05:21,960 --> 00:05:26,520
My issues with this are that I still don't think the UI is great for that particular

64
00:05:26,520 --> 00:05:27,520
software.

65
00:05:27,520 --> 00:05:31,560
It's based on visual programming, which is really great for rapid prototyping, but it's

66
00:05:31,560 --> 00:05:36,340
not great for documentation or having reproducible processes.

67
00:05:36,340 --> 00:05:38,560
Even in this interface, it's not free.

68
00:05:38,560 --> 00:05:43,400
It costs about $1,000, a license, which might put it out of reach for a hobbyist.

69
00:05:43,400 --> 00:05:46,360
These implementations are not slow.

70
00:05:46,360 --> 00:05:49,920
What you were seeing on the previous slide was all real-time, but there's still a little

71
00:05:49,920 --> 00:05:55,720
bit of a black box around the implementation, while Shapeop is open source.

72
00:05:55,720 --> 00:06:00,680
It's kind of academic abandonware, but the physics engine for Kangaroo 2 is still not

73
00:06:00,680 --> 00:06:05,340
open source, but the constraint formulation, all those geometric constraints that feed

74
00:06:05,340 --> 00:06:08,320
into the engine are, and they're written in C-sharp.

75
00:06:08,320 --> 00:06:12,640
So, with those caveats, I wanted to try my hand at implementing this algorithm myself

76
00:06:12,640 --> 00:06:18,040
in Python, so to make it open source, accessible, and extensible.

77
00:06:18,040 --> 00:06:27,520
So, moving on to the back end of how I built the Scython plugin, which I called Pimaxian.

78
00:06:27,520 --> 00:06:33,160
So, obviously, the first stumbling block you get when you say you're going to build something

79
00:06:33,160 --> 00:06:36,600
in Python is the complaint about how slow it is.

80
00:06:36,600 --> 00:06:41,880
So, I turned to Scython as a way to keep Pythonic syntax that I'm familiar with, but improve

81
00:06:41,880 --> 00:06:43,800
the speed significantly.

82
00:06:43,800 --> 00:06:50,240
So there are several wrappers and ways to get C or C++ execution with Python as a front

83
00:06:50,240 --> 00:06:51,240
end.

84
00:06:51,240 --> 00:06:54,640
In fact, you can generate Python bindings for Shapeop still using SWIG.

85
00:06:54,640 --> 00:06:58,520
However, this still means that if you want to extend constraints or change anything,

86
00:06:58,520 --> 00:07:03,000
you're going to have to write them in C++ and then compile them with the Python bindings,

87
00:07:03,000 --> 00:07:06,680
and I wanted to write as little C++ as possible.

88
00:07:06,680 --> 00:07:10,940
Some of these other libraries, I thought it would be a little bit more difficult to sort

89
00:07:10,940 --> 00:07:17,320
of translate the constraints because they're very, like, matrix operation heavy.

90
00:07:17,320 --> 00:07:23,480
So, basically, I wanted to create a general framework that I could build upon and keep

91
00:07:23,480 --> 00:07:25,960
the look and feel of a Python package.

92
00:07:25,960 --> 00:07:29,820
Most critically, I wanted to be able to write functions that would release the global interpreter

93
00:07:29,820 --> 00:07:36,820
lock in Python, the gil, to gain significant speed ups and also possibly use parallel computation.

94
00:07:39,740 --> 00:07:41,460
So what is Scython?

95
00:07:41,460 --> 00:07:47,480
It's an optimizing static compiler that allows you to wrap C or C++ libraries in Python.

96
00:07:47,480 --> 00:07:54,360
You can also compile Scython, which is a superset of Python, to C or C++, and then that compiled

97
00:07:54,900 --> 00:08:01,120
library can be imported into a standard Python script as an extension.

98
00:08:01,120 --> 00:08:06,140
So to get myself started, I picked a pretty simple static analysis problem, the loading

99
00:08:06,140 --> 00:08:07,880
of a cable at a midpoint.

100
00:08:07,880 --> 00:08:12,340
So this is actually a pretty difficult problem to solve by hand because the deformed shape

101
00:08:12,340 --> 00:08:15,560
of a cable changes significantly under the load.

102
00:08:15,560 --> 00:08:21,720
Fun fact, most of structural analysis is based on assuming that deformations are really small.

103
00:08:21,720 --> 00:08:26,040
This problem only involves three types of constraints, and there are five constraints

104
00:08:26,040 --> 00:08:27,280
in total.

105
00:08:27,280 --> 00:08:30,980
You've got anchors that will keep points zero and two from moving towards the center as

106
00:08:30,980 --> 00:08:32,560
the load is applied.

107
00:08:32,560 --> 00:08:37,360
The force itself is a constraint, and then there's a relationship between points zero

108
00:08:37,360 --> 00:08:41,840
and one and points one and two that are based on the material properties of the cable.

109
00:08:41,840 --> 00:08:48,840
It's basically how stretchy it is because it wants to snap back to its original length.

110
00:08:49,520 --> 00:08:54,440
So what the shape-op algorithm does is consider these constraints independently and projects

111
00:08:54,440 --> 00:08:58,800
the ideal position at each point separately based on the constraint, which is a local

112
00:08:58,800 --> 00:08:59,840
solve.

113
00:08:59,840 --> 00:09:03,080
The constraints are then weighted against each other to find the position of the particle

114
00:09:03,080 --> 00:09:08,080
that best satisfies the constraints applied, and this is an iterative process.

115
00:09:08,080 --> 00:09:11,560
The key feature of this algorithm is that the local solves for each constraint can be

116
00:09:11,560 --> 00:09:15,040
applied independently of one another, which means that you could possibly run this in

117
00:09:15,040 --> 00:09:16,800
parallel.

118
00:09:17,800 --> 00:09:24,800
So, ultimately, what I ended up with for this small problem was quite a large library,

119
00:09:24,800 --> 00:09:26,560
large number of files.

120
00:09:26,560 --> 00:09:32,200
So PXD and PYX file extensions are unique to Cython.

121
00:09:32,200 --> 00:09:38,320
Those PXD files are basically borrowing from C++ for header files, and then classes and

122
00:09:38,320 --> 00:09:42,680
methods are defined in the .pyx file.

123
00:09:43,560 --> 00:09:49,000
Okay, so I did end up writing a really small geometry library in C++ rather than dealing

124
00:09:49,000 --> 00:09:52,560
with wrapping an existing one, and that's just because I didn't want to deal with all

125
00:09:52,560 --> 00:09:57,640
of the licensing issues or large builds for some of the typical C++, like geometry libraries

126
00:09:57,640 --> 00:10:02,200
like CGAL.

127
00:10:02,200 --> 00:10:07,080
So the rest of the constraints were defined purely using Cython constructs, so each one

128
00:10:07,080 --> 00:10:12,080
of those required a PXD and a PYX file.

129
00:10:13,560 --> 00:10:17,680
So, why do I need all those header files?

130
00:10:17,680 --> 00:10:22,680
In Cython, if you're planning on importing a module, you have to have a PXD file that

131
00:10:22,680 --> 00:10:24,040
corresponds with it.

132
00:10:24,040 --> 00:10:28,360
So one thing that did jump out to me in Cython is that you can't just subclass all over

133
00:10:28,360 --> 00:10:29,360
the place.

134
00:10:29,360 --> 00:10:34,080
You only get one level of subclassing, though a subclass can inherit from more than one

135
00:10:34,080 --> 00:10:35,320
superclass.

136
00:10:35,320 --> 00:10:39,160
So for my purposes, this was fine because I could just set that a constraint was the

137
00:10:39,160 --> 00:10:46,160
parent class, and then each type of constraint, so those anchors, those cables, those forces,

138
00:10:46,160 --> 00:10:53,160
those are a child class with its own calculate implementation based on the constraint.

139
00:10:55,920 --> 00:11:01,760
So this is a typical header file for the parent constraint class with all of the type declarations.

140
00:11:01,760 --> 00:11:07,240
So each of these types are prefixed with CDEF, as they are data types and methods that will

141
00:11:07,240 --> 00:11:11,440
be used for running the program without the GIL, which means that they can't be Python

142
00:11:11,440 --> 00:11:12,360
objects.

143
00:11:12,360 --> 00:11:16,680
So CDEF methods also cannot be called from Python.

144
00:11:16,680 --> 00:11:22,400
If you'd either need to define a CPDef method to do so, so that's something that will run

145
00:11:22,400 --> 00:11:28,080
either in Python or as a C extension, or you're going to have to write a Python wrapper around

146
00:11:28,080 --> 00:11:32,840
that function.

147
00:11:32,840 --> 00:11:37,480
So with the actual methods for the general constraint class, the calculate method is

148
00:11:37,480 --> 00:11:43,760
going to be overridden based on all of the constraints, so it just has to have the same

149
00:11:43,760 --> 00:11:45,680
signature.

150
00:11:45,680 --> 00:11:49,400
The sum moves method is common to all of the constraints because that's the local solve

151
00:11:49,400 --> 00:11:53,240
per constraint.

152
00:11:53,240 --> 00:11:56,100
So the calculate method for an anchor point is really simple.

153
00:11:56,100 --> 00:12:01,640
It's just a 3D vector in space that will return the point wherever it is in space to the original

154
00:12:01,640 --> 00:12:05,280
anchor point.

155
00:12:05,280 --> 00:12:09,240
The calculate method for a cable is a bit more complex, and you can think of it like

156
00:12:09,240 --> 00:12:13,000
the forces from stretching a rubber band, where the rubber band wants to return to its

157
00:12:13,000 --> 00:12:17,280
original slack shape, so it imposes opposite forces on the two points that you're holding

158
00:12:17,280 --> 00:12:21,800
in the system.

159
00:12:21,800 --> 00:12:27,640
So getting back to my first slide with the XKCD joke, you do have to compile Cython.

160
00:12:27,640 --> 00:12:32,520
I wrote a bunch of helper functions to make sure that Cython would properly identify all

161
00:12:32,520 --> 00:12:37,640
of the different components in different directories, as well as attaching some extra compilation

162
00:12:37,640 --> 00:12:45,000
arguments to compile against OpenMP in case I wanted to use OpenMP in the future for parallelization.

163
00:12:45,000 --> 00:12:52,880
So by default, Cython compiles to C, so I needed to specify C++ as the language.

164
00:12:52,880 --> 00:12:58,320
For the actual build command, the inplace flag ensures that the compiled files are going

165
00:12:58,320 --> 00:13:02,800
to be in the same directory as the base files, so that importing from the package is really

166
00:13:02,800 --> 00:13:03,800
clear.

167
00:13:03,800 --> 00:13:11,440
It just looks like it would be if you were importing a standard Python file.

168
00:13:11,440 --> 00:13:15,960
So once you've compiled the Cython package, you're going to get the dynamic library files.

169
00:13:15,960 --> 00:13:19,920
I'm building on a Mac, so I've got an SO extension.

170
00:13:19,920 --> 00:13:25,360
You're also going to get new C++ files that are at the same level, and these are giant

171
00:13:25,360 --> 00:13:26,360
files.

172
00:13:26,360 --> 00:13:32,160
There's like thousands and thousands of lines of generated C++ code, so not necessarily

173
00:13:32,160 --> 00:13:36,960
something you're going to want to go digging through.

174
00:13:36,960 --> 00:13:40,480
So I tested this out.

175
00:13:40,480 --> 00:13:47,200
It was significantly faster than the original, like only vanilla Python methodology that

176
00:13:47,200 --> 00:13:48,200
I used.

177
00:13:48,280 --> 00:13:51,320
But while it was faster, I wanted to know how much faster it could be, and I wanted

178
00:13:51,320 --> 00:13:59,840
to figure out what the best way was to profile Cython code.

179
00:13:59,840 --> 00:14:04,340
So I mentioned wanting to use Cython so I could release the GIL to improve runtimes,

180
00:14:04,340 --> 00:14:07,880
but there are a number of steps you have to do before you can run Cython functions without

181
00:14:07,880 --> 00:14:09,320
the GIL.

182
00:14:09,320 --> 00:14:17,200
So you've seen this on previous slides a bit, but static typing and variable declarations

183
00:14:17,200 --> 00:14:21,860
are required.

184
00:14:21,860 --> 00:14:24,920
Other things that you can play around with to improve performance are taking some of

185
00:14:24,920 --> 00:14:28,760
the training wheels off on Python through adding compiler directives at the top of your

186
00:14:28,760 --> 00:14:29,760
files.

187
00:14:29,760 --> 00:14:35,960
So in this case, I took a bounce check and wrap around and turned those off.

188
00:14:35,960 --> 00:14:39,800
You really have to use these with caution because you'll get really funky errors if

189
00:14:39,800 --> 00:14:44,900
you build it and then accidentally index something that would wrap around, and this might be

190
00:14:44,900 --> 00:14:54,360
difficult to debug because you're just going to crash Python.

191
00:14:54,360 --> 00:15:00,560
And then I also highly recommend writing Python wrappers for the functions that we'll compile

192
00:15:00,560 --> 00:15:05,980
just to see because otherwise you can't access them, so you're going to have more code,

193
00:15:05,980 --> 00:15:09,240
but it will be easier to debug and test out.

194
00:15:09,240 --> 00:15:14,880
If you're not writing no-GIL functions, you can just use a CPDef function within

195
00:15:14,880 --> 00:15:21,800
Cython and those can be called from either C or Python.

196
00:15:21,800 --> 00:15:27,740
So other items for no-GIL functionality, use CDef rather than CPDef or standard Python

197
00:15:27,740 --> 00:15:32,180
def functions, though if you're not trying to optimize for no-GIL, you can absolutely

198
00:15:32,180 --> 00:15:36,600
mix these around in Cython for other use cases.

199
00:15:36,600 --> 00:15:40,600
Python is pretty good about warning you when it compiles if you have incompatible Python

200
00:15:40,600 --> 00:15:45,320
objects that are still embedded in your code, and for these CDef methods, you'll also need

201
00:15:45,320 --> 00:15:51,120
to make sure that the signature matches in your PXD file and your PYX file, so all of

202
00:15:51,120 --> 00:15:54,480
the arguments as well as the no-GIL flag.

203
00:15:54,480 --> 00:15:58,480
One thing to note is that writing no-GIL in the signature of a method doesn't mean that

204
00:15:58,480 --> 00:16:02,040
it's automatically going to default to no-GIL when you run it.

205
00:16:02,040 --> 00:16:08,960
You're just indicating that the method can be run without the GIL.

206
00:16:08,960 --> 00:16:14,140
One of the biggest lifesavers for this project was a feature in Cython that lets you see

207
00:16:14,140 --> 00:16:20,000
inside each PYX file just how much Python is being called in the method.

208
00:16:20,000 --> 00:16:24,680
So if you pass the dash A flag to the command line, it will automatically generate an HTML

209
00:16:24,680 --> 00:16:30,320
file for whichever file you're looking at, and that file will highlight just how much

210
00:16:30,320 --> 00:16:33,160
of a method is accessing Python objects.

211
00:16:33,160 --> 00:16:36,960
So you can see in this block, because I'm using NumPy to create arrays, that means that

212
00:16:36,960 --> 00:16:42,480
I'm creating Python objects.

213
00:16:42,480 --> 00:16:45,560
So ND arrays are Python objects.

214
00:16:45,560 --> 00:16:50,540
How can I have arrays that work without the GIL?

215
00:16:50,540 --> 00:16:56,440
You can use memory views to access NumPy arrays and update them within a no-GIL block, and

216
00:16:56,520 --> 00:17:01,920
so this was really useful for me to be able to keep track of particle positions as a 3D

217
00:17:01,920 --> 00:17:06,480
position array that I could pass to the calculate methods for each constraint.

218
00:17:06,480 --> 00:17:13,560
Okay, so it's all this prep work, and once you've done that, it's time to release the

219
00:17:13,560 --> 00:17:15,160
GIL.

220
00:17:15,160 --> 00:17:20,240
All you have to do is add with no-GIL to the part of the function that you want to run

221
00:17:20,240 --> 00:17:24,600
with no-GIL, and you just have to make sure that any of the functions that are called

222
00:17:24,600 --> 00:17:31,240
within that block are also designated as no-GIL, and you've checked all of those previous steps.

223
00:17:31,240 --> 00:17:34,360
So you should see serious speed-ups in your code.

224
00:17:34,360 --> 00:17:39,840
I was able to see more than 100 times speed-up once I released the GIL, which gave me near

225
00:17:39,840 --> 00:17:47,440
instant convergence for thousands of constraints.

226
00:17:47,440 --> 00:17:54,240
I still wanted to try out profiling with Cython, so I turned to PySpy, which is a low overhead

227
00:17:54,240 --> 00:17:58,080
profiling option that's implemented in Rust.

228
00:17:58,080 --> 00:18:03,280
So integrating this profiler into my code required a bit of setup, including adding

229
00:18:03,280 --> 00:18:09,040
some additional flags to my setup file to make sure that the generated C++ code from

230
00:18:09,040 --> 00:18:16,040
Cython would include line numbers, and then you also had to add it at the start of those

231
00:18:17,120 --> 00:18:24,120
compiler directives in each PyX file to have line trace set to true.

232
00:18:24,800 --> 00:18:30,560
My personal computer is a Mac, which works fine for some of the functionality of PySpy,

233
00:18:30,560 --> 00:18:32,800
but you can't profile native functions.

234
00:18:32,800 --> 00:18:37,520
So I ended up making a Docker container and ran PySpy with Linux.

235
00:18:37,520 --> 00:18:40,320
This was kind of fun to figure out how to make a container that would have the right

236
00:18:40,320 --> 00:18:43,960
permissions, so that's what that first command is.

237
00:18:43,960 --> 00:18:50,400
The second command includes flags that ensure that native subprocesses are recorded, and

238
00:18:50,400 --> 00:18:55,240
then all of that is going to be output for the results to a flame graph.

239
00:18:55,240 --> 00:18:58,760
And then the last command is just copying the flame graph out of the Docker container

240
00:18:58,760 --> 00:19:05,760
into my regular directory so that I can take down the container once it's finished running.

241
00:19:05,880 --> 00:19:10,560
So what I was able to get was a flame graph that gave me an idea of which processes during

242
00:19:10,560 --> 00:19:13,800
my simulation were taking the longest.

243
00:19:13,800 --> 00:19:18,400
It actually turned out the assembly of the particle system and translating all the Python

244
00:19:18,400 --> 00:19:23,720
objects to C, so basically initializing all of the objects, that was what was taking

245
00:19:23,720 --> 00:19:27,560
the longest.

246
00:19:27,560 --> 00:19:30,040
So moving on to the front end, this is great.

247
00:19:30,040 --> 00:19:34,200
I've made something that runs fast, but I can't see it.

248
00:19:34,200 --> 00:19:38,520
So I don't have any nice visual as a simulation yet, and I didn't want to reinvent the wheel,

249
00:19:38,520 --> 00:19:43,120
so I decided to integrate Pymaxion with a well-established open source 3D graphics program

250
00:19:43,120 --> 00:19:44,600
called Blender.

251
00:19:44,600 --> 00:19:48,080
This comic's going to make a little more sense in a few slides, but needless to say,

252
00:19:48,080 --> 00:19:52,240
there's a lot of fun with Blender Python versus system Python versus a virtual N Python

253
00:19:52,240 --> 00:19:56,400
up ahead.

254
00:19:56,400 --> 00:19:58,160
So what is Blender?

255
00:19:58,160 --> 00:20:04,120
As I mentioned, it is free and open source with the new GPL license.

256
00:20:04,120 --> 00:20:08,380
I've only listed a few of the possibilities with Blender, which will exceed the capabilities

257
00:20:08,380 --> 00:20:12,360
of Rhinoceros, which was the other 3D modeling program I was familiar with.

258
00:20:12,360 --> 00:20:16,400
Though figuring out how to do anything in Blender is like drinking from a fire hose.

259
00:20:16,400 --> 00:20:19,520
There are a lot of different things you can do with it.

260
00:20:19,520 --> 00:20:24,160
I barely scratched the surface with Blender with what I was doing with Pymaxion, because

261
00:20:24,160 --> 00:20:27,440
I was just mainly working with meshes.

262
00:20:27,440 --> 00:20:31,640
Blender also has a really well-developed Python API, though most of its underlying code is

263
00:20:31,640 --> 00:20:36,560
written in C or C++.

264
00:20:36,560 --> 00:20:40,960
So there's a very robust Blender ecosystem of add-ons.

265
00:20:40,960 --> 00:20:46,400
I've added some of my favorites from the built environment, though Sphere Chalk is

266
00:20:46,400 --> 00:20:52,120
more general purpose because it's a visual programming interface that's similar to Grasshopper,

267
00:20:52,120 --> 00:20:58,120
which is really commonly used by architects with Rhino.

268
00:20:58,120 --> 00:21:02,600
So how do you get your newly minted Cython package into the Blender Python?

269
00:21:02,600 --> 00:21:09,400
You're going to need to build Cython against the same version of Python as Blender Python,

270
00:21:09,480 --> 00:21:12,840
You can interrogate everything about your Blender Python install from the scripting

271
00:21:12,840 --> 00:21:14,200
tab.

272
00:21:14,200 --> 00:21:20,240
There's an IPython interface to basically put in sys.path or sys.versioninfo.

273
00:21:20,240 --> 00:21:25,680
I decided to symlink my Cython package into the site packages for the Blender Python install

274
00:21:25,680 --> 00:21:34,000
rather than copying it or building it with Blender Python.

275
00:21:34,000 --> 00:21:40,200
And then so now PyMaxion is part of the Blender site packages, but I still need to add how

276
00:21:40,200 --> 00:21:43,920
Blender is going to interact with that package through its UI and operators.

277
00:21:43,920 --> 00:21:48,680
There's a lot of disagreement about what the best way to develop with Blender is.

278
00:21:48,680 --> 00:21:53,480
I've typically just created something to close and relaunch Blender whenever I'm making changes

279
00:21:53,480 --> 00:21:58,680
because hot reloading doesn't always work, and its efficacy keeps changing as Blender

280
00:21:58,680 --> 00:22:04,720
evolves, things that work in 2.9 for hot reloading don't necessarily work in 3.1.

281
00:22:04,720 --> 00:22:09,380
But at a minimum, I do recommend adding Blender to launch from the command line because then

282
00:22:09,380 --> 00:22:16,360
all of your outputs or debugging is going to print to a separate console window.

283
00:22:16,360 --> 00:22:22,560
So I put my Blender package into the addons directory also using a symbolic link.

284
00:22:22,560 --> 00:22:31,240
Sorry.

285
00:22:31,240 --> 00:22:36,680
So this is the typical file structure for a basic Blender addon, and on the right you

286
00:22:36,680 --> 00:22:42,480
can see that there's this side menu, and that's actually the menu that I created for the PyMaxion

287
00:22:42,480 --> 00:22:44,480
interface for Blender.

288
00:22:44,480 --> 00:22:49,080
The Blender context in which you can use PyMaxion is the object and editing context on one of

289
00:22:49,080 --> 00:22:52,080
the tabs.

290
00:22:52,080 --> 00:22:59,280
So I have a number of buttons that are part of this menu as well as some pop out panels.

291
00:22:59,280 --> 00:23:03,560
And the Blender operator file is where you're going to find all of your UI actions that

292
00:23:03,560 --> 00:23:06,160
call PyMaxion.

293
00:23:06,160 --> 00:23:14,760
So it has a specific Blender class structure in terms of attributes and methods.

294
00:23:14,760 --> 00:23:20,960
And it also has a number of requirements for, like, unique labels, so that's, like, underscore

295
00:23:20,960 --> 00:23:26,160
ID name, underscore label, and then here you can see that I have to define execute, which

296
00:23:26,160 --> 00:23:34,700
is also has return a specific set of values.

297
00:23:34,700 --> 00:23:38,160
So for all of those nice panels, you have to have a specific prefix in order to the

298
00:23:38,160 --> 00:23:41,160
specific attributes.

299
00:23:41,160 --> 00:23:48,240
Otherwise it won't register when you tell it to basically add your package.

300
00:23:48,480 --> 00:23:54,640
So within I've got these pop out panels, you have some additional attributes that you

301
00:23:54,640 --> 00:23:56,560
can set basic values.

302
00:23:56,560 --> 00:24:03,280
So in this case it's adding the strengths of the constraints with the typical notation.

303
00:24:03,280 --> 00:24:10,920
And all of these UI panels have a draw method.

304
00:24:10,920 --> 00:24:15,420
So most typical add-ons also have a property file, and you have to register every single

305
00:24:15,420 --> 00:24:20,100
constant that you use for those menus, which in my case resulted in a lot of code pretty

306
00:24:20,100 --> 00:24:21,100
quickly.

307
00:24:21,100 --> 00:24:27,940
So rather than using a properties file, I decided instead to put those constraints and

308
00:24:27,940 --> 00:24:32,660
basically their bounds, so like all of the options for, like, how precise that value

309
00:24:32,660 --> 00:24:34,740
is going to be that the user can set.

310
00:24:34,740 --> 00:24:43,920
So I put that into a JSON file that basically groups each set of values by the type of constraint.

311
00:24:43,920 --> 00:24:49,860
And then within my actual menu file for loading into Blender, I was able to import and iterate

312
00:24:49,860 --> 00:24:53,760
through that JSON file to automatically register each one of these properties.

313
00:24:53,760 --> 00:24:58,440
So it's going to be easier for me in the future to add on to this JSON file rather than having

314
00:24:58,440 --> 00:25:03,880
to write a bunch of classes.

315
00:25:03,880 --> 00:25:06,960
And so what do I have after all that?

316
00:25:06,960 --> 00:25:12,440
Pimaxian currently only supports a couple of constraints as basically a proof of concept,

317
00:25:12,440 --> 00:25:16,680
but I was able to replicate the kind of hanging cloth form finding that I showed on that first

318
00:25:16,680 --> 00:25:17,680
few slides.

319
00:25:17,680 --> 00:25:20,920
I'd like to do more to make it more interactive.

320
00:25:20,920 --> 00:25:27,120
You can use modal operators within Blender to sort of allow for some interactivity, or

321
00:25:27,120 --> 00:25:31,520
I was looking into possibly using sockets that would be able to feed updated geometry

322
00:25:31,520 --> 00:25:38,000
back so that the user can have more interaction with the simulation.

323
00:25:38,000 --> 00:25:42,080
So in closing, I'd really like to thank the Python Software Foundation and PyLadies for

324
00:25:42,080 --> 00:25:46,040
the opportunity to speak here, particularly the New York City PyLadies group who acted

325
00:25:46,040 --> 00:25:50,000
as the sounding board for a much shorter version of this talk.

326
00:25:50,000 --> 00:25:54,220
And I'd also like to thank the Recurse Center because I worked mainly on the Blender part

327
00:25:54,220 --> 00:25:57,840
of this project when I was doing a retreat there last summer.

328
00:25:57,840 --> 00:25:59,040
So thank you.

