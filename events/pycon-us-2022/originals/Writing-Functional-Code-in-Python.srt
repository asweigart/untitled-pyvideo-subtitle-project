1
00:00:00,000 --> 00:00:09,640
Welcome, everybody. Hopefully everyone can hear me. Welcome to the afternoon session

2
00:00:09,640 --> 00:00:15,760
of PyCon 2022 in Salt Lake City. Before I begin this entire presentation, it's on my

3
00:00:15,760 --> 00:00:20,120
GitHub. If you're running a Jupyter Notebook, you can run it on a Jupyter Notebook. The

4
00:00:20,120 --> 00:00:23,560
PDF slides are up there. My GitHub is vic-humor-1981.

5
00:00:23,560 --> 00:00:31,520
All right. So a little bit about me. I work for Excella. We are a technology consulting

6
00:00:31,520 --> 00:00:36,280
firm based out of Arlington, Virginia. We do three things that people sort of give us

7
00:00:36,280 --> 00:00:42,480
money for. Modern software delivery, AI and analytics, as well as agile transformation.

8
00:00:42,480 --> 00:00:46,840
The website, excella.com, is up there. We have openings right now for data engineers

9
00:00:46,840 --> 00:00:54,000
and data scientists. So feel free to go to the website or reach out to me afterwards.

10
00:00:54,000 --> 00:01:00,840
Right. And some projects that I'm currently involved in. Gotocode.io. It's sort of like

11
00:01:00,840 --> 00:01:06,080
a leak code meets remote interview. Again, we have Jupyter Notebook integration in several

12
00:01:06,080 --> 00:01:10,640
languages. So if you ever want to play around with Rust and Jupyter kernel, go ahead and

13
00:01:11,640 --> 00:01:18,120
If you use the registration code, PyCon 2022, all lowercase, you can get a free extended

14
00:01:18,120 --> 00:01:25,400
subscription. Yeah. And I'm also working on HBCU Digital, which is an ESPN sort of app

15
00:01:25,400 --> 00:01:30,480
for historically black colleges and universities. We're trying to add a lot of live content

16
00:01:30,480 --> 00:01:38,880
there. We are on Roku, Apple TV, as well as mobile apps. All right. Enough jibber jabber

17
00:01:38,880 --> 00:01:46,080
about me. Let's talk a little bit about functional programming. So in the last five, six years,

18
00:01:46,080 --> 00:01:51,080
I'm sure all of us have sort of heard of, played around with, experimented with some

19
00:01:51,080 --> 00:01:55,520
of these. Let's call them like the new kids on the block. These newer languages. We have

20
00:01:55,520 --> 00:02:05,280
React.js out there in JavaScript. There's F sharp for all the .net folks. There is obviously

21
00:02:05,280 --> 00:02:10,880
And Kotlin are still going strong in the JVM. And for IOS development, we now have Swift,

22
00:02:10,880 --> 00:02:16,000
so you don't have to write Objective C. And as well as there are more traditional functional

23
00:02:16,000 --> 00:02:22,640
programming languages still out there, like Haskell or OCaml. So the idea behind functional

24
00:02:22,640 --> 00:02:28,360
programming is a pretty straightforward idea, but one that has far-reaching consequences,

25
00:02:28,360 --> 00:02:33,720
which is why I think I like it. So the idea behind functional programming is that we are

26
00:02:33,720 --> 00:02:39,080
going to impose a restraint or we're going to try to sort of constrain our code, put

27
00:02:39,080 --> 00:02:47,400
a restriction whereby we write our code only using pure functions. So what exactly is a

28
00:02:47,400 --> 00:02:54,000
pure function? A pure function is one that does not have side effects. So the next logical

29
00:02:54,000 --> 00:02:58,940
question, well, then, what is a side effect? So side effect, it turns out, is anything

30
00:02:59,940 --> 00:03:06,020
a pure computation. If you mutate the state of variable, if you modify a data structure

31
00:03:06,020 --> 00:03:11,980
in place, if you throw an exception within your code, if you deal with any sort of IO,

32
00:03:11,980 --> 00:03:18,700
the console, networking, these are side effects. Another way of sort of looking at or thinking

33
00:03:18,700 --> 00:03:24,940
about this is that a function has inputs and it has outputs. And this is sort of ubiquitous,

34
00:03:24,940 --> 00:03:28,660
not just a Python, but in just programming in general, a function has inputs and it has

35
00:03:28,660 --> 00:03:34,100
outputs. If we do anything inside that function that doesn't explicitly deal with the inputs

36
00:03:34,100 --> 00:03:39,140
or outputs of that function, then that is by definition sort of a side effect. It's

37
00:03:39,140 --> 00:03:44,500
not explicit in the signature of the function that it's doing this thing. And so that's

38
00:03:44,500 --> 00:03:53,400
kind of the idea behind the side effecting. Right. Okay. A pure function has the property

39
00:03:53,400 --> 00:03:58,200
of referential transparency. So when we talk about side effects and what are pure functions,

40
00:03:58,200 --> 00:04:03,860
it's sort of like something we can prove. It's like mathematical. We can go through

41
00:04:03,860 --> 00:04:08,400
and I couldn't paste the definition there of what referential transparency actually

42
00:04:08,400 --> 00:04:15,440
is. But there is an easier sort of way to think about this. So, yeah, let's get to some

43
00:04:15,440 --> 00:04:21,560
coding examples so that we can actually understand this a little bit better. So I have a function

44
00:04:22,440 --> 00:04:27,240
here. It just adds a list of numbers. So we're going to start by creating a variable, sum,

45
00:04:27,240 --> 00:04:33,280
we're going to assign it to zero, we'll go through every item in our list, and we will

46
00:04:33,280 --> 00:04:37,760
add the numbers. And we can see that it gets the sort of the right output when we add those

47
00:04:37,760 --> 00:04:44,040
numbers. But if I think back, you know, to like algebra class or math class, and I know

48
00:04:44,040 --> 00:04:49,480
that's why everyone is here, because they wanted to go back to algebra class, when I

49
00:04:49,480 --> 00:04:54,480
say something like x equals one, y equals two, what is x plus y? I would tell you that

50
00:04:54,480 --> 00:04:59,240
it's three, because in my head I took x and I replaced it with the value one, and I took

51
00:04:59,240 --> 00:05:05,440
y, I replaced it with the value two, and one plus two equals three. So on this first block

52
00:05:05,440 --> 00:05:11,160
of code, I said sum is equal to zero. And when you tell me that sum equals zero, then

53
00:05:11,160 --> 00:05:16,120
mathematically if I use sum on the right-hand side of any expression, it should yield the

54
00:05:16,120 --> 00:05:21,480
same result. So let's take a look at how that works then, right? So instead of sum

55
00:05:21,480 --> 00:05:27,120
equals sum plus n, I replaced it with sum equals zero plus n, because you told me that

56
00:05:27,120 --> 00:05:31,800
sum is equal to zero. And as you can see, it doesn't give the same answer. It actually

57
00:05:31,800 --> 00:05:35,920
gives an incorrect answer, because it gets to the, it iterates through the list, it gets

58
00:05:35,920 --> 00:05:40,480
to the last item in that list, and it says, okay, sum equals eight plus zero, so it's

59
00:05:40,480 --> 00:05:46,080
equal to eight. But that's not the same value we got before. And even though this code

60
00:05:46,080 --> 00:05:52,040
block is sort of like very innocuous, very, very simple, we can see that perhaps there's

61
00:05:52,040 --> 00:05:57,160
some things that we don't like about it. I could easily imagine that the list that we're

62
00:05:57,160 --> 00:06:03,680
trying to add up might become very, very large. And so now we might think, okay, let's try

63
00:06:03,680 --> 00:06:08,240
to apply some concurrency to it. Let's add some threads and run the same block of code

64
00:06:08,240 --> 00:06:13,440
using threads. And obviously we could maybe partition the list so that, you know, the

65
00:06:13,520 --> 00:06:17,320
threads are operating on different parts of the list. But if we get to that line, sum

66
00:06:17,320 --> 00:06:22,200
equals sum plus n, and we do this mutation, we can't have two threads mutating the variable

67
00:06:22,200 --> 00:06:29,560
sum at the same time. We'd have to do something like a lock, a metaphor, sorry, a mutex, some

68
00:06:29,560 --> 00:06:34,080
sort of lock, or maybe an atomic operation. But in any case, we're going to have to deal

69
00:06:34,080 --> 00:06:41,000
with this in a concurrent sense if we ever want to make this multithreaded. So the problem

70
00:06:41,000 --> 00:06:46,520
really here is the mutable state of sum. We want to sort of get rid of this mutable state

71
00:06:46,520 --> 00:06:51,360
because as we saw in the previous slide, mutation is a form of side effect. And we can see that

72
00:06:51,360 --> 00:06:56,600
this function isn't referentially transparent. When we substituted the value zero for what

73
00:06:56,600 --> 00:07:03,760
sum was, it didn't return the same thing. So all right, let's try to then rid ourselves

74
00:07:03,760 --> 00:07:08,200
of the mutable state sum. And there's some pretty straightforward ways that we can do

75
00:07:08,960 --> 00:07:15,960
which is just let's use recursion. So if the list is one item, just return that. Otherwise,

76
00:07:15,960 --> 00:07:20,540
return the first item plus the sum of the rest of the list. And we can see that that

77
00:07:20,540 --> 00:07:25,960
gives us the same value and does not have the consequence of a mutable state within

78
00:07:25,960 --> 00:07:33,440
the function. Okay. The second way that we could deal with the same problem is by using

79
00:07:33,440 --> 00:07:37,720
what we call a higher order function. A higher order function is a function that takes in

80
00:07:37,720 --> 00:07:42,680
a function as a parameter or returns a function as its output. And so here we're going to

81
00:07:42,680 --> 00:07:48,160
import this cool function called reduce from itertools. And itertools' first parameter

82
00:07:48,160 --> 00:07:52,560
is obviously it's a lambda. It takes two things from the list and returns one item and then

83
00:07:52,560 --> 00:07:57,880
sort of recursively applies it to the list. And so this concept is going to come back

84
00:07:57,880 --> 00:08:04,800
up in a few slides. In functional programming, we like using higher order functions to abstract

85
00:08:04,800 --> 00:08:11,440
around things like having to mutate state. So we see two ways here that we can get rid

86
00:08:11,440 --> 00:08:16,040
of that mutable state. The two examples here, add numbers two and add numbers three, are

87
00:08:16,040 --> 00:08:22,560
referentially transparent and these are peer functions versus the one up here we know that

88
00:08:22,560 --> 00:08:26,880
it's not. We've sort of proven that this is not referentially transparent and therefore

89
00:08:26,880 --> 00:08:32,800
that function is impure in a functional sense. It doesn't obey the properties and laws that

90
00:08:32,800 --> 00:08:38,120
we like in math. And that's sort of where this premise is going to go with functional

91
00:08:38,120 --> 00:08:45,400
programming. All right. So now that we've sort of accepted the idea that we want to

92
00:08:45,400 --> 00:08:49,680
use higher order functions, I sort of did a thing. I don't know if it's a good thing

93
00:08:49,680 --> 00:08:56,960
or a bad thing, but I added some classes. So this is a library that you can pip install,

94
00:08:56,960 --> 00:09:01,400
pip install PyFX. And so it's like my first attempt at trying to introduce some of the

95
00:09:01,400 --> 00:09:06,440
classes that you might see in a language like Haskell and most certainly in Scala.

96
00:09:06,440 --> 00:09:11,320
You will see these types. And so the types we're going to discuss today are option, try,

97
00:09:11,320 --> 00:09:16,000
either, actually we're not going to cover either, but we are going to do option, try,

98
00:09:16,000 --> 00:09:22,080
and future. Either is there in the library, but we're not going to cover either today.

99
00:09:22,080 --> 00:09:30,400
So yeah. So let's talk about abstracting away certain behaviors, some common behaviors.

100
00:09:30,400 --> 00:09:34,640
And the way that we're going to sort of approach this is we're going to use classes. So the

101
00:09:34,640 --> 00:09:41,440
option class is a parent class or like some sort of interface. And it has two child classes,

102
00:09:41,440 --> 00:09:47,040
actual implementations, one of which is called sum and the other one is called empty. So

103
00:09:47,040 --> 00:09:53,480
if there is a value, we encapsulate it in the sum class and otherwise it's empty. And

104
00:09:53,480 --> 00:09:58,040
as always, let's go ahead and create an example data model that we can sort of play around

105
00:09:58,040 --> 00:10:03,280
with. So the idea here is that we're going to create some classes. We're going to have

106
00:10:03,280 --> 00:10:08,320
a person. A person is going to have a contact. And the contact is going to have a name. And

107
00:10:08,320 --> 00:10:14,360
the name has the property's first name and last name. So this is sort of like a nested

108
00:10:14,360 --> 00:10:21,360
sort of hierarchical class structure. And so let's say given a person, I want to go

109
00:10:21,400 --> 00:10:28,400
ahead and find the first name of contact number one. So I use data classes and then I, let's

110
00:10:28,480 --> 00:10:34,080
not worry about the get functions, the get last name, the get first name. Those are just

111
00:10:34,080 --> 00:10:39,160
wrappers and we're going to use those so that we can see how the option class sort of works.

112
00:10:39,160 --> 00:10:43,800
But first we're just going to sort of use the attributes directly. So our example is

113
00:10:43,800 --> 00:10:49,260
we're going to be given a person and we want to go ahead and try to find the first name

114
00:10:49,260 --> 00:10:54,860
of contact number one for that person. So we create this like person object and you

115
00:10:54,860 --> 00:10:59,380
can see we're just going to use like if statements. So all along the way anything could be empty.

116
00:10:59,380 --> 00:11:02,320
That's really what we're dealing with. We have this nested hierarchy. We want to get

117
00:11:02,320 --> 00:11:06,780
to this thing in our hierarchy. But along the way we have to do these checks because

118
00:11:06,780 --> 00:11:11,420
things can be, have no value. They could be empty and that would cause a problem. So we

119
00:11:11,420 --> 00:11:16,820
have to do the checks that if the person is there, if the person's contact one is there,

120
00:11:16,860 --> 00:11:22,540
if they have a name, then return this value. Otherwise return none. Right? And this could

121
00:11:22,540 --> 00:11:28,180
get more complicated. The more nested and the more hierarchical structure that we have

122
00:11:28,180 --> 00:11:32,260
to our classes, the more complicated branching and conditional logic that we're going to

123
00:11:32,260 --> 00:11:37,560
have to use to get from this class to that class. Okay. So let's take a look at how this

124
00:11:37,560 --> 00:11:48,300
works with the option class. So this is where functional purists sort of what they like.

125
00:11:48,300 --> 00:11:53,300
In the second example we don't really have any, the branching logic is abstracted away

126
00:11:53,300 --> 00:11:58,560
for you with an operation called flat map. And so flat map is a way that we chain or

127
00:11:58,560 --> 00:12:03,740
combine inputs and you're going to see the same techniques with the other classes as

128
00:12:03,740 --> 00:12:09,580
well. So it takes the output of one and puts it as the input to the next function. And

129
00:12:09,580 --> 00:12:13,580
what functional purists would really like about this sort of function is as you can

130
00:12:13,580 --> 00:12:20,020
see the second function below, we get an input, we apply a series of functions and we're given

131
00:12:20,020 --> 00:12:27,660
an output. To a functional person this is how every program should always work. We get

132
00:12:27,660 --> 00:12:33,200
an input, apply a series of functions and get an output. And it does the same thing

133
00:12:33,200 --> 00:12:38,680
that the first function does. The other sort of observation that we can make between the

134
00:12:38,680 --> 00:12:42,320
two functions is that the first function, even though it tells me that it's returning

135
00:12:42,320 --> 00:12:46,680
a string, it doesn't tell me anything in the function's signature that this string could

136
00:12:46,680 --> 00:12:52,760
potentially be empty. In the lower function I can see that it returns an option of string.

137
00:12:52,760 --> 00:12:58,680
So the caller of this method now knows that this value that is being returned could be

138
00:12:59,680 --> 00:13:06,080
forced to deal with the case of emptiness. And in the case of an option class you have

139
00:13:06,080 --> 00:13:13,080
something get or else. So if there's no value you can supply a value there. And right. So

140
00:13:13,080 --> 00:13:19,400
all the functions there, the get contact one, contact.get name, name.get first name, if

141
00:13:19,400 --> 00:13:26,880
I go up a slide, sorry, those functions are just simple functions that return an option.

142
00:13:26,880 --> 00:13:31,440
And that's really what FlatMap is doing for us. It's just chaining the options together

143
00:13:31,440 --> 00:13:38,080
so that we can rewrite this logic in a way that reads left to right. The second API is

144
00:13:38,080 --> 00:13:43,820
also what we call, it's a fluent API. It reads left to right, just like how English reads.

145
00:13:43,820 --> 00:13:48,440
You don't necessarily read English like inside out with if statements and while loops. You

146
00:13:48,440 --> 00:13:53,440
kind of read it just left to right. So we get the benefit of chaining our operations

147
00:13:53,720 --> 00:14:00,720
and sort of seeing a fluent API style. Okay. So that's sort of how we can deal with emptiness

148
00:14:01,200 --> 00:14:08,200
using the option class. The second example is going to deal with now with exceptions

149
00:14:08,240 --> 00:14:12,440
because what we talked about before is that an exception just like that example that we

150
00:14:12,440 --> 00:14:18,760
did with the sums and we mutated sum, that function was impure. So any time I raise an

151
00:14:18,760 --> 00:14:23,560
exception within my code, I'm also suffering from the same problem that my code is not

152
00:14:23,560 --> 00:14:28,520
referentially transparent and the function is not pure. So the same way that we dealt

153
00:14:28,520 --> 00:14:33,320
with option where option was a parent class and we had two child classes to deal with

154
00:14:33,320 --> 00:14:39,440
the behaviors that we wanted, we have a class called try. And the try class is also a parent

155
00:14:39,440 --> 00:14:44,640
class. The try class has two children classes, the first of which is called success and the

156
00:14:44,640 --> 00:14:51,640
other one is called failure. So success encapsulates the successful value of something happening

157
00:14:52,320 --> 00:14:58,800
without an error and failure encapsulates the exception that might be thrown in that

158
00:14:58,800 --> 00:15:05,800
event, like an accept. So let's take an example here where something that could potentially

159
00:15:06,040 --> 00:15:10,960
fail, it could go wrong. So we're going to look at an example of JSON parsing. So we

160
00:15:10,960 --> 00:15:16,000
have two strings. The first string is going to be parsable. It's going to parse to our

161
00:15:16,000 --> 00:15:22,200
model. It's correct. The second string I've deliberately made a mistake. There's no attribute

162
00:15:22,200 --> 00:15:28,280
called first name is wrong. So when I try to sort of parse my JSON and get it into my

163
00:15:28,280 --> 00:15:33,400
model, it is going to raise an error. It's going to raise an exception. So let's take

164
00:15:33,400 --> 00:15:39,040
a look at how we might do this in a very straightforward way. So we have like parse person, we're going

165
00:15:39,040 --> 00:15:44,360
to do a JSON loads, we'll load it into a dictionary, we'll check some attributes from that person

166
00:15:44,360 --> 00:15:49,120
and we'll parse the contact and from that contact we'll go ahead and parse the name.

167
00:15:49,120 --> 00:15:55,280
The parse name function there, we can see, accept, it raised a type error. I couldn't

168
00:15:55,280 --> 00:16:02,280
deserialize the name. So that function is not pure. And similarly like we saw with option,

169
00:16:03,040 --> 00:16:07,640
when I just look at the signature of parse name, it tells me it takes the dictionary's

170
00:16:07,640 --> 00:16:12,880
input and it returns a name. Nothing in the signature of that function tells me that this

171
00:16:12,880 --> 00:16:17,400
could potentially throw or raise an exception. Perhaps it's there in the docs and stuff like

172
00:16:17,400 --> 00:16:24,000
that, but I think we could make it more explicit. So the example there, it works. It gets the

173
00:16:24,000 --> 00:16:30,360
first name of contact one from our JSON string. If you go back, sorry, Alice is the correct

174
00:16:30,360 --> 00:16:36,520
first name there. So it works. But the function definitely raises an exception and perhaps

175
00:16:36,520 --> 00:16:41,800
is not as explicit as we would like to make it. So we'll take an example. Oh, yes, I forgot

176
00:16:41,800 --> 00:16:45,960
about this. So this is what happens if we sort of parse the second string, which is

177
00:16:45,960 --> 00:16:50,800
invalid. We'll get the error that the first name, there's no attribute called first name

178
00:16:50,800 --> 00:16:55,880
is wrong. So we can see that we get this exception when we try to parse the name because the

179
00:16:55,880 --> 00:17:02,880
second JSON was not a good JSON for our model. Right. So let's try to rewrite this using

180
00:17:02,880 --> 00:17:09,880
the try class. So the parse name function here, we're going to use try.of, which will

181
00:17:09,880 --> 00:17:15,880
encapsulate like a callable object. And if that callable succeeds, it will return a success.

182
00:17:15,880 --> 00:17:19,880
If the callable fails, it will return a failure. And in the signature of the function, we can

183
00:17:19,880 --> 00:17:25,880
see that, okay, it takes in the same dictionary as the input, but the return value is not

184
00:17:25,880 --> 00:17:31,880
just a name. It's a try of a name. So someone who sees that code, who reads that code can

185
00:17:32,880 --> 00:17:38,880
see that this function could fail. It could succeed or it could fail. And just like we

186
00:17:38,880 --> 00:17:43,880
saw with the option class, we're going to have to sort of deal with the case of failure.

187
00:17:43,880 --> 00:17:50,880
Oh, sorry. Okay. And so we're going to go ahead and test that function. Oh, yeah, sorry.

188
00:17:50,880 --> 00:17:55,880
I forgot one thing on this. The way that we deal with failure in the try class is very

189
00:17:55,880 --> 00:18:00,880
similar to how we would deal with the failure in the option class. In the option class,

190
00:18:00,880 --> 00:18:04,880
when it was empty, we applied a method called get or else. So when it was empty, we said

191
00:18:04,880 --> 00:18:09,880
get or else do this. And we can do that with try also. But in this case, we're going to

192
00:18:09,880 --> 00:18:15,880
use or else supply, which is like get or else, but it takes in a callable as its parameter.

193
00:18:15,880 --> 00:18:20,880
So in this case, we're going to call a function called handle parse error, which will create

194
00:18:20,880 --> 00:18:25,880
the contact, but it will just warn us that we couldn't parse this. So if we have, like,

195
00:18:25,880 --> 00:18:29,880
a lot of JSON that we're parsing, we want to be warned. We want to know that an error

196
00:18:29,880 --> 00:18:35,880
happened. We might want to continue parsing, even though there was some kind of mistake

197
00:18:35,880 --> 00:18:42,880
or error. So, yeah, these are the tests. So person one, that's the good string there.

198
00:18:42,880 --> 00:18:47,880
And you can see it does the exact same thing that we saw before without throwing an exception.

199
00:18:47,880 --> 00:18:52,880
It gets the first name Alice. And then in the second one, it tells us, oh, there was an error

200
00:18:52,880 --> 00:18:58,880
parsing the contact, contact one. And it gives us the second person, and it says that the

201
00:18:58,880 --> 00:19:03,880
contact name is none. So that's sort of like the same thing that we saw with option. We're

202
00:19:03,880 --> 00:19:10,880
trying to just be more explicit with how we deal and handle errors using the try class.

203
00:19:10,880 --> 00:19:15,880
So we've abstracted the behavior of emptiness. We've abstracted around the behavior of try

204
00:19:15,880 --> 00:19:21,880
accept blocks. And the third class that we're going to briefly touch upon is how we can

205
00:19:21,880 --> 00:19:27,880
use the same concepts to deal with concurrency, futures. I'm sure futures are there, and,

206
00:19:27,880 --> 00:19:31,880
you know, a lot of different languages we've seen, promises. Future works a little differently

207
00:19:31,880 --> 00:19:38,880
than option and try in that there is no explicit parent class and child class. What future does

208
00:19:38,880 --> 00:19:43,880
is future is going to start off, and it's going to have no value. The value is not completed.

209
00:19:43,880 --> 00:19:48,880
It's none. After some period of time, future will eventually behave like the try. Once the

210
00:19:48,880 --> 00:19:54,880
future completes, either there's a successful value from the future or there's a failure value

211
00:19:54,880 --> 00:20:00,880
from that same future, which encapsulates your exception that you're going to get back.

212
00:20:00,880 --> 00:20:06,880
So let's go ahead and see how this works. The simplest thing that we can do is sort of just run

213
00:20:06,880 --> 00:20:13,880
something asynchronously in a new thread, and that's done with future.run. So we just have a

214
00:20:13,880 --> 00:20:19,880
real easy function here. It sleeps for three seconds, and it will go ahead and return the value

215
00:20:19,880 --> 00:20:25,880
100. So we're going to check some things. The first thing we're going to do is sort of time the

216
00:20:25,880 --> 00:20:31,880
whole thing, and we're going to, once we get the value, we're just going to do a little map

217
00:20:31,880 --> 00:20:35,880
statement and add one to the resulting value. We're going to check if the future is done

218
00:20:35,880 --> 00:20:39,880
immediately. It's not going to be done because it just started, and there's a three-second wait,

219
00:20:39,880 --> 00:20:43,880
and then we're going to wait four seconds. We're going to check again if the future is done, at

220
00:20:43,880 --> 00:20:49,880
which point it's true, done equals true. We'll print out the result of that sort of value, which is

221
00:20:49,880 --> 00:20:54,880
101, and we've got the overall execution time, which is roughly four seconds. The time that's

222
00:20:54,880 --> 00:21:00,880
sleep for in there is what's causing it to be about four seconds. So yeah, pretty simple example.

223
00:21:00,880 --> 00:21:06,880
We can easily run something in a new thread using future. Okay, but what about combining two things?

224
00:21:06,880 --> 00:21:12,880
Just like we saw flat map to combine our options and our tries, we can do the same sort of higher

225
00:21:12,880 --> 00:21:18,880
order function that we saw to combine futures. So here we have two threads. One is going to sleep for

226
00:21:18,880 --> 00:21:24,880
three seconds, return 100. The other one is going to sleep for five seconds, return the value 50,

227
00:21:24,880 --> 00:21:30,880
and then what we want to do is sort of add up those two results, right? So you can see result one we

228
00:21:30,880 --> 00:21:36,880
call future.run. Result two we call the second function, and then we say result one, we flat map it

229
00:21:36,880 --> 00:21:42,880
into result two, and we add their two values, and we add a little callback. So the callback here is

230
00:21:42,880 --> 00:21:48,880
doing the same thing that we did in the more imperative example where we're trying to calculate

231
00:21:48,880 --> 00:21:54,880
what is the total overall running time, like you see. So in this example, one thread took three seconds,

232
00:21:54,880 --> 00:22:00,880
and another thread took five seconds. Both threads executed in parallel. Once the longer thread was

233
00:22:00,880 --> 00:22:06,880
done, it combined the results. We got the value 150. It was roughly more or less five seconds of

234
00:22:06,880 --> 00:22:14,880
execution time. Okay. So what happens then if something were to go wrong, though? So in this example,

235
00:22:14,880 --> 00:22:20,880
we'll deal with an error. So the first function is actually going to do the same thing. So the

236
00:22:20,880 --> 00:22:26,880
first function is actually going to just throw an exception, which we know is impure, but for this example,

237
00:22:26,880 --> 00:22:34,880
we'll go ahead and do it anyway just to see what kind of happens. And now on our callback, we have the

238
00:22:34,880 --> 00:22:40,880
same code to flat map and map, but on our callback, because once the feature is complete, it sort of

239
00:22:40,880 --> 00:22:46,880
behaves like a try. It has a success and a failure, and we can check that. So in my callback on this

240
00:22:46,880 --> 00:22:54,880
example now, we can simply check, did the result fail or did it succeed, and handle those two use cases

241
00:22:54,880 --> 00:23:00,880
separately. So in this example, again, it ran both things in parallel, the three-second thread and the five-second thread.

242
00:23:00,880 --> 00:23:06,880
The three-second thread failed, so it never actually had to... The five-second thread kept running,

243
00:23:06,880 --> 00:23:11,880
but for the purpose of the computation, it actually finished in three seconds because it got the error,

244
00:23:11,880 --> 00:23:19,880
and it erred out. So we have this sort of callback style on the feature that we can use to check if the value,

245
00:23:19,880 --> 00:23:29,880
once it's complete, succeeds or fails. Okay. But I'm going to go up a couple slides here. So in this example

246
00:23:29,880 --> 00:23:36,880
where we are combining features using flat map and map comprehensions and stuff like that, we could easily see...

247
00:23:36,880 --> 00:23:42,880
Okay, so we have two threads running here, two results, values, asynchronous computations that we care about the result,

248
00:23:42,880 --> 00:23:49,880
but what if there was three or four or five or more results? This could get map, flat map, map, flat map,

249
00:23:49,880 --> 00:23:57,880
over and over and over again. This can get a little complicated. And the real thing is so when I do feature.run,

250
00:23:57,880 --> 00:24:03,880
I'm getting a future value back, and I get another future value back and another future value back,

251
00:24:03,880 --> 00:24:11,880
and eventually I'm left with a list, a list of future values. And what I really want to do is I want to sort of invert that.

252
00:24:11,880 --> 00:24:18,880
Instead of having a list of future values, I would like a single feature with a list of values that have the combined results

253
00:24:18,880 --> 00:24:27,880
of all my threads. And in a language like Scala, that function is called future.traverse. It inverts the two things,

254
00:24:27,880 --> 00:24:35,880
so it will take a list of futures and make it a future list, a future of a list. So let's go ahead and take a look at how that works.

255
00:24:35,880 --> 00:24:42,880
And so we have result one, which is the same thing, feature.run, delay result one, feature.two, result two,

256
00:24:42,880 --> 00:24:48,880
and here we call future.traverse and we supply the list of futures. And then the same thing,

257
00:24:48,880 --> 00:24:58,880
we just call the on complete handler to get the execution time and sort of like our final result to print it out.

258
00:24:58,880 --> 00:25:04,880
Right, so future.traverse, we can see if we're dealing with like a lot of different sort of computational results,

259
00:25:04,880 --> 00:25:12,880
we can quickly invert a list of futures into a future of a single list. All right.

260
00:25:12,880 --> 00:25:21,880
So some of the key takeaways here is that when we use side effects, we can see that sometimes our code is not as explicit

261
00:25:21,880 --> 00:25:28,880
as we would like it to be. It makes the code a little bit harder to reason about. If the functions are more referentially transparent,

262
00:25:28,880 --> 00:25:34,880
if they're pure, then it allows us to sort of reason about our functions in a more localized manner.

263
00:25:34,880 --> 00:25:42,880
And it opens up us to using higher order functions and abstractions to sort of deal with common behaviors that we might have in our code.

264
00:25:42,880 --> 00:25:48,880
We saw the examples dealing with emptiness, dealing with concurrency, and dealing with exceptions.

265
00:25:48,880 --> 00:25:53,880
And all of these examples, as you can see, they sort of just like English, they read left to right.

266
00:25:53,880 --> 00:25:58,880
We're no longer sort of writing if statements and things that are nested and harder to read.

267
00:25:58,880 --> 00:26:04,880
Everything is just reading left to right. We get an input value, we apply some functions, and we get a return value.

268
00:26:04,880 --> 00:26:14,880
And that is sort of how a functional programmer thinks about the world, how they think about programs, and how they want every program to kind of behave.

269
00:26:14,880 --> 00:26:24,880
And that's really all I had. Thank you guys so much. That's my Twitter handle, vicumr1981, and that's my GitHub page.

270
00:26:24,880 --> 00:26:39,880
Thanks, Vic, for that wonderful talk. I would now like to open the floor for discussion and invite questions from the audience.

271
00:26:39,880 --> 00:26:59,880
Any questions for Vic?

272
00:27:09,880 --> 00:27:37,880
Thank you.

273
00:27:37,880 --> 00:27:44,880
In the future example, why was it a list of int versus a list of tri-event?

274
00:27:44,880 --> 00:27:45,880
Yes.

275
00:27:45,880 --> 00:27:54,880
Okay, so on the callback, it's just a single tri-event. So you have...actually, you might be right. Maybe I do...I'm going to have to look at my slides.

276
00:27:54,880 --> 00:28:02,880
That's a very good question. You might be right, because it's optional static typing. Maybe I did screw up the optional annotation on that.

277
00:28:02,880 --> 00:28:04,880
Let me actually check my slide real quick.

278
00:28:04,880 --> 00:28:08,880
So the previous example, without the traverse, had the tri-int.

279
00:28:08,880 --> 00:28:10,880
Okay, this example right here, right?

280
00:28:10,880 --> 00:28:15,880
Yeah, versus the previous example that had just result as a tri-int.

281
00:28:15,880 --> 00:28:26,880
Oh, right, right, right. So handle result takes in a list of int. Here, the handle result takes in a list of int versus this example where it's a tri of a single int.

282
00:28:26,880 --> 00:28:27,880
Yes.

283
00:28:27,880 --> 00:28:41,880
Okay. No, that could be...that's an error on the slide, actually. You are right. It should be a tri of list of int on that, because you can check success and failure. It is a tri of list of int. I should have probably corrected that.

284
00:28:41,880 --> 00:28:46,880
Nice. And then what would this be a list of tri-int versus a tri-list int?

285
00:28:46,880 --> 00:28:49,880
Okay, so what is the difference?

286
00:28:49,880 --> 00:28:50,880
Yeah.

287
00:28:50,880 --> 00:29:03,880
So a list of tri-int is sort of a little harder to...because each individual tri, now you have to check the success and failure. But if you have a tri of list of int, I can check the success and failure of the whole thing, right?

288
00:29:03,880 --> 00:29:13,880
Did this all this succeed or did all of it fail? So inverting it becomes like a little useful, because now I can just check the whole thing, right? Does that make sense? Does that make sense?

289
00:29:13,880 --> 00:29:14,880
Yeah, makes sense. Thank you.

