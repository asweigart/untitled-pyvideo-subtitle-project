1
00:00:00,000 --> 00:00:05,400
Welcome everyone. Thanks for coming. This is going to be the repo we're going to be

2
00:00:05,400 --> 00:00:09,000
working out of. You don't have to go there right now. I'll put this back up in a minute.

3
00:00:09,000 --> 00:00:15,320
But I just, in case for some of you who wanted to get started, you can go over there. But

4
00:00:15,320 --> 00:00:26,800
we'll get to that. You are here at PyCon 2023 to attend building a Python backed frontend

5
00:00:26,800 --> 00:00:34,640
with HTMX and Tail1 CSS. If you're not here to attend this tutorial, you may have wandered

6
00:00:34,640 --> 00:00:42,440
into the wrong room. But hopefully we're all ready to go. Let me just get this. Quick introduction.

7
00:00:42,440 --> 00:00:49,360
My name's Mario. I am not a software engineer by trade. I'm a business analyst. I do try

8
00:00:49,360 --> 00:00:56,160
to sprinkle in some Python into my day to day from time to time. But most of my Pythoning

9
00:00:56,160 --> 00:01:01,920
is done in the off hours between my wife and four year old who are there in the back.

10
00:01:01,920 --> 00:01:06,960
That tends to happen at night. So I have this blog Python by night. That's what I try to

11
00:01:06,960 --> 00:01:14,600
do in the evenings. Now, we have a lot to get through today. So I just want to get right

12
00:01:14,600 --> 00:01:20,440
into it. I'm going to show you how to build something really cool. We're going to use

13
00:01:21,440 --> 00:01:27,040
which we'll keep coming back to. Now, Fast API is the web framework I've used in the

14
00:01:27,040 --> 00:01:33,040
past. I've used Django for a couple projects. You don't have to have Fast API experience

15
00:01:33,040 --> 00:01:38,800
to kind of get through this. We'll just be using some features. But hopefully if you

16
00:01:38,800 --> 00:01:43,720
have any sort of experience with any other web framework, you'll be right at home. We're

17
00:01:43,720 --> 00:01:48,920
going to use Jinja for templating. It's very similar to Django templates if you've used

18
00:01:48,920 --> 00:01:53,400
those in the past. And of course if you come from Flask, you're pretty familiar with those.

19
00:01:53,400 --> 00:01:59,480
Tail1 CSS is the utility first CSS framework that we're going to be talking about. Very

20
00:01:59,480 --> 00:02:06,480
awesome. It gets you going really quickly. I'm super excited about that. And of course,

21
00:02:06,480 --> 00:02:13,480
HTMX, which brings all these awesome modern browser features directly into your HTML.

22
00:02:13,600 --> 00:02:18,600
So that's super exciting. That's going to be our tech stack. I haven't talked about

23
00:02:18,600 --> 00:02:25,600
a little piece. We are going to be using a library called TinyDB. It's a very small...

24
00:02:25,900 --> 00:02:31,480
It's meant to emulate a basic database layer if you've used any other ORM, whether it's

25
00:02:31,480 --> 00:02:36,560
from Django's side or something like SQL Alchemy. That's usually what you'd put in place of

26
00:02:36,560 --> 00:02:43,560
that. TinyDB is just a... It uses a JSON file. It's the local database, kind of like TinyDB.

27
00:02:47,280 --> 00:02:53,480
So without... What you didn't see there is you didn't see any JavaScript. We're not going

28
00:02:53,480 --> 00:03:00,080
to be using any JavaScript. Now the intention here is to reduce as much complexity in the

29
00:03:00,080 --> 00:03:04,720
building of your web application. So we're going to get rid of that and we're only going

30
00:03:04,720 --> 00:03:11,400
to be using hypertext. Now I know that sounds kind of like a retro science fiction term.

31
00:03:11,400 --> 00:03:16,320
That's probably because it is. I think it was coined back in the 60s. Now the idea of

32
00:03:16,320 --> 00:03:22,480
that is that text is displayed with these hyperlinks and ordinarily that's linking to

33
00:03:22,480 --> 00:03:26,840
data that's in a database. And that's kind of where the concept of the World Wide Web

34
00:03:26,840 --> 00:03:32,780
came from, from the idea of hypertext. And that's what HTMX embraces. And then we use

35
00:03:32,940 --> 00:03:39,820
Tailwind CSS to style that up for us and we don't put in that client side JavaScript layer.

36
00:03:39,820 --> 00:03:46,820
Now Tailwind CSS, again, you use these utility classes to style up your HTML. Now if you

37
00:03:49,620 --> 00:03:55,780
don't know too much about it, there are somewhat valid criticisms that it makes your... It

38
00:03:55,780 --> 00:04:00,980
looks a lot like inline styles if you've used HTML and you're kind of putting inline styles

39
00:04:01,020 --> 00:04:08,020
and then they get really, really long. It does make your HTML look a little busier and

40
00:04:08,020 --> 00:04:15,020
at first it starts seeming a little repetitive. But what you'll find is when you're styling

41
00:04:15,100 --> 00:04:20,340
strictly from your HTML and you're not going to a separate file, to a CSS file, it will

42
00:04:20,340 --> 00:04:26,980
dramatically increase your productivity. And it remains fairly lean because you're compiling

43
00:04:26,980 --> 00:04:32,260
at build time. You're only compiling a CSS file to use that's based on the classes that

44
00:04:32,260 --> 00:04:37,900
you're using. You're not bringing in this huge framework and then picking and choosing

45
00:04:37,900 --> 00:04:44,900
and leaving it in your design. And because these utility classes are already preset,

46
00:04:45,700 --> 00:04:52,420
it allows for a very consistent design pattern and also it helps to think of responsive design

47
00:04:52,460 --> 00:04:59,460
from the very beginning. It's very easy to bring in some responsive features. Now, HTMLX,

48
00:05:00,380 --> 00:05:07,380
I'm super excited about HTMLX. It allows you to make requests from any HTML element. So

49
00:05:07,540 --> 00:05:14,540
usually you use a form or an input element and you hit submit. That sends a post request

50
00:05:15,300 --> 00:05:22,300
to the server or you're using hyperlinks, send a get request to the server. So you can

51
00:05:22,420 --> 00:05:29,420
do that. But with HTMLX, you can send a get request, a post request, delete any of those

52
00:05:29,700 --> 00:05:36,700
HTTP verbs from any element. You can send it from a div element, from a paragraph element,

53
00:05:37,300 --> 00:05:42,940
and you can define what triggers to use, whether it's a mouse over or a click or a key press,

54
00:05:42,940 --> 00:05:48,220
all sorts of cool stuff with no JavaScript. You're just putting it right in the HTML and

55
00:05:48,220 --> 00:05:52,860
then from the server side, you're just receiving that request and sending back the response

56
00:05:52,860 --> 00:05:59,140
that replaces only that DOM element. So you're not doing a full page refresh, you're just

57
00:05:59,140 --> 00:06:03,580
refreshing that one element or a separate target element that you define within the

58
00:06:03,580 --> 00:06:10,580
HTMLX call. So all without leaving the comfort of HTML. You could be doing all of this, the

59
00:06:10,660 --> 00:06:15,380
tailwind stuff, the HTMLX stuff, all within your HTML. You can see how quickly you can

60
00:06:15,380 --> 00:06:21,220
get through prototyping and designing your website. So we're going to build a pretty

61
00:06:21,220 --> 00:06:27,420
simple website, I'd call it. Now, I generally don't like the word simple because simple

62
00:06:27,420 --> 00:06:34,420
for some might not be so simple for others. And the usage here with me is kind of ironic.

63
00:06:35,780 --> 00:06:40,860
The sense is that we're trying to reduce complexity and that is definitely something that we're

64
00:06:40,860 --> 00:06:45,700
doing when we're getting rid of JavaScript in our build process. So in other words,

65
00:06:45,700 --> 00:06:51,140
if you're already familiar with HTML markup, then HTMLX fits right into that paradigm

66
00:06:51,140 --> 00:06:56,760
without much more mental overhead, trying to learn a new framework or another front

67
00:06:56,760 --> 00:07:02,900
end library. So the complexity of the behavior then is sent to the backend, which is something

68
00:07:02,900 --> 00:07:06,820
that hopefully we're all comfortable with in the Python sphere. You're doing all that

69
00:07:06,860 --> 00:07:12,700
logic on the server side. So the loops you see here playing is kind of how I started

70
00:07:12,700 --> 00:07:19,700
this project as a simple site where it starts with just a very basic ugly HTML page that

71
00:07:22,020 --> 00:07:27,660
just starts being built up little by little. Now, where we pick up is at the tail end of

72
00:07:27,660 --> 00:07:34,180
this so that we can really just get into the features of tailwind and HTMLX. So that's

73
00:07:34,180 --> 00:07:39,340
where we're going to start today. But a little bit of housekeeping before we jump right in.

74
00:07:39,340 --> 00:07:44,700
If you have questions, you'll notice that I put some Post-It notes in between any of

75
00:07:44,700 --> 00:07:50,460
the tables where you'll be sitting. Those Post-It notes are there to help you if you

76
00:07:50,460 --> 00:07:55,020
have any questions. What I want you to do is take one of those Post-It notes and just

77
00:07:55,020 --> 00:08:01,220
put it on the corner of your laptop like this so I can see that you have a question. The

78
00:08:01,260 --> 00:08:06,300
reason for that is sometimes when you have a question, you might be thinking something,

79
00:08:06,300 --> 00:08:12,500
but you don't want to lower your hand to type. So that way you can keep typing, troubleshooting

80
00:08:12,500 --> 00:08:17,180
through whatever question you might have. You might even find out why you're typing

81
00:08:17,180 --> 00:08:23,180
at which point you can just take your tab off. But that'll help me see maybe a lot of

82
00:08:23,180 --> 00:08:28,700
people have questions. We can stop back. I can step back. So I'll either answer your

83
00:08:28,780 --> 00:08:32,700
questions from up here or I'll walk by if it seems like it's something you just kind

84
00:08:32,700 --> 00:08:39,700
of need assistance with. I'll be happy to walk by. So with all that said, are there

85
00:08:39,980 --> 00:08:46,980
any questions so far? All right. Let's dive right in. We want to set up your environment.

86
00:08:47,420 --> 00:08:52,100
That's usually the most important part when we're getting ready with a tutorial. This

87
00:08:52,380 --> 00:08:59,380
is again the repo we'll be using. I have it both as a bit.ly link or fully typed out there.

88
00:09:00,660 --> 00:09:07,020
If you want to go ahead and navigate to that. There are a couple ways to set up your environment.

89
00:09:07,020 --> 00:09:14,020
If you've done tutorials in the past, sometimes it involves just cloning the repo, pulling

90
00:09:15,260 --> 00:09:20,860
it locally, setting up your environment. That's the traditional route. If you're comfortable

91
00:09:20,860 --> 00:09:27,860
doing it that way, you can go ahead and do it that way. I recommend to use Codespaces.

92
00:09:28,900 --> 00:09:35,660
Codespaces is a newish feature with GitHub. You do have to have a GitHub account. So if

93
00:09:35,660 --> 00:09:40,740
you do not have a GitHub account, you'd probably want to just go a separate route. But with

94
00:09:40,740 --> 00:09:47,740
GitHub, there is a feature called Codespaces. Now what Codespaces does is it containerizes

95
00:09:48,740 --> 00:09:54,620
the entire repo. I think it uses Docker, but it doesn't matter because it's all on the

96
00:09:54,620 --> 00:10:01,620
cloud. That's pretty much it. You get it started, it containerizes the repo, puts it on the

97
00:10:01,700 --> 00:10:08,460
cloud, and then it gives you, I think it's 60 hours per month thereabouts to kind of

98
00:10:08,460 --> 00:10:13,180
play around with it. You don't have to install dependencies. You don't have to activate environments.

99
00:10:13,180 --> 00:10:20,180
It's all within the browser. It's VS Code-like. If you're used to using VS Code, you can

100
00:10:20,220 --> 00:10:25,700
just go right in there in the browser, and you can also open it up in your local desktop

101
00:10:25,700 --> 00:10:32,700
version of VS Code, and it'll be tunneled right into that containerized environment.

102
00:10:33,340 --> 00:10:37,980
It's really pretty great because then you don't have to worry about cloning and setting

103
00:10:37,980 --> 00:10:44,980
up your environment and installing from requirements.txt, etc., etc., etc. All those instructions,

104
00:10:45,500 --> 00:10:50,980
though, for either one of those are in the repo on the README, so you can check that

105
00:10:50,980 --> 00:10:57,700
out. Of course, if some of you are more hardcore, you can build from scratch. Some of you have

106
00:10:57,700 --> 00:11:02,580
your own bootstrapped ways of getting started, and that's totally cool. If you're comfortable

107
00:11:02,900 --> 00:11:09,060
doing it that way, just get the requirements.txt file, load up your project, and go at it

108
00:11:09,060 --> 00:11:14,940
your own way, that's perfectly acceptable. Feel free to do that as well. I am going to

109
00:11:14,940 --> 00:11:21,940
be kind of moving quickly. I will wait until we all feel kind of comfortable getting that

110
00:11:23,940 --> 00:11:30,940
set up. If you're using Codespaces, what you're going to want to look for is the button over

111
00:11:31,620 --> 00:11:36,100
here. There's one that says code, and there's one that says use this template. You can use

112
00:11:36,100 --> 00:11:42,340
either one to get the Codespace started. I like using the template. If you use the code

113
00:11:42,340 --> 00:11:48,280
one, it actually gets you the git history and a couple other things, but using this

114
00:11:48,280 --> 00:11:55,280
template just pulls up a very fresh version of the latest version of the repo. You click

115
00:11:56,280 --> 00:12:02,660
use this template, open in a Codespace, and then it takes you to a screen that looks something

116
00:12:02,660 --> 00:12:08,480
like this. It takes it about a minute to two minutes to build that container. That only

117
00:12:08,480 --> 00:12:13,600
happens the first time. If you exit out and you come back to GitHub and go to Codespaces,

118
00:12:13,600 --> 00:12:18,840
you can just fire it back up. It doesn't have to rebuild the container, so that's only that

119
00:12:18,840 --> 00:12:24,560
first time. Again, it takes about two minutes or so.

120
00:12:24,560 --> 00:12:30,280
If you're getting all set up and getting that set up, I'm just going to talk really quickly

121
00:12:30,280 --> 00:12:37,280
about Fast API. Again, that's the web framework I use. It's a modern fast web framework. It's

122
00:12:38,320 --> 00:12:44,040
in the name there. Mostly for me, the fast is not just merely performance based. It's

123
00:12:44,040 --> 00:12:51,040
also for the developer. It really helps with your development speed when you have type

124
00:12:51,040 --> 00:12:55,880
hinting, which is used for validation and for editor support, for autocomplete. It really

125
00:12:55,880 --> 00:13:00,800
speeds up your development when using Fast API. That's why I like to use it. It has session,

126
00:13:00,800 --> 00:13:06,320
cookie support, all other sorts of features you'd expect from a modern framework. That's

127
00:13:06,320 --> 00:13:12,200
why I use it. Again, if you're coming from any other web framework, whether Django or

128
00:13:12,440 --> 00:13:16,760
JavaScript, hopefully the things we're doing here are not too out of the ordinary. If you

129
00:13:16,760 --> 00:13:19,880
have questions, I'll be happy to come by and answer them.

130
00:13:19,880 --> 00:13:24,880
Then I talked a little bit about TinyDB. Again, it's just a document-based database that uses

131
00:13:24,880 --> 00:13:31,880
JSON. It's meant to emulate any ORM or ODM that you're comfortable with. I like to use

132
00:13:32,680 --> 00:13:39,680
Beanie with MongoDB. That's the ODM I prefer to use. It's just there just to get us moving

133
00:13:42,280 --> 00:13:49,280
I've also built this helper class called CRUD to further abstract the database operations

134
00:13:52,200 --> 00:13:59,200
you'd ordinarily be doing in a web-based application. For example, a user makes a request that goes

135
00:13:59,520 --> 00:14:03,440
to your server. You're usually making some sort of database call and then you're doing

136
00:14:03,440 --> 00:14:07,780
some sort of logic and then you're presenting a response back to the user. That's a pretty

137
00:14:07,780 --> 00:14:14,780
common workflow operation. That's what TinyDB is there for. That's as much of the intro

138
00:14:17,300 --> 00:14:22,060
as I can get through. Now I just want to have you go ahead and open up the application and

139
00:14:22,060 --> 00:14:29,060
make sure it runs. If you're not used to Fast API, there's the equivalent of Run Server

140
00:14:30,620 --> 00:14:35,500
or I forget the Flask command. It's going to look something like this.

141
00:14:35,500 --> 00:14:42,500
Uvicorn is the server application. App.main represents the path to the module that has

142
00:14:45,340 --> 00:14:52,340
your application, the instance of your application. It's called App in this case. If you had called

143
00:14:53,300 --> 00:15:00,300
your app something else, you could do it that way. Then the reload flag there is it's a

144
00:15:00,620 --> 00:15:07,620
watcher. Once you start your application, any save to any of your py files will just

145
00:15:08,620 --> 00:15:14,020
restart the server so that you can see the changes in real time.

146
00:15:14,020 --> 00:15:21,020
Let's go ahead and get comfortable. Open up the application. Get it started. When you're

147
00:15:21,300 --> 00:15:26,400
done or when you see it running, if you're in Codespaces, what happens is it opens up

148
00:15:26,440 --> 00:15:31,920
a port. Sometimes it might give you an error the first time. That's because the order of

149
00:15:31,920 --> 00:15:38,920
the build is a little odd. Maybe just go back to the Codespace and re-click on the, I think

150
00:15:42,720 --> 00:15:49,720
is the 127.0, the address and it will open up on the port. You should see the application.

151
00:15:50,880 --> 00:15:56,040
It's called MusicBinder. I'll give you a couple minutes. If you have any questions, go ahead

152
00:15:56,040 --> 00:16:03,040
and use your sticky tabs or you can raise your hands. I can come by in the meantime.

153
00:16:03,040 --> 00:16:10,040
Do I click this? No. Go up to the top. That is my... Or I go to yours. Go up to the top.

154
00:16:12,320 --> 00:16:19,320
Over here. Are you signed in? Well, I'm... Yeah, you might need to. Now you can go here.

155
00:16:19,320 --> 00:16:26,320
What will it do? Click and open in Codespace. When I went to mine, it said new Codespace,

156
00:16:30,040 --> 00:16:37,040
but it's a different problem. Now it will build. It will take about two minutes. Once

157
00:16:40,600 --> 00:16:46,960
it loads... Yeah, so once your Codespace loads, if it's still loading, it will bring up a

158
00:16:47,040 --> 00:16:52,400
new browser window. It looks like an editor. It will look kind of like VS Code and it will

159
00:16:52,400 --> 00:16:57,120
have a terminal at the bottom. Usually it brings up the readme file first, but you can

160
00:16:57,120 --> 00:17:03,000
ignore that or close it. There will be a terminal window at the bottom. You can type in this

161
00:17:03,000 --> 00:17:08,880
command and then it will start up the server. It will tell you where to... You can control

162
00:17:08,880 --> 00:17:15,880
click, I think, on the address and it will bring up a version of the website. I could

163
00:17:16,760 --> 00:17:23,760
probably... You know what? I probably should have done this. This way. Again, this is the

164
00:17:27,920 --> 00:17:33,400
button here and you'd want to open up a Codespace. If you're signed in, you need to be signed

165
00:17:33,400 --> 00:17:40,400
in to see that button. I'll go ahead and kind of go through this as well just so that you

166
00:17:40,880 --> 00:17:47,880
can get a sense. Any other questions? Is anyone still working on setting up their environment?

167
00:17:48,520 --> 00:17:55,520
Okay, one back there. It looks like we're nearly there. Does everyone who's in so far,

168
00:17:56,320 --> 00:18:03,320
are you able to see the MusicBinder web application? Yeah? Oh, perfect. All right. As you're starting

169
00:18:04,320 --> 00:18:11,320
to poke around in there and you start seeing the structure of the application, it's kind

170
00:18:11,760 --> 00:18:18,360
of meant to emulate a real world application. I try to follow a structure that you may be

171
00:18:18,360 --> 00:18:24,880
familiar with unless you have a slightly different paradigm of building. I know things are a

172
00:18:24,880 --> 00:18:29,680
little bit more opinionated in the Django space, but still, hopefully you're able to

173
00:18:29,680 --> 00:18:35,840
get a sense of what's going on. This is what the structure might look like. Most of what

174
00:18:35,840 --> 00:18:41,880
we'll be doing on the HTMX front will be in the routes.py file. If you're coming from

175
00:18:41,880 --> 00:18:46,800
Flask, maybe that's a view or I think in the Django world, those are endpoints. That's

176
00:18:46,800 --> 00:18:53,800
kind of where we define the logic of what happens when a user goes to a certain endpoint.

177
00:18:53,960 --> 00:19:00,960
Of course, all the templates are in this directory here. That's where we'll do a lot of the Tailwind

178
00:19:00,960 --> 00:19:07,960
CSS stuff. Let's go ahead and focus on the templating. Again, hopefully most of you have

179
00:19:10,000 --> 00:19:16,040
some experience with templates if you're coming from Django or Flask. If you don't, it may

180
00:19:16,040 --> 00:19:21,160
be a lot to get through, so you might miss a few things, but hopefully you get enough

181
00:19:21,160 --> 00:19:27,200
here that you can come back and get a sense or just look through the repo there at how

182
00:19:27,200 --> 00:19:30,000
things are being done.

183
00:19:30,000 --> 00:19:37,000
The template directory, the awesome thing about templates is that you can layer them.

184
00:19:37,760 --> 00:19:41,920
If you're going to have all your meta tags throughout your website, you might just have

185
00:19:41,920 --> 00:19:47,960
one base template. Then you bring that into all your other templates as you do things.

186
00:19:47,960 --> 00:19:53,240
That's kind of what we've done here. I have a base.html file. The underscore there is

187
00:19:53,240 --> 00:20:00,240
just, for me it's helpful, but some of you might not use an underscore. Either way, all

188
00:20:04,040 --> 00:20:11,040
the things you would bring in to the rest of your web application are contained in there.

189
00:20:11,040 --> 00:20:17,160
If you take a look, it'll have all the meta tags and defining the style sheets, et cetera.

190
00:20:17,160 --> 00:20:24,160
Then the meet, if you will, would be in these files, about or catalog or main. That's the

191
00:20:25,960 --> 00:20:32,960
content that users would see. You would bring in the content that's in the base, footer

192
00:20:36,200 --> 00:20:39,960
and header files that are up there. That's kind of how it's structured, just so you get

193
00:20:39,960 --> 00:20:46,960
a sense of it. The header file, for example, contains all the links that you see up at

194
00:20:47,000 --> 00:20:52,480
the top plus the search bar. If you ever wanted to just make a change to the links, you would

195
00:20:52,480 --> 00:20:55,800
just go to that header file, you would change it up, and then it would change it throughout

196
00:20:55,800 --> 00:21:00,720
your website. That's kind of the idea of templates. You don't have to keep redoing things in different

197
00:21:00,720 --> 00:21:07,720
files. You just do it once and you would see it throughout your site.

198
00:21:08,280 --> 00:21:14,480
Rendering templates in FastAPI, again, I mentioned that those endpoints, those views are defined

199
00:21:14,480 --> 00:21:21,480
in the routes.py file. Now, FastAPI does have this class called Jinja2 templates. That's

200
00:21:25,400 --> 00:21:32,080
used to define the template location and the context. That template context is perhaps

201
00:21:32,080 --> 00:21:39,080
the most important thing to keep in mind when working with templates. The context contains

202
00:21:39,080 --> 00:21:45,040
those Python objects that you want to have access to within your templates. If you're

203
00:21:45,040 --> 00:21:50,800
sending over a dictionary or a list or even class objects, you can then use them within

204
00:21:50,800 --> 00:21:57,800
your template and display what you need to the user. It's very, very useful. I think

205
00:21:58,320 --> 00:22:05,320
with... Actually, I do have a slide on that later.

206
00:22:05,320 --> 00:22:12,120
Now, just in case you are already familiar with templates, the main thing you'll see

207
00:22:12,120 --> 00:22:17,760
is the template response from the FastAPI where you'll see this in the routes. Usually,

208
00:22:17,760 --> 00:22:24,760
I'm sending a response that contains the template file. The template file there, like template.html

209
00:22:25,720 --> 00:22:32,720
in this case, would be relative to the directory that you defined with the Jinja2 templates

210
00:22:33,360 --> 00:22:40,360
class. Then the context will always look like this. On the FastAPI side, it must send back

211
00:22:41,680 --> 00:22:48,680
the request object, which is what you're getting from the user. I think Flask does this for

212
00:22:48,960 --> 00:22:55,960
you. You don't have to specify it. Actually, if you look at the different ways that Django

213
00:22:55,960 --> 00:23:01,480
or Flask do the same thing, Django, you do a render and then you send the request. You

214
00:23:01,480 --> 00:23:08,480
define the template file and then you send the context through. Flask, similarly, you're

215
00:23:10,560 --> 00:23:16,920
doing render template. You're defining the file. Then the context is just whatever you

216
00:23:16,920 --> 00:23:21,240
send. I don't think you have to define the request. It's all fairly similar. Hopefully,

217
00:23:21,240 --> 00:23:28,240
this gets you more or less acquainted with how we're sending things through. If you're

218
00:23:29,240 --> 00:23:36,080
noticing things really well, you'll notice there's a library called Jinja2-Fragments.

219
00:23:36,080 --> 00:23:42,880
I do use this in the application. We'll talk about it a little bit later. There's a class

220
00:23:42,880 --> 00:23:49,880
called Jinja2Blocks. That's a drop-in replacement for Jinja2 templates from FastAPI. What it

221
00:23:49,880 --> 00:23:56,880
does is it allows rendering of individual blocks of content within a template file.

222
00:23:58,880 --> 00:24:04,120
Again, let me just say that over. Let's say you have a template file that has a lot of

223
00:24:04,120 --> 00:24:11,120
content. Jinja2Blocks allows you to send just a portion of that template back to the user.

224
00:24:11,320 --> 00:24:18,320
It's very useful with a particular HTML interaction that we'll talk about later. It's not super

225
00:24:18,320 --> 00:24:23,320
required to use HTML, but it can become very helpful because you're no longer having to

226
00:24:23,320 --> 00:24:30,320
split up little pieces of HTML code to split things up. We'll talk about that.

227
00:24:31,320 --> 00:24:38,320
That's all gotten us to the point where now we can really get busy with Tailwind CSS.

228
00:24:38,320 --> 00:24:44,320
How do we make these templates look better? That's the question. I don't know how familiar

229
00:24:44,560 --> 00:24:50,320
all of you might be with Tailwind CSS, so I just want to talk about it really quickly.

230
00:24:50,320 --> 00:24:56,840
Tailwind, I said already, comes with these utility classes that ensure a consistency

231
00:24:56,840 --> 00:25:03,840
in design. For example, one of the things I'm thinking about is it comes with a pre-defined

232
00:25:04,120 --> 00:25:11,120
color palette. Say you want a background color that's red. It has different shadings of red

233
00:25:11,160 --> 00:25:18,160
from 100, 200, 300, 400, all the way to 900 that has very consistent shading. Then if

234
00:25:18,320 --> 00:25:25,320
you're using the same shading of red throughout your design, it'll ensure a very consistent

235
00:25:26,480 --> 00:25:31,880
design. Of course, if you're coming from the CSS world, you might be thinking, well, you

236
00:25:31,880 --> 00:25:37,040
can use CSS classes and all that stuff where you're pre-defining those things as well.

237
00:25:37,040 --> 00:25:44,040
It's similar to that. What I appreciate about it is that your CSS doesn't keep growing really

238
00:25:44,440 --> 00:25:49,680
large. Sometimes when you're working in CSS, you forget that you're no longer using this

239
00:25:49,680 --> 00:25:53,320
class, but it's just kind of growing, and then you don't know which part to delete because

240
00:25:53,320 --> 00:25:59,960
you're like, wait, am I using that somewhere? It can get pretty huge. That's if you're doing

241
00:25:59,960 --> 00:26:06,960
it from scratch. It is very safe to just add and remove those utility classes from your

242
00:26:07,040 --> 00:26:14,040
HTML because what happens is you're compiling or you're building the CSS file that you're

243
00:26:14,120 --> 00:26:19,600
going to use, so it stays as lean as you're keeping your code. If you're only using specific

244
00:26:19,600 --> 00:26:26,600
classes for spacing and color design, it's only going to compile those into the CSS file.

245
00:26:28,440 --> 00:26:33,640
If you're changing things completely, it'll compile again. You don't have to worry about

246
00:26:33,680 --> 00:26:40,120
tooling around in your CSS file. It's super great for this template slash component-based

247
00:26:40,120 --> 00:26:46,080
design. It complements the way that we're building with HTML. That's a great reason

248
00:26:46,080 --> 00:26:52,080
to use Tailwind. One of the questions that comes up with Tailwind is, let's say you're

249
00:26:52,080 --> 00:26:59,080
looking at the links in the... Yeah, go ahead and look at the links that are in the templates

250
00:26:59,760 --> 00:27:06,760
folder that are in the header HTML file. What you'll notice is there's three links, and

251
00:27:08,640 --> 00:27:15,640
those links all have a very long HTML element. People often wonder about code duplication.

252
00:27:17,560 --> 00:27:22,760
You see it's repeated, and we come from a programming world where we don't want to repeat

253
00:27:22,760 --> 00:27:29,760
ourselves. For these components such as buttons or cards, one thing you'll notice is that

254
00:27:30,200 --> 00:27:36,160
structure is just as important as the CSS a lot of times. Even though, let's say you've

255
00:27:36,160 --> 00:27:43,160
created custom classes for these very specific-looking links, what may happen is, let's say you don't

256
00:27:45,200 --> 00:27:50,000
want links anymore, but you want to keep the design or you want to change them to a different

257
00:27:50,280 --> 00:27:57,280
element, you would have to redo the CSS as well as the front-end piece as well. These

258
00:28:01,120 --> 00:28:06,080
complex changes, let's say you wanted to change text to a link, well, now you're having to

259
00:28:06,080 --> 00:28:13,080
change the A element in your CSS. It can become really cumbersome. Instead, you can make all

260
00:28:14,000 --> 00:28:21,000
those changes within the HTML within the respective component. There's this piece in the CSS documentation

261
00:28:22,800 --> 00:28:26,920
that talks about this. It says, components and template partials solve this problem much

262
00:28:26,920 --> 00:28:33,920
better than CSS-only abstractions because a component can encapsulate the HTML and the

263
00:28:34,240 --> 00:28:41,240
style. Again, because you're within your HTML, you can make all your changes in one place.

264
00:28:41,600 --> 00:28:48,600
That's there in the documentation. I will have some notes with a lot of this info afterwards.

265
00:28:49,920 --> 00:28:56,000
If you're missing some of these links, they will be available. You're wondering, how do

266
00:28:56,000 --> 00:29:03,000
I use Tailwind with Python? There's this wonderful library called PyTailwind CSS. Ordinarily,

267
00:29:03,000 --> 00:29:10,000
Tailwind CSS requires NPM. The whole point is we're trying to not use JavaScript. NPM

268
00:29:15,720 --> 00:29:22,720
brings about its own complexity. Tailwind CSS, the team behind it, has also built a

269
00:29:22,720 --> 00:29:29,720
standalone CLI tool that you can build yourself. You can pull that down locally and then use

270
00:29:30,320 --> 00:29:37,320
commands within your terminal. But what PyTailwind CSS does is it wraps that CLI into something

271
00:29:37,660 --> 00:29:44,660
that's on the PyPI website. You can pip install PyTailwind CSS. Now you have a wrapper around

272
00:29:46,000 --> 00:29:53,000
this Tailwind CLI. You can use those commands in your terminal just as well as any other

273
00:29:53,680 --> 00:30:00,680
Python-based CLI. It's pretty awesome. You use the command PyTailwind CSS in it once,

274
00:30:04,960 --> 00:30:11,680
which you don't have to do right now if you've opened up the code space. What that basically

275
00:30:11,680 --> 00:30:18,680
does is it builds the pieces that you need for Tailwind to work, such as the config file,

276
00:30:19,040 --> 00:30:26,040
the Tailwind config.js file. Now there's three important concepts with Tailwind CSS that

277
00:30:26,040 --> 00:30:33,040
I want to talk about. Those are the three here. The Tailwind config.js file, the directives,

278
00:30:33,640 --> 00:30:38,920
I'll talk about that in a second, and the build process. Those are, I think, the most

279
00:30:38,920 --> 00:30:45,320
important pieces. The first one, the Tailwind config.js file, that's what happens when you

280
00:30:45,320 --> 00:30:51,340
run that command. It creates this file in your project route. You might see it there

281
00:30:51,340 --> 00:30:58,340
in the MusicBinder application. This defines where the Tailwind CSS will look for the content.

282
00:31:06,280 --> 00:31:11,440
It looks for those utility classes within a certain directory. In our case, it's in

283
00:31:11,440 --> 00:31:17,720
the templates directory there, and it's recursive. It's looking for anything that ends with

284
00:31:17,720 --> 00:31:24,680
HTML. It looks through those files that are in that directory at build time, and it compiles

285
00:31:24,680 --> 00:31:31,680
a CSS file that then you will be using. That's what the Tailwind config.js file is for, primarily.

286
00:31:34,560 --> 00:31:39,240
But there are other things you see there, like theme and extend. Those are some advanced

287
00:31:39,400 --> 00:31:46,400
use cases, which I'll talk about later. That's an important must-have for Tailwind to work.

288
00:31:47,000 --> 00:31:50,820
But the cool thing is you run that command and it builds it for you. The only thing you

289
00:31:50,820 --> 00:31:55,560
really have to fill in is the content, if you want to. You could just star-star everything,

290
00:31:55,560 --> 00:31:58,960
and it would look through your entire project, but usually you want to point it in the right

291
00:31:58,960 --> 00:32:05,960
direction. The next thing is this thing called the Tailwind directives. This is an input

292
00:32:06,840 --> 00:32:13,840
file that Tailwind uses. The base, the components, the utilities. This is a directive for Tailwind

293
00:32:19,480 --> 00:32:26,480
to know what to build into the output, into the main.css, or however you call your CSS

294
00:32:27,400 --> 00:32:32,520
file. It has to be there. There are some other cool things that you can do with this file,

295
00:32:32,520 --> 00:32:36,840
which we'll also talk about later. You can build it once and forget about it and use

296
00:32:36,840 --> 00:32:43,480
Tailwind at will. You don't have to worry about what's going on here. But over here,

297
00:32:43,480 --> 00:32:49,920
you can also define your own custom styles. You can also define the fonts you want to

298
00:32:49,920 --> 00:32:54,560
use, if you want to use special fonts, et cetera. We can see some of that later.

299
00:32:54,560 --> 00:33:01,320
And then the third piece that's the most important is probably just the build process. Again,

300
00:33:01,320 --> 00:33:06,120
as you're writing these classes into your HTML, Tailwind needs to know about it at some

301
00:33:06,120 --> 00:33:12,360
point. After you've worked in your HTML, created your styles how you want them, this build

302
00:33:12,360 --> 00:33:17,500
process then basically says, look at the input file, which is going to be that directives

303
00:33:17,500 --> 00:33:23,520
file we just saw. That's what I call input.css here. And send it to this output.css, which

304
00:33:23,520 --> 00:33:30,520
is the one that you're actually going to use in your HTML. And then you can also define

305
00:33:32,000 --> 00:33:37,520
there's also a flag. So this is what it looks like in the music binder app. If you were

306
00:33:37,520 --> 00:33:44,520
to run it there, you'll notice that the Tailwind-i, which is input, is pointed to this tw.css

307
00:33:45,280 --> 00:33:49,520
file. That's just what I called it. You can call it whatever you want. A lot of people

308
00:33:49,520 --> 00:33:56,520
call it input.css. And I output it to a file called main.css. And that's the one I'll call

309
00:33:57,320 --> 00:34:04,320
within my HTML. And you'll also see the watch flag. I love the watch flag. It recompiles

310
00:34:05,480 --> 00:34:12,480
every time you save, every time you save a new, anything in that content directory that

311
00:34:17,720 --> 00:34:24,720
we saw. So you make any change, recompiles. It takes like microseconds to compile, so

312
00:34:24,720 --> 00:34:29,320
it's not slowing you down at all. So what I like to do usually is have two terminal

313
00:34:29,320 --> 00:34:34,360
windows open. I have one that's running the application I'm working on, the server. I'm

314
00:34:34,360 --> 00:34:40,600
watching for changes on that, my fast API. Then I have another window with this watching

315
00:34:40,600 --> 00:34:47,600
for css changes. And it's all happening real time. So I'm changing things up, reloading

316
00:34:47,600 --> 00:34:54,600
my browser, and it's instant. So it's great for prototyping and building quickly. And

317
00:34:56,160 --> 00:35:03,160
additionally I did include this command as a startup, on app startup. So in case you

318
00:35:04,500 --> 00:35:09,680
forget to compile, it'll at least compile every time you start your application. Because

319
00:35:09,680 --> 00:35:13,600
sometimes you can build stuff and forget to run this command and then you see things aren't

320
00:35:13,600 --> 00:35:18,120
changing and you're wondering, wait, didn't I just type that in? That happens to me still

321
00:35:18,120 --> 00:35:20,880
even though I've been working with this stuff a lot.

322
00:35:20,880 --> 00:35:26,920
All right, so what does Tailwind look like in your HTML? So it looks a little bit like

323
00:35:26,920 --> 00:35:33,920
this. And at first, again, it'll start looking a little busy. So you're defining a class

324
00:35:35,240 --> 00:35:42,240
and each one of these classes is creating a, again, on build time, it's creating a,

325
00:35:43,600 --> 00:35:50,600
it's creating the equivalent in css. So over here, this development is going to have a

326
00:35:52,240 --> 00:35:59,240
background color of slate 50, which is a lighter color. And I'm also setting the max width

327
00:35:59,360 --> 00:36:05,360
of this screen to large. Again, it's a utility class, so the large is already predefined.

328
00:36:05,360 --> 00:36:12,360
I forget exactly the pixels at this point. And then the h1 class, so the header class,

329
00:36:13,640 --> 00:36:20,640
the header, I'm going to create a text that's 3xl. Now again, as a utility class, all these

330
00:36:21,240 --> 00:36:28,240
things are predefined. One thing I forgot to mention is if you were to not include any

331
00:36:29,040 --> 00:36:34,700
of these classes in your HTML, you're getting a full css reset. So everything looks very

332
00:36:34,700 --> 00:36:41,700
basic without any classes applied. So you're having to explicitly state, I want my headers

333
00:36:41,980 --> 00:36:47,860
to be big. If I didn't have that text 3xl there, then it would just be very like regular

334
00:36:47,860 --> 00:36:54,620
text size, right? I want the font to be bold. I want it to be uppercase. So these end up

335
00:36:54,620 --> 00:37:01,620
on compile time, they end up looking a little bit like this in your css. So on compile time,

336
00:37:02,500 --> 00:37:09,500
the main.css file will have a text 3xl class that has the font size predefined and the

337
00:37:11,740 --> 00:37:18,140
line height predefined. Here's that bg slate that we saw. It looks like max width screen

338
00:37:18,140 --> 00:37:25,140
for large is 1024 pixels. Of course font bold is 700 and uppercase, we're doing a text transform.

339
00:37:26,780 --> 00:37:32,660
So that's all on build time. So if you're thinking about it, you're just typing in your

340
00:37:32,660 --> 00:37:38,260
HTML, hitting save, and this builds automatically for you. If you change anything, it'll rebuild

341
00:37:38,260 --> 00:37:44,620
it. If you want to go to 4xl, this will disappear from your main and another class called 4xl

342
00:37:44,620 --> 00:37:49,300
will appear just instantly and you're not having to go in there and make adjustments

343
00:37:49,300 --> 00:37:52,100
in that case.

344
00:37:52,100 --> 00:37:59,100
So now I want you to go ahead and play around with it. So let's go ahead and let's see.

345
00:38:00,260 --> 00:38:07,260
I want you to go ahead and try to create. Let's see. Let's redesign. Let's redesign

346
00:38:08,540 --> 00:38:15,260
the links. So there's links in the header template, right? You can see how they function

347
00:38:15,260 --> 00:38:20,940
right now. There's a hover effect that puts a little bottom border, I believe, in the

348
00:38:20,940 --> 00:38:27,220
current version of that application. I want you to change those to function more like

349
00:38:27,220 --> 00:38:34,220
buttons, like maybe create a background color for them and maybe do another hover effect.

350
00:38:35,140 --> 00:38:39,420
So, you might be thinking, well, I don't know these utility classes. How am I supposed to

351
00:38:39,420 --> 00:38:46,420
know to do that? So I'll give you two resources that I use a lot. The first is just the tailwind

352
00:38:46,620 --> 00:38:53,620
CSS.com slash docs. They have a search window there on the left and if you're wanting to

353
00:38:53,740 --> 00:38:58,860
know how to change a font, you type in font and it gives you all the list of the utility

354
00:38:58,860 --> 00:39:05,180
classes. It's a very, very, very useful website. I always have it open just to kind of get

355
00:39:05,180 --> 00:39:10,860
a sense of what's available to me. You can even type in color, for example, or BG and

356
00:39:10,860 --> 00:39:17,860
it'll show you all the different utility colors that you have with the actual examples there.

357
00:39:18,320 --> 00:39:23,740
Let me actually show you what that looks like because I get pretty excited about tailwind

358
00:39:23,940 --> 00:39:30,180
CSS, just their documentation. Let's say I wanted to learn how to do background color.

359
00:39:30,180 --> 00:39:35,020
So I just type in background. You'll notice that it already starts putting some things

360
00:39:35,020 --> 00:39:39,140
here. I don't think background was what I was looking for. And here you're typing in

361
00:39:39,140 --> 00:39:45,180
usually the equivalent of the CSS properties. So maybe I'll go to color. There's text decoration

362
00:39:45,180 --> 00:39:50,500
color, text color. All right, what is text color? Here it tells you how you can set the

363
00:39:50,540 --> 00:39:56,300
text color. And notice that it starts with slate. Slate is a predefined color and here

364
00:39:56,300 --> 00:40:02,100
are the colors on the right side. Let me see if I can make this a little bigger. If I keep

365
00:40:02,100 --> 00:40:07,580
going down, here's what gray looks like, neutral, stone. Here's what the red ones look like.

366
00:40:07,580 --> 00:40:14,580
So if I were to type in text red 200, this would be the equivalent here. But darker is

367
00:40:15,580 --> 00:40:22,580
900. Here's the equivalent here and so on. So you can get a sense of how to set things.

368
00:40:23,420 --> 00:40:27,340
Let's say you wanted to work with padding. I want to know how to set the padding. You

369
00:40:27,340 --> 00:40:34,340
click here and you can already see P dash zero is zero pixels. PX dash zero is padding

370
00:40:36,500 --> 00:40:43,500
left and padding right. So you think X axis. PY is Y axis. So you can see that the text

371
00:40:44,580 --> 00:40:51,580
is zero and zero. And then you start adding numbers. So PX dash one would be, it's not

372
00:40:52,100 --> 00:40:58,020
one pixel. It's just a different equivalence. And then it kind of shows you what those are.

373
00:40:58,020 --> 00:41:05,020
So PX one, for example, would be 0.25 REM. So the equivalent of four pixels. So you can

374
00:41:05,020 --> 00:41:09,780
start styling those buttons to look exactly how you want, whether you want larger buttons,

375
00:41:09,780 --> 00:41:15,780
smaller buttons. Try to change those around. But for you to be able to see what you're

376
00:41:15,780 --> 00:41:22,780
doing, remember, you want to be able to have this, you want to have that compilation watching

377
00:41:24,340 --> 00:41:29,300
for any saves that you make to the templates. Because otherwise you're not going to see

378
00:41:29,300 --> 00:41:36,300
the changes in your application. So open up a second terminal window. One has your app

379
00:41:36,940 --> 00:41:43,940
running. One has your tailwind watcher running. And then start playing around with the CSS.

380
00:41:47,060 --> 00:41:54,060
So I'll see if my, this is what my code space looks like. So I would close this out. The

381
00:41:54,060 --> 00:42:01,060
first thing I would probably do is open up a separate terminal. So you can do that here,

382
00:42:01,060 --> 00:42:08,060
if you're not familiar with this. And then that puts two terminals side by side here.

383
00:42:08,420 --> 00:42:15,420
I don't know if you can see that. Let me make this a little bigger. So I'm going to go ahead

384
00:42:24,260 --> 00:42:31,260
and open up the terminal. And the first one I would do the uvicorn with the reload flag.

385
00:42:37,020 --> 00:42:44,020
I will make them available, yes. They're not right now. This isn't, no, this isn't a slide.

386
00:42:45,020 --> 00:42:52,020
This is, I'm just doing this live right now, this screenshare. So again this would, this

387
00:42:59,940 --> 00:43:06,940
command here starts up the application right here on 127.0.0.1.48000. And you'll notice

388
00:43:06,940 --> 00:43:13,940
when I did this the first time, it'll give you this log message here that it actually,

389
00:43:20,500 --> 00:43:27,500
because it is a new code space, it does actually have to download that wrapped tailwind and

390
00:43:30,060 --> 00:43:35,660
it installs it from, directly from tailwind labs. And now you see, because I have the

391
00:43:35,980 --> 00:43:42,980
rebuild command set on app startup, you see that it rebuilt in 396 milliseconds and then

392
00:43:45,620 --> 00:43:51,020
the startup is complete. So now I should be able to open here, if you press control C

393
00:43:51,020 --> 00:43:58,020
and click, it should open a version of the application. The first time it needs to forward

394
00:43:59,020 --> 00:44:05,460
to the port. So here's the application and these are the buttons we're going to change.

395
00:44:05,540 --> 00:44:12,540
Let me make that a little bigger. Yeah, so you'll notice there's a random, it randomizes

396
00:44:14,900 --> 00:44:21,900
the picture that comes up first. So yeah, it might, it might be slow based on the, okay.

397
00:44:27,100 --> 00:44:34,100
So I want us to change these up. So if you're back in the, I'm going to change these up

398
00:44:35,700 --> 00:44:40,900
in here, in that second terminal, that's where I would run this command. And again, it's

399
00:44:40,900 --> 00:44:47,900
a little, it's a little wordy, tailwind CSS. Oh, it's going slow. If you have, if you have

400
00:44:56,620 --> 00:45:03,500
VS code locally, you might be able to open this up locally, might be a little snappier.

401
00:45:03,540 --> 00:45:10,540
And you have to give it the, actually I don't know if you need the app.static source tw.css.

402
00:45:16,620 --> 00:45:23,620
Actually I might need to wrap that in, I think I need to wrap that in, I don't remember if

403
00:45:24,460 --> 00:45:31,460
I need to wrap that in quotes or not. Maybe. I'll just do it this time.

404
00:45:34,180 --> 00:45:41,180
And the output is going to be similar. No, not source, it's going to be CSS. Now most,

405
00:45:53,220 --> 00:46:00,220
most times when you have something like this, again, I like to memorize commands and stuff,

406
00:46:01,060 --> 00:46:05,900
but this stuff you could probably automate with either a make file or however your build

407
00:46:05,900 --> 00:46:11,740
process is, whatever makes sense to you. I also like to have the compilation on that

408
00:46:11,740 --> 00:46:18,740
app startup. Additionally, you can even have a watcher on the, on the template files from

409
00:46:21,060 --> 00:46:27,020
within, from within FastAPI as well, so that reloads for changes in the template as well.

410
00:46:27,020 --> 00:46:32,740
There's a lot of different things you can do. But once you click that, it should do

411
00:46:32,740 --> 00:46:39,740
an initial rebuild. Now when you go to your templates, so you'll know it worked if it

412
00:46:41,140 --> 00:46:48,140
rebuilt once. Now if you go to your templates and you were to go to your header, and you

413
00:46:48,740 --> 00:46:55,740
can see the links here, I mean maybe. So right now I have these, oh, I forgot to tell you

414
00:46:57,020 --> 00:47:03,900
something, I forgot to mention. If you use VS Code and if you use PyCharms, I believe,

415
00:47:03,900 --> 00:47:10,140
they both have really awesome Tailwind CSS extensions. For VS Code you do have to download

416
00:47:10,140 --> 00:47:15,420
it because if you've used the code space, it's already pre-installed for you. If you're

417
00:47:15,420 --> 00:47:21,260
local, you do have to download the extension for Tailwind. But it is, it is a second piece

418
00:47:21,260 --> 00:47:28,260
that I would say, if you use the documentation in another window, you can also use the extension

419
00:47:28,620 --> 00:47:35,100
for VS Code and it is extremely awesome and I'll show you why. So over here, when I mouse

420
00:47:35,100 --> 00:47:42,100
over any of these classes, the extension allows me to see what the matching or corresponding

421
00:47:43,220 --> 00:47:50,220
CSS is for any one of these classes. In addition, if I'm wanting to change a specific, a specific

422
00:47:51,860 --> 00:47:58,860
aspect, so let's say I want to change the background of this, of this button and I start

423
00:48:00,260 --> 00:48:07,260
typing BG, let's say red, and I hit control space. Well, it's a little, it's a little

424
00:48:09,340 --> 00:48:16,340
slow. I think it's because of the, the Wi-Fi situation. What it does is it gives you, it

425
00:48:17,300 --> 00:48:24,300
gives you a, yeah, it's super slow. But even, even if I were just to type BG red 500 and

426
00:48:29,060 --> 00:48:34,980
I hit save, you'll notice, you'll notice the compilation happening in the bottom for, for

427
00:48:34,980 --> 00:48:41,980
each save. And if I go here, and I go to the bottom, and I go to the top, and I go to the

428
00:48:46,340 --> 00:48:53,340
bottom, I feel like everything's going a little. You're saying this part here? Yeah.

429
00:49:16,340 --> 00:49:23,340
So, oh, I see. So, go ahead and open up the template directory. So, go to app. Right

430
00:49:34,780 --> 00:49:41,780
here under app, yeah. And find the templates directory. So, that's going to be right here.

431
00:49:42,300 --> 00:49:49,300
Yep. And go to shared. So, there's one called header. And so, this is going to be your HTML.

432
00:49:54,000 --> 00:50:01,000
So, you can make changes directly in any of the elements to see the changes. You can kind

433
00:50:01,860 --> 00:50:08,860
of follow just the same pattern. So, the, the, you'll see, for example, that there's

434
00:50:09,260 --> 00:50:15,820
a PX3 that's padding. And every, anytime that you mouse over, it'll show you the corresponding

435
00:50:15,820 --> 00:50:22,820
CSS. So, that's what that represents. Has anyone been able to change their buttons up

436
00:50:26,980 --> 00:50:33,980
to see, change them up in any which way? Or any questions? I am not. Oh, yours isn't changing?

437
00:50:33,980 --> 00:50:40,980
Let me take a look. Just trying it out. Okay. And I do see that it's recompiling. That's

438
00:50:53,380 --> 00:51:00,380
interesting. Oh, interesting. I wonder if you're going to be able to do the same website

439
00:51:03,980 --> 00:51:10,980
thing. Yeah, let's see. That might be it. Because I'm seeing down here. That might

440
00:51:17,220 --> 00:51:24,220
be, well, probably. So, let's try that. Okay. So, that's it. So, that's it. So, that's

441
00:51:33,980 --> 00:51:40,980
it. Oh, command, sorry. Oh, yeah, that works too, yeah. Well, what I was trying to see

442
00:51:51,260 --> 00:51:55,580
is if you hit command, it's usually if you hit command, oh, there it goes. All right,

443
00:51:55,580 --> 00:52:02,580
so it's not seeing this. Let's go back. Which one is it? Oh, it's not seeing this. Oh,

444
00:52:03,980 --> 00:52:11,980
it's not seeing this. Okay. Okay. That should be the home button.

445
00:52:33,980 --> 00:52:40,980
That is interesting. It's using main. I wonder. Okay, let me check. So, it's compiling to

446
00:52:40,980 --> 00:52:47,980
main. So, we should be able to see if it actually built it. Yeah. Can you search for BG Red?

447
00:52:47,980 --> 00:52:54,980
I guess it was. So, it is here. That's bizarre. Oh, you know what? I think we're going to

448
00:52:58,300 --> 00:53:05,300
have to go back to the main. So, it's not seeing this. It's not seeing this. So, it's

449
00:53:06,300 --> 00:53:13,300
not seeing this. So, it's not seeing this. So, it's not seeing this. So, it's not seeing

450
00:53:18,480 --> 00:53:25,480
this. Okay. So, it's not seeing this. Okay. So, it's not seeing this. So, it's not seeing

451
00:53:25,480 --> 00:53:25,980
Let me try that.

452
00:53:25,980 --> 00:53:27,100
I don't want to keep you here for so long.

453
00:53:27,100 --> 00:53:27,600
It's all good.

454
00:53:30,600 --> 00:53:31,100
Yes.

455
00:53:31,100 --> 00:53:32,580
Hi, I have a question.

456
00:53:32,580 --> 00:53:33,080
Yes.

457
00:53:33,080 --> 00:53:35,080
Is that able to change the background color?

458
00:53:35,080 --> 00:53:37,080
For example, the color, it does not,

459
00:53:37,080 --> 00:53:40,120
it's been overridden by the actual background

460
00:53:40,120 --> 00:53:41,600
of this computer.

461
00:53:41,600 --> 00:53:42,100
Oh.

462
00:53:42,100 --> 00:53:42,600
Yeah.

463
00:53:42,600 --> 00:53:46,080
So I'm wondering, how do you navigate this?

464
00:53:46,080 --> 00:53:49,280
For example, I want to change it to gray or orange.

465
00:53:49,280 --> 00:53:51,520
You want it to change the background color?

466
00:53:51,520 --> 00:53:53,680
So yeah.

467
00:53:53,680 --> 00:53:57,560
So part of what I do is I would inspect it

468
00:53:57,560 --> 00:53:59,400
and see which component it is.

469
00:53:59,400 --> 00:54:01,120
So you'll see where it's defined.

470
00:54:03,680 --> 00:54:07,840
So this one, so it has the BG slate here.

471
00:54:07,840 --> 00:54:13,040
So find that and change this to BG slate or BG orange

472
00:54:13,040 --> 00:54:17,040
or something and see it changed automatically.

473
00:54:17,040 --> 00:54:21,520
My question is, because we want to reduce having our code

474
00:54:21,520 --> 00:54:22,520
everywhere.

475
00:54:22,600 --> 00:54:24,920
So how do you manage it in the case where

476
00:54:24,920 --> 00:54:26,680
it was about the background and orange,

477
00:54:26,680 --> 00:54:30,000
there's no point putting this CSS to it, right?

478
00:54:30,000 --> 00:54:32,880
Because it does not ultimately affect the component.

479
00:54:32,880 --> 00:54:35,320
So you were looking at, you were trying to change it here,

480
00:54:35,320 --> 00:54:36,840
right?

481
00:54:36,840 --> 00:54:41,600
So this effector thing has no effect on the component?

482
00:54:41,600 --> 00:54:47,080
Go back to that inspect element and look for header.

483
00:54:47,080 --> 00:54:49,000
See, it's here.

484
00:54:49,000 --> 00:54:50,600
So the thing is.

485
00:54:50,600 --> 00:54:52,200
It's overriding.

486
00:54:52,200 --> 00:54:53,320
Yeah, it's overriding it.

487
00:54:53,320 --> 00:54:55,920
So you would need to change it here and then just remove it

488
00:54:55,920 --> 00:54:58,480
from the header class.

489
00:54:58,480 --> 00:55:01,560
I mean, again, it'll just be based on your own design

490
00:55:01,560 --> 00:55:02,080
element.

491
00:55:02,080 --> 00:55:04,120
So if you're thinking about layering it

492
00:55:04,120 --> 00:55:06,600
and you're doing a full background,

493
00:55:06,600 --> 00:55:08,000
it's just kind of think, all right,

494
00:55:08,000 --> 00:55:09,400
so I'm going to change this.

495
00:55:09,400 --> 00:55:11,200
And then I'm going to put this on top of it

496
00:55:11,200 --> 00:55:12,440
and only change that.

497
00:55:12,440 --> 00:55:14,560
So it might just be a design choice.

498
00:55:14,560 --> 00:55:17,560
I think my true experience of working in CSS

499
00:55:17,560 --> 00:55:19,680
is one of the problems that I have

500
00:55:19,680 --> 00:55:22,440
with finding that as an element that has changed.

501
00:55:22,440 --> 00:55:23,520
That has changed.

502
00:55:23,520 --> 00:55:24,480
I see what you're saying.

503
00:55:24,480 --> 00:55:25,800
I was wondering, how do you mitigate this

504
00:55:25,800 --> 00:55:27,800
when you have multiple and it has a component?

505
00:55:27,800 --> 00:55:28,880
That's a good question.

506
00:55:28,880 --> 00:55:30,280
I'll address that up front.

507
00:55:30,280 --> 00:55:32,760
Thank you.

508
00:55:32,760 --> 00:55:34,240
All right, any other questions?

509
00:55:40,640 --> 00:55:42,920
Could you just help me with one example?

510
00:55:42,920 --> 00:55:44,920
Yeah, I will.

511
00:55:44,920 --> 00:55:46,920
How do you know if there's something wrong?

512
00:55:50,200 --> 00:55:58,480
So you'll see, again, for some Mac users,

513
00:55:58,480 --> 00:56:01,080
I don't know if that solved the problem up here.

514
00:56:01,080 --> 00:56:03,400
Sometimes when you're working with CSS,

515
00:56:03,400 --> 00:56:04,960
there's a whole thing with caching.

516
00:56:04,960 --> 00:56:07,480
So if you make a change, even if you recompile

517
00:56:07,480 --> 00:56:11,760
and it builds a new main.css and you refresh your website,

518
00:56:11,760 --> 00:56:13,280
it's still showing the old thing.

519
00:56:13,280 --> 00:56:15,520
It might be an issue with caching.

520
00:56:15,520 --> 00:56:19,280
I have seen that before.

521
00:56:19,280 --> 00:56:21,720
I like to use the Vivaldi browser

522
00:56:21,720 --> 00:56:25,200
because it is very privacy friendly

523
00:56:25,200 --> 00:56:29,120
and also resets the cache each time you reload.

524
00:56:29,120 --> 00:56:30,680
So that's something to think about.

525
00:56:30,680 --> 00:56:34,120
So I did want to show real quick,

526
00:56:34,120 --> 00:56:40,480
notice how I put in this class here, bgred500.

527
00:56:40,480 --> 00:56:44,640
And now when I refreshed my website here,

528
00:56:44,640 --> 00:56:46,640
you'll notice that the button is red.

529
00:56:46,640 --> 00:56:49,760
That's the only thing that's changed so far.

530
00:56:49,760 --> 00:56:52,080
I don't like square buttons.

531
00:56:52,080 --> 00:56:53,880
They look ugly to me.

532
00:56:53,880 --> 00:56:55,600
So I would go back to that class.

533
00:56:58,160 --> 00:56:58,640
Sorry.

534
00:57:01,320 --> 00:57:06,080
And I would add something called rounded.

535
00:57:06,080 --> 00:57:10,160
Actually, rounded may be large.

536
00:57:10,160 --> 00:57:10,640
And save.

537
00:57:10,640 --> 00:57:17,360
Was that wrong?

538
00:57:17,360 --> 00:57:18,320
Maybe it's not rounded.

539
00:57:21,760 --> 00:57:23,080
It's just taking a while.

540
00:57:23,080 --> 00:57:26,040
Like my saves are taking a while.

541
00:57:26,040 --> 00:57:27,320
They're rebuilt.

542
00:57:27,320 --> 00:57:30,760
Once I see it says done with the rebuild,

543
00:57:30,760 --> 00:57:34,680
that's when I can go back and check.

544
00:57:34,680 --> 00:57:38,160
See how now it's a little more round?

545
00:57:38,200 --> 00:57:41,640
I don't know if you can tell.

546
00:57:41,640 --> 00:57:46,040
So very quickly, I can start experimenting

547
00:57:46,040 --> 00:57:51,480
with different design elements.

548
00:57:51,480 --> 00:57:53,280
I don't really like this.

549
00:57:53,280 --> 00:57:54,520
It's too dark.

550
00:57:54,520 --> 00:57:56,880
Now if I wanted to stay red, but I just

551
00:57:56,880 --> 00:57:59,920
wanted to be a shade lighter, instead of 500,

552
00:57:59,920 --> 00:58:01,600
maybe I'll use 300.

553
00:58:01,600 --> 00:58:05,320
Again, the save is slow.

554
00:58:05,320 --> 00:58:10,360
But see how the extension tells me what BG Red looks like?

555
00:58:10,360 --> 00:58:12,160
So that's helpful, right?

556
00:58:12,160 --> 00:58:16,840
And then if I go back and refresh,

557
00:58:16,840 --> 00:58:18,760
well, that's taking it a minute.

558
00:58:24,440 --> 00:58:27,040
One thing with these demos is you never

559
00:58:27,040 --> 00:58:31,440
expect the slow internet.

560
00:58:36,080 --> 00:58:38,960
Yeah, it's not even responding right now.

561
00:58:43,400 --> 00:58:48,880
But that kind of gets you in a good spot.

562
00:58:48,880 --> 00:58:58,520
Now let's say you wanted to make changes to all of your,

563
00:58:58,520 --> 00:58:59,000
oops.

564
00:58:59,000 --> 00:59:08,600
So the red square appears from the extension with VS Code

565
00:59:08,600 --> 00:59:11,680
that allows you to see a preview of the colors.

566
00:59:11,680 --> 00:59:15,920
So these colors are part of the VS Code extension.

567
00:59:15,920 --> 00:59:19,360
They kind of get a quick sense.

568
00:59:19,360 --> 00:59:22,840
So for repeatability, one of the things I recommend

569
00:59:22,840 --> 00:59:27,520
is using multi-cursor editing.

570
00:59:27,520 --> 00:59:30,600
Now I am a complete newbie.

571
00:59:30,600 --> 00:59:33,680
When I first started trying multi-cursor stuff,

572
00:59:33,680 --> 00:59:36,160
it just seemed really crazy to me.

573
00:59:36,160 --> 00:59:38,120
But when you're working with Tailwind,

574
00:59:38,120 --> 00:59:41,240
it's so useful that I learned it really quick.

575
00:59:41,240 --> 00:59:45,760
With VS Code, for example, if you use Alt and you click,

576
00:59:45,760 --> 00:59:51,400
you now have a cursor in all three places.

577
00:59:51,440 --> 00:59:59,520
So I could do something like BG red 300.

578
00:59:59,520 --> 01:00:05,440
So that's one way to do editing for these lines.

579
01:00:05,440 --> 01:00:08,040
Let's say you have elements all around your HTML

580
01:00:08,040 --> 01:00:11,160
and you just wanted to select certain ones.

581
01:00:11,160 --> 01:00:13,240
Another thing you can do is highlight

582
01:00:13,240 --> 01:00:17,080
a certain piece of the code and press,

583
01:00:17,080 --> 01:00:19,800
I think it's Control-Shift-L. And now you

584
01:00:19,800 --> 01:00:22,920
have a cursor on all matching aspects.

585
01:00:22,920 --> 01:00:26,720
These are just tricks with your editor.

586
01:00:26,720 --> 01:00:31,160
Multi-cursor editing, people who are kind of old school

587
01:00:31,160 --> 01:00:34,000
have used Vim and that kind of stuff might be very familiar

588
01:00:34,000 --> 01:00:34,720
with it.

589
01:00:34,720 --> 01:00:35,840
For me, it was kind of new.

590
01:00:35,840 --> 01:00:38,920
I learned it mostly because I liked editing my elements

591
01:00:38,920 --> 01:00:39,600
quickly.

592
01:00:39,600 --> 01:00:42,160
And once you learn that, oh, man, it's great.

593
01:00:42,160 --> 01:00:47,640
Because now I can do this and save.

594
01:00:47,640 --> 01:00:49,080
It recompiles.

595
01:00:49,080 --> 01:00:52,880
You see, it took 28 milliseconds to recompile just that one

596
01:00:52,880 --> 01:00:54,400
aspect.

597
01:00:54,400 --> 01:00:58,400
Again, if the internet's not busted here.

598
01:00:58,400 --> 01:01:00,760
See, there they are.

599
01:01:00,760 --> 01:01:04,720
And that was just one change and a save.

600
01:01:04,720 --> 01:01:09,400
And I can come and see the immediate effect.

601
01:01:09,400 --> 01:01:11,720
So if you were working in CSS and you were thinking,

602
01:01:11,720 --> 01:01:15,840
oh, let me style a button, you would go into your CSS file.

603
01:01:15,840 --> 01:01:20,120
You would create the properties for that CSS element,

604
01:01:20,120 --> 01:01:21,280
for a button element.

605
01:01:21,280 --> 01:01:23,000
You would go back to your HTML.

606
01:01:23,000 --> 01:01:26,640
You would put that class in each element of your HTML.

607
01:01:26,640 --> 01:01:29,200
Then you would refresh and you would see this.

608
01:01:29,200 --> 01:01:32,640
So it reduces a lot of that back and forth.

609
01:01:32,640 --> 01:01:36,280
You're never really having to go to your CSS file at all.

610
01:01:36,280 --> 01:01:37,840
So that's kind of how that looks.

611
01:01:37,840 --> 01:01:49,280
Now, if you wanted some extra credit, let's see.

612
01:01:54,880 --> 01:01:57,520
You could create a new detail endpoint.

613
01:01:57,520 --> 01:02:00,080
This is only for some of you.

614
01:02:00,080 --> 01:02:02,760
If you feel comfortable with what you're doing,

615
01:02:02,760 --> 01:02:04,560
you could create a new detail endpoint.

616
01:02:04,560 --> 01:02:07,480
So you would go to the routes.py file.

617
01:02:07,480 --> 01:02:13,200
And make it showcase any artist, image, and profile.

618
01:02:13,200 --> 01:02:17,360
To do that, you would use a tiny DB CRUD function,

619
01:02:17,360 --> 01:02:19,600
maybe the get random artist one.

620
01:02:19,600 --> 01:02:22,920
And then make it take up the whole page.

621
01:02:22,920 --> 01:02:25,520
I'm going to go over one more item based on a question

622
01:02:25,520 --> 01:02:26,960
I received back here.

623
01:02:26,960 --> 01:02:29,640
And then we're going to take a quick break.

624
01:02:29,640 --> 01:02:30,200
Not so quick.

625
01:02:30,200 --> 01:02:34,080
Let's take about a 15 minute break, 10 minute break.

626
01:02:34,080 --> 01:02:36,960
But first, before that, one of the questions

627
01:02:36,960 --> 01:02:44,520
that comes up is when you're working in,

628
01:02:44,520 --> 01:02:46,040
let me go back to that page.

629
01:02:48,560 --> 01:02:52,840
Let's say you wanted to make specific changes.

630
01:02:52,840 --> 01:02:55,720
I want to change this background color here.

631
01:02:55,720 --> 01:02:58,120
Or I want to change the header.

632
01:02:58,120 --> 01:03:06,840
What are some ways that you could make changes quickly?

633
01:03:07,760 --> 01:03:11,040
I need to see how this would look green or black or whatever.

634
01:03:11,040 --> 01:03:14,160
But you're not quite sure which element it's in.

635
01:03:14,160 --> 01:03:16,160
You might go into the header file

636
01:03:16,160 --> 01:03:18,280
and change the background color there.

637
01:03:18,280 --> 01:03:20,720
And you don't see an effect.

638
01:03:20,720 --> 01:03:23,320
What's the best way to get a sense of where you are

639
01:03:23,320 --> 01:03:25,960
in the cascading style sheet?

640
01:03:25,960 --> 01:03:29,320
So for example, I have these dark blue.

641
01:03:29,320 --> 01:03:32,160
Or I don't know if this is the slate color here

642
01:03:32,160 --> 01:03:32,880
in the background.

643
01:03:32,880 --> 01:03:34,880
But where is this truly coming from?

644
01:03:34,920 --> 01:03:38,200
And I think that's pretty valid.

645
01:03:38,200 --> 01:03:42,440
For me, it's easier when I'm working with my own code base.

646
01:03:42,440 --> 01:03:44,040
And I've built it from the ground up.

647
01:03:44,040 --> 01:03:45,640
So I kind of know exactly where to look.

648
01:03:45,640 --> 01:03:47,480
But a lot of times, we're sharing code.

649
01:03:47,480 --> 01:03:51,200
Or you're starting to collaborate on a project.

650
01:03:51,200 --> 01:03:53,680
You might only be in charge of a certain component.

651
01:03:53,680 --> 01:03:57,800
And you're not as familiar with what else is going on.

652
01:04:00,320 --> 01:04:03,600
I love using Inspect Element first and foremost,

653
01:04:03,600 --> 01:04:05,480
even when working with Tailwind.

654
01:04:05,480 --> 01:04:08,520
Because that gets me the closest.

655
01:04:08,520 --> 01:04:10,280
I don't know if I can make this,

656
01:04:10,280 --> 01:04:11,640
how can I make this bigger?

657
01:04:13,080 --> 01:04:18,080
Like when I start looking at what's happening

658
01:04:19,360 --> 01:04:21,400
in each of these cases,

659
01:04:21,400 --> 01:04:23,800
I start seeing the class names

660
01:04:23,800 --> 01:04:25,960
that I recognize from Tailwind.

661
01:04:25,960 --> 01:04:28,200
And it starts giving me a sense

662
01:04:28,200 --> 01:04:30,140
of where they are on the page.

663
01:04:30,140 --> 01:04:33,660
So if I mouse over the body class, for example,

664
01:04:33,660 --> 01:04:36,060
and I see Slate 900,

665
01:04:36,060 --> 01:04:39,260
all right, well, this is a background color.

666
01:04:39,260 --> 01:04:42,660
So I get a sense that it's something

667
01:04:42,660 --> 01:04:44,820
that's affecting this entire page.

668
01:04:45,820 --> 01:04:48,340
What I've done is I've cascaded everything

669
01:04:48,340 --> 01:04:50,140
on top of this slate.

670
01:04:50,140 --> 01:04:52,020
And that's what this color is here.

671
01:04:52,020 --> 01:04:54,300
So if I were to find this class

672
01:04:54,300 --> 01:04:57,180
and change it in the HTML,

673
01:04:57,180 --> 01:04:59,500
that's actually on the base class here.

674
01:05:00,180 --> 01:05:02,660
I could go to this slate here and say,

675
01:05:02,660 --> 01:05:05,580
I prefer to have orange maybe.

676
01:05:09,980 --> 01:05:11,620
I hit save.

677
01:05:11,620 --> 01:05:14,420
It recompiles in 22 MS.

678
01:05:16,940 --> 01:05:18,660
And let's see.

679
01:05:18,660 --> 01:05:22,580
See how it changed just by making that one change.

680
01:05:22,580 --> 01:05:27,100
So you can see pretty drastic changes very easily

681
01:05:27,100 --> 01:05:29,480
without having to dig through.

682
01:05:29,480 --> 01:05:31,200
All right, let me find the element,

683
01:05:31,200 --> 01:05:32,560
see what class is referenced.

684
01:05:32,560 --> 01:05:34,640
Let me go to the CSS, find that class.

685
01:05:34,640 --> 01:05:38,000
Let me change that property and go back and refresh

686
01:05:38,000 --> 01:05:40,000
and see if it's been added.

687
01:05:40,000 --> 01:05:42,240
And when you're making numerous changes,

688
01:05:42,240 --> 01:05:46,920
again, once you're in your HTML, you're set.

689
01:05:46,920 --> 01:05:49,280
You don't have to keep.

690
01:05:49,280 --> 01:05:52,640
And what I appreciate as well is

691
01:05:52,640 --> 01:05:55,200
because of the compile build time,

692
01:05:57,080 --> 01:05:58,520
you're getting rid of stuff you're not using

693
01:05:58,520 --> 01:06:00,520
and you're only keeping things you're using.

694
01:06:00,520 --> 01:06:02,440
I think I find that very valuable.

695
01:06:04,000 --> 01:06:06,160
So yeah, inspect element,

696
01:06:06,160 --> 01:06:11,160
the documentation website is really helpful.

697
01:06:11,560 --> 01:06:15,840
The plugins for your editor are also extremely helpful.

698
01:06:15,840 --> 01:06:19,840
And that's pretty much all you need

699
01:06:19,840 --> 01:06:21,680
from the Tailwinds perspective.

700
01:06:21,680 --> 01:06:24,960
Once you get a sense of how the classes are named

701
01:06:24,960 --> 01:06:26,320
and what they do,

702
01:06:26,320 --> 01:06:28,600
you're rarely even looking at the documentation,

703
01:06:28,600 --> 01:06:30,160
especially if you have those plugins.

704
01:06:30,160 --> 01:06:33,640
You're kind of just testing them, hitting save,

705
01:06:33,640 --> 01:06:37,040
checking the effect and just changing things on the go,

706
01:06:37,040 --> 01:06:38,120
adding padding.

707
01:06:38,120 --> 01:06:40,080
Like you can think of how you can affect

708
01:06:40,080 --> 01:06:42,440
the padding element pretty easily.

709
01:06:42,440 --> 01:06:45,720
Like let's say you think these buttons are too close,

710
01:06:45,720 --> 01:06:47,120
you don't like them.

711
01:06:47,120 --> 01:06:50,240
So you go back to the header file and you think,

712
01:06:50,240 --> 01:06:55,240
well, the PX, which is the X axis is set to 0.75 rem.

713
01:06:55,400 --> 01:06:58,960
And I see that because I'm doing a mouse over on this class.

714
01:06:58,960 --> 01:07:02,000
Then I just, oops, I missed that one.

715
01:07:03,360 --> 01:07:05,320
I might want like six.

716
01:07:08,960 --> 01:07:10,000
I hit save.

717
01:07:11,720 --> 01:07:13,440
It's taking a moment again.

718
01:07:14,840 --> 01:07:16,760
There it's rebuilt.

719
01:07:16,760 --> 01:07:18,800
I go back and I refresh.

720
01:07:21,520 --> 01:07:24,400
That actually, the padding element makes them wider.

721
01:07:24,400 --> 01:07:25,240
That's right.

722
01:07:25,240 --> 01:07:26,280
It wasn't the margin.

723
01:07:26,280 --> 01:07:29,480
So if I wanted the margins to be wider,

724
01:07:29,480 --> 01:07:33,720
again, I just go back instead of MX2.

725
01:07:34,920 --> 01:07:37,440
We're thinking six as well.

726
01:07:49,920 --> 01:07:52,160
See another wider part.

727
01:07:52,160 --> 01:07:54,080
And you can play around with it that way

728
01:07:54,080 --> 01:07:56,040
just to kind of get a sense.

729
01:07:56,040 --> 01:08:00,120
And again, this is helpful with the template

730
01:08:00,120 --> 01:08:01,840
component-based design.

731
01:08:02,920 --> 01:08:07,920
Another thing with Tailwind is instead of thinking so much

732
01:08:08,880 --> 01:08:12,680
for individual classes, there's these pre-made components,

733
01:08:12,680 --> 01:08:14,080
some of them on the Tailwind site,

734
01:08:14,080 --> 01:08:16,400
other free component sites.

735
01:08:16,400 --> 01:08:19,160
They just give you like a button component

736
01:08:19,160 --> 01:08:21,120
which has all those pre-built classes.

737
01:08:21,120 --> 01:08:22,200
You just paste it right in

738
01:08:22,200 --> 01:08:23,640
and you have a nice looking button.

739
01:08:23,640 --> 01:08:25,200
You don't have to do much else.

740
01:08:25,200 --> 01:08:27,840
That's another really cool thing.

741
01:08:27,840 --> 01:08:31,120
So it is 10.08.

742
01:08:31,120 --> 01:08:34,600
Let's take a 12 minute break, come back at 10.20.

743
01:08:35,480 --> 01:08:38,240
And if you have any questions, I'm up here.

744
01:08:38,240 --> 01:08:43,240
And again, I'll leave this up on the screen

745
01:08:44,240 --> 01:08:47,760
in case you wanted to challenge yourself

746
01:08:47,760 --> 01:08:50,200
and I'll put on some music.

747
01:08:50,200 --> 01:08:51,640
All right, see you back in 12.

748
01:08:51,840 --> 01:08:54,000
All right.

749
01:08:55,720 --> 01:09:00,080
All right, hopefully you got a chance to stretch your legs,

750
01:09:00,080 --> 01:09:03,960
get something to drink, take some deep breaths.

751
01:09:05,760 --> 01:09:08,400
We're gonna get to the super fun part next,

752
01:09:08,400 --> 01:09:10,000
which is HTMX.

753
01:09:11,200 --> 01:09:14,760
I know we're still, some of us are still kind of testing out

754
01:09:14,760 --> 01:09:16,200
Tailwind CSS.

755
01:09:16,200 --> 01:09:19,000
It's one of those things that you'll get the most out of it

756
01:09:19,000 --> 01:09:20,960
when you play around with it.

757
01:09:20,960 --> 01:09:23,680
So when you have a spare moment,

758
01:09:23,680 --> 01:09:26,680
you have access to this repo, take it with you,

759
01:09:26,680 --> 01:09:28,920
just start playing around with the classes

760
01:09:28,920 --> 01:09:31,520
and changing them up, seeing what's going on.

761
01:09:31,520 --> 01:09:35,000
Now I know some folks have been having issues

762
01:09:35,000 --> 01:09:39,360
with making the change, seeing the rebuild command,

763
01:09:39,360 --> 01:09:42,800
refreshing their browser and they don't see the change.

764
01:09:42,800 --> 01:09:45,720
Most of the time that's gonna be caching.

765
01:09:45,720 --> 01:09:49,160
What you can do is you can look at the main.css file

766
01:09:49,160 --> 01:09:50,960
that's in the static directory,

767
01:09:50,960 --> 01:09:52,640
just to make sure that it's building,

768
01:09:52,640 --> 01:09:56,920
that the class you built is being defined in there.

769
01:09:56,920 --> 01:10:00,560
And then you can view source on the front end.

770
01:10:00,560 --> 01:10:03,880
And if you see that class reference in the HTML,

771
01:10:03,880 --> 01:10:06,520
it means the pieces are there.

772
01:10:06,520 --> 01:10:08,360
It just means maybe for some reason,

773
01:10:08,360 --> 01:10:11,960
the caching is looking at the old version of the CSS file.

774
01:10:11,960 --> 01:10:13,200
That's possible.

775
01:10:14,000 --> 01:10:16,120
But again, come and find me.

776
01:10:16,120 --> 01:10:19,160
I am thinking of maybe hosting an open space

777
01:10:19,160 --> 01:10:22,240
to talk more about some of this Tailwind stuff

778
01:10:22,240 --> 01:10:24,880
and HTML stuff that maybe we can't get in the tutorial.

779
01:10:24,880 --> 01:10:28,560
So if you wanna do that, look for it maybe later

780
01:10:28,560 --> 01:10:30,600
during the conference.

781
01:10:30,600 --> 01:10:32,720
Okay, moving on, HTML.

782
01:10:33,600 --> 01:10:37,120
So I talked about a simple site

783
01:10:37,120 --> 01:10:39,920
and this kind of started as a simple site.

784
01:10:39,920 --> 01:10:43,000
I was just kind of building something from scratch,

785
01:10:43,000 --> 01:10:44,480
a basic hello world.

786
01:10:44,480 --> 01:10:48,560
I wanted to see how far I could get with just Tailwind,

787
01:10:48,560 --> 01:10:50,120
just HTML.

788
01:10:50,120 --> 01:10:52,760
Now, HTML, what it will do

789
01:10:53,720 --> 01:10:56,840
is it will reduce that complexity.

790
01:10:56,840 --> 01:11:01,840
Again, I'm a non-developer that tries to do it at night.

791
01:11:03,440 --> 01:11:07,200
So I don't wanna have to learn JavaScript to do web stuff.

792
01:11:07,200 --> 01:11:09,120
It's too much mental overhead for me.

793
01:11:10,960 --> 01:11:13,160
But I wanna have that kind of modern UI,

794
01:11:13,160 --> 01:11:16,640
that feel of something that's quite responsive.

795
01:11:16,640 --> 01:11:19,600
And if I can do that all directly from HTML,

796
01:11:19,600 --> 01:11:20,880
so much the better.

797
01:11:20,880 --> 01:11:24,640
Now, HTML, I don't know how much you know about it.

798
01:11:24,640 --> 01:11:26,600
If you're here, you may have heard about it

799
01:11:26,600 --> 01:11:28,240
or you may have seen.

800
01:11:28,240 --> 01:11:30,280
One of my favorite things about HTML

801
01:11:30,280 --> 01:11:33,800
is the Twitter account where they have lots of memes.

802
01:11:33,800 --> 01:11:36,960
I could give you some really well-recent,

803
01:11:36,960 --> 01:11:39,080
detailed and insightful things.

804
01:11:39,080 --> 01:11:43,920
And mind you, all of that is there at the htmx.org site.

805
01:11:43,920 --> 01:11:45,600
There's some really great essays

806
01:11:45,600 --> 01:11:49,000
as to why this is a good design pattern,

807
01:11:49,000 --> 01:11:51,920
but memes are so much more fun, right?

808
01:11:52,840 --> 01:11:57,800
Now, again, coming from a lack of experience,

809
01:11:57,800 --> 01:12:00,480
maybe on my end with JavaScript,

810
01:12:03,160 --> 01:12:06,400
I don't know what client-side routing is.

811
01:12:06,400 --> 01:12:10,120
I don't wanna know what client-side routing is.

812
01:12:10,120 --> 01:12:14,320
To me, it makes sense the way we've presented it so far.

813
01:12:14,320 --> 01:12:17,240
A user makes a request from the front end,

814
01:12:17,240 --> 01:12:20,680
you receive this on the server side,

815
01:12:20,680 --> 01:12:22,040
you do what you need to do,

816
01:12:22,040 --> 01:12:24,400
get the information you need to send back

817
01:12:24,400 --> 01:12:26,880
and you send it back to the user.

818
01:12:26,880 --> 01:12:28,960
It just makes sense to me.

819
01:12:28,960 --> 01:12:32,040
I don't see why there would need to be

820
01:12:32,040 --> 01:12:34,480
so much more complexity, right?

821
01:12:34,480 --> 01:12:39,480
So speaking of complexity, how do you install htmx?

822
01:12:41,320 --> 01:12:45,960
You basically copy a file into your project and that's it.

823
01:12:45,960 --> 01:12:50,960
So htmx itself is vanilla JavaScript

824
01:12:51,640 --> 01:12:54,640
that someone else wrote that you never have to look at.

825
01:12:54,640 --> 01:12:59,640
I put it in a folder in my static directory.

826
01:12:59,920 --> 01:13:04,920
I think I called it probably JS, under JS directory.

827
01:13:05,960 --> 01:13:08,520
And that's it, that's really it.

828
01:13:08,520 --> 01:13:12,920
Now you can reference that script within your HTML.

829
01:13:12,920 --> 01:13:15,040
And since we're using templates,

830
01:13:15,040 --> 01:13:18,040
what I did is I included the script source

831
01:13:21,320 --> 01:13:23,280
in that base template.

832
01:13:23,280 --> 01:13:27,160
You see it here under this line particularly.

833
01:13:27,160 --> 01:13:28,720
You would just do a script source

834
01:13:28,720 --> 01:13:33,720
that points directly to your htmx file.

835
01:13:34,200 --> 01:13:38,920
I called this one htmx.min.js.

836
01:13:38,920 --> 01:13:43,160
You can find that in the base.html template.

837
01:13:43,160 --> 01:13:48,160
And that's all you need to get working with htmx, that's it.

838
01:13:48,960 --> 01:13:53,600
I just find that quite a bit easier than,

839
01:13:53,600 --> 01:13:57,880
I think at some point I installed npm on my machine.

840
01:13:57,880 --> 01:13:59,280
I don't know what I was doing.

841
01:13:59,280 --> 01:14:02,640
As a matter of fact, these slides are revealed.js.

842
01:14:02,640 --> 01:14:05,280
So just kidding, I did have a little bit of JavaScript

843
01:14:05,280 --> 01:14:06,640
in this presentation.

844
01:14:06,640 --> 01:14:09,960
But that's about as far as I'll get.

845
01:14:09,960 --> 01:14:11,520
I'll build my slides with it.

846
01:14:13,080 --> 01:14:15,000
What does htmx look like?

847
01:14:16,100 --> 01:14:19,720
This is directly from the htmx.org site.

848
01:14:20,560 --> 01:14:24,400
This is what it looks like in your HTML.

849
01:14:24,400 --> 01:14:26,600
Here we have a button element,

850
01:14:26,600 --> 01:14:28,200
which you may be familiar with.

851
01:14:28,200 --> 01:14:32,040
But then we have a lot of these hx attributes.

852
01:14:32,040 --> 01:14:35,480
The first one says, and sorry if the contrast

853
01:14:35,480 --> 01:14:40,480
is a little odd, hx-post is for the endpoint clicked.

854
01:14:44,480 --> 01:14:46,640
hx trigger is click.

855
01:14:46,640 --> 01:14:51,640
hx target is the parent div, hx swap is outer HTML,

856
01:14:52,080 --> 01:14:54,240
and then the button says click me.

857
01:14:54,240 --> 01:14:56,800
So what do all these things do?

858
01:14:56,800 --> 01:15:01,800
The first thing that we do is we're sending a post request

859
01:15:02,160 --> 01:15:04,620
to the clicked route.

860
01:15:04,620 --> 01:15:08,120
So anytime a user clicks on this button,

861
01:15:08,120 --> 01:15:10,120
it is already sending a post request.

862
01:15:10,120 --> 01:15:12,280
It doesn't matter that it's not in a form

863
01:15:12,280 --> 01:15:16,180
or that it's a submit button or anything like that.

864
01:15:16,180 --> 01:15:18,180
This could be a div element or a p element

865
01:15:18,180 --> 01:15:21,020
or a span element, it could be whatever you want it to be.

866
01:15:22,120 --> 01:15:25,020
This is sending that post request to the clicked route

867
01:15:25,020 --> 01:15:30,020
so we can understand that within our fast API application.

868
01:15:30,540 --> 01:15:35,040
The second thing is the, actually,

869
01:15:36,300 --> 01:15:39,180
it is triggered by a click.

870
01:15:39,180 --> 01:15:43,620
So that hx trigger says that when you click this button,

871
01:15:43,620 --> 01:15:45,100
it's gonna send a post request.

872
01:15:45,100 --> 01:15:48,960
So there's other kinds of actions that you could use.

873
01:15:50,860 --> 01:15:55,860
Next, the target for the response

874
01:15:57,140 --> 01:16:02,140
is an HTML element with an ID of parent div.

875
01:16:02,540 --> 01:16:04,520
So when you click this button,

876
01:16:05,500 --> 01:16:09,660
it's pointing to this other element that has that ID.

877
01:16:09,660 --> 01:16:12,220
It can be wherever you want in your HTML.

878
01:16:13,140 --> 01:16:17,320
And the hx swap point here,

879
01:16:18,540 --> 01:16:22,740
what that means is your response can either

880
01:16:22,740 --> 01:16:25,220
be sent within that element.

881
01:16:25,220 --> 01:16:29,700
So let's say your div element, your parent div element,

882
01:16:29,700 --> 01:16:33,260
you only want to swap what's inside of it,

883
01:16:33,260 --> 01:16:34,540
then you could do it that way

884
01:16:34,540 --> 01:16:37,100
or you could replace the whole element,

885
01:16:37,100 --> 01:16:39,280
which means the outer HTML

886
01:16:39,280 --> 01:16:41,860
that represents the outer element.

887
01:16:41,860 --> 01:16:45,180
So you will no longer have that parent div anymore

888
01:16:45,180 --> 01:16:47,580
if you use this particular command.

889
01:16:47,580 --> 01:16:51,620
So it does all of those things by just defining that.

890
01:16:51,620 --> 01:16:54,300
Whatever response you send back

891
01:16:54,300 --> 01:16:57,620
will go into that element in the DOM, and that's it.

892
01:16:57,620 --> 01:16:58,900
That's htmx.

893
01:16:58,900 --> 01:17:01,260
So it's a pretty great example.

894
01:17:01,260 --> 01:17:04,300
Again, that's on the htmx.org site.

895
01:17:05,900 --> 01:17:10,900
And how do we know what to,

896
01:17:12,020 --> 01:17:14,300
what to do on the server side?

897
01:17:14,300 --> 01:17:17,100
Like how do we know when we get this request

898
01:17:19,540 --> 01:17:22,140
at the clicked endpoint?

899
01:17:22,140 --> 01:17:24,420
How do we know what to do with it?

900
01:17:24,420 --> 01:17:29,420
So htmx sends particular data through request headers.

901
01:17:32,500 --> 01:17:35,260
Again, if some of you aren't as familiar

902
01:17:35,260 --> 01:17:37,300
with some of this terminology,

903
01:17:37,300 --> 01:17:40,180
you can always come back to the recording of the tutorial

904
01:17:40,180 --> 01:17:41,900
as you get a better idea.

905
01:17:41,900 --> 01:17:43,500
But most of you, if you've worked in the web,

906
01:17:43,500 --> 01:17:45,840
you get a sense of what the request headers are

907
01:17:45,840 --> 01:17:47,380
and how to access them.

908
01:17:47,380 --> 01:17:51,620
With Fast API, you can, it's sent as, I think,

909
01:17:51,620 --> 01:17:53,660
a dictionary item, and then you can look

910
01:17:53,660 --> 01:17:56,620
for specific requests headers.

911
01:17:56,620 --> 01:18:00,060
Some of the ones that you're gonna look at

912
01:18:00,060 --> 01:18:04,980
that are sent from htmx, these are just some.

913
01:18:04,980 --> 01:18:06,580
There are many others.

914
01:18:06,580 --> 01:18:09,460
But these, I'd say, are some of the most important ones.

915
01:18:09,460 --> 01:18:14,460
So there will be an hx request that is always true

916
01:18:14,900 --> 01:18:19,900
when the request is generated from an htmx attribute.

917
01:18:21,420 --> 01:18:26,420
So in this sense, because hx request is always true,

918
01:18:26,900 --> 01:18:30,700
in our Python application, we can look for that header.

919
01:18:30,700 --> 01:18:35,700
If hx request, then we just wanna send this response, right?

920
01:18:36,380 --> 01:18:41,020
But if someone navigates to that endpoint,

921
01:18:41,020 --> 01:18:43,660
you might not wanna send just a partial response.

922
01:18:43,660 --> 01:18:45,500
You might wanna refresh the whole page.

923
01:18:45,500 --> 01:18:48,700
That's why that hx request is so important.

924
01:18:48,700 --> 01:18:53,060
Other things that you can send through are the target,

925
01:18:53,060 --> 01:18:55,460
the trigger, and what current URL

926
01:18:55,460 --> 01:18:56,860
is sending this information.

927
01:18:56,860 --> 01:19:00,580
That's all useful, and we'll see how a little later.

928
01:19:00,580 --> 01:19:02,500
But these are just some examples.

929
01:19:02,500 --> 01:19:07,500
More information of that, again, is on the htmx.org website.

930
01:19:09,660 --> 01:19:13,260
What do we do in our code?

931
01:19:13,260 --> 01:19:15,060
It might be something like this.

932
01:19:15,060 --> 01:19:20,060
In FastAPI, you use a app.get or router.get,

933
01:19:20,280 --> 01:19:22,360
and you put the endpoint.

934
01:19:22,360 --> 01:19:24,500
So if it were the previous one, this might be,

935
01:19:24,500 --> 01:19:28,940
instead of page, it might say clicked or whatever.

936
01:19:28,940 --> 01:19:33,020
You define a function or a view in this case

937
01:19:33,020 --> 01:19:36,400
that is doing two things.

938
01:19:38,860 --> 01:19:43,860
First, it's setting the template to somepage.html.

939
01:19:44,900 --> 01:19:47,340
That presumes that someone is navigating

940
01:19:47,340 --> 01:19:49,580
to the page endpoint.

941
01:19:50,940 --> 01:19:53,100
This template, this somepage.html,

942
01:19:53,100 --> 01:19:56,860
might be a full representation of what someone should see.

943
01:19:56,860 --> 01:20:00,980
It'll include the base element and the content.

944
01:20:00,980 --> 01:20:04,140
But let's say someone actually clicked something

945
01:20:04,140 --> 01:20:07,400
that is an HX request.

946
01:20:07,400 --> 01:20:09,700
Then what we're doing is we're using,

947
01:20:09,700 --> 01:20:14,700
if the request has an HX request element in there,

948
01:20:18,500 --> 01:20:22,260
then the template is actually only this partial content

949
01:20:22,260 --> 01:20:25,680
that's going to replace that element in the DOM.

950
01:20:25,680 --> 01:20:27,480
So you might only be replacing

951
01:20:27,480 --> 01:20:29,820
a small piece of information.

952
01:20:29,820 --> 01:20:32,240
So you don't want to send your entire template

953
01:20:32,240 --> 01:20:33,800
to go into that small piece.

954
01:20:33,800 --> 01:20:37,600
That happens to me a lot when I'm testing things out.

955
01:20:37,600 --> 01:20:40,880
I end up with a version of the entire site

956
01:20:40,880 --> 01:20:42,080
in one little window.

957
01:20:42,080 --> 01:20:43,920
I'm like, oh, I must have not checked

958
01:20:43,920 --> 01:20:47,400
if this was an HX request.

959
01:20:47,400 --> 01:20:50,360
That's where the HX request comes really handy.

960
01:20:51,440 --> 01:20:55,400
And again, if you were to go through this again,

961
01:20:55,400 --> 01:20:58,880
we're setting the template to somepage.html.

962
01:20:58,880 --> 01:21:02,680
We're checking if that request was triggered by htmx.

963
01:21:02,680 --> 01:21:07,080
If it was, then we're changing that template object

964
01:21:07,080 --> 01:21:09,860
to the partial content.html.

965
01:21:09,860 --> 01:21:12,480
So then when we send that template response back

966
01:21:12,480 --> 01:21:16,800
to the user, either way it's going to be the correct

967
01:21:16,800 --> 01:21:19,120
based on the way it was requested.

968
01:21:19,120 --> 01:21:24,120
And of course, the context might vary

969
01:21:24,120 --> 01:21:26,100
based on how it's requested.

970
01:21:26,100 --> 01:21:28,600
But this is just a more simplified version

971
01:21:28,600 --> 01:21:29,560
of what's happening.

972
01:21:30,480 --> 01:21:35,280
The somepage.html, again, if you were creating

973
01:21:35,280 --> 01:21:37,660
an entire element, might look something like this.

974
01:21:37,660 --> 01:21:40,040
It's extending the base template,

975
01:21:40,040 --> 01:21:45,040
you're saying whatever you're saying in the body.

976
01:21:45,120 --> 01:21:48,900
You might have a random image there, et cetera.

977
01:21:48,900 --> 01:21:52,200
And then if you wanted to just refresh that image,

978
01:21:52,200 --> 01:21:55,280
maybe that button click was just needed to refresh

979
01:21:55,280 --> 01:21:58,360
this div element that's called random image,

980
01:21:58,360 --> 01:22:03,360
then a regular request would require a full page reload,

981
01:22:03,760 --> 01:22:08,760
but an HX request would then only replace that element.

982
01:22:09,800 --> 01:22:11,560
But in order to replace that element,

983
01:22:11,560 --> 01:22:14,440
you would need that partial content to be

984
01:22:14,440 --> 01:22:17,080
in a separate file usually,

985
01:22:17,080 --> 01:22:19,280
unless you're using that Jinja two blocks,

986
01:22:19,280 --> 01:22:20,680
which we'll talk about later.

987
01:22:20,680 --> 01:22:23,440
But then your partial content HTML

988
01:22:23,440 --> 01:22:25,480
might be something as small as this.

989
01:22:25,480 --> 01:22:28,840
It has only the specific element that would be changing

990
01:22:28,840 --> 01:22:31,940
because the HX request wanted you to replace

991
01:22:31,940 --> 01:22:36,840
that one element in your webpage,

992
01:22:36,840 --> 01:22:39,160
and you don't have to do a full page refresh.

993
01:22:39,160 --> 01:22:40,000
And that's pretty great.

994
01:22:40,000 --> 01:22:42,920
You can see how great that would be in a pretty large website

995
01:22:42,920 --> 01:22:44,480
if you're only needing to change one thing

996
01:22:44,480 --> 01:22:46,880
instead of doing a full page refresh,

997
01:22:46,880 --> 01:22:50,580
you're only refreshing a small element of the DOM

998
01:22:50,580 --> 01:22:54,100
that's pretty fantastic without anything

999
01:22:55,020 --> 01:22:56,380
other than what we've seen.

1000
01:22:59,300 --> 01:23:02,980
The fragments that we talked about later,

1001
01:23:02,980 --> 01:23:05,660
this is using the Jinja two blocks,

1002
01:23:05,660 --> 01:23:07,980
allows you to do things slightly differently.

1003
01:23:07,980 --> 01:23:10,740
So instead of having two files,

1004
01:23:10,740 --> 01:23:15,160
which one would be the one that we saw before,

1005
01:23:15,160 --> 01:23:18,020
the some page.html, in this case,

1006
01:23:18,020 --> 01:23:23,020
you would only have one page called some page.html.

1007
01:23:23,340 --> 01:23:26,700
But now the template response allows

1008
01:23:26,700 --> 01:23:31,200
for an additional parameter called block name.

1009
01:23:31,200 --> 01:23:35,860
This means that within that template response,

1010
01:23:35,860 --> 01:23:39,340
or I'm sorry, within that some page.html,

1011
01:23:39,340 --> 01:23:43,060
if the request comes from htmx,

1012
01:23:43,060 --> 01:23:47,180
if this block name will be some name, whatever it is,

1013
01:23:47,180 --> 01:23:52,180
now what the template response is looking for

1014
01:23:53,860 --> 01:23:57,980
is a specific block name using the same terminology

1015
01:23:57,980 --> 01:24:00,220
that Jinja uses for blocks,

1016
01:24:00,220 --> 01:24:02,760
and it will only render that item.

1017
01:24:02,760 --> 01:24:07,460
So you're using the same template file,

1018
01:24:07,460 --> 01:24:09,860
you no longer need two files.

1019
01:24:09,860 --> 01:24:14,860
The block name is only triggered if it's an htmx request,

1020
01:24:14,980 --> 01:24:19,980
and it'll match some name block in your template, right?

1021
01:24:21,340 --> 01:24:24,940
So your template will look like this.

1022
01:24:24,940 --> 01:24:28,400
So now it looks almost identical to what we saw before,

1023
01:24:28,400 --> 01:24:30,500
except that the random image,

1024
01:24:31,900 --> 01:24:36,040
it has a block name that starts right before the development

1025
01:24:36,040 --> 01:24:37,620
and ends right after it.

1026
01:24:37,620 --> 01:24:38,820
So now when it renders,

1027
01:24:38,820 --> 01:24:42,440
it's only rendering that part of the template.

1028
01:24:42,440 --> 01:24:44,720
So it seems a little odd now,

1029
01:24:45,560 --> 01:24:48,520
but once you start inserting some dynamic attributes

1030
01:24:48,520 --> 01:24:51,480
to say the image, if it was a dynamic image,

1031
01:24:51,480 --> 01:24:54,280
now you can see how much more useful it would be

1032
01:24:54,280 --> 01:24:56,740
to have it all in one file.

1033
01:24:56,740 --> 01:24:58,520
Locality behavior, you have it there,

1034
01:24:58,520 --> 01:25:02,020
you don't need to go hunting for different files.

1035
01:25:02,020 --> 01:25:03,840
Both of those methods work.

1036
01:25:03,840 --> 01:25:08,520
We'll see why this method might be more useful

1037
01:25:08,520 --> 01:25:12,940
when you're working with kind of a bigger application.

1038
01:25:15,080 --> 01:25:18,760
So a regular request renders everything.

1039
01:25:18,760 --> 01:25:20,400
We already knew that.

1040
01:25:20,400 --> 01:25:23,780
It'll include that content from the base HTML.

1041
01:25:24,840 --> 01:25:27,800
An htmx request would then only render

1042
01:25:27,800 --> 01:25:32,540
that partial content that is within that block name.

1043
01:25:33,700 --> 01:25:38,360
So if you've been kind of paying attention

1044
01:25:38,360 --> 01:25:40,920
and you start imagining the types of things

1045
01:25:40,920 --> 01:25:43,240
that you can do with htmx,

1046
01:25:44,120 --> 01:25:47,960
you pretty much have accomplished a lot already.

1047
01:25:47,960 --> 01:25:51,360
You're a full stack developer now, right?

1048
01:25:51,360 --> 01:25:54,160
Again, these memes are from htmx website.

1049
01:25:54,160 --> 01:25:57,760
Like if you follow their Twitter, it's pretty great stuff.

1050
01:25:59,360 --> 01:26:03,320
Most of the things that you're gonna want to do

1051
01:26:04,720 --> 01:26:08,720
in UX design is covered with htmx.

1052
01:26:08,720 --> 01:26:10,480
If there are additional things,

1053
01:26:10,480 --> 01:26:12,200
there are some caveats,

1054
01:26:12,200 --> 01:26:14,680
some things that you might introduce

1055
01:26:14,680 --> 01:26:18,640
a little bit of JavaScript.

1056
01:26:18,640 --> 01:26:20,280
It's okay to do that too.

1057
01:26:20,280 --> 01:26:22,560
It's not an either or proposition.

1058
01:26:22,560 --> 01:26:23,960
That's one thing to really think about.

1059
01:26:23,960 --> 01:26:26,160
If you have already experienced with JavaScript

1060
01:26:26,160 --> 01:26:28,880
and it's useful in certain ways, that's great.

1061
01:26:29,760 --> 01:26:32,920
But the emphasis here is to try to reduce

1062
01:26:32,920 --> 01:26:34,760
as much complexity as you can first

1063
01:26:34,760 --> 01:26:38,860
and then add on top of that anything that might be missing.

1064
01:26:39,820 --> 01:26:44,820
Okay, so that's gotten us to a pretty good spot

1065
01:26:44,900 --> 01:26:46,780
at understanding htmx.

1066
01:26:46,780 --> 01:26:51,260
I wanted to show a couple things on the repository.

1067
01:26:53,020 --> 01:26:54,380
Let me go here.

1068
01:26:59,320 --> 01:27:00,820
You know what, before I get into that,

1069
01:27:00,820 --> 01:27:04,860
I just wanted to, someone asked what's going on

1070
01:27:04,860 --> 01:27:06,500
with this website to begin with.

1071
01:27:07,180 --> 01:27:12,180
So again, this started as a simple site.

1072
01:27:12,780 --> 01:27:15,260
I didn't even really have an idea

1073
01:27:15,260 --> 01:27:18,020
as much as to what I was gonna be building.

1074
01:27:18,020 --> 01:27:21,020
Then I started thinking about something I like,

1075
01:27:21,020 --> 01:27:21,860
which is music.

1076
01:27:21,860 --> 01:27:23,020
I like music.

1077
01:27:23,020 --> 01:27:28,020
And I wanted to kind of deal with a topic

1078
01:27:28,620 --> 01:27:30,300
that is fun for me.

1079
01:27:30,300 --> 01:27:34,780
So I went to this API, the Discogs API.

1080
01:27:34,820 --> 01:27:37,420
I don't know if many of you have heard of it.

1081
01:27:37,420 --> 01:27:39,420
It's mostly for music collectors.

1082
01:27:39,420 --> 01:27:41,780
I don't necessarily collect records or anything like that,

1083
01:27:41,780 --> 01:27:44,140
but it has a pretty good API.

1084
01:27:44,140 --> 01:27:48,620
So I went to that API and I downloaded a lot of data

1085
01:27:48,620 --> 01:27:50,100
from some of my favorite artists

1086
01:27:50,100 --> 01:27:52,380
just to kind of take a look at it.

1087
01:27:52,380 --> 01:27:57,140
And I put all that data, again, with TinyDB

1088
01:27:57,140 --> 01:27:59,820
into a JSON file.

1089
01:27:59,820 --> 01:28:02,700
And then I started thinking about the olden days

1090
01:28:02,700 --> 01:28:05,060
when I used to have these CD binders

1091
01:28:05,060 --> 01:28:06,540
where I would flip through them.

1092
01:28:06,540 --> 01:28:09,460
And I just loved looking at the liner notes

1093
01:28:09,460 --> 01:28:11,620
or pictures of my favorite bands.

1094
01:28:11,620 --> 01:28:13,300
And it was really cool.

1095
01:28:13,300 --> 01:28:15,940
The CDs probably didn't work

1096
01:28:15,940 --> 01:28:17,140
because they were all scratched up,

1097
01:28:17,140 --> 01:28:19,220
but I just loved looking through all the binders.

1098
01:28:19,220 --> 01:28:22,940
So I thought, why don't I emulate that sort of experience

1099
01:28:22,940 --> 01:28:24,660
and kind of take a look at

1100
01:28:24,660 --> 01:28:27,020
what some of these artists look like.

1101
01:28:27,020 --> 01:28:32,020
So I built this site, which uses, again, the Discogs API,

1102
01:28:33,700 --> 01:28:36,220
to connect to these images,

1103
01:28:36,220 --> 01:28:39,260
which are actually linking to their website.

1104
01:28:39,260 --> 01:28:40,540
So none of this is local.

1105
01:28:40,540 --> 01:28:43,260
You'll notice it's not even in the static assets.

1106
01:28:43,260 --> 01:28:45,500
Most of the time, if you're building a site,

1107
01:28:45,500 --> 01:28:47,300
you would have your images either locally

1108
01:28:47,300 --> 01:28:48,540
or in a CDN or something.

1109
01:28:48,540 --> 01:28:51,820
But these are actually all contained elsewhere.

1110
01:28:51,820 --> 01:28:54,580
So anytime I click randomize,

1111
01:28:54,580 --> 01:28:57,020
it's actually looking at,

1112
01:28:57,020 --> 01:29:02,020
it's actually pulling the image from a URL

1113
01:29:02,020 --> 01:29:04,060
that's pointing to the Discogs API.

1114
01:29:08,020 --> 01:29:10,420
When you're dealing with API data,

1115
01:29:10,420 --> 01:29:12,220
sometimes you have incomplete data

1116
01:29:12,220 --> 01:29:13,900
or you're not quite sure what's there.

1117
01:29:13,900 --> 01:29:16,140
So it's something to think about in your design,

1118
01:29:16,140 --> 01:29:18,700
especially if you're building off of someone else's data.

1119
01:29:18,700 --> 01:29:21,080
So I thought it was also an interesting problem.

1120
01:29:21,080 --> 01:29:24,020
Can I showcase something that kind of works?

1121
01:29:24,020 --> 01:29:26,100
So you'll notice some oddities

1122
01:29:26,100 --> 01:29:28,580
when you go to the catalog here,

1123
01:29:28,580 --> 01:29:33,260
which you'll notice some names have a,

1124
01:29:33,260 --> 01:29:36,740
like a parentheses four, parentheses three.

1125
01:29:36,740 --> 01:29:37,580
That's because again,

1126
01:29:37,580 --> 01:29:41,180
this is taken directly from the Discogs API.

1127
01:29:41,180 --> 01:29:46,180
So it's a user-sourced database, data storage.

1128
01:29:46,660 --> 01:29:50,520
So people are making sometimes duplicate entries

1129
01:29:50,520 --> 01:29:52,140
for artists or bands.

1130
01:29:52,140 --> 01:29:55,480
And I didn't clean the data myself.

1131
01:29:55,480 --> 01:29:57,820
I just was using directly what they had.

1132
01:29:57,820 --> 01:30:02,260
So you'll notice that over here,

1133
01:30:02,260 --> 01:30:04,420
you're seeing like some weird things.

1134
01:30:04,420 --> 01:30:06,220
That's why it's like that.

1135
01:30:06,220 --> 01:30:08,700
But these are my, you know,

1136
01:30:08,700 --> 01:30:10,860
some of my favorite bands that I've listened through

1137
01:30:10,860 --> 01:30:12,520
throughout the years, among others,

1138
01:30:12,520 --> 01:30:15,080
but I just took a sampling.

1139
01:30:15,080 --> 01:30:18,820
I like to joke in my Macedon account,

1140
01:30:18,820 --> 01:30:21,980
I was joking about how this might be the first tutorial

1141
01:30:21,980 --> 01:30:24,900
that comes with a playlist.

1142
01:30:24,900 --> 01:30:26,980
So I will link you to the playlist

1143
01:30:26,980 --> 01:30:29,540
that has one song from each of these bands.

1144
01:30:29,540 --> 01:30:31,620
And it's part of what you were hearing earlier

1145
01:30:31,620 --> 01:30:33,740
when you came in.

1146
01:30:33,740 --> 01:30:37,620
So that music is there for you to listen to as well.

1147
01:30:40,300 --> 01:30:43,580
So that's what this site is for, just to get an idea.

1148
01:30:43,580 --> 01:30:48,380
The homepage is just meant to have a random image

1149
01:30:48,380 --> 01:30:53,380
from one of the bands that's on here.

1150
01:30:54,300 --> 01:30:57,300
The about page doesn't do much.

1151
01:30:57,300 --> 01:31:00,300
It just kind of tells you a little bit of that history.

1152
01:31:00,300 --> 01:31:02,060
And the catalog page,

1153
01:31:03,220 --> 01:31:08,220
this is showcasing some cool things with HTML.

1154
01:31:08,220 --> 01:31:09,740
So I'll show you that now.

1155
01:31:12,820 --> 01:31:15,740
Let's say you have a database that has all this info

1156
01:31:16,940 --> 01:31:20,000
and you wanted it to populate these cards.

1157
01:31:20,000 --> 01:31:23,380
Now you could code that all in yourself, right?

1158
01:31:23,380 --> 01:31:28,380
But with a template, all you have to do is load a,

1159
01:31:29,760 --> 01:31:32,960
whether it's a class element or just a list of elements,

1160
01:31:32,960 --> 01:31:37,560
and then you can build a for loop within your template.

1161
01:31:37,560 --> 01:31:40,360
And all you're ever building is one card.

1162
01:31:40,360 --> 01:31:42,760
And then it just cycles through your list

1163
01:31:42,760 --> 01:31:47,240
and it starts populating just using a flex box or whatever,

1164
01:31:47,240 --> 01:31:48,760
whether you're using grid or flex box,

1165
01:31:48,760 --> 01:31:50,200
you could do it either way.

1166
01:31:50,200 --> 01:31:54,040
And now let's say I wanted the user

1167
01:31:54,040 --> 01:31:56,080
to have a little bit more information

1168
01:31:56,080 --> 01:31:58,040
about each one of these bands.

1169
01:31:58,040 --> 01:32:01,600
So I wanted to populate whatever profile is listed

1170
01:32:01,600 --> 01:32:03,880
on each one of these artists

1171
01:32:03,880 --> 01:32:06,000
when you click on any one of these elements.

1172
01:32:06,000 --> 01:32:07,820
So you'll notice if I click here,

1173
01:32:09,000 --> 01:32:12,280
it brings up the profile that's linked

1174
01:32:12,280 --> 01:32:15,680
to that particular database entry.

1175
01:32:15,680 --> 01:32:20,680
When I clicked here, you did not see a full page refresh.

1176
01:32:20,880 --> 01:32:24,280
All you saw was that this particular element

1177
01:32:26,440 --> 01:32:28,240
populated the profile.

1178
01:32:28,240 --> 01:32:30,000
If I go to the next one and click,

1179
01:32:30,000 --> 01:32:32,080
it'll do the same thing.

1180
01:32:32,080 --> 01:32:34,760
And I can go to any one of these and do the same thing.

1181
01:32:35,680 --> 01:32:37,680
That's all HTMX.

1182
01:32:37,680 --> 01:32:41,320
And it's a fairly straightforward HTMX call

1183
01:32:41,320 --> 01:32:42,520
similar to what we've seen.

1184
01:32:42,520 --> 01:32:44,840
And we'll talk about that in a little bit.

1185
01:32:44,840 --> 01:32:47,280
And then the other thing I wanted to highlight

1186
01:32:47,280 --> 01:32:49,220
was the search.

1187
01:32:49,220 --> 01:32:54,220
Now search is interesting in a lot of different ways.

1188
01:32:56,420 --> 01:32:59,020
When you're doing a search to your database,

1189
01:33:00,440 --> 01:33:05,440
it's usually someone will type things in and hit enter,

1190
01:33:05,640 --> 01:33:07,880
and then it'll do that search.

1191
01:33:07,880 --> 01:33:12,200
But how cool would it be if you could send a request

1192
01:33:12,200 --> 01:33:14,520
on key press, right?

1193
01:33:14,520 --> 01:33:15,880
So what you'll notice first of all,

1194
01:33:15,880 --> 01:33:18,180
is that when I click here,

1195
01:33:18,180 --> 01:33:21,840
it changes to search results here.

1196
01:33:21,840 --> 01:33:25,120
And notice that if I type the,

1197
01:33:25,120 --> 01:33:28,040
you'll start seeing that the responses change.

1198
01:33:29,200 --> 01:33:32,480
And if I just wanted the album leaf, A,

1199
01:33:32,480 --> 01:33:35,480
notice that it is refreshing as I type.

1200
01:33:36,640 --> 01:33:39,440
So on each key press,

1201
01:33:39,440 --> 01:33:41,440
well, let me rephrase that.

1202
01:33:41,440 --> 01:33:43,560
On each key up,

1203
01:33:43,560 --> 01:33:48,560
it is doing a post request.

1204
01:33:48,580 --> 01:33:53,580
That post request is then making a search in my database,

1205
01:33:54,000 --> 01:33:55,880
sending that response back,

1206
01:33:55,880 --> 01:33:58,280
and filling up this area here.

1207
01:33:59,520 --> 01:34:01,360
One question you may have,

1208
01:34:01,360 --> 01:34:04,160
isn't that dangerous with key presses?

1209
01:34:04,160 --> 01:34:07,400
Someone's just mashing on their keyboard,

1210
01:34:07,400 --> 01:34:10,640
wouldn't that just send a million requests to your server

1211
01:34:10,640 --> 01:34:13,200
and just basically bombard you?

1212
01:34:13,200 --> 01:34:14,640
Yes, that could happen.

1213
01:34:14,640 --> 01:34:18,040
So for this particular active search,

1214
01:34:18,040 --> 01:34:21,840
what I do is I put in a delay of 500 milliseconds

1215
01:34:21,840 --> 01:34:24,120
before a request is sent.

1216
01:34:24,120 --> 01:34:26,160
So if someone is mashing their keyboard,

1217
01:34:26,160 --> 01:34:27,400
it's not gonna send a request

1218
01:34:27,400 --> 01:34:30,200
until they stop for 500 milliseconds.

1219
01:34:30,200 --> 01:34:33,400
So to see this in action,

1220
01:34:34,240 --> 01:34:38,100
what you can see is if you're in the,

1221
01:34:38,900 --> 01:34:41,700
in the terminal,

1222
01:34:43,660 --> 01:34:46,580
you'll notice the requests show up here

1223
01:34:46,580 --> 01:34:48,980
because I have a print statement on the terminal.

1224
01:34:52,460 --> 01:34:55,340
Notice right here, there's a print statement.

1225
01:34:55,340 --> 01:34:57,780
And I don't know if maybe I can do it this way.

1226
01:35:03,340 --> 01:35:07,700
All right, so look here on the left as I type,

1227
01:35:07,700 --> 01:35:10,020
if I were to just do,

1228
01:35:11,820 --> 01:35:13,260
let me see,

1229
01:35:13,260 --> 01:35:14,780
notice that there's nothing happening

1230
01:35:14,780 --> 01:35:16,520
because I'm just mashing my keyboards, right?

1231
01:35:16,520 --> 01:35:17,540
Nothing's happening.

1232
01:35:17,540 --> 01:35:21,400
But as soon as I let go, I don't like that one.

1233
01:35:21,400 --> 01:35:25,820
If I just do that, notice that there is the,

1234
01:35:25,820 --> 01:35:28,940
there is a request that was made down here.

1235
01:35:28,940 --> 01:35:33,360
And if I went to type something else in,

1236
01:35:34,320 --> 01:35:37,800
it caught two requests

1237
01:35:37,800 --> 01:35:41,900
because I paused between the E and the S.

1238
01:35:41,900 --> 01:35:43,000
So that's all.

1239
01:35:43,000 --> 01:35:44,280
HTMS as well.

1240
01:35:44,280 --> 01:35:46,680
You're seeing a very dynamic experience

1241
01:35:46,680 --> 01:35:49,380
between the user and the information.

1242
01:35:49,380 --> 01:35:51,720
They're typing, they're seeing things change.

1243
01:35:51,720 --> 01:35:54,200
It's not doing a full page refresh each time.

1244
01:35:54,200 --> 01:35:59,120
It's only refreshing the search results area, right?

1245
01:35:59,120 --> 01:36:02,180
And you can still do this check

1246
01:36:02,180 --> 01:36:05,340
once you've searched to see it change.

1247
01:36:06,460 --> 01:36:08,040
So how is that happening?

1248
01:36:08,940 --> 01:36:12,140
I wanted to show you a little bit of the,

1249
01:36:12,140 --> 01:36:17,140
at least the route for changing the profile,

1250
01:36:22,220 --> 01:36:25,100
just so you get a sense of how that happens.

1251
01:36:25,100 --> 01:36:26,420
Most of that, like I mentioned,

1252
01:36:26,420 --> 01:36:28,720
is gonna be in the routes.py file.

1253
01:36:28,720 --> 01:36:30,980
So I'm gonna go here to routes.py.

1254
01:36:32,780 --> 01:36:35,880
I'm gonna hide this for now.

1255
01:36:43,660 --> 01:36:46,820
I'm gonna go down to the one that's called catalog.

1256
01:36:46,820 --> 01:36:51,820
I tried to put enough information in the documentation there

1257
01:36:54,140 --> 01:36:56,040
so you get a sense of what's happening.

1258
01:36:58,740 --> 01:37:01,700
I'll try to explain as best I can.

1259
01:37:03,180 --> 01:37:06,340
And it should follow with some of the things

1260
01:37:06,340 --> 01:37:07,740
we've already seen.

1261
01:37:07,740 --> 01:37:11,380
And then I have these little to do items here,

1262
01:37:11,380 --> 01:37:13,820
which are some things we can work on

1263
01:37:13,820 --> 01:37:15,620
through the remainder of the tutorial.

1264
01:37:15,620 --> 01:37:17,220
We'll have about an hour and a half

1265
01:37:17,220 --> 01:37:18,140
to work on some of these.

1266
01:37:18,140 --> 01:37:21,140
I wanna give you a challenge.

1267
01:37:21,140 --> 01:37:22,580
In addition to some of the things here,

1268
01:37:22,580 --> 01:37:25,860
there's some issues in the repo that we can work on.

1269
01:37:25,860 --> 01:37:28,620
I'll probably work on some up here as well

1270
01:37:28,620 --> 01:37:31,620
so you can kind of get a sense of how those are being built.

1271
01:37:32,620 --> 01:37:35,340
But I really wanted us to have a lot of hands on time

1272
01:37:35,340 --> 01:37:37,420
with HTMX and make sure I can answer

1273
01:37:37,420 --> 01:37:39,420
all your questions as best I can.

1274
01:37:39,420 --> 01:37:42,300
But you'll notice how this one's happening.

1275
01:37:42,300 --> 01:37:45,860
So this catalog endpoint is what we see previously here,

1276
01:37:45,860 --> 01:37:47,100
the catalog endpoint.

1277
01:37:48,300 --> 01:37:50,900
When we go to the catalog endpoint,

1278
01:37:50,900 --> 01:37:53,860
we wanna make sure that we refresh this entire page.

1279
01:37:55,020 --> 01:37:57,880
So that's the first thing that we need to worry about,

1280
01:37:57,880 --> 01:38:01,900
which is getting all the items from the database

1281
01:38:01,900 --> 01:38:04,860
and making sure that they display.

1282
01:38:04,860 --> 01:38:09,100
So the first thing I do is I instantiate

1283
01:38:09,100 --> 01:38:13,300
a database object here.

1284
01:38:13,300 --> 01:38:16,740
So I'm using this utility class that I built.

1285
01:38:16,740 --> 01:38:18,780
You don't really need to know much about that.

1286
01:38:18,780 --> 01:38:23,740
Again, if you're used to using your own database.

1287
01:38:23,740 --> 01:38:26,460
Ordinarily, this just gives you access to a couple methods

1288
01:38:26,460 --> 01:38:28,940
that we can use for this application.

1289
01:38:28,940 --> 01:38:30,340
So I instantiate that,

1290
01:38:30,340 --> 01:38:33,020
and then the way that I get all my artists

1291
01:38:33,020 --> 01:38:35,020
or all the elements within that database

1292
01:38:35,020 --> 01:38:38,500
is I just built this all items method.

1293
01:38:38,500 --> 01:38:43,140
So that gives us a list of dictionary items.

1294
01:38:43,140 --> 01:38:46,460
So now we have a ton of, you know,

1295
01:38:46,460 --> 01:38:48,340
I think it's 63 artists.

1296
01:38:48,340 --> 01:38:50,860
So a list of 63 dictionaries.

1297
01:38:51,700 --> 01:38:55,660
We give the template a name, catalog.html.

1298
01:38:55,660 --> 01:38:58,860
So that's gonna be there in your templates folder

1299
01:38:59,020 --> 01:39:01,220
under catalog.html.

1300
01:39:01,220 --> 01:39:03,100
And then we start defining this context.

1301
01:39:03,100 --> 01:39:04,740
Again, this is the most important part

1302
01:39:04,740 --> 01:39:09,740
of sending the data back to the user through the template.

1303
01:39:11,340 --> 01:39:14,620
We're gonna have the request, which always needs to go.

1304
01:39:14,620 --> 01:39:17,420
So this always needs to be included.

1305
01:39:17,420 --> 01:39:22,420
Then we have this list of artists

1306
01:39:22,660 --> 01:39:27,660
that goes into, that uses this name within the template.

1307
01:39:29,020 --> 01:39:30,980
To access this list of artists.

1308
01:39:30,980 --> 01:39:33,140
You'll also notice an interesting thing here.

1309
01:39:33,140 --> 01:39:35,900
This is something that I took for granted a lot

1310
01:39:35,900 --> 01:39:37,620
when learning about templates,

1311
01:39:37,620 --> 01:39:42,620
which is because functions or methods are objects,

1312
01:39:43,300 --> 01:39:46,900
you can actually send those to your templates

1313
01:39:46,900 --> 01:39:49,700
and you utilize them within your templates.

1314
01:39:49,700 --> 01:39:53,260
So I built these helper functions

1315
01:39:53,260 --> 01:39:57,020
that I send directly to the template.

1316
01:39:57,020 --> 01:39:59,860
And what these functions do is they take

1317
01:39:59,860 --> 01:40:03,940
one artist element, so one dictionary element,

1318
01:40:03,940 --> 01:40:05,780
and it gets the information that I need

1319
01:40:05,780 --> 01:40:07,340
from that artist dictionary.

1320
01:40:07,340 --> 01:40:11,020
So the get website parses through that dictionary

1321
01:40:11,020 --> 01:40:14,020
and outputs the URL that I need.

1322
01:40:14,020 --> 01:40:17,620
And the reason I did that is because there's some logic,

1323
01:40:17,620 --> 01:40:21,420
some of the artists might be missing a URL, for example.

1324
01:40:21,420 --> 01:40:25,060
So I have to make sure that I check for that

1325
01:40:25,060 --> 01:40:28,940
or make a generic website or something.

1326
01:40:28,940 --> 01:40:31,520
Same thing with active members.

1327
01:40:31,520 --> 01:40:36,520
The API actually has active and inactive members.

1328
01:40:36,520 --> 01:40:39,460
So I didn't wanna send all those through blankly.

1329
01:40:39,460 --> 01:40:43,060
So I'm actually just sending this function through

1330
01:40:43,060 --> 01:40:45,820
to the template.

1331
01:40:45,820 --> 01:40:50,820
And then for each artist that I'm iterating over,

1332
01:40:55,180 --> 01:40:58,980
I feed that to this object to get the members

1333
01:40:58,980 --> 01:41:01,540
that I need to display on that card.

1334
01:41:01,540 --> 01:41:03,140
And same thing with get profile.

1335
01:41:03,140 --> 01:41:08,140
Some of the artists did not have a profile listed,

1336
01:41:10,200 --> 01:41:12,560
so I need to make sure I check for that as well.

1337
01:41:12,560 --> 01:41:17,560
So I'm sending these methods directly to the template.

1338
01:41:18,940 --> 01:41:20,700
Here, we saw this earlier.

1339
01:41:22,140 --> 01:41:24,560
So this is populating regularly,

1340
01:41:24,560 --> 01:41:27,120
but what happens when I have an HX request?

1341
01:41:27,120 --> 01:41:30,200
Well, I don't wanna populate that entire thing

1342
01:41:30,200 --> 01:41:32,280
into this one little card.

1343
01:41:32,280 --> 01:41:34,580
So this is where I do something additional.

1344
01:41:35,600 --> 01:41:38,600
First thing I do is I check for the HX trigger.

1345
01:41:43,920 --> 01:41:45,480
Oh, yeah, the HX trigger.

1346
01:41:45,480 --> 01:41:50,480
So this is one of the headers that we talked about earlier.

1347
01:41:51,560 --> 01:41:53,840
Why am I looking for the HX trigger?

1348
01:41:54,880 --> 01:41:59,880
So if you remember, the HX trigger

1349
01:42:01,360 --> 01:42:06,360
is the element that's triggering this HTMX request,

1350
01:42:09,160 --> 01:42:11,800
is the ID of that element.

1351
01:42:11,800 --> 01:42:15,760
So what I've done in the template, you'll notice,

1352
01:42:17,280 --> 01:42:19,140
I'm gonna bring up the template now.

1353
01:42:19,380 --> 01:42:24,380
Notice that this div ID, this whole element here

1354
01:42:26,100 --> 01:42:27,580
is that card that you see.

1355
01:42:29,020 --> 01:42:34,020
This ID actually corresponds to the artist ID.

1356
01:42:36,100 --> 01:42:40,460
And the ID is just, think of it as the database primary key.

1357
01:42:40,460 --> 01:42:44,940
That's what the ID corresponds to here.

1358
01:42:44,940 --> 01:42:49,260
So now when a user clicks on this element,

1359
01:42:49,260 --> 01:42:53,620
this ID is sent back to the route.

1360
01:42:59,600 --> 01:43:01,320
It's sent back to the route.

1361
01:43:01,320 --> 01:43:06,320
So now I have the artist ID from within that card

1362
01:43:06,940 --> 01:43:08,740
here in the backend,

1363
01:43:08,740 --> 01:43:11,620
and I make a database call based on that ID.

1364
01:43:12,580 --> 01:43:15,700
So now that I have that artist,

1365
01:43:16,660 --> 01:43:20,660
I'm changing the template now to this profile template,

1366
01:43:21,980 --> 01:43:26,980
which is in the artist profile directory.

1367
01:43:27,240 --> 01:43:31,980
And this just defines what that profile looks like

1368
01:43:31,980 --> 01:43:34,380
within the card.

1369
01:43:34,380 --> 01:43:36,540
So you can make it look however you want.

1370
01:43:36,540 --> 01:43:38,380
You could style it different.

1371
01:43:38,380 --> 01:43:40,660
I try to keep a similar style,

1372
01:43:40,660 --> 01:43:45,620
but you'll notice that here is that get profile method

1373
01:43:45,620 --> 01:43:47,420
or function that we pass through.

1374
01:43:47,420 --> 01:43:49,480
I'm passing in the artist.

1375
01:43:49,480 --> 01:43:53,300
I'm using safe because I want it to generate

1376
01:43:53,300 --> 01:43:57,860
if there's any HTML.

1377
01:43:59,500 --> 01:44:02,340
And the get website.

1378
01:44:02,340 --> 01:44:05,180
So the more info should populate

1379
01:44:05,180 --> 01:44:08,200
with the website of the artist.

1380
01:44:08,200 --> 01:44:12,540
So if I were to go to explosions in the sky

1381
01:44:12,540 --> 01:44:14,620
and hit more info,

1382
01:44:14,620 --> 01:44:16,800
you'll notice that it takes me there

1383
01:44:16,800 --> 01:44:19,560
to their website, right?

1384
01:44:24,960 --> 01:44:28,220
And then going back to the routes.

1385
01:44:28,220 --> 01:44:33,220
So once we've defined the template,

1386
01:44:38,200 --> 01:44:43,200
the artist, this find method sends a list,

1387
01:44:47,800 --> 01:44:49,440
but it should only find one person,

1388
01:44:49,440 --> 01:44:53,180
so, or yeah, one artist.

1389
01:44:53,180 --> 01:44:57,620
So I am populating the context for artist

1390
01:44:57,620 --> 01:44:59,960
with this one artist.

1391
01:44:59,960 --> 01:45:03,220
So now my template response includes the template,

1392
01:45:03,220 --> 01:45:06,560
which is going to be either the catalog HTML,

1393
01:45:07,040 --> 01:45:11,240
if a user navigates directly to this endpoint,

1394
01:45:11,240 --> 01:45:16,240
or the artist profile HTML if it's an HX request.

1395
01:45:16,760 --> 01:45:18,340
So that's the response.

1396
01:45:18,340 --> 01:45:21,620
And the context will be this entire thing.

1397
01:45:22,840 --> 01:45:27,680
And I'm going to create a new element for this context,

1398
01:45:27,680 --> 01:45:31,860
which is just artist singular that contains the artist

1399
01:45:31,860 --> 01:45:34,960
so that I can then get the profile info

1400
01:45:34,960 --> 01:45:37,040
for that particular element.

1401
01:45:37,040 --> 01:45:42,040
And that's all it takes to produce this type of,

1402
01:45:42,160 --> 01:45:44,760
and you'll notice the back button doesn't,

1403
01:45:46,480 --> 01:45:48,760
maybe I just need to go back there.

1404
01:45:48,760 --> 01:45:50,500
I don't know, how did I?

1405
01:45:56,520 --> 01:46:00,320
I get an internal server error when I press back

1406
01:46:00,320 --> 01:46:05,120
from one of the websites,

1407
01:46:05,120 --> 01:46:08,280
which I fixed in a separate branch,

1408
01:46:08,280 --> 01:46:09,800
and I'll show you how I fixed that.

1409
01:46:09,800 --> 01:46:12,120
And there's a reason why it gives that error.

1410
01:46:13,840 --> 01:46:15,160
But that's what happens.

1411
01:46:15,160 --> 01:46:18,100
So that bit of code that you see there,

1412
01:46:18,100 --> 01:46:23,100
just this one route is what handles both the generation

1413
01:46:24,520 --> 01:46:28,000
of this entire catalog page when someone clicks here,

1414
01:46:28,000 --> 01:46:30,800
or the generation of the profile

1415
01:46:30,800 --> 01:46:33,840
when someone clicks any one of these cards.

1416
01:46:33,840 --> 01:46:38,320
So no JavaScript, no additional fancy stuff,

1417
01:46:38,320 --> 01:46:43,160
just pretty straightforward HTML and Python.

1418
01:46:45,480 --> 01:46:48,840
All right, any questions on what's happening there at all?

1419
01:46:48,840 --> 01:46:49,880
Any confusion?

1420
01:46:49,880 --> 01:46:51,040
We're good.

1421
01:46:51,040 --> 01:46:54,060
All right, gonna take a look at the search,

1422
01:46:54,060 --> 01:46:58,260
and then we'll get our hands

1423
01:46:58,260 --> 01:47:00,280
and try to tackle some of these things.

1424
01:47:01,180 --> 01:47:03,620
So the search thing is interesting.

1425
01:47:04,660 --> 01:47:08,380
We have a get request when someone actually clicks

1426
01:47:08,380 --> 01:47:10,900
on the search bar,

1427
01:47:10,900 --> 01:47:13,460
and then we have obviously the post request.

1428
01:47:13,460 --> 01:47:18,460
So in FastAPI, we can define the get request

1429
01:47:18,980 --> 01:47:23,980
with router.get, and here's the search endpoint.

1430
01:47:25,420 --> 01:47:28,360
So this, what I wanted it to do is I just wanted it

1431
01:47:28,360 --> 01:47:31,780
to go ahead and populate all the artists

1432
01:47:31,780 --> 01:47:36,780
when a user clicks into that search element.

1433
01:47:38,900 --> 01:47:43,900
So again, we're populating this artist object

1434
01:47:44,800 --> 01:47:46,460
with all the items,

1435
01:47:46,460 --> 01:47:49,120
and we're sending some of that same stuff.

1436
01:47:49,120 --> 01:47:53,300
But I'm also including this Boolean here from search,

1437
01:47:53,300 --> 01:47:56,060
and I'll talk about that in a minute.

1438
01:47:56,060 --> 01:47:59,420
But I also have this thing called block name.

1439
01:47:59,420 --> 01:48:02,460
So this is the Jinja2 blocks thing.

1440
01:48:03,780 --> 01:48:08,220
But first things first, we are looking at,

1441
01:48:08,220 --> 01:48:10,660
actually I don't even think I'm using this block name

1442
01:48:10,660 --> 01:48:11,540
in this instance.

1443
01:48:11,540 --> 01:48:13,560
I think I was building towards something,

1444
01:48:13,560 --> 01:48:16,440
and you'll notice that I define a block name,

1445
01:48:16,440 --> 01:48:20,120
but I never, oh no, I do redefine it here, sorry.

1446
01:48:20,120 --> 01:48:23,240
So all I'm doing is if someone navigates

1447
01:48:23,240 --> 01:48:28,160
to search on their own, it does one thing.

1448
01:48:28,160 --> 01:48:33,160
If they are going, if they are generating it through a get,

1449
01:48:34,440 --> 01:48:38,000
through an HX request, then I'm defining that block name

1450
01:48:38,000 --> 01:48:39,840
merely to the content.

1451
01:48:39,840 --> 01:48:41,480
So that's where that's happening.

1452
01:48:41,480 --> 01:48:44,960
So again, navigating specifically to search

1453
01:48:44,960 --> 01:48:46,640
would be something like this.

1454
01:48:49,840 --> 01:48:54,840
And it's the same thing, it just generates search results.

1455
01:48:55,160 --> 01:48:58,600
But if I'm here in the about page,

1456
01:48:59,440 --> 01:49:02,160
and I click up here, this is actually,

1457
01:49:02,160 --> 01:49:04,800
as soon as I click up here,

1458
01:49:04,800 --> 01:49:07,280
this is going to be an HX request.

1459
01:49:07,280 --> 01:49:12,280
And this fancy hover stuff is all tailwind stuff.

1460
01:49:12,360 --> 01:49:14,800
So you can see kind of the dynamic nature

1461
01:49:14,800 --> 01:49:18,480
of things you could do even just with transitions

1462
01:49:18,480 --> 01:49:21,520
and mouse over and stuff.

1463
01:49:21,520 --> 01:49:24,200
So I'm going here, as soon as I click here,

1464
01:49:24,200 --> 01:49:26,820
you'll notice that the search results pop in here.

1465
01:49:26,820 --> 01:49:29,040
So that's an HX request.

1466
01:49:29,040 --> 01:49:34,040
I can show you in the search.html,

1467
01:49:34,640 --> 01:49:37,400
actually no, it's in the header.html,

1468
01:49:37,400 --> 01:49:42,400
that when, where I define the search box,

1469
01:49:43,200 --> 01:49:46,400
which is one big SVG, I believe.

1470
01:49:47,920 --> 01:49:49,960
Let's see if I can find it here.

1471
01:49:49,960 --> 01:49:51,840
Yeah, it's this whole SVG here.

1472
01:49:56,360 --> 01:49:57,600
Or maybe I haven't.

1473
01:49:59,560 --> 01:50:00,400
Where's the eight?

1474
01:50:00,400 --> 01:50:01,920
Maybe I haven't done it as.

1475
01:50:07,720 --> 01:50:08,720
Yeah, this is it here.

1476
01:50:08,720 --> 01:50:13,720
So this HX get is the HX call, the HTMLX call.

1477
01:50:20,000 --> 01:50:22,760
You'll notice that it has a target of content.

1478
01:50:22,760 --> 01:50:27,440
So whenever this request is sent,

1479
01:50:27,440 --> 01:50:30,480
it only, or the DOM element to be replaced

1480
01:50:30,480 --> 01:50:33,520
is the content, the block content.

1481
01:50:33,520 --> 01:50:38,000
And additional item is I want to push the URL to true.

1482
01:50:38,000 --> 01:50:40,280
This is another HX attribute.

1483
01:50:40,280 --> 01:50:45,280
So what this does is when someone clicks on the search,

1484
01:50:46,480 --> 01:50:49,640
you actually want it to populate here for history

1485
01:50:49,640 --> 01:50:51,680
in the search bar.

1486
01:50:51,680 --> 01:50:53,280
That doesn't always happen.

1487
01:50:53,280 --> 01:50:55,480
Like for example, when I click on these,

1488
01:50:56,620 --> 01:51:00,480
you notice that the search, the URL doesn't change.

1489
01:51:00,480 --> 01:51:04,320
So you have to think about whether you want

1490
01:51:04,320 --> 01:51:05,860
to push the URL or not.

1491
01:51:05,860 --> 01:51:07,600
There might be reasons you want to.

1492
01:51:07,600 --> 01:51:08,980
There might be reasons you don't.

1493
01:51:08,980 --> 01:51:10,960
I wouldn't want to push the URL

1494
01:51:10,960 --> 01:51:14,560
when we're just toggling between the profile and members,

1495
01:51:14,560 --> 01:51:18,720
but I might want to change it if I'm in the homepage

1496
01:51:18,720 --> 01:51:23,480
and I click search, I do want the search to populate there.

1497
01:51:23,480 --> 01:51:28,480
So that's why you see that particular attribute here.

1498
01:51:28,600 --> 01:51:33,600
So that this all, this all is particularly for the input,

1499
01:51:35,680 --> 01:51:37,000
for clicking on that input.

1500
01:51:37,000 --> 01:51:41,660
But then you'll see, that's that div ID there.

1501
01:51:41,660 --> 01:51:44,440
But then you see that the input itself

1502
01:51:44,440 --> 01:51:47,920
has the HX post method.

1503
01:51:48,840 --> 01:51:51,360
Here's the HX trigger that I talked about.

1504
01:51:51,360 --> 01:51:54,200
So there's a couple of things that are happening

1505
01:51:54,200 --> 01:51:56,320
and an HX target.

1506
01:51:57,320 --> 01:52:00,160
So the HX post, it's sending a post request

1507
01:52:00,160 --> 01:52:04,920
whenever someone comes to that endpoint.

1508
01:52:04,920 --> 01:52:09,920
And the trigger is key up, changed and delay.

1509
01:52:13,120 --> 01:52:18,120
So you would have to have a key up,

1510
01:52:18,200 --> 01:52:20,320
it needs to have changed and there needs to be a delay

1511
01:52:20,320 --> 01:52:23,360
of 500 milliseconds before it sends this post request.

1512
01:52:23,360 --> 01:52:26,740
There's more info on some of the different triggers

1513
01:52:26,740 --> 01:52:29,280
and things you can use in the HTML website.

1514
01:52:29,280 --> 01:52:30,760
So we'll look at those later.

1515
01:52:31,600 --> 01:52:35,880
And the comma search is you can say,

1516
01:52:35,880 --> 01:52:40,880
what that's supposed to be is in case someone hits enter,

1517
01:52:41,620 --> 01:52:44,840
it'll actually run the search automatically

1518
01:52:44,840 --> 01:52:46,600
instead of waiting for the 500 milliseconds.

1519
01:52:46,600 --> 01:52:48,640
So if someone types quickly and hits enter,

1520
01:52:48,640 --> 01:52:50,400
it'll do the search.

1521
01:52:50,400 --> 01:52:54,800
And then the HX target means that this is the ID

1522
01:52:54,800 --> 01:52:56,260
that's gonna change.

1523
01:52:56,260 --> 01:52:58,820
You'll notice that it's not, this ID doesn't even exist

1524
01:52:58,820 --> 01:53:01,120
within this header.html because again,

1525
01:53:01,120 --> 01:53:03,400
this is part of the template.

1526
01:53:03,400 --> 01:53:07,760
If I were to go back to the templates now

1527
01:53:10,120 --> 01:53:15,060
and look at search, actually I think it's under catalog.

1528
01:53:15,060 --> 01:53:16,080
No, here it is.

1529
01:53:16,080 --> 01:53:19,880
So there's the div ID here of search results.

1530
01:53:19,880 --> 01:53:24,880
So this element is the one that will populate

1531
01:53:26,200 --> 01:53:29,240
when someone does start searching.

1532
01:53:29,240 --> 01:53:32,340
Which is pretty neat because these are,

1533
01:53:33,580 --> 01:53:35,980
again, you don't have to build a whole new template

1534
01:53:35,980 --> 01:53:38,500
or anything, it's all happening here.

1535
01:53:38,500 --> 01:53:43,500
And what you see here is basically if there's,

1536
01:53:43,780 --> 01:53:48,120
if the search is a list,

1537
01:53:48,120 --> 01:53:53,120
then for result in results, then type in that name else

1538
01:53:54,400 --> 01:53:56,440
for result in results.

1539
01:53:56,440 --> 01:53:59,080
I'm trying to remember what I'm sending here.

1540
01:53:59,080 --> 01:54:02,040
So let me look at my route search.

1541
01:54:03,720 --> 01:54:08,480
I'm actually, did I end up using catalog instead?

1542
01:54:08,480 --> 01:54:09,320
You know what?

1543
01:54:09,320 --> 01:54:14,320
I ended up using catalog instead for the Jinja 2 blocks.

1544
01:54:14,420 --> 01:54:16,420
You also notice in this catalog,

1545
01:54:16,500 --> 01:54:21,140
one thing I noticed was if my search results

1546
01:54:21,140 --> 01:54:24,520
are only gonna be cards similar to what they appear

1547
01:54:24,520 --> 01:54:29,520
in the catalog, can't I just create a new block

1548
01:54:31,720 --> 01:54:35,920
that basically says if this is from the search endpoint,

1549
01:54:35,920 --> 01:54:39,840
populate the search elements here.

1550
01:54:39,840 --> 01:54:44,000
Or if this is from the catalog, do it this way.

1551
01:54:44,020 --> 01:54:48,180
So that's where you see in this template,

1552
01:54:48,180 --> 01:54:50,220
I'm using the Jinja 2 fragments,

1553
01:54:50,220 --> 01:54:53,760
which can specify which items to render

1554
01:54:53,760 --> 01:54:56,920
based on what triggered the response.

1555
01:54:56,920 --> 01:55:01,820
So notice that context had from search is true.

1556
01:55:01,820 --> 01:55:06,820
So now I can say if it's not from search,

1557
01:55:07,140 --> 01:55:11,300
do this one thing, else populate the search results.

1558
01:55:11,320 --> 01:55:15,360
So now I can have my catalogs ordinarily here

1559
01:55:15,360 --> 01:55:18,520
and my search results down here.

1560
01:55:20,000 --> 01:55:23,960
I think that's kinda how this piece was done.

1561
01:55:23,960 --> 01:55:27,260
Because initially I had separated out the search.

1562
01:55:27,260 --> 01:55:29,640
Now I'm trying to remember if I did that

1563
01:55:29,640 --> 01:55:32,040
in a separate branch or not.

1564
01:55:33,600 --> 01:55:35,820
Yeah, because look, over here I'm just sending

1565
01:55:35,820 --> 01:55:40,820
the catalog.html under the search get.

1566
01:55:41,800 --> 01:55:44,520
And I think also under the search post.

1567
01:55:44,520 --> 01:55:49,200
So I'm not even using that search.html file at all.

1568
01:55:49,200 --> 01:55:53,280
What I'm doing is if there's a block,

1569
01:55:53,280 --> 01:55:58,280
if it's an HX request, I'm saying only generate

1570
01:55:58,640 --> 01:56:02,160
the content block when someone clicks search

1571
01:56:02,160 --> 01:56:05,840
and only generate the artist card block

1572
01:56:05,840 --> 01:56:07,960
when it's a post request.

1573
01:56:07,960 --> 01:56:11,460
So that's pretty useful because you're no longer

1574
01:56:11,460 --> 01:56:14,660
having to split out separate files.

1575
01:56:14,660 --> 01:56:17,840
I think I built the search.html file to kinda show

1576
01:56:17,840 --> 01:56:20,760
the difference of what it would look like.

1577
01:56:21,780 --> 01:56:23,220
It might work for your workflow.

1578
01:56:23,220 --> 01:56:25,700
Sometimes you might wanna separate things out

1579
01:56:25,700 --> 01:56:29,260
just to keep things straight, put them in directories,

1580
01:56:29,260 --> 01:56:31,580
especially if you have a certain workflow

1581
01:56:31,580 --> 01:56:34,780
that you already use with templates.

1582
01:56:34,780 --> 01:56:39,780
Otherwise, for me, having just one template file

1583
01:56:40,620 --> 01:56:44,860
that looks at the state of things and generates that way

1584
01:56:44,860 --> 01:56:46,340
makes it easier for me.

1585
01:56:47,380 --> 01:56:48,220
And that's it.

1586
01:56:48,220 --> 01:56:49,700
So then the post request is here.

1587
01:56:49,700 --> 01:56:54,500
We looked at the HTML already and it's pretty similar

1588
01:56:54,500 --> 01:56:55,820
to what we've seen before.

1589
01:56:55,820 --> 01:57:00,820
We're generating all artists and let's see.

1590
01:57:00,820 --> 01:57:04,060
Let's see.

1591
01:57:04,060 --> 01:57:07,980
Then we're doing, so this is just the database call.

1592
01:57:07,980 --> 01:57:09,800
Again, if you're using any database,

1593
01:57:09,800 --> 01:57:11,640
you'd do some sort of find or search

1594
01:57:11,640 --> 01:57:13,060
or however you're using.

1595
01:57:14,020 --> 01:57:19,020
The search key is gonna be name

1596
01:57:19,480 --> 01:57:22,340
and the value is the search.

1597
01:57:22,340 --> 01:57:26,640
So that search corresponds to the user input.

1598
01:57:26,640 --> 01:57:31,640
So each key up with the 500 millisecond delay

1599
01:57:34,080 --> 01:57:35,480
is gonna populate the search.

1600
01:57:35,480 --> 01:57:38,680
So now each time that post request is sent,

1601
01:57:38,680 --> 01:57:43,240
we're finding the list of artists that matches that search.

1602
01:57:43,240 --> 01:57:47,080
And then those are the artists that get sent to the template

1603
01:57:47,080 --> 01:57:51,040
and then they generate into this artist card.

1604
01:57:51,040 --> 01:57:54,720
And that's how we now see them on here

1605
01:57:54,720 --> 01:57:58,420
when I just start typing H.

1606
01:57:59,840 --> 01:58:03,520
Those are all the bands that have an H in their name.

1607
01:58:03,520 --> 01:58:07,520
Or if I was looking for a specific Japanese composer,

1608
01:58:11,400 --> 01:58:12,500
and there you go.

1609
01:58:15,760 --> 01:58:17,260
And that resets.

1610
01:58:19,280 --> 01:58:24,280
Those are some of the more straight forward

1611
01:58:25,160 --> 01:58:30,160
straight forward HTML type of examples I have.

1612
01:58:31,320 --> 01:58:34,280
Now we have about an hour and 15 minutes

1613
01:58:34,280 --> 01:58:37,200
to work on some of these issues.

1614
01:58:37,200 --> 01:58:39,840
And there's a secret, not a secret,

1615
01:58:39,840 --> 01:58:42,160
if you've gone to the repo,

1616
01:58:42,160 --> 01:58:44,540
you might have noticed there's a separate branch

1617
01:58:44,540 --> 01:58:47,600
called additional features, I believe.

1618
01:58:47,600 --> 01:58:49,500
Some of the answers to those issues

1619
01:58:49,500 --> 01:58:50,880
are there in that branch.

1620
01:58:50,880 --> 01:58:53,880
If you like to work backwards,

1621
01:58:53,880 --> 01:58:56,520
I do a lot of times, I like to see how something works

1622
01:58:56,520 --> 01:58:58,720
and then kind of deconstruct.

1623
01:58:58,720 --> 01:59:00,920
You can go to that branch to see

1624
01:59:00,920 --> 01:59:04,360
how some of these things are solved and work that way.

1625
01:59:04,360 --> 01:59:09,360
Or if you wanna try to give it a go,

1626
01:59:09,540 --> 01:59:12,760
there in the routes.py are some to do items

1627
01:59:12,760 --> 01:59:14,920
under each one of those functions,

1628
01:59:14,920 --> 01:59:17,560
as well as in the repo, there's some issues

1629
01:59:17,560 --> 01:59:22,440
that are either similar or I think there might be one

1630
01:59:22,440 --> 01:59:23,440
that's separate.

1631
01:59:23,440 --> 01:59:25,240
There's some that are marked good first issue,

1632
01:59:25,240 --> 01:59:28,460
those I believe might be a little easier to tackle.

1633
01:59:28,460 --> 01:59:30,620
And there's some more complex things.

1634
01:59:32,040 --> 01:59:36,720
After let's say, after about half an hour,

1635
01:59:37,620 --> 01:59:39,880
we'll take a really short break

1636
01:59:39,880 --> 01:59:42,500
and I'll demo what those additional features look like

1637
01:59:42,500 --> 01:59:45,600
and then we can finish off working

1638
01:59:45,600 --> 01:59:47,900
to get yours up to speed as well.

1639
01:59:48,880 --> 01:59:51,480
If you opened up in a code space,

1640
01:59:51,480 --> 01:59:54,140
you might need to do a get fetch all sort of thing

1641
01:59:54,140 --> 01:59:56,720
to get that additional branch on there.

1642
01:59:56,720 --> 01:59:59,360
If you have issues with that, just let me know.

1643
01:59:59,360 --> 02:00:04,360
But again, I want us to kind of take a look at those issues.

1644
02:00:04,520 --> 02:00:06,560
Any questions so far?

1645
02:00:06,560 --> 02:00:08,360
We're doing good?

1646
02:00:08,360 --> 02:00:09,640
Excellent.

1647
02:00:09,640 --> 02:00:11,640
All right, I'm gonna put on some music.

1648
02:00:13,260 --> 02:00:14,620
All right, how's it going?

1649
02:00:15,840 --> 02:00:17,560
Some of you are getting there.

1650
02:00:17,560 --> 02:00:19,760
While you keep working, I do wanna,

1651
02:00:19,760 --> 02:00:24,760
I do want to kind of show you some of the things

1652
02:00:25,180 --> 02:00:26,880
that you can build towards.

1653
02:00:26,880 --> 02:00:28,120
You can continue working.

1654
02:00:28,120 --> 02:00:31,480
I just wanna make sure we have time to get to some of these.

1655
02:00:31,480 --> 02:00:32,880
So give me one moment.

1656
02:00:36,080 --> 02:00:41,080
What I've done is I'm opening up,

1657
02:00:42,280 --> 02:00:44,080
and I'll put it up on the screen in a moment.

1658
02:00:44,080 --> 02:00:46,580
I'm opening up the additional features branch.

1659
02:00:47,580 --> 02:00:50,120
Just give me one moment.

1660
02:01:02,300 --> 02:01:03,140
Okay.

1661
02:01:10,260 --> 02:01:14,020
So now I have, let me make this bigger.

1662
02:01:14,020 --> 02:01:17,140
This is the, oh, it might not be the right branch.

1663
02:01:22,400 --> 02:01:24,160
I used the wrong,

1664
02:01:29,900 --> 02:01:32,020
oh, I'm running too many.

1665
02:01:32,020 --> 02:01:37,020
I need to close one of these, that's why.

1666
02:01:46,420 --> 02:01:48,100
All right, just give me a second.

1667
02:01:48,100 --> 02:01:52,500
I wanted to make sure we all have a sense

1668
02:01:52,500 --> 02:01:53,860
of what we can build towards.

1669
02:01:53,860 --> 02:01:56,780
And I'm seeing, the good thing is I'm seeing

1670
02:01:56,780 --> 02:02:00,100
some different ways to approach some of these,

1671
02:02:00,100 --> 02:02:01,020
which is good.

1672
02:02:02,020 --> 02:02:07,020
Why is this not?

1673
02:02:15,540 --> 02:02:20,040
I might just have to open this up from, okay.

1674
02:02:22,300 --> 02:02:23,140
Here we go.

1675
02:02:25,620 --> 02:02:28,460
So as I mentioned, the data that I get from,

1676
02:02:29,460 --> 02:02:34,460
that I'm using comes from the Discogs API.

1677
02:02:35,140 --> 02:02:40,140
And because of that, sometimes I run into this thing,

1678
02:02:41,380 --> 02:02:44,140
I wanted to show a lot of images on the screen,

1679
02:02:44,140 --> 02:02:47,020
but sometimes I would hit the rate limit,

1680
02:02:47,020 --> 02:02:50,180
and then it would give a not found error.

1681
02:02:50,180 --> 02:02:53,300
So hopefully I don't run into too much of that now.

1682
02:02:53,300 --> 02:02:55,820
I think since we're all working off of different containers,

1683
02:02:55,820 --> 02:03:00,580
it won't bombard them, so hopefully that works.

1684
02:03:00,580 --> 02:03:04,220
But if you see anything odd, that might be part of it.

1685
02:03:04,220 --> 02:03:06,260
But let me get this running really quick.

1686
02:03:07,980 --> 02:03:11,980
I was in the wrong, I started the wrong code space.

1687
02:03:21,860 --> 02:03:22,940
All right, here we go.

1688
02:03:25,820 --> 02:03:30,820
So I'll show you the front end experience first.

1689
02:03:36,340 --> 02:03:40,900
There's a, this is the, this should have the

1690
02:03:40,900 --> 02:03:45,460
randomized button working so that only the update,

1691
02:03:45,460 --> 02:03:47,900
only the image updates.

1692
02:03:47,900 --> 02:03:52,080
This would be important in cases where you might have

1693
02:03:52,080 --> 02:03:53,500
a lot of content on a webpage,

1694
02:03:53,500 --> 02:03:55,420
and you don't want a full refresh,

1695
02:03:56,020 --> 02:03:59,140
you don't get that kind of jittery feeling.

1696
02:03:59,140 --> 02:04:01,980
So if I press randomize, it's really only

1697
02:04:01,980 --> 02:04:04,340
randomizing this image here.

1698
02:04:04,340 --> 02:04:06,620
You can see it's pretty snappy.

1699
02:04:06,620 --> 02:04:09,220
And again, these aren't even local images.

1700
02:04:09,220 --> 02:04:12,380
This is actually hitting a URL and bringing the image

1701
02:04:12,380 --> 02:04:16,780
and adding it in here, so it's pretty quick.

1702
02:04:16,780 --> 02:04:19,700
So that's the, that's one piece there.

1703
02:04:19,700 --> 02:04:23,700
Another to do was, oh yes.

1704
02:04:25,420 --> 02:04:30,420
There are, there are, you can use CSS transitions.

1705
02:04:35,140 --> 02:04:39,500
Yes, and that is one question that you get a lot

1706
02:04:39,500 --> 02:04:43,260
with HTMX is can you make it look a little bit smoother

1707
02:04:43,260 --> 02:04:47,140
with the transitions, but yes, using CSS transitions,

1708
02:04:47,140 --> 02:04:48,940
some of them are already predefined.

1709
02:04:48,940 --> 02:04:51,420
You don't have to do much else other than give it

1710
02:04:51,420 --> 02:04:53,620
that attribute in the HTML.

1711
02:04:53,620 --> 02:04:54,720
That's a good question.

1712
02:04:56,340 --> 02:04:59,860
The about page, when you click in it,

1713
02:04:59,860 --> 02:05:02,780
you'll see that it does give you the URL up here,

1714
02:05:02,780 --> 02:05:05,660
but all I've really changed is the content here.

1715
02:05:05,660 --> 02:05:10,260
So you can see how this might even start looking

1716
02:05:10,260 --> 02:05:11,860
like a single page application.

1717
02:05:11,860 --> 02:05:14,380
You can create a shell and you're only changing elements

1718
02:05:14,380 --> 02:05:15,940
within the application.

1719
02:05:15,940 --> 02:05:19,380
It's still not technically a single page application,

1720
02:05:19,380 --> 02:05:20,540
but it can function that way.

1721
02:05:20,540 --> 02:05:23,820
Each one of these can be set to only refresh the content.

1722
02:05:24,740 --> 02:05:29,060
And again, we see that even when you select search

1723
02:05:29,060 --> 02:05:32,660
that it only populates what you need to populate here.

1724
02:05:32,660 --> 02:05:36,540
One of the to do items was to be able to select one

1725
02:05:36,540 --> 02:05:38,300
of these and then when you click back,

1726
02:05:38,300 --> 02:05:39,620
it brings back the members.

1727
02:05:39,620 --> 02:05:41,860
So now it acts as a toggle.

1728
02:05:41,860 --> 02:05:46,860
So you can see each time that you're doing that,

1729
02:05:47,460 --> 02:05:51,360
you're sending a get request to the server,

1730
02:05:51,360 --> 02:05:53,220
but it's only updating the information

1731
02:05:53,220 --> 02:05:54,780
that it needs each time.

1732
02:05:56,200 --> 02:05:59,960
Another item that we talked about was the,

1733
02:06:01,780 --> 02:06:04,480
I think those were the pieces we're checking.

1734
02:06:04,480 --> 02:06:07,000
I do wanna show something really cool.

1735
02:06:07,000 --> 02:06:11,400
So one situation you may run into when you have,

1736
02:06:11,400 --> 02:06:14,020
let's say a lot of images and you're working

1737
02:06:14,020 --> 02:06:19,020
with one of these server side rendering type of situations,

1738
02:06:21,400 --> 02:06:23,040
you wanna populate a lot of images,

1739
02:06:23,040 --> 02:06:25,920
but you don't want to have to load them all

1740
02:06:25,920 --> 02:06:29,600
before your page comes into view, right?

1741
02:06:29,600 --> 02:06:33,160
So one thing that we can do with HTMX

1742
02:06:33,160 --> 02:06:35,840
is we can create a load more button.

1743
02:06:35,840 --> 02:06:39,320
So you only populate certain amount, you load more,

1744
02:06:39,320 --> 02:06:41,960
it keeps loading, but even cooler than that

1745
02:06:41,960 --> 02:06:46,280
is you can just have a trigger that when an element

1746
02:06:46,280 --> 02:06:48,740
comes into view, into the viewport,

1747
02:06:48,740 --> 02:06:51,000
it loads a next set of elements.

1748
02:06:51,000 --> 02:06:52,920
And then as you're scrolling,

1749
02:06:52,920 --> 02:06:56,980
it starts populating developments after the one

1750
02:06:56,980 --> 02:06:58,720
that you just populated.

1751
02:06:58,720 --> 02:07:01,360
So when I click on the detail link here,

1752
02:07:01,360 --> 02:07:04,300
which is new in the additional features branch,

1753
02:07:04,300 --> 02:07:09,000
you'll notice that it brings up an image, a name,

1754
02:07:09,000 --> 02:07:11,720
and you'll see the scroll bar right here, right?

1755
02:07:11,720 --> 02:07:16,040
This scroll bar should only have populated enough

1756
02:07:16,040 --> 02:07:20,000
for a few bands.

1757
02:07:20,000 --> 02:07:21,880
But notice, it starts getting bigger

1758
02:07:21,880 --> 02:07:23,840
as I start scrolling down.

1759
02:07:23,840 --> 02:07:26,280
Because what's happening is when it reaches

1760
02:07:26,280 --> 02:07:30,500
a certain element into view, it sends a get request

1761
02:07:30,500 --> 02:07:32,560
to populate the next element.

1762
02:07:32,560 --> 02:07:35,080
So now, when you come to the details page,

1763
02:07:35,080 --> 02:07:37,780
you're not loading a bunch of images

1764
02:07:37,780 --> 02:07:40,080
that then you have to scroll down to see,

1765
02:07:40,080 --> 02:07:42,220
you're only loading them as you need them

1766
02:07:42,220 --> 02:07:44,400
as someone is scrolling down.

1767
02:07:44,400 --> 02:07:49,400
Notice, the scroll bar keeps popping up, right?

1768
02:07:50,080 --> 02:07:55,080
Ella Jenkins sings a lot of children's music,

1769
02:07:56,080 --> 02:07:57,920
so that's why she's on here as well.

1770
02:07:57,920 --> 02:07:59,560
My four-year-old was here earlier.

1771
02:08:03,120 --> 02:08:05,240
Notice, it keeps getting bigger, right?

1772
02:08:05,240 --> 02:08:10,240
And I still have not, I haven't hit any sort of snag, right?

1773
02:08:16,920 --> 02:08:18,600
Just keeps growing.

1774
02:08:20,920 --> 02:08:23,860
I think that's a really cool feature

1775
02:08:23,860 --> 02:08:25,700
when you're dealing with a lot of data,

1776
02:08:25,700 --> 02:08:29,160
or even if you, let's say you're from the data side

1777
02:08:29,160 --> 02:08:31,560
and you have these huge models, there's different ways

1778
02:08:31,560 --> 02:08:35,480
that you can interact with the visualization,

1779
02:08:35,480 --> 02:08:37,080
loading things as you need them.

1780
02:08:37,080 --> 02:08:38,960
Again, you could use a similar method.

1781
02:08:38,960 --> 02:08:40,760
You get to the bottom, load more,

1782
02:08:40,760 --> 02:08:43,120
or load next, those types of things.

1783
02:08:43,980 --> 02:08:47,280
I think it's a pretty useful feature.

1784
02:08:48,280 --> 02:08:52,040
I mean, I was super excited just to get this thing working.

1785
02:08:52,040 --> 02:08:53,760
Now, one thing that you have to think about

1786
02:08:53,760 --> 02:08:57,720
is how do you anticipate what to load next,

1787
02:08:57,720 --> 02:09:00,160
and what do you do when you get to the very end?

1788
02:09:00,160 --> 02:09:02,840
I think initially, when I had built this,

1789
02:09:02,840 --> 02:09:05,840
when I got to the end, it would create some sort of error

1790
02:09:05,840 --> 02:09:08,920
because the get request kept looking for the next item

1791
02:09:08,920 --> 02:09:10,560
and didn't know what to find.

1792
02:09:10,560 --> 02:09:12,720
But there's ways that you can deal with that

1793
02:09:12,720 --> 02:09:14,280
on the Python side, right?

1794
02:09:15,280 --> 02:09:17,540
You know how to handle exceptions.

1795
02:09:17,540 --> 02:09:20,820
You know how to handle different sets of data.

1796
02:09:20,820 --> 02:09:23,240
You can get all the way to the very end, which is here,

1797
02:09:23,240 --> 02:09:24,840
and we're done, right?

1798
02:09:24,840 --> 02:09:29,280
And one thing that you'll notice with the kinds of data

1799
02:09:29,280 --> 02:09:31,760
that's on each one of these, like I mentioned,

1800
02:09:31,760 --> 02:09:36,760
since this comes from a API that has inconsistent data,

1801
02:09:37,320 --> 02:09:42,320
some bands might have Wikipedia entries, but some don't.

1802
02:09:42,640 --> 02:09:46,920
So that's all handled through Python again.

1803
02:09:46,920 --> 02:09:50,760
I'm seeing if there's a link that contains Wikipedia on it,

1804
02:09:50,760 --> 02:09:53,080
and if not, then I just don't display it.

1805
02:09:53,080 --> 02:09:56,080
You notice that it doesn't create any sort of visual error.

1806
02:09:58,160 --> 02:10:02,840
On the HTML side, I've only coded one detail card.

1807
02:10:02,840 --> 02:10:03,680
That's it.

1808
02:10:03,680 --> 02:10:07,680
I haven't created a huge HTML file out of this.

1809
02:10:07,680 --> 02:10:10,100
We just have one template that's iterating

1810
02:10:10,100 --> 02:10:13,780
over all these artists' dictionaries

1811
02:10:13,780 --> 02:10:17,540
and populating the information as needed.

1812
02:10:17,540 --> 02:10:19,980
Some of these bands have additional images,

1813
02:10:19,980 --> 02:10:23,820
so I could potentially add additional HX requests

1814
02:10:23,820 --> 02:10:26,440
that allow me to click through and see all the images

1815
02:10:26,440 --> 02:10:29,260
associated with the band members.

1816
02:10:29,260 --> 02:10:32,680
That's something I haven't done in this particular case,

1817
02:10:32,680 --> 02:10:36,780
but you can see how it starts looking a lot more dynamic

1818
02:10:36,780 --> 02:10:39,700
as you start building it out.

1819
02:10:39,860 --> 02:10:42,300
Again, everything that we've done so far

1820
02:10:42,300 --> 02:10:45,340
is either in the HTML or in Python.

1821
02:10:45,340 --> 02:10:47,100
We haven't needed to do much else

1822
02:10:47,100 --> 02:10:51,620
outside of configuring our tailwind.

1823
02:10:54,220 --> 02:10:59,140
I was going to wait a little bit longer

1824
02:10:59,140 --> 02:11:04,140
to look at some additional pieces of customizations

1825
02:11:04,700 --> 02:11:07,860
that you can do within tailwind and HTML,

1826
02:11:07,860 --> 02:11:09,860
but I think we might as well get to them

1827
02:11:09,860 --> 02:11:12,480
so I don't miss out on speaking about that.

1828
02:11:16,260 --> 02:11:19,180
We've tackled some repository issues.

1829
02:11:19,180 --> 02:11:20,940
I had an extra credit here, I forgot about it.

1830
02:11:20,940 --> 02:11:23,940
You can add keyboard shortcuts as triggers.

1831
02:11:23,940 --> 02:11:27,140
You can make your web application function

1832
02:11:27,140 --> 02:11:28,080
almost like a web app.

1833
02:11:28,080 --> 02:11:30,500
You could do Ctrl S for search,

1834
02:11:30,500 --> 02:11:34,300
or you could make different kinds of modifiers

1835
02:11:34,300 --> 02:11:36,620
to keyboard shortcuts so people could interact

1836
02:11:36,620 --> 02:11:38,100
with your website.

1837
02:11:38,100 --> 02:11:39,540
Could be a really cool thing to do,

1838
02:11:39,540 --> 02:11:42,040
so maybe try that out in your spare time.

1839
02:11:43,220 --> 02:11:47,300
But one thing you may think about

1840
02:11:47,300 --> 02:11:50,140
when you're building with predetermined classes,

1841
02:11:50,140 --> 02:11:52,140
as is the case with tailwind,

1842
02:11:52,140 --> 02:11:53,660
is what do you do when you need

1843
02:11:53,660 --> 02:11:55,660
a little bit more customizability?

1844
02:11:57,940 --> 02:11:59,620
Tailwind does allow you to create

1845
02:11:59,620 --> 02:12:02,460
your own custom CSS classes,

1846
02:12:02,460 --> 02:12:04,780
so you can define those yourself.

1847
02:12:04,820 --> 02:12:07,780
And then you can also provide your own color scheme.

1848
02:12:07,780 --> 02:12:11,060
So you saw those that are already predefined

1849
02:12:11,060 --> 02:12:12,620
for red and blue and fuchsia.

1850
02:12:12,620 --> 02:12:17,620
There's so many, but we all wanna be unique butterflies,

1851
02:12:17,660 --> 02:12:19,380
and so sometimes we may wanna create

1852
02:12:19,380 --> 02:12:24,140
our own sorts of color palettes,

1853
02:12:24,140 --> 02:12:25,740
and we can name them however we want,

1854
02:12:25,740 --> 02:12:28,060
so it allows you to do that.

1855
02:12:28,060 --> 02:12:32,460
You can also use custom and pre-built components.

1856
02:12:32,460 --> 02:12:35,820
There's a paid element to tailwind CSS

1857
02:12:35,820 --> 02:12:39,500
if you wanna pay for these very professional looking

1858
02:12:39,500 --> 02:12:42,080
elements that you just don't wanna build yourself,

1859
02:12:42,080 --> 02:12:45,500
but then you can then customize them once you've used them,

1860
02:12:45,500 --> 02:12:47,500
so that's pretty great.

1861
02:12:47,500 --> 02:12:51,460
And then what's also pretty great about tailwind

1862
02:12:51,460 --> 02:12:53,660
is it provides these specific breakpoints

1863
02:12:53,660 --> 02:12:54,540
when you're building.

1864
02:12:54,540 --> 02:12:58,100
I haven't showcased a lot of that in what I've built so far,

1865
02:12:58,100 --> 02:13:02,400
but you can set, you build with mobile first,

1866
02:13:02,400 --> 02:13:04,600
design, and then you set breakpoints,

1867
02:13:04,600 --> 02:13:07,960
and all you have to do is use, say,

1868
02:13:07,960 --> 02:13:11,160
MD for medium screen size, MD colon,

1869
02:13:11,160 --> 02:13:13,680
and then provide all the classes that apply

1870
02:13:13,680 --> 02:13:15,640
to that breakpoint and larger.

1871
02:13:15,640 --> 02:13:18,800
And same thing with large, LG colon,

1872
02:13:18,800 --> 02:13:23,480
everything past that would be customized.

1873
02:13:23,480 --> 02:13:26,620
So a lot of stuff you can do there.

1874
02:13:26,620 --> 02:13:29,660
What you would wanna do is,

1875
02:13:29,660 --> 02:13:32,320
here's an example of a custom class

1876
02:13:32,320 --> 02:13:35,560
within that directives file that we saw.

1877
02:13:35,560 --> 02:13:37,760
So what you're doing is you're calling in

1878
02:13:37,760 --> 02:13:41,480
that components layer, which is one of the layers

1879
02:13:41,480 --> 02:13:45,440
used during the build process or compilation process,

1880
02:13:45,440 --> 02:13:48,260
and you're creating your custom button.

1881
02:13:48,260 --> 02:13:53,260
So now, in your HTML, instead of having to type in

1882
02:13:53,260 --> 02:13:57,600
PX2, PY1, BGBlue, rounded, Text Slate 200,

1883
02:13:57,600 --> 02:14:00,880
now all you have to do is put in custom button,

1884
02:14:00,880 --> 02:14:02,680
and it'll do all of that for you.

1885
02:14:02,680 --> 02:14:07,480
So that might reduce the verbosity of the HTML element.

1886
02:14:07,480 --> 02:14:09,760
Some people might like to do that.

1887
02:14:09,760 --> 02:14:14,760
Also, you could just straight up code a custom CSS class

1888
02:14:15,680 --> 02:14:17,360
within that directives.

1889
02:14:17,360 --> 02:14:20,820
You just would not add it to the component layer.

1890
02:14:20,820 --> 02:14:25,560
You would just code a straight up CSS property,

1891
02:14:25,560 --> 02:14:27,120
just like you're used to.

1892
02:14:27,120 --> 02:14:31,000
So the equivalent of that piece that we saw up here,

1893
02:14:31,000 --> 02:14:35,080
so the equivalent of that in CSS looks like this.

1894
02:14:35,080 --> 02:14:37,080
They're both doing the same thing,

1895
02:14:37,080 --> 02:14:40,160
and you would call them the same way within your HTML.

1896
02:14:40,160 --> 02:14:43,520
You would either do custom button or custom buttoner,

1897
02:14:43,520 --> 02:14:46,400
and they do the exact same thing.

1898
02:14:46,400 --> 02:14:48,000
They're just written differently.

1899
02:14:51,920 --> 02:14:54,800
I could get into it, but it matters in terms of

1900
02:14:54,800 --> 02:14:58,000
how things are layered in the cascading sheet.

1901
02:14:58,000 --> 02:15:01,600
It can get a little bit more down the rabbit hole with that.

1902
02:15:01,600 --> 02:15:02,800
This is how you would do that

1903
02:15:02,800 --> 02:15:04,760
if you wanted to build your own custom classes

1904
02:15:04,760 --> 02:15:07,840
that you can then call within your HTML elements.

1905
02:15:07,840 --> 02:15:12,840
And again, forget about the compiled CSS class file,

1906
02:15:13,240 --> 02:15:15,440
because you wouldn't need to worry about it.

1907
02:15:17,240 --> 02:15:21,160
A custom color palette would look a little bit like this.

1908
02:15:21,160 --> 02:15:25,280
So in that tailwind.config file that we saw

1909
02:15:25,280 --> 02:15:27,600
that's at the root of your project,

1910
02:15:27,600 --> 02:15:30,880
you might have an extension.

1911
02:15:30,880 --> 02:15:34,480
So you would extend the available colors.

1912
02:15:37,280 --> 02:15:41,360
And then you would add, these are just an example.

1913
02:15:41,360 --> 02:15:43,360
You could add a primary color.

1914
02:15:43,360 --> 02:15:45,680
So then in your HTML, you would just say

1915
02:15:45,680 --> 02:15:49,120
class equals class bg-primary,

1916
02:15:49,120 --> 02:15:51,020
and it would always be that color.

1917
02:15:51,020 --> 02:15:55,420
So that way, if you're developing with a mindset

1918
02:15:55,420 --> 02:15:57,820
of primary, secondary type colors,

1919
02:15:57,820 --> 02:15:59,140
you just call that in your class

1920
02:15:59,140 --> 02:16:02,620
and you already know what color scheme you're using.

1921
02:16:02,620 --> 02:16:05,720
If you wanted to define your own palette,

1922
02:16:05,720 --> 02:16:09,260
like we see with the slate or some of those other colors,

1923
02:16:09,260 --> 02:16:10,860
here's an example of how you could do that.

1924
02:16:10,860 --> 02:16:13,660
Here's a turquoise color palette,

1925
02:16:13,660 --> 02:16:16,340
and each one of these levels would be defined

1926
02:16:16,340 --> 02:16:19,820
at each one of these hex codes.

1927
02:16:21,060 --> 02:16:23,140
How do I get my own color palette?

1928
02:16:23,140 --> 02:16:26,020
There's a lot of cool generators online

1929
02:16:26,020 --> 02:16:28,380
for tailwind color palette generator

1930
02:16:28,380 --> 02:16:29,700
that you can type in red,

1931
02:16:29,700 --> 02:16:32,580
and it kind of gives you a whole slew of these.

1932
02:16:32,580 --> 02:16:34,960
And then you just pretty much copy paste them

1933
02:16:34,960 --> 02:16:36,900
into this config file.

1934
02:16:36,900 --> 02:16:41,200
Again, this allows for that kind of customization

1935
02:16:41,200 --> 02:16:43,800
you might need if you're being very specific

1936
02:16:43,800 --> 02:16:45,340
about the colors you need to use.

1937
02:16:45,340 --> 02:16:46,880
Let's say you're working with a design team

1938
02:16:46,880 --> 02:16:48,580
and they're telling you what colors you need to use,

1939
02:16:48,580 --> 02:16:51,540
and this is kind of how you would do it.

1940
02:16:51,540 --> 02:16:54,260
Additionally, I don't know if I have it on the slide.

1941
02:16:54,260 --> 02:16:58,620
Yeah, so this is how you would call the primary color

1942
02:16:58,620 --> 02:16:59,860
for your text, for example,

1943
02:16:59,860 --> 02:17:04,860
instead of having to do text dash BG or text slate,

1944
02:17:05,700 --> 02:17:08,520
whatever, you just call the primary color.

1945
02:17:09,880 --> 02:17:12,100
But I did want to point out,

1946
02:17:12,100 --> 02:17:14,340
I think I didn't put a slide on this,

1947
02:17:15,220 --> 02:17:20,100
but there's also a way that you can define,

1948
02:17:20,100 --> 02:17:21,400
let me make this bigger.

1949
02:17:23,860 --> 02:17:25,340
Let me make sure I have it in here.

1950
02:17:25,340 --> 02:17:28,460
In that same directives file,

1951
02:17:28,460 --> 02:17:32,860
if you're in the additional features repo,

1952
02:17:32,860 --> 02:17:37,860
and you look at the static source TW file,

1953
02:17:39,540 --> 02:17:41,760
what you'll notice in here is,

1954
02:17:42,240 --> 02:17:47,240
I'm also defining a separate font.

1955
02:17:49,240 --> 02:17:53,040
So you'll notice that the font that I'm using here

1956
02:17:53,040 --> 02:17:54,200
actually looks a little different

1957
02:17:54,200 --> 02:17:56,520
than what you saw initially.

1958
02:17:56,520 --> 02:17:58,740
Let's say you don't want to use your system fonts,

1959
02:17:58,740 --> 02:18:01,360
you want to use your own font.

1960
02:18:01,360 --> 02:18:05,480
So I downloaded this font called Livik,

1961
02:18:05,480 --> 02:18:10,480
and you define it just like you would in a CSS file.

1962
02:18:11,360 --> 02:18:14,200
Again, this is in that directives file.

1963
02:18:14,200 --> 02:18:17,880
I'm creating font face properties

1964
02:18:17,880 --> 02:18:21,220
for each of the font weights I think I'm gonna use.

1965
02:18:23,080 --> 02:18:26,620
And then in my config file,

1966
02:18:26,620 --> 02:18:28,840
so there's a two step process for fonts.

1967
02:18:28,840 --> 02:18:31,680
You put them in your directive file,

1968
02:18:31,680 --> 02:18:33,700
and then in your config file,

1969
02:18:33,700 --> 02:18:36,880
you need to state that you're gonna use

1970
02:18:36,880 --> 02:18:39,640
a font family called Livik.

1971
02:18:39,640 --> 02:18:42,240
I could name this ABCD, whatever I want to.

1972
02:18:42,240 --> 02:18:44,000
This is gonna be the name that you use.

1973
02:18:44,000 --> 02:18:47,120
This is the class that's associated with this font.

1974
02:18:47,120 --> 02:18:52,120
So now you can use Livik within your templates.

1975
02:18:52,560 --> 02:18:54,880
If you look at my,

1976
02:18:54,880 --> 02:18:56,320
I think I put it in the base.

1977
02:19:00,320 --> 02:19:01,440
Did I put it in here somewhere?

1978
02:19:01,440 --> 02:19:06,440
Yeah, see, I define the font for the entire page to be Livik.

1979
02:19:07,080 --> 02:19:10,280
So now everything is generating with that font.

1980
02:19:10,280 --> 02:19:12,440
That's if you wanna use custom fonts.

1981
02:19:12,440 --> 02:19:13,880
So it's all possible.

1982
02:19:13,880 --> 02:19:16,700
There are a lot more customizations you can do,

1983
02:19:16,700 --> 02:19:20,880
and that's all available there on the Tailwind CSS website.

1984
02:19:20,880 --> 02:19:23,640
It's amazing the kinds of things you can do.

1985
02:19:25,480 --> 02:19:30,480
And I do also wanna talk about HTMX.

1986
02:19:30,600 --> 02:19:32,760
One question I got asked previously

1987
02:19:32,760 --> 02:19:35,200
when I was talking about this topic

1988
02:19:35,200 --> 02:19:38,800
with a group of people was, is HTMX production ready?

1989
02:19:38,800 --> 02:19:41,000
That's the main question.

1990
02:19:41,000 --> 02:19:43,240
Now, the advantage you have here

1991
02:19:43,240 --> 02:19:45,560
is that you have no outside dependencies,

1992
02:19:45,560 --> 02:19:48,500
outside of your Python dependencies.

1993
02:19:48,500 --> 02:19:52,520
All you need is a file and your static assets, right?

1994
02:19:52,520 --> 02:19:55,440
The vanilla JavaScript file we saw.

1995
02:19:55,440 --> 02:19:59,280
It's significantly less complex than a spa approach,

1996
02:19:59,280 --> 02:20:01,220
than a single-page application.

1997
02:20:01,220 --> 02:20:04,180
You're not dealing with any front-end framework

1998
02:20:04,180 --> 02:20:06,900
and having to have two different states.

1999
02:20:06,900 --> 02:20:09,460
And it's perfect for any back-end technology.

2000
02:20:09,460 --> 02:20:11,060
We work in Python, but you could use it

2001
02:20:11,060 --> 02:20:13,340
with any back-end technology.

2002
02:20:13,340 --> 02:20:15,820
So if you're comfortable in your back-end technology,

2003
02:20:15,820 --> 02:20:17,740
you're comfortable with HTMX.

2004
02:20:17,740 --> 02:20:20,420
But does that answer the question, is it production ready?

2005
02:20:20,420 --> 02:20:21,940
Can I depend on it?

2006
02:20:21,940 --> 02:20:26,940
Now, what I would say is I'm just a lowly business analyst

2007
02:20:30,380 --> 02:20:33,340
that dabbles with Python at night.

2008
02:20:33,340 --> 02:20:36,440
So you wouldn't have to take my word for it.

2009
02:20:36,440 --> 02:20:40,080
But I would recommend watching this video

2010
02:20:40,080 --> 02:20:44,580
that's online from DjangoCon Europe 2022.

2011
02:20:44,580 --> 02:20:49,420
It's called From React to HTMX on a Real-World SaaS Product.

2012
02:20:49,420 --> 02:20:51,200
We did it and it's awesome.

2013
02:20:51,200 --> 02:20:54,240
It's this company called Context.

2014
02:20:54,240 --> 02:20:59,240
And I will have this link available to you here at the end.

2015
02:20:59,720 --> 02:21:03,800
The YouTube is not even all that long.

2016
02:21:03,800 --> 02:21:07,800
But I wanna highlight some of these things that,

2017
02:21:07,800 --> 02:21:11,920
I think their team was a team of four developers,

2018
02:21:11,920 --> 02:21:14,680
one JavaScript developer, three Python developers.

2019
02:21:14,680 --> 02:21:16,600
They work in Django.

2020
02:21:16,600 --> 02:21:20,720
They actually went from having a fully functional

2021
02:21:20,720 --> 02:21:24,420
React website to an HTMX and Django only product,

2022
02:21:24,420 --> 02:21:26,020
or mostly product.

2023
02:21:26,020 --> 02:21:29,340
They made no UX compromises.

2024
02:21:29,340 --> 02:21:34,340
So they kept all the UI that the users were used to.

2025
02:21:34,580 --> 02:21:39,580
They reduced their code base from 21,500 lines of code

2026
02:21:40,780 --> 02:21:42,860
to 7,100 lines of code.

2027
02:21:42,860 --> 02:21:47,860
That is a drastic reduction in lines of code, period.

2028
02:21:48,340 --> 02:21:53,340
They reduced their web build time from 48 to five seconds.

2029
02:21:53,560 --> 02:21:58,560
So that's a huge, huge increase in productivity there.

2030
02:21:58,820 --> 02:22:00,380
Their first load time to interact,

2031
02:22:00,380 --> 02:22:02,420
it was reduced by around 50 to 60%.

2032
02:22:02,420 --> 02:22:05,600
So you can imagine all that JavaScript net

2033
02:22:05,600 --> 02:22:09,620
that's kind of in the way during that first time to load.

2034
02:22:09,620 --> 02:22:12,740
I'm sure it helps a lot with SEO and that kind of stuff.

2035
02:22:12,740 --> 02:22:15,880
You're getting an immediate response.

2036
02:22:15,880 --> 02:22:20,880
And their company deals with very large data sets.

2037
02:22:21,040 --> 02:22:26,040
They found, I put data sets instead of data sets,

2038
02:22:26,040 --> 02:22:29,540
but they found that they had larger data sets

2039
02:22:29,540 --> 02:22:33,420
that were possible with an HTMX application

2040
02:22:33,420 --> 02:22:35,080
as opposed to React.

2041
02:22:35,080 --> 02:22:37,960
And they lost their JavaScript developer.

2042
02:22:37,960 --> 02:22:40,180
So they went from four developers to three,

2043
02:22:40,180 --> 02:22:43,360
which it is a huge cost cutting benefit to them

2044
02:22:43,360 --> 02:22:48,200
as a company and also no need for additional resources

2045
02:22:48,200 --> 02:22:50,020
to understand the JavaScript.

2046
02:22:50,020 --> 02:22:55,020
So again, I highly recommend that DjangoCon Europe Talk.

2047
02:22:55,260 --> 02:23:00,260
It's on YouTube, but I'll link it to you in a moment.

2048
02:23:02,140 --> 02:23:05,740
And let's see.

2049
02:23:06,980 --> 02:23:11,360
I believe my playlist,

2050
02:23:11,360 --> 02:23:15,020
in case you wanted to hear some of the music

2051
02:23:15,020 --> 02:23:17,340
you've been hearing around today

2052
02:23:17,340 --> 02:23:19,480
and that you have in,

2053
02:23:20,740 --> 02:23:22,740
it's one song from each of the artists

2054
02:23:22,740 --> 02:23:25,100
that's in my MusicBinder application.

2055
02:23:25,100 --> 02:23:27,920
This is the playlist here.

2056
02:23:27,920 --> 02:23:32,920
Again, I'll also give you a place to find that afterwards.

2057
02:23:33,380 --> 02:23:36,780
And lastly, we still have about 15 minutes

2058
02:23:36,780 --> 02:23:39,180
if you have some questions I can come around.

2059
02:23:39,180 --> 02:23:41,540
I just wanted to say thank you all for coming.

2060
02:23:41,540 --> 02:23:43,280
I really appreciate it.

2061
02:23:43,280 --> 02:23:45,500
I worked really hard to have something

2062
02:23:45,500 --> 02:23:47,420
that at least I was excited about.

2063
02:23:47,420 --> 02:23:49,340
I hope that at the very least,

2064
02:23:49,340 --> 02:23:51,680
it starts spurring some imagination,

2065
02:23:51,680 --> 02:23:54,620
some different ways to think about

2066
02:23:54,620 --> 02:23:57,180
how you build your web applications.

2067
02:23:57,180 --> 02:24:01,020
Again, it's not an either or proposition.

2068
02:24:01,020 --> 02:24:03,860
I definitely don't want to learn JavaScript,

2069
02:24:03,860 --> 02:24:08,860
but if some of you find that you might find any benefit

2070
02:24:10,060 --> 02:24:13,180
like the people over at DjangoCon.

2071
02:24:16,500 --> 02:24:18,500
Oh, these are really crazy.

2072
02:24:19,940 --> 02:24:22,380
One last thing, I don't have it up on here,

2073
02:24:22,380 --> 02:24:25,640
but if you go to pythonbynight.com,

2074
02:24:26,580 --> 02:24:29,700
and then up at the top, there's some links up there.

2075
02:24:29,700 --> 02:24:32,300
There's one that's called Talks.

2076
02:24:32,300 --> 02:24:36,740
If you click on that link, there should be right at the top

2077
02:24:36,740 --> 02:24:41,020
a reference to this tutorial here.

2078
02:24:41,020 --> 02:24:44,300
I have a lot of resources there that we talked about today.

2079
02:24:45,300 --> 02:24:48,980
In addition to the links to the playlist and all that stuff,

2080
02:24:48,980 --> 02:24:53,100
I also have a version of this repo

2081
02:24:53,100 --> 02:24:58,100
that's a more step-by-step guide to getting to this stage.

2082
02:24:59,440 --> 02:25:04,440
It's called SimpleSight, not very creative there,

2083
02:25:04,460 --> 02:25:08,660
but that repo has documentation that talks about

2084
02:25:08,660 --> 02:25:11,060
how you're building your routes with FastAPI,

2085
02:25:11,060 --> 02:25:13,500
how the templates work, and so on.

2086
02:25:13,500 --> 02:25:15,140
That might also prove helpful

2087
02:25:15,140 --> 02:25:17,820
if you felt like this was going a little too quick

2088
02:25:17,820 --> 02:25:21,700
and you kind of wanted to build it yourself from scratch.

2089
02:25:21,700 --> 02:25:24,740
You have a little bit more time, then that's also there.

2090
02:25:27,060 --> 02:25:31,320
If you have any questions, you can reach me on Mastodon.

2091
02:25:31,320 --> 02:25:32,540
There's my handle.

2092
02:25:32,540 --> 02:25:34,380
I'll be around all week.

2093
02:25:34,380 --> 02:25:36,700
Hopefully, I'll see some of you.

2094
02:25:36,700 --> 02:25:40,140
Like I said, I might open up an open space

2095
02:25:40,180 --> 02:25:45,180
later during the week so we can do some other cool things.

2096
02:25:45,500 --> 02:25:47,760
So that's all from up here.

2097
02:25:47,760 --> 02:25:50,360
I'm gonna walk around if you have any questions

2098
02:25:50,360 --> 02:25:52,980
or if you feel like you've had enough, you're ready to go.

2099
02:25:52,980 --> 02:25:54,580
That's cool as well.

2100
02:25:54,580 --> 02:25:55,420
Thank you all.

2101
02:25:56,340 --> 02:25:57,180
Thank you.

2102
02:25:57,180 --> 02:25:58,020
Thank you.

2103
02:25:58,020 --> 02:25:58,860
Thank you.

