1
00:00:00,000 --> 00:00:04,520
Testing? Is it on? Yeah, it's on. Okay.

2
00:00:04,600 --> 00:00:07,960
Cool. Great turnout.

3
00:00:07,960 --> 00:00:10,240
So before I get started,

4
00:00:10,240 --> 00:00:12,200
the materials for this talk are on

5
00:00:12,200 --> 00:00:15,160
the GitHub repo that you can access through this URL.

6
00:00:15,160 --> 00:00:17,560
It contains these slides as well as

7
00:00:17,560 --> 00:00:21,280
the workshop slash demo component of this talk.

8
00:00:21,280 --> 00:00:23,880
This session is like one part talk,

9
00:00:23,880 --> 00:00:26,360
two parts workshop fun time.

10
00:00:26,360 --> 00:00:29,920
So I'm not talking at you for a straight hour.

11
00:00:29,920 --> 00:00:32,520
You're welcome to follow along or just watch.

12
00:00:32,520 --> 00:00:36,680
But yeah. So for anyone who just popped into the room,

13
00:00:36,680 --> 00:00:39,080
in this session, we're going to be talking a bit about how to

14
00:00:39,080 --> 00:00:41,440
accelerate your workflow from local Python prototype,

15
00:00:41,440 --> 00:00:44,400
from your local dev environment up to the Cloud.

16
00:00:44,400 --> 00:00:46,440
So thanks for joining.

17
00:00:46,440 --> 00:00:49,460
But before jumping into the bulk of this talk,

18
00:00:49,460 --> 00:00:54,000
I figured I should probably introduce myself for folks who I have not met,

19
00:00:54,000 --> 00:00:57,960
either in person or on the Internet because we live in a post-pandemic world.

20
00:00:57,960 --> 00:00:59,760
But I'm Savannah Ostrowski.

21
00:00:59,760 --> 00:01:02,160
I'm a Senior Product Manager at Microsoft.

22
00:01:02,160 --> 00:01:06,000
I currently work on Azure Cloud Native Developer Tools and Experience.

23
00:01:06,000 --> 00:01:10,160
I'm also the Product Lead for the Azure Developer CLI or AZD.

24
00:01:10,160 --> 00:01:13,760
Before that, I worked on the Pylance Language Server,

25
00:01:13,760 --> 00:01:15,560
which if you use Visual Studio Code,

26
00:01:15,560 --> 00:01:17,600
powers the editing experience there.

27
00:01:17,600 --> 00:01:22,120
I also worked on a variety of other Python Developer experience things like Python in

28
00:01:22,120 --> 00:01:24,960
Visual Studio, WSL, on Azure,

29
00:01:24,960 --> 00:01:27,600
in general Python ecosystem research.

30
00:01:27,600 --> 00:01:31,720
Before that, I was a Software Engineer at a bunch of startups consultancies,

31
00:01:31,720 --> 00:01:34,480
doing Python and non-Python things.

32
00:01:34,480 --> 00:01:38,560
I've been writing Python for this is basically a decade this year,

33
00:01:38,560 --> 00:01:40,800
and this is my very first in-person PyCon.

34
00:01:40,800 --> 00:01:43,240
So very excited to be here.

35
00:01:43,240 --> 00:01:46,240
Yeah. Okay.

36
00:01:46,240 --> 00:01:50,780
So we're going to take this like start at a very high level, I guess.

37
00:01:50,780 --> 00:01:53,320
But I want you to think back to a time where you were building

38
00:01:53,320 --> 00:01:57,520
an application and think about it at a very high level in terms of components.

39
00:01:57,520 --> 00:01:58,920
So if you can't think of anything,

40
00:01:58,920 --> 00:02:02,960
we can all think about maybe a to-do application that has a front end,

41
00:02:02,960 --> 00:02:04,640
a back end, and a database.

42
00:02:04,640 --> 00:02:08,480
In this to-do application, you maybe have features like adding tasks,

43
00:02:08,480 --> 00:02:11,040
setting due dates, ticking things off,

44
00:02:11,040 --> 00:02:13,120
sorting things into lists.

45
00:02:13,120 --> 00:02:14,560
I think for most folks,

46
00:02:14,560 --> 00:02:21,120
this step is pretty easy to understand and imagine or ideate on.

47
00:02:21,120 --> 00:02:23,400
In fact, for a lot of engineers,

48
00:02:23,400 --> 00:02:27,160
I think, can you skip over this step and go straight into implementation,

49
00:02:27,160 --> 00:02:30,320
especially if you're building something that's a hobbyist project.

50
00:02:30,320 --> 00:02:35,520
But yeah, at a high level, you'd need a UI, an API, and a database.

51
00:02:35,520 --> 00:02:38,200
So taking this a step further,

52
00:02:38,200 --> 00:02:41,960
I think similarly, it's easy to imagine a world where you take

53
00:02:41,960 --> 00:02:45,800
those components and map them to some tech stack.

54
00:02:45,800 --> 00:02:50,400
So this is the first set of big decisions you need to make about your application.

55
00:02:50,400 --> 00:02:53,080
Maybe you have a tech stack that you like to use,

56
00:02:53,080 --> 00:02:56,680
maybe you need to do some research to figure out the best options.

57
00:02:56,840 --> 00:02:58,520
But after careful consideration,

58
00:02:58,520 --> 00:03:02,040
you might decide on something like React for your front end,

59
00:03:02,040 --> 00:03:04,080
Python with Fast API for your back end,

60
00:03:04,080 --> 00:03:07,280
and like MongoDB, Postgre, something for your database.

61
00:03:07,280 --> 00:03:10,080
So from here, maybe you start building an application,

62
00:03:10,080 --> 00:03:12,480
or maybe you started designing and building in tandem.

63
00:03:12,480 --> 00:03:16,520
I'm not here to mandate any particular development process, UDU.

64
00:03:16,520 --> 00:03:19,320
I think this is pretty approachable.

65
00:03:19,320 --> 00:03:22,880
I think there are a number of tutorials or blog posts that even if you're new,

66
00:03:22,880 --> 00:03:26,040
figuring out how to start or at least at a high level is

67
00:03:26,040 --> 00:03:28,520
pretty easy, pretty approachable.

68
00:03:28,520 --> 00:03:32,000
Okay. How do we get this up into the Cloud?

69
00:03:32,000 --> 00:03:33,680
You have something working great locally.

70
00:03:33,680 --> 00:03:36,400
Maybe you have your front end, it looks great,

71
00:03:36,400 --> 00:03:37,840
all your APIs wired up,

72
00:03:37,840 --> 00:03:39,760
you have a database, and then you're like,

73
00:03:39,760 --> 00:03:41,960
okay, I'm ready to share this out with the world,

74
00:03:41,960 --> 00:03:44,000
to meet some business use case or maybe I'm

75
00:03:44,000 --> 00:03:46,040
sharing your hobbyist project with my friends.

76
00:03:46,040 --> 00:03:48,080
Then you're sitting there and you're like,

77
00:03:48,080 --> 00:03:51,200
oh, I don't really know where to start.

78
00:03:51,200 --> 00:03:55,520
So I want to talk about a common albeit

79
00:03:55,520 --> 00:04:00,840
suboptimal workflow which I cutely call the local application to,

80
00:04:00,840 --> 00:04:03,440
I'll just put it on a VM pipeline,

81
00:04:03,440 --> 00:04:07,360
which we've all been there before, no shame in that game.

82
00:04:07,360 --> 00:04:11,800
But I think unless you're well-versed in Cloud offerings,

83
00:04:11,800 --> 00:04:16,240
this is a pretty common workflow.

84
00:04:16,240 --> 00:04:18,240
So it might start out if you're new with

85
00:04:18,240 --> 00:04:21,720
complete uncertainty like giant question mark in your head,

86
00:04:21,720 --> 00:04:24,720
and then you decide to do some research about

87
00:04:24,720 --> 00:04:26,880
maybe what Cloud offerings you would want to use,

88
00:04:26,880 --> 00:04:32,120
like what services, and you ultimately have very high level questions,

89
00:04:32,120 --> 00:04:35,000
like which Cloud services should I use with my code?

90
00:04:35,000 --> 00:04:38,000
Which Cloud service should I use over another Cloud service?

91
00:04:38,000 --> 00:04:39,560
What are the pros and cons?

92
00:04:39,560 --> 00:04:41,720
How much does stuff cost?

93
00:04:41,720 --> 00:04:45,120
Do I set up my local development environment so that I

94
00:04:45,120 --> 00:04:48,040
can be productive while developing against Cloud resources?

95
00:04:48,040 --> 00:04:50,360
How do I provision the right infrastructure?

96
00:04:50,360 --> 00:04:53,960
How do I know that what I'm doing is secure and using best practices?

97
00:04:53,960 --> 00:04:57,240
I think the frustrating part about all of that is that

98
00:04:57,240 --> 00:05:00,320
every single one of those questions I just listed off,

99
00:05:00,320 --> 00:05:04,240
it depends on X, Y, or Z being the answer to any one of those things,

100
00:05:04,240 --> 00:05:06,240
which makes things complicated,

101
00:05:06,240 --> 00:05:08,640
time-consuming, and pretty irritating.

102
00:05:08,640 --> 00:05:11,800
So you end up being that blobby guy in the middle there,

103
00:05:11,800 --> 00:05:13,240
where you're like, my head hurts,

104
00:05:13,240 --> 00:05:15,800
I just banged my head against a wall for several days,

105
00:05:15,800 --> 00:05:18,200
and then you're just like, VM.

106
00:05:18,200 --> 00:05:21,440
Let's just throw it on VM and hope that that's good enough.

107
00:05:21,440 --> 00:05:23,400
Again, that's fine.

108
00:05:23,400 --> 00:05:26,480
I'm not here to shame anyone for just putting stuff on a virtual machine,

109
00:05:26,480 --> 00:05:30,200
but I think if we're trying it the first or maybe even the end time,

110
00:05:30,200 --> 00:05:32,760
we're trying to learn how to do things the right way,

111
00:05:32,760 --> 00:05:35,840
and I'll come back to what the right way means in a second.

112
00:05:35,840 --> 00:05:39,440
It ends up being very time-consuming and difficult.

113
00:05:39,440 --> 00:05:42,520
Often, when I talk about this problem,

114
00:05:42,520 --> 00:05:45,560
this local app to I'll just put it on a VM pipeline,

115
00:05:45,560 --> 00:05:49,640
I boldly frame it as developers don't care about the Cloud,

116
00:05:49,640 --> 00:05:52,880
and usually this turns some heads because I work on Azure.

117
00:05:53,760 --> 00:05:57,680
What I really mean by this is that application developers

118
00:05:57,680 --> 00:06:01,240
don't always have the luxury of caring about the Cloud.

119
00:06:01,240 --> 00:06:03,720
I think if you're a new developer,

120
00:06:03,720 --> 00:06:07,240
you're writing Python for maybe your first Python app,

121
00:06:07,240 --> 00:06:12,600
you're already inundated with the idea of trying to get your local app code to work.

122
00:06:12,600 --> 00:06:16,680
So taking on researching Cloud offerings and all the configurations and doing

123
00:06:16,680 --> 00:06:20,480
things the right way is completely out of scope for you at that point.

124
00:06:20,480 --> 00:06:24,360
If you're working as a professional engineer or

125
00:06:24,360 --> 00:06:27,080
like business logic to solve some particular problem,

126
00:06:27,080 --> 00:06:31,880
you might not have the time to learn about the Cloud and all the ins and outs of the Cloud.

127
00:06:31,880 --> 00:06:36,400
You might just want to focus on writing the application code because at the end of the day,

128
00:06:36,400 --> 00:06:41,800
getting stuff in the Cloud is really just a hurdle on the way from A to B.

129
00:06:41,800 --> 00:06:46,680
You want to write that application code to serve some audience to address some problem,

130
00:06:46,680 --> 00:06:49,680
but you have this thing that gets in the way of you doing that.

131
00:06:49,680 --> 00:06:54,680
So the Cloud things are really peripheral to the primary task at hand.

132
00:06:54,680 --> 00:06:57,040
For some folks who are lucky,

133
00:06:57,040 --> 00:07:00,480
they have a dedicated DevOps or like NGIS person

134
00:07:00,480 --> 00:07:06,080
who thinks through all these hard problems and it's their job to make the right choices.

135
00:07:06,080 --> 00:07:07,840
But sometimes that's not the case.

136
00:07:07,840 --> 00:07:14,320
If you're working on a hobbyist project or you're working at a startup or a small business,

137
00:07:14,320 --> 00:07:16,080
you might not have a dedicated person for this,

138
00:07:16,080 --> 00:07:18,280
which means that it's your problem.

139
00:07:18,680 --> 00:07:24,080
That problem of local development environment to the Cloud or provisioning infrastructure and

140
00:07:24,080 --> 00:07:29,720
deploying code ultimately hinders your productivity and velocity on that path from A to B.

141
00:07:29,720 --> 00:07:33,560
So to further magnify this,

142
00:07:33,560 --> 00:07:36,680
I'm like digging myself into a hole as I'm talking.

143
00:07:36,680 --> 00:07:39,120
But to further magnify this,

144
00:07:39,120 --> 00:07:41,920
I think what makes this really complicated is that

145
00:07:41,920 --> 00:07:46,320
Cloud resources don't map one-to-one with your local AppStack.

146
00:07:46,320 --> 00:07:47,760
So in this case,

147
00:07:47,760 --> 00:07:50,040
let's come back to that to-do application with our front-end,

148
00:07:50,040 --> 00:07:52,640
back-end database. Really simple.

149
00:07:52,640 --> 00:07:57,000
I use this to-do application as a canonical example,

150
00:07:57,000 --> 00:08:01,680
but I think this really does map and scale to whatever it is that you're imagining.

151
00:08:01,680 --> 00:08:06,120
But to get that basic three component application up and running on Azure,

152
00:08:06,120 --> 00:08:09,720
it actually looks something more like nine things in practice.

153
00:08:09,720 --> 00:08:11,720
Of course, there are many different ways that

154
00:08:11,720 --> 00:08:14,440
you can get your application up and running on Azure.

155
00:08:14,440 --> 00:08:18,040
I'm going to talk through one example that uses Azure Container Apps.

156
00:08:18,040 --> 00:08:21,400
But again, three things really is like nine things.

157
00:08:21,400 --> 00:08:24,440
So let's go through this architecture diagram.

158
00:08:24,440 --> 00:08:26,360
For this particular app,

159
00:08:26,360 --> 00:08:29,040
we would need a Container App environment which defines

160
00:08:29,040 --> 00:08:32,320
a secure boundary around your containers so that we can share

161
00:08:32,320 --> 00:08:36,760
the same virtual network and write logs to the same logging destination.

162
00:08:36,760 --> 00:08:39,240
A Container Registry to build, manage,

163
00:08:39,240 --> 00:08:42,920
and store container images to Container Apps instances

164
00:08:42,920 --> 00:08:45,320
for the front-end and back-end of the application.

165
00:08:45,320 --> 00:08:47,600
A Key Vault because we don't want to be inlining

166
00:08:47,600 --> 00:08:50,640
our tokens and our passwords because that's not secure.

167
00:08:50,640 --> 00:08:53,960
CosmoDB API for MongoDB for our database.

168
00:08:53,960 --> 00:08:57,480
If you're using Postgres, Postgres would be the database here.

169
00:08:57,480 --> 00:09:02,160
Then Log Analytics workspace so that we can actually have logging infrastructure,

170
00:09:02,160 --> 00:09:04,080
application insights to actually have

171
00:09:04,080 --> 00:09:09,040
live performance management and monitoring, and a portal dashboard.

172
00:09:09,040 --> 00:09:11,040
But not only that,

173
00:09:11,040 --> 00:09:13,960
we'd also need to figure out how to set up rules and permissions,

174
00:09:13,960 --> 00:09:16,160
set up our local development environment with

175
00:09:16,160 --> 00:09:19,360
all the right extensions so that we could be productive when locally developing,

176
00:09:19,360 --> 00:09:21,840
figure out how to write queries and build charts so that we

177
00:09:21,840 --> 00:09:24,640
can have proper monitoring for our application.

178
00:09:24,640 --> 00:09:27,480
Probably want CI, CD so that when we're pushing new code,

179
00:09:27,480 --> 00:09:30,920
we're not breaking our app with every new commit.

180
00:09:30,920 --> 00:09:35,080
So yeah, that's again a lot to think about and manage,

181
00:09:35,080 --> 00:09:40,000
especially if you're not well versed in Cloud infrastructure or architecture.

182
00:09:40,960 --> 00:09:48,840
That simplicity versus doing the right thing are at odds.

183
00:09:48,840 --> 00:09:53,560
So there's the I'll do the easiest thing and just put it on the VM,

184
00:09:53,560 --> 00:09:54,680
and I'm using that as an example,

185
00:09:54,680 --> 00:09:56,840
but there are other easier solutions as well.

186
00:09:56,840 --> 00:10:00,440
Then there's I'll use the right Cloud resources for my application.

187
00:10:00,440 --> 00:10:03,600
So what does that mean?

188
00:10:03,600 --> 00:10:07,960
Using the right Cloud resources is probably what I would consider it means to be

189
00:10:08,000 --> 00:10:11,760
Cloud native, and I actually hate buzzwords.

190
00:10:11,760 --> 00:10:15,240
So I low-key resent myself for putting this slide in here.

191
00:10:15,240 --> 00:10:21,080
But I think it's important because, and everyone has a different definition of

192
00:10:21,080 --> 00:10:22,800
Cloud native, but what does it mean?

193
00:10:22,800 --> 00:10:24,000
Right?

194
00:10:24,000 --> 00:10:26,200
Building something in a Cloud native way means that we're building,

195
00:10:26,200 --> 00:10:29,400
deploying, and managing our application for the Cloud, and

196
00:10:29,400 --> 00:10:32,480
in a way that makes use of what the Cloud has to offer.

197
00:10:32,480 --> 00:10:36,680
And then you might think about things like load balancing, scaling, containers,

198
00:10:36,680 --> 00:10:39,360
like service architecture, and all that, and that's great.

199
00:10:39,360 --> 00:10:41,680
But what do those things get you?

200
00:10:41,680 --> 00:10:44,880
Like at the end of the day, why do people even care about Cloud native?

201
00:10:44,880 --> 00:10:49,600
And really what those things get you are resilient, manageable, and

202
00:10:49,600 --> 00:10:53,520
observable application, which what I would argue is really just you

203
00:10:53,520 --> 00:10:55,160
setting future you up for success.

204
00:10:56,680 --> 00:11:00,200
Leveraging Cloud technology also means that you're able to make big changes to

205
00:11:00,200 --> 00:11:03,560
your application infrastructure later on with minimal effort.

206
00:11:03,600 --> 00:11:07,480
So again, it's future thinking, future-proofing your app, right?

207
00:11:09,920 --> 00:11:13,800
So at this point, you're probably like, either you already knew the Cloud was hard

208
00:11:13,800 --> 00:11:18,600
and you wanted to do the right thing but didn't know how, or now you're like,

209
00:11:18,600 --> 00:11:23,160
wow, Savannah, you've told me that it's super hard, and that's great, and

210
00:11:23,160 --> 00:11:25,400
you want me to be set up for future success.

211
00:11:25,400 --> 00:11:28,600
But it's not really like I can just lean my head against a computer and

212
00:11:28,600 --> 00:11:31,840
learn by osmosis all the things about the Cloud overnight.

213
00:11:31,920 --> 00:11:35,840
And so this is sort of where I wanna introduce you to something that my team

214
00:11:35,840 --> 00:11:38,320
has been working on that sort of aims to solve this problem and

215
00:11:38,320 --> 00:11:42,280
kind of support you in the end-to-end workflow from local app environment

216
00:11:42,280 --> 00:11:42,800
to the Cloud.

217
00:11:44,600 --> 00:11:48,320
So yeah, let's talk about the Azure Developer CLI.

218
00:11:48,320 --> 00:11:52,960
So AZD, or it's also known as AZD, which is the command line utility,

219
00:11:52,960 --> 00:11:56,280
is an open source tool that provides higher level application developer-friendly

220
00:11:56,280 --> 00:11:59,160
commands that map to key stages in your developer workflow so

221
00:11:59,160 --> 00:12:02,840
that you can focus on writing app code without focusing on those atomic

222
00:12:02,840 --> 00:12:04,680
operations on Azure.

223
00:12:04,680 --> 00:12:08,080
So I think if you've used CLI experiences before,

224
00:12:08,080 --> 00:12:12,280
I think a really common thing is you have to invoke commands on specific resources

225
00:12:12,280 --> 00:12:15,680
with a million parameters and flags, and hopefully you remember them.

226
00:12:15,680 --> 00:12:18,040
But you probably don't, so you have to look it up pretty much every time you

227
00:12:18,040 --> 00:12:19,120
have to do something.

228
00:12:19,120 --> 00:12:21,840
And that's not very developer-friendly.

229
00:12:21,840 --> 00:12:27,360
But AZD, the whole point is to keep things very high level, very simple, and

230
00:12:27,400 --> 00:12:29,880
follow more of like a Git-centric workflow.

231
00:12:29,880 --> 00:12:34,360
So in this case, you have azd-init, which initializes an application for the Cloud,

232
00:12:34,360 --> 00:12:39,240
azd-up, which packages, provisions, and deploys your app code to the Cloud,

233
00:12:39,240 --> 00:12:43,200
monitor to check out your dashboards that are monitoring your app health, and

234
00:12:43,200 --> 00:12:45,560
then also azd-pipeline-config to set up CI-CD.

235
00:12:45,560 --> 00:12:53,120
So you might be wondering, where did all the complexity go?

236
00:12:53,120 --> 00:12:55,040
Because it still exists, right?

237
00:12:55,720 --> 00:12:58,320
How do we get away with being so high level?

238
00:12:58,320 --> 00:13:02,800
But the AZD approach is rather declarative in nature rather than being imperative.

239
00:13:02,800 --> 00:13:07,000
So we use kind of these extensible, customizable application templates that

240
00:13:07,000 --> 00:13:10,040
kind of are the foundation for the Azure Developer CLI.

241
00:13:10,040 --> 00:13:12,440
They include everything that you need to get up and running on Azure.

242
00:13:13,840 --> 00:13:17,920
And so I like to think about these templates as sort of like Cloud blueprints

243
00:13:17,920 --> 00:13:19,160
and foundational recipes.

244
00:13:19,160 --> 00:13:22,640
So the idea is that you would find a template that maps to your local

245
00:13:22,680 --> 00:13:28,120
application stack, so maybe it is that React Python with FastAPI Postgre or

246
00:13:28,120 --> 00:13:29,600
MongoDB.

247
00:13:29,600 --> 00:13:33,760
Find that, swap out the application code that's included as a proof of concept in

248
00:13:33,760 --> 00:13:37,880
that template, and then leverage the infrastructure as code assets to get

249
00:13:37,880 --> 00:13:39,040
everything up and running on Azure.

250
00:13:39,040 --> 00:13:44,120
So kind of that complexity of the Cloud is not obfuscated from you, but at least

251
00:13:45,360 --> 00:13:48,800
it's there but kind of deferred in a way so that you don't have to dig into all of

252
00:13:48,800 --> 00:13:49,560
it on day zero.

253
00:13:49,600 --> 00:13:53,080
You can kind of incrementally touch the infrastructure's code, change the

254
00:13:53,080 --> 00:13:56,320
configurations for resources as you have problems that you're trying to work

255
00:13:56,320 --> 00:14:02,760
through, or you need beefier machines, or you need kind of more approachable as

256
00:14:02,760 --> 00:14:05,440
opposed to just dumping you in the deep end and saying best of luck in the Cloud.

257
00:14:07,440 --> 00:14:12,000
And so the infrastructure's code, we support both Bicep, which is a domain

258
00:14:12,000 --> 00:14:15,480
specific language that's used for provisioning Azure resources as well as

259
00:14:15,480 --> 00:14:16,680
Terraform.

260
00:14:16,840 --> 00:14:20,400
And again, these templates aren't just Hello World, they go end to end.

261
00:14:20,400 --> 00:14:25,160
So they include things like, they support you through project initialization,

262
00:14:25,160 --> 00:14:28,840
local development with configurations for things like VS code, Visual Studio,

263
00:14:28,840 --> 00:14:33,760
code spaces, dev containers, all that good stuff, as well as pipeline definitions

264
00:14:33,760 --> 00:14:37,720
for GitHub actions and Azure pipelines if that's your flavor of CI CD provider.

265
00:14:39,360 --> 00:14:43,600
And so it's not just like, oh, we got the app running, it's deployed, it's hosted,

266
00:14:43,840 --> 00:14:49,280
it's doing all the best practice things in a secure way with a combination of

267
00:14:49,280 --> 00:14:53,360
Cloud resources that we can all believe and endorse.

268
00:14:53,360 --> 00:14:57,840
So we have templates that our team has authored to kind of get people started,

269
00:14:57,840 --> 00:15:02,880
but we've actually had a lot of open source contributions from the community as

270
00:15:02,880 --> 00:15:07,480
well through all kinds of programming languages, including Python.

271
00:15:07,480 --> 00:15:10,560
They are all, I'm gonna show this in a second, but we have a template gallery

272
00:15:10,600 --> 00:15:13,720
website called Awesome AZD, which hosts kind of a curated view of that.

273
00:15:13,720 --> 00:15:19,520
But yeah, and these templates, they are also programming language idiomatic,

274
00:15:19,520 --> 00:15:25,560
so they're written in a way that is hopefully understandable to Python

275
00:15:25,560 --> 00:15:29,600
developers, as opposed to taking constructs that are very cloud specific.

276
00:15:29,600 --> 00:15:31,520
We try and make them as approachable as possible.

277
00:15:31,520 --> 00:15:38,000
So yeah, and I just breezed over infrastructure as code,

278
00:15:38,040 --> 00:15:39,680
which maybe everyone knows about.

279
00:15:39,680 --> 00:15:42,520
But I also want to just take a second to talk about infrastructure as code,

280
00:15:42,520 --> 00:15:46,560
because I think before I worked on this product, I actually wasn't very well

281
00:15:46,560 --> 00:15:48,400
versed in IAC.

282
00:15:48,400 --> 00:15:52,960
And so I wanna just take a second to talk through that and what value that adds.

283
00:15:52,960 --> 00:15:57,320
And so as I mentioned, each template does include reusable infrastructure as code

284
00:15:57,320 --> 00:15:58,800
that you can modify, you can change.

285
00:15:58,800 --> 00:15:59,920
There's no magic here.

286
00:15:59,920 --> 00:16:02,640
Everything is there in a very declarative way.

287
00:16:02,640 --> 00:16:05,360
This means that it's also reusable and repeatable.

288
00:16:05,400 --> 00:16:09,240
So instead of you or your team having to remember a million different flags or

289
00:16:09,240 --> 00:16:12,320
parameters and hopefully getting it right and managing individual environment

290
00:16:12,320 --> 00:16:14,280
settings, it's all right there in the code.

291
00:16:14,280 --> 00:16:16,440
You can well document it.

292
00:16:16,440 --> 00:16:18,280
You can commit it to source control.

293
00:16:18,280 --> 00:16:20,440
Everyone's working out the same stuff.

294
00:16:20,440 --> 00:16:23,480
This also means that when you deploy your code,

295
00:16:23,480 --> 00:16:27,800
you're defining an environment in a way that is going to be generated in the same

296
00:16:27,800 --> 00:16:30,160
way each time, which helps you avoid deployment issues and

297
00:16:30,160 --> 00:16:31,480
keeps everything very consistent.

298
00:16:32,440 --> 00:16:35,160
And I wanna highlight that these are included, but

299
00:16:35,160 --> 00:16:39,280
they're not necessarily part of your day one or day zero journey on Azure or

300
00:16:39,280 --> 00:16:41,160
with the Azure Developer CLI.

301
00:16:41,160 --> 00:16:45,240
But they are very foundational to how the Azure Developer CLI knows what you

302
00:16:45,240 --> 00:16:48,440
wanna provision, how it's wired up, and all of that.

303
00:16:48,440 --> 00:16:53,960
And so again, you can iterate on that as you need or not.

304
00:16:53,960 --> 00:16:56,880
It's kind of up to you.

305
00:16:56,880 --> 00:17:01,400
Okay, so I just talked to you for, I don't know how long, like 15 minutes maybe.

306
00:17:01,880 --> 00:17:04,800
This is kind of where I guess it gets more interactive.

307
00:17:04,800 --> 00:17:07,760
There are Azure codes for credits on chairs.

308
00:17:07,760 --> 00:17:10,600
If you don't have one, there are extra codes at the front.

309
00:17:12,280 --> 00:17:15,320
You can follow along or just hang out and watch.

310
00:17:15,320 --> 00:17:17,800
But I'm gonna walk through the Azure Developer CLI workflow.

311
00:17:19,240 --> 00:17:21,200
And this can be interactive.

312
00:17:21,200 --> 00:17:22,520
I don't have to talk at you.

313
00:17:22,520 --> 00:17:25,200
So if you have questions, feel free to ask them.

314
00:17:25,200 --> 00:17:28,680
We also have Dawn and Luciana, who will be walking around to kind of help people

315
00:17:28,680 --> 00:17:30,120
with setup and stuff.

316
00:17:30,120 --> 00:17:34,040
So yeah, ask questions as they arise.

317
00:17:37,440 --> 00:17:40,280
So I'm gonna start off by going to,

318
00:17:44,280 --> 00:17:45,480
let me see if I can.

319
00:17:46,840 --> 00:17:51,320
So I'm on this awesome AZD website that I mentioned before.

320
00:17:51,320 --> 00:17:56,480
This is accessible through aka.ms slash awesome dash AZD.

321
00:17:56,480 --> 00:18:00,880
And this is a curated template gallery that includes all kinds of templates.

322
00:18:01,880 --> 00:18:05,720
We have the ability to sort through all kinds of languages and Azure offerings.

323
00:18:07,080 --> 00:18:09,640
You don't necessarily have to care about the Azure offerings cuz the idea is that

324
00:18:09,640 --> 00:18:11,800
you can find something that maps to your app stack and

325
00:18:11,800 --> 00:18:13,720
then leverage the infrastructure as code.

326
00:18:13,720 --> 00:18:16,560
So we make some decisions and choices about infrastructure for you.

327
00:18:18,080 --> 00:18:21,320
But I'm filtered to the Python language.

328
00:18:21,320 --> 00:18:23,040
We've got a number of different templates.

329
00:18:23,040 --> 00:18:25,400
There's some AI templates.

330
00:18:25,400 --> 00:18:27,640
There's some Jupyter notebooks.

331
00:18:27,640 --> 00:18:30,840
There's a Jupyter notebooks template that I authored.

332
00:18:30,840 --> 00:18:34,720
But today I'm gonna be talking through that to do application that I

333
00:18:34,720 --> 00:18:37,840
mentioned earlier that's hosted on Azure container apps.

334
00:18:37,840 --> 00:18:40,080
I'm gonna zoom and enhance cuz I think that might be small.

335
00:18:41,880 --> 00:18:45,840
Okay, so again, everything is open source.

336
00:18:45,840 --> 00:18:47,680
The tool and all of our templates are open source.

337
00:18:49,520 --> 00:18:52,520
When you come to an Azure Developer CLI template,

338
00:18:52,560 --> 00:18:56,360
you'll notice that it's tagged with this AZD templates topic.

339
00:18:56,360 --> 00:18:58,480
You can also find AZD templates.

340
00:18:58,480 --> 00:19:00,600
Can I, yeah, I did open that.

341
00:19:02,600 --> 00:19:05,840
On the AZD templates topic on GitHub, there are like 60 here.

342
00:19:05,840 --> 00:19:07,280
Some of them are in the gallery, some are not.

343
00:19:07,280 --> 00:19:10,560
But yeah, we have some pretty cool samples there too,

344
00:19:10,560 --> 00:19:15,160
like this bring your own data chat GPT template that was authored.

345
00:19:15,160 --> 00:19:18,080
That went sort of viral, which is pretty neat.

346
00:19:18,080 --> 00:19:20,560
But yeah, so you'll see that tag.

347
00:19:20,560 --> 00:19:23,760
You'll also see a blurb about the application stacks that you can

348
00:19:23,760 --> 00:19:26,600
understand if it would map to your particular application you're working on

349
00:19:26,600 --> 00:19:27,120
locally.

350
00:19:28,320 --> 00:19:30,080
And then as you kinda scroll down,

351
00:19:30,080 --> 00:19:33,800
there's information about kinda the requirements.

352
00:19:33,800 --> 00:19:37,120
So the Azure Developer CLI has only one prereq,

353
00:19:37,120 --> 00:19:38,960
which is that you have git installed on your machine,

354
00:19:38,960 --> 00:19:41,720
which I think most people probably already have installed.

355
00:19:41,720 --> 00:19:44,880
And then each template will have its own set of dependencies.

356
00:19:44,880 --> 00:19:47,640
So in this case, we have Python, Node for our frontend, and

357
00:19:47,640 --> 00:19:50,000
Docker because we are deploying to Azure container apps.

358
00:19:50,000 --> 00:19:51,480
So we're gonna build container images.

359
00:19:52,640 --> 00:19:57,320
There's also quick start set information as well as an architecture diagram so

360
00:19:57,320 --> 00:20:00,040
you can understand kinda what's happening on Azure.

361
00:20:00,040 --> 00:20:02,800
And then some information about our VS code extension,

362
00:20:02,800 --> 00:20:04,120
which I'll show off as well.

363
00:20:04,120 --> 00:20:08,240
But yeah, so I'm actually gonna use this template.

364
00:20:08,240 --> 00:20:13,080
I'm gonna go ahead and scroll right past it and copy this AZD init

365
00:20:16,720 --> 00:20:17,800
command.

366
00:20:17,800 --> 00:20:20,880
One thing I skipped over because I switched slides is that you're gonna wanna

367
00:20:20,880 --> 00:20:25,040
install AZD and authenticate before you get started.

368
00:20:25,040 --> 00:20:26,400
I can pull that slide back up.

369
00:20:26,400 --> 00:20:26,900
I-

370
00:20:26,900 --> 00:20:29,200
Do you want to give us a few minutes to actually do that?

371
00:20:29,200 --> 00:20:29,700
Yeah.

372
00:20:31,600 --> 00:20:34,800
Yeah, I can pause here too as well, while people kinda get it installed.

373
00:20:35,840 --> 00:20:39,320
But this is the, so head over here and grab,

374
00:20:39,320 --> 00:20:41,320
we have instructions for any operating system.

375
00:20:42,560 --> 00:20:47,160
And then if you have problems getting installed, let us know.

376
00:20:47,160 --> 00:20:48,360
Yeah, wave frantically.

377
00:20:52,360 --> 00:20:57,560
And then after you get it installed, run AZD auth login,

378
00:20:58,680 --> 00:21:00,280
which we can talk about in a second.

379
00:21:00,280 --> 00:21:01,560
But if you're already ahead,

380
00:21:01,560 --> 00:21:04,440
just wanna mention that so that folks can get set up.

381
00:21:10,200 --> 00:21:12,160
What was the one that went viral?

382
00:21:12,160 --> 00:21:16,400
Yeah, so we had, so there's a team that works on Azure Cognitive Services and

383
00:21:16,400 --> 00:21:21,400
they authored this template that allows you to pass in your own data set and

384
00:21:21,400 --> 00:21:23,520
train chat GPT on it.

385
00:21:23,520 --> 00:21:27,600
So they have this front, it's actually a Python template too.

386
00:21:27,600 --> 00:21:31,920
But they have a full web app that allows you to ask it questions.

387
00:21:31,920 --> 00:21:35,680
And I think the example data they were using was healthcare plan data for

388
00:21:35,680 --> 00:21:36,200
a company.

389
00:21:36,200 --> 00:21:39,280
So they passed in a full data set and someone could write,

390
00:21:39,280 --> 00:21:41,680
is such and such a thing covered on my healthcare plan?

391
00:21:41,680 --> 00:21:44,160
And it would spit out an answer, which is super cool.

392
00:21:44,160 --> 00:21:47,600
Yeah, so that does exist as well.

393
00:21:47,600 --> 00:21:55,360
Yeah, it's definitely our most popular template.

394
00:21:55,360 --> 00:22:00,840
It has I think 1.3K stars on GitHub right now, which is wild.

395
00:22:02,760 --> 00:22:07,840
Yeah, also I'm gonna go through this to do Python Mongo Azure Container Apps

396
00:22:07,840 --> 00:22:11,960
example, but if you feel compelled to try some other sample from the template

397
00:22:11,960 --> 00:22:15,000
gallery, you are more than welcome to.

398
00:22:15,000 --> 00:22:18,920
Just note that you're gonna have to install whatever prereqs it requires, so.

399
00:22:18,920 --> 00:22:27,040
So if you type azd in your terminal or

400
00:22:27,040 --> 00:22:32,480
like azd-h for the help menu, that's probably a good way to validate

401
00:22:32,480 --> 00:22:33,320
that it's installed.

402
00:22:33,320 --> 00:22:38,840
And then for authentication, it's just azd-auth login.

403
00:22:38,840 --> 00:22:42,560
And that should open a browser for you to authenticate on Azure.

404
00:22:42,560 --> 00:22:44,240
It'll bring you to the Azure page.

405
00:22:44,240 --> 00:22:50,280
And then you also might want to grab the free credits if you want to.

406
00:22:52,280 --> 00:22:52,780
Yeah.

407
00:22:55,200 --> 00:22:56,360
Yeah, everyone loves free things.

408
00:23:01,000 --> 00:23:01,500
Yeah.

409
00:23:08,840 --> 00:23:15,040
Probably wait, I don't know.

410
00:23:15,040 --> 00:23:16,480
What time is it right now?

411
00:23:16,480 --> 00:23:19,640
It's 1253, so I have 40 minutes left.

412
00:23:19,640 --> 00:23:23,280
Do you have any time to do that in your time?

413
00:23:23,280 --> 00:23:29,480
We'll probably give folks another five minutes to get set up, and

414
00:23:29,480 --> 00:23:32,400
then I'm gonna get rolling cuz I wanna make sure we have time to go through the

415
00:23:32,400 --> 00:23:32,920
whole workflow.

416
00:23:33,920 --> 00:23:39,200
And also if there's also plug that if folks have questions about azd later on

417
00:23:39,200 --> 00:23:43,360
during PyCon or they didn't make it through the flow during this,

418
00:23:43,360 --> 00:23:47,920
I'll be hanging out at the Microsoft booth pretty much all day tomorrow and

419
00:23:47,920 --> 00:23:51,320
on Friday or Saturday I guess.

420
00:23:51,320 --> 00:23:52,320
So feel free to stop by.

421
00:23:52,320 --> 00:23:56,360
I'll also be giving like a abbreviated version of this session again

422
00:23:56,360 --> 00:23:57,400
at the demo booth.

423
00:24:02,920 --> 00:24:03,420
Yeah.

424
00:25:02,920 --> 00:25:30,440
I think it has you create like a temp account.

425
00:25:32,920 --> 00:25:44,160
Okay, show of hands, who's ready to roll?

426
00:25:44,160 --> 00:25:48,680
Who's like, okay, no, timid hands, half hands.

427
00:25:49,920 --> 00:25:50,880
Okay, we're close.

428
00:25:50,880 --> 00:25:55,440
I just wanna make sure we're not waiting too long.

429
00:25:55,440 --> 00:25:56,040
No rush.

430
00:26:02,920 --> 00:26:12,920
Okay.

431
00:26:12,920 --> 00:26:16,760
So to create some clarity over redeeming credits,

432
00:26:16,760 --> 00:26:22,160
I believe that you go to the second link, not the azd-pycon cuz that's for

433
00:26:22,160 --> 00:26:26,240
the repo, but if you go to the redeeming Azure code credit and

434
00:26:26,240 --> 00:26:32,240
then enter that code that's at the top, that should suffice.

435
00:26:32,240 --> 00:26:35,920
The instructions are on like a different page if you want instructions, but

436
00:26:35,920 --> 00:26:37,640
I believe if you just go to that link.

437
00:26:37,640 --> 00:26:40,040
And someone can correct me if I'm wrong if that was not.

438
00:26:40,040 --> 00:26:42,120
That's the flow, great.

439
00:26:42,120 --> 00:26:42,640
Wonderful.

440
00:26:42,640 --> 00:26:55,140
Okay.

441
00:26:55,140 --> 00:26:59,040
Okay, the one other thing that as people get going we might run into is they might

442
00:26:59,040 --> 00:27:01,400
need to add a contributor role to the subscription.

443
00:27:01,400 --> 00:27:04,400
Yeah, you.

444
00:27:29,040 --> 00:27:39,040
Okay.

445
00:27:59,040 --> 00:28:09,040
Okay.

446
00:28:29,040 --> 00:28:39,040
Say that again.

447
00:28:39,040 --> 00:28:43,040
Okay.

448
00:28:43,040 --> 00:28:49,040
I think we're gonna get rolling and

449
00:28:49,040 --> 00:28:55,040
if folks are playing catch up,

450
00:28:55,040 --> 00:28:59,040
that's also totally cool.

451
00:28:59,040 --> 00:29:00,040
Yeah, okay.

452
00:29:00,040 --> 00:29:03,040
So like I mentioned before,

453
00:29:03,040 --> 00:29:10,040
I am gonna use this to do Python Mongo sample after I've already authenticated.

454
00:29:10,040 --> 00:29:14,040
I'm going to use azd-init--template.

455
00:29:14,040 --> 00:29:18,040
For this particular template, because it's one that our team has authored,

456
00:29:18,040 --> 00:29:22,040
it's hard coded in the CLI, so we don't have to pass in anything about the GitHub

457
00:29:22,040 --> 00:29:24,040
org or user.

458
00:29:24,040 --> 00:29:28,040
If you were using another template, you would want to just pass in the full GitHub

459
00:29:28,040 --> 00:29:33,040
URL as the parameter for that template or the template argument.

460
00:29:33,040 --> 00:29:36,040
So in this case, I'm gonna actually go and I'll create a new directory and I'll

461
00:29:36,040 --> 00:29:39,040
call it, let's call it PyCon.

462
00:29:39,040 --> 00:29:40,040
I can't type.

463
00:29:40,040 --> 00:29:43,040
Typing live is scary.

464
00:29:43,040 --> 00:29:49,040
PyCon live and then what I'll do is I'll run that azd-init command.

465
00:29:49,040 --> 00:29:53,040
And so, okay, it pulled down some template code for me.

466
00:29:53,040 --> 00:29:54,040
So I'm asking for an environment.

467
00:29:54,040 --> 00:29:58,040
And now because this is a Python audience, I feel obligated to tell you this is not

468
00:29:58,040 --> 00:30:00,040
your virtual environment name.

469
00:30:00,040 --> 00:30:01,040
So don't pass that in.

470
00:30:01,040 --> 00:30:06,040
This is an environment name that is going to be part of the resource group that's

471
00:30:06,040 --> 00:30:10,040
going to act as a nice little bucket for all of our resources on Azure.

472
00:30:10,040 --> 00:30:13,040
And so you can name this whatever you want.

473
00:30:13,040 --> 00:30:15,040
It should be unique for your particular subscription.

474
00:30:15,040 --> 00:30:19,040
And in a real world environment, you might want something like dev, test, and prod

475
00:30:19,040 --> 00:30:24,040
environments with different sets of resources for each environment, which azd can handle

476
00:30:24,040 --> 00:30:26,040
using the azd-env command.

477
00:30:26,040 --> 00:30:27,040
We're not gonna show that today.

478
00:30:27,040 --> 00:30:34,040
So I'm just gonna call this like savannah-pycon-live maybe.

479
00:30:34,040 --> 00:30:36,040
And then seemingly nothing happened.

480
00:30:36,040 --> 00:30:37,040
No, things did happen.

481
00:30:37,040 --> 00:30:40,040
I actually now have stuff lives in this directory now.

482
00:30:40,040 --> 00:30:44,040
And I'm going to show the template code and walk you through what's in the template in

483
00:30:44,040 --> 00:30:45,040
VS code.

484
00:30:45,040 --> 00:30:49,040
So I'll open my VS code instance using code dot.

485
00:30:49,040 --> 00:30:55,040
Nice little quick command to get into VS code with my current directory.

486
00:30:55,040 --> 00:30:58,040
I'll also zoom and enhance because it's kind of small.

487
00:30:58,040 --> 00:31:01,040
This looks aggressively large, but I think it's more legible.

488
00:31:01,040 --> 00:31:02,040
Okay.

489
00:31:02,040 --> 00:31:05,040
So we have some stuff in here.

490
00:31:05,040 --> 00:31:08,040
Let's talk about what makes an azd template an azd template.

491
00:31:08,040 --> 00:31:12,040
So right off the bat, we have this thing called an azure.yaml.

492
00:31:13,040 --> 00:31:18,040
This is sort of the entry point for the Azure Developer CLI to understand what this project

493
00:31:18,040 --> 00:31:19,040
is.

494
00:31:19,040 --> 00:31:23,040
So in this case, we have some name, metadata template stuff.

495
00:31:23,040 --> 00:31:25,040
That's truly just metadata.

496
00:31:25,040 --> 00:31:27,040
You can name it whatever you'd like.

497
00:31:27,040 --> 00:31:29,040
Then we have a services property.

498
00:31:29,040 --> 00:31:31,040
And under there, we have a web and an API.

499
00:31:31,040 --> 00:31:33,040
That's our front end and our back end.

500
00:31:33,040 --> 00:31:38,040
And under each one of those, we have a project directory, which passes in a path.

501
00:31:38,040 --> 00:31:41,040
That path corresponds with where my app code lives.

502
00:31:41,040 --> 00:31:45,040
So in this case, I have an SRC directory with our API, which is Python.

503
00:31:45,040 --> 00:31:49,040
Also contains a Docker file, which we'll talk about in a bit.

504
00:31:49,040 --> 00:31:53,040
And a web front end, which is a React TypeScript project.

505
00:31:53,040 --> 00:31:58,040
So we don't mandate any particular application folder structure.

506
00:31:58,040 --> 00:32:02,040
So if you had something completely different, you would just need to change that first line

507
00:32:02,040 --> 00:32:04,040
to map to where that app code lives.

508
00:32:04,040 --> 00:32:07,040
In this case, we have an SRC directory.

509
00:32:07,040 --> 00:32:10,040
I'm going to skip over module and come back to it in just a second.

510
00:32:10,040 --> 00:32:12,040
And then we have language.

511
00:32:12,040 --> 00:32:14,040
So again, JavaScript front end, Python back end.

512
00:32:14,040 --> 00:32:16,040
And then our host is Azure Container Apps.

513
00:32:16,040 --> 00:32:19,040
And we support various other hosts on Azure as well.

514
00:32:19,040 --> 00:32:25,040
Azure Functions, Azure Static Web Apps, App Service, Azure Kubernetes Service, whatever you want.

515
00:32:25,040 --> 00:32:33,040
And so that's like the structure of an AZD, like the core thing that makes an AZD template an AZD template.

516
00:32:33,040 --> 00:32:39,040
The other requirement, and the reason that I skipped over module, is that that corresponds to where our infrastructure as code lives

517
00:32:39,040 --> 00:32:42,040
for that particular component of our application.

518
00:32:42,040 --> 00:32:46,040
So if I go into this infrastructure directory, this is the other requirement of an AZD template,

519
00:32:46,040 --> 00:32:53,040
is that we have an infrastructure directory with a main.bicep if we're writing bicep, or a main.tf if we're writing Terraform.

520
00:32:53,040 --> 00:33:00,040
And so this app web corresponds with this app web.

521
00:33:00,040 --> 00:33:10,040
But in this main.bicep, which is where all of our modules, all of those nine components I talked about, all live at this very top level.

522
00:33:10,040 --> 00:33:16,040
So if we go through here, we've got a bunch of strings that we're going to pass in that AZD is going to wire up for us.

523
00:33:16,040 --> 00:33:27,040
But the main things to really look at here are our resource group, which again is that bucket that we're going to contain all of our Azure bits on, or in rather.

524
00:33:27,040 --> 00:33:32,040
A container apps environment, as well as our container registry for our images.

525
00:33:32,040 --> 00:33:38,040
Our web front end and our API back end. These are both container apps that will live in our environment.

526
00:33:38,040 --> 00:33:44,040
API access for Key Vault, which allows us to access keys that are stored in our key store.

527
00:33:44,040 --> 00:33:54,040
Cosmos DB for MongoDB. So this could very easily be Postgres or SQL Server, Azure SQL, whatever you like.

528
00:33:54,040 --> 00:34:00,040
The actual Key Vault instance and then some monitoring infrastructure to get us to set up our dashboard and all of that good stuff.

529
00:34:00,040 --> 00:34:05,040
We also have an optional feature here, which you can enable using an environment variable.

530
00:34:05,040 --> 00:34:10,040
This is detailed in the readme for API, which allows us to have mediated requests between our front end and back end.

531
00:34:10,040 --> 00:34:15,040
We are not going to be enabling that for this demo because it does take a little bit to provision.

532
00:34:15,040 --> 00:34:22,040
And then some output parameters that have a bunch of metadata about our application.

533
00:34:22,040 --> 00:34:26,040
And so that main.bicep and that Azure YAML are the key things.

534
00:34:26,040 --> 00:34:31,040
How you structure your IAC, how you structure your application source code, completely up to you.

535
00:34:31,040 --> 00:34:35,040
So that's kind of the infrastructure as code stuff.

536
00:34:35,040 --> 00:34:44,040
And the idea, right, is that you would take that SRC, that application source code, which is included as a proof of concept so that you can understand kind of the type of application that would work with this template.

537
00:34:44,040 --> 00:34:52,040
Swap it out for your own source code and then leverage all of the infrastructure as code assets so that you don't have to think about Azure stuff on day zero.

538
00:34:52,040 --> 00:35:03,040
Talking about local development, we also have a VS code directory with our launch JSON, our task JSON for setting up our debug and local development configuration.

539
00:35:03,040 --> 00:35:07,040
So that's super nice, as well as a dev container definition.

540
00:35:07,040 --> 00:35:15,040
So if you were to open this in code spaces, the image would actually have AZD installed with all of the right Azure extensions so that you're like off to the races right away.

541
00:35:15,040 --> 00:35:21,040
And then we have the last thing I want to mention is sort of this asdo and GitHub directory.

542
00:35:21,040 --> 00:35:26,040
These contain our CI, CD, I'm not used to the mouse pad.

543
00:35:26,040 --> 00:35:29,040
I usually use an external mouse.

544
00:35:29,040 --> 00:35:33,040
These contain our skeletons for our CI, CD pipeline definitions.

545
00:35:33,040 --> 00:35:37,040
And so in this case, GitHub actions is our default provider.

546
00:35:37,040 --> 00:35:46,040
You can totally override it with Azure pipelines by passing in a flag if you so choose to do so, or if you were to delete the GitHub directory, we would just default to Azure pipelines.

547
00:35:46,040 --> 00:36:01,040
But in here, we are going to actually be running provision and deploy in our pipeline using the exact same commands that you would run in the terminal, which I think is really nice because it means that things are very consistent and easy to debug because you're using the exact same commands regardless of what kind of the client that you're using.

548
00:36:01,040 --> 00:36:08,040
So whether you're in VS code, Visual Studio, code spaces in your terminal, NCI, same commands, non magical.

549
00:36:08,040 --> 00:36:12,040
So yeah, that's pretty much the template structure.

550
00:36:12,040 --> 00:36:15,040
We're going to get to doing fun stuff now.

551
00:36:15,040 --> 00:36:22,040
So because I'm in VS code, I have a couple of different options for running AZD because I have the Azure Developer CLI extension installed.

552
00:36:22,040 --> 00:36:27,040
I can either right click on our Azure YAML and I'll see all of the AZD commands there.

553
00:36:27,040 --> 00:36:32,040
Again, this is really like our entry point for the Azure Developer CLI.

554
00:36:32,040 --> 00:36:43,040
We could also very easily open the command palette with command shift P or control shift P and type Azure Developer and see all the commands, or I could just invoke it in the terminal.

555
00:36:43,040 --> 00:36:49,040
I personally really like right clicking on the Azure YAML from VS code because I think it's really quick.

556
00:36:49,040 --> 00:36:58,040
So what I'm going to do is I'm going to, let me actually open a terminal real quick and then let that initialize.

557
00:36:58,040 --> 00:37:05,040
And then what I'm going to do is I'm going to run AZD up and I'll talk about this command in just a second.

558
00:37:05,040 --> 00:37:08,040
Oh, there is a bug here.

559
00:37:08,040 --> 00:37:11,040
I feel like I didn't pray to the demo gods today.

560
00:37:11,040 --> 00:37:13,040
This happened this morning too.

561
00:37:13,040 --> 00:37:19,040
Okay, so when you run AZD up, this is a magical command. This is a workflow command.

562
00:37:19,040 --> 00:37:24,040
So what this does is it actually combines three commands or like two and a half commands into one command.

563
00:37:24,040 --> 00:37:27,040
So it combines packaging your application code.

564
00:37:27,040 --> 00:37:40,040
So in this case, we're going to be building Docker or container images based on those Docker files, provisioning infrastructure using our infrastructure as code that's in the infradirectory and then deploying our source code, those images onto the container app host.

565
00:37:40,040 --> 00:37:48,040
I say 2.5 commands because if you were to run each of these commands individually, so let's say instead of doing AZD up, you want to do package, provision, deploy.

566
00:37:48,040 --> 00:37:52,040
You actually don't have to call package ahead of time. You can just do a provision and a deploy.

567
00:37:52,040 --> 00:38:00,040
We have package at the beginning of this command because there are actually cases where folks want to generate their infrastructure as code as opposed to like authoring them.

568
00:38:00,040 --> 00:38:06,040
So we are authoring it. So we want to make sure that the infrastructure's code exists before we try to do their provision.

569
00:38:06,040 --> 00:38:13,040
So I ran AZD up. It's going to be asking me for a subscription. So I'm going to go ahead and choose my subscription.

570
00:38:13,040 --> 00:38:19,040
And then it's going to ask me to choose a location. I'm just going to click East US 2. And then we're off to the races.

571
00:38:19,040 --> 00:38:27,040
And so transparently, this is not a one minute operation, right? If we were throwing stuff on a VM, maybe it would be.

572
00:38:27,040 --> 00:38:44,040
But we are building container images. We are provisioning all of those nine resources, stitching them together, setting up our database, setting up key vault, setting up all the roles, all the permissions, everything, and then deploying our images onto those container apps in that environment.

573
00:38:44,040 --> 00:38:52,040
And so this does take five minutes maybe. We're on conference Wi-Fi, so who knows?

574
00:38:52,040 --> 00:39:02,040
But basically, as we go through this, you'll see all of these resources that are being provisioned with unique identifiers that you can reference in the Azure portal.

575
00:39:02,040 --> 00:39:11,040
And so yeah, so we'll pause here. If folks are following along, you're welcome to run AZD up. This is going to take a couple minutes.

576
00:39:11,040 --> 00:39:23,040
If folks are ready to move forward, I have done some demo magic and done an AZD up ahead of time so that in case things didn't work out, we weren't totally hosed.

577
00:39:23,040 --> 00:39:28,040
So yeah, I'll pause for, I don't know, three minutes-ish.

578
00:39:28,040 --> 00:39:33,040
Yeah, yeah, Dawn, what questions do you have?

579
00:39:33,040 --> 00:39:38,040
I love questions.

580
00:39:38,040 --> 00:39:43,040
Yeah, so let me, it's hard because this is like ultra zoomed in.

581
00:39:43,040 --> 00:39:53,040
But I guess one thing I could talk about here is like what would it take if I were to swap out my own, my app code for, or this app code for my own app code.

582
00:39:53,040 --> 00:40:06,040
Again, we don't mandate any particular structure for your folder, but the things that you would want to check out if you were using container apps are one, that your Docker files, and I'll also open the Docker file.

583
00:40:06,040 --> 00:40:19,040
Let's just use the API Docker file for a second. Like the actual port that's exposed here needs to match something like the port that's exposed in, where's API?

584
00:40:19,040 --> 00:40:33,040
The port that's exposed here on the actual container. So stuff like, I love using container apps because it's, I don't know, writing a Docker file is pretty approachable for me.

585
00:40:33,040 --> 00:40:37,040
Also now the output looks super weird because we want super narrow.

586
00:40:37,040 --> 00:40:53,040
But I feel like writing a Docker file is super approachable and then what I really need to do is just like change the ports, make sure that my Azure ML paths for my project match the Azure, or the actual paths in my project, and then make sure that my infrastructure is code modules math up.

587
00:40:53,040 --> 00:40:57,040
So I feel like it's pretty, pretty approachable.

588
00:40:57,040 --> 00:41:00,040
But yeah.

589
00:41:00,040 --> 00:41:05,040
Is anyone still trying to work through this or should I, we're good to move on? How are we feeling?

590
00:41:05,040 --> 00:41:07,040
Okay.

591
00:41:07,040 --> 00:41:16,040
This is actually we're at the very last step. The kind of limiting factor here is provisioning a database and getting all that wired up because the all the connection strings and everything are stored in Key Vault.

592
00:41:16,040 --> 00:41:21,040
So we'll do a one two switch. We'll do a switch.

593
00:41:21,040 --> 00:41:23,040
Cool.

594
00:41:23,040 --> 00:41:36,040
So I sort of fake this. No, I actually ran earlier. I just wanted to do this ahead of time. But at the end of all of this, right, we have two endpoints that are printed out for us. One for our front end, one for our back end.

595
00:41:36,040 --> 00:41:42,040
So if I go ahead and click this, I'm going to see, let me go.

596
00:41:42,040 --> 00:41:45,040
I'm going to go back here and open these two up.

597
00:41:45,040 --> 00:41:58,040
And I'm going to see in this case, this template included an open API dot yaml. So we're going to see a full open API schema that we can explore for our endpoints right there, which is super nice.

598
00:41:58,040 --> 00:42:02,040
And then we have a fully fledged web app up and running on Azure.

599
00:42:02,040 --> 00:42:13,040
So in this case, again, this is a to do application, I can add tasks, tick them off. Shout out to my, my cats, Nori and Miso who made an appearance at PyCon.

600
00:42:13,040 --> 00:42:24,040
But yeah, so yeah, that's that's pretty much like the crux of it, I guess. The kind of nice thing is that if you're not changing your infrastructure as code, you don't actually have to run provision again.

601
00:42:24,040 --> 00:42:35,040
You only really have to run provision if you're changing settings there or configurations. And so day to day, you might really just want to run azd deploy, you know, you make a change to your app code, you build images again, you deploy.

602
00:42:35,040 --> 00:42:48,040
Deploy will inherently build package the images again, if you don't call package ahead of time. So it's really like a one one click or one command deploy, which is really nice. No kind of working through the Azure portal trying to find the right place.

603
00:42:48,040 --> 00:43:03,040
Cool. The next thing I want to show is pretty quick, but I mentioned that we had monitoring infrastructure setup. So if I run azd monitor, I can choose the overview dashboard, I have some options there.

604
00:43:03,040 --> 00:43:11,040
But this is going to show us all the metrics, a bunch of metrics for application for, I'm going to have to authenticate them. Yep. Okay.

605
00:43:11,040 --> 00:43:23,040
That all of the metrics for application. So like usage reliability, performance metrics, really just trying to provide you with like a solid foundation to build on.

606
00:43:23,040 --> 00:43:32,040
And again, like, I don't know about any of you, but I've spent like a long time building dashboard. So for me, this is like a very big time saver to have this all set up for me.

607
00:43:32,040 --> 00:43:46,040
So also, it's nice azd monitor just brings you to the right place in the portal. So you're not like clicking through like seven pages to find the right dashboard page, which I think is sort of nice from a local development context.

608
00:43:46,040 --> 00:44:02,040
And then finally, this is probably my favorite command, honestly. It's setting up CI CD. And so this seems like pretty basic because we just have that the definition that skeleton definition for our CI CD pipeline included in the repo.

609
00:44:02,040 --> 00:44:17,040
But this is actually pretty powerful because it really wants my pie on the shell to like initialize. This will, if I haven't already, will set up a new private repo for me or I can push to an existing repo.

610
00:44:17,040 --> 00:44:36,040
You can authenticate using we use the GitHub CLI under the hood in azd local scope. So if you don't have that installed, this looks really crazy because I have the window very small and I'm zoomed in. But it will create a repo, let you authenticate using SSH or HTTPS.

611
00:44:36,040 --> 00:44:44,040
It will create repo secrets, set up a service principle so that Azure and GitHub can talk to one another.

612
00:44:44,040 --> 00:44:48,040
It is pie and bug. I don't know what's happening.

613
00:44:48,040 --> 00:45:04,040
And so it'll really set up everything for you so that you don't have to go and like manage any of that configurations and like set up all the secrets so that GitHub and Azure can really talk to one another. And so on every commit now, you'll have you will have the repo.

614
00:45:04,040 --> 00:45:19,040
Sorry about that. You can test your code on every commit to the repo, which is super, super nice. So if I go, this is the repo that I created, this PyCon demo final.

615
00:45:19,040 --> 00:45:27,040
And if I go to my actions tab, I will see that there is a pipeline run kicked off and I've run this a couple times because I did prepare for this talk.

616
00:45:27,040 --> 00:45:43,040
And I will see that we are initializing containers. GitHub actions by default with AZD will authenticate using federated credentials. So OIDC, which is another security best practice, unless you opt out and decide you want client credentials and then run AZD provision, AZD deploy.

617
00:45:43,040 --> 00:45:53,040
So that's basically AZD up being run in CI, which is super nice for consistency, easy to debug, non-magical.

618
00:45:53,040 --> 00:46:11,040
Again, I love that it's non-magical. So that, I have some screenshots. That sort of brings us to like the end of this session really. This is like what we just kind of walked through. So when you start out, you really start out with like a what am I building? What template do I need?

619
00:46:11,040 --> 00:46:27,040
So that's where you'd want to look at awesome AZD or you could run the AZD template list command, which will list some hard coded templates. But really, I think looking at awesome AZD is great because it's both open source community off community templates as well as ones that Microsoft teams have authored.

620
00:46:27,040 --> 00:46:41,040
Then you would want to run AZD provision to create all of your infrastructure based off those infrastructure as coded files written in either Bicep or Terraform. AZD deploy to get all your code running in the cloud or just package that up really nicely with AZD up.

621
00:46:41,040 --> 00:46:53,040
And then AZD monitor and AZD pipeline config to kind of infuse those best practices into your workflow, make sure that you're kind of setting future you up for success, right? So yeah.

622
00:46:53,040 --> 00:47:03,040
So I hope that this session has been insightful or at least kind of interesting and maybe I've convinced you that the cloud is actually kind of cool, but only really when you have the right tools for your workflow.

623
00:47:03,040 --> 00:47:17,040
And yeah, I'll leave this slide up. This has a bunch of resources for this talk, but also learning more about the Azure Developer CLI, our GitHub repo for the course CLI tool as well as our VS code extension.

624
00:47:17,040 --> 00:47:29,040
We host monthly community standups on YouTube and on Twitch. So if you're interested in learning about all the new stuff coming to the Azure Developer CLI, definitely check that out. All of the live streams are also recorded so you can watch old ones if you want.

625
00:47:29,040 --> 00:47:37,040
And then this is a link to the template gallery that awesome AZD website, which will bring you right to the Python templates. So thanks very much.

626
00:47:37,040 --> 00:47:47,040
And if folks have questions or they just want to talk, that's also cool.

627
00:47:47,040 --> 00:48:05,040
So yeah.

628
00:48:05,040 --> 00:48:07,040
Oh yeah.

629
00:48:07,040 --> 00:48:08,040
Okay.

630
00:48:08,040 --> 00:48:24,040
Yeah, so the question was how much does all of this cost? So it'll depend on each particular template you're running. So like each template has a different set of infrastructure and all of the readmes do have links to pricing calculators so that we can transparently know how much stuff is going to cost on Azure.

631
00:48:24,040 --> 00:48:44,040
And then the second question was how do I tear all of this down? Which is a great question. We also have a command for that that I did not show because it does also take some time. But if I ran azd-h, I could scroll up and there is a command called azd-down, opposite of up, which will tear down all of your infrastructure and all of your deployments.

632
00:48:44,040 --> 00:49:01,040
So if I ran azd-down, it would start kind of doing that for me, which is basically the same operation that you could do in the Azure portal. Just nice to have it somewhere locally in the context where you're working so you're not context switching.

633
00:49:01,040 --> 00:49:05,040
So yeah.

634
00:49:05,040 --> 00:49:28,040
Yeah. And I'll be around again like the rest of the conference at the Microsoft booth and giving an abbreviated version of this talk. Is it tomorrow? Is that Friday, Saturday? I don't know. One of the days. But I'm there basically all day. So come say hi.

635
00:49:28,040 --> 00:49:44,040
So if you have, so you're only charged for, so each service has kind of a different pricing structure, right? So like if there's some services which are kind of pay as you go. And so in this case, like if things aren't being like hit or like no one is actually, you're not going to really be charged.

636
00:49:44,040 --> 00:49:56,040
Then there are definitely ones that have like monthly costs. So that's where like you'd want to check out the pricing calculator and make sure you know kind of.

637
00:49:56,040 --> 00:49:59,040
Yeah, so there.

638
00:49:59,040 --> 00:50:12,040
No, there's there is one prompt that will ask you if you want to purge your key vault so that will like, it'll tear everything down. But if you you can like soft delete that and like keep stuff around or just like totally tear it down. Both are both are options.

639
00:50:12,040 --> 00:50:30,040
This UI actually that I'm showing. It's unfortunate like this tonight. We're releasing a new version of easy to you where this will have a much more verbose output where you'll actually see more steps about what's happening under the hood. We've been really working on kind of unifying our design language and making sure that everything feels consistent.

640
00:50:30,040 --> 00:50:40,040
Assistant so check out the latest release 0.9 or 0.8.1 that will come out like tonight. I just didn't want to do the release right before I talk.

641
00:50:40,040 --> 00:50:46,040
You know, yeah, yeah, maybe you like don't do that. So yeah.

642
00:50:46,040 --> 00:51:06,040
Alright come say hi folks. But yeah, we also have some some pins and Azure pins at the front. If you want to grab one, we also will have VS code GitHub and and bit who's a little raccoon. That's sort of our mascot pins for that too at the booth as well as many stickers. So come grab some swag.

643
00:51:06,040 --> 00:51:11,040
Oh, and like mouse pads right VS code hotkey mouse pads y'all.

