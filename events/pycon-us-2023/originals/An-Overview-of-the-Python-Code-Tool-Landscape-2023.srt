1
00:00:00,000 --> 00:00:04,800
My dear friends, it's a pleasure for introducing you Dr. Schweigart.

2
00:00:04,800 --> 00:00:11,000
He's going to give a talk on the overview of the Python code tool landscape 2020.

3
00:00:11,000 --> 00:00:12,000
Thank you.

4
00:00:12,000 --> 00:00:13,000
Thank you.

5
00:00:13,000 --> 00:00:14,000
Thank you.

6
00:00:14,000 --> 00:00:15,000
Thank you.

7
00:00:15,000 --> 00:00:16,000
Thank you.

8
00:00:16,000 --> 00:00:17,000
Thank you.

9
00:00:17,000 --> 00:00:18,000
Quite awesome.

10
00:00:18,000 --> 00:00:19,000
Okay.

11
00:00:19,000 --> 00:00:23,000
Thank you so much for coming to this rescheduled talk.

12
00:00:23,000 --> 00:00:28,000
This talk was originally going to happen on the morning of the first day of the conference,

13
00:00:28,000 --> 00:00:35,000
but on my flight from Houston, that got delayed by an hour, and then that got delayed by four

14
00:00:35,000 --> 00:00:40,000
hours, and then there was engine trouble during the flight, and we had to make a 2 a.m. landing

15
00:00:40,000 --> 00:00:43,000
in Grand Junction, Colorado.

16
00:00:43,000 --> 00:00:48,000
So, I had to wait in line to get the hotel voucher, then I had to wait in line to get

17
00:00:48,000 --> 00:00:53,000
the hotel shuttle, then I had to wait in line to get the hotel check-in, also I'd get out

18
00:00:53,000 --> 00:00:58,000
about two hours of sleep before I would have to get up and go back to the airport.

19
00:00:58,000 --> 00:01:00,000
And then another thing happened.

20
00:01:00,000 --> 00:01:06,000
I fell in love with this beautiful stranger, like you do at airports, and I was willing

21
00:01:06,000 --> 00:01:12,000
to just forget everything, the conference, my books, my entire old life, just so I could

22
00:01:12,000 --> 00:01:18,000
be with her, and she told me, Al, if that thing takes off and you're not ending, you're

23
00:01:18,000 --> 00:01:20,000
going to regret it.

24
00:01:20,000 --> 00:01:25,000
And so, I went to the airport, and I was like, what about us today, maybe not tomorrow, but

25
00:01:25,000 --> 00:01:28,000
someday soon, and for the rest of your life?

26
00:01:28,000 --> 00:01:33,000
And I was just crying with tears in my eyes, I was like, but what about us?

27
00:01:33,000 --> 00:01:37,000
And she told me, we'll always have Grand Junction, Colorado.

28
00:01:44,000 --> 00:01:48,000
So, I got on the plane, and we never spoke again.

29
00:01:48,000 --> 00:01:51,000
So, that was the Tycon Code Tool Landscape 2023.

30
00:01:51,000 --> 00:01:54,000
Thank you very much for coming to this talk.

31
00:01:54,000 --> 00:02:01,000
You can find a copy of the slides at ify.tycon2023landscape, or you can just take photos with your phone

32
00:02:01,000 --> 00:02:03,000
at any slides that you find interesting.

33
00:02:03,000 --> 00:02:08,000
I really want to thank the Tycon organizers, the staff, the volunteers, everyone who does

34
00:02:08,000 --> 00:02:10,000
so much work to put all of this together.

35
00:02:10,000 --> 00:02:15,000
It's really amazing, especially because I had all this rescheduling that had to happen.

36
00:02:15,000 --> 00:02:21,000
Tycon is my favorite conference, and it's really the highlight of my career.

37
00:02:21,000 --> 00:02:23,000
My name is Al Swigert.

38
00:02:23,000 --> 00:02:29,000
I'm mostly known as the author of Automated Boring Stuff with Python and a few other books.

39
00:02:29,000 --> 00:02:33,000
You can read them all for free under the Included Call Influence on my website,

40
00:02:33,000 --> 00:02:35,000
inventwithpython.com.

41
00:02:35,000 --> 00:02:42,000
The idea for this talk started out as some research I was doing for my book about different

42
00:02:42,000 --> 00:02:47,000
tools that are available for Python, and there are quite a few of them.

43
00:02:47,000 --> 00:02:50,000
I really didn't understand what I was getting myself into.

44
00:02:50,000 --> 00:02:55,000
I had heard of some of them, but many of these tools have very similar names to other tools,

45
00:02:55,000 --> 00:02:59,000
and I found the whole thing really confusing.

46
00:02:59,000 --> 00:03:07,000
So, this is the part of the talk where I have to mention that obligatory SKCD comic showing how

47
00:03:07,000 --> 00:03:09,000
complicated the Python ecosystem is.

48
00:03:09,000 --> 00:03:13,000
It's really not that bad, but there is some truth to this.

49
00:03:13,000 --> 00:03:19,000
You have to keep in mind that Python is 30 years old at this point, and the fact that a lot of

50
00:03:19,000 --> 00:03:25,000
people have built a lot of different tools for it is sort of a symptom of its success.

51
00:03:25,000 --> 00:03:30,000
It's the second best language for everything, and in my opinion, it's the first best language for

52
00:03:30,000 --> 00:03:32,000
most settings.

53
00:03:32,000 --> 00:03:36,000
I will be getting many of my opinions during this talk.

54
00:03:36,000 --> 00:03:38,000
What does this talk cover?

55
00:03:38,000 --> 00:03:44,000
A lot of packages for tools that you can download from PyTI, the Python package index.

56
00:03:44,000 --> 00:03:47,000
Note that it's PyTI and not PyPy.

57
00:03:47,000 --> 00:03:50,000
That's something completely different than Python.

58
00:03:50,000 --> 00:03:54,000
I don't want to bore you with so many details, so I'm going to be skipping a lot of the

59
00:03:54,000 --> 00:03:58,000
configuration details in case you can just look that up in the documentation.

60
00:03:58,000 --> 00:04:03,000
And also, I just have a firehose of information out of you anyway, and that might be intimidating,

61
00:04:03,000 --> 00:04:06,000
but especially if you're new to programming or new to Python.

62
00:04:06,000 --> 00:04:10,000
But remember, you don't have to adopt all of these tools at once.

63
00:04:10,000 --> 00:04:15,000
If you're experienced in Python, you might find out about something that you haven't heard before.

64
00:04:15,000 --> 00:04:19,000
I certainly did find new tools that I hadn't seen before while I was researching this talk.

65
00:04:19,000 --> 00:04:25,000
And if you have some experience with Python, learning about these tools is a great way to move

66
00:04:25,000 --> 00:04:27,000
from beginner to advanced.

67
00:04:27,000 --> 00:04:32,000
And the funny thing is, that also applies if you are a beginner, because Saturday morning,

68
00:04:32,000 --> 00:04:37,000
because static code analysis tool sounds like a complicated thing, but these are tools that

69
00:04:37,000 --> 00:04:40,000
point out small problems in your code.

70
00:04:40,000 --> 00:04:46,000
So it's like giving you a mini code review, which is something that can really help you out as a beginner.

71
00:04:46,000 --> 00:04:50,000
It's sort of like learning how to use a debugger in that it doesn't cost you time,

72
00:04:50,000 --> 00:04:53,000
it actually saves you time over the long run.

73
00:04:53,000 --> 00:04:58,000
So if you are interested in learning these tools, don't hold back.

74
00:04:58,000 --> 00:05:03,000
Just being interested is enough of a qualification to start learning these tools.

75
00:05:03,000 --> 00:05:12,000
And all of the information that I present comes from the opinionated perspective of me here in 2023.

76
00:05:12,000 --> 00:05:19,000
If you're watching a recording of this talk on YouTube or wherever, in the future, hello, how's it going?

77
00:05:19,000 --> 00:05:24,000
How's the future going? Oh, kind of rough? Yeah, well, you know, it'll get better.

78
00:05:24,000 --> 00:05:31,000
The information in this talk here in 2023 is probably still relevant to you in the future.

79
00:05:31,000 --> 00:05:38,000
And if it isn't, well, at least it's a very good historical document of what the tools are like here in 2023.

80
00:05:38,000 --> 00:05:47,000
And at this point in time, it's actually really interesting to talk about static code analysis tools for Python.

81
00:05:47,000 --> 00:05:52,000
This talk would have been very different if I had given it last year, because about eight months ago,

82
00:05:52,000 --> 00:05:59,000
a new tool came out that has very rapidly started replacing many of the tools that I'm talking about here.

83
00:05:59,000 --> 00:06:04,000
And to keep the suspense, I knew I knew of this awesome tool at the end of this talk.

84
00:06:04,000 --> 00:06:08,000
Nah, just kidding. It's rough. The awesome tool is rough.

85
00:06:08,000 --> 00:06:13,000
But I will tell you about what makes it such a big danger towards ending the talk.

86
00:06:13,000 --> 00:06:18,000
And this talk started off as a blog post that I wrote a few months back.

87
00:06:18,000 --> 00:06:22,000
You can find out at bit.ly slash pycon2023 landscape.

88
00:06:22,000 --> 00:06:25,000
And it sends a link to the slide that's on the screen right now.

89
00:06:25,000 --> 00:06:30,000
I'll be updating this blog post from time to time.

90
00:06:30,000 --> 00:06:38,000
Okay. So there's a lot of things that I don't cover in this talk, like how to configure all of these different tools.

91
00:06:38,000 --> 00:06:45,000
That would be very boring for live presentation. So I'll just leave you to look up the documentation for that.

92
00:06:45,000 --> 00:06:50,000
I talk about type trackers, but I don't talk about the syntax of typefints.

93
00:06:50,000 --> 00:06:54,000
I don't talk about unit tests or code coverage tools.

94
00:06:54,000 --> 00:06:59,000
Those are things that actually run the code, and I'm focusing on static code analysis tools.

95
00:06:59,000 --> 00:07:08,000
I don't really cover any sort of ID or source control or any virtual environment stuff I use.

96
00:07:08,000 --> 00:07:13,000
Now, before I begin, I have to talk about programmers and their opinions,

97
00:07:13,000 --> 00:07:19,000
because how we define really different ways to write code is often a matter of our opinion.

98
00:07:19,000 --> 00:07:26,000
And we write these opinions into what our code tools will report as problems or as good code.

99
00:07:26,000 --> 00:07:33,000
And programmers can be quite enthusiastic about their opinions on how to write code.

100
00:07:33,000 --> 00:07:41,000
Pycon Enhancement Proposals Document Number 8, also called PEP 8, has code style recommendations for Python code.

101
00:07:41,000 --> 00:07:51,000
But remember that PEP 8 is a great set of guidelines, but it's not like PEP 8 was a stone tablet that you could walk down from the mountain.

102
00:07:51,000 --> 00:08:01,000
Even PEP 8 itself will tell you in the section right after the introduction if you don't have to contain yourself to every single one of the guidelines it presents.

103
00:08:01,000 --> 00:08:06,000
It's a set of smart opinions that you really need to know when it doesn't apply to your project.

104
00:08:07,000 --> 00:08:15,000
Neil Stevenson is a science fiction author who wrote Snow Crash, which is where the whole metaverse concept came from.

105
00:08:15,000 --> 00:08:20,000
He also wrote this book called The Diamond Age, which has this line that I have gagged here.

106
00:08:20,000 --> 00:08:27,000
I feel like most code style opinions that we assess are half-remembered pieces of bad advice.

107
00:08:27,000 --> 00:08:33,000
And when you work on a team, you can have conflicting opinions, and you can start arguing about code style.

108
00:08:33,000 --> 00:08:38,000
And the main thing that you should remember about that is that usually it's a waste of time.

109
00:08:38,000 --> 00:08:46,000
And the great thing about tools like Black and Rough is that even though everyone might not be able to agree on code style rules,

110
00:08:46,000 --> 00:08:52,000
they can usually agree on just referring to whatever these automatic tools will do.

111
00:08:52,000 --> 00:08:56,000
It just presents a lot of arguing that wastes time.

112
00:08:57,000 --> 00:09:03,000
Now, this talk that I'm giving is also opinionated because I'm not just telling you about tools,

113
00:09:03,000 --> 00:09:06,000
but I'm also giving you sort of my own recommendations about them.

114
00:09:06,000 --> 00:09:11,000
And keep in mind that these are just my opinions.

115
00:09:11,000 --> 00:09:19,000
Maybe they're relevant to the project that you're working on. Maybe they're not. It's fine to disagree with me. It's okay.

116
00:09:20,000 --> 00:09:26,000
Yeah, actually, you know what? Everybody on the internet is going to yell at me anyway, so I might as well just leave.

117
00:09:26,000 --> 00:09:29,000
All of my opinions are correct.

118
00:09:29,000 --> 00:09:33,000
And if you disagree with me, how dare you?

119
00:09:33,000 --> 00:09:36,000
Okay, so let's take a look at some code tools.

120
00:09:36,000 --> 00:09:43,000
Here are the different types of better code analysis tools. This is a very informal categorization that I'm using right here.

121
00:09:43,000 --> 00:09:48,000
The first type are linters. The name comes from the link trap in a clothing dryer.

122
00:09:48,000 --> 00:09:55,000
And it collects tiny little bits of lint, which helps prevent really big problems like dryer fires.

123
00:09:55,000 --> 00:10:00,000
So these are tools that will point out small problems with your code going on.

124
00:10:00,000 --> 00:10:04,000
I remember this was once consistent kind of right in college, which may or may not be made out.

125
00:10:04,000 --> 00:10:18,000
But a bug that is, that you have to debug after a software is released will take 50 to 200 times as long to fix than if you had caught it before software release.

126
00:10:18,000 --> 00:10:27,000
And that actually kind of makes sense to me. So like a problem that takes me half a day to debug, but if I had caught it sooner, it would have been fixed in two minutes.

127
00:10:27,000 --> 00:10:31,000
That's a situation I've been in multiple times.

128
00:10:31,000 --> 00:10:39,000
And there are also linters that check your code style. And this is really, these are things like spaces and variable names or line lengths.

129
00:10:39,000 --> 00:10:44,000
This is where a lot of opinion comes in about the source code variability.

130
00:10:44,000 --> 00:10:53,000
This is, these are linters that don't catch things that cause bugs, but catch things that make your code look ugly or make your code look unreadable.

131
00:10:53,000 --> 00:11:02,000
Wicca, of course, is a subjective term. But the main benefit of a style linter is preventing time-wasting arguments over code style.

132
00:11:02,000 --> 00:11:09,000
Software developers are expensive, time is precious, take a style linter and just deal with it.

133
00:11:09,000 --> 00:11:16,000
And there are also style linters for your doc strings that are really helpful at pointing out that you forgot to write doc strings.

134
00:11:17,000 --> 00:11:22,000
If you're creating a package, there are package linters that check to make sure that you're doing it right.

135
00:11:22,000 --> 00:11:32,000
I've always been in the situation where I've published something to PyPI and then I publish something five minutes later that fixes something in the previous thing that I published.

136
00:11:32,000 --> 00:11:42,000
There are linters to point out possible security issues with your code. There are also linters to point out any code that would logically never run or code that's been commented out.

137
00:11:42,000 --> 00:11:54,000
I call those dead code linters. Formatters or fixers go a step further and they not only detect problems with your code, but they also automatically update your source code and fix them as well.

138
00:11:54,000 --> 00:12:02,000
So there's no reason an expensive software engineer should be going through making text editor changes to thousands of files.

139
00:12:02,000 --> 00:12:06,000
This is a perfect place where you can use a tool like Black.

140
00:12:06,000 --> 00:12:16,000
Python is a dynamically typed language, which means that your variables and your function parameters and your return types, they can be of any data type whatsoever.

141
00:12:16,000 --> 00:12:28,000
And this is really nice because it makes it less tedious to write Python code, but it's not so nice in that there are many kinds of bugs that result from having the wrong data type.

142
00:12:28,000 --> 00:12:38,000
If you've ever encountered the error that's what none type object has there will actually be blah blah blah. That was most likely caused by a typing issue.

143
00:12:38,000 --> 00:12:46,000
Python now that's an offline add-type tends to your code and means they're verified once you type type a tool.

144
00:12:46,000 --> 00:12:54,000
And there are also tools that can measure how complex your code is according to some algorithms that computer scientists developed in the 1930s.

145
00:12:54,000 --> 00:12:56,000
That's 1970s.

146
00:12:56,000 --> 00:13:00,000
Still thinking about Casablanca. Anyway.

147
00:13:00,000 --> 00:13:07,000
And then there are packages that just combine a whole bunch of other packages I call the kitchen-sitting connectors.

148
00:13:07,000 --> 00:13:12,000
They're really nice if you just want to have one command that then runs a whole bunch of different tools.

149
00:13:12,000 --> 00:13:17,000
So you're going to get all of these tools from PyTI, which is the Python package index.

150
00:13:17,000 --> 00:13:23,000
It's the central repository where everybody publishes their third-party packages.

151
00:13:23,000 --> 00:13:34,000
And you can browse for different packages from the PyTI.org website and then install them with a command line tool that comes with Python called pip on macOS and Linux.

152
00:13:34,000 --> 00:13:36,000
It's called pip3.

153
00:13:36,000 --> 00:13:41,000
You may or may not have done this before. You just run pip install whatever from the command line.

154
00:13:41,000 --> 00:13:51,000
If you're a beginner or if you're teaching a workshop that has a lot of beginners, using the command line tool might be a bit of an obstacle,

155
00:13:51,000 --> 00:13:55,000
especially because it's different for people on Windows, it's different for people on Mac,

156
00:13:55,000 --> 00:14:06,000
and it depends on how their path environment variable is set up or whether they have multiple versions of Python installed at the same time you want to make sure you're installing the correct one.

157
00:14:06,000 --> 00:14:13,000
You really don't want to have your three-hour learning to code workshop have the first hour spent on just getting everyone's machines working.

158
00:14:13,000 --> 00:14:19,000
So there's a little trick that you can do if you just import pip and then call pip.main.

159
00:14:19,000 --> 00:14:23,000
You can essentially run pip from the interactive shell.

160
00:14:23,000 --> 00:14:30,000
And this is generally, for some technical reasons, not something you should do very often, but it does work.

161
00:14:30,000 --> 00:14:37,000
And it will work no matter what version of Python they have, no matter what operating system they have or anything else like that.

162
00:14:37,000 --> 00:14:41,000
So it's a really handy trick to keep in mind.

163
00:14:41,000 --> 00:14:47,000
So you can find these tools on the PyPI website, and you can install them with pip on the command line.

164
00:14:47,000 --> 00:14:50,000
To actually run them, you will have to use the command line.

165
00:14:50,000 --> 00:15:03,000
And they usually have a way that you can several command line options that you can pass to them, or you can configure their configuration file so that you don't have to enter the command line up in the speech time.

166
00:15:03,000 --> 00:15:06,000
All of that is going to be in their documentation.

167
00:15:06,000 --> 00:15:14,000
But mostly the thing that you should do is if you use an IDE like Visual Studio Code or Python or whatever,

168
00:15:15,000 --> 00:15:23,000
there should be a way where you can have the IDE run these tools, and that way you can do all the red squiggles directly into your editor.

169
00:15:23,000 --> 00:15:32,000
And you're not constantly alt-tabbing between the IDE and the command line and rerunning the commands over and over, and that gets really tired really quickly.

170
00:15:32,000 --> 00:15:39,000
So definitely it's worth your time to figure out how to get that working in the IDE itself.

171
00:15:39,000 --> 00:15:45,000
Now, I'm not going to go into all those details like I said before because it's all in the documentation anyway.

172
00:15:45,000 --> 00:15:55,000
But it makes these tools really convenient to use, and tools that are convenient to use are tools that you can use more often.

173
00:15:55,000 --> 00:16:00,000
Okay, so let's look at some of these actual tools.

174
00:16:00,000 --> 00:16:04,000
First off, here's a bunch of outdated, obsolete or unmaintained packages.

175
00:16:04,000 --> 00:16:09,000
PyCheck or PyLava, Flake, Hell, you have AtoFight, PryFormat.

176
00:16:09,000 --> 00:16:14,000
There's a package that's called Lint that seems to be really obscure and not used by anyone.

177
00:16:14,000 --> 00:16:19,000
And there's also lots of packages called PyPI that just have the word Lint in their name.

178
00:16:19,000 --> 00:16:26,000
You can usually tell that they're not really widely used because either their GitHub statistics will be pretty low

179
00:16:26,000 --> 00:16:31,000
or maybe they only had a few releases. The last one was from several years ago.

180
00:16:31,000 --> 00:16:35,000
This tells me that the project probably isn't being maintained.

181
00:16:35,000 --> 00:16:40,000
It's not a guarantee of that. Maybe it's just trying the way it is.

182
00:16:40,000 --> 00:16:46,000
But generally, inactively maintained projects will show a lot more activity right here.

183
00:16:46,000 --> 00:16:51,000
And another thing that maybe you shouldn't use a package is if it has no project description.

184
00:16:51,000 --> 00:16:55,000
There's a certain process for publishing packages on PyPI.

185
00:16:55,000 --> 00:16:59,000
In general, projects that don't bother to figure out how to have a description

186
00:16:59,000 --> 00:17:04,000
or they don't really have a good description probably aren't really meant for public consumption.

187
00:17:04,000 --> 00:17:08,000
I like to speak so much personal tool. So not always, but probably.

188
00:17:08,000 --> 00:17:11,000
And there are a couple of packages that have been renamed.

189
00:17:11,000 --> 00:17:17,000
PEP8 and PEP257 packages are now called PyCodeStyle and PyDocStyle.

190
00:17:17,000 --> 00:17:23,000
Here's a helpful hint. Aside from PEP8, very few people remember the exact PEP numbers for things.

191
00:17:23,000 --> 00:17:28,000
So I guess not to name your package after a number.

192
00:17:28,000 --> 00:17:34,000
And there are a few error linkers and style linkers that have very similar sounding names.

193
00:17:34,000 --> 00:17:38,000
I like PyFlates because it's rather conservative in what it catches.

194
00:17:38,000 --> 00:17:43,000
I mostly work on small products that I know and also I don't want to be distracted by false positives.

195
00:17:43,000 --> 00:17:50,000
Flake8 is a very popular tool and it contains a lot of plugins and Flake Heaven is also pretty good.

196
00:17:50,000 --> 00:17:58,000
PyLink is one of the oldest linkers out there that's very popular and it has a reputation for in-flow,

197
00:17:58,000 --> 00:18:06,000
but I doubt that only applies if you have a very large code repository that has scosher.

198
00:18:06,000 --> 00:18:10,000
Finally, next there are code form owners.

199
00:18:10,000 --> 00:18:16,000
The most popular one of course is black, but I dug around and there are actually others as well.

200
00:18:16,000 --> 00:18:22,000
YASF, I don't know how to pronounce that, but I'm guessing that stands for yet another Python form owner,

201
00:18:22,000 --> 00:18:25,000
which is nice because it's very, very customizable.

202
00:18:25,000 --> 00:18:32,000
I tend to go ahead and just use black because it has very few knobs that you can turn to customize it.

203
00:18:32,000 --> 00:18:37,000
The "-s argument is there because I like to keep my single quoted strings,

204
00:18:37,000 --> 00:18:44,000
I have single quoted strings, I have double quoted strings, and I like to set my line lengths to like one line or something really big like that.

205
00:18:44,000 --> 00:18:50,000
AutoPep8 and Stakefit are other tools that I do have a lot of experience with,

206
00:18:50,000 --> 00:18:54,000
but AutoPep8 does seem to have some popularity.

207
00:18:54,000 --> 00:19:01,000
For DocString linkers, all of them are currently under way in maintaining, but they all seem great.

208
00:19:01,000 --> 00:19:05,000
PyDocStyle.formatter. PyDocString.formatter.

209
00:19:05,000 --> 00:19:10,000
You can see why it's really confusing to juggle all of these names.

210
00:19:10,000 --> 00:19:17,000
PyDocStyle is the most popular one that I've found, but the others, from what I can tell, seem to work pretty well also.

211
00:19:17,000 --> 00:19:22,000
And then there are type checkers. You've probably heard of MyPy, which is one that's community supported,

212
00:19:22,000 --> 00:19:28,000
but Microsoft, Google, and Facebook have also come out with their own type checkers as well.

213
00:19:28,000 --> 00:19:31,000
I've just been sticking with MyPy.

214
00:19:31,000 --> 00:19:39,000
And then there are security linters. And in my experience, all of these have not been so helpful.

215
00:19:39,000 --> 00:19:44,000
Occasionally, they point out something that is theoretically a security concern in my code,

216
00:19:44,000 --> 00:19:52,000
but it's also a lot of false positives that they are ended, dodgy, and that PySy, which comes with PyR.

217
00:19:52,000 --> 00:19:56,000
Oh, going back previously, there are some things that you should know.

218
00:19:56,000 --> 00:20:04,000
For PyWrite from Microsoft, it's right as in left and right, and not pyWrite as in full scroll.

219
00:20:04,000 --> 00:20:12,000
And to install Pyre, you actually have to install pyre-deck, because the Pyre project is something else entirely.

220
00:20:12,000 --> 00:20:18,000
And then there's packet pointers. These are great. I've only downed one, PyRoma.

221
00:20:19,000 --> 00:20:28,000
It's a very nice checklist to make sure how do you set up everything correctly before you upload to PyPI.

222
00:20:28,000 --> 00:20:33,000
I haven't found any others. This is definitely one that I use a lot.

223
00:20:33,000 --> 00:20:39,000
And then there's dead code linters. And these are of some value to me.

224
00:20:39,000 --> 00:20:42,000
Ultra generates a lot of false positives for me.

225
00:20:42,000 --> 00:20:47,000
And there are things where you have a return statement, but then you have some code after it.

226
00:20:47,000 --> 00:20:53,000
It'll point out, hey, this code can never possibly run at all, because you returned before it could run.

227
00:20:53,000 --> 00:21:01,000
Things like that, or code that you've just commented out, that's really not something that you should put into source control when you commit your code.

228
00:21:01,000 --> 00:21:09,000
AutoFlake, which really has nothing to do with Flake. It uses PyFlake for itself,

229
00:21:09,000 --> 00:21:15,000
but all it does is remove unused import statements and also unused hash statements as well.

230
00:21:15,000 --> 00:21:24,000
And then complexity analysis tools. This is something that I learned about in my computer science education in college,

231
00:21:24,000 --> 00:21:38,000
and I've never really used since. The main one is McCabe, which is also named after the doctor who invented the cyclomatic complexity metric.

232
00:21:38,000 --> 00:21:43,000
Really, I'm not convinced that these are useful metrics in general.

233
00:21:43,000 --> 00:21:52,000
Like, rearranging your code just for the sake of reducing its complexity is probably going to end up making your code harder to read.

234
00:21:52,000 --> 00:21:59,000
If I was a manager, I would never make a rule that our code must have a complexity score of X or lower.

235
00:21:59,000 --> 00:22:06,000
But it's actually pretty good for getting some insights about maybe what sections of your code are a bit more complicated,

236
00:22:06,000 --> 00:22:14,000
maybe what are the right words you use just for those sections of code, or maybe just want to refactor them some more.

237
00:22:14,000 --> 00:22:22,000
And then these are the packages I call HM SYNC packages. Flake 8 is really nice.

238
00:22:22,000 --> 00:22:29,000
By itself, it has just PyFlake's PyQuant style as a style editor and McCabe for complexity analysis,

239
00:22:29,000 --> 00:22:33,000
but there are also just so many plugins available for Flake 8.

240
00:22:33,000 --> 00:22:39,000
There's also PyLama, which is not to be confused with PyLama with two Ls.

241
00:22:39,000 --> 00:22:44,000
It also has PyCoStyle and PyDotStyle and PyFlake for McCabe.

242
00:22:44,000 --> 00:22:51,000
And then it also has the packages in red you can optionally install on top of the core PyLama packages.

243
00:22:51,000 --> 00:22:56,000
And then there's Prospector, which also includes a bunch of these packages.

244
00:22:57,000 --> 00:23:03,000
I've listed these here in order of popularity. Flake 8 is by far the most popular one I've seen.

245
00:23:03,000 --> 00:23:10,000
And then I think this is the last category. There's iSort and uSort.

246
00:23:10,000 --> 00:23:16,000
And these are formatters that rearrange your import statements into alphabetical order.

247
00:23:16,000 --> 00:23:23,000
And it seems really useless, but I actually kind of like these tools, especially when I just have like import this, import this, import this.

248
00:23:23,000 --> 00:23:30,000
And it gives like some, once I have like 10 or so import statements, it is kind of nice to have them in alphabetical order.

249
00:23:30,000 --> 00:23:34,000
And it's just nice that the tool automatically does that.

250
00:23:35,000 --> 00:23:42,000
Okay, that was a lot. Everybody still awake? Yeah? Okay.

251
00:23:42,000 --> 00:23:46,000
Everybody, there might have been some packages that I've slipped by me.

252
00:23:46,000 --> 00:23:52,000
I really apologize to the maintainers of those projects. Feel free to contact me and I can update my blog post with them.

253
00:23:52,000 --> 00:24:01,000
Who learned about some new tools that they did not know about before? Oh, wow. Basically everyone. Great. Yeah. Awesome. Okay.

254
00:24:01,000 --> 00:24:06,000
Forget about everything I just told you. Yeah. You can just use Ruff.

255
00:24:06,000 --> 00:24:12,000
Yeah. This entire talk is now kind of pointless. Let's talk about Ruff.

256
00:24:12,000 --> 00:24:18,000
It was first released about eight months ago, and if you haven't heard of Ruff, you will.

257
00:24:18,000 --> 00:24:28,000
It is very rapidly growing in popularity. Ruff is a Python linker written in Rust, and it is fast. How fast? Very fast.

258
00:24:28,000 --> 00:24:38,000
These were the benchmarks after releasing the C Python repo. I tried it out myself, and I thought it had crashed because it finished so quickly.

259
00:24:38,000 --> 00:24:48,000
It's a Python link. It takes over 60 seconds. Flakey, it will take 12 seconds. Ruff takes a third of a second. It is mind-boggling.

260
00:24:48,000 --> 00:25:00,000
And when you have a tool that you can write constantly in the background and not just daily or as a pre-commed book, you get to actually get a massive boost in your personal productivity.

261
00:25:00,000 --> 00:25:10,000
There are some great interviews with Ruff Trader, Charlie Marsh, who is also here at Python. I hope he hasn't gone home yet.

262
00:25:10,000 --> 00:25:17,000
I really recommend checking out his interviews. He was also on the Top Python Podcast.

263
00:25:17,000 --> 00:25:29,000
I mean, like all Wenders, Ruff is probably going to start off being a little bit more zealous about what he tells you about, but he can also configure it to read in orders for a lot of different things.

264
00:25:29,000 --> 00:25:39,000
Here, it produced 19,000 lines of advice in the third of a second that it took to review the C Python source code.

265
00:25:39,000 --> 00:25:49,000
Yes, I really want to stress how fast it is. Not just that, but Ruff developers have re-implemented many of Flakey's plugins.

266
00:25:50,000 --> 00:26:00,000
Here's a list of all the packages that Ruff currently replaces. So, I still need to dive into it, but I think that Ruff has made my entire talk pointless.

267
00:26:00,000 --> 00:26:12,000
So if you're brand new to static analysis tools, I think you can get away with just using Black, MyCon, and Ruff, and use some other miscellaneous packages as well.

268
00:26:12,000 --> 00:26:30,000
And that's a pretty sweeping statement. But the more I look at Ruff and the way that it's adding new features, I think we're headed towards a world where you don't need Alice Piper compiling all of this information about different static analysis tools because everyone will have settled on just a handful of them.

269
00:26:30,000 --> 00:26:50,000
And I did not have said this at last year's PyCon, so it is a very exciting time. So the ecosystem of any programming language as top-class Python is always going to be vast, but as far as static analysis tools go, the future is looking bright and it's going to get better.

270
00:26:50,000 --> 00:26:52,000
Thank you for attending my talk.

