1
00:00:00,000 --> 00:00:02,080
All right, testing one, two, three.

2
00:00:02,080 --> 00:00:03,360
All right, excellent.

3
00:00:03,360 --> 00:00:04,660
All right, hi everyone.

4
00:00:04,660 --> 00:00:05,960
Thank you for coming.

5
00:00:05,960 --> 00:00:11,080
Allison, thank you for also joining me here today.

6
00:00:11,080 --> 00:00:14,240
Being a Star Wars fan, I have to ask you,

7
00:00:14,240 --> 00:00:16,120
are you also a Star Wars fan?

8
00:00:16,120 --> 00:00:18,000
Absolutely, 100%.

9
00:00:18,000 --> 00:00:19,680
Okay, so what movie is your favorite?

10
00:00:19,680 --> 00:00:21,000
Rogue One.

11
00:00:21,000 --> 00:00:22,300
Yes, Rogue One.

12
00:00:22,300 --> 00:00:24,280
Yes, sorry, get excited.

13
00:00:24,280 --> 00:00:26,080
Okay, so a little bit of a spoiler alert

14
00:00:26,080 --> 00:00:28,920
if you haven't seen this movie and The New Hope.

15
00:00:28,920 --> 00:00:31,560
So at the end of Rogue One, right,

16
00:00:31,560 --> 00:00:36,560
Darth Vader is chasing Princess Leia's ship over Scarif.

17
00:00:36,560 --> 00:00:38,080
Yes. Right, at the end of Rogue One.

18
00:00:38,080 --> 00:00:42,880
At the beginning of The New Hope, they are at Tatooine.

19
00:00:42,880 --> 00:00:47,160
So, routing question, did Princess Leia's ship,

20
00:00:47,160 --> 00:00:49,140
were they trying to make the fastest route

21
00:00:49,140 --> 00:00:51,700
from Scarif to Alderaan, or were they going

22
00:00:51,700 --> 00:00:53,480
some weird roundabout route and happened

23
00:00:53,480 --> 00:00:54,860
to end up over Tatooine, right?

24
00:00:54,860 --> 00:00:56,360
Because Tatooine's supposed to be out

25
00:00:56,360 --> 00:00:58,040
out in the middle of nowhere.

26
00:00:58,040 --> 00:01:00,800
Scarif, you would assume it being an important complex,

27
00:01:00,800 --> 00:01:02,840
would be not so far away?

28
00:01:02,840 --> 00:01:03,660
So I don't know.

29
00:01:03,660 --> 00:01:06,800
So, yes, how would I answer a question like that, Allison?

30
00:01:06,800 --> 00:01:08,380
Well, you know, it's a good thing you asked, Jason,

31
00:01:08,380 --> 00:01:09,640
because that's actually what we're going

32
00:01:09,640 --> 00:01:10,800
to be talking about today.

33
00:01:10,800 --> 00:01:12,120
Excellent, all right.

34
00:01:12,120 --> 00:01:13,600
Let's find out how we do this.

35
00:01:14,740 --> 00:01:15,580
Cool.

36
00:01:15,580 --> 00:01:17,240
There are a couple seats up front,

37
00:01:17,240 --> 00:01:18,560
if you guys want to come on in.

38
00:01:18,560 --> 00:01:21,260
We've got a couple up here and then sort of middle seats

39
00:01:21,260 --> 00:01:22,520
up through here as well.

40
00:01:23,600 --> 00:01:25,000
Sorry. Okay.

41
00:01:25,000 --> 00:01:27,680
All right, so we got to start with data, right?

42
00:01:28,600 --> 00:01:30,600
There are, fortunately, some websites

43
00:01:30,600 --> 00:01:34,640
where other people have diligently created maps

44
00:01:34,640 --> 00:01:35,880
of the Star Wars universe, right?

45
00:01:35,880 --> 00:01:37,620
So we can scrape some of this data.

46
00:01:37,620 --> 00:01:40,320
How many systems are we talking about?

47
00:01:40,320 --> 00:01:42,580
I think we've got a little over 2,000 planets

48
00:01:42,580 --> 00:01:44,420
and systems in our data set.

49
00:01:44,420 --> 00:01:47,320
Okay, so that's a lot of systems to figure out routing for.

50
00:01:48,480 --> 00:01:51,320
Let's see, and what are these lines here?

51
00:01:51,320 --> 00:01:53,360
Oh, those are hyperdrive lanes.

52
00:01:53,360 --> 00:01:56,240
So the hyperdrive lanes are where you can actually go

53
00:01:56,240 --> 00:01:58,920
at very fast hyperdrive speed

54
00:01:58,920 --> 00:02:00,240
and you're not going to run into anything.

55
00:02:00,240 --> 00:02:02,040
So it's kind of like the interstate

56
00:02:02,040 --> 00:02:03,760
of the Star Wars galaxy.

57
00:02:03,760 --> 00:02:04,800
Oh, okay, great.

58
00:02:04,800 --> 00:02:07,440
All right, so we got systems, there are coordinated data,

59
00:02:07,440 --> 00:02:09,440
we got freeways in space.

60
00:02:09,440 --> 00:02:11,280
And what about planets that are not on the freeway?

61
00:02:11,280 --> 00:02:15,440
How do people get from system to system?

62
00:02:15,440 --> 00:02:16,480
I mean, if it were me,

63
00:02:16,480 --> 00:02:18,300
I actually live in a small town myself.

64
00:02:18,300 --> 00:02:21,160
So for me, you go to exit 16, make a right

65
00:02:21,160 --> 00:02:22,680
and two towns over and then you get to me.

66
00:02:22,680 --> 00:02:25,000
So I think you'd probably do something similar to that.

67
00:02:25,000 --> 00:02:26,600
Probably hit the hyperdrive lane,

68
00:02:26,600 --> 00:02:29,640
get as close as I could, pop out, hit the planet.

69
00:02:29,640 --> 00:02:31,800
Okay, all right, so we got all this data.

70
00:02:33,280 --> 00:02:34,880
So what do we do from there?

71
00:02:34,880 --> 00:02:36,920
So I'm not a routing expert.

72
00:02:38,080 --> 00:02:39,440
Like this to me as a developer,

73
00:02:39,440 --> 00:02:41,620
it seems like a really daunting problem to figure out.

74
00:02:41,620 --> 00:02:43,640
So probably the first thing I would do,

75
00:02:43,640 --> 00:02:47,600
since we have a room full of amazing developers is,

76
00:02:47,600 --> 00:02:48,440
I would, oh.

77
00:02:50,320 --> 00:02:51,520
I would press this button

78
00:02:51,560 --> 00:02:55,120
and I would set up a Rebel Developer Alliance

79
00:02:55,120 --> 00:02:58,680
registration form and ask the audience

80
00:02:58,680 --> 00:03:01,040
to help me with this problem.

81
00:03:01,040 --> 00:03:06,040
So if you have a phone or you got your laptop open,

82
00:03:06,040 --> 00:03:07,560
if you could just go to the site real quick

83
00:03:07,560 --> 00:03:10,680
and just register yourself.

84
00:03:10,680 --> 00:03:14,560
And here you can put whatever you want for the call sign.

85
00:03:14,560 --> 00:03:15,640
Sorry.

86
00:03:15,640 --> 00:03:18,680
If, what special things do we have for this?

87
00:03:18,680 --> 00:03:21,080
So we do have prizes available.

88
00:03:21,640 --> 00:03:24,240
So what we're doing right now is we're picking developers

89
00:03:24,240 --> 00:03:26,000
that are going to be helping us build

90
00:03:26,000 --> 00:03:27,880
this navigation system.

91
00:03:27,880 --> 00:03:30,720
And so we've got a number of different prizes

92
00:03:30,720 --> 00:03:34,220
that are available to be revealed later.

93
00:03:34,220 --> 00:03:37,040
So what we're gonna ask you to do is just log in

94
00:03:37,040 --> 00:03:39,680
and do you wanna walk through what's in there?

95
00:03:39,680 --> 00:03:40,720
Yes, okay.

96
00:03:40,720 --> 00:03:42,320
So let me walk over here.

97
00:03:42,320 --> 00:03:44,800
Okay, so put in any call sign you want.

98
00:03:44,800 --> 00:03:46,960
The unique identifier will be your email.

99
00:03:46,960 --> 00:03:48,080
So you can put any email you want,

100
00:03:48,080 --> 00:03:50,080
but if you want to be part of the prize list,

101
00:03:50,080 --> 00:03:53,240
definitely put in some email that you actually own.

102
00:03:53,240 --> 00:03:54,240
Programming languages.

103
00:03:54,240 --> 00:03:57,400
So put in any of the programming languages that you know

104
00:03:57,400 --> 00:04:00,000
to any significant degree.

105
00:04:00,000 --> 00:04:03,400
I'm assuming Python will definitely be predominant

106
00:04:03,400 --> 00:04:05,240
on this list, but definitely put your other languages.

107
00:04:05,240 --> 00:04:06,080
File a guess.

108
00:04:06,080 --> 00:04:06,920
Just a guess.

109
00:04:08,080 --> 00:04:09,540
The people you associate with.

110
00:04:09,540 --> 00:04:12,800
So which famous Star Wars characters would you consider

111
00:04:12,800 --> 00:04:13,640
your closest friends?

112
00:04:13,640 --> 00:04:15,200
Like who would you associate more with?

113
00:04:15,200 --> 00:04:17,360
Darth Maul, Obi-Wan?

114
00:04:17,360 --> 00:04:19,960
So go and put in a small list of folks.

115
00:04:20,800 --> 00:04:22,640
And then the last thing is choose your home world.

116
00:04:22,640 --> 00:04:24,080
I mean we know your actual home world,

117
00:04:24,080 --> 00:04:26,320
but we know your actual actual home world.

118
00:04:26,320 --> 00:04:30,260
So there's a list here of famous Star Wars planets.

119
00:04:30,260 --> 00:04:34,280
Just choose any which one that you think reflects you

120
00:04:34,280 --> 00:04:37,200
as a person, as a Star Wars character.

121
00:04:37,200 --> 00:04:38,400
Which one do you like most?

122
00:04:38,400 --> 00:04:40,440
And then once you're done, just click register

123
00:04:40,440 --> 00:04:43,240
and we'll populate the database in the back end.

124
00:04:44,720 --> 00:04:48,000
Because there is no ways for intergalactic travel.

125
00:04:48,000 --> 00:04:49,640
So we're gonna need to hire some people

126
00:04:49,640 --> 00:04:50,640
to help us build this.

127
00:04:50,640 --> 00:04:52,440
Yes, so that's basically what we're gonna build, right?

128
00:04:52,440 --> 00:04:55,080
Is ways for intergalactic travel.

129
00:04:55,080 --> 00:04:57,080
Okay, all right, we talked about prizes.

130
00:04:58,480 --> 00:05:01,220
And okay, oh yes.

131
00:05:02,360 --> 00:05:04,560
So after everybody's registered,

132
00:05:04,560 --> 00:05:07,280
we've got, we'll have some data, right?

133
00:05:07,280 --> 00:05:11,240
So you know, if I were to build this straight up,

134
00:05:11,240 --> 00:05:13,320
I'd probably use a Postgres database

135
00:05:13,320 --> 00:05:14,760
because that's one of the few databases

136
00:05:14,760 --> 00:05:16,880
I know anything about.

137
00:05:16,880 --> 00:05:19,800
So I'd start with like a table of all of us, right?

138
00:05:19,800 --> 00:05:23,240
All our developers who are associated with skills.

139
00:05:23,240 --> 00:05:26,360
And I'd build tables for each component, right?

140
00:05:26,360 --> 00:05:29,760
A list of programming languages, a table for characters,

141
00:05:29,760 --> 00:05:31,840
a table for all the planets, right?

142
00:05:31,840 --> 00:05:36,140
So I've got all this data in a Postgres database.

143
00:05:36,140 --> 00:05:37,800
Because everybody loves a table.

144
00:05:37,800 --> 00:05:38,640
Because everyone loves a table.

145
00:05:38,640 --> 00:05:39,800
When in doubt, go with the table.

146
00:05:39,800 --> 00:05:40,960
Go with the table.

147
00:05:40,960 --> 00:05:45,640
Okay, so as a developer, where should I go from here, Alice?

148
00:05:45,640 --> 00:05:48,560
So here's the challenge that I'm seeing right now, Jason,

149
00:05:48,560 --> 00:05:50,960
is obviously everybody goes with the table.

150
00:05:50,960 --> 00:05:51,800
It makes sense.

151
00:05:51,800 --> 00:05:54,440
Everybody grew up on relational databases.

152
00:05:54,440 --> 00:05:56,240
But where I'm struggling is I'm struggling

153
00:05:56,240 --> 00:05:59,320
in this top table where we see the name of the developer

154
00:05:59,320 --> 00:06:01,800
and then they've got a bunch of different languages, perhaps.

155
00:06:01,800 --> 00:06:04,160
And then they have a number of different associates.

156
00:06:04,160 --> 00:06:06,860
And so the challenge that I'm having in this

157
00:06:06,860 --> 00:06:09,920
is how are we gonna handle this many to many, right?

158
00:06:09,920 --> 00:06:12,720
We're trying to figure out who are the developers

159
00:06:12,720 --> 00:06:15,280
that we need, but some people know some languages,

160
00:06:15,920 --> 00:06:16,760
some people know other languages.

161
00:06:16,760 --> 00:06:19,320
How are we gonna handle that?

162
00:06:19,320 --> 00:06:21,040
Right now, it's a pretty short list.

163
00:06:21,040 --> 00:06:22,920
We could see which one is the right one.

164
00:06:22,920 --> 00:06:25,320
But when we've got thousands and thousands of developers,

165
00:06:25,320 --> 00:06:28,600
how are we going to actually have the right people

166
00:06:28,600 --> 00:06:31,880
sort of come to the top so that we know who to hire?

167
00:06:31,880 --> 00:06:33,840
It seems like it could be a bit of a challenge.

168
00:06:33,840 --> 00:06:34,800
What do you think?

169
00:06:34,800 --> 00:06:37,520
Well, if I were building this, which I guess I am,

170
00:06:39,080 --> 00:06:40,800
I'd start with kind of a high level workflow.

171
00:06:40,800 --> 00:06:42,300
Like how am I gonna solve this, right?

172
00:06:42,300 --> 00:06:44,160
So I'd start with maybe the skills.

173
00:06:44,160 --> 00:06:47,040
Like do the developers that I'm interested in

174
00:06:47,040 --> 00:06:48,720
have the skills that kind of match up

175
00:06:48,720 --> 00:06:49,760
with the rest of the team?

176
00:06:49,760 --> 00:06:51,020
And then I would kind of figure out like,

177
00:06:51,020 --> 00:06:52,240
are they trustable, right?

178
00:06:52,240 --> 00:06:53,800
Like based on their associates,

179
00:06:53,800 --> 00:06:56,280
are they kind of leaning more toward Rebel?

180
00:06:56,280 --> 00:06:59,340
Or are they really kind of more imperial sympathetic?

181
00:06:59,340 --> 00:07:01,020
And then where do they live?

182
00:07:01,020 --> 00:07:02,960
Do they live close to where we're gonna have

183
00:07:02,960 --> 00:07:05,920
our crack team of Rebel developers hiding, right?

184
00:07:05,920 --> 00:07:08,540
Because if they're all the way across the galaxy,

185
00:07:08,540 --> 00:07:09,640
it might be expensive and dangerous

186
00:07:09,640 --> 00:07:10,480
to try to bring them in.

187
00:07:10,480 --> 00:07:12,540
So these are probably the three main things

188
00:07:12,540 --> 00:07:15,660
that I would look for with the registration form data

189
00:07:15,660 --> 00:07:17,100
that we have.

190
00:07:17,100 --> 00:07:20,100
And then probably you have some sort of ranking rubric

191
00:07:20,100 --> 00:07:21,980
at the very end, yeah?

192
00:07:21,980 --> 00:07:24,340
Does that sound like a reasonable, something doable?

193
00:07:24,340 --> 00:07:26,420
I mean, I don't know, it seems like a reasonable approach.

194
00:07:26,420 --> 00:07:27,820
Anyone?

195
00:07:27,820 --> 00:07:30,580
Okay, so if we've got everything in a table,

196
00:07:30,580 --> 00:07:33,260
you'll probably run some kind of SQL query to give you this.

197
00:07:33,260 --> 00:07:35,700
So what might that look like?

198
00:07:35,700 --> 00:07:36,900
Okay, so I would probably look up

199
00:07:36,900 --> 00:07:40,580
what the best SQL statement would be.

200
00:07:40,620 --> 00:07:43,020
But here's an example of something that would work

201
00:07:43,020 --> 00:07:45,140
that would look through all our tables

202
00:07:45,140 --> 00:07:46,900
and give us a subset of developers

203
00:07:46,900 --> 00:07:51,220
that at least made our initial kind of rubric choice.

204
00:07:51,220 --> 00:07:53,260
If we know what systems we were kind of working around,

205
00:07:53,260 --> 00:07:56,540
what their skills are, I think this would more or less work.

206
00:07:56,540 --> 00:07:57,380
Yes?

207
00:07:57,380 --> 00:07:59,980
Okay, I mean, it's a good start,

208
00:07:59,980 --> 00:08:02,420
but we kind of have the same problem we had before,

209
00:08:02,420 --> 00:08:05,620
which is how are we actually ranking them?

210
00:08:05,620 --> 00:08:08,620
And what happens if you wanna change it up?

211
00:08:08,620 --> 00:08:10,780
What if instead of it being this language,

212
00:08:10,780 --> 00:08:12,060
you want another language?

213
00:08:12,060 --> 00:08:13,660
Is it very flexible?

214
00:08:14,540 --> 00:08:15,700
What do you think?

215
00:08:15,700 --> 00:08:17,420
Well, there's some things that we could tweak, right?

216
00:08:17,420 --> 00:08:19,340
We make certain things, parameters,

217
00:08:19,340 --> 00:08:22,100
and I mean, once we get this subset of developers, right?

218
00:08:22,100 --> 00:08:25,620
Then I can run them through a rules engine inside my app.

219
00:08:25,620 --> 00:08:27,820
So I could kind of split the load.

220
00:08:28,940 --> 00:08:29,780
We gotta be honest,

221
00:08:29,780 --> 00:08:32,380
I'm still not thrilled about this many to many problem.

222
00:08:32,380 --> 00:08:33,980
I don't really like the way this is coming out.

223
00:08:33,980 --> 00:08:36,820
It's coming out, one row is a developer,

224
00:08:36,820 --> 00:08:38,100
kind of aggregating in a way

225
00:08:38,100 --> 00:08:40,020
that I think we're losing a lot of context.

226
00:08:40,020 --> 00:08:42,500
So I gotta tell you, I don't love it.

227
00:08:42,500 --> 00:08:45,140
Okay, what do you think would be better?

228
00:08:45,140 --> 00:08:48,460
Well, I'm really concerned about this many to many.

229
00:08:48,460 --> 00:08:49,780
So let me tell you what my problem is.

230
00:08:49,780 --> 00:08:53,260
So my problem I have here is we've got the individuals

231
00:08:53,260 --> 00:08:56,780
and we've got these different languages that they may know.

232
00:08:56,780 --> 00:08:59,160
But what I'm seeing is I'm definitely seeing some repeats

233
00:08:59,160 --> 00:09:00,300
within these lists, right?

234
00:09:00,300 --> 00:09:02,380
Everybody loves the dictionary, right?

235
00:09:02,380 --> 00:09:06,220
But how, like, these are just at the,

236
00:09:06,220 --> 00:09:08,900
so right now I'm looking at like a one to many, right?

237
00:09:08,900 --> 00:09:11,540
I've got the one developer with many languages.

238
00:09:11,540 --> 00:09:13,820
And then I'm seeing that there's relationships

239
00:09:13,820 --> 00:09:16,060
on the other side, like a couple people know Python.

240
00:09:16,060 --> 00:09:17,580
Does it matter how many people know?

241
00:09:17,580 --> 00:09:19,900
Or is there a relationship between those who know?

242
00:09:19,900 --> 00:09:22,340
So I think this is giving us one to many,

243
00:09:22,340 --> 00:09:24,660
but we don't really get the relationship

244
00:09:24,660 --> 00:09:28,200
between the developer and the language in this case, right?

245
00:09:28,200 --> 00:09:31,180
So this doesn't really work for me.

246
00:09:31,180 --> 00:09:33,900
So then if I wanna make sure that I know exactly

247
00:09:33,900 --> 00:09:36,580
what the relationship is between the developer

248
00:09:36,580 --> 00:09:37,980
and their language, like, okay,

249
00:09:37,980 --> 00:09:40,040
we'll go with the list of tupleset.

250
00:09:40,040 --> 00:09:43,080
So now I can see, yes, this person

251
00:09:43,080 --> 00:09:44,940
definitely knows this language,

252
00:09:44,940 --> 00:09:47,220
but I'm missing the aggregate.

253
00:09:47,220 --> 00:09:50,120
So in either of these many to many instances,

254
00:09:50,120 --> 00:09:53,060
I'm either getting an aggregate on one side

255
00:09:53,060 --> 00:09:55,180
or I'm losing context, right?

256
00:09:55,180 --> 00:09:58,460
So I'm not really finding a way to get us

257
00:09:58,460 --> 00:10:00,880
to where we really need to be.

258
00:10:01,240 --> 00:10:06,080
Okay, so how do we get to where we need to be?

259
00:10:06,080 --> 00:10:07,280
I'm really glad you asked that,

260
00:10:07,280 --> 00:10:09,560
because that's another one of the reasons we're here today.

261
00:10:09,560 --> 00:10:11,800
What we need is we need a new data structure.

262
00:10:11,800 --> 00:10:14,000
And the data structure that we're talking about now

263
00:10:14,000 --> 00:10:15,720
is using a graph.

264
00:10:15,720 --> 00:10:17,560
So in the graph, what we're looking at here

265
00:10:17,560 --> 00:10:20,240
is we're looking at the two circles, or what we call nodes,

266
00:10:20,240 --> 00:10:22,160
and the connection between the two of them

267
00:10:22,160 --> 00:10:24,240
is the edge or the relationship.

268
00:10:24,240 --> 00:10:26,440
Here we've got the entity of the person,

269
00:10:26,440 --> 00:10:28,540
which is the developer, and on the right-hand side,

270
00:10:28,540 --> 00:10:29,680
we have the language.

271
00:10:29,840 --> 00:10:31,600
And so in the graph database,

272
00:10:31,600 --> 00:10:33,880
what we do is we capture these entities

273
00:10:33,880 --> 00:10:36,560
and we capture the relationships.

274
00:10:36,560 --> 00:10:39,680
So I think this looks pretty good, don't you?

275
00:10:39,680 --> 00:10:41,080
Okay, I can follow this.

276
00:10:41,080 --> 00:10:41,920
Yeah.

277
00:10:43,760 --> 00:10:45,160
Still a one-to-one now, huh?

278
00:10:45,160 --> 00:10:47,440
Yeah, I don't see how that's any better than earlier.

279
00:10:47,440 --> 00:10:49,360
Yeah, that's not really helping us.

280
00:10:49,360 --> 00:10:51,720
All right, so let's get a little more detailed.

281
00:10:51,720 --> 00:10:54,920
We actually put the person on, we put on the language,

282
00:10:54,920 --> 00:10:57,160
but GrayLeader knows more than one language.

283
00:10:57,160 --> 00:10:59,960
So now what we have is we have,

284
00:10:59,960 --> 00:11:02,880
we can actually see the breakdown of the language

285
00:11:02,880 --> 00:11:05,640
as well as the developer itself.

286
00:11:05,640 --> 00:11:07,440
And so now we can definitely see

287
00:11:07,440 --> 00:11:09,680
that we've made some improvements.

288
00:11:09,680 --> 00:11:10,780
So how does this feel?

289
00:11:12,160 --> 00:11:13,880
I'm still not sold, still not sold.

290
00:11:13,880 --> 00:11:15,840
Yeah, you think it's because it's a one-to-many

291
00:11:15,840 --> 00:11:17,400
and we still are not many-to-many?

292
00:11:17,400 --> 00:11:20,520
You know, I can still get the list from, you know.

293
00:11:20,520 --> 00:11:24,560
Well, once the graph starts to expand,

294
00:11:24,600 --> 00:11:27,880
this is where the gold comes in for us.

295
00:11:27,880 --> 00:11:29,880
Because now what we can see is we can see

296
00:11:29,880 --> 00:11:31,680
we've got two different developers,

297
00:11:31,680 --> 00:11:34,920
we can see their relationships to each of the languages,

298
00:11:34,920 --> 00:11:37,100
and now we can even start to understand

299
00:11:37,100 --> 00:11:39,160
the impact of the language itself.

300
00:11:39,160 --> 00:11:42,020
In this particular instance, both of them know Python,

301
00:11:42,020 --> 00:11:44,080
so that starts to come to the fore

302
00:11:44,080 --> 00:11:46,800
as possibly being more important and more common.

303
00:11:46,800 --> 00:11:49,540
And again, it's a small set, but what it does

304
00:11:49,540 --> 00:11:52,960
is it allows us to really capture the many-to-many,

305
00:11:53,000 --> 00:11:55,480
and it allows us to see the forest

306
00:11:55,480 --> 00:11:57,820
and the trees at the same time.

307
00:11:58,760 --> 00:12:01,760
Okay, yeah, I mean, visually this looks great,

308
00:12:01,760 --> 00:12:03,820
but you know, what about, you know, this is just the skills.

309
00:12:03,820 --> 00:12:06,040
What about our other criteria?

310
00:12:06,040 --> 00:12:07,360
I'm glad you brought that up,

311
00:12:07,360 --> 00:12:10,280
because the great thing about the graph database

312
00:12:10,280 --> 00:12:12,360
is that we can bring in all different types

313
00:12:12,360 --> 00:12:13,480
of relationships.

314
00:12:13,480 --> 00:12:15,560
So for example, we were previously looking at

315
00:12:15,560 --> 00:12:17,120
the developer and the language.

316
00:12:17,120 --> 00:12:19,040
One of the criteria that was mentioned

317
00:12:19,040 --> 00:12:21,440
was who are this person's associates?

318
00:12:21,440 --> 00:12:23,680
What do we know about those associates?

319
00:12:23,680 --> 00:12:25,920
Which planet are they currently living on?

320
00:12:25,920 --> 00:12:30,320
And so what we do now is we take those many-to-many

321
00:12:30,320 --> 00:12:34,460
and we continue to expand in this basic data form.

322
00:12:34,460 --> 00:12:39,360
So now we can see one person may have similar associates.

323
00:12:39,360 --> 00:12:41,760
So similar to what we were having here,

324
00:12:41,760 --> 00:12:44,160
you can imagine how it then expands

325
00:12:44,160 --> 00:12:47,520
once we add more types of relationships.

326
00:12:47,520 --> 00:12:50,800
In this case, we see like a self-referencing edge

327
00:12:50,800 --> 00:12:53,800
on associate, because there could be multiple associates

328
00:12:53,800 --> 00:12:55,440
that are connected with each other.

329
00:12:55,440 --> 00:12:57,480
So sometimes you can have that as well.

330
00:12:57,480 --> 00:12:59,640
So that's another thing that you might see.

331
00:12:59,640 --> 00:13:00,480
Okay.

332
00:13:02,280 --> 00:13:04,640
But in the real world, is it ever as simple

333
00:13:04,640 --> 00:13:07,240
as it is in the toy example when you're learning Python?

334
00:13:07,240 --> 00:13:08,720
No, of course not.

335
00:13:08,720 --> 00:13:10,480
So in the real world, once we actually get

336
00:13:10,480 --> 00:13:13,800
all of our data loading in, it starts to look like this,

337
00:13:13,800 --> 00:13:16,800
where we've got all different kinds of systems

338
00:13:16,800 --> 00:13:19,200
and we've got characters and we have developers

339
00:13:19,200 --> 00:13:20,360
and we've got topics.

340
00:13:20,520 --> 00:13:22,760
And it gets very, very complex.

341
00:13:22,760 --> 00:13:24,960
So this is what the data starts to look like

342
00:13:24,960 --> 00:13:29,960
once we populate it past just a couple of gray leaders.

343
00:13:30,200 --> 00:13:31,040
So what do you think?

344
00:13:31,040 --> 00:13:33,000
That looks very complicated

345
00:13:33,000 --> 00:13:35,960
and a lot like our original sort of problem.

346
00:13:35,960 --> 00:13:40,320
Yeah, yeah, because many-to-many is complex, right?

347
00:13:40,320 --> 00:13:42,320
Well, you know what the best part is?

348
00:13:42,320 --> 00:13:46,080
What we really appreciate about the graph is the following,

349
00:13:46,080 --> 00:13:50,000
that we have an ability to capture the complexity,

350
00:13:50,040 --> 00:13:53,080
we have an ability to capture the forest and the trees,

351
00:13:53,080 --> 00:13:55,920
but in order to extract the information,

352
00:13:55,920 --> 00:13:58,840
the language that we use, cipher query,

353
00:13:58,840 --> 00:14:00,840
is actually very, very simple.

354
00:14:00,840 --> 00:14:02,760
So what you're gonna see here on the right,

355
00:14:02,760 --> 00:14:07,760
this is a call, and we see the word developer is in parens.

356
00:14:08,120 --> 00:14:09,560
Well, they're kind of curved,

357
00:14:09,560 --> 00:14:11,040
which looks a little bit like a node,

358
00:14:11,040 --> 00:14:12,960
so it makes it pretty easy, right?

359
00:14:12,960 --> 00:14:15,480
Then we have brackets around the relationship,

360
00:14:15,480 --> 00:14:16,600
which is nos.

361
00:14:16,600 --> 00:14:18,920
And then we have another node, language,

362
00:14:18,920 --> 00:14:20,480
and we have the parens.

363
00:14:20,480 --> 00:14:22,440
And so what I really like about cipher

364
00:14:22,440 --> 00:14:24,680
is it's very similar to Python,

365
00:14:24,680 --> 00:14:26,400
it's very easy when you read it

366
00:14:26,400 --> 00:14:28,720
to understand what am I asking.

367
00:14:28,720 --> 00:14:33,120
I'm asking, show me developers who know languages,

368
00:14:33,120 --> 00:14:36,120
and it's going to give you the return of all those nodes

369
00:14:36,120 --> 00:14:38,920
of where developers know languages.

370
00:14:38,920 --> 00:14:39,840
How's that?

371
00:14:39,840 --> 00:14:41,760
Okay, this makes sense to me.

372
00:14:41,760 --> 00:14:43,600
Like, I'm extrapolating from this,

373
00:14:43,600 --> 00:14:45,000
if I want information on associates,

374
00:14:45,000 --> 00:14:48,540
I'm just replacing nos with friend of, associate,

375
00:14:48,960 --> 00:14:51,400
developer from a system or a planet.

376
00:14:51,400 --> 00:14:52,240
Yeah.

377
00:14:52,240 --> 00:14:53,960
Okay, all right, I'm following that.

378
00:14:55,520 --> 00:14:59,140
But I do have a question about,

379
00:15:00,200 --> 00:15:01,960
like, oh, okay, so here's an example

380
00:15:01,960 --> 00:15:04,220
of pulling from a planet.

381
00:15:04,220 --> 00:15:07,480
Okay, so naturally my next sort of question is,

382
00:15:07,480 --> 00:15:08,320
this is great, right?

383
00:15:08,320 --> 00:15:09,160
Visually I understand this,

384
00:15:09,160 --> 00:15:11,700
so I got a query language that will return to me

385
00:15:11,700 --> 00:15:12,800
quite a bit of information,

386
00:15:12,800 --> 00:15:17,200
but do I need to work with the information as a graph?

387
00:15:17,200 --> 00:15:18,160
Like, I really don't want a graph,

388
00:15:18,160 --> 00:15:19,160
I just want like a list of stuff.

389
00:15:19,160 --> 00:15:21,200
No, and that's the other thing,

390
00:15:21,200 --> 00:15:23,720
is as we showed you before,

391
00:15:23,720 --> 00:15:26,200
the graph, the visualization of the graph itself

392
00:15:26,200 --> 00:15:28,560
is very hard for the human to interpret

393
00:15:28,560 --> 00:15:30,240
because it is so large,

394
00:15:30,240 --> 00:15:34,360
and so what we have within the graph network

395
00:15:34,360 --> 00:15:37,480
is we have the ability to actually return, say, a list.

396
00:15:37,480 --> 00:15:41,000
So in this particular query, we do match.

397
00:15:41,000 --> 00:15:44,320
So match basically says, collect these pieces.

398
00:15:44,320 --> 00:15:46,280
So collect all the developers

399
00:15:46,320 --> 00:15:48,640
who are friends of an associate.

400
00:15:48,640 --> 00:15:51,280
Then, similar to in a SQL query,

401
00:15:51,280 --> 00:15:53,040
we're just gonna refine it a little bit,

402
00:15:53,040 --> 00:15:54,700
and we want to do some math.

403
00:15:54,700 --> 00:15:57,040
So in this case, we haven't shown it here,

404
00:15:57,040 --> 00:15:58,520
but for each of these nodes,

405
00:15:58,520 --> 00:16:01,220
you can have properties that live within them.

406
00:16:01,220 --> 00:16:03,320
So in our case, in what we've built,

407
00:16:03,320 --> 00:16:05,800
we have an associate, and each associate

408
00:16:05,800 --> 00:16:08,960
has a rebel affinity calculation,

409
00:16:08,960 --> 00:16:10,920
and so what we want is we say,

410
00:16:10,920 --> 00:16:12,800
okay, give me all the developers

411
00:16:12,800 --> 00:16:14,760
who have friends who are associates,

412
00:16:14,760 --> 00:16:18,240
but I want to know what is the average rebel affinity

413
00:16:18,240 --> 00:16:20,160
of all of their friends.

414
00:16:20,160 --> 00:16:21,940
You want to know me, know my friends.

415
00:16:21,940 --> 00:16:23,800
So we're looking at their network

416
00:16:23,800 --> 00:16:27,120
to give us an understanding of how likely are they

417
00:16:27,120 --> 00:16:29,840
to actually be sympathetic to the rebel cause,

418
00:16:29,840 --> 00:16:32,400
but what it returns is it just returns

419
00:16:32,400 --> 00:16:34,400
a list of developers, and it says,

420
00:16:34,400 --> 00:16:36,320
okay, these are all the developers

421
00:16:36,320 --> 00:16:38,360
where the average rebel affinity

422
00:16:38,360 --> 00:16:41,920
of everyone in their network is over 0.5.

423
00:16:41,920 --> 00:16:44,480
So you're gonna get a list back from this one, Jason.

424
00:16:44,480 --> 00:16:45,440
Okay, great.

425
00:16:45,440 --> 00:16:47,480
Okay, so I went and looked at the APIs,

426
00:16:47,480 --> 00:16:49,200
and so when I do a call like this,

427
00:16:49,200 --> 00:16:51,720
I get basically JSON objects for each of these developers.

428
00:16:51,720 --> 00:16:53,440
Great, I can work with JSON objects.

429
00:16:53,440 --> 00:16:55,120
Okay, so from basically this,

430
00:16:55,120 --> 00:16:59,720
I've gone ahead and kind of built out a dashboard

431
00:16:59,720 --> 00:17:02,240
that shows data from all the developers

432
00:17:02,240 --> 00:17:03,880
that have kind of signed on here.

433
00:17:03,880 --> 00:17:05,320
All right, so put this QR code

434
00:17:05,320 --> 00:17:07,640
if you wanted to jump to this dashboard

435
00:17:07,640 --> 00:17:09,240
and play around with it directly.

436
00:17:09,240 --> 00:17:11,840
Otherwise, what I'll do here is bring it up,

437
00:17:12,240 --> 00:17:17,240
and I'm gonna fill out all my test data, hopefully.

438
00:17:18,240 --> 00:17:20,440
Oh, yeah, let me do this from yesterday.

439
00:17:22,240 --> 00:17:25,240
Okay, all right, so let me start with this.

440
00:17:25,240 --> 00:17:26,560
So first when I did this,

441
00:17:26,560 --> 00:17:28,920
I was creating sort of this manual search rubric, right?

442
00:17:28,920 --> 00:17:31,200
So if I've got my rebel planet,

443
00:17:31,200 --> 00:17:36,200
which I have a randomizer or a secret code system

444
00:17:36,520 --> 00:17:38,520
that tells me where the base is,

445
00:17:38,520 --> 00:17:41,640
and so the base right now is in DL,

446
00:17:42,440 --> 00:17:44,520
D-car, I can't pronounce that one.

447
00:17:44,520 --> 00:17:47,440
Okay, D-car, and so I put some of the basic data

448
00:17:47,440 --> 00:17:49,520
from those cipher calls that you kind of showed.

449
00:17:49,520 --> 00:17:52,040
So I have a count of everyone who knows

450
00:17:52,040 --> 00:17:53,000
our top languages, right?

451
00:17:53,000 --> 00:17:55,720
So Python, 69 developers know Python, et cetera,

452
00:17:55,720 --> 00:17:56,840
put this into a table.

453
00:17:58,040 --> 00:18:01,440
And now I've got this sort of dynamic search system

454
00:18:01,440 --> 00:18:06,120
so I can figure out, okay, so if our base is here in,

455
00:18:06,120 --> 00:18:08,040
let's change this to D-car,

456
00:18:08,440 --> 00:18:13,440
and if I wanna limit our jumps to 32 hyperspace jumps away,

457
00:18:16,840 --> 00:18:20,040
and maybe at least somebody who's kind of neutral,

458
00:18:20,040 --> 00:18:23,880
find me all the developers that match this.

459
00:18:23,880 --> 00:18:24,720
And-

460
00:18:24,720 --> 00:18:26,120
I think D-car might be too far away.

461
00:18:26,120 --> 00:18:28,600
And unfortunately, yes, so here,

462
00:18:28,600 --> 00:18:30,080
and I was playing around with this,

463
00:18:30,080 --> 00:18:32,000
and so it takes me a while to figure out

464
00:18:32,000 --> 00:18:35,240
what sort of distance people should be and whatnot

465
00:18:35,240 --> 00:18:38,600
to really find a good cluster of developers.

466
00:18:38,600 --> 00:18:41,080
Well, fortunately, I did a little more digging

467
00:18:41,080 --> 00:18:44,160
and basically just changed my queries

468
00:18:44,160 --> 00:18:48,360
to basically take these languages,

469
00:18:48,360 --> 00:18:50,360
assuming that we want a team that uses

470
00:18:50,360 --> 00:18:51,720
the top three languages,

471
00:18:51,720 --> 00:18:55,200
and somewhere near, oh, our base has moved to Yavin.

472
00:18:55,200 --> 00:18:57,840
So I created this auto-ranking system

473
00:18:57,840 --> 00:19:01,200
that just basically points according to this rubric,

474
00:19:01,200 --> 00:19:03,560
gives people points for how close they are,

475
00:19:03,560 --> 00:19:06,680
how many languages they have that meets our needs, et cetera,

476
00:19:06,680 --> 00:19:10,960
and now I've got this self-ranking system to tell me

477
00:19:10,960 --> 00:19:14,400
which of our developers we should task with our team.

478
00:19:14,400 --> 00:19:16,160
Codosaurus is leading the pack.

479
00:19:16,160 --> 00:19:19,240
Yes, I farmed with 45 points.

480
00:19:19,240 --> 00:19:20,680
Yeah, this guy's killing it.

481
00:19:20,680 --> 00:19:21,520
Yeah.

482
00:19:21,520 --> 00:19:22,360
Awesome, coolness.

483
00:19:22,360 --> 00:19:24,840
Okay, so, great.

484
00:19:24,840 --> 00:19:26,400
So now we have our developers.

485
00:19:26,400 --> 00:19:27,240
Right.

486
00:19:27,240 --> 00:19:30,160
So now we know, I'm not sure how many you put in your team.

487
00:19:30,160 --> 00:19:31,680
Put three in your team, right?

488
00:19:31,680 --> 00:19:33,120
Yeah, I think we got three in your team.

489
00:19:33,120 --> 00:19:34,960
So you've got your team.

490
00:19:34,960 --> 00:19:38,400
You're ready to actually build the ways for galactic space.

491
00:19:38,400 --> 00:19:39,240
All right.

492
00:19:39,240 --> 00:19:41,360
All right, show me what you got.

493
00:19:41,360 --> 00:19:46,120
Okay, so I'm kind of still at the same point that I started.

494
00:19:46,120 --> 00:19:50,160
Right, so I've got this data,

495
00:19:50,160 --> 00:19:55,120
and even if I'm kind of like scanning through SDW Galaxy Map,

496
00:19:55,120 --> 00:19:58,120
okay, this data's good, the data I have is good.

497
00:19:58,120 --> 00:20:00,640
I've got three crack developers with me.

498
00:20:00,640 --> 00:20:05,440
I'm still not entirely sure where I should start.

499
00:20:05,440 --> 00:20:08,000
Well, let's start with the information that you have.

500
00:20:08,000 --> 00:20:10,080
Right? You put together a nice little table.

501
00:20:10,080 --> 00:20:14,440
Right? So let's take a look at, wait, where are we?

502
00:20:14,440 --> 00:20:16,040
Yeah. Back over here?

503
00:20:16,040 --> 00:20:18,960
Yeah. All right.

504
00:20:18,960 --> 00:20:21,840
So let's go take a look at the data that we have.

505
00:20:21,840 --> 00:20:25,960
So one of the things that we see here in the data

506
00:20:25,960 --> 00:20:28,880
on this right-hand side is whether or not this,

507
00:20:28,880 --> 00:20:32,360
any of these particular planets are on a hyperdrive lane.

508
00:20:32,360 --> 00:20:35,440
Because obviously, if you can take the interstate, you could.

509
00:20:35,440 --> 00:20:39,000
Right? So the question becomes, if we've got it in this table,

510
00:20:39,000 --> 00:20:42,000
when you're actually in Python, how are you going to use it?

511
00:20:42,000 --> 00:20:43,600
What do you think?

512
00:20:43,600 --> 00:20:48,000
Well, I guess I'd start with the brute force approach.

513
00:20:48,000 --> 00:20:50,120
I would come up with lots of functions

514
00:20:50,120 --> 00:20:54,360
to basically stitch together that path from one system to another.

515
00:20:54,360 --> 00:20:56,360
Yeah. So that's what you've got here, right?

516
00:20:56,360 --> 00:20:58,320
Your hyperdrive lanes, you've got a key,

517
00:20:58,320 --> 00:21:01,400
which is the run, and then you've got an ordered list

518
00:21:01,400 --> 00:21:03,920
of each of the planets in the run.

519
00:21:03,920 --> 00:21:06,000
Okay. Yeah. That seems, that's a good start.

520
00:21:06,000 --> 00:21:09,040
Okay. That's one way of going about it.

521
00:21:09,040 --> 00:21:12,120
And Jason, if you're using that sort of a structure,

522
00:21:12,120 --> 00:21:16,440
what does the actual code look like to use that structure to build a path?

523
00:21:16,440 --> 00:21:17,440
It would look something like this.

524
00:21:17,440 --> 00:21:19,520
You know, I'd probably have a few functions and spread it out.

525
00:21:19,520 --> 00:21:24,600
But, you know, basically, I'd, you know, stitch it together with functions.

526
00:21:24,640 --> 00:21:28,480
And how much is actually covered by the code that you have here?

527
00:21:28,480 --> 00:21:30,280
A small chunk of it.

528
00:21:30,280 --> 00:21:32,160
Yeah. Very, very small.

529
00:21:32,160 --> 00:21:37,200
So when you imagine what the nested if-then statements are going to be

530
00:21:37,200 --> 00:21:42,360
that you're going to have to put together to use a static dictionary

531
00:21:42,360 --> 00:21:46,760
to get from any place in the galaxy to any other place in the galaxy,

532
00:21:46,760 --> 00:21:48,360
it's not going to be easy.

533
00:21:48,360 --> 00:21:50,720
Because you have to think of all the use cases, right?

534
00:21:50,720 --> 00:21:52,840
And you've got to think about your edge cases, and you've got

535
00:21:52,880 --> 00:21:56,640
to make sure that all those things are there, right?

536
00:21:56,640 --> 00:21:59,760
How are you feeling about having, about this being the task for you

537
00:21:59,760 --> 00:22:01,040
and your team?

538
00:22:01,040 --> 00:22:04,480
Well, this is why I have three crack developers to help with all this.

539
00:22:04,480 --> 00:22:06,600
Right? We're so glad you guys are here.

540
00:22:06,600 --> 00:22:08,520
Codosaurus, we appreciate you.

541
00:22:08,520 --> 00:22:09,840
So here's the thing.

542
00:22:09,840 --> 00:22:12,200
Let's go back to the beginning, and let's think about this.

543
00:22:12,200 --> 00:22:14,640
So let's go back to the actual problem.

544
00:22:14,640 --> 00:22:17,720
So whenever you get into this, I mean, it's all,

545
00:22:17,720 --> 00:22:19,040
it's happened to everybody, right?

546
00:22:19,480 --> 00:22:21,800
So let's say you're in the middle of a problem.

547
00:22:21,800 --> 00:22:24,120
And you're thinking, well, what if I just go back into some, like,

548
00:22:24,120 --> 00:22:28,480
weird mind-numbingly nested scenario where you're like, please,

549
00:22:28,480 --> 00:22:29,800
God save me?

550
00:22:29,800 --> 00:22:32,200
And sometimes it's a good idea to just go back

551
00:22:32,200 --> 00:22:36,320
and actually reevaluate the problem and say, let me look at this again

552
00:22:36,320 --> 00:22:38,600
and find out if there's a better way to do it.

553
00:22:38,600 --> 00:22:39,840
So what do you think?

554
00:22:39,840 --> 00:22:41,120
What have you got, Jason?

555
00:22:41,120 --> 00:22:45,680
Well, you know, this, you know, visualizes the plot

556
00:22:45,680 --> 00:22:47,000
in all the functions I'd have to do, right?

557
00:22:47,000 --> 00:22:50,520
So I'm just going to work the table and find what system's connected

558
00:22:50,520 --> 00:22:53,640
to which one and sort of tally up each course

559
00:22:53,640 --> 00:22:55,680
and pick the course that's smallest.

560
00:22:55,680 --> 00:22:57,160
Yeah.

561
00:22:57,160 --> 00:22:59,000
You know, Jason, I have a question for you.

562
00:22:59,000 --> 00:23:02,600
There's something that feels very familiar about this graphic

563
00:23:02,600 --> 00:23:04,200
we're looking at right now.

564
00:23:04,200 --> 00:23:08,120
Does it look like anything we've seen before today?

565
00:23:08,120 --> 00:23:10,160
It looks a lot like a graph.

566
00:23:10,160 --> 00:23:11,880
It sure does, doesn't it?

567
00:23:11,880 --> 00:23:13,560
Amazing.

568
00:23:13,560 --> 00:23:16,280
So the question then becomes, is there

569
00:23:16,360 --> 00:23:20,680
a way that we can use the graph we already have to solve Jason

570
00:23:20,680 --> 00:23:23,840
and the developer's team path problem?

571
00:23:23,840 --> 00:23:26,160
Well, again, we talked about this before,

572
00:23:26,160 --> 00:23:28,520
that we can expand the database that we have.

573
00:23:28,520 --> 00:23:32,320
So in this case, what we can do is we can, we are using the systems

574
00:23:32,320 --> 00:23:35,840
that were already there, but we're creating new relationships.

575
00:23:35,840 --> 00:23:39,200
So in this case, on the left-hand side, connected to means

576
00:23:39,200 --> 00:23:42,760
that these two planets are connected one next to the other

577
00:23:42,760 --> 00:23:44,480
on a hyperdrive lane.

578
00:23:44,520 --> 00:23:48,960
And then we also have for any planet that's not on a hyperdrive lane,

579
00:23:48,960 --> 00:23:51,600
we've created something called a near relationship.

580
00:23:51,600 --> 00:23:56,040
And what it is is it says, which hyperdrive planet

581
00:23:56,040 --> 00:23:58,760
is closest to the system?

582
00:23:58,760 --> 00:24:03,880
And so here, now we have all of the planets are connected together.

583
00:24:03,880 --> 00:24:06,880
We have them in this very simple format.

584
00:24:06,880 --> 00:24:10,600
And we have a way that we can now look at those paths

585
00:24:10,600 --> 00:24:12,960
within the graph setting.

586
00:24:13,000 --> 00:24:14,600
What do you think of that?

587
00:24:14,600 --> 00:24:15,920
That looks very promising.

588
00:24:15,920 --> 00:24:16,800
All right.

589
00:24:16,800 --> 00:24:20,240
And the best part about this is now you can actually,

590
00:24:20,240 --> 00:24:23,720
instead of having to run miles and thousands of lines

591
00:24:23,720 --> 00:24:27,640
of if-else statements for code, I'll let you,

592
00:24:27,640 --> 00:24:29,520
you got to click to the next one.

593
00:24:29,520 --> 00:24:31,880
Okay. So, went through the APIs again.

594
00:24:31,880 --> 00:24:36,360
And lo and behold, there is a shortest path function

595
00:24:36,360 --> 00:24:41,160
that will take in any sort of pattern, right?

596
00:24:41,200 --> 00:24:43,120
And I can just stick the pattern in there,

597
00:24:43,120 --> 00:24:47,760
and it will return to me a list of nodes that plots the course.

598
00:24:47,760 --> 00:24:49,160
That's the actual path.

599
00:24:49,160 --> 00:24:52,520
And again, what I love about this is just how straightforward it is.

600
00:24:52,520 --> 00:24:56,040
Because I probably, has anybody here ever worked with Cypher before?

601
00:24:57,200 --> 00:24:58,320
All right. We have one.

602
00:24:58,320 --> 00:24:59,520
So nobody else has.

603
00:24:59,520 --> 00:25:01,720
But even just reading this, you can see, okay,

604
00:25:01,720 --> 00:25:03,960
I'm going to match this start system.

605
00:25:03,960 --> 00:25:06,120
I'm going to match it to this end system.

606
00:25:06,120 --> 00:25:10,440
And then I want the path to be the shortest from the start to the end.

607
00:25:10,480 --> 00:25:14,360
And this little bit in the middle says it can either be connected to or near.

608
00:25:14,360 --> 00:25:16,400
And then return the path.

609
00:25:16,400 --> 00:25:20,920
So the other thing that's great about Cypher is that the learning curve

610
00:25:20,920 --> 00:25:24,440
on the syntax is actually really straightforward.

611
00:25:24,440 --> 00:25:28,120
And so not only do you get the power of the data structure,

612
00:25:28,120 --> 00:25:30,800
but you have all your natural computer science logic

613
00:25:30,800 --> 00:25:32,920
that you're going to run on the code itself.

614
00:25:32,920 --> 00:25:36,440
And so this right here, and it makes it super simple.

615
00:25:36,440 --> 00:25:40,000
Instead of all your crazy if-thens, because there may be a circumstance

616
00:25:40,000 --> 00:25:43,720
where you want to alter this somehow.

617
00:25:43,720 --> 00:25:48,720
Right? Can you think of an instance where we might not want

618
00:25:48,720 --> 00:25:51,840
to go to a particular planet?

619
00:25:51,840 --> 00:25:56,680
You know, to avoid maybe Darth Vader or wherever the Imperial fleet is.

620
00:25:56,680 --> 00:25:58,320
Right. So, okay.

621
00:25:58,320 --> 00:26:01,960
If we go back to the end of Rogue One, maybe if they had put

622
00:26:01,960 --> 00:26:04,120
in a different path they wouldn't have ended up on tattooing

623
00:26:04,120 --> 00:26:05,440
in the first place.

624
00:26:05,440 --> 00:26:06,720
Just saying.

625
00:26:06,720 --> 00:26:08,040
Right. They had a better navigation app.

626
00:26:08,040 --> 00:26:09,320
All right.

627
00:26:09,840 --> 00:26:14,000
So I took that query that you gave us, and the EPIs that I found,

628
00:26:14,000 --> 00:26:16,960
and I put up a quick streamlit app

629
00:26:16,960 --> 00:26:20,400
for navigating the Star Wars galaxy.

630
00:26:20,400 --> 00:26:22,960
Right. So again, another QR code if you wanted to play

631
00:26:22,960 --> 00:26:25,680
around with this app that's available now.

632
00:26:25,680 --> 00:26:30,400
But otherwise I will show this to you.

633
00:26:30,400 --> 00:26:34,360
So here. So now we can see from Scarif to Alderaan.

634
00:26:34,360 --> 00:26:35,640
All right.

635
00:26:35,640 --> 00:26:36,920
Oh, I guess let me talk about this.

636
00:26:36,920 --> 00:26:40,560
So map plot live because, you know,

637
00:26:40,560 --> 00:26:43,600
mainstay of our environment.

638
00:26:43,600 --> 00:26:45,440
I don't know.

639
00:26:45,440 --> 00:26:47,800
It took quite a bit of work to make even just this.

640
00:26:47,800 --> 00:26:52,000
But anyways, long story short, here are all the systems

641
00:26:52,000 --> 00:26:53,280
that we have data for.

642
00:26:53,280 --> 00:26:57,600
All the gray dots are systems that are off hyperspace lanes.

643
00:26:57,600 --> 00:26:59,760
Some of them actually are on hyperspace lanes,

644
00:26:59,760 --> 00:27:01,960
but in creating this data set.

645
00:27:01,960 --> 00:27:06,240
So we had coordinates, and we knew which hyperspace lanes they were on.

646
00:27:06,240 --> 00:27:07,560
But we had no connective tissue.

647
00:27:07,560 --> 00:27:11,400
There was no table saying this system is connected to another system.

648
00:27:11,400 --> 00:27:16,560
So I spent the last month looking at that galaxy map, seeing two lines,

649
00:27:16,560 --> 00:27:18,600
and then creating the other table.

650
00:27:18,600 --> 00:27:23,640
So anyways, blue planets, hyperspace lanes, gray, off lane,

651
00:27:23,640 --> 00:27:27,680
and white ones are kind of like the important planets.

652
00:27:27,680 --> 00:27:29,960
Okay. So now let's play around with this.

653
00:27:29,960 --> 00:27:32,800
So if I want to find this route between Scarif and Alderaan,

654
00:27:32,800 --> 00:27:35,320
does it include Tatooine?

655
00:27:36,320 --> 00:27:37,200
That is the question.

656
00:27:37,200 --> 00:27:40,480
That is the question that has been on my mind for two days.

657
00:27:40,480 --> 00:27:44,240
Okay. So here we've got a full course plot.

658
00:27:44,240 --> 00:27:48,120
Sadly, I have not figured out how to make map plot lib interactive in Streamlib.

659
00:27:48,120 --> 00:27:50,520
But we can see here I've got this course plot that came

660
00:27:50,520 --> 00:27:52,920
from the shortest path calculation.

661
00:27:52,920 --> 00:27:57,520
And looking here, I can see that Tatooine is not on this list.

662
00:27:57,520 --> 00:28:02,000
So the Princess had gone, or the pilot of the ship had gone,

663
00:28:02,000 --> 00:28:03,440
slightly a different route.

664
00:28:03,440 --> 00:28:05,920
I'm like, I'm kind of wondering, like, what route did they take?

665
00:28:06,400 --> 00:28:12,480
So looking at, again, this map, we can see that Scarif is over here.

666
00:28:12,480 --> 00:28:14,320
Tatooine is here.

667
00:28:14,320 --> 00:28:15,760
And Alderaan is over here.

668
00:28:15,760 --> 00:28:18,640
So just looking at this map, you can probably tell, like, oh, okay.

669
00:28:18,640 --> 00:28:21,480
They probably, the fastest route would be this direction, right?

670
00:28:21,480 --> 00:28:25,000
So for some reason, they did not go this direction.

671
00:28:25,000 --> 00:28:26,640
So, all right.

672
00:28:26,640 --> 00:28:29,880
Let me exclude Manda here.

673
00:28:29,880 --> 00:28:31,200
All right.

674
00:28:31,200 --> 00:28:32,880
Let's assume that there's an imperial presence on Manda.

675
00:28:32,880 --> 00:28:34,880
Manda? Manda.

676
00:28:34,920 --> 00:28:37,200
And I got to avoid it, right?

677
00:28:39,200 --> 00:28:41,480
So the number of jumps only went up one.

678
00:28:41,480 --> 00:28:43,120
So one from 39 to 40.

679
00:28:43,120 --> 00:28:45,160
But I can see from this list that Tatooine is still not on this list.

680
00:28:45,160 --> 00:28:48,760
I'm like, where, how are they getting, how are they getting to Tatooine?

681
00:28:48,760 --> 00:28:51,200
So I look at this map a little bit more, and it's like, okay.

682
00:28:51,200 --> 00:28:55,000
So this route takes them this way, just skirts over Tatooine.

683
00:28:55,000 --> 00:28:57,080
So that must mean that one of these systems

684
00:28:57,080 --> 00:29:00,400
on this upper skirt also has an imperial presence.

685
00:29:00,400 --> 00:29:03,840
So let's just put Malarian in there.

686
00:29:03,840 --> 00:29:06,840
So I'll put Malarian.

687
00:29:06,840 --> 00:29:09,200
Then Malarian.

688
00:29:09,200 --> 00:29:11,000
Plot this course.

689
00:29:12,400 --> 00:29:18,320
And here, I can see that Tatooine is on this course.

690
00:29:18,320 --> 00:29:19,640
All right.

691
00:29:19,640 --> 00:29:22,840
So this is one possible course that that ship was trying to do,

692
00:29:22,840 --> 00:29:27,160
was trying to evade or just happened to want to not go to those systems.

693
00:29:27,160 --> 00:29:30,040
And this is one possible plot course that they were going for.

694
00:29:30,040 --> 00:29:32,400
Okay. Yeah?

695
00:29:32,440 --> 00:29:33,440
I look good.

696
00:29:33,440 --> 00:29:36,200
I was happy I could do this with basically a single cipher call.

697
00:29:36,200 --> 00:29:41,520
And I'm just displaying that data from that one call in different ways,

698
00:29:41,520 --> 00:29:43,000
right here for the map.

699
00:29:43,000 --> 00:29:49,280
So this, the same cipher call is powering both the map and that table.

700
00:29:49,280 --> 00:29:50,680
And also the number of jumps.

701
00:29:50,680 --> 00:29:52,080
So, okay.

702
00:29:52,080 --> 00:29:57,800
So that's, so we have, we basically have our hyperspace navigator.

703
00:29:57,800 --> 00:30:00,400
Yeah. That's a good thing Codosaurus was here.

704
00:30:00,440 --> 00:30:02,720
Yes.

705
00:30:02,720 --> 00:30:07,880
So to Jason's point, what we're seeing now is that the cipher query

706
00:30:07,880 --> 00:30:11,760
that he had, all he's done is he's just added in this extra line here

707
00:30:11,760 --> 00:30:16,200
in green that allows him to put in planets to say avoid these planets.

708
00:30:16,200 --> 00:30:20,000
So when we avoid these planets, we're still getting back that path.

709
00:30:20,000 --> 00:30:23,480
And the way that the path is fed back, as Jason mentioned, is in a JSON.

710
00:30:23,480 --> 00:30:28,240
So whether you use that to plot it in map plot lib like he did up top

711
00:30:28,280 --> 00:30:33,320
or to return it in the table format, even though something lives in graph,

712
00:30:33,320 --> 00:30:35,880
it doesn't have to be returned as a graph.

713
00:30:35,880 --> 00:30:38,440
You can leverage it any way you need.

714
00:30:38,440 --> 00:30:42,480
But what I love about this is it's just so much easier to edit

715
00:30:42,480 --> 00:30:46,680
than if we had actually hard coded all those if then statements for sure.

716
00:30:46,680 --> 00:30:51,600
Yeah. That's what I really like about playing with cipher is I can basically

717
00:30:51,600 --> 00:30:54,800
add one or two lines in the query and get kind

718
00:30:54,800 --> 00:31:00,240
of a radically different data set that I can just pull in and use it differently.

719
00:31:00,240 --> 00:31:02,000
But I don't have to create.

720
00:31:02,000 --> 00:31:06,600
I'm just using one model for systems, one model for developers.

721
00:31:06,600 --> 00:31:11,360
And just by changing the query, I get different answers that quickly solve.

722
00:31:11,360 --> 00:31:15,280
So I'm really looking forward to actually adding more to this hyperspace lane

723
00:31:15,280 --> 00:31:17,880
because this has been such an easy process to do.

724
00:31:17,880 --> 00:31:20,240
Suggestions or requests? You let us know.

725
00:31:20,240 --> 00:31:23,800
So one of the things that I really just want to take a second to point out is

726
00:31:23,800 --> 00:31:26,840
that how do you know if you have a graph problem?

727
00:31:26,840 --> 00:31:30,240
When you're sitting at your desk and you're coding, how do you know

728
00:31:30,240 --> 00:31:33,400
that maybe there's another way that you can approach this?

729
00:31:33,400 --> 00:31:37,640
If you find you have many to many relationships,

730
00:31:37,640 --> 00:31:42,000
there's probably a way you can do it in graph more simply and elegantly.

731
00:31:42,000 --> 00:31:45,000
If you've got the nested if statements like we talked about,

732
00:31:45,000 --> 00:31:48,320
that's another opportunity for you to say, hey,

733
00:31:48,320 --> 00:31:50,520
is there a different way that I can do this?

734
00:31:50,520 --> 00:31:53,360
Whenever you're struggling with the data structures,

735
00:31:53,360 --> 00:31:56,600
what's the right data structure? Is this aggregating the right way?

736
00:31:56,600 --> 00:31:58,720
Any of those kinds of blockers that you have?

737
00:31:58,720 --> 00:32:02,680
Anybody had that problem before where you're struggling with if-thens

738
00:32:02,680 --> 00:32:05,000
or you don't know what the right data structure is?

739
00:32:05,000 --> 00:32:07,920
Yeah, I see the nods. Yeah. Well, good news.

740
00:32:07,920 --> 00:32:11,760
You now have something new to try that can make your life much easier

741
00:32:11,760 --> 00:32:15,280
because ultimately we want our code to be simple and elegant.

742
00:32:15,280 --> 00:32:17,480
We want it to be easy to maintain.

743
00:32:17,480 --> 00:32:21,080
We don't want to get lost in all of this nuance.

744
00:32:21,080 --> 00:32:23,200
I mean, I hate getting lost in my own code.

745
00:32:23,200 --> 00:32:25,680
I'm like, wait, which indent am I on right now?

746
00:32:25,680 --> 00:32:30,680
So what we really want you to take from this is this opportunity to say,

747
00:32:30,680 --> 00:32:34,440
if I'm in one of these ugly sort of messes,

748
00:32:34,440 --> 00:32:39,920
is there a way that graph can help me get through what we're looking at here?

749
00:32:39,920 --> 00:32:45,240
What about you? Any other code smell that brings you to graph, Jason?

750
00:32:45,240 --> 00:32:46,800
I don't know about codes.

751
00:32:46,800 --> 00:32:51,040
Well, so in the process of building these demo apps,

752
00:32:51,040 --> 00:32:57,240
again, the flexibility of Cypher and the flexibility under the hood

753
00:32:57,240 --> 00:33:00,880
of just connecting new relationships to existing nodes

754
00:33:00,880 --> 00:33:03,960
gave me access to lots of new data.

755
00:33:03,960 --> 00:33:08,600
So I love that I didn't have to spin up multiple databases or spin up new tables.

756
00:33:08,600 --> 00:33:13,360
I had one graph database and I just changing labels for

757
00:33:13,360 --> 00:33:16,480
nodes and adding relationships to those nodes and that

758
00:33:16,720 --> 00:33:20,960
kind of multiplied the number of options I had every time I did this.

759
00:33:20,960 --> 00:33:23,360
So that process was a lot of fun.

760
00:33:23,360 --> 00:33:26,240
The graph is very visually,

761
00:33:26,240 --> 00:33:29,000
I get it, connecting the dots super easy.

762
00:33:29,000 --> 00:33:33,920
Then once I realized that you can pull single pieces of information and lists

763
00:33:33,920 --> 00:33:36,760
of data and dictionaries of data from that graph,

764
00:33:36,760 --> 00:33:39,400
I don't have to work in the graph all the time.

765
00:33:39,400 --> 00:33:42,040
That was a game changer.

766
00:33:42,040 --> 00:33:43,800
I have one last question for you, Jason.

767
00:33:43,800 --> 00:33:47,520
How hard is it to get your data into a graph?

768
00:33:47,520 --> 00:33:49,560
It wasn't that hard at all.

769
00:33:49,560 --> 00:33:53,680
So there are a couple of options for importing data into Neo4j.

770
00:33:53,680 --> 00:33:56,960
The one that I found easiest was using data importer.

771
00:33:56,960 --> 00:33:58,360
I guess I'll have to pull this up.

772
00:33:58,360 --> 00:34:01,960
So data importer basically is a kind of a whizzy way thing.

773
00:34:01,960 --> 00:34:07,000
So I can just drop in any CSV and then I can create my data model,

774
00:34:07,000 --> 00:34:08,760
like all those circles and lines,

775
00:34:08,760 --> 00:34:11,560
and I could just basically graphically put that up very quickly.

776
00:34:11,560 --> 00:34:17,360
Then I just notate which of the rows and the columns and whatnot go to which property,

777
00:34:17,360 --> 00:34:20,080
which node, and then I just click Import.

778
00:34:20,080 --> 00:34:24,280
It'll generate a bunch of cipher and run the cipher under the hood and do the import.

779
00:34:24,280 --> 00:34:26,160
Now, I could have done this myself.

780
00:34:26,160 --> 00:34:27,600
Now that I know how to do cipher,

781
00:34:27,600 --> 00:34:30,000
I can write that import code.

782
00:34:30,000 --> 00:34:33,240
But doing it in data importer was very,

783
00:34:33,240 --> 00:34:35,720
I thought very flexible, it was very quick to do.

784
00:34:35,720 --> 00:34:40,120
You know what? Why don't I bring that up since I think we're well ahead of time here.

785
00:34:40,120 --> 00:34:47,080
That's the one thing that I want everybody to get is that it's not a big lift.

786
00:34:47,080 --> 00:34:49,440
We're looking at a new data structure.

787
00:34:49,440 --> 00:34:51,760
We're looking at possibly some new tools,

788
00:34:51,760 --> 00:34:57,840
but it's not a big technical lift for something to pick up that can be really powerful.

789
00:34:57,840 --> 00:35:02,320
At Neo4j, we have free databases that you can pull up,

790
00:35:02,320 --> 00:35:05,600
that you can spin up on your own that are free and will be free.

791
00:35:05,600 --> 00:35:06,960
I think there's a size limit on them,

792
00:35:06,960 --> 00:35:09,400
but they cover a lot of use cases.

793
00:35:09,440 --> 00:35:13,680
The onboarding into the graph universe,

794
00:35:13,680 --> 00:35:16,360
it's not a heavy lift.

795
00:35:16,360 --> 00:35:19,520
Definitely look to this as an opportunity for

796
00:35:19,520 --> 00:35:23,600
those moments to really smooth things out for yourselves as well.

797
00:35:23,600 --> 00:35:27,120
Jason's showing you the data importer now.

798
00:35:27,120 --> 00:35:28,880
In a production setting,

799
00:35:28,880 --> 00:35:33,800
I would definitely want to script out a better way of pulling in data live.

800
00:35:33,800 --> 00:35:36,400
But when just experimenting, this was super useful.

801
00:35:36,400 --> 00:35:38,520
I threw in three CSV files.

802
00:35:38,520 --> 00:35:40,280
One for all our planets,

803
00:35:40,280 --> 00:35:41,560
the connections between them,

804
00:35:41,560 --> 00:35:45,400
and then the nearest planets for those that were off the hyperspace line.

805
00:35:45,400 --> 00:35:46,920
I've got this data in here.

806
00:35:46,920 --> 00:35:48,200
I can just start creating nodes.

807
00:35:48,200 --> 00:35:52,920
I can put in system is connected to another system.

808
00:35:52,920 --> 00:35:57,600
Here, I'm just going to notate which file I'm going to pull this data from,

809
00:35:57,600 --> 00:36:00,800
and then what information from that file.

810
00:36:00,800 --> 00:36:02,880
I want the name of the planet.

811
00:36:02,880 --> 00:36:04,560
XY coordinates would be great.

812
00:36:04,560 --> 00:36:08,480
I'll need that later. Region and sector, why not?

813
00:36:08,480 --> 00:36:12,560
A link in case I'll make it more interactive later, that would be good.

814
00:36:12,560 --> 00:36:15,360
I think that's really all I need from here.

815
00:36:15,360 --> 00:36:22,360
I'm going to have the names be unique rather than trying to dig up some other ID system.

816
00:36:22,360 --> 00:36:24,680
Here, I can use the same table.

817
00:36:24,680 --> 00:36:27,480
But what I really am interested is the connected part.

818
00:36:27,480 --> 00:36:31,960
Here, I want to say the system is connected to another system.

819
00:36:31,960 --> 00:36:35,560
I'm going to pull that from my connections file.

820
00:36:36,240 --> 00:36:38,680
I need to specify here.

821
00:36:38,680 --> 00:36:40,880
Here, I could go either with planets,

822
00:36:40,880 --> 00:36:43,400
but I'll just pull it right from the connections file again,

823
00:36:43,400 --> 00:36:46,160
because all the names should match up.

824
00:36:46,160 --> 00:36:49,600
Here, I have connected to.

825
00:36:49,600 --> 00:36:52,040
Which systems are connected to what?

826
00:36:52,040 --> 00:36:54,200
I basically wanted to,

827
00:36:54,200 --> 00:36:58,080
if there is a system in the connections table that doesn't exist in the planets table,

828
00:36:58,080 --> 00:37:01,360
it will create that planet and then make the connection.

829
00:37:01,360 --> 00:37:02,920
Here, now that I have that data,

830
00:37:02,920 --> 00:37:07,760
I'm going to do the name to the connected to file.

831
00:37:07,760 --> 00:37:12,000
When I run import, it will connect all the systems.

832
00:37:12,000 --> 00:37:14,000
I've already done that, so I won't run it again,

833
00:37:14,000 --> 00:37:15,960
although it shouldn't hurt it at all.

834
00:37:15,960 --> 00:37:21,000
If I do just a basic search,

835
00:37:21,000 --> 00:37:22,520
this will return way too many,

836
00:37:22,520 --> 00:37:24,720
but it will give you a subset.

837
00:37:25,360 --> 00:37:28,480
Again, it shows it in this graph form,

838
00:37:28,480 --> 00:37:29,720
but it doesn't have to be.

839
00:37:29,720 --> 00:37:31,640
You can use it as a table.

840
00:37:31,680 --> 00:37:36,040
You could leverage it as a JSON in something that you were using.

841
00:37:36,040 --> 00:37:38,680
There's a lot of flexibility as well.

842
00:37:38,680 --> 00:37:43,600
But again, we just wanted to show you how accessible

843
00:37:43,600 --> 00:37:49,160
this opportunity is for you to make what you're coding much easier.

844
00:37:49,160 --> 00:37:53,400
Does anybody think of a use case of something that they've worked on recently that

845
00:37:53,400 --> 00:37:58,000
maybe you'd want to look at trying to look at it in a different way?

846
00:37:58,000 --> 00:38:00,520
I know it's weird at first.

847
00:38:00,520 --> 00:38:02,800
It's a whole different way of thinking about something.

848
00:38:02,800 --> 00:38:06,640
But really, anytime you've got a many-to-many situation,

849
00:38:06,640 --> 00:38:08,840
you don't have to do complicated joins,

850
00:38:08,840 --> 00:38:10,720
you don't have to unwind it,

851
00:38:10,720 --> 00:38:12,280
you don't have to unpack it.

852
00:38:12,280 --> 00:38:16,880
It's just going to give you a way of doing something really simple and really clean.

853
00:38:16,880 --> 00:38:19,080
So Jason, I have a question for you.

854
00:38:19,080 --> 00:38:23,840
Our developers, did they finish building their system? They did, right?

855
00:38:23,840 --> 00:38:27,960
All right. So who were the developers on our team?

856
00:38:27,960 --> 00:38:28,440
Yeah.

857
00:38:28,440 --> 00:38:29,760
All right. Let's look here.

858
00:38:29,760 --> 00:38:34,760
Because those developers on our team definitely are going to need to be compensated.

859
00:38:34,760 --> 00:38:36,000
Yes. I believe they should.

860
00:38:36,000 --> 00:38:36,960
And acknowledged. They should.

861
00:38:36,960 --> 00:38:41,440
All right. So we've got Codosaurus, Tango Alpha.

862
00:38:41,440 --> 00:38:43,680
We've got an unnamed mysterious coder,

863
00:38:43,680 --> 00:38:46,760
which I'll have to go through the database and dig up the email.

864
00:38:46,760 --> 00:38:50,480
But if you are that person whose friend is Yoda,

865
00:38:50,480 --> 00:38:52,840
your skills is C in Python, you from Alderaan.

866
00:38:52,840 --> 00:38:57,960
If you remember, how are people getting their prizes?

867
00:38:57,960 --> 00:39:01,680
So what we're going to do is you put your emails in,

868
00:39:01,680 --> 00:39:04,800
we'll drop you an email and you can come pick them up at the booth.

869
00:39:04,800 --> 00:39:06,400
So when you go into the booth,

870
00:39:06,400 --> 00:39:09,920
we're sort of on the far right corner in the back.

871
00:39:09,920 --> 00:39:13,840
We'll be there for the rest of once the exhibition opens today,

872
00:39:13,840 --> 00:39:15,200
and over the next couple of days.

873
00:39:15,200 --> 00:39:16,560
So definitely come on by.

874
00:39:16,560 --> 00:39:19,320
Do you want to tell the audience what they've won, Jason?

875
00:39:19,320 --> 00:39:22,200
Oh, yes. Since I don't have it with me.

876
00:39:22,200 --> 00:39:27,040
So we got two remote control droids,

877
00:39:27,080 --> 00:39:31,080
one that beeps and does other stuff.

878
00:39:31,080 --> 00:39:35,840
And then we have a gift for the person who was least

879
00:39:35,840 --> 00:39:38,440
hireable for the Rebel Dev team.

880
00:39:38,440 --> 00:39:41,360
So if you are Hiram Rose, definitely come see us.

881
00:39:41,360 --> 00:39:48,000
We have a nice Imperial water bottle to give you.

882
00:39:48,000 --> 00:39:50,320
And that's it. Thank you so much.

883
00:39:50,320 --> 00:39:52,960
Does anybody have questions?

884
00:39:52,960 --> 00:39:54,920
Yes. There's a microphone if you want to come up

885
00:39:54,920 --> 00:39:56,760
or if you've got a big voice, feel free.

886
00:39:56,800 --> 00:39:58,680
Actually, I could do this.

887
00:39:58,680 --> 00:40:00,880
I will hyperspace jump this view.

888
00:40:02,640 --> 00:40:04,440
Maybe the whole stand will come.

889
00:40:04,440 --> 00:40:09,360
All right. Thank you for the talk.

890
00:40:10,640 --> 00:40:12,760
I saw you guys have a Python driver,

891
00:40:12,760 --> 00:40:17,080
but I didn't see like an object to an OGM.

892
00:40:17,080 --> 00:40:18,720
Yeah, you do relationship.

893
00:40:19,480 --> 00:40:22,120
So it will be cool if you can talk about that.

894
00:40:22,120 --> 00:40:23,720
Oh, OK. Yes. I'll put this away.

895
00:40:24,720 --> 00:40:29,720
So we so Neo4j did not build a OGM,

896
00:40:29,720 --> 00:40:32,920
but there is a community OGM that's been around for a while.

897
00:40:32,920 --> 00:40:35,640
And there are people on our team who are helping support that.

898
00:40:35,640 --> 00:40:37,240
Let me bring that up for you.

899
00:40:37,240 --> 00:40:39,840
GitHub. And it is called NeoModel.

900
00:40:41,000 --> 00:40:44,160
Oh, yes, I am not a droid.

901
00:40:49,880 --> 00:40:51,640
Oh, they've caught me. They found out I am.

902
00:40:54,720 --> 00:40:56,160
So this is one OGM.

903
00:40:56,160 --> 00:40:58,800
There is also another there's an older one, Py2neo,

904
00:40:59,480 --> 00:41:01,800
but that one, I don't believe is supported anymore,

905
00:41:02,400 --> 00:41:04,560
but it still works. I still use it sometimes.

906
00:41:05,880 --> 00:41:08,080
But yeah, here NeoModel.

907
00:41:08,080 --> 00:41:11,120
And this one has just been recently updated to use Neo4j5,

908
00:41:11,120 --> 00:41:13,120
which is our most recent addition.

909
00:41:13,120 --> 00:41:16,240
There's also a Django variant.

910
00:41:16,600 --> 00:41:19,800
NeoModel Django.

911
00:41:19,800 --> 00:41:21,280
Oh, I was forgetting this one.

912
00:41:21,280 --> 00:41:22,280
Django fat.

913
00:41:22,280 --> 00:41:25,520
Django fat. Django. OK.

914
00:41:25,520 --> 00:41:26,800
Sorry.

915
00:41:26,800 --> 00:41:29,000
So yeah, so there's a Django version as well,

916
00:41:29,000 --> 00:41:30,720
if you are building a Django app.

917
00:41:31,920 --> 00:41:34,680
Cool. There was someone else who had a hand for a question.

918
00:41:34,680 --> 00:41:37,560
Yes. Let me, I don't know why I put this back in here.

919
00:41:41,520 --> 00:41:44,200
Thank you for the talk. Just I had two quick questions.

920
00:41:45,080 --> 00:41:47,040
So the Cypher query, I'm not very familiar.

921
00:41:47,040 --> 00:41:50,920
Is that querying language that was developed by your team

922
00:41:50,920 --> 00:41:53,960
or is that like a standard or is that like a library or?

923
00:41:55,240 --> 00:41:56,120
That's a great question.

924
00:41:56,120 --> 00:41:58,480
So, yes, it was originally developed at Neo4j.

925
00:41:59,000 --> 00:42:00,840
Oh, do you have a follow up question? OK.

926
00:42:00,840 --> 00:42:05,120
So it was originally created at Neo4j, but in 2005,

927
00:42:05,320 --> 00:42:06,400
it was open sourced.

928
00:42:06,400 --> 00:42:09,120
So there is an open Cypher organization

929
00:42:09,400 --> 00:42:13,920
and a couple other graph database companies use the same syntax.

930
00:42:14,320 --> 00:42:16,440
So Memgraph is a good example.

931
00:42:16,480 --> 00:42:18,600
I think you can also use, well,

932
00:42:19,520 --> 00:42:25,560
like AWS, Neptune and Cosmos will also have Cypher interfaces.

933
00:42:26,920 --> 00:42:28,400
An interesting bit.

934
00:42:28,400 --> 00:42:32,600
So we're all, I think, very familiar with GraphQL, right,

935
00:42:32,600 --> 00:42:35,240
which is the REST alternative.

936
00:42:36,320 --> 00:42:38,880
There is also a group of database companies that have gotten together.

937
00:42:39,480 --> 00:42:42,880
They got together like two years ago and they are creating an ISO standard

938
00:42:43,160 --> 00:42:45,880
for the graph query language.

939
00:42:46,520 --> 00:42:49,040
Not to be confused with GraphQL,

940
00:42:49,040 --> 00:42:51,160
but the shorthand GQL is the same as GQL.

941
00:42:51,160 --> 00:42:55,160
All right. So this group is two years in and I think they have another two years ago.

942
00:42:55,160 --> 00:42:59,000
But once they're done, they will have a standardized

943
00:42:59,680 --> 00:43:03,400
graph query syntax language, just like SQL.

944
00:43:04,040 --> 00:43:07,080
And right now, it looks a lot like Cypher. Right.

945
00:43:08,240 --> 00:43:11,120
So if you learn Cypher now, you have a pretty easy on-ramp

946
00:43:11,800 --> 00:43:14,040
to GQL when it comes out in about two years.

947
00:43:14,960 --> 00:43:16,040
They're getting close.

948
00:43:16,040 --> 00:43:17,760
They are getting close. Yeah, they're pretty far along.

949
00:43:17,760 --> 00:43:20,840
I think mostly like hammering out a bunch of small details.

950
00:43:21,320 --> 00:43:23,240
Yes. And follow up question?

951
00:43:23,240 --> 00:43:24,920
Yeah. And just about the

952
00:43:25,960 --> 00:43:30,120
the map of the galaxy that was built or the graph.

953
00:43:30,280 --> 00:43:31,080
Yeah.

954
00:43:32,040 --> 00:43:34,960
When the nodes were placed onto the map,

955
00:43:34,960 --> 00:43:37,840
were they placed based on their coordinates or were they placed

956
00:43:37,840 --> 00:43:39,520
based on their relationships?

957
00:43:39,520 --> 00:43:41,240
Coordinates. Right.

958
00:43:41,240 --> 00:43:45,680
Because if it was by just relationship, it would look different.

959
00:43:45,800 --> 00:43:50,360
It would be more like this, right, which is the system is optimizing by its

960
00:43:51,760 --> 00:43:54,040
relative position based on relationships. Right.

961
00:43:54,280 --> 00:43:58,480
So this map here isn't a one to one relation to this map.

962
00:43:58,480 --> 00:44:01,400
And we can see that, right, because in the Star Wars galaxy,

963
00:44:01,680 --> 00:44:04,680
pretty much everything towards the Western sphere is unknown, unconnected.

964
00:44:05,160 --> 00:44:10,840
But in our graph visualization, it's just a sphere.

965
00:44:10,840 --> 00:44:11,840
Right.

966
00:44:12,840 --> 00:44:13,840
So.

967
00:44:14,960 --> 00:44:17,160
All right. Did anyone else have a question?

968
00:44:18,600 --> 00:44:19,600
Oh, OK.

969
00:44:21,320 --> 00:44:22,320
All right.

970
00:44:24,800 --> 00:44:28,440
Yeah, could you just briefly touch on our deployment options for Neo4j?

971
00:44:29,160 --> 00:44:33,960
OK, for like, is there a self hosted version cloud version, you know, whatever?

972
00:44:34,240 --> 00:44:40,560
Right. OK. So, yes, so we do have a hosted instance called AuraDB.

973
00:44:41,080 --> 00:44:42,080
So bring this up.

974
00:44:47,560 --> 00:44:48,560
Oops. What am I doing?

975
00:44:49,160 --> 00:44:51,640
So, so this.

976
00:44:54,040 --> 00:44:57,800
This console here is AuraDB.

977
00:44:58,000 --> 00:45:00,960
So here you can spin up different instances of Neo4j.

978
00:45:01,240 --> 00:45:04,920
And once you open one of these, you'll go to this workspace, which is where you can

979
00:45:04,920 --> 00:45:06,160
import data here on the right.

980
00:45:06,560 --> 00:45:08,800
You can create the data like I've been showing here in the middle.

981
00:45:09,120 --> 00:45:14,920
And then we have a no code graphics for called Bloom, which for some reason

982
00:45:15,240 --> 00:45:17,400
never works for my instance.

983
00:45:17,440 --> 00:45:18,480
It seems to work for everyone else.

984
00:45:18,480 --> 00:45:21,840
I need to I need to figure out why Bloom doesn't want to work for me.

985
00:45:21,880 --> 00:45:27,120
But this tool basically allows you to go through data discovery without needing to

986
00:45:27,240 --> 00:45:28,720
run any Cypher query calls.

987
00:45:29,040 --> 00:45:32,520
It will it will give you the query if you are interested, but you don't need it.

988
00:45:33,160 --> 00:45:34,920
So, yeah, so we have a cloud hosted instance.

989
00:45:35,280 --> 00:45:37,840
You can also run locally, which is how I developed on.

990
00:45:38,360 --> 00:45:40,320
And you can we have a bunch of Docker images.

991
00:45:40,360 --> 00:45:43,720
You can also put it into a Docker so you can self host.

992
00:45:44,800 --> 00:45:46,840
You know, all the usual options are available.

993
00:45:48,040 --> 00:45:53,040
We also have an expansion that goes into graph data science, which is I'm the data

994
00:45:53,040 --> 00:45:59,160
scientist. So if you're if you've got a server that you're running locally or, you

995
00:45:59,160 --> 00:46:01,760
know, if you wanted to do cloud, we have cloud base.

996
00:46:01,760 --> 00:46:05,480
It's not free, but you can run GDS within your own system.

997
00:46:05,680 --> 00:46:08,240
So you'll have access to that community version of that as well.

998
00:46:08,280 --> 00:46:14,080
So if you're looking to really spend more time on things like, you know, not just

999
00:46:14,080 --> 00:46:17,600
the shortest path, but if you want to figure out which planet is going to muck

1000
00:46:17,600 --> 00:46:22,200
up things for the Imperial Stormtroopers more than any other, we have different

1001
00:46:22,200 --> 00:46:24,280
kinds of algorithms that you can run on that as well.

1002
00:46:24,680 --> 00:46:29,120
So if you have any questions about any of that, you can you can look into those as

1003
00:46:29,120 --> 00:46:31,600
well. Actually, you brought up a good point, right?

1004
00:46:31,920 --> 00:46:37,160
So for ranking developers or plots, I use a really kind of a straightforward rubric,

1005
00:46:37,160 --> 00:46:42,480
right? I gave points for hitting certain marks, but a better system would have been

1006
00:46:42,480 --> 00:46:44,960
to use graph data science and actually find clusters of data.

1007
00:46:44,960 --> 00:46:49,400
Right. So if a particular character interacts with a lot of different

1008
00:46:49,400 --> 00:46:52,320
characters in particular ways, they know people, they come from a place, they've

1009
00:46:52,320 --> 00:46:53,320
done certain actions.

1010
00:46:53,600 --> 00:46:57,880
If we have that information and knowledge graph in a graph, then we can use the

1011
00:46:58,040 --> 00:47:00,360
graph data science to give us.

1012
00:47:00,720 --> 00:47:02,200
You can suss out the spies.

1013
00:47:02,200 --> 00:47:03,920
Yes, we can suss them out very quickly.

1014
00:47:03,920 --> 00:47:05,200
Like I don't have to create a rubric.

1015
00:47:05,200 --> 00:47:12,120
I just basically run a algorithm that is way above my my mental capacity, and it

1016
00:47:12,120 --> 00:47:15,440
will tell me like, oh, according to this algorithm, these three are your top

1017
00:47:15,440 --> 00:47:15,800
people.

1018
00:47:15,800 --> 00:47:18,440
Right. So that's what I wanted.

1019
00:47:18,440 --> 00:47:22,840
I mean, obviously, like data science nerd, that's what's exciting for me, too, is

1020
00:47:22,840 --> 00:47:26,720
once you have these relationships, what can you then leverage them for?

1021
00:47:27,280 --> 00:47:29,640
So other questions?

1022
00:47:30,240 --> 00:47:30,600
Oh, one.

1023
00:47:32,880 --> 00:47:33,240
OK.

1024
00:47:47,840 --> 00:47:53,280
Yeah, I mean, that's where that's where most of the glory comes from, is when we

1025
00:47:53,280 --> 00:47:58,320
think about it, when you actually run the query, it's going to start with just

1026
00:47:58,320 --> 00:47:59,240
those nodes.

1027
00:47:59,520 --> 00:47:59,840
Right.

1028
00:47:59,840 --> 00:48:04,240
So, you know, we have ways that we that we teach people how to optimize those

1029
00:48:04,240 --> 00:48:04,720
queries.

1030
00:48:05,000 --> 00:48:07,560
But if you think about it, you don't have to go through everything.

1031
00:48:07,560 --> 00:48:10,680
It's just going to say nodes with this label and you're already there.

1032
00:48:11,000 --> 00:48:13,760
Nodes with this label in this relationship, you're already there.

1033
00:48:13,920 --> 00:48:19,640
So you get through things significantly faster, especially when you're trying to

1034
00:48:19,640 --> 00:48:20,840
dig into something.

1035
00:48:20,840 --> 00:48:25,560
So, you know, when we were looking at the table that had the list of languages,

1036
00:48:25,920 --> 00:48:29,520
right, you'd have to go into each row, then iterate through each one to see if

1037
00:48:29,520 --> 00:48:30,160
it was there.

1038
00:48:30,440 --> 00:48:34,840
If I just want to see all the developers that know Python, I have a Python node.

1039
00:48:34,840 --> 00:48:35,760
I'm there already.

1040
00:48:36,240 --> 00:48:41,720
And so that's where a lot of why you would want to use Neo4j and you'd want to

1041
00:48:41,720 --> 00:48:45,360
use graph is because you get right to the data much faster.

1042
00:48:45,760 --> 00:48:49,120
I mean, a lot of art comes in with the actual data model.

1043
00:48:49,120 --> 00:48:50,120
So what's a node?

1044
00:48:50,120 --> 00:48:51,280
What's a relationship?

1045
00:48:51,640 --> 00:48:52,040
Right.

1046
00:48:52,040 --> 00:48:55,000
And we know there's a lot of support in the community.

1047
00:48:55,000 --> 00:48:59,040
I mean, our whole dev rel team is in community every day.

1048
00:48:59,360 --> 00:49:03,280
So any of the questions that you have, like we can walk you through, we do a lot

1049
00:49:03,280 --> 00:49:08,480
of data model feedback in community because it's a different way of thinking

1050
00:49:08,480 --> 00:49:09,720
about it that you haven't before.

1051
00:49:09,920 --> 00:49:13,960
But efficiency wise, that's one of the things that's beautiful about it is you

1052
00:49:13,960 --> 00:49:15,600
go right to what you need right away.

1053
00:49:16,800 --> 00:49:19,960
And if you're new to Cypher and you're kind of curious, like, you know, like what

1054
00:49:19,960 --> 00:49:21,240
is actually happening under the hood?

1055
00:49:21,600 --> 00:49:21,760
Right.

1056
00:49:21,760 --> 00:49:24,280
So there are two keywords that you can run.

1057
00:49:24,320 --> 00:49:29,560
You do explain, right, which the database will tell you basically it's hops.

1058
00:49:29,560 --> 00:49:30,120
What's it doing?

1059
00:49:30,560 --> 00:49:33,520
And if you wanted to profile, so if you wanted to compare different Cypher queries

1060
00:49:33,520 --> 00:49:37,160
to figure out which one is the best one for your use case, there's a profile one.

1061
00:49:37,560 --> 00:49:40,360
And so this will tell you how many rows, how many hits it's doing.

1062
00:49:40,360 --> 00:49:40,600
Right.

1063
00:49:40,720 --> 00:49:42,360
So the goal is, it's like golf.

1064
00:49:42,400 --> 00:49:46,640
You want to go for the lowest number of hits to make the most efficient Cypher call.

1065
00:49:49,080 --> 00:49:49,360
Yeah.

1066
00:49:49,520 --> 00:49:50,040
Very welcome.

1067
00:49:50,920 --> 00:49:53,440
I think that's going to be my tool of the month on the podcast.

1068
00:49:53,480 --> 00:49:53,920
I like that.

1069
00:49:54,680 --> 00:49:55,320
Oh, the profile.

1070
00:49:55,400 --> 00:49:55,720
Yeah.

1071
00:49:55,840 --> 00:49:56,480
Oh yes.

1072
00:49:56,920 --> 00:50:00,240
I need to use this more because I love making inefficient Cypher.

1073
00:50:01,600 --> 00:50:03,400
How can I, how do I break my database?

1074
00:50:04,520 --> 00:50:05,160
So, okay.

1075
00:50:05,160 --> 00:50:05,400
Yes.

1076
00:50:05,480 --> 00:50:06,760
Uh, any other questions?

1077
00:50:06,800 --> 00:50:07,040
Yeah.

1078
00:50:09,200 --> 00:50:12,360
You showed the function when I was shortest path.

1079
00:50:12,640 --> 00:50:14,680
Is there any way to extend that?

1080
00:50:14,680 --> 00:50:17,160
Cause I'm guessing that one's built into the query language.

1081
00:50:17,480 --> 00:50:20,800
Is there any way to extend that with any sort of modules or something like that?

1082
00:50:21,040 --> 00:50:26,960
Say I want to have a function to get a path that goes through all the nodes or something

1083
00:50:26,960 --> 00:50:27,160
like that.

1084
00:50:27,760 --> 00:50:28,160
Yeah.

1085
00:50:28,200 --> 00:50:33,960
So, um, within Neo4j's graph data science, we have a number of different path finding.

1086
00:50:33,960 --> 00:50:38,960
I think in, in our like most public, most supported, I think we've got like six or

1087
00:50:38,960 --> 00:50:40,560
eight different path finding routes.

1088
00:50:40,840 --> 00:50:42,760
You can also leverage different weights.

1089
00:50:42,880 --> 00:50:47,000
So one of the iterations we want to put on this is the amount of time it takes to go

1090
00:50:47,000 --> 00:50:48,320
from one planet to another.

1091
00:50:48,560 --> 00:50:52,760
So similar to like ways, do you want the fastest path or do you want the one with

1092
00:50:52,760 --> 00:50:54,560
the least number of storm troopers on it?

1093
00:50:54,800 --> 00:50:58,600
Um, but there are a number of different ways that you can find path.

1094
00:50:59,040 --> 00:51:03,760
So again, there, whether it's by weight, whether it includes a particular location,

1095
00:51:04,120 --> 00:51:07,320
um, you know, there's, there's all kinds of possibilities.

1096
00:51:07,320 --> 00:51:12,320
I think we've got, I think all in, we've got like 60 different algorithms in GDS

1097
00:51:12,400 --> 00:51:13,400
for different kinds.

1098
00:51:13,720 --> 00:51:15,960
So they come into a few different types.

1099
00:51:15,960 --> 00:51:18,040
We've got path finding algorithms.

1100
00:51:18,280 --> 00:51:20,200
We have centrality algorithms.

1101
00:51:20,200 --> 00:51:22,600
So like I said, which planet do you want to take out?

1102
00:51:22,600 --> 00:51:24,560
That's going to mess up the system the most.

1103
00:51:25,000 --> 00:51:27,680
Um, we have similarity algorithms.

1104
00:51:27,680 --> 00:51:33,200
So if I know that Codosaurus did a great job on the last one, I can say, okay,

1105
00:51:33,200 --> 00:51:38,880
show me another developer who's the most similar to him or to her or whomever

1106
00:51:38,880 --> 00:51:39,840
it may be or them.

1107
00:51:40,160 --> 00:51:42,840
So, you know, we can use similarity algorithms.

1108
00:51:42,880 --> 00:51:46,520
You can use it for traditional supervised machine learning.

1109
00:51:46,520 --> 00:51:48,480
We can use them for community detection.

1110
00:51:48,680 --> 00:51:50,400
You can use them for fraud detection.

1111
00:51:50,600 --> 00:51:56,520
So there's a wide variety of problems and things that you can take on within

1112
00:51:56,520 --> 00:51:57,680
the GDS library.

1113
00:51:58,840 --> 00:52:03,000
And if I recall correctly, I think you can go down to the Java level and even run

1114
00:52:03,040 --> 00:52:06,920
APOC to insert, um, kind of your own logic.

1115
00:52:07,600 --> 00:52:11,160
So if I, I haven't built it myself, but I do recall reading that somewhere.

1116
00:52:11,280 --> 00:52:11,520
Yeah.

1117
00:52:13,800 --> 00:52:14,120
Welcome.

1118
00:52:15,440 --> 00:52:16,560
Other questions.

1119
00:52:19,520 --> 00:52:20,040
All right.

1120
00:52:20,720 --> 00:52:21,720
Thank you all so much.

1121
00:52:21,880 --> 00:52:26,680
If we, if you were on the list of developers are most likely to be hired or, uh,

1122
00:52:26,720 --> 00:52:29,000
what was, what was the, the Imperial?

1123
00:52:29,360 --> 00:52:30,520
The most, the most Imperial.

1124
00:52:30,640 --> 00:52:31,720
The most Imperial.

1125
00:52:31,760 --> 00:52:33,960
Um, you can come and see us at the booth.

1126
00:52:33,960 --> 00:52:35,720
You can come up now and say hi either way.

1127
00:52:35,720 --> 00:52:38,400
Hopefully you put in your email address and we can drop you a note as well.

1128
00:52:38,720 --> 00:52:44,080
Um, if you need anything, we're both really easy to find at Neo4j and thank you

1129
00:52:44,080 --> 00:52:45,160
all so much for your time.

