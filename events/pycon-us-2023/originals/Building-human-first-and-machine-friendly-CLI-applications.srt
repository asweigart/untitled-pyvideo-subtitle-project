1
00:00:00,000 --> 00:00:15,960
Hello. So good morning and hope you have all had a coffee. So welcome to the tutorial building

2
00:00:15,960 --> 00:00:23,680
human first and machine friendly CLI applications. So my name is Reka. I work for Sorcery on

3
00:00:23,680 --> 00:00:33,680
various code quality and refactoring tools also in the ID and also in the command line. And I have

4
00:00:33,680 --> 00:00:40,640
been using command line applications for a very long time and the first time when I started to

5
00:00:40,640 --> 00:00:47,440
also develop them from the site was at the previous FinTech job where we created various

6
00:00:47,440 --> 00:00:55,320
internal tools and that's what, that's where I also got to know this command line interface

7
00:00:55,320 --> 00:01:02,280
guidelines which will be one of the major points of the discussion today. I would like to ask you

8
00:01:02,280 --> 00:01:09,800
first of all to install two tools which we will use for today's example. So one is cookie cutter

9
00:01:10,160 --> 00:01:21,360
and the second is poetry. So that would be, so these will be necessary. And then the first thing

10
00:01:21,360 --> 00:01:26,680
I want, would like to mention is that the title says human first which also implies that anytime

11
00:01:26,840 --> 00:01:42,560
any comment, suggestion, idea is very welcome because that should be something which we discuss

12
00:01:42,560 --> 00:01:54,080
what is intuitive and what. So the first step if you have all, the first question I would like to

13
00:01:54,120 --> 00:02:07,720
ask is who is familiar with cookie cutter? Okay, then let's perhaps start with a quick introduction

14
00:02:07,720 --> 00:02:19,160
to cookie cutter itself. So let's just go for, so cookie cutter is basically a tool for creating

15
00:02:19,200 --> 00:02:26,360
project templates and that is exactly what we are going to do in the very first step of our,

16
00:02:26,360 --> 00:02:36,760
in the very first step of our preparations. So the URL what you see here, this cookie cutter,

17
00:02:36,760 --> 00:02:50,760
this is just a GitHub repository and here and what it contains is a cookie cutter JSON file

18
00:02:50,760 --> 00:02:59,720
which defines various project properties and then the other major part of it is this cookie

19
00:02:59,720 --> 00:03:05,960
cutter project name directory and this is in ginger syntax and what will happen is that when

20
00:03:05,960 --> 00:03:15,800
we run this cookie cutter then it will generate for us a project following that template. So the

21
00:03:15,800 --> 00:03:33,880
first, first I would like to start with, start with omitting this parameter for replay file and

22
00:03:34,280 --> 00:03:44,400
see what happens if I just run cookie cutter. So cookie cutter and then the URL of a repository

23
00:03:44,400 --> 00:03:51,600
containing a cookie cutter, so this can be a URL or it can be also local directory and then what

24
00:03:51,600 --> 00:04:01,680
happens that it starts to ask me for various properties, for example what's the name of my

25
00:04:01,680 --> 00:04:08,240
project and if I said it's PyCon catalog then for the next property it will already suggest a name

26
00:04:08,240 --> 00:04:14,360
based on that and if we could interactively fill in various fields, so if you saw the JSON file

27
00:04:14,360 --> 00:04:20,520
there are like ten different fields, we could just all fill them and create a project so that

28
00:04:20,520 --> 00:04:30,120
that's the basic usage how you use cookie cutter most of the time and what I would like to ask you

29
00:04:30,120 --> 00:04:42,400
to do instead now is to run this command which is here and here we pass this replay file option

30
00:04:42,400 --> 00:05:05,280
to the cookie cutter and what will, oh, sorry, oh yes so I should follow my own advice and see

31
00:05:05,280 --> 00:05:15,800
that this cookie cutter talk JSON so this is here in the project skeleton directory so please

32
00:05:15,800 --> 00:05:20,680
pass, so this is a file here in this project skeleton directory so if you run it somewhere

33
00:05:20,680 --> 00:05:31,640
else then please adjust the pass of it and I'm sorry

34
00:05:50,680 --> 00:06:14,360
yes

35
00:06:14,360 --> 00:06:31,400
so and what now happens and please tell me if it's working for you as well is that now we just

36
00:06:31,400 --> 00:06:43,320
generate a project based on that based on that template and now if we navigate to this PyCon

37
00:06:43,320 --> 00:06:52,960
catalog, an directory here we can already see that we have now Python so we have generated a

38
00:06:52,960 --> 00:07:01,360
poetry command line project here so as a first step so have you got that far first question

39
00:07:01,360 --> 00:07:13,840
so that's a good point so the command is here and I would like so I would like to suggest to first

40
00:07:13,840 --> 00:07:22,640
of all clone this repository this PyCon 2023 because that's the easiest way so the repository

41
00:07:22,640 --> 00:07:32,360
is github.com reka CLI tutorial PyCon 2023 and here it is important that you have this cookie

42
00:07:32,360 --> 00:07:40,840
cutter talk JSON file and this is the command which we should run and don't commit the same

43
00:07:40,840 --> 00:07:50,640
mistake which I did that running the so adjust to the pass of this of this talk JSON please

44
00:07:50,640 --> 00:08:07,840
it couldn't find poetry yes then do you have poetry installed okay that's a good question

45
00:08:07,840 --> 00:08:19,280
why it might be what happens if you go navigate to the directory like here can you run poetry shell

46
00:08:19,280 --> 00:08:37,320
here yes so the script didn't do too much just so the so the older poet

47
00:08:37,320 --> 00:08:47,920
it just did a poetry install so and that's actually also a very good point which

48
00:08:47,920 --> 00:08:54,800
which we have just heard so

49
00:08:54,800 --> 00:09:18,760
sorry oh okay that's my my mistake so in that case in that case it means that you have already

50
00:09:18,920 --> 00:09:28,520
generated the project and it but it doesn't run with but but it has it can't run is that correct

51
00:09:28,520 --> 00:09:36,840
sorry okay

52
00:09:36,840 --> 00:09:44,440
three nine okay

53
00:09:52,800 --> 00:09:53,400
so

54
00:10:06,840 --> 00:10:31,600
so if you have Python three nine then I would like to ask you to go to this project in the

55
00:10:31,760 --> 00:10:47,400
generated project so in the in this Python catalog to the project and here at line 11 we are setting

56
00:10:47,400 --> 00:10:59,680
the minimum Python version and this is what should be changed please if it's not so sorry

57
00:10:59,680 --> 00:11:04,680
that's my mistake that three time was probably a bit too high to set this

58
00:11:04,680 --> 00:11:32,360
so is it have we got that far with whichever Python version oh okay what are the other

59
00:11:32,360 --> 00:11:49,200
problems with the setup a custom search pass sorry what do you mean oh I have to admit I

60
00:11:49,200 --> 00:12:05,200
have no idea okay my suggestion would be to just carry on with some of the demo so with some of

61
00:12:05,200 --> 00:12:11,080
demonstrations here and then in the first break we can perhaps troubleshoot some of the installation

62
00:12:11,080 --> 00:12:20,040
issues I'm sorry if it turned out to be more complicated than I assumed and what I would like

63
00:12:20,040 --> 00:12:31,520
to show around is this little bit what we have just generated in this in this application so

64
00:12:31,520 --> 00:12:45,800
here we have we have a Python poetry application with a type of CLI so I will just activate poetry

65
00:12:45,800 --> 00:12:52,480
shell first so if you have managed to let that please follow along and then the first thing which

66
00:12:52,480 --> 00:13:02,560
we can we can see is this Python that that there is this Python catalog script which we can run and

67
00:13:02,560 --> 00:13:11,960
with the help we can see what kind of subcommands and things we have here and we have one subcommand

68
00:13:11,960 --> 00:13:33,080
which is which is the this talk and here we can and we can just install the same poetry install

69
00:13:33,080 --> 00:13:49,000
and and then look look around here a little bit in the in the generated project so what so here

70
00:13:49,000 --> 00:13:58,920
in the set in the set in this script this is a the first important setting here we can be defined

71
00:13:58,920 --> 00:14:10,320
that this Python catalog this should run this app defined in the in the cell in the CLI app module

72
00:14:10,320 --> 00:14:28,800
and the code for this can be found here and I just need to set the temperature and here we can see the various

73
00:14:28,800 --> 00:14:39,840
so here we can see only this one version command that we saw and then the real bulk of the

74
00:14:39,840 --> 00:14:54,680
application this can be found here in the in this talk CLI module and and first and here we we will

75
00:14:54,680 --> 00:15:05,000
have various commands for creating updating deleting talks and and things like that okay

76
00:15:11,000 --> 00:15:12,320
so

77
00:15:25,520 --> 00:15:37,320
the next thing I wanted to show is this is this command line interface guidelines so this is this

78
00:15:37,320 --> 00:15:44,960
is a site called CLIG dot dev and I really recommend it I really recommend its reading

79
00:15:44,960 --> 00:15:57,960
but it's a quite I would say a lot of a lot of material is there and first of all I wanted to

80
00:15:57,960 --> 00:16:05,440
ask your opinion about what do you what do you think about what can be about this philosophy and

81
00:16:05,440 --> 00:16:13,040
principles which this mentions so human first design and simple what does that mean for you

82
00:16:13,040 --> 00:16:29,840
for a command line application yes it has to be intuitive yes sorry well documented yes yes that's

83
00:16:29,840 --> 00:16:40,800
a that's a very good point consistent okay what does consistency so where does consistency come

84
00:16:40,800 --> 00:16:58,280
from what are what are the sources of consistency one way to do things yes that's that's interesting

85
00:17:10,880 --> 00:17:22,560
okay consistency is indeed one of the points which they mentioned it to the use what are the

86
00:17:22,560 --> 00:17:32,680
usages usually of a of a command line application so in which settings care is it used sorry

87
00:17:32,680 --> 00:17:36,480
in the coma yeah

88
00:17:45,640 --> 00:17:56,360
the humans who are familiar with computers yes that's a that's actually a very interesting

89
00:17:56,360 --> 00:18:02,040
point because that's I think one thing which CLIG argues that many of these applications

90
00:18:02,080 --> 00:18:11,280
are super intuitive if you are already familiar with this and less approachable for what we

91
00:18:11,280 --> 00:18:23,480
know so so yes that's exactly one of those points and I would like to jump to this basics

92
00:18:23,480 --> 00:18:32,800
first so so the whole guide is structured in a way that there are let's say four things which

93
00:18:32,800 --> 00:18:41,720
they say should always be followed and then there are other additional steps or additional

94
00:18:41,720 --> 00:18:49,120
recommendations which they say that okay it's nice to follow those but these are the basics

95
00:18:49,120 --> 00:18:56,920
which we should always stick to and here use a command line argument parsing library where

96
00:18:56,920 --> 00:19:08,840
you can this is exactly what we have done in our example so if we go back here so so what we use

97
00:19:08,840 --> 00:19:19,160
here in the is typer in our in our project and this is and the one reason why I'm sorry so the

98
00:19:19,160 --> 00:19:28,280
one reason why the CLIG suggests us to use to like typer or whatever library all the time is

99
00:19:28,280 --> 00:19:37,000
because that way a lot of the other recommendations which they have will be automatically there and

100
00:19:37,040 --> 00:19:44,840
actually that's also the reason why I suggest not just using the CLIG and typer or IPERS are really

101
00:19:44,840 --> 00:19:52,480
all very fine tools but also to use a cookie cutter because that way a lot of the things are

102
00:19:52,480 --> 00:20:01,440
already pre-generated in a way which is which is practical for us and we don't need to so we don't

103
00:20:01,760 --> 00:20:10,040
need to add the same elements for many many applications so all the time so I saw this

104
00:20:10,040 --> 00:20:16,640
following you using a command line parsing library that's something which I really even

105
00:20:16,640 --> 00:20:23,480
for the smallest and finest projects I really recommend so now I want to get back again to

106
00:20:23,480 --> 00:20:34,000
our brief exploration here so we have looked at the help and then we can also look at the

107
00:20:34,000 --> 00:20:43,080
help of the talk command and one thing which I would like to point out that I haven't written

108
00:20:43,080 --> 00:20:51,320
so that the this code what we have here doesn't really contain any infrastructure for all this so

109
00:20:51,320 --> 00:21:00,120
all the help text for example what you can see are coming from these doc strings and that is that

110
00:21:00,120 --> 00:21:09,160
is all created by created by typer so that is one of the major reasons why I say I think that it's

111
00:21:09,160 --> 00:21:19,240
a cool idea to use such a such a library because these things all just come with without any

112
00:21:19,240 --> 00:21:28,480
additional need for for setup or whatever and then I just want to explore a little bit further

113
00:21:28,480 --> 00:21:38,800
that for example we can also look at the help of this command where we can see that okay you can

114
00:21:38,800 --> 00:21:47,080
create many you can create a new token these are the parameters which it gets and if we

115
00:21:47,080 --> 00:21:56,200
look at it again if you look at the edit it has also very similar parameters and that's

116
00:21:56,200 --> 00:22:04,600
where where probably this consistency point comes into the comes into the picture that we

117
00:22:04,600 --> 00:22:18,520
these these things should really look quite quite similar okay so

118
00:22:18,520 --> 00:22:36,760
as a next point I would like to ask you to all of you who already have managed to set this up to

119
00:22:36,760 --> 00:22:46,720
try to install a shell completion for this tool which we already have so let's say that we have

120
00:22:47,400 --> 00:22:53,960
we have three minutes for this exercise so if you have already set this up and installed please

121
00:22:53,960 --> 00:23:15,680
try to figure out how to install a shell completion for this you have feel free to discuss it and

122
00:23:15,680 --> 00:23:29,040
sorry how I get there I generated this project with cookie cutter

123
00:23:29,040 --> 00:23:41,600
for the oh that it's main where is it coming from that's an excellent question so if everything

124
00:23:41,760 --> 00:23:48,520
event as planned then this should come from the cookie cutter so the post-generation

125
00:23:48,520 --> 00:24:10,520
script of the cookie cutter contains so here in this post-generation we theoretically also

126
00:24:10,520 --> 00:24:21,280
created a git repository and if that if something went wrong perhaps it was the the poetry part

127
00:24:21,280 --> 00:24:46,840
to run correctly so the poetry installation for you sorry you think so okay yes so if you

128
00:24:46,840 --> 00:25:04,080
are in the Python catalog directory now I so if you are in the Python catalog directory can

129
00:25:04,080 --> 00:25:12,000
you see all the help send this stuff there okay and I just out of curiosity is it a

130
00:25:12,000 --> 00:25:41,280
GitHub repository also do you know that so if you run it for this real completion okay good

131
00:25:41,280 --> 00:25:51,400
question so in one of those helps so I theoretically the help should contain some instructions how to

132
00:25:51,400 --> 00:26:04,440
install shell completion but the help for the root command by concatalogic self yes

133
00:26:21,400 --> 00:26:42,520
okay so I think that it's it's time to discuss this so if we look at

134
00:26:42,520 --> 00:26:52,120
PyCon catalog dash dash help then besides the version for which we saw the code here

135
00:26:52,120 --> 00:27:01,800
and so this version this is a this is an option defined in our code but there are two other options

136
00:27:01,800 --> 00:27:12,480
here as well install completion and show completion and if everything goes as planned then this install

137
00:27:12,480 --> 00:27:20,360
completion this this should install shell completion and this will be very handy as you follow along

138
00:27:20,360 --> 00:27:33,960
and do some do some playing around this will you will get the completion for order comments sorry

139
00:27:33,960 --> 00:27:43,920
that is exactly that is coming from typer so that is why we don't even have code for it

140
00:27:43,920 --> 00:28:00,120
excellent question the excellent point that is the caveat that this install completion works fine

141
00:28:00,120 --> 00:28:07,320
most of the time and for example I use z shell and there it that didn't really so it didn't work out

142
00:28:07,320 --> 00:28:18,160
of the box but what I can do instead there is also this show completion and if I add it to my to my

143
00:28:18,160 --> 00:28:27,600
zshrc then it actually works for that's why it works for me so there are these are so the major

144
00:28:27,840 --> 00:28:34,080
the default way to install the shell completion is with dash dash install completion and if that

145
00:28:34,080 --> 00:28:39,920
doesn't work and you know that you are using a custom shell then this is the second way how to

146
00:28:39,920 --> 00:28:47,320
try this show completion and then by appended to the

147
00:29:09,920 --> 00:29:23,160
so has it been successful for okay cool then I would like to explore this project a little bit

148
00:29:23,160 --> 00:29:32,640
more and I would like to just show again these help desks help texts which we have looked at so

149
00:29:32,640 --> 00:29:41,920
there is a create hub there is an edit hub and I'm not sure whether you have noticed but I made

150
00:29:41,920 --> 00:29:49,440
the mistake there there are so these various texts here this contained underscores which

151
00:29:49,440 --> 00:29:56,600
probably isn't too nice so I would like to ask you to so the next exercise is please find the

152
00:29:56,600 --> 00:30:07,880
place where this is configured in the in the code and adjust the help desk help text for all these

153
00:30:07,880 --> 00:30:14,320
various options so five minutes let's say for this

154
00:30:14,320 --> 00:30:29,120
yes that sounds like a good candidate

155
00:30:37,960 --> 00:30:41,480
so

156
00:30:41,480 --> 00:30:42,320
So.

157
00:33:11,480 --> 00:33:23,480
So in the meantime, if you have any questions or any, so still things with the setup, then please, please let me know. We can look at it.

158
00:33:23,480 --> 00:33:27,480
Yes.

159
00:33:28,480 --> 00:33:34,480
I'm looking at anaconda, I have seen that with the install conditional.

160
00:33:34,480 --> 00:33:35,480
Oh.

161
00:33:35,480 --> 00:33:42,480
Which I'll comment in the description. I'm sorry, I'm struggling online, but have you ever seen that before?

162
00:33:42,480 --> 00:33:56,480
No, I don't know. But instead, if you know where your configuration file is, similar to the ZSHRC, which I had, I don't know whether or not I'm a conda chef. You have something like that?

163
00:33:56,480 --> 00:33:58,480
Then.

164
00:33:59,480 --> 00:34:07,480
Because so instead, install completion, try to invoke it with show completion.

165
00:34:11,480 --> 00:34:13,480
I'm not sure.

166
00:34:13,480 --> 00:34:14,480
Sorry?

167
00:34:14,480 --> 00:34:16,480
I'm not sure it is there.

168
00:34:16,480 --> 00:34:22,480
So here, but here where you said install completion, instead, say dash dash show completion.

169
00:34:23,480 --> 00:34:25,480
Oh, OK.

170
00:34:26,480 --> 00:34:36,480
And if you run something else, like Python catalog dash dash help, what happens?

171
00:34:36,480 --> 00:34:38,480
That's fine.

172
00:34:38,480 --> 00:34:40,480
That's fine. OK.

173
00:34:40,480 --> 00:34:51,480
I'm sorry, I am not that familiar with anaconda, but it's not that important. It's just convenient if you don't need to type that much.

174
00:34:51,480 --> 00:34:56,480
So.

175
00:34:56,480 --> 00:35:11,480
Have you managed to update these names? Any ideas where to look for it and how to adjust those?

176
00:35:11,480 --> 00:35:18,480
Yes.

177
00:35:18,480 --> 00:35:25,480
The help text of.

178
00:35:25,480 --> 00:35:41,480
OK, exactly.

179
00:35:41,480 --> 00:35:54,480
So at line 20, we have defined this short name option, and if I replace it with a base, then it is fixed.

180
00:35:54,480 --> 00:35:59,480
And.

181
00:35:59,480 --> 00:36:06,480
Here as well.

182
00:36:06,480 --> 00:36:10,480
Here, perhaps it's better even that way.

183
00:36:10,480 --> 00:36:14,480
Yes.

184
00:36:14,480 --> 00:36:18,480
So, and if I now run this again.

185
00:36:18,480 --> 00:36:25,480
Then, of course, it has been adjusted. So thanks. That's exactly the right answer. And here I want to point out one thing.

186
00:36:25,480 --> 00:36:33,480
So the main reason why I was showing this exercise is that if we look at this code in the talk CLI, we didn't really edit the command.

187
00:36:33,480 --> 00:36:46,480
So we didn't do anything with the add or the edit command. Instead, what we the trick what we are using here is that we have defined an option in.

188
00:36:46,480 --> 00:37:00,480
In the space of this talk CLI module, and then we can see that this short name option is actually what we reference both in the create and in the edit commands.

189
00:37:00,480 --> 00:37:11,480
And when I was showing the CLI G and asking for asking about, hey, what, what are some nice properties of an application?

190
00:37:11,480 --> 00:37:22,480
And when somebody mentioned a very good point consistency, I really want to point out this feature from and this possibility from type.

191
00:37:23,480 --> 00:37:27,480
The type of options are under the hood.

192
00:37:27,480 --> 00:37:37,480
Not actually are Python objects, and you can define them and reuse them and say that, OK, I have two commands at it and create.

193
00:37:37,480 --> 00:37:44,480
They are very closely related, so probably they should use the same options.

194
00:37:44,480 --> 00:37:57,480
And one great point about this is that it is, of course, less code duplication, but it also also makes the application immediately more consistent.

195
00:37:57,480 --> 00:38:04,480
Any idea what is the biggest advantage of this? So also biggest.

196
00:38:04,480 --> 00:38:13,480
So besides having nice, consistent help text, what is what is another benefit of this using of sharing options?

197
00:38:19,480 --> 00:38:23,480
So, but I sorry, perhaps the question was phrased in the wrong way.

198
00:38:23,480 --> 00:38:33,480
So what we have just seen is that because we share this option, so we defined a short name option here and then both create and edit just reference it.

199
00:38:33,480 --> 00:38:40,480
And this helped us with the help text that it is nice and consistent, and it needs to be edited only once.

200
00:38:40,480 --> 00:38:48,480
I my opinion is that the help text is the smaller benefit, and there is an even bigger one.

201
00:38:51,480 --> 00:38:53,480
Sorry, a bit louder.

202
00:38:53,480 --> 00:39:05,480
So thanks a lot for this very good point.

203
00:39:05,480 --> 00:39:16,480
So, yeah, exactly. There is one central place to make it instead of needing to update multiple things and very easy, very easy to oversee them, unfortunately.

204
00:39:16,480 --> 00:39:28,480
And what I would like to point out that this is true not only for the help text, which we have just edited, but just as much also for the option name itself.

205
00:39:28,480 --> 00:39:53,480
So if I am just defining the options here in the command itself, then it could anytime happen that in one place I say, let's say short name, and in the other one I write it as one word, and then the next one it is just called name or whatever.

206
00:39:53,480 --> 00:40:09,480
So it could easily happen if we define all of them separately, that even the option name is not consistent, and having them defined at one place, this is exactly how, so this is one good technique for making them the same everywhere.

207
00:40:09,480 --> 00:40:24,480
My next question is that there are some other, so here at the beginning of the file I have defined only short name and short name duration, and so these properties related to the various fields.

208
00:40:24,480 --> 00:40:37,480
And I would like, but if we look at the help, there are some other options, so this plain and JSON, which we are going to play then in the next session.

209
00:40:37,480 --> 00:41:00,480
And where are these coming from? So where does the create command get those last three options from?

210
00:41:00,480 --> 00:41:29,480
Yes, exactly. And for this application this is a small overkill, because we have actually most of our logic is in this talk CLI, but generally I think it's a very good pattern to see.

211
00:41:30,480 --> 00:41:46,480
So we say that okay, we have the common options, which contain things which are, actually these options you could have in any kind of command line application, it isn't specific for anything.

212
00:41:46,480 --> 00:41:58,480
And then in the talk CLI we define the options which are really talk specific, like the duration of the talk and YouTube video ID and stuff like that.

213
00:41:58,480 --> 00:42:27,480
So, and actually this is also one of the reasons why I started with Cookie Cutter. One thing is that I really recommend this. So this should be perhaps one of the, this was one of the main lessons of this workshop, that consistency is very variable, and one really good tool to achieve it is using the template like Cookie Cutter.

214
00:42:27,480 --> 00:42:43,480
And the second thing is which we can really nicely observe, I think if we use such a template, that many of the, that a lot of the stuff which we have here is actually very, very common and can be used in many different domains.

215
00:42:43,480 --> 00:43:00,480
And then the things which are really specific for talks and this application, so we can focus on them much more if we use a template like Cookie Cutter.

216
00:43:00,480 --> 00:43:13,480
So, yes, this is where all options came from. So some of them are defined here in the common options and some, and the talk specifics here in the talk CLI.

217
00:43:13,480 --> 00:43:28,480
And then one thing I would like to suggest before the break and before we are starting to actually add data to this application, and we did that right now.

218
00:43:28,480 --> 00:43:43,480
So the application will use a SQLite database as a storage, and we should set up our development environment, a separate development database.

219
00:43:43,480 --> 00:44:00,480
So again, this is an exercise, so please in the next two, three minutes look around in that project and try to figure out how to set up, how to configure a development database.

220
00:44:00,480 --> 00:44:10,480
In for that exercise, it's not, so yes, this should be found somewhere in the internal documentation of the project.

221
00:44:10,480 --> 00:44:21,480
And this should be a test whether the intuitive part, which was mentioned by one audience member, how much it fulfills this requirement.

222
00:44:21,480 --> 00:44:41,480
Yes, so config.pi is.

223
00:44:41,480 --> 00:45:04,480
So there was one very good comment that config.pi is something very relevant for this indeed.

224
00:45:04,480 --> 00:45:25,480
Mm hmm.

225
00:45:25,480 --> 00:45:52,480
So there was a question whether it's a good approach to define a second database for development database.

226
00:45:52,480 --> 00:46:05,480
This has some drawbacks because we want to use this database the very same way in development and production environment, but it needs to talk to another database.

227
00:46:05,480 --> 00:46:08,480
That is what we want to achieve.

228
00:46:08,480 --> 00:46:15,480
And then there is a third environment, which we probably should keep in mind, and this is test.

229
00:46:15,480 --> 00:46:27,480
And the way how I recommend to do it is here in the described in the readme that if we look at this config, it uses PIDENTIC.

230
00:46:27,480 --> 00:46:41,480
So it uses the settings class from PIDENTIC to define the path of this database.

231
00:46:41,480 --> 00:46:51,480
And PIDENTIC has, and this setting has this possibility to refer to an environment variable with this mOptional parameter.

232
00:46:51,480 --> 00:47:04,480
So the way to set up the development databases, which I recommend, is to change the value of this environment variable, Python catalog DB pass.

233
00:47:04,480 --> 00:47:21,480
And this is what is also described in this generated readme that before we add and manipulate any data, we set this.

234
00:47:21,480 --> 00:47:32,480
And for a workshop like this, it is not such an important thing to do because otherwise we would write into this default database.

235
00:47:32,480 --> 00:47:35,480
Okay, not such a big problem.

236
00:47:35,480 --> 00:47:41,480
This step is, I think, very important if you are developing a command line application for own usage.

237
00:47:41,480 --> 00:47:47,480
Like let's say you would have a similar thing, but not for PyCon talks, but for your books.

238
00:47:47,480 --> 00:47:57,480
And in the first version, perhaps you develop something and have a kind of working version, which you start to use on a day to day basis.

239
00:47:57,480 --> 00:48:04,480
And then afterwards you start adding new features, experimenting, and then it's very easy to mix it up.

240
00:48:04,480 --> 00:48:17,480
And that's a point where it's very useful to distinguish between development and so to say production environment.

241
00:48:17,480 --> 00:48:32,480
And so that's why I recommend this adding as a next step.

242
00:48:32,480 --> 00:48:41,480
And then if we consider there is a third very important environment, and this is the test environment.

243
00:48:41,480 --> 00:48:55,480
And of course, when I go here and run these 20 tests, I don't want them to put any data into my real database.

244
00:48:55,480 --> 00:49:04,480
And for that, we can use a PyText fixture. Who is familiar with PyText fixtures?

245
00:49:04,480 --> 00:49:21,480
Okay, so then I am not going to discuss that in great length, but for this kind of SQLite storage, this is probably the easiest way to have a fixture we don't know how to use.

246
00:49:21,480 --> 00:49:27,480
And then we have set up our test environment.

247
00:49:27,480 --> 00:49:35,480
Okay.

248
00:49:35,480 --> 00:49:58,480
And now that we have seen a little bit around in our application, I will just commit the changes with the update help text.

249
00:49:58,480 --> 00:50:10,480
And then I would suggest that before we add some data and play around with this a bit more, let's have a 15 minute break.

250
00:50:10,480 --> 00:50:23,480
And if you have any questions regarding the setup or whatever, then please come to me in the break and we'll try to figure it out.

251
00:50:23,480 --> 00:50:36,480
I think that so far we have mainly just looked around.

252
00:50:36,480 --> 00:50:46,480
So if you want to catch up, the important and if you got stuck somewhere, the important step is really this to generate the project.

253
00:50:46,480 --> 00:50:54,480
And the second thing which I would suggest is that I will just upload the repository as it is now in my environment.

254
00:50:54,480 --> 00:51:07,480
And then if you have difficulties with the cookie cutter or whatever setup you can clone the repository directly and then use that instead of trying to generate it.

255
00:51:07,480 --> 00:51:13,480
Oh, okay.

256
00:51:13,480 --> 00:51:19,480
That's okay.

257
00:51:19,480 --> 00:51:23,480
What were those changes?

258
00:51:23,480 --> 00:51:27,480
Yeah, yeah.

259
00:51:27,480 --> 00:51:33,480
Okay.

260
00:51:33,480 --> 00:51:41,480
Okay, so we are having a break and we will continue at 10 10 please.

261
00:51:41,480 --> 00:51:51,480
So should we continue?

262
00:51:51,480 --> 00:51:57,480
So thanks a lot for the good questions in the break.

263
00:51:57,480 --> 00:52:02,480
So here you can find this repository with the current code.

264
00:52:02,480 --> 00:52:24,480
So if you if the code generation with cookie cutter didn't work correctly for whichever reason, then this is a way to so this is a possibility to just clone this repository and continue working with that version.

265
00:52:24,480 --> 00:52:32,480
And then there was another great question about these.

266
00:52:32,480 --> 00:52:37,480
These resource which we have discussed here the CLI G site.

267
00:52:37,480 --> 00:52:41,480
I have added a link to this as well.

268
00:52:41,480 --> 00:52:58,480
So what I would like us to do next is to explore a little bit this create command which we have.

269
00:52:58,480 --> 00:53:20,480
And I would like and so the first exercise would be to add some add some talks to this repository and see so discover what are the various possibilities of adding this.

270
00:53:20,480 --> 00:53:28,480
So like.

271
00:53:28,480 --> 00:53:57,480
Let's just say take three minutes three minutes and try to use the create command and add some talks and see how that how that command works.

272
00:53:57,480 --> 00:54:01,480
Good question.

273
00:54:01,480 --> 00:54:06,480
Not so the question was whether it should be Python catalog create.

274
00:54:06,480 --> 00:54:11,480
Well, I would suggest that.

275
00:54:11,480 --> 00:54:27,480
To each talk create. Yes. And I'm just.

276
00:54:27,480 --> 00:54:30,480
So.

277
00:54:30,480 --> 00:54:32,480
So let's just.

278
00:54:32,480 --> 00:54:35,480
Look here.

279
00:54:35,480 --> 00:54:38,480
And if we look at that, that helps.

280
00:54:38,480 --> 00:54:42,480
So hopefully that.

281
00:54:42,480 --> 00:54:46,480
Would be the discover.

282
00:55:12,480 --> 00:55:33,480
So.

283
00:55:33,480 --> 00:56:00,480
So.

284
00:56:00,480 --> 00:56:04,480
So.

285
00:56:30,480 --> 00:56:55,480
So.

286
00:56:55,480 --> 00:57:22,480
So.

287
00:57:22,480 --> 00:57:37,480
So.

288
00:57:37,480 --> 00:57:58,480
So.

289
00:57:58,480 --> 00:58:00,480
Exactly.

290
00:58:28,480 --> 00:58:33,480
Pick one from the from the schedule schedule I see.

291
00:58:33,480 --> 00:58:34,480
So short name.

292
00:58:34,480 --> 00:58:45,480
Let's say it's Python syntactic sugar.

293
00:58:45,480 --> 00:58:52,480
Then speaker name is.

294
00:58:52,480 --> 00:59:01,480
And the title is.

295
00:59:01,480 --> 00:59:07,480
And I don't know how long it will take because this talk will be only on Saturday.

296
00:59:07,480 --> 00:59:09,480
And.

297
00:59:09,480 --> 00:59:13,480
And.

298
00:59:13,480 --> 00:59:15,480
We have created.

299
00:59:15,480 --> 00:59:19,480
And how exactly how.

300
00:59:19,480 --> 00:59:21,480
How thank you for pointing it out.

301
00:59:22,480 --> 00:59:24,480
Of creating.

302
00:59:24,480 --> 00:59:30,480
Creating a talk says that instead of passing in interactively.

303
00:59:30,480 --> 00:59:33,480
We we can pass in options.

304
00:59:33,480 --> 00:59:44,480
And say, for example, there is another token Saturday, which is called Python in terms of Python intercept scale.

305
00:59:44,480 --> 00:59:50,480
And if I just pass in this option passing this, it also created a created a talk for us.

306
00:59:50,480 --> 00:59:52,480
Why does it why does it make sense?

307
00:59:52,480 --> 00:59:54,480
So what's what's the reason?

308
00:59:54,480 --> 00:59:58,480
Why did we buy did we choose this set up for?

309
00:59:58,480 --> 01:00:00,480
So these two possibilities.

310
01:00:00,480 --> 01:00:13,480
Yes, you can automate.

311
01:00:13,480 --> 01:00:16,480
That is a very, very important point.

312
01:00:16,480 --> 01:00:19,480
And this is actually where.

313
01:00:19,480 --> 01:00:32,480
So if I if I organized this workshop in a more theoretical way, that would be the very, very first thing which I pointed out, which is also in the title of this.

314
01:00:32,480 --> 01:00:38,480
Of the of this session that human friendly and.

315
01:00:38,480 --> 01:00:41,480
And machine friendly applications.

316
01:00:41,480 --> 01:00:51,480
And this interactivity is one of the major patterns which I would like you to have as a takeaway from this from this session.

317
01:00:51,480 --> 01:00:59,480
And it is it is actually again, I get back to this common line interface guidelines, which I would like to point out.

318
01:00:59,480 --> 01:01:02,480
This is a so this has been this is an open source guideline.

319
01:01:02,480 --> 01:01:04,480
It has been written by a community.

320
01:01:04,480 --> 01:01:08,480
So I'm just keep referencing it because it's I think it's great.

321
01:01:08,480 --> 01:01:14,480
But it's not so it's not it's generally a good resource and not specific to this workshop.

322
01:01:14,480 --> 01:01:18,480
And here there are various principles around conversation as the norm.

323
01:01:18,480 --> 01:01:31,480
For example, that if even if some required parameter is missing, it's a good idea to prompt for it, assuming that it's a human using it.

324
01:01:31,480 --> 01:01:34,480
And also this interactivity point.

325
01:01:35,480 --> 01:01:41,480
And this is exactly what we are going to discover a bit now in the code.

326
01:01:41,480 --> 01:01:50,480
And my question is any ideas where this related part can be found in the code?

327
01:01:50,480 --> 01:01:54,480
So.

328
01:01:54,480 --> 01:01:57,480
Where should I go?

329
01:01:57,480 --> 01:02:02,480
So if we look in this talk, see, I.

330
01:02:02,480 --> 01:02:06,480
Here, for example, both for the create.

331
01:02:06,480 --> 01:02:16,480
And for the and then also for several other comments, we also have defined an option.

332
01:02:16,480 --> 01:02:24,480
This interactive flag, it also comes from those from those common options, which are the.

333
01:02:24,480 --> 01:02:28,480
From those common options, which which we have discussed.

334
01:02:28,480 --> 01:02:36,480
So from from this way and it is by default true.

335
01:02:36,480 --> 01:02:43,480
And this regulates whether these whether this kind of prompts are shown.

336
01:02:43,480 --> 01:02:46,480
So, for example, if I get back now.

337
01:02:46,480 --> 01:02:47,480
And.

338
01:02:49,480 --> 01:03:02,480
So if I just say to create and then I will be prompted for various for various properties instead, if I say to create no input.

339
01:03:02,480 --> 01:03:07,480
Then suddenly I get an error.

340
01:03:07,480 --> 01:03:10,480
Or also, if I say.

341
01:03:10,480 --> 01:03:11,480
If I say.

342
01:03:12,480 --> 01:03:14,480
To create no interactive.

343
01:03:14,480 --> 01:03:25,480
So here we can see that these are so this is also a nice functionality font type or that we can define multiple synonyms for one option.

344
01:03:25,480 --> 01:03:35,480
And this helps with the consistency in the sense that there are unfortunately several things where there is no real standard terminology for it.

345
01:03:35,480 --> 01:03:40,480
And multiple people may find something else as intuitive.

346
01:03:40,480 --> 01:03:46,480
So this is this is a good way to provide my options and.

347
01:03:48,480 --> 01:03:56,480
And one important idea behind this is that we can have multiple ways how we call these scripts.

348
01:03:56,480 --> 01:04:04,480
So one very obvious, obvious ways to some human sitting there and typing stuff.

349
01:04:04,480 --> 01:04:13,480
Then there is another possibility that we we want to use it in a in a string of scripts.

350
01:04:13,480 --> 01:04:17,480
And in that case, of course, we don't provide.

351
01:04:17,480 --> 01:04:19,480
We don't want to provide prompts.

352
01:04:19,480 --> 01:04:26,480
Instead, we want to rely on options being passed and everything.

353
01:04:26,480 --> 01:04:29,480
Working automatically.

354
01:04:29,480 --> 01:04:35,480
This is for that a very common use cases, continuous integration systems, for example.

355
01:04:35,480 --> 01:04:36,480
That.

356
01:04:39,480 --> 01:04:40,480
That this.

357
01:04:40,480 --> 01:04:41,480
I'm sorry.

358
01:04:41,480 --> 01:04:43,480
So yeah.

359
01:04:43,480 --> 01:04:48,480
And then I want to emphasize this.

360
01:04:48,480 --> 01:04:49,480
This.

361
01:04:51,480 --> 01:04:54,480
So this is coming from the Python standard library.

362
01:04:54,480 --> 01:04:57,480
This standard input is.

363
01:04:58,480 --> 01:05:07,480
Whether it's a terminal and if it's if it's not, then we don't even look at the interactive flag.

364
01:05:07,480 --> 01:05:13,480
We just assume that, OK, we can't expect a human to provide an input.

365
01:05:13,480 --> 01:05:16,480
And I want to just get back to the.

366
01:05:17,480 --> 01:05:20,480
To the code of this create command.

367
01:05:27,480 --> 01:05:35,480
If you call if you pipe something into the standard input, then it will be false.

368
01:05:35,480 --> 01:05:41,480
So if you call it from a script, I would suggest to add and you don't want to get prompt.

369
01:05:41,480 --> 01:05:46,480
Then I then add the no interactive or no input flags.

370
01:05:48,480 --> 01:05:54,480
And here, if we now look and look at the code a bit, then.

371
01:05:56,480 --> 01:06:06,480
Then we can see that first we try to figure out whether any fields have been provided in the first place.

372
01:06:06,480 --> 01:06:11,480
So for this we use this get field values function.

373
01:06:11,480 --> 01:06:19,480
And again, I want to point out a very important feature from type for this.

374
01:06:19,480 --> 01:06:21,480
And this is this context.

375
01:06:22,480 --> 01:06:23,480
So if we.

376
01:06:24,480 --> 01:06:26,480
Just go back there.

377
01:06:26,480 --> 01:06:28,480
You can see that the first.

378
01:06:30,480 --> 01:06:37,480
Argument of this create function is a type of is a type of context.

379
01:06:37,480 --> 01:06:45,480
And this contains among other orders, all the arguments and options that have been passed.

380
01:06:46,480 --> 01:06:51,480
And this is what we use in this get field values method.

381
01:06:51,480 --> 01:06:57,480
And this is the post method where we look at the.

382
01:06:58,480 --> 01:07:04,480
So we get to the options from the from the context.

383
01:07:05,480 --> 01:07:12,480
And here is the important distinction that if we are not in an interactive mode, then.

384
01:07:13,480 --> 01:07:16,480
We just exit with an error.

385
01:07:16,480 --> 01:07:22,480
And if otherwise, if we are in interactive mode, then.

386
01:07:23,480 --> 01:07:27,480
We ask the user for further fields.

387
01:07:27,480 --> 01:07:35,480
And in order to do that, we use this prompt from the this is coming from the library reach.

388
01:07:35,480 --> 01:07:43,480
And this gives us a convenient way to store all the various field names that are provided and.

389
01:07:43,480 --> 01:07:44,480
That.

390
01:07:46,480 --> 01:07:47,480
OK.

391
01:07:51,480 --> 01:07:53,480
My next.

392
01:07:55,480 --> 01:07:58,480
Next question about this is.

393
01:08:01,480 --> 01:08:04,480
That here we.

394
01:08:05,480 --> 01:08:10,480
So here we got some some error.

395
01:08:10,480 --> 01:08:17,480
What are the important ways to distinguish an error from a from a from a successful outcome?

396
01:08:17,480 --> 01:08:22,480
So how how can we see whether a comment has been successful?

397
01:08:24,480 --> 01:08:26,480
Sorry, I didn't hear that.

398
01:08:28,480 --> 01:08:31,480
The colors of the prompt. Yes, that's a very good point.

399
01:08:34,480 --> 01:08:37,480
The exit code. Yes, that's also.

400
01:08:37,480 --> 01:08:38,480
That's also.

401
01:08:47,480 --> 01:08:49,480
Standard error. Yes, exactly.

402
01:08:49,480 --> 01:08:57,480
That's what those were exactly the answers I was looking at looking for.

403
01:08:57,480 --> 01:09:05,480
And I would like to switch back to these basics where last time we mentioned that we have already.

404
01:09:05,480 --> 01:09:22,480
Followed the very first basic guideline by using Typer and these are and other so-called basics which we should really follow in even in the very small and not and not frequently used command line scripts.

405
01:09:22,480 --> 01:09:25,480
These are these two things.

406
01:09:25,480 --> 01:09:31,480
So the first is to return zero exit code on success, non zero on failure.

407
01:09:31,480 --> 01:09:38,480
And then the second one is that distinguishing between the different types of output.

408
01:09:38,480 --> 01:09:42,480
So standard out and and standard error.

409
01:09:43,480 --> 01:09:45,480
And yes.

410
01:10:01,480 --> 01:10:06,480
Map the map the non zero exit codes to the most important failure modes.

411
01:10:06,480 --> 01:10:09,480
Yes, that's a good.

412
01:10:09,480 --> 01:10:12,480
That's a great question.

413
01:10:12,480 --> 01:10:18,480
As far as I remember, the guideline doesn't contain further suggestions.

414
01:10:18,480 --> 01:10:30,480
And I have to admit that in this regard, this cookie cutter we are working at is also a bit lazy because anytime there is an error, I think it returns one.

415
01:10:30,480 --> 01:10:38,480
But I would say that the so again, it depends on the use case.

416
01:10:38,480 --> 01:10:52,480
But the very general guideline, which we can say for any kind of command line application, whatever that zero on access, zero on success, non zero on on any kind of failure.

417
01:10:52,480 --> 01:11:02,480
And then how that kind, what types of failure exist and how to group them and what is a meaningful coding for them there?

418
01:11:02,480 --> 01:11:09,480
It's more difficult to give some general advice because it very much depends on what your application is doing.

419
01:11:09,480 --> 01:11:18,480
And what I would like to point out here, how this happens in the code.

420
01:11:18,480 --> 01:11:30,480
So if, for example, if we didn't receive any input and we are in not interactive mode, then we call this exit.

421
01:11:30,480 --> 01:11:34,480
So there is this exit with error function.

422
01:11:34,480 --> 01:11:43,480
And here come here come the two other points, which the two other people mentioned.

423
01:11:44,480 --> 01:11:49,480
So one is that we write to the standard error.

424
01:11:49,480 --> 01:11:55,480
And then the second is that we use this red color, which is, of course, optional.

425
01:11:55,480 --> 01:12:03,480
But I think that it is a really nice feature from rich and usually whatever we.

426
01:12:03,480 --> 01:12:11,480
So, so, so what, whatever we print with the rich interface, we can always provide some styling.

427
01:12:11,480 --> 01:12:14,480
I'm I'm usually very careful with it.

428
01:12:14,480 --> 01:12:24,480
And one caveat is that especially if the application is intended for many users, they might use many different terminals with various settings.

429
01:12:24,480 --> 01:12:35,480
So with the back to this, having some red, for example, for error, that is a good standard, so to say.

430
01:12:35,480 --> 01:12:41,480
And then we also return the type of exit.

431
01:12:41,480 --> 01:12:46,480
And it is the important part that this code has by default.

432
01:12:46,480 --> 01:12:51,480
So the value one and so not zero value.

433
01:12:51,480 --> 01:12:56,480
And this is one thing I have to admit that for a for a while it was for me difficult to remember that.

434
01:12:56,480 --> 01:12:58,480
OK, what is success? What is fair?

435
01:12:58,480 --> 01:13:01,480
What is the value zero?

436
01:13:01,480 --> 01:13:03,480
So like zero, like nothing.

437
01:13:03,480 --> 01:13:04,480
It means success.

438
01:13:04,480 --> 01:13:07,480
It it was a bit unintuitive for me for a while.

439
01:13:07,480 --> 01:13:09,480
And then yes.

440
01:13:09,480 --> 01:13:13,480
Remember, there's only one way to succeed.

441
01:13:13,480 --> 01:13:25,480
Exactly. That was exactly that was when when I remembered it that for failure, we have many, many different ways how that can happen.

442
01:13:25,480 --> 01:13:32,480
And talking about success and failure, the next thing I would like to check out is the.

443
01:13:32,480 --> 01:13:37,480
The next thing I would like to check out is our tests.

444
01:13:37,480 --> 01:13:50,480
And here, for example, for this create command, we have some basic tests where we run only.

445
01:13:50,480 --> 01:14:01,480
Only so we provide only the short name and then we check the two important things to check that the exit code is zero.

446
01:14:01,480 --> 01:14:05,480
The only check that there is something in the standard out.

447
01:14:05,480 --> 01:14:24,480
And yes.

448
01:14:24,480 --> 01:14:27,480
Yes, that's a good question.

449
01:14:27,480 --> 01:14:30,480
I don't know.

450
01:14:30,480 --> 01:14:33,480
Now we have tried that, tried out multiple people.

451
01:14:33,480 --> 01:14:41,480
So if has anybody seen something strange instead of the emoji after creating a talk?

452
01:14:41,480 --> 01:14:45,480
So, I mean, it's absolutely not a non-representative simple.

453
01:14:45,480 --> 01:14:53,480
I agree with you that it is it depends very much on the intended audience of the tool, whether you want to add it.

454
01:14:53,480 --> 01:15:01,480
I think that often it's nice and often it's more concise way of explaining something.

455
01:15:01,480 --> 01:15:04,480
Well, in that case, it's just a decoration.

456
01:15:04,480 --> 01:15:13,480
But, for example, if something was successful, then having a checkmark emoji is often more informative than.

457
01:15:13,480 --> 01:15:18,480
Adding something like done or whatever text so you can see the better.

458
01:15:18,480 --> 01:15:25,480
But I absolutely agree that that it is not always a good idea.

459
01:15:25,480 --> 01:15:36,480
And my next question is that if we look at the output of create again, I just scrolled this up a bit for a successful create actually.

460
01:15:36,480 --> 01:15:45,480
We can see that. So now we can see that there is this new talk created text and then some other stuff.

461
01:15:45,480 --> 01:15:53,480
And this new talk created is in the standard error and the other stuff is in the standard out.

462
01:15:53,480 --> 01:15:56,480
And my question is again, why?

463
01:15:56,480 --> 01:16:15,480
Exactly.

464
01:16:15,480 --> 01:16:28,480
Exactly. That's the point that I just look back here to the exact phrasing that log messages are sent.

465
01:16:28,480 --> 01:16:38,480
This these things should go to the standard error and these should not be fed into the next command.

466
01:16:38,480 --> 01:17:03,480
And again, I would like to go back to our two different types of users, the humans and the various tools that having some kind of some kind of output that is so like a success message or even a failure message that is very valuable for a human who is sitting there and wants to see what happens.

467
01:17:03,480 --> 01:17:15,480
And but of course, we don't want it to the outcome. And for that, the standard input standard out standard error distinction is a very good, very good tool to do.

468
01:17:15,480 --> 01:17:28,480
And I just want to jump back a bit to this until and show that in the so for each with setting the standard or to true.

469
01:17:28,480 --> 01:17:36,480
That is the way how we can create a standard error console and then right to there.

470
01:17:36,480 --> 01:17:58,480
And one thing which surprised me and I would like to show it for this reason is that for the tests we use this CLI runner, which is also provided by type or and and here by default the standard out and standard error are mixed together.

471
01:17:58,480 --> 01:18:10,480
So if if we want to have separate assertions in the test for standard out and standard error, then you have to provide this mixed STD are false.

472
01:18:10,480 --> 01:18:20,480
When you create the CLI runner instance, I think that it's more logical with the so to test the two things separately.

473
01:18:20,480 --> 01:18:24,480
But but yes, this is how I work.

474
01:18:24,480 --> 01:18:33,480
And and one thing I also want to point out that in the tests.

475
01:18:33,480 --> 01:18:44,480
So in so in the tests, we again see that this non interactive possibilities very valuable because testing the prompts is much more complicated.

476
01:18:44,480 --> 01:18:56,480
And if you just want to have a quick verification that OK, did we manage to create something or no, it's with these options, you have much more much more flexibility there.

477
01:18:56,480 --> 01:19:01,480
So.

478
01:19:01,480 --> 01:19:09,480
With that in mind, my the next exercise would be to please add some more test cases.

479
01:19:09,480 --> 01:19:14,480
So some more test cases to this create command and.

480
01:19:14,480 --> 01:19:20,480
Come up with some ideas, but as would be worth testing.

481
01:19:20,480 --> 01:19:25,480
So let's say let's have five minutes for this.

482
01:21:50,480 --> 01:21:51,480
So.

483
01:22:20,480 --> 01:22:21,480
So.

484
01:22:50,480 --> 01:22:51,480
So.

485
01:23:20,480 --> 01:23:21,480
So.

486
01:23:51,480 --> 01:23:58,480
So what kind of test cases have you come up with and.

487
01:23:58,480 --> 01:24:05,480
It screams at you.

488
01:24:05,480 --> 01:24:10,480
OK.

489
01:24:10,480 --> 01:24:14,480
That's a good one.

490
01:24:14,480 --> 01:24:21,480
Some other ideas.

491
01:24:21,480 --> 01:24:23,480
Mm hmm.

492
01:24:23,480 --> 01:24:28,480
It fails. OK.

493
01:24:28,480 --> 01:24:37,480
Some other points.

494
01:24:37,480 --> 01:24:43,480
So those are two very good, very good ideas.

495
01:24:43,480 --> 01:24:50,480
One thing I think is perhaps often so often overseen is that.

496
01:24:50,480 --> 01:24:54,480
It might make sense to add some more success test cases.

497
01:24:54,480 --> 01:25:00,480
So if we look at here, it is already a parameterized test, but it has only one.

498
01:25:00,480 --> 01:25:05,480
Only one.

499
01:25:05,480 --> 01:25:12,480
So instead, so I would and the only test case which we test here now is that we provide the short name.

500
01:25:12,480 --> 01:25:23,480
This is the only required field and nothing else, which is great, but it might absolutely make sense to provide some more.

501
01:25:23,480 --> 01:25:27,480
Very data and try to figure out and try to check that.

502
01:25:27,480 --> 01:25:35,480
OK, for example, what happens if I provide both the title and.

503
01:25:35,480 --> 01:25:40,480
And the short name is that is that also possible.

504
01:25:40,480 --> 01:25:43,480
So.

505
01:25:43,480 --> 01:25:50,480
If they just go down and.

506
01:25:50,480 --> 01:25:52,480
Now.

507
01:25:52,480 --> 01:26:00,480
OK, sorry.

508
01:26:00,480 --> 01:26:13,480
Oh, I'm missing a comma here.

509
01:26:13,480 --> 01:26:19,480
I'm here for a little time, please.

510
01:26:19,480 --> 01:26:25,480
Yes.

511
01:26:25,480 --> 01:26:31,480
Sorry.

512
01:26:31,480 --> 01:26:36,480
Oh, I think, yes, I have done the parameterizing wrong.

513
01:26:36,480 --> 01:26:51,480
You are absolutely right. Thanks a lot.

514
01:26:51,480 --> 01:27:03,480
And now.

515
01:27:03,480 --> 01:27:15,480
Sorry, does it expect.

516
01:27:15,480 --> 01:27:17,480
I'm not sure about that.

517
01:27:17,480 --> 01:27:19,480
I think.

518
01:27:19,480 --> 01:27:25,480
Yes, so this is the right syntax that the.

519
01:27:25,480 --> 01:27:31,480
For the test cases, this should be in couples and then the.

520
01:27:31,480 --> 01:27:35,480
Parameters of info should go into the list.

521
01:27:35,480 --> 01:27:44,480
And regarding the inbox, I would like to point out one more funny behavior.

522
01:27:44,480 --> 01:27:46,480
Which is.

523
01:27:46,480 --> 01:27:58,480
For example, if we look at this test, so this is a test case for the view command and it tests that what happens if we create something with an already existing short name.

524
01:27:58,480 --> 01:28:00,480
And.

525
01:28:00,480 --> 01:28:05,480
So, so not to not create, sorry. So if we view something with.

526
01:28:05,480 --> 01:28:10,480
If you view something with an existing ID, that is what I saw.

527
01:28:10,480 --> 01:28:14,480
Then this.

528
01:28:14,480 --> 01:28:25,480
Then here it is very important to have this as tier before the ID, because all the so all the.

529
01:28:25,480 --> 01:28:31,480
Or the imp parameters provided to this invoke needs to be strings.

530
01:28:31,480 --> 01:28:38,480
So if it if I just provide the ID as an integer, then it will fail even if.

531
01:28:38,480 --> 01:28:42,480
That itself is a valid command.

532
01:28:42,480 --> 01:28:49,480
So, yes, but so this is this is one of the things which surprised me with the inbox and I wanted to mention it.

533
01:28:49,480 --> 01:28:54,480
I am wondering whether you have other tips ideas about the.

534
01:28:54,480 --> 01:29:00,480
About this command line testing module.

535
01:29:00,480 --> 01:29:03,480
And yes.

536
01:29:03,480 --> 01:29:13,480
Sorry, so and then I just wanted to get back to our create tests and the two points which were mentioned verbose very, very good points.

537
01:29:13,480 --> 01:29:19,480
So the so one thing was that if we try to create something with the very same ID.

538
01:29:19,480 --> 01:29:25,480
With the very same short name which we have just created, then it complains.

539
01:29:25,480 --> 01:29:33,480
And the other one was that OK, for the duration, we shouldn't input a text.

540
01:29:33,480 --> 01:29:42,480
It should be a number. And my next question to both of these would be why varies that configured.

541
01:29:42,480 --> 01:29:53,480
So where in this code can not in a test, but where in the production code are these things configured.

542
01:29:53,480 --> 01:29:56,480
In the models, yes.

543
01:29:56,480 --> 01:29:59,480
That's a very good point.

544
01:29:59,480 --> 01:30:08,480
So we mentioned the duration total seconds.

545
01:30:08,480 --> 01:30:16,480
And and yes, here this is just config configured just with the.

546
01:30:16,480 --> 01:30:19,480
With the data type, so.

547
01:30:19,480 --> 01:30:34,480
Nothing special, so so to say, and where is this configured that the show that we can't create a talk with an already existing short name.

548
01:30:34,480 --> 01:30:37,480
Sorry.

549
01:30:37,480 --> 01:30:40,480
Yes, exactly, exactly.

550
01:30:40,480 --> 01:30:42,480
So.

551
01:30:42,480 --> 01:30:46,480
So there we have a.

552
01:30:46,480 --> 01:30:58,480
We have this function to initialize the database, and here we also create a unique index for the short name, which leads me to our next topic.

553
01:30:58,480 --> 01:31:00,480
This short name.

554
01:31:00,480 --> 01:31:06,480
What is the function of this? So why? Why do we have that?

555
01:31:06,480 --> 01:31:16,480
Because yes, the title and the duration. These are really real properties of the talk that the talk usually has a title and.

556
01:31:16,480 --> 01:31:23,480
Yes, yes.

557
01:31:23,480 --> 01:31:26,480
Yes, yes. So if we.

558
01:31:26,480 --> 01:31:30,480
If we go and.

559
01:31:30,480 --> 01:31:36,480
List with at least this with LS.

560
01:31:36,480 --> 01:31:41,480
Then we should be seeing only the short name.

561
01:31:41,480 --> 01:31:47,480
That is so bad. What else is the function? So why is it better than the title or better?

562
01:31:47,480 --> 01:31:52,480
So obviously it's not better, but what? Why do we have it if we have a title anyway?

563
01:31:52,480 --> 01:32:05,480
And hopefully we wouldn't have too many talks with the same title. Yes.

564
01:32:05,480 --> 01:32:08,480
Sorry, I haven't heard that.

565
01:32:08,480 --> 01:32:25,480
Human readable.

566
01:32:25,480 --> 01:32:34,480
Yes, so I am trying to summarize. Please correct me so that it is human readable. That's a very big advantage of it.

567
01:32:34,480 --> 01:32:48,480
And it is, but it can be also used by tools. They may also because of this convention that we use hyphens in it and that it's for humans perhaps easier to read than just a numeric identifier. Yes.

568
01:32:48,480 --> 01:33:03,480
It accepted. Yes, so there is no validation for it. That's a good point. So if we look at the.

569
01:33:03,480 --> 01:33:19,480
At the models, it only just says the the length, but exactly the purpose of this identifier is as you said that it's a it's human readable and but it can be also.

570
01:33:19,480 --> 01:33:33,480
Processed by by tools and if we now I just want to show that it's not only the LS which uses it, but so when we try out this view command.

571
01:33:33,480 --> 01:33:38,480
Let's just see the help first what it says.

572
01:33:38,480 --> 01:33:49,480
So here we need to provide an identifier for the view and this identifier can be the ID or the short name.

573
01:33:49,480 --> 01:33:54,480
And so if I say one.

574
01:33:54,480 --> 01:33:58,480
Or if I say instead.

575
01:33:58,480 --> 01:33:59,480
Python.

576
01:33:59,480 --> 01:34:01,480
Synthetic.

577
01:34:01,480 --> 01:34:03,480
Sugar.

578
01:34:03,480 --> 01:34:05,480
It.

579
01:34:05,480 --> 01:34:20,480
It has exactly the same result and this should have a good should have that advantage that instead of so now with this example it's a bit funny because yes, we need numbers like one and two.

580
01:34:20,480 --> 01:34:22,480
Obviously we can.

581
01:34:22,480 --> 01:34:34,480
So it's easier to keep them in mind, but if you have a like my significantly bigger bigger numbers and more complex and first it's nice to have something.

582
01:34:34,480 --> 01:34:45,480
Human readable readable additionally and the way and the quick way to refer to them, which is probably more convenient than using the whole title.

583
01:34:47,480 --> 01:34:50,480
Okay.

584
01:34:50,480 --> 01:34:57,480
My next question is about this view command that as we have seen it has.

585
01:34:57,480 --> 01:35:01,480
Both arguments and options and.

586
01:35:01,480 --> 01:35:07,480
What do you think about that design and and for the create we had only the options.

587
01:35:07,480 --> 01:35:14,480
So what what are your thoughts on that when when should we use arguments when should we use options.

588
01:35:17,480 --> 01:35:18,480
Yeah.

589
01:35:18,480 --> 01:35:22,480
Yes, arguments are mandatory.

590
01:35:22,480 --> 01:35:27,480
Well, the options here for that command, they are all for controlling output.

591
01:35:27,480 --> 01:35:29,480
I completely agree.

592
01:35:29,480 --> 01:35:37,480
If we look at the other command create here, we chose to have options for the input as well, which.

593
01:35:39,480 --> 01:35:42,480
Is one of the things that we have to do.

594
01:35:42,480 --> 01:35:47,480
So I'm not saying it has to be that way all the time, but we we we chose.

595
01:35:47,480 --> 01:35:57,480
So what might be a reason reason for this setup or generally what are so when is an option and when is when is an argument to be preferred.

596
01:35:57,480 --> 01:35:58,480
Mm hmm.

597
01:35:58,480 --> 01:36:08,480
So what might be a reason reason for this setup or generally what are so when is an option and when when is an argument to be preferred.

598
01:36:08,480 --> 01:36:09,480
Preferred.

599
01:36:28,480 --> 01:36:37,480
Yes, yes, that's I think that the type of documentation even has it that arguments are usually mandatory.

600
01:36:37,480 --> 01:36:42,480
There is a way in type to define optional arguments.

601
01:36:43,480 --> 01:36:50,480
I would say you have to have a very strong reason to do it because it's really against all the conventions of having.

602
01:36:53,480 --> 01:36:59,480
Having over arguments as much as much as optional and then the other.

603
01:36:59,480 --> 01:37:06,480
Sorry, so the other thing is that with the options, they are usually optional.

604
01:37:06,480 --> 01:37:13,480
But for example, in that case with the create, I decided to have the short name also as option for two reasons.

605
01:37:13,480 --> 01:37:24,480
And one is to be consistent with the other fields because it might be a bit confusing if you enter this in one way and the other another way.

606
01:37:25,480 --> 01:37:36,480
The second thing is that it is more explicit because that way I have to sort of say type the option name as well.

607
01:37:39,480 --> 01:37:41,480
It's more visible, but it does.

608
01:37:41,480 --> 01:37:53,480
And then there is a third reason, which is related to this, which is not relevant for this very small example, but really to this being explicit that let's assume that it's not a.

609
01:37:53,480 --> 01:37:58,480
It's a more complex model with three mandatory string fields.

610
01:37:58,480 --> 01:38:11,480
In that case, I would definitely go for three options instead of arguments because probably there is no intuitive order of those three mandatory arguments.

611
01:38:11,480 --> 01:38:31,480
So my general, I would say on this would be that yes, if we have only one real parameter and it's fairly easy to guess.

612
01:38:31,480 --> 01:38:35,480
So let's say intuitive. Somebody use this word.

613
01:38:35,480 --> 01:38:41,480
What this thing might be, then it's probably fine as an argument.

614
01:38:41,480 --> 01:38:50,480
And if we have more things, especially more things with a similar rule, like for the creator, then it's better to go for options.

615
01:38:50,480 --> 01:38:56,480
And I am curious what you think about this setup for the identifier.

616
01:38:56,480 --> 01:39:05,480
So for the view that it accepts both the numeric ID and this other short name.

617
01:39:05,480 --> 01:39:10,480
So what are the what are the pros and cons of this design?

618
01:39:13,480 --> 01:39:14,480
Yes.

619
01:39:20,480 --> 01:39:25,480
The other is that you could imagine you talk to you.

620
01:39:25,480 --> 01:39:27,480
Having multiple.

621
01:39:27,480 --> 01:39:31,480
Identify or seven or three.

622
01:39:31,480 --> 01:39:33,480
So all of them.

623
01:39:33,480 --> 01:39:34,480
So.

624
01:39:56,480 --> 01:39:58,480
Yes.

625
01:39:58,480 --> 01:40:01,480
If it has a space, you have to put it into quotes.

626
01:40:01,480 --> 01:40:11,480
Another idea would be that adding a validation that we only allow some specific format for this short name that.

627
01:40:11,480 --> 01:40:14,480
I mean, that's kind of the other thing that was.

628
01:40:14,480 --> 01:40:17,480
If the name of the.

629
01:40:17,480 --> 01:40:20,480
Forty two.

630
01:40:20,480 --> 01:40:25,480
Sometimes the name of the video is a number.

631
01:40:25,480 --> 01:40:32,480
Yes, I mean, especially in that case, that short name is something constructed by us.

632
01:40:32,480 --> 01:40:35,480
By us, we could theoretically add on.

633
01:40:35,480 --> 01:40:45,480
It would probably really make sense to add another validation that it shouldn't be just an integer because that that really leads to leads to confusion.

634
01:40:45,480 --> 01:40:46,480
That's a very good point.

635
01:40:46,480 --> 01:40:51,480
I haven't thought about that.

636
01:40:51,480 --> 01:40:54,480
And yes, that thing with the multiple arguments.

637
01:40:54,480 --> 01:40:56,480
It's possible.

638
01:40:56,480 --> 01:41:00,480
So type are definitely supported with the view.

639
01:41:00,480 --> 01:41:02,480
I would be.

640
01:41:02,480 --> 01:41:03,480
I don't know.

641
01:41:03,480 --> 01:41:09,480
I associate view with exactly one, but it might be just so.

642
01:41:09,480 --> 01:41:11,480
I don't have a strong opinion.

643
01:41:11,480 --> 01:41:18,480
It's so to say.

644
01:41:18,480 --> 01:41:22,480
Yes, I'm just.

645
01:41:22,480 --> 01:41:29,480
OK.

646
01:41:29,480 --> 01:41:33,480
So I think it's now time for another break.

647
01:41:33,480 --> 01:41:35,480
If you.

648
01:41:35,480 --> 01:41:38,480
Leave it that.

649
01:41:38,480 --> 01:41:42,480
Should we meet at 1116?

650
01:41:42,480 --> 01:41:43,480
Cool.

651
01:41:43,480 --> 01:41:48,480
And thanks a lot for the great.

652
01:41:48,480 --> 01:41:51,480
Participation.

653
01:41:51,480 --> 01:41:58,480
I plan was to look at the command, which we haven't discussed, at least not in depth so far.

654
01:41:58,480 --> 01:42:09,480
And this one is the is the LS command, which right now only this this place.

655
01:42:09,480 --> 01:42:13,480
This first question is yes.

656
01:42:13,480 --> 01:42:15,480
Why?

657
01:42:15,480 --> 01:42:22,480
So I think everyone.

658
01:42:22,480 --> 01:42:29,480
Awesome question that would have been later on the agenda, but let's discuss it now.

659
01:42:29,480 --> 01:42:31,480
So what do you what do you think?

660
01:42:31,480 --> 01:42:37,480
What are so now we also see all these various names on the on the screen.

661
01:42:37,480 --> 01:42:42,480
What do you think about this naming?

662
01:42:42,480 --> 01:42:48,480
Yes.

663
01:42:48,480 --> 01:42:50,480
Right now order isn't.

664
01:42:50,480 --> 01:42:53,480
I think it is possible to add it.

665
01:42:53,480 --> 01:43:05,480
That's a that's a very good point that having an alias for for something more expressive is a is a good idea.

666
01:43:05,480 --> 01:43:09,480
What else?

667
01:43:09,480 --> 01:43:13,480
It's like universally known.

668
01:43:13,480 --> 01:43:20,480
Like if someone's using a CLI, they probably know what else is.

669
01:43:20,480 --> 01:43:23,480
Yes.

670
01:43:23,480 --> 01:43:28,480
That that's a good very good point about conventions and whatever.

671
01:43:28,480 --> 01:43:32,480
So I assumed that LS is something which is known.

672
01:43:32,480 --> 01:43:33,480
That's why I picked it.

673
01:43:33,480 --> 01:43:35,480
But it's a good question.

674
01:43:35,480 --> 01:43:37,480
How universally it is known.

675
01:43:37,480 --> 01:43:42,480
And again, my question is who the audience is of the specific application.

676
01:43:42,480 --> 01:44:06,480
And one thing which CLI G of also mentions that multiple places that especially if it is so so that especially if a tool is meant for people who are perhaps not not that not that of a use other command line tools, it might make sense to go for the longer and more expressive options.

677
01:44:06,480 --> 01:44:09,480
So to say and it doesn't exclude.

678
01:44:09,480 --> 01:44:17,480
That was a very good point that we can always have aliases for for multiple different different cities.

679
01:44:17,480 --> 01:44:19,480
There was one more.

680
01:44:19,480 --> 01:44:22,480
You also had your hands up, I think.

681
01:44:22,480 --> 01:44:40,480
Yes.

682
01:44:40,480 --> 01:44:41,480
Yes.

683
01:44:41,480 --> 01:44:53,480
That's actually also very good point that it's not as much about naming but about the what the output is, which will be our next topic.

684
01:44:53,480 --> 01:45:02,480
So if we look at, for example, create it has all the various fields as an option for variation.

685
01:45:02,480 --> 01:45:03,480
It makes sense.

686
01:45:03,480 --> 01:45:05,480
But I have seen in a similar manner.

687
01:45:05,480 --> 01:45:08,480
We could have options for LS as well.

688
01:45:08,480 --> 01:45:21,480
So like just ever providing every single field and then having and then show showing all the tools which are there, which are provided here.

689
01:45:21,480 --> 01:45:31,480
I would like to mention that it's a bit dangerous, depending on what your application is, because even I think even with that kind of.

690
01:45:31,480 --> 01:45:47,480
So so this kind of model, if I really show all the various fields and assuming they are filled, of course, but if I really show all of them, it might might be a bit too long, might get a bit too long.

691
01:45:47,480 --> 01:46:00,480
But actually, the next exercise, which I want to ask you to do is a bit less ambitious than showing all the various fields and making it configurable.

692
01:46:00,480 --> 01:46:07,480
But instead, just adding the title for to the output.

693
01:46:07,480 --> 01:46:11,480
So how did it go?

694
01:46:11,480 --> 01:46:17,480
And where where did we add and what?

695
01:46:17,480 --> 01:46:21,480
Yes.

696
01:46:29,480 --> 01:46:31,480
One oh seven.

697
01:46:33,480 --> 01:46:34,480
Just a sec.

698
01:46:41,480 --> 01:46:47,480
Sorry.

699
01:46:47,480 --> 01:46:48,480
I want to.

700
01:47:02,480 --> 01:47:03,480
Yes, exactly.

701
01:47:03,480 --> 01:47:11,480
So very first thing, perhaps to point out about this.

702
01:47:11,480 --> 01:47:17,480
Yes, that was.

703
01:47:23,480 --> 01:47:25,480
Yes, yes, exactly.

704
01:47:25,480 --> 01:47:27,480
So that was.

705
01:47:27,480 --> 01:47:29,480
Was.

706
01:47:29,480 --> 01:47:35,480
But the first thing I want to point out that there were two.

707
01:47:35,480 --> 01:47:43,480
So this so this L.S. command also has some options for sorry.

708
01:47:43,480 --> 01:47:53,480
So for in which format to show and the way how the Jason was implemented, it already showed everything.

709
01:47:53,480 --> 01:47:57,480
But in the.

710
01:47:57,480 --> 01:48:04,480
But for the default and for the and for the plain ways, we have to.

711
01:48:04,480 --> 01:48:09,480
So so so that's where we we wanted to add to the title.

712
01:48:09,480 --> 01:48:16,480
OK, so let's start perhaps with the easier one, which is which one was the easier if you did both.

713
01:48:19,480 --> 01:48:21,480
Sorry.

714
01:48:21,480 --> 01:48:23,480
The second one, yes.

715
01:48:23,480 --> 01:48:26,480
OK, and why?

716
01:48:26,480 --> 01:48:29,480
So how did you approach that?

717
01:48:39,480 --> 01:48:40,480
Exactly.

718
01:48:40,480 --> 01:48:41,480
Exactly.

719
01:48:41,480 --> 01:48:47,480
So that was one more column to be added to this title.

720
01:48:47,480 --> 01:48:53,480
And then in the row, adding the item title and we are ready.

721
01:48:53,480 --> 01:49:01,480
And these are actually the two big advantages of the library rich, which provides this table.

722
01:49:01,480 --> 01:49:08,480
And also, by the way, for the markdown, which we see in the view command.

723
01:49:08,480 --> 01:49:14,480
And and the so these are the two big advantages.

724
01:49:14,480 --> 01:49:18,480
One of them is that it's it looks very nice.

725
01:49:18,480 --> 01:49:27,480
And the second one is that it's relatively easy to add because we just add one more column to the land.

726
01:49:27,480 --> 01:49:37,480
Everything is and which figures out everything around spacing and that what was to do with the with the other part with the plane.

727
01:49:37,480 --> 01:49:40,480
I already heard something about column with.

728
01:49:47,480 --> 01:49:57,480
So, yes. So here in this line, we define what we guess because it's more or less a guess how long these things will be.

729
01:49:59,480 --> 01:50:05,480
And the so so that that we add a new column.

730
01:50:05,480 --> 01:50:10,480
So it's not sorry, not a new column, but just a new bit.

731
01:50:10,480 --> 01:50:21,480
And then when we actually print the results here, we had to add the new for the item item.

732
01:50:21,480 --> 01:50:23,480
Yeah. So for each line.

733
01:50:23,480 --> 01:50:30,480
And I tried to follow the same pattern as for the short name.

734
01:50:30,480 --> 01:50:37,480
And I am wondering why, why is that or why is this or empty string necessary?

735
01:50:42,480 --> 01:50:45,480
Yes, exactly, because it's optional.

736
01:50:45,480 --> 01:50:53,480
And if we just add it into the without any adjustment, it is an error.

737
01:50:53,480 --> 01:50:57,480
So this is also something with the built in table component.

738
01:50:57,480 --> 01:51:00,480
It's fairly straightforward.

739
01:51:00,480 --> 01:51:07,480
So with the rich table component, it is all straightforward and takes care of it with our.

740
01:51:07,480 --> 01:51:15,480
So that that way we need to provide it to ourself.

741
01:51:15,480 --> 01:51:21,480
My question is that if it is so easy and nice to create the output above,

742
01:51:21,480 --> 01:51:25,480
why did I bother creating this ugly thing below that?

743
01:51:28,480 --> 01:51:29,480
Sorry, I didn't.

744
01:51:29,480 --> 01:51:30,480
Sorry, I didn't.

745
01:51:48,480 --> 01:51:52,480
Yes, I like both answers, although I am not.

746
01:51:52,480 --> 01:52:01,480
So, so yes, I agree that that the rich is a cool tool for this.

747
01:52:01,480 --> 01:52:03,480
But but the major demand.

748
01:52:03,480 --> 01:52:09,480
The reason was that this is the one which is easier to parse.

749
01:52:09,480 --> 01:52:16,480
And for example, this could be piped into a command like a WK or whatever.

750
01:52:16,480 --> 01:52:26,480
And then I think some something out and then parsing this output further with other tools.

751
01:52:26,480 --> 01:52:36,480
And this pattern, which and which one we like better is as a user or even as a developer,

752
01:52:36,480 --> 01:52:38,480
we actually don't necessarily need to choose.

753
01:52:38,480 --> 01:52:45,480
And that's why these options are great that we can say that, OK, by default,

754
01:52:45,480 --> 01:52:55,480
we pick we pick this one and then we also provide something less complicated.

755
01:52:55,480 --> 01:52:59,480
One thing which I also would like to mention is it is less for the table.

756
01:52:59,480 --> 01:53:04,480
But so the more complicated and nicer the default output get,

757
01:53:04,480 --> 01:53:10,480
the more reason the more sense it makes to also provide some plain because, for example,

758
01:53:10,480 --> 01:53:19,480
I had it once with a tool which outputs YAML and there is a really nice so syntax highlighting

759
01:53:19,480 --> 01:53:22,480
and everything, which is the default output.

760
01:53:22,480 --> 01:53:27,480
But unfortunately, it does it depending on the color settings of your terminal.

761
01:53:27,480 --> 01:53:30,480
It works better or not so well.

762
01:53:30,480 --> 01:53:38,480
And for for this kind of use case, it's really good to provide just a plain option that if something

763
01:53:38,480 --> 01:53:47,480
doesn't go as planned, the user always has the opportunity to output it with dash dash plain.

764
01:53:47,480 --> 01:53:57,480
And and my next exercise would be also related to this topic.

765
01:53:57,480 --> 01:54:07,480
I would like to ask you to use some command, whichever, to count the numbers.

766
01:54:07,480 --> 01:54:12,480
So the talks in this table.

767
01:54:12,480 --> 01:54:17,480
And so the goal would be to output to at the end in some way.

768
01:54:17,480 --> 01:54:24,480
And probably for that, we will also use the plain option in in some capacity.

769
01:54:24,480 --> 01:54:30,480
But please, please take a look at that.

770
01:54:30,480 --> 01:54:33,480
Let's say in five minutes.

771
01:54:33,480 --> 01:54:36,480
I do is guaranteed to be always an integer.

772
01:54:36,480 --> 01:54:47,480
Yes. So if we look at the in the both in the model and in the crowd, it is defined.

773
01:54:47,480 --> 01:54:53,480
So now I am curious to hear which ways have you come up with to do it.

774
01:54:53,480 --> 01:54:57,480
Come up with to get to two on the screen. Yes.

775
01:54:57,480 --> 01:55:02,480
OK, cool. So let's just also show.

776
01:55:02,480 --> 01:55:06,480
So so I'm just repeating in the mic.

777
01:55:06,480 --> 01:55:13,480
So he saw this was a great point that because the.

778
01:55:13,480 --> 01:55:26,480
So because the headers are printed to standard error and the rest to us to standard out, we can use the.

779
01:55:26,480 --> 01:55:33,480
Yeah, sorry. Thank you.

780
01:55:33,480 --> 01:55:36,480
So and plain.

781
01:55:36,480 --> 01:55:42,480
And we can use the word count and the shell, which counts the lines and we get to.

782
01:55:42,480 --> 01:55:53,480
And as you pointed out, very well, this is because the headers and separator are on the standard.

783
01:55:53,480 --> 01:55:56,480
I don't understand that error. So what else?

784
01:55:56,480 --> 01:56:11,480
That was.

785
01:56:11,480 --> 01:56:16,480
Ah, OK. OK, so you modify the code to bring to.

786
01:56:16,480 --> 01:56:20,480
OK, that is also.

787
01:56:20,480 --> 01:56:25,480
Also, good, a good way to do that.

788
01:56:25,480 --> 01:56:35,480
What else?

789
01:56:35,480 --> 01:56:42,480
So I what I have come up with was exactly this same solution with word count.

790
01:56:42,480 --> 01:56:58,480
And I just want to show that if we if we just execute word count, we know it counts six lines, because in order to construct this nice table,

791
01:56:58,480 --> 01:57:02,480
the lot of other things are printed as well.

792
01:57:02,480 --> 01:57:10,480
So and and for the cheese and this this can be used for piping.

793
01:57:10,480 --> 01:57:23,480
And then the second very important thing, which you pointed out to that in order to make a plane so compatible with this word count,

794
01:57:23,480 --> 01:57:31,480
we also had to do a.

795
01:57:31,480 --> 01:57:34,480
Do a bit of a trick.

796
01:57:34,480 --> 01:57:40,480
And and in order and for that.

797
01:57:40,480 --> 01:57:43,480
We.

798
01:57:43,480 --> 01:58:00,480
We said that we will we are going to bring us so we said that we are going to print a header to this standard error console and then everything else to the to the standard to the standard out and.

799
01:58:00,480 --> 01:58:15,480
My so I just would like to go back to the place where we are, which we have looked at various times today, and it's not a coincidence that.

800
01:58:15,480 --> 01:58:19,480
I. Sorry.

801
01:58:19,480 --> 01:58:38,480
Yes, so here exactly to this command line interface guidelines basics that this kind of rules like the where so this one that being very conscious about what to put the standard out, what to standard error that might seem a bit.

802
01:58:38,480 --> 01:58:44,480
So sometimes sometimes a bit too strict about exactly if we.

803
01:58:44,480 --> 01:58:51,480
We follow this it might it enables us such capabilities as this one.

804
01:58:51,480 --> 01:58:57,480
And one so.

805
01:58:57,480 --> 01:59:02,480
Yes.

806
01:59:02,480 --> 01:59:05,480
Because.

807
01:59:05,480 --> 01:59:08,480
What.

808
01:59:08,480 --> 01:59:11,480
And.

809
01:59:11,480 --> 01:59:14,480
Like.

810
01:59:14,480 --> 01:59:17,480
But.

811
01:59:17,480 --> 01:59:21,480
For.

812
01:59:21,480 --> 01:59:25,480
Right now exactly that's a very good point how would you mitigate it.

813
01:59:25,480 --> 01:59:32,480
And.

814
01:59:32,480 --> 01:59:36,500
that out, put all those together. So the fact that some of the table

815
01:59:36,520 --> 01:59:40,560
is going to standard error and some to standard out, also you have to

816
01:59:40,580 --> 01:59:44,600
worry about flooding the first as well.

817
01:59:44,620 --> 01:59:48,640
Standard error is unbuffered.

818
01:59:48,660 --> 01:59:52,680
Standard error is unbuffered, but standard error unbuffered is

819
01:59:52,700 --> 01:59:56,720
good. It seems like you're adding, I guess I'd like to go

820
01:59:56,740 --> 02:00:00,760
with the principle of least surprise.

821
02:00:00,760 --> 02:00:04,800
...

822
02:00:04,820 --> 02:00:08,840
...

823
02:00:08,860 --> 02:00:12,880
...

824
02:00:12,900 --> 02:00:16,920
Yes, that's a very good point.

825
02:00:16,940 --> 02:00:20,960
I mean, one thing I could imagine to mitigate it

826
02:00:20,980 --> 02:00:25,000
is to provide options again.

827
02:00:25,020 --> 02:00:29,040
So yet another way that even saying that the header

828
02:00:29,040 --> 02:00:33,080
is optional, and in that case if it's added, then

829
02:00:33,100 --> 02:00:37,120
it's added to the standard out. If it isn't added, then we can use

830
02:00:37,140 --> 02:00:41,160
word count. So that would be probably a nicer and, I agree,

831
02:00:41,180 --> 02:00:45,200
more consistent way.

832
02:00:45,220 --> 02:00:49,240
...

833
02:00:49,260 --> 02:00:53,280
...

834
02:00:53,300 --> 02:00:57,320
...

835
02:00:57,320 --> 02:01:01,320
...

836
02:01:01,340 --> 02:01:05,360
...

837
02:01:05,380 --> 02:01:09,400
...

838
02:01:09,420 --> 02:01:13,440
...

839
02:01:13,460 --> 02:01:17,480
...

840
02:01:17,500 --> 02:01:21,520
...

841
02:01:21,540 --> 02:01:25,560
...

842
02:01:25,560 --> 02:01:29,560
...

843
02:01:29,580 --> 02:01:33,600
...

844
02:01:33,620 --> 02:01:37,640
...

845
02:01:37,660 --> 02:01:41,680
...

846
02:01:41,700 --> 02:01:45,720
...

847
02:01:45,740 --> 02:01:49,760
...

848
02:01:49,780 --> 02:01:53,800
...

849
02:01:53,800 --> 02:01:57,800
...

850
02:01:57,820 --> 02:02:01,840
...

851
02:02:01,860 --> 02:02:05,880
...

852
02:02:05,900 --> 02:02:09,920
...

853
02:02:09,940 --> 02:02:13,960
...

854
02:02:13,980 --> 02:02:18,000
...

855
02:02:18,020 --> 02:02:22,040
...

856
02:02:22,040 --> 02:02:26,040
...

857
02:02:26,060 --> 02:02:30,080
...

858
02:02:30,100 --> 02:02:34,120
...

859
02:02:34,140 --> 02:02:38,160
...

860
02:02:38,180 --> 02:02:42,200
...

861
02:02:42,220 --> 02:02:46,240
...

862
02:02:46,260 --> 02:02:50,260
...

863
02:02:50,260 --> 02:02:54,260
...

864
02:02:54,280 --> 02:02:58,300
...

865
02:02:58,320 --> 02:03:02,340
...

866
02:03:02,360 --> 02:03:06,380
...

867
02:03:06,400 --> 02:03:10,420
...

868
02:03:10,440 --> 02:03:14,460
...

869
02:03:14,480 --> 02:03:18,480
...

870
02:03:18,480 --> 02:03:22,480
...

871
02:03:22,500 --> 02:03:26,520
...

872
02:03:26,540 --> 02:03:30,560
...

873
02:03:30,580 --> 02:03:34,600
...

874
02:03:34,620 --> 02:03:38,640
...

875
02:03:38,660 --> 02:03:42,680
...

876
02:03:42,700 --> 02:03:46,700
...

877
02:03:46,700 --> 02:03:50,700
...

878
02:03:50,720 --> 02:03:54,740
...

879
02:03:54,760 --> 02:03:58,780
...

880
02:03:58,800 --> 02:04:02,820
...

881
02:04:02,840 --> 02:04:06,860
...

882
02:04:06,880 --> 02:04:10,900
...

883
02:04:10,920 --> 02:04:14,920
...

884
02:04:14,920 --> 02:04:18,920
...

885
02:04:18,960 --> 02:04:22,960
...

886
02:04:23,000 --> 02:04:27,000
...

887
02:04:27,020 --> 02:04:31,040
...

888
02:04:31,060 --> 02:04:35,080
...

889
02:04:35,100 --> 02:04:39,120
...

890
02:04:39,140 --> 02:04:43,160
...

891
02:04:43,160 --> 02:04:47,160
...

892
02:04:47,180 --> 02:04:51,200
...

893
02:04:51,220 --> 02:04:55,240
...

894
02:04:55,260 --> 02:04:59,280
...

895
02:04:59,300 --> 02:05:03,320
...

896
02:05:03,340 --> 02:05:07,360
...

897
02:05:07,380 --> 02:05:11,400
...

898
02:05:11,400 --> 02:05:15,400
...

899
02:05:15,440 --> 02:05:19,440
...

900
02:05:19,480 --> 02:05:23,480
...

901
02:05:23,520 --> 02:05:27,520
...

902
02:05:27,540 --> 02:05:31,560
...

903
02:05:31,600 --> 02:05:35,600
...

904
02:05:35,640 --> 02:05:39,640
...

905
02:05:39,640 --> 02:05:43,640
...

906
02:05:43,680 --> 02:05:47,680
...

907
02:05:47,720 --> 02:05:51,720
...

908
02:05:51,760 --> 02:05:55,760
...

909
02:05:55,800 --> 02:05:59,800
...

910
02:05:59,840 --> 02:06:03,840
...

911
02:06:03,880 --> 02:06:07,880
...

912
02:06:07,880 --> 02:06:11,880
...

913
02:06:11,920 --> 02:06:15,920
...

914
02:06:15,960 --> 02:06:19,960
...

915
02:06:20,000 --> 02:06:24,000
...

916
02:06:24,040 --> 02:06:28,040
...

917
02:06:28,080 --> 02:06:32,080
...

918
02:06:32,120 --> 02:06:36,120
...

919
02:06:36,120 --> 02:06:40,120
...

920
02:06:40,160 --> 02:06:44,160
...

921
02:06:44,200 --> 02:06:48,200
...

922
02:06:48,240 --> 02:06:52,240
...

923
02:06:52,280 --> 02:06:56,280
...

924
02:06:56,320 --> 02:07:00,320
...

925
02:07:00,360 --> 02:07:04,360
...

926
02:07:04,360 --> 02:07:08,360
...

927
02:07:08,400 --> 02:07:12,400
...

928
02:07:12,440 --> 02:07:16,440
...

929
02:07:16,480 --> 02:07:20,480
...

930
02:07:20,520 --> 02:07:24,520
...

931
02:07:24,560 --> 02:07:28,560
...

932
02:07:28,600 --> 02:07:32,600
...

933
02:07:32,600 --> 02:07:36,600
...

934
02:07:36,640 --> 02:07:40,640
...

935
02:07:40,680 --> 02:07:44,680
...

936
02:07:44,720 --> 02:07:48,720
...

937
02:07:48,760 --> 02:07:52,760
...

938
02:07:52,800 --> 02:07:56,800
...

939
02:07:56,840 --> 02:08:00,840
...

940
02:08:00,840 --> 02:08:04,840
...

941
02:08:04,880 --> 02:08:08,880
...

942
02:08:08,920 --> 02:08:12,920
...

943
02:08:12,960 --> 02:08:16,960
...

944
02:08:17,000 --> 02:08:21,000
...

945
02:08:21,040 --> 02:08:25,040
...

946
02:08:25,080 --> 02:08:29,080
...

947
02:08:29,080 --> 02:08:33,080
...

948
02:08:33,120 --> 02:08:37,120
...

949
02:08:37,160 --> 02:08:41,160
...

950
02:08:41,200 --> 02:08:45,200
...

951
02:08:45,240 --> 02:08:49,240
...

952
02:08:49,280 --> 02:08:53,280
...

953
02:08:53,320 --> 02:08:57,320
...

954
02:08:57,320 --> 02:09:01,320
...

955
02:09:01,360 --> 02:09:05,360
...

956
02:09:05,400 --> 02:09:09,400
...

957
02:09:09,440 --> 02:09:13,440
...

958
02:09:13,480 --> 02:09:17,480
...

959
02:09:17,520 --> 02:09:21,520
...

960
02:09:21,560 --> 02:09:25,560
...

961
02:09:25,560 --> 02:09:29,560
...

962
02:09:29,600 --> 02:09:33,600
...

963
02:09:33,640 --> 02:09:37,640
...

964
02:09:37,680 --> 02:09:41,680
...

965
02:09:41,720 --> 02:09:45,720
...

966
02:09:45,760 --> 02:09:49,760
...

967
02:09:49,800 --> 02:09:53,800
...

968
02:09:53,800 --> 02:09:57,800
...

969
02:09:57,840 --> 02:10:01,840
...

970
02:10:01,880 --> 02:10:05,880
...

971
02:10:05,920 --> 02:10:09,920
...

972
02:10:09,960 --> 02:10:13,960
...

973
02:10:14,000 --> 02:10:18,000
...

974
02:10:18,040 --> 02:10:22,040
...

975
02:10:22,040 --> 02:10:26,040
...

976
02:10:26,080 --> 02:10:30,080
...

977
02:10:30,120 --> 02:10:34,120
...

978
02:10:34,160 --> 02:10:38,160
...

979
02:10:38,200 --> 02:10:42,200
...

980
02:10:42,240 --> 02:10:46,240
...

981
02:10:46,280 --> 02:10:50,280
...

982
02:10:50,280 --> 02:10:54,280
...

983
02:10:54,320 --> 02:10:58,320
...

984
02:10:58,360 --> 02:11:02,360
...

985
02:11:02,400 --> 02:11:06,400
...

986
02:11:06,440 --> 02:11:10,440
...

987
02:11:10,480 --> 02:11:14,480
...

988
02:11:14,520 --> 02:11:18,520
...

989
02:11:18,520 --> 02:11:22,520
...

990
02:11:22,560 --> 02:11:26,560
...

991
02:11:26,600 --> 02:11:30,600
...

992
02:11:30,640 --> 02:11:34,640
...

993
02:11:34,680 --> 02:11:38,680
...

994
02:11:38,720 --> 02:11:42,720
...

995
02:11:42,760 --> 02:11:46,760
...

996
02:11:46,760 --> 02:11:50,760
...

997
02:11:50,800 --> 02:11:54,800
...

998
02:11:54,840 --> 02:11:58,840
...

999
02:11:58,880 --> 02:12:02,880
...

1000
02:12:02,920 --> 02:12:06,920
...

1001
02:12:06,960 --> 02:12:10,960
...

1002
02:12:11,000 --> 02:12:15,000
...

1003
02:12:15,000 --> 02:12:19,000
...

1004
02:12:19,040 --> 02:12:23,040
...

1005
02:12:23,080 --> 02:12:27,080
...

1006
02:12:27,120 --> 02:12:31,120
...

1007
02:12:31,160 --> 02:12:35,160
...

1008
02:12:35,200 --> 02:12:39,200
...

1009
02:12:39,240 --> 02:12:43,240
...

1010
02:12:43,240 --> 02:12:47,240
...

1011
02:12:47,280 --> 02:12:51,280
...

1012
02:12:51,320 --> 02:12:55,320
...

1013
02:12:55,360 --> 02:12:59,360
...

1014
02:12:59,400 --> 02:13:03,400
...

1015
02:13:03,440 --> 02:13:07,440
...

1016
02:13:07,480 --> 02:13:11,480
...

1017
02:13:11,480 --> 02:13:15,480
...

1018
02:13:15,520 --> 02:13:19,520
...

1019
02:13:19,560 --> 02:13:23,560
...

1020
02:13:23,600 --> 02:13:27,600
...

1021
02:13:27,640 --> 02:13:31,640
...

1022
02:13:31,680 --> 02:13:35,680
...

1023
02:13:35,720 --> 02:13:39,720
...

1024
02:13:39,720 --> 02:13:43,720
...

1025
02:13:43,760 --> 02:13:47,760
...

1026
02:13:47,800 --> 02:13:51,800
...

1027
02:13:51,840 --> 02:13:55,840
...

1028
02:13:55,880 --> 02:13:59,880
...

1029
02:13:59,920 --> 02:14:03,920
...

1030
02:14:03,960 --> 02:14:07,960
...

1031
02:14:07,960 --> 02:14:11,960
...

1032
02:14:12,000 --> 02:14:16,000
...

1033
02:14:16,040 --> 02:14:20,040
...

1034
02:14:20,080 --> 02:14:24,080
...

1035
02:14:24,120 --> 02:14:28,120
...

1036
02:14:28,160 --> 02:14:32,160
...

1037
02:14:32,200 --> 02:14:36,200
...

1038
02:14:36,200 --> 02:14:40,200
...

1039
02:14:40,240 --> 02:14:44,240
...

1040
02:14:44,280 --> 02:14:48,280
...

1041
02:14:48,320 --> 02:14:52,320
...

1042
02:14:52,360 --> 02:14:56,360
...

1043
02:14:56,400 --> 02:15:00,400
...

1044
02:15:00,440 --> 02:15:04,440
...

1045
02:15:04,440 --> 02:15:08,440
...

1046
02:15:08,480 --> 02:15:12,480
...

1047
02:15:12,520 --> 02:15:16,520
...

1048
02:15:16,560 --> 02:15:20,560
...

1049
02:15:20,600 --> 02:15:24,600
...

1050
02:15:24,640 --> 02:15:28,640
...

1051
02:15:28,680 --> 02:15:32,680
...

1052
02:15:32,680 --> 02:15:36,680
...

1053
02:15:36,720 --> 02:15:40,720
...

1054
02:15:40,760 --> 02:15:44,760
...

1055
02:15:44,800 --> 02:15:48,800
...

1056
02:15:48,840 --> 02:15:52,840
...

1057
02:15:52,880 --> 02:15:56,880
...

1058
02:15:56,920 --> 02:16:00,920
...

1059
02:16:00,920 --> 02:16:04,920
...

1060
02:16:04,960 --> 02:16:08,960
...

1061
02:16:09,000 --> 02:16:13,000
...

1062
02:16:13,040 --> 02:16:17,040
...

1063
02:16:17,080 --> 02:16:21,080
...

1064
02:16:21,120 --> 02:16:25,120
...

1065
02:16:25,160 --> 02:16:29,160
...

1066
02:16:29,160 --> 02:16:33,160
...

1067
02:16:33,200 --> 02:16:37,200
...

1068
02:16:37,240 --> 02:16:41,240
...

1069
02:16:41,280 --> 02:16:45,280
...

1070
02:16:45,320 --> 02:16:49,320
...

1071
02:16:49,360 --> 02:16:53,360
...

1072
02:16:53,400 --> 02:16:57,400
...

1073
02:16:57,400 --> 02:17:01,400
...

1074
02:17:01,440 --> 02:17:05,440
...

1075
02:17:05,480 --> 02:17:09,480
...

1076
02:17:09,520 --> 02:17:13,520
...

1077
02:17:13,560 --> 02:17:17,560
...

1078
02:17:17,600 --> 02:17:21,600
...

1079
02:17:21,640 --> 02:17:25,640
...

1080
02:17:25,640 --> 02:17:29,640
...

1081
02:17:29,680 --> 02:17:33,680
...

1082
02:17:33,720 --> 02:17:37,720
...

1083
02:17:37,760 --> 02:17:41,760
...

1084
02:17:41,800 --> 02:17:45,800
...

1085
02:17:45,840 --> 02:17:49,840
...

1086
02:17:49,880 --> 02:17:53,880
...

1087
02:17:53,880 --> 02:17:57,880
...

1088
02:17:57,920 --> 02:18:01,920
...

1089
02:18:01,960 --> 02:18:05,960
...

1090
02:18:06,000 --> 02:18:10,000
...

1091
02:18:10,040 --> 02:18:14,040
...

1092
02:18:14,080 --> 02:18:18,080
...

1093
02:18:18,120 --> 02:18:22,120
...

1094
02:18:22,120 --> 02:18:26,120
...

1095
02:18:26,160 --> 02:18:30,160
...

1096
02:18:30,200 --> 02:18:34,200
...

1097
02:18:34,240 --> 02:18:38,240
...

1098
02:18:38,280 --> 02:18:42,280
...

1099
02:18:42,320 --> 02:18:46,320
...

1100
02:18:46,360 --> 02:18:50,360
...

1101
02:18:50,360 --> 02:18:54,360
...

1102
02:18:54,400 --> 02:18:58,400
...

1103
02:18:58,440 --> 02:19:02,440
...

1104
02:19:02,480 --> 02:19:06,480
...

1105
02:19:06,520 --> 02:19:10,520
...

1106
02:19:10,560 --> 02:19:14,560
...

1107
02:19:14,600 --> 02:19:18,600
...

1108
02:19:18,600 --> 02:19:22,600
...

1109
02:19:22,640 --> 02:19:26,640
...

1110
02:19:26,680 --> 02:19:30,680
...

1111
02:19:30,720 --> 02:19:34,720
...

1112
02:19:34,760 --> 02:19:38,760
...

1113
02:19:38,800 --> 02:19:42,800
...

1114
02:19:42,840 --> 02:19:46,840
...

1115
02:19:46,840 --> 02:19:50,840
...

1116
02:19:50,880 --> 02:19:54,880
...

1117
02:19:54,920 --> 02:19:58,920
...

1118
02:19:58,960 --> 02:20:02,960
...

1119
02:20:03,000 --> 02:20:07,000
...

1120
02:20:07,040 --> 02:20:11,040
...

1121
02:20:11,080 --> 02:20:15,080
...

1122
02:20:15,080 --> 02:20:19,080
...

1123
02:20:19,120 --> 02:20:23,120
...

1124
02:20:23,160 --> 02:20:27,160
...

1125
02:20:27,200 --> 02:20:31,200
...

1126
02:20:31,240 --> 02:20:35,240
...

1127
02:20:35,280 --> 02:20:39,280
...

1128
02:20:39,320 --> 02:20:43,320
...

1129
02:20:43,320 --> 02:20:47,320
...

1130
02:20:47,360 --> 02:20:51,360
...

1131
02:20:51,400 --> 02:20:55,400
...

1132
02:20:55,440 --> 02:20:59,440
...

1133
02:20:59,480 --> 02:21:03,480
...

1134
02:21:03,520 --> 02:21:07,520
...

1135
02:21:07,560 --> 02:21:11,560
...

1136
02:21:11,560 --> 02:21:15,560
...

1137
02:21:15,600 --> 02:21:19,600
...

1138
02:21:19,640 --> 02:21:23,640
...

1139
02:21:23,680 --> 02:21:27,680
...

1140
02:21:27,720 --> 02:21:31,720
...

1141
02:21:31,760 --> 02:21:35,760
...

1142
02:21:35,800 --> 02:21:39,800
...

1143
02:21:39,800 --> 02:21:43,800
...

1144
02:21:43,840 --> 02:21:47,840
...

1145
02:21:47,880 --> 02:21:51,880
...

1146
02:21:51,920 --> 02:21:55,920
...

1147
02:21:55,960 --> 02:21:59,960
...

1148
02:22:00,000 --> 02:22:04,000
...

1149
02:22:04,040 --> 02:22:08,040
...

1150
02:22:08,040 --> 02:22:12,040
...

1151
02:22:12,080 --> 02:22:16,080
...

1152
02:22:16,120 --> 02:22:20,120
...

1153
02:22:20,160 --> 02:22:24,160
...

1154
02:22:24,200 --> 02:22:28,200
...

1155
02:22:28,240 --> 02:22:32,240
...

1156
02:22:32,280 --> 02:22:36,280
...

1157
02:22:36,280 --> 02:22:40,280
...

1158
02:22:40,320 --> 02:22:44,320
...

1159
02:22:44,360 --> 02:22:48,360
...

1160
02:22:48,400 --> 02:22:52,400
...

1161
02:22:52,440 --> 02:22:56,440
...

1162
02:22:56,480 --> 02:23:00,480
...

1163
02:23:00,520 --> 02:23:04,520
...

1164
02:23:04,520 --> 02:23:08,520
...

1165
02:23:08,560 --> 02:23:12,560
...

1166
02:23:12,600 --> 02:23:16,600
...

1167
02:23:16,640 --> 02:23:20,640
...

1168
02:23:20,680 --> 02:23:24,680
...

1169
02:23:24,720 --> 02:23:28,720
...

1170
02:23:28,760 --> 02:23:32,760
...

1171
02:23:32,760 --> 02:23:36,760
...

1172
02:23:36,800 --> 02:23:40,800
...

1173
02:23:40,840 --> 02:23:44,840
...

1174
02:23:44,880 --> 02:23:48,880
...

1175
02:23:48,920 --> 02:23:52,920
...

1176
02:23:52,960 --> 02:23:56,960
...

1177
02:23:57,000 --> 02:24:01,000
...

1178
02:24:01,000 --> 02:24:05,000
...

1179
02:24:05,040 --> 02:24:09,040
...

1180
02:24:09,080 --> 02:24:13,080
...

1181
02:24:13,120 --> 02:24:17,120
...

1182
02:24:17,160 --> 02:24:21,160
...

1183
02:24:21,200 --> 02:24:25,200
...

1184
02:24:25,240 --> 02:24:29,240
...

1185
02:24:29,240 --> 02:24:33,240
...

1186
02:24:33,280 --> 02:24:37,280
...

1187
02:24:37,320 --> 02:24:41,320
...

1188
02:24:41,360 --> 02:24:45,360
...

1189
02:24:45,400 --> 02:24:49,400
...

1190
02:24:49,440 --> 02:24:53,440
...

1191
02:24:53,480 --> 02:24:57,480
...

1192
02:24:57,480 --> 02:25:01,480
...

1193
02:25:01,520 --> 02:25:05,520
...

1194
02:25:05,560 --> 02:25:09,560
...

1195
02:25:09,600 --> 02:25:13,600
...

1196
02:25:13,640 --> 02:25:17,640
...

1197
02:25:17,680 --> 02:25:21,680
...

1198
02:25:21,720 --> 02:25:25,720
...

1199
02:25:25,720 --> 02:25:29,720
...

1200
02:25:29,760 --> 02:25:33,760
...

1201
02:25:33,800 --> 02:25:37,800
...

1202
02:25:37,840 --> 02:25:41,840
...

1203
02:25:41,880 --> 02:25:45,880
...

1204
02:25:45,920 --> 02:25:49,920
...

1205
02:25:49,960 --> 02:25:53,960
...

1206
02:25:53,960 --> 02:25:57,960
...

1207
02:25:58,000 --> 02:26:02,000
...

1208
02:26:02,040 --> 02:26:06,040
...

1209
02:26:06,080 --> 02:26:10,080
...

1210
02:26:10,120 --> 02:26:14,120
...

1211
02:26:14,160 --> 02:26:18,160
...

1212
02:26:18,200 --> 02:26:22,200
...

1213
02:26:22,200 --> 02:26:26,200
...

1214
02:26:26,240 --> 02:26:30,240
...

1215
02:26:30,280 --> 02:26:34,280
...

1216
02:26:34,320 --> 02:26:38,320
...

1217
02:26:38,360 --> 02:26:42,360
...

1218
02:26:42,400 --> 02:26:46,400
...

1219
02:26:46,440 --> 02:26:50,440
...

1220
02:26:50,440 --> 02:26:54,440
...

1221
02:26:54,480 --> 02:26:58,480
...

1222
02:26:58,520 --> 02:27:02,520
...

1223
02:27:02,560 --> 02:27:06,560
...

1224
02:27:06,600 --> 02:27:10,600
...

1225
02:27:10,640 --> 02:27:14,640
...

1226
02:27:14,680 --> 02:27:18,680
...

1227
02:27:18,680 --> 02:27:22,680
...

1228
02:27:22,720 --> 02:27:26,720
...

1229
02:27:26,760 --> 02:27:30,760
...

1230
02:27:30,800 --> 02:27:34,800
...

1231
02:27:34,840 --> 02:27:38,840
...

1232
02:27:38,880 --> 02:27:42,880
...

1233
02:27:42,920 --> 02:27:46,920
...

1234
02:27:46,920 --> 02:27:50,920
...

1235
02:27:50,960 --> 02:27:54,960
...

