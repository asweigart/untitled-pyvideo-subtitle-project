1
00:00:00,000 --> 00:00:02,000
All right, let's do it.

2
00:00:02,000 --> 00:00:12,000
Our next speaker is Juliana Carollini, who will present about how to create interactive games using electronics and microphones.

3
00:00:12,000 --> 00:00:14,000
Take it away.

4
00:00:14,000 --> 00:00:20,000
Hello.

5
00:00:20,000 --> 00:00:22,000
Hello.

6
00:00:22,000 --> 00:00:24,000
My name is Juliana.

7
00:00:24,000 --> 00:00:26,000
I'm from Brazil.

8
00:00:26,000 --> 00:00:30,000
I live in São Carlos, which is a city in São Paulo state.

9
00:00:30,000 --> 00:00:32,000
I moved to São Carlos to study.

10
00:00:32,000 --> 00:00:37,000
I have a bachelor's degree in computer science from the Federal University of São Carlos.

11
00:00:37,000 --> 00:00:40,000
And in São Carlos we have lots of technology communities.

12
00:00:40,000 --> 00:00:47,000
So in 2014 I co-founded the Palais de São Carlos chapter, which is one of the oldest Palais de chapters in Brazil.

13
00:00:47,000 --> 00:00:52,000
In São Carlos we also have our local Piper user group called Sanka, our group is Sanka.

14
00:00:52,000 --> 00:00:54,000
And our Linux user group called Sanka Lake.

15
00:00:54,000 --> 00:00:57,000
And I'm the co-founder and organizer of both of those.

16
00:00:57,000 --> 00:01:00,000
I work as a software engineer at OmniFector.

17
00:01:00,000 --> 00:01:05,000
And at my free time I like to play with IoT robotics as a lobby.

18
00:01:05,000 --> 00:01:09,000
And I also like my cats.

19
00:01:09,000 --> 00:01:13,000
So these are some of the projects that I have developed over the years.

20
00:01:13,000 --> 00:01:15,000
So the first one is called Clockwise.

21
00:01:15,000 --> 00:01:20,000
It is an intelligent alarm clock that wakes you up by telling you the weather forecast.

22
00:01:20,000 --> 00:01:23,000
And you are advancing your Google Calendar.

23
00:01:23,000 --> 00:01:26,000
I also have two robots that I made for competitions.

24
00:01:26,000 --> 00:01:30,000
So one was team of minions and the other one was superheroes.

25
00:01:30,000 --> 00:01:33,000
I also have some robots with Arduino.

26
00:01:33,000 --> 00:01:35,000
So I have one that avoids obstacles.

27
00:01:35,000 --> 00:01:38,000
And I have a robotic arm as well.

28
00:01:38,000 --> 00:01:43,000
So the robotic arm and the last robot over here, they both use micro-pipel.

29
00:01:43,000 --> 00:01:47,000
So this last one is the newest one that I have.

30
00:01:47,000 --> 00:01:52,000
This is a robot that uses a net on her phone that you can control the color of the LED.

31
00:01:52,000 --> 00:01:56,000
Turn the head of the robot and make it move around.

32
00:01:56,000 --> 00:01:59,000
Both of these are with micro-pipel.

33
00:01:59,000 --> 00:02:04,000
And this is what I'm going to be using for the presentation today.

34
00:02:04,000 --> 00:02:07,000
So it's this gamepad here.

35
00:02:07,000 --> 00:02:11,000
And you use the BBC Micro bit with it.

36
00:02:11,000 --> 00:02:16,000
So I'm going to be using this for the presentation today.

37
00:02:16,000 --> 00:02:18,000
So this is what I'm going to be talking.

38
00:02:18,000 --> 00:02:22,000
So I'll give a brief overview about the BBC Micro bit project.

39
00:02:22,000 --> 00:02:26,000
I'll also give an overview about the gamepad, how it works.

40
00:02:26,000 --> 00:02:30,000
To understand how it works I'll have to get into the details about the PIO pins,

41
00:02:30,000 --> 00:02:32,000
just how analog you put an output.

42
00:02:32,000 --> 00:02:37,000
After that I'm going to be showing how you can program the micro-bit using micro-pipel.

43
00:02:37,000 --> 00:02:43,000
And I'm going to be showing three game examples of interactive games that you can do using this gamepad here.

44
00:02:46,000 --> 00:02:50,000
So a little bit about the BBC Micro bit project.

45
00:02:50,000 --> 00:02:54,000
So the BBC Micro bit is this board here.

46
00:02:54,000 --> 00:02:58,000
So it's really small. It has the size of a credit card.

47
00:02:58,000 --> 00:03:02,000
And this was a product developed by BBC in the UK.

48
00:03:02,000 --> 00:03:06,000
And their goal was to give this competing device to children at school,

49
00:03:06,000 --> 00:03:09,000
so they could get interested in computer science and programming.

50
00:03:09,000 --> 00:03:13,000
And this device was given for free for children at the public schools.

51
00:03:13,000 --> 00:03:17,000
And they were able to get this for using both at school and at home.

52
00:03:17,000 --> 00:03:22,000
So the idea was to make them have programming lessons at school,

53
00:03:22,000 --> 00:03:27,000
so both the professors and the children got the board for free as well.

54
00:03:27,000 --> 00:03:31,000
And it was given for children, so it's very friendly.

55
00:03:31,000 --> 00:03:35,000
And it's an open source project, it's an open-hider project as well.

56
00:03:35,000 --> 00:03:39,000
And here are some of the specifications that we have.

57
00:03:39,000 --> 00:03:44,000
So the board has a microprocessor over here that controls the boot respect

58
00:03:44,000 --> 00:03:47,000
and all the components that we have on the board.

59
00:03:47,000 --> 00:03:54,000
It also has a cellular sensor over here that works as a compact as well.

60
00:03:54,000 --> 00:03:58,000
We have a speaker that we can use for interactiveness.

61
00:03:58,000 --> 00:04:04,000
And you also can power it using a battery, so you don't have to use an USB cable for that.

62
00:04:05,000 --> 00:04:09,000
And on the back side of the board we have this LED matrix

63
00:04:09,000 --> 00:04:13,000
that you can use to display images and scroll text as well.

64
00:04:13,000 --> 00:04:19,000
The logo here is a touch-tested logo, so it works as a push button as well.

65
00:04:19,000 --> 00:04:24,000
We have also a microphone, so you can do interactiveness using sound,

66
00:04:24,000 --> 00:04:26,000
both using the microphone and the speaker.

67
00:04:26,000 --> 00:04:30,000
And we have here two push buttons that you can use for input as well.

68
00:04:30,000 --> 00:04:34,000
And on the bottom of the board here we have this edge connector.

69
00:04:34,000 --> 00:04:38,000
So the edge connector has 20 GPIO pins hidden here.

70
00:04:38,000 --> 00:04:43,000
You can access three of them using an alligator clip,

71
00:04:43,000 --> 00:04:47,000
or you can expand all of them using an extender.

72
00:04:47,000 --> 00:04:50,000
So what are those GPIO pins?

73
00:04:50,000 --> 00:04:56,000
So for those of you who have used other boards before, like the Raspberry Pi or the Arduino,

74
00:04:56,000 --> 00:05:00,000
we have those pins like for the Raspberry Pi it is a male pin,

75
00:05:00,000 --> 00:05:02,000
for the Arduino it is a female pin,

76
00:05:02,000 --> 00:05:06,000
but for the BBC Microbit we have this edge connector here.

77
00:05:06,000 --> 00:05:10,000
So this was made on purpose because this is for children.

78
00:05:10,000 --> 00:05:13,000
It doesn't have sharp pins that could hurt the children's hands.

79
00:05:13,000 --> 00:05:16,000
So it doesn't have sharp edges or pins,

80
00:05:16,000 --> 00:05:20,000
and it was made for that because it was thinking about children.

81
00:05:22,000 --> 00:05:24,000
So how do we use those pins?

82
00:05:24,000 --> 00:05:29,000
So the GPIO is used when you don't have a standard of communication with some device.

83
00:05:29,000 --> 00:05:36,000
So when you need to use some kind of sensor or operator that doesn't have an interface like MGI or USB,

84
00:05:36,000 --> 00:05:41,000
use the GPIO pins to control the digital and analog signals.

85
00:05:41,000 --> 00:05:45,000
So the digital signal is when you only care if it is on or off.

86
00:05:45,000 --> 00:05:47,000
You only care about these two values.

87
00:05:47,000 --> 00:05:52,000
But the analog signal we care about the continuity here.

88
00:05:52,000 --> 00:05:59,000
So you want to know how much it is closer to 0 or 5 volts or 0 or 3.3 volts depending on the board that you are using.

89
00:05:59,000 --> 00:06:03,000
So we have those two kinds of digital or analog signals,

90
00:06:03,000 --> 00:06:06,000
and we can use both of them with the GPIO pins.

91
00:06:06,000 --> 00:06:10,000
So we have some pins that are specific for analog input and output,

92
00:06:10,000 --> 00:06:14,000
and some that are for digital input and output.

93
00:06:14,000 --> 00:06:21,000
So you can use the digital read and digital write to read and write those values using the GPIO pins.

94
00:06:22,000 --> 00:06:27,000
So I'm going to talk a little bit about the GamePad.

95
00:06:27,000 --> 00:06:30,000
So there's one over here.

96
00:06:31,000 --> 00:06:35,000
So the GamePad, I bought this from Aliexpress.

97
00:06:35,000 --> 00:06:39,000
It was like $15. It's a very cheap. It was the first one that I found.

98
00:06:39,000 --> 00:06:42,000
So I don't have anything particular about this one.

99
00:06:42,000 --> 00:06:49,000
You can get any other one, but this one was a cheap one, and it has a lot of features for the price.

100
00:06:49,000 --> 00:06:56,000
So it has included the edge connector, so you can insert the microbead and use it without having to plug anything else.

101
00:06:56,000 --> 00:07:02,000
It has a dual channel joystick here, so you can use it as input for the games.

102
00:07:02,000 --> 00:07:08,000
It has an onboard battery charger circuit, so you can put the battery over here.

103
00:07:08,000 --> 00:07:13,000
And if you want, you can charge the battery using the charger circuit here as well.

104
00:07:13,000 --> 00:07:18,000
The board has a battery indicator, so you can see how much battery you still have.

105
00:07:18,000 --> 00:07:24,000
The push buttons over here, the colored buttons, that you can use for input as well.

106
00:07:24,000 --> 00:07:31,000
And on the top here, we have two side buttons that are connected to the buttons on the board, the buttons that I mentioned before.

107
00:07:31,000 --> 00:07:35,000
So instead of using those two, you can use this on the GamePad.

108
00:07:36,000 --> 00:07:44,000
And it also has a buzzer to play sounds, so if you have a game that runs on the previous version of microbead,

109
00:07:44,000 --> 00:07:49,000
but you don't have a speaker, you can use the speaker from the GamePad as well.

110
00:07:49,000 --> 00:07:52,000
So here is how the GamePad connects to the microbead.

111
00:07:52,000 --> 00:07:57,000
So we have the 20 UPIO pins in the edge connector.

112
00:07:57,000 --> 00:08:05,000
So when you connect the boards to the GamePad, each feature in the GamePad is connected to one pin in the board.

113
00:08:05,000 --> 00:08:15,000
So here on the back of the GamePad, we have a table here that shows where each component is connected to the board.

114
00:08:15,000 --> 00:08:22,000
So here we have the pins for all the buttons, the pins for the joystick, and the pins for the buzzer.

115
00:08:22,000 --> 00:08:29,000
So you can use these in the code to know what kind of component you are dealing with on each pin.

116
00:08:29,000 --> 00:08:37,000
So an example of what we have on the board is digital and analog input and output.

117
00:08:37,000 --> 00:08:41,000
So for the push buttons, we have digital input.

118
00:08:41,000 --> 00:08:44,000
So it only carries the button expressed or not.

119
00:08:44,000 --> 00:08:46,000
So it's digital, it's just two values.

120
00:08:47,000 --> 00:08:55,000
But for the analog, for the joystick, it is an analog input because we want to know how much it is turned to each side.

121
00:08:55,000 --> 00:08:59,000
So we want to know how much the user presses for each direction.

122
00:08:59,000 --> 00:09:01,000
So it is an analog input.

123
00:09:01,000 --> 00:09:09,000
And for the display here, we can have both digital and analog output because we're going to be using this to show the information to the player.

124
00:09:09,000 --> 00:09:15,000
So you can use it as a digital output if you only turn on or off the LED.

125
00:09:15,000 --> 00:09:17,000
So only two values.

126
00:09:17,000 --> 00:09:22,000
But you can use it as an analog output as well if you change the brightness of the pixels.

127
00:09:22,000 --> 00:09:26,000
So you can use that to make the images brighter.

128
00:09:28,000 --> 00:09:33,000
So I'm going to be showing how you can program the micro bit.

129
00:09:33,000 --> 00:09:37,000
So the micro bit is micro pattern powered.

130
00:09:37,000 --> 00:09:42,000
So when you get a micro bit, you can start using micro pattern with it without having to flash anything.

131
00:09:42,000 --> 00:09:45,000
It already comes with it pre-installed.

132
00:09:45,000 --> 00:09:52,000
So the MicroPython, it is a re-implementation of the Python 3.

133
00:09:52,000 --> 00:10:02,000
So it is made for microcontrollers and devices that have low computational power and low power consumption as well.

134
00:10:02,000 --> 00:10:06,000
So it is a target for those kind of devices.

135
00:10:06,000 --> 00:10:09,000
And the VBC micro bit is one of them.

136
00:10:09,000 --> 00:10:14,000
So that's why you can power it using a battery because it uses very low power.

137
00:10:15,000 --> 00:10:19,000
And here is how you can program the micro bit.

138
00:10:19,000 --> 00:10:25,000
So if you go to microbit.org, you have two options of programming the micro bit.

139
00:10:25,000 --> 00:10:31,000
One of them is using a block editor, which is easier for children who don't know how to code yet.

140
00:10:31,000 --> 00:10:34,000
So it's easier to just drag the blocks there.

141
00:10:34,000 --> 00:10:39,000
But if you already have some programming knowledge, you can use the Python text editor.

142
00:10:39,000 --> 00:10:47,000
So here in the editor, you have a very nice editor that has autocomplete, it has interest highlighting, it works really well.

143
00:10:47,000 --> 00:10:49,000
Here we have the reference.

144
00:10:49,000 --> 00:10:57,000
So if you need to know anything about any of the components that you have available for use, you can have the information right here on the editor.

145
00:10:57,000 --> 00:11:06,000
And if you check the information and you want to drag the block of code to where you are editing your code, you can do that as well.

146
00:11:06,000 --> 00:11:11,000
Like here you can get this block and just drag over and it's going to be copying it for you.

147
00:11:12,000 --> 00:11:16,000
There is also the simulator over here.

148
00:11:16,000 --> 00:11:22,000
So if you don't have the BARD, but you want to use MicroPython with it, you can use the simulator on the browser.

149
00:11:22,000 --> 00:11:24,000
And it works really well as well.

150
00:11:24,000 --> 00:11:26,000
So you can send the inputs here.

151
00:11:26,000 --> 00:11:32,000
You can change all the parameters on the BARD using these buttons over here.

152
00:11:32,000 --> 00:11:35,000
And if you want, you can also use the terminal here.

153
00:11:35,000 --> 00:11:39,000
You have the REPL inside of the editor as well.

154
00:11:39,000 --> 00:11:44,000
And when you finish editing your code, you can click here on Send to MicroBit.

155
00:11:44,000 --> 00:11:46,000
And it's going to be downloading a hex file for you.

156
00:11:46,000 --> 00:11:50,000
And you can save this file on the BARD just like a thumb drive.

157
00:11:50,000 --> 00:11:57,000
So you just drag the file over there and it's going to be flashing the code for you and start running the code without having to configure anything else.

158
00:12:01,000 --> 00:12:06,000
So I'm going to be showing you some examples of things you can use in the MicroBit.

159
00:12:06,000 --> 00:12:10,000
So the first one is the display example.

160
00:12:10,000 --> 00:12:19,000
So for the display, we can show an image and we have some predefined images that are already ready for use.

161
00:12:19,000 --> 00:12:22,000
So in this case, I'm showing the happy face.

162
00:12:22,000 --> 00:12:26,000
You also can set the brightness of one specific pixel.

163
00:12:26,000 --> 00:12:32,000
So you pass the coordinate of the pixel and pass the brightness and it changes it for you.

164
00:12:32,000 --> 00:12:41,000
If you don't want to use a predefined image, you can create your own images, concatenating strings, and you pass here the brightness for each pixel.

165
00:12:41,000 --> 00:12:44,000
You can also scroll a text.

166
00:12:44,000 --> 00:12:47,000
So you pass a string and it's going to be showing it for you.

167
00:12:47,000 --> 00:12:51,000
And if you need to, you can also clear the display.

168
00:12:54,000 --> 00:12:56,000
So a button example.

169
00:12:56,000 --> 00:13:01,000
So we have these two bunch of buttons on the BARD and these buttons, they are already abstracted.

170
00:13:01,000 --> 00:13:03,000
So they are called button A and button B.

171
00:13:03,000 --> 00:13:06,000
You don't need to configure the pins for those.

172
00:13:06,000 --> 00:13:16,000
And we can see if the button is pressed at the moment, if it was pressed in the past, and how many times it was pressed since the last time that we've worked with the method.

173
00:13:17,000 --> 00:13:25,000
On this example here, or if you click on the button on the left, it's going to be showing you an arrow, which is one of the image predefined that we have.

174
00:13:25,000 --> 00:13:30,000
And if you click on the right, you can see the other arrow over here.

175
00:13:32,000 --> 00:13:35,000
So a buzzer example.

176
00:13:35,000 --> 00:13:45,000
So in case you have an older microbeam that didn't have a speaker yet, you can plug in a buzzer, plugging it into the zero pin here.

177
00:13:45,000 --> 00:13:51,000
And if you do that and use the music library, you can play some predefined music.

178
00:13:51,000 --> 00:13:54,000
So it comes with some of those already for use.

179
00:13:54,000 --> 00:13:59,000
You can pass a frequency and a duration to make a pitch sound.

180
00:13:59,000 --> 00:14:05,000
Or you can create your own music passing the notes and the duration for each note.

181
00:14:05,000 --> 00:14:11,000
As for the accelerometer, you can get the acceleration for three axes, x, y, and z.

182
00:14:11,000 --> 00:14:18,000
So you just need to do an analog read on the pin for each axis.

183
00:14:18,000 --> 00:14:25,000
But here it's already abstracted for us, so we can just use get x, get y, get z, and we can get the information.

184
00:14:25,000 --> 00:14:28,000
And we also have some gesture predefined.

185
00:14:28,000 --> 00:14:34,000
So if you want to see if the board was shaken, if you have a button pressed, you can see the button.

186
00:14:34,000 --> 00:14:42,000
If the board was shaken, if it is facing up, down, if it has fallen, you have all these kinds of gestures predefined already for use.

187
00:14:45,000 --> 00:14:53,000
So as a PIO example, as I mentioned, we are going to be using PIO pins to interface with the gamepad.

188
00:14:53,000 --> 00:14:59,000
So for those, you need to do the digital read and you need to know which pin you are going to be reading.

189
00:14:59,000 --> 00:15:05,000
So here in this case, I'm using the pin 15, which is the white button on the gamepad.

190
00:15:05,000 --> 00:15:08,000
And for this one, the reading is inverted.

191
00:15:08,000 --> 00:15:11,000
So if the button is pressed, it's going to be returning zero.

192
00:15:11,000 --> 00:15:16,000
And if the button is not pressed, it's going to be returning one.

193
00:15:16,000 --> 00:15:23,000
So here to read the value, you can pass yishtarit on the pin and it can track if the pin is pressed or not.

194
00:15:23,000 --> 00:15:28,000
A joystick example.

195
00:15:28,000 --> 00:15:33,000
So the joystick uses analog read because it is an analog input.

196
00:15:33,000 --> 00:15:40,000
So you can define the pins for the joystick and then use analog read for those.

197
00:15:40,000 --> 00:15:44,000
And you can see the reading is on the x-axis.

198
00:15:44,000 --> 00:15:47,000
You have less than 400 is put to the left.

199
00:15:47,000 --> 00:15:50,000
It has more than 600 is put to the right.

200
00:15:50,000 --> 00:15:54,000
If it's in the between, it's because it's not turned to any direction.

201
00:15:54,000 --> 00:15:58,000
And we can have the same thing for the y-axis.

202
00:15:58,000 --> 00:16:01,000
So you can see if it is turned up, down, left or right.

203
00:16:01,000 --> 00:16:05,000
And we are going to be using that in the games.

204
00:16:05,000 --> 00:16:09,000
So let's go to the game examples.

205
00:16:09,000 --> 00:16:13,000
So I have prepared three game examples to show you today.

206
00:16:13,000 --> 00:16:15,000
One of them is called Genius.

207
00:16:15,000 --> 00:16:17,000
The other one is called Chase the Dog.

208
00:16:17,000 --> 00:16:19,000
And the other one is called Car Crash.

209
00:16:19,000 --> 00:16:21,000
So I'm going to be showing each one of them.

210
00:16:21,000 --> 00:16:24,000
First the book program showing how the logic works.

211
00:16:24,000 --> 00:16:27,000
Then a video of the demonstration.

212
00:16:27,000 --> 00:16:34,000
And then going into some parts of the source code.

213
00:16:34,000 --> 00:16:38,000
So for the first game in Brazil, this game is called Genius.

214
00:16:38,000 --> 00:16:40,000
I think the US is called Taiwan.

215
00:16:40,000 --> 00:16:42,000
I don't know how it's called in other places.

216
00:16:42,000 --> 00:16:46,000
But I got Genius because that's how we know that game in Brazil.

217
00:16:46,000 --> 00:16:51,000
So the idea here is that we are going to be drawing a random direction.

218
00:16:51,000 --> 00:16:53,000
So we don't have the colors here.

219
00:16:53,000 --> 00:16:56,000
So I'm going to be using arrows to indicate the directions.

220
00:16:56,000 --> 00:17:01,000
So we draw a direction and then we add it to the sequence and show the sequence to the user.

221
00:17:01,000 --> 00:17:03,000
And then we read the input.

222
00:17:03,000 --> 00:17:07,000
And if the input is correct, we are going to be drawing another direction,

223
00:17:07,000 --> 00:17:12,000
adding to the sequence and keep incrementing the sequence until the user gets it wrong.

224
00:17:12,000 --> 00:17:14,000
If you get it wrong, we end the game.

225
00:17:14,000 --> 00:17:18,000
And then we restart the game so the next player can use the board as well.

226
00:17:18,000 --> 00:17:21,000
So the games keep playing on a loop in the board.

227
00:17:44,000 --> 00:18:00,000
So how did I do this game?

228
00:18:00,000 --> 00:18:05,000
So to restart the game, we are going to be waiting for the user to show that they are ready to play.

229
00:18:05,000 --> 00:18:11,000
So we are going to wait for them to push the two buttons on the top at the same time to indicate that they are ready.

230
00:18:11,000 --> 00:18:18,000
So when you press the buttons at the same time, we start a countdown and then we initiate the game.

231
00:18:18,000 --> 00:18:22,000
And in the game we have the sequence.

232
00:18:22,000 --> 00:18:27,000
So for the sequence we have four directions, north, south, west and east.

233
00:18:27,000 --> 00:18:32,000
And we are going to be showing the direction represented by an image.

234
00:18:32,000 --> 00:18:37,000
And we are going to be playing a pitch sound with a frequency associated with that direction.

235
00:18:38,000 --> 00:18:43,000
This way the user knows how they can associate the direction to the sound.

236
00:18:43,000 --> 00:18:48,000
And it makes it easier when they are going to be inputting the movements for the sequence.

237
00:18:48,000 --> 00:18:52,000
So we show all the movements in the sequence.

238
00:18:52,000 --> 00:19:01,000
And after that, we light up the display to indicate that it's ready for receiving the input from the user.

239
00:19:01,000 --> 00:19:03,000
And then to read the input.

240
00:19:03,000 --> 00:19:12,000
So we have a class here to abstract the buttons because we don't have those buttons abstracted in the micropython implementation for the micro-bit.

241
00:19:12,000 --> 00:19:16,000
Because we only have the A and B buttons abstracted.

242
00:19:16,000 --> 00:19:19,000
So these other ones we need to use digital read for that.

243
00:19:19,000 --> 00:19:22,000
So here I have an abstraction for that.

244
00:19:22,000 --> 00:19:26,000
And we read which button was pressed to see the direction.

245
00:19:26,000 --> 00:19:35,000
And then we play the same pitch sound and show the same image to give the feedback to the user that they pressed the direction that was shown in the screen.

246
00:19:37,000 --> 00:19:39,000
And then we need to validate the user input.

247
00:19:39,000 --> 00:19:42,000
So we want to do that one movement at a time.

248
00:19:42,000 --> 00:19:51,000
Because if you let the user put all the movements and they got the first one wrong, we don't want to let them keep playing until you read the length of the sequence.

249
00:19:51,000 --> 00:19:59,000
So here we are going to be getting the movements one by one and checking if the movement so far is the same as the sequence.

250
00:20:02,000 --> 00:20:06,000
And then when the user gets it wrong, we end the game playing a sad music.

251
00:20:06,000 --> 00:20:13,000
We show the score, which is the length of the sequence minus one, because it got the last one wrong.

252
00:20:13,000 --> 00:20:16,000
And then we clear everything and restart the game.

253
00:20:16,000 --> 00:20:19,000
And then here to run the game, the logic for this one is simpler.

254
00:20:19,000 --> 00:20:22,000
So we just show the sequence, read the answer.

255
00:20:22,000 --> 00:20:25,000
If it's correct, we create the sequence again.

256
00:20:25,000 --> 00:20:27,000
If it's not, we end the game.

257
00:20:29,000 --> 00:20:32,000
So now I'm going to be showing the second game example.

258
00:20:32,000 --> 00:20:34,000
It is called chase the dot.

259
00:20:34,000 --> 00:20:39,000
So the idea for this one is that you have a dot on the screen and you need to chase the dot around.

260
00:20:39,000 --> 00:20:42,000
So you use the joystick to chase the dot.

261
00:20:42,000 --> 00:20:45,000
You can use the mouse to chase the dot.

262
00:20:45,000 --> 00:20:53,000
You can also use the accelerometer if you press a button and then you can tilt the bars to move the dot around the screen.

263
00:20:53,000 --> 00:20:58,000
So for this one, we are going to be making it more harder for the user to get the dot.

264
00:20:58,000 --> 00:21:06,000
So if it has passed one second and the player hasn't got the dot yet, you're going to be putting the dot in a random coordinate again.

265
00:21:06,000 --> 00:21:09,000
So you have to keep chasing it around the screen.

266
00:21:09,000 --> 00:21:15,000
And if it has passed 25 seconds since the game started, you are going to be ending the game.

267
00:21:15,000 --> 00:21:18,000
So we have 25 seconds to get as many dots as we can.

268
00:21:18,000 --> 00:21:21,000
And if you get the dot, you get one point.

269
00:21:21,000 --> 00:21:26,000
And then we display the dot flashing to indicate that you got the dot.

270
00:21:40,000 --> 00:21:44,000
Here on the first part, I'm using the accelerometer.

271
00:21:44,000 --> 00:21:47,000
So you can cube the bars to get the dot.

272
00:21:49,000 --> 00:21:53,000
And after that, using the joystick, you can move it around.

273
00:22:09,000 --> 00:22:17,000
Okay, so for this one, we have the dot that has a coordinate that we generated between the constraints of the display.

274
00:22:17,000 --> 00:22:22,000
When you get the dot, you are going to be flashing it to indicate that the user got the correct direction.

275
00:22:22,000 --> 00:22:30,000
And when we show the dot, we start the time that the dot was shown so we can make it move around after one second.

276
00:22:31,000 --> 00:22:35,000
To read the input, you are going to be having this toggle button here.

277
00:22:35,000 --> 00:22:38,000
So if the button is pressed, you are going to be using the accelerometer.

278
00:22:38,000 --> 00:22:41,000
If it is not pressed, you are going to be using the joystick.

279
00:22:43,000 --> 00:22:48,000
And then to move the player, you are going to be reading the input.

280
00:22:48,000 --> 00:22:54,000
And then we make the calculation to see if it's moving in which direction it should be moving.

281
00:22:54,000 --> 00:22:58,000
And then we just update the coordinates between the constraints of the display again.

282
00:23:01,000 --> 00:23:06,000
And then to check the collision, we just check if the coordinates for the dot and the player are the same.

283
00:23:08,000 --> 00:23:13,000
And then here, the logic to run the game is a little bit more complicated than the previous one.

284
00:23:13,000 --> 00:23:17,000
So for this one, we need to start the time that the game started.

285
00:23:17,000 --> 00:23:22,000
So we can see if it has passed 25 seconds.

286
00:23:22,000 --> 00:23:27,000
And we also need to know if the dot was shown one second.

287
00:23:27,000 --> 00:23:30,000
So if it has passed one second, we need to update the coordinates.

288
00:23:30,000 --> 00:23:34,000
If not, we only update the coordinates when the user collides with the dot.

289
00:23:38,000 --> 00:23:42,000
And now for the last example, it's called car crash.

290
00:23:42,000 --> 00:23:45,000
So it's similar to those old car racing games.

291
00:23:45,000 --> 00:23:50,000
So you have the obstacles coming down and you have to avoid the obstacles.

292
00:23:50,000 --> 00:24:02,000
So for this one, we want to use a refresh rate of the screen so the user can move the car in between the iterations of the border and the obstacle moving down.

293
00:24:02,000 --> 00:24:05,000
So we have here this loop here.

294
00:24:05,000 --> 00:24:12,000
We keep reading the input from the player and updating the car until we reach the correct refresh rate iteration.

295
00:24:12,000 --> 00:24:16,000
When you reach that refresh rate iteration, you are going to be moving everything down.

296
00:24:16,000 --> 00:24:23,000
So we check if the obstacle is already on the bottom of the screen because if it is, we need to check if the player collided or not.

297
00:24:23,000 --> 00:24:28,000
But if it is not, we just move everything down, the border and the obstacle.

298
00:24:28,000 --> 00:24:41,000
If the player avoided the obstacle, we create a new obstacle on the top and we increase the speed of the game so it gets faster and harder to play.

299
00:24:41,000 --> 00:24:47,000
And of course, if the player collides with the obstacle, we end the game and we show their score.

300
00:24:58,000 --> 00:25:04,000
Beep, beep, beep, beep.

301
00:25:28,000 --> 00:25:36,000
Beep, beep, beep, beep, beep.

302
00:25:42,000 --> 00:25:46,000
So for this one, we have the player and the obstacle.

303
00:25:46,000 --> 00:25:54,000
So the player is only going to be moving in the x-axis on the bottom of the screen and the obstacle is going to be moving on the y-axis.

304
00:25:54,000 --> 00:26:04,000
So we generate the dot on the top of the screen and keep moving it down until we reach the bottom of the screen where we generated a band on the top.

305
00:26:04,000 --> 00:26:09,000
So to give the sensation of movement, we have the border.

306
00:26:09,000 --> 00:26:18,000
So the border keeps moving down, the obstacle moves down and the border moves up to give the sensation of movement.

307
00:26:19,000 --> 00:26:23,000
And here on the screen, we have the concept of buffer.

308
00:26:23,000 --> 00:26:36,000
So we want to show the border, the player and the obstacle at the same time so it is easier to generate the customized image and display it all at once instead of displaying each pixel separately.

309
00:26:36,000 --> 00:26:44,000
So we have the buffer for the screen and we also have the refresh rate to make the game move faster.

310
00:26:44,000 --> 00:26:52,000
So when we avoid the obstacle, we make the refresh rate decrease so the speed is increased.

311
00:26:55,000 --> 00:26:57,000
So here is how the buffer works.

312
00:26:57,000 --> 00:27:09,000
So for the borders, we have the pixels on the left and the right side moving up and the obstacle is moving down on these far rectangles here and the player is always on the bottom.

313
00:27:09,000 --> 00:27:19,000
So to create the buffer, what we do is that we get the obstacle space first and then we put the brightness of the obstacle in the position that the obstacle should be.

314
00:27:19,000 --> 00:27:28,000
We also got the border, so the border here is a list and then we invert the list to make it go in the border.

315
00:27:28,000 --> 00:27:34,000
So we are going to be going over the buffer and putting it on the left and the right of the screen.

316
00:27:35,000 --> 00:27:47,000
After we put the border, we put the obstacle there, so we just concatenate the obstacle in the y axis where the obstacle should be, so one of these rectangles here.

317
00:27:47,000 --> 00:27:51,000
And after that, we want to put the player on the bottom.

318
00:27:51,000 --> 00:28:03,000
But to put the player, we can use the same approach here of just putting the player space on the left row because if the obstacle is in the left row, it would overwrite the obstacle.

319
00:28:03,000 --> 00:28:10,000
So for the player, we get what we have before, we put the player there and then we get what we have after.

320
00:28:10,000 --> 00:28:15,000
So after that, we concatenate everything and display it to the screen.

321
00:28:16,000 --> 00:28:25,000
And here to run the game, we have the iteration, so until we reach the iteration, the player is going to be moving the card.

322
00:28:25,000 --> 00:28:36,000
And once we reach the iteration, we check if it collided. If not, we just increase the score, speed up the game and keep moving the obstacles around.

323
00:28:38,000 --> 00:28:43,000
So my conclusion for today is that the microgit and micropython are a fun combination.

324
00:28:43,000 --> 00:28:49,000
I like a lot working with this board and I find it really fun to play with.

325
00:28:49,000 --> 00:28:54,000
So I hope you can all find it fun as well and thank you for your attention.

326
00:29:05,000 --> 00:29:10,000
So here is the source code for the games. It is on my github.

327
00:29:10,000 --> 00:29:13,000
If you want to find me, you can find me using my handle.

328
00:29:13,000 --> 00:29:16,000
You can find me pretty much everywhere using this handle.

329
00:29:16,000 --> 00:29:19,000
So you can find me at LinkedIn and github.

330
00:29:19,000 --> 00:29:21,000
Here is the complete source code.

331
00:29:21,000 --> 00:29:26,000
And today we are going to be having an open space about embedded Python.

332
00:29:26,000 --> 00:29:30,000
So it's going to be at room 251 AB at 5 p.m.

333
00:29:30,000 --> 00:29:33,000
So I'm going to be bringing the gamepad there.

334
00:29:33,000 --> 00:29:39,000
So if you want to play the games, let's go there and have a chat and I can have the Q&A session there as well.

335
00:29:39,000 --> 00:29:40,000
So thank you again.

336
00:29:43,000 --> 00:29:45,000
Thank you.

