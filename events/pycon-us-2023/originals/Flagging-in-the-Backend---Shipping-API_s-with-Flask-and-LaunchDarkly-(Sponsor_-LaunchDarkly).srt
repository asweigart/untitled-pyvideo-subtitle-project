1
00:00:00,000 --> 00:00:02,680
We are good to go.

2
00:00:02,680 --> 00:00:04,080
Once again, hello.

3
00:00:04,080 --> 00:00:05,380
My name is Cody D'Arkland.

4
00:00:05,380 --> 00:00:08,320
I look after developer relations at LaunchDarkly.

5
00:00:08,320 --> 00:00:11,560
A couple qualifiers, how many people know what LaunchDarkly is

6
00:00:11,560 --> 00:00:13,680
in the audience, whoever touched it?

7
00:00:13,680 --> 00:00:16,320
You know, Cal Michael, you work here.

8
00:00:16,320 --> 00:00:20,160
Awesome. So I'm really happy to see not many people,

9
00:00:20,160 --> 00:00:22,640
or people who are still like learning what it is overall.

10
00:00:22,640 --> 00:00:26,680
How many people have ever used Flask before in Python?

11
00:00:26,680 --> 00:00:29,160
Friends. So funny story, and we're going to touch

12
00:00:29,160 --> 00:00:30,460
on this in a second.

13
00:00:30,460 --> 00:00:32,440
Flask is actually how I learned to code.

14
00:00:32,440 --> 00:00:35,240
It was the first thing I ever learned how to build with,

15
00:00:35,240 --> 00:00:37,720
and I learned when I had my first daughter.

16
00:00:37,720 --> 00:00:40,640
I was always the guy who, might as well jump forward,

17
00:00:40,640 --> 00:00:42,640
because we're going to jump into the whole story thing.

18
00:00:42,640 --> 00:00:45,280
I was always the guy who would bug his developer friends

19
00:00:45,280 --> 00:00:47,040
to build him web pages for things, right?

20
00:00:47,040 --> 00:00:50,200
Especially when I worked in real customer land and I wasn't

21
00:00:50,200 --> 00:00:52,200
at a vendor, and I'd want to show something,

22
00:00:52,200 --> 00:00:53,720
I'd want to render something on a page,

23
00:00:53,720 --> 00:00:55,160
or I'd want to be able to build reports.

24
00:00:55,160 --> 00:00:57,480
I had my friend, his name is Steven Karnes,

25
00:00:57,520 --> 00:01:00,320
and I would always ping him, and we'd find weird ways

26
00:01:00,320 --> 00:01:02,320
to get him to divert his attention,

27
00:01:02,320 --> 00:01:03,200
to help build things for me.

28
00:01:03,200 --> 00:01:06,960
And I did this for many, many years until I decided,

29
00:01:06,960 --> 00:01:09,200
okay, it's time to actually go and learn this thing.

30
00:01:09,200 --> 00:01:12,360
And so I have a very soft spot in my heart

31
00:01:12,360 --> 00:01:16,640
for Python and Flask, because my entire job now is spent

32
00:01:16,640 --> 00:01:18,360
doing code things all day, every day.

33
00:01:18,360 --> 00:01:22,060
I'd say I spend 80% of my days in code in some way or another,

34
00:01:22,060 --> 00:01:23,920
whether it's helping a customer figure out a problem,

35
00:01:23,920 --> 00:01:25,240
whether it's building like an interesting way

36
00:01:25,240 --> 00:01:27,320
to show what we're doing,

37
00:01:27,320 --> 00:01:30,280
whether it's building out how we actually do these things

38
00:01:30,280 --> 00:01:32,400
and telling stories about how to build that way.

39
00:01:32,400 --> 00:01:34,080
I spend most of my time in there now,

40
00:01:34,080 --> 00:01:37,000
and all of that was only possible because of sitting down

41
00:01:37,000 --> 00:01:38,920
and learning how to write Python.

42
00:01:38,920 --> 00:01:40,680
So I spend most of my time in JavaScript now,

43
00:01:40,680 --> 00:01:42,680
but I always go back to Python whenever I can.

44
00:01:42,680 --> 00:01:45,880
So if you want to talk to me outside of this conference,

45
00:01:45,880 --> 00:01:47,360
or you want to talk afterwards, we actually have spun

46
00:01:47,360 --> 00:01:48,880
up our LaunchDirected community.

47
00:01:48,880 --> 00:01:50,180
That's a Discord server.

48
00:01:50,180 --> 00:01:51,480
I'm in there all the time.

49
00:01:51,480 --> 00:01:52,780
I'll be in there all week.

50
00:01:52,780 --> 00:01:54,080
So if you see something in here that's interesting

51
00:01:54,080 --> 00:01:56,080
and you want to chat, feel free to drop in there.

52
00:01:56,080 --> 00:01:58,800
You can scan that with your phone and join up.

53
00:01:58,800 --> 00:02:00,440
I'm in there, Cody D'Arclund in the list.

54
00:02:00,440 --> 00:02:01,760
Just drop me a message.

55
00:02:01,760 --> 00:02:04,000
I'd love to catch up with anyone, anyone who wants

56
00:02:04,000 --> 00:02:07,880
to talk code, talk LaunchDarkly, talk other things.

57
00:02:07,880 --> 00:02:09,180
I'm always game.

58
00:02:09,180 --> 00:02:12,000
So let's get into it.

59
00:02:12,000 --> 00:02:15,840
So I want to keep this as minimum slides as possible.

60
00:02:15,840 --> 00:02:18,160
There's some that we're going to do after I do a little demo,

61
00:02:18,160 --> 00:02:20,160
but I always like the idea of just starting off

62
00:02:20,160 --> 00:02:21,680
with showing how the thing works.

63
00:02:21,680 --> 00:02:23,160
So we're going to jump in and show a little bit

64
00:02:23,160 --> 00:02:24,800
of a demo of LaunchDarkly.

65
00:02:24,880 --> 00:02:27,760
And I'll talk through where the Python bits are in that

66
00:02:27,760 --> 00:02:29,320
and really give you kind of an overview

67
00:02:29,320 --> 00:02:30,840
of how it actually works.

68
00:02:30,840 --> 00:02:33,480
Once we get in there, once we get on with that, we'll go in

69
00:02:33,480 --> 00:02:35,320
and we'll explore how it works.

70
00:02:35,320 --> 00:02:37,320
I'll go through and give a couple of examples,

71
00:02:37,320 --> 00:02:39,920
why it matters, why it's cool, why it's interesting.

72
00:02:39,920 --> 00:02:41,680
Get behind the covers a little bit.

73
00:02:41,680 --> 00:02:44,840
And if we have time, we'll jump in and we'll build a little bit.

74
00:02:44,840 --> 00:02:48,200
I always like to use the Star Wars API as a fun thing

75
00:02:48,200 --> 00:02:49,480
to build again.

76
00:02:49,480 --> 00:02:50,800
So we'll just show some ideas of using LaunchDarkly

77
00:02:50,800 --> 00:02:53,200
to control different aspects of communicating with that.

78
00:02:53,200 --> 00:02:54,520
And these are real basic examples.

79
00:02:54,520 --> 00:02:57,440
We're not going to get in here and build a massive store front

80
00:02:57,440 --> 00:02:58,880
or anything like that today.

81
00:02:58,880 --> 00:03:01,240
But really what we're going to show is how you can use feature flags

82
00:03:01,240 --> 00:03:03,920
to control different aspects of your application.

83
00:03:03,920 --> 00:03:06,360
And what feature flags are is something we'll get

84
00:03:06,360 --> 00:03:08,400
into as part of the presentation.

85
00:03:08,400 --> 00:03:11,520
So I'm going to jump into the demo now.

86
00:03:11,520 --> 00:03:13,440
This you can actually hit from your phone.

87
00:03:13,440 --> 00:03:15,520
There's an app we're going to use as part of the demo.

88
00:03:15,520 --> 00:03:16,960
So if you hit this on your phone,

89
00:03:16,960 --> 00:03:19,720
you'll actually watch the demo change as we go

90
00:03:19,720 --> 00:03:21,040
in and use these feature flags.

91
00:03:21,040 --> 00:03:22,880
So as we start toggling different things on and off,

92
00:03:22,920 --> 00:03:25,000
as I change them, as I do things like targeting,

93
00:03:25,000 --> 00:03:27,480
which I'll explain soon, you'll be able to watch that happen

94
00:03:27,480 --> 00:03:29,800
on your phone without having to do anything.

95
00:03:29,800 --> 00:03:31,520
It's kind of the whole point of the platform.

96
00:03:31,520 --> 00:03:33,000
So it's definitely worth hitting.

97
00:03:33,000 --> 00:03:34,440
It's an interesting thing.

98
00:03:34,440 --> 00:03:41,360
If the QR code's not working for you, it's just demo-10.launchdarklydemos.com,

99
00:03:41,360 --> 00:03:44,680
which we will see right here.

100
00:03:44,680 --> 00:03:47,280
So you'll see this at the booth this week.

101
00:03:47,280 --> 00:03:49,360
Michael, who's in the back, working at the booth with me this week,

102
00:03:49,360 --> 00:03:52,080
will be running this demo quite a bit.

103
00:03:52,120 --> 00:03:54,120
And it shows a couple of different things that are seeing.

104
00:03:54,120 --> 00:03:55,200
It's a real basic application.

105
00:03:55,200 --> 00:03:58,080
It doesn't really do anything other than show off launchdarkly.

106
00:03:58,080 --> 00:04:02,960
QR code in the right is just the same thing I gave you a few moments ago.

107
00:04:02,960 --> 00:04:05,040
It's a front end that's running in React.

108
00:04:05,040 --> 00:04:06,920
So if you don't know React, it's a JavaScript framework.

109
00:04:06,920 --> 00:04:09,160
It's a front end framework for the most part.

110
00:04:09,160 --> 00:04:10,720
But the back end is running in Python.

111
00:04:10,720 --> 00:04:15,040
So I host the React app as front end, and we communicate with Python for any,

112
00:04:15,040 --> 00:04:16,960
for Flask, for any API calls.

113
00:04:16,960 --> 00:04:18,960
So there are some database calls that happen.

114
00:04:18,960 --> 00:04:21,360
There's some user management stuff that happens.

115
00:04:21,360 --> 00:04:23,720
But it's kind of a two tier application, and

116
00:04:23,720 --> 00:04:27,360
then there's a database hanging out inside of AWS running that powers

117
00:04:27,360 --> 00:04:28,440
the information side of it.

118
00:04:30,200 --> 00:04:33,120
So at the most basic level, what is launchdarkly?

119
00:04:33,120 --> 00:04:34,960
This is the launchdarkly platform.

120
00:04:34,960 --> 00:04:37,640
Right, so launchdarkly, in the simplest way,

121
00:04:37,640 --> 00:04:40,880
is a management platform for releasing and shipping features.

122
00:04:40,880 --> 00:04:44,040
There's a lot more to that than just what is a feature.

123
00:04:44,040 --> 00:04:47,560
Who's ever used a feature flag for anything before inside of your code?

124
00:04:47,560 --> 00:04:51,080
Right, so launchdarkly does that, but it does it at big scale.

125
00:04:51,080 --> 00:04:55,280
And so as an example, I have this feature flag here called app UI.

126
00:04:57,600 --> 00:05:00,800
If I go and turn this on, this would be a good time for you to watch your phone.

127
00:05:02,280 --> 00:05:04,720
We go in, it looks that way.

128
00:05:04,720 --> 00:05:06,000
I go in and turn this on.

129
00:05:09,000 --> 00:05:10,120
The application changes in the middle.

130
00:05:10,120 --> 00:05:11,520
Am I in the right one?

131
00:05:11,520 --> 00:05:12,440
I am.

132
00:05:12,440 --> 00:05:13,040
I didn't save.

133
00:05:16,560 --> 00:05:18,160
There we go, we had a little bit of lag there.

134
00:05:18,160 --> 00:05:20,480
Conference Wi-Fi, gotta love it.

135
00:05:20,480 --> 00:05:22,000
We can see the application changed, right?

136
00:05:22,000 --> 00:05:24,200
So now we have a login screen in the middle.

137
00:05:24,200 --> 00:05:27,760
And that's a really basic example of just turning on a feature

138
00:05:27,760 --> 00:05:30,840
that changes the way the application works in some way.

139
00:05:30,840 --> 00:05:33,040
But this wasn't actually a good approach,

140
00:05:33,040 --> 00:05:36,040
because what we did is we turned this on for everybody, right?

141
00:05:36,040 --> 00:05:38,120
So most people, when they work with feature flags,

142
00:05:38,120 --> 00:05:39,920
they experience the same problem.

143
00:05:39,920 --> 00:05:42,480
You turn on a feature, and it applies to everybody.

144
00:05:42,480 --> 00:05:44,400
And if you want to change that in some way,

145
00:05:44,400 --> 00:05:48,200
you have to write that logic into the application or write if then statements,

146
00:05:48,240 --> 00:05:51,320
catch statements around parsing out those users and control it that way.

147
00:05:51,320 --> 00:05:53,640
But if you don't do that, you turn the feature on,

148
00:05:53,640 --> 00:05:56,240
it's available for 100% of your users.

149
00:05:56,240 --> 00:05:59,120
If something went wrong, say that UI didn't render right,

150
00:05:59,120 --> 00:06:01,320
there was a problem in it, and I wanted to turn that off,

151
00:06:01,320 --> 00:06:02,520
I could easily come back over.

152
00:06:04,240 --> 00:06:06,240
Conference Wi-Fi, go.

153
00:06:09,160 --> 00:06:11,200
And it's removed from everybody, which is useful, right?

154
00:06:11,200 --> 00:06:12,960
If something's broken, I don't have to reship the code.

155
00:06:12,960 --> 00:06:16,440
I don't have to sit there and wait for 30 minutes for the image to build and redeploy.

156
00:06:16,440 --> 00:06:20,880
I can turn it off very quickly, but it's still impacting everybody at the same time.

157
00:06:20,880 --> 00:06:23,840
So there's better ways to do this, and that's where LaunchDarkly shines.

158
00:06:23,840 --> 00:06:27,080
I always tell people, if all you're looking to do is turn everything on and off,

159
00:06:27,080 --> 00:06:29,680
there's a million easier ways to do that.

160
00:06:29,680 --> 00:06:32,640
But everything beyond that is when it gets really complex,

161
00:06:32,640 --> 00:06:35,360
when you want to start controlling users, when you want to change it on the fly,

162
00:06:35,360 --> 00:06:37,360
when you don't want to have to reship the application,

163
00:06:37,360 --> 00:06:42,000
when you want to write complex reloads that only reload a part of your application.

164
00:06:42,000 --> 00:06:44,560
All of that stuff's handled right out of the box with LaunchDarkly.

165
00:06:44,600 --> 00:06:47,520
So if I go in, we'll turn that new UI back on.

166
00:06:47,520 --> 00:06:50,320
We'll leave that in place.

167
00:06:50,320 --> 00:06:53,040
But we'll hit this background styling feature flag.

168
00:06:53,040 --> 00:06:55,800
And so that first one was something we call a Boolean feature flag.

169
00:06:55,800 --> 00:06:56,880
It's just a true or false.

170
00:06:56,880 --> 00:06:58,320
If it's on, the feature's on.

171
00:06:58,320 --> 00:07:00,360
If it's off, the feature's off.

172
00:07:00,360 --> 00:07:03,040
This one, on the other hand, is a string-based flag.

173
00:07:03,040 --> 00:07:08,720
And what I'm doing is I'm pushing configurations down to change the background

174
00:07:08,720 --> 00:07:12,000
based on different properties.

175
00:07:12,000 --> 00:07:12,560
So I have this now.

176
00:07:12,560 --> 00:07:14,400
I have a login screen in place.

177
00:07:14,400 --> 00:07:22,360
If I was to come in, I could add a rule to change the targeting around a bit.

178
00:07:22,360 --> 00:07:25,480
We have this idea of contexts inside of LaunchDarkly.

179
00:07:25,480 --> 00:07:27,320
You'll see this in the presentation side in a bit.

180
00:07:27,320 --> 00:07:31,120
But a context is basically your incoming connection to whatever system,

181
00:07:31,120 --> 00:07:34,480
whether it's a front end or a back end, like a front end like React

182
00:07:34,480 --> 00:07:37,280
or a back end like Flask.

183
00:07:37,280 --> 00:07:39,720
A context is the state of your request.

184
00:07:39,720 --> 00:07:42,560
And what we do is we create an identity for you off of that.

185
00:07:42,560 --> 00:07:45,440
So when I log in here, it'll grab my username.

186
00:07:45,440 --> 00:07:47,020
And I'll be able to do targeting off of that.

187
00:07:47,020 --> 00:07:49,000
I can do targeting off of whatever I want.

188
00:07:49,000 --> 00:07:51,680
It's not always a user, because a lot of times somebody might come into your

189
00:07:51,680 --> 00:07:53,520
system and not have a user associated with them.

190
00:07:53,520 --> 00:07:57,200
It might just be somebody in California logging in, or somebody in Florida

191
00:07:57,200 --> 00:08:00,920
logging in, or somebody in Pacific time zone, or somebody hitting a US West

192
00:08:00,920 --> 00:08:01,960
server.

193
00:08:01,960 --> 00:08:05,000
There's a lot of identity things that don't apply to a specific user and

194
00:08:05,000 --> 00:08:07,560
really just a property that they have.

195
00:08:07,560 --> 00:08:09,520
In this case, though, we're going to stick with the user one,

196
00:08:09,520 --> 00:08:11,760
just because it's simple.

197
00:08:11,760 --> 00:08:14,560
So come in here, we'll do user.

198
00:08:14,560 --> 00:08:18,200
And we'll do name is one of.

199
00:08:18,200 --> 00:08:20,680
Actually, what we'll do is we'll do key, because that's a little bit easier

200
00:08:20,680 --> 00:08:21,920
to play with.

201
00:08:29,960 --> 00:08:32,720
Coding.

202
00:08:32,720 --> 00:08:34,560
And we can choose which version of it I get.

203
00:08:34,560 --> 00:08:41,120
So if I go in and I save this now, and I log in as Cody.

204
00:08:41,760 --> 00:08:46,120
Wait a moment.

205
00:08:46,120 --> 00:08:47,560
I'll show you in the code where the time.

206
00:08:47,560 --> 00:08:50,840
This is the Python back end that I talked about.

207
00:08:50,840 --> 00:08:52,200
So here's all of the different routes.

208
00:08:52,200 --> 00:08:54,560
So in this case, I just did a login operation.

209
00:08:54,560 --> 00:08:56,680
So that calls for my front end into this flask.

210
00:08:56,680 --> 00:08:57,440
Ignore my code.

211
00:08:57,440 --> 00:08:58,360
It's just basic.

212
00:08:58,360 --> 00:08:59,560
It's not very interesting.

213
00:08:59,560 --> 00:09:06,960
But we can see I pull in that session key, and I create a key off of it that

214
00:09:06,960 --> 00:09:08,600
becomes that user object.

215
00:09:08,600 --> 00:09:13,080
So now, whenever I'm doing anything else inside of the product or inside of the

216
00:09:13,080 --> 00:09:15,920
API, that identity exists as part of my launch darkly context.

217
00:09:20,640 --> 00:09:23,200
I definitely made a mistake on the targeting rule, because that should have

218
00:09:23,200 --> 00:09:23,960
updated already.

219
00:09:23,960 --> 00:09:25,200
So we'll go back in.

220
00:09:27,680 --> 00:09:37,320
What we'll do is we'll go up here and we'll do it as a target instead.

221
00:09:37,320 --> 00:09:38,560
There we go.

222
00:09:38,600 --> 00:09:45,840
There I am.

223
00:09:45,840 --> 00:09:57,800
So what I'm doing here is I'm changing the default rule so it only shows that

224
00:09:57,800 --> 00:10:01,280
new version for my user, but everybody else gets a default.

225
00:10:01,280 --> 00:10:04,520
So the default one that's in there right now is just a standard grid background,

226
00:10:04,520 --> 00:10:07,760
but I've targeted only my user with that change.

227
00:10:07,800 --> 00:10:10,680
So now I'll turn this on.

228
00:10:10,680 --> 00:10:11,480
Hit save.

229
00:10:11,480 --> 00:10:21,600
That update.

230
00:10:21,600 --> 00:10:22,800
Normally it wouldn't flash like that.

231
00:10:22,800 --> 00:10:24,280
We're dealing with some bandwidth issues.

232
00:10:24,280 --> 00:10:27,000
But on all of your phones, when you're looking at this, you should not see those

233
00:10:27,000 --> 00:10:28,440
spots on the bottom.

234
00:10:28,440 --> 00:10:32,400
Again, really basic example we're showing here is the idea that I can change in

235
00:10:32,400 --> 00:10:37,000
very big ways the way an application works based on somebody coming in and a

236
00:10:37,040 --> 00:10:38,840
feature flag that I've configured.

237
00:10:38,840 --> 00:10:42,320
This was just a string path out to a background file.

238
00:10:42,320 --> 00:10:45,080
But you can think about this in the context of where we're going to get to

239
00:10:45,080 --> 00:10:48,840
around how I might control what database someone's connecting to or what upstream

240
00:10:48,840 --> 00:10:50,200
API someone's connecting to.

241
00:10:50,200 --> 00:10:54,120
If I wanted US West users to hit a database in US West, being able to

242
00:10:54,120 --> 00:10:57,880
configure that dynamically, but then also be able to change that.

243
00:10:57,880 --> 00:11:00,760
And the real power of this isn't necessarily in just being able to

244
00:11:00,760 --> 00:11:02,400
dynamically change that.

245
00:11:02,400 --> 00:11:04,600
It's being able to change that without the redeploy.

246
00:11:04,640 --> 00:11:07,600
Because a lot of times it's only a few lines of code to redo this, but that's

247
00:11:07,600 --> 00:11:09,520
also a change request.

248
00:11:09,520 --> 00:11:12,480
Oops, I was told not to hit that, and I just did.

249
00:11:14,480 --> 00:11:15,320
That's a change request.

250
00:11:15,320 --> 00:11:16,360
That's a redeployment.

251
00:11:16,360 --> 00:11:17,800
That's waiting for it to roll out.

252
00:11:17,800 --> 00:11:18,920
That's testing the new deployment.

253
00:11:18,920 --> 00:11:22,160
There's all these things that happen when you have to push out new code

254
00:11:22,160 --> 00:11:23,880
entirely into production.

255
00:11:23,880 --> 00:11:26,840
And when it's all controlled via feature flag, you have the flexibility to do

256
00:11:26,840 --> 00:11:28,000
that without that redeploy.

257
00:11:32,320 --> 00:11:33,360
So cruise forward now.

258
00:11:34,600 --> 00:11:40,560
And we'll get into the interesting back end stuff now.

259
00:11:40,560 --> 00:11:42,600
So that was all front end feature flags so far.

260
00:11:42,600 --> 00:11:45,920
That was just changing different ways that the application itself shows

261
00:11:45,920 --> 00:11:47,960
things out to users.

262
00:11:47,960 --> 00:11:51,240
But then, again, the whole session's about back end and being able to

263
00:11:51,240 --> 00:11:55,320
control the way APIs work and be able to roll out new API changes.

264
00:11:55,320 --> 00:11:58,000
So I have this debug menu here that only displays when we've configured

265
00:11:58,000 --> 00:11:59,520
it for a specific user.

266
00:11:59,520 --> 00:12:01,880
So there's no targeting in place right now, so you guys don't see that on

267
00:12:01,880 --> 00:12:02,840
your phones.

268
00:12:02,840 --> 00:12:11,840
But if I was to go in and say, I want to roll this out just to me, we

269
00:12:11,840 --> 00:12:17,320
already showed this, but I can go in and do that.

270
00:12:17,320 --> 00:12:18,560
Save it.

271
00:12:18,560 --> 00:12:19,560
Load.

272
00:12:41,800 --> 00:12:43,680
It'll load eventually.

273
00:12:43,680 --> 00:12:45,920
The lag is a little rough.

274
00:12:45,920 --> 00:12:48,800
That debug menu will ultimately show me what database I'm connected to.

275
00:12:48,800 --> 00:12:52,240
By default, with it off the application's set up to connect locally.

276
00:12:52,240 --> 00:12:57,680
So if I go back into my code here, I have a route that's set up

277
00:12:57,680 --> 00:13:00,680
specifically for database connections.

278
00:13:00,680 --> 00:13:03,880
So this is the one that returns back data.

279
00:13:03,880 --> 00:13:06,680
And you can see inside of here, I'm setting up the LaunchDarkly client.

280
00:13:06,680 --> 00:13:09,400
So I'm going out and setting up against the SDK key that's configured

281
00:13:09,400 --> 00:13:11,240
specifically for this project.

282
00:13:11,280 --> 00:13:16,680
So this marries directly into this configuration.

283
00:13:16,680 --> 00:13:22,200
So if I go in here and I was to pull down this server-side key, that is

284
00:13:22,200 --> 00:13:22,840
that connection.

285
00:13:22,840 --> 00:13:26,240
What that does is it connects the SDK that lives inside of that back end

286
00:13:26,240 --> 00:13:28,840
with LaunchDarkly and creates a persistent connection back in to

287
00:13:28,840 --> 00:13:30,320
receive those feature flag updates.

288
00:13:37,520 --> 00:13:40,120
I pull in that user information from the login.

289
00:13:40,160 --> 00:13:43,640
So I'm doing just a default of debug user when things aren't working right.

290
00:13:43,640 --> 00:13:45,200
Otherwise, I'm using this user key.

291
00:13:48,080 --> 00:13:50,560
And I'm setting that user inside of the application itself.

292
00:13:50,560 --> 00:13:53,160
So I'm applying this to LaunchDarkly and saying, hey, this is the

293
00:13:53,160 --> 00:13:54,040
user who's come in.

294
00:13:54,040 --> 00:13:57,520
So in the real applications I use, I typically pass this as a server-side

295
00:13:57,520 --> 00:13:58,840
cookie and bring it in.

296
00:13:58,840 --> 00:14:03,560
Or I'll do a JOT authentication and decode the JOT as part of this.

297
00:14:03,560 --> 00:14:06,440
For here, it's just simple to have it be a user.

298
00:14:06,440 --> 00:14:09,200
But then once we have that in place, we can start to look at the values of

299
00:14:09,200 --> 00:14:11,440
feature flags and make decisions based on them.

300
00:14:11,440 --> 00:14:15,440
So this is a feature flag that's called dbinfo inside of LaunchDarkly.

301
00:14:15,440 --> 00:14:19,200
And if I pop back out and we go look at that one.

302
00:14:19,200 --> 00:14:29,840
And this one I'm using a JSON-based flag to just push down basic

303
00:14:29,840 --> 00:14:31,000
configuration data.

304
00:14:31,000 --> 00:14:34,840
I removed out, the demo I usually do has the additional connection.

305
00:14:34,840 --> 00:14:37,120
Basically, it writes out the entire connection string.

306
00:14:37,160 --> 00:14:39,760
I didn't want to broadcast that out to everybody as part of this demo.

307
00:14:39,760 --> 00:14:41,400
So really, it's just a shortened string.

308
00:14:41,400 --> 00:14:45,880
But you can parse anything out of that and run that connection string

309
00:14:45,880 --> 00:14:47,640
through just the same way I am here.

310
00:14:47,640 --> 00:14:52,600
So if you look back in the code now, we can see I'm pulling a mode out.

311
00:14:52,600 --> 00:14:56,360
If it's local, use this local dummy data.

312
00:14:56,360 --> 00:15:02,400
Otherwise, go out to DynamoDB and start pulling in information from there.

313
00:15:02,400 --> 00:15:03,840
Again, a very basic example.

314
00:15:03,840 --> 00:15:08,600
But when you think about how this applies in real world environments,

315
00:15:08,600 --> 00:15:09,120
words are hard.

316
00:15:10,360 --> 00:15:14,160
It gets really interesting because like I said, you can start to configure

317
00:15:14,160 --> 00:15:18,240
US West users are getting a new database, but only for users who are physically

318
00:15:18,240 --> 00:15:20,480
in US West at 2 AM.

319
00:15:20,480 --> 00:15:24,000
You can run that until 6 AM and then have it switch back.

320
00:15:24,000 --> 00:15:27,040
All of that's able to be automated inside of the platform and able to roll out.

321
00:15:27,040 --> 00:15:30,560
And so we have this concept of testing in production, which is kind of a tongue

322
00:15:30,600 --> 00:15:33,000
cheek phrase that scares a lot of people.

323
00:15:33,000 --> 00:15:36,400
But the idea being we can never completely remove risk.

324
00:15:36,400 --> 00:15:37,440
That's why we test so much.

325
00:15:37,440 --> 00:15:40,160
That's why we're so careful about doing rollouts in production, because when

326
00:15:40,160 --> 00:15:43,560
things go wrong, that's usually a very bad thing.

327
00:15:43,560 --> 00:15:46,560
But when you can completely mitigate the risk out, when you have the ability to

328
00:15:46,560 --> 00:15:50,200
turn off that flag immediately, it turns off within a second.

329
00:15:50,200 --> 00:15:54,000
And then you can also limit it down by targeting and control who's actually

330
00:15:54,000 --> 00:15:55,280
receiving that change.

331
00:15:55,280 --> 00:15:59,200
You start reducing that risk down to a point where it doesn't, while it's still

332
00:15:59,200 --> 00:16:00,680
there, it's still a risk.

333
00:16:00,680 --> 00:16:04,840
It's not as scary of a risk, because the rollback is half a second to make

334
00:16:04,840 --> 00:16:06,200
everything go away.

335
00:16:06,200 --> 00:16:09,840
Or you take the different approach and you start off with the rollout disabled.

336
00:16:09,840 --> 00:16:10,880
You ship it disabled.

337
00:16:10,880 --> 00:16:11,480
No one sees it.

338
00:16:11,480 --> 00:16:12,680
There's no change.

339
00:16:12,680 --> 00:16:15,120
But you target somebody on your developer team and say, hey, I want to test this

340
00:16:15,120 --> 00:16:16,080
out with you first.

341
00:16:16,080 --> 00:16:17,880
Then you expand out to your QA users.

342
00:16:17,880 --> 00:16:22,680
Then you expand out to your dev users, gradually growing that amount, that pool,

343
00:16:22,680 --> 00:16:23,360
as you see fit.

344
00:16:23,360 --> 00:16:26,840
Then maybe you move into a percentage rollout and start doing that rollout as

345
00:16:26,840 --> 00:16:27,880
well.

346
00:16:27,920 --> 00:16:29,680
All that stuff is ground floor table stakes.

347
00:16:29,680 --> 00:16:32,880
There's not a lot of tricks to make that happen in the platform.

348
00:16:32,880 --> 00:16:34,640
That's just what the platform does.

349
00:16:34,640 --> 00:16:37,120
But you start having full control over the risk side of this.

350
00:16:39,120 --> 00:16:43,760
So if I go back in, I'm going to reset that feature flag again, because this

351
00:16:43,760 --> 00:16:46,080
connection is killing me.

352
00:16:46,080 --> 00:17:00,760
I'll just make the default that for now and we'll just delete the roll.

353
00:17:00,760 --> 00:17:01,280
We'll save.

354
00:17:06,800 --> 00:17:07,280
Come on.

355
00:17:16,080 --> 00:17:21,920
We're having some brutal lag here, so it's not going to switch over.

356
00:17:21,920 --> 00:17:25,520
But if that did work, you would see it switch over and it would grab the new

357
00:17:25,520 --> 00:17:27,040
data from that database instead.

358
00:17:27,040 --> 00:17:28,360
See if the API side works.

359
00:17:46,080 --> 00:17:49,880
There we go.

360
00:17:49,880 --> 00:17:50,360
Let's go.

361
00:17:50,360 --> 00:18:06,440
Yeah, lag has just killed us, so we're not going to be able to see that this

362
00:18:06,440 --> 00:18:06,960
time.

363
00:18:06,960 --> 00:18:10,760
But if we did, we would see this change on the bottom and it would show cloud

364
00:18:10,760 --> 00:18:11,560
instead.

365
00:18:11,560 --> 00:18:15,280
And when we clicked on this database field, it would show the filled out

366
00:18:15,280 --> 00:18:17,000
information from that database.

367
00:18:17,000 --> 00:18:20,480
And you can see it as I toggle that on and off, it'll immediately switch back

368
00:18:20,480 --> 00:18:23,080
and forth between those data sources and show that information out.

369
00:18:23,080 --> 00:18:28,400
So sorry the lag is killing us so bad on this one.

370
00:18:28,400 --> 00:18:29,240
So that's the overall demo.

371
00:18:29,240 --> 00:18:31,120
You'll see this at the booth if you want to come by and talk to us.

372
00:18:31,120 --> 00:18:33,160
We can go through the steps again.

373
00:18:33,160 --> 00:18:35,800
But I want to talk a little bit about how this all works behind the scenes

374
00:18:35,800 --> 00:18:36,160
now.

375
00:18:41,800 --> 00:18:44,160
There we go.

376
00:18:44,200 --> 00:18:47,360
So again, we talked a lot about this at great length.

377
00:18:47,360 --> 00:18:50,680
But the idea of LaunchDarkly is that let developers control what's being

378
00:18:50,680 --> 00:18:53,760
released to who on your timeline.

379
00:18:53,760 --> 00:18:56,880
It sounds like a very marketing phrase and maybe it kind of is, but it's

380
00:18:56,880 --> 00:18:58,480
also very true.

381
00:18:58,480 --> 00:19:00,320
You can target based on anything.

382
00:19:00,320 --> 00:19:01,920
We're not limiting that to users.

383
00:19:01,920 --> 00:19:03,880
You can target based on properties.

384
00:19:03,880 --> 00:19:05,680
Target iPhone versus Android.

385
00:19:05,680 --> 00:19:07,760
You can target laptop versus desktop.

386
00:19:07,760 --> 00:19:10,040
Anything that you want to bring in, I've even seen examples where people

387
00:19:10,040 --> 00:19:12,840
start to tie that into their own identity platforms and they start

388
00:19:12,840 --> 00:19:15,760
bringing in things like, I want to roll this change out to the 12th floor

389
00:19:15,760 --> 00:19:16,600
first.

390
00:19:16,600 --> 00:19:19,120
People in this section of the building or this office first.

391
00:19:19,120 --> 00:19:20,960
All that stuff is table stakes.

392
00:19:20,960 --> 00:19:24,040
And so you can control who and then when, whether you want to schedule it

393
00:19:24,040 --> 00:19:27,080
out, whether you want to do percentage based, you want to roll out 5% of

394
00:19:27,080 --> 00:19:27,280
time.

395
00:19:27,280 --> 00:19:30,560
We had one user who came through and has such a large scale environment.

396
00:19:30,560 --> 00:19:32,960
They're shipping to millions of people.

397
00:19:32,960 --> 00:19:36,200
We had to make an adjustment to the platform to roll out to sub 1% at a

398
00:19:36,200 --> 00:19:36,560
time.

399
00:19:36,560 --> 00:19:41,800
So they are doing like 0.5% at a time over gradual periods of time to

400
00:19:41,800 --> 00:19:43,560
release features out.

401
00:19:43,560 --> 00:19:45,320
All that stuff is table stakes.

402
00:19:45,320 --> 00:19:48,600
So the idea being, if the feature's on, run the new code.

403
00:19:48,600 --> 00:19:52,600
If it's off, run the old code.

404
00:19:52,600 --> 00:19:54,240
We showed this in the apps.

405
00:19:54,240 --> 00:19:56,680
It's funny because I actually grabbed this screenshot sitting back there

406
00:19:56,680 --> 00:19:59,720
just a few minutes ago.

407
00:19:59,720 --> 00:20:03,560
We talked about the back inside of it as well.

408
00:20:03,560 --> 00:20:04,880
So yeah, we talk about front end flags.

409
00:20:04,880 --> 00:20:07,560
We're often talking about new components in the application.

410
00:20:07,560 --> 00:20:08,600
Maybe it's a new login screen.

411
00:20:08,600 --> 00:20:10,920
Maybe it's an entirely new layout.

412
00:20:10,920 --> 00:20:12,480
Maybe it's a new theme.

413
00:20:12,480 --> 00:20:15,920
It's really oftentimes visual things inside of the front end.

414
00:20:15,920 --> 00:20:18,920
And we're all about giving people, in those scenarios, it's really giving

415
00:20:18,920 --> 00:20:22,600
people access to that functionality and being able to see it.

416
00:20:22,600 --> 00:20:25,280
One of the companies I worked at previously used this to roll out

417
00:20:25,280 --> 00:20:27,200
changes into a cloud platform.

418
00:20:27,200 --> 00:20:30,640
So they would roll out visual changes to their favorite customers and let

419
00:20:30,640 --> 00:20:32,440
them get validation and help them pick through.

420
00:20:32,440 --> 00:20:35,160
Hey, have them help the vendor pick through.

421
00:20:35,160 --> 00:20:36,480
Hey, is this structured right?

422
00:20:36,480 --> 00:20:37,560
Does it make sense?

423
00:20:37,560 --> 00:20:40,320
Does the user access pass?

424
00:20:40,360 --> 00:20:42,920
So kind of a cool use case.

425
00:20:42,920 --> 00:20:45,840
The fun one is when you have the errors pop up and being able to just turn it

426
00:20:45,840 --> 00:20:49,080
off and the error just disappears from everybody at the same time.

427
00:20:49,080 --> 00:20:52,000
But that's a very common thing with front end flags.

428
00:20:52,000 --> 00:20:55,640
But because back end flags aren't as visual, they're not as oftentimes

429
00:20:55,640 --> 00:20:56,400
things people see.

430
00:20:56,400 --> 00:20:57,720
They're more things people interact with.

431
00:20:57,720 --> 00:21:01,320
Sure, you can sit there and you can call an API and see how it returns and

432
00:21:01,320 --> 00:21:03,960
then refresh it afterwards and see the update.

433
00:21:03,960 --> 00:21:07,080
But a lot of times it's more about platform connectivity and connecting to

434
00:21:07,920 --> 00:21:13,040
Whether it's other APIs, whether it's integrations, whether it's databases.

435
00:21:13,040 --> 00:21:14,880
A lot of times it's stitching the application together.

436
00:21:14,880 --> 00:21:17,720
And so while the front end gets a lot of attention because it's pretty and

437
00:21:17,720 --> 00:21:21,320
nice and looks cool, the back end is oftentimes what powers the entire

438
00:21:21,320 --> 00:21:22,440
application in the first place.

439
00:21:22,440 --> 00:21:25,960
And if you lose that, the front end's not really worth much other than just

440
00:21:25,960 --> 00:21:26,920
being really pretty to look at.

441
00:21:30,200 --> 00:21:34,120
Couple of examples of things that I've seen people do in specifically an API

442
00:21:34,120 --> 00:21:35,560
space with LaunchDarkly.

443
00:21:35,640 --> 00:21:38,160
I've seen people do selective maintenance modes.

444
00:21:38,160 --> 00:21:41,760
They'll take down a part of their API for a maintenance for some reason.

445
00:21:41,760 --> 00:21:44,960
They want to pull it down, but they want it still accessible for the test team

446
00:21:44,960 --> 00:21:48,480
so they can keep testing it and test the changes out as they roll out.

447
00:21:48,480 --> 00:21:51,680
So being able to have a maintenance mode for everybody but have a feature flag

448
00:21:51,680 --> 00:21:54,320
in place that says, hey, if you're in the dev team or you have this header

449
00:21:54,320 --> 00:22:00,600
present or this jot token decrypts and has this value in it, go ahead and

450
00:22:00,600 --> 00:22:02,280
allow that person to access.

451
00:22:02,280 --> 00:22:03,080
Super common.

452
00:22:03,080 --> 00:22:04,720
Again, table stake stuff.

453
00:22:04,760 --> 00:22:09,840
I've seen people roll out the V2 approach, API slash V1, API slash V2.

454
00:22:09,840 --> 00:22:12,600
Being able to roll that out via feature flag, again, super common.

455
00:22:12,600 --> 00:22:16,480
People will put user identity behind that and say, only these users can

456
00:22:16,480 --> 00:22:17,600
access it.

457
00:22:17,600 --> 00:22:20,080
Only people in this department can access it.

458
00:22:20,080 --> 00:22:21,320
So gradual rollouts of that.

459
00:22:21,320 --> 00:22:22,880
And the gradual thing is an important one.

460
00:22:22,880 --> 00:22:25,760
We talk about this idea of progressive delivery a lot.

461
00:22:25,760 --> 00:22:29,040
And progressive delivery is this idea of gradually rolling out a change instead

462
00:22:29,040 --> 00:22:33,680
of rolling it out to everybody, being able to do smaller groups at a time and

463
00:22:33,680 --> 00:22:35,440
increase that as you see fit or reduce.

464
00:22:35,440 --> 00:22:38,440
That's been kind of the theme of this conversation so far.

465
00:22:38,440 --> 00:22:41,400
But that's where mature, like the most mature people get to is doing those

466
00:22:41,400 --> 00:22:44,560
gradual rollouts and gradual rollbacks.

467
00:22:44,560 --> 00:22:45,640
Dynamic configurations.

468
00:22:45,640 --> 00:22:49,040
This one, I like this one a lot but there's dragons in there.

469
00:22:49,040 --> 00:22:52,160
So you want to be obviously careful with that to a certain extent.

470
00:22:52,160 --> 00:22:55,080
You want to make sure your application has safe fallbacks because there's a

471
00:22:55,080 --> 00:22:58,720
time where the API or where the SDK has to connect to launch darkly.

472
00:22:58,720 --> 00:23:02,880
And if you're nulling out all those values until that connection happens,

473
00:23:02,920 --> 00:23:06,160
the first experience of someone hitting that, they're not going to have any values.

474
00:23:06,160 --> 00:23:07,640
Man, I think it's in a bad place.

475
00:23:07,640 --> 00:23:08,160
Sorry about that.

476
00:23:09,880 --> 00:23:11,880
That's going to give them a bad experience.

477
00:23:11,880 --> 00:23:15,840
So you want to make sure that your safe default values are having it off or

478
00:23:15,840 --> 00:23:20,600
having something that lands for the users, maybe placeholder text, stuff like that.

479
00:23:20,600 --> 00:23:23,080
But other than that, once the application's initialized,

480
00:23:23,080 --> 00:23:27,120
being able to change those values on the fly and grant people access to change

481
00:23:27,120 --> 00:23:28,120
those, right?

482
00:23:28,120 --> 00:23:30,840
When I was doing development work previously,

483
00:23:30,840 --> 00:23:34,480
a lot of times I didn't want to be the one configuring that.

484
00:23:34,480 --> 00:23:37,840
I wanted to set up the system to be able to have someone consume that.

485
00:23:37,840 --> 00:23:40,000
But I expected someone like Ops to be doing that or

486
00:23:40,000 --> 00:23:42,520
I expected a product manager to be doing that for their customers.

487
00:23:42,520 --> 00:23:46,000
And so when you can build this in and then turn that access over to them,

488
00:23:46,000 --> 00:23:47,400
that's a really powerful thing.

489
00:23:47,400 --> 00:23:49,800
Means they don't have to be the ones going into some config file and

490
00:23:49,800 --> 00:23:53,160
re-pushing it out themselves and pulling change requests on it or

491
00:23:53,160 --> 00:23:54,400
pulling PRs on the code.

492
00:23:55,960 --> 00:23:57,920
The other one is like exposing additional functionality.

493
00:23:57,920 --> 00:24:01,040
You might want your API by default to only expose a couple of specific

494
00:24:01,040 --> 00:24:03,200
properties and a couple of specific controls.

495
00:24:03,200 --> 00:24:06,320
But being able to expand that out and say, hey, if Cody comes in,

496
00:24:06,320 --> 00:24:07,560
he can do these more things.

497
00:24:07,560 --> 00:24:10,640
Or if Tom comes in, he can do less things.

498
00:24:10,640 --> 00:24:13,200
All right, being able to control that and add or

499
00:24:13,200 --> 00:24:17,200
remove functionality based on user is another really common API pattern.

500
00:24:17,200 --> 00:24:18,160
That happens in LaunchDarkly.

501
00:24:22,040 --> 00:24:26,200
The kill switch thing is probably the thing I think most people start with.

502
00:24:26,240 --> 00:24:28,560
It's the idea of, hey, I've turned on these features,

503
00:24:28,560 --> 00:24:33,400
they're out in the wild now, but something broke and I want to roll them back.

504
00:24:33,400 --> 00:24:37,640
So the idea is, something happens inside there, throws a 502 or has a problem.

505
00:24:37,640 --> 00:24:40,880
You can very quickly turn that off via a couple of different ways.

506
00:24:42,160 --> 00:24:44,320
The first way is just the regular toggle approach, right?

507
00:24:44,320 --> 00:24:47,720
Turning the feature off and then it goes back to the stable existing code.

508
00:24:47,720 --> 00:24:50,000
We also have this idea of flag triggers.

509
00:24:50,000 --> 00:24:55,120
Flag triggers are basically a web hook that you can attach to a feature flag.

510
00:24:55,160 --> 00:24:56,360
And you can have systems call that.

511
00:24:56,360 --> 00:25:02,120
So we have integrations like Data Dog or Dynatrace or other APM tools, Grafana.

512
00:25:02,120 --> 00:25:06,040
And all of these can actually fire off a call to a web hook based on specific

513
00:25:06,040 --> 00:25:06,880
values, right?

514
00:25:06,880 --> 00:25:10,440
So if you have a login page you've rolled out and

515
00:25:10,440 --> 00:25:12,920
it's throwing 100 errors a second, that's just broken.

516
00:25:12,920 --> 00:25:17,800
There's no real, there's only one or two, that thing is broken.

517
00:25:17,800 --> 00:25:20,920
So why have an administrator have to go in and turn that feature off?

518
00:25:20,920 --> 00:25:26,040
Why not just have one of those APM tools send a request in to disable that feature

519
00:25:26,040 --> 00:25:27,680
and roll it back to what it was before?

520
00:25:27,680 --> 00:25:29,400
So flag triggers are the way people do that.

521
00:25:29,400 --> 00:25:32,280
People also do that in something called workflows that I'll actually pop back in

522
00:25:32,280 --> 00:25:34,040
and show before we move on too far.

523
00:25:36,200 --> 00:25:40,120
So once that's disabled, and this is a nuance that I don't think people always

524
00:25:40,120 --> 00:25:42,320
get when they first look at this.

525
00:25:42,320 --> 00:25:44,480
This code is actually removed from execution.

526
00:25:44,480 --> 00:25:46,160
When it's off, it's not just hidden.

527
00:25:46,160 --> 00:25:49,320
It's not like a div that gets hidden behind something or

528
00:25:49,480 --> 00:25:51,200
something gets like escaped out.

529
00:25:51,200 --> 00:25:53,440
It's completely removed from the execution of the code.

530
00:25:53,440 --> 00:25:56,400
So it just doesn't, it's not running anymore.

531
00:25:56,400 --> 00:26:00,040
And so like those errors just disappear while that code is disabled.

532
00:26:00,040 --> 00:26:02,240
A lot of people think, you're just hiding it some way.

533
00:26:02,240 --> 00:26:05,200
It's not really being hidden, it's just being legitimately disabled.

534
00:26:05,200 --> 00:26:06,920
It's not in the execution path anymore.

535
00:26:06,920 --> 00:26:09,160
It's not part of the execution runtime once it's disabled.

536
00:26:12,680 --> 00:26:14,720
So I showed this in the demo a little bit, but

537
00:26:14,720 --> 00:26:16,800
just a little bit more of a visual example.

538
00:26:16,840 --> 00:26:21,520
If the application is set up running normal, the new API is turned off.

539
00:26:21,520 --> 00:26:24,000
Then coming in, turning it on,

540
00:26:24,000 --> 00:26:26,720
application suddenly starts communicating with the new API.

541
00:26:26,720 --> 00:26:29,960
That API is communicating with one of the databases at a given time.

542
00:26:29,960 --> 00:26:33,640
It's probably connected to the bottom one by default, yep.

543
00:26:33,640 --> 00:26:35,720
And then once we turn it on, we connect over.

544
00:26:35,720 --> 00:26:37,280
And all of those are simple feature flags.

545
00:26:37,280 --> 00:26:40,040
You can dramatically change the way the application communicates with just

546
00:26:40,040 --> 00:26:41,240
a few toggle clicks.

547
00:26:41,240 --> 00:26:46,960
So I'm gonna unpack targeting a little bit.

548
00:26:46,960 --> 00:26:51,400
When we wrap targeting around these, you guys saw this in the UI.

549
00:26:51,400 --> 00:26:54,960
We can wrap these around different properties that apply to the user.

550
00:26:54,960 --> 00:26:57,800
So we can enable this only if the group is in the test or

551
00:26:57,800 --> 00:27:00,240
the user's group is in a testing group.

552
00:27:00,240 --> 00:27:03,720
Or if they're locations in the west coast or if they're devices in MacBook.

553
00:27:03,720 --> 00:27:05,840
Any of those properties are things that we can do.

554
00:27:05,840 --> 00:27:09,440
We just made a big change to the way context work.

555
00:27:09,440 --> 00:27:12,640
Where originally we had everybody be a user object and

556
00:27:12,640 --> 00:27:16,040
we would consider anything using launch directly as a user.

557
00:27:16,040 --> 00:27:18,440
But what happens when your users aren't people?

558
00:27:18,440 --> 00:27:20,320
When it's a refrigerator, for example.

559
00:27:20,320 --> 00:27:22,080
When it's a set top box.

560
00:27:22,080 --> 00:27:28,240
We have a streaming customer who releases features to new set top boxes

561
00:27:28,240 --> 00:27:29,520
as part of their gradual rollout.

562
00:27:29,520 --> 00:27:30,960
So they'll start off with the newest device.

563
00:27:30,960 --> 00:27:34,000
The newest device gets the newest functionality.

564
00:27:34,000 --> 00:27:37,440
And they'll gradually roll back to the V2 of the box, the V1 of the box.

565
00:27:37,440 --> 00:27:40,720
They don't even collect identity from those users who are logged in as part of this.

566
00:27:40,720 --> 00:27:45,120
They do all of those features based purely on the physical device that they have.

567
00:27:50,000 --> 00:27:53,360
So the way that context work, and we call that object a context object.

568
00:27:53,360 --> 00:27:57,400
If the user's group is dev testers, we turn the feature on and

569
00:27:57,400 --> 00:27:59,000
they get the new thing.

570
00:27:59,000 --> 00:28:00,160
For everyone else, it's turned off.

571
00:28:03,120 --> 00:28:05,240
We talked a lot about APIs in this one.

572
00:28:05,280 --> 00:28:07,840
And like Python as a key example here.

573
00:28:07,840 --> 00:28:09,560
But these are all the SDKs we support.

574
00:28:09,560 --> 00:28:12,520
There's actually a couple more that haven't been added to this list yet.

575
00:28:12,520 --> 00:28:14,800
I think all the rest is on there now.

576
00:28:14,800 --> 00:28:17,800
But these are all the different SDKs we support across a number of different

577
00:28:17,800 --> 00:28:19,480
front end, back end platforms.

578
00:28:19,480 --> 00:28:22,480
There's a few that are frameworks of JavaScript that are supported.

579
00:28:22,480 --> 00:28:25,520
For example, Svelte is supported, SolidJS is supported.

580
00:28:25,520 --> 00:28:29,640
All of those work because they're just offshoots of JavaScript effectively.

581
00:28:29,640 --> 00:28:32,320
But we've got a pretty wide range of support.

582
00:28:32,360 --> 00:28:36,520
I've been working recently in our Swift SDK.

583
00:28:36,520 --> 00:28:38,200
I've been working in the React Native SDK a bunch,

584
00:28:38,200 --> 00:28:41,760
doing a bunch of mobile development things.

585
00:28:41,760 --> 00:28:45,520
And the value of that is that all of these things happen consistently at

586
00:28:45,520 --> 00:28:46,160
the same time.

587
00:28:46,160 --> 00:28:49,120
So if you've got a front end running in React, and

588
00:28:49,120 --> 00:28:53,160
you've got your back end running in Python, and you've got users connecting

589
00:28:53,160 --> 00:28:58,120
from iOS devices or React Native devices, they're all going to receive

590
00:28:58,120 --> 00:29:01,240
those feature flag updates at the same time, just because of the way the system

591
00:29:01,240 --> 00:29:02,200
works.

592
00:29:02,200 --> 00:29:04,760
All of those updates are going to be processed at the same time on those

593
00:29:04,760 --> 00:29:05,800
devices.

594
00:29:05,800 --> 00:29:09,600
So you're not going to have this experience where it's customized per SDK.

595
00:29:09,600 --> 00:29:11,760
Well, there's language customizations obviously, but

596
00:29:11,760 --> 00:29:14,200
the way those actually render on the device is consistent.

597
00:29:19,640 --> 00:29:23,560
And so this is what it looks like in Python itself.

598
00:29:23,560 --> 00:29:26,800
And an example that we'll throw together really quickly here in a moment,

599
00:29:26,800 --> 00:29:28,880
assuming the internet cooperates with us.

600
00:29:29,880 --> 00:29:32,480
We install the LaunchDarkly server SDK.

601
00:29:32,480 --> 00:29:35,640
So we have two different kinds of SDKs, client side and server side.

602
00:29:35,640 --> 00:29:37,320
They work a little bit different, but

603
00:29:37,320 --> 00:29:40,000
they still produce the same kind of consistent results.

604
00:29:40,000 --> 00:29:42,120
LaunchDarkly is a server side SDK.

605
00:29:42,120 --> 00:29:44,160
So we install server side SDK.

606
00:29:44,160 --> 00:29:47,200
We bring in the config module.

607
00:29:47,200 --> 00:29:49,440
We set the config with the SDK key.

608
00:29:49,440 --> 00:29:52,720
It's important to note this isn't an authentication mechanism.

609
00:29:52,720 --> 00:29:54,960
It's just a communication mechanism.

610
00:29:54,960 --> 00:29:57,640
There's different sets of keys for things like when you want to do secure mode and

611
00:29:57,640 --> 00:29:59,440
you want to lock down the SDK.

612
00:29:59,440 --> 00:30:02,960
Because nothing is being changed inside of the application,

613
00:30:02,960 --> 00:30:04,480
it's really just a read only.

614
00:30:04,480 --> 00:30:06,480
So all it is is reading feature flag values.

615
00:30:06,480 --> 00:30:07,800
There's no change there.

616
00:30:07,800 --> 00:30:12,120
So several of my examples on my GitHub repo will have the SDK key exposed

617
00:30:12,120 --> 00:30:13,400
because it's not.

618
00:30:13,400 --> 00:30:15,800
For the server side SDK, there's a little bit of a concern, but

619
00:30:15,800 --> 00:30:17,200
for the client side, it doesn't matter.

620
00:30:17,200 --> 00:30:18,440
It's just reading data.

621
00:30:20,280 --> 00:30:21,600
We set the context.

622
00:30:21,600 --> 00:30:26,080
So we go in, in this case, I throw out a silly one of context key, one, two, three.

623
00:30:26,120 --> 00:30:27,560
And then I give that one a name.

624
00:30:27,560 --> 00:30:31,240
So we build up that context and then we evaluate the feature.

625
00:30:31,240 --> 00:30:33,880
So in this case, we're evaluating a QR code feature.

626
00:30:33,880 --> 00:30:37,600
We're feeding it the context and we're giving it a default value of false.

627
00:30:37,600 --> 00:30:40,120
So if something goes wrong, SDK can't communicate,

628
00:30:40,120 --> 00:30:43,280
application has something weird and it's just not reaching out.

629
00:30:43,280 --> 00:30:46,120
It'll always get that safe default of false.

630
00:30:46,120 --> 00:30:47,840
But in other times, it'll read that back and

631
00:30:47,840 --> 00:30:51,560
now that val object becomes the feature flag value.

632
00:30:51,560 --> 00:30:53,920
And that updates on the fly every time the code runs.

633
00:30:56,080 --> 00:31:01,600
So I said we'd go back and show a couple of other things inside of the UI before we

634
00:31:01,600 --> 00:31:04,040
cruise forward and before I go try to build a little bit with this and

635
00:31:04,040 --> 00:31:04,640
show something.

636
00:31:07,040 --> 00:31:11,600
So if we go in and we look at the database migration as an example.

637
00:31:17,000 --> 00:31:19,440
We can see the flag trigger in here.

638
00:31:19,440 --> 00:31:21,760
So we see flag triggers right here.

639
00:31:21,760 --> 00:31:24,000
These are all of the different integrations we support for

640
00:31:24,040 --> 00:31:24,720
flag triggers.

641
00:31:24,720 --> 00:31:26,880
So we can bring in through data dog events, we can bring in through

642
00:31:26,880 --> 00:31:30,960
Dynatrace, generic trigger we'll talk about in a moment, honeycomb, new relic.

643
00:31:30,960 --> 00:31:34,880
All of those will provide integration back into launch darkly and feed their

644
00:31:34,880 --> 00:31:41,080
actual APM values in and be able to take actions against feature flags.

645
00:31:41,080 --> 00:31:43,680
The generic trigger one is a lot of fun because you can start to bring that into

646
00:31:43,680 --> 00:31:45,320
CI CD pipelines, right?

647
00:31:45,320 --> 00:31:48,760
So if you have a rest call as part of the final task in your pipeline, or

648
00:31:48,760 --> 00:31:50,640
if you want to inject a rest call into it,

649
00:31:50,680 --> 00:31:54,920
you can have the final task of your CI CD flow be to enable the feature.

650
00:31:54,920 --> 00:31:57,760
Be careful with that because think about how a pipeline works.

651
00:31:57,760 --> 00:31:59,960
Every time that pipeline runs, it's going to enable that feature.

652
00:31:59,960 --> 00:32:03,480
So if you were trying to fix something in it, you were reconfiguring in some way,

653
00:32:03,480 --> 00:32:06,480
you didn't want it there, it's probably not good to have it turn on every single

654
00:32:06,480 --> 00:32:09,720
time, but you very much can use it in that way and

655
00:32:09,720 --> 00:32:12,440
have this be a part of a kind of a programmatic rollout.

656
00:32:12,440 --> 00:32:14,440
So generic triggers, I use those a lot.

657
00:32:14,440 --> 00:32:18,120
I'll do those inside of silly demos where I'll have like a react state and

658
00:32:18,120 --> 00:32:21,560
after five failures have it automatically disable the feature.

659
00:32:21,560 --> 00:32:24,640
Totally doable with flag triggers and they become a core component of how you

660
00:32:24,640 --> 00:32:27,200
build like automated resiliency into a system.

661
00:32:27,200 --> 00:32:30,520
We use it for a lot of solutions where we want to have someone build out

662
00:32:30,520 --> 00:32:34,400
a way to have a system recover itself without APM integrations.

663
00:32:34,400 --> 00:32:36,120
So generic triggers are great for that.

664
00:32:36,120 --> 00:32:39,920
What you get out of that, so here we have the flag trigger.

665
00:32:39,920 --> 00:32:41,600
We'll save that.

666
00:32:41,600 --> 00:32:42,680
It gives us a URL.

667
00:32:42,680 --> 00:32:47,680
And we should actually be able to just call that provided the internet

668
00:32:47,680 --> 00:32:51,800
cooperates with me.

669
00:32:51,800 --> 00:32:54,560
We'll delete this other one out.

670
00:32:56,560 --> 00:33:00,400
We're just a real basic post against that with empty data.

671
00:33:02,400 --> 00:33:05,360
And if you remember, that was turned on originally.

672
00:33:05,360 --> 00:33:06,840
If I refresh this, it should be off.

673
00:33:06,840 --> 00:33:07,360
There we go.

674
00:33:08,800 --> 00:33:09,960
So you have those turned off instantly.

675
00:33:09,960 --> 00:33:15,000
It's just a web hook inbound that turns off that feature when something goes wrong.

676
00:33:18,960 --> 00:33:22,600
Workflows are how you create a repeatable process around all these rollouts.

677
00:33:22,600 --> 00:33:26,000
So if you want to roll out a change and you want to build out a process around it

678
00:33:26,000 --> 00:33:29,320
that you can then save as a template and use later.

679
00:33:29,320 --> 00:33:31,360
We'll take a look at this progressive rollout one.

680
00:33:31,360 --> 00:33:32,840
We can choose which version we want to run out.

681
00:33:32,840 --> 00:33:35,800
So in this case, we only have the local database or cloud.

682
00:33:35,800 --> 00:33:37,280
But what if you had different regions, right?

683
00:33:37,280 --> 00:33:38,440
I talked about that before.

684
00:33:38,440 --> 00:33:42,600
You could have each region be a variation here and you could roll that out over time.

685
00:33:42,600 --> 00:33:45,520
So in this case, I'll roll out the cloud database.

686
00:33:45,520 --> 00:33:46,760
I want to do it at 10%.

687
00:33:46,760 --> 00:33:48,920
We'll do 20% of the time every day.

688
00:33:50,280 --> 00:33:56,200
And what that'll do is it'll create out a workflow that will gradually increase that every day.

689
00:33:56,200 --> 00:33:57,200
So here's the first day.

690
00:33:59,280 --> 00:34:03,120
Every day at 12 or 3 p.m., roll out the next component.

691
00:34:03,120 --> 00:34:06,040
You can see it's starting to cycle between each of those.

692
00:34:06,880 --> 00:34:10,240
40 versus 60, 60 or 40 all the way to the end.

693
00:34:10,240 --> 00:34:12,680
We can also start to bring in things like approvals in here, right?

694
00:34:12,680 --> 00:34:14,400
So if I wanted to come in and say...

695
00:34:18,680 --> 00:34:22,720
If I wanted to come in and say change targeting groups,

696
00:34:22,720 --> 00:34:25,280
I could go into the very top and change add an approval instead.

697
00:34:25,280 --> 00:34:26,440
We did scheduling in this case.

698
00:34:26,440 --> 00:34:30,120
That's why the approval is not available because we scheduled it out.

699
00:34:30,120 --> 00:34:31,640
Those are all things we can change.

700
00:34:31,640 --> 00:34:36,000
Again, we can save that as a template then and it now exists to be reused across to other ones.

701
00:34:36,040 --> 00:34:38,520
Or we can come in and build this from scratch.

702
00:34:41,040 --> 00:34:42,280
And have full customization.

703
00:34:42,280 --> 00:34:43,480
So if I came in and said...

704
00:34:46,160 --> 00:34:48,600
Leon's workshop team, get out of flag change.

705
00:34:48,600 --> 00:34:49,440
You can turn it on.

706
00:34:52,240 --> 00:34:55,040
We can request additional approvals for it from like the QA team.

707
00:34:55,680 --> 00:34:58,920
And again, we can gradually go through this and build out whatever we want it to be,

708
00:34:58,920 --> 00:35:04,520
change targeting rules, add them out and continue to roll this change out over an entire group.

709
00:35:04,560 --> 00:35:08,080
The big thing here is that this becomes, again, a repeatable thing you can use over and over again

710
00:35:08,080 --> 00:35:10,280
on future rollouts and deployments.

711
00:35:19,160 --> 00:35:22,320
Now before I roll into building a little bit live, I think it's probably good time to ask...

712
00:35:22,320 --> 00:35:23,240
Is there any questions?

713
00:35:23,240 --> 00:35:25,360
Anybody want more information on anything you saw?

714
00:35:28,280 --> 00:35:29,600
I'll repeat your question if I hear you.

715
00:35:34,520 --> 00:35:37,200
I'm just curious about the pipeline.

716
00:35:37,200 --> 00:35:41,000
I'm curious if you have anything that's more like...

717
00:35:41,000 --> 00:35:45,080
like a pod oriented where you route...

718
00:35:45,080 --> 00:35:48,400
Instead of putting your thing down in the code itself,

719
00:35:48,400 --> 00:35:52,600
you can change the infrastructure of how the route...

720
00:35:52,600 --> 00:35:56,320
So it's a problem instead of...

721
00:35:56,320 --> 00:35:58,480
So it's funny you bring that up.

722
00:35:58,480 --> 00:36:03,120
So my very first presentation I ever did at LaunchDarkly was...

723
00:36:03,120 --> 00:36:04,960
LaunchDarkly in a service mesh world.

724
00:36:04,960 --> 00:36:07,240
So that is usually what I'd use like a service mesh for.

725
00:36:07,240 --> 00:36:10,200
My background before I came to LaunchDarkly was in service mesh.

726
00:36:10,200 --> 00:36:14,360
So LaunchDarkly, it's important to know that it runs inside of your application.

727
00:36:14,360 --> 00:36:16,160
It runs within the application itself.

728
00:36:16,160 --> 00:36:20,920
So it's not necessarily aware of the infrastructure that lives above it.

729
00:36:20,920 --> 00:36:22,720
It's just your application itself.

730
00:36:22,720 --> 00:36:27,600
And so I think there's a side of this infrastructure story and how you want to roll out

731
00:36:27,600 --> 00:36:29,640
and point at a different service in Kubernetes.

732
00:36:29,640 --> 00:36:32,480
You want to obviously link up your pods to a service as an example.

733
00:36:32,520 --> 00:36:37,880
And being able to do service based routing with a console or a Kuma or an Istio,

734
00:36:37,880 --> 00:36:39,960
whatever service mesh you want.

735
00:36:39,960 --> 00:36:42,000
They all have the same capability.

736
00:36:42,000 --> 00:36:43,560
They call it service splitting.

737
00:36:43,560 --> 00:36:46,240
And so the idea being for infrastructure changes,

738
00:36:46,240 --> 00:36:47,720
something like a service mesh is great.

739
00:36:47,720 --> 00:36:50,120
And being like Flux, I'm a huge fan of Flux.

740
00:36:50,120 --> 00:36:52,080
You can use Flux to gradually roll out a change.

741
00:36:52,080 --> 00:36:57,680
But the struggle Kubernetes has is it can only go so far into the application itself.

742
00:36:57,680 --> 00:36:59,440
Like you can get HTTP codes back from it.

743
00:36:59,480 --> 00:37:03,520
You can check basic statuses and basic returns.

744
00:37:03,520 --> 00:37:06,440
There's little more you can do with a fair amount of hackery.

745
00:37:06,440 --> 00:37:10,280
But it doesn't necessarily understand the inner workings of the application itself

746
00:37:10,280 --> 00:37:11,200
at a deep level.

747
00:37:11,200 --> 00:37:15,680
So the answer, unfortunately, is it's a both world scenario.

748
00:37:15,680 --> 00:37:19,400
When you want to control pod connectivity and which pod is live and what percentage

749
00:37:19,400 --> 00:37:22,520
is going to each, I usually defer to a service mesh in that case.

750
00:37:23,520 --> 00:37:26,840
But when you want to control within the application and roll that out,

751
00:37:26,880 --> 00:37:29,920
it's more of like a launch darkly concern.

752
00:37:29,920 --> 00:37:33,720
I think where this becomes especially relevant is when you're doing larger pod

753
00:37:33,720 --> 00:37:39,240
deployments, like if you've got a significant size of a replica set.

754
00:37:39,240 --> 00:37:42,800
And it takes a while for those all to cycle out.

755
00:37:42,800 --> 00:37:47,200
If you have launch darkly disable the feature, while a service mesh is

756
00:37:47,200 --> 00:37:50,200
splitting traffic to the new pods, you can validate the new pods are receiving

757
00:37:50,200 --> 00:37:50,560
traffic.

758
00:37:50,560 --> 00:37:53,360
There's no errors with the things that you've deployed in there.

759
00:37:53,360 --> 00:37:54,720
And then deploy out the feature.

760
00:37:55,720 --> 00:37:59,280
You still end up in a situation where half your people are on the old pods and

761
00:37:59,280 --> 00:38:01,440
half the people on the new pods getting the new feature.

762
00:38:01,440 --> 00:38:05,360
But you get the maximum kind of risk control then and protection against them.

763
00:38:05,360 --> 00:38:09,280
So hope that helped or just created more questions.

764
00:38:11,040 --> 00:38:11,880
Any other questions?

765
00:38:13,120 --> 00:38:14,120
Hit me.

766
00:38:14,120 --> 00:38:16,120
Yep.

767
00:38:20,000 --> 00:38:21,920
Yes, absolutely.

768
00:38:21,920 --> 00:38:22,520
Thanks for bringing that up.

769
00:38:22,520 --> 00:38:24,080
I didn't even mention that.

770
00:38:24,160 --> 00:38:28,320
So for environments that maybe have specific needs, I usually think of them

771
00:38:28,320 --> 00:38:32,480
as security concerns typically, but it's not always that.

772
00:38:32,480 --> 00:38:34,120
We offer this thing called the relay proxy.

773
00:38:34,120 --> 00:38:37,840
And let's see if I have the presentation handy.

774
00:38:37,840 --> 00:38:38,360
No, I don't.

775
00:38:40,040 --> 00:38:44,720
The way launch darkly works at its core, the SDKs reach out to a set of CDNs that

776
00:38:44,720 --> 00:38:45,360
live globally.

777
00:38:46,360 --> 00:38:49,240
From there, those CDNs reach back to the launch darkly core.

778
00:38:50,200 --> 00:38:54,760
The relay proxy lives between those CDNs and your SDK.

779
00:38:54,760 --> 00:38:57,400
And you configure your SDK to connect to that relay proxy.

780
00:38:57,400 --> 00:39:00,840
And that becomes really useful when you're in your apps running in the gate of US.

781
00:39:00,840 --> 00:39:05,320
And you want to keep flag evaluation really close to it in the relay proxy.

782
00:39:05,320 --> 00:39:06,480
So you can set that up right there.

783
00:39:06,480 --> 00:39:10,240
And then you can control ingress and egress through just that relay proxy

784
00:39:10,240 --> 00:39:14,440
instead of saying, hey, my users are going to connect to any of a dozen different

785
00:39:14,440 --> 00:39:17,120
URLs for flag information.

786
00:39:17,120 --> 00:39:18,520
You can connect it all to that relay proxy.

787
00:39:18,520 --> 00:39:20,400
So we absolutely have a relay proxy.

788
00:39:20,400 --> 00:39:22,800
Like I said, people usually do it for security, but there are also performance

789
00:39:22,800 --> 00:39:23,440
concerns too.

790
00:39:23,440 --> 00:39:26,560
I used the configuration management example earlier.

791
00:39:26,560 --> 00:39:29,960
If you're doing that heavily, relay proxy is a great idea to use.

792
00:39:29,960 --> 00:39:31,760
It scales out really well horizontally.

793
00:39:31,760 --> 00:39:32,520
So it's very small.

794
00:39:32,520 --> 00:39:36,600
It's basically like a go binary that runs and you run it in a container or whatever.

795
00:39:36,600 --> 00:39:37,760
Throw a load bouncer in front of it.

796
00:39:37,760 --> 00:39:40,120
You can scale it horizontally pretty far.

797
00:39:40,120 --> 00:39:43,640
But yeah, the relay proxy is heavily used by a lot of customers.

798
00:39:43,640 --> 00:39:44,720
It's a good tool.

799
00:39:44,720 --> 00:39:48,520
Any other questions?

800
00:39:48,520 --> 00:39:49,000
Oh.

801
00:39:49,000 --> 00:40:05,400
So yes, you'd want something that sees those exceptions, like a data doc, right?

802
00:40:05,400 --> 00:40:07,640
Or some sort of a monitoring tool that can see those.

803
00:40:07,640 --> 00:40:10,520
Yes.

804
00:40:10,520 --> 00:40:13,760
Yes, so that's the whole flag trigger concept does exactly that.

805
00:40:13,800 --> 00:40:20,520
So if the demo I have that runs elsewhere is in data doc, what we do is we have a load

806
00:40:20,520 --> 00:40:23,360
tester run up and I'll spin it up against a specific route.

807
00:40:23,360 --> 00:40:28,360
And I have data doc set up to fire an event when it's at 100 errors.

808
00:40:28,360 --> 00:40:30,680
And that fires the event that triggers the office.

809
00:40:30,680 --> 00:40:31,520
It's a direct integration.

810
00:40:31,520 --> 00:40:33,160
There's no special code to do that.

811
00:40:33,160 --> 00:40:34,680
That's just a tie in data doc.

812
00:40:34,680 --> 00:40:36,800
You say, this is the flag that I want monitored.

813
00:40:36,800 --> 00:40:41,640
And then in data doc, as an example, in data doc you say, fire an event.

814
00:40:41,640 --> 00:40:45,040
When this metric reaches this threshold, do this thing.

815
00:40:45,040 --> 00:40:45,840
And it turns it off.

816
00:40:45,840 --> 00:40:47,280
And that applies again to Honeycomb.

817
00:40:47,280 --> 00:40:49,160
I think they can do it in Grafana now.

818
00:40:49,160 --> 00:40:51,600
Grafana integration just rolled out.

819
00:40:51,600 --> 00:40:55,040
So yeah, absolutely super common.

820
00:40:55,040 --> 00:41:00,040
We like systems that recover themselves.

821
00:41:00,040 --> 00:41:00,920
Any other questions?

822
00:41:12,640 --> 00:41:17,120
So the way the system is designed right now, so the question was, can you have multiple

823
00:41:17,120 --> 00:41:20,000
functions within a single feature flag?

824
00:41:20,000 --> 00:41:22,440
And if so, how is that controlled?

825
00:41:22,440 --> 00:41:24,160
I might have missed the end of that question.

826
00:41:24,160 --> 00:41:29,920
But the way the system is designed is each feature flag should really be one feature.

827
00:41:29,920 --> 00:41:34,840
But we have this idea of flag prerequisites.

828
00:41:34,840 --> 00:41:40,800
So you can have a flag prerequisite set that says, hey, this is dependent on this feature.

829
00:41:40,840 --> 00:41:43,760
This can only be enabled if this feature is turned on.

830
00:41:43,760 --> 00:41:45,560
And so what you do is you end up grouping those together.

831
00:41:45,560 --> 00:41:47,280
And you say, hey, I have this parent feature.

832
00:41:47,280 --> 00:41:52,640
Like for example, I only want to roll out the new database if the new API is enabled.

833
00:41:52,640 --> 00:41:55,240
Right? I've separated those out so I can have good control.

834
00:41:55,240 --> 00:42:00,040
I've componentized it out and say, I can develop my API separate from my database now.

835
00:42:00,040 --> 00:42:04,240
But the new database is only going to work if the new API works.

836
00:42:04,240 --> 00:42:06,840
So I'm only going to turn that on if the API is on.

837
00:42:06,840 --> 00:42:08,600
Same concept applies more broadly, right?

838
00:42:08,640 --> 00:42:12,760
I only want the new API and the new database to work if the new front end is on too.

839
00:42:12,760 --> 00:42:14,720
So you can start to chain prerequisites together.

840
00:42:14,720 --> 00:42:16,720
And that's how you end up grouping them together.

841
00:42:16,720 --> 00:42:18,040
We have this come up a lot.

842
00:42:18,040 --> 00:42:20,720
There's a lot of discussions internally around what to do about that.

843
00:42:20,720 --> 00:42:23,920
Because like the idea of grouping flags together comes up quite a bit.

844
00:42:23,920 --> 00:42:26,840
Beyond that, we have this idea of different projects, right?

845
00:42:26,840 --> 00:42:29,080
So different groupings of feature flags.

846
00:42:29,080 --> 00:42:34,720
So an example of a project might be if you're running a, if you're an e-commerce store,

847
00:42:34,760 --> 00:42:40,160
you might have a project for the store component or a project for the user management side of it.

848
00:42:40,160 --> 00:42:41,680
That's one example.

849
00:42:41,680 --> 00:42:45,360
Or you would have it all lumped into one and break it apart into different environments.

850
00:42:45,360 --> 00:42:47,120
There's a lot of different ways those can be configured.

851
00:42:47,120 --> 00:42:49,720
But projects and environments is one way to do it.

852
00:42:49,720 --> 00:42:53,480
I personally really like prerequisites for that.

853
00:42:53,480 --> 00:42:54,880
It just gives me more control.

854
00:42:54,880 --> 00:42:59,040
And I get to have a central view of where it's all set up instead of having to click through

855
00:42:59,040 --> 00:43:00,560
and browse different areas.

856
00:43:00,560 --> 00:43:07,000
I thought I saw another hand come up over here.

857
00:43:07,000 --> 00:43:08,000
Back.

858
00:43:31,160 --> 00:43:34,000
So we do have, there's a couple different answers to this.

859
00:43:34,000 --> 00:43:36,880
One, we have this idea of code references in the product.

860
00:43:36,880 --> 00:43:40,560
And code references ties into the Git repo for your code.

861
00:43:40,560 --> 00:43:43,960
And what this will do is it will show everywhere in the code where that actual feature flag

862
00:43:43,960 --> 00:43:45,120
is in use.

863
00:43:45,120 --> 00:43:47,120
So in this case, login.

864
00:43:47,120 --> 00:43:49,120
And there.

865
00:43:49,120 --> 00:43:54,000
Right, so inside of this project in app.js, that one's used.

866
00:43:54,000 --> 00:43:56,220
In login.js, it's used.

867
00:43:56,220 --> 00:43:59,880
And then I think the back end, the login's not used in the back end one.

868
00:43:59,920 --> 00:44:05,600
So that gives you visibility and it lets you see it, which is great and helpful and good.

869
00:44:05,600 --> 00:44:07,400
Lifecycle is something we're working on.

870
00:44:07,400 --> 00:44:12,080
And there's a public, it's not a secret thing.

871
00:44:12,080 --> 00:44:17,360
There's a public EAP going around, a new capability in the tool to start looking at flag health

872
00:44:17,360 --> 00:44:20,800
and lifecycle the flag and how often are you using them?

873
00:44:20,800 --> 00:44:22,720
How often are they being called?

874
00:44:22,720 --> 00:44:24,680
How often are you removing them?

875
00:44:24,680 --> 00:44:26,000
It collects all of that data.

876
00:44:26,000 --> 00:44:27,000
So the same thing you're asking for.

877
00:44:27,040 --> 00:44:31,560
It will basically be another module inside of the product.

878
00:44:31,560 --> 00:44:36,120
In the short term, we have this insights area that will let you see how a flag's being evaluated

879
00:44:36,120 --> 00:44:37,120
and used.

880
00:44:37,120 --> 00:44:38,320
That will give you data back on that.

881
00:44:38,320 --> 00:44:39,520
It's not just transparency.

882
00:44:39,520 --> 00:44:43,040
It's not as forward as saying, hey, this flag, has it not been called?

883
00:44:43,040 --> 00:44:46,440
We will do that, actually, for flags that haven't been called or haven't had an evaluation

884
00:44:46,440 --> 00:44:47,440
in 30 days.

885
00:44:47,440 --> 00:44:50,760
You'll have a message above it that says, this flag's not being evaluated.

886
00:44:50,760 --> 00:44:53,120
You might want to get rid of it.

887
00:44:53,120 --> 00:44:55,000
But we'll be making that a lot better.

888
00:44:55,000 --> 00:44:56,920
It's kind of the end state of that.

889
00:44:56,920 --> 00:44:59,480
The code references are usually where people start with that.

890
00:44:59,480 --> 00:45:04,480
I like this also for, it sounds like a funny use case, for team onboarding.

891
00:45:04,480 --> 00:45:07,560
When you bring someone on the team, they don't always know where this stuff is being used.

892
00:45:07,560 --> 00:45:10,120
So being able to tell them, hey, go on to code references and you can see everywhere

893
00:45:10,120 --> 00:45:14,080
where we're using this feature flag today, helps them get familiar with the code faster,

894
00:45:14,080 --> 00:45:17,120
helps them understand how things are actually being used.

895
00:45:17,120 --> 00:45:18,120
I like that as well.

896
00:45:20,960 --> 00:45:21,960
Question?

897
00:45:21,960 --> 00:45:22,960
Absolutely.

898
00:45:22,960 --> 00:45:37,400
So we have an audit log built into the product down yonder.

899
00:45:37,400 --> 00:45:40,120
So this is just like the end product version of it.

900
00:45:40,120 --> 00:45:44,240
We also have this thing that is a feature that for the longest time I was here, I didn't

901
00:45:44,240 --> 00:45:46,640
think was actually used a lot, but it's actually used quite a bit.

902
00:45:46,640 --> 00:45:47,640
It's a data export.

903
00:45:47,640 --> 00:45:51,680
So you have the ability to have all that data get exported and dumped into a snowflake or

904
00:45:51,680 --> 00:45:58,080
into the Amazon version, Kinesis, there we go.

905
00:45:58,080 --> 00:46:00,080
Dropped in Kinesis for data analytics and things like that.

906
00:46:00,080 --> 00:46:03,440
So a lot of people will use that to send it out and kind of collate all this data together

907
00:46:03,440 --> 00:46:04,440
to be able to run it.

908
00:46:04,440 --> 00:46:08,000
But a fair amount of customers just use the audit log in the product also because you

909
00:46:08,000 --> 00:46:11,080
can see it all logged out in here.

910
00:46:11,080 --> 00:46:17,320
But as you can see, it gets pretty specific, changes the default variation, changes the

911
00:46:17,320 --> 00:46:18,960
target you use rules.

912
00:46:18,960 --> 00:46:20,120
And so this can also be controlled.

913
00:46:20,120 --> 00:46:24,840
We have an entire, like any system like this, we have an entire user policy section.

914
00:46:24,840 --> 00:46:28,520
So if we were in the same company and you were in security and you needed accesses,

915
00:46:28,520 --> 00:46:32,800
but you didn't want anybody else to see that, it's a weird example, but we're going to roll

916
00:46:32,800 --> 00:46:34,480
with it anyways.

917
00:46:34,480 --> 00:46:37,760
You could easily create a set of policies that says, hey, only this group can see the

918
00:46:37,760 --> 00:46:38,760
audit log.

919
00:46:38,760 --> 00:46:40,480
These ones cannot see it.

920
00:46:40,480 --> 00:46:44,240
Only these users, like product managers, can change targeting rules, but they can't enable

921
00:46:44,240 --> 00:46:45,240
or disable.

922
00:46:45,240 --> 00:46:46,240
We leave that with the ops team.

923
00:46:46,240 --> 00:46:49,160
Only the ops team can enable or disable the feature.

924
00:46:49,200 --> 00:46:51,200
So we can get really granular in that.

925
00:46:51,200 --> 00:46:53,200
Thank you.

926
00:46:53,200 --> 00:46:59,200
In terms of the point, I'm told that there's some kind of a path player in the API so that

927
00:46:59,200 --> 00:47:07,200
it's not, and it doesn't have a data trait to offer things in your flow of your application.

928
00:47:07,200 --> 00:47:09,200
This is a great, it's funny.

929
00:47:09,200 --> 00:47:12,200
I had a bunch of architecture slides in the deck and then I pulled them out because I

930
00:47:12,200 --> 00:47:13,200
didn't think they were going to get used.

931
00:47:13,200 --> 00:47:16,200
And now I regret pulling those out because it sounds like they would have been the most

932
00:47:16,200 --> 00:47:17,200
useful.

933
00:47:17,240 --> 00:47:22,240
So we talk about the layers of resiliency in the product that protect against stuff

934
00:47:22,240 --> 00:47:23,240
like this.

935
00:47:23,240 --> 00:47:28,240
The one that applies to this situation is that when the SDK turns on, so when I turn

936
00:47:28,240 --> 00:47:32,640
the application on, whether it's I hit the website for a client side code or I turn it

937
00:47:32,640 --> 00:47:40,160
on server side in Python, Python main.py or whatever, the SDK does an initialization.

938
00:47:40,160 --> 00:47:44,960
So that initialization, it goes out to one of those CDNs I talked about earlier.

939
00:47:45,720 --> 00:47:47,720
We have over 100 of them globally.

940
00:47:47,720 --> 00:47:49,720
And it pulls down the first set of flags.

941
00:47:49,720 --> 00:47:53,720
It stores that flag information in memory locally.

942
00:47:53,720 --> 00:47:58,720
And what it does is it opens up a long-lived connection back to LaunchDarkly for updates

943
00:47:58,720 --> 00:47:59,720
only.

944
00:47:59,720 --> 00:48:03,720
So we minimize the performance impact because there is a cache but it's local in memory.

945
00:48:03,720 --> 00:48:05,720
And so it's able to reference that extremely fast.

946
00:48:05,720 --> 00:48:10,720
We're talking like in the millisecond range to be able to do that.

947
00:48:10,720 --> 00:48:14,720
It only re-evaluates when that changes inside of LaunchDarkly.

948
00:48:15,480 --> 00:48:20,480
For example, in this one when I went in and changed the targeting rule on this, any connected

949
00:48:20,480 --> 00:48:25,480
system would have gotten a broadcast of hey, somebody changed this flag, update it in your

950
00:48:25,480 --> 00:48:28,480
in-memory store and that rewrites it in memory.

951
00:48:28,480 --> 00:48:36,480
We do that via something called server-sent events but it's also streaming.

952
00:48:36,480 --> 00:48:39,480
So we only send down the flag values that change.

953
00:48:39,480 --> 00:48:41,480
We're not sending the entire bundle.

954
00:48:42,240 --> 00:48:45,240
In a small demo like this where it's five flags, the performance is inconsequential.

955
00:48:45,240 --> 00:48:47,240
It doesn't matter.

956
00:48:47,240 --> 00:48:50,240
But when you have 100 flags, that's a lot to evaluate.

957
00:48:50,240 --> 00:48:52,240
We only send the ones that change.

958
00:48:52,240 --> 00:48:57,240
So in that example, if I had 100 of them, only this flag would be sent out to be updated

959
00:48:57,240 --> 00:48:59,240
in those in-memory stores.

960
00:48:59,240 --> 00:49:04,240
But because that's all cached locally in memory, the performance impact is really small.

961
00:49:04,240 --> 00:49:10,240
The area you get, you'll much quicker, you'll run into application stuff much faster.

962
00:49:11,000 --> 00:49:15,000
If you're re-rendering your application based on a feature flag, if you're writing in JavaScript

963
00:49:15,000 --> 00:49:20,000
and you're using hooks in React and you want to change the entire layout of your page,

964
00:49:20,000 --> 00:49:25,000
if you're changing five different layouts across five different flags and toggling them

965
00:49:25,000 --> 00:49:30,000
constantly, that app is going to just choke up not because of launch darkly, just because

966
00:49:30,000 --> 00:49:32,000
you're re-rendering the entire thing that many times.

967
00:49:32,000 --> 00:49:36,000
But for the API side of it, the performance is really small.

968
00:49:36,000 --> 00:49:39,000
We're talking in the sub-50 millisecond at that point.

969
00:49:41,000 --> 00:49:48,000
We benchmark initialization at under 100 milliseconds.

970
00:49:48,000 --> 00:49:53,000
So you should have all of your flags available to use in under 100 milliseconds.

971
00:49:53,000 --> 00:49:58,000
And any change should be client rendered within 200 milliseconds.

972
00:49:58,000 --> 00:50:03,000
So either way, the speed at which those flags should update are well under half a second.

973
00:50:06,000 --> 00:50:08,000
Any other questions?

974
00:50:11,000 --> 00:50:13,000
You're all believers now.

975
00:50:13,000 --> 00:50:15,000
I can feel the energy in the room.

976
00:50:15,000 --> 00:50:18,000
We've only got about 10 minutes left, so I think because of the internet issues we're

977
00:50:18,000 --> 00:50:20,000
going to skip out on the build it live phase.

978
00:50:20,000 --> 00:50:23,000
But if you do want to get into that, I'll be around the conference again.

979
00:50:26,000 --> 00:50:27,000
I'm on Twitter.

980
00:50:27,000 --> 00:50:28,000
You can drop me a message, Cody D'Arclund.

981
00:50:28,000 --> 00:50:30,000
I love interacting with people in the community.

982
00:50:30,000 --> 00:50:33,000
I love just teaching people about this stuff, like software development stuff.

983
00:50:33,000 --> 00:50:37,000
I spent so long in my career not knowing this and not having people who were willing to

984
00:50:37,000 --> 00:50:39,000
teach things like this.

985
00:50:39,760 --> 00:50:41,760
I'd love to interact with anybody who wants to learn more.

986
00:50:41,760 --> 00:50:46,760
Jump onto our Discord server, scan that QR code, hang out, drop me a message, even just

987
00:50:46,760 --> 00:50:48,760
to say you liked the session, you enjoyed the session.

988
00:50:48,760 --> 00:50:50,760
But hey, I appreciate the time.

989
00:50:50,760 --> 00:50:51,760
I'll be around the conference.

990
00:50:51,760 --> 00:50:54,760
If you see me, I'm hard to miss, kind of tall.

991
00:50:54,760 --> 00:50:55,760
Come talk to me.

992
00:50:55,760 --> 00:50:56,760
Love to interact with people.

993
00:50:56,760 --> 00:50:57,760
But thanks for coming and hanging out.

994
00:50:57,760 --> 00:50:58,760
It was great.

995
00:50:58,760 --> 00:50:59,760
Applause

