1
00:00:00,000 --> 00:00:07,000
Good afternoon, everyone. Our speaker for this session will talk about how to keep a secret.

2
00:00:07,000 --> 00:00:10,000
Let us all welcome Glyph, the prophet.

3
00:00:10,000 --> 00:00:21,000
Hi, everybody. I'm Glyph, and today I'm going to be talking about how you can keep secrets in your Python code.

4
00:00:21,000 --> 00:00:23,000
Hello?

5
00:00:23,000 --> 00:00:25,000
On?

6
00:00:25,000 --> 00:00:27,000
Yeah.

7
00:00:27,000 --> 00:00:28,000
We'll try that again.

8
00:00:28,000 --> 00:00:33,000
Hi, everybody. I'm Glyph, and today I'm going to be talking about how you can keep secrets in your Python code and beyond.

9
00:00:33,000 --> 00:00:40,000
Secret management is a huge topic, and we've only got 30 minutes here, so before I get started, I want to lay out my specific goal.

10
00:00:40,000 --> 00:00:43,000
I will talk about how to store sensitive information on your computer.

11
00:00:43,000 --> 00:00:48,000
Mostly, I want to talk about how to do this as the author of software that expects to be dealing with secrets.

12
00:00:48,000 --> 00:00:56,000
However, in order to talk about that, I also need to talk about how users are going to behave in order to get the most out of the thought you put into that process.

13
00:00:56,000 --> 00:01:00,000
I think it's also useful to talk about what areas of security I'm not going to be talking about.

14
00:01:00,000 --> 00:01:07,000
I'm not going to be talking about secure messaging apps. This is not about how to share a secret with another human, a secret that you don't share.

15
00:01:07,000 --> 00:01:16,000
I'm not going to talk about HTTPS or certificates. You might be able to use these techniques that I'm talking about today to store your secret keys a little bit better, but that's good to know.

16
00:01:16,000 --> 00:01:21,000
So the kind of secret that I want to focus on is one that is not meaningful to a human being.

17
00:01:21,000 --> 00:01:27,000
Things like passwords or cryptographic keys. They're short, and therefore they don't require significant storage.

18
00:01:27,000 --> 00:01:37,000
I'm not talking about encrypting large amounts of data. In order to do that, you need somewhere to store the key that is doing the encryption, so you need to know what to do with these short secrets anyway.

19
00:01:37,000 --> 00:01:41,000
Talking about security properties on that are, in terms, to be a little bit dry.

20
00:01:42,000 --> 00:01:45,000
A narrative with characters and motivations to raise the level of interest.

21
00:01:45,000 --> 00:01:50,000
A little easier to keep track of what's going on. So I'm going to introduce a character to you.

22
00:01:50,000 --> 00:01:54,000
Say hello to Dletro. Dletro is the main character of our story today.

23
00:01:54,000 --> 00:01:58,000
However, since this is an educational story, it's more like a modern fable.

24
00:01:58,000 --> 00:02:03,000
And historical fables use talking to the primordial animals to teach their lessons.

25
00:02:03,000 --> 00:02:10,000
But modern fables that need to have their main character in a grim lesson about the world instead incorporate a familiar plot point, the time loop.

26
00:02:10,000 --> 00:02:19,000
In all of their time loop stories, the moral may be somewhat obscure at first, but its true nature will be revealed as our protagonist struggles to understand their situation.

27
00:02:19,000 --> 00:02:23,000
They will be released from its relentless repetition only when they have learned the lesson.

28
00:02:23,000 --> 00:02:30,000
So, okay, if you saw the words content warning come up on the slide and suddenly got a little nervous, don't worry, there's nothing offensive coming up.

29
00:02:30,000 --> 00:02:35,000
But I do want to point out something about this story that applies to all in-depth information security work.

30
00:02:35,000 --> 00:02:44,000
You might legitimately make you anxious. You might hear things that you're doing and then some horrible kind of breach or consequence for the users or company that could follow from that.

31
00:02:44,000 --> 00:02:49,000
Thinking about that over and over again can really start to take a toll on your mental health.

32
00:02:49,000 --> 00:02:55,000
To some extent, being a security engineer involves being a professional catastrophist.

33
00:02:55,000 --> 00:03:01,000
You have to keep thinking of the same worst possible thing that could ever happen in detail over and over again.

34
00:03:01,000 --> 00:03:11,000
So it's important to note and to emphasize that the attacks and errors I'm describing are rare and in many cases would require quite extreme effort and resources on the part of the attacker.

35
00:03:11,000 --> 00:03:15,000
There are also lots of people who are out working to defend you against these attacks.

36
00:03:15,000 --> 00:03:21,000
Your operating system vendor, open source packaging containers, the PIPI admins, they're all constantly trying to help defend you.

37
00:03:21,000 --> 00:03:26,000
There are attacks across a whole range of vulnerabilities and Secret Storage is really one of them.

38
00:03:26,000 --> 00:03:32,000
For one example, I'm going to talk about type of swapping, the practice of attackers registering malicious packages on PIPI.

39
00:03:32,000 --> 00:03:44,000
Such attacks are possible and they do happen regularly, but even if you're completely careless with your pick and stalls, the PIPI admins are routinely being notified of such packages and actively moving them.

40
00:03:44,000 --> 00:03:48,000
And that's just one defense among several against this unfortunate attack vector.

41
00:03:48,000 --> 00:03:52,000
Now they're perfect, but they're all helping.

42
00:03:52,000 --> 00:03:54,000
So with that caution out of the way, hopefully we're all too done.

43
00:03:54,000 --> 00:03:56,000
There's the calm and everything to happy place.

44
00:03:56,000 --> 00:03:59,000
Time for the nightmare of you whole Rx.

45
00:03:59,000 --> 00:04:02,000
Jethro has an idea for a billion dollar company.

46
00:04:02,000 --> 00:04:10,000
Blue4U is an API that can compute a unique blue that nobody else is using yet for their company or project randomly.

47
00:04:10,000 --> 00:04:13,000
The idea here is that it's maybe an open core offering.

48
00:04:13,000 --> 00:04:15,000
Blue4U is open source.

49
00:04:15,000 --> 00:04:20,000
You can self-host it if you want, but the enterprise version, purples for professionals, can also generate purples.

50
00:04:20,000 --> 00:04:21,000
That's the value of that.

51
00:04:21,000 --> 00:04:32,000
Also, as a brief aside, speaking of combinations of worn cool colors, some of our fellow trans-biparties, this might have had difficulty attending this year due to unfortunate recent political developments in our venue.

52
00:04:32,000 --> 00:04:34,000
Those developments affect those who live here even more.

53
00:04:35,000 --> 00:04:43,000
I don't know if I should have to say more, but I'm going to be mentioning the first hundred dollars worth of donations to a local Utah LGBTQ plus charity.

54
00:04:43,000 --> 00:04:50,000
Encircle together, find me after the talk, or send your receipts to encircle at Wolfson IM and let me know if you'd like to donate some to me.

55
00:04:50,000 --> 00:04:51,000
Back to the topic.

56
00:04:51,000 --> 00:04:59,000
What I'm going to do here is call threat modeling in the international security industry.

57
00:04:59,000 --> 00:05:02,000
We will be enumerating threats and compromises.

58
00:05:02,000 --> 00:05:06,000
Each time we will try to confront a set of threats and defend against them.

59
00:05:06,000 --> 00:05:07,000
So let's begin.

60
00:05:07,000 --> 00:05:10,000
It is the morning of February 2nd.

61
00:05:10,000 --> 00:05:12,000
Jector wakes up.

62
00:05:12,000 --> 00:05:13,000
Jector frees a different phone.

63
00:05:13,000 --> 00:05:15,000
The Excel website starts testing it.

64
00:05:15,000 --> 00:05:16,000
It's great.

65
00:05:16,000 --> 00:05:19,000
Processing all kinds of requests for new kinds of blue on his laptop.

66
00:05:19,000 --> 00:05:20,000
He's getting votes from the press.

67
00:05:20,000 --> 00:05:22,000
He's on the Python podcast.

68
00:05:22,000 --> 00:05:25,000
This is in your revolution in the open source blue community.

69
00:05:25,000 --> 00:05:31,000
But of course, there's no use for his planned paywall professional purples if it's just sitting on his laptop.

70
00:05:31,000 --> 00:05:33,000
So he makes an account at his side provider.

71
00:05:33,000 --> 00:05:34,000
Jector's a busy guy.

72
00:05:34,000 --> 00:05:37,000
He doesn't have time to memorize some complicated new password.

73
00:05:37,000 --> 00:05:41,000
And so he just uses the same email and password that he used for his LinkedIn account.

74
00:05:41,000 --> 00:05:46,000
Now, with the benefit of the narrator's eye view of this story that Jester doesn't have,

75
00:05:46,000 --> 00:05:49,000
I suspect many of you can already see where this is going.

76
00:05:49,000 --> 00:05:54,000
Attractors hear about Jester's cool new website, cross-reference it with a few password dumps from past data breaches,

77
00:05:54,000 --> 00:05:57,000
and well off, they take them over his entire cloud account.

78
00:05:57,000 --> 00:06:04,000
A boot of million servers, they mine cryptocurrency, blue for you is instantly bankrupt, all his blue is lost, like tears in the rain.

79
00:06:04,000 --> 00:06:07,000
And now, it's the morning of February 2nd.

80
00:06:07,000 --> 00:06:09,000
Jester wakes up.

81
00:06:09,000 --> 00:06:13,000
If you don't already have a password manager, you need to get one right now.

82
00:06:13,000 --> 00:06:19,000
There is often a tradeoff between convenience and security, but in the case of a password manager, you actually get both.

83
00:06:19,000 --> 00:06:24,000
I highly recommend one password, which is free to anyone working on an open source project,

84
00:06:24,000 --> 00:06:29,000
but there's probably one built into your web browser, too, and that's fine.

85
00:06:29,000 --> 00:06:34,000
So Jester does that. Gets a password manager, generates a new, good, highly secure random password.

86
00:06:34,000 --> 00:06:38,000
Jenny immediately forgets that password and loses access to everything.

87
00:06:38,000 --> 00:06:45,000
She goes to reset it, and is unpleasantly surprised to learn that the inability to reset that one password is where the rest of the security comes from.

88
00:06:45,000 --> 00:06:50,000
So it's impossible. He loses access, blue for you is now bankrupt again.

89
00:06:50,000 --> 00:06:53,000
It's the morning of February 2nd. Jester wakes up.

90
00:06:54,000 --> 00:06:59,000
Now, storing secrets isn't just about being a super spy using cool encryption tech.

91
00:06:59,000 --> 00:07:01,000
It's also about backups and reliability.

92
00:07:01,000 --> 00:07:05,000
So now, I'd like to talk about something called the CIA Triad.

93
00:07:05,000 --> 00:07:10,000
I realize many of you may already have a strong association with the acronym CIA in the context of security,

94
00:07:10,000 --> 00:07:16,000
but no, it is not about the Culinary Institute of America's Practices in Safeguarding of Traskees.

95
00:07:16,000 --> 00:07:21,000
What the letters actually stand for in this case are confidentiality, integrity, and availability.

96
00:07:21,000 --> 00:07:26,000
Confidentiality is the fun part, where you keep stuff secret with encryption and firewalls and stuff,

97
00:07:26,000 --> 00:07:30,000
but the other two letters are important, and if you don't have them, you don't actually have security.

98
00:07:30,000 --> 00:07:34,000
The I for integrity refers to the fact that you can't let attackers change your data.

99
00:07:34,000 --> 00:07:41,000
This isn't super relevant to this talk because modifying a random piece of data like a password or an API key is insanely misleading it.

100
00:07:41,000 --> 00:07:44,000
So that leads to the one that is important, which is availability.

101
00:07:44,000 --> 00:07:46,000
Your system is available if you can use it.

102
00:07:47,000 --> 00:07:52,000
In the case of your secret management system, that means it's unavailable if you forget the master password,

103
00:07:52,000 --> 00:07:54,000
so make careful plans to remember it.

104
00:07:54,000 --> 00:07:58,000
I've actually got a little tool that can help you generate and remember those core passwords

105
00:07:58,000 --> 00:08:03,000
that you've actually got to remember in your brain with your phone pin and your master password called PinPanel.

106
00:08:03,000 --> 00:08:07,000
It's a little rough. It's command line only at this point, but you might want to check it out.

107
00:08:07,000 --> 00:08:09,000
So it's February 2nd once again.

108
00:08:09,000 --> 00:08:12,000
Jethro is more careful to memorize his master password this time.

109
00:08:12,000 --> 00:08:14,000
He puts all his website passwords into it.

110
00:08:14,000 --> 00:08:15,000
Great.

111
00:08:15,000 --> 00:08:19,000
After he's set up that cloud chat, he gets an email explaining that he can do a security check.

112
00:08:19,000 --> 00:08:21,000
So he clicks the link and tries to log in.

113
00:08:21,000 --> 00:08:25,000
Now for some reason, his shown new password manager isn't on his phone like he expected to.

114
00:08:25,000 --> 00:08:27,000
He figures it's a bug.

115
00:08:27,000 --> 00:08:33,000
Once again, the benefit of the narrator's RU, being outside of Jethro's universe, you can probably see where this is going,

116
00:08:33,000 --> 00:08:37,000
but he doesn't. He opens up his password manager app, copies the user's new password manually,

117
00:08:37,000 --> 00:08:39,000
and pastes it into the website.

118
00:08:40,000 --> 00:08:42,000
It's the morning of February 2nd.

119
00:08:42,000 --> 00:08:44,000
Jethro wakes up.

120
00:08:44,000 --> 00:08:48,000
The most exciting question was, in fact, not his cloud provider's security website.

121
00:08:48,000 --> 00:08:50,000
It was a question of time.

122
00:08:50,000 --> 00:08:58,000
Now, a million security websites will get to this point with their narrative and tell you that you should never click on links or emails.

123
00:08:58,000 --> 00:09:00,000
This is terrible advice. It's 2023.

124
00:09:00,000 --> 00:09:03,000
All our jobs are like 75% clicking on links or emails.

125
00:09:03,000 --> 00:09:06,000
The other 25% are just like idling on Zoom.

126
00:09:06,000 --> 00:09:09,000
So we just hope we don't get hacked, right?

127
00:09:09,000 --> 00:09:13,000
Password managers actually have a really neat feature that can help you here.

128
00:09:13,000 --> 00:09:17,000
They will only autofill your password on the correct site.

129
00:09:17,000 --> 00:09:19,000
So don't override autofill.

130
00:09:19,000 --> 00:09:24,000
If you ever find yourself in a Jethro situation where the password's not autofilling,

131
00:09:24,000 --> 00:09:28,000
which can often happen, many companies have many different domain names,

132
00:09:28,000 --> 00:09:33,000
and you might need to use the same password on all 47 of Microsoft's login sites,

133
00:09:33,000 --> 00:09:38,000
what you should do is open up the password manager, find the entry for the password in question,

134
00:09:38,000 --> 00:09:42,000
and manually type the URL of the correct site you're trying to log into.

135
00:09:42,000 --> 00:09:46,000
You can either copy it, as the attacker's URL might be quite convincing.

136
00:09:46,000 --> 00:09:50,000
Just type it into the website field by hand, and if it still doesn't match,

137
00:09:50,000 --> 00:09:55,000
then maybe consider getting some help or some friends to look at the mail to make sure it's legit.

138
00:09:55,000 --> 00:10:00,000
Even better than a password manager, alone is a hard token that uses web auth numbers,

139
00:10:00,000 --> 00:10:03,000
which are respectively physically impossible to use with the wrong website.

140
00:10:03,000 --> 00:10:06,000
There are a few other cool things you could do with these keys.

141
00:10:06,000 --> 00:10:08,000
That's for shadowing.

142
00:10:08,000 --> 00:10:10,000
So Jethro learned his lesson. He gets a password manager.

143
00:10:10,000 --> 00:10:13,000
He generates and memorizes its own log password.

144
00:10:13,000 --> 00:10:15,000
Jethro is ready. Time for code.

145
00:10:15,000 --> 00:10:18,000
He gets his read-through setup, starts hacking on some code,

146
00:10:18,000 --> 00:10:23,000
gets the development kit from his cloud provider, and tries to boot the server with the Python API.

147
00:10:23,000 --> 00:10:28,000
But the cloud SDK can't read his web browser's mind, so they can't authenticate.

148
00:10:28,000 --> 00:10:32,000
He looks in the docs for authentication, and the examples from his provider

149
00:10:32,000 --> 00:10:35,000
all just show the secret being pasted into the code.

150
00:10:35,000 --> 00:10:38,000
So he logs onto the site, grabs the API key off the security page,

151
00:10:38,000 --> 00:10:40,000
sticks it into his code, and takes it down.

152
00:10:40,000 --> 00:10:43,000
Okay, now it's time to start coding.

153
00:10:43,000 --> 00:10:46,000
Bootless server works. Pushing the code up there is a breeze.

154
00:10:46,000 --> 00:10:49,000
The site's live. Bleed for you is in business.

155
00:10:49,000 --> 00:10:51,000
Great. Time to push that code.

156
00:10:51,000 --> 00:10:54,000
Wait a sec. The secret's just still sitting there in a source file.

157
00:10:54,000 --> 00:10:57,000
And this read-through goes open source. This is an open core project.

158
00:10:57,000 --> 00:11:01,000
Jethro realizes his mistake only a minute later, but as he's struggling to figure out

159
00:11:01,000 --> 00:11:06,000
the right series of our keen git commands to rewrite history and purge a dinner repository,

160
00:11:06,000 --> 00:11:11,000
automated script is already half the key, the cryptocurrency miners are out for the races.

161
00:11:11,000 --> 00:11:14,000
It's the morning of the 22nd.

162
00:11:14,000 --> 00:11:17,000
Jethro wakes up. Some of you might be staying on the topic list.

163
00:11:17,000 --> 00:11:22,000
I know we're suspending disbelief here, thanks to the poignant emotional narrative you're supposed to be skillfully leaving.

164
00:11:22,000 --> 00:11:24,000
Thank you, by the way. I'm happy to say.

165
00:11:24,000 --> 00:11:27,000
But that's just silly. I've made a server on AWS.

166
00:11:27,000 --> 00:11:30,000
I know there are no tips on how to put your API into your source code.

167
00:11:30,000 --> 00:11:34,000
And you're half right, dear reader listener. It is very silly.

168
00:11:34,000 --> 00:11:36,000
But unfortunately, it's actually quite common.

169
00:11:36,000 --> 00:11:40,000
Now, I don't want to pick on these providers specifically because this is pervasive,

170
00:11:40,000 --> 00:11:44,000
but just to show that big, serious companies with very good security in general do this,

171
00:11:44,000 --> 00:11:46,000
it's a pretty tall of show.

172
00:11:46,000 --> 00:11:50,000
Stripe Python SDK gives an example where they literally just show some Python code,

173
00:11:50,000 --> 00:11:54,000
the API key pasted in the middle of it without any caution this might be an issue.

174
00:11:54,000 --> 00:11:57,000
DigitalOcean's API documentation shows an export command.

175
00:11:57,000 --> 00:12:00,000
It implies you should be putting your API key into your shell startup.

176
00:12:00,000 --> 00:12:02,000
Again, no caution.

177
00:12:02,000 --> 00:12:05,000
Unless the Python showed this, think that it's just a Ruby thing,

178
00:12:05,000 --> 00:12:07,000
the Python documentation's a good example of this thing.

179
00:12:07,000 --> 00:12:12,000
The officially recommended Python API for Zemdesk gives an example that features every type of credential.

180
00:12:12,000 --> 00:12:15,000
Well, it's also your password in there, too, is not its word.

181
00:12:15,000 --> 00:12:16,000
Put it into a source code.

182
00:12:16,000 --> 00:12:19,000
So, a little bit of a personal digression here.

183
00:12:19,000 --> 00:12:23,000
I have a five-year-old kid, and they got to come see me give another talk

184
00:12:23,000 --> 00:12:25,000
at a different Python conference a little while ago.

185
00:12:25,000 --> 00:12:29,000
They didn't get a ton out of the talk itself, given it was about MyPy

186
00:12:29,000 --> 00:12:33,000
and how to use high-level features to make modeling dynamic code more type-checkable.

187
00:12:33,000 --> 00:12:39,000
However, one slide slipped out, and it specifically asked me to include it in this talk,

188
00:12:39,000 --> 00:12:44,000
because it was, in their words, the funniest joke.

189
00:12:44,000 --> 00:12:48,000
This is a good spot to use that slide to express how I feel about docs that set up beginners

190
00:12:48,000 --> 00:12:50,000
to use secrets in source files.

191
00:12:50,000 --> 00:12:53,000
So, you know, this one's for you.

192
00:12:54,000 --> 00:12:57,000
This is why I was motivated to give this talk in the first place.

193
00:12:57,000 --> 00:13:01,000
If you were interested enough to attend this talk, you probably already know better than this,

194
00:13:01,000 --> 00:13:05,000
but for developers starting out, they are going to see and copy the examples.

195
00:13:05,000 --> 00:13:10,000
Authenticating to your service is literally the first thing that you will ever do with it.

196
00:13:10,000 --> 00:13:13,000
They, by definition, do not have other experience to rely on.

197
00:13:13,000 --> 00:13:18,000
This is why, if you're going to write documentation like that, this talk is for you.

198
00:13:18,000 --> 00:13:22,000
At the end of this talk, if you're bored because you already knew all the technical content,

199
00:13:22,000 --> 00:13:26,000
great, your users don't. They're going to follow your directions.

200
00:13:26,000 --> 00:13:29,000
Don't tell users to paste APIs into their code.

201
00:13:29,000 --> 00:13:33,000
So, okay, hopefully I've convinced you, but what should you do instead?

202
00:13:33,000 --> 00:13:37,000
Well, we're in the middle of a fable, and typically you find the lesson at the end of the fable,

203
00:13:37,000 --> 00:13:39,000
so let's rejoin our story.

204
00:13:39,000 --> 00:13:40,000
Where were we?

205
00:13:40,000 --> 00:13:41,000
Oh, right.

206
00:13:41,000 --> 00:13:42,000
Go to your second.

207
00:13:42,000 --> 00:13:44,000
Jacker wakes up.

208
00:13:44,000 --> 00:13:47,000
So, Jethro knows he needs to try some different stuff.

209
00:13:47,000 --> 00:13:49,000
Let's see what he does.

210
00:13:49,000 --> 00:13:53,000
He sticks secret into his Dropbox folder instead, but then he's fat fingers and pastes a share link

211
00:13:53,000 --> 00:13:56,000
in a blog post one day, and now it's public.

212
00:13:56,000 --> 00:13:58,000
It's very disheartening.

213
00:13:58,000 --> 00:14:03,000
He tries to put in his code again, but what he did ignore this time is some special file that doesn't get shipped in.

214
00:14:03,000 --> 00:14:07,000
Later, he, like, accidentally gets enter while his editor has the get-ignore file focused,

215
00:14:07,000 --> 00:14:13,000
but before tapping over to another file, another git commit-a and pushes it.

216
00:14:13,000 --> 00:14:15,000
That's very very exciting.

217
00:14:15,000 --> 00:14:20,000
Then, he tries using his dash RC in an environment variable and reads it from rs.environment.

218
00:14:20,000 --> 00:14:24,000
Unfortunately, in the process of submitting a bug report for an open source library,

219
00:14:24,000 --> 00:14:30,000
a put your logs in a gist tool dumps the output at the end command to build public gist.

220
00:14:30,000 --> 00:14:32,000
It's very exciting.

221
00:14:32,000 --> 00:14:35,000
Okay, so this is the story more carefully this time.

222
00:14:35,000 --> 00:14:38,000
Later on, after they have the thing about the source code,

223
00:14:38,000 --> 00:14:41,000
they suggest putting in an image dedicated to config file.

224
00:14:41,000 --> 00:14:42,000
So he does.

225
00:14:42,000 --> 00:14:45,000
To be honest, you might be able to get away with this.

226
00:14:45,000 --> 00:14:50,000
Private files on your personal hard disk are, after all, somewhat private.

227
00:14:50,000 --> 00:14:55,000
If you can't trust that a little bit, then you're going to have a hard time doing anything private.

228
00:14:55,000 --> 00:14:57,000
But we can do a little bit better.

229
00:14:57,000 --> 00:15:01,000
More importantly, Jethro, unlike us, lives in a universe ruled by a capricious god

230
00:15:01,000 --> 00:15:05,000
who is intent on him learning only one very specific lesson.

231
00:15:05,000 --> 00:15:08,000
So bad things are going to keep happening to Jethro.

232
00:15:08,000 --> 00:15:11,000
For example, Jethro uses a backup service to backup his laptop.

233
00:15:11,000 --> 00:15:13,000
And his backup provider gets breached.

234
00:15:13,000 --> 00:15:17,000
Since the file's playing text, these hackers grab it out of the backup.

235
00:15:17,000 --> 00:15:20,000
Jethro wakes up. It's February 2nd.

236
00:15:20,000 --> 00:15:24,000
Jethro tries to put his backups on the hard disk instead, but then the hard disk gets stolen.

237
00:15:24,000 --> 00:15:27,000
The hackers read it. Jethro wakes up.

238
00:15:27,000 --> 00:15:32,000
This time, Jethro decides he doesn't need any backups, but he chains the laptop to his wrist.

239
00:15:32,000 --> 00:15:36,000
But remember availability? There's a power surge. His laptop's disk fails.

240
00:15:36,000 --> 00:15:40,000
Attackers don't get their cryptocurrency, but he still loses everything.

241
00:15:40,000 --> 00:15:43,000
It's February 2nd. Jethro wakes up.

242
00:15:43,000 --> 00:15:46,000
So Jethro enables full disk encryption in his OS.

243
00:15:46,000 --> 00:15:48,000
He encrypts the backup drives, too. So he's back up.

244
00:15:48,000 --> 00:15:51,000
Now he's got backups, and they're encrypted, and his disk is encrypted.

245
00:15:51,000 --> 00:15:53,000
It's good stuff.

246
00:15:53,000 --> 00:15:55,000
He's really starting to get serious now.

247
00:15:55,000 --> 00:15:58,000
He looks into the best way to actually store his secrets on purpose,

248
00:15:58,000 --> 00:16:01,000
and he starts using the key ring function to write them.

249
00:16:01,000 --> 00:16:03,000
Jethro uses macro-esq development.

250
00:16:03,000 --> 00:16:06,000
Jethro goes into this custom keychain, which is encrypted and secure.

251
00:16:06,000 --> 00:16:09,000
Here, right. I should really emphasize this.

252
00:16:09,000 --> 00:16:13,000
If you learn anything from this talk, it's really just use the key ring module.

253
00:16:13,000 --> 00:16:15,000
Key ring's straightforward.

254
00:16:15,000 --> 00:16:18,000
We will be exploring more of Jethro's mistakes in a moment,

255
00:16:18,000 --> 00:16:21,000
and that will give us the opportunity to explore the advanced features,

256
00:16:21,000 --> 00:16:26,000
but in code that just uses secrets, this is really all you need to do.

257
00:16:26,000 --> 00:16:31,000
Call set password to save something. Call get password to get it back.

258
00:16:31,000 --> 00:16:34,000
Any application that's done this is instantly more secure.

259
00:16:34,000 --> 00:16:36,000
Gives you a couple things by default.

260
00:16:36,000 --> 00:16:39,000
Key ring defaults to using the operating system's credential store,

261
00:16:39,000 --> 00:16:43,000
which means that you get all the collective wisdom of your operating system's vendors,

262
00:16:43,000 --> 00:16:46,000
ideas about what threats are salient, what you're standing against,

263
00:16:46,000 --> 00:16:49,000
and what the best ways to deal with those threats are.

264
00:16:49,000 --> 00:16:52,000
Even if it doesn't actually provide that better security for your case,

265
00:16:52,000 --> 00:16:56,000
it also means that when either you or your users go to review

266
00:16:56,000 --> 00:16:59,000
what sensitive information is available on their computer,

267
00:16:59,000 --> 00:17:03,000
they can use standard interfaces for this stuff on their operating system.

268
00:17:03,000 --> 00:17:07,000
Key ring supports multiple backends, which means that users with different needs

269
00:17:07,000 --> 00:17:10,000
can configure applications using key ring to pull secrets

270
00:17:10,000 --> 00:17:13,000
from more secure places if they do need that.

271
00:17:13,000 --> 00:17:16,000
Just use key ring is the 80 in the 80-20 of this talk,

272
00:17:16,000 --> 00:17:19,000
but as you may recall, Jethro's life is ruled by him a level of course

273
00:17:19,000 --> 00:17:22,000
whose only interest is better information security,

274
00:17:22,000 --> 00:17:26,000
so he's going to have to contend with some slightly more esoteric tricks.

275
00:17:26,000 --> 00:17:29,000
This next one is something you might want to think about,

276
00:17:29,000 --> 00:17:32,000
but keep in mind that we're starting to get into more advanced security.

277
00:17:32,000 --> 00:17:35,000
Everything we've done so far assumes that Jethro's computer itself

278
00:17:35,000 --> 00:17:38,000
is following his instructions, but what happens when some evil software

279
00:17:38,000 --> 00:17:42,000
wants to steal his secrets and it's already running on his computer?

280
00:17:42,000 --> 00:17:46,000
Now, Jethro's not going to any evil dark web hacker websites,

281
00:17:46,000 --> 00:17:50,000
but he does install two new IPI packages every so often.

282
00:17:50,000 --> 00:17:54,000
And actually, IPI, our software that runs on your computer as your user,

283
00:17:54,000 --> 00:17:57,000
would access all of your files.

284
00:17:58,000 --> 00:18:02,000
IPI does not have any way of scanning every single new piece of software

285
00:18:02,000 --> 00:18:07,000
from malicious code automatically, so you have to be careful about what you install.

286
00:18:07,000 --> 00:18:10,000
One day, Jethro tries to pip install pandas,

287
00:18:10,000 --> 00:18:14,000
but instead he accidentally does pip install pandas instead.

288
00:18:14,000 --> 00:18:18,000
And unfortunately in Jethro's universe, IPI's administers are a little bit less quick

289
00:18:18,000 --> 00:18:21,000
to remove malware in response to reports,

290
00:18:21,000 --> 00:18:24,000
so this actually belongs to their target there.

291
00:18:24,000 --> 00:18:27,000
It's the morning of February 2nd. Jethro wakes up.

292
00:18:27,000 --> 00:18:31,000
On every platform, by default, Turing grants access secrets automatically,

293
00:18:31,000 --> 00:18:34,000
because that's what the platform production stores do.

294
00:18:34,000 --> 00:18:37,000
You can request stuff in the background without you noticing.

295
00:18:37,000 --> 00:18:40,000
This time, Jethro reads Turing's documentation very carefully

296
00:18:40,000 --> 00:18:43,000
and sees that there's a security note about macros

297
00:18:43,000 --> 00:18:47,000
where you can get prompted every time a specific secret is used.

298
00:18:47,000 --> 00:18:50,000
When the Tegro's plotting mistake inevitably happens again,

299
00:18:50,000 --> 00:18:53,000
Jethro's ready, and he gets a cross-center as long as possible.

300
00:18:53,000 --> 00:18:57,000
He realizes what's happening, he hits the nine, deletes the bad package.

301
00:18:57,000 --> 00:19:02,000
Unfortunately, if you recognize this case, it's a D.

302
00:19:02,000 --> 00:19:07,000
On every other platform, Turing grants access to pretty much any software

303
00:19:07,000 --> 00:19:10,000
that's running on your computer, because widgets and Linux don't have

304
00:19:10,000 --> 00:19:13,000
meaningful entry user security brackets.

305
00:19:13,000 --> 00:19:17,000
And Jethro's co-founder uses Windows, so same story again.

306
00:19:17,000 --> 00:19:19,000
Jethro wakes up.

307
00:19:19,000 --> 00:19:23,000
At this point, Jethro writes a case of software to try to address this problem.

308
00:19:23,000 --> 00:19:27,000
Turing supports custom backends, which can be specified by users

309
00:19:27,000 --> 00:19:30,000
even if the applications don't know about them specifically.

310
00:19:30,000 --> 00:19:34,000
So Jethro can control what happens when secure background code gets for a secret.

311
00:19:34,000 --> 00:19:38,000
Specifically, Jethro's new backend will prevent secrets from being accessed

312
00:19:38,000 --> 00:19:41,000
even by malware without his knowledge.

313
00:19:41,000 --> 00:19:43,000
WebAuthn has a specific terminology for this.

314
00:19:43,000 --> 00:19:45,000
It's called a user presence check.

315
00:19:45,000 --> 00:19:49,000
It's why, if you use a token authenticator, you need to both plug it in

316
00:19:49,000 --> 00:19:51,000
and physically touch it to log in.

317
00:19:51,000 --> 00:19:54,000
And that's why Jethro wants to raise extra sense of the secrets here.

318
00:19:54,000 --> 00:19:59,000
As I mentioned earlier, this sort of hard token that you can use to perform

319
00:19:59,000 --> 00:20:02,000
WebAuthn authentication on the website is a great security option,

320
00:20:02,000 --> 00:20:05,000
so Jethro already had one of those password packages.

321
00:20:05,000 --> 00:20:07,000
Number four, Shepard.

322
00:20:07,000 --> 00:20:09,000
You wouldn't necessarily want to use this for every kind of secret,

323
00:20:09,000 --> 00:20:14,000
but some secrets are more powerful than others and should be protected more aggressively.

324
00:20:14,000 --> 00:20:17,000
Some secrets can do stuff like sync your email in the background,

325
00:20:17,000 --> 00:20:22,000
and you need them to have easy access because you wouldn't want to have to touch your hardware key every two minutes.

326
00:20:22,000 --> 00:20:25,000
If you're doing it constantly, you won't notice when something unexpected happens

327
00:20:25,000 --> 00:20:28,000
because the touch prompt would always be accepted.

328
00:20:28,000 --> 00:20:31,000
So Jethro writes a piece of software, a custom keyring backend

329
00:20:31,000 --> 00:20:36,000
that uses a part of the hard token protocol to encrypt each secret as a Frenet token,

330
00:20:36,000 --> 00:20:41,000
making it impossible for his secrets to be discovered unless his token is plugged in and he touches it.

331
00:20:41,000 --> 00:20:45,000
When Jethro writes a keyring of tokens, he calls it token-writ.

332
00:20:45,000 --> 00:20:48,000
Sorry, Zoobards, that's a joke for you old people who don't know what a token is.

333
00:20:48,000 --> 00:20:51,000
If not copyrighted, Frenet Honey, it comes from a parallel universe,

334
00:20:51,000 --> 00:20:55,000
so I grabbed this software from this iteration of the time loop before Jethro got reset back to the beginning.

335
00:20:55,000 --> 00:21:00,000
And since I've spent so much time doing the fickle god version of someone else's life,

336
00:21:00,000 --> 00:21:03,000
I didn't want to give the demo gods the opportunity to do this thing for me,

337
00:21:03,000 --> 00:21:07,000
so this isn't a live demo, but it is from a couple hours ago.

338
00:21:07,000 --> 00:21:10,000
After steering Jethro's code and resetting his universe,

339
00:21:10,000 --> 00:21:13,000
I'm going to do a quick recording of me releasing it on PyPI this morning.

340
00:21:13,000 --> 00:21:16,000
Note that I'm using token ring to release token ring,

341
00:21:16,000 --> 00:21:20,000
and in just a second, we should see...

342
00:21:20,000 --> 00:21:24,000
Maybe I think that's a bit of a mistake, so long.

343
00:21:25,000 --> 00:21:28,000
So when the package finishes building, I use coin,

344
00:21:28,000 --> 00:21:32,000
which is the standard outbuilder for PyPI packages,

345
00:21:33,000 --> 00:21:39,000
and it drops for a touch because it's using that keyring backend.

346
00:21:40,000 --> 00:21:45,000
So if you have some high security application that you'd like to secure above and beyond your concert manager,

347
00:21:45,000 --> 00:21:48,000
you can just install token ring and feel free to use that solution.

348
00:21:48,000 --> 00:21:51,000
Now, Jethro's in a pretty good place at this point.

349
00:21:51,000 --> 00:21:54,000
This is an extremely difficult to approach to secrets management.

350
00:21:54,000 --> 00:21:57,000
The most sensitive secrets he's storing on his laptop are incredibly secure,

351
00:21:57,000 --> 00:22:00,000
only accessible when his hardware is used plugged in,

352
00:22:00,000 --> 00:22:02,000
every access requires easier management.

353
00:22:02,000 --> 00:22:04,000
But Jethro's attackers are no longer attackers.

354
00:22:04,000 --> 00:22:07,000
They have access to advanced alien technology.

355
00:22:07,000 --> 00:22:10,000
They now deploy a zero-click zero day against his laptop.

356
00:22:10,000 --> 00:22:13,000
They wait until he catches a UVQ to steal his secret out of memory.

357
00:22:13,000 --> 00:22:15,000
It's the morning of favorite seconds.

358
00:22:15,000 --> 00:22:17,000
That's our website.

359
00:22:18,000 --> 00:22:20,000
At this point, he loses it.

360
00:22:20,000 --> 00:22:22,000
He is going to protect his secrets at any cost.

361
00:22:22,000 --> 00:22:25,000
He raises $100 million in venture funding.

362
00:22:25,000 --> 00:22:27,000
He hires a team of 1,000 security engineers.

363
00:22:27,000 --> 00:22:32,000
They comb over every aspect of the possible uses of secrets that you might ever have.

364
00:22:32,000 --> 00:22:34,000
They airgap all of their systems.

365
00:22:34,000 --> 00:22:37,000
Unfortunately, in all this endless security hardening,

366
00:22:37,000 --> 00:22:40,000
he forgets to ever actually create an application.

367
00:22:40,000 --> 00:22:42,000
Remember the application?

368
00:22:42,000 --> 00:22:44,000
They run out of money and the company shuts down,

369
00:22:44,000 --> 00:22:46,000
never having generated even a single blue,

370
00:22:46,000 --> 00:22:48,000
let alone a purple, for a question.

371
00:22:48,000 --> 00:22:50,000
It's the morning of February 2nd.

372
00:22:50,000 --> 00:22:54,000
Did you think the lesson was just about being infinitely careful about your secrets?

373
00:22:54,000 --> 00:22:58,000
Jethro wakes up and thinks long and hard about what he's been doing.

374
00:22:58,000 --> 00:23:01,000
He realizes that he's just been reacting to each new attack,

375
00:23:01,000 --> 00:23:03,000
always fighting the last one.

376
00:23:03,000 --> 00:23:06,000
There's no way that he can out-resource these attackers.

377
00:23:06,000 --> 00:23:09,000
They appear to be almost demonic in their power and influence.

378
00:23:09,000 --> 00:23:11,000
So instead, he makes a list in a budget.

379
00:23:11,000 --> 00:23:13,000
He reviews the basics of his black.

380
00:23:13,000 --> 00:23:15,000
He uses a password manager.

381
00:23:15,000 --> 00:23:16,000
He encrypts his disk.

382
00:23:16,000 --> 00:23:17,000
He encrypts the backups.

383
00:23:17,000 --> 00:23:18,000
He uses the keyway module.

384
00:23:18,000 --> 00:23:21,000
He can figure a back end appropriate to the sensitivity of the data.

385
00:23:21,000 --> 00:23:23,000
He makes a plan for all these attacks.

386
00:23:23,000 --> 00:23:24,000
He writes it down.

387
00:23:24,000 --> 00:23:26,000
He tells his co-founder about it.

388
00:23:26,000 --> 00:23:30,000
He trains any new employees or contributors that need to interact with these secret agents.

389
00:23:30,000 --> 00:23:32,000
He knows the interactivity secrets as well.

390
00:23:32,000 --> 00:23:35,000
When the attackers break in again, who knows how,

391
00:23:35,000 --> 00:23:39,000
Jethro contacts his provider and shows them his documented security procedures.

392
00:23:39,000 --> 00:23:41,000
They agree to discount above and beyond.

393
00:23:41,000 --> 00:23:43,000
They restore his servers and give him the response.

394
00:23:43,000 --> 00:23:46,000
The attackers knew his machine was ransomware, but he's got up-to-date backup.

395
00:23:46,000 --> 00:23:48,000
It steals his laptop, but it's encrypted.

396
00:23:48,000 --> 00:23:51,000
It's the morning of April 22nd.

397
00:23:51,000 --> 00:23:53,000
Jethro wakes up.

398
00:23:53,000 --> 00:23:55,000
The attackers have given up on the secret.

399
00:23:55,000 --> 00:23:56,000
How? Jethro's at PyCon.

400
00:23:56,000 --> 00:23:58,000
He's got a boost at Startup Row.

401
00:23:58,000 --> 00:23:59,000
He's got a new and purposeful pros website.

402
00:23:59,000 --> 00:24:02,000
It's online generating colors and movement.

403
00:24:02,000 --> 00:24:04,000
And he lives completely alone.

404
00:24:04,000 --> 00:24:09,000
In this talk, which as you've seen is already long enough that it barely fits into this time slot,

405
00:24:09,000 --> 00:24:14,000
I've only been able to review how Jethro secures his secrets on one computer, head-to-head.

406
00:24:14,000 --> 00:24:17,000
You also need to deal with secrets in the cloud.

407
00:24:17,000 --> 00:24:24,000
Another important rule that I didn't have time to cover is that you should limit the power, scope, and lifetime of your secrets.

408
00:24:24,000 --> 00:24:26,000
Make them less powerful if you can.

409
00:24:26,000 --> 00:24:29,000
You still eventually need to store them somewhere.

410
00:24:29,000 --> 00:24:36,000
You still will always have some power for secret, but it doesn't have to be all root access all the time.

411
00:24:36,000 --> 00:24:39,000
There are quite a few tools that you can use to create short-lived API tokens.

412
00:24:39,000 --> 00:24:45,000
They're inherently specific in service you're using them, which is why it's hard to give a talk about the general concept.

413
00:24:45,000 --> 00:24:52,000
Several issues for AWS, though, which is certainly one of the higher-privileged things that you're likely to deal with.

414
00:24:52,000 --> 00:24:57,000
Two popular ones you can check out are GimmieAWSCreds and AWS Vault.

415
00:24:57,000 --> 00:25:02,000
You'll also need to put secrets into your CI systems and cloud servers.

416
00:25:02,000 --> 00:25:10,000
The providers have APIs for this, and in particular you probably want to know about GitHub Actions' dedicated secrets management tools.

417
00:25:10,000 --> 00:25:15,000
There's also a Python library called DTVAC, which is sort of a queuing for the cloud.

418
00:25:15,000 --> 00:25:22,000
It's a client for the HashiCorp Vault service, which will extract all of the backend secret sharing services that various clouds have collected.

419
00:25:22,000 --> 00:25:28,000
Note also that if your application is already using queuing, then when you start integrating with tools like this,

420
00:25:28,000 --> 00:25:33,000
you can change your queuing backend on different deployment scenarios that you're using.

421
00:25:33,000 --> 00:25:39,000
So for basic secrets access, you only need to change your configuration, not your code.

422
00:25:40,000 --> 00:25:45,000
Thank you very much for coming to my talk, and happy Secret Keeper!

423
00:25:54,000 --> 00:25:58,000
So I'm Glyph. You can find me on the internet by typing Glyph into various places.

424
00:25:58,000 --> 00:26:03,000
We only have a couple minutes left. You might have time for one question,

425
00:26:03,000 --> 00:26:08,000
but I think most of the questions are going to be in the hall outside if you'd like to join me there.

426
00:26:08,000 --> 00:26:11,000
So, thanks again!

