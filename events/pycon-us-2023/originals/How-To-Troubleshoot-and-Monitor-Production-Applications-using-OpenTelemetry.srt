1
00:00:00,000 --> 00:00:10,280
All right, guys, welcome to PyCon 23, your first open telemetry tutorial.

2
00:00:10,280 --> 00:00:15,180
So before we start, I just want to thank everyone who's working here and volunteering and help

3
00:00:15,180 --> 00:00:16,180
make this thing possible.

4
00:00:16,180 --> 00:00:17,920
You're all doing an amazing job.

5
00:00:17,920 --> 00:00:20,460
So thank you all very much.

6
00:00:20,460 --> 00:00:40,660
So let's jump right in.

7
00:00:40,660 --> 00:00:46,620
Welcome to how to monitor and troubleshoot applications in production using open telemetry.

8
00:00:46,620 --> 00:00:52,280
So this, I believe, is the number one most comprehensive tutorial for open telemetry

9
00:00:52,280 --> 00:00:53,380
that exists.

10
00:00:53,380 --> 00:00:56,500
I wish I had this when I was starting out because this would have saved me a lot of

11
00:00:56,500 --> 00:00:57,500
time.

12
00:00:57,500 --> 00:00:59,060
So that's what I hope to do here today for you.

13
00:00:59,060 --> 00:01:02,660
And I hope to cut you a lot of time and cut you little corners.

14
00:01:02,660 --> 00:01:05,060
And maybe we can all learn really fast today.

15
00:01:05,060 --> 00:01:07,620
So does anyone here know what open telemetry is?

16
00:01:07,620 --> 00:01:08,620
Is anyone familiar?

17
00:01:08,620 --> 00:01:09,620
Please raise your hand.

18
00:01:09,620 --> 00:01:12,560
Okay, a good amount.

19
00:01:12,560 --> 00:01:15,980
And everyone who doesn't know what open telemetry is, please raise your hand.

20
00:01:16,340 --> 00:01:17,340
Wow, most of the class.

21
00:01:17,340 --> 00:01:18,340
All right.

22
00:01:18,340 --> 00:01:20,660
Well, welcome.

23
00:01:20,660 --> 00:01:21,820
So we'll get right into it.

24
00:01:21,820 --> 00:01:25,060
But there's a lot of backstory and a lot we need to know before going into it.

25
00:01:25,060 --> 00:01:27,860
We need to define observability at first.

26
00:01:27,860 --> 00:01:33,020
And the way that I would define observability, and this is really the standard now, is measuring

27
00:01:33,020 --> 00:01:38,020
the internal state of a system and how well you understand what's happening inside given

28
00:01:38,020 --> 00:01:39,700
only the external outputs.

29
00:01:39,700 --> 00:01:40,700
Okay?

30
00:01:40,700 --> 00:01:43,020
So you're watching something change from the outside.

31
00:01:43,060 --> 00:01:46,500
And you kind of have a smarter and smarter and educated guess as to what's really happening

32
00:01:46,500 --> 00:01:50,140
inside.

33
00:01:50,140 --> 00:01:55,500
And so we can start with a few examples.

34
00:01:55,500 --> 00:01:58,460
We can see, for example, a person aging here.

35
00:01:58,460 --> 00:02:03,140
And can anyone raise their hand and tell me what's happening to this person as they're

36
00:02:03,140 --> 00:02:07,660
aging and getting older in order?

37
00:02:07,660 --> 00:02:08,660
No one knows?

38
00:02:08,660 --> 00:02:09,660
Exactly.

39
00:02:10,300 --> 00:02:14,980
So you summarize basically in a couple words.

40
00:02:14,980 --> 00:02:19,300
He's losing hair, he's growing whiter and whiter hair, and just a few small changes

41
00:02:19,300 --> 00:02:20,820
outside.

42
00:02:20,820 --> 00:02:24,500
And same with this star that's burning.

43
00:02:24,500 --> 00:02:26,620
Right?

44
00:02:26,620 --> 00:02:30,540
We're basically summarizing what we're seeing in a few words, but these don't really capture

45
00:02:30,540 --> 00:02:31,920
what's really happening.

46
00:02:31,920 --> 00:02:34,700
There's a lot happening behind the scenes for both of these events.

47
00:02:34,700 --> 00:02:38,020
There's millions and millions of tiny events happening inside that we don't know.

48
00:02:38,020 --> 00:02:41,060
And every year we're just learning more and more and making smarter and smarter guesses

49
00:02:41,060 --> 00:02:42,860
as to what's happening.

50
00:02:42,860 --> 00:02:44,780
So that's exactly what we're trying to do here.

51
00:02:44,780 --> 00:02:48,580
We're trying to observe, but not a person that's aging or a star that's burning.

52
00:02:48,580 --> 00:02:51,060
We're trying to observe modern day applications.

53
00:02:51,060 --> 00:02:52,060
Right?

54
00:02:52,060 --> 00:02:57,980
Applications for the cloud, cloud native, in distributed environments, and so on.

55
00:02:57,980 --> 00:03:01,700
And so we need some data basically.

56
00:03:01,700 --> 00:03:05,460
Just like we have microscopes and lenses and we're able to see the sun and we're able to

57
00:03:05,620 --> 00:03:09,620
smarter and smarter and educated guesses, we need some information on the application

58
00:03:09,620 --> 00:03:12,940
side as well to figure out exactly what's happening.

59
00:03:12,940 --> 00:03:19,740
So observability for modern applications are built on top of three main pillars.

60
00:03:19,740 --> 00:03:23,980
Metrics, logs, and traces.

61
00:03:23,980 --> 00:03:24,980
Okay?

62
00:03:24,980 --> 00:03:26,540
Metrics.

63
00:03:26,540 --> 00:03:29,620
Can anyone raise their hand and explain what metrics is in their own words?

64
00:03:29,620 --> 00:03:32,620
Do they have an idea of what it could be?

65
00:03:32,620 --> 00:03:33,620
Yes, please.

66
00:03:33,620 --> 00:03:34,620
Exactly.

67
00:03:34,620 --> 00:03:35,620
Exactly.

68
00:03:35,620 --> 00:03:45,900
It's a series of numbers that add up and really they just measure activity and you can display

69
00:03:45,900 --> 00:03:49,140
them on the graph and you can have all sorts of fun with them.

70
00:03:49,140 --> 00:03:52,060
And traces as well.

71
00:03:52,060 --> 00:03:53,860
Traces are a bit more abstract.

72
00:03:53,860 --> 00:03:58,100
They're really the, I guess the cooler part of observability.

73
00:03:58,660 --> 00:04:08,300
They're a document based metadata really that contain all the information of one microscopic

74
00:04:08,300 --> 00:04:09,980
atomic event.

75
00:04:09,980 --> 00:04:11,220
Okay?

76
00:04:11,220 --> 00:04:16,660
So when we see here this image of a trace, what we're really looking at is spans coming

77
00:04:16,660 --> 00:04:17,660
together.

78
00:04:17,660 --> 00:04:19,180
Feel free guys, come in.

79
00:04:19,180 --> 00:04:20,180
Don't be shy.

80
00:04:20,180 --> 00:04:21,180
It's okay.

81
00:04:21,180 --> 00:04:22,180
Welcome, welcome.

82
00:04:22,180 --> 00:04:27,100
And so what we're really seeing here is a collection of spans.

83
00:04:27,100 --> 00:04:29,820
A trace, you should think of it as a big, big family.

84
00:04:29,820 --> 00:04:30,820
Okay?

85
00:04:30,820 --> 00:04:35,180
And each one of these little circles that you see here, this is what we call the root

86
00:04:35,180 --> 00:04:36,540
span, the first one.

87
00:04:36,540 --> 00:04:38,540
And each one is a span we see here.

88
00:04:38,540 --> 00:04:40,440
So this would be the root span.

89
00:04:40,440 --> 00:04:45,480
Each circle span you see here would be a child to this parent span.

90
00:04:45,480 --> 00:04:48,980
And I guess each circle span, you can think of it as a sibling.

91
00:04:48,980 --> 00:04:49,980
Okay?

92
00:04:49,980 --> 00:04:52,980
Is that a question?

93
00:04:52,980 --> 00:04:54,980
Oh, okay.

94
00:04:55,860 --> 00:04:57,860
Yeah, don't sit there.

95
00:04:57,860 --> 00:04:58,860
Okay.

96
00:04:58,860 --> 00:05:03,860
Are there any questions so far on metrics or traces?

97
00:05:03,860 --> 00:05:06,060
Okay.

98
00:05:06,060 --> 00:05:07,060
And logs.

99
00:05:07,060 --> 00:05:09,260
We've never heard of this, right?

100
00:05:09,260 --> 00:05:10,260
Just kidding.

101
00:05:10,260 --> 00:05:12,940
This logs is your normal standard output, standard error streaming.

102
00:05:12,940 --> 00:05:15,140
It's what you see when you do print Hello World.

103
00:05:15,140 --> 00:05:16,140
It's exactly that.

104
00:05:16,140 --> 00:05:17,860
So logs as well.

105
00:05:17,860 --> 00:05:24,780
Together these come and they form a stack of telemetry data that we call melt.

106
00:05:24,780 --> 00:05:27,980
Logs, traces, logs.

107
00:05:27,980 --> 00:05:28,980
Right?

108
00:05:28,980 --> 00:05:34,900
So when you have only one of these, it becomes really, really hard to monitor and debug your

109
00:05:34,900 --> 00:05:35,900
application.

110
00:05:35,900 --> 00:05:39,380
When you have two, it becomes slightly better, depending which two.

111
00:05:39,380 --> 00:05:43,660
And when you have all three come together in a concise and consolidated place in a single

112
00:05:43,660 --> 00:05:49,220
plane of glass, it becomes very, very easy to quickly debug, monitor your applications,

113
00:05:49,220 --> 00:05:51,820
and stay on top of everything.

114
00:05:51,820 --> 00:05:54,340
Any questions so far up till now?

115
00:05:55,140 --> 00:05:56,140
Okay.

116
00:05:56,140 --> 00:05:57,140
Amazing.

117
00:05:57,140 --> 00:06:00,020
Class full of geniuses.

118
00:06:00,020 --> 00:06:01,020
So welcome.

119
00:06:01,020 --> 00:06:04,780
Next, we'll get into what open telemetry is.

120
00:06:04,780 --> 00:06:09,540
So open telemetry, you should think of it as, I guess, you can think of it as a collection

121
00:06:09,540 --> 00:06:12,020
of tools and APIs and SDKs.

122
00:06:12,020 --> 00:06:13,020
Okay?

123
00:06:13,020 --> 00:06:14,020
And they do four main things.

124
00:06:14,020 --> 00:06:17,580
I'm not exaggerating when I list out all these words here.

125
00:06:17,580 --> 00:06:23,940
They instrument, they generate, they collect, and then finally they export telemetry data.

126
00:06:23,940 --> 00:06:25,140
This is all that open telemetry does.

127
00:06:25,140 --> 00:06:29,140
It does these four main things, and we'll get really, really deep into all of those.

128
00:06:29,140 --> 00:06:30,140
Okay?

129
00:06:30,140 --> 00:06:36,660
But what you should really think of it as, open telemetry is just one protocol just to

130
00:06:36,660 --> 00:06:40,740
extract telemetry data out of your application and to be able to do something with it later

131
00:06:40,740 --> 00:06:41,740
on.

132
00:06:41,740 --> 00:06:42,740
Okay?

133
00:06:42,740 --> 00:06:44,740
Any questions on this?

134
00:06:44,740 --> 00:06:48,180
Okay, excellent.

135
00:06:48,180 --> 00:06:51,820
So we're going to look at it at a high level, what really happens.

136
00:06:51,820 --> 00:06:55,700
So on the left side, on the blue, you have your demo client, demo server.

137
00:06:55,700 --> 00:06:56,700
Ignore those.

138
00:06:56,700 --> 00:06:58,860
Those are just your applications that you wrote in Python.

139
00:06:58,860 --> 00:07:00,180
You wrote a hello world in Python.

140
00:07:00,180 --> 00:07:01,180
Okay?

141
00:07:01,180 --> 00:07:02,620
That's the blue.

142
00:07:02,620 --> 00:07:07,820
From there, open telemetry does what we call instrumentation, and it's able to extract

143
00:07:07,820 --> 00:07:12,100
telemetry data from your application and export it somewhere else.

144
00:07:12,100 --> 00:07:18,420
So your application, it exports it to an OTL collector, an open telemetry collector.

145
00:07:18,420 --> 00:07:19,420
Okay?

146
00:07:19,900 --> 00:07:25,140
A collector should think of it as a queue or a sort of bridge or a bus or a highway.

147
00:07:25,140 --> 00:07:29,700
That's just an intermediate stop for your telemetry data before it reaches really its

148
00:07:29,700 --> 00:07:31,220
final destination.

149
00:07:31,220 --> 00:07:32,940
Your data will never live in an OTL collector.

150
00:07:32,940 --> 00:07:36,980
It'll just stop by there for a little bit before advancing on and moving on somewhere

151
00:07:36,980 --> 00:07:37,980
else.

152
00:07:37,980 --> 00:07:38,980
Okay?

153
00:07:38,980 --> 00:07:43,460
And finally, we're going to export it today to three main places, and these are really

154
00:07:43,460 --> 00:07:44,460
your telemetry backends.

155
00:07:44,460 --> 00:07:47,700
This is the final stop and the final place for it to end.

156
00:07:47,700 --> 00:07:48,700
Okay?

157
00:07:48,780 --> 00:07:53,460
It's an open source tool for distributed tracing.

158
00:07:53,460 --> 00:07:59,100
Zipkin, also for distributed tracing, and Prometheus for metrics.

159
00:07:59,100 --> 00:08:00,620
Has anybody heard of Jaeger?

160
00:08:00,620 --> 00:08:01,620
Please raise your hand.

161
00:08:01,620 --> 00:08:04,620
Okay, good amount.

162
00:08:04,620 --> 00:08:05,620
Zipkin?

163
00:08:05,620 --> 00:08:06,620
Less?

164
00:08:06,620 --> 00:08:07,620
And Prometheus?

165
00:08:07,620 --> 00:08:08,620
Everyone.

166
00:08:08,620 --> 00:08:09,620
Amazing.

167
00:08:09,620 --> 00:08:11,540
So I'm sure you heard of Prometheus at work.

168
00:08:11,540 --> 00:08:15,060
I've definitely heard it many, many times before I really found out what it was.

169
00:08:15,060 --> 00:08:18,180
And that's exactly what we're going to be doing today.

170
00:08:18,180 --> 00:08:22,700
We're going to be creating your application, sending it to an open telemetry collector,

171
00:08:22,700 --> 00:08:25,060
and then finally exporting it to these three main places.

172
00:08:25,060 --> 00:08:26,060
Okay?

173
00:08:26,060 --> 00:08:28,300
Keep in mind, you can send it to a lot more places.

174
00:08:28,300 --> 00:08:29,940
These are just vendor neutral places.

175
00:08:29,940 --> 00:08:33,500
They're open source telemetry backends that you could send it to.

176
00:08:33,500 --> 00:08:38,180
But for commercial options, you have many, many, many options out there.

177
00:08:38,180 --> 00:08:41,620
Any questions on the high level architecture?

178
00:08:41,620 --> 00:08:45,580
Okay.

179
00:08:45,580 --> 00:08:47,580
Anyone not understand anything?

180
00:08:47,580 --> 00:08:50,180
Okay, let's move on.

181
00:08:50,180 --> 00:08:53,000
So let's go a bit more in depth now.

182
00:08:53,000 --> 00:08:54,000
What it really means.

183
00:08:54,000 --> 00:08:56,100
This is exactly the same thing as this diagram.

184
00:08:56,100 --> 00:08:58,900
Just much more in depth behind the scenes.

185
00:08:58,900 --> 00:09:01,060
So let's start with your platform in the blue.

186
00:09:01,060 --> 00:09:04,140
Your platform, you should think of it as any place where Python 3 can run.

187
00:09:04,140 --> 00:09:07,620
Say an AWS EC2, a Lambda function, it doesn't matter.

188
00:09:07,620 --> 00:09:10,060
Your computer, it's all the same.

189
00:09:10,060 --> 00:09:14,140
Open telemetry sits in between your libraries and your application.

190
00:09:14,140 --> 00:09:15,260
It sits in between.

191
00:09:15,260 --> 00:09:16,500
Can anyone guess why?

192
00:09:16,500 --> 00:09:20,140
Nobody has an idea.

193
00:09:20,140 --> 00:09:21,700
Exactly.

194
00:09:21,700 --> 00:09:28,140
It's able to intercept your libraries and it gives you, let's say you have requests,

195
00:09:28,140 --> 00:09:29,140
the request library.

196
00:09:29,140 --> 00:09:33,420
You don't really access your request library exactly as it is.

197
00:09:33,420 --> 00:09:37,740
You access an open telemetry instrumented version of your request library.

198
00:09:37,740 --> 00:09:41,220
Because it's able to intercept all of your third party libraries before you even access

199
00:09:41,220 --> 00:09:42,540
them.

200
00:09:42,540 --> 00:09:45,060
Any questions on the interception instrumentation?

201
00:09:45,060 --> 00:09:58,820
No, it does it on the spot, on demand, right before you run your code.

202
00:09:58,820 --> 00:10:01,300
So yeah, it becomes very, very easy.

203
00:10:01,300 --> 00:10:04,100
That's the cool thing about Python, that it's interpreted, everything just happens on the

204
00:10:04,100 --> 00:10:05,900
fly last second.

205
00:10:05,900 --> 00:10:08,900
And it's scary but cool.

206
00:10:08,900 --> 00:10:11,900
Go ahead.

207
00:10:11,900 --> 00:10:17,740
Good question.

208
00:10:17,740 --> 00:10:22,580
I guess we'll find out.

209
00:10:22,580 --> 00:10:23,580
But you're right.

210
00:10:23,580 --> 00:10:29,360
It's now my favorite idea that it intercepts your packages at runtime and it's able to

211
00:10:29,360 --> 00:10:33,340
maybe possibly mess up and give you a dangerous version of your application.

212
00:10:33,340 --> 00:10:35,620
So this is the idea of monkey patching.

213
00:10:35,620 --> 00:10:38,940
And so we're making it safer and safer and we're adopting community standards to make

214
00:10:38,940 --> 00:10:42,180
it as safe as possible.

215
00:10:42,180 --> 00:10:45,180
Any other questions?

216
00:10:45,180 --> 00:10:48,180
Both.

217
00:10:48,180 --> 00:10:51,660
It's your application.

218
00:10:51,660 --> 00:11:03,340
You'll do it soon.

219
00:11:03,340 --> 00:11:04,340
Pretty much.

220
00:11:04,340 --> 00:11:05,340
Yeah.

221
00:11:05,340 --> 00:11:06,340
You'll do it on your computer locally.

222
00:11:07,060 --> 00:11:09,260
So the application is any piece of Python code that runs.

223
00:11:09,260 --> 00:11:11,260
It's just a very generic thing.

224
00:11:11,260 --> 00:11:17,620
And yes, a question in the back?

225
00:11:17,620 --> 00:11:18,620
The overhead?

226
00:11:18,620 --> 00:11:22,340
A bit less today but we can go into that if you want at the end.

227
00:11:22,340 --> 00:11:23,340
Definitely.

228
00:11:23,340 --> 00:11:24,340
Okay.

229
00:11:24,340 --> 00:11:26,940
So any questions on the interception and instrumentation?

230
00:11:26,940 --> 00:11:28,260
Okay.

231
00:11:28,260 --> 00:11:29,260
Perfectly.

232
00:11:29,260 --> 00:11:32,100
So it's able to instrument.

233
00:11:33,100 --> 00:11:39,060
So what happens when you do, for example, request.get, Google.com or Bing.com or anything?

234
00:11:39,060 --> 00:11:42,300
What happens is the API and SDK work together first.

235
00:11:42,300 --> 00:11:47,780
And the blue and the green here, they are able to do what's called generating the trace.

236
00:11:47,780 --> 00:11:53,260
And what it is is essentially a big JSON or a dictionary in Python that contains all of

237
00:11:53,260 --> 00:11:56,520
the metadata about the operation or event.

238
00:11:56,520 --> 00:11:58,700
And from there it's sent on to a processor.

239
00:11:58,700 --> 00:12:04,100
The processor, you should think of it as simply a sort of a queue that just handles it before

240
00:12:04,100 --> 00:12:05,980
it's being sent out.

241
00:12:05,980 --> 00:12:09,580
From there, when it leaves this queue, it goes to an exporter which is another sort

242
00:12:09,580 --> 00:12:13,900
of queue but when it leaves the exporter, it's sent out through the internet to anywhere

243
00:12:13,900 --> 00:12:15,100
you want it to go.

244
00:12:15,100 --> 00:12:16,100
Okay.

245
00:12:16,100 --> 00:12:20,660
Usually the first stop from your application is an open telemetry collector.

246
00:12:20,660 --> 00:12:21,660
You don't have to use the collector.

247
00:12:21,660 --> 00:12:22,660
We'll get into it.

248
00:12:22,660 --> 00:12:26,380
But the collector is sort of optional because as you see the collector also has an exporter.

249
00:12:26,780 --> 00:12:31,500
So you could send it directly from your applications exporter to the telemetry backend and the

250
00:12:31,500 --> 00:12:32,660
collector is optional.

251
00:12:32,660 --> 00:12:37,140
But this is part of the overhead question that it reduces a lot of stress from your

252
00:12:37,140 --> 00:12:41,660
application when you send it directly to the collector as local and as close as possible,

253
00:12:41,660 --> 00:12:43,020
just send it out quickly.

254
00:12:43,020 --> 00:12:46,980
And then all the overhead is on the collector really to do all of this.

255
00:12:46,980 --> 00:12:50,540
Any questions on the application side?

256
00:12:50,540 --> 00:12:51,540
Go ahead.

257
00:12:51,540 --> 00:12:55,620
It's your choice.

258
00:12:55,620 --> 00:12:56,620
You could configure sampling.

259
00:12:56,620 --> 00:12:57,620
Go ahead.

260
00:12:57,620 --> 00:12:58,620
Does it block the call?

261
00:12:58,620 --> 00:12:59,620
It got you.

262
00:12:59,620 --> 00:13:26,100
I'm sure there's a way to configure it, but by default, no.

263
00:13:26,100 --> 00:13:27,100
It doesn't block anything.

264
00:13:27,100 --> 00:13:31,260
It does it all kind of at the same time.

265
00:13:31,260 --> 00:13:32,260
Anything else?

266
00:13:32,260 --> 00:13:33,260
Okay.

267
00:13:33,260 --> 00:13:35,460
Let's move on.

268
00:13:35,460 --> 00:13:39,660
And so we'll move on to what the open telemetry collector is.

269
00:13:39,660 --> 00:13:44,880
The collector is really just a place to offload really stress from your application and put

270
00:13:44,880 --> 00:13:46,260
it all in the collector.

271
00:13:46,260 --> 00:13:48,540
It's a different piece of architecture.

272
00:13:48,540 --> 00:13:52,900
It could be, I guess, for example, its own EC2 or it could be anything else.

273
00:13:52,900 --> 00:13:56,420
And it's just this tiny little thing that's able to receive traces and send it back out

274
00:13:56,460 --> 00:13:58,040
to somewhere else.

275
00:13:58,040 --> 00:14:01,900
So what it is is almost the exact same thing as what we see on the left.

276
00:14:01,900 --> 00:14:06,500
Although instead of creating it, creating the traces and spans with the API and SDK,

277
00:14:06,500 --> 00:14:07,500
we're just receiving it.

278
00:14:07,500 --> 00:14:11,500
We're listening, we're listening, we're listening, and oh, we've got a trace coming from this

279
00:14:11,500 --> 00:14:12,500
exporter.

280
00:14:12,500 --> 00:14:15,980
From there, it's sent on to the processor, just a small queue, and there to the exporter.

281
00:14:15,980 --> 00:14:21,720
And finally, it's sent to a telemetry backend, someplace that can store your data and then

282
00:14:21,720 --> 00:14:24,000
also hopefully visualize it as well.

283
00:14:24,000 --> 00:14:26,960
Because having just data in a database doesn't really help much.

284
00:14:26,960 --> 00:14:31,520
You need a way to also see it and interact with it somehow.

285
00:14:31,520 --> 00:14:36,080
So any questions at all about the architecture, high depth and low depth as well?

286
00:14:36,080 --> 00:14:37,080
Okay, great.

287
00:14:37,080 --> 00:14:42,080
So let's move on.

288
00:14:42,080 --> 00:14:44,080
And hopefully everyone has...

289
00:14:44,080 --> 00:14:46,080
Yeah, go ahead.

290
00:14:46,080 --> 00:14:48,160
Yeah, go ahead.

291
00:15:16,160 --> 00:15:22,660
I've seen...

292
00:15:22,660 --> 00:15:25,520
In enterprise situations, I haven't had much...

293
00:15:25,520 --> 00:15:28,440
I haven't seen many problems of the collector handling stress.

294
00:15:28,440 --> 00:15:32,200
I've seen in enterprise applications where they just have a really big EC2 or something

295
00:15:32,200 --> 00:15:35,600
like that, and it's able to hold everything, and it does it very well.

296
00:15:35,600 --> 00:15:38,600
Yeah, in the back.

297
00:15:38,600 --> 00:15:43,600
Could you repeat that?

298
00:15:43,600 --> 00:15:44,600
I couldn't hear.

299
00:15:45,120 --> 00:15:50,120
Usually it's separate, right?

300
00:15:50,120 --> 00:15:54,120
Because we want to offload as much as we can.

301
00:15:54,120 --> 00:15:55,120
Today, we're going to co-host.

302
00:15:55,120 --> 00:15:58,320
We're going to have the application and the collector and the backend all running on your

303
00:15:58,320 --> 00:15:59,320
computer today.

304
00:15:59,320 --> 00:16:00,320
Okay?

305
00:16:00,320 --> 00:16:04,920
So we're able to see how it's all possible, but you could easily split it up.

306
00:16:04,920 --> 00:16:08,800
And so I hope everyone here has Python 3 and Docker installed.

307
00:16:08,800 --> 00:16:11,000
Does anyone not have these installed right now?

308
00:16:11,000 --> 00:16:12,320
Okay.

309
00:16:12,320 --> 00:16:16,600
So just make sure you have...

310
00:16:16,600 --> 00:16:19,600
Are you able to run Docker Compose?

311
00:16:19,600 --> 00:16:20,600
Okay.

312
00:16:20,600 --> 00:16:25,600
I recommend you have Docker Desktop, but good luck if you have an alternative.

313
00:16:25,600 --> 00:16:26,600
Okay.

314
00:16:26,600 --> 00:16:31,520
So if everyone's here on my repo...

315
00:16:31,520 --> 00:16:34,040
Is anyone not on my repo right now?

316
00:16:34,040 --> 00:16:35,840
Okay, perfect.

317
00:16:35,840 --> 00:16:40,480
So just go to GitHub, and it's basically this.

318
00:16:40,480 --> 00:16:44,760
This is the username, and this is the repo over here.

319
00:16:44,760 --> 00:16:45,960
Awesome.

320
00:16:45,960 --> 00:16:48,240
So this is it today.

321
00:16:48,240 --> 00:16:49,240
It's basically...

322
00:16:49,240 --> 00:16:53,200
Like, you could think of it as a big tutorial, a big blog post, but it's basically just 17

323
00:16:53,200 --> 00:16:54,200
small steps.

324
00:16:54,200 --> 00:16:55,200
We're going to do them all together.

325
00:16:55,200 --> 00:16:59,040
Hopefully, stay with me for the first couple of four or five steps, and from there, you

326
00:16:59,040 --> 00:17:00,040
could go at your own speed.

327
00:17:00,040 --> 00:17:01,040
You can go as fast as you want.

328
00:17:01,040 --> 00:17:04,520
And I think if you go fast, you could do this in around 20 or 30 minutes, and you're free

329
00:17:04,520 --> 00:17:05,520
to go.

330
00:17:05,520 --> 00:17:08,200
I mean, you don't have to hold you here for a couple of hours.

331
00:17:08,520 --> 00:17:11,760
But you can go with me at my slow pace, and we can have a good time.

332
00:17:11,760 --> 00:17:13,240
So perfect.

333
00:17:13,240 --> 00:17:16,120
Let's start with prerequisites.

334
00:17:16,120 --> 00:17:20,640
Number one, I want you to git clone this repository and have this locally.

335
00:17:20,640 --> 00:17:21,640
Why?

336
00:17:21,640 --> 00:17:24,480
Because it has a few YAMLs that are going to help you to run everything, and you don't

337
00:17:24,480 --> 00:17:30,680
have to copy paste a lot of boilerplate, basically.

338
00:17:30,680 --> 00:17:33,920
So just clone this, and give me a thumbs up when you're done.

339
00:17:33,920 --> 00:17:35,360
Okay, awesome.

340
00:17:35,360 --> 00:17:38,040
Most of the class.

341
00:17:38,040 --> 00:17:40,920
We're going to take a couple seconds so we can move on.

342
00:17:40,920 --> 00:17:44,800
And while we wait, I want to ask you a couple more questions about your experience in Python,

343
00:17:44,800 --> 00:17:47,760
Flask, global telemetry, I guess, in general.

344
00:17:47,760 --> 00:17:50,280
Who here is in their first year of learning Python?

345
00:17:50,280 --> 00:17:51,960
Wow, nobody.

346
00:17:51,960 --> 00:17:53,280
That's amazing.

347
00:17:53,280 --> 00:17:55,280
Who here is five years or less?

348
00:17:55,280 --> 00:17:56,280
Raise your hand.

349
00:17:56,280 --> 00:17:58,560
Okay, small number.

350
00:17:58,560 --> 00:18:00,760
And who here is 10 years or less?

351
00:18:00,760 --> 00:18:02,360
Okay.

352
00:18:02,360 --> 00:18:04,160
Is anyone here over 10 years?

353
00:18:04,160 --> 00:18:05,160
Wow, veterans.

354
00:18:05,160 --> 00:18:07,120
Thank you so much for coming.

355
00:18:07,120 --> 00:18:08,120
I really appreciate it.

356
00:18:08,120 --> 00:18:11,840
I have a lot to learn from you, so I'm going to ask you a couple more questions at the

357
00:18:11,840 --> 00:18:12,840
end.

358
00:18:12,840 --> 00:18:15,600
And who here has used Flask before?

359
00:18:15,600 --> 00:18:17,280
Either at work or at home?

360
00:18:17,280 --> 00:18:19,320
Okay, almost the entire class.

361
00:18:19,320 --> 00:18:20,320
Amazing.

362
00:18:20,320 --> 00:18:23,120
Does anyone here not know what Flask is?

363
00:18:23,120 --> 00:18:24,960
Okay.

364
00:18:24,960 --> 00:18:29,600
And open telemetry and observability, has anyone worked with these or is familiar with

365
00:18:29,600 --> 00:18:31,400
these before they came in today?

366
00:18:31,400 --> 00:18:32,400
Yes.

367
00:18:32,400 --> 00:18:48,520
Did you guys just talk one sentence, I guess, about your experience?

368
00:18:48,520 --> 00:18:49,520
That's amazing.

369
00:18:49,520 --> 00:18:50,520
Yes?

370
00:18:50,520 --> 00:18:51,520
Oh, wow.

371
00:18:51,520 --> 00:18:52,520
Wow, okay.

372
00:18:52,520 --> 00:19:01,280
So this is a bit more in the future, I guess.

373
00:19:02,280 --> 00:19:07,280
And anyone on this side?

374
00:19:07,280 --> 00:19:10,280
Yeah, definitely.

375
00:19:10,280 --> 00:19:11,280
Okay.

376
00:19:11,280 --> 00:19:14,280
Anyone else want to share?

377
00:19:14,280 --> 00:19:15,280
Okay, perfect.

378
00:19:15,280 --> 00:19:18,440
So let's jump right in.

379
00:19:18,440 --> 00:19:23,760
Step one, just go into this directory, collect your demo, CD into it.

380
00:19:23,760 --> 00:19:27,400
On Windows, I'm not sure, so I'm going to be using only Mac and Linux commands, okay?

381
00:19:27,400 --> 00:19:30,080
I'm sorry, guys.

382
00:19:30,080 --> 00:19:34,280
And step two, I want us, because we're going to be writing some really, really good code

383
00:19:34,280 --> 00:19:38,280
today, to be able to write good code, you have to read good code.

384
00:19:38,280 --> 00:19:41,440
So we're going to be reading some code just a tiny bit, just to understand exactly what

385
00:19:41,440 --> 00:19:42,440
we're doing here.

386
00:19:42,440 --> 00:19:44,880
And then from there, we're going to go on to writing, okay?

387
00:19:44,880 --> 00:19:48,080
So let's start with Docker Compose.yaml.

388
00:19:48,080 --> 00:19:52,040
And I have it right here.

389
00:19:52,040 --> 00:19:53,480
And if we can close this.

390
00:19:53,480 --> 00:19:55,320
Basically, Docker Compose.

391
00:19:55,320 --> 00:19:59,240
Does anyone here not familiar with Docker or Docker Compose?

392
00:19:59,240 --> 00:20:00,240
Okay.

393
00:20:00,240 --> 00:20:02,840
So the entire class is familiar with Docker.

394
00:20:02,840 --> 00:20:03,840
Yeah?

395
00:20:03,840 --> 00:20:04,840
You're unfamiliar?

396
00:20:04,840 --> 00:20:10,240
Does anyone want to explain it in a couple words, just maybe four or five words?

397
00:20:10,240 --> 00:20:11,640
Okay.

398
00:20:11,640 --> 00:20:15,720
So essentially, you could think of it as a tiny little VM that runs inside your computer.

399
00:20:15,720 --> 00:20:21,440
And you're able to run almost any operating system or any little, I guess, base, they're

400
00:20:21,440 --> 00:20:22,680
called images.

401
00:20:22,680 --> 00:20:25,680
That's what the word we're going to be using.

402
00:20:25,680 --> 00:20:29,040
Oh, okay, perfect.

403
00:20:29,040 --> 00:20:30,360
So that's exactly what it is.

404
00:20:30,360 --> 00:20:31,360
That's what Docker is.

405
00:20:31,360 --> 00:20:35,240
And Docker Compose is just a way of running a bunch of images all at once on your computer.

406
00:20:35,240 --> 00:20:36,240
That's all it is.

407
00:20:36,240 --> 00:20:37,240
So perfect.

408
00:20:37,240 --> 00:20:40,200
We're going to be running a few images together.

409
00:20:40,200 --> 00:20:41,400
The first one is Jaeger.

410
00:20:41,400 --> 00:20:43,560
This one is for distributed traces.

411
00:20:43,560 --> 00:20:48,780
And we're going to be using Jaeger tracing slash all in one at the latest version.

412
00:20:48,780 --> 00:20:50,800
And we're going to be using at these ports.

413
00:20:50,800 --> 00:20:52,600
This port is the port for the UI.

414
00:20:52,600 --> 00:20:55,040
When you go to your browser and you're going to be looking at it, you're going to go to

415
00:20:55,040 --> 00:20:58,280
this port, 16686.

416
00:20:58,280 --> 00:21:01,840
The following two ports are only for accepting traces.

417
00:21:01,840 --> 00:21:03,880
So it's going to set up a little server on your computer.

418
00:21:03,880 --> 00:21:06,160
It's going to be listening for traces on these two ports.

419
00:21:06,160 --> 00:21:07,160
Okay?

420
00:21:07,160 --> 00:21:10,200
We'll come back to these later.

421
00:21:10,200 --> 00:21:11,200
Any questions on this?

422
00:21:11,200 --> 00:21:12,200
Go ahead.

423
00:21:12,200 --> 00:21:20,720
These two are the default, but it has a lot more default.

424
00:21:20,720 --> 00:21:25,320
It has also 4317, 4318, and it has a couple.

425
00:21:25,320 --> 00:21:26,720
You can configure it however you'd like.

426
00:21:26,720 --> 00:21:30,760
You can also reroute it to any other port you like.

427
00:21:30,760 --> 00:21:31,760
Anything else?

428
00:21:31,760 --> 00:21:32,760
Okay.

429
00:21:32,760 --> 00:21:33,760
That's nice.

430
00:21:33,760 --> 00:21:38,760
So, Zipkin, also for distributed traces.

431
00:21:38,760 --> 00:21:42,560
We're going to be using this image, openzipkin slash zipkin at the latest.

432
00:21:42,560 --> 00:21:43,560
Okay?

433
00:21:43,560 --> 00:21:45,240
And zipkin runs only on one port.

434
00:21:45,240 --> 00:21:49,800
This is the same port for listening for spans and everything else, as well as the UI.

435
00:21:49,800 --> 00:21:53,120
You're going to access it at this port, 9411.

436
00:21:53,120 --> 00:21:56,520
Any questions on zipkin?

437
00:21:56,520 --> 00:21:58,040
And the next is OpenTelemetryCollector.

438
00:21:58,040 --> 00:21:59,040
Okay?

439
00:21:59,040 --> 00:22:07,580
So this is the exact same collector that we saw over here, the exact same one, as we saw.

440
00:22:07,580 --> 00:22:11,920
And the collector is...

441
00:22:11,920 --> 00:22:14,520
So what we're going to be doing here is notice that the volume...

442
00:22:14,520 --> 00:22:18,160
Does anyone here not know what a volume is?

443
00:22:18,160 --> 00:22:19,480
Okay?

444
00:22:19,480 --> 00:22:20,600
Perfect.

445
00:22:21,480 --> 00:22:26,640
So we're going to be setting our local file, otelcollectorconfig.yml, and we're going to

446
00:22:26,640 --> 00:22:32,360
be throwing it inside of this container at this path, slash UTC slash otelcollectorconfig.yml.

447
00:22:32,360 --> 00:22:33,360
Okay?

448
00:22:33,360 --> 00:22:38,760
And from there, we're going to say, hey, when you run my container, please set the config

449
00:22:38,760 --> 00:22:41,640
equal to this exact same file that I just threw in the container.

450
00:22:41,640 --> 00:22:42,640
Okay?

451
00:22:42,640 --> 00:22:47,840
So it's our easy way of saying, my custom configuration, I want this inside of the container.

452
00:22:47,840 --> 00:22:50,240
Is anyone confused about this part?

453
00:22:50,240 --> 00:22:53,840
Okay, moving on.

454
00:22:53,840 --> 00:22:55,920
And we've got a bunch of ports open.

455
00:22:55,920 --> 00:23:00,200
Don't worry about most of these, but the one you should know is 4317.

456
00:23:00,200 --> 00:23:04,240
This is where the collector is going to be listening for income expands and traces.

457
00:23:04,240 --> 00:23:05,240
Okay?

458
00:23:05,240 --> 00:23:06,240
4317.

459
00:23:06,240 --> 00:23:10,740
And we're going to be using this port a lot today, actually.

460
00:23:10,740 --> 00:23:13,600
It depends on Jaeger and zipkin to be running.

461
00:23:13,600 --> 00:23:19,080
So first, those are going to be up and running, and then the collector will go up.

462
00:23:19,080 --> 00:23:21,120
And then finally, Prometheus for metrics.

463
00:23:21,120 --> 00:23:22,120
Okay?

464
00:23:22,120 --> 00:23:26,560
We're going to be running this image from Prometheus, Prometheus at the latest version,

465
00:23:26,560 --> 00:23:29,040
and we're doing the exact same thing with our volumes.

466
00:23:29,040 --> 00:23:34,440
We're going to be saying, my local file, Prometheus.yml, I want it to be thrown inside of this container

467
00:23:34,440 --> 00:23:39,000
at this path, slash UTC slash Prometheus slash Prometheus.yml.

468
00:23:39,000 --> 00:23:40,000
Okay?

469
00:23:40,000 --> 00:23:41,260
And same port.

470
00:23:41,260 --> 00:23:45,180
This port is for accessing the UI, and we're going to access it pretty soon.

471
00:23:45,180 --> 00:23:48,220
Any questions at all about Docker and Compose?

472
00:23:48,220 --> 00:23:49,220
Go ahead.

473
00:23:49,220 --> 00:24:00,060
It's why it's under the collector asking?

474
00:24:00,060 --> 00:24:06,180
And it's a good question, because we'll get into actually in a minute or two.

475
00:24:06,180 --> 00:24:07,940
And I just want to go over the...

476
00:24:07,940 --> 00:24:09,580
So any other questions about it?

477
00:24:09,580 --> 00:24:10,700
Okay.

478
00:24:10,700 --> 00:24:14,180
So I want to get into the OTL collector config that we're talking about.

479
00:24:14,180 --> 00:24:17,620
And this actually took me a bit to learn, and I kind of didn't understand that at first

480
00:24:17,620 --> 00:24:19,300
why it was the way it was.

481
00:24:19,300 --> 00:24:22,060
But when you look at the architecture, it actually makes a lot of sense.

482
00:24:22,060 --> 00:24:26,860
It's comprised of three things, the receiver, the processor, and the exporter.

483
00:24:26,860 --> 00:24:27,900
That's all it is.

484
00:24:27,900 --> 00:24:29,880
It's only three things.

485
00:24:29,880 --> 00:24:35,100
And you have to clearly explicitly define all of those in your OTL collector config.

486
00:24:35,100 --> 00:24:38,860
So we're going to say, I want to receive spans by this protocol.

487
00:24:38,900 --> 00:24:42,100
OTLP means Open Telemetry Protocol.

488
00:24:42,100 --> 00:24:43,820
It's a standard open telemetry.

489
00:24:43,820 --> 00:24:44,820
And I wanted gRPC.

490
00:24:44,820 --> 00:24:51,580
gRPC is a Google protocol for compressing requests before they're being sent out.

491
00:24:51,580 --> 00:24:54,180
Any questions on the receiver?

492
00:24:54,180 --> 00:24:55,420
Perfect.

493
00:24:55,420 --> 00:24:56,780
The processor, very simple.

494
00:24:56,780 --> 00:24:58,380
We're going to use the standard batch one.

495
00:24:58,380 --> 00:25:01,020
For almost everything you're going to do, you're going to use the standard batch one.

496
00:25:01,020 --> 00:25:05,540
You could have some configurations if you'd like, but we're not going to do anything crazy.

497
00:25:05,540 --> 00:25:08,580
And then for your exporters, we're going to have to explicitly say exactly where we want

498
00:25:08,580 --> 00:25:10,180
to export it to.

499
00:25:10,180 --> 00:25:13,700
The first one is Zipkin at this endpoint.

500
00:25:13,700 --> 00:25:17,500
So go to the Zipkin container.

501
00:25:17,500 --> 00:25:20,140
Go to this port, 9411, where it's listening.

502
00:25:20,140 --> 00:25:25,900
And at this path, it's going to be listening for spans, slash API, slash V2, slash spans.

503
00:25:25,900 --> 00:25:32,900
Almost every single telemetry backend will have some slash V1, slash V2, slash something

504
00:25:32,900 --> 00:25:36,900
path at the end of it.

505
00:25:36,900 --> 00:25:38,980
Any questions on Zipkin?

506
00:25:38,980 --> 00:25:40,380
Perfect.

507
00:25:40,380 --> 00:25:41,780
For Jaeger, same thing.

508
00:25:41,780 --> 00:25:48,540
We're going to be saying send it to this endpoint, the Jaeger all-in-one container at port 14250.

509
00:25:48,540 --> 00:25:53,740
And the TLS insecure true just means that even if there's no SSL and there's no encryption,

510
00:25:53,740 --> 00:25:54,740
it's okay.

511
00:25:54,740 --> 00:25:57,460
Just make the connection happen and just make it work.

512
00:25:57,460 --> 00:26:02,940
And finally, Prometheus, we're going to be sending it to this endpoint, 000, which is

513
00:26:02,940 --> 00:26:07,060
just localhost at 8889.

514
00:26:07,060 --> 00:26:08,860
Any questions on Prometheus?

515
00:26:08,860 --> 00:26:11,180
Okay, perfectly.

516
00:26:11,180 --> 00:26:14,380
And finally, we're going to be using the built-in logging one.

517
00:26:14,380 --> 00:26:18,020
So this just means that the collector itself is going to be logging everything that comes

518
00:26:18,020 --> 00:26:19,020
in.

519
00:26:19,020 --> 00:26:20,020
Okay?

520
00:26:20,020 --> 00:26:25,900
Extensions, we shouldn't worry about them today, but ideally, if you're running your

521
00:26:25,900 --> 00:26:30,100
own application, you're starting from tomorrow when I'm not here, you should use the health

522
00:26:30,100 --> 00:26:31,100
check one.

523
00:26:31,100 --> 00:26:33,500
It's pretty good.

524
00:26:33,500 --> 00:26:37,860
But all of this, when you write your file, it's kind of useless if you don't define it

525
00:26:37,860 --> 00:26:39,140
in your service.

526
00:26:39,140 --> 00:26:42,060
The service is really what's going to be run at the very end.

527
00:26:42,060 --> 00:26:44,140
So in the service, you define whatever extensions you like.

528
00:26:44,140 --> 00:26:45,140
You can run...

529
00:26:45,140 --> 00:26:47,740
We could remove the extensions here and it wouldn't have a major effect on us.

530
00:26:47,740 --> 00:26:53,560
But you have to say within the service, I want this pipeline for traces and for metrics.

531
00:26:53,560 --> 00:26:54,560
So I want...

532
00:26:54,560 --> 00:26:57,580
For traces, I want to receive them with my open telemetry protocol.

533
00:26:57,580 --> 00:26:59,580
I want to process them with batching.

534
00:26:59,580 --> 00:27:04,580
And then I want to export it to these three places, logging, zipkin, and jaeger.

535
00:27:04,580 --> 00:27:05,580
Okay?

536
00:27:05,580 --> 00:27:08,100
And for metrics, almost the same thing.

537
00:27:08,100 --> 00:27:09,980
I want to receive it with OTP.

538
00:27:09,980 --> 00:27:11,780
I want to process it with batching.

539
00:27:11,780 --> 00:27:16,180
But I'm going to export it to these two places, logging and Prometheus.

540
00:27:16,180 --> 00:27:18,140
Okay?

541
00:27:18,140 --> 00:27:23,060
So zipkin and jaeger for tracing, Prometheus for metrics.

542
00:27:23,060 --> 00:27:24,060
Any question?

543
00:27:24,060 --> 00:27:25,060
Okay.

544
00:27:25,060 --> 00:27:26,060
Perfect.

545
00:27:27,020 --> 00:27:29,020
So we can move on to Prometheus.yml.

546
00:27:29,020 --> 00:27:31,220
This is the last one.

547
00:27:31,220 --> 00:27:33,100
So Prometheus works a bit differently.

548
00:27:33,100 --> 00:27:34,420
It's going to...

549
00:27:34,420 --> 00:27:38,460
Instead of pushing to Prometheus, which we're going to do also, but it's also going to pull

550
00:27:38,460 --> 00:27:39,680
from the collector.

551
00:27:39,680 --> 00:27:42,660
So that's why we're going to basically be scraping with Prometheus.

552
00:27:42,660 --> 00:27:43,660
Okay?

553
00:27:43,660 --> 00:27:48,760
So we're going to say, go to this container, OTA collector, and every 10 seconds, I want

554
00:27:48,760 --> 00:27:51,940
you to scrape these two static targets.

555
00:27:51,940 --> 00:27:56,220
OTA collector at port 8889 and OTA collector at port 8888.

556
00:27:56,220 --> 00:27:57,220
Okay?

557
00:27:57,220 --> 00:27:58,220
Does that answer your question?

558
00:27:58,220 --> 00:28:02,980
Because Prometheus is going to be pulling instead of pushing.

559
00:28:02,980 --> 00:28:09,940
So any questions at all about these three files we just went over?

560
00:28:09,940 --> 00:28:15,140
Because each one has a slightly different reason to be.

561
00:28:15,140 --> 00:28:20,880
Basically we can see over here, this one is Prometheus metrics exposed by the collector.

562
00:28:20,880 --> 00:28:23,800
And this is Prometheus exported itself metrics.

563
00:28:23,800 --> 00:28:27,040
They're slightly different, but we can read up on more of that later.

564
00:28:27,040 --> 00:28:30,440
It doesn't really have a major effect.

565
00:28:30,440 --> 00:28:31,440
Anything else?

566
00:28:31,440 --> 00:28:32,440
Okay.

567
00:28:32,440 --> 00:28:33,440
Perfect.

568
00:28:33,440 --> 00:28:38,080
So back to the readme we go.

569
00:28:38,080 --> 00:28:43,640
And I have just one question for the class.

570
00:28:43,640 --> 00:28:45,200
Over here, this side note.

571
00:28:45,200 --> 00:28:50,040
So the main difference from the computer's perspective, not from our perspective.

572
00:28:50,040 --> 00:28:51,720
Even you were the computer.

573
00:28:51,720 --> 00:28:56,760
The main difference between Jaeger and Zipkin is that Zipkin runs as one process.

574
00:28:56,760 --> 00:29:02,040
This includes the collector that's listening for spans, the storage of them, the querying

575
00:29:02,040 --> 00:29:06,800
service, the UI, and they also did even list a few amongst others.

576
00:29:06,800 --> 00:29:07,800
Okay?

577
00:29:07,800 --> 00:29:10,640
All of this runs in one single process.

578
00:29:10,640 --> 00:29:12,640
Okay?

579
00:29:12,640 --> 00:29:14,040
Jaeger is a bit newer than Zipkin.

580
00:29:14,040 --> 00:29:15,960
It came out more recently.

581
00:29:15,960 --> 00:29:19,760
And they introduced this concept of saying, no, we're not going to do it all in one process.

582
00:29:19,760 --> 00:29:23,200
Each one is going to be a different process.

583
00:29:23,200 --> 00:29:28,400
One being the collector, another being the UI, another one is the query service, and

584
00:29:28,400 --> 00:29:29,480
so on.

585
00:29:29,480 --> 00:29:34,440
And we can even see it over here in our files when we say in Docker Compose, for Zipkin,

586
00:29:34,440 --> 00:29:35,880
we just run the Zipkin image.

587
00:29:35,880 --> 00:29:39,820
But for Jaeger, we have to say we want specifically the all in one.

588
00:29:39,820 --> 00:29:42,220
Every single process, I want them all together.

589
00:29:42,220 --> 00:29:45,420
Can anyone guess or tell me why that is?

590
00:29:45,420 --> 00:29:47,120
Why did Jaeger split it up?

591
00:29:47,120 --> 00:29:48,120
Go ahead.

592
00:29:48,120 --> 00:29:49,120
Scaling.

593
00:29:49,120 --> 00:29:50,120
Scaling.

594
00:29:50,120 --> 00:29:51,120
Perfect.

595
00:29:51,120 --> 00:29:52,360
It's built more for distributed systems.

596
00:29:52,360 --> 00:29:53,360
That's exactly it.

597
00:29:53,360 --> 00:29:56,480
You can have each single process running on a different computer.

598
00:29:56,480 --> 00:29:58,400
That's exactly the right reason.

599
00:29:58,400 --> 00:29:59,720
Good job.

600
00:29:59,720 --> 00:30:03,120
So any other questions so far?

601
00:30:03,120 --> 00:30:06,400
Awesome.

602
00:30:06,400 --> 00:30:08,240
You can skip this one.

603
00:30:08,240 --> 00:30:12,640
And when you enter, you should be inside of the directory already, collector demo.

604
00:30:12,640 --> 00:30:16,600
Just run Docker Compose up and raise all of the images together.

605
00:30:17,280 --> 00:30:18,280
I'll do that with you.

606
00:30:24,680 --> 00:30:26,680
So pretty viewable.

607
00:30:32,360 --> 00:30:34,360
And Docker Compose up.

608
00:30:36,840 --> 00:30:39,160
And cannot connect to Docker daemon.

609
00:30:39,160 --> 00:30:42,360
Does anyone know what you're doing here?

610
00:30:42,360 --> 00:30:43,360
Nobody?

611
00:30:43,360 --> 00:30:44,360
Then I'll tell the class.

612
00:30:47,560 --> 00:30:48,560
Start Docker.

613
00:30:48,560 --> 00:30:49,560
Exactly.

614
00:30:49,560 --> 00:30:51,560
So we have it up and running.

615
00:30:51,560 --> 00:30:53,560
It's starting.

616
00:30:58,760 --> 00:30:59,760
Okay.

617
00:30:59,760 --> 00:31:00,760
Perfect.

618
00:31:00,760 --> 00:31:02,760
How's this up?

619
00:31:02,760 --> 00:31:04,760
Let's delete it.

620
00:31:04,760 --> 00:31:05,760
Okay.

621
00:31:05,760 --> 00:31:06,760
Perfect.

622
00:31:06,760 --> 00:31:08,760
So let's run that again.

623
00:31:08,760 --> 00:31:10,760
Docker Compose up.

624
00:31:10,760 --> 00:31:12,760
And we should see the logs for everything come in.

625
00:31:12,760 --> 00:31:13,760
This is Zipkin.

626
00:31:13,760 --> 00:31:15,760
This is the collector.

627
00:31:16,760 --> 00:31:18,760
We have Jaeger over here.

628
00:31:18,760 --> 00:31:20,760
And so on.

629
00:31:20,760 --> 00:31:21,760
And we should see Prometheus.

630
00:31:21,760 --> 00:31:22,760
Prometheus as well.

631
00:31:22,760 --> 00:31:23,760
Perfect.

632
00:31:23,760 --> 00:31:25,280
So our logs are ready.

633
00:31:25,280 --> 00:31:30,560
That means the collector is up and running along with Jaeger and Zipkin and Prometheus.

634
00:31:30,560 --> 00:31:31,560
They're all up and running.

635
00:31:31,560 --> 00:31:33,560
They're just listening and waiting for spans to come in.

636
00:31:33,560 --> 00:31:37,960
So at this point, you can go at your own pace.

637
00:31:37,960 --> 00:31:39,960
You can go as fast or as slow as you want.

638
00:31:39,960 --> 00:31:40,960
But I'm here for everyone.

639
00:31:40,960 --> 00:31:42,960
I'll go at the slowest pace possible.

640
00:31:42,960 --> 00:31:44,960
So good luck to everyone if you're going fast.

641
00:31:44,960 --> 00:31:45,960
Yes?

642
00:31:46,320 --> 00:31:51,320
I did a lawyer this morning and it took about eight minutes to download everything.

643
00:31:51,320 --> 00:31:54,320
For me, so it's probably just a little more.

644
00:31:54,320 --> 00:31:55,320
You finished everything?

645
00:31:55,320 --> 00:31:57,320
Oh, it's downloaded, yeah, but it took eight minutes.

646
00:31:57,320 --> 00:31:58,320
What's downloading?

647
00:31:58,320 --> 00:32:00,320
For all the images.

648
00:32:00,320 --> 00:32:02,320
Oh, wow.

649
00:32:02,320 --> 00:32:03,320
Just the images?

650
00:32:03,320 --> 00:32:04,320
Yeah.

651
00:32:04,320 --> 00:32:05,320
Okay, okay.

652
00:32:05,320 --> 00:32:10,320
I'll wait for the images to be downloaded.

653
00:32:10,320 --> 00:32:13,320
You have a what?

654
00:32:13,680 --> 00:32:18,680
Config file, not readable.

655
00:32:18,680 --> 00:32:21,680
You want me to take a look?

656
00:32:21,680 --> 00:32:22,680
Okay.

657
00:32:22,680 --> 00:32:33,000
Sure, just give me a thumbs up when everything's up and running and you have all the images.

658
00:32:33,000 --> 00:32:34,000
So a couple.

659
00:32:34,000 --> 00:32:35,000
I'll wait for everyone else.

660
00:32:35,000 --> 00:32:40,880
Thanks for your patience, guys.

661
00:32:40,880 --> 00:32:47,360
It turns out that the link 0, 0, 0 at the port of the telemetry backend, it might not

662
00:32:47,360 --> 00:32:48,760
work if you're on Windows.

663
00:32:48,760 --> 00:32:52,800
You might have to put localhost instead or 127, 0, 0, 0, 1 yourself.

664
00:32:52,800 --> 00:32:53,800
So sorry about that, guys.

665
00:32:53,800 --> 00:32:55,960
Sorry about the inconvenience.

666
00:32:55,960 --> 00:33:02,440
So once everything's working with Docker Compose, you should be able to access it here.

667
00:33:02,440 --> 00:33:06,600
I can actually push the changes locally and push it up.

668
00:33:07,320 --> 00:33:12,400
I mean, as long as you have the tab open once, you can just keep it open.

669
00:33:12,400 --> 00:33:16,800
Downloading, we can move on because the next steps don't require this.

670
00:33:16,800 --> 00:33:23,360
So move on to step six and let me know if I can slow down and help anyone else.

671
00:33:23,360 --> 00:33:25,720
So step six is our base case.

672
00:33:25,720 --> 00:33:29,480
This will be our normal Python application with no instrumentation with nothing else.

673
00:33:29,480 --> 00:33:34,160
We're just going to create this file once and we're not going to edit it or touch it

674
00:33:34,160 --> 00:33:35,160
again.

675
00:33:35,160 --> 00:33:36,160
Okay?

676
00:33:36,200 --> 00:33:38,560
So we're going to create a Python file by this name.

677
00:33:38,560 --> 00:33:43,320
So just to make sure I'm not mistyping, I'm just going to copy paste here.

678
00:33:43,320 --> 00:33:46,000
And I'm going to do command D to split the screen.

679
00:33:46,000 --> 00:33:49,080
And I'm going to be doing this a couple more times because it's very, very helpful and

680
00:33:49,080 --> 00:33:52,240
useful.

681
00:33:52,240 --> 00:33:59,600
So in our directory, I'm going to be creating this file with touch.

682
00:33:59,600 --> 00:34:14,760
And then over here, just cleaning up a little bit.

683
00:34:14,760 --> 00:34:19,240
So we're going to be repeating this step.

684
00:34:19,240 --> 00:34:23,640
We're going to create our file with touch.

685
00:34:24,040 --> 00:34:27,080
Once we have that file, we'll go in.

686
00:34:27,080 --> 00:34:29,720
We'll just copy exactly as it is.

687
00:34:29,720 --> 00:34:34,800
Does anyone not understand what this file does?

688
00:34:34,800 --> 00:34:36,400
Can someone please raise your hand and explain?

689
00:34:36,400 --> 00:34:37,400
You don't even have to raise your hand.

690
00:34:37,400 --> 00:34:40,400
Just explain to me exactly what this file does.

691
00:34:40,400 --> 00:34:43,400
Yeah, exactly.

692
00:34:43,400 --> 00:34:46,400
Exactly.

693
00:34:46,400 --> 00:34:53,400
I couldn't have said it better myself.

694
00:34:53,400 --> 00:34:58,960
It sets up an API with two endpoints, slash and slash error.

695
00:34:58,960 --> 00:35:00,360
That's all it does.

696
00:35:00,360 --> 00:35:04,320
For slash, it will return hello world from our plain Flask app.

697
00:35:04,320 --> 00:35:11,960
In slash error, we'll do some arithmetic that's a bit hard for the computer to do.

698
00:35:11,960 --> 00:35:15,400
And we're going to be running this locally at port 5000.

699
00:35:15,400 --> 00:35:16,400
I'm not sure about Windows.

700
00:35:16,400 --> 00:35:21,480
If you have to change this to localhost or 127.001, then please feel free to do so.

701
00:35:21,480 --> 00:35:24,480
But on Mac and Unix and Linux, it should work.

702
00:35:24,560 --> 00:35:45,560
Okay, I understand.

703
00:35:45,560 --> 00:35:46,560
So we'll do that when we get there.

704
00:35:46,560 --> 00:35:48,560
We'll change it for the Windows users.

705
00:35:48,560 --> 00:35:50,560
We'll change it to the right thing.

706
00:35:50,640 --> 00:35:54,640
So in our file, I'm just going to be dumping this all in.

707
00:35:54,640 --> 00:35:56,640
And that's it.

708
00:35:56,640 --> 00:35:59,640
And let's install our dependencies.

709
00:35:59,640 --> 00:36:01,640
The only thing we have is Flask.

710
00:36:04,640 --> 00:36:06,640
So let's clear this.

711
00:36:06,640 --> 00:36:08,640
I'm going to be using a virtual environment.

712
00:36:08,640 --> 00:36:09,640
You don't have to.

713
00:36:09,640 --> 00:36:10,640
If you don't know what it is, it's okay.

714
00:36:10,640 --> 00:36:11,640
You don't have to worry about it.

715
00:36:11,640 --> 00:36:13,640
Just install it normally as you would.

716
00:36:20,640 --> 00:36:33,640
So I'm installing Flask, our only requirement up till now.

717
00:36:33,640 --> 00:36:37,640
And it's installed.

718
00:36:37,640 --> 00:36:41,640
And let's go back and do this exactly as it says.

719
00:36:41,640 --> 00:36:43,640
Open two terminals.

720
00:36:43,640 --> 00:36:45,640
So make sure you have two empty terminals.

721
00:36:45,640 --> 00:36:48,640
You have your collector here and one more.

722
00:36:48,720 --> 00:36:50,720
So I have top and bottom.

723
00:36:50,720 --> 00:36:52,720
You could have it side to side.

724
00:36:52,720 --> 00:36:56,720
You could have it diagonal and swirly and whatever you like.

725
00:36:56,720 --> 00:37:02,720
So on one of them, we're going to be running our Flask base.

726
00:37:02,720 --> 00:37:06,720
And I have to do allow to accept incoming connections.

727
00:37:06,720 --> 00:37:09,720
And we're up and running.

728
00:37:09,720 --> 00:37:11,720
Of course, this will make the collector a bit smaller.

729
00:37:11,720 --> 00:37:12,720
We don't really need to look at it.

730
00:37:12,720 --> 00:37:14,720
It'll just be for fun.

731
00:37:14,720 --> 00:37:17,720
And we see that we have exactly this.

732
00:37:17,800 --> 00:37:20,800
On localhost port 5000, we have these two endpoints.

733
00:37:20,800 --> 00:37:26,800
So we could curled localhost.

734
00:37:26,800 --> 00:37:31,800
But what it really is, is has anyone near not used curled before

735
00:37:31,800 --> 00:37:33,800
and not know what it is?

736
00:37:33,800 --> 00:37:35,800
Okay, perfect.

737
00:37:35,800 --> 00:37:37,800
So we'll just do as it is.

738
00:37:37,800 --> 00:37:40,800
We're calling localhost at port 5000.

739
00:37:40,800 --> 00:37:42,800
Slash.

740
00:37:42,800 --> 00:37:45,800
And we'll return our string, hello world.

741
00:37:45,880 --> 00:37:47,880
You could do with that the slash as well.

742
00:37:47,880 --> 00:37:49,880
It's the exact same thing.

743
00:37:49,880 --> 00:37:50,880
Hello world.

744
00:37:50,880 --> 00:37:54,880
We're able to see over here that two connections came in,

745
00:37:54,880 --> 00:37:59,880
a get from this address, and they returned the 200 for both of them.

746
00:37:59,880 --> 00:38:04,880
When we reach an endpoint we don't know, for example, unknown,

747
00:38:04,880 --> 00:38:06,880
we'll get this weird HTML.

748
00:38:06,880 --> 00:38:07,880
And that's because it's...

749
00:38:07,880 --> 00:38:10,880
Can anyone tell me why it returns HTML?

750
00:38:10,880 --> 00:38:13,880
Why does it not just return an error message?

751
00:38:13,960 --> 00:38:15,960
That's default function.

752
00:38:15,960 --> 00:38:16,960
Again?

753
00:38:16,960 --> 00:38:19,960
That's default function for my class right there.

754
00:38:19,960 --> 00:38:20,960
Exactly.

755
00:38:20,960 --> 00:38:21,960
But why is it HTML?

756
00:38:21,960 --> 00:38:24,960
Why is it not just a string that says, hey, here's your error

757
00:38:24,960 --> 00:38:25,960
with the stack trace?

758
00:38:25,960 --> 00:38:29,960
It's currently default to say that it's not a track trace.

759
00:38:29,960 --> 00:38:31,960
Oh, okay, okay.

760
00:38:31,960 --> 00:38:35,960
So I think it could change it.

761
00:38:35,960 --> 00:38:36,960
So I don't know.

762
00:38:36,960 --> 00:38:38,960
I didn't know they could change it.

763
00:38:38,960 --> 00:38:42,960
But from what I understood, it's really because it's meant to be opened

764
00:38:43,040 --> 00:38:46,040
in the browser, and now it makes sense that it's HTML.

765
00:38:46,040 --> 00:38:48,040
Oh, it's not found, it's nice and readable,

766
00:38:48,040 --> 00:38:50,040
and it makes much more sense.

767
00:38:50,040 --> 00:38:54,040
So when we reach something we don't know, we get a 404,

768
00:38:54,040 --> 00:38:57,040
and we don't really know why it's known or unknown,

769
00:38:57,040 --> 00:39:00,040
and then when we reach something that we know will cause an error

770
00:39:00,040 --> 00:39:03,040
and the computer will struggle with this one,

771
00:39:03,040 --> 00:39:07,040
we get a big error message, 500 internal server error.

772
00:39:07,040 --> 00:39:09,040
We get a big error stack trace over here.

773
00:39:09,040 --> 00:39:12,040
But let's say, for example, we're looking only at this screen

774
00:39:12,120 --> 00:39:14,120
because you're the user, right, and you reach some website

775
00:39:14,120 --> 00:39:17,120
and you get this 500 internal server error.

776
00:39:17,120 --> 00:39:20,120
I want you to answer a couple questions for me, okay?

777
00:39:22,120 --> 00:39:24,120
One, I want you to tell me what happened.

778
00:39:24,120 --> 00:39:25,120
You're the client, okay?

779
00:39:25,120 --> 00:39:28,120
You only have access to this little pane right here

780
00:39:28,120 --> 00:39:30,120
that we're looking at.

781
00:39:30,120 --> 00:39:33,120
This is all you see.

782
00:39:33,120 --> 00:39:34,120
You know what?

783
00:39:34,120 --> 00:39:35,120
Let's do it even on Chrome.

784
00:39:35,120 --> 00:39:40,120
So we'll go to localhost.port 5000.

785
00:39:40,200 --> 00:39:43,200
It works, and then when we reach here, look at this.

786
00:39:43,200 --> 00:39:45,200
So tell me a few things.

787
00:39:45,200 --> 00:39:47,200
One, what happened?

788
00:39:47,200 --> 00:39:50,200
Two, why did the request fail?

789
00:39:50,200 --> 00:39:51,200
Can anyone tell me?

790
00:39:51,200 --> 00:39:53,200
Just from looking at this, why did the request fail?

791
00:39:55,200 --> 00:39:58,200
Or, so there's no definite answer.

792
00:40:00,200 --> 00:40:02,200
We don't know.

793
00:40:02,200 --> 00:40:03,200
Nobody knows.

794
00:40:03,200 --> 00:40:07,200
I want you to tell me, did the server crash, yes or no?

795
00:40:07,280 --> 00:40:10,280
No?

796
00:40:10,280 --> 00:40:11,280
But it looks like it did.

797
00:40:11,280 --> 00:40:12,280
Internal server error.

798
00:40:12,280 --> 00:40:14,280
It looks like there's an error in the server.

799
00:40:14,280 --> 00:40:17,280
But if you look at the same URL again,

800
00:40:17,280 --> 00:40:19,280
it's still running.

801
00:40:19,280 --> 00:40:22,280
Would you know without retrying?

802
00:40:22,280 --> 00:40:24,280
Without retrying again.

803
00:40:24,280 --> 00:40:25,280
Would you be able to tell me?

804
00:40:25,280 --> 00:40:27,280
But even if it came back correctly,

805
00:40:27,280 --> 00:40:30,280
you wouldn't know if it subsequently crashed either.

806
00:40:30,280 --> 00:40:31,280
True.

807
00:40:31,280 --> 00:40:32,280
You're right.

808
00:40:32,280 --> 00:40:35,280
That's a fair point.

809
00:40:35,360 --> 00:40:36,360
So next question.

810
00:40:36,360 --> 00:40:38,360
Is the server still up and running?

811
00:40:38,360 --> 00:40:40,360
Because it just returned a big server.

812
00:40:40,360 --> 00:40:41,360
You just told me it's overloaded.

813
00:40:41,360 --> 00:40:43,360
You're telling me now it's up and running?

814
00:40:43,360 --> 00:40:44,360
So what is it?

815
00:40:44,360 --> 00:40:46,360
Is it up and running or is it down and crashed?

816
00:40:48,360 --> 00:40:50,360
So nobody knows.

817
00:40:50,360 --> 00:40:53,360
Is my application still working or do I need to restart it now?

818
00:40:53,360 --> 00:40:56,360
Do we need to restart Flask in order for it to work now?

819
00:40:56,360 --> 00:40:57,360
No?

820
00:40:57,360 --> 00:40:59,360
How do you know?

821
00:40:59,360 --> 00:41:00,360
Unknown.

822
00:41:00,360 --> 00:41:01,360
Exactly.

823
00:41:01,360 --> 00:41:03,360
We kind of have no idea.

824
00:41:03,360 --> 00:41:04,360
Nobody knows.

825
00:41:04,440 --> 00:41:07,440
Even when you work over here and you work in the company

826
00:41:07,440 --> 00:41:09,440
and you're able to see the logs,

827
00:41:09,440 --> 00:41:11,440
you also still don't really know.

828
00:41:11,440 --> 00:41:12,440
And it's really not enough.

829
00:41:12,440 --> 00:41:15,440
You only get maybe 20% of the painting

830
00:41:15,440 --> 00:41:17,440
and even that's a bit blurry.

831
00:41:17,440 --> 00:41:20,440
So this way we need open telemetry.

832
00:41:20,440 --> 00:41:22,440
We win this firsthand that we need some observability

833
00:41:22,440 --> 00:41:25,440
to help us debug and figure out exactly what's happening here.

834
00:41:25,440 --> 00:41:30,440
So we'll move on to the manual instrumentation case.

835
00:41:30,440 --> 00:41:33,440
If you see over here in our directory over here,

836
00:41:33,520 --> 00:41:36,520
in our table of contents, we have a few cases.

837
00:41:36,520 --> 00:41:39,520
We started with the base case and this we finished already.

838
00:41:39,520 --> 00:41:41,520
This is just by having a Flask app.

839
00:41:41,520 --> 00:41:43,520
Sometimes it works, sometimes it doesn't work

840
00:41:43,520 --> 00:41:45,520
and we don't really know why.

841
00:41:45,520 --> 00:41:48,520
We're going to go over three main instrumentation cases.

842
00:41:48,520 --> 00:41:49,520
The first one is manual.

843
00:41:49,520 --> 00:41:51,520
This is by hand we're going to be doing it.

844
00:41:51,520 --> 00:41:53,520
The second one is contrib.

845
00:41:53,520 --> 00:41:56,520
The contrib contains all of our favorite extensions

846
00:41:56,520 --> 00:41:59,520
and libraries and support and automatically instruments

847
00:41:59,520 --> 00:42:00,520
all of them for us.

848
00:42:00,520 --> 00:42:02,520
And the last one is the coolest,

849
00:42:02,600 --> 00:42:04,600
the no code instrumentation case.

850
00:42:04,600 --> 00:42:07,600
Okay, so we're going to be jumping straight into the manual

851
00:42:07,600 --> 00:42:09,600
and let's figure out what it means.

852
00:42:09,600 --> 00:42:12,600
So as I said, it's the hardest with the safest

853
00:42:12,600 --> 00:42:14,600
and you have the most control over exactly

854
00:42:14,600 --> 00:42:16,600
what's happening to your application.

855
00:42:16,600 --> 00:42:18,600
So I want you to create this file just by copying

856
00:42:18,600 --> 00:42:21,600
the Flask base into this file.

857
00:42:21,600 --> 00:42:23,600
So we kind of have Flask base in a new file now.

858
00:42:25,600 --> 00:42:28,600
You can do by hand, you can copy all the contents over.

859
00:42:28,600 --> 00:42:31,600
So I'm going to do Ctrl C to end this and get out of it

860
00:42:31,680 --> 00:42:32,680
and running that command.

861
00:42:34,680 --> 00:42:35,680
Is anyone confused about this part?

862
00:42:35,680 --> 00:42:38,680
We're just creating a new file with the same contents.

863
00:42:39,680 --> 00:42:41,680
And we're installing our dependencies.

864
00:42:41,680 --> 00:42:42,680
Just like we talked about earlier,

865
00:42:42,680 --> 00:42:46,680
we're installing directly the API, the SDK

866
00:42:46,680 --> 00:42:47,680
and the exporter that we want.

867
00:42:47,680 --> 00:42:49,680
We want the OTL P exporter.

868
00:42:49,680 --> 00:42:52,680
So we can copy this directly.

869
00:42:54,680 --> 00:42:55,680
PIP to install.

870
00:42:55,680 --> 00:42:58,680
Just three small little things.

871
00:42:58,680 --> 00:42:59,680
Bless you.

872
00:43:01,680 --> 00:43:04,680
It will take a second, but eventually it will finish.

873
00:43:08,680 --> 00:43:11,680
And this is why the manual one is so hard.

874
00:43:11,680 --> 00:43:14,680
Because while they don't call it boilerplate,

875
00:43:14,680 --> 00:43:17,680
I'll call it boilerplate because it's a lot of code

876
00:43:17,680 --> 00:43:19,680
you're just going to have to copy over and over every time.

877
00:43:19,680 --> 00:43:22,680
So we'll do this once and we'll see just how fun it is.

878
00:43:22,680 --> 00:43:23,680
It's not so fun.

879
00:43:23,680 --> 00:43:25,680
Imagine you were typing all of this by hand.

880
00:43:26,680 --> 00:43:29,680
Which I've actually done several many times.

881
00:43:31,680 --> 00:43:36,680
So for the manual, we're going to be closing Flask base.

882
00:43:36,680 --> 00:43:38,680
And I want to go into the manual.

883
00:43:38,680 --> 00:43:41,680
And I'm going to basically just drop all of this at the very top.

884
00:43:41,680 --> 00:43:44,680
And I don't like the disemboll to the bottom.

885
00:43:44,680 --> 00:43:46,680
So I'm kind of moving the import at the top.

886
00:43:46,680 --> 00:43:47,680
That's it.

887
00:43:47,680 --> 00:43:48,680
And that's it.

888
00:43:48,680 --> 00:43:51,680
I have a bunch of imports for OpenTelemetry and Flask.

889
00:43:51,680 --> 00:43:54,680
I've defined exactly what I'm going to send it to.

890
00:43:54,680 --> 00:43:57,680
So, gentlemen in the back, you said that you need to change this 00

891
00:43:57,680 --> 00:43:59,680
on Windows to localhost, correct?

892
00:43:59,680 --> 00:44:00,680
Okay, awesome.

893
00:44:00,760 --> 00:44:01,760
Thank you.

894
00:44:01,760 --> 00:44:04,760
So everyone on Windows, sorry you have to change this by yourself

895
00:44:04,760 --> 00:44:06,760
to localhost for it to work.

896
00:44:06,760 --> 00:44:08,760
But on Linux and Mac it should work.

897
00:44:08,760 --> 00:44:10,760
So we send it to 4317.

898
00:44:10,760 --> 00:44:13,760
Can anyone tell me what's at 4317?

899
00:44:16,760 --> 00:44:17,760
That's the?

900
00:44:17,760 --> 00:44:21,760
The collector, exactly.

901
00:44:21,760 --> 00:44:24,760
Our collector is listening for spans at 4317.

902
00:44:24,760 --> 00:44:26,760
It's waiting for something to come in.

903
00:44:26,760 --> 00:44:28,760
And then it's going to send it back out.

904
00:44:28,840 --> 00:44:31,840
So every service you can define a name, and if you don't say

905
00:44:31,840 --> 00:44:34,840
it's going to be unknown service, we're going to call it

906
00:44:34,840 --> 00:44:36,840
MyFlaskAppInProductionManual.

907
00:44:36,840 --> 00:44:39,840
Okay, so every single case we're going to be doing is going to

908
00:44:39,840 --> 00:44:41,840
have a different service name, and that way we're going to be

909
00:44:41,840 --> 00:44:43,840
able to differentiate at the end.

910
00:44:43,840 --> 00:44:46,840
So you first have to create the resource.

911
00:44:46,840 --> 00:44:49,840
Then you have to create a trace provider with the same resource.

912
00:44:49,840 --> 00:44:52,840
You have to define exactly where you want to export it to.

913
00:44:52,840 --> 00:44:56,840
So I'm going to create it, and the exporter is tied to the processor as well.

914
00:44:56,920 --> 00:44:59,920
So we're going to create one batch span processor that's going to

915
00:44:59,920 --> 00:45:01,920
export it to the console.

916
00:45:01,920 --> 00:45:03,920
This is our standard output.

917
00:45:03,920 --> 00:45:06,920
And we're going to add that processor to our trace provider.

918
00:45:06,920 --> 00:45:09,920
We're going to do the exact same thing for the OTL collector,

919
00:45:09,920 --> 00:45:13,920
although instead of the exporter to the console, we're going to use

920
00:45:13,920 --> 00:45:15,920
OTL-P span exporter.

921
00:45:15,920 --> 00:45:21,920
This is the exporter for native OpenTelemetry protocol spans at

922
00:45:21,920 --> 00:45:25,920
this endpoint that we've just defined, localhost at port 4317.

923
00:45:26,000 --> 00:45:29,000
We add that one as well to the provider.

924
00:45:29,000 --> 00:45:31,000
We set the trace provider.

925
00:45:31,000 --> 00:45:33,000
We finally create the tracer.

926
00:45:33,000 --> 00:45:36,000
And so I would definitely define this as boilerplate, and this is

927
00:45:36,000 --> 00:45:39,000
definitely not so easy, but you have as much control as you want

928
00:45:39,000 --> 00:45:42,000
over the application, and you have choice to do whatever you'd like.

929
00:45:52,000 --> 00:45:55,000
So no, we're not repeating anything, actually.

930
00:45:55,080 --> 00:45:57,080
So in the configuration file, you're referring to the OTL

931
00:45:57,080 --> 00:45:59,080
collector configuration, right?

932
00:45:59,080 --> 00:46:01,080
This is before it even reaches.

933
00:46:01,080 --> 00:46:03,080
This is to make sure it reaches the collector.

934
00:46:03,080 --> 00:46:06,080
You do all of this to just instrument and generate the spans,

935
00:46:06,080 --> 00:46:08,080
and we send it to the collector.

936
00:46:08,080 --> 00:46:13,080
From there, it's going to be processing and exporting to our backends.

937
00:46:13,080 --> 00:46:15,080
Does that make sense?

938
00:46:15,160 --> 00:46:20,160
Yeah, but in this case, what we're setting up, you're right.

939
00:46:20,160 --> 00:46:22,160
It's exactly the case.

940
00:46:22,160 --> 00:46:25,160
You have to know exactly what the collector is waiting for, and you

941
00:46:25,160 --> 00:46:27,160
have to send that exact same thing.

942
00:46:27,160 --> 00:46:30,160
If you send a mismatch, you're going to get an error message.

943
00:46:30,160 --> 00:46:33,160
It's going to be some hidden message that you're going to get

944
00:46:33,160 --> 00:46:35,160
back to the collector.

945
00:46:35,160 --> 00:46:38,160
And then you can send it to the operator.

946
00:46:38,160 --> 00:46:41,160
So this is the same thing that we're sending to the operator.

947
00:46:41,160 --> 00:46:44,160
So we're sending the error message to the collector.

948
00:46:44,240 --> 00:46:47,240
It's going to be some hidden, mysterious message, and only then

949
00:46:47,240 --> 00:46:50,240
you're going to figure out, oh, I'm sending the wrong protocol in.

950
00:46:50,240 --> 00:46:52,240
It's not accepting, and it's rejecting my spans.

951
00:46:52,240 --> 00:46:54,240
That's a great question, actually.

952
00:46:54,240 --> 00:46:56,240
Anything else?

953
00:46:58,240 --> 00:47:00,240
Okay, perfect.

954
00:47:00,240 --> 00:47:04,240
So over there, we create the tracer, and we create the app.

955
00:47:04,240 --> 00:47:07,240
And you think, okay, that was a lot of code.

956
00:47:07,240 --> 00:47:09,240
Are we at least done?

957
00:47:09,240 --> 00:47:10,240
No.

958
00:47:10,240 --> 00:47:12,240
We still haven't even created the spans ourselves yet, because

959
00:47:12,320 --> 00:47:14,320
we're still in the manual way.

960
00:47:14,320 --> 00:47:16,320
We have to create the spans.

961
00:47:16,320 --> 00:47:19,320
So this entire hello world, I'm going to be replacing our

962
00:47:19,320 --> 00:47:21,320
function at the bottom with this.

963
00:47:23,320 --> 00:47:26,320
And we'll go over it exactly what it does.

964
00:47:26,320 --> 00:47:29,320
We're going to be saying, at this path, I want to define this

965
00:47:29,320 --> 00:47:31,320
function hello.

966
00:47:31,320 --> 00:47:34,320
And what it does is, immediately we're going to be creating a

967
00:47:34,320 --> 00:47:37,320
span root, and we use the with one to make sure that we don't

968
00:47:37,320 --> 00:47:39,320
have to open and close it.

969
00:47:39,320 --> 00:47:41,320
Everything inside of it is just automatically inside of the

970
00:47:41,400 --> 00:47:42,400
span.

971
00:47:42,400 --> 00:47:44,400
So we're going to be doing the same thing for the other

972
00:47:44,400 --> 00:47:46,400
message.

973
00:47:46,400 --> 00:47:48,400
We're just going to be creating a file and so on.

974
00:47:48,400 --> 00:47:50,400
So we create a current span, and we give it a name root,

975
00:47:50,400 --> 00:47:52,400
because every span has a name.

976
00:47:52,400 --> 00:47:54,400
And you can add an event if you'd like.

977
00:47:54,400 --> 00:47:56,400
I can just call it root event.

978
00:47:56,400 --> 00:47:58,400
You can add anything you'd like there.

979
00:47:58,400 --> 00:48:00,400
And finally, you have hello world from our manually

980
00:48:00,400 --> 00:48:02,400
instrumented Flask app.

981
00:48:02,400 --> 00:48:04,400
And does anyone have any questions with this so far?

982
00:48:04,400 --> 00:48:07,400
What does it mean to create our own span, the name, anything

983
00:48:07,400 --> 00:48:09,400
else?

984
00:48:09,480 --> 00:48:11,480
So it's the exact same thing for the other message.

985
00:48:11,480 --> 00:48:13,480
We're just going to be creating our span and adding an event

986
00:48:13,480 --> 00:48:15,480
and so on.

987
00:48:19,480 --> 00:48:21,480
So step nine, we're going to test it and run it.

988
00:48:21,480 --> 00:48:25,480
I'm going to run this file, the instrumentation manual file.

989
00:48:34,480 --> 00:48:36,480
And it's up.

990
00:48:36,480 --> 00:48:38,480
And here I'm going to curl my local host at a port 5000.

991
00:48:38,560 --> 00:48:40,560
And we should see a few things here.

992
00:48:40,560 --> 00:48:42,560
One is we got a response.

993
00:48:42,560 --> 00:48:44,560
Two, because we sent the exporter in our application to

994
00:48:44,560 --> 00:48:46,560
print the logging and to send it to the collector, we see

995
00:48:46,560 --> 00:48:48,560
inner logs over here.

996
00:48:48,560 --> 00:48:50,560
Can anyone guess and tell me what this big JSON is, this big

997
00:48:50,560 --> 00:48:52,560
document?

998
00:48:52,560 --> 00:48:54,560
Does anybody know?

999
00:48:54,560 --> 00:48:56,560
Exactly.

1000
00:48:56,560 --> 00:48:58,560
This is the span.

1001
00:48:58,560 --> 00:49:00,560
This is what we're looking at.

1002
00:49:00,560 --> 00:49:02,560
We're looking at the span.

1003
00:49:02,560 --> 00:49:04,560
So we're going to run this file.

1004
00:49:04,560 --> 00:49:06,560
And we're going to run this file.

1005
00:49:06,640 --> 00:49:08,640
And this is the span.

1006
00:49:08,640 --> 00:49:10,640
This is what we're looking at.

1007
00:49:10,640 --> 00:49:12,640
We're looking at the span that just happened.

1008
00:49:12,640 --> 00:49:14,640
And that's the name root, exactly what we did.

1009
00:49:14,640 --> 00:49:16,640
And it's got a context.

1010
00:49:16,640 --> 00:49:18,640
So the context is very important to worry about.

1011
00:49:18,640 --> 00:49:20,640
Because this can be very, very hard when you're doing things

1012
00:49:20,640 --> 00:49:22,640
manually.

1013
00:49:22,640 --> 00:49:24,640
Basically, every span, like I said, belongs to a bigger

1014
00:49:24,640 --> 00:49:26,640
family, which is called a trace.

1015
00:49:26,640 --> 00:49:28,640
He could be alone in the family.

1016
00:49:28,640 --> 00:49:30,640
He could have siblings.

1017
00:49:30,640 --> 00:49:32,640
He could have parents and so on.

1018
00:49:32,640 --> 00:49:34,640
So he has a trace ID, which is almost like the span's last

1019
00:49:34,720 --> 00:49:36,720
name.

1020
00:49:36,720 --> 00:49:38,720
And he's got his own unique span ID.

1021
00:49:38,720 --> 00:49:40,720
This is the span's first name, essentially.

1022
00:49:40,720 --> 00:49:42,720
It's unique within the trace.

1023
00:49:42,720 --> 00:49:44,720
OK?

1024
00:49:44,720 --> 00:49:48,720
So if he has, for example, children's span and so on,

1025
00:49:48,720 --> 00:49:50,720
they'll have the same exact trace ID, but different and

1026
00:49:50,720 --> 00:49:52,720
unique span IDs.

1027
00:49:52,720 --> 00:49:58,720
Our kind, for example, and so on, our span kind is internal.

1028
00:49:58,720 --> 00:50:00,720
This is when you don't set your kind.

1029
00:50:00,720 --> 00:50:02,720
It'll default to internal.

1030
00:50:02,800 --> 00:50:04,800
So this is kind of mysterious as to what exactly does this

1031
00:50:04,800 --> 00:50:06,800
mean?

1032
00:50:06,800 --> 00:50:08,800
And it's because when you do do it, you should set the span

1033
00:50:08,800 --> 00:50:10,800
and you should define everything as well.

1034
00:50:10,800 --> 00:50:12,800
And that's the problem with doing things manually.

1035
00:50:12,800 --> 00:50:14,800
Sometimes you don't know exactly 100% what to do and how

1036
00:50:14,800 --> 00:50:16,800
to fix everything.

1037
00:50:16,800 --> 00:50:18,800
And that's why sometimes it's best to leave it up to the

1038
00:50:18,800 --> 00:50:20,800
contrib in the later versions we'll see.

1039
00:50:20,800 --> 00:50:22,800
Our parent ID is no, meaning there are no parent spans to

1040
00:50:22,800 --> 00:50:24,800
this span.

1041
00:50:24,800 --> 00:50:26,800
And this is the first span in the trace, if there is no

1042
00:50:26,800 --> 00:50:28,800
parent ID.

1043
00:50:28,800 --> 00:50:30,800
We've got a start time and end time.

1044
00:50:30,880 --> 00:50:32,880
Our status code is unset, even though we did return 200, the

1045
00:50:32,880 --> 00:50:34,880
span does not know anything about it.

1046
00:50:34,880 --> 00:50:36,880
And the span says that our status code is unset and

1047
00:50:36,880 --> 00:50:38,880
unknown, basically.

1048
00:50:38,880 --> 00:50:40,880
Our attributes are empty.

1049
00:50:40,880 --> 00:50:42,880
And we've got one event, a root event that we created, and at

1050
00:50:42,880 --> 00:50:44,880
least we got the timestamp of when we did it.

1051
00:50:44,880 --> 00:50:46,880
And we've got no links, but at least we're able to capture the

1052
00:50:46,880 --> 00:50:48,880
service name of my flask app in production manual.

1053
00:50:48,880 --> 00:50:50,880
The same thing happened over here on this side of the

1054
00:50:50,880 --> 00:50:52,880
collector.

1055
00:50:52,880 --> 00:50:54,880
It said, hey, I got an image of my flask app in production

1056
00:50:54,880 --> 00:50:56,880
manual.

1057
00:50:56,880 --> 00:50:58,880
And we got the same thing over here on this side of the

1058
00:50:58,960 --> 00:51:00,960
collector.

1059
00:51:00,960 --> 00:51:02,960
It said, hey, I got an incoming span, I got a trace that was

1060
00:51:02,960 --> 00:51:04,960
exported to me, and the number of spans that I received was

1061
00:51:04,960 --> 00:51:06,960
one.

1062
00:51:06,960 --> 00:51:12,960
So if we bring this back, and for example, we just send a

1063
00:51:12,960 --> 00:51:16,960
bunch of spans, we now see over here the number of spans that

1064
00:51:16,960 --> 00:51:20,960
came in was six, and the number of spans that came in was seven.

1065
00:51:20,960 --> 00:51:22,960
And so this is by the batching.

1066
00:51:22,960 --> 00:51:24,960
It sends in as fast as it can, it sends it out, and it just

1067
00:51:24,960 --> 00:51:26,960
hopes to not overload the collector with too many.

1068
00:51:27,040 --> 00:51:29,040
So the collector will, and the same with the application as

1069
00:51:29,040 --> 00:51:31,040
well, the application doesn't want to hold too many spans in

1070
00:51:31,040 --> 00:51:33,040
its queues.

1071
00:51:33,040 --> 00:51:35,040
It wants to just get rid of it as fast as it can.

1072
00:51:35,040 --> 00:51:37,040
So it'll get rid of it, the collector will try to get rid

1073
00:51:37,040 --> 00:51:39,040
of it as fast as it can, and finally it'll send it to the

1074
00:51:39,040 --> 00:51:41,040
telemetry backend.

1075
00:51:41,040 --> 00:51:43,040
So we've got this, and we're able to curl, and it works.

1076
00:51:43,040 --> 00:51:45,040
But what happens if we curl an unknown endpoint?

1077
00:51:45,040 --> 00:51:47,040
Unknown.

1078
00:51:47,040 --> 00:51:49,040
Well, we've got this.

1079
00:51:49,040 --> 00:51:51,040
We've got the 404 here.

1080
00:51:51,040 --> 00:51:53,040
But do we at least see the span for the 404?

1081
00:51:53,120 --> 00:51:55,120
That's something I don't know, and we'll have to find out.

1082
00:51:55,120 --> 00:51:57,120
And what about if I do the error?

1083
00:51:59,120 --> 00:52:01,120
Will we at least see the error in the span?

1084
00:52:03,120 --> 00:52:05,120
And so we can come back here.

1085
00:52:05,120 --> 00:52:09,120
And so we got our successful response with 500.

1086
00:52:09,120 --> 00:52:13,120
We got an unsuccessful response with 500 slash error.

1087
00:52:13,120 --> 00:52:15,120
And it's time to look at the spans.

1088
00:52:15,120 --> 00:52:17,120
We can open over here, and we can see the error.

1089
00:52:17,120 --> 00:52:19,120
We can actually see the error.

1090
00:52:19,120 --> 00:52:21,120
So we can come back here.

1091
00:52:21,200 --> 00:52:23,200
And we can look at the spans.

1092
00:52:23,200 --> 00:52:25,200
We can open over here.

1093
00:52:25,200 --> 00:52:27,200
By the way, for Windows users, you have to change this to

1094
00:52:27,200 --> 00:52:29,200
localhost manually, because I put the link in at 000.

1095
00:52:29,200 --> 00:52:31,200
And it won't work for you, so sorry.

1096
00:52:31,200 --> 00:52:33,200
You have to go to localhost.

1097
00:52:35,200 --> 00:52:37,200
So we've got Jaeger over here.

1098
00:52:37,200 --> 00:52:39,200
And Jaeger looks like this.

1099
00:52:39,200 --> 00:52:41,200
It's got a cute little animal.

1100
00:52:43,200 --> 00:52:45,200
And we can define by the service, since we know exactly

1101
00:52:45,200 --> 00:52:49,200
the name, myflaskapp and production manual, we can find

1102
00:52:49,280 --> 00:52:51,280
errors only for that service.

1103
00:52:51,280 --> 00:52:53,280
And we can say some have errors.

1104
00:52:53,280 --> 00:52:55,280
We see that.

1105
00:52:55,280 --> 00:52:57,280
And some don't have errors, and some won't work.

1106
00:52:57,280 --> 00:52:59,280
So let's look at ones that didn't have errors.

1107
00:52:59,280 --> 00:53:01,280
Let's see what we can see.

1108
00:53:01,280 --> 00:53:03,280
Okay, we've got proto.

1109
00:53:03,280 --> 00:53:05,280
Our library name is main.

1110
00:53:05,280 --> 00:53:07,280
And our span kind is internal.

1111
00:53:07,280 --> 00:53:09,280
I don't know.

1112
00:53:09,280 --> 00:53:11,280
Not a lot of information.

1113
00:53:11,280 --> 00:53:13,280
At least we got some logs.

1114
00:53:13,280 --> 00:53:15,280
Okay, we can see the root event.

1115
00:53:15,280 --> 00:53:17,280
But does anyone know what just happened in the application?

1116
00:53:17,360 --> 00:53:19,360
Can anyone tell me?

1117
00:53:19,360 --> 00:53:21,360
I'm kind of lost, too.

1118
00:53:21,360 --> 00:53:23,360
There's not much information here at all.

1119
00:53:23,360 --> 00:53:25,360
And that's because it's up to you, when you're doing it

1120
00:53:25,360 --> 00:53:27,360
manually, to add all this information.

1121
00:53:27,360 --> 00:53:29,360
And imagine it would take a lot more time to make sure that

1122
00:53:29,360 --> 00:53:31,360
you're capturing every event, every error, you're tagging it,

1123
00:53:31,360 --> 00:53:33,360
and everything else coming in.

1124
00:53:33,360 --> 00:53:35,360
And let's look at the ones with errors.

1125
00:53:39,360 --> 00:53:41,360
So okay, at least we captured a few more tags.

1126
00:53:41,360 --> 00:53:43,360
We got that error is true.

1127
00:53:43,360 --> 00:53:45,360
And we at least captured the error message that it was

1128
00:53:45,440 --> 00:53:47,440
zero division error, division by zero.

1129
00:53:47,440 --> 00:53:49,440
It didn't really tell us where, when, or why.

1130
00:53:49,440 --> 00:53:51,440
But at least we got some logs.

1131
00:53:51,440 --> 00:53:53,440
And okay, at least it was able to capture our traceback for us.

1132
00:53:53,440 --> 00:53:55,440
And we can say, okay, it's probably on line 44 we got this error.

1133
00:53:55,440 --> 00:53:57,440
And is that the case?

1134
00:53:57,440 --> 00:53:59,440
It is.

1135
00:53:59,440 --> 00:54:01,440
So we got something, right?

1136
00:54:01,440 --> 00:54:03,440
But we don't know everything about the request coming in.

1137
00:54:03,440 --> 00:54:05,440
We're kind of left in the dark.

1138
00:54:05,440 --> 00:54:07,440
And we don't really know much.

1139
00:54:07,440 --> 00:54:09,440
Are there any questions about this, about the manual?

1140
00:54:09,440 --> 00:54:11,440
Okay, so we got some logs.

1141
00:54:11,440 --> 00:54:13,440
And we can see the error message.

1142
00:54:13,520 --> 00:54:15,520
Are there any questions about this, about the manual?

1143
00:54:15,520 --> 00:54:17,520
Or are we looking at the spans here?

1144
00:54:17,520 --> 00:54:19,520
Okay.

1145
00:54:19,520 --> 00:54:23,520
So as we saw, there's not much information here at all.

1146
00:54:23,520 --> 00:54:27,520
It's kind of, kind of looking in the dark, I guess.

1147
00:54:27,520 --> 00:54:29,520
So that's Yeager.

1148
00:54:29,520 --> 00:54:31,520
We can look at Zipkin.

1149
00:54:31,520 --> 00:54:33,520
And we can say, you can add by this red thing,

1150
00:54:33,520 --> 00:54:35,520
you can say, my service name, I want to look at only for spans

1151
00:54:35,520 --> 00:54:37,520
with my Flask app and production manual.

1152
00:54:37,520 --> 00:54:39,520
And we can just search for those to begin with.

1153
00:54:39,520 --> 00:54:41,520
We can see a bunch came in with errors.

1154
00:54:41,600 --> 00:54:45,600
And, oh no, sorry, is that even?

1155
00:54:45,600 --> 00:54:47,600
Yep, it is.

1156
00:54:47,600 --> 00:54:49,600
So we see over here, this is our timeline.

1157
00:54:49,600 --> 00:54:51,600
It's kind of hard to look at.

1158
00:54:51,600 --> 00:54:53,600
And over here, at least we captured the error.

1159
00:54:53,600 --> 00:54:55,600
We can say, exception escaped false.

1160
00:54:55,600 --> 00:54:57,600
And at least we got some sort of traceback,

1161
00:54:57,600 --> 00:54:59,600
even though it's very, very hard to read.

1162
00:54:59,600 --> 00:55:01,600
Does it even say the line?

1163
00:55:01,600 --> 00:55:03,600
Line 44, if you look very, very closely,

1164
00:55:03,600 --> 00:55:05,600
it's kind of hard to understand what's happening here.

1165
00:55:05,600 --> 00:55:07,600
At least we got the, the, the, the, the, the, the, the,

1166
00:55:07,600 --> 00:55:09,600
the, the, the, the, the, the, the, the, the, the, the, the,

1167
00:55:09,680 --> 00:55:13,680
at least we got the, the, the, the status code

1168
00:55:13,680 --> 00:55:15,680
and at least the status description,

1169
00:55:15,680 --> 00:55:17,680
but it's not much at all.

1170
00:55:17,680 --> 00:55:19,680
And on the Prometheus side,

1171
00:55:19,680 --> 00:55:23,680
Can you, how did you put in the service name so quickly?

1172
00:55:23,680 --> 00:55:25,680
The service name?

1173
00:55:25,680 --> 00:55:27,680
In Zipkin here.

1174
00:55:27,680 --> 00:55:29,680
I had to refresh it.

1175
00:55:29,680 --> 00:55:33,680
Yeah, I thought I would refresh it exactly beyond that.

1176
00:55:33,680 --> 00:55:35,680
So you might need to do that.

1177
00:55:35,680 --> 00:55:37,680
You might need to refresh.

1178
00:55:37,760 --> 00:55:39,760
I clicked the red and I went to service name

1179
00:55:39,760 --> 00:55:41,760
and yeah, is this what happened to you guys?

1180
00:55:41,760 --> 00:55:43,760
It auto-completed this?

1181
00:55:43,760 --> 00:55:45,760
Okay.

1182
00:55:45,760 --> 00:55:47,760
Does it work after a refresh?

1183
00:56:01,760 --> 00:56:03,760
Awesome.

1184
00:56:03,760 --> 00:56:05,760
So good job, good job everyone else.

1185
00:56:05,840 --> 00:56:07,840
Good job here.

1186
00:56:07,840 --> 00:56:11,840
Any questions on Jaeger or Zipkin about the traces?

1187
00:56:11,840 --> 00:56:13,840
Yeah.

1188
00:56:13,840 --> 00:56:25,840
Yeah, I would say, I would say they're both not the best in the world,

1189
00:56:25,840 --> 00:56:27,840
but I would say Jaeger is definitely much better than Zipkin at least.

1190
00:56:27,840 --> 00:56:31,840
It's also newer and I think people are still working on it.

1191
00:56:31,840 --> 00:56:33,840
Anything else?

1192
00:56:33,920 --> 00:56:35,920
Okay.

1193
00:56:35,920 --> 00:56:37,920
And on the Prometheus side, if you don't know any Prometheus expressions,

1194
00:56:37,920 --> 00:56:41,920
you can click this globe over here and you can ask all sorts of questions.

1195
00:56:41,920 --> 00:56:45,920
For example, and this is mainly about the physical infrastructure

1196
00:56:45,920 --> 00:56:47,920
it's going to be related.

1197
00:56:47,920 --> 00:56:49,920
So we're not too worried about right now,

1198
00:56:49,920 --> 00:56:51,920
but for example, the collector process uptime we can say,

1199
00:56:51,920 --> 00:56:53,920
and I want to graph that.

1200
00:56:53,920 --> 00:56:55,920
And so you get this big, big request,

1201
00:56:55,920 --> 00:56:59,920
but you're able to graph it and you see that since time is linear,

1202
00:56:59,920 --> 00:57:01,920
okay, at least it works.

1203
00:57:02,000 --> 00:57:06,000
But we can ask questions about the CPU and all sorts of things.

1204
00:57:06,000 --> 00:57:10,000
So any questions on the manual case?

1205
00:57:10,000 --> 00:57:12,000
Okay.

1206
00:57:12,000 --> 00:57:16,000
On a scale of 1 to 10, can you rate how much fun the manual case was?

1207
00:57:16,000 --> 00:57:18,000
No.

1208
00:57:18,000 --> 00:57:22,000
Not fun, thumbs down, I would say maybe like a 2 out of 10 at the very best.

1209
00:57:22,000 --> 00:57:24,000
So thank you, thank you.

1210
00:57:24,000 --> 00:57:26,000
The manual case is very, very hard.

1211
00:57:26,000 --> 00:57:28,000
A lot of boilerplate, not much fun.

1212
00:57:28,000 --> 00:57:30,000
And we're about to see what fun is.

1213
00:57:30,080 --> 00:57:34,080
Step two, we're going to go on to the contrib instrumentation case.

1214
00:57:34,080 --> 00:57:36,080
And we're kind of doing the exact same thing.

1215
00:57:36,080 --> 00:57:38,080
I want you to take your base

1216
00:57:38,080 --> 00:57:40,080
and I want you just to copy it over to this contrib file.

1217
00:57:40,080 --> 00:57:44,080
So we're kind of just building on top of the same code we know.

1218
00:57:44,080 --> 00:57:48,080
And so I'll do this.

1219
00:57:54,080 --> 00:57:56,080
And so I'll copy the file over.

1220
00:57:56,080 --> 00:57:58,080
I'll pip install only this one thing.

1221
00:57:58,160 --> 00:58:00,160
And this is the instrumentation for the contrib.

1222
00:58:00,160 --> 00:58:02,160
Open telemetry instrumentation flask.

1223
00:58:02,160 --> 00:58:04,160
So all of your favorite third party tools and libraries,

1224
00:58:04,160 --> 00:58:06,160
they all have instrumentations in the contrib repository

1225
00:58:06,160 --> 00:58:08,160
and you just install them and it works just like magic.

1226
00:58:08,160 --> 00:58:10,160
So let's paste that in.

1227
00:58:14,160 --> 00:58:16,160
And I'm sorry about the boilerplate in this one.

1228
00:58:16,160 --> 00:58:18,160
I guess it is possible with environment variables

1229
00:58:18,160 --> 00:58:22,160
but it is better to do it this way, just one time.

1230
00:58:22,160 --> 00:58:24,160
So I'm going to go ahead and paste that in.

1231
00:58:24,160 --> 00:58:26,160
And I'm going to go ahead and paste that in.

1232
00:58:26,240 --> 00:58:28,240
And I'm going to go ahead and paste that in just one time.

1233
00:58:28,240 --> 00:58:30,240
So, oh, and also for Windows users,

1234
00:58:30,240 --> 00:58:32,240
this is a place to watch out and change this to localhost.

1235
00:58:40,240 --> 00:58:42,240
So I'll close our manual.

1236
00:58:42,240 --> 00:58:44,240
And I'll go to the contrib.

1237
00:58:44,240 --> 00:58:46,240
And I'll add the boilerplate at the top again.

1238
00:58:50,240 --> 00:58:52,240
And but what it's doing is it's saying

1239
00:58:52,240 --> 00:58:54,240
I want to import the same exact things

1240
00:58:54,320 --> 00:58:56,320
but additionally the flask instrumenter, just one class.

1241
00:58:58,320 --> 00:59:00,320
And then I'm going to set these two environment variables

1242
00:59:00,320 --> 00:59:02,320
equal to essentially true in a way you can think of it

1243
00:59:02,320 --> 00:59:04,320
but it's regex so we'll get into that.

1244
00:59:04,320 --> 00:59:06,320
So what it says is for my OTA instrumentation,

1245
00:59:06,320 --> 00:59:08,320
for every HTTP call,

1246
00:59:08,320 --> 00:59:10,320
I want you to capture the headers of the server request

1247
00:59:10,320 --> 00:59:12,320
and the server response.

1248
00:59:12,320 --> 00:59:14,320
And it's going to be set true to whatever matches

1249
00:59:14,320 --> 00:59:16,320
with the regex.

1250
00:59:16,320 --> 00:59:18,320
And so we say dot star,

1251
00:59:18,320 --> 00:59:20,320
it captures everything.

1252
00:59:20,320 --> 00:59:22,320
And then I'm going to set the same thing

1253
00:59:22,400 --> 00:59:24,400
dot star, it captures everything.

1254
00:59:24,400 --> 00:59:26,400
Any questions on this?

1255
00:59:26,400 --> 00:59:28,400
Okay.

1256
00:59:28,400 --> 00:59:30,400
Perfect. We're going to say on the endpoint

1257
00:59:30,400 --> 00:59:32,400
we're going to be sending it to the collector again,

1258
00:59:32,400 --> 00:59:34,400
4317, but this time with a different service name.

1259
00:59:34,400 --> 00:59:36,400
MyFlaskAppInProductionContrib

1260
00:59:36,400 --> 00:59:38,400
so that way we have differentiated

1261
00:59:38,400 --> 00:59:40,400
and we're able to see which spans are better and worse.

1262
00:59:42,400 --> 00:59:44,400
Same exact thing, we're going to be sending it

1263
00:59:44,400 --> 00:59:46,400
to standard output as well as the collector over here.

1264
00:59:46,400 --> 00:59:48,400
Right? Nothing new.

1265
00:59:48,400 --> 00:59:50,400
And then you say,

1266
00:59:50,480 --> 00:59:52,480
okay, what else is there?

1267
00:59:52,480 --> 00:59:54,480
Only one line.

1268
00:59:54,480 --> 00:59:56,480
After you create your application,

1269
00:59:56,480 --> 00:59:58,480
you go into the Flask Instrumentation,

1270
00:59:58,480 --> 01:00:00,480
you say, take this application

1271
01:00:00,480 --> 01:00:02,480
and instrument it for me.

1272
01:00:02,480 --> 01:00:04,480
So you go over here

1273
01:00:04,480 --> 01:00:06,480
and boom, this is all the work.

1274
01:00:06,480 --> 01:00:08,480
We don't touch anything else, your code remains the same.

1275
01:00:08,480 --> 01:00:10,480
So imagine

1276
01:00:10,480 --> 01:00:12,480
you can write your code and you can just

1277
01:00:12,480 --> 01:00:14,480
even have the boilerplate on a different file

1278
01:00:14,480 --> 01:00:16,480
and you can just import everything else and it will work.

1279
01:00:16,480 --> 01:00:18,480
So let's test it out.

1280
01:00:18,560 --> 01:00:20,560
By the way, any questions so far on this

1281
01:00:20,560 --> 01:00:22,560
and what we did over here?

1282
01:00:22,560 --> 01:00:24,560
An ID? Okay, perfect.

1283
01:00:26,560 --> 01:00:28,560
So let's run our contrib file.

1284
01:00:34,560 --> 01:00:36,560
We're running the contrib

1285
01:00:36,560 --> 01:00:38,560
and we can curl our localhost

1286
01:00:38,560 --> 01:00:40,560
at 5000.

1287
01:00:42,560 --> 01:00:44,560
Now I want this to print

1288
01:00:44,560 --> 01:00:46,560
over here as well as over here

1289
01:00:46,640 --> 01:00:48,640
and look at this, this is a much bigger span

1290
01:00:48,640 --> 01:00:50,640
than what we just did.

1291
01:00:50,640 --> 01:00:52,640
It's even captured the exact path that we just did.

1292
01:00:52,640 --> 01:00:54,640
So it captured the path.

1293
01:00:54,640 --> 01:00:56,640
It's captured the fact that it's a server as well.

1294
01:00:56,640 --> 01:00:58,640
It was able to

1295
01:00:58,640 --> 01:01:00,640
well it didn't set the status code yet

1296
01:01:00,640 --> 01:01:02,640
but it did capture everything else about the request.

1297
01:01:02,640 --> 01:01:04,640
It got the get, it got the fact that

1298
01:01:04,640 --> 01:01:06,640
we went to 000,

1299
01:01:06,640 --> 01:01:08,640
it got the fact that it was HTTP, it got the port

1300
01:01:08,640 --> 01:01:10,640
and it got pretty much everything else

1301
01:01:10,640 --> 01:01:12,640
as well as the headers, would you believe it?

1302
01:01:12,640 --> 01:01:14,640
It even captured the status code.

1303
01:01:16,640 --> 01:01:18,640
So why was it able to get it?

1304
01:01:22,640 --> 01:01:24,640
I learned it was a proper way to

1305
01:01:24,640 --> 01:01:26,640
instantify it

1306
01:01:26,640 --> 01:01:28,640
but you barely went down that one step.

1307
01:01:28,640 --> 01:01:30,640
Why wasn't that there?

1308
01:01:30,640 --> 01:01:32,640
At the top here? I'm actually not sure.

1309
01:01:32,640 --> 01:01:34,640
We can get into that. That's interesting.

1310
01:01:34,640 --> 01:01:36,640
That's a good one.

1311
01:01:36,640 --> 01:01:38,640
But as you see it was captured over here.

1312
01:01:38,640 --> 01:01:40,640
So I'm sure there's a way that we could do that.

1313
01:01:40,640 --> 01:01:44,640
And they got our service name as well.

1314
01:01:44,720 --> 01:01:46,720
And over here we say that we got

1315
01:01:46,720 --> 01:01:48,720
one span coming into the collector

1316
01:01:48,720 --> 01:01:50,720
and so on.

1317
01:01:50,720 --> 01:01:52,720
So we can do the same thing.

1318
01:01:52,720 --> 01:01:54,720
We can ping an unknown endpoint.

1319
01:01:54,720 --> 01:01:56,720
We can do it a bunch.

1320
01:01:58,720 --> 01:02:00,720
Just be careful not to do that on your computer.

1321
01:02:00,720 --> 01:02:02,720
And from there we go

1322
01:02:02,720 --> 01:02:04,720
we'll do the error

1323
01:02:04,720 --> 01:02:06,720
and I want to spam it with errors as well.

1324
01:02:08,720 --> 01:02:10,720
And we see

1325
01:02:10,720 --> 01:02:12,720
six spans came in, ten spans came in

1326
01:02:12,800 --> 01:02:14,800
thirteen and so on.

1327
01:02:18,800 --> 01:02:20,800
And we can go back over here.

1328
01:02:20,800 --> 01:02:22,800
We did a successful, we did an unsuccessful

1329
01:02:22,800 --> 01:02:24,800
and it's time

1330
01:02:24,800 --> 01:02:26,800
to check what happened.

1331
01:02:26,800 --> 01:02:28,800
We'll go back into Jaeger

1332
01:02:28,800 --> 01:02:30,800
and same thing over here as you experienced here.

1333
01:02:30,800 --> 01:02:32,800
We do need to refresh in some cases.

1334
01:02:32,800 --> 01:02:34,800
And boom we got a new service coming in.

1335
01:02:34,800 --> 01:02:36,800
And we now have two services.

1336
01:02:36,800 --> 01:02:38,800
The manual and the contrib.

1337
01:02:38,800 --> 01:02:40,800
So let's check out the contrib one.

1338
01:02:40,880 --> 01:02:42,880
And we'll find traces.

1339
01:02:42,880 --> 01:02:44,880
And you'll see you can even change it by operation

1340
01:02:44,880 --> 01:02:46,880
you can check.

1341
01:02:46,880 --> 01:02:48,880
You can check by the traces that came into slash

1342
01:02:48,880 --> 01:02:50,880
the traces that came into error

1343
01:02:50,880 --> 01:02:52,880
and again we made as well.

1344
01:02:54,880 --> 01:02:56,880
So let's see what it looks like

1345
01:02:56,880 --> 01:02:58,880
without an error.

1346
01:02:58,880 --> 01:03:00,880
And this is again, let's see.

1347
01:03:00,880 --> 01:03:02,880
Interesting.

1348
01:03:02,880 --> 01:03:04,880
So that's good.

1349
01:03:06,880 --> 01:03:08,880
Okay, okay.

1350
01:03:08,960 --> 01:03:10,960
So even now I'm learning something on the spot now.

1351
01:03:10,960 --> 01:03:14,960
So whatever we made to slash was sent to slash

1352
01:03:14,960 --> 01:03:16,960
and it returned a successful response.

1353
01:03:18,960 --> 01:03:20,960
Okay, and we're able to see everything that came in.

1354
01:03:20,960 --> 01:03:22,960
We got the fact that it was in a get

1355
01:03:22,960 --> 01:03:24,960
to localhost 5000.

1356
01:03:24,960 --> 01:03:28,960
We got all of our headers, the accept, host, user agent, everything else.

1357
01:03:30,960 --> 01:03:32,960
We got the status code and so on.

1358
01:03:32,960 --> 01:03:34,960
We're even able to see the fact that

1359
01:03:34,960 --> 01:03:36,960
it's open telemetry with this flask instrumentation

1360
01:03:37,040 --> 01:03:39,040
at this exact version and so on.

1361
01:03:41,040 --> 01:03:43,040
And everything that came in

1362
01:03:43,040 --> 01:03:45,040
to slash error

1363
01:03:45,040 --> 01:03:47,040
was an error but at least the trace was sent

1364
01:03:47,040 --> 01:03:49,040
to the collector and we got the trace.

1365
01:03:49,040 --> 01:03:51,040
And it captures a little bit more information.

1366
01:03:51,040 --> 01:03:53,040
It tells us the fact that it was an error.

1367
01:03:53,040 --> 01:03:55,040
The same exact things about the request and the response.

1368
01:03:57,040 --> 01:03:59,040
We got at least the error message.

1369
01:04:01,040 --> 01:04:03,040
But here in our logs if we go

1370
01:04:03,120 --> 01:04:05,120
we didn't get the full trace back as well.

1371
01:04:05,120 --> 01:04:07,120
So we got the full trace back for there.

1372
01:04:07,120 --> 01:04:09,120
We got all of the headers as well.

1373
01:04:09,120 --> 01:04:11,120
And I think body is something that's coming up soon.

1374
01:04:11,120 --> 01:04:13,120
In fact we're able to also collect the entire body.

1375
01:04:15,120 --> 01:04:17,120
And yeah go ahead.

1376
01:04:17,120 --> 01:04:19,120
Can I ask you now,

1377
01:04:19,120 --> 01:04:21,120
another thing that's on the top of the presentation.

1378
01:04:21,120 --> 01:04:23,120
How does this work when you're running a full on app

1379
01:04:23,120 --> 01:04:25,120
where you can go in and basically come up with a

1380
01:04:25,120 --> 01:04:27,120
new message and then you can actually

1381
01:04:27,120 --> 01:04:29,120
go in and actually send it to the user.

1382
01:04:29,120 --> 01:04:31,120
So that's a really cool thing.

1383
01:04:31,200 --> 01:04:33,200
So I think that's a really cool thing.

1384
01:04:33,200 --> 01:04:35,200
So I think that's a really cool thing.

1385
01:04:35,200 --> 01:04:37,200
It should look pretty much the same.

1386
01:04:37,200 --> 01:04:39,200
But we can feel free to test it in

1387
01:04:39,200 --> 01:04:41,200
I think from Unicorn.

1388
01:04:41,200 --> 01:04:43,200
Whatever is instrumented.

1389
01:04:43,200 --> 01:04:45,200
Whatever the instrumentation is

1390
01:04:45,200 --> 01:04:47,200
is where it's going to send

1391
01:04:47,200 --> 01:04:49,200
is exactly what's going to send it to the collector.

1392
01:04:49,200 --> 01:04:51,200
And from there it will be sent over here.

1393
01:04:51,200 --> 01:04:53,200
So I just want to pause for a second.

1394
01:04:53,200 --> 01:04:55,200
And I want to see if anyone has any questions.

1395
01:04:55,200 --> 01:04:57,200
Anything else?

1396
01:04:57,200 --> 01:04:59,200
But else I'm going to go ahead and ask you

1397
01:04:59,280 --> 01:05:01,280
anything else.

1398
01:05:01,280 --> 01:05:03,280
But I also want us to appreciate the fact that

1399
01:05:03,280 --> 01:05:05,280
we just did all of this.

1400
01:05:05,280 --> 01:05:07,280
You guys did it, not me. You guys did it yourselves.

1401
01:05:07,280 --> 01:05:09,280
You guys ran all of this.

1402
01:05:09,280 --> 01:05:11,280
You co-hosted it on your own computer.

1403
01:05:11,280 --> 01:05:13,280
And good job everyone. It's not easy.

1404
01:05:13,280 --> 01:05:15,280
And you did an amazing thing. This is much more than you guys realize.

1405
01:05:15,280 --> 01:05:17,280
And it's a big deal.

1406
01:05:17,280 --> 01:05:19,280
So,

1407
01:05:19,280 --> 01:05:21,280
good job everyone.

1408
01:05:23,280 --> 01:05:25,280
And so we just got a few spans over here.

1409
01:05:25,280 --> 01:05:27,280
And so we looked at slash.

1410
01:05:27,360 --> 01:05:29,360
We looked at slash, we looked at slash error.

1411
01:05:29,360 --> 01:05:31,360
And everything that came in

1412
01:05:31,360 --> 01:05:33,360
that wasn't a defined endpoint

1413
01:05:33,360 --> 01:05:35,360
is just defined as HTTP GET by default.

1414
01:05:35,360 --> 01:05:37,360
And we can look at that.

1415
01:05:37,360 --> 01:05:39,360
And so these are the 404s that we did to slash unknown.

1416
01:05:39,360 --> 01:05:41,360
We see the fact that

1417
01:05:41,360 --> 01:05:43,360
it went to slash unknown.

1418
01:05:43,360 --> 01:05:45,360
It was a 404.

1419
01:05:45,360 --> 01:05:47,360
So we can't say exactly what target it was because it's an unknown target.

1420
01:05:47,360 --> 01:05:49,360
We don't know what slash unknown is.

1421
01:05:49,360 --> 01:05:51,360
It's just a GET we'll call it.

1422
01:05:51,360 --> 01:05:53,360
But it captures everything else the same.

1423
01:05:53,440 --> 01:05:55,440
Okay, on a scale of 1 to 10,

1424
01:05:55,440 --> 01:05:57,440
how much fun was the contrib instrumentation?

1425
01:05:59,440 --> 01:06:01,440
Slightly better.

1426
01:06:01,440 --> 01:06:03,440
Okay, maybe a 5.

1427
01:06:03,440 --> 01:06:05,440
Yeah?

1428
01:06:05,440 --> 01:06:07,440
So this is an interpreting class

1429
01:06:07,440 --> 01:06:09,440
if you're running like

1430
01:06:09,440 --> 01:06:11,440
two blocks away or something.

1431
01:06:11,440 --> 01:06:13,440
Database queries and that kind of thing.

1432
01:06:13,440 --> 01:06:15,440
Do you have to do those separately or will

1433
01:06:15,440 --> 01:06:17,440
the whole thing fall?

1434
01:06:17,440 --> 01:06:19,440
I'm assuming it.

1435
01:06:19,440 --> 01:06:21,440
For the contrib version?

1436
01:06:21,520 --> 01:06:23,520
Yeah, what was that?

1437
01:06:23,520 --> 01:06:25,520
So how are they related together with your instrument?

1438
01:06:25,520 --> 01:06:27,520
Yeah, it works very well together.

1439
01:06:27,520 --> 01:06:29,520
This is the purpose.

1440
01:06:29,520 --> 01:06:31,520
Not to disrupt anything.

1441
01:06:31,520 --> 01:06:33,520
So the whole point of monkey patching

1442
01:06:33,520 --> 01:06:35,520
and wrapping all your code is that

1443
01:06:35,520 --> 01:06:37,520
if anything breaks down, it's open telemetry

1444
01:06:37,520 --> 01:06:39,520
that's breaking down.

1445
01:06:39,520 --> 01:06:41,520
We don't want to break your application.

1446
01:06:41,520 --> 01:06:43,520
We want everything to run as smoothly and as possible as it can.

1447
01:06:43,520 --> 01:06:45,520
And so if something's going to fail,

1448
01:06:45,520 --> 01:06:47,520
it's going to be open telemetry and at least

1449
01:06:47,520 --> 01:06:49,520
maybe you won't get a trace,

1450
01:06:49,600 --> 01:06:51,600
but it's open telemetry that's breaking down.

1451
01:06:51,600 --> 01:06:53,600
So if you want to do, for example,

1452
01:06:53,600 --> 01:06:55,600
we'll be over here with Flask Instrumenter.

1453
01:06:55,600 --> 01:06:57,600
And say for example, you're using also Mongo

1454
01:06:57,600 --> 01:06:59,600
and Redis and all these databases

1455
01:06:59,600 --> 01:07:01,600
and anything else. Same exact thing.

1456
01:07:01,600 --> 01:07:03,600
It's one line to import

1457
01:07:03,600 --> 01:07:05,600
and then only one line just to instrument

1458
01:07:05,600 --> 01:07:07,600
for the contrib way.

1459
01:07:07,600 --> 01:07:09,600
For the contrib way, you do have to import

1460
01:07:09,600 --> 01:07:11,600
and also initialize the class.

1461
01:07:11,600 --> 01:07:13,600
Yeah?

1462
01:07:13,600 --> 01:07:15,600
So I don't have to instrument

1463
01:07:15,600 --> 01:07:17,600
one thing or the other,

1464
01:07:17,680 --> 01:07:19,680
but something that calls

1465
01:07:19,680 --> 01:07:21,680
for a term that's not appropriate.

1466
01:07:21,680 --> 01:07:23,680
When I get child's band

1467
01:07:23,680 --> 01:07:25,680
based on

1468
01:07:25,680 --> 01:07:27,680
Flask app,

1469
01:07:27,680 --> 01:07:29,680
do you get information about my

1470
01:07:29,680 --> 01:07:31,680
service model? Exactly.

1471
01:07:31,680 --> 01:07:33,680
This is the whole point of distributive trace.

1472
01:07:33,680 --> 01:07:35,680
That's an amazing question. We won't get too deep

1473
01:07:35,680 --> 01:07:37,680
into that just yet. Maybe if we have time at the end

1474
01:07:37,680 --> 01:07:39,680
we can go into that. But that's an amazing question.

1475
01:07:39,680 --> 01:07:41,680
That's the whole point. Is that every service

1476
01:07:41,680 --> 01:07:43,680
should ideally be requested, should be instrumented.

1477
01:07:43,680 --> 01:07:45,680
And that way you can see the distributive trace

1478
01:07:45,760 --> 01:07:47,760
and start from here, start from your

1479
01:07:47,760 --> 01:07:49,760
application, go to Redis,

1480
01:07:49,760 --> 01:07:51,760
go to Flask, go to anything else, and so on.

1481
01:07:51,760 --> 01:07:53,760
So yeah, that's exactly it.

1482
01:07:53,760 --> 01:07:55,760
This is the whole point, is that

1483
01:07:55,760 --> 01:07:57,760
you can use eBPF if everything's

1484
01:07:57,760 --> 01:07:59,760
running on the same computer, but it's a bit harder

1485
01:07:59,760 --> 01:08:01,760
once everything is in a distributed environment.

1486
01:08:03,760 --> 01:08:05,760
Any other questions?

1487
01:08:05,760 --> 01:08:07,760
Yeah?

1488
01:08:07,760 --> 01:08:09,760
Is there

1489
01:08:09,760 --> 01:08:11,760
a recommendation on

1490
01:08:11,760 --> 01:08:13,760
the non-save users

1491
01:08:13,840 --> 01:08:15,840
that have like

1492
01:08:15,840 --> 01:08:17,840
one great, like one

1493
01:08:17,840 --> 01:08:19,840
parent that has

1494
01:08:19,840 --> 01:08:21,840
5,000 fans

1495
01:08:21,840 --> 01:08:23,840
at the same time?

1496
01:08:23,840 --> 01:08:25,840
So, great question.

1497
01:08:25,840 --> 01:08:27,840
It's ideally as many fans

1498
01:08:27,840 --> 01:08:29,840
as you can get, right? If you can have

1499
01:08:29,840 --> 01:08:31,840
3,000, yeah, why not? But

1500
01:08:31,840 --> 01:08:33,840
I've actually seen a few, even commercial limitations,

1501
01:08:33,840 --> 01:08:35,840
where it's just too big,

1502
01:08:35,840 --> 01:08:37,840
the request coming in is way too big to handle.

1503
01:08:37,840 --> 01:08:39,840
And so, yeah,

1504
01:08:39,840 --> 01:08:41,840
we do need to do better work to keep up on that.

1505
01:08:41,920 --> 01:08:43,920
So, I was actually at a

1506
01:08:43,920 --> 01:08:45,920
different commercial offering

1507
01:08:45,920 --> 01:08:47,920
for something like this, and we actually told the customer

1508
01:08:47,920 --> 01:08:49,920
like, way too many spans for the trace,

1509
01:08:49,920 --> 01:08:51,920
like, it's just impossible to keep up with.

1510
01:08:53,920 --> 01:08:55,920
So, but yeah, ideally as many

1511
01:08:55,920 --> 01:08:57,920
as you can, you can have, because

1512
01:08:57,920 --> 01:08:59,920
really, it's just a story of how a request

1513
01:08:59,920 --> 01:09:01,920
propagates through your system.

1514
01:09:01,920 --> 01:09:03,920
And if your system is huge and it has all these components,

1515
01:09:03,920 --> 01:09:05,920
you wouldn't want to be missing a piece, right?

1516
01:09:05,920 --> 01:09:07,920
Yeah?

1517
01:09:08,000 --> 01:09:10,000
So, what do you mean by

1518
01:09:10,000 --> 01:09:12,000
in-flight request?

1519
01:09:12,000 --> 01:09:14,000
So, if you have a request

1520
01:09:14,000 --> 01:09:16,000
for an API that takes like

1521
01:09:16,000 --> 01:09:18,000
an hour for a return on a clock,

1522
01:09:18,000 --> 01:09:20,000
that's probably why.

1523
01:09:20,000 --> 01:09:22,000
Do you get information about

1524
01:09:22,000 --> 01:09:24,000
in-flight requests

1525
01:09:24,000 --> 01:09:26,000
or does it only

1526
01:09:26,000 --> 01:09:28,000
cost us to monitor

1527
01:09:28,000 --> 01:09:30,000
on returns, nowhere?

1528
01:09:30,000 --> 01:09:32,000
What do you mean in-flight requests?

1529
01:09:32,000 --> 01:09:34,000
Let's say for some reason, you have

1530
01:09:34,080 --> 01:09:36,080
data and download all of these

1531
01:09:36,080 --> 01:09:38,080
and delete it, and that's how it applies.

1532
01:09:38,080 --> 01:09:40,080
Can you see how many of those

1533
01:09:40,080 --> 01:09:42,080
are in-flight while they're in-flight?

1534
01:09:42,080 --> 01:09:44,080
Do you have to wait until the failure

1535
01:09:44,080 --> 01:09:46,080
to do the show-down

1536
01:09:46,080 --> 01:09:48,080
with the return

1537
01:09:48,080 --> 01:09:50,080
ground? I haven't tried it, but

1538
01:09:50,080 --> 01:09:52,080
I think, currently for open telemetry, you have

1539
01:09:52,080 --> 01:09:54,080
to wait for something to finish, and then you'll see it.

1540
01:09:54,080 --> 01:09:56,080
I think that

1541
01:09:56,080 --> 01:09:58,080
is the case. It has to wait for the failure to succeed

1542
01:09:58,080 --> 01:10:00,080
and then. Which was then?

1543
01:10:00,080 --> 01:10:02,080
Yeah.

1544
01:10:02,160 --> 01:10:04,160
Would I explain with this

1545
01:10:04,160 --> 01:10:06,160
the spans are sent

1546
01:10:06,160 --> 01:10:08,160
by each service

1547
01:10:08,160 --> 01:10:10,160
and they're combined by the

1548
01:10:10,160 --> 01:10:12,160
collectors so you would see

1549
01:10:12,160 --> 01:10:14,160
the in-flight of and if you

1550
01:10:14,160 --> 01:10:16,160
can't refresh more data, they're showing up?

1551
01:10:18,160 --> 01:10:20,160
That's exactly the case.

1552
01:10:20,160 --> 01:10:22,160
That's the whole point. Since each one is

1553
01:10:22,160 --> 01:10:24,160
distributed, that's exactly what you said

1554
01:10:24,160 --> 01:10:26,160
over here. So say you have an application

1555
01:10:26,160 --> 01:10:28,160
that

1556
01:10:28,160 --> 01:10:30,160
pings this one

1557
01:10:30,240 --> 01:10:32,240
with requests. This one goes to request, this is

1558
01:10:32,240 --> 01:10:34,240
the flask, and then it goes even up to

1559
01:10:34,240 --> 01:10:36,240
Redis for example. Each one would send

1560
01:10:36,240 --> 01:10:38,240
a different span to the collector and it's up to the

1561
01:10:38,240 --> 01:10:40,240
collector to piece all of it together and to put

1562
01:10:40,240 --> 01:10:42,240
it into a unified trace.

1563
01:10:46,240 --> 01:10:48,240
Exactly.

1564
01:11:00,240 --> 01:11:02,240
True. True. Exactly.

1565
01:11:02,240 --> 01:11:04,240
So also the case

1566
01:11:04,240 --> 01:11:06,240
is that it's kind of a race condition. If you

1567
01:11:06,240 --> 01:11:08,240
check, for example, the hotel collector

1568
01:11:08,240 --> 01:11:10,240
or your telemetry backend, when this one's

1569
01:11:10,240 --> 01:11:12,240
finished but this one hasn't

1570
01:11:12,240 --> 01:11:14,240
or vice versa, then you could see

1571
01:11:14,240 --> 01:11:16,240
an incomplete trace, of course.

1572
01:11:16,240 --> 01:11:18,240
Because the span just hasn't

1573
01:11:18,240 --> 01:11:20,240
come in yet.

1574
01:11:20,240 --> 01:11:22,240
These are excellent questions.

1575
01:11:22,240 --> 01:11:24,240
Anymore?

1576
01:11:26,240 --> 01:11:28,240
Yeah?

1577
01:11:30,240 --> 01:11:32,240
Yeah?

1578
01:11:42,240 --> 01:11:44,240
Oh, definitely. We can do this with Yeager.

1579
01:11:44,240 --> 01:11:46,240
And we could say, for example, max

1580
01:11:46,240 --> 01:11:48,240
duration, min duration as well.

1581
01:11:48,240 --> 01:11:50,240
We can do this also with Zipkin as well.

1582
01:11:50,240 --> 01:11:52,240
And we could say for this service

1583
01:11:52,240 --> 01:11:54,240
I want to see things with max duration

1584
01:11:54,240 --> 01:11:56,240
or min duration as well.

1585
01:11:56,240 --> 01:11:58,240
Right.

1586
01:11:58,320 --> 01:12:00,320
I would want to be alert

1587
01:12:00,320 --> 01:12:02,320
to some number of

1588
01:12:02,320 --> 01:12:04,320
requests of

1589
01:12:04,320 --> 01:12:06,320
X number of packets.

1590
01:12:06,320 --> 01:12:08,320
And I don't think Yeager is doing that.

1591
01:12:08,320 --> 01:12:10,320
So we have the full

1592
01:12:10,320 --> 01:12:15,780
metrics in the

1593
01:12:15,780 --> 01:12:17,780
full alert. Is there any way to set

1594
01:12:17,780 --> 01:12:19,780
those metrics

1595
01:12:19,780 --> 01:12:21,780
to the time series database?

1596
01:12:21,780 --> 01:12:23,780
Yeah. Well, everything

1597
01:12:23,780 --> 01:12:25,780
is sent to Prometheus as well.

1598
01:12:25,780 --> 01:12:27,780
Which is a time series database. But

1599
01:12:27,780 --> 01:12:29,780
I don't know if what you're saying about having

1600
01:12:29,780 --> 01:12:31,780
an alert and things like that. I don't know if it's possible with these

1601
01:12:31,780 --> 01:12:33,780
vendor neutral options. You might have to go to a commercial option.

1602
01:12:35,780 --> 01:12:37,780
Yeah?

1603
01:12:37,780 --> 01:12:39,780
OpenHolinger is designed to send to a lot of

1604
01:12:39,780 --> 01:12:41,780
commercial options too. So you can

1605
01:12:41,780 --> 01:12:43,780
basically send it to Elastic Surgery wherever you

1606
01:12:43,780 --> 01:12:45,780
are in the shop and most of the places

1607
01:12:45,780 --> 01:12:47,780
to support it.

1608
01:12:47,780 --> 01:12:49,780
That's an option too. You don't have to use Yeager.

1609
01:12:49,780 --> 01:12:51,780
You can use Elastic Surgery to

1610
01:12:51,780 --> 01:12:53,780
swap other things. Exactly.

1611
01:12:57,780 --> 01:12:59,780
Yeah?

1612
01:12:59,780 --> 01:13:01,780
Question about the automatic

1613
01:13:01,780 --> 01:13:03,780
instrumentation for

1614
01:13:03,780 --> 01:13:05,780
streaming responses

1615
01:13:05,780 --> 01:13:07,780
over your government regenerative responses

1616
01:13:07,780 --> 01:13:09,780
and your government's response to the

1617
01:13:09,780 --> 01:13:11,780
authority for getting file uploads and

1618
01:13:11,780 --> 01:13:13,780
streaming up. How does that

1619
01:13:13,780 --> 01:13:15,780
go with the

1620
01:13:15,780 --> 01:13:17,780
data?

1621
01:13:17,780 --> 01:13:19,780
You were also coding it yourself.

1622
01:13:19,780 --> 01:13:21,780
That's an excellent question.

1623
01:13:21,780 --> 01:13:23,780
So these are excellent questions, guys.

1624
01:13:23,780 --> 01:13:25,780
I've actually never even tested downloading

1625
01:13:25,780 --> 01:13:27,780
something huge and having a trace with open telemetry.

1626
01:13:27,780 --> 01:13:29,780
We can test it at the very end if we have time.

1627
01:13:29,780 --> 01:13:31,780
That sounds excellent.

1628
01:13:51,780 --> 01:13:53,780
Both.

1629
01:13:55,780 --> 01:13:57,780
I'm sure there's a way. I'm sure there's a way to do it.

1630
01:13:57,780 --> 01:13:59,780
It's designed to be as flexible as you want.

1631
01:13:59,780 --> 01:14:01,780
So we can get into that.

1632
01:14:01,780 --> 01:14:03,780
That's very, very interesting.

1633
01:14:03,780 --> 01:14:05,780
Anything else?

1634
01:14:07,780 --> 01:14:09,780
Okay.

1635
01:14:09,780 --> 01:14:11,780
On that point,

1636
01:14:11,780 --> 01:14:13,780
the question that I would have is

1637
01:14:13,780 --> 01:14:15,780
with the automated

1638
01:14:15,780 --> 01:14:17,780
communication

1639
01:14:17,780 --> 01:14:19,780
how would you get access

1640
01:14:19,780 --> 01:14:21,780
to generate

1641
01:14:21,780 --> 01:14:23,780
shout spans?

1642
01:14:23,780 --> 01:14:25,780
To generate shout spans?

1643
01:14:25,780 --> 01:14:27,780
You still have all the flexibility

1644
01:14:27,780 --> 01:14:29,780
of the manual way.

1645
01:14:29,780 --> 01:14:31,780
We still have the trace provider. We can create the tracer.

1646
01:14:31,780 --> 01:14:33,780
And we can still do create span here inside.

1647
01:14:35,780 --> 01:14:37,780
So, yeah,

1648
01:14:37,780 --> 01:14:39,780
the Flask instrument, although it makes things easier,

1649
01:14:39,780 --> 01:14:41,780
we didn't give up anything to be able to use it.

1650
01:14:41,780 --> 01:14:43,780
We can use everything

1651
01:14:43,780 --> 01:14:45,780
in parallel and have both.

1652
01:14:45,780 --> 01:14:47,780
Does that make sense?

1653
01:14:47,780 --> 01:14:49,780
Yeah?

1654
01:15:07,780 --> 01:15:09,780
Exactly.

1655
01:15:23,780 --> 01:15:25,780
It's not giving you?

1656
01:15:37,780 --> 01:15:39,780
That's an excellent question.

1657
01:15:39,780 --> 01:15:41,780
So we still have the trace provider, right?

1658
01:15:41,780 --> 01:15:43,780
We have to keep this in mind.

1659
01:15:43,780 --> 01:15:45,780
Basically, when a request comes in,

1660
01:15:45,780 --> 01:15:47,780
its entry point will be this hello function.

1661
01:15:47,780 --> 01:15:49,780
Do you agree?

1662
01:15:49,780 --> 01:15:51,780
And so everything inside of here will be inside of the Flask instrumentation.

1663
01:15:51,780 --> 01:15:53,780
But from here, if we say, for example,

1664
01:15:53,780 --> 01:15:55,780
it won't be exactly this,

1665
01:15:55,780 --> 01:15:57,780
but it'll be like tracer.startspan.

1666
01:15:59,780 --> 01:16:01,780
And then we do like with, for example.

1667
01:16:03,780 --> 01:16:05,780
And we do whatever code we want in here.

1668
01:16:05,780 --> 01:16:07,780
This code will be inside of this new span.

1669
01:16:07,780 --> 01:16:09,780
You can call this, for example, Redis.

1670
01:16:09,780 --> 01:16:11,780
By the way, there is a Redis instrumenter

1671
01:16:11,780 --> 01:16:13,780
and everything else, and also AWS and everything else.

1672
01:16:13,780 --> 01:16:15,780
But let's say there's something that we don't have an instrumenter for.

1673
01:16:15,780 --> 01:16:17,780
We could create a span inside here.

1674
01:16:17,780 --> 01:16:19,780
But it's important to keep in mind,

1675
01:16:19,780 --> 01:16:21,780
this is a brand new span

1676
01:16:21,780 --> 01:16:23,780
with this brand new information.

1677
01:16:23,780 --> 01:16:25,780
It's completely blank.

1678
01:16:25,780 --> 01:16:27,780
But it is a child span of this span over here.

1679
01:16:27,780 --> 01:16:29,780
The hello and this slash.

1680
01:16:29,780 --> 01:16:31,780
So this is the hierarchy.

1681
01:16:31,780 --> 01:16:33,780
It wouldn't be a parallel.

1682
01:16:33,780 --> 01:16:35,780
It wouldn't be a parallel.

1683
01:16:35,780 --> 01:16:37,780
One is clearly the parent of another.

1684
01:16:37,780 --> 01:16:39,780
Yeah, amazing question, guys.

1685
01:16:41,780 --> 01:16:43,780
Any more?

1686
01:16:43,780 --> 01:16:45,780
Okay, amazing.

1687
01:16:45,780 --> 01:16:47,780
We're actually nearing the end, guys.

1688
01:16:47,780 --> 01:16:49,780
And I'm guessing this table over here

1689
01:16:49,780 --> 01:16:51,780
is pretty much finished, right?

1690
01:16:51,780 --> 01:16:55,780
I would like to see Prometheus.

1691
01:16:55,780 --> 01:16:59,780
What's the latest thing?

1692
01:16:59,780 --> 01:17:01,780
You showed something briefly before.

1693
01:17:01,780 --> 01:17:03,780
I don't know if it's perfect or bad.

1694
01:17:03,780 --> 01:17:05,780
Yeah.

1695
01:17:05,780 --> 01:17:07,780
Only because Prometheus, it wouldn't capture everything much

1696
01:17:07,780 --> 01:17:09,780
than about the trace, per se.

1697
01:17:09,780 --> 01:17:11,780
We could convert the traces to metrics.

1698
01:17:11,780 --> 01:17:13,780
But that would take quite a bit of effort here.

1699
01:17:13,780 --> 01:17:15,780
So what it really contains

1700
01:17:15,780 --> 01:17:17,780
is mostly about

1701
01:17:17,780 --> 01:17:19,780
the physical architecture

1702
01:17:19,780 --> 01:17:21,780
and the physical infrastructure

1703
01:17:21,780 --> 01:17:23,780
of the ultracollector.

1704
01:17:23,780 --> 01:17:25,780
So for example, we have

1705
01:17:25,780 --> 01:17:27,780
we can look at the queue size and queue capacity.

1706
01:17:27,780 --> 01:17:29,780
We can look at how many spans were sent.

1707
01:17:29,780 --> 01:17:31,780
We can look at, yeah?

1708
01:17:31,780 --> 01:17:33,780
I'm sorry.

1709
01:17:33,780 --> 01:17:35,780
How do you pull those down?

1710
01:17:35,780 --> 01:17:37,780
How do you get those?

1711
01:17:37,780 --> 01:17:39,780
Oh, so over here

1712
01:17:39,780 --> 01:17:41,780
I have my bar.

1713
01:17:41,780 --> 01:17:43,780
And so it's the globe here on the right side.

1714
01:17:43,780 --> 01:17:45,780
And so you can look at

1715
01:17:45,780 --> 01:17:47,780
you can look very deep into the physical architecture

1716
01:17:47,780 --> 01:17:49,780
that's running the collector.

1717
01:17:49,780 --> 01:17:51,780
For our purposes, it's not so exciting

1718
01:17:51,780 --> 01:17:53,780
because we're mostly interested about traces, right?

1719
01:17:59,780 --> 01:18:01,780
Yeah, exactly.

1720
01:18:01,780 --> 01:18:03,780
You could do just that

1721
01:18:03,780 --> 01:18:05,780
and then send them in.

1722
01:18:05,780 --> 01:18:07,780
So that's the whole point.

1723
01:18:07,780 --> 01:18:09,780
So that's the whole point.

1724
01:18:09,780 --> 01:18:11,780
So that's the whole point.

1725
01:18:11,780 --> 01:18:13,780
You could do just that

1726
01:18:13,780 --> 01:18:15,780
and then send them into Prometheus.

1727
01:18:15,780 --> 01:18:17,780
I've seen that happen before, yeah?

1728
01:18:35,780 --> 01:18:37,780
Of course, the request contains everything

1729
01:18:37,780 --> 01:18:39,780
about the start time and end time

1730
01:18:39,780 --> 01:18:41,780
and the creation itself.

1731
01:18:41,780 --> 01:18:43,780
So of course, you don't have to pull everything at once.

1732
01:18:43,780 --> 01:18:45,780
You could group it however you'd like it.

1733
01:18:45,780 --> 01:18:47,780
Does that answer your question?

1734
01:18:47,780 --> 01:18:49,780
Okay.

1735
01:18:49,780 --> 01:18:51,780
Anything else?

1736
01:18:51,780 --> 01:18:53,780
Do you guys want me to go more into Prometheus?

1737
01:18:53,780 --> 01:18:55,780
I mean, this is pretty much it.

1738
01:18:59,780 --> 01:19:01,780
Okay.

1739
01:19:01,780 --> 01:19:03,780
We can see exactly

1740
01:19:03,780 --> 01:19:05,780
some pretty cool things.

1741
01:19:05,780 --> 01:19:07,780
For example, the collector.

1742
01:19:07,780 --> 01:19:09,780
The process has been up.

1743
01:19:09,780 --> 01:19:11,780
We can execute that one.

1744
01:19:11,780 --> 01:19:13,780
And we can see it's been up

1745
01:19:13,780 --> 01:19:15,780
for

1746
01:19:15,780 --> 01:19:17,780
over 3000 seconds.

1747
01:19:17,780 --> 01:19:19,780
So good job, guys.

1748
01:19:19,780 --> 01:19:21,780
So

1749
01:19:21,780 --> 01:19:23,780
because it's time series,

1750
01:19:23,780 --> 01:19:25,780
just monotonically...

1751
01:19:25,780 --> 01:19:27,780
Yeah, exactly.

1752
01:19:27,780 --> 01:19:29,780
But as we have it right now,

1753
01:19:29,780 --> 01:19:31,780
there's not so much interesting information here.

1754
01:19:31,780 --> 01:19:33,780
That's the only issue.

1755
01:19:37,780 --> 01:19:39,780
What's the most interesting

1756
01:19:39,780 --> 01:19:41,780
thing about the matrix

1757
01:19:41,780 --> 01:19:43,780
that are related to the application rather than

1758
01:19:43,780 --> 01:20:03,320
the

1759
01:20:03,320 --> 01:20:05,320
With Omotelemetry?

1760
01:20:05,320 --> 01:20:07,320
In Prometheus, of course.

1761
01:20:07,320 --> 01:20:09,320
Oh, so we can look at it...

1762
01:20:09,320 --> 01:20:11,320
I think now we can look at it.

1763
01:20:11,320 --> 01:20:13,320
The response time?

1764
01:20:13,320 --> 01:20:15,320
Yeah, we can look at that soon.

1765
01:20:15,320 --> 01:20:17,320
But the exporter,

1766
01:20:17,320 --> 01:20:19,320
QCapacity, QSize,

1767
01:20:19,320 --> 01:20:21,320
so sense bands.

1768
01:20:21,320 --> 01:20:23,320
For example, we can look at...

1769
01:20:23,320 --> 01:20:25,320
empty, I guess.

1770
01:20:25,320 --> 01:20:27,320
Oh.

1771
01:20:31,320 --> 01:20:33,320
And so we see we've sent

1772
01:20:33,320 --> 01:20:35,320
58 spans, for example.

1773
01:20:35,320 --> 01:20:37,320
We can see how many failed

1774
01:20:37,320 --> 01:20:39,320
by failed spans

1775
01:20:39,320 --> 01:20:41,320
or failed requests.

1776
01:20:45,320 --> 01:20:47,320
And if we execute this one, we have...

1777
01:20:47,320 --> 01:20:49,320
It says zero, but I don't know about that.

1778
01:20:55,320 --> 01:20:57,320
So, if you were to convert the path

1779
01:20:57,320 --> 01:20:59,320
of the application and

1780
01:20:59,320 --> 01:21:01,320
give it the ground of the QLQS

1781
01:21:01,320 --> 01:21:03,320
for the class here...

1782
01:21:03,320 --> 01:21:05,320
Yeah, of course.

1783
01:21:05,320 --> 01:21:07,320
I just don't believe that the path

1784
01:21:07,320 --> 01:21:09,320
was sent in over here.

1785
01:21:09,320 --> 01:21:11,320
Yeah, it wasn't.

1786
01:21:11,320 --> 01:21:13,320
But once the path, for example, we send the trace,

1787
01:21:13,320 --> 01:21:15,320
we convert the trace to a metric and do that,

1788
01:21:15,320 --> 01:21:17,320
of course we could do that.

1789
01:21:17,320 --> 01:21:19,320
And this is the query language.

1790
01:21:19,320 --> 01:21:21,320
This is PromQL here at the bottom.

1791
01:21:21,320 --> 01:21:23,320
Whoever doesn't know it.

1792
01:21:23,320 --> 01:21:25,320
But I want this specific instance.

1793
01:21:25,320 --> 01:21:27,320
I want you to look at this specific job

1794
01:21:27,320 --> 01:21:29,320
and this service instance ID.

1795
01:21:29,320 --> 01:21:31,320
For example, this service...

1796
01:21:31,320 --> 01:21:33,320
So that's the only thing.

1797
01:21:33,320 --> 01:21:35,320
We've pointed Prometheus only at the collector,

1798
01:21:35,320 --> 01:21:37,320
not at the application.

1799
01:21:37,320 --> 01:21:39,320
Yeah?

1800
01:21:39,320 --> 01:21:41,320
Q. Converting the trace to the metric,

1801
01:21:41,320 --> 01:21:43,320
is that all automated anywhere

1802
01:21:43,320 --> 01:21:45,320
or is that all at-hoc

1803
01:21:45,320 --> 01:21:47,320
currently by the application itself?

1804
01:21:47,320 --> 01:21:49,320
A. Yeah.

1805
01:21:49,320 --> 01:21:51,320
I'm not sure about the details, but I think

1806
01:21:51,320 --> 01:21:53,320
it's all automated.

1807
01:21:53,320 --> 01:21:55,320
I just haven't seen it firsthand.

1808
01:21:55,320 --> 01:21:57,320
Yeah?

1809
01:21:57,320 --> 01:21:59,320
Q. So at the beginning, someone asked

1810
01:21:59,320 --> 01:22:01,320
whether or not OpenTelemetry

1811
01:22:01,320 --> 01:22:03,320
supported sampling as opposed to

1812
01:22:03,320 --> 01:22:05,320
just all the tracing every request.

1813
01:22:05,320 --> 01:22:07,320
How do you configure that?

1814
01:22:07,320 --> 01:22:09,320
A. Yeah.

1815
01:22:09,320 --> 01:22:11,320
I mean, let's see. I did see that it was released

1816
01:22:11,320 --> 01:22:13,320
pretty recently, the head tail sampling.

1817
01:22:13,320 --> 01:22:15,320
So let's see. We have

1818
01:22:15,320 --> 01:22:17,320
OpenTelemetry. We're going to Google it together, guys.

1819
01:22:17,320 --> 01:22:19,320
And we're going to see what's new.

1820
01:22:19,320 --> 01:22:21,320
Because things come out every day.

1821
01:22:21,320 --> 01:22:23,320
This is the cool thing. This was released

1822
01:22:23,320 --> 01:22:25,320
in March of 2020.

1823
01:22:25,320 --> 01:22:27,320
So...

1824
01:22:27,320 --> 01:22:29,320
Let's see.

1825
01:22:29,320 --> 01:22:31,320
And over here.

1826
01:22:39,320 --> 01:22:41,320
I don't know.

1827
01:22:41,320 --> 01:22:43,320
Let's see, guys.

1828
01:22:49,320 --> 01:22:51,320
Let's see.

1829
01:23:09,320 --> 01:23:11,320
It doesn't say here.

1830
01:23:11,320 --> 01:23:13,320
But let's continue at the end.

1831
01:23:13,320 --> 01:23:15,320
Yeah?

1832
01:23:15,320 --> 01:23:17,320
Q. So what's the process

1833
01:23:17,320 --> 01:23:19,320
of the process coming?

1834
01:23:19,320 --> 01:23:21,320
Is that some sort of

1835
01:23:21,320 --> 01:23:23,320
feature that's happening between the collector

1836
01:23:23,320 --> 01:23:25,320
and the Prometheus?

1837
01:23:25,320 --> 01:23:27,320
What's

1838
01:23:27,320 --> 01:23:29,320
up side?

1839
01:23:29,320 --> 01:23:31,320
A. It's just how long the process has been up

1840
01:23:31,320 --> 01:23:33,320
and how long it's been running.

1841
01:23:33,320 --> 01:23:35,320
Q. So that's the last process of the process?

1842
01:23:35,320 --> 01:23:37,320
A. No. This is what's important.

1843
01:23:37,320 --> 01:23:39,320
The collector. Because if you look over here

1844
01:23:39,320 --> 01:23:41,320
in our collector demo,

1845
01:23:41,320 --> 01:23:43,320
Prometheus YAML, we've pointed

1846
01:23:43,320 --> 01:23:45,320
Prometheus only at the collector.

1847
01:23:45,320 --> 01:23:47,320
So...

1848
01:23:47,320 --> 01:23:49,320
Q. So that doesn't necessarily mean the app is up for that?

1849
01:23:49,320 --> 01:23:51,320
It goes to the collector?

1850
01:23:51,320 --> 01:23:53,320
A. Correct. We'd have to point this to the application.

1851
01:23:55,320 --> 01:23:57,320
But for now it's pointed only at the collector,

1852
01:23:57,320 --> 01:23:59,320
so we're looking only at the collector for metrics.

1853
01:23:59,320 --> 01:24:01,320
Q. So in response to your

1854
01:24:01,320 --> 01:24:03,320
question right at the start,

1855
01:24:03,320 --> 01:24:05,320
like how do I tell if my app is

1856
01:24:05,320 --> 01:24:07,320
broken, needs to be restarted?

1857
01:24:07,320 --> 01:24:09,320
What would your go-to

1858
01:24:09,320 --> 01:24:11,320
metrics be, or your go-to

1859
01:24:11,320 --> 01:24:13,320
app, given the tools

1860
01:24:13,320 --> 01:24:15,320
that you've shown us and that we've implemented?

1861
01:24:15,320 --> 01:24:17,320
How do you answer that question?

1862
01:24:17,320 --> 01:24:19,320
A. Yeah. That's exactly it.

1863
01:24:19,320 --> 01:24:21,320
I would send the

1864
01:24:21,320 --> 01:24:23,320
metrics to the collector as well.

1865
01:24:23,320 --> 01:24:25,320
Just a bit more, sorry.

1866
01:24:25,320 --> 01:24:27,320
Q. So given everything that's set up, how do you answer the question

1867
01:24:27,320 --> 01:24:29,320
what's wrong? You've got an error page.

1868
01:24:29,320 --> 01:24:31,320
You've got all these metrics

1869
01:24:31,320 --> 01:24:33,320
announced. Which one do you look at?

1870
01:24:33,320 --> 01:24:35,320
A. My go-to is always traces,

1871
01:24:35,320 --> 01:24:37,320
number one. I jump to Jaeger, but

1872
01:24:37,320 --> 01:24:39,320
that's the thing. That if Jaeger says

1873
01:24:39,320 --> 01:24:41,320
there hasn't been any traces for the last hour,

1874
01:24:41,320 --> 01:24:43,320
then I would go to, I would resort to this.

1875
01:24:43,320 --> 01:24:45,320
That's why it's kind of more of a backup. But traces are really number one.

1876
01:25:03,320 --> 01:25:05,320
That's true, but sometimes traces are generated

1877
01:25:05,320 --> 01:25:07,320
without you getting a response back.

1878
01:25:07,320 --> 01:25:09,320
It could be that one's working and one's not.

1879
01:25:09,320 --> 01:25:11,320
So it's not a definite yes or no.

1880
01:25:17,320 --> 01:25:19,320
Exactly.

1881
01:25:19,320 --> 01:25:21,320
At least you'll get something. You'll be able to see, oh, it's an error right there.

1882
01:25:21,320 --> 01:25:23,320
Even if the user sees

1883
01:25:23,320 --> 01:25:25,320
page destroyed,

1884
01:25:25,320 --> 01:25:27,320
there's no application, you'll probably still get traces.

1885
01:25:29,320 --> 01:25:31,320
But yeah, traces

1886
01:25:31,320 --> 01:25:33,320
number one, and then metrics as a resort,

1887
01:25:33,320 --> 01:25:35,320
and then logs

1888
01:25:35,320 --> 01:25:37,320
finally, if there's nothing.

1889
01:25:39,320 --> 01:25:41,320
If everything looks healthy apart from slash error,

1890
01:25:41,320 --> 01:25:43,320
which looks sick, then I would be in the

1891
01:25:43,320 --> 01:25:45,320
confused, like, isn't this healthy?

1892
01:25:45,320 --> 01:25:47,320
Isn't this? Exactly. Yeah.

1893
01:25:47,320 --> 01:25:49,320
Yeah, that's exactly what we do.

1894
01:25:49,320 --> 01:25:51,320
We'll go over here, and

1895
01:25:51,320 --> 01:25:53,320
yeah.

1896
01:25:55,320 --> 01:25:57,320
It looks a bit hard to do in these.

1897
01:26:05,320 --> 01:26:07,320
Oh, over here. I'll do area equals true.

1898
01:26:07,320 --> 01:26:09,320
Sorry guys, I'm not too familiar with these. I'm more familiar with a few commercial options,

1899
01:26:09,320 --> 01:26:11,320
so I've tried to remain

1900
01:26:11,320 --> 01:26:13,320
vendor neutral today and stay open source.

1901
01:26:13,320 --> 01:26:15,320
But over here we do area equals true.

1902
01:26:15,320 --> 01:26:17,320
You would look at what came up, and let's say

1903
01:26:17,320 --> 01:26:19,320
it was a couple minutes ago, you say, oh, I got a trace

1904
01:26:19,320 --> 01:26:21,320
right there. And what's the error?

1905
01:26:23,320 --> 01:26:25,320
At least you have an idea now of what happened.

1906
01:26:27,320 --> 01:26:29,320
And then also, if you're also capturing user data,

1907
01:26:29,320 --> 01:26:31,320
you could see, you would have, for example,

1908
01:26:31,320 --> 01:26:33,320
user.email, for example, or user.username.

1909
01:26:33,320 --> 01:26:35,320
Oh, this is exactly the user that was affected

1910
01:26:35,320 --> 01:26:37,320
by this error and this and that.

1911
01:26:37,320 --> 01:26:39,320
And so at least you have some context as to

1912
01:26:39,320 --> 01:26:41,320
not just, oh, it broke, but it broke for this

1913
01:26:41,320 --> 01:26:43,320
user when you clicked this button.

1914
01:26:47,320 --> 01:26:49,320
Oh, yeah. So.

1915
01:26:49,320 --> 01:26:51,320
Over here in tags, I just

1916
01:26:51,320 --> 01:26:53,320
said area equal to true.

1917
01:26:53,320 --> 01:26:55,320
And let's see how helpful this question mark is.

1918
01:26:55,320 --> 01:26:57,320
Yeah, so we can do a few things.

1919
01:26:57,320 --> 01:26:59,320
And I saw a question over here.

1920
01:26:59,320 --> 01:27:01,320
We'll start with the one on the right.

1921
01:27:01,320 --> 01:27:03,320
Yeah, right now. Sorry, sorry.

1922
01:27:03,320 --> 01:27:05,320
We just got a bit distracted.

1923
01:27:15,320 --> 01:27:17,320
Sure, yeah, let's do that.

1924
01:27:17,320 --> 01:27:19,320
Let's do that right now.

1925
01:27:19,320 --> 01:27:21,320
Let's actually do it in the no-code.

1926
01:27:21,320 --> 01:27:23,320
That would be pretty fun.

1927
01:27:23,320 --> 01:27:25,320
Okay, so any more questions

1928
01:27:25,320 --> 01:27:27,320
before the no-code?

1929
01:27:27,320 --> 01:27:29,320
Okay, perfect.

1930
01:27:29,320 --> 01:27:31,320
So the first one, the

1931
01:27:31,320 --> 01:27:33,320
manual way that was not so much fun.

1932
01:27:33,320 --> 01:27:35,320
It was a one or a two out of ten at most, right?

1933
01:27:35,320 --> 01:27:37,320
By your definition, not by mine.

1934
01:27:37,320 --> 01:27:39,320
And the contrib was a bit better.

1935
01:27:39,320 --> 01:27:41,320
At least it was at least four or five.

1936
01:27:41,320 --> 01:27:43,320
At least we got some more information.

1937
01:27:43,320 --> 01:27:45,320
But it was still defined, still needed some boilerplate.

1938
01:27:45,320 --> 01:27:47,320
And so let's go over here.

1939
01:27:47,320 --> 01:27:49,320
We'll come back.

1940
01:27:49,320 --> 01:27:51,320
And we're ready for step 14.

1941
01:27:51,320 --> 01:27:53,320
The no-code instrumentation.

1942
01:27:53,320 --> 01:27:55,320
Now this could be a bit heavy on your computer.

1943
01:27:55,320 --> 01:27:57,320
It could take some time to download everything.

1944
01:27:57,320 --> 01:27:59,320
But you kind of need to pip install this

1945
01:27:59,320 --> 01:28:01,320
OpenTelemetryDistro package.

1946
01:28:07,320 --> 01:28:09,320
We've installed it.

1947
01:28:09,320 --> 01:28:13,320
And then we just need to run this command.

1948
01:28:13,320 --> 01:28:15,320
What this does, OpenTelemetryDistro,

1949
01:28:15,320 --> 01:28:17,320
when you install it, it installs a CLI command

1950
01:28:17,320 --> 01:28:19,320
called OpenTelemetry Bootstrap.

1951
01:28:19,320 --> 01:28:21,320
And when you run it with install,

1952
01:28:21,320 --> 01:28:23,320
I believe minus A means all, to install all of them.

1953
01:28:23,320 --> 01:28:25,320
And this could take a few

1954
01:28:25,320 --> 01:28:27,320
seconds or maybe even a minute on your computer.

1955
01:28:27,320 --> 01:28:29,320
And it'll install all of the

1956
01:28:29,320 --> 01:28:31,320
contrib instrumentations manually.

1957
01:28:31,320 --> 01:28:33,320
Or automatically meaning.

1958
01:28:33,320 --> 01:28:35,320
So urlib3,

1959
01:28:35,320 --> 01:28:37,320
we got request earlier,

1960
01:28:37,320 --> 01:28:39,320
we got everything else.

1961
01:28:39,320 --> 01:28:41,320
So OpenTelemetry instrumentation request.

1962
01:28:41,320 --> 01:28:43,320
So exactly. So we'll do this in the no-code.

1963
01:28:43,320 --> 01:28:45,320
We'll get the waterfall.

1964
01:28:45,320 --> 01:28:47,320
And yeah, an excellent question by the way

1965
01:28:47,320 --> 01:28:49,320
about the waterfall.

1966
01:28:51,320 --> 01:28:53,320
We've got gfpc.

1967
01:28:53,320 --> 01:28:55,320
Is everyone here, is anyone waiting for this to finish?

1968
01:28:57,320 --> 01:28:59,320
Okay, perfect. Let's move on.

1969
01:28:59,320 --> 01:29:01,320
Step 15.

1970
01:29:01,320 --> 01:29:03,320
And so we got this long, long, long command.

1971
01:29:03,320 --> 01:29:05,320
And so when you install this bootstrap and you do install,

1972
01:29:05,320 --> 01:29:07,320
I believe also when you,

1973
01:29:07,320 --> 01:29:09,320
I believe it's here actually at this stage.

1974
01:29:09,320 --> 01:29:11,320
When you do pip install OpenTelemetryDistro,

1975
01:29:11,320 --> 01:29:13,320
it installs two main CLI tools.

1976
01:29:13,320 --> 01:29:15,320
One is OpenTelemetry Bootstrap.

1977
01:29:15,320 --> 01:29:17,320
And what is OpenTelemetry Instrument?

1978
01:29:17,320 --> 01:29:19,320
OpenTelemetry Instrument is for Python,

1979
01:29:19,320 --> 01:29:21,320
you can basically wrap your

1980
01:29:21,320 --> 01:29:23,320
Python command with OpenTelemetry Instrument

1981
01:29:23,320 --> 01:29:25,320
and have the benefits of the contrib

1982
01:29:25,320 --> 01:29:27,320
but without touching anything in the source code.

1983
01:29:29,320 --> 01:29:31,320
So what we're doing here is

1984
01:29:31,320 --> 01:29:33,320
we're doing OpenTelemetry Instrument

1985
01:29:33,320 --> 01:29:35,320
and we're defining our trace exporter.

1986
01:29:35,320 --> 01:29:37,320
I want to send it exactly like we did earlier.

1987
01:29:37,320 --> 01:29:39,320
I want to send it to Othelpy

1988
01:29:39,320 --> 01:29:41,320
and I want to send it to my console as well

1989
01:29:41,320 --> 01:29:43,320
and print it out.

1990
01:29:43,320 --> 01:29:45,320
I'm going to define my service name

1991
01:29:45,320 --> 01:29:47,320
and I want it to be MyFlaskInProductionAuto.

1992
01:29:47,320 --> 01:29:49,320
So this is a new one.

1993
01:29:49,320 --> 01:29:51,320
So we can see a brand new service

1994
01:29:51,320 --> 01:29:53,320
and you're going to define exactly where

1995
01:29:53,320 --> 01:29:55,320
we're going to send it to for my

1996
01:29:55,320 --> 01:29:57,320
Othelpy endpoint and that's going to be

1997
01:29:57,320 --> 01:29:59,320
localhost 4317.

1998
01:29:59,320 --> 01:30:01,320
I believe this is

1999
01:30:01,320 --> 01:30:03,320
already suitable for Windows users because

2000
01:30:03,320 --> 01:30:05,320
it's already localhost.

2001
01:30:05,320 --> 01:30:07,320
And then we also attach it to the base.

2002
01:30:07,320 --> 01:30:09,320
So we're not running Python 3 separately.

2003
01:30:09,320 --> 01:30:11,320
This is part of the same command.

2004
01:30:11,320 --> 01:30:13,320
And this is the command that I used

2005
01:30:13,320 --> 01:30:15,320
to run Python.

2006
01:30:15,320 --> 01:30:17,320
And this is the file that I'm going to be running.

2007
01:30:17,320 --> 01:30:19,320
So it's part of the exact same command.

2008
01:30:19,320 --> 01:30:21,320
So our trace is exporter,

2009
01:30:21,320 --> 01:30:23,320
my service name,

2010
01:30:23,320 --> 01:30:25,320
my exporter

2011
01:30:25,320 --> 01:30:27,320
Othelpy endpoint,

2012
01:30:27,320 --> 01:30:29,320
and Python 3

2013
01:30:29,320 --> 01:30:31,320
FlaskBase.py.

2014
01:30:31,320 --> 01:30:33,320
So we'll first run it

2015
01:30:33,320 --> 01:30:35,320
normally and then we'll add like

2016
01:30:35,320 --> 01:30:37,320
requests or something. We'll make a request and we can see the waterfall.

2017
01:30:39,320 --> 01:30:41,320
So basically copy this whole thing.

2018
01:30:43,320 --> 01:30:45,320
Does anyone have any questions about anything here

2019
01:30:45,320 --> 01:30:47,320
about the big command?

2020
01:30:47,320 --> 01:30:49,320
You agree it's kind of the same as what we just did?

2021
01:30:49,320 --> 01:30:51,320
We just defined exactly where to send it to,

2022
01:30:51,320 --> 01:30:53,320
what we want to send. Yeah?

2023
01:30:53,320 --> 01:30:55,320
This open for the

2024
01:30:55,320 --> 01:30:57,320
you ran it with other than Python.

2025
01:30:59,320 --> 01:31:01,320
That's a good question.

2026
01:31:01,320 --> 01:31:03,320
It's like another program that you can use.

2027
01:31:03,320 --> 01:31:05,320
That's actually a great question.

2028
01:31:05,320 --> 01:31:07,320
I had the exact same one until I realized

2029
01:31:07,320 --> 01:31:09,320
that, oh, it's by pip3 install.

2030
01:31:09,320 --> 01:31:11,320
So there could be,

2031
01:31:11,320 --> 01:31:13,320
but not for, because

2032
01:31:13,320 --> 01:31:15,320
it's for pip install that will contain only the Python relevant stuff.

2033
01:31:17,320 --> 01:31:19,320
And we'll start with the

2034
01:31:19,320 --> 01:31:21,320
Can you use environment variables instead of

2035
01:31:21,320 --> 01:31:23,320
like dash dash stuff? Of course, yeah.

2036
01:31:23,320 --> 01:31:25,320
You can use environment. So it could be even more

2037
01:31:25,320 --> 01:31:27,320
simpler, even simpler.

2038
01:31:27,320 --> 01:31:29,320
And sorry, we'll just leave the one in the back first.

2039
01:31:43,320 --> 01:31:47,320
I thought it would be part of this bootstrap and this distro, but if it's not, okay, then I'm sorry.

2040
01:31:47,320 --> 01:31:49,320
But you should already have it from when we did it over here.

2041
01:31:55,320 --> 01:31:57,320
Okay.

2042
01:31:57,320 --> 01:31:59,320
So good to hear it worked. Good job.

2043
01:31:59,320 --> 01:32:01,320
And over here in the front?

2044
01:32:01,320 --> 01:32:03,320
Yeah.

2045
01:32:03,320 --> 01:32:05,320
Okay.

2046
01:32:05,320 --> 01:32:07,320
So I'm going to use the

2047
01:32:07,320 --> 01:32:09,320
I'm going to use the

2048
01:32:09,320 --> 01:32:11,320
I'm going to use the

2049
01:32:11,320 --> 01:32:13,320
And over here in the front?

2050
01:32:13,320 --> 01:32:15,320
If your Python app

2051
01:32:15,320 --> 01:32:17,320
is not using Python app

2052
01:32:17,320 --> 01:32:19,320
instead of importing it and launching it in process

2053
01:32:19,320 --> 01:32:21,320
does it follow that

2054
01:32:21,320 --> 01:32:23,320
or can you use subprocess to launch

2055
01:32:23,320 --> 01:32:25,320
full-fledged JavaScript properties

2056
01:32:25,320 --> 01:32:27,320
or does it follow that?

2057
01:32:27,320 --> 01:32:29,320
You're saying if you're doing open telemetry

2058
01:32:29,320 --> 01:32:31,320
instrument on a Python file

2059
01:32:31,320 --> 01:32:33,320
and this file internally calls subprocess

2060
01:32:33,320 --> 01:32:35,320
and it runs Python 3,

2061
01:32:35,320 --> 01:32:37,320
run this file?

2062
01:32:37,320 --> 01:32:39,320
I believe you would have to change the subprocess command inside.

2063
01:32:39,320 --> 01:32:41,320
You'd have to say open telemetry instrument Python 3.

2064
01:32:45,320 --> 01:32:47,320
I don't believe it wraps.

2065
01:32:47,320 --> 01:32:49,320
It wraps that call.

2066
01:32:49,320 --> 01:32:51,320
Oh, okay.

2067
01:33:09,320 --> 01:33:11,320
That's amazing. I might come and ask you.

2068
01:33:11,320 --> 01:33:13,320
That's pretty cool.

2069
01:33:13,320 --> 01:33:15,320
If you want to know how it works, you can come ask me afterwards.

2070
01:33:15,320 --> 01:33:17,320
I've been playing around with this for our last six months

2071
01:33:17,320 --> 01:33:19,320
and it's pretty cool stuff.

2072
01:33:19,320 --> 01:33:21,320
That's amazing. I might come and ask you.

2073
01:33:21,320 --> 01:33:23,320
Or I can come out after.

2074
01:33:23,320 --> 01:33:25,320
Anything else?

2075
01:33:25,320 --> 01:33:27,320
Anyone else?

2076
01:33:27,320 --> 01:33:29,320
Okay.

2077
01:33:29,320 --> 01:33:31,320
Guys, you're asking some amazing questions.

2078
01:33:31,320 --> 01:33:33,320
I'm really, really proud.

2079
01:33:33,320 --> 01:33:35,320
Okay.

2080
01:33:35,320 --> 01:33:37,320
Okay.

2081
01:33:37,320 --> 01:33:39,320
Okay.

2082
01:33:39,320 --> 01:33:41,320
So we have this big, big command.

2083
01:33:43,320 --> 01:33:45,320
We'll copy this command

2084
01:33:45,320 --> 01:33:47,320
and we'll put it into a file named

2085
01:33:47,320 --> 01:33:49,320
Flask Instrumentation NoCode.sh

2086
01:33:49,320 --> 01:33:51,320
So I'm going to just copy this

2087
01:33:51,320 --> 01:33:53,320
because I'd like to create

2088
01:33:53,320 --> 01:33:55,320
files with touch, just to make sure it's there.

2089
01:33:55,320 --> 01:33:57,320
So I'll touch and I'll create this

2090
01:33:57,320 --> 01:33:59,320
NoCode file.

2091
01:33:59,320 --> 01:34:01,320
I'll place this big command in there.

2092
01:34:01,320 --> 01:34:03,320
And over here.

2093
01:34:03,320 --> 01:34:05,320
So we'll go over here to NoCode.sh

2094
01:34:05,320 --> 01:34:07,320
and we print it.

2095
01:34:07,320 --> 01:34:09,320
So you could do it like this

2096
01:34:09,320 --> 01:34:11,320
just to make it more readable.

2097
01:34:11,320 --> 01:34:13,320
Maybe this is a better idea.

2098
01:34:13,320 --> 01:34:15,320
But we'll just leave it as is for now.

2099
01:34:17,320 --> 01:34:19,320
So,

2100
01:34:19,320 --> 01:34:21,320
oh, I like to do Chmod. Does anyone not know what Chmod is?

2101
01:34:21,320 --> 01:34:23,320
Okay, amazing.

2102
01:34:23,320 --> 01:34:25,320
Can anyone tell me what Chmod is

2103
01:34:25,320 --> 01:34:27,320
if you're also knowledgeable about this?

2104
01:34:27,320 --> 01:34:29,320
Okay.

2105
01:34:29,320 --> 01:34:31,320
What does this line do?

2106
01:34:31,320 --> 01:34:33,320
Okay, you got it. Good job.

2107
01:34:33,320 --> 01:34:35,320
Okay.

2108
01:34:35,320 --> 01:34:37,320
And then we're just going to run this file

2109
01:34:37,320 --> 01:34:39,320
as an executable, like you guys said.

2110
01:34:41,320 --> 01:34:43,320
And so what we did is

2111
01:34:43,320 --> 01:34:45,320
we're running our Flask

2112
01:34:45,320 --> 01:34:47,320
Base.py.

2113
01:34:47,320 --> 01:34:49,320
We're running this exact same file

2114
01:34:49,320 --> 01:34:51,320
that we looked at earlier

2115
01:34:51,320 --> 01:34:53,320
that has no instrumentation.

2116
01:34:53,320 --> 01:34:55,320
It's just basically a program

2117
01:34:55,320 --> 01:34:57,320
that has no instrumentation.

2118
01:34:57,320 --> 01:34:59,320
It's just basically a print hello world.

2119
01:34:59,320 --> 01:35:01,320
It could be anything else.

2120
01:35:01,320 --> 01:35:03,320
But the fact that we're using Flask

2121
01:35:03,320 --> 01:35:05,320
and this has instrumentation

2122
01:35:05,320 --> 01:35:07,320
for Flask, then

2123
01:35:07,320 --> 01:35:09,320
we should see something cool out of it.

2124
01:35:09,320 --> 01:35:11,320
Now over here, if I curl localhost 5000,

2125
01:35:19,320 --> 01:35:21,320
then I want to see a print here because I am printing

2126
01:35:21,320 --> 01:35:23,320
the console and I got it.

2127
01:35:23,320 --> 01:35:25,320
And I want to see the span come in as well.

2128
01:35:25,320 --> 01:35:27,320
And we got it.

2129
01:35:27,320 --> 01:35:29,320
So now if we span this a little bit

2130
01:35:29,320 --> 01:35:31,320
and we do error as well.

2131
01:35:39,320 --> 01:35:41,320
So now if I come back to Jaeger

2132
01:35:41,320 --> 01:35:43,320
and you see

2133
01:35:43,320 --> 01:35:45,320
it doesn't show up here. I do need to refresh.

2134
01:35:45,320 --> 01:35:47,320
So I'll refresh

2135
01:35:47,320 --> 01:35:49,320
and now the auto does show up.

2136
01:35:49,320 --> 01:35:51,320
So now we have our three main ways

2137
01:35:51,320 --> 01:35:53,320
of instrumenting. The manual, the

2138
01:35:53,320 --> 01:35:55,320
intrib and the no code or the auto way.

2139
01:35:59,320 --> 01:36:01,320
So I'm going to look for traces

2140
01:36:01,320 --> 01:36:03,320
and okay we still have error equals true

2141
01:36:03,320 --> 01:36:05,320
that doesn't affect us in any way.

2142
01:36:05,320 --> 01:36:07,320
So we'll look at this one with an error.

2143
01:36:09,320 --> 01:36:11,320
And now we can see we've actually captured

2144
01:36:11,320 --> 01:36:13,320
a little bit of information. That's pretty good.

2145
01:36:13,320 --> 01:36:15,320
We've captured the fact that it's an

2146
01:36:15,320 --> 01:36:17,320
HTTP call to this.

2147
01:36:17,320 --> 01:36:19,320
We didn't capture the headers

2148
01:36:19,320 --> 01:36:21,320
but this is the environment variable.

2149
01:36:21,320 --> 01:36:23,320
We could just set that one.

2150
01:36:23,320 --> 01:36:25,320
Let's actually take this from the contrib.

2151
01:36:25,320 --> 01:36:27,320
So let's take this one.

2152
01:36:29,320 --> 01:36:31,320
And so if I put it in front of this

2153
01:36:31,320 --> 01:36:33,320
this equals dot star

2154
01:36:33,320 --> 01:36:35,320
and can anyone tell me

2155
01:36:35,320 --> 01:36:37,320
how do you do multiple? You can just do space

2156
01:36:37,320 --> 01:36:39,320
and just do the same thing again?

2157
01:36:39,320 --> 01:36:41,320
Okay awesome.

2158
01:36:43,320 --> 01:36:45,320
So I'll do this one as well.

2159
01:36:45,320 --> 01:36:47,320
So capture the request and capture the

2160
01:36:47,320 --> 01:36:49,320
response equals dot star.

2161
01:36:49,320 --> 01:36:51,320
And then our command.

2162
01:36:51,320 --> 01:36:53,320
Right?

2163
01:36:53,320 --> 01:36:57,320
Any quotes?

2164
01:36:57,320 --> 01:36:59,320
Makes sense.

2165
01:37:05,320 --> 01:37:07,320
And let's run it.

2166
01:37:11,320 --> 01:37:13,320
We'll get the error one.

2167
01:37:13,320 --> 01:37:15,320
And let's see.

2168
01:37:15,320 --> 01:37:17,320
So I want to see in Flask

2169
01:37:19,320 --> 01:37:21,320
this exact same thing

2170
01:37:21,320 --> 01:37:23,320
but with also

2171
01:37:23,320 --> 01:37:25,320
everything about the headers in the request

2172
01:37:25,320 --> 01:37:27,320
and the response.

2173
01:37:27,320 --> 01:37:29,320
So we'll find more traces.

2174
01:37:29,320 --> 01:37:31,320
When did this one come in?

2175
01:37:31,320 --> 01:37:33,320
A few seconds ago is good enough.

2176
01:37:33,320 --> 01:37:35,320
And boom we got it.

2177
01:37:35,320 --> 01:37:37,320
So this is quite a few

2178
01:37:37,320 --> 01:37:39,320
bits of information.

2179
01:37:39,320 --> 01:37:41,320
It's not bad. It's more than nothing

2180
01:37:41,320 --> 01:37:43,320
would you agree?

2181
01:37:43,320 --> 01:37:45,320
We can think something about the process.

2182
01:37:45,320 --> 01:37:47,320
So this might seem trivial to you

2183
01:37:47,320 --> 01:37:49,320
that we collected today but back in

2184
01:37:49,320 --> 01:37:51,320
OpenTracing and OpenSense and a few

2185
01:37:51,320 --> 01:37:53,320
older protocols before OpenTelemetry

2186
01:37:53,320 --> 01:37:55,320
this wasn't always collected and it became

2187
01:37:55,320 --> 01:37:57,320
quite a pain to figure out exactly which

2188
01:37:57,320 --> 01:37:59,320
version the user was using

2189
01:37:59,320 --> 01:38:01,320
and what language exactly. And so now it's

2190
01:38:01,320 --> 01:38:03,320
just sent in the trace and just

2191
01:38:03,320 --> 01:38:05,320
make things easier.

2192
01:38:05,320 --> 01:38:07,320
Is that a question in the back?

2193
01:38:07,320 --> 01:38:09,320
Okay. And we collect also in the

2194
01:38:09,320 --> 01:38:11,320
log as well everything about the exception.

2195
01:38:11,320 --> 01:38:13,320
Everything you'd see in Python

2196
01:38:13,320 --> 01:38:15,320
as if you were on the computer itself.

2197
01:38:15,320 --> 01:38:17,320
And

2198
01:38:17,320 --> 01:38:19,320
yeah. Any question about this?

2199
01:38:19,320 --> 01:38:21,320
Go ahead.

2200
01:38:21,320 --> 01:38:23,320
Does Auto wait for the

2201
01:38:23,320 --> 01:38:25,320
production?

2202
01:38:25,320 --> 01:38:27,320
You would do something like Auto, yeah.

2203
01:38:27,320 --> 01:38:29,320
So when I

2204
01:38:29,320 --> 01:38:31,320
do production I have

2205
01:38:31,320 --> 01:38:33,320
something that really works.

2206
01:38:33,320 --> 01:38:35,320
So if you want to start

2207
01:38:35,320 --> 01:38:37,320
a new project

2208
01:38:37,320 --> 01:38:39,320
I have to do

2209
01:38:39,320 --> 01:38:41,320
how would that work with the

2210
01:38:41,320 --> 01:38:43,320
automatic production?

2211
01:38:43,320 --> 01:38:45,320
Let's see. I actually have no experience with Unicorn personally.

2212
01:38:45,320 --> 01:38:47,320
I haven't used it.

2213
01:38:47,320 --> 01:38:53,320
A thread or eight processes?

2214
01:38:53,320 --> 01:38:55,320
Okay.

2215
01:38:55,320 --> 01:38:57,320
So let's see.

2216
01:38:57,320 --> 01:38:59,320
OpenTelemetry Unicorn.

2217
01:38:59,320 --> 01:39:01,320
And working with four processes.

2218
01:39:01,320 --> 01:39:03,320
So this is something they've actually

2219
01:39:03,320 --> 01:39:05,320
taken care of. It is possible.

2220
01:39:05,320 --> 01:39:07,320
But personally I've never

2221
01:39:07,320 --> 01:39:09,320
worked with Unicorn before.

2222
01:39:09,320 --> 01:39:11,320
So that would not be auto-aimed on the other side?

2223
01:39:11,320 --> 01:39:13,320
Oh, if we think for the

2224
01:39:13,320 --> 01:39:15,320
contrib way, let's see.

2225
01:39:15,320 --> 01:39:17,320
I have a question. Do you have to do a

2226
01:39:17,320 --> 01:39:19,320
string-based version or do you have to do a

2227
01:39:19,320 --> 01:39:21,320
top-based version?

2228
01:39:21,320 --> 01:39:23,320
I would just wonder if

2229
01:39:23,320 --> 01:39:25,320
you call a nine-row or a ten-row.

2230
01:39:25,320 --> 01:39:27,320
It should be.

2231
01:39:27,320 --> 01:39:29,320
Yeah. Contrib and auto are the same thing.

2232
01:39:29,320 --> 01:39:31,320
Pretty much.

2233
01:39:31,320 --> 01:39:33,320
Alright.

2234
01:39:33,320 --> 01:39:35,320
This is kind of like a modified

2235
01:39:35,320 --> 01:39:37,320
contrib.

2236
01:39:37,320 --> 01:39:39,320
And

2237
01:39:39,320 --> 01:39:41,320
okay. So let's do what you guys said.

2238
01:39:41,320 --> 01:39:43,320
Let's do our requests.

2239
01:39:43,320 --> 01:39:45,320
So I'm going to make sure.

2240
01:39:45,320 --> 01:39:47,320
I'm going to pip to reinstall

2241
01:39:47,320 --> 01:39:49,320
requests.

2242
01:39:51,320 --> 01:39:53,320
Now that we have requests, I'm going to be

2243
01:39:53,320 --> 01:39:57,320
So I want you guys to tell me.

2244
01:39:57,320 --> 01:39:59,320
If I do over here

2245
01:39:59,320 --> 01:40:01,320
request.get

2246
01:40:01,320 --> 01:40:03,320
Who's the parent span? Flask

2247
01:40:03,320 --> 01:40:05,320
or request?

2248
01:40:07,320 --> 01:40:09,320
Flask. Of course. Because it enters

2249
01:40:09,320 --> 01:40:11,320
Flask. And then inside of that

2250
01:40:11,320 --> 01:40:13,320
you have the request. So the request I

2251
01:40:13,320 --> 01:40:15,320
expect it to be the child span.

2252
01:40:27,320 --> 01:40:29,320
So we're going to make a request to

2253
01:40:29,320 --> 01:40:31,320
Google. And

2254
01:40:31,320 --> 01:40:33,320
we can do that and

2255
01:40:33,320 --> 01:40:35,320
we can print the status code.

2256
01:40:37,320 --> 01:40:39,320
Okay.

2257
01:40:39,320 --> 01:40:41,320
Let's do this.

2258
01:40:41,320 --> 01:40:43,320
So I run the no-code way.

2259
01:40:45,320 --> 01:40:47,320
And

2260
01:40:47,320 --> 01:40:49,320
because it's only in this

2261
01:40:49,320 --> 01:40:51,320
one, so we'll do without the error. We'll do this.

2262
01:40:55,320 --> 01:40:57,320
It didn't print. Oh, it should print over here,

2263
01:40:57,320 --> 01:40:59,320
right? So let's see.

2264
01:40:59,320 --> 01:41:01,320
And so we see two spans here.

2265
01:41:01,320 --> 01:41:03,320
This is the Flask that finished.

2266
01:41:03,320 --> 01:41:05,320
And this is the request.

2267
01:41:05,320 --> 01:41:07,320
This is the

2268
01:41:07,320 --> 01:41:09,320
request that we made from the

2269
01:41:09,320 --> 01:41:11,320
client.

2270
01:41:11,320 --> 01:41:13,320
Yep, 200. So exactly

2271
01:41:13,320 --> 01:41:15,320
what you said. Because the Flask is kind of

2272
01:41:15,320 --> 01:41:17,320
wrapping around it, it's before and after

2273
01:41:17,320 --> 01:41:19,320
the request, the HTTP

2274
01:41:19,320 --> 01:41:21,320
request that we made to Google finished first,

2275
01:41:21,320 --> 01:41:23,320
printed first, and then

2276
01:41:23,320 --> 01:41:25,320
only when this one finished, the outside,

2277
01:41:25,320 --> 01:41:27,320
basically the parent of it, then we get to see

2278
01:41:27,320 --> 01:41:29,320
this.

2279
01:41:29,320 --> 01:41:31,320
But usually it's not like that. Usually in

2280
01:41:31,320 --> 01:41:33,320
a case of a distributed environment, let's say

2281
01:41:33,320 --> 01:41:35,320
for example, it's a bunch of ECS tasks

2282
01:41:35,320 --> 01:41:37,320
or a bunch of lambdas, when the

2283
01:41:37,320 --> 01:41:39,320
first one finishes and he invokes

2284
01:41:39,320 --> 01:41:41,320
this one, he'll just send the span out. He's not always

2285
01:41:41,320 --> 01:41:43,320
waiting for a response. It could be an asynchronous

2286
01:41:43,320 --> 01:41:45,320
push. So it could

2287
01:41:45,320 --> 01:41:47,320
be that you'll see the parent come in first and then the child.

2288
01:41:47,320 --> 01:41:49,320
But in our case, it's the opposite. We'll

2289
01:41:49,320 --> 01:41:51,320
see in the time that it comes in the collector,

2290
01:41:51,320 --> 01:41:53,320
it's first the child comes in and then

2291
01:41:53,320 --> 01:41:55,320
the parent comes in.

2292
01:41:55,320 --> 01:41:59,320
Yeah, it's just like a race condition.

2293
01:41:59,320 --> 01:42:01,320
So let's see.

2294
01:42:01,320 --> 01:42:03,320
So let's see.

2295
01:42:05,320 --> 01:42:07,320
I expect to see over here. Let's take

2296
01:42:07,320 --> 01:42:09,320
out there as true.

2297
01:42:11,320 --> 01:42:13,320
And that's exactly it. We have our waterfall, exactly as you

2298
01:42:13,320 --> 01:42:15,320
wanted it. And we have

2299
01:42:15,320 --> 01:42:17,320
over here. So basically this is the parent span.

2300
01:42:17,320 --> 01:42:19,320
Someone made a request

2301
01:42:19,320 --> 01:42:21,320
to our server.

2302
01:42:21,320 --> 01:42:23,320
We returned the 200.

2303
01:42:23,320 --> 01:42:25,320
And it was Flask.

2304
01:42:25,320 --> 01:42:27,320
And then if we close this one,

2305
01:42:27,320 --> 01:42:29,320
our child span inside.

2306
01:42:29,320 --> 01:42:31,320
And you can clearly see the hierarchy as

2307
01:42:31,320 --> 01:42:33,320
you know, it can collapse this

2308
01:42:33,320 --> 01:42:35,320
and this is inside.

2309
01:42:35,320 --> 01:42:37,320
And let's see what we did.

2310
01:42:37,320 --> 01:42:39,320
We made a request to Google.com

2311
01:42:39,320 --> 01:42:41,320
with our auto instrumentation for requests.

2312
01:42:41,320 --> 01:42:43,320
It returned the 200.

2313
01:42:43,320 --> 01:42:45,320
And we're a client.

2314
01:42:47,320 --> 01:42:49,320
Any questions on this?

2315
01:42:49,320 --> 01:42:51,320
Another general question.

2316
01:42:53,320 --> 01:42:55,320
Suppose

2317
01:42:55,320 --> 01:42:57,320
you have everything

2318
01:42:57,320 --> 01:42:59,320
instrumented

2319
01:42:59,320 --> 01:43:01,320
but you don't have

2320
01:43:01,320 --> 01:43:03,320
a speaker to pick your trigger on.

2321
01:43:03,320 --> 01:43:05,320
Like you run your application

2322
01:43:05,320 --> 01:43:07,320
and it

2323
01:43:07,320 --> 01:43:09,320
wants to connect but it's obviously not successful.

2324
01:43:09,320 --> 01:43:11,320
Your application still doesn't work

2325
01:43:11,320 --> 01:43:13,320
or is it going to hang?

2326
01:43:13,320 --> 01:43:15,320
You're saying if your application

2327
01:43:15,320 --> 01:43:17,320
is trying to send spans somewhere

2328
01:43:17,320 --> 01:43:19,320
this person is not willing to accept it.

2329
01:43:19,320 --> 01:43:21,320
There's just no one to talk to.

2330
01:43:21,320 --> 01:43:23,320
The collector basically.

2331
01:43:23,320 --> 01:43:25,320
So like I said earlier, your application will work

2332
01:43:25,320 --> 01:43:27,320
of course. Because OpenTelemetry

2333
01:43:27,320 --> 01:43:29,320
and every single instrumentation framework

2334
01:43:29,320 --> 01:43:31,320
out there, their number one goal is not to touch

2335
01:43:31,320 --> 01:43:33,320
and mess up your code.

2336
01:43:33,320 --> 01:43:35,320
Because this could be a real production thing.

2337
01:43:35,320 --> 01:43:37,320
There could be billions of dollars at stake.

2338
01:43:37,320 --> 01:43:39,320
We don't want to touch and ruin anything.

2339
01:43:39,320 --> 01:43:41,320
Worst case scenario, your code is still

2340
01:43:41,320 --> 01:43:43,320
running but you might not have a span to look at it.

2341
01:43:43,320 --> 01:43:45,320
But we want to keep

2342
01:43:45,320 --> 01:43:47,320
your code running and ideally also have a span to look at.

2343
01:43:47,320 --> 01:43:49,320
So I've done it before.

2344
01:43:49,320 --> 01:43:51,320
You would get eventually

2345
01:43:51,320 --> 01:43:53,320
maybe like a warning log or something like that

2346
01:43:53,320 --> 01:43:55,320
at the worst case. But that's it.

2347
01:43:55,320 --> 01:43:57,320
It wouldn't hang and it wouldn't destroy anything in your application.

2348
01:43:57,320 --> 01:43:59,320
I was saying that I acted that way earlier.

2349
01:43:59,320 --> 01:44:01,320
I gave it a bunch of retries.

2350
01:44:01,320 --> 01:44:03,320
It did about a fifth retry

2351
01:44:03,320 --> 01:44:05,320
to the test between the two.

2352
01:44:05,320 --> 01:44:07,320
So it's taking a few places to do that.

2353
01:44:07,320 --> 01:44:09,320
But otherwise, yeah, it was a lot.

2354
01:44:09,320 --> 01:44:11,320
That's right.

2355
01:44:11,320 --> 01:44:13,320
I'll just take the right version of that.

2356
01:44:13,320 --> 01:44:15,320
You've mis-configured your barter wall

2357
01:44:15,320 --> 01:44:17,320
and the tracers

2358
01:44:17,320 --> 01:44:19,320
and the collectors are just

2359
01:44:19,320 --> 01:44:21,320
straight up dropped.

2360
01:44:21,320 --> 01:44:23,320
It should be a fun to see.

2361
01:44:23,320 --> 01:44:25,320
You know, there's actually a lot

2362
01:44:25,320 --> 01:44:27,320
that's never been done before.

2363
01:44:27,320 --> 01:44:29,320
It's pacing

2364
01:44:29,320 --> 01:44:31,320
or it's run it down.

2365
01:44:31,320 --> 01:44:33,320
You know, the logic

2366
01:44:33,320 --> 01:44:35,320
is too quick.

2367
01:44:35,320 --> 01:44:37,320
There's a lot of things out there.

2368
01:44:37,320 --> 01:44:39,320
That's what I'm saying.

2369
01:44:39,320 --> 01:44:41,320
Yeah.

2370
01:44:41,320 --> 01:44:43,320
These are excellent questions, guys.

2371
01:44:43,320 --> 01:44:45,320
This is amazing.

2372
01:44:47,320 --> 01:44:49,320
But essentially, if you do have a firewall

2373
01:44:49,320 --> 01:44:51,320
you do need to make sure that connections are allowed

2374
01:44:51,320 --> 01:44:53,320
to go in and out and make everything work.

2375
01:44:53,320 --> 01:44:55,320
And yes, question in the back.

2376
01:44:55,320 --> 01:44:57,320
So when we did the boot driver

2377
01:44:57,320 --> 01:44:59,320
earlier with the DAPA install

2378
01:44:59,320 --> 01:45:01,320
I noticed that it didn't install

2379
01:45:01,320 --> 01:45:03,320
everything in the barter wall.

2380
01:45:03,320 --> 01:45:05,320
It didn't get people off the game.

2381
01:45:05,320 --> 01:45:07,320
It didn't look at the packages

2382
01:45:07,320 --> 01:45:09,320
and the virtual environment

2383
01:45:09,320 --> 01:45:11,320
and the virtual environment

2384
01:45:11,320 --> 01:45:13,320
and all that.

2385
01:45:13,320 --> 01:45:15,320
So it looked at the package

2386
01:45:15,320 --> 01:45:17,320
and it installed

2387
01:45:17,320 --> 01:45:19,320
the implementation of the algorithm.

2388
01:45:19,320 --> 01:45:21,320
Oh, really? I didn't know that.

2389
01:45:21,320 --> 01:45:23,320
Is that the case?

2390
01:45:23,320 --> 01:45:25,320
I mean, it obviously had requests

2391
01:45:25,320 --> 01:45:27,320
because you didn't have to run it again.

2392
01:45:27,320 --> 01:45:29,320
So it didn't install everything

2393
01:45:29,320 --> 01:45:31,320
but it must be looking at something

2394
01:45:31,320 --> 01:45:33,320
because that installs

2395
01:45:33,320 --> 01:45:35,320
last for you or whatever.

2396
01:45:35,320 --> 01:45:37,320
But like, yeah.

2397
01:45:37,320 --> 01:45:39,320
So it could be the case.

2398
01:45:39,320 --> 01:45:41,320
But in case it doesn't work

2399
01:45:41,320 --> 01:45:43,320
and it doesn't install what you want

2400
01:45:43,320 --> 01:45:45,320
like I said earlier, the no-code

2401
01:45:45,320 --> 01:45:47,320
is just really a more advanced

2402
01:45:47,320 --> 01:45:49,320
and basically contrib way.

2403
01:45:49,320 --> 01:45:51,320
So you could just install

2404
01:45:51,320 --> 01:45:53,320
whatever instrumentation package you need.

2405
01:45:53,320 --> 01:45:55,320
For example, you could install this

2406
01:45:55,320 --> 01:45:57,320
and the no-code would work. Yes, question?

2407
01:45:57,320 --> 01:45:59,320
What would be your recommended way

2408
01:45:59,320 --> 01:46:01,320
to distribute people across

2409
01:46:01,320 --> 01:46:03,320
the microservice architecture

2410
01:46:03,320 --> 01:46:05,320
in the past?

2411
01:46:05,320 --> 01:46:07,320
How would you do that?

2412
01:46:07,320 --> 01:46:09,320
Well, that's an excellent question.

2413
01:46:09,320 --> 01:46:11,320
It depends actually very specifically

2414
01:46:11,320 --> 01:46:13,320
about which microservice you're using.

2415
01:46:13,320 --> 01:46:15,320
That's a thing.

2416
01:46:15,320 --> 01:46:17,320
So for example, I've seen for Kubernetes,

2417
01:46:17,320 --> 01:46:19,320
OpenTelemetry,

2418
01:46:19,320 --> 01:46:21,320
you could do a sidecar,

2419
01:46:21,320 --> 01:46:23,320
you could do an operator,

2420
01:46:23,320 --> 01:46:25,320
and you have a lot of really cool ways.

2421
01:46:25,320 --> 01:46:27,320
You could do it straight with Kubernetes,

2422
01:46:27,320 --> 01:46:29,320
you could do it through Envoy,

2423
01:46:29,320 --> 01:46:31,320
you could do it with a C++,

2424
01:46:31,320 --> 01:46:33,320
you could do it with a C++,

2425
01:46:33,320 --> 01:46:35,320
you could do it through Kubernetes,

2426
01:46:35,320 --> 01:46:37,320
you could do it through Envoy,

2427
01:46:37,320 --> 01:46:39,320
that they create the spans for you,

2428
01:46:39,320 --> 01:46:41,320
but let's say you're on Kubernetes,

2429
01:46:41,320 --> 01:46:43,320
you'll have automatically generated spans,

2430
01:46:43,320 --> 01:46:45,320
you just define exactly where to send it to,

2431
01:46:45,320 --> 01:46:47,320
send it to this collector, and so on.

2432
01:46:47,320 --> 01:46:49,320
For example, for Lambda,

2433
01:46:49,320 --> 01:46:51,320
AWS actually has their own distribution

2434
01:46:51,320 --> 01:46:53,320
of OpenTelemetry.

2435
01:46:53,320 --> 01:46:55,320
You just add it as a layer to your Lambda,

2436
01:46:55,320 --> 01:46:57,320
and it'll automatically make sure that spans

2437
01:46:57,320 --> 01:46:59,320
are sent out to the collector, and so on.

2438
01:46:59,320 --> 01:47:01,320
Let's say it's a containerized application,

2439
01:47:01,320 --> 01:47:03,320
you can just determine all our applications,

2440
01:47:03,320 --> 01:47:05,320
and then everything that you're writing in the top image

2441
01:47:05,320 --> 01:47:07,320
that's all your custom code,

2442
01:47:07,320 --> 01:47:09,320
then it's automatically instrumented already.

2443
01:47:09,320 --> 01:47:11,320
Yeah?

2444
01:47:11,320 --> 01:47:13,320
So like that request thing.

2445
01:47:41,320 --> 01:47:51,320
Yeah, for which microservice?

2446
01:48:11,320 --> 01:48:15,320
Oh, yeah, yeah.

2447
01:48:15,320 --> 01:48:17,320
If you're doing it manually with the width,

2448
01:48:17,320 --> 01:48:19,320
then you really have to worry about,

2449
01:48:19,320 --> 01:48:21,320
so let's say OpenTelemetry,

2450
01:48:21,320 --> 01:48:25,320
let's say Python, manual,

2451
01:48:25,320 --> 01:48:27,320
you have to worry about something that's called

2452
01:48:27,320 --> 01:48:29,320
the context and the baggage,

2453
01:48:29,320 --> 01:48:31,320
and so yeah, this gets really, really complicated.

2454
01:48:31,320 --> 01:48:33,320
This is why I hate using the manual way,

2455
01:48:33,320 --> 01:48:35,320
and pretty much everyone else does.

2456
01:48:35,320 --> 01:48:37,320
I want to say a good example of context,

2457
01:48:37,320 --> 01:48:39,320
but let's see.

2458
01:48:39,320 --> 01:48:41,320
Yeah, I was wondering about security.

2459
01:48:41,320 --> 01:48:43,320
Is there a way to set up a shared secret

2460
01:48:43,320 --> 01:48:47,320
between the source and the destination

2461
01:48:47,320 --> 01:48:51,320
to make sure that you go in and you're really connected

2462
01:48:51,320 --> 01:48:55,320
to the raw collector?

2463
01:48:55,320 --> 01:48:59,320
Yeah, I believe you could use any secrets manager,

2464
01:48:59,320 --> 01:49:01,320
any vault manager for something like that.

2465
01:49:01,320 --> 01:49:05,320
I think OpenTelemetry is trying to stay out of something like that.

2466
01:49:05,320 --> 01:49:07,320
Something like that.

2467
01:49:07,320 --> 01:49:09,320
I was wondering if you had a question

2468
01:49:09,320 --> 01:49:11,320
about the way you set up OpenTelemetry

2469
01:49:11,320 --> 01:49:13,320
or something you were talking to them about.

2470
01:49:13,320 --> 01:49:15,320
I've talked about that in the academic department

2471
01:49:15,320 --> 01:49:17,320
or a situation where we would have

2472
01:49:17,320 --> 01:49:19,320
multiple different students all in the same post,

2473
01:49:19,320 --> 01:49:23,320
and we also have multiple students having their websites,

2474
01:49:23,320 --> 01:49:25,320
but they don't seem to see the combined logs

2475
01:49:25,320 --> 01:49:27,320
because it's very, very open.

2476
01:49:27,320 --> 01:49:29,320
I was imagining one of the students

2477
01:49:29,320 --> 01:49:31,320
wanted to set up OpenTelemetry

2478
01:49:31,320 --> 01:49:35,320
to see the results of their website,

2479
01:49:35,320 --> 01:49:37,320
but then they turned it off or forgot about it,

2480
01:49:37,320 --> 01:49:39,320
and somebody else came along and used the same port number

2481
01:49:39,320 --> 01:49:43,320
now, the wrong websites get looked at

2482
01:49:43,320 --> 01:49:47,320
into OpenTelemetry.

2483
01:49:47,320 --> 01:49:49,320
I was wondering if there was a way

2484
01:49:49,320 --> 01:49:51,320
to set up a shared secret or something

2485
01:49:51,320 --> 01:49:57,320
so that you couldn't set it from the wrong one to the wrong one.

2486
01:49:57,320 --> 01:49:59,320
Oh, actually, yeah, definitely.

2487
01:49:59,320 --> 01:50:01,320
Sorry.

2488
01:50:01,320 --> 01:50:03,320
There are definitely things like that,

2489
01:50:03,320 --> 01:50:05,320
so we use actually, at my company,

2490
01:50:05,320 --> 01:50:11,320
we use something very similar called an OAuth2 extension,

2491
01:50:11,320 --> 01:50:17,320
an extension for the OpenTelemetry collector.

2492
01:50:17,320 --> 01:50:19,320
Sorry, my spelling's terrible,

2493
01:50:19,320 --> 01:50:21,320
but essentially you have to combine,

2494
01:50:21,320 --> 01:50:23,320
you have to say a few secrets,

2495
01:50:23,320 --> 01:50:25,320
you have the client ID and the client secret,

2496
01:50:25,320 --> 01:50:29,320
and you have to have some token URL and things like that.

2497
01:50:29,320 --> 01:50:31,320
So for example, in our production environment,

2498
01:50:31,320 --> 01:50:33,320
you have to set up the collector,

2499
01:50:33,320 --> 01:50:37,320
and for the exporter, you have to set it on both for it to work,

2500
01:50:37,320 --> 01:50:39,320
and so only this person can send it,

2501
01:50:39,320 --> 01:50:41,320
these exact spans to this location.

2502
01:50:41,320 --> 01:50:43,320
And so I can show you the name,

2503
01:50:43,320 --> 01:50:45,320
but it's really the OAuth2 client.

2504
01:50:45,320 --> 01:50:47,320
Yeah?

2505
01:50:47,320 --> 01:50:49,320
Is that one?

2506
01:50:49,320 --> 01:50:51,320
I've never heard of this.

2507
01:50:51,320 --> 01:50:53,320
What is GPDR?

2508
01:50:53,320 --> 01:50:55,320
Oh.

2509
01:50:55,320 --> 01:50:57,320
Oh, I'm sorry.

2510
01:50:57,320 --> 01:50:59,320
I'm sorry.

2511
01:50:59,320 --> 01:51:01,320
I'm sorry.

2512
01:51:01,320 --> 01:51:03,320
I'm sorry.

2513
01:51:03,320 --> 01:51:05,320
I'm sorry.

2514
01:51:05,320 --> 01:51:07,320
I'm sorry.

2515
01:51:07,320 --> 01:51:09,320
I'm sorry.

2516
01:51:09,320 --> 01:51:11,320
I'm sorry.

2517
01:51:11,320 --> 01:51:13,320
I'm sorry.

2518
01:51:13,320 --> 01:51:15,320
I'm sorry.

2519
01:51:15,320 --> 01:51:17,320
Oh.

2520
01:51:17,320 --> 01:51:19,320
You have to click all the things.

2521
01:51:19,320 --> 01:51:21,320
I don't care about the key.

2522
01:51:21,320 --> 01:51:23,320
So most of these,

2523
01:51:23,320 --> 01:51:25,320
I don't know,

2524
01:51:25,320 --> 01:51:27,320
so we have a few clients at Elastic as well,

2525
01:51:27,320 --> 01:51:29,320
and we really work hard on playing GPDR.

2526
01:51:29,320 --> 01:51:31,320
It's just going to play high-end.

2527
01:51:31,320 --> 01:51:33,320
That's why you have to do the header thing, right?

2528
01:51:33,320 --> 01:51:35,320
It doesn't play header.

2529
01:51:35,320 --> 01:51:37,320
Because that might be GPDR.

2530
01:51:37,320 --> 01:51:39,320
Yeah.

2531
01:51:39,320 --> 01:51:41,320
Thank you. Thank you so much.

2532
01:51:41,320 --> 01:51:43,320
I know nothing about GPDR.

2533
01:51:43,320 --> 01:51:45,320
Yeah.

2534
01:51:45,320 --> 01:51:47,320
You don't want to end your

2535
01:51:47,320 --> 01:51:49,320
in your Yager thing anyway, right?

2536
01:51:49,320 --> 01:51:51,320
So, like,

2537
01:51:51,320 --> 01:51:53,320
if I'm doing the user data,

2538
01:51:53,320 --> 01:51:55,320
it's going to be a pain in the oil.

2539
01:51:55,320 --> 01:51:57,320
Yeah.

2540
01:51:59,320 --> 01:52:01,320
Anything else?

2541
01:52:03,320 --> 01:52:05,320
Okay. Does this make sense?

2542
01:52:05,320 --> 01:52:07,320
There are two clients?

2543
01:52:07,320 --> 01:52:09,320
I think so.

2544
01:52:09,320 --> 01:52:11,320
Where is the one here?

2545
01:52:11,320 --> 01:52:13,320
Oh, so I'm over here

2546
01:52:13,320 --> 01:52:15,320
on the Collector Contrib.

2547
01:52:15,320 --> 01:52:17,320
And so, yeah, it's defined as an extension

2548
01:52:17,320 --> 01:52:19,320
in the Collector.

2549
01:52:19,320 --> 01:52:21,320
So basically, there's the Collector,

2550
01:52:21,320 --> 01:52:23,320
and then there's the Collector Contrib version as well.

2551
01:52:23,320 --> 01:52:25,320
And this contains the same exact thing as what we just talked about,

2552
01:52:25,320 --> 01:52:27,320
all of the extensions and everything else.

2553
01:52:27,320 --> 01:52:29,320
And so the Collector Contrib contains

2554
01:52:29,320 --> 01:52:31,320
much more than the Collector itself.

2555
01:52:31,320 --> 01:52:33,320
And there should be a table here.

2556
01:52:33,320 --> 01:52:35,320
I remember seeing a table, but it was somewhere.

2557
01:52:35,320 --> 01:52:37,320
And...

2558
01:52:37,320 --> 01:52:39,320
Not sure.

2559
01:52:39,320 --> 01:52:41,320
But yeah, if you go over here to extension,

2560
01:52:41,320 --> 01:52:43,320
you get the full list of all your extensions.

2561
01:52:43,320 --> 01:52:45,320
Oh, so over here.

2562
01:52:45,320 --> 01:52:47,320
So Yager remote sampling you could do

2563
01:52:47,320 --> 01:52:49,320
for whatever asks about sampling.

2564
01:52:49,320 --> 01:52:51,320
You have your OAuth 2 client extension as well.

2565
01:52:51,320 --> 01:52:53,320
But you do have a couple other.

2566
01:52:53,320 --> 01:52:55,320
You have basic auth token, bare token.

2567
01:52:55,320 --> 01:52:57,320
And so you don't have to use the OAuth 2. That's a bit more complicated.

2568
01:52:57,320 --> 01:52:59,320
You could use a couple of simpler ones.

2569
01:52:59,320 --> 01:53:01,320
Such as these two over here.

2570
01:53:01,320 --> 01:53:03,320
You could use ASAP auth extension.

2571
01:53:03,320 --> 01:53:05,320
But yeah, I would use probably something similar.

2572
01:53:05,320 --> 01:53:07,320
Probably something easier

2573
01:53:07,320 --> 01:53:09,320
if the students are doing it themselves.

2574
01:53:13,320 --> 01:53:15,320
Yeah?

2575
01:53:15,320 --> 01:53:17,320
Do you have any suggestions or recommendations

2576
01:53:17,320 --> 01:53:19,320
for deciding on your sampling?

2577
01:53:21,320 --> 01:53:25,320
I wouldn't do something too high.

2578
01:53:25,320 --> 01:53:27,320
I would say you would want most of your traces.

2579
01:53:27,320 --> 01:53:29,320
But I would say maybe

2580
01:53:29,320 --> 01:53:31,320
you could cut out...

2581
01:53:31,320 --> 01:53:33,320
You could do something like, I want to keep only 5%

2582
01:53:33,320 --> 01:53:35,320
of my traces or something.

2583
01:53:35,320 --> 01:53:37,320
But the main, main thing

2584
01:53:37,320 --> 01:53:39,320
that I would focus on is

2585
01:53:39,320 --> 01:53:41,320
if there is an error in this trace, don't sample it.

2586
01:53:41,320 --> 01:53:43,320
I want this trace.

2587
01:53:43,320 --> 01:53:45,320
So that's the main thing to keep in mind.

2588
01:53:45,320 --> 01:53:47,320
And so when you're doing sampling, and I'm not too familiar with the sampling

2589
01:53:47,320 --> 01:53:49,320
because it's pretty new.

2590
01:53:49,320 --> 01:53:51,320
But this is the main thing to keep in mind. If there's an error, you don't want it sampled.

2591
01:53:51,320 --> 01:53:53,320
You want it there.

2592
01:53:53,320 --> 01:53:55,320
And then from there you can pick your own. You could say 10 or 20%.

2593
01:53:55,320 --> 01:53:57,320
But I think ideally

2594
01:53:57,320 --> 01:53:59,320
you would have all of your traces.

2595
01:53:59,320 --> 01:54:01,320
Because each one tells a different story and you don't know how it might

2596
01:54:01,320 --> 01:54:03,320
come up in the future that you might need it.

2597
01:54:05,320 --> 01:54:07,320
So that's a way to age off traces.

2598
01:54:07,320 --> 01:54:09,320
To age off traces.

2599
01:54:15,320 --> 01:54:17,320
So, a funny story.

2600
01:54:27,320 --> 01:54:29,320
Yeah, exactly.

2601
01:54:29,320 --> 01:54:31,320
At my previous company

2602
01:54:31,320 --> 01:54:33,320
we had just too many traces in our database.

2603
01:54:33,320 --> 01:54:35,320
It was just too much. Everything was going crazy.

2604
01:54:35,320 --> 01:54:37,320
So we decided to have a policy that after seven days

2605
01:54:37,320 --> 01:54:39,320
your trace would be gone.

2606
01:54:39,320 --> 01:54:41,320
And we would delete it.

2607
01:54:41,320 --> 01:54:43,320
And you could pay for extra if you wanted.

2608
01:54:43,320 --> 01:54:45,320
But every seven days, or after seven days

2609
01:54:45,320 --> 01:54:47,320
the trace would disappear.

2610
01:54:47,320 --> 01:54:49,320
Because obviously the issue is not relevant anymore.

2611
01:54:51,320 --> 01:54:53,320
But it also became a nice premium enterprise feature.

2612
01:54:55,320 --> 01:54:57,320
Question in the back.

2613
01:55:03,320 --> 01:55:05,320
I think there's both now.

2614
01:55:05,320 --> 01:55:07,320
There's head-tail and tail-based.

2615
01:55:07,320 --> 01:55:09,320
There's head-based, sorry.

2616
01:55:09,320 --> 01:55:11,320
And tail-based sampling as well.

2617
01:55:11,320 --> 01:55:13,320
So you could do an application side.

2618
01:55:13,320 --> 01:55:15,320
And I think now they just added on the collector side.

2619
01:55:17,320 --> 01:55:19,320
Or vice versa.

2620
01:55:19,320 --> 01:55:21,320
You could do it on both.

2621
01:55:21,320 --> 01:55:23,320
And anything else?

2622
01:55:23,320 --> 01:55:25,320
Okay.

2623
01:55:25,320 --> 01:55:27,320
We're nearing the end guys.

2624
01:55:27,320 --> 01:55:29,320
I don't want to hold you too long.

2625
01:55:29,320 --> 01:55:31,320
We are going to go soon.

2626
01:55:31,320 --> 01:55:33,320
We're going to go soon.

2627
01:55:33,320 --> 01:55:35,320
Maybe we'll finish even before the break.

2628
01:55:35,320 --> 01:55:37,320
And I'll let you out for the second half.

2629
01:55:37,320 --> 01:55:39,320
You could stay as long as you'd like.

2630
01:55:39,320 --> 01:55:41,320
But I want you guys to now answer a few questions from me.

2631
01:55:41,320 --> 01:55:43,320
And so we'll scroll here all the way to the bottom.

2632
01:55:43,320 --> 01:55:45,320
Step 16, we're done.

2633
01:55:45,320 --> 01:55:47,320
Right?

2634
01:55:47,320 --> 01:55:49,320
And I want you to answer me.

2635
01:55:49,320 --> 01:55:51,320
I want someone to tell me here, what is observability?

2636
01:55:53,320 --> 01:55:55,320
What is it?

2637
01:55:55,320 --> 01:55:57,320
Nobody knows?

2638
01:55:57,320 --> 01:55:59,320
Almost.

2639
01:55:59,320 --> 01:56:01,320
These are the three pillars of observability.

2640
01:56:01,320 --> 01:56:03,320
That was good.

2641
01:56:03,320 --> 01:56:05,320
Can someone give me a, okay, that's actually great.

2642
01:56:05,320 --> 01:56:07,320
But can someone give me a generic and a very basic definition?

2643
01:56:13,320 --> 01:56:15,320
Exactly.

2644
01:56:15,320 --> 01:56:17,320
Exactly.

2645
01:56:17,320 --> 01:56:19,320
You're watching something from the outside.

2646
01:56:19,320 --> 01:56:21,320
And you're able to, just with a tiny bit of information,

2647
01:56:21,320 --> 01:56:23,320
become smarter and smarter and make better and educated guesses

2648
01:56:23,320 --> 01:56:25,320
about what's happening inside.

2649
01:56:25,320 --> 01:56:27,320
Okay?

2650
01:56:27,320 --> 01:56:29,320
Can anyone tell me what is open telemetry?

2651
01:56:29,320 --> 01:56:31,320
Feel free to shout it out.

2652
01:56:31,320 --> 01:56:33,320
It's okay.

2653
01:56:33,320 --> 01:56:35,320
Yeah.

2654
01:56:35,320 --> 01:56:37,320
Yeah, pretty much.

2655
01:56:37,320 --> 01:56:39,320
It's a protocol that creates bands and sends them

2656
01:56:39,320 --> 01:56:41,320
and eventually stores them somewhere.

2657
01:56:41,320 --> 01:56:43,320
And can anyone tell me what app observability tools exist?

2658
01:56:43,320 --> 01:56:45,320
Three main ones that we've used today.

2659
01:56:45,320 --> 01:56:47,320
Okay.

2660
01:56:47,320 --> 01:56:49,320
So, I'm going to ask you a question.

2661
01:56:49,320 --> 01:56:51,320
So, I'm going to ask you a question.

2662
01:56:51,320 --> 01:56:53,320
So, I'm going to ask you a question.

2663
01:56:53,320 --> 01:56:55,320
Amazing.

2664
01:56:55,320 --> 01:56:57,320
Good job, guys.

2665
01:56:57,320 --> 01:56:59,320
And can someone tell me what methods can I use

2666
01:56:59,320 --> 01:57:01,320
to instrument my app with applications,

2667
01:57:01,320 --> 01:57:03,320
with open telemetry?

2668
01:57:09,320 --> 01:57:11,320
And?

2669
01:57:11,320 --> 01:57:13,320
Awesome. Good job.

2670
01:57:13,320 --> 01:57:15,320
But when should you use each?

2671
01:57:15,320 --> 01:57:17,320
What's the advantages of using each one?

2672
01:57:17,320 --> 01:57:19,320
For example, the manual one.

2673
01:57:19,320 --> 01:57:21,320
Why would I ever use that one?

2674
01:57:21,320 --> 01:57:23,320
Yeah.

2675
01:57:23,320 --> 01:57:25,320
Yeah.

2676
01:57:25,320 --> 01:57:27,320
Exactly.

2677
01:57:27,320 --> 01:57:29,320
Both answers are correct.

2678
01:57:29,320 --> 01:57:31,320
Good job, guys.

2679
01:57:31,320 --> 01:57:33,320
And so, why would you then use the contrib one

2680
01:57:33,320 --> 01:57:35,320
or the auto one?

2681
01:57:35,320 --> 01:57:37,320
Is there a difference?

2682
01:57:37,320 --> 01:57:39,320
Yeah.

2683
01:57:39,320 --> 01:57:41,320
Yeah. Awesome.

2684
01:57:41,320 --> 01:57:43,320
Yeah.

2685
01:57:43,320 --> 01:57:45,320
Yeah.

2686
01:57:45,320 --> 01:57:47,320
Yeah. Awesome.

2687
01:57:47,320 --> 01:57:49,320
Yeah.

2688
01:57:49,320 --> 01:57:51,320
Yeah.

2689
01:57:51,320 --> 01:57:53,320
Yeah.

2690
01:57:53,320 --> 01:57:55,320
Yeah.

2691
01:57:55,320 --> 01:57:57,320
Yeah.

2692
01:57:57,320 --> 01:57:59,320
That's it. Good job.

2693
01:57:59,320 --> 01:58:01,320
And what is the open telemetry collector?

2694
01:58:01,320 --> 01:58:03,320
What is it?

2695
01:58:03,320 --> 01:58:05,320
Why do you need it?

2696
01:58:05,320 --> 01:58:07,320
Why do you need it and what does it do?

2697
01:58:07,320 --> 01:58:09,320
I want to.

2698
01:58:09,320 --> 01:58:11,320
You can answer only one of them.

2699
01:58:11,320 --> 01:58:13,320
It's the buffer.

2700
01:58:13,320 --> 01:58:15,320
But why?

2701
01:58:15,320 --> 01:58:17,320
Then why would you use the buffer?

2702
01:58:17,320 --> 01:58:19,320
Because it's the same as the other one.

2703
01:58:19,320 --> 01:58:21,320
Yeah. Exactly.

2704
01:58:21,320 --> 01:58:23,320
Both are correct.

2705
01:58:23,320 --> 01:58:25,320
Raise your hand if you learned something here today.

2706
01:58:25,320 --> 01:58:27,320
Wow. Wow. Amazing, guys.

2707
01:58:27,320 --> 01:58:29,320
Thank you.

2708
01:58:29,320 --> 01:58:31,320
Okay. You're free to go, guys. Have a great day.

2709
01:58:31,320 --> 01:58:33,320
And thank you so much.

2710
01:58:33,320 --> 01:58:35,320
Applause.

2711
01:58:35,320 --> 01:58:37,320
Applause.

2712
01:58:37,320 --> 01:58:39,320
Applause.

2713
01:58:39,320 --> 01:58:41,320
Applause.

2714
01:58:41,320 --> 01:58:43,320
Applause.

2715
01:58:43,320 --> 01:58:45,320
Applause.

2716
01:58:45,320 --> 01:58:47,320
Applause.

2717
01:58:47,320 --> 01:58:49,320
So what is it

2718
01:58:49,320 --> 01:58:51,320
going to do?

2719
01:58:51,320 --> 01:58:53,320
Oh. So is it still recording?

2720
01:58:53,320 --> 01:58:55,320
I don't know if I can show this.

2721
01:58:55,320 --> 01:58:57,320
So I

2722
01:58:57,320 --> 01:58:59,320
worked at this

2723
01:58:59,320 --> 01:59:01,320
other company

2724
01:59:01,320 --> 01:59:03,320
called Epscom.com.

2725
01:59:03,320 --> 01:59:07,580
We were purchased by Cisco about a year and a half ago.

2726
01:59:07,580 --> 01:59:09,940
So this website is almost down, but for example,

2727
01:59:09,940 --> 01:59:11,940
I think I can show you the demo still.

2728
01:59:13,100 --> 01:59:17,480
So this is a commercial product, Epsilon.

2729
01:59:17,480 --> 01:59:20,640
Within Cisco now, we do have also AppDynamics.

2730
01:59:22,780 --> 01:59:24,940
Let's see, maybe there's a demo.

2731
01:59:24,940 --> 01:59:26,740
There is also Teletrace.

2732
01:59:26,740 --> 01:59:28,900
This is a vendor neutral one that's open source,

2733
01:59:28,900 --> 01:59:30,100
but it's very, very new.

2734
01:59:31,040 --> 01:59:32,380
The Epsilon demo.

2735
01:59:32,380 --> 01:59:34,620
So this is what Epsilon's really famous for.

2736
01:59:34,620 --> 01:59:37,760
When you go to traces over here and you click on it,

2737
01:59:37,760 --> 01:59:40,240
this is basically a table full of your spans,

2738
01:59:40,240 --> 01:59:42,800
and you can have a very sophisticated span search

2739
01:59:43,840 --> 01:59:47,540
that we're able to show spans like I've never seen before.

2740
01:59:47,540 --> 01:59:50,400
And so you really get, like forget even the waterfall.

2741
01:59:50,400 --> 01:59:52,000
The waterfall is like a secondary one,

2742
01:59:52,000 --> 01:59:54,380
like this timeline, right, that we see in Yeager.

2743
01:59:54,380 --> 01:59:55,960
So for me, this is really, really cool.

2744
01:59:55,960 --> 01:59:57,880
And they're able to see, you know, from here,

2745
01:59:57,900 --> 02:00:00,180
and we also collect also everything that happens.

2746
02:00:00,180 --> 02:00:01,940
So for example, in the Lambda,

2747
02:00:01,940 --> 02:00:04,020
we're able to not just get, you know, basic metadata stuff.

2748
02:00:04,020 --> 02:00:08,340
We can see also, and let's see if I can see it, and no.

2749
02:00:08,340 --> 02:00:10,300
But for example, in this HTTP call,

2750
02:00:10,300 --> 02:00:12,300
we see not just the headers very easily.

2751
02:00:12,300 --> 02:00:15,600
We see also automatically the body and everything else.

2752
02:00:15,600 --> 02:00:18,140
And also in the response, the headers and body.

2753
02:00:18,140 --> 02:00:21,220
And yeah, it just works amazing.

2754
02:00:21,220 --> 02:00:23,180
We can see for kinesis, everything,

2755
02:00:23,180 --> 02:00:27,140
and yeah, for the database as well.

2756
02:00:27,160 --> 02:00:30,800
So I would say this is even a sort of boring trace

2757
02:00:30,800 --> 02:00:34,360
if we can find some pretty interesting traces out there.

2758
02:00:34,360 --> 02:00:36,320
And for example, even in the database,

2759
02:00:36,320 --> 02:00:38,560
when you make a request and you make an insert,

2760
02:00:38,560 --> 02:00:40,400
we can see the exact SQL statement as well.

2761
02:00:40,400 --> 02:00:41,480
You could obfuscate it as well.

2762
02:00:41,480 --> 02:00:42,760
You don't have to include it.

2763
02:00:42,760 --> 02:00:44,880
But if you'd like to see it in there, we do have it.

2764
02:00:44,880 --> 02:00:46,720
And this really, really helps in debugging.

2765
02:00:46,720 --> 02:00:49,040
You can see, oh, this isn't the table I want to send it to.

2766
02:00:49,040 --> 02:00:51,200
And this isn't the exact value I want it to send in.

2767
02:00:51,200 --> 02:00:53,360
I wanted something kind of different.

2768
02:00:53,360 --> 02:00:56,240
So this is great for finding bugs that you did

2769
02:00:56,500 --> 02:00:57,460
even realize were there.

2770
02:00:57,460 --> 02:00:59,020
And maybe they even made it to production.

2771
02:00:59,020 --> 02:01:02,420
And now you realize, okay, this is the issue, exactly.

2772
02:01:04,960 --> 02:01:06,640
Does that answer your question?

2773
02:01:06,640 --> 02:01:07,500
Would you use something like this?

2774
02:01:07,500 --> 02:01:08,340
Just curious.

2775
02:01:10,500 --> 02:01:12,060
You use AppDynamics.

2776
02:01:12,060 --> 02:01:12,900
That's cool.

2777
02:01:13,820 --> 02:01:15,700
So use AppDynamics, which one?

2778
02:01:15,700 --> 02:01:17,760
The hotel one or the non-hotel one?

2779
02:01:18,660 --> 02:01:19,500
So we don't use those.

2780
02:01:19,500 --> 02:01:22,300
We use both of their, well, they may use it

2781
02:01:22,300 --> 02:01:24,100
under the other things, both of their,

2782
02:01:24,280 --> 02:01:25,120
okay.

2783
02:01:27,160 --> 02:01:28,000
Okay.

2784
02:01:30,560 --> 02:01:32,240
Phrase synchronous?

2785
02:01:32,240 --> 02:01:33,080
Oh, I'm not sure.

2786
02:01:39,560 --> 02:01:42,200
Yeah, I do know that AppDynamics is moving

2787
02:01:42,200 --> 02:01:46,560
towards open telemetry as well with AppDynamics Cloud.

2788
02:01:46,560 --> 02:01:50,000
And yeah, these are the ones I would recommend, definitely.

2789
02:01:50,000 --> 02:01:53,680
Epsilon, AppDynamics, Teletrace, I think those are good ones.

2790
02:01:53,700 --> 02:01:54,940
Okay, you're free to go, guys.

2791
02:01:54,940 --> 02:01:55,940
Thank you very much.

