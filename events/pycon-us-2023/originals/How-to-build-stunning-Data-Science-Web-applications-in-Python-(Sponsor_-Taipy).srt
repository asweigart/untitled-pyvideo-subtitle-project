1
00:00:00,000 --> 00:00:05,000
Okay, so good morning everybody.

2
00:00:05,000 --> 00:00:12,000
So what I'll do is first show you some of the reasons why we created Type-I,

3
00:00:12,000 --> 00:00:15,000
where we come from and all of this,

4
00:00:15,000 --> 00:00:28,000
and how different we are from all those new packages that come into existence on a daily basis.

5
00:00:28,000 --> 00:00:38,000
Then I will show you some code about Type-I, some demos.

6
00:00:38,000 --> 00:00:41,000
I'll show you also how it works in different environments.

7
00:00:41,000 --> 00:00:47,000
That's one of the rare tools that works basically as Python scripts,

8
00:00:47,000 --> 00:00:51,000
and you will see some graphics on some backend work,

9
00:00:51,000 --> 00:00:55,000
but it also works very well in notebooks.

10
00:00:55,000 --> 00:00:59,000
So you can have a full blown interface within a notebook environment.

11
00:00:59,000 --> 00:01:03,000
I'll show you that on local Jupyter notebooks.

12
00:01:03,000 --> 00:01:10,000
You can use this also on platforms where you redirect using things like ng-rock,

13
00:01:10,000 --> 00:01:16,000
use colab, data breaks, or some of the other platforms.

14
00:01:16,000 --> 00:01:22,000
Okay, so let's get started.

15
00:01:22,000 --> 00:01:30,000
So I come from a background of large companies.

16
00:01:30,000 --> 00:01:34,000
I work for a company called Allog, which was acquired by IBM.

17
00:01:34,000 --> 00:01:42,000
I spent my life basically developing AI projects for a long time for large companies.

18
00:01:42,000 --> 00:01:48,000
All of this was developed in C++ initially, and Java, JavaScript, all this stuff.

19
00:01:48,000 --> 00:01:51,000
A few years back we were tired of all these things.

20
00:01:51,000 --> 00:01:54,000
I remember having software.

21
00:01:54,000 --> 00:01:58,000
Installing them was taking like a minimum of three hours.

22
00:01:58,000 --> 00:02:03,000
So I said, let's do everything on Python.

23
00:02:03,000 --> 00:02:06,000
And we tried, and we tried on real projects.

24
00:02:06,000 --> 00:02:12,000
Also, when I say a project, it's not an AI project, it's the whole software.

25
00:02:12,000 --> 00:02:19,000
It's the integration, the graphics, and usually you have end users also on the other side.

26
00:02:19,000 --> 00:02:25,000
And we discovered that Python is great, because we love Python to develop all these things,

27
00:02:25,000 --> 00:02:32,000
but there were some issues with the product, hence the creation of Type-I.

28
00:02:32,000 --> 00:02:41,000
So Type-I has been created with a wide, maybe it was a bit too ambitious,

29
00:02:41,000 --> 00:02:45,000
but we really wanted to do anything from dashboarding in Python,

30
00:02:45,000 --> 00:02:51,000
you want to have nice dashboards and things, all the way to complex applications,

31
00:02:51,000 --> 00:02:58,000
multi-user, that could be AI simulation, optimization, mathematical optimization,

32
00:02:58,000 --> 00:03:06,000
a whole range of different types of applications.

33
00:03:06,000 --> 00:03:12,000
One thing that's often missing in all the discussion I'm seeing in the data science environment

34
00:03:12,000 --> 00:03:14,000
is really the role of AI.

35
00:03:14,000 --> 00:03:17,000
We see very often people are really, really focusing on the algorithm,

36
00:03:17,000 --> 00:03:21,000
exposing very smart algorithms, all these things,

37
00:03:21,000 --> 00:03:27,000
but end users, it's not only the data scientists, it's also the end users that interact with the algorithm.

38
00:03:27,000 --> 00:03:33,000
So this is also a very important thing that led us, you will see,

39
00:03:33,000 --> 00:03:38,000
to really make sure that Type-I was managing what we call scenarios.

40
00:03:38,000 --> 00:03:41,000
So scenarios are a little bit like experiments for the end user,

41
00:03:41,000 --> 00:03:48,000
but it's also experiments for the data scientists, but you have the same need for end users.

42
00:03:48,000 --> 00:03:52,000
Okay?

43
00:03:52,000 --> 00:03:59,000
One thing we noticed also in the world of Python is this amazing failure rate,

44
00:03:59,000 --> 00:04:02,000
if we can call it failure.

45
00:04:02,000 --> 00:04:09,000
We see about 85% of Python pilots basically staying pilots,

46
00:04:09,000 --> 00:04:13,000
sometimes for good reasons, for instance, the ROI wasn't there,

47
00:04:13,000 --> 00:04:20,000
but sometimes it's because it's too complicated, so you may need to rewrite everything.

48
00:04:20,000 --> 00:04:23,000
So you've got the data science department develops in Python,

49
00:04:23,000 --> 00:04:26,000
you need to hand over to an IT department that redevelops everything,

50
00:04:26,000 --> 00:04:30,000
instead of having a couple of guys who end up with an army of IT guys

51
00:04:30,000 --> 00:04:34,000
that redevelop in JavaScript, in Java, and all this stuff.

52
00:04:34,000 --> 00:04:40,000
And that has a cost, and a lot of companies are also short of IT skills.

53
00:04:42,000 --> 00:04:48,000
So unlike what most companies do with startups, especially in the open source,

54
00:04:48,000 --> 00:04:52,000
Type-I had to be designed with large companies.

55
00:04:52,000 --> 00:04:54,000
So we didn't start from the community side.

56
00:04:54,000 --> 00:05:00,000
When we started the product recently, a year and a half ago,

57
00:05:00,000 --> 00:05:05,000
we developed it with McDonald's, with a large retailer in Europe,

58
00:05:05,000 --> 00:05:11,000
with a company called Tal, which is one of the largest cloth manufacturers in the world,

59
00:05:11,000 --> 00:05:17,000
companies like Samsung, and so on and so forth.

60
00:05:17,000 --> 00:05:24,000
That's the result of what can be achieved for a large retailer called Groupe Les Mousquetaires.

61
00:05:24,000 --> 00:05:30,000
So what they did, IntermarchÃ©, the largest retailer in France,

62
00:05:30,000 --> 00:05:37,000
they had the choice of outsourcing a very large cash flow prediction model for all the companies,

63
00:05:37,000 --> 00:05:42,000
which is about 18 flows to be predicted.

64
00:05:42,000 --> 00:05:46,000
And they had the choice of doing that with an external company

65
00:05:46,000 --> 00:05:50,000
that quoted 600k for people for about 8 months.

66
00:05:50,000 --> 00:05:56,000
And they did that, and they basically competed against their own IT,

67
00:05:56,000 --> 00:06:01,000
which did it with Type-I for 60k, 1.5 people, about 2 months,

68
00:06:01,000 --> 00:06:05,000
but basically a 10 times reduction in cost here.

69
00:06:09,000 --> 00:06:13,000
And they chose also the end user, the CFO, who is the end user,

70
00:06:13,000 --> 00:06:18,000
and the treasurer of the company chose the Type-I solution.

71
00:06:18,000 --> 00:06:22,000
So it was not inferior in quality or anything like that.

72
00:06:22,000 --> 00:06:27,000
So that's the kind of thing why we created Type-I.

73
00:06:29,000 --> 00:06:36,000
So you will see that we both, we really wanted to target the front end and the back end,

74
00:06:36,000 --> 00:06:38,000
so you will have these two components.

75
00:06:38,000 --> 00:06:40,000
I will tell you a little bit of the roadmap,

76
00:06:40,000 --> 00:06:45,000
but we will produce also a conversion of these two packages.

77
00:06:45,000 --> 00:06:47,000
At the moment, they are like two independent packages.

78
00:06:47,000 --> 00:06:52,000
When you do pip install Type-I, you will get both the graphical side,

79
00:06:52,000 --> 00:06:56,000
the front end, and the back end package.

80
00:06:58,000 --> 00:07:04,000
So one of the things when we were studying about what's there in the Python world,

81
00:07:04,000 --> 00:07:12,000
we looked at really two families of graphical interface when we were looking at the GUI side.

82
00:07:13,000 --> 00:07:19,000
On one side, you've got all these widget libraries, which are extremely nice,

83
00:07:19,000 --> 00:07:24,000
but that doesn't make a full-blown interface, highly interactive, multi-page, and all these things.

84
00:07:26,000 --> 00:07:30,000
You have tools above, I'm sure you know about Streamlit,

85
00:07:30,000 --> 00:07:35,000
but for real applications, we felt we were using Streamlit,

86
00:07:35,000 --> 00:07:40,000
the event management mechanism was really inefficient.

87
00:07:41,000 --> 00:07:45,000
It wasn't working on notebooks, that's something that we wanted to have,

88
00:07:45,000 --> 00:07:54,000
and we wanted to have also a lot of capabilities for managing big data graphically, and so on and so forth.

89
00:07:55,000 --> 00:08:01,000
The alternative, of course, is to have a dedicated GUI specialist that develops with Plutly,

90
00:08:01,000 --> 00:08:05,000
or in TKinter, or all these graphical software.

91
00:08:05,000 --> 00:08:09,000
But our intent, again, was to make the tool easy to learn.

92
00:08:09,000 --> 00:08:11,000
That's something I didn't mention.

93
00:08:11,000 --> 00:08:20,000
A quick learning curve, the ability to develop quickly for almost any Python developer.

94
00:08:24,000 --> 00:08:27,000
On the backend side, it was a little bit of a different story.

95
00:08:27,000 --> 00:08:33,000
We looked at different products, and none of them had all the features we wanted.

96
00:08:33,000 --> 00:08:37,000
Some of them were really complex, too complex for the audience.

97
00:08:37,000 --> 00:08:40,000
For the audience, we were targeting.

98
00:08:40,000 --> 00:08:44,000
A tool like Airflow, for instance, is really a steep learning curve.

99
00:08:46,000 --> 00:08:52,000
The functionality we wanted were all the tasks, all the orchestration, basically the pipeline orchestration stuff.

100
00:08:53,000 --> 00:08:57,000
Caching, simple caching where you need to model data.

101
00:08:57,000 --> 00:09:03,000
We didn't think some of these packages were not modeling data sufficiently enough or not at all.

102
00:09:03,000 --> 00:09:06,000
Scenario management, that's something I really insist.

103
00:09:06,000 --> 00:09:10,000
That's this capability to do what-if analysis with your pipelines.

104
00:09:10,000 --> 00:09:17,000
Versioning, so I'm not talking about versioning of your MLflow with your registry for your data model,

105
00:09:17,000 --> 00:09:22,000
nor am I talking about the versioning of code here.

106
00:09:22,000 --> 00:09:25,000
I'm talking about versioning of the pipeline itself.

107
00:09:25,000 --> 00:09:27,000
When you change, the pipeline evolves over time.

108
00:09:27,000 --> 00:09:29,000
You may have a new data source and this kind of thing.

109
00:09:29,000 --> 00:09:30,000
You need to version it.

110
00:09:30,000 --> 00:09:32,000
We didn't find any tool that could do that.

111
00:09:33,000 --> 00:09:40,000
Cycle, so that's more of an option, but many of the customers we deal with, they have cycles in their business.

112
00:09:40,000 --> 00:09:47,000
McDonald's, when they do prediction of sales for their stores, they do it once a week for every single store.

113
00:09:48,000 --> 00:09:54,000
So the scenario management, basically you need to be able to create scenarios per time bucket every week.

114
00:09:54,000 --> 00:09:59,000
One of these scenarios could become the official scenario, the one you are going to publish,

115
00:09:59,000 --> 00:10:02,000
the one that is going to be the official one.

116
00:10:02,000 --> 00:10:06,000
So all these capabilities are built in inside Type-I.

117
00:10:06,000 --> 00:10:11,000
Again, there are situations, I don't know, like fraud detection where you don't have cycles.

118
00:10:11,000 --> 00:10:16,000
But a lot of companies in the business world do have cycles, whether it's daily, monthly, weekly.

119
00:10:20,000 --> 00:10:23,000
So let's start now with a little bit of code.

120
00:10:23,000 --> 00:10:25,000
So I'll show you some code.

121
00:10:30,000 --> 00:10:33,000
So let's start.

122
00:10:36,000 --> 00:10:38,000
A bit of code on the green side.

123
00:10:39,000 --> 00:10:46,000
So I'll start with something simple so I get rid of...

124
00:10:46,000 --> 00:10:48,000
So...

125
00:10:57,000 --> 00:11:00,000
Okay, let me get rid of this.

126
00:11:01,000 --> 00:11:03,000
This is here.

127
00:11:06,000 --> 00:11:11,000
Okay, so let's start with the simplest program that you can have with Type-I.

128
00:11:11,000 --> 00:11:13,000
Okay.

129
00:11:15,000 --> 00:11:21,000
Okay, so in fact you will see that Type-I is in fact an augmented markdown.

130
00:11:21,000 --> 00:11:28,000
Okay, so what you see here, once you have done your PIP install, you import the GUI,

131
00:11:28,000 --> 00:11:33,000
and you start having your first markdown, the page.

132
00:11:34,000 --> 00:11:37,000
I'll move that here, it might be easier.

133
00:11:38,000 --> 00:11:43,000
Yeah, the page that you defined is just markdown. That's markdown, no Type-I.

134
00:11:43,000 --> 00:11:46,000
And you start having your first Type-I object.

135
00:11:46,000 --> 00:11:53,000
So Type-I objects are basically defined with these symbols here.

136
00:11:53,000 --> 00:11:56,000
I will go into this a little bit later.

137
00:11:56,000 --> 00:12:01,000
You can see here a Python object that is an integer, value 10.

138
00:12:01,000 --> 00:12:06,000
And everything Python always has these curly brackets around it.

139
00:12:06,000 --> 00:12:09,000
Okay, so that's how you see whether it's a data frame, a dictionary.

140
00:12:09,000 --> 00:12:15,000
Here it's an integer. And it's a text here. By default, it's a text.

141
00:12:15,000 --> 00:12:18,000
And we're going to basically run this.

142
00:12:18,000 --> 00:12:25,000
And you can see that I'm passing the page, which is a markdown page, to this.

143
00:12:25,000 --> 00:12:28,000
Okay, so let's execute this.

144
00:12:29,000 --> 00:12:31,000
Okay.

145
00:12:36,000 --> 00:12:40,000
So it's going to spin off a web server.

146
00:12:42,000 --> 00:12:52,000
And you will see a thing appearing here. Maybe I'll try to do this.

147
00:12:52,000 --> 00:12:55,000
And you can see the code side by side here.

148
00:12:55,000 --> 00:12:58,000
So you can see you've got the markdown demo, which is in, this demo is in italic,

149
00:12:58,000 --> 00:13:03,000
so that's just markdown stuff. And you have your value 20, which appears here.

150
00:13:03,000 --> 00:13:08,000
Okay, so let's try to make it a little bit more complex.

151
00:13:08,000 --> 00:13:12,000
So what I'll do here, I will add an object.

152
00:13:12,000 --> 00:13:18,000
So here, beside providing a Python object, the next field is actually the actual widget,

153
00:13:18,000 --> 00:13:22,000
a graphical widget you would like to use. So here it's a slider.

154
00:13:22,000 --> 00:13:30,000
You will have charts, you will have menus, bar, different kinds of objects.

155
00:13:30,000 --> 00:13:37,000
At the moment, most of the objects are coming from Plutly, built on top of Plutly,

156
00:13:37,000 --> 00:13:42,000
but you have also an API to bring any graphical objects that you want.

157
00:13:42,000 --> 00:13:47,000
So here we have a slider. And here that's also some parameter, we call it property.

158
00:13:47,000 --> 00:13:51,000
After you define properties, so you have all the properties you can find for charts.

159
00:13:51,000 --> 00:13:58,000
Here it's a property associated with a slider, which gives you how quickly you want your graphical object to react.

160
00:13:58,000 --> 00:14:04,000
If you have a remote platform, for instance, you may want to have a kind of slow response time,

161
00:14:04,000 --> 00:14:13,000
whereas if you are running locally, then you will be able to react very quickly to the typing of your code here.

162
00:14:13,000 --> 00:14:22,000
And next, I'm going to plot a chart, which here I'm using the data.

163
00:14:22,000 --> 00:14:29,000
So you will see the slider is basically connected with an initial value, which is the same Python value.

164
00:14:29,000 --> 00:14:35,000
And next, I have a chart object, so it's a new object. By default, it will be a line chart.

165
00:14:35,000 --> 00:14:38,000
Sorry, yes?

166
00:14:38,000 --> 00:14:42,000
Sorry, I don't know if I'm doing all that. Can you zoom in, please?

167
00:14:42,000 --> 00:14:48,000
Sure.

168
00:14:48,000 --> 00:14:57,000
Can I zoom? If I do that? Yes, but I'm not sure it will.

169
00:14:57,000 --> 00:15:02,000
Is it better? I don't want to zoom too much. Is it better?

170
00:15:02,000 --> 00:15:10,000
One more? Yeah.

171
00:15:10,000 --> 00:15:15,000
Sorry.

172
00:15:15,000 --> 00:15:18,000
Okay.

173
00:15:18,000 --> 00:15:23,000
So you will see there are a lot of parameters, in fact, that you can use.

174
00:15:23,000 --> 00:15:30,000
For instance, again, most of the tool like Streamlit, if you have a long run, for instance, you are launching a function.

175
00:15:30,000 --> 00:15:33,000
When you click on a button, you are stuck.

176
00:15:33,000 --> 00:15:40,000
Okay, here you have parameters also to decide whether you want to go asynchronously or synchronously, whether you wait or you want not to wait, for instance.

177
00:15:40,000 --> 00:15:47,000
So you got a lot of things here which are about really fine-tuning the way you interact with your software.

178
00:15:47,000 --> 00:15:58,000
So here what I'm doing, I'm creating basically a sine curve. It's a function here that returns a list.

179
00:15:58,000 --> 00:16:06,000
You can see that this is a list that we are building. So it's a decaying sine curve.

180
00:16:07,000 --> 00:16:16,000
And I put this as a list. It returns a list. So when I compute that, I get a list and I put that list in the chart.

181
00:16:16,000 --> 00:16:20,000
Okay, so that's what I'm doing here.

182
00:16:20,000 --> 00:16:28,000
So I'm going to run this again. So never forget to stop your previous run because you are going to use the same port otherwise.

183
00:16:28,000 --> 00:16:31,000
And let's run this again.

184
00:16:31,000 --> 00:16:39,000
In fact, I'll show you next time. But here I'm running again the server. You could have saved and just update your page.

185
00:16:39,000 --> 00:16:46,000
So here you have your graphics. Okay. And you have the trigger.

186
00:16:46,000 --> 00:16:55,000
So what you are seeing is two things. So first, I didn't do anything to connect value here with the slider.

187
00:16:55,000 --> 00:17:05,000
Except if you remember in the code, you have this simply disconnection here value with the slider.

188
00:17:05,000 --> 00:17:09,000
Okay, so if I change the slider, I change the value.

189
00:17:09,000 --> 00:17:17,000
What I've done here is also connect so that different ways. So I'm showing you here what is called a callback,

190
00:17:17,000 --> 00:17:24,000
which is basically saying whenever you change, it's a global callback, whenever you change, sorry, it's here.

191
00:17:24,000 --> 00:17:33,000
Whenever you change this particular value and this Python variable called value, then recompute your chart.

192
00:17:33,000 --> 00:17:41,000
Okay, so this is what you see here when you run the software.

193
00:17:41,000 --> 00:17:46,000
Hold on. Yep. So you see this connection occur here.

194
00:17:46,000 --> 00:17:52,000
Okay, so there are different ways of doing that. First, you don't have to do it. That's another method.

195
00:17:52,000 --> 00:17:57,000
Do not use any callback. Okay, so in this case, what you do, you just do that.

196
00:17:57,000 --> 00:18:09,000
Okay, and you pass directly the function call here. So you just put compute data of value directly in there.

197
00:18:09,000 --> 00:18:14,000
Okay, so if I can do that, sorry.

198
00:18:17,000 --> 00:18:27,000
And you put your value and that will do the job. So it's like a Python F string that you can put directly in there.

199
00:18:27,000 --> 00:18:37,000
So if I do control S, okay, I save that. If I update my page, sorry, if I update the page,

200
00:18:37,000 --> 00:18:43,000
you should have the same behavior. Oh, sorry. What is going on? Maybe I didn't stop.

201
00:18:50,000 --> 00:18:55,000
Let me run. Oh, yes, I still had this running. So let me run again.

202
00:19:07,000 --> 00:19:17,000
So you see you still have the same connection. So there are different ways to do that.

203
00:19:17,000 --> 00:19:24,000
I'll just show you one without a callback and one with callbacks. Okay.

204
00:19:24,000 --> 00:19:34,000
What else can I say? So there are a lot of objects available. You can go to the website. Yep.

205
00:19:34,000 --> 00:19:35,000
Yep.

206
00:19:38,000 --> 00:19:46,000
No, you don't. Absolutely not. No, you can remove it. Absolutely. That was for the previous case. You wouldn't need it. Yep.

207
00:19:48,000 --> 00:19:59,000
So basically, there are reasons for using certain callbacks versus doing F string call directly inside the...

208
00:19:59,000 --> 00:20:07,000
Obviously, if you have like three or four objects that relate to your computer data value, you don't want to call the function three times.

209
00:20:07,000 --> 00:20:13,000
So it's more efficient to have a global callback on this. We also have local callbacks and things to optimize.

210
00:20:13,000 --> 00:20:19,000
It's all about optimizing the reaction and the interaction you have with the software.

211
00:20:19,000 --> 00:20:28,000
For those of you who are not used to callbacks, we do have tips and videos and things like that to introduce you slowly with very simple articles on how to tune this.

212
00:20:28,000 --> 00:20:33,000
But this is very important when you build a full application. It's multi-user.

213
00:20:33,000 --> 00:20:40,000
I will show you also how it works on notebooks. It's exactly the same thing.

214
00:20:40,000 --> 00:20:47,000
It will spin a web thing on a notebook. I'll show it to you right now.

215
00:20:47,000 --> 00:20:55,000
Before that, I want to show you something we did, which is what we call Decimator.

216
00:20:55,000 --> 00:21:02,000
We have customers who really want to show big data or large data, I should say, graphically.

217
00:21:02,000 --> 00:21:15,000
Of course, some people use the different shaders and things like that, but very often you need to keep the shape of certain things.

218
00:21:15,000 --> 00:21:31,000
What you will see here is a specific object. We use a chart which has many points.

219
00:21:31,000 --> 00:21:38,000
We just add a property to that chart, which is Decimator.

220
00:21:38,000 --> 00:21:43,000
Let me run this demo first for you.

221
00:21:50,000 --> 00:21:56,000
Here we'll just take a particular...

222
00:21:58,000 --> 00:22:03,000
You will see that over here.

223
00:22:03,000 --> 00:22:10,000
No, that's not the one here. Why? Because it's using this.

224
00:22:10,000 --> 00:22:14,000
We need to use this, this.

225
00:22:14,000 --> 00:22:19,000
Let's start again.

226
00:22:19,000 --> 00:22:23,000
It's using the other...

227
00:22:49,000 --> 00:22:54,000
Okay.

228
00:22:54,000 --> 00:23:01,000
Here we have to assume...

229
00:23:01,000 --> 00:23:07,000
We choose a particular time series here.

230
00:23:07,000 --> 00:23:12,000
Let's assume it's a very large one. It could be an IoT thing. You may have a lot of points.

231
00:23:12,000 --> 00:23:16,000
Of course, if you show that in Python, it's likely to crash if you have too many points.

232
00:23:17,000 --> 00:23:27,000
The first curve is the kind of curve that would crash, but I have to show you a curve where you have many points and how that curve evolves if you make it a decimator.

233
00:23:27,000 --> 00:23:36,000
When you use a decimator, you say, I want to use 500 points, and it will remove all the points that least modify the shape of the curve.

234
00:23:36,000 --> 00:23:46,000
You can see here, for instance, that the shape is respected. If I do some zooming, it will add points. It will still be 500 points.

235
00:23:46,000 --> 00:23:56,000
The more you zoom, you maintain that capability. It works also very well with clusters to respect the shape of your clusters and things like that.

236
00:23:56,000 --> 00:23:59,000
It's extremely useful for some of our customers.

237
00:23:59,000 --> 00:24:05,000
That's just one of the algorithms that we have used as part of Type-I.

238
00:24:05,000 --> 00:24:19,000
One thing I want to show you also before we move to the next Type-I core is...

239
00:24:19,000 --> 00:24:29,000
That's basically the fact that it works on notebooks.

240
00:24:29,000 --> 00:24:43,000
Here I have some colab stuff. I've got a notebook thing here. I'm going to use the Jupyter notebook here.

241
00:24:43,000 --> 00:24:48,000
I'm running Jupyter locally.

242
00:24:48,000 --> 00:24:56,000
It's a small sentiment analysis with some neural network involved here.

243
00:24:56,000 --> 00:25:01,000
Let's assume everything has been installed.

244
00:25:01,000 --> 00:25:14,000
Here we just get your transformer engine loaded.

245
00:25:14,000 --> 00:25:21,000
Down here you will see I'm creating a series of pages with Type-I. I don't want to go into it.

246
00:25:21,000 --> 00:25:29,000
It's the first page that we create. The second page is here. After that, I'm going to run this.

247
00:25:29,000 --> 00:25:40,000
Basically, from your notebook, you will see this application like what you would do outside of notebooks.

248
00:25:40,000 --> 00:25:43,000
Hopefully.

249
00:25:43,000 --> 00:25:52,000
That should be coming. It's supposed to be a sentiment analysis.

250
00:25:52,000 --> 00:26:00,000
I think there are two pages. Maybe we can have a look a little bit at the code.

251
00:26:00,000 --> 00:26:16,000
I don't know why it takes so long.

252
00:26:16,000 --> 00:26:23,000
Not sure what's going on here.

253
00:26:23,000 --> 00:26:30,000
That's not...

254
00:26:30,000 --> 00:26:35,000
Okay, running.

255
00:26:35,000 --> 00:26:44,000
That should work.

256
00:26:44,000 --> 00:26:53,000
Let me try another time again. Was there any other notebook?

257
00:26:53,000 --> 00:27:01,000
Okay, nothing is running here.

258
00:27:01,000 --> 00:27:19,000
Let me start again.

259
00:27:19,000 --> 00:27:32,000
I think there must be some port issue here. Let me see if that works better if I use colab.

260
00:27:32,000 --> 00:27:42,000
This should work.

261
00:27:42,000 --> 00:27:52,000
I need to install that as well. This hasn't been installed. This will take a while. I think if I do it, it will take too long.

262
00:27:52,000 --> 00:28:21,000
That's quite fine.

263
00:28:21,000 --> 00:28:33,000
It's just reinstalling everything here.

264
00:28:33,000 --> 00:28:41,000
While it's doing it, it's quite interesting to maybe have a look at how we combine the pages. We have two pages. This is page one.

265
00:28:41,000 --> 00:28:49,000
We just specified the page, the markdown basically object. We have one for page one and another one for page two. These have been defined above.

266
00:28:49,000 --> 00:28:59,000
We connect them as a dictionary of pages and you just pass this to your GUI here.

267
00:28:59,000 --> 00:29:20,000
How is this going? Okay, we are fine. This has been loaded correctly. Let's move to here.

268
00:29:20,000 --> 00:29:29,000
After that should be fine.

269
00:29:29,000 --> 00:29:38,000
This is page one. This is page two.

270
00:29:38,000 --> 00:30:00,000
This is the thing we will be getting. We go back to this here.

271
00:30:00,000 --> 00:30:10,000
I think I need to rerun the whole thing. Basically it works on notebooks.

272
00:30:10,000 --> 00:30:20,000
We have a booth where I can show you later if you want. I think there are some port issues on that front.

273
00:30:20,000 --> 00:30:30,000
That was for the graphical side. If you want, you can go to the website. You've got a step-by-step thing. You've got some tips.

274
00:30:30,000 --> 00:30:39,000
You've got some resources, demos that you can run with the code. You've got the documentation.

275
00:30:39,000 --> 00:30:52,000
You can see some of the graphics that exist inside Type-I GUI. The different visual elements that you have in there.

276
00:30:52,000 --> 00:31:01,000
You have quite a few of these objects here.

277
00:31:01,000 --> 00:31:25,000
Let's go back now to the Type-I Core. Type-I Core is a different object. Here on the visual code, I'll be showing you the editor for our pipelines.

278
00:31:25,000 --> 00:31:32,000
Here you will see that you can create graphically on the visual code your own pipelines very easily.

279
00:31:32,000 --> 00:31:49,000
In blue, the blue box are all data nodes. The red boxes are tasks. The pipelines are actually the tasks that you associate with them.

280
00:31:49,000 --> 00:31:58,000
The data node is a larger concept than you may think. It's not only about external data that you fetch, whether it's a CSV, a parquet, or some other format.

281
00:31:58,000 --> 00:32:09,000
It can be also a parameter. Here, for instance, the day is a date. It's a Python date object. That's also a data node.

282
00:32:09,000 --> 00:32:21,000
It could be an in-memory object that you define here. That's interactive. That's an extension, a visual code extension that you install.

283
00:32:21,000 --> 00:32:30,000
By the way, on the visual code also, for the GUI, you have the code completion to help you with the syntax and everything.

284
00:32:30,000 --> 00:32:43,000
Here, for instance, we can check the different parameters that we have created. This particular initial dataset is a data node.

285
00:32:43,000 --> 00:32:48,000
The premise is that it has zoomed a lot. You've got all the properties. We know it's a CSV type.

286
00:32:48,000 --> 00:32:55,000
You can have a wide range of data node types, but you can create your own very easily.

287
00:32:55,000 --> 00:33:06,000
There's no limitation here. You define the path, the property, and you can define also the kind of data, Python object, you want to use.

288
00:33:06,000 --> 00:33:16,000
For instance, if you are dealing with tabular type of data, you can say, okay, that will end up...

289
00:33:16,000 --> 00:33:23,000
The passing, basically, of the result of this can be a data frame, could be an MPI array, it could be a dictionary. That's your decision.

290
00:33:23,000 --> 00:33:27,000
You can modify it here with a property if you want to.

291
00:33:27,000 --> 00:33:32,000
The task, in fact, that's a Python function.

292
00:33:32,000 --> 00:33:40,000
You link that particular object to... Here you have the directory. It's a relative path.

293
00:33:40,000 --> 00:33:55,000
You've got the name, algo.pipe, and that's the function inside this config, this data.

294
00:33:55,000 --> 00:34:00,000
You will have... Sorry, that's not the inside algo, sorry.

295
00:34:00,000 --> 00:34:08,000
You've got this config function, which is clean data.

296
00:34:08,000 --> 00:34:18,000
You've got clean data that you have defined inside your algo here. It's a pure Python function.

297
00:34:18,000 --> 00:34:23,000
Okay?

298
00:34:23,000 --> 00:34:35,000
Of course, it's an editor, so you can create your new data node. It will appear, and you can connect it.

299
00:34:35,000 --> 00:34:41,000
It's basically a graphical editor for you to do that. It saves as a .toml file.

300
00:34:41,000 --> 00:34:46,000
All of what I'm doing here can also be done programmatically.

301
00:34:46,000 --> 00:34:54,000
If you want to do it programmatically, the very same thing that we have here under your eyes can be programmed like this.

302
00:34:54,000 --> 00:35:00,000
You create... That's because of the zooming here.

303
00:35:00,000 --> 00:35:11,000
You can see the different things. I create data nodes with a function and so on and so forth to create the tasks.

304
00:35:12,000 --> 00:35:26,000
One thing I wanted to show you also... Sorry, that's not what I want to do here.

305
00:35:26,000 --> 00:35:31,000
Okay.

306
00:35:31,000 --> 00:35:37,000
I lost it.

307
00:35:37,000 --> 00:35:45,000
Okay. One thing that we have in the configuration... If you go to .toml...

308
00:35:45,000 --> 00:35:54,000
I lost it. I don't know how to get it back.

309
00:35:54,000 --> 00:36:02,000
One thing that exists inside the task is the concept of caching. You can see it here. You can do it also graphically.

310
00:36:02,000 --> 00:36:08,000
One particular task here, we associate the properties skippable.

311
00:36:08,000 --> 00:36:16,000
It's skippable basically if none of the input of the task has changed from the previous run.

312
00:36:16,000 --> 00:36:22,000
There's no reason why you would rerun this task again. If you assign it skippable, then it will skip it.

313
00:36:22,000 --> 00:36:30,000
You can attach also a time period. You may say, I want that to be skippable only for a day.

314
00:36:30,000 --> 00:36:34,000
You've got different parameters that you can play with.

315
00:36:34,000 --> 00:36:39,000
At the end of the day, what you end up with is really your main file.

316
00:36:39,000 --> 00:36:46,000
If you have created a .toml file, you just need to load that config. It's a configuration file.

317
00:36:46,000 --> 00:36:50,000
You can start creating pipelines and scenarios and execute them.

318
00:36:50,000 --> 00:36:55,000
I'm going to run here a scenario. You remember this date parameter.

319
00:36:55,000 --> 00:37:01,000
It's actually the date from which you want to start the prediction for this very simple pipeline.

320
00:37:01,000 --> 00:37:10,000
We are going to iterate the date from the 25th of January 2021 and add a day and call this function.

321
00:37:10,000 --> 00:37:17,000
It's really just a creation of the scenario and the submission of the scenario as a job.

322
00:37:18,000 --> 00:37:22,000
Let's run this.

323
00:37:22,000 --> 00:37:27,000
Here, there is no fancy stuff really going on.

324
00:37:27,000 --> 00:37:34,000
You will see basically the jobs. I think there are about 10 jobs that will get executed.

325
00:37:34,000 --> 00:37:40,000
10 scenarios.

326
00:37:40,000 --> 00:37:45,000
That's what you get here.

327
00:37:45,000 --> 00:37:47,000
I'm waiting for this to happen.

328
00:37:47,000 --> 00:37:53,000
One thing you will notice, each scenario is actually made of three tasks.

329
00:37:53,000 --> 00:38:00,000
There are three continuous tasks that occur here.

330
00:38:00,000 --> 00:38:05,000
I've launched a little bit of graphics at the end of it.

331
00:38:05,000 --> 00:38:10,000
What I want to show you is the fact that one of these tasks was actually skippable.

332
00:38:10,000 --> 00:38:21,000
You can see that when I run the first time, that's the first time it runs.

333
00:38:21,000 --> 00:38:28,000
On the second time, you can see that...

334
00:38:28,000 --> 00:38:32,000
Completed, completed.

335
00:38:32,000 --> 00:38:38,000
Two, two, two.

336
00:38:38,000 --> 00:38:43,000
You will see...

337
00:38:43,000 --> 00:38:50,000
Zooming, that's not that easy.

338
00:38:50,000 --> 00:38:53,000
Two, two, two, two.

339
00:38:53,000 --> 00:39:03,000
We run the three tasks several times.

340
00:39:03,000 --> 00:39:06,000
No results.

341
00:39:06,000 --> 00:39:11,000
One of the tasks is supposed to be skipped.

342
00:39:11,000 --> 00:39:19,000
Let me start from the start.

343
00:39:19,000 --> 00:39:26,000
That's the first run. This is the first prediction I'm running.

344
00:39:26,000 --> 00:39:32,000
This is done.

345
00:39:32,000 --> 00:39:36,000
It has never been written.

346
00:39:36,000 --> 00:39:41,000
Again, this doesn't seem to be skipped for some reason.

347
00:39:41,000 --> 00:39:45,000
I cannot check on the diagram.

348
00:39:45,000 --> 00:39:48,000
Here it's not being skipped, but normally it should be.

349
00:39:48,000 --> 00:39:51,000
I don't know why.

350
00:39:51,000 --> 00:39:55,000
That's the objective of the skippable.

351
00:39:55,000 --> 00:40:06,000
What you have also here is the possibility to...

352
00:40:06,000 --> 00:40:11,000
Of course, you have all the orchestration, so the running in parallel of your tasks.

353
00:40:11,000 --> 00:40:16,000
The capability also to keep some intermediate data.

354
00:40:16,000 --> 00:40:20,000
One thing that we do provide is the versioning.

355
00:40:20,000 --> 00:40:26,000
For instance, one thing that we have here...

356
00:40:26,000 --> 00:40:40,000
When you run, for instance, Python, you get some first list of your version with the minus H option here.

357
00:40:40,000 --> 00:40:47,000
That tells you what are the different options for versioning your scenario and your execution.

358
00:40:47,000 --> 00:40:55,000
One other thing you can do is list what are the different versions that you have.

359
00:40:55,000 --> 00:40:58,000
There are three different levels of versioning.

360
00:40:58,000 --> 00:41:02,000
Development, experiment, and production.

361
00:41:02,000 --> 00:41:13,000
If you want to create a new thing, you just do minus experiment.

362
00:41:13,000 --> 00:41:22,000
You give it a name.

363
00:41:22,000 --> 00:41:34,000
It will run the whole thing again.

364
00:41:34,000 --> 00:41:44,000
There are just ten different scenarios with different predictions that are being run.

365
00:41:44,000 --> 00:41:46,000
Here we execute it.

366
00:41:46,000 --> 00:41:51,000
Let's go back to the thing here.

367
00:41:51,000 --> 00:42:14,000
If we want to look now at my list of versions, I have actually this test one that has been recorded as a new version.

368
00:42:14,000 --> 00:42:19,000
Once you have done that, you can create several of your development versions.

369
00:42:19,000 --> 00:42:22,000
You can move one of these into production.

370
00:42:22,000 --> 00:42:29,000
The difference between experiment and production is development, experiment, and production.

371
00:42:29,000 --> 00:42:40,000
Each time you run, it will erase all the intermediate data that it keeps, metadata for each of the runs and scenarios.

372
00:42:40,000 --> 00:42:48,000
Eventually, one of the experiments will actually become into production.

373
00:42:48,000 --> 00:42:59,000
If you modify your pipeline and you run it again with the same version, it will complain.

374
00:42:59,000 --> 00:43:03,000
It will tell you you have modified something.

375
00:43:03,000 --> 00:43:12,000
Here, this is where we provide some tools to help you migrate your code so that it can work within the same version of your pipeline.

376
00:43:12,000 --> 00:43:25,000
Typically, if you change a little attribute from CSV file, for instance, the file that we are reading, which is a CSV file, you move it into an Excel file or something else, it will notice it.

377
00:43:25,000 --> 00:43:36,000
If you add a new source, it will tell you there is a delta with a previous run, so your code needs to be ported.

378
00:43:36,000 --> 00:43:44,000
We provide this capability because you have a lot of customers that work on a particular pipeline over time, and they want to keep and reuse the existing scenario.

379
00:43:44,000 --> 00:43:52,000
If you change your pipeline, it's difficult to make that still useful.

380
00:43:52,000 --> 00:43:59,000
We provide this kind of migration path when you have this kind of work across versions.

381
00:43:59,000 --> 00:44:07,000
That's it on the Type I Core side.

382
00:44:07,000 --> 00:44:15,000
Let me give you a little bit of background on the roadmap now.

383
00:44:15,000 --> 00:44:20,000
Let's see what we do.

384
00:44:30,000 --> 00:44:38,000
On the Graphic Core side, we are going to have a GUI preview in June.

385
00:44:38,000 --> 00:44:47,000
While you are coding your graphics, you will see the layout of what you are coding appear while you are coding.

386
00:44:47,000 --> 00:44:56,000
That will help you see really well without having to run or execute your code.

387
00:44:56,000 --> 00:44:59,000
We provide enhanced tables.

388
00:44:59,000 --> 00:45:01,000
Available are already quite nice.

389
00:45:01,000 --> 00:45:04,000
They are editable and all these things.

390
00:45:04,000 --> 00:45:07,000
You can enter data inside.

391
00:45:07,000 --> 00:45:14,000
We provide more capabilities in some of the double indexes and pivoting and all these things.

392
00:45:14,000 --> 00:45:19,000
It's basically going to be built on AG Grid stuff.

393
00:45:19,000 --> 00:45:26,000
We will provide some cascading style sheets.

394
00:45:26,000 --> 00:45:29,000
It's actually already available.

395
00:45:29,000 --> 00:45:32,000
We released it this week.

396
00:45:32,000 --> 00:45:35,000
We have a style sheet that is provided.

397
00:45:35,000 --> 00:45:40,000
It helps you with something quite nice and easily modifiable for those of you who are not into CSS.

398
00:45:40,000 --> 00:45:43,000
That is really useful.

399
00:45:43,000 --> 00:45:56,000
On Type I Core, we will provide some graphical objects that will actually provide graphics on top of the Type I Core object.

400
00:45:56,000 --> 00:45:58,000
We will have a scenario selector.

401
00:45:58,000 --> 00:45:59,000
Cycles.

402
00:45:59,000 --> 00:46:02,000
Your scenario will be sorted per cycle.

403
00:46:02,000 --> 00:46:06,000
You will be able to visualize data nodes.

404
00:46:06,000 --> 00:46:10,000
You will be able also to query with natural language.

405
00:46:10,000 --> 00:46:15,000
These objects will be predefined and ready to use.

406
00:46:15,000 --> 00:46:21,000
You can see Type I Core and Type I GUI basically being combined.

407
00:46:21,000 --> 00:46:24,000
We are launching Type I Cloud next week.

408
00:46:24,000 --> 00:46:26,000
That's an open source.

409
00:46:26,000 --> 00:46:27,000
It's free.

410
00:46:27,000 --> 00:46:28,000
Sorry, it's not open source.

411
00:46:28,000 --> 00:46:32,000
It's free for our community users.

412
00:46:32,000 --> 00:46:33,000
We are open source.

413
00:46:33,000 --> 00:46:36,000
I don't know if I mentioned this.

414
00:46:36,000 --> 00:46:40,000
It will be a very easy way for you to deploy your app.

415
00:46:40,000 --> 00:46:47,000
The application will request to define the machine with some basic parameters.

416
00:46:47,000 --> 00:47:02,000
You will upload your zip file and you will be able to admin your different machines and execute them also there.

417
00:47:02,000 --> 00:47:19,000
We will provide a decent machine, not a huge machine at this stage, but something that's quite useful for you to deploy in your application.

418
00:47:19,000 --> 00:47:26,000
I think I've covered most of the things I wanted to cover here.

419
00:47:26,000 --> 00:47:28,000
I'm open for questions.

420
00:47:28,000 --> 00:47:33,000
I want to apologize also for I'm not the one who's supposed to present.

421
00:47:33,000 --> 00:47:42,000
That's why it was a bit of a hiccup with some things I wanted to show you.

422
00:47:42,000 --> 00:47:46,000
All of this is basically being used in large applications again.

423
00:47:46,000 --> 00:47:54,000
That's something that the software has been used in very large organizations, has been tested even though it's fairly recent.

424
00:47:54,000 --> 00:48:04,000
The idea is really to be able to cover the whole spectrum of application building.

425
00:48:04,000 --> 00:48:13,000
Any questions?

426
00:48:13,000 --> 00:48:17,000
Oh yes, of course I always forget.

427
00:48:17,000 --> 00:48:27,000
Please contribute, at least give some stars to our repo, Aviga.

428
00:48:27,000 --> 00:48:29,000
I have two questions.

429
00:48:29,000 --> 00:48:32,000
One is you mentioned that you are using Fontium backend.

430
00:48:32,000 --> 00:48:36,000
Is there a plan to use it on the library?

431
00:48:36,000 --> 00:48:47,000
The second question is, is there some logic around why you decided to use enhanced markdown as a forward layer and fallback layer?

432
00:48:47,000 --> 00:48:55,000
Okay, the first question.

433
00:48:55,000 --> 00:48:59,000
First of all, I mentioned that we have an API, which is fairly easy to use.

434
00:48:59,000 --> 00:49:03,000
It connects with any JavaScript library.

435
00:49:03,000 --> 00:49:06,000
That can be part of the contribution.

436
00:49:06,000 --> 00:49:10,000
We'll be working with some guys, I don't know if you know Vizu.

437
00:49:10,000 --> 00:49:15,000
We'll work with those guys to have these dynamic graphs.

438
00:49:15,000 --> 00:49:21,000
We'll be working progressively on Matplotlib stuff.

439
00:49:21,000 --> 00:49:25,000
Plotly also, we're looking at what they're doing to provide.

440
00:49:25,000 --> 00:49:27,000
We have very specific graphics.

441
00:49:27,000 --> 00:49:31,000
For instance, we have some guys who really, some of our users really want an ICN chart.

442
00:49:31,000 --> 00:49:34,000
It's a specialized library.

443
00:49:34,000 --> 00:49:37,000
We have a contribution.

444
00:49:37,000 --> 00:49:42,000
We are at that stage where we really want to build the community around contribution here.

445
00:49:42,000 --> 00:49:45,000
We are really open to this kind of stuff.

446
00:49:45,000 --> 00:49:51,000
On the second, why markdown?

447
00:49:51,000 --> 00:49:59,000
Markdown provides you already a network, a framework, sorry, for a lot of the which the loop can fill.

448
00:49:59,000 --> 00:50:04,000
It's a documentation kind of language, if you want.

449
00:50:04,000 --> 00:50:09,000
We had to benefit from this.

450
00:50:09,000 --> 00:50:17,000
We had to design, of course, the syntax for embedding this.

451
00:50:17,000 --> 00:50:19,000
We have done testing also.

452
00:50:19,000 --> 00:50:21,000
We had different ideas at the beginning.

453
00:50:21,000 --> 00:50:23,000
We look at three or four different options.

454
00:50:23,000 --> 00:50:30,000
That's the one that seemed to be adopted by our customers.

455
00:50:30,000 --> 00:50:35,000
You don't need to know markdown.

456
00:50:35,000 --> 00:50:42,000
Markdown is very easy to use in general.

457
00:50:42,000 --> 00:50:48,000
In terms of learning curve, we measured how long it takes for somebody who is using the markdown approach.

458
00:50:48,000 --> 00:50:51,000
We had another approach at the very start of the product.

459
00:50:51,000 --> 00:50:56,000
We noticed that better productivity using the markdown stuff.

460
00:50:56,000 --> 00:51:01,000
We didn't want to do something like streamlit because we were really heavy users of streamlit.

461
00:51:01,000 --> 00:51:03,000
We decided to stop.

462
00:51:03,000 --> 00:51:08,000
We didn't want to do something like this.

463
00:51:08,000 --> 00:51:15,000
It came as a natural choice.

464
00:51:15,000 --> 00:51:21,000
If you want more explanation, I have to get my R&D guys involved.

465
00:51:21,000 --> 00:51:26,000
That's the gist of it.

466
00:51:26,000 --> 00:51:33,000
It's also something where you don't see it here, but it's extremely efficient.

467
00:51:33,000 --> 00:51:42,000
A lot of the work has been spent on having a very efficient interface here in terms of interactions

468
00:51:42,000 --> 00:51:51,000
instead of dealing with different size of data, multi-user, not being locked when you do a long run.

469
00:51:51,000 --> 00:51:54,000
You want to be able to move, but you need to decide.

470
00:51:54,000 --> 00:51:57,000
You can decide that when you work on remote platform.

471
00:51:57,000 --> 00:52:00,000
There's this refresh rate as a parameter.

472
00:52:00,000 --> 00:52:02,000
It could be as complex as you want.

473
00:52:02,000 --> 00:52:06,000
You have this level of customization that we didn't want to give away.

474
00:52:06,000 --> 00:52:11,000
That's why I'm not very keen to say our marketing guys want to say we are low-code,

475
00:52:11,000 --> 00:52:13,000
but I'm very careful with that.

476
00:52:13,000 --> 00:52:18,000
First, as a Python developer, I don't like to use low-code in general.

477
00:52:18,000 --> 00:52:20,000
Low-code means a lot of different things.

478
00:52:20,000 --> 00:52:22,000
Very, very low-code stuff.

479
00:52:22,000 --> 00:52:25,000
We are not really low-code, but we program very quickly.

480
00:52:25,000 --> 00:52:27,000
We understand you need customization.

481
00:52:27,000 --> 00:52:29,000
We need very high-level.

482
00:52:29,000 --> 00:52:37,000
We kept that in mind to try to build something which is efficient and can build a complete application,

483
00:52:37,000 --> 00:52:38,000
not only pilot.

484
00:52:38,000 --> 00:52:40,000
Of course, you can use it for pilot.

485
00:52:40,000 --> 00:52:44,000
But at the same time, maintain a high level of customization.

486
00:52:44,000 --> 00:52:49,000
To avoid a mistake that we have seen, it's not really a mistake.

487
00:52:49,000 --> 00:52:55,000
I think the tool extremely at the start was really developed for pilot, not for real application.

488
00:52:55,000 --> 00:53:01,000
Since we are seeing also a lot of CIOs, we have really two types of customers and prospects.

489
00:53:01,000 --> 00:53:08,000
We have an enterprise version, by the way, which is only providing support on the LDAP connection security stuff.

490
00:53:08,000 --> 00:53:10,000
But then feature-wise, it's the same.

491
00:53:10,000 --> 00:53:15,000
But when we talk to our prospects, we have really two types of customers.

492
00:53:15,000 --> 00:53:20,000
We have customers who are absolutely, they know everything about the Python ecosystem.

493
00:53:20,000 --> 00:53:25,000
Most, for instance, in finance, not surprisingly, they know absolutely everything.

494
00:53:25,000 --> 00:53:28,000
And you have to fit Type I within their ecosystem.

495
00:53:28,000 --> 00:53:32,000
And you have to be very technical, go very deeply to see how it fits.

496
00:53:32,000 --> 00:53:33,000
And you've got beginners.

497
00:53:33,000 --> 00:53:37,000
It could be a big company with CIO, and they just start on Python.

498
00:53:37,000 --> 00:53:43,000
And this is a platform also to gently make them easily develop full application.

499
00:53:43,000 --> 00:53:46,000
So we cater for both.

500
00:53:46,000 --> 00:53:49,000
It's a big gap.

501
00:53:55,000 --> 00:53:56,000
Any other questions?

502
00:53:58,000 --> 00:53:59,000
So thank you for your patience.

503
00:53:59,000 --> 00:54:03,000
And again, apologies for being late and not being able to show you everything here.

504
00:54:07,000 --> 00:54:08,000
Thank you.

