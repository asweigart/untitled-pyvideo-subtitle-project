1
00:00:00,000 --> 00:00:07,520
Okay, hey, I have sound.

2
00:00:07,520 --> 00:00:08,520
Perfect.

3
00:00:08,520 --> 00:00:10,520
Hi, everyone.

4
00:00:10,520 --> 00:00:17,000
I'm Geir Aniela, and this is a tutorial about decorators.

5
00:00:17,000 --> 00:00:19,740
So first of all, thank you all for coming.

6
00:00:19,740 --> 00:00:22,240
It's great to see so many here.

7
00:00:22,240 --> 00:00:27,760
And just to tell you a little bit about the plan today, I guess is that we'll talk about

8
00:00:27,760 --> 00:00:29,320
decorators.

9
00:00:29,320 --> 00:00:38,360
And the first part, I'll kind of be a little bit teetery and just stand here and talk and

10
00:00:38,360 --> 00:00:40,280
show you some examples.

11
00:00:40,280 --> 00:00:44,880
And then we'll kind of move into more of an interactive session quite soon, where you'll

12
00:00:44,880 --> 00:00:50,200
be sort of like giving exercises, and then you'll have to play with them a little bit.

13
00:00:50,200 --> 00:00:54,320
And then we'll kind of discuss a little bit of solutions afterwards and move on to different

14
00:00:54,320 --> 00:00:55,320
exercises.

15
00:00:55,640 --> 00:00:59,920
So before I start, just to sort of like get an overview, how many of you have written

16
00:00:59,920 --> 00:01:03,200
your own decorators before?

17
00:01:03,200 --> 00:01:04,200
So a few of you.

18
00:01:04,200 --> 00:01:05,200
Okay.

19
00:01:05,200 --> 00:01:08,040
How many of you have consciously used a decorator?

20
00:01:08,040 --> 00:01:09,300
Cool.

21
00:01:09,300 --> 00:01:12,120
How many of you do not know what a decorator is?

22
00:01:12,120 --> 00:01:13,120
Perfect.

23
00:01:13,120 --> 00:01:20,080
Then we have a nice diversity here, and I'm sure that at the end of this, you'll all have

24
00:01:20,080 --> 00:01:23,280
written decorators yourself and hopefully have some good ideas about how you can use

25
00:01:23,280 --> 00:01:24,280
them.

26
00:01:24,280 --> 00:01:25,280
Okay.

27
00:01:25,280 --> 00:01:33,600
So my plan is to do this very interactively.

28
00:01:33,600 --> 00:01:38,120
So it looks like I have slides, but those are just the exercises.

29
00:01:38,120 --> 00:01:42,880
The rest, everything will kind of happen live.

30
00:01:42,880 --> 00:01:47,320
And also afterwards, I'll put everything up on my GitHub, so I'll share the GitHub link

31
00:01:47,320 --> 00:01:48,320
with you.

32
00:01:48,720 --> 00:01:53,000
So you can find all the code I write afterwards.

33
00:01:53,000 --> 00:01:59,760
But the idea is that you'll be typing yourself as well.

34
00:01:59,760 --> 00:02:09,280
And then let me just see if we can get these things looking decently here.

35
00:02:09,280 --> 00:02:14,200
So we have, essentially I'll just be using an editor to kind of have some code displayed

36
00:02:14,200 --> 00:02:15,480
up there.

37
00:02:15,480 --> 00:02:20,360
And then I also want to have, let's see if we can make that work.

38
00:02:20,360 --> 00:02:23,360
Come there.

39
00:02:29,360 --> 00:02:36,520
Sort of like a screen like this.

40
00:02:36,520 --> 00:02:41,560
So here on the right-hand side, I'm running IPython.

41
00:02:41,560 --> 00:02:44,680
Let's see if we can make this there.

42
00:02:44,880 --> 00:02:48,760
I'm running IPython, which is an interactive Python REPL.

43
00:02:48,760 --> 00:02:54,720
If you don't have IPython installed, feel free to just type Python and use the REPL

44
00:02:54,720 --> 00:02:55,720
you have there.

45
00:02:55,720 --> 00:03:00,200
IPython brings a few niceties, like it's easier to find your history and move around and things

46
00:03:00,200 --> 00:03:01,320
like this.

47
00:03:01,320 --> 00:03:09,480
But everything we'll do is very much basic Python, so we can just use our REPL like this.

48
00:03:09,480 --> 00:03:14,600
In terms of colors, I guess I'll try to make everything, let's see, we don't need that

49
00:03:14,600 --> 00:03:15,600
background.

50
00:03:15,600 --> 00:03:21,240
So just to make sure everything is readable.

51
00:03:21,240 --> 00:03:22,240
Let's see.

52
00:03:22,240 --> 00:03:28,120
Turn off the transparency.

53
00:03:28,120 --> 00:03:36,360
And I guess I can also toggle this one.

54
00:03:36,360 --> 00:03:41,280
Okay, are the fonts big enough?

55
00:03:41,280 --> 00:03:43,320
Can you see them from the back?

56
00:03:43,320 --> 00:03:44,320
Perfect.

57
00:03:45,040 --> 00:03:46,040
Yep.

58
00:03:46,040 --> 00:03:47,040
Goodie goodie.

59
00:03:47,040 --> 00:04:06,640
The end should be almost ready at least.

60
00:04:06,640 --> 00:04:08,240
Okay.

61
00:04:08,240 --> 00:04:13,560
So to start off, I kind of just want to give you a brief overview of what is a decorator.

62
00:04:13,560 --> 00:04:17,960
And then we'll kind of look a little bit about, it's really about how do you call and define

63
00:04:17,960 --> 00:04:18,960
functions.

64
00:04:18,960 --> 00:04:21,680
So we'll kind of talk a little bit about what are functions, how can you deal with functions

65
00:04:21,680 --> 00:04:23,280
in Python.

66
00:04:23,280 --> 00:04:28,080
So this will kind of just be a small overview like that.

67
00:04:28,080 --> 00:04:31,120
And then as I said afterwards, we'll kind of look into how do we actually define these

68
00:04:31,120 --> 00:04:33,800
things ourselves and so on.

69
00:04:33,800 --> 00:04:42,200
So first let me just show you some examples of which decorators are kind of out there.

70
00:04:42,680 --> 00:04:47,920
And I'm going to at least in the beginning we'll be using a lot of sort of like toy examples.

71
00:04:47,920 --> 00:04:52,640
So it may seem like decorators are for doing silly examples, but they are actually quite

72
00:04:52,640 --> 00:04:55,880
powerful and you can use them for real stuff as well.

73
00:04:55,880 --> 00:05:00,080
But bear with me with some of the toy examples in the beginning I guess.

74
00:05:00,080 --> 00:05:06,080
The idea is that I've chosen them more for their explainability, so to speak, than their

75
00:05:06,080 --> 00:05:09,440
usefulness, at least the first ones.

76
00:05:10,120 --> 00:05:17,280
Okay, so I'll start off just by importing the time library, mainly because I just want

77
00:05:17,280 --> 00:05:18,880
to show off something that's slow.

78
00:05:18,880 --> 00:05:24,200
And instead of creating a function that takes a long time to run, we'll just do the easy

79
00:05:24,200 --> 00:05:27,760
thing and do a time sleep in our function.

80
00:05:27,760 --> 00:05:33,160
And for this one, I want to just define a function that I'll call a slow square.

81
00:05:33,160 --> 00:05:36,880
So it'll take in a number and then it will square that number.

82
00:05:36,880 --> 00:05:38,600
But it will do so very slowly.

83
00:05:38,600 --> 00:05:46,560
So not very useful necessarily, but it can show us some of the things that we'll use.

84
00:05:46,560 --> 00:05:47,800
So let's see.

85
00:05:47,800 --> 00:06:00,120
Let's start off at least by saying that we'll be sleeping for a given number of seconds.

86
00:06:00,120 --> 00:06:03,520
So yeah, just to be clear, this is an F string.

87
00:06:04,200 --> 00:06:11,360
I'll make this one slightly wider for now and then we'll put it back in again.

88
00:06:11,360 --> 00:06:17,400
So just to let people know that something is happening, and then let's actually sleep.

89
00:06:17,400 --> 00:06:22,280
So I'll just sleep for some given number of seconds.

90
00:06:22,280 --> 00:06:28,560
And then we'll actually do the job of squaring the number.

91
00:06:28,560 --> 00:06:34,320
So this slow square function, it just squares a number, but very slowly.

92
00:06:34,320 --> 00:06:42,100
So for instance, we can square the number 3 and after 3 seconds, we'll get the number

93
00:06:42,100 --> 00:06:44,800
9 out.

94
00:06:44,800 --> 00:06:49,440
I don't want to really go on square very big numbers because that will take a really long

95
00:06:49,440 --> 00:06:56,880
time, but you can see here every time I call this, it takes some time.

96
00:06:56,880 --> 00:07:02,080
Now think of this more as you're doing some operation, you're doing some function that

97
00:07:02,080 --> 00:07:05,000
actually takes time for normal reasons.

98
00:07:05,000 --> 00:07:09,200
So you may want to avoid doing that operation over and over again.

99
00:07:09,200 --> 00:07:20,400
And Python comes with one of the standard library decorators, which is called cache.

100
00:07:20,400 --> 00:07:24,680
So this one you can use to cache results, which essentially means we've already calculated

101
00:07:24,680 --> 00:07:25,680
this.

102
00:07:25,680 --> 00:07:30,920
So just recall the result from previous.

103
00:07:30,920 --> 00:07:44,120
And one way we can use this is that I can define a cached square, which I'll just define

104
00:07:44,120 --> 00:07:50,060
by applying this decorator function to my slow square function.

105
00:07:50,060 --> 00:07:57,100
So for now, we don't really know what this cache is doing unless we go read in the docs

106
00:07:57,100 --> 00:07:58,740
or something like this.

107
00:07:58,740 --> 00:08:02,980
So it may not be clear that this cache can be applied to a function like this, but for

108
00:08:02,980 --> 00:08:07,860
now let's just trust that this works.

109
00:08:07,860 --> 00:08:17,500
So you can see here what actually has happened instead of I applied cache to slow square.

110
00:08:18,100 --> 00:08:20,740
Let's see the result of this.

111
00:08:20,740 --> 00:08:27,960
So if we now call cache square with three, then we can notice that again it sleeps for

112
00:08:27,960 --> 00:08:29,140
three seconds.

113
00:08:29,140 --> 00:08:31,760
So it again takes a little bit of time.

114
00:08:31,760 --> 00:08:36,560
But now if I call this a second time, you can see I get an immediate result.

115
00:08:36,560 --> 00:08:40,260
And it's not printing out the sleeping for three seconds at all.

116
00:08:40,260 --> 00:08:46,540
So what it has actually done is just completely skipped the second invocation of my function

117
00:08:46,580 --> 00:08:52,580
because it knows the return value is nine when it calls it like this.

118
00:08:52,580 --> 00:08:58,660
Now if I change the parameter here, so I'll do watch the square of two instead, then we'll

119
00:08:58,660 --> 00:09:02,980
see that again it goes back to sleeping because now I have different parameters sending in

120
00:09:02,980 --> 00:09:06,500
and then sleeps for two seconds and then we get four back.

121
00:09:06,500 --> 00:09:09,300
But then now this is also cached.

122
00:09:09,300 --> 00:09:12,240
So if I call cache square, I get this immediately.

123
00:09:12,240 --> 00:09:13,240
And it has some memories.

124
00:09:13,560 --> 00:09:18,660
If I go back and call in cache square three, that's also immediate.

125
00:09:18,660 --> 00:09:23,680
So all of this last stuff is not really about the decorator.

126
00:09:23,680 --> 00:09:28,820
The decorator part is just cache is a decorator.

127
00:09:28,820 --> 00:09:30,860
So what can decorators do?

128
00:09:30,860 --> 00:09:33,740
They can kind of change functions from the outside.

129
00:09:33,740 --> 00:09:39,320
So right here I didn't do anything to my slow square function, but I changed how the slow

130
00:09:39,320 --> 00:09:41,840
square function works, right?

131
00:09:41,840 --> 00:09:45,920
Instead of being slow at every call, now it suddenly caches the results and I could

132
00:09:45,920 --> 00:09:50,480
do this without going in and changing the function itself.

133
00:09:50,480 --> 00:09:53,200
So that is typically what we use decorators for.

134
00:09:53,200 --> 00:09:58,960
We can apply some behavior or something to different functions.

135
00:09:58,960 --> 00:10:04,680
So different examples of this would be, for instance, if you have setting up some website,

136
00:10:04,680 --> 00:10:07,920
you can kind of say that some of the routes you're going to, you need to be logged in

137
00:10:07,920 --> 00:10:08,920
and some you don't.

138
00:10:09,080 --> 00:10:12,640
You can kind of put the log in logic in the decorator, which makes it really easy to just

139
00:10:12,640 --> 00:10:17,240
say these are private pages, these are public pages, for instance.

140
00:10:17,240 --> 00:10:19,120
Or maybe you need to time certain functions.

141
00:10:19,120 --> 00:10:22,560
You can have a timer decorator that can just time things.

142
00:10:22,560 --> 00:10:26,400
One example we'll play with a little bit later is that maybe you have some function that

143
00:10:26,400 --> 00:10:31,200
sometimes fails, so you just want to retry.

144
00:10:31,200 --> 00:10:35,560
So then you can kind of retry until it succeeds and so on.

145
00:10:35,600 --> 00:10:40,760
Different ways where you can just add some behavior outside.

146
00:10:40,760 --> 00:10:44,680
A very powerful one, I guess, from the numerical analysis thing is that you can say that I

147
00:10:44,680 --> 00:10:50,000
want to apply just-in-time compilation to a function so that it can run faster.

148
00:10:50,000 --> 00:10:55,480
That's also something you can do just with a decorator.

149
00:10:55,480 --> 00:10:57,640
Okay.

150
00:10:57,640 --> 00:11:03,560
I'll also now very briefly just show you the typical syntax for using decorators.

151
00:11:03,560 --> 00:11:09,760
Because if you've seen decorators, they usually don't look like the one in number six there.

152
00:11:09,760 --> 00:11:13,880
That's one way to decorate your functions, but usually you do it when you define the

153
00:11:13,880 --> 00:11:15,800
function itself.

154
00:11:15,800 --> 00:11:17,800
So we can also define the cache square.

155
00:11:17,800 --> 00:11:22,640
Let's see, we can do this on top here.

156
00:11:22,640 --> 00:11:24,800
With this at symbol.

157
00:11:24,800 --> 00:11:28,560
So at symbol cache means that now I'm applying a decorator.

158
00:11:28,560 --> 00:11:31,600
And then I can just type out my function here.

159
00:11:31,640 --> 00:11:36,280
So previously we called it slow square, now I'll call it cache square like this.

160
00:11:36,280 --> 00:11:44,640
And then I can again, I'll kind of just repeat the same code like this.

161
00:11:44,640 --> 00:11:48,760
And now we should have exactly the same behaviors earlier.

162
00:11:48,760 --> 00:11:53,560
So if I call cache square with three, it sleeps for three seconds, but the second invocation

163
00:11:53,560 --> 00:11:55,760
is immediate.

164
00:11:55,760 --> 00:12:01,480
So this is kind of the typical way that we'll use decorators.

165
00:12:01,480 --> 00:12:05,280
Okay.

166
00:12:05,280 --> 00:12:09,760
I guess I didn't say this when I started, but feel very free to shake your hands in

167
00:12:09,760 --> 00:12:12,720
the air and ask questions.

168
00:12:12,720 --> 00:12:18,560
I'll try, so for video purposes, either I'll have to repeat the question or there is a

169
00:12:18,560 --> 00:12:19,920
microphone up there as well.

170
00:12:19,920 --> 00:12:24,320
So if you want to get, stretch your legs, you can also go up to the microphone.

171
00:12:24,720 --> 00:12:28,600
Yeah, do stop me if there's any questions.

172
00:12:28,600 --> 00:12:33,040
And I guess when you're talking logistics, there should be a break in about one hour

173
00:12:33,040 --> 00:12:34,040
and 18 minutes.

174
00:12:34,040 --> 00:12:36,960
So we'll have a half hour break.

175
00:12:36,960 --> 00:12:38,960
So it's like in the middle of the tutorial.

176
00:12:38,960 --> 00:12:39,960
Yes?

177
00:12:39,960 --> 00:12:55,800
So you're asking, well, previously imported cache from Functools?

178
00:12:55,800 --> 00:12:56,800
Yeah.

179
00:12:56,800 --> 00:13:01,800
Right, yeah.

180
00:13:01,800 --> 00:13:05,840
Yes, exactly.

181
00:13:05,840 --> 00:13:09,480
So let's see if I find that one.

182
00:13:09,480 --> 00:13:16,880
So here I had this, and then the first thing we did was this, right?

183
00:13:16,880 --> 00:13:22,760
Yeah, so first I imported cache and I used it there, and then what happened when I did

184
00:13:22,760 --> 00:13:26,000
number 12 up there is that I overwrote that function.

185
00:13:26,000 --> 00:13:31,960
So I kind of just redefined it with the exact same behavior.

186
00:13:31,960 --> 00:13:34,960
So it's kind of...

187
00:13:34,960 --> 00:13:35,960
Right.

188
00:13:36,440 --> 00:13:43,760
Right, now you can see, I guess here I renamed the slow square to this cache square.

189
00:13:43,760 --> 00:13:44,760
So then I...

190
00:13:44,760 --> 00:13:49,360
Yeah, so they are kind of different, but the end result is the same.

191
00:13:49,360 --> 00:13:52,120
Yeah.

192
00:13:52,120 --> 00:13:55,200
What's the cost of essentially doing the creative thing?

193
00:13:55,200 --> 00:13:56,200
Yeah.

194
00:13:56,200 --> 00:14:04,200
You could potentially just add cache to every function you ever wrote and call it twice.

195
00:14:04,200 --> 00:14:05,200
Exactly.

196
00:14:05,240 --> 00:14:08,200
Yeah, I guess there's two questions hiding there.

197
00:14:08,200 --> 00:14:14,280
So one is what's the cost of applying decorators essentially, and those I believe they're not

198
00:14:14,280 --> 00:14:15,280
very much optimized.

199
00:14:15,280 --> 00:14:21,560
So essentially it is an extra function call, and function calls take time in Python.

200
00:14:21,560 --> 00:14:24,940
So there is some penalty to using decorators in general.

201
00:14:24,940 --> 00:14:29,160
In particular in terms of the cache, why don't we just cache everything?

202
00:14:29,160 --> 00:14:34,880
And that may be a good idea if you know that all your functions don't have side effects.

203
00:14:34,880 --> 00:14:37,400
For instance, if you could see the print statement disappear there.

204
00:14:37,400 --> 00:14:41,920
So if you kind of need all your function calls to have some side effect, then caching won't

205
00:14:41,920 --> 00:14:46,040
really work.

206
00:14:46,040 --> 00:14:50,960
And yeah, caching can lead to very subtle bugs, and you'll really have control on them

207
00:14:50,960 --> 00:14:54,000
being pure, I guess.

208
00:14:54,000 --> 00:14:55,160
Okay.

209
00:14:55,160 --> 00:14:58,880
So now we've seen decorators.

210
00:14:58,880 --> 00:15:03,960
Then now I kind of want to take a step back and start talking about what's a function,

211
00:15:03,960 --> 00:15:06,720
and how can we play with functions.

212
00:15:06,720 --> 00:15:13,240
And I guess, yeah, the question is not so much what's a function.

213
00:15:13,240 --> 00:15:18,840
I'm kind of assuming that you're familiar with doing your def something with parameters.

214
00:15:18,840 --> 00:15:23,240
But what can we then do with these things?

215
00:15:23,240 --> 00:15:33,120
So typically at least when we define a function, let's just do something like a double there,

216
00:15:33,120 --> 00:15:40,680
and then let's just return x times 2.

217
00:15:40,680 --> 00:15:48,080
So here I've defined a new function that just returns the double of whatever is passed in.

218
00:15:48,080 --> 00:15:55,080
And what I guess at least not always true in all programming languages is that in Python

219
00:15:55,080 --> 00:15:59,560
a function is again just an object that has a name reference to it.

220
00:15:59,560 --> 00:16:03,960
So for instance, if I just type out the name, you can see here that it kind of references

221
00:16:03,960 --> 00:16:09,120
this function object that's there.

222
00:16:09,120 --> 00:16:17,240
And then we can see that there is a difference if we have if we just type the name and if

223
00:16:17,240 --> 00:16:19,680
we type the name with parentheses.

224
00:16:19,680 --> 00:16:23,520
So if you just have the name, this will kind of be important for the rest of the tutorial.

225
00:16:23,520 --> 00:16:26,080
So if we have the name like this, that's just a reference.

226
00:16:26,080 --> 00:16:29,280
But if we add parentheses, then we're calling the function.

227
00:16:29,680 --> 00:16:33,680
And what we get back is then the result, the return value from that function.

228
00:16:33,680 --> 00:16:36,840
So you can see here in number 17, I'm getting the function.

229
00:16:36,840 --> 00:16:38,320
In 18, I'm getting the number.

230
00:16:38,320 --> 00:16:43,840
That's the return value from there.

231
00:16:43,840 --> 00:16:49,720
But since these things are kind of just named references in this sense, it means that we

232
00:16:49,720 --> 00:16:53,880
can also redefine things and so on.

233
00:16:53,880 --> 00:17:00,800
So for instance, I can do something weird like this where I'm saying that skrivut equals

234
00:17:00,800 --> 00:17:01,800
print.

235
00:17:01,800 --> 00:17:03,880
So skrivut is Norwegian for print.

236
00:17:03,880 --> 00:17:09,720
So this is me starting to translate Python into Norwegian.

237
00:17:09,720 --> 00:17:16,360
And we can see now this skrivut here, if I ask it just what you are, it is the print

238
00:17:16,360 --> 00:17:17,360
function.

239
00:17:18,160 --> 00:17:25,480
And I can use it to say something like, hi, Python.

240
00:17:25,480 --> 00:17:28,960
And it prints this out for me.

241
00:17:28,960 --> 00:17:31,760
So that's kind of one thing we can do with functions.

242
00:17:31,760 --> 00:17:34,400
We can give them different names if we want to.

243
00:17:34,400 --> 00:17:39,600
And this is kind of now just both print and skrivut are both functions that kind of just

244
00:17:39,600 --> 00:17:41,920
reference the same function objects.

245
00:17:41,920 --> 00:17:46,160
So they are identical, how you call them.

246
00:17:46,160 --> 00:17:50,960
Of course, this is probably not a good idea if you kind of want to have your code been

247
00:17:50,960 --> 00:17:55,160
read by others and so on.

248
00:17:55,160 --> 00:18:01,080
It's also then, we can kind of do the opposite, which is probably also bad.

249
00:18:01,080 --> 00:18:05,920
But I can reuse print as a statement like this.

250
00:18:05,920 --> 00:18:09,720
And we can see now this has become the number 3.

251
00:18:09,720 --> 00:18:15,280
And I can't really call, let's see, 2 plus 3 or something.

252
00:18:15,280 --> 00:18:20,360
We can see now that this is actually a number, so I can't really call it like this.

253
00:18:20,360 --> 00:18:25,000
So it kind of just lives in the same namespace as regular variables.

254
00:18:25,000 --> 00:18:31,080
So you can kind of need to take care that your variables and functions have different

255
00:18:31,080 --> 00:18:32,080
names and so on.

256
00:18:32,080 --> 00:18:35,080
But if I delete my variable, then I get back the built in here.

257
00:18:35,080 --> 00:18:41,040
So we can, I guess, play with it.

258
00:18:41,040 --> 00:18:43,560
OK.

259
00:18:43,560 --> 00:18:48,520
So we've seen that functions behave very much like variables, objects, those kind of things.

260
00:18:48,520 --> 00:18:53,680
And we can also then use functions as arguments to other functions.

261
00:18:53,680 --> 00:18:56,880
And now we're getting close to the whole decorator thing.

262
00:18:56,880 --> 00:19:04,440
Like you saw earlier, we did the cache of a function and returned a new function.

263
00:19:04,440 --> 00:19:10,040
So let's play with this a little bit more before we go to the decorator world.

264
00:19:10,040 --> 00:19:15,400
So let's say that we have a greet function.

265
00:19:15,400 --> 00:19:23,440
And this function takes in, yeah, let's keep it like this, a name and a greeter function.

266
00:19:23,440 --> 00:19:28,240
And then it just does, I'll do something like this.

267
00:19:28,240 --> 00:19:30,480
So I'll call the greeter function.

268
00:19:30,480 --> 00:19:33,280
And you can see here that this greeter function is passed in.

269
00:19:33,280 --> 00:19:35,280
So it's one of the parameters.

270
00:19:35,280 --> 00:19:42,440
And then it just calls that function with the text hi name.

271
00:19:42,440 --> 00:19:44,800
So how can we use this?

272
00:19:44,800 --> 00:19:51,080
Well, I could then say something like hi, PyCon, I guess.

273
00:19:51,080 --> 00:19:58,320
I can greet PyCon and say that I want to use the print function as my greeter function.

274
00:19:58,320 --> 00:20:01,360
And then you can see it prints out stuff.

275
00:20:01,360 --> 00:20:08,360
So what happened here is that we're taking print over there, it's passed in there.

276
00:20:08,360 --> 00:20:14,680
So this greeter of something is actually just calling print.

277
00:20:14,680 --> 00:20:27,200
And since we also gave print a different name, I can also use the screen greeter for it.

278
00:20:27,200 --> 00:20:33,680
So there's really no difference whether you pass a regular object like a text or a number

279
00:20:33,680 --> 00:20:36,480
or a function.

280
00:20:36,480 --> 00:20:42,200
And yeah, to kind of play a little bit more with it and try to see the nuances of what's

281
00:20:42,200 --> 00:20:51,640
happening, let's also define a new function I'll call nerp.

282
00:20:51,640 --> 00:20:57,920
And anyone want to guess what the nerp function should do?

283
00:20:57,920 --> 00:21:00,920
Print backwards, there we go.

284
00:21:00,920 --> 00:21:01,920
Perfect.

285
00:21:01,920 --> 00:21:07,640
So it will just print our text reversed like this.

286
00:21:07,640 --> 00:21:18,560
So if I, for instance, say nerp hi there, I'll get out eretve or something like this.

287
00:21:18,560 --> 00:21:23,160
Now of course we can use our greet function.

288
00:21:23,160 --> 00:21:28,360
And instead of using PyCon like this, I can just use the nerp function.

289
00:21:28,360 --> 00:21:33,480
And we can see that it then prints out hi PyCon backwards.

290
00:21:33,480 --> 00:21:44,280
So we can see that we're kind of passing through the function there.

291
00:21:44,280 --> 00:21:48,020
Okay.

292
00:21:48,020 --> 00:21:49,020
So let's see.

293
00:21:49,020 --> 00:21:53,060
So far we've kind of figured out we can pass these functions around.

294
00:21:53,060 --> 00:21:57,080
It means we can actually also define functions dynamically.

295
00:21:57,080 --> 00:22:02,260
So so far we've just defined functions kind of with our def statement, but it's possible

296
00:22:02,260 --> 00:22:05,020
to define a function that defines another function.

297
00:22:05,020 --> 00:22:09,500
So it's not like a function factory.

298
00:22:09,500 --> 00:22:19,540
So as an example of this, I'll define, I'll call it a prefix factory.

299
00:22:19,540 --> 00:22:25,260
And the way that we define these dynamical functions is that we'll just sort of like

300
00:22:25,260 --> 00:22:27,500
add in a new function in the middle of this.

301
00:22:27,500 --> 00:22:30,220
So in nest functions we often call them inner functions.

302
00:22:30,220 --> 00:22:32,860
We define an inner function.

303
00:22:32,860 --> 00:22:39,260
Inside of the prefix factory here, I'll just define a prefix printer, I guess I call it.

304
00:22:39,260 --> 00:22:48,900
And with this one, I'll then just print out the prefix and the text.

305
00:22:48,900 --> 00:22:54,740
So untangle the syntax there in a little bit.

306
00:22:54,740 --> 00:23:02,660
And then what I also want to do here now is that my prefix factory returns this inner

307
00:23:02,660 --> 00:23:05,020
function.

308
00:23:05,020 --> 00:23:09,740
So if you've never seen these inner functions, it may look kind of weird that, okay, I have

309
00:23:09,740 --> 00:23:13,820
a function, then I have another function within there, and then what I'm actually doing at

310
00:23:13,820 --> 00:23:18,940
the end there, so my factory function returns the inner function.

311
00:23:18,940 --> 00:23:22,520
And first of all, let's just have a look at this.

312
00:23:22,520 --> 00:23:29,760
So prefix printer seems to be a defined function now, but I can't call it.

313
00:23:29,760 --> 00:23:36,840
So it's defined within that other function, and in some sense it's not really defined

314
00:23:36,840 --> 00:23:39,320
here at all, it's kind of just living inside the function.

315
00:23:39,320 --> 00:23:45,420
So we see we can't get to the prefix printer function there.

316
00:23:45,420 --> 00:23:48,420
But I can.

317
00:23:48,420 --> 00:23:49,420
Let's see.

318
00:23:49,420 --> 00:23:56,600
Get to, let's say that we create the prefix here that I'll use for debug.

319
00:23:56,600 --> 00:24:01,440
So if I just call this, we can see the return value of this is now some function that has

320
00:24:01,440 --> 00:24:06,640
a fairly weird name over there, but if we stare at this for a while, we can see that,

321
00:24:06,640 --> 00:24:10,720
okay, it belongs to prefix factory, it's sort of like the locals of there, and then it's

322
00:24:10,720 --> 00:24:15,480
this prefix printer function comes back out.

323
00:24:15,480 --> 00:24:23,060
So that means that I can use my factory to define new functions.

324
00:24:23,060 --> 00:24:28,280
So if I do this, I have now defined a function and I've given it a name so I can reference

325
00:24:28,280 --> 00:24:37,580
it, and then I can say something like debug, well, let's say high pi conference.

326
00:24:37,580 --> 00:24:42,300
And you can see now the result of this is that it prints out our debug prefix in front

327
00:24:42,300 --> 00:24:44,920
and then the text we pass in.

328
00:24:44,920 --> 00:24:50,140
So now let's see, okay, so we lost the text up there.

329
00:24:50,280 --> 00:24:52,280
I'll go slightly back there.

330
00:24:52,280 --> 00:24:55,280
Do you maybe want to make it full-frame?

331
00:24:55,280 --> 00:24:58,280
Yeah, how, no.

332
00:24:58,280 --> 00:25:03,760
I'll soon start using that side.

333
00:25:03,760 --> 00:25:09,800
Yeah, so the prefix factory, if we look a little bit at this, see if we can figure out

334
00:25:09,800 --> 00:25:18,120
what happened here, is that our prefix factory, oh no, so the prefix printer function is only

335
00:25:18,140 --> 00:25:20,880
defined each time you call the prefix factory.

336
00:25:20,880 --> 00:25:26,940
And each time we call the prefix factory, we create a new function from this.

337
00:25:26,940 --> 00:25:32,260
And then one thing that might be weird is that this prefix variable comes from the outer

338
00:25:32,260 --> 00:25:35,260
function, well, the text comes from the inner one.

339
00:25:35,260 --> 00:25:40,500
So what we really do there is that we kind of enclose the value, so we kind of have,

340
00:25:40,500 --> 00:25:46,700
yeah, I guess it's called a closure, where your prefix value is stored so that the debug

341
00:25:46,720 --> 00:25:53,720
function that we create down here knows that for this function, prefix is always debug,

342
00:25:53,720 --> 00:25:57,080
while the text can change for every notification.

343
00:25:57,080 --> 00:26:05,080
So we saw here that we did high PyCon, but I can also say something, well, I can say

344
00:26:05,080 --> 00:26:09,080
something else, and it will kind of print out that.

345
00:26:09,080 --> 00:26:13,880
So the prefix is fixed, but something else changes.

346
00:26:13,880 --> 00:26:28,020
And similarly, I can create a warning function, and then our warning function will again then

347
00:26:28,020 --> 00:26:34,780
have these changing texts, but a fixed prefix that is different from the other prefix.

348
00:26:34,780 --> 00:26:41,500
So in some respect, the debug and warning function, they're the same function in the

349
00:26:41,520 --> 00:26:46,120
sense that they're both this prefix printer function, really, but their behavior is slightly

350
00:26:46,120 --> 00:26:49,120
different.

351
00:26:49,120 --> 00:26:52,720
Okay.

352
00:26:52,720 --> 00:26:53,720
Let's see.

353
00:26:53,720 --> 00:26:59,600
So now I guess we can also just check out, since we have a new function, we can pass

354
00:26:59,600 --> 00:27:04,320
it to greet, and we can see that, okay, our greeter debug also works with this, so we

355
00:27:04,320 --> 00:27:10,820
can pass in kind of any function where we can do these things.

356
00:27:10,840 --> 00:27:11,840
And let's see.

357
00:27:11,840 --> 00:27:19,800
So now we had a factory that could create new functions, but we can also play with this

358
00:27:19,800 --> 00:27:26,720
and create a different factory that kind of takes in functions.

359
00:27:26,720 --> 00:27:34,720
So let me just look up my notes for this.

360
00:27:40,820 --> 00:28:05,720
So we can also create a different type of factory where instead of just having the prefix

361
00:28:05,720 --> 00:28:09,920
factory have this fixed text there, but that can also be a function.

362
00:28:09,920 --> 00:28:13,560
So we can kind of have a function that depends on a function in a sense.

363
00:28:13,560 --> 00:28:18,560
So let's see how that would look.

364
00:28:18,560 --> 00:28:27,560
And I'll define a reverse factory, but here you can see instead of just taking in a text,

365
00:28:27,560 --> 00:28:30,520
I'll take in a function.

366
00:28:30,520 --> 00:28:35,400
And what I want this thing to do is that it will kind of just reverse.

367
00:28:35,400 --> 00:28:41,760
So it's similar to that NURP idea we had, that it can kind of just reverse whatever

368
00:28:41,760 --> 00:28:43,280
you give to it.

369
00:28:43,280 --> 00:28:50,560
So my inner function here I'll call a reverse caller, and this will then just call a function

370
00:28:50,560 --> 00:28:52,140
like this.

371
00:28:52,140 --> 00:28:59,320
So the factory creates a function that can kind of call things with the parameter reversed.

372
00:28:59,320 --> 00:29:03,940
And then we need to do the same thing since we don't really have access to reverse caller,

373
00:29:03,980 --> 00:29:06,980
we need to actually return that back out of the function.

374
00:29:06,980 --> 00:29:19,020
So let's just check out this work then.

375
00:29:19,020 --> 00:29:28,980
So first of all we could do something like reverse factory.

376
00:29:28,980 --> 00:29:33,180
And if I then pass in the print function for instance, then we see that okay I get out

377
00:29:33,220 --> 00:29:37,140
this inner function thingy.

378
00:29:37,140 --> 00:29:44,540
And this is a function, so I could directly call it like this.

379
00:29:44,540 --> 00:29:50,740
And you can see that it has actually, it calls print but with stuff reversed.

380
00:29:50,740 --> 00:30:00,020
But again to kind of keep this more or less traceable what we're doing, I'll give a name

381
00:30:00,020 --> 00:30:02,420
to this.

382
00:30:02,420 --> 00:30:10,100
And then a reverse print function, we can call this and we'll see that it reverses the

383
00:30:10,100 --> 00:30:13,980
arguments that we have.

384
00:30:13,980 --> 00:30:20,260
I could similarly apply this to some of the other functions we have defined.

385
00:30:20,260 --> 00:30:25,940
So for instance I can do a reverse nerp.

386
00:30:25,940 --> 00:30:33,900
And let's see what would the result of this be?

387
00:30:33,900 --> 00:30:35,060
Hi-Picon, yeah.

388
00:30:35,060 --> 00:30:39,820
So we're reversing the reverse so we get back to this one.

389
00:30:39,820 --> 00:30:47,540
Okay so now let's see, I want to, let's see.

390
00:30:47,540 --> 00:30:54,980
Yeah I should, let me actually briefly just copy a few of these.

391
00:30:55,020 --> 00:31:08,500
So this is a reverse color and I also want the prefix factor I guess.

392
00:31:08,500 --> 00:31:12,500
Then we'll see if we can fit stuff on screen.

393
00:31:12,500 --> 00:31:38,380
Okay, because now I want to do a reverse debug which will be reverse factory of debug.

394
00:31:38,380 --> 00:31:45,020
And then we'll call this.

395
00:31:45,020 --> 00:31:50,780
So anyone wants to take a stab at guessing what result of this last call, line 14 will

396
00:31:50,780 --> 00:31:54,380
be?

397
00:31:54,380 --> 00:32:01,540
And it's okay if you can't pronounce it I guess.

398
00:32:01,540 --> 00:32:12,340
So let's.

399
00:32:12,340 --> 00:32:17,340
Right okay, yeah so debug will be forwards and then Hi-Picon should be reversed.

400
00:32:17,340 --> 00:32:20,340
Let's have a look.

401
00:32:20,340 --> 00:32:27,340
I'll do this.

402
00:32:27,340 --> 00:32:28,860
Okay.

403
00:32:28,860 --> 00:32:35,260
So debug Hi-Picon.

404
00:32:35,260 --> 00:32:40,980
That was not what we wanted, we wanted a reverse debug.

405
00:32:40,980 --> 00:32:46,260
And actually did I, yeah apparently I fooled both myself and everyone else there.

406
00:32:46,260 --> 00:32:49,940
There we go.

407
00:32:49,940 --> 00:32:56,660
So yeah, debug for some reason is not reversed while Hi-Picon is reversed.

408
00:32:57,020 --> 00:33:01,260
This is of course when you start sending, applying functions to functions to functions,

409
00:33:01,260 --> 00:33:07,860
keeping track of which happens is which order is not trivial.

410
00:33:07,860 --> 00:33:18,180
So but if we trace this I guess let's see if we can put stuff on the same screen there.

411
00:33:18,180 --> 00:33:23,700
What happens when you call reverse debug Hi-Picon here, let's see.

412
00:33:23,780 --> 00:33:27,900
So this becomes the parameter that goes into the text there.

413
00:33:27,900 --> 00:33:35,300
So Hi-Picon is reversed over here and then that calls the function which came from somewhere,

414
00:33:35,300 --> 00:33:42,780
that's the prefix printer function that then sends the reversed Hi-Picon part in.

415
00:33:42,780 --> 00:33:48,300
But debug is not reversed since that was already a part of that function.

416
00:33:48,500 --> 00:33:51,500
So that's kind of the story there.

417
00:33:56,020 --> 00:33:58,180
Okay.

418
00:33:58,180 --> 00:34:03,580
So now we're kind of gone sort of like off the deep end a little bit with functions and

419
00:34:03,580 --> 00:34:06,500
calling functions and stuff like this.

420
00:34:06,500 --> 00:34:11,740
So now let's wrap this back up together and see what it has to do with decorators.

421
00:34:11,740 --> 00:34:21,540
And in a sense we're kind of already there because this reverse factory is a decorator.

422
00:34:21,540 --> 00:34:23,860
And then what is a decorator?

423
00:34:23,860 --> 00:34:28,540
So let me see, so I have it over here.

424
00:34:28,540 --> 00:34:34,500
A decorator is just a function that accepts a function as a parameter and returns back a function.

425
00:34:34,500 --> 00:34:38,580
So it kind of has the power to transform a function essentially.

426
00:34:38,620 --> 00:34:44,020
So you can see here with the reverse factory it takes a function coming in there and this

427
00:34:44,020 --> 00:34:48,820
reverse caller thing is a function so it returns another function.

428
00:34:48,820 --> 00:34:50,820
And then you have a decorator.

429
00:34:50,820 --> 00:34:55,420
So now we have created our first decorator.

430
00:34:55,420 --> 00:35:00,980
That means that we can use this.

431
00:35:00,980 --> 00:35:04,820
So let's see if that actually works.

432
00:35:04,820 --> 00:35:12,340
So first I'll kind of define a simpler version of greet that I'll just say hi and it just

433
00:35:12,340 --> 00:35:17,100
says hi like this.

434
00:35:17,100 --> 00:35:27,300
So now we kind of, oh yeah, I got the wrong, we need our F string in there.

435
00:35:27,300 --> 00:35:31,180
So when we're calling this, this is kind of what we've seen a bunch of times already.

436
00:35:31,180 --> 00:35:34,980
So we print out hi PyCon.

437
00:35:34,980 --> 00:35:42,420
And now I can essentially apply the decorator similar to what we did with cache in the beginning.

438
00:35:42,420 --> 00:35:48,380
So I could say something like hi equals just this reverse factory of hi.

439
00:35:48,380 --> 00:35:53,420
And then here we kind of see the same effect that we had with debug that it reverses the

440
00:35:53,420 --> 00:35:54,660
parameter that we're sending in here.

441
00:35:54,660 --> 00:36:00,020
So we get hi null slip.

442
00:36:00,260 --> 00:36:06,220
So this we talked about, this was kind of the syntax for decorating, which it really

443
00:36:06,220 --> 00:36:09,900
tells you all you need to know about the decorator if you kind of know this.

444
00:36:09,900 --> 00:36:16,180
But then we have this nice syntactic sugar where I could instead just spell it out like

445
00:36:16,180 --> 00:36:17,180
this.

446
00:36:17,180 --> 00:36:23,900
So let's see, print hi like this.

447
00:36:23,900 --> 00:36:27,300
And now if I do hi PyCon, we have the same result.

448
00:36:27,780 --> 00:36:37,380
Just to show you that this actually is, since I get the exact same result, right?

449
00:36:37,380 --> 00:36:42,940
So let me also just do a hello instead just to show that it does the work.

450
00:36:42,940 --> 00:36:47,220
And we need a colon.

451
00:36:47,220 --> 00:36:50,700
So this function should say hello.

452
00:36:50,700 --> 00:36:54,820
Something like this.

453
00:36:54,820 --> 00:37:05,180
If I say hello PyCon, we can see that it still applies to reverse factory there.

454
00:37:05,180 --> 00:37:11,260
So in a sense, you know everything that I'll teach you about decorators now.

455
00:37:11,260 --> 00:37:20,020
That's kind of, that this is kind of how you apply decorators, but the effect of it is

456
00:37:20,020 --> 00:37:28,780
really just that it's doing this.

457
00:37:28,780 --> 00:37:32,820
So whenever you're kind of wondering what's the effect of doing in the decorator, you

458
00:37:32,820 --> 00:37:35,340
can try to unravel it into this.

459
00:37:35,340 --> 00:37:39,900
And then that kind of is easier to figure out what's happening.

460
00:37:39,900 --> 00:37:49,420
Well, this is kind of the nicer syntax for it in a sense.

461
00:37:49,420 --> 00:37:57,580
So let's get to the place where you also get to do some work.

462
00:37:57,580 --> 00:38:02,500
And I'll, let me think.

463
00:38:02,500 --> 00:38:08,380
Yeah, I'll first just say two words about decorators and then we'll show some exercises.

464
00:38:08,380 --> 00:38:09,380
Yes.

465
00:38:19,420 --> 00:38:30,860
Right.

466
00:38:30,860 --> 00:38:48,300
Yeah, so the question is just about essentially here it seems like we're doing it as part

467
00:38:48,300 --> 00:38:52,940
of the definition, while if we do it like this, we're doing after the function is defined.

468
00:38:52,940 --> 00:38:56,580
And yeah, that's completely true.

469
00:38:56,580 --> 00:39:03,580
The two things are kind of, they're equivalent except for the fact that you kind of have

470
00:39:03,580 --> 00:39:09,660
this intermediate step where you have the function, this temporary function so to speak

471
00:39:09,660 --> 00:39:11,420
defined.

472
00:39:11,420 --> 00:39:17,180
So that's not defined in this case.

473
00:39:17,180 --> 00:39:23,180
So we'll play a little bit more afterwards with seeing how sort of like this at reverse

474
00:39:23,180 --> 00:39:30,700
factory really happens at defining defined time, compile time more or less, versus at

475
00:39:30,700 --> 00:39:34,420
runtime which it more or less seems like we're doing it 65.

476
00:39:34,420 --> 00:39:41,900
But let's see decorators were introduced in Python 2.4 and before then there were actually

477
00:39:41,900 --> 00:39:43,240
a few decorators introduced.

478
00:39:43,880 --> 00:39:47,960
You may have seen if you've done some object-oriented programming, there is a static method and

479
00:39:47,960 --> 00:39:50,080
class method decorators.

480
00:39:50,080 --> 00:39:56,120
So those were actually defined as decorator functions in Python before decorator syntax

481
00:39:56,120 --> 00:39:57,600
existed.

482
00:39:57,600 --> 00:40:02,560
So when you used these statements in say Python 2.3, then you would have to kind of do what

483
00:40:02,560 --> 00:40:04,760
we did at the end there.

484
00:40:04,760 --> 00:40:11,180
And that was kind of observed as kind of being some frustration, some friction with kind

485
00:40:11,180 --> 00:40:15,860
of using this is that you first define your function or your method and then afterwards

486
00:40:15,860 --> 00:40:20,100
you need this weird step of adding that this is a static method.

487
00:40:20,100 --> 00:40:25,980
And one thing I guess we can at least to some extent see out of this as well is that if

488
00:40:25,980 --> 00:40:29,900
we're doing, yeah, let me type it out completely.

489
00:40:29,900 --> 00:40:38,220
So if we're doing the hello there and there and then we're doing this thing afterwards,

490
00:40:38,300 --> 00:40:46,060
then to define a function like this, I have to repeat the name three times, which feels

491
00:40:46,060 --> 00:40:48,860
very wasteful in a sense as well.

492
00:40:48,860 --> 00:40:50,180
So this was really the motivation.

493
00:40:50,180 --> 00:40:52,340
We need a nicer way of doing this.

494
00:40:52,340 --> 00:40:58,620
So as you can see, even without the decorator syntax, Python already had support for functions

495
00:40:58,620 --> 00:41:00,340
as first-class objects and things like this.

496
00:41:00,340 --> 00:41:04,980
So you could kind of, we could kind of always do this.

497
00:41:05,020 --> 00:41:10,540
But then adding the special syntax was kind of what happened then in 2.4 and when kind

498
00:41:10,540 --> 00:41:15,500
of the, I guess decorators were more popularized in a sense.

499
00:41:15,500 --> 00:41:18,220
This happened with the PEP 3.18.

500
00:41:18,220 --> 00:41:25,020
So I don't know if all of you know the PEP process, the Python enhancement proposals,

501
00:41:25,020 --> 00:41:30,100
but this is sort of like a formalized way of introducing new features to the language.

502
00:41:30,100 --> 00:41:33,140
And it typically happens with a lot of discussion online.

503
00:41:33,140 --> 00:41:38,460
And it's somewhat fun to be reading these PEPs and look at what were discussions about

504
00:41:38,460 --> 00:41:42,700
how to do the syntax.

505
00:41:42,700 --> 00:41:46,700
And it seemed like everybody was in agreement there about, yeah, we definitely need a nicer

506
00:41:46,700 --> 00:41:48,140
syntax for this.

507
00:41:48,140 --> 00:41:53,420
And then of course, everyone in total disagreement about what kind of syntax should we use.

508
00:41:53,420 --> 00:42:02,220
So some of the suggestions for this was that, or I guess the argument against the syntax

509
00:42:02,300 --> 00:42:08,940
they ended up with is that this is the first and possibly still the only syntax where

510
00:42:08,940 --> 00:42:15,500
one of these lines directly applies to the line below it instead of kind of, I guess

511
00:42:15,500 --> 00:42:17,860
we have things like, okay, we start a block and stuff like this.

512
00:42:17,860 --> 00:42:22,340
But here we just have a weird line of code that kind of floats by itself and then it

513
00:42:22,340 --> 00:42:26,180
has a very significant effect on the line below it.

514
00:42:26,180 --> 00:42:31,300
So there were some attempts at, okay, let's try to put this decorator syntax in the middle

515
00:42:31,380 --> 00:42:32,380
there.

516
00:42:32,380 --> 00:42:42,980
So I think one suggestion was let's write something like reverse factory hello.

517
00:42:42,980 --> 00:42:48,260
But the syntax would be something like this, which potentially could have worked as well,

518
00:42:48,260 --> 00:42:49,260
right?

519
00:42:49,260 --> 00:42:51,740
It's kind of we just need to make some choice.

520
00:42:51,740 --> 00:42:53,500
This will of course not work now.

521
00:42:53,500 --> 00:43:02,820
So I guess, yeah, it starts yelling at me at some point.

522
00:43:02,820 --> 00:43:06,540
And I think there were also some discussions, should we use the at symbol, which were not

523
00:43:06,540 --> 00:43:09,940
used in Python before, or should we reuse some of the others and so on.

524
00:43:09,940 --> 00:43:13,940
But at least in the end we found a syntax and then I guess at least we've gotten used

525
00:43:13,940 --> 00:43:17,860
to it.

526
00:43:17,860 --> 00:43:22,580
Since the decorators were introduced in Python 2.4, there was very little change to it.

527
00:43:22,580 --> 00:43:26,020
It's kind of just been a syntax that works.

528
00:43:26,020 --> 00:43:33,180
One slightly weird thing maybe when they defined the decorator syntax was that they somewhat

529
00:43:33,180 --> 00:43:36,380
artificially limited what you could do.

530
00:43:36,380 --> 00:43:45,920
So what we've seen so far is that here we're just spelling out this function.

531
00:43:45,920 --> 00:43:50,700
In theory this could have been say a class method or something like this as well.

532
00:43:50,860 --> 00:43:53,740
That was kind of explicitly disallowed in the beginning.

533
00:43:53,740 --> 00:43:59,380
So in Python 3.9 I think they just lifted all of these weird limitations and said that

534
00:43:59,380 --> 00:44:02,740
anything that's callable more or less you could put in there.

535
00:44:02,740 --> 00:44:07,740
So now I guess it's theoretically possible at least to use a lambda or something there

536
00:44:07,740 --> 00:44:09,180
as well.

537
00:44:09,180 --> 00:44:17,380
In general this is still the way that you typically will use them.

538
00:44:17,380 --> 00:44:23,220
So now you've seen a little bit of what decorators are.

539
00:44:23,220 --> 00:44:26,660
We'll definitely return to this much more.

540
00:44:26,660 --> 00:44:31,380
But I think we can try to give you a small exercise.

541
00:44:31,380 --> 00:44:38,460
Let's see if we can make this work.

542
00:44:38,460 --> 00:44:44,420
And let me see if I'm able to do a couple of things at once.

543
00:44:44,460 --> 00:44:48,620
So the exercise, and I'll kind of give you some time for this, is that you'll write your

544
00:44:48,620 --> 00:44:56,220
own decorator and it will not do anything very spectacular, but it will print out before

545
00:44:56,220 --> 00:45:00,780
calling the function and it will print out after calling it.

546
00:45:00,780 --> 00:45:07,700
So you should name it before and after and to test if it works you can kind of just implement

547
00:45:07,700 --> 00:45:11,340
this test and see if you get this result.

548
00:45:11,340 --> 00:45:16,260
I have also, and let's see if I'm able to show this.

549
00:45:16,260 --> 00:45:19,180
See what happens here.

550
00:45:19,180 --> 00:45:25,980
And this, yeah, feel free to do this if you like it and feel free to ignore it if you

551
00:45:25,980 --> 00:45:28,980
don't.

552
00:45:28,980 --> 00:45:31,980
Let's see.

553
00:45:31,980 --> 00:45:40,940
Why is this not working?

554
00:45:40,940 --> 00:45:47,940
I have created, okay, let's see.

555
00:45:47,940 --> 00:45:53,380
There we go.

556
00:45:53,380 --> 00:45:57,260
So this is probably the simplest Google form ever.

557
00:45:57,260 --> 00:46:01,700
But if you want to kind of share your code, feel free to just drop it into here.

558
00:46:01,700 --> 00:46:07,780
And fortunately links to these Google forms are not always trivial.

559
00:46:07,780 --> 00:46:16,500
So you'll get a little bit more extra effort as well that you need to figure out how to

560
00:46:16,500 --> 00:46:18,500
type in those letters.

561
00:46:18,500 --> 00:46:19,500
Sorry.

562
00:46:19,500 --> 00:46:26,500
But yeah, the important thing, have fun with the decorator.

563
00:46:26,500 --> 00:46:31,580
Just a quick note if you don't want to type in the link stuff there, you can also find

564
00:46:32,220 --> 00:46:33,220
my GitHub.

565
00:46:33,220 --> 00:46:36,500
It's GA Gjelle.

566
00:46:36,500 --> 00:46:43,540
And then just maneuver to decorator's tutorial 2023 and the link is there as well.

567
00:46:43,540 --> 00:46:44,540
Cool.

568
00:46:44,540 --> 00:46:46,540
I'm seeing quite a few responses already.

569
00:46:46,540 --> 00:46:54,180
I guess at least a good portion of you have gotten this to work.

570
00:46:54,180 --> 00:46:56,980
So I guess we'll pick it up from here.

571
00:46:57,220 --> 00:47:02,060
If you're still not finished, just feel free to play with it and then we'll discuss the

572
00:47:02,060 --> 00:47:05,820
answer here as well.

573
00:47:05,820 --> 00:47:11,580
So let's see what would one of these decorators look like.

574
00:47:11,580 --> 00:47:16,580
And I see most of you have kind of come up with the same answers.

575
00:47:17,180 --> 00:47:20,180
Let's see.

576
00:47:20,180 --> 00:47:27,180
I'll get this thing back on the screen here.

577
00:47:33,180 --> 00:47:37,980
So exercise one.

578
00:47:37,980 --> 00:47:44,620
So what we need to do was to create this before and after decorator.

579
00:47:44,660 --> 00:47:46,820
Before and after.

580
00:47:46,820 --> 00:47:53,420
What we talked about is that a decorator is a function that takes a function in and returns

581
00:47:53,420 --> 00:47:55,900
some other function or some function, I guess.

582
00:47:55,900 --> 00:47:58,900
Doesn't need to be another one.

583
00:47:58,900 --> 00:48:03,820
So I'll just call that funk here.

584
00:48:03,820 --> 00:48:08,540
And then what we've kind of seen a little bit in our example so far is that this inner

585
00:48:08,540 --> 00:48:14,620
function, it's not really exposed, I guess, to the end user in the sense that they don't

586
00:48:14,620 --> 00:48:17,620
need to know the name of what to call it, but it kind of leaks through a little bit

587
00:48:17,620 --> 00:48:19,780
here and there.

588
00:48:19,780 --> 00:48:22,580
So sometimes it's okay to have some kind of nice name for it.

589
00:48:22,580 --> 00:48:30,540
We'll soon see how that we can avoid leaking the name of these things as well.

590
00:48:30,540 --> 00:48:35,780
So what I tend to do is just end up calling this thing a wrapper, but you can kind of

591
00:48:35,780 --> 00:48:38,380
give it some name that makes sense.

592
00:48:38,380 --> 00:48:43,380
But yeah, I'll do a wrapper here.

593
00:48:43,380 --> 00:48:51,500
And then in our example, let's see, or our exercise, we want this before and after to

594
00:48:51,500 --> 00:48:59,380
then be able to print before and then run on this high PyCon thing and then print afterwards.

595
00:48:59,380 --> 00:49:06,660
In the example, we used this high function that we've been seeing.

596
00:49:06,660 --> 00:49:11,980
So we kind of come down to a question, what should the argument to wrapper be?

597
00:49:11,980 --> 00:49:16,700
And if we're really designing it just for the high, what will end up coming in here

598
00:49:16,700 --> 00:49:20,020
is this name parameter.

599
00:49:20,020 --> 00:49:27,740
I'll pretend to be slightly more generic by writing text there, but that's just a name,

600
00:49:27,740 --> 00:49:28,740
so it's really not more generic.

601
00:49:28,740 --> 00:49:33,700
And we'll discuss some of the issues with this soon and then see how we can make this

602
00:49:33,700 --> 00:49:35,040
even better.

603
00:49:35,080 --> 00:49:38,520
But let's stick with this one for now.

604
00:49:38,520 --> 00:49:44,760
And what kind of will happen is that this wrapper function is the one that kind of replaces

605
00:49:44,760 --> 00:49:46,260
the high function, right?

606
00:49:46,260 --> 00:49:50,300
So this is where we need to do the print before and print after.

607
00:49:50,300 --> 00:49:54,840
So the first thing we'll do inside of this wrapper is that I'll just print out before

608
00:49:54,840 --> 00:49:57,360
like this.

609
00:49:57,360 --> 00:50:02,400
The last thing I'll do is that I'll print out after.

610
00:50:03,280 --> 00:50:08,000
The thing I'll do in the middle is to actually call the function.

611
00:50:08,000 --> 00:50:13,720
So we can call this and then I'd name this text in this example.

612
00:50:13,720 --> 00:50:20,280
And then I need to have my decorator, so that's the before and after thing, then return this

613
00:50:20,280 --> 00:50:26,240
wrapper function.

614
00:50:26,240 --> 00:50:30,880
So if we kind of end up with some code like this.

615
00:50:31,880 --> 00:50:36,800
Part of the reason I kind of wanted to show this still fairly basic and completely useless

616
00:50:36,800 --> 00:50:44,840
example is that it kind of shows you the typical template for your decorators.

617
00:50:44,840 --> 00:50:47,720
Typically you want to use a decorator to either do something before you call a function or

618
00:50:47,720 --> 00:50:52,640
after, so you kind of end up with something that in principle looks like this.

619
00:50:52,640 --> 00:51:00,200
So you kind of do your stuff before you call your function, you do something afterwards.

620
00:51:01,200 --> 00:51:06,560
Yeah, I see most of you kind of come up with something that looks like this.

621
00:51:06,560 --> 00:51:10,720
Many of you have found something that's even better, so we'll continue to improve on this

622
00:51:10,720 --> 00:51:13,200
soon.

623
00:51:13,200 --> 00:51:17,440
But let's check that this is actually something that works.

624
00:51:17,440 --> 00:51:20,840
So I'll copy this code.

625
00:51:20,840 --> 00:51:23,520
Let's see.

626
00:51:23,520 --> 00:51:26,800
There we are.

627
00:51:27,800 --> 00:51:39,400
So if I have this, and then our test was that we wanted to apply this to a hi function.

628
00:51:39,400 --> 00:51:47,040
Not the hello function.

629
00:51:47,040 --> 00:51:52,160
So now if I do hi PyCon, we can see that it does what we wanted it to do.

630
00:51:52,160 --> 00:51:56,160
You get the before, you get hi PyCon, you get after.

631
00:51:56,160 --> 00:51:58,160
Yeah.

632
00:51:58,160 --> 00:52:00,160
Okay.

633
00:52:00,160 --> 00:52:02,160
Yeah.

634
00:52:02,160 --> 00:52:04,160
Yes.

635
00:52:04,160 --> 00:52:06,160
Perfect.

636
00:52:06,160 --> 00:52:08,160
I like that.

637
00:52:08,160 --> 00:52:17,960
So Glenn here tells me that he added a default value to name.

638
00:52:17,960 --> 00:52:20,160
So let's see what happened then.

639
00:52:20,160 --> 00:52:26,160
So if we do before and after, and then we have a default value here.

640
00:52:26,160 --> 00:52:30,640
So I'll have this one greet myself by default.

641
00:52:30,640 --> 00:52:34,800
And now I guess our hi PyCon still works.

642
00:52:34,800 --> 00:52:40,720
But if I just do this, then we can see we get something wrong happened.

643
00:52:40,720 --> 00:52:44,720
So what is that wrong thing that happened?

644
00:52:44,720 --> 00:52:48,520
So we can see if we kind of stare at this error message here, it says that before and

645
00:52:48,520 --> 00:52:52,760
after wrapper is missing one required positional argument.

646
00:52:52,760 --> 00:53:01,880
So our wrapper, let's see.

647
00:53:01,880 --> 00:53:07,280
So this wrapper function requires one parameter.

648
00:53:07,280 --> 00:53:13,280
And when we send in, when we call hi with no parameters, we're really calling wrapper

649
00:53:13,280 --> 00:53:14,960
with no parameters.

650
00:53:14,960 --> 00:53:16,920
Because wrapper has replaced our hi function.

651
00:53:16,920 --> 00:53:18,800
So that's kind of the decoration.

652
00:53:18,800 --> 00:53:23,640
So the error message comes because this one doesn't have a default value.

653
00:53:23,640 --> 00:53:29,240
But it also kind of points to the fact that our decorator is not very flexible.

654
00:53:29,240 --> 00:53:36,840
And to kind of show you a different example of this, I mentioned earlier, I guess, that

655
00:53:36,840 --> 00:53:40,240
decorators are these things which you can apply to any function and then you can change

656
00:53:40,240 --> 00:53:41,700
the behavior of it.

657
00:53:41,700 --> 00:53:46,280
So for instance, we had, I mentioned, I guess, this JIT compiler thing that can compile any

658
00:53:46,360 --> 00:53:49,560
function, maybe we can time any function and so on.

659
00:53:49,560 --> 00:53:53,880
But here in our decorator, we hard coded that this has one parameter that we named

660
00:53:53,880 --> 00:53:55,040
text.

661
00:53:55,040 --> 00:53:58,600
And that kind of causes some issues for us.

662
00:53:58,600 --> 00:54:10,600
So just to show you a different example of this, let's do this fairly silly example.

663
00:54:10,600 --> 00:54:13,800
Because we have a plus operator in Python, so we really don't need to do this.

664
00:54:13,800 --> 00:54:25,160
But again, it kind of just shows us that we can say add two numbers like this.

665
00:54:25,160 --> 00:54:28,680
But now if I decorate this with my before and after, I'll have the exact same issues

666
00:54:28,680 --> 00:54:30,760
that we had earlier.

667
00:54:30,760 --> 00:54:34,300
So let's see if we do before and after.

668
00:54:34,300 --> 00:54:38,020
And then I'll do the same thing here.

669
00:54:38,020 --> 00:54:39,020
And now I call this.

670
00:54:39,020 --> 00:54:42,640
Again, I get this error message thrown at me.

671
00:54:42,640 --> 00:54:45,760
And again, it's kind of because this wrapper takes only one argument.

672
00:54:45,760 --> 00:54:48,080
In this case, I gave it two.

673
00:54:48,080 --> 00:55:00,920
So what can we do with our decorator to make this one work better?

674
00:55:00,920 --> 00:55:06,440
So what it comes down to is that we really want to have this thing work independently

675
00:55:06,440 --> 00:55:09,760
of how many parameters are passed into it.

676
00:55:10,240 --> 00:55:17,080
To do that, we'll use, I guess, the star and star star operators, which are often just

677
00:55:17,080 --> 00:55:21,720
called args and quarks, which are just weird noises we're making.

678
00:55:21,720 --> 00:55:22,720
But if you...

679
00:55:22,720 --> 00:55:27,120
Yeah, so let's have a look at what those do first, and then we'll figure out how to use

680
00:55:27,120 --> 00:55:30,960
them in here.

681
00:55:30,960 --> 00:55:43,080
So we can define a function and then just use this for our parameters.

682
00:55:43,080 --> 00:55:45,000
And the important part here is actually the stars.

683
00:55:45,000 --> 00:55:48,040
The names are not important, but they kind of...

684
00:55:48,040 --> 00:55:54,120
Unless we have better names, then we typically end up with calling them args and kw-args.

685
00:55:54,120 --> 00:56:00,360
So the args there are just the arguments that you're passing in without the name, and then

686
00:56:01,040 --> 00:56:04,120
kw, that's a keyword argument.

687
00:56:04,120 --> 00:56:08,320
And just to show these things, I can...

688
00:56:08,320 --> 00:56:10,880
Let's see.

689
00:56:10,880 --> 00:56:24,480
I'll add a few f-strings, which also gives me the opportunity to show off...

690
00:56:24,480 --> 00:56:28,720
I don't know if everyone's familiar with this f-string syntax, but it's kind of neat.

691
00:56:28,760 --> 00:56:31,120
So we'll play with that.

692
00:56:31,120 --> 00:56:37,000
So these two lines of f-strings, when I throw in an equal sign there, it will print both

693
00:56:37,000 --> 00:56:40,040
parameter name and its value.

694
00:56:40,040 --> 00:56:44,000
It works on Python 3.8 and later.

695
00:56:44,000 --> 00:56:51,520
But if I now call this function and let's say...

696
00:56:51,520 --> 00:56:54,320
Stick with my high PyCon thing.

697
00:56:54,320 --> 00:57:01,800
You can see here that in this case, args here is a tuple with one element that is my first

698
00:57:01,800 --> 00:57:06,320
argument there.

699
00:57:06,320 --> 00:57:13,080
And if I would give this a name, so maybe I'll say greeting there, then you can see

700
00:57:13,080 --> 00:57:17,840
that what comes in here is instead passed in in this kw-args.

701
00:57:17,840 --> 00:57:25,800
And the kw-args is a dictionary where your parameter name or keyword is the key in the

702
00:57:25,800 --> 00:57:29,800
dictionary and then the other thing is the value.

703
00:57:29,800 --> 00:57:32,480
And then we can have a mix of these.

704
00:57:32,480 --> 00:57:37,720
So I could, for instance, have 3.14 there.

705
00:57:37,720 --> 00:57:44,680
And maybe I can have things like this.

706
00:57:44,680 --> 00:57:46,680
Just for fun, let's...

707
00:57:46,680 --> 00:57:52,000
I guess I can do this.

708
00:57:52,000 --> 00:57:58,320
And e equals 2.7128.

709
00:57:58,320 --> 00:58:01,560
So as we're kind of passing in more and more of these arguments, you can see they're collected

710
00:58:01,560 --> 00:58:09,000
either in args or kw-args, depending on whether you use the keyword arguments like I did for

711
00:58:09,000 --> 00:58:13,600
the last two ones or just pass them in as values, as positional arguments.

712
00:58:13,600 --> 00:58:21,480
So this is typically how you then can create functions that take either a variable number

713
00:58:21,480 --> 00:58:23,560
arguments or things like this.

714
00:58:23,560 --> 00:58:27,040
And that's really what we need for our decorators.

715
00:58:27,040 --> 00:58:37,320
To show you just quickly, I guess a more practical example of this, I'll also do a new version

716
00:58:37,320 --> 00:58:40,720
of my adder function.

717
00:58:40,720 --> 00:58:47,000
So I want my adder function to be able to add up any number of numbers.

718
00:58:47,000 --> 00:58:53,840
And in this case, we could potentially just say that I want everything in as a list.

719
00:58:53,840 --> 00:59:00,200
But if I do this thing here, now I'm saying that I want at least one number and then from

720
00:59:00,200 --> 00:59:06,480
zero to infinitely, I guess, in some version of infinite, numbers, which will then come

721
00:59:06,480 --> 00:59:09,000
in as this args thing.

722
00:59:09,000 --> 00:59:13,880
And here also you can see that it's the star that is the syntax, not the name args.

723
00:59:13,880 --> 00:59:19,880
But whatever I put there comes in as this similar tuple.

724
00:59:19,880 --> 00:59:26,240
And what I can do now is to say that, okay, if I'm not getting any numbers, so that means

725
00:59:26,240 --> 00:59:31,080
I'm only getting one number, really, then this is empty.

726
00:59:31,080 --> 00:59:33,760
Then the sum of the number is just a number.

727
00:59:33,760 --> 00:59:37,440
So I can just return number.

728
00:59:37,440 --> 00:59:46,280
And else, let's see, I can return number plus the sum of these numbers.

729
00:59:46,280 --> 00:59:48,680
Something like this.

730
00:59:48,680 --> 00:59:53,880
So this now, it's not really anything about decorators, just to show off the star syntax.

731
00:59:53,880 --> 00:59:57,360
But here you can see that I can now add one number.

732
00:59:57,360 --> 00:59:59,400
That's just a number itself.

733
00:59:59,400 --> 01:00:00,760
I can add two numbers.

734
01:00:00,760 --> 01:00:06,760
I can add, I don't know, three numbers and so on and so on.

735
01:00:06,760 --> 01:00:12,360
So this is how you can kind of create these more flexible function arguments.

736
01:00:12,360 --> 01:00:17,520
So let's see, how can we use this now in our decorator?

737
01:00:17,520 --> 01:00:21,840
Any questions about this, by the way?

738
01:00:21,840 --> 01:00:23,600
No?

739
01:00:23,600 --> 01:00:25,920
Okay.

740
01:00:25,920 --> 01:00:29,680
Then I'll jump back to our before and after function.

741
01:00:29,680 --> 01:00:35,480
And what we saw was that we got issues with wrapper being insistent on only taking in

742
01:00:35,480 --> 01:00:38,280
one argument.

743
01:00:38,280 --> 01:00:43,140
So this one we can now replace with our args and quarks.

744
01:00:43,140 --> 01:00:52,800
So the way we'll do this is that we'll just throw in args and quarks like this.

745
01:00:52,800 --> 01:00:55,960
And then when we're calling the function, we also need to do the same, pass them back

746
01:00:55,960 --> 01:01:03,160
out again, essentially.

747
01:01:03,160 --> 01:01:08,800
So with this definition now, before and after, we should be able to make the previous examples

748
01:01:08,800 --> 01:01:11,680
work.

749
01:01:11,680 --> 01:01:19,160
So let's try it.

750
01:01:19,160 --> 01:01:20,160
Let's see.

751
01:01:20,160 --> 01:01:26,960
So then we had our before and after with the default value for high.

752
01:01:27,960 --> 01:01:37,920
And let's see this one.

753
01:01:37,920 --> 01:01:40,560
Something like this.

754
01:01:40,560 --> 01:01:46,320
So we've already seen that it will work if we kind of just use PyCon.

755
01:01:46,320 --> 01:01:53,160
But now we should also be able to get it to work with the default value.

756
01:01:53,160 --> 01:01:59,520
So what happens here, and let's see if we can pass this through, is that high, when

757
01:01:59,520 --> 01:02:04,720
I'm calling high there, I'm really calling wrapper.

758
01:02:04,720 --> 01:02:09,840
So wrapper up there, if I call high like this, the args will be empty, the quarks will be

759
01:02:09,840 --> 01:02:16,560
empty, and it means that it prints out before, and then it calls this function without any

760
01:02:16,560 --> 01:02:17,560
arguments.

761
01:02:17,560 --> 01:02:21,720
So that means that at that point, the default value triggers.

762
01:02:21,720 --> 01:02:27,200
And then it's able to print out, get on and on there.

763
01:02:27,200 --> 01:02:31,400
And now we can also do the before and after on this adder function.

764
01:02:31,400 --> 01:02:33,400
Before and.

765
01:02:33,400 --> 01:02:35,400
Yeah.

766
01:02:35,400 --> 01:02:37,400
Right.

767
01:02:37,400 --> 01:02:39,400
Okay.

768
01:02:39,400 --> 01:02:41,400
Yeah.

769
01:02:41,400 --> 01:02:47,400
Good point.

770
01:02:47,400 --> 01:02:56,760
So the question was essentially what if I have more arguments to high, right?

771
01:02:56,760 --> 01:03:02,320
So high, if we throw in something like this.

772
01:03:02,320 --> 01:03:03,720
Yeah.

773
01:03:03,720 --> 01:03:12,760
This will not work, and that's kind of the same as because, let's see, our high function

774
01:03:12,760 --> 01:03:14,240
can't take two arguments.

775
01:03:14,240 --> 01:03:21,960
So the decorator can't magically make a function suddenly do other things like that.

776
01:03:21,960 --> 01:03:26,920
What's actually possible, I don't know if we'll get to that, is that you could kind

777
01:03:26,920 --> 01:03:30,520
of have your decorator eat up some arguments.

778
01:03:30,520 --> 01:03:38,120
So typically what you want to do is essentially follow this template where you just take in

779
01:03:38,120 --> 01:03:40,040
the arguments and pass them back out again.

780
01:03:40,040 --> 01:03:45,360
But it is definitely possible to say that here I'll eat up an argument and not pass

781
01:03:45,360 --> 01:03:46,360
it on.

782
01:03:46,360 --> 01:03:51,120
So for instance, I could say that I'm eating up the name argument and not passing it into

783
01:03:51,120 --> 01:03:52,120
this function.

784
01:03:52,120 --> 01:04:02,000
So it's possible to do weird stuff like that, but it's seldom useful at least.

785
01:04:02,000 --> 01:04:03,000
And let's see.

786
01:04:03,000 --> 01:04:04,000
Yeah.

787
01:04:04,960 --> 01:04:13,120
I guess we can also check now that our adder function, let's see the previous adder, the

788
01:04:13,120 --> 01:04:14,120
simple adder.

789
01:04:14,120 --> 01:04:21,520
So number one, this one.

790
01:04:21,520 --> 01:04:25,400
So now we have two arguments, but now this should actually work.

791
01:04:25,400 --> 01:04:35,920
Yes.

792
01:04:35,920 --> 01:04:38,480
You can see it prints out before and after.

793
01:04:38,480 --> 01:04:47,000
It didn't print out the answer, and it didn't return an answer.

794
01:04:47,000 --> 01:04:52,800
So that's actually another thing that we haven't really fixed yet, because let's have a look

795
01:04:52,880 --> 01:04:55,080
at what happens to the return value.

796
01:04:55,080 --> 01:04:57,680
Let's see.

797
01:04:57,680 --> 01:05:00,680
There's a wrapper.

798
01:05:00,680 --> 01:05:05,400
Yeah.

799
01:05:05,400 --> 01:05:10,600
So what we've done so far with the high function is that we printed out stuff.

800
01:05:10,600 --> 01:05:12,400
So we've seen the print stuff.

801
01:05:12,400 --> 01:05:16,720
What you typically do when you're passing stuff around is to return values.

802
01:05:16,720 --> 01:05:20,640
And if we look at this wrapper function, it doesn't return anything, which means that

803
01:05:20,680 --> 01:05:22,840
implicitly it returns none.

804
01:05:22,840 --> 01:05:26,720
So we're actually killing off whatever return value we got from this one.

805
01:05:26,720 --> 01:05:29,640
So that means that we're still not done in that sense.

806
01:05:29,640 --> 01:05:33,840
We have something that kind of destroys our functions.

807
01:05:33,840 --> 01:05:42,800
So let's see if we can add that as one more improvement.

808
01:05:42,800 --> 01:05:49,360
So what we actually need to do is to also collect up the return value of this.

809
01:05:49,360 --> 01:05:51,280
Not value, but value.

810
01:05:51,280 --> 01:06:02,720
So if I store the value there, and then I can return it here.

811
01:06:02,720 --> 01:06:07,760
So since I need to do something after my function call, I need to save the return value, and

812
01:06:07,760 --> 01:06:12,760
then I'll explicitly return it down there.

813
01:06:12,760 --> 01:06:15,800
So let's see how this behaves.

814
01:06:16,800 --> 01:06:23,240
So I'll go back to this one.

815
01:06:23,240 --> 01:06:40,440
And then let's try to define our adder one more time.

816
01:06:40,440 --> 01:06:43,920
So now we can see that I get the output at the end there.

817
01:06:43,920 --> 01:06:47,920
So we preserved the value.

818
01:06:47,920 --> 01:06:54,040
I guess the return value from a function always comes at the end, even if we've kind of decorated

819
01:06:54,040 --> 01:07:00,120
like this, at least as long as we're keeping stuff synchronous.

820
01:07:00,120 --> 01:07:06,680
So we can see here that before, after, the actual adding calculation happens between

821
01:07:06,680 --> 01:07:10,960
before and after, and then it kind of returns the value after it's kind of done cleaning

822
01:07:11,000 --> 01:07:14,760
up or whatever the after operation is.

823
01:07:14,760 --> 01:07:22,160
So what we have on the top there now, that is really, well, that would be one more improvement,

824
01:07:22,160 --> 01:07:26,760
but it's essentially the template that you'll kind of end up using for most of your, at

825
01:07:26,760 --> 01:07:28,960
least basic decorators.

826
01:07:28,960 --> 01:07:32,640
So if you can kind of just define, okay, there's something I should do before calling the function,

827
01:07:32,640 --> 01:07:36,640
something I should do afterwards, and then just put it in where we have the print statements

828
01:07:36,640 --> 01:07:40,920
right now.

829
01:07:40,920 --> 01:07:42,200
Let's see.

830
01:07:42,200 --> 01:07:48,720
Yeah, we have 15 minutes until the break, so I guess that's a good point to do another

831
01:07:48,720 --> 01:07:49,720
exercise.

832
01:07:49,720 --> 01:07:57,040
So let's see what we have.

833
01:07:57,040 --> 01:08:04,760
So in this one, we're going to, you can kind of reuse the template that we've created now,

834
01:08:04,760 --> 01:08:09,680
but see if you can write the decorator that runs this decorated function twice.

835
01:08:09,680 --> 01:08:17,200
So if we, for instance, had this high function, it should then say high PyCon, high PyCon.

836
01:08:17,200 --> 01:08:22,640
And then now we kind of got to know that we need to care about these return values, and

837
01:08:22,640 --> 01:08:26,680
when you run a function twice, it's not clear what should be the return value of this, so

838
01:08:26,680 --> 01:08:31,640
somewhat arbitrarily, I'll say that you should return a two-tuple with both return values.

839
01:08:31,640 --> 01:08:39,400
So if we implement a random roll dice function, then rolling this with the do twice, you should

840
01:08:39,400 --> 01:08:43,160
get back two numbers.

841
01:08:43,160 --> 01:08:51,160
And again, feel free to share the code in the same Google form that you played with

842
01:08:51,160 --> 01:08:55,400
earlier, then I can kind of see what comes in.

843
01:08:55,400 --> 01:09:02,840
Cool, yeah, so I'm starting to see some responses again, so I guess we can start looking a little

844
01:09:02,840 --> 01:09:05,000
bit at this.

845
01:09:05,000 --> 01:09:08,880
And yeah, we're still at these decorators that are kind of silly.

846
01:09:08,920 --> 01:09:15,400
I don't know if there's a very good use of this do twice thing, but let's see if we can

847
01:09:15,400 --> 01:09:18,080
figure out how to implement it at least.

848
01:09:18,080 --> 01:09:29,880
And in this case, we'll kind of have a look at the template that we kind of came up with

849
01:09:29,880 --> 01:09:34,000
for before and after, but we can see that we can kind of cut away several things for

850
01:09:34,000 --> 01:09:37,800
it.

851
01:09:37,800 --> 01:09:44,760
So I'll start with the typical my do twice and it takes in a function, and then I know

852
01:09:44,760 --> 01:09:50,040
I'll have a wrapper thing inside of here.

853
01:09:50,040 --> 01:09:55,440
And as we discussed, these wrappers will typically always have the args and quarks just to be

854
01:09:55,440 --> 01:10:00,240
flexible enough to be applied to anything.

855
01:10:00,320 --> 01:10:13,320
And now our task was that we wanted to call func twice and return the result as a tuple.

856
01:10:13,320 --> 01:10:20,880
So we could kind of be fairly clever with this and just do, let's see, I'll return args

857
01:10:20,880 --> 01:10:27,400
and quarks, and then I'll add in a comma and call it one more time.

858
01:10:27,400 --> 01:10:37,280
And then I just need to remember to return this wrapper function.

859
01:10:37,280 --> 01:10:42,600
So this is kind of the maybe too clever version of this.

860
01:10:42,600 --> 01:10:48,960
So here I'm calling func and then I'm calling it one more time and I'm just returning the

861
01:10:48,960 --> 01:10:52,160
results as a tuple.

862
01:10:52,160 --> 01:10:57,520
So let me see, I can start by just proving that it works and then we can see, we can

863
01:10:57,520 --> 01:10:59,800
write it more readable afterwards.

864
01:10:59,800 --> 01:11:08,760
But let's see, I want to import random since our test was this random function.

865
01:11:08,760 --> 01:11:11,840
This is my do twice wrapper.

866
01:11:11,840 --> 01:11:26,280
And then let's see, the task was to apply this to, let's see, roll dice.

867
01:11:26,280 --> 01:11:30,760
So roll dice is a very simple function, doesn't take in any arguments and it just returns

868
01:11:30,760 --> 01:11:35,520
a random number.

869
01:11:35,520 --> 01:11:41,200
Like this.

870
01:11:41,200 --> 01:11:48,200
So now if I roll dice and actually call it, we can see that I get at least what looks

871
01:11:48,200 --> 01:11:51,480
like random numbers like this.

872
01:11:51,480 --> 01:11:55,600
And you can see that even though here I'm returning one number, I'm getting two back

873
01:11:55,600 --> 01:11:56,600
there.

874
01:11:56,600 --> 01:12:02,440
So the do twice thing does something.

875
01:12:02,440 --> 01:12:08,800
Let's see, let's just spell out kind of what we're doing here.

876
01:12:09,440 --> 01:12:19,440
I could also then say that I'll store these as temporary variables.

877
01:12:19,440 --> 01:12:28,440
So I could call them first and second, for instance.

878
01:12:28,440 --> 01:12:34,440
Like this and then return.

879
01:12:34,440 --> 01:12:38,440
First and second.

880
01:12:39,080 --> 01:12:44,080
This might be a more readable way of implementing things.

881
01:12:48,080 --> 01:12:53,080
Just to show that that still does the job.

882
01:12:55,080 --> 01:13:00,080
You can see that we still get our two results back.

883
01:13:00,080 --> 01:13:03,200
Any questions about this?

884
01:13:03,200 --> 01:13:05,880
Was it okay to implement?

885
01:13:05,880 --> 01:13:07,880
You can kind of see the things that works.

886
01:13:08,320 --> 01:13:11,320
Yeah.

887
01:13:11,320 --> 01:13:20,320
Yeah, what's the limit in decorating decorators?

888
01:13:20,320 --> 01:13:23,320
Was that kind of the question?

889
01:13:23,320 --> 01:13:27,320
Now, there can be turtles all the way down essentially.

890
01:13:27,320 --> 01:13:32,320
So you can decorate a decorator if you want.

891
01:13:32,320 --> 01:13:35,320
Yeah, let's actually do that right now.

892
01:13:35,760 --> 01:13:40,760
We can even have stack, sorry, we can stack decorators on top of each other.

893
01:13:40,760 --> 01:13:51,760
So in this example here, I could for instance do a before and after like this.

894
01:13:54,760 --> 01:14:02,760
And now if I do my roll dice, you can see that it's calling before and after for each

895
01:14:03,200 --> 01:14:06,200
of these functions.

896
01:14:06,200 --> 01:14:14,200
And the way this works is that you just have nested function calls.

897
01:14:14,200 --> 01:14:19,200
So what we have up there in the sort of like the middle of the screen now would be more

898
01:14:19,200 --> 01:14:32,200
or less equivalent to doing before and after and then if we just define roll dice as a

899
01:14:32,240 --> 01:14:38,480
regular function and then we do apply before and after to roll dice and then we apply do

900
01:14:38,480 --> 01:14:41,240
twice to that again.

901
01:14:41,240 --> 01:14:46,240
So in this case you see that the before and after decorator is also then executed twice.

902
01:14:46,240 --> 01:14:52,560
If we kind of do the same as there but we flip the order, then we'll see a slightly

903
01:14:52,560 --> 01:14:53,560
different result.

904
01:14:53,920 --> 01:15:02,920
So I can do before and after, do twice, and then this.

905
01:15:02,920 --> 01:15:09,920
And now if we call it, you can see that the dice rolling is done twice but the before

906
01:15:10,280 --> 01:15:17,280
and after is now only done once because the do twice is only applied to this one.

907
01:15:17,600 --> 01:15:22,600
But yeah, it's possible to kind of stack decorators like this in some sense as much as you would

908
01:15:23,560 --> 01:15:25,280
want.

909
01:15:25,280 --> 01:15:29,560
It does depend then that these are actual decorators that return functions since we're

910
01:15:29,560 --> 01:15:34,560
kind of transforming functions all the way.

911
01:15:34,560 --> 01:15:41,560
Okay, any other questions?

912
01:15:53,560 --> 01:15:58,800
All right, so the question is whether should decorators be very generic so they can be

913
01:15:58,800 --> 01:16:03,000
applied to anything or kind of be specially designed to things.

914
01:16:03,000 --> 01:16:08,400
And in general you want to, I guess, make them as generic as possible but not more generic

915
01:16:08,400 --> 01:16:10,720
than that.

916
01:16:10,720 --> 01:16:14,240
So for instance, say I think in the Flask framework there is sort of like this login

917
01:16:14,240 --> 01:16:18,240
decorator that you can use to check is the user logged in.

918
01:16:18,240 --> 01:16:23,080
And that's of course designed to be put on some of these Flask routes so it's kind of

919
01:16:23,080 --> 01:16:27,600
designed to work inside of this framework and it won't really work if we just throw

920
01:16:27,600 --> 01:16:30,400
it on some magic function here.

921
01:16:30,400 --> 01:16:37,400
So yeah, it's kind of like function in that sense that, yeah, you want to be fairly generic

922
01:16:39,160 --> 01:16:43,080
with them but not too generic as well.

923
01:16:43,080 --> 01:16:48,080
They need to do their task.

924
01:16:48,080 --> 01:16:55,080
Oh yeah, if you have several do-twices.

925
01:17:01,400 --> 01:17:08,400
Yeah, so I guess the idea was what happens if you do twice several times.

926
01:17:09,440 --> 01:17:12,800
And let's just check this.

927
01:17:12,800 --> 01:17:18,080
So it's something like this, right?

928
01:17:18,080 --> 01:17:25,080
And now if I roll my dice you can see that I get two pairs essentially now.

929
01:17:25,080 --> 01:17:30,880
And then if I keep doing this I'll get, I guess, next iteration I'll get two of these

930
01:17:30,880 --> 01:17:35,240
pairs of pairs and it kind of just explode out.

931
01:17:35,240 --> 01:17:42,240
So I'll do twice, three times will give me eight numbers and so on.

932
01:17:42,880 --> 01:17:45,480
Can you use a decorator from a different class?

933
01:17:45,480 --> 01:17:52,480
Yes, if you can kind of name it then you should be able to call it essentially.

934
01:17:52,480 --> 01:17:56,360
Right, so let's see.

935
01:17:56,360 --> 01:18:01,800
We'll have some example later where we use a class as a decorator but yeah, it's kind

936
01:18:01,800 --> 01:18:05,960
of just a namespacing thing so as long as you're able to reference something that works

937
01:18:05,960 --> 01:18:07,960
as a decorator you can use it.

938
01:18:07,960 --> 01:18:08,960
Good, good.

939
01:18:08,960 --> 01:18:15,280
Then I'll guess it's time for a coffee break.

940
01:18:15,280 --> 01:18:19,360
So we'll continue in half an hour.

941
01:18:19,360 --> 01:18:22,360
And if anyone has any questions I'll be here.

942
01:18:22,360 --> 01:18:25,360
Okay, yeah.

943
01:18:25,360 --> 01:18:31,280
Right, so any good rules of thumb for when you want to use decorators and perhaps when

944
01:18:31,280 --> 01:18:33,640
you want.

945
01:18:33,640 --> 01:18:40,640
So one typical use case at least that I find is that you have the same functionality that

946
01:18:43,280 --> 01:18:46,840
you want to implement all over your code base kind of thing.

947
01:18:46,840 --> 01:18:51,520
So I guess one fairly basic example of this would be that you have several pieces of code

948
01:18:51,520 --> 01:18:54,680
where you want to say time your function or something like this.

949
01:18:54,680 --> 01:18:58,080
So I want to figure out how long is the run time of this part of the code, how long is

950
01:18:58,080 --> 01:19:00,060
this part, how long is this part.

951
01:19:00,060 --> 01:19:05,580
And then one way to do it would be that you just add in this, what do you use, something

952
01:19:05,580 --> 01:19:11,620
time dot time minus previous kind of thing all over your code.

953
01:19:11,620 --> 01:19:14,980
And when you kind of start to recognize that okay, I have the same pattern that I kind

954
01:19:14,980 --> 01:19:18,740
of have spread out in many places, then you can start thinking is this something that

955
01:19:18,740 --> 01:19:25,740
I can do with the decorator instead and just create your time decorator and add timer here

956
01:19:25,740 --> 01:19:26,820
and there.

957
01:19:27,140 --> 01:19:31,020
I guess similarly with this login functionality we talked about previous with the flask and

958
01:19:31,020 --> 01:19:35,420
so on or what they did with this compiler thing that it kind of...

959
01:19:35,420 --> 01:19:40,460
So when you start to see that I'm doing the same thing but in very different areas of

960
01:19:40,460 --> 01:19:44,420
my code, then maybe that behavior thing is something I can pull out and use the decorator

961
01:19:44,420 --> 01:19:45,740
for.

962
01:19:45,740 --> 01:19:48,260
So that's kind of the...

963
01:19:48,260 --> 01:19:52,940
It's still somewhat abstract, but one way to recognize it.

964
01:19:52,940 --> 01:19:54,940
Other questions?

965
01:19:55,900 --> 01:19:57,500
No.

966
01:19:57,500 --> 01:20:02,780
So the plan now for the second half is essentially to keep doing what we have been doing, exploring

967
01:20:02,780 --> 01:20:06,460
the decorators and kind of grow now from...

968
01:20:06,460 --> 01:20:12,440
We kind of figured out how to write our basic decorators, so now how can we do different

969
01:20:12,440 --> 01:20:14,740
types of decorators.

970
01:20:14,740 --> 01:20:19,500
And the first thing we'll look at is looking at decorators that only do stuff at defined

971
01:20:19,500 --> 01:20:20,500
time.

972
01:20:20,500 --> 01:20:22,060
So we'll look at the decorator in a function.

973
01:20:22,060 --> 01:20:28,220
That may sometimes be useful and we'll kind of see how that changes the pattern.

974
01:20:28,220 --> 01:20:34,260
And then we'll dive into how can you have decorators that have parameters on them.

975
01:20:34,260 --> 01:20:40,300
So we'll see some examples of how to add that to things.

976
01:20:40,300 --> 01:20:46,740
And then it may sometimes be helpful to have a decorator that can somehow keep state.

977
01:20:46,740 --> 01:20:49,700
So hopefully we'll have a chance to look at those as well.

978
01:20:49,700 --> 01:20:52,220
So that's kind of more or less the plan going forward.

979
01:20:52,220 --> 01:20:54,460
But yeah, we'll keep doing this sort of like with the same fashion.

980
01:20:54,460 --> 01:20:59,740
So you get some exercises, then we'll kind of talk about things afterwards.

981
01:20:59,740 --> 01:21:00,740
Okay.

982
01:21:00,740 --> 01:21:07,540
So I think we kind of left it after we did this do twice decorator.

983
01:21:07,540 --> 01:21:15,540
And what I kind of want to go back a little bit at is just make sure that we understand

984
01:21:15,540 --> 01:21:18,260
when is kind of the decorator...

985
01:21:18,260 --> 01:21:19,700
When is it kind of running?

986
01:21:19,700 --> 01:21:22,220
When does stuff happen when you decorate?

987
01:21:22,220 --> 01:21:28,420
And we talked about this a little bit in sort of like looking at the syntax, our add syntax

988
01:21:28,420 --> 01:21:36,660
versus this high equals something of high kind of syntax.

989
01:21:36,660 --> 01:21:37,700
And let's see.

990
01:21:37,700 --> 01:21:39,700
If we go back to...

991
01:21:39,700 --> 01:21:45,500
I guess I have over here.

992
01:21:45,500 --> 01:21:52,860
So I'll just use our old and trusted before and after decorator.

993
01:21:52,860 --> 01:22:00,940
And if I add in a line, very much on the top, so before the wrapper there.

994
01:22:00,940 --> 01:22:09,500
And I'll just say here something like decorating.

995
01:22:09,500 --> 01:22:13,060
And then double underscore name.

996
01:22:13,060 --> 01:22:15,380
So this attribute...

997
01:22:15,380 --> 01:22:17,740
So I don't know if you've seen this double underscore attribute.

998
01:22:17,740 --> 01:22:21,900
There's something called stunder names or special names.

999
01:22:21,900 --> 01:22:24,340
So these are typically Python's.

1000
01:22:24,340 --> 01:22:28,620
They research Python, so that's why they have the underscores to kind of mark them.

1001
01:22:28,620 --> 01:22:32,660
And they can often give you a lot of information about say the whole data model of Python.

1002
01:22:32,660 --> 01:22:36,940
So for instance, when you define a function, it has at least some idea what its name is

1003
01:22:36,940 --> 01:22:41,400
that you can pull out of this stunder name attribute.

1004
01:22:41,400 --> 01:22:46,840
So this print statement is now something that I want to call not inside of the wrapper,

1005
01:22:46,840 --> 01:22:47,940
but outside.

1006
01:22:47,940 --> 01:22:53,380
So I'll just see what happens then.

1007
01:22:53,380 --> 01:23:00,380
So I'll take this, copy this, and let's see.

1008
01:23:00,380 --> 01:23:03,520
So now I have the before and after.

1009
01:23:03,520 --> 01:23:09,640
And let's just use this on our good old high thing.

1010
01:23:09,640 --> 01:23:16,340
I guess we can do a simple high.

1011
01:23:16,340 --> 01:23:19,340
Something like this.

1012
01:23:19,340 --> 01:23:26,260
And yeah, let me just call this so we see everything immediately.

1013
01:23:26,260 --> 01:23:28,700
That was the simple high without the string.

1014
01:23:28,700 --> 01:23:29,700
Okay.

1015
01:23:29,700 --> 01:23:31,600
We'll leave that.

1016
01:23:31,600 --> 01:23:39,720
So what we can notice here, though, is that the decorating high came already when I defined

1017
01:23:39,720 --> 01:23:42,500
high.

1018
01:23:42,500 --> 01:23:47,920
And this line is what's printed on the top there.

1019
01:23:47,920 --> 01:23:52,360
So that's the print that's already at the top there.

1020
01:23:52,360 --> 01:23:56,100
So what we can kind of read out of this is that before and after, if you think of this

1021
01:23:56,100 --> 01:24:01,400
as a function, that function is executed when we define this.

1022
01:24:01,400 --> 01:24:05,780
And what happens then is that everything that's not inside the inner function there is executed.

1023
01:24:05,780 --> 01:24:09,380
So the print statement comes here immediately.

1024
01:24:09,380 --> 01:24:13,960
And then when we're actually running the decorated function, what we're really doing is executing

1025
01:24:13,960 --> 01:24:15,780
this inner function.

1026
01:24:15,780 --> 01:24:19,060
And since that print statement is not part of the inner function, we don't see anything

1027
01:24:19,060 --> 01:24:20,760
about decorating here.

1028
01:24:20,760 --> 01:24:26,640
Here we just see the before and after that kind of is in between there.

1029
01:24:26,640 --> 01:24:32,300
So that's kind of just something to, I guess, keep track of, keep in mind.

1030
01:24:32,300 --> 01:24:39,500
And it means that if we have a decorator where we only want to do something at defined time,

1031
01:24:39,500 --> 01:24:44,100
so we actually don't want to change the function, we just want to do something when a function

1032
01:24:44,100 --> 01:24:49,300
is defined, then we don't actually need that inner stuff.

1033
01:24:49,300 --> 01:24:59,760
So for a very basic example of this, I can pull out, yeah, let's call it define or something.

1034
01:24:59,760 --> 01:25:06,560
I can pull out this functionality that we just had now with the print statement.

1035
01:25:06,560 --> 01:25:17,900
So I'll say that this define thing just prints out, oops, what did you do now?

1036
01:25:17,900 --> 01:25:20,820
The same print statement that we had earlier.

1037
01:25:20,820 --> 01:25:25,440
And then I'll just return the original function.

1038
01:25:25,440 --> 01:25:34,500
So what this does then is that I can use define there, and then I'll define the high, and

1039
01:25:34,500 --> 01:25:36,500
then that should print.

1040
01:25:36,500 --> 01:25:41,820
Let's see if we get this correct.

1041
01:25:41,820 --> 01:25:44,080
Like this.

1042
01:25:44,080 --> 01:25:50,120
So what I've done here is that I'm able to do something, ideally more interesting than

1043
01:25:50,120 --> 01:25:55,640
just printing, but I can do something whenever a function is defined, but I'm now not changing

1044
01:25:55,640 --> 01:25:57,880
that function at all, right?

1045
01:25:57,880 --> 01:26:03,220
So here I'm returning the exact same object.

1046
01:26:03,220 --> 01:26:09,400
So if I do high PyCon here, we can see that it runs just like this.

1047
01:26:09,400 --> 01:26:15,380
And if I look at this function, I can see here that this is the high name function that

1048
01:26:15,380 --> 01:26:19,100
I just defined.

1049
01:26:19,100 --> 01:26:26,500
For this latter thing, let's have a look at if I go back to the before and after, and

1050
01:26:26,500 --> 01:26:38,940
let me decorate the hello function instead just so that we keep both of them.

1051
01:26:38,960 --> 01:26:42,380
So this was the version of before and after where we added the print, so we can see here

1052
01:26:42,380 --> 01:26:44,900
that that print is run there.

1053
01:26:44,900 --> 01:26:53,940
But then if I now look at what is this function object, we can see here that high is exactly

1054
01:26:53,940 --> 01:26:59,240
the high function, but hello has become this before and after wrapper function, because

1055
01:26:59,240 --> 01:27:01,440
that's what we kind of sent back there.

1056
01:27:01,440 --> 01:27:02,440
Yeah?

1057
01:27:02,440 --> 01:27:03,440
Yeah?

1058
01:27:03,440 --> 01:27:09,540
So primarily we can say that it's kind of the same function as the text, or the round

1059
01:27:09,540 --> 01:27:18,140
of the text, but it seems like you could also use it to implement functionality, call text

1060
01:27:18,140 --> 01:27:21,840
functions, logging, something like that, just every time a function is dead, you could have

1061
01:27:21,840 --> 01:27:22,840
it.

1062
01:27:22,840 --> 01:27:23,840
Yes, exactly.

1063
01:27:23,840 --> 01:27:29,340
Yeah, so the comment is that so far we've kind of just been doing the stomach examples

1064
01:27:29,440 --> 01:27:33,740
for printing out stuff, but the real use case for this would be that you can implement some

1065
01:27:33,740 --> 01:27:36,040
functionality whenever something is called.

1066
01:27:36,040 --> 01:27:39,840
Maybe you want to do some logging, which is a great example.

1067
01:27:39,840 --> 01:27:45,100
You can do some call stack manipulation, but we'll come back to some of these.

1068
01:27:45,100 --> 01:27:49,200
You can do some validation, which hopefully we'll have time for an example at the end

1069
01:27:49,200 --> 01:27:50,200
and so on.

1070
01:27:50,200 --> 01:27:55,740
So yeah, you can do all kinds of stuff with this.

1071
01:27:55,840 --> 01:28:00,340
One thing that we can see here is that here there's clear proof that we have done something,

1072
01:28:00,340 --> 01:28:05,040
and it is actually a completely different function object than this thing.

1073
01:28:05,040 --> 01:28:09,640
And what's kind of happened here is that we have this kind of closure thing where we're

1074
01:28:09,640 --> 01:28:16,040
saving a reference to the original function, but what we get back in hello here is actually

1075
01:28:16,040 --> 01:28:18,540
this wrapper function.

1076
01:28:18,540 --> 01:28:24,240
But then that wrapper function calls this thing here that we don't have direct access

1077
01:28:24,240 --> 01:28:26,540
to anymore actually.

1078
01:28:26,540 --> 01:28:28,740
Okay.

1079
01:28:28,740 --> 01:28:34,240
And what we're actually seeing kind of leak through here is that this decoration kills

1080
01:28:34,240 --> 01:28:37,740
a little bit the names that we have for things.

1081
01:28:37,740 --> 01:28:43,140
And let me just point out that here we see that the function kind of knows its own name,

1082
01:28:43,140 --> 01:28:51,640
and we can see this if I do, I can do the thunder name that we talked about, or that's

1083
01:28:51,740 --> 01:28:55,040
printed in the REPL when I do this.

1084
01:28:55,040 --> 01:28:58,040
And we can do the same with say print.

1085
01:28:58,040 --> 01:29:01,040
You can see this knows it's the function print.

1086
01:29:01,040 --> 01:29:04,940
I can do the name for this.

1087
01:29:04,940 --> 01:29:07,240
It knows its name is print.

1088
01:29:07,240 --> 01:29:14,040
But now if you remember I had scrivut, which was just equal to print.

1089
01:29:14,040 --> 01:29:17,940
And if I do scrivut like this, you can see it still knows it's print.

1090
01:29:17,940 --> 01:29:20,140
It's not become scrivut somehow.

1091
01:29:20,240 --> 01:29:24,740
And if I ask it here for its name, that's still print.

1092
01:29:24,740 --> 01:29:31,840
So the name of a function as it kind of knows itself may be different from the name that

1093
01:29:31,840 --> 01:29:34,540
we're using to refer to it.

1094
01:29:34,540 --> 01:29:36,840
So those are kind of two separate things.

1095
01:29:40,040 --> 01:29:40,540
Let's see.

1096
01:29:40,540 --> 01:29:41,040
Yeah.

1097
01:29:41,040 --> 01:29:49,340
So we saw here that when I had this hello thing there, it messed with the name, which

1098
01:29:49,340 --> 01:29:51,340
may be an issue.

1099
01:29:51,340 --> 01:29:55,540
If you're kind of using this name for anything, then this will be terrible.

1100
01:29:55,540 --> 01:29:58,640
For instance, if you're logging that I'm not calling this function and then suddenly you

1101
01:29:58,640 --> 01:30:05,640
get this usually not useful information that it's this inner thing.

1102
01:30:05,640 --> 01:30:12,440
So there is actually a decorator that already exists in Python that can help us kind of

1103
01:30:12,440 --> 01:30:19,240
keep track of metadata or make sure the metadata here are more well behaved.

1104
01:30:19,240 --> 01:30:24,840
So let's go back one more time to before and after.

1105
01:30:26,840 --> 01:30:33,740
And I'll remove this decorating thing again.

1106
01:30:33,740 --> 01:30:35,340
That was kind of just to show you.

1107
01:30:37,040 --> 01:30:46,740
But then I can apply a decorator now to the wrapper function, to the inner function.

1108
01:30:47,740 --> 01:30:53,940
And let's first of all import functools.

1109
01:30:53,940 --> 01:30:57,440
So this is one of the standard libraries.

1110
01:30:57,440 --> 01:31:02,140
And inside of functools there is something called reps.

1111
01:31:02,140 --> 01:31:07,240
And if you just look at the help text for this, you can see that this is what they call

1112
01:31:07,240 --> 01:31:10,240
the decorator factory.

1113
01:31:10,240 --> 01:31:11,440
Think of it almost like a decorator.

1114
01:31:11,440 --> 01:31:14,640
We'll soon come back to exactly what it is.

1115
01:31:14,640 --> 01:31:22,940
But this one can then essentially, this is fairly technical, but it's okay.

1116
01:31:22,940 --> 01:31:24,640
This is too technical for now.

1117
01:31:24,640 --> 01:31:29,340
What it does is that it changes name and so on so that the decorated function looks like

1118
01:31:29,340 --> 01:31:31,140
the original function.

1119
01:31:31,140 --> 01:31:34,940
So let's have a look at it.

1120
01:31:34,940 --> 01:31:43,140
If I do functools.reps up there and then I actually need to pass in the original function

1121
01:31:43,640 --> 01:31:46,640
as functor.

1122
01:31:46,640 --> 01:31:53,640
And I see that VS Code is yelling at me because I haven't imported functools.

1123
01:31:53,640 --> 01:31:56,440
Okay.

1124
01:31:56,440 --> 01:32:05,140
So now let's have a look at what happens if I use this one.

1125
01:32:05,140 --> 01:32:09,540
So I once again redefined my before and after decorator.

1126
01:32:09,540 --> 01:32:13,040
And now we can use this again on the, well, let's use it on high.

1127
01:32:13,040 --> 01:32:19,040
Before and after, high.

1128
01:32:19,040 --> 01:32:22,040
Print.

1129
01:32:22,040 --> 01:32:25,040
Hi.

1130
01:32:25,040 --> 01:32:31,040
Because now remember hello is kind of still the old one.

1131
01:32:31,040 --> 01:32:33,040
So it has this weird name.

1132
01:32:33,040 --> 01:32:41,040
But now hi, even though it has been decorated right here, it looks like it's just a plain

1133
01:32:41,040 --> 01:32:42,040
function.

1134
01:32:42,040 --> 01:32:46,040
It's logical name, so to speak.

1135
01:32:46,040 --> 01:32:50,040
So that's, yeah, on the very top there you see this functools.reps.

1136
01:32:50,040 --> 01:32:56,040
Its task is essentially just to keep the metadata or pass on really, copy the metadata from

1137
01:32:56,040 --> 01:33:01,040
the func that's passed in to the inner function.

1138
01:33:01,040 --> 01:33:06,040
So that it's usually at least a good idea whenever you have a decorated wrapper like

1139
01:33:06,040 --> 01:33:09,040
this to just throw the functools.reps on top of it.

1140
01:33:09,040 --> 01:33:12,040
That kind of makes things play nicely together.

1141
01:33:12,040 --> 01:33:27,040
Yeah, I think essentially the only thing is if you don't have an inner function, so you

1142
01:33:27,040 --> 01:33:28,040
don't change the func.

1143
01:33:28,040 --> 01:33:31,040
But yeah, I think, yeah, always do it.

1144
01:33:31,040 --> 01:33:36,040
And yeah, if there's an exception, you'll probably figure it out.

1145
01:33:36,040 --> 01:33:37,040
Okay.

1146
01:33:37,040 --> 01:33:45,040
So I think that brings us to a new exercise.

1147
01:33:45,040 --> 01:33:50,040
And this one might seem like yet another of these dummy examples.

1148
01:33:50,040 --> 01:33:56,040
But this one is one, it's probably the decorator I've used the most myself.

1149
01:33:56,040 --> 01:34:01,040
And it's actually a fairly powerful mechanism for doing sort of like plug-ins where you

1150
01:34:01,040 --> 01:34:06,040
can kind of inject code and things like this.

1151
01:34:06,040 --> 01:34:11,040
So what we want here is to write the decorator that stores references to decorated functions.

1152
01:34:11,040 --> 01:34:14,040
So we don't want to change the decorated function at all.

1153
01:34:14,040 --> 01:34:16,040
So it's similar to what we did with define.

1154
01:34:16,040 --> 01:34:20,040
But we want to just keep references to them.

1155
01:34:20,040 --> 01:34:25,040
So in this case, our test is that we'll just, okay, let's create a global dictionary.

1156
01:34:25,040 --> 01:34:31,040
And then whenever I define a function that is sort of like has this register, the decorator

1157
01:34:31,040 --> 01:34:39,040
on top, it adds a reference to the function in this function's dictionary.

1158
01:34:39,040 --> 01:34:40,040
So yeah.

1159
01:34:40,040 --> 01:34:42,040
Have fun with this one.

1160
01:34:42,040 --> 01:34:52,040
And then we'll talk about it more in five, ten minutes.

1161
01:34:52,040 --> 01:34:53,040
Okay.

1162
01:34:53,040 --> 01:34:59,040
So we're starting to have at least some implementations.

1163
01:34:59,040 --> 01:35:04,040
Oster, did this work out fine for you?

1164
01:35:04,040 --> 01:35:10,040
I guess we'll discuss a little bit now, so we'll see.

1165
01:35:10,040 --> 01:35:18,040
So the idea here was that we will, let's see, I get the question again.

1166
01:35:18,040 --> 01:35:24,040
So I want to define this register decorator that doesn't really touch the function at all.

1167
01:35:24,040 --> 01:35:29,040
It just makes note that this function exists, essentially.

1168
01:35:29,040 --> 01:35:34,040
So that means that we only need to do something at define time, so we don't need to change the function.

1169
01:35:34,040 --> 01:35:39,040
So we don't actually need to use that wrapper that we have been using so far.

1170
01:35:39,040 --> 01:35:45,040
So this will turn out fairly similar to this define decorator we did.

1171
01:35:45,040 --> 01:35:47,040
So let's see.

1172
01:35:47,040 --> 01:35:54,040
I can then do something define register.

1173
01:35:54,040 --> 01:36:02,040
And then what I wanted to do now was to just make a note in this functions thing.

1174
01:36:02,040 --> 01:36:05,040
And here we can use the thunder thing.

1175
01:36:05,040 --> 01:36:11,040
So I'm just saying that, okay, I'll use the name as the key, and then I'll pass in a reference to the function.

1176
01:36:11,040 --> 01:36:16,040
So make sure we're not calling the function, right, we're just storing reference to it.

1177
01:36:16,040 --> 01:36:20,040
And then I should here also return the function itself.

1178
01:36:20,040 --> 01:36:27,040
So this is kind of the decorator that we're looking for.

1179
01:36:27,040 --> 01:36:32,040
I should also, yeah, we'll run it afterwards without returning func just so you can see what happens then.

1180
01:36:32,040 --> 01:36:39,040
And let's see, before I can actually use this, I also need to define functions.

1181
01:36:39,040 --> 01:36:43,040
So I'll just let that start as a global dictionary here.

1182
01:36:43,040 --> 01:36:48,040
And let's see what's the dice rolling example again we did.

1183
01:36:48,040 --> 01:37:02,040
So if we do register, dice roll, and then we return random random int like this.

1184
01:37:02,040 --> 01:37:09,040
So what has happened now is since this is define time, right, so we're not need to call anything.

1185
01:37:09,040 --> 01:37:15,040
So when we did register there, then this functions thing should have been populated.

1186
01:37:15,040 --> 01:37:19,040
So let's have a look.

1187
01:37:19,040 --> 01:37:24,040
You can see now it's no longer empty, but it has a reference now to the dice roll function.

1188
01:37:24,040 --> 01:37:30,040
And since this is a function reference, we can start playing with it.

1189
01:37:30,040 --> 01:37:36,040
So I can't pick it out here.

1190
01:37:36,040 --> 01:37:38,040
So there's my function reference.

1191
01:37:38,040 --> 01:37:40,040
And then I can call it.

1192
01:37:40,040 --> 01:37:47,040
And I can see that I get some random dice rolls here.

1193
01:37:47,040 --> 01:37:55,040
So this is really, let's see, where are we?

1194
01:37:55,040 --> 01:37:59,040
If we're just doing something at define time, then this is enough.

1195
01:37:59,040 --> 01:38:03,040
We don't need to wrap anything because we're not changing the function.

1196
01:38:03,040 --> 01:38:05,040
So it just stays the same.

1197
01:38:05,040 --> 01:38:18,040
So if I look at the dice roll function, we can see that it has its nice name here.

1198
01:38:18,040 --> 01:38:19,040
Let's see.

1199
01:38:19,040 --> 01:38:22,040
So yeah, first, if I wouldn't, let's see.

1200
01:38:22,040 --> 01:38:31,040
So if I do def register and I do this, but I don't return anything, what do you think

1201
01:38:31,040 --> 01:38:32,040
will happen then?

1202
01:38:32,040 --> 01:38:36,040
Anyone want to guess?

1203
01:38:36,040 --> 01:38:40,040
The function will register, but I can't, what did you say?

1204
01:38:40,040 --> 01:38:43,040
But I can't use it, essentially.

1205
01:38:43,040 --> 01:38:45,040
So let's try that.

1206
01:38:45,040 --> 01:38:46,040
So okay.

1207
01:38:46,040 --> 01:38:51,040
I'll have, I'll redefine functions as the empty dictionary.

1208
01:38:51,040 --> 01:38:54,040
Just to see it's empty.

1209
01:38:54,040 --> 01:39:02,040
And then I use this bad register with my dice roll.

1210
01:39:02,040 --> 01:39:04,040
Like this.

1211
01:39:04,040 --> 01:39:10,040
So you can see now functions has the dice roll implemented there.

1212
01:39:10,040 --> 01:39:12,040
So that's beautiful.

1213
01:39:12,040 --> 01:39:14,040
And we can even call it.

1214
01:39:14,040 --> 01:39:16,040
So we have the reference there.

1215
01:39:16,040 --> 01:39:24,040
But now if I look at dice roll itself, you can see, well, nothing seems to be there.

1216
01:39:24,040 --> 01:39:31,040
And if I check slightly more closely, we can see that it has been replaced by none since

1217
01:39:31,040 --> 01:39:33,040
we're not returning anything.

1218
01:39:33,040 --> 01:39:39,040
So when we do a decorator like this, it is really replacing the function we're decorating

1219
01:39:39,040 --> 01:39:44,040
with whatever is the return value of our decorated function thing.

1220
01:39:44,040 --> 01:39:49,040
So since we didn't return anything, Python implicitly returns none, so we get none back

1221
01:39:49,040 --> 01:39:50,040
there.

1222
01:39:50,040 --> 01:39:56,040
So this I guess might be a feature because it means I can't call it like this.

1223
01:39:56,040 --> 01:39:59,040
It kind of forces me to use the functions thing there.

1224
01:39:59,040 --> 01:40:01,040
So maybe that's a feature.

1225
01:40:01,040 --> 01:40:04,040
Maybe it's a bug.

1226
01:40:04,040 --> 01:40:09,040
Then just lastly, I claim that this is a very helpful decorator.

1227
01:40:09,040 --> 01:40:14,040
It may not seem like it immediately, and I don't want to kind of dive too far away from

1228
01:40:14,040 --> 01:40:16,040
the decorator stuff.

1229
01:40:16,040 --> 01:40:21,040
But what we can kind of do with this is that we can then dynamically call functions without

1230
01:40:21,040 --> 01:40:24,040
having to kind of specify it beforehand.

1231
01:40:24,040 --> 01:40:29,040
So for sort of like a still a fairly silly example.

1232
01:40:29,040 --> 01:40:35,040
But I could then do something like this.

1233
01:40:35,040 --> 01:40:45,040
Which function do you want to call?

1234
01:40:45,040 --> 01:40:52,040
And then here I can say dice roll, and then essentially we do something like functions

1235
01:40:52,040 --> 01:40:55,040
name call.

1236
01:40:55,040 --> 01:41:02,040
So here I kind of somewhat interactively define which function I want to call, and then if

1237
01:41:02,040 --> 01:41:04,040
you have several defined, you can kind of use this.

1238
01:41:04,040 --> 01:41:09,040
For maybe a better example of this, say that you have different file formats that you want

1239
01:41:09,040 --> 01:41:14,040
to read, and then you can kind of define a handler for say CSV format, another one for

1240
01:41:14,040 --> 01:41:18,040
JSON, and if you just register each of them and then you can kind of call them indirectly

1241
01:41:18,040 --> 01:41:24,040
using something like this, then it makes it very easy to then later just patch on another

1242
01:41:24,040 --> 01:41:26,040
file format for you.

1243
01:41:26,040 --> 01:41:30,040
Then you can anywhere else you can kind of register a handler for YAML or something like

1244
01:41:30,040 --> 01:41:31,040
this.

1245
01:41:31,040 --> 01:41:39,040
So it kind of allows for, yeah, very flexible ways of structuring your programs.

1246
01:41:39,040 --> 01:41:41,040
Okay.

1247
01:41:41,040 --> 01:41:49,040
That's not what we wanted.

1248
01:41:49,040 --> 01:41:55,040
Let's see.

1249
01:41:55,040 --> 01:42:00,040
Then we talked about those.

1250
01:42:00,040 --> 01:42:02,040
Yeah.

1251
01:42:02,040 --> 01:42:09,040
So one thing I guess I'll also now just point out.

1252
01:42:09,040 --> 01:42:15,040
Let's see.

1253
01:42:15,040 --> 01:42:17,040
The high function, I should have pointed this out earlier.

1254
01:42:17,040 --> 01:42:22,040
I just want to show it to you, and then we'll look at this more closely later.

1255
01:42:22,040 --> 01:42:31,040
But the high function was one of those where we used this wrapper.

1256
01:42:31,040 --> 01:42:38,040
It's actually possible to access Thunder wrapped like this.

1257
01:42:38,040 --> 01:42:40,040
This is one of these before and after.

1258
01:42:40,040 --> 01:42:45,040
So if I do high PyCon, we do the before, high PyCon after.

1259
01:42:45,040 --> 01:42:51,040
This wrapped thing, you can see it seems to also be the same function, but it's actually

1260
01:42:51,040 --> 01:42:54,040
then the inner function.

1261
01:42:54,040 --> 01:42:58,040
So that's another bonus with using this wrapper is that you can actually access the original

1262
01:42:58,040 --> 01:43:01,040
function quite easily as well.

1263
01:43:01,040 --> 01:43:08,040
So if we have used Functool wraps, then using diving in through wrapped, then you can get

1264
01:43:08,040 --> 01:43:19,040
access to the original undecorated function.

1265
01:43:19,040 --> 01:43:20,040
Okay.

1266
01:43:20,040 --> 01:43:24,040
I think we can then move on to the next exercise.

1267
01:43:24,040 --> 01:43:29,040
Are there other questions, comments?

1268
01:43:29,040 --> 01:43:32,040
Yeah.

1269
01:43:32,040 --> 01:43:44,040
Yeah, what would be a use case for accessing the wrapped thing?

1270
01:43:44,040 --> 01:43:49,040
Well, usually you have, I guess, wrapped things for a reason.

1271
01:43:49,040 --> 01:43:51,040
You kind of decorated them because you want to use it.

1272
01:43:51,040 --> 01:43:54,040
So typically it's not something that you'll use.

1273
01:43:54,040 --> 01:43:59,040
But it could be a way, say, that you can sneak through the, well, in a log in example, if

1274
01:43:59,040 --> 01:44:01,040
you just want to test something.

1275
01:44:01,040 --> 01:44:03,040
So don't do it in production, I guess.

1276
01:44:03,040 --> 01:44:08,040
You could then sneak through the log in stuff by going beneath it, or if you don't want

1277
01:44:08,040 --> 01:44:12,040
to time something that has the timer on it.

1278
01:44:12,040 --> 01:44:13,040
Yeah.

1279
01:44:13,040 --> 01:44:20,040
In general, it's more know it exists kind of thing.

1280
01:44:20,040 --> 01:44:22,040
Okay.

1281
01:44:22,040 --> 01:44:31,040
So I guess in keeping with somewhat silly test functions, I've here changed the rollDice

1282
01:44:31,040 --> 01:44:37,040
function so that it creates an error if you roll less than five.

1283
01:44:37,040 --> 01:44:43,040
And then what we want to try to do is to create a decorator that just retries a function

1284
01:44:43,040 --> 01:44:46,040
call if the function call fails.

1285
01:44:46,040 --> 01:44:52,040
So in this case, when we run this thing, we should get either five or six.

1286
01:44:52,040 --> 01:44:55,040
We should not get the error message.

1287
01:44:55,040 --> 01:44:57,040
And then, yeah, this is a silly example.

1288
01:44:57,040 --> 01:45:02,040
Look at slightly better examples once we have the retry decorator.

1289
01:45:02,040 --> 01:45:09,040
So, yeah, have some fun with this one.

1290
01:45:09,040 --> 01:45:10,040
Okay.

1291
01:45:10,040 --> 01:45:14,040
I guess we can start to have a look at this.

1292
01:45:14,040 --> 01:45:22,040
So this one will again be sort of like a regular decorator where we're kind of needing to do

1293
01:45:22,040 --> 01:45:23,040
something.

1294
01:45:23,040 --> 01:45:29,040
But now I guess, well, we can think of this as doing something more or less after calling

1295
01:45:29,040 --> 01:45:37,040
the function where we're catching an exception and then potentially running it again.

1296
01:45:37,040 --> 01:45:39,040
So let's see.

1297
01:45:39,040 --> 01:45:54,040
One way to solve this would be that I can, let's see if I move this up a little bit.

1298
01:45:54,040 --> 01:45:58,040
So I'll define the retry thing.

1299
01:45:58,040 --> 01:46:08,040
And then as we kind of learn, we can add a wrapster.

1300
01:46:08,040 --> 01:46:12,040
And then we can define a wrapper.

1301
01:46:12,040 --> 01:46:17,040
So I'm kind of just throwing in the template more or less we have by now.

1302
01:46:17,040 --> 01:46:23,040
And then here we'll do something and then we'll return a wrapper.

1303
01:46:23,040 --> 01:46:26,040
So this is kind of just the template part.

1304
01:46:26,040 --> 01:46:28,040
And then what did we say we want to do here?

1305
01:46:28,040 --> 01:46:35,040
Essentially I want to call the function repeatedly until it doesn't return an exception essentially.

1306
01:46:35,040 --> 01:46:42,040
So in this case I guess I can just throw myself into a while true loop.

1307
01:46:42,040 --> 01:46:44,040
So I'll just run forever.

1308
01:46:44,040 --> 01:46:52,040
And then I'll try to call the function.

1309
01:46:52,040 --> 01:46:54,040
Something like this.

1310
01:46:54,040 --> 01:46:56,040
And here I just return immediately the value.

1311
01:46:56,040 --> 01:47:00,040
So I don't need to do anything else with it.

1312
01:47:00,040 --> 01:47:05,040
So the only problem is if this thing now raises an exception when it's called.

1313
01:47:05,040 --> 01:47:11,040
But that's something we can catch with an accept clause.

1314
01:47:11,040 --> 01:47:16,040
So I'll just accept the exception.

1315
01:47:16,040 --> 01:47:23,040
And then if we get an exception I just really want to keep moving.

1316
01:47:23,040 --> 01:47:28,040
So for now I'll just do a pass statement there I guess.

1317
01:47:28,040 --> 01:47:35,040
So I think this is probably the most basic thing we can do with the retry.

1318
01:47:35,040 --> 01:47:39,040
And then we'll add in a little bit more functionality to this after a while.

1319
01:47:39,040 --> 01:47:45,040
But let's see if it works.

1320
01:47:45,040 --> 01:47:53,040
So I'll put this into our REPL.

1321
01:47:53,040 --> 01:48:02,040
And then our test was to see if we could keep rolling and only get five and six in this.

1322
01:48:02,040 --> 01:48:04,040
I guess I called it only roll highs.

1323
01:48:04,040 --> 01:48:13,040
But it's really just our dice roll thing in hiding.

1324
01:48:13,040 --> 01:48:19,040
So we'll have some number that's a random.

1325
01:48:19,040 --> 01:48:32,040
And then I said if number is less than five then we'll raise a value error.

1326
01:48:32,040 --> 01:48:37,040
Value error.

1327
01:48:37,040 --> 01:48:39,040
Let's see.

1328
01:48:39,040 --> 01:48:41,040
Were we more offensive with this?

1329
01:48:41,040 --> 01:48:43,040
No.

1330
01:48:43,040 --> 01:48:49,040
And then I'll just return this number.

1331
01:48:49,040 --> 01:48:58,040
So now if I run this only roll highs.

1332
01:48:58,040 --> 01:49:02,040
We can see that okay I got six, I got six, five, six, five, six.

1333
01:49:02,040 --> 01:49:08,040
So I'm not getting the one, two, three, fours that should be there.

1334
01:49:08,040 --> 01:49:16,040
So now everything kind of happens so quickly that it's kind of hard to really see what's going on here.

1335
01:49:16,040 --> 01:49:25,040
So let's change this a little bit, just add a little bit of visibility into it.

1336
01:49:25,040 --> 01:49:35,040
So when I get the exception here I'll also print out that something bad happened.

1337
01:49:35,040 --> 01:49:41,040
So retrying.

1338
01:49:41,040 --> 01:49:49,040
I guess we can be talkative and say funk name.

1339
01:49:49,040 --> 01:49:57,040
Because of E or something like this.

1340
01:49:57,040 --> 01:50:04,040
So now if I run this one.

1341
01:50:04,040 --> 01:50:14,040
And then I'll just do, no this is easier.

1342
01:50:14,040 --> 01:50:18,040
So now I redefine my only roll highs.

1343
01:50:18,040 --> 01:50:31,040
And then if I run this you can see now that we see some traces of it actually re-rolling the lower things.

1344
01:50:31,040 --> 01:50:40,040
Now of course this is a completely silly example because I could just have my random number generator give me five and six directly.

1345
01:50:40,040 --> 01:50:45,040
So just to show you an example where something like this might be useful.

1346
01:50:45,040 --> 01:50:54,040
And I think just to kind of be a little bit nice to the system I'll also add in a small delay.

1347
01:50:54,040 --> 01:51:07,040
So we can do something like time sleep say for a tenth of a second or something.

1348
01:51:07,040 --> 01:51:10,040
So if we use this.

1349
01:51:10,040 --> 01:51:16,040
And then let's see.

1350
01:51:16,040 --> 01:51:22,040
I'll do the only roll highs.

1351
01:51:22,040 --> 01:51:26,040
So now you can see it just takes a little bit of time in there.

1352
01:51:26,040 --> 01:51:33,040
So now this is something that we could for instance use to poll for resources maybe that we know are coming.

1353
01:51:33,040 --> 01:51:37,040
But they may not still be there or things like this.

1354
01:51:37,040 --> 01:51:43,040
So to do a small example of that.

1355
01:51:43,040 --> 01:51:45,040
Yes please.

1356
01:51:45,040 --> 01:52:03,040
I think the second one is running wrapper again.

1357
01:52:03,040 --> 01:52:12,040
Okay so the example Martin is showing here is that he essentially calls things recursively I guess.

1358
01:52:12,040 --> 01:52:17,040
So instead of doing the while true loop.

1359
01:52:17,040 --> 01:52:23,040
So instead of using a while true loop here it just calls the wrapper itself in the except block.

1360
01:52:23,040 --> 01:52:28,040
And that also works except that I guess Python has this recursion limit.

1361
01:52:28,040 --> 01:52:33,040
So I guess it will fail after 3000 attempts or something like this.

1362
01:52:33,040 --> 01:52:40,040
But yeah in general it's possible I guess in Python again function calls takes a little bit longer.

1363
01:52:40,040 --> 01:52:45,040
So doing a while loop is probably better but it definitely works.

1364
01:52:45,040 --> 01:52:52,040
Okay then the example I want to move into was to try to use this for some kind of system polling.

1365
01:52:52,040 --> 01:52:59,040
Just to see a slightly nicer use of this retry thing.

1366
01:52:59,040 --> 01:53:01,040
So let me see.

1367
01:53:01,040 --> 01:53:07,040
I'll use an example where I'm just trying to get the file from a disk.

1368
01:53:07,040 --> 01:53:13,040
So I'll do a path lib operation.

1369
01:53:13,040 --> 01:53:18,040
Let me see then I can retry.

1370
01:53:18,040 --> 01:53:21,040
Something like.

1371
01:53:21,040 --> 01:53:24,040
Well let's say.

1372
01:53:24,040 --> 01:53:26,040
Well let's call it process file.

1373
01:53:26,040 --> 01:53:29,040
It sounds like we're doing something interesting.

1374
01:53:29,040 --> 01:53:31,040
So we're getting a path.

1375
01:53:31,040 --> 01:53:36,040
And then let's just print out the content of this file.

1376
01:53:36,040 --> 01:53:42,040
So I'll do something like path read text.

1377
01:53:42,040 --> 01:53:51,040
And now I could then do something like process file.

1378
01:53:51,040 --> 01:53:53,040
And then I'll throw in a path there.

1379
01:53:53,040 --> 01:53:56,040
So path lib path.

1380
01:53:56,040 --> 01:54:01,040
And I'll give it the PyCon text file.

1381
01:54:01,040 --> 01:54:03,040
Now this file doesn't exist right.

1382
01:54:03,040 --> 01:54:09,040
So it just tells me here that I'm trying to read this file but I can't find it.

1383
01:54:09,040 --> 01:54:11,040
What I can do now.

1384
01:54:11,040 --> 01:54:14,040
Let's see if we're able to do this.

1385
01:54:14,040 --> 01:54:19,040
I'll do this in the black so we kind of see the background there.

1386
01:54:19,040 --> 01:54:23,040
And I think.

1387
01:54:23,040 --> 01:54:26,040
I think this is the retry I made.

1388
01:54:26,040 --> 01:54:29,040
So let's see if we.

1389
01:54:29,040 --> 01:54:30,040
Yeah.

1390
01:54:30,040 --> 01:54:34,040
So I'll add some text just into a file here.

1391
01:54:34,040 --> 01:54:39,040
Hi everyone.

1392
01:54:39,040 --> 01:54:45,040
PyCon.

1393
01:54:45,040 --> 01:54:46,040
Okay.

1394
01:54:46,040 --> 01:54:47,040
So this is just on Linux.

1395
01:54:47,040 --> 01:54:51,040
I'm just creating a text file that I just for now called text.

1396
01:54:51,040 --> 01:54:53,040
And it has this content.

1397
01:54:53,040 --> 01:54:57,040
So now if I change the name of this file into PyCon.text.

1398
01:54:57,040 --> 01:55:04,040
Then the process that's kind of running in the white screen should be able to pick that up when it becomes available.

1399
01:55:04,040 --> 01:55:06,040
So let's see.

1400
01:55:06,040 --> 01:55:10,040
So rename text into PyCon.text.

1401
01:55:10,040 --> 01:55:12,040
And hopefully I'm in the right place.

1402
01:55:12,040 --> 01:55:14,040
There we go.

1403
01:55:14,040 --> 01:55:15,040
Yeah.

1404
01:55:15,040 --> 01:55:23,040
So this is kind of one way to kind of you can kind of poll for resources that ideally you know are coming.

1405
01:55:23,040 --> 01:55:29,040
And this could be then on a local directory or out on the web or stuff like this.

1406
01:55:29,040 --> 01:55:38,040
But when doing this it's nice to have these leaps in between so you're not completely overpowering your system.

1407
01:55:38,040 --> 01:55:49,040
I guess a similar thing we could try is this becomes kind of somewhat too simple maybe validation.

1408
01:55:49,040 --> 01:55:56,040
But I could have some function where I'm trying to get some information from the user.

1409
01:55:56,040 --> 01:56:02,040
So say that I just want to read say a number, age or something like this.

1410
01:56:02,040 --> 01:56:10,040
And then my or actually before doing this let me actually do this example without the okay.

1411
01:56:10,040 --> 01:56:12,040
So I'll do get age.

1412
01:56:12,040 --> 01:56:20,040
And I'll say that this just returns int input.

1413
01:56:20,040 --> 01:56:24,040
How old are you?

1414
01:56:24,040 --> 01:56:27,040
Something like this.

1415
01:56:27,040 --> 01:56:32,040
So now if I do this, so I guess PyCon is 20 years, right?

1416
01:56:32,040 --> 01:56:35,040
So we can say 20 and it returns 20.

1417
01:56:35,040 --> 01:56:45,040
But if we do something like 20, you can see here that I get an error because I'm doing this int conversion up there.

1418
01:56:45,040 --> 01:56:50,040
I'm converting this to a number because I want to use the number.

1419
01:56:50,040 --> 01:57:01,040
So one way to kind of avoid this is that I can define the get age with the retry.

1420
01:57:01,040 --> 01:57:02,040
Like this.

1421
01:57:02,040 --> 01:57:11,040
And now if I do get age and I claim to be 20, it says that okay, I'm retrying get age because I got this bad thing there.

1422
01:57:11,040 --> 01:57:16,040
So now I'll behave properly.

1423
01:57:16,040 --> 01:57:21,040
So there are some uses at least where you can play with this.

1424
01:57:21,040 --> 01:57:22,040
Okay.

1425
01:57:22,040 --> 01:57:24,040
And now for the fun part.

1426
01:57:24,040 --> 01:57:25,040
First.

1427
01:57:25,040 --> 01:57:30,040
Perfect.

1428
01:57:30,040 --> 01:57:34,040
You were five seconds ahead of me.

1429
01:57:34,040 --> 01:57:36,040
Perfect.

1430
01:57:36,040 --> 01:57:45,040
Yeah.

1431
01:57:45,040 --> 01:57:47,040
The pathlib?

1432
01:57:47,040 --> 01:57:48,040
Yeah.

1433
01:57:48,040 --> 01:57:52,040
So did we use pathlib?

1434
01:57:52,040 --> 01:57:55,040
So I imported pathlib and did I use it?

1435
01:57:55,040 --> 01:57:59,040
So I very briefly used it here.

1436
01:57:59,040 --> 01:58:02,040
So here I passed in .path.

1437
01:58:02,040 --> 01:58:06,040
And then when I define this process file function, let's see.

1438
01:58:06,040 --> 01:58:11,040
Let's just look at it here.

1439
01:58:11,040 --> 01:58:19,040
So there, this read text method that I use is a pathlib path method.

1440
01:58:19,040 --> 01:58:22,040
Okay.

1441
01:58:22,040 --> 01:58:25,040
And then yeah, for the fun part.

1442
01:58:25,040 --> 01:58:29,040
Sometimes we want to add parameters to our decorators.

1443
01:58:29,040 --> 01:58:37,040
It's also not the functions we're decorating because we may want to have some different behaviors.

1444
01:58:37,040 --> 01:58:41,040
So let's see.

1445
01:58:41,040 --> 01:58:45,040
I'm.

1446
01:58:45,040 --> 01:58:47,040
I have two versions of this.

1447
01:58:47,040 --> 01:58:52,040
Let's actually just jump directly to the one that Glenn wants to solve.

1448
01:58:52,040 --> 01:58:59,040
So we want to adapt retry so that it only tries a maximum number of times.

1449
01:58:59,040 --> 01:59:14,040
So then if we do apply this on our only roll highs function, then we could get five, six, or we could actually get the error if we don't get the number within the max number of retries.

1450
01:59:14,040 --> 01:59:26,040
This exercise, I'll give you a few minutes to ponder it, but there's I guess a few things I have told you, but I haven't really told you in how to actually make this work.

1451
01:59:26,040 --> 01:59:30,040
But think back to what we did early with the function factories and those kind of things.

1452
01:59:30,040 --> 01:59:35,040
Because what we really need to use here is that this retry becomes a decorator factory.

1453
01:59:35,040 --> 01:59:38,040
So something that returns decorators for us.

1454
01:59:38,040 --> 01:59:44,040
So for each parameter, essentially a max retry will have a different decorator.

1455
01:59:44,040 --> 01:59:48,040
This kind of this ends up being.

1456
01:59:48,040 --> 01:59:53,040
So yeah, try it out and then look at it together afterwards.

1457
01:59:53,040 --> 01:59:54,040
Yes.

1458
01:59:54,040 --> 01:59:55,040
So how's it going?

1459
01:59:55,040 --> 01:59:58,040
This one is definitely the hardest exercise so far.

1460
01:59:58,040 --> 02:00:02,040
So.

1461
02:00:02,040 --> 02:00:12,040
Let's have a look at see what we can do with this and we're kind of yeah, there's sort of like a new idea that we haven't really talked about.

1462
02:00:12,040 --> 02:00:17,040
It's kind of was just mentioned.

1463
02:00:17,040 --> 02:00:24,040
So let me find my editor.

1464
02:00:24,040 --> 02:00:28,040
So essentially what we what we kind of know how to do now is this.

1465
02:00:28,040 --> 02:00:39,040
OK, we can run this for everything, but I want to add in some kind of parameters somewhere that I can use to kind of say I only want to run this and times or something like this.

1466
02:00:39,040 --> 02:00:42,040
I have maximum number of retries.

1467
02:00:42,040 --> 02:00:44,040
And.

1468
02:00:44,040 --> 02:00:50,040
Let's see, so that means that I want to be able to send a parameter to retry itself.

1469
02:00:50,040 --> 02:00:56,040
So somehow it should say Max entries there, right?

1470
02:00:56,040 --> 02:00:59,040
My three tries. Thank you.

1471
02:00:59,040 --> 02:01:04,040
Retrace that's how I spell it.

1472
02:01:04,040 --> 02:01:13,040
So that's kind of what I know I want this to look at, and that means that when I run it or when I use it, I should be able to do.

1473
02:01:13,040 --> 02:01:18,040
Max retries.

1474
02:01:18,040 --> 02:01:26,040
Equals three or something like this and then we'll have our function beneath here.

1475
02:01:26,040 --> 02:01:29,040
But.

1476
02:01:29,040 --> 02:01:35,040
How does this then if we look at so what we kind of.

1477
02:01:35,040 --> 02:01:41,040
Said so far is that typically when we have a decorator, it should look like.

1478
02:01:41,040 --> 02:01:45,040
This so we have fun tools.

1479
02:01:45,040 --> 02:01:49,040
The traps.

1480
02:01:49,040 --> 02:01:58,040
Func and then I'll have my rapper thing here, so this is me just kind of filling out the template that we kind of found so far.

1481
02:01:58,040 --> 02:02:03,040
And do something and return.

1482
02:02:03,040 --> 02:02:05,040
Rapper.

1483
02:02:05,040 --> 02:02:11,040
So now I want to do this, but I also want to do that, so I kind of need to put those together somehow.

1484
02:02:11,040 --> 02:02:22,040
And what I said was that this new retry decorator here becomes like a decorator factory, which is similar to what we did with these function factories in the beginning.

1485
02:02:22,040 --> 02:02:25,040
So if you remember.

1486
02:02:25,040 --> 02:02:33,040
All the way up here we kind of had this prefix factory that dynamically created a new function for us or reverse factory, which kind of did the same thing.

1487
02:02:33,040 --> 02:02:38,040
So that's kind of the idea that will use here as well.

1488
02:02:38,040 --> 02:02:43,040
And what that means is, let's see, where are we here we are.

1489
02:02:43,040 --> 02:02:46,040
That I still want this to be.

1490
02:02:46,040 --> 02:02:53,040
Decorator, but this is actually the thing that will be dynamically created, so this retry that I have there.

1491
02:02:53,040 --> 02:03:00,040
Will be the retry decorator, so I'll just rename it and call it decorator like this.

1492
02:03:00,040 --> 02:03:06,040
And this will be inner and inner function thing, so it will be part of this retry.

1493
02:03:06,040 --> 02:03:08,040
And then.

1494
02:03:08,040 --> 02:03:14,040
At the very end here, I'll actually then do a return decorator.

1495
02:03:14,040 --> 02:03:24,040
So this is definitely when our brains get somewhat overloaded and things like this, because now I not only have an inner function, but I have an inner inner function.

1496
02:03:24,040 --> 02:03:28,040
So kind of keeping track of this is not trivial, right?

1497
02:03:28,040 --> 02:03:31,040
But what this means.

1498
02:03:31,040 --> 02:03:35,040
Is that where we earlier just had retry like this.

1499
02:03:35,040 --> 02:03:37,040
Now this full expression.

1500
02:03:37,040 --> 02:03:39,040
Retry max retries.

1501
02:03:39,040 --> 02:03:41,040
Is what.

1502
02:03:41,040 --> 02:03:46,040
Let's see, that returns the decorator func and that decorator func returns the wrapper.

1503
02:03:46,040 --> 02:03:50,040
So we're kind of back to where we started.

1504
02:03:50,040 --> 02:04:05,040
So if we want to have decorators with parameters, then typically what we'll do is that will kind of push in a template and have this factory outside of it.

1505
02:04:05,040 --> 02:04:18,040
OK, so when we have this setup ready, then actually implementing this is very similar to what we did earlier, except for now, instead of having this while true loop.

1506
02:04:18,040 --> 02:04:24,040
I can just do for say I in range.

1507
02:04:24,040 --> 02:04:28,040
Max retries.

1508
02:04:28,040 --> 02:04:34,040
And then I realize I'm never going to use this I, so I just call it underscore instead.

1509
02:04:34,040 --> 02:04:36,040
And then I'll try to return.

1510
02:04:36,040 --> 02:04:39,040
So this is the same code that we had earlier.

1511
02:04:39,040 --> 02:04:43,040
Try to return func.

1512
02:04:43,040 --> 02:04:46,040
And if that fails.

1513
02:04:46,040 --> 02:04:50,040
I'll print that it failed.

1514
02:04:50,040 --> 02:04:54,040
Let's see what was the text we used retrying.

1515
02:04:54,040 --> 02:04:57,040
Retrying.

1516
02:04:57,040 --> 02:05:01,040
Func name.

1517
02:05:01,040 --> 02:05:09,040
And then let's throw in the error message there as well.

1518
02:05:09,040 --> 02:05:13,040
So then I have exception.

1519
02:05:13,040 --> 02:05:17,040
And let's see.

1520
02:05:17,040 --> 02:05:20,040
Yeah, this is close to something that works at least.

1521
02:05:20,040 --> 02:05:26,040
So let's try it out.

1522
02:05:26,040 --> 02:05:34,040
So if we now copy this.

1523
02:05:34,040 --> 02:05:38,040
And then I can use retry.

1524
02:05:38,040 --> 02:05:47,040
But I'll only do OK, let's max two of them, for instance, and then we'll do the only roll highs.

1525
02:05:47,040 --> 02:05:51,040
And let's see that was number.

1526
02:05:51,040 --> 02:05:57,040
And if that number is small, then we'll raise the value error.

1527
02:05:57,040 --> 02:06:02,040
Otherwise we'll return the number.

1528
02:06:02,040 --> 02:06:04,040
Like this.

1529
02:06:04,040 --> 02:06:11,040
So now I have this function that rolls the dice but raises an error for smaller numbers.

1530
02:06:11,040 --> 02:06:13,040
But now we say that only when we retry this twice.

1531
02:06:13,040 --> 02:06:20,040
So let's see what happens.

1532
02:06:20,040 --> 02:06:29,040
Yeah, so you could see that the first three times I ran it, it tried twice because I won one and three, four.

1533
02:06:29,040 --> 02:06:34,040
One challenge here is that it doesn't actually raise the error.

1534
02:06:34,040 --> 02:06:41,040
The error is kind of eaten up, which I guess may or may not be a good thing.

1535
02:06:41,040 --> 02:06:49,040
So we could potentially just change our function so that the last time we call it, I guess, we don't protect the error.

1536
02:06:49,040 --> 02:06:55,040
So I could do something like, OK, I'll do this max retry minus one there.

1537
02:06:55,040 --> 02:07:03,040
And then I'll just add in a, at the end there, I'll return.

1538
02:07:03,040 --> 02:07:08,040
So my last retry, I don't protect it with the try block.

1539
02:07:08,040 --> 02:07:16,040
So then if it fails that last time, then we see the error itself as well.

1540
02:07:16,040 --> 02:07:21,040
So just to demo that.

1541
02:07:21,040 --> 02:07:27,040
Yeah, since maybe that error is nice to get, I guess.

1542
02:07:27,040 --> 02:07:32,040
So let's see now if we only roll highs.

1543
02:07:32,040 --> 02:07:35,040
There we got the five in the second roll, six.

1544
02:07:35,040 --> 02:07:40,040
And there you see it. Now I get the error after retrying a few times.

1545
02:07:40,040 --> 02:07:43,040
So that may or may not be a good thing, I guess.

1546
02:07:43,040 --> 02:07:48,040
The previous example just returned none at the end.

1547
02:07:48,040 --> 02:08:01,040
Yeah.

1548
02:08:01,040 --> 02:08:12,040
Right. So can we do something like an else after the for loop to get to the same thing potentially?

1549
02:08:12,040 --> 02:08:15,040
So here I have my for loop.

1550
02:08:15,040 --> 02:08:24,040
So the else statement, I don't know if everyone's familiar with else in for loops, but it's possible to do an else here.

1551
02:08:24,040 --> 02:08:27,040
So kind of lining up with the for.

1552
02:08:27,040 --> 02:08:35,040
And that else loop, let's see, that kicks in if you go through the loop without breaking out of it.

1553
02:08:35,040 --> 02:08:40,040
Since we're now just returning from there, I guess, yeah, let's see.

1554
02:08:40,040 --> 02:08:53,040
So if we, instead of returning this, yeah, so let me actually copy this so I don't mess up the previous example.

1555
02:08:53,040 --> 02:08:56,040
Let's see. So this one didn't have an else.

1556
02:08:56,040 --> 02:09:07,040
Yeah, so if we have the else there and then we could just say print.

1557
02:09:07,040 --> 02:09:09,040
Next.

1558
02:09:09,040 --> 02:09:12,040
Retries.

1559
02:09:12,040 --> 02:09:14,040
Retries.

1560
02:09:14,040 --> 02:09:19,040
Max retries done or something like this.

1561
02:09:19,040 --> 02:09:25,040
And then we go back there.

1562
02:09:25,040 --> 02:09:27,040
This should look nice as well, right?

1563
02:09:27,040 --> 02:09:35,040
And I guess technically we probably don't even need the else there since we're returning and not breaking.

1564
02:09:35,040 --> 02:09:37,040
So that would look like this.

1565
02:09:37,040 --> 02:09:43,040
And then let's throw in this one.

1566
02:09:43,040 --> 02:09:46,040
So are we able to break it? There we go.

1567
02:09:46,040 --> 02:09:54,040
I forgot my f string.

1568
02:09:54,040 --> 02:10:02,040
So but yeah, this would be another alternative of kind of alerting someone that we're done.

1569
02:10:02,040 --> 02:10:04,040
Cool.

1570
02:10:04,040 --> 02:10:08,040
Yeah, so this is then the principle, essentially.

1571
02:10:08,040 --> 02:10:18,040
If you want to have a decorator that takes an argument, then essentially just add another layer of stuff on top of it, which then becomes this decorator factory.

1572
02:10:18,040 --> 02:10:23,040
And now I guess I can show you.

1573
02:10:23,040 --> 02:10:34,040
I claim that, which was it, functools for apps, that this one wasn't, it was a bit too technical, but here you can see that this is actually a decorator factory.

1574
02:10:34,040 --> 02:10:41,040
And we see that it takes an argument, right? It takes the func and so on.

1575
02:10:41,040 --> 02:10:49,040
OK, we're running close to the end, so we have like 17 minutes left.

1576
02:10:49,040 --> 02:10:57,040
So I think for the last exercise we'll do.

1577
02:10:57,040 --> 02:11:05,040
Let's see, we'll, I know, let's maybe just do this one.

1578
02:11:05,040 --> 02:11:10,040
So can we make retry have state, essentially?

1579
02:11:10,040 --> 02:11:17,040
So instead of just saying for each function call, it can only do three of these.

1580
02:11:17,040 --> 02:11:25,040
Can we, and in this case, I guess, max retries may not really make sense, but can we make it just count how many times it has retried across all kind of different function calls?

1581
02:11:25,040 --> 02:11:31,040
So that would mean that somehow we need to keep state.

1582
02:11:31,040 --> 02:11:36,040
And there are kind of a few ways to do this.

1583
02:11:36,040 --> 02:11:41,040
So one would be to have some kind of global variable that kind of does it.

1584
02:11:41,040 --> 02:11:44,040
That's typically not a great idea.

1585
02:11:44,040 --> 02:11:51,040
A better idea would be to use some attributes on your function where you just store that state.

1586
02:11:51,040 --> 02:11:55,040
And then the other third example would be to actually create a class.

1587
02:11:55,040 --> 02:12:03,040
And I'll definitely, I don't know if I have time to demonstrate this, but I'll definitely leave some notes about how to use classes for decorators.

1588
02:12:03,040 --> 02:12:09,040
Because so far I've claimed that the decorator is a function that returns, well, takes in a function, returns a function.

1589
02:12:09,040 --> 02:12:15,040
But it's really enough that it's a callable and you can have class instances that you can kind of call.

1590
02:12:15,040 --> 02:12:19,040
So you can use classes as decorators as well.

1591
02:12:19,040 --> 02:12:25,040
So in some of the notes I'll share links with you afterwards. You can see how to do that.

1592
02:12:25,040 --> 02:12:37,040
But now, yeah, for sort of like the final example, can we just put a counter on the retries that will then globally count how many retries we made?

1593
02:12:37,040 --> 02:12:46,040
So we can adapt the code that we already wrote. So it's just a few more lines, I guess.

1594
02:12:46,040 --> 02:12:54,040
So I'll leave this since we're almost out of time, but I'll leave you with two, three minutes to play with it and then we can look at that.

1595
02:12:54,040 --> 02:13:02,040
Okay, I guess then to finish on time, I'll just start working on this.

1596
02:13:02,040 --> 02:13:10,040
So I'll show you the solution where we put this as an attribute on our decorator.

1597
02:13:10,040 --> 02:13:20,040
And let's have a look at this. So we have our retry.

1598
02:13:20,040 --> 02:13:26,040
So we won't change this function a lot, let's see.

1599
02:13:26,040 --> 02:13:37,040
But what we can do, which maybe looks a little bit weird, is that it's possible to add attributes.

1600
02:13:37,040 --> 02:13:46,040
And we have actually seen this briefly, if you remember, this functool wraps, adds this thunder wrapped attribute.

1601
02:13:46,040 --> 02:13:56,040
So for instance, let's see, if we had the only roll highs, we should be able to do, to look at this, right?

1602
02:13:56,040 --> 02:14:01,040
So somewhere this attribute has been added.

1603
02:14:01,040 --> 02:14:14,040
So we can do something similar here by, after defining the wrapper function, we can say something like number of retries, retruse, is zero.

1604
02:14:14,040 --> 02:14:18,040
So now I define an attribute on this wrapper function.

1605
02:14:18,040 --> 02:14:27,040
And for now, I'm not using it, so this is not, we're not done with implementation, but let's just have a look at what happens.

1606
02:14:27,040 --> 02:14:38,040
So I'll move this over to my REPL, and then we'll implement the only roll highs again.

1607
02:14:38,040 --> 02:14:48,040
And now if I look at only roll highs dot numretries.

1608
02:14:48,040 --> 02:14:55,040
Have I messed up something? Sorry?

1609
02:14:55,040 --> 02:15:04,040
Max retries.

1610
02:15:04,040 --> 02:15:08,040
Ooh, I copied the wrong thing.

1611
02:15:08,040 --> 02:15:14,040
Impressive. Thank you. Okay, let's try again.

1612
02:15:14,040 --> 02:15:17,040
Now it's there.

1613
02:15:17,040 --> 02:15:20,040
And then let's see.

1614
02:15:20,040 --> 02:15:24,040
Then I have this and this. Yes. Okay, there it is.

1615
02:15:24,040 --> 02:15:34,040
So this retry decorator, because of this line up there, adds the numretries attribute.

1616
02:15:34,040 --> 02:15:41,040
So that means that we're kind of storing this state on the function itself, instead of kind of polluting the space.

1617
02:15:41,040 --> 02:15:45,040
So then our next task done is to actually use this.

1618
02:15:45,040 --> 02:15:48,040
And let's see, what did I actually want to do with this?

1619
02:15:48,040 --> 02:15:58,040
Well, I could now, let's be slightly advanced then and say that I want to do max retries, but then subtract the number of retries I've already done.

1620
02:15:58,040 --> 02:16:03,040
So I can do numretries there.

1621
02:16:03,040 --> 02:16:14,040
And then I need to actually count these things, so then I'll say wrapper dot numretries plus equals one there.

1622
02:16:14,040 --> 02:16:22,040
And then retry func name.

1623
02:16:22,040 --> 02:16:27,040
Yeah, I'll just throw it in here at the beginning so that we can see it.

1624
02:16:27,040 --> 02:16:33,040
Wrapper numretries.

1625
02:16:33,040 --> 02:16:38,040
Yeah, so this becomes a little bit of a long line, so let's see.

1626
02:16:38,040 --> 02:16:45,040
Okay, I'll leave it like that for now.

1627
02:16:45,040 --> 02:16:57,040
So now if we copy this, so now there you can see I added, let's see, in the for loop, now I'm just doing max retries minus the number I've already done.

1628
02:16:57,040 --> 02:17:05,040
And then in the exception, I'm printing out this number and then I'm adding one, so I'm counting them.

1629
02:17:05,040 --> 02:17:20,040
So then if we do the decorating, and now let's add this number a little bit higher so we can do 10 retries.

1630
02:17:20,040 --> 02:17:26,040
Okay, and then I say I only want to roll highs.

1631
02:17:26,040 --> 02:17:34,040
And call this, and now I got a six, and there you can see it's kind of doing some of the retries.

1632
02:17:34,040 --> 02:17:40,040
I guess I should have added before printing the number, but something like this.

1633
02:17:40,040 --> 02:17:46,040
And now we can see that it has stayed, right, because it continued counting at two.

1634
02:17:46,040 --> 02:17:50,040
And if I look here, you can see that I now have done three retries.

1635
02:17:50,040 --> 02:18:00,040
And if I now do this a few more times, four, five, six, seven, eight, nine, ten, then I can see now I get the 10 retries done.

1636
02:18:00,040 --> 02:18:11,040
So we kind of have kept the state across several invocations, even without using a class.

1637
02:18:11,040 --> 02:18:18,040
Yeah, let's look at the code for this. So now we actually managed to more or less fill our screen.

1638
02:18:18,040 --> 02:18:45,040
So I guess the somewhat magical line is here where we can add in our attributes, and then I'm using that attribute a few times here and there.

1639
02:18:45,040 --> 02:18:52,040
Okay, any questions? I'm sure there probably are.

1640
02:18:52,040 --> 02:19:06,040
But if you, yeah, they don't pop up now. Feel free to stop me if you see me at the rest of the conference, or send me an email later, or something like this.

1641
02:19:06,040 --> 02:19:12,040
As I said in the very beginning, I'll put all the code on my GitHub.

1642
02:19:12,040 --> 02:19:21,040
So let's see. Let's switch this to the resources.

1643
02:19:21,040 --> 02:19:32,040
So yeah, on github.com slash g-a-y-l-e, you should be able to find these things.

1644
02:19:32,040 --> 02:19:45,040
I've given a similar course when PyCon was online, so there are some of these video courses that's also there, and then I'll add the code from this course onto there.

1645
02:19:45,040 --> 02:19:55,040
I guess I didn't say this at the beginning, but on my day job I work for RealPython, which is a web page website where you can learn a lot of different Python stuff,

1646
02:19:55,040 --> 02:20:02,040
including then we have an article about decorators that I wrote a few years ago where you'll find lots of the same material there.

1647
02:20:02,040 --> 02:20:09,040
And within the paywall, you can also find a video course that goes through a lot of the same things.

1648
02:20:09,040 --> 02:20:14,040
Then there are some other nice places online, of course.

1649
02:20:14,040 --> 02:20:25,040
If you really want to look at the technical details, you can have a look at the PEP 318, which is kind of spelling out some of the history why they wanted to do the decorators and how they work.

1650
02:20:25,040 --> 02:20:31,040
That's also, I think, the fun part there is probably reading some of the stuff that wasn't accepted.

1651
02:20:31,040 --> 02:20:38,040
And there's an awesome list for decorators. That's also on GitHub.

1652
02:20:38,040 --> 02:20:42,040
So yeah, there's still lots of things to explore.

1653
02:20:42,040 --> 02:20:46,040
But I think that kind of takes us to the end.

1654
02:20:46,040 --> 02:20:48,040
Any questions?

1655
02:20:52,040 --> 02:20:53,040
Sorry?

1656
02:20:53,040 --> 02:20:57,040
Yeah, so I'll put the exercise slides there as well. Yes, exactly.

1657
02:20:59,040 --> 02:21:09,040
And no. Well then, thank you everyone for your participation. It was really great. Thank you all of you for uploading your solutions as well.

1658
02:21:12,040 --> 02:21:19,040
Yeah, it was really nice to at least get some sense of the activity. So thank you. Thanks.

