1
00:00:00,000 --> 00:00:01,920
All right, welcome everyone.

2
00:00:02,400 --> 00:00:05,360
I'm Jeff Hale and I'm here with Pam Gerlach.

3
00:00:05,860 --> 00:00:11,460
And Pam is going to be talking about iteration toward transformation of the Python documentation.

4
00:00:11,820 --> 00:00:13,240
Let's give Pam a round of applause.

5
00:00:13,800 --> 00:00:19,260
All right, everybody.

6
00:00:19,260 --> 00:00:20,200
Thanks, Jeff.

7
00:00:20,200 --> 00:00:20,920
Really appreciate it.

8
00:00:20,920 --> 00:00:23,260
And thanks to the patients, everybody started to relax.

9
00:00:23,260 --> 00:00:26,120
All this starting at 1.45, I miscalculated.

10
00:00:26,320 --> 00:00:27,020
Sorry about that.

11
00:00:27,020 --> 00:00:29,800
But I guess we have a just-in-time presentation here.

12
00:00:30,280 --> 00:00:30,780
So, yeah.

13
00:00:30,780 --> 00:00:36,480
Today I'm going to be talking about how we're iterating to transform the Python documentation

14
00:00:36,480 --> 00:00:39,080
in order to better serve readers' needs.

15
00:00:39,080 --> 00:00:41,080
Because Python documentation has got a lot of docs.

16
00:00:41,080 --> 00:00:45,200
There are a lot of people who put a lot of effort into it, but there's a lot of things you can do to help make it more forth.

17
00:00:45,200 --> 00:00:50,840
You should make it, and essentially make it easier for readers of all different levels to be able to use that

18
00:00:50,840 --> 00:00:52,480
and do some awesome stuff with Python.

19
00:00:52,720 --> 00:00:53,680
So, let's go.

20
00:00:54,600 --> 00:00:56,360
So, first of all, about me.

21
00:00:57,320 --> 00:00:57,820
I'm Tim.

22
00:00:57,820 --> 00:01:02,440
Just as of the language summit, I was officially promoted to a Python Core Dev.

23
00:01:02,440 --> 00:01:03,560
Can't believe it.

24
00:01:04,160 --> 00:01:06,800
But, yeah, that's that.

25
00:01:06,800 --> 00:01:08,240
I'm also a tech manager.

26
00:01:08,240 --> 00:01:09,160
I'm on the docs team.

27
00:01:09,160 --> 00:01:10,440
I work on patching stuff.

28
00:01:10,440 --> 00:01:14,840
Some of the second-semester in the patching summit, if you're interested in that.

29
00:01:14,840 --> 00:01:18,520
I'm also a core dev provider, which is a scientific Python development environment.

30
00:01:18,520 --> 00:01:24,080
And I'm in team a number of other free and open source projects, like QtPy, Pyroma, Docker, and a number of others.

31
00:01:24,560 --> 00:01:27,000
And my background is actually not a programmer.

32
00:01:27,000 --> 00:01:28,480
I'm actually not a real programmer.

33
00:01:28,480 --> 00:01:29,440
I'm just probably one on the internet.

34
00:01:29,440 --> 00:01:36,880
In real life, I'm actually a grad student and a lightning researcher at University of Alabama Huntsville in Huntsville, Alabama.

35
00:01:36,880 --> 00:01:45,840
And, but I am looking to, once I graduate and get my master's, I'm looking to actually, originally I was going to go PhD,

36
00:01:45,840 --> 00:01:49,960
but decided to actually, thanks to my experience with how welcoming the open source community is,

37
00:01:49,960 --> 00:01:52,640
and particularly the Python community, all of you guys,

38
00:01:53,120 --> 00:01:56,200
I'm looking to transition into being a full-time open source developer.

39
00:01:56,200 --> 00:01:58,520
So hopefully that works out.

40
00:01:58,520 --> 00:02:01,560
And that's me with my kitty cat, one of my kitty cats.

41
00:02:01,560 --> 00:02:04,680
And I do love my kitty cats very much.

42
00:02:04,680 --> 00:02:11,160
So yeah, and now also, I'm also contributing to this presentation is,

43
00:02:11,160 --> 00:02:14,360
hopefully I can get his name right, Alain de Ofrance.

44
00:02:14,360 --> 00:02:16,560
He just taught me the correct pronunciation.

45
00:02:16,560 --> 00:02:18,840
And he's also a Python core developer.

46
00:02:18,840 --> 00:02:19,920
And he's a member of the docs team.

47
00:02:19,920 --> 00:02:21,680
He's contributed a lot as well.

48
00:02:21,720 --> 00:02:27,480
He's actually the main senior of the SQLite 3 module, which we'll talk about in a minute.

49
00:02:27,480 --> 00:02:34,680
And me and Alain actually work a lot together on helping transform that in particular,

50
00:02:34,680 --> 00:02:37,680
following the DICACS's principles and other improvements.

51
00:02:37,680 --> 00:02:41,480
And I'll go over a little bit of a case study of that later in the talk.

52
00:02:41,480 --> 00:02:46,920
He's a senior software developer at Inventos in Norway.

53
00:02:46,920 --> 00:02:50,120
So quite a bit of a geographical influence this day.

54
00:02:50,120 --> 00:02:53,480
But of course, most importantly, this is talking just for me.

55
00:02:53,480 --> 00:02:58,040
This is on behalf of the entire Python docs community who made all this stuff possible.

56
00:02:58,040 --> 00:03:01,160
And a lot of this stuff we talked about wasn't even done by either of us.

57
00:03:01,160 --> 00:03:03,720
It was done by all the great members of our community.

58
00:03:03,720 --> 00:03:09,960
In particular, of course, we all know Mariana, as well as Peter, SGO, Prachun, Ned,

59
00:03:09,960 --> 00:03:12,120
who is here today.

60
00:03:12,120 --> 00:03:12,840
Thank you.

61
00:03:12,840 --> 00:03:19,000
And then Adam Per, Daniela from DICACS, and of course, Joanna from RealPython.

62
00:03:19,080 --> 00:03:21,400
And everyone in the Python docs community is just very valuable.

63
00:03:21,400 --> 00:03:23,000
So I really want to thank them.

64
00:03:23,000 --> 00:03:24,920
Let me get rid of that audio there.

65
00:03:24,920 --> 00:03:28,520
So let's take a quick look ahead at what we're going to talk about.

66
00:03:28,520 --> 00:03:32,280
So first, I'll give you a quick look inside the docs community.

67
00:03:32,280 --> 00:03:34,280
What's it all about?

68
00:03:34,280 --> 00:03:35,640
What sort of things do we do?

69
00:03:35,640 --> 00:03:39,480
And then we can take a look back at the past year or so and go over some of the incremental

70
00:03:39,480 --> 00:03:41,720
transformations we've made to the Python documentation.

71
00:03:42,760 --> 00:03:43,880
Roll credits.

72
00:03:43,880 --> 00:03:47,800
And then we'll zoom in a little bit, take a little closer look at

73
00:03:47,800 --> 00:03:54,920
the, particularly the stuff that Alon, SGO, and I have done on the SQLX3 documentation

74
00:03:54,920 --> 00:03:58,120
that followed the DICACS principles.

75
00:03:58,120 --> 00:04:00,840
And more importantly, the kind of stuff we've learned throughout that.

76
00:04:00,840 --> 00:04:02,840
Then let's take a quick look at the features.

77
00:04:02,840 --> 00:04:06,680
They give you a sneak peek at what's next for Python docs for next year.

78
00:04:06,680 --> 00:04:10,760
And if you're interested in helping out and being part of that, I'll let you know how

79
00:04:10,760 --> 00:04:11,320
you can do that.

80
00:04:11,320 --> 00:04:12,760
So let's go.

81
00:04:12,760 --> 00:04:16,520
So first, let's take a look inside what is this whole docs community thing?

82
00:04:16,520 --> 00:04:18,200
I mean, we've had a lot of questions.

83
00:04:18,200 --> 00:04:22,680
Well, the depending on the situation is a decentralized collective of Python developers,

84
00:04:22,680 --> 00:04:27,800
contributors, and documentarians, interested in improving the quality of Python documentation.

85
00:04:27,800 --> 00:04:29,640
So that's a lot of big words.

86
00:04:29,640 --> 00:04:33,880
But in other words, we're really just a bunch of people working at Python docs, which could

87
00:04:33,880 --> 00:04:36,120
include all of you too if you want to help contribute.

88
00:04:36,120 --> 00:04:37,720
So you can definitely be a part of us.

89
00:04:37,720 --> 00:04:39,400
And so what sort of things do we do?

90
00:04:39,400 --> 00:04:44,760
Well, we collaborate together on projects large and small from DICACS to much smaller

91
00:04:44,760 --> 00:04:45,560
improvements.

92
00:04:45,560 --> 00:04:50,040
We share our tips, advice, and feedback and help each other out on things like that.

93
00:04:50,040 --> 00:04:53,880
We help onboard and mentor new contributors to the Python documentation, which we're always

94
00:04:53,880 --> 00:04:56,200
meeting new folks and we always want to get more.

95
00:04:56,200 --> 00:05:01,400
And we also discuss more larger issues of concern to Python docs.

96
00:05:01,400 --> 00:05:05,560
We build consensus on how to move forward and how to make Python docs as best as they

97
00:05:05,560 --> 00:05:06,280
can be.

98
00:05:06,280 --> 00:05:09,480
So what sort of platforms do you use for that?

99
00:05:09,480 --> 00:05:10,840
Well, where does this all happen?

100
00:05:10,840 --> 00:05:13,160
Well, ideally, we'd drive around in person.

101
00:05:13,160 --> 00:05:15,240
But of course, we're located all around the world.

102
00:05:15,240 --> 00:05:20,760
So one of the primary places, of course, is on this Python, the dev guide and other

103
00:05:20,760 --> 00:05:24,680
repos that are iffy, faster, simple requests, just like everyone else.

104
00:05:24,680 --> 00:05:28,440
And all of our resources are public and anyone can join them.

105
00:05:28,440 --> 00:05:30,840
It's all designed in a very transparent process.

106
00:05:30,840 --> 00:05:34,440
It's not some private team somewhere like making decisions behind closed doors.

107
00:05:34,440 --> 00:05:37,000
So this is our primary location where we collaborate.

108
00:05:37,000 --> 00:05:41,080
But of course, we also have the docs community website, which has some kind of meta guidance

109
00:05:41,160 --> 00:05:46,120
on the Python documentation and the repository there where we have issues that span not just

110
00:05:46,120 --> 00:05:50,120
the C Python docs or the dev guide or the PEPs, but all of them, and kind of address

111
00:05:50,120 --> 00:05:52,520
some of the larger cross-cutting issues.

112
00:05:52,520 --> 00:05:57,400
We also have the docs documentation category on the Python discourse, the discuss.python.org,

113
00:05:57,400 --> 00:05:59,320
not infused with Discord, very different thing.

114
00:06:00,520 --> 00:06:05,160
And that's where we kind of discuss with the community the source of more of our term

115
00:06:05,160 --> 00:06:08,760
history and see how should we change all this specification, how can we make the docs better

116
00:06:08,760 --> 00:06:10,200
to improve.

117
00:06:10,200 --> 00:06:14,120
And also community members will say, oh, look, we found this issue that's confusing.

118
00:06:14,120 --> 00:06:15,240
Can you help improve that?

119
00:06:15,240 --> 00:06:19,160
And we'll often help them or we'll help improve ourselves to address those things.

120
00:06:19,160 --> 00:06:25,160
So if you guys have any concerns, questions, feedback into the Python docs, if it's a broader

121
00:06:25,160 --> 00:06:28,840
kind of topic, more so than a mission, the documentation category might be the place

122
00:06:28,840 --> 00:06:29,320
for that.

123
00:06:29,320 --> 00:06:34,200
So finally, of course, we have the docs community Discord server, which is kind of for real-time

124
00:06:34,200 --> 00:06:37,640
communications, you know, quick questions, feedback, back and forth.

125
00:06:37,720 --> 00:06:41,400
And it's also public and you can find the link on our docs community site.

126
00:06:41,400 --> 00:06:43,640
So everyone is welcome to join that as well.

127
00:06:44,360 --> 00:06:45,960
Because we all can be docs materials.

128
00:06:45,960 --> 00:06:52,280
I mean, when I joined the first, oops, I accidentally hit the wrong button.

129
00:06:53,240 --> 00:06:59,880
And oh, and one thing we also have that I really have a graphic for was our monthly docs

130
00:06:59,880 --> 00:07:02,840
community meetings where we get together and kind of discuss the things we've been working

131
00:07:02,840 --> 00:07:08,680
on and we ask questions and we kind of raise ideas with the group, oh, should we do this?

132
00:07:08,680 --> 00:07:09,240
Should we do that?

133
00:07:10,120 --> 00:07:12,200
And we kind of have a real-time discussion of that.

134
00:07:12,200 --> 00:07:13,880
And again, everyone is welcome to those.

135
00:07:13,880 --> 00:07:17,880
And when I went to the first one, I had hardly been shooting anything to the C5 end docs.

136
00:07:17,880 --> 00:07:19,000
I was like a real newbie.

137
00:07:19,000 --> 00:07:23,640
But Mariana and Peter were like, oh, you know, it would be helpful to have some feedback

138
00:07:23,640 --> 00:07:24,600
from someone outside that.

139
00:07:24,600 --> 00:07:26,680
So we definitely welcome you to join that as well.

140
00:07:27,480 --> 00:07:31,560
So let's take a quick look back on the sort of things that this has also been for the past

141
00:07:31,560 --> 00:07:35,480
year, the sort of things you've been improving on the CPython documentation, the Dev Guide,

142
00:07:35,480 --> 00:07:36,600
the PEPs, and the R.

143
00:07:36,600 --> 00:07:42,440
So first, on the CPython docs, the big ticket item that I will be talking more about later

144
00:07:42,440 --> 00:07:48,040
today is the Diataxis, applying the Diataxis framework and guidelines to CPython docs,

145
00:07:48,040 --> 00:07:53,800
which is a whole bunch of different guidelines and how to ensure that the docs not only fix

146
00:07:53,800 --> 00:07:57,560
in the different categories and is organized well, easy to navigate, but also the docs

147
00:07:57,560 --> 00:08:02,040
themselves best serve readers in order to help give them the information they need to

148
00:08:02,040 --> 00:08:04,680
navigate Python and to be a better Python programmer.

149
00:08:04,680 --> 00:08:11,160
So you can see kind of here's an example of one of those cases which visits from the SQLite 3

150
00:08:11,160 --> 00:08:15,480
documentation, and I'll talk about more in detail about this a little bit later in the talk.

151
00:08:16,280 --> 00:08:22,600
And this is what Aland, Xeo, and I worked on through quite a long process, which again,

152
00:08:22,600 --> 00:08:24,120
I'll get into in just a bit.

153
00:08:24,120 --> 00:08:29,480
And of course, what you also probably noticed is a little bit of a difference where we have a new

154
00:08:29,480 --> 00:08:32,040
docs theme for the CPython documentation.

155
00:08:32,040 --> 00:08:35,480
Now it's not going to be blasting your eyes out every time you navigate to it.

156
00:08:35,480 --> 00:08:39,560
Of course, that's optional based on your system theme settings, so you can of course still have

157
00:08:39,560 --> 00:08:46,440
the light theme or the dark theme, and that was of course thanks to Hugo who put a lot of work

158
00:08:46,440 --> 00:08:47,320
into doing that.

159
00:08:47,320 --> 00:08:52,200
And that also applied to anything else using the Python docs theme, state theme as well,

160
00:08:52,200 --> 00:08:53,640
so others can benefit from that too.

161
00:08:54,120 --> 00:09:00,120
Of course, we also are exploring for especially some of the very, some of the longer functions

162
00:09:00,120 --> 00:09:03,480
and methods that have lots of parameters and can be really hard to navigate.

163
00:09:03,480 --> 00:09:05,880
Here's kind of a moderate length example.

164
00:09:05,880 --> 00:09:11,080
We've actually used this thing, the structured parameter list format in to make it not only easier

165
00:09:11,080 --> 00:09:15,080
to navigate, but also provide a lot of key information, like the data types, the defaults,

166
00:09:15,080 --> 00:09:19,720
and other things like that to make it easier to navigate in the reference unless you want to say

167
00:09:19,720 --> 00:09:20,600
okay, what does this parameter do?

168
00:09:20,600 --> 00:09:25,320
You know if you read through paragraph after paragraph to try to find the areas there,

169
00:09:25,320 --> 00:09:26,600
you can jump right to it.

170
00:09:26,600 --> 00:09:27,880
And of course, the formatting is perfect.

171
00:09:27,880 --> 00:09:28,680
We're still working on that.

172
00:09:28,680 --> 00:09:33,480
It doesn't look quite as good as we want, but we're definitely working on that as well.

173
00:09:33,480 --> 00:09:38,840
This is just a moderate example that also thanks to Adam's work, Adam Turner, who's now become,

174
00:09:38,840 --> 00:09:42,600
thanks to his work on the PEPs, has actually become a space and a docuCells maintainer,

175
00:09:42,600 --> 00:09:44,440
is one of the lead maintainers there now.

176
00:09:44,440 --> 00:09:48,040
He's actually helped contribute a lot of improvements there that help the Python docs.

177
00:09:48,040 --> 00:09:49,480
Here's just one example.

178
00:09:49,480 --> 00:09:55,000
In our search previously, you can see that previously due to some issues and things,

179
00:09:55,000 --> 00:09:57,560
it wasn't actually picking up the list built in class.

180
00:09:57,560 --> 00:10:00,040
So if people searched for list, it wouldn't show the Python list.

181
00:10:00,040 --> 00:10:03,400
It would show lots of other lists, but not the actual list in Python.

182
00:10:03,400 --> 00:10:06,920
So now you can see it shows up there and it also has a Gloucester entry that shows there.

183
00:10:06,920 --> 00:10:09,560
So you can jump right to the explanations of common terms.

184
00:10:11,560 --> 00:10:14,600
So that kind of covers some of the improvements we made in the C-Python application base.

185
00:10:14,600 --> 00:10:15,400
We launched a little stuff.

186
00:10:15,400 --> 00:10:19,160
But we've also focused a lot on the dev guide, the developer guide.

187
00:10:19,160 --> 00:10:22,120
And that's essentially what provides some meta guidance,

188
00:10:22,120 --> 00:10:24,200
on how to develop Python, how to contribute to it,

189
00:10:24,200 --> 00:10:27,320
and how to improve the documentation too.

190
00:10:28,280 --> 00:10:32,680
So we focused on improving that, making that easier and more accessible for new contributors.

191
00:10:32,680 --> 00:10:36,440
Probably the biggest thing is that Adam worked on in collaboration with the rest of us,

192
00:10:36,440 --> 00:10:37,880
is reorganizing them.

193
00:10:37,880 --> 00:10:39,800
So I unfortunately don't have the screen to show that,

194
00:10:39,800 --> 00:10:44,360
but previously the dev guide was this one long list of dozens and dozens and dozens

195
00:10:44,360 --> 00:10:47,800
of different documents, you know, all in not any particular order,

196
00:10:47,800 --> 00:10:49,640
describing all different parts of Python.

197
00:10:49,640 --> 00:10:52,360
And now you can see we've actually organized it in different categories.

198
00:10:52,360 --> 00:10:54,440
So you're getting started for new folks.

199
00:10:54,440 --> 00:10:56,040
We have documentation for documentarians.

200
00:10:56,040 --> 00:11:00,360
We have information for criators in its own category, information for core devs.

201
00:11:00,360 --> 00:11:05,960
And we've also tried to reorganize the different types of documents,

202
00:11:05,960 --> 00:11:08,600
some of the longer documents and the smaller ones, so they're easier to navigate.

203
00:11:09,160 --> 00:11:12,600
And you can kind of see the example, kind of see the result of that here.

204
00:11:13,560 --> 00:11:16,280
And then we've also worked on some pretty good things.

205
00:11:16,280 --> 00:11:20,680
Peter and Hugo in particular worked on this new Python release cycle chart.

206
00:11:20,680 --> 00:11:25,000
That kind of gives a graphical representation of kind of the life cycle of each Python release

207
00:11:25,000 --> 00:11:25,880
and what the status is.

208
00:11:25,880 --> 00:11:28,680
So you can get at a glance, see what Python versions are supported,

209
00:11:28,680 --> 00:11:31,240
which ones are still in development, and which ones are on the life.

210
00:11:31,240 --> 00:11:37,320
So that also integrates with several APIs that ingest these data, thanks to SVO's work,

211
00:11:37,320 --> 00:11:40,520
which makes it easier to programmatically integrate with other services,

212
00:11:40,520 --> 00:11:44,280
like in Validate and Audit software to make sure that your Python is up to date.

213
00:11:45,160 --> 00:11:50,600
So and then we've also, thanks to SVO's work as well, we've also had a new special face role

214
00:11:50,600 --> 00:11:53,240
that makes quick links to the C Python source code.

215
00:11:53,240 --> 00:11:57,000
So you can easily link directly to a file that shows, if you use the actual source code,

216
00:11:57,000 --> 00:12:00,040
when we're explaining something in the docs, in the dev guide, you know,

217
00:12:00,040 --> 00:12:05,000
here's how this was implemented, we can link right to the file with just C Python and the name of the file.

218
00:12:05,000 --> 00:12:08,280
We don't have to type in a long URL and maybe it breaks or something changes.

219
00:12:08,280 --> 00:12:09,640
And you can see kind of the result of that there.

220
00:12:09,640 --> 00:12:10,920
Also do with the right formatting.

221
00:12:10,920 --> 00:12:13,000
So that's been an improvement.

222
00:12:13,000 --> 00:12:16,440
We also have a quick reference for, now here's the stuff for folks who are working in the docs.

223
00:12:16,440 --> 00:12:22,120
You know, since restructured text can be really hard to navigate, really hard to remember where all the syntax for this and for that,

224
00:12:22,120 --> 00:12:27,080
well, at CIO also we're kind of collaborating with the rest of us to work out a kind of quick reference.

225
00:12:27,080 --> 00:12:32,600
So, you know, sometimes even experienced folks can forget, oh, how do I format this in this particular level?

226
00:12:32,600 --> 00:12:37,720
Here we have a quick reference that kind of shows examples and the syntax for each of the common kind of constructs

227
00:12:37,880 --> 00:12:41,880
that you're likely to use and the links to where in the docs can get more information.

228
00:12:41,880 --> 00:12:44,840
Now you don't have to go forward and Google and try to find how to do this stuff.

229
00:12:44,840 --> 00:12:46,600
It's all right there on a quick little table.

230
00:12:46,600 --> 00:12:53,800
So, one thing I worked on is I improved the kind of guide for how to build the docs,

231
00:12:53,800 --> 00:12:57,800
how to get started with building and setting up your development environment for the Python docs.

232
00:12:57,800 --> 00:13:00,520
And I overhauled that.

233
00:13:00,520 --> 00:13:06,200
Previously it was kind of a long paragraph of description and now it's kind of a step by step,

234
00:13:06,200 --> 00:13:10,120
here's this command, this command, this command, and then they also are much clearer for what you do on Windows

235
00:13:10,120 --> 00:13:12,760
versus what you do on other platforms and your other options there.

236
00:13:12,760 --> 00:13:15,800
So we've really over, we've really revamped that a lot.

237
00:13:15,800 --> 00:13:25,000
So finally, now one of the biggest things that Adam Turner worked on was basically completely overhauling how we're doing the tests.

238
00:13:25,000 --> 00:13:28,120
So previously the Python tests, which are Python enhancement proposals,

239
00:13:28,120 --> 00:13:33,400
which are kind of the specifications and the case proposals for the Python language, for caching and for other things,

240
00:13:33,960 --> 00:13:43,400
previously there was a custom built, like huge build slip that would build from REST files into HTML

241
00:13:43,400 --> 00:13:45,320
and was incredibly hacky and different.

242
00:13:45,320 --> 00:13:50,680
It was literally unchanged for a lot of it from 20 years ago, which was a really cool time machine,

243
00:13:50,680 --> 00:13:52,440
but not so maintainable nowadays.

244
00:13:52,440 --> 00:13:57,320
And also involved parts of manually copying things to the Python.org website.

245
00:13:57,320 --> 00:14:01,160
There was lots of different parts of it and it was really hard to maintain, hard for people to build,

246
00:14:01,160 --> 00:14:03,000
hard for people to work with.

247
00:14:03,000 --> 00:14:07,960
So we replaced all that with a custom syncs extension that builds it with standard syncs

248
00:14:07,960 --> 00:14:10,120
and it can also use all the modern syncs contrast.

249
00:14:10,120 --> 00:14:12,760
This brings us to you could only use the basic RBSC stuff.

250
00:14:12,760 --> 00:14:16,760
Now you can use all the modern syncs kind of ways of doing things.

251
00:14:16,760 --> 00:14:20,920
So you kind of see, and we also have a brand new theme, which has a dark theme, light theme,

252
00:14:20,920 --> 00:14:24,360
and it's shorter and more concise, easier to read.

253
00:14:24,360 --> 00:14:26,120
I'm going to see an example of that there.

254
00:14:26,120 --> 00:14:28,200
We also made some minor improvements, smaller improvements.

255
00:14:28,280 --> 00:14:31,000
We now have indices for each type of text.

256
00:14:31,000 --> 00:14:34,440
Release text, patching text, typing text, governance text.

257
00:14:34,440 --> 00:14:37,880
You can kind of scroll through the whole list trying to find the type you're looking for.

258
00:14:37,880 --> 00:14:42,600
You click this on the index link and boom, you've got just the text that you're interested in.

259
00:14:42,600 --> 00:14:46,760
And we also have a lot of new metadata and links in the descriptions.

260
00:14:46,760 --> 00:14:48,600
Now you can click the link to go right to the thread.

261
00:14:48,600 --> 00:14:52,840
It'll tell you what type, it'll tell you the date, it'll tell you the resolution links,

262
00:14:52,840 --> 00:14:55,880
and sort of long dirty URLs that may or may not be there.

263
00:14:56,280 --> 00:14:59,800
I always find it really hard to navigate to where is the latest discussion in this PEP?

264
00:14:59,800 --> 00:15:01,240
What's the status? What is it approved?

265
00:15:02,840 --> 00:15:05,480
And what are these status and type? What does all this stuff mean?

266
00:15:05,480 --> 00:15:09,480
Well now you can hover over that or you can click the link and it will tell you exactly,

267
00:15:09,480 --> 00:15:11,240
it'll take you right to that information.

268
00:15:11,240 --> 00:15:13,960
So it's also much shorter in case of less space as well.

269
00:15:15,320 --> 00:15:16,680
And we also have a new thanks to Hugo.

270
00:15:16,680 --> 00:15:22,040
We have a new PEP API, which is basically a base on file that you can read in easily.

271
00:15:22,600 --> 00:15:25,880
That kind of gives all the basic information about PEPs.

272
00:15:25,880 --> 00:15:31,400
You can say, oh I want just the rejected PEPs or the accepted PEPs for Python 3.12

273
00:15:31,400 --> 00:15:32,680
and it'll get you all those PEPs.

274
00:15:32,680 --> 00:15:40,440
Or the packaging PEPs for say by say, by June or whoever you want.

275
00:15:40,440 --> 00:15:42,840
And it will get you all those PEPs or between certain dates.

276
00:15:42,840 --> 00:15:44,440
You can do all that with the PEP API.

277
00:15:44,440 --> 00:15:48,440
Hugo will actually use that and build something called Pepatron that you can

278
00:15:48,520 --> 00:15:53,000
just mail on interface that you can do PEP number and it'll take you right to that PEP.

279
00:15:53,000 --> 00:15:55,160
Or say you can fuzzy search PEPs.

280
00:15:55,160 --> 00:15:56,600
You can jump to governing PEPs.

281
00:15:56,600 --> 00:15:59,000
You can jump to PEPs for a certain Python release.

282
00:15:59,000 --> 00:16:01,400
It's a really handy tool to quickly navigate especially if you do

283
00:16:01,400 --> 00:16:03,320
and you work a lot with PEPs or with Python specifications

284
00:16:03,320 --> 00:16:04,760
or you want to see what's new with Python.

285
00:16:06,120 --> 00:16:09,160
And we also have expanded a lot of help for PEP authors.

286
00:16:09,160 --> 00:16:11,400
We have new documentation, new reading, new consuming guide.

287
00:16:11,400 --> 00:16:13,160
We've updated PEP 1 and PEP 12.

288
00:16:13,160 --> 00:16:16,200
Make it easier for authors and give more guidance and information.

289
00:16:16,280 --> 00:16:19,160
And update some things that are out of date and answer some common questions.

290
00:16:19,160 --> 00:16:21,480
So for authors, we try to make things a lot easier.

291
00:16:21,480 --> 00:16:23,240
Of course, there's still some things we gotta work through.

292
00:16:23,240 --> 00:16:26,200
But we have made some improvements on that front as well.

293
00:16:26,200 --> 00:16:30,520
So and we also have some new CI checks to catch common syntax errors.

294
00:16:30,520 --> 00:16:33,480
A lot of them would just pass finally and then they wouldn't render correctly

295
00:16:33,480 --> 00:16:37,240
and look all funny and not show the way the author intended in the actual end of output.

296
00:16:37,240 --> 00:16:41,240
Well, now we have a lot of text to back and help PEPs be more consistent

297
00:16:41,240 --> 00:16:43,080
and display in the way the author wants.

298
00:16:44,040 --> 00:16:47,480
So yeah, and again, we're working on that to make that more user-friendly for authors too

299
00:16:47,480 --> 00:16:50,520
because sometimes it can be a little too nippy and we're definitely working on that.

300
00:16:51,160 --> 00:16:53,240
So and we have a bunch of cross-cutting fixes.

301
00:16:53,240 --> 00:16:56,120
Hugo in particular made a lot of search engine optimization fixes.

302
00:16:56,120 --> 00:16:59,640
So the Python docs actually show up pretty high on the list of Google search

303
00:16:59,640 --> 00:17:00,600
or however you search for them.

304
00:17:00,600 --> 00:17:04,120
And we'll also have a built-in preview across Discord or social media sites.

305
00:17:04,920 --> 00:17:08,120
And also a big thing for authors and contributors if you want to contribute

306
00:17:09,320 --> 00:17:12,520
across we're not only PEPs, the Dev Guide, the C Python itself.

307
00:17:12,520 --> 00:17:14,840
You don't have to set up your own dev environment anymore locally.

308
00:17:14,840 --> 00:17:19,400
All those now have built in support for rendering previews of the documentation

309
00:17:19,400 --> 00:17:21,480
or the PEPs or the Dev Guide right on the PR.

310
00:17:21,480 --> 00:17:24,200
So you just make the changes, submit a PR and boom,

311
00:17:24,200 --> 00:17:27,480
it'll still link to the preview, rendered preview of all those changes.

312
00:17:27,480 --> 00:17:29,400
You don't have to set up the whole build environment just to see,

313
00:17:30,200 --> 00:17:31,640
just to kind of see how your changes look.

314
00:17:31,640 --> 00:17:32,840
And it's also helpful for reviewers.

315
00:17:32,840 --> 00:17:38,120
I don't have to go download the PR, build it locally, look at the files.

316
00:17:38,120 --> 00:17:40,440
I can just click a link and boom, I'm right to the,

317
00:17:40,440 --> 00:17:43,480
right to how that, right to the rendered version of that PR.

318
00:17:43,480 --> 00:17:45,240
So I can easily check to make sure everything looks good.

319
00:17:45,240 --> 00:17:47,960
So that helps reviewers and helps authors.

320
00:17:47,960 --> 00:17:51,480
We also put on, thanks to Mariana and with Ned who's here,

321
00:17:51,480 --> 00:17:54,680
we also put on die-taxis workshops for the core team by Daniella,

322
00:17:54,680 --> 00:17:57,400
who's the creator of the die-taxis framework for documentation.

323
00:17:57,400 --> 00:17:59,560
And that kind of helped give a lot of guidance and advice

324
00:17:59,560 --> 00:18:00,920
not only on how to make docs better,

325
00:18:00,920 --> 00:18:04,840
but also to help make the workflow for docs contributors easier and smoother

326
00:18:04,840 --> 00:18:07,160
and flow better as well.

327
00:18:07,160 --> 00:18:08,840
And I'm sure there's a lot more stuff I'm forgetting.

328
00:18:09,640 --> 00:18:11,560
So I don't want to go too much over time.

329
00:18:11,560 --> 00:18:19,640
So let's take a brief closer look at some of the insights we gained from Alain and Efti and I,

330
00:18:19,640 --> 00:18:22,680
taking a look at the SuperLite documentation and proving it to better serve readers,

331
00:18:22,680 --> 00:18:25,480
following die-taxis and these other principles that we have.

332
00:18:25,480 --> 00:18:27,320
So first, die-taxis.

333
00:18:27,320 --> 00:18:28,200
I keep bringing this up.

334
00:18:28,200 --> 00:18:28,920
What type is it?

335
00:18:28,920 --> 00:18:31,880
I mean, I'm really not explaining it.

336
00:18:31,880 --> 00:18:35,320
So die-taxis is kind of a grand unified theory of documentation.

337
00:18:35,960 --> 00:18:40,920
It's kind of a meta strategy for doing documentation that serves readers' needs,

338
00:18:40,920 --> 00:18:44,440
is easy to navigate, is accessible, and ultimately communicates effectively.

339
00:18:45,320 --> 00:18:48,760
More concretely, it kind of laid out a framework for doing documentation.

340
00:18:49,320 --> 00:18:53,000
And it's very specific, but general and outside-?

341
00:18:53,000 --> 00:18:54,360
I'm going to talk some more on that now.

342
00:18:54,360 --> 00:18:58,200
Advice that kind of applies to any kind of documentation that serves a particular purpose

343
00:18:58,200 --> 00:19:01,000
says here's how you use language, here's how you use structure,

344
00:19:01,000 --> 00:19:04,760
here's how you use other writing tools to make it effective and make it communicate well.

345
00:19:05,640 --> 00:19:08,760
And it kind of focused on four main categories of documentation,

346
00:19:08,760 --> 00:19:11,880
which relate to the four main purposes that documentation serves.

347
00:19:11,880 --> 00:19:17,240
So tutorials, which help readers learn how to use, which explain exactly how to do something.

348
00:19:17,240 --> 00:19:21,000
Explanations, which kind of give background and abstract information about concepts.

349
00:19:21,000 --> 00:19:27,000
And reference, which kind of gives concrete specifics, say the API parameters of a function

350
00:19:27,640 --> 00:19:28,440
and that sort of thing.

351
00:19:29,880 --> 00:19:33,240
But, I mean, the key to die-taxis kind of does emphasize these four different purposes.

352
00:19:33,240 --> 00:19:35,240
What we learned, and we'll talk about this in a second,

353
00:19:35,960 --> 00:19:40,920
it's not really about sticking dots into four different bins and leaving them there.

354
00:19:40,920 --> 00:19:45,080
It's really more about thinking about what purpose or purposes does your dot serve?

355
00:19:45,080 --> 00:19:47,880
How can you ensure that readers who are looking for that find them?

356
00:19:47,880 --> 00:19:53,480
And then how can you ensure that that language and the structure of that documentation

357
00:19:54,200 --> 00:19:56,440
serves that purpose really, really well?

358
00:19:56,440 --> 00:19:59,640
And this has become very popular in a number of other projects, like NumPy,

359
00:19:59,720 --> 00:20:00,200
QIAtas.

360
00:20:00,200 --> 00:20:04,360
A number of other scientific community projects and other projects as well have been following

361
00:20:04,360 --> 00:20:07,240
die-taxis and seeing a lot of improvements in their documentation.

362
00:20:07,240 --> 00:20:09,640
But it also takes some learning process to really get used to it.

363
00:20:10,680 --> 00:20:15,080
Again, just going over the kind of four categories, we have tutorials, which are learning oriented.

364
00:20:15,080 --> 00:20:19,400
So more aimed at kind of teaching some concept as opposed to just doing something.

365
00:20:19,400 --> 00:20:21,400
How can you guys just say how to do something specific?

366
00:20:22,040 --> 00:20:29,480
So say how to do, like say, how to handle a sequel injection attack.

367
00:20:29,640 --> 00:20:32,760
For example, in SQLite.

368
00:20:33,400 --> 00:20:36,040
We have references again as being kind of information oriented.

369
00:20:36,040 --> 00:20:39,400
Kind of the structure of the code right here, the functions here, the methods, here's how

370
00:20:39,400 --> 00:20:42,040
you call them, here's all the specific details.

371
00:20:42,040 --> 00:20:43,160
And finally, we have explanations.

372
00:20:43,160 --> 00:20:45,640
Trying to give that background for why something was the way it is.

373
00:20:46,440 --> 00:20:50,040
What is the conceptual model that this code operates on?

374
00:20:52,200 --> 00:20:58,840
So with that out of the way, what we essentially focused our initial efforts on was on the

375
00:20:59,640 --> 00:21:07,480
SQLite, I'm sorry, I'm not sure how to pronounce it, SQLite 3 module in Python, which is essentially

376
00:21:07,480 --> 00:21:11,320
a wrapper for the SQLite database engine.

377
00:21:11,320 --> 00:21:15,080
So it's widely used by a lot of folks who work on databases.

378
00:21:15,080 --> 00:21:17,480
I'm a scientist, so I don't have any more background on that.

379
00:21:17,480 --> 00:21:20,920
But that not really did anything really well because the module hadn't really had any

380
00:21:20,920 --> 00:21:24,600
change until Alain stepped up very recently.

381
00:21:24,600 --> 00:21:25,880
So he wanted to improve me.

382
00:21:25,880 --> 00:21:28,920
So there were some things they did well, but a lot of areas where they could really be

383
00:21:28,920 --> 00:21:29,560
improved.

384
00:21:29,560 --> 00:21:33,960
And also would be a great opportunity for hands-on learning to apply data tasks and

385
00:21:33,960 --> 00:21:37,960
kind of get some real experience using that and learn more about how to apply it to other

386
00:21:37,960 --> 00:21:38,440
things.

387
00:21:38,440 --> 00:21:46,200
So Alain actually recruited me to help with him because, because I was a beginner, I didn't

388
00:21:46,200 --> 00:21:50,760
know anything about SQLite or even SQL in general.

389
00:21:50,760 --> 00:21:55,640
I was a real noob, like scientists apparently are like officially banned from learning database

390
00:21:55,640 --> 00:21:57,320
stuff to business fees.

391
00:21:57,960 --> 00:22:03,240
So I really had almost no background in it, but that ended up being exactly what Alain

392
00:22:03,240 --> 00:22:07,720
was looking for because I would be someone coming into it for some time and I would be

393
00:22:07,720 --> 00:22:09,160
trying to figure it out just from the dots.

394
00:22:09,160 --> 00:22:14,280
And I could say, okay, here's where I can see this, here's where this is confusing.

395
00:22:14,920 --> 00:22:19,480
And so, and actually also was one of our main folks who works in the Python documentation.

396
00:22:19,480 --> 00:22:23,400
He came as well to give some more feedback and a lot of great expertise as well.

397
00:22:23,480 --> 00:22:28,120
So this whole process actually took a number of months and kind of was spread out in iterative

398
00:22:28,120 --> 00:22:30,200
chunks and we'll kind of go through that.

399
00:22:30,200 --> 00:22:35,320
So let's just take a look at what these SQLites or the SQLite 3 documentation looked like

400
00:22:35,320 --> 00:22:36,120
previously.

401
00:22:36,120 --> 00:22:41,000
Well, it's not looking too bad, but so we have the main types of objects here, that's

402
00:22:41,000 --> 00:22:41,960
kind of a reference.

403
00:22:41,960 --> 00:22:44,360
We have some suggestions on how to use it efficiently.

404
00:22:44,360 --> 00:22:48,440
We have some guidance and controlling transactions and that's kind of it.

405
00:22:48,440 --> 00:22:53,880
It's not clear if I have some say I want to, how to, where do I find that information

406
00:22:53,880 --> 00:22:54,120
guidance?

407
00:22:54,120 --> 00:22:58,760
I'm looking at the sections of the sort of objects that it's related to or, you know,

408
00:22:58,760 --> 00:22:59,960
or where's the tutorial?

409
00:22:59,960 --> 00:23:01,160
I don't see anything listed here for the tutorial.

410
00:23:01,160 --> 00:23:05,560
Well, it's kind of embedded into the introduction, but it's not quite doing the job as well as

411
00:23:05,560 --> 00:23:06,040
it could.

412
00:23:06,040 --> 00:23:10,920
So, and you can kind of see in some examples in the tutorial, you can see that it kind

413
00:23:10,920 --> 00:23:15,320
of has some long paragraphs going in great detail about certain things and not really

414
00:23:15,400 --> 00:23:19,240
showing perfect examples of both breaking up into smaller step-by-step chunks and we

415
00:23:19,240 --> 00:23:24,040
have a big long code block with a lot of stuff going on without a lot as much explanation

416
00:23:24,040 --> 00:23:25,000
for users.

417
00:23:25,000 --> 00:23:28,440
So, you know, it's not bad, but it could definitely be improved to be clearer and more

418
00:23:28,440 --> 00:23:32,280
step-by-step and also providing more helpful guidance for a new user.

419
00:23:32,280 --> 00:23:34,200
So, how do we approach this?

420
00:23:34,200 --> 00:23:38,200
Well, the most important thing was making sure the key functions, the key methods, the

421
00:23:38,200 --> 00:23:43,960
key behaviors were documented and not only documented, but documented clearly in the

422
00:23:43,960 --> 00:23:48,280
way that is accessible and understandable for new users like myself and that's why I

423
00:23:48,280 --> 00:23:50,040
helped review a lot of those parts.

424
00:23:50,040 --> 00:23:53,400
So, first of all, we wanted to make sure are the key points being got across before we

425
00:23:53,400 --> 00:23:57,640
did any kind of pre-answered diatasis stuff and then we wanted to make sure that the reference

426
00:23:57,640 --> 00:24:02,520
was complete and was accurate and was up to date with the current API in the module, that

427
00:24:02,520 --> 00:24:05,240
we documented everything documented because there was some stuff that wasn't documented,

428
00:24:05,240 --> 00:24:08,360
so we upped it with that and then we were like, okay, how do we organize this into four

429
00:24:08,360 --> 00:24:09,400
diatasis categories?

430
00:24:09,400 --> 00:24:13,880
Well, at first we tried just splitting everything just in one big PR, but that didn't work

431
00:24:13,880 --> 00:24:17,320
out really well and along close that we decided to try and go incrementally.

432
00:24:17,320 --> 00:24:22,600
First we tried to see, okay, which things are which and then we did PRs to move things

433
00:24:22,600 --> 00:24:27,080
around and then we looked at each category and said how can we make that category better

434
00:24:27,080 --> 00:24:31,080
serve that specific need whether it's tutorial or how-to, etc.

435
00:24:31,080 --> 00:24:34,520
And then we took a look at tutorial which according to diatasis is the hardest part

436
00:24:34,520 --> 00:24:35,240
and it really was.

437
00:24:35,240 --> 00:24:39,640
It took us several tries to actually get it, you know, several big PRs and long discussions

438
00:24:39,640 --> 00:24:43,160
to really get it to a place where we're happy, but one thing we also did, we added some fun.

439
00:24:43,160 --> 00:24:47,880
The previous tutorial was kind of boring and we injected some classic Python fun there

440
00:24:47,880 --> 00:24:52,040
with making it among the Monty Python movies and the ZVDM's Monty Python movies.

441
00:24:52,040 --> 00:24:57,480
And so and then we also from there we can sort of how to make the how-tos and explanations

442
00:24:57,480 --> 00:24:59,400
better serve their purposes as well.

443
00:24:59,400 --> 00:25:02,520
So let's take a look at how that ended up.

444
00:25:02,520 --> 00:25:07,720
Well, you can see this is something's the same, but we can see we have right here right at

445
00:25:07,720 --> 00:25:12,120
the top we have a list of the four main types of documentation, the four main purposes and

446
00:25:12,120 --> 00:25:15,240
directly links to them so readers can jump right to the tutorial, to the reference,

447
00:25:15,240 --> 00:25:18,520
to the how-to guide, the fast and the sort of type of docs that they're looking for.

448
00:25:18,520 --> 00:25:22,920
We also have more structured on the index, we also have a more kind of structured area.

449
00:25:22,920 --> 00:25:26,280
If you're looking for say the reference on how to, you know, just how to use one function

450
00:25:26,280 --> 00:25:27,720
you want to use, you jump to the reference.

451
00:25:27,720 --> 00:25:30,120
If you're looking for a how-to guide on something, we have a list of those.

452
00:25:30,120 --> 00:25:32,760
If you're looking for the tutorial, you can jump right to that, etc.

453
00:25:33,480 --> 00:25:37,720
And you can see kind of an example from the same section of the tutorial I showed earlier,

454
00:25:37,800 --> 00:25:42,200
before it was this big, this huge paragraph with very dense explanations, very dense

455
00:25:42,200 --> 00:25:46,440
descriptions and then a big huge block of code where we kind of split it up and made that

456
00:25:46,440 --> 00:25:51,320
into a much more incremental step-by-step guidance that also focused on kind of teaching

457
00:25:51,320 --> 00:25:55,560
the reader some key things to know about the module, as opposed to just saying,

458
00:25:55,560 --> 00:25:57,960
okay, here's how you do this, here's how you do that, that's it.

459
00:25:58,920 --> 00:26:03,080
And of course we also need to see the example of Multiplica, where we should make it a little less

460
00:26:03,480 --> 00:26:05,000
a little less dodgy and boring.

461
00:26:05,000 --> 00:26:10,840
So, the key thing here for you guys, what sort of things did we learn from this?

462
00:26:10,840 --> 00:26:14,760
We learned, I mean this was really more than anything a learning process because we got a

463
00:26:14,760 --> 00:26:17,880
lot of stops to start, a lot of things we weren't sure about with Dietaxis, a lot of things we

464
00:26:17,880 --> 00:26:23,640
actually kind of had wrong in the beginning that we learned through experience, here's what we

465
00:26:23,640 --> 00:26:24,280
actually need to do.

466
00:26:24,280 --> 00:26:31,160
So the key thing is, which Daniela will tell you, is to start small, to focus on one novel or even

467
00:26:31,160 --> 00:26:36,920
one section of one part of your code at a time and of your documentation and work on that and

468
00:26:36,920 --> 00:26:40,120
then incrementally try to improve it in as small steps as you can.

469
00:26:40,120 --> 00:26:45,080
And that was something that we definitely, we tried it a lot and tried to do too much at once and it

470
00:26:45,080 --> 00:26:46,360
just really didn't work.

471
00:26:46,360 --> 00:26:49,480
Instead we focused on here's smaller incremental improvement.

472
00:26:49,480 --> 00:26:53,480
Some of that is going to be really overwhelming to improve, especially the Dax for large programs.

473
00:26:54,040 --> 00:26:58,360
And just like the Dietaxis framework says, tutorials are the hardest part.

474
00:26:59,000 --> 00:27:04,200
They take a lot of work to really do a good job teaching the sorts of lessons that they're trying

475
00:27:04,200 --> 00:27:08,040
to teach and also keeping them up to date and keeping them relevant for a wide variety of readers.

476
00:27:08,040 --> 00:27:10,600
We had to do several iterations on that, like I said.

477
00:27:11,400 --> 00:27:16,600
Also a big thing that Alon figured out earlier on and got me involved was having reviewers with

478
00:27:16,600 --> 00:27:18,840
different ranges of experience with the modules.

479
00:27:18,840 --> 00:27:24,120
Some like average users, some absolute beginners like me and some much more experienced folks like

480
00:27:24,120 --> 00:27:31,240
Alon who know the background and all the nitty-gritty details and having those different

481
00:27:31,240 --> 00:27:36,920
perspectives was super valuable in making Dax that actually addressed those different readers of all

482
00:27:36,920 --> 00:27:37,800
those different levels.

483
00:27:37,800 --> 00:27:41,160
Because otherwise, especially the readers with Dax that are most likely to serve, the beginners,

484
00:27:41,880 --> 00:27:49,800
are likely to be confused because honestly, something I learned, every single expert at something,

485
00:27:49,800 --> 00:27:53,800
it can be really hard to see where those gaps are, where those assumptions are, where those

486
00:27:54,440 --> 00:27:56,040
points of lack of clarity are.

487
00:27:56,840 --> 00:28:03,240
Because if you learn something a lot, you know your brain decisions automatically, but that was

488
00:28:03,240 --> 00:28:05,800
super helpful and something Alon told me to really stress here.

489
00:28:06,600 --> 00:28:12,200
Also, the key thing was we kind of got too caught up in the organization, how to put things in those

490
00:28:12,200 --> 00:28:14,280
little boxes with Dax.

491
00:28:14,280 --> 00:28:15,800
So that's what kind of jumped out at you first.

492
00:28:15,800 --> 00:28:18,600
That's kind of what the most obvious and easy thing to do is.

493
00:28:18,600 --> 00:28:24,120
But in reality, what also, I mean, both Alon and I, and actually all kind of learned and really

494
00:28:24,120 --> 00:28:27,480
wanted to stress is that it's not just putting things in the boxes.

495
00:28:27,480 --> 00:28:31,480
The language and how you present things in the structure, particularly kind of the words you use

496
00:28:31,480 --> 00:28:36,920
in there, the clarity of expression in phrases and ambiguity is so critical to making Dax that are

497
00:28:36,920 --> 00:28:41,080
clear to even understand and make readers feel like they have a good grasp of the material,

498
00:28:41,080 --> 00:28:45,240
supposed to be unsure and doubt that they get to understand it correctly.

499
00:28:45,800 --> 00:28:50,440
So, and because the key thing is you've got to focus on how you serve readers best as opposed to

500
00:28:50,440 --> 00:28:52,600
how are we going to make it stay in these boxes, right?

501
00:28:52,600 --> 00:28:57,400
And that was the key insight from Dax that really took a lot of real practice and reading and

502
00:28:57,400 --> 00:29:02,920
trying things and discussion to really internalize that, which really is what it's all about.

503
00:29:02,920 --> 00:29:03,560
It's hands on work.

504
00:29:03,560 --> 00:29:05,560
You know, take it and try it and iterate.

505
00:29:05,560 --> 00:29:09,000
That's really what kind of the meta framework of Dax is all about.

506
00:29:09,800 --> 00:29:14,200
So let's just take a quick look at some of the things we're planning for the future for the

507
00:29:14,200 --> 00:29:14,840
Python Dax.

508
00:29:15,240 --> 00:29:20,760
So first of all, of course, we're going to continue with the Dicatse work, the Dicatse

509
00:29:20,760 --> 00:29:21,560
transformation.

510
00:29:21,560 --> 00:29:25,960
That's something that's definitely going to be a years long project, module by module, and it's

511
00:29:25,960 --> 00:29:30,440
going more slowly than we'd like, but hopefully, hopefully will have more folks to help out because

512
00:29:30,440 --> 00:29:34,200
it's a big project and it's something that we try to make a big plan for.

513
00:29:34,200 --> 00:29:37,640
It can be very overwhelming, but we're trying to focus on step by step, module by module,

514
00:29:37,640 --> 00:29:38,680
section by section.

515
00:29:38,680 --> 00:29:40,200
That's kind of the big ticket item.

516
00:29:40,200 --> 00:29:44,680
Another big thing is we're continuing to modernize the theme, make it easier and more flexible for

517
00:29:44,680 --> 00:29:49,480
readers, and we're actually considering a new theme named Lutra by Per Jun, who's one of our

518
00:29:49,480 --> 00:29:50,040
members.

519
00:29:50,040 --> 00:29:53,640
He's also the author of the Firo theme that you've probably seen everywhere on different docs

520
00:29:53,640 --> 00:29:54,120
sites.

521
00:29:54,120 --> 00:29:59,640
And Lutra is specifically designed for the needs of the Python, the Python org site and also the

522
00:29:59,640 --> 00:30:03,320
Python docs and also the Python programming guide because they're much larger sites that have

523
00:30:03,320 --> 00:30:06,120
different needs than, you know, say a smaller progress documentation.

524
00:30:06,120 --> 00:30:11,640
So it's specifically focused on the needs of this site as a proposed next step for the Python D,

525
00:30:11,640 --> 00:30:12,840
for the Python docs.

526
00:30:12,840 --> 00:30:17,480
We also have a new member of our group, Joanna, who might be making some improvements to the

527
00:30:17,480 --> 00:30:21,480
tutorial, which is really a critical area for Python that's kind of been neglected over the

528
00:30:21,480 --> 00:30:23,960
years and could really use some further improvements.

529
00:30:23,960 --> 00:30:26,360
So we're really excited to see that, but it's also one of the hardest parts.

530
00:30:27,080 --> 00:30:30,760
I'm also building a tool that's almost done that can actually sync up kind of the change logs and

531
00:30:30,760 --> 00:30:35,880
what's new and other old and new docs and make sure that the new docs have all the information

532
00:30:35,880 --> 00:30:39,240
from the old docs and the old ones have the new ones, making things easier for release managers

533
00:30:39,240 --> 00:30:40,440
and other folks like that.

534
00:30:41,080 --> 00:30:45,400
We're also, since we're moving through the round a lot with the iTasks, it helps readers be,

535
00:30:45,400 --> 00:30:47,000
make it easier for readers to find things.

536
00:30:47,880 --> 00:30:51,640
The key thing is we definitely do not want to break the links, especially the links down to

537
00:30:51,640 --> 00:30:53,560
individual sections that we have for the old docs.

538
00:30:53,560 --> 00:30:56,600
That's something, you know, there's a lot of those out there and that would be a lot of breakages

539
00:30:56,600 --> 00:30:57,160
if we did that.

540
00:30:57,160 --> 00:31:02,680
So I'm actually also working in a tool and a workflow that will at least automatically help

541
00:31:02,680 --> 00:31:06,360
preserve those links to make sure that if you put the link down to a certain section, you know,

542
00:31:06,360 --> 00:31:09,960
automatically know exactly what page and what section to redirect it to or what function,

543
00:31:09,960 --> 00:31:10,520
what method.

544
00:31:11,080 --> 00:31:15,480
So I'm working on a lot of tooling around that and also kind of an extension of that,

545
00:31:15,480 --> 00:31:21,240
some tooling that can extract more structure data out of that application in terms of looking at

546
00:31:21,240 --> 00:31:28,360
what functions are deprecated, which functions are new, what audit events, what other, you know,

547
00:31:28,360 --> 00:31:33,080
what platforms certain functions are available on then and that can actually be, and to transform

548
00:31:33,080 --> 00:31:38,760
that into a machine readable form that will allow, that can be used by linkers and by testers and

549
00:31:38,760 --> 00:31:43,720
other tools to see, you know, if you specify, do you want your code to be sorted by Python 3.7

550
00:31:43,720 --> 00:31:47,240
to 3.12? Well, does it use any functions that are deprecated in those versions? Does it use any

551
00:31:47,240 --> 00:31:51,480
functions that are added new in those versions? Are they, you know, are you using parameters that

552
00:31:51,480 --> 00:31:56,040
are new? And potentially they build a semi-automated tool at least to help upgrade the new Python

553
00:31:56,040 --> 00:32:00,120
versions to reduce the impact of compatibility changes, which is something that a number of

554
00:32:00,120 --> 00:32:02,440
developers like Victor have been really looking for.

555
00:32:02,440 --> 00:32:06,120
So that's kind of a big project and more of a long-term thing. Hopefully I'll have more in the

556
00:32:06,120 --> 00:32:11,480
next year, but that's something that we're also excited to do. So just a quick look at Lutra.

557
00:32:11,480 --> 00:32:16,680
So this is the theme that Projunce has been working on. It's kind of a theme for larger docs

558
00:32:16,680 --> 00:32:21,640
types like Python and like the Python Caching Guide to make them easier to navigate and easier

559
00:32:21,640 --> 00:32:26,760
to find what you're looking for and also more useful when compatible with kind of modern UI and

560
00:32:26,760 --> 00:32:33,480
UX constraints. You can kind of see that's the home page there and this is what the SQLite

561
00:32:33,480 --> 00:32:37,880
re-documentation as a reminder looks like right now. And then under the current theme and then

562
00:32:37,880 --> 00:32:43,480
that's how it looks under Lutra. You can see on the left you have a list of a kind of, I know one

563
00:32:43,480 --> 00:32:47,960
thing I also get confused in the Python docs is where am I? Like what other modules are nearby or

564
00:32:47,960 --> 00:32:51,800
what sections are nearby? There's not necessarily a great list of that right now. And we have that on

565
00:32:51,800 --> 00:32:55,240
the left and then on the right we have an indicator of where you are in the docs and you're

566
00:32:55,240 --> 00:32:59,480
left to show what section you're in because I'm used to having to track where exactly I'm

567
00:32:59,480 --> 00:33:03,240
controlled to if it's a long documentation that I'll show you and make navigation a lot easier.

568
00:33:03,240 --> 00:33:06,840
There's also lots of other improvements I can't get into but again just as a reminder this is

569
00:33:06,840 --> 00:33:11,080
the, you know, this is still in alpha. It's still being worked on. It's still a proposal. It's not

570
00:33:11,080 --> 00:33:14,440
necessarily for certain features of Python docs thing. There still needs to be a lot of feedback

571
00:33:14,440 --> 00:33:21,720
out of the session but if you do want feedback just search Lutra and you can definitely add

572
00:33:21,720 --> 00:33:27,320
feedback there and let everyone know what's good, what might need some improvement. So definitely we

573
00:33:27,320 --> 00:33:32,680
have a full working demo of the CPython docs there which is what this is from. You can browse

574
00:33:32,680 --> 00:33:35,960
that and see what looks good, see what looks better, see what might need some improvement and give you

575
00:33:35,960 --> 00:33:41,800
your feedback as well. So Purdue is definitely looking for that. So yeah, so if you are looking

576
00:33:41,800 --> 00:33:47,160
to help in other ways, well there's plenty of ways to do that. So of course you can join us on Discord

577
00:33:47,160 --> 00:33:52,760
and Discord and our discourse, Discord, two different things, and our community calls. Those are

578
00:33:52,760 --> 00:33:56,360
where we can, those are all the different platforms that we test things and of course the Asia

579
00:33:56,360 --> 00:34:00,280
Strap as well where we discuss, you know, and you can give your feedback on what you think of the Python

580
00:34:00,280 --> 00:34:05,320
docs as well, what doesn't, what sort of things we should do. If you want suggestions on how to,

581
00:34:06,440 --> 00:34:12,440
what products to help to start with or what things to help with, or if you have your own idea, you can

582
00:34:12,440 --> 00:34:17,400
definitely compose that there. We'll give you our feedback and then we also appreciate your feedback

583
00:34:17,400 --> 00:34:20,760
as well because everyone is different. You need perspectives. We work in different areas. We have

584
00:34:20,760 --> 00:34:25,160
different levels. We have work in different modules. We have different, you know, we all

585
00:34:25,160 --> 00:34:29,720
ask them the icons on the scientific domain. Several other, a lot of other developers come from

586
00:34:29,720 --> 00:34:33,640
the web domain or somebody scripting or someone from the core Python. So having all these different

587
00:34:33,640 --> 00:34:38,200
perspectives are really useful in making docs that are accessible to everyone. Of course you can simply

588
00:34:38,200 --> 00:34:42,040
fix the improvement. We're always happy to review those and tag us and get a review and get feedback.

589
00:34:42,760 --> 00:34:48,280
And you know, we're also happy to review and mentor new contributors, but if you're in,

590
00:34:48,280 --> 00:34:51,960
you're experienced in documentation, you've already worked on other docs, and you know,

591
00:34:52,760 --> 00:34:56,760
we always need more mentors and more reviewers for other people's documentation. So we're happy

592
00:34:56,760 --> 00:35:01,560
to have that as well. Now, but if you think you're not experienced enough, well,

593
00:35:02,440 --> 00:35:06,600
honestly, that means you're perfect to help us out. And that's exactly what Alon and I and

594
00:35:06,600 --> 00:35:10,360
actually all learned with the SQLite application. You know, it's good to have somebody who's an

595
00:35:10,360 --> 00:35:13,800
expert, good to have somebody who has a good understanding of something, but it's also really

596
00:35:13,800 --> 00:35:17,560
good to have a beginner, have that beginner's mind who can take a look at the docs for the first time

597
00:35:17,560 --> 00:35:22,360
and see all the gaps, see the places that are, you know, if you're actually trying to use something

598
00:35:22,360 --> 00:35:27,320
for the first time from docs, you know, it can be super challenging because they can use stuff that

599
00:35:27,320 --> 00:35:32,040
maintainer would never have thought of that might be unclear or might be ambiguous or might not have

600
00:35:32,040 --> 00:35:36,520
enough explanation on something. So your input is super valuable. So even if you've never looked at

601
00:35:36,520 --> 00:35:40,760
a certain module or even tried to help the documentation before, you need a perfect person to help us out.

602
00:35:40,760 --> 00:35:44,760
So just getting feedback is super valuable and something that we really, really appreciate. So we

603
00:35:44,760 --> 00:35:49,800
hope to see somebody do there. So again, one more time, I want to thank everyone in the docs

604
00:35:49,800 --> 00:35:54,920
community for helping with this. I mean, it's been a huge community effort. I've just been a little

605
00:35:54,920 --> 00:35:58,760
part of it. I'm just kind of the messenger, but it's been a really community effort. We're a

606
00:35:58,760 --> 00:36:03,160
decentralized collective, but we all pitch in and help out. It's a great, great community. I mean,

607
00:36:03,160 --> 00:36:07,720
honestly, as of course Brett Cannon famously said, you know, you come to the language, but you stay

608
00:36:07,720 --> 00:36:11,800
for the community. And that's something that I'm incredibly thankful for everyone here. And so,

609
00:36:11,880 --> 00:36:15,400
again, I want to thank you all for being part of the community. Thanks to Python docs community.

610
00:36:15,400 --> 00:36:16,360
And thank you for your time.

611
00:36:27,480 --> 00:36:28,200
I don't believe it is.

612
00:36:28,840 --> 00:36:33,240
Okay. Oh, now it is. Awesome. Thank you, Pam. Really appreciate all your work. And this is going

613
00:36:33,240 --> 00:36:38,200
to help an awful lot of people in the future. We have just a couple of minutes here for questions

614
00:36:38,200 --> 00:36:43,320
if anyone has those, or perhaps you can catch Pam in the follow up if you want to talk to her.

615
00:36:44,040 --> 00:36:47,560
Anyone have a question for right now? Yeah.

616
00:36:53,000 --> 00:36:59,880
I, of course, have another question by comment. The value of new members is really

617
00:36:59,880 --> 00:37:07,320
effective in tackling normalized deviance. That was a term that was created after the

618
00:37:07,320 --> 00:37:13,640
China was explosion. So thank you for reinforcing that. Thank you.

