1
00:00:00,000 --> 00:00:03,000
Are you ready?

2
00:00:03,000 --> 00:00:10,160
Woo! That was a strange howl I made for you all.

3
00:00:10,160 --> 00:00:12,560
Everyone, welcome to day two,

4
00:00:12,560 --> 00:00:14,640
afternoon lightning talks.

5
00:00:14,640 --> 00:00:17,720
How's everyone's day two been so far?

6
00:00:17,720 --> 00:00:21,240
Wow. I can tell you've had a really good day today.

7
00:00:21,240 --> 00:00:23,840
Yes. I have so much fun.

8
00:00:23,840 --> 00:00:25,240
I went to the mental spring,

9
00:00:25,240 --> 00:00:26,840
I juggled a little bit,

10
00:00:26,840 --> 00:00:29,400
and then I went to the PSF lunch.

11
00:00:29,640 --> 00:00:31,600
The members lunch, that was great.

12
00:00:31,600 --> 00:00:33,920
Some really exciting things

13
00:00:33,920 --> 00:00:36,080
the Python Software Foundation is up to.

14
00:00:36,080 --> 00:00:38,080
If you have not yet registered as a member,

15
00:00:38,080 --> 00:00:40,320
you can register as a basic member, which is free.

16
00:00:40,320 --> 00:00:43,320
We also have a lot of other members options,

17
00:00:43,320 --> 00:00:45,560
and you can find any board of director member,

18
00:00:45,560 --> 00:00:48,160
any staff member, former people.

19
00:00:48,160 --> 00:00:50,280
I'm happy to answer those questions.

20
00:00:50,280 --> 00:00:53,320
We'll be happy to talk to you more about the PSF.

21
00:00:53,320 --> 00:00:56,240
Also, as a reminder,

22
00:00:56,240 --> 00:00:59,160
there are still open spaces going on.

23
00:00:59,320 --> 00:01:01,280
Can you tell us about an interesting open space

24
00:01:01,280 --> 00:01:04,360
we heard about earlier that's going to happen tomorrow?

25
00:01:04,360 --> 00:01:08,960
Yes. Did you submit the lightning talk and did it get selected?

26
00:01:08,960 --> 00:01:11,800
Do you feel disappointed that you have these slides

27
00:01:11,800 --> 00:01:14,840
that you have prepared and you didn't get the chance to show?

28
00:01:14,840 --> 00:01:17,240
Don't worry, because tomorrow there's an open space

29
00:01:17,240 --> 00:01:19,840
that you can submit your...

30
00:01:19,840 --> 00:01:23,160
I guess you don't have to submit, you just show your lightning talk.

31
00:01:23,160 --> 00:01:25,080
What is that section called again?

32
00:01:25,080 --> 00:01:29,080
Yeah. It's called Lightning Talks They Didn't Want You to Hear.

33
00:01:30,000 --> 00:01:31,960
I don't know if that's better or fun.

34
00:01:31,960 --> 00:01:33,440
We're not going to take it as too better.

35
00:01:33,440 --> 00:01:35,160
I think it's all in good fun.

36
00:01:35,160 --> 00:01:39,200
That's at noon tomorrow in room 250 AB.

37
00:01:39,200 --> 00:01:41,200
By the way, conference convention halls

38
00:01:41,200 --> 00:01:43,600
have the weirdest numbering system, so I don't know.

39
00:01:43,600 --> 00:01:45,640
250 AB, enjoy that.

40
00:01:45,640 --> 00:01:47,360
And let's see, any other...

41
00:01:47,360 --> 00:01:50,360
Oh, any other announcements that we would like to share

42
00:01:50,360 --> 00:01:53,080
for people about lightning talks, for example, tomorrow?

43
00:01:53,080 --> 00:01:56,240
Yes. So tomorrow we have a very special lightning talk

44
00:01:56,240 --> 00:01:58,960
because there will be people who are around the world,

45
00:01:58,960 --> 00:02:01,080
they have communities and they have events

46
00:02:01,080 --> 00:02:02,760
that want to tell us about.

47
00:02:02,760 --> 00:02:07,360
So if you organise any Python conference locally

48
00:02:07,360 --> 00:02:11,680
or Python events locally or community events locally,

49
00:02:11,680 --> 00:02:18,160
then it's your last chance, send Lorena a slide or a picture,

50
00:02:18,160 --> 00:02:21,280
I guess, then you can show up tomorrow

51
00:02:21,280 --> 00:02:24,240
to give a very, very short promotion.

52
00:02:24,280 --> 00:02:26,120
Yes, so that is...

53
00:02:26,120 --> 00:02:29,080
You can use my email, lorena at python.org.

54
00:02:29,080 --> 00:02:32,240
It's also floating around on the Python Discord, on Twitter.

55
00:02:32,240 --> 00:02:34,640
I don't know, I spammed a lot of places with that info.

56
00:02:34,640 --> 00:02:36,960
So that pretty much does it.

57
00:02:36,960 --> 00:02:38,600
So let's go ahead and get kicked off

58
00:02:38,600 --> 00:02:40,400
with our first lightning talk.

59
00:02:40,400 --> 00:02:43,000
And speaking of amazing events around the world,

60
00:02:43,000 --> 00:02:45,120
we're going to be hearing about some really exciting things

61
00:02:45,120 --> 00:02:47,240
happening over with PyCon Korea.

62
00:02:47,240 --> 00:02:48,840
Let's take it away.

63
00:02:49,520 --> 00:02:58,840
Hi, I wanted to go my 10 years of PyCon Korea.

64
00:02:58,840 --> 00:03:05,960
My 10 years, yeah, it's because I bought the domain 10 years ago.

65
00:03:05,960 --> 00:03:08,400
Yeah, but it's not.

66
00:03:08,400 --> 00:03:10,560
It's not 10 years.

67
00:03:10,560 --> 00:03:14,600
It's actually 9 years of PyCon Korea.

68
00:03:14,600 --> 00:03:16,160
Yeah, I'm going from South Korea.

69
00:03:17,120 --> 00:03:19,640
In the beginning, there were PySans.

70
00:03:19,640 --> 00:03:23,080
I started with PySans since 2000 with 1.6.

71
00:03:23,080 --> 00:03:25,640
It was time of the open source and the Linux.

72
00:03:25,640 --> 00:03:27,960
Many people teach each other's.

73
00:03:27,960 --> 00:03:29,960
So I learned from some prox.

74
00:03:29,960 --> 00:03:32,840
PySans supported my bills and housing.

75
00:03:32,840 --> 00:03:37,240
So I decided to give back to the people about what I learned.

76
00:03:37,240 --> 00:03:42,680
So I started in 2012.

77
00:03:42,680 --> 00:03:44,360
After that, I started.

78
00:03:44,400 --> 00:03:50,000
So I got some prox to make PySans visible to the prox of Korea.

79
00:03:50,000 --> 00:03:54,720
Made a Facebook group, PySans Korea, for Korean users.

80
00:03:54,720 --> 00:03:56,240
Many prox joins.

81
00:03:56,240 --> 00:04:00,400
I bought the domain at that time and started PyCon.

82
00:04:00,400 --> 00:04:03,880
But yeah, after that, I got failure.

83
00:04:03,880 --> 00:04:08,040
Too many schedules and too many words, do something here,

84
00:04:08,040 --> 00:04:09,600
do something here.

85
00:04:09,600 --> 00:04:12,200
And actually, at that time, I didn't get a job.

86
00:04:12,200 --> 00:04:14,560
There's many consulting out of time.

87
00:04:14,560 --> 00:04:19,680
So I paid to launch PyCon at that time.

88
00:04:19,680 --> 00:04:24,120
And the love begins.

89
00:04:24,120 --> 00:04:26,120
I got the job.

90
00:04:26,120 --> 00:04:29,760
I got the job because that job, I can success PyCon.

91
00:04:29,760 --> 00:04:31,680
It's a Japan-based company.

92
00:04:31,680 --> 00:04:34,520
So I went to Japan for the company trip sometimes.

93
00:04:34,520 --> 00:04:37,960
It happens because working on a Japan-based company.

94
00:04:37,960 --> 00:04:43,040
But yeah, but again, too much work, too much trouble.

95
00:04:43,040 --> 00:04:45,560
I have no time to work at PyCon Korea.

96
00:04:45,560 --> 00:04:49,920
And yeah, I visited PyCon Japan.

97
00:04:49,920 --> 00:04:54,400
Yeah, actually, that's me.

98
00:04:54,400 --> 00:04:58,080
Yeah, there were PyCon APEC sessions.

99
00:04:58,080 --> 00:05:00,880
So I joined and talked about the people.

100
00:05:00,880 --> 00:05:02,000
There was three reasons.

101
00:05:02,000 --> 00:05:03,880
PyCon JP, Singapore, Taiwan.

102
00:05:03,880 --> 00:05:05,240
They had one to help me.

103
00:05:05,280 --> 00:05:08,760
So I got contacts and they encouraged me.

104
00:05:08,760 --> 00:05:10,400
After that, good luck again.

105
00:05:10,400 --> 00:05:13,720
I got the whole new, new purpose to learn PyCon Korea.

106
00:05:13,720 --> 00:05:15,040
What should I do?

107
00:05:15,040 --> 00:05:18,960
Yeah, I need to get some experience about PyCon.

108
00:05:18,960 --> 00:05:20,640
Yeah, PyCon US.

109
00:05:20,640 --> 00:05:22,560
I should go.

110
00:05:22,560 --> 00:05:25,000
Well, I should run.

111
00:05:25,000 --> 00:05:29,800
But yeah, I got a second son.

112
00:05:29,800 --> 00:05:33,360
Yeah, schedule canceled.

113
00:05:33,400 --> 00:05:34,680
It's long flight.

114
00:05:34,680 --> 00:05:37,120
Yeah, my family needed.

115
00:05:37,120 --> 00:05:39,600
Okay, let's go to Taiwan.

116
00:05:39,600 --> 00:05:41,240
Short flight, short schedule.

117
00:05:41,240 --> 00:05:43,280
I can go at weekend.

118
00:05:43,280 --> 00:05:46,280
Yeah, that was PyCon APEC.

119
00:05:46,280 --> 00:05:50,200
But tickets sold out.

120
00:05:50,200 --> 00:05:53,440
Wait, there is group check-in for three persons?

121
00:05:53,440 --> 00:05:55,560
Okay, I can fly.

122
00:05:55,560 --> 00:05:58,400
So I have two free tickets.

123
00:05:58,400 --> 00:05:59,720
What should I do?

124
00:05:59,720 --> 00:06:02,240
Invite two people from the plus Korea,

125
00:06:02,280 --> 00:06:05,960
the Far Ladies and John Craig Niles join.

126
00:06:05,960 --> 00:06:09,000
If I didn't invite them, it didn't work.

127
00:06:09,000 --> 00:06:11,320
Both folks went to Taiwan.

128
00:06:11,320 --> 00:06:13,280
I got advice from Taiwan.

129
00:06:13,280 --> 00:06:16,760
Start from small core teams.

130
00:06:16,760 --> 00:06:21,520
And at PyCon APEC panel discussion, yeah, like this.

131
00:06:21,520 --> 00:06:27,360
I said, we will have PyCon Korea at the end of August.

132
00:06:27,360 --> 00:06:31,240
Actually, I didn't ask folks about it.

133
00:06:31,240 --> 00:06:32,640
Yeah, I just did it.

134
00:06:32,640 --> 00:06:34,280
Why August?

135
00:06:34,280 --> 00:06:36,520
I have second son in September.

136
00:06:36,520 --> 00:06:41,160
I made announcements by myself.

137
00:06:41,160 --> 00:06:45,200
If I don't do that, I get some brain.

138
00:06:45,200 --> 00:06:48,540
Actually, at this time, I think they don't blame me.

139
00:06:48,540 --> 00:06:52,600
But yeah, at that time, the announcements works for me.

140
00:06:52,600 --> 00:06:54,760
Tell me two people resigned their day job.

141
00:06:54,760 --> 00:06:56,080
I don't know why.

142
00:06:56,080 --> 00:06:58,200
And devote to PyCon Korea.

143
00:06:58,280 --> 00:07:01,360
We got the venues and website, not a big venue,

144
00:07:01,360 --> 00:07:03,040
but start at small.

145
00:07:03,040 --> 00:07:04,620
Okay, we need keynote speaker.

146
00:07:04,620 --> 00:07:06,200
Ask some PMS people about keynote.

147
00:07:06,200 --> 00:07:07,500
I got a little bit of a loss.

148
00:07:07,500 --> 00:07:09,480
Yeah, they rejected because of schedule.

149
00:07:09,480 --> 00:07:11,720
Two times schedule, I was getting mad.

150
00:07:11,720 --> 00:07:14,120
I got advice again, start small.

151
00:07:14,120 --> 00:07:16,440
It means we can go without keynote.

152
00:07:16,440 --> 00:07:21,440
Okay, open registration, sold 400 tickets in one day,

153
00:07:21,440 --> 00:07:24,280
all sold out, yeah.

154
00:07:24,280 --> 00:07:28,080
But in these days, out of time, yeah.

155
00:07:28,120 --> 00:07:30,400
So anyway, many people talked, I want ticket.

156
00:07:30,400 --> 00:07:32,440
Look again, Chang Hyesik, the PSP,

157
00:07:32,440 --> 00:07:35,200
one of the committee of Python, give me a phone call.

158
00:07:35,200 --> 00:07:36,280
Can I get a ticket?

159
00:07:36,280 --> 00:07:37,800
Yes, you can do the keynote.

160
00:07:37,800 --> 00:07:41,120
We ask you speakers, it's kind of loud.

161
00:07:41,120 --> 00:07:44,360
If I do more details, it cannot happen.

162
00:07:44,360 --> 00:07:48,200
And the 90 years of PyCon Korea, we got something like this.

163
00:07:48,200 --> 00:07:50,720
Of space, charter, dragons.

164
00:07:50,720 --> 00:07:55,720
And yeah, this, we have 1,000, yeah, about 2,000 people.

165
00:07:55,940 --> 00:07:58,060
Yeah, like this.

166
00:07:58,140 --> 00:07:59,140
And we did it.

167
00:07:59,140 --> 00:08:01,860
Also you can do it, that's important.

168
00:08:01,860 --> 00:08:04,060
The countries have PyCon, ask me.

169
00:08:05,380 --> 00:08:07,140
Also we have a space.

170
00:08:07,140 --> 00:08:10,660
Need people, more digital speakers to PyCon regions.

171
00:08:10,660 --> 00:08:12,380
We more connect.

172
00:08:12,380 --> 00:08:15,160
Yeah, like this schedule, you can ask me.

173
00:08:15,160 --> 00:08:17,380
And thanks for the PSP, your money,

174
00:08:17,380 --> 00:08:20,120
and help, I put memories of our cars.

175
00:08:20,120 --> 00:08:25,120
And after 10 years, this became this.

176
00:08:25,280 --> 00:08:27,280
They start to learn Python.

177
00:08:30,860 --> 00:08:31,700
Thank you.

178
00:08:35,200 --> 00:08:37,600
It's a very, very touching lightning talk.

179
00:08:37,600 --> 00:08:38,720
Thank you so much.

180
00:08:38,720 --> 00:08:42,480
And we have actually ordered lightning talk,

181
00:08:42,480 --> 00:08:44,140
a very different topic.

182
00:08:44,140 --> 00:08:46,540
And the next one actually is about typing.

183
00:08:46,540 --> 00:08:49,880
So another talk, and we have our speaker here, Reddy.

184
00:08:49,880 --> 00:08:51,440
So thank you so much.

185
00:08:51,440 --> 00:08:54,200
Hi, I'm Cass Stor, and I'm with Unified,

186
00:08:54,200 --> 00:08:57,040
which is a social network that supports activists.

187
00:08:57,040 --> 00:09:00,160
And I'm gonna talk to you about workflows with typing.

188
00:09:02,200 --> 00:09:04,440
So what is a workflow orchestration engine?

189
00:09:04,440 --> 00:09:07,720
Actually I should say, this talk was gonna be 10 tips

190
00:09:07,720 --> 00:09:10,920
for using temporal to orchestrate your workflow.

191
00:09:10,920 --> 00:09:12,540
But I have to be totally honest with you,

192
00:09:12,540 --> 00:09:15,280
I don't think I have 10 tips to offer.

193
00:09:15,280 --> 00:09:18,340
So this is like less than or equal to 10 tips.

194
00:09:19,960 --> 00:09:22,040
So what is a workflow orchestration engine?

195
00:09:22,040 --> 00:09:23,600
Most of you are probably familiar with it.

196
00:09:23,600 --> 00:09:25,880
It's anything that runs batch jobs,

197
00:09:25,880 --> 00:09:29,220
and now pipelines, user triggered async events,

198
00:09:29,220 --> 00:09:30,700
that kind of thing.

199
00:09:30,700 --> 00:09:32,720
We've used a lot of them, airflow,

200
00:09:32,720 --> 00:09:37,720
we've used cron jobs on a scheduler, lambda functions.

201
00:09:39,120 --> 00:09:41,180
They all have their headaches.

202
00:09:41,180 --> 00:09:43,520
I was here last year talking to a bunch of people about it.

203
00:09:43,520 --> 00:09:46,120
People had solutions and work around,

204
00:09:46,120 --> 00:09:48,120
they had workarounds, but not really solutions, right?

205
00:09:48,120 --> 00:09:52,080
So we came across something called temporal,

206
00:09:52,080 --> 00:09:54,160
one of my colleagues did,

207
00:09:54,160 --> 00:09:57,760
and it's really made running workflows a lot easier,

208
00:09:57,760 --> 00:10:01,140
primarily because we get to type the inputs and the outputs.

209
00:10:03,360 --> 00:10:05,760
So I'm not gonna go into temporal too much,

210
00:10:05,760 --> 00:10:07,480
they have a booth, go talk to them.

211
00:10:09,200 --> 00:10:11,680
This is what it looks like, there's a server,

212
00:10:11,680 --> 00:10:15,840
a bunch of workers, and a web UI.

213
00:10:15,840 --> 00:10:17,520
You can scale the workers like you would

214
00:10:17,520 --> 00:10:19,280
any container on your deployment.

215
00:10:20,280 --> 00:10:22,760
This is the web UI, right?

216
00:10:22,760 --> 00:10:24,380
You can see I have two workflows here,

217
00:10:24,380 --> 00:10:26,960
one that completed, one that failed.

218
00:10:26,960 --> 00:10:31,180
When you go into it, you can see a little more detail

219
00:10:31,180 --> 00:10:33,820
and including the payloads.

220
00:10:35,040 --> 00:10:36,440
So let's look at some code.

221
00:10:45,180 --> 00:10:47,240
This is a basic sample workflow.

222
00:10:47,280 --> 00:10:48,720
I'm not gonna go into detail,

223
00:10:48,720 --> 00:10:52,320
but one thing you notice here, there's a model.

224
00:10:52,320 --> 00:10:54,940
And that model uses object IDs,

225
00:10:54,940 --> 00:10:58,600
which you'll note are not JSON serializable.

226
00:10:58,600 --> 00:11:01,640
We define an activity, it prints those IDs,

227
00:11:01,640 --> 00:11:03,720
and a workflow that runs them.

228
00:11:04,840 --> 00:11:06,140
At the bottom of this workflow,

229
00:11:06,140 --> 00:11:08,160
we also define the activities.

230
00:11:10,440 --> 00:11:12,580
We've configured it so we can just define

231
00:11:12,580 --> 00:11:14,840
all of our workflows with YAML files,

232
00:11:14,840 --> 00:11:17,640
which really makes deployment so easy.

233
00:11:17,640 --> 00:11:21,880
And then we run a little code to deploy them to the worker.

234
00:11:23,480 --> 00:11:26,840
So typing, we use PyDantic.

235
00:11:26,840 --> 00:11:29,080
I bet a lot of you do.

236
00:11:29,080 --> 00:11:32,960
Within PyDantic, we customized it to do

237
00:11:32,960 --> 00:11:36,020
JSON serialization of our object IDs.

238
00:11:36,020 --> 00:11:40,640
So all we had to do was write a data converter for PyDantic,

239
00:11:40,640 --> 00:11:42,520
and we used that as our data converter,

240
00:11:42,520 --> 00:11:43,960
and now we're just passing around

241
00:11:43,960 --> 00:11:46,440
PyDantic models between tasks.

242
00:11:48,080 --> 00:11:49,760
Also, it's pretty Pythonic.

243
00:11:49,760 --> 00:11:53,840
You can use normal Python code.

244
00:11:53,840 --> 00:11:55,920
So one of the things with workflows

245
00:11:55,920 --> 00:11:58,000
is you wanna see when they fail,

246
00:11:58,000 --> 00:12:00,000
and you don't wanna have to write that code

247
00:12:00,000 --> 00:12:02,280
over and over and over again for every workflow.

248
00:12:02,280 --> 00:12:05,240
So I just wrote a base workflow class.

249
00:12:05,240 --> 00:12:06,580
It has three methods.

250
00:12:06,580 --> 00:12:09,280
It logs when a workflow starts, when it completes,

251
00:12:09,280 --> 00:12:12,280
and it raises a critical error when it fails.

252
00:12:12,960 --> 00:12:17,760
And then you can see here, to run that, it's pretty easy.

253
00:12:17,760 --> 00:12:19,880
I just have my workflow as per usual,

254
00:12:19,880 --> 00:12:24,880
and right here you see if the failure error is caught,

255
00:12:25,020 --> 00:12:28,420
then I just run this method, and it logs it,

256
00:12:28,420 --> 00:12:30,880
and then I get a Slack alert.

257
00:12:30,880 --> 00:12:34,000
So that's typing with workflows using Temporal.

258
00:12:34,000 --> 00:12:35,060
We found it really easy.

259
00:12:35,060 --> 00:12:38,360
We can use PyDantic, and it makes life so much easier

260
00:12:38,360 --> 00:12:40,960
to debug and test our workflows.

261
00:12:41,000 --> 00:12:43,040
If you have questions, let me know.

262
00:12:43,040 --> 00:12:45,280
I wanna thank my team at Unified,

263
00:12:45,280 --> 00:12:48,240
Jack Lecha and Brian Vanderhoof who stood this up,

264
00:12:48,240 --> 00:12:51,360
the community at Temporal, and obviously PyCon

265
00:12:51,360 --> 00:12:54,400
for letting us share our little learnings along the way.

266
00:12:54,400 --> 00:12:55,720
Thank you.

267
00:12:55,720 --> 00:12:56,560
Thank you.

268
00:12:56,560 --> 00:12:57,560
Thank you so much for that.

269
00:12:57,560 --> 00:12:58,400
Thank you.

270
00:13:00,800 --> 00:13:02,840
Thank you so much for that.

271
00:13:02,840 --> 00:13:06,240
Next we have Paul, who in talking with them

272
00:13:06,240 --> 00:13:09,560
about being an employee at Indeed,

273
00:13:09,560 --> 00:13:13,080
who is one of our sponsors, I had a really fun moment

274
00:13:13,080 --> 00:13:14,680
when I was like, yes, Indeed, I will make sure

275
00:13:14,680 --> 00:13:15,520
to reference that.

276
00:13:15,520 --> 00:13:17,560
My own silly humor.

277
00:13:17,560 --> 00:13:19,960
But anyways, let's pass it over to Paul to take it away.

278
00:13:19,960 --> 00:13:21,440
Okay, great, thank you.

279
00:13:21,440 --> 00:13:26,440
So last year or so I was involved with going through

280
00:13:26,760 --> 00:13:30,760
sort of a survey of significant Python changes,

281
00:13:30,760 --> 00:13:34,960
code changes by version as part of some upgrade projects

282
00:13:34,960 --> 00:13:36,880
and as part of some book writing.

283
00:13:36,880 --> 00:13:39,840
So I'll go through one of the things that we found

284
00:13:41,120 --> 00:13:46,120
as part of this survey was this change in the stir function.

285
00:13:46,920 --> 00:13:49,600
So common function that we use a lot,

286
00:13:49,600 --> 00:13:54,280
all strip and Rstrip typically for removing white space.

287
00:13:54,280 --> 00:13:57,800
But if used, it can actually maybe remove a little more

288
00:13:57,800 --> 00:13:59,500
than you would want.

289
00:13:59,500 --> 00:14:02,120
So if we look at this line of code,

290
00:14:02,120 --> 00:14:04,640
who knows what this is going to print?

291
00:14:05,640 --> 00:14:10,640
Yes, L.com, yes.

292
00:14:11,720 --> 00:14:13,960
You would think that it's going to return shell.com,

293
00:14:13,960 --> 00:14:17,520
but this is not the string to remove,

294
00:14:17,520 --> 00:14:19,320
but this is the list of characters

295
00:14:19,320 --> 00:14:21,080
that Lstrip is going to remove.

296
00:14:21,080 --> 00:14:24,400
And all of these characters are in that set.

297
00:14:24,400 --> 00:14:27,100
In version 3.9, we got the new features,

298
00:14:27,100 --> 00:14:29,440
remove prefix, remove suffix.

299
00:14:29,440 --> 00:14:32,600
And so this would be more properly written this way.

300
00:14:32,600 --> 00:14:35,160
So what we found when talking to our different networks

301
00:14:35,160 --> 00:14:38,480
of people using Python, companies were looking

302
00:14:38,480 --> 00:14:43,160
at their code bases and they found that they were using

303
00:14:43,160 --> 00:14:46,240
Lstrip and Rstrip perhaps in some,

304
00:14:46,240 --> 00:14:48,480
it uncovered some latent bugs in their code.

305
00:14:48,480 --> 00:14:50,800
And so this is something that you might want to do

306
00:14:50,800 --> 00:14:55,000
as an item when you head home.

307
00:14:55,000 --> 00:14:57,680
Look at the Lstrip and Rstrip that you have.

308
00:14:57,680 --> 00:15:02,680
Calls that take the no argument form, not a problem,

309
00:15:03,840 --> 00:15:06,400
but it's those that take a quoted string of some sort.

310
00:15:06,400 --> 00:15:08,320
Might want to review and make sure that it's doing

311
00:15:08,320 --> 00:15:09,980
what you really want.

312
00:15:09,980 --> 00:15:12,320
So this was actually done as part of the work

313
00:15:12,320 --> 00:15:15,440
on the latest edition of Python in a nutshell.

314
00:15:15,440 --> 00:15:20,120
It covers latest versions of 3.7 up through 3.11.

315
00:15:20,120 --> 00:15:22,200
And so as part of that work,

316
00:15:22,200 --> 00:15:23,520
I was talking with the other authors

317
00:15:23,520 --> 00:15:26,240
and really wanted to have a good catalog

318
00:15:26,240 --> 00:15:29,040
by version of what were the different changes in there.

319
00:15:29,040 --> 00:15:32,440
So people could plan their Python upgrades and so forth.

320
00:15:32,440 --> 00:15:37,440
And also we added an appendix with detailed information.

321
00:15:37,680 --> 00:15:40,000
So this is one page from the appendix

322
00:15:40,000 --> 00:15:42,880
and you can see that by version we have

323
00:15:42,880 --> 00:15:46,200
the different changes, whether they're additions, removals,

324
00:15:46,200 --> 00:15:47,760
whether it's a breaking change or not.

325
00:15:47,760 --> 00:15:50,440
And here's the remove for 3.9,

326
00:15:50,440 --> 00:15:52,400
remove prefix and remove suffix.

327
00:15:52,760 --> 00:15:56,840
So it turns out that even if you don't buy the book,

328
00:15:56,840 --> 00:15:59,760
this information is available at a website

329
00:15:59,760 --> 00:16:04,760
that we have open so that you can just go to,

330
00:16:04,900 --> 00:16:08,040
and this is the QR code for that website,

331
00:16:08,040 --> 00:16:11,540
if you care to record that.

332
00:16:12,520 --> 00:16:15,520
And then I'm going to try the live demo.

333
00:16:16,520 --> 00:16:19,480
Try the live demo.

334
00:16:20,440 --> 00:16:22,840
So here if I put in the stir,

335
00:16:22,840 --> 00:16:26,120
what are all the changes related to the stir class?

336
00:16:26,120 --> 00:16:27,680
And then we can see, okay, well,

337
00:16:27,680 --> 00:16:31,080
there's is asking was added in 3.7,

338
00:16:31,080 --> 00:16:32,440
there's remove profits.

339
00:16:34,520 --> 00:16:38,680
Oh, why not?

340
00:16:38,680 --> 00:16:43,680
Windows B.

341
00:16:56,800 --> 00:16:57,960
All right, that's not what I wanted.

342
00:16:57,960 --> 00:16:58,800
Here we go.

343
00:16:58,800 --> 00:17:00,600
Yes, so okay, thank you.

344
00:17:00,600 --> 00:17:05,440
So I'll go back and I wasted some of my precious time too.

345
00:17:05,480 --> 00:17:08,280
Okay, so if I put in stir,

346
00:17:08,280 --> 00:17:11,560
now I can see these are the results that we get.

347
00:17:12,600 --> 00:17:15,520
And for you, for those of you doing the challenge,

348
00:17:15,520 --> 00:17:19,560
you have some points now, there's some 3.11 features.

349
00:17:19,560 --> 00:17:20,400
You can put in other things.

350
00:17:20,400 --> 00:17:22,040
You can put in a version as well,

351
00:17:22,040 --> 00:17:24,160
so I could put in 3.11,

352
00:17:24,160 --> 00:17:25,640
and those are all the changes that were new.

353
00:17:25,640 --> 00:17:30,640
So this is an open website for you to do

354
00:17:31,060 --> 00:17:33,600
release planning or upgrade planning

355
00:17:33,600 --> 00:17:36,280
for your own install base.

356
00:17:36,280 --> 00:17:37,320
And that's my talk.

357
00:17:37,320 --> 00:17:38,320
Thank you.

358
00:17:38,320 --> 00:17:43,320
And yeah, it's very scary when you are giving a lightning talk

359
00:17:54,240 --> 00:17:55,760
and you're having technical difficulties.

360
00:17:55,760 --> 00:17:58,560
So I guess if you kind of, you know,

361
00:17:58,560 --> 00:17:59,920
unfortunately running out of time,

362
00:17:59,920 --> 00:18:02,720
you can give your talk again tomorrow at the open space.

363
00:18:02,760 --> 00:18:06,000
And our next speaker, David, is going to,

364
00:18:06,000 --> 00:18:08,880
so his talk is definitely not written by Chatchi BT,

365
00:18:08,880 --> 00:18:10,760
so enjoy.

366
00:18:12,200 --> 00:18:15,640
Yeah, sorry, my talk doesn't have any Chatchi BT.

367
00:18:17,120 --> 00:18:18,680
Instead, I'm gonna tell you about my experience

368
00:18:18,680 --> 00:18:21,800
submitting Crozetta to Pi OpenSci.

369
00:18:21,800 --> 00:18:23,200
I'm David Nicholson.

370
00:18:23,200 --> 00:18:25,600
You can find me at all those places.

371
00:18:26,760 --> 00:18:27,600
Who am I?

372
00:18:27,600 --> 00:18:29,680
I'm a high school dropout.

373
00:18:29,680 --> 00:18:31,200
I'm a failed rock star.

374
00:18:32,760 --> 00:18:36,000
Later I got a PhD in neuroscience studying songbirds.

375
00:18:36,000 --> 00:18:37,560
I'll tell you about that later.

376
00:18:38,480 --> 00:18:40,640
I now think of myself as a research software engineer.

377
00:18:40,640 --> 00:18:43,680
I'm active in US RSE,

378
00:18:43,680 --> 00:18:45,920
and I also happen to be the current editor-in-chief

379
00:18:45,920 --> 00:18:47,840
of Pi OpenSci.

380
00:18:47,840 --> 00:18:49,600
So long story short,

381
00:18:49,600 --> 00:18:52,600
I would say I have a very non-traditional background.

382
00:18:52,600 --> 00:18:53,920
So from personal experience,

383
00:18:53,920 --> 00:18:56,400
I really know why we need to work on inclusivity

384
00:18:56,400 --> 00:18:58,480
in science and software.

385
00:18:58,480 --> 00:19:00,320
And that's a big part of the Pi OpenSci mission,

386
00:19:00,320 --> 00:19:04,520
which is why I'm really proud to be part of the organization.

387
00:19:04,520 --> 00:19:08,120
I'm also somebody who just submitted a package there.

388
00:19:08,120 --> 00:19:10,240
I guess you could call that dog fooding,

389
00:19:10,240 --> 00:19:12,400
but that word is gross, so I'm not gonna use it.

390
00:19:13,760 --> 00:19:17,640
So Crozetta is a Python tool to work with any format

391
00:19:17,640 --> 00:19:21,280
for annotating animal vocalizations and bioacoustics data.

392
00:19:21,280 --> 00:19:24,240
So basically there's two ways you can annotate animal sounds.

393
00:19:24,240 --> 00:19:25,960
You can make a bunch of lines,

394
00:19:25,960 --> 00:19:27,880
or you can make a bunch of rectangles.

395
00:19:27,880 --> 00:19:29,760
Sometimes you make a bunch of dots.

396
00:19:29,760 --> 00:19:32,120
There's like a thousand different tools for doing this,

397
00:19:32,120 --> 00:19:36,960
and it wasn't easy to work with all their annotation formats in Python

398
00:19:36,960 --> 00:19:40,160
and not easy to share that in a simple flat file format

399
00:19:40,160 --> 00:19:42,960
like a CSV or JSON.

400
00:19:42,960 --> 00:19:47,880
And so this is part of a research software community

401
00:19:47,880 --> 00:19:51,440
for people that study animal communication.

402
00:19:51,440 --> 00:19:54,240
So basically how an actually intelligent being

403
00:19:54,240 --> 00:19:57,240
would actually communicate instead of a stochastic parrot

404
00:19:57,240 --> 00:19:59,440
that just randomly regurgitates the internet.

405
00:20:00,440 --> 00:20:03,760
So there is actually a chat GPT reference in my talk.

406
00:20:03,760 --> 00:20:06,720
Thank you. You can laugh at that joke.

407
00:20:06,720 --> 00:20:09,360
Or cry.

408
00:20:09,360 --> 00:20:12,880
So when you submit to PyOpenSci, it will go through me

409
00:20:12,880 --> 00:20:16,080
or a board of editors-in-chief that replaces me,

410
00:20:16,080 --> 00:20:20,040
but I instead had to go to the executive director, Lea Wasser.

411
00:20:20,040 --> 00:20:21,800
If you want to find out everything about PyOpenSci,

412
00:20:21,800 --> 00:20:23,920
you should watch her maintainer summit talk,

413
00:20:23,960 --> 00:20:27,040
should read our blog post, check out our guides.

414
00:20:27,040 --> 00:20:31,600
I went to her and I said, hey, if I was the editor for my own submission,

415
00:20:31,600 --> 00:20:33,360
would that be a conflict of interest?

416
00:20:33,360 --> 00:20:35,920
And she said, yes, you should not do that.

417
00:20:35,920 --> 00:20:38,440
So she found an editor, Chiara Marmo,

418
00:20:38,440 --> 00:20:42,200
who's way too smart for me to fit into a lightning talk,

419
00:20:42,200 --> 00:20:45,240
but for our purposes what matters is that she's been a project manager,

420
00:20:45,240 --> 00:20:50,280
contributor to Scikit-learn, AstroPy, many core scientific Python packages.

421
00:20:50,280 --> 00:20:53,440
She started the review by doing some initial checks

422
00:20:53,440 --> 00:20:56,240
and then by finding two reviewers.

423
00:20:56,240 --> 00:20:58,480
The first of which was Tessa Reinhardt,

424
00:20:58,480 --> 00:21:01,240
who's a very awesome grad student in the KitSys lab.

425
00:21:01,240 --> 00:21:03,440
They also have a poster here you should see tomorrow.

426
00:21:03,440 --> 00:21:08,160
And she has this bioacoustic software resource on GitHub.

427
00:21:08,160 --> 00:21:11,400
If you want to see some of the 1,000 tools that are out there

428
00:21:11,400 --> 00:21:13,440
that give you these annotation formats,

429
00:21:13,440 --> 00:21:15,320
sure, she's a perfect person to tell me,

430
00:21:15,320 --> 00:21:18,640
is Crozetta going to help her work with those formats in Python?

431
00:21:18,640 --> 00:21:21,880
And during her review, she helped me fix up issues with her tutorials.

432
00:21:21,920 --> 00:21:24,880
She gave me feedback on how easy it was for another human being

433
00:21:24,880 --> 00:21:26,800
to set up a development environment

434
00:21:26,800 --> 00:21:28,960
and pointed out that I needed a linting session.

435
00:21:28,960 --> 00:21:31,880
So already that leveled me up.

436
00:21:31,880 --> 00:21:35,240
Sylvain Halper, who's the other reviewer, he developed Scikit-M.A.D.

437
00:21:35,240 --> 00:21:36,280
He's one of the developers.

438
00:21:36,280 --> 00:21:38,800
This is for working with soundscapes in Python.

439
00:21:38,800 --> 00:21:42,200
And he contributed an initial implementation of a class

440
00:21:42,200 --> 00:21:44,480
for working with the format from Raven.

441
00:21:44,480 --> 00:21:48,760
This is an application out of the lab of ornithology in Cornell

442
00:21:48,800 --> 00:21:52,360
and also spotted a bunch of issues with the test and documentation.

443
00:21:52,360 --> 00:21:55,520
Then we brought in a technical expert, Yannick Yadul.

444
00:21:55,520 --> 00:21:56,760
He develops ParcelMath.

445
00:21:56,760 --> 00:22:01,680
It's a wrapper for a prot, which is a tool for doing phonetics.

446
00:22:01,680 --> 00:22:07,200
And he basically helped me parse the prot format text grids.

447
00:22:07,200 --> 00:22:08,160
So thank you, Yannick.

448
00:22:08,160 --> 00:22:10,080
And he also contributed in many other ways

449
00:22:10,080 --> 00:22:11,720
I don't have time to talk about.

450
00:22:11,720 --> 00:22:14,080
Then because PyOpenSci partners with Joss,

451
00:22:14,080 --> 00:22:15,480
the Journal of Open Source Software,

452
00:22:15,480 --> 00:22:17,520
we had an expedited review with them.

453
00:22:17,520 --> 00:22:18,880
Olivia Guest was the editor.

454
00:22:18,880 --> 00:22:21,920
And in this case, she basically just had to check off some boxes.

455
00:22:21,920 --> 00:22:24,480
If you want to read some really clear, incisive writing

456
00:22:24,480 --> 00:22:27,120
on computational cognitive science and AI,

457
00:22:27,120 --> 00:22:28,720
you should check out her papers.

458
00:22:28,720 --> 00:22:30,840
That's an aside.

459
00:22:30,840 --> 00:22:35,480
So Crozetta is now officially a PyOpenSci package.

460
00:22:35,480 --> 00:22:40,240
PyOpenSci review in review, I'm going to borrow an analogy from the SciPy

461
00:22:40,240 --> 00:22:41,640
maintainer's track this year.

462
00:22:41,640 --> 00:22:45,240
It's about tending the open source scientific software garden.

463
00:22:45,240 --> 00:22:47,800
So there is an idea from philosophy of science

464
00:22:47,800 --> 00:22:51,280
that science is actually just people working together, just community.

465
00:22:51,280 --> 00:22:54,160
Maybe we've heard some of that here this year.

466
00:22:54,160 --> 00:22:56,160
This becomes obvious in scientific software.

467
00:22:56,160 --> 00:22:59,560
So if I can paraphrase Brett Cannon, I came to PyOpenSci

468
00:22:59,560 --> 00:23:01,280
for the science and programming language.

469
00:23:01,280 --> 00:23:03,400
And I've stayed to help tend the community garden.

470
00:23:03,400 --> 00:23:06,600
I hope maybe some of you will as well.

471
00:23:06,600 --> 00:23:07,100
Thanks.

472
00:23:07,100 --> 00:23:08,100
Thank you.

473
00:23:08,100 --> 00:23:09,100
Thank you.

474
00:23:09,100 --> 00:23:14,100
Thank you.

475
00:23:14,100 --> 00:23:16,740
Pretty cool to see the Journal of Open Source Software up there.

476
00:23:16,740 --> 00:23:19,580
I know we have some folks in this community who are editors.

477
00:23:19,580 --> 00:23:21,660
I've actually collaborated with them as an editor.

478
00:23:21,660 --> 00:23:24,100
So if anyone is curious about that, I'd

479
00:23:24,100 --> 00:23:25,740
be happy to talk to you about it.

480
00:23:25,740 --> 00:23:28,100
That being said, I'm going to go ahead and pass it over to Mario.

481
00:23:28,100 --> 00:23:33,300
And I'm just going to let you take it away.

482
00:23:33,300 --> 00:23:34,380
OK.

483
00:23:34,380 --> 00:23:36,860
OK.

484
00:23:37,740 --> 00:23:39,380
Because I move a lot.

485
00:23:39,380 --> 00:23:40,100
Hello, PyCon.

486
00:23:40,100 --> 00:23:45,220
Are you ready for a lot of slides and a live demo in five minutes?

487
00:23:45,220 --> 00:23:47,500
So yeah, yeah, get excited.

488
00:23:47,500 --> 00:23:49,540
So everyone loves f-strings, right?

489
00:23:49,540 --> 00:23:53,060
And I'm here to show you what you already know, which is like f-strings.

490
00:23:53,060 --> 00:23:53,820
You can put the string.

491
00:23:53,820 --> 00:23:55,260
You put some placeholders.

492
00:23:55,260 --> 00:23:57,820
And you can get some nice content out of them.

493
00:23:57,820 --> 00:24:02,740
But there is a lot more on f-strings than that, hopefully, you know about.

494
00:24:02,740 --> 00:24:06,580
If you go and read the documentation, something I love to do whenever

495
00:24:06,620 --> 00:24:09,340
you're using any Python feature, I really encourage you to go and read about it.

496
00:24:09,340 --> 00:24:11,260
Because I'm sure we are rewriting a lot.

497
00:24:11,260 --> 00:24:13,740
That's already part of the standard library.

498
00:24:13,740 --> 00:24:17,580
You'll find that there is the specification of what you can do with f-strings.

499
00:24:17,580 --> 00:24:19,740
And the first part is the f-expression.

500
00:24:19,740 --> 00:24:22,820
And that basically means that you can put whatever you want as far as it's

501
00:24:22,820 --> 00:24:26,420
an expression within an f-string.

502
00:24:26,420 --> 00:24:29,260
So here you can see that, for example, we don't need to pre-compute this variable.

503
00:24:29,260 --> 00:24:31,460
We can just show it as part of the f-string.

504
00:24:31,460 --> 00:24:32,820
And that works.

505
00:24:32,820 --> 00:24:36,020
You can also find some other cool things, like, for example,

506
00:24:36,020 --> 00:24:38,300
this conversion part of the grammar.

507
00:24:38,300 --> 00:24:43,300
What this allows you to do is you can pass the exclamation mark r.

508
00:24:43,300 --> 00:24:47,660
And that's going to show you the wrapper of the variable that you put in the f-string.

509
00:24:47,660 --> 00:24:50,780
You think, OK, like, here for a string, it will just show you the name within quotes.

510
00:24:50,780 --> 00:24:51,700
Not that useful.

511
00:24:51,700 --> 00:24:55,460
But if you print exceptions, this is extremely useful.

512
00:24:55,460 --> 00:24:57,260
Because it's going to show you the exception time.

513
00:24:57,260 --> 00:25:01,420
How many times have you seen a log that it includes an exception.

514
00:25:01,420 --> 00:25:02,780
It's just the key of the key error.

515
00:25:02,780 --> 00:25:03,820
It's horrible, right?

516
00:25:03,820 --> 00:25:04,860
Use the wrapper for it.

517
00:25:04,860 --> 00:25:06,140
It's amazing.

518
00:25:06,140 --> 00:25:07,100
And what else can you do?

519
00:25:07,100 --> 00:25:11,220
We can also use the format space, something that, again, I find really useful.

520
00:25:11,220 --> 00:25:12,980
How can you use this out?

521
00:25:12,980 --> 00:25:15,260
There is another section in the documentation.

522
00:25:15,260 --> 00:25:17,180
I will tell you everything that you can do with it.

523
00:25:17,180 --> 00:25:18,220
Read about it.

524
00:25:18,220 --> 00:25:22,740
And some cool examples is that we saw that before we had the float,

525
00:25:22,740 --> 00:25:27,020
and it was showing 375.0.

526
00:25:27,020 --> 00:25:31,020
You can just use the format to just say, like, I don't want any decimals.

527
00:25:31,020 --> 00:25:34,300
And then you don't need to convert that to an integer before printing it, right?

528
00:25:34,780 --> 00:25:37,100
All of us have done that.

529
00:25:37,100 --> 00:25:40,260
What else can we find in the documentation?

530
00:25:40,260 --> 00:25:45,740
You can find that you can align and pad the variable that you're printing.

531
00:25:45,740 --> 00:25:46,900
How is this useful?

532
00:25:46,900 --> 00:25:50,180
Here, for example, you might think that it's not so useful.

533
00:25:50,180 --> 00:25:52,860
But here in Madrid, there are spaces around it.

534
00:25:52,860 --> 00:25:58,540
With this upper arrow and 10, you're saying that you want at least 10

535
00:25:58,540 --> 00:26:03,020
characters to be printed when you're formatting that string.

536
00:26:03,180 --> 00:26:05,340
What's doing is basically padding it with spaces.

537
00:26:05,340 --> 00:26:08,340
But what's really cool is that you can choose what you want to use for padding.

538
00:26:08,340 --> 00:26:12,820
You can use some modges if you want, and you can get this kind of cool strings.

539
00:26:12,820 --> 00:26:17,700
But if you want something useful, I'm sure that you have printed sometimes

540
00:26:17,700 --> 00:26:23,100
a file of the output of a subprocess, and you have manually crafted this.

541
00:26:23,100 --> 00:26:24,540
You don't need to do that.

542
00:26:24,540 --> 00:26:27,060
Like, the FString format already has this for you.

543
00:26:28,620 --> 00:26:30,540
Also, don't forget about the backstrings.

544
00:26:30,580 --> 00:26:33,780
You can just put a W, and it's going to print as well the name of the variable.

545
00:26:33,780 --> 00:26:37,980
And if you want to go crazy, you can have a custom class that defines

546
00:26:37,980 --> 00:26:40,420
that Dunder format, and you can pass whatever you want to it.

547
00:26:40,420 --> 00:26:45,420
You can have a really cool Boolean that's able to format the Booleans as emojis or

548
00:26:45,420 --> 00:26:46,300
whatever you want.

549
00:26:46,300 --> 00:26:48,460
And I'm going to show you that as part of the demo.

550
00:26:50,380 --> 00:26:55,300
So in case you don't trust me, here is, not this one.

551
00:26:55,300 --> 00:26:58,380
So here is the same code that I showed you before.

552
00:26:58,420 --> 00:27:00,660
And I run it, and you can see that it's true.

553
00:27:00,660 --> 00:27:04,140
And the happy emoji face and the sparklings, right?

554
00:27:04,140 --> 00:27:07,180
And the sparklings don't appear.

555
00:27:07,180 --> 00:27:08,980
What is going on?

556
00:27:08,980 --> 00:27:11,340
Oh no, this is a lightning talk.

557
00:27:11,340 --> 00:27:16,180
If I now want to debug this, maybe I add a lot of print statements, or

558
00:27:16,180 --> 00:27:20,540
they run PDB, or maybe I have to run GDB and then attach.

559
00:27:20,540 --> 00:27:22,980
Like, what could I do to figure out what's going on?

560
00:27:22,980 --> 00:27:24,060
Oh, PyStack.

561
00:27:24,060 --> 00:27:25,300
Oh, amazing.

562
00:27:25,300 --> 00:27:27,820
Yeah, have you heard about this new cool tool?

563
00:27:27,820 --> 00:27:31,420
You can just run PyStack remote, pass the PID or something, and

564
00:27:31,420 --> 00:27:34,860
you see the Python stack of the program that you're running.

565
00:27:34,860 --> 00:27:36,780
But you might say, yeah, but is this really useful?

566
00:27:36,780 --> 00:27:38,340
I want to see the variables inside.

567
00:27:38,340 --> 00:27:39,100
You can do that.

568
00:27:39,100 --> 00:27:42,620
You can just pass dash dash locals, and it will show you as well the locals that

569
00:27:42,620 --> 00:27:43,740
this in the function that it's running.

570
00:27:43,740 --> 00:27:45,140
So useful, right?

571
00:27:45,140 --> 00:27:50,140
And I know, Mario, this is really helpful, but I work doing C extensions.

572
00:27:50,140 --> 00:27:51,780
Don't worry, we got you covered.

573
00:27:51,780 --> 00:27:54,820
You can also pass dash dash native, and it's going to show you as well

574
00:27:54,820 --> 00:27:58,700
the C native code of the function that you're running.

575
00:27:58,700 --> 00:28:01,340
So useful, I have this tool at hand, right?

576
00:28:01,340 --> 00:28:03,980
And where I was presenting?

577
00:28:03,980 --> 00:28:06,460
Yeah, so this talk was totally about F strings.

578
00:28:06,460 --> 00:28:08,260
It was not about PyStack.

579
00:28:08,260 --> 00:28:11,820
So please, if you are ever using any Python feature that you find

580
00:28:11,820 --> 00:28:15,660
interesting and you find yourself writing code around it, I would really

581
00:28:15,660 --> 00:28:19,500
recommend that you go and read the docs, because many times, a lot of the code

582
00:28:19,500 --> 00:28:21,260
that you write is already written.

583
00:28:21,260 --> 00:28:23,580
And I still have 10 seconds.

584
00:28:23,620 --> 00:28:25,140
Look, this is a function you probably didn't know about.

585
00:28:25,140 --> 00:28:29,060
The string, the F string code is going to get rewritten.

586
00:28:29,060 --> 00:28:30,100
Check out that.

587
00:28:30,100 --> 00:28:31,780
We have PyStack pancakes.

588
00:28:31,780 --> 00:28:32,820
Three seconds.

589
00:28:32,820 --> 00:28:33,780
This is my home city.

590
00:28:33,780 --> 00:28:34,540
You can go visit it.

591
00:28:34,540 --> 00:28:36,940
It's amazing.

592
00:28:36,940 --> 00:28:37,460
Thank you.

593
00:28:44,300 --> 00:28:48,940
I feel like I've just watched a whole variety show in five minutes.

594
00:28:48,940 --> 00:28:53,100
Yeah, that's actually Mario getting his talk in, because he kind of sneakily

595
00:28:53,100 --> 00:28:54,980
put Lorena's name in the talk title.

596
00:28:54,980 --> 00:28:56,260
That's why, you know.

597
00:28:56,260 --> 00:29:00,740
So next year, you can try to be smarter than maybe you would get selected.

598
00:29:00,740 --> 00:29:06,980
So our next talk is by Jessica, talking about malware donation pipelines.

599
00:29:06,980 --> 00:29:09,340
Yeah, let's get dangerous.

600
00:29:09,340 --> 00:29:10,900
So hello, my name is Jessica.

601
00:29:10,900 --> 00:29:13,220
I'm a senior data engineer at Elastic.

602
00:29:13,220 --> 00:29:15,940
I like to call myself the lady of the data lake.

603
00:29:15,940 --> 00:29:17,420
I'm also an emoji enthusiast.

604
00:29:17,420 --> 00:29:18,900
Here are some of my faves.

605
00:29:18,900 --> 00:29:22,020
And I'm also devoted cat mom to Rupert and Xander.

606
00:29:22,020 --> 00:29:23,300
Come ask me about them later.

607
00:29:23,300 --> 00:29:26,220
We'll have a hallway track about our cats.

608
00:29:26,220 --> 00:29:28,260
But also, I want to talk about what I do at Elastic.

609
00:29:28,260 --> 00:29:30,300
So I work on the protection services teams.

610
00:29:30,300 --> 00:29:34,700
We're a group of cats and dogs who build cloud services and data systems

611
00:29:34,700 --> 00:29:37,380
that enable our internal threat research team.

612
00:29:37,380 --> 00:29:38,980
So what does that actually mean?

613
00:29:38,980 --> 00:29:42,580
So we sit around and we talk about how well is Elastic Security defending

614
00:29:42,580 --> 00:29:45,380
against real world or emerging threats?

615
00:29:45,380 --> 00:29:47,980
And this is very difficult, because what you have to do

616
00:29:47,980 --> 00:29:50,820
is you need to blow up the malware in order

617
00:29:50,860 --> 00:29:54,660
to know if we're catching the alerts, if we're detecting on our agent.

618
00:29:54,660 --> 00:29:57,300
And if you want to do this manually, it takes a lot of effort.

619
00:29:57,300 --> 00:30:00,220
You have to get a VM, make sure it doesn't spread that malware

620
00:30:00,220 --> 00:30:02,500
to the rest of your team.

621
00:30:02,500 --> 00:30:04,460
You have to make sure it's connected to Elastic,

622
00:30:04,460 --> 00:30:07,420
set up some infrastructure, all these other things.

623
00:30:07,420 --> 00:30:10,420
So for the past two years, we've been building a service called Detonate.

624
00:30:10,420 --> 00:30:13,060
Started my coworker Joe Desimone and maintained by myself

625
00:30:13,060 --> 00:30:16,500
and mostly Sergey Polzanov, who's been amazing.

626
00:30:16,500 --> 00:30:19,500
This runs malware and other malicious or potentially malicious software

627
00:30:19,540 --> 00:30:21,220
in a controlled environment.

628
00:30:21,220 --> 00:30:23,500
We have the full suite of Elastic Security available.

629
00:30:23,500 --> 00:30:25,740
I promise this is not a vendor plug or anything,

630
00:30:25,740 --> 00:30:28,820
but we want to make sure we're defending against all threats

631
00:30:28,820 --> 00:30:30,500
against our own product.

632
00:30:30,500 --> 00:30:33,660
And we use this as security researchers to make sure we can measure

633
00:30:33,660 --> 00:30:37,060
the efficacy of our solution in an automated fashion.

634
00:30:37,060 --> 00:30:38,980
Oh, sorry. We need to protect the net.

635
00:30:38,980 --> 00:30:40,980
That's a hockey joke.

636
00:30:42,420 --> 00:30:44,820
So this is a terrifying diagram that we're going to go through

637
00:30:44,820 --> 00:30:45,900
in the next few slides.

638
00:30:45,900 --> 00:30:48,380
But what I wanted to kind of show is sort of where our Python

639
00:30:48,380 --> 00:30:49,660
and friends kind of start.

640
00:30:49,660 --> 00:30:51,460
We're going to go into this in a lot more detail.

641
00:30:51,460 --> 00:30:53,660
So hold on to your horses.

642
00:30:53,660 --> 00:30:56,220
So the first thing that we do is we prepare our task data.

643
00:30:56,220 --> 00:30:58,540
And the way that we set up Detonate is to basically start

644
00:30:58,540 --> 00:30:59,620
with an API server.

645
00:30:59,620 --> 00:31:02,900
We use fast API with Pydantic for type verification

646
00:31:02,900 --> 00:31:05,220
and making sure everything's well structured.

647
00:31:05,220 --> 00:31:08,620
And then we dump things in basically from queue to worker to queue.

648
00:31:08,620 --> 00:31:10,420
And we go kind of through this cycle.

649
00:31:10,420 --> 00:31:13,100
And each worker is very easily extensible.

650
00:31:13,100 --> 00:31:16,180
All it requires you to have is a name of the incoming,

651
00:31:16,220 --> 00:31:19,220
potentially outbound queue, as well as kind of what the worker

652
00:31:19,220 --> 00:31:22,380
is supposed to do so we can build out more workers if we need.

653
00:31:22,380 --> 00:31:25,140
But this first one is basically going to prepare our task data.

654
00:31:25,140 --> 00:31:28,060
We want to be able to get this malicious file from a third party

655
00:31:28,060 --> 00:31:29,580
source. We use virus total or malware.

656
00:31:29,580 --> 00:31:30,660
Bizarre here.

657
00:31:30,660 --> 00:31:32,860
And we post kind of the files, including the malware

658
00:31:32,860 --> 00:31:36,220
and some startup scripts for our virtual machines into a bucket.

659
00:31:36,220 --> 00:31:37,820
Then we go on to our next worker,

660
00:31:37,820 --> 00:31:39,540
which will start the virtual machine.

661
00:31:39,540 --> 00:31:41,540
We make sure we have enough resources and then we do our

662
00:31:41,540 --> 00:31:42,900
infrastructure setup.

663
00:31:42,900 --> 00:31:45,700
In this case, we're using GCP for Windows and Linux

664
00:31:45,700 --> 00:31:47,700
or AWS for Mac OS on top of Anka.

665
00:31:48,780 --> 00:31:50,300
We get all the files from GCS.

666
00:31:50,300 --> 00:31:52,020
We get our startup scripts set up.

667
00:31:52,020 --> 00:31:55,260
We also register this VM with our elastic age with the elastic

668
00:31:55,260 --> 00:31:57,780
cluster. And then we wait until it's done.

669
00:31:57,780 --> 00:32:01,060
This takes about two to five minutes or we do time out if it fails.

670
00:32:01,060 --> 00:32:04,180
Tear down all the infrastructure, post some logs to the bucket,

671
00:32:04,180 --> 00:32:06,300
put our alerts in the right cluster.

672
00:32:07,460 --> 00:32:09,820
And then we make a human readable summary.

673
00:32:09,820 --> 00:32:11,220
This will grab that job.

674
00:32:11,220 --> 00:32:13,420
We'll basically go look at the alerts in the stack.

675
00:32:13,420 --> 00:32:15,620
We're going to take a lot of that information and make it

676
00:32:15,620 --> 00:32:19,140
a little bit more readable for our threat intelligence researchers.

677
00:32:19,140 --> 00:32:21,100
The raw JSON can be quite verbose,

678
00:32:21,100 --> 00:32:23,460
has a lot of maybe unnecessary information.

679
00:32:23,460 --> 00:32:25,260
So this allows us to pare it down a little bit.

680
00:32:26,780 --> 00:32:27,860
And that's the end of the pipeline.

681
00:32:27,860 --> 00:32:29,140
But you may have noticed on top,

682
00:32:29,140 --> 00:32:31,980
I didn't talk about that little task updates queue.

683
00:32:31,980 --> 00:32:33,820
Every time we move between workers,

684
00:32:33,820 --> 00:32:37,580
we're able to index an update to another elastic cluster.

685
00:32:37,580 --> 00:32:40,580
So we can gather all this and then look at what workers are running,

686
00:32:40,580 --> 00:32:41,900
how long did it take, et cetera.

687
00:32:41,900 --> 00:32:43,820
So we can go do some debugging.

688
00:32:43,820 --> 00:32:45,620
But also we get to use our awesome CLI tool.

689
00:32:45,620 --> 00:32:46,580
So here's Python.

690
00:32:46,580 --> 00:32:47,860
We haven't gotten to friends quite yet,

691
00:32:47,860 --> 00:32:50,340
but this is using Click and Rich.

692
00:32:50,340 --> 00:32:52,980
So we can use our CLI to put that in there.

693
00:32:52,980 --> 00:32:54,980
And then we can see all the steps as they output,

694
00:32:54,980 --> 00:32:56,380
which is very awesome.

695
00:32:56,380 --> 00:32:59,020
But we also have a website that we have internally called

696
00:32:59,020 --> 00:32:59,900
Protections Portal.

697
00:32:59,900 --> 00:33:02,500
This is built on the elastic UI and TypeScript.

698
00:33:02,500 --> 00:33:04,060
You can enter in a hash for detonation,

699
00:33:04,060 --> 00:33:06,020
and you can see all these awesome results here.

700
00:33:06,020 --> 00:33:09,100
If you want to demo that tomorrow, I can show you.

701
00:33:09,100 --> 00:33:11,620
But really, this talk is about Python and friends.

702
00:33:11,620 --> 00:33:13,500
So while Python is at the core of what we do,

703
00:33:13,540 --> 00:33:15,780
we have a lot of various other pieces of technology

704
00:33:15,780 --> 00:33:18,740
that support this, everything from cloud infrastructure

705
00:33:18,740 --> 00:33:20,940
to Docker containers and Terraform

706
00:33:20,940 --> 00:33:22,620
to using the elastic stack itself.

707
00:33:23,380 --> 00:33:25,820
But even within Python, we have a lot of very good friends.

708
00:33:25,820 --> 00:33:29,340
This is just a very small subset of the kinds of libraries

709
00:33:29,340 --> 00:33:31,180
that we're using, all of which we love.

710
00:33:31,180 --> 00:33:32,780
We talked about PyTest love earlier.

711
00:33:32,780 --> 00:33:34,260
Hi.

712
00:33:34,260 --> 00:33:36,740
But all these different things help us make detonate.

713
00:33:36,740 --> 00:33:37,940
So thank you very much.

714
00:33:37,940 --> 00:33:39,420
If you want to grab me for a hallway track

715
00:33:39,420 --> 00:33:42,460
to learn more about protecting against threats using Python,

716
00:33:42,460 --> 00:33:44,140
you can come find me tomorrow.

717
00:33:44,140 --> 00:33:45,780
We have a blog series about detonate,

718
00:33:45,780 --> 00:33:48,380
the one in the in-depth Python stuff should come out this month.

719
00:33:48,380 --> 00:33:50,420
Again, big shout out to Sergey, who did all this work.

720
00:33:50,420 --> 00:33:52,420
Thank you to the Canadian Internet Registration Authority

721
00:33:52,420 --> 00:33:54,820
for these great stock photos, and find me on the internet.

722
00:33:54,820 --> 00:33:56,140
Thank you so much.

723
00:33:56,140 --> 00:34:05,940
As a fellow lady of the lake and a very big cat enthusiast,

724
00:34:05,940 --> 00:34:08,820
I am very plus one about a cat hallway track.

725
00:34:08,820 --> 00:34:11,380
So sign me up.

726
00:34:11,380 --> 00:34:13,780
So now for our next talk, we're going to have Eric take us away

727
00:34:13,780 --> 00:34:17,420
talking about isolating extension modules.

728
00:34:17,420 --> 00:34:18,700
All right.

729
00:34:18,700 --> 00:34:19,980
So my name is Eric Snow.

730
00:34:19,980 --> 00:34:21,940
I'm a Python core developer, and I gave a talk yesterday

731
00:34:21,940 --> 00:34:24,140
about per interpreter GIL.

732
00:34:24,140 --> 00:34:26,540
So today we're going to talk about one

733
00:34:26,540 --> 00:34:28,900
of the things I didn't talk about yesterday,

734
00:34:28,900 --> 00:34:33,260
which is how this relates to extension modules.

735
00:34:33,260 --> 00:34:37,180
So extension modules have to be isolated from each other

736
00:34:37,180 --> 00:34:39,100
because they're per interpreter.

737
00:34:39,100 --> 00:34:40,420
And so they have to be isolated

738
00:34:40,460 --> 00:34:42,180
from each other in the same way.

739
00:34:42,180 --> 00:34:45,140
Before I get into that, I want to say pretty much all the stuff

740
00:34:45,140 --> 00:34:48,780
I'll talk about right now is made possible by the effort

741
00:34:48,780 --> 00:34:51,620
of Peter Victor and another one of our core developers.

742
00:34:51,620 --> 00:34:54,100
And just I want to applaud his effort.

743
00:34:54,100 --> 00:35:01,660
I also want to say thanks to the captioners because as just

744
00:35:01,660 --> 00:35:03,420
like last year, they've been doing a great job.

745
00:35:03,420 --> 00:35:10,300
OK. So who does this relate to?

746
00:35:10,660 --> 00:35:13,860
People who create or maintain extension modules.

747
00:35:13,860 --> 00:35:16,660
Not everybody, but it's quite a few people.

748
00:35:16,660 --> 00:35:18,860
What does it relate to?

749
00:35:18,860 --> 00:35:20,740
Your extension modules.

750
00:35:20,740 --> 00:35:22,340
When should you worry about this?

751
00:35:22,340 --> 00:35:25,900
Now, if you want to.

752
00:35:25,900 --> 00:35:29,980
This, a lot of these APIs have been around since Python 3.5,

753
00:35:29,980 --> 00:35:33,940
but it's really going to matter starting in 3.12

754
00:35:33,940 --> 00:35:35,260
and increasingly so.

755
00:35:35,260 --> 00:35:40,060
So start thinking about it at least.

756
00:35:40,300 --> 00:35:41,820
Where do you want to work on it?

757
00:35:41,820 --> 00:35:45,260
You know. So why does this matter?

758
00:35:45,260 --> 00:35:47,140
There are lots of reasons, but the main one,

759
00:35:47,140 --> 00:35:49,100
like I was saying, it helps.

760
00:35:49,100 --> 00:35:51,380
If you want to support multiple interpreters,

761
00:35:51,380 --> 00:35:55,940
you need to do this stuff, which is the multi-phase init.

762
00:35:55,940 --> 00:35:59,300
And pep 630 defined exactly what people need to do.

763
00:35:59,300 --> 00:36:01,380
It got turned into a how-to document.

764
00:36:01,380 --> 00:36:02,700
So you can go look at that.

765
00:36:02,700 --> 00:36:04,940
It's really clear.

766
00:36:04,940 --> 00:36:06,220
What do you got to do?

767
00:36:06,220 --> 00:36:08,260
There are kind of four things really you got to do.

768
00:36:08,260 --> 00:36:11,940
That last one is support for a per interpreter gill.

769
00:36:11,940 --> 00:36:15,500
So for the actual supporting multiple interpreters themselves

770
00:36:15,500 --> 00:36:19,500
without the per interpreter gill, you need the first three.

771
00:36:19,500 --> 00:36:23,500
The first one, you got to convert static types to heap types.

772
00:36:23,500 --> 00:36:27,100
And so it involves these steps more or less.

773
00:36:27,100 --> 00:36:30,380
You got to take your static types and turn them,

774
00:36:30,380 --> 00:36:33,620
make a new array of high type slots

775
00:36:33,620 --> 00:36:35,300
and these different things.

776
00:36:35,300 --> 00:36:38,540
So that how-to kind of walks through this stuff.

777
00:36:38,540 --> 00:36:39,700
I have some slides here.

778
00:36:39,700 --> 00:36:41,420
I'm going to skip them.

779
00:36:41,420 --> 00:36:46,260
So the next thing, you got to take any global variables you

780
00:36:46,260 --> 00:36:50,260
got and move them into what's called module state.

781
00:36:50,260 --> 00:36:51,620
It's pretty straightforward.

782
00:36:51,620 --> 00:36:52,500
May take a little work.

783
00:36:52,500 --> 00:36:54,660
Depends on how you're using your global variables,

784
00:36:54,660 --> 00:36:56,580
how many you got.

785
00:36:56,580 --> 00:37:01,020
Again, that how-to document spells it out pretty well.

786
00:37:01,020 --> 00:37:03,820
And then for multi-phase init, once you

787
00:37:03,820 --> 00:37:06,420
got those other two things done,

788
00:37:06,420 --> 00:37:08,260
you implement multi-phase init.

789
00:37:08,260 --> 00:37:10,460
It's actually really straightforward.

790
00:37:10,460 --> 00:37:13,620
And there's not much more to it.

791
00:37:13,620 --> 00:37:15,660
Depending on how big your extension is,

792
00:37:15,660 --> 00:37:17,300
it doesn't really matter.

793
00:37:17,300 --> 00:37:20,660
There's just you take the init function you got

794
00:37:20,660 --> 00:37:25,500
and you convert it over into your exec function.

795
00:37:25,500 --> 00:37:27,060
You set up module slots.

796
00:37:27,060 --> 00:37:32,620
And the how-to document explains it really well.

797
00:37:32,660 --> 00:37:35,780
And then the last thing with the external global state.

798
00:37:35,780 --> 00:37:38,380
So when you have a library that you're

799
00:37:38,380 --> 00:37:40,380
relying on that has external state,

800
00:37:40,380 --> 00:37:42,300
you can't do a whole lot about that.

801
00:37:42,300 --> 00:37:44,340
You got to figure out how to manage that.

802
00:37:44,340 --> 00:37:48,020
Mostly you got to figure out if you have that sort of dependency.

803
00:37:48,020 --> 00:37:49,660
And if you do, you got to figure out

804
00:37:49,660 --> 00:37:51,500
how to make sure it's thread safe.

805
00:37:51,500 --> 00:37:54,060
Maybe throw some locks around how you access it.

806
00:37:54,060 --> 00:37:57,740
You got to make sure that your different instances

807
00:37:57,740 --> 00:38:01,140
of your extension are handling that properly.

808
00:38:01,140 --> 00:38:05,300
It shouldn't be that common, but it's something to be aware of.

809
00:38:05,300 --> 00:38:09,180
If you want to help with this, give us feedback.

810
00:38:09,180 --> 00:38:10,620
We've already got lots of feedback,

811
00:38:10,620 --> 00:38:12,120
and Peter's been able to turn that

812
00:38:12,120 --> 00:38:14,820
into a lot of really useful API.

813
00:38:14,820 --> 00:38:17,900
We also have documentation that documentation can always

814
00:38:17,900 --> 00:38:18,860
use some help.

815
00:38:18,860 --> 00:38:22,780
And anything else you can help with, just let us know.

816
00:38:22,780 --> 00:38:28,140
So again, it's kind of these three and then fourth step.

817
00:38:28,140 --> 00:38:30,140
And that's it.

818
00:38:30,220 --> 00:38:38,860
ROבוש

819
00:38:38,860 --> 00:38:40,100
Sorry I was organizing something.

820
00:38:40,100 --> 00:38:41,500
Thank you so much.

821
00:38:41,500 --> 00:38:46,860
And next, we have something about A Solomon.

822
00:38:46,860 --> 00:38:47,980
Presented by Felipe.

823
00:38:47,980 --> 00:38:52,220
Thank you.

824
00:38:54,900 --> 00:38:57,500
Hi, so today they're going to talk about A Solomon

825
00:38:57,500 --> 00:39:02,940
and how we are doing black activity with technology in Brazil.

826
00:39:02,940 --> 00:39:05,760
So first I will start with me.

827
00:39:05,760 --> 00:39:08,980
I'm called Felipe Demoraj, but you find me on the internet

828
00:39:08,980 --> 00:39:10,380
by Felipe Python.

829
00:39:10,380 --> 00:39:13,540
And some people ask me if that's how my mom called me.

830
00:39:13,540 --> 00:39:14,840
That's true.

831
00:39:14,840 --> 00:39:16,140
My mom called me Felipe Python.

832
00:39:16,140 --> 00:39:18,340
I'm a software engineer.

833
00:39:18,340 --> 00:39:20,980
I'm also the co-founder of AfroPython.

834
00:39:20,980 --> 00:39:22,280
I'm a Jiu-Jitsu blue belt.

835
00:39:22,280 --> 00:39:26,140
If you like Jiu-Jitsu, like come talk to me.

836
00:39:26,340 --> 00:39:28,100
I also speak four languages.

837
00:39:28,100 --> 00:39:31,300
I have been to ten countries so far, four continents.

838
00:39:31,300 --> 00:39:32,600
And I try to be healthy.

839
00:39:32,600 --> 00:39:36,660
I'm also a dog father, so I'll show a picture of my dog here.

840
00:39:36,660 --> 00:39:37,960
That's Pasoca.

841
00:39:37,960 --> 00:39:40,860
A little message here.

842
00:39:40,860 --> 00:39:44,060
And she is my second adoption.

843
00:39:44,060 --> 00:39:46,820
Actually, I am the second adoption of hers.

844
00:39:46,820 --> 00:39:49,700
Because at the first adoption she was mistreated,

845
00:39:49,700 --> 00:39:52,820
and she was given back to the place that she was born.

846
00:39:52,820 --> 00:39:55,340
And I adopted her.

847
00:39:55,340 --> 00:39:58,580
And since then she is very scared because she was beaten

848
00:39:58,580 --> 00:40:01,180
when she was pooping in the wrong place.

849
00:40:01,180 --> 00:40:05,380
So if I'm going to take a pet, it can be a cat, a dog,

850
00:40:05,380 --> 00:40:10,300
please take care of Van very well, please.

851
00:40:10,300 --> 00:40:18,460
Okay. Going back to AfroPython, that's how we started.

852
00:40:18,460 --> 00:40:22,020
And actually we came from a lot of women in IT events,

853
00:40:22,020 --> 00:40:24,060
especially jungle girls.

854
00:40:24,100 --> 00:40:28,300
And we understood that there was no incentive for black people

855
00:40:28,300 --> 00:40:30,780
in IT as we have for women in IT.

856
00:40:30,780 --> 00:40:33,700
So we decided to start an event that started as a workshop.

857
00:40:33,700 --> 00:40:35,340
This is our first meeting.

858
00:40:35,340 --> 00:40:38,580
And it started to grow.

859
00:40:38,580 --> 00:40:43,900
We had our first event that was a workshop in south of Brazil.

860
00:40:43,900 --> 00:40:45,980
And it started to grow.

861
00:40:45,980 --> 00:40:50,380
And more and more people get interested in AfroPython

862
00:40:50,380 --> 00:40:51,980
and Python itself.

863
00:40:51,980 --> 00:40:57,780
And as the time passed, we have more conferences and more time.

864
00:40:57,780 --> 00:41:01,260
And this was one of the biggest conference that we,

865
00:41:01,260 --> 00:41:03,380
biggest workshop that we have done.

866
00:41:03,380 --> 00:41:06,380
And after that we made a conference.

867
00:41:06,380 --> 00:41:08,220
It was 2019.

868
00:41:08,220 --> 00:41:11,900
And we realized that there was company willing to sponsor us

869
00:41:11,900 --> 00:41:13,380
and gave us support.

870
00:41:13,380 --> 00:41:17,260
And we wanted to give, to bring this change

871
00:41:17,260 --> 00:41:18,820
for more people as well.

872
00:41:18,860 --> 00:41:22,180
So we decided to make a company out of AfroPython

873
00:41:22,180 --> 00:41:25,540
that would be especially a boot camp where people are going

874
00:41:25,540 --> 00:41:27,420
to come for free, the students.

875
00:41:27,420 --> 00:41:28,860
But the company is going to be sponsoring

876
00:41:28,860 --> 00:41:30,660
so we can hire the people.

877
00:41:30,660 --> 00:41:33,380
And we start to make this change that we want to make

878
00:41:33,380 --> 00:41:39,580
to bring more black people to IT in a scaled way.

879
00:41:39,580 --> 00:41:42,580
This is our last event in person.

880
00:41:42,580 --> 00:41:46,300
Before that actually we had an online conference as well

881
00:41:46,300 --> 00:41:47,900
that went pretty well.

882
00:41:47,900 --> 00:41:49,100
But we don't have as many photos

883
00:41:49,100 --> 00:41:52,980
as we have for the in-person events.

884
00:41:52,980 --> 00:41:57,900
And after that we decided that we want

885
00:41:57,900 --> 00:42:01,820
to have a second conference that will be held in Salvador,

886
00:42:01,820 --> 00:42:03,700
the same city where this happened.

887
00:42:03,700 --> 00:42:05,300
I recall the pre-conference.

888
00:42:05,300 --> 00:42:07,100
Actually part of this is in Portuguese.

889
00:42:07,100 --> 00:42:11,700
If you want to learn a language, that's your chance.

890
00:42:11,700 --> 00:42:15,140
So we're going to have a conference in the middle

891
00:42:15,380 --> 00:42:19,620
of this year, 22 of July.

892
00:42:19,620 --> 00:42:21,460
If you want to come, if you're interested in,

893
00:42:21,460 --> 00:42:24,860
or maybe next year, come talk to me.

894
00:42:24,860 --> 00:42:28,540
And I'm going to do something different this year.

895
00:42:28,540 --> 00:42:32,420
I will call for an open space for black people in IT.

896
00:42:32,420 --> 00:42:36,900
Especially at PyCon we want to take a picture and see how many

897
00:42:36,900 --> 00:42:40,940
of us we are and how we can connect to each other.

898
00:42:41,020 --> 00:42:45,300
And if you want to come, please come and we're going to chat.

899
00:42:45,300 --> 00:42:48,100
That's what I have to talk.

900
00:42:48,100 --> 00:42:50,340
That's Tafra Python and I am Felipe de Morais.

901
00:42:50,340 --> 00:42:52,140
Thank you.

902
00:42:52,140 --> 00:42:53,460
Fantastic.

903
00:42:53,460 --> 00:42:59,340
Thank you so much.

904
00:42:59,340 --> 00:43:01,460
I love all these open spaces.

905
00:43:01,460 --> 00:43:03,740
It's always a really fun range of ones we hear,

906
00:43:03,740 --> 00:43:05,980
be it if we're slightly being teased

907
00:43:05,980 --> 00:43:07,940
about your lightning talk being selected

908
00:43:07,980 --> 00:43:11,700
or really great empowerment of all the people in our community.

909
00:43:11,700 --> 00:43:14,460
So now next up we're going to have Ross to take us away

910
00:43:14,460 --> 00:43:17,620
on our next lightning talk.

911
00:43:17,620 --> 00:43:19,060
Hello, I'm Ross Bryant.

912
00:43:19,060 --> 00:43:20,980
I just clicked that slide too soon.

913
00:43:20,980 --> 00:43:22,260
I lead Phyland's research team.

914
00:43:22,260 --> 00:43:24,860
Thank you to the organizers for giving me the opportunity.

915
00:43:24,860 --> 00:43:27,260
This is my first PyCon and I'm learning a lot

916
00:43:27,260 --> 00:43:34,260
about lightning talks and open spaces and overloaded acronyms.

917
00:43:34,260 --> 00:43:36,380
This invitation grabbed my attention yesterday

918
00:43:36,380 --> 00:43:39,260
and I bounded up the escalators brimming with excitement

919
00:43:39,260 --> 00:43:41,860
to talk with fellow security researchers.

920
00:43:41,860 --> 00:43:47,060
But the group that was leaving said they needed

921
00:43:47,060 --> 00:43:49,900
to make way for the sysadmins.

922
00:43:49,900 --> 00:43:52,700
So I leaned over and asked,

923
00:43:52,700 --> 00:43:56,300
isn't this for software reverse engineers?

924
00:43:56,300 --> 00:43:58,260
Never even heard of that term.

925
00:43:58,260 --> 00:44:00,580
This is for site reliability engineering.

926
00:44:00,580 --> 00:44:05,620
Well, farewell and good luck with your nines.

927
00:44:05,660 --> 00:44:09,540
I have to go now.

928
00:44:09,540 --> 00:44:11,580
So I want to talk to you about code obfuscation,

929
00:44:11,580 --> 00:44:15,220
specifically PyPI packages that contain obfuscated code

930
00:44:15,220 --> 00:44:18,140
that is itself malware or is malicious code

931
00:44:18,140 --> 00:44:20,700
that ends up putting malware on your machine.

932
00:44:20,700 --> 00:44:24,580
Nearly daily our automated platform detects obfuscated

933
00:44:24,580 --> 00:44:27,580
packages such as these and we report these

934
00:44:27,580 --> 00:44:31,500
to the PyPI security team and they're fantastic by the way.

935
00:44:31,500 --> 00:44:33,900
Both of these are easy to deobfuscate

936
00:44:33,940 --> 00:44:36,700
and what you find underneath is that each starts

937
00:44:36,700 --> 00:44:39,900
with an import statement and ends with malware dropped

938
00:44:39,900 --> 00:44:43,180
on your machine just as soon as you pip installed either of them.

939
00:44:43,180 --> 00:44:46,500
But for this talk they serve as minimal examples

940
00:44:46,500 --> 00:44:48,940
of what any obfuscation really intends.

941
00:44:48,940 --> 00:44:52,500
And that is, it's hard, it increases the difficulty

942
00:44:52,500 --> 00:44:54,420
for someone to reason about the code,

943
00:44:54,420 --> 00:44:55,820
including the original author.

944
00:44:55,820 --> 00:44:58,300
More about that in a moment.

945
00:44:58,300 --> 00:45:01,820
But this is typical of what we find in report.

946
00:45:01,860 --> 00:45:03,140
Pretty standard stuff.

947
00:45:03,140 --> 00:45:07,700
Lots of things there that we see across many obfuscated packages.

948
00:45:07,700 --> 00:45:09,500
This one was particularly nasty

949
00:45:09,500 --> 00:45:11,420
in that it dropped a remote access tool

950
00:45:11,420 --> 00:45:13,380
on your machine written in Golang.

951
00:45:13,380 --> 00:45:16,940
We have a blog post about that one.

952
00:45:16,940 --> 00:45:18,060
Next slide.

953
00:45:18,060 --> 00:45:20,780
This one was part of a massive typo squatting campaign

954
00:45:20,780 --> 00:45:22,660
that dropped a crypto wallet stealer.

955
00:45:22,660 --> 00:45:25,780
We have an entire blog post about a postmortem for this attack.

956
00:45:25,780 --> 00:45:28,380
It was about 900 packages typo squatting, about 40

957
00:45:28,380 --> 00:45:31,620
of the most popular packages across a wide variety of interests.

958
00:45:31,620 --> 00:45:35,300
So if you typed Matt Pult lib like I've typed so many times

959
00:45:35,300 --> 00:45:38,660
in my life and pip installed that, you got malware.

960
00:45:38,660 --> 00:45:41,060
And even though there's identifiers in this file

961
00:45:41,060 --> 00:45:46,180
that use non-ASCII, the Unicode abuse that this talk focuses

962
00:45:46,180 --> 00:45:49,020
on comes from this sample.

963
00:45:51,100 --> 00:45:54,820
So at first glance we see a number of the usual tricks.

964
00:45:54,820 --> 00:45:59,700
Dunder import, B64, B64 decode, Zlib decompress.

965
00:45:59,700 --> 00:46:03,300
But what, in fact this ended up being just a Discord token stealer

966
00:46:03,300 --> 00:46:07,020
but a Discord token stealer today is an SSH key stealer tomorrow.

967
00:46:07,020 --> 00:46:09,260
And these are in vogue right now.

968
00:46:09,260 --> 00:46:11,660
But this caught my eye and I said this can't possibly work.

969
00:46:11,660 --> 00:46:14,260
Like we see malware that gets published

970
00:46:14,260 --> 00:46:17,020
and the guys don't even test it and it doesn't even work.

971
00:46:17,020 --> 00:46:18,340
To me I thought, no this doesn't work.

972
00:46:18,340 --> 00:46:19,900
It can't possibly work.

973
00:46:19,900 --> 00:46:23,260
None of those self-identifiers are the same string.

974
00:46:23,260 --> 00:46:26,740
Like this just can't be true.

975
00:46:26,740 --> 00:46:29,500
Right? I mean self does not equal self.

976
00:46:30,180 --> 00:46:33,260
Even though maybe if you're at the back you can't see,

977
00:46:33,260 --> 00:46:35,620
if you look at the Unicode code points or the names,

978
00:46:35,620 --> 00:46:38,380
they're just two different strings altogether.

979
00:46:38,380 --> 00:46:40,820
And so I began reading the Python language reference

980
00:46:40,820 --> 00:46:44,180
and in chapter two I discovered that this is a design feature.

981
00:46:44,180 --> 00:46:47,180
The parser and the Python interpreter normalizes Unicode

982
00:46:47,180 --> 00:46:49,900
in some identifiers.

983
00:46:49,900 --> 00:46:53,060
And so this means that though two source code files could be

984
00:46:53,060 --> 00:46:54,780
different while being visually similar,

985
00:46:54,780 --> 00:46:56,940
the Python interpreter sees them as the same.

986
00:46:56,940 --> 00:46:59,060
And this is the advantage of this obfuscation.

987
00:46:59,060 --> 00:47:00,340
It's still readable.

988
00:47:00,340 --> 00:47:01,660
Self still looks like self.

989
00:47:01,660 --> 00:47:03,620
But any string matching or regex is looking

990
00:47:03,620 --> 00:47:07,140
for the canonical ASCII self, they're going to be blind to this.

991
00:47:07,140 --> 00:47:10,820
And so this raised my curiosity because I'm a mathematician.

992
00:47:10,820 --> 00:47:12,500
How many different ways can you do this?

993
00:47:12,500 --> 00:47:14,740
How many different variants are there of self?

994
00:47:14,740 --> 00:47:18,060
There's 19 S's where S like characters that normalize

995
00:47:18,060 --> 00:47:19,700
down to lowercase S. Thank you Ned

996
00:47:19,700 --> 00:47:22,780
for telling me what lowercase means now.

997
00:47:22,780 --> 00:47:26,460
And so there's about 122,000 ways you can write self.

998
00:47:26,460 --> 00:47:28,820
And that's not a terribly exciting identifier

999
00:47:28,820 --> 00:47:31,180
to look for when you're looking for malicious code.

1000
00:47:31,180 --> 00:47:34,300
But these are, you can see there's a lot

1001
00:47:34,300 --> 00:47:35,620
of digits in those numbers.

1002
00:47:35,620 --> 00:47:36,900
They're big.

1003
00:47:36,900 --> 00:47:39,420
Dunder import, subprocess, crypt, unprotect data.

1004
00:47:39,420 --> 00:47:41,860
And so what's the takeaway here?

1005
00:47:41,860 --> 00:47:44,940
The takeaway is that many of the state of the art obfuscation

1006
00:47:44,940 --> 00:47:47,980
detectors count many things, including function calls.

1007
00:47:47,980 --> 00:47:50,100
But if they're not normalizing these prior to counting,

1008
00:47:50,100 --> 00:47:51,620
all the counts are going to be wrong.

1009
00:47:51,620 --> 00:47:53,580
Moreover, the string, the regex

1010
00:47:53,580 --> 00:47:55,220
and string matching will be blind

1011
00:47:55,220 --> 00:47:56,540
to all the Unicode variants.

1012
00:47:56,540 --> 00:47:57,860
I hear you.

1013
00:47:58,220 --> 00:48:00,380
Even though this technique is noteworthy,

1014
00:48:00,380 --> 00:48:03,500
it allows this guy to hide in plain sight.

1015
00:48:03,500 --> 00:48:05,500
We can reason about the code and so can he.

1016
00:48:05,500 --> 00:48:08,420
So it's a strange obfuscation scheme.

1017
00:48:08,420 --> 00:48:09,740
This is the link to our research blog

1018
00:48:09,740 --> 00:48:11,780
where you'll find all the details that I suppressed here

1019
00:48:11,780 --> 00:48:13,260
at our Discord channel.

1020
00:48:13,260 --> 00:48:16,340
And I'm happy to talk about anyone later about this.

1021
00:48:16,340 --> 00:48:18,140
Thank you so much.

1022
00:48:18,140 --> 00:48:23,740
Thank you so much.

1023
00:48:23,780 --> 00:48:28,140
And then we have, next we'll have Juliana talking

1024
00:48:28,140 --> 00:48:32,580
about something that I found very scary personally is ETL.

1025
00:48:32,580 --> 00:48:41,380
Okay, I need the, there you go.

1026
00:48:41,380 --> 00:48:43,100
Can you hear me?

1027
00:48:43,100 --> 00:48:45,260
Can you hear me?

1028
00:48:45,260 --> 00:48:50,500
No? Okay, can you hear me now?

1029
00:48:50,500 --> 00:48:53,140
Wait. Can you hear me?

1030
00:48:53,820 --> 00:48:55,140
Now I got it.

1031
00:48:55,140 --> 00:48:56,660
What about this?

1032
00:48:56,660 --> 00:48:58,100
This one is fine too.

1033
00:48:58,100 --> 00:49:01,580
I don't think I need it.

1034
00:49:01,580 --> 00:49:04,500
Sorry. Hi. My name is Juliana.

1035
00:49:04,500 --> 00:49:08,580
I'm a software engineer and my talk today is called ETL,

1036
00:49:08,580 --> 00:49:14,500
Extract Transform Load, AKA life of a data engineer.

1037
00:49:14,500 --> 00:49:16,460
That's my mastodon.

1038
00:49:16,460 --> 00:49:18,460
So what is a data engineer?

1039
00:49:18,460 --> 00:49:21,180
It's a person who works in a variety of settings

1040
00:49:21,220 --> 00:49:26,020
to build systems that collect, manage, and convert raw data

1041
00:49:26,020 --> 00:49:30,260
into usable information for many different people in a company

1042
00:49:30,260 --> 00:49:35,180
like data scientists, business analysts, and so on.

1043
00:49:35,180 --> 00:49:40,540
So the goal of a data engineer is to make data accessible

1044
00:49:40,540 --> 00:49:44,340
so the organizations can use this data to evaluate

1045
00:49:44,340 --> 00:49:49,020
and optimize the performance or improve business.

1046
00:49:49,060 --> 00:49:50,700
The most common method used

1047
00:49:50,700 --> 00:49:55,660
in data engineer is the ETL, which stands for,

1048
00:49:55,660 --> 00:49:58,460
oh, it's a bit, sorry.

1049
00:49:58,460 --> 00:50:05,860
Sure. So ETL stands for extract, transform, load.

1050
00:50:05,860 --> 00:50:07,460
So let's go each of them.

1051
00:50:07,460 --> 00:50:11,220
Extract, it's when we extract the relevant data

1052
00:50:11,220 --> 00:50:14,740
from the source database, transform the data

1053
00:50:14,780 --> 00:50:19,100
so it's better suited for analytics and load the data

1054
00:50:19,100 --> 00:50:21,500
into a target database.

1055
00:50:21,500 --> 00:50:26,060
So I'm going to give an example of a recent project I work,

1056
00:50:26,060 --> 00:50:27,420
where I work.

1057
00:50:27,420 --> 00:50:31,380
So I work at this company called Remix, which is a software

1058
00:50:31,380 --> 00:50:34,820
that urban planners use to plan the cities.

1059
00:50:34,820 --> 00:50:39,300
And we usually bring data to Remix

1060
00:50:39,300 --> 00:50:44,580
so the urban planners can use this data to make better plans.

1061
00:50:44,900 --> 00:50:49,500
And one of the data we usually bring is the census data.

1062
00:50:49,500 --> 00:50:53,060
So what I did this year was bringing the Canadian census

1063
00:50:53,060 --> 00:50:55,060
data to Remix.

1064
00:50:55,060 --> 00:50:57,500
So you can see in this diagram, it's pretty simple,

1065
00:50:57,500 --> 00:51:00,740
but we have the Canadian census website.

1066
00:51:00,740 --> 00:51:04,220
We have the local database and the production database,

1067
00:51:04,220 --> 00:51:07,380
which will be the end goal.

1068
00:51:07,380 --> 00:51:11,100
So let's go for each of the process separately.

1069
00:51:11,100 --> 00:51:14,100
Extract, look at those guys.

1070
00:51:14,100 --> 00:51:18,060
They are moving data from one place to another.

1071
00:51:18,060 --> 00:51:23,020
And that's exactly what we do, like using Python scripts.

1072
00:51:23,020 --> 00:51:26,380
So we extract the data from the original source and load it

1073
00:51:26,380 --> 00:51:28,820
to a temporary database.

1074
00:51:28,820 --> 00:51:31,940
In Canadian census example, we extracted the data

1075
00:51:31,940 --> 00:51:35,860
from the Canadian census website to my local machine.

1076
00:51:35,860 --> 00:51:40,540
Transform, magic, that's where the magic happens.

1077
00:51:40,540 --> 00:51:42,180
Some ways we can transform data.

1078
00:51:42,660 --> 00:51:46,820
We can clean data, fit standards so we can use the data,

1079
00:51:46,820 --> 00:51:50,060
join different kinds of data, deduplicate data,

1080
00:51:50,060 --> 00:51:52,740
convert data into a consistent format.

1081
00:51:52,740 --> 00:51:54,420
And in the Canadian census example,

1082
00:51:54,420 --> 00:51:57,660
we join the census data with geographical information

1083
00:51:57,660 --> 00:52:00,620
because we needed to visualize that in Remix,

1084
00:52:00,620 --> 00:52:03,260
which is a map-based software.

1085
00:52:03,260 --> 00:52:07,020
So transformation is usually made using SQL, joining data,

1086
00:52:07,020 --> 00:52:11,980
creating and populating tables, creating the necessary indices.

1087
00:52:12,060 --> 00:52:17,820
Load. There are the guys again moving data from place to another.

1088
00:52:17,820 --> 00:52:21,220
So we just move the data from the temporary database

1089
00:52:21,220 --> 00:52:26,100
to a permanent place, usually a database that lives in production.

1090
00:52:26,100 --> 00:52:30,820
In Canadian census, we move the final table from a local database

1091
00:52:30,820 --> 00:52:33,820
to Remix production database.

1092
00:52:33,820 --> 00:52:37,420
After that, we can then create the data sets and layers,

1093
00:52:37,420 --> 00:52:41,580
which is what our customers will use in the Remix platform.

1094
00:52:42,700 --> 00:52:47,100
So the final result, let me see if that loads.

1095
00:52:47,100 --> 00:52:50,020
So, okay, this is the Remix platform.

1096
00:52:50,020 --> 00:52:52,500
This is the Canada map.

1097
00:52:52,500 --> 00:52:54,460
So here we have the data layers.

1098
00:52:54,460 --> 00:52:57,860
Population was one of the layers that we created.

1099
00:52:57,860 --> 00:52:59,740
And if you go for each block,

1100
00:52:59,740 --> 00:53:03,980
you can see the population amount for each block.

1101
00:53:03,980 --> 00:53:08,500
And that's the final result of this project.

1102
00:53:08,500 --> 00:53:11,500
That was my talk. Thanks for listening. Thank you.

1103
00:53:11,500 --> 00:53:14,500
APPLAUSE

1104
00:53:17,660 --> 00:53:19,300
Thank you so much for that talk.

1105
00:53:19,300 --> 00:53:23,180
And now for our last lightning talk of day two, afternoon talks.

1106
00:53:23,180 --> 00:53:25,420
We have Tyler who's going to go ahead and take it away.

1107
00:53:25,420 --> 00:53:26,900
Cool. Thank you, everyone.

1108
00:53:26,900 --> 00:53:29,740
I wanted to say thank you. This is my first time being at any conference

1109
00:53:29,740 --> 00:53:32,380
related to any sort of open source software.

1110
00:53:32,380 --> 00:53:33,980
I have been in the community for years,

1111
00:53:33,980 --> 00:53:36,220
but this is my first time actually meeting people in person.

1112
00:53:36,220 --> 00:53:38,620
And you all are so wonderful. So thank you so much.

1113
00:53:38,620 --> 00:53:41,460
APPLAUSE

1114
00:53:41,460 --> 00:53:44,300
So my name is Tyler Menezes. Here's a photo of me,

1115
00:53:44,300 --> 00:53:46,100
very embarrassing photo of me from when I was younger.

1116
00:53:46,100 --> 00:53:47,980
And I work for a non-profit.

1117
00:53:47,980 --> 00:53:50,420
You may have seen us over in the community spaces.

1118
00:53:50,420 --> 00:53:53,300
And we work helping get community college students

1119
00:53:53,300 --> 00:53:55,740
into open source software contributions.

1120
00:53:55,740 --> 00:53:59,100
So you may be thinking, community colleges, why community colleges?

1121
00:53:59,100 --> 00:54:02,340
Did you know that community colleges can give out bachelor's degrees now?

1122
00:54:02,340 --> 00:54:04,100
In most states.

1123
00:54:04,100 --> 00:54:07,980
Did you know that community colleges cost like $5,000 a year in tuition?

1124
00:54:07,980 --> 00:54:10,660
Which for those of you international, that may sound like a lot.

1125
00:54:10,660 --> 00:54:14,660
For those of you in the US, that's not very much.

1126
00:54:14,660 --> 00:54:17,020
So because of this, a lot of the students who go to these schools

1127
00:54:17,020 --> 00:54:20,180
are lower income. They work for service industry jobs, et cetera.

1128
00:54:20,180 --> 00:54:21,940
Really interesting backgrounds.

1129
00:54:21,940 --> 00:54:24,020
And recruiters don't come to community colleges, right?

1130
00:54:24,020 --> 00:54:26,780
That no one is, no companies are going to community colleges

1131
00:54:26,780 --> 00:54:28,940
and trying to get these students into tech jobs.

1132
00:54:28,940 --> 00:54:31,620
So we found that if we can get students some open source experience,

1133
00:54:31,620 --> 00:54:33,180
they're about twice as likely to get a job.

1134
00:54:33,180 --> 00:54:35,100
They're more confident. It's great.

1135
00:54:35,100 --> 00:54:38,180
So I'm here to talk to you today about how you can help students like this

1136
00:54:38,180 --> 00:54:39,700
get into open source software.

1137
00:54:39,700 --> 00:54:41,580
This talk is focused for maintainers.

1138
00:54:41,580 --> 00:54:44,460
How many people here consider yourself a maintainer?

1139
00:54:44,460 --> 00:54:47,460
OK, how many people here have at least one GitHub repo

1140
00:54:47,460 --> 00:54:51,260
that has like maybe a hundred lines of code or more?

1141
00:54:51,260 --> 00:54:53,180
OK, everyone here is a maintainer.

1142
00:54:53,180 --> 00:54:55,780
This is all we need because a lot of these students just need really,

1143
00:54:55,780 --> 00:54:58,700
really simple, easy things to get started with.

1144
00:54:58,700 --> 00:55:00,740
So this talk is for everyone here.

1145
00:55:00,780 --> 00:55:03,820
So what are the things we can do to help make open source software,

1146
00:55:03,820 --> 00:55:08,020
even small repositories, more accessible to beginner contributions?

1147
00:55:08,020 --> 00:55:11,020
First one, contributing .md file, right?

1148
00:55:11,020 --> 00:55:12,140
This is table stakes.

1149
00:55:12,140 --> 00:55:15,380
Every repository who wants to be friendly to beginners

1150
00:55:15,380 --> 00:55:17,540
needs a contributing .md file.

1151
00:55:17,540 --> 00:55:19,540
Resources, what should people look into?

1152
00:55:19,540 --> 00:55:21,740
What are the coding conventions and the code styles?

1153
00:55:21,740 --> 00:55:23,620
Is there a code of conduct? Things like that.

1154
00:55:23,620 --> 00:55:26,260
That should go into the contributing file.

1155
00:55:26,260 --> 00:55:28,220
Second thing, development environment.

1156
00:55:28,220 --> 00:55:30,620
This should probably also be in the contributing file,

1157
00:55:30,620 --> 00:55:32,860
but I want to call this out specifically.

1158
00:55:32,860 --> 00:55:36,020
There are a lot of very large open source projects

1159
00:55:36,020 --> 00:55:37,980
that if you follow their instructions,

1160
00:55:37,980 --> 00:55:41,020
the development environment that you will set up does not actually work

1161
00:55:41,020 --> 00:55:43,940
and you will spend an hour trying to troubleshoot it.

1162
00:55:43,940 --> 00:55:48,100
If you're a student who is new to open source software, that sucks.

1163
00:55:48,100 --> 00:55:50,180
It's going to take you a week. It's awful.

1164
00:55:50,180 --> 00:55:52,100
So check it regularly.

1165
00:55:52,100 --> 00:55:53,660
Make sure your development environment instructions

1166
00:55:53,660 --> 00:55:55,380
in your contributing file are actually working.

1167
00:55:55,380 --> 00:55:59,620
Should work for Linux and Mac and also ideally Windows.

1168
00:55:59,620 --> 00:56:02,580
A lot of lower income students who want to start contributing to this

1169
00:56:02,580 --> 00:56:05,700
don't have money for a Mac and maybe haven't learned that much about Linux.

1170
00:56:05,700 --> 00:56:09,700
Even if it just says to install WSL so you can run Linux on Windows,

1171
00:56:09,700 --> 00:56:11,260
call it out.

1172
00:56:11,260 --> 00:56:14,260
Third thing, continuous integration with linting and tests.

1173
00:56:14,260 --> 00:56:16,300
When someone opens a pull request, it's really helpful

1174
00:56:16,300 --> 00:56:18,540
if they get feedback right away instead of having to wait a month

1175
00:56:18,540 --> 00:56:20,620
because they're probably going to be pretty demoralized

1176
00:56:20,620 --> 00:56:23,140
if they waited a month and their pull request gets rejected

1177
00:56:23,140 --> 00:56:25,980
because they didn't use the right coding conventions.

1178
00:56:25,980 --> 00:56:28,900
So to help students avoid easy pitfalls.

1179
00:56:28,940 --> 00:56:31,860
Fourth thing, architecture.md.

1180
00:56:31,860 --> 00:56:34,340
This is how the pieces of your project fit together

1181
00:56:34,340 --> 00:56:38,260
and how information flows between the different files and modules.

1182
00:56:38,260 --> 00:56:40,620
If you want to create one of these for your project

1183
00:56:40,620 --> 00:56:43,660
and you don't know what to do, search for architecture.md

1184
00:56:43,660 --> 00:56:46,100
just on Google. There's some really, really great resources out there

1185
00:56:46,100 --> 00:56:49,460
that will help you put together a really good one for your project.

1186
00:56:49,460 --> 00:56:53,060
And the fifth one is having good first issue tasks.

1187
00:56:53,060 --> 00:56:57,180
Speaking of which, okay, so here's my sort of sub points.

1188
00:56:57,220 --> 00:56:59,780
A good first issue, what does it mean to be a good first issue

1189
00:56:59,780 --> 00:57:02,260
for a beginner? It should be self-contained, right?

1190
00:57:02,260 --> 00:57:05,340
Something that's solved in one file or maybe a couple of files

1191
00:57:05,340 --> 00:57:07,940
but it shouldn't be that hard to follow the flow through the thing.

1192
00:57:07,940 --> 00:57:12,500
You have some initial idea of probably how likely this is.

1193
00:57:12,500 --> 00:57:15,500
It should be clear. There should be enough data in the issue itself

1194
00:57:15,500 --> 00:57:17,380
that they don't have to ask you for clarification

1195
00:57:17,380 --> 00:57:19,180
because beginners are terrified of you.

1196
00:57:19,180 --> 00:57:21,020
They think you all are so cool.

1197
00:57:21,020 --> 00:57:22,900
I think you all are so cool too, by the way.

1198
00:57:22,900 --> 00:57:24,500
But the beginners especially think you're so cool

1199
00:57:24,500 --> 00:57:26,740
that they don't want to bother you with their stupid questions.

1200
00:57:26,780 --> 00:57:28,980
So it should be clear. It should be decided.

1201
00:57:28,980 --> 00:57:31,300
You shouldn't have to have a discussion with the maintainer

1202
00:57:31,300 --> 00:57:33,180
about what needs to be done.

1203
00:57:33,180 --> 00:57:34,780
And lastly, it should be recent.

1204
00:57:34,780 --> 00:57:38,140
It's not obvious to students if issues that are six months old

1205
00:57:38,140 --> 00:57:41,100
are still valid and if they spend like a week or two

1206
00:57:41,100 --> 00:57:42,820
getting their development environment set up,

1207
00:57:42,820 --> 00:57:45,420
that kind of sucks if it turns out they couldn't do anything.

1208
00:57:45,420 --> 00:57:48,100
Okay, so five seconds if you want to take a screenshot.

1209
00:57:48,100 --> 00:57:50,860
If you want to take a picture, there's your cheat sheet.

1210
00:57:52,940 --> 00:57:55,740
So if you are a maintainer, try to have your project do these things.

1211
00:57:55,740 --> 00:57:57,580
It's really helpful.

1212
00:57:57,580 --> 00:58:00,100
Last thing I wanted to call out, we are a nonprofit.

1213
00:58:00,100 --> 00:58:02,100
I'm not going to pitch you too much, but we are a nonprofit.

1214
00:58:02,100 --> 00:58:03,140
We're looking for mentors.

1215
00:58:03,140 --> 00:58:04,580
So if you're interested in mentoring students

1216
00:58:04,580 --> 00:58:07,420
a couple hours a week, visit that first link.

1217
00:58:07,420 --> 00:58:08,740
And if you're an open source project

1218
00:58:08,740 --> 00:58:10,300
that wants to help contribute issues

1219
00:58:10,300 --> 00:58:13,500
that these students can work on, visit that second link right there

1220
00:58:13,500 --> 00:58:15,780
and we'll actually help you write those good first issues even.

1221
00:58:15,780 --> 00:58:18,060
So thank you all so much. You've been wonderful.

1222
00:58:18,060 --> 00:58:19,780
And I hope to see you at the next PyCon.

1223
00:58:26,340 --> 00:58:29,100
Well, thank you so much everyone for participating

1224
00:58:29,100 --> 00:58:32,140
in the day two afternoon lightning talks.

1225
00:58:32,140 --> 00:58:34,260
We are now going to go run to the PyLadies auction.

1226
00:58:34,260 --> 00:58:38,340
So if you do have questions for us, find us later, not right now.

1227
00:58:38,340 --> 00:58:40,660
But again, we are still collecting those slides.

1228
00:58:40,660 --> 00:58:43,300
Again, we're both visible on Twitter.

1229
00:58:43,300 --> 00:58:45,980
If you are a mastodon, we're also there as well.

1230
00:58:45,980 --> 00:58:47,580
Or we are in the staff room.

1231
00:58:47,580 --> 00:58:50,620
So feel free to find us and have a great rest of your evening.

1232
00:58:50,620 --> 00:58:51,540
Thank you.

1233
00:58:51,540 --> 00:58:52,260
Bye.

