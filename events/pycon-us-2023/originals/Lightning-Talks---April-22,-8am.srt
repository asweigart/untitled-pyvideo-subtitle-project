1
00:00:00,000 --> 00:00:06,560
Hello, good morning everyone. You've made it. You're the early bird crowd.

2
00:00:06,560 --> 00:00:11,960
Congratulations! Give yourself a round of applause. You have done well. You have woken up early.

3
00:00:11,960 --> 00:00:18,120
You will have a lot more energy than me right now. So thank you so much for joining us for day two of Lightning Talks.

4
00:00:18,120 --> 00:00:23,040
We have some fantastic speakers who volunteered also to get up really early with you all today.

5
00:00:23,040 --> 00:00:26,160
So if I can go ahead and get our first speaker to come on up.

6
00:00:26,320 --> 00:00:33,680
And just some announcements again. So tomorrow, what are we going to be doing for conference and meetup organizers in our Lightning Talks?

7
00:00:33,680 --> 00:00:45,480
If you have any community-run conference or meetup or event, if you want to promote it with the big crowd, please send Lorena.

8
00:00:45,480 --> 00:00:46,720
What's your email?

9
00:00:46,720 --> 00:00:49,160
Lorena at python.org.

10
00:00:49,160 --> 00:00:54,480
Send a picture so you will get one slice and one minute to promote it.

11
00:00:54,480 --> 00:00:58,680
Yep, and that will be during tomorrow's, tomorrow morning's Lightning Talks.

12
00:00:58,680 --> 00:01:05,280
Some other things just to plug. Again, we have a code of conduct. Please make sure to adhere to it.

13
00:01:05,280 --> 00:01:11,720
We really like to make this a safe and inclusive space. And for our speakers, how long do they have to speak?

14
00:01:11,720 --> 00:01:19,800
They have five minutes and because they will have the clock, but we can also give them a hint by when it's 30 minutes left,

15
00:01:19,800 --> 00:01:27,680
we will do a slightly tap, which is like very gentle, very small. Then we can increase it until if they have to finish the sentence,

16
00:01:27,680 --> 00:01:31,360
we will give them a big round of applause to thank them.

17
00:01:31,360 --> 00:01:37,360
And I think that's it, unless if there's anything else before we jump into our first morning talk.

18
00:01:37,360 --> 00:01:40,000
Yeah, we should, you know, get started.

19
00:01:40,000 --> 00:01:45,520
No, yeah, I think that sounds great. Oh, and of course, Pi Ladies Auction is later today. It's awesome.

20
00:01:45,560 --> 00:01:51,120
I'm guessing it's already sold out, but go support Pi Ladies. You can make a donation. They're in the expo hall.

21
00:01:51,120 --> 00:01:56,520
Thank you. Thank you. Thank you. And let's go ahead and turn it over to our first speaker, Jeremy.

22
00:01:56,520 --> 00:02:03,320
Thank you. Hi, my name is Jeremy Schoenman. I am a senior director at Major League Baseball,

23
00:02:03,320 --> 00:02:14,200
and we focus primarily on solution engineering software, integrating and automating network infrastructure and other ballpark types of infrastructure.

24
00:02:14,240 --> 00:02:19,640
So today I'm going to talk about how to build colorful structured tables in Slack.

25
00:02:19,640 --> 00:02:26,360
I've been programming in Python for about 10 years and building Slack applications or bots for about four years.

26
00:02:26,360 --> 00:02:30,280
I'm going to talk about, you know, what are structured tables? Why are they important?

27
00:02:30,280 --> 00:02:36,880
And show you some code samples on how to do it. And this is something I wish I had known getting getting started.

28
00:02:36,880 --> 00:02:43,360
So this is an example of what I mean. When we have messages going into Slack,

29
00:02:43,360 --> 00:02:56,600
we want to provide our users very nice, pretty tables that are colored to give them very good visual cues and orient the data in a way that they are wanting to see.

30
00:02:56,600 --> 00:03:05,160
And in this case, I'm showing rack power usage. So we have racks at the ballparks. They have two power distribution units per rack.

31
00:03:05,160 --> 00:03:08,680
And we're collecting in real time the information about power.

32
00:03:08,680 --> 00:03:15,800
We're putting the outlets together so we can see kind of A and B plugs for our infrastructure and how they relate to one another.

33
00:03:15,800 --> 00:03:19,600
And you can kind of see we're colorizing it in a way where we're getting striations.

34
00:03:19,600 --> 00:03:25,920
And then we want to highlight certain fields like if there's no power, we want to show them in red.

35
00:03:25,920 --> 00:03:34,440
Another example is showing the game day schedule. So our operations team needs to know when games are happening and when they're going to start.

36
00:03:34,480 --> 00:03:38,480
So in our chat ops system, they can say what's our schedule.

37
00:03:38,480 --> 00:03:46,680
And you can kind of see this tabular information where it shows each of the games, when they start, where they're playing and the state of the game.

38
00:03:46,680 --> 00:03:49,760
So if it's in progress, you can kind of see that it's green.

39
00:03:49,760 --> 00:03:55,600
So these are kind of examples of what I what I mean by colorful structured tables.

40
00:03:55,600 --> 00:04:03,400
And Slack doesn't support this natively. And I don't think any of the chat systems support doing this kind of formatting natively.

41
00:04:03,440 --> 00:04:11,600
And so the technique really is to build these tables, convert them into a picture and then upload them to the system into Slack.

42
00:04:11,600 --> 00:04:14,120
So I'm going to show you some code how I do that.

43
00:04:15,880 --> 00:04:21,320
This is a Python function that's getting a request from Slack.

44
00:04:21,320 --> 00:04:25,080
I'm using their async bolt framework and this part of it.

45
00:04:25,080 --> 00:04:34,640
I'm really just using today's date to get the API to call this the MLB stats API so that we can get the game date data.

46
00:04:34,640 --> 00:04:38,960
So this is kind of just getting the data. And of course, if there are no games, it'll just say no games.

47
00:04:40,080 --> 00:04:44,840
Now, once I have the data, what we're going to do is we're going to turn that into a table.

48
00:04:44,840 --> 00:04:47,800
Now, I'm using the rich library package. It's awesome.

49
00:04:47,800 --> 00:04:50,440
So thank you for thank you to the maintainer for rich.

50
00:04:50,480 --> 00:04:57,960
It's incredible. And that produces the table that you see online 69 and then starting online 72.

51
00:04:57,960 --> 00:05:05,040
This is where we actually create the table as an image. We render it into a file and then we upload that file to Slack.

52
00:05:05,040 --> 00:05:09,360
So this is kind of the the little bits and pieces of how you actually do that.

53
00:05:09,360 --> 00:05:11,800
Now, I'm going to go into details of the table image.

54
00:05:13,000 --> 00:05:17,880
The table image is really just taking that table structure and we're using the rich console.

55
00:05:17,920 --> 00:05:29,040
We're going to flow that table through the rich console so that we can measure the size of the table so that we can have the size of the image kind of cropped.

56
00:05:29,040 --> 00:05:32,920
So we do that. And then online 145 and 146.

57
00:05:32,920 --> 00:05:41,960
What we're doing is we're telling the rich console the size of that table and now to record the data so that we can actually export that data into an image.

58
00:05:42,000 --> 00:05:49,240
So we do that and then I'm subclassing from a console image class here, which is the base class.

59
00:05:49,240 --> 00:05:58,960
If I want to do any type of console imaging, like if I wanted to take a CLI snapshot, you know, just the output of a show command of a switch.

60
00:05:58,960 --> 00:06:04,520
So this is kind of a reusable component. And this is really the meat on the potatoes of how this works.

61
00:06:04,520 --> 00:06:08,280
Rich console will allow you to export SVG.

62
00:06:08,280 --> 00:06:13,320
So we do that right here and then we convert that into an image file.

63
00:06:13,320 --> 00:06:16,880
Now here I'm using image magic and the convert utility.

64
00:06:16,880 --> 00:06:24,320
So I'm just kind of running that through a temporary directory and a sub process and I'm using async IO here.

65
00:06:24,320 --> 00:06:30,600
I'm running it as in an executor because I'm using the standard Python library for temporary directories.

66
00:06:30,600 --> 00:06:35,720
I'm not using a files, but that's how that works.

67
00:06:35,720 --> 00:06:39,560
This is the cleanup and these are the packages that I use.

68
00:06:39,560 --> 00:06:49,960
So for slack applications, it was the SDK and both from the slack company rich tables image magic to do the conversion and inkscape for kind of smoothing out the tables.

69
00:06:49,960 --> 00:06:51,680
That is my presentation. Thank you for your time.

70
00:06:58,320 --> 00:07:00,120
Thank you for the presentation.

71
00:07:00,120 --> 00:07:04,120
We can have a coffee and warm up with some Python code, which is amazing.

72
00:07:04,120 --> 00:07:09,400
So next we'll have another lesson talk about worker bees.

73
00:07:09,400 --> 00:07:14,000
Ooh, honey bees or are they what be of a day.

74
00:07:14,000 --> 00:07:16,800
So please listen to the lightning talk by Mario.

75
00:07:16,800 --> 00:07:20,280
Thank you. Good morning.

76
00:07:20,280 --> 00:07:24,280
Are you a fly on the wall or a worker bee?

77
00:07:24,280 --> 00:07:28,040
Ned's keynote yesterday got me thinking about my rolling community.

78
00:07:28,040 --> 00:07:30,960
Am I a fly or a bee?

79
00:07:30,960 --> 00:07:44,880
Now, a fly on the wall, it's very good at observing things from multiple perspectives, and it's very good at absorbing all that information, having a big macro level view of things.

80
00:07:44,880 --> 00:07:55,080
Also, flies are very good at retreating whenever they're intimidated, they kind of run away, but they usually return to a vantage point, whether the same place or a little different.

81
00:07:55,080 --> 00:07:57,800
But they take in a lot of information.

82
00:07:57,800 --> 00:08:03,080
Now, a bee, on the other hand, they feel most at home with other bees.

83
00:08:03,080 --> 00:08:04,920
They're very social animals.

84
00:08:04,920 --> 00:08:06,480
They like to keep busy.

85
00:08:06,480 --> 00:08:10,920
They whether they're gathering food or, you know, just like dancing.

86
00:08:10,920 --> 00:08:13,560
OK, maybe I'm not a bee.

87
00:08:13,560 --> 00:08:16,160
They're gentle. There's a little known fact of bees.

88
00:08:16,160 --> 00:08:17,880
They're gentle creatures.

89
00:08:17,880 --> 00:08:21,760
And the reason for this is if they use their stinger, they would die.

90
00:08:21,760 --> 00:08:24,560
So they'd rather just carry on with their business.

91
00:08:24,560 --> 00:08:27,120
Now, how can you know if you're a fly?

92
00:08:27,160 --> 00:08:38,480
One of the ways I know is when I pick up a meal at the expo hall, I usually look for a table that's kind of empty or not too many people.

93
00:08:38,480 --> 00:08:44,480
Or if someone talks to me or waves at me, I tend to think they're talking to someone else.

94
00:08:44,480 --> 00:08:56,080
Or most of all, like if your heart is pounding rapidly and mercilessly at the mere thought of doing a lightning talk, you might be a fly.

95
00:08:56,080 --> 00:09:04,360
Now, a bee, on the other hand, they look at an empty seat at a table and they think that's a direct invitation.

96
00:09:04,360 --> 00:09:11,200
A bee might wave at people they barely recognize or think they might have seen 10 years ago and they're waving at you.

97
00:09:11,200 --> 00:09:17,960
They might have two or three lightning talks on their back pocket in development or ready to go at any given moment.

98
00:09:17,960 --> 00:09:21,440
Those are bees. Now, which one of these am I?

99
00:09:21,440 --> 00:09:25,400
Let's take a look at last year when I came to my very first PyCon.

100
00:09:25,400 --> 00:09:29,960
I came to a very open, empty registration area. It was wonderful.

101
00:09:29,960 --> 00:09:34,240
I was literally on the wall in the back of a room.

102
00:09:34,240 --> 00:09:38,200
One of the first places I visited was the quiet room, a lovely place.

103
00:09:38,200 --> 00:09:42,800
And here's a terrible picture of food I was eating at an empty table.

104
00:09:42,800 --> 00:09:45,960
But then something happened.

105
00:09:45,960 --> 00:09:53,840
All of a sudden, I met new friends and other wonderful people from the Python community.

106
00:09:53,840 --> 00:09:57,800
I played some games. I met some more awesome people.

107
00:09:57,800 --> 00:10:03,160
And before I knew it, it was all done. It was just, you know, whirlwind.

108
00:10:03,160 --> 00:10:06,280
And next thing you know, it was 2023.

109
00:10:06,280 --> 00:10:12,640
So what happened in 2023? Well, it all started when my talk was accepted.

110
00:10:12,640 --> 00:10:15,880
So that was pretty great. You can catch that later today at 5 p.m.

111
00:10:15,880 --> 00:10:20,760
But not only that, I also presented a three hour tutorial earlier this week on Wednesday.

112
00:10:20,800 --> 00:10:25,960
I volunteered to set up the back end configuration for the Hublot platform.

113
00:10:25,960 --> 00:10:32,360
I became a bonafide booth fairy and helped set up the super awesome PSF booth in the Expo Hall.

114
00:10:32,360 --> 00:10:37,960
And I met a mysterious ghost. Actually, I'm pretty sure that was Georgie. I'm pretty sure.

115
00:10:37,960 --> 00:10:45,280
I also met a slew of awesome people I mostly know online or are great people in the community.

116
00:10:45,280 --> 00:10:49,880
I got to see not one, but two of my favorite podcasts live.

117
00:10:49,880 --> 00:10:54,120
I had an $11 espresso. It was worth it. Think of it as nectar.

118
00:10:54,120 --> 00:11:01,160
And I'll be hosting an open space at 1 p.m. later on. Fast API, HTML, tailwind. Come check it out.

119
00:11:01,160 --> 00:11:06,960
And like I mentioned, my talk tonight and of course, the obligatory selfie that went away.

120
00:11:06,960 --> 00:11:17,480
So am I a fly or a bee? You know, my inclination is usually to stand back and observe, to really take things in.

121
00:11:17,480 --> 00:11:27,640
That's usually the tactic I take. But you can see that maybe here at PyCon, things have changed a little bit.

122
00:11:27,640 --> 00:11:34,240
I know it sometimes feels like these two different kinds of people are sometimes at odds.

123
00:11:34,240 --> 00:11:40,160
I'm not here to tell you that you should be one or the other. I have sympathy and empathy for both.

124
00:11:40,280 --> 00:11:48,320
If you're here at PyCon, you should already know that it shouldn't be fly or bee. Fly versus bee.

125
00:11:48,320 --> 00:11:57,000
I think that is more the mood that we're in. If you are a fly and you're in the wall and observing, awesome.

126
00:11:57,000 --> 00:12:03,480
Now, if you want to try to transform a little bit more into a bee, maybe come talk to me afterwards.

127
00:12:03,480 --> 00:12:06,120
I have some notes. All right. Thank you.

128
00:12:11,160 --> 00:12:17,600
Thank you so much, Mario. I am very, very impressed by people who can teach three-hour tutorials.

129
00:12:17,600 --> 00:12:26,520
I think I can speak like 90 minutes in a row. Or you all, when we're doing the Pilates auction tonight, after that, I can't speak that much longer.

130
00:12:26,520 --> 00:12:33,880
That being said, yet another plug for a Pilates auction. It's fantastic. Again, go sponsor Pilates. We would love your support.

131
00:12:33,880 --> 00:12:37,720
Our next speaker, I think, has something that we can all connect with.

132
00:12:37,920 --> 00:12:40,520
I'm going to go ahead now and turn it over to our next speaker, Juan.

133
00:12:42,120 --> 00:12:47,560
Thank you. So good morning, everyone. I am your fellow Python attendees.

134
00:12:47,560 --> 00:12:55,560
So we all are required to wear masks. And if you're like me, it gets uncomfortable after eight hours wearing masks.

135
00:12:55,560 --> 00:13:05,880
So I think of this little device that I call ear saver. I don't actually know what to call it because COVID wasn't there when I learned English.

136
00:13:05,920 --> 00:13:09,320
So this is something I made up. If you know the name, let me know.

137
00:13:12,600 --> 00:13:21,480
So the first step for you to find a used cup, because most of the cups that you see here in the conference is one time used.

138
00:13:21,480 --> 00:13:28,000
And I think the cup will be happy to have a second purpose that comes back to our society and help us.

139
00:13:28,040 --> 00:13:36,400
So find a used cup and cut off the top and the bottom of the cup. And then you will have the piece of plastic here.

140
00:13:38,000 --> 00:13:50,480
This piece of plastic. And make sure that the plastic is shorter than your ear, because otherwise, if it's too long, it will push the back of our ear and then defeat the purpose of getting comfort to your ear.

141
00:13:50,480 --> 00:13:58,160
And then cut to have a knock onto the plastic so we can put it on.

142
00:14:00,480 --> 00:14:09,240
And so, but the first step is how you cut the plastic. Where did you find the scissor? You can ask the information desk. They have one yesterday when I asked.

143
00:14:09,240 --> 00:14:17,120
And you can ask your hotel desk as well. You can buy one from WorldCrene, which is like 200 feet from here in the corner.

144
00:14:17,760 --> 00:14:24,520
You can look for me. And PyCon, if you see me and come to me, I will help you cut your ear saver.

145
00:14:24,520 --> 00:14:36,360
Also, APAC boot. I don't know if it has scissor, but someone told me they have a really comfortable mask. So stop by and ask them to give you one.

146
00:14:36,360 --> 00:14:42,120
So come look for me. My name is Quang, and I hope you enjoy PyCon.

147
00:14:48,120 --> 00:14:57,640
Thank you, Quang. And I think it's really useful tip, right? We always talk about the technology, how we code stuff, but this is, you know, human technology.

148
00:14:57,640 --> 00:15:02,840
You can use your ten fingers and then make something to help yourself. It's very cool.

149
00:15:02,840 --> 00:15:11,920
So our next speaker, Lorraine, will be talking about some challenges and opportunity in Python meetups. So, Nastasia, it's yours.

150
00:15:12,720 --> 00:15:21,720
Fantastic. Thank you so much. My name is Lorraine Olja, and I'm a data scientist. And this is my very first PyCon.

151
00:15:21,720 --> 00:15:32,320
I want to share my understanding of how meetups and user groups adapted during the pandemic, what lessons we can take forward and how the landscape has changed as we resume in-person meetups.

152
00:15:32,720 --> 00:15:42,720
For those who aren't familiar with local tech meetups, I do literally mean that you can find community led groups of like like minded Python enthusiasts on meetup.com.

153
00:15:42,720 --> 00:15:48,720
And so here's two that I am involved with. If you can't find a group near you, maybe you can start one.

154
00:15:48,720 --> 00:15:54,720
And if there's one near you, maybe you'll be interested in volunteering and helping organizing or at least attending.

155
00:15:55,120 --> 00:16:04,520
So I should give a quick caveat that my viewpoint is, in fact, very New York City centric based on my involvement in the tech meetup scene there since 2017.

156
00:16:04,520 --> 00:16:15,720
And I am under the impression that New York may be unique in the meetup scene has been slower to resume in-person events compared to elsewhere due to challenges largely securing sponsorship space.

157
00:16:15,720 --> 00:16:22,520
So during the pandemic, meetups went virtual in a big way. This all seems obvious in retrospect. But at the time, organizers really had to figure it out.

158
00:16:22,520 --> 00:16:28,720
So NYC Python moved our weekly project nights to Discord for synchronous remote gathering.

159
00:16:28,720 --> 00:16:33,520
We use Zoom for monthly lightning talk events, live streaming directly to YouTube.

160
00:16:33,520 --> 00:16:38,920
And because we had mostly figured this out, this opened new opportunities to do brand new event types.

161
00:16:38,920 --> 00:16:44,720
And one such event that I'm particularly proud of facilitating was a demo day for boot camp final projects.

162
00:16:44,720 --> 00:16:49,020
Now, pre-pandemic, these students would have presented in front of employers in person.

163
00:16:49,020 --> 00:16:53,620
But when boot camps went virtual, their final project presentations were simply recorded and put online.

164
00:16:53,620 --> 00:17:02,620
Was anyone even seeing them? And as a career changer myself, I knew how important it was to have that very first experience where other folks saw your work and called you for the first time.

165
00:17:02,620 --> 00:17:08,220
Oh, you're a data scientist. And I was certain that we could pull together such an audience through the meetup.

166
00:17:08,220 --> 00:17:12,320
Plus, we could use Zoom breakout groups to approximate networking.

167
00:17:12,320 --> 00:17:17,220
And the best part was that this event came together because of three new organizers.

168
00:17:17,220 --> 00:17:20,920
They were attendees of the meetup, recent boot camp grads themselves.

169
00:17:20,920 --> 00:17:32,920
NYC Python provided the resources and experience creating this leadership opportunity while giving new organizers something valuable they could give their peers an opportunity to share their first technical talk.

170
00:17:32,920 --> 00:17:36,920
So virtual events and spaces are likely here to stay. They have a lot of advantages.

171
00:17:36,920 --> 00:17:41,120
They don't require sponsorship. They can be easier to record for asynchronous viewing.

172
00:17:41,120 --> 00:17:44,120
They can attract attendees from outside your immediate area.

173
00:17:44,220 --> 00:17:49,420
They're just generally more accessible for folks for whatever reason they can't attend in person.

174
00:17:49,420 --> 00:17:59,520
But people also love in-person events. While we're all here, co-located at PyCon US, occupying the same physical space helps build that sense of community.

175
00:17:59,520 --> 00:18:07,420
And so whereas Zoom can sometimes feel draining, going out and seeing familiar faces can be rejuvenating, like hanging out with friends.

176
00:18:07,420 --> 00:18:11,020
But returning to in-person events turns out to be really hard.

177
00:18:11,120 --> 00:18:14,220
Remote work has untethered us from physical space.

178
00:18:14,220 --> 00:18:20,720
And now many folks in tech, including myself, moved outside the city or just don't need to be in the office during the day.

179
00:18:20,720 --> 00:18:24,520
And this affects both organizers and sponsors.

180
00:18:24,520 --> 00:18:29,020
And yet we have a very clear build it and they will come scenario on our hands.

181
00:18:29,020 --> 00:18:34,220
For the in-person events that I've been involved with this year, we've seen attendance rates of about 40 percent.

182
00:18:34,220 --> 00:18:39,820
This represents how many people RSVP yes to a free event with no consequences for not coming.

183
00:18:39,820 --> 00:18:44,520
And historically, this number hovered pre-pandemic between 25 and 40 percent.

184
00:18:44,520 --> 00:18:47,920
So where do we go from here? I'd love to hear from other meetup organizers.

185
00:18:47,920 --> 00:18:53,520
But here's some ideas for me, such as teaming up to share venues with other community meetups,

186
00:18:53,520 --> 00:19:02,720
continue to nurture your physical your excuse me, your virtual spaces and events, recruiting new speakers and new organizers with inclusivity in mind.

187
00:19:02,720 --> 00:19:09,720
And if you're hiring, there are meetups out there that would be thrilled to introduce you to their developer communities in exchange for venue space.

188
00:19:09,720 --> 00:19:13,520
Or if you'd rather sponsor pizza, reach out and let your local meetups now.

189
00:19:13,520 --> 00:19:14,920
These are uncertain times.

190
00:19:14,920 --> 00:19:21,520
So try to reduce uncertainty on your end, please, before any real event planning and marketing takes place.

191
00:19:21,520 --> 00:19:25,720
And finally, the best way to support your local meetup group is by getting involved.

192
00:19:25,720 --> 00:19:36,420
Attend speak, organize is a great way to meet people and you can build those elusive soft skills that are so important in a semi-professional non-work environment.

193
00:19:36,420 --> 00:19:38,220
So again, my name is Lauren Olja.

194
00:19:38,220 --> 00:19:43,620
If this talk resonated with you or you saw yourself somewhere in the last three sides, I would love to chat.

195
00:19:43,620 --> 00:19:44,420
Thank you so much.

196
00:19:50,920 --> 00:19:52,020
Thank you so much.

197
00:19:52,020 --> 00:19:56,020
As an organizer, I really appreciate hearing lived lessons that other organizers have.

198
00:19:56,020 --> 00:19:58,620
So I really, really, really appreciate that.

199
00:19:58,620 --> 00:20:03,620
Up next, we have Brian, who's going to be talking to us about better exceptions using data classes.

200
00:20:06,620 --> 00:20:08,820
Hi, everyone. I'm Ryan Miller-Gulam.

201
00:20:08,820 --> 00:20:17,620
I'm going to be teaching you about a crazy idea that I've not really seen much elsewhere, but I've been doing a lot in my own code and it's been extremely helpful and useful.

202
00:20:17,620 --> 00:20:18,620
So here we go.

203
00:20:18,620 --> 00:20:20,220
Better exceptions using data classes.

204
00:20:20,220 --> 00:20:28,320
It helps make your tests more testable or your exceptions more testable and also more useful to whoever's catching it.

205
00:20:28,320 --> 00:20:33,220
So how most exceptions look is something like this.

206
00:20:33,320 --> 00:20:37,120
I'm going to start with an example of a function that raises an exception.

207
00:20:37,120 --> 00:20:42,820
This is going to be a silly little function that eats some food as a string because that makes sense.

208
00:20:42,820 --> 00:20:52,220
But it's a picky eater because if we feed it spam, it freaks out and raises an I don't like it exception saying I don't like spam.

209
00:20:52,220 --> 00:20:53,420
Otherwise, it continues on.

210
00:20:53,420 --> 00:20:56,120
I know it's kind of hard to see with the syntax highlighting there.

211
00:20:56,120 --> 00:21:01,720
But yeah, it just goes, you know, does whatever it does to eat the food because I don't know how to do that.

212
00:21:01,720 --> 00:21:05,320
So here is the function in all its glory.

213
00:21:05,320 --> 00:21:07,020
And now here is a basic exception.

214
00:21:07,020 --> 00:21:17,120
Honestly, this is better than what you will often see because it's actually a special exception subclass because most people are oftentimes people just raise an exception and call it a day.

215
00:21:17,120 --> 00:21:19,120
I've done it to no judgment there.

216
00:21:19,120 --> 00:21:22,220
It's fine, but we can do better.

217
00:21:22,220 --> 00:21:27,820
So here is a test that tests our eat food function.

218
00:21:27,820 --> 00:21:30,220
It tests that it should reject spam.

219
00:21:30,320 --> 00:21:35,220
By the way, I like to use the double underscores between the subject of my test and the behavior that I'm testing.

220
00:21:35,220 --> 00:21:37,620
I find that it makes test suites easier to skim.

221
00:21:37,620 --> 00:21:39,520
But that's not what this talk is about.

222
00:21:39,520 --> 00:21:41,020
It's just a compulsion of mine.

223
00:21:41,020 --> 00:21:44,420
But in case that's distracting you, that's what's happening.

224
00:21:44,420 --> 00:21:47,820
So let's look at how we would test this using pi test.

225
00:21:47,820 --> 00:21:59,420
So we enter a pi test dot raises context passing in the expected exception and then a regular match regular expression for it, which in this case is just the string.

226
00:21:59,520 --> 00:22:10,220
Oftentimes you'll have to wrap it in re dot escape if you've got any regular expression characters, but not in this case.

227
00:22:10,220 --> 00:22:15,420
And then we call whatever it's supposed to do whatever is supposed to raise the exception.

228
00:22:15,420 --> 00:22:18,420
So pretty normal stuff.

229
00:22:18,420 --> 00:22:22,920
But let's talk about why that's not ideal and how we can do better now.

230
00:22:22,920 --> 00:22:26,320
So good tests among other things and more or less.

231
00:22:26,320 --> 00:22:29,020
There's a lot of it depends here.

232
00:22:29,020 --> 00:22:33,220
But good tests often test a single behavior.

233
00:22:33,220 --> 00:22:37,020
Sometimes people will say good tests should only have a single assert.

234
00:22:37,020 --> 00:22:42,820
I don't know about that, but a single behavior I think is a pretty safe convention to follow.

235
00:22:42,820 --> 00:22:49,520
And then they only need to change when the behavior under test changes and also good tests are trivially correct.

236
00:22:49,520 --> 00:22:55,820
You should be able to tell at a glance that the test is doing what it's supposed to be doing because you don't have tests for your tests.

237
00:22:55,820 --> 00:22:58,520
Otherwise, you would never stop writing tests.

238
00:22:58,520 --> 00:22:59,820
So let's look at the test again.

239
00:22:59,820 --> 00:23:01,120
It's got a few issues.

240
00:23:01,120 --> 00:23:05,020
It's using string parsing regular expressions to test the data in it.

241
00:23:05,020 --> 00:23:14,620
And it's also testing mixing the testing of the formatting and the testing of the actual data that we care about because the data is trapped in the string,

242
00:23:14,620 --> 00:23:20,020
which is part of why the tests are these exceptions aren't really usable.

243
00:23:20,020 --> 00:23:24,320
If you try to accept or catch one of those exceptions,

244
00:23:24,420 --> 00:23:33,920
you have to parse the string in order to figure out how you can handle that in your own code or just kind of give up and let it crash, which is not great.

245
00:23:33,920 --> 00:23:36,220
So here's some better exceptions.

246
00:23:36,220 --> 00:23:44,720
So at its core, it's the same exception, but it's a data class now.

247
00:23:44,720 --> 00:23:52,020
And it has the data that we care about as the as an attribute on the data class.

248
00:23:52,020 --> 00:23:57,820
And then the error message is rendered in the Dunder string method.

249
00:23:57,820 --> 00:23:58,820
It's got an F string.

250
00:23:58,820 --> 00:23:59,520
Pretty simple.

251
00:23:59,520 --> 00:24:02,020
The same exact error message.

252
00:24:02,020 --> 00:24:04,820
Here it is all together.

253
00:24:04,820 --> 00:24:15,520
And here is the exception now, which it actually reads a little bit better in my opinion because you can actually see this is the data that we care about rather than having to format the string outside of the exception.

254
00:24:15,520 --> 00:24:18,220
So that's great.

255
00:24:18,220 --> 00:24:22,720
Right there and right there.

256
00:24:22,720 --> 00:24:26,720
So now here is a test, same test.

257
00:24:26,720 --> 00:24:30,920
We enter the pi test dot raises context.

258
00:24:30,920 --> 00:24:37,720
And this time we're catching the exception info as exception info.

259
00:24:37,720 --> 00:24:40,920
We call the eat food function.

260
00:24:41,020 --> 00:24:45,520
And now all we have to do is just do a cert.

261
00:24:45,520 --> 00:24:50,620
The exception exception info dot value equals whatever it is.

262
00:24:50,620 --> 00:24:59,020
We want that exception to be because the data classes brings equality checks and the attributes with it, which is really nice.

263
00:24:59,020 --> 00:25:04,620
So our tests are only focused on the data.

264
00:25:04,620 --> 00:25:06,620
Are we done?

265
00:25:06,620 --> 00:25:07,920
Oh, OK, cool.

266
00:25:07,920 --> 00:25:08,220
Thanks.

267
00:25:08,220 --> 00:25:09,020
Sorry.

268
00:25:09,020 --> 00:25:12,520
But yeah, that's the idea.

269
00:25:12,520 --> 00:25:12,920
Thanks.

270
00:25:12,920 --> 00:25:13,120
I'm Ryan.

271
00:25:13,120 --> 00:25:13,820
Really glad.

272
00:25:13,820 --> 00:25:14,120
Bye.

273
00:25:18,220 --> 00:25:19,420
Thank you so much.

274
00:25:19,420 --> 00:25:23,120
And I also don't like spam so I really can understand.

275
00:25:23,120 --> 00:25:25,320
So our next speaker is Robert.

276
00:25:25,320 --> 00:25:27,020
And I can see the screen is ready.

277
00:25:27,020 --> 00:25:29,820
So how about we just get started?

278
00:25:29,820 --> 00:25:32,220
OK, so I do not have slides.

279
00:25:32,220 --> 00:25:35,220
I am one of those flies who saw lightning talks.

280
00:25:35,220 --> 00:25:36,620
It was like bright, shiny light.

281
00:25:36,620 --> 00:25:38,920
And now I'm wondering what I got myself into.

282
00:25:38,920 --> 00:25:46,420
But this conversation, well, this arises from a conversation I had with a bounty hunter years ago.

283
00:25:46,420 --> 00:25:47,820
I was like, oh, you're bounty hunter.

284
00:25:47,820 --> 00:25:48,220
Cool.

285
00:25:48,220 --> 00:25:48,920
That must be exciting.

286
00:25:48,920 --> 00:25:53,420
He's like, well, actually, I'm an intern and I spend most of my time looking through public records.

287
00:25:53,420 --> 00:25:56,220
I'm like, huh.

288
00:25:56,220 --> 00:25:57,320
You know, I do family history.

289
00:25:57,320 --> 00:26:00,720
I spent a lot of time looking through public records, too.

290
00:26:00,720 --> 00:26:05,420
And I've never been satisfied with the tools for organizing that information.

291
00:26:05,420 --> 00:26:15,120
And so what I'm going to do here, it'll remind me if I get anywhere close, is to cover three

292
00:26:15,120 --> 00:26:22,520
excellent tools in Python for organizing information and hopefully start some conversations after this.

293
00:26:22,520 --> 00:26:30,720
OK, so something, you know, I do web in my day job and we work with relational databases all the time.

294
00:26:30,820 --> 00:26:34,620
And so I'm going to start with just creating a database here.

295
00:26:34,620 --> 00:26:41,720
And we're going to look at this and say, OK, we'll use names as an example of the problems that you face with records.

296
00:26:41,720 --> 00:26:44,920
And we're going to make this SQLite database.

297
00:26:44,920 --> 00:26:48,320
And OK, we need, excuse me.

298
00:26:48,320 --> 00:26:49,120
OK.

299
00:26:49,120 --> 00:26:55,820
And so we've got our first name and we've got our last name.

300
00:26:55,820 --> 00:27:00,920
And since I'm doing family history, I have some ancestors that came out of Sweden.

301
00:27:00,920 --> 00:27:10,220
And so I'm like, OK, well, Patronymic was usually the last name, but sometimes not.

302
00:27:10,220 --> 00:27:12,220
And sometimes people change their names.

303
00:27:12,220 --> 00:27:18,320
So I'm going to quit here and say, OK, let's start putting in some data here.

304
00:27:18,320 --> 00:27:22,220
And pretty standard stuff.

305
00:27:22,220 --> 00:27:30,420
And the problem that I come up against is I've got this hole right here, a null.

306
00:27:30,420 --> 00:27:39,520
And, you know, if the record said, OK, we want a Patronymic, I would say, oh, yeah, yeah, I know I'm going to look out there somewhere and I'm going to find this.

307
00:27:39,520 --> 00:27:42,320
But maybe somebody just said, well, OK, you know, that's my last name anyway.

308
00:27:42,320 --> 00:27:44,420
I'm going to put this in here.

309
00:27:44,420 --> 00:27:49,620
And so the problem is every public record has its own schema.

310
00:27:49,720 --> 00:27:56,620
And when you're dealing with lots of public records, things get messy fast.

311
00:27:56,620 --> 00:28:04,220
And you want to if you're in a relational database, you don't want to have loads of schemas like a new schema for every single record you're putting in.

312
00:28:04,220 --> 00:28:09,820
OK, well, let's let's say that SQLite is great.

313
00:28:09,820 --> 00:28:12,420
Visadata is great.

314
00:28:12,420 --> 00:28:14,320
Highly recommend those tools, by the way.

315
00:28:14,320 --> 00:28:14,920
All right.

316
00:28:14,920 --> 00:28:20,820
So we can try something that's a little different and built into Python.

317
00:28:20,820 --> 00:28:25,220
That is the shelf module or package.

318
00:28:25,220 --> 00:28:28,520
So I'm going to open that up and give you an example.

319
00:28:28,520 --> 00:28:37,720
OK, so now I have a comment here that says this is how Gramps approaches its data.

320
00:28:37,720 --> 00:28:39,720
This is the idea of how it goes.

321
00:28:39,820 --> 00:28:46,220
Gramps is a Python package that you can desktop based that is genealogical software.

322
00:28:46,220 --> 00:28:47,220
Really cool.

323
00:28:47,220 --> 00:28:53,320
And here is so here's our shelf package.

324
00:28:53,320 --> 00:28:54,220
Here's our record.

325
00:28:54,220 --> 00:28:56,820
We can put in any Python object we want.

326
00:28:56,820 --> 00:29:00,420
And so here I can say, well, here's what I got out of the record.

327
00:29:00,420 --> 00:29:01,920
Great.

328
00:29:01,920 --> 00:29:05,220
I don't have to put any null spots unless they were on the record.

329
00:29:05,220 --> 00:29:07,020
Say hey, I had a blank filled.

330
00:29:07,020 --> 00:29:11,520
And then I can just say hey, shelf open and put our record in there.

331
00:29:11,520 --> 00:29:16,320
And now we're at the we can save that out.

332
00:29:16,320 --> 00:29:21,720
I'm going to run this just for sake of.

333
00:29:21,720 --> 00:29:24,520
And now we've got our name shelf sitting there.

334
00:29:24,520 --> 00:29:27,720
And really it's a pickle jar under the covers.

335
00:29:27,720 --> 00:29:31,920
And then you can go and look up these different pieces.

336
00:29:31,920 --> 00:29:35,120
OK, so that's example number two.

337
00:29:35,220 --> 00:29:39,620
I think I've got just enough time to introduce example number three.

338
00:29:39,620 --> 00:29:46,820
So Tim Berners-Lee worldwide web thing still working on stuff.

339
00:29:46,820 --> 00:29:51,520
And I ran across this technology called RDF.

340
00:29:51,520 --> 00:29:58,220
And I'm just going to show you from the web because it is this is the part that I want

341
00:29:58,220 --> 00:30:05,020
to dig into and see if this is could be a good tool in the future.

342
00:30:05,020 --> 00:30:08,120
I am getting close to time.

343
00:30:08,120 --> 00:30:13,420
So RDF deals with a subject predicate object.

344
00:30:13,420 --> 00:30:22,520
And the idea is that you can also have the power of querying against a triple store there.

345
00:30:22,520 --> 00:30:25,120
And so you can have those pieces.

346
00:30:25,120 --> 00:30:26,120
Thank you.

347
00:30:31,020 --> 00:30:34,120
Major respect for no slides.

348
00:30:34,120 --> 00:30:36,220
I cannot do that.

349
00:30:36,220 --> 00:30:37,220
Major respect.

350
00:30:37,220 --> 00:30:39,220
Up next we have Calvin.

351
00:30:43,220 --> 00:30:44,220
All right, awesome.

352
00:30:44,220 --> 00:30:46,420
So I'm going to attempt a live demo here.

353
00:30:46,420 --> 00:30:48,220
That's why I'm going to do this really quickly.

354
00:30:48,220 --> 00:30:51,220
I want to show everyone there's nothing on my computer in the desktop folder.

355
00:30:51,220 --> 00:30:53,020
We're going to actually use cookie cutter.

356
00:30:53,020 --> 00:30:56,620
And then I'm going to tell you what I'm actually doing when I get this actually started because

357
00:30:56,620 --> 00:31:00,520
there's some time involved and some things that got to happen and some stuff that's got

358
00:31:00,520 --> 00:31:02,020
to be downloaded.

359
00:31:02,120 --> 00:31:04,120
And I'm doing this all over my cell phone.

360
00:31:04,120 --> 00:31:05,720
And it should be a lot of fun.

361
00:31:05,720 --> 00:31:06,720
Okay.

362
00:31:06,720 --> 00:31:07,720
Success.

363
00:31:07,720 --> 00:31:09,320
So now we're going to go into that directory.

364
00:31:09,320 --> 00:31:12,320
I just made a Django project called my awesome project.

365
00:31:12,320 --> 00:31:15,720
And I'm going to do a make compile in here.

366
00:31:15,720 --> 00:31:18,320
And this will all become clear what the heck is actually going on.

367
00:31:18,320 --> 00:31:21,920
So there's stuff going on behind the scenes there where it's downloading packages.

368
00:31:21,920 --> 00:31:27,720
I'm going to show you how to go zero to live code changes in Kubernetes in under five minutes

369
00:31:27,820 --> 00:31:32,620
because it's really cool to do that live in front of a big audience of people.

370
00:31:32,620 --> 00:31:35,620
So I'm going to actually launch a PyCharm.

371
00:31:35,620 --> 00:31:37,220
If I can type.

372
00:31:37,220 --> 00:31:38,320
There we go.

373
00:31:38,320 --> 00:31:39,920
And show you the directory structure that's going on here.

374
00:31:39,920 --> 00:31:42,820
So I'm launching directly into PyCharm.

375
00:31:42,820 --> 00:31:47,920
We're going to open up the oh my goodness, what happened here?

376
00:31:47,920 --> 00:31:50,120
Where am I at?

377
00:31:50,120 --> 00:31:52,820
It launched an ancient PyCharm.

378
00:31:52,820 --> 00:31:55,420
Uh-oh.

379
00:31:55,520 --> 00:31:56,520
Desktop.

380
00:31:56,520 --> 00:31:57,920
My awesome project.

381
00:31:57,920 --> 00:32:00,720
That was not planned.

382
00:32:00,720 --> 00:32:01,720
Trust.

383
00:32:01,720 --> 00:32:02,720
Okay.

384
00:32:02,720 --> 00:32:04,420
So we're actually here inside this project.

385
00:32:04,420 --> 00:32:06,120
The structure is all set up in here.

386
00:32:06,120 --> 00:32:07,920
We've got a full Kubernetes set of manifest.

387
00:32:07,920 --> 00:32:10,920
We've got scaffold that's going to be doing a lot of the work for us.

388
00:32:10,920 --> 00:32:13,320
We have a back end project and we have a front end project.

389
00:32:13,320 --> 00:32:17,420
So there's a react and a Django project both in here.

390
00:32:17,420 --> 00:32:23,920
And that make compile just took our pip tools compile, hashed all the things so we can have

391
00:32:24,020 --> 00:32:27,420
a repeatable set of containers that we can actually deploy.

392
00:32:27,420 --> 00:32:30,320
Right now it's actually going through and computing all the hashes so we can actually

393
00:32:30,320 --> 00:32:31,320
build the containers.

394
00:32:31,320 --> 00:32:32,820
I'm going to do that live on stage here.

395
00:32:32,820 --> 00:32:34,520
Nothing has been precomputed.

396
00:32:34,520 --> 00:32:38,820
There may be some things cached on my disk to help with my cell phone data storage situation.

397
00:32:38,820 --> 00:32:43,320
Because if you know you're doing Kubernetes, this could be kind of tricky.

398
00:32:43,320 --> 00:32:46,020
But the really cool part about all this is really the developer experience.

399
00:32:46,020 --> 00:32:50,120
I've become really obsessed with making the developer experience a super easy process

400
00:32:50,120 --> 00:32:51,120
for people to get going.

401
00:32:51,320 --> 00:32:57,220
I would love for everyone to get a blank laptop and be able to start developing within an

402
00:32:57,220 --> 00:33:02,920
hour and actually submit code changes to production, maybe to a pull request, let's say, to go

403
00:33:02,920 --> 00:33:06,420
into production in that time frame to make developers even more productive.

404
00:33:06,420 --> 00:33:11,220
But a lot of times the setup is so hard for developers to get going, especially if you're

405
00:33:11,220 --> 00:33:15,220
adding in Kubernetes in the mix and especially if the Internet is being slow.

406
00:33:15,220 --> 00:33:17,220
Come on, go little guy, you can do this.

407
00:33:17,320 --> 00:33:19,320
I'm going to go ahead and run this.

408
00:33:19,320 --> 00:33:23,320
Because there's one more step after this, which is actually I spin up Kubernetes.

409
00:33:23,320 --> 00:33:28,520
You'll see right now in my, I'm using Docker desktop, there are no Kubernetes containers

410
00:33:28,520 --> 00:33:31,320
currently running yet in this whole setup.

411
00:33:31,320 --> 00:33:32,320
There we go.

412
00:33:32,320 --> 00:33:33,320
All right, perfect.

413
00:33:33,320 --> 00:33:38,320
Now, last up, we're going to use a tool called scaffold and run dev.

414
00:33:38,320 --> 00:33:41,520
And this is actually going to build the containers on the fly.

415
00:33:41,620 --> 00:33:47,620
It's actually spinning up a Postgres instance, a Redis instance, a MailHog instance, and

416
00:33:47,620 --> 00:33:50,620
all, again, you can see them kind of happening here in real time.

417
00:33:50,620 --> 00:33:53,620
You can see the instances are spinning up now in Kubernetes.

418
00:33:53,620 --> 00:33:56,620
And if I go over and look at this, I've got the Django UI.

419
00:33:56,620 --> 00:34:00,620
You'll notice this localhost 8000, so just like as if you were doing local development

420
00:34:00,620 --> 00:34:04,620
like any normal place, like if you were doing it on your own file system.

421
00:34:04,620 --> 00:34:06,620
And then here's the React project.

422
00:34:06,620 --> 00:34:09,620
And I'm going to make a live code change.

423
00:34:09,720 --> 00:34:20,720
So if we go over here and go to base.html, and we'll go to, oh, boy.

424
00:34:23,720 --> 00:34:28,720
Oh, this is all, I'm launched an alternate reality here, unfortunately.

425
00:34:28,720 --> 00:34:31,720
Hello, PyCon.

426
00:34:31,720 --> 00:34:34,720
We've got plenty of time.

427
00:34:34,720 --> 00:34:35,720
What is going on?

428
00:34:35,820 --> 00:34:36,820
I'm like, oh.

429
00:34:36,820 --> 00:34:38,820
So everything's running.

430
00:34:38,820 --> 00:34:40,820
Let's go back over here to Django.

431
00:34:40,820 --> 00:34:42,820
We'll refresh this page.

432
00:34:42,820 --> 00:34:43,820
Hello, PyCon.

433
00:34:43,820 --> 00:34:49,820
And now the really cool part is I'm going to pull open this and actually open up that

434
00:34:49,820 --> 00:34:52,820
home.

435
00:34:52,820 --> 00:35:00,820
And you'll see that in this window over on the side, as it's saving, it's auto reloading.

436
00:35:00,920 --> 00:35:05,920
And you'll force a save there.

437
00:35:05,920 --> 00:35:06,920
There it is.

438
00:35:06,920 --> 00:35:07,920
Hello, PyCon.

439
00:35:07,920 --> 00:35:10,920
I've gotten fully into remote development on Kubernetes.

440
00:35:10,920 --> 00:35:13,920
You could do this locally, and you can also do this in the cloud anywhere you want.

441
00:35:13,920 --> 00:35:16,920
So if you want droplets on DigitalOcean or in EKS.

442
00:35:16,920 --> 00:35:20,920
Now the beauty of this whole thing is the same deployment that worked locally is what's

443
00:35:20,920 --> 00:35:22,920
going to deploy into production.

444
00:35:22,920 --> 00:35:25,920
We just changed our Kubernetes configuration file to point to a different endpoint, and

445
00:35:25,920 --> 00:35:28,920
now we're launching into the cloud or wherever we want to go.

446
00:35:29,020 --> 00:35:30,020
And it's all the same.

447
00:35:30,020 --> 00:35:31,020
Thank you very much.

448
00:35:31,020 --> 00:35:32,020
Awesome.

449
00:35:32,020 --> 00:35:35,020
So live demo is really hard, but live demo involving using the Internet is super hard.

450
00:35:35,020 --> 00:35:37,020
So that's a really good lightning talk.

451
00:35:37,020 --> 00:35:39,020
Thank you so much.

452
00:35:39,020 --> 00:35:43,020
And our next lightning talk is by Christina about workflow and web hooks.

453
00:35:43,020 --> 00:35:45,020
So please take us away.

454
00:35:45,020 --> 00:35:47,020
Oh, good morning, everyone.

455
00:35:47,020 --> 00:35:49,020
I'm Christina.

456
00:35:49,020 --> 00:35:51,020
I'm a web host.

457
00:35:51,020 --> 00:35:53,020
I'm a web host.

458
00:35:53,020 --> 00:35:55,020
I'm a web host.

459
00:35:55,120 --> 00:35:57,120
Oh, good morning, everyone.

460
00:35:57,120 --> 00:36:01,120
Right before I got on stage, I texted my friend, and I was like, I'm about to do a lightning

461
00:36:01,120 --> 00:36:02,120
talk.

462
00:36:02,120 --> 00:36:03,120
Wish me good luck.

463
00:36:03,120 --> 00:36:07,120
And they said, oh, yeah, good luck, you know, telling them about lightning and how cool it

464
00:36:07,120 --> 00:36:09,120
is and what it does.

465
00:36:09,120 --> 00:36:11,120
Unfortunately, I'm not going to be talking about lightning today.

466
00:36:11,120 --> 00:36:13,120
I'll be talking about workflows and web hooks.

467
00:36:13,120 --> 00:36:17,120
For some context, unfortunately, I am a game moderator in an NMO RPG.

468
00:36:17,120 --> 00:36:21,120
Being an online game moderator is a lot of fun.

469
00:36:21,220 --> 00:36:23,220
I'm a game moderator in an NMO RPG.

470
00:36:23,220 --> 00:36:27,220
Being an online game moderator is very hard because I am not a teenager.

471
00:36:27,220 --> 00:36:29,220
I have a full-time job now.

472
00:36:29,220 --> 00:36:35,220
I can't be in game all the time and teach people and help them with their tickets.

473
00:36:35,220 --> 00:36:39,220
So for this problem, I decided to go with a modern solution.

474
00:36:39,220 --> 00:36:41,220
I decided I want to scan our database.

475
00:36:41,220 --> 00:36:45,220
You know, every 30 minutes or so, I want to check for new tickets.

476
00:36:45,220 --> 00:36:49,220
I want to push that data into a web hook in my Discord channel where all the other moderators

477
00:36:49,320 --> 00:36:53,320
are and hopefully we can track tickets without logging into the game.

478
00:36:53,320 --> 00:36:59,320
So this is a gif that I took of the beginning of the process where I write some SQL in a

479
00:36:59,320 --> 00:37:01,320
SQL block.

480
00:37:01,320 --> 00:37:03,320
So I connect it to my database right here.

481
00:37:03,320 --> 00:37:07,320
And then I write some SQL where I select all the open player tickets from the database.

482
00:37:07,320 --> 00:37:09,320
So I select status equals open.

483
00:37:09,320 --> 00:37:13,320
And then I write some SQL where I select all the open player tickets from the database.

484
00:37:13,320 --> 00:37:15,320
So I select status equals open.

485
00:37:15,420 --> 00:37:17,420
And then I run the query and my query shows up.

486
00:37:17,420 --> 00:37:19,420
And then I connect it to my start trigger.

487
00:37:19,420 --> 00:37:21,420
So it runs every day.

488
00:37:21,420 --> 00:37:23,420
The only issue is our data is kind of ugly right now.

489
00:37:23,420 --> 00:37:27,420
And there's not really a clean way for us to put this data inside a Discord thread.

490
00:37:27,420 --> 00:37:29,420
So this is where some Python comes in.

491
00:37:29,420 --> 00:37:31,420
So this is my workflow currently.

492
00:37:31,420 --> 00:37:33,420
And this is my data.

493
00:37:33,420 --> 00:37:35,420
And I have a full-time job.

494
00:37:35,420 --> 00:37:37,420
I have a full-time job.

495
00:37:37,420 --> 00:37:39,420
And I have a full-time job.

496
00:37:39,420 --> 00:37:41,420
And I have a full-time job.

497
00:37:41,420 --> 00:37:43,420
And I have a full-time job.

498
00:37:43,520 --> 00:37:45,520
So this is my workflow currently.

499
00:37:45,520 --> 00:37:47,520
And this is the first two blocks that we saw on the previous page.

500
00:37:47,520 --> 00:37:53,520
So if I run it again, it will still pull the SQL messages and the current open tickets.

501
00:37:53,520 --> 00:37:57,520
Next, I get this data and I toss it into this Python block.

502
00:37:57,520 --> 00:38:01,520
So I will admit, I am still learning Python at the moment.

503
00:38:01,520 --> 00:38:09,520
But I found this really cool library called Pandas, which was really helpful in helping me figure out how to navigate this data.

504
00:38:09,520 --> 00:38:11,520
They have this really cool thing called a data frame.

505
00:38:11,620 --> 00:38:15,620
And it kind of enables you to manipulate and process data without writing a bunch of code again.

506
00:38:15,620 --> 00:38:19,620
And it kind of enables you to manipulate and process data without writing a bunch of code again.

507
00:38:19,620 --> 00:38:25,620
So for example, I use the sort values thing to sort by the thread ID and the timestamp of each ticket and their reply.

508
00:38:25,620 --> 00:38:31,620
So if I run this here, it runs all the data that I fed into this block.

509
00:38:31,620 --> 00:38:36,620
And then I format it in this block of the thread using Pandas again.

510
00:38:36,620 --> 00:38:40,620
And then I format that again to put it into a Discord embed object.

511
00:38:40,720 --> 00:38:42,720
So we can kind of see the output here.

512
00:38:42,720 --> 00:38:44,720
I can show the JSON version of this too.

513
00:38:44,720 --> 00:38:50,720
But basically it has the username of the person, the status of the ticket.

514
00:38:50,720 --> 00:38:56,720
And then I do some markdown formatting here too where I try to make it look nice and pretty for the Discord embed.

515
00:38:56,720 --> 00:39:02,720
So after that, I get this JSON and I want to post it to a Discord channel.

516
00:39:02,720 --> 00:39:08,720
So this is a sample Discord that I have and I have a channel called New Player Tickets.

517
00:39:08,820 --> 00:39:10,820
I go back here and I click Run.

518
00:39:10,820 --> 00:39:15,820
And hypothetically it should have posted to the channel, which it has.

519
00:39:15,820 --> 00:39:22,820
So this has been really helpful for my team in monitoring player tickets and seeing what's going on currently in game.

520
00:39:22,820 --> 00:39:26,820
So if something urgent happens, we can log in and help the players fix it.

521
00:39:26,820 --> 00:39:30,820
The only thing is that this is not a pretty picture.

522
00:39:30,920 --> 00:39:40,920
So I like to do things like, let's say I want to use this dog picture as the official ticket notification system.

523
00:39:40,920 --> 00:39:44,920
And Discord has a bunch of different fields you can use to customize their embeds.

524
00:39:44,920 --> 00:39:48,920
So I just put it in the avatar URL in the body.

525
00:39:48,920 --> 00:39:50,920
I run that again.

526
00:39:50,920 --> 00:39:52,920
Oh, you don't see the dog yet.

527
00:39:54,920 --> 00:39:56,920
But yeah, here's the dog.

528
00:39:57,020 --> 00:40:01,020
So yes, very awesome stuff.

529
00:40:01,020 --> 00:40:05,020
But yeah, there's a lot of other really cool fields that you can put in the JSON.

530
00:40:05,020 --> 00:40:07,020
So avatar URLs, the username.

531
00:40:07,020 --> 00:40:11,020
You can even change the color of the embed.

532
00:40:11,020 --> 00:40:15,020
So if I didn't want it to be black, I can make it hot pink or something.

533
00:40:15,020 --> 00:40:19,020
But yeah, that's my talk.

534
00:40:19,020 --> 00:40:25,020
And that's a quick little tutorial on how I modernized our Ticket Flow system.

535
00:40:25,120 --> 00:40:29,120
And hopefully you guys found it helpful.

536
00:40:29,120 --> 00:40:31,120
Thank you so much for that talk.

537
00:40:31,120 --> 00:40:33,120
Very, very cute fluffy creatures make me very happy.

538
00:40:33,120 --> 00:40:37,120
Up next we have Dee who's going to be talking about their Swiss Army knife for Python, I believe was the title.

539
00:40:37,120 --> 00:40:39,120
Fantastic.

540
00:40:39,120 --> 00:40:41,120
Take it away.

541
00:40:45,120 --> 00:40:47,120
Good morning, PyCon.

542
00:40:47,120 --> 00:40:49,120
I'm going to be talking about the Swiss Army knife.

543
00:40:49,120 --> 00:40:51,120
So I'm going to be talking about the Swiss Army knife.

544
00:40:51,220 --> 00:40:53,220
Good morning, PyCon.

545
00:40:53,220 --> 00:40:55,220
This is my first time at PyCon.

546
00:40:55,220 --> 00:40:57,220
I'm also new to Python.

547
00:40:57,220 --> 00:40:59,220
So I basically started learning Python last year.

548
00:40:59,220 --> 00:41:03,220
And I just wanted to talk a little bit about kind of my journey over the last couple of months.

549
00:41:03,220 --> 00:41:05,220
But I hope that, you know, you might be able to find something interesting here.

550
00:41:05,220 --> 00:41:07,220
So yeah, thank you.

551
00:41:07,220 --> 00:41:09,220
Thank you.

552
00:41:09,220 --> 00:41:11,220
So next we have Dejan.

553
00:41:11,220 --> 00:41:13,220
Thank you.

554
00:41:13,220 --> 00:41:15,220
Thank you Dejan.

555
00:41:15,220 --> 00:41:17,220
Thank you Dejan.

556
00:41:17,320 --> 00:41:19,320
So I hope that, you know, you might be able to find something interesting here.

557
00:41:24,320 --> 00:41:30,320
So one of the ways that I like to learn is that as I read about Python or, you know, watch tutorials,

558
00:41:30,320 --> 00:41:40,320
I like to implement what I've learned into little, let's say, utilities that perhaps I could reuse with me in the future.

559
00:41:40,420 --> 00:41:56,420
And what I've started to do is group these utilities into a command that I've built to kind of help me automate little aspects of my life down the road.

560
00:41:56,420 --> 00:41:58,420
And just a little bit about myself.

561
00:41:58,420 --> 00:42:02,420
I'm not a Python developer or I'm not a programmer.

562
00:42:02,420 --> 00:42:08,420
I did program fresh out of school, but now I work in corporate strategy.

563
00:42:08,520 --> 00:42:14,520
So if you want to talk about, you know, building businesses or finance, you can talk to me about that.

564
00:42:14,520 --> 00:42:16,520
But Python I do really like.

565
00:42:16,520 --> 00:42:24,520
So I want to show you kind of one of my, the beginning.

566
00:42:24,520 --> 00:42:28,520
So I've developed this command called drz.

567
00:42:28,520 --> 00:42:32,520
And currently it has three tools in it.

568
00:42:32,620 --> 00:42:38,620
And if you see that second little tool there called date, that's the first kind of function I've ever built in Python.

569
00:42:38,620 --> 00:42:46,620
So essentially when I work with dates, sometimes I need to work with American dates or European dates.

570
00:42:46,620 --> 00:42:54,620
And I've essentially built this function where it will just spit out, you know, if you give it the EU parameter,

571
00:42:54,620 --> 00:43:00,620
it'll just spit out the EU version of the date, which I can then copy paste into Python.

572
00:43:00,720 --> 00:43:04,720
And then I can also copy and paste into Excel, for example.

573
00:43:08,720 --> 00:43:12,720
The second tool you might have seen there is called Calc calculator.

574
00:43:12,720 --> 00:43:18,720
So, you know, a lot of us have desk calculators, like on our desk.

575
00:43:18,720 --> 00:43:24,720
But sometimes when I'm, let's say I'm working with Excel and I need to do multiple calculations at once,

576
00:43:24,820 --> 00:43:32,820
your Windows calculator is not always obvious when you need to use parentheses and which order you should be using parentheses.

577
00:43:32,820 --> 00:43:42,820
So essentially I've developed kind of a graphing calculator so that you can just enter all of your arguments

578
00:43:42,820 --> 00:43:48,820
and it'll compute them in a bed mass kind of way.

579
00:43:48,920 --> 00:43:54,920
So without going to a website or finding like a graphing calculator online, I just have it quickly there on the command line.

580
00:43:54,920 --> 00:44:02,920
And this is a bit trickier than I anticipated in developing, just because there's a lot of logic inside bed mass,

581
00:44:02,920 --> 00:44:06,920
which kind of took me a little bit of time to figure out.

582
00:44:09,920 --> 00:44:14,920
Now there's another tool that I use very frequently, and because I work in the finance department,

583
00:44:15,020 --> 00:44:21,020
nobody's a programmer in the finance department and they don't know about tools like PIP or source control or anything like that.

584
00:44:22,020 --> 00:44:28,020
So a lot of people in our team really have difficulties keeping track of like versions of files

585
00:44:28,020 --> 00:44:32,020
and they often overwrite old files and things like that.

586
00:44:32,020 --> 00:44:38,020
So I've built a tool to essentially, a quick and dirty source control for Excel files.

587
00:44:38,120 --> 00:44:48,120
And basically I have this tool called increment, and essentially what it does is it will archive old versions of my Excel files

588
00:44:48,120 --> 00:44:56,120
in a safe directory and it will make sure that it has a proper naming convention like with date and version

589
00:44:56,120 --> 00:45:00,120
so that essentially all the files are backed up and not lost.

590
00:45:00,220 --> 00:45:04,220
And now one last thing that I'm experimenting with right now.

591
00:45:04,220 --> 00:45:12,220
So because I work in the finance department and I work with some sensitive data and things like that,

592
00:45:12,220 --> 00:45:14,220
a lot of our laptops are locked down.

593
00:45:14,220 --> 00:45:26,220
So this is something you guys might have never seen, but this is the Wi-Fi network management kind of window.

594
00:45:26,320 --> 00:45:30,320
And if you look at that properties button, it has a security shield on it.

595
00:45:30,320 --> 00:45:36,320
So I actually have a lot of functions on my Windows system locked down, which I'm not able to access.

596
00:45:38,320 --> 00:45:42,320
And I just wanted to show you the tool to kind of extract the Wi-Fi password.

