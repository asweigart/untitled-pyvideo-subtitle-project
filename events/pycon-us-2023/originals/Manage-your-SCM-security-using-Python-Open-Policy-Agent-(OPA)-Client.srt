1
00:00:00,000 --> 00:00:04,000
Good morning, everyone, and welcome again to Python.

2
00:00:04,000 --> 00:00:10,000
Our next speaker is Natalie, and she's going to be talking about source code management

3
00:00:10,000 --> 00:00:17,000
and using the Python Open Policy region to ensure governance and security in your development process.

4
00:00:17,000 --> 00:00:19,000
Please welcome her to the stage.

5
00:00:19,000 --> 00:00:34,000
Good morning, everyone. I hope everyone is enjoying Python's research. Nice to see you.

6
00:00:34,000 --> 00:00:41,000
So my name is Natalie, and today we're going to talk about source code management, development, and compliance,

7
00:00:41,000 --> 00:00:46,000
a little bit about security and a little bit about Python.

8
00:00:46,000 --> 00:00:53,000
So a little bit about myself. I'm currently working as a scratch card engineer.

9
00:00:53,000 --> 00:00:57,000
My task is to use students who work in companies like Solante,

10
00:00:57,000 --> 00:01:04,000
who are rather happy to work mostly working on different infrastructure-related tasks,

11
00:01:04,000 --> 00:01:09,000
and enjoy conditions including my work using a lot of Python.

12
00:01:09,000 --> 00:01:14,000
And there's my Twitter handle, so I'm just going to put it in your hand.

13
00:01:14,000 --> 00:01:21,000
So today what I'm going to cover is basically source code management type.

14
00:01:21,000 --> 00:01:24,000
This is a big part of our development process.

15
00:01:24,000 --> 00:01:33,000
What kind of challenges some of us may face during the compliance procedures is probably happening.

16
00:01:33,000 --> 00:01:37,000
At some point, everyone's...

17
00:01:38,000 --> 00:01:43,000
Once companies are growing those and what does open policy use it,

18
00:01:43,000 --> 00:01:51,000
why do they want to use it, or how do they start using it, what is policies as a code,

19
00:01:51,000 --> 00:01:58,000
as well as how we can use policies to achieve source code management

20
00:01:58,000 --> 00:02:03,000
for other compliance-related tasks in our development process.

21
00:02:03,000 --> 00:02:08,000
So basically, source code management is just...

22
00:02:08,000 --> 00:02:15,000
I assume a lot of people know about it because most likely it's a big target group process

23
00:02:15,000 --> 00:02:20,000
that everyone is going through within the company when you develop your code.

24
00:02:20,000 --> 00:02:24,000
And it helps us to collaborate between our teams, right?

25
00:02:24,000 --> 00:02:32,000
It spores all the information, important information where we all can access it,

26
00:02:32,000 --> 00:02:38,000
we all can collaborate as well as it makes our jewelry with the product much faster.

27
00:02:38,000 --> 00:02:39,000
So it's different procedures.

28
00:02:39,000 --> 00:02:45,000
And these days, I think, source code management is not just storage of your code.

29
00:02:45,000 --> 00:02:50,000
A lot of extra features are added like CI, CD, Sparse, like secret management,

30
00:02:50,000 --> 00:02:57,000
and many more things can be added using some tooling for games and things like that.

31
00:02:57,000 --> 00:03:01,000
So just giving you an example of the code I'm talking about is like GitHub,

32
00:03:01,000 --> 00:03:09,000
GitHub, there's a few examples as well from Atlassian, there's Azure Reinforce, and many more.

33
00:03:09,000 --> 00:03:17,000
Most of this old one is based on GitHub these days.

34
00:03:17,000 --> 00:03:22,000
And so the reason I am bringing this up is I don't know if you're following or not,

35
00:03:22,000 --> 00:03:29,000
but these days, they're kind of like, last couple of years, they're recruiting and

36
00:03:29,000 --> 00:03:37,000
target packs related to the source code and related to the code, like code codes,

37
00:03:37,000 --> 00:03:39,000
or SolarWinds effects.

38
00:03:39,000 --> 00:03:45,000
I'm not sure if you want to know about it, but a lot of things were leaked right outside.

39
00:03:45,000 --> 00:03:51,000
And there's also those practices where people build in the code and are not always aware

40
00:03:51,000 --> 00:03:57,000
of the policies, what it says, or like how to post the news when you do a report.

41
00:03:57,000 --> 00:04:04,000
So because of that, I decided this talk might be useful, or let's say if, I know when you're

42
00:04:04,000 --> 00:04:10,000
working as an engineer as a developer, you're not always going to work in certain things

43
00:04:10,000 --> 00:04:15,000
right, and if there were compliance and security for some people in some cases,

44
00:04:15,000 --> 00:04:17,000
maybe not the most interesting part.

45
00:04:17,000 --> 00:04:22,000
And in some cases, it's just easier to automate that, so everyone just follows this rule

46
00:04:22,000 --> 00:04:28,000
without actually reading the rules and reading the laws and understanding where things are going.

47
00:04:31,000 --> 00:04:34,000
So why there's challenges.

48
00:04:34,000 --> 00:04:39,000
Source code management exists for so many years, and there's still challenges because,

49
00:04:39,000 --> 00:04:45,000
and I mentioned, there is a lot of different practices that are also changing because of

50
00:04:45,000 --> 00:04:49,000
change changing and the speed of doing it and self-courage changing.

51
00:04:49,000 --> 00:04:56,000
So also the way we work, right, the agile works more full, agile is more faster,

52
00:04:56,000 --> 00:05:02,000
now they've got continuous delivery, and people try to work more quickly from the main bank,

53
00:05:02,000 --> 00:05:09,000
and the deploy friend is going to run sometimes, get posts, and also like around those

54
00:05:09,000 --> 00:05:12,000
security-wide different rates.

55
00:05:12,000 --> 00:05:17,000
So because this part is a physical part, and all of us are doing things like this,

56
00:05:17,000 --> 00:05:24,000
sometimes it's kind of hard to make sure that everyone follows the exact same practice, right.

57
00:05:24,000 --> 00:05:31,000
Sometimes we have fuck fixes, or sometimes we have weird, how do you say,

58
00:05:31,000 --> 00:05:37,000
merge conflict rate, it ends up to be a bug or some other security issue.

59
00:05:37,000 --> 00:05:44,000
As well as like usually in the company people trade, people have access to free and to do different things,

60
00:05:44,000 --> 00:05:50,000
right, and we're free to create and reinforce, and now everyone always knows what kind of

61
00:05:50,000 --> 00:05:55,000
project is going to be created, how to make the project is now public, do they actually need to do that,

62
00:05:55,000 --> 00:05:58,000
or are all of those projects to be public, right.

63
00:05:58,000 --> 00:06:03,000
And it's hard to assure that everyone actually goes through the same practice and understanding

64
00:06:03,000 --> 00:06:08,000
all the reasons behind a trade when you just quickly turn into what you're doing.

65
00:06:08,000 --> 00:06:13,000
There are very interesting things that I always want to talk about specifically because I imagine

66
00:06:13,000 --> 00:06:21,000
that in this case it's information, and it's like a known inferior, it's always happening,

67
00:06:21,000 --> 00:06:26,000
but there are so many ways that it's still a big problem.

68
00:06:26,000 --> 00:06:33,000
So it's a big challenge where people just in the rough ways not condition their advocacy

69
00:06:33,000 --> 00:06:40,000
because there is a big rotation policy within their practices, but also let's say if something happens

70
00:06:40,000 --> 00:06:47,000
there's not always an mechanism to prevent this, or fix what happens because of this kind of

71
00:06:47,000 --> 00:06:54,000
So as I mentioned there are different accesses, there are different roles within the company,

72
00:06:54,000 --> 00:07:01,000
different people that have different access that can create, do, commit different things,

73
00:07:01,000 --> 00:07:07,000
so this is a choice as well since someone who manages all of that and is doing what can access

74
00:07:07,000 --> 00:07:14,000
everyone who can, and what can actually they do in order to make sure that they're doing the right

75
00:07:14,000 --> 00:07:20,000
thing. So this is the basic functions when you're going to the compliance or security

76
00:07:20,000 --> 00:07:27,000
you want your first-person management to think about your first-person management and the most

77
00:07:27,000 --> 00:07:32,000
possible effective and effective way to do it.

78
00:07:32,000 --> 00:07:37,000
So I'm going to talk about the first-person management.

79
00:07:37,000 --> 00:07:45,000
So when you think about your first-person management and the most possible effective areas.

80
00:07:45,000 --> 00:07:53,000
And here's this slide. So what does this slide represent? Basically, I don't know if anyone

81
00:07:53,000 --> 00:07:58,000
on the ranking complies with a mid-company or the other file, but basically when you're doing

82
00:07:58,000 --> 00:08:05,000
compliance, how is it treated? Right? First of all you decide on the type of the compliance or

83
00:08:05,000 --> 00:08:12,000
security norm that your company has to go to, and they decide on the area of, for example,

84
00:08:12,000 --> 00:08:17,000
structure, right? And what it represents is that there will be different, different policy

85
00:08:17,000 --> 00:08:23,000
teams that have different, different things, and everyone within the company needs to make sure

86
00:08:23,000 --> 00:08:29,000
that this proposal is followed, right? To give you an example, let's say someone came into the

87
00:08:29,000 --> 00:08:36,000
repository and they need to make sure that this repository is public or private, it depends, but

88
00:08:36,000 --> 00:08:43,000
that everyone can commit to doing so, but probably not to the main branch. So there's a different

89
00:08:43,000 --> 00:08:52,000
branch protection establishment as well as it could be something that people are, they say not,

90
00:08:52,000 --> 00:08:59,000
they should not commit those secrets, right? Or if that happened, it should probably first be

91
00:08:59,000 --> 00:09:07,000
how the speaker should be repeated, how does the sector, let's say, database was affected, and

92
00:09:07,000 --> 00:09:14,000
how to immediately back incident in that area, I think. So basically policy are kind of like

93
00:09:14,000 --> 00:09:19,000
actually explaining to you to understand what happened, when you think there's an accident,

94
00:09:19,000 --> 00:09:24,000
and then you can follow it through the development process. So these days this is kind of called

95
00:09:24,000 --> 00:09:31,000
a quick site, you have some stats, which also like you have those possible control issues, and then

96
00:09:31,000 --> 00:09:38,000
you create things like Sederland, and then you know if a test is affected by that test, and on our

97
00:09:38,000 --> 00:09:44,000
right side there is a column called mitigated by security controls, so those are the polls that

98
00:09:44,000 --> 00:09:49,000
you're writing in order to make sure that everything is secure and confirmed within our

99
00:09:49,000 --> 00:09:55,000
organization. And we talk about code, as I sort of mentioned in traffic, this is an example of

100
00:09:55,000 --> 00:10:02,000
seeing like something was leaked, let's say someone copied part of the code on their laptop, and

101
00:10:02,000 --> 00:10:09,000
then they were able to do it, and then they were able to do it again, and then they were able to

102
00:10:09,000 --> 00:10:16,000
copy part of the code on their laptop, and then it's made of that code, as you can see, the

103
00:10:16,000 --> 00:10:21,000
long-time key, so the code was leaked, right, and what kind of actions are going to take in order to

104
00:10:21,000 --> 00:10:28,000
fix that. So there's a map that we kind of have like stuff of those tools, which I mentioned before,

105
00:10:28,000 --> 00:10:34,000
and we call them control objectives and control restrictions, but this is kind of like a paper,

106
00:10:34,000 --> 00:10:41,000
what's going to happen, and what's going to, how we're going to control it. So if you look at that,

107
00:10:41,000 --> 00:10:49,000
this is kind of old and I would say security and compliance, security and compliance in some cases

108
00:10:49,000 --> 00:10:57,000
is kind of, in my opinion, like it's a big part of subculture development, but I feel like it's a

109
00:10:57,000 --> 00:11:05,000
big part of subculture development, but I feel like it's a big subculture development that we tend to have.

110
00:11:05,000 --> 00:11:13,000
So in the past, like this would be a, not the people work, but the culture framework's relevant,

111
00:11:13,000 --> 00:11:18,000
because it's going to look like, and not everyone understands it, there's lots of specific people,

112
00:11:18,000 --> 00:11:22,000
we call them auditors, right, who can read those files, who can understand it, who can take the

113
00:11:22,000 --> 00:11:29,000
auditors and see if you're complying with it. So basically what we just saw is kind of the policy, right?

114
00:11:29,000 --> 00:11:37,000
So how can it work? Basically, it can create some policies as a code, right? If this is just,

115
00:11:37,000 --> 00:11:44,000
just that, where there's some kind of, it could be a YAML or some kind of a do-sense, right, why we can

116
00:11:44,000 --> 00:11:51,000
just quote a file and make sure that it has some similar parameters that everyone can just use.

117
00:11:51,000 --> 00:12:05,000
So with creating these policies as a code, is the main focus of my talk, and there are different tools in the market

118
00:12:05,000 --> 00:12:12,000
that can adopt those tools, and this is what I'm going to cover. So why do we want to consider policy as a code?

119
00:12:12,000 --> 00:12:17,000
So as I said, there's a combination of every one of our highlights. There's direct tool, it's going to be

120
00:12:17,000 --> 00:12:22,000
written in my useful, written in my company, because I'm going to be in the paper, I'm going to be in a real work

121
00:12:22,000 --> 00:12:28,000
studio. Also there's recognition, right? I did not experience the importance of recognition these days.

122
00:12:28,000 --> 00:12:33,000
The mere force is not something we enjoy, it's not something we can receive, and there are so many benefits.

123
00:12:33,000 --> 00:12:40,000
As long as we're working together, when we see what happens, when we see how it goes, there's still a record of that,

124
00:12:40,000 --> 00:12:49,000
which is important for our compliance. So going back to the Open Policy Event, I think if you read that quote

125
00:12:49,000 --> 00:13:02,000
by Cedar, of Open Policy Event, that everything can be a policy, right? If you put it in a specific data structure

126
00:13:02,000 --> 00:13:12,000
and we can run some things, we can run some things in order to detect them, we need to read them, and what is that?

127
00:13:12,000 --> 00:13:18,000
So why not just to build something as a component, as a code, right? So combined as a code should be about some

128
00:13:18,000 --> 00:13:27,000
tools that we can build in-house, or some of them exist, but are pretty costly from experience. So I say if we can

129
00:13:27,000 --> 00:13:34,000
probably afford the things in production, but if you just want to follow the process and run it in a later environment or

130
00:13:34,000 --> 00:13:42,000
less important environment, so probably want to think about something in-house building my book, as well as, for example,

131
00:13:42,000 --> 00:13:49,000
you don't want to comply all your repositories, maybe e-house, in your company, something like, many production or code

132
00:13:49,000 --> 00:13:56,000
base, as well as the latest Internet porting. So you still want to comply with my specific practices for security purposes,

133
00:13:56,000 --> 00:14:02,000
but you probably don't want to run this expensive search trade unless you just get that in your case.

134
00:14:02,000 --> 00:14:15,000
So what is, how do you work with policy in the code, right? These things, there is an interesting Open Source policy agent,

135
00:14:15,000 --> 00:14:26,000
which is an Open Source, basically, it unifies the policy enforcement around the sentence. So I'm going to talk about how we can

136
00:14:26,000 --> 00:14:34,000
build them policies ourselves, how we can discuss them, how we can process them, right, using code. But Open

137
00:14:34,000 --> 00:14:43,000
Policy Agent also complies with the sentence platform. If you use Kubernetes, there is a way to use that agent with a lot of

138
00:14:43,000 --> 00:14:54,000
the sentences on security and compliance around Docker and other, like, there is different libraries that you can use to

139
00:14:54,000 --> 00:15:03,000
build code using Open Posts. And that basically is just declare to find which, and it likes to specify every policy as a code,

140
00:15:03,000 --> 00:15:12,000
and use simple API to propose a decision making from your sub-credit. Open Posts can be used to enforce policies,

141
00:15:12,000 --> 00:15:19,000
and you can set the micro-genesis, write security guidelines, the libraries, and the networking tools, and much more.

142
00:15:19,000 --> 00:15:31,000
So here is, let's say, a basic example. If I want to build a compliance service, and this should be something basically that I want to

143
00:15:31,000 --> 00:15:41,000
start with, it should look like this. It should be able to create input for my Open Policy Agent. It should be able to create

144
00:15:41,000 --> 00:15:50,000
open post solution against the policies we built, right? And the rules should be simple. So the policies should be,

145
00:15:50,000 --> 00:15:58,000
should be five things, and open algorithms should be returned allow or deny based on the policies. So it should be small,

146
00:15:58,000 --> 00:16:07,000
it could be many of them, it's usually this way. If I think about architecture of this application, I would think something like

147
00:16:07,000 --> 00:16:14,000
policy input and credit, I would think something like offer evaluator, and then I would think on action, which is like,

148
00:16:14,000 --> 00:16:25,000
excuse me, allow or deny. So here is an example. This is the image from the offer side, and we can use, and basically on this slide,

149
00:16:25,000 --> 00:16:33,000
how do we view the fact that we never used Open Policy Agent, and they tried to understand why we were trying to define here.

150
00:16:33,000 --> 00:16:43,000
So if we have a service, right, in this example is an application like the service, which simply receives a request,

151
00:16:43,000 --> 00:16:52,000
it could be running, or denied, anything else, and for the service, we want to decide how to handle this request, right?

152
00:16:52,000 --> 00:17:00,000
And then the service should be able to receive a response people with our slogan, so how do we do it? What is the next step?

153
00:17:00,000 --> 00:17:12,000
So the service would send a specific call to the Open Policy Agent, right, and the policy will contain an experience

154
00:17:12,000 --> 00:17:24,000
through conduct, which Open Policy Agent cannot take, compared to the list of policy created, and then detects things like

155
00:17:24,000 --> 00:17:32,000
a few things on that, so basically allow or deny this user to allow you. That's it. That's as simple as that.

156
00:17:32,000 --> 00:17:39,000
So let's say if we want to build a tool, we want to use Probe and Probe, and we want to build a simple,

157
00:17:39,000 --> 00:17:48,000
basic compliant tool for our resource probe management tool. There is open source library or client.

158
00:17:48,000 --> 00:17:59,000
It's pretty much maintained, maintained by the OPA. It's currently, like, latest in use versus recently happening.

159
00:17:59,000 --> 00:18:10,000
There is a nice recommendation to it, and it's hosted on IPY. So based on this theory, if you think about what kind of service

160
00:18:10,000 --> 00:18:17,000
you want to implement and what they just said about resource management, how is it all going to look like?

161
00:18:17,000 --> 00:18:24,000
So all this, those are kind of some things that may have some paper-like policy or we can put them in some case

162
00:18:24,000 --> 00:18:31,000
and some map, and we have this tool called Open Policy Agent, which we might know or might not know much about.

163
00:18:31,000 --> 00:18:37,000
We just know that it takes some input to process something, and it returns changes, actually.

164
00:18:37,000 --> 00:18:46,000
And we know that in-house, I have this kick-off organization, for example, where I want to manage the rules of my post

165
00:18:46,000 --> 00:18:53,000
without manually checking my 1,000 emails without manually checking what my management plans are doing.

166
00:18:53,000 --> 00:18:58,000
So if I think about service like this, but I'll tell you quickly, where do I start?

167
00:18:58,000 --> 00:19:04,000
So let's say in my company, I want to create one simple policy where users can just take the email,

168
00:19:04,000 --> 00:19:10,000
and I want to make sure when I'm really going to create it, it has a name brand and it has branching protections.

169
00:19:10,000 --> 00:19:17,000
So I know that GitHub or Google Apple gives back a drill how that works, based on the events that users create, right?

170
00:19:17,000 --> 00:19:20,000
So when someone creates a default, it creates a direct hook.

171
00:19:20,000 --> 00:19:29,000
So coming from infrastructure background, I think I probably can use some random rate to create a direct hook,

172
00:19:29,000 --> 00:19:38,000
which is just a serverless application. I could use it in Python because I'm just a first Python, and I can use that as my service.

173
00:19:38,000 --> 00:19:44,000
So what will service will do? It will detect my policies, right? It should be in the same group,

174
00:19:44,000 --> 00:19:50,000
or it could distort this one back, basically, because I want to manage. It should trigger my open agent.

175
00:19:50,000 --> 00:20:02,000
So the next step is to push the question, right, like, if this people has branching protection in the book, yes or no, right?

176
00:20:02,000 --> 00:20:06,000
And then based on the code, my linebacker can just take that as yes.

177
00:20:06,000 --> 00:20:15,000
Or, for example, if I'm asking to a user if it's a security person who watches all this components and security policies,

178
00:20:15,000 --> 00:20:20,000
they are followed within the company. So here's an example of the policy.

179
00:20:20,000 --> 00:20:29,000
So open policy isn't users' random language to write the policy. It's the, it needs some time to talk to the line,

180
00:20:29,000 --> 00:20:33,000
but based on the way that the playground, when you can try a different policy, you can add your own policy,

181
00:20:33,000 --> 00:20:41,000
you can find a lot of open source policies. And here's an example of the policy, which I would use for branch protection,

182
00:20:41,000 --> 00:20:49,000
for example, with UCLan. This is branch protection simply describing what is happening.

183
00:20:49,000 --> 00:20:56,000
So my user goes to UCLan, creates a repo that suggests to me, this is where my work is with open,

184
00:20:56,000 --> 00:21:01,000
this one resource, which in the end will be basically my compliance service.

185
00:21:01,000 --> 00:21:06,000
And this is the open agent which makes policy decisions and depends on results.

186
00:21:07,000 --> 00:21:12,000
And then my service would take this result and make the decision on what users are allowed to do or not,

187
00:21:12,000 --> 00:21:18,000
whether they're going to create or maybe to be built. Or maybe my service can just adjust their source by itself

188
00:21:18,000 --> 00:21:25,000
and it's a commission question. So user doesn't even know what's happening. But we're still controlling this company.

189
00:21:27,000 --> 00:21:35,000
So here's an example where say if I want to build my own language and then I want to connect to the open policy agent,

190
00:21:35,000 --> 00:21:45,000
as you can see it's basically super simple. You just call the library and so you first create the appliance

191
00:21:45,000 --> 00:21:51,000
and connect to the open agent and then you just make the connection. There is a different way how you can

192
00:21:51,000 --> 00:21:57,000
identify, you can put it in the local forest and the documentation is pretty good. And then as I said,

193
00:21:57,000 --> 00:22:04,000
when you design in this way, there are different ways how you can design in this part of your architecture.

194
00:22:04,000 --> 00:22:11,000
So it could be on the service. It could be a different open service or microservice if you run in the broker,

195
00:22:11,000 --> 00:22:17,000
for example, it's got all this work. It could be trigger by Red Hook or it could be a specific application

196
00:22:17,000 --> 00:22:24,000
like a lower GitHub. There is also an easy GitHub app to do that. And again, we can do it with type

197
00:22:24,000 --> 00:22:31,000
and we don't have to go into buying an expensive software to do this in my community, it's an easy thing.

198
00:22:31,000 --> 00:22:39,000
And there is also interesting approaches how you can do it within your CI-CD pipelines. So basically,

199
00:22:39,000 --> 00:22:45,000
if I think about how to get to an app like this, I would not create a trigger, I would create maybe a job

200
00:22:45,000 --> 00:22:51,000
which calls every day, runs all my reports and connects them or deletes them or maybe disables them

201
00:22:51,000 --> 00:23:00,000
or applies them based on the action I would put on the page. And within that, my service would just need

202
00:23:00,000 --> 00:23:07,000
to have a couple of things, which is connecting to the open agent and receiving the result.

203
00:23:07,000 --> 00:23:16,000
So this is basically an example of the action where I want to update my policy. Let's say you create the policy,

204
00:23:16,000 --> 00:23:24,000
something has changed and in this architecture, let's say you could possibly have policies

205
00:23:24,000 --> 00:23:31,000
policies called mapping to talk for somewhere in this database site. And everything also expenders

206
00:23:31,000 --> 00:23:39,000
for this to manage the policy itself. Or we could have something in the code repo which would limit the database

207
00:23:39,000 --> 00:23:46,000
and in my service, this is an FGRI 12 using the passing client to talk for their specific storage of my policies,

208
00:23:46,000 --> 00:23:53,000
and then you can have a database or anything else. So this is how you connect. This is how you update.

209
00:23:53,000 --> 00:24:00,000
You can delete. You can delete. There are so many things with this URL called the writing.

210
00:24:00,000 --> 00:24:10,000
So basically, someone is, let's say someone is getting hosted by this appalk and they want to try how easy it is

211
00:24:10,000 --> 00:24:18,000
to start using open policy agents within your company. It is not a fight. You just need to decide how do you want to run the agent.

212
00:24:18,000 --> 00:24:27,000
Number two is you need to write the policies. This is where sometimes we'll be spent.

213
00:24:27,000 --> 00:24:34,000
For now, I know there are more tools coming out how to generate these policies. I'm sure a certain

214
00:24:34,000 --> 00:24:40,000
system probably can help with that. We just need to validate that whatever version we have is correct.

215
00:24:40,000 --> 00:24:47,000
And then that's what the learning curve is. And then I would say if you're really interested in working in compliance

216
00:24:47,000 --> 00:24:53,000
with security and managing the policy and there's something for all your company that's effective, there's also a learning curve.

217
00:24:53,000 --> 00:25:02,000
And then just managing those two is something that would take some time. But once you run through this practice,

218
00:25:02,000 --> 00:25:10,000
everything else is kind of super easy. And you can just start building some policies. You can open source them, which is pretty cool.

219
00:25:10,000 --> 00:25:20,000
Let's say there is a very cool project where you can sign a lot of policies for GitHub. But my company countries using GitHub, right?

220
00:25:20,000 --> 00:25:30,000
And there is not many policies there. So we have our internal deposit policy where we run to create these policies for different cases.

221
00:25:30,000 --> 00:25:40,000
And my one goal is to run some source for my work on projects like this, I think. And basically, this is the end of my talk.

222
00:25:40,000 --> 00:25:43,000
Thank you so much. Everyone, welcome in.

223
00:25:43,000 --> 00:25:45,000
Thank you very much.

224
00:25:45,000 --> 00:26:03,000
Thank you, Natalie. Thanks for the question. I know software and compliance is probably not the most exciting thing,

225
00:26:03,000 --> 00:26:10,000
but policy as code is definitely a way to send that to our fellow developers. Thank you. And we all learned a lot.

226
00:26:10,000 --> 00:26:12,000
Let's give another round of applause for Natalie.

