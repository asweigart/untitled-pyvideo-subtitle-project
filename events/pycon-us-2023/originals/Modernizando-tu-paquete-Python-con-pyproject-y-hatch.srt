1
00:00:30,000 --> 00:00:36,640
con Oscar Cortés y su charla modernizando paquetes Python con PyProject y Hatch.

2
00:00:36,640 --> 00:00:37,640
Un aplauso.

3
00:00:37,640 --> 00:00:42,640
OK, listo.

4
00:00:42,640 --> 00:00:43,640
OK.

5
00:00:43,640 --> 00:00:51,640
Primero que todo, pues buenas tardes a todos los que se han tomado el tiempo de estar hasta

6
00:00:51,640 --> 00:00:52,640
acá.

7
00:00:52,640 --> 00:00:57,240
Sé que esta es como la hora más difícil porque venimos de almorzar y como dicen en

8
00:00:57,240 --> 00:00:59,200
México el mal del puerco y esto.

9
00:00:59,200 --> 00:01:03,200
Entonces vamos a hacer un poquito de estrenación.

10
00:01:03,200 --> 00:01:04,200
Listo.

11
00:01:04,200 --> 00:01:05,200
Su coca colita.

12
00:01:05,200 --> 00:01:06,200
OK.

13
00:01:06,200 --> 00:01:07,200
Listo.

14
00:01:07,200 --> 00:01:08,200
OK.

15
00:01:08,200 --> 00:01:25,160
Entonces hoy vengo a compartirles un poco de cómo es todo esto del proceso de modernización

16
00:01:25,160 --> 00:01:29,720
de Hatch y lo nuevo en Python para empaquetar que se llama PyProject.

17
00:01:29,720 --> 00:01:38,040
Entonces es un gusto poder estar aquí y compartir con todos ustedes y espero que esta presentación,

18
00:01:38,040 --> 00:01:42,200
esta charla les sea de totalmente utilidad en su día a día.

19
00:01:42,200 --> 00:01:46,040
La agenda que tenemos para esta presentación el día de hoy.

20
00:01:46,040 --> 00:01:50,320
Primero vamos a ver un pequeño introducción de cómo es el estado actual del empaquetamiento

21
00:01:50,320 --> 00:01:51,320
en Python.

22
00:01:52,320 --> 00:01:56,120
Vamos a ver un poquito de historia, los peps y todo esto.

23
00:01:56,120 --> 00:02:01,480
Vamos a hacer una mirada básica de cómo es empaquetado usando Hatch y luego vamos a

24
00:02:01,480 --> 00:02:06,880
hacer un pequeño ejemplo si los dioses de los live demos nos acompañan bien.

25
00:02:06,880 --> 00:02:09,000
Esperamos que todo salga de la mejor manera.

26
00:02:09,000 --> 00:02:13,640
Entonces manos a la obra.

27
00:02:13,640 --> 00:02:14,640
Quién soy?

28
00:02:14,640 --> 00:02:15,640
Pues me llamo Oscar Cortés.

29
00:02:16,600 --> 00:02:22,080
En mi tiempo libre, ayudó a mantener Django Wikis, un proyecto supergigante usado en grandes

30
00:02:22,080 --> 00:02:27,000
proyectos en Latinoamérica y alrededor del mundo, que pues trae todas las herramientas

31
00:02:27,000 --> 00:02:30,120
para tener una wiki usando los modelos en Django.

32
00:02:30,120 --> 00:02:34,760
Soy el co-creador de Help You Find Me, que es una herramienta que te permite compartir

33
00:02:34,760 --> 00:02:43,800
información de vital importancia para momentos en los que tú no quieres que esa información

34
00:02:43,800 --> 00:02:47,720
esté accesible para las personas que tú necesitas.

35
00:02:47,720 --> 00:02:53,080
Y aparte de eso, soy co-organizador de Python Nicaragua, ahí en el medio del continente

36
00:02:53,080 --> 00:02:57,280
americano está un paísito que se llama Nicaragua y es un gusto poder estar acá y hablando

37
00:02:57,280 --> 00:03:01,240
en español y compartir con todos ustedes.

38
00:03:01,240 --> 00:03:05,520
Quiero comenzar con este slide y así impactarlos visualmente.

39
00:03:05,520 --> 00:03:09,880
Y es que cuando hablamos de empaquetamiento en Python, la mayor parte del tiempo vemos

40
00:03:09,880 --> 00:03:14,600
todas esas terminologías, vemos toda esa información y que para alguien que está

41
00:03:14,600 --> 00:03:20,160
metiéndose al mundo de Python, que está iniciando o que quiere compartir su código,

42
00:03:20,160 --> 00:03:23,240
toda esa información es muy difícil de procesar y lo miramos en el keynote de ahora.

43
00:03:23,240 --> 00:03:27,800
Hay mucha información que para alguien que está comenzando a dar sus primeros pasos

44
00:03:27,800 --> 00:03:29,280
se vuelve un poco complicado.

45
00:03:29,280 --> 00:03:33,080
Y ese es el estado actual del empaquetamiento en Python.

46
00:03:33,080 --> 00:03:37,800
Hay muchas cosas que quizás ya no se usen, que quizás estén obsoletas o que quizás

47
00:03:37,800 --> 00:03:42,000
no funcionen dentro de tu flujo de trabajo del día a día, pero la mayor parte del tiempo

48
00:03:42,000 --> 00:03:45,520
te vas a encontrar con algo como esto.

49
00:03:45,520 --> 00:03:50,480
Y aparte de eso, la gente no le pone el interés que tiene toda la parte del empaquetamiento

50
00:03:50,480 --> 00:03:51,480
en Python.

51
00:03:51,480 --> 00:03:54,840
Sí soy programador en Python y sé hacer mío en la mundo y sé programar en Django o lo

52
00:03:54,840 --> 00:04:00,760
que sea, pero muchas veces cuando viene esto de, hey, puedes abstraer esta parte de tu código

53
00:04:00,760 --> 00:04:05,040
y hacerla accesible al internet, no sabemos cómo crear un empaqueto en Python, no sabemos

54
00:04:05,040 --> 00:04:08,240
cómo subir esa información que está accesible para otros.

55
00:04:08,240 --> 00:04:13,880
Y entonces a veces terminamos enviando más información de la que podemos o compartiendo

56
00:04:13,880 --> 00:04:15,520
aquello que no queremos compartir.

57
00:04:15,520 --> 00:04:20,000
Entonces esa es una oferta de trabajo que me encontré hace poco y uno de esos requerimientos

58
00:04:20,000 --> 00:04:23,560
era que la persona fuera capaz de crear paquetes en Python.

59
00:04:23,560 --> 00:04:25,920
Y a mí me llamó la atención porque tú no lo es.

60
00:04:25,920 --> 00:04:30,280
Nadie te dice como eres capaz de crear paquetes en Python, pero es algo muy importante a tener

61
00:04:30,280 --> 00:04:34,240
en cuenta cuando hablamos de programación y hablamos de Python como tal.

62
00:04:34,240 --> 00:04:38,040
Entonces siempre se preguntan como por dónde empiezo.

63
00:04:38,040 --> 00:04:42,160
No quiero empezar aprendiendo un montón de tecnologías, un montón de herramientas.

64
00:04:42,160 --> 00:04:45,040
Cuál es el punto inicial para cualquier persona.

65
00:04:45,040 --> 00:04:48,400
Y aunque va a sonar feo, va a sonar siempre la respuesta más básica, va a sonar siempre

66
00:04:48,400 --> 00:04:52,480
la respuesta más común, siempre inicia por la documentación.

67
00:04:52,480 --> 00:04:56,920
Entonces Python le ha puesto tanto empeño a todo este proceso de empaquetamiento que

68
00:04:56,920 --> 00:05:03,640
ha creado una guía completa para que tu carrera para empaquetar un paquete o crear tu código

69
00:05:03,640 --> 00:05:07,720
y ponerlo disponible en internet, sea bastante fácil.

70
00:05:07,720 --> 00:05:11,280
Entonces tenemos la guía de empaquetamiento en Python y que cubre totalmente todo el proceso

71
00:05:11,280 --> 00:05:15,360
desde tener tu código hasta mandarlo ya a PyPI.

72
00:05:15,360 --> 00:05:21,360
La siguiente y que no muchos conocen es que PyPI, que es la interfaz donde nosotros subimos

73
00:05:21,360 --> 00:05:24,960
todos nuestros paquetes, tiene una versión de pruebas.

74
00:05:24,960 --> 00:05:27,240
Y ¿de qué nos sirve la versión de pruebas?

75
00:05:27,240 --> 00:05:28,240
Para cometer errores.

76
00:05:28,240 --> 00:05:33,080
Entonces cuando crees tu paquete, asegúrate de primero subirlo a tu versión de pruebas

77
00:05:33,080 --> 00:05:36,760
de PyPI, que es test.pypi.org.

78
00:05:36,760 --> 00:05:37,760
Y listo.

79
00:05:37,760 --> 00:05:41,280
Ahí vas a poder darte cuenta si funciona, si la documentación se hace de la manera

80
00:05:41,280 --> 00:05:45,160
correcta y así sucesivamente.

81
00:05:45,160 --> 00:05:50,460
Y por último, aparte de la guía, tienes un ejemplo práctico.

82
00:05:50,460 --> 00:05:54,280
Tienes un ejemplo que tú puedes tomar, correrlo en tu propio computadora y saber qué es lo

83
00:05:54,280 --> 00:05:55,440
que estás haciendo.

84
00:05:55,440 --> 00:05:59,320
Y que aparte, recientemente se actualizó con todos los cambios que han ido sucediendo

85
00:05:59,320 --> 00:06:03,080
en la parte del corte del lenguaje, en la parte de empaquetamiento como tal.

86
00:06:03,080 --> 00:06:09,240
Entonces tienes guías, tienes instancias de pruebas, tienes código.

87
00:06:09,240 --> 00:06:14,840
Ese es el punto donde podrías iniciar para empaquetar tu paquete en Python.

88
00:06:14,840 --> 00:06:19,240
La parte un poco aburrida, que es todo esto de la historia, pues han habido cambios en

89
00:06:19,240 --> 00:06:24,040
un lenguaje y es importante que esos cambios sucedan porque significa que el lenguaje no

90
00:06:24,040 --> 00:06:25,040
está muerto.

91
00:06:25,040 --> 00:06:29,240
Y es que los errores que se cometieron en el pasado los vamos mejorando conforme va

92
00:06:29,240 --> 00:06:31,040
pasando el tiempo.

93
00:06:31,040 --> 00:06:37,080
Y han salido varios peps que han ido mejorando o haciendo un cambio en la manera en cómo

94
00:06:37,080 --> 00:06:39,240
se generan esos paquetes.

95
00:06:39,240 --> 00:06:46,640
Iniciamos con el pep 517, que es toda una forma de cómo compilar los paquetes en Python.

96
00:06:46,640 --> 00:06:54,400
518 para compilarlos, 621 para crear el PyProject y todos los metodatos que necesitamos poner,

97
00:06:54,400 --> 00:07:02,760
631 que es la especificar de cómo los paquetes que creamos dependen de A, B o C y el 660

98
00:07:02,760 --> 00:07:07,080
que es cómo creamos paquetes editables que puedas tú ejecutarlos en tu computadora y

99
00:07:07,080 --> 00:07:11,760
a medida que vas cambiando el código pues se vaya actualizando automáticamente el paquete.

100
00:07:11,760 --> 00:07:17,480
Hay más peps aparte de estos que han ido cambiando mucho la historia, pero esos son

101
00:07:17,480 --> 00:07:20,000
los más importantes.

102
00:07:20,000 --> 00:07:23,920
Comenzamos a hablar de empaquetamiento y lo primero que se tiene en la mente es un archivito

103
00:07:23,920 --> 00:07:30,200
que se llama setup.py y ese era el punto inicial para crear paquetes en Python.

104
00:07:30,200 --> 00:07:36,560
Y setup.py se miraba de esta manera, era un archivo Python y nosotros mediante diferentes

105
00:07:36,560 --> 00:07:40,400
parámetros escribíamos qué es lo que iba a ser nuestro paquete, entonces le damos un

106
00:07:40,400 --> 00:07:47,680
nombre, una descripción, la versión y así diferentes tipos de información o de metodatos

107
00:07:47,680 --> 00:07:50,880
que ayudan a crear nuestro paquete.

108
00:07:50,880 --> 00:07:54,520
Y como esto va a ser un archivo Python, pues se introducen también ciertos fallos y esos

109
00:07:54,520 --> 00:07:57,920
fallos es que tú puedes poner cualquier código arbitrario dentro de esto y también va a

110
00:07:57,920 --> 00:07:58,920
ser posible ejecutarse.

111
00:07:58,920 --> 00:08:03,280
Y es lo que han venido cambiando conforme han pasado los años.

112
00:08:03,280 --> 00:08:10,800
Y para eso introdujimos, se introdujo algo dentro del core de Python que es pipebreak.toml

113
00:08:10,800 --> 00:08:16,880
y es otra forma de especificar todos esos metodatos de una manera que sea 100% segura.

114
00:08:17,840 --> 00:08:22,880
Entonces, el pipebreak.toml consta de dos secciones principales.

115
00:08:22,880 --> 00:08:28,760
Nuestro sistema para construirlo y todos los metodatos del paquete como tal.

116
00:08:28,760 --> 00:08:33,840
Entonces en la parte cómo construimos nuestro paquete, le decimos qué es lo que requiere

117
00:08:33,840 --> 00:08:39,480
para construirlo y cuál es el backend o con qué herramienta voy a utilizar para generar

118
00:08:39,480 --> 00:08:41,480
ese paquete de metodatos.

119
00:08:41,480 --> 00:08:45,680
Entonces en este caso estamos ocupando lo que ya viene por defecto dentro de tu instalación

120
00:08:45,680 --> 00:08:46,680
de Python.

121
00:08:46,680 --> 00:08:49,880
Es muy probable que si instalas de Python, pues tengas zero tools y tengas todas estas

122
00:08:49,880 --> 00:08:50,880
herramientas.

123
00:08:50,880 --> 00:08:55,880
Entonces esta es la manera más básica de cómo crear un paquete de Python.

124
00:08:55,880 --> 00:09:01,040
Y luego creamos todos los metodatos que queremos agregarlo.

125
00:09:01,040 --> 00:09:03,640
Y volvemos a lo mismo el setup.py.

126
00:09:03,640 --> 00:09:11,520
Tenemos un nombre, tenemos una descripción, tenemos keywords, dependencias, autores y

127
00:09:11,520 --> 00:09:12,520
lo que sea.

128
00:09:12,520 --> 00:09:15,240
Entonces no ha cambiado nada.

129
00:09:15,240 --> 00:09:19,680
Y la información se estructura de una manera segura y más eficiente.

130
00:09:19,680 --> 00:09:26,400
Y cuando hablamos de empaquetado, pues nos preguntamos dónde entra todo esto, la parte

131
00:09:26,400 --> 00:09:27,800
primordial de esa charla.

132
00:09:27,800 --> 00:09:28,800
No, qué es Hatch.

133
00:09:28,800 --> 00:09:34,760
Hatch es una nueva herramienta que nos permite empaquetar paquetes de Python y nos ayuda a

134
00:09:34,760 --> 00:09:39,520
reducir mucho todo este proceso o toda esa carga mental que tenemos.

135
00:09:39,520 --> 00:09:44,240
Entonces de Hatch en la charla de hoy vamos a ver su introducción, qué son los entornos,

136
00:09:44,240 --> 00:09:48,760
qué son los scripts, qué es la matrix, aunque suene como película.

137
00:09:48,760 --> 00:09:53,000
Y vamos a ver un poquito cómo se integra PyProject con Hatch.

138
00:09:53,000 --> 00:09:57,720
Entonces la forma más fácil de instalar Hatch es ocupando Ppex, que es instalar paquetes

139
00:09:57,720 --> 00:09:58,720
ejecutables en Python.

140
00:09:58,720 --> 00:10:02,080
Entonces Ppex, instala Hatch.

141
00:10:02,080 --> 00:10:07,480
Y obviamente esto le va a Hatch su propio entorno de realmente aislado de todo el código

142
00:10:07,480 --> 00:10:08,480
que tenga en tu computadora.

143
00:10:08,480 --> 00:10:09,480
Listo.

144
00:10:09,480 --> 00:10:12,800
Ahora los entornos.

145
00:10:12,800 --> 00:10:17,000
Y es que si alguna vez, por ejemplo, has creado un paquete en Python, probablemente hayas

146
00:10:17,000 --> 00:10:18,000
usado Tox.

147
00:10:18,000 --> 00:10:21,440
Si alguien lo ha usado, que levanten la barra.

148
00:10:21,440 --> 00:10:25,560
O sea, Tox básicamente lo que te ayuda es cómo crear formas aisladas de diferentes

149
00:10:25,560 --> 00:10:29,560
versiones de Python y probar tu código en esa versión totalmente aislada.

150
00:10:29,560 --> 00:10:34,680
Así que si tienes, por ejemplo, un paquete que tiene que ser soportado Python 3.3, 3.4,

151
00:10:34,680 --> 00:10:39,920
3.5, 3.6 y muchas veces tú en tu computadora tienes 3.4, necesitas algo que pueda probar

152
00:10:39,920 --> 00:10:40,920
eso en tu computadora.

153
00:10:41,680 --> 00:10:45,640
Entonces los entornos en Hatch es básicamente la misma extracción.

154
00:10:45,640 --> 00:10:50,360
Es que tú eres capaz de crear diferentes espacios de trabajo para probar o para hacer

155
00:10:50,360 --> 00:10:51,920
diferentes tipos de acciones.

156
00:10:51,920 --> 00:10:58,080
Entonces los entornos se ejecutan o se ven en Pyproject de la siguiente manera.

157
00:10:58,080 --> 00:11:05,320
Creamos una nueva sección y le decimos tu.hatch environments y después le damos el nombre

158
00:11:05,320 --> 00:11:06,320
del entorno.

159
00:11:06,320 --> 00:11:10,400
Entonces en este caso, por ejemplo, yo aquí tengo tres entornos.

160
00:11:10,400 --> 00:11:14,920
Uno que es el entorno por defecto, uno que es el entorno de prueba y uno que es el entorno

161
00:11:14,920 --> 00:11:15,920
de documentación.

162
00:11:15,920 --> 00:11:21,520
Y si se fijan, cada uno de esos entornos tienen diferentes dependencias.

163
00:11:21,520 --> 00:11:25,800
Y eso me ayuda a aislar qué cosas dependen de cada lado, porque para que yo quiero tener

164
00:11:25,800 --> 00:11:31,720
en mi entorno de pruebas, no sé, Spinix o Rated Dogs o lo que sea, así simplemente

165
00:11:31,720 --> 00:11:34,000
haciendo pruebas, ¿sí me explico?

166
00:11:34,000 --> 00:11:39,040
En cambio, para que quiero tener, por ejemplo, coverage que es prácticamente para mi entorno

167
00:11:39,040 --> 00:11:41,440
de pruebas en mi entorno de documentación.

168
00:11:41,440 --> 00:11:46,520
Entonces de esa manera, vamos aislando mucho el proceso y separando las partes primordiales

169
00:11:46,520 --> 00:11:48,000
de nuestro proyecto.

170
00:11:48,000 --> 00:11:55,160
Y lo último, y es que si alguna vez has ocupado Makefile o Justfile que son como para ejecutar

171
00:11:55,160 --> 00:11:58,200
comandos, hay algo que se llama Hatch Scripts.

172
00:11:58,200 --> 00:12:02,000
Y los scripts, la parte poderosa de ellos es que los scripts pueden ser ejecutados de

173
00:12:02,000 --> 00:12:06,320
manera global en tu entorno por defecto o pueden ser ejecutados dentro de un entorno

174
00:12:06,320 --> 00:12:07,320
en específico.

175
00:12:07,320 --> 00:12:08,960
Entonces, ¿a qué viene esto?

176
00:12:09,880 --> 00:12:13,680
Es que muchas veces cuando instalamos un paquete o estamos tratando de trabajar en un paquete

177
00:12:13,680 --> 00:12:18,800
de open source, tenemos un montón de scripts que simplemente funcionan en una parte muy

178
00:12:18,800 --> 00:12:19,800
específica.

179
00:12:19,800 --> 00:12:23,440
Le damos al usuario scripts para compilar la documentación, scripts para compilar los

180
00:12:23,440 --> 00:12:28,680
tests, scripts para eso, para lo otro, pero al final es una parte muy pequeña del proceso.

181
00:12:28,680 --> 00:12:33,720
Lo que hacen los scripts es aislar todo ese procesamiento en un entorno muy en específico.

182
00:12:33,720 --> 00:12:36,600
Y volvemos de nuevo a nuestro archivo.

183
00:12:36,600 --> 00:12:42,080
Y aquí, si se fijan, tenemos nuestro entorno de prueba y al final le decimos qué scripts

184
00:12:42,080 --> 00:12:48,120
vamos a ejecutar o qué comandos queremos que estén presentes en ese entorno de prueba.

185
00:12:48,120 --> 00:12:54,440
Para explicarlo un poquito más a fondo, tenemos, o más bien, cómo ejecutarlos, le decimos

186
00:12:54,440 --> 00:12:58,760
Hatch Run, el nombre de nuestro entorno, en este caso podría ser nuestro entorno de pruebas,

187
00:12:58,760 --> 00:13:01,520
y le decimos el nombre del script que queremos ejecutar.

188
00:13:01,600 --> 00:13:07,680
Entonces Hatch lo que va a hacer es expandir todo ese comando y ejecutarlo simplemente dentro

189
00:13:07,680 --> 00:13:12,000
de ese entorno, sin afectar el resto de entornos que tengamos en nuestro computador.

190
00:13:12,000 --> 00:13:18,600
Y luego, la matrix es básicamente lo que le he comentado al inicio.

191
00:13:18,600 --> 00:13:26,040
Si tienes como diferentes versiones de Python, pues tú puedes crear diferentes entornos

192
00:13:26,040 --> 00:13:28,480
para diferentes versiones de Python en específico.

193
00:13:28,560 --> 00:13:32,480
Entonces, por ejemplo, si en mi entorno de pruebas mi paquete depende de la versión

194
00:13:32,480 --> 00:13:38,360
Python 2.7 y la versión 3.8, pues le digo que voy a crear una matriz con esas dos versiones.

195
00:13:38,360 --> 00:13:39,360
¿Sí?

196
00:13:39,360 --> 00:13:44,720
Y para eso, aunque suene un poco complicado, tenemos un comando que se llama Hatch Environment

197
00:13:44,720 --> 00:13:49,080
Show y lo que hace es que aquí, en este caso, pues te muestra todas las matrices que tenemos.

198
00:13:49,080 --> 00:13:54,480
Entonces, si se fijan acá, tenemos un entorno que se llama test, que es el tipo virtual,

199
00:13:54,480 --> 00:13:58,480
que es Virtual Environments de Python, y tenemos dos tipos de entorno.

200
00:13:58,480 --> 00:14:02,200
Test Python 2.7 y Test Python 3.8.

201
00:14:02,200 --> 00:14:03,680
Y depende de PyTest.

202
00:14:03,680 --> 00:14:08,120
Entonces, él ha instalado la versión compatible de PyTest, porque aquí es global, para Python

203
00:14:08,120 --> 00:14:10,280
2.7 y para Python 3.8.

204
00:14:10,280 --> 00:14:14,800
Si tuviéramos más, pues va a ir creciendo y creciendo y creciendo.

205
00:14:14,800 --> 00:14:17,680
¿Qué cosas cambian con todo eso que te he dicho?

206
00:14:17,680 --> 00:14:24,440
Pues si tenemos los Makefile, Justfile, Linear, Bash Scripts o lo que sea, pues ahora tenemos

207
00:14:24,440 --> 00:14:27,360
Hatch Scripts y se ejecutan de esta manera.

208
00:14:27,360 --> 00:14:33,200
Si tenemos Tocks, Nocks o alguna otra herramienta que ayude a isolar diferentes entornos virtuales,

209
00:14:33,200 --> 00:14:36,160
pues tenemos nuestra Matrix de Hatch.

210
00:14:36,160 --> 00:14:39,880
Y si queremos ocupar Setup Tools, que es lo que ya viene por defecto en tu Python, pues

211
00:14:39,880 --> 00:14:45,680
tenemos Hatchling, que es la herramienta que él tiene en su core para construir tu paquete

212
00:14:45,680 --> 00:14:46,680
de Python.

213
00:14:46,680 --> 00:14:53,880
En vez de ocupar Python Setup API Install, ahora hacemos pip install y en vez de decir

214
00:14:53,880 --> 00:15:00,520
Python Setup.py develop, pues ahora hacemos pip install-e.

215
00:15:00,520 --> 00:15:03,080
Solo para que lo instale en desarrollo.

216
00:15:03,080 --> 00:15:06,520
Y en vez de decir build, pues hacemos Hatch Build.

217
00:15:06,520 --> 00:15:10,840
Pero pues uno puede aquí mostrar un montón de slides y van a decir si eso funciona o

218
00:15:10,840 --> 00:15:11,840
no funciona.

219
00:15:11,840 --> 00:15:17,520
Entonces, vamos a hacer un poquito de live coding y vamos a ir manos a la obra.

220
00:15:17,520 --> 00:15:21,520
La parte más importante, Hatch New Init.

221
00:15:21,520 --> 00:15:27,280
Entonces, aquí tengo mi terminal y tengo un proyecto que se llama PyCon.

222
00:15:27,280 --> 00:15:32,480
Entonces, este proyecto que se llama PyCon está basado en la versión antigua de nuestro

223
00:15:32,480 --> 00:15:33,480
paquete.

224
00:15:33,480 --> 00:15:37,280
Si os fijáis, tenemos un archivo que dice Setup.py.

225
00:15:37,280 --> 00:15:42,920
Entonces, chilo.

226
00:15:42,920 --> 00:15:48,560
Y esta es como toda la forma antigua, los metadatos antiguos de cómo crear un paquete

227
00:15:48,560 --> 00:15:49,560
en Python.

228
00:15:49,560 --> 00:15:50,560
Por acá.

229
00:15:50,720 --> 00:15:54,600
Y los que les comentaba que al ser un archivo Python, tú puedes ejecutar cualquier código

230
00:15:54,600 --> 00:15:58,560
arbitrario, pues tienes ese tipo de cosas.

231
00:15:58,560 --> 00:16:03,240
Sí, aquí tú puedes poner cualquier código que sea malicioso y leer cosas del entorno

232
00:16:03,240 --> 00:16:05,920
virtual de la persona, enviarlos a un API o lo que sea.

233
00:16:05,920 --> 00:16:12,360
Entonces, eso introduce como esas partes complicadas de ocupar la versión antigua, la forma antigua

234
00:16:12,360 --> 00:16:13,360
de hacerla.

235
00:16:13,360 --> 00:16:18,720
Entonces, para migrar este paquete que ya tiene Setup.py, vamos a iniciar con Hatch.

236
00:16:20,560 --> 00:16:26,520
Hatch new, doble guión, init.

237
00:16:26,520 --> 00:16:30,520
Y esto lo que va a hacer es tomar nuestro archivo Setup.py y va a generar un nuevo archivo

238
00:16:30,520 --> 00:16:31,520
PyProject.

239
00:16:31,520 --> 00:16:32,520
Listo.

240
00:16:32,520 --> 00:16:37,520
Entonces, ahora si hacemos un ls, tenemos, si se fijan por acá, tenemos un nuevo archivo

241
00:16:37,520 --> 00:16:39,520
que se llama PyProject.toml.

242
00:16:39,520 --> 00:16:40,520
Aquí.

243
00:16:40,520 --> 00:16:41,520
¿Sí?

244
00:16:41,520 --> 00:16:42,520
Que antes no estaba.

245
00:16:42,520 --> 00:16:46,920
Entonces, lo que hizo Hatch es tomar toda la información que ya teníamos en Setup.py

246
00:16:46,920 --> 00:16:49,760
y moverlo a ese nuevo archivo de PyProject.toml.

247
00:16:49,760 --> 00:16:50,760
Aquí lo vemos.

248
00:16:50,760 --> 00:16:54,960
Automáticamente, él migró todo lo que ya teníamos.

249
00:16:54,960 --> 00:17:04,240
Si ya le puse un nombre, descripción, dónde está la información, el autor, keywords,

250
00:17:04,240 --> 00:17:06,720
los clasificadores y todo esto.

251
00:17:06,720 --> 00:17:07,720
Listo.

252
00:17:07,720 --> 00:17:10,000
Aquí, obviamente, nos falta crear los entornos.

253
00:17:10,000 --> 00:17:12,280
Entonces, vamos a comenzar a crear entornos.

254
00:17:12,280 --> 00:17:13,280
Pero antes.

255
00:17:13,280 --> 00:17:14,280
Listo.

256
00:17:14,280 --> 00:17:15,280
Ok.

257
00:17:15,280 --> 00:17:23,280
Entonces, si hago Hatch, environment show.

258
00:17:23,280 --> 00:17:26,840
Si se fijan, solo tengo un solo entorno acá.

259
00:17:26,840 --> 00:17:29,840
Tengo un entorno que se llama Default y es el tipo virtual.

260
00:17:29,840 --> 00:17:31,440
Que es como con lo que uno inicia.

261
00:17:31,440 --> 00:17:35,040
Entonces, ahora queremos crear un entorno, por ejemplo, para documentación.

262
00:17:35,040 --> 00:17:39,200
Entonces, vamos a ir y vamos a hacer PyProject.

263
00:17:39,200 --> 00:17:40,200
Listo.

264
00:17:40,200 --> 00:17:42,200
Y vamos a crear un nuevo entorno.

265
00:17:42,360 --> 00:17:49,640
Aquí le decimos otra vez Tool.hatch.emfs y le voy a un nombre.

266
00:17:49,640 --> 00:17:52,840
Entonces, en este caso, sería documentación.

267
00:17:52,840 --> 00:17:57,960
Le voy a decir que depende de...

268
00:17:57,960 --> 00:18:00,960
A ver.

269
00:18:00,960 --> 00:18:06,440
Aquí yo...

270
00:18:06,440 --> 00:18:08,440
Aquí yo tenía como uno que ya funcionaba.

271
00:18:08,440 --> 00:18:11,440
Así que copy-paste para hacerlo más rápido.

272
00:18:11,680 --> 00:18:13,680
Y vamos a ponerle...

273
00:18:13,680 --> 00:18:14,680
Esto es que está acá.

274
00:18:14,680 --> 00:18:15,680
Vamos a hacer...

275
00:18:41,680 --> 00:18:50,680
Esta es como la parte medio burrita.

276
00:18:50,680 --> 00:18:55,680
Si hago un typo, alguien díame, por favor.

277
00:18:55,680 --> 00:18:57,680
Que esto pueda pasar.

278
00:18:57,680 --> 00:18:58,680
Y Spinnix.

279
00:18:58,680 --> 00:18:59,680
Ok.

280
00:18:59,680 --> 00:19:00,680
Vamos a ponerlo aquí.

281
00:19:00,680 --> 00:19:01,680
Ah, ok.

282
00:19:01,680 --> 00:19:02,680
Sí.

283
00:19:02,680 --> 00:19:03,680
Sph, enx.

284
00:19:03,680 --> 00:19:04,680
Sph, enx.

285
00:19:04,680 --> 00:19:05,680
Ok.

286
00:19:05,680 --> 00:19:06,680
Y aquí.

287
00:19:06,920 --> 00:19:09,920
Y listo.

288
00:19:09,920 --> 00:19:14,920
Entonces, aquí definimos nuestras dependencias.

289
00:19:14,920 --> 00:19:25,920
Y ahora, si yo hago Hatch Environment Show, debería de salirme mi nuevo entorno que he

290
00:19:25,920 --> 00:19:26,920
creado.

291
00:19:26,920 --> 00:19:31,920
En este caso, si se fijan, tenemos un nuevo entorno que es para nuestra parte de documentación.

292
00:19:31,920 --> 00:19:35,720
Y para ese entorno, solo están esas dependencias que le he especificado.

293
00:19:35,760 --> 00:19:39,760
Y hemos aislado toda esta parte complicada del código en ese entorno virtual.

294
00:19:39,760 --> 00:19:41,760
Pero, no tenemos comandos.

295
00:19:41,760 --> 00:19:47,760
O sea, yo no puedo hacer, por ejemplo, Hatch, run, y si le digo docs, build, pues no tengo

296
00:19:47,760 --> 00:19:48,760
ningún comando aquí.

297
00:19:48,760 --> 00:19:51,760
Entonces, vamos a hacer lo mismo.

298
00:19:51,760 --> 00:19:52,760
Be my project.

299
00:19:52,760 --> 00:19:55,760
Y aquí le voy a decir lo mismo.

300
00:19:55,760 --> 00:19:58,760
Tool.hatch.

301
00:19:58,800 --> 00:20:01,800
environments.

302
00:20:01,800 --> 00:20:04,800
Docs Scripts.

303
00:20:04,800 --> 00:20:11,800
Y aquí puedo escribir build.

304
00:20:11,800 --> 00:20:14,800
Y ese es el comando de build.

305
00:20:14,800 --> 00:20:16,800
Y este es...

306
00:20:16,800 --> 00:20:17,800
Build era...

307
00:20:17,800 --> 00:20:18,800
Uf, este era lejos.

308
00:20:18,800 --> 00:20:19,800
SpinningSap.wil.

309
00:20:19,800 --> 00:20:20,800
Ok.

310
00:20:20,840 --> 00:20:21,840
Ok.

311
00:20:21,840 --> 00:20:22,840
Ok.

312
00:20:22,840 --> 00:20:29,840
Bueno, otra cosa muy importante es de que cuando tenemos comandos de varios pasos o cosas así

313
00:20:29,840 --> 00:20:36,840
por el estilo, podemos especificarlo como en una lista y podemos ir escribiendo cada

314
00:20:36,840 --> 00:20:37,840
comando que necesitamos.

315
00:20:37,840 --> 00:20:40,840
Entonces, ¿qué voy a hacer?

316
00:20:40,840 --> 00:20:43,840
Voy a guardar y cerrar esto.

317
00:20:43,840 --> 00:20:46,840
Postal codes.

318
00:20:46,880 --> 00:20:49,880
Y my project.

319
00:20:52,880 --> 00:20:55,880
Para no perder tanto tiempo tapiendo esto.

320
00:21:02,880 --> 00:21:04,880
Perfecto.

321
00:21:04,880 --> 00:21:07,880
Y voy a copiar esto por aquí.

322
00:21:07,880 --> 00:21:10,880
Perfecto.

323
00:21:10,920 --> 00:21:13,920
Ok, perfecto.

324
00:21:13,920 --> 00:21:17,920
Ok, entonces ahora ya tenemos un comando que se llama build.

325
00:21:17,920 --> 00:21:22,920
Y si yo hago otra vez hatch, environment show.

326
00:21:22,920 --> 00:21:23,920
Falta...

327
00:21:23,920 --> 00:21:26,920
Tengo un typo.

328
00:21:26,920 --> 00:21:29,920
Aquí hay una comilla.

329
00:21:36,920 --> 00:21:37,920
Ah.

330
00:21:37,960 --> 00:21:40,960
DocTris menos D.

331
00:21:45,960 --> 00:21:48,960
DocTris.

332
00:21:49,960 --> 00:21:52,960
Y este es ok.

333
00:21:52,960 --> 00:21:55,960
Latex paper size.

334
00:21:55,960 --> 00:21:58,960
Latex paper size.

335
00:21:58,960 --> 00:22:01,960
Decimos que es A4.

336
00:22:02,000 --> 00:22:05,000
Que lo haga dentro del folder docs y docs build.

337
00:22:05,000 --> 00:22:06,000
Ok.

338
00:22:06,000 --> 00:22:09,000
Docs.

339
00:22:09,000 --> 00:22:12,000
Y docs build.

340
00:22:12,000 --> 00:22:15,000
Ok.

341
00:22:15,000 --> 00:22:18,000
Ah, aquí abajo.

342
00:22:18,000 --> 00:22:21,000
Listo.

343
00:22:23,000 --> 00:22:26,000
Ahora vamos a ver.

344
00:22:26,000 --> 00:22:29,000
Ok.

345
00:22:29,040 --> 00:22:32,040
Ahora sí.

346
00:22:35,040 --> 00:22:38,040
Scripts.

347
00:22:41,040 --> 00:22:44,040
Scripts.

348
00:22:46,040 --> 00:22:49,040
Ah, fíjate.

349
00:22:49,040 --> 00:22:52,040
Esto tengo doble...

350
00:22:52,040 --> 00:22:55,040
Doble cosito de estos.

351
00:22:55,040 --> 00:22:56,040
Listo.

352
00:22:56,080 --> 00:22:59,080
Y ahora si se fijan, tenemos una nueva columna que antes no estaba.

353
00:22:59,080 --> 00:23:01,080
Y hice los scripts.

354
00:23:01,080 --> 00:23:04,080
Y para mi entorno de documentación tengo un script que se llama build.

355
00:23:04,080 --> 00:23:09,080
Entonces lo mismo va a pasar si creamos un entorno para pruebas, por ejemplo.

356
00:23:09,080 --> 00:23:12,080
Entonces hacemos lo mismo acá.

357
00:23:12,080 --> 00:23:14,080
Y le decimos tool.

358
00:23:14,080 --> 00:23:16,080
Otra vez hatch.

359
00:23:16,080 --> 00:23:17,080
Environment.

360
00:23:17,080 --> 00:23:19,080
Y le decimos que este es mi entorno de pruebas.

361
00:23:19,080 --> 00:23:22,080
Que depende.

362
00:23:22,080 --> 00:23:25,080
De Pytest, por ejemplo.

363
00:23:26,080 --> 00:23:29,080
Y lo vamos a decir también acá.

364
00:23:29,080 --> 00:23:30,080
Tool.

365
00:23:30,080 --> 00:23:31,080
Tool.

366
00:23:31,080 --> 00:23:32,080
Punto hatch.

367
00:23:32,080 --> 00:23:33,080
Punto environment.

368
00:23:33,080 --> 00:23:36,080
Y decimos, en el entorno de prueba quiero el siguiente script.

369
00:23:36,080 --> 00:23:39,080
Scripts.

370
00:23:39,080 --> 00:23:42,080
Lo voy a decir test.

371
00:23:42,080 --> 00:23:45,080
Y igual.

372
00:23:45,080 --> 00:23:48,080
Pytest.

373
00:23:48,080 --> 00:23:49,080
Por ejemplo.

374
00:23:49,080 --> 00:23:50,080
Punto.

375
00:23:50,080 --> 00:23:53,080
No sé. Algo así.

376
00:23:53,080 --> 00:23:55,080
Si volvemos a hacer hatch environment show.

377
00:23:55,120 --> 00:23:57,120
Ahora si se fijan.

378
00:23:57,120 --> 00:24:00,120
El comando test está totalmente isolado.

379
00:24:00,120 --> 00:24:02,120
Dentro de mi entorno virtual que se llama test.

380
00:24:02,120 --> 00:24:07,120
Y el comando build totalmente isolado dentro de mi entorno virtual que se llama docs.

381
00:24:07,120 --> 00:24:12,120
Y de esa manera vas simplemente migrando esos archivos super gigantes.

382
00:24:12,120 --> 00:24:14,120
Super monstruosos de make files.

383
00:24:14,120 --> 00:24:16,120
Que tienen un montón de comandos.

384
00:24:16,120 --> 00:24:21,120
Y los vas simplemente aislando al entorno donde cada uno de ellos depende.

385
00:24:21,120 --> 00:24:24,120
Entonces.

386
00:24:24,160 --> 00:24:26,160
Y ahora que tenemos eso.

387
00:24:26,160 --> 00:24:29,160
También tenemos otro archivo que se llama TOCS.

388
00:24:29,160 --> 00:24:32,160
Y TOCS es lo que le comentaba.

389
00:24:32,160 --> 00:24:34,160
Aquí explicamos todas las versiones de Python.

390
00:24:34,160 --> 00:24:37,160
En las que queremos probar nuestro paquete.

391
00:24:37,160 --> 00:24:40,160
Entonces tenemos la versión 3.7, 3.6, 3.5, 3.4.

392
00:24:40,160 --> 00:24:42,160
Y el comando.

393
00:24:42,160 --> 00:24:46,160
Entonces TOCS cuando lo ejecutemos va a correr este comando.

394
00:24:46,160 --> 00:24:51,160
Dentro de cada una de esas versiones a un entorno totalmente aislado.

395
00:24:51,200 --> 00:24:54,200
¿Cómo replicamos eso dentro de Hatch?

396
00:24:54,200 --> 00:24:57,200
Básicamente decimos ok.

397
00:24:59,200 --> 00:25:04,200
Y aquí hacemos otra vez.

398
00:25:06,200 --> 00:25:09,200
Tool.Hatch.

399
00:25:09,200 --> 00:25:11,200
Environment.

400
00:25:11,200 --> 00:25:13,200
Test.

401
00:25:13,200 --> 00:25:15,200
Matrix.

402
00:25:15,200 --> 00:25:18,200
Y le decimos que Python.

403
00:25:18,240 --> 00:25:21,240
Vamos a tener.

404
00:25:21,240 --> 00:25:24,240
3.5.

405
00:25:26,240 --> 00:25:29,240
3.6.

406
00:25:29,240 --> 00:25:32,240
Listo.

407
00:25:34,240 --> 00:25:37,240
Y si ahora vamos a hacer Hatch Environment Show.

408
00:25:37,240 --> 00:25:39,240
Otra vez.

409
00:25:39,240 --> 00:25:41,240
Ok.

410
00:25:41,240 --> 00:25:44,240
Las comas.

411
00:25:44,280 --> 00:25:49,280
Este creo que es el double bracket.

412
00:25:49,280 --> 00:25:51,280
Porque es algo muy específico de la herramienta.

413
00:25:51,280 --> 00:25:55,280
Una cosa que tiene Pyproject es que se han ocupado archivos tomel.

414
00:25:55,280 --> 00:26:00,280
Es que a veces la nomenclatura o la forma en que define cada sección.

415
00:26:00,280 --> 00:26:02,280
A veces tiende a variar.

416
00:26:02,280 --> 00:26:06,280
Entonces a veces Hatch tiene como su propia sección como tal.

417
00:26:06,280 --> 00:26:08,280
En los scripts.

418
00:26:08,280 --> 00:26:11,280
Y a veces toca encapsularla dentro de otra sección.

419
00:26:11,320 --> 00:26:14,320
Y ahora sí.

420
00:26:14,320 --> 00:26:15,320
Ok, listo.

421
00:26:15,320 --> 00:26:19,320
Si se fijan ahora tenemos una nueva tabla abajo que dice matrices.

422
00:26:19,320 --> 00:26:22,320
Y matrices lo que tiene es que dos entornos virtuales.

423
00:26:22,320 --> 00:26:25,320
Con la versión de Python totalmente diferente.

424
00:26:25,320 --> 00:26:28,320
Y ahora pues tenemos que probar todo.

425
00:26:28,320 --> 00:26:30,320
Vamos a decir Hatch.

426
00:26:30,320 --> 00:26:31,320
Run.

427
00:26:31,320 --> 00:26:32,320
Docs.

428
00:26:32,320 --> 00:26:34,320
Por ejemplo, build.

429
00:26:34,320 --> 00:26:35,320
Vamos a ver.

430
00:26:35,320 --> 00:26:37,320
Va a crear todo en ese entorno virtual.

431
00:26:37,320 --> 00:26:40,320
Lo va a instalar en el proyecto de modo de desarrollo.

432
00:26:40,360 --> 00:26:45,360
Otra cosa que cambió es las licencias.

433
00:26:45,360 --> 00:26:47,360
El nombre de las licencias.

434
00:26:47,360 --> 00:26:48,360
Entonces esto.

435
00:26:48,360 --> 00:26:51,360
Que no existe porque la licencia MIT license no existe.

436
00:26:51,360 --> 00:26:53,360
Es solo MIT.

437
00:26:55,360 --> 00:26:57,360
A ver si otra vez.

438
00:27:01,360 --> 00:27:04,360
Va a instalar todas las dependencias.

439
00:27:04,360 --> 00:27:07,360
Y ahí se está escondiendo cada uno de los comandos.

440
00:27:07,400 --> 00:27:08,400
Laptop.

441
00:27:18,400 --> 00:27:20,400
Vamos a irnos al que funcionaba.

442
00:27:20,400 --> 00:27:21,400
No voy a hacer.

443
00:27:24,400 --> 00:27:25,400
Lo mismo.

444
00:27:29,400 --> 00:27:31,400
Ok, perfecto.

445
00:27:31,400 --> 00:27:35,400
Y ahora si se fijan acá pues simplemente ejecuto ese comando.

446
00:27:35,440 --> 00:27:37,440
En nuestro entorno de.

447
00:27:37,440 --> 00:27:39,440
Para documentación.

448
00:27:39,440 --> 00:27:41,440
Y genero un archivo de documentación correcto.

449
00:27:41,440 --> 00:27:44,440
¿Qué pasa si ejecuto un comando que no está declarado para eso?

450
00:27:44,440 --> 00:27:46,440
Si yo digo por ejemplo Hatch.

451
00:27:46,440 --> 00:27:47,440
Run.

452
00:27:48,440 --> 00:27:49,440
Test.

453
00:27:49,440 --> 00:27:50,440
Build.

454
00:27:54,440 --> 00:27:57,440
Aquí va a crear en nuestro entorno virtual.

455
00:27:57,440 --> 00:28:00,440
Con la versión de Python que necesitamos.

456
00:28:00,440 --> 00:28:03,440
Y si se fijan pues el comando build no está declarado.

457
00:28:03,480 --> 00:28:07,480
De esa manera haces que la persona que te colabora.

458
00:28:07,480 --> 00:28:11,480
No termines ejecutando comandos que no tienen que ser ejecutados.

459
00:28:11,480 --> 00:28:14,480
Y al final lo que vamos a hacer acá.

460
00:28:14,480 --> 00:28:16,480
Es decirle que construye paquete.

461
00:28:16,480 --> 00:28:17,480
Hatch.

462
00:28:17,480 --> 00:28:18,480
Build.

463
00:28:18,480 --> 00:28:20,480
Va a instalar todo de nuevo.

464
00:28:20,480 --> 00:28:23,480
El proyecto en un entorno virtual totalmente aislado.

465
00:28:23,480 --> 00:28:24,480
Hatch.

466
00:28:24,480 --> 00:28:25,480
Build.

467
00:28:29,480 --> 00:28:30,480
Y listo.

468
00:28:30,520 --> 00:28:33,520
Entonces creo un archivo de distribución.

469
00:28:33,520 --> 00:28:35,520
Source distribution y quedo un build.

470
00:28:35,520 --> 00:28:38,520
Entonces si hacemos un ls dentro de nuestra carpeta lista.

471
00:28:38,520 --> 00:28:41,520
Tenemos las dos formas de distribuir.

472
00:28:41,520 --> 00:28:43,520
Paquetes en Python.

473
00:28:43,520 --> 00:28:45,520
Y ya simplemente lo que hacemos es.

474
00:28:45,520 --> 00:28:46,520
Hatch.

475
00:28:46,520 --> 00:28:47,520
Publish.

476
00:28:49,520 --> 00:28:52,520
Y pues básicamente eso va a subir.

477
00:28:52,520 --> 00:28:55,520
Nuestros paquetes a la versión.

478
00:28:55,520 --> 00:28:58,520
Ya sea de prueba o la de producción de PyPI.

479
00:28:58,560 --> 00:29:01,560
Y no siendo más.

480
00:29:01,560 --> 00:29:03,560
Eso es todo.

481
00:29:03,560 --> 00:29:05,560
Espero que esta charla les haya gustado.

482
00:29:05,560 --> 00:29:06,560
Que lo usen.

483
00:29:06,560 --> 00:29:08,560
Que les sea útil en su día a día.

484
00:29:08,560 --> 00:29:10,560
Y si tienen preguntas o algo así.

485
00:29:10,560 --> 00:29:13,560
Ya sea por Twitter, por correo o por acá.

486
00:29:13,560 --> 00:29:15,560
Las estaré aceptando.

487
00:29:15,560 --> 00:29:18,560
O si quieren al final en el salón.

488
00:29:18,560 --> 00:29:19,560
Y nada.

489
00:29:19,560 --> 00:29:21,560
Ha sido un gusto estar por acá con todos ustedes.

490
00:29:21,560 --> 00:29:23,560
Espero que la charla les haya gustado un montón.

491
00:29:23,560 --> 00:29:24,560
Muchas gracias.

492
00:29:24,560 --> 00:29:25,600
Gracias.

