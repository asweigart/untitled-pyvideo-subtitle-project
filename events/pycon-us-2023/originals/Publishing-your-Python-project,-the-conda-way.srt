1
00:00:00,000 --> 00:00:02,520
All right, then.

2
00:00:02,520 --> 00:00:07,160
It's 9 a.m. already, so we'll officially begin the tutorial now.

3
00:00:07,160 --> 00:00:09,520
So, hello.

4
00:00:09,520 --> 00:00:11,320
Good morning to all of you.

5
00:00:11,320 --> 00:00:16,200
My name is Mahe, and I am a software engineer at Anaconda.

6
00:00:16,200 --> 00:00:22,440
I live in Berlin, and this is my first time being in the States, my first PyCon US, and

7
00:00:22,440 --> 00:00:25,560
I am very happy to be here with all of you.

8
00:00:25,560 --> 00:00:30,680
And I want to thank you for joining us today for this tutorial, which is titled Publishing

9
00:00:30,680 --> 00:00:33,640
Your Python Package, The Condo Way.

10
00:00:33,640 --> 00:00:39,480
And I am very excited to co-present this with my colleagues, Bianca, Dave, and Valerio.

11
00:00:39,480 --> 00:00:44,760
We also have Yanis, Ken, and Steve at the back, who were kind enough to offer their

12
00:00:44,760 --> 00:00:47,600
help and support during the tutorial.

13
00:00:47,600 --> 00:00:49,960
I will briefly go through the structure of the tutorial.

14
00:00:49,960 --> 00:00:55,000
So, we will start with an overview of some basic packaging concepts.

15
00:00:55,000 --> 00:00:58,960
Some of you might already be familiar with them, but I think it's important to lay out

16
00:00:58,960 --> 00:01:02,840
some background before we get to the actual hands-on, and it's also important to ensure

17
00:01:02,840 --> 00:01:05,260
that everyone is on the same page.

18
00:01:05,260 --> 00:01:07,800
The overview will be presented by myself and Bianca.

19
00:01:07,800 --> 00:01:12,480
Then we'll move on to the hands-on, which will involve Valerio taking you through the

20
00:01:12,480 --> 00:01:17,760
process of writing a Python package from scratch, building it with CondoBuild, and publishing

21
00:01:17,760 --> 00:01:18,760
it on Condom.

22
00:01:19,520 --> 00:01:25,520
Then we'll have Dave talking about Condor governance, the Condor CoC, and more.

23
00:01:25,520 --> 00:01:29,640
This will then be followed by a Q&A session where you can ask us questions about the tutorial,

24
00:01:29,640 --> 00:01:33,800
about Condor, Anaconda, and more.

25
00:01:33,800 --> 00:01:38,280
And there will be breaks throughout the session, because, you know, we all need our four cups

26
00:01:38,280 --> 00:01:39,760
of coffee in the morning.

27
00:01:39,760 --> 00:01:43,560
All right, so let us begin from the beginning.

28
00:01:43,560 --> 00:01:45,920
What is even a software package?

29
00:01:46,080 --> 00:01:50,400
A software package is a piece of software that someone wrote and published for other

30
00:01:50,400 --> 00:01:52,480
people to install and use.

31
00:01:52,480 --> 00:01:56,880
Now, to ensure that this piece of software that this guy wrote works on other people's

32
00:01:56,880 --> 00:02:02,360
machine, the package, the software needs to go through the process of packaging.

33
00:02:02,360 --> 00:02:07,560
The process of packaging involves taking into account dependencies and OS requirements to

34
00:02:07,560 --> 00:02:11,680
make sure that the software works on each individual's machine.

35
00:02:12,440 --> 00:02:16,840
Now, you may install different kinds of packages on your machine, but sometimes they will not

36
00:02:16,840 --> 00:02:19,360
work out so nicely with each other.

37
00:02:19,360 --> 00:02:24,560
And it gets difficult to take care of all these dependencies and OS requirements.

38
00:02:24,560 --> 00:02:27,400
This is where Condor comes in.

39
00:02:27,400 --> 00:02:29,320
Condor is a package manager.

40
00:02:29,320 --> 00:02:34,160
It's open source, and it runs on Windows, Linux, and Mac OS.

41
00:02:34,160 --> 00:02:39,200
Condor is language-agnostic, which means you can package software written in any language

42
00:02:39,200 --> 00:02:42,840
using Condor and not just Python.

43
00:02:42,840 --> 00:02:48,120
Condor is also an environment manager, which means it lets users create, load, and switch

44
00:02:48,120 --> 00:02:50,560
between different environments.

45
00:02:50,560 --> 00:02:55,560
A Condor environment can contain specific interpreters and libraries that are separate

46
00:02:55,560 --> 00:02:59,720
from other environments and that are then separate from the libraries installed at system

47
00:02:59,720 --> 00:03:01,000
level.

48
00:03:01,000 --> 00:03:05,520
The benefit of Condor being a package manager as well as an environment manager is that

49
00:03:05,640 --> 00:03:09,880
it does all the tedious and difficult work of making sure that different packages work

50
00:03:09,880 --> 00:03:12,320
well together on your system.

51
00:03:12,320 --> 00:03:16,160
By the way, Condor is not the same as Anaconda.

52
00:03:16,160 --> 00:03:23,000
Anaconda is a Python and R data science distribution that contains Condor along with more than

53
00:03:23,000 --> 00:03:24,920
250 packages.

54
00:03:24,920 --> 00:03:30,520
Mini Condor is a bootstrap version of Anaconda that contains just Condor and Python and the

55
00:03:30,520 --> 00:03:31,920
packages that these two depend on.

56
00:03:31,920 --> 00:03:32,920
All right.

57
00:03:32,960 --> 00:03:37,120
Now you know what a package is, what packaging is, what is package management.

58
00:03:37,120 --> 00:03:39,240
You know Condor, Anaconda, and Mini Condor.

59
00:03:39,240 --> 00:03:43,080
The question is, where do I put my package for the world to see?

60
00:03:43,080 --> 00:03:47,760
Well, the answer is channels, but I am done speaking for now.

61
00:03:47,760 --> 00:03:50,160
Now Bianca will come over and talk about channels and more.

62
00:03:50,160 --> 00:03:51,160
Thank you.

63
00:03:51,160 --> 00:03:52,160
Hello.

64
00:03:52,160 --> 00:03:54,560
My name is Bianca Henderson.

65
00:03:54,560 --> 00:03:57,560
I am a software developer at Anaconda.

66
00:03:57,560 --> 00:03:59,200
So yeah, channels.

67
00:03:59,240 --> 00:04:03,720
Depending on the packaging technology that you're using, the online location where these

68
00:04:03,720 --> 00:04:06,480
packages are made available will receive a different name.

69
00:04:06,480 --> 00:04:11,120
So typically users will know about hosting packages on PyPI.

70
00:04:11,120 --> 00:04:14,920
In the Condor world, however, packages are hosted on channels.

71
00:04:14,920 --> 00:04:19,920
Channels are like warehouses for packages.

72
00:04:19,920 --> 00:04:24,080
The default Anaconda channel for Condor packages is the default channel.

73
00:04:24,080 --> 00:04:28,800
A Condor package creator can also create an Anaconda cloud account in order to host packages

74
00:04:28,800 --> 00:04:31,040
on their own channels.

75
00:04:31,040 --> 00:04:35,720
So in addition to the default channel, there are several community-owned channels such

76
00:04:35,720 --> 00:04:38,680
as CondorForge and Bioconda.

77
00:04:38,680 --> 00:04:43,000
The most wide-reaching community-maintained channel is CondorForge because it hosts many

78
00:04:43,000 --> 00:04:47,440
packages over, I think at current count it's over 21,000.

79
00:04:47,440 --> 00:04:51,400
Common standards are enforced to ensure that all packages have compatible versions and

80
00:04:51,400 --> 00:04:55,840
many of the packages are kept up to date by multiple maintainers.

81
00:04:55,880 --> 00:05:01,680
In Python packaging, specifically, there are certain files which contain the project metadata

82
00:05:01,680 --> 00:05:05,800
that are required in order for the application to be packaged properly.

83
00:05:05,800 --> 00:05:11,200
You may have heard of the setup.py and setup.cfg files, which used to be the standard for distributing

84
00:05:11,200 --> 00:05:12,800
Python modules.

85
00:05:12,800 --> 00:05:17,040
They're artifacts of the setup tools module which is designed to help with the packaging

86
00:05:17,040 --> 00:05:18,840
process.

87
00:05:18,840 --> 00:05:24,800
The more current way to package Python applications is via the use of a PyProject.toml file, which

88
00:05:24,800 --> 00:05:30,480
was introduced in PEP 5.18 in 2016 as a way of separating configuration of the build system

89
00:05:30,480 --> 00:05:34,800
from setup tools and also enabling setup tools to install itself without it needing to be

90
00:05:34,800 --> 00:05:38,400
installed before the packaging process.

91
00:05:38,400 --> 00:05:41,480
All right.

92
00:05:41,480 --> 00:05:46,800
Packaging, something specifically for a conda channel, requires something called a recipe.

93
00:05:46,800 --> 00:05:52,000
Each recipe minimally contains a meta.yml file which contains metadata such as the package

94
00:05:52,000 --> 00:05:55,880
name and version, its dependencies and how to build it.

95
00:05:55,880 --> 00:06:00,680
Recipes also require a build script in the form of either a build.sh file for Unix systems

96
00:06:00,680 --> 00:06:03,280
or build.bat for Windows.

97
00:06:03,280 --> 00:06:08,400
Alternatively, conda build will look for the build script in line inside of the meta.yml

98
00:06:08,400 --> 00:06:10,000
file.

99
00:06:10,000 --> 00:06:14,080
When you submit a recipe to the staged recipes repo on conda forge, it is reviewed by the

100
00:06:14,080 --> 00:06:16,200
conda forge community members.

101
00:06:16,200 --> 00:06:21,600
Once approved, an automated conda forge process then generates the package based on the recipe

102
00:06:21,760 --> 00:06:25,520
and then something called a feed stock becomes available on conda forge.

103
00:06:25,520 --> 00:06:29,320
The word feed stock typically refers to the mixture of raw materials used for industrial

104
00:06:29,320 --> 00:06:34,000
processes or blacksmithing, which is why conda forge adopted this term.

105
00:06:34,000 --> 00:06:37,040
It's kind of a cool back story there.

106
00:06:37,040 --> 00:06:41,000
Writing recipes manually can be very time consuming and tedious.

107
00:06:41,000 --> 00:06:43,080
So this is where greyskull comes in.

108
00:06:43,080 --> 00:06:49,920
Greyskull automatically generates conda recipes for PyPI packages, GitHub repos or cram packages.

109
00:06:50,000 --> 00:06:53,640
GitHub.py and pyproject.toml were mentioned earlier.

110
00:06:53,640 --> 00:06:58,840
Greyskull takes the metadata provided by those files and generates a recipe using that information.

111
00:06:58,840 --> 00:07:02,440
This recipe can then be used to build a conda package.

112
00:07:02,440 --> 00:07:06,880
So now that we have the knowledge about how the process works, we'll start this tutorial

113
00:07:06,880 --> 00:07:10,040
and hand over the mic to Valerio.

114
00:07:10,040 --> 00:07:14,520
Before we start, any questions on any of the topics that we covered?

115
00:07:14,520 --> 00:07:15,520
Or no?

116
00:07:15,520 --> 00:07:16,520
We can just start.

117
00:07:16,520 --> 00:07:17,520
Nice.

118
00:07:17,520 --> 00:07:18,520
Okay.

119
00:07:18,640 --> 00:07:21,640
This should be working.

120
00:07:21,640 --> 00:07:28,120
I think at this point I would need to attach my HDMI cable.

121
00:07:28,120 --> 00:07:29,120
Nice.

122
00:07:29,120 --> 00:07:32,640
So for this part, I will try to do an hands-on with you.

123
00:07:32,640 --> 00:07:36,480
Just move a little bit so I can see all of you here.

124
00:07:36,480 --> 00:07:40,880
In case you have any question, feel free to interrupt me at any time.

125
00:07:40,880 --> 00:07:46,800
It's very fine to have questions during the hands-on and we would love to have as much

126
00:07:47,000 --> 00:07:53,880
interaction as we can get during the whole tutorial.

127
00:07:53,880 --> 00:08:01,240
So I think that the idea of the project we decided to come up with was to create a project

128
00:08:01,240 --> 00:08:03,920
which we called a D&D Roller.

129
00:08:03,920 --> 00:08:14,080
I think the idea is to make an application that would make you able to revolve some dice

130
00:08:14,080 --> 00:08:16,080
for Dungeons and Dragons games.

131
00:08:16,080 --> 00:08:19,680
I don't know how many Dungeons and Dragons players we have in this room.

132
00:08:21,680 --> 00:08:22,680
Oh, okay.

133
00:08:22,680 --> 00:08:24,680
Not that many.

134
00:08:24,680 --> 00:08:31,920
Anyway, so likely I actually brought my dice so you can physically see them, sort of.

135
00:08:31,920 --> 00:08:37,720
So we do have, in Dungeons and Dragons you do need to have seven dice, different.

136
00:08:37,720 --> 00:08:39,360
So you have different faces for the dice.

137
00:08:39,360 --> 00:08:43,400
You're very welcome to see them later if you want.

138
00:08:43,400 --> 00:08:46,760
And essentially these dice are particular because you need them for different things.

139
00:08:46,760 --> 00:08:51,960
And you have the classic six-size dice, but you also have the four dice, so D4, then you

140
00:08:51,960 --> 00:08:57,640
have D10, D8, D12, D20, and D100.

141
00:08:57,640 --> 00:09:00,880
So essentially you need all of them to play.

142
00:09:00,880 --> 00:09:03,240
And you only have these particular dice.

143
00:09:03,240 --> 00:09:08,920
So from a perspective of a software, we need this application to handle this specific set

144
00:09:08,920 --> 00:09:10,640
of dice.

145
00:09:10,880 --> 00:09:15,480
And we also had an extra requirement, which is, since this is going to work in the terminal,

146
00:09:15,480 --> 00:09:20,400
we might want to have numbers printed in emojis, so Unicode characters.

147
00:09:20,400 --> 00:09:26,720
Last but not least, we also have this project to make a report.

148
00:09:26,720 --> 00:09:31,000
Because sometimes when you play D&D, what you have to do is to roll many times multiple

149
00:09:31,000 --> 00:09:36,120
dice and so you have to have an overview, a tabular overview of everything that has

150
00:09:36,120 --> 00:09:38,200
happened with your rolling.

151
00:09:38,200 --> 00:09:43,240
So these are the two main requirements we want to develop together.

152
00:09:43,240 --> 00:09:44,400
All right?

153
00:09:44,400 --> 00:09:52,280
So the first and foremost thing we want to do is to create a repository because we will

154
00:09:52,280 --> 00:09:59,160
be working as this is a real project we want to pack and to deliver and distribute for

155
00:09:59,160 --> 00:10:00,280
everyone.

156
00:10:00,280 --> 00:10:05,600
So the first thing we do is to go on GitHub, and I hope everybody here has a GitHub account.

157
00:10:05,840 --> 00:10:10,360
You can create a repository which presumably will be named D&D Roller.

158
00:10:10,360 --> 00:10:12,120
I assume it will be named this way.

159
00:10:12,120 --> 00:10:13,680
You can name it as you like.

160
00:10:13,680 --> 00:10:16,360
And I can do that with you now.

161
00:10:16,360 --> 00:10:18,360
Is everything okay?

162
00:10:18,360 --> 00:10:21,360
Yeah, okay.

163
00:10:21,360 --> 00:10:23,360
Sure.

164
00:10:23,360 --> 00:10:30,640
So just to be clear, do you have the document open in front of you?

165
00:10:30,640 --> 00:10:32,940
Your HackMD document?

166
00:10:32,980 --> 00:10:36,140
If you need the link, no worries, we can send you.

167
00:10:36,140 --> 00:10:41,300
Or I think that has been sent around so you should probably have an email with all the

168
00:10:41,300 --> 00:10:43,500
links and references.

169
00:10:43,500 --> 00:10:46,100
But please if that's not the case, please let us know.

170
00:10:46,100 --> 00:10:47,100
It's very, very fine.

171
00:10:47,100 --> 00:10:48,100
Okay?

172
00:10:48,100 --> 00:10:49,700
We're here to help.

173
00:10:49,700 --> 00:10:56,700
And again, we hope we could make this as interactive as possible.

174
00:10:56,700 --> 00:10:59,260
Nice.

175
00:10:59,260 --> 00:11:07,220
So by the way, my plan for this hands-on is to work on...

176
00:11:07,220 --> 00:11:08,700
So you'll be seeing the browser.

177
00:11:08,700 --> 00:11:11,860
So I'll scroll down the document on this side.

178
00:11:11,860 --> 00:11:14,900
And probably what I can do is to hide this one because I don't need it.

179
00:11:14,900 --> 00:11:17,460
And then grab some space.

180
00:11:17,460 --> 00:11:19,020
I want this this way.

181
00:11:19,020 --> 00:11:20,020
Then I have an editor.

182
00:11:20,020 --> 00:11:23,940
I will be using Visual Studio Code, but you can do any editor you like.

183
00:11:23,940 --> 00:11:26,660
It's very much the same.

184
00:11:26,700 --> 00:11:33,900
And I will also be using a command line shell.

185
00:11:33,900 --> 00:11:41,140
So, and at this point, if the font size won't be bigger enough in the back, you'll let me

186
00:11:41,140 --> 00:11:44,140
know and I'll properly manage.

187
00:11:44,140 --> 00:11:45,140
Okay.

188
00:11:45,140 --> 00:11:51,140
So what I want to do now is to go and create this repository.

189
00:11:51,140 --> 00:11:54,740
We'll be moving this window on this side.

190
00:11:54,740 --> 00:12:01,740
So I'll go on GitHub on my username page.

191
00:12:01,740 --> 00:12:08,380
And I will be clicking on plus new repository.

192
00:12:08,380 --> 00:12:10,460
If you're not familiar with this, please let me know.

193
00:12:10,460 --> 00:12:11,820
I will be slowing down.

194
00:12:11,820 --> 00:12:17,420
But essentially, I set up the name, dndroller.

195
00:12:17,420 --> 00:12:19,540
I'll put some description.

196
00:12:19,580 --> 00:12:25,100
I think the description could be something like simple Python app, as it's here.

197
00:12:25,100 --> 00:12:32,420
Simple Python app to roll dice for D&D.

198
00:12:32,420 --> 00:12:33,980
Now the important bit.

199
00:12:33,980 --> 00:12:36,940
We should have to, we should select the visibility of the project.

200
00:12:36,940 --> 00:12:38,660
It's going to be public.

201
00:12:38,660 --> 00:12:41,980
We want to initialize the repository with readme file.

202
00:12:41,980 --> 00:12:43,940
That's generally a good practice.

203
00:12:43,940 --> 00:12:47,780
And also, it's very important when you create that, although you can do that later, but

204
00:12:47,820 --> 00:12:53,260
generally, you should have an idea when you create a project what is the license you want

205
00:12:53,260 --> 00:12:55,300
to pick for your distribution.

206
00:12:55,300 --> 00:13:00,580
We're going to select MIT license, which is the most open source license you can have.

207
00:13:00,580 --> 00:13:04,940
So you can essentially reuse everything, no problem.

208
00:13:04,940 --> 00:13:09,540
And the git ignore, that could come handy.

209
00:13:09,540 --> 00:13:11,740
It's to have a Python template.

210
00:13:11,740 --> 00:13:16,780
So essentially, what GitHub is going to do with this is it's going to create a .gitignore

211
00:13:16,860 --> 00:13:24,500
file for our own repository with the list of the most common ignored resources and files

212
00:13:24,500 --> 00:13:26,380
when you have a Python project.

213
00:13:26,380 --> 00:13:27,380
Nice.

214
00:13:27,380 --> 00:13:32,340
We click on create repository, and we're good to go.

215
00:13:32,340 --> 00:13:36,100
So at this point, you should have something similar to this.

216
00:13:36,100 --> 00:13:38,980
If not, please let me know.

217
00:13:38,980 --> 00:13:43,660
And what we need now is to make a clone of this repository.

218
00:13:43,700 --> 00:13:53,860
So I'm going to copy the URL, clicking on code, and I'm going to move it on something

219
00:13:53,860 --> 00:13:56,780
in a folder that I want.

220
00:13:56,780 --> 00:14:04,420
I don't know, let's say, let's make a conda tutorial.

221
00:14:04,420 --> 00:14:07,580
And then I git clone.

222
00:14:07,580 --> 00:14:10,820
Is the font of this shell big enough?

223
00:14:14,620 --> 00:14:15,620
Larger?

224
00:14:18,420 --> 00:14:19,420
Better?

225
00:14:19,420 --> 00:14:20,420
Nice.

226
00:14:20,420 --> 00:14:22,420
Thank you.

227
00:14:22,420 --> 00:14:25,300
Okay.

228
00:14:25,300 --> 00:14:31,260
So what this is doing is creating a new folder, which is going to be called dndroller as a

229
00:14:31,260 --> 00:14:38,180
repository because I didn't specify differently.

230
00:14:38,180 --> 00:14:39,180
And cloning.

231
00:14:39,180 --> 00:14:40,180
Nice.

232
00:14:40,940 --> 00:14:43,940
So at this point, oopsie.

233
00:14:43,940 --> 00:14:49,900
At this point, I don't see anything.

234
00:14:49,900 --> 00:14:54,180
We should have a dnd folder.

235
00:14:54,180 --> 00:14:59,700
I'm using zish in this particular case as a shell with a bit of gimmicks.

236
00:14:59,700 --> 00:15:03,940
So there's some plugins in the shell that tells me that it's a GitHub repository, I'm

237
00:15:04,900 --> 00:15:11,900
the main branch, and the base is my default conda python environment I'm using currently.

238
00:15:11,900 --> 00:15:14,900
So, sure, definitely.

239
00:15:14,900 --> 00:15:17,900
No, no.

240
00:15:17,900 --> 00:15:28,900
Please, please interrupt me at any time.

241
00:15:28,900 --> 00:15:31,300
It's very fine.

242
00:15:31,300 --> 00:15:32,900
And this also is for you.

243
00:15:32,900 --> 00:15:39,140
So just like need from you a bit of feedback as much as we go through the things because

244
00:15:39,140 --> 00:15:42,020
I don't know how familiar with things.

245
00:15:42,020 --> 00:15:44,260
And it's very fine if you don't know things.

246
00:15:44,260 --> 00:15:47,620
I'm actually here to tell you what I know.

247
00:15:47,620 --> 00:15:53,940
So this doesn't necessarily guarantee that I know the answer, but I might try.

248
00:15:53,940 --> 00:15:56,780
Anyway, so I think we've done this already.

249
00:15:56,780 --> 00:16:01,100
So we did the repository, we created the folder.

250
00:16:01,100 --> 00:16:02,780
I call it python.tutorial.

251
00:16:02,780 --> 00:16:04,060
I call it differently.

252
00:16:04,060 --> 00:16:06,100
It doesn't really matter.

253
00:16:06,100 --> 00:16:07,340
And we cloned the repository.

254
00:16:07,340 --> 00:16:10,820
So we're done at this point here.

255
00:16:10,820 --> 00:16:11,820
Okay?

256
00:16:11,820 --> 00:16:18,700
Yes, sorry.

257
00:16:18,700 --> 00:16:21,500
We were thinking that this is the general case.

258
00:16:21,500 --> 00:16:24,340
It doesn't have to be.

259
00:16:24,340 --> 00:16:27,540
If you want to have a different setup.

260
00:16:28,220 --> 00:16:34,580
Hopefully, you can have a local package.

261
00:16:34,580 --> 00:16:35,580
We can touch that.

262
00:16:35,580 --> 00:16:38,500
But that's a very good point, actually.

263
00:16:38,500 --> 00:16:42,620
This will be relevant when we get to creating the package.

264
00:16:42,620 --> 00:16:45,580
So so far, we're actually doing a standard python development.

265
00:16:45,580 --> 00:16:52,040
So the plan for this step and for the break, I guess, is we get to develop this package

266
00:16:52,040 --> 00:16:53,460
from scratch.

267
00:16:54,100 --> 00:17:00,820
Hopefully, this project would be entertaining for you enough to make it fun.

268
00:17:00,820 --> 00:17:07,620
But it's like we're building what it's going to be the target of our packaging in the second

269
00:17:07,620 --> 00:17:08,620
part.

270
00:17:08,620 --> 00:17:09,620
All right?

271
00:17:09,620 --> 00:17:15,260
And this package, this project being the DND roller we've been talking about.

272
00:17:15,260 --> 00:17:21,540
So at this point, I would move myself to using...

273
00:17:21,540 --> 00:17:23,540
I can close this one.

274
00:17:23,540 --> 00:17:25,380
Well, I'll leave it there.

275
00:17:25,380 --> 00:17:27,780
I will be moving on to the editor.

276
00:17:27,780 --> 00:17:29,740
And we'll open this folder.

277
00:17:29,740 --> 00:17:36,180
Or maybe I do it a smart way, which is opening directly from terminal.

278
00:17:36,180 --> 00:17:39,180
So like code.

279
00:17:39,180 --> 00:17:41,380
You should open a new window.

280
00:17:41,780 --> 00:17:43,340
I'll be using Studio Code.

281
00:17:43,340 --> 00:17:45,700
I can close this one.

282
00:17:45,700 --> 00:17:49,500
And at this point, I may make it bigger.

283
00:17:49,500 --> 00:17:54,380
Is this big enough in the back?

284
00:17:54,380 --> 00:17:57,620
We have an empty folder so far.

285
00:17:57,620 --> 00:17:59,820
And we have exactly what is it in the repository.

286
00:17:59,820 --> 00:18:03,860
We have readme, which is also empty right now.

287
00:18:03,860 --> 00:18:05,100
Well, it's not empty.

288
00:18:05,300 --> 00:18:31,140
So now we have to create our own actual package.

289
00:18:31,180 --> 00:18:35,620
So we can create a new folder.

290
00:18:35,620 --> 00:18:39,460
In the instructions here, you see the commands to do that in the shell.

291
00:18:39,460 --> 00:18:43,420
So I will be doing the same.

292
00:18:43,420 --> 00:18:47,500
You can do the way you prefer.

293
00:18:47,500 --> 00:18:54,460
I am the folder, so I will be making a new DND underscore roller folder.

294
00:18:54,460 --> 00:18:58,540
Then I create a new folder called tests.

295
00:18:58,540 --> 00:19:04,020
This is how now the structure of the project looks like.

296
00:19:04,020 --> 00:19:06,580
Let me show you in the shell here.

297
00:19:06,580 --> 00:19:07,420
Sorry.

298
00:19:07,420 --> 00:19:09,300
LS.

299
00:19:09,300 --> 00:19:11,500
So this is, sorry.

300
00:19:11,500 --> 00:19:13,900
Let me do this properly.

301
00:19:13,900 --> 00:19:17,100
I'm going to do this in vertical so you can read it better.

302
00:19:17,100 --> 00:19:18,820
LS minus 1.

303
00:19:18,820 --> 00:19:19,540
Nice.

304
00:19:19,540 --> 00:19:25,540
So this is starting to be the classical project structure when

305
00:19:25,540 --> 00:19:27,940
you're creating the Python project.

306
00:19:27,980 --> 00:19:31,260
So you have the DND roller, which is where we're going to presumably put

307
00:19:31,260 --> 00:19:34,660
the code, the Python code, and tests, where we're going to presumably

308
00:19:34,660 --> 00:19:38,500
put the test code in Python code.

309
00:19:38,500 --> 00:19:43,100
And the rest of it is essentially what you can see here.

310
00:19:43,100 --> 00:19:44,620
OK?

311
00:19:44,620 --> 00:19:47,980
So any question so far?

312
00:19:47,980 --> 00:19:48,740
Nothing?

313
00:19:48,740 --> 00:19:49,300
Fine?

314
00:19:49,300 --> 00:19:50,300
Boring?

315
00:19:50,300 --> 00:19:50,700
Yes?

316
00:19:50,700 --> 00:19:52,180
No?

317
00:19:52,180 --> 00:19:52,660
Nice.

318
00:19:55,780 --> 00:19:56,260
Nice.

319
00:19:56,260 --> 00:20:01,860
The first thing we do is to create our first module, dice.py module.

320
00:20:01,860 --> 00:20:05,380
And this will go within the DND underscore roller.

321
00:20:05,380 --> 00:20:09,140
So it's the first file of our own package.

322
00:20:09,140 --> 00:20:12,660
So within the DND roller, we create a new file.

323
00:20:12,660 --> 00:20:15,380
It's called dice.py.

324
00:20:15,380 --> 00:20:16,340
There you go.

325
00:20:16,340 --> 00:20:16,820
OK.

326
00:20:16,820 --> 00:20:19,100
Close this one.

327
00:20:19,100 --> 00:20:21,260
OK.

328
00:20:21,260 --> 00:20:36,060
In case you're using, I just remembered that I skipped creating the

329
00:20:36,060 --> 00:20:38,100
environment, the conda environment.

330
00:20:38,100 --> 00:20:40,660
I don't know if you have done this already, but we can do that

331
00:20:40,660 --> 00:20:42,540
together now.

332
00:20:42,540 --> 00:20:48,900
So in the beginning, on top here, in the preparation step, you

333
00:20:48,940 --> 00:20:51,660
should have created the conda environment, which is the

334
00:20:51,660 --> 00:20:55,300
environment we'll be using during the hands-on.

335
00:20:55,300 --> 00:21:00,660
So that we work on an environment which is specifically

336
00:21:00,660 --> 00:21:02,500
created for the hands-on.

337
00:21:02,500 --> 00:21:05,660
And also, it's very useful because you're not polluting

338
00:21:05,660 --> 00:21:07,580
whatever environment you have on your computer.

339
00:21:07,580 --> 00:21:14,060
So it's going to be the sandbox of our own project, our own work.

340
00:21:14,060 --> 00:21:16,420
Do you have created the packaging environment as

341
00:21:16,460 --> 00:21:18,340
the instructions?

342
00:21:18,340 --> 00:21:19,060
OK.

343
00:21:19,060 --> 00:21:21,220
If not, you can do that with me.

344
00:21:21,220 --> 00:21:22,460
Yes, please.

345
00:21:24,540 --> 00:21:27,500
Sorry, I didn't get that.

346
00:21:27,500 --> 00:21:28,740
Sure.

347
00:21:30,580 --> 00:21:31,820
Is that better?

348
00:21:34,900 --> 00:21:38,860
I can go even further with that.

349
00:21:38,860 --> 00:21:39,380
OK.

350
00:21:39,380 --> 00:21:45,580
So again, in the terminal window, I'm going to clear

351
00:21:45,780 --> 00:21:49,100
so I have a better view myself.

352
00:21:49,100 --> 00:21:51,900
So what we do here is conda.

353
00:21:51,900 --> 00:21:56,340
We do the classic command line instructions by creating a new

354
00:21:56,340 --> 00:21:57,900
conda environment.

355
00:21:57,900 --> 00:22:02,500
So we do conda create minus n, which is the name of the

356
00:22:02,500 --> 00:22:03,540
environment we want to create.

357
00:22:03,540 --> 00:22:05,580
We call it packaging.

358
00:22:05,580 --> 00:22:10,420
Then we say minus y because we don't want to hit down yes in

359
00:22:10,420 --> 00:22:11,220
confirmation.

360
00:22:11,220 --> 00:22:12,940
We assume everything is fine.

361
00:22:12,980 --> 00:22:16,620
Then we have Python 3.10 installed and PyTest.

362
00:22:16,620 --> 00:22:19,340
These are the only two packages we're going to install there.

363
00:22:19,340 --> 00:22:21,100
All right?

364
00:22:21,100 --> 00:22:23,340
So we run it.

365
00:22:26,860 --> 00:22:35,740
And you should be seeing something like that executing on

366
00:22:35,740 --> 00:22:38,100
your own.

367
00:22:38,100 --> 00:22:41,900
When this is done, we should have a new packaging

368
00:22:41,900 --> 00:22:43,580
environment ready to be activated.

369
00:22:43,580 --> 00:22:48,620
So the last step is to activate our new packaging

370
00:22:48,620 --> 00:22:49,340
environment.

371
00:22:49,340 --> 00:22:54,620
So we do conda, activate.

372
00:22:54,620 --> 00:22:56,460
I would probably do this now.

373
00:22:56,460 --> 00:23:01,820
Probably move, sorry, shrink the window a little bit so my

374
00:23:01,820 --> 00:23:05,100
last line in the terminal is going to end up in the middle

375
00:23:05,100 --> 00:23:07,060
of the screen.

376
00:23:07,060 --> 00:23:08,860
And still it's very difficult for me.

377
00:23:08,860 --> 00:23:09,900
OK.

378
00:23:09,900 --> 00:23:11,140
Nice.

379
00:23:11,900 --> 00:23:13,140
Let's do this.

380
00:23:19,140 --> 00:23:21,340
OK.

381
00:23:21,340 --> 00:23:22,580
Packaging.

382
00:23:25,500 --> 00:23:28,900
So now, if you're using zish, you might probably be seeing

383
00:23:28,900 --> 00:23:33,820
that I am on the packaging conda environment.

384
00:23:33,820 --> 00:23:38,900
If not, it's essentially you can test.

385
00:23:41,860 --> 00:23:44,020
I don't know how to do that on Windows, though, if you're

386
00:23:44,020 --> 00:23:44,980
Windows.

387
00:23:44,980 --> 00:23:48,500
But if you're on a Linux slash Unix machine, you can

388
00:23:48,500 --> 00:23:53,860
actually check which Python you're using and essentially

389
00:23:53,860 --> 00:23:57,060
points you to the path of the Python command in your shell.

390
00:23:57,060 --> 00:23:58,660
And that should be something like that.

391
00:23:58,660 --> 00:24:02,020
So on a conda installation folder or minicond installation

392
00:24:02,060 --> 00:24:04,820
folder, slash m, slash name of the environment, slash

393
00:24:04,820 --> 00:24:05,940
mean, slash Python.

394
00:24:05,940 --> 00:24:07,420
That's the path.

395
00:24:07,420 --> 00:24:09,500
And essentially this is telling you you're using the

396
00:24:09,500 --> 00:24:12,580
Python interpreter of the environment called packaging.

397
00:24:12,580 --> 00:24:13,140
OK.

398
00:24:13,140 --> 00:24:17,140
So everything we'll be doing now, from now on, in this

399
00:24:17,140 --> 00:24:19,860
session of the terminal, will be within the

400
00:24:19,860 --> 00:24:21,860
packaging environment.

401
00:24:21,860 --> 00:24:24,060
That sounds good?

402
00:24:24,060 --> 00:24:27,420
Is that OK for you so far?

403
00:24:27,420 --> 00:24:29,260
Or is it like to common knowledge?

404
00:24:29,260 --> 00:24:30,500
You know this already?

405
00:24:32,340 --> 00:24:33,100
OK.

406
00:24:33,100 --> 00:24:33,580
Good.

407
00:24:33,580 --> 00:24:36,220
As soon as there is anyone interested here, I'm very

408
00:24:36,220 --> 00:24:37,660
happy to explain things.

409
00:24:37,660 --> 00:24:38,900
There's no problem at all.

410
00:24:42,460 --> 00:24:46,460
So just to make crystal clear what's going on, we're

411
00:24:46,460 --> 00:24:51,420
creating a conda environment so that everything, so imagine

412
00:24:51,420 --> 00:24:55,020
that you have your own Python interpreter on your computer.

413
00:24:55,020 --> 00:24:59,500
And now we are saying, and this could be available via an

414
00:24:59,500 --> 00:25:00,020
interpreter.

415
00:25:00,020 --> 00:25:03,260
We suggested to install miniconda because miniconda,

416
00:25:03,260 --> 00:25:09,460
as Mahe and Bianca said already in the first part, you

417
00:25:09,460 --> 00:25:11,420
can have Python and conda altogether.

418
00:25:11,420 --> 00:25:13,780
So you have conda now on your computer.

419
00:25:13,780 --> 00:25:15,700
A command you can run.

420
00:25:15,700 --> 00:25:20,980
And afterwards, we're creating, within this

421
00:25:20,980 --> 00:25:25,460
environment, we're creating some space where we're going

422
00:25:25,460 --> 00:25:29,380
to install all the packages we need without interfering

423
00:25:29,420 --> 00:25:31,300
with the rest of the installations.

424
00:25:31,300 --> 00:25:34,380
And you can have a list of as many environments as you like

425
00:25:34,380 --> 00:25:35,380
on your computer.

426
00:25:35,380 --> 00:25:38,220
In case you're wondering and you want to check what are the

427
00:25:38,220 --> 00:25:43,500
environments on your computer, you can run a conda info,

428
00:25:43,500 --> 00:25:45,100
minus minus m's.

429
00:25:45,100 --> 00:25:46,700
And this gives you the list of all the

430
00:25:46,700 --> 00:25:48,060
environments you have.

431
00:25:48,060 --> 00:25:50,060
In this particular case, I have this list.

432
00:25:50,060 --> 00:25:54,900
And the star indicates the one that you're currently using.

433
00:25:54,900 --> 00:25:56,660
This is another way to check, by the way.

434
00:25:56,660 --> 00:25:59,500
This is probably a platform-independent way to

435
00:25:59,500 --> 00:26:04,700
check, using directly conda, to check what is the

436
00:26:04,700 --> 00:26:05,940
environment you're currently using.

437
00:26:11,380 --> 00:26:13,620
And in fact, I'm using packaging.

438
00:26:13,620 --> 00:26:16,580
So whichever package I'm going to install from now on, in

439
00:26:16,580 --> 00:26:19,460
this terminal session, is not going to interfere with any

440
00:26:19,460 --> 00:26:20,580
other environment here.

441
00:26:20,580 --> 00:26:23,660
So I'm pretty sure I'm installing everything there.

442
00:26:23,660 --> 00:26:26,940
And any other package that is not in that environment will

443
00:26:26,940 --> 00:26:29,580
not be accessible or available.

444
00:26:33,140 --> 00:26:40,380
So we are now going to work on the dice module.

445
00:26:40,380 --> 00:26:43,020
Let me go back to the code.

446
00:26:43,020 --> 00:26:44,700
Well, the first thing is we need a

447
00:26:44,700 --> 00:26:48,220
function to roll a dice.

448
00:26:48,220 --> 00:26:54,820
And probably the main and only requirement of this function

449
00:26:54,820 --> 00:26:58,820
is that we just have a limited set of dice we can choose.

450
00:26:58,820 --> 00:27:05,420
So this could be one of the seven allowed in D&D. So it

451
00:27:05,420 --> 00:27:09,660
could be a D4, 6, 8, 10, 12, 100.

452
00:27:09,660 --> 00:27:11,940
There's actually a catch in this, if you're not familiar

453
00:27:11,940 --> 00:27:13,100
with D&D.

454
00:27:13,100 --> 00:27:19,660
So the D100, this is one, is essentially a probability

455
00:27:19,660 --> 00:27:26,740
die, which means that you get numbers in decimals.

456
00:27:26,740 --> 00:27:32,340
So like you have 10, 20, 30, 40, up to 100.

457
00:27:32,340 --> 00:27:35,180
You don't have numbers in the middle.

458
00:27:35,180 --> 00:27:37,980
And so that's the little catch we want to

459
00:27:37,980 --> 00:27:39,380
implement in the function.

460
00:27:39,380 --> 00:27:43,900
So it means that you essentially roll a D10 and

461
00:27:43,900 --> 00:27:44,900
you multiply by 10.

462
00:27:44,900 --> 00:27:49,460
This is the 100 that you need.

463
00:27:49,460 --> 00:27:53,540
So let's write down now the roll function, which is the

464
00:27:53,540 --> 00:27:55,980
main building block of everything we're going to do

465
00:27:55,980 --> 00:27:57,220
from now on.

466
00:27:59,820 --> 00:28:03,660
This is the pretty simple requirement I was expecting.

467
00:28:03,660 --> 00:28:05,300
So you have a function roll.

468
00:28:05,300 --> 00:28:08,820
You pass the parameter D, which is the number of sides

469
00:28:08,820 --> 00:28:11,060
of the dice you want, or the die you want.

470
00:28:11,060 --> 00:28:15,700
And then you return a number in 1 for included.

471
00:28:15,700 --> 00:28:19,900
So if you're using, at least when I wrote this one, I was

472
00:28:19,900 --> 00:28:23,260
assuming that using square brackets means the interval

473
00:28:23,260 --> 00:28:27,700
with the two ends included, as in the mathematical

474
00:28:27,700 --> 00:28:29,420
notation.

475
00:28:29,420 --> 00:28:33,220
If you have a call like roll D equal 10, you return a

476
00:28:33,220 --> 00:28:36,620
number in 1 and 10, both included.

477
00:28:36,620 --> 00:28:39,940
D5, you have an exception, because D5 doesn't exist in

478
00:28:39,940 --> 00:28:40,780
DND.

479
00:28:40,780 --> 00:28:44,980
And the catch about the D100 is essentially roll D10

480
00:28:44,980 --> 00:28:47,820
multiplied by 10, as I told you already.

481
00:28:47,820 --> 00:28:49,060
So that's good.

482
00:28:51,340 --> 00:28:54,500
So let's write it down.

483
00:28:54,500 --> 00:28:56,260
Well, the implementation is going to be quite

484
00:28:56,260 --> 00:28:56,940
straightforward.

485
00:28:56,940 --> 00:29:02,300
So I'm going to copy now and then comment over the code, if

486
00:29:02,300 --> 00:29:04,020
that's OK with you.

487
00:29:05,020 --> 00:29:08,340
I'm going to copy and paste.

488
00:29:08,340 --> 00:29:11,580
I'm not expecting you to do differently.

489
00:29:11,580 --> 00:29:14,140
You're very welcome to copy and paste as well.

490
00:29:14,140 --> 00:29:17,900
The point at this point in this tutorial is not to write

491
00:29:17,900 --> 00:29:21,100
Python, it's just to have something to work with.

492
00:29:21,100 --> 00:29:23,020
So it's very fine.

493
00:29:23,020 --> 00:29:26,820
What this function is actually doing is we have a tuple of

494
00:29:26,820 --> 00:29:28,780
supported dice here.

495
00:29:28,780 --> 00:29:32,900
We have a function roll parameter D of type expected of

496
00:29:32,900 --> 00:29:35,380
type int, returning an integer.

497
00:29:35,380 --> 00:29:42,300
We have random dot run int to generate the random numbers.

498
00:29:42,300 --> 00:29:44,860
And we rely on that.

499
00:29:44,860 --> 00:29:48,060
Probably the only thing to mention here, if you're

500
00:29:48,060 --> 00:29:52,060
interested in this particular flavors of Python programming,

501
00:29:52,060 --> 00:29:56,420
is instead of checking, so we have to make sure that D is an

502
00:29:56,420 --> 00:29:57,260
integer.

503
00:29:57,300 --> 00:30:04,380
So instead of actually checking that D is directly if D is an

504
00:30:04,380 --> 00:30:09,620
integer, we assume D is an integer, or we try to cast it.

505
00:30:09,620 --> 00:30:12,140
And then if that's not going to work, an

506
00:30:12,140 --> 00:30:13,540
exception will be raised.

507
00:30:13,540 --> 00:30:17,020
And so we handle the error accordingly.

508
00:30:17,020 --> 00:30:18,660
Otherwise, everything works.

509
00:30:18,660 --> 00:30:23,620
This particular pattern of programming is called EAFB,

510
00:30:23,620 --> 00:30:26,500
easier ask for permission than forgiveness.

511
00:30:26,500 --> 00:30:31,460
So it's a way to program idiomatic Python.

512
00:30:31,460 --> 00:30:34,660
The alternative would have been if closes.

513
00:30:34,660 --> 00:30:39,620
But in the Pythonic solution, or idiomatic Python if you

514
00:30:39,620 --> 00:30:43,260
want, better to ask for permission than forgiveness is

515
00:30:43,260 --> 00:30:44,580
a better approach.

516
00:30:44,580 --> 00:30:49,940
So you're essentially forced to cast to an integer if for any

517
00:30:49,940 --> 00:30:51,940
reason this is not going to work, because for example, it's

518
00:30:52,900 --> 00:30:56,540
a string, which is an alphabetical string, not a

519
00:30:56,540 --> 00:31:00,460
number, a numerical string, which is going to work, by the

520
00:31:00,460 --> 00:31:01,700
way.

521
00:31:05,460 --> 00:31:06,700
It raises an exception.

522
00:31:09,940 --> 00:31:15,100
And if everything works at this point, so if we reach the else

523
00:31:15,100 --> 00:31:21,100
branch, which happens when no exception is raised during the

524
00:31:21,100 --> 00:31:26,820
try block, again we check that D is in the supported dice.

525
00:31:26,820 --> 00:31:29,060
If it's not, we raise a value error.

526
00:31:29,060 --> 00:31:33,020
And if it's not, so everything is fine, we use randint.

527
00:31:33,020 --> 00:31:39,340
And unless we have D100, if that's the case, we change the

528
00:31:39,340 --> 00:31:41,620
way in which we call D.

529
00:31:41,620 --> 00:31:46,660
Essentially, we make a recursive colon D10 times 10.

530
00:31:46,660 --> 00:31:48,940
Does that make sense?

531
00:31:48,940 --> 00:31:54,380
So assuming this is pretty much it and quite straightforward

532
00:31:54,380 --> 00:32:01,300
for you, and the few comments I made already, before moving on

533
00:32:01,300 --> 00:32:03,860
to the second bit, which is normally what you would

534
00:32:03,860 --> 00:32:07,140
normally do when you develop that, is OK, I'm done with the

535
00:32:07,140 --> 00:32:09,700
code, I need some tests to make sure that the implementation

536
00:32:09,700 --> 00:32:15,380
is actually doing what I'm expecting it does.

537
00:32:15,380 --> 00:32:18,580
And so we're moving on to testing.

538
00:32:18,620 --> 00:32:22,380
To make this a proper Python package, we should be creating

539
00:32:22,380 --> 00:32:26,340
another file within the dnd folder, which is

540
00:32:26,340 --> 00:32:28,820
called dunder init.

541
00:32:28,820 --> 00:32:33,500
I'm going to tell you exactly what dunder is in a minute.

542
00:32:33,500 --> 00:32:37,580
Just for now, assume that we're using double underscore

543
00:32:37,580 --> 00:32:42,340
init, is that bit again up again?

544
00:32:42,340 --> 00:32:46,820
Double underscore init double underscore again dot py.

545
00:32:46,860 --> 00:32:50,020
So the double underscore in Python terminology is

546
00:32:50,020 --> 00:32:52,620
generally referred to as dunder, as a short for

547
00:32:52,620 --> 00:32:53,780
double underscore.

548
00:32:53,780 --> 00:32:59,460
And the dunder init file is what is actually making the

549
00:32:59,460 --> 00:33:04,260
dnd roller folder a Python package.

550
00:33:04,260 --> 00:33:07,220
And just to clarify a little bit of clashing in

551
00:33:07,220 --> 00:33:13,740
terminology at this point, we're calling package, using

552
00:33:13,740 --> 00:33:15,660
package to refer to two different things.

553
00:33:15,660 --> 00:33:19,740
So the dnd roller is a Python package.

554
00:33:19,740 --> 00:33:24,620
The whole project we're going to build in the end is a

555
00:33:24,620 --> 00:33:26,780
Python package as well, but actually is a package.

556
00:33:26,780 --> 00:33:29,140
Let's call it package, not Python package.

557
00:33:29,140 --> 00:33:32,780
So to make distinction between the Python package from the

558
00:33:32,780 --> 00:33:35,900
perspective of the name resolution and the namespace of

559
00:33:35,900 --> 00:33:40,060
your programming, and the software package you're

560
00:33:40,060 --> 00:33:45,460
building and distributing on the repository to be installed.

561
00:33:45,460 --> 00:33:49,180
So let's call it Python package, this one, and software

562
00:33:49,180 --> 00:33:52,780
package, the ultimate target of this hands-on.

563
00:33:55,740 --> 00:34:01,660
So the dnd file is particularly useful in a

564
00:34:01,660 --> 00:34:04,180
package because it essentially defines the public

565
00:34:04,180 --> 00:34:05,340
API of your package.

566
00:34:05,340 --> 00:34:08,660
So whatever is, and I'm very happy to explain how that

567
00:34:08,660 --> 00:34:11,700
works in case you're interested later on, or maybe

568
00:34:11,740 --> 00:34:15,540
during the break, or you have any question later on.

569
00:34:15,540 --> 00:34:19,700
But let's assume for now you're familiar with how this

570
00:34:19,700 --> 00:34:26,740
works, and believe me when I tell you that the dnd init

571
00:34:26,740 --> 00:34:30,100
file is essentially making the public API of your package.

572
00:34:30,100 --> 00:34:34,220
So whichever name we're writing and we're defining into

573
00:34:34,220 --> 00:34:39,300
the init file is going to be the public API of the package

574
00:34:39,300 --> 00:34:41,580
as well from the import perspective.

575
00:34:41,620 --> 00:34:46,020
So for example, if we do something like from .dice

576
00:34:46,020 --> 00:34:51,860
import role, we're essentially making the role function

577
00:34:51,860 --> 00:34:56,820
available in the dice module a public function of the dnd

578
00:34:56,820 --> 00:35:01,740
roller package, Python package, with just this line.

579
00:35:01,740 --> 00:35:04,540
OK?

580
00:35:04,580 --> 00:35:11,740
And if you don't believe me, as you should, because it's

581
00:35:11,740 --> 00:35:15,180
always good to test it, what we can do is to run a Python

582
00:35:15,180 --> 00:35:16,500
interpreter.

583
00:35:16,500 --> 00:35:23,020
And so interactively, if we run Python, OK?

584
00:35:23,020 --> 00:35:26,660
I'm going slow down because I'm really improvising at this

585
00:35:26,660 --> 00:35:30,740
point, what we can do is we can import.

586
00:35:30,780 --> 00:35:34,140
So we know that the role function is in the dice module

587
00:35:34,140 --> 00:35:36,700
here within the dnd roller package.

588
00:35:36,700 --> 00:35:37,420
OK?

589
00:35:37,420 --> 00:35:43,380
So for sure, we can do from dnd underscore roller dot dice

590
00:35:43,380 --> 00:35:46,020
import role.

591
00:35:46,020 --> 00:35:48,460
Is that clear?

592
00:35:48,460 --> 00:35:50,380
Good.

593
00:35:50,380 --> 00:35:51,820
And this should be working.

594
00:35:51,820 --> 00:35:53,220
It does work.

595
00:35:53,220 --> 00:35:59,660
But with this instruction here in the dnd init file, what

596
00:35:59,660 --> 00:36:06,740
also works is from dnd underscore roller import role

597
00:36:06,740 --> 00:36:11,460
directly without using the dot dice module.

598
00:36:11,460 --> 00:36:13,260
There you go.

599
00:36:13,260 --> 00:36:17,660
So essentially, we have promoted the role function as

600
00:36:17,660 --> 00:36:20,780
an important function for the package because we want this to

601
00:36:20,780 --> 00:36:26,860
be imported by our own users using the dnd roller Python

602
00:36:26,860 --> 00:36:27,900
package.

603
00:36:27,940 --> 00:36:30,460
So from a programmatic perspective, what you're doing

604
00:36:30,460 --> 00:36:33,340
is telling within the many, many functions you have in your

605
00:36:33,340 --> 00:36:35,860
package, these are the important ones.

606
00:36:35,860 --> 00:36:38,420
The other ones, if you want to use them, you have to import

607
00:36:38,420 --> 00:36:43,940
them following the full path within the Python package.

608
00:36:43,940 --> 00:36:45,780
Does that make sense?

609
00:36:45,780 --> 00:36:46,420
OK.

610
00:36:46,420 --> 00:36:47,660
Brilliant.

611
00:36:49,380 --> 00:36:53,380
So now onto the second bit, which is testing.

612
00:36:53,380 --> 00:37:00,180
We need to test the code before moving on to developing

613
00:37:00,180 --> 00:37:03,180
another feature.

614
00:37:03,180 --> 00:37:06,220
We might be creating a new file here, which is called

615
00:37:06,220 --> 00:37:08,140
PyTest.ini.

616
00:37:08,140 --> 00:37:11,020
It's the configuration file PyTest needs to have name

617
00:37:11,020 --> 00:37:12,220
resolution.

618
00:37:12,220 --> 00:37:15,780
So we just move on and create a new file.

619
00:37:15,780 --> 00:37:18,300
I'm going to use the editor directly.

620
00:37:18,300 --> 00:37:22,580
You can use the command line of the editor as well.

621
00:37:22,580 --> 00:37:24,620
That's very fine.

622
00:37:24,620 --> 00:37:30,900
And this has to be created in the main root folder.

623
00:37:30,900 --> 00:37:36,220
So here, not this level.

624
00:37:36,220 --> 00:37:38,340
I think the other one.

625
00:37:38,340 --> 00:37:41,620
I will be moving later.

626
00:37:41,620 --> 00:37:42,940
It's not working with me.

627
00:37:42,940 --> 00:37:44,780
PyTest.ini.

628
00:37:44,780 --> 00:37:47,980
And this should live into the main root folder.

629
00:37:47,980 --> 00:37:49,660
There you go.

630
00:37:49,660 --> 00:37:55,900
This contains just a PyTest directive.

631
00:37:55,900 --> 00:37:58,100
And the PyTest.ini is, if you're not familiar with

632
00:37:58,100 --> 00:38:02,020
PyTest, is a configuration file where you put some

633
00:38:02,020 --> 00:38:03,020
configurations.

634
00:38:03,020 --> 00:38:07,420
And I think there is a link in the document of where to find

635
00:38:07,420 --> 00:38:10,020
a specific configuration for PyTest.

636
00:38:10,020 --> 00:38:13,540
In general, here is the link, by the way.

637
00:38:13,540 --> 00:38:17,020
It's in the comment of the code.

638
00:38:17,020 --> 00:38:19,740
Essentially, this configuration is sometimes

639
00:38:19,740 --> 00:38:23,660
used for reporting or to specify extra dependencies.

640
00:38:23,660 --> 00:38:30,180
Or if you want to set up some logging with your tests,

641
00:38:30,180 --> 00:38:32,540
things like this.

642
00:38:32,540 --> 00:38:34,180
OK, now we're done with this.

643
00:38:34,180 --> 00:38:38,060
And we can move on creating a new testing module.

644
00:38:38,060 --> 00:38:42,300
It's standard practice to create a testing module for a

645
00:38:42,300 --> 00:38:45,420
specific function or a specific module.

646
00:38:45,420 --> 00:38:48,700
It really depends on the granularity of the test you

647
00:38:48,700 --> 00:38:49,260
want.

648
00:38:49,260 --> 00:38:51,220
At this point, we're developing one function at a

649
00:38:51,220 --> 00:38:55,980
time, so presumably we want to develop a module for a single

650
00:38:55,980 --> 00:38:57,220
function at a time.

651
00:38:57,220 --> 00:39:00,540
And so we're going to create a new file here within the

652
00:39:00,540 --> 00:39:03,660
tests folder, which is called test-roll.py.

653
00:39:10,500 --> 00:39:12,340
Again, I'm going to do as I did before.

654
00:39:12,340 --> 00:39:16,380
So I'm going to copy everything here, and then I

655
00:39:16,380 --> 00:39:20,260
make comments on the different testing.

656
00:39:20,260 --> 00:39:22,580
How many of you here are familiar with PyTest and how

657
00:39:22,580 --> 00:39:23,820
that works?

658
00:39:25,740 --> 00:39:26,980
Fantastic.

659
00:39:26,980 --> 00:39:30,780
So PyTest is the testing package we're using.

660
00:39:30,780 --> 00:39:36,300
And just for your information, the standard library, in the

661
00:39:36,300 --> 00:39:39,260
many, many things already containing, there's also a

662
00:39:39,260 --> 00:39:43,540
unit test package doing sort of the same thing.

663
00:39:43,540 --> 00:39:49,460
So when you say Python is a battery included language, it's

664
00:39:49,460 --> 00:39:53,060
because the standard library has essentially everything.

665
00:39:53,060 --> 00:39:56,900
And just a shameful plug for the talk I'm going to do

666
00:39:56,900 --> 00:40:00,180
tomorrow, it's somewhat related.

667
00:40:00,180 --> 00:40:02,700
Because I will be talking about some of the gems you have in

668
00:40:02,700 --> 00:40:06,740
the standard library, but also everything I will be doing and

669
00:40:06,740 --> 00:40:09,660
showcasing is done essentially just using standard library,

670
00:40:09,660 --> 00:40:13,180
no extra dependency package.

671
00:40:13,180 --> 00:40:15,900
This is just to let you know that the standard library is

672
00:40:15,900 --> 00:40:18,940
an amazing piece of software we have with Python directly.

673
00:40:18,940 --> 00:40:24,300
So it's not just the language, it's also all the extra bits

674
00:40:24,300 --> 00:40:29,100
the Python package is bringing with it.

675
00:40:29,100 --> 00:40:31,660
PyTest is actually a unit test.

676
00:40:31,700 --> 00:40:37,460
So testing is historically following the tradition of being

677
00:40:37,460 --> 00:40:42,460
the standard testing package for every language.

678
00:40:42,460 --> 00:40:44,780
JUnit for Java was the most popular one.

679
00:40:44,780 --> 00:40:47,700
And unit test is resembling sort of that structure.

680
00:40:47,700 --> 00:40:53,860
PyTest is like a more Pythonic testing package and also helps

681
00:40:53,860 --> 00:40:56,580
you to make things very easily.

682
00:40:56,580 --> 00:40:59,660
So the default configuration, this is, for example, another

683
00:40:59,660 --> 00:41:03,060
thing you can configure in your PyTest.ini.

684
00:41:03,060 --> 00:41:08,700
The standard configuration for PyTest is whichever function is

685
00:41:08,700 --> 00:41:11,580
going to start with test underscore, PyTest is going to

686
00:41:11,580 --> 00:41:14,740
think that's a testing function automatically for you.

687
00:41:14,740 --> 00:41:16,700
If you want a different naming, you can set it up.

688
00:41:16,700 --> 00:41:20,580
But it's not going to be the point nor the case.

689
00:41:20,580 --> 00:41:26,580
And in addition to that, oh yeah, just by the way, if you're

690
00:41:26,580 --> 00:41:30,660
using Visual Studio Code as I'm doing, this is complaining

691
00:41:30,660 --> 00:41:32,820
because it says PyTest is not in your environment.

692
00:41:32,820 --> 00:41:33,380
What's going on?

693
00:41:33,380 --> 00:41:35,060
I cannot import this package.

694
00:41:35,060 --> 00:41:38,140
And this is because I haven't set up my editor with the

695
00:41:38,140 --> 00:41:39,540
right environment.

696
00:41:39,540 --> 00:41:43,420
So for this particular case, as you can see, I hope you can

697
00:41:43,420 --> 00:41:49,060
see, but it's pointing to a Python which is not within the

698
00:41:49,060 --> 00:41:50,300
packaging environment.

699
00:41:50,300 --> 00:41:52,700
So I'm going to switch interpreter,

700
00:41:52,700 --> 00:41:55,980
choosing for packaging.

701
00:41:56,020 --> 00:41:59,300
If it's not, we should, there you go.

702
00:41:59,300 --> 00:42:02,180
A bit of refresh always helps.

703
00:42:02,180 --> 00:42:03,980
Now I switch to this one.

704
00:42:03,980 --> 00:42:07,900
And in a matter of a second, now PyTest is not an error

705
00:42:07,900 --> 00:42:09,940
anymore because it can resolve the name.

706
00:42:09,940 --> 00:42:14,780
Because if you remember, we just installed Python 3.10 and

707
00:42:14,780 --> 00:42:16,660
PyTest, nothing else.

708
00:42:16,660 --> 00:42:20,640
We actually have been installing extra things that we

709
00:42:20,640 --> 00:42:22,540
didn't specify explicitly.

710
00:42:22,540 --> 00:42:25,820
But those were dependencies of the previous two packages.

711
00:42:26,620 --> 00:42:29,780
So we just have an environment with anything we need to just

712
00:42:29,780 --> 00:42:33,660
run Python and PyTest, nothing more.

713
00:42:33,660 --> 00:42:35,100
And this is what we need so far.

714
00:42:35,100 --> 00:42:38,060
So far so good.

715
00:42:38,060 --> 00:42:41,540
Yes, so the function we've been testing is role.

716
00:42:41,540 --> 00:42:47,020
And since it's a function that essentially gets an integer,

717
00:42:47,020 --> 00:42:51,780
we have to make sure that end also just is restricted to

718
00:42:51,780 --> 00:42:57,260
specific integer values like d, four, six, seven, eight,

719
00:42:57,260 --> 00:42:59,220
and whatever.

720
00:42:59,220 --> 00:43:03,420
The first test is make sure that the actual function

721
00:43:03,420 --> 00:43:04,860
returns a valid number.

722
00:43:04,860 --> 00:43:07,980
So this is the test in which, OK, everything works.

723
00:43:07,980 --> 00:43:11,100
No, no, no black magic.

724
00:43:11,100 --> 00:43:14,700
And the only automation PyTest is providing here, for those

725
00:43:14,700 --> 00:43:17,580
of you not familiar, is instead of writing every

726
00:43:17,580 --> 00:43:21,420
single test or every function call with all the possible

727
00:43:21,420 --> 00:43:28,020
values, in this case with the sides of the dice supported,

728
00:43:28,020 --> 00:43:29,940
PyTest is making a parameterized test.

729
00:43:29,940 --> 00:43:34,420
So we say, call this function with all the supported dice we

730
00:43:34,420 --> 00:43:37,020
have here, from supported dice.

731
00:43:37,020 --> 00:43:41,140
So it's going to make, out of this function, automatically

732
00:43:41,140 --> 00:43:43,260
one test for each value we want.

733
00:43:43,260 --> 00:43:46,140
And so it's essentially the same test changes only the

734
00:43:46,140 --> 00:43:48,220
input of the test.

735
00:43:48,220 --> 00:43:51,220
Then we test roll d 100, because it's the specific

736
00:43:51,220 --> 00:43:55,260
case, and so in particular we just test that the number is

737
00:43:55,260 --> 00:44:02,980
within the range, but also is a module 10 is equal to 0, which

738
00:44:02,980 --> 00:44:06,340
means there's a number, is a power of 10.

739
00:44:06,340 --> 00:44:07,580
It's a multiple of 10, sorry.

740
00:44:10,540 --> 00:44:16,420
Now we test the conditions, so generating errors, something

741
00:44:16,420 --> 00:44:24,460
like string which are not numbers, weird testing.

742
00:44:24,460 --> 00:44:27,740
Oh, by the way, this is another thing that's probably useful

743
00:44:27,740 --> 00:44:29,220
for you.

744
00:44:29,220 --> 00:44:32,740
So Valerio warned us that we need to take breaks.

745
00:44:32,740 --> 00:44:33,220
Oh, yeah.

746
00:44:33,220 --> 00:44:34,580
And he never thinks of that.

747
00:44:34,580 --> 00:44:36,460
No.

748
00:44:36,460 --> 00:44:37,580
You have to shoot me.

749
00:44:37,580 --> 00:44:39,060
And in this country could be a problem.

750
00:44:39,060 --> 00:44:40,700
No, please don't.

751
00:44:40,700 --> 00:44:42,580
No.

752
00:44:42,580 --> 00:44:43,020
Sorry.

753
00:44:43,020 --> 00:44:47,500
So in the spirit of whatever we're doing, taking a

754
00:44:47,500 --> 00:44:49,500
frequent short break, let's take a 10 minute break.

755
00:44:49,500 --> 00:44:52,980
Let's be back here at 10 o'clock.

756
00:44:52,980 --> 00:44:54,620
If you have questions, now's a great time to ask.

757
00:44:54,620 --> 00:44:58,340
Yeah, I'm here for you.

758
00:44:58,340 --> 00:44:58,980
No thanks.

759
00:44:58,980 --> 00:45:00,580
Thank you.

760
00:45:00,580 --> 00:45:01,820
Yeah, I warned you.

761
00:45:04,980 --> 00:45:08,220
OK, I'm back.

762
00:45:08,220 --> 00:45:09,460
Nice.

763
00:45:09,460 --> 00:45:10,700
Good.

764
00:45:16,100 --> 00:45:17,340
Where was I?

765
00:45:17,340 --> 00:45:19,100
Yeah, no, I was going through the test.

766
00:45:22,780 --> 00:45:26,940
I think there's nothing particularly interesting to

767
00:45:26,940 --> 00:45:33,220
say here, but maybe highlights how you could test for a

768
00:45:33,220 --> 00:45:35,540
positive case, a negative case, in particular for the

769
00:45:35,900 --> 00:45:39,940
cases when you're expecting exceptions in your code,

770
00:45:39,940 --> 00:45:42,780
you're essentially testing that the code is indeed

771
00:45:42,780 --> 00:45:44,540
raising the exception you're expecting.

772
00:45:44,540 --> 00:45:48,300
And in this case, PyTest offers you a context manager

773
00:45:48,300 --> 00:45:49,540
called raises.

774
00:45:49,540 --> 00:45:55,540
So essentially, you wrap the function call within the

775
00:45:55,540 --> 00:45:57,460
context manager offered by PyTest.

776
00:45:57,460 --> 00:46:02,660
And if the exception is being raised, the accession

777
00:46:02,660 --> 00:46:03,540
essentially passes.

778
00:46:03,540 --> 00:46:04,660
So the test passes.

779
00:46:04,660 --> 00:46:07,020
Otherwise, it fails, because it doesn't raise the

780
00:46:07,020 --> 00:46:08,260
exception we're expecting.

781
00:46:11,540 --> 00:46:15,260
Probably the last and perhaps the most important thing to

782
00:46:15,260 --> 00:46:17,900
tell you, apart from the specific case as a takeaway

783
00:46:17,900 --> 00:46:19,620
message, as a person.

784
00:46:19,620 --> 00:46:22,780
Oh, something I wanted to do here is like getting rid of

785
00:46:22,780 --> 00:46:25,900
this, because it's making me headaches.

786
00:46:25,900 --> 00:46:29,380
OK, so I can see everybody here.

787
00:46:29,380 --> 00:46:33,140
Is whenever you're dealing with test code, my general

788
00:46:33,140 --> 00:46:39,380
advice is test functions are not going to be production

789
00:46:39,380 --> 00:46:40,220
function.

790
00:46:40,220 --> 00:46:45,460
And by that, I mean this test function won't be called by

791
00:46:45,460 --> 00:46:50,340
other functions, but PyTest itself for testing purposes.

792
00:46:50,340 --> 00:46:54,100
And so whenever you're naming testing function, please make

793
00:46:54,100 --> 00:46:58,580
sure that they're actually giving you an immediate

794
00:46:58,580 --> 00:47:02,100
message, as in what this test is about.

795
00:47:02,100 --> 00:47:04,300
And they can be as long as you want.

796
00:47:04,300 --> 00:47:05,740
It doesn't really matter.

797
00:47:05,740 --> 00:47:13,260
To me, in my personal experience, the clear and the

798
00:47:13,260 --> 00:47:17,620
easy to remember, and even for your future self, those names

799
00:47:17,620 --> 00:47:19,420
are the better.

800
00:47:19,420 --> 00:47:23,100
Something like test roll with unsupported dice will rise

801
00:47:23,100 --> 00:47:24,020
exception.

802
00:47:24,020 --> 00:47:26,140
You immediately know what this test is doing.

803
00:47:26,140 --> 00:47:31,940
Or test roll with negative or float, no will rise exception

804
00:47:31,940 --> 00:47:35,740
will not, actually, rise exception.

805
00:47:35,740 --> 00:47:38,100
No stands for number, sorry.

806
00:47:38,100 --> 00:47:42,980
Negative or float number will raise exception.

807
00:47:42,980 --> 00:47:44,540
Nice.

808
00:47:44,540 --> 00:47:48,740
So at this point, I think we just need to run PyTest to make

809
00:47:48,740 --> 00:47:51,180
sure that everything works.

810
00:47:51,180 --> 00:47:54,660
To do that, I'm going to run this command, which is

811
00:47:54,660 --> 00:48:02,820
Python minus M. PyTest.

812
00:48:02,820 --> 00:48:06,060
Python minus M is essentially importing the PyTest module.

813
00:48:06,060 --> 00:48:09,980
And then minus V is the option for PyTest to have verbose

814
00:48:09,980 --> 00:48:11,980
output.

815
00:48:11,980 --> 00:48:13,140
So we run this.

816
00:48:13,140 --> 00:48:16,780
We have, yeah, in this particular case, we have lots

817
00:48:16,780 --> 00:48:17,820
of passes.

818
00:48:17,820 --> 00:48:21,860
And you might notice this or not, but essentially, the

819
00:48:21,860 --> 00:48:25,260
number of passes you have in the output is way more than

820
00:48:25,260 --> 00:48:28,660
the number of test functions you've actually developed.

821
00:48:28,660 --> 00:48:31,340
And this is thanks to the parameterized test I was

822
00:48:31,340 --> 00:48:32,300
explaining before.

823
00:48:32,300 --> 00:48:36,260
So PyTest is automatically generating new test functions

824
00:48:36,260 --> 00:48:37,780
with different input here.

825
00:48:37,780 --> 00:48:41,380
So we have the test roll die return a valid number with an

826
00:48:41,380 --> 00:48:44,060
input of 4, 6, 8, 10, 12, 20.

827
00:48:44,060 --> 00:48:46,660
And PyTest has done all this job for us.

828
00:48:46,660 --> 00:48:48,420
So we have all green.

829
00:48:48,420 --> 00:48:50,420
We can move on.

830
00:48:50,420 --> 00:48:53,100
Any questions so far?

831
00:48:53,100 --> 00:48:55,620
OK.

832
00:48:55,620 --> 00:48:59,660
I will be going a little bit quicker on this part just

833
00:48:59,660 --> 00:49:02,300
because we're sort of building what we want to.

834
00:49:02,300 --> 00:49:07,460
So it's not the main attention here.

835
00:49:07,460 --> 00:49:11,220
I guess the last requirement we have is that we really want to

836
00:49:11,220 --> 00:49:14,860
have this roll function to be fancy in the terminal because

837
00:49:14,860 --> 00:49:18,260
we want to bring numbers using emoji.

838
00:49:18,260 --> 00:49:21,140
And we do not reinvent.

839
00:49:21,140 --> 00:49:25,740
We're lucky somebody has already developed a package

840
00:49:25,740 --> 00:49:30,100
which is called NoEmoji, as in emoji number.

841
00:49:30,100 --> 00:49:34,140
And this package does exactly what we want.

842
00:49:34,140 --> 00:49:37,900
Very happy to show you the code later on.

843
00:49:37,900 --> 00:49:39,140
It's really, really silly.

844
00:49:41,740 --> 00:49:46,940
And just to clarify, the process I went through to make

845
00:49:46,940 --> 00:49:49,780
this package available is exactly what we're doing right

846
00:49:49,780 --> 00:49:49,980
now.

847
00:49:49,980 --> 00:49:53,740
So I essentially did the very same thing but with a

848
00:49:53,740 --> 00:49:55,820
different project called NoEmoji.

849
00:49:55,820 --> 00:50:01,820
And now this package is, to my shame, available on PyPy and on

850
00:50:01,820 --> 00:50:05,260
my own channel, on Conda.

851
00:50:05,260 --> 00:50:09,260
So you can install this package using my own channel.

852
00:50:09,260 --> 00:50:14,260
And this is just an excuse, really, to let you know something

853
00:50:14,260 --> 00:50:18,540
I was discussing in the break with one of you is you can

854
00:50:18,540 --> 00:50:22,460
indeed have public channels for yourself, for your own

855
00:50:22,460 --> 00:50:27,100
publishing, for your own package on anaconda.org.

856
00:50:27,100 --> 00:50:29,660
At the end of the tutorial, they will guide you through the

857
00:50:29,660 --> 00:50:33,860
process of how CondaForge works because CondaForge is the big

858
00:50:33,860 --> 00:50:37,660
repository available for anyone with lots and lots of

859
00:50:37,660 --> 00:50:38,780
different packages.

860
00:50:38,780 --> 00:50:43,460
And as you might guess, because the importance of this

861
00:50:43,460 --> 00:50:47,820
CondaForge is for the community, you might expect that

862
00:50:47,820 --> 00:50:51,780
this CondaForge is not hosting every single package everybody

863
00:50:51,780 --> 00:50:52,660
is going to submit.

864
00:50:52,660 --> 00:50:55,020
So there is a review process for that.

865
00:50:55,020 --> 00:50:57,140
And they will tell you later about it.

866
00:50:57,140 --> 00:51:02,820
But in the meantime, you can add on anaconda.org your own

867
00:51:02,820 --> 00:51:05,380
channel, and that is yours.

868
00:51:05,380 --> 00:51:08,820
So you can use that to upload any package you want.

869
00:51:08,820 --> 00:51:11,580
Incidentally, I realized that my own package was dated back

870
00:51:11,580 --> 00:51:15,460
to 2016 for some reason.

871
00:51:15,460 --> 00:51:20,380
And I wasn't an anaconda yet at the time.

872
00:51:20,380 --> 00:51:26,460
And Lerio Maggi is my username, so I'm going to use that.

873
00:51:26,460 --> 00:51:29,380
Just to show you what I was showing you earlier, so if you

874
00:51:29,380 --> 00:51:34,740
go to anaconda.org slash your username, this is the page of

875
00:51:34,740 --> 00:51:35,220
your channel.

876
00:51:35,220 --> 00:51:40,420
And you see NoMergy has been updated and uploaded to my

877
00:51:40,420 --> 00:51:41,820
channels here.

878
00:51:41,820 --> 00:51:46,660
Other packages are just like here.

879
00:51:46,660 --> 00:51:51,260
They're quite old ones, actually, so don't count them.

880
00:51:51,260 --> 00:51:55,540
But this is an official channel.

881
00:51:55,540 --> 00:51:58,540
And as soon as you have a channel, you can install from

882
00:51:58,540 --> 00:52:01,060
it using Conda.

883
00:52:01,060 --> 00:52:05,780
The way in which you can use specific, a different or

884
00:52:05,780 --> 00:52:08,820
particular channel for your installation is using the

885
00:52:08,820 --> 00:52:11,340
minus C option in the command line.

886
00:52:11,340 --> 00:52:15,220
So if you do conda install minus C, the name of the

887
00:52:15,220 --> 00:52:18,780
channel, in this case, Lerio Maggi is my username, and the

888
00:52:18,780 --> 00:52:23,540
name of the package you want to install, you get it.

889
00:52:23,540 --> 00:52:25,940
So this is what I'm going to do.

890
00:52:25,940 --> 00:52:27,860
And you should do the same.

891
00:52:27,860 --> 00:52:32,500
Conda install minus C, Lerio Maggi, NoMergy.

892
00:52:35,340 --> 00:52:38,460
Installing a package tells you, you want to install this?

893
00:52:38,460 --> 00:52:39,700
Yes.

894
00:52:43,460 --> 00:52:44,380
There you go.

895
00:52:44,380 --> 00:52:46,980
So I installed a custom package from a

896
00:52:46,980 --> 00:52:49,660
specific channel now.

897
00:52:49,660 --> 00:52:52,020
Alternatively, you can install it directly from

898
00:52:52,020 --> 00:52:53,460
PyPy using pip.

899
00:52:53,460 --> 00:52:57,020
And this is also another excuse to let you know that

900
00:52:57,020 --> 00:53:01,460
within a conda environment, you can install packages both

901
00:53:01,460 --> 00:53:04,380
from PyPy or from conda channels.

902
00:53:04,380 --> 00:53:07,660
So conda channels are the standard of preferred ways.

903
00:53:07,660 --> 00:53:11,220
But if at any time any specific package is not

904
00:53:11,220 --> 00:53:14,380
available in any channel, not even CondaForge, which I

905
00:53:14,380 --> 00:53:18,260
hardly think is the case nowadays, but if that is the

906
00:53:18,260 --> 00:53:20,580
case, like NoMergy, for example, I promise you, is not

907
00:53:20,580 --> 00:53:23,380
a CondaForge, it will never be, you can

908
00:53:23,380 --> 00:53:25,260
install it via PyP.

909
00:53:25,260 --> 00:53:30,060
And another important feature to remind you of having

910
00:53:30,060 --> 00:53:34,500
environments in conda is that you can mix conda package and

911
00:53:34,500 --> 00:53:37,580
pip package within the same environment, and they will

912
00:53:37,580 --> 00:53:40,220
work seamlessly together.

913
00:53:40,220 --> 00:53:41,460
Yes.

914
00:53:51,980 --> 00:53:53,020
Good question.

915
00:53:53,020 --> 00:53:55,700
When you're creating a conda environment, you're actually

916
00:53:55,700 --> 00:53:58,020
installing pip within the environment.

917
00:53:58,020 --> 00:54:00,060
And so you can install whichever version of pip you

918
00:54:00,060 --> 00:54:02,860
want, because pip is a package in the end.

919
00:54:02,860 --> 00:54:04,100
So yes, the answer is yes.

920
00:54:04,100 --> 00:54:05,540
You can do that.

921
00:54:05,540 --> 00:54:06,780
Does that answer your question?

922
00:54:13,940 --> 00:54:15,200
Sorry, I have this.

923
00:54:30,900 --> 00:54:31,620
No.

924
00:54:31,620 --> 00:54:36,700
When you create the package, I did the minus y option

925
00:54:36,700 --> 00:54:40,060
before, so I didn't show you what it was telling me to

926
00:54:40,060 --> 00:54:42,860
install, but let's say I'm going to create a new package,

927
00:54:42,860 --> 00:54:44,540
a new environment here.

928
00:54:44,540 --> 00:54:47,140
Let's say, oops, sorry.

929
00:54:47,140 --> 00:54:48,380
Just give it a second.

930
00:54:52,780 --> 00:54:55,100
This is a new one that doesn't remember.

931
00:54:55,100 --> 00:54:59,940
So create conda create, find this hand, test them.

932
00:54:59,940 --> 00:55:03,180
And I just want Python here.

933
00:55:03,180 --> 00:55:05,100
So he's doing his job, and blah, blah, blah.

934
00:55:05,100 --> 00:55:07,060
Then it tells me what's going to be installed.

935
00:55:07,060 --> 00:55:12,020
And within this, there will be Python and setup tools.

936
00:55:12,020 --> 00:55:13,860
And also pip.

937
00:55:13,860 --> 00:55:17,300
So pip will be installed already.

938
00:55:17,300 --> 00:55:21,380
And when I do that, let me enter there, it's going to take

939
00:55:21,380 --> 00:55:24,140
a second, because this package will be presumably already

940
00:55:24,140 --> 00:55:29,220
downloaded, so it just has to install it.

941
00:55:29,220 --> 00:55:31,740
So this means that, by the way, whenever you're creating

942
00:55:31,740 --> 00:55:34,700
an environment, conda is actually caching on your own

943
00:55:34,700 --> 00:55:36,600
computer the package it downloads.

944
00:55:36,600 --> 00:55:39,180
And whenever you're creating another environment, if this

945
00:55:39,180 --> 00:55:41,340
package is already there on your computer, it's not going

946
00:55:41,340 --> 00:55:44,060
to be downloaded again, unless the version will be

947
00:55:44,060 --> 00:55:45,860
different, the platform will be different, the whole thing.

948
00:55:45,860 --> 00:55:48,060
But if you're there, already there.

949
00:55:48,060 --> 00:55:51,020
And I'll also tell you a trick to remove this cache if you

950
00:55:51,020 --> 00:55:54,820
want to make some space out of it in a second.

951
00:55:54,820 --> 00:56:01,860
So if I conda activate test-end, sorry, let me clear

952
00:56:01,860 --> 00:56:04,580
the shell now so you can see.

953
00:56:04,580 --> 00:56:08,060
Conda activate test-end.

954
00:56:08,060 --> 00:56:14,540
And then I do which pip.

955
00:56:14,540 --> 00:56:16,340
It's within the test-end environment.

956
00:56:16,340 --> 00:56:17,580
OK.

957
00:56:22,060 --> 00:56:25,300
OK.

958
00:56:25,300 --> 00:56:28,100
Back to the trick I promised you.

959
00:56:28,100 --> 00:56:30,900
I deactivate the environment first.

960
00:56:30,900 --> 00:56:35,100
And so I'm using, again, this gimmick in Cish telling me the

961
00:56:35,100 --> 00:56:38,500
environment, if I deactivate it, I go back to base.

962
00:56:38,500 --> 00:56:43,060
And now I want to remove the environment, conda remove,

963
00:56:43,060 --> 00:56:48,260
minus n, the name of the environment, test-end, or

964
00:56:48,260 --> 00:56:52,060
minus minus all, minus minus yes.

965
00:56:52,060 --> 00:56:55,260
This is removing everything in the environment.

966
00:56:55,260 --> 00:56:58,580
But the package will still be there.

967
00:56:58,580 --> 00:57:01,220
So now the test-end doesn't exist anymore.

968
00:57:01,220 --> 00:57:04,020
And to double check that, you do, again, conda

969
00:57:04,020 --> 00:57:06,100
info minus minus ends.

970
00:57:06,100 --> 00:57:09,060
And test-ends is not in the list anymore.

971
00:57:09,060 --> 00:57:10,460
That's what we wanted.

972
00:57:10,460 --> 00:57:12,460
But the packages are still there.

973
00:57:12,500 --> 00:57:18,140
And so to do that, you do conda clean, minus minus all,

974
00:57:18,140 --> 00:57:19,980
minus minus yes.

975
00:57:19,980 --> 00:57:23,940
So now it's removing everything is locally installed.

976
00:57:23,940 --> 00:57:26,780
So from now on, whichever package I'm going to install

977
00:57:26,780 --> 00:57:29,460
will be downloaded again.

978
00:57:29,460 --> 00:57:33,420
It tells you also the number of packages and the space it's

979
00:57:33,420 --> 00:57:36,140
saving afterwards.

980
00:57:36,140 --> 00:57:37,700
OK?

981
00:57:37,700 --> 00:57:38,940
Yes, please.

982
00:57:42,900 --> 00:57:43,620
Correct.

983
00:57:43,620 --> 00:57:47,460
You can probably specify the minus n option there.

984
00:57:47,460 --> 00:57:48,180
I'm not entirely sure.

985
00:57:48,180 --> 00:57:51,100
You can probably try that and let me know.

986
00:57:51,100 --> 00:57:53,860
When you do conda clean, minus n and the name of the

987
00:57:53,860 --> 00:57:56,500
environment you want to clean up.

988
00:57:56,500 --> 00:57:57,740
I presume that worked.

989
00:58:00,780 --> 00:58:03,580
No, both.

990
00:58:03,580 --> 00:58:07,060
There is a mini-conda cache.

991
00:58:07,060 --> 00:58:10,980
And the package is installed and created within the

992
00:58:10,980 --> 00:58:11,700
environment as well.

993
00:58:11,700 --> 00:58:15,020
Yeah, both of them.

994
00:58:15,020 --> 00:58:16,820
It's actually taking its time here.

995
00:58:16,820 --> 00:58:18,060
That's fine.

996
00:58:20,820 --> 00:58:22,060
I don't know what it's doing here.

997
00:58:24,540 --> 00:58:25,780
OK.

998
00:58:29,620 --> 00:58:32,860
Where we are.

999
00:58:32,860 --> 00:58:39,700
I do have a, no, let's try this way.

1000
00:58:39,700 --> 00:58:41,660
Switch window here.

1001
00:58:41,660 --> 00:58:46,100
So now we do have NoMoji installed.

1002
00:58:46,100 --> 00:58:51,860
And we have to modify the code so that we can use this.

1003
00:58:51,860 --> 00:58:56,540
Essentially, what this code is doing is adding a verbose

1004
00:58:56,540 --> 00:59:00,940
option in the role function so that when it's fault by

1005
00:59:00,940 --> 00:59:07,540
default and when this happens, essentially we print using the

1006
00:59:07,540 --> 00:59:10,100
emojize function, which is available in NoMoji.

1007
00:59:10,140 --> 00:59:12,980
So the only modification you have to make to the previous

1008
00:59:12,980 --> 00:59:20,540
code is just like, so going back to the role function, we

1009
00:59:20,540 --> 00:59:27,780
have to add the input line, NoMoji, the parameter, verbose,

1010
00:59:27,780 --> 00:59:30,780
type bool, default false.

1011
00:59:30,780 --> 00:59:35,820
And if this happens, I just copy and paste here.

1012
00:59:35,820 --> 00:59:39,100
It's really not worth it.

1013
00:59:39,100 --> 00:59:43,340
We can print and then we return.

1014
00:59:46,020 --> 00:59:50,100
So this has to go into a variable.

1015
00:59:50,100 --> 00:59:54,420
And then adjusting tabulation.

1016
00:59:54,420 --> 00:59:57,300
And that's it.

1017
00:59:57,300 --> 01:00:02,300
So if we are verbose, we print game die and then we roll it.

1018
01:00:02,300 --> 01:00:10,700
So if we want to try it, we can move into a Python

1019
01:00:10,700 --> 01:00:13,380
interpreter.

1020
01:00:13,380 --> 01:00:21,140
And then we can do something like from D and D roller,

1021
01:00:21,140 --> 01:00:29,340
import role, and do role at D or for with verbose equal true.

1022
01:00:29,340 --> 01:00:32,740
And that's it.

1023
01:00:38,740 --> 01:00:40,220
Does that make sense so far?

1024
01:00:44,620 --> 01:00:45,580
All good?

1025
01:00:45,580 --> 01:00:47,620
Nice.

1026
01:00:47,620 --> 01:00:49,500
This is something I'm particularly curious about,

1027
01:00:49,500 --> 01:00:53,020
actually, because we had a bit of testing in the preparation

1028
01:00:53,020 --> 01:00:53,700
of this controller.

1029
01:00:53,700 --> 01:00:58,660
But I personally have no specific clue about it.

1030
01:00:58,660 --> 01:01:01,980
Do you have any problem with emojis on your end?

1031
01:01:01,980 --> 01:01:03,180
You do?

1032
01:01:03,180 --> 01:01:03,660
OK.

1033
01:01:03,660 --> 01:01:04,900
And you're running on Windows.

1034
01:01:11,060 --> 01:01:11,580
OK.

1035
01:01:11,580 --> 01:01:17,220
So if you can't see them, it probably means that the font

1036
01:01:17,220 --> 01:01:20,460
you're using in the shell is not supporting Unicode characters.

1037
01:01:20,460 --> 01:01:22,460
So don't worry about it.

1038
01:01:22,460 --> 01:01:25,300
It was just a silly, stupid thing to let you know about the

1039
01:01:25,300 --> 01:01:27,700
channels and to let you know about the PIP packages within

1040
01:01:27,700 --> 01:01:28,500
the con environment.

1041
01:01:28,500 --> 01:01:29,100
OK?

1042
01:01:29,100 --> 01:01:31,100
It was just a stupid excuse for that.

1043
01:01:31,100 --> 01:01:34,260
There was no extra reason about it.

1044
01:01:34,260 --> 01:01:37,180
But thank you for telling me that.

1045
01:01:37,180 --> 01:01:39,260
That's very useful to me.

1046
01:01:39,260 --> 01:01:43,700
We are probably updating that with this particular disclaimer

1047
01:01:43,700 --> 01:01:44,780
or warning.

1048
01:01:44,780 --> 01:01:50,860
And the second is there are fonts that you can set up your

1049
01:01:50,860 --> 01:01:55,980
shell with specifically supporting Unicode characters.

1050
01:01:55,980 --> 01:01:57,180
All right.

1051
01:01:57,180 --> 01:01:58,460
Let's give it a go again.

1052
01:01:58,460 --> 01:02:02,660
Let's roll a D of what dial you want me to roll now?

1053
01:02:07,220 --> 01:02:09,340
100.

1054
01:02:09,340 --> 01:02:11,820
Let's go for 100.

1055
01:02:11,820 --> 01:02:12,620
70.

1056
01:02:12,620 --> 01:02:14,020
Well, that's pretty cool.

1057
01:02:14,020 --> 01:02:15,300
Yeah.

1058
01:02:17,940 --> 01:02:21,580
In D&D, there's D20 especially.

1059
01:02:21,580 --> 01:02:25,500
And sometimes you can hit 1 or 20, and that's the critical

1060
01:02:25,500 --> 01:02:26,940
ones.

1061
01:02:27,700 --> 01:02:31,380
And that happens generally is a very good bit.

1062
01:02:31,380 --> 01:02:33,660
So if you roll a D20, let's see what we got.

1063
01:02:33,660 --> 01:02:35,060
17.

1064
01:02:35,060 --> 01:02:36,660
Yeah, could be good actually.

1065
01:02:36,660 --> 01:02:37,900
Really good.

1066
01:02:42,900 --> 01:02:48,380
I think that I had too much fun working with this stupid and

1067
01:02:48,380 --> 01:02:49,660
silly project.

1068
01:02:49,660 --> 01:02:54,580
It gave me the opportunity to include in the explanations of

1069
01:02:54,580 --> 01:02:56,180
what's going on here.

1070
01:02:56,260 --> 01:02:59,220
A bit of these and that relating to also random number

1071
01:02:59,220 --> 01:03:01,740
generations and how you test with random number

1072
01:03:01,740 --> 01:03:02,780
generations.

1073
01:03:02,780 --> 01:03:05,020
So I think this is generally particularly.

1074
01:03:05,020 --> 01:03:07,700
Oh, I actually rolled 18 in my previous test.

1075
01:03:07,700 --> 01:03:11,180
So that generally is a good bit.

1076
01:03:15,580 --> 01:03:20,780
Oh, by the way, Dave who tested the part of a window

1077
01:03:20,780 --> 01:03:22,180
actually got critical here.

1078
01:03:22,180 --> 01:03:23,180
You got 1.

1079
01:03:23,180 --> 01:03:25,260
Where is Dave?

1080
01:03:25,260 --> 01:03:26,500
That's actually pretty good.

1081
01:03:28,980 --> 01:03:30,420
Very well, Dave.

1082
01:03:30,420 --> 01:03:31,660
Well done.

1083
01:03:38,020 --> 01:03:42,780
OK, so the second step here to work on is dice roll.

1084
01:03:42,780 --> 01:03:46,300
And dice roll is a simple function essentially

1085
01:03:46,300 --> 01:03:50,660
generalizing the roll function with multiple times with a

1086
01:03:50,660 --> 01:03:51,860
single die.

1087
01:03:51,860 --> 01:03:55,460
So dice roll is really, really simple.

1088
01:03:55,460 --> 01:03:57,940
Essentially, we specify how many times you want to roll a

1089
01:03:57,940 --> 01:03:59,220
single die.

1090
01:03:59,220 --> 01:04:02,100
And we call roll that number of times.

1091
01:04:02,100 --> 01:04:07,420
And we report the list of numbers we got in the rolling.

1092
01:04:07,420 --> 01:04:11,580
Remember that roll has the verbose parameter default.

1093
01:04:11,580 --> 01:04:15,580
So whenever we call this roll within dice, we're making sure

1094
01:04:15,580 --> 01:04:19,060
the verbose is going to be used so we don't have any print out

1095
01:04:19,060 --> 01:04:25,660
during the generation of the rollings here.

1096
01:04:25,660 --> 01:04:29,460
So we go back to the dice.py file and we add this new

1097
01:04:29,460 --> 01:04:31,540
function, dice roll.

1098
01:04:35,220 --> 01:04:38,300
There's a bit of docstrings there.

1099
01:04:38,300 --> 01:04:42,340
Rolls a single die with given sites and throws a number of

1100
01:04:42,340 --> 01:04:47,060
times, just to explain a little bit what's going on.

1101
01:04:47,060 --> 01:04:48,780
If you're not familiar with this expression, this is

1102
01:04:48,780 --> 01:04:51,620
called list comprehension in Python.

1103
01:04:51,620 --> 01:04:55,500
So we're actually creating a list on the fly using this

1104
01:04:55,500 --> 01:04:57,020
syntax.

1105
01:04:57,020 --> 01:05:00,660
It's really no different from using a folder explicitly and

1106
01:05:00,660 --> 01:05:04,140
doing it and accumulating the results into a list

1107
01:05:04,140 --> 01:05:05,380
explicitly.

1108
01:05:07,540 --> 01:05:08,460
Nice.

1109
01:05:08,460 --> 01:05:12,500
So we have our dice roll function now.

1110
01:05:12,500 --> 01:05:16,540
I think what we have left is to have some tests with it.

1111
01:05:20,260 --> 01:05:27,860
The takeaway here is we can reuse the same strategy we used

1112
01:05:27,860 --> 01:05:31,540
with roll by using, again, parameterize to generate a few

1113
01:05:31,540 --> 01:05:32,780
test inputs.

1114
01:05:32,780 --> 01:05:35,860
And by the way, the test inputs in testing terminology,

1115
01:05:35,860 --> 01:05:37,940
in particular in PyTest terminology, they're called

1116
01:05:37,940 --> 01:05:39,140
fixtures.

1117
01:05:39,140 --> 01:05:42,260
And so I think this is what I'm going to do soon.

1118
01:05:42,260 --> 01:05:46,180
I'm creating fixtures in PyTest.

1119
01:05:46,180 --> 01:05:50,020
And then the parameterize is going to be used with the same

1120
01:05:50,020 --> 01:05:52,020
strategy for testing is going to be the same.

1121
01:05:52,020 --> 01:05:57,780
So we can specify a list of die we want to roll and a list of

1122
01:05:57,780 --> 01:05:58,900
times we want to roll.

1123
01:05:58,900 --> 01:06:01,460
So that would be the values for the true parameters, and we

1124
01:06:01,460 --> 01:06:02,700
can parameterize them.

1125
01:06:05,340 --> 01:06:11,140
And then I think the other excuses of talking a bit about

1126
01:06:11,140 --> 01:06:14,500
other things not specifically related to conda building

1127
01:06:14,500 --> 01:06:18,940
packages is about mocks in tests.

1128
01:06:18,940 --> 01:06:22,420
So for example, in this particular function, if you had

1129
01:06:22,420 --> 01:06:25,940
to test it, you have to test two things.

1130
01:06:25,940 --> 01:06:28,740
Because you have to test that the function is actually doing

1131
01:06:28,740 --> 01:06:29,820
what you're expecting.

1132
01:06:29,820 --> 01:06:33,500
So it's returning the numbers you wanted, and it's raising

1133
01:06:33,500 --> 01:06:35,140
the errors you're expecting.

1134
01:06:35,140 --> 01:06:37,460
But also, you have to make sure that you don't have

1135
01:06:37,460 --> 01:06:38,820
duplicate code.

1136
01:06:38,860 --> 01:06:41,700
And so one of the things you want to test at some point is

1137
01:06:41,700 --> 01:06:44,820
is this function really calling roll function?

1138
01:06:44,820 --> 01:06:47,340
Or is it actually re-implementing the wheel

1139
01:06:47,340 --> 01:06:49,300
and re-implementing the same piece of code which is

1140
01:06:49,300 --> 01:06:50,780
already in roll?

1141
01:06:50,780 --> 01:06:55,420
And so one way to do this in a unit testing fashion, and the

1142
01:06:55,420 --> 01:06:58,260
unit testing function as just one rule, you have to test

1143
01:06:58,260 --> 01:07:04,540
everything in isolation, you want to patch the roll function

1144
01:07:04,540 --> 01:07:07,500
just for the purpose to make sure that you're actually

1145
01:07:07,500 --> 01:07:10,100
testing that that particular patch is being called.

1146
01:07:10,100 --> 01:07:15,860
You don't really need to know anything more than that,

1147
01:07:15,860 --> 01:07:18,820
because the rest of it will be tested with normal testing,

1148
01:07:18,820 --> 01:07:21,860
checking the output of the function dice roll.

1149
01:07:21,860 --> 01:07:24,060
In this particular case, you're interested in

1150
01:07:24,060 --> 01:07:28,020
understanding that the roll function has been called, and

1151
01:07:28,020 --> 01:07:30,340
in particular, a certain number of times that function

1152
01:07:30,340 --> 01:07:31,980
has been called.

1153
01:07:31,980 --> 01:07:35,620
You can do that using mock object.

1154
01:07:35,620 --> 01:07:40,940
And this doesn't require any extra packages installed.

1155
01:07:40,940 --> 01:07:45,060
This is Thunder library again, unit test of mock.

1156
01:07:45,060 --> 01:07:46,620
You can import patch.

1157
01:07:46,620 --> 01:07:51,140
And in our test function here, we're just patching the roll

1158
01:07:51,140 --> 01:07:54,220
function with a mock object.

1159
01:07:54,220 --> 01:07:58,660
And this mock object has particular features.

1160
01:07:58,660 --> 01:08:02,900
One is that you can assert that this mock object has been

1161
01:08:02,900 --> 01:08:04,860
called during the dice roll.

1162
01:08:04,860 --> 01:08:08,660
So the dice roll function is being recorded.

1163
01:08:08,660 --> 01:08:12,660
There's a check there that the roll function has been called.

1164
01:08:12,660 --> 01:08:17,380
And you can also assert that the function has been called

1165
01:08:17,380 --> 01:08:18,740
with a specific input.

1166
01:08:18,740 --> 01:08:22,100
In particular, we say we want to roll a die of four, and so

1167
01:08:22,100 --> 01:08:25,060
we're expecting the roll function one to be called and

1168
01:08:25,060 --> 01:08:27,580
to be called with the parameter d equal to four.

1169
01:08:27,580 --> 01:08:29,460
This is what we're testing here.

1170
01:08:29,460 --> 01:08:32,300
This is just a takeaway message for you in case you've

1171
01:08:32,300 --> 01:08:34,580
never been working with mock object before.

1172
01:08:37,060 --> 01:08:42,500
So what I'm going to do now is creating a new testing module,

1173
01:08:42,500 --> 01:08:45,820
which is written on the top of the snippets here,

1174
01:08:45,820 --> 01:08:47,300
testdiceroll.py.

1175
01:08:47,300 --> 01:08:51,460
And again, the practice I'm using is creating a testing

1176
01:08:51,460 --> 01:08:54,580
file for each of the function on testing.

1177
01:08:54,580 --> 01:08:56,460
Test dice roll.

1178
01:08:56,460 --> 01:08:59,740
And also, the naming is important because the name is

1179
01:08:59,740 --> 01:09:03,220
reflecting the name of the function on the test.

1180
01:09:03,220 --> 01:09:04,100
Nice.

1181
01:09:04,100 --> 01:09:06,820
I add this within the test folder.

1182
01:09:06,820 --> 01:09:11,700
And now when I run again, PyTest, PyTest is actually

1183
01:09:11,700 --> 01:09:15,060
looking for the test folder by default and is gathering all

1184
01:09:15,060 --> 01:09:17,340
the test function from all the modules you can find.

1185
01:09:17,340 --> 01:09:19,860
And it's running everything in a single battery.

1186
01:09:19,860 --> 01:09:27,300
So again, Python minus M, PyTest minus V for the verbose.

1187
01:09:27,300 --> 01:09:28,340
And now it's running everything.

1188
01:09:28,340 --> 01:09:32,140
So you can see it's running tests from testdiceroll.py

1189
01:09:32,140 --> 01:09:35,180
and from the testroll.py we had before.

1190
01:09:35,180 --> 01:09:36,220
100% passed.

1191
01:09:36,220 --> 01:09:37,940
We can move on.

1192
01:09:37,940 --> 01:09:41,020
Another thing, in case you're not familiar with testing

1193
01:09:41,020 --> 01:09:44,500
and unit testing, unit testing has to run fast.

1194
01:09:44,500 --> 01:09:46,780
And that's why you don't want to have dependencies,

1195
01:09:46,780 --> 01:09:48,980
specifically, mock object.

1196
01:09:48,980 --> 01:09:51,260
So you're using mock object also, for example,

1197
01:09:51,260 --> 01:09:53,260
to avoid communicating with the IO,

1198
01:09:53,260 --> 01:09:54,780
communicating with the databases,

1199
01:09:54,780 --> 01:09:57,540
because you have unit tests to run fast on everything

1200
01:09:57,540 --> 01:09:58,860
in isolation again.

1201
01:09:58,860 --> 01:10:02,220
So no dependencies again.

1202
01:10:02,220 --> 01:10:05,580
But I'm diverging here.

1203
01:10:05,580 --> 01:10:06,700
Nice.

1204
01:10:06,700 --> 01:10:07,940
So far so good?

1205
01:10:07,940 --> 01:10:10,420
OK, move on to the last bit.

1206
01:10:10,420 --> 01:10:12,580
Any question?

1207
01:10:12,580 --> 01:10:13,940
Good.

1208
01:10:13,940 --> 01:10:17,500
So the last, but by no means least, function we're

1209
01:10:17,500 --> 01:10:19,900
developing is called sequenceRoles.

1210
01:10:19,900 --> 01:10:23,500
And sequenceRoles is a function that essentially is

1211
01:10:23,500 --> 01:10:32,500
expecting a pattern of dice rolls in a form of string.

1212
01:10:32,500 --> 01:10:36,100
And you have to slightly have a bit of a logic

1213
01:10:36,100 --> 01:10:43,300
here to pass the sequence in some way.

1214
01:10:43,300 --> 01:10:45,780
And the sequence is specified here.

1215
01:10:45,780 --> 01:10:48,780
And the pattern is done in this way, essentially.

1216
01:10:48,780 --> 01:10:53,100
I thought I had written the pattern somewhere

1217
01:10:53,100 --> 01:10:54,100
in the document.

1218
01:10:54,100 --> 01:10:58,100
I'm just realizing it's not where I needed.

1219
01:10:58,100 --> 01:11:00,380
I think it was in the beginning on the very top.

1220
01:11:00,380 --> 01:11:03,780
So sorry for scrolling up again in the document.

1221
01:11:03,780 --> 01:11:08,420
But in the very, very beginning when I was developing,

1222
01:11:08,420 --> 01:11:09,620
yes, there you go.

1223
01:11:09,620 --> 01:11:11,460
So in the very, very beginning, so

1224
01:11:11,460 --> 01:11:14,700
at the beginning of the dice module section,

1225
01:11:14,700 --> 01:11:17,100
I said that we need a function that is

1226
01:11:17,340 --> 01:11:20,980
I said that we need a function that would receive a sequence

1227
01:11:20,980 --> 01:11:23,180
of dice rolls in this format.

1228
01:11:23,180 --> 01:11:30,580
So you have 2d4, 3d6, 1d10, 6d12.

1229
01:11:30,580 --> 01:11:32,900
And we'll generate a tabular report of the outcomes.

1230
01:11:32,900 --> 01:11:34,900
So in essence, this sequenceRoles function

1231
01:11:34,900 --> 01:11:36,100
has to do two things.

1232
01:11:36,100 --> 01:11:37,860
Getting the string, pass the string,

1233
01:11:37,860 --> 01:11:43,060
and then translates all of this sequence of rolls

1234
01:11:43,060 --> 01:11:46,660
into dice rolls invocations.

1235
01:11:46,740 --> 01:11:48,100
Does that make sense?

1236
01:11:48,100 --> 01:11:52,780
So this will mean that we need to call diceRoll function

1237
01:11:52,780 --> 01:11:57,340
with thrown parameters of 2 and a d parameter of sides

1238
01:11:57,340 --> 01:11:59,700
parameter of 4, and so on and so forth.

1239
01:11:59,700 --> 01:12:03,900
So we want to roll two times a d4 die,

1240
01:12:03,900 --> 01:12:07,940
and then three times a d6, and so on and so forth.

1241
01:12:07,940 --> 01:12:15,900
So going back to the sequenceRoles function, it's here.

1242
01:12:15,900 --> 01:12:17,060
This is a sequence function.

1243
01:12:17,060 --> 01:12:20,500
I'm just adding this extra function in the dice module.

1244
01:12:23,340 --> 01:12:29,180
And here, so I go to the dice.py file.

1245
01:12:29,180 --> 01:12:35,220
I just close this one, paste it.

1246
01:12:35,220 --> 01:12:39,740
So the first thing this function does is to pass the input.

1247
01:12:39,740 --> 01:12:43,460
And the way it does is, OK, I appreciate

1248
01:12:43,460 --> 01:12:48,540
this might be convoluted and not immediately understandable.

1249
01:12:48,540 --> 01:12:51,860
But again, that was a shameless plug for my talk tomorrow.

1250
01:12:51,860 --> 01:12:55,580
So bear with me a little bit.

1251
01:12:55,580 --> 01:12:57,180
So essentially, what this is doing

1252
01:12:57,180 --> 01:13:01,300
is passing the string in input using

1253
01:13:01,300 --> 01:13:04,460
a bit of a functional approach, as in functions calling

1254
01:13:04,460 --> 01:13:06,860
functions calling all the function.

1255
01:13:06,860 --> 01:13:09,860
If you're not entirely familiar with what's going on,

1256
01:13:09,860 --> 01:13:12,500
essentially, you have a map function.

1257
01:13:12,500 --> 01:13:16,580
And this map function is calling the street function

1258
01:13:16,580 --> 01:13:20,100
from strings on every single element of the sequence.split,

1259
01:13:20,100 --> 01:13:21,860
which is going to be a list.

1260
01:13:21,860 --> 01:13:24,060
And then for each of those, we're

1261
01:13:24,060 --> 01:13:27,540
essentially calling again.

1262
01:13:27,540 --> 01:13:34,340
We're splitting on the d to get the side of the dice

1263
01:13:34,340 --> 01:13:37,500
we wanted, and then we're converting them as integer.

1264
01:13:37,500 --> 01:13:39,620
And then we plug everything together,

1265
01:13:39,620 --> 01:13:41,940
and we call diceRoles.

1266
01:13:41,940 --> 01:13:43,380
And by the way, this is also done

1267
01:13:43,380 --> 01:13:50,260
within the dictionary expression, dictionary

1268
01:13:50,260 --> 01:13:51,140
comprehension.

1269
01:13:51,140 --> 01:13:53,540
So essentially, we're also creating a dictionary out

1270
01:13:53,540 --> 01:13:55,100
of it on the spot.

1271
01:13:55,100 --> 01:13:57,300
So in three lines of Python, we're essentially

1272
01:13:57,300 --> 01:13:58,500
doing lots of things.

1273
01:13:58,500 --> 01:14:01,140
It's very condensed, very convoluted.

1274
01:14:01,140 --> 01:14:04,740
If you're interested and you want

1275
01:14:04,740 --> 01:14:07,660
to know more a little bit about this flavors of programming

1276
01:14:07,660 --> 01:14:09,700
in Python, I have a talk tomorrow.

1277
01:14:09,700 --> 01:14:14,420
I'll be more than happy to let you know more about it.

1278
01:14:14,420 --> 01:14:16,100
And if you're scared by it, let me know.

1279
01:14:16,100 --> 01:14:19,780
I will change my talk immediately.

1280
01:14:19,780 --> 01:14:22,540
And I think that the last bit that remains here

1281
01:14:22,540 --> 01:14:24,420
is the tabulation part, because we

1282
01:14:24,420 --> 01:14:25,980
want to have a sequence of roles,

1283
01:14:25,980 --> 01:14:28,100
and then we want to print them automatically

1284
01:14:28,100 --> 01:14:31,620
using a tabular report.

1285
01:14:31,620 --> 01:14:33,140
We don't have to reinvent the wheel.

1286
01:14:33,140 --> 01:14:35,180
There is a package for you, and that's actually

1287
01:14:35,180 --> 01:14:37,900
a package I discovered working on this project, which

1288
01:14:37,900 --> 01:14:40,140
is generally available.

1289
01:14:40,140 --> 01:14:42,700
It's called a tabulate, and it's really, really useful

1290
01:14:42,700 --> 01:14:45,580
to do exactly what we're doing, like creating tables

1291
01:14:45,580 --> 01:14:49,260
and printing them in different formats.

1292
01:14:49,260 --> 01:14:55,260
So what we're going to do now is to install tabulate

1293
01:14:55,260 --> 01:14:59,900
in our environment using Conda directly.

1294
01:14:59,900 --> 01:15:02,260
We're not adding any channel here,

1295
01:15:02,260 --> 01:15:06,260
which means we're using the default channel from Conda,

1296
01:15:06,260 --> 01:15:08,580
so the Anaconda default channel.

1297
01:15:08,580 --> 01:15:11,620
So we do first off, we do Conda install tabulate.

1298
01:15:14,340 --> 01:15:16,220
And by the way, in the meantime, this

1299
01:15:16,220 --> 01:15:18,140
is a good opportunity for me to remind you

1300
01:15:18,140 --> 01:15:20,940
that when I'm installing external packages

1301
01:15:20,940 --> 01:15:23,740
for this particular project development,

1302
01:15:23,740 --> 01:15:26,540
these packages will become the dependencies we

1303
01:15:26,540 --> 01:15:28,180
need when we have to package.

1304
01:15:28,180 --> 01:15:31,220
In other words, so imagine that someone

1305
01:15:31,220 --> 01:15:33,620
want to use your software, in this particular case,

1306
01:15:33,620 --> 01:15:36,300
this stupid D&D roller.

1307
01:15:36,300 --> 01:15:37,820
If you want to run the code, you need

1308
01:15:37,820 --> 01:15:41,540
to have Noemoji installed in your environment

1309
01:15:41,540 --> 01:15:44,020
and tabulate now in your environment.

1310
01:15:44,020 --> 01:15:47,980
So given this piece of information,

1311
01:15:47,980 --> 01:15:50,180
you have to remember that these two packages will

1312
01:15:50,180 --> 01:15:53,620
become the dependency of our project,

1313
01:15:53,620 --> 01:15:57,780
or our soon-to-be package, the software package.

1314
01:15:57,780 --> 01:16:01,300
So takeaway message, we're going to use Noemoji and tabulate

1315
01:16:01,300 --> 01:16:03,940
as the dependencies of the software we're going to pack

1316
01:16:03,940 --> 01:16:06,180
into Conda package.

1317
01:16:06,180 --> 01:16:09,140
OK?

1318
01:16:09,140 --> 01:16:11,460
So that's done.

1319
01:16:11,460 --> 01:16:14,260
And I guess that the rest of the code here

1320
01:16:14,260 --> 01:16:17,820
is like adding tabulate here and making it working.

1321
01:16:17,820 --> 01:16:20,100
So let me do that super quickly.

1322
01:16:20,100 --> 01:16:22,820
I go back in the dice.py file.

1323
01:16:22,820 --> 01:16:25,660
I add the tabulate dependency.

1324
01:16:25,660 --> 01:16:27,540
There's a tabulate file.

1325
01:16:27,540 --> 01:16:31,500
I also define the header for the table I want to create.

1326
01:16:31,500 --> 01:16:33,620
So we have a first colon, which is dice.

1327
01:16:33,620 --> 01:16:34,540
The second rolls.

1328
01:16:34,540 --> 01:16:38,180
The third, sum.

1329
01:16:38,180 --> 01:16:42,020
And that's header.

1330
01:16:42,020 --> 01:16:46,780
I've also added this screwed up there.

1331
01:16:46,780 --> 01:16:47,740
OK?

1332
01:16:47,740 --> 01:16:51,580
And the last bit is adding the verbose parameter.

1333
01:16:51,580 --> 01:16:54,980
This time, it's true by default, because Sequence Source really

1334
01:16:54,980 --> 01:16:58,620
wants to have tabulation.

1335
01:16:58,620 --> 01:17:03,140
I type bool equals to true.

1336
01:17:03,140 --> 01:17:08,820
And that's the code we need to copy.

1337
01:17:13,060 --> 01:17:16,180
So this code, let me show you properly,

1338
01:17:16,180 --> 01:17:18,340
is actually using tabulate.

1339
01:17:18,340 --> 01:17:22,300
So we have our dictionary of rolls in Sequence.

1340
01:17:22,300 --> 01:17:25,460
This dictionary is essentially indexed

1341
01:17:25,460 --> 01:17:28,500
on the sides of the rolls.

1342
01:17:28,500 --> 01:17:34,860
So we have default and other dice.

1343
01:17:34,860 --> 01:17:37,900
Actually, I realize now that that's not a very good idea.

1344
01:17:37,900 --> 01:17:38,820
Oh, no, sorry.

1345
01:17:38,820 --> 01:17:44,100
Rolls is what you put in the table.

1346
01:17:44,100 --> 01:17:49,580
Rolls is what you get from the input.

1347
01:17:49,580 --> 01:17:53,180
So that should be fine.

1348
01:17:53,180 --> 01:17:54,980
Well, if you have clashing, the software

1349
01:17:54,980 --> 01:17:56,820
is not handling the clashing properly.

1350
01:17:56,820 --> 01:17:59,300
So I'm just realizing that.

1351
01:17:59,300 --> 01:18:02,300
So that was not a smart idea.

1352
01:18:02,300 --> 01:18:04,180
We should probably fix that later.

1353
01:18:04,180 --> 01:18:06,740
Or maybe we should have a test to it

1354
01:18:06,740 --> 01:18:11,180
to see that this won't be working as expected.

1355
01:18:11,180 --> 01:18:15,580
But anyway, we're using tabulate function,

1356
01:18:15,580 --> 01:18:18,900
passing on the table, the headers, and that's it.

1357
01:18:18,900 --> 01:18:23,020
So I just want to show you how easy

1358
01:18:23,020 --> 01:18:28,420
is to use tabulate in case you might be needing that.

1359
01:18:32,540 --> 01:18:36,740
Let's say we're approaching the break.

1360
01:18:36,740 --> 01:18:37,260
Yeah.

1361
01:18:37,260 --> 01:18:39,620
So yeah, I think we're going to go 10 minutes early.

1362
01:18:39,620 --> 01:18:40,220
10 minutes early?

1363
01:18:40,220 --> 01:18:40,940
OK.

1364
01:18:40,980 --> 01:18:41,660
Sounds good.

1365
01:18:41,660 --> 01:18:47,540
Let me just print out the output so I can.

1366
01:18:47,540 --> 01:18:51,340
And I think this is perfect timing.

1367
01:18:51,340 --> 01:18:53,340
I was hoping to find the.

1368
01:18:56,620 --> 01:19:00,140
Yeah, let's use this one.

1369
01:19:00,140 --> 01:19:05,140
So I have a sequence in my terminal.

1370
01:19:05,140 --> 01:19:06,660
So let me clear this.

1371
01:19:06,660 --> 01:19:09,700
I run the Python interpreter here.

1372
01:19:09,700 --> 01:19:14,620
So let me create this sequence I want to import from DND roller.

1373
01:19:14,620 --> 01:19:18,020
And by the way, I haven't added neither dice roller nor

1374
01:19:18,020 --> 01:19:21,300
sequence rolls into the init file.

1375
01:19:21,300 --> 01:19:26,140
So I need to have the full input in this particular case.

1376
01:19:26,140 --> 01:19:29,020
Dice import sequence roll.

1377
01:19:29,020 --> 01:19:34,020
Or maybe let me show you that the other way doesn't work.

1378
01:19:34,020 --> 01:19:37,260
Import sequence.

1379
01:19:37,260 --> 01:19:40,380
What's the name of the function exactly?

1380
01:19:40,380 --> 01:19:41,180
Sequence rolls.

1381
01:19:44,180 --> 01:19:48,180
As I told you, it doesn't work because it could not

1382
01:19:48,180 --> 01:19:50,900
be finding the data in it package.

1383
01:19:50,900 --> 01:19:54,620
But if you look into the dice module, it could be fine.

1384
01:19:54,620 --> 01:19:56,020
And so there you go.

1385
01:19:56,020 --> 01:20:02,060
And then you can do print sequence rolls of sequence.

1386
01:20:05,020 --> 01:20:06,180
There you go.

1387
01:20:06,180 --> 01:20:07,700
This is how tabulate works.

1388
01:20:07,700 --> 01:20:11,260
It's pretty convenient.

1389
01:20:11,260 --> 01:20:12,140
And that's it.

1390
01:20:12,140 --> 01:20:18,940
So I think the last thing I want to tell you before going into

1391
01:20:18,940 --> 01:20:23,700
the packaging, unless you're not entirely interested, and then

1392
01:20:23,700 --> 01:20:27,180
I will skip that part, is essentially how do we test

1393
01:20:27,180 --> 01:20:27,820
these things?

1394
01:20:27,820 --> 01:20:32,020
And in particular, how do we test having random numbers

1395
01:20:32,020 --> 01:20:32,780
generations?

1396
01:20:32,780 --> 01:20:35,740
So we have to make tests a little bit unfair in order to

1397
01:20:35,740 --> 01:20:37,820
be consistent in our tests.

1398
01:20:37,820 --> 01:20:39,700
All right.

1399
01:20:39,700 --> 01:20:43,060
So the very last thing I promised I wanted to tell you

1400
01:20:43,060 --> 01:20:46,580
about the software before moving to the package,

1401
01:20:46,580 --> 01:20:53,380
finally, you might say at that point, is an extra excuse to

1402
01:20:53,380 --> 01:20:56,780
tell you about how do you test with random numbers.

1403
01:20:56,780 --> 01:21:01,620
I think it's something that might be, I'd say might,

1404
01:21:01,620 --> 01:21:03,220
because it really depends on what you're doing.

1405
01:21:03,220 --> 01:21:06,900
But it might be useful to you to know.

1406
01:21:06,900 --> 01:21:09,820
And that's also something I had fun playing with while

1407
01:21:09,820 --> 01:21:11,700
preparing the material.

1408
01:21:11,700 --> 01:21:17,180
So moving on to the last sequence of tests for sequence

1409
01:21:17,180 --> 01:21:22,380
rolls, I'll just go and copy all the code I have here into a

1410
01:21:22,380 --> 01:21:26,460
new file, and then I will make some comments about it.

1411
01:21:26,460 --> 01:21:32,340
So again, we have a third test module called test

1412
01:21:32,340 --> 01:21:37,060
underscore sequence underscore rolls dot five.

1413
01:21:37,060 --> 01:21:39,580
And this is just containing the test for the sequence

1414
01:21:39,580 --> 01:21:42,020
rolls function.

1415
01:21:42,020 --> 01:21:46,460
So again, it's a matter of how you decide to do things.

1416
01:21:46,460 --> 01:21:53,580
But at the level we decided to do with this project,

1417
01:21:53,580 --> 01:21:58,780
essentially, the corresponding is one function, one Python

1418
01:21:59,740 --> 01:22:03,020
module, which seems quite a lot in terms of granularity,

1419
01:22:03,020 --> 01:22:04,700
because it's really different.

1420
01:22:04,700 --> 01:22:08,780
But in the end, every single Python module is really

1421
01:22:08,780 --> 01:22:09,660
self-contained.

1422
01:22:09,660 --> 01:22:12,140
And again, if the takeaway message is to do tests in

1423
01:22:12,140 --> 01:22:16,980
isolations, you want to test every single functionality,

1424
01:22:16,980 --> 01:22:20,060
regardless of what's happening with the rest of your own

1425
01:22:20,060 --> 01:22:26,380
software, that's perhaps a good development pattern or best

1426
01:22:26,380 --> 01:22:27,180
practice.

1427
01:22:27,340 --> 01:22:31,540
So the first thing we do here in the first test is very

1428
01:22:31,540 --> 01:22:33,620
similar to what we've been doing in the previous test for

1429
01:22:33,620 --> 01:22:34,420
dice roll.

1430
01:22:34,420 --> 01:22:37,980
So we patch this time dice roll, and we make sure that

1431
01:22:37,980 --> 01:22:41,260
when we call sequence rolls, the dice roll mock object is

1432
01:22:41,260 --> 01:22:44,380
being called so that we are absolutely sure we're not

1433
01:22:44,380 --> 01:22:45,660
reinventing the wheel.

1434
01:22:45,660 --> 01:22:51,260
And by the way, this idea of reinventing the wheel is, I'd

1435
01:22:51,260 --> 01:22:54,540
say, particularly close to me because of what I've been

1436
01:22:54,540 --> 01:22:58,900
doing in my previous life, doing my PhD in particular.

1437
01:22:58,900 --> 01:23:01,980
And I was working on a problem which was called clone

1438
01:23:01,980 --> 01:23:06,420
detection, so methods to identify duplications in big

1439
01:23:06,420 --> 01:23:07,220
softwares.

1440
01:23:07,220 --> 01:23:11,540
And even if this seems very niche to you, just think of

1441
01:23:11,540 --> 01:23:15,460
the refactoring functionality you might have in code

1442
01:23:15,460 --> 01:23:18,060
editors or advanced ID.

1443
01:23:18,060 --> 01:23:19,980
This piece of code, by the way, is very similar to

1444
01:23:19,980 --> 01:23:22,180
something you've already written here.

1445
01:23:23,060 --> 01:23:28,180
Duplications in code are not always a good idea, and so you

1446
01:23:28,180 --> 01:23:29,620
really want to get rid of them.

1447
01:23:29,620 --> 01:23:32,540
And so this idea of making sure that you're not

1448
01:23:32,540 --> 01:23:35,620
reinventing the wheel is essentially testing both.

1449
01:23:35,620 --> 01:23:38,500
So it's testing that you're reusing the piece of software

1450
01:23:38,500 --> 01:23:39,700
you already have.

1451
01:23:39,700 --> 01:23:42,300
And so you did have a dependency by your testing

1452
01:23:42,300 --> 01:23:43,980
this dependency in isolation.

1453
01:23:43,980 --> 01:23:51,180
And the second bit is I'm not duplicating code in my code

1454
01:23:51,580 --> 01:23:54,020
base, which generally is also a good bit.

1455
01:23:54,020 --> 01:23:56,020
But that's for the first test.

1456
01:23:56,020 --> 01:23:59,540
So again, I'm using patch from unit test, standard library.

1457
01:23:59,540 --> 01:24:02,140
Here, there's not PyTest involved at all.

1458
01:24:02,140 --> 01:24:03,940
It's just like unit test.

1459
01:24:03,940 --> 01:24:09,020
The other thing now is what would you do if you have to

1460
01:24:09,020 --> 01:24:11,700
make sure that since a sequence roles is going to be

1461
01:24:11,700 --> 01:24:17,060
calling dice roles, and dice roles by effect is what is

1462
01:24:17,060 --> 01:24:21,020
calling role, and ultimately the round end from Python, you

1463
01:24:21,020 --> 01:24:22,260
have the randomness there.

1464
01:24:22,260 --> 01:24:26,060
And when you're testing with random, there's no way you can

1465
01:24:26,060 --> 01:24:30,100
actually be consistent, you might think, because they're

1466
01:24:30,100 --> 01:24:30,940
random.

1467
01:24:30,940 --> 01:24:32,700
Well, indeed there is a way.

1468
01:24:32,700 --> 01:24:35,540
And you have to remember that this is not real random.

1469
01:24:35,540 --> 01:24:40,220
This is pseudo random number generators.

1470
01:24:40,220 --> 01:24:43,020
And so there is indeed a way to control the randomness in

1471
01:24:43,020 --> 01:24:43,860
your code.

1472
01:24:43,860 --> 01:24:47,300
And this is obtained by random seed.

1473
01:24:47,340 --> 01:24:51,300
So the random seed is that piece of information that you

1474
01:24:51,300 --> 01:24:52,380
can set.

1475
01:24:52,380 --> 01:24:56,780
And whenever you rerun the code with the same test of

1476
01:24:56,780 --> 01:25:00,620
input multiple times, you're absolutely guaranteed that the

1477
01:25:00,620 --> 01:25:02,180
output will be the same.

1478
01:25:02,180 --> 01:25:07,540
So essentially, I called it unfair dice in the sense that

1479
01:25:07,540 --> 01:25:10,660
you're essentially generating an unfair sequence of numbers

1480
01:25:10,660 --> 01:25:12,260
which are totally controlled.

1481
01:25:12,260 --> 01:25:18,820
It would mean that you're essentially playing with a die

1482
01:25:18,820 --> 01:25:20,860
you can control.

1483
01:25:20,860 --> 01:25:23,420
I don't know how to say that in English.

1484
01:25:23,420 --> 01:25:24,780
You're cheating.

1485
01:25:24,780 --> 01:25:26,100
Sorry?

1486
01:25:26,100 --> 01:25:26,620
Loaded dice.

1487
01:25:26,620 --> 01:25:27,300
Thank you very much.

1488
01:25:27,300 --> 01:25:28,140
I was missing that.

1489
01:25:28,140 --> 01:25:29,220
Thank you.

1490
01:25:29,220 --> 01:25:30,420
You were playing with loaded dice.

1491
01:25:30,420 --> 01:25:34,820
So you know exactly what's going on.

1492
01:25:34,820 --> 01:25:39,580
And the way you do this is using seed on a specific

1493
01:25:39,580 --> 01:25:40,860
number.

1494
01:25:40,860 --> 01:25:45,660
And what we will be doing is we're generating sequence with

1495
01:25:45,660 --> 01:25:46,620
unfair dice.

1496
01:25:46,620 --> 01:25:51,580
And then reusing in the test the same exact random seed in

1497
01:25:51,580 --> 01:25:54,140
our test, we're absolutely guaranteed.

1498
01:25:54,140 --> 01:25:57,820
In this case, it's like 1, 2, 3, 4, 5, 6, 7.

1499
01:25:57,820 --> 01:26:00,180
Which, by the way, is also a very good seed because of the

1500
01:26:00,180 --> 01:26:01,540
binary representation of it.

1501
01:26:01,540 --> 01:26:03,820
But that would open an entire new chapter which I'm not

1502
01:26:03,820 --> 01:26:05,060
going to go into.

1503
01:26:06,060 --> 01:26:11,500
And then essentially we absolutely guarantee that when

1504
01:26:11,500 --> 01:26:14,260
we do this, we're using the same random seed.

1505
01:26:14,260 --> 01:26:18,100
And so any random number we generate is

1506
01:26:18,100 --> 01:26:19,420
absolutely repeatable.

1507
01:26:19,420 --> 01:26:21,140
This is what this test is doing.

1508
01:26:21,140 --> 01:26:23,620
So I'm fixing a seed.

1509
01:26:23,620 --> 01:26:26,220
I'm generating some rolling here in this unfair dice

1510
01:26:26,220 --> 01:26:27,020
function.

1511
01:26:27,020 --> 01:26:29,540
And so I'm calling run the end here.

1512
01:26:29,540 --> 01:26:32,540
And then refixing the seed again.

1513
01:26:32,540 --> 01:26:36,340
So the first fixing has been done internally in unfair dice.

1514
01:26:36,340 --> 01:26:38,740
I'm doing this in the test code.

1515
01:26:38,740 --> 01:26:40,660
And then I call the roll function.

1516
01:26:40,660 --> 01:26:42,980
And so again, run the end.

1517
01:26:42,980 --> 01:26:44,580
I'm calling run the end again.

1518
01:26:44,580 --> 01:26:47,860
And you'll be absolutely guaranteed that you're

1519
01:26:47,860 --> 01:26:50,420
generating again the same number because you're

1520
01:26:50,420 --> 01:26:53,500
restarting from the same starting point.

1521
01:26:53,500 --> 01:26:58,300
So this is just to take away another piece of extra, an

1522
01:26:58,300 --> 01:27:00,620
extra piece of information relating to testing with

1523
01:27:00,620 --> 01:27:01,500
random numbers.

1524
01:27:01,540 --> 01:27:04,620
And the rest of it is just testing that this is actually

1525
01:27:04,620 --> 01:27:05,540
going to happen.

1526
01:27:05,540 --> 01:27:12,620
So to finalize this bit, we run Python minus M, PyTest

1527
01:27:12,620 --> 01:27:16,180
minus V. And we're all done.

1528
01:27:16,180 --> 01:27:17,900
We have 26 tests passed.

1529
01:27:17,900 --> 01:27:21,620
And testSequencers.py has been run as well.

1530
01:27:21,620 --> 01:27:25,580
So we're absolutely sure that according to the test we

1531
01:27:25,580 --> 01:27:29,060
developed, everything works fine.

1532
01:27:29,060 --> 01:27:30,660
Nice.

1533
01:27:30,660 --> 01:27:33,980
So we're fun done with the code development.

1534
01:27:33,980 --> 01:27:38,900
And so what we have achieved so far, and we can go back to

1535
01:27:38,900 --> 01:27:44,140
the code terminal maybe, code editor, we have, let me close

1536
01:27:44,140 --> 01:27:45,540
a little bit this files.

1537
01:27:45,540 --> 01:27:48,140
We don't need them anymore.

1538
01:27:48,140 --> 01:27:48,780
Nice.

1539
01:27:48,780 --> 01:27:50,820
So this is our project structure.

1540
01:27:50,820 --> 01:27:53,420
This is what it might look like on your end, too.

1541
01:27:53,420 --> 01:27:56,420
So we have a dnd underscore roller, which is the Python

1542
01:27:56,420 --> 01:27:58,100
package we've been developing.

1543
01:27:58,100 --> 01:28:01,580
This is the test folder, which is containing all the test

1544
01:28:01,580 --> 01:28:03,260
modules.

1545
01:28:03,260 --> 01:28:08,140
And the rest of it is just like the previous thing relating

1546
01:28:08,140 --> 01:28:09,900
to the GitHub repository.

1547
01:28:09,900 --> 01:28:15,460
So what we're missing now is we have to make this folder an

1548
01:28:15,460 --> 01:28:18,380
actual software package.

1549
01:28:18,380 --> 01:28:21,340
And to do that, we just need a couple of things more.

1550
01:28:21,340 --> 01:28:24,660
Nothing particularly.

1551
01:28:24,660 --> 01:28:28,220
The first thing we're going to do, and we move on to the

1552
01:28:28,220 --> 01:28:32,300
third section of the document, so time to pack, is creating a

1553
01:28:32,300 --> 01:28:36,020
special file, which is called setup.py.

1554
01:28:36,020 --> 01:28:38,660
So let's move on in creating the setup.pile.

1555
01:28:38,660 --> 01:28:41,380
And with this setup.py, we'll be using

1556
01:28:41,380 --> 01:28:43,220
setupTools.setup function.

1557
01:28:46,660 --> 01:28:53,420
So we create within the main folder here.

1558
01:28:55,300 --> 01:28:57,500
Before we do here, there you go.

1559
01:28:57,500 --> 01:28:58,820
It's setup.py.

1560
01:29:01,620 --> 01:29:08,860
So from setupTools, we import setup and findPackage, which

1561
01:29:08,860 --> 01:29:11,860
is packages, which is the function we'll be using.

1562
01:29:11,860 --> 01:29:15,300
So the setup function is a function that will be called

1563
01:29:15,300 --> 01:29:18,100
whenever we want to install a package.

1564
01:29:18,100 --> 01:29:23,060
And by the way, this is general Python packaging

1565
01:29:23,060 --> 01:29:23,740
information.

1566
01:29:23,740 --> 01:29:25,180
This is how you do.

1567
01:29:25,180 --> 01:29:27,580
And actually, in the document, the reference you're going to

1568
01:29:27,580 --> 01:29:31,100
find is pointing directly to the main official Python

1569
01:29:31,100 --> 01:29:31,980
documentation.

1570
01:29:31,980 --> 01:29:34,620
So we're not talking Conda yet.

1571
01:29:34,620 --> 01:29:36,420
We're not talking Peep specifically yet.

1572
01:29:36,420 --> 01:29:39,500
We're just talking general Python packaging.

1573
01:29:39,500 --> 01:29:43,140
Python, as a language, is offering you a framework to

1574
01:29:43,140 --> 01:29:45,900
prepare your software to be packaged.

1575
01:29:45,900 --> 01:29:49,340
The next bit for ourselves will be, let's use a tool that

1576
01:29:49,340 --> 01:29:53,180
generates recipes that will be useful to install these

1577
01:29:53,180 --> 01:29:54,780
packages on many, many different platforms.

1578
01:29:58,100 --> 01:30:01,820
OK, let me just copy this for the sake of time in the

1579
01:30:01,820 --> 01:30:03,220
setup.file.

1580
01:30:03,220 --> 01:30:04,900
You can do that as well if you want.

1581
01:30:04,900 --> 01:30:08,700
And then we can comment what's going on.

1582
01:30:08,700 --> 01:30:12,580
But it's pretty much straightforward.

1583
01:30:12,580 --> 01:30:14,220
So I hope, at least.

1584
01:30:14,220 --> 01:30:16,460
And if it's not, please let me know.

1585
01:30:16,460 --> 01:30:22,220
So well, the setup file is taking a series of metadata.

1586
01:30:22,220 --> 01:30:25,460
And this is very important, because we'll be using this in

1587
01:30:25,460 --> 01:30:26,380
a second.

1588
01:30:26,380 --> 01:30:27,980
We specify a name and a version.

1589
01:30:27,980 --> 01:30:30,340
And those are the main two things you

1590
01:30:30,340 --> 01:30:31,900
immediately specify.

1591
01:30:31,900 --> 01:30:34,500
The name corresponds to how you want the package to be

1592
01:30:34,500 --> 01:30:37,740
named when you pack everything.

1593
01:30:37,740 --> 01:30:41,140
And the version is the version number.

1594
01:30:41,140 --> 01:30:44,620
I'm not going to have the time to go into the how do you

1595
01:30:44,620 --> 01:30:46,900
version your software.

1596
01:30:46,900 --> 01:30:49,660
But there are documentations there.

1597
01:30:49,660 --> 01:30:51,620
And if you look at the general official documentation of

1598
01:30:51,620 --> 01:30:54,740
Python packaging, there are references for you to expand on

1599
01:30:54,740 --> 01:30:56,500
this particular topic.

1600
01:30:56,500 --> 01:31:00,300
Let's say that so far we have version 0.0.1.

1601
01:31:00,300 --> 01:31:02,420
So we have a minor version.

1602
01:31:02,420 --> 01:31:04,460
Actually, we have a patch of a minor version in this

1603
01:31:04,460 --> 01:31:05,380
particular case.

1604
01:31:05,380 --> 01:31:09,180
But it is where it is.

1605
01:31:09,180 --> 01:31:10,780
It's fine.

1606
01:31:10,780 --> 01:31:13,060
We can set our initial number as we like.

1607
01:31:13,060 --> 01:31:15,660
I go for 0.0.1.

1608
01:31:15,660 --> 01:31:19,020
Then you specify who are the authors or the single author.

1609
01:31:19,020 --> 01:31:21,100
It's really up to you.

1610
01:31:21,140 --> 01:31:23,420
It could be the name and then author email.

1611
01:31:23,420 --> 01:31:26,420
This will be all package metadata that if you've

1612
01:31:26,420 --> 01:31:34,460
published packages on PyPy during your work days, or you

1613
01:31:34,460 --> 01:31:37,180
have experience with working with PyPy packages, these

1614
01:31:37,180 --> 01:31:43,500
information will be published on the main page on PyPy directly.

1615
01:31:43,500 --> 01:31:48,100
So these very information go there on PyPy.

1616
01:31:48,100 --> 01:31:51,020
But they're also part of the metadata of the software

1617
01:31:51,020 --> 01:31:52,780
package we're going to develop.

1618
01:31:52,780 --> 01:31:54,740
Then we have a description.

1619
01:31:54,740 --> 01:31:56,060
And that's a simple description.

1620
01:31:56,060 --> 01:31:58,540
In this case, it's just a sentence, Python package

1621
01:31:58,540 --> 01:32:00,820
draw DND dice in the terminal.

1622
01:32:00,820 --> 01:32:02,820
And you can also have a long description.

1623
01:32:02,820 --> 01:32:05,620
In this case, we're doing something which is a standard

1624
01:32:05,620 --> 01:32:08,620
practice when you have to code into GitHub repository.

1625
01:32:08,620 --> 01:32:10,900
We're reusing the readme file.

1626
01:32:10,900 --> 01:32:15,060
So on the top of this file, what I've done is essentially

1627
01:32:15,060 --> 01:32:20,460
loading the readme file into a long description Python

1628
01:32:20,460 --> 01:32:21,020
variable.

1629
01:32:21,020 --> 01:32:22,420
So I'm reading the file.

1630
01:32:22,420 --> 01:32:25,980
I'm specifying in the metadata of setup that the long

1631
01:32:25,980 --> 01:32:28,900
description content type is marked down, because readme is

1632
01:32:28,900 --> 01:32:30,140
generally written in markdown.

1633
01:32:30,140 --> 01:32:31,420
Actually, it's a markdown file.

1634
01:32:31,420 --> 01:32:34,620
So that is the format you're expecting.

1635
01:32:34,620 --> 01:32:37,740
And then you specify the URL of your project.

1636
01:32:37,740 --> 01:32:40,580
So what is the home page of this project?

1637
01:32:40,580 --> 01:32:44,020
Generally, this corresponds also to the GitHub repository

1638
01:32:44,020 --> 01:32:46,380
where you're publishing the code.

1639
01:32:46,380 --> 01:32:48,380
In this case, let me fix this.

1640
01:32:48,380 --> 01:32:53,700
It's going to be my username slash DND roller, as we've been

1641
01:32:53,700 --> 01:32:57,340
creating in the very beginning of the workshop.

1642
01:32:57,340 --> 01:32:58,100
What else?

1643
01:32:58,100 --> 01:33:00,020
That's my email.

1644
01:33:00,020 --> 01:33:01,820
That's actually a mail not existing.

1645
01:33:01,820 --> 01:33:04,460
I think I made a mistake there.

1646
01:33:04,460 --> 01:33:05,460
But that's fine.

1647
01:33:05,460 --> 01:33:06,860
I will be fixing that now.

1648
01:33:06,860 --> 01:33:10,100
It's anaconda.com.

1649
01:33:10,100 --> 01:33:17,300
And then, yes, names could be and all of you, because we've

1650
01:33:17,300 --> 01:33:19,820
been working with this all together.

1651
01:33:19,820 --> 01:33:24,100
And we include package data true.

1652
01:33:24,100 --> 01:33:27,580
Well, this is actually true, but we're not using it.

1653
01:33:27,580 --> 01:33:30,700
This include package data is, yes, we have a question.

1654
01:33:40,100 --> 01:33:41,340
Yeah.

1655
01:33:57,420 --> 01:33:59,340
Well, that answer I don't know.

1656
01:33:59,340 --> 01:34:02,820
But the thing is, let me show you what I've been doing with

1657
01:34:02,820 --> 01:34:04,340
the emoji thing.

1658
01:34:04,340 --> 01:34:06,660
The Noemoji package pipeline.

1659
01:34:06,660 --> 01:34:07,900
Pipeline.

1660
01:34:09,900 --> 01:34:12,780
The classifier actually is something I was going to talk

1661
01:34:12,780 --> 01:34:13,540
about in a second.

1662
01:34:13,540 --> 01:34:16,940
So let me keep this page here open.

1663
01:34:16,940 --> 01:34:19,700
The pipeline.

1664
01:34:19,700 --> 01:34:22,420
Because actually, something I don't remind, I don't

1665
01:34:22,420 --> 01:34:24,180
remember off the top of my head right now, and I'm

1666
01:34:24,180 --> 01:34:28,940
checking with you, is, sorry, there's no Noemoji here.

1667
01:34:28,940 --> 01:34:29,540
No emoji.

1668
01:34:29,540 --> 01:34:30,660
There you go.

1669
01:34:30,700 --> 01:34:37,140
So if you go here, yeah, you do have an email here.

1670
01:34:37,140 --> 01:34:38,700
That's the mail to link.

1671
01:34:38,700 --> 01:34:39,260
Yeah.

1672
01:34:39,260 --> 01:34:41,740
It's pushed there, directly on there.

1673
01:34:48,700 --> 01:34:51,420
You can use specific email for project if you're

1674
01:34:51,420 --> 01:34:52,500
worried about spam.

1675
01:34:52,500 --> 01:34:55,220
Yeah.

1676
01:34:55,220 --> 01:34:57,340
That's actually a very good point.

1677
01:34:57,340 --> 01:34:57,700
No, no, no.

1678
01:34:57,700 --> 01:34:59,500
That's a very good point.

1679
01:34:59,500 --> 01:35:02,980
And to be honest, a point I've never thought about before.

1680
01:35:02,980 --> 01:35:04,540
So thank you very much for your contribution.

1681
01:35:04,540 --> 01:35:05,780
It's a very good point.

1682
01:35:07,500 --> 01:35:10,580
There are ways in which, as far as I know, and you can

1683
01:35:10,580 --> 01:35:14,820
correct me if I'm mistaken, you have sort of an alias

1684
01:35:14,820 --> 01:35:16,300
can specify for your emails.

1685
01:35:16,300 --> 01:35:21,260
So you can actually, Apple, as a service developed

1686
01:35:21,260 --> 01:35:23,980
specifically for that, it's called Hi My Email, is doing

1687
01:35:23,980 --> 01:35:25,340
exactly that, isn't it?

1688
01:35:25,340 --> 01:35:29,020
So it's creating alias for your emails so that your email

1689
01:35:29,020 --> 01:35:30,540
has never showed up in clear.

1690
01:35:30,540 --> 01:35:31,540
And you can about that.

1691
01:35:31,540 --> 01:35:32,100
Yeah.

1692
01:35:32,100 --> 01:35:32,860
That's a very good point.

1693
01:35:32,860 --> 01:35:34,100
Yeah.

1694
01:35:37,980 --> 01:35:40,820
All you can do, as I was doing, like putting fake emails,

1695
01:35:40,820 --> 01:35:42,980
that's never going to work.

1696
01:35:42,980 --> 01:35:44,500
But I'm kidding.

1697
01:35:44,500 --> 01:35:46,900
What I was going to say earlier was, we have an

1698
01:35:46,900 --> 01:35:48,540
include package data here.

1699
01:35:48,540 --> 01:35:52,180
And this include package data is specifically necessary when

1700
01:35:52,180 --> 01:35:56,700
you have dependencies in your package that are not specific

1701
01:35:56,700 --> 01:35:58,060
source files.

1702
01:35:58,060 --> 01:36:01,300
So for example, I happen to have packaged something that

1703
01:36:01,300 --> 01:36:06,300
had HTML, CSS dependencies, were not Python dependencies.

1704
01:36:06,300 --> 01:36:09,420
So you can include all of them into the package as

1705
01:36:09,420 --> 01:36:10,660
resources of your package.

1706
01:36:13,660 --> 01:36:18,380
This instruction here is necessary to instruct the set

1707
01:36:18,380 --> 01:36:22,740
up function to look at your folder structure and in case

1708
01:36:22,740 --> 01:36:24,220
exclude specific folders.

1709
01:36:24,220 --> 01:36:27,620
You don't want to make part of the software package you're

1710
01:36:27,620 --> 01:36:28,420
building.

1711
01:36:28,420 --> 01:36:31,740
And last but by no means least, the dependencies of

1712
01:36:31,740 --> 01:36:32,820
your package.

1713
01:36:32,820 --> 01:36:36,340
So in this particular case, we do require NoMoji, that

1714
01:36:36,340 --> 01:36:38,260
particular version, for example.

1715
01:36:38,260 --> 01:36:44,500
We can drop the version specification if that's not

1716
01:36:44,500 --> 01:36:45,900
necessary.

1717
01:36:45,900 --> 01:36:48,340
And Tabulate, as we're doing for Tabulate, for example.

1718
01:36:48,340 --> 01:36:51,380
We say we need NoMoji and Tabulate.

1719
01:36:51,380 --> 01:36:54,100
That should be fine as well.

1720
01:36:54,100 --> 01:36:55,340
Good.

1721
01:36:56,340 --> 01:36:57,580
Sure.

1722
01:37:03,980 --> 01:37:06,820
I wouldn't.

1723
01:37:06,820 --> 01:37:08,380
Because tests are there.

1724
01:37:08,380 --> 01:37:12,980
And when you install it, you want to have tests in your

1725
01:37:12,980 --> 01:37:14,500
Python package.

1726
01:37:14,500 --> 01:37:17,420
Unless you have a very specific reason not to.

1727
01:37:17,420 --> 01:37:20,740
But I cannot think of one at the moment.

1728
01:37:20,740 --> 01:37:21,980
Oh yes, please.

1729
01:37:25,340 --> 01:37:36,780
At this particular step, we're not using Conda yet.

1730
01:37:36,780 --> 01:37:42,180
And what we'll be doing, using Grayscale in a second, is

1731
01:37:42,180 --> 01:37:44,740
actually leveraging on these information here to generate

1732
01:37:44,740 --> 01:37:45,820
the recipe for you.

1733
01:37:45,820 --> 01:37:49,100
So it's the opposite of what you're asking, if I

1734
01:37:49,100 --> 01:37:50,100
understood correctly.

1735
01:37:50,100 --> 01:37:54,420
So you specify your dependency for a package that presumably

1736
01:37:54,460 --> 01:37:55,380
we go on PyPy.

1737
01:37:55,380 --> 01:37:58,580
And instead, we will make it a Conda package out of it.

1738
01:37:58,580 --> 01:38:01,820
So it goes on a different place, because on Conda Forge,

1739
01:38:01,820 --> 01:38:04,060
on Conda repositories.

1740
01:38:04,060 --> 01:38:07,500
And Grayscale is essentially doing the job for you in

1741
01:38:07,500 --> 01:38:09,340
writing all this thing manually.

1742
01:38:09,340 --> 01:38:13,300
It's like reading the metadata from your specifications

1743
01:38:13,300 --> 01:38:16,060
there and preparing the recipe for you.

1744
01:38:16,060 --> 01:38:17,300
Yeah.

1745
01:38:25,020 --> 01:38:26,500
Yes.

1746
01:38:52,000 --> 01:38:52,980
Sure.

1747
01:38:52,980 --> 01:38:55,620
That's a very good question.

1748
01:38:55,620 --> 01:39:00,540
When we will be about to build the package,

1749
01:39:00,540 --> 01:39:03,300
there will be default packages including the environment,

1750
01:39:03,300 --> 01:39:05,020
which are the very same defaults that you get when

1751
01:39:05,020 --> 01:39:06,300
you create a new environment.

1752
01:39:06,300 --> 01:39:08,580
So you don't have to specify them as the paper

1753
01:39:08,580 --> 01:39:10,140
package you were mentioning.

1754
01:39:10,140 --> 01:39:13,620
That would be part of the dependency for you already.

1755
01:39:13,620 --> 01:39:14,620
What happens?

1756
01:39:14,620 --> 01:39:15,620
Oh, sorry.

1757
01:39:15,620 --> 01:39:34,940
Condo-exclusive dependencies, you mean packages that would

1758
01:39:34,940 --> 01:39:36,940
be downloaded from condo rather than from PyPy?

1759
01:39:36,940 --> 01:39:43,740
Yes, there is.

1760
01:39:43,740 --> 01:39:46,700
That was actually a part which is not in the tutorial,

1761
01:39:46,700 --> 01:39:48,860
but in the break I actually thought it could have been

1762
01:39:48,860 --> 01:39:51,500
a good addition, and so I will be doing right now,

1763
01:39:51,500 --> 01:39:53,420
so bear with me.

1764
01:39:53,420 --> 01:39:56,180
One of the things that you can do in condo environment,

1765
01:39:56,180 --> 01:39:58,900
and this is probably one of the most important things,

1766
01:39:58,900 --> 01:40:03,020
one of the main reasons at least to my experience,

1767
01:40:03,020 --> 01:40:06,620
why you want to use condo environment over other ways

1768
01:40:06,620 --> 01:40:11,420
of creating environments, is that you can easily replicate

1769
01:40:11,420 --> 01:40:13,460
and reproduce environment on different platforms.

1770
01:40:13,500 --> 01:40:15,780
And this is one of the benefits of condo.

1771
01:40:15,780 --> 01:40:18,060
So I'm going to show you now in a new shell.

1772
01:40:18,060 --> 01:40:21,580
So let me increase the font here.

1773
01:40:21,580 --> 01:40:25,740
So let go back into the condo info minus minus m's.

1774
01:40:25,740 --> 01:40:27,060
So I have a list of environment.

1775
01:40:27,060 --> 01:40:31,900
I want to export this packaging environment.

1776
01:40:31,900 --> 01:40:37,740
The way to do this is to do condo m export.

1777
01:40:37,740 --> 01:40:41,260
This will create, you have to name the environment you want,

1778
01:40:41,260 --> 01:40:43,940
and that's going to be packaging.

1779
01:40:43,940 --> 01:40:46,540
This is going to create a YAML file,

1780
01:40:46,540 --> 01:40:51,380
which is similar to the PIP requirements you generate.

1781
01:40:51,380 --> 01:40:54,980
So I'm going to show you now what's going on.

1782
01:40:54,980 --> 01:40:57,620
This is the output, but most likely you

1783
01:40:57,620 --> 01:40:59,460
want to save it into a file.

1784
01:40:59,460 --> 01:41:02,700
So you do condo m export.

1785
01:41:02,700 --> 01:41:05,460
So let me clear shell here so you can see.

1786
01:41:05,460 --> 01:41:09,300
Condo m export minus n packaging.

1787
01:41:09,340 --> 01:41:17,020
And then you redirect the output to an environment.yaml file.

1788
01:41:19,260 --> 01:41:22,100
There are other options you might want to add,

1789
01:41:22,100 --> 01:41:24,900
and this also brings me to another point.

1790
01:41:26,740 --> 01:41:29,940
I don't remember exactly all the things.

1791
01:41:29,940 --> 01:41:31,500
So let me go with help.

1792
01:41:31,500 --> 01:41:33,220
Otherwise I go, yes.

1793
01:41:33,220 --> 01:41:35,460
So you can specify the channels you want.

1794
01:41:36,260 --> 01:41:41,740
Otherwise they will be automatically inferred.

1795
01:41:41,740 --> 01:41:44,260
You can avoid putting the number of builds.

1796
01:41:44,260 --> 01:41:46,740
And this is generally useful when

1797
01:41:46,740 --> 01:41:50,340
you want to have portability between different platforms.

1798
01:41:50,340 --> 01:41:54,660
Because build numbers might be very operating system

1799
01:41:54,660 --> 01:41:57,180
specifics, because especially when

1800
01:41:57,180 --> 01:42:00,540
you have scientific packages dependencies like NumPy,

1801
01:42:00,540 --> 01:42:01,980
this has always been my experience.

1802
01:42:01,980 --> 01:42:04,380
If you go with build on Linux, it's

1803
01:42:04,380 --> 01:42:06,700
not going to work on Mac, because the build number

1804
01:42:06,700 --> 01:42:07,340
is different.

1805
01:42:07,340 --> 01:42:10,580
So you want to get rid of that if you really don't need them.

1806
01:42:10,580 --> 01:42:13,740
And you might also say ignore channels,

1807
01:42:13,740 --> 01:42:16,820
so that it goes by default by the channels you've set up

1808
01:42:16,820 --> 01:42:18,220
as default on your environment.

1809
01:42:18,220 --> 01:42:21,780
Otherwise it goes into the packages you have.

1810
01:42:21,780 --> 01:42:24,500
And in fact, we're going to avoid that.

1811
01:42:24,500 --> 01:42:26,980
So we're going to avoid the number of builds here.

1812
01:42:26,980 --> 01:42:29,020
You can also specify the file you

1813
01:42:29,020 --> 01:42:31,740
want to write the export to without using

1814
01:42:31,740 --> 01:42:37,380
the redirection there using the minus f option.

1815
01:42:37,380 --> 01:42:39,060
So let me just do that.

1816
01:42:39,060 --> 01:42:42,300
Conda no builds.

1817
01:42:42,300 --> 01:42:44,380
That was the option I couldn't remember.

1818
01:42:44,380 --> 01:42:55,140
So clear conda export minus minus no builds on environment

1819
01:42:55,140 --> 01:42:55,660
dot channel.

1820
01:42:55,660 --> 01:42:57,660
So if we open this file now.

1821
01:43:04,660 --> 01:43:05,340
Oh, sorry.

1822
01:43:05,340 --> 01:43:06,820
You're right.

1823
01:43:06,820 --> 01:43:07,540
You're right.

1824
01:43:07,540 --> 01:43:09,180
Let me do that again.

1825
01:43:09,180 --> 01:43:10,780
I forgot the name of the environment I wanted.

1826
01:43:10,780 --> 01:43:13,260
It goes on the current environment by default.

1827
01:43:17,740 --> 01:43:18,740
Thank you.

1828
01:43:18,740 --> 01:43:20,060
I didn't see that.

1829
01:43:21,060 --> 01:43:21,820
OK.

1830
01:43:21,820 --> 01:43:25,620
So this YAML file is the file you

1831
01:43:25,620 --> 01:43:29,660
need to recreate exactly the environment you had.

1832
01:43:29,660 --> 01:43:31,660
As you can see immediately on the top,

1833
01:43:31,660 --> 01:43:35,900
you can see my channel, because that is where one dependency is

1834
01:43:35,900 --> 01:43:36,660
being taken.

1835
01:43:36,660 --> 01:43:38,860
And how the channels actually work in Conda

1836
01:43:38,860 --> 01:43:41,660
is you have a list of channels.

1837
01:43:41,660 --> 01:43:43,460
You can specify as many as you like.

1838
01:43:43,460 --> 01:43:45,260
And you can specify the number of channels

1839
01:43:45,260 --> 01:43:46,260
that you want to have.

1840
01:43:46,260 --> 01:43:48,260
So you can specify the number of channels

1841
01:43:48,340 --> 01:43:50,180
you can specify as many as you like.

1842
01:43:50,180 --> 01:43:54,660
And any package will be taken using a name resolution order.

1843
01:43:54,660 --> 01:43:57,020
So if one package can be found in one channel,

1844
01:43:57,020 --> 01:44:00,300
like Lerio Maggio, that is the channel that will be used.

1845
01:44:00,300 --> 01:44:02,300
Otherwise, it goes to the next in the list and go on

1846
01:44:02,300 --> 01:44:07,020
on until that package cannot be found anywhere.

1847
01:44:07,020 --> 01:44:11,740
And the same applies if you're using Conda Forge, for example.

1848
01:44:11,740 --> 01:44:15,700
Or if you happen to be working with PyTorch, which

1849
01:44:16,100 --> 01:44:18,380
is my experience, for example, you always

1850
01:44:18,380 --> 01:44:20,060
want to install PyTorch.

1851
01:44:20,060 --> 01:44:23,060
Well, not always, because now you can use default channels.

1852
01:44:23,060 --> 01:44:27,940
But in the past, you wanted to specify the minus PyTorch,

1853
01:44:27,940 --> 01:44:29,980
sorry, the PyTorch channel to install things.

1854
01:44:29,980 --> 01:44:31,540
And so PyTorch was the top of the list.

1855
01:44:31,540 --> 01:44:33,060
And PyTorch was installed from there.

1856
01:44:33,060 --> 01:44:35,780
The rest of it was installed from Conda Forge or Anaconda

1857
01:44:35,780 --> 01:44:37,860
default packages, packet channels.

1858
01:44:37,860 --> 01:44:38,360
Yes.

1859
01:44:54,100 --> 01:44:54,600
Yes.

1860
01:45:01,900 --> 01:45:02,780
Yes, yes.

1861
01:45:02,780 --> 01:45:06,100
That's why Conda Forge actually exists.

1862
01:45:06,140 --> 01:45:09,300
And we've been discussing this in the break.

1863
01:45:09,300 --> 01:45:12,140
Actually, you can do much more than that.

1864
01:45:12,140 --> 01:45:15,260
You can actually force any specific package

1865
01:45:15,260 --> 01:45:19,740
to be in a channel at a specific checksum.

1866
01:45:19,740 --> 01:45:23,860
So even when you're installing packages,

1867
01:45:23,860 --> 01:45:25,620
you want to check that you're actually,

1868
01:45:25,620 --> 01:45:28,020
this is one of the extra bits provided by Conda,

1869
01:45:28,020 --> 01:45:29,380
to be honest.

1870
01:45:29,380 --> 01:45:32,180
Something like when you're getting packages from defaults

1871
01:45:32,180 --> 01:45:35,100
in Anaconda channels, you're absolutely guaranteed

1872
01:45:35,100 --> 01:45:37,060
that you're not getting rubbish.

1873
01:45:37,060 --> 01:45:38,460
Because this is one of the things

1874
01:45:38,460 --> 01:45:41,380
we do on maintaining the default channel.

1875
01:45:41,380 --> 01:45:43,260
And the Conda Forge is a similar effort,

1876
01:45:43,260 --> 01:45:45,060
but it's a community effort.

1877
01:45:45,060 --> 01:45:47,340
And that's why they will tell you later,

1878
01:45:47,340 --> 01:45:49,940
and I already spoil it a little bit,

1879
01:45:49,940 --> 01:45:53,340
that Conda Forge, being this important,

1880
01:45:53,340 --> 01:45:56,140
and this community-centered repositories

1881
01:45:56,140 --> 01:45:59,980
for other packages, that there is an approval process

1882
01:45:59,980 --> 01:46:03,020
to have packages on Conda Forge for exactly the same reason

1883
01:46:03,020 --> 01:46:04,380
you were mentioning.

1884
01:46:04,380 --> 01:46:06,460
Because you never know what you can get in from the internet,

1885
01:46:06,460 --> 01:46:07,980
specifically from PyPy.

1886
01:46:07,980 --> 01:46:09,900
That there's been lots of examples.

1887
01:46:10,940 --> 01:46:13,140
In my experience, because this is what my radar

1888
01:46:13,140 --> 01:46:16,500
is going closer to, is in PyTorch specifically,

1889
01:46:16,500 --> 01:46:18,660
if you're looking for packages, you have plenty

1890
01:46:18,660 --> 01:46:22,700
of other similar-named packages, malicious packages.

1891
01:46:22,700 --> 01:46:26,420
And it was at some point, and there was actually a news,

1892
01:46:26,420 --> 01:46:29,020
a piece of news which was particularly useful.

1893
01:46:29,020 --> 01:46:34,020
The nightly build of PyTorch on PyPy was tampered.

1894
01:46:38,620 --> 01:46:41,260
And in fact, if you were installing it from Conda,

1895
01:46:41,260 --> 01:46:43,140
you didn't have any problem.

1896
01:46:43,140 --> 01:46:45,140
But if you install it from PyPy,

1897
01:46:45,140 --> 01:46:46,780
you were installing malicious code.

1898
01:46:46,780 --> 01:46:48,420
And that was quite an issue.

1899
01:46:49,500 --> 01:46:54,500
Anyway, sorry for going away with things.

1900
01:46:55,500 --> 01:46:59,500
Well, as you can see now, what the expert has been done

1901
01:46:59,500 --> 01:47:03,780
is just telling me the package I had in my environment

1902
01:47:03,780 --> 01:47:05,540
and the version, not the build version.

1903
01:47:05,540 --> 01:47:07,780
So it's like fixing the version.

1904
01:47:07,780 --> 01:47:09,740
At this point, to my experience,

1905
01:47:09,740 --> 01:47:12,220
and this is what I normally do, is like,

1906
01:47:12,220 --> 01:47:14,980
if I have to share this file, do I really need to have

1907
01:47:14,980 --> 01:47:17,460
a list of everything in my environment?

1908
01:47:17,460 --> 01:47:19,620
If you share this file, you're absolutely guaranteed

1909
01:47:19,620 --> 01:47:21,700
this will work, and I promise you it will.

1910
01:47:21,700 --> 01:47:26,700
But if you really want to tell to someone

1911
01:47:27,180 --> 01:47:29,580
what are the dependencies to your project,

1912
01:47:29,580 --> 01:47:30,860
you can get rid of some of them,

1913
01:47:30,860 --> 01:47:33,220
because some of these packages will be installed anyway

1914
01:47:33,220 --> 01:47:35,180
because they are dependency of the Conda environment.

1915
01:47:35,180 --> 01:47:38,180
So what I would normally do is like, okay,

1916
01:47:38,180 --> 01:47:41,420
I've never installed any package called this or like this,

1917
01:47:41,420 --> 01:47:44,780
so I just, an emoji, yes, I do, and I keep this.

1918
01:47:44,780 --> 01:47:48,100
So packaging, no.

1919
01:47:48,100 --> 01:47:50,100
Pip, yes, pip is really necessary

1920
01:47:50,100 --> 01:47:53,740
because I might need to install things from pip.

1921
01:47:53,740 --> 01:47:54,980
So let's install pip.

1922
01:47:56,100 --> 01:47:57,900
PyTest, I've installed, yes.

1923
01:47:57,900 --> 01:47:59,620
Python, sure.

1924
01:47:59,620 --> 01:48:02,660
Setup tools, it's default, let's keep it.

1925
01:48:02,660 --> 01:48:04,260
Tabulate, yes.

1926
01:48:04,260 --> 01:48:07,140
The rest of it, I didn't.

1927
01:48:07,140 --> 01:48:10,340
You can get rid of the prefix here because you can.

1928
01:48:10,340 --> 01:48:13,660
This prefix is used to say what is gonna be the path

1929
01:48:13,660 --> 01:48:14,660
of your environment.

1930
01:48:15,540 --> 01:48:18,580
You can get rid of that, it's not necessary.

1931
01:48:18,580 --> 01:48:20,820
And that's it, so this is your environment.

1932
01:48:21,780 --> 01:48:24,380
Once you have this file, you can push it on the repository

1933
01:48:24,380 --> 01:48:28,580
as it will be doing, and you can recreate

1934
01:48:28,580 --> 01:48:32,700
on your own computer using directly Conda,

1935
01:48:32,700 --> 01:48:35,500
the same environment using this specific version

1936
01:48:35,500 --> 01:48:36,340
of the package.

1937
01:48:36,340 --> 01:48:40,900
And the same rules apply similar

1938
01:48:40,900 --> 01:48:42,340
to the pip requirements file.

1939
01:48:42,340 --> 01:48:45,340
So if you don't want to have this to be a strict dependency

1940
01:48:45,340 --> 01:48:47,220
but at least a minimum dependency,

1941
01:48:47,220 --> 01:48:51,540
you can say instead of no emoji equal to no point no point five,

1942
01:48:51,540 --> 01:48:55,980
you can say greater than or equal to no point no point five.

1943
01:48:55,980 --> 01:48:57,220
Same, it works the same way.

1944
01:48:59,660 --> 01:49:04,540
Just a reminder that in pip, you use the double equal,

1945
01:49:04,540 --> 01:49:06,020
in Conda you use a single equal.

1946
01:49:06,020 --> 01:49:08,140
That's the only difference.

1947
01:49:08,140 --> 01:49:10,340
And in this particular case,

1948
01:49:10,340 --> 01:49:13,180
we don't have any pip installed packages,

1949
01:49:13,220 --> 01:49:18,020
but if you were, you would have add an extra section here

1950
01:49:18,020 --> 01:49:21,500
that is called pip, and then you have the list of packages

1951
01:49:21,500 --> 01:49:24,700
installed from pip in this sub list.

1952
01:49:24,700 --> 01:49:28,660
And the result will be that when you recreate the environment,

1953
01:49:28,660 --> 01:49:30,380
Conda packages will be installed first

1954
01:49:30,380 --> 01:49:34,180
and pip dependencies later.

1955
01:49:34,180 --> 01:49:35,580
And that's it, yes please.

1956
01:49:43,180 --> 01:49:44,180
Sorry.

1957
01:49:44,180 --> 01:49:45,180
Sure.

1958
01:49:45,180 --> 01:49:50,180
No, no, if you had pip dependencies,

1959
01:50:07,780 --> 01:50:10,820
Conda and the export would have added them.

1960
01:50:10,820 --> 01:50:15,460
I can, for example, show you this very quickly

1961
01:50:16,660 --> 01:50:21,100
on a different environment, like let me see.

1962
01:50:23,180 --> 01:50:26,500
PPML-SIFT has a pip dependency for sure because I know that.

1963
01:50:26,500 --> 01:50:28,100
So I'm going to export this one.

1964
01:50:32,820 --> 01:50:37,460
PPML-SIFT, and let me just print it.

1965
01:50:37,460 --> 01:50:39,180
I don't save it.

1966
01:50:39,180 --> 01:50:40,780
There you go.

1967
01:50:40,780 --> 01:50:41,780
There you go.

1968
01:50:41,780 --> 01:50:44,860
You have an extra section pip, and this list of packages

1969
01:50:44,860 --> 01:50:51,860
that will be following the requirements.file standard.

1970
01:50:51,860 --> 01:50:53,300
So the double equal there.

1971
01:50:53,300 --> 01:50:57,260
And the mxport has gotten them directly from the environment.

1972
01:50:57,260 --> 01:50:58,420
Okay?

1973
01:50:58,420 --> 01:51:01,020
No worries.

1974
01:51:01,020 --> 01:51:05,260
That being said, okay.

1975
01:51:05,260 --> 01:51:07,420
Okay, we have the environment there.

1976
01:51:07,420 --> 01:51:12,300
That's been said.

1977
01:51:12,300 --> 01:51:14,100
We need to finish the packaging, yeah.

1978
01:51:17,340 --> 01:51:20,940
Yeah, so we write some description to the project.

1979
01:51:20,940 --> 01:51:25,220
I just copy here to make it super quick.

1980
01:51:25,220 --> 01:51:27,700
So I'm going to copy this into the readme file

1981
01:51:27,700 --> 01:51:31,260
so we have a proper longer description.

1982
01:51:31,260 --> 01:51:34,500
So I replace the content here to this one.

1983
01:51:34,500 --> 01:51:38,580
And if you're wondering, you can see preview

1984
01:51:38,580 --> 01:51:40,580
of what we've been doing.

1985
01:51:40,580 --> 01:51:44,700
This is how it looks like.

1986
01:51:44,700 --> 01:51:49,540
Maybe tabulation is bad, but it should be good on GitHub.

1987
01:51:49,540 --> 01:51:54,220
And this is what will be the longer description

1988
01:51:54,220 --> 01:51:57,900
for our project, this mark down here.

1989
01:51:57,900 --> 01:52:03,820
Last but not least, we have some configuration file to set up.

1990
01:52:03,820 --> 01:52:06,740
This is, again, standard Python packaging.

1991
01:52:06,740 --> 01:52:14,100
So we go for the setup.cfg and the pyproject.toml.

1992
01:52:14,100 --> 01:52:16,100
Some of these could have been used.

1993
01:52:16,100 --> 01:52:20,020
I decided to share both of them because some of these

1994
01:52:20,020 --> 01:52:22,220
you can actually use directly pyproject.toml

1995
01:52:22,220 --> 01:52:23,780
in case you don't want to.

1996
01:52:23,780 --> 01:52:26,940
I just decided to show both because standard practice

1997
01:52:26,940 --> 01:52:30,220
to have either one or both is the same thing.

1998
01:52:30,220 --> 01:52:34,780
There's no particular rule there that applies,

1999
01:52:34,780 --> 01:52:37,900
at least to my knowledge.

2000
01:52:37,900 --> 01:52:44,660
So you create a new file, setup.cfg, and you copy them.

2001
01:52:44,660 --> 01:52:46,740
The only thing I want to mention, I think, here

2002
01:52:46,740 --> 01:52:49,300
is you can specify the license file, which is generally

2003
01:52:49,300 --> 01:52:52,620
a good important bit because you want to license your software.

2004
01:52:52,620 --> 01:52:54,260
And then you have a classifiers.

2005
01:52:54,260 --> 01:52:58,340
And this is the extra metadata for package retrieval,

2006
01:52:58,340 --> 01:52:59,780
specifically on PyPI.

2007
01:52:59,780 --> 01:53:02,700
This is very useful.

2008
01:53:02,700 --> 01:53:08,940
And the pyproject.toml is essentially

2009
01:53:08,940 --> 01:53:10,980
replicating a few environments.

2010
01:53:10,980 --> 01:53:19,900
The last thing in this is what we need, pyproject.toml.

2011
01:53:19,900 --> 01:53:22,700
Sorry, I missed the name.

2012
01:53:22,700 --> 01:53:24,420
Toml here.

2013
01:53:24,420 --> 01:53:31,540
Toml is this format that we'll be using here.

2014
01:53:31,540 --> 01:53:33,900
It's a metadata.

2015
01:53:33,900 --> 01:53:41,580
It's a markup formatting here where you have,

2016
01:53:41,580 --> 01:53:43,380
we were specifying the same classifiers,

2017
01:53:43,380 --> 01:53:46,020
the same instructions, sort of replicating

2018
01:53:46,020 --> 01:53:48,220
the same information in a different format.

2019
01:53:48,220 --> 01:53:51,180
We're also replicating dependencies.

2020
01:53:51,180 --> 01:53:53,260
Again, an emoji and tabulate.

2021
01:53:56,860 --> 01:53:58,500
The reason why we're doing this is

2022
01:53:58,500 --> 01:54:02,580
because both Conda, Build, and Grayscale

2023
01:54:02,580 --> 01:54:04,260
will be reading from different bits.

2024
01:54:04,260 --> 01:54:05,420
That's why I'm doing this.

2025
01:54:05,420 --> 01:54:08,980
But I will be showing you in a second.

2026
01:54:08,980 --> 01:54:09,740
Nice.

2027
01:54:09,740 --> 01:54:16,540
So at this point, this is how your project might look like.

2028
01:54:16,540 --> 01:54:18,860
And feel free to tell me any questions in the meantime

2029
01:54:18,860 --> 01:54:20,980
if you have them.

2030
01:54:21,060 --> 01:54:22,940
So we've been doing this.

2031
01:54:22,940 --> 01:54:25,660
This is the project we have.

2032
01:54:25,660 --> 01:54:28,340
We have the code, the tests, the metadata, and the set.

2033
01:54:28,340 --> 01:54:29,260
Tab.py.

2034
01:54:29,260 --> 01:54:30,580
We're actually ready to pack.

2035
01:54:30,580 --> 01:54:34,340
So the last bit we need is to add everything on GitHub.

2036
01:54:34,340 --> 01:54:38,500
So I will be doing something that I would normally never do,

2037
01:54:38,500 --> 01:54:42,340
as in doing a git commit with everything in it.

2038
01:54:42,340 --> 01:54:47,260
But just because I don't know what is your practice,

2039
01:54:47,260 --> 01:54:50,340
I would be more than happy to know what you do.

2040
01:54:50,340 --> 01:54:55,180
My general way of controlling things in git repositories

2041
01:54:55,180 --> 01:54:58,500
is having very clear git commit messages.

2042
01:54:58,500 --> 01:55:01,700
And in particular, they should be semantically related.

2043
01:55:01,700 --> 01:55:04,820
So whenever you push something on a repository,

2044
01:55:04,820 --> 01:55:06,860
you don't want to see something like,

2045
01:55:06,860 --> 01:55:10,220
I've done this, this, this, and that in many different files

2046
01:55:10,220 --> 01:55:11,500
from many different things.

2047
01:55:11,500 --> 01:55:13,900
I do one commit at a time.

2048
01:55:13,900 --> 01:55:16,660
Because you don't pay commits, it's fine.

2049
01:55:16,660 --> 01:55:19,140
And it's always good for you to track things back.

2050
01:55:19,140 --> 01:55:20,980
And when you have to roll back changes,

2051
01:55:20,980 --> 01:55:24,340
you can go very neat peeking the thing you need.

2052
01:55:24,340 --> 01:55:27,780
But that's up to actually the practice

2053
01:55:27,780 --> 01:55:33,460
you prefer to embark, I would say.

2054
01:55:33,460 --> 01:55:36,740
But at this point, I git add everything.

2055
01:55:36,740 --> 01:55:45,180
And then I git commit, say, release ready to be packed.

2056
01:55:45,180 --> 01:55:55,940
Good point.

2057
01:55:55,940 --> 01:55:59,500
I actually would like to add it to the repository.

2058
01:55:59,500 --> 01:56:05,940
Because this is something you can automate your things with.

2059
01:56:05,940 --> 01:56:07,620
In this particular case of packaging,

2060
01:56:07,620 --> 01:56:09,340
it doesn't really make any difference.

2061
01:56:09,340 --> 01:56:11,380
But if you're sharing your code with somebody

2062
01:56:11,380 --> 01:56:13,620
and just want to say, OK, my project is actually

2063
01:56:13,620 --> 01:56:15,220
on that repository with this code,

2064
01:56:15,220 --> 01:56:16,860
and you want to have instructions

2065
01:56:16,860 --> 01:56:18,580
to replicate your environment.

2066
01:56:18,580 --> 01:56:21,540
Or if you're working on open source projects,

2067
01:56:21,540 --> 01:56:26,140
you have presumably a section how to contribute.

2068
01:56:26,140 --> 01:56:28,260
And the first thing you do in contributing

2069
01:56:28,260 --> 01:56:29,500
is setting up the environment.

2070
01:56:29,500 --> 01:56:31,300
And that's how you do it.

2071
01:56:31,300 --> 01:56:36,660
So you make that file living, environment.yml.

2072
01:56:36,660 --> 01:56:39,380
So my general practice is I do both.

2073
01:56:39,380 --> 01:56:42,500
I do environment.yml and requirements.txt,

2074
01:56:42,500 --> 01:56:46,740
depending if Conda is urgently necessary or not.

2075
01:56:46,740 --> 01:56:51,580
So if I support both, it's up to you, whichever you prefer.

2076
01:56:51,580 --> 01:56:56,780
And these things are actually taken into account

2077
01:56:56,780 --> 01:56:58,100
with automated systems.

2078
01:56:58,100 --> 01:57:01,260
So I'm working a lot with Jupyter Notebooks.

2079
01:57:01,260 --> 01:57:03,540
So like having tutorials in Jupyter Notebooks

2080
01:57:03,540 --> 01:57:04,500
for data science.

2081
01:57:04,500 --> 01:57:07,340
And if you go with projects like,

2082
01:57:07,340 --> 01:57:10,860
I don't know if you ever used it, but MyBinder, for example,

2083
01:57:10,860 --> 01:57:13,580
which is a sort of a Docker generating a Jupyter

2084
01:57:13,580 --> 01:57:16,500
server for you, it reads from the repository.

2085
01:57:16,500 --> 01:57:20,380
And if it finds a file which is called environment.yml,

2086
01:57:20,380 --> 01:57:22,420
it understands that second environment.

2087
01:57:22,420 --> 01:57:24,900
It sets up everything for you.

2088
01:57:24,900 --> 01:57:26,780
Otherwise, it goes for requirements.file.

2089
01:57:26,780 --> 01:57:28,900
If you couldn't find any of those,

2090
01:57:28,900 --> 01:57:30,380
it goes for default environment.

2091
01:57:30,380 --> 01:57:32,900
And if you have dependencies, it's not going to work.

2092
01:57:32,900 --> 01:57:35,100
OK?

2093
01:57:35,100 --> 01:57:38,260
But yeah, I should probably, I have no idea where that file is.

2094
01:57:41,180 --> 01:57:44,100
Is it here?

2095
01:57:44,100 --> 01:57:44,980
Yes, it's here.

2096
01:57:44,980 --> 01:57:53,340
So let's move this file into this one.

2097
01:57:53,340 --> 01:57:56,180
Let me cut environment to make sure it's the right one.

2098
01:57:56,180 --> 01:57:58,420
Yes.

2099
01:57:58,420 --> 01:58:04,860
So I git add everything, and I git commit minus m,

2100
01:58:04,860 --> 01:58:08,300
ready to pack.

2101
01:58:08,300 --> 01:58:09,260
OK?

2102
01:58:09,260 --> 01:58:10,460
Everything is my environment.

2103
01:58:10,460 --> 01:58:14,460
By the way, this is git ignore at its best.

2104
01:58:14,460 --> 01:58:20,820
As you can see here, we have PyTest cache.

2105
01:58:20,820 --> 01:58:24,020
But this is not part of the git commit,

2106
01:58:24,020 --> 01:58:28,420
likely, because that has been ignored by git ignore.

2107
01:58:28,420 --> 01:58:30,580
And this is the reason why you want to use templates,

2108
01:58:30,580 --> 01:58:32,620
because this is standard things you don't

2109
01:58:32,620 --> 01:58:35,980
want to have on your repository.

2110
01:58:35,980 --> 01:58:37,660
That's it, I guess.

2111
01:58:37,660 --> 01:58:38,580
We have to git push.

2112
01:58:41,460 --> 01:58:44,780
So you push on your repository now.

2113
01:58:44,780 --> 01:58:46,300
That has been done.

2114
01:58:46,300 --> 01:58:47,780
Go back here, refresh.

2115
01:58:50,820 --> 01:58:52,260
Wrong window.

2116
01:58:52,260 --> 01:58:55,060
We should refresh this one.

2117
01:58:55,060 --> 01:58:57,540
And there you go.

2118
01:58:57,540 --> 01:58:59,180
What would we have everything?

2119
01:58:59,180 --> 01:59:01,100
Nice.

2120
01:59:01,100 --> 01:59:05,820
So before actually doing the package,

2121
01:59:05,820 --> 01:59:07,940
we want to create a release.

2122
01:59:08,020 --> 01:59:10,700
And this release will be automatically

2123
01:59:10,700 --> 01:59:15,900
used by the graceful conda recipe generator.

2124
01:59:15,900 --> 01:59:18,260
So to do a release is actually pretty easy.

2125
01:59:18,260 --> 01:59:20,860
So you go and releases here, create a new release

2126
01:59:20,860 --> 01:59:22,540
of your software.

2127
01:59:22,540 --> 01:59:23,740
You want to use a tag.

2128
01:59:23,740 --> 01:59:26,860
And when you specify a tag, you want to use a version,

2129
01:59:26,860 --> 01:59:34,260
because this is what will be visualized directly into,

2130
01:59:34,260 --> 01:59:37,500
what did I say here to do?

2131
01:59:37,740 --> 01:59:40,700
I say this after telling you what graceful is.

2132
01:59:40,700 --> 01:59:43,060
So let me just not jump to conclusion.

2133
01:59:43,060 --> 01:59:48,300
Let me follow the same mind path I had.

2134
01:59:48,300 --> 01:59:52,980
Well, I don't know how many of you recognize this picture.

2135
01:59:52,980 --> 01:59:54,100
How many?

2136
01:59:54,100 --> 01:59:54,740
I love you guys.

2137
01:59:58,300 --> 02:00:04,060
Essentially, the reason why this is called graceful

2138
02:00:04,060 --> 02:00:06,140
is because it's an open source re-implementation

2139
02:00:06,140 --> 02:00:09,540
of a previous system, which was called Conda Skeleton.

2140
02:00:09,540 --> 02:00:11,220
And so they come up with graceful.

2141
02:00:11,220 --> 02:00:12,700
I think it was genius.

2142
02:00:12,700 --> 02:00:16,580
Anyway, graceful is an open source project

2143
02:00:16,580 --> 02:00:21,020
that you can use to automatically generate for you

2144
02:00:21,020 --> 02:00:25,260
a conda recipe, starting either for a GitHub repository, which

2145
02:00:25,260 --> 02:00:29,180
is hosting your project, and in particular, a package version,

2146
02:00:29,180 --> 02:00:33,740
a release of your project, or starting from a tarp archive

2147
02:00:33,740 --> 02:00:36,140
you can have of your local folder.

2148
02:00:36,140 --> 02:00:38,100
So we've been demonstrating, and this

2149
02:00:38,100 --> 02:00:40,860
is to answer a question I got in the very beginning.

2150
02:00:40,860 --> 02:00:43,100
I can't remember from whom.

2151
02:00:43,100 --> 02:00:46,700
Asking, we just need to have necessarily GitHub?

2152
02:00:46,700 --> 02:00:47,980
The answer was no.

2153
02:00:47,980 --> 02:00:51,260
In alternative, you can pack everything in a tar.gz file,

2154
02:00:51,260 --> 02:00:54,020
and you can use that as a reference for graceful.

2155
02:00:54,020 --> 02:00:56,380
I'm not going to do that, but that's for your information.

2156
02:00:56,380 --> 02:00:58,060
You can just use a local package instead

2157
02:00:58,060 --> 02:01:01,420
of using a URL from GitHub.

2158
02:01:01,420 --> 02:01:04,020
It's going to be the same thing.

2159
02:01:04,020 --> 02:01:12,860
Anyway, so before that, we have to have graceful

2160
02:01:12,860 --> 02:01:15,020
installed on our machine.

2161
02:01:15,020 --> 02:01:18,340
To do this, we just add graceful,

2162
02:01:18,340 --> 02:01:20,140
which lives in Conda Forge.

2163
02:01:20,140 --> 02:01:22,260
So this time we do have an extra dependency,

2164
02:01:22,260 --> 02:01:25,380
but it's not going to be a dependency for our package.

2165
02:01:25,380 --> 02:01:27,540
It's a dependency for our building system, which

2166
02:01:27,540 --> 02:01:28,780
is two different things.

2167
02:01:28,780 --> 02:01:30,820
But we're still installing everything

2168
02:01:30,820 --> 02:01:33,540
within the same package we don't care at this point.

2169
02:01:33,540 --> 02:01:36,020
So we go Conda install.

2170
02:01:36,020 --> 02:01:41,420
Sorry, let me just clear the thing so you can see on top.

2171
02:01:41,420 --> 02:01:43,380
Conda install minus C, Conda Forge.

2172
02:01:43,380 --> 02:01:47,140
So we're installing everything from Conda Forge, Graceful,

2173
02:01:47,140 --> 02:01:49,540
and send our disk specific version.

2174
02:01:49,540 --> 02:01:51,420
The reason why we're specifying also this

2175
02:01:51,420 --> 02:01:57,980
is because an incompatible version was installed.

2176
02:01:57,980 --> 02:02:00,780
So I just wanted to make sure that everything

2177
02:02:00,780 --> 02:02:02,660
is ready for us to work.

2178
02:02:02,660 --> 02:02:04,020
So we install Graceful first.

2179
02:02:08,100 --> 02:02:11,420
It takes, should be taking.

2180
02:02:11,420 --> 02:02:16,220
Yes, just in the meantime, I think I know what's going on.

2181
02:02:16,220 --> 02:02:19,500
What's going to happen is essentially now

2182
02:02:19,500 --> 02:02:22,900
making resolutions for the names and things.

2183
02:02:22,900 --> 02:02:25,540
And what this will require, since we're

2184
02:02:25,540 --> 02:02:28,940
switching to installing packages from Conda Forge,

2185
02:02:29,900 --> 02:02:34,060
will require to update some certificates package.

2186
02:02:34,060 --> 02:02:36,140
And this is the exact package containing

2187
02:02:36,140 --> 02:02:37,860
the checksums of all the packages

2188
02:02:37,860 --> 02:02:40,540
that you have in the channels, which will be referenced

2189
02:02:40,540 --> 02:02:43,820
when you have to check that you're installing actually

2190
02:02:43,820 --> 02:02:47,780
genuine package from there.

2191
02:02:47,780 --> 02:02:49,740
By the way, this is downloading everything.

2192
02:02:49,740 --> 02:02:51,940
That's why it's taking so long.

2193
02:02:51,940 --> 02:02:54,580
Because if you remember, I've done something

2194
02:02:54,580 --> 02:02:56,940
that wasn't actually in the path, which

2195
02:02:56,940 --> 02:03:00,900
was Conda clean my cache.

2196
02:03:00,900 --> 02:03:03,220
So it's actually downloading everything now.

2197
02:03:03,220 --> 02:03:05,660
And on our conference Wi-Fi, probably that

2198
02:03:05,660 --> 02:03:06,900
wasn't a good idea.

2199
02:03:06,900 --> 02:03:09,740
But fingers crossed, it will be working pretty soon.

2200
02:03:15,100 --> 02:03:19,060
Yes, so you're essentially seeing

2201
02:03:19,060 --> 02:03:21,900
the effect of cleaning the cache.

2202
02:03:21,900 --> 02:03:23,900
So you have to install everything from scratch.

2203
02:03:27,620 --> 02:03:31,060
OK, everything has been done.

2204
02:03:31,060 --> 02:03:31,780
Installing.

2205
02:03:35,700 --> 02:03:38,620
And that's it.

2206
02:03:38,620 --> 02:03:40,100
Yay.

2207
02:03:40,100 --> 02:03:43,380
So now we are creating the release for our software.

2208
02:03:43,380 --> 02:03:45,860
So I go back to where I was.

2209
02:03:45,860 --> 02:03:50,380
So I just go back again to show you what I've been doing.

2210
02:03:50,380 --> 02:03:54,100
I click on Create New Release after having pushed everything.

2211
02:03:54,100 --> 02:03:56,420
So just make sure that everything is on the repository

2212
02:03:56,420 --> 02:03:56,920
now.

2213
02:03:59,420 --> 02:04:02,100
You create a new release.

2214
02:04:02,100 --> 02:04:06,180
You create a new tag, which has the name of the version

2215
02:04:06,180 --> 02:04:09,100
you want, because this will be the version that Grayscale will

2216
02:04:09,100 --> 02:04:11,500
think your software will have.

2217
02:04:11,500 --> 02:04:15,500
Let's say, sorry, create a new tag.

2218
02:04:15,500 --> 02:04:20,220
Target main, so the main branch we're taking as reference.

2219
02:04:20,220 --> 02:04:24,420
DND roller, 0.0.1.

2220
02:04:24,420 --> 02:04:31,740
Description, DND, nice roller, the 0.0.1.

2221
02:04:31,740 --> 02:04:32,620
Nice.

2222
02:04:32,620 --> 02:04:35,260
We publish it, and that's it.

2223
02:04:35,260 --> 02:04:39,260
So the effect of doing this is GitHub is creating for us

2224
02:04:39,260 --> 02:04:41,660
these two archives.

2225
02:04:41,660 --> 02:04:44,900
And so these archives are exactly plus some metadata

2226
02:04:44,900 --> 02:04:49,340
here on a specific GitHub commit.

2227
02:04:49,340 --> 02:04:51,420
Checksum and versioning.

2228
02:04:51,420 --> 02:04:53,980
So at this point, what we want to do

2229
02:04:53,980 --> 02:04:58,380
is using Grayscale to generate a new recipe.

2230
02:05:01,220 --> 02:05:04,780
So we move away from the first thing

2231
02:05:04,780 --> 02:05:07,500
that the tutorial is telling you to do

2232
02:05:07,500 --> 02:05:11,380
is to move away from the root folder

2233
02:05:11,380 --> 02:05:16,180
because Grayscale will create a recipe that

2234
02:05:16,180 --> 02:05:18,700
is called Azure package that shouldn't

2235
02:05:18,700 --> 02:05:20,580
be living in the root folder of your project.

2236
02:05:20,580 --> 02:05:22,820
So we just have to get away from there.

2237
02:05:22,820 --> 02:05:24,780
And in particular, we're telling you

2238
02:05:24,780 --> 02:05:26,620
move away in the parent folder if you like,

2239
02:05:26,620 --> 02:05:30,140
and then create a new Grayscale folder.

2240
02:05:30,140 --> 02:05:31,740
It can be any folder you like.

2241
02:05:31,740 --> 02:05:34,500
It doesn't have to be Grayscale.

2242
02:05:34,500 --> 02:05:38,580
And we're moving into this folder as well.

2243
02:05:38,580 --> 02:05:41,580
So this is where we're living now.

2244
02:05:41,580 --> 02:05:44,700
Something, something, something slash Grayscale.

2245
02:05:44,700 --> 02:05:47,380
OK?

2246
02:05:47,380 --> 02:05:51,100
And now we create the recipe.

2247
02:05:51,100 --> 02:05:57,180
To do that, we just copy this one and then adjust it.

2248
02:05:57,180 --> 02:05:59,500
So this is going to be my repository.

2249
02:06:02,780 --> 02:06:09,820
Yes, so Grayscale, PyPy, and the URL of GitHub repository.

2250
02:06:09,820 --> 02:06:11,900
This is going on the GitHub repository,

2251
02:06:11,900 --> 02:06:14,620
checking the release, getting the latest one,

2252
02:06:14,620 --> 02:06:18,020
and generating with all the metadata and the source code

2253
02:06:18,020 --> 02:06:21,660
found in the archive a file which

2254
02:06:21,660 --> 02:06:24,780
will be named meta.yaml, which is going

2255
02:06:24,780 --> 02:06:30,140
to be the actual recipe for our Cunda project.

2256
02:06:33,380 --> 02:06:35,820
As you can see, it's downloading the dependency.

2257
02:06:35,820 --> 02:06:38,980
Tabulate has been found.

2258
02:06:38,980 --> 02:06:42,980
It's been reading the PyProject.toml.

2259
02:06:42,980 --> 02:06:44,540
Everything is fine.

2260
02:06:44,540 --> 02:06:46,540
NoMoji has a red missing dependency

2261
02:06:46,540 --> 02:06:49,340
because of this maintainer.

2262
02:06:49,340 --> 02:06:50,380
OK.

2263
02:06:50,380 --> 02:07:00,420
Something I want to try now is to see whether I could perhaps,

2264
02:07:00,420 --> 02:07:02,260
I don't know, let me check that.

2265
02:07:06,380 --> 02:07:10,220
The help here of Grayscale.

2266
02:07:10,220 --> 02:07:13,340
Grayscale essentially, as Mahe was telling you

2267
02:07:13,340 --> 02:07:15,860
in the beginning, is able to generate recipe either

2268
02:07:15,860 --> 02:07:18,220
for Python packages or R packages.

2269
02:07:18,220 --> 02:07:21,820
And so this is the meaning of passing PyPy in the beginning.

2270
02:07:21,820 --> 02:07:24,540
If you were going to create package for R,

2271
02:07:24,540 --> 02:07:27,340
you would have said crun, because that's

2272
02:07:27,340 --> 02:07:30,380
the reference package provider.

2273
02:07:30,380 --> 02:07:33,780
And that's the only options you have here on Grayscale.

2274
02:07:33,780 --> 02:07:35,820
So there is no way you can specify

2275
02:07:35,820 --> 02:07:37,300
at this point in Grayscale.

2276
02:07:37,300 --> 02:07:40,180
That was my guess, actually, but I just wanted to be sure.

2277
02:07:41,180 --> 02:07:44,140
Grayscale has generated a recipe for us.

2278
02:07:44,140 --> 02:07:47,140
So if we look at what's inside this folder,

2279
02:07:47,140 --> 02:07:50,220
there's a DND roller folder.

2280
02:07:50,220 --> 02:07:55,900
Within this folder, we have meta.tml, which is the recipe.

2281
02:07:55,900 --> 02:07:57,020
Let's have a look at this.

2282
02:08:02,500 --> 02:08:03,500
Nice.

2283
02:08:03,500 --> 02:08:08,620
So this is the actual recipe that CondaBuild

2284
02:08:08,620 --> 02:08:13,860
will read and use to install your package.

2285
02:08:13,860 --> 02:08:18,260
The reason why we're using Grayscale

2286
02:08:18,260 --> 02:08:21,700
is because we don't have to write this manually.

2287
02:08:21,700 --> 02:08:25,780
Otherwise, you're very welcome to write it manually.

2288
02:08:25,780 --> 02:08:28,340
Or similarly, you're very welcome to update it manually

2289
02:08:28,340 --> 02:08:33,060
if Grayscale has something missing into that.

2290
02:08:33,060 --> 02:08:38,220
So we might quickly understand the format here.

2291
02:08:39,100 --> 02:08:41,060
You're setting the name of the version of this package.

2292
02:08:41,060 --> 02:08:43,340
And so this variable will be used later on.

2293
02:08:43,340 --> 02:08:45,380
In particular, in the package section,

2294
02:08:45,380 --> 02:08:46,580
you have a name of the version.

2295
02:08:46,580 --> 02:08:48,060
Then you have a source.

2296
02:08:48,060 --> 02:08:52,900
And this source is pointing to a specific tag,

2297
02:08:52,900 --> 02:08:54,380
which is, by the way, the version.

2298
02:08:54,380 --> 02:08:58,780
That's why we call it the no.no.1 on GitHub

2299
02:08:58,780 --> 02:09:00,820
and with a specific checksum here.

2300
02:09:00,820 --> 02:09:03,540
So we're absolutely sure we're getting that one.

2301
02:09:03,540 --> 02:09:05,020
There's a section specifying

2302
02:09:05,020 --> 02:09:07,420
what are the instructions to build it.

2303
02:09:07,420 --> 02:09:08,260
In this particular case,

2304
02:09:08,260 --> 02:09:11,020
we have no specific architecture for a package.

2305
02:09:11,020 --> 02:09:12,220
So it's going to be no arc,

2306
02:09:12,220 --> 02:09:16,220
which means every single platform we're going to do.

2307
02:09:16,220 --> 02:09:18,420
The command to run to build is Python.

2308
02:09:18,420 --> 02:09:21,060
So the Python that you have in your environment,

2309
02:09:21,060 --> 02:09:23,740
minus m pip install dot,

2310
02:09:23,740 --> 02:09:25,740
which is the current folder, minus minus v,

2311
02:09:25,740 --> 02:09:28,540
to have some verbosity.

2312
02:09:28,540 --> 02:09:30,460
And then you have requirements.

2313
02:09:30,460 --> 02:09:36,100
So you have Python, setup tools, and pip.

2314
02:09:36,140 --> 02:09:40,740
And all the external dependencies like Noemoji and Tabulate.

2315
02:09:40,740 --> 02:09:42,300
And then you have tests as well.

2316
02:09:42,300 --> 02:09:44,820
And this test will be run and used

2317
02:09:44,820 --> 02:09:46,420
to make sure everything works.

2318
02:09:47,460 --> 02:09:50,620
Okay, so you have the import test in the nd roller.

2319
02:09:50,620 --> 02:09:55,540
You have the pip check test and the requires requirement test.

2320
02:09:55,540 --> 02:09:59,860
Metadata, the about section will be taken from this URL,

2321
02:09:59,860 --> 02:10:01,460
the URL, the license.

2322
02:10:01,460 --> 02:10:03,860
License file is here within the package.

2323
02:10:03,860 --> 02:10:08,500
And recipe maintainer is this one, this guy here,

2324
02:10:08,500 --> 02:10:13,500
because there's that dependency on the channel we had.

2325
02:10:15,340 --> 02:10:16,940
Nice.

2326
02:10:16,940 --> 02:10:19,740
So at this point, we have the recipe.

2327
02:10:19,740 --> 02:10:23,540
We just have to build the package using this recipe.

2328
02:10:24,740 --> 02:10:28,780
To do that, we can first of install conda build

2329
02:10:28,780 --> 02:10:32,980
in our own environment, because we need conda build.

2330
02:10:34,540 --> 02:10:35,860
Conda build.

2331
02:10:38,220 --> 02:10:39,780
Fingers crossed this will be quick.

2332
02:10:40,780 --> 02:10:42,580
Yes.

2333
02:10:42,580 --> 02:10:44,620
I need to download a bit of packages.

2334
02:10:47,500 --> 02:10:48,340
Okay.

2335
02:10:52,940 --> 02:10:54,060
It was quite quick.

2336
02:10:56,780 --> 02:10:58,420
There you go.

2337
02:10:58,420 --> 02:11:00,980
And now we can build our package.

2338
02:11:03,940 --> 02:11:08,940
In this case, we are trying to specify the channel we need

2339
02:11:09,380 --> 02:11:11,540
for the extra dependency, because we're building

2340
02:11:11,540 --> 02:11:13,580
this package with that channel dependency.

2341
02:11:18,140 --> 02:11:20,380
Pardon, I'm in the wrong folder.

2342
02:11:20,380 --> 02:11:22,220
I need to be in the grayscale folder,

2343
02:11:23,140 --> 02:11:25,500
because it was actually looking for a folder

2344
02:11:25,500 --> 02:11:27,460
named as the name of the package,

2345
02:11:27,460 --> 02:11:32,180
and that's why grayscale is calling that folder in that way.

2346
02:11:32,180 --> 02:11:35,700
So you have to be, let me clear this one.

2347
02:11:35,700 --> 02:11:39,740
You have to be in this, da da da da, grayscale folder,

2348
02:11:39,740 --> 02:11:44,740
and within this folder, you have the dnd roller package,

2349
02:11:45,260 --> 02:11:48,340
sorry, folder, containing the metadata,

2350
02:11:48,340 --> 02:11:51,100
pardon, meta.yml recipe.

2351
02:11:51,100 --> 02:11:54,660
So we do conda build again.

2352
02:11:54,660 --> 02:11:56,060
This time should be working.

2353
02:12:03,180 --> 02:12:06,500
I think you do, but I'm not entirely sure,

2354
02:12:06,500 --> 02:12:08,220
to be totally fair.

2355
02:12:09,900 --> 02:12:13,260
If you do, you shouldn't be doing any harm, but...

2356
02:12:17,180 --> 02:12:20,460
When I tested this, the YAML wasn't there,

2357
02:12:20,460 --> 02:12:21,500
so I'm not sure.

2358
02:12:25,020 --> 02:12:28,180
It might be not necessary now, but I'm not sure.

2359
02:12:28,580 --> 02:12:32,580
So what is doing that right now is actually building a package.

2360
02:12:32,580 --> 02:12:35,300
So it's gonna be local,

2361
02:12:35,300 --> 02:12:38,780
and it will be telling you where that package lives in a second.

2362
02:12:42,020 --> 02:12:43,780
As soon as this is done.

2363
02:12:43,780 --> 02:12:46,380
But essentially, it's telling you already now here.

2364
02:12:46,380 --> 02:12:49,540
So, okay, let it finish.

2365
02:12:49,540 --> 02:12:50,380
Nice.

2366
02:12:51,580 --> 02:12:52,420
Successfully installed.

2367
02:12:52,420 --> 02:12:53,660
Now it's running testing.

2368
02:12:54,820 --> 02:12:56,260
Make sure that everything is done.

2369
02:12:57,140 --> 02:12:58,860
Make sure that everything is done.

2370
02:13:03,260 --> 02:13:04,700
So the package has been built.

2371
02:13:04,700 --> 02:13:05,940
Test is being run now.

2372
02:13:12,860 --> 02:13:16,740
Import check, paper check, no broken requirements found.

2373
02:13:16,740 --> 02:13:17,580
That was good.

2374
02:13:18,580 --> 02:13:19,580
We have the package.

2375
02:13:19,580 --> 02:13:20,420
There we go.

2376
02:13:20,420 --> 02:13:21,940
We have the package done.

2377
02:13:21,940 --> 02:13:25,620
And the package is actually living in this folder.

2378
02:13:25,660 --> 02:13:29,980
So yadadada slash minikonda, whatever,

2379
02:13:29,980 --> 02:13:33,060
slash konda dash BLD.

2380
02:13:33,060 --> 02:13:35,580
It should be similar to on your end.

2381
02:13:35,580 --> 02:13:39,020
And within that, there's a subfolder,

2382
02:13:39,020 --> 02:13:41,420
depending on the architecture you were building for.

2383
02:13:41,420 --> 02:13:42,980
In this case, we have no arc.

2384
02:13:42,980 --> 02:13:46,380
And then you have a tar.bz2 file,

2385
02:13:46,380 --> 02:13:48,620
and that's the package we've just built

2386
02:13:48,620 --> 02:13:50,860
from using konda build.

2387
02:13:50,860 --> 02:13:53,020
This is a local package,

2388
02:13:53,020 --> 02:13:57,580
and if you scroll down there, it tells you,

2389
02:13:57,580 --> 02:13:59,780
by the way, to have konda build upload

2390
02:13:59,780 --> 02:14:02,060
to anaconda.org automatically,

2391
02:14:02,060 --> 02:14:06,940
use konda config mother-of-man set anaconda upload, yes.

2392
02:14:06,940 --> 02:14:11,620
Or you just do anaconda upload and the package that you want.

2393
02:14:11,620 --> 02:14:12,580
Okay?

2394
02:14:12,580 --> 02:14:17,580
So if I now do this, and you can do that if you like,

2395
02:14:19,060 --> 02:14:21,300
on your end, so I copy this path,

2396
02:14:23,020 --> 02:14:25,220
I do anaconda upload,

2397
02:14:26,340 --> 02:14:29,020
entrusting myself remembering the password,

2398
02:14:29,020 --> 02:14:32,100
which might be really not the case.

2399
02:14:33,300 --> 02:14:34,580
So this is what it's doing.

2400
02:14:34,580 --> 02:14:36,580
So I'm actually trying to upload.

2401
02:14:37,820 --> 02:14:38,940
I'm actually not gonna do that

2402
02:14:38,940 --> 02:14:41,340
because I'm pretty sure I don't remember the password.

2403
02:14:45,020 --> 02:14:46,260
I probably do.

2404
02:14:46,260 --> 02:14:47,700
No, that's bye-bye.

2405
02:14:47,700 --> 02:14:48,820
No, I don't remember the password.

2406
02:14:48,820 --> 02:14:49,660
That's fine.

2407
02:14:50,580 --> 02:14:52,780
Anyway, this is the command you want to run

2408
02:14:52,780 --> 02:14:56,300
to upload on your own channel, the package.

2409
02:14:56,300 --> 02:14:58,460
So if I do that, I will be uploading that

2410
02:14:58,460 --> 02:15:00,420
on my Ledium module channel as well.

2411
02:15:00,420 --> 02:15:02,940
And so there will be a DND roller packet there

2412
02:15:02,940 --> 02:15:04,260
that you can install from.

2413
02:15:06,260 --> 02:15:09,180
If you want to do that live right now,

2414
02:15:09,180 --> 02:15:10,580
you're very welcome to do so.

2415
02:15:13,980 --> 02:15:15,860
So if everything goes well,

2416
02:15:15,860 --> 02:15:20,860
a DND roller dot tar dot BZ, actually BZ2, not GZ,

2417
02:15:23,180 --> 02:15:25,860
GZ here, should be created into

2418
02:15:25,860 --> 02:15:29,660
conda prefix slash conda build, no arc, blah blah blah.

2419
02:15:29,660 --> 02:15:31,220
And this is the Windows version.

2420
02:15:32,180 --> 02:15:37,180
And now I think it's time for Dave to get the stage

2421
02:15:37,420 --> 02:15:40,180
and telling you a little bit more about CondaForge.

2422
02:15:40,180 --> 02:15:41,860
In the meantime, do you have any question

2423
02:15:41,860 --> 02:15:44,260
as soon as Dave is getting ready for his part?

2424
02:15:50,540 --> 02:15:51,860
Yes, please.

2425
02:15:51,940 --> 02:15:53,460
We have two.

2426
02:15:53,460 --> 02:15:54,380
Can you go, please?

2427
02:16:07,300 --> 02:16:08,260
That's a very good question.

2428
02:16:08,260 --> 02:16:13,060
So the conda environment is a Python virtual environment,

2429
02:16:13,060 --> 02:16:15,260
meaning it's a collection of packages

2430
02:16:15,260 --> 02:16:18,500
living in a sandbox together.

2431
02:16:18,500 --> 02:16:21,060
I'm sorry if I'm messing the setup up.

2432
02:16:21,060 --> 02:16:23,980
The conda package is actually a single package

2433
02:16:23,980 --> 02:16:27,220
that you can have within a virtual environment.

2434
02:16:27,220 --> 02:16:29,780
Virtual environment could be conda environment

2435
02:16:29,780 --> 02:16:32,300
if you're using conda to prepare everything,

2436
02:16:32,300 --> 02:16:36,980
or they can be virtual M virtual environments,

2437
02:16:36,980 --> 02:16:39,780
pyM virtual environments, we have all the alternatives.

2438
02:16:39,780 --> 02:16:42,020
We've been seeing conda virtual environments.

2439
02:16:46,180 --> 02:16:49,220
That's a conda package, the whole thing.

2440
02:16:49,220 --> 02:16:52,820
But what I put on GitHub as environment.yml

2441
02:16:52,820 --> 02:16:57,820
was the file you can use to recreate the same environment,

2442
02:16:58,140 --> 02:17:01,860
sorry, same conda environment I was having

2443
02:17:01,860 --> 02:17:04,740
while I was developing the project.

2444
02:17:04,740 --> 02:17:07,500
Meaning, if you're willing to contribute

2445
02:17:07,500 --> 02:17:10,140
to this fantastic DND roller project,

2446
02:17:10,140 --> 02:17:13,380
you might want to set up my own environment

2447
02:17:13,380 --> 02:17:17,020
so that you're absolutely sure that you're working

2448
02:17:17,020 --> 02:17:19,020
with the same version of packages I was working

2449
02:17:19,860 --> 02:17:22,220
to make everything working on the project.

2450
02:17:22,220 --> 02:17:24,100
And at the same time, you're not polluting

2451
02:17:24,100 --> 02:17:26,300
any thing you have on your computer

2452
02:17:26,300 --> 02:17:27,780
because you're just making everything

2453
02:17:27,780 --> 02:17:29,780
living in their own sandbox,

2454
02:17:29,780 --> 02:17:32,780
and that's just for the purpose of working with DND roller.

2455
02:17:34,100 --> 02:17:35,260
No worries, thank you.

2456
02:17:35,260 --> 02:17:36,900
We have another one.

2457
02:17:42,740 --> 02:17:43,580
Pardon?

2458
02:17:46,420 --> 02:17:48,500
Yes, astu, yeah.

2459
02:17:48,500 --> 02:17:51,340
I think it must be public because otherwise

2460
02:17:51,340 --> 02:17:52,820
I don't think there is any way for you

2461
02:17:52,820 --> 02:17:54,740
to provide credentials there.

2462
02:17:54,740 --> 02:17:56,540
At least to the best of my knowledge.

2463
02:17:59,060 --> 02:18:03,100
But exactly, if you don't want to have that at all,

2464
02:18:03,100 --> 02:18:05,540
you just bypass GitHub completely

2465
02:18:05,540 --> 02:18:09,820
and you pack your project as a tar.gz file

2466
02:18:09,820 --> 02:18:13,540
and you do conduct, if we do grayscale, pi, pi,

2467
02:18:14,340 --> 02:18:17,500
your package.tar.gz, same thing.

2468
02:18:17,500 --> 02:18:19,180
Essentially, the GitHub bits is just

2469
02:18:19,180 --> 02:18:21,420
to automatically download these packages.

2470
02:18:21,420 --> 02:18:23,180
Oh, sorry, you're not seeing that anymore,

2471
02:18:23,180 --> 02:18:24,860
but it's just to download the packages

2472
02:18:24,860 --> 02:18:26,500
from GitHub automatically.

2473
02:18:26,500 --> 02:18:27,340
That's it.

2474
02:18:47,500 --> 02:18:48,340
Yes.

2475
02:19:14,700 --> 02:19:15,540
That's a good question.

2476
02:19:15,580 --> 02:19:18,300
To my experience, no.

2477
02:19:18,300 --> 02:19:21,060
Well, yes, but the location of this environment

2478
02:19:21,060 --> 02:19:25,820
doesn't live within the source code,

2479
02:19:25,820 --> 02:19:28,900
unless you really want to, because you can do that.

2480
02:19:28,900 --> 02:19:31,420
You can specify the path of your conda environment.

2481
02:19:31,420 --> 02:19:35,540
So the default one is conda prefix slash ems,

2482
02:19:35,540 --> 02:19:37,060
and they all live there.

2483
02:19:37,060 --> 02:19:39,220
So in fact, if you, I'm not showing,

2484
02:19:39,220 --> 02:19:41,700
but if you do conda info management as ems,

2485
02:19:41,700 --> 02:19:44,260
you will see that the prefix of everything

2486
02:19:44,260 --> 02:19:45,340
is always the same.

2487
02:19:46,140 --> 02:19:48,380
It's always conda prefix slash ems slash whatever.

2488
02:19:58,380 --> 02:19:59,220
Yes.

2489
02:20:08,100 --> 02:20:10,660
To my experience, that's the case, yes, yes.

2490
02:20:11,660 --> 02:20:13,540
I just want to tell you that something

2491
02:20:13,540 --> 02:20:17,580
that we've been working on, and that would be game changer,

2492
02:20:17,580 --> 02:20:20,980
is we'll be working that for the Anaconda notebook

2493
02:20:20,980 --> 02:20:22,260
we've been having.

2494
02:20:22,260 --> 02:20:23,100
I don't know if you know that,

2495
02:20:23,100 --> 02:20:27,580
but Anaconda has a notebook online service you can use.

2496
02:20:27,580 --> 02:20:32,580
We've been working on, it's still ongoing,

2497
02:20:32,580 --> 02:20:34,900
but we've been working on having dependencies

2498
02:20:34,900 --> 02:20:37,820
within environments, so that you can have

2499
02:20:37,820 --> 02:20:40,420
child environments from the parent environments,

2500
02:20:40,420 --> 02:20:42,940
which means that some packages may be reused

2501
02:20:42,940 --> 02:20:45,540
from other environments, so you don't have to install them.

2502
02:20:45,540 --> 02:20:47,740
And the reason why we're doing this is to save space,

2503
02:20:47,740 --> 02:20:51,140
because as you've seen, when you download lots of packages,

2504
02:20:51,140 --> 02:20:53,340
it's a good bit that you have isolations,

2505
02:20:53,340 --> 02:20:55,900
and so you have your own version with the same thing,

2506
02:20:55,900 --> 02:20:58,660
but when the versions are exactly the same,

2507
02:20:58,660 --> 02:21:01,100
you're not deloaning the packages multiple times,

2508
02:21:01,100 --> 02:21:04,460
but you're having Python packages replicated,

2509
02:21:04,460 --> 02:21:07,140
the same Python packages replicated multiple times,

2510
02:21:07,140 --> 02:21:09,580
and when you are limited in space,

2511
02:21:09,580 --> 02:21:11,980
in cloud storage space, for example,

2512
02:21:11,980 --> 02:21:12,860
you don't want to do that.

2513
02:21:12,860 --> 02:21:15,780
And so we're trying to see if there's any way to do that.

2514
02:21:18,940 --> 02:21:20,100
Can we proceed?

2515
02:21:20,100 --> 02:21:22,500
I think I've told you everything I know.

2516
02:21:22,500 --> 02:21:24,100
I don't know any more than that.

2517
02:21:24,100 --> 02:21:25,100
That's true.

2518
02:21:27,580 --> 02:21:28,340
Thank you.

2519
02:21:28,340 --> 02:21:31,340
Stephen, I'm going to be using this mic, so.

2520
02:21:31,340 --> 02:21:33,220
OK.

2521
02:21:33,220 --> 02:21:37,660
So we have 24 minutes left, OK?

2522
02:21:37,660 --> 02:21:39,340
And I want to discuss a couple things,

2523
02:21:39,340 --> 02:21:41,060
and since we have 24 minutes left,

2524
02:21:41,060 --> 02:21:43,700
I'm going to discuss them in a particular way.

2525
02:21:43,700 --> 02:21:47,060
First, I'm going to talk about how you can publish your package

2526
02:21:47,060 --> 02:21:51,180
now that you have it created, kind of compatible package.

2527
02:21:51,180 --> 02:21:54,220
And then secondly, I'm going to talk about the Conda ecosystem

2528
02:21:54,220 --> 02:21:55,780
and community, OK?

2529
02:21:55,780 --> 02:21:58,740
And then if we have time, we'll throw it open to questions

2530
02:21:58,740 --> 02:21:59,540
and answers.

2531
02:21:59,540 --> 02:22:01,220
Hey, I'm live.

2532
02:22:01,220 --> 02:22:02,660
We also have several other people

2533
02:22:02,660 --> 02:22:06,380
in the room who are savvy on Conda, so.

2534
02:22:06,380 --> 02:22:08,620
OK, so if you look at the HackMD,

2535
02:22:08,620 --> 02:22:10,020
there are two sections at the end.

2536
02:22:10,020 --> 02:22:13,580
One is submitting to CondaForge, time allowing,

2537
02:22:13,580 --> 02:22:19,380
and the other is publishing in your own channel, time allowing.

2538
02:22:19,380 --> 02:22:20,100
OK.

2539
02:22:20,100 --> 02:22:23,300
Now, Valerio talked about this a little bit, the second option

2540
02:22:23,300 --> 02:22:25,220
here.

2541
02:22:25,220 --> 02:22:29,540
Both of these are slightly different from what

2542
02:22:29,540 --> 02:22:30,540
we've covered before.

2543
02:22:30,540 --> 02:22:34,140
So the tutorial above this covers a lot of things

2544
02:22:34,140 --> 02:22:36,900
that were out there on the net, but not in a necessarily

2545
02:22:36,900 --> 02:22:38,900
coherent form.

2546
02:22:39,100 --> 02:22:40,740
This, excuse me, these two sections

2547
02:22:40,740 --> 02:22:42,620
are based on documentation that's out there

2548
02:22:42,620 --> 02:22:46,060
that's in a coherent form, and it's pretty good actually.

2549
02:22:46,060 --> 02:22:50,700
So today, I'm not going to step you through these hands on,

2550
02:22:50,700 --> 02:22:54,460
because the documentation that's out there is pretty good, OK?

2551
02:22:54,460 --> 02:22:56,100
I do recommend you take a look at this.

2552
02:22:56,100 --> 02:22:59,140
I've added some comments to the tutorial,

2553
02:22:59,140 --> 02:23:02,260
but yes, we're not going to do a step by step.

2554
02:23:02,260 --> 02:23:05,740
But I'm going to talk about it at a high level.

2555
02:23:05,740 --> 02:23:08,940
Anybody objecting?

2556
02:23:08,940 --> 02:23:10,220
OK, you people have the power.

2557
02:23:10,220 --> 02:23:11,220
Remember that.

2558
02:23:11,220 --> 02:23:12,140
OK.

2559
02:23:12,140 --> 02:23:12,900
OK.

2560
02:23:12,900 --> 02:23:16,660
So yeah, CondaForge is step by step instruction.

2561
02:23:16,660 --> 02:23:22,700
So CondaForge is the largest public channel out there.

2562
02:23:22,700 --> 02:23:25,780
It has over 20,000 packages on it.

2563
02:23:25,780 --> 02:23:29,540
It has over 3 billion, that's with a B,

2564
02:23:29,540 --> 02:23:32,300
package downloads per year.

2565
02:23:32,300 --> 02:23:32,820
OK.

2566
02:23:32,820 --> 02:23:37,180
CondaForge is widely used and wildly popular.

2567
02:23:37,180 --> 02:23:39,900
So if your goal is to have your package become

2568
02:23:39,900 --> 02:23:43,300
visible and easily installable to the world,

2569
02:23:43,300 --> 02:23:46,460
you want to publish on CondaForge.

2570
02:23:46,460 --> 02:23:48,900
And there's a process from their website, again,

2571
02:23:48,900 --> 02:23:50,580
fairly well described.

2572
02:23:50,580 --> 02:23:53,180
And here's how you would use it for our particular example

2573
02:23:53,180 --> 02:23:53,680
today.

2574
02:23:56,220 --> 02:24:00,540
And you basically make a copy of the Stage Recipes repo.

2575
02:24:00,540 --> 02:24:05,940
You then add your recipe, which we just created.

2576
02:24:05,940 --> 02:24:08,980
Excuse me, then add that to your copy of that repo.

2577
02:24:08,980 --> 02:24:12,180
And then you submit a pull request.

2578
02:24:12,180 --> 02:24:15,620
And a couple other things.

2579
02:24:15,620 --> 02:24:18,420
You probably want to change your GitHub ID there if you haven't.

2580
02:24:18,420 --> 02:24:19,660
OK, great.

2581
02:24:19,660 --> 02:24:22,580
And thanks to the magic of Grayskull,

2582
02:24:22,580 --> 02:24:24,860
we already have a SHA-256.

2583
02:24:24,860 --> 02:24:26,380
And thanks to the magic of Valerio,

2584
02:24:26,380 --> 02:24:28,180
we already have test cases.

2585
02:24:28,180 --> 02:24:29,700
OK.

2586
02:24:29,700 --> 02:24:33,100
So they do have standards at CondaForge.

2587
02:24:33,100 --> 02:24:35,740
And they want you to conform to them.

2588
02:24:35,740 --> 02:24:38,620
So it then has a checklist after you've

2589
02:24:38,620 --> 02:24:40,260
done their step-by-step instructions.

2590
02:24:40,260 --> 02:24:43,100
It tells you, OK, what do we need here?

2591
02:24:43,100 --> 02:24:45,700
And it says, OK, make sure you've got a license valid.

2592
02:24:45,700 --> 02:24:47,140
OK, I looked at the SPDX.

2593
02:24:47,140 --> 02:24:50,140
We're using MIT, which is actually in that list.

2594
02:24:50,140 --> 02:24:51,460
So we're good there.

2595
02:24:51,460 --> 02:24:54,220
Ensure that you have included a license file in your license.

2596
02:24:54,220 --> 02:24:56,620
If your license requires one, most do.

2597
02:24:56,620 --> 02:24:58,220
I have no idea.

2598
02:24:58,220 --> 02:24:58,720
OK.

2599
02:24:58,720 --> 02:25:03,920
If MIT requires us to recopy the license at the top level.

2600
02:25:03,920 --> 02:25:07,120
So I went looking in CondaForge, and I found this recent thing

2601
02:25:07,120 --> 02:25:08,440
that was merged.

2602
02:25:08,440 --> 02:25:10,800
And it was an MIT license, and it didn't

2603
02:25:10,800 --> 02:25:12,120
recreate the license file.

2604
02:25:12,120 --> 02:25:14,760
So you don't have to if it's an MIT license.

2605
02:25:14,760 --> 02:25:17,000
But I don't know where to find this information.

2606
02:25:17,000 --> 02:25:18,600
I just want to be clear on that.

2607
02:25:18,600 --> 02:25:21,520
Maybe others in the room do.

2608
02:25:21,520 --> 02:25:24,360
It's about having to duplicate your license, which sounds bad.

2609
02:25:24,360 --> 02:25:27,880
Because as Valerio mentioned, duplicating things

2610
02:25:27,880 --> 02:25:30,640
is not how you want to do it.

2611
02:25:30,640 --> 02:25:31,400
OK.

2612
02:25:31,400 --> 02:25:32,880
A bunch of things are already done,

2613
02:25:32,880 --> 02:25:35,760
because we use Grayskull.

2614
02:25:35,760 --> 02:25:37,280
And we're good.

2615
02:25:37,280 --> 02:25:38,720
OK, and then you commit.

2616
02:25:38,720 --> 02:25:41,720
You push, and you file a request.

2617
02:25:41,720 --> 02:25:43,680
When you submit the pull request,

2618
02:25:43,680 --> 02:25:46,640
because you have forked this from CondaForge,

2619
02:25:46,640 --> 02:25:49,840
you're submitting a pull request to the Stage Recipes repo.

2620
02:25:49,840 --> 02:25:54,120
There is a long template here about what it involves.

2621
02:25:54,120 --> 02:25:57,520
And the top part is about notifying the Python team

2622
02:25:57,520 --> 02:26:01,880
for us, that hey, can you take a look at this?

2623
02:26:01,880 --> 02:26:03,920
And there are directions on how to do that.

2624
02:26:03,920 --> 02:26:07,320
It's a little bit complicated because of how GitHub works.

2625
02:26:07,320 --> 02:26:09,480
So if this is your first submission,

2626
02:26:09,480 --> 02:26:10,640
you have to do one thing.

2627
02:26:10,640 --> 02:26:12,280
Whereas if it's your second submission,

2628
02:26:12,280 --> 02:26:13,160
you do a second thing.

2629
02:26:13,160 --> 02:26:15,480
It's much easier.

2630
02:26:15,480 --> 02:26:17,840
We apologize for that.

2631
02:26:17,840 --> 02:26:19,360
And then there's a checklist.

2632
02:26:19,360 --> 02:26:20,720
And you want to walk through this checklist

2633
02:26:20,720 --> 02:26:23,440
and make sure, yeah, OK, this is all good.

2634
02:26:23,440 --> 02:26:27,880
No, we're not including any static libraries, for instance.

2635
02:26:27,880 --> 02:26:28,920
All sorts of things.

2636
02:26:28,920 --> 02:26:31,240
So you want to actually check these things,

2637
02:26:31,240 --> 02:26:32,520
x them off as you go.

2638
02:26:32,520 --> 02:26:35,160
And then you want to create pull requests.

2639
02:26:35,160 --> 02:26:38,000
So you're going to submit it.

2640
02:26:38,000 --> 02:26:39,440
So you've got your package.

2641
02:26:39,440 --> 02:26:43,800
You put it into your copy of Stage Recipes.

2642
02:26:43,800 --> 02:26:45,480
You then submitted a pull request

2643
02:26:45,480 --> 02:26:48,240
to the CondaForge organization.

2644
02:26:48,240 --> 02:26:52,000
Now, CondaForge is an entirely voluntary organization.

2645
02:26:52,040 --> 02:26:57,720
And they are busy because CondaForge is the place to be.

2646
02:26:57,720 --> 02:27:02,040
So you, as a package submitter, you want it right now

2647
02:27:02,040 --> 02:27:05,040
because you just did this really cool thing about rolling D&D

2648
02:27:05,040 --> 02:27:05,560
dice.

2649
02:27:05,560 --> 02:27:08,600
You want it out there for the world to see.

2650
02:27:08,600 --> 02:27:11,360
But CondaForge is swimming in requests.

2651
02:27:11,360 --> 02:27:13,640
And so it's going to take them a while.

2652
02:27:13,640 --> 02:27:16,720
And so you now enter this dance where you think, OK,

2653
02:27:16,720 --> 02:27:19,600
have I waited long enough to ping them again?

2654
02:27:19,600 --> 02:27:21,680
Because sometimes you do have to ping them again.

2655
02:27:21,680 --> 02:27:24,920
Sometimes they don't get to it unless you ping them again.

2656
02:27:24,920 --> 02:27:27,920
And so my personal recommendation is wait a week.

2657
02:27:27,920 --> 02:27:29,080
Try and wait seven days.

2658
02:27:29,080 --> 02:27:30,680
If you haven't got stuff in seven days,

2659
02:27:30,680 --> 02:27:32,480
you can ping them in GitHub.

2660
02:27:32,480 --> 02:27:35,120
You can also ping them on their Matrix channel and say,

2661
02:27:35,120 --> 02:27:36,960
hey, I submitted this a week ago.

2662
02:27:36,960 --> 02:27:38,800
Can somebody look at it?

2663
02:27:38,800 --> 02:27:41,880
Do your best to be as polite as possible.

2664
02:27:41,880 --> 02:27:43,480
Absolutely as polite as possible.

2665
02:27:43,480 --> 02:27:46,040
Again, these are all volunteers.

2666
02:27:46,040 --> 02:27:49,360
They do this because they want to help the community actually

2667
02:27:49,360 --> 02:27:52,520
do stuff and share stuff.

2668
02:27:52,520 --> 02:27:56,520
So that's my advice for CondaForge.

2669
02:27:56,520 --> 02:27:59,400
Yeah, and Valerio mentioned some of this.

2670
02:27:59,400 --> 02:28:01,320
Here's what happens once it actually

2671
02:28:01,320 --> 02:28:05,120
gets published in CondaForge.

2672
02:28:05,120 --> 02:28:07,040
Yeah, and so they'll use an internal tool

2673
02:28:07,040 --> 02:28:08,840
called CondaSmithy.

2674
02:28:08,840 --> 02:28:10,720
And that's that.

2675
02:28:10,720 --> 02:28:15,200
OK, any questions about publishing in CondaForge?

2676
02:28:15,200 --> 02:28:16,680
Yes.

2677
02:28:16,680 --> 02:28:20,160
You said there's a schedule that you kind of have to meet.

2678
02:28:20,160 --> 02:28:22,960
What would be the thing that would be difficult

2679
02:28:22,960 --> 02:28:24,960
if you wanted to have a license?

2680
02:28:24,960 --> 02:28:27,240
I mean, sure, the testing is not that hard.

2681
02:28:27,240 --> 02:28:28,000
Yes.

2682
02:28:28,000 --> 02:28:30,800
Yeah, so people will often submit things without a license.

2683
02:28:30,800 --> 02:28:32,880
That's not difficult. It's just tedious.

2684
02:28:32,880 --> 02:28:35,480
Testing, I don't know if testing counts as difficult,

2685
02:28:35,480 --> 02:28:36,520
but it certainly is tedious.

2686
02:28:39,560 --> 02:28:40,080
Let's see.

2687
02:28:40,080 --> 02:28:41,360
I don't know.

2688
02:28:41,360 --> 02:28:43,920
The CondaForge.

2689
02:28:43,920 --> 02:28:45,720
So does anybody in the back row have an idea

2690
02:28:45,720 --> 02:28:49,680
on what CondaForge usually throws back on feedback?

2691
02:28:49,680 --> 02:28:51,840
Because they often do.

2692
02:28:51,840 --> 02:28:53,440
Anybody know?

2693
02:28:53,440 --> 02:28:54,720
None of us work on CondaForge.

2694
02:28:54,720 --> 02:28:57,680
So we're not the volunteers helping the world.

2695
02:28:57,680 --> 02:28:58,440
OK, yes.

2696
02:28:58,480 --> 02:29:22,480
Do No In the World and New York sugar harvest

2697
02:29:22,480 --> 02:29:36,660
Okay. Thank you. I'm sorry I can't answer. Thank you for answering. Okay. We're good.

2698
02:29:36,660 --> 02:29:43,240
Thank you, Stephen. Yeah. I'll try and repeat the question. Okay. So the second thing is

2699
02:29:43,240 --> 02:29:48,860
publishing in your own channel. So if your goal is not to make it visible to the world,

2700
02:29:48,860 --> 02:29:53,260
if your goal is to make it visible to a certain number of people and maybe make it public

2701
02:29:53,260 --> 02:29:58,740
and maybe make it private, okay, but you want your coworkers in Australia to be able to

2702
02:29:58,740 --> 02:30:06,380
use it, you can create your own Conda channel on anaconda.org and it's dead easy. Okay.

2703
02:30:06,380 --> 02:30:10,900
I did this last night. I've done it twice now. I have two channels. I don't know. I

2704
02:30:10,900 --> 02:30:15,660
was going to do it today and I have three. It's really easy to do. And then you have

2705
02:30:16,340 --> 02:30:21,900
to install the Anaconda client. Yeah, the Anaconda client and then you just push it.

2706
02:30:21,900 --> 02:30:26,260
And then lo and behold you have a channel and people can see it and they can use it.

2707
02:30:26,260 --> 02:30:33,260
It's minus C, you know, Larry Omagio. Sorry for your last name. I pronounced it wrong.

2708
02:30:33,260 --> 02:30:37,900
Okay. Yeah. So this is really easy. And once you have created the channel, you can say,

2709
02:30:37,900 --> 02:30:42,100
I want this to be private, which means it's restricted use. Or you can say it's public,

2710
02:30:42,100 --> 02:30:46,540
which is the default. Okay. There are lots of other channels out there. CondaForge again

2711
02:30:46,540 --> 02:30:51,260
is the big one. There's also Bioconda if you work in life sciences. Bioconda has about

2712
02:30:51,260 --> 02:30:57,140
8,000 packages on it. NVIDIA has its own. I think IBM has its own. I think Intel has

2713
02:30:57,140 --> 02:31:06,140
its own. There's a bunch of channels out there. So, okay. Okay. Good. So I'm going to stop

2714
02:31:06,220 --> 02:31:11,740
there and I'm going to go to the presentation. You're not supposed to see the thanks yet.

2715
02:31:11,740 --> 02:31:18,740
I'm going to ignore that. Nobody saw that. Okay. Good. And let's present. Let's see

2716
02:31:18,740 --> 02:31:27,740
what happens here. Okay. No smoke. Good. Okay. So my role in Conda is I'm the community manager.

2717
02:31:27,740 --> 02:31:33,740
Although you don't manage the Conda community. There's 35 million people. Okay. 35 million

2718
02:31:33,740 --> 02:31:37,740
users. So keep that in mind when you publish to CondaForge. You're potentially reaching

2719
02:31:37,740 --> 02:31:44,740
35 million people. You're making it easy for them to install stuff. Okay. So I'm the

2720
02:31:45,100 --> 02:31:50,180
community manager and in that role I've taken on a bunch of stuff. A bunch of stuff happened

2721
02:31:50,180 --> 02:31:57,180
before I started. Okay. This is an indication of what's going on in Conda. Let's see in

2722
02:31:57,260 --> 02:32:03,780
the big picture. Okay. So in 2021, so I've only been there 16 months. So keep that in

2723
02:32:03,780 --> 02:32:10,780
mind. But in 2021, the Conda, the core Conda engine became open source in practice as well

2724
02:32:10,780 --> 02:32:16,460
as in name. So it's been open source in name the whole time. It's 10 years old, whole time.

2725
02:32:16,460 --> 02:32:21,140
But say four or five years ago if you submitted a poll request, we might act on it, we might

2726
02:32:21,140 --> 02:32:27,140
not. And now if you submit a poll request, we know it's there and we are acting on it.

2727
02:32:27,140 --> 02:32:32,860
Okay. And that changed as of two years ago. Second thing that happened, code of conduct

2728
02:32:32,860 --> 02:32:38,180
last year was formalized. This is not, yeah, so this may not seem a big thing, but it's

2729
02:32:38,180 --> 02:32:44,100
actually huge. You can't have a functioning community without a prominent code of conduct

2730
02:32:44,100 --> 02:32:49,060
and one that gets enforced. And this sounds really weird, but we were really proud we

2731
02:32:49,060 --> 02:32:54,260
got our first case last year. Why are we proud? It means people care. Okay. If you're in a

2732
02:32:54,260 --> 02:32:57,740
community that doesn't care, you can have all the code of conduct stuff you want. It

2733
02:32:58,620 --> 02:33:03,260
doesn't help. But in Conda, people actually care. So we are trying to establish this open,

2734
02:33:03,260 --> 02:33:11,660
friendly, welcoming community. Okay. In 2022, the governance was changed and it now encourages,

2735
02:33:11,660 --> 02:33:16,300
well, it always encouraged participation from individuals, but it now encourages community

2736
02:33:16,300 --> 02:33:21,500
and corporate contributions. Okay. So a thing with open source is how do you get companies

2737
02:33:22,100 --> 02:33:29,100
to contribute without just taking? Okay. And so we have re-implemented our governance policies

2738
02:33:30,540 --> 02:33:37,540
so that we actually encourage corporate community contributions. So you have a voice at the

2739
02:33:37,540 --> 02:33:44,540
table. Okay. So equally important, we have limited the impact of corporate contributions.

2740
02:33:45,540 --> 02:33:52,540
So even if you're Anaconda, which is where I work, you have a limited impact now. It's

2741
02:33:53,540 --> 02:33:59,100
in the governance. So yeah, so Anaconda has a limited impact on decision making within

2742
02:33:59,100 --> 02:34:04,100
the Conda community now. And that's hard coded in the governance. Before that wasn't true

2743
02:34:04,100 --> 02:34:11,100
and Anaconda made most of the decisions. Okay. So big changes in the Conda community. These

2744
02:34:11,540 --> 02:34:17,140
are driven in part by Anaconda. I mean, I was hired by Anaconda to make this happen.

2745
02:34:17,140 --> 02:34:24,140
So we're really, really committed to the open source ethos. Last thing on this slide,

2746
02:34:25,380 --> 02:34:29,140
this year we became a non-focused, fiscally sponsored project, which means we had to actually

2747
02:34:29,140 --> 02:34:34,180
prove all this stuff. Okay. And so we are now officially an open source project with

2748
02:34:34,180 --> 02:34:37,700
non-focus, which is a great organization. I recommend looking at it for your open source

2749
02:34:38,100 --> 02:34:45,100
projects. Okay. Second thing from the community, there are lots of places to gather. So after

2750
02:34:45,140 --> 02:34:51,500
we leave this room in 10 minutes, well, we're all here, first of all, but there are a number

2751
02:34:51,500 --> 02:34:56,300
of places that you can actually get help and you can get information. So we launched a

2752
02:34:56,300 --> 02:35:03,300
discourse Q&A forum last year at Conda.discourse.group. We consolidated chat. We had chat everywhere,

2753
02:35:04,260 --> 02:35:10,020
everywhere. And now we have it in one place on Matrix. Okay. And it's the second URL,

2754
02:35:10,020 --> 02:35:16,540
which is really heinous. I apologize for that. And then 2023, this is almost here. We thought

2755
02:35:16,540 --> 02:35:20,740
it would be here by PyCon, but it's not quite there. We're going to have the Conda.org community

2756
02:35:20,740 --> 02:35:25,940
website. And so if you want community news, what are releases? There's a ton of products

2757
02:35:25,940 --> 02:35:31,140
in the Conda ecosystem. Just a ton. Okay. Not just the Conda core engine that we talked

2758
02:35:31,140 --> 02:35:38,140
about today. There's also Grayskull, which came from the community. There is Mamba. There's

2759
02:35:38,300 --> 02:35:43,300
just a bunch of stuff out there. Okay. So our goal is to have that be the place to go

2760
02:35:43,300 --> 02:35:50,300
for information. It's the hub. Okay. And what else? Conda is also at PyCon. So here's a

2761
02:35:52,020 --> 02:35:55,620
couple more things that are happening. If you're going to the packaging summit, there's

2762
02:35:55,660 --> 02:36:02,660
a talk by Yanis, who was here earlier, about Conda and PyPA. And then Bianca has a talk

2763
02:36:03,700 --> 02:36:10,700
on Saturday about Pluggy and using Pluggy in mature products like Conda. We have an

2764
02:36:12,660 --> 02:36:19,540
open space meetup. So if you want to talk about Conda, we'll have an open space meetup

2765
02:36:19,540 --> 02:36:24,900
on Saturday after Bianca's talk. That'll last for an hour, although you don't have to stay

2766
02:36:24,900 --> 02:36:30,380
there for the whole hour. And then on Monday and Tuesday, we're here for two days of sprints.

2767
02:36:30,380 --> 02:36:36,060
Okay. So I know there will be at least several people from Anaconda at that. So that's where

2768
02:36:36,060 --> 02:36:43,060
we are. And then many thanks to Valerio. So Valerio started his day yesterday in Europe

2769
02:36:43,300 --> 02:36:49,820
at PyCon DE, where he presented as well. And today he's here. He was here bright and early.

2770
02:36:49,820 --> 02:36:56,820
Amen. Yes. Really impressive. So Mahe and Bianca, who prepared the opening, Ken, sorry,

2771
02:36:58,420 --> 02:37:04,460
I'm stuttering. I stutter and I'm hard of hearing. I'm really good at my job. Okay.

2772
02:37:04,460 --> 02:37:09,540
Ken and Yanis and Steve, who are all in, well, yeah, Yanis is left, but they're all in the

2773
02:37:09,540 --> 02:37:13,980
back row. They came to help and answer questions, which they have been. So thank you so much.

2774
02:37:13,980 --> 02:37:18,460
I'd like to thank Amr. Are you still here? Okay. He's the one who made sure that you're

2775
02:37:18,460 --> 02:37:25,460
in the right room. Okay. Steven, are you a big person in back? Thank you so much, Steven.

2776
02:37:25,660 --> 02:37:30,100
Amen. Yeah. So nothing went wrong. And you don't, yeah, it's great. Okay. And finally,

2777
02:37:30,100 --> 02:37:37,100
you guys, because it's 12 22 and you're still here. Okay. And almost all of you are still

2778
02:37:37,340 --> 02:37:44,020
here, which is really impressive for a hands-on tutorial. So kudos to you. Okay. And I think

2779
02:37:44,220 --> 02:37:51,220
that's it. Yeah, that's it. One last thing. If this tutorial changed your life, okay.

2780
02:37:51,220 --> 02:37:58,220
Yeah, yeah, yeah, exactly. There's a conference about packaging and it's not just about the

2781
02:37:58,460 --> 02:38:05,460
Python packaging ecosystem. It's about everything. So on Linux, it's about all languages. It's

2782
02:38:06,700 --> 02:38:12,740
about language independence. So it's in Berlin in October. It's two days of conference and

2783
02:38:12,740 --> 02:38:19,740
one day of sprints. Think about attending this. And that's it for me. We have seven

2784
02:38:20,300 --> 02:38:25,300
minutes for questions generally. And keep in mind, we have four experts back there and

2785
02:38:25,300 --> 02:38:32,300
one here. Yes. Oh, you, oh my God, you have a question.

2786
02:38:32,300 --> 02:38:39,300
You're welcome. Yeah. Okay. Six minutes for questions. Anything. Shoot.

2787
02:39:02,300 --> 02:39:09,300
It comes in from a sort of known walled garden of conda, not conda forge, conda specifically.

2788
02:39:10,740 --> 02:39:16,660
And it gives me magical dependency resolution. Yes. And that's the bit that I'm actually

2789
02:39:16,660 --> 02:39:21,980
most interested in. So in the example I've just got, say I'm a dungeon master. I built

2790
02:39:21,980 --> 02:39:28,980
my own stuff. I decide that I'm going to use this DND roller. I locally have, what was

2791
02:39:29,660 --> 02:39:35,580
the name of this? No emoji 0.0.6. We've got a conflict. I can't use this because the requirements

2792
02:39:35,580 --> 02:39:40,580
are it has to be exactly five. This is a really simple example, but the environment we've

2793
02:39:40,580 --> 02:39:47,580
got has got flipped in hundreds of requirements and you get dependency conflicts so easily.

2794
02:39:49,300 --> 02:39:56,300
What do I do? Does anybody want to take that? I mean I could, but I'd be bold. Bianca.

2795
02:39:58,980 --> 02:40:05,980
Sorry, what was the first part of the question? You're not going to answer it? You can make

2796
02:40:05,980 --> 02:40:08,980
it up. I didn't know what the question was. Okay. Do you want to repeat the first part

2797
02:40:08,980 --> 02:40:13,180
of the question? Okay. So conda's magic to me because it gives me trusted versioning

2798
02:40:13,180 --> 02:40:18,140
from conda, not conda forge, where as working for a big company I can say I trust this stuff.

2799
02:40:18,140 --> 02:40:23,140
I'll let people have it. I'll build it into my own distributions and it gives me dependency

2800
02:40:23,140 --> 02:40:28,320
resolution magic that I don't quite understand that lets me build increasingly complicated

2801
02:40:28,320 --> 02:40:33,560
projects with dependencies that mostly work. But the dependency, like I've spent days

2802
02:40:33,560 --> 02:40:39,720
of hell on this when dependencies don't work out. So as a really, really simple example,

2803
02:40:39,720 --> 02:40:46,720
the roller class uses NoMoji 0.0.5 exactly. No flexibility whatsoever. Say I locally use

2804
02:40:48,600 --> 02:40:54,520
NoMoji 0.0.6. I try and use this project. I've got a conflict. Like in that scenario specifically

2805
02:40:54,520 --> 02:40:58,160
and then more broadly for dependency resolution, what do I do?

2806
02:40:58,160 --> 02:41:01,520
She does have the answer. I do. You did, Bianca.

2807
02:41:01,520 --> 02:41:05,760
I don't know if this is specifically going to answer your question, but this is something

2808
02:41:05,760 --> 02:41:10,380
that happens a lot when everybody or when you install everything into your base environment.

2809
02:41:10,380 --> 02:41:14,240
It gets more and more and more complicated the more things that you install. So that's

2810
02:41:14,240 --> 02:41:21,000
why you have a separate environment where you have just NoMoji, you know, the specific

2811
02:41:21,000 --> 02:41:26,000
version that you need and then everything should work. I don't know if that answers

2812
02:41:26,000 --> 02:41:33,000
your question, but like so you're saying that you can't have that version at all on your

2813
02:41:33,000 --> 02:41:34,000
computer anywhere.

2814
02:42:05,000 --> 02:42:12,000
So I'm going to tell you something you already know, which is this is a really hard problem.

2815
02:42:13,000 --> 02:42:17,720
Because when you write the recipe, you could either say, okay, I'm going to make a prediction

2816
02:42:17,720 --> 02:42:24,720
about the future, which I have no idea. Right. Maybe it won't. And so you're faced with,

2817
02:42:25,000 --> 02:42:29,560
you know, I can state this fact, which I know is true, or I can say anything greater than

2818
02:42:29,560 --> 02:42:36,560
or equal to what this is. Valerio, you have it. Okay. He's stretching. Yes. You've earned

2819
02:42:36,560 --> 02:42:37,560
it.

2820
02:42:37,560 --> 02:42:38,560
Yeah.

2821
02:42:38,560 --> 02:42:39,560
Yes.

2822
02:42:39,560 --> 02:42:40,560
Yeah.

2823
02:42:40,560 --> 02:42:41,560
Yeah.

2824
02:42:41,560 --> 02:42:48,560
I don't know that there's a great solution.

2825
02:43:00,560 --> 02:43:01,560
I have a, sorry.

2826
02:43:01,560 --> 02:43:06,560
You're at the mercy of the other community.

2827
02:43:06,560 --> 02:43:13,560
So Steve is one of the packagers at Anaconda. So listen to whatever Steve says.

2828
02:43:13,560 --> 02:43:17,560
It's reassuring that it's all the time.

2829
02:43:17,560 --> 02:43:20,560
It's just, it's a waiting game sometimes. Yeah.

2830
02:43:29,560 --> 02:43:36,560
I've had that issue.

2831
02:44:00,560 --> 02:44:06,560
So we have one minute left. Does anyone, yes, you have another intractable question. That's excellent. Okay.

2832
02:44:08,560 --> 02:44:13,560
Just to first say, like, Anaconda and the Konda product is really good. You know, that's an example.

2833
02:44:13,560 --> 02:44:18,560
I'm using it for an enterprise client. And how could I get enterprise support? You know,

2834
02:44:18,560 --> 02:44:24,560
I don't want to depend on the community support, like pushing on the forum. Because like, if

2835
02:44:24,560 --> 02:44:28,560
something is down for some reason, we need somebody. Like, if you take any other products,

2836
02:44:28,560 --> 02:44:34,560
like, you get an enterprise support. Is there any timeline or like anything on the roadmap

2837
02:44:34,560 --> 02:44:39,560
getting us that enterprise support as well?

2838
02:44:39,560 --> 02:44:43,560
So KP, if I understand the question, I think you should talk to the booth. Okay. So another,

2839
02:44:43,560 --> 02:44:47,560
no, it's not intractable at all. I think it's very tractable. But if you want enterprise

2840
02:44:47,560 --> 02:44:52,560
support, you're going to need to pay for it. Yeah. Okay. Yeah. So talk to the people at the booth,

2841
02:44:52,560 --> 02:44:58,560
which will be sort of me at some point. But okay. And we are officially out of time.

2842
02:44:58,560 --> 02:45:03,560
However, the rest of us are here all week for the rest of the week, you know. So find us.

2843
02:45:03,560 --> 02:45:10,560
Think about it. Thanks to the row, Bianca, Valerio, and thanks to you all. Okay.

