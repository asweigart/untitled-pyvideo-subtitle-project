1
00:00:00,000 --> 00:00:06,540
Hi everyone, good afternoon. For this session, our speaker will talk about Pysch group and

2
00:00:06,540 --> 00:00:11,540
the magic of Python and the browser. Let us all welcome Fabio Plyer.

3
00:00:11,540 --> 00:00:22,540
Thank you so much and thank you for coming after lunch, which is always very hard. So

4
00:00:22,540 --> 00:00:28,540
I really appreciate it. Because of that, I tried to put my, you know, the rising pace

5
00:00:28,580 --> 00:00:35,580
headshot in the speaker. So this was clearly a mistake. I usually use the hipster one,

6
00:00:35,580 --> 00:00:43,580
which is better. So a little bit about me. I'm software architect at Anaconda, creator

7
00:00:43,580 --> 00:00:51,580
of Python scripts and been in the Python community for many, many years. I'm a Python

8
00:00:51,620 --> 00:00:58,620
dev and Python fellow, mainly for the work with organizing EuroPython. I was chairman

9
00:00:58,620 --> 00:01:09,620
of EuroPython Society for five years and organized, I think, EuroPython across Europe. I also

10
00:01:09,620 --> 00:01:16,620
co-founded a Python EOE and the Python EOE conference as well.

11
00:01:16,660 --> 00:01:25,660
So I want to first, actually, let's comment about this slide first. This is very experimental,

12
00:01:25,660 --> 00:01:33,660
very alpha. But I was a little disappointed about my colleagues not demoing most of their

13
00:01:33,660 --> 00:01:38,660
demos with Python scripts or creating their slides with Python scripts. So I took it to

14
00:01:38,660 --> 00:01:45,660
the next level. This is definitely a whole slideshow. Is it a test to the demo guys?

15
00:01:45,700 --> 00:01:52,700
So things really mind break, keep that in mind. In fact, this whole presentation is

16
00:01:52,700 --> 00:01:59,700
written by scripts only. There's almost no JavaScript besides the highlighter.

17
00:02:01,700 --> 00:02:08,700
So it isn't pretty much about me working on this talk, trying to make things work in a

18
00:02:08,740 --> 00:02:15,740
way that I thought about putting my irony here, but a lot of the young generation wouldn't

19
00:02:15,740 --> 00:02:20,740
understand. But it's pretty much holding together with the data.

20
00:02:20,740 --> 00:02:25,740
Before I start, I really want to thank the amazing people behind Python scripts. It's

21
00:02:25,740 --> 00:02:32,740
been an amazing year. A lot of this is the work from the community, trying to build a

22
00:02:32,780 --> 00:02:39,780
healthy and sustainable community where we can welcome different types of people, not

23
00:02:39,780 --> 00:02:44,780
all developers. We want to learn a lot about education, about students, about people. We

24
00:02:44,780 --> 00:02:50,780
want to welcome people that have talent in writing documentation or socializing a project

25
00:02:50,780 --> 00:02:55,780
and things like this. So please, if you think Python script is cool or you like the NEL

26
00:02:55,780 --> 00:02:58,780
or you think it's promising or interesting and kind of involved in this project, we are

27
00:02:58,820 --> 00:03:03,820
always looking for you to make the NELs and you hope to collaborate with.

28
00:03:03,820 --> 00:03:10,820
So a little bit about the agenda. I'm going to start with a little refresher about what

29
00:03:10,820 --> 00:03:17,820
happened last year. I'll talk about the Python script today, the state of it. I will finally

30
00:03:17,820 --> 00:03:22,820
be able to show the vision, the real vision that we had to try to run Python scripts.

31
00:03:22,860 --> 00:03:29,860
Last year, I downloaded the first version, doing Python last year, and while it was very

32
00:03:29,860 --> 00:03:36,860
innovative and got a lot of attention, I think it wasn't enough to capture the full vision.

33
00:03:36,860 --> 00:03:43,860
I think this is going to hint a little more. Also, I really wanted to have an interactive

34
00:03:43,860 --> 00:03:50,860
demo because how can you do a good talk about Python scripts after the amazing keynote last

35
00:03:50,900 --> 00:03:55,900
year or the amazing talks that we had this year? So I thought it would be great.

36
00:03:55,900 --> 00:04:00,900
The other bad aspect is also that while I was writing the slides that I was doing demos,

37
00:04:00,900 --> 00:04:07,900
the team kept creating new things and kept making advancements, so I had to change the

38
00:04:09,900 --> 00:04:14,900
slides and include new demos until 30 minutes ago. So keep that in mind.

39
00:04:14,940 --> 00:04:21,940
So what is PyScript? I'll be very fast on this one. You can check on the slides. I actually

40
00:04:21,940 --> 00:04:27,940
will be running a little at the beginning because I think most of those things are available

41
00:04:27,940 --> 00:04:34,940
online. So PyScript is really a framework, a platform that enables Python on the browser.

42
00:04:36,940 --> 00:04:43,940
So you might ask, how does it compare to other frameworks that enable Python on the browser

43
00:04:43,980 --> 00:04:49,980
via the Idle, micro Python, et cetera? It's actually a platform on top of these and allowing

44
00:04:49,980 --> 00:04:55,980
trying to create easy and blog-able interfaces for us to extend the things that you can do

45
00:04:55,980 --> 00:05:00,980
with Python. And just a little bit more about it.

46
00:05:00,980 --> 00:05:07,980
So why PyScript? Why not PyScript? Right? But there are actually very good reasons why

47
00:05:13,980 --> 00:05:20,980
we should be working on PyScript. So first of all, Python is the most popular language

48
00:05:20,980 --> 00:05:26,980
in the world. And it's super weird, honestly, that it doesn't really have a great story

49
00:05:26,980 --> 00:05:33,980
for Python on the most popular hardware in the world, which is mobiles and tablets. I

50
00:05:33,980 --> 00:05:40,980
think it's extremely hard to have Python built. It also doesn't have a good story for running

51
00:05:41,020 --> 00:05:48,020
the first software operating system in the world, which is your browser. So it's really

52
00:05:48,020 --> 00:05:53,020
weird that Python is the most popular language, and we want to fix this. Also, there were

53
00:05:53,020 --> 00:05:57,020
many thoughts about this in the past around as a community, we are enjoying the success

54
00:05:57,020 --> 00:06:04,020
of Python, but we need to look ahead where our society is going in data science and everything

55
00:06:04,060 --> 00:06:11,060
and look forward. I think it's crucial for us to invest in web technology, technology

56
00:06:11,060 --> 00:06:16,060
that can be used in new generations to use Python in a funny and nice way.

57
00:06:16,060 --> 00:06:22,060
So also, distributing Python applications is hard, not only on those two platforms,

58
00:06:22,060 --> 00:06:29,060
but everywhere. Since I started Python, we created a bunch of tools where I have my application,

59
00:06:29,100 --> 00:06:34,100
I just want to ship something to someone else's computer, and it's been incredibly hard.

60
00:06:34,100 --> 00:06:41,100
We have Python 2.xc or Python installer and other things trying to bundle Python applications,

61
00:06:41,100 --> 00:06:50,100
but no real good solution for that. Also, if you ask students and professors, people

62
00:06:50,100 --> 00:06:56,100
in education, I think they all will tell you that it's extremely hard to install Python

63
00:06:56,140 --> 00:07:03,140
and get that machine with Python running in very short time. So it's a considerable learning

64
00:07:05,140 --> 00:07:12,140
curve. So real quick, how many here don't know what

65
00:07:12,140 --> 00:07:21,140
PyScript is? Awesome. So if you haven't heard of PyScript, it was super popular last year

66
00:07:21,180 --> 00:07:28,180
to do Python. And this is a mean that Jess Haverman, our first person running on the

67
00:07:33,180 --> 00:07:40,180
Chrome education, she made it after the crowd at the booth today. Everybody's excited about

68
00:07:40,180 --> 00:07:43,180
PyScript, and I think because people see the excitement.

69
00:07:43,180 --> 00:07:48,180
It was actually the highlight of my career year last year when my daughter came to me

70
00:07:48,220 --> 00:07:55,220
before dinner, and said, Dad, I finally know what you do. I saw a post on TikTok about

71
00:07:57,220 --> 00:08:04,220
PyScript, and you're trending and everything, so I can retire now, and I'm happy.

72
00:08:04,220 --> 00:08:11,220
So this is the star's history of PyScript since last year. As you can see, a very, very

73
00:08:11,220 --> 00:08:18,220
popular, a huge interest from the community, which is amazing. We want to keep that growing,

74
00:08:21,220 --> 00:08:26,220
and we want to make sure that we carry the community with us as we talk more about that

75
00:08:26,220 --> 00:08:33,220
in the big. So this is a piece of the docs, a part of the docs on getting started with

76
00:08:34,220 --> 00:08:41,220
PyScript. You can see how to set up your development environment or how to install PyScript,

77
00:08:42,220 --> 00:08:49,220
which you don't need to install anything, really. You just need to link your PyScript

78
00:08:49,220 --> 00:08:56,220
JS file in your HTML. You don't really even need to do this one, the CSS, but it's better.

79
00:08:56,220 --> 00:09:01,220
And then you can just use PyScript tags to insert Python in your browser.

80
00:09:01,220 --> 00:09:06,220
There are better ways than this. In fact, we'll talk about it later in the documentation.

81
00:09:06,220 --> 00:09:10,220
You can use the Python state to configure your packages and your dependencies and things like

82
00:09:10,220 --> 00:09:15,220
this, basically creating your environment, and then you're ready to go.

83
00:09:15,220 --> 00:09:22,220
So, by the way, if you didn't notice, this is an iframe inside the presentation itself, and you'll

84
00:09:22,220 --> 00:09:27,220
see a lot of things like this. It'll make it fun.

85
00:09:27,220 --> 00:09:33,220
Well, if you look at it after a year, it's not that impressive, I agree. You know, it might feel

86
00:09:33,220 --> 00:09:42,220
like we didn't make a lot of progress in that sense. Well, surprise, we have a lot of progress.

87
00:09:42,220 --> 00:09:48,220
We made a lot of progress in the platform itself and surrounding tools, and that's what I want to

88
00:09:48,220 --> 00:09:54,220
show you today. So, let me talk about stability first. As soon as we started, we released. I said

89
00:09:54,220 --> 00:10:00,220
something like, well, I expect that you'll be breaking your code every release and very often for

90
00:10:00,220 --> 00:10:09,220
some time. It's not quite true. Calm down. That is true for any piece of software, by the way.

91
00:10:09,220 --> 00:10:15,220
If you're developing something, your code might break very easily in Python if you're not managing

92
00:10:15,220 --> 00:10:21,220
your dependencies correctly. So, I want to correct that statement a little. PyScript is way more

93
00:10:21,220 --> 00:10:28,220
stable today. Way, way more stable. It has a, well, I'll talk more about it in a bit. But also, just some

94
00:10:28,220 --> 00:10:35,220
advice, have the best practice as a software developer. Always pin your versions if you don't want

95
00:10:35,220 --> 00:10:41,220
your code to break in your versions, because if you don't, they will change on the end of the day,

96
00:10:41,220 --> 00:10:49,220
and your code might break. Pin your dependencies. Same thing. Right, in the first

97
00:10:49,220 --> 00:10:55,220
version, I mean, give you PyScript versions. Second, pin your dependencies versions, and then

98
00:10:55,220 --> 00:11:01,220
write tests. That's the only way you can make sure that your code is as safe as possible.

99
00:11:01,220 --> 00:11:07,220
Now, I'll go through these real quick, and then I'll show you some things about them. So, PyScript

100
00:11:07,220 --> 00:11:14,220
now has versions. When we released, it didn't have any version. And we chose to, a specific version

101
00:11:14,220 --> 00:11:20,220
pattern, because I think it captures the nature of the project. We killed PyM, which is a Python

102
00:11:20,220 --> 00:11:30,220
object, it's a PyM. We killed PyM and made PyCon think, which is more expressive and supports way

103
00:11:30,220 --> 00:11:40,220
more things. We improved Python handlers, event handlers, we improved escaping and I.O. We made

104
00:11:40,220 --> 00:11:48,220
the lifecycle way more predictable. We improved logging, warnings, errors. We introduced a new

105
00:11:48,220 --> 00:11:56,220
global level function called display. And I'll talk about this in a bit. We improved the Python API,

106
00:11:56,220 --> 00:12:04,220
which is unique, need a lot of work, but it's way improved compared to what we launched. We redesigned

107
00:12:04,220 --> 00:12:10,220
the concept of interpreter so that we can enable other interpreters and I'll talk about that as

108
00:12:10,220 --> 00:12:16,220
well. We have a new nice plugin interface, better documentation, better tiles, blah, blah, blah,

109
00:12:16,220 --> 00:12:22,220
blah. So, we'll see a little bit more. So, this is the PyScript application running inside another

110
00:12:22,220 --> 00:12:28,220
PyScript application to demo some of those features. So, as I said, PyScript now has a version.

111
00:12:28,220 --> 00:12:36,220
And then also we replaced Python with PyConfig, as you can see. This is, for instance, installing

112
00:12:36,220 --> 00:12:46,220
those packages and basically fetching this file and this file. PyEvents way improved. They're a little

113
00:12:46,220 --> 00:12:52,220
more familiar. We're going to change that in the next release as well to make it safer. But I don't

114
00:12:52,220 --> 00:12:58,220
know how long it will take. I spent too much time on that. I've stayed in the idea of data. I want to spend some time

115
00:12:58,220 --> 00:13:04,220
on the display because I think it's important. So, Python on the browser brings a lot of new things to

116
00:13:04,220 --> 00:13:13,220
think about. The browser is not your traditional operating system. So, things like print. Well, what do you

117
00:13:13,220 --> 00:13:19,220
want to do with print? Do you want to print a debug statement or printing is actually a display or

118
00:13:19,220 --> 00:13:26,220
a notification on the browser? So, because that is very confusing, we decided to make it very explicit. So, anytime you want to

119
00:13:26,220 --> 00:13:36,220
display something in the browser, you can just display. And it will display right under where you are running

120
00:13:36,220 --> 00:13:44,220
display. Now, my colleague Antonio will be like, it's horrible because you cannot really predict where you are in the

121
00:13:44,220 --> 00:13:50,220
browser. So, we decided to make it that way. We also made a few changes where you can decide if you want to append to your

122
00:13:50,220 --> 00:13:58,220
debug or you want to replace the contents of the debug. This is a clear disk. And whenever you want to make sure that you are

123
00:13:58,220 --> 00:14:05,220
printing where you are supposed to, you can have a target. So, I can say this target is a debug right here.

124
00:14:05,220 --> 00:14:15,220
If I display here, I'm going to display right on the top. And this is how print behaves. It will print on the terminal,

125
00:14:15,220 --> 00:14:23,220
which is a plugin. So, as I mentioned, we also have better warnings, better errors. Now, there's an error by default.

126
00:14:23,220 --> 00:14:33,220
It will show a red window on the page. So, we make it explicit, blah, blah, blah, blah. But let me go ahead and talk a little bit

127
00:14:33,220 --> 00:14:45,220
about plugins. So, we like to make sure that, to centralize that Pusk it is a platform more than a framework. The

128
00:14:45,220 --> 00:14:53,220
difference here for us, as we're using the difference in the terms that we're using is that a framework enables users to create

129
00:14:53,220 --> 00:15:03,220
applications, a platform enables users to create frameworks and applications. So, we want to make sure that we allow users to

130
00:15:03,220 --> 00:15:13,220
create things on top of Prescript because we will never guess correctly what each one of you want to do. So, we want to make sure

131
00:15:13,220 --> 00:15:27,220
that we have a healthy plugin system that you can hook into and create new things. Just to show real quick a plugin, I will open

132
00:15:27,220 --> 00:15:37,220
Trap real quick on the examples page on Prescript. And as you can see, there's this little thing here with Vue Code. That is the plugin.

133
00:15:37,220 --> 00:15:47,220
It's the PyTutor tag. And that if you place in your code, it will basically inspect the code for you and show what is the code behind

134
00:15:47,220 --> 00:15:55,220
this application. Both the configuration and the coding page. If you have files and things like this, it will show the files, the Python files

135
00:15:55,220 --> 00:16:06,220
of Square and issue the link of Java. Also, you don't know, but right in this page, there's another plugin that is the PyMarkdown plugin.

136
00:16:06,220 --> 00:16:18,220
And in fact, I'm going to write the slides in HTML, but not all of them. This is Markdown and it's being translated in real time to HTML to render the slides.

137
00:16:18,220 --> 00:16:31,220
Also, a lot of work on performance. So, Prescript is not alone. Actually, we really want to promote the idea that Prescript is just an accelerator for the Python

138
00:16:31,220 --> 00:16:41,220
meaning to plan on whether. And it's also a point of, it's like the market square of different projects where we can make them collaborate.

139
00:16:41,220 --> 00:16:49,220
We can work together to make things better. So, in that sense, PyLite is the interpreter, the default interpreter for Prescript.

140
00:16:49,220 --> 00:16:59,220
It's the most impressive today, but it was the one year ago. PyScript is faster as well. It's also smaller. Also, we have a lot of exciting news on the development

141
00:16:59,220 --> 00:17:11,220
around performance that I will be demoing a bit. So, let's keep those. Also, we are working on support for Microsoft Python, which makes loading times faster on the page.

142
00:17:11,220 --> 00:17:26,220
And we are also working on Web Workers allowing blocking calls for free. Who did here thanks AsyncAdobe's breaks.

143
00:17:26,220 --> 00:17:36,220
Okay, not the most. How many of you think AsyncAdobe is easy? None.

144
00:17:36,220 --> 00:17:46,220
And it's important to note that the browser by itself is Async. It expects things to be Async for very good reasons. We don't want to freeze the browser.

145
00:17:46,220 --> 00:17:56,220
Python expects the default Python is synchronous. You expect things to just run in a sequential way. Otherwise, it is async and good luck.

146
00:17:56,220 --> 00:18:09,220
But we want to make sure that PyScript is as easy as it can be. So, with Web Workers, we want to try and make it easy for people to write AsyncApollic instances for free.

147
00:18:09,220 --> 00:18:25,220
It also will allow us to support debugger and other debugger patterns that are really useful. Also, this work also relates to another generic app I find that we want to develop.

148
00:18:25,220 --> 00:18:37,220
So, that's right now you can use. So, FFI stands for Foreign Function Interface. It's what allows us to use JavaScript libraries inside PyScript.

149
00:18:37,220 --> 00:18:46,220
We want to try and make a generic one or a higher level one that can be used for PyDog or for MicroPython or C-Python and so on.

150
00:18:46,220 --> 00:18:56,220
And so, the whole ecosystem can benefit because, well, we are better together. And this is actually a gift of the team.

151
00:18:56,220 --> 00:19:05,220
This is Antonio and myself in the middle. After we argue, because we argue all the time, and Nicholas trying to hug us as well.

152
00:19:05,220 --> 00:19:25,220
But, look, I want to be serious on this because it's really important. PyScript, the whole idea is that we are seeing on the work, amazing work of others, and we want to make sure that we are supporting their work and we are enabling others to join this community and make things better.

153
00:19:25,220 --> 00:19:44,220
So, we are effectively supporting Python and Wezm. We just had the Wezm Summit here at Python on Thursday. And it was an incredible chat with core developers, the different projects, and I think we all want to go in the same direction, which is very exciting.

154
00:19:44,220 --> 00:20:06,220
We are currently supporting PyDyde by both funding and with many initiatives as well. We're supporting MicroPython as well. And we are thankful for Hood and all the core creators, core maintainers of PyDyde and being here for MicroPython.

155
00:20:06,220 --> 00:20:25,220
And we joined the bike for the likes as well to try and make a difference, better in support of Wezm. We are actively trying to push the conversation about Python packaging on Wezm because, hey, we're having an opportunity to do it right this time.

156
00:20:25,220 --> 00:20:41,220
We're ahead of time. So let's do it. And also, as I mentioned, it's going to make a boring function into the face. Now, enough of this. Let's talk about the future. And finally, it's exciting that I can show the vision.

157
00:20:41,220 --> 00:21:06,220
Let's hope it works. So first thing I want to show is PySquip.com, which is not an open source project. It is a free platform that we created. And I kind of created two support PySquip and to allow users to just connect to a web page from their computer, from their phone, from their tablet, and start developing PySquip apps right away.

158
00:21:06,220 --> 00:21:28,220
So you can visit PySquip.com and hopefully connect to Wi-Fi. The COFAS Wi-Fi is going to work. So this is my dashboard where all these apps that I created, I can go there and just create a new project. It will start a new project for me, create the files that I need to start my project.

159
00:21:28,220 --> 00:21:56,220
So I can take my name, I can call it Client, save it, and then I can say Hello, Michael. And if I save and run, this is going to run in the browser right away. And if I want to share with you the application, all I need to do is open a new tab or actually go to the end of the page.

160
00:21:58,220 --> 00:22:10,220
This is a URL that I can share. And I also have the option to go and share. Copy the link, share on Twitter, and things like that.

161
00:22:10,220 --> 00:22:30,220
If you noticed on the deployed app, there's a small section on the bottom right where I can actually use the code. And if I share with someone else, they can use the code as well. They can clone the project and start hiding away using the code that I started and created.

162
00:22:30,220 --> 00:22:58,220
Cool. Now, I want to talk about another project called HyperCard. Who here ever heard of HyperCard? Cool. I thought it would be even less. So I would say 5%. So HyperCard is based on another project that was called HyperCard that rotates around the concept of cards and a stack of cards.

163
00:22:58,220 --> 00:23:12,220
This card represents a state and is a card on your screen and allows you to go from one state to another and define variables in that state. And as you change variables, you can change states and what not.

164
00:23:12,220 --> 00:23:16,220
So this is the link to the project to people.

165
00:23:16,220 --> 00:23:20,220
People.

166
00:23:20,220 --> 00:23:26,220
You can see it's public. If you go check it out, I know this person is here.

167
00:23:26,220 --> 00:23:29,220
How's that? It's alpha. It's super alpha.

168
00:23:29,220 --> 00:23:44,220
Exactly. So it's in alpha. But you should go try it, break it, give us feedback, and we want to learn about how you want to use it. I'm using it to run this presentation.

169
00:23:44,220 --> 00:23:50,220
This presentation was actually done with HyperCard and I've learned some other tools that I've never used before.

170
00:23:50,220 --> 00:24:04,220
So it's a quick and easy to use Python to create software with modern interface. It's deliberately constrained, naturally powerful. Actually, I should change my voice.

171
00:24:04,220 --> 00:24:09,220
Deliberately constrained, naturally powerful.

172
00:24:09,220 --> 00:24:18,220
So it's easy to learn and that's really important. I really care about the 99% SPP critical put last year.

173
00:24:18,220 --> 00:24:27,220
I think that part of the reason that I'm showing is this is the right path in that direction. So one of them is hypercard, so it won't make it very easy.

174
00:24:27,220 --> 00:24:38,220
And it's also super easy to deploy in Chef. So let me demo it. This is the GitHub page of the project inside this presentation.

175
00:24:38,220 --> 00:24:50,220
And actually one of the cool things is that I can run the test suite from here. So we can go there, run the test suite, and see if anyone drops a code.

176
00:24:50,220 --> 00:24:57,220
There you go. My test in the browser.

177
00:24:57,220 --> 00:25:05,220
Now, I want to show some applications as well. Temperature is a cool one.

178
00:25:05,220 --> 00:25:15,220
It has the concept of three cards. One card to input your temperature, another one to show the results, and another one to handle errors.

179
00:25:15,220 --> 00:25:28,220
So for instance, if I have a 35 Celsius or what translates to Fahrenheit. There you go. If I go back here, it goes back to my input card.

180
00:25:28,220 --> 00:25:45,220
But if I click Celsius, I get my error card. Now, let's see how this code works, the code behind this.

181
00:25:45,220 --> 00:25:51,220
Isn't it cool that you can just open the resource in this Chef resource site? I love it.

182
00:25:51,220 --> 00:26:02,220
So this is the template for the cards. First card is the input card. Second card is the result card. And the third card is the error card.

183
00:26:02,220 --> 00:26:09,220
This is the...

184
00:26:09,220 --> 00:26:24,220
So this is the whole code for the whole application. There's no code that regards a state. There's no code that regards an interface.

185
00:26:24,220 --> 00:26:30,220
Everything is... But the whole interface is injected from the image.

186
00:26:30,220 --> 00:26:43,220
And all I need to do here is just define my app, say I have those three cards, and I want to handle transitions between one card with the others with those functions.

187
00:26:43,220 --> 00:26:59,220
It's a nice transition decorator that tells me I want to go from this input card... I'm sorry. Every time the user clicks on this button to see in the card input card, execute this card.

188
00:26:59,220 --> 00:27:10,220
And those transitions, functions, all they need to do is just return to the next state. So for me, the next state, if there's no error, is the result card. Otherwise, the error card.

189
00:27:10,220 --> 00:27:20,220
Same thing goes for the other, uh, translated function. Same thing goes for when I go back to a card or I reset the cards.

190
00:27:20,220 --> 00:27:32,220
Alright. So this basically is telling me, hey, the application starts from here. But that's not all.

191
00:27:32,220 --> 00:27:50,220
And we go back here. Actually, I will go back and open a view. So hopefully you see the overalls for here. The audio.

192
00:27:50,220 --> 00:28:03,220
This is a different type of application where it uses an audio file to transition between cards. So it's a different type of application. It doesn't require a lot of these things. It's just a showcase of things and stuff.

193
00:28:03,220 --> 00:28:10,220
But the cool thing about it is that we are using a sound and we are using a timer to progress between the card.

194
00:28:10,220 --> 00:28:30,220
I'm not going to show the code because it's basically the same. But, I'll show it back there. If we go to that, if we, I write it to the end without breaking anything, I'll just show something else.

195
00:28:30,220 --> 00:28:43,220
Alright. Ready for more? This is just the beginning. This is a platform that will enable new applications. But, well, how do you create those interfaces?

196
00:28:43,220 --> 00:28:59,220
Welcome to VisualPyScript. Basically, it is in 3D alpha, so we didn't open the window yet. But it's a framework that allows you to visually create your applications with PyScript.

197
00:28:59,220 --> 00:29:09,220
So in this case, actually, this slideshow was created with VisualPyScript. I didn't write much of the HTML under this presentation. I used VisualPyScript.

198
00:29:09,220 --> 00:29:22,220
The first type of app that we want to support is HyperCard apps. And as I mentioned, the concept of cards. So let's read a presentation right now inside my presentation.

199
00:29:22,220 --> 00:29:41,220
So, I have the concept of a layout. When I create a new card, I can say I want just one element on this page to be my title. So we can do text and say, my meta, my company card.

200
00:29:41,220 --> 00:29:54,220
And this is large. I can also define other things, but this will do for now. I can go here and add a new card. This card is going to be a little more complicated. I want to know more about you all.

201
00:29:54,220 --> 00:30:17,220
So you want to do a card with a header. And you will have three elements. One header, one input, and one button. I really want to spend 30 seconds on this one, which is an experiment that we're doing to see how can we create interfaces in a very fast way.

202
00:30:17,220 --> 00:30:33,220
It's very hard to create, to adjust your web pages with CSS and things like this. So we try to simplify the problem as much as possible. And trying to see your interface as a grid seems like a good option.

203
00:30:33,220 --> 00:30:56,220
But we would love to hear more feedback on those things. Actually, let me ask you another thing. Tell me to tell you another thing. In Dookinfield, it's on purpose. It's not because it's free of work. The 80s are back. So stranger things and all of that. So it's pretty much like the 19s web interface.

204
00:30:56,220 --> 00:31:22,220
So I'm joking. I'm going to make it better. So header here. Hi. Let's see your name. And you're going to be there. And then here, I want to put an input. We just add you here. And you're going to call it this little hole.

205
00:31:22,220 --> 00:31:43,220
And then we're going to add the value domain username. And then we can, well, that's the last thing there. That's perfect. Text is perfect. And I'm going to add a button here. That is user. I didn't know what the button is, but I think it's a button for user. Oops.

206
00:31:43,220 --> 00:32:11,220
You would never know if it was on purpose or not. OK, actions. And I want to, as you can see on the bottom, I have the preview of the card. It's looking somehow OK. I want to add a new card. And then this card, I want to say, hi. Excuse me.

207
00:32:11,220 --> 00:32:32,220
And the concept here is that we can template the variables that we have in the Card app and use those to inject variables. Now, it's not going to work fully because this is just the interface and we don't have five or five connected to it.

208
00:32:32,220 --> 00:33:00,220
But if I come here back and I put that the next state for this button is card three, and I go to here and say, actually, it's an email. I think it's a Python. And I click on add user if I go to the state that I expect.

209
00:33:00,220 --> 00:33:23,220
So we're trying to make things reactive and observable in a way that's why we develop things you can track your application when the main states are built to that. It also has, I'm not going to spend too much time, but we're also supporting the sound, what's the next card, and how can we progress to the next card with a time-based workflow.

210
00:33:24,220 --> 00:33:26,220
Now, you can also save.

211
00:33:26,220 --> 00:33:50,220
And it has HTML or JSON. And as JSON, it will basically hold the state of this app. So if you want to save your work here and then go back later, you can just load it JSON. Now, because of time, I should be re-run. And I will show you a new thing that we have in Python.com, which is the Python.com Assistant.

212
00:33:50,220 --> 00:34:15,220
And, it's not your physical one. So your physical one, which one do you think is your physical one? Actually, which one would you like to be your physical one? Right or left? Left. I hear left. Oh my gosh. I'm telling you.

213
00:34:15,220 --> 00:34:19,220
Okay. Last one or this new one.

214
00:34:24,220 --> 00:34:30,220
So, Gratitz and Zonzo who made the, the, the, the, I already knew it. It was going to be the latest.

215
00:34:31,220 --> 00:34:32,220
Oops.

216
00:34:33,220 --> 00:34:36,220
Let me go back to the,

217
00:34:36,220 --> 00:34:44,220
the, the, sorry. If I close the, I'm going to go back here and I want to show you the Assistant.

218
00:34:45,220 --> 00:34:48,220
All right. Click on new project.

219
00:34:50,220 --> 00:34:53,220
And, it's unloaded.

220
00:34:53,220 --> 00:35:00,220
By the meantime, I can connect to the Py script on our.com Assistant and ask, for instance, what is Py script?

221
00:35:03,220 --> 00:35:13,220
And I have an answer. Sorry. I don't know what's the difference between, for instance, Py script and Jupyter notebooks.

222
00:35:13,220 --> 00:35:23,220
Cool. So I can ask, for instance, who are the Py script main games that are not affiliated with Amazon?

223
00:35:23,220 --> 00:35:33,220
Cool. That's a little creepy, but that's cool. But more important, I can ask, how do I use Py, comma, say,

224
00:35:34,220 --> 00:35:36,220
Py script?

225
00:35:36,220 --> 00:35:44,220
Cool. That's a little creepy, but that's cool. But more important, I can ask, how do I use Py, comma, say,

226
00:35:45,220 --> 00:35:47,220
Py script?

227
00:35:47,220 --> 00:35:58,220
How do I use Py, comma, say, to add appendices to my position?

228
00:36:10,220 --> 00:36:14,220
There you go. In this case, it's wrong, actually. So.

229
00:36:14,220 --> 00:36:24,220
I'll put that down. It's super new and we are training and we are learning with it. So, yeah, we need to be patient.

230
00:36:25,220 --> 00:36:34,220
But it's pretty good in a lot of things. So, for instance, how do I write me people that actually understand?

231
00:36:44,220 --> 00:36:52,220
Add an integer parameter, too? I'm not sure. It's a return to function. We can copy it, reuse it.

232
00:36:53,220 --> 00:36:59,220
The whole idea here is that we want to help users create things faster and use it to their advantage.

233
00:37:00,220 --> 00:37:06,220
But I already have running really behind. So, go ahead and show more.

234
00:37:07,220 --> 00:37:15,220
So, we also added, we're working with the MicroPython folks to have a blazing fast MicroPython support.

235
00:37:16,220 --> 00:37:24,220
In effect, we have a demo of a MicroPython app running on a Piper card. Sorry, Piper card running on a MicroPython app.

236
00:37:25,220 --> 00:37:32,220
And it uses the app and as you see, it loads basically, spontaneously. I'm actually reloading the page.

237
00:37:32,220 --> 00:37:44,220
But more important is that if I open my phone and I click on the app and I reload it, it loads it spontaneously.

238
00:37:45,220 --> 00:37:55,220
And I can actually, in a matter of seconds. And this is the type of thing that we want to help everyone achieve with their password applications.

239
00:37:55,220 --> 00:38:00,220
Cool. As I mentioned, we are working on Web Workers and I have higher level FFI.

240
00:38:01,220 --> 00:38:08,220
What this will allow is to do all those things in a very fast way and allow R2D1 on a Web Worker and not on a MiniTrend.

241
00:38:09,220 --> 00:38:17,220
But I want to close with the last demo, which is I want to really thank Chris, a friend of the team who reached out and said,

242
00:38:17,220 --> 00:38:26,220
Oh, we love what you guys are doing. We're actually using PyScript in education and helping our students to run, to run, to use PyScript to control their number of robots.

243
00:38:27,220 --> 00:38:37,220
So that's what I want to show. And I have a robot here, which is, I don't know if you can see, but I will show you how to do it.

244
00:38:37,220 --> 00:38:44,220
So I'll explain this one first. I don't know if you can see, but this is an egg. This is the wheel.

245
00:38:46,220 --> 00:39:02,660
This is the

246
00:39:07,220 --> 00:39:08,220
Is that the phone? No.

247
00:39:09,220 --> 00:39:15,220
Piping packaging, eggs on wheels. Anyway, it also has a egg roll, so I can control it manually.

248
00:39:16,220 --> 00:39:25,220
But if it attacks to the computer and I load control it with PyScript and it doesn't attack the demo, it's already attached to the, I will destroy it first.

249
00:39:25,220 --> 00:39:32,220
So this is the first. This is the drawer of the phone.

250
00:39:32,220 --> 00:39:37,220
So that's all you see. Open a serial port. I don't know if you can see the text list.

251
00:39:42,220 --> 00:39:45,220
Connect. Connect to the page.

252
00:39:50,220 --> 00:39:51,220
Nice.

253
00:39:55,220 --> 00:39:56,220
Cool. Should be connected.

254
00:39:56,220 --> 00:40:03,220
So that's the port. Right here. It opens the number half.

255
00:40:04,220 --> 00:40:09,220
Or, to help everybody see, I'll add the camera here.

256
00:40:10,220 --> 00:40:19,220
And I'll just do this way. I'll go back and in fact, if I run more, you can see it's going from PyScript.

257
00:40:19,220 --> 00:40:28,220
So I can stop them in order. One cool thing that Chris did is actually he connected PyScript to his, I don't know, an API of his solar system.

258
00:40:28,220 --> 00:40:34,220
And I can actually help get the data from his solar panels and I can spin the data.

259
00:40:35,220 --> 00:40:40,220
You see it spins with the same acceleration of the panels.

260
00:40:41,220 --> 00:40:42,220
There you go.

261
00:40:42,220 --> 00:40:46,220
So let me go and take the edge bar out.

262
00:40:47,220 --> 00:40:52,220
Sorry because it's extra cool. Actually just one.

263
00:40:53,220 --> 00:40:59,220
I think I need to reload the page but I don't know. So, this is five.

264
00:41:00,220 --> 00:41:05,220
Yeah, it's cool. So this one has a cool story actually. It was great.

265
00:41:05,220 --> 00:41:12,220
Same little robot that was used at the White House. I think for the Easter events where the kids could color their heads.

266
00:41:13,220 --> 00:41:15,220
If I click here again, I'm next.

267
00:41:16,220 --> 00:41:19,220
And I'm going to do this fast because I'm running out of time.

268
00:41:20,220 --> 00:41:23,220
If I do one, it's very fast looking head.

269
00:41:24,220 --> 00:41:26,220
I'll just stop the camera.

270
00:41:26,220 --> 00:41:31,220
There you go. That's it. That's how easy it is without installing anything on the computer.

271
00:41:32,220 --> 00:41:34,220
All right, so let's stop this thing.

272
00:41:35,220 --> 00:41:36,220
Let's put it here.

273
00:41:37,220 --> 00:41:39,220
And let's go ahead and close.

274
00:41:40,220 --> 00:41:45,220
First, reminding you, if you wanted to check all the PyScript sessions, sorry, I'm sorry.

275
00:41:46,220 --> 00:41:49,220
I'm going to show you a little bit of the code.

276
00:41:49,220 --> 00:41:56,220
And I'm going to close with first reminding you, if you wanted to check all the PyScript sessions, sorry, this is the last one.

277
00:41:57,220 --> 00:42:00,220
The other one, which were way better, you missed them.

278
00:42:01,220 --> 00:42:02,220
Go check the videos online.

279
00:42:03,220 --> 00:42:07,220
But you still have an opportunity to engage with us to help us grow the project and our own things.

280
00:42:08,220 --> 00:42:13,220
So you can go to PyScript Open Space tomorrow at 11.

281
00:42:13,220 --> 00:42:19,220
And then there's a title that at the end basically we're going to be here for the students.

282
00:42:20,220 --> 00:42:21,220
So just come hack with us.

283
00:42:22,220 --> 00:42:27,220
And with this, I really want to thank you all for coming and for the interest in the project.

284
00:42:28,220 --> 00:42:32,220
And I also want to thank Anaconda for supporting the project.

285
00:42:33,220 --> 00:42:42,220
We are investing a lot of money on the teams and all the technology because we believe it's going to help everyone democratize our community and to assign us.

286
00:42:43,220 --> 00:42:52,220
So we really want to thank the Corman Daners, Piadai, MicroPython, the CPython folks, and last but not least, special thanks to Brett.

287
00:42:53,220 --> 00:42:57,220
Also the Red Assembly community, the UF folks have been amazing to talk with.

288
00:42:58,220 --> 00:43:02,220
Well, Tim for inventing the Internet and many more.

289
00:43:03,220 --> 00:43:04,220
And that's it. Thank you so much.

290
00:43:05,220 --> 00:43:06,220
Thank you.

291
00:43:07,220 --> 00:43:08,220
Thank you.

292
00:43:09,220 --> 00:43:10,220
Thank you.

293
00:43:11,220 --> 00:43:12,220
Thank you.

294
00:43:13,220 --> 00:43:15,220
And with that, please back to the support line.

