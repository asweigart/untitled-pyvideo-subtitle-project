1
00:00:00,000 --> 00:00:07,000
Bueno, bueno, bueno, bueno.

2
00:00:07,000 --> 00:00:12,000
Volvimos, volvemos, volvemos a nuestro cierre del día de hoy,

3
00:00:12,000 --> 00:00:14,000
porque mañana continuamos.

4
00:00:14,000 --> 00:00:16,000
¿Cómo están? ¿Cómo están por acá?

5
00:00:16,000 --> 00:00:19,000
Un poco tranquilitos. Se ven ahí un poquito como medio...

6
00:00:19,000 --> 00:00:21,000
Algo pasó anoche, ¿no?

7
00:00:21,000 --> 00:00:24,000
¿Qué tal están haciendo ustedes? Muchos estaban ahí disfrutando la ciudad.

8
00:00:24,000 --> 00:00:27,000
Espero que sí, la estén pasando muy bien en la ciudad.

9
00:00:27,000 --> 00:00:34,000
Vamos a continuar con nuestra charla, la última del día de hoy, como les mencioné.

10
00:00:34,000 --> 00:00:37,000
Para los que no me conocen, les habla Arnulfo por acá.

11
00:00:37,000 --> 00:00:43,000
Pero, tengo el honor de presentar acá a Iván Pulido.

12
00:00:43,000 --> 00:00:48,000
Él va a compartir esta charla sobre simulaciones molecularias reproducibles

13
00:00:48,000 --> 00:00:50,000
con la ayuda de Python.

14
00:00:50,000 --> 00:00:55,000
Ahí vamos a que él se presente un poquito, nos cuente

15
00:00:56,000 --> 00:01:00,000
cómo es todo este tema de su conferencia y un poquito también de él.

16
00:01:00,000 --> 00:01:02,000
Así que, un fuerte aplauso para Iván, por favor.

17
00:01:02,000 --> 00:01:04,000
Gracias.

18
00:01:06,000 --> 00:01:08,000
¿Hola? Sí, ya funciona.

19
00:01:08,000 --> 00:01:11,000
Sí, vengo a hablarles...

20
00:01:11,000 --> 00:01:16,000
No, primero, gracias por invitarme, gracias por aceptar mi propuesta a la Python,

21
00:01:16,000 --> 00:01:19,000
en especial a la Python charlas.

22
00:01:19,000 --> 00:01:22,000
Me parece genial la idea de tener un track en español

23
00:01:22,000 --> 00:01:29,000
para unir estas comunidades que a veces se sienten muy despegadas.

24
00:01:29,000 --> 00:01:32,000
Entonces, este es un espacio ideal para eso.

25
00:01:32,000 --> 00:01:37,000
Bueno, sí, vengo a hablarles un poco de lo que yo hago en este Instituto de Investigación en Cáncer

26
00:01:37,000 --> 00:01:42,000
acerca de cómo usamos Python para simular biomoleculas.

27
00:01:42,000 --> 00:01:47,000
Y, ah, a propósito, perfecto, no sé si fue a propósito,

28
00:01:47,000 --> 00:01:53,000
pero perfecto que Marina hizo una introducción al nivel genético.

29
00:01:53,000 --> 00:01:56,000
Y, entonces, yo ahorita voy a hablar de un poquito del nivel de proteínas

30
00:01:56,000 --> 00:01:59,000
que es como el nivel siguiente o algo así, no sé.

31
00:01:59,000 --> 00:02:03,000
El más alto... no sé, bueno, es como el alto nivel.

32
00:02:03,000 --> 00:02:05,000
Si hablamos en lenguajes de programación,

33
00:02:05,000 --> 00:02:09,000
es como el que más está cercano realmente a las enfermedades

34
00:02:09,000 --> 00:02:11,000
y a las funciones de la célula,

35
00:02:11,000 --> 00:02:14,000
pero todo está escrito en código genético como Marina dijo.

36
00:02:14,000 --> 00:02:17,000
Entonces, bueno, ahí están mis datos.

37
00:02:17,000 --> 00:02:19,000
No soy mucho de redes sociales,

38
00:02:19,000 --> 00:02:23,000
pero me pueden escribir al correo y estoy pendiente.

39
00:02:23,000 --> 00:02:30,000
Y me disculpo porque esta es la única diapositiva que va a estar en español.

40
00:02:30,000 --> 00:02:36,000
Di la charla también ayer en inglés y no tuve suficiente tiempo para traducirla.

41
00:02:36,000 --> 00:02:41,000
Entonces, me disculpo, pero no tiene mucho texto y creo que es entendible aún así.

42
00:02:41,000 --> 00:02:48,000
Entonces, bueno, como dije, yo trabajo en este Instituto de Investigación en Cáncer en Nueva York.

43
00:02:48,000 --> 00:02:57,000
Somos un grupo que está muy metido en atacar los problemas o los retos

44
00:02:57,000 --> 00:03:02,000
que tiene el descubrimiento de nuevos tratamientos

45
00:03:02,000 --> 00:03:07,000
y el descubrimiento de nuevas terapias de manera computacional.

46
00:03:07,000 --> 00:03:13,000
Y pues mi posición en este grupo es lo que llamamos y queremos que se vuelva algo

47
00:03:13,000 --> 00:03:16,000
el software scientist, el científico de software.

48
00:03:16,000 --> 00:03:24,000
Entonces, somos en general personas que tenemos una trayectoria en ciencia formal, digamos,

49
00:03:24,000 --> 00:03:28,000
pues en mi caso, por ejemplo, yo estudié física en pregrado,

50
00:03:28,000 --> 00:03:32,000
pero nos apasiona el tema de la computación y el software

51
00:03:32,000 --> 00:03:36,000
y de crear software para investigación científica.

52
00:03:36,000 --> 00:03:44,000
Es un espacio muy para mí emocionante porque estoy como en esta área entre la academia y la industria

53
00:03:44,000 --> 00:03:50,000
y es un instituto sin ánima de lucro, lo cual a mí me encanta

54
00:03:50,000 --> 00:03:55,000
y entonces puedo hacer muchas cosas de manera abierta

55
00:03:55,000 --> 00:04:02,000
y todo lo que hacemos es código abierto, datos abiertos y en general ciencia abierta.

56
00:04:03,000 --> 00:04:07,000
Yo hago parte del instituto de investigación y en el instituto de investigación

57
00:04:07,000 --> 00:04:12,000
está el grupo de John Codera y yo hago parte de este grupo de John Codera.

58
00:04:12,000 --> 00:04:20,000
Entonces, hay un reto muy grande en temas de innovar en biotecnología

59
00:04:20,000 --> 00:04:25,000
y es que cada vez es más difícil hacer una innovación en el área.

60
00:04:25,000 --> 00:04:30,000
No sé si ustedes están, o tal vez sí, probablemente sí están familiarizados con esta ley de Moore

61
00:04:30,000 --> 00:04:39,000
en computación que la densidad de transistores en semiconductores va creciendo exponencialmente

62
00:04:39,000 --> 00:04:43,000
y viene creciendo desde los últimos 40 años, 50 años, algo así.

63
00:04:43,000 --> 00:04:49,000
En biotecnología es al revés, por eso le llaman la ley de ERUM, que es como Moore al revés.

64
00:04:49,000 --> 00:04:54,000
Cada vez es más difícil hacer una innovación, cada vez es más costoso, cada vez toma más tiempo,

65
00:04:54,000 --> 00:04:58,000
cada vez toma más controles, necesita más datos, en fin.

66
00:04:58,000 --> 00:05:05,000
Cada vez es más difícil hacer una innovación en biotecnología y es exponencialmente cada vez más difícil.

67
00:05:05,000 --> 00:05:07,000
Esa escala es locarímica, entonces por eso es.

68
00:05:07,000 --> 00:05:15,000
Y nosotros en el grupo en lo que hacemos y en lo personal yo creo mucho en que hacer la investigación científica

69
00:05:15,000 --> 00:05:23,000
de manera abierta puede ayudar y va a ayudar mucho a mitigar este problema

70
00:05:23,000 --> 00:05:28,000
porque es un problema que para mí es intrínseco en el enfoque y en el área,

71
00:05:28,000 --> 00:05:32,000
y en el enfoque que le estamos dando al área, que necesitamos muchos datos para hacer algo

72
00:05:32,000 --> 00:05:35,000
y mientras más datos cada vez hay más complejidad y mientras más complejidad,

73
00:05:35,000 --> 00:05:41,000
más recursos tenemos que dedicar a lidiar con esa complejidad y más,

74
00:05:41,000 --> 00:05:45,000
y se vuelve todo más difícil de predecir y necesita más controles, etc.

75
00:05:45,000 --> 00:05:50,000
Entonces es como algo intrínseco también en el enfoque que tenemos de que más datos y más datos y más datos,

76
00:05:50,000 --> 00:05:57,000
eso también significa más costos y más recursos que necesitamos dedicar para eso.

77
00:05:57,000 --> 00:06:05,000
Ah bueno, y sí, como dije creemos mucho en la manera abierta de hacer esto

78
00:06:05,000 --> 00:06:11,000
y creemos que esta es una manera escalable de mitigar el problema

79
00:06:11,000 --> 00:06:15,000
porque se distribuye la carga entre muchas comunidades y muchas personas,

80
00:06:15,000 --> 00:06:24,000
y muchas farmacéuticas y grupos en universidades donde las cosas se vuelven escalables automáticamente.

81
00:06:24,000 --> 00:06:29,000
Automáticamente no necesitamos un grupo en específico que tenga la voluntad,

82
00:06:29,000 --> 00:06:34,000
sino que todos estamos trabajando en nuestras cosas pero contribuyendo al ecosistema abierto.

83
00:06:34,000 --> 00:06:39,000
Y esto es bastante diferente a lo que tradicionalmente hace la industria farmacéutica,

84
00:06:39,000 --> 00:06:49,000
que es muy cerrada, muy secreta y está muy enfocada al lucro porque gastan también muchísimo dinero en hacer lo que hacen.

85
00:06:49,000 --> 00:06:57,000
Pero nosotros creemos en esta manera abierta de que se puede hacer sin patentes, compartiendo datos, compartiendo código.

86
00:06:57,000 --> 00:06:59,000
Y la verdad es que funciona.

87
00:07:00,000 --> 00:07:08,000
Nosotros, el grupo de John Codera, donde yo hago parte, y el Instituto de Investigación,

88
00:07:08,000 --> 00:07:17,000
lideró esta iniciativa que se llama COVID Moonshot en los tiempos de la pandemia cuando estaba en su pico.

89
00:07:17,000 --> 00:07:27,000
Y hasta donde yo sé es la única iniciativa que ha hecho todo lo que se llama el pipeline,

90
00:07:27,000 --> 00:07:32,000
como todo el flujo de descubrimiento de fármacos de manera abierta y sin patentes.

91
00:07:32,000 --> 00:07:41,000
Esto para mí es histórico y además un poco gratificante mostrar que sí se puede hacer de esta manera.

92
00:07:41,000 --> 00:07:51,000
Y gracias a eso, ahora nos estamos enfocando y estamos haciendo parte de esta colaboración más grande todavía

93
00:07:51,000 --> 00:07:59,000
en muchos grupos alrededor del mundo para prevenir nuevas futuras pandemias, porque sabemos que van a pasar,

94
00:07:59,000 --> 00:08:04,000
pero ojalá no nos cojan tan desprevenidos.

95
00:08:04,000 --> 00:08:12,000
Y entonces es esta iniciativa que se llama ASAP, donde hacemos parte y todo va a ser de manera abierta,

96
00:08:12,000 --> 00:08:17,000
todo se hace con datos abiertos, código abierto y ciencia abierta.

97
00:08:18,000 --> 00:08:26,000
El flujo de descubrirnos drogas y nuevos fármacos es un flujo bastante complicado,

98
00:08:26,000 --> 00:08:33,000
bastante tedioso, necesita mucho control, muchos datos y es extremadamente costoso.

99
00:08:33,000 --> 00:08:41,000
Ahí pueden ver unos datos de más o menos cuánto tiempo en promedio toma, puede tomar 10 años en promedio

100
00:08:41,000 --> 00:08:46,000
y puede tomar cientos de millones de dólares en promedio para descubrir solo un componente químico

101
00:08:46,000 --> 00:08:50,000
que ayude como un tratamiento para una enfermedad.

102
00:08:50,000 --> 00:08:59,000
Como pueden ver, esto necesita una diversidad de datos muy grande, hay datos de todo tipo,

103
00:08:59,000 --> 00:09:07,000
a nivel clínico, a nivel molecular, a nivel administrativo, de patentes, en fin, de un montón de cosas.

104
00:09:07,000 --> 00:09:15,000
Y esta complejidad llama a que un enfoque computacional parece interesante, parece que puede funcionar ahí.

105
00:09:15,000 --> 00:09:23,000
Y efectivamente nosotros tenemos ese enfoque computacional, pero nosotros nos enfocamos solo en esta pequeña primera parte,

106
00:09:23,000 --> 00:09:29,000
que es la parte más temprana, donde las simulaciones moleculares son muy útiles.

107
00:09:30,000 --> 00:09:38,000
Aquí lo que hacemos con las simulaciones es, tenemos un espacio químico que es en la práctica infinito,

108
00:09:38,000 --> 00:09:44,000
o sea, hay tantos candidatos que existen y que pueden ser posibles,

109
00:09:44,000 --> 00:09:49,000
y tenemos que tratar de filtrar entre todo ese espacio químico,

110
00:09:49,000 --> 00:09:58,000
filtrar cuáles son los mejores candidatos para determinada enfermedad o determinada condición fisiológica, etc.

111
00:09:58,000 --> 00:10:03,000
Entonces aquí las simulaciones moleculares se usan muchísimo y ya están acelerando este proceso,

112
00:10:03,000 --> 00:10:06,000
y es aquí donde nosotros nos movemos.

113
00:10:08,000 --> 00:10:12,000
Pero entonces, ¿qué es lo que realmente simulamos en el grupo?

114
00:10:12,000 --> 00:10:19,000
Marina, como dije, dio hace unos minutos una excelente introducción, entonces perfecto.

115
00:10:19,000 --> 00:10:27,000
Básicamente nosotros todo lo que involucra alguna función fisiológica en las células de los humanos,

116
00:10:27,000 --> 00:10:34,000
involucra alguna proteína de alguna u otra manera, o muchas en general, pero al menos una.

117
00:10:34,000 --> 00:10:40,000
Entonces nosotros nos enfocamos en estos sistemas, en estas biomoleculas que se llaman proteínas,

118
00:10:40,000 --> 00:10:45,000
y que como pueden ver ahí pueden tener estructuras bastante complejas,

119
00:10:45,000 --> 00:10:53,000
y se pliegan de maneras que de nuevo parecen infinitas, o sea, no son infinitas, pero en la práctica son infinitas.

120
00:10:53,000 --> 00:10:59,000
Entonces de nuevo hay un nivel de complejidad altísimo, y que siempre cuando eso pasa,

121
00:10:59,000 --> 00:11:05,000
entonces siempre en mi entrenamiento, digamos como científico, siempre que veo complejidad digo,

122
00:11:05,000 --> 00:11:11,000
ah, pues hay que usar computadores, así es sencillo, no hay que pensarlo demasiado.

123
00:11:11,000 --> 00:11:20,000
Entonces las proteínas son muy complejas, y los datos que se usan y se obtienen de ellas son muy diversos.

124
00:11:20,000 --> 00:11:27,000
Se necesitan datos de su estructura, pero no es suficiente solo la estructura, sino también de cómo se mueve,

125
00:11:27,000 --> 00:11:32,000
y de cuáles y con qué cosas interacciona.

126
00:11:34,000 --> 00:11:40,000
Entonces tradicionalmente, o en el campo actualmente, en el estado del arte,

127
00:11:40,000 --> 00:11:46,000
se usan formatos que son bastante poco amigables en general.

128
00:11:46,000 --> 00:11:59,000
Son formatos muy obsoletos, pero que cumplieron una función muy, digamos, cumplieron la función para la que se diseñaron en su época.

129
00:11:59,000 --> 00:12:04,000
Estos son formatos que son muy rígidos, como pueden ver ahí, tienen columnas rígidas,

130
00:12:04,000 --> 00:12:12,000
y necesitan un número de espacios específico entre las columnas, y solo puedo tener cierta precisión numérica, etc.

131
00:12:12,000 --> 00:12:22,000
Entonces son formatos que si bien son viejos, y no tan modernos, y no tan útiles,

132
00:12:22,000 --> 00:12:32,000
sobre todo pensando en las alternativas, es el estado del arte porque es lo que usa esta base de datos internacional gigante y abierta,

133
00:12:32,000 --> 00:12:38,000
que se llama el Protein Data Bank, y de ahí sacamos las estructuras de las proteínas.

134
00:12:38,000 --> 00:12:47,000
Y como pueden ver ahí, los datos en este formato, en estas estructuras, son de muchos tipos, hay números, hay coordenadas,

135
00:12:47,000 --> 00:12:54,000
hay tipos de átomos, hay índices de átomos, hay índices de residuos, de las cosas que arman estas proteínas,

136
00:12:54,000 --> 00:13:00,000
y hay datos de dónde, cuál es la fuente, qué tipo de experimento, etc.

137
00:13:01,000 --> 00:13:06,000
Y esto definitivamente es algo para lo que Python es muy bueno.

138
00:13:06,000 --> 00:13:15,000
Python es extremadamente bueno en tomar datos como estos y extraer lo que necesitamos.

139
00:13:15,000 --> 00:13:20,000
Necesito extraer los datos numéricos de una cadena de texto, Python es excelente para eso,

140
00:13:20,000 --> 00:13:25,000
necesito extraer diferentes estructuras de datos, Python es muy bueno para eso.

141
00:13:25,000 --> 00:13:29,000
Entonces ya de entrada es algo que Python nos ayuda a hacer.

142
00:13:29,000 --> 00:13:40,000
Prometo que estoy tratando de entender, de enmarcar el problema, prometo que va a haber código, no se estresen con eso.

143
00:13:40,000 --> 00:13:47,000
Entonces, por ejemplo, acá, una manera, existen muchas herramientas en el ecosistema de Python para leer estos formatos,

144
00:13:47,000 --> 00:13:54,000
por ejemplo, las que están mencionadas ahí, OpenFF, OpenMM, MD Analysis, MD Trash,

145
00:13:54,000 --> 00:14:00,000
todas estas son abiertas, se usan tanto en la industria como en la academia.

146
00:14:00,000 --> 00:14:05,000
Yo hago parte de, yo contribuyo código para algunas de ellas,

147
00:14:05,000 --> 00:14:13,000
y como pueden ver ahí es relativamente fácil tomar un archivo de estos, que es estos archivos pdb,

148
00:14:13,000 --> 00:14:17,000
y leerlo y sacar información de una, de ahí.

149
00:14:17,000 --> 00:14:25,000
Lo leí y ya puedo saber cuántos átomos tiene, cuál es, qué tipo de átomo es, y cuáles son sus coordenadas, cuál es su posición.

150
00:14:25,000 --> 00:14:33,000
Y todo esto está construido encima de lo que yo, bueno, no yo, pero yo,

151
00:14:33,000 --> 00:14:38,000
también estoy de acuerdo con lo que dice David Beasley en esta charla,

152
00:14:38,000 --> 00:14:43,000
en los superpoderes de la implementación y la librería estándar de Python.

153
00:14:43,000 --> 00:14:50,000
Todo esto usa los tipos de datos que están incluidos en la librería estándar,

154
00:14:50,000 --> 00:14:53,000
no hay que salirse demasiado ahí, a veces sí, a veces se conviene,

155
00:14:53,000 --> 00:14:57,000
como pueden ver ahí el último ejemplo es, por ejemplo, un arreglo de NumPy,

156
00:14:57,000 --> 00:15:00,000
no es un arreglo o una lista de Python o algo así,

157
00:15:00,000 --> 00:15:04,000
pero si ustedes lo piensan, por ejemplo,

158
00:15:04,000 --> 00:15:12,000
una proteína puede tener, o un sistema de estos puede tener millones hasta miles de millones de átomos.

159
00:15:12,000 --> 00:15:18,000
Entonces si queremos leer eso, no simplemente lo podemos cargar en memoria en una lista o algo así,

160
00:15:18,000 --> 00:15:25,000
o en un diccionario, lo que sea, incluso en un supercomputador nos va a causar problemas,

161
00:15:25,000 --> 00:15:30,000
pero con Python podemos hacer algo, por ejemplo, con generadores.

162
00:15:30,000 --> 00:15:37,000
Con generadores lo leemos como un generador y simplemente nos va a generar los datos que necesitamos en tiempo real, por así decirlo,

163
00:15:37,000 --> 00:15:39,000
y no tiene que estar cargado en memoria todo el tiempo.

164
00:15:39,000 --> 00:15:53,000
Entonces ya de entrada Python ofrece este tipo de estructuras de datos que sirven para este entorno con tanta complejidad y con tanta diversidad de datos.

165
00:15:53,000 --> 00:16:00,000
Entonces ya que tenemos las estructuras con estos archivos pdbs y podemos leerlas,

166
00:16:00,000 --> 00:16:02,000
¿cómo hacemos que se muevan?

167
00:16:02,000 --> 00:16:06,000
Entonces prometo también que esta es la única que va a tener matemáticas, no se preocupen.

168
00:16:06,000 --> 00:16:12,000
Nosotros hacemos que se muevan con algo que se llama dinámica molecular.

169
00:16:12,000 --> 00:16:22,000
La dinámica molecular es súper simple, es solucionar la ecuación de Newton, fuerza igual a masa por aceleración,

170
00:16:22,000 --> 00:16:24,000
para cada uno de los átomos del sistema.

171
00:16:24,000 --> 00:16:29,000
Entonces las proteínas se pueden ver así en cierta representación, que se le llaman una caricatura,

172
00:16:30,000 --> 00:16:38,000
pero realmente son más así, son muchos átomos y muchos enlaces entre estos átomos y muchas interacciones.

173
00:16:38,000 --> 00:16:48,000
Pero entonces lo que hacemos es solucionar la ecuación de Newton para cada uno de ellos de acuerdo a las reglas que le damos de cómo evolucionan y cómo interaccionan entre sí.

174
00:16:48,000 --> 00:16:53,000
Estas reglas es lo que en el área se llama un campo de fuerza o un force field.

175
00:16:53,000 --> 00:17:06,000
Y de nuevo, estos campos de fuerza son archivos o estructuras de datos que tienen diversidad de datos.

176
00:17:06,000 --> 00:17:09,000
De nuevo, Python es excelente para manejar esto.

177
00:17:09,000 --> 00:17:20,000
Y en nuestro caso usamos mucho el formato XML o una variación del formato XML para serializar o para almacenar esta información de los campos de fuerza.

178
00:17:20,000 --> 00:17:34,000
Entonces tenemos, como pueden ver ahí, algunos ejemplos de este residuo, qué átomos tiene, qué tipo de fuerza es, de dónde salió estos parámetros,

179
00:17:34,000 --> 00:17:39,000
y todos estos parámetros tienen su punto flotante, en fin, sus datos en punto flotante, etc.

180
00:17:40,000 --> 00:17:56,000
Entonces, para leer esta cantidad de datos de una manera eficiente, es muy conveniente tener y usar formatos estándar que, por ejemplo, Python pueda leer fácilmente.

181
00:17:56,000 --> 00:18:14,000
Tradicionalmente estos datos se almacenaban en archivos que no eran ningún formato estándar, sino que a algún científico le pareció útil y lo usó y sirvió, pero es muy susceptible a errores.

182
00:18:14,000 --> 00:18:29,000
Y esto se vuelve muy fácil de que se descontrole cuando no hay un formato estándar que realmente podamos forzar.

183
00:18:29,000 --> 00:18:46,000
Entonces, Python de nuevo acá tiene todos estos módulos y librerías como para leer XML, para leer JSON, para leer Jaml, este tipo de archivos, que nos ayuda a serializar estos datos y también leerlos.

184
00:18:46,000 --> 00:18:56,000
Entonces, ¿y cómo se ve una simulación de dinámica molecular en el mundo de Python, al menos con OpenMM?

185
00:18:56,000 --> 00:19:20,000
Esto es una simulación completa. No sé si están familiarizados con el área más o menos, pero que uno pueda hacer esto en 60 líneas, menos porque hay muchos comentarios y líneas que no tienen código, que uno lo puede hacer en 60 líneas de código o algo así, para mí es impresionante.

186
00:19:20,000 --> 00:19:33,000
Y esto es un gran paso en cómo se está abordando el problema y cómo está cambiando el mundo de la dinámica molecular actualmente.

187
00:19:33,000 --> 00:19:47,000
Tradicionalmente se veía algo como lo de la izquierda. Habían estos archivos que había que modificar manualmente y cada vez que uno corría y no le servía, hay que volverlo a modificar y volverlo a correr.

188
00:19:47,000 --> 00:20:00,000
Y son muchos archivos intermedios, mientras que en la manera pitónica moderna son dos líneas, lo que en el otro era un archivo gigante con mucha información.

189
00:20:00,000 --> 00:20:14,000
Si nos devolvemos a este script, cada uno de estos pasos, más o menos estos bloques, sería como un archivo intermedio tradicionalmente, un archivo intermedio que yo tendría que leer y escribir para poder pasar al siguiente bloque.

190
00:20:14,000 --> 00:20:30,000
Y si yo simulaba algo y no funcionaba o explotaba o lo que sea, tenía que volver al archivo y acordarme cuántos espacios, cuál es la precisión flotante que manejan, las unidades, etc.

191
00:20:30,000 --> 00:20:34,000
Tenía que acordar, tener todo eso en la cabeza para poder modificarlo y volver a correr.

192
00:20:34,000 --> 00:20:49,000
Mientras que con Python, espero que se vea, tal vez no mucho, pero bueno, todos estos objetos y estos parámetros viven en el runtime, lo que decimos cuando corremos Python.

193
00:20:49,000 --> 00:21:01,000
Entonces, podemos acceder a ellos mientras corremos el código, podemos inspeccionarlos y además tenemos, por ejemplo, cosas muy convenientes como tener las unidades ahí mismo.

194
00:21:01,000 --> 00:21:11,000
Ya no tenemos que adivinar o leer la documentación de todos estos archivos y saber qué sistema de unidades usan para cada cantidad, sino que la podemos tener ahí mismo.

195
00:21:11,000 --> 00:21:16,000
Esto es gracias a lo que tiene Python en su ecosistema.

196
00:21:16,000 --> 00:21:36,000
Entonces, para mí, como dije, esto es sorprendente, esto es potenciar ese flujo que les mostré de descubrir nuevos tratamientos de muchas maneras.

197
00:21:36,000 --> 00:21:43,000
Porque ahora podemos hacer experimentos, podemos experimentar con muchas ideas.

198
00:21:43,000 --> 00:21:54,000
Porque como dije, tenemos estos objetos en memoria, en runtime y además tenemos toda la flexibilidad de Python para modificar los datos y hacer experimentos con eso.

199
00:21:54,000 --> 00:22:00,000
Y esto ya está generando aceleración en el proceso de descubrimiento de fármacos.

200
00:22:00,000 --> 00:22:20,000
Actualmente y en el futuro, otra de las grandes ventajas de estar en este mundo, en este universo Python, es que Python hoy en día es por excelencia el entorno y el lenguaje de programación para los desarrollos de machine learning y deep learning y todas esas cosas.

201
00:22:20,000 --> 00:22:34,000
Entonces, lo que pensamos en este grupo, todo lo que hemos mostrado acá y todos los proyectos que hemos mostrado acá está abierto y están hospedados en GitHub y se pueden instalar sin problema.

202
00:22:34,000 --> 00:22:41,000
Este es un ejemplo de lo que hicimos, de las contribuciones más nuevas que hemos hecho.

203
00:22:41,000 --> 00:22:50,000
Y es extender este ecosistema con modelos de machine learning y que estos modelos de machine learning aprendan la química.

204
00:22:50,000 --> 00:23:09,000
Entonces básicamente lo que tenemos acá es una red neuronal basada en grafos y entonces existe en el mundo Python, existen ya frameworks que nos permiten tener objetos que ya son redes neuronales basadas en grafos.

205
00:23:09,000 --> 00:23:18,000
Entonces usamos estos mismos objetos que usa todo el mundo para aprender de todos estos parámetros del campo de fuerza que les comenté.

206
00:23:18,000 --> 00:23:35,000
Y en lugar de correr simulaciones cada vez para ver cuál es la dinámica de este compuesto, el modelo ha visto suficientes compuestos y suficientes parámetros para predecir cuáles son los parámetros de esta nueva molécula.

207
00:23:35,000 --> 00:23:48,000
Y eso de nuevo acelera mucho el proceso porque no hay que correr todas las simulaciones, estas simulaciones son costosas, no hay que correr toda la simulación para matrizar esta molécula, sino que solo tenemos un modelo y lo predecimos.

208
00:23:48,000 --> 00:23:57,000
Y si vemos el código de eso, que no se va a ver mucho, pero bueno, básicamente cargamos un modelo que es un modelo PyTorch.

209
00:23:57,000 --> 00:24:03,000
Entonces es un modelo que de nuevo todo está soportado dentro de todo el ecosistema de Python.

210
00:24:03,000 --> 00:24:18,000
Cargamos una molécula normal, como siempre lo hacemos, y simplemente le decimos a partir de ese modelo, por favor créeme un sistema de OpenMM.

211
00:24:18,000 --> 00:24:35,000
Este software Spaloma ya toma este modelo de PyTorch que tiene toda la información del compuesto químico y ya sabe cómo crear un sistema de OpenMM.

212
00:24:35,000 --> 00:24:40,000
Y de ahí podemos usar el mismo script que mostré antes para simularlo con la misma cantidad de líneas.

213
00:24:40,000 --> 00:24:49,000
Entonces solo aumentamos en general como menos de 20 líneas de código y ya tenemos Machine Learning en nuestra dinámica molecular.

214
00:24:49,000 --> 00:24:51,000
Esto de nuevo, sorprendente.

215
00:24:51,000 --> 00:25:05,000
Y bueno, hay mucha más integración con otro tipo de iniciativas que también hacemos parte de toda esta colaboración dentro de nuestro trabajo.

216
00:25:05,000 --> 00:25:14,000
Y es por ejemplo OpenMM ML y es una donde se pueden hacer sistemas mixtos.

217
00:25:14,000 --> 00:25:27,000
Yo puedo decir como, ah, hay unos potenciales Machine Learning y nosotros hicimos esta clase y este objeto para que use estos potenciales Machine Learning.

218
00:25:27,000 --> 00:25:40,000
Y luego simplemente de nuevo creamos un sistema que es un sistema OpenMM y lo usamos dentro del mismo script que mostré hace unas días positivas y ya tenemos nueva simulación con Machine Learning.

219
00:25:40,000 --> 00:25:47,000
Y lo bueno de este enfoque, de este software es que puede crear, aquí en la última línea dice Create Mixed System.

220
00:25:47,000 --> 00:25:58,000
O sea, puede crear sistemas híbridos que tienen parte de sus interacciones con Machine Learning y parte de sus interacciones con el campo de fuerzas clásico.

221
00:25:58,000 --> 00:26:03,000
Y esto es muy importante porque a veces el campo, los modelos clásicos y los modelos no Machine Learning pueden ser mejor.

222
00:26:03,000 --> 00:26:07,000
Entonces es importante tener esa flexibilidad.

223
00:26:07,000 --> 00:26:12,000
También la integración directa con modelos de, por ejemplo, de PyTorch.

224
00:26:12,000 --> 00:26:25,000
Acá estamos creando una clase que hereda de un módulo de redes neuralas de PyTorch y le decimos que por favor a todas las posiciones las eleve al cuadrado.

225
00:26:25,000 --> 00:26:27,000
Y ya, eso es lo único que tenemos que hacer.

226
00:26:28,000 --> 00:26:39,000
Ya después de eso lo salvamos, lo centralizamos en un modelo PyTorch y lo cargamos y hacemos un sistema donde le añadimos esa fuerza donde las posiciones están al cuadrado.

227
00:26:39,000 --> 00:26:45,000
Y usamos toda el álgebra y toda la maquinaria matemática que tienen estos frameworks como PyTorch.

228
00:26:45,000 --> 00:27:03,000
Y ya tenemos de nuevo, lo metemos en nuestro script que mostré hace un momento y tenemos potenciales que usan el álgebra lineal de PyTorch y que estoy seguro que los creadores de PyTorch nunca imaginaron que podía usarse de esta manera.

229
00:27:03,000 --> 00:27:05,000
Entonces es muy interesante.

230
00:27:05,000 --> 00:27:13,000
Entonces sí, espero que haya podido transmitir el mensaje de que realmente Python está involucrado directamente en salvar vidas.

231
00:27:13,000 --> 00:27:26,000
Nosotros hacemos esto de una manera muy transparente, muy honesta, nos gusta la ciencia abierta y estamos, o yo, soy lo suficientemente afortunado que me pagan por hacer esto de manera abierta, código abierto.

232
00:27:26,000 --> 00:27:29,000
Y la industria cada vez le está poniendo más atención a esto.

233
00:27:29,000 --> 00:27:30,000
Entonces muchas gracias.

234
00:27:30,000 --> 00:27:31,000
Muchas gracias.

235
00:27:37,000 --> 00:27:43,000
Wow, wow, wow. Este cierre ha estado bastante poderoso, bastante interesante.

236
00:27:43,000 --> 00:27:51,000
Bien, si tienen alguna pregunta, por favor levanten la mano, me acerco y les doy el micrófono para hacerle una pregunta a Iván.

237
00:27:51,000 --> 00:27:55,000
Por ahí alguien que tenga alguna duda, un comentario, algo que aportar.

238
00:27:55,000 --> 00:27:56,000
Allá, acá.

239
00:27:56,000 --> 00:27:58,000
Ok, voy escalando.

240
00:27:58,000 --> 00:27:59,000
¿Está bien?

241
00:27:59,000 --> 00:28:01,000
Muy bien, para acá con Karen.

242
00:28:03,000 --> 00:28:05,000
Lo siento, me españoles, malo.

243
00:28:05,000 --> 00:28:07,000
No hay problema.

244
00:28:07,000 --> 00:28:09,000
¿Puedo preguntar en inglés?

245
00:28:09,000 --> 00:28:10,000
Sí, sí.

246
00:28:11,000 --> 00:28:23,000
¿Cómo se juegan estos paquetes en el mundo de jugar en el mundo de Alphafold?

247
00:28:23,000 --> 00:28:29,000
Y, ¿interactan o le dan a cada otro de alguna manera?

248
00:28:29,000 --> 00:28:41,000
Esto no es mi campo, pero ¿cómo se trabaja con el Torch de OpenMM en ese tipo de espacio?

249
00:28:53,000 --> 00:28:59,000
Es más, Alphafold usa OpenMM y usa código que nosotros hemos escrito para hacer lo que hace.

250
00:28:59,000 --> 00:29:07,000
Y sí hay mucha relación y, por ejemplo, cuando hablaba de las estructuras de las proteínas, acá, por ejemplo, en esta base de datos,

251
00:29:07,000 --> 00:29:17,000
normalmente son las tradicionalmente, históricamente se ponían las estructuras que se resolvían con métodos experimentales.

252
00:29:17,000 --> 00:29:24,000
Pero ya hoy con Alphafold, como ya no tenemos, ya podemos predecir las estructuras a partir de la secuencia que nos hablaba en la charla anterior,

253
00:29:24,000 --> 00:29:27,000
sigo insistiendo, es perfecta la introducción para eso.

254
00:29:27,000 --> 00:29:44,000
Ya podemos predecir las estructuras y ya esta base de datos tiene todo un archivo de todas las estructuras que Alphafold ha predicho en los 3, 4 años que lleva.

255
00:29:44,000 --> 00:29:57,000
Entonces ya nosotros podemos usar esta información que Alphafold genera directamente en nuestro script, porque ya están en formato que podemos usar en las herramientas.

256
00:29:57,000 --> 00:30:12,000
Y no solo eso, cuando vemos estas integraciones con Machine Learning, evidentemente lo que nosotros podemos generar es información dinámica,

257
00:30:12,000 --> 00:30:25,000
Alphafold es estructura, entonces es estático, pero podemos generar con estas herramientas información dinámica que Alphafold puede usar para entrenar su estructura.

258
00:30:25,000 --> 00:30:34,000
Entonces eventualmente lo que va a hacer Alphafold y ya básicamente lo está haciendo, es que va a predecir cómo interacciona no solo la estructura de la proteína,

259
00:30:34,000 --> 00:30:47,000
sino la estructura proteína con un compuesto y donde el compuesto se pega realmente, sin tener que pasar por toda la simulación, pero obviamente va a usar los datos que nosotros generamos con todas estas simulaciones.

260
00:30:47,000 --> 00:30:50,000
Entonces sí, la respuesta sí.

261
00:30:50,000 --> 00:30:52,000
Gracias Iván por acá.

262
00:30:52,000 --> 00:30:53,000
Una pregunta.

263
00:30:53,000 --> 00:30:59,000
Muchas gracias por la charla, me ha gustado mucho.

264
00:30:59,000 --> 00:31:14,000
Mi pregunta es, me gustaría saber tu opinión sobre cómo ves que va a evolucionar la biología molecular con los nuevos avances de Machine Learning, tipo los nuevos modelos de GPT y esto.

265
00:31:14,000 --> 00:31:17,000
Tú cómo ves hacia dónde vamos.

266
00:31:17,000 --> 00:31:25,000
Hay al menos dos enfoques que yo puedo ver.

267
00:31:25,000 --> 00:31:39,000
Uno, ya hay pipelines completos de modelos grandes de lenguaje, prediciendo, optimizando la estructura de las proteínas o de enzimas.

268
00:31:39,000 --> 00:31:43,000
Ya existe un chat GPT para optimizar proteínas.

269
00:31:43,000 --> 00:31:49,000
Y no solo eso, sino que se demostró experimentalmente que está haciendo un buen trabajo.

270
00:31:49,000 --> 00:31:58,000
De nuevo, estos modelos son buenos para pegarle al promedio, a lo que en promedio pasa.

271
00:31:58,000 --> 00:32:00,000
Y eso va a ayudar un montón.

272
00:32:00,000 --> 00:32:05,000
Eso ayuda un montón porque en promedio, el promedio muchas veces funciona.

273
00:32:05,000 --> 00:32:08,000
Pero cuando no funciona, ahí es donde tenemos problemas.

274
00:32:08,000 --> 00:32:24,000
Porque como no podemos interpretar muy bien estos modelos, no podemos saber qué realmente la ciencia están entendiendo o qué están totalmente destruyendo de la ciencia y que sabemos que aplica, pero pronto lo están entendiendo totalmente mal.

275
00:32:24,000 --> 00:32:28,000
Como no son interpretables, ahí tenemos un problema también, es un límite.

276
00:32:28,000 --> 00:32:37,000
Ahí es donde siempre va a haber una interacción con expertos o con humanos o con ciudadanos que también estén interesados en hacer ciencia ciudadana.

277
00:32:37,000 --> 00:32:39,000
Ese es un enfoque.

278
00:32:39,000 --> 00:32:51,000
Y el otro enfoque, por ejemplo, en lo personal, yo ya uso chat GPT para todo el boilerplate, todo el código o incluso correos, cartas de recomendación, etc.

279
00:32:51,000 --> 00:32:56,000
Entonces también me ayuda mi trabajo e indirectamente está ayudando a esto.

280
00:32:57,000 --> 00:33:00,000
Super, super, super. Otra vez un fuerte aplauso por Iván, por favor.

281
00:33:00,000 --> 00:33:01,000
Gracias.

