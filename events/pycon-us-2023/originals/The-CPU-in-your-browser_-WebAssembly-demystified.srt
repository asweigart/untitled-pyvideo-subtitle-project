1
00:00:00,000 --> 00:00:18,000
Cool. Okay. Let's talk about WebHendly. Very quick introduction of who I am. I work at

2
00:00:18,000 --> 00:00:26,000
Anaconda. In the Python community, I've been known for many projects in the past. I was

3
00:00:26,000 --> 00:00:34,000
involved in PyPy, Hpy, PB++ on the things. Since one year ago, I worked at Anaconda on

4
00:00:34,000 --> 00:00:40,000
the Py 15, which is why I got interested in WebAssembly and its technologies. It's going to be

5
00:00:40,000 --> 00:00:48,000
exciting, and I want to talk to you about this. So WebAssembly, what it is. As I say, it's

6
00:00:48,000 --> 00:00:54,000
exciting technology. The naming is a bit weird because for my part, it is not strictly web, and

7
00:00:54,000 --> 00:01:00,000
it's not an assembly. I understand it's not an assembly language. So what is it? I did what

8
00:01:00,000 --> 00:01:08,000
everybody is doing these days. I asked the QPQ, and they told me that WebAssembly is a binary

9
00:01:08,000 --> 00:01:16,000
instruction format for a spec-based GPU. What does it mean? So what does QPQ say? It's a

10
00:01:16,000 --> 00:01:20,000
different machine in the sense that you can think of it as a CPU. It's a different CPU. It's an

11
00:01:20,000 --> 00:01:30,000
instruction set binary format that can execute low-level code in a fast way. An incredibly

12
00:01:30,000 --> 00:01:36,000
good property of WebAssembly is that it's designed to be sun-bottled and safe, which means that you

13
00:01:36,000 --> 00:01:44,000
can run untrusted code in your browser, for example, and be sure that this untrusted code cannot

14
00:01:44,000 --> 00:01:50,000
harm you. I say the browser, but it's not the only way of running it. That's why I stroke out the

15
00:01:50,000 --> 00:01:56,000
web part in the first slide. It's a different CPU. It's a different machine. You need an emulator

16
00:01:56,000 --> 00:02:02,000
for it. And all the browsers, all the modern browsers, support WebAssembly natively, but it's not

17
00:02:02,000 --> 00:02:10,000
the only way. Node.js also has a virtual machine inside. There are other runtimes which are

18
00:02:10,000 --> 00:02:16,000
independently and then can run WebAssembly code, for example, once time, once matter and exit. And

19
00:02:16,000 --> 00:02:24,000
since it works in the browser, it's really the most ubiquitous VM ever implemented. It can literally

20
00:02:24,000 --> 00:02:30,000
run some millions of devices right now. It's a world standard developed by Bike and Alliance, and

21
00:02:30,000 --> 00:02:38,000
it's also why it's getting another quality. It's important, and part of the reason why it's so

22
00:02:38,000 --> 00:02:44,000
successful is that you can use Waze as a compilation target. So you can take C code, C++, or other

23
00:02:44,000 --> 00:02:50,000
languages, compile it to WebAssembly and run it at a very, very fast speed. It's nearly 90 speed.

24
00:02:50,000 --> 00:02:56,000
Which means that you can take natively application and run them, for example, in the browser in a

25
00:02:56,000 --> 00:03:02,000
very easy way, something which was not possible before. Examples of applications which were ported

26
00:03:02,000 --> 00:03:08,000
to WebAssembly and compiled to WebAssembly are Photoshop or AutoPen or C parton. It's similar to

27
00:03:08,000 --> 00:03:14,000
what JDM and .NET provided years ago, but the key difference is that it's low level. So you can take

28
00:03:14,000 --> 00:03:20,000
C and compile to WebAssembly, something that you could not do with the JDM. Maybe you can compile

29
00:03:20,000 --> 00:03:26,000
to JDM but using some thoughts which are low. So whatever you want to do, use in mind, not only, but

30
00:03:26,000 --> 00:03:32,000
use in mind. From my point of view, the best naming for keys should be low level with machine,

31
00:03:32,000 --> 00:03:36,000
a part that was already taken so they can't use it. Naming is hard, you know, like we always say

32
00:03:36,000 --> 00:03:42,000
keys and then it starts with T. Hello world in WebAssembly. I think it's the simplest thing that I

33
00:03:42,000 --> 00:03:48,000
could do. I decided to use C as a compilation language for WebAssembly because I hope that many

34
00:03:48,000 --> 00:03:54,000
of you know this. I'm not a big fan of C, but I'm a big fan of C. I'm a big fan of C. I'm a big fan of

35
00:03:54,000 --> 00:04:00,000
WebAssembly. I hope that many of you know this. Factorial functions computing like the factorial

36
00:04:00,000 --> 00:04:08,000
and C. We can compile this to WebAssembly using Flan, so the part of the RLVM script.

37
00:04:08,000 --> 00:04:16,000
This is the compilation line, I don't care about this. What happens is that like you start with

38
00:04:16,000 --> 00:04:22,000
factorial.C and you get as an output factorial.Wast, which is a binary. But if you want to inspect it,

39
00:04:22,000 --> 00:04:30,000
you see how it was set in the low level. You can use the tool which did assembly and emits like a

40
00:04:30,000 --> 00:04:40,000
readable way of, well, readable format of WebAssembly binary. This format is called WAP.

41
00:04:40,000 --> 00:04:46,000
And the reason why I wanted to do it with factorial was just to be able to use this name. WebAssembly

42
00:04:46,000 --> 00:04:58,000
format. This is the output of WAP to WAP on the WAP file which I compiled before. I'm not going to

43
00:04:58,000 --> 00:05:06,000
speak too much about this. This is really how it looks like and what you can see is that the WebAssembly

44
00:05:06,000 --> 00:05:14,000
module contains a lot of functions. It is like this format. And one of these is factorial, which takes

45
00:05:14,000 --> 00:05:22,000
what is the signature parameter which is an integer of 32d, 3.3.3.9.22, and you have local variables,

46
00:05:22,000 --> 00:05:30,000
and they are compiled to CPU registers. And that's why it's fast because the language of this instruction

47
00:05:30,000 --> 00:05:38,000
set is lower than that, but it can be much better than on a real CPU. The loop which computes the

48
00:05:38,000 --> 00:05:46,000
factorial and it has I32.add is the instruction which adds to local variables which are of this

49
00:05:46,000 --> 00:05:54,000
size and it really can be compiled into a single x86 instruction or finger piece. This is how the

50
00:05:54,000 --> 00:06:02,000
view format is implemented running WebAssembly. And as soon as it's like we can run WebAssembly in the

51
00:06:02,000 --> 00:06:12,000
browser, let's try a live demo and see whether it works, is the code which you need to run to load a WebAssembly

52
00:06:12,000 --> 00:06:20,000
binary in the browser and run it from JavaScript. I'm not going to explain the details, but the important

53
00:06:20,000 --> 00:06:30,000
thing is that here we are fetching the binary code which was compiled by C land before and then we

54
00:06:30,000 --> 00:06:38,000
instantiate the WebAssembly module and then we get something which we can call from JavaScript.

55
00:06:38,000 --> 00:06:48,000
And here if I try to come confused, my JavaScript code involves the function and it writes the result here.

56
00:06:48,000 --> 00:06:56,000
So this is like the basic example of taking C code, compiled WebAssembly, running from the browser using JavaScript.

57
00:06:56,000 --> 00:07:04,000
But WebAssembly is like it can run multiple times, it's only in the browser. So this is another example in which

58
00:07:04,000 --> 00:07:12,000
you can use the same binary code as before and run it from Python using one time which is one of the many

59
00:07:12,000 --> 00:07:18,000
view formats that's available. And it's basically the equivalent of this web before. I'm not going into details,

60
00:07:18,000 --> 00:07:23,000
but you can see that again we are instantiating, reading the binary, getting the function that you can

61
00:07:23,000 --> 00:07:30,000
close from Python. And I want to be very clear, this is not Python in the browser. Like here I see Python

62
00:07:30,000 --> 00:07:37,000
running on my real CPU running a WebAssembly module which I compiled. It has nothing to do with what we do with

63
00:07:37,000 --> 00:07:43,000
Python, we will see later how we turn things upside down.

64
00:07:43,000 --> 00:07:51,000
Okay, so basic example done. What you can do with WAPT and why everybody is so excited about it.

65
00:07:51,000 --> 00:08:01,000
So something that you can do is computation. You can compute a lot of things, burn your CPU, make the planet even hotter.

66
00:08:01,000 --> 00:08:05,000
And that's it.

67
00:08:08,000 --> 00:08:19,000
By default you cannot do anything else with WebAssembly which you don't add access to the Python system.

68
00:08:19,000 --> 00:08:25,000
You don't add access to the network. You cannot do any IOP. You cannot do anything control. You don't even have

69
00:08:25,000 --> 00:08:35,000
literacy. So like it's the reason why it's safe, you can see. But it made me think, hey, what's going on?

70
00:08:35,000 --> 00:08:42,000
Because how can we turn C as into something useful? And the key part of the technology is imports.

71
00:08:42,000 --> 00:08:54,000
So when I declare a WebAssembly binary, I can function WebAssembly, I can declare that it imports from function and it can close them.

72
00:08:54,000 --> 00:09:03,000
And the imports are provided by the host. In the example before, this example here, the host is just it calling WebAssembly.

73
00:09:03,000 --> 00:09:10,000
In this example the host is Python calling WebAssembly. And the imported functions are provided by the host,

74
00:09:10,000 --> 00:09:17,000
which means that the host has full control over each and it can implement them as it wants.

75
00:09:17,000 --> 00:09:25,000
Another example in which we see how this import action works is what is the L word?

76
00:09:25,000 --> 00:09:35,000
Like you print something from your program. But the normal word of the word WebAssembly cannot print anything.

77
00:09:35,000 --> 00:09:44,000
So to print, you need to define some external function, printSpr and printInt, in the case, and you can call them from C.

78
00:09:44,000 --> 00:09:56,000
And then when we instantiate the module, we need to provide a way to implement this functionality.

79
00:09:57,000 --> 00:10:06,000
And if I compile it, disassemble, I get the work file and you can see that inside the WebAssembly module,

80
00:10:06,000 --> 00:10:14,000
now the WebAssembly module specifies that in order to work, you need to provide these two functions from the environment.

81
00:10:15,000 --> 00:10:26,000
And then if I try to run it, I'm not going to do anything in the browser now, but you can have the demo which works from Node, for example.

82
00:10:26,000 --> 00:10:33,000
So the code is very similar to the one before. I get the WebAssembly binary, I instantiate it,

83
00:10:33,000 --> 00:10:41,000
but the key part is that I'm providing the environment containing the imported function, in which I have printInt and printSpr,

84
00:10:41,000 --> 00:10:51,000
and then I can implement it in JavaScript, in this case, to do what I want. So printInt takes an integer and consult the program.

85
00:10:51,000 --> 00:11:03,000
printSpr is much harder than on RubyC now, how it works. And when I instantiate it, I pass the import object to the WebAssembly runtime,

86
00:11:03,000 --> 00:11:15,000
so that it knows how to feed the rest. And how do I implement printing a string? In WebAssembly memory, it's just a giant WebAssembly array.

87
00:11:15,000 --> 00:11:28,000
And the WebAssembly code inside the module, integer is run, and it has pointers, and like the C code, manipulated pointers as we are used to,

88
00:11:28,000 --> 00:11:36,000
but actually they are offsets inside the array. And from JavaScript, I can access the array and see the content of the run of the module.

89
00:11:36,000 --> 00:11:47,000
So my function printSpr takes a pointer, which is like an offset, and with its magic, I can, I don't know, I don't know how to do that,

90
00:11:47,000 --> 00:11:54,000
I just copy and paste the things around. And I can access the bytes in the memory using functions like this.

91
00:11:54,000 --> 00:12:00,000
And then I have to something that is very inefficient, and don't do it at home, please don't tell people that I showed it to you.

92
00:12:00,000 --> 00:12:11,000
But there is a way of getting the individual bytes from the memory, and until I find the last best person, which is the zero, and at the end of the string, the C.

93
00:12:11,000 --> 00:12:20,000
So I paste all of them, combine them in the string, and then finally I load the string. I don't have the new deal in the browser, I have it here,

94
00:12:20,000 --> 00:12:38,000
let's see if it works, so I can use node run counter node.js, and it works. And I can do the same in Python, using the same whilst time module that I showed before,

95
00:12:38,000 --> 00:12:50,000
and in this case, well, it's very similar again. I can get the memory, in this case memory is like an instance of some class provided by the whilst time interpreter,

96
00:12:50,000 --> 00:13:02,000
and I can read the memory, or its value is a number, so it is a key value of my string, and then I combine them into a string, and then finally print it.

97
00:13:02,000 --> 00:13:16,000
So this is like, I have 14 minutes, I can't go into many details, but there is a number of views of how you can start from nothing, like WebAssembly with no external access to anything,

98
00:13:16,000 --> 00:13:26,000
and slowly build your way up to provide functionality. One example is Fives, by default I cannot actually use Fives system from WebAssembly,

99
00:13:26,000 --> 00:13:36,000
but I can write important functions which provide functionality for opening a file, reading a file, writing to the Fives system, and the like.

100
00:13:36,000 --> 00:13:45,000
And what they do is really up to the host. Like me, since I'm setting the WebAssembly module, I decide what opening the file means.

101
00:13:45,000 --> 00:13:53,000
What writes into the file means, where does bytes go to? And if I'm the host, I can decide that I can forward them to the real Fives system,

102
00:13:53,000 --> 00:14:04,000
so that my WebAssembly code can read my files, or I can implement a completely VSL-emulated Fives system, which is what happens in the browser, for example, for a PiedEye in Fives 2.

103
00:14:04,000 --> 00:14:14,000
So you have a PiedEye, you have a VProfex system which contains a standard library of Python, and you can import them, and then the Python has opened the file,

104
00:14:14,000 --> 00:14:27,000
and then after many layers you arrive to the import, the important function which is written in Java script, and read the file which is somewhere in memory, it's in the VProfex system.

105
00:14:28,000 --> 00:14:42,000
So, I don't want to do all of this manually every time I want to use WebAssembly. And I need a way of having normal functionality which I expect for legacy applications.

106
00:14:42,000 --> 00:14:50,000
Importing files, anything to the console, your IOR network, etc. And there are basically two big ways of doing it.

107
00:14:50,000 --> 00:15:00,000
The Perciven scripten, which is historically the first toolchain which was built around WebAssembly, I think that it actually was created before WebAssembly.

108
00:15:00,000 --> 00:15:12,000
You can think of like a runtime environment which feeds the gap between the web and the public. So it implements a complete public system in a way that can be exposed to WebAssembly,

109
00:15:12,000 --> 00:15:24,000
so if you have your C program compiled using the Nspyten toolchain, you add something which works in the browser almost out of the box, out of the box with the Nspyten script.

110
00:15:24,000 --> 00:15:36,000
And it implements a lot of functionality, existing libraries available, but since the runtime of Nspyten is in memory in JavaScript,

111
00:15:36,000 --> 00:15:52,000
it can work only in a context in which you have a JavaScript interpreter which can run this runtime. So it works in browser, it works in node, but for example it doesn't work in the other runtimes like one time which I showed before.

112
00:15:52,000 --> 00:16:06,000
And the other alternative is Waze, which is basically a standard library of imports. It's a standard which defines a lot of functionality to open files, to do networks,

113
00:16:06,000 --> 00:16:28,000
and a host like a runtime can decide to support Waze and then it means that if I have a binary which was compiled against Waze, then I can run it on top of any runtime which exposes the Waze functionality.

114
00:16:28,000 --> 00:16:40,000
And it basically feels more or less the same kind of, it solves the same problem in Python, but with a different mindset.

115
00:16:40,000 --> 00:16:54,000
Usually, it's not something true, but usually Nspyten is used when you want to target the browser and Waze is used when you want to run your code on the server, like on a real system because Waze is often a forward call to the real console.

116
00:16:55,000 --> 00:17:04,000
But for example, you can also polish your Waze in the browser and run it also in the Rasp. It's not completely separate, but it's a good approximation.

117
00:17:04,000 --> 00:17:17,000
A good way of thinking about it is that WebAssembly is the CPU and Waze or Nspyten are the operating system on top of it. Not completely true, but it's a good approximation.

118
00:17:17,000 --> 00:17:32,000
Waze contains a lot of different functionalities so you can decide which functionality to solve, how you can decide to only define system and not the network or if it's real.

119
00:17:32,000 --> 00:17:42,000
WebAssembly is not only this. There are a lot of exciting features which will come in the next weeks, months or years, as you know.

120
00:17:42,000 --> 00:17:57,000
WebAssembly was designed as an MVP, manual viable product. So they decided to do the minimal thing that could be useful and so that they could standardize, implement it everywhere, see whether it was useful.

121
00:17:57,000 --> 00:18:06,000
And now on top of it, they are adding new functionalities and they need to standardize them and so there is a lot of processing involved.

122
00:18:06,000 --> 00:18:25,000
But WebAssembly is getting higher and higher level so that if the current situation is that WebAssembly is very good for C and C++ code, the newer functionalities will make it a better competition target for higher level languages.

123
00:18:25,000 --> 00:18:34,000
So for example, you can add native exceptions in WebAssembly, support for the average collector, other things.

124
00:18:34,000 --> 00:18:50,000
Exception handling is a good example because it means that if you add exception handling at the level of WebAssembly and add two languages which implement the respective exception in terms of this functionality of the different machines,

125
00:18:50,000 --> 00:18:59,000
I can imagine raising an exception from C++ and capturing it in Python or Rust or in whatever other language support, etc.

126
00:18:59,000 --> 00:19:13,000
And if you expose really... it's not going to exist yet, but if you expose classes as a WebAssembly feature, then you can add classes in any language and continue by the other.

127
00:19:13,000 --> 00:19:22,000
So it's an exciting technology for multi-language integration. We are not there yet, but I think that this is the direction in which it's going.

128
00:19:22,000 --> 00:19:27,000
And I know that not everybody is using it, but we'll see how it goes.

129
00:19:27,000 --> 00:19:36,000
How does all of this relate to Python? One way of using WebAssembly in a Python context is what I showed before.

130
00:19:36,000 --> 00:19:44,000
So I have Python running in my CPU normally, and I can run WebAssembly code from it.

131
00:19:44,000 --> 00:19:58,000
And it is useful for the members who want to implement a plugin system because I can run a software code and plug it into my application without worrying that it can break.

132
00:19:58,000 --> 00:20:08,000
The other way is the opposite, which is not run WebAssembly from Python, but take Python and compile it to WebAssembly.

133
00:20:08,000 --> 00:20:17,000
So you can take C Python, which is between C, and compile to WebAssembly, and then run the virtual machine of Python inside the virtual machine of WebAssembly.

134
00:20:17,000 --> 00:20:23,000
And this is what we do, what we think about when we talk about Python in the browser.

135
00:20:23,000 --> 00:20:28,000
So you have a project called Pyodide, which is a project that Python uses to build a phone, which does it for computers.

136
00:20:28,000 --> 00:20:39,000
So you get a blog binary, which is the Python interpreter, and then you can see your Python application in Greek and it will execute it as it does on x86 or R.

137
00:20:39,000 --> 00:20:55,000
So you can compile C Python, vanilla, on one, and it's Tire-C support, which means that the core developers try not to break it without any promise.

138
00:20:55,000 --> 00:21:10,000
So you can see that you're thinking of trying to make it Tire-2, which is more official support, say, and they will try to do promise and try not to break in the next few years.

139
00:21:10,000 --> 00:21:23,000
And then you have Pyodide, which takes this core functionality and on top of it adds a lot of other things, including external packages, non-Py, SyPy, macrolib, and the like.

140
00:21:23,000 --> 00:21:30,000
And then on top of Pyodide you have PyTick, which makes everything very easy to use.

141
00:21:30,000 --> 00:21:37,000
You can also have MicroPython, which is another implementation of Python, which is like...

142
00:21:40,000 --> 00:21:49,000
Okay, I'm not going to spend it all, but which is very small and fast, so it's often too busy in the browser.

143
00:21:49,000 --> 00:21:56,000
You can use Jupyter Lite, which is like Jupyter but using WebAssembly and PyDyde so that it doesn't require a server.

144
00:21:56,000 --> 00:22:07,000
And you have PySeed.com, which is the new service that we're launching here at Anaconda, which makes it very, very easy to drive and host and deploy PySeed applications in the browser.

145
00:22:07,000 --> 00:22:13,000
And by the way, you can see that these slides are hosted on PySeed.com, and I'm a level driver.

146
00:22:13,000 --> 00:22:17,000
I know about the WebAssembly collectors and git compilers. I don't know anything about the web.

147
00:22:17,000 --> 00:22:22,000
If I was able to deploy this, it would be easy and most of all it would be nice for free.

148
00:22:25,000 --> 00:22:35,000
There are more talks about PySeed at the conference. Two of them were in the past.

149
00:22:35,000 --> 00:22:42,000
But fortunately we have videos so you can look at them.

150
00:22:42,000 --> 00:22:48,000
And I just like a few hours ago I was listening to PySeed's presentation and it was like very, very nice.

151
00:22:48,000 --> 00:22:51,000
And the speaker was very excited about WebAssembly.

152
00:22:51,000 --> 00:22:59,000
He explained how it's useful. It was very nice from my point of view to see how it's used in the field.

153
00:22:59,000 --> 00:23:04,000
And I was listening to the talk and said, wow, PySeed is very cool and I'd like to help them.

154
00:23:04,000 --> 00:23:07,000
And then you like what I'm really doing.

155
00:23:07,000 --> 00:23:18,000
And just after lunch there is a subject talk about PySeed, what happened in the last year, what are the upcoming features.

156
00:23:18,000 --> 00:23:26,000
So I suggest if you're interested in the subject to come to the talk and listen to it.

157
00:23:26,000 --> 00:23:33,000
And by the way, Pavi just showed me how he wants to run the talk.

158
00:23:33,000 --> 00:23:41,000
It's full of light demos and if we try to run things in the browser lightly, I code in much better way.

159
00:23:41,000 --> 00:23:48,000
I'm counting with breath. So if you want to see how it goes, you should really try and...

160
00:23:48,000 --> 00:23:50,000
One 30.

161
00:23:50,000 --> 00:23:54,000
One 30 in a room 365.

162
00:23:54,000 --> 00:24:02,000
And then there is the Anaconda booth in the bedroom and you can ask us about PySeed.

163
00:24:02,000 --> 00:24:05,000
There are demos. You can get some swag.

164
00:24:05,000 --> 00:24:09,000
You also have PySeed hoodies with the rabbit.

165
00:24:09,000 --> 00:24:14,000
And it's not like we have few of them available so it's not for everyone.

166
00:24:14,000 --> 00:24:22,000
And a good way of getting the hoodie is to present a PySeed talk at Python because Blake asked for one and I think he will get it.

167
00:24:22,000 --> 00:24:26,000
So next time you want the hoodie, you can present a PySeed talk.

168
00:24:26,000 --> 00:24:31,000
And on Friday we are going to have an open space and then we are working for the free.

169
00:24:31,000 --> 00:24:37,000
I think that I'm done. So I see I still have five minutes for some questions.

170
00:24:37,000 --> 00:24:45,000
So these are the links for like the GitHub repo which contains the slides so you can also get the source code.

171
00:24:45,000 --> 00:24:59,000
These are like the PySeed.com URL which contains the slides and honestly it's not a very nice URL and I feel that we are getting nice URLs soon, they promised me.

172
00:24:59,000 --> 00:25:03,000
And I also like to use the sort and wire of activities they say.

173
00:25:03,000 --> 00:25:07,000
And that's all. If you have questions, I will be happy to answer.

174
00:25:19,000 --> 00:25:22,000
If you have questions, please come forward to the mic.

175
00:25:22,000 --> 00:25:34,000
Thank you, Python. It would be super cool if it would be possible to compile Excel Python code, not C++ but Python code into WebAssembly.

176
00:25:34,000 --> 00:25:37,000
Are you aware of any work in this field?

177
00:25:37,000 --> 00:25:46,000
Not really. Compiling Python with a family is not easier or harder than compiling Python to feed.

178
00:25:46,000 --> 00:25:54,000
And Python is not really designed to be compiled. So it's the same kind of problem.

179
00:25:54,000 --> 00:26:05,000
I think that if my PyC will compile Python annotated with typing and something, I don't know how it really works and whether it works well or not.

180
00:26:05,000 --> 00:26:14,000
I think that if you want Python to be compiled to WebAssembly, we need to keep the language and remove some of the dynamicity.

181
00:26:14,000 --> 00:26:19,000
And JavaScript works just the same with Ascendantscript.

182
00:26:19,000 --> 00:26:28,000
So you have JavaScript which is very dynamic, it's similar to Python, and Ascendantscript which is basically a different language, which seems to be similar to JavaScript,

183
00:26:28,000 --> 00:26:31,000
but it's going to be easy and not really compile to WebAssembly.

184
00:26:31,000 --> 00:26:36,000
So I think that the way of doing this for Python is that there's nothing like this at least as far as I know.

185
00:26:36,000 --> 00:26:46,000
So my first question is related to more with the compatibility of PyScript with the different types of JavaScript engines.

186
00:26:46,000 --> 00:26:58,000
With Python-on-Q or Quick-AS, is there going to be more future support for some of the non-native JavaScript runtime supports?

187
00:26:58,000 --> 00:27:02,000
We usually have most popular ones like V8, right?

188
00:27:02,000 --> 00:27:03,000
Yes.

189
00:27:03,000 --> 00:27:07,000
So do you have compatibility with PyMonkey or with Quick-AS?

190
00:27:07,000 --> 00:27:14,000
I don't know the answer, but I do know the different types of answers.

191
00:27:14,000 --> 00:27:26,000
What happens is that PyDi, for example, runs on every runtime which supports WebAssembly with the different kinds of engines and I don't know what they are.

192
00:27:26,000 --> 00:27:28,000
So does PyMonkey support them?

193
00:27:28,000 --> 00:27:30,000
Yes, it does support them.

194
00:27:30,000 --> 00:27:33,000
In fact, it works on Firefox, so I guess that PyMonkey just works.

195
00:27:33,000 --> 00:27:35,000
But I never tried.

196
00:27:35,000 --> 00:27:39,000
And with Quick-AS, I don't think that it supports WebAssembly, fortunately, no.

197
00:27:39,000 --> 00:27:42,000
But maybe it does. I don't think no.

198
00:27:42,000 --> 00:27:45,000
Thank you for the wonderful talk. You learned a great deal.

199
00:27:45,000 --> 00:27:47,000
I had a low-level technical question.

200
00:27:47,000 --> 00:27:53,000
You showed the W8 in PyWrite, and I had this question which was WebAssembly specific.

201
00:27:53,000 --> 00:27:59,000
How thin is the correlation layer between that and actual assembly or actual machine on the CPU?

202
00:27:59,000 --> 00:28:04,000
I don't know. I never looked at it in the home board or the CPU.

203
00:28:04,000 --> 00:28:10,000
WebAssembly is redesigned to be a good file expert case.

204
00:28:10,000 --> 00:28:16,000
And then it's really up to the runtime. I think they have a JIT compiler which is there as the code.

205
00:28:16,000 --> 00:28:23,000
You can expect a bit of over-redesign on the order of 20%, 40% compared to, like, net-to-code.

206
00:28:23,000 --> 00:28:33,000
But I think it's getting to improve because, for example, they are adding support for FIMD instructions.

207
00:28:33,000 --> 00:28:42,000
So you can currently GCC compile into W8-36, then use the automated virtualization, and compile into a reference, it cannot.

208
00:28:42,000 --> 00:28:48,000
But when they will have the low-level instructions, it will be able to. So in theory, we should catch up.

209
00:28:48,000 --> 00:28:51,000
Thank you.

210
00:28:51,000 --> 00:29:01,000
Hi. Yes, great talk. I also wanted to note that I'm curious what you think about the conflict between the first half and the second half of your talk that I saw,

211
00:29:01,000 --> 00:29:08,000
which is that the promise of the universal binary or something like that, I forget exactly what you phrase it,

212
00:29:08,000 --> 00:29:18,000
the universal virtual machine, seems to conflict with the difference between WASD and script and all these features you also mentioned that are going to be added.

213
00:29:18,000 --> 00:29:23,000
Do you see this as sort of in conflict, or is there a way to make sure these things all, you know,

214
00:29:23,000 --> 00:29:30,000
present one easy experience to the poor developer who has to produce WASD code?

215
00:29:30,000 --> 00:29:35,000
I don't see it as a conflict. I see it as different platforms which are used for different things.

216
00:29:35,000 --> 00:29:47,000
And I mean, and scripting is a way of running things in the browser, which works very well, and it gives you some strength.

217
00:29:47,000 --> 00:29:55,000
The fact that it works on the scripting doesn't mean that you cannot, you can't, okay, go.

218
00:29:55,000 --> 00:29:58,000
The biggest difference between a script and WASD is when you compile things.

219
00:29:58,000 --> 00:30:05,000
So if you have something which is compiled in scripting, it works only in an environment which is a part of the web.

220
00:30:05,000 --> 00:30:13,000
But from the source code, you can compile it to WebAssembly, to WASD and to scripting, and then deploy it on different machine.

221
00:30:13,000 --> 00:30:21,000
But it's really up to the runtime. For example, I see that there are CloudFed workers which consume WebAssembly binaries,

222
00:30:21,000 --> 00:30:27,000
and then it's up to CloudFed to decide what they want to offer. And they might not offer all the WASD functionality.

223
00:30:27,000 --> 00:30:35,000
So there is, this is all well, always be this kind of tension in the standard. Every runtime decides what to offer.

224
00:30:35,000 --> 00:30:43,000
And it's not that WASD solves everything because maybe runtime offers only a subset of WASD, and then you need to ensure that you use only this.

225
00:30:43,000 --> 00:30:48,000
But I think it's not soluble from that point of view.

226
00:30:48,000 --> 00:30:50,000
Thanks for coming.

227
00:30:54,000 --> 00:30:57,000
Thank you, Antonio. That was super informative.

