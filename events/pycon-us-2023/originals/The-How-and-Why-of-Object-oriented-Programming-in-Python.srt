1
00:00:00,000 --> 00:00:12,480
Okay. It's 9 o'clock. Let's get started. Good morning, everybody. Welcome to PyCon 2023

2
00:00:12,480 --> 00:00:17,200
from my side. My name is Mike Moller and I will be your tutorial instructor for this

3
00:00:17,200 --> 00:00:24,120
morning. So we're going to look at object-oriented programming in Python, how we do it and why

4
00:00:24,120 --> 00:00:29,360
we do it. First, I would like to start with a short introduction from my side that you

5
00:00:29,360 --> 00:00:33,040
already know who's talking here for three hours. And then I'm going to get a little bit of

6
00:00:33,040 --> 00:00:40,600
overview over your Python skills and expectations. So I've been a dedicated Python user since

7
00:00:40,600 --> 00:00:48,200
1999. So I can always claim since the last millennium. So I started with version 1.52.

8
00:00:48,200 --> 00:00:53,640
I still remember. Yeah, that was my first book in April 1999. I don't have it anymore.

9
00:00:53,640 --> 00:00:58,280
I lent it to somebody and didn't get it back. I don't remember to whom. But this would be

10
00:00:58,320 --> 00:01:03,400
like a historical document because I started. And then I programmed pretty much on a daily basis.

11
00:01:03,400 --> 00:01:09,800
And it happened that in 2004, I gave my first training. So of course, I gave some lectures at

12
00:01:09,800 --> 00:01:14,240
university already, some other stuff. And so I kind of said, okay, why not give a Python training?

13
00:01:14,240 --> 00:01:19,200
And I gave a Python training. So the thing developed. 2006, I founded Python Academy,

14
00:01:19,200 --> 00:01:28,040
which is the logo here. And since 2010, I do this full-time. And currently, we have quite a

15
00:01:28,040 --> 00:01:32,160
few other trainers in Python Academy. So we are a team of trainers training Python. And we

16
00:01:32,160 --> 00:01:37,880
specialize in Python. And we do some tutorials like this, but also introduction to Python,

17
00:01:37,880 --> 00:01:44,240
advanced Python, a lot of scientific and data science topics, SQL, testing is a big topic,

18
00:01:44,240 --> 00:01:50,040
database programming in general, size and programming, high-performance programming,

19
00:01:50,040 --> 00:01:57,400
this Python and so on. Okay, that's about me. I would like to get a short overview about the

20
00:01:57,400 --> 00:02:02,360
people in the room. I just asked you how long you use Python, which is not a really good measure,

21
00:02:02,360 --> 00:02:06,760
but better than nothing. So please raise your hand if you program Python less than one year.

22
00:02:06,760 --> 00:02:17,280
Oh, that's like 20% or so between one and three years. So if you use Python on a more regular

23
00:02:17,280 --> 00:02:26,640
basis, yeah, that's more between three and five. Also more than five. And that's my minority. Okay,

24
00:02:26,640 --> 00:02:32,720
so kind of distribution more people that don't use Python extensively long, which is kind of

25
00:02:32,720 --> 00:02:39,600
expected. Good. Let's go. I have a few slides. And then I explain a little bit how we're going to do

26
00:02:39,600 --> 00:02:45,560
it. I talk a little bit about the objectives. So the objective is here to learn the basics of

27
00:02:45,560 --> 00:02:51,120
object-oriented programming. And so we look at how to create a class. We look at a concept of

28
00:02:51,120 --> 00:02:57,000
inheritance, which is an important concept in object-oriented programming. We look at operator

29
00:02:57,000 --> 00:03:01,080
overloading or the special methods. So operator overloading is actually a little bit too narrow,

30
00:03:01,080 --> 00:03:09,600
we will see, but very often used this term. And the way we do it, we start with a procedural code.

31
00:03:09,600 --> 00:03:16,880
So I will give you a short procedural code, short procedural code, which is working already. And then

32
00:03:16,880 --> 00:03:22,480
we step-by-step convert it to a more object-oriented solution, see if it's getting better anyway. So if

33
00:03:22,480 --> 00:03:29,480
it's worth it to do or how we do it, and then see how much it gets better or if you like it better,

34
00:03:29,480 --> 00:03:37,360
if it feels better, works better, whatever you think is better. So we learn about advantages and

35
00:03:37,360 --> 00:03:44,600
also maybe disadvantages. A few years ago here at PyCon, the talks like don't write classes,

36
00:03:44,600 --> 00:03:51,920
which is like the direct opposite of what I'm doing here. So at disclaimer, I also teach a full

37
00:03:51,920 --> 00:03:55,920
day of functional programming in Python. So Python has some functional features and I like them,

38
00:03:55,920 --> 00:04:03,280
and they are useful and it very much depends on the task at hand. So Python supports multiple

39
00:04:03,280 --> 00:04:12,200
paradigms, some functional, pretty full selection of object-oriented features, and you can use them

40
00:04:12,200 --> 00:04:19,160
and you can combine them. And you learn some basic techniques of object-oriented design, how to

41
00:04:19,160 --> 00:04:23,880
design the program. So we only have three hours for the whole thing, including some exercises,

42
00:04:23,880 --> 00:04:30,240
so that cannot be like a multi-week design course, obviously. But I give you some basic things to

43
00:04:30,240 --> 00:04:39,680
understand that might be useful to design programs. Good. So we start with an example code. I will go

44
00:04:39,680 --> 00:04:47,920
to the, show you pretty soon. It works already. So we go through this example code, a few minutes

45
00:04:47,920 --> 00:04:52,680
that you understand. Hopefully it's not too difficult, not just the hell of a world, yeah,

46
00:04:52,680 --> 00:04:57,000
that's too simple, but not a very complex thing. We spend three hours just trying to understand

47
00:04:57,000 --> 00:05:01,320
what a thing is doing. That's not going to work either. So we have to have some in between. It's

48
00:05:01,320 --> 00:05:06,560
still a toy example to some degree, but you will see you could make it way more complex very easily.

49
00:05:06,560 --> 00:05:12,800
Yeah, so in the real world things tend to become more complex. Then we convert it into object-oriented

50
00:05:12,800 --> 00:05:19,800
code and we apply these principles when we do this. And hopefully this is useful and you see how this

51
00:05:19,800 --> 00:05:28,080
works. A few words about this programming paradigms. If you go to Wikipedia, you find more like 70 or

52
00:05:28,080 --> 00:05:34,840
so different paradigms. There are different kind of hierarchies and structures and stuff, and there

53
00:05:34,840 --> 00:05:40,240
are different names. These are the main names you might see. So we have these big groups, imperative

54
00:05:40,240 --> 00:05:46,600
programming and declarative programming. By far the most people do more or less imperative programming.

55
00:05:46,600 --> 00:05:52,360
Procedural programming, that's rewrite your function, you call your functions in the procedures,

56
00:05:52,360 --> 00:06:00,200
or object-oriented programming, but you look now. Declarative programming, the main example of

57
00:06:00,200 --> 00:06:04,160
declarative programming is functional programming. The others are very rare, so logical programming

58
00:06:04,160 --> 00:06:10,520
is only prologue around and I never used it, I have to say. And the other ones I have also not much

59
00:06:10,520 --> 00:06:17,960
idea, so they are also in this category, but they're even more rarer than the other paradigms.

60
00:06:17,960 --> 00:06:25,440
So some people say it's all rubbish to do all these paradigms. I don't think so. It helps to a certain

61
00:06:25,440 --> 00:06:30,360
degree if you don't take it as a religion, say that has to be this paradigm. You can always combine

62
00:06:30,360 --> 00:06:35,680
it, but sometimes it helps to have some terminology to communicate what you want. So now Python's

63
00:06:35,680 --> 00:06:40,640
generally pretty pragmatic, you want to get the thing done, and how you call it doesn't matter

64
00:06:40,640 --> 00:06:50,080
too much, but sometimes words and those definitions can be useful. Okay, object-oriented programming,

65
00:06:50,080 --> 00:06:56,400
there are different ways how you express it. My background is numerical modeling, as well as

66
00:06:56,400 --> 00:07:03,360
modeling. So what is modeling? Modeling is having a simplified representation of the real world.

67
00:07:03,360 --> 00:07:11,120
You do modeling all the time. Most of the sentences, if you count something, one, two, three, four,

68
00:07:11,120 --> 00:07:15,400
that's a kind of modeling, where you represent something as a number, but there's no number out

69
00:07:15,400 --> 00:07:21,440
there, it's just three chairs, but you say it's just three, which is kind of if you want to,

70
00:07:21,440 --> 00:07:30,440
say it's modeling already. So it's simplified. And the important thing, we have an objective.

71
00:07:30,440 --> 00:07:34,400
A lot of people don't really start with it, but you say, okay, what do you want to achieve as a

72
00:07:34,400 --> 00:07:40,400
model? And then they have to simplify the model as much as possible to still achieve the objective,

73
00:07:40,400 --> 00:07:45,560
but they'll make it simpler. So you need to specify, and you also need to specify your

74
00:07:45,560 --> 00:07:52,680
assumptions. So if you say, okay, we here on Earth, we can have the assumption we have Earth's gravity,

75
00:07:52,680 --> 00:07:57,440
which is usually a good assumption. If you take this model to a space station, then it doesn't work

76
00:07:57,440 --> 00:08:05,440
anymore. But very few people ever go to space station. For the big majority, the Earth's surface

77
00:08:05,440 --> 00:08:12,040
is fine, and assuming gravity is a good assumption most of the time. But still, you have to write down

78
00:08:12,040 --> 00:08:16,640
your assumptions. The same goes for software, but are my assumptions. And very often when you write them

79
00:08:16,640 --> 00:08:25,600
down, the problem becomes clearer already. So let's go to the example. I have an example driving electric

80
00:08:25,600 --> 00:08:33,240
cars. So one and a half years ago, I switched from a combustion engine to electric car, and that's why I have

81
00:08:33,240 --> 00:08:40,040
this example driving an electric car. And driving an electric car is a bit different as an assumption

82
00:08:40,040 --> 00:08:44,480
already. It's a bit different. So typically when you have a gas car, you go to the gas station, you fill up,

83
00:08:44,480 --> 00:08:49,440
and then you go. It takes a few minutes. You pay, and you go. When you have an electric car, a big thing is

84
00:08:49,440 --> 00:08:56,040
the charging. So you need to charge your electric car to go from A to B. And this charging typically takes time.

85
00:08:56,040 --> 00:09:02,840
Depending on the type of the charger, you can get away with a few minutes, so like 20 minutes, you can get a decent

86
00:09:02,840 --> 00:09:08,920
charge if you have a fast charger. But it might also take multiple hours if you have a slow charger. So if you do

87
00:09:08,920 --> 00:09:18,040
just your home outlet, it might take several days. It's just the weakest one. So there's a big range there.

88
00:09:18,040 --> 00:09:33,360
So this is the example here I would like to introduce. And these are the assumptions. So I wrote them down.

89
00:09:33,360 --> 00:09:38,040
And I wrote just around a few, and then after a while I looked at it, and I did something. I said, I have more

90
00:09:38,040 --> 00:09:42,760
assumptions. And I added more and more. There's probably more you can add here. So it's always assumptions.

91
00:09:42,760 --> 00:09:49,440
It's a good thing to have this assumption table there, because this is your world. Of course, we represent the real

92
00:09:49,440 --> 00:09:56,960
world in one way or the other in software, and then you write down your assumptions. So those cars just to keep going.

93
00:09:56,960 --> 00:10:03,120
There are no other stops. They just stop for charging. They drive at a constant speed. So in real world, it's not

94
00:10:03,120 --> 00:10:08,600
realistic, obviously, but to make it simple, it's a constant speed. You can always make it more difficult later to have

95
00:10:08,600 --> 00:10:15,920
to accelerate and brake and stuff like this. So the energy usage does not depend on the speed. It's just even more

96
00:10:15,920 --> 00:10:20,840
unrealistic. Of course, if you drive faster, you need more. If you accelerate more, you need more. We take this out.

97
00:10:20,840 --> 00:10:28,840
It's just a constant rate. So and then every car always starts with exact 80% battery capacity. So we have the battery

98
00:10:28,840 --> 00:10:34,560
capacity. So you charge up to 80% when you start there. And then as soon as you reach 20%, you stop for charging and you

99
00:10:34,560 --> 00:10:41,880
charge to 80%. So typically, you don't want to unload, totally discharge your battery. You know this from this deep discharge.

100
00:10:41,880 --> 00:10:48,960
It's not good for laptop, not good for the car battery, because they're kind of similar. So I'm not a battery expert, but in

101
00:10:48,960 --> 00:10:54,880
broad terms. And very often, you also don't want to charge to 100% all the time. So that's good to 80%. That's usually

102
00:10:54,880 --> 00:11:01,000
the implementation. Also, this is usually the area where charging is faster. Outside this area, it usually gets slower a bit.

103
00:11:01,000 --> 00:11:10,200
It slows down. It's not always there. So that's the assumption. And then the charging rate depends on the charging station you

104
00:11:10,200 --> 00:11:15,200
have, how much you can get out of here. Depends on your car, how much your car supplies. I talked to a guy here, the old car,

105
00:11:15,200 --> 00:11:23,280
said, I cannot use the station. My car can only do 40 kilowatts. That's it. Yeah. The 150 kilowatts station is not useful for me.

106
00:11:23,360 --> 00:11:31,360
Yeah. And I have my car. I put it at 150 kilowatts. It does about 100, 110. It's the maximum you get out of it. So I guess if

107
00:11:31,360 --> 00:11:39,600
it connected to 300 kilowatts, it doesn't change a thing, because it's a limiting factor. So there's some extra driving.

108
00:11:39,600 --> 00:11:47,840
Typically, when you go to a charging station, you might have to leave your route and go a few kilometers or miles somewhere and

109
00:11:48,080 --> 00:11:58,640
charge. We don't consider this one. And there are probably many, many more assumptions here. So that's a problem.

110
00:11:58,640 --> 00:12:07,240
So this is how it looks like. There's actually a result already of my run, but this gives you an assumption. This is one pattern

111
00:12:07,240 --> 00:12:17,800
for one car. We use example data for cars. I pre-computed them to make them a bit easier. And this is

112
00:12:17,800 --> 00:12:25,160
one of them. And it happens to a Volkswagen, but it could be any Tesla or any kind of electric car. And you see here,

113
00:12:25,160 --> 00:12:31,320
this is the travel time. And this is the distance. So we go 1,000 kilometers. So everything is metric here.

114
00:12:32,200 --> 00:12:42,920
So we go 1,000 kilometers. And we have a travel time in hours. And you see how the distance is increasing. And this is,

115
00:12:42,920 --> 00:12:49,640
I'm driving with a constant speed of 80 kilometers an hour. It's about 50 miles. So I go at a constant speed. And then I stop

116
00:12:49,640 --> 00:12:59,960
charging. The distance doesn't change anymore. But the time progresses and I charge. And between these two red lines, I have the

117
00:12:59,960 --> 00:13:07,320
charging. That's what happens, charging time. You see? And there's always charging from 20 to 80 percent. All of them are the same

118
00:13:07,800 --> 00:13:14,920
This one is thinner because here I don't charge to 80 percent. I only charge as much as I need to reach my end, my destination.

119
00:13:14,920 --> 00:13:22,120
And I still have 20 percent left. So this one has to be calculated backwards. Typically, by the car, it's always predicting when you drive.

120
00:13:22,120 --> 00:13:28,440
It tells you when you reach your destination, you have so many percent left. It's changing a bit always because it's not constant.

121
00:13:29,080 --> 00:13:38,680
But they have a prediction in there. They take account of your driving style and your last, I don't know how many trips you did on something like this.

122
00:13:38,680 --> 00:13:43,800
So they have some kind of prediction which is more sophisticated. And this one, this is just everything is linear which makes it easy.

123
00:13:44,360 --> 00:14:00,840
Okay, this is an example. So now I switch to Jupiter notebook. So this is material. You have it already. I'm going to use Jupiter notebook.

124
00:14:00,840 --> 00:14:08,680
Who of you is using Jupiter lab, Jupiter notebook, something like this. So if you know how to use it, you can use it. If not, you don't have to.

125
00:14:08,760 --> 00:14:17,960
These examples work anywhere where Python works. You can just work from the terminal, no problem. You don't have to do anything special.

126
00:14:17,960 --> 00:14:23,720
They will work. But the notebook is great to demonstrate something. That's why I usually work with notebooks.

127
00:14:24,840 --> 00:14:31,080
Okay, let's look at the example. First, we have, maybe I make this

128
00:14:31,720 --> 00:14:41,720
bigger. Can you read this in the back in the room? It's big enough? A little bit bigger? Okay.

129
00:14:41,720 --> 00:14:51,320
Yeah, this screen is compared to the room, not the biggest. So I'm creating new notebooks and the notebooks have a bunch where I can write text.

130
00:14:51,400 --> 00:15:03,960
And I can put the figures in and I can load my code in here. So when you download this stuff, you will have this two PDFs and then you have the directory eCars

131
00:15:03,960 --> 00:15:16,280
which has all these different versions of my program, different incarnations. And you have the data here. This is the data. These are not the original data.

132
00:15:16,360 --> 00:15:26,040
I have a long explanation where the data come from. So you can read through it, but it's not of interest here. So I used them and modified them a little bit and took something out to make it easier to use.

133
00:15:26,040 --> 00:15:31,480
So the data is like this. That's how it looks like. You see this is not good because it's a...

134
00:15:31,480 --> 00:15:40,440
Yeah, this is my. So I have to open it. I say it's CSV, but that's not a good opening. So this is the data.

135
00:15:41,000 --> 00:15:57,400
Actually, I can load the data from the notebook. I do make a new notebook. I start with new notebooks. So you're encouraged to, if you can type along or work along or just listen, we will do exercises.

136
00:15:57,480 --> 00:16:10,520
If you have an exercise where you do something yourself, I will be here. You can ask me questions, but it's important that you actually kind of more or less active. If I'm just always talking here and giving a long presentation, that's not too helpful.

137
00:16:10,680 --> 00:16:12,920
So the data first. So look at the data.

138
00:16:15,080 --> 00:16:17,080
So if I CD into this...

139
00:16:17,800 --> 00:16:21,960
I CD into the ECOS directory.

140
00:16:23,160 --> 00:16:33,480
No, I'm there already. I'm there already. So I started there because I put the data there, so which is not good, but yeah.

141
00:16:34,760 --> 00:16:35,560
Maybe...

142
00:16:37,400 --> 00:16:38,120
Closes.

143
00:16:39,080 --> 00:16:47,320
There it was. It's not good to have the mix up there, so I cut it out. Mix up, put it into... I want to put all the notebooks there.

144
00:16:48,840 --> 00:16:49,400
Okay.

145
00:16:52,040 --> 00:16:53,240
So now I can say...

146
00:16:54,520 --> 00:16:57,800
S and I say CD, ECARS.

147
00:16:59,160 --> 00:17:01,640
ECARS and then you can look at the...

148
00:17:03,560 --> 00:17:04,520
Percent less.

149
00:17:04,520 --> 00:17:05,480
Percent less.

150
00:17:07,640 --> 00:17:11,880
I've gotten over there. The name is ECARS.CV.

151
00:17:12,840 --> 00:17:13,480
Less.

152
00:17:14,600 --> 00:17:15,320
ECARS.CV.

153
00:17:16,840 --> 00:17:30,840
These are the data I changed a bit and you see in the top, we do have a short JSON thing with units. So I don't know if it's a good format, but at least we see the units.

154
00:17:30,920 --> 00:17:42,440
So this is our table. So if we have a brand, yeah, Tesla or whatever, a model as one or X or something like this, then kilowatt hours per 100 kilometers, which is usage.

155
00:17:42,440 --> 00:17:46,840
The battery size in kilowatt hours and the charging rate the car supplies.

156
00:17:47,560 --> 00:17:55,000
And then here we do have the data and these are the data of what we're going to use. So in the end we can really make instances of... That's real data.

157
00:17:55,400 --> 00:18:09,480
Three years old, so it's not the most current one, but it doesn't really matter too much. So you can just put in new data. I modified them a little bit. If you want to, I have appendix where I go in great detail how to do this, but let's stick with it.

158
00:18:09,480 --> 00:18:12,680
So let's look at a procedure solution. I will go over...

159
00:18:13,560 --> 00:18:25,560
So you know already that the problem is not that difficult mathematically, hopefully. So I wrote a solution that produces this picture.

160
00:18:25,560 --> 00:18:37,640
We look at it a few minutes so you understand the problem. You need to understand the domain to a certain degree, otherwise it's getting difficult to do this.

161
00:18:37,640 --> 00:18:45,400
So let's look at the procedural solution. And for this one I can make a new notebook.

162
00:18:48,120 --> 00:18:51,480
And I save it. It asked me to change it. Procedural.

163
00:18:53,400 --> 00:18:55,400
Okay, procedural solution.

164
00:18:56,040 --> 00:19:14,760
And the first thing, if I go to the... Again to the ECAR subdirectory, I'm using a config file where I put the config option. So if I can load this here to execute it.

165
00:19:14,840 --> 00:19:25,240
config.py. So my configuration is very simple, Python dictionary. So if you want to get more fancy you could have different input format, but for simplicity I just use the Python dictionary.

166
00:19:25,240 --> 00:19:37,640
Here I specify my world data, my model parameters if you want. The chance of using supplies a maximum rate of 100 kWh per hour. That's the rate.

167
00:19:38,520 --> 00:19:41,320
I don't want this new line here.

168
00:19:41,320 --> 00:19:43,320
Doing there?

169
00:19:43,320 --> 00:19:45,320
Oh, just jumped in.

170
00:19:45,320 --> 00:19:52,600
Then there's the 20% and 80% thing, yeah, we talked, and then the speed, 80 kilometers per hour.

171
00:19:52,600 --> 00:19:59,800
It influences the time. The speed doesn't influence the usage of the energy, which is not realistic as we said, but this is our configuration.

172
00:19:59,960 --> 00:20:08,920
Since we use them all the time, we just import it and then everybody imports this one, we get the same configuration so we can compare our modeling thing.

173
00:20:08,920 --> 00:20:13,880
Good. So this is the data. And then let's look at the first one, calc travel times.

174
00:20:13,880 --> 00:20:26,760
This is calc travel times without anything. This is a procedural solution and I have a bunch of functions that do things. I need a bunch of imports.

175
00:20:27,720 --> 00:20:34,680
And now we have different things. We have driving and charging. So driving is actually when I cover distance, when I drive somewhere.

176
00:20:34,680 --> 00:20:39,000
So this is the first thing I implemented in the function and I do charge. We can look at this.

177
00:20:39,000 --> 00:20:43,000
Then we can also calculate the charging amount, which is constant.

178
00:20:43,000 --> 00:20:47,480
And then we have something called the travel. The whole thing is a travel, which includes driving and charging.

179
00:20:47,480 --> 00:20:53,000
That's the terminology I use here. It might be a different terminology, but that's what I'm using here. It's important otherwise.

180
00:20:53,240 --> 00:20:58,280
When you talk with people and somebody says travel, others say driving, what is what?

181
00:20:58,280 --> 00:21:07,000
So driving is actually the thing. Moving the car with a speed of 80 kmph where travel is the whole travel from A to B.

182
00:21:07,000 --> 00:21:12,200
Good. So that's what I do here. So we start here calculating travel time.

183
00:21:12,200 --> 00:21:20,680
So I do import my config. So if it's not given here, I make it optional.

184
00:21:20,680 --> 00:21:25,960
Otherwise the config is given and I just extract exactly the same thing for my config file.

185
00:21:25,960 --> 00:21:29,800
This is the data we just saw. And we calculate this thing.

186
00:21:29,800 --> 00:21:37,080
So now we translate this 20% and 80% multiplied by the battery capacity to get the absolute number of this battery.

187
00:21:37,160 --> 00:21:44,440
So this is 20% and 80%. And this is this here. And here I divide it by 100 because I want it for 1 km.

188
00:21:44,440 --> 00:21:50,440
So it's easier to calculate. So the maximum charging amount is 80 minus 20%.

189
00:21:50,440 --> 00:21:56,680
We don't have any distance traveled. The remaining distance is the target distance, 1000 km.

190
00:21:56,680 --> 00:22:04,280
The travel time is 0. The current charging amount is 80%. That's our assumption.

191
00:22:04,440 --> 00:22:15,960
And then what's the effective charging rate? It's the minimum of the charging rate of the car and the maximum rate of the charging station, which is provided here.

192
00:22:15,960 --> 00:22:22,280
So if the charger provides only 22 kW, then we can only use 22 kW. That's typical.

193
00:22:22,280 --> 00:22:27,880
That's 32 or 11 kW, typical sizes at least. At least in Europe. I'm not here, but maybe similar.

194
00:22:28,200 --> 00:22:31,320
And then I do the driving. So this is a loop where I do the driving.

195
00:22:31,320 --> 00:22:38,680
This is a little bit algorithmic. So I do the drives. Here I drive and I call the function drive.

196
00:22:38,680 --> 00:22:41,800
And I provide this parameter. The function drive does nothing else.

197
00:22:41,800 --> 00:22:49,960
But here you see this is I get the target distance, which are still 1000 km in the beginning.

198
00:22:51,240 --> 00:22:55,800
And then the available battery by the km per hour.

199
00:22:56,280 --> 00:23:00,600
If I'm at the end, this target distance will be shorter and shorter as long as I travel.

200
00:23:00,600 --> 00:23:05,800
And if I only have 10 km to drive, I don't have to charge to 80% because it will be less.

201
00:23:05,800 --> 00:23:09,480
That's what it is. And then of course the drive time is the distance divided by the speed.

202
00:23:09,480 --> 00:23:11,640
And then return the distance and the drive time.

203
00:23:12,440 --> 00:23:17,080
And then the charging is also very easy. You get the charging, how much you want to charge.

204
00:23:17,080 --> 00:23:20,440
The charging rate and then the charging time is just the amount, the rate.

205
00:23:20,440 --> 00:23:25,240
So a little bit of mathematics. So this is a little bit algorithmic.

206
00:23:25,240 --> 00:23:28,520
If you don't understand all the details, it doesn't matter if you have a solution

207
00:23:28,520 --> 00:23:32,520
that works and we have these components. So we have this travel.

208
00:23:32,520 --> 00:23:38,120
And then you have to be a little bit careful if you compare to something that you round a little bit.

209
00:23:38,120 --> 00:23:42,680
Otherwise you might get into the one is not equal to 0.999999 or things like this.

210
00:23:42,680 --> 00:23:45,160
You want to avoid these kinds of things. It's something like this.

211
00:23:45,160 --> 00:23:48,040
And if you reach your destination, then you stop.

212
00:23:49,000 --> 00:23:53,240
The thing is done. I'm finished. Otherwise I calculate the charge amount here.

213
00:23:53,240 --> 00:23:56,120
I give it how much I need to drive for remaining distance and the amount,

214
00:23:56,120 --> 00:23:58,840
min charge, kilometers hour. Do my computations.

215
00:23:59,560 --> 00:24:04,760
The charge amount is this one here. Okay, how much do I need?

216
00:24:04,760 --> 00:24:07,560
The minimum charge plus this one.

217
00:24:07,560 --> 00:24:10,200
But I so the minimum charge has to stay there 20%.

218
00:24:11,000 --> 00:24:14,360
And then the remaining distance by the kilometers, how much I need.

219
00:24:15,320 --> 00:24:20,280
And if it's more than 80%, then I charge to 80% if less I charge to this thing.

220
00:24:20,280 --> 00:24:23,160
So that's why I take the minimum of this and this.

221
00:24:25,400 --> 00:24:27,720
This is everything you need to make this picture.

222
00:24:27,720 --> 00:24:28,920
And I put it into functions.

223
00:24:30,680 --> 00:24:32,600
And then I return this time.

224
00:24:32,600 --> 00:24:35,640
And then I drive my all my cars.

225
00:24:35,640 --> 00:24:38,920
So I read in the data. Actually, we haven't looked at the data section.

226
00:24:38,920 --> 00:24:43,400
We also have actually here. I've forgotten how to read the data. Very easy.

227
00:24:44,360 --> 00:24:45,880
Just for completeness sake.

228
00:24:47,160 --> 00:24:49,240
Read data. Yeah.

229
00:24:49,240 --> 00:24:51,000
So we ignore the CSV totally.

230
00:24:52,360 --> 00:24:54,920
The JSON parts totally and just read the CSV.

231
00:24:54,920 --> 00:24:58,680
And we don't do anything special. We just read the file in with encoding UTF-8.

232
00:24:59,400 --> 00:25:00,520
We start at the data.

233
00:25:01,320 --> 00:25:02,840
We split by hand.

234
00:25:03,960 --> 00:25:08,200
The easiest thing that we can do, you can use Orkind if you know pandas.

235
00:25:08,200 --> 00:25:09,000
It's much easier now.

236
00:25:09,000 --> 00:25:13,080
But just do it by hand and go through and split the arrows.

237
00:25:13,480 --> 00:25:14,920
I do some conversion.

238
00:25:14,920 --> 00:25:18,200
So everything that can be converted to an integer will be converted to integer.

239
00:25:18,200 --> 00:25:20,600
Otherwise, I try float. If not, I keep it as a string.

240
00:25:21,160 --> 00:25:23,560
So very easy. Good enough for our purposes.

241
00:25:23,560 --> 00:25:27,000
If you need a more fancier reader, use any kind of reader.

242
00:25:27,000 --> 00:25:29,160
So it's not about data processing.

243
00:25:29,160 --> 00:25:30,360
Reading data in.

244
00:25:30,360 --> 00:25:31,400
This is just a thing.

245
00:25:34,520 --> 00:25:36,600
Here on the data is a list of lists.

246
00:25:36,600 --> 00:25:39,960
As you can see here, every entry goes in there and then you have it.

247
00:25:40,760 --> 00:25:41,880
Yeah. Good.

248
00:25:41,880 --> 00:25:43,960
So this is our solution.

249
00:25:43,960 --> 00:25:51,400
And in the end, you can drive.

250
00:25:52,280 --> 00:25:55,480
And report travel times just prints out the travel times.

251
00:25:55,480 --> 00:25:59,800
And I want to have the guy who is the fastest first.

252
00:25:59,800 --> 00:26:01,960
And that's why I sort all my cars.

253
00:26:01,960 --> 00:26:06,200
And to do this, I would like to use the travel time here.

254
00:26:06,200 --> 00:26:09,640
And I use the item getter, which is a function.

255
00:26:10,440 --> 00:26:17,960
That's this that I import up here from the operator module.

256
00:26:17,960 --> 00:26:22,520
So this one is essentially going into my dictionary and extracts the keys.

257
00:26:23,240 --> 00:26:27,480
The key here, it's a function and this function can be used by key.

258
00:26:27,480 --> 00:26:29,880
Who knows how this sorting with the key function works?

259
00:26:32,120 --> 00:26:32,680
Just a few people.

260
00:26:32,680 --> 00:26:33,880
So I need to explain.

261
00:26:33,880 --> 00:26:36,280
So if I have, I think I have an example here.

262
00:26:36,280 --> 00:26:36,840
I can use it.

263
00:26:36,840 --> 00:26:38,200
I don't have to reinvent a new one.

264
00:26:40,520 --> 00:26:51,400
Yeah. So if I have a dictionary, if I have a dictionary,

265
00:26:54,280 --> 00:27:04,280
a dictionary with entries, A is 10 and B is 2.

266
00:27:04,680 --> 00:27:10,040
And C is 24.

267
00:27:10,040 --> 00:27:14,040
I would like to, and we have to make colon here.

268
00:27:14,040 --> 00:27:16,120
And I would like to sort my dictionary and say, okay,

269
00:27:16,120 --> 00:27:19,640
I want to have the B as a first because this is smallest number.

270
00:27:19,640 --> 00:27:22,360
Then I could go on and write my own function.

271
00:27:25,560 --> 00:27:28,840
Get value if you want.

272
00:27:28,920 --> 00:27:31,640
So I put my dictionary in.

273
00:27:35,480 --> 00:27:37,240
Yeah. So actually I don't have a dictionary.

274
00:27:37,240 --> 00:27:39,880
I have a list of these dictionaries here.

275
00:27:39,880 --> 00:27:42,520
So I have to make my thing more complex.

276
00:27:42,520 --> 00:27:43,800
So that's why it doesn't make sense.

277
00:27:43,800 --> 00:27:45,160
So I have a list of these dictionaries.

278
00:27:45,720 --> 00:27:47,800
And this one has this one.

279
00:27:47,800 --> 00:27:49,080
I copy this whole thing.

280
00:27:49,640 --> 00:27:53,400
And now I want to sort it by one of these things.

281
00:27:53,400 --> 00:27:57,160
Yeah. So now I just use the value of B.

282
00:27:57,160 --> 00:28:01,720
And here I say this is 25 and this is 8.

283
00:28:02,280 --> 00:28:03,800
Now I would like to sort by B.

284
00:28:03,800 --> 00:28:10,680
So now I see I get my dictionary and I just return my dictionary value B here.

285
00:28:11,400 --> 00:28:13,640
Yeah. This is a function.

286
00:28:13,640 --> 00:28:21,000
And now I can say sorted of my dictionary, of my list.

287
00:28:21,000 --> 00:28:23,560
Actually this is called, this has to, I call it a list.

288
00:28:23,560 --> 00:28:25,320
It's a better name.

289
00:28:25,320 --> 00:28:27,160
And this function is okay.

290
00:28:27,160 --> 00:28:30,760
I put in my, here I say key function is my sorting function.

291
00:28:31,320 --> 00:28:32,840
Yeah. Get value function.

292
00:28:33,960 --> 00:28:37,480
And now when I sort this now, you see this is the first,

293
00:28:37,480 --> 00:28:41,240
this is the second to the third because what happens,

294
00:28:41,240 --> 00:28:44,120
so if you add a print here you see what Python is doing.

295
00:28:44,120 --> 00:28:45,480
So we add a print.

296
00:28:45,480 --> 00:28:48,280
And then you see when I call my function,

297
00:28:48,920 --> 00:28:52,520
my function, Python hands in every element of my list

298
00:28:52,520 --> 00:28:56,440
which happens to be a dictionary to this helper function get value.

299
00:28:58,200 --> 00:29:01,720
And I retrieve the value for B which will be used for sorting.

300
00:29:01,720 --> 00:29:04,760
So I create my search criteria, my search key.

301
00:29:05,960 --> 00:29:11,320
So if you, you can think of this is a function that creates a yellow sticky note

302
00:29:11,320 --> 00:29:14,680
where you write what you want to use for sorting.

303
00:29:14,680 --> 00:29:16,840
So if you say we want to sort by first name,

304
00:29:16,840 --> 00:29:19,400
everybody writes a first name on a sticky note, puts it here.

305
00:29:20,040 --> 00:29:21,640
I sort you and when you're done,

306
00:29:21,640 --> 00:29:24,280
I take the sticky note available and you want to write order.

307
00:29:24,280 --> 00:29:27,080
Yeah. Because I certainly can remember all your first names

308
00:29:27,080 --> 00:29:30,040
but if I have a sticky note or name tag in this case,

309
00:29:30,040 --> 00:29:31,320
that would be useful.

310
00:29:31,320 --> 00:29:35,480
Yeah. I know the alphabet usually so I can sort.

311
00:29:35,480 --> 00:29:38,280
So the same thing here, you write a helper function

312
00:29:38,280 --> 00:29:40,600
and the item getters doing exactly this.

313
00:29:40,600 --> 00:29:44,040
This is not unimportant because we want to use the sorting as an example

314
00:29:44,040 --> 00:29:47,000
for potential advantages of technical programming.

315
00:29:47,000 --> 00:29:49,400
You can make your objects easier sortable.

316
00:29:49,400 --> 00:29:50,520
It's easier to sort them.

317
00:29:50,520 --> 00:29:52,840
You don't have to write this helper function here.

318
00:29:53,880 --> 00:29:55,400
So that's what I'm doing here.

319
00:29:56,680 --> 00:30:00,040
And then I have a main function that reads the data

320
00:30:01,000 --> 00:30:04,280
that takes drives or cars.

321
00:30:04,280 --> 00:30:07,720
So drive or cars just goes through all the cars, a list of cars

322
00:30:08,600 --> 00:30:12,200
and then calculates the travel time of all of them.

323
00:30:12,680 --> 00:30:16,360
Yeah. So if I take this out because now this wouldn't work.

324
00:30:16,440 --> 00:30:26,360
So if I take this out and I load my file, now I have my main function.

325
00:30:26,360 --> 00:30:28,840
Actually it's easy to put it there otherwise it's difficult.

326
00:30:28,840 --> 00:30:36,760
My main function and now I just give it my e-cars file

327
00:30:36,760 --> 00:30:40,280
and then it prints out this car.

328
00:30:40,280 --> 00:30:43,240
So the Tesla Roadster here in this case is the one

329
00:30:43,240 --> 00:30:46,840
that needs 13 hours for the thousand kilometers, 13.7.

330
00:30:46,840 --> 00:30:48,840
The next one, 30.78 and so on.

331
00:30:48,840 --> 00:30:52,360
So this is one of the shortest travel time with my assumptions.

332
00:30:52,360 --> 00:30:54,840
If you have different assumptions, yeah,

333
00:30:54,840 --> 00:30:57,400
then you might have different result.

334
00:30:57,400 --> 00:30:59,560
You see this battery capacity is very big,

335
00:30:59,560 --> 00:31:01,560
about 200 compared to the other ones.

336
00:31:01,560 --> 00:31:04,600
This is much smaller but here this guy takes only 10,

337
00:31:05,160 --> 00:31:09,160
200 kilometers and there it takes 20 which is really more realistic.

338
00:31:09,160 --> 00:31:11,160
Yeah, so it's always a combination how much you use,

339
00:31:11,160 --> 00:31:14,120
how big the battery is and how fast you can charge all this thing.

340
00:31:15,240 --> 00:31:16,840
And then you can investigate.

341
00:31:16,840 --> 00:31:20,200
Yeah, so this is a procedural program.

342
00:31:20,200 --> 00:31:25,880
It works and I can find out which car arrives first according

343
00:31:25,880 --> 00:31:29,080
to these simplified assumptions.

344
00:31:29,640 --> 00:31:32,360
Good. Any questions about it?

345
00:31:32,360 --> 00:31:35,240
So if you have questions, I'm supposed to repeat it

346
00:31:35,240 --> 00:31:40,840
because it's recorded or if you would like you can go to the microphone

347
00:31:40,840 --> 00:31:42,760
and talk to the microphone and then we have direct.

348
00:31:43,320 --> 00:31:43,880
Any question?

349
00:31:43,880 --> 00:31:45,480
Everything clear what we're doing so far?

350
00:31:46,360 --> 00:31:48,920
Good. It's supposed to be, it shouldn't be too difficult.

351
00:31:48,920 --> 00:31:52,360
So if it would be a lot of questions then it would be too difficult

352
00:31:52,360 --> 00:31:56,840
because we assume we know our solution and it's a procedural solution

353
00:31:58,920 --> 00:32:00,840
and we do something.

354
00:32:00,840 --> 00:32:04,520
So let's go and do something with objects.

355
00:32:04,520 --> 00:32:08,440
So we do something with objects by the way.

356
00:32:08,440 --> 00:32:13,480
So we have 10.30 we will have a coffee break, 20 minutes or so,

357
00:32:13,480 --> 00:32:17,160
something like this so you can get coffee outside and then we continue.

358
00:32:18,200 --> 00:32:24,040
So let's go and do our first object on a solution.

359
00:32:27,960 --> 00:32:28,460
So.

360
00:32:32,760 --> 00:32:37,240
And for this one we now take our existing solution

361
00:32:37,240 --> 00:32:39,640
and we don't really implement any new logic you will see.

362
00:32:39,640 --> 00:32:42,040
We use this, we don't do any new mathematics or anything.

363
00:32:43,160 --> 00:32:44,760
The end result is the same.

364
00:32:45,320 --> 00:32:48,440
Only the way we express things is different.

365
00:32:48,440 --> 00:32:49,480
That's important.

366
00:32:49,480 --> 00:32:50,760
That's one I'm going to show you.

367
00:32:50,760 --> 00:32:53,560
So if you don't want to you can get away for a very long time

368
00:32:53,560 --> 00:32:55,480
without writing classes in Python.

369
00:32:55,480 --> 00:32:57,880
There's only a few cases where I need to write the class.

370
00:32:57,880 --> 00:32:59,400
So if you want to create your own exception

371
00:32:59,400 --> 00:33:01,480
you have to inherit from exception write the class.

372
00:33:02,120 --> 00:33:07,880
Yeah and some libraries might make you to inherit from a class

373
00:33:07,880 --> 00:33:11,320
and write the class otherwise you can most of the time get away

374
00:33:11,320 --> 00:33:15,000
with just writing functions but writing your own classes can be useful

375
00:33:15,000 --> 00:33:17,960
and that's why we want to look at here.

376
00:33:18,600 --> 00:33:19,100
Good.

377
00:33:19,880 --> 00:33:23,960
So typically a class so you could have a class.

378
00:33:23,960 --> 00:33:27,160
So if you before we go there you can have a class car.

379
00:33:28,360 --> 00:33:30,760
In our case we will see it would be electric the car

380
00:33:30,760 --> 00:33:33,880
and we have the class statement and then we define a function

381
00:33:33,880 --> 00:33:37,800
and the function inside the class is usually called a method

382
00:33:38,600 --> 00:33:43,880
and then we have a self and we have value

383
00:33:43,880 --> 00:33:47,320
and then I can say self value equals value.

384
00:33:47,320 --> 00:33:53,080
So this is a very typical pattern if you want for writing a class

385
00:33:53,080 --> 00:33:54,680
very often we have this init.

386
00:33:54,680 --> 00:33:56,440
This init is a special method.

387
00:33:56,440 --> 00:33:58,840
We will have a deeper look at special methods.

388
00:33:58,840 --> 00:34:02,840
They all have these patterns two underscores name two underscores

389
00:34:02,840 --> 00:34:05,640
very often called Dunder methods because you say two underscore

390
00:34:05,640 --> 00:34:07,640
what up two underscore you say Dunder.

391
00:34:08,200 --> 00:34:11,640
It's called a Dunder method and officially there are special methods

392
00:34:12,920 --> 00:34:15,720
some people call the magic matches which is not actually correct

393
00:34:15,720 --> 00:34:19,400
because I know that magic special methods that do something

394
00:34:19,400 --> 00:34:23,320
and this is one you very often have most of the classes will have in it.

395
00:34:23,320 --> 00:34:25,800
You can write classes without in it it's possible

396
00:34:25,800 --> 00:34:30,200
but very often you want it because you want to initialize something

397
00:34:30,200 --> 00:34:34,280
and here I could say def a method and then have myself

398
00:34:34,280 --> 00:34:43,960
and then I increment something here and then I say return self value plus increment.

399
00:34:43,960 --> 00:34:49,160
So it's not very useful but shows the thing what you can do here increment

400
00:34:49,720 --> 00:34:55,160
and then I can make an instance of my car and give it a value

401
00:34:55,800 --> 00:34:58,200
yeah so this is the first thing you can do with your car

402
00:34:58,200 --> 00:35:02,280
and then you can say car dot increment and you get

403
00:35:02,280 --> 00:35:08,200
so you can access the value attribute and then you can say car dot increment

404
00:35:10,360 --> 00:35:15,560
you know car dot method and give it an increment this way around 100

405
00:35:15,560 --> 00:35:18,680
and you get something like this back good.

406
00:35:18,680 --> 00:35:22,360
This is the basic thing and if you see now we look at my electric car

407
00:35:22,360 --> 00:35:27,320
which is a bit more complex but exactly the same exactly the same thing.

408
00:35:28,760 --> 00:35:38,200
Okay let's go to the directory eCars and import our file

409
00:35:42,200 --> 00:35:43,400
reload our file

410
00:35:43,400 --> 00:35:48,280
and then we can say file calculate our travel times

411
00:35:49,960 --> 00:35:52,360
calculate travel times object on the way.

412
00:35:53,160 --> 00:35:58,360
So now you will see a lot of things I took pretty much all the mathematics we have

413
00:35:58,360 --> 00:36:01,560
there are not much changes but I rearranged things so the imports are the same

414
00:36:02,120 --> 00:36:10,040
and I have my eCar and you see typically per convention class names are capitalized

415
00:36:10,040 --> 00:36:16,120
and here have multiple nouns here this electric it's not a noun it's an adjective but we take it

416
00:36:16,120 --> 00:36:23,080
as a noun and I shorten it to e which is everybody understands what the eCars usually so that's good

417
00:36:23,080 --> 00:36:26,680
enough and eCar that's why the e is capitalized and c is capitalized for the car.

418
00:36:27,240 --> 00:36:33,080
We have electric car we always use the most important thing for functions in classes the

419
00:36:33,080 --> 00:36:37,480
doc string so write a good doc string so we have a doc string now you see I can get this

420
00:36:37,480 --> 00:36:44,040
configuration options if you compare with our other solution we see very often we move the

421
00:36:44,040 --> 00:36:51,560
same data around many times here we can use this one and the unders anybody knows what the underscore

422
00:36:51,560 --> 00:36:57,560
means yeah it's internal usage it's a pure convention but the underscore means this is only

423
00:36:58,440 --> 00:37:04,680
as supposed for internal use in in this case internal use from inside the class you can access

424
00:37:04,680 --> 00:37:10,120
it but you're not supposed to do then you write a test for your own class then accessing is

425
00:37:10,120 --> 00:37:15,960
totally fine then you use the library from somebody else you shouldn't do this because

426
00:37:15,960 --> 00:37:22,360
these things can change without notice if you have other method or attribute they cannot just

427
00:37:22,360 --> 00:37:28,760
change it they have to have to have some procedure like a deprecation warning or something and there

428
00:37:28,760 --> 00:37:32,600
has to be a documentation about this and these things can also be undocumented more or less

429
00:37:32,600 --> 00:37:37,960
because they are for internal use you see now I just take my configuration data these numbers

430
00:37:37,960 --> 00:37:43,080
from here and store them here inside the class and this can be useful because now can you reuse

431
00:37:43,080 --> 00:37:48,680
them so if you need data in many places when you do it in a good function style you always

432
00:37:49,240 --> 00:37:53,560
a function should never change the outside world you only get data in and get data out

433
00:37:53,560 --> 00:37:58,760
if you do this and you can be pretty repetitive if you need the same information at three functions

434
00:37:58,760 --> 00:38:05,480
you have to hand it in as parameters yeah or arguments when you call it again and again

435
00:38:06,360 --> 00:38:12,840
here in the class you have something like a global scope so when you write Python you should never

436
00:38:12,840 --> 00:38:17,560
use the global statement so if you use pyLint it will warn you never use a global statement

437
00:38:18,200 --> 00:38:23,240
here this is something this is a global statement you can use so to speak and this is called the

438
00:38:23,240 --> 00:38:29,640
glass variable and this will be available over the whole class you see now my init is doing quite

439
00:38:29,640 --> 00:38:33,960
a few things in the setting all this information so there's a lot of setting I said my brand my

440
00:38:33,960 --> 00:38:39,080
model kilometers and all those kind of things and I can pre-compute the things like this is my 20

441
00:38:39,080 --> 00:38:46,120
percent my 80 percent all this computation we have done before in one of these functions yeah

442
00:38:46,120 --> 00:38:53,000
there's nothing new here so the travel time doesn't exist yet I could introduce a travel time

443
00:38:53,000 --> 00:38:58,840
later but it's a good style here to set the travel time to none so the travel time is there

444
00:38:58,840 --> 00:39:05,800
as a name but doesn't have the value yet I didn't travel you could set it to zero it's possible

445
00:39:07,240 --> 00:39:12,920
none is also possible so this is a design decision so it hasn't traveled yet or

446
00:39:14,840 --> 00:39:19,320
maybe you could say if it's zero maybe it's sort of is charging I'm not sure so something like this

447
00:39:19,320 --> 00:39:24,680
no doubt that would be zero anymore so it could be the same thing I decided for none but zero would

448
00:39:24,680 --> 00:39:32,440
here potentially also a choice yeah and you see I have my drive in charge functions now moved inside

449
00:39:32,440 --> 00:39:38,120
the method they do exactly the same I can reuse it the only thing I hand in the self and we look

450
00:39:38,120 --> 00:39:47,160
at the self and we see what happens here good so

451
00:39:51,320 --> 00:39:57,480
and there's a few more things charged charging amount it's the same mathematics here nothing

452
00:39:57,480 --> 00:40:03,240
new and the travel is also the same but it's a bit shorter so if you compare this travel function

453
00:40:03,800 --> 00:40:08,680
this is a travel function and you see the travel function needs to do all these things in the

454
00:40:08,680 --> 00:40:17,560
beginning and this is what we do in the class on the top so now we can better divide these things

455
00:40:17,560 --> 00:40:23,160
for this example it's not always the case maybe but for this example so I do all this static kind

456
00:40:23,160 --> 00:40:29,320
of getting things out here and now my travel functions which essentially is exactly the same

457
00:40:29,400 --> 00:40:34,360
becomes shorter and fits on a screen rule of thumb a function should always fit on the screen

458
00:40:34,360 --> 00:40:39,080
if it doesn't fit in the screens potentially too long it doesn't mean you should use six font and a

459
00:40:39,960 --> 00:40:46,440
42 inch screen that's not what I mean but just a normal size font and string should a screen should

460
00:40:46,440 --> 00:40:51,000
fit on there so this is the same mathematics we do here and then we have this

461
00:40:51,000 --> 00:41:00,040
um in there I'm reusing this function this I've I this one I use in function I don't write classes

462
00:41:00,040 --> 00:41:05,720
for these so in Python always allows to combine classes and functions and you should always do

463
00:41:05,720 --> 00:41:10,120
this and these things are potentially better than these functions I don't didn't turn into class

464
00:41:10,120 --> 00:41:15,880
if you want you can you can always turn everything into classes but maybe it's not a good idea in

465
00:41:15,880 --> 00:41:22,440
this case have it here not just travel so if you look at this in in a moment so I'm taking this out

466
00:41:22,440 --> 00:41:29,560
here otherwise everything will be executed so I'm executing this now everything in here it's now

467
00:41:29,560 --> 00:41:34,760
in my notebook and I can call all these functions because they're all executed so um the first one

468
00:41:34,760 --> 00:41:41,400
I have I can read the data yeah so read data I can put in the file and then I can read data and

469
00:41:41,400 --> 00:41:47,000
then I can have the data so and then we don't have to type anything in we can use data data

470
00:41:56,280 --> 00:42:00,280
is read data and we did this

471
00:42:00,680 --> 00:42:07,880
so I can access data zero so now how do I work with this with a with a class the class is a

472
00:42:07,880 --> 00:42:14,680
blueprint for a new data type so if you look at my other type of this e-car if you look at the

473
00:42:14,680 --> 00:42:21,080
type of this e-car you will see this is a type type and if you look at the type of int

474
00:42:21,720 --> 00:42:27,960
if you look at the type of this e-car you will see this is a type type and if you look at the type

475
00:42:27,960 --> 00:42:37,160
of int this is also a type and if you look at the type of list this is also a type so int and lists

476
00:42:37,160 --> 00:42:44,680
are classes so very often when I start with my beginners class I say okay I can use a function

477
00:42:45,640 --> 00:42:51,480
int to convert a string to an int that's not correct it's not a function

478
00:42:52,360 --> 00:42:58,360
it's a class I instantiate but it's a callable so very often when you say function Python you

479
00:42:58,360 --> 00:43:03,960
mean a callable that's an important thing and instantiating class and calling a function looks

480
00:43:03,960 --> 00:43:10,040
exactly the same and in practice you don't really care what it what kind of type you're using there

481
00:43:10,040 --> 00:43:16,600
you care about the result so very often Python doesn't really care about types it cares about

482
00:43:16,600 --> 00:43:22,360
behavior and that makes a lot of things much easier because it doesn't really matter

483
00:43:23,560 --> 00:43:27,480
what type this callable is as long as it's callable so as long as I can use this

484
00:43:27,480 --> 00:43:33,880
on the parentheses it's giving me something back I'm happy yeah so that's why very often you don't

485
00:43:33,880 --> 00:43:41,560
know even if you use a class a lot of beginners when I type in a one I use the class because this

486
00:43:41,560 --> 00:43:46,680
is a literal one makes the instance of the class int this object on the programming so typing a one

487
00:43:47,240 --> 00:43:52,280
is object on a program if you want so of course you make instance of a class good so now we have

488
00:43:52,280 --> 00:44:03,080
our car now we can instantiate our car and you see I can look at my ecar and I can look at

489
00:44:03,880 --> 00:44:11,160
the question mark at the help so this is the same thing if you're a normal person type help

490
00:44:11,720 --> 00:44:15,880
parentheses putting in car you see the help and this help is obviously the

491
00:44:16,680 --> 00:44:23,320
signature of this init file yeah so of course the class itself doesn't have anything but this is

492
00:44:23,320 --> 00:44:29,880
these parameters here you want to put in and I'm going to feed it with arguments so if I have my

493
00:44:30,440 --> 00:44:33,160
tesla this is my tesla here this is data zero

494
00:44:35,800 --> 00:44:45,960
my tesla is my data zero yeah and now you see I can feed them in I can say now I make a new tesla

495
00:44:46,920 --> 00:44:53,720
car there's an instance and I say it's my ecar and I can say brand

496
00:44:54,200 --> 00:45:03,400
brand brand equals tesla brand so you can do something like this so you can write this out

497
00:45:03,400 --> 00:45:10,200
and you can type it in tesla brand you see they'll have to type a bit model equals tesla model and

498
00:45:10,200 --> 00:45:17,000
so on so I use the same names for some reason so this also implies you can make it have a faster

499
00:45:17,000 --> 00:45:20,360
way of doing it and then I say kilometers

500
00:45:25,160 --> 00:45:33,800
per hour equals so now getting pretty long so this is one way of formatting it putting every

501
00:45:34,680 --> 00:45:38,920
argument on one line there are different styles of doing this but this is a

502
00:45:40,520 --> 00:45:44,520
something that works and now I can I don't need to retype this I can copy it

503
00:45:45,000 --> 00:45:52,680
yeah so I can t and instantiate my car and I do the same thing here

504
00:45:54,360 --> 00:46:01,640
battery size battery size equals this you see if you do it like this we use the same name there's

505
00:46:01,640 --> 00:46:05,000
a shorter way of doing it I can show you in a second but I'll show you the

506
00:46:05,080 --> 00:46:15,480
the long tedious way first charging rate equals equals t charging rate yeah so now I copy this

507
00:46:19,720 --> 00:46:20,520
and now I have my

508
00:46:22,920 --> 00:46:29,640
what's wrong brand a mistyped brand yeah so I didn't copy it and now I have my tesla which

509
00:46:29,640 --> 00:46:35,080
looks like this this is a this is a standard representation this can be nice so we will do

510
00:46:35,080 --> 00:46:39,880
this we will make give our classes nicer representations but now I can access my tesla

511
00:46:40,440 --> 00:46:48,840
and I can look at the brand and I should say tesla yeah so you can look at all these properties

512
00:46:49,560 --> 00:46:52,920
anybody knows how I could make this thing a bit shorter

513
00:46:52,920 --> 00:47:00,440
so now you can use two stars for this so if you want to say let's say I make my tesla 2

514
00:47:01,080 --> 00:47:09,160
just it's the same thing I say tesla 2 equals e-car and I can say double star

515
00:47:10,520 --> 00:47:21,240
double star my t up here and this tesla you should write tesla tesla then it's doing the

516
00:47:21,240 --> 00:47:27,240
same thing so this this one line is equivalent this whole thing that's what it's actually doing

517
00:47:27,240 --> 00:47:34,600
this one unpacks the dictionary and feeds all the content in there you if you if you have a

518
00:47:34,600 --> 00:47:38,680
different string and they're not going to work so the names these names and these names have to be

519
00:47:38,680 --> 00:47:43,160
exactly the same otherwise it doesn't work but this makes things easier so we can instantiate

520
00:47:43,160 --> 00:47:49,320
it so if you can guarantee this and you want these names anyway then you don't have to and if

521
00:47:49,560 --> 00:47:54,120
another two parameters it doesn't matter as long as they have the same name you

522
00:47:54,920 --> 00:47:58,200
when they are in the dictionary it would work yeah so this is

523
00:48:02,200 --> 00:48:09,960
what they do now we have our e-car and we can do something with the e-car let's look at our tesla

524
00:48:09,960 --> 00:48:18,680
so our tesla now has a bunch of properties tesla and if I say dot tab here then I do get

525
00:48:19,960 --> 00:48:28,360
some suggestions and you see that you see that's the the type i is an instance and f is a function

526
00:48:28,360 --> 00:48:37,800
or method so we technically all these methods are functions there's no difference yeah but usually

527
00:48:37,800 --> 00:48:41,560
you call the methods when they're inside the class and if they're standalone they're called a function

528
00:48:42,120 --> 00:48:46,840
but there's no technical difference and now I can access all these

529
00:48:48,520 --> 00:48:56,760
yeah max charging amount is it's so all these kind of the things I computed in between I can access

530
00:48:56,760 --> 00:49:03,720
and I can do this this is an instance and since I made a tesla obviously I can make as many instances

531
00:49:03,720 --> 00:49:11,400
as I like but I can also look inside the test and I look look and use another dando but not this is

532
00:49:11,400 --> 00:49:17,080
not a dando method but then the attribute if you want and this is a dictionary this is how an instance

533
00:49:17,080 --> 00:49:23,640
stores the data so this standard dictionary is interesting to look at when you program it you

534
00:49:23,640 --> 00:49:32,440
might not want to modify it by hand because there might be some strange effects very often works but

535
00:49:33,800 --> 00:49:40,040
there are a few things that like pyson supports properties they just look like attributes but

536
00:49:40,040 --> 00:49:45,000
they're not sort of dictionaries because they have a different technology to work with so you might

537
00:49:45,000 --> 00:49:48,920
it might not be exactly what you want to be careful but looking at is very interesting you see now

538
00:49:48,920 --> 00:49:56,840
pyson stores all this information all this instance variables in in this dictionary good message if

539
00:49:56,840 --> 00:50:03,320
you know dictionaries you know how to how this works you know how this works and you can access

540
00:50:03,320 --> 00:50:13,240
all these things okay but I can also say tesla if I really like to I can access these underscore things

541
00:50:13,880 --> 00:50:23,400
these underscore things and they are not stored in this dictionary but still there so usually

542
00:50:24,200 --> 00:50:29,400
when you say tesla dot then pyson looks in this dictionary and looks for this string

543
00:50:29,480 --> 00:50:36,200
and if it finds it it gives you back the value yeah if I say tesla dot brand it gives me back the string tesla

544
00:50:37,240 --> 00:50:44,680
if I say dundum underscore max charge then it cannot find it here and what that what does it do it goes

545
00:50:44,680 --> 00:50:51,480
further and goes to the car and I say car dot underscore dict and the car itself also has

546
00:50:52,440 --> 00:50:56,920
a dictionary which looks a bit different it doesn't say dictionary says mapping proxy

547
00:50:57,000 --> 00:51:01,960
because this is read only you cannot directly write to it you can directly modify the dict of

548
00:51:01,960 --> 00:51:07,000
an instance this is something you have to think twice if you really want to do it

549
00:51:08,200 --> 00:51:13,000
I wouldn't recommend modifying the dict of dictionary unless you have a good reason to do so

550
00:51:13,000 --> 00:51:16,520
like if you debug something and you want to introduce something to get a better output

551
00:51:16,520 --> 00:51:20,600
so that's totally fine so for debugging you can do pretty much everything if you say okay

552
00:51:20,600 --> 00:51:25,160
I write some help us to get some better information and throw it away otherwise you might not want to

553
00:51:25,160 --> 00:51:31,080
do it here you cannot because it's a mapping proxy otherwise it's a dictionary and you see all

554
00:51:31,080 --> 00:51:37,160
these things are here in the dictionary so then you say instance dot python looks in the instance

555
00:51:37,160 --> 00:51:44,760
first and if you kind of find it it goes further to the class yeah this has advantage that I need to

556
00:51:45,400 --> 00:51:52,600
to store this information here only once in the class so this number is stored only once

557
00:51:52,600 --> 00:51:58,440
in all instances share the same number when you read then you access the same number and you don't

558
00:51:58,440 --> 00:52:07,000
have to store the same number 100 000 times if you have 100 000 calls yeah this is important

559
00:52:07,000 --> 00:52:11,560
saves a bit memory but also don't repeat yourself if the information should be exactly the same

560
00:52:11,560 --> 00:52:15,400
then it's probably better to have this information only to one place not in 100 000 places

561
00:52:16,040 --> 00:52:22,440
that might change independently good so that's how it works so you have attributes

562
00:52:22,440 --> 00:52:26,920
and this objects instance and the class and you can work with these attributes and they're stored

563
00:52:28,280 --> 00:52:34,760
in here good so now let's look at our car and do some traveling so we can do some traveling so if

564
00:52:34,760 --> 00:52:44,360
I have our tesla car here and I say travel time then it gives me a none which is not shown here

565
00:52:44,360 --> 00:52:49,320
there's no travel time it's not defined yet it could be zero maybe you can change it to zero

566
00:52:49,320 --> 00:52:54,680
would be I think totally fine and now I can say I drive

567
00:52:57,640 --> 00:53:02,200
I travel I travel my thousand kilometers to stay with our example

568
00:53:04,280 --> 00:53:09,640
then it's doing the you don't see any output here and then if you look at the

569
00:53:10,440 --> 00:53:16,520
travel time now the travel time increased to the 13.8 hours should be exactly the same as

570
00:53:18,280 --> 00:53:20,360
the other example hopefully so this is

571
00:53:23,560 --> 00:53:28,600
yeah this is not it's not sorted this is just I haven't sorted the cars yet I just have one car

572
00:53:28,600 --> 00:53:33,160
that I read in that's why it's not exact it's not the same tesla as we have then they sorted it

573
00:53:34,600 --> 00:53:35,100
good

574
00:53:39,640 --> 00:53:49,640
so

575
00:53:52,360 --> 00:54:04,920
okay and now the result is exactly the same we have no new output but the program is different

576
00:54:04,920 --> 00:54:10,680
everything is organized in a class and not only in functions but we reused quite a bit of our

577
00:54:10,680 --> 00:54:16,840
functions and made them methods of our class this is a totally me fine approach and you can

578
00:54:16,840 --> 00:54:24,920
do something like this so if you want you can also do a plot so I have this plotting here so if I have

579
00:54:24,920 --> 00:54:35,640
this this this I can say from travel times this this graph here I import a different class

580
00:54:37,320 --> 00:54:48,120
this is a graph car yeah graph car and now I make my graph car I'm lazy just one and I use the same

581
00:54:48,200 --> 00:54:53,800
thing my t yeah I have my graph car and I can say travel a thousand kilometers

582
00:54:57,800 --> 00:55:01,880
and then this one now supports plotting and if I say plot so if I have

583
00:55:04,120 --> 00:55:08,600
met putlip so if you want to use a plot actually you need met putlip sorry I didn't

584
00:55:09,240 --> 00:55:15,720
specify this one and to it to suppress this output here in the cynical now this would be the plot

585
00:55:15,720 --> 00:55:19,960
so but the plot is not essential for the understanding object rotation it's just you see

586
00:55:19,960 --> 00:55:24,920
this this is output you see that this tesla for instance stops only three times for charging

587
00:55:24,920 --> 00:55:29,320
because there's a bit bigger battery compared to this volkswagen which stopped five times or

588
00:55:29,320 --> 00:55:34,120
something yeah so this is something you can visualize directly now you can explore these

589
00:55:34,120 --> 00:55:42,200
objects step by step so this is a different car we don't we don't need to look into plotting how

590
00:55:42,280 --> 00:55:46,120
plotting works you can look at the code I gave it to you this is met putlip if it on met putlip

591
00:55:46,120 --> 00:55:50,280
it's not of interest because it doesn't really it's not concerned with our object on it

592
00:55:54,200 --> 00:56:02,440
problem good so now this is our pro program and here you also have a helper function show dix

593
00:56:02,920 --> 00:56:10,280
and and also the sorting I can do the sorting the same you see this I can also sort by travel times

594
00:56:10,280 --> 00:56:15,400
and I just put in and also I can use my get my attribute getter function which is exactly the

595
00:56:15,400 --> 00:56:21,000
same as a function I wrote it's just generating the function for me and I can sort my cars to

596
00:56:21,000 --> 00:56:31,000
have the car this is shortest travel time first so very similar to our solution before but we

597
00:56:31,000 --> 00:56:37,080
have it in the class any questions everything clear

598
00:56:40,440 --> 00:56:46,840
yeah so so far the advantages don't seem to be the big we can reorganize things a bit nicer

599
00:56:47,480 --> 00:56:53,880
so we can have things that are in the class the class attributes and we can have

600
00:56:55,160 --> 00:57:05,080
things that are in the instance yeah and then therefore our travel function came a bit shorter

601
00:57:05,080 --> 00:57:10,040
because we could move something to a different place and this is one advantage at least for

602
00:57:10,040 --> 00:57:17,960
this application good let's come to the next topic which would be inheritance so we just

603
00:57:17,960 --> 00:57:25,960
can make new notebooks here so then we have for each topic a new notebook and we stop inheritance

604
00:57:25,960 --> 00:57:38,360
inheritance is one one technology if you want or one technique one technique in object on

605
00:57:38,520 --> 00:57:42,680
programming that can make your life easier

606
00:57:45,000 --> 00:57:53,560
okay let's have an example so far we said okay as soon as we reach 20 percent charging starts and

607
00:57:53,560 --> 00:57:59,560
when we're done you keep driving that's not how it works typically you have to if you go there

608
00:57:59,560 --> 00:58:03,880
you have to stop get out you have to take your cable put your cable in then you have to take

609
00:58:03,880 --> 00:58:08,760
either a plastic card or some app and then the app doesn't work and they work around them it might

610
00:58:08,760 --> 00:58:14,200
take a while to get connected this time is not it's not in here this time is not in here and we

611
00:58:14,200 --> 00:58:21,720
want to change our problem a little bit to include this time so we want the most of it what we have

612
00:58:21,720 --> 00:58:26,760
anyway so the driving everything should be the same only this little bit extra time to connect

613
00:58:26,760 --> 00:58:32,280
the disconnect from the charger should be included so as example you have something and you want to

614
00:58:32,280 --> 00:58:39,240
modify it a little bit and for this type of problem inheritance can be a good tool

615
00:58:41,160 --> 00:58:47,080
the term inheritance comes from biology so we will use the term parent and child because they

616
00:58:47,080 --> 00:58:51,480
use this analogy of parent and child and typically the child is very similar to the parent

617
00:58:52,600 --> 00:58:56,360
in this case you can have one parent here biologically it's probably not so easy but here

618
00:58:56,360 --> 00:59:03,480
you can have one parent and in python also allows to have two parents or three or four

619
00:59:03,480 --> 00:59:10,520
which is very uncommon but possible i wouldn't recommend to use it in python but you can and so

620
00:59:10,520 --> 00:59:15,880
you have this this analogy of course you say the child is very similar to the parent but not exactly

621
00:59:15,880 --> 00:59:20,920
the same it's a little bit different it's not a clone which would be 100 the same but it's a bit

622
00:59:20,920 --> 00:59:29,080
different and this this principle can be used for inheritance so let's look at our example that we

623
00:59:37,400 --> 00:59:39,160
that we consider this

624
00:59:42,680 --> 00:59:47,480
consider this charging connection disconnection time and

625
00:59:47,800 --> 00:59:57,960
the import the load the file i have to put the file name there this must be the

626
01:00:01,160 --> 01:00:04,280
yeah i don't start from the beginning so i have to check myself how to find this name

627
01:00:05,000 --> 01:00:10,360
sometimes so it's here yeah connection time so pretty long name so load

628
01:00:10,920 --> 01:00:11,480
so we import

629
01:00:14,520 --> 01:00:24,600
travel travel time connection time so and we need pretty much everything from our car therefore we

630
01:00:24,600 --> 01:00:31,960
import our e-car here that's what we just wrote and now we do inheritance and we write the parent

631
01:00:31,960 --> 01:00:37,240
so the e-car is the parent and this charger connection time e-car which is a pretty long name

632
01:00:37,240 --> 01:00:42,360
yeah you see this the so-called camel case this is a camel case because you always write the first

633
01:00:42,360 --> 01:00:48,840
letter of each noun you capitalize them it looks like a camel in nature they only have two but here

634
01:00:48,840 --> 01:00:55,560
you can have as many pumps as you like see and then here i introduced the charge connection time

635
01:00:55,560 --> 01:01:00,200
there are many ways how to do this i use a class variable here again so put something the classes

636
01:01:00,200 --> 01:01:06,360
will be available and let's say okay it takes about six minutes to do the whole thing yeah

637
01:01:07,560 --> 01:01:12,200
and i've lumped both of them together connecting disconnecting which is kind of reasonable because

638
01:01:12,200 --> 01:01:16,520
you have to find your app and then you have you have different charging providers and you have

639
01:01:16,520 --> 01:01:26,120
the wrong app and so on yeah so then you have this extra and now you see i don't implement anything

640
01:01:26,120 --> 01:01:30,520
i do get everything for my parents so the child gets everything from the parent for free

641
01:01:32,120 --> 01:01:42,280
and then i override the charge yeah this charge match i re-implement the charge method

642
01:01:43,400 --> 01:01:49,560
and now the this this class the child class charge is a little bit different than the parent class

643
01:01:49,560 --> 01:01:55,080
and the difference is very small it still wants to do the same thing as the parent and that's why

644
01:01:55,080 --> 01:02:01,000
you use super what does super mean

645
01:02:04,040 --> 01:02:05,720
yeah so there's another analogy we sometimes the the parent would be super and the child would be

646
01:02:05,720 --> 01:02:12,920
sub so it is a different terminology so and this means please bring me my parent in this case this

647
01:02:12,920 --> 01:02:19,400
is very obvious it can can only be e-car there might be more complicated cases if when you have

648
01:02:20,040 --> 01:02:26,120
a deeper inheritance hierarchy here we only have parent-child relationship but i could be

649
01:02:27,240 --> 01:02:33,560
a parent and a grandparent and a great-grandparent and so on and there could be even

650
01:02:34,680 --> 01:02:38,280
python supports multiple inheritance there could be two classes in there which is not

651
01:02:38,680 --> 01:02:44,120
the common but possible and then you would have your ancestors from the mother side and from the

652
01:02:44,120 --> 01:02:48,920
father side and then it can be pretty complicated and sometimes strange things happen to do and

653
01:02:48,920 --> 01:02:56,760
anticipate and the super is doing the right thing in this case it just brings e-car and i call

654
01:02:56,760 --> 01:03:02,920
charge battery from the e-car so if you go back to this solution this would be so we call this

655
01:03:03,000 --> 01:03:08,840
charge it's not much so i could easily copy these lines this is just one line essentially

656
01:03:08,840 --> 01:03:15,240
this is just one line but still it's just one line if you copy this line and don't change it

657
01:03:16,040 --> 01:03:21,480
then you might think do i have to do this is this maybe they sound easier way because if you find

658
01:03:21,480 --> 01:03:26,040
the problem here and you fix this problem here then you have to go to this other e-car also and

659
01:03:26,040 --> 01:03:32,840
fix it also yeah and then you find the solution and you have to go to this other e-car also and

660
01:03:32,840 --> 01:03:37,640
fix in three places forget place number four that's not going to work for long don't repeat

661
01:03:37,640 --> 01:03:44,200
yourself just try to do it in one place whenever possible yeah question so in terms of the

662
01:03:44,200 --> 01:03:53,240
grandparents would you layer the super method or the question was a parameter layer what does it mean layer layer the parameters

663
01:03:53,240 --> 01:03:57,640
like we're not comparing from the parent or from the grandparent

664
01:03:59,880 --> 01:04:05,560
yeah so this one we look at this is this is what's called the method resolution what we look at in

665
01:04:05,560 --> 01:04:10,840
second i make an instance i'll show you how this works typically you you inherit from the parent

666
01:04:10,840 --> 01:04:14,760
if you want to skip the parent go to the grandparent it gets a bit more difficult

667
01:04:14,760 --> 01:04:20,120
because you have to know who the grandparent is but very often if you very often the parent

668
01:04:21,080 --> 01:04:24,680
uses the super from the grandparent this is a very common thing that you have multiple supers and

669
01:04:24,680 --> 01:04:31,400
the supers always goes up this doesn't have to be like this but is very very common yeah you can also

670
01:04:31,400 --> 01:04:35,080
override the method and don't use super if you don't need any function if you do something totally

671
01:04:35,080 --> 01:04:42,440
different that's also fine yeah so let's look how the super comes about how this works so again i make

672
01:04:43,720 --> 01:04:49,800
in this case i take this i take this out here you can run this also from the command line so i make

673
01:04:49,800 --> 01:04:58,600
a new car so for this i need to duplicate a bit of code because i made a new notebook so i have to

674
01:05:01,560 --> 01:05:08,840
i have to copy something like this yeah of course i need to get my data in

675
01:05:12,360 --> 01:05:15,560
yeah so i read my data and the data is not defined

676
01:05:19,800 --> 01:05:23,560
so

677
01:05:27,640 --> 01:05:35,240
good so i have my data and now i make my my uh my charge to the connection car which i give this

678
01:05:35,240 --> 01:05:41,960
great name see here and then i say okay make this this car and i can now feed in again

679
01:05:42,520 --> 01:05:46,520
uh star data zero which would be my tesla

680
01:05:48,680 --> 01:05:52,120
yeah so i have this this car and now um

681
01:05:54,280 --> 01:06:00,600
this is would be an instance but the main thing actually is if you look at the mro

682
01:06:02,200 --> 01:06:07,160
what's the mro so if you don't know what it is just look at help so of course if you just

683
01:06:07,160 --> 01:06:14,440
uh if you use this say help so in the notebook i use a question mark but the python help is also

684
01:06:14,440 --> 01:06:21,320
same so if you look at it the return types method method resolution order so the method

685
01:06:21,320 --> 01:06:27,800
resolution order then you say instance dot something then it looks in the instance and then

686
01:06:27,800 --> 01:06:34,600
then goes to the class and if it can't find in the class it goes to the next in line and next in line

687
01:06:34,600 --> 01:06:39,880
is the one in the method resolution order and you can see here our charger connection time

688
01:06:40,440 --> 01:06:47,800
inherits from ecar which inherits from object everything always inherits from object yeah that's

689
01:06:47,800 --> 01:06:51,960
the same my sentence i don't know how many thousand times i said everything is an object in python

690
01:06:51,960 --> 01:06:57,160
because i repeated many times in each training and this is the proof you see the object is always a

691
01:06:57,800 --> 01:07:00,600
and it's a stuff everything everything inherits from object

692
01:07:02,040 --> 01:07:04,280
and so if you say instance object it always works

693
01:07:05,400 --> 01:07:12,680
that's no no problem there so you always have an object instance here and the super does nothing

694
01:07:12,680 --> 01:07:19,800
else but uses this one and goes along this method resolution order until it finds a method so if the

695
01:07:19,800 --> 01:07:25,240
parent doesn't have maybe a question if the parent doesn't have it done the charge it will go to the

696
01:07:25,240 --> 01:07:29,480
grandparent because it looks in the parent and the parent doesn't provide it that goes to the next

697
01:07:30,360 --> 01:07:36,840
and in the very end they will ask object for something yeah this is also the reason that

698
01:07:36,840 --> 01:07:42,920
by this by this this output is this is called representation looks like this this representation

699
01:07:42,920 --> 01:07:46,600
comes from object if you look later on how we can make our own representation

700
01:07:48,120 --> 01:07:53,880
so object brings quite a few standard things with it if you don't implement it we get the standard

701
01:07:53,880 --> 01:08:01,800
ones so this you see now this is a very short class that's exactly the same as ecar and does

702
01:08:01,800 --> 01:08:07,400
a little bit different and this makes is it's nice because now you can go step by step and explain

703
01:08:07,400 --> 01:08:12,440
for me because i can pretty much focus on what changes i don't have to copy the whole code or

704
01:08:12,440 --> 01:08:16,280
change all these functions yeah if you do this with a charge function you would need to

705
01:08:16,280 --> 01:08:20,680
write a new function that could call the file you could do the same thing but here you have a kind

706
01:08:20,680 --> 01:08:25,640
of a standardized way that's inheritance when everybody expects that something like this happens

707
01:08:25,640 --> 01:08:29,400
when you write functions you have to make it really clear that this function is going the other

708
01:08:29,400 --> 01:08:37,000
function and so on so but inheritance is a concept that exists in python in objectable

709
01:08:37,000 --> 01:08:43,400
programming and of course also in python for quite a while and you can do a few things with it good

710
01:08:43,880 --> 01:08:50,760
any questions about this everything clear good so let's continue

711
01:08:57,800 --> 01:09:01,960
let's come to operator overloading so i make a new notebook

712
01:09:06,840 --> 01:09:08,280
and i call this

713
01:09:13,960 --> 01:09:19,080
overloading operator overloading so as an example

714
01:09:22,600 --> 01:09:24,040
if i have two lists

715
01:09:31,400 --> 01:09:40,280
i have two simple lists and now i can say list one plus list two and this works typically the plus

716
01:09:40,280 --> 01:09:45,800
is something for for mathematics for numbers but in python you can use a plus for lists you can

717
01:09:45,800 --> 01:09:58,920
use a plus for strings so how does it work when you use a plus actually in the background python

718
01:09:58,920 --> 01:10:08,600
is using the add function here this is add this special method this dunder add this dunder add

719
01:10:08,600 --> 01:10:15,480
and i throw in this l2 put in the l2 and i get the same same effect in fact if you have a number

720
01:10:17,400 --> 01:10:25,560
the same thing happens so you say number plus five i do get this one and i can say number add

721
01:10:30,040 --> 01:10:38,040
plus five and i could do get the 15 the same thing as adding it here so whenever you use the plus

722
01:10:38,040 --> 01:10:46,360
python is looking for this dunder add in your class if it doesn't have it it goes to the parent

723
01:10:46,360 --> 01:10:51,640
class if it exists and searches for it if you it's not there by default so object doesn't have an

724
01:10:51,640 --> 01:10:59,000
ad so that's why this one would fail this object doesn't support the ad so if you want to know more

725
01:10:59,000 --> 01:11:03,720
about it you can go to the python help so this this help opens just the norm exactly the same

726
01:11:04,360 --> 01:11:10,920
to come python documentation and if i type in add which i did before obviously then it jumps

727
01:11:10,920 --> 01:11:17,000
to object add and then you will see there's many many more you see this is a section emulating

728
01:11:17,000 --> 01:11:24,120
emulating numeric types and this one provides pretty much all numeric operations add sub minus

729
01:11:24,120 --> 01:11:29,640
multiplication so the signs are explained here not there but you can read them up so everything you

730
01:11:29,640 --> 01:11:34,200
can do with numbers you have an ad and there's more this are it so if the left partner doesn't

731
01:11:34,200 --> 01:11:39,800
have an ad it goes to the right part of the second partner looks for the ad for this partner and then

732
01:11:39,800 --> 01:11:45,160
there's an i add which would be plus equals yeah plus equals minus equals and so on and a bunch of

733
01:11:45,160 --> 01:11:51,400
more like a a negative sign in front of the number could turn something you can turn something in a

734
01:11:51,400 --> 01:11:55,400
complex in the float number which doesn't make a lot of sense with the car but you can do it with

735
01:11:55,400 --> 01:12:02,120
numbers yeah so it does put you be very useful you can implement your own rounding and this is not

736
01:12:02,120 --> 01:12:08,920
connected to an operator like plus minus and so on but to a built-in function so the operator

737
01:12:08,920 --> 01:12:14,520
overloading is a little bit too narrow it's a special message to a bit more and because also

738
01:12:14,520 --> 01:12:21,400
this same here these are complex in the float are not operators but you type in complex in the float

739
01:12:21,400 --> 01:12:27,800
and when you type this function in or this name in then pyson is looking for this dunder method

740
01:12:27,800 --> 01:12:33,800
of this object and applies it same goes for length so there's many of these so if you want to you can

741
01:12:33,800 --> 01:12:40,600
look through there's more of these once this contains would be the in so whenever you say

742
01:12:40,600 --> 01:12:46,520
x in list then if your object has a contains it uses contains you will see if it doesn't

743
01:12:46,520 --> 01:12:51,800
contains there are some other fallbacks that is also doing using for the same same purpose

744
01:12:51,800 --> 01:12:58,440
yeah they're reversed which would return iterator so you have to read up a little bit how this works

745
01:12:58,440 --> 01:13:06,440
and you can override a lot of these things get item set item things a lot of different syntax

746
01:13:07,800 --> 01:13:09,000
here you see this would be the

747
01:13:09,480 --> 01:13:18,360
and set item get item things this x-ray you have to read through if you want to implement some of

748
01:13:18,360 --> 01:13:25,080
them you can also make your instance callable for instance so we learned that classes are callable

749
01:13:25,080 --> 01:13:30,600
and functions are callable and you can make your own instances also callable by implementing this

750
01:13:30,680 --> 01:13:35,560
dunder call method the most interesting ones actually are

751
01:13:42,360 --> 01:13:49,400
to go up a little bit um they are top here the comparison ones so

752
01:13:51,320 --> 01:13:55,080
you can make your you can say here my calls true or false what does mean

753
01:13:55,080 --> 01:13:59,160
i don't you could implement something like this but the interesting ones are the six

754
01:13:59,160 --> 01:14:03,800
these are the comparisons ones yeah less than less equal equal not equal greater than greater equal

755
01:14:04,920 --> 01:14:11,240
and then you can make your cause comparable and that's what you want to do now so that's what

756
01:14:11,240 --> 01:14:19,240
you want to do now and i'm probably need to close some of those tabs otherwise i can't see anymore

757
01:14:19,240 --> 01:14:22,440
which one is which so close inheritance tab so

758
01:14:22,440 --> 01:14:30,200
so i have an example where we do this so we improve the this comparing so we don't need to

759
01:14:30,200 --> 01:14:39,560
specify this key function anymore by improving our class a little bit so i load this

760
01:14:39,560 --> 01:14:42,680
um

761
01:14:45,240 --> 01:14:47,960
comparable call so we can compare it

762
01:14:50,280 --> 01:14:55,800
so and again i use the concept of inheritance you don't have to combine them but it makes it

763
01:14:55,800 --> 01:15:01,000
easier because i want to focus on it so you see i'm i inherit from e-car already we did this just

764
01:15:01,000 --> 01:15:08,120
now and then i override this lt function less than and this is enough to make them comparable

765
01:15:08,680 --> 01:15:14,360
the documentation says you might want to also have the equal implemented but just for to sort them

766
01:15:15,400 --> 01:15:22,120
for sorting this this lesson is good enough and here we provide the same information that we would

767
01:15:22,120 --> 01:15:28,040
have used this is special key function so we take the travel time so the car this is this is shorter

768
01:15:28,040 --> 01:15:36,360
travel time will come first that's what it says and now i move this comparison from an helper function

769
01:15:36,360 --> 01:15:42,200
that i have to apply from outside into the object so the object is active to some degree it can do

770
01:15:42,200 --> 01:15:49,640
something so always the object doesn't do anything but you you can think about the object is doing

771
01:15:49,640 --> 01:15:55,240
something and this energy makes makes sense and now my sorting is easier you see the sorted now

772
01:15:55,240 --> 01:16:00,600
doesn't need this key parameter anymore i can sort it directly and have the same output so if i i can

773
01:16:00,600 --> 01:16:08,680
run this here which tells me this is not there because i changed the directory and then you see

774
01:16:08,680 --> 01:16:14,920
now this is exactly the same output as before but i don't have to specify a special key function here

775
01:16:14,920 --> 01:16:20,200
because and move the same conception into the same thing into the object itself so the object

776
01:16:20,200 --> 01:16:26,360
knows what to do i don't have to tell from outside what to do with the object so if everything goes

777
01:16:26,360 --> 01:16:30,760
right this would be an advantage that the object knows what to do and you just do something it

778
01:16:30,760 --> 01:16:35,160
behaves and accordingly and you don't have to tell from outside there's a function how to do it

779
01:16:36,280 --> 01:16:41,160
and now if you make it comparable and you could override many many more of the special methods

780
01:16:41,160 --> 01:16:49,960
if they make sense yeah if it makes sense you can override them and you can improve your car

781
01:16:50,520 --> 01:16:59,000
good and that's what we want to do now because if you look at this

782
01:17:00,600 --> 01:17:05,480
e-car so if you have our our tesla here if i type in tesla

783
01:17:08,440 --> 01:17:14,600
you get this this output this is a representation so python has two bit and functions representation

784
01:17:15,560 --> 01:17:22,920
this looks like this and there's str which for many objects gives you the same output not all of them

785
01:17:23,560 --> 01:17:31,720
yeah so this is exactly the same if i say representation representation of a string

786
01:17:33,720 --> 01:17:37,960
representation of a string then it looks like this where if you say string from a string

787
01:17:38,520 --> 01:17:40,920
then it looks a bit different so there's a slight difference here

788
01:17:41,880 --> 01:17:46,120
how things look like because the string is just a string and this is just a string that represents

789
01:17:46,120 --> 01:17:50,280
the strings a double string that's why you have this double and single quotes here

790
01:17:51,720 --> 01:17:58,680
and the thing is if you run this through the this is just the same source code if i if i run this

791
01:17:59,720 --> 01:18:05,800
representation through a vowel which takes a piece of string and involve a value as a python code

792
01:18:05,800 --> 01:18:10,840
then you should get back a string that's the whole thing about it yeah that's the whole thing

793
01:18:11,320 --> 01:18:15,960
if it's possible it's not always possible but if it's possible then the representation should

794
01:18:15,960 --> 01:18:20,600
so if you do this with this car it doesn't work yeah well here it just shows you this is a standard

795
01:18:20,600 --> 01:18:26,600
representation of a class that gives you the class name which lives in name which is my notebook and

796
01:18:26,600 --> 01:18:34,760
this is an id this is a hexadecimally a decimally formed number of when you use id yeah so if i

797
01:18:34,760 --> 01:18:36,200
if i say id from tesla

798
01:18:39,400 --> 01:18:43,880
id from tesla and i convert it into a hexadecimally formed then it should

799
01:18:46,200 --> 01:18:51,080
this does work so it should be giving me the same yeah so if you look at the number that's the same

800
01:18:51,080 --> 01:18:58,360
number yeah that's actually what this puts in the id is unique yeah that's the whole purpose of an

801
01:18:58,360 --> 01:19:04,360
id and then you can distinguish your instance of the class okay ids can be reused it's like you have

802
01:19:04,360 --> 01:19:09,480
a license plate from car if you if the car doesn't exist anymore then somebody else can get the same

803
01:19:09,480 --> 01:19:16,760
license plate later on similar here so it can happen it's not very common but it's totally

804
01:19:16,760 --> 01:19:30,520
possible but this one you can you can do so make our car representable then so i load my represental

805
01:19:30,520 --> 01:19:31,720
the car and

806
01:19:36,840 --> 01:19:37,240
calc

807
01:19:42,520 --> 01:19:49,000
why doesn't it load so typically it should give me okay copy it in so

808
01:19:49,000 --> 01:19:49,480
so

809
01:19:51,160 --> 01:20:00,840
sometimes it doesn't like me so and now i override these representation function and now i can give

810
01:20:00,840 --> 01:20:08,040
it a richer a richer representation and this is up to me what i'm doing you see i have to return

811
01:20:08,040 --> 01:20:13,560
the string here and that's what i'm doing just how you come up with a string is up to you but

812
01:20:13,560 --> 01:20:20,280
this should look nice and that's what i'm doing here and i'm just using an f string to return a

813
01:20:20,280 --> 01:20:27,160
string so now you have to give it a little bit more thought to make it

814
01:20:30,440 --> 01:20:37,800
reusable so i could just say okay i take this name represent the car and return to so let's

815
01:20:37,880 --> 01:20:46,680
let's run this one so i can now yeah if i run the whole thing i get an error message because

816
01:20:46,680 --> 01:20:50,840
i have the wrong directory so if i run the whole thing you see now

817
01:20:55,640 --> 01:21:03,560
it doesn't look nice because i would need to i have to put a print what did i do here

818
01:21:07,800 --> 01:21:11,560
so

819
01:21:18,360 --> 01:21:22,360
let's just use a print yeah just choose a print don't use a pretty print so i have to change this

820
01:21:22,360 --> 01:21:28,360
that looks better so now you see i have a representable car and this car looks like this

821
01:21:28,360 --> 01:21:34,040
so this looks exactly this one if you type this in you will get instance of the car so now this is

822
01:21:34,040 --> 01:21:42,920
a bit more involved to get there you see i use the f string which generates a string and then i

823
01:21:43,560 --> 01:21:48,920
do a little bit here and i make it just list all this because i have so many attributes i have a

824
01:21:48,920 --> 01:21:55,240
list of the attributes i like and i use some formatting here to format them one of the other

825
01:21:55,240 --> 01:22:01,640
i don't write it out by hand i just format it okay visit go here have a new line the indent which is

826
01:22:01,640 --> 01:22:06,760
four spaces so add a four space and join these things here and i go

827
01:22:09,000 --> 01:22:15,480
and in this attribute as you use get attribute self attribute name so automatically

828
01:22:16,760 --> 01:22:21,800
into the instance and retrieve the attribute names here and

829
01:22:21,800 --> 01:22:31,960
and yeah get get these attributes for all these names here and i can put them in automatically

830
01:22:32,760 --> 01:22:37,160
for this one gives me the value because if i print this out you see this is a this is the names i

831
01:22:37,160 --> 01:22:43,080
provide but this value is an instance the information which i need to get out and this

832
01:22:43,080 --> 01:22:48,120
get attribute does it automatically and this get attribute does the same thing itself but

833
01:22:48,120 --> 01:22:54,680
attribute and then i use here the representation of the object yeah and the produce so that's a

834
01:22:54,680 --> 01:23:02,680
bit more involved obviously and then i also need to anybody knows why i do this long thing here

835
01:23:02,680 --> 01:23:12,440
what does it mean self class self name so this is representable cause if you this this produces

836
01:23:13,080 --> 01:23:17,480
this representable call so i could have just copied in represent the call

837
01:23:18,440 --> 01:23:22,360
why is not idea a good idea to copy in represent the car as a string here

838
01:23:25,720 --> 01:23:26,280
any idea

839
01:23:29,560 --> 01:23:30,060
yeah

840
01:23:30,060 --> 01:23:32,060
yeah

841
01:23:39,900 --> 01:23:45,820
no this this one in this case just gives this one just copies this this thing as a string directly

842
01:23:45,820 --> 01:23:53,580
in there yeah yeah when you change the name of the class later or when you do inheritance

843
01:23:53,580 --> 01:23:58,860
so if you inherit from this class and you don't specify a representation then python say okay i

844
01:23:58,860 --> 01:24:02,940
don't have a representation i take it from my parent going up the method resolution order and

845
01:24:02,940 --> 01:24:07,660
then it takes a rip this one from the from the parent and then all of a sudden my class with

846
01:24:07,660 --> 01:24:12,300
a different name says it's a representative of the car which is not the case it's lying about it

847
01:24:13,500 --> 01:24:18,860
this can happen yeah and this might this might not be obvious if you don't test for this you don't

848
01:24:18,860 --> 01:24:26,380
see it yeah so this if you use inheritance you should think about making your code inheritance

849
01:24:26,380 --> 01:24:31,500
proof and this is not that easy you have to think a little bit ahead what could happen so if i write

850
01:24:31,500 --> 01:24:36,540
the class and give my module with a class to somebody else somebody else can inherit from my

851
01:24:36,540 --> 01:24:40,620
class i cannot really prevent it i'm not aware that as i say i don't want to be inherited from

852
01:24:40,620 --> 01:24:44,860
then they can do all kind of things and then you should actually you need to more or less factor

853
01:24:44,860 --> 01:24:49,420
in this this use case that somebody's inherited from you and what's going to happen if this is a

854
01:24:49,420 --> 01:24:56,220
child class one of my own class still doesn't work the same way i like it to work yeah so this is

855
01:24:56,460 --> 01:25:01,020
this could be a problem and so this representation thing is a bit more involved i want to show you

856
01:25:01,020 --> 01:25:06,620
you can do this and then you get a nice representation here and if you do this in

857
01:25:11,180 --> 01:25:14,140
in the notebook you can get even a little bit more so if i say now

858
01:25:16,380 --> 01:25:22,620
do i have my data here yeah so if i say my representative of the car over the time or is it

859
01:25:23,500 --> 01:25:30,060
represented the car or is a representative of the car my data

860
01:25:32,860 --> 01:25:40,220
ever star data zero which is my first car i'm reading in so i have my my car and if i do this

861
01:25:40,220 --> 01:25:48,620
here you see now this looks different this is colorful this is colorful which i produced

862
01:25:48,620 --> 01:25:55,340
because it's just a string but if you're in a notebook you can add another not so special

863
01:25:55,340 --> 01:25:59,980
method but notebook special method which just has two one underscore on the beginning end is

864
01:25:59,980 --> 01:26:06,300
representation html and you can generate html which can be useful so if you work in notebook

865
01:26:06,300 --> 01:26:12,060
and you use pandas then you always get this nice html table yeah and here you can do it yourself

866
01:26:12,060 --> 01:26:18,540
and this one it's i don't do the work myself i just use pigments which is a pile of modules so

867
01:26:18,700 --> 01:26:23,100
if you want to run this then you need pigments but it's not essential for the object annotation

868
01:26:23,980 --> 01:26:29,340
and then i just this is just this is plain pigments so this is uh if you go to the help page

869
01:26:29,340 --> 01:26:34,220
on the very first page this is plain pigment thing how to format make everything nice colorful

870
01:26:34,220 --> 01:26:38,780
syntax highlighting so there's nothing special i don't have to write any single new line and now

871
01:26:40,780 --> 01:26:46,860
i can have have syntax highlighting if you want you can make your own html by hand and generate

872
01:26:46,860 --> 01:26:53,580
html with css whatever you like yeah could be useful and this happens in the notebook

873
01:26:54,140 --> 01:26:59,020
if you do this in command line you see this text without anything yeah if you do it in

874
01:27:00,540 --> 01:27:06,700
so if i say print r which now this print r would use a representation and that's the same thing

875
01:27:06,700 --> 01:27:12,940
but you don't see the syntax highlighting there's no colors in this case yeah can be useful making

876
01:27:12,940 --> 01:27:18,220
your object representable because this representation is used when you debug when you

877
01:27:18,220 --> 01:27:22,540
do when you see error message you see the representation and if if you just see this is

878
01:27:23,100 --> 01:27:29,340
one instance of this car this id maybe it's not the best information if you say this is this type

879
01:27:29,340 --> 01:27:34,220
of car with all this information maybe it's much more useful because it's yeah yeah okay this value

880
01:27:34,220 --> 01:27:41,660
is zero it could be the problem this is what you can do you can make can make your

881
01:27:43,820 --> 01:27:44,940
car representable

882
01:27:51,420 --> 01:27:51,740
good

883
01:27:55,100 --> 01:27:57,020
any questions about these special methods

884
01:28:01,660 --> 01:28:09,500
python offers many of them if you go to the help it's like 150 you never ever need all of them

885
01:28:09,500 --> 01:28:15,100
there's many of them very special very deep some of them are very common like this add one for the

886
01:28:15,100 --> 01:28:21,980
plus the comparison operators the representation yeah there's a second one is called the str which

887
01:28:21,980 --> 01:28:26,700
you could also implement if the str is not implemented it will fall back to representation

888
01:28:26,700 --> 01:28:33,260
so if i since i don't have a str here bundle str it will fall back to the representation and uses

889
01:28:33,260 --> 01:28:39,580
this information from the representation now we make our object more expressible and we move some

890
01:28:39,580 --> 01:28:44,700
functionality we had to supply from outside like for the sorting inside the object so the object

891
01:28:44,700 --> 01:28:51,020
can do more if i move it inside the object this can be advantage if you create objects

892
01:28:53,420 --> 01:28:53,920
yeah

893
01:28:53,920 --> 01:29:05,920
okay if i know what i said it's just see faces i don't know if if you don't understand we have

894
01:29:05,920 --> 01:29:14,560
break feel free to ask me in the break if there's anything so it's 10 30 is one minute so let's say

895
01:29:14,560 --> 01:29:18,800
20 minutes this is okay yeah so 20 minutes so we continue here

896
01:29:19,120 --> 01:29:20,240
so we have a second here

897
01:29:23,040 --> 01:29:23,540
break

898
01:29:25,760 --> 01:29:26,260
till

899
01:29:28,880 --> 01:29:34,400
it's 10 30 10 50 10 30 now 10 50 and then we continue

900
01:29:35,760 --> 01:29:39,440
this our travel into object on land

901
01:29:40,240 --> 01:29:49,760
okay we have one more minute i don't have seconds here but about one more minute so please come back

902
01:29:49,760 --> 01:29:56,000
in if you're outside if you can hear me we would like to continue so we have a lot of ground to

903
01:29:56,000 --> 01:30:02,640
cover that's why you don't want to lose time so it's 50 now so at first i would like to address

904
01:30:02,640 --> 01:30:07,920
a few questions during the break a few people approached me for instance about the notebook so

905
01:30:07,920 --> 01:30:12,240
all these notebooks are developed i will share with you because they have something they have

906
01:30:12,240 --> 01:30:17,360
questions answers in there so i will take everything i have notebooks i also do have a solutions

907
01:30:17,360 --> 01:30:22,480
document the pdf and i put everything into the zip file and upload again so you can download the

908
01:30:22,480 --> 01:30:27,760
same zip file and that includes all the stuff so there's no new link give me now also to do this

909
01:30:27,760 --> 01:30:34,960
if i forget just give me an email if you forgotten to do this then i sent you the network that just

910
01:30:34,960 --> 01:30:41,920
uploaded yeah a few other questions about these these notebooks people might not be familiar with

911
01:30:41,920 --> 01:30:45,760
the notebook so last year i gave a whole tutorial about the notebooks you can do way more than i

912
01:30:45,760 --> 01:30:51,200
show you so these are kind of you just mentioned the term prototyping this good it's good for

913
01:30:51,200 --> 01:30:56,240
prototyping for trying things out as soon as they get more serious move it to the file so because

914
01:30:56,240 --> 01:31:01,440
they have also disadvantages if you don't mind to implement the classes now all my classes are on

915
01:31:01,440 --> 01:31:05,840
files i just import them i just show them to you here but when you do something more serious use

916
01:31:05,840 --> 01:31:10,880
your ability studio code pycharm all these nice tools you have you can always combine it there

917
01:31:10,880 --> 01:31:15,680
are some limited to reload options so when you change the source code imported function will be

918
01:31:15,680 --> 01:31:22,160
really automatically there are some caveats it's not always working but to most degrees it works

919
01:31:22,960 --> 01:31:28,480
and you can combine so notebooks are a great tool but that is always you have to use the right tool

920
01:31:28,480 --> 01:31:35,680
for the right purpose people complain this doesn't work this is because you use users in the wrong way

921
01:31:35,680 --> 01:31:40,000
then it doesn't work yeah so you have to be aware of the disadvantages or the shortcomings or

922
01:31:40,000 --> 01:31:47,920
assumptions as we stated them then things become clear a few more other things about inheritance

923
01:31:48,880 --> 01:31:53,920
there was a question about inheritance and composition so there's different approaches

924
01:31:54,000 --> 01:32:01,760
i don't recover composition here which i could but the time is limited so inheritance is usually

925
01:32:01,760 --> 01:32:07,760
is a relationship so a e-car is a car so if i would have a car i could inherit my e-car from

926
01:32:07,760 --> 01:32:15,200
the car because it's still a car the composition is more has a relationship so like a car has wheels

927
01:32:15,200 --> 01:32:22,240
the wheel shouldn't inherit from car a wheel belongs to a car so that's a simple example but

928
01:32:22,240 --> 01:32:28,000
these things are there also in python you can actually do a different approach is called wrapping

929
01:32:28,000 --> 01:32:34,240
but called wrapping so instead of in her do inheritance you have a class that uses the instance

930
01:32:34,240 --> 01:32:42,160
of author class as a proxy you always delegate them to broke to this class because when you do

931
01:32:42,160 --> 01:32:46,000
inheritance you always get everything from your parents you don't have a choice you either get

932
01:32:46,000 --> 01:32:49,680
everything or nothing you can adjust i just want this method or this method if you don't want you

933
01:32:49,680 --> 01:32:53,520
have to override the methods you implement the method when you raise a not implemented error

934
01:32:54,400 --> 01:32:58,400
that's what i call blacklisting so if if you do inheritance you get everything if you don't want

935
01:32:58,400 --> 01:33:02,160
to you have to actually say i don't like this i don't like this i don't like this

936
01:33:03,760 --> 01:33:08,960
yeah and you have to be inclusive like this not cannot can be difficult because you might not

937
01:33:08,960 --> 01:33:12,720
know but you get everything if you're not on the way out then you get all these methods for some

938
01:33:12,720 --> 01:33:17,920
reason because you get everything from all your ancestors there so if you do gui programming so

939
01:33:18,560 --> 01:33:23,920
this is also a good example if you write a graphical user interface all the modern ones have

940
01:33:23,920 --> 01:33:30,560
classes hundreds of classes in each class has hundreds of methods because they have very deep

941
01:33:30,560 --> 01:33:36,560
inheritance hierarchy with a lot of when you get a lot of methods from a lot of widgets in this case

942
01:33:36,560 --> 01:33:41,120
most of the time it is designed like this but it's kind of difficult if you're classed with 350

943
01:33:41,120 --> 01:33:47,680
methods how you're going to work with it yeah so this could be a little bit overwhelming it is

944
01:33:47,680 --> 01:33:53,120
so big and this is wrapping you can do white listing you can explicitly just say i want this

945
01:33:53,120 --> 01:33:59,360
and this and this and everything else won't work so white listing can be easier this is a different

946
01:33:59,360 --> 01:34:07,760
approach is but you can can do more things in python inheritance can be great a prime example

947
01:34:07,760 --> 01:34:15,600
of inheritance is exceptions so if you go to the python help when you type in so this also

948
01:34:16,400 --> 01:34:20,880
let's keep this open i make another help because i want to show this also there was also a question

949
01:34:20,880 --> 01:34:27,120
so if you go to the python reference when you say something like zero division exception or some kind

950
01:34:27,120 --> 01:34:33,520
of exception you will go to the exception page so if you go to exception page and the very bottom of

951
01:34:33,520 --> 01:34:38,240
the exception page that's a help page about exceptions in the python standard library or

952
01:34:38,240 --> 01:34:42,000
python standard help then you have an exception hierarchy and this is the prime example for

953
01:34:42,000 --> 01:34:47,360
inheritance because all exceptions do exactly the same you don't want this exception to this

954
01:34:47,360 --> 01:34:52,560
and this it should be exactly the same the only difference is the cause why the exception is

955
01:34:52,560 --> 01:34:59,920
raised and the cause is is shown in the name of the of the of the class class names camel case

956
01:34:59,920 --> 01:35:04,800
yeah this is a good example because all exceptions do exactly the same they generate a trace back

957
01:35:04,800 --> 01:35:11,600
information all the things only why they are raised or why they happen is different yeah

958
01:35:12,080 --> 01:35:16,880
inheritance makes a lot of sense then you can write down your problem you have nice boxes and

959
01:35:16,880 --> 01:35:22,080
arrows and they assemble in a nice hierarchy that indicates that then inheritance can be a good

960
01:35:22,080 --> 01:35:27,600
solution if all the boxes and arrows go like this and you tell them they don't form a nice hierarchy

961
01:35:27,600 --> 01:35:34,480
then inheritance might not be the best solution yeah all those technologies can work against you

962
01:35:34,480 --> 01:35:39,120
if you apply them in the wrong way because then they do a lot of things you don't want then you

963
01:35:39,760 --> 01:35:44,720
might hold the term you work against the framework the framework gives you very nice tools to do

964
01:35:44,720 --> 01:35:48,720
solve a certain type of problem but if you have a different problem and it's different

965
01:35:48,720 --> 01:35:52,720
enough on the framework then you work against the framework and the same thing this programming so

966
01:35:52,720 --> 01:35:58,960
if your problem doesn't lend itself to the thing then maybe not use inheritance yeah this is

967
01:35:58,960 --> 01:36:04,080
something that might might not be so clear at the beginning it turns out when you've broken it that

968
01:36:04,080 --> 01:36:10,240
over time I realized oh maybe not the best thing okay about this there's this less than so here

969
01:36:11,040 --> 01:36:17,200
the the fight the func tool func tool modules in in python has a class decorator called total

970
01:36:17,200 --> 01:36:20,960
ordering so we don't cover cluster greater here but this is thing you put there and then it happens

971
01:36:20,960 --> 01:36:27,680
so that's all you need to know here and here you only implement equal and less than and this total

972
01:36:27,680 --> 01:36:32,720
ordering decorator implements the other four six of these comparison functions you don't have to

973
01:36:32,720 --> 01:36:38,160
implement them with some rules yeah less than the opposite is greater than that it's easy yeah so

974
01:36:38,720 --> 01:36:44,560
just just this around and then you don't have to do this and you would have all of these four

975
01:36:44,560 --> 01:36:52,720
methods working if you want to use your objects with those operators so typing in these operators

976
01:36:53,440 --> 01:36:59,520
as an operator then it would work yeah so there's quite a few helpers here and there which some of

977
01:36:59,520 --> 01:37:07,920
them I mentioned the pdf but I probably have mentioned it here good let's continue one more thing about

978
01:37:23,200 --> 01:37:26,480
so I call this second constructor even though it's not a constructor

979
01:37:29,920 --> 01:37:30,800
so um

980
01:37:33,200 --> 01:37:38,080
python has something called class methods anybody knows what the class method is

981
01:37:40,240 --> 01:37:47,040
now so if you have a class a then you have a normal method and then you have a normal method

982
01:37:48,160 --> 01:37:54,640
you have the self as the first argument what's what does the self mean what's the self put for

983
01:37:55,600 --> 01:37:57,600
what's the self

984
01:38:01,600 --> 01:38:07,600
yeah the self is a placeholder for the instance because these are functions in the first argument

985
01:38:07,600 --> 01:38:15,600
instance I can explain this um so I don't or just say return 42 so it's like and then I have

986
01:38:15,600 --> 01:38:20,160
a class method and to have I have a class method in order to have a class method I need to have

987
01:38:20,880 --> 01:38:27,680
a decorator so I need to decorate this one with a class method so decorator is doing something

988
01:38:27,680 --> 01:38:33,440
this method changes the method you can implement decorators yourself but this would take another

989
01:38:33,440 --> 01:38:38,400
three hours to explain all the things so we don't do this that's why I have this um

990
01:38:42,080 --> 01:38:44,400
so let's assume we have an init

991
01:38:50,160 --> 01:38:52,400
so

992
01:39:02,560 --> 01:39:11,760
something like this yeah so and now I have a very often called from from from um from a

993
01:39:12,400 --> 01:39:19,600
quote from me and then here I get cls so in cls this is just these these names self and cls are

994
01:39:19,600 --> 01:39:25,360
just conventions they're not fixed they're turned into blue syntax because they have a very special

995
01:39:25,360 --> 01:39:29,840
meaning but they're not fixed you can use any kind of work there but this is very strong convention

996
01:39:29,840 --> 01:39:36,160
use self and cls stands for class back in the day some people spell class with a k or something

997
01:39:36,160 --> 01:39:43,440
like this but that's not common anymore so now I have this um this one and I just say I return a new

998
01:39:44,080 --> 01:39:53,200
I return a new instance of this of this class by using class and supplying this um

999
01:39:57,120 --> 01:40:06,720
this other a instance a when I say a dot value so this makes a class from the other class that's a

1000
01:40:06,720 --> 01:40:13,280
very common typical application of a class method so a normal method takes the instance as an

1001
01:40:13,280 --> 01:40:21,040
attribute so if I make an instance of my class a yeah then I can say which I have to provide the

1002
01:40:21,040 --> 01:40:30,480
value and yeah and I mistype the value so I can always fix it here go back in history so a is this

1003
01:40:30,480 --> 01:40:40,240
now I can say a method and a method returns a 10 if I say capital s a method then it tells me

1004
01:40:40,240 --> 01:40:46,240
oh no you're missing something there's one you forgot the self you forgot the self and the self

1005
01:40:46,240 --> 01:40:52,160
has to be a special kind of argument it has to be instance of the class if I put the instance in

1006
01:40:52,240 --> 01:41:00,640
now this is doing exactly the same as this yeah because the a method is a function

1007
01:41:01,840 --> 01:41:06,480
just a normal function nothing special just a function that happened to be inside the class

1008
01:41:06,480 --> 01:41:16,640
and the first argument is the self and here this method is a bound method so it is bound it's bound

1009
01:41:16,640 --> 01:41:21,440
to what it's bound to the instance therefore you you cannot because the a is in front of the

1010
01:41:22,160 --> 01:41:27,360
a dot method then the a is consumed the lowercase a is consumed already then you don't supply this

1011
01:41:27,360 --> 01:41:32,640
argument anymore that's the whole thing the method bounding is complex complex using descriptors and

1012
01:41:32,640 --> 01:41:37,120
so on but we don't we don't have to be concerned about how it actually works we just know that it

1013
01:41:37,120 --> 01:41:46,720
works yeah so so if you want to you can say the class in first it's just a collection of functions

1014
01:41:46,720 --> 01:41:51,520
that belong together somehow and I have a bit more structured way to put them together that's

1015
01:41:51,520 --> 01:41:57,280
one approach if you want to yeah and they then they have a global namespace and this global namespace

1016
01:41:57,280 --> 01:42:03,520
is handled over itself so the globals you don't want when you write functions you use all the time

1017
01:42:03,520 --> 01:42:09,760
when you write classes so if you if you have some information that needs to survive multiple

1018
01:42:09,760 --> 01:42:15,200
function calls somehow as a global then probably a class is a good approach actually I would

1019
01:42:15,200 --> 01:42:20,800
recommend you as a class instead of global now the global keyword you should never ever use a

1020
01:42:20,800 --> 01:42:26,720
global keyword and if you don't do this there probably you would need if you want to do the

1021
01:42:26,800 --> 01:42:34,240
same thing you would need to use classes yeah so this is a second constructor now we have this

1022
01:42:34,240 --> 01:42:42,880
example here and this one is a

1023
01:42:43,360 --> 01:42:45,040
um

1024
01:42:49,920 --> 01:42:59,040
what's the name from class flexible yeah flexible I call it flexible so usually I have this

1025
01:42:59,040 --> 01:43:01,200
method

1026
01:43:12,320 --> 01:43:17,280
yeah so I have a class method when you see now this follows the same pattern as the class method

1027
01:43:17,280 --> 01:43:22,400
first is the class and now I instantiate the class and this is the in this case of course is

1028
01:43:22,400 --> 01:43:26,400
explicit flexible call here which I can

1029
01:43:29,520 --> 01:43:36,720
which I can create with this if somebody inherits from this from this class this handed in class

1030
01:43:36,720 --> 01:43:43,680
will be the current class not this class but the child that's inheriting yeah so now it just

1031
01:43:43,680 --> 01:43:51,680
make an instance of of this class which is handed in and I now say okay brand is the instance dot

1032
01:43:51,680 --> 01:43:56,960
print model as an instance and so on I don't have to write this out I can make it it's kind of a copy

1033
01:43:56,960 --> 01:44:03,920
a bit more or less yeah and from something is very common now anybody used pandas pandas you can make

1034
01:44:03,920 --> 01:44:09,680
a data frame from a dictionary from what kind of stuff very similar so this is a typical name from

1035
01:44:09,680 --> 01:44:16,400
something and then you have a class method and this would be explicit so I specify everything by

1036
01:44:16,400 --> 01:44:22,720
hand but if you're too lazy you can go a little bit deeper into introspection and I use introspection

1037
01:44:22,720 --> 01:44:30,160
module and instead of writing this out I use introspect up there yeah and the inspect gives me

1038
01:44:30,160 --> 01:44:36,400
the signature of the init and then I can get the parameters out and I remove the self and I do the

1039
01:44:36,400 --> 01:44:41,840
same thing this one took me a while to get there yeah so that's you don't write this just in a half

1040
01:44:41,840 --> 01:44:47,120
a minute it takes a bit but this is exactly the same but if now the class gets three more

1041
01:44:48,000 --> 01:44:54,080
attributes in the init or more parameters it would be automatically there so this and this in this

1042
01:44:54,080 --> 01:45:00,080
case is equivalent this goes automatically and all this everything just inspects the init of the class

1043
01:45:00,720 --> 01:45:05,840
and gets all these these are the parameters of the init yeah from my parent class of course

1044
01:45:06,240 --> 01:45:11,200
and then I just have the massage system after takes itself out because I don't want to provide

1045
01:45:11,200 --> 01:45:19,200
the self and then I can do the same thing now I have the option to create a class from from existing

1046
01:45:19,200 --> 01:45:24,960
class so this would be a second constructor if you want them you will see this quite a bit

1047
01:45:26,320 --> 01:45:32,800
it's typically called from and this is one example where I can use a class method which can be useful

1048
01:45:36,640 --> 01:45:44,560
remove the self yeah because no no because the if when you when you write an instance I don't put

1049
01:45:44,560 --> 01:45:51,360
in self you see this is here when I make an instance when I make an instance in my first

1050
01:45:51,360 --> 01:46:01,920
instance I made by hand um this one yeah so I don't say self if I put self here as a first

1051
01:46:01,920 --> 01:46:08,640
argument I get an exception because this I call it on the init the init has a self already at the

1052
01:46:08,640 --> 01:46:13,920
the init is not the constructor that the new is a constructor there's a dundo new which you

1053
01:46:15,520 --> 01:46:20,880
I never ever remember implementing a new it's very rare that you need a new the new is a real

1054
01:46:20,880 --> 01:46:25,120
instructor constructor that returns something the self never ever should return anything

1055
01:46:25,120 --> 01:46:30,720
because the init just initializes very often it's called the constructor which is technically not

1056
01:46:30,720 --> 01:46:36,240
correct because new constructors making the instance the new makes the instance the init

1057
01:46:36,240 --> 01:46:42,240
fills up this initial values and 99.9 percent of time you just want to fill up these initial values

1058
01:46:43,440 --> 01:46:47,920
the new is used for the only thing is like if you have the singleton pattern anybody knows a

1059
01:46:47,920 --> 01:46:52,800
singleton is then the new is the good thing but this is the only application I know of that you

1060
01:46:52,800 --> 01:47:00,160
need a new there might be some others which I don't so and then the self the self is part of

1061
01:47:00,160 --> 01:47:03,840
the signature but when I use it here I get an exception say it doesn't take a parameter self

1062
01:47:03,840 --> 01:47:10,720
that's why I have to do strip the self out yeah so this is something you don't I got an exception

1063
01:47:10,720 --> 01:47:15,200
that the self is not allowed to move otherwise yeah you don't think about it usually but very

1064
01:47:15,200 --> 01:47:18,800
easy in Python because always get an exception that explains what's going wrong another question

1065
01:47:18,800 --> 01:47:35,520
depends depends so if if if you have an init then it will use this one if not it the init is

1066
01:47:35,520 --> 01:47:41,200
not special in this case the inheritance works the same it goes up the method resolution order

1067
01:47:41,200 --> 01:47:46,400
if my class doesn't have the init it goes to the parent class and takes it from there and

1068
01:47:46,400 --> 01:47:53,120
then depends what you want for all our samples we didn't override the init because we didn't do

1069
01:47:53,120 --> 01:47:57,200
anything different but he can also use super tip that's typically what you do you get something

1070
01:47:57,200 --> 01:48:02,880
you do something in addition then you typically use super called the parent in it and then do

1071
01:48:02,880 --> 01:48:07,600
whatever extra you want so you can only do extra you cannot do less because then equal

1072
01:48:07,600 --> 01:48:11,680
the function is one thing you cannot take things out of the function but you can do something before

1073
01:48:11,680 --> 01:48:18,000
after the init if you want to yeah like you could check values and say okay the value that comes in

1074
01:48:18,000 --> 01:48:22,320
should be in the limit and I can if it would like it erase exception then I just hand develop the

1075
01:48:22,320 --> 01:48:29,840
init and don't do the work for instance yeah so in it is exactly the same if it's a normal method

1076
01:48:29,840 --> 01:48:41,360
or in it in terms of inheritance exactly the same behavior good okay let's do a short exercise I

1077
01:48:41,360 --> 01:48:45,360
hope it works so I haven't really rehearsed the exercise because I don't know how to rehearse an

1078
01:48:45,360 --> 01:48:50,720
exercise actually I haven't rehearsed anything it is pretty new tutorial here but so far we are kind

1079
01:48:50,720 --> 01:48:59,760
of in my anticipated time plan let's do an exercise so if you go to the pdf there's a description of

1080
01:48:59,760 --> 01:49:04,480
the exercise so if you turn on the table of content then you can go to the

1081
01:49:04,560 --> 01:49:12,960
object on a solution exercise here and we have an example of

1082
01:49:16,080 --> 01:49:23,520
so this is so we do this it's called height so we have this here do we have it I hope I have it

1083
01:49:24,400 --> 01:49:26,800
otherwise I need to upload it and we do the exercise later

1084
01:49:26,800 --> 01:49:28,800
so

1085
01:49:29,920 --> 01:49:30,800
do we have this

1086
01:49:38,880 --> 01:49:39,380
height

1087
01:49:44,640 --> 01:49:48,800
but it should be in there so the height the

1088
01:49:56,800 --> 01:50:04,800
person's there yeah so we have a person and we have this heights file

1089
01:50:11,040 --> 01:50:17,440
they have a read data and a card and I don't have it here so I need to quickly upload this one so

1090
01:50:17,440 --> 01:50:23,040
that this works so give me a minute to do this so I can see the data and I can see the

1091
01:50:23,040 --> 01:50:28,640
I need to quickly upload this one so that this works so give me a second so we want to do exercise

1092
01:50:28,640 --> 01:50:35,600
now exercise now you can read through already so be following the thing situations I need to

1093
01:50:35,600 --> 01:50:39,840
upload this quickly and then I give you this thing it'll take me a minute

1094
01:50:39,840 --> 01:50:51,920
so if you have an existing solution

1095
01:51:02,480 --> 01:51:07,760
and we want to modify this and I was just now nothing nothing works when I when I'm here

1096
01:51:10,480 --> 01:51:17,760
and we want to modify it and I have a very simple one they have a CSV file we read in and I would like to

1097
01:51:23,200 --> 01:51:26,080
if we implement this procedural solution with

1098
01:51:28,960 --> 01:51:29,460
this

1099
01:51:32,640 --> 01:51:37,760
object on solution so we just read in the CSV file which I gave you but for some reason the

1100
01:51:37,760 --> 01:51:42,640
code didn't end up but it should because I referenced it and my automatic somehow didn't

1101
01:51:43,600 --> 01:51:51,600
didn't do it but I can

1102
01:51:51,600 --> 01:52:05,440
do it

1103
01:52:06,880 --> 01:52:19,440
exercises okay

1104
01:52:21,840 --> 01:52:26,640
okay I found it so we have this this existing solution and we would like to

1105
01:52:29,520 --> 01:52:34,240
modify it and turn it into an object on solution and this is a bit smaller example but very

1106
01:52:34,240 --> 01:52:41,360
similar and now you should you should try to do this and work on it and so

1107
01:52:41,360 --> 01:52:53,200
for that I need to concentrate on uploading okay so something always goes wrong but now we have it

1108
01:53:11,360 --> 01:53:15,200
okay

1109
01:53:15,200 --> 01:53:43,040
a

1110
01:53:45,200 --> 01:53:48,600
need to download this zip file again.

1111
01:53:48,600 --> 01:53:53,520
And I copied over into my tutorial.

1112
01:53:59,880 --> 01:54:03,160
So I didn't even realize that's not there.

1113
01:54:03,160 --> 01:54:06,000
Something always goes wrong when you do something like this.

1114
01:54:06,000 --> 01:54:08,280
And for some reason, this doesn't show up.

1115
01:54:15,200 --> 01:54:20,200
Good.

1116
01:54:20,200 --> 01:54:25,200
So if

1117
01:54:45,200 --> 01:54:50,200
you

1118
01:54:50,200 --> 01:54:55,200
download

1119
01:54:55,200 --> 01:55:00,200
the whole thing.

1120
01:55:00,200 --> 01:55:05,200
Yeah, if you

1121
01:55:05,200 --> 01:55:10,200
re-download this file,

1122
01:55:10,200 --> 01:55:15,200
then you should have the directories

1123
01:55:15,200 --> 01:55:20,200
data and this height in there. So this is application.

1124
01:55:20,200 --> 01:55:25,200
So if you re-download, you should find this height.

1125
01:55:25,200 --> 01:55:30,200
Yeah. And here we have a read data, which is a very simple one that

1126
01:55:30,200 --> 01:55:35,200
reads a CSV file, nothing special. And we have a calculation. And this calculation does

1127
01:55:35,200 --> 01:55:40,200
not have a very simple calculation. So calculates the mean, calculates the shortest person,

1128
01:55:40,200 --> 01:55:45,200
and the tallest person from this data. It's a very, very simple.

1129
01:55:45,200 --> 01:55:50,200
It's a very, very simple application that exists. So it's a module here that you can

1130
01:55:50,200 --> 01:55:55,200
use. Yeah. And this one,

1131
01:55:55,200 --> 01:56:00,200
so everything is included into PDF, but I didn't give you the source, which is

1132
01:56:00,200 --> 01:56:05,200
a very simple application. So it's a very simple application.

1133
01:56:05,200 --> 01:56:10,200
So this is a given one.

1134
01:56:10,200 --> 01:56:15,200
And I quickly go through and show you the source code.

1135
01:56:15,200 --> 01:56:20,200
This is a CSV file we read in. This is a person with a height.

1136
01:56:20,200 --> 01:56:25,200
This is in centimeters, by the way. Yeah, so no meters and feet.

1137
01:56:25,200 --> 01:56:30,200
Just one number is easier. And then you read it in,

1138
01:56:30,200 --> 01:56:35,200
and then you can use this one, and you can

1139
01:56:35,200 --> 01:56:40,200
display the people here. And then you have this great functions, the mean,

1140
01:56:40,200 --> 01:56:45,200
which exists already in Python as a statistic mean. You can calculate the mean.

1141
01:56:45,200 --> 01:56:50,200
You have to show this person's the tallest person, and so on. So this is

1142
01:56:50,200 --> 01:56:55,200
the given task, the given source code.

1143
01:56:55,200 --> 01:57:00,200
And then the task now is to rewrite this one

1144
01:57:00,200 --> 01:57:05,200
with the following steps. Create a class person. So I gave you already a person. So make a

1145
01:57:05,200 --> 01:57:10,200
class person that has a person, has a name and a height, so instead of the functions.

1146
01:57:10,200 --> 01:57:15,200
Then make some instances. So everything is just a few lines. It's just a person's very short.

1147
01:57:15,200 --> 01:57:20,200
Create a class with the height, make instances of this for all data.

1148
01:57:20,200 --> 01:57:25,200
Write a function that computes the mean value, the heights of persons, and create a

1149
01:57:25,200 --> 01:57:30,200
child class of person that is comparable. We did this comparable thing.

1150
01:57:30,200 --> 01:57:35,200
And then create instances, and

1151
01:57:35,200 --> 01:57:40,200
then find out which person is the smallest. So the mathematics is

1152
01:57:40,200 --> 01:57:45,200
the same as the functions already. Just move everything into the class. See if it works.

1153
01:57:45,200 --> 01:57:50,200
I haven't tried it out on real people how fast you can do this.

1154
01:57:50,200 --> 01:57:55,200
Anybody has a question about the content of this

1155
01:57:55,200 --> 01:58:00,200
function?

1156
01:58:00,200 --> 01:58:05,200
That's instructions of the PDF. That's a PDF, and if you go to exercises, then you find it.

1157
01:58:05,200 --> 01:58:10,200
So PDF, this is a section here,

1158
01:58:10,200 --> 01:58:15,200
page 31 down here. This is the 31 in the document, which

1159
01:58:15,200 --> 01:58:20,200
translates to 38 here. If you go to the here and go object oriented solution

1160
01:58:20,200 --> 01:58:25,200
exercises, then you find these instructions.

1161
01:58:25,200 --> 01:58:30,200
And before, here is the explanation of these files. I'm not sure why they are not there,

1162
01:58:30,200 --> 01:58:35,200
because I'm, yeah, because they are under exercises.

1163
01:58:35,200 --> 01:58:40,200
Okay.

1164
01:58:40,200 --> 01:58:45,200
So I can show you quickly how to

1165
01:58:45,200 --> 01:58:50,200
use this.

1166
01:58:50,200 --> 01:58:55,200
So big.

1167
01:58:55,200 --> 01:59:00,200
I think I have to make it a bit smaller.

1168
01:59:00,200 --> 01:59:05,200
So see anything useful. So let's go to the

1169
01:59:05,200 --> 01:59:10,200
exercise, make a new notebook exercises.

1170
01:59:10,200 --> 01:59:15,200
So

1171
01:59:15,200 --> 01:59:20,200
now if you have this

1172
01:59:20,200 --> 01:59:25,200
directory height there, then if I say

1173
01:59:25,200 --> 01:59:30,200
so the tree only works on Unix, if you have Windows it doesn't work.

1174
01:59:30,200 --> 01:59:35,200
So tree height, then you see this is my great package.

1175
01:59:35,200 --> 01:59:40,200
And I do have the data, and I can say

1176
01:59:40,200 --> 01:59:45,200
from height import

1177
01:59:45,200 --> 01:59:50,200
from height dot read data import read data.

1178
01:59:50,200 --> 01:59:55,200
And then I can say my data,

1179
01:59:55,200 --> 02:00:00,200
and then I can say my

1180
02:00:00,200 --> 02:00:05,200
data.

1181
02:00:05,200 --> 02:00:10,200
And then I can say my data

1182
02:00:10,200 --> 02:00:15,200
read data lists, okay, it's a different name.

1183
02:00:15,200 --> 02:00:20,200
And then I can say my data equals read data

1184
02:00:20,200 --> 02:00:25,200
lists, read data lists, and I say

1185
02:00:25,200 --> 02:00:30,200
my data has a check data called persons.

1186
02:00:30,200 --> 02:00:35,200
.csv

1187
02:00:35,200 --> 02:00:40,200
and then I have my data that looks like this.

1188
02:00:40,200 --> 02:00:45,200
Displayed now this pretty printer, you have the names and

1189
02:00:45,200 --> 02:00:50,200
if you don't like the pretty print, by the way,

1190
02:00:50,200 --> 02:00:55,200
you can turn off the pretty print and then it looks like this.

1191
02:00:55,200 --> 02:01:00,200
So this is one of these magic to get the display differently.

1192
02:01:00,200 --> 02:01:05,200
And then you can say from height import

1193
02:01:05,200 --> 02:01:10,200
calculations, and then you can say calculations dot

1194
02:01:10,200 --> 02:01:15,200
mean, and you can say

1195
02:01:15,200 --> 02:01:20,200
data one should be the

1196
02:01:20,200 --> 02:01:25,200
second entry

1197
02:01:25,200 --> 02:01:30,200
and then you get the mean value.

1198
02:01:30,200 --> 02:01:35,200
So this would be the second entry in my data, you have the mean value. So not very difficult in terms of what it's doing.

1199
02:01:35,200 --> 02:01:40,200
And you can also have the shortest person

1200
02:01:40,200 --> 02:01:45,200
and you have to put in the

1201
02:01:45,200 --> 02:01:50,200
names and the

1202
02:01:50,200 --> 02:01:55,200
values which would be the

1203
02:01:55,200 --> 02:02:00,200
data zero, data one, which you can

1204
02:02:00,200 --> 02:02:05,200
choose.

1205
02:02:05,200 --> 02:02:10,200
Yeah.

1206
02:02:10,200 --> 02:02:15,200
This would be

1207
02:02:15,200 --> 02:02:20,200
data zero and data one should work.

1208
02:02:20,200 --> 02:02:25,200
Which could be short cut too.

1209
02:02:25,200 --> 02:02:30,200
So if you don't want to write this out, then we can use our

1210
02:02:30,200 --> 02:02:35,200
star thing.

1211
02:02:35,200 --> 02:02:40,200
This would be the shortest person and this would be

1212
02:02:40,200 --> 02:02:45,200
the tallest person.

1213
02:02:45,200 --> 02:02:50,200
That's what it's doing and now

1214
02:02:50,200 --> 02:02:55,200
the output should be the same, that has no new logic, so you can reuse the logic,

1215
02:02:55,200 --> 02:03:00,200
and then you can sample them using a class. Of course the obvious class would be a person,

1216
02:03:00,200 --> 02:03:05,200
because we work with persons, so please try to implement

1217
02:03:05,200 --> 02:03:10,200
the person and methods.

1218
02:03:10,200 --> 02:03:15,200
I will go through and if you have questions I can try to help you. There's quite a few people though.

1219
02:03:15,200 --> 02:03:20,200
Yeah?

1220
02:03:20,200 --> 02:03:25,200
So this would be equivalent to...

1221
02:03:25,200 --> 02:03:30,200
We don't need that, but we can make it shorter. So instead of

1222
02:03:30,200 --> 02:03:35,200
writing this, here in this case the star is exactly the same as

1223
02:03:35,200 --> 02:03:40,200
this. The star unpacks the sequence because the data is a list.

1224
02:03:40,200 --> 02:03:45,200
One tuple is two entries and the first is the name, the second one,

1225
02:03:45,200 --> 02:03:50,200
and I can write it like this. If I use this one, so if it would have data

1226
02:03:50,200 --> 02:03:55,200
0, data 1, data 2, data 3, data 4, data 7, this would be the same. It would take

1227
02:03:55,200 --> 02:04:00,200
everything, it iterates over it. Very often, like if you say print,

1228
02:04:00,200 --> 02:04:05,200
so if I have a list,

1229
02:04:05,200 --> 02:04:10,200
then when I say print list, it just prints the list. If I want to have the single arguments,

1230
02:04:10,200 --> 02:04:15,200
print,

1231
02:04:15,200 --> 02:04:20,200
list, first entry, list,

1232
02:04:20,200 --> 02:04:25,200
second entry, list, third entry and so on.

1233
02:04:25,200 --> 02:04:30,200
But I can say print and then I just say

1234
02:04:30,200 --> 02:04:35,200
star, L, L, and I'm doing the same thing.

1235
02:04:35,200 --> 02:04:40,200
In fact, you don't even need a list. You can say print, star, range 10,

1236
02:04:40,200 --> 02:04:45,200
and now I feed all the numbers from 0 to 9 separately to the print.

1237
02:04:45,200 --> 02:04:50,200
This always works. This one takes this iterable object apart

1238
02:04:50,200 --> 02:04:55,200
and feeds all these things you would get when you iterate over it as single arguments to the function.

1239
02:04:55,200 --> 02:05:00,200
Pretty long sentence for this little star.

1240
02:05:00,200 --> 02:05:05,200
If you're lazy programmers, if you can reduce the work and you still know what you're doing,

1241
02:05:05,200 --> 02:05:10,200
then do it. If you end up with a poor code, then you

1242
02:05:10,200 --> 02:05:15,200
overdo it a bit, shortening the code.

1243
02:05:15,200 --> 02:05:20,200
I will come around. I turn off the mic so I don't disturb you.

1244
02:05:20,200 --> 02:05:25,200
After a few minutes, you see how it's going.

1245
02:05:25,200 --> 02:05:30,200
Let's continue. This is a solution. I'll show you my solution. This is a PDF.

1246
02:05:30,200 --> 02:05:35,200
This is a solution. You will get this PDF. I will edit it as a zip file.

1247
02:05:35,200 --> 02:05:40,200
The first thing, write the class person. That should be pretty straightforward. The class person.

1248
02:05:40,200 --> 02:05:45,200
You have to have the unit and you have the name and the height. Very typically, you say self, name equals name,

1249
02:05:45,200 --> 02:05:50,200
self, height equals height. That would be the first thing.

1250
02:05:50,200 --> 02:05:55,200
I put options here, I think. That's pretty much how it should look like.

1251
02:05:55,200 --> 02:06:00,200
Create instances. You see there's a solution with

1252
02:06:00,200 --> 02:06:05,200
list comprehension. You can also write the loop if you don't like list comprehension.

1253
02:06:05,200 --> 02:06:10,200
This is the shortest one. You create a person with name and height and you get name and height

1254
02:06:10,200 --> 02:06:15,200
by zipping name and height. This is just how you read in name and height. If you have data, you just say data star.

1255
02:06:15,200 --> 02:06:20,200
You can write here, explicitly, the first column is name, the other one is height.

1256
02:06:20,200 --> 02:06:25,200
We have persons. Write a function, it becomes a mean. This is still a function

1257
02:06:25,200 --> 02:06:30,200
outside the mean. Inside one class, it doesn't make sense. You need multiple instances.

1258
02:06:30,200 --> 02:06:35,200
Then you see a mean and you say, okay, now you access person.height for person

1259
02:06:35,200 --> 02:06:40,200
and persons provided the persons is a list of the persons.

1260
02:06:40,200 --> 02:06:45,200
You can always combine functions with classes. It doesn't mean you have to always

1261
02:06:45,200 --> 02:06:50,200
everything has to be a class. If a simple function is doing it, use a simple function.

1262
02:06:50,200 --> 02:06:55,200
If you need more, write a class. Then you can just apply it and you get your mean.

1263
02:06:55,200 --> 02:07:00,200
You get the same result. Then make it comparable. For this one, you need the less than.

1264
02:07:00,200 --> 02:07:05,200
It doesn't implement the equal or even more. The less than on here,

1265
02:07:06,200 --> 02:07:11,200
the thing is this is the criteria you want to use. The height of the person is what you want to compare.

1266
02:07:11,200 --> 02:07:16,200
You could also compare persons by name.

1267
02:07:16,200 --> 02:07:21,200
Then you use just the name with string comparison.

1268
02:07:21,200 --> 02:07:26,200
Right here we use the heights and then when you do this, you make comparable persons here.

1269
02:07:26,200 --> 02:07:31,200
Then you can have this mean.

1270
02:07:31,200 --> 02:07:36,200
You can use built-in mean function which works the same.

1271
02:07:36,200 --> 02:07:41,200
Sort and mean use the same principle with the key functions. It works exactly the same.

1272
02:07:41,200 --> 02:07:46,200
If you have a less than, you have a mean.

1273
02:07:46,200 --> 02:07:51,200
The user doesn't need to know anything. You know they use mean and you throw in your object

1274
02:07:51,200 --> 02:07:56,200
and it gives all your objects a list of your objects or a collection of your objects.

1275
02:07:56,200 --> 02:08:01,200
Then it gives it the same thing.

1276
02:08:01,200 --> 02:08:06,200
Then representable. That's a bit more involved.

1277
02:08:06,200 --> 02:08:11,200
For this one, you have to have the wrapper. Here it's up to you to create a nice string.

1278
02:08:11,200 --> 02:08:16,200
This one is a bit more work.

1279
02:08:16,200 --> 02:08:21,200
This exclamation mark R means use the representation of these objects.

1280
02:08:21,200 --> 02:08:26,200
It adds the extra quotes for strings. You don't have to fill it around in this one.

1281
02:08:26,200 --> 02:08:31,200
You say, okay, give me the representation of these attributes. These are objects already.

1282
02:08:31,200 --> 02:08:36,200
Built-in, Python, whatever. Fill them in.

1283
02:08:36,200 --> 02:08:41,200
Here again I use the class name so I get the class name.

1284
02:08:41,200 --> 02:08:46,200
Then when you see this, now a person looks like this. If you have your list

1285
02:08:46,200 --> 02:08:51,200
in a notebook printed out, something like this comes out.

1286
02:08:51,200 --> 02:08:56,200
Second constructor, maybe you haven't done this yet. Here you have the class manager.

1287
02:08:56,200 --> 02:09:01,200
You just put in the class and the person. Then you make a new class and you say person.name, person.heights

1288
02:09:01,200 --> 02:09:06,200
and take those things and fit it into the init.

1289
02:09:06,200 --> 02:09:11,200
This might be a small exercise but it gives you some feeling of what you can do.

1290
02:09:11,200 --> 02:09:16,200
In the real world things get more complex and more lines.

1291
02:09:16,200 --> 02:09:21,200
But the essence should be the same.

1292
02:09:21,200 --> 02:09:26,200
Hopefully. Good.

1293
02:09:26,200 --> 02:09:31,200
Any questions? Anything didn't work? Any unexpected?

1294
02:09:31,200 --> 02:09:36,200
Usually when I do training we do this together in a Jupiter Hub and then we can

1295
02:09:36,200 --> 02:09:41,200
change the solutions. Usually we also have more time for exercises.

1296
02:09:41,200 --> 02:09:46,200
But here we will stay with it. Good.

1297
02:09:46,200 --> 02:09:51,200
This concludes the first part. When we have this procedural solution we move step-by-step

1298
02:09:51,200 --> 02:09:56,200
into more object-oriented solution. Now we would like to

1299
02:09:56,200 --> 02:10:01,200
go to a different thing. I have to make this bigger.

1300
02:10:01,200 --> 02:10:06,200
The next one is

1301
02:10:06,200 --> 02:10:11,200
you do object-oriented analysis. Instead of

1302
02:10:11,200 --> 02:10:16,200
starting from an existing solution

1303
02:10:16,200 --> 02:10:21,200
you start from the problem and you start object-oriented from the beginning on.

1304
02:10:21,200 --> 02:10:26,200
There are many different ways of doing this and you have to analyze your problem and come up with

1305
02:10:26,200 --> 02:10:31,200
a solution. So starting from scratch.

1306
02:10:31,200 --> 02:10:36,200
Here I have

1307
02:10:36,200 --> 02:10:41,200
one approach. There might be different approaches. This is one approach

1308
02:10:41,200 --> 02:10:46,200
how to do this. Actually you don't start programming right away.

1309
02:10:46,200 --> 02:10:51,200
You start writing down things first. Defining the problem is always a good thing.

1310
02:10:51,200 --> 02:10:56,200
You shouldn't overdo it. You shouldn't specify for months. But writing down a little bit is not too bad.

1311
02:10:56,200 --> 02:11:01,200
Write down your problem with sentences

1312
02:11:01,200 --> 02:11:06,200
in a way that somebody else who knows something about the domain can understand.

1313
02:11:06,200 --> 02:11:11,200
This somebody else can be yourself six weeks, six months down the road.

1314
02:11:11,200 --> 02:11:16,200
Then you totally forgot what you meant. You send us and state your assumptions.

1315
02:11:16,200 --> 02:11:21,200
Then we analyze the text.

1316
02:11:21,200 --> 02:11:26,200
Our analyzer is like grammar fourth grade, third grade.

1317
02:11:26,200 --> 02:11:31,200
We just go through and find nouns and verbs and maybe adjectives.

1318
02:11:31,200 --> 02:11:36,200
Then out of these we identify potential classes.

1319
02:11:36,200 --> 02:11:41,200
Then we try to implement some prototype classes and then refactor our code.

1320
02:11:41,200 --> 02:11:46,200
There can be a lot of details. But typically if a simple solution

1321
02:11:46,200 --> 02:11:51,200
works then use a simple solution. So now I have my story.

1322
02:11:51,200 --> 02:11:56,200
The whole thing we just talked about all the time, the electric car thing.

1323
02:11:56,200 --> 02:12:01,200
An electric car travels a distance with constant speed. It has a battery of a certain size in kilowatt hours.

1324
02:12:01,200 --> 02:12:06,200
The car starts to travel with 80% charged battery.

1325
02:12:06,200 --> 02:12:11,200
These are the same assumptions.

1326
02:12:11,200 --> 02:12:16,200
They are from the same file. They include the same file in this place.

1327
02:12:16,200 --> 02:12:21,200
Write down a narrative, use full sentences and formulate in a way

1328
02:12:21,200 --> 02:12:26,200
that if you give somebody else, somebody else will understand what you mean.

1329
02:12:26,200 --> 02:12:31,200
Then it makes a lot of sense because it makes you think. When you have to formulate it, it makes you think about it.

1330
02:12:31,200 --> 02:12:36,200
This is what I did.

1331
02:12:36,200 --> 02:12:41,200
I have these assumptions here, which are our assumptions so far.

1332
02:12:41,200 --> 02:12:46,200
Then we do the analysis.

1333
02:12:46,200 --> 02:12:51,200
I just go through and now I collect all my

1334
02:12:51,200 --> 02:12:56,200
nouns. Then I have the verbs that I use. The verb is two here.

1335
02:12:56,200 --> 02:13:01,200
I have a car or electric car here in this case. This car travels.

1336
02:13:01,200 --> 02:13:06,200
There's a start and there's a charge. That's what I took from the text. There's a lot of other nouns.

1337
02:13:06,200 --> 02:13:11,200
Distance, speed, battery, battery size, travel and so on.

1338
02:13:11,200 --> 02:13:16,200
There are a lot of nouns here. Not all nouns should become classes

1339
02:13:16,200 --> 02:13:21,200
typically. Not all of them. Only the ones you are interested in.

1340
02:13:21,200 --> 02:13:26,200
We do have an objective with our modeling and only these

1341
02:13:26,200 --> 02:13:31,200
most important nouns that are in the center of our objective will become classes.

1342
02:13:31,200 --> 02:13:36,200
The other ones are sustainable attributes, just numbers, strings, lists or something like this.

1343
02:13:36,200 --> 02:13:41,200
Battery charge. You reach a battery charge. You have a start

1344
02:13:41,200 --> 02:13:46,200
charging station. If you haven't looked at a charging station at all, you might have a different objective.

1345
02:13:46,200 --> 02:13:51,200
You want to plan charging stations. You want to have the best distribution of charging stations

1346
02:13:51,200 --> 02:13:56,200
to minimize travel time and charging time. Then you might

1347
02:13:56,200 --> 02:14:01,200
want to have a charging station as a class. Here the charging station doesn't

1348
02:14:01,200 --> 02:14:06,200
matter. We just take them as given, as provided. We don't read them as a charging station. We just drive.

1349
02:14:06,200 --> 02:14:11,200
Charging rate, travel time and so on. A lot of these words come here.

1350
02:14:11,200 --> 02:14:16,200
Most of them won't become classes typically.

1351
02:14:16,200 --> 02:14:21,200
But this can be helpful. This is technically

1352
02:14:21,200 --> 02:14:26,200
not very difficult. Writing a good text that is readable.

1353
02:14:26,200 --> 02:14:31,200
Going through, identifying. If you want you can write a script for nouns.

1354
02:14:31,200 --> 02:14:36,200
Go through and sort them a little bit.

1355
02:14:36,200 --> 02:14:41,200
There might be more sophisticated techniques. Simple is good.

1356
02:14:41,200 --> 02:14:46,200
As long as it works. Of course the nouns are candidates for

1357
02:14:46,200 --> 02:14:51,200
classes and the verbs are candidates for methods. Nouns are something.

1358
02:14:51,200 --> 02:14:56,200
Methods do something. There might be the exception to the rule. Very often

1359
02:14:56,200 --> 02:15:01,200
in English you can use the same word for verb and a noun. Like some can be the some or to some.

1360
02:15:01,200 --> 02:15:06,200
It doesn't work in every language by the way. But very often it can be

1361
02:15:06,200 --> 02:15:11,200
two things at the same time. And then we have this modeling

1362
02:15:11,200 --> 02:15:16,200
analogy. I talked about this modeling. Modeling is the representation

1363
02:15:16,200 --> 02:15:21,200
of the word. And now I look for a quote. Most of the people say

1364
02:15:21,200 --> 02:15:26,200
Einstein is a sorcerer. Everything should be made as simple as possible but not simpler.

1365
02:15:26,200 --> 02:15:31,200
If you make it too simple it's wrong.

1366
02:15:31,200 --> 02:15:36,200
I go to modeling conferences and there was one theme.

1367
02:15:36,200 --> 02:15:41,200
All models are wrong, some are useful. It's not totally correct.

1368
02:15:41,200 --> 02:15:46,200
But it's good enough for our purpose. If you look in your column

1369
02:15:46,200 --> 02:15:51,200
you measure the speed. You don't measure the speed with 20 digits after the period.

1370
02:15:51,200 --> 02:15:56,200
You don't need this. Why? It's roughly good enough.

1371
02:15:56,200 --> 02:16:01,200
Even that doesn't have any definite places.

1372
02:16:01,200 --> 02:16:06,200
And it's good enough for our purposes. Same here. Don't make it too complicated but also not simple.

1373
02:16:06,200 --> 02:16:11,200
This is something that's easier said than done because very often you don't know

1374
02:16:11,200 --> 02:16:16,200
how this works. Here we state our objective.

1375
02:16:16,200 --> 02:16:21,200
Find the travel time of an electric car considering battery charging.

1376
02:16:21,200 --> 02:16:26,200
These objectives might change over time.

1377
02:16:26,200 --> 02:16:31,200
And then you need to revisit them if your assumptions change.

1378
02:16:31,200 --> 02:16:36,200
And then I do something

1379
02:16:36,200 --> 02:16:41,200
still I want to have my thing kind of future proof which is not easy.

1380
02:16:41,200 --> 02:16:46,200
This can lead to over engineering

1381
02:16:46,200 --> 02:16:51,200
if you put in a lot of possibilities that are never going to happen.

1382
02:16:51,200 --> 02:16:56,200
But sometimes it might make sense to prepare

1383
02:16:56,200 --> 02:17:01,200
for some future changes that are very likely.

1384
02:17:01,200 --> 02:17:06,200
You might notice you end up with needed things.

1385
02:17:06,200 --> 02:17:11,200
You might add a lot of things you're never going to use later on.

1386
02:17:11,200 --> 02:17:16,200
You have to somehow predict what's going to happen.

1387
02:17:16,200 --> 02:17:21,200
It's not very expensive to design it in a way that you can still do it later.

1388
02:17:21,200 --> 02:17:26,200
I don't hardwire the gravity as 9.81

1389
02:17:26,200 --> 02:17:31,200
to be able to just give it an mg and then I can put the value

1390
02:17:31,200 --> 02:17:36,200
of my equation because I make it a variable.

1391
02:17:36,200 --> 02:17:41,200
That's not very expensive to make it a variable.

1392
02:17:41,200 --> 02:17:46,200
If I ever use this model at Mars I don't know but maybe even better to have the number in a different place than in the code.

1393
02:17:46,200 --> 02:17:51,200
This would be a pretty easy decision. Sometimes it's not so easy.

1394
02:17:51,200 --> 02:17:56,200
This is a little bit thinking. It has nothing to do with programming. It's just general problem solving.

1395
02:17:56,200 --> 02:18:01,200
If the problem is big you don't do it in one day.

1396
02:18:01,200 --> 02:18:06,200
I wake up in the morning and I have a thinking heart and nothing came out.

1397
02:18:06,200 --> 02:18:11,200
This is something you need to do.

1398
02:18:11,200 --> 02:18:16,200
Consider the aging of the battery.

1399
02:18:16,200 --> 02:18:21,200
Nowadays batteries age. You might have also from your laptop in the beginning after a few years

1400
02:18:21,200 --> 02:18:26,200
and you might not last that long anymore. These types of batteries have some effect.

1401
02:18:26,200 --> 02:18:31,200
Memory effect and what kind of thing.

1402
02:18:31,200 --> 02:18:36,200
They lose some capacity over time and then say maybe we would like to

1403
02:18:36,200 --> 02:18:41,200
take this into consideration. Maybe in 10 years there will be no batteries.

1404
02:18:41,200 --> 02:18:46,200
There's no issue anymore. Who knows?

1405
02:18:46,200 --> 02:18:51,200
This is what we want.

1406
02:18:51,200 --> 02:18:56,200
Now we have to do a little bit more about the battery. Why not make the battery

1407
02:18:56,200 --> 02:19:01,200
your own class? Before we just had a car and the battery was a part of the car.

1408
02:19:01,200 --> 02:19:06,200
Now we can make the battery your own class.

1409
02:19:06,200 --> 02:19:11,200
This would be a little bit different here.

1410
02:19:11,200 --> 02:19:16,200
If it doesn't hurt it's okay. It doesn't make it more complicated.

1411
02:19:16,200 --> 02:19:21,200
It doesn't produce a lot more work. If you don't need this thing

1412
02:19:21,200 --> 02:19:26,200
it doesn't hurt too much.

1413
02:19:26,200 --> 02:19:31,200
Other things.

1414
02:19:31,200 --> 02:19:36,200
Keep the time and distance information.

1415
02:19:36,200 --> 02:19:41,200
For instance you could class it as stores those information so you can check what happened.

1416
02:19:41,200 --> 02:19:46,200
Actually we need it for the printing.

1417
02:19:46,200 --> 02:19:51,200
That's where I changed it.

1418
02:19:51,200 --> 02:19:56,200
Now we design our class.

1419
02:19:56,200 --> 02:20:01,200
This is a decision now.

1420
02:20:01,200 --> 02:20:06,200
We are not unbiased. We implemented it before.

1421
02:20:06,200 --> 02:20:11,200
We don't get under refresh. We have a battery.

1422
02:20:11,200 --> 02:20:16,200
The battery will also become a class.

1423
02:20:16,200 --> 02:20:21,200
Here I have the other nouns become attributes of this class.

1424
02:20:21,200 --> 02:20:26,200
It's pretty much written in text. Of course the model brand is all attributes of the e-car.

1425
02:20:26,200 --> 02:20:31,200
The verbs to drive, to get to, to reach. Maybe not all the verbs will become methods.

1426
02:20:31,200 --> 02:20:36,200
But drive and we had already.

1427
02:20:36,200 --> 02:20:41,200
The charge is gone. The charge went to the battery.

1428
02:20:41,200 --> 02:20:46,200
When you say you charge a car it's actually not correct. You charge the battery of the car if you want.

1429
02:20:46,200 --> 02:20:51,200
Then we have the battery. The battery has attributes of size.

1430
02:20:51,200 --> 02:20:56,200
We have the verb here.

1431
02:20:56,200 --> 02:21:01,200
We use charge as a noun.

1432
02:21:01,200 --> 02:21:06,200
This is a process and this is the current state.

1433
02:21:06,200 --> 02:21:11,200
Then to charge several times.

1434
02:21:11,200 --> 02:21:16,200
Then the nouns we have no use.

1435
02:21:16,200 --> 02:21:21,200
Travel time we used before.

1436
02:21:21,200 --> 02:21:26,200
They are left over.

1437
02:21:26,200 --> 02:21:31,200
This is some thinking. Depending how complex your problem is.

1438
02:21:31,200 --> 02:21:36,200
This could also be a tool if you need to talk to other people that are from the domain but not programmers.

1439
02:21:36,200 --> 02:21:41,200
That's a good thing because they can write text and they can sort nouns and things.

1440
02:21:41,200 --> 02:21:46,200
They can identify what's important.

1441
02:21:46,200 --> 02:21:51,200
There's not a single line of piles involved yet.

1442
02:21:51,200 --> 02:21:56,200
Now we have the battery. Let's look at these things.

1443
02:21:56,200 --> 02:22:01,200
I make a new notebook as always.

1444
02:22:01,200 --> 02:22:06,200
We call this analysis.

1445
02:22:11,200 --> 02:22:16,200
We analyze everything here.

1446
02:22:16,200 --> 02:22:21,200
Again I CD it into my Ecos thing.

1447
02:22:21,200 --> 02:22:26,200
I need to check.

1448
02:22:26,200 --> 02:22:31,200
I call this object first.

1449
02:22:31,200 --> 02:22:36,200
Here I'm reusing the code that I created.

1450
02:22:36,200 --> 02:22:41,200
I made it similar to the other one.

1451
02:22:41,200 --> 02:22:46,200
We have this prior experience.

1452
02:22:46,200 --> 02:22:51,200
I have the E-car and I have a battery.

1453
02:22:51,200 --> 02:22:56,200
The battery is new.

1454
02:22:56,200 --> 02:23:01,200
Everything that has to do with charging moves to the battery.

1455
02:23:01,200 --> 02:23:06,200
That's my new thing.

1456
02:23:06,200 --> 02:23:11,200
Otherwise the functionality is exactly the same as before.

1457
02:23:11,200 --> 02:23:16,200
The layout is different.

1458
02:23:16,200 --> 02:23:21,200
I have two classes.

1459
02:23:21,200 --> 02:23:26,200
The battery has

1460
02:23:26,200 --> 02:23:31,200
some new features.

1461
02:23:31,200 --> 02:23:36,200
It has a size, a current charge, a charging rate, and the effective charging rate.

1462
02:23:36,200 --> 02:23:41,200
I can provide that here.

1463
02:23:41,200 --> 02:23:46,200
The size is given.

1464
02:23:46,200 --> 02:23:51,200
Here the effective charging rate can be none.

1465
02:23:51,200 --> 02:23:56,200
Here is the charging rate.

1466
02:23:56,200 --> 02:24:01,200
New.

1467
02:24:01,200 --> 02:24:06,200
The charging rate is the charging rate that the producer

1468
02:24:06,200 --> 02:24:11,200
writes down.

1469
02:24:11,200 --> 02:24:16,200
After two years the charging rate is

1470
02:24:16,200 --> 02:24:21,200
5%.

1471
02:24:21,200 --> 02:24:26,200
The effective charging rate needs to be smaller

1472
02:24:26,200 --> 02:24:31,200
than the charging rate.

1473
02:24:31,200 --> 02:24:36,200
An error check.

1474
02:24:36,200 --> 02:24:41,200
That's my definition.

1475
02:24:41,200 --> 02:24:46,200
The charging rate can only be 100%.

1476
02:24:46,200 --> 02:24:51,200
Now the charge moved here.

1477
02:24:51,200 --> 02:24:56,200
This is the same calculation

1478
02:24:56,200 --> 02:25:01,200
we did before.

1479
02:25:01,200 --> 02:25:06,200
This is a state.

1480
02:25:06,200 --> 02:25:11,200
I can always ask the current charge.

1481
02:25:11,200 --> 02:25:16,200
We didn't have this before.

1482
02:25:16,200 --> 02:25:21,200
Now we have this information.

1483
02:25:21,200 --> 02:25:26,200
I have this current charge to keep track of it.

1484
02:25:26,200 --> 02:25:31,200
This is something new.

1485
02:25:31,200 --> 02:25:36,200
I don't check theoretically.

1486
02:25:36,200 --> 02:25:41,200
I don't check that I have enough.

1487
02:25:41,200 --> 02:25:46,200
I can discharge to minus 20%.

1488
02:25:46,200 --> 02:25:51,200
You can only discharge to zero.

1489
02:25:51,200 --> 02:25:56,200
You get a warning if you discharge below 20% or 10%.

1490
02:25:56,200 --> 02:26:01,200
That's something you can do.

1491
02:26:01,200 --> 02:26:06,200
When you execute the whole thing,

1492
02:26:06,200 --> 02:26:11,200
it will give you the same output as before.

1493
02:26:11,200 --> 02:26:16,200
We distributed our content over multiple classes.

1494
02:26:16,200 --> 02:26:21,200
We made a battery our own thing.

1495
02:26:21,200 --> 02:26:26,200
That's a new element of electric cars.

1496
02:26:26,200 --> 02:26:31,200
If you have a good battery, you should have a good car.

1497
02:26:31,200 --> 02:26:36,200
It makes sense to have the battery.

1498
02:26:36,200 --> 02:26:41,200
This is a result of our design.

1499
02:26:41,200 --> 02:26:46,200
We identified the objects that are important.

1500
02:26:46,200 --> 02:26:51,200
This is a new design.

1501
02:26:51,200 --> 02:26:56,200
Otherwise, if you look at the content of the mathematics,

1502
02:26:56,200 --> 02:27:01,200
it's not much new.

1503
02:27:01,200 --> 02:27:06,200
Everything that concerns charging went to the battery.

1504
02:27:06,200 --> 02:27:11,200
We didn't look at the engine at all.

1505
02:27:11,200 --> 02:27:16,200
We didn't even mention it.

1506
02:27:16,200 --> 02:27:21,200
For our purpose, we don't have to make it our own class.

1507
02:27:21,200 --> 02:27:26,200
If you design electric engines, it might be very different.

1508
02:27:26,200 --> 02:27:31,200
Fortunately, electric engines are much simpler than combustion engines.

1509
02:27:31,200 --> 02:27:36,200
You don't have all these moving parts.

1510
02:27:36,200 --> 02:27:41,200
This is a difference.

1511
02:27:41,200 --> 02:27:46,200
If you look at this one, it looks very similar.

1512
02:27:46,200 --> 02:27:51,200
I have one small change.

1513
02:27:51,200 --> 02:27:56,200
Something moved to the batteries.

1514
02:27:56,200 --> 02:28:01,200
If you go back here,

1515
02:28:01,200 --> 02:28:06,200
you see here we have the battery size.

1516
02:28:06,200 --> 02:28:11,200
The battery size was the property of the car.

1517
02:28:11,200 --> 02:28:16,200
Now we have a battery that has a property size.

1518
02:28:16,200 --> 02:28:21,200
I want to use the same interface.

1519
02:28:21,200 --> 02:28:26,200
I did a small trick.

1520
02:28:31,200 --> 02:28:36,200
That must be it.

1521
02:28:36,200 --> 02:28:41,200
Did I close the wrong one?

1522
02:28:41,200 --> 02:28:46,200
Analyzes.

1523
02:28:46,200 --> 02:28:51,200
The battery size.

1524
02:28:51,200 --> 02:28:56,200
I still put the battery size in.

1525
02:28:56,200 --> 02:29:01,200
The battery size is not stored here, but I give the battery size to battery.

1526
02:29:01,200 --> 02:29:06,200
I would like to have a property battery size of the car also.

1527
02:29:06,200 --> 02:29:11,200
I want to store the information size only once.

1528
02:29:11,200 --> 02:29:16,200
To do this, I use this thing.

1529
02:29:16,200 --> 02:29:21,200
Anybody knows what this thing is?

1530
02:29:21,200 --> 02:29:26,200
It makes two of what?

1531
02:29:26,200 --> 02:29:31,200
You cannot set it.

1532
02:29:31,200 --> 02:29:36,200
That's a side effect.

1533
02:29:36,200 --> 02:29:41,200
A property is sometimes called a computed attribute.

1534
02:29:41,200 --> 02:29:46,200
Let's look at a property.

1535
02:29:46,200 --> 02:29:51,200
The typical example of a property is a class square.

1536
02:29:51,200 --> 02:29:56,200
Then you have an init.

1537
02:29:56,200 --> 02:30:01,200
You get a side.

1538
02:30:01,200 --> 02:30:06,200
Square is a rectangle where both sides have the same side.

1539
02:30:06,200 --> 02:30:11,200
I define a property

1540
02:30:11,200 --> 02:30:16,200
and I call this area.

1541
02:30:16,200 --> 02:30:21,200
Define area.

1542
02:30:21,200 --> 02:30:26,200
Then I just return

1543
02:30:26,200 --> 02:30:31,200
self-side squared.

1544
02:30:31,200 --> 02:30:36,200
Now I can make a square instance.

1545
02:30:36,200 --> 02:30:41,200
I can say,

1546
02:30:41,200 --> 02:30:46,200
okay, this is now the side of five.

1547
02:30:46,200 --> 02:30:51,200
Now I can access area and this gives me back.

1548
02:30:51,200 --> 02:30:56,200
This is not a method anymore.

1549
02:30:56,200 --> 02:31:01,200
You have to put the parentheses.

1550
02:31:01,200 --> 02:31:06,200
You can use the process.

1551
02:31:06,200 --> 02:31:11,200
It returns this return value of this area.

1552
02:31:11,200 --> 02:31:16,200
This can be useful if you start out with a constant value

1553
02:31:16,200 --> 02:31:21,200
and you use it and then later on you decide it has to be a method to compute this value because it's not constant anymore.

1554
02:31:21,200 --> 02:31:26,200
Then you can use a property.

1555
02:31:26,200 --> 02:31:31,200
The API, the outside view of this attribute looks the same.

1556
02:31:31,200 --> 02:31:36,200
If somebody accesses this attribute as a constant value, you can use access same.

1557
02:31:36,200 --> 02:31:41,200
There's no difference, but in the background something else happens.

1558
02:31:41,200 --> 02:31:46,200
You can keep the interface from outside.

1559
02:31:46,200 --> 02:31:51,200
That's what I did here.

1560
02:31:51,200 --> 02:31:56,200
You can use the property battery size, but actually it just delegates to the battery and gets the size from the battery.

1561
02:31:56,200 --> 02:32:01,200
That means the size is only stored inside the battery

1562
02:32:01,200 --> 02:32:06,200
and the car asks the battery what's your size instead of storing this value.

1563
02:32:06,200 --> 02:32:11,200
You store the value twice and you change it and you have two different battery sizes.

1564
02:32:11,200 --> 02:32:16,200
This can work. Of course this generates a coupling between the car and the battery,

1565
02:32:16,200 --> 02:32:21,200
but there's a coupling anyway because the battery is only inside the car.

1566
02:32:21,200 --> 02:32:26,200
You're only concerned about car batteries.

1567
02:32:26,200 --> 02:32:31,200
If you recycle things you might use car batteries later for something else, but that's not our concern here.

1568
02:32:31,200 --> 02:32:36,200
The battery is only inside the car, so the coupling is kind of okay.

1569
02:32:36,200 --> 02:32:41,200
Those things you can think about if it's always the case and so on.

1570
02:32:41,200 --> 02:32:46,200
Now this property from outside looks exactly the same.

1571
02:32:46,200 --> 02:32:51,200
I can use the same functions to work with my car, but inside I have a class battery

1572
02:32:51,200 --> 02:32:56,200
which now later I could have an algorithm say okay introduce a time

1573
02:32:56,200 --> 02:33:01,200
and the battery is aging over time.

1574
02:33:01,200 --> 02:33:06,200
The time is still missing.

1575
02:33:06,200 --> 02:33:11,200
This is how often is the battery charged and discharged to what degree

1576
02:33:11,200 --> 02:33:16,200
because this also influences the lifetime of the battery.

1577
02:33:16,200 --> 02:33:21,200
If you discharge very low all the time then probably you reduce the battery capacity very quickly.

1578
02:33:21,200 --> 02:33:26,200
You might notice if you don't take care of the battery and just do it then this is very similar.

1579
02:33:26,200 --> 02:33:31,200
It depends very much on technology. Soon there will be new technologies that use different kinds of physics

1580
02:33:31,200 --> 02:33:36,200
then there might not be that much more.

1581
02:33:36,200 --> 02:33:41,200
This is a pretty good code, but this is just a translation.

1582
02:33:41,200 --> 02:33:46,200
The main thing goes into analysis first. What I want to achieve, what classes do I need,

1583
02:33:46,200 --> 02:33:51,200
how could it develop in the future.

1584
02:33:51,200 --> 02:33:56,200
This can lead to a lot of things you implement you're never ever going to need.

1585
02:33:56,200 --> 02:34:01,200
In this case it's not so much more complicated.

1586
02:34:01,200 --> 02:34:06,200
It's doing the same thing only that I moved something into the class.

1587
02:34:06,200 --> 02:34:11,200
Battery here that takes over a few of these things I'm doing.

1588
02:34:26,200 --> 02:34:31,200
Good.

1589
02:34:31,200 --> 02:34:36,200
Okay.

1590
02:34:36,200 --> 02:34:41,200
This is my take on analyzing your problem coming up as a solution.

1591
02:34:41,200 --> 02:34:46,200
Do you have any questions about this kind of strategy here?

1592
02:34:46,200 --> 02:34:51,200
Yeah.

1593
02:34:51,200 --> 02:34:56,200
Yeah.

1594
02:34:56,200 --> 02:35:01,200
I didn't understand the question.

1595
02:35:01,200 --> 02:35:06,200
Can you repeat?

1596
02:35:06,200 --> 02:35:11,200
Yeah.

1597
02:35:11,200 --> 02:35:16,200
Yeah.

1598
02:35:16,200 --> 02:35:21,200
Yeah.

1599
02:35:21,200 --> 02:35:26,200
Yeah.

1600
02:35:26,200 --> 02:35:31,200
Yeah.

1601
02:35:31,200 --> 02:35:36,200
Yeah.

1602
02:35:36,200 --> 02:35:41,200
Yeah.

1603
02:35:41,200 --> 02:35:46,200
Yeah.

1604
02:35:46,200 --> 02:35:51,200
Yeah.

1605
02:35:51,200 --> 02:35:56,200
Yeah.

1606
02:35:56,200 --> 02:36:01,200
Yeah.

1607
02:36:01,200 --> 02:36:06,200
Yeah.

1608
02:36:06,200 --> 02:36:11,200
Yeah.

1609
02:36:11,200 --> 02:36:16,200
Yeah.

1610
02:36:16,200 --> 02:36:21,200
Yeah.

1611
02:36:21,200 --> 02:36:26,200
Good.

1612
02:36:26,200 --> 02:36:31,200
Any more questions?

1613
02:36:31,200 --> 02:36:36,200
Okay.

1614
02:36:36,200 --> 02:36:41,200
Okay.

1615
02:36:41,200 --> 02:36:46,200
This would be the exercise.

1616
02:36:46,200 --> 02:36:51,200
Maybe you can get started.

1617
02:36:51,200 --> 02:36:56,200
I have a big appendix where I explain how, by the way,

1618
02:36:56,200 --> 02:37:01,200
where I get the data from and then how to make the graph.

1619
02:37:01,200 --> 02:37:06,200
If you're interested in the graph, I have a long thing about the graph, but just not so important.

1620
02:37:06,200 --> 02:37:11,200
This would be the exercise.

1621
02:37:11,200 --> 02:37:16,200
Here maybe you can choose a small problem from your domain, then go about, write your user story,

1622
02:37:16,200 --> 02:37:21,200
state your assumptions, and then

1623
02:37:21,200 --> 02:37:26,200
do this.

1624
02:37:26,200 --> 02:37:31,200
The following would be I have an example here about computers, virtual machines, and something like this.

1625
02:37:31,200 --> 02:37:36,200
If you don't have an example, this should be still general

1626
02:37:36,200 --> 02:37:41,200
enough for programmers that you know what a virtual machine is and you can go to the cloud

1627
02:37:41,200 --> 02:37:46,200
and spin up some machines without a lot of details and use a docker

1628
02:37:46,200 --> 02:37:51,200
and it's just, if you don't use docker, this is just the thing where you can

1629
02:37:51,200 --> 02:37:56,200
install everything with one thing so it will speak and everything runs immediately.

1630
02:37:56,200 --> 02:38:01,200
Then there are some assumptions here. You see a long list of assumptions

1631
02:38:01,200 --> 02:38:06,200
that we have. This is the given task. Alternatively, come up with your own task

1632
02:38:06,200 --> 02:38:11,200
and analyze your own task.

1633
02:38:11,200 --> 02:38:16,200
Then go through

1634
02:38:16,200 --> 02:38:21,200
the solutions

1635
02:38:21,200 --> 02:38:26,200
shouldn't appear here, but the solution is not shown. Explicitly write down

1636
02:38:26,200 --> 02:38:31,200
what the program should do, identify classes, methods, and attributes. So no implementation yet

1637
02:38:31,200 --> 02:38:36,200
actually. You can implementations, but you can just use stubs.

1638
02:38:36,200 --> 02:38:41,200
The methods don't do anything. You just give method names. You come up with class names

1639
02:38:41,200 --> 02:38:46,200
and method names, but don't put any implementation. That would be difficult anyway.

1640
02:38:46,200 --> 02:38:50,200
The solution is still

1641
02:38:50,200 --> 02:38:55,200
sticking here. This would be the exercise

1642
02:38:55,200 --> 02:39:00,200
we should do, but let's go back to my presentation.

1643
02:39:06,200 --> 02:39:11,200
Advantages.

1644
02:39:11,200 --> 02:39:16,200
I wrap up the presentation, then we do the exercise because it's a little bit open-ended.

1645
02:39:16,200 --> 02:39:21,200
Advantages of this object under programming. If you want, you can have a higher level

1646
02:39:21,200 --> 02:39:26,200
of abstraction because now you can use

1647
02:39:26,200 --> 02:39:31,200
better boards from your domain. Those class names, method names might be better than

1648
02:39:31,200 --> 02:39:36,200
the class names.

1649
02:39:36,200 --> 02:39:41,200
You can use analogy of modeling of real world objects with object representations,

1650
02:39:41,200 --> 02:39:46,200
real world things. Inheritance can be good for

1651
02:39:46,200 --> 02:39:51,200
code reuse. We've seen this here for those examples.

1652
02:39:51,200 --> 02:39:56,200
It's established. Object orientation originates from the 70s, 80s,

1653
02:39:56,200 --> 02:40:01,200
and that was the first one. It's not a very new thing. It's been around for a while.

1654
02:40:01,200 --> 02:40:06,200
There's also a lot of criticism about object orientation.

1655
02:40:06,200 --> 02:40:11,200
The answer on Python is you can always combine object orientation.

1656
02:40:11,200 --> 02:40:16,200
You can only do part of your program in this way and the rest the other way. Totally fine.

1657
02:40:16,200 --> 02:40:21,200
You can have more extensible design if you do it in the correct way.

1658
02:40:21,200 --> 02:40:26,200
Good. Disadvantages. Inheritance creates dependencies.

1659
02:40:26,200 --> 02:40:31,200
I told you when you inherit, you get everything from your parent. You have to turn something off.

1660
02:40:31,200 --> 02:40:36,200
If you don't want to, you have to turn it off explicitly.

1661
02:40:36,200 --> 02:40:41,200
It might lead to a little bit of this over-engineering thing where you add more things.

1662
02:40:41,200 --> 02:40:46,200
I still remember I took part in one of those small programming competitions to take a piece of text

1663
02:40:46,200 --> 02:40:51,200
and get some references out. I was inspired by the Python solution.

1664
02:40:51,200 --> 02:40:56,200
The Python solution was eight lines or so finished. This guy came with a Java solution, 250 lines.

1665
02:40:56,200 --> 02:41:01,200
He had the interface here, an interface there, something there.

1666
02:41:01,200 --> 02:41:06,200
He solved a lot of problems they didn't ask for.

1667
02:41:06,200 --> 02:41:11,200
This could be useful, potentially, but there's a lot of extra work that may not be needed later on.

1668
02:41:11,200 --> 02:41:16,200
If you do it wrong, it can make things more complex.

1669
02:41:16,200 --> 02:41:21,200
You have all kinds of connections between objects you don't want.

1670
02:41:21,200 --> 02:41:26,200
In Python, you have PyLint, PyReverse inside, so you can take your classes and it creates a class diagram.

1671
02:41:26,200 --> 02:41:31,200
UML.classDiagram. Usually it's the other way around.

1672
02:41:31,200 --> 02:41:36,200
There's a lot of tools.

1673
02:41:36,200 --> 02:41:41,200
You can model your objects graphically and then from this they generate code stops.

1674
02:41:41,200 --> 02:41:46,200
In Python, you can program your classes and then generate these files.

1675
02:41:46,200 --> 02:41:51,200
Then you see who's inherited from whom and how it looks graphically.

1676
02:41:51,200 --> 02:41:56,200
That can be useful if everything is connected.

1677
02:41:56,200 --> 02:42:01,200
This might be too much. You want to have a clean hierarchy.

1678
02:42:01,200 --> 02:42:06,200
You can visualize things and maybe they can be useful not to make your program too complicated.

1679
02:42:06,200 --> 02:42:11,200
PyLint.

1680
02:42:11,200 --> 02:42:16,200
I think the command is PyReverse.

1681
02:42:16,200 --> 02:42:21,200
When you install PyLint and it creates a .file, you need to install this graph to visualize the .file.

1682
02:42:21,200 --> 02:42:26,200
There might be other tools. That's a tool I know.

1683
02:42:26,200 --> 02:42:31,200
What to do from my perspective in Python you can always use multiple programming paradigms.

1684
02:42:31,200 --> 02:42:36,200
We just write functions, use classes, use functional programming.

1685
02:42:36,200 --> 02:42:41,200
The list comprehension we did is you might put them into the box functional programming.

1686
02:42:41,200 --> 02:42:46,200
Iterators might belong to the box functional programming.

1687
02:42:46,200 --> 02:42:51,200
If this is enough and it's small, write functions.

1688
02:42:51,200 --> 02:42:56,200
You don't have to always say I have to write a class.

1689
02:42:56,200 --> 02:43:01,200
No need.

1690
02:43:01,200 --> 02:43:06,200
The important thing is a function gets input arguments and returns an output and shouldn't change the world outside.

1691
02:43:06,200 --> 02:43:11,200
If you need to change the world outside, then you should consider a class.

1692
02:43:11,200 --> 02:43:16,200
You put everything into a class and you have the self.

1693
02:43:16,200 --> 02:43:21,200
You can use the method to change the world.

1694
02:43:21,200 --> 02:43:26,200
That's my recommendation.

1695
02:43:26,200 --> 02:43:31,200
Use functional features if you like.

1696
02:43:31,200 --> 02:43:36,200
You move to the next, you move to the next, you move to the next.

1697
02:43:36,200 --> 02:43:41,200
This is something you can use functional features in a better way.

1698
02:43:41,200 --> 02:43:46,200
You can combine them in your way.

1699
02:43:46,200 --> 02:43:51,200
This is a pretty broad thing, but that's my experience.

1700
02:43:51,200 --> 02:43:56,200
We see here this electric car has a state that everything changes, so it makes sense.

1701
02:43:56,200 --> 02:44:01,200
It makes sense because something changes over time and you want to keep track of what's going on.

1702
02:44:01,200 --> 02:44:06,200
A lot of things are connected. Then having an object is pretty good.

1703
02:44:06,200 --> 02:44:11,200
If you just process something and it's really a pipeline, then maybe a functional approach would be better.

1704
02:44:18,200 --> 02:44:23,200
Good.

1705
02:44:23,200 --> 02:44:28,200
Any more questions?

1706
02:44:28,200 --> 02:44:33,200
The exercise is still outstanding, but this is a kind of open-ended exercise.

1707
02:44:33,200 --> 02:44:38,200
I gave you some idea.

1708
02:44:38,200 --> 02:44:43,200
I have a solution for this exercise I wrote you.

1709
02:44:43,200 --> 02:44:48,200
I will add the solution to the zip file, also my notebooks.

1710
02:44:48,200 --> 02:44:53,200
Then you have everything in the zip file.

1711
02:44:53,200 --> 02:44:58,200
If you feel like you can start now with the exercise, I will stick around.

1712
02:44:58,200 --> 02:45:03,200
I will be around through the sprint, so if you can catch me somewhere on the hallway,

1713
02:45:03,200 --> 02:45:08,200
then you can always talk to me about these things.

1714
02:45:08,200 --> 02:45:13,200
I will stay here for a little bit longer for questions if you want to come.

1715
02:45:13,200 --> 02:45:18,200
Otherwise, thank you very much for your being here.

1716
02:45:18,200 --> 02:45:23,200
You can start the exercises now or go have lunch or come to me and ask questions.

1717
02:45:23,200 --> 02:45:28,200
Thank you very much.

