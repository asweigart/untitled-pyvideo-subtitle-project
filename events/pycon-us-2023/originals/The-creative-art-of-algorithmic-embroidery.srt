1
00:00:00,000 --> 00:00:10,000
Alright, welcome back everyone. For our final session this afternoon, we're going to hear from Marie Wulog and Inga Mou.

2
00:00:10,000 --> 00:00:14,000
They're going to talk to us about the creative art of algorithmic embroidery.

3
00:00:14,000 --> 00:00:17,000
So, please give a nice welcome to Marie and Inga.

4
00:00:17,000 --> 00:00:36,000
Why are we standing here at PyCon with the thoughts that has embroidery in the background?

5
00:00:37,000 --> 00:00:46,000
Or in other words, what is the connection, if any, between embroidery patterns, programming concepts, and computer art?

6
00:00:46,000 --> 00:00:56,000
And can we use Python code to create embroidery patterns in a way that's accessible and fun for both experienced and beginner Pythonistas?

7
00:00:57,000 --> 00:01:00,000
I'm Maria, this is Inga.

8
00:01:00,000 --> 00:01:16,000
And the reason we ask these questions is that about two years ago now, we were, just as I'm sure many of you were, stuck inside event experience a lot.

9
00:01:16,000 --> 00:01:29,000
We both had jobs using and teaching Python, which we loved, but we were beginning to get a little burnt out on everything being all digital all the time.

10
00:01:29,000 --> 00:01:34,000
And we were thinking of the physical coding right, which isn't fun.

11
00:01:35,000 --> 00:01:45,000
So we were increasingly desperate to find a way to use our Python code to create something tangible to pull us out of this problem.

12
00:01:45,000 --> 00:01:54,000
So when we learned about embroidery machines, and if some of them can be programmed, we were instantly fascinated.

13
00:01:55,000 --> 00:02:06,000
Which took us on an exciting path of learning about embroidery styles, exploring computer art, and creating our own embroidery patterns using Python code.

14
00:02:06,000 --> 00:02:13,000
So today, we want to share a little bit of this fun journey with all of you.

15
00:02:17,000 --> 00:02:19,000
Let's start by talking about embroidery.

16
00:02:20,000 --> 00:02:26,000
So we're an art expert, we're programmers. So I want to look at it through the lens of programming concepts.

17
00:02:26,000 --> 00:02:34,000
First up, loops. Using loops to keep simple operations upon complex algorithms is an essential building block of computer science.

18
00:02:34,000 --> 00:02:39,000
In art and crafts, loops differ through repetition and symmetry.

19
00:02:39,000 --> 00:02:43,000
This is a practical pattern that uses repetition and rotation.

20
00:02:44,000 --> 00:02:53,000
Structural is an all-definite coding technique, where simple geometric shapes, at least, less than geometric shapes, are repeated to form an intricate composition.

21
00:02:53,000 --> 00:02:57,000
And for this length, it was used to repair or strengthen cloths.

22
00:02:58,000 --> 00:03:04,000
If we look at this pattern, we see that it's made of a least repeating shape, row spaces.

23
00:03:05,000 --> 00:03:14,000
Black work is a talented thread embroidery, where black thread is used to embroider white linen cloths in a particular way.

24
00:03:14,000 --> 00:03:25,000
It likely has influence from geometric Islamic art through the Muslim population in Spain during the Middle Ages, and it was very popular among British royals.

25
00:03:25,000 --> 00:03:31,000
This portion of a painting of Jane Seymour shows her wearing cloths embroidered with geometric black work.

26
00:03:32,000 --> 00:03:37,000
And if we decompose this pattern, we see these repeating shapes.

27
00:03:40,000 --> 00:03:45,000
Another type of counterfeit embroidery is Adangism or Norwegian white work.

28
00:03:46,000 --> 00:03:50,000
And this is a very famous or popular pattern.

29
00:03:50,000 --> 00:03:56,000
It's these eight trapezoids rotated and flipped to create a flower.

30
00:03:56,000 --> 00:04:05,000
In Norway, we sometimes call this a saldurusa, but it occurs all over the world, like here on the Ukrainian Vizhivanca.

31
00:04:06,000 --> 00:04:20,000
What we see here is that the technique of repeating simple patterns to create an intricate end result, which we as programmers are very familiar with, is also very relevant in embroidery.

32
00:04:21,000 --> 00:04:25,000
And another technique we use a lot in programming is randomness.

33
00:04:26,000 --> 00:04:40,000
Randomness is also present in embroidery, both through the natural imperfections in something you make by hand, but also as it can be used to make patterns that are more organic in nature.

34
00:04:40,000 --> 00:04:45,000
True natural patterns are not perfectly repeating, but more resonant.

35
00:04:46,000 --> 00:04:55,000
This is a print of black work, and if we look at it, we see the same shapes repeating, but each repetition is slightly different from the rest.

36
00:04:57,000 --> 00:05:02,000
And the final programming concept I want to mention is recursion.

37
00:05:02,000 --> 00:05:10,000
It underpins any divide and conquer algorithm, and it's also heavily used in embroidery.

38
00:05:10,000 --> 00:05:21,000
When we got interested in embroidery, Maria wanted to add a head start to her do-nots in a regional national suit, and she bought a pattern and she was left with this.

39
00:05:21,000 --> 00:05:25,000
Now here we clearly see the self-similarity in fractal patterns.

40
00:05:25,000 --> 00:05:32,000
This cloth is made up of smaller crosses, they're made up of smaller crosses, they're made up of even smaller crosses.

41
00:05:33,000 --> 00:05:36,000
And this is only a small fraction of the head scarf.

42
00:05:36,000 --> 00:05:41,000
The whole thing looks like this, with many of these fractal patterns.

43
00:05:41,000 --> 00:05:53,000
Now, we are just curious enthusiasts, and if you're interested in diving into the same radicals we have, then these are some references that we highly recommend.

44
00:05:53,000 --> 00:06:06,000
And it's also worth mentioning that we've only grazed the surface of a tiny amount of embroidery styles here, and there are so many huge whole styles of embroidery from all over the world.

45
00:06:06,000 --> 00:06:09,000
We could be studying for days without covering nearly everything.

46
00:06:12,000 --> 00:06:20,000
But what we've seen is that we can find programming patterns, programming concepts, in beautiful patterns.

47
00:06:20,000 --> 00:06:24,000
But can we create beautiful patterns with programming?

48
00:06:24,000 --> 00:06:27,000
This is not a new question.

49
00:06:27,000 --> 00:06:34,000
It's been around for decades, and it's not a creative coding, it's not a creative programming, it's not a creative programming.

50
00:06:34,000 --> 00:06:38,000
And it's not a creative coding, generative art, or computer art.

51
00:06:38,000 --> 00:06:44,000
And the pioneers of computer art, they did not have the same luxury as we have today.

52
00:06:44,000 --> 00:06:57,000
To see their creations, they first had to take their code, turn it into punch cards, take those punch cards, put it into a machine like that, and then that machine had to use a piece of cardboard or paper, and a pen to draw out what they made.

53
00:06:57,000 --> 00:07:00,000
And still, they created wonderful art.

54
00:07:00,000 --> 00:07:11,000
Like this by A. Michael Noll, which uses only repetition to create this way-like, almost crispy effect, heavily inspired by current, by Bridget Riley.

55
00:07:14,000 --> 00:07:27,000
Or this famous example, this is a recreation of soccer or gravel by Gerd Ness, which uses only repetition and randomness to create this progressively disintegrating texture.

56
00:07:28,000 --> 00:07:41,000
These are not, they also use just repetition and randomness to create this work, where many small lines are randomly rotated to create this maze-like property.

57
00:07:41,000 --> 00:07:47,000
Now, this one was particularly cumbersome to make because of all of the short lines.

58
00:07:47,000 --> 00:07:51,000
So there aren't that many physical copy subjects.

59
00:07:51,000 --> 00:08:00,000
But by the 80s, that had changed. With a personal computer, it was a lot easier to see what you made.

60
00:08:00,000 --> 00:08:06,000
And a particularly famous piece of creative coding is a 10 print one-liner.

61
00:08:06,000 --> 00:08:22,000
I really like this one. It's very simple. Flip a coin, if it slides, throw a forward touch. If it fails, throw a backward touch. Repeat forever to create an endless maze-like effect.

62
00:08:22,000 --> 00:08:27,000
That's very similar to the work by Nafke about 20 years earlier.

63
00:08:28,000 --> 00:08:36,000
Now, what we see here is that repetition and randomness are key features of creative coding and computer art.

64
00:08:36,000 --> 00:08:44,000
And another programming technique that's used a lot in creative coding is recursion, to create fractals.

65
00:08:44,000 --> 00:08:53,000
Here we see a linden mire system, which is a type of fractal, and this particular linden mire system, it makes recursively resemble a weed.

66
00:08:54,000 --> 00:09:08,000
Now again, we are just curious enthusiasts. If you want to read more about creative coding, geometry art, computer art, the history of the tools, these are some very good resources to check out.

67
00:09:08,000 --> 00:09:18,000
So we can find programming concepts in Parsons. And we can create Parsons with programming.

68
00:09:19,000 --> 00:09:24,000
But what do we do if we want to do this ourselves, in Parsons?

69
00:09:24,000 --> 00:09:29,000
Let's use a simple line as our building block.

70
00:09:29,000 --> 00:09:36,000
To draw in Parsons, we can use the built-in library structure. So we start by importing a program.

71
00:09:36,000 --> 00:09:43,000
Then, to draw a line, we first create a turtle object, and then call a forward method.

72
00:09:44,000 --> 00:09:51,000
So forward takes the number of steps we want to use, for example, and then we use this to create a line ahead.

73
00:09:51,000 --> 00:09:59,000
And when we're done with the drawing, we call target.stack, which can be self-piping, that we've finished with our drawing, but we want to keep it this way.

74
00:09:59,000 --> 00:10:03,000
So let's have a look at what we get when we run this code.

75
00:10:04,000 --> 00:10:15,000
Well, a single straight line might not be the perfect answer, but we've seen that repeating the same shape over and over again can give us some nice patterns.

76
00:10:15,000 --> 00:10:22,000
So let's use the repetition again. And mute each drawing of the line into a corner, repeated several times.

77
00:10:22,000 --> 00:10:34,000
Let's repeat it four times, and let's also roll into a turtle for each repetition by calling right, which tells the turtle to roll towards the right and take in the number of degrees.

78
00:10:34,000 --> 00:10:37,000
In this case, 90.

79
00:10:37,000 --> 00:10:42,000
Now, if I run this code, I get a square.

80
00:10:42,000 --> 00:10:50,000
And we can use repetition again and repeat this whole drawing of the squares several times by moving all of it into a corner.

81
00:10:50,000 --> 00:10:58,000
So let's draw eight squares, and let's also rotate the turtle 45 degrees between each square.

82
00:10:58,000 --> 00:11:06,000
Now, if I call this code, we see that by repeating them, the squares form a flower.

83
00:11:08,000 --> 00:11:15,000
And this perfectly symmetric, geometric flower is already quite beautiful.

84
00:11:15,000 --> 00:11:22,000
But if we want to add a little bit of variation to get the different expressions, we can use some randomness.

85
00:11:22,000 --> 00:11:29,000
We can do this, for example, with the ghost country that we import from random.

86
00:11:29,000 --> 00:11:42,000
And then we can get a random petal size by calling ghost, which for the statistics found in the room means that we get normally distributed random petal sizes.

87
00:11:42,000 --> 00:11:54,000
And if we think through other words, we get random petal sizes, but in such a way that on average we have 40 steps, and they're rarely more than 10 steps away from 40, which is what the design represents.

88
00:11:54,000 --> 00:11:57,000
We can do the same thing for rotation.

89
00:11:57,000 --> 00:12:05,000
We get a random rotation for the petals that are on average 45 degrees, and then used between 40 and 50 degrees.

90
00:12:05,000 --> 00:12:09,000
And after testing these random variables, we can use them to add volume.

91
00:12:09,000 --> 00:12:19,000
So here we use the random size to decide how far the petals should move when drawing one side of a square that makes up a petal.

92
00:12:19,000 --> 00:12:25,000
And then we use the random rotation to decide how much the petals should rotate if you do square petals.

93
00:12:25,000 --> 00:12:29,000
So let's see how this affects our flower drawing.

94
00:12:29,000 --> 00:12:36,000
So we get quite a few different expressions just from adding a little bit of randomness to our color.

95
00:12:36,000 --> 00:12:44,000
And if you want a full season of the flowers, you can use repetitions again and repeat this drawing of the flower all across the screen.

96
00:12:44,000 --> 00:12:56,000
So then we need to integrate all the horizontal positions and the vertical positions, and we need to be able to move the circle with our vertical position.

97
00:12:56,000 --> 00:13:00,000
And we need to be able to move the circle without drawing.

98
00:13:00,000 --> 00:13:08,000
For this we can hold turn up, then move the circle into position, and enable drawing again with turn down.

99
00:13:15,000 --> 00:13:24,000
So we get this nice flower field of repeating similar but not exactly the same geometric flowers.

100
00:13:26,000 --> 00:13:37,000
Finally, let's take a little bit of inspiration from soccer that we saw earlier and increase the degree of randomness across the screen to get an effect of increasing chaos in our flower field.

101
00:13:37,000 --> 00:13:41,000
And let's also take a little bit of inspiration from traditional embroidery.

102
00:13:41,000 --> 00:13:51,000
I switched out these square flowers with parallelogram saber roses to get a fun mix of Norwegian embroidery and German computer art.

103
00:13:52,000 --> 00:14:05,000
So we see that in just some formats and random variables we can create our own creative patterns right inside of Python using the built-in library purple.

104
00:14:05,000 --> 00:14:17,000
Now a good point, you might be asking, well drawing on the screen is nice and all, but can we decorate physical space with these patterns?

105
00:14:17,000 --> 00:14:21,000
For example, by embroidering them onto fabrics.

106
00:14:21,000 --> 00:14:25,000
That's a great question, and I'm glad you have accepted your ask.

107
00:14:27,000 --> 00:14:41,000
We looked into some options, we found courtesy, which is an excellent project that lets you create embroidery files readable by an embroidery machine using the snap block program library.

108
00:14:41,000 --> 00:14:48,000
This is very cool, but we don't want to convert our Python code into block programming code.

109
00:14:48,000 --> 00:14:50,000
We want to do this in Python.

110
00:14:50,000 --> 00:14:59,000
There's also Python embroidery, which is a terrific project that can read and write the precious amount of embroidery files.

111
00:14:59,000 --> 00:15:07,000
Python embroidery is a great resource if you want to work with embroidery files in Python, and I highly recommend everyone checking it out.

112
00:15:07,000 --> 00:15:24,000
We've also looked at a little more level and inquiries into explicitly coding structures, and what we wanted was to be able to use the beginner-friendly title commands that we know and love, and then just be able to export the end result as an embroidery file.

113
00:15:24,000 --> 00:15:28,000
And because we couldn't find this, the idea turned into TitleCraft.

114
00:15:29,000 --> 00:15:38,000
So TitleCraft builds a proper file embroidery and lets you create embroidery files with title commands and simple complex managers.

115
00:15:38,000 --> 00:15:55,000
So with TitleCraft, you can take code like the one we saw earlier that creates a square as a drawing from the tree, and turn it into code that creates an embroidery file readable by an embroidery machine.

116
00:15:55,000 --> 00:16:10,000
There we switch out TitleCraft and then we add the complex manager that specifies all the title commands to be converted into stitches, and at the end we save the pattern as an embroidery file.

117
00:16:10,000 --> 00:16:15,000
Over the map, it's the same familiar title commands.

118
00:16:17,000 --> 00:16:22,000
So let's look at an embroidery machine in action.

119
00:16:25,000 --> 00:16:36,000
You see the stitches form very similar as the drawing did on the screen.

120
00:16:36,000 --> 00:16:42,000
And here we show the code execution side by side in which form it is.

121
00:16:42,000 --> 00:16:48,000
That's how the artworks. In reality, the work flow looks like this.

122
00:16:48,000 --> 00:16:54,000
So first you write your typing code that creates your embroidery pattern and stores it in an embroidery file.

123
00:16:54,000 --> 00:16:58,000
And then you transfer that file to an embroidery machine.

124
00:16:58,000 --> 00:17:03,000
And finally, the machine executes the pattern.

125
00:17:04,000 --> 00:17:14,000
So after getting this phone code library up and running, we're lucky enough to have access to an embroidery machine in the new makerspace of our local library in Posto.

126
00:17:14,000 --> 00:17:23,000
And then we proceeded to test it out by following our dream of decorating a Christmas tree with typing-generated snowflake embroidery.

127
00:17:25,000 --> 00:17:31,000
And after this, we had a lot of fun just seeing what we could make with an embroidery machine from Title.

128
00:17:31,000 --> 00:17:41,000
In reality, we convinced our employer that we needed an embroidery machine and his office makerspace, which made it more convenient to test out lots of different embroidery embroidery.

129
00:17:41,000 --> 00:17:44,000
I'll show you a couple of examples.

130
00:17:44,000 --> 00:17:48,000
Here is the cyberchopper from earlier stitched on fabric.

131
00:17:48,000 --> 00:17:51,000
Some rainbow colored silver curve.

132
00:17:51,000 --> 00:17:56,000
Some 3D raincrafting rendered as stitches on the fabric.

133
00:17:56,000 --> 00:18:03,000
And one thing I think it really fun to do is to use the cabling station algorithm on an image.

134
00:18:03,000 --> 00:18:11,000
And then what if a machine stitches out a portrait with only a single running stitch?

135
00:18:18,000 --> 00:18:23,000
I'm going to give you a few reasons why you should try this yourself.

136
00:18:24,000 --> 00:18:29,000
Either with an embroidery machine from fabric or just by drawing the stitch.

137
00:18:30,000 --> 00:18:36,000
The first reason is that drawing is a very visual way to explore primary concepts.

138
00:18:36,000 --> 00:18:40,000
The simplest replication is randomness and recursion.

139
00:18:40,000 --> 00:18:49,000
And for many it is easier to get comfortable with this rather abstract concept through something visual.

140
00:18:49,000 --> 00:18:55,000
And it's even better if it's something tangible that you can touch and relate to.

141
00:18:55,000 --> 00:18:57,000
Second reason.

142
00:18:57,000 --> 00:19:07,000
So if you're learning or teaching Python, then drawing with Tuttle and embroidery with FragmentPath are great tools for your toolbox.

143
00:19:08,000 --> 00:19:18,000
Sort of on the online side, drawing with code lets you use our rules and programming concepts to explore art and creativity.

144
00:19:19,000 --> 00:19:26,000
With FragmentRuns you can gain a deeper understanding and appreciation of what life behind a pattern is you enjoy.

145
00:19:26,000 --> 00:19:36,000
By maybe exploring the algorithm's behavior and maybe even using what you discover to inform your own creative expression.

146
00:19:38,000 --> 00:19:42,000
And the final reason is that it's a fun.

147
00:19:43,000 --> 00:19:47,000
Coding in Python is very useful.

148
00:19:47,000 --> 00:19:52,000
And it's excellent for solving interesting, important and challenging problems.

149
00:19:52,000 --> 00:19:57,000
And we've seen so many awesome examples of this right here at the Python.

150
00:19:58,000 --> 00:20:03,000
But coding in Python is also fun and creative, right?

151
00:20:06,000 --> 00:20:10,000
But it can be useful to be fun for most of us sometimes.

152
00:20:11,000 --> 00:20:22,000
It can be useful to get physically intimidated by so many highly skilled programmers and maybe start worrying that your own skills don't quite match up.

153
00:20:24,000 --> 00:20:30,000
And when negative thoughts like that start to creep in, I've found that there's either good ways to get them away,

154
00:20:30,000 --> 00:20:33,000
or to just sit down and do some coding.

155
00:20:33,000 --> 00:20:37,000
Simply to create something that brings you joy.

156
00:20:41,000 --> 00:20:49,000
So if you're first and you want to try this out for yourself, we have a presentation on turtlestread.com.

157
00:20:49,000 --> 00:20:58,000
We have some simple getting started guides, a small gallery of examples where you can see the outset of the script.

158
00:20:58,000 --> 00:21:08,000
And we also have an in-depth tutorial on how to use repetition, randomness and recursion to create this winter themed ornament that Marija mentioned earlier.

159
00:21:11,000 --> 00:21:18,000
Now if you want to take your creations from the screen and render them onto tablets, you need access to an embroidery machine.

160
00:21:18,000 --> 00:21:21,000
And these can be quite expensive.

161
00:21:23,000 --> 00:21:28,000
But we've been able to embroider quite a lot, and we don't own any embroidery machine.

162
00:21:28,000 --> 00:21:38,000
We started with a machine at the library in Oslo, and then we found out that they have a major space at the university where Marija does her PhD.

163
00:21:38,000 --> 00:21:41,000
Marija used their embroidery machine.

164
00:21:41,000 --> 00:21:48,000
Marija taught a course at a science center outside of Oslo. They had an embroidery machine that she was able to borrow.

165
00:21:48,000 --> 00:21:53,000
And lately, I managed to convince my employers to get one as well.

166
00:21:54,000 --> 00:22:02,000
We checked out Salt Lake City. This makes Salt Lake. They have an embroidery machine that members can borrow.

167
00:22:03,000 --> 00:22:06,000
So check out your local marketplaces.

168
00:22:08,000 --> 00:22:21,000
Now I hope that we have managed to convince and inspire at least some of you to sit down, open prices, and import surface or circle threads.

169
00:22:21,000 --> 00:22:24,000
And let's start with algorithmic embroidery. Thank you.

170
00:22:39,000 --> 00:22:45,000
Thank you, Marija and Inga. And that concludes the session for today.

171
00:22:45,000 --> 00:22:57,000
They will be at their poster sessions tomorrow. If you have more questions or things to discuss, or since this is the last session, feel free to stick around and ask some questions here.

172
00:22:57,000 --> 00:23:05,000
Otherwise, there are lightning clocks starting in a couple minutes in the Grand Ballroom, and the High Ladies auction is this evening as well.

173
00:23:05,000 --> 00:23:09,000
Otherwise, we'll see you tomorrow. So one more round of applause for Inga and Marija.

