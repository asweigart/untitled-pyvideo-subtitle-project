1
00:00:00,000 --> 00:00:03,920
Good afternoon.

2
00:00:03,920 --> 00:00:06,960
Hey, first off, I want to welcome everybody.

3
00:00:06,960 --> 00:00:08,360
It's really great for you to be here.

4
00:00:08,360 --> 00:00:10,520
Like, we're super excited.

5
00:00:10,520 --> 00:00:16,920
And this, although I registered the tutorial as Ted Patrick,

6
00:00:16,920 --> 00:00:21,360
this presentation is by the entire PyScript team.

7
00:00:21,360 --> 00:00:24,920
Everyone who will present today is a core maintainer.

8
00:00:24,920 --> 00:00:28,120
Fabio is the creator of PyScript.

9
00:00:28,120 --> 00:00:38,360
And we're going to take you through building apps,

10
00:00:38,360 --> 00:00:43,520
where we see things going, what the current APIs hold,

11
00:00:43,520 --> 00:00:46,960
and also kind of we want this to be interactive.

12
00:00:46,960 --> 00:00:50,440
So we want, we've built into the time schedule plenty

13
00:00:50,440 --> 00:00:52,880
of time for question and answers.

14
00:00:52,880 --> 00:00:55,520
If you have an immediate problem in getting an application

15
00:00:55,600 --> 00:00:59,360
to work, just simply raise your hand and one of us will come

16
00:00:59,360 --> 00:01:01,960
to you and sort the issue out.

17
00:01:01,960 --> 00:01:06,040
But if you feel the issue relates to anyone else,

18
00:01:06,040 --> 00:01:07,960
please feel free to go to the microphone

19
00:01:07,960 --> 00:01:10,160
and just ask the question, okay?

20
00:01:10,160 --> 00:01:12,400
And we can cover it, we can cover it that way.

21
00:01:12,400 --> 00:01:14,800
But we want it to be interactive and we want you to feel

22
00:01:14,800 --> 00:01:18,040
like you walk out of the session knowing how

23
00:01:18,040 --> 00:01:20,800
to build PyScript apps, how to deploy them,

24
00:01:20,800 --> 00:01:23,640
how they work, and the like.

25
00:01:24,120 --> 00:01:29,160
So first things first, for this, if you want to participate

26
00:01:29,160 --> 00:01:32,720
in the demos and code along, you'll need a computer.

27
00:01:32,720 --> 00:01:34,160
Most of the things that we're going

28
00:01:34,160 --> 00:01:36,840
to be doing are on PyScript.com.

29
00:01:36,840 --> 00:01:39,920
PyScript.com is a SaaS product.

30
00:01:39,920 --> 00:01:41,400
It is free.

31
00:01:41,400 --> 00:01:44,880
And the free part allows you to create apps,

32
00:01:44,880 --> 00:01:47,640
you get your own subdomain and you can publish as you want.

33
00:01:47,640 --> 00:01:52,040
So if you go to PyScript.com now and sign up,

34
00:01:52,080 --> 00:01:54,040
you can basically participate when we get

35
00:01:54,040 --> 00:01:56,760
to the coding part after my section.

36
00:01:56,760 --> 00:01:59,880
So we're going to spend some time going

37
00:01:59,880 --> 00:02:01,720
through a handful of things.

38
00:02:01,720 --> 00:02:03,280
My name is Ted Patrick.

39
00:02:03,280 --> 00:02:05,640
I am the PyScript engineering manager.

40
00:02:05,640 --> 00:02:08,600
And so I manage the broader PyScript team,

41
00:02:08,600 --> 00:02:14,080
both the open source and also the .com product.

42
00:02:14,080 --> 00:02:16,920
And I'll talk a little bit about what is PyScript

43
00:02:16,920 --> 00:02:18,600
and the who and the why.

44
00:02:19,080 --> 00:02:22,600
But then Nicholas is going to take you

45
00:02:22,600 --> 00:02:25,160
through actually building an app from scratch.

46
00:02:25,160 --> 00:02:28,920
So in PyScript.com, we'll build up a working application.

47
00:02:28,920 --> 00:02:31,680
And then we have some breaks.

48
00:02:31,680 --> 00:02:36,160
You can either choose to stay and talk to us, ask questions

49
00:02:36,160 --> 00:02:38,280
and kind of we can debug apps and the like.

50
00:02:38,280 --> 00:02:42,840
But we built in a couple breaks throughout the tutorial.

51
00:02:42,840 --> 00:02:45,080
And next we're going to head over to configuration.

52
00:02:45,160 --> 00:02:48,800
Madhur is going to be handling configuration.

53
00:02:48,800 --> 00:02:52,640
And the configuration actually is an area that there's a lot

54
00:02:52,640 --> 00:02:55,920
of issues with it because it's really about setting

55
00:02:55,920 --> 00:02:57,680
up your environment, loading the right packages

56
00:02:57,680 --> 00:03:00,560
and getting things set to run.

57
00:03:00,560 --> 00:03:05,080
And then Jeff is going to be handling events and interop.

58
00:03:05,080 --> 00:03:08,440
So how do we talk from Python to JavaScript?

59
00:03:08,440 --> 00:03:10,400
And how do we talk from JavaScript to Python?

60
00:03:10,400 --> 00:03:12,080
But also how do you trigger events?

61
00:03:12,080 --> 00:03:14,240
How do you capture events,

62
00:03:14,280 --> 00:03:18,360
interactions with the browser DOM and also events

63
00:03:18,360 --> 00:03:21,360
within the life cycle of PyScript?

64
00:03:21,360 --> 00:03:24,480
Fabio is going to be covering plugins.

65
00:03:24,480 --> 00:03:28,040
And then I'm going to pop back and cover web APIs.

66
00:03:28,040 --> 00:03:32,720
So what are the grand, like what can you actually use the browser

67
00:03:32,720 --> 00:03:34,800
for because the browser has a whole bunch

68
00:03:34,800 --> 00:03:36,920
of very interesting APIs in it.

69
00:03:36,920 --> 00:03:39,840
And you can build very interesting things.

70
00:03:39,840 --> 00:03:42,840
And PyScript actually has access to all of those.

71
00:03:42,920 --> 00:03:46,800
There's nothing we need to do to actually access those.

72
00:03:46,800 --> 00:03:49,960
The interop basically takes care of that.

73
00:03:49,960 --> 00:03:53,720
And then our thought was if anyone has anything to show,

74
00:03:53,720 --> 00:03:55,920
we can spend some time going through show and tell.

75
00:03:55,920 --> 00:03:58,520
Although I imagine some of these sections will elongate

76
00:03:58,520 --> 00:04:02,320
to the point where we'll run out of time.

77
00:04:02,320 --> 00:04:06,400
So the question I have is like what is PyScript?

78
00:04:06,400 --> 00:04:12,000
And I think the best way to put it is PyScript is really a platform

79
00:04:12,040 --> 00:04:14,720
that brings Python to the browser

80
00:04:14,720 --> 00:04:17,760
and lets you create a configured environment.

81
00:04:17,760 --> 00:04:22,160
So because we're running in a browser with no dependencies

82
00:04:22,160 --> 00:04:24,880
but URLs, everything is loaded in real time.

83
00:04:24,880 --> 00:04:27,440
So we load the Python runtime.

84
00:04:27,440 --> 00:04:29,480
We load the modules directly.

85
00:04:29,480 --> 00:04:32,080
Whereas if you were on your desktop,

86
00:04:32,080 --> 00:04:36,400
you would be doing pip or conda install and basically building

87
00:04:36,400 --> 00:04:37,480
up a local cache.

88
00:04:37,480 --> 00:04:38,960
You'd be building a local environment

89
00:04:38,960 --> 00:04:40,840
to determine what Python you want.

90
00:04:40,840 --> 00:04:45,800
The same is true with PyScript except everything loads via URLs.

91
00:04:45,800 --> 00:04:47,560
So it's really live in the sense

92
00:04:47,560 --> 00:04:49,840
that when you publish an application,

93
00:04:49,840 --> 00:04:53,320
every time a person refreshes the page, everything loads.

94
00:04:53,320 --> 00:04:56,800
Now there are some caching methodologies that we're working

95
00:04:56,800 --> 00:04:58,960
on to try to improve that.

96
00:04:58,960 --> 00:05:01,760
And we're also working on multiple runtimes.

97
00:05:01,760 --> 00:05:08,200
So the pyodide runtime versus the micropython runtime are very

98
00:05:08,200 --> 00:05:13,880
different sizes but it sort of determines do you want full cPython

99
00:05:13,880 --> 00:05:18,120
or do you want a subset of Python that is light and fast.

100
00:05:18,120 --> 00:05:20,200
And it just depends on what type of app experience

101
00:05:20,200 --> 00:05:21,520
or app you're building.

102
00:05:21,520 --> 00:05:25,200
And as we build these out, ideally we have a unified platform

103
00:05:25,200 --> 00:05:30,680
that lets you with either runtime either run apps or the like.

104
00:05:30,680 --> 00:05:34,400
We do provide components for configuration,

105
00:05:34,400 --> 00:05:36,880
for adding script blocks.

106
00:05:36,920 --> 00:05:39,200
And we also have some repel components

107
00:05:39,200 --> 00:05:43,440
that let you do interactive, you know, eval loops.

108
00:05:43,440 --> 00:05:48,920
But I think the title of this talk was interesting in terms

109
00:05:48,920 --> 00:05:50,520
of us mentioning serverless.

110
00:05:50,520 --> 00:05:52,360
But you can run everything locally.

111
00:05:52,360 --> 00:05:54,160
There is no server required.

112
00:05:54,160 --> 00:05:58,280
You can run these off of any HTML file regardless of where that is.

113
00:05:58,280 --> 00:06:03,440
Now there are benefits to running on a web server under HTTPS

114
00:06:03,480 --> 00:06:08,040
because the web platform exposes functionality when you are secure.

115
00:06:08,040 --> 00:06:12,040
So you get to use WebRTC, you get to use WebSockets,

116
00:06:12,040 --> 00:06:14,720
you get to use some other security constructs.

117
00:06:14,720 --> 00:06:19,120
And also you can interact with other services and the like.

118
00:06:19,120 --> 00:06:21,680
So I wanted to take you through kind of a really high level way

119
00:06:21,680 --> 00:06:23,720
to think about PyScript.

120
00:06:23,720 --> 00:06:27,720
So we start, our stack is built upon the browser.

121
00:06:27,720 --> 00:06:29,680
That is our foundation.

122
00:06:29,720 --> 00:06:34,800
And the browser has APIs and recently probably

123
00:06:34,800 --> 00:06:38,280
in the last three years, WebAssembly

124
00:06:38,280 --> 00:06:43,000
or WASM has become an application virtual machine target

125
00:06:43,000 --> 00:06:45,720
that you can actually feed it native code.

126
00:06:45,720 --> 00:06:48,880
And that native code is put into a, it's compiled to bytecode

127
00:06:48,880 --> 00:06:51,080
and when it runs, it runs in a sandbox.

128
00:06:51,080 --> 00:06:54,280
And because it runs independent of the browser,

129
00:06:54,280 --> 00:06:58,480
it's sandboxed in a fairly unique way to allow you to not,

130
00:06:58,480 --> 00:07:02,560
you can run C things and have it not do dangerous things

131
00:07:02,560 --> 00:07:03,880
to your local machine.

132
00:07:03,880 --> 00:07:06,400
So it is a very good containerized solution

133
00:07:06,400 --> 00:07:09,560
for sandboxing code.

134
00:07:09,560 --> 00:07:11,960
On top of that, the two runtimes

135
00:07:11,960 --> 00:07:15,080
that we support are built upon WASM.

136
00:07:15,080 --> 00:07:19,000
So we work with the PyDI team and we're also working

137
00:07:19,000 --> 00:07:22,920
with the MicroPython teams to build up these runtimes

138
00:07:22,920 --> 00:07:27,280
so that they're compatible and have the features that we need.

139
00:07:27,440 --> 00:07:31,520
And then really this is where PyScript comes into play.

140
00:07:31,520 --> 00:07:36,320
So the script tag that is when you load PyScript as a tag,

141
00:07:36,320 --> 00:07:39,160
it sets up all of these things.

142
00:07:39,160 --> 00:07:42,480
It sets up the runtime, it instantiates WASM,

143
00:07:42,480 --> 00:07:44,360
it gets your code in the right place, it gives you access

144
00:07:44,360 --> 00:07:48,000
to the APIs and allows those things to all talk together.

145
00:07:48,000 --> 00:07:51,400
And this is where we begin building upon PyScript

146
00:07:51,400 --> 00:07:53,320
as kind of a foundation.

147
00:07:53,320 --> 00:07:57,200
Fabio has actually been working and the team has been working

148
00:07:57,200 --> 00:07:59,080
on trying to enable plugins.

149
00:07:59,080 --> 00:08:02,040
Plugins are, you can think of them as kind

150
00:08:02,040 --> 00:08:04,600
of a module-like thing, but it actually ties

151
00:08:04,600 --> 00:08:06,000
into the life cycle of PyScript.

152
00:08:06,000 --> 00:08:10,200
So you can actually know when the Python interpreter begins,

153
00:08:10,200 --> 00:08:12,880
you can actually catch loading events and other things,

154
00:08:12,880 --> 00:08:16,480
but Fabio is going to go into much more detail about that.

155
00:08:16,480 --> 00:08:19,120
But then you can actually just, with pure PyScript,

156
00:08:19,120 --> 00:08:20,880
you can actually write applications.

157
00:08:20,880 --> 00:08:22,680
And we think about this as this is kind

158
00:08:22,680 --> 00:08:25,320
of the framework side of PyScript, but there's kind

159
00:08:25,360 --> 00:08:27,920
of the platform side which is setting up the runtime,

160
00:08:27,920 --> 00:08:29,240
setting up the environment.

161
00:08:29,240 --> 00:08:32,360
But you can write PyScript and build anything you want,

162
00:08:32,360 --> 00:08:35,120
symbolized by the unicorn, yay.

163
00:08:35,120 --> 00:08:37,480
But there's other ways to build stuff.

164
00:08:37,480 --> 00:08:40,360
So you can actually use panel inside of PyScript apps,

165
00:08:40,360 --> 00:08:42,040
so you can begin to use other frameworks

166
00:08:42,040 --> 00:08:45,360
to build logical components and build UI

167
00:08:45,360 --> 00:08:48,000
and organize things on the page.

168
00:08:48,000 --> 00:08:52,040
And we fully expect there to be a lot more frameworks

169
00:08:52,040 --> 00:08:53,480
that arrive above PyScript.

170
00:08:53,520 --> 00:08:57,280
We're trying to take away the hard problems

171
00:08:57,280 --> 00:09:00,840
and let the Python community innovate on top of PyScript.

172
00:09:00,840 --> 00:09:03,160
And we think there's a place there.

173
00:09:04,080 --> 00:09:05,960
Actually, we think there's a strong enough case

174
00:09:05,960 --> 00:09:10,200
to where we're starting to dabble in frameworks on our own.

175
00:09:10,200 --> 00:09:14,160
We'll actually demo what we're referring to as PiperCard.

176
00:09:14,160 --> 00:09:17,560
PiperCard is a, it's basically HyperCard

177
00:09:17,560 --> 00:09:19,400
ported to PyScript.

178
00:09:19,400 --> 00:09:21,640
And if you're familiar with HyperCard,

179
00:09:21,640 --> 00:09:23,560
it was a precursor to the web,

180
00:09:23,560 --> 00:09:27,040
early Apple way to build interactive cards.

181
00:09:27,040 --> 00:09:30,120
And I think Nicholas, you'll go into that just a touch.

182
00:09:30,120 --> 00:09:31,480
Yeah.

183
00:09:31,480 --> 00:09:34,240
But also, you know, other people are gonna build

184
00:09:34,240 --> 00:09:36,840
interesting things and fully anticipate

185
00:09:36,840 --> 00:09:40,120
that we're not gonna build the world's best framework.

186
00:09:40,120 --> 00:09:43,000
We wanna set it up so that the Python community

187
00:09:43,000 --> 00:09:44,040
does some of that.

188
00:09:44,040 --> 00:09:46,840
And we support that innovation, we actually encourage it.

189
00:09:47,240 --> 00:09:52,240
And at this point, I think I'm gonna turn it over to Nicholas.

190
00:09:53,600 --> 00:09:56,200
He's gonna walk through coding a PyScript app.

191
00:10:16,960 --> 00:10:17,800
Thanks.

192
00:10:37,360 --> 00:10:39,560
Hi folks, how are you all?

193
00:10:39,560 --> 00:10:40,720
Very quiet.

194
00:10:40,720 --> 00:10:42,040
Hmm.

195
00:10:42,040 --> 00:10:42,880
Good!

196
00:10:42,880 --> 00:10:45,400
Fantastic, this is what I like.

197
00:10:45,400 --> 00:10:49,440
So I just want to find out a little bit about you folks first.

198
00:10:49,440 --> 00:10:51,680
How many of you have used PyScript already?

199
00:10:56,080 --> 00:10:58,600
Wow, so you're all PyScript beginners.

200
00:10:58,600 --> 00:11:00,840
All right, OK, this is good.

201
00:11:00,840 --> 00:11:07,360
So my task is to help you create an app.

202
00:11:07,360 --> 00:11:10,040
And I'm going to do that in about 20 minutes.

203
00:11:10,040 --> 00:11:13,320
And everything that I show you is

204
00:11:13,320 --> 00:11:15,600
going to be a high level view.

205
00:11:15,600 --> 00:11:18,800
But what we'll do is cover most of the core concepts

206
00:11:18,800 --> 00:11:21,960
that you need to know about PyScript.

207
00:11:21,960 --> 00:11:25,680
And then my glamorous assistants over there

208
00:11:25,680 --> 00:11:31,120
will go into a lot more detail about the various core concepts

209
00:11:31,120 --> 00:11:35,880
that I will have introduced in this very simple introduction.

210
00:11:35,880 --> 00:11:44,280
So you should all have, I hope, an account on pyscript.com.

211
00:11:44,280 --> 00:11:47,360
So what I'm going to do is put my glasses on

212
00:11:47,360 --> 00:11:49,720
so I can see what I'm doing.

213
00:11:49,720 --> 00:11:53,800
And you are welcome to code along.

214
00:11:53,800 --> 00:11:54,720
I like it.

215
00:11:54,720 --> 00:11:57,600
I used to be a school teacher.

216
00:11:57,600 --> 00:12:00,200
And so I really love it when people interrupt me

217
00:12:00,200 --> 00:12:03,320
and ask me questions.

218
00:12:03,320 --> 00:12:05,760
So please do that.

219
00:12:05,800 --> 00:12:10,840
So without further ado, if we go to pyscript.com.

220
00:12:10,840 --> 00:12:11,840
Yeah?

221
00:12:11,840 --> 00:12:14,800
Why is there a page that says, can the page get that net?

222
00:12:14,800 --> 00:12:16,480
OK, that's a very good question.

223
00:12:16,480 --> 00:12:20,120
So pyscript.net is where we have all our documentation

224
00:12:20,120 --> 00:12:23,080
and things pertaining to the open source project.

225
00:12:23,080 --> 00:12:25,480
PyScript is an open source project.

226
00:12:25,480 --> 00:12:28,080
So you're all free to contribute to PyScript.

227
00:12:28,080 --> 00:12:30,120
In fact, we hope you do as well.

228
00:12:30,120 --> 00:12:34,520
Pyscript.com is something that Anaconda,

229
00:12:34,560 --> 00:12:39,200
who support the PyScript development, have made.

230
00:12:39,200 --> 00:12:42,200
And while you're looking at it right now, OK,

231
00:12:42,200 --> 00:12:47,320
and one of the core sort of guiding principles of PyScript

232
00:12:47,320 --> 00:12:50,280
is that what we call it for the 99%.

233
00:12:50,280 --> 00:12:53,440
OK, we're trying to make coding accessible

234
00:12:53,440 --> 00:12:54,880
and empowering for everybody.

235
00:12:54,880 --> 00:12:56,800
Python's a very good language for that.

236
00:12:56,800 --> 00:13:01,840
But something like pyscript.com and being able to run Python

237
00:13:01,840 --> 00:13:03,800
in your browser all of a sudden means

238
00:13:03,800 --> 00:13:07,120
that Python is absolutely everywhere that a browser is,

239
00:13:07,120 --> 00:13:09,880
which is pretty much the most ubiquitous computing platform

240
00:13:09,880 --> 00:13:11,560
on the planet.

241
00:13:11,560 --> 00:13:13,600
So that's what pyscript.com is.

242
00:13:13,600 --> 00:13:18,800
Pyscript.com is perhaps your IDE and deployment environment.

243
00:13:18,800 --> 00:13:20,720
You don't have to use pyscript.com,

244
00:13:20,720 --> 00:13:22,960
but it's the easiest thing for you to use,

245
00:13:22,960 --> 00:13:25,920
which is why we're using it here today.

246
00:13:25,920 --> 00:13:30,120
So what we're going to do is create a new project.

247
00:13:34,800 --> 00:13:37,040
And it always gives you a silly name.

248
00:13:37,040 --> 00:13:39,200
I quite like Holy Tooth.

249
00:13:39,200 --> 00:13:41,320
I've got a nice smile.

250
00:13:41,320 --> 00:13:43,560
And I'm going to just talk you through the geography

251
00:13:43,560 --> 00:13:44,680
of the project.

252
00:13:44,680 --> 00:13:49,640
So clearly, because we're on the web, we have an index.html.

253
00:13:49,640 --> 00:13:52,880
And so this is the thing that the browser will load first

254
00:13:52,880 --> 00:13:57,160
and define what you can look at.

255
00:13:57,160 --> 00:13:59,880
And within that, you can see in the head,

256
00:13:59,880 --> 00:14:03,200
we have things, for instance, like a link to a style sheet.

257
00:14:03,200 --> 00:14:07,840
And actually, most importantly, the link to pyscript itself.

258
00:14:07,840 --> 00:14:08,760
At the back, question.

259
00:14:08,760 --> 00:14:09,260
Yeah?

260
00:14:12,640 --> 00:14:13,240
Too tiny.

261
00:14:13,240 --> 00:14:17,320
Let me try and solve that for you.

262
00:14:17,320 --> 00:14:17,880
How's that?

263
00:14:21,280 --> 00:14:23,640
If I go too big, we're not going to see anything.

264
00:14:23,640 --> 00:14:25,720
So I'll keep it.

265
00:14:25,720 --> 00:14:26,440
Is that OK?

266
00:14:26,440 --> 00:14:27,320
OK.

267
00:14:27,320 --> 00:14:31,760
And then within the body, we have a reference

268
00:14:31,760 --> 00:14:35,360
via a pyconfig tag to a pyscript.toml.

269
00:14:35,360 --> 00:14:38,000
And then we have the pyscript tag that has a source set

270
00:14:38,000 --> 00:14:41,760
to main.py, which is where your code will live.

271
00:14:41,760 --> 00:14:46,280
So main.py is just a regular Python file.

272
00:14:46,280 --> 00:14:50,120
And then in pyscript.toml, there's not a lot.

273
00:14:50,120 --> 00:14:54,800
Pyscript.toml is where you configure your environment.

274
00:14:54,800 --> 00:14:59,920
So what I'm going to do is use a package

275
00:14:59,920 --> 00:15:10,440
that I enjoy using for teaching purposes called R.

276
00:15:10,440 --> 00:15:12,200
That's it.

277
00:15:12,200 --> 00:15:14,120
Can you work out what R does?

278
00:15:18,080 --> 00:15:19,200
Silence.

279
00:15:19,200 --> 00:15:21,520
It translates English into pirate.

280
00:15:21,520 --> 00:15:22,440
OK?

281
00:15:22,440 --> 00:15:24,160
Now, the first thing you need to know

282
00:15:24,160 --> 00:15:27,280
is that R is a package on PyPI.

283
00:15:27,280 --> 00:15:29,280
So pyscript will do all the legwork for you

284
00:15:29,280 --> 00:15:34,040
to make sure that it's done the equivalent of pip install R

285
00:15:34,040 --> 00:15:36,680
whenever your application runs.

286
00:15:36,680 --> 00:15:40,520
And that's really all I need for the time being.

287
00:15:40,520 --> 00:15:44,160
And then in main.py, we've got to print hello world.

288
00:15:44,160 --> 00:15:45,960
Like I said, the regular Python app.

289
00:15:45,960 --> 00:15:50,280
But I need to add something to my HTML.

290
00:15:50,280 --> 00:15:52,000
So we've got something to look at.

291
00:15:52,000 --> 00:15:58,280
So within the body, I'm going to just write some HTML.

292
00:15:58,320 --> 00:16:00,960
So I'm going to give it a title.

293
00:16:08,920 --> 00:16:09,640
There we go.

294
00:16:09,640 --> 00:16:16,160
And then I'm going to add a label for something

295
00:16:16,160 --> 00:16:18,080
that I'm going to call English, because that's

296
00:16:18,080 --> 00:16:19,960
going to be our input.

297
00:16:20,000 --> 00:16:30,240
And then translate English into pirate.

298
00:16:35,800 --> 00:16:38,000
And then what I want is an input.

299
00:16:41,320 --> 00:16:47,080
And the type of input I want is text.

300
00:16:47,120 --> 00:16:54,560
And then what I want is, let's see, a placeholder, perhaps.

301
00:16:57,800 --> 00:17:04,520
Equals type your English in here.

302
00:17:04,520 --> 00:17:06,160
Dot, dot, dot.

303
00:17:06,160 --> 00:17:07,440
OK.

304
00:17:07,440 --> 00:17:09,600
Close the input tag.

305
00:17:14,480 --> 00:17:16,880
Why is that not working?

306
00:17:16,880 --> 00:17:18,120
What have I done wrong?

307
00:17:25,120 --> 00:17:26,400
Well, that should work anyway.

308
00:17:30,240 --> 00:17:32,280
There we go.

309
00:17:32,280 --> 00:17:38,880
And then underneath the input, I need to perhaps put a button

310
00:17:38,880 --> 00:17:40,080
as well.

311
00:17:40,080 --> 00:17:46,960
So button, ID.

312
00:17:46,960 --> 00:17:49,000
We don't need an ID.

313
00:17:49,000 --> 00:17:53,280
But I'm going to say the label on the button

314
00:17:53,280 --> 00:17:55,000
is just translate.

315
00:17:55,000 --> 00:17:57,560
And then we want somewhere to put the output.

316
00:17:57,560 --> 00:17:58,920
So I'm just going to create a div.

317
00:17:58,920 --> 00:18:03,280
I'm going to give it an ID of output.

318
00:18:03,280 --> 00:18:05,440
And it's going to be an empty div.

319
00:18:05,440 --> 00:18:09,480
And if I click Run, let's just see.

320
00:18:09,480 --> 00:18:10,640
OK.

321
00:18:10,640 --> 00:18:11,920
There we go.

322
00:18:11,920 --> 00:18:14,280
So what we've got is the HTML display.

323
00:18:14,280 --> 00:18:17,840
And then we've run the Python file, which currently

324
00:18:17,840 --> 00:18:19,680
has print hello world in it, which is why

325
00:18:19,680 --> 00:18:21,120
you see the result of that.

326
00:18:21,120 --> 00:18:23,320
But the important thing that I want you to see

327
00:18:23,320 --> 00:18:25,680
is that there's a user interface that I've created using

328
00:18:25,680 --> 00:18:27,800
just plain old HTML.

329
00:18:27,800 --> 00:18:29,960
And it looks like it's worked.

330
00:18:29,960 --> 00:18:31,440
So I can type my English into here

331
00:18:31,440 --> 00:18:35,080
and go hello world, for instance.

332
00:18:35,080 --> 00:18:36,880
But nothing's going to work at the moment.

333
00:18:36,880 --> 00:18:41,160
So what I want to do is connect what's

334
00:18:41,160 --> 00:18:46,360
going on in my HTML, in the DOM, to the world of Python.

335
00:18:46,360 --> 00:18:51,840
And so first of all, I'm going to get rid of hello world here

336
00:18:51,840 --> 00:18:55,160
and do something Pythonic.

337
00:18:55,160 --> 00:18:58,560
So the first thing I need is clearly the R module

338
00:18:58,560 --> 00:19:00,800
to help me translate things.

339
00:19:00,800 --> 00:19:05,760
So I'm just going to import R. And then I'm

340
00:19:05,760 --> 00:19:07,240
going to define a function.

341
00:19:07,240 --> 00:19:11,000
Let's call it trans for translate.

342
00:19:15,680 --> 00:19:24,960
Now what I need is a reference to the input tag

343
00:19:24,960 --> 00:19:28,680
into which you type your English here.

344
00:19:28,680 --> 00:19:33,960
And if you remember, in input.html,

345
00:19:33,960 --> 00:19:35,840
I needed to give it an ID.

346
00:19:35,840 --> 00:19:37,200
That's what I needed to do.

347
00:19:37,200 --> 00:19:41,640
So let's give it an ID of English.

348
00:19:41,640 --> 00:19:42,160
There we go.

349
00:19:42,160 --> 00:19:49,200
So I could use the DOM ID to grab it from Python.

350
00:19:49,200 --> 00:19:52,640
So I've lost my mouse pointer.

351
00:19:52,640 --> 00:20:03,680
So the input text is going to be an element with the ID of English.

352
00:20:04,320 --> 00:20:06,520
Have you always noticed that whenever you're presenting

353
00:20:06,520 --> 00:20:08,680
and you try and type something, it never goes right?

354
00:20:08,680 --> 00:20:11,200
It's like playing the piano.

355
00:20:11,200 --> 00:20:14,640
And now I actually want to extract from that element

356
00:20:14,640 --> 00:20:17,640
the English text that you've created.

357
00:20:17,640 --> 00:20:20,440
So I'm going to call that English.

358
00:20:20,440 --> 00:20:25,720
And that's going to be input text.element.

359
00:20:25,720 --> 00:20:28,800
So I'm getting the HTML element from that.

360
00:20:28,800 --> 00:20:34,280
And then HTML elements that are input elements

361
00:20:34,280 --> 00:20:39,040
have a value attribute that gives you

362
00:20:39,040 --> 00:20:42,560
what's actually contained within the input as well.

363
00:20:42,560 --> 00:20:43,960
So I can do that.

364
00:20:43,960 --> 00:20:44,520
Dead easy.

365
00:20:46,920 --> 00:20:50,720
Now I need to then translate this.

366
00:20:50,720 --> 00:20:56,600
So what I need to do is create something called pirate.

367
00:20:56,600 --> 00:21:06,560
And that's going to be r.translateEnglish.

368
00:21:06,560 --> 00:21:10,120
And then I need to get a reference to that output div.

369
00:21:10,120 --> 00:21:12,360
If you remember, that's where I'm going to put the result.

370
00:21:12,360 --> 00:21:20,000
So output div is going to be another element whose ID was,

371
00:21:20,000 --> 00:21:20,840
I called it output.

372
00:21:20,840 --> 00:21:21,920
I seem to remember.

373
00:21:21,920 --> 00:21:22,440
Output.

374
00:21:22,440 --> 00:21:24,720
Let me just check that.

375
00:21:24,720 --> 00:21:26,840
Div is output.

376
00:21:26,840 --> 00:21:29,240
There we go.

377
00:21:29,240 --> 00:21:30,920
So I'm grabbing a reference to that.

378
00:21:30,920 --> 00:21:39,000
And then again, output div.element.

379
00:21:39,000 --> 00:21:42,080
Those of you who are web developers,

380
00:21:42,080 --> 00:21:50,040
this will be familiar, .innerText equals

381
00:21:50,040 --> 00:21:54,320
the translated pirate speak.

382
00:21:54,360 --> 00:21:56,680
So that's automatically been saved.

383
00:21:56,680 --> 00:22:01,080
And if I click Run, and I've sacrificed enough chickens

384
00:22:01,080 --> 00:22:05,400
to the demo god this morning, let's see if it works.

385
00:22:05,400 --> 00:22:10,360
So it won't work because do you know what I've done?

386
00:22:10,360 --> 00:22:11,920
I've forgotten to do something.

387
00:22:11,920 --> 00:22:15,840
Let's see if you can work out what it is.

388
00:22:15,840 --> 00:22:18,000
This is cool.

389
00:22:18,000 --> 00:22:19,000
Translate.

390
00:22:19,000 --> 00:22:19,880
Nothing happens.

391
00:22:19,880 --> 00:22:21,120
I click Translate.

392
00:22:21,120 --> 00:22:21,760
Nothing happens.

393
00:22:21,760 --> 00:22:25,600
That's because I've not connected the event in the DOM

394
00:22:25,600 --> 00:22:31,920
with the Python trans function.

395
00:22:31,920 --> 00:22:36,200
So back in index.html, I have my button.

396
00:22:36,200 --> 00:22:44,920
And I can say something like, here we go.

397
00:22:44,920 --> 00:22:46,720
Find my mouse.

398
00:22:46,760 --> 00:22:53,000
Py dash click equals trans.

399
00:22:53,000 --> 00:22:55,600
A call to trans.

400
00:22:55,600 --> 00:22:58,720
So I'm saying, when you get the click event,

401
00:22:58,720 --> 00:23:00,920
I want you to connect it to this piece of Python.

402
00:23:00,920 --> 00:23:04,120
That's a function called trans.

403
00:23:04,120 --> 00:23:06,240
So it's saved.

404
00:23:06,240 --> 00:23:07,440
Let's try running it again.

405
00:23:10,200 --> 00:23:12,360
Hello, PyCon.

406
00:23:12,360 --> 00:23:13,560
This is cool.

407
00:23:17,040 --> 00:23:18,320
Let's see.

408
00:23:18,320 --> 00:23:20,120
Does this work?

409
00:23:20,120 --> 00:23:22,280
Ah, ahoy, PyCon.

410
00:23:22,280 --> 00:23:23,960
I should do it in a pirate accent, shouldn't I?

411
00:23:23,960 --> 00:23:25,120
Ahoy, PyCon.

412
00:23:25,120 --> 00:23:26,960
This be cool, huh?

413
00:23:26,960 --> 00:23:28,480
So it's working.

414
00:23:28,480 --> 00:23:31,600
Now what you've found, what you see me do,

415
00:23:31,600 --> 00:23:38,640
is take things from the DOM, do stuff with it in Python,

416
00:23:38,640 --> 00:23:42,880
and put a result back into the DOM.

417
00:23:43,160 --> 00:23:47,400
It's taken me 10 minutes to do that.

418
00:23:47,400 --> 00:23:48,760
And I've been typing very slowly,

419
00:23:48,760 --> 00:23:50,080
because I'm presenting to you that,

420
00:23:50,080 --> 00:23:53,280
and I've got 11 fingers and so on.

421
00:23:53,280 --> 00:23:57,480
Is there any part of that that people would

422
00:23:57,480 --> 00:24:00,200
like to ask questions about?

423
00:24:00,200 --> 00:24:02,560
Anything that's not clear?

424
00:24:02,560 --> 00:24:04,120
What I want you to take away from this

425
00:24:04,120 --> 00:24:06,160
is that it's very simple and very quick to get

426
00:24:06,160 --> 00:24:08,480
a working app going.

427
00:24:08,480 --> 00:24:08,960
Yeah?

428
00:24:08,960 --> 00:24:12,520
Can you show the HTML, like, straight back?

429
00:24:12,520 --> 00:24:14,680
Ah, yeah, sorry.

430
00:24:14,680 --> 00:24:17,720
You mean widen that?

431
00:24:21,720 --> 00:24:22,200
Yeah?

432
00:24:22,200 --> 00:24:23,680
So it's not working.

433
00:24:23,680 --> 00:24:26,480
How do I find a debug console or something

434
00:24:26,480 --> 00:24:29,280
that will have to be in the middle?

435
00:24:29,280 --> 00:24:32,560
So for complicated reasons that I'd

436
00:24:32,560 --> 00:24:37,120
be happy to explain not up here, you

437
00:24:37,120 --> 00:24:40,080
can't just drop into PDB.

438
00:24:40,080 --> 00:24:44,600
So we're back to old school print stuff

439
00:24:44,600 --> 00:24:47,080
when you're in your Python code.

440
00:24:47,080 --> 00:24:52,960
Often what I do is I will right click view console

441
00:24:52,960 --> 00:24:57,440
in the browser and take a look and see what sort of log

442
00:24:57,440 --> 00:24:59,280
messages are coming out of PyScript,

443
00:24:59,280 --> 00:25:01,440
what JavaScript is telling me is going on.

444
00:25:01,440 --> 00:25:04,680
And usually with a combination of that and lots of print

445
00:25:04,680 --> 00:25:06,600
statements, I can figure out what's going on.

446
00:25:06,640 --> 00:25:10,640
Now, rest assured, we will have debugging.

447
00:25:10,640 --> 00:25:14,520
In fact, one of my colleagues, Antonio, he wrote PDB++.

448
00:25:14,520 --> 00:25:18,040
And he's desperate to be able to get this working with PyScript.

449
00:25:18,040 --> 00:25:20,360
But what we're doing is we're building up

450
00:25:20,360 --> 00:25:21,640
the layers of PyScript.

451
00:25:21,640 --> 00:25:24,000
We're starting to enable more and more features

452
00:25:24,000 --> 00:25:26,680
as we kind of resolve how you get

453
00:25:26,680 --> 00:25:29,800
a browser which is in a synchronous sort of world,

454
00:25:29,800 --> 00:25:32,600
working with Python, which is a synchronous sort of place

455
00:25:32,600 --> 00:25:33,240
to be.

456
00:25:33,240 --> 00:25:35,080
And we've got a good way forward,

457
00:25:35,240 --> 00:25:37,160
we're working on it, is what I'm saying.

458
00:25:37,160 --> 00:25:39,560
Okay, any more questions about what you've seen?

459
00:25:43,240 --> 00:25:45,480
No? Who's got it working?

460
00:25:48,000 --> 00:25:50,160
Most people, fantastic, great stuff.

461
00:25:50,160 --> 00:25:53,520
So if you haven't got it working and you'd like it working,

462
00:25:53,520 --> 00:25:55,200
this is where you kind of put your hand up and one

463
00:25:55,200 --> 00:25:58,120
of my glamorous assistants will come over and help you.

464
00:25:58,120 --> 00:26:00,000
So there's three there.

465
00:26:00,440 --> 00:26:08,240
And then because it's just simply a web app,

466
00:26:08,240 --> 00:26:13,120
if you click here, the three dots, and view the site,

467
00:26:13,120 --> 00:26:17,440
it'll take you, this is the URL that you can send your friends

468
00:26:17,440 --> 00:26:19,640
to get their pirate app.

469
00:26:19,640 --> 00:26:23,640
And I believe, Ted, am I right, the great big long UUIDs

470
00:26:23,640 --> 00:26:25,920
that we use in the URL here are going to be moving

471
00:26:25,920 --> 00:26:27,400
at some point?

472
00:26:27,400 --> 00:26:29,800
Oh, he's not listening.

473
00:26:29,880 --> 00:26:35,520
Okay, last but not least, I need the audio out.

474
00:26:35,520 --> 00:26:36,840
Here it is.

475
00:26:36,840 --> 00:26:38,160
No, it's not.

476
00:26:38,880 --> 00:26:40,480
Can't find the audio jack.

477
00:26:40,480 --> 00:26:42,080
Ah, there it is.

478
00:26:42,080 --> 00:26:43,400
Sorry.

479
00:26:43,760 --> 00:26:45,160
Okay.

480
00:26:59,160 --> 00:27:01,000
Can't find the audio jack.

481
00:27:01,000 --> 00:27:04,440
Oh, there it is.

482
00:27:04,440 --> 00:27:05,760
Sorry.

483
00:27:13,920 --> 00:27:19,320
Good to go?

484
00:27:19,320 --> 00:27:24,680
Okay, so Ted mentioned that PyScript has access

485
00:27:24,680 --> 00:27:29,720
to all the underlying web APIs as an audio object

486
00:27:29,720 --> 00:27:34,320
in the browser context.

487
00:27:34,320 --> 00:27:36,760
And so this is a little simple test app.

488
00:27:36,760 --> 00:27:38,040
You click the goose.

489
00:27:38,040 --> 00:27:42,240
And it honks at you.

490
00:27:42,280 --> 00:27:49,240
Okay, so I just wanted to let you see that PyScript has access

491
00:27:49,240 --> 00:27:53,680
to the whole of what the browser has to offer, okay?

492
00:27:53,680 --> 00:27:55,400
And my colleagues will show you how you do

493
00:27:55,400 --> 00:27:58,840
that when they get to the interop layer as well.

494
00:27:58,840 --> 00:28:02,720
Now, I'm conscious of the fact that I've been talking

495
00:28:02,720 --> 00:28:06,360
for about 20 minutes, which is my time up.

496
00:28:06,360 --> 00:28:09,040
And there's about five minutes for questions.

497
00:28:09,080 --> 00:28:13,160
So any questions about anything to do with what you've seen

498
00:28:13,160 --> 00:28:15,480
or PyScript in general?

499
00:28:15,480 --> 00:28:16,760
Yeah?

500
00:28:16,760 --> 00:28:18,560
That's a good question.

501
00:28:18,560 --> 00:28:34,520
So what you're doing is getting state out of the DOM rather

502
00:28:34,520 --> 00:28:36,520
than passing arguments in, right?

503
00:28:36,560 --> 00:28:40,720
So that's why it's been written in that sort of a way, really.

504
00:28:40,720 --> 00:28:46,440
It's just a case of that's just the context of where you're in.

505
00:28:46,440 --> 00:28:48,320
Any more questions?

506
00:28:48,320 --> 00:28:50,120
Yeah?

507
00:28:50,120 --> 00:28:52,120
Yeah.

508
00:29:02,120 --> 00:29:03,320
Yeah, element being one of them.

509
00:29:03,360 --> 00:29:11,000
Yeah, that allows you to get access to an element by ID in the DOM.

510
00:29:11,000 --> 00:29:17,160
Yeah, what you can do is if I show you in the code here, you can.

511
00:29:17,160 --> 00:29:25,120
So you can import JS, okay?

512
00:29:25,120 --> 00:29:29,760
JS is global this in the browser.

513
00:29:29,760 --> 00:29:31,920
It's the window object, basically.

514
00:29:31,960 --> 00:29:41,920
So I could do something like JS.document.get element by ID.

515
00:29:41,920 --> 00:29:48,160
I'm using the underlying JavaScript API here and then English, et cetera.

516
00:29:48,160 --> 00:29:49,960
And, you know, do it that way.

517
00:29:49,960 --> 00:29:53,720
But we've built, started to build kind of convenience for you

518
00:29:53,720 --> 00:29:57,640
so you can very quickly and hopefully Pythonically get to the things

519
00:29:57,640 --> 00:30:01,440
that you want to build the stuff that you want.

520
00:30:01,480 --> 00:30:03,480
Yeah?

521
00:30:05,480 --> 00:30:07,480
Yeah.

522
00:30:10,320 --> 00:30:12,320
Yeah.

523
00:30:12,320 --> 00:30:14,520
Browser, you know, we've got a discussion forum.

524
00:30:14,520 --> 00:30:16,640
We're an open source project.

525
00:30:16,640 --> 00:30:18,840
Yeah, yeah, well, you know, get involved.

526
00:30:18,840 --> 00:30:20,360
It's, that's what I'm saying.

527
00:30:20,360 --> 00:30:21,640
We're a friendly bunch as well.

528
00:30:21,640 --> 00:30:24,880
We welcome collaboration and things.

529
00:30:24,880 --> 00:30:27,400
Oh, yeah.

530
00:30:27,400 --> 00:30:28,680
Okay.

531
00:30:29,640 --> 00:30:31,640
Yes, explicit is better than implicit.

532
00:30:31,640 --> 00:30:35,360
In fact, the next release we're doing exactly what you mentioned.

533
00:30:35,360 --> 00:30:38,960
The current, that was the initial behavior.

534
00:30:38,960 --> 00:30:41,520
This last release we had the deprecation warnings

535
00:30:41,520 --> 00:30:44,760
for a bunch of the global stuff.

536
00:30:44,760 --> 00:30:50,240
And from the next release, in theory, what you should have import

537
00:30:50,240 --> 00:30:55,480
in the globals is just basically display, which is a new keyword

538
00:30:55,520 --> 00:30:59,000
that we have to disambiguate between print and displaying on the DOM.

539
00:30:59,000 --> 00:31:01,160
But everything else should be important explicitly.

540
00:31:01,160 --> 00:31:02,680
So, yeah.

541
00:31:02,680 --> 00:31:03,960
Cool.

542
00:31:03,960 --> 00:31:05,960
Yeah?

543
00:31:18,120 --> 00:31:20,120
Yeah.

544
00:31:21,200 --> 00:31:23,200
And you're using PyScript.com?

545
00:31:23,280 --> 00:31:25,080
Right.

546
00:31:25,080 --> 00:31:26,600
I'm not sure.

547
00:31:26,600 --> 00:31:27,920
I'm not sure.

548
00:31:27,920 --> 00:31:30,680
If you've encountered problems or your code still isn't working

549
00:31:30,680 --> 00:31:32,680
and we're going to be having a break soon, I believe.

550
00:31:32,680 --> 00:31:34,200
Ted, is that right?

551
00:31:34,200 --> 00:31:36,600
Yes, a break soon.

552
00:31:36,600 --> 00:31:38,680
Come tap me on the shoulder and I'll try and help.

553
00:31:38,680 --> 00:31:40,680
Okay. One last question.

554
00:31:40,680 --> 00:31:42,680
It's all right?

555
00:31:56,120 --> 00:31:58,120
And yeah, okay.

556
00:31:58,120 --> 00:31:59,880
I hope we've got it working.

557
00:31:59,880 --> 00:32:04,840
And so, after the break, we'll be getting into more detail

558
00:32:04,880 --> 00:32:11,600
about things such as what on earth is going on in PyScript.toml,

559
00:32:11,600 --> 00:32:15,080
which is how you configure your environment, okay?

560
00:32:15,080 --> 00:32:18,720
How you react to events in the DOM.

561
00:32:18,720 --> 00:32:24,760
Other stuff that's available to you in PyScript as well.

562
00:32:24,760 --> 00:32:30,240
And with that, I'm going to call it a break, okay?

563
00:32:30,240 --> 00:32:33,400
If you need me to look at some code because it's not working,

564
00:32:33,440 --> 00:32:35,760
I can see there's at least one person to do that.

565
00:32:35,760 --> 00:32:38,280
Just put your hand up and I'll come and, yeah, okay.

566
00:32:38,280 --> 00:32:40,440
Fabi, if you go to that one, I'll go to this one.

567
00:32:40,440 --> 00:32:44,320
Okay. So, we're back in 15 minutes, okay?

568
00:32:44,320 --> 00:32:46,200
It is top of the hour.

569
00:32:46,200 --> 00:32:48,920
So, if we come back at quarter past.

570
00:32:48,920 --> 00:32:54,840
.com account and allow you to copy everything of a fully working app.

571
00:32:54,840 --> 00:32:57,800
So, I think we should share more of these.

572
00:32:57,800 --> 00:33:01,200
But essentially, we ran into three issues

573
00:33:01,240 --> 00:33:06,160
where we were seeing latency saving on the server side.

574
00:33:06,160 --> 00:33:10,320
And what you were seeing in the browser was not saved to the server.

575
00:33:10,320 --> 00:33:12,320
I think we had one here.

576
00:33:12,320 --> 00:33:15,880
I ran into it twice occasionally.

577
00:33:15,880 --> 00:33:18,120
Yeah. So, my apologies for that.

578
00:33:18,120 --> 00:33:22,920
It's a detail on the autosave feature that it's saving as you're typing

579
00:33:22,920 --> 00:33:25,160
and it's not completing back.

580
00:33:25,160 --> 00:33:28,560
And honestly, I'll take it and file a bug now.

581
00:33:28,560 --> 00:33:29,960
Yeah.

582
00:33:30,000 --> 00:33:32,560
So, one of the common things that I found whilst talking

583
00:33:32,560 --> 00:33:34,840
to you folks whilst wandering around is

584
00:33:34,840 --> 00:33:38,440
that I was always making the point

585
00:33:38,440 --> 00:33:40,840
that PyScript is a young project.

586
00:33:40,840 --> 00:33:42,400
It's only a year old.

587
00:33:42,400 --> 00:33:45,320
And so, it's a work in progress.

588
00:33:45,320 --> 00:33:47,320
It's lots of features.

589
00:33:47,320 --> 00:33:50,000
You can already do amazing things with it.

590
00:33:50,000 --> 00:33:53,720
But it's an exciting time to get involved with PyScript as well.

591
00:33:53,720 --> 00:33:59,120
If you want to make it work this way or you want a feature, come and contribute.

592
00:33:59,160 --> 00:34:02,960
That's what I wanted to say.

593
00:34:02,960 --> 00:34:06,800
So, what you'll see with this URL, if you open it up,

594
00:34:06,800 --> 00:34:11,160
it'll open up the code for it, run it.

595
00:34:11,160 --> 00:34:13,320
But you have this copy project button.

596
00:34:13,320 --> 00:34:17,160
So, you can actually copy the entire tree, the entire folder

597
00:34:17,160 --> 00:34:19,080
from the server side to your account.

598
00:34:19,080 --> 00:34:23,640
And then it'll basically, it's a perfect translation of what's there.

599
00:34:23,640 --> 00:34:34,040
Okay. Well, in this section, we are going to talk

600
00:34:34,040 --> 00:34:40,160
about this file here called pyscript.toml, right?

601
00:34:40,160 --> 00:34:42,880
Let me zoom into it.

602
00:34:42,880 --> 00:34:45,360
So, what does this tommel file do?

603
00:34:45,360 --> 00:34:48,240
And why is it important?

604
00:34:48,240 --> 00:34:52,480
So, it's a way to, you know, specify our configuration

605
00:34:52,520 --> 00:34:55,880
for our PyScript application.

606
00:34:55,880 --> 00:34:59,760
The tommel file is actually used inside a PyConfig tag.

607
00:34:59,760 --> 00:35:04,160
It's a way to specify your metadata and dependencies.

608
00:35:04,160 --> 00:35:08,960
Although by default, we recommend using tommel, but you can use JSON as well.

609
00:35:08,960 --> 00:35:14,160
And as Nick showed in this previous example, you place this PyConfig tag

610
00:35:14,160 --> 00:35:17,960
in the body element as per the web standards.

611
00:35:18,000 --> 00:35:23,760
So, you can supply an inline configuration or via an external file.

612
00:35:23,760 --> 00:35:27,640
In the previous application, you saw it being supplied via an external file

613
00:35:27,640 --> 00:35:31,360
because that was a file called pyscript.toml, which was a source

614
00:35:31,360 --> 00:35:34,720
for the PyConfig tag, right?

615
00:35:34,720 --> 00:35:37,120
And you can do both as well.

616
00:35:37,120 --> 00:35:39,000
I'll come to it later.

617
00:35:39,000 --> 00:35:42,320
So, the only attributes that we have for this tag are type and source.

618
00:35:42,320 --> 00:35:47,400
The type is if you're using tommel or if you're using JSON, by default, it's tommel.

619
00:35:47,560 --> 00:35:50,680
We won't go into JSON for this particular tutorial,

620
00:35:50,680 --> 00:35:55,880
but it's a one-to-one correspondence, so that should be easy.

621
00:35:55,880 --> 00:35:59,080
And source as you saw in the previous application.

622
00:35:59,080 --> 00:36:01,960
So, by an external config, this is what I mean.

623
00:36:01,960 --> 00:36:07,560
So, you have a PyConfig tag, you have a source, which points to a particular file.

624
00:36:07,560 --> 00:36:10,160
This is what you saw in the previous application.

625
00:36:10,160 --> 00:36:16,160
And then, oops, this is actually inline, not external.

626
00:36:18,160 --> 00:36:21,120
So, your external configuration is specified like this.

627
00:36:21,120 --> 00:36:22,560
We are the source attribute.

628
00:36:22,560 --> 00:36:25,640
And your inline configuration is what you write,

629
00:36:25,640 --> 00:36:29,320
basically the inner text of your PyConfig element.

630
00:36:29,320 --> 00:36:33,800
We have several configuration options here, such as splash screen,

631
00:36:33,800 --> 00:36:36,040
the interpreter that you want to supply.

632
00:36:36,040 --> 00:36:37,280
There's a whole set of keys.

633
00:36:37,280 --> 00:36:42,360
We'll come to it later, but we'll only discuss the most important ones.

634
00:36:42,360 --> 00:36:45,200
So, like I said, you could supply both.

635
00:36:45,680 --> 00:36:50,240
For example, here, you have a configuration which is also inline,

636
00:36:50,240 --> 00:36:52,800
and you also have a source attribute, so using both of them.

637
00:36:52,800 --> 00:36:55,200
Now, what is the use case?

638
00:36:55,200 --> 00:36:58,840
So, you could imagine a common configuration, which is shared

639
00:36:58,840 --> 00:37:03,640
by many applications, which can be supplied via your source attribute.

640
00:37:03,640 --> 00:37:09,080
But some specific keys could be overridden on a per project basis, right?

641
00:37:09,080 --> 00:37:12,200
And so, this is how it is useful.

642
00:37:12,240 --> 00:37:16,800
So, if your custom has, let's say, A equals B, and that is required

643
00:37:16,800 --> 00:37:20,360
by all of your projects, and you have C equals G as well,

644
00:37:20,360 --> 00:37:23,280
but for your particular project, you want to change the value of C.

645
00:37:23,280 --> 00:37:25,800
So, then you supply C again in your inline,

646
00:37:25,800 --> 00:37:33,480
and that will override what you supplied via the external one, right?

647
00:37:33,480 --> 00:37:37,040
Now, you can also specify which interpreters to use.

648
00:37:37,040 --> 00:37:39,200
By default, it's pyodide.

649
00:37:39,240 --> 00:37:45,360
And as you can see, if you open a default project on ByScript.com,

650
00:37:45,360 --> 00:37:49,120
it won't have the interpreter key because we do it for you.

651
00:37:49,120 --> 00:37:50,840
So, by default, it's specified as pyodide.

652
00:37:50,840 --> 00:37:53,080
It dynamically fetches pyodide.

653
00:37:53,080 --> 00:37:58,520
And to specify interpreters, you have three keys, the source,

654
00:37:58,520 --> 00:37:59,680
which is of course required.

655
00:37:59,680 --> 00:38:03,760
The other is this metadata, one name and language.

656
00:38:03,760 --> 00:38:07,080
An example of how this was done is here, right?

657
00:38:07,120 --> 00:38:12,040
So, source is where to get pyodide from, and the name and the language.

658
00:38:13,840 --> 00:38:16,240
Now, we can also specify packages.

659
00:38:16,240 --> 00:38:20,960
So, in the previous example, you saw the R library, right?

660
00:38:20,960 --> 00:38:25,760
So, for specifying packages, you can either have a direct link

661
00:38:25,760 --> 00:38:26,880
to the package URL.

662
00:38:26,880 --> 00:38:29,680
So, this could be, for example, if you have a custom package,

663
00:38:29,680 --> 00:38:32,320
which you have custom wheel for, right?

664
00:38:32,360 --> 00:38:39,040
And these files actually need to be hosted in a web server.

665
00:38:39,040 --> 00:38:42,240
Otherwise, they won't be able to get discovered, right?

666
00:38:42,240 --> 00:38:46,920
And also, you can specify some package names and versions.

667
00:38:46,920 --> 00:38:48,960
And now, where does it come from?

668
00:38:48,960 --> 00:38:52,560
So, some packages come with your interpreter of choice.

669
00:38:52,560 --> 00:38:55,600
For example, for pyodide, if you visit this link,

670
00:38:55,600 --> 00:39:00,520
they have this whole set of supported packages with their specific versions.

671
00:39:00,560 --> 00:39:03,640
So, these are automatically supported, right?

672
00:39:03,640 --> 00:39:09,200
Now, if you'll notice, the R library, the pyodide library,

673
00:39:09,200 --> 00:39:11,040
is not mentioned here, right?

674
00:39:11,040 --> 00:39:16,240
That's because even pure Python packages, which are not listed

675
00:39:16,240 --> 00:39:19,680
in this pyodide list, right?

676
00:39:19,680 --> 00:39:23,000
They are automatically fetched from PyPI if they're hosted there,

677
00:39:23,000 --> 00:39:24,080
and they'll also work.

678
00:39:24,080 --> 00:39:27,960
But then, the key needs to be here that it needs to be a pure Python package.

679
00:39:28,000 --> 00:39:29,560
So, it cannot have C extensions.

680
00:39:29,560 --> 00:39:31,920
Otherwise, it will need patches and stuff.

681
00:39:31,920 --> 00:39:34,680
So, NumPy is one which has C extensions.

682
00:39:34,680 --> 00:39:38,080
So, that's why it needs specific patches to work within Pyodide,

683
00:39:38,080 --> 00:39:41,520
and that's why it's a part of Pyodide's offering, right?

684
00:39:41,520 --> 00:39:47,040
So, the way to do it for a particular wheel is something like this,

685
00:39:47,040 --> 00:39:50,760
where you specify the path where your wheel is present.

686
00:39:50,760 --> 00:39:56,480
And you can also specify a particular version, for example, 0.14.1 for panel,

687
00:39:56,480 --> 00:39:56,980
right?

688
00:39:58,480 --> 00:40:02,440
Another use case is local modules.

689
00:40:02,440 --> 00:40:08,760
The thing is, you cannot have, I mean, imagining everything,

690
00:40:08,760 --> 00:40:12,080
all of your Python application code written inside the PyScript tag,

691
00:40:12,080 --> 00:40:13,120
it's a lot.

692
00:40:13,120 --> 00:40:17,640
So, you can, of course, modularize your code, right?

693
00:40:17,640 --> 00:40:21,920
So, let's say you have this file called data.py, and it has a simple function

694
00:40:21,920 --> 00:40:25,960
which generates two random numbers, x and y, right?

695
00:40:25,960 --> 00:40:31,680
And within your PyConfig, we have packages for NumPy and Matplotlib.

696
00:40:31,680 --> 00:40:33,400
And there's this key called fetch.

697
00:40:33,400 --> 00:40:36,080
I'll come to it in more detail later.

698
00:40:36,080 --> 00:40:39,400
In fact, it is the longest section because it takes a while.

699
00:40:39,400 --> 00:40:44,600
But now, we are fetching this file called data.py, which we created here, right?

700
00:40:44,600 --> 00:40:48,960
And this, of course, also is hosted on your web server, right?

701
00:40:48,960 --> 00:40:53,560
And the code that you have written here inside these PyScript tags is,

702
00:40:53,600 --> 00:40:56,760
as you can see, from data, import make x and y.

703
00:40:56,760 --> 00:41:00,960
So, you're importing this function which was written in data.py, right?

704
00:41:00,960 --> 00:41:07,680
So, you can use local modules, and it is one of the use cases of fetch function.

705
00:41:07,680 --> 00:41:10,800
And we have a dedicated deal section for it later.

706
00:41:10,800 --> 00:41:15,080
And it is useful in organizing your app into different files and modules,

707
00:41:15,080 --> 00:41:16,680
so you can import them later, right?

708
00:41:18,680 --> 00:41:20,600
So, now comes fetch.

709
00:41:20,600 --> 00:41:25,000
Well, this configuration key is used for

710
00:41:25,000 --> 00:41:28,680
downloading stuff from the internet or our hosted web server.

711
00:41:28,680 --> 00:41:31,240
And now, where is the stuff saved?

712
00:41:31,240 --> 00:41:35,960
So, for example, where is this data.py that you downloaded saved?

713
00:41:35,960 --> 00:41:39,000
So, the thing is, even if it's hosted on your web server or

714
00:41:39,000 --> 00:41:42,920
if it's present on the internet, the files are fetched into and

715
00:41:42,920 --> 00:41:46,000
saved into this sandbox environment of the browser.

716
00:41:46,000 --> 00:41:48,520
And we refer to it, the technical term for

717
00:41:48,520 --> 00:41:54,040
it would be mscripten's virtual file system, as you can see here.

718
00:41:54,040 --> 00:41:55,560
Not going into too much details, but

719
00:41:55,560 --> 00:41:59,160
in scripten is the tool chain which made PyRDiTE possible

720
00:41:59,160 --> 00:42:04,480
by compiling the CPython interpreter into WebAssembly, right?

721
00:42:04,480 --> 00:42:08,800
So, now we have four keys corresponding to this fetch section.

722
00:42:08,800 --> 00:42:12,480
And as you can see, we use the files key here, right?

723
00:42:12,480 --> 00:42:14,920
So, we have the from key, we have the two folder key,

724
00:42:14,920 --> 00:42:16,960
we have two file, and we have files.

725
00:42:16,960 --> 00:42:19,360
And two file and files are keys which, I mean,

726
00:42:19,360 --> 00:42:24,320
shouldn't be supplied together, otherwise you're gonna get an error.

727
00:42:24,320 --> 00:42:27,680
These four keys, basically the permutation and

728
00:42:27,680 --> 00:42:29,600
combination of how we use them.

729
00:42:29,600 --> 00:42:32,800
It's a simple and powerful mechanism for a wide variety of users.

730
00:42:32,800 --> 00:42:35,400
So, let's say you want to rename files, you have to preserve directory

731
00:42:35,400 --> 00:42:40,080
structures, and you can, of course, have multiple of these fetch configurations.

732
00:42:40,080 --> 00:42:41,760
So, this is just one configuration of fetch,

733
00:42:41,760 --> 00:42:42,800
you can have multiple of them.

734
00:42:43,760 --> 00:42:49,600
By the way, this double bracket fetch denotes an array of dictionaries in

735
00:42:49,600 --> 00:42:53,760
Tormel, so that's why this is the first element within that array.

736
00:42:53,760 --> 00:42:57,320
So, you could have one more or more, right?

737
00:42:57,320 --> 00:43:00,000
Quickly going over these four keys, from is nothing but

738
00:43:00,000 --> 00:43:01,800
the base URL of the resource to be fetched.

739
00:43:01,800 --> 00:43:07,000
Two folder is the name of the target folder in your virtual file system

740
00:43:07,000 --> 00:43:08,320
within the browser.

741
00:43:08,320 --> 00:43:10,120
If you have multiple files, you use files.

742
00:43:10,240 --> 00:43:13,400
If you have a single file, you use two file, or if you want to rename stuff.

743
00:43:15,400 --> 00:43:20,240
So, this is basically the algorithm.

744
00:43:20,240 --> 00:43:24,000
I'll share the link to the slides, you can read it.

745
00:43:24,000 --> 00:43:30,120
Basically, source URL is, I mean, for each file and files, this files array,

746
00:43:30,120 --> 00:43:34,120
your source URL is from plus file, and your destination is two folder plus file.

747
00:43:34,120 --> 00:43:37,680
And you download the object from source URL to destination, right?

748
00:43:37,680 --> 00:43:44,720
And there's this blog by Jeff, it covers various use cases of it.

749
00:43:44,720 --> 00:43:46,880
But let's go over some examples.

750
00:43:46,880 --> 00:43:51,640
So, in our examples, we'll assume that we have this following directory structure.

751
00:43:51,640 --> 00:43:56,920
So, we have our index.html file, and this contains the PyConfig tag.

752
00:43:56,920 --> 00:44:00,040
You have an info.txt, you have a data folder, you have sensordata.csv,

753
00:44:00,040 --> 00:44:04,960
you have packages, my package, the init, hello world folder,

754
00:44:04,960 --> 00:44:07,840
hello world subpackage, let's say, init, and greetings.

755
00:44:07,840 --> 00:44:10,800
So, if you want to fetch a single file, you would do, you know,

756
00:44:10,800 --> 00:44:14,600
you could supply info.txt as a single element in the files array.

757
00:44:14,600 --> 00:44:20,000
And then you can access it via in the PyScript code using this.

758
00:44:20,000 --> 00:44:24,000
So, this is no renaming, no directories, just fetch a single file, right?

759
00:44:25,560 --> 00:44:28,640
Let's say if you want to rename, you could use from, and

760
00:44:28,640 --> 00:44:32,960
then you could use to file, and now you can use it here.

761
00:44:32,960 --> 00:44:36,800
Like this, with the new name, right?

762
00:44:36,800 --> 00:44:42,080
Again, with the following directory structure, if you want to save it via,

763
00:44:42,080 --> 00:44:46,680
if you want to save this info.txt inside info files, loaded info,

764
00:44:46,680 --> 00:44:51,920
whatever the directory structure might be, so then you can open it like this, right?

765
00:44:53,120 --> 00:44:57,360
So, now again, the next example is we are saving the single file to

766
00:44:57,360 --> 00:44:59,120
another directory with renaming.

767
00:44:59,120 --> 00:45:00,760
So, these are some examples.

768
00:45:00,840 --> 00:45:05,840
Again, you fetch this single file, you have this way to save it, and

769
00:45:05,840 --> 00:45:08,880
what is the new name, and you can access it here like this.

770
00:45:11,000 --> 00:45:14,960
And here it's single file from a folder to the current working directory.

771
00:45:14,960 --> 00:45:18,120
So, if you see here, we have sensor data.csv inside data.

772
00:45:18,120 --> 00:45:23,280
So, the from prefix is data, and you have the following file, and

773
00:45:23,280 --> 00:45:25,520
then you access it via the current directory.

774
00:45:25,520 --> 00:45:28,800
That's because you didn't specify to folder, so

775
00:45:28,840 --> 00:45:32,080
by default it's the current directory, the two folder key.

776
00:45:33,680 --> 00:45:35,840
This is single file from a folder to another folder,

777
00:45:35,840 --> 00:45:37,160
which is not the current directory.

778
00:45:37,160 --> 00:45:40,840
So, the only difference is you specify the two folder key here, right?

779
00:45:40,840 --> 00:45:42,320
And now you can access it like this.

780
00:45:44,240 --> 00:45:47,360
You have multiple files preserving the directory structure.

781
00:45:47,360 --> 00:45:51,320
So, you have from, you have all the following files, and

782
00:45:51,320 --> 00:45:58,160
notice that you can have paths here, such as hello world, greetings, or py inside.

783
00:45:58,160 --> 00:46:03,440
So, this is gonna fetch everything inside this my package directory, right?

784
00:46:03,440 --> 00:46:04,760
And now since these are packages,

785
00:46:04,760 --> 00:46:07,840
because you have these init files, init.py files, so

786
00:46:07,840 --> 00:46:09,400
now you can import it as a package.

787
00:46:09,400 --> 00:46:14,280
So, from custom package, .hello world, .greetings, import, whatever, say hi.

788
00:46:16,360 --> 00:46:20,520
Let's say you have an API which doesn't end in a file name, and

789
00:46:20,520 --> 00:46:23,200
this is an actual URL, you can visit it.

790
00:46:23,200 --> 00:46:25,440
This gives us a JSON.

791
00:46:25,440 --> 00:46:31,920
So, I'm saving it via catfact.json, and you can simply import it like this.

792
00:46:31,920 --> 00:46:33,520
So, there are a few more examples.

793
00:46:33,520 --> 00:46:38,840
I'll probably create a bit.ly link of this blog post,

794
00:46:38,840 --> 00:46:41,880
and this covers almost all the use cases.

795
00:46:43,520 --> 00:46:46,160
But you can have extra keys and values, that is,

796
00:46:46,160 --> 00:46:49,920
my data information can also be supplied in both inline config and

797
00:46:49,920 --> 00:46:51,840
config from external source.

798
00:46:51,840 --> 00:46:55,920
So, for example, you're supplying a custom key here, let's say magic,

799
00:46:55,920 --> 00:46:58,120
which is unicorn, whatever that means.

800
00:46:59,360 --> 00:47:04,160
But this is only for your pure, I mean, it's purely metadata, right?

801
00:47:04,160 --> 00:47:07,520
And there are a few more keys, but

802
00:47:07,520 --> 00:47:12,120
this is the whole reference and specification for this tag, right?

803
00:47:12,120 --> 00:47:17,920
And for example, let me show you one example of using it.

804
00:47:17,920 --> 00:47:23,360
So, here I have this file called HarrisConnorDetector.py, and

805
00:47:23,360 --> 00:47:26,560
it is using OpenCV, it is using NumPy, and

806
00:47:26,560 --> 00:47:30,040
it has these functions to do some image processing, right?

807
00:47:30,040 --> 00:47:33,760
And it's a pure Python file, there's nothing related to Pyrdide here.

808
00:47:33,760 --> 00:47:38,600
It also has a if name equals main, which won't be executed,

809
00:47:38,600 --> 00:47:40,520
because I'm not executing this file directory.

810
00:47:42,640 --> 00:47:45,800
But here we have another file called ImageUpload.py, and

811
00:47:45,800 --> 00:47:52,720
this performs some Fudu magic to let us upload a file, right?

812
00:47:52,720 --> 00:47:54,160
Here is our configuration.

813
00:47:54,160 --> 00:48:00,800
So I'm specifying the packages I need, I'm specifying which files I need to fetch.

814
00:48:00,800 --> 00:48:05,200
Now it knows where to fetch it, because it's in the same file system here, right?

815
00:48:06,440 --> 00:48:14,520
And my main.py is my logic to run the algorithm on the uploaded image.

816
00:48:14,520 --> 00:48:18,000
So converting it to the underlying NumPy representation and

817
00:48:18,000 --> 00:48:19,760
stuff, but not going into details.

818
00:48:21,040 --> 00:48:25,440
The app basically is load the configuration via the external

819
00:48:25,440 --> 00:48:28,000
normal file, which I showed, right?

820
00:48:28,000 --> 00:48:30,600
And have a tag for uploading the image.

821
00:48:32,440 --> 00:48:35,520
Run the script for the Fudu magic for

822
00:48:35,520 --> 00:48:40,000
letting us upload the image and running the algorithm.

823
00:48:40,000 --> 00:48:45,280
So let's choose, let me zoom out perhaps.

824
00:48:45,280 --> 00:48:51,200
So let's choose a file, let me choose this chess board.

825
00:48:51,200 --> 00:48:52,240
So nothing's happening.

826
00:48:52,240 --> 00:48:54,440
Now I'll press this button called Run Corner Detection.

827
00:48:55,760 --> 00:48:58,080
And yeah, let's wait.

828
00:48:58,080 --> 00:49:10,480
It takes time because.

829
00:49:10,480 --> 00:49:15,800
Yeah, so we have our output.

830
00:49:15,800 --> 00:49:20,240
And if you see, all the corners are highlighted by these red dots, right?

831
00:49:21,280 --> 00:49:25,520
So this is doing some live image processing in the browser,

832
00:49:25,520 --> 00:49:26,640
in the sandbox environment.

833
00:49:28,240 --> 00:49:34,200
And yeah, so this is the by config tag and it's very powerful.

834
00:49:34,200 --> 00:49:38,680
I recommend you to check the documentation here.

835
00:49:38,680 --> 00:49:40,800
And it has everything we talked about.

836
00:49:40,800 --> 00:49:41,320
Thank you.

837
00:49:43,680 --> 00:49:44,200
Any questions?

838
00:49:46,480 --> 00:49:47,280
Yeah.

839
00:49:47,280 --> 00:49:52,200
In the fetch examples you showed, an example of a custom package

840
00:49:52,200 --> 00:49:57,400
with multiple submodules, any of that hold,

841
00:49:57,400 --> 00:49:59,200
happens or if you have to specify?

842
00:49:59,200 --> 00:50:03,960
Currently you have to specify all files, yeah.

843
00:50:03,960 --> 00:50:04,480
Yeah.

844
00:50:04,480 --> 00:50:30,560
That's because I'm using this Harris Corner Detector as a module, right?

845
00:50:30,600 --> 00:50:34,040
In my main.py I'm importing stuff from here.

846
00:50:35,400 --> 00:50:36,400
So let me zoom in.

847
00:50:36,400 --> 00:50:40,560
So from Harris Corner Detector, I import stuff.

848
00:50:40,560 --> 00:50:43,040
So that is also going to be fetched.

849
00:50:43,040 --> 00:50:44,440
But then I'm running it directly.

850
00:50:46,600 --> 00:50:51,200
So in the index.html, this runs directly using PyScript source.

851
00:50:52,000 --> 00:50:54,320
So this is another way if you want to run things directly,

852
00:50:54,320 --> 00:50:56,320
then there's no point in fetching, right?

853
00:50:56,320 --> 00:51:00,160
You only want to fetch if you want to have, use local modules.

854
00:51:00,800 --> 00:51:03,600
So you couldn't put the Harris Corner Detector in between those two

855
00:51:03,600 --> 00:51:05,600
and not fetch, you can have multiple tools?

856
00:51:07,120 --> 00:51:09,600
Or not recognize it in the module itself?

857
00:51:12,680 --> 00:51:15,360
Yeah, but I think it could work.

858
00:51:16,760 --> 00:51:18,280
Yeah, but we haven't tried it.

859
00:51:18,280 --> 00:51:19,680
This is a cleaner and more.

860
00:51:24,040 --> 00:51:24,600
Yeah.

861
00:51:24,600 --> 00:51:28,840
Why don't you also have to, you know, get a local module?

862
00:51:28,840 --> 00:51:29,880
Sorry?

863
00:51:29,880 --> 00:51:31,600
Where did you upload?

864
00:51:31,600 --> 00:51:33,120
Where did I upload?

865
00:51:33,120 --> 00:51:34,120
Yeah.

866
00:51:34,120 --> 00:51:35,120
Well...

867
00:51:35,120 --> 00:51:36,120
Yeah, where?

868
00:51:36,960 --> 00:51:38,400
Upload to...

869
00:51:38,400 --> 00:51:39,520
There's no backend.

870
00:51:39,520 --> 00:51:40,520
Yeah, there's no backend.

871
00:51:40,520 --> 00:51:41,960
There's no backend, yeah.

872
00:51:41,960 --> 00:51:44,320
Upload to where?

873
00:51:44,320 --> 00:51:49,520
So it's basically, I mean, it's nothing but an image tag.

874
00:51:49,520 --> 00:51:53,680
It's inserted as an image tag using the base64 representation.

875
00:51:53,680 --> 00:51:57,520
When you upload something in PyScript,

876
00:51:57,560 --> 00:51:59,560
you're always using the...

877
00:51:59,560 --> 00:52:00,600
Virtual file system.

878
00:52:00,600 --> 00:52:01,600
The file system.

879
00:52:01,600 --> 00:52:05,520
So your browser has a full virtual file system that it writes to.

880
00:52:05,520 --> 00:52:06,520
Yeah, yeah.

881
00:52:08,520 --> 00:52:09,520
Yeah, yeah.

882
00:52:10,640 --> 00:52:12,120
You can perhaps share this link.

883
00:52:21,920 --> 00:52:22,920
Yeah, do you have the...

884
00:52:22,920 --> 00:52:24,480
You can do that later, but...

885
00:52:24,480 --> 00:52:26,320
Yeah, OK, I'm going to share it in a while.

886
00:52:26,400 --> 00:52:31,280
Yeah, but in general, whenever you upload something in your page,

887
00:52:31,280 --> 00:52:35,600
it uploads to your browser, even without PyScript or anything.

888
00:52:35,600 --> 00:52:40,920
It has the memory, the image or the file you have in memory.

889
00:52:40,920 --> 00:52:44,160
With PyScript, it writes in the virtual file system.

890
00:52:44,160 --> 00:52:46,480
If you have a server and you want to upload the image,

891
00:52:46,480 --> 00:52:51,480
first you click, load the image, and then upload, send to the server.

892
00:52:51,480 --> 00:52:54,800
In PyScript, you don't need to do that extra send to the server.

893
00:52:54,840 --> 00:52:57,200
It lives inside your file system.

894
00:52:57,200 --> 00:53:01,960
And whenever you do file open in Python,

895
00:53:01,960 --> 00:53:03,880
it's reading from that file system,

896
00:53:03,880 --> 00:53:09,440
not your local Mac or Windows or other operating systems.

897
00:53:09,440 --> 00:53:10,440
Does it make sense?

898
00:53:13,640 --> 00:53:14,640
Yeah.

899
00:53:15,680 --> 00:53:16,680
I think we have several...

900
00:53:19,520 --> 00:53:22,520
You don't have a code where you show the image or something.

901
00:53:23,520 --> 00:53:28,520
So this image upload thing, I mean, I can show the snippet, for example.

902
00:53:28,520 --> 00:53:31,520
We create a new image tag here, right?

903
00:53:31,520 --> 00:53:34,920
Or Ted is going to also go over it.

904
00:53:34,920 --> 00:53:37,920
I'm setting this image source as the base64 representation

905
00:53:37,920 --> 00:53:40,920
of this data that I get through our handler.

906
00:53:40,920 --> 00:53:42,920
So it's just an image tag which is being displayed.

907
00:53:47,920 --> 00:53:48,920
Yeah.

908
00:53:50,920 --> 00:53:51,920
Any more questions?

909
00:53:53,520 --> 00:53:54,520
Thank you.

910
00:53:56,520 --> 00:54:02,520
Well, what we set up, a couple of notes.

911
00:54:02,520 --> 00:54:06,520
On the packaging, when you're selling a package, as Madhur said,

912
00:54:06,520 --> 00:54:10,520
you can pass any URL that points to a package,

913
00:54:10,520 --> 00:54:13,520
and it will download and install it, et cetera.

914
00:54:13,520 --> 00:54:16,520
If you're specifying the names of the packages,

915
00:54:16,520 --> 00:54:19,520
it goes through Piodite internals,

916
00:54:19,520 --> 00:54:23,520
and Piodite has already a list of packages that they built.

917
00:54:23,520 --> 00:54:27,520
The good thing about it is that most of them are packages

918
00:54:27,520 --> 00:54:30,520
that have C dependencies, so they just don't work out of the box.

919
00:54:30,520 --> 00:54:34,520
You need to compile them for the Wasm platform.

920
00:54:34,520 --> 00:54:36,520
So those work fine.

921
00:54:36,520 --> 00:54:40,520
If you have any pure Python package that is not included in Piodite,

922
00:54:40,520 --> 00:54:43,520
it will also work fine.

923
00:54:43,520 --> 00:54:48,520
Basically, Piodite will go and fetch them from PyPI and install them,

924
00:54:48,520 --> 00:54:52,520
but if you have a need to run a package that has C dependencies

925
00:54:52,520 --> 00:54:59,520
and is not in Piodite, then you will have to compile it by yourself,

926
00:54:59,520 --> 00:55:01,520
if it makes sense.

927
00:55:04,520 --> 00:55:05,520
I'll put out a plug.

928
00:55:05,520 --> 00:55:08,520
The Piodite team has been doing some cool work on that build process.

929
00:55:08,520 --> 00:55:11,520
You can basically download the Piodite build tool.

930
00:55:11,520 --> 00:55:12,520
It's a lot like CMake.

931
00:55:12,520 --> 00:55:14,520
You're building for a new platform,

932
00:55:14,520 --> 00:55:17,520
and it works pretty well until it doesn't,

933
00:55:17,520 --> 00:55:20,520
because you're building for a whole new assembly environment.

934
00:55:20,520 --> 00:55:23,520
But if you have a package that you want to try and build for WebAssembly,

935
00:55:23,520 --> 00:55:24,520
I encourage you to just give it a try.

936
00:55:24,520 --> 00:55:26,520
A lot of them do just build.

937
00:55:26,520 --> 00:55:27,520
Question?

938
00:55:27,520 --> 00:55:30,520
Does that mean a package you end up having to provide

939
00:55:30,520 --> 00:55:32,520
and kind of back up the website?

940
00:55:32,520 --> 00:55:33,520
Exactly.

941
00:55:33,520 --> 00:55:35,520
You end up building a wheel file most of the time,

942
00:55:35,520 --> 00:55:38,520
and you just host that somewhere and point your PyConfig at that.

943
00:55:38,520 --> 00:55:42,520
So if the package actually builds a wheel on the website,

944
00:55:42,520 --> 00:55:44,520
and you install PyTI and NILS,

945
00:55:44,520 --> 00:55:46,520
you have C extension NILS,

946
00:55:46,520 --> 00:55:47,520
but they can run the same thing,

947
00:55:47,520 --> 00:55:48,520
which is work on a different one.

948
00:55:48,520 --> 00:55:49,520
Yeah.

949
00:55:49,520 --> 00:55:50,520
That's cool.

950
00:55:50,520 --> 00:55:51,520
It's pretty cool.

951
00:55:51,520 --> 00:55:52,520
Yeah, it's awesome.

952
00:55:52,520 --> 00:55:54,520
And the reason that Piodite has to host 100 and some odd packages

953
00:55:54,520 --> 00:55:57,520
is a lot of things like NumPy, especially SciPy and things

954
00:55:57,520 --> 00:55:59,520
that have C extensions that are harder to compile.

955
00:55:59,520 --> 00:56:02,520
They've done a lot of the hard work for us, right?

956
00:56:02,520 --> 00:56:05,520
But there are other libraries that might not be compiled yet.

957
00:56:05,520 --> 00:56:06,520
Yeah, was there a question back here?

958
00:56:06,520 --> 00:56:07,520
Yeah?

959
00:56:07,520 --> 00:56:10,520
When you compile your own package,

960
00:56:10,520 --> 00:56:15,520
does it have to be compatible with the version of Piodite or both?

961
00:56:16,520 --> 00:56:22,520
The short answer is yes, because versioning is tricky.

962
00:56:22,520 --> 00:56:26,520
I actually don't know if you build a version of a wheel yourself.

963
00:56:26,520 --> 00:56:28,520
I believe it is pinned to the specific version of Piodite

964
00:56:28,520 --> 00:56:29,520
that you build it for,

965
00:56:29,520 --> 00:56:34,520
because their API has been changing fairly quickly.

966
00:56:34,520 --> 00:56:35,520
But if it builds for one version,

967
00:56:35,520 --> 00:56:38,520
it will probably build for future versions, I would say.

968
00:56:38,520 --> 00:56:39,520
Yeah.

969
00:56:39,520 --> 00:56:43,520
This is a very new discussion and a lot is changing.

970
00:56:43,520 --> 00:56:48,520
Tomorrow we have the WebAssembly Summit to talk also about those things.

971
00:56:48,520 --> 00:56:54,520
What does it mean to have a Python package on Web and I2 versions?

972
00:56:54,520 --> 00:56:56,520
Also, there are different layers.

973
00:56:56,520 --> 00:56:59,520
Piodite relies on M scripting.

974
00:56:59,520 --> 00:57:02,520
There are other implementations like Wazii and stuff like that.

975
00:57:02,520 --> 00:57:04,520
Also, PyPA.

976
00:57:04,520 --> 00:57:07,520
Sorry, do you want to say something?

977
00:57:07,520 --> 00:57:12,520
No, I was going to say there are lots of talks about more Python about I2.

978
00:57:12,520 --> 00:57:18,520
So you can go to, say, Frantoneo to talk about the Wazim level.

979
00:57:18,520 --> 00:57:20,520
I might have to do the questions.

980
00:57:20,520 --> 00:57:24,520
There's one with an introduction about how I2 works together.

981
00:57:24,520 --> 00:57:29,520
There's a family of things about what's coming down the line.

982
00:57:29,520 --> 00:57:30,520
Yeah.

983
00:57:30,520 --> 00:57:31,520
Yeah.

984
00:57:31,520 --> 00:57:32,520
Awesome.

985
00:57:32,520 --> 00:57:33,520
All good questions.

986
00:57:33,520 --> 00:57:36,520
If you want to talk about anyone who thinks packaging is easy,

987
00:57:36,520 --> 00:57:39,520
should come and talk to Fabio who wants to talk about that.

988
00:57:39,520 --> 00:57:42,520
But no, good questions.

989
00:57:42,520 --> 00:57:44,520
I get to pick up some threads.

990
00:57:44,520 --> 00:57:48,520
Madura laid the foundation of how do you get packages into the browser,

991
00:57:48,520 --> 00:57:49,520
how do you get files into the browser.

992
00:57:49,520 --> 00:57:54,520
Now I get to build on that and pick apart some of the things that Nicholas said earlier in his demo app

993
00:57:54,520 --> 00:57:56,520
that are actually really cool.

994
00:57:56,520 --> 00:58:02,520
One of which is the Python and JavaScript interactivity that we get in the browser via the PiedEye runtime.

995
00:58:02,520 --> 00:58:05,520
It's actually coming to the MicroPython runtime very soon.

996
00:58:05,520 --> 00:58:10,520
Basically there is a working demo and the API is getting shushed now.

997
00:58:10,520 --> 00:58:14,520
One thing that Nicholas said earlier, or you had in your demo app was this line of Python code,

998
00:58:14,520 --> 00:58:18,520
input text equals element in quotations English, right?

999
00:58:18,520 --> 00:58:20,520
This was something we just had you type in.

1000
00:58:20,520 --> 00:58:24,520
He said it grabbed a reference to an element in the DOM, which is what it does.

1001
00:58:24,520 --> 00:58:28,520
It grabbed the contents of that input element that we typed into our HTML.

1002
00:58:28,520 --> 00:58:30,520
We use that to get the contents out.

1003
00:58:30,520 --> 00:58:37,520
This line is actually magic in a cool way because the element in the DOM is represented in JavaScript

1004
00:58:37,520 --> 00:58:39,520
and we're working with it in Python.

1005
00:58:39,520 --> 00:58:41,520
How the heck is that possible?

1006
00:58:41,520 --> 00:58:45,520
We get the ability to basically treat JavaScript objects like Python objects

1007
00:58:45,520 --> 00:58:49,520
and vice versa, we can treat Python objects like JavaScript objects.

1008
00:58:49,520 --> 00:58:51,520
And so that's what this first part is going to talk about.

1009
00:58:51,520 --> 00:58:55,520
Ted will get into this more in a little bit when we talk about the plethora of web APIs

1010
00:58:55,520 --> 00:59:00,520
that that gives us access to, all the things the browser can do in JavaScript we can now do in Python.

1011
00:59:00,520 --> 00:59:02,520
I'm going to show you the hammer.

1012
00:59:02,520 --> 00:59:08,520
Ted's going to show you the whole hardware store and lay a little base of how JS and Python interact in PyScript.

1013
00:59:08,520 --> 00:59:13,520
The short of it is in a PyScript code, or in anything that's running in the PyEyeEye runtime,

1014
00:59:13,520 --> 00:59:20,520
which is our primary runtime, import JS imports names from the JavaScript global namespace.

1015
00:59:20,520 --> 00:59:21,520
Now what does that mean?

1016
00:59:21,520 --> 00:59:24,520
I'm going to open up my developer console here in the browser.

1017
00:59:24,520 --> 00:59:27,520
If you haven't done this before, open up your dev tools, open up your console.

1018
00:59:27,520 --> 00:59:30,520
This is the equivalent of our Python repels just for your browser window.

1019
00:59:30,520 --> 00:59:36,520
And if I type in the name of the global object, which in the browser's case is a window, and hit enter,

1020
00:59:36,520 --> 00:59:37,520
you'll see something like this.

1021
00:59:37,520 --> 00:59:43,520
If I hit this little arrow, and don't mind if you can't read all this from the back, it's thousands of lines long.

1022
00:59:43,520 --> 00:59:48,520
This is all of the objects, the classes, the functions that are implemented by the browser

1023
00:59:48,520 --> 00:59:50,520
to let you do webish things, right?

1024
00:59:50,520 --> 00:59:55,520
Scroll to, these screen objects, set timeout for scheduling things in the future,

1025
00:59:55,520 --> 00:59:58,520
all kinds of webish things that exist in JavaScript.

1026
00:59:58,520 --> 01:00:05,520
When we use the import JS syntax, we are importing any object we want that exists in this namespace, right?

1027
01:00:05,520 --> 01:00:08,520
So we'll look at that in just a little more detail.

1028
01:00:08,520 --> 01:00:17,520
If you were to type into a PyScript tag this import JS, print dir, our familiar Python dir function of JS,

1029
01:00:17,520 --> 01:00:22,520
if you do, it will freeze your web page for a few seconds because it's loading those thousands of names.

1030
01:00:22,520 --> 01:00:29,520
But we basically get proxies to any of the objects that exist in the JavaScript global namespace in Python, right?

1031
01:00:29,520 --> 01:00:32,520
The power of that is that we can do things like this.

1032
01:00:32,520 --> 01:00:36,520
And feel free, I'm not doing this in PyScript.com just for text size, right, for those in the back.

1033
01:00:36,520 --> 01:00:41,520
If you type the HTML parts into your PyScript app and the Python parts into your Python app, it will work.

1034
01:00:41,520 --> 01:00:49,520
If you add to your Python a paragraph tag, a p tag with the ID of hello world and whatever contents you want, hello world seems right.

1035
01:00:49,520 --> 01:00:51,520
We had you earlier do something like this.

1036
01:00:51,520 --> 01:00:56,520
p equals element of the string hello world, print p.element.innerText.

1037
01:00:56,520 --> 01:01:00,520
You'll get out the inner text of that HTML element.

1038
01:01:00,520 --> 01:01:04,520
What's happening under the hood there, and I want to expose to you so we can go a little deeper,

1039
01:01:04,520 --> 01:01:08,520
is that the element object is essentially doing this under the hood.

1040
01:01:08,520 --> 01:01:13,520
From JS, import the document object, which is one of our common ways of grabbing elements of the DOM.

1041
01:01:13,520 --> 01:01:16,520
If you've worked in JavaScript, this will be quite familiar.

1042
01:01:16,520 --> 01:01:22,520
And we say that our p object is equal to document.getElementById and some ID that we specify.

1043
01:01:22,520 --> 01:01:27,520
So I grab the element in the DOM with the ID field of hello world.

1044
01:01:27,520 --> 01:01:30,520
I grab that and I put a Python reference to that object.

1045
01:01:30,520 --> 01:01:32,520
Then I can grab its inner text and print that out.

1046
01:01:32,520 --> 01:01:34,520
Either way, we get hello world, right?

1047
01:01:34,520 --> 01:01:40,520
Taking you inside our API a little bit, we say in Python element, in JavaScript you say document.getElementById.

1048
01:01:40,520 --> 01:01:42,520
Same thing, right?

1049
01:01:42,520 --> 01:01:46,520
So far so good? Questions there real quick?

1050
01:01:46,520 --> 01:01:48,520
Okay, let's dive a little deeper.

1051
01:01:48,520 --> 01:01:54,520
Once we have access to all of the parts of the DOM API, we can start to make use of it to do more powerful things.

1052
01:01:54,520 --> 01:02:00,520
If we were to add, say, a couple of paragraph tags to our index.html, hello world, happy PyCon,

1053
01:02:00,520 --> 01:02:10,520
we can use more advanced DOM features like querySelectorAll, which grabs all of the paragraph tags or all the tags that match this query in our web page.

1054
01:02:10,520 --> 01:02:20,520
Now this method, this JavaScript method, document.querySelectorAll, returns a JavaScript, I was going to say array, it's at least an iterable,

1055
01:02:20,520 --> 01:02:23,520
returns an iterable of the objects that we asked for, right?

1056
01:02:23,520 --> 01:02:30,520
But because we are able to proxy those objects into Python, I can use a normal Python for loop to just iterate over them.

1057
01:02:30,520 --> 01:02:35,520
I don't have to worry that they're JavaScript objects, I don't have to worry that they're, you know, I can treat them just like Python and iterate through them,

1058
01:02:35,520 --> 01:02:37,520
printElement.intertext.

1059
01:02:37,520 --> 01:02:43,520
And if you type this into your PyScript.com app, what you would get is the intertext of both tags, hello world, happy PyCon, right?

1060
01:02:43,520 --> 01:02:49,520
Starting to see how we can use the JavaScript methods to interact with the browser in the way that it is normally interacted with,

1061
01:02:49,520 --> 01:02:54,520
but we get to write Python code instead of having to learn another language like JavaScript.

1062
01:02:54,520 --> 01:02:59,520
We didn't pull the room, how many people would say they are like proficient in JavaScript in this room?

1063
01:02:59,520 --> 01:03:03,520
Okay, a handful, a handful and a handful of these, which is fair.

1064
01:03:03,520 --> 01:03:11,520
That's where I was when I came to PyScript as a developer, and I still wouldn't say I'm a JavaScript expert, but you don't really need to be, right?

1065
01:03:11,520 --> 01:03:17,520
You can read the JavaScript APIs, and that's what Ted is going to be getting into a little bit to let you do advanced things in the browser, yeah?

1066
01:03:17,520 --> 01:03:22,520
Let's do a couple more advanced examples, and then we'll talk about events.

1067
01:03:22,520 --> 01:03:27,520
A couple more little ones, importing a couple of other fun functions from the DOM like document or alert.

1068
01:03:27,520 --> 01:03:33,520
This is an example of using the Python function that should be callable, is callable is a holdover.

1069
01:03:33,520 --> 01:03:36,520
Callable is a Python function that tells you whether a thing is callable.

1070
01:03:36,520 --> 01:03:38,520
It knows that the JavaScript function alert is a function.

1071
01:03:38,520 --> 01:03:41,520
It knows the JavaScript object document is not a function, right?

1072
01:03:41,520 --> 01:03:46,520
So by and large, you really can treat JavaScript objects like Python objects, which is very cool.

1073
01:03:46,520 --> 01:03:51,520
Under the hood, what's happening is they are being proxied, right?

1074
01:03:51,520 --> 01:03:58,520
There's essentially a proxy layer that lives between Python and JavaScript that's handling the things that don't quite line up between the two languages.

1075
01:03:58,520 --> 01:04:06,520
I mention this mostly because if you see in your error messages something about a JS proxy, now you'll know what the heck is going on, right?

1076
01:04:06,520 --> 01:04:14,520
There is something, some object you have grabbed out of JavaScript that is behaving like a JavaScript object, and we're asking it to do a Pythonic thing that it is incompatible with.

1077
01:04:14,520 --> 01:04:21,520
A lot of those incompatibilities have been eliminated, but when you see JS proxy in your error messages, now you know what that's actually referring to.

1078
01:04:21,520 --> 01:04:27,520
A couple of advanced examples here, and then I'll share a couple links that you can pull up on pyscript.com and try for yourself.

1079
01:04:27,520 --> 01:04:36,520
Because we can import not just any object that already exists in any browser's global namespace, but any JavaScript objects that we put there,

1080
01:04:36,520 --> 01:04:43,520
we can do things like put any JavaScript front-end library into Python.

1081
01:04:43,520 --> 01:04:45,520
I'm going to pull this example up on pyscript.com, but it's very cool.

1082
01:04:45,520 --> 01:04:52,520
What's happening here, and again, don't bother to squint and read the text at the top of the page, I'm pulling in the XData spreadsheet package from NPM,

1083
01:04:52,520 --> 01:04:55,520
the Node Package Manager, which does JavaScript package distribution.

1084
01:04:55,520 --> 01:05:03,520
I'm just pulling that into my web page, and then I can just import it as a Python object, call its constructor, and start messing with it, right?

1085
01:05:03,520 --> 01:05:04,520
With no JavaScript involved.

1086
01:05:04,520 --> 01:05:11,520
That creates a using this JavaScript library that someone spent a lot of time on to make a spreadsheet work in the browser.

1087
01:05:11,520 --> 01:05:13,520
Now we get to interact with it in Python.

1088
01:05:13,520 --> 01:05:17,520
Let me pull that up here where I've hidden it.

1089
01:05:17,520 --> 01:05:21,520
Where are you?

1090
01:05:21,520 --> 01:05:23,520
This is running in pyscript.com.

1091
01:05:23,520 --> 01:05:26,520
I'm not going to show you the link, and I will show you why in a moment.

1092
01:05:26,520 --> 01:05:33,520
But you can get the gist of the code here, is that we just imported our X spreadsheet object into Python.

1093
01:05:33,520 --> 01:05:36,520
We've imported a little extra part of the Py.ffi.

1094
01:05:36,520 --> 01:05:42,520
There are methods of basically if you want to unwrap that proxy and you need to deal with it in a more explicit way, there are APIs for that.

1095
01:05:42,520 --> 01:05:45,520
Sometimes the magic isn't quite what you'd want it to be.

1096
01:05:45,520 --> 01:05:53,520
In this case, converting a Python dictionary to a JavaScript object, which look very similar but are slightly different.

1097
01:05:53,520 --> 01:05:55,520
Again, the specifics, don't worry about.

1098
01:05:55,520 --> 01:06:02,520
But what's happened here is just with these, I guess it's two lines of Python code, I've now basically made use of,

1099
01:06:02,520 --> 01:06:09,520
I've been able to pull in a JavaScript front-end library and use it with Python, which is cool.

1100
01:06:09,520 --> 01:06:16,520
That's the gist of the interop here, is that we get to as Pythonistas now start to make use of JavaScript front-end libraries, which I think is a lot of fun.

1101
01:06:16,520 --> 01:06:21,520
The reason I will say I'm not sharing the link to this one is if I open, do we say we can do this, by the way?

1102
01:06:21,520 --> 01:06:24,520
You can open these links, these pages, these apps in their own pages.

1103
01:06:24,520 --> 01:06:30,520
If you go to the open a new tab button, you get a link to the web page that is your pyscript.com app.

1104
01:06:30,520 --> 01:06:32,520
This link is public on the internet right now.

1105
01:06:32,520 --> 01:06:35,520
You can text this to your grandmother and she can open this app.

1106
01:06:35,520 --> 01:06:37,520
It's pretty cool.

1107
01:06:37,520 --> 01:06:41,520
The reason this is failing, I'm now getting a name error about JS.

1108
01:06:41,520 --> 01:06:48,520
The reason this is failing is because of what's called cores, which is limitations on where your web page can and can't load certain bits of code from.

1109
01:06:48,520 --> 01:06:54,520
This bit of code I'm loading in an unsafe way, so while it's working in this sandbox environment of pyscript.com, it'll break if I send you this link.

1110
01:06:54,520 --> 01:06:55,520
So apologies.

1111
01:06:55,520 --> 01:06:59,520
That's another thing you get to contend with as burgeoning web developers, is cores.

1112
01:06:59,520 --> 01:07:03,520
Run, copy the URL.

1113
01:07:03,520 --> 01:07:06,520
See if you can give me quickly.

1114
01:07:06,520 --> 01:07:11,520
I have some later examples that have some more interactivity.

1115
01:07:11,520 --> 01:07:14,520
I know that was real fast. Like I said, Ted's getting into this more later. Questions?

1116
01:07:14,520 --> 01:07:22,520
What would you do if you were able to demonstrate how easy it is to copy the file and then re-write it?

1117
01:07:22,520 --> 01:07:26,520
Probably, unless it's doing something that requires advanced permissions.

1118
01:07:26,520 --> 01:07:31,520
I think as Ted mentioned earlier, there's some things that browser will only let you do in a sort of secure environment.

1119
01:07:31,520 --> 01:07:36,520
PyScript.com is fairly secure, but I don't actually know for this one in this case.

1120
01:07:36,520 --> 01:07:39,520
But hosting it yourself would be a good place to start.

1121
01:07:39,520 --> 01:07:42,520
Other questions?

1122
01:07:42,520 --> 01:07:49,520
Some of the course configurations depend also on the server that is serving them.

1123
01:07:49,520 --> 01:07:53,520
It's not only to the end user.

1124
01:07:53,520 --> 01:08:01,520
So sometimes you have to actually do something like download your image or assets or whatnot and have it serve on your own domain.

1125
01:08:01,520 --> 01:08:05,520
Basically the same domain that you're serving your app from.

1126
01:08:05,520 --> 01:08:16,520
I was looking around at people's faces when Jack was demoing and there were a lot of, wow, when you saw a bit of JavaScript being called for Python.

1127
01:08:16,520 --> 01:08:20,520
So you're getting some really wonderful stuff from the world of JavaScript and the web.

1128
01:08:20,520 --> 01:08:29,520
At the same time, you get all the really rubbish stuff from JavaScript and the web, as well as my course, cross-origin and resource sharing and things like that.

1129
01:08:29,520 --> 01:08:35,520
So you have to start to become a user to the first time, then figure out this isn't really a Python problem.

1130
01:08:35,520 --> 01:08:36,520
This is a browser problem.

1131
01:08:36,520 --> 01:08:45,520
A browser is doing certain things in a certain way that might not be quite how you're used to when you're using Python.

1132
01:08:45,520 --> 01:08:48,520
So it's a fun place to be.

1133
01:08:48,520 --> 01:08:52,520
It's not boring, that's for sure.

1134
01:08:52,520 --> 01:08:53,520
Awesome.

1135
01:08:53,520 --> 01:08:57,520
So that is the very basics of JavaScript and Python interconnectivity.

1136
01:08:57,520 --> 01:09:01,520
I say we'll talk more about JavaScript and its possibilities in a little bit.

1137
01:09:01,520 --> 01:09:08,520
I do want to pick apart a little thing that Nicholas said earlier, which is also very cool, and talk about events in the browser.

1138
01:09:08,520 --> 01:09:11,520
So here's another piece of that sample code from earlier in the day.

1139
01:09:11,520 --> 01:09:16,520
Input, type equals text, id equals English, pyclick equals trans brackets.

1140
01:09:16,520 --> 01:09:20,520
This is the way that you hook up HTML to Python.

1141
01:09:20,520 --> 01:09:27,520
And this is part of the PyScript API that allows us to sort of build responsive web pages, again, without resorting to JavaScript.

1142
01:09:27,520 --> 01:09:33,520
So for those who have not worked in the browser before, and given the JavaScript level, I'm guessing most of you are relatively new to that.

1143
01:09:33,520 --> 01:09:37,520
The gist of event reactive code is relatively straightforward.

1144
01:09:37,520 --> 01:09:40,520
When something happens in the browser, we would like to run some code.

1145
01:09:40,520 --> 01:09:42,520
That's really all it is.

1146
01:09:42,520 --> 01:09:53,520
So you can see that something happening could be the user clicks on something or hovers over something or an object gains or loses focus or types or they submit a file, basically any kind of user interaction you could imagine.

1147
01:09:53,520 --> 01:09:57,520
And also a slew of others that happen sort of more behind the scenes.

1148
01:09:57,520 --> 01:10:06,520
There are events that are triggered at certain phases of the page load life cycle, when resources become available, when movie files are played to a certain point.

1149
01:10:06,520 --> 01:10:14,520
If you can think of something happening in the browser, there's probably an event the browser is emitting that you can choose to hook into to let you do something when that happens.

1150
01:10:14,520 --> 01:10:17,520
And we'll look at some more specifics in a little bit.

1151
01:10:17,520 --> 01:10:21,520
This is a little tiny web page that I've hooked up to run events in case anyone was unclear.

1152
01:10:21,520 --> 01:10:25,520
I've hooked this up to respond to hover events, click events, type events.

1153
01:10:25,520 --> 01:10:27,520
This is a web page, basically.

1154
01:10:27,520 --> 01:10:30,520
When you type into a search bar and it autocompletes, it's listening for you to type.

1155
01:10:30,520 --> 01:10:35,520
It's firing some code that's processing what you type and doing something, responsive code.

1156
01:10:35,520 --> 01:10:36,520
We get that idea.

1157
01:10:36,520 --> 01:10:41,520
In PyScript, we have two primary ways of hooking ourselves up to react to events.

1158
01:10:41,520 --> 01:10:45,520
I have a sneak peek of a future API that's adding some more cool ways.

1159
01:10:45,520 --> 01:10:48,520
The first is handling code inside your HTML.

1160
01:10:48,520 --> 01:10:50,520
This is what we saw earlier.

1161
01:10:50,520 --> 01:10:57,520
This is what I like to think of as the event executer because the argument is a string of executable code.

1162
01:10:57,520 --> 01:11:05,520
Earlier when we wrote something like trans with brackets or in this case, PyClick equals say hi with brackets,

1163
01:11:05,520 --> 01:11:09,520
we are actually writing there is a string of executable Python code.

1164
01:11:09,520 --> 01:11:11,520
In a sense, we actually are calling exec on it.

1165
01:11:11,520 --> 01:11:16,520
It's a little more complicated than that, but if you can write it as a continuous Python string in there,

1166
01:11:16,520 --> 01:11:23,520
it will be executed when the named event that is after Py in that case is triggered on the element you've put it on.

1167
01:11:23,520 --> 01:11:26,520
We used click a lot because clicking is a really easy thing to demo.

1168
01:11:26,520 --> 01:11:34,520
This could be PyFocus, PyHover, I think PyMouseOver is the actual name of that one, PyBlur,

1169
01:11:34,520 --> 01:11:37,520
which is when something loses focus, PyOnload, things like that.

1170
01:11:37,520 --> 01:11:41,520
Any name of an event in the browser, and again, we'll dive deeper into the browser APIs,

1171
01:11:41,520 --> 01:11:47,520
you can put after Py and it will run that string of Python code in the global namespace,

1172
01:11:47,520 --> 01:11:50,520
in Python's global namespace when that event happens.

1173
01:11:50,520 --> 01:11:55,520
I know there were some questions about is this the name of a callable or why do I need the brackets?

1174
01:11:55,520 --> 01:12:01,520
We are literally calling exec on your code when that event happens, which lets us do some more advanced things.

1175
01:12:01,520 --> 01:12:06,520
I put a little demo here, so you really believe me that when you click a button, things happen.

1176
01:12:06,520 --> 01:12:07,520
Yeah?

1177
01:12:07,520 --> 01:12:12,520
Is JavaScript involved in this process at all?

1178
01:12:12,520 --> 01:12:16,520
Yes, the short answer is yes.

1179
01:12:16,520 --> 01:12:24,520
The way that we are doing the original hookup of the events to Python is going through JavaScript.

1180
01:12:24,520 --> 01:12:30,520
Basically, PyClick in this case is shorthand for PyScript to add an event listener,

1181
01:12:30,520 --> 01:12:34,520
listening to click, and adding this piece of code.

1182
01:12:34,520 --> 01:12:37,520
So the users, you shouldn't have to type in JavaScript under the hood.

1183
01:12:37,520 --> 01:12:39,520
For sure. Good question.

1184
01:12:39,520 --> 01:12:47,520
Yeah?

1185
01:12:47,520 --> 01:12:48,520
It's such a good question.

1186
01:12:48,520 --> 01:12:52,520
The answer right now is it happens on page load.

1187
01:12:52,520 --> 01:12:55,520
We are moving forward to allow that to be dynamic.

1188
01:12:55,520 --> 01:12:57,520
The problem is it's expensive.

1189
01:12:57,520 --> 01:13:03,520
Where the browser has facility built in to watch its own event handlers and manage when you reassign its internal attributes,

1190
01:13:03,520 --> 01:13:06,520
PyStripper would install what's called a mutation observer.

1191
01:13:06,520 --> 01:13:08,520
Basically, watch the entire page.

1192
01:13:08,520 --> 01:13:12,520
Whenever anything changes, see if one of the things that changed was a PyClick attribute.

1193
01:13:12,520 --> 01:13:18,520
So it's just a little bit expensive to do, so we have to figure out really is that on by default, is that off by default, is it configurable?

1194
01:13:18,520 --> 01:13:20,520
It's an implementation thing.

1195
01:13:20,520 --> 01:13:27,520
Good question.

1196
01:13:27,520 --> 01:13:31,520
Yeah. Another good question and one that we've talked about actually at length.

1197
01:13:31,520 --> 01:13:37,520
Here's my pitch, since I have the microphone, but some who comes after me can say something else.

1198
01:13:37,520 --> 01:13:41,520
So it sounds scary when I'm like, you can call exec on a piece of code?

1199
01:13:41,520 --> 01:13:44,520
That's not a thing we want to allow users to do.

1200
01:13:44,520 --> 01:13:45,520
Two things.

1201
01:13:45,520 --> 01:13:48,520
One, all of this code runs in the user's browser.

1202
01:13:48,520 --> 01:13:52,520
It's not running on the PyScript.com or your local server at all.

1203
01:13:52,520 --> 01:13:55,520
So in some sense, you are as sandboxed as you can be from being separate by it.

1204
01:13:55,520 --> 01:14:02,520
The other thing I would say is if this is a call to exec, well, this is basically a call to exec.

1205
01:14:02,520 --> 01:14:05,520
You put some code inside a PyScript tag, we will run it.

1206
01:14:05,520 --> 01:14:06,520
PyScript will run it.

1207
01:14:06,520 --> 01:14:07,520
PyDi will run it.

1208
01:14:07,520 --> 01:14:09,520
So I don't think it's any more unsafe than putting it in a PyScript tag.

1209
01:14:09,520 --> 01:14:14,520
That said, when we get to the future looking part, we are breaking this down a little bit.

1210
01:14:14,520 --> 01:14:15,520
Fair question.

1211
01:14:15,520 --> 01:14:16,520
Yeah.

1212
01:14:16,520 --> 01:14:17,520
So I want to think about that.

1213
01:14:17,520 --> 01:14:18,520
We're talking about security data.

1214
01:14:18,520 --> 01:14:19,520
Yeah.

1215
01:14:19,520 --> 01:14:27,520
But if users not typing the same time, that's when you're supposed to do when the user does something.

1216
01:14:27,520 --> 01:14:28,520
Yes.

1217
01:14:28,520 --> 01:14:29,520
Yeah.

1218
01:14:29,520 --> 01:14:34,520
So if users not typing, you have a total number of security access from the user.

1219
01:14:34,520 --> 01:14:35,520
Correct.

1220
01:14:35,520 --> 01:14:40,520
There's no, I think, and I'm not a web security expert and there probably are those in this building who are.

1221
01:14:40,520 --> 01:14:45,520
I don't think that this is any more insecure than the fact that we got a JavaScript repl in the browser already.

1222
01:14:45,520 --> 01:14:50,520
Anything you can do to your own client window, this could do, but no more, if that sort of makes sense.

1223
01:14:50,520 --> 01:14:53,520
That's the answer, basically.

1224
01:14:53,520 --> 01:14:59,520
You should expect the same levels of security that you have with your baseline browser, but no more, no less.

1225
01:14:59,520 --> 01:15:00,520
Yeah.

1226
01:15:00,520 --> 01:15:01,520
Yeah.

1227
01:15:01,520 --> 01:15:06,520
Somebody could open the player in the realm of an alteration.

1228
01:15:06,520 --> 01:15:07,520
For sure.

1229
01:15:07,520 --> 01:15:08,520
For sure.

1230
01:15:08,520 --> 01:15:09,520
It's their front-end JavaScript, right?

1231
01:15:09,520 --> 01:15:10,520
It's their browser.

1232
01:15:10,520 --> 01:15:11,520
It's their browser, right?

1233
01:15:11,520 --> 01:15:17,520
If you want to go view source on Facebook right now and change the code and make it green, nothing's stopping you, but it won't affect anybody else.

1234
01:15:17,520 --> 01:15:18,520
Right?

1235
01:15:18,520 --> 01:15:19,520
Same thing here.

1236
01:15:19,520 --> 01:15:20,520
It's a front-end framework.

1237
01:15:20,520 --> 01:15:21,520
Yeah.

1238
01:15:21,520 --> 01:15:48,520
Now, the trend, like, that feeling is that the trend is that the browser is becoming more closer and closer to your operating system.

1239
01:15:48,520 --> 01:15:56,520
Like, Chrome actually enables you to allow applications to access your file system explicitly, not, you know, implicitly.

1240
01:15:56,520 --> 01:15:59,520
You need to give permissions and stuff, but it's possible.

1241
01:15:59,520 --> 01:16:10,520
So in the future, I think things are going to be closer and closer where you will have a level of permission where you can allow browser applications to access things.

1242
01:16:10,520 --> 01:16:13,520
But I would assume everything is going to be super controlled.

1243
01:16:13,520 --> 01:16:16,520
The browser is a very secure virtual machine, to be honest.

1244
01:16:16,520 --> 01:16:20,520
As is WebAssembly, for my understanding.

1245
01:16:20,520 --> 01:16:23,520
And Antonio's talk tomorrow on WebAssembly would be the place to hear about that.

1246
01:16:23,520 --> 01:16:25,520
But that is designed to be a sandbox, right?

1247
01:16:25,520 --> 01:16:32,520
So breaking outside of WebAssembly and then breaking outside of the browser, right, we're no less secure than those two layers.

1248
01:16:32,520 --> 01:16:38,520
One more little demo just to demonstrate, like, we are really calling exec on this code instead of eval.

1249
01:16:38,520 --> 01:16:40,520
It's a little more complicated than that, right?

1250
01:16:40,520 --> 01:16:42,520
But you can write multi-line code in here if you want to.

1251
01:16:42,520 --> 01:16:45,520
I would say this is maybe not the cleanest thing to put in your HTML.

1252
01:16:45,520 --> 01:16:47,520
This is the use case that I use most.

1253
01:16:47,520 --> 01:16:50,520
If I know I might need to call a user function, I might throw an import in front of it.

1254
01:16:50,520 --> 01:16:55,520
So I can do import OS and then print OS.getCurrentWorkingDirectory.

1255
01:16:55,520 --> 01:17:04,520
And if I do that, what I actually see, and this is something that was referenced earlier, is not the working directory where this is being served from on my computer.

1256
01:17:04,520 --> 01:17:06,520
This is a presentation running on my laptop here.

1257
01:17:06,520 --> 01:17:17,520
Not py script.com, but the current working directory inside the virtual machine, the inscription virtual file system that is surrounding the CPython runtime in a browser in the way.

1258
01:17:17,520 --> 01:17:23,520
We get a lot of security reports of people saying things like, I ran, you know, getCurrentWorkingDirectory and I can see my file system.

1259
01:17:23,520 --> 01:17:28,520
What you're seeing is a file system that exists only in memory and only inside of this web page, right?

1260
01:17:28,520 --> 01:17:30,520
That you can do things that inquire file access.

1261
01:17:30,520 --> 01:17:31,520
You can write files to it.

1262
01:17:31,520 --> 01:17:32,520
You can read files to it.

1263
01:17:32,520 --> 01:17:36,520
The fetch configurations you looked at earlier are all about moving files in and out of it.

1264
01:17:36,520 --> 01:17:38,520
That's, I guess, a deeper level of this demo.

1265
01:17:38,520 --> 01:17:42,520
This demo is just meant to say you can do multi-line things because we're using exec and not eval.

1266
01:17:42,520 --> 01:17:47,520
Will this demo break if you remove this demo folder?

1267
01:17:47,520 --> 01:17:50,520
I don't know.

1268
01:17:50,520 --> 01:17:53,520
Let's find out.

1269
01:17:53,520 --> 01:17:57,520
Do I have a copy of this in py script.com?

1270
01:17:57,520 --> 01:17:58,520
I don't.

1271
01:17:58,520 --> 01:18:05,520
When we hit our next break, which I think is after me, let's try it because I'm not sure.

1272
01:18:05,520 --> 01:18:08,520
I put the break in there just for formatting in this page.

1273
01:18:08,520 --> 01:18:13,520
I think it would run because JavaScript maintains whitespace in most scenarios.

1274
01:18:13,520 --> 01:18:16,520
But let's find out.

1275
01:18:16,520 --> 01:18:23,520
So that is, if you want to set up your event handling and you want to do it on the HTML side of your code, this is essentially the syntax.

1276
01:18:23,520 --> 01:18:27,520
Py dash the name of some event equals some string of executable code.

1277
01:18:27,520 --> 01:18:31,520
If you want to do it inside of the Python, we have a way to do that too.

1278
01:18:31,520 --> 01:18:34,520
Whether you want to do one or the other depends on what you want to do.

1279
01:18:34,520 --> 01:18:36,520
It might depend on your code organization.

1280
01:18:36,520 --> 01:18:44,520
If you have lots of things together in your HTML that act the same way or lots of things in your Python functions that act the same way, maybe you'd want to do the setup in one piece of code or the other.

1281
01:18:44,520 --> 01:18:49,520
When I said earlier that when something happens, we want to run a piece of code, it's slightly more involved than that.

1282
01:18:49,520 --> 01:18:52,520
When something happens, we emit an event object.

1283
01:18:52,520 --> 01:18:54,520
When I say we, I mean the browser.

1284
01:18:54,520 --> 01:19:00,520
The browser emits an event object that is given to our piece of code to use if we would like to.

1285
01:19:00,520 --> 01:19:03,520
And these event objects are really useful, it turns out.

1286
01:19:03,520 --> 01:19:06,520
The browser would love to tell you what it is doing.

1287
01:19:06,520 --> 01:19:07,520
There's all kinds of events.

1288
01:19:07,520 --> 01:19:11,520
This is about a third of them that are the most interesting and popular, I think.

1289
01:19:11,520 --> 01:19:17,520
Things like events for when you focus on an object, when the mouse wheel is scrolled, when you submit a form to a website, that kind of thing.

1290
01:19:17,520 --> 01:19:21,520
Basically, in the same vein, if there's an event for everything, there's a subclass of event.

1291
01:19:21,520 --> 01:19:23,520
Really for everything.

1292
01:19:23,520 --> 01:19:27,520
All of these events have common attributes that are really useful to us.

1293
01:19:27,520 --> 01:19:29,520
Things like target.

1294
01:19:29,520 --> 01:19:36,520
So event.target will tell you the HTML element that it was dispatched from that we can grab.

1295
01:19:36,520 --> 01:19:39,520
A timestamp in milliseconds from some origin.

1296
01:19:39,520 --> 01:19:42,520
It's not UTC or anything, it's from page load maybe.

1297
01:19:42,520 --> 01:19:44,520
But from a consistent time.

1298
01:19:44,520 --> 01:19:46,520
IsTrusted is an interesting one.

1299
01:19:46,520 --> 01:19:52,520
The event.isTrusted attribute tells you if you are handling an event that was triggered by a user input.

1300
01:19:52,520 --> 01:19:56,520
And if you are, there are certain things that the browser will allow you to do that it won't do otherwise.

1301
01:19:56,520 --> 01:20:02,520
In JavaScript, you can tell the computer to run some JavaScript code that clicks on a link to a new web page and takes you somewhere else.

1302
01:20:02,520 --> 01:20:04,520
Which is a scary thing for your code to be able to do.

1303
01:20:04,520 --> 01:20:09,520
But it's only allowed to do that if it's responding to an event that is caused by user input.

1304
01:20:09,520 --> 01:20:15,520
So you can't go to Facebook and have it automatically redirect you to MySpace.

1305
01:20:15,520 --> 01:20:18,520
The redirect click action has to happen in response to your user input.

1306
01:20:18,520 --> 01:20:23,520
These are really part of the web API, but I want to introduce them as the idea of talking about events.

1307
01:20:23,520 --> 01:20:28,520
And then the specific events have specific attributes that are useful to the specific kind of event that they are.

1308
01:20:28,520 --> 01:20:32,520
For example, the keyboard event has things like the key code attributes.

1309
01:20:32,520 --> 01:20:33,520
The index of the key that you pressed.

1310
01:20:33,520 --> 01:20:35,520
I can tell what key I pressed by listening to key code.

1311
01:20:35,520 --> 01:20:37,520
Whether there were any modifier keys pressed.

1312
01:20:37,520 --> 01:20:43,520
Whether we are automatically repeating a character because we're holding down the Z key and we're keeping ZZZ over again.

1313
01:20:43,520 --> 01:20:47,520
The browser loves to tell you what it's doing so you can do useful things with it.

1314
01:20:47,520 --> 01:20:53,520
The way that we in PyScript respond to this is with a function called addEventListener.

1315
01:20:53,520 --> 01:20:55,520
Add underscore event underscore listener.

1316
01:20:55,520 --> 01:20:58,520
That is part of the PyEdit FFI.

1317
01:20:58,520 --> 01:21:00,520
It's a thing that we get from PyEdit.

1318
01:21:00,520 --> 01:21:03,520
And there is a workable demo for this in just a moment.

1319
01:21:03,520 --> 01:21:09,520
The API for it, it takes an element from the DOM, which we saw a preview of how we grab that.

1320
01:21:09,520 --> 01:21:14,520
We import from JS and then we do document.getElementByID or get all the elements.

1321
01:21:14,520 --> 01:21:16,520
We get a reference to an element.

1322
01:21:16,520 --> 01:21:18,520
The name of the event we'd like to have.

1323
01:21:18,520 --> 01:21:21,520
And then we point it at some callable we'd like to call.

1324
01:21:21,520 --> 01:21:24,520
Finally, we've gotten to the workable demos.

1325
01:21:24,520 --> 01:21:30,520
If you want to run this one locally, if you go to tinyurl.com slash addEventListener, all one word.

1326
01:21:30,520 --> 01:21:33,520
That is a link to the PyScript.com app for this demo.

1327
01:21:33,520 --> 01:21:35,520
It will take you to the live version of the app.

1328
01:21:35,520 --> 01:21:40,520
If you click on the view code version in the bottom right corner of the page, you can view it live.

1329
01:21:40,520 --> 01:21:45,520
But just to walk you through the code that's up here, what we are doing is importing the couple of bits of function that we'll need.

1330
01:21:45,520 --> 01:21:48,520
Import JS, which is a reference to JavaScript.

1331
01:21:48,520 --> 01:21:57,520
And from the PyEdit FFI, so from PyEdit.FFI.wrappers, import add underscore event underscore listener.

1332
01:21:57,520 --> 01:22:00,520
I'll define my event that I might like to run.

1333
01:22:00,520 --> 01:22:01,520
Say hi.

1334
01:22:01,520 --> 01:22:04,520
It's going to print out the event that it gets.

1335
01:22:04,520 --> 01:22:08,520
And then down here I will grab a reference to the elements that I need.

1336
01:22:08,520 --> 01:22:12,520
JS.document.getElementById, my button, which is the same as the ID up here.

1337
01:22:12,520 --> 01:22:14,520
And then I will call addEventListener.

1338
01:22:14,520 --> 01:22:20,520
I'll give it the button, the kind of event I'm interested in listening to, and the name of the callable that I'm interested in calling.

1339
01:22:20,520 --> 01:22:24,520
In this case, I'm passing a reference to that function into the addEventListener function.

1340
01:22:24,520 --> 01:22:30,520
If I come down to the live demo, which thankfully still has the URL on it, which is quite good.

1341
01:22:30,520 --> 01:22:34,520
We can tell that this button is triggered by object pointer event.

1342
01:22:34,520 --> 01:22:39,520
It's being passed a JavaScript object, which is a pointer event, mouse event, a click event, essentially.

1343
01:22:39,520 --> 01:22:43,520
And it's printing that out to the screen for us.

1344
01:22:43,520 --> 01:22:47,520
A couple more demos, and then I will get a break and we can play a little bit.

1345
01:22:47,520 --> 01:22:50,520
But any questions so far?

1346
01:22:50,520 --> 01:22:51,520
Yeah.

1347
01:22:51,520 --> 01:22:53,520
Tell me if you've done all the answers.

1348
01:22:53,520 --> 01:22:55,520
Am I?

1349
01:22:55,520 --> 01:23:00,520
This is a reveal JS presentation that has actually running.

1350
01:23:00,520 --> 01:23:01,520
Yeah.

1351
01:23:01,520 --> 01:23:02,520
How is it?

1352
01:23:02,520 --> 01:23:03,520
Yeah, yeah.

1353
01:23:03,520 --> 01:23:06,520
So the candid answer is I'm cheating a little bit.

1354
01:23:06,520 --> 01:23:12,520
The PyScript that's running under this page is a lot more than what you see on the screen to make the formatting work out correctly.

1355
01:23:12,520 --> 01:23:16,520
You can just run PyScript on a web page, but to make it appear in this nice box and scroll,

1356
01:23:16,520 --> 01:23:21,520
this implementation is running the gist of this code and then a bunch more stuff to make the formatting good is the truth.

1357
01:23:21,520 --> 01:23:24,520
So yes, PyScript, not just as much PyScript.

1358
01:23:24,520 --> 01:23:25,520
Yeah.

1359
01:23:25,520 --> 01:23:28,520
Other questions?

1360
01:23:28,520 --> 01:23:29,520
Cool.

1361
01:23:29,520 --> 01:23:30,520
Let's do one more example.

1362
01:23:30,520 --> 01:23:36,520
This one, if you want to view the live demo of, you can go to tinyurl.com slash PyCon validate.

1363
01:23:36,520 --> 01:23:37,520
All one word.

1364
01:23:37,520 --> 01:23:38,520
I'm taking the live demo of this.

1365
01:23:38,520 --> 01:23:43,520
Just some slightly more involved ways of working with this event object rather than just printing it out.

1366
01:23:43,520 --> 01:23:46,520
So the same thing, we're importing our couple of objects we need to work with.

1367
01:23:46,520 --> 01:23:50,520
We'll define our function, which takes in that event object.

1368
01:23:50,520 --> 01:23:55,520
And all it says is if Py, the string Py, is in event.target.value.

1369
01:23:55,520 --> 01:23:57,520
So event is the event object.

1370
01:23:57,520 --> 01:24:00,520
Target is the HTML element it came from.

1371
01:24:00,520 --> 01:24:02,520
What's triggering this event?

1372
01:24:02,520 --> 01:24:09,520
If its value, which is the value of user input, contains the letters py, we'll set the color of it to green.

1373
01:24:09,520 --> 01:24:11,520
Otherwise, make the color of it red.

1374
01:24:11,520 --> 01:24:17,520
And then we'll do the same two things where we grab a reference to the input on our page and we'll add our event listener with that reference.

1375
01:24:17,520 --> 01:24:22,520
The name of the event we want to use, in this case, input, which fires any time the input changes.

1376
01:24:22,520 --> 01:24:24,520
And the reference to our function.

1377
01:24:24,520 --> 01:24:29,520
I have spare quotes here, but I think I have actually fixed that in my live demo.

1378
01:24:29,520 --> 01:24:41,520
So if I type hello PyCon, we'll see when the input contains py, the validate function is turning the style element, the style.color of our input green.

1379
01:24:41,520 --> 01:24:43,520
If it does not contain py, it makes it red.

1380
01:24:43,520 --> 01:24:47,520
And that event is being triggered any time the value of my function changes.

1381
01:24:47,520 --> 01:24:49,520
That's the definition of this input event.

1382
01:24:49,520 --> 01:24:57,520
So any time I type something new, I'm basically running this validate function, and in real time it's changing the style attribute of this input.

1383
01:24:57,520 --> 01:25:03,520
So a slightly more advanced example of what's going on there.

1384
01:25:03,520 --> 01:25:08,520
I would just mention there's also a remove event listener, because it would be pretty rude for us to not clean up after ourselves.

1385
01:25:08,520 --> 01:25:19,520
So if you're doing a more advanced functionality where you need to be actively managing what has and doesn't have an event listener, you could keep track like a list or an array or something of your event listeners, and then remove them as you see fit.

1386
01:25:19,520 --> 01:25:21,520
Okay.

1387
01:25:21,520 --> 01:25:22,520
How are we on time?

1388
01:25:22,520 --> 01:25:23,520
Am I going way over?

1389
01:25:23,520 --> 01:25:24,520
A little bit?

1390
01:25:24,520 --> 01:25:25,520
All right.

1391
01:25:25,520 --> 01:25:26,520
Real quick.

1392
01:25:26,520 --> 01:25:27,520
Let's talk about what's coming up next.

1393
01:25:27,520 --> 01:25:30,520
So this is things you cannot demo today, but I think are exciting.

1394
01:25:30,520 --> 01:25:35,520
So this is the current syntax I just showed you, right?

1395
01:25:35,520 --> 01:25:37,520
We define a callable.

1396
01:25:37,520 --> 01:25:38,520
We grab a reference to it.

1397
01:25:38,520 --> 01:25:43,520
We use add event listener to add an event listener to this object, right?

1398
01:25:43,520 --> 01:25:54,520
But we in Python actually already sort of have a syntax for when we want to take a reference to a callable and modify how it works, right?

1399
01:25:54,520 --> 01:26:02,520
If we are writing a function, we say, I have this behavior for this function, and sort of separate from the behavior of the function, I want to define the context in which it runs or add some behavior to it.

1400
01:26:02,520 --> 01:26:05,520
And that syntax is a decorator, right?

1401
01:26:05,520 --> 01:26:08,520
So we're adding the at when decorator to PyScript.

1402
01:26:08,520 --> 01:26:14,520
This will be, I believe, in the next release, which essentially is just a simpler way of writing the same thing.

1403
01:26:14,520 --> 01:26:22,520
You decorate the function you want to call with at when, pass it an ID of an element in the DOM and the name of the attribute, and it will do the hookup behind the scenes for you, right?

1404
01:26:22,520 --> 01:26:26,520
These two pieces of code at the bottom are doing exactly the same thing.

1405
01:26:26,520 --> 01:26:28,520
One is just a little bit more Python-ic, right?

1406
01:26:28,520 --> 01:26:33,520
So we're trying to build this API out away from sort of the JavaScript way of thinking and use the Python features where we can.

1407
01:26:33,520 --> 01:26:36,520
So things like that.

1408
01:26:36,520 --> 01:26:37,520
Please, yeah.

1409
01:26:37,520 --> 01:26:41,520
Quick survey. Who thinks this one is better than the other one?

1410
01:26:41,520 --> 01:26:45,520
OK, so we should merge this PR is what I'm hearing.

1411
01:26:45,520 --> 01:26:50,520
For those who think it's not better, why?

1412
01:26:50,520 --> 01:26:51,520
Brave souls?

1413
01:26:51,520 --> 01:26:54,520
Do it in the Brave. If you think it's not better, come talk to us.

1414
01:26:54,520 --> 01:26:55,520
Yeah.

1415
01:26:55,520 --> 01:26:58,520
Because we want to do the most Python-ic thing we can.

1416
01:26:58,520 --> 01:27:01,520
For sure.

1417
01:27:01,520 --> 01:27:09,520
We don't need to necessarily go through the full definition of it, but it's like I say, it takes the name of an event and the name of an ID and does the hookup behind the scenes for you with a slightly cleaner syntax.

1418
01:27:09,520 --> 01:27:12,520
And like I say, this is not live on py script.com yet.

1419
01:27:12,520 --> 01:27:16,520
It's a good time to say PyScript, if you might have guessed, is changing really fast.

1420
01:27:16,520 --> 01:27:19,520
So every new release is a major release in a sense.

1421
01:27:19,520 --> 01:27:24,520
So queue up to date with the docs and the APIs and the change log and all that.

1422
01:27:24,520 --> 01:27:26,520
And a voice in my ear is saying pin your releases.

1423
01:27:26,520 --> 01:27:27,520
Yes.

1424
01:27:27,520 --> 01:27:37,520
So we do have functionality in if you go to a py script.com app, you'll see it is pinned to py script.net slash releases slash 2020 3.03.1, which is the current pin release.

1425
01:27:37,520 --> 01:27:40,520
We do also have links to things like slash latest.

1426
01:27:40,520 --> 01:27:48,520
If you need to do some quick testing, I encourage you to deviate toward a pinned release, because if you do slash latest, then when we do our next release, we break your code.

1427
01:27:48,520 --> 01:27:49,520
I guarantee it.

1428
01:27:49,520 --> 01:27:55,520
So pin your releases to a current release if you have a chance.

1429
01:27:55,520 --> 01:28:05,520
Yeah, so in the open up a py script.com app here in index dot html slide this over up in the head section of the html document.

1430
01:28:05,520 --> 01:28:07,520
These two lines are what we're looking at here.

1431
01:28:07,520 --> 01:28:15,520
The lower one scripts differ source equals py script dot net slash releases slash 2020 3.01 dot one slash py script dot j s.

1432
01:28:15,520 --> 01:28:20,520
That's pointing to to the py script JavaScript library that's driving all this behavior.

1433
01:28:20,520 --> 01:28:26,520
So you'll see in especially in some of our earlier docs, you would see things like slash latest.

1434
01:28:26,520 --> 01:28:28,520
Currently, that's 2020 3.03.1.

1435
01:28:28,520 --> 01:28:30,520
But when we do a next release, it won't be anymore.

1436
01:28:30,520 --> 01:28:33,520
Right. So your power is yours.

1437
01:28:33,520 --> 01:28:36,520
Same thing with this CSS file that's in this in this head here.

1438
01:28:36,520 --> 01:28:43,520
The CSS that there does a little bit of cleanup around how the py script tags are formatted before py script loads, how the rep loads, things like that.

1439
01:28:43,520 --> 01:28:44,520
It's not a huge amount of CSS.

1440
01:28:44,520 --> 01:28:47,520
But if you're building this on your own, that's another thing to copy.

1441
01:28:47,520 --> 01:28:50,520
Good question.

1442
01:28:50,520 --> 01:28:55,520
And oh, this goes back to what you asked earlier.

1443
01:28:55,520 --> 01:28:58,520
We're allowing users to exec a whole string of code.

1444
01:28:58,520 --> 01:29:04,520
We're actually moving away from that syntax in future versions, probably to have things that are just an eval statement instead of a full exec statement.

1445
01:29:04,520 --> 01:29:07,520
Right. Expression instead of a whole string of code.

1446
01:29:07,520 --> 01:29:13,520
Just because we want to encourage coding style where you should be putting their behavior into functions or into other encapsulated things.

1447
01:29:13,520 --> 01:29:18,520
Instead of writing their entire Python file inside the HTML like py click attribute.

1448
01:29:18,520 --> 01:29:22,520
So more changes coming. Pin your releases so we don't break your code in the PR.

1449
01:29:22,520 --> 01:29:24,520
OK. A lot of things. Yeah.

1450
01:29:24,520 --> 01:29:27,520
We'll skip past that because it's not in the current release.

1451
01:29:27,520 --> 01:29:32,520
Questions?

1452
01:29:32,520 --> 01:29:34,520
None here. Great.

1453
01:29:34,520 --> 01:29:39,520
How are we on time, Ted? Cool. Are we due?

1454
01:29:39,520 --> 01:29:42,520
Is the thing it's time for a little break? Great.

1455
01:29:42,520 --> 01:29:45,520
Someone who has the calendar for how long are we breaking forward? 315.

1456
01:29:45,520 --> 01:29:48,520
Sit back at 330.

1457
01:29:48,520 --> 01:29:54,520
We'll hang around and answer questions. Be back at 330.

1458
01:29:54,520 --> 01:29:57,520
All right. So let's restart after the break.

1459
01:29:57,520 --> 01:30:00,520
Hope you got your coffee.

1460
01:30:00,520 --> 01:30:02,520
And we'll talk about plugins.

1461
01:30:02,520 --> 01:30:08,520
So actually, before I talk about plugins, I wanted to mention one thing.

1462
01:30:08,520 --> 01:30:16,520
Earlier Madhur mentioned you can add different interpreters like MicroPython instead of Piodide.

1463
01:30:16,520 --> 01:30:25,520
That is, while it's true that you can change versions of Piodide, MicroPython right now is an experiment mode.

1464
01:30:25,520 --> 01:30:33,520
You can't really use MicroPython today, but we're pretty sure with the next release it's going to be available.

1465
01:30:33,520 --> 01:30:40,520
We do have some demos and proofs of concept with it, and we'll be demoing during our talks as well.

1466
01:30:40,520 --> 01:30:47,520
I think Nicholas is going to do it at his talk. I'm going to demo at my talk as well.

1467
01:30:47,520 --> 01:30:49,520
But just keep that in mind.

1468
01:30:49,520 --> 01:30:52,520
So plugins.

1469
01:30:52,520 --> 01:30:57,520
Let me start with a quote, which was more or less like,

1470
01:30:57,520 --> 01:31:05,520
Like, the system built on top of plugins from start is often an indication of engineers who don't know what they're doing or what they're going to build.

1471
01:31:05,520 --> 01:31:13,520
So instead of working through the hard process of understanding, et cetera, what is the final goal,

1472
01:31:13,520 --> 01:31:23,520
they implement the plugin so that they can change things later, which not a great thing, especially coming from your boss and the CEO of your company.

1473
01:31:23,520 --> 01:31:36,520
So, but in our defense, PyScript was designed around plugins for because we kind of knew what we're doing.

1474
01:31:36,520 --> 01:31:41,520
Python on the web is a very different and new ground.

1475
01:31:41,520 --> 01:31:48,520
And the vision is actually to enable, as Ted mentioned, to enable frameworks on top of it.

1476
01:31:48,520 --> 01:31:57,520
And we want it to be a thing that people can create new projects, create new frameworks and allow others to think differently.

1477
01:31:57,520 --> 01:32:02,520
So in that sense, we wanted to make sure that it's pluggable and easy to change later.

1478
01:32:02,520 --> 01:32:07,520
So let's talk a little about platform versus framework.

1479
01:32:07,520 --> 01:32:10,520
Anyone knows what's the difference?

1480
01:32:10,520 --> 01:32:15,520
Or what do you think is the difference?

1481
01:32:15,520 --> 01:32:26,520
All right. So we're using those terms as a framework is a type of software that allows you to write applications with that technology.

1482
01:32:26,520 --> 01:32:32,520
A platform is a is a piece of software that allows you to build frameworks on top of it.

1483
01:32:32,520 --> 01:32:43,520
So the idea is that with PyScript, well, you can create applications, but we also want to make it very easy for you to create frameworks that others can use to create their own applications.

1484
01:32:43,520 --> 01:32:53,520
In fact, I'll show later, but this slideshow is using a bunch of plugins to increase capabilities.

1485
01:32:53,520 --> 01:33:04,520
But I'm a little disappointed about by everyone else who didn't use PyScript itself for their presentations, but use Google Slides, you know.

1486
01:33:04,520 --> 01:33:09,520
But that's fine. So.

1487
01:33:09,520 --> 01:33:18,520
As I mentioned, we are kind of exploring unknown waters, and a lot of those things will may change in the future.

1488
01:33:18,520 --> 01:33:36,520
And by taking specific choices like designing a plugin API, a pluggable system from the beginning, by highly encouraging people to use to ping their versions of PyScript and dependencies and things like this.

1489
01:33:36,520 --> 01:33:42,520
We want to try and make it more stable and as as we go right.

1490
01:33:42,520 --> 01:33:55,520
Also, we're trying to make the plugins API quite stable and quite flexible in terms of how it hooks into the PyScript lifecycle and other things.

1491
01:33:55,520 --> 01:34:01,520
But piece of warning, we're still very early on.

1492
01:34:01,520 --> 01:34:09,520
So let's talk about PyScript plugins. As I mentioned two seconds ago, the API is changing or is likely to change.

1493
01:34:09,520 --> 01:34:19,520
So if you're using plugins or you're writing plugins, highly encourage you to pin your PyScript versions and your packages versions.

1494
01:34:19,520 --> 01:34:29,520
Which, by the way, even without PyScript, if you're just writing vanilla Python, pin your versions like this is just the best practice that you should always do.

1495
01:34:29,520 --> 01:34:36,520
Because usually it's Friday afternoon. You're about to go home and something breaks.

1496
01:34:36,520 --> 01:34:41,520
Half of the times in my experience it was because of a version that was not pinned.

1497
01:34:41,520 --> 01:34:50,520
So let's first look at how to use plugins right as an user.

1498
01:34:50,520 --> 01:35:01,520
As Madhur showed earlier, basically all you need to do is to add your plugin to your list of plugins in your Tummel file.

1499
01:35:01,520 --> 01:35:10,520
Now, what's the difference between a plugin and a package? Not a whole lot, to be honest.

1500
01:35:10,520 --> 01:35:22,520
But we chose to be explicit about calling plugins as plugins and not as packages because they can be, on one side, way more simple.

1501
01:35:22,520 --> 01:35:26,520
It's just a text file that we consume over the Internet.

1502
01:35:26,520 --> 01:35:36,520
Or it can be a much more complex thing with JavaScript assets, with images, with sounds and whatnot.

1503
01:35:36,520 --> 01:35:45,520
So we wanted to have the freedom to support other types of formats and things like this in the future.

1504
01:35:45,520 --> 01:35:51,520
So in the spirit of explicit is better than implicit. We wanted to make this way.

1505
01:35:51,520 --> 01:36:02,520
But you could eventually also write plugins with the Python package, inside a Python package, which I don't recommend.

1506
01:36:02,520 --> 01:36:09,520
Anyway, that's it. You add that to your Tummel and you can now enjoy your plugins.

1507
01:36:09,520 --> 01:36:17,520
So let me show you an example. This whole presentation is using Markdown and it's a plugin.

1508
01:36:17,520 --> 01:36:23,520
So I added my PyMarkdown plugin in the list in the Tummel.

1509
01:36:23,520 --> 01:36:30,520
And now if I write this, it translates to this.

1510
01:36:30,520 --> 01:36:36,520
And this is live code running inside the presentation itself.

1511
01:36:36,520 --> 01:36:41,520
Any questions so far?

1512
01:36:41,520 --> 01:36:48,520
Yes. But I have the same issue that Jeff has.

1513
01:36:48,520 --> 01:37:02,520
Well, basically, because of course, which Nikola said, you know, by mistake, it actually stands.

1514
01:37:02,520 --> 01:37:12,520
It means, come on, really? Sucks.

1515
01:37:12,520 --> 01:37:18,520
But it's because it ties to the security topic that we mentioned earlier.

1516
01:37:18,520 --> 01:37:26,520
In reality, we all blame it and it sucks. But for a lot of times, it's for good reasons.

1517
01:37:26,520 --> 01:37:33,520
Anyway, because of that, I need to change a couple of things. But yes, I'll have it ready.

1518
01:37:33,520 --> 01:37:39,520
I will tweet probably in the next day or two. And I actually will show the code as well.

1519
01:37:39,520 --> 01:37:48,520
So this is another example of another plugin that actually is being used in all our examples in the websites.

1520
01:37:48,520 --> 01:38:00,520
And this is called PyTutor. And what it does is you can add the PyTutor tag to your HTML code and it documents everything that is within those tags.

1521
01:38:00,520 --> 01:38:09,520
So to see the code that is behind this, it adds a button here. If I click, I can see the code itself.

1522
01:38:09,520 --> 01:38:15,520
And this is another example of composability in PyScript.

1523
01:38:15,520 --> 01:38:25,520
So, for instance, this slideshow is made with Pipercard, which is another type of plugin on top of PyScript that is using the Markdown plugin.

1524
01:38:25,520 --> 01:38:36,520
And inside the presentation itself, I have an iframe that is serving a PyScript application that is on another website, which, you know, it's a lot of boxes inside boxes.

1525
01:38:36,520 --> 01:38:47,520
But this is one of the things that we try to make explicit from the beginning because coding should be fun and should be a lot of experimentation.

1526
01:38:47,520 --> 01:38:53,520
And if people want to compose pieces and put them together, pretty much like Lego blocks, we should allow them.

1527
01:38:53,520 --> 01:38:58,520
So that's the spirit. So how does it work?

1528
01:38:58,520 --> 01:39:06,520
We expose plugins API that allows users to write Python and JavaScript plugins.

1529
01:39:06,520 --> 01:39:13,520
It exposes hooks for plugins to basically intercept events in the PyScript lifecycle.

1530
01:39:13,520 --> 01:39:30,520
So, for instance, when the interpreter is loaded or the packages have been loaded or when we parse the tumble, all those things so that plugins can change those things or do whatever and whatever they need.

1531
01:39:30,520 --> 01:39:39,520
Also, the plugins API allows you to create custom elements.

1532
01:39:39,520 --> 01:39:49,520
Who here knows what a custom element is? Or a web component? Cool.

1533
01:39:49,520 --> 01:39:52,520
Basically, they are often used to mean the same thing.

1534
01:39:52,520 --> 01:40:00,520
It's a way to extend the HTML domain with new tags that have different behaviors, right?

1535
01:40:00,520 --> 01:40:09,520
So the PyScript tag is a custom element that adds the PyScript tag to your page.

1536
01:40:09,520 --> 01:40:15,520
So plugins can, as I mentioned, can be either Python or JavaScript.

1537
01:40:15,520 --> 01:40:21,520
And they can use Python packages or JavaScript packages.

1538
01:40:21,520 --> 01:40:31,520
And they can load things in the page or they can just load in the Python interpreter or the JavaScript interpreter itself.

1539
01:40:31,520 --> 01:40:39,520
Another thing to mention is a bunch of core functionality in PyScript are written, those are written using plugins as well.

1540
01:40:39,520 --> 01:40:51,520
So the terminal, for instance, that you see the logs from the Python interpreter, that is a plugin itself that is just served with the whole package.

1541
01:40:51,520 --> 01:40:57,520
As I mentioned, plugins are different than modules, but oftentimes they overlap in functionality.

1542
01:40:57,520 --> 01:41:00,520
So those are the nice things about plugins.

1543
01:41:00,520 --> 01:41:05,520
It also has a bunch of not great things at the moment.

1544
01:41:05,520 --> 01:41:16,520
They are not complete yet. So we didn't map all the lifecycle events to API hooks yet.

1545
01:41:16,520 --> 01:41:22,520
Both for Python, I think for JavaScript, almost all of them are exposed.

1546
01:41:22,520 --> 01:41:24,520
For Python, not all of them.

1547
01:41:24,520 --> 01:41:34,520
And even when we complete the Python events, we're not going to have the same number of hooks in Python that we have in JavaScript.

1548
01:41:34,520 --> 01:41:41,520
Because Python takes some time to load and a lot of things happen before that happens.

1549
01:41:41,520 --> 01:41:46,520
So JavaScript is already ready in your browser. So we can intercept a lot of events.

1550
01:41:46,520 --> 01:41:53,520
Python plugins are going to accept hooks only when the interpreter has loaded.

1551
01:41:53,520 --> 01:41:57,520
Hopefully it makes sense.

1552
01:41:57,520 --> 01:42:04,520
Also, the custom elements allow you to connect to DOM events.

1553
01:42:04,520 --> 01:42:16,520
So for instance, when the Python markdown tag loads when the browser sends a connected signal to the class itself.

1554
01:42:16,520 --> 01:42:25,520
Basically when it connects or puts your tag in the DOM, that function is called.

1555
01:42:25,520 --> 01:42:28,520
So that's the only one that we connect to right now.

1556
01:42:28,520 --> 01:42:34,520
So for instance, if you resize your browser, that is another event that I think is called resize that is not mapped right now.

1557
01:42:34,520 --> 01:42:39,520
You can manually do it, but we want to provide APIs for you to do automatically.

1558
01:42:39,520 --> 01:42:49,520
Also, another thing that is missing is Python and JavaScript plugins should be able to declare their dependencies.

1559
01:42:49,520 --> 01:42:56,520
So for instance, the markdown plugin depends on the markdown package, the Python markdown package.

1560
01:42:56,520 --> 01:43:04,520
Right now I have to add it explicitly. In the future it should just work.

1561
01:43:04,520 --> 01:43:10,520
So we covered how to use a plugin. Now let's see how to create a plugin.

1562
01:43:10,520 --> 01:43:15,520
This is the Python code for a simple Hello World plugin.

1563
01:43:15,520 --> 01:43:20,520
All you need to do is to import a plugin class, declare, here.

1564
01:43:20,520 --> 01:43:28,520
And then to create a custom element, we have a decorator that allows you to decorate a class and say,

1565
01:43:28,520 --> 01:43:33,520
hey, use this class creating this new tag, Python Hello World.

1566
01:43:33,520 --> 01:43:44,520
And then this is the method that executes exactly when the element is connected to the DOM.

1567
01:43:44,520 --> 01:43:48,520
So in this case, it basically is just printing Hello World inside of it.

1568
01:43:48,520 --> 01:43:52,520
But you can think of a lot of creative ways to do it.

1569
01:43:52,520 --> 01:43:57,520
Actually, I will show you the code for the Python markdown as well.

1570
01:43:57,520 --> 01:44:04,520
Another thing to mention right now, JavaScript plugins are mainly internal only.

1571
01:44:04,520 --> 01:44:10,520
We exposed them with the latest release, so you can actually use it, but they're not documented yet.

1572
01:44:10,520 --> 01:44:18,520
And it's explicit reasons we wanted to wait until we get a few things sorted,

1573
01:44:18,520 --> 01:44:24,520
but they're most likely to be officially exposed and supported in the next release.

1574
01:44:24,520 --> 01:44:26,520
Question?

1575
01:44:26,520 --> 01:44:32,520
Can you clarify some of the answers?

1576
01:44:32,520 --> 01:44:37,520
I have definitely been to Linux before, but I think it's based on Python JavaScript,

1577
01:44:37,520 --> 01:44:39,520
but maybe you have a question about that.

1578
01:44:39,520 --> 01:44:45,520
Is the goal here to enable an only if you have to, or do you really just keep it in a full player?

1579
01:44:45,520 --> 01:44:46,520
Great question.

1580
01:44:46,520 --> 01:44:55,520
So the question was, is the goal here to support JavaScript only if you really need to

1581
01:44:55,520 --> 01:45:00,520
and try to give as much functionality on the Python side as possible?

1582
01:45:00,520 --> 01:45:08,520
And yes, we wanted to make sure, like, I would want everyone to just do Python plugins if they can.

1583
01:45:08,520 --> 01:45:10,520
There are a few caveats.

1584
01:45:10,520 --> 01:45:16,520
For specific things, JavaScript plugins are going to be more performant because of loading time,

1585
01:45:16,520 --> 01:45:24,520
because of just decades of JavaScript being native to the browser and things like that.

1586
01:45:24,520 --> 01:45:31,520
And also, if you need to do specific things before the interpreter has loaded,

1587
01:45:31,520 --> 01:45:39,520
or you can't allow yourself a significant loading time, then you will have to do JavaScript plugins.

1588
01:45:39,520 --> 01:45:45,520
But on the second case, as soon as we officially support MicroPython,

1589
01:45:45,520 --> 01:45:49,520
I think a lot of those cases will drop because it's blazing fast.

1590
01:45:49,520 --> 01:45:51,520
And so that would be a good thing, too.

1591
01:45:51,520 --> 01:45:55,520
Another thing worth mentioning is that the JavaScript interface,

1592
01:45:55,520 --> 01:46:01,520
FFI interface between Python and JavaScript is only available on Pyodide.

1593
01:46:01,520 --> 01:46:06,520
We are currently working with the two projects to create a generic interface

1594
01:46:06,520 --> 01:46:09,520
that could work at the PyScript level,

1595
01:46:09,520 --> 01:46:17,520
and we will allow you to just use the same interface for both interpreters and without problems.

1596
01:46:17,520 --> 01:46:26,520
The same work is also going to enable you to run code inside Web Workers

1597
01:46:26,520 --> 01:46:33,520
that will allow faster execution, will allow actually you to block code,

1598
01:46:33,520 --> 01:46:39,520
which means I can have a debugger now, which means I have parallel tasks and other things like this.

1599
01:46:39,520 --> 01:46:41,520
Nicholas, you wanted to say?

1600
01:46:41,520 --> 01:46:47,520
Yes, so, Kavya mentioned ongoing work with MicroPython and PyDiode.

1601
01:46:47,520 --> 01:46:56,520
We've got basic work in Node, and it's open-stages for MicroPython, but it's there.

1602
01:46:56,520 --> 01:46:58,520
It's not like, could we do it?

1603
01:46:58,520 --> 01:47:00,520
Well, yes, it's kind of been done.

1604
01:47:00,520 --> 01:47:04,520
We now need to refine that and check it and test it and blah, blah, blah.

1605
01:47:04,520 --> 01:47:07,520
We felt it was a little kind of a significant amount of work.

1606
01:47:07,520 --> 01:47:16,520
Great.

1607
01:47:16,520 --> 01:47:22,520
So, I had the link to the official documentation here,

1608
01:47:22,520 --> 01:47:27,520
but I'm basically done with the content that I wanted to show.

1609
01:47:27,520 --> 01:47:32,520
There is a full section about plugins in the PyScript documentation,

1610
01:47:32,520 --> 01:47:38,520
so I suggest to check there, and I wanted to show you all a couple of things.

1611
01:47:38,520 --> 01:47:43,520
So, this is actually the code for the presentation itself, right?

1612
01:47:43,520 --> 01:47:50,520
This is the code for the PyMarkdown plugin, which is not a whole lot,

1613
01:47:50,520 --> 01:47:56,520
and this is basically here just to show how to hook into lifecycle events.

1614
01:47:56,520 --> 01:47:57,520
It's not really needed.

1615
01:47:57,520 --> 01:48:03,520
Oh, yes. Thank you for reminding me.

1616
01:48:03,520 --> 01:48:07,520
So, this code here creates the plugin class.

1617
01:48:07,520 --> 01:48:09,520
You don't need those, really.

1618
01:48:09,520 --> 01:48:11,520
You could just use the plugin directly,

1619
01:48:11,520 --> 01:48:17,520
but this shows you how to hook into the configure events.

1620
01:48:17,520 --> 01:48:23,520
So, basically, as soon as we parse the tunnel and the configuration of your environment is done,

1621
01:48:23,520 --> 01:48:25,520
this method is being called.

1622
01:48:25,520 --> 01:48:29,520
And right after we set up a whole environment and the Python interpreter,

1623
01:48:29,520 --> 01:48:31,520
this event is being called.

1624
01:48:31,520 --> 01:48:34,520
And then the rest is just as I showed you before.

1625
01:48:34,520 --> 01:48:38,520
We are registering a Markdown tag, which is this one,

1626
01:48:38,520 --> 01:48:46,520
and inside here I'm using the Markdown module and the HTML module,

1627
01:48:46,520 --> 01:48:57,520
this and this, to get the HTML inside the PyMD tag and unscape the content

1628
01:48:57,520 --> 01:49:01,520
because it's the web and everything is escaped.

1629
01:49:01,520 --> 01:49:09,520
And then here use Markdown to parse it and generate HTML for us.

1630
01:49:09,520 --> 01:49:17,520
The other thing I wanted to show is why I'm not...

1631
01:49:17,520 --> 01:49:19,520
Oh, the other thing as well.

1632
01:49:19,520 --> 01:49:24,520
As you can see, this is the whole code for the presentation, everything I showed you.

1633
01:49:24,520 --> 01:49:30,520
So, yes, Review.js is way more mature, has animations,

1634
01:49:30,520 --> 01:49:32,520
has support for a lot of things,

1635
01:49:32,520 --> 01:49:36,520
but if you look at the code for a presentation, it's a lot of files,

1636
01:49:36,520 --> 01:49:39,520
a lot of JavaScript files, a lot of things.

1637
01:49:39,520 --> 01:49:42,520
We will be adding more features, but we really want to make sure that

1638
01:49:42,520 --> 01:49:48,520
as we develop supported frameworks like PiperCard or PyScript itself,

1639
01:49:48,520 --> 01:49:50,520
we want to keep it simple, right?

1640
01:49:50,520 --> 01:49:58,520
I'm doing the whole presentation with just a CSS file and the PiperCard framework,

1641
01:49:58,520 --> 01:50:02,520
which is just those four files basically.

1642
01:50:02,520 --> 01:50:04,520
Everything is in here.

1643
01:50:04,520 --> 01:50:08,520
I'm not sure I'm having internet issues, but anyway.

1644
01:50:10,520 --> 01:50:14,520
And as you can see, it works just fine.

1645
01:50:16,520 --> 01:50:19,520
I have another demo, but I will do right after that.

1646
01:50:19,520 --> 01:50:21,520
Otherwise, questions?

1647
01:50:24,520 --> 01:50:26,520
All right.

1648
01:50:26,520 --> 01:50:29,520
Oh, sorry, I haven't seen.

1649
01:50:29,520 --> 01:50:31,520
Yes, I will share this.

1650
01:50:31,520 --> 01:50:36,520
Yeah, I can share the link already.

1651
01:50:36,520 --> 01:50:41,520
Just know that the two art frames are not going to show,

1652
01:50:41,520 --> 01:50:44,520
but the rest of the presentation and everything else can be used already.

1653
01:50:49,520 --> 01:50:51,520
Yes.

1654
01:50:51,520 --> 01:50:55,520
Yeah, Nicholas is probably looking at me and saying,

1655
01:50:55,520 --> 01:50:57,520
what are you doing?

1656
01:50:57,520 --> 01:51:01,520
PiperCard is very alpha also, so keep that in mind.

1657
01:51:25,520 --> 01:51:30,340
So, if you have a

1658
01:51:30,340 --> 01:51:32,520
presentation called that info is written in Python,

1659
01:51:32,520 --> 01:51:36,520
and you can use to express Python and demonstrate Python,

1660
01:51:36,520 --> 01:51:40,520
then that's a very compelling story for the education sector.

1661
01:51:40,520 --> 01:51:42,520
Yeah.

1662
01:51:42,520 --> 01:51:49,520
That, within trying to look at students, educators,

1663
01:51:49,520 --> 01:51:53,520
education is a big target for us.

1664
01:51:53,520 --> 01:51:57,520
Also, like the same thing, think about presentations

1665
01:51:57,520 --> 01:52:00,520
where you can show your data and you interact with your data,

1666
01:52:00,520 --> 01:52:04,520
and you're not just looking at static images,

1667
01:52:04,520 --> 01:52:08,520
but you're actually querying stuff, and you're displaying live data,

1668
01:52:08,520 --> 01:52:12,520
and you can run models and all those sorts of things.

1669
01:52:12,520 --> 01:52:20,520
We want to create new ways of just displaying data

1670
01:52:20,520 --> 01:52:24,520
or interacting with your applications and whatnot.

1671
01:52:24,520 --> 01:52:28,520
And plugins is in that direction, the spots that you can run

1672
01:52:28,520 --> 01:52:31,520
and experiment with.

1673
01:52:31,520 --> 01:52:35,520
Cool.

1674
01:52:35,520 --> 01:52:38,520
This is actually my first PyCon,

1675
01:52:38,520 --> 01:52:45,520
and I started using Python in, it was 99, version 1.5.2,

1676
01:52:45,520 --> 01:52:48,520
and I've used it on the server side a lot,

1677
01:52:48,520 --> 01:52:53,520
but if you were to ask me what I do normally,

1678
01:52:53,520 --> 01:52:57,520
I'm sort of TypeScript, JavaScript native.

1679
01:52:57,520 --> 01:53:01,520
That's the world I've lived in for the past decade.

1680
01:53:01,520 --> 01:53:05,520
And so this project for me is kind of returning back to,

1681
01:53:05,520 --> 01:53:08,520
my Python is improving, I think that's,

1682
01:53:08,520 --> 01:53:12,520
I can pretty confidently say that's happening at a rapid pace.

1683
01:53:12,520 --> 01:53:19,520
But what I want to show you is I want to talk about the browser's APIs

1684
01:53:19,520 --> 01:53:23,520
as an additional standard library that you have access to

1685
01:53:23,520 --> 01:53:26,520
that is not in the Python standard library.

1686
01:53:26,520 --> 01:53:28,520
This is a different environment,

1687
01:53:28,520 --> 01:53:30,520
and you can take full advantage of the browser,

1688
01:53:30,520 --> 01:53:32,520
and the browser does amazing things.

1689
01:53:32,520 --> 01:53:36,520
It has some APIs that are hard to understand,

1690
01:53:36,520 --> 01:53:39,520
but PyScript gives you full access to those.

1691
01:53:39,520 --> 01:53:42,520
And so I want to take you through what that means,

1692
01:53:42,520 --> 01:53:44,520
how you can use those to your advantage,

1693
01:53:44,520 --> 01:53:47,520
and then I'm going to take you on a tour of those.

1694
01:53:47,520 --> 01:53:51,520
There is a URL in the corner of this slide.

1695
01:53:51,520 --> 01:53:58,520
If you open that, you will get a list of all the examples that I'm going to show you.

1696
01:53:58,520 --> 01:54:00,520
And in the bottom right-hand corner,

1697
01:54:00,520 --> 01:54:04,520
there is a view code button that allows you to copy them into your PyScript.com hole.

1698
01:54:05,520 --> 01:54:08,520
So please bookmark that URL,

1699
01:54:08,520 --> 01:54:13,520
and you'll be able to take any of these examples and kind of run with it.

1700
01:54:13,520 --> 01:54:21,520
As Jeff discussed, the import, the JS module is a direct mapping

1701
01:54:21,520 --> 01:54:25,520
with kind of some light Pythonic translation

1702
01:54:25,520 --> 01:54:29,520
to the default global this object of the browser window.

1703
01:54:29,520 --> 01:54:33,520
And global this is the global object upon which every page is loaded.

1704
01:54:33,520 --> 01:54:37,520
So anytime you load a web page, you get a brand new global this,

1705
01:54:37,520 --> 01:54:42,520
and the browser basically exposes, based on the domain that you're on,

1706
01:54:42,520 --> 01:54:45,520
exposes these APIs for you to take advantage of.

1707
01:54:45,520 --> 01:54:51,520
Depending on the state of that URL, certain things are exposed.

1708
01:54:51,520 --> 01:54:56,520
So if you're not on HTTPS, there's functionality that the browser truncates.

1709
01:54:56,520 --> 01:55:01,520
So the standard library of the browser changes contextually based on where you are,

1710
01:55:01,520 --> 01:55:07,520
how the domain was set up, how the security policy of the domain was set up, and the like.

1711
01:55:07,520 --> 01:55:09,520
There's lots of documentation on it.

1712
01:55:09,520 --> 01:55:13,520
I'll show you the best place to go, which is really the Mozilla Docs.

1713
01:55:13,520 --> 01:55:18,520
They're fantastic in the sense that every API that I'm going to show you today

1714
01:55:18,520 --> 01:55:23,520
is very, very well documented on the web on the Mozilla Docs.

1715
01:55:23,520 --> 01:55:29,520
And so in this particular case, if you wanted to access console log,

1716
01:55:29,520 --> 01:55:34,520
console debug, console, there's a ton of objects inside of console,

1717
01:55:34,520 --> 01:55:39,520
you can simply call js.console.log.

1718
01:55:39,520 --> 01:55:44,520
And that API allows you to write to the console.

1719
01:55:44,520 --> 01:55:45,520
So it's not a print statement.

1720
01:55:45,520 --> 01:55:51,520
The output is not going to go to the DOM, which PyScript enables.

1721
01:55:51,520 --> 01:55:53,520
That's my alarm to pick up my son today.

1722
01:55:53,520 --> 01:55:55,520
Apologies.

1723
01:55:55,520 --> 01:55:56,520
There we go.

1724
01:55:56,520 --> 01:55:58,520
Reality strikes.

1725
01:55:58,520 --> 01:56:03,520
Call your wife or cook your son.

1726
01:56:03,520 --> 01:56:08,520
I have the voice of a wife and a grandchild.

1727
01:56:08,520 --> 01:56:11,520
Daddy's presenting.

1728
01:56:11,520 --> 01:56:16,520
Okay, so console log allows you to log things, and you can log objects,

1729
01:56:16,520 --> 01:56:18,520
you can log any type of data you want.

1730
01:56:18,520 --> 01:56:23,520
And actually in this case, you can actually inspect some of the items kind of behind the scenes.

1731
01:56:24,520 --> 01:56:28,520
If you open up your console in the browser, you can basically see this console log

1732
01:56:28,520 --> 01:56:29,520
and what gets emitted.

1733
01:56:29,520 --> 01:56:34,520
But one of the handier things is being able to actually grab a reference

1734
01:56:34,520 --> 01:56:38,520
to an item that is in the DOM and basically then begin manipulating it.

1735
01:56:38,520 --> 01:56:43,520
So in this case, js.document.gelelementid,

1736
01:56:43,520 --> 01:56:51,520
that will return a reference to the node in the browser that is denoted by id equals my div.

1737
01:56:51,520 --> 01:56:58,520
And so using ids is a pretty standard way to do selectors and bring data back.

1738
01:56:58,520 --> 01:57:02,520
But once you have that, you can do interesting things with it, like write to it.

1739
01:57:02,520 --> 01:57:03,520
You can modify its data.

1740
01:57:03,520 --> 01:57:05,520
You can change its state.

1741
01:57:05,520 --> 01:57:07,520
And you can do this at any point in time.

1742
01:57:07,520 --> 01:57:12,520
And so these APIs are important because you're working in the browser.

1743
01:57:12,520 --> 01:57:19,520
PyScript is inside of the browser runtime, and all of this is accessible to you.

1744
01:57:19,520 --> 01:57:24,520
Additionally, the import js module actually is writable.

1745
01:57:24,520 --> 01:57:29,520
So if you write data to it, JavaScript has access to that data as well.

1746
01:57:29,520 --> 01:57:31,520
So this is bidirectional.

1747
01:57:31,520 --> 01:57:35,520
You can, in this last example, js.foo equals 1234,

1748
01:57:35,520 --> 01:57:42,520
there is an integer sitting in the global space that you can pull from JavaScript and read.

1749
01:57:42,520 --> 01:57:46,520
So this isn't a one-way street where everything's jailed into Python.

1750
01:57:46,520 --> 01:57:51,520
You actually can go back and forth and do interesting things across those boundaries.

1751
01:57:51,520 --> 01:57:55,520
And because of the way that the FFI was written,

1752
01:57:55,520 --> 01:57:59,520
those objects are manipulatable in Python directly.

1753
01:57:59,520 --> 01:58:02,520
And I'm going to show you a couple examples of that.

1754
01:58:02,520 --> 01:58:08,520
So first thing I'm going to do, I'm going to open this URL, and I'm going to zoom in a bit.

1755
01:58:08,520 --> 01:58:14,520
Yes, the foreign function interface.

1756
01:58:14,520 --> 01:58:15,520
There's actually two of them.

1757
01:58:15,520 --> 01:58:19,520
There's one from JavaScript to Python, and there's one from Python to JavaScript.

1758
01:58:19,520 --> 01:58:23,520
It's basically how do you call from inside of Python out to JavaScript,

1759
01:58:23,520 --> 01:58:26,520
and how do you call from JavaScript into Python?

1760
01:58:26,520 --> 01:58:29,520
And that is part of the PyI project,

1761
01:58:29,520 --> 01:58:35,520
although much of that is actually being ported and moved additionally to the MicroPython runtime.

1762
01:58:35,520 --> 01:58:41,520
So we're going to try to do this with both runtimes in an elegant way.

1763
01:58:41,520 --> 01:58:45,520
So the first place I'd like to take you is the docs.

1764
01:58:45,520 --> 01:58:49,520
This is absolutely the best documentation on the web that exists.

1765
01:58:49,520 --> 01:58:51,520
Use it.

1766
01:58:51,520 --> 01:58:53,520
Please don't go to the other sites.

1767
01:58:53,520 --> 01:59:00,520
If you W3 schools, I know I'm not, like I would strongly recommend going to Mozilla Docs.

1768
01:59:00,520 --> 01:59:06,520
Whenever you see it, click on my Mozilla Docs link, and you'll get information about what you need.

1769
01:59:06,520 --> 01:59:09,520
Now inside of this, there are some interesting APIs.

1770
01:59:09,520 --> 01:59:13,520
Well, I can get the battery status of any device.

1771
01:59:13,520 --> 01:59:17,520
I can tell when the battery is low from a web page,

1772
01:59:17,520 --> 01:59:20,520
and it's especially valuable on mobile if you have a mobile app

1773
01:59:20,520 --> 01:59:23,520
and you're running into low network conditions,

1774
01:59:23,520 --> 01:59:28,520
and you can actually query and show what the battery meter is.

1775
01:59:28,520 --> 01:59:32,520
And these are accessible through the Navigator object,

1776
01:59:32,520 --> 01:59:36,520
but Navigator is just JavaScript.Navigator.

1777
01:59:36,520 --> 01:59:41,520
And in this, in the global, in the JS global object,

1778
01:59:41,520 --> 01:59:47,520
the namespace is not Pythonically, it's not snake case.

1779
01:59:47,520 --> 01:59:49,520
It actually uses camel case.

1780
01:59:49,520 --> 01:59:54,520
So anytime you're in here, all of the API names are camel case.

1781
01:59:54,520 --> 01:59:56,520
There's one exception that you need to understand.

1782
01:59:56,520 --> 02:00:01,520
There is no new constructor in Python, but there is in JavaScript.

1783
02:00:01,520 --> 02:00:05,520
And to access that keyword, you basically go to the end of the name

1784
02:00:05,520 --> 02:00:07,520
and you tack on .new.

1785
02:00:07,520 --> 02:00:09,520
You call a new method on the end of it.

1786
02:00:09,520 --> 02:00:12,520
That will simulate the JS constructor.

1787
02:00:12,520 --> 02:00:16,520
So if you run into it, you're trying to create a particular object type,

1788
02:00:16,520 --> 02:00:22,520
like a new date, you need to go JS, capital date, .new,

1789
02:00:22,520 --> 02:00:26,520
call a function, and you'll get back a new date object.

1790
02:00:26,520 --> 02:00:27,520
Yes?

1791
02:00:27,520 --> 02:00:31,520
Why do you have to take it into a more technical study?

1792
02:00:31,520 --> 02:00:33,520
It's a great question.

1793
02:00:33,520 --> 02:00:38,520
I believe the intent was to, because it's dynamically generated,

1794
02:00:38,520 --> 02:00:40,520
it's always accurate.

1795
02:00:40,520 --> 02:00:45,520
And so the browser APIs have been in change for a long, long time.

1796
02:00:45,520 --> 02:00:48,520
Browsers introduced new functionality.

1797
02:00:48,520 --> 02:00:52,520
One example is Chrome actually just, you know,

1798
02:00:52,520 --> 02:00:56,520
just provided a release version of WebGPU.

1799
02:00:56,520 --> 02:01:00,520
That actually allows you to tap the GPU of the local machine

1800
02:01:00,520 --> 02:01:03,520
and to do some pretty interesting calculations on it,

1801
02:01:03,520 --> 02:01:07,520
including ML, AI-related training.

1802
02:01:07,520 --> 02:01:12,520
I mean, you're actually able to tap into the GPU and do matrix,

1803
02:01:12,520 --> 02:01:17,520
you know, the complex calculations that only a GPU can use.

1804
02:01:17,520 --> 02:01:21,520
And so for that API to work well,

1805
02:01:21,520 --> 02:01:26,520
instead of us having to update Pi-Adyde and PyScript to always be accurate,

1806
02:01:26,520 --> 02:01:30,520
it's better to have that interface be dynamic and reflect what is actually

1807
02:01:30,520 --> 02:01:32,520
there at runtime.

1808
02:01:32,520 --> 02:01:35,520
So that interop basically is done in camel case.

1809
02:01:35,520 --> 02:01:37,520
I guess we could translate it somewhat,

1810
02:01:37,520 --> 02:01:40,520
but there are edges and inconsistencies,

1811
02:01:40,520 --> 02:01:42,520
and there are things that would cause us to do more work.

1812
02:01:42,520 --> 02:01:46,520
We'd rather expose the functionality and give you the benefits of being able

1813
02:01:46,520 --> 02:01:50,520
to use it in its standardized kind of state.

1814
02:01:50,520 --> 02:01:53,520
So if you copy any of the names that are in the JS object,

1815
02:01:53,520 --> 02:01:58,520
you can look them up in Mozilla Docs and find out exactly what behavior you're going to get.

1816
02:01:58,520 --> 02:02:02,520
Now, there is some issues with object translation.

1817
02:02:02,520 --> 02:02:07,520
A lot of the items that the standard library in the browser returns

1818
02:02:07,520 --> 02:02:10,520
are actually JavaScript objects,

1819
02:02:10,520 --> 02:02:15,520
and the current default for Pi-Adyde is actually returning a JavaScript map,

1820
02:02:15,520 --> 02:02:18,520
not a JavaScript object.

1821
02:02:18,520 --> 02:02:22,520
You can modify that, and it's an ongoing debate,

1822
02:02:22,520 --> 02:02:25,520
but there are edge cases here that you'll run into and be like,

1823
02:02:25,520 --> 02:02:26,520
it just doesn't work.

1824
02:02:26,520 --> 02:02:28,520
Well, it works.

1825
02:02:28,520 --> 02:02:32,520
It's kind of lost in translation in some areas,

1826
02:02:32,520 --> 02:02:34,520
but there are ways around it.

1827
02:02:34,520 --> 02:02:40,520
On that topic, why not have a platonic version of those APIs?

1828
02:02:40,520 --> 02:02:43,520
One is also, the other side of it is also time.

1829
02:02:43,520 --> 02:02:45,520
We don't get to it yet,

1830
02:02:45,520 --> 02:02:48,520
but the more the project matures,

1831
02:02:48,520 --> 02:02:52,520
we are going to identify the APIs that people are using the most,

1832
02:02:52,520 --> 02:02:56,520
and it makes more sense to make it Python-ic and expose it.

1833
02:02:56,520 --> 02:03:00,520
Maybe a module or something like this where you can have a Python-ic version of it.

1834
02:03:00,520 --> 02:03:04,520
The element class that Jeff mentioned is one of those cases

1835
02:03:04,520 --> 02:03:07,520
where we want to make something more Python-ic.

1836
02:03:07,520 --> 02:03:10,520
One last little thing on JS and Python Inter out there.

1837
02:03:10,520 --> 02:03:13,520
A lot of it is the case where Python has a keyword,

1838
02:03:13,520 --> 02:03:15,520
and JavaScript doesn't, or vice versa.

1839
02:03:15,520 --> 02:03:19,520
For example, the array class, which is like Python's list in JavaScript,

1840
02:03:19,520 --> 02:03:21,520
has a method dot from.

1841
02:03:21,520 --> 02:03:24,520
You pass an iterable and it creates an array, array dot from.

1842
02:03:24,520 --> 02:03:26,520
You can't have a method called from in Python

1843
02:03:26,520 --> 02:03:28,520
because from is a keyword in Python.

1844
02:03:28,520 --> 02:03:31,520
Python has ways around it as you put an underscore in front of it.

1845
02:03:31,520 --> 02:03:34,520
There are workarounds to these things that are built for the runtime,

1846
02:03:34,520 --> 02:03:36,520
but a lot of it is like that.

1847
02:03:36,520 --> 02:03:38,520
Cool. I didn't know about from.

1848
02:03:38,520 --> 02:03:39,520
Oh, yeah, that's new.

1849
02:03:39,520 --> 02:03:41,520
There we go.

1850
02:03:41,520 --> 02:03:43,520
I'm going to go into this selector API.

1851
02:03:43,520 --> 02:03:46,520
Right now it's going to be a pretty boring example.

1852
02:03:46,520 --> 02:03:48,520
It basically registers.

1853
02:03:48,520 --> 02:03:50,520
But if I look at the code,

1854
02:03:50,520 --> 02:03:53,520
and I can actually run this in my project,

1855
02:03:53,520 --> 02:03:55,520
so you can copy this into your own project,

1856
02:03:55,520 --> 02:03:57,520
it's very simple.

1857
02:03:57,520 --> 02:03:59,520
Let me zoom in to make sure.

1858
02:04:01,520 --> 02:04:03,520
This code is two lines.

1859
02:04:03,520 --> 02:04:06,520
Essentially, query selector, I'm going to target a particular div,

1860
02:04:06,520 --> 02:04:08,520
and then I'm going to take that node,

1861
02:04:08,520 --> 02:04:10,520
I'm going to write to it via innerHTML,

1862
02:04:10,520 --> 02:04:12,520
and I'm going to modify it.

1863
02:04:12,520 --> 02:04:16,520
At runtime, you can modify any DOM element.

1864
02:04:16,520 --> 02:04:18,520
You grab a handle to it,

1865
02:04:18,520 --> 02:04:20,520
and then you just set the innerHTML, innerText,

1866
02:04:20,520 --> 02:04:22,520
and that DOM element has been modified.

1867
02:04:22,520 --> 02:04:24,520
In this case, I'm wrapping it in strong,

1868
02:04:24,520 --> 02:04:26,520
so it's bold,

1869
02:04:26,520 --> 02:04:30,520
and the result here is target div here.

1870
02:04:30,520 --> 02:04:32,520
It's very simple,

1871
02:04:32,520 --> 02:04:36,520
but you can see how these build up.

1872
02:04:36,520 --> 02:04:38,520
This is the primary way that you'd have an application

1873
02:04:38,520 --> 02:04:40,520
to show a new state of an application.

1874
02:04:40,520 --> 02:04:42,520
You'd change the contents of a particular div,

1875
02:04:42,520 --> 02:04:46,520
or you'd hide one div and show another one.

1876
02:04:48,520 --> 02:04:50,520
Let's back up.

1877
02:04:52,520 --> 02:04:54,520
Write to.

1878
02:04:54,520 --> 02:04:57,520
This one is interesting because it basically goes through writing

1879
02:04:57,520 --> 02:05:01,520
to all the different things within your app.

1880
02:05:10,520 --> 02:05:12,520
I hope you'll find your son calling that.

1881
02:05:12,520 --> 02:05:14,520
Come meet me up.

1882
02:05:18,520 --> 02:05:20,520
In this particular example,

1883
02:05:20,520 --> 02:05:22,520
let me actually pull it up here.

1884
02:05:22,520 --> 02:05:26,520
I have write to,

1885
02:05:26,520 --> 02:05:28,520
and if you go into write to,

1886
02:05:28,520 --> 02:05:33,520
it's a fairly simple example.

1887
02:05:33,520 --> 02:05:36,520
I know the window here is hard to read,

1888
02:05:36,520 --> 02:05:40,520
but from JS, import console and document.

1889
02:05:40,520 --> 02:05:42,520
You can actually be really specific about

1890
02:05:42,520 --> 02:05:45,520
which items you want to pull and use.

1891
02:05:45,520 --> 02:05:49,520
In this case, I'm going to modify the JavaScript title of the document.

1892
02:05:49,520 --> 02:05:54,520
I'm actually modifying the title in the head of the document.

1893
02:05:54,520 --> 02:05:57,520
I can actually write to that.

1894
02:05:57,520 --> 02:05:59,520
If I open up this,

1895
02:05:59,520 --> 02:06:01,520
let me see, I'll open it up in a tab,

1896
02:06:01,520 --> 02:06:03,520
you can actually see this.

1897
02:06:03,520 --> 02:06:05,520
It actually changed hello via title.

1898
02:06:05,520 --> 02:06:08,520
That's one way to write.

1899
02:06:08,520 --> 02:06:12,520
The other way to write is to write to the console log.

1900
02:06:12,520 --> 02:06:15,520
Another way to write is to actually use display.

1901
02:06:15,520 --> 02:06:18,520
Display is an internal API for PyScript,

1902
02:06:18,520 --> 02:06:20,520
and you can actually target display.

1903
02:06:20,520 --> 02:06:23,520
You can give it a target div

1904
02:06:23,520 --> 02:06:26,520
to where it always writes its output to that.

1905
02:06:26,520 --> 02:06:29,520
It's very handy if you're working with Matplotlib

1906
02:06:29,520 --> 02:06:31,520
and you end up with a plot

1907
02:06:31,520 --> 02:06:33,520
and you want to actually render the plot somewhere.

1908
02:06:33,520 --> 02:06:35,520
You just say display plot,

1909
02:06:35,520 --> 02:06:38,520
and then you pass the div reference to it,

1910
02:06:38,520 --> 02:06:41,520
and it'll just write to that target.

1911
02:06:41,520 --> 02:06:43,520
Another one is the simple print statement.

1912
02:06:43,520 --> 02:06:45,520
We're used to that.

1913
02:06:45,520 --> 02:06:51,520
But this one, I'm going to create a new paragraph element.

1914
02:06:51,520 --> 02:06:55,520
I'm going to write to its inner HTML,

1915
02:06:55,520 --> 02:06:57,520
and then I'm actually going to take that new paragraph element

1916
02:06:57,520 --> 02:06:59,520
that I've created and add it to the DOM.

1917
02:06:59,520 --> 02:07:01,520
I'm going to append it.

1918
02:07:01,520 --> 02:07:04,520
I'm going to append the child to the body object.

1919
02:07:04,520 --> 02:07:08,520
Now we're actually in memory creating an object,

1920
02:07:08,520 --> 02:07:13,520
a p tag, a paragraph tag, and adding it to the DOM directly.

1921
02:07:13,520 --> 02:07:17,520
Again, these are standard JavaScript APIs,

1922
02:07:17,520 --> 02:07:20,520
but they're exposed in Python in an elegant way

1923
02:07:20,520 --> 02:07:24,520
that allows you to do what you need to do.

1924
02:07:24,520 --> 02:07:26,520
Let's go back here.

1925
02:07:31,520 --> 02:07:33,520
This one is geolocation.

1926
02:07:33,520 --> 02:07:37,520
Every browser has a geolocation API object,

1927
02:07:37,520 --> 02:07:41,520
and when you access it, it basically will write the location.

1928
02:07:41,520 --> 02:07:43,520
In this particular case,

1929
02:07:43,520 --> 02:07:46,520
it is giving me the lat-long of exactly where I am

1930
02:07:46,520 --> 02:07:49,520
on the network of this.

1931
02:07:49,520 --> 02:07:53,520
Now, I'm not sure how they've wired this facility

1932
02:07:53,520 --> 02:07:55,520
or where the internet goes from here,

1933
02:07:55,520 --> 02:07:58,520
but this is probably the documented IP address

1934
02:07:58,520 --> 02:08:02,520
of the router that this facility attaches to.

1935
02:08:02,520 --> 02:08:05,520
It can give you pretty decent geolocation.

1936
02:08:05,520 --> 02:08:08,520
More or less, it's 11 meters,

1937
02:08:08,520 --> 02:08:11,520
and it gives you the accuracy as an output,

1938
02:08:11,520 --> 02:08:13,520
so it can kind of determine.

1939
02:08:13,520 --> 02:08:15,520
Yes, Nicholas.

1940
02:08:15,520 --> 02:08:17,520
Yes.

1941
02:08:29,520 --> 02:08:31,520
Yeah, and if you're on a VPN,

1942
02:08:31,520 --> 02:08:33,520
you'll find out where your VPN is hosted.

1943
02:08:33,520 --> 02:08:37,520
So again, it's just as accurate as the network that you're on.

1944
02:08:37,520 --> 02:08:39,520
Mileage may vary.

1945
02:08:39,520 --> 02:08:42,520
But this API is pretty easy to access.

1946
02:08:42,520 --> 02:08:44,520
Let me pull up the example.

1947
02:08:44,520 --> 02:08:46,520
Geolocation.

1948
02:08:46,520 --> 02:08:49,520
So I'm going to import JS.

1949
02:08:49,520 --> 02:08:53,520
I'm also going to import, create proxy, and to JS.

1950
02:08:53,520 --> 02:08:55,520
Jeff touched on those a bit.

1951
02:08:55,520 --> 02:08:59,520
And the options, I'm basically going to set some options,

1952
02:08:59,520 --> 02:09:03,520
enable high accuracy, a timeout of 500,

1953
02:09:03,520 --> 02:09:07,520
or five seconds, and maximum age of zero.

1954
02:09:07,520 --> 02:09:10,520
And then when the page loads,

1955
02:09:10,520 --> 02:09:13,520
we have a function called success,

1956
02:09:13,520 --> 02:09:15,520
and success yields the position items,

1957
02:09:15,520 --> 02:09:17,520
and the position coordinates are there.

1958
02:09:17,520 --> 02:09:19,520
And then this is that output that basically,

1959
02:09:19,520 --> 02:09:23,520
an F string that basically prints the coordinates

1960
02:09:23,520 --> 02:09:27,520
to the print statement.

1961
02:09:27,520 --> 02:09:30,520
But in effect, this is the call.

1962
02:09:30,520 --> 02:09:33,520
Window navigator geolocation, get current position,

1963
02:09:33,520 --> 02:09:36,520
and then you basically are having to create a proxy

1964
02:09:36,520 --> 02:09:38,520
around the success function,

1965
02:09:38,520 --> 02:09:41,520
and you're also creating a proxy around the error function,

1966
02:09:41,520 --> 02:09:43,520
or the error method you created,

1967
02:09:43,520 --> 02:09:45,520
and then you pass in the options.

1968
02:09:45,520 --> 02:09:48,520
So you're giving it this context,

1969
02:09:48,520 --> 02:09:51,520
and then depending on if the geolocation API

1970
02:09:51,520 --> 02:09:53,520
resolves to a location,

1971
02:09:53,520 --> 02:09:57,520
it will either give you success or it will give you error.

1972
02:09:57,520 --> 02:09:59,520
So it works kind of both ways.

1973
02:09:59,520 --> 02:10:06,520
But again, standard access to navigator geolocation.

1974
02:10:06,520 --> 02:10:10,520
Questions?

1975
02:10:10,520 --> 02:10:12,520
Okay.

1976
02:10:12,520 --> 02:10:14,520
So let me back up here.

1977
02:10:14,520 --> 02:10:17,520
And the location API.

1978
02:10:17,520 --> 02:10:19,520
So whenever you visit a website,

1979
02:10:19,520 --> 02:10:21,520
the URL actually is broken down

1980
02:10:21,520 --> 02:10:23,520
into a whole bunch of really distinct parts,

1981
02:10:23,520 --> 02:10:25,520
and they're really interesting to understand.

1982
02:10:25,520 --> 02:10:27,520
You need to know what protocol you're on.

1983
02:10:27,520 --> 02:10:30,520
You need to understand what subdomain you're on,

1984
02:10:30,520 --> 02:10:34,520
or what full domain, and then basically what path,

1985
02:10:34,520 --> 02:10:36,520
but also if there are hash values,

1986
02:10:36,520 --> 02:10:38,520
so anchor tag on the end,

1987
02:10:38,520 --> 02:10:43,520
or if there are query string variables where question mark data.

1988
02:10:43,520 --> 02:10:45,520
The location API allows you in the browser

1989
02:10:45,520 --> 02:10:47,520
to just read these values,

1990
02:10:47,520 --> 02:10:50,520
and you can make use of them to navigate the user

1991
02:10:50,520 --> 02:10:53,520
to either the next page or back,

1992
02:10:53,520 --> 02:10:55,520
or take that context and say,

1993
02:10:55,520 --> 02:10:58,520
oh, they hit the back button, I need to load something.

1994
02:10:58,520 --> 02:11:00,520
So you can actually key off the location object

1995
02:11:00,520 --> 02:11:06,520
to determine where the browser actually is.

1996
02:11:06,520 --> 02:11:09,520
Oh, that's wonderful.

1997
02:11:09,520 --> 02:11:11,520
Let me see here.

1998
02:11:11,520 --> 02:11:14,520
Let me pull up in the example.

1999
02:11:21,520 --> 02:11:26,520
And most of this is actually in the HTML.

2000
02:11:26,520 --> 02:11:29,520
I think...

2001
02:11:29,520 --> 02:11:31,520
Yeah, this is part of it.

2002
02:11:31,520 --> 02:11:33,520
Sorry, let me pull this over.

2003
02:11:33,520 --> 02:11:35,520
So you can basically import JS,

2004
02:11:35,520 --> 02:11:38,520
and location is the document location,

2005
02:11:38,520 --> 02:11:40,520
and then you can actually use the properties

2006
02:11:40,520 --> 02:11:42,520
to walk all of those parts.

2007
02:11:42,520 --> 02:11:45,520
You can pull those attributes from the location object

2008
02:11:45,520 --> 02:11:47,520
as needed and display them.

2009
02:11:47,520 --> 02:11:52,520
So protocol, host, host name, port, path name, search, hash, and origin.

2010
02:11:52,520 --> 02:11:55,520
And it allows you to get all of those objects

2011
02:11:55,520 --> 02:11:57,520
in a fairly interesting way.

2012
02:11:57,520 --> 02:12:00,520
I think there actually is a repel that has this in it.

2013
02:12:00,520 --> 02:12:02,520
Yeah, there it is.

2014
02:12:02,520 --> 02:12:04,520
And if I run the repel,

2015
02:12:04,520 --> 02:12:06,520
I can actually check the protocol is HTTPS,

2016
02:12:06,520 --> 02:12:09,520
the host is the subdomain of my PyScript.com account,

2017
02:12:09,520 --> 02:12:12,520
the host name includes the full port.

2018
02:12:12,520 --> 02:12:14,520
There was no port designated.

2019
02:12:14,520 --> 02:12:19,520
Sometimes you can put colon 80 after the actual domain name.

2020
02:12:19,520 --> 02:12:22,520
There's no search, there's no hash.

2021
02:12:22,520 --> 02:12:28,520
But I could easily add that value and just say if I ran...

2022
02:12:28,520 --> 02:12:30,520
So put an anchor tag on it,

2023
02:12:30,520 --> 02:12:33,520
and then if I actually run this again,

2024
02:12:33,520 --> 02:12:37,520
so you can now see that it actually detects the change in the browser.

2025
02:12:37,520 --> 02:12:39,520
So even anchor tag changes,

2026
02:12:39,520 --> 02:12:43,520
if your anchor navigation between parts of your document,

2027
02:12:43,520 --> 02:12:47,520
you actually can have those detect where in the app a user has clicked

2028
02:12:47,520 --> 02:12:50,520
or what the context of that click was.

2029
02:12:55,520 --> 02:12:57,520
So local storage.

2030
02:12:57,520 --> 02:12:59,520
So local storage is actually,

2031
02:12:59,520 --> 02:13:03,520
it's a bit of client-side disk that allows you to write data

2032
02:13:03,520 --> 02:13:07,520
into the domain of the browser that you're on locally.

2033
02:13:07,520 --> 02:13:11,520
So it's not quite, it's not cookies because it doesn't travel with the request,

2034
02:13:11,520 --> 02:13:18,520
but JavaScript and now PyScript can access that API and read and write data.

2035
02:13:18,520 --> 02:13:21,520
In this case, it read none,

2036
02:13:21,520 --> 02:13:24,520
and then I wrote this value tom to it,

2037
02:13:24,520 --> 02:13:28,520
and then I deleted the value and then called it again.

2038
02:13:28,520 --> 02:13:31,520
If I open this app up,

2039
02:13:31,520 --> 02:13:35,520
and again, pardon the screen layout here.

2040
02:13:35,520 --> 02:13:38,520
I think we have a touch of work to do.

2041
02:13:38,520 --> 02:13:41,520
Okay, so local storage.

2042
02:13:43,520 --> 02:13:45,520
And in effect,

2043
02:13:45,520 --> 02:13:49,520
JavaScript.localStorage.getItem.myCat.

2044
02:13:49,520 --> 02:13:52,520
Okay, it's just an arbitrary name of a doc,

2045
02:13:52,520 --> 02:13:55,520
of an object that's in local storage.

2046
02:13:55,520 --> 02:13:58,520
So in this case, it's none because there's no value there.

2047
02:13:58,520 --> 02:14:02,520
And then here I'm going to do JavaScript.localStorage.setItem.

2048
02:14:02,520 --> 02:14:05,520
I can actually set my cat equal to tom.

2049
02:14:05,520 --> 02:14:08,520
It now has a value, and if I print that value,

2050
02:14:08,520 --> 02:14:10,520
that's where it obtains tom,

2051
02:14:10,520 --> 02:14:15,520
and then I can remove the item from that local storage,

2052
02:14:15,520 --> 02:14:18,520
and then I can actually get the item again

2053
02:14:18,520 --> 02:14:19,520
when the key doesn't exist.

2054
02:14:19,520 --> 02:14:21,520
So I go none tom none.

2055
02:14:21,520 --> 02:14:24,520
Simple, but you can actually do some pretty amazing things

2056
02:14:24,520 --> 02:14:26,520
with local storage.

2057
02:14:26,520 --> 02:14:28,520
We've actually been storing the state

2058
02:14:28,520 --> 02:14:31,520
for our PyScript assistance in local storage.

2059
02:14:31,520 --> 02:14:35,520
So I'll show you, I'll run the demo in a little bit,

2060
02:14:35,520 --> 02:14:38,520
maybe after Fabio goes.

2061
02:14:38,520 --> 02:14:40,520
But it's a handy way, if you're on a site,

2062
02:14:40,520 --> 02:14:42,520
and you need to store some data,

2063
02:14:42,520 --> 02:14:44,520
and you need to store it in a persistent state,

2064
02:14:44,520 --> 02:14:46,520
you can actually store it on the subdomain

2065
02:14:46,520 --> 02:14:49,520
of the user's machine, and it's a safe API.

2066
02:14:51,520 --> 02:14:54,520
So let's see, let's go back again.

2067
02:14:54,520 --> 02:14:57,520
How are we doing on time?

2068
02:14:57,520 --> 02:15:02,520
We've got about 40 minutes.

2069
02:15:02,520 --> 02:15:06,520
We covered an example which was writing to the file system,

2070
02:15:06,520 --> 02:15:09,520
and I wanted to talk a little bit about that.

2071
02:15:09,520 --> 02:15:12,520
So InScripten comes with a virtualized file system.

2072
02:15:12,520 --> 02:15:16,520
That is, we package PyAdyde.

2073
02:15:16,520 --> 02:15:19,520
PyAdyde is packaged on top of InScripten,

2074
02:15:19,520 --> 02:15:22,520
and InScripten provides the Unix APIs

2075
02:15:22,520 --> 02:15:25,520
to allow WASM content to run effectively.

2076
02:15:25,520 --> 02:15:27,520
It provides a file system,

2077
02:15:27,520 --> 02:15:30,520
and you can read and write to that file system.

2078
02:15:30,520 --> 02:15:34,520
And if you, just using Python standard APIs,

2079
02:15:34,520 --> 02:15:37,520
they're mapped to that file system automatically.

2080
02:15:37,520 --> 02:15:41,520
So if I write data to the file system,

2081
02:15:41,520 --> 02:15:43,520
I press this button, and then I read the data

2082
02:15:43,520 --> 02:15:47,520
from that file system, I can actually store data now

2083
02:15:47,520 --> 02:15:49,520
in the InScripten file system,

2084
02:15:49,520 --> 02:15:55,520
and these APIs are one-to-one with Python's file IOP.

2085
02:15:55,520 --> 02:15:59,520
So file open, file write, read binary, all of those flags.

2086
02:15:59,520 --> 02:16:01,520
It works exactly the same way.

2087
02:16:01,520 --> 02:16:05,520
But that data is in the InScripten file system.

2088
02:16:05,520 --> 02:16:08,520
It isn't local to downloading the files.

2089
02:16:08,520 --> 02:16:10,520
It's virtualized, and it's safe.

2090
02:16:10,520 --> 02:16:14,520
There's no way to get access to that remotely.

2091
02:16:14,520 --> 02:16:16,520
It's literally in memory.

2092
02:16:16,520 --> 02:16:21,520
So security-wise, if you tie into the InScripten file system,

2093
02:16:21,520 --> 02:16:24,520
you can effectively write some Python data there,

2094
02:16:24,520 --> 02:16:27,520
but you're virtualized into the virtualized environment,

2095
02:16:27,520 --> 02:16:30,520
and there's nothing you can do to the local machine.

2096
02:16:30,520 --> 02:16:33,520
But you can also access it from JavaScript as well.

2097
02:16:33,520 --> 02:16:36,520
So I can write to the file system from JavaScript,

2098
02:16:36,520 --> 02:16:38,520
and I can read from the InScripten file system

2099
02:16:38,520 --> 02:16:40,520
from JavaScript as well.

2100
02:16:40,520 --> 02:16:43,520
So you have multiple ways of getting data

2101
02:16:43,520 --> 02:16:46,520
into that virtualized file system.

2102
02:16:46,520 --> 02:16:48,520
And if I showed you this example,

2103
02:16:48,520 --> 02:16:52,520
it wouldn't surprise you to see what it actually says.

2104
02:16:52,520 --> 02:16:55,520
In this particular case...

2105
02:16:55,520 --> 02:16:59,520
Does this provide closing the browser tab?

2106
02:16:59,520 --> 02:17:04,520
When you close the browser tab, that virtualized data is gone.

2107
02:17:04,520 --> 02:17:07,520
So it is a really temporary file system.

2108
02:17:07,520 --> 02:17:12,520
Local storage does persist across browser refreshes.

2109
02:17:12,520 --> 02:17:15,520
The InScripten file system is temporary based on the state,

2110
02:17:15,520 --> 02:17:18,520
and that's where we load the Python standard library

2111
02:17:18,520 --> 02:17:21,520
and actually execute the Python code.

2112
02:17:21,520 --> 02:17:23,520
You can keep other tabs open,

2113
02:17:23,520 --> 02:17:25,520
but the data is going to be stored back into that.

2114
02:17:25,520 --> 02:17:29,520
That's correct. That's correct. It's temporary.

2115
02:17:29,520 --> 02:17:35,520
So in this case, write to the file system is with open.

2116
02:17:35,520 --> 02:17:38,520
There's my file name. Write to,

2117
02:17:38,520 --> 02:17:42,520
and then you use standard Python file write.

2118
02:17:42,520 --> 02:17:46,520
And additionally, if I want to open it with read,

2119
02:17:46,520 --> 02:17:48,520
I'm basically opening the file,

2120
02:17:48,520 --> 02:17:52,520
that file path that I created, user-text, and I'm reading it.

2121
02:17:52,520 --> 02:17:55,520
And this is simply outputting to display.

2122
02:17:55,520 --> 02:17:59,520
Or it's trapping an exception, the file wasn't found.

2123
02:17:59,520 --> 02:18:01,520
Question? Yeah.

2124
02:18:01,520 --> 02:18:06,520
Is there a tab laying now, imagine in the future,

2125
02:18:06,520 --> 02:18:10,520
you know, since you removed the InScripten file,

2126
02:18:10,520 --> 02:18:12,520
Python is open and it's really running.

2127
02:18:12,520 --> 02:18:14,520
Is that actually present?

2128
02:18:14,520 --> 02:18:17,520
Is it present in other man-made phones?

2129
02:18:17,520 --> 02:18:20,520
I believe there is. I know Hood referenced it.

2130
02:18:20,520 --> 02:18:22,520
I know you've done quite a bit of work with it.

2131
02:18:22,520 --> 02:18:24,520
There are different implementations from Manifest

2132
02:18:24,520 --> 02:18:26,520
into Fortran and with data.

2133
02:18:26,520 --> 02:18:28,520
So there's different virtual file systems,

2134
02:18:28,520 --> 02:18:30,520
depending on which one is used.

2135
02:18:30,520 --> 02:18:34,520
So the default one that comes with it is called MemFs.

2136
02:18:34,520 --> 02:18:37,520
So Mem refers to memory. So that's in memory.

2137
02:18:37,520 --> 02:18:40,520
But if you go to the InScripten documentation,

2138
02:18:40,520 --> 02:18:41,520
there are other implementations,

2139
02:18:41,520 --> 02:18:44,520
and it should be possible to use the other ones as well.

2140
02:18:47,520 --> 02:18:52,520
Cool. Let's see. Let's back up here.

2141
02:18:52,520 --> 02:18:59,520
And so you can access the camera, like, hi.

2142
02:18:59,520 --> 02:19:03,520
And so you actually can access the camera object.

2143
02:19:03,520 --> 02:19:05,520
You can actually access the audio object.

2144
02:19:05,520 --> 02:19:08,520
You can actually process audio, web audio APIs,

2145
02:19:08,520 --> 02:19:10,520
allow you to mix.

2146
02:19:10,520 --> 02:19:12,520
People have built some pretty interesting mixers

2147
02:19:12,520 --> 02:19:16,520
and audio manipulation tools along these lines.

2148
02:19:16,520 --> 02:19:20,520
This one actually allows you to capture photographs.

2149
02:19:20,520 --> 02:19:23,520
So I can take actually pictures of this

2150
02:19:23,520 --> 02:19:25,520
and kind of capture state.

2151
02:19:25,520 --> 02:19:29,520
So I can actually capture images and basically move them.

2152
02:19:29,520 --> 02:19:31,520
The code for this is actually pretty simple.

2153
02:19:31,520 --> 02:19:36,520
It's just here's native access to the camera object from Python.

2154
02:19:36,520 --> 02:19:39,520
And from a programming standpoint,

2155
02:19:39,520 --> 02:19:42,520
like just having someone on a web browser

2156
02:19:42,520 --> 02:19:46,520
accessing if they have the camera, turning the camera on.

2157
02:19:46,520 --> 02:19:48,520
There are some permission issues.

2158
02:19:48,520 --> 02:19:52,520
I have permitted this in my camera allowed.

2159
02:19:52,520 --> 02:19:54,520
So we wouldn't want to turn on a website.

2160
02:19:54,520 --> 02:19:56,520
You don't want a website to turn on your camera

2161
02:19:56,520 --> 02:19:58,520
without you permitting it.

2162
02:19:58,520 --> 02:20:00,520
That would not be the best thing.

2163
02:20:00,520 --> 02:20:02,520
And so there's a whole bunch of...

2164
02:20:02,520 --> 02:20:04,520
This is actually where core security comes from.

2165
02:20:04,520 --> 02:20:07,520
It's blocking bad actors who are coming from the web

2166
02:20:07,520 --> 02:20:10,520
to your browser from doing things you don't want,

2167
02:20:10,520 --> 02:20:12,520
like stealing cookies, stealing accounts,

2168
02:20:12,520 --> 02:20:15,520
and cross-accessing APIs.

2169
02:20:15,520 --> 02:20:19,520
And so those standards came about

2170
02:20:19,520 --> 02:20:24,520
because of basically some hacking that was going on and the like.

2171
02:20:24,520 --> 02:20:26,520
But there are good APIs for it,

2172
02:20:26,520 --> 02:20:28,520
and it's pretty easy to work through those.

2173
02:20:28,520 --> 02:20:31,520
Let me actually show you what this example looks like.

2174
02:20:31,520 --> 02:20:33,520
Video to Canvas.

2175
02:20:33,520 --> 02:20:39,520
So in the HTML here, I'm going to create two objects.

2176
02:20:39,520 --> 02:20:42,520
One is a video object.

2177
02:20:42,520 --> 02:20:45,520
So that video object is set to autoplay.

2178
02:20:45,520 --> 02:20:47,520
And then I have a Canvas element.

2179
02:20:47,520 --> 02:20:52,520
A Canvas element is an image that you can programmatically write to.

2180
02:20:52,520 --> 02:20:55,520
So it has both 2D and 3D capabilities.

2181
02:20:55,520 --> 02:20:59,520
This is actually how WebGL renders inside of the browser.

2182
02:20:59,520 --> 02:21:03,520
It's also able to do 2D games and other things.

2183
02:21:03,520 --> 02:21:07,520
It's the primary way to do graphics, because the graphics are so fast.

2184
02:21:07,520 --> 02:21:10,520
I spent two years working on a...

2185
02:21:10,520 --> 02:21:13,520
Actually, a text layout engine inside of Canvas.

2186
02:21:13,520 --> 02:21:16,520
And so you can lay out text with kind of accuracy.

2187
02:21:16,520 --> 02:21:19,520
It wasn't the greatest for selection,

2188
02:21:19,520 --> 02:21:25,520
but we could actually simulate exactly what Adobe's InDesign product did as far as text.

2189
02:21:25,520 --> 02:21:30,520
So I have two buttons, a video element and a Canvas element.

2190
02:21:30,520 --> 02:21:34,520
And then in Python, I'm simply...

2191
02:21:34,520 --> 02:21:37,520
I'm getting references to those objects.

2192
02:21:37,520 --> 02:21:39,520
So I get querySelector.

2193
02:21:39,520 --> 02:21:41,520
I query those IDs.

2194
02:21:41,520 --> 02:21:43,520
And then I have a couple methods.

2195
02:21:43,520 --> 02:21:44,520
I have cameraClick.

2196
02:21:44,520 --> 02:21:47,520
So whenever you turn on the camera,

2197
02:21:47,520 --> 02:21:54,520
this is actually creating a JavaScript object using the Python, like the new constructor.

2198
02:21:54,520 --> 02:21:59,520
So this is how you'd actually create a JavaScript object in Python from scratch.

2199
02:21:59,520 --> 02:22:01,520
This creates a raw JavaScript object.

2200
02:22:01,520 --> 02:22:05,520
And then I'm adding two properties to it, .audio and .video.

2201
02:22:05,520 --> 02:22:07,520
In this case, I don't want the audio to come through,

2202
02:22:07,520 --> 02:22:11,520
because the feedback loop on this microphone would be unbearable for everyone.

2203
02:22:12,520 --> 02:22:15,520
And then I'm actually creating a stream.

2204
02:22:15,520 --> 02:22:19,520
And in this case, I'm using the getUserMedia,

2205
02:22:19,520 --> 02:22:22,520
targeting this media object I created,

2206
02:22:22,520 --> 02:22:24,520
and pulling that value in.

2207
02:22:24,520 --> 02:22:27,520
And then I'm setting the video source to be the stream.

2208
02:22:27,520 --> 02:22:30,520
So this actually allows me to access the camera,

2209
02:22:30,520 --> 02:22:34,520
and then I'm piping that into the video object.

2210
02:22:34,520 --> 02:22:35,520
Does it make sense?

2211
02:22:35,520 --> 02:22:37,520
It's sort of like patch cables.

2212
02:22:37,520 --> 02:22:39,520
You're just taking the output of the camera,

2213
02:22:39,520 --> 02:22:41,520
and you're patching it into the video object.

2214
02:22:41,520 --> 02:22:43,520
And then when I press a button,

2215
02:22:43,520 --> 02:22:45,520
I'm going to take a snapshot of the video object,

2216
02:22:45,520 --> 02:22:47,520
and I'm going to push that to Canvas.

2217
02:22:47,520 --> 02:22:50,520
So you can do some pretty interesting things.

2218
02:22:50,520 --> 02:22:54,520
So in this case, I get the Canvas 2D context.

2219
02:22:54,520 --> 02:23:02,520
I draw an image that's actually rendering the graphics from the video into the Canvas object.

2220
02:23:02,520 --> 02:23:06,520
And then I'm actually able to turn it into a data URL,

2221
02:23:06,520 --> 02:23:09,520
and then render that data URL back to the DOM.

2222
02:23:09,520 --> 02:23:13,520
So you can do some pretty interesting media juggling here.

2223
02:23:13,520 --> 02:23:16,520
And those APIs are kind of browser standard.

2224
02:23:16,520 --> 02:23:20,520
But again, PyScript has full access to them.

2225
02:23:20,520 --> 02:23:22,520
And they're yours to take advantage of.

2226
02:23:22,520 --> 02:23:24,520
If you find the web's doing something interesting,

2227
02:23:24,520 --> 02:23:26,520
you want to tap into these new APIs,

2228
02:23:26,520 --> 02:23:29,520
it's an easy way to create new UI and the like.

2229
02:23:29,520 --> 02:23:32,520
Before I turn it over to Fabio,

2230
02:23:33,520 --> 02:23:38,520
we've been working on a new toolset inside of PyScript.com,

2231
02:23:38,520 --> 02:23:40,520
and I want to kind of take you through it.

2232
02:23:40,520 --> 02:23:44,520
So this is the PyScript Assistant,

2233
02:23:44,520 --> 02:23:50,520
and it is actually tied to an LLM.

2234
02:23:50,520 --> 02:23:56,520
And I need to kind of back out a little bit.

2235
02:23:56,520 --> 02:24:01,520
So actually, let me switch to a new project.

2236
02:24:01,520 --> 02:24:04,520
I'm going to say new project.

2237
02:24:07,520 --> 02:24:12,520
And then I'm going to say, write me a FizzBuzz example.

2238
02:24:12,520 --> 02:24:20,520
And it goes off and returns drumroll FizzBuzz.

2239
02:24:20,520 --> 02:24:24,520
And you can use this in all of your next job interviews.

2240
02:24:24,520 --> 02:24:30,520
And you essentially print that, and then I can run it.

2241
02:24:30,520 --> 02:24:33,520
And you get FizzBuzz.

2242
02:24:33,520 --> 02:24:35,520
Again, I didn't write any code.

2243
02:24:35,520 --> 02:24:39,520
That is actually an LLM generating Python code for me on my behalf.

2244
02:24:39,520 --> 02:24:42,520
And I can ask it pretty interesting questions.

2245
02:24:42,520 --> 02:24:47,520
So if I took this, and then I pipe it back in and say,

2246
02:24:47,520 --> 02:24:53,520
explain this code to me, and I put it in back ticks,

2247
02:24:53,520 --> 02:24:58,520
it will explain exactly what that Python code does

2248
02:24:58,520 --> 02:25:02,520
in a fairly intelligent way.

2249
02:25:02,520 --> 02:25:06,520
Additionally, it has, most LLMs don't have any context about PyScript

2250
02:25:06,520 --> 02:25:10,520
because PyScript is new, and most LLMs and the data models that are there

2251
02:25:10,520 --> 02:25:14,520
are trained back to like data on 2020.

2252
02:25:14,520 --> 02:25:19,520
So in this case, who are the people that are going to be

2253
02:25:19,520 --> 02:25:24,520
training back to PyScript?

2254
02:25:24,520 --> 02:25:29,520
So in this case, who are the PyScript maintainers

2255
02:25:29,520 --> 02:25:34,520
who do not work for Anaconda?

2256
02:25:34,520 --> 02:25:39,520
Question mark.

2257
02:25:39,520 --> 02:25:42,520
And Jeff Glass and Paul Leverett.

2258
02:25:42,520 --> 02:25:44,520
There you are.

2259
02:25:44,520 --> 02:25:47,520
So it actually allows you to query the documentation.

2260
02:25:47,520 --> 02:25:57,520
One of the interesting ones is, what does PyConfig do?

2261
02:25:57,520 --> 02:26:00,520
And so we ended up training it on our documentation.

2262
02:26:00,520 --> 02:26:03,520
We ended up training it on 35 code examples.

2263
02:26:03,520 --> 02:26:08,520
And we're trying to get it to where you can actually talk to the documentation

2264
02:26:08,520 --> 02:26:11,520
and have the documentation talk back to you.

2265
02:26:11,520 --> 02:26:16,520
And so you can get pretty interesting responses and kind of deeper than normal

2266
02:26:16,520 --> 02:26:19,520
without having to know where the documentation is

2267
02:26:19,520 --> 02:26:22,520
and kind of pick through code examples and the like.

2268
02:26:22,520 --> 02:26:25,520
It's kind of fun. It's kind of strange. It's a little different.

2269
02:26:25,520 --> 02:26:27,520
Yes?

2270
02:26:27,520 --> 02:26:29,520
Yes.

2271
02:26:29,520 --> 02:26:34,520
Not client side. Well, the API server side, the calls are client side.

2272
02:26:34,520 --> 02:26:37,520
So we have to make sure it's clear. Yes?

2273
02:26:37,520 --> 02:26:41,520
That's correct. That's correct.

2274
02:26:41,520 --> 02:26:46,520
But it's free. It's free of cost.

2275
02:26:46,520 --> 02:26:49,520
No. This one is a paid feature.

2276
02:26:49,520 --> 02:26:54,520
I don't want to get into it in the tutorial, but we do have paid,

2277
02:26:54,520 --> 02:26:56,520
we're working on paid tiers.

2278
02:26:56,520 --> 02:27:00,520
And part of the process of building out PyScript.com is maturing some of the things

2279
02:27:00,520 --> 02:27:02,520
with permissions and the like.

2280
02:27:02,520 --> 02:27:09,520
So this is early builds of us building features that are specific for certain types of users.

2281
02:27:09,520 --> 02:27:16,520
So the plan is actually to put this in the Anaconda kind of tiers for Nucleus.

2282
02:27:16,520 --> 02:27:20,520
And basically when you get into either the Pro or the Starter or Enterprise,

2283
02:27:20,520 --> 02:27:24,520
you'd get access to a collection of features. It's just added value on those.

2284
02:27:24,520 --> 02:27:30,520
But I don't want to feel like this is in any way, shape or form sales or the like.

2285
02:27:30,520 --> 02:27:31,520
Question?

2286
02:27:31,520 --> 02:27:35,520
Are you worried the logon players might be able to work with the product?

2287
02:27:35,520 --> 02:27:36,520
No.

2288
02:27:36,520 --> 02:27:37,520
No.

2289
02:27:37,520 --> 02:27:41,520
It's going to make the developer, it's going to make you like developer and understand.

2290
02:27:41,520 --> 02:27:43,520
Yeah, it's fun. Yeah, question?

2291
02:27:43,520 --> 02:27:46,520
Have you shared the high-level part of the Web API?

2292
02:27:46,520 --> 02:27:47,520
Yes.

2293
02:27:47,520 --> 02:27:51,520
But doesn't it go to 3.1.5.1.

2294
02:27:51,520 --> 02:27:55,520
That's correct. If you actually click on the link in the bottom right-hand corner,

2295
02:27:55,520 --> 02:28:00,520
so if I go to, shoot, I was presenting the whole time.

2296
02:28:00,520 --> 02:28:06,520
If you go to any of these, so if you go to the destination and then down in the right-hand corner,

2297
02:28:06,520 --> 02:28:12,520
click on view code. View code will take you back into PyScript and give you the option to copy your project.

2298
02:28:12,520 --> 02:28:19,520
So with one URL, you have a pool of examples that you can use, manipulate, change, learn, et cetera.

2299
02:28:19,520 --> 02:28:23,520
Let me turn this back over to Fabio. Thank you very much.

2300
02:28:36,520 --> 02:28:47,520
Just to show context to what Ted was showing and then leave time for you all to experiment and ask questions while we are here so we can help.

2301
02:28:47,520 --> 02:28:54,520
So Ted was showing an example of using Canvas for having live video image feed.

2302
02:28:54,520 --> 02:29:01,520
Just to show what you can actually do with the interoperability between Python and JavaScript.

2303
02:29:01,520 --> 02:29:09,520
So you can go to the Pyright blog and there's this blog on rewriting the Map.Lib rendering engine using the Canvas element available in the browser.

2304
02:29:22,520 --> 02:29:29,520
So whenever you call PLD.plot, the underlying Canvas element in the browser is doing the actual drawing beneath.

2305
02:29:29,520 --> 02:29:39,520
So this is some work in 2019. You can read on it and have some performance comparisons.

2306
02:29:39,520 --> 02:29:44,520
So interesting space.

2307
02:29:44,520 --> 02:30:03,520
So I wasn't planning on showing this demo. It's still evolving.

2308
02:30:03,520 --> 02:30:11,520
But since we're talking about web APIs and using JavaScript stuff, et cetera, it makes sense.

2309
02:30:11,520 --> 02:30:21,520
It will be more polished and I will show a link that you all can share, et cetera, at my talk on Saturday.

2310
02:30:21,520 --> 02:30:26,520
So but this is just a preview.

2311
02:30:26,520 --> 02:30:34,520
I happen to have a Lego thing, robot.

2312
02:30:34,520 --> 02:30:41,520
As you can see, can you tell what it is?

2313
02:30:41,520 --> 02:30:47,520
It's an egg, yes.

2314
02:30:47,520 --> 02:30:56,520
It's their wheels. So it's an egg on wheels, which for Python packaging should be very relevant.

2315
02:30:56,520 --> 02:31:00,520
But I'll show you.

2316
02:31:00,520 --> 02:31:03,520
I'll put it here. Thank you.

2317
02:31:03,520 --> 02:31:10,520
So this was actually it started from a connection.

2318
02:31:10,520 --> 02:31:25,520
Oh, yeah. We are going to turn it on. Actually, let me just flip it like this so we can see the heart starting.

2319
02:31:25,520 --> 02:31:28,520
Yes, this little device is running micro Python.

2320
02:31:28,520 --> 02:31:40,520
So thanks to connections from Nicholas, someone was like, yeah, we want to use PyScript to control Lego bots.

2321
02:31:40,520 --> 02:31:44,520
OK, where do you start? I don't even know where to start.

2322
02:31:44,520 --> 02:31:47,520
They're like, well, it just works. What do you mean?

2323
02:31:47,520 --> 02:31:56,520
So they shared with us a version. And basically, this is using what had mentioned, the JavaScript API.

2324
02:31:56,520 --> 02:32:01,520
I actually opened this in a different tab.

2325
02:32:01,520 --> 02:32:07,520
And without installing anything, I didn't install anything or whatnot.

2326
02:32:07,520 --> 02:32:16,520
You can just connect it to your computer. It loads and then say, OK, give me access to the zero port.

2327
02:32:16,520 --> 02:32:20,520
This is using JavaScript APIs. I connect to it.

2328
02:32:20,520 --> 02:32:25,520
And once it connected, now I have access to a bunch of functionalities.

2329
02:32:25,520 --> 02:32:27,520
This has a motor and things like this.

2330
02:32:27,520 --> 02:32:37,520
So if I change the speed of the motor and say run motor, it's actually as you can see now, you can see that it's an egg roll.

2331
02:32:37,520 --> 02:32:48,520
It's more understandable. And I can stop the motor, run again, change speeds to a very fast spinning egg.

2332
02:32:48,520 --> 02:32:57,520
I can read from the zero port, do other things, and I can actually connect, get data from it.

2333
02:32:57,520 --> 02:33:03,520
And for instance, this display plots and stuff, which has a bug.

2334
02:33:03,520 --> 02:33:08,520
But let me see if I can. Yeah. So this is speaking.

2335
02:33:08,520 --> 02:33:23,520
So the person who sent us the code, Chris, which is very thankful for the support, actually connected this to his solar panel.

2336
02:33:23,520 --> 02:33:28,520
And this is the data that you see from his solar panel today, I think, whatever it is.

2337
02:33:28,520 --> 02:33:34,520
And you can actually speed the motor according to the speed of.

2338
02:33:34,520 --> 02:33:41,520
I can't appreciate because it's super fast, but it does like a little thing.

2339
02:33:41,520 --> 02:33:46,520
Anyway, we can you can go crazy and connect your camera with this as well.

2340
02:33:46,520 --> 02:33:52,520
And well, actually, I'm not going to demo this part because it's a surprise for the talk.

2341
02:33:52,520 --> 02:34:00,520
Anyway, this is it. And this is pretty much to talk about the nature of what the things that we're very interested in,

2342
02:34:00,520 --> 02:34:11,520
which is lowering the barrier to do crazy things, to experiment and get the best out of both worlds, Python and JavaScript, putting a nice interface to it.

2343
02:34:11,520 --> 02:34:18,520
Now we have 20 minutes and I'll make sure that you have time to ask questions and play with it.

2344
02:34:18,520 --> 02:34:21,520
Ask questions to us. We're going to be around and to help you.

2345
02:34:21,520 --> 02:34:28,520
So just to make sure this device is clear, it allows you to take pens and color the egg as it's being spun.

2346
02:34:28,520 --> 02:34:36,520
And it's been designed for kids. This actual one was at the White House egg roll probably two weeks ago at Easter.

2347
02:34:36,520 --> 02:34:39,520
And there was a line of kids that the line was.

2348
02:34:39,520 --> 02:34:44,520
It said 50 deep almost the entire time that the item was going.

2349
02:34:44,520 --> 02:34:50,520
But it allows kids to programmatically just because it's connected, it's not working.

2350
02:34:50,520 --> 02:34:54,520
But you can press this button. Yeah, it spins the egg and then you draw.

2351
02:34:54,520 --> 02:34:58,520
All right. Questions.

2352
02:34:58,520 --> 02:35:01,520
Yeah.

2353
02:35:01,520 --> 02:35:16,520
Yes.

2354
02:35:16,520 --> 02:35:21,520
Yeah.

2355
02:35:21,520 --> 02:35:36,520
Thank you.

2356
02:35:36,520 --> 02:35:50,520
Yeah.

2357
02:35:50,520 --> 02:35:58,520
But as you can see, the idea is that if you think about the classroom of people trying to learn Python,

2358
02:35:58,520 --> 02:36:03,520
just sending them to a website where they can start coding or connecting things without thinking,

2359
02:36:03,520 --> 02:36:08,520
now I need to download Python, I need to install those packages, I need to understand what is an environment

2360
02:36:08,520 --> 02:36:15,520
and what the difference between, oh, I'm running my editor here and I need to go to console and run Python to execute those files.

2361
02:36:15,520 --> 02:36:22,520
A lot of that complexity goes away. And yeah, that's the goal is to really explore the barrier.

2362
02:36:22,520 --> 02:36:49,520
Yeah.

2363
02:36:49,520 --> 02:37:04,520
Question.

2364
02:37:04,520 --> 02:37:16,520
Great question. So the question is, what's the best development workflow to go and interact with your code and debug things, et cetera, in JavaScript?

2365
02:37:16,520 --> 02:37:20,520
We have the console. What is the best way for JavaScript?

2366
02:37:20,520 --> 02:37:30,520
So today, I think the best way is to go back in time and think when we used to do a lot of debugging with print statements

2367
02:37:30,520 --> 02:37:36,520
and checking the state of specific variables in the interpreter.

2368
02:37:36,520 --> 02:37:46,520
Oftentimes, it's easier to use actually console.log instead of print because also print has the terminal in it, et cetera.

2369
02:37:46,520 --> 02:37:56,520
That's what I usually do. We are currently working on enabling running on web workers,

2370
02:37:56,520 --> 02:38:04,520
which will allow us to have a full Python debugger in the browser so you can stop execution

2371
02:38:04,520 --> 02:38:08,520
and pretty much add breakpoints and do what you can do today with Python as well.

2372
02:38:08,520 --> 02:38:16,520
But that's kind of the development. The other, I'll also be honest, there are rough edges.

2373
02:38:16,520 --> 02:38:24,520
Sometimes when you have errors on the JavaScript side, it's pretty hard to understand where.

2374
02:38:24,520 --> 02:38:32,520
But it's just the nature of the task. Pretty much like if you have errors in Python with async,

2375
02:38:32,520 --> 02:38:38,520
that's another, just in vanilla Python, it's hard. Here as well. So that type of things,

2376
02:38:38,520 --> 02:38:47,520
the more you get deeper into difficult features, the harder it is. But yes, one of the goals is to make it easier.

2377
02:38:47,520 --> 02:38:49,520
So we're working on it too.

2378
02:38:49,520 --> 02:38:54,520
I will say another thing I like to do is if you add, you can add a REPL onto your web page.

2379
02:38:54,520 --> 02:38:59,520
So you can interact with your Python code that way. I think we showed that at some point.

2380
02:38:59,520 --> 02:39:04,520
The py-repl tag. It's like throwing it on the buyer page, like what the heck's happening on the Python side too?

2381
02:39:04,520 --> 02:39:08,520
Yeah, I actually just did with them earlier. That's usually one of the things I do as well.

2382
02:39:08,520 --> 02:39:14,520
A REPL, you put it there. So you can always interact with the state of your application.

2383
02:39:14,520 --> 02:39:21,520
And since we can create custom elements, there is some thinking about can you inspect the Python runtime

2384
02:39:21,520 --> 02:39:28,520
and understand what variables exist, what state are they in. So it's potentially something that you click,

2385
02:39:28,520 --> 02:39:34,520
it opens a window over your app, you can sort of have a window that's peering into the actual runtime

2386
02:39:34,520 --> 02:39:40,520
and seeing data as you're doing it. So, but additionally we're also looking at debugging tools

2387
02:39:40,520 --> 02:39:45,520
that we're trying to get further up.

2388
02:39:45,520 --> 02:39:52,520
Another question is, I know it's really great to judge when you're on a project like this,

2389
02:39:52,520 --> 02:40:01,520
but how does your sense for the Python side of the app work?

2390
02:40:01,520 --> 02:40:09,520
If you pin your releases, it's extremely stable. That's the caveat there.

2391
02:40:09,520 --> 02:40:14,520
You have to pin your releases because we're going to change things in a major way from one to another,

2392
02:40:14,520 --> 02:40:19,520
but working against an individual one, it really is consistent,

2393
02:40:19,520 --> 02:40:26,520
provided you don't change the URL to the JavaScript library.

2394
02:40:26,520 --> 02:40:31,520
I would say each release is a major release at this point. So if you pin a version and you upgrade,

2395
02:40:31,520 --> 02:40:35,520
you should expect to have to change things, but we're trying to document those changes as best as we can

2396
02:40:35,520 --> 02:40:40,520
and not make them like new features you'd want to add as opposed to things we've taken away.

2397
02:40:40,520 --> 02:40:53,520
Yeah, I would say, so last year we did a lot of sanity work and, or sanitization work, or insanity,

2398
02:40:53,520 --> 02:41:00,520
but we are converging towards specific workflows, specific APIs and things like this.

2399
02:41:00,520 --> 02:41:11,520
So for Core, I would hope that we are close to something we can call stable by the end of this year, right?

2400
02:41:11,520 --> 02:41:20,520
Because of the big rocks in our way, we're kind of working on them right now. The Web Worker is a big thing.

2401
02:41:20,520 --> 02:41:27,520
The other one, which is kind of related but also on the side, is packaging.

2402
02:41:27,520 --> 02:41:34,520
Like there is no great solution for packaging on Wasm today. So as a community, like I have a community,

2403
02:41:34,520 --> 02:41:41,520
we need to start thinking about this. But for PyScript and Core, I would hope that we can stabilize in this year.

2404
02:41:41,520 --> 02:41:48,520
And then other things will still not be stable, like plugins and other things are going to be evolving.

2405
02:41:48,520 --> 02:41:54,520
So it takes time. It took 20 years for Python to be stable, right?

2406
02:41:54,520 --> 02:42:04,520
I'd also say that this is an exciting time to get involved in PyScript. We're moving, I don't want to quote Mark Zuckerberg,

2407
02:42:04,520 --> 02:42:13,520
but you know what I mean. We're changing things an awful lot and we're doing it fast. And that's good fun.

2408
02:42:13,520 --> 02:42:22,520
So come join us. We're in exploration mode, like Fabio said, trying to work out how does this fit together?

2409
02:42:22,520 --> 02:42:27,520
Because I can't remember who I said it to. It's like the browser and Python have had a baby

2410
02:42:27,520 --> 02:42:34,520
and we're trying to figure out what the DNA from each parent is going to be and how that makes that baby look.

2411
02:42:34,520 --> 02:42:39,520
And at the moment we're kind of going, I don't know, baby Yoda.

2412
02:42:40,520 --> 02:42:47,520
Yeah, exactly. It's got to grow a bit. But come help us make it grow.

2413
02:42:47,520 --> 02:42:53,520
Yeah, I want to double down on what you're saying. We're assuming a lot of use cases over the last year.

2414
02:42:53,520 --> 02:43:02,520
A lot of people showed interest. PyScript has been quite popular. But we don't have that much visibility

2415
02:43:02,520 --> 02:43:09,520
in what people are doing with this. One of the things that we really are excited about PyScript.com,

2416
02:43:09,520 --> 02:43:16,520
which we just launched three weeks ago, is as people publish their public applications and whatnot,

2417
02:43:16,520 --> 02:43:23,520
we see what they're doing, what are the rough edges, what generates a lot of errors and exceptions and this,

2418
02:43:23,520 --> 02:43:29,520
so we can actually work for our users, not out of assumptions.

2419
02:43:29,520 --> 02:43:36,520
There's another aspect to this, and this isn't sales mode by the way, but the paid features of PyScript.com

2420
02:43:36,520 --> 02:43:45,520
support PyScript. Well, this is about making a sustainable open source project rather than having people burn out.

2421
02:43:45,520 --> 02:43:51,520
There are people who are working on this. It's our proper job. And at five o'clock or whenever we clock up,

2422
02:43:51,520 --> 02:43:58,520
I go off and play football with my kids or whatever and I'm not going, oh no, I've got to triage a whole bunch

2423
02:43:58,520 --> 02:44:09,520
of stuff in my random home project as it were. We want to do this properly. So we're experimenting in that sense as well.

2424
02:44:09,520 --> 02:44:19,520
So one of the things I know, there were a number of people who had problems with file writing and kind of the auto-save behavior.

2425
02:44:19,520 --> 02:44:29,520
I was actually back here filing bugs with the team and they are actively deploying a new version that fixes that issue of auto-save.

2426
02:44:29,520 --> 02:44:37,520
We do care about the experience you have with what we do and we want to make sure that you're coming back in that way.

2427
02:44:37,520 --> 02:44:42,520
And it helps us move forward. So thank you.

2428
02:44:42,520 --> 02:45:00,520
By default, anything you put on PyScript.com per the privacy policy is MIT license.

2429
02:45:00,520 --> 02:45:05,520
We're not planning to harvest anything from users in any way, shape or form.

2430
02:45:05,520 --> 02:45:11,520
And in time, we feel that that data needs to be controlled by account owners.

2431
02:45:11,520 --> 02:45:21,520
And part of what we're moving to is private projects, control over how the subdomains are rendered, control over the URLs and control over the data.

2432
02:45:21,520 --> 02:45:30,520
We think that's a good service. So again, it's in mind with what we're doing.

2433
02:45:30,520 --> 02:45:34,520
It's about empowering you. That's what it is.

2434
02:45:34,520 --> 02:45:41,520
It's like Peter said in his keynote last year, it's for the 99 cent. It's about empowerment.

2435
02:45:41,520 --> 02:45:48,520
And if we're not good open source citizens, we're doing the wrong thing.

2436
02:45:48,520 --> 02:45:51,520
Yeah. Also, I want to make sure this is clear.

2437
02:45:51,520 --> 02:45:55,520
PyScript.com is totally optional to use PyScript.

2438
02:45:55,520 --> 02:46:04,520
We suggested using it for this tutorial because it would take, it took zero, like one minute for everybody to get set up.

2439
02:46:04,520 --> 02:46:15,520
If we suggested let's go to the repo, clone it, or let's open a HTML file, open your editor and this and that, it would take more time.

2440
02:46:15,520 --> 02:46:17,520
That's basically it.

2441
02:46:17,520 --> 02:46:28,520
If you are explaining this to one of the users here, if those two link and script tags that are in every index.html file, if you go to them, if you copy them into your project, if you put them in your HTML file, you are running PyScript.

2442
02:46:28,520 --> 02:46:36,520
So here on GitHub, if you copy that into your HTML document, you are running PyScript in your HTML, PyScript.com locally, whatever.

2443
02:46:36,520 --> 02:46:41,520
That's half of more steps. We skipped it for today, but you can do it.

2444
02:46:41,520 --> 02:46:44,520
Any other questions?

2445
02:46:44,520 --> 02:47:00,520
Are there ways to make PyPage viable for multi-page applications or do you learn how to reload it, kind of like your interpreter at any time, or is it really possible for single-page applications?

2446
02:47:00,520 --> 02:47:04,520
Oh, I see. Okay.

2447
02:47:04,520 --> 02:47:08,520
So, I could talk about cards and things.

2448
02:47:08,520 --> 02:47:10,520
But that's one, that's single-page.

2449
02:47:10,520 --> 02:47:13,520
That's a single, but it looks, it looks multi-page.

2450
02:47:13,520 --> 02:47:24,520
So, hypercard from the 1980s was awesome because there are only maybe three or four core concepts.

2451
02:47:24,520 --> 02:47:26,520
And I can tell you them now.

2452
02:47:26,520 --> 02:47:29,520
Your app is made of a stack of cards.

2453
02:47:29,520 --> 02:47:34,520
Each card tells you what's on the screen.

2454
02:47:34,520 --> 02:47:40,520
And depending on what you do with that card, it fires transitions to other cards.

2455
02:47:40,520 --> 02:47:44,520
And it's in that transition that you have the business logic.

2456
02:47:44,520 --> 02:47:46,520
That's it.

2457
02:47:46,520 --> 02:48:01,520
And so, hypercard, which is what Fabio was using for his presentation, is that reimagined as a single-page app with PyScript underneath, sort of rendering and doing all the things.

2458
02:48:01,520 --> 02:48:15,520
But what it means is that your hypercard app looks like it's a multi-page app because what you're doing, in fact, is transitioning in exactly the same way as hypercard's core concepts are between cards in your stack.

2459
02:48:15,520 --> 02:48:23,520
The reason we wrote that is because I can imagine explaining that to a classroom full of 11-year-olds and then understanding it.

2460
02:48:23,520 --> 02:48:29,520
In fact, I can give you a whole bunch of cards and you can draw your app on those cards,

2461
02:48:29,520 --> 02:48:38,520
stick them up with drawing a page, draw with a string or throwing them, what was what, then you plan to exit, oh, good, last year.

2462
02:48:38,520 --> 02:48:41,520
And 11-year-olds can understand it.

2463
02:48:41,520 --> 02:48:43,520
I'm sure you folks can understand it.

2464
02:48:43,520 --> 02:48:49,520
And yet, you get the full power of the browser and all the APIs and all the things that you can do here.

2465
02:48:49,520 --> 02:48:57,520
And I imagine that in a, well, imagine that, just imagine it, the potential that you can use.

2466
02:48:57,520 --> 02:49:01,520
I think there are some browser innovations that are occurring.

2467
02:49:01,520 --> 02:49:06,520
The WebAssembly APIs are in transit.

2468
02:49:06,520 --> 02:49:08,520
They're changing.

2469
02:49:08,520 --> 02:49:18,520
And there are projects related to saving state, persisting state, and allowing state to run in worker context and across multiple pages.

2470
02:49:18,520 --> 02:49:25,520
There is a Service Worker API, and service workers are more of a worker.

2471
02:49:25,520 --> 02:49:30,520
But essentially, it allows you to track network traffic and kind of play things back.

2472
02:49:30,520 --> 02:49:43,520
So I think what we're going to see is some convergence around having a worker that moves across, that allows you to run it across pages, but at some point, shut down.

2473
02:49:43,520 --> 02:49:48,520
We can actually do quite a bit of caching with the Piedad prototype.

2474
02:49:48,520 --> 02:50:02,520
We have certain service worker cases where if you denote the URLs of the Piedad needs, you can actually create a local cache, essentially a local store, so that you don't have the file I.O. going across the wire.

2475
02:50:02,520 --> 02:50:06,520
And essentially, it stands here in the browser from saving them to the end of the line.

2476
02:50:06,520 --> 02:50:09,520
I see things changing. They will change.

2477
02:50:09,520 --> 02:50:13,520
But we're going to evolve with it, and it will be interesting to find out where it actually goes.

2478
02:50:13,520 --> 02:50:16,520
But these are problems that the whole web app.

2479
02:50:16,520 --> 02:50:24,520
You can't have JavaScript that runs across multiple pages. It constantly burns it all down.

2480
02:50:24,520 --> 02:50:33,520
Yep. The main gap, I think, between PyScript apps and native JavaScript apps right now is the loading time.

2481
02:50:33,520 --> 02:50:37,520
That's something we're currently working on.

2482
02:50:37,520 --> 02:50:46,520
Once we have support for MicroPython out of the box, we're talking milliseconds, not seconds to load.

2483
02:50:46,520 --> 02:50:48,520
On these sorts of devices?

2484
02:50:48,520 --> 02:50:49,520
Yeah.

2485
02:50:49,520 --> 02:50:50,520
Not just BP laptops?

2486
02:50:50,520 --> 02:50:54,520
Yes. And there are some rough edges on PyScript itself as well.

2487
02:50:54,520 --> 02:51:00,520
We're being a little too generous on stuff, and we should trim a lot of things down.

2488
02:51:00,520 --> 02:51:07,520
For instance, the PyTerminal is enabled by default, but it's quite heavy.

2489
02:51:07,520 --> 02:51:14,520
We want to trim all those things out, so if you don't need them, it loads instantaneously,

2490
02:51:14,520 --> 02:51:17,520
and you can add things after loading time.

2491
02:51:17,520 --> 02:51:22,520
I think that's the main gap that I see today between the web and PyScript.

2492
02:51:23,520 --> 02:51:24,520
Question.

2493
02:51:24,520 --> 02:51:29,520
This would be an approach in my country to use PyScript in order to have a different URL that

2494
02:51:29,520 --> 02:51:33,520
pictures cleanest, full-or-riddest, and my terminal version, right?

2495
02:51:33,520 --> 02:51:39,520
Would you like to be stripped down if you are a computerist, so then you strip that?

2496
02:51:39,520 --> 02:51:42,520
Great question.

2497
02:51:42,520 --> 02:51:47,520
So the question was, when we have that, what would be the option?

2498
02:51:47,520 --> 02:51:53,520
Would it be different builds of PyScript that contain certain aspects or a configuration

2499
02:51:53,520 --> 02:51:54,520
or something else?

2500
02:51:54,520 --> 02:51:56,520
Is that the question, right?

2501
02:51:56,520 --> 02:51:57,520
Yeah.

2502
02:51:57,520 --> 02:52:07,520
The way we're thinking is to have the PyScript just a bare-bone core, the minimal, very small,

2503
02:52:07,520 --> 02:52:14,520
and then through your tumble file, your configuration, you say, I also wanted the PyTerminal, this

2504
02:52:14,520 --> 02:52:19,520
and that, and in loading time, we're going to patch them and add to your environment.

2505
02:52:19,520 --> 02:52:23,520
So if you don't add anything, it's blazing fast.

2506
02:52:23,520 --> 02:52:27,520
Basically, you're paying for what you asked for.

2507
02:52:27,520 --> 02:52:31,520
Right now, you're paying for everything, which is not good.

2508
02:52:31,520 --> 02:52:35,520
There's also browser caching as well, which is another story.

2509
02:52:35,520 --> 02:52:40,520
Our to-do list, just one is our art.

2510
02:52:40,520 --> 02:52:46,520
But for all the questions that you ask us, one of our answers is going to be, in the

2511
02:52:46,520 --> 02:52:53,520
browser, you could do, we, because this is an early stage project, are investigating

2512
02:52:53,520 --> 02:53:00,520
what could be, but these are all big blips on our radar.

2513
02:53:00,520 --> 02:53:01,520
Yeah.

2514
02:53:01,520 --> 02:53:06,520
We have actually, just to add one last thing, we actually, to talk about this, we have a

2515
02:53:06,520 --> 02:53:08,520
bunch of solutions for those things.

2516
02:53:08,520 --> 02:53:11,520
There's a lot to do and not enough time.

2517
02:53:11,520 --> 02:53:23,520
So on the caching of the browser and stuff, if you look for a post from, I think it was

2518
02:53:23,520 --> 02:53:32,520
on the Talk Python to Me podcast, or was Mike directly post, he showed using, setting a

2519
02:53:32,520 --> 02:53:35,520
progressive web application with PyScript.

2520
02:53:35,520 --> 02:53:37,520
And that caches everything.

2521
02:53:37,520 --> 02:53:40,520
Instantaneous loading time, right?

2522
02:53:40,520 --> 02:53:44,520
So that type of things, yes, is what we're looking for.

2523
02:53:44,520 --> 02:53:46,520
You see, we get excited about this.

2524
02:53:46,520 --> 02:53:50,520
A progressive web app is downloading this web page so I can run it as if it were a desktop

2525
02:53:50,520 --> 02:53:51,520
app.

2526
02:53:51,520 --> 02:53:52,520
Problem solved.

2527
02:53:52,520 --> 02:53:53,520
Yeah.

2528
02:53:53,520 --> 02:53:55,520
Sorry, we had a question.

2529
02:53:55,520 --> 02:54:19,520
Yes.

2530
02:54:19,520 --> 02:54:20,520
That exactly, yes.

2531
02:54:20,520 --> 02:54:21,520
That's the issue.

2532
02:54:21,520 --> 02:54:24,520
Like right now we're loading too much.

2533
02:54:24,520 --> 02:54:27,520
And the next releases are going to trim down and trim down.

2534
02:54:27,520 --> 02:54:31,520
Like every release of PyScript has been in that direction, to be honest.

2535
02:54:31,520 --> 02:54:41,520
Yes.

2536
02:54:41,520 --> 02:54:45,520
Any other questions?

2537
02:54:45,520 --> 02:54:46,520
All right.

2538
02:54:46,520 --> 02:54:50,520
Last thing I want to say, we're going to, we have a bunch of PyScript talks during the

2539
02:54:50,520 --> 02:54:52,520
conference if you want to check it out.

2540
02:54:52,520 --> 02:54:56,520
We are probably going to do one or two open spaces as well.

2541
02:54:56,520 --> 02:55:03,520
If you want to try PyScript, explore, and we'll be there to support with answering questions

2542
02:55:03,520 --> 02:55:06,520
or help you, et cetera.

2543
02:55:06,520 --> 02:55:08,520
And if you like the project, follow.

2544
02:55:08,520 --> 02:55:15,520
We're going to be posting some of the examples and things like this on the Twitter account

2545
02:55:15,520 --> 02:55:21,520
as well, so that especially the ones that we didn't share because we're not ready.

2546
02:55:21,520 --> 02:55:23,520
And yeah, that's it.

2547
02:55:23,520 --> 02:55:24,520
Thank you so much for coming.

2548
02:55:24,520 --> 02:55:25,520
Thank you.

2549
02:55:25,520 --> 02:55:26,520
Thanks very much.

2550
02:55:26,520 --> 02:55:27,520
Thank you.

2551
02:55:27,520 --> 02:55:27,540
Applause.

