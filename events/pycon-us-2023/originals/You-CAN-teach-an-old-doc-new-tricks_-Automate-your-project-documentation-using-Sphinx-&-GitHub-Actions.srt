1
00:00:00,000 --> 00:00:02,480
Cool. Hi everyone.

2
00:00:02,480 --> 00:00:04,400
I hope Lance hasn't made you very sleepy

3
00:00:04,400 --> 00:00:07,400
and you can pay attention to us for the next three hours.

4
00:00:07,400 --> 00:00:11,320
My name is Olga and this is my co-presenter Eya.

5
00:00:11,320 --> 00:00:13,200
We both work at Bloomberg.

6
00:00:13,200 --> 00:00:17,360
I work in a team that creates an API

7
00:00:17,360 --> 00:00:20,880
for our instant messenger application and Eya works

8
00:00:20,880 --> 00:00:26,000
on an alerting system we have at Bloomberg for market alerts.

9
00:00:26,000 --> 00:00:29,320
We have been at Bloomberg for over five years.

10
00:00:29,360 --> 00:00:33,120
Eya bought three something and we're both members

11
00:00:33,120 --> 00:00:39,280
of an internal Python community we have at Bloomberg, the Python Guild.

12
00:00:39,280 --> 00:00:43,760
Okay. So thank you for signing up on this workshop.

13
00:00:43,760 --> 00:00:47,480
Some of you may know what Sphinx is, some of you may not.

14
00:00:47,480 --> 00:00:51,320
We are going to keep, I think, a pace good enough for everyone

15
00:00:51,320 --> 00:00:54,480
to follow along and there will be a few challenges for people

16
00:00:54,480 --> 00:00:57,080
who want to try something more.

17
00:00:57,120 --> 00:01:02,480
So if you have never heard Sphinx before, it is a tool

18
00:01:02,480 --> 00:01:08,640
to create pleasant and beautiful documentation easily.

19
00:01:08,640 --> 00:01:12,480
It can create a lot of different outputs like HTML,

20
00:01:12,480 --> 00:01:15,120
latex or plain text.

21
00:01:15,120 --> 00:01:18,000
Today we will be focusing on HTML.

22
00:01:18,000 --> 00:01:21,720
And what's great about it is that it does a lot of magic for you.

23
00:01:21,720 --> 00:01:24,480
So it can, when you create your documentation

24
00:01:24,520 --> 00:01:27,760
and creates cross references to other objects

25
00:01:27,760 --> 00:01:29,920
in your Python code, for example.

26
00:01:29,920 --> 00:01:32,160
So all of that is done under the hood for you

27
00:01:32,160 --> 00:01:35,960
and you don't have to worry about it.

28
00:01:35,960 --> 00:01:41,400
The big great part about Sphinx is that it has a big adoption

29
00:01:41,400 --> 00:01:43,600
and there's a big community and a lot of cool extensions

30
00:01:43,600 --> 00:01:45,040
that you can try out.

31
00:01:45,040 --> 00:01:49,360
We will be using some today and we have some links for some others

32
00:01:49,360 --> 00:01:53,440
in our further reading section.

33
00:01:53,480 --> 00:01:57,000
And yeah, about this workshop today.

34
00:01:57,000 --> 00:02:00,800
So I mentioned we are part

35
00:02:00,800 --> 00:02:03,360
of an internal Python community at Bloomberg.

36
00:02:03,360 --> 00:02:07,240
And about a year ago we hosted an internal event

37
00:02:07,240 --> 00:02:11,320
that is across the company about a lot of different technologies

38
00:02:11,320 --> 00:02:14,520
and all of these communities showcase some of their work.

39
00:02:14,520 --> 00:02:18,320
We were gathering some feedback on what people wanted to learn

40
00:02:18,320 --> 00:02:20,240
about and we were noticing a pattern

41
00:02:20,240 --> 00:02:23,400
that we could do a better job with documentation

42
00:02:23,440 --> 00:02:27,480
and this is how Aya and I decided to come up with this workshop.

43
00:02:27,480 --> 00:02:32,440
So its initial form was very tailored to Bloomberg technologies.

44
00:02:32,440 --> 00:02:36,160
But we got a lot of great feedback from people who came

45
00:02:36,160 --> 00:02:40,800
to that workshop and we decided to generalize it and to present it

46
00:02:40,800 --> 00:02:43,960
to the wider public and to a few conferences.

47
00:02:43,960 --> 00:02:47,240
So we did this workshop in September in PyCon UK,

48
00:02:47,240 --> 00:02:50,960
an internal meetup locally in London

49
00:02:50,960 --> 00:02:53,240
where we're both based, PyLadies London.

50
00:02:53,280 --> 00:02:55,280
And now we're here.

51
00:02:55,280 --> 00:02:57,440
So yeah, this is a good point.

52
00:02:57,440 --> 00:02:58,880
Also give thanks to all the people

53
00:02:58,880 --> 00:03:01,440
who have given us feedback so far.

54
00:03:01,440 --> 00:03:03,640
And I hope we have done a good job

55
00:03:03,640 --> 00:03:06,240
and you will also enjoy the workshop today.

56
00:03:06,240 --> 00:03:12,120
And if you do have any feedback, good or bad, you can come

57
00:03:12,120 --> 00:03:16,240
and talk to us later.

58
00:03:16,240 --> 00:03:20,000
Okay, and now let's get into more details

59
00:03:20,000 --> 00:03:22,560
of what we're going to do today.

60
00:03:22,600 --> 00:03:25,480
So this is going to be a very interactive workshop.

61
00:03:25,480 --> 00:03:31,000
We're going to have 10 sections, yes, where Aya

62
00:03:31,000 --> 00:03:35,280
and I will be presenting the content of each section

63
00:03:35,280 --> 00:03:38,480
and then you will be given some time to follow the steps.

64
00:03:38,480 --> 00:03:42,400
We will be going around the classroom to help anyone

65
00:03:42,400 --> 00:03:45,640
or answer any questions.

66
00:03:45,640 --> 00:03:49,920
We also think that we ourselves learn good from others

67
00:03:49,960 --> 00:03:52,240
so please feel free to help each other

68
00:03:52,240 --> 00:03:54,880
and ask questions generally in the class

69
00:03:54,880 --> 00:03:59,840
so other people can hear what you have to say.

70
00:04:00,880 --> 00:04:04,640
Okay, and you can find the workshop link here

71
00:04:04,640 --> 00:04:06,200
on this tiny URL.

72
00:04:06,200 --> 00:04:09,440
We have the instruction to start the environment setup.

73
00:04:09,440 --> 00:04:12,160
If you haven't or you just came in, don't worry.

74
00:04:12,160 --> 00:04:14,600
We are going to go through it together.

75
00:04:14,600 --> 00:04:19,800
Just in case there are any questions, you can ask them then.

76
00:04:19,840 --> 00:04:25,120
So let's have a closer look at what we will be doing today.

77
00:04:25,120 --> 00:04:31,360
I think this is the workshop instructions and it's a tutorial

78
00:04:31,360 --> 00:04:34,040
that you can follow later at home if you missed any step,

79
00:04:34,040 --> 00:04:37,280
if you want to remember something or you can share it

80
00:04:37,280 --> 00:04:40,120
with your friends, whatever you like.

81
00:04:40,120 --> 00:04:44,080
These are the different chapters that we're going to see.

82
00:04:44,080 --> 00:04:47,720
And here up in the upright corner,

83
00:04:47,760 --> 00:04:51,520
we have linked the example project we will be working with today.

84
00:04:51,520 --> 00:04:56,360
So you can click on it and it will take you to this GitHub repo.

85
00:04:56,360 --> 00:04:59,320
We will be asking you to be working with that later.

86
00:04:59,320 --> 00:05:02,200
But for now, you can just browse what it has inside.

87
00:05:02,200 --> 00:05:06,920
You can see the source code is quite simple.

88
00:05:06,920 --> 00:05:08,240
Internet is slow.

89
00:05:08,240 --> 00:05:10,960
So you can go and you can browse the contents.

90
00:05:10,960 --> 00:05:13,440
You can see what it's about and you will be working

91
00:05:13,440 --> 00:05:16,880
with that in the next hours.

92
00:05:17,720 --> 00:05:22,840
So the documentation we'll be creating today will be for these modules.

93
00:05:22,840 --> 00:05:25,640
And to give you a tease on what you will be creating,

94
00:05:25,640 --> 00:05:30,720
this will be the final example of documenting this module.

95
00:05:30,720 --> 00:05:35,320
So yeah, we hope it's...

96
00:05:35,320 --> 00:05:39,920
Yeah. So this is like our Sphinx Epoch as we will be working on.

97
00:05:39,920 --> 00:05:42,680
And you can go and you can browse its contents.

98
00:05:42,720 --> 00:05:46,800
You can see the different classes that are in the source code.

99
00:05:46,800 --> 00:05:48,400
And you can see, for example,

100
00:05:48,400 --> 00:05:53,320
the documentation we have created for its methods.

101
00:05:53,320 --> 00:05:56,760
You can, yeah, browse it already.

102
00:05:56,760 --> 00:05:59,720
You can go and see what's there.

103
00:05:59,720 --> 00:06:01,760
And you can see there are links that link you

104
00:06:01,760 --> 00:06:04,400
between the different classes.

105
00:06:04,400 --> 00:06:06,840
Here on the left side, you can see also

106
00:06:06,840 --> 00:06:09,720
that we have different branches and different tags.

107
00:06:09,720 --> 00:06:12,040
This is going to be the part about versioning.

108
00:06:12,040 --> 00:06:14,880
The last part that we're going to see.

109
00:06:14,880 --> 00:06:22,160
And I think, yeah, that is all to show from this page.

110
00:06:22,160 --> 00:06:29,160
Cool. Yeah, for people who just came in, let me show again.

111
00:06:29,160 --> 00:06:30,920
This is the link for the tutorial.

112
00:06:30,920 --> 00:06:37,080
So if you can browse on tinyurl.com slash Sphinx.tutorial,

113
00:06:37,080 --> 00:06:40,000
we're showing this, what's on the screen.

114
00:06:42,320 --> 00:06:47,080
Okay. And if you have opened it, now you can browse

115
00:06:47,080 --> 00:06:50,760
to the first section, which is the environment setup.

116
00:06:50,760 --> 00:06:54,080
You can see that the prerequisites

117
00:06:54,080 --> 00:06:59,200
that we have is to have Git and non-deprecated version

118
00:06:59,200 --> 00:07:00,520
of Python installed.

119
00:07:00,520 --> 00:07:02,960
We recommend 3.11, but I think anything

120
00:07:02,960 --> 00:07:06,040
above 3.8 will work.

121
00:07:06,040 --> 00:07:11,520
And here are the instructions on how to use the repo,

122
00:07:11,560 --> 00:07:13,920
the example project that we have given you.

123
00:07:13,920 --> 00:07:16,880
So this is a template, and you can use this template,

124
00:07:16,880 --> 00:07:18,640
create a new repository.

125
00:07:18,640 --> 00:07:21,160
You can give a name of your choice.

126
00:07:21,160 --> 00:07:23,320
We recommend sticking with Sphinx

127
00:07:23,320 --> 00:07:26,840
in case something goes wrong, and you can always follow that.

128
00:07:26,840 --> 00:07:32,360
So then you can clone the repo on your laptops, and yeah,

129
00:07:32,360 --> 00:07:34,000
CD onto that.

130
00:07:34,000 --> 00:07:37,360
You can use whatever editor you like for this.

131
00:07:37,360 --> 00:07:39,480
We recommend Visual Studio Code,

132
00:07:39,520 --> 00:07:41,840
and we will be giving some extra tips for that,

133
00:07:41,840 --> 00:07:43,480
but anything will be working.

134
00:07:43,480 --> 00:07:48,280
You just need an editor for that and a terminal to work on it.

135
00:07:48,280 --> 00:07:52,400
After you clone the repo, then create a virtual environment.

136
00:07:52,400 --> 00:07:57,680
The instructions are here, and install the package,

137
00:07:57,680 --> 00:08:01,520
and you should be all set.

138
00:08:01,520 --> 00:08:05,120
Again, we have tested this workshop more extensively

139
00:08:05,120 --> 00:08:07,160
on the UNIX-based machines.

140
00:08:07,200 --> 00:08:11,400
If you're using something else, we can try to help out

141
00:08:11,400 --> 00:08:13,800
or figure it out together.

142
00:08:13,800 --> 00:08:16,160
So we're going to give you some time now to follow these steps,

143
00:08:16,160 --> 00:08:18,000
and yeah, let us know for any questions.

144
00:08:18,000 --> 00:08:20,480
Okay, so on the next section,

145
00:08:20,480 --> 00:08:23,320
we're going to be starting with Sphinx.

146
00:08:23,320 --> 00:08:27,280
So of course, you're going to be installing Sphinx first,

147
00:08:27,280 --> 00:08:31,440
and then that ships with a handy quick start tool

148
00:08:31,440 --> 00:08:34,600
that we're going to use to generate the basic files

149
00:08:34,600 --> 00:08:39,280
that Sphinx needs to generate the basic website.

150
00:08:39,280 --> 00:08:40,680
So you're going to run the tool,

151
00:08:40,680 --> 00:08:42,960
you're going to go through the prompts,

152
00:08:42,960 --> 00:08:46,520
and then that generates a number of files.

153
00:08:46,520 --> 00:08:51,600
So the first file is conch.py, which is, as you could probably guess,

154
00:08:51,600 --> 00:08:56,280
a configuration file that allows you to configure Sphinx's behavior.

155
00:08:56,280 --> 00:09:01,200
We'll be slightly tweaking Sphinx's behavior as we go along.

156
00:09:01,200 --> 00:09:03,480
You'll see how that's used.

157
00:09:03,480 --> 00:09:06,880
The next file is index.rst.

158
00:09:06,880 --> 00:09:12,560
So this is the source file for your documentation website's home page.

159
00:09:12,560 --> 00:09:17,680
So that's going to generate the index.html file.

160
00:09:17,680 --> 00:09:21,560
And the RST extension is for restructured text.

161
00:09:21,560 --> 00:09:24,520
We're going to talk about it in the next section.

162
00:09:24,520 --> 00:09:29,080
The makefile is a convenience.

163
00:09:29,080 --> 00:09:32,040
Yeah, convenience has a bunch of make targets

164
00:09:32,080 --> 00:09:37,480
that make it a little bit easier to build or clean your documentation.

165
00:09:37,480 --> 00:09:41,760
The build folder is where your output documentation files will live.

166
00:09:41,760 --> 00:09:45,880
So your HTML files will live there.

167
00:09:45,880 --> 00:09:52,360
The static folder is where you can store all your static files, say images.

168
00:09:52,360 --> 00:09:56,960
And then finally, the templates folder is where you can put little snippets

169
00:09:57,000 --> 00:10:02,760
of HTML to customize the appearance of your website.

170
00:10:02,760 --> 00:10:11,200
So yeah, use the Quick Start tool and just build the output that comes out of that.

171
00:10:11,200 --> 00:10:15,800
And you can just preview the output that comes out of the box

172
00:10:15,800 --> 00:10:17,680
from Sphinx Quick Start.

173
00:10:17,680 --> 00:10:20,040
That's this section.

174
00:10:20,040 --> 00:10:22,600
I'll give you a few minutes to work on that.

175
00:10:22,600 --> 00:10:25,760
Let's move to the next one.

176
00:10:25,800 --> 00:10:26,720
All right.

177
00:10:26,720 --> 00:10:29,200
So I mentioned restructured text.

178
00:10:29,200 --> 00:10:34,000
So restructured text is a plain text markup language.

179
00:10:34,000 --> 00:10:36,680
It's the default one that Sphinx uses.

180
00:10:36,680 --> 00:10:40,760
It also supports Markdown, but since this is the one that Sphinx supports

181
00:10:40,760 --> 00:10:43,800
by default, we're going to teach you this one.

182
00:10:43,800 --> 00:10:46,840
We're also not going to go into too much detail about the syntax

183
00:10:46,840 --> 00:10:50,040
because there are a ton of resources out there.

184
00:10:50,040 --> 00:10:55,240
We're just going to cover some basics so that you understand, you know,

185
00:10:55,280 --> 00:10:59,720
how to create a basic page.

186
00:10:59,720 --> 00:11:03,840
So for instance, this is the syntax to create a heading.

187
00:11:03,840 --> 00:11:08,240
So this is what becomes the heading of your website.

188
00:11:08,240 --> 00:11:13,560
This here is a table of contents tree.

189
00:11:13,560 --> 00:11:17,000
You can configure it by specifying the max step.

190
00:11:17,000 --> 00:11:19,320
You can caption it with a title.

191
00:11:19,320 --> 00:11:21,240
We chose contents.

192
00:11:21,320 --> 00:11:25,320
Yeah. Yeah, go ahead and get started.

193
00:11:25,320 --> 00:11:30,760
The practical part of this section will be, yeah, adding a little section

194
00:11:30,760 --> 00:11:36,400
and then also linking an image so that you also have an image here.

195
00:11:36,400 --> 00:11:38,680
You can use our same image.

196
00:11:38,680 --> 00:11:42,640
It's in the example repo or you can, of course, download your own image.

197
00:11:42,640 --> 00:11:46,880
I'm Egyptian, so I'm biased towards this one, but you can,

198
00:11:46,880 --> 00:11:48,840
of course, use whatever image you want.

199
00:11:48,840 --> 00:11:52,320
And something I forgot to mention in the introduction.

200
00:11:52,320 --> 00:11:57,320
You might be seeing that in the end of each page, we have this hint

201
00:11:57,320 --> 00:12:00,040
that you have reached this part of the tutorial.

202
00:12:00,040 --> 00:12:04,400
So you have reached this part of the tutorial.

203
00:12:04,400 --> 00:12:06,920
So if you go in the example repo, you can see

204
00:12:06,920 --> 00:12:11,120
that we have created different branches of each chapter of the tutorial.

205
00:12:11,120 --> 00:12:16,960
So if for any reason you are left a bit behind or you want

206
00:12:17,000 --> 00:12:20,960
to confirm what you have done, you can just browse the repository

207
00:12:20,960 --> 00:12:23,480
that state and you can continue from there.

208
00:12:23,480 --> 00:12:26,880
I hope, yeah, it's helpful this way.

209
00:12:26,880 --> 00:12:33,800
So I'll be moving on to section four, which is documenting your API.

210
00:12:33,800 --> 00:12:38,440
Again, so we've been working with this example repo.

211
00:12:38,440 --> 00:12:44,360
It has, you saw, two Python files, Sphinx.py and Riddle.py.

212
00:12:44,400 --> 00:12:49,720
And now we want to generate documentation for this module.

213
00:12:49,720 --> 00:12:53,800
So the way we're going to do that is that we're going to add docstrings.

214
00:12:53,800 --> 00:13:01,520
That means comments after a function signature or when a class is defined.

215
00:13:01,520 --> 00:13:05,640
And Sphinx will do its magic and convert those docstrings

216
00:13:05,640 --> 00:13:09,560
to the documentation we want to see.

217
00:13:09,560 --> 00:13:13,240
There are a few different styles that you can write docstrings.

218
00:13:13,280 --> 00:13:17,120
One style is the restructured text we saw in the previous section.

219
00:13:17,120 --> 00:13:21,280
But you might agree that it can be a little bit cumbersome.

220
00:13:21,280 --> 00:13:26,280
So for this reason, we're going to be using the Google style for docstrings.

221
00:13:26,280 --> 00:13:31,040
We're linking here how that looks like.

222
00:13:31,040 --> 00:13:33,360
There's a lot of rules and you can make it very strict.

223
00:13:33,360 --> 00:13:35,920
We will just be following the guidelines for that.

224
00:13:35,920 --> 00:13:38,800
You don't need to follow everything on the dot.

225
00:13:38,840 --> 00:13:42,560
And we'll be using a very cool Sphinx extension called Napoleon.

226
00:13:43,720 --> 00:13:46,080
So Napoleon is a preprocessor.

227
00:13:46,080 --> 00:13:51,800
So before Sphinx does its processing, Napoleon takes NumPy or

228
00:13:51,800 --> 00:13:56,400
Google style docstrings and converts them to restructured text

229
00:13:56,400 --> 00:13:58,920
before Sphinx attempts to parse them.

230
00:14:00,240 --> 00:14:04,160
So Google style is also generally recommended by a lot of different

231
00:14:04,160 --> 00:14:07,040
organizations, that is the other reason we're going with that.

232
00:14:07,080 --> 00:14:12,120
And you're going to see that it is very familiar and easy to read and write.

233
00:14:13,720 --> 00:14:17,840
So in this section, we're going to start with a method.

234
00:14:17,840 --> 00:14:23,120
Here we're choosing the checkReadLancer as it has a more interesting signature.

235
00:14:23,120 --> 00:14:26,920
But the idea is that you will fill out both files and

236
00:14:26,920 --> 00:14:28,360
all of the methods on your own.

237
00:14:30,320 --> 00:14:32,600
And we will create a Google style docstring.

238
00:14:32,600 --> 00:14:36,760
So the text we decided to write is this one.

239
00:14:36,800 --> 00:14:42,560
We give initially just an instruction of what the method is doing.

240
00:14:42,560 --> 00:14:45,120
And then we explain what the arguments are.

241
00:14:45,120 --> 00:14:50,600
We explain if there's any exceptions raised and what the return type is.

242
00:14:52,320 --> 00:14:57,400
If you're using VS Code, we also recommend adding this VS Code extension,

243
00:14:57,400 --> 00:15:02,480
auto docstring, where you can just start adding double quotes and

244
00:15:02,520 --> 00:15:07,600
will pre-fill whatever style you have selected for

245
00:15:07,600 --> 00:15:10,040
the extension of your docstring.

246
00:15:10,040 --> 00:15:12,200
So it's a quick way to do stuff.

247
00:15:13,760 --> 00:15:20,040
So once you're happy with the docstrings you have added, then add and

248
00:15:20,040 --> 00:15:22,280
commit your files and post them to main.

249
00:15:23,400 --> 00:15:24,920
And that will be step four.

250
00:15:26,600 --> 00:15:29,520
We're going to give some time for that.

251
00:15:29,520 --> 00:15:35,000
Yeah, and again, like fill as, I don't know, creative or as lazy as you like.

252
00:15:35,000 --> 00:15:39,360
You can just fill in one or you can fill all of them to make a more full

253
00:15:39,360 --> 00:15:40,120
documentation.

254
00:15:42,320 --> 00:15:46,200
And yeah, if you are really, really lazy as I tend to be sometimes,

255
00:15:46,200 --> 00:15:49,240
again you can check out the brands on the example repo and

256
00:15:49,240 --> 00:15:52,360
you can see what we have pre-filled in for the methods.

257
00:15:52,360 --> 00:15:56,840
So from here I'm selecting 04 Document API.

258
00:15:56,880 --> 00:16:02,120
You can go to SSC Sphinxy and you can open Sphinx.py and

259
00:16:02,120 --> 00:16:03,840
see what we have filled in here.

260
00:16:05,280 --> 00:16:09,440
If you missed this, the example project is linked from the top of the tutorial.

261
00:16:13,440 --> 00:16:14,440
Okay, yeah, it's linked here.

262
00:16:15,680 --> 00:16:19,400
So you can just open it up here to see the branches.

263
00:16:19,400 --> 00:16:21,120
And yeah, some more logistics.

264
00:16:21,120 --> 00:16:24,000
We know that there will be a coffee break at 3 PM, but

265
00:16:24,040 --> 00:16:27,480
not because this step can take from very little to a long time.

266
00:16:27,480 --> 00:16:30,560
If you want to have a 5-10 minute break, also feel free and

267
00:16:30,560 --> 00:16:33,160
we will be waiting 10 minutes for this section anyway.

268
00:16:35,160 --> 00:16:37,480
No shame here, you can go to the toilet filling water.

269
00:16:40,440 --> 00:16:42,000
All right, anyone needs more time?

270
00:16:46,360 --> 00:16:47,080
Take that as a no.

271
00:16:47,080 --> 00:16:49,200
If you've documented one method, it's fine.

272
00:16:49,200 --> 00:16:49,700
Yeah.

273
00:16:49,700 --> 00:16:51,920
We can continue the regulation.

274
00:16:51,920 --> 00:16:52,420
Yeah.

275
00:16:54,000 --> 00:16:59,640
All right, so in this section,

276
00:16:59,640 --> 00:17:05,480
we'll learn how to generate HTML documents from the docstrings that you just filled out.

277
00:17:06,840 --> 00:17:09,240
So for this, we're gonna need two extensions.

278
00:17:09,240 --> 00:17:14,360
First, autodoc, which pulls documentation from the docstring annotations.

279
00:17:14,360 --> 00:17:18,840
And second is Napoleon, which Olga spoke about.

280
00:17:18,840 --> 00:17:22,080
It's gonna help Sphinx understand the Google style docstrings that we use.

281
00:17:22,080 --> 00:17:27,800
So yeah, you're gonna list the extensions that you need to use.

282
00:17:27,800 --> 00:17:34,320
And then the main command that we're using in this section is Sphinx API doc.

283
00:17:34,320 --> 00:17:39,040
So yeah, you're gonna point it to the output directory,

284
00:17:39,040 --> 00:17:43,160
which is your docs folder, and then also your source directory where your Python

285
00:17:43,160 --> 00:17:48,680
files live, so that it can generate RST files for

286
00:17:48,800 --> 00:17:54,680
each Python file that you've annotated.

287
00:17:54,680 --> 00:17:57,080
And this is what the separate flag here is for.

288
00:17:58,600 --> 00:18:05,680
This is to tell it that we want to end up with one individual HTML file per module.

289
00:18:07,600 --> 00:18:09,400
If you don't use it, of course, it's optional.

290
00:18:09,400 --> 00:18:13,600
If you don't use it, then it would generate your documentation in one page.

291
00:18:13,600 --> 00:18:16,880
But we thought it just looks nicer, so we used it.

292
00:18:18,920 --> 00:18:19,440
Yeah.

293
00:18:23,520 --> 00:18:26,440
Yeah, you'll also, so once you've done that,

294
00:18:26,440 --> 00:18:32,320
you'll also link the module components in the content tree.

295
00:18:32,320 --> 00:18:36,880
So this will allow you to be able to see the contents tree here.

296
00:18:36,880 --> 00:18:42,200
Because the max depth, if you left it at two, is two.

297
00:18:42,200 --> 00:18:46,280
So you can only see the top level.

298
00:18:46,320 --> 00:18:50,400
You can also configure the max depth to be a little bit deeper if you want to see

299
00:18:50,400 --> 00:18:53,240
the contents in the home page.

300
00:18:55,360 --> 00:18:59,320
Yeah, so that's what this step is.

301
00:18:59,320 --> 00:19:02,520
So yeah, you're gonna rebuild the documentation, and you should be able to

302
00:19:02,520 --> 00:19:07,400
see by the end of this step something that looks like, well,

303
00:19:07,400 --> 00:19:10,720
something that looks like this, except it's not gonna be using the cool theme yet,

304
00:19:10,720 --> 00:19:11,480
cuz we haven't done that.

305
00:19:11,480 --> 00:19:17,480
Okay, I know some people have run into a few issues, but

306
00:19:17,480 --> 00:19:19,880
I think we're in an okay pace.

307
00:19:19,880 --> 00:19:22,640
And we're gonna do the next step, which is kind of optional and

308
00:19:22,640 --> 00:19:26,640
more fun, so people who have finished can play with something.

309
00:19:26,640 --> 00:19:29,520
So this would be selecting a theme for your website.

310
00:19:30,880 --> 00:19:34,800
So Sphinx comes with some built-in themes.

311
00:19:34,800 --> 00:19:38,000
You can see them linked here.

312
00:19:38,040 --> 00:19:40,200
So in your conf.py,

313
00:19:40,200 --> 00:19:45,440
you can see that there is already a theme that is chosen called alabaster.

314
00:19:45,440 --> 00:19:49,280
And now you can choose whatever you want from all the built-in themes, and

315
00:19:49,280 --> 00:19:51,040
you can see what you like most.

316
00:19:51,040 --> 00:19:52,680
So you can try, for example, classic.

317
00:19:55,360 --> 00:19:59,240
You can always then make HTML, open your website again, and

318
00:19:59,240 --> 00:20:02,240
see what look you like the best.

319
00:20:02,240 --> 00:20:07,160
But besides the built-in themes, a lot of people have created their own themes,

320
00:20:07,160 --> 00:20:11,120
that they get sipped with PIP.

321
00:20:11,120 --> 00:20:14,920
So the theme that we have been using in our example project and

322
00:20:14,920 --> 00:20:17,600
the final website you've been seeing is called Furo.

323
00:20:17,600 --> 00:20:20,920
It was created by a Bloomington engineer, Pradhan, and yeah,

324
00:20:20,920 --> 00:20:22,320
we want to support him.

325
00:20:22,320 --> 00:20:24,400
Also, we like the theme a lot.

326
00:20:24,400 --> 00:20:29,960
So to use a PyPI theme, you can PIP install Furo.

327
00:20:29,960 --> 00:20:35,560
And then in your conf.py, you select that this is the HTML theme I will be using.

328
00:20:35,600 --> 00:20:41,600
You make HTML again, and you can commit, push to have these changes as well.

329
00:20:41,600 --> 00:20:45,040
And you can just refresh your website, and you can see how it looks.

330
00:20:47,680 --> 00:20:52,280
What we like a lot is that it has a built-in dark mode for some of us,

331
00:20:52,280 --> 00:20:52,800
full of black.

332
00:20:54,920 --> 00:20:57,720
So yeah, have a try with that if you want.

333
00:20:59,600 --> 00:21:01,600
If you like something else, that is okay, but

334
00:21:01,600 --> 00:21:04,760
we recommend for the duration of this workshop you continue with Furo,

335
00:21:05,160 --> 00:21:08,560
because at some point you will need to make some changes on the theme.

336
00:21:08,560 --> 00:21:11,280
And yeah, it will work better if we're all on the same theme.

337
00:21:12,760 --> 00:21:14,600
So that is one part of this section.

338
00:21:14,600 --> 00:21:18,280
And then another styling element that you can add in your website.

339
00:21:18,280 --> 00:21:22,320
If you're someone like me who has normally millions of tabs open,

340
00:21:22,320 --> 00:21:25,280
you want to recognize them by their fabric.

341
00:21:25,280 --> 00:21:28,240
So you're gonna add the fabric on your website now.

342
00:21:29,800 --> 00:21:33,400
So the way you do it in your conf.py, you can just give a link,

343
00:21:34,360 --> 00:21:39,120
give them directory where your image of the favicon is stored.

344
00:21:41,120 --> 00:21:45,280
Generally we prefer to use this underscore static directory for

345
00:21:45,280 --> 00:21:46,080
these sort of things.

346
00:21:47,240 --> 00:21:50,280
And you can use whatever you like.

347
00:21:50,280 --> 00:21:53,320
If you don't want to be choosing right now,

348
00:21:53,320 --> 00:21:58,240
you can find in the example project under images, favicon.ico, and

349
00:21:58,240 --> 00:21:59,720
you can use that.

350
00:21:59,720 --> 00:22:04,560
And again, you can make it HTML, commit your changes to main, so they're there.

351
00:22:07,280 --> 00:22:09,720
Again, this is like an optional step.

352
00:22:09,720 --> 00:22:13,000
So if you're running behind something else,

353
00:22:13,000 --> 00:22:16,280
you can continue working that and not worry about this section.

354
00:22:16,280 --> 00:22:19,640
Although, yeah, we do recommend that you install Furo at some point.

355
00:22:22,920 --> 00:22:27,520
So yeah, I think we're gonna give five minutes for this one, so

356
00:22:27,560 --> 00:22:29,520
that we can move on to the next section.

357
00:22:29,520 --> 00:22:34,160
And then we're gonna have a longer break, because yeah, we probably need it.

358
00:22:34,160 --> 00:22:38,280
To make it also more exciting before the break, we're hoping that some of you,

359
00:22:38,280 --> 00:22:41,480
most of you, will have their website hosted on GitHub pages.

360
00:22:41,480 --> 00:22:45,680
And you will have a server link to sign with your friends.

361
00:22:45,680 --> 00:22:48,000
It's a big milestone.

362
00:22:48,000 --> 00:22:52,080
All right, hopefully you've installed Furo and your website now looks pretty.

363
00:22:52,080 --> 00:22:57,600
Next, we're gonna learn how to host the website on GitHub pages,

364
00:22:57,600 --> 00:23:04,880
which is really exciting because you'll have a link that you can share with people.

365
00:23:04,880 --> 00:23:07,760
And yeah, they can visit your website.

366
00:23:09,160 --> 00:23:13,760
Of course, there are many hosting options, but we picked GitHub pages because

367
00:23:13,760 --> 00:23:17,040
we didn't want you to have to learn about a new tool.

368
00:23:17,040 --> 00:23:21,240
Chances are your project is already on GitHub.

369
00:23:21,240 --> 00:23:23,160
You already do your source control there, so

370
00:23:24,720 --> 00:23:26,800
using GitHub pages is just one extra step.

371
00:23:27,960 --> 00:23:29,960
Okay, so to use GitHub pages,

372
00:23:29,960 --> 00:23:35,600
we're gonna be creating a branch called GitHub pages, gh-pages.

373
00:23:35,600 --> 00:23:38,880
So this is a special name that GitHub recognizes.

374
00:23:38,880 --> 00:23:44,480
And when you create this branch, and it just automatically detects that you're

375
00:23:44,480 --> 00:23:49,440
trying to use GitHub pages, and it gives you a URL that your website will be hosted

376
00:23:49,480 --> 00:23:50,120
on.

377
00:23:50,120 --> 00:23:53,760
So for instance, for me, this is the example project.

378
00:23:55,760 --> 00:23:58,720
I can't show you the settings because this is not my laptop.

379
00:23:58,720 --> 00:24:05,800
But okay, but you will be able to see in the settings under pages,

380
00:24:05,800 --> 00:24:08,680
the URL that your website is hosted at.

381
00:24:08,680 --> 00:24:13,520
I also have mine linked here, but it will look something like this.

382
00:24:13,520 --> 00:24:18,000
So it would be your username.github.io slash the name of your package.

383
00:24:20,400 --> 00:24:27,160
Okay, all right, so to do that, we have a few steps.

384
00:24:27,160 --> 00:24:31,200
First, we're gonna be creating the orphan GitHub pages branch.

385
00:24:31,200 --> 00:24:34,200
The reason why we wanna create an orphan branch and

386
00:24:34,200 --> 00:24:39,280
a completely empty branch at first is because we only wanna put our HTML files

387
00:24:39,280 --> 00:24:43,880
there, so we don't want it to have any of the other things that we've committed

388
00:24:43,880 --> 00:24:44,720
on our main branch.

389
00:24:45,680 --> 00:24:51,160
Next, we're gonna create a local work tree that we mount at

390
00:24:51,160 --> 00:24:54,880
the HTML output folder for GitHub pages.

391
00:24:56,320 --> 00:25:03,920
And then first, we're gonna put a very simple hello world website.

392
00:25:03,920 --> 00:25:08,360
So just in an index.html, it will only have a title saying hello world,

393
00:25:08,360 --> 00:25:13,720
just so that you can get familiar with how GitHub pages deploys your documentation.

394
00:25:13,720 --> 00:25:19,640
So you'll see that every time you push something to the GitHub pages branch,

395
00:25:19,640 --> 00:25:21,800
this action kicks off.

396
00:25:21,800 --> 00:25:28,440
So it's called pages build deployment, and it just rebuilds your documentation.

397
00:25:28,440 --> 00:25:34,920
And once it's done, you can see your changes take effect on the live URL.

398
00:25:36,200 --> 00:25:39,360
So that's the first exercise we're gonna do.

399
00:25:40,080 --> 00:25:43,920
And then before we actually push our website on GitHub pages,

400
00:25:43,920 --> 00:25:46,560
just a couple of small things that we're gonna do.

401
00:25:46,560 --> 00:25:52,880
So first, a quick utility to help us clean our local working directory quickly.

402
00:25:54,480 --> 00:25:57,720
And then also, we're gonna be disabling Jekyll,

403
00:25:57,720 --> 00:26:03,720
which is a static site generator that GitHub pages uses by default.

404
00:26:03,720 --> 00:26:06,360
But because we're already using Sphinx to generate our website,

405
00:26:06,360 --> 00:26:08,560
we don't wanna use that, so we just disable it.

406
00:26:10,040 --> 00:26:14,640
Yeah, and then you'll just be ready to put your website,

407
00:26:14,640 --> 00:26:18,800
all the HTML files you've created so far on the GitHub pages branch.

408
00:26:18,800 --> 00:26:24,480
And yeah, you should have a live website like I have here.

409
00:26:26,040 --> 00:26:28,160
I'll let you get started on that.

410
00:26:28,160 --> 00:26:30,800
Since a couple of people already ran into this,

411
00:26:30,800 --> 00:26:37,440
when you were creating from the template, there was an option to include all branches.

412
00:26:37,440 --> 00:26:43,200
So if you selected that and you're now on this step, there's already a GH branches.

413
00:26:43,200 --> 00:26:45,680
So you have to push force.

414
00:26:45,680 --> 00:26:51,040
So at the point where we ask you to git push origin GH pages,

415
00:26:51,040 --> 00:26:56,040
use a flag space, that's F to force push and override what existed there.

416
00:26:57,960 --> 00:26:59,400
Yeah, any questions?

417
00:26:59,400 --> 00:27:00,160
Let us know about this.

418
00:27:07,520 --> 00:27:09,400
Yeah, so probably the last up here.

419
00:27:24,320 --> 00:27:28,840
This is a longer section, but we said that we're gonna send you for a break at 3 PM.

420
00:27:28,840 --> 00:27:31,760
So if you are done, feel free to go.

421
00:27:31,760 --> 00:27:35,400
But even if you're not done and you need a break, feel free to go.

422
00:27:35,440 --> 00:27:39,120
I think we're gonna continue at 3.20.

423
00:27:39,120 --> 00:27:43,280
Okay, yeah, so try to be there by then.

424
00:27:43,280 --> 00:27:47,640
And yeah, from this step, as we said, this is a big milestone.

425
00:27:47,640 --> 00:27:51,240
So hopefully, if you've only reached this step,

426
00:27:51,240 --> 00:27:56,880
you already have something that you can keep working or showcase back to your companies.

427
00:27:56,880 --> 00:27:57,920
Or I don't know.

428
00:27:57,920 --> 00:28:03,160
And in the next sections, we're gonna see how we can run some automation on this workflow,

429
00:28:03,160 --> 00:28:08,400
so that we don't have to keep creating these GH pages, brands, and do everything locally.

430
00:28:08,400 --> 00:28:11,800
We're gonna use GitHub actions to automate the process.

431
00:28:11,800 --> 00:28:16,600
So you're just gonna have to chill, push your changes to main and everything.

432
00:28:16,600 --> 00:28:20,640
All the documentation generation will happen on its own magically.

433
00:28:20,640 --> 00:28:24,800
And then the last interesting piece is to add versioning.

434
00:28:24,800 --> 00:28:31,280
So the way that your API evolves, you're gonna be adding new features.

435
00:28:31,280 --> 00:28:39,320
How can people refer back to all the documentation in the running and different version of your package?

436
00:28:39,320 --> 00:28:45,320
Okay, so next section is automating updates.

437
00:28:45,320 --> 00:28:48,480
So far, we've been manually going through the steps.

438
00:28:48,480 --> 00:28:54,760
And now we're gonna learn how to put it together in an automated workflow.

439
00:28:54,760 --> 00:28:58,040
For that, we're gonna use another GitHub feature.

440
00:28:58,040 --> 00:29:06,360
Not because we're trying to promote GitHub, but because we're just trying to not make you learn too many tools.

441
00:29:06,360 --> 00:29:08,680
But GitHub actions are very useful.

442
00:29:08,680 --> 00:29:17,280
They allow you to, yeah, basically automate a number of workflows on a given trigger.

443
00:29:17,280 --> 00:29:24,000
So for example, this is a very simple Hello World workflow.

444
00:29:24,040 --> 00:29:33,880
You can create a file, a YAML file under this path here so that GitHub can recognize it as a workflow.

445
00:29:33,880 --> 00:29:36,600
And this is the content of the file.

446
00:29:36,600 --> 00:29:38,240
So you can name your workflow something.

447
00:29:38,240 --> 00:29:39,880
We named this Hello World.

448
00:29:39,880 --> 00:29:42,400
And then you choose a trigger.

449
00:29:42,400 --> 00:29:48,320
There are many triggers that GitHub supports, but this is an example of a simple trigger.

450
00:29:48,360 --> 00:29:57,080
We're saying here that we want to run this workflow every time there is a push to the main branch.

451
00:29:57,080 --> 00:30:01,720
And then we're defining a number of jobs that we want to run.

452
00:30:01,720 --> 00:30:05,400
In this case, we only have one job called Hello.

453
00:30:05,400 --> 00:30:09,880
And it just has one step that just says Hello.

454
00:30:09,880 --> 00:30:17,560
So we name the step, say hello, and the actual command involved in this step is just saying Hello World.

455
00:30:17,560 --> 00:30:25,680
So this is just an example of a workflow so you understand the structure of GitHub actions.

456
00:30:25,680 --> 00:30:31,360
But now we're going to create a workflow for deploying our documentation.

457
00:30:31,360 --> 00:30:39,960
So similar to what we did above, we're going to create a YAML file under the GitHub slash workflows folder.

458
00:30:39,960 --> 00:30:43,640
We're going to name it Publish Sphinx Documentation.

459
00:30:43,680 --> 00:30:48,080
And the trigger again is on a push to the main branch.

460
00:30:48,080 --> 00:30:50,280
We're going to do the following.

461
00:30:50,280 --> 00:30:55,080
First, we're going to ask for write permissions for the content scope.

462
00:30:55,080 --> 00:30:59,600
This will allow us to push to our GitHub repo.

463
00:30:59,600 --> 00:31:01,800
And here are the steps.

464
00:31:01,800 --> 00:31:05,840
So first, we're going to check out the repo.

465
00:31:05,840 --> 00:31:11,480
We're going to set up Python here because we're working in 3.11.

466
00:31:11,480 --> 00:31:14,520
We put 3.11 as the Python version.

467
00:31:14,520 --> 00:31:22,320
But if you're using a different Python version, then, of course, modify the step to use the version that you're working with.

468
00:31:22,320 --> 00:31:29,560
OK, now that we've set up the Python version that we need, we will install the dependencies.

469
00:31:29,560 --> 00:31:34,360
You probably recognize these steps from what we've done earlier manually.

470
00:31:34,360 --> 00:31:41,280
So first, we install our project in edit mode and then we install our dependencies.

471
00:31:41,280 --> 00:31:45,680
So far, we've used Sphinx and Furrow, the theme.

472
00:31:45,680 --> 00:31:48,760
Next, we're going to build the Sphinx documentation.

473
00:31:48,760 --> 00:32:02,480
So first, we use the Sphinx API doc tool to generate any RST files that are missing from our Python files that are annotated with the doc strings.

474
00:32:02,480 --> 00:32:08,120
And then we use the Sphinx build command to actually build HTML files.

475
00:32:08,160 --> 00:32:12,280
This is the command that we've been using throughout, but we've been doing make HTML.

476
00:32:12,280 --> 00:32:16,960
This is just a convenience so that you don't have to type out this whole command.

477
00:32:16,960 --> 00:32:21,280
But that's what's really running under the hood.

478
00:32:21,280 --> 00:32:24,880
Yeah, and finally, the deploy step.

479
00:32:24,880 --> 00:32:31,360
So we're just using this action here called actions-githubpages.

480
00:32:31,360 --> 00:32:36,880
We're telling it we want to publish the output to the GitHub pages branch.

481
00:32:36,880 --> 00:32:41,800
The output lives in the docs slash build slash HTML folder.

482
00:32:41,800 --> 00:32:45,480
And yeah, it's an orphan branch.

483
00:32:45,480 --> 00:32:56,040
So it's all the steps that we've done so far, but just written all together in a workflow that GitHub will automatically run for you.

484
00:32:56,040 --> 00:33:05,560
Yeah, here is the whole workflow put together so you can understand what it looks like, you know, all together.

485
00:33:05,600 --> 00:33:15,960
And then, yeah, you're just going to commit this branch to GitHub and you're going to observe that because this is a commit domain or a push domain,

486
00:33:15,960 --> 00:33:20,080
you're going to observe that GitHub ran your action.

487
00:33:20,080 --> 00:33:23,000
You should be able to click through it and see.

488
00:33:23,000 --> 00:33:30,040
Oh, OK, I have not been showing.

489
00:33:30,040 --> 00:33:36,120
OK, I have not been showing this on the screen here.

490
00:33:36,120 --> 00:33:38,600
Yeah, sorry.

491
00:33:38,600 --> 00:33:40,960
Hopefully, what I said makes sense.

492
00:33:40,960 --> 00:33:45,120
I'll just follow. I'll just show again the completed workflow.

493
00:33:45,120 --> 00:33:47,680
So this is the name of the workflow.

494
00:33:47,680 --> 00:33:49,000
This is the trigger.

495
00:33:49,000 --> 00:33:53,480
So on push domain, we trigger the workflow.

496
00:33:53,480 --> 00:33:57,520
And these are the steps involved in our job.

497
00:33:57,560 --> 00:34:04,640
So check out the branch, set up the Python version that we need, install the dependencies.

498
00:34:04,640 --> 00:34:08,920
So Sphinx and Furo run our Sphinx build commands.

499
00:34:08,920 --> 00:34:11,960
So API doc and Sphinx build.

500
00:34:11,960 --> 00:34:15,400
And then finally, deploy.

501
00:34:15,400 --> 00:34:21,080
Yeah, deploy to GitHub pages.

502
00:34:21,080 --> 00:34:28,800
Yeah, so once you've committed that workflow, you should be able to go to the actions tab here.

503
00:34:28,800 --> 00:34:34,240
And you're going to see an action that looks like this.

504
00:34:34,240 --> 00:34:42,680
It's going to have the name that we named it, which is publish Sphinx documentation.

505
00:34:42,680 --> 00:34:50,280
And you're going to be able to click through it and see the details of each step as GitHub runs it.

506
00:34:50,280 --> 00:34:52,640
So you can see here, this is the Sphinx build command.

507
00:34:52,640 --> 00:34:56,720
And you'll see the familiar output that you've been seeing locally.

508
00:34:56,720 --> 00:35:02,240
But now it's running on our remote machine.

509
00:35:04,560 --> 00:35:06,680
Yeah, please do let me know if you have any questions.

510
00:35:06,680 --> 00:35:12,440
Sorry, I thought I was showing all these steps as I was talking.

511
00:35:12,440 --> 00:35:13,320
Yeah.

512
00:35:13,320 --> 00:35:17,720
So how's it going? How many people managed to have their action working?

513
00:35:17,760 --> 00:35:20,920
Okay, have a few.

514
00:35:20,920 --> 00:35:25,400
I'm going to give another minute and I think we can move on to the next section,

515
00:35:25,400 --> 00:35:30,200
which is the kind of more like, let's say advanced feature.

516
00:35:30,200 --> 00:35:34,280
If you read the hosting on GitHub pages and then automating updates,

517
00:35:34,280 --> 00:35:36,800
you have the whole workflow already working for you.

518
00:35:36,800 --> 00:35:43,600
So you can see that now you can push to main any changes you make on your modules.

519
00:35:43,600 --> 00:35:46,920
And then the action is going to rebuild the documentation.

520
00:35:46,920 --> 00:35:50,760
And the publishing action for GitHub pages is going to publish it.

521
00:35:50,760 --> 00:35:53,080
So everything works fine.

522
00:35:53,080 --> 00:35:56,640
Okay, I'll give one more minute and then we move on to versioning.

523
00:35:56,640 --> 00:36:00,120
Okay, let's start the next chapter.

524
00:36:02,600 --> 00:36:06,520
So as we've said, your project continues to evolve.

525
00:36:06,520 --> 00:36:12,280
Maybe you add more modules or you add more methods to your interface

526
00:36:12,320 --> 00:36:14,640
or any changes might happen.

527
00:36:14,640 --> 00:36:16,800
But you still want to support your previous version.

528
00:36:16,800 --> 00:36:20,680
Someone else might be using that and they want to refer to the documentation.

529
00:36:20,680 --> 00:36:25,800
For this reason, it can be useful to have different versions of your documentation as well.

530
00:36:25,800 --> 00:36:32,200
Today, we will see how we can do that using a popular extension called Sphinx docs

531
00:36:32,200 --> 00:36:33,480
multi-version.

532
00:36:33,480 --> 00:36:36,480
There's a lot of different ways you can do that.

533
00:36:36,480 --> 00:36:41,520
This one we found it was the easier to use.

534
00:36:41,560 --> 00:36:44,000
And yeah, so we'll be going with that.

535
00:36:44,000 --> 00:36:49,680
So first of all, we will be installing this new package in our virtual environment

536
00:36:49,680 --> 00:36:53,080
and we'll make sure we use it in our conf.py.

537
00:36:53,080 --> 00:36:56,480
And from there on, we're going to need to do some HTML magic.

538
00:36:56,480 --> 00:36:58,560
I know everyone loves that.

539
00:36:58,560 --> 00:37:05,440
But we're working with the theme Furo as we saw on chapter six.

540
00:37:05,480 --> 00:37:10,720
Now we're going to need to configure it to allow to show the different versions.

541
00:37:10,720 --> 00:37:21,040
You see in our completed example that here we have chosen that we want to be displaying

542
00:37:21,040 --> 00:37:26,400
all different branches that exist in our repository and all the different git tags.

543
00:37:26,400 --> 00:37:31,040
Traditionally, you might want to only display tags or something else,

544
00:37:31,040 --> 00:37:34,560
but we're showing how you can do both and then you can configure it however you like.

545
00:37:35,440 --> 00:37:42,000
So we add the extension and now we start configuring the sidebar as we like.

546
00:37:42,000 --> 00:37:48,000
So we're going to need to create a document, an HTML file called under template sidebar

547
00:37:48,000 --> 00:37:56,080
versus HTML where this one explains exactly how we want the branches and tags to be displayed.

548
00:37:57,600 --> 00:38:02,800
So because we are kind of overriding how the sidebar is going to look like,

549
00:38:02,800 --> 00:38:08,080
we need to tell Furo that, okay, we're overriding this, but everything else,

550
00:38:08,080 --> 00:38:12,080
we want to use the default version. So don't think that we only need that.

551
00:38:12,080 --> 00:38:16,080
So for this reason, in your conf.py, you're going to need to make this configuration

552
00:38:16,640 --> 00:38:22,240
so that the website titles, edgebar, content tree, unscratchable section of the sidebar

553
00:38:22,240 --> 00:38:26,320
still render as we like. So just add this on your conf.py.

554
00:38:27,600 --> 00:38:32,560
And then we're ready to start using Sphinx multiversion to build our docs.

555
00:38:33,040 --> 00:38:39,440
So Sphinx multiversion is going to replace the Sphinx build command that was getting

556
00:38:39,440 --> 00:38:46,720
run whenever you were doing make HTML. So you're going to complete this section,

557
00:38:46,720 --> 00:38:55,200
run the command as here in the documentation. And after that, we're going to commit the changes

558
00:38:55,200 --> 00:39:00,560
that we have made on our conf.py and on our sidebar to have them on our main branch.

559
00:39:00,560 --> 00:39:07,040
So then we know when we need to, in the next step, we're going to enable our GitHub action.

560
00:39:07,040 --> 00:39:12,960
Everything exists there. So once you have done that, you're all set up to be using

561
00:39:12,960 --> 00:39:19,840
multiversion and then we can try to test it out. So what you're going to do is we're going to create

562
00:39:19,840 --> 00:39:26,960
a git tag of the current state of your project and you're going to push this tag to GitHub.

563
00:39:27,920 --> 00:39:32,880
Then we're going to make a small change on your index rest file. It can be whatever you like.

564
00:39:32,880 --> 00:39:39,440
Here we're just adding a new sentence after the first heading. And then we're going to push those

565
00:39:39,440 --> 00:39:47,040
changes to main. From then on, we're going to run multiversion. And then locally, you're going to

566
00:39:47,040 --> 00:39:55,760
see that multiversion has generated under the build HTML directory different directories for

567
00:39:56,320 --> 00:40:02,160
all the different versions of your code. One is your main branch and then we have the tag that

568
00:40:02,160 --> 00:40:08,800
we created with version 001. So you can go and you can browse those and you're going to see that

569
00:40:08,800 --> 00:40:15,600
version one is different from main because we have added a new change in main. So after that,

570
00:40:15,600 --> 00:40:21,680
you're going to push all your changes to GitHub pages so that you can see how now it looks with

571
00:40:21,680 --> 00:40:27,520
the sidebar and the two different versions we have created, main and version one.

572
00:40:29,680 --> 00:40:35,600
You can run into a problem and we're going to solve this way. So the problem is that because

573
00:40:35,600 --> 00:40:41,760
now with Sphinx multiversion, all of your HTML files are generated under respective

574
00:40:41,760 --> 00:40:47,120
directories of the git branch or the git tag that you're using. That means that there's no

575
00:40:47,120 --> 00:40:54,160
index.html created. So for this reason, we're going to need to say that index.html is going

576
00:40:54,160 --> 00:41:01,120
to redirect to the version that we would like. In our case, we choose the main branch. So we're

577
00:41:01,120 --> 00:41:08,480
going to need to redirect the initial, the outside index.html to the main index.html.

578
00:41:09,440 --> 00:41:15,120
You're going to need that by adding this logic and committing it and pushing it also to the

579
00:41:15,120 --> 00:41:22,480
GitHub pages branch. And from there, you should be seeing success. So in your username,

580
00:41:22,480 --> 00:41:29,840
github.io, Sphinx website, you're going to be able to view your main branch and your tag. And

581
00:41:29,840 --> 00:41:35,760
the index.html is going to, like this page, should take you to the code as it exists on your main

582
00:41:36,800 --> 00:41:44,560
branch. Finally, we have here some information. If you want to customize which branches you want

583
00:41:44,560 --> 00:41:49,680
to display or something like that, and you're good with regular expressions, you can try different

584
00:41:49,680 --> 00:41:56,640
things and you can see how this can be displayed. There's more steps here. So we're going to give

585
00:41:56,640 --> 00:42:04,320
more time. Yeah. And you can go ahead with that. And after this section, we're going to see how we

586
00:42:04,320 --> 00:42:08,640
can modify our GitHub action to support multi-version. Yeah. Something to note,

587
00:42:08,640 --> 00:42:14,000
because a few people have asked, because we're doing this step now and we're using something

588
00:42:14,000 --> 00:42:19,120
different from the GitHub action, you might see some failures. Do not worry about that. It is

589
00:42:19,120 --> 00:42:24,000
normal because we have changed what we're doing. So in the next step, we're going to be fixing the

590
00:42:24,000 --> 00:42:29,760
action and everything will be working again. All right. We're now ready to do the last section

591
00:42:30,800 --> 00:42:36,880
of the workshop. So here we're just going to automate everything we did in the last step by

592
00:42:37,680 --> 00:42:46,000
adding it in our GitHub workflow. Okay. So we're just going to make a few small modifications.

593
00:42:47,200 --> 00:42:53,760
First, we're going to change the trigger that we had before. So before, to make things easy,

594
00:42:53,760 --> 00:43:00,640
we were triggering our workflow on every push domain. But realistically, you're not creating

595
00:43:00,640 --> 00:43:05,920
a new version of your documentation every time you push domain, right? You're probably creating

596
00:43:05,920 --> 00:43:09,680
a new release of your software and that's when you want to publish a new version of your

597
00:43:09,680 --> 00:43:17,360
documentation. So we chose this trigger here, which says when a new release is published,

598
00:43:17,360 --> 00:43:23,760
that's when it's going to trigger the workflow. We're also modifying the checkout step to

599
00:43:25,440 --> 00:43:31,200
fetch all the history of all the branches and tags. Oh, all right. Again, I'm not showing what

600
00:43:31,200 --> 00:43:38,080
I'm talking about. Okay. Sorry. This is the trigger that I was talking about. So on release

601
00:43:38,080 --> 00:43:46,880
published. So that's when you publish a release. Yeah. And then we're going to modify this step.

602
00:43:48,080 --> 00:43:53,760
So we don't want to just fetch the main branch. We also want to fetch all the branches and tags

603
00:43:55,040 --> 00:44:00,640
on the repo. That's because Sphinx Multiversion needs to see those to be able to

604
00:44:00,640 --> 00:44:05,920
create all the different versions of your documentation. We'll also modify the

605
00:44:06,640 --> 00:44:12,800
install dependency step to install Sphinx Multiversion. And we'll also modify the

606
00:44:12,800 --> 00:44:17,600
Sphinx build step to of course use Sphinx Multiversion instead of Sphinx build.

607
00:44:20,160 --> 00:44:30,480
So yeah. Also one more detail to add here. In the previous step, we'd created an HTML file that

608
00:44:30,960 --> 00:44:37,520
redirects the user to a default version of the documentation. So we're just going to copy this

609
00:44:38,080 --> 00:44:49,200
file into a location that GitHub workflow can see so that we can also have this redirect index.html

610
00:44:49,200 --> 00:44:58,960
there. Yeah. And that's what the workflow looks like altogether. Yeah. So just go ahead and do

611
00:44:58,960 --> 00:45:05,200
that and then commit it. And then you can test it out by actually creating a new release

612
00:45:06,720 --> 00:45:15,920
of your project. So you can name it say version 0.0.2. And yeah, you'll see that the workflow has

613
00:45:15,920 --> 00:45:21,920
kicked off and it has created all the branches for you. So you should be able to see all the branches

614
00:45:22,480 --> 00:45:28,160
appear and also the second tag here from the second release that you created.

615
00:45:29,680 --> 00:45:36,800
Yeah. That's all. I'll let you do that. Okay. If you're done, we do have a little feedback

616
00:45:36,800 --> 00:45:43,840
form. We'd really appreciate some feedback if you can give us some. And it's on this link here.

