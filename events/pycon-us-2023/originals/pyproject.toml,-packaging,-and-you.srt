1
00:00:00,000 --> 00:00:01,000
So, my name is Moises Arca.

2
00:00:01,000 --> 00:00:10,000
My website is coverdisi.com where you can find everything about community and also humankind.

3
00:00:10,000 --> 00:00:20,000
And today I want to tell you about Spike ProjectOMO, packaging, and how you're going to fit into

4
00:00:20,000 --> 00:00:21,000
that picture.

5
00:00:21,000 --> 00:00:24,000
I am from a southern and northern country.

6
00:00:24,000 --> 00:00:28,000
I live in Belmont in the San Francisco Bay Area Peninsula, which is the ancestral homeland

7
00:00:28,000 --> 00:00:31,000
of the Ramaytush or Loni people.

8
00:00:31,000 --> 00:00:38,000
I also want to say that I'm going to be smashing donations up to a total of $100 to a circle.

9
00:00:38,000 --> 00:00:42,000
It's an LGBTQ plus charity in Utah.

10
00:00:42,000 --> 00:00:50,000
Okay, so before we dive into Spike ProjectOMO, let's talk a little bit about the total format.

11
00:00:50,000 --> 00:00:52,000
It's an interesting format.

12
00:00:52,000 --> 00:00:57,000
We want to talk about what's good about it and what you need to know.

13
00:00:57,000 --> 00:01:04,000
So, as far as semantics goes, you can more or less imagine that it's the JSON format,

14
00:01:04,000 --> 00:01:06,000
plus supports for dates.

15
00:01:06,000 --> 00:01:10,000
So, you don't have to figure out how to represent date or string or whatever.

16
00:01:10,000 --> 00:01:13,000
It has a native support for date.

17
00:01:13,000 --> 00:01:18,000
And also, as far as numeric types, while JSON makes flows to the integer and things,

18
00:01:18,000 --> 00:01:22,000
TOMO will tell you what's the flows and what's the integer.

19
00:01:22,000 --> 00:01:26,000
So, this is a good way to easily remember what is the semantics.

20
00:01:26,000 --> 00:01:30,000
What kind of stuff can you represent in TOMO at all?

21
00:01:30,000 --> 00:01:35,000
As far as syntax goes, it's more editable than JSON.

22
00:01:35,000 --> 00:01:41,000
If anyone has ever tried to manually edit in JSON, you know that it's a lot.

23
00:01:41,000 --> 00:01:47,000
Very easy to make mistakes, like fading formats and all kinds of things.

24
00:01:47,000 --> 00:01:50,000
We are going to do inedible formats.

25
00:01:50,000 --> 00:01:54,000
So, if you have a project, TOMO ends up being a pretty editable format, which is good,

26
00:01:54,000 --> 00:01:58,000
because you're going to be editing your project TOMO.

27
00:01:58,000 --> 00:02:07,000
If you can actually use some tools to update it, but often in the case you want to edit it using your editor,

28
00:02:07,000 --> 00:02:10,000
it's much, much easier to parse than YAML.

29
00:02:10,000 --> 00:02:13,000
So, first it's much easier to parse face-only,

30
00:02:13,000 --> 00:02:20,000
because you have weird options or weird extensions that often bring YAML down.

31
00:02:20,000 --> 00:02:28,000
And also, really important, it's not supported in the previous version of Python in the library.

32
00:02:28,000 --> 00:02:32,000
Again, that's a reflection of it, but it's much easier to parse,

33
00:02:32,000 --> 00:02:36,000
so the core developers felt more confident putting a parser built in.

34
00:02:36,000 --> 00:02:42,000
So, this is good, because we'll be talking a lot about parsing in generation TOMO.

35
00:02:42,000 --> 00:02:46,000
And, just an example.

36
00:02:46,000 --> 00:02:50,000
So, the first thing you'll see, that's TOMO support comments.

37
00:02:50,000 --> 00:02:57,000
It's really useful, again, that's one of the things that makes it more editable than JSON if you actually want to explain

38
00:02:57,000 --> 00:03:00,000
why you did something in the file.

39
00:03:00,000 --> 00:03:07,000
You know, this detail thing is right there, so work around for bug XSS, and you just put it there.

40
00:03:07,000 --> 00:03:10,000
This is not exactly how things might look in your project tunnel.

41
00:03:10,000 --> 00:03:15,000
This is just to represent TOMO in a quantity that's something that will remind you of what's in a project.

42
00:03:15,000 --> 00:03:21,000
So, what logic itself is what we call a table in TOMO,

43
00:03:21,000 --> 00:03:24,000
and when you parse this table, it gets a form of addition,

44
00:03:24,000 --> 00:03:28,000
which means name and author are going to be queues in that dish name.

45
00:03:28,000 --> 00:03:37,000
The author is a list, well, in TOMO terms it's an array.

46
00:03:37,000 --> 00:03:40,000
When you parse it, it will transform into a list.

47
00:03:40,000 --> 00:03:46,000
And, TOMO has a special syntax for something that's called key value pairs.

48
00:03:46,000 --> 00:03:52,000
When you parse it, key value pairs will also become a dish name.

49
00:03:52,000 --> 00:03:58,000
So, it means you can't really tell from what you just parsed back what was the original TOMO,

50
00:03:58,000 --> 00:04:01,000
but you usually don't need to and you don't care much.

51
00:04:01,000 --> 00:04:05,000
And that's the person who's writing it sometimes.

52
00:04:05,000 --> 00:04:09,000
They do things a bit differently if they need a bit more room to maneuver.

53
00:04:09,000 --> 00:04:12,000
So, what happens when you do parse it?

54
00:04:12,000 --> 00:04:18,000
I'm using TOMLY because I want it to be compatible with Python 3.10.

55
00:04:18,000 --> 00:04:25,000
3.11 has TOMOLED that's built into Python, so there's no reason to take it from TOMLY.

56
00:04:25,000 --> 00:04:32,000
We have exactly the same API, but we're very compatible, so you can just

57
00:04:32,000 --> 00:04:37,000
run the definitions back and forth.

58
00:04:37,000 --> 00:04:42,000
And I'm doing something a bit weird, but I hope that you understand why.

59
00:04:42,000 --> 00:04:46,000
I think the easiest way to display what data structure looks like in Python,

60
00:04:46,000 --> 00:04:49,000
is to just dump it into your DIMP.

61
00:04:49,000 --> 00:04:55,000
It's the easiest thing that you can easily display without using a wiki module,

62
00:04:55,000 --> 00:04:58,000
which sometimes has to be a bit of a problem.

63
00:04:58,000 --> 00:05:03,000
So, if we load the things that you just saw, that's what we get.

64
00:05:03,000 --> 00:05:09,000
So, at the top level it's a dictionary, marking the table name for the table content.

65
00:05:09,000 --> 00:05:13,000
At the top level the table is still in the dictionary.

66
00:05:13,000 --> 00:05:18,000
The name just maps to all the tags, there's a simple value.

67
00:05:18,000 --> 00:05:25,000
The author will map to a list, because remember when we said an array transforms into a list.

68
00:05:25,000 --> 00:05:30,000
And in that list is one item, and that one item is a dictionary,

69
00:05:30,000 --> 00:05:33,000
because the key value always refers to a dictionary.

70
00:05:33,000 --> 00:05:38,000
You see that the dictionary is kind of the default thing that you get out of it.

71
00:05:38,000 --> 00:05:41,000
And that's how you parse it.

72
00:05:41,000 --> 00:05:44,000
This is really important because we'll talk about, like,

73
00:05:44,000 --> 00:05:48,000
cases where you actually want to parse it yourself, or all kinds of reasons.

74
00:05:48,000 --> 00:05:56,000
So, okay, fine, we have the sum of the tomolays, we know how to write it, we know how to parse it.

75
00:05:56,000 --> 00:05:58,000
Why is PyProject only good for us?

76
00:05:58,000 --> 00:06:02,000
Well, originally it was designed to configure our build system.

77
00:06:02,000 --> 00:06:07,000
The system that takes our source code from a dictionary, from a directory,

78
00:06:07,000 --> 00:06:10,000
and makes it really out of it.

79
00:06:10,000 --> 00:06:15,000
Why do we want it in a file that's static and also something in SetupUI?

80
00:06:15,000 --> 00:06:18,000
Because SetupUI already consumes SetupTools.

81
00:06:18,000 --> 00:06:21,000
It can't even tell you what version of SetupTools it needs,

82
00:06:21,000 --> 00:06:25,000
because by the time SetupTools reads that file, it's kind of already a bit too late.

83
00:06:25,000 --> 00:06:31,000
So, again, we have a file, this will allow us to experiment with the parameters to SetupTools.

84
00:06:31,000 --> 00:06:35,000
The parameters to SetupTools is expressed by extensions, right?

85
00:06:35,000 --> 00:06:43,000
Again, you might want to use SetupTools right here before you start even reading the file, the logic.

86
00:06:43,000 --> 00:06:51,000
So, SetupTools per views, and again, being able to specify versions for that, for example, and so on.

87
00:06:51,000 --> 00:06:57,000
Now, everything seems to be the original goal here, you know, a little bit ambitious maybe,

88
00:06:57,000 --> 00:07:01,000
but it's not a very specific reason, why just to configure the build system.

89
00:07:01,000 --> 00:07:07,000
However, the name was just too seductive, and the format was also too seductive,

90
00:07:07,000 --> 00:07:09,000
and the combination of both meant that people were like,

91
00:07:09,000 --> 00:07:13,000
I can use it to configure my Python project.

92
00:07:13,000 --> 00:07:17,000
That's awesome, why do I need a configuration file?

93
00:07:17,000 --> 00:07:24,000
So, what is still used for that, and we're talking about that, right, we talk about packaging,

94
00:07:24,000 --> 00:07:29,000
is also going to be the place to put build system and logic metadata,

95
00:07:29,000 --> 00:07:33,000
like name and version that any build system would need.

96
00:07:33,000 --> 00:07:42,000
It's a place to configure ecosystem tools, that I thought I'll give examples later, and so on.

97
00:07:42,000 --> 00:07:51,000
So, in the build system section, one of the fields is required.

98
00:07:51,000 --> 00:07:56,000
This field is similar to the dependency field anywhere else.

99
00:07:56,000 --> 00:07:59,000
It says be the dependencies for running the build.

100
00:07:59,000 --> 00:08:03,000
Running the process, that takes us from a directory to a wheel.

101
00:08:03,000 --> 00:08:05,000
Not the dependencies, you need to install it.

102
00:08:05,000 --> 00:08:07,000
It might be more, it might be less.

103
00:08:07,000 --> 00:08:10,000
You don't necessarily need set up tools to install, you probably need set up tools to build.

104
00:08:10,000 --> 00:08:15,000
And you probably don't need, like, your YAML parser to install,

105
00:08:15,000 --> 00:08:17,000
but you probably need it when you're at Ranta.

106
00:08:17,000 --> 00:08:22,000
Almost always, these little tools are led to something like else,

107
00:08:22,000 --> 00:08:26,000
like Patchery or Portsy or one of your separate systems.

108
00:08:26,000 --> 00:08:32,000
This can, of course, also include greater or equal to or other version parameters.

109
00:08:32,000 --> 00:08:37,000
And the other thing that we have in the build system section is the build backend.

110
00:08:37,000 --> 00:08:41,000
Now, assuming you've already installed everything in your dependencies,

111
00:08:41,000 --> 00:08:46,000
this is a path to a module that is a build system.

112
00:08:46,000 --> 00:08:48,000
Why does it need a specific contract?

113
00:08:48,000 --> 00:08:50,000
Why does it need for a module to be a build system?

114
00:08:50,000 --> 00:08:52,000
And this will be the path to it.

115
00:08:52,000 --> 00:08:57,000
So the next thing you want to put is using the author.

116
00:08:57,000 --> 00:08:59,000
That's under the project.

117
00:08:59,000 --> 00:09:03,000
So you see that this is the section inside project that is authored.

118
00:09:03,000 --> 00:09:06,000
And you have name and email.

119
00:09:06,000 --> 00:09:12,000
If you're interested in doing this with set up tools, you'll notice that it's slightly nicer syntax.

120
00:09:13,000 --> 00:09:20,000
The description is what in set up tools you would call the source description.

121
00:09:20,000 --> 00:09:22,000
This is one line.

122
00:09:22,000 --> 00:09:25,000
It just says it's a specific project.

123
00:09:25,000 --> 00:09:31,000
And after we took the description and authored out of the project,

124
00:09:31,000 --> 00:09:36,000
usually we have name, version, and you're using what's written.

125
00:09:37,000 --> 00:09:43,000
There are several ways to configure your long description in a PyQuad or Thermal.

126
00:09:43,000 --> 00:09:46,000
This is usually the best one.

127
00:09:46,000 --> 00:09:49,000
Going to your readme file, put the long description.

128
00:09:49,000 --> 00:09:53,000
Your readme file, anyway you usually should have the same content.

129
00:09:53,000 --> 00:09:58,000
It will figure out from the extension whether you want markdown or rest.

130
00:09:58,000 --> 00:10:02,000
And you should not use anything other than markdown or rest.

131
00:10:02,000 --> 00:10:04,000
So very simple.

132
00:10:04,000 --> 00:10:12,000
Clearly you want version because everything should have version and name because your wheel should have a name.

133
00:10:14,000 --> 00:10:19,000
So the requirements for the build system is just that it should be prompted.

134
00:10:19,000 --> 00:10:23,000
Again, using the 2D set up tool, you might want to have set up tools plugged in.

135
00:10:23,000 --> 00:10:27,000
And if you're using an accounting build system, you use that instead.

136
00:10:28,000 --> 00:10:31,000
And the back end is a module.

137
00:10:31,000 --> 00:10:36,000
And the specific contract, as I said, what needs to be a build back end is to have the right methods.

138
00:10:36,000 --> 00:10:39,000
What do we mean by having the right methods?

139
00:10:39,000 --> 00:10:42,000
Well, so we're getting to that later.

140
00:10:42,000 --> 00:10:48,000
So in the project section, you have to have a name and a version.

141
00:10:48,000 --> 00:10:54,000
It will literally not allow you to put in something you've authored.

142
00:10:54,000 --> 00:11:01,000
You can give the project section entirely, but you can't have a project section without name and version.

143
00:11:01,000 --> 00:11:04,000
More on that later.

144
00:11:04,000 --> 00:11:10,000
But I highly recommend that you probably want to have show description, usually inline.

145
00:11:10,000 --> 00:11:14,000
Long description, you want to get from a file you use as a readme field.

146
00:11:14,000 --> 00:11:17,000
And a license.

147
00:11:17,000 --> 00:11:21,000
Whether you put the license in a file or inline is your choice.

148
00:11:21,000 --> 00:11:27,000
In kind of recent times, I've decided I want to put it inline, because when that makes the file project

149
00:11:27,000 --> 00:11:32,000
so much easier to be hardware, it means that when people look at my top level files,

150
00:11:32,000 --> 00:11:37,000
there's no license file there, which is kind of useless and annoying, and it just sort of takes up

151
00:11:37,000 --> 00:11:42,000
very limited real estate in your top level stuff.

152
00:11:42,000 --> 00:11:44,000
You want to put the URL.

153
00:11:44,000 --> 00:11:50,000
Specifically the URL that you would name home page, specifically like that, with uppercase H.

154
00:11:50,000 --> 00:11:57,000
That would be the link that if you upload that realtor file API, it will interpret it as home page.

155
00:11:57,000 --> 00:12:03,000
Any other links you have, API will still put, but if you put like whatever string you put,

156
00:12:03,000 --> 00:12:08,000
home page can be special, so you can put in your special home page section of the link.

157
00:12:08,000 --> 00:12:18,000
See, you want to have that, but you can have arbitrary links to issues, documentation, pull requests, whatever.

158
00:12:18,000 --> 00:12:27,000
The tool section is just saying that anything that has tool.something is the name of a configuration section

159
00:12:27,000 --> 00:12:29,000
that projects tools.

160
00:12:29,000 --> 00:12:34,000
Usually for tools that are reasonably popular in the Python ecosystem.

161
00:12:34,000 --> 00:12:37,000
So in this example, we're configuring black.

162
00:12:37,000 --> 00:12:40,000
We don't need to write a custom file to configure in black.

163
00:12:40,000 --> 00:12:44,000
We want to include all files that have .py yi.

164
00:12:44,000 --> 00:12:48,000
It's really shouldn't have a dollar in spite of it, but I'm not trying to basically configure black.

165
00:12:48,000 --> 00:12:50,000
I'm trying to figure out how you would configure black.

166
00:12:50,000 --> 00:12:54,000
So this is not a good black configuration, but it is a black configuration.

167
00:12:54,000 --> 00:12:56,000
So it's great.

168
00:12:56,000 --> 00:13:06,000
I also have to include some time from site declaration files, so black and one and one, two.

169
00:13:06,000 --> 00:13:10,000
I can configure coverage.

170
00:13:10,000 --> 00:13:20,000
So basically, this is a famous way to configure coverage with set up.cfg, except with also the pull doc prefix.

171
00:13:20,000 --> 00:13:30,000
So for example, if you want to configure your coverage to actually do branch coverage, which is not interesting for our situation,

172
00:13:30,000 --> 00:13:35,000
but if you want that, then you have that, and coverage you automatically read it.

173
00:13:35,000 --> 00:13:41,000
So most modern Python tooling, not all of them, are starting to read from PyPojectToma,

174
00:13:41,000 --> 00:13:44,000
which is nice, again, reducing the files you have.

175
00:13:47,000 --> 00:13:55,000
Another example, if you want to configure source, you can configure source to offer you to collect paths under case.

176
00:13:55,000 --> 00:13:58,000
So that's nice and useful.

177
00:13:58,000 --> 00:14:10,000
So project section, the things that we talked about so far, like an MA, version, and description,

178
00:14:10,000 --> 00:14:14,000
don't change what the wheel does, if you already installed it.

179
00:14:14,000 --> 00:14:19,000
We also have semantics that will change what the wheel actually does.

180
00:14:19,000 --> 00:14:25,000
Most popularly dependency, because that will get skipped to install view dependency.

181
00:14:25,000 --> 00:14:30,000
Again, this is equivalent to what you so require in set up.py.

182
00:14:30,000 --> 00:14:32,000
You have a list of dependencies.

183
00:14:32,000 --> 00:14:38,000
As usual, all the caveats about putting dependencies in set up.py apply.

184
00:14:38,000 --> 00:14:43,000
Why not to over-team them, because this will impact every user of the library, and so on.

185
00:14:43,000 --> 00:14:49,000
And again, set up.py also has a git.

186
00:14:49,000 --> 00:14:52,000
We have an option for optional dependencies.

187
00:14:52,000 --> 00:14:56,000
We have case dependencies or doc dependencies.

188
00:14:56,000 --> 00:15:03,000
That will be installed if people install the wheel with graphics, test, or docs, respectively.

189
00:15:03,000 --> 00:15:05,000
So it's useful, right?

190
00:15:05,000 --> 00:15:08,000
You know how to build a wheel from that.

191
00:15:08,000 --> 00:15:11,000
Call from scripts.

192
00:15:11,000 --> 00:15:17,000
Again, if that's what your wheel does, that means that when your wheel will be installed,

193
00:15:17,000 --> 00:15:22,000
a binary of also commands will be generated, and it will call my package.name.

194
00:15:22,000 --> 00:15:27,000
That's how you specify it under the code in the script.

195
00:15:27,000 --> 00:15:38,000
For the people who have used the set up tool for longer, you might remember that script used to be a subsection of the entry point.

196
00:15:38,000 --> 00:15:41,000
But we do an entry point for general things.

197
00:15:41,000 --> 00:15:46,000
So, let's say that you have used the page.appfactory.

198
00:15:46,000 --> 00:15:48,000
The entry point is how you do it.

199
00:15:48,000 --> 00:15:51,000
This is kind of an interesting, syntactical thing.

200
00:15:51,000 --> 00:16:00,000
As you notice, I put a string over there in page.appfactory, and that means that page.appfactory will be the name of the entry point.

201
00:16:00,000 --> 00:16:05,000
This is important because the name of the class of the entry point is something that is part of the code practice we use.

202
00:16:05,000 --> 00:16:13,000
So, you need to have a specific name of the entry point, and if it includes docs or anything else that someone would interpret, you need to protect it.

203
00:16:13,000 --> 00:16:23,000
So, let's go back to how you use set up tools specifically as a build system.

204
00:16:23,000 --> 00:16:30,000
Obviously, every single build system is different, but a default system that you probably have been using until now is set up tools.

205
00:16:30,000 --> 00:16:37,000
So, if you're migrating to set up your eyes, this is how you do apple to apple.

206
00:16:37,000 --> 00:16:41,000
So, the required is the usual dependency rules.

207
00:16:41,000 --> 00:16:47,000
You can include minimal, and no key quality version and specific version have a bug.

208
00:16:47,000 --> 00:16:52,000
And the build system, specific context in 5.17.

209
00:16:52,000 --> 00:16:59,000
And I said methods earlier, and it's kind of like, I think completely right because of other optional methods.

210
00:16:59,000 --> 00:17:01,000
But they're not interesting.

211
00:17:01,000 --> 00:17:04,000
But you can assume it's a kind of lie.

212
00:17:04,000 --> 00:17:08,000
And the only really interesting method is build wheel.

213
00:17:08,000 --> 00:17:10,000
So, didn't want to go too far in.

214
00:17:10,000 --> 00:17:15,000
Set up tools back end, this has a function called build wheel.

215
00:17:15,000 --> 00:17:19,000
This build wheel will get from the builder, the builder front end, right?

216
00:17:19,000 --> 00:17:21,000
Because it's a builder back end, as you can imagine.

217
00:17:21,000 --> 00:17:23,000
Therefore, there has to be a builder front end.

218
00:17:23,000 --> 00:17:25,000
We'll talk a little bit about the front end in a second.

219
00:17:25,000 --> 00:17:31,000
It will get from the builder front end the build directory, and it can change settings that you got,

220
00:17:31,000 --> 00:17:37,000
and which directory to put the metadata in, and it will do the same.

221
00:17:37,000 --> 00:17:41,000
So, let's talk about packaging in Python.

222
00:17:41,000 --> 00:17:45,000
This is an example of some Python that has been packaged.

223
00:17:45,000 --> 00:17:53,000
Almost always, you use Python-bytes and builds.

224
00:17:53,000 --> 00:17:59,000
If you've written your Python project formal carefully enough,

225
00:17:59,000 --> 00:18:04,000
but without any specific settings, like the names, the versions, the dependencies,

226
00:18:04,000 --> 00:18:07,000
then it will get worked.

227
00:18:07,000 --> 00:18:12,000
You want Python-bytes and builds, you wait a few seconds because it does stuff,

228
00:18:12,000 --> 00:18:18,000
but this will get front end, and when it's done doing stuff, you will have a wheel.

229
00:18:18,000 --> 00:18:21,000
Here's a great.

230
00:18:21,000 --> 00:18:24,000
What happens when it doesn't work?

231
00:18:24,000 --> 00:18:26,000
Most of it doesn't work.

232
00:18:26,000 --> 00:18:31,000
It means that it will work better if you use what you call the FSC structure.

233
00:18:31,000 --> 00:18:37,000
You can see that the new partners and arguably the best practices,

234
00:18:37,000 --> 00:18:42,000
which is to put all your Python code on the sub-directory of your top level under FSC.

235
00:18:42,000 --> 00:18:47,000
That makes it much clearer which parts need to be packaged as Python code.

236
00:18:47,000 --> 00:18:52,000
Like, you know, the solution is from the test, the solution is from the docs,

237
00:18:52,000 --> 00:18:55,000
if you have other directories, that's fine.

238
00:18:55,000 --> 00:19:02,000
So, if it doesn't just work, probably consider not already configuring your Python project formal,

239
00:19:02,000 --> 00:19:04,000
but just using the FSC structure.

240
00:19:04,000 --> 00:19:10,000
Sometimes, either this doesn't help or you can't do that.

241
00:19:10,000 --> 00:19:19,000
So, the option you have is data in application with an exclamation mark.

242
00:19:19,000 --> 00:19:24,000
So, I hope that it's clear, that it's clear what I'm recommending right now.

243
00:19:24,000 --> 00:19:27,000
If the FSC structure doesn't work in Python management,

244
00:19:27,000 --> 00:19:30,000
then it doesn't work in a better solution.

245
00:19:30,000 --> 00:19:33,000
It's not formally supported, it's been reasonably stable,

246
00:19:33,000 --> 00:19:35,000
and I've been doing this in my old stuff,

247
00:19:35,000 --> 00:19:39,000
I feel reasonably comfortable recommending music.

248
00:19:39,000 --> 00:19:46,000
Basically, this is how we configure every other thing in our build environment.

249
00:19:46,000 --> 00:19:51,000
We have tools.something.configuration.

250
00:19:51,000 --> 00:19:54,000
Setup tools will be configured via tools.setup.

251
00:19:54,000 --> 00:19:56,000
So, you put the...

252
00:19:56,000 --> 00:20:03,000
And you can do it in the documentation for setup tools to see what something needs to be for you to configure it.

253
00:20:03,000 --> 00:20:08,000
But this gives you the ability to specify data files and stuff like that,

254
00:20:08,000 --> 00:20:10,000
in a way that's possible to consume.

255
00:20:10,000 --> 00:20:13,000
Those are set up tools for specific fields.

256
00:20:13,000 --> 00:20:19,000
Everything I've said so far was built in some of the most advanced tools.

257
00:20:19,000 --> 00:20:21,000
And people install.

258
00:20:21,000 --> 00:20:27,000
This has been changed as a version of when I was a prox.

259
00:20:28,000 --> 00:20:33,000
Back then, I could have pretty much done my own E work,

260
00:20:33,000 --> 00:20:35,000
which your package is only using PyProject.

261
00:20:35,000 --> 00:20:38,000
You use an empty setup.cfg.

262
00:20:38,000 --> 00:20:41,000
That was 3,000 years ago.

263
00:20:41,000 --> 00:20:43,000
So, we don't need it anymore.

264
00:20:43,000 --> 00:20:46,000
Now, you can support an editable install,

265
00:20:46,000 --> 00:20:48,000
which is like you're riding your hand.

266
00:20:48,000 --> 00:20:50,000
It will change if you change the code.

267
00:20:50,000 --> 00:20:55,000
So, without setup.cfg, it gets work, again, most of the time.

268
00:20:57,000 --> 00:21:00,000
I lied earlier.

269
00:21:00,000 --> 00:21:03,000
I said you have to have versions.

270
00:21:03,000 --> 00:21:07,000
It's only a small lie because if you just don't have versions,

271
00:21:07,000 --> 00:21:08,000
it will fail.

272
00:21:08,000 --> 00:21:10,000
It will kind of get at you very loudly.

273
00:21:10,000 --> 00:21:17,000
However, if you want another, say, a setup tool for games,

274
00:21:17,000 --> 00:21:20,000
or maybe a different build system,

275
00:21:20,000 --> 00:21:22,000
to set up your version,

276
00:21:22,000 --> 00:21:25,000
what you have is you specify, because,

277
00:21:25,000 --> 00:21:28,000
essentially, the version is dynamic.

278
00:21:28,000 --> 00:21:30,000
That means I'm not going to specify a version,

279
00:21:30,000 --> 00:21:31,000
and that's okay.

280
00:21:31,000 --> 00:21:33,000
I know I have not specified a version.

281
00:21:33,000 --> 00:21:35,000
Some other tools will fit it in.

282
00:21:35,000 --> 00:21:37,000
If the different tool does not come into your page,

283
00:21:37,000 --> 00:21:40,000
it will be 0.0.0.

284
00:21:40,000 --> 00:21:43,000
But, again, you can make sure that some tools,

285
00:21:43,000 --> 00:21:46,000
again, setup tools, SEM is the most popular setup tool,

286
00:21:46,000 --> 00:21:51,000
particularly on games I hope are pretty nice.

287
00:21:51,000 --> 00:21:56,000
So, that's how you use setup tool SEM.

288
00:21:56,000 --> 00:21:58,000
You add it to the requirements,

289
00:21:58,000 --> 00:22:01,000
you change version dynamics,

290
00:22:01,000 --> 00:22:05,000
and if you need setup tool SEM to figure it out,

291
00:22:05,000 --> 00:22:07,000
how to target, and if you target,

292
00:22:07,000 --> 00:22:10,000
you might want to add some, again,

293
00:22:10,000 --> 00:22:14,000
you can configure setup tool SEM specifically in your,

294
00:22:14,000 --> 00:22:15,000
you know, file project,

295
00:22:15,000 --> 00:22:20,000
so that's setup tool SEM documentation.

296
00:22:20,000 --> 00:22:25,000
So, let's kind of recap what I've been talking about.

297
00:22:25,000 --> 00:22:28,000
File project normal.

298
00:22:28,000 --> 00:22:32,000
Main use and best use is for packaging.

299
00:22:32,000 --> 00:22:34,000
And you should use that,

300
00:22:34,000 --> 00:22:37,000
and just stop using setup tool.ui

301
00:22:37,000 --> 00:22:42,000
and setup tool.ui and setup tool.csd.

302
00:22:42,000 --> 00:22:47,000
There is no benefit to using them.

303
00:22:47,000 --> 00:22:49,000
Again, more after this, technically,

304
00:22:49,000 --> 00:22:53,000
the setup, if you actually use a lot of setup configuration,

305
00:22:53,000 --> 00:22:55,000
setup tool.csd is not better.

306
00:22:55,000 --> 00:22:59,000
And using it in the setup, in your file project,

307
00:22:59,000 --> 00:23:01,000
so make it beta.

308
00:23:01,000 --> 00:23:05,000
I feel this is a reasonable tradeoff to make.

309
00:23:05,000 --> 00:23:09,000
Anyway, usually you don't want too much configuration,

310
00:23:09,000 --> 00:23:10,000
so that's fine.

311
00:23:10,000 --> 00:23:12,000
Again, in many, many projects,

312
00:23:12,000 --> 00:23:14,000
I've not been looking for a lot of configuration,

313
00:23:14,000 --> 00:23:18,000
especially if you use this source structure.

314
00:23:18,000 --> 00:23:21,000
But open your book for everything else.

315
00:23:21,000 --> 00:23:24,000
Right, again, everything in the book is big,

316
00:23:24,000 --> 00:23:27,000
because there are still tools that are not suitable

317
00:23:27,000 --> 00:23:28,000
for your file project.

318
00:23:28,000 --> 00:23:32,000
But you see that almost all tools are like this.

319
00:23:32,000 --> 00:23:33,000
If you haven't done it already,

320
00:23:33,000 --> 00:23:36,000
you have a plan to kind of support it.

321
00:23:36,000 --> 00:23:38,000
So, this is great.

322
00:23:38,000 --> 00:23:42,000
And if you write your own tool, right,

323
00:23:42,000 --> 00:23:46,000
let's say you want your own version plugin

324
00:23:46,000 --> 00:23:47,000
that does something,

325
00:23:47,000 --> 00:23:49,000
and you need to configure it a bit,

326
00:23:49,000 --> 00:23:52,000
don't bother adding a new file for your thing, right?

327
00:23:52,000 --> 00:23:55,000
Anyway, I really, if you write your own thing,

328
00:23:55,000 --> 00:23:57,000
then it doesn't need too much configuration,

329
00:23:57,000 --> 00:24:00,000
as you put some sources on the default.

330
00:24:00,000 --> 00:24:03,000
So maybe it is a line of two configuration.

331
00:24:03,000 --> 00:24:05,000
You don't want to make people write a new file

332
00:24:05,000 --> 00:24:07,000
for a new line of two.

333
00:24:07,000 --> 00:24:10,000
So just support another tool,

334
00:24:10,000 --> 00:24:11,000
a new tool, a new tool,

335
00:24:11,000 --> 00:24:13,000
a new tool, a new tool,

336
00:24:13,000 --> 00:24:14,000
by project owner.

337
00:24:14,000 --> 00:24:16,000
You don't need to keep people,

338
00:24:16,000 --> 00:24:20,000
like, a new file, like, where it should be placed.

339
00:24:20,000 --> 00:24:23,000
And you see that, right, just put it there,

340
00:24:23,000 --> 00:24:27,000
and everybody has reasonable expectations.

341
00:24:27,000 --> 00:24:31,000
So, project field, right, like, name,

342
00:24:31,000 --> 00:24:33,000
has to be their version,

343
00:24:33,000 --> 00:24:36,000
has to be their asset.

344
00:24:36,000 --> 00:24:39,000
The system, license, read me.

345
00:24:39,000 --> 00:24:41,000
So, if you don't have them,

346
00:24:41,000 --> 00:24:43,000
your package will basically look bad

347
00:24:43,000 --> 00:24:45,000
if you don't have them.

348
00:24:45,000 --> 00:24:48,000
You know, like, it makes sense, right?

349
00:24:48,000 --> 00:24:50,000
When you upload it to PyPI,

350
00:24:50,000 --> 00:24:52,000
it will just look weird,

351
00:24:52,000 --> 00:24:56,000
right, that the page in PyPI will look weird.

352
00:24:56,000 --> 00:24:58,000
Depends even on some depends,

353
00:24:58,000 --> 00:25:00,000
again, if you have them,

354
00:25:00,000 --> 00:25:01,000
which most packages do,

355
00:25:01,000 --> 00:25:03,000
that's where you put it in.

356
00:25:03,000 --> 00:25:06,000
Scripts, again, you still need them,

357
00:25:06,000 --> 00:25:08,000
depending on what you're well done.

358
00:25:08,000 --> 00:25:10,000
So, that's the point.

359
00:25:10,000 --> 00:25:12,000
For set up tools,

360
00:25:12,000 --> 00:25:16,000
default will carry you 90% of the way.

361
00:25:16,000 --> 00:25:18,000
The other kind of 5% of the way

362
00:25:18,000 --> 00:25:20,000
is using the proceed structure,

363
00:25:20,000 --> 00:25:22,000
and that's basically what people

364
00:25:22,000 --> 00:25:25,000
would call convention over configuration,

365
00:25:25,000 --> 00:25:30,000
and where you must configure as lightly as you can.

366
00:25:30,000 --> 00:25:33,000
And this boosts you against using Python management build,

367
00:25:33,000 --> 00:25:35,000
and what I mean by that is that

368
00:25:35,000 --> 00:25:38,000
if you set your CI tools or whatever,

369
00:25:38,000 --> 00:25:41,000
like, you know, kind of slowly using two Python management builds,

370
00:25:41,000 --> 00:25:43,000
you don't have to worry, right?

371
00:25:43,000 --> 00:25:45,000
If later you want to move to, like,

372
00:25:45,000 --> 00:25:48,000
Hatchery or Corpore tree or any of those systems

373
00:25:48,000 --> 00:25:49,000
to build your stuff,

374
00:25:49,000 --> 00:25:51,000
nobody else has to know about it, right?

375
00:25:51,000 --> 00:25:54,000
You'll just change your PyProject.com mode,

376
00:25:54,000 --> 00:25:57,000
and Python management build will still work.

377
00:25:57,000 --> 00:25:59,000
Python management build can take any of this, right?

378
00:25:59,000 --> 00:26:02,000
So, this is important to know.

379
00:26:05,000 --> 00:26:08,000
So, a few last week announcements.

380
00:26:08,000 --> 00:26:10,000
I have an open space that you're supposed to be

381
00:26:10,000 --> 00:26:13,000
right after this talk.

382
00:26:13,000 --> 00:26:16,000
It's called author PyProject.com mode.

383
00:26:16,000 --> 00:26:21,000
Right now, in after the talk, in 2.58.

384
00:26:21,000 --> 00:26:25,000
I will be giving away some books, if you come.

385
00:26:25,000 --> 00:26:27,000
And that's pretty much it.

386
00:26:27,000 --> 00:26:30,000
So, I do have almost five minutes

387
00:26:30,000 --> 00:26:33,000
for a bit of Q&A, and I'm very happy.

388
00:26:33,000 --> 00:26:35,000
Please remember to cheat your questions

389
00:26:35,000 --> 00:26:37,000
in the formal questions,

390
00:26:37,000 --> 00:26:40,000
ideally with the question mark again.

391
00:26:46,000 --> 00:26:48,000
Thank you, Moshe.

392
00:26:48,000 --> 00:26:50,000
If you have a question, please come to my microphone

393
00:26:50,000 --> 00:26:52,000
so everyone can hear.

394
00:26:52,000 --> 00:26:55,000
All right, so my question to you is,

395
00:26:55,000 --> 00:26:59,000
are there limitations that you've identified

396
00:26:59,000 --> 00:27:02,000
in the current use, the current community use

397
00:27:02,000 --> 00:27:05,000
of Python for Python and along with the other ones?

398
00:27:05,000 --> 00:27:07,000
What are you looking forward to

399
00:27:07,000 --> 00:27:10,000
in the development of this space?

400
00:27:10,000 --> 00:27:13,000
I guess one of the biggest things I would say

401
00:27:13,000 --> 00:27:16,000
is that you're going to be able to

402
00:27:16,000 --> 00:27:18,000
build your own Python management build,

403
00:27:18,000 --> 00:27:20,000
in the current use of this space.

404
00:27:20,000 --> 00:27:23,000
I guess the biggest thing that I would say

405
00:27:23,000 --> 00:27:26,000
is missing from PyProject.com right now

406
00:27:26,000 --> 00:27:30,000
is that the set of tools support is still in beta,

407
00:27:30,000 --> 00:27:33,000
which makes it slightly harder for me to just

408
00:27:33,000 --> 00:27:36,000
endorse whole hardware, just throw away all your old stuff

409
00:27:36,000 --> 00:27:38,000
and make it new in PyProject.

410
00:27:38,000 --> 00:27:40,000
I think it will stabilize pretty soon,

411
00:27:40,000 --> 00:27:43,000
but this is what I'm going to track you into today

412
00:27:43,000 --> 00:27:45,000
and how it's going.

413
00:27:46,000 --> 00:27:49,000
So you can implement tool configurations,

414
00:27:49,000 --> 00:27:51,000
so it's LAP and LAP and other tools inside of it

415
00:27:51,000 --> 00:27:54,000
in PyProject.com, but you're also able to have

416
00:27:54,000 --> 00:27:56,000
your own Python files for configuration.

417
00:27:56,000 --> 00:27:58,000
I'm curious if you consider it best practice

418
00:27:58,000 --> 00:28:00,000
to put everything inside of your class project

419
00:28:00,000 --> 00:28:03,000
or break out into individual configuration files.

420
00:28:03,000 --> 00:28:05,000
Yeah, that's a good question.

421
00:28:05,000 --> 00:28:08,000
So here is kind of like my intake,

422
00:28:08,000 --> 00:28:11,000
which is kind of a bit bigger than whether it should be

423
00:28:11,000 --> 00:28:14,000
a separate Tomo file or not.

424
00:28:14,000 --> 00:28:18,000
In general, when you build a tool like that,

425
00:28:18,000 --> 00:28:23,000
if the tool doesn't work without any configuration,

426
00:28:23,000 --> 00:28:27,000
then you usually want to think a little bit about

427
00:28:27,000 --> 00:28:30,000
how does your tool work with your configuration, right?

428
00:28:30,000 --> 00:28:33,000
Like, again, single tools that you use in your own life,

429
00:28:33,000 --> 00:28:35,000
like Vegas, Python, right?

430
00:28:35,000 --> 00:28:38,000
Some of them work very well, some of them really badly.

431
00:28:38,000 --> 00:28:41,000
I would say if you're working on building a tool,

432
00:28:41,000 --> 00:28:44,000
you want to think carefully about making it work well

433
00:28:44,000 --> 00:28:46,000
with like zero configuration.

434
00:28:46,000 --> 00:28:48,000
The reason I kind of went on this weird tangent

435
00:28:48,000 --> 00:28:51,000
before answering the question is because this means

436
00:28:51,000 --> 00:28:54,000
that the typical use, you know, if people do it

437
00:28:54,000 --> 00:28:57,000
to configure it, it should be very light configuration.

438
00:28:57,000 --> 00:29:01,000
And because of that, I usually recommend support PyProject

439
00:29:01,000 --> 00:29:04,000
Tomo only because then otherwise,

440
00:29:04,000 --> 00:29:08,000
you'll get like one file with like one line in it.

441
00:29:08,000 --> 00:29:13,000
And again, you also should have some sort of

442
00:29:13,000 --> 00:29:16,000
limited view of your own importance, right?

443
00:29:16,000 --> 00:29:18,000
What if everybody does that?

444
00:29:18,000 --> 00:29:21,000
Then like, you know, if every tool will have its own file,

445
00:29:21,000 --> 00:29:23,000
then eventually we have tons of files

446
00:29:23,000 --> 00:29:26,000
that will develop the actually, it's going to get annoying.

447
00:29:26,000 --> 00:29:30,000
So with the combination of why to not ask for an auto configuration

448
00:29:30,000 --> 00:29:33,000
and try to assume that people will be using an auto tooling,

449
00:29:33,000 --> 00:29:38,000
I would recommend default to putting it in PyProject Tomo.

450
00:29:38,000 --> 00:29:41,000
Of course, you can always fall back to like, you know,

451
00:29:41,000 --> 00:29:43,000
oh, if there is a tool named after,

452
00:29:43,000 --> 00:29:46,000
if there is a file named after my tool, I'll do that.

453
00:29:46,000 --> 00:29:48,000
Again, if you feel you really need to do that,

454
00:29:48,000 --> 00:29:51,000
think about why people need to configure a tool that much.

455
00:29:51,000 --> 00:29:53,000
Hopefully that answers the question.

456
00:29:56,000 --> 00:29:57,000
All right.

457
00:29:57,000 --> 00:29:59,000
Let's continue the conversation in Q50A.

458
00:29:59,000 --> 00:30:00,000
Thank you, Mase.

459
00:30:00,000 --> 00:30:01,000
Thank you.

