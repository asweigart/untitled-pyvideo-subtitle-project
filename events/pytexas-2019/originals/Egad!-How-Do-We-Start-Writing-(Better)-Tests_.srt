1
00:00:00,000 --> 00:00:09,000
Thanks, y'all. Can everyone hear me okay? Awesome. Good morning, Texas. Let's talk about

2
00:00:09,000 --> 00:00:15,100
software testing, shall we? So, my name is Andy Knight. I am known as the Automation

3
00:00:15,100 --> 00:00:20,440
Panda. I love software, testing, automation, behavior-driven development, and Python. You

4
00:00:20,440 --> 00:00:25,900
can follow me on Twitter and my blog at Automation Panda. I'd like to thank my company for sending

5
00:00:25,940 --> 00:00:29,740
me here today. I work at Precision Lender. I've been there for just a year as of this

6
00:00:29,740 --> 00:00:34,740
week. Precision Lender does Applied Banking Insights, and a couple of us will be at PyCon

7
00:00:34,740 --> 00:00:41,380
this coming May. So, thank you, Precision Lender. Here's a question for everybody. Raise your

8
00:00:41,380 --> 00:00:47,900
hand if you have ever hit a software bug. Everybody, please put your hands up. Okay,

9
00:00:47,900 --> 00:00:53,700
thank you. Great. We all have experienced software bugs. Do we like software bugs? No.

10
00:00:53,700 --> 00:00:57,100
They're bad. That's why they're bugs. That's why we want to squish them. So, here's another

11
00:00:57,100 --> 00:01:09,100
question. Raise your hand if you always test your code. Wow. Wow. Yeah, that's about what

12
00:01:09,100 --> 00:01:12,500
I expect. I've given this talk a couple times, and that's usually what happens. Now, I'm

13
00:01:12,500 --> 00:01:17,400
not here to do shaming or anything. It's not bad. There's reasons. It's okay. But I want

14
00:01:17,400 --> 00:01:22,300
us to stop and pause for a moment and think, time out. Why is there this discrepancy? We

15
00:01:22,300 --> 00:01:26,700
know we have all these software bugs, but we're not always testing our code. Well, why

16
00:01:26,700 --> 00:01:35,300
is that? Furthermore, why don't we automate the tests so that the code gets tested automatically,

17
00:01:35,300 --> 00:01:41,700
so we can spend more time making the code to begin with? This is not an easy question

18
00:01:41,700 --> 00:01:45,900
to answer, because there are some tough points we have to face. First of all, especially

19
00:01:45,900 --> 00:01:51,900
with test automation, we know deep down this is something we should do. For small projects,

20
00:01:51,900 --> 00:01:57,700
that's not such a big deal, but for big projects, things at scale, things that have huge teams

21
00:01:57,700 --> 00:02:03,400
working on them, we have to move fast. We have to move continuously, and there's lots

22
00:02:03,400 --> 00:02:07,100
of moving parts. There's lots of danger areas that things could just break, and all those

23
00:02:07,100 --> 00:02:13,100
bugs just rush in like cockroaches. We know that we also don't have enough time in the

24
00:02:13,100 --> 00:02:18,260
day, or even in the universe, to test everything manually. We can't repeat the full testing

25
00:02:18,260 --> 00:02:21,860
of these giant systems over and over again ourselves. There's just not enough time for

26
00:02:21,860 --> 00:02:26,860
that. We need some solution to do things automatically, and that's where test automation is supposed

27
00:02:26,860 --> 00:02:32,460
to help us. Unfortunately, though, we also know that test automation is hard, and that's

28
00:02:32,460 --> 00:02:36,580
one of the barriers of entry of why I think so many people didn't quite raise their hand

29
00:02:36,580 --> 00:02:40,860
when I asked, do you always test your code? Test automation is not an easy thing. I do

30
00:02:40,860 --> 00:02:46,340
this day to day. I know firsthand it's not easy. I fight the problems in the test automation

31
00:02:46,340 --> 00:02:52,300
every day. It requires strong developer skills. It has its own technologies. It has its own

32
00:02:52,300 --> 00:02:56,580
software stack. Just because you're a good developer doesn't mean you're necessarily

33
00:02:56,580 --> 00:03:00,140
going to be a good test automation engineer, because there are certain aspects to that

34
00:03:00,140 --> 00:03:06,780
domain that are tricky, and I could spend all day talking about that. Ultimately, what

35
00:03:06,780 --> 00:03:11,820
I want you to recognize is that test automation is not just about writing test scripts. Test

36
00:03:12,300 --> 00:03:16,940
automation itself is software and deserves the same practices and tools and attention

37
00:03:16,940 --> 00:03:23,060
that we give the product code, so to speak. With that in mind, I've also, from talking

38
00:03:23,060 --> 00:03:26,780
with a lot of people in different companies and teams, I found that test automation can

39
00:03:26,780 --> 00:03:31,820
be intimidating for a lot of folks. Many teams really don't know how to start. They know

40
00:03:31,820 --> 00:03:37,860
they need it. They know they have bugs, but they don't know how to approach the test automation

41
00:03:37,860 --> 00:03:43,980
challenge, so to speak. I see two things happening. Either teams will keep punting

42
00:03:43,980 --> 00:03:49,620
the football down the core and just keep avoiding test automation altogether, and they'll either

43
00:03:49,620 --> 00:03:53,860
skip test coverage or they'll hire teams just to do manual testing, and that's not a really

44
00:03:53,860 --> 00:03:58,340
good situation because that's unscalable, or a lot of times what happens is they'll

45
00:03:58,340 --> 00:04:02,900
try, but because they don't train themselves appropriately, they don't get the information

46
00:04:02,900 --> 00:04:09,300
they need, they don't take the careful steps to begin with, next thing you know, a year

47
00:04:09,300 --> 00:04:12,540
later they've got thousands of tests that are failing every night and they're not getting

48
00:04:12,540 --> 00:04:16,980
value out of them, and they just want to nuke the whole thing and say, we wasted time, let's

49
00:04:16,980 --> 00:04:21,180
start over. That's not good. Both of those situations, not having anything or having

50
00:04:21,180 --> 00:04:27,460
stuff that is detracting from your value, very bad. We hit this moment where we are,

51
00:04:27,460 --> 00:04:33,700
what do we do with this? Because we know we need this, but we're not doing it well.

52
00:04:33,700 --> 00:04:39,980
And that's what I'm here to talk about today. And in fact, I've got a little story to go

53
00:04:39,980 --> 00:04:44,660
along with how we can approach the test automation challenge, and I want you to meet a friend

54
00:04:44,660 --> 00:04:51,660
of mine. Let's meet someone who can help. I'd like you to meet my friend, Amanda the Panda.

55
00:04:52,420 --> 00:04:59,420
Amanda is a software engineer who loves using Python. Amanda works at a company called Bamboozle.

56
00:05:00,660 --> 00:05:07,940
Yep. Bamboozle is a small but growing tech company. Bamboozle provides an online platform

57
00:05:07,940 --> 00:05:12,980
for Panda Commerce. As a full stack developer, Amanda has a good understanding of Bamboozle's

58
00:05:12,980 --> 00:05:19,380
web front end, REST API service layer, and infrastructure needs. Recently, Bamboozle

59
00:05:19,380 --> 00:05:25,900
had a couple severe bugs escape to production. Oops. EGAD. Management decided it was finally

60
00:05:25,900 --> 00:05:32,900
time to start automating tests, and Amanda volunteered to lead the effort. Since this

61
00:05:33,100 --> 00:05:38,060
is the first time she's done test automation, Amanda does her homework. She starts learning

62
00:05:38,060 --> 00:05:43,680
about different testing types, tools, and frameworks. However, her web research feels

63
00:05:43,680 --> 00:05:48,620
more like a game of buzzword bingo, because there are so many buzzwords when it comes

64
00:05:48,620 --> 00:05:53,260
to testing and automation. And everyone seems to give different definitions to the same

65
00:05:53,260 --> 00:05:57,900
words. Anyone have that problem before? True story. So, like, what are the differences

66
00:05:57,900 --> 00:06:02,620
between unit integration and to end testing? What are all the packages I need? What's this

67
00:06:02,620 --> 00:06:07,540
Cucumber thing? The Selenium WebDriver thing? Do they work together? They separate? EGAD.

68
00:06:07,540 --> 00:06:14,540
We don't know. We need help. So, Amanda calls her friend Andy. That's me. Software engineer

69
00:06:15,140 --> 00:06:22,140
and test. There's so much info out there, Amanda says, that I can't discern what is

70
00:06:22,140 --> 00:06:28,340
the right approach to take. We want to do things right. How do we do it right? Let me

71
00:06:28,340 --> 00:06:35,340
ask you a question, Andy says. What is your main goal with testing? What is your main

72
00:06:36,300 --> 00:06:42,780
goal? Well, Amanda replies, I guess I want to make sure that the critical parts of the

73
00:06:42,820 --> 00:06:48,700
tools app are working correctly. Any time someone introduces a bug, test should catch

74
00:06:48,700 --> 00:06:55,700
it immediately. Great. It sounds like you need a functional test automation solution.

75
00:06:56,380 --> 00:07:02,660
Functional tests make sure the features work correctly. As you said, functional tests serve

76
00:07:02,660 --> 00:07:09,660
two main purposes. Validating goodness and identifying badness. I'd like to share with

77
00:07:10,580 --> 00:07:17,060
you the test automation pyramid. Has anybody seen this before? Some people? Okay, cool.

78
00:07:17,060 --> 00:07:22,820
Let's talk about this. The pyramid is a rough guideline for how an automation solution should

79
00:07:22,820 --> 00:07:29,820
be structured. All layers are functional tests, from unit to integration to end to end. At

80
00:07:29,980 --> 00:07:35,180
the bottom we have unit tests, which cover individual units of code, like functions,

81
00:07:35,180 --> 00:07:40,100
methods and classes. Unit tests are white box in that they interact with the product

82
00:07:40,100 --> 00:07:45,820
code directly. They're making calls to your functions and classes. Above that are what

83
00:07:45,820 --> 00:07:52,820
we call feature tests, which cover black box behaviors of real live instances of the product

84
00:07:52,940 --> 00:07:58,300
under test. So you don't directly access the code, you access whatever the deployed version

85
00:07:58,300 --> 00:08:04,740
of that product is. Integration tests cover components where things meet, usually like

86
00:08:04,780 --> 00:08:11,780
a one-two hop, maybe a service API. And to end tests cover paths through the entire system,

87
00:08:12,380 --> 00:08:19,380
typically like a user would exercise through the web UI. Each layer of the pyramid mitigates

88
00:08:20,620 --> 00:08:25,980
risk at its optimal return on investment. That's why we have the layers. We want a strong

89
00:08:25,980 --> 00:08:31,020
foundation of unit tests because they are small, quick, easy to maintain, and will catch

90
00:08:31,220 --> 00:08:37,460
things very quickly. Integration and especially end-to-end tests are far more costly to build

91
00:08:37,460 --> 00:08:42,140
and maintain, and they also take more time to run. I want you all to consider the rule

92
00:08:42,140 --> 00:08:48,260
of ones. A unit test would take about one millisecond to run, an integration test usually

93
00:08:48,260 --> 00:08:52,940
would take about one second to run, and an end-to-end test order of magnitude would take

94
00:08:52,940 --> 00:08:59,940
about one minute to run. So there is this issue of scale as we go up the pyramid. Hold

95
00:09:00,260 --> 00:09:05,940
on, Andy, Amanda interjects. Why do we even need feature tests? They sound like such a

96
00:09:05,940 --> 00:09:10,980
burden when compared to unit tests. I also read that web tests can really be flaky with

97
00:09:10,980 --> 00:09:17,980
Selenium WebDriver. Andy replies, well, hold on now. Unit tests don't catch all problems.

98
00:09:19,940 --> 00:09:26,140
Here's an example. Back in 1999, NASA lost the Mars climate orbiter when it disintegrated

99
00:09:26,140 --> 00:09:33,140
into the Martian atmosphere. Oops. Why? Ground-based software did not convert U.S. measurements

100
00:09:33,460 --> 00:09:40,060
into the metric system. This is a real story. The calculation modules worked individually,

101
00:09:40,060 --> 00:09:46,580
but they did not integrate properly. Had NASA checked software with proper integration tests,

102
00:09:46,580 --> 00:09:53,580
they would not have lost $655 million. Wow, Amanda, excellent.

103
00:09:56,140 --> 00:10:00,740
Amanda explains, I wouldn't want that to happen to my company. It sounds like I need

104
00:10:00,740 --> 00:10:07,740
to take a pyramid approach. So what skills do I need to get started? Andy smiles. Good

105
00:10:08,140 --> 00:10:15,140
news. You already have the skills. Test automation is software, and the same development principles

106
00:10:15,500 --> 00:10:22,500
apply. Just pick a core framework and get rolling. You may also want to take some online

107
00:10:23,060 --> 00:10:27,660
courses about frameworks and test packages that you'll need. Check out Test Automation

108
00:10:27,660 --> 00:10:34,660
University, which offers a bunch of courses from testing experts for free.

109
00:10:35,660 --> 00:10:41,860
So there's another question Amanda asks. What test framework should we use? Bamboozle does

110
00:10:41,860 --> 00:10:48,860
a lot of Python on the backend, so I looked at frameworks like UnitTest, PyTest, and Behave.

111
00:10:49,420 --> 00:10:54,820
Python is one of the best languages for test automation, Andy replies, and you can't go

112
00:10:54,820 --> 00:11:01,580
wrong with PyTest. PyTest can handle tests at all layers of the pyramid. Markers can

113
00:11:01,580 --> 00:11:06,700
categorize tests, test functions and fixtures are lightweight, and plugins can be added

114
00:11:06,700 --> 00:11:13,700
for reports, code coverage, and even parallel execution. Among all Python test frameworks,

115
00:11:14,020 --> 00:11:20,340
PyTest is also arguably the most Pythonic, but that could be up to the beat.

116
00:11:20,340 --> 00:11:26,580
Now a test automation solution is more than its core framework, though, so be cautioned.

117
00:11:26,580 --> 00:11:31,180
Successful automation projects bring together readily available packages rather than developing

118
00:11:31,180 --> 00:11:35,460
everything from scratch. For example, you may want to use Python's standard logging

119
00:11:35,460 --> 00:11:42,460
library for logging messages. Requests would be great for testing REST APIs. Selenium Web

120
00:11:42,660 --> 00:11:48,860
Driver and Splinter would be great for automating web UI interactions. And there are also tons

121
00:11:48,860 --> 00:11:55,260
of PyTest plugins for different frameworks, like Flask or Django. So be sure to look before

122
00:11:55,260 --> 00:12:00,260
you leap to see what packages will be useful for you.

123
00:12:00,260 --> 00:12:05,660
I can also recommend a few books to get you started. Python Testing with PyTest by Brian

124
00:12:05,660 --> 00:12:12,660
Hocken is an excellent resource on the PyTest framework. Also by Bruno Oliveira is PyTest

125
00:12:12,820 --> 00:12:18,220
Quick Start Guide, which is another take on how to get started with PyTest. And for general

126
00:12:18,220 --> 00:12:23,060
automation concerns in Python, Hands-On Enterprise Automation with Python by Bassam Alley is

127
00:12:23,060 --> 00:12:30,060
another great resource. So check these books out if you want to learn more.

128
00:12:30,220 --> 00:12:34,860
Create a device, Andy, Amanda says. This will help me get started. So Amanda goes back to

129
00:12:34,860 --> 00:12:39,840
Bamboozle and starts writing tests in Python using PyTest. She found it was fairly easy

130
00:12:39,840 --> 00:12:46,840
to get started, even though she's new with test automation. Taking a pyramid approach,

131
00:12:47,420 --> 00:12:52,660
she starts by beefing up the existing unit tests. And then she moves on to using Requests

132
00:12:52,660 --> 00:12:58,900
for REST API testing and Selenium Web Driver for web UI testing. She puts code in the same

133
00:12:58,900 --> 00:13:05,900
repository as the product code so that they can be version controlled together. However,

134
00:13:06,780 --> 00:13:11,380
after writing a number of tests, Amanda discovers some frustrations. She meets up with Andy

135
00:13:11,380 --> 00:13:17,780
for Bubble Tea to pick his mind. Andy, she says, how do I avoid duplicating so much test

136
00:13:17,780 --> 00:13:24,780
code? So many of these test steps are the same. It's very repetitive. I just need to

137
00:13:25,540 --> 00:13:32,540
make minor tweaks here and there. Code duplication is code cancer, Andy replies. Have you heard

138
00:13:33,780 --> 00:13:39,900
about property testing with Hypothesis? It could help you with your unit testing. Hypothesis

139
00:13:39,900 --> 00:13:43,940
automatically runs tests against a wide range of scenarios so you don't need to hard code

140
00:13:43,940 --> 00:13:50,540
variations. Also, to avoid duplication with feature level tests, try using Gherkin with

141
00:13:50,540 --> 00:13:55,380
the PyTest BDD plugin. You can write test scenarios in plain language using given when

142
00:13:55,380 --> 00:14:01,580
then scenarios. And those will be glued to Python functions that will execute like a

143
00:14:01,580 --> 00:14:08,580
test script. Steps can be reused by different scenarios. And writing in Gherkin first helps

144
00:14:08,740 --> 00:14:15,740
you mentally separate test cases from test code. So you can focus on writing good tests.

145
00:14:15,740 --> 00:14:22,740
I'll definitely check out Hypothesis and PyTest BDD, Amanda says. I think there were talks

146
00:14:23,300 --> 00:14:30,300
about them at PyCon 2018. Now, here's another question. How have you handled test data in

147
00:14:33,340 --> 00:14:40,340
the past? My unit tests use PyTest's monkey patch fixture to mock data. But I'm struggling

148
00:14:40,660 --> 00:14:47,660
to find good ways to manage data for bamboozle systems, for black box testing. Test data

149
00:14:47,660 --> 00:14:54,260
is definitely hard to maintain. Try to keep test data to a minimum. For most tests, data

150
00:14:54,260 --> 00:14:59,160
needs are actually pretty small. Tests should set up and clean up whenever they need, such

151
00:14:59,160 --> 00:15:05,340
as database records or custom settings. Some data, however, like user accounts, are expensive

152
00:15:05,340 --> 00:15:12,340
to repair and should be handled outside of the tests and treated as a ready state. It

153
00:15:13,540 --> 00:15:18,540
may also be good to periodically set up and regenerate that data to make sure your systems

154
00:15:18,540 --> 00:15:25,340
are clean after any unexpected damage could happen. That makes sense, Amanda says. I've

155
00:15:25,340 --> 00:15:30,620
also been storing inputs like URLs and usernames and local config files so that they aren't

156
00:15:30,700 --> 00:15:37,220
hard-coded into the test code. Awesome, Andy says. That's great. You may also want to consider

157
00:15:37,220 --> 00:15:43,860
using some sort of key management service, like AWS KMS or Azure Key Vault. That way,

158
00:15:43,860 --> 00:15:50,700
your passwords will be secure and your config files will not go stale. Amanda goes back

159
00:15:50,700 --> 00:15:56,020
to bamboozle again, and she uses what she learned to improve her test automation project.

160
00:15:56,020 --> 00:16:00,460
It becomes her full-time work, and she transitions unit test work to other developers so she

161
00:16:00,460 --> 00:16:07,460
can focus exclusively on the feature tests. She does so well that her team keeps asking

162
00:16:12,100 --> 00:16:17,020
for more and more tests. Despite training other developers to help write tests, she

163
00:16:17,020 --> 00:16:24,020
becomes buried by the backlog. Amanda takes a step back and asks herself, what tests should

164
00:16:24,020 --> 00:16:31,020
we automate? Her answer is simple. Automation is expensive, so focus on the highest return

165
00:16:34,020 --> 00:16:41,020
on investment. Amanda writes guidelines for her team to avoid getting crushed by an impracticable

166
00:16:41,700 --> 00:16:48,700
100% test automation goal. She recommends automating happy paths of core features that

167
00:16:49,060 --> 00:16:56,060
will be run repeatedly. She also recommends avoiding edge cases, one-off checks, and visuals,

168
00:16:56,620 --> 00:17:02,220
because those would be much easier for an expert to log in and try manually. Amanda

169
00:17:02,220 --> 00:17:08,660
also recognizes that these are simply guidelines for her team and her project at bamboozle,

170
00:17:08,660 --> 00:17:15,660
and they may not necessarily apply universally to all other circumstances. However, even

171
00:17:16,660 --> 00:17:21,340
after narrowing the scope of the tests to automate, the number of tests is still quite

172
00:17:21,340 --> 00:17:27,380
large. Amanda's team has hundreds of feature tests that will balloon to thousands in the

173
00:17:27,380 --> 00:17:33,500
upcoming year. The service-level tests now take about 10 minutes to run, and web tests

174
00:17:33,500 --> 00:17:39,500
take over an hour. It's no longer practical for developers to run the tests on their local

175
00:17:39,500 --> 00:17:46,500
machine. So, Amanda calls a meeting with her friend, Otto the Panda, another developer

176
00:17:48,300 --> 00:17:55,300
at bamboozle, and she asks, how can we reduce the burden of automating tests, or how can

177
00:17:55,380 --> 00:18:00,100
we reduce the burden that automating tests puts on our development team? How can we reduce

178
00:18:00,100 --> 00:18:07,100
this burden? Otto says, it would be really nice if we could run these tests as part of

179
00:18:07,660 --> 00:18:14,660
a continuous integration and delivery pipeline. Then, every code change I make as a developer

180
00:18:15,180 --> 00:18:20,660
would become automatically tested once it gets pushed. The only problem we still have,

181
00:18:20,660 --> 00:18:27,220
then, would be that the tests take a long time to run. What if we run the tests in parallel

182
00:18:27,220 --> 00:18:34,220
using PyTest Xtest, Amanda asks? It could plug directly into our existing framework,

183
00:18:34,700 --> 00:18:38,500
and parallel testing, even though it would be hard on our laptops, would be much easier

184
00:18:38,500 --> 00:18:44,540
to scale in a CI environment with shared compute resources. I can make sure that the test code

185
00:18:44,540 --> 00:18:51,540
is thread-safe and would have no collisions, such as web logins. Thankfully, PyTest fixtures

186
00:18:51,640 --> 00:18:57,380
can help us set up and tear down everything cleanly and safely. If necessary, we could

187
00:18:57,380 --> 00:19:03,440
even set up Selenium Grid to scale our test automation execution across multiple nodes

188
00:19:03,440 --> 00:19:09,680
with multiple platforms and multiple browser versions. Or, we could also look into platform

189
00:19:09,680 --> 00:19:16,680
as a service providers, such as Sauce Labs or Browser Stack. Otto replies, that would

190
00:19:17,080 --> 00:19:22,880
be awesome. We also need to make sure feature owners are automatically notified of test

191
00:19:22,880 --> 00:19:29,200
failures. That way, they can triage any failures immediately, and we get that fast feedback

192
00:19:29,200 --> 00:19:36,200
cycle. Amanda and Otto team up to make it happen. Amanda updates the automation code

193
00:19:36,880 --> 00:19:42,320
to use PyTest Xtest, and Otto adds new jobs to their existing Jenkins build server for

194
00:19:42,320 --> 00:19:49,320
running test suites. They also set up a report portal instance to their test results dashboard.

195
00:19:50,440 --> 00:19:57,440
Tests now complete in a fraction of the time, and developers get failure notifications immediately.

196
00:19:58,040 --> 00:20:04,560
Unfortunately, though, adopting true CI brings unforeseen consequences of scale. More tests

197
00:20:04,560 --> 00:20:10,960
runs means more issues are uncovered. While most test runs are fine, some start failing

198
00:20:10,960 --> 00:20:16,760
intermittently. Ouch. And that is one of the classic problems with test automation. There

199
00:20:16,760 --> 00:20:21,960
are four common reasons we see these test failures. It could be that the feature under

200
00:20:21,960 --> 00:20:28,600
test has a really tricky bug. It could be the feature under test was, the feature itself

201
00:20:28,600 --> 00:20:34,640
was updated without also updating the test code. It could be the automation didn't handle

202
00:20:34,640 --> 00:20:41,640
an unexpected condition, such as a timeout. Or, EGAD, the worst, the automation itself

203
00:20:41,640 --> 00:20:48,640
has a bug. None of these, though, are good outcomes. Unfortunately, as well, the failures

204
00:20:49,320 --> 00:20:55,220
leave a bad impression on the team. Some of Amanda's coworkers stop triaging test failures,

205
00:20:55,220 --> 00:21:02,400
and they even suggest skipping the tests altogether. Amanda doubles down. How can we make tests

206
00:21:02,400 --> 00:21:09,400
more reliable, she asks herself. First, she realizes that continuous integration is the

207
00:21:09,720 --> 00:21:13,980
production environment for tests, and should be treated as such. And I'm going to repeat

208
00:21:13,980 --> 00:21:20,980
that again. CI is production for test automation. Test code should undergo the same best practices

209
00:21:23,300 --> 00:21:29,060
as product code, including coding standards and review. Shared test framework components

210
00:21:29,060 --> 00:21:35,140
should also have unit tests, because they're shared by multiple things. Secondly, Amanda

211
00:21:35,140 --> 00:21:40,620
discovers that the most common points of failure are remote calls and race conditions. She

212
00:21:40,620 --> 00:21:46,460
tunes the framework to have appropriate timeouts, immediate retries, and helpful failure messages

213
00:21:46,460 --> 00:21:53,460
when problems arise. She makes it correct when it can, and safely abort when it cannot.

214
00:21:54,300 --> 00:21:58,860
She also looks into something called contract testing, which uses mocks for services to

215
00:21:58,860 --> 00:22:05,340
avoid intermittent network problems. Third, Amanda reaches out to her team members for

216
00:22:05,500 --> 00:22:10,860
better collaboration, because it starts with the team. They institute better processes

217
00:22:10,860 --> 00:22:16,580
for flagging feature changes that will affect tests, and also for being gracious when failures

218
00:22:16,580 --> 00:22:22,420
happen on both sides. As a result of these three improvements, automation becomes more

219
00:22:22,420 --> 00:22:29,420
reliable, and confidence in the whole test solution has been restored.

220
00:22:29,780 --> 00:22:35,180
By this point in our story, the automation solution is quite mature. New tests are added

221
00:22:35,180 --> 00:22:40,820
every sprint, and results provide fast feedback to the development team. Other developers

222
00:22:40,820 --> 00:22:45,980
like Otto join Amanda in automating tests at all layers of the pyramid, as part of their

223
00:22:45,980 --> 00:22:52,980
natural development workflow. Quality becomes centric to the team's vision, and that is

224
00:22:53,980 --> 00:23:00,420
Amanda's test automation journey. There's so much more I could say about all of this.

225
00:23:00,420 --> 00:23:06,060
A half-hour slot is just not enough time. But I do want to share some resources. If

226
00:23:06,060 --> 00:23:10,780
this talk was meaningful to you, and you want to go learn some more, this is the slide to

227
00:23:10,780 --> 00:23:17,460
take the pictures of. Disclaimer, boom. If you want to learn more, I highly recommend

228
00:23:17,460 --> 00:23:21,340
my blog at Automation Panda. Yes, I'm biased towards that one, because it's mine. I also

229
00:23:21,820 --> 00:23:26,820
recommend checking out Test Automation University, as well as the Ministry of Testing. The three

230
00:23:26,820 --> 00:23:30,420
books and their authors are listed here as well. Those are the ones I mentioned earlier

231
00:23:30,420 --> 00:23:36,800
in the slides. At the bottom, I've also listed all the different frameworks and packages

232
00:23:36,800 --> 00:23:43,800
and such that I recommended as part of Amanda's journey. You can learn more about those.

233
00:23:44,940 --> 00:23:48,420
Thank you so much for inviting me here to Texas. This is my second time in Austin. If

234
00:23:48,620 --> 00:23:52,900
you have any other questions or want to talk more, please come see me whenever. I'll be

235
00:23:52,900 --> 00:23:56,820
here both days. You can reach out to me on Twitter at Automation Panda. You can contact

236
00:23:56,820 --> 00:23:59,820
me through my blog. Thank you so much. I appreciate it.

