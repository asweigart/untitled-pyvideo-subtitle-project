1
00:00:00,000 --> 00:00:07,000
We have Tipton Cole speaking, and he's actually one of our sponsors at Pi Texas, so thanks for sponsoring.

2
00:00:07,000 --> 00:00:23,000
I am told, for what it's worth, that the selection of speakers was not based on speakers.

3
00:00:23,000 --> 00:00:34,000
Alright, here, I turn on my laser pointer, make sure that, oh boy, that's great, that's a great little dot.

4
00:00:35,000 --> 00:00:36,000
Okay.

5
00:00:39,000 --> 00:00:47,000
I'm sorry. I have a MacBook Pro, which means that my life consists of dongles.

6
00:00:56,000 --> 00:00:59,000
Now I have no chance of getting this talk done on time.

7
00:00:59,000 --> 00:01:13,000
My name is Tipton Cole. My day job, as it were, is I work as an expert in software litigation, mostly patent suits involving software.

8
00:01:13,000 --> 00:01:24,000
And I can tell you from experience that an expert is somebody who has done it more times than you have, and usually that means once.

9
00:01:24,000 --> 00:01:35,000
Talk is entitled Epigrammatic Python. This told me to make sure to test my laser pointer.

10
00:01:35,000 --> 00:01:47,000
When I was preparing this talk the first time, my wife was out running errands, and I called her and asked her if she could get me a laser pointer at the office depot while she was out.

11
00:01:47,000 --> 00:02:00,000
She searched the entire store, unable to find one, and finally flagged down a clerk who told her that the most likely spot for picking up a laser pointer was PetSmart.

12
00:02:00,000 --> 00:02:15,000
It turns out, cats like lasers. And sure enough, I went and searched on Amazon, and you'll see that the first completion of the laser pointer for any purpose whatsoever is for cats.

13
00:02:16,000 --> 00:02:24,000
All right. Epigrams. The definition of an epigram is a pithy saying or remark expressing an idea in a clever or amusing way.

14
00:02:24,000 --> 00:02:34,000
I've always been fond of the epigram that the race is not always to the swift, nor the battle to the strong, but that's the way to bet.

15
00:02:34,000 --> 00:02:38,000
Tiger Woods won the Masters Championship today.

16
00:02:39,000 --> 00:02:47,000
So an epigram. It's pithy, clever, amusing, and true-ish.

17
00:02:47,000 --> 00:02:56,000
The purpose of the epigrams that I'll present today is to help guide us in the development of computer software and to help us build better systems.

18
00:02:56,000 --> 00:03:03,000
But many of the humorous observations are not all that helpful.

19
00:03:03,000 --> 00:03:15,000
They are situationally wrong, they are wrong in scope, or sometimes they're just plain wrong.

20
00:03:15,000 --> 00:03:21,000
One of my favorites from the early 70s is from Roy Ash at Lytton Industries who said,

21
00:03:21,000 --> 00:03:26,000
Our motto is, when in doubt, do the right thing.

22
00:03:26,000 --> 00:03:33,000
I've always taken a lot of confidence from that saying.

23
00:03:33,000 --> 00:03:38,000
I like Fred Brooks. When you talk about software, I like Fred Brooks.

24
00:03:38,000 --> 00:03:49,000
Programming. The programmer, he says, is like the poet who works only slightly removed from pure thought stuff.

25
00:03:49,000 --> 00:04:08,000
He also described it as, few media of crediation are so flexible, so easily polished, so readily capable of realizing grand conceptual structures.

26
00:04:08,000 --> 00:04:19,000
Now, there are people who disagree with that, and I picked up a bunch of sayings associated with programming.

27
00:04:19,000 --> 00:04:28,000
No code is faster than no code. Deleted code is debugged code.

28
00:04:28,000 --> 00:04:37,000
I hate code. I want as little as possible in our product. And when in doubt, leave it out.

29
00:04:37,000 --> 00:04:46,000
So, the best code they say is no code. The next best code is less code.

30
00:04:46,000 --> 00:04:52,000
So what explains this attitude that we all seem to have? You heard it expressed over the last couple of days.

31
00:04:52,000 --> 00:05:01,000
And one of the things that I found most reassuring in the last couple of days of listening to talks here, and you will see it later in this one,

32
00:05:01,000 --> 00:05:12,000
is that many of the themes, many of the items that I address here have already been addressed by the previous speakers.

33
00:05:12,000 --> 00:05:22,000
That is, there is a commonality in all of these discussions. So how can code be bad? That's what we program with. That's what we do.

34
00:05:23,000 --> 00:05:33,000
So why are those who are responsible for delivering, maintaining, working software, why are they so skittish, why are they so uncertain?

35
00:05:33,000 --> 00:05:40,000
What is it about computer code that makes us so reticent about what we're doing?

36
00:05:40,000 --> 00:05:47,000
Why are the communities that plan, develop, and rely on computer software so conservative?

37
00:05:48,000 --> 00:05:52,000
It's because code is brittle.

38
00:05:52,000 --> 00:06:01,000
Although we have this plastic medium, it's so tempting to overwork it.

39
00:06:01,000 --> 00:06:13,000
We want to add a feature, we want it to go faster, we want to tie into a new API, we want to put it on the cloud, and we know we can make it work.

40
00:06:13,000 --> 00:06:19,000
We have a lifetime of experience that says everything can work, but the code is brittle.

41
00:06:21,000 --> 00:06:28,000
This is the first launch of the Ariane rocket for the European Space Agency.

42
00:06:28,000 --> 00:06:47,000
The reason it blew up was I took a fully tested module and moved it into another context where one of the values, 64-bit values, was coerced into a 16-bit integer.

43
00:06:47,000 --> 00:06:55,000
And that cost them probably not $500 million, but it cost them a lot.

44
00:06:56,000 --> 00:07:01,000
So, our medium is perfectly plastic but brittle.

45
00:07:01,000 --> 00:07:07,000
The process and product seem to be unavoidably flawed.

46
00:07:07,000 --> 00:07:11,000
So, other epigrams associated with our work.

47
00:07:11,000 --> 00:07:16,000
Any non-trivial program, we're told, contains at least one bug.

48
00:07:16,000 --> 00:07:18,000
And this is my favorite.

49
00:07:18,000 --> 00:07:22,000
Software being done is like your lawn being mowed.

50
00:07:25,000 --> 00:07:33,000
If debugging is the process of removing software bugs, then programming must be the process of putting them in.

51
00:07:36,000 --> 00:07:45,000
So, Python, I think, gets a lot of our concerns, a lot of our worries, and readdresses it in a good way.

52
00:07:45,000 --> 00:07:48,000
We've heard about the Zen of Python earlier today.

53
00:07:48,000 --> 00:07:50,000
This is my favorite part.

54
00:07:50,000 --> 00:07:53,000
Explicit is better than implicit.

55
00:07:55,000 --> 00:07:58,000
Import this if you want to see it on your REPL.

56
00:08:01,000 --> 00:08:10,000
Writing software as if we were the only person that ever has to comprehend it is one of the biggest mistakes and falsest assumptions we can make.

57
00:08:14,000 --> 00:08:24,000
There's an easy estimate from Robert Martin that we read ten times more software than we write.

58
00:08:24,000 --> 00:08:28,000
That number is probably very conservative.

59
00:08:28,000 --> 00:08:31,000
Don't complain about bad code, rewrite it.

60
00:08:31,000 --> 00:08:35,000
When you feel the need to write a comment, first try to refactor the code.

61
00:08:35,000 --> 00:08:38,000
Now, I think we heard that earlier today.

62
00:08:38,000 --> 00:08:41,000
Somebody who said, don't write comments, write better code.

63
00:08:41,000 --> 00:08:45,000
Now, it's not always available to us.

64
00:08:45,000 --> 00:08:57,000
One of the things about Pet 20 that caught me when I was preparing this talk was the abstract, which explains exactly what it's directed at.

65
00:08:57,000 --> 00:09:06,000
That is, Tim Peters is talking about the guiding principles for Python's design.

66
00:09:06,000 --> 00:09:10,000
Not necessarily all of the applications that we write.

67
00:09:10,000 --> 00:09:17,000
When we look back through the Zen and Python and its completeness or near completeness,

68
00:09:17,000 --> 00:09:25,000
look at it as the guidance for the development of a computer language, not necessarily for all the uses of that computer language.

69
00:09:29,000 --> 00:09:37,000
The explicit context for Pet 20 is language design, not applications programming.

70
00:09:37,000 --> 00:09:41,000
Now, just a little bit of an editorial comment here.

71
00:09:41,000 --> 00:09:47,000
How is Python doing with their explicit is better than implicit.

72
00:09:47,000 --> 00:09:56,000
Recently, in the last couple of releases of Python, we've had two examples.

73
00:09:56,000 --> 00:10:03,000
Something I like, I'm very fond of the re-implementation of the data dictionaries.

74
00:10:03,000 --> 00:10:08,000
I'm not as fond of Pet 572.

75
00:10:08,000 --> 00:10:16,000
The way that I would characterize them is that the dictionary rewrite is a sort of semantic sugar.

76
00:10:16,000 --> 00:10:21,000
The assignment expressions is more of a syntactic sugar.

77
00:10:21,000 --> 00:10:26,000
My concern is that it begins to feel a little bit more like Perl.

78
00:10:26,000 --> 00:10:33,000
And those of us who worked with Perl in the 80s and in the early 90s, I left.

79
00:10:36,000 --> 00:10:39,000
Pet 20 probably deserves its own talk.

80
00:10:39,000 --> 00:10:42,000
I'll try to work on it prosaic Python.

81
00:10:42,000 --> 00:10:50,000
But I think that explicit is better than implicit is very nearly universally applicable.

82
00:10:50,000 --> 00:10:55,000
That is, the context in which it was offered was for the design of a language.

83
00:10:55,000 --> 00:10:59,000
I think it's entirely useful in the...

84
00:10:59,000 --> 00:11:06,000
So, epigrams come down on both sides of many issues.

85
00:11:06,000 --> 00:11:10,000
So, if you've ever heard the expression, penny wise, pound foolish,

86
00:11:10,000 --> 00:11:16,000
you probably also heard the expression, if you take care of the pennies, the pounds take care of themselves.

87
00:11:16,000 --> 00:11:22,000
And so, my question for you is, which one do you apply?

88
00:11:23,000 --> 00:11:31,000
When you're at the automobile dealership or somebody's pitching you a condo in Vail,

89
00:11:31,000 --> 00:11:34,000
which of these do you apply?

90
00:11:34,000 --> 00:11:39,000
And the answer is, just do the right thing.

91
00:11:39,000 --> 00:11:49,000
In the programming world, I picked for this talk a couple of useful rules of thumb for programming.

92
00:11:49,000 --> 00:11:55,000
And we've heard some of both of these during the discussions earlier today and yesterday.

93
00:11:55,000 --> 00:12:01,000
The first is the don't repeat yourself or dry principle, also known as once and only once.

94
00:12:01,000 --> 00:12:05,000
This is from Andy Hunter and Dave Thomas in the Pragmatic Programmer.

95
00:12:05,000 --> 00:12:10,000
The description that I think is particularly apt is,

96
00:12:10,000 --> 00:12:16,000
when you find yourself writing code that is similar or equal to something you've written before,

97
00:12:16,000 --> 00:12:22,000
take a moment to think about what you're doing and don't repeat yourself.

98
00:12:22,000 --> 00:12:28,000
On the other side of that coin is the wrong abstraction from Sandy Metz.

99
00:12:28,000 --> 00:12:34,000
Some of you may have seen it before. I think Sandy works mostly in the Ruby world.

100
00:12:34,000 --> 00:12:40,000
And if you haven't seen it, I recommend that you look up her blog post called the wrong abstraction.

101
00:12:41,000 --> 00:12:48,000
And she expresses it multiple times saying that duplication is far cheaper than the wrong abstraction

102
00:12:48,000 --> 00:12:52,000
or that one should prefer duplication over the wrong abstraction.

103
00:12:52,000 --> 00:13:00,000
If we go back to Chris Peters, who by the way is not Tim Peters, it's a different Peters.

104
00:13:00,000 --> 00:13:07,000
If you go back to Chris Peters' statement, he's saying code that's similar or equal to something you've written.

105
00:13:07,000 --> 00:13:11,000
Similar is not the same thing as the same.

106
00:13:11,000 --> 00:13:17,000
And this is one of the points that Sandy Metz makes.

107
00:13:17,000 --> 00:13:24,000
Using dry couples the components from which you extracted the code.

108
00:13:24,000 --> 00:13:34,000
So when you go to the process of pulling code out of two other processes and drying it out,

109
00:13:34,000 --> 00:13:40,000
those two processes are now linked to one another through the consolidated code.

110
00:13:40,000 --> 00:13:44,000
And we saw today talking about doing testing.

111
00:13:44,000 --> 00:13:52,000
When you dry out those tests, now your tests are codependent.

112
00:13:52,000 --> 00:13:57,000
And generally speaking for unit tests, you want them to be independent.

113
00:13:57,000 --> 00:14:01,000
So there are costs associated with it.

114
00:14:01,000 --> 00:14:08,000
Dry, it turns out, is rooted in what is known as the fundamental theorem of software engineering.

115
00:14:08,000 --> 00:14:11,000
This is from a guy named D.J. Wheeler.

116
00:14:11,000 --> 00:14:19,000
Wheeler was, among other things, credited with the development or creation of the subroutine

117
00:14:19,000 --> 00:14:23,000
along with a couple of other guys in the 50s.

118
00:14:23,000 --> 00:14:30,000
Wheeler, it turns out, actually had a PhD in computer science in 1951.

119
00:14:30,000 --> 00:14:34,000
I didn't know such a thing was offered in 1951.

120
00:14:34,000 --> 00:14:42,000
Anyway, his statement is that all problems in computer science can be solved by another level of indirection.

121
00:14:42,000 --> 00:14:46,000
Another level of indirection is an abstraction.

122
00:14:46,000 --> 00:14:52,000
Examples of indirection are something as simple as assigning a variable a name,

123
00:14:52,000 --> 00:15:00,000
a pointer, creating a function, objects, containers, APIs.

124
00:15:00,000 --> 00:15:08,000
Most of the benefits that we see, all the layers that we see in computer programming,

125
00:15:08,000 --> 00:15:15,000
each of those is piling one level of indirection on another.

126
00:15:15,000 --> 00:15:19,000
Dry is a good principle.

127
00:15:19,000 --> 00:15:24,000
It encourages single responsibility constructs like functions and subroutines

128
00:15:24,000 --> 00:15:28,000
or methods to implement reusable code.

129
00:15:28,000 --> 00:15:37,000
It's not a false or, I'm sorry, it's not a wrong abstraction to have a square root function.

130
00:15:37,000 --> 00:15:40,000
It's not a wrong abstraction to have a read function.

131
00:15:40,000 --> 00:15:44,000
Those things make sense.

132
00:15:44,000 --> 00:15:54,000
In my world, my characterization has been computer programming is about naming things and subroutines.

133
00:15:54,000 --> 00:16:04,000
But I want to show you very quickly one of the rabbit trails that I ran down working with some code fairly recently.

134
00:16:04,000 --> 00:16:10,000
This is from, I have a blog at jopicon.com called Programming in Public.

135
00:16:10,000 --> 00:16:23,000
And the blog itself is made of static web pages which I create using Flask and an add-on to Flask called Frozen Flask.

136
00:16:23,000 --> 00:16:27,000
The example is a couple of very similar functions.

137
00:16:27,000 --> 00:16:31,000
These are just two pages on the website, the index page and the about page,

138
00:16:31,000 --> 00:16:37,000
and you can see that they're very nearly the same.

139
00:16:37,000 --> 00:16:45,000
Before I get into the details of drying this out, I want to finish Wheeler's quote.

140
00:16:45,000 --> 00:16:53,000
All problems in computer science can be solved by using another level of indirection,

141
00:16:53,000 --> 00:16:57,000
but that will usually create another problem.

142
00:16:57,000 --> 00:17:05,000
Those of you who have worked with regular expressions are probably familiar with the warning.

143
00:17:05,000 --> 00:17:10,000
You have a problem and you decide to use regular expressions to solve it.

144
00:17:10,000 --> 00:17:15,000
Now you have two problems.

145
00:17:15,000 --> 00:17:26,000
This is an example in which immediate or automatic or formulaic application of the dry principle can get you into real trouble.

146
00:17:26,000 --> 00:17:31,000
So we have, I'm sorry, where are we?

147
00:17:31,000 --> 00:17:35,000
We have the two programs that I mentioned and then there was a third.

148
00:17:35,000 --> 00:17:43,000
It's not quite the same thing, but these are all just very simple web pages, have very relatively fixed information on them.

149
00:17:43,000 --> 00:17:46,000
And so I decided to put them all together.

150
00:17:46,000 --> 00:17:52,000
And by the time I had dried everything out, this is what it looked like.

151
00:17:52,000 --> 00:17:56,000
And what you have here, I'm going to use my pointer.

152
00:17:56,000 --> 00:18:11,000
What you have here, oh yeah, that helps a lot, is that because these things don't really belong together,

153
00:18:11,000 --> 00:18:20,000
I've had to create a bunch of parameter values or a bunch of working values in order to use them at the same time.

154
00:18:20,000 --> 00:18:27,000
So, whoops, wrong.

155
00:18:27,000 --> 00:18:33,000
Wow, how far did it?

156
00:18:33,000 --> 00:18:36,000
Anyway, I have to use them all at the same time.

157
00:18:36,000 --> 00:18:49,000
The code that was common that I wanted to reduce in the original two functions is now reduced to, where is it?

158
00:18:49,000 --> 00:18:53,000
Here, okay?

159
00:18:53,000 --> 00:19:05,000
That duplicated code, I don't need to dry it out anymore because I've reduced all this to one function.

160
00:19:05,000 --> 00:19:10,000
Well, it turns out this was a really bad idea.

161
00:19:10,000 --> 00:19:12,000
I worked it all the way through.

162
00:19:12,000 --> 00:19:19,000
There are multiple levels of dry all the way back through the model, all the way to the database, and some of it worked out just fine.

163
00:19:19,000 --> 00:19:30,000
But this is a nearly perfect match to the scenario that Sandy Metz lays out in her wrong abstraction post, and she calls it a sunk cost fallacy.

164
00:19:30,000 --> 00:19:39,000
Resolution to all of this is based on the considered and tested application of appropriate principles, that is, on necessity.

165
00:19:39,000 --> 00:19:52,000
So, first, I take out that third function that I didn't need, and then it turned out that my setup,

166
00:19:52,000 --> 00:20:00,000
the application that I was depending on in the frozen flask, none of the top level stuff dried out.

167
00:20:00,000 --> 00:20:04,000
So, I wound up with three functions.

168
00:20:04,000 --> 00:20:06,000
I started with three functions.

169
00:20:06,000 --> 00:20:30,000
They did wind up with, be careful, a lot of drying here and here where things were able to consolidate in the background, but in the foreground, very little of it dried up.

170
00:20:30,000 --> 00:20:36,000
This is connected to other things that were discussed earlier today.

171
00:20:36,000 --> 00:20:40,000
The indirection increases complexity.

172
00:20:40,000 --> 00:20:50,000
So, we think that we're simplifying a program, we think that we're simplifying a process, but we're adding to the complexity of the application.

173
00:20:50,000 --> 00:20:55,000
So, a couple of statements here, such as modern computing.

174
00:20:55,000 --> 00:21:00,000
Everything simple is made too complicated because it's easy to fiddle with.

175
00:21:00,000 --> 00:21:02,000
We have a plastic needle.

176
00:21:02,000 --> 00:21:08,000
Everything complicated stays complicated because it's too hard to fix.

177
00:21:08,000 --> 00:21:12,000
Simplicity is a prerequisite for reliability.

178
00:21:12,000 --> 00:21:13,000
I like this one.

179
00:21:13,000 --> 00:21:18,000
Layers are for cakes, not for software.

180
00:21:18,000 --> 00:21:21,000
The central enemy of reliability is complexity.

181
00:21:21,000 --> 00:21:47,000
So, the problem with all of this, the unexpected consequence of working in computer software and IT is that we appear to the world to be cutting edge guys, bleeding edge technology.

182
00:21:47,000 --> 00:22:05,000
And yet, you walk one of us into a room with servers running old cobalt programs and nobody wants to touch it because once you have a piece of software that works, nobody wants to fiddle with it.

183
00:22:05,000 --> 00:22:07,000
It's too scary.

184
00:22:07,000 --> 00:22:20,000
We don't have the information that we had when we built the software in order to confirm that changes we put into it won't break something else down the line.

185
00:22:20,000 --> 00:22:26,000
So, what do we do when we're faced with these types of problems?

186
00:22:26,000 --> 00:22:28,000
Very simple solution.

187
00:22:28,000 --> 00:22:31,000
When in doubt, do what I did.

188
00:22:31,000 --> 00:22:33,000
Do the right thing.

189
00:22:33,000 --> 00:22:37,000
And when the right thing turns out to be wrong, you walk it back.

190
00:22:37,000 --> 00:22:42,000
Chalk it up to experience and your next decision will be better.

191
00:22:42,000 --> 00:22:45,000
But I repeat myself.

192
00:22:45,000 --> 00:22:53,000
Good decisions come from experience and experience, as I said earlier, comes from bad decisions.

193
00:22:53,000 --> 00:22:55,000
All right.

194
00:22:55,000 --> 00:22:57,000
The website.

195
00:22:57,000 --> 00:23:10,000
The example of the compressed code, the dried code, the experience of drying it out and turning out that it wouldn't work is at the joepython.com site.

196
00:23:10,000 --> 00:23:13,000
I didn't mention actually the link there.

197
00:23:13,000 --> 00:23:14,000
There are multiple threads.

198
00:23:14,000 --> 00:23:19,000
Go to the blocks thread and under that there's a post called dry rot.

199
00:23:19,000 --> 00:23:31,000
And that's the post that will explain the details of how all that software was used and misused in the process.

200
00:23:31,000 --> 00:23:37,000
Majority of the programming quotes in this talk came from a site called deafprogramming.com.

201
00:23:37,000 --> 00:23:38,000
I recommend it.

202
00:23:38,000 --> 00:23:41,000
It's very entertaining.

203
00:23:41,000 --> 00:23:45,000
I'd like for you to check out the joepython site.

204
00:23:45,000 --> 00:23:47,000
It's a very peculiar place.

205
00:23:47,000 --> 00:23:53,000
I'm developing a blog and I am blogging about the process of writing blogging software.

206
00:23:53,000 --> 00:23:55,000
Everything is public.

207
00:23:55,000 --> 00:23:59,000
It's excruciatingly detailed.

208
00:23:59,000 --> 00:24:02,000
And I hope that you can enjoy it.

209
00:24:02,000 --> 00:24:04,000
Thank you.

