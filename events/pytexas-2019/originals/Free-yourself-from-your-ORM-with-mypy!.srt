1
00:00:00,000 --> 00:00:07,920
Because the user sent in bad data, the application can error

2
00:00:07,920 --> 00:00:11,400
before it even gets to the database, possibly tell the

3
00:00:11,400 --> 00:00:13,440
user something a little bit more useful in terms of what

4
00:00:13,440 --> 00:00:17,320
they did wrong if they're using an API.

5
00:00:17,320 --> 00:00:19,960
And then there's a lot of simple patterns that just come

6
00:00:19,960 --> 00:00:21,880
with the ORM that make it easy to build out a

7
00:00:21,880 --> 00:00:22,800
new application quickly.

8
00:00:22,800 --> 00:00:25,400
That's why things like Django and Rails and stuff are so

9
00:00:25,400 --> 00:00:28,160
popular, because you can type a few things in and you get

10
00:00:28,160 --> 00:00:30,000
an application really fast.

11
00:00:30,000 --> 00:00:32,640
And that's definitely really cool.

12
00:00:32,640 --> 00:00:34,920
But there are other ways to get at this.

13
00:00:34,920 --> 00:00:41,120
So I wrote functional composition here, but even

14
00:00:41,120 --> 00:00:46,000
object composition is good, generally better than

15
00:00:46,000 --> 00:00:49,160
inheritance, not always, but generally.

16
00:00:49,160 --> 00:00:52,760
Being able to compose things makes things more flexible.

17
00:00:52,760 --> 00:00:54,000
It also lets you hide things.

18
00:00:54,000 --> 00:01:01,200
So instead of a subclass, you contain a class.

19
00:01:01,200 --> 00:01:03,320
You can hide that class from the external world.

20
00:01:03,320 --> 00:01:07,160
And you can trust that I've got my model class, but only

21
00:01:07,160 --> 00:01:08,800
my model class can talk to the database.

22
00:01:08,800 --> 00:01:10,720
Nobody else can talk to the database.

23
00:01:10,720 --> 00:01:13,720
And I don't have to worry about queries leaking in

24
00:01:13,720 --> 00:01:15,960
somewhere I wasn't expecting or things like that.

25
00:01:15,960 --> 00:01:23,360
So composition is a great tool for abstracting away

26
00:01:23,400 --> 00:01:25,280
complexity that you don't need to know about in the

27
00:01:25,280 --> 00:01:28,440
function you're writing or in the module you're writing.

28
00:01:28,440 --> 00:01:31,360
There's a lot of built-in data structures in Python that

29
00:01:31,360 --> 00:01:37,520
provide a lot of these, have a lot of power to them.

30
00:01:37,520 --> 00:01:41,720
You can also, like I said, you can just write a class.

31
00:01:41,720 --> 00:01:44,640
You can build your own class hierarchy, et cetera.

32
00:01:44,640 --> 00:01:50,960
There's one more thing, which is going to be the main focus

33
00:01:50,960 --> 00:01:55,160
of my talk that you can use, and that is MyPy.

34
00:01:55,160 --> 00:01:59,320
So talks about MyPy, talks about ORMs, what do they have

35
00:01:59,320 --> 00:02:00,000
to do with each other?

36
00:02:00,000 --> 00:02:01,560
They actually have nothing to do with each other.

37
00:02:01,560 --> 00:02:03,480
MyPy has nothing to do with databases.

38
00:02:03,480 --> 00:02:06,360
MyPy is a static type checker.

39
00:02:06,360 --> 00:02:07,600
Has anybody used MyPy?

40
00:02:10,080 --> 00:02:11,520
Mostly on that side of the room, OK?

41
00:02:11,520 --> 00:02:13,880
A few people back there.

42
00:02:13,880 --> 00:02:16,760
So it's a static type checker.

43
00:02:16,760 --> 00:02:19,240
You can use it to tell.

44
00:02:19,280 --> 00:02:22,920
It will tell you if you're doing something wrong in your

45
00:02:22,920 --> 00:02:27,000
Python code without actually running your Python code.

46
00:02:27,000 --> 00:02:32,360
And it uses type annotations.

47
00:02:32,360 --> 00:02:34,360
If you're using a version of Python that supports type

48
00:02:34,360 --> 00:02:38,080
annotations in the syntax, alternatively, you can run it

49
00:02:38,080 --> 00:02:41,160
against old code, you can run it against Python 2 code, and

50
00:02:41,160 --> 00:02:44,320
you do your type annotations in comments, and it can parse

51
00:02:44,320 --> 00:02:46,320
the comments out and figure out the types.

52
00:02:46,320 --> 00:02:50,120
So let's show off a little bit of what it's

53
00:02:50,120 --> 00:02:51,400
going to look like.

54
00:02:51,400 --> 00:02:56,200
So I'm going to open up a file here.

55
00:02:56,200 --> 00:02:57,440
Sure.

56
00:03:03,600 --> 00:03:04,840
Nope, hitting the wrong character.

57
00:03:04,840 --> 00:03:20,280
So I'm going to write a function, and I'm going to

58
00:03:20,280 --> 00:03:21,080
annotate its type.

59
00:03:21,080 --> 00:03:24,560
So this is just from the MyPy example.

60
00:03:24,560 --> 00:03:25,840
So we see what it is.

61
00:03:25,840 --> 00:03:26,960
I've got greeting.

62
00:03:26,960 --> 00:03:29,520
It's going to take some name.

63
00:03:29,520 --> 00:03:32,440
We're going to give it a type, which is a string.

64
00:03:32,440 --> 00:03:34,480
The colon means this is its type.

65
00:03:34,480 --> 00:03:37,760
And then the function has a return type, and that's what

66
00:03:37,760 --> 00:03:38,760
the arrow means.

67
00:03:38,760 --> 00:03:39,800
This is what it's going to return.

68
00:03:39,800 --> 00:03:41,040
It's also going to return a string.

69
00:03:44,560 --> 00:03:46,080
And there we go.

70
00:03:56,240 --> 00:03:59,120
So right now, there's no errors because the function

71
00:03:59,120 --> 00:04:00,400
isn't actually doing anything.

72
00:04:00,400 --> 00:04:03,160
Even though if you call this function, it would return none.

73
00:04:03,200 --> 00:04:07,240
MyPy is saying, that's OK.

74
00:04:07,240 --> 00:04:08,880
You haven't actually written anything yet.

75
00:04:08,880 --> 00:04:14,320
If I return an integer, it will tell me incompatible

76
00:04:14,320 --> 00:04:15,000
return type.

77
00:04:15,000 --> 00:04:18,360
I expected a string, but I got an integer.

78
00:04:18,360 --> 00:04:20,120
You're doing something wrong.

79
00:04:20,120 --> 00:04:24,000
I can say, OK, well, how about just saying hello?

80
00:04:24,000 --> 00:04:25,880
And it says, OK, cool.

81
00:04:25,880 --> 00:04:29,520
One thing to note here is that I'm taking the name.

82
00:04:29,520 --> 00:04:30,680
I'm not doing anything with the name.

83
00:04:30,680 --> 00:04:33,560
That's probably not what I intended.

84
00:04:33,560 --> 00:04:38,680
MyPy is good at checking to make sure that you're handling

85
00:04:38,680 --> 00:04:42,400
conditions, that you're not accessing things that aren't

86
00:04:42,400 --> 00:04:44,000
there, stuff like that.

87
00:04:44,000 --> 00:04:47,840
What it can't do is tell you if you're doing the right thing,

88
00:04:47,840 --> 00:04:49,440
because it doesn't know what the right thing is.

89
00:04:49,440 --> 00:04:55,320
So there's a lot of discussion about types and tests and

90
00:04:55,320 --> 00:04:57,320
which is better.

91
00:04:57,320 --> 00:05:00,000
You really kind of need both if you want to be really

92
00:05:00,000 --> 00:05:02,560
confident that your code is working correctly.

93
00:05:02,560 --> 00:05:05,720
So it's not a replacement for writing unit tests, but I do

94
00:05:05,720 --> 00:05:11,160
find that it's helpful for guiding you, saying, hey, you

95
00:05:11,160 --> 00:05:12,560
forgot about this case.

96
00:05:12,560 --> 00:05:14,280
Maybe you need to handle this case.

97
00:05:14,280 --> 00:05:17,560
Probably want to test to say that the right thing happens

98
00:05:17,560 --> 00:05:20,600
in that case, but it will at least tell you that you handle

99
00:05:20,600 --> 00:05:22,360
the case, you don't handle the case.

100
00:05:22,360 --> 00:05:26,360
So here, similarly, if I say hello plus five, it's going to

101
00:05:26,360 --> 00:05:28,640
say, I can't do that, because you can't add strings and

102
00:05:28,640 --> 00:05:34,000
numbers, but if I say hello plus name, it's totally fine.

103
00:05:34,000 --> 00:05:37,000
So down here, I just have my editor telling me what's

104
00:05:37,000 --> 00:05:39,080
wrong with the current file I'm working on.

105
00:05:39,080 --> 00:05:50,520
So let's start using MyPy instead of an ORM.

106
00:05:50,520 --> 00:05:52,040
So the very first thing we want to do is

107
00:05:52,040 --> 00:05:54,320
define sort of our model.

108
00:05:54,320 --> 00:06:04,320
I'm going to use something called a typed dictionary.

109
00:06:04,320 --> 00:06:06,440
It comes from MyPy type extensions.

110
00:06:06,440 --> 00:06:08,960
I think at some point in the future, this is going to be

111
00:06:08,960 --> 00:06:14,760
merged into the standard typing module, but for now,

112
00:06:14,760 --> 00:06:16,400
it's in an extension while they're sort of

113
00:06:16,400 --> 00:06:17,640
solidifying the API.

114
00:06:21,160 --> 00:06:23,880
I'm going to define, let's say we're building an application

115
00:06:23,880 --> 00:06:27,320
for dealing with books, because books are really

116
00:06:27,320 --> 00:06:31,880
cool and modern, et cetera.

117
00:06:31,880 --> 00:06:34,360
So I'm going to use a typed dictionary.

118
00:06:34,360 --> 00:06:38,600
A typed dictionary is just, it says, look, at runtime

119
00:06:38,600 --> 00:06:43,440
represent this object as just a dictionary, but I want to say

120
00:06:43,440 --> 00:06:45,960
what attributes it has to have and what types those

121
00:06:45,960 --> 00:06:47,240
attributes are.

122
00:06:47,240 --> 00:06:50,840
And so books have authors.

123
00:06:50,840 --> 00:06:51,840
Sure.

124
00:06:51,840 --> 00:06:55,080
And they've got titles.

125
00:06:55,080 --> 00:06:56,320
OK, so there we go.

126
00:06:58,880 --> 00:07:09,360
I should probably type out the code correctly every time.

127
00:07:09,360 --> 00:07:15,000
OK, so that's useful, maybe.

128
00:07:15,000 --> 00:07:17,560
Haven't done anything with it yet.

129
00:07:17,560 --> 00:07:20,240
Let's write a function that can take a dictionary.

130
00:07:20,240 --> 00:07:24,280
Maybe it's coming from the user JSON request somewhere

131
00:07:24,280 --> 00:07:27,440
else and return one of these things.

132
00:07:27,440 --> 00:07:32,360
So we get a dictionary coming in, call it request.

133
00:07:32,360 --> 00:07:37,200
It's a dictionary, but we want to get a book back out.

134
00:07:37,200 --> 00:07:44,600
So we can return a book, not a book, and it has an author.

135
00:07:51,080 --> 00:07:52,320
And a title.

136
00:08:04,560 --> 00:08:08,840
So we've eliminated all of our typos.

137
00:08:08,840 --> 00:08:11,040
And it says everything's cool.

138
00:08:11,040 --> 00:08:16,040
Now, one thing you'll notice here is that this function

139
00:08:16,040 --> 00:08:17,800
won't always run to completion.

140
00:08:17,800 --> 00:08:22,120
If I pass a dictionary in that doesn't have these arguments,

141
00:08:22,120 --> 00:08:26,240
it will raise an exception and won't return anything.

142
00:08:26,240 --> 00:08:28,120
It won't return a book, it won't return anything.

143
00:08:28,120 --> 00:08:30,240
Maybe that's fine.

144
00:08:30,240 --> 00:08:32,120
Maybe we want to do something a different way.

145
00:08:32,120 --> 00:08:35,560
We can talk about other ways to do it at the end of the talk

146
00:08:35,560 --> 00:08:36,520
if I get that far.

147
00:08:36,520 --> 00:08:42,000
But just be aware that static type checking works great

148
00:08:42,000 --> 00:08:44,120
on functions that return values.

149
00:08:44,120 --> 00:08:46,840
It doesn't work great on things that raise exceptions.

150
00:08:46,840 --> 00:08:51,320
It can't tell you that you mutated state necessarily.

151
00:08:51,320 --> 00:08:54,960
It's really about pure functions or what it handles best.

152
00:08:54,960 --> 00:08:56,320
So we've got this function.

153
00:08:56,320 --> 00:08:58,280
We can give it a dictionary, a generic dictionary.

154
00:08:58,280 --> 00:08:59,600
We have no idea what's in it.

155
00:08:59,600 --> 00:09:06,320
And it will either return a book or it will raise an exception.

156
00:09:06,320 --> 00:09:09,800
So let's say we want to be able to save this book

157
00:09:09,800 --> 00:09:10,600
into our database.

158
00:09:10,600 --> 00:09:14,520
So I have written a fake database here

159
00:09:14,520 --> 00:09:16,440
that I'm going to import.

160
00:09:16,440 --> 00:09:19,560
And it has an insert function.

161
00:09:19,560 --> 00:09:25,120
So I want a function that saves a book, takes a book to save.

162
00:09:25,120 --> 00:09:28,080
The book has to be a book, not a book.

163
00:09:28,080 --> 00:09:31,400
And it doesn't return anything.

164
00:09:31,400 --> 00:09:35,760
And then I'm going to insert the book into my database.

165
00:09:35,760 --> 00:09:37,600
I'm going to pretend like it's sort of Mongo-y,

166
00:09:37,600 --> 00:09:49,840
except I called it insert instead of insert or whatever.

167
00:09:53,840 --> 00:09:55,680
I want to save the title, and I want

168
00:09:55,680 --> 00:09:59,480
to save the author in the database.

169
00:09:59,480 --> 00:10:01,320
OK.

170
00:10:01,320 --> 00:10:02,040
Everything's good.

171
00:10:02,040 --> 00:10:02,880
Cool.

172
00:10:02,880 --> 00:10:06,920
Now authors are good and all, but the publisher

173
00:10:07,000 --> 00:10:08,360
is where the money is.

174
00:10:08,360 --> 00:10:10,360
So we really need to keep track of the publisher

175
00:10:10,360 --> 00:10:12,400
because they are the people with the money.

176
00:10:12,400 --> 00:10:17,480
So we are going to, first let's pretend like, you know what?

177
00:10:17,480 --> 00:10:19,520
We need to remember to save the publisher.

178
00:10:23,160 --> 00:10:24,240
OK.

179
00:10:24,240 --> 00:10:26,000
Oh, that's interesting.

180
00:10:26,000 --> 00:10:27,800
It's actually telling me that I can't do that

181
00:10:27,800 --> 00:10:30,160
because books don't have publishers.

182
00:10:30,160 --> 00:10:33,640
So I can come up here and I can say, OK,

183
00:10:33,640 --> 00:10:36,200
books have publishers now.

184
00:10:37,080 --> 00:10:39,920
But now it's saying, I can't create a book without a publisher

185
00:10:39,920 --> 00:10:41,840
because I said books have to have publishers.

186
00:10:41,840 --> 00:10:49,920
So now, so you can see what it's doing here

187
00:10:49,920 --> 00:10:53,400
is it's kind of guiding my refactoring.

188
00:10:53,400 --> 00:10:57,280
It's sort of telling me, you forgot about this,

189
00:10:57,280 --> 00:10:59,000
you forgot about that.

190
00:10:59,000 --> 00:11:00,800
It's keeping track of what you can and can't

191
00:11:00,800 --> 00:11:04,080
do with the values that are passing through your code.

192
00:11:04,080 --> 00:11:07,240
And it's telling you if you're doing something that will

193
00:11:07,240 --> 00:11:09,800
potentially fail at runtime.

194
00:11:09,800 --> 00:11:12,520
So that's kind of cool.

195
00:11:12,520 --> 00:11:17,880
So let's add something else.

196
00:11:17,880 --> 00:11:20,680
So some books come in series.

197
00:11:20,680 --> 00:11:22,560
Not all books come in series, but some books

198
00:11:22,560 --> 00:11:24,360
are a book in a series.

199
00:11:24,360 --> 00:11:26,560
So let's try to model that.

200
00:11:26,560 --> 00:11:28,680
So we're going to start out by just defining

201
00:11:28,680 --> 00:11:31,920
a new class, book in series.

202
00:11:31,920 --> 00:11:33,040
And it's a kind of book.

203
00:11:33,040 --> 00:11:34,640
You can inherit from it.

204
00:11:34,640 --> 00:11:37,320
It's not really inheritance, because remember, at runtime,

205
00:11:37,320 --> 00:11:39,240
these are just dictionaries.

206
00:11:39,240 --> 00:11:43,320
But it's sort of a hint to the type checker.

207
00:11:43,320 --> 00:11:46,680
By inheriting from book, it gets all of the attributes of book.

208
00:11:46,680 --> 00:11:48,360
And then it can have new attributes.

209
00:11:48,360 --> 00:11:51,520
So I can say, I also have a series.

210
00:11:51,520 --> 00:11:53,760
It's just the name of the series, the ID, whatever.

211
00:11:53,760 --> 00:11:55,840
I'm just going to store it as a string.

212
00:11:55,840 --> 00:11:58,940
OK, that is cool.

213
00:11:58,940 --> 00:12:03,260
But it's not really doing anything useful right now.

214
00:12:03,260 --> 00:12:05,060
But we can use it to add a new feature.

215
00:12:05,060 --> 00:12:07,340
Let's say our website, we want to be

216
00:12:07,340 --> 00:12:11,540
able to find books related to books.

217
00:12:11,540 --> 00:12:15,900
Recommendations engines were a really big deal 15 years ago.

218
00:12:15,900 --> 00:12:18,340
Still are, probably.

219
00:12:18,340 --> 00:12:19,920
People don't brag about them as much,

220
00:12:19,920 --> 00:12:22,080
because they all just bought them.

221
00:12:22,080 --> 00:12:26,140
So we're going to write a function called findRelated.

222
00:12:26,140 --> 00:12:28,940
And it's going to find one related book,

223
00:12:28,940 --> 00:12:32,380
or it's going to tell me that there aren't any related books.

224
00:12:32,380 --> 00:12:36,260
So it's going to take a book, it's type is book,

225
00:12:36,260 --> 00:12:41,860
and we want it to return a book.

226
00:12:41,860 --> 00:12:43,380
Makes sense, right?

227
00:12:43,380 --> 00:12:46,420
But I don't really know how to implement it yet.

228
00:12:46,420 --> 00:12:49,580
So I'm just going to pretend, I don't know.

229
00:12:49,580 --> 00:12:51,340
I'm going to figure something out.

230
00:12:51,340 --> 00:12:57,660
So how could we go about finding a related book?

231
00:12:57,660 --> 00:13:00,500
Well, if the book is in a series,

232
00:13:00,500 --> 00:13:04,500
then we can just find another book in the same series, right?

233
00:13:04,500 --> 00:13:06,980
They're presumably related.

234
00:13:06,980 --> 00:13:12,380
So we're going to write a function findInSeries.

235
00:13:12,380 --> 00:13:14,140
That's going to take a book, but that book

236
00:13:14,140 --> 00:13:19,380
has to have a series, so bookInSeries.

237
00:13:19,380 --> 00:13:24,700
And it's going to return a book in series.

238
00:13:29,380 --> 00:13:32,180
OK, so we want to somehow do this.

239
00:13:32,180 --> 00:13:33,500
I've got this database class.

240
00:13:33,500 --> 00:13:38,020
It has the select function, or not class, module.

241
00:13:38,020 --> 00:13:42,020
Has a find, I actually called it find.

242
00:13:42,020 --> 00:13:46,460
And I want to say, again, sort of pretending

243
00:13:46,460 --> 00:13:49,260
like we're writing against Mongo.

244
00:13:49,260 --> 00:13:50,720
Mongo is interesting in this case,

245
00:13:50,720 --> 00:13:52,260
because it doesn't enforce anything.

246
00:13:52,260 --> 00:13:55,020
So you really need to enforce things at the application level

247
00:13:55,020 --> 00:13:56,500
if you want anything enforced at all.

248
00:13:59,580 --> 00:14:05,140
So I'm going to find a book here.

249
00:14:05,140 --> 00:14:08,180
Got to return the thing I find.

250
00:14:08,180 --> 00:14:08,980
This is interesting.

251
00:14:08,980 --> 00:14:11,340
So the find implementation I wrote

252
00:14:11,340 --> 00:14:13,340
says, I'm not always going to find

253
00:14:13,340 --> 00:14:14,620
the thing you're asking for.

254
00:14:14,620 --> 00:14:17,060
Maybe that thing doesn't exist in the database.

255
00:14:17,060 --> 00:14:18,820
So it uses something called optional.

256
00:14:18,820 --> 00:14:21,860
So I'm going to go import optional here,

257
00:14:21,860 --> 00:14:23,060
because I'm going to need it.

258
00:14:27,340 --> 00:14:30,220
Optional.

259
00:14:30,220 --> 00:14:37,740
And then this is returning an optional bookInSeries.

260
00:14:37,740 --> 00:14:42,340
Still not right, because I'm trying to return an optional.

261
00:14:42,340 --> 00:14:43,820
If you look at the very bottom here,

262
00:14:43,820 --> 00:14:47,540
I'll tell you the whole problem.

263
00:14:47,540 --> 00:14:51,340
It got an optional dictionary of anything to anything.

264
00:14:51,340 --> 00:14:53,020
But I told it I was going to return

265
00:14:53,020 --> 00:14:54,340
an optional bookInSeries.

266
00:14:54,340 --> 00:15:00,260
So that's because I need something similar to a parsed

267
00:15:00,260 --> 00:15:04,900
book, but for a book that has a series attached to it.

268
00:15:04,900 --> 00:15:07,660
So just copy paste.

269
00:15:07,660 --> 00:15:09,820
That's a good programming practice.

270
00:15:10,060 --> 00:15:12,340
So I'm going to do this bookInSeries,

271
00:15:12,340 --> 00:15:15,460
and I want it to return a bookInSeries.

272
00:15:15,460 --> 00:15:17,100
OK, I'm probably done right.

273
00:15:17,100 --> 00:15:18,060
No, I'm not.

274
00:15:18,060 --> 00:15:20,020
OK, so we need to return.

275
00:15:20,020 --> 00:15:22,740
It says I said I would give it a bookInSeries,

276
00:15:22,740 --> 00:15:27,220
but I gave it a book, so bookWith a series.

277
00:15:27,220 --> 00:15:28,980
OK, and then I'm going to also break this up,

278
00:15:28,980 --> 00:15:32,380
because it's starting to get a little long.

279
00:15:32,380 --> 00:15:33,740
So I should be good, right?

280
00:15:33,740 --> 00:15:34,740
No.

281
00:15:34,740 --> 00:15:36,820
OK, so bookInSeries.

282
00:15:36,820 --> 00:15:37,820
No.

283
00:15:37,820 --> 00:15:40,820
OK, so bookInSeries needs a series.

284
00:15:40,820 --> 00:15:42,060
I told it it needed a series.

285
00:15:42,060 --> 00:15:43,380
It's telling me that.

286
00:15:43,380 --> 00:15:47,340
It's saying key series missing from type dict bookInSeries.

287
00:15:47,340 --> 00:15:49,620
So let's do that.

288
00:15:55,500 --> 00:15:59,300
OK, so now parsed bookInSeries is written correctly,

289
00:15:59,300 --> 00:16:01,740
but this still isn't written correctly.

290
00:16:01,740 --> 00:16:10,860
So what I'm going to do is I'm going to say, well,

291
00:16:10,860 --> 00:16:15,100
I'm going to parse bookInSeries, and that

292
00:16:15,100 --> 00:16:20,420
will turn my JSON object thing dictionary

293
00:16:20,420 --> 00:16:22,460
into a bookInSeries.

294
00:16:22,460 --> 00:16:24,420
Seems like it should be a good idea.

295
00:16:24,420 --> 00:16:28,020
Still won't let me do it, because I typed it wrong.

296
00:16:32,060 --> 00:16:34,580
Because I typed book twice.

297
00:16:34,580 --> 00:16:35,420
Book, book.

298
00:16:35,420 --> 00:16:38,140
OK, but it really wasn't supposed to let me do it anyway,

299
00:16:38,140 --> 00:16:44,180
because parsed bookInSeries expects to get a dictionary,

300
00:16:44,180 --> 00:16:46,820
but the database may not return a dictionary.

301
00:16:46,820 --> 00:16:47,940
It may just return none.

302
00:16:47,940 --> 00:16:50,740
Optional means you're either going to return this,

303
00:16:50,740 --> 00:16:52,700
or you're going to return none.

304
00:16:52,700 --> 00:16:56,660
It's a sort of a subclass of another type

305
00:16:56,660 --> 00:17:00,500
called union, which is one or the other.

306
00:17:00,540 --> 00:17:02,300
But the other is always none.

307
00:17:02,300 --> 00:17:06,620
So here, again, it's telling me, hey, you

308
00:17:06,620 --> 00:17:08,780
forgot that sometimes the thing you're looking for

309
00:17:08,780 --> 00:17:11,340
isn't in the database, and you don't get anything back.

310
00:17:11,340 --> 00:17:14,500
And if you run this, you'll get a null, like none type has no,

311
00:17:14,500 --> 00:17:15,700
blah, blah, blah.

312
00:17:15,700 --> 00:17:17,460
Very annoying error.

313
00:17:17,460 --> 00:17:20,260
So let's save this off.

314
00:17:20,260 --> 00:17:23,300
Save off what we get.

315
00:17:23,300 --> 00:17:27,140
And then we can say if row is not none,

316
00:17:27,140 --> 00:17:31,660
return parse bookInSeries row.

317
00:17:31,660 --> 00:17:34,900
Otherwise, we'll return none.

318
00:17:34,900 --> 00:17:36,140
OK, cool.

319
00:17:36,140 --> 00:17:39,300
So we can actually go to the database

320
00:17:39,300 --> 00:17:45,700
and say, hey, find a book in the same series.

321
00:17:45,700 --> 00:17:48,540
If you don't find it, return nothing.

322
00:17:48,540 --> 00:17:52,380
If you do find it, turn it into this bookInSeries thing

323
00:17:52,380 --> 00:17:54,740
and return it back to me.

324
00:17:54,740 --> 00:17:56,660
OK, that sounds cool, but we still

325
00:17:56,660 --> 00:17:58,420
haven't implemented this findRelated thing,

326
00:17:58,420 --> 00:18:01,700
so let's figure out how to implement that.

327
00:18:01,700 --> 00:18:05,380
So what we want to do is be able to say, hey, look,

328
00:18:05,380 --> 00:18:07,820
when you ask me to find a related book,

329
00:18:07,820 --> 00:18:10,380
if the book belongs to a series, I know how to do that.

330
00:18:10,380 --> 00:18:12,420
I can just find another book in the same series

331
00:18:12,420 --> 00:18:14,420
and tell you to buy that book.

332
00:18:14,420 --> 00:18:16,820
If it's not in a series, I haven't figured it out yet.

333
00:18:16,820 --> 00:18:19,180
We've got to do some machine learning thing or something,

334
00:18:19,180 --> 00:18:20,700
and I don't know, whatever.

335
00:18:20,700 --> 00:18:22,780
We'll just say nothing.

336
00:18:22,780 --> 00:18:32,220
So I am going to here say, let's try this.

337
00:18:32,220 --> 00:18:37,820
Let's just say findInSeries book.

338
00:18:37,820 --> 00:18:39,740
OK, there's a couple of things wrong with that.

339
00:18:39,740 --> 00:18:43,820
So we're trying to return the wrong thing,

340
00:18:43,820 --> 00:18:47,980
but also findInSeries wants a book

341
00:18:47,980 --> 00:18:49,820
that has a series attached to it.

342
00:18:49,820 --> 00:18:53,620
We're not sure if the series is attached to it,

343
00:18:53,620 --> 00:18:54,740
because we haven't checked.

344
00:18:54,740 --> 00:18:57,100
So let's try this.

345
00:18:57,100 --> 00:19:04,060
If series in book, let's do that.

346
00:19:07,860 --> 00:19:12,180
Otherwise, I return none, because we didn't find anything.

347
00:19:12,180 --> 00:19:16,020
OK, so the first thing is sometimes we return none,

348
00:19:16,020 --> 00:19:17,860
and we said we'll always return a book,

349
00:19:17,860 --> 00:19:20,140
but we actually know that we're not always

350
00:19:20,140 --> 00:19:22,460
going to return a book.

351
00:19:22,460 --> 00:19:24,980
Sometimes there is nothing related to the book.

352
00:19:24,980 --> 00:19:27,620
It's just like a magical unicorn book.

353
00:19:27,620 --> 00:19:34,020
It's genre defining, and nobody has

354
00:19:34,020 --> 00:19:35,820
caught on to the hot new genre.

355
00:19:35,820 --> 00:19:39,740
OK, so findrelated has to be optional.

356
00:19:39,740 --> 00:19:42,900
We can't always find something related to it.

357
00:19:42,900 --> 00:19:44,020
There's still a problem.

358
00:19:44,020 --> 00:19:45,740
The problem is that findInSeries

359
00:19:45,740 --> 00:19:51,940
wants a bookInSeries, a book with a series attached to it,

360
00:19:51,940 --> 00:19:53,180
but we only have a book.

361
00:19:53,180 --> 00:19:58,020
So this is actually one of the places that MyPy has trouble.

362
00:19:58,020 --> 00:20:03,100
We know by looking at this code that at this line here,

363
00:20:03,100 --> 00:20:07,300
the book has a series attribute, but MyPy doesn't.

364
00:20:07,300 --> 00:20:10,540
It's gotten confused.

365
00:20:10,540 --> 00:20:13,620
Fortunately, there's a way around that,

366
00:20:13,620 --> 00:20:15,220
which is cast.

367
00:20:15,220 --> 00:20:19,700
So if you've ever written any C++ code or Java code,

368
00:20:19,700 --> 00:20:24,860
you know what that does, and we have to import it.

369
00:20:27,780 --> 00:20:32,540
OK, so we've told MyPy, look, trust me, I checked.

370
00:20:32,540 --> 00:20:36,020
I'm very certain that bookInSeries

371
00:20:36,020 --> 00:20:37,540
is the right type.

372
00:20:37,540 --> 00:20:39,020
One thing we didn't have to tell it,

373
00:20:39,020 --> 00:20:43,340
though, is that a bookInSeries is a book,

374
00:20:43,340 --> 00:20:46,420
because we inherited the types from each other,

375
00:20:46,420 --> 00:20:49,340
even though here I'm saying, I want to return a book,

376
00:20:49,340 --> 00:20:51,300
and here I'm saying, I'm going to return a book

377
00:20:51,300 --> 00:20:52,860
with a series attached to it.

378
00:20:52,860 --> 00:20:55,500
MyPy knows that a book with a series attached to it

379
00:20:55,500 --> 00:20:58,700
is also a book, so it lets us do it.

380
00:20:58,700 --> 00:21:02,260
So that is that.

381
00:21:02,260 --> 00:21:05,380
And then one last thing that we need to do,

382
00:21:05,380 --> 00:21:07,620
we need to be able to save the book.

383
00:21:07,620 --> 00:21:17,500
So I want to save the book.

384
00:21:17,500 --> 00:21:23,460
I want to save the bookInSeries, and I should probably

385
00:21:23,460 --> 00:21:24,420
save the series, huh?

386
00:21:28,460 --> 00:21:29,700
Right?

387
00:21:29,700 --> 00:21:31,700
No, because I forgot to update the type.

388
00:21:34,860 --> 00:21:35,660
So there we go.

389
00:21:35,660 --> 00:21:38,780
So the type checker is kind of assisting me

390
00:21:38,780 --> 00:21:40,620
as I'm refactoring my code.

391
00:21:40,620 --> 00:21:42,540
And it's saying, hey, you forgot about this.

392
00:21:47,420 --> 00:21:49,420
You need to check for this attribute.

393
00:21:49,420 --> 00:21:51,420
This attribute doesn't exist.

394
00:21:51,420 --> 00:21:53,940
But the other thing it does is it says,

395
00:21:53,940 --> 00:21:55,860
you can trust that this attribute exists.

396
00:21:55,860 --> 00:22:03,060
If this was some whole very complicated submodule that

397
00:22:03,100 --> 00:22:06,340
dealt with books that belonged to a series

398
00:22:06,340 --> 00:22:10,020
and it needed to find an image that's the series image instead

399
00:22:10,020 --> 00:22:13,820
of the book's cover image or give you

400
00:22:13,820 --> 00:22:16,380
a listing of all the books in order,

401
00:22:16,380 --> 00:22:20,380
you can trust, no matter how many other functions you call,

402
00:22:20,380 --> 00:22:24,140
that the book has that attribute.

403
00:22:24,140 --> 00:22:29,820
And if you make a mistake, as I did many times up here,

404
00:22:29,820 --> 00:22:31,940
the checker will check it for you.

405
00:22:31,940 --> 00:22:35,660
So that is it.

406
00:22:35,660 --> 00:22:39,260
And I don't know if there's time for any questions or not.

407
00:22:39,740 --> 00:22:40,740
Thank you.

408
00:22:54,180 --> 00:22:56,180
OK, one or two questions?

409
00:22:56,180 --> 00:22:57,580
I don't have any questions.

410
00:22:57,580 --> 00:23:15,580
So I really liked your workflow where you added the field to your database query and then just fixed the problems until it stopped complaining and you were successful.

411
00:23:15,580 --> 00:23:19,580
That seems sort of backwards from normal workflow.

412
00:23:19,580 --> 00:23:22,580
Am I going to add a field? I'm typically going to go to the class.

413
00:23:23,580 --> 00:23:26,580
Is there a way, like if I add a field to the class, it's not going to complain.

414
00:23:26,580 --> 00:23:31,580
I'm going to have to go find all the things manually rather than relying on MyPy for that?

415
00:23:31,580 --> 00:23:42,580
Yeah, so if you go add a field manually, any code that doesn't access the field, MyPy doesn't know you're supposed to be accessing the field.

416
00:23:42,580 --> 00:23:45,580
This is a little hand wavy here.

417
00:23:45,580 --> 00:23:58,580
I think that what you would probably want to do is build out that interface layer between your code and your database.

418
00:23:58,580 --> 00:24:00,580
You want to unit test that, right?

419
00:24:00,580 --> 00:24:03,580
And so you're kind of doing this in conjunction with writing tests.

420
00:24:03,580 --> 00:24:12,580
So at some point you'd have a test that says, hey, look, if the user gives me a book that has a series attached to it, I better save the series attached to it in the database.

421
00:24:12,580 --> 00:24:17,580
So you're going to have to go update the database saving code to write the series out.

422
00:24:17,580 --> 00:24:21,580
At that point, that sort of drives you to go start adding the type annotation.

423
00:24:21,580 --> 00:24:27,580
And then MyPy helps you find all the places that you might have broken and go in and sort of fix them up.

424
00:24:27,580 --> 00:24:40,580
So it can't do everything for you, but it can help guide you and show you places where maybe you forgot that you did something over here or whatever.

425
00:24:40,580 --> 00:24:46,580
So that's what it's really good at is discovering those things.

426
00:24:46,580 --> 00:24:49,580
OK, I think that's time.

427
00:24:49,580 --> 00:24:51,580
All right, let's give one more round of applause.

