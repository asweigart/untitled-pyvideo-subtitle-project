1
00:00:00,000 --> 00:00:08,000
Okay, so really excited to introduce Kaitlyn, she's gonna give us a great talk, let's give her a round of applause.

2
00:00:08,000 --> 00:00:20,000
Alright, can everyone hear me? Can everyone hear me? Yeah? Okay, awesome.

3
00:00:20,000 --> 00:00:28,000
So, I'm Kaitlyn, hello. What we're gonna talk about is intentional deployment, so best practices for feature flag management.

4
00:00:28,000 --> 00:00:37,000
And I know you guys are all thinking, like, amazing title, Kaitlyn, like, great work, right? But what does that actually mean?

5
00:00:37,000 --> 00:00:43,000
Let's talk about it. So, intention. Let's go down to, like, the smallest block we can talk about.

6
00:00:43,000 --> 00:00:51,000
Doing what you meant to do. Super important for software development. So we're usually writing code with intention.

7
00:00:51,000 --> 00:00:58,000
I don't know if any of you are just, you know, banging your keyboard against your standing desk and assuming perfectly syntactical Python just shoots right out.

8
00:00:58,000 --> 00:01:09,000
No, nobody's doing that, right? We are writing code, we're testing code, we're reviewing code, we're putting a lot of effort into making sure that our code does exactly what we want it to do.

9
00:01:09,000 --> 00:01:19,000
And then somebody had this amazing idea, which was, okay, when it comes time to, you know, throw that perfectly tested, reviewed bundle of code that we wrote out into the world,

10
00:01:19,000 --> 00:01:27,000
maybe we should be being intentional about that too, right? So let's be intentional about our code when we deploy it out into the world.

11
00:01:27,000 --> 00:01:38,000
And not everybody has, you know, CI, CD, canarying systems, not everybody has very fancy or automated ways to deploy their code into the world and have a lot of control over it.

12
00:01:38,000 --> 00:01:46,000
So what is a super easy way to have a lot of control over your code once it's out in production? Feature flags, right?

13
00:01:46,000 --> 00:01:57,000
So if you don't know what a feature flag is, it's basically a light switch. You can wrap your code in a feature flag and say when the feature flag is on, we're going to do something.

14
00:01:57,000 --> 00:02:04,000
Otherwise, we're going to do something else, right? Pretty simple. So let's look at what that process actually looks like, right?

15
00:02:04,000 --> 00:02:11,000
So we wrote this amazing piece of code solves every problem ever. It's called do something and it's time for us to deploy that.

16
00:02:11,000 --> 00:02:20,000
So we wrote the code. We're going to put it behind a feature flag. We're going to say if the feature flag is on, we're going to use our amazing function.

17
00:02:20,000 --> 00:02:30,000
Otherwise, we're going to use what was already existing there. We deploy that this code just as it looks right now to production, except maybe it's more syntactical.

18
00:02:31,000 --> 00:02:42,000
But then we put it behind a feature flag and this one is going to be a release toggle, which means that we're going to slowly roll this feature out to a number of users by turning the flag on in production.

19
00:02:42,000 --> 00:02:50,000
So everything goes great. We turn the flag on. We start rolling it out. We roll it out to 100% in production.

20
00:02:50,000 --> 00:02:57,000
And the important thing to note here is that we didn't actually have to do a code change to turn the feature flag on.

21
00:02:57,000 --> 00:03:03,000
So we did this externally to do a code change. We were able to just roll out the percentage of the feature to production.

22
00:03:03,000 --> 00:03:12,000
So this lucky user has the feature on. They were able to see your feature. Maybe something went wrong. Maybe your feature didn't work as intended.

23
00:03:12,000 --> 00:03:19,000
Maybe you just want to roll it back. You turn it off and then all of a sudden they don't have access to your feature anymore, right?

24
00:03:19,000 --> 00:03:26,000
And none of this required our code deploy. Everything's working great. So you had this amazing idea. It worked out perfectly.

25
00:03:26,000 --> 00:03:30,000
You're thinking, I'm doing so great. I'm going to get promotion. Everything's working out great for me.

26
00:03:30,000 --> 00:03:36,000
The only issue is that everybody else in your company also had the same amazing idea, right?

27
00:03:36,000 --> 00:03:43,000
So when feature flag becomes feature flags, now we're starting to get into a little bit of like a hot mess situation, right?

28
00:03:43,000 --> 00:03:49,000
And then not only the volume of these feature flags is an issue, but also they're all different types.

29
00:03:49,000 --> 00:03:54,000
So they all have, you know, different purposes, different lengths that they should stay in the code base, different functions.

30
00:03:54,000 --> 00:03:59,000
And that's contributing to this mess. So your feature flag from before was a release toggle.

31
00:03:59,000 --> 00:04:04,000
It turned things on or off and, you know, slowly rolled something out into production.

32
00:04:04,000 --> 00:04:10,000
Maybe this feature flag over here is a kill switch, right? It's just intended to turn a feature off if something is going wrong in production.

33
00:04:10,000 --> 00:04:16,000
Meanwhile, this feature flag over here is an experiment. It's trying to test two different things with two different groups of people.

34
00:04:16,000 --> 00:04:21,000
But this one over here is an opt in. So if people have this feature flag on, they're getting a feature.

35
00:04:21,000 --> 00:04:26,000
And then this flag over here is an opt out. So if people have this one on, they're actually not getting the feature.

36
00:04:26,000 --> 00:04:30,000
So all of these are coming together kind of to form this mess of feature flags.

37
00:04:30,000 --> 00:04:35,000
You don't know what's going on. You don't know what any of these do. And they all look kind of the same.

38
00:04:35,000 --> 00:04:39,000
So this is a problem, right? How do we fix that?

39
00:04:39,000 --> 00:04:45,000
Or rather, a better question to ask is what's the best way to do feature flags? What's the right way to do it?

40
00:04:45,000 --> 00:04:50,000
So this is a problem that I've been trying to look into for the past couple months.

41
00:04:50,000 --> 00:04:57,000
And the reason that I'm trying to look into it is because I'm a software engineer and I work at a company called Optimizely.

42
00:04:57,000 --> 00:05:02,000
And Optimizely has a feature flagging product, right? So I work on a feature flagging product.

43
00:05:02,000 --> 00:05:05,000
I use feature flags in development. I hack on feature flags.

44
00:05:05,000 --> 00:05:12,000
And I also talk to a lot of people who use feature flags every day or who manage feature flags every day.

45
00:05:12,000 --> 00:05:15,000
So just for this talk, I spoke to a lot of people, right?

46
00:05:15,000 --> 00:05:21,000
I spoke to some back-end engineers, some front-end engineers, some SCK engineers, some people in management,

47
00:05:21,000 --> 00:05:26,000
so some PMs, a director of development, some people who are post-sales cycle talking to customers,

48
00:05:26,000 --> 00:05:31,000
so a sales engineer, a solutions architect, and some people on DevOps and quality.

49
00:05:31,000 --> 00:05:36,000
And I learned some things about some best practices that I'm going to try to share with you today,

50
00:05:36,000 --> 00:05:39,000
all trying to figure out what's the best way to do feature flags, right?

51
00:05:39,000 --> 00:05:42,000
Answering that core question that we had before.

52
00:05:42,000 --> 00:05:49,000
So we talked about a couple things. We talked about feature flags and we talked about some people.

53
00:05:49,000 --> 00:05:53,000
What goes wrong when we combine those two different things, right?

54
00:05:53,000 --> 00:05:56,000
Because that's kind of the more fun part of it.

55
00:05:56,000 --> 00:06:02,000
So let's talk about, before we talk about how to do feature flags right, let's talk about how we can do them really, really wrong.

56
00:06:02,000 --> 00:06:07,000
So let's start on like the lowest risk end of this spectrum.

57
00:06:07,000 --> 00:06:13,000
So inherently when you're putting a feature flag into your system, you're adding tech debt and confusion into your system.

58
00:06:13,000 --> 00:06:18,000
We're increasing the complexity of the code and we're making it harder for engineers to understand what's going on.

59
00:06:18,000 --> 00:06:25,000
So if we compare these two code samples, right, the one on the left has a feature flag in it and the one on the right does not.

60
00:06:25,000 --> 00:06:30,000
The one on the left is inherently much harder to understand and even impossible to understand, right?

61
00:06:30,000 --> 00:06:35,000
Because the one, I mean it's more lines of code, obviously it's a little bit harder to read,

62
00:06:35,000 --> 00:06:38,000
but you don't actually know if that feature flag is on or off.

63
00:06:38,000 --> 00:06:43,000
So literally not one person in this room can tell me what the code on the left is going to evaluate to.

64
00:06:43,000 --> 00:06:46,000
You don't know if it's going to do something or if it's going to do something else.

65
00:06:46,000 --> 00:06:50,000
Meanwhile, the code on the right, we're all pretty clear it's going to do something.

66
00:06:50,000 --> 00:06:52,000
So we're increasing the complexity of the code.

67
00:06:52,000 --> 00:06:57,000
And not only that, but let's take that confusion that we felt with those two code snippets

68
00:06:57,000 --> 00:07:02,000
and multiply it by the amount of feature flags that we have in our code base and the number of lines of code that they're gating.

69
00:07:03,000 --> 00:07:09,000
So I took like a little look into our own code base to see how many feature flags Optimizely has in our code base.

70
00:07:09,000 --> 00:07:13,000
I found over 40 instances of feature flags and they're all pretty big.

71
00:07:13,000 --> 00:07:15,000
So they're all gating like thousands of lines of code.

72
00:07:15,000 --> 00:07:19,000
We're introducing a lot of tech debt, a lot of opportunity for things to go wrong.

73
00:07:21,000 --> 00:07:24,000
The next thing to talk about is taking out a feature flag kind of sucks.

74
00:07:24,000 --> 00:07:26,000
I don't know if anybody here has tried to do it.

75
00:07:26,000 --> 00:07:31,000
This is from a real feature that I worked on that was gated by a feature flag.

76
00:07:31,000 --> 00:07:34,000
This is just the PR to take out the feature flag, right?

77
00:07:34,000 --> 00:07:41,000
Over a thousand lines of code, 100 comments on GitHub, and it stayed in the code base for over 60 days, right?

78
00:07:41,000 --> 00:07:44,000
So none of this is super great. None of this is best practice.

79
00:07:44,000 --> 00:07:48,000
But it just shows like taking out a feature flag, it can be a lot of work.

80
00:07:48,000 --> 00:07:50,000
It can be a lot of tech debt in our system.

81
00:07:52,000 --> 00:07:54,000
So now we've talked about things that were kind of more low risk, right?

82
00:07:54,000 --> 00:07:56,000
We're not directly impacting customers.

83
00:07:56,000 --> 00:07:58,000
We're just kind of pissing off a bunch of engineers.

84
00:07:58,000 --> 00:08:02,000
Now let's talk about something where we're kind of impacting customers now, right?

85
00:08:02,000 --> 00:08:04,000
We're seeing an impact on our customers.

86
00:08:04,000 --> 00:08:09,000
So we can have performance impacts on our system just by using feature flags.

87
00:08:09,000 --> 00:08:15,000
What happens when your feature is broken, your feature tanks, your feature is improperly implemented?

88
00:08:15,000 --> 00:08:19,000
These are things that you have to think about, and they're going to have performance impacts on your system.

89
00:08:19,000 --> 00:08:23,000
So we once had a feature flag that was improperly implemented.

90
00:08:23,000 --> 00:08:27,000
It added 48 seconds to one of our API endpoints.

91
00:08:28,000 --> 00:08:31,000
I don't know if anybody is super patient in this room,

92
00:08:31,000 --> 00:08:36,000
but I personally don't have the patience for 48 seconds for any answer to any question,

93
00:08:36,000 --> 00:08:38,000
much less an API response.

94
00:08:39,000 --> 00:08:45,000
Okay, so now you guys are like, okay, Caitlin, how bad can this really get?

95
00:08:45,000 --> 00:08:48,000
It doesn't sound super risky. How bad can it get?

96
00:08:48,000 --> 00:08:50,000
The answer is really bad, right?

97
00:08:50,000 --> 00:08:54,000
So we can get into a total disaster scenario pretty quickly.

98
00:08:54,000 --> 00:08:56,000
Has anybody heard of Knight Capital Group?

99
00:08:57,000 --> 00:08:58,000
I see a few nodding heads.

100
00:08:58,000 --> 00:09:03,000
Okay, so if you haven't heard, they were a financial services group.

101
00:09:05,000 --> 00:09:07,000
The keyword here is were.

102
00:09:07,000 --> 00:09:09,000
We'll go into why.

103
00:09:09,000 --> 00:09:12,000
So they were the largest trader in U.S. equities in 2012.

104
00:09:12,000 --> 00:09:16,000
They were trading $21 billion every day.

105
00:09:16,000 --> 00:09:18,000
That's a lot of money.

106
00:09:18,000 --> 00:09:25,000
At 9.30 a.m. on August 1st, 2012, they held $365 million in assets.

107
00:09:25,000 --> 00:09:28,000
Remember that time, 9.30 a.m.

108
00:09:28,000 --> 00:09:32,000
By 10.15 a.m., they were straight-up bankrupt.

109
00:09:32,000 --> 00:09:37,000
So they had a $460 million loss in 45 minutes.

110
00:09:37,000 --> 00:09:39,000
Let's talk about why.

111
00:09:40,000 --> 00:09:44,000
If you might have guessed, it has something to do with an improperly managed feature flag.

112
00:09:45,000 --> 00:09:50,000
So they had this code deployed to their servers in production that said,

113
00:09:50,000 --> 00:09:53,000
if a feature flag is on, we're going to do this old thing.

114
00:09:53,000 --> 00:09:55,000
This code was eight years old.

115
00:09:55,000 --> 00:09:58,000
It wasn't being used because the feature flag was off, right?

116
00:09:58,000 --> 00:10:03,000
Now they add some brand new functionality, uses the same feature flag.

117
00:10:03,000 --> 00:10:08,000
But now we're turning the feature flag on so that we have access to the new code.

118
00:10:08,000 --> 00:10:10,000
But the old code is still there.

119
00:10:10,000 --> 00:10:15,000
So when we turn the feature flag on, we're actually bringing back from the dead this eight-year-old code.

120
00:10:15,000 --> 00:10:18,000
What does that eight-year-old code do?

121
00:10:18,000 --> 00:10:20,000
So they're a trading company.

122
00:10:20,000 --> 00:10:23,000
The code was responsible for processing orders.

123
00:10:23,000 --> 00:10:27,000
So this old code that came back from the dead is responsible for processing orders.

124
00:10:27,000 --> 00:10:31,000
It doesn't have validation to stop processing orders.

125
00:10:31,000 --> 00:10:34,000
So that's a very important part of the puzzle here.

126
00:10:35,000 --> 00:10:43,000
And it went rampant for 45 minutes, nonstop processing orders amounting to $460 million in losses, right?

127
00:10:43,000 --> 00:10:44,000
So it's a pretty big deal.

128
00:10:44,000 --> 00:10:49,000
If you want a good visual of that, this is their stock over that day.

129
00:10:49,000 --> 00:10:54,000
Definitely illustrates the risks of an improperly managed feature flagging program, right?

130
00:10:54,000 --> 00:10:56,000
Total disaster.

131
00:10:56,000 --> 00:10:58,000
So now everyone's scared, right?

132
00:10:58,000 --> 00:11:03,000
We're all like, oh, no, we're going bankrupt 45 minutes from now by the end of this talk.

133
00:11:03,000 --> 00:11:12,000
No, actually, we're not going to, because everyone here is going to follow these practices and be really intentional about how we're deploying code using feature flags, right?

134
00:11:12,000 --> 00:11:18,000
So how can we mitigate these risks by being intentional about how we're using feature flags and how we're controlling them?

135
00:11:18,000 --> 00:11:24,000
Because if you think about it, we used a feature flag because you want it to be intentional when you wrote the code.

136
00:11:24,000 --> 00:11:30,000
So why are we not being intentional about controlling these flags after they're out in production?

137
00:11:31,000 --> 00:11:33,000
So let's talk about some best practices, right?

138
00:11:33,000 --> 00:11:37,000
These are the things that we're going to follow so that we don't have any disaster scenarios.

139
00:11:37,000 --> 00:11:40,000
We're implementing feature flags correctly.

140
00:11:40,000 --> 00:11:43,000
The two things I want to talk about are visibility and accountability.

141
00:11:43,000 --> 00:11:47,000
These are the two things that we're going to strive for in our feature flagging systems.

142
00:11:47,000 --> 00:11:50,000
So let's talk about visibility first.

143
00:11:50,000 --> 00:11:56,000
The core concept here is I basically want you to know where your flags are and what they're doing every hour of every day of every night.

144
00:11:56,000 --> 00:11:59,000
I want you to be a helicopter parent on your feature flags.

145
00:11:59,000 --> 00:12:02,000
You're going to stalk your flags, right?

146
00:12:02,000 --> 00:12:09,000
So for every single flag, you should know the state, the history, the metrics, and the expiration at any given time.

147
00:12:09,000 --> 00:12:12,000
So the state is pretty simple, right?

148
00:12:12,000 --> 00:12:14,000
We set a feature flag as like a light switch.

149
00:12:14,000 --> 00:12:16,000
I want to know if it's on or off.

150
00:12:16,000 --> 00:12:22,000
The history could be a little bit more complicated, a little bit more related to what you're actually doing with flags.

151
00:12:22,000 --> 00:12:25,000
So some questions you might want to answer.

152
00:12:25,000 --> 00:12:26,000
When did it last change?

153
00:12:26,000 --> 00:12:27,000
Why did it change?

154
00:12:27,000 --> 00:12:28,000
Who changed it?

155
00:12:28,000 --> 00:12:29,000
Why did they change it?

156
00:12:29,000 --> 00:12:32,000
And then for every single change that was made, was it turned on or off?

157
00:12:32,000 --> 00:12:34,000
Was the rollout percentage effective?

158
00:12:34,000 --> 00:12:36,000
Who was it being targeted towards?

159
00:12:36,000 --> 00:12:37,000
Did that change?

160
00:12:37,000 --> 00:12:44,000
You're going to want to know all of these things for every decision made in your feature flagging system, you know, throughout the history of the flag.

161
00:12:44,000 --> 00:12:46,000
The next thing you want to do is have some metrics.

162
00:12:46,000 --> 00:12:49,000
So the first thing you want to know is, is this flag even being used?

163
00:12:49,000 --> 00:12:50,000
Is it being evaluated?

164
00:12:50,000 --> 00:12:51,000
Are users hitting it?

165
00:12:51,000 --> 00:12:54,000
So you want to know how many times has it been evaluated?

166
00:12:54,000 --> 00:12:56,000
When was the last time it was evaluated?

167
00:12:56,000 --> 00:13:00,000
The next thing you want to know is, you know, what metrics are tracking this flag's success or failure?

168
00:13:00,000 --> 00:13:01,000
Is it properly implemented?

169
00:13:01,000 --> 00:13:02,000
Is it just tanking?

170
00:13:02,000 --> 00:13:05,000
Like, what metrics do we have around the flag?

171
00:13:05,000 --> 00:13:07,000
And then the last thing you want to know is the expiration date, right?

172
00:13:07,000 --> 00:13:12,000
So we said before that you're adding technical debt to your system when you add feature flags in.

173
00:13:12,000 --> 00:13:20,000
So it's really important to know exactly when is this technical debt coming out of the system and who is responsible for taking it out.

174
00:13:20,000 --> 00:13:23,000
So we talked about things that, you know, you're going to want to know for every single flag.

175
00:13:23,000 --> 00:13:25,000
Now we want to have a bird's eye view of your entire system.

176
00:13:25,000 --> 00:13:29,000
So for your entire feature flagging system, how many flags are in the code base?

177
00:13:29,000 --> 00:13:31,000
Where are they in the code?

178
00:13:31,000 --> 00:13:33,000
What percentage of your flags are rolled out to X percent, right?

179
00:13:33,000 --> 00:13:37,000
So on any given day, how many of your flags are rolled out to 100 percent?

180
00:13:37,000 --> 00:13:39,000
How many of your flags are rolled out to 0 percent?

181
00:13:39,000 --> 00:13:40,000
They're not being used.

182
00:13:40,000 --> 00:13:42,000
And then also which flags are expired?

183
00:13:42,000 --> 00:13:44,000
Which flags are expiring in X days?

184
00:13:44,000 --> 00:13:47,000
So which flags are going to expire in 30 days, in 60 days, in 90 days?

185
00:13:47,000 --> 00:13:52,000
These are really important questions to know the answer to for planning.

186
00:13:52,000 --> 00:13:55,000
The next thing you're going to want to think about is collaboration, right?

187
00:13:55,000 --> 00:14:03,000
So other people might be using your flag, not only in like the disastrous situation which we saw with Knight Capital Group, but also in, you know, other ways.

188
00:14:03,000 --> 00:14:11,000
A feature flag is really cool because it can turn what used to be a code deploy, an engineering decision, getting the code into production, into a business decision.

189
00:14:11,000 --> 00:14:17,000
So now, you know, you can deploy the code and then separately you can turn the feature flag on in production.

190
00:14:18,000 --> 00:14:23,000
But the important thing to note here is that you might not be the one flipping the switch on your feature.

191
00:14:23,000 --> 00:14:25,000
So who else needs to know about these things, right?

192
00:14:25,000 --> 00:14:27,000
Or what else needs to be gated behind this flag?

193
00:14:27,000 --> 00:14:28,000
It might not only be code.

194
00:14:28,000 --> 00:14:29,000
You might be gating docs.

195
00:14:29,000 --> 00:14:31,000
You might be gating marketing material.

196
00:14:31,000 --> 00:14:34,000
There's other teams that might be infected by this flag.

197
00:14:34,000 --> 00:14:37,000
The other thing to know is who's controlling the flag, right?

198
00:14:37,000 --> 00:14:38,000
So is it a developer?

199
00:14:38,000 --> 00:14:39,000
Is it a release team?

200
00:14:39,000 --> 00:14:40,000
Is it a PM?

201
00:14:40,000 --> 00:14:43,000
And then the last thing is who needs to be notified of this change, right?

202
00:14:43,000 --> 00:14:45,000
So we said you're affecting other teams.

203
00:14:45,000 --> 00:14:47,000
You might be affecting other departments with your flag.

204
00:14:47,000 --> 00:14:48,000
Who needs to know about it?

205
00:14:48,000 --> 00:14:54,000
And the important thing is that we're going to know the answer to all of these questions before we put the feature flag into our code base.

206
00:14:54,000 --> 00:14:57,000
That's really the key part of being intentional.

207
00:14:57,000 --> 00:15:00,000
None of this has to be particularly high tech.

208
00:15:00,000 --> 00:15:06,000
You know, we have a very low tech stack here where to find your feature flags, you're just searching for them in the code.

209
00:15:06,000 --> 00:15:09,000
And then also to track your flags, have a shared spreadsheet.

210
00:15:09,000 --> 00:15:10,000
Really easy.

211
00:15:10,000 --> 00:15:15,000
Note down every time somebody has a change, have a whiteboard in the middle of the room if you're a smaller team.

212
00:15:15,000 --> 00:15:19,000
The important part is that you're just tracking these and you're asking these questions.

213
00:15:19,000 --> 00:15:25,000
So here, because I work on a feature flagging product, I can have like a little bit more of an automated higher tech solution.

214
00:15:25,000 --> 00:15:29,000
But the important thing to note is that we're answering the same key questions.

215
00:15:29,000 --> 00:15:30,000
Where is the flag?

216
00:15:30,000 --> 00:15:33,000
You know, up here you can find it in GitHub.

217
00:15:33,000 --> 00:15:34,000
Is it being used?

218
00:15:35,000 --> 00:15:41,000
This one was last accessed five hours ago and ten times overall because kind of a small sample.

219
00:15:41,000 --> 00:15:43,000
And when does it expire?

220
00:15:43,000 --> 00:15:47,000
Answering the same questions, we're being thoughtful about these things.

221
00:15:47,000 --> 00:15:49,000
So now we follow the best practices.

222
00:15:49,000 --> 00:15:51,000
We have a very visible system.

223
00:15:51,000 --> 00:15:54,000
Doesn't really mean anything unless we do anything about it, right?

224
00:15:54,000 --> 00:15:59,000
So there's two parts of intention, which is I'm going to plan what I'm going to do and then I'm actually going to do it.

225
00:15:59,000 --> 00:16:02,000
I want you guys to be accountable for your feature flags, right?

226
00:16:02,000 --> 00:16:07,000
So for every single flag, we want to make sure that it's tracked in a shared place, right?

227
00:16:07,000 --> 00:16:11,000
So everybody who has a stake in this flag or the outcome of this flag has access to it.

228
00:16:11,000 --> 00:16:17,000
And we want to make sure that we have alerting set up on our monitoring and our metrics so that we're not just, you know, screaming into a void.

229
00:16:17,000 --> 00:16:18,000
Nobody cares.

230
00:16:18,000 --> 00:16:20,000
Otherwise, there's no point in having monitoring.

231
00:16:23,000 --> 00:16:28,000
The other key piece of accountability is basically a lot of procedural change, right?

232
00:16:28,000 --> 00:16:34,000
So we want to decide as a team or as a company who owns managing your feature flags as a whole.

233
00:16:34,000 --> 00:16:36,000
Somebody needs to be in charge of this.

234
00:16:36,000 --> 00:16:37,000
Somebody needs to be driving this.

235
00:16:37,000 --> 00:16:38,000
So is it a release team?

236
00:16:38,000 --> 00:16:39,000
Is it a PM?

237
00:16:39,000 --> 00:16:40,000
Is it an engineering manager?

238
00:16:40,000 --> 00:16:44,000
Making sure you have this visibility and accountability for every single flag.

239
00:16:44,000 --> 00:16:48,000
The next thing you want to think about is maybe you want to have a WIP limit.

240
00:16:48,000 --> 00:16:50,000
So this is a work in progress limit.

241
00:16:50,000 --> 00:16:56,000
It means that you're limiting the number of features or feature flags in the code base.

242
00:16:56,000 --> 00:17:00,000
So personally, my team has a WIP limit of two features in flight at any given time.

243
00:17:00,000 --> 00:17:02,000
Can't go over that.

244
00:17:02,000 --> 00:17:10,000
So because we tend to use a little bit larger feature flags, we tend to only have two feature flags in the code base at any given time.

245
00:17:10,000 --> 00:17:15,000
The important thing to note here is that we're considering feature flags to be work in flight, right?

246
00:17:15,000 --> 00:17:16,000
So it comes in.

247
00:17:16,000 --> 00:17:21,000
It counts into the discussion of how much work in flight do you want to have at any given time?

248
00:17:21,000 --> 00:17:25,000
And the important thing here that you might want to do this for is that, you know,

249
00:17:25,000 --> 00:17:33,000
the people feeling the consequences of tech debt or of leaving these feature flags in the code base are not always the people prioritizing the work to take them out, right?

250
00:17:33,000 --> 00:17:38,000
So if you have, you know, a WIP limit or something limiting the number of feature flags in your code base,

251
00:17:38,000 --> 00:17:44,000
they're going to be incentivized to take old features out before they put new features in.

252
00:17:44,000 --> 00:17:51,000
Another thing that you could think about as a team, as a company, is what are the list of must-dos before somebody implements a feature, right?

253
00:17:51,000 --> 00:17:55,000
Super easy to just have a feature flag checklist before anybody puts a feature flag in.

254
00:17:55,000 --> 00:17:58,000
We have to be thinking about a couple of things.

255
00:17:58,000 --> 00:18:03,000
So some of the questions that you might want to ask, what tracking do they need to have around the feature?

256
00:18:03,000 --> 00:18:05,000
You know, what metrics do they have set up?

257
00:18:05,000 --> 00:18:07,000
What's the procedure they need to follow?

258
00:18:07,000 --> 00:18:10,000
If you're using a shared spreadsheet, what do they need to enter?

259
00:18:10,000 --> 00:18:11,000
What do they need to be tracking?

260
00:18:11,000 --> 00:18:14,000
What kind of changes should not be behind a feature flag?

261
00:18:14,000 --> 00:18:18,000
So there is definitely a lot of changes that shouldn't be behind a feature flag, right?

262
00:18:18,000 --> 00:18:22,000
If you have destructive database changes or things that can't be rolled back or turned off,

263
00:18:22,000 --> 00:18:30,000
those should not be behind a feature flag and everyone should be checking that they're not making those kinds of changes before they put it behind a feature flag.

264
00:18:30,000 --> 00:18:32,000
And then the last thing you want to talk about is the lifespan.

265
00:18:32,000 --> 00:18:37,000
So for any given type of feature flag, how long can it stay in your code base, right?

266
00:18:37,000 --> 00:18:42,000
So for a short-lived flag, maybe for your company that means a day, maybe it means a week, maybe it means a month.

267
00:18:42,000 --> 00:18:45,000
Do you want to have long-lived flags or do you not?

268
00:18:45,000 --> 00:18:51,000
The important thing here is that you want to know how long does your system take to get meaningful results, right?

269
00:18:51,000 --> 00:18:57,000
So maybe if you're getting a lot of traffic to the feature, you can make these decisions based on an hour, based on a day.

270
00:18:57,000 --> 00:18:59,000
Maybe if you're not getting a lot of traffic, it takes you longer.

271
00:18:59,000 --> 00:19:04,000
The important thing is to think about, you know, setting up limits for these things.

272
00:19:04,000 --> 00:19:10,000
And then at least if somebody has a really good reason for why they can't, you know, follow this limit, they've thought about it.

273
00:19:10,000 --> 00:19:19,000
They've had to give you a reason for why they're going against the rules instead of just the default being I'm going to do whatever I want.

274
00:19:19,000 --> 00:19:22,000
Okay. So we've talked about kind of ways to be accountable.

275
00:19:22,000 --> 00:19:25,000
Now let's talk about expired features.

276
00:19:25,000 --> 00:19:30,000
So we need to think about features as expired features as part of the work of the feature.

277
00:19:30,000 --> 00:19:35,000
So the feature is not completed until the feature flag has been taken out.

278
00:19:35,000 --> 00:19:41,000
And that's going to help us retire flags which are expired or unused, which are the flags that we want to go.

279
00:19:41,000 --> 00:19:44,000
How do I make sure that expired features are removed, right?

280
00:19:44,000 --> 00:19:49,000
So there's a couple really easy ways that you can make sure that you're getting expired features out of your code base.

281
00:19:49,000 --> 00:19:57,000
You can have a feature stand up every week where, you know, this is where visibility comes into play because you can say pretty easily if you have a very visible system,

282
00:19:57,000 --> 00:20:01,000
all of these flags are either at 100% or at 0%, they need to come out.

283
00:20:01,000 --> 00:20:04,000
They've expired in next days. They are expiring in next days.

284
00:20:04,000 --> 00:20:07,000
Here's the ones that need to come out and plan for that.

285
00:20:07,000 --> 00:20:11,000
The other things you can do is you can ticket the flag removal when the flag is created.

286
00:20:11,000 --> 00:20:19,000
So if you're using, you know, JIRA or something like that, you can make the ticket to take the flag out as soon as you, you know, JIRA out the feature.

287
00:20:19,000 --> 00:20:24,000
You can also, even the most extreme version of this, is write the PR to take the flag out as soon as you put it in.

288
00:20:24,000 --> 00:20:31,000
You're going to have the most context right then, and if it's a pretty simple flag, you can write the PR to take it out right then.

289
00:20:31,000 --> 00:20:36,000
And then an important thing to think about here is that these are procedural changes.

290
00:20:36,000 --> 00:20:41,000
So like any procedural change at your company, it's really important that you do a couple things.

291
00:20:41,000 --> 00:20:46,000
You need to ensure review of the process that you put in place with all of the people who are stakeholders here.

292
00:20:46,000 --> 00:20:50,000
You need to gain buy-in from all the people that are stakeholders in this process,

293
00:20:50,000 --> 00:20:57,000
and you need to communicate these standards widely once you decide upon them as a team or as a company.

294
00:20:57,000 --> 00:21:00,000
A couple other just kind of rules of thumb.

295
00:21:00,000 --> 00:21:06,000
They might not work if, you know, you have a very specific use case or depending on what you're using flags for,

296
00:21:06,000 --> 00:21:13,000
but it's good to keep flags as small as possible, and as small as possible I mean the code directly gated behind the flag.

297
00:21:13,000 --> 00:21:18,000
Important to keep that as small as possible if you can because it'll make removal a lot easier.

298
00:21:18,000 --> 00:21:21,000
Keep flags, try to keep flags as short-lived as possible.

299
00:21:21,000 --> 00:21:24,000
So as soon as they can come out, they should because they're added tech debt.

300
00:21:24,000 --> 00:21:28,000
They're going to be harder to take out down the line and as top level as possible.

301
00:21:28,000 --> 00:21:33,000
So what I mean by that is bubbling up feature flags to the highest point they can live in in the code.

302
00:21:33,000 --> 00:21:35,000
If you just think about, you know, it's an if-then statement.

303
00:21:35,000 --> 00:21:37,000
It's kind of a branching structure.

304
00:21:37,000 --> 00:21:41,000
If you have one branch up here as opposed to a million little baby branches down here,

305
00:21:41,000 --> 00:21:48,000
it's going to be testing a lot easier if you only have, you know, two cases to test rather than a bunch of little ones.

306
00:21:48,000 --> 00:21:50,000
Okay.

307
00:21:50,000 --> 00:21:54,000
So in summary, we are all going to manage our feature flags.

308
00:21:54,000 --> 00:22:00,000
Otherwise, some bad stuff can go down, and we're going to do that by stocking them 24-7,

309
00:22:00,000 --> 00:22:04,000
and we're going to have monitoring and alerting on our flags, keep ourselves accountable,

310
00:22:04,000 --> 00:22:08,000
and retiring our flags once they're, you know, time to go.

311
00:22:08,000 --> 00:22:14,000
So with that in mind, hopefully we are all going to go from this hot mess of a feature flag situation

312
00:22:14,000 --> 00:22:20,000
to our beautifully organized feature flags on their flagpoles ready in their feature flagging system.

313
00:22:20,000 --> 00:22:22,000
Thank you.

