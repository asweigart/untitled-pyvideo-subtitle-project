1
00:00:00,000 --> 00:00:08,000
We got our next talk up. Piper Thunstrom is going to tell us about how to make games with Python. Let's give a round of applause for Piper.

2
00:00:14,000 --> 00:00:20,000
Alright, so specifically we're going to talk about making games with PPB, which most of you probably haven't heard of yet.

3
00:00:21,000 --> 00:00:28,000
So I'm Piper Thunstrom. I'm a software engineer at a company called GLG. I mostly do web development and database programming.

4
00:00:28,000 --> 00:00:33,000
I'm also a community organizer in the New York City Python area, Python community.

5
00:00:34,000 --> 00:00:38,000
And I'm also the author of PPB, which is, again, why you probably haven't heard of it yet.

6
00:00:39,000 --> 00:00:44,000
If you want to follow me or tweet about this, at PAThunstrom and at PursuedPiper.

7
00:00:46,000 --> 00:00:53,000
So, what is PPB? Oh, this did not work on this screen.

8
00:00:53,000 --> 00:01:00,000
Okay, so PPB. We are an open source, idiomatic Python, event-driven, education-focused game library.

9
00:01:01,000 --> 00:01:06,000
Lots and lots of words to apply to one resource. We're going to kind of take them in order.

10
00:01:07,000 --> 00:01:10,000
I don't think I have to explain open source to this room, but I do to others, so that's why it's there.

11
00:01:11,000 --> 00:01:16,000
When I say idiomatic Python, what I mean is the code you write with PPB looks and feels like Python.

12
00:01:16,000 --> 00:01:26,000
By event-driven, I mean that you write your code as responses to events and not as a game loop like you're probably used to if you've done game programming.

13
00:01:27,000 --> 00:01:36,000
And by education-focused, I mean that primarily when I need to make a decision on what of three different engineering options do we need to do, I go and talk to a bunch of teachers.

14
00:01:37,000 --> 00:01:46,000
So, that's what PPB is. This is the team. I'm Piper at the top. I'm PAThunstrom on GitHub.

15
00:01:47,000 --> 00:01:52,000
I am the API author and basically the manager of the project. Jamie is my co-maintainer.

16
00:01:53,000 --> 00:02:01,000
Jamie is actually the one who wrote the event system and has done a lot of great work and is currently trying to get an animation framework over the line.

17
00:02:02,000 --> 00:02:10,000
And Nico has done a lot of work on making our numbers stuff all work better. Clearly not the person to talk about it.

18
00:02:13,000 --> 00:02:20,000
So, let's... Wow, that is the wrong file to open. This is why you don't like code, folks.

19
00:02:21,000 --> 00:02:30,000
Alright, so let's actually talk about making games. When I'm talking about this talk, I'm not gonna really cover these basics in a lot of detail.

20
00:02:31,000 --> 00:02:39,000
Just a very quick primer. If you want more, I've given a talk on making games the actual concepts. You can find them on YouTube under my name.

21
00:02:42,000 --> 00:02:48,000
So, all games at their core have an event loop. We actually call this a couple of different things depending on who's talking about it.

22
00:02:49,000 --> 00:02:55,000
Sometimes they're called render loops, sometimes they're game loops, sometimes they're simulation loops. They all kind of tell you what's going on under the hood.

23
00:02:55,000 --> 00:03:04,000
Under the hood, we want to respond to events, update the simulation, and then render. Usually in that order, but it doesn't actually matter that much.

24
00:03:07,000 --> 00:03:20,000
So, in PPB, though, you don't have to write this loop anymore. We make it as easy as possible to get your first loop going.

25
00:03:25,000 --> 00:03:35,000
So, there we go. We have a window open. Two lines of code. If anyone's ever played with the other libraries, this is a little less than you have to do there.

26
00:03:36,000 --> 00:03:45,000
So, this is just, again, the basic. Everything needs a loop. Here's how we handle it. But let's talk about events.

27
00:03:46,000 --> 00:03:52,000
Events are the things that a lot of people have a little trouble wrapping their minds around. So, what are events anyway?

28
00:03:53,000 --> 00:04:00,000
Events are things like mouse motion, the window trying to close, the update event in our case.

29
00:04:04,000 --> 00:04:09,000
In general, we also can use this for message passing so that different objects can talk to each other.

30
00:04:10,000 --> 00:04:19,000
In PPB, we have built the API so that it's fairly simple to write new event handlers.

31
00:04:23,000 --> 00:04:26,000
So, here, we're going to respond to key presses.

32
00:04:39,000 --> 00:04:56,000
So, we have a bunch of constants defining all of the various keys, which is what you saw pop up there.

33
00:04:57,000 --> 00:05:02,000
And when I press the space bar, we're going to just increase the size of the object.

34
00:05:02,000 --> 00:05:12,000
So, we do this. Every time I press space, it grows. So, that's how simple it is to actually write your event handlers.

35
00:05:13,000 --> 00:05:18,000
We have these for mouse motion. We have them for there's an update event and a couple of other features.

36
00:05:19,000 --> 00:05:25,000
This is basically where all of your actual game logic is going to live, is inside your game objects, inside event handlers.

37
00:05:25,000 --> 00:05:33,000
So, let's talk about rendering. I'm sure you've noticed that we already do a lot of rendering for you, but we're going to demo some other stuff instead.

38
00:05:34,000 --> 00:05:45,000
So, when we're talking graphics, as far as PPB is concerned, we do raster graphics. It's a 2D context. We're using actual pixel arrays under the hood.

39
00:05:46,000 --> 00:05:48,000
But mostly, you don't actually have to think about this.

40
00:05:48,000 --> 00:05:52,000
We would rather you worry about the metadata and not the actual process of rendering.

41
00:05:53,000 --> 00:06:02,000
So, as you've seen a couple of times already, we get a square for free. It doesn't take much effort. That's just the base sprite there.

42
00:06:03,000 --> 00:06:07,000
But, you can also do things like add images.

43
00:06:11,000 --> 00:06:13,000
So, we'll do this.

44
00:06:13,000 --> 00:06:17,000
All right. So, we run this. Oh, wait. Let me uncomment.

45
00:06:18,000 --> 00:06:20,000
Here we go.

46
00:06:21,000 --> 00:06:24,000
All right. So, now we have a ship on screen. That's all it took.

47
00:06:25,000 --> 00:06:28,000
Other features you can do is add a new image.

48
00:06:29,000 --> 00:06:31,000
So, you can add a new image.

49
00:06:32,000 --> 00:06:34,000
You can add a new image.

50
00:06:35,000 --> 00:06:37,000
You can add a new image.

51
00:06:38,000 --> 00:06:40,000
You can add a new image.

52
00:06:41,000 --> 00:06:43,000
You can add a new image.

53
00:06:44,000 --> 00:06:46,000
You can add a new image.

54
00:06:47,000 --> 00:06:52,000
Other features you can do just using metadata in the same way.

55
00:07:00,000 --> 00:07:03,000
You've kind of already seen this, but we'll do it again.

56
00:07:06,000 --> 00:07:09,000
And you can also manipulate the rotation.

57
00:07:16,000 --> 00:07:20,000
And so, now we have a bigger one and a reversed one.

58
00:07:23,000 --> 00:07:27,000
And then additionally, we've made all of these features compositable.

59
00:07:28,000 --> 00:07:32,000
So, we can do all the things.

60
00:07:32,000 --> 00:07:34,000
With basically no extra code.

61
00:07:39,000 --> 00:07:41,000
So, now we have a bigger one.

62
00:07:42,000 --> 00:07:46,000
And then additionally, we've made all of these features compositable.

63
00:07:47,000 --> 00:07:51,000
So, we can do all the things.

64
00:08:02,000 --> 00:08:04,000
Rendering is nice and easy.

65
00:08:05,000 --> 00:08:08,000
You can manipulate all of those values as much as you want.

66
00:08:09,000 --> 00:08:13,000
So, let's move on to the actual architecture of how PPB works.

67
00:08:13,000 --> 00:08:15,000
And then we'll get into the actual fun stuff.

68
00:08:16,000 --> 00:08:20,000
So, we actually start at the top of our tree.

69
00:08:21,000 --> 00:08:25,000
This line of code is ugly and there's a reason we hide it behind PPB run.

70
00:08:26,000 --> 00:08:29,000
So, this is basically how you would set up your own custom engine.

71
00:08:30,000 --> 00:08:34,000
Normally, inside the context manager, we would call gameengine.run.

72
00:08:35,000 --> 00:08:38,000
But I'm actually trying to show you some things, so we're not doing that here.

73
00:08:39,000 --> 00:08:43,000
Inside the engine, though, there is a set of subsystems.

74
00:08:48,000 --> 00:08:50,000
Subsystems are actually...

75
00:08:51,000 --> 00:08:53,000
Oh, here we go.

76
00:08:54,000 --> 00:09:01,000
So, these subsystems are actually how we manage adding new features to the game engine.

77
00:09:02,000 --> 00:09:06,000
Primarily, they were designed this way so that it made it really easy for the developers to do this.

78
00:09:06,000 --> 00:09:12,000
But it also adds an API so that if you want to add manipulations of how the engine works, you can add them to this list.

79
00:09:12,000 --> 00:09:16,000
And then once we start the engine, because it kind of does some lazy work...

80
00:09:23,000 --> 00:09:28,000
Once you start it, you also have a... Whoa, that is the wrong file.

81
00:09:30,000 --> 00:09:32,000
Here we go.

82
00:09:32,000 --> 00:09:36,000
All right, so if you look down at the bottom here, there is a list of scenes.

83
00:09:36,000 --> 00:09:38,000
Right now, there's only one scene.

84
00:09:38,000 --> 00:09:40,000
Because we haven't done anything with them.

85
00:09:40,000 --> 00:09:46,000
We keep them in a list, but we're using it as a stack, so you can push, pop, and replace.

86
00:09:48,000 --> 00:09:57,000
And to assist with that, we actually have this gameengine.current scene, which gives us whatever's on top of the stack.

87
00:09:57,000 --> 00:09:59,000
Nice and easy.

88
00:09:59,000 --> 00:10:06,000
The neat thing about our scenes, though, is they're actually containers, so they're iterable.

89
00:10:08,000 --> 00:10:11,000
Oh. Right.

90
00:10:13,000 --> 00:10:15,000
Can't remove that.

91
00:10:17,000 --> 00:10:21,000
And then we also have a list of scenes.

92
00:10:21,000 --> 00:10:24,000
Oh. Right.

93
00:10:26,000 --> 00:10:28,000
Can't remove that.

94
00:10:29,000 --> 00:10:36,000
So we do this, and as you can see, we now have an object that has two different objects inside of it.

95
00:10:37,000 --> 00:10:40,000
This is just a list, because it's nicer to print.

96
00:10:42,000 --> 00:10:48,000
So the engine uses events to manage them, and I'll cover that in detail, since that's one of the advanced features.

97
00:10:48,000 --> 00:10:56,000
And then sprites, which are the things inside, are basically just data bags, as I kind of just demonstrated, that you can attach event handlers to.

98
00:10:56,000 --> 00:11:05,000
In this file, I've done that up here, just so that the sprite actually responds to the update event in a moment.

99
00:11:08,000 --> 00:11:12,000
Alright. So the engine is actually also how we publish events.

100
00:11:12,000 --> 00:11:22,000
Under the hood, you can send up a signal. So if you saw that signal function in the parameters a bit ago, it's just a function on the engine.

101
00:11:24,000 --> 00:11:28,000
We can print the events, just to show what's there.

102
00:11:30,000 --> 00:11:33,000
Alright, so there is a deque underneath.

103
00:11:34,000 --> 00:11:38,000
Deque, whatever. I can never remember how to pronounce it.

104
00:11:38,000 --> 00:11:41,000
And then if we call publish, it should...

105
00:11:42,000 --> 00:11:45,000
It did not go through? I have to figure that out later.

106
00:11:48,000 --> 00:11:53,000
In general, though, when you do ge.publish, every object is actually going to receive that event.

107
00:11:54,000 --> 00:11:58,000
And it works when you're actually running the engine. I don't know why it's not working here.

108
00:11:58,000 --> 00:12:06,000
Alright, so that is... That's the boring stuff. This is the background information you need to be able to understand what's going on.

109
00:12:06,000 --> 00:12:10,000
So let's actually talk about making the actual games themselves.

110
00:12:11,000 --> 00:12:13,000
Let's close all this down.

111
00:12:19,000 --> 00:12:25,000
So, we've talked about system events. I kind of covered the kinds of things that are in them.

112
00:12:25,000 --> 00:12:29,000
But, as I mentioned, what about manipulating them ourselves?

113
00:12:29,000 --> 00:12:39,000
That signal function we have here, what we're going to do is have this ship, which currently does this.

114
00:12:39,000 --> 00:12:41,000
Nope, wrong file.

115
00:12:47,000 --> 00:12:49,000
So, this is what you've got so far.

116
00:12:56,000 --> 00:13:05,000
What we're going to actually do is make it so that one of those two ships actually sends another update event every time.

117
00:13:17,000 --> 00:13:19,000
Signal.

118
00:13:19,000 --> 00:13:29,000
So, here's that actual update event. And we're going to use the existing ones, time delta.

119
00:13:35,000 --> 00:13:39,000
Before I actually blow this up, because I have done it multiple times already.

120
00:13:50,000 --> 00:13:59,000
Alright, so if we run this, you saw about how fast it was going. They should go about twice as fast.

121
00:14:02,000 --> 00:14:07,000
So that's one way you can do it. You can signal any of the existing events by doing this.

122
00:14:07,000 --> 00:14:15,000
This is less useful for actual making games, but it's good if you need to do things like faking player input.

123
00:14:16,000 --> 00:14:21,000
So, you can make your own classes just using data classes, actually.

124
00:14:35,000 --> 00:14:43,000
So, here we have a data class on time dilation. Basically, the goal here is we're going to, instead of responding to update events,

125
00:14:43,000 --> 00:14:49,000
we're going to have the time dilation ship change how often it responds. So, we put our code here.

126
00:14:55,000 --> 00:15:07,000
Self.accumulator plus equals self.speed, while it's greater than or equal to one.

127
00:15:07,000 --> 00:15:17,000
So, we can just raise our event. And this needed a time delta as well, so we want to keep it the same.

128
00:15:19,000 --> 00:15:23,000
And then down here, you have on time dilation is where we actually do the movement.

129
00:15:25,000 --> 00:15:31,000
So, if I run this now, it'll break. Wonderful.

130
00:15:37,000 --> 00:15:45,000
And I think it's this that is causing the weird interaction.

131
00:15:47,000 --> 00:15:51,000
So, this should, it's not doing the thing.

132
00:15:54,000 --> 00:15:56,000
This is why you don't live code.

133
00:15:58,000 --> 00:16:04,000
Oh, yes, I did this multiple times while practicing and reminding myself not to do it.

134
00:16:08,000 --> 00:16:12,000
There we go. Now it should just work.

135
00:16:13,000 --> 00:16:19,000
So, right now, it's actually moving the same speed, because down here where we've instantiated it, we've made speed one.

136
00:16:20,000 --> 00:16:23,000
But let's make speed, oh, 13, it would go very fast.

137
00:16:24,000 --> 00:16:30,000
And there, we've made it faster. It's running on the same update speed as everything else, but it's not changing its speed.

138
00:16:30,000 --> 00:16:32,000
It's actually updating more times.

139
00:16:33,000 --> 00:16:37,000
So, the other cool thing you can actually do is extending events.

140
00:16:41,000 --> 00:16:45,000
You could do, let's see, right, I have a leader.

141
00:16:47,000 --> 00:16:51,000
I need to comment this out, because I don't want two engines running at once.

142
00:16:52,000 --> 00:16:54,000
Mostly they won't run at once.

143
00:17:03,000 --> 00:17:05,000
So, we write a little function.

144
00:17:10,000 --> 00:17:14,000
Up the file, we have a global called leader that gets set during the setup.

145
00:17:18,000 --> 00:17:20,000
And we call ge.run.

146
00:17:21,000 --> 00:17:25,000
And up here, we're going to just print.

147
00:17:26,000 --> 00:17:28,000
I missed a step here.

148
00:17:29,000 --> 00:17:31,000
So, here we go.

149
00:17:33,000 --> 00:17:35,000
We have to ge.register.

150
00:17:37,000 --> 00:17:42,000
We are going to respond to the update event, which is ppb.events.

151
00:17:47,000 --> 00:17:49,000
And then our callback is add leader.

152
00:17:50,000 --> 00:17:52,000
And then our callback is add leader.

153
00:17:54,000 --> 00:17:56,000
So now,

154
00:17:59,000 --> 00:18:01,000
despite it not being defined normally,

155
00:18:02,000 --> 00:18:07,000
you'll see that every time there's an update event, we've been getting output of what's on that leader.

156
00:18:07,000 --> 00:18:15,000
So, this is one way you can make objects available to other things is by registering one of these callbacks to add a new object to each event that you care about.

157
00:18:16,000 --> 00:18:18,000
So, that's events.

158
00:18:19,000 --> 00:18:22,000
What about scenes? I mentioned changing scenes.

159
00:18:22,000 --> 00:18:25,000
This is really just how you manage the state machine that is the stack.

160
00:18:26,000 --> 00:18:28,000
So, in this example, we have a splash screen.

161
00:18:30,000 --> 00:18:34,000
I am going to warn, this is going to flash a little bit for anyone who might have problems with that.

162
00:18:37,000 --> 00:18:39,000
So, to start with,

163
00:18:40,000 --> 00:18:42,000
we just signal

164
00:18:46,000 --> 00:18:52,000
a start scene with our new game screen.

165
00:18:59,000 --> 00:19:01,000
And this fun bug.

166
00:19:03,000 --> 00:19:08,000
This isn't actually going to do anything, but it will not try to instantiate the scene without it.

167
00:19:09,000 --> 00:19:11,000
We're working on that.

168
00:19:15,000 --> 00:19:17,000
All right.

169
00:19:17,000 --> 00:19:19,000
So, if we run this now,

170
00:19:20,000 --> 00:19:23,000
we should have, it will go from one to another.

171
00:19:25,000 --> 00:19:27,000
So, that was the start scene.

172
00:19:27,000 --> 00:19:29,000
In the middle of that,

173
00:19:29,000 --> 00:19:35,000
what you're going to get is the splash screen here will actually receive a onPause event.

174
00:19:46,000 --> 00:19:48,000
Just to demo this.

175
00:19:51,000 --> 00:19:53,000
So, we run this.

176
00:19:55,000 --> 00:19:59,000
And so, when the color changed, the splash was paused.

177
00:20:01,000 --> 00:20:05,000
Every scene when it gets started actually receives an onSceneStarted,

178
00:20:05,000 --> 00:20:09,000
which you'll see the function of in just a moment.

179
00:20:09,000 --> 00:20:13,000
So, when we're done with the game screen, we're actually going to move to this game over screen.

180
00:20:13,000 --> 00:20:17,000
And we have replaced scene for that.

181
00:20:25,000 --> 00:20:31,000
Same idea, we just pass it our new scene and the quarks.

182
00:20:40,000 --> 00:20:42,000
All right.

183
00:20:43,000 --> 00:20:45,000
So, there's that.

184
00:20:45,000 --> 00:20:49,000
So, this is going to last for about a second, and then it's going to switch to the game over screen.

185
00:20:49,000 --> 00:20:53,000
When it stops, it's actually going to print the runtime.

186
00:20:53,000 --> 00:20:56,000
So, you can actually see some of the other features here.

187
00:20:56,000 --> 00:20:58,000
All right. So, we do this.

188
00:20:58,000 --> 00:21:01,000
We get this, then this, then this.

189
00:21:01,000 --> 00:21:03,000
We'll close this.

190
00:21:03,000 --> 00:21:07,000
And as you can see, when the first scene paused, we have that.

191
00:21:07,000 --> 00:21:10,000
When the game started,

192
00:21:10,000 --> 00:21:13,000
we saved that start time.

193
00:21:13,000 --> 00:21:19,000
And then when it stopped, we actually printed the actual runtime, which is about a second.

194
00:21:19,000 --> 00:21:25,000
And then the last thing we need to do is be able to get back to that initial scene that's still on the stack.

195
00:21:25,000 --> 00:21:29,000
That one's even easier.

196
00:21:29,000 --> 00:21:33,000
We just need to tell it to stop the scene.

197
00:21:33,000 --> 00:21:39,000
This one doesn't have any examples, but it should turn back to that initial purple color when we're done.

198
00:21:41,000 --> 00:21:45,000
Oh.

199
00:21:45,000 --> 00:21:49,000
It helps to actually spell my libraries correctly.

200
00:21:53,000 --> 00:21:57,000
So, that's basically all you need to know to start manipulating scenes.

201
00:21:57,000 --> 00:22:01,000
When you start working with scenes, just consider them a piece of the game,

202
00:22:01,000 --> 00:22:07,000
from levels to splash screens to scoring screens to main menus, things like that.

203
00:22:07,000 --> 00:22:12,000
And so, you just use that state machine to move between them.

204
00:22:12,000 --> 00:22:15,000
Next tool you need to know how to use.

205
00:22:15,000 --> 00:22:19,000
Sprites. So, you've seen sprites being used through all of these examples.

206
00:22:19,000 --> 00:22:22,000
They're like the core thing that puts things on the screen.

207
00:22:22,000 --> 00:22:28,000
This is actually going to be about how to make those sprites interact with each other.

208
00:22:28,000 --> 00:22:32,000
So, the first thing we can actually do is we connect their Python classes.

209
00:22:32,000 --> 00:22:35,000
We can pass other sprites as parameters.

210
00:22:41,000 --> 00:22:45,000
So, in this sample, we're going to...

211
00:22:55,000 --> 00:22:58,000
Here's our leader.

212
00:22:58,000 --> 00:23:01,000
Scene.add our leader.

213
00:23:18,000 --> 00:23:21,000
So, here's this.

214
00:23:24,000 --> 00:23:27,000
Just the same thing here.

215
00:23:28,000 --> 00:23:31,000
Seriously.

216
00:23:44,000 --> 00:23:47,000
So, we've done this.

217
00:23:47,000 --> 00:23:50,000
So, this is going to put three objects on screen.

218
00:23:50,000 --> 00:23:57,000
And then, if we look at the code, on update, the leader is going to basically move nowhere

219
00:23:57,000 --> 00:24:00,000
because it doesn't have a target.

220
00:24:00,000 --> 00:24:04,000
Oh, wait. No. Right. It's going to move towards the center of the screen.

221
00:24:04,000 --> 00:24:08,000
And then, the other ones are going to try to follow the leader.

222
00:24:13,000 --> 00:24:16,000
Which is basically what we get.

223
00:24:16,000 --> 00:24:20,000
So, that was just using parameters.

224
00:24:20,000 --> 00:24:24,000
You just pass things around like you would any other Python code.

225
00:24:24,000 --> 00:24:27,000
But you can also use scene.get.

226
00:24:27,000 --> 00:24:31,000
So, what we're actually going to do now is we're going to add a player.

227
00:24:40,000 --> 00:24:43,000
And just so I can demo some stuff.

228
00:24:45,000 --> 00:24:48,000
That's going to crash.

229
00:24:48,000 --> 00:24:52,000
You want a list of hashables and not a string.

230
00:24:54,000 --> 00:24:57,000
So, we're going to have this player.

231
00:24:57,000 --> 00:25:02,000
If I run this, as you can see, the player is going to follow the mouse.

232
00:25:06,000 --> 00:25:13,000
So, that's done. And so, here, instead of going to this, we need...

233
00:25:18,000 --> 00:25:21,000
in update.scene.

234
00:25:21,000 --> 00:25:26,000
So, just like I mentioned earlier where you can extend the event system,

235
00:25:26,000 --> 00:25:29,000
the engine does it itself so that the current scene is always available

236
00:25:29,000 --> 00:25:32,000
on every single event you see.

237
00:25:32,000 --> 00:25:37,000
So, in update.scene.get.

238
00:25:37,000 --> 00:25:40,000
So, the first thing we can do is look by kind.

239
00:25:40,000 --> 00:25:43,000
And this is just going to find everything of that type.

240
00:25:43,000 --> 00:25:47,000
And target is going to be player.position.

241
00:25:48,000 --> 00:25:52,000
So, what this should do is, as it moves around,

242
00:25:52,000 --> 00:25:55,000
the leader is going to start following the player.

243
00:25:58,000 --> 00:26:03,000
So, another simple way to do this, in addition, you don't have to use kind.

244
00:26:03,000 --> 00:26:07,000
There's also by tag, which this should work exactly the same way.

245
00:26:12,000 --> 00:26:16,000
Oh, I should change that to the actual thing we're looking for.

246
00:26:16,000 --> 00:26:20,000
So, you can use that tag system to also grab objects.

247
00:26:20,000 --> 00:26:24,000
So, if you have multiple different types under the same tag,

248
00:26:24,000 --> 00:26:26,000
you'll get all of them.

249
00:26:29,000 --> 00:26:33,000
And then the last thing you can do is actually just use the messaging system.

250
00:26:33,000 --> 00:26:35,000
I don't actually have a sample ready for this,

251
00:26:35,000 --> 00:26:38,000
but you've kind of seen this all in order.

252
00:26:38,000 --> 00:26:41,000
So, what we'll do is...

253
00:26:42,000 --> 00:26:45,000
We need data classes.

254
00:26:50,000 --> 00:26:54,000
All right. So, we've all seen this.

255
00:27:12,000 --> 00:27:16,000
So, what we're going to do in here...

256
00:27:21,000 --> 00:27:26,000
This will actually signal target moved.

257
00:27:28,000 --> 00:27:32,000
And it will be that player.position.

258
00:27:33,000 --> 00:27:37,000
And then down here...

259
00:27:47,000 --> 00:27:51,000
Oh, wait, no. If self-taught leader. Yep.

260
00:27:51,000 --> 00:27:53,000
This is a little backwards. Leader here is not a Boolean.

261
00:27:53,000 --> 00:27:55,000
It's the actual leader itself.

262
00:27:55,000 --> 00:27:58,000
So, I have to do all my logic in reverse.

263
00:27:58,000 --> 00:28:02,000
So, if we're not the leader, we're actually going to care more about this target moved.

264
00:28:02,000 --> 00:28:08,000
So, this will be self.target equals event.position.

265
00:28:18,000 --> 00:28:22,000
And then up here...

266
00:28:23,000 --> 00:28:27,000
And then up here...

267
00:28:33,000 --> 00:28:37,000
Okay. So, now instead of following the leader itself,

268
00:28:37,000 --> 00:28:41,000
it's going to go where the leader tells it to.

269
00:28:45,000 --> 00:28:49,000
Right.

270
00:28:52,000 --> 00:28:56,000
Here we go.

271
00:29:02,000 --> 00:29:06,000
Okay. Well, like I said, I didn't prep this one.

272
00:29:06,000 --> 00:29:10,000
I'm not sure what's wrong here.

273
00:29:10,000 --> 00:29:14,000
It's not callable.

274
00:29:14,000 --> 00:29:18,000
Where do I try to call a...

275
00:29:22,000 --> 00:29:24,000
Okay. So, we're going to move on.

276
00:29:24,000 --> 00:29:27,000
But that is basically how it would work.

277
00:29:27,000 --> 00:29:31,000
If I could figure out where I'm trying to do that.

278
00:29:32,000 --> 00:29:36,000
Oh. Wow. That's...

279
00:29:36,000 --> 00:29:40,000
It's right here.

280
00:29:42,000 --> 00:29:44,000
Hey, there we go.

281
00:29:44,000 --> 00:29:48,000
And now they're all mostly chasing the player.

282
00:29:48,000 --> 00:29:52,000
So, yeah. There's the various ways you can actually put sprites together to do things together.

283
00:29:56,000 --> 00:30:00,000
Three different systems. You'll use them for different things.

284
00:30:02,000 --> 00:30:06,000
Generally, it depends on what information you have at the time

285
00:30:06,000 --> 00:30:08,000
on which one you're going to want to pick.

286
00:30:08,000 --> 00:30:12,000
So, the last step. Let's talk about subsystems.

287
00:30:12,000 --> 00:30:16,000
So, I mentioned subsystems is how we actually add features to the engine.

288
00:30:16,000 --> 00:30:20,000
So, I am actually going to build an achievement system right here in front of you.

289
00:30:22,000 --> 00:30:26,000
Remarkably, it's more simple than you'd think.

290
00:30:26,000 --> 00:30:30,000
So, this is what it looks like.

291
00:30:30,000 --> 00:30:34,000
So, we just have a very loose game here.

292
00:30:34,000 --> 00:30:38,000
Alright. So, in order to get this started,

293
00:30:38,000 --> 00:30:42,000
the first thing we're actually going to need is to start building...

294
00:30:42,000 --> 00:30:46,000
Let me delete that.

295
00:30:46,000 --> 00:30:50,000
One minute. Okay. I might not be able to get this done.

296
00:30:50,000 --> 00:30:54,000
Alright.

297
00:30:54,000 --> 00:30:58,000
So, the basic idea is you would make your...

298
00:31:06,000 --> 00:31:10,000
You do this.

299
00:31:12,000 --> 00:31:16,000
All subsystems have to take args and quarks

300
00:31:16,000 --> 00:31:20,000
because they're going to receive all of the quarks for all of the subsystems.

301
00:31:20,000 --> 00:31:24,000
That's just how things instantiate.

302
00:31:28,000 --> 00:31:32,000
Goal equals 10.

303
00:31:32,000 --> 00:31:36,000
So,

304
00:31:40,000 --> 00:31:44,000
I'm not going to get to show this one running, but basically, you would write

305
00:31:44,000 --> 00:31:48,000
an event that is the progress.

306
00:31:48,000 --> 00:31:52,000
When you get that, self.count

307
00:31:52,000 --> 00:31:56,000
plus equals 1. If self.goal

308
00:31:56,000 --> 00:32:00,000
If goal is greater than

309
00:32:00,000 --> 00:32:04,000
count or reverse that.

310
00:32:04,000 --> 00:32:08,000
Alright.

311
00:32:08,000 --> 00:32:12,000
Raise an event and then a sprite can be created.

312
00:32:12,000 --> 00:32:16,000
Which you see somewhere?

313
00:32:16,000 --> 00:32:20,000
No, I didn't write that part. Okay. Yeah, you would just raise an event and then

314
00:32:20,000 --> 00:32:24,000
can create a sprite in response to that event on the scene.

315
00:32:24,000 --> 00:32:28,000
And you'd have a working achievement system.

316
00:32:28,000 --> 00:32:32,000
And that's it.

317
00:32:32,000 --> 00:32:36,000
Applause

318
00:32:36,000 --> 00:32:40,000
Applause

