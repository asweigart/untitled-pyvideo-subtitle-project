1
00:00:00,000 --> 00:00:21,760
Hi, my name is Jessica Garson and I'm here to talk with you about creating sample code.

2
00:00:21,760 --> 00:00:24,720
Let me know if this inspires you to create anything.

3
00:00:24,720 --> 00:00:26,200
You can reach out to me on Twitter.

4
00:00:26,760 --> 00:00:30,440
DMs are open and my handle is at Jessica Garson.

5
00:00:31,720 --> 00:00:36,040
What this talk is about is about how you were launching the V2 of the Twitter API.

6
00:00:36,040 --> 00:00:39,320
We started off with this program called Twitter Developer Labs,

7
00:00:39,320 --> 00:00:45,800
which were previews of the new endpoints that later became our launching point for

8
00:00:45,800 --> 00:00:50,200
the new endpoints that we recently released, the V2 version of the Twitter API.

9
00:00:50,840 --> 00:00:55,400
We are committed to partnering with developers to help create and shape the future of our

10
00:00:55,400 --> 00:01:02,600
API. As we were working through this process, we were releasing new endpoints that no one

11
00:01:02,600 --> 00:01:08,040
had ever built with before. Therefore, they didn't have the same infrastructure as other

12
00:01:08,040 --> 00:01:15,480
endpoints that had community-based libraries and a lot of different other resources that existed.

13
00:01:16,200 --> 00:01:22,040
They were brand new and nobody had ever seen them before. We had to create a series of sample code.

14
00:01:22,040 --> 00:01:26,520
You might be wondering, what is sample code? I like to think of sample code

15
00:01:26,520 --> 00:01:34,440
as code for other humans to use. It's similar to example code. It's often code that you'll see

16
00:01:35,480 --> 00:01:40,040
in documentation. You might see it on a sample repository. Sometimes you'll see it

17
00:01:40,600 --> 00:01:46,040
for an open source library, but it's code for other people to use. It's different from production

18
00:01:46,040 --> 00:01:52,200
code where you're building code that's supposed to run a product or code for others to extend

19
00:01:52,200 --> 00:01:59,240
and build on top of. Sample code is actually created to help people accomplish very specific

20
00:01:59,240 --> 00:02:07,320
tasks by creating code that helps you get started with an API, typically, or a package or a library.

21
00:02:10,040 --> 00:02:13,320
Our sample code, a lot of what I'm going to be talking about today, is found on our GitHub

22
00:02:13,320 --> 00:02:17,640
repository. In particular, I'll be showing a few examples from the v2 version of our

23
00:02:18,280 --> 00:02:24,600
GitHub repository, which is github.com slash twitterdev slash twitterapi v2 sample code.

24
00:02:24,600 --> 00:02:30,040
Also, there is other sample code available just in our main Twitter dev repository. There are lots

25
00:02:30,040 --> 00:02:34,600
of different things that myself and other team members have been working on. We also have it

26
00:02:34,600 --> 00:02:41,720
in our documentation. With the launch, we also launched some code-related resources. We have

27
00:02:42,280 --> 00:02:47,800
a Postman collection. Postman, for those who don't know, is a REST client that helps you make your

28
00:02:47,800 --> 00:02:54,280
first requests. I think of that as also sample code because it can help you create your first

29
00:02:54,280 --> 00:02:59,640
requests. Then there's also an open API specification that we made available as well, too,

30
00:03:00,680 --> 00:03:06,440
which can also be helpful as well if you want to build libraries or just see our spec in more

31
00:03:06,440 --> 00:03:15,160
detail or even just take a look at how things are made. As we have been starting to create

32
00:03:15,160 --> 00:03:21,160
more sample code, there are some questions I like to ask myself as I'm creating sample code.

33
00:03:22,040 --> 00:03:30,280
The first is, can you look at the code and know exactly what's going on? Some key questions to

34
00:03:30,280 --> 00:03:35,240
think about as you're going through it. Is it readable? Is the code consistent? Does it do

35
00:03:36,760 --> 00:03:42,120
help accomplish one goal in one language but another goal in a different language? For example,

36
00:03:42,120 --> 00:03:51,000
let's say you had a JavaScript version of the code that went through a different process to

37
00:03:51,000 --> 00:04:00,040
getting a JSON payload as a Python version which exported everything into a CSV file. That would

38
00:04:00,040 --> 00:04:04,360
be very different experiences. You want to make sure that your code is consistent with each other

39
00:04:04,360 --> 00:04:10,280
and also consistent with other code samples that you may have released in the past as well.

40
00:04:11,560 --> 00:04:18,760
I like to have my code lightly commented. The code has some instructions

41
00:04:19,400 --> 00:04:25,800
and some things to help you adjust and have it meet your needs, but it's also very readable as

42
00:04:25,800 --> 00:04:38,840
well. The variable names also are explanatory and it has a good README. Therefore, you can actually

43
00:04:39,720 --> 00:04:44,760
make sure that there are directions and documentation around how you would use it

44
00:04:44,760 --> 00:04:47,960
and what steps you need to take before you use it and any set of instructions.

45
00:04:48,920 --> 00:04:57,320
With both code commenting and a README, it is important to make sure that it is lightly

46
00:04:57,320 --> 00:05:03,480
commented. You might have heard me say that once before already in this talk, but by lightly

47
00:05:03,480 --> 00:05:09,400
commented, it's not like a million comments where it's harder to read the code or your README is so

48
00:05:09,400 --> 00:05:14,600
long and has so many different directions that it's really intense to get started because you

49
00:05:14,680 --> 00:05:19,880
have to go through so many different processes. It's simple and to the point, but yet easy to

50
00:05:19,880 --> 00:05:29,560
follow. Keep that in mind as you are creating sample code. Also, I like to think of good sample

51
00:05:29,560 --> 00:05:36,120
code as building blocks and almost like that base layer of the block. One thing, especially

52
00:05:37,000 --> 00:05:47,880
as you're going, I recently spoke at the Philly Python user group and I created a code sample

53
00:05:47,880 --> 00:05:55,160
for that. I used our filtered string sample code and just built on top of it and extended it

54
00:05:55,160 --> 00:05:59,960
to meet the goals of the application that I was going to be presenting on. I learned so much in

55
00:05:59,960 --> 00:06:07,880
that process from a developer empathy perspective of just what it takes to build and extend off of

56
00:06:07,880 --> 00:06:12,520
it because I noticed a lot of things about the code sample and there were some inconsistencies.

57
00:06:12,520 --> 00:06:19,560
I noticed a lot just as I was using it in that way and it's really helpful to see how developers

58
00:06:19,560 --> 00:06:23,800
will use it because a lot of times people who return to your sample code are using it to figure

59
00:06:23,800 --> 00:06:29,800
out how to integrate it with their applications. Seeing if you can actually build on top of it

60
00:06:30,440 --> 00:06:40,120
was a really great exercise in developer empathy. Also, how others will perceive your code. At Twitter,

61
00:06:40,120 --> 00:06:45,000
we spent a lot of time editing written documents and we're moving towards giving the same

62
00:06:45,000 --> 00:06:54,360
attention to our code samples. Before we launched our V2 version of the Twitter API, we actually

63
00:06:54,360 --> 00:07:02,040
had a bud bash for all of our sample code which was pretty great because we were able to

64
00:07:02,920 --> 00:07:08,280
give it the same attention that we actually give to larger engineering releases. A bud bash is

65
00:07:08,280 --> 00:07:19,480
where there's a series of tests and you have two testers who will go through and take a look and

66
00:07:19,480 --> 00:07:26,120
see is it working, is it passing each test, and then from there you can fix any bugs that may

67
00:07:26,120 --> 00:07:33,160
come up if there's weird errors that come up and things like that. That's something that was really

68
00:07:33,160 --> 00:07:37,880
exciting. We're also moving towards the possibility and we're starting to explore the possibility of

69
00:07:37,880 --> 00:07:42,040
using automated testing for some of our code samples as well and that's something we've

70
00:07:42,040 --> 00:07:47,720
considered as well. Also, just making sure that your code is following the conventions

71
00:07:48,680 --> 00:07:56,920
that are established. I'm a Python developer and I use Pilant and I use Black for auto-formatting.

72
00:07:56,920 --> 00:08:01,960
Love Black, happy to talk with any of you about that. It makes my code look a little bit more

73
00:08:01,960 --> 00:08:09,000
polished just because it isn't auto-formatted. Making sure that you are following modern code

74
00:08:09,000 --> 00:08:16,760
conventions and also documenting that as well is really important. The next thing might sound

75
00:08:16,840 --> 00:08:26,120
kind of silly but it's really important. Is the code sample working? As you're going through the

76
00:08:26,120 --> 00:08:32,760
process of creating sample code, you want to make sure that the code is easy to replicate without

77
00:08:32,760 --> 00:08:38,760
complicated setup and make sure that it ages well. I've run a lot of code, especially in the past

78
00:08:38,760 --> 00:08:45,480
year, that was working at the time and was really great but no longer works or the payloads have

79
00:08:45,480 --> 00:08:52,200
changed or the libraries that it depended on have made updates or there are newer, more exciting

80
00:08:52,200 --> 00:08:58,440
libraries that have come out that accomplish the task in a different way. Making sure that

81
00:08:58,440 --> 00:09:04,840
that happens as well. Also, security vulnerabilities in libraries, different things that can come up as

82
00:09:04,840 --> 00:09:10,440
well to just make sure that your code is aging well and working and that you have a way to

83
00:09:10,440 --> 00:09:16,840
quickly make changes if things do break and that you're responsive as things are not working or

84
00:09:16,840 --> 00:09:25,560
as you notice things that are coming up. You might be wondering what does good sample code look like?

85
00:09:26,520 --> 00:09:33,160
I have a few examples to talk with you about. One thing that I like to think about is functions like

86
00:09:33,160 --> 00:09:41,240
paragraphs. I like my code to tell a story and then I personally really like

87
00:09:42,920 --> 00:09:49,320
to take a step back before I write sample code and I'm like, okay, cool. What is the

88
00:09:49,320 --> 00:09:52,520
tutorial that I'm going to write about the sample code if I was going to write a tutorial?

89
00:09:52,520 --> 00:09:58,280
What are the things that need to be done? Then write it down in a notebook and then create code

90
00:09:58,280 --> 00:10:03,880
that matches all the tasks and think about it like that. My personal style of code tends to be

91
00:10:03,880 --> 00:10:09,320
very modular and build on top of each other and then tie it together with a main statement,

92
00:10:09,320 --> 00:10:15,960
which I like to think about as a conclusion. You have your introduction, which is your imports,

93
00:10:16,680 --> 00:10:22,600
then paragraphs, which are each function, and then the conclusion that ties it all together

94
00:10:22,600 --> 00:10:27,640
is the main function. That's how I like to think about writing sample code.

95
00:10:28,040 --> 00:10:34,040
Let's take a look at an example that does that. We have this import request, import OS, and import

96
00:10:34,680 --> 00:10:41,000
JSON. Those are the two things. I do have some light comments just to make sure that you have

97
00:10:41,000 --> 00:10:48,600
what you need to run it. This is some sample code that we have for filtered stream inside of our

98
00:10:48,600 --> 00:10:56,600
sample code repository for v2. This is for the sample stream endpoint. From here,

99
00:10:58,520 --> 00:11:04,440
we want to authenticate. We just want to pass in our environment variable token for

100
00:11:06,680 --> 00:11:12,600
our barrier token. We're going to want to create the URL for sample stream. Then we want to create

101
00:11:12,600 --> 00:11:18,760
the headers that we're going to pass in here. Then we're going to want to connect to the endpoint.

102
00:11:18,760 --> 00:11:25,640
There's some logic and an exception code that that passes through. Basically, in that function,

103
00:11:25,640 --> 00:11:29,320
that's where you're actually going to do the connection. Then we have this main for the

104
00:11:29,320 --> 00:11:37,480
conclusion, which sets a barrier token as just the auth function, the URL as create URL,

105
00:11:37,480 --> 00:11:42,760
headers as create headers. Then since it's a streaming endpoint, it's just going to want

106
00:11:42,760 --> 00:11:49,640
to keep running. There's some logic around that. That's a little bit about how I like to think

107
00:11:49,640 --> 00:11:58,280
about creating functions like paragraphs. Simple and to the point. What I mean by that is that

108
00:11:59,880 --> 00:12:05,800
I really like to make sure that my code is really straightforward. I had a code sample that was

109
00:12:05,800 --> 00:12:15,400
originally about 190 lines. I just kept on slashing it and removing many lines until

110
00:12:15,880 --> 00:12:22,120
it was as simple and to the point as possible. For those types of code samples,

111
00:12:22,120 --> 00:12:29,560
I like to remove any unnecessary complexity so I can maybe live code it at a talk.

112
00:12:30,520 --> 00:12:36,760
This particular sample that I'm about to show, I have live coded the Chicago Python meetup,

113
00:12:36,760 --> 00:12:45,640
which was really fun, and ChiPy. Then I also live coded it at PyOhio as well.

114
00:12:47,720 --> 00:12:51,720
As I'm going through this process of doing it, I really wanted to ask myself,

115
00:12:51,720 --> 00:12:57,320
is every line really needed? Does it have to be there? Can I get rid of it? How can I make

116
00:12:57,320 --> 00:13:02,440
this as simple as possible so that I can show this to others and they can follow along

117
00:13:02,440 --> 00:13:09,720
with what's going on? This is actually a sample that is in R, but it runs your favorite Python

118
00:13:09,720 --> 00:13:18,360
package in R using a library called reticulate. For that, I first wanted to install the packages

119
00:13:19,000 --> 00:13:24,680
and then from here set my path to Python, create a virtual environment and use the virtual

120
00:13:24,680 --> 00:13:32,600
environment and then import the Python libraries for JSON and requests. Get tweets from a given

121
00:13:32,600 --> 00:13:38,760
handle, create the URL there, pass in the credentials, and then create a JSON payload

122
00:13:38,760 --> 00:13:48,040
and put it into a data frame using some R packages. This is actually 38 lines and it's

123
00:13:48,040 --> 00:13:56,360
turned out much, much, much longer. That's an example of how to make very simple code.

124
00:13:56,360 --> 00:14:00,920
The point of this code sample was actually something that I can easily live code and talk

125
00:14:00,920 --> 00:14:05,400
about at a conference. I really wanted it to be as simple as possible. You'll notice that there

126
00:14:05,400 --> 00:14:13,080
aren't any functions in this. That's actually because this was mostly for a Python audience,

127
00:14:13,080 --> 00:14:18,920
but in R, I wanted to make sure that that was very specific to them. I wanted to really be

128
00:14:18,920 --> 00:14:26,440
able to explain each line as I was creating it. This example was made for those conferences as

129
00:14:26,440 --> 00:14:38,200
well. Another thing that I like to think about as well is customizing my exemptions. One thing that

130
00:14:39,160 --> 00:14:42,920
is really interesting when you're creating tried-exempt statements is that you have the

131
00:14:42,920 --> 00:14:48,840
ability to create your own messages. One thing that I noticed in the bug bash that I talked about

132
00:14:48,840 --> 00:14:54,120
earlier was that a lot of people were getting the same error when they tried to type in

133
00:14:54,760 --> 00:15:01,720
their credentials wrong. I was like, oh, cool, I'll create a customized exemption. That's something

134
00:15:01,720 --> 00:15:07,320
that I hadn't done before, but I thought was something that was really great. This comes

135
00:15:07,320 --> 00:15:20,440
from our sample code for the new v2. This is hitting the get tweets endpoint using OAuth 1.0.

136
00:15:21,480 --> 00:15:29,320
It creates this pin authorization. This is actually one of the longest code comments

137
00:15:29,320 --> 00:15:35,560
that I think I've written in a long time. You'll notice on line 26, there's this try-exempt

138
00:15:35,560 --> 00:15:42,840
statement. With that, we're first going to try to get the request token.

139
00:15:45,480 --> 00:15:52,520
At this point, this is where the code was failing when people would be typing in their wrong

140
00:15:53,320 --> 00:16:00,520
credentials. What I did was I created an exemption that said there may have been an issue

141
00:16:00,600 --> 00:16:06,600
with your consumer key or secret just in case others experienced the same error again.

142
00:16:08,040 --> 00:16:12,120
That is something that I added to try to make that a little bit more robust.

143
00:16:15,640 --> 00:16:22,600
Cool. You might be wondering, what is the process that you use for writing sample code? How do you

144
00:16:22,600 --> 00:16:28,280
even get started with this? The process that we use at Twitter is that we start off by creating

145
00:16:28,280 --> 00:16:38,040
the code, then we do a peer review, we iterate off of that, build, so we actually start to build

146
00:16:38,040 --> 00:16:44,440
and get feedback. The way that I like to think about it is that you start off with your draft

147
00:16:45,000 --> 00:16:53,320
of a new code sample and then you get reviewers to think about how can you break it. I try to be

148
00:16:53,320 --> 00:16:58,040
very specific in who I get. A lot of times, I'll try to get newer developers mixed with some

149
00:16:58,040 --> 00:17:03,800
experienced developers or people who know the language or endpoint really well. Then from there,

150
00:17:03,800 --> 00:17:07,720
I take their feedback and I take it seriously. I also try to break it a little bit more. Then

151
00:17:07,720 --> 00:17:13,080
I try to build with the sample code that I've created and see what that's like. Once we release

152
00:17:13,080 --> 00:17:21,960
it, we also would love to get feedback from the community. I've had a couple of pull requests

153
00:17:21,960 --> 00:17:25,880
on samples that I've written where people have caused some things that we didn't catch through

154
00:17:25,880 --> 00:17:30,440
peer review process or just noticed something that we didn't notice or sometimes had things

155
00:17:30,440 --> 00:17:38,120
break in very specific ways. Being able to be open and receptive to that feedback has been really

156
00:17:38,120 --> 00:17:44,760
important. I've learned a lot as part of this process of creating sample code for first the

157
00:17:44,760 --> 00:17:52,040
labs endpoints and then the V2 versions. Most of all, it's the importance of Hello World.

158
00:17:52,120 --> 00:17:57,480
Like one of the things that was really great for me about the first time that I ever worked with

159
00:17:57,480 --> 00:18:05,720
the Twitter API was that I remember the first time I ever built a Twitter bot and I was like,

160
00:18:05,720 --> 00:18:11,400
oh my God, my code is making this thing tweet. This is awesome. I'm like making internet happen.

161
00:18:11,400 --> 00:18:18,360
I got so excited that I sent an email to a list of almost 2,000 people of women who were learning

162
00:18:18,360 --> 00:18:22,040
how to code in D.C. at the same time for this community program called Hear Me Code. I was like,

163
00:18:22,040 --> 00:18:26,440
oh my God, I built this thing. It's so exciting. I remember that feeling when I think about it

164
00:18:26,440 --> 00:18:32,680
often and trying to help others have that feeling as quickly as possible is really the goal of good

165
00:18:32,680 --> 00:18:38,920
sample code. Really thinking about that, developers come from a lot of different places and trying to

166
00:18:38,920 --> 00:18:45,400
make sure that you have code that can help get them there as quickly as possible is always good.

167
00:18:45,400 --> 00:18:50,600
Also, one thing I've learned this year in particular is that what is good today might

168
00:18:50,600 --> 00:18:57,400
not be good tomorrow. Code can change and libraries can change and conventions can change.

169
00:18:59,640 --> 00:19:04,760
Code will break and it might be working great one day and not so great because of changes that

170
00:19:04,760 --> 00:19:11,240
happen for many different reasons. Keeping that in mind as well. Also, as I mentioned earlier,

171
00:19:11,240 --> 00:19:16,840
your code will be viewed by people from many different backgrounds and may be viewed very

172
00:19:16,840 --> 00:19:22,440
differently by different groups of people. So really thinking about how you can make code be

173
00:19:22,440 --> 00:19:29,800
as accessible as possible following conventions from L.I. and also just thinking about ways

174
00:19:29,800 --> 00:19:35,240
that other people may perceive it and trying to be as accessible as possible is also something that

175
00:19:35,960 --> 00:19:41,240
I've been thinking a lot about recently. And really being open to feedback.

176
00:19:43,320 --> 00:19:47,240
A lot of times I'll read things about our code samples and sometimes it's actually me who wrote

177
00:19:47,240 --> 00:19:57,320
the code samples on our Twitter community forums or I'll see you on Twitter or I'll be talking

178
00:19:57,320 --> 00:20:04,920
with folks in the community and just knowing that code is always a work in progress and being open

179
00:20:04,920 --> 00:20:13,960
and receptive to feedback has been really helpful in the process. So as we're talking

180
00:20:13,960 --> 00:20:19,480
about feedback, we're very open to it as a team at Twitter. So if there are code resources that

181
00:20:19,480 --> 00:20:25,720
you want to see, let us know. One particular example is when we first launched Labs, we did

182
00:20:25,720 --> 00:20:34,360
not launch any Node.js samples and somebody wrote in and they were like, hey, please give us Node.js

183
00:20:34,360 --> 00:20:39,320
samples and so we were able to create those pretty quickly. And you can give us feedback

184
00:20:39,320 --> 00:20:44,840
at twitterdevfeedback.useroice.com and we definitely want to hear from you what you want to see in

185
00:20:44,840 --> 00:20:51,000
terms of resources or even feature requests or anything like that. Just let us know. There's

186
00:20:51,000 --> 00:20:57,240
also some additional ways to give us feedback as well. You can file an issue on GitHub.

187
00:20:59,000 --> 00:21:03,320
You can submit a pull request if you want to fix it yourself. We love pull requests

188
00:21:04,360 --> 00:21:08,520
there have been some people that have really helped out in a big way by finding things that

189
00:21:08,520 --> 00:21:13,400
we didn't catch, by helping us make our code a little bit more robust, by changing some things.

190
00:21:14,120 --> 00:21:20,120
That is always, always acceptable and I love it when that happens. So yeah, feel free to submit

191
00:21:20,120 --> 00:21:27,720
a pull request. Documentation feedback. On every documentation page, if you scroll down to the

192
00:21:27,720 --> 00:21:36,120
bottom, you'll see a happy face or a sad face and you can click on the sad face if you see

193
00:21:36,120 --> 00:21:43,160
things that need to be improved and let us know. And yeah, we're definitely, we have just started

194
00:21:43,160 --> 00:21:48,440
releasing the first few on points of the Twitter API and we're definitely learning as we move

195
00:21:48,440 --> 00:21:53,480
towards future launches. So we're definitely trying to learn from some of our past mistakes

196
00:21:53,480 --> 00:21:58,600
and move forward from there. So it's been really great to kind of be part of this journey.

197
00:21:59,560 --> 00:22:04,280
And also feel free to take a look at our code samples and even clone them and try them out

198
00:22:04,280 --> 00:22:12,200
yourself. And again, github.com slash Twitter dev slash Twitter API B2 sample code is where

199
00:22:12,200 --> 00:22:18,600
most of the code that I talked about today lives. And also I love to talk about sample code. If

200
00:22:18,600 --> 00:22:24,040
you're creating sample code and want to show me what you built or want to ask me questions or

201
00:22:24,040 --> 00:22:28,440
really anything or want to talk about the Twitter API or really just want to talk about Python,

202
00:22:28,440 --> 00:22:34,520
anything like that, let me know if this inspires you to create anything. My

203
00:22:35,080 --> 00:22:40,120
handle is at Jessica Garson and feel free to reach out to me. You can also let us know at

204
00:22:40,120 --> 00:22:45,480
Twitter dev or on the Twitter community forums. And here are some other links that might be helpful

205
00:22:45,480 --> 00:22:52,680
as well. Again, Twitter dev feedback.useroys.com. All our sample code is found on Twitter dev

206
00:22:53,960 --> 00:23:00,760
or github.com slash Twitter dev. You want to look at any code samples. And then you can also

207
00:23:01,960 --> 00:23:08,280
communicate with us via the Twitter community forums. Thank you so much and have a great day.

