1
00:00:00,000 --> 00:00:23,320
Hello, my name is Haley Dunbraver, and I want to welcome you to my talk, Developing a Security

2
00:00:23,320 --> 00:00:27,940
Mindset, Practical Lessons for Pythonistas.

3
00:00:27,940 --> 00:00:30,700
I'm Haley Dunbraver, let's jump into this.

4
00:00:30,700 --> 00:00:38,020
All right, so today we're going to talk about developing a security mindset, and this basically

5
00:00:38,020 --> 00:00:47,520
boils down to the idea that I want to encourage you to approach your code more skeptically.

6
00:00:47,520 --> 00:00:54,900
Think about where it might be weak, and think about the ways it could be compromised, and

7
00:00:54,900 --> 00:01:02,460
take small steps at first, just to make it better, to shore it up a little bit and to

8
00:01:02,460 --> 00:01:05,140
make yourself more secure.

9
00:01:05,140 --> 00:01:11,600
Now, this means that we're going to talk about software security, but don't worry, because

10
00:01:11,600 --> 00:01:19,180
although we are talking about security, we are going to do so with whimsy and mystery

11
00:01:19,180 --> 00:01:21,900
and super fun hats.

12
00:01:21,900 --> 00:01:24,320
It's basically Halloween, right?

13
00:01:24,320 --> 00:01:25,600
It's all good.

14
00:01:25,600 --> 00:01:31,400
Okay, so with whimsy and mystery, let's get this started.

15
00:01:31,400 --> 00:01:38,760
So this talk is going to feature three amazing detectives from British detective fiction,

16
00:01:38,760 --> 00:01:40,640
the very best.

17
00:01:40,640 --> 00:01:48,240
We have Hercule Poirot, Sherlock Holmes, Hiss Marple, but I'm never going to keep that up,

18
00:01:48,240 --> 00:01:54,120
so we're just going to go with their actual names and not their puns.

19
00:01:54,120 --> 00:01:58,760
Hercule Poirot, Sherlock Holmes, and Miss Marple.

20
00:01:58,760 --> 00:02:04,800
Now these detectives are going to have something to say about software security, and I hope

21
00:02:04,800 --> 00:02:07,240
you all are along for the ride.

22
00:02:07,240 --> 00:02:12,560
I know that I am along with my Python avatar here.

23
00:02:12,560 --> 00:02:20,880
You know, if you are new to security, just think of yourself as keeping company with

24
00:02:20,880 --> 00:02:25,120
this adorable Python, right?

25
00:02:25,120 --> 00:02:27,000
She's new to software security too.

26
00:02:27,000 --> 00:02:28,000
It's okay.

27
00:02:28,000 --> 00:02:31,880
All right, so let's meet our detectives.

28
00:02:31,880 --> 00:02:34,280
First we have Miss Jane Marple.

29
00:02:34,280 --> 00:02:37,640
Miss Jane Marple is a bit of a busybody.

30
00:02:37,640 --> 00:02:43,720
She knows a lot, maybe arguably too much about her neighbors and their relations, things

31
00:02:43,720 --> 00:02:45,280
like that.

32
00:02:45,280 --> 00:02:50,480
She is often underestimated, and she's always listening.

33
00:02:50,480 --> 00:02:53,680
So you can never really count her out.

34
00:02:53,680 --> 00:02:59,760
Additionally, she is thoroughly educated, and she has a good brain, some nice logic,

35
00:02:59,760 --> 00:03:04,680
common sense, but she is not formally trained.

36
00:03:04,680 --> 00:03:09,720
All right, so let's talk next about Hercule Poirot.

37
00:03:09,720 --> 00:03:12,300
He understands psychology.

38
00:03:12,300 --> 00:03:16,000
He believes in the predictability of human behavior.

39
00:03:16,000 --> 00:03:18,240
He's fastidious.

40
00:03:18,240 --> 00:03:24,600
He keeps his cards close until the right time, and he can spot when someone is pretending

41
00:03:24,600 --> 00:03:28,400
to be something that they're not.

42
00:03:28,400 --> 00:03:32,480
And then our final detective is Mr. Sherlock Holmes.

43
00:03:32,480 --> 00:03:38,960
He observes minute details and is able to extract information from that.

44
00:03:38,960 --> 00:03:45,160
Additionally, he knows that you don't necessarily need to leave your home in order to dig up

45
00:03:45,160 --> 00:03:47,640
some interesting information.

46
00:03:47,640 --> 00:03:55,400
And in my opinion, that makes him a pandemic hero, which just, I love it.

47
00:03:55,400 --> 00:03:57,400
He is a thorough researcher.

48
00:03:57,400 --> 00:04:02,920
He questions assumptions, and he ignores roles when they don't suit him.

49
00:04:02,920 --> 00:04:07,440
But here's me, or past me, maybe you could say.

50
00:04:07,440 --> 00:04:09,920
I was new to software security.

51
00:04:09,920 --> 00:04:12,800
I hadn't really been involved with it before.

52
00:04:12,800 --> 00:04:15,640
I had been called naive.

53
00:04:15,640 --> 00:04:21,360
I didn't want to believe people would do anything bad or that I was working on something that

54
00:04:21,360 --> 00:04:24,480
would be worthwhile to break into.

55
00:04:24,480 --> 00:04:30,440
And security just overall seemed overwhelming and unfriendly, and like it really wasn't

56
00:04:30,440 --> 00:04:33,600
for me.

57
00:04:33,600 --> 00:04:40,840
So we are going to have several questions for each of these detectives, and we're going

58
00:04:40,840 --> 00:04:47,440
to use those questions to discuss software security, hopefully in a way that that past

59
00:04:47,440 --> 00:04:53,800
me Python avatar would have found helpful, and hopefully you'll find helpful too.

60
00:04:53,800 --> 00:04:58,080
So the first question is, what do you know about your neighbors?

61
00:04:58,080 --> 00:05:02,160
And for this question, we are going to go to Ms. Marple.

62
00:05:02,160 --> 00:05:05,160
She is up to date on the latest goings on.

63
00:05:05,160 --> 00:05:09,640
She has an understanding of the general character of her neighbors.

64
00:05:09,640 --> 00:05:12,840
And she knows who associates with whom.

65
00:05:12,840 --> 00:05:20,920
She exposes bad actors and never sugarcoats her assessment of what's going on.

66
00:05:20,920 --> 00:05:25,320
The recommended reading here is The Murder of Agatha Vickridge by Agatha Christie, which

67
00:05:25,320 --> 00:05:28,200
is the very first Ms. Marple novel.

68
00:05:28,200 --> 00:05:30,880
All right.

69
00:05:30,880 --> 00:05:36,240
So when I ask you if you know your neighbors, in terms of software security, what I'm really

70
00:05:36,240 --> 00:05:41,440
asking is whether you understand vulnerabilities in your open source dependencies.

71
00:05:41,440 --> 00:05:43,400
All right.

72
00:05:43,400 --> 00:05:45,720
So let's talk about your neighborhood.

73
00:05:45,720 --> 00:05:50,800
This is a dependency tree for the very first Python project I ever wrote years and years

74
00:05:50,800 --> 00:05:52,440
ago.

75
00:05:52,440 --> 00:05:59,420
Now what you see here is that there are projects that I chose to incorporate, and then those

76
00:05:59,420 --> 00:06:03,680
projects also had dependencies, and so they're brought into.

77
00:06:03,840 --> 00:06:09,760
And these little color things indicate where issues are, and so they came in both from

78
00:06:09,760 --> 00:06:17,520
projects that I chose, but also projects that were included through the dependencies of

79
00:06:17,520 --> 00:06:18,520
my dependencies.

80
00:06:18,520 --> 00:06:20,720
If that makes sense.

81
00:06:20,720 --> 00:06:22,080
All right.

82
00:06:22,080 --> 00:06:28,680
So if you think about your neighborhood, your own code, and then all the code you use, and

83
00:06:28,680 --> 00:06:34,400
all of that code living in production, you may think that your code takes up a really

84
00:06:34,400 --> 00:06:36,920
big part of the neighborhood.

85
00:06:36,920 --> 00:06:42,880
And maybe that's true, but as open source becomes more widely adopted, as there's so

86
00:06:42,880 --> 00:06:50,520
many projects to pick and choose from, and you can use the power of open source to not

87
00:06:50,520 --> 00:06:56,420
spend your time reinventing the wheel, things like that, maybe your production code looks

88
00:06:56,660 --> 00:07:02,940
like this, but it could just as easily look like this, or this, or this.

89
00:07:02,940 --> 00:07:10,060
And that is a lot of real estate in your neighborhood that you personally didn't write.

90
00:07:10,060 --> 00:07:15,320
That's not to say the open source is bad, but only that if the code is in production,

91
00:07:15,320 --> 00:07:20,860
you own it, and so you better understand what's going on there.

92
00:07:20,860 --> 00:07:22,740
So what should you know about your neighbors?

93
00:07:23,060 --> 00:07:28,940
Well, you should know if any of the packages you use have problems, if there are known

94
00:07:28,940 --> 00:07:30,300
security vulnerabilities.

95
00:07:30,300 --> 00:07:38,700
And additionally, you should know which packages your packages use, so your indirect dependencies,

96
00:07:38,700 --> 00:07:41,380
and you should know if they have any issues.

97
00:07:41,380 --> 00:07:48,480
Then that way you can make an informed risk assessment, an informed decision.

98
00:07:48,480 --> 00:07:50,920
So how do I keep track of all of this?

99
00:07:51,080 --> 00:07:54,200
What I would say here is to automate where you can.

100
00:07:54,200 --> 00:07:59,600
There are open source and enterprise options for you to do this, and I've listed a few

101
00:07:59,600 --> 00:08:00,600
here.

102
00:08:00,600 --> 00:08:08,260
So to summarize, understand your open source dependencies and remediate known issues.

103
00:08:08,260 --> 00:08:14,280
Use the tool to help you do this, and there are open source as well as enterprise options.

104
00:08:14,280 --> 00:08:16,600
Just choose whatever fits you best.

105
00:08:17,400 --> 00:08:23,440
All right, so our next question is, are people who they say they are?

106
00:08:23,440 --> 00:08:27,640
So let's turn it over to Sherlock Holmes and Erkele Porou.

107
00:08:27,640 --> 00:08:31,800
Basically, this is a trope that comes up all the time.

108
00:08:31,800 --> 00:08:38,160
People are pretending to be someone they're not, and so there's a lot of discussions around

109
00:08:38,160 --> 00:08:46,320
how do you confirm identity, what does a name really mean, and just kind of grappling with

110
00:08:46,320 --> 00:08:47,320
these issues.

111
00:08:47,320 --> 00:08:49,720
How do you confirm an identity?

112
00:08:49,720 --> 00:08:54,600
And one thing I would say is that if there is an actor in the story, you should be suspicious

113
00:08:54,600 --> 00:08:59,760
because there's probably somebody pretending to be something they're not.

114
00:08:59,760 --> 00:09:04,800
And then the recommended reading here is kind of long because it just shows up all the time.

115
00:09:04,800 --> 00:09:11,080
So any of these are awesome, awesome examples of this trope in detective fiction.

116
00:09:11,080 --> 00:09:13,440
Oh, I don't know how Sherlock Holmes does it.

117
00:09:13,440 --> 00:09:14,920
That's not very comfortable.

118
00:09:15,800 --> 00:09:18,400
So we'll put that aside for now.

119
00:09:18,400 --> 00:09:24,320
All right, let's talk about authentication and permissions.

120
00:09:24,320 --> 00:09:27,800
So what should you know about authentication in Python?

121
00:09:27,800 --> 00:09:30,640
First, I would say don't roll your own off.

122
00:09:30,640 --> 00:09:34,800
Second, I would say don't store plain text passwords.

123
00:09:34,800 --> 00:09:37,480
Don't do it on a sheet of paper on your desk.

124
00:09:37,480 --> 00:09:40,320
Don't do it in a text file on your computer.

125
00:09:40,320 --> 00:09:41,960
Don't do it in a database.

126
00:09:41,960 --> 00:09:43,320
Don't do it.

127
00:09:43,360 --> 00:09:48,920
Use two-factor authentication in all your personal accounts wherever you can.

128
00:09:48,920 --> 00:09:53,120
And additionally, if you work on a project that has users,

129
00:09:53,120 --> 00:09:58,760
please, please offer two-factor authentication for your users.

130
00:09:58,760 --> 00:10:04,560
It is a way that you can help your users protect themselves.

131
00:10:04,560 --> 00:10:09,880
You help them and then they help you by using this two-factor auth

132
00:10:09,880 --> 00:10:13,040
and hopefully nobody breaks in.

133
00:10:14,040 --> 00:10:17,360
It's a win-win situation.

134
00:10:17,360 --> 00:10:22,040
And finally, I would say that Django doesn't throttle user authentications by default.

135
00:10:22,040 --> 00:10:26,120
And so you should use a complimentary tool to do so.

136
00:10:26,120 --> 00:10:30,040
You don't want someone getting in by brute force.

137
00:10:30,040 --> 00:10:33,120
All right, so what should you know about permissions?

138
00:10:33,120 --> 00:10:38,320
Well, I'd say here that you really want to be as granular as possible.

139
00:10:38,320 --> 00:10:42,120
You need to remember that it's always easier to grant a permission,

140
00:10:42,160 --> 00:10:45,080
an additional permission that someone is missing and should have

141
00:10:45,080 --> 00:10:49,160
than it is to revoke a permission that was given

142
00:10:49,160 --> 00:10:54,520
but that was not applied well or correctly.

143
00:10:54,520 --> 00:10:58,360
And then additionally, I would say that you need to think about your perimeters.

144
00:10:58,360 --> 00:11:01,360
You don't want to be so busy barring the door

145
00:11:01,360 --> 00:11:05,760
that someone gets in through a window that you didn't even think about.

146
00:11:05,760 --> 00:11:10,360
So think about how people interact with your projects

147
00:11:10,360 --> 00:11:15,480
and where those perimeters are and what you can do to keep people

148
00:11:15,480 --> 00:11:20,320
within the areas that they're allowed to be.

149
00:11:20,320 --> 00:11:25,720
All right, an interesting reading I would recommend for this one particular issue

150
00:11:25,720 --> 00:11:29,400
of perimeters is The Case of the Speckled Band.

151
00:11:29,400 --> 00:11:33,720
It is a story by Sir Arthur Conan Doyle, including Sherlock Holmes.

152
00:11:33,720 --> 00:11:35,720
It is a locked door mystery.

153
00:11:35,720 --> 00:11:40,040
So basically, the door is locked, the window is locked.

154
00:11:40,040 --> 00:11:46,000
There's a murder that happens in the room, but how did the murder get in and out?

155
00:11:46,000 --> 00:11:51,680
And so you end up thinking about all the ways that are possible to get into this room

156
00:11:51,680 --> 00:11:57,600
and then out of this room unnoticed, and I promise you this is real,

157
00:11:57,600 --> 00:12:00,000
but it actually involves a snake.

158
00:12:00,000 --> 00:12:02,440
So I think you should all read it.

159
00:12:02,440 --> 00:12:04,000
It's a quick read.

160
00:12:04,000 --> 00:12:06,800
So The Case of the Speckled Band.

161
00:12:06,840 --> 00:12:12,600
All right, to summarize, treat authentication and permissions conservatively.

162
00:12:12,600 --> 00:12:17,600
Don't roll your own off, and be explicit about the perimeters in your projects

163
00:12:17,600 --> 00:12:20,600
and apply permissions carefully.

164
00:12:20,600 --> 00:12:26,760
All right, so the next question, should I trust this mysterious package?

165
00:12:26,760 --> 00:12:30,760
And for this question, we're going to turn to Sherlock Holmes.

166
00:12:30,800 --> 00:12:39,800
He once had a case where a client received severed ears in a package, all packed with salt.

167
00:12:39,800 --> 00:12:43,280
In another case, a client received five orange pips.

168
00:12:43,280 --> 00:12:48,360
And for an operant like me, an orange pip is basically the seed.

169
00:12:48,360 --> 00:12:54,040
And it was actually really nefarious and it was a terrible code.

170
00:12:54,040 --> 00:12:56,760
And his client died.

171
00:12:56,800 --> 00:13:03,240
It was actually only one of two cases where a client died after seeking Holmes' help.

172
00:13:03,240 --> 00:13:07,600
So no, Holmes does not think you should trust that mysterious package.

173
00:13:07,600 --> 00:13:13,800
And here, what we're really talking about is injection, user uploads, serialization,

174
00:13:13,800 --> 00:13:19,000
and typo-squatting, basically anything that you get from outside of your project

175
00:13:19,000 --> 00:13:21,280
that may be compromised.

176
00:13:21,280 --> 00:13:25,000
All right, so if we think about handling unknowns,

177
00:13:25,040 --> 00:13:32,520
there is a saying, you know, in real life, oh, trust, but verify.

178
00:13:32,520 --> 00:13:35,680
And I really think that it should be the other way around.

179
00:13:35,680 --> 00:13:37,680
Verify and then trust.

180
00:13:37,680 --> 00:13:44,840
Assume anything that comes to you from the outside could potentially be compromised.

181
00:13:44,840 --> 00:13:48,560
All right, so one way that shows up is SQL injection.

182
00:13:48,560 --> 00:13:52,840
And I would just offer a couple words of advice here.

183
00:13:52,880 --> 00:13:58,880
First, I would say write raw SQL sparingly, if at all.

184
00:13:58,880 --> 00:14:01,200
If you don't have to, don't do it.

185
00:14:01,200 --> 00:14:09,600
It's a lot safer to use an ORM like the Django ORM or SQLAlchemy, something like that,

186
00:14:09,600 --> 00:14:16,760
than it is to execute raw SQL queries, especially if those queries start out as strings

187
00:14:16,760 --> 00:14:19,720
that have user inputs formatted into them.

188
00:14:19,720 --> 00:14:25,200
That's where you could really, someone could really do some damage.

189
00:14:25,200 --> 00:14:27,200
So you want to be very careful with them.

190
00:14:27,200 --> 00:14:33,080
Use the ORM, it's there for a reason, and just be very, very thoughtful

191
00:14:33,080 --> 00:14:40,960
about whether you need to use raw SQL or not, because in all likelihood, you don't have to.

192
00:14:40,960 --> 00:14:43,760
All right, so let's talk about user uploads.

193
00:14:43,800 --> 00:14:51,520
If you have a user upload, confirm that it is what you expect it to be.

194
00:14:51,520 --> 00:14:55,880
If your user is uploading a picture, if you expect a picture,

195
00:14:55,880 --> 00:14:59,400
check to see that it's a picture and not, say, a script.

196
00:14:59,400 --> 00:15:05,480
If you're not careful with user uploads, you can expose yourself to the risk of code injection.

197
00:15:05,480 --> 00:15:12,200
And on kind of a related note, if you ever received serialized data,

198
00:15:12,200 --> 00:15:19,120
if you ever received serialized data, pickled data, you want to be very careful

199
00:15:19,120 --> 00:15:27,720
and really think about whether you want to un-serialize it, de-serialize it, un-pickle it, whatever.

200
00:15:27,720 --> 00:15:37,640
If you do that, it really can be a Pandora's box type situation, and there's no way to know what's

201
00:15:37,640 --> 00:15:41,920
in that serialized data until you de-serialize it.

202
00:15:41,920 --> 00:15:48,120
So don't mess with it unless you are 100% sure that you trust the source.

203
00:15:48,120 --> 00:15:56,480
And this actually had something of a Python ecosystem application fairly recently.

204
00:15:56,480 --> 00:15:59,400
Basically, there was an insecure default in NumPy.

205
00:15:59,400 --> 00:16:06,680
It's fixed now, so it doesn't trust serialized data by default, something like that.

206
00:16:06,680 --> 00:16:11,680
I wrote about it back in 2019, and you can read it here.

207
00:16:11,680 --> 00:16:14,720
I'll post the slides to my Twitter.

208
00:16:14,720 --> 00:16:21,960
And then one more way that you can receive severed ears from the internet is

209
00:16:21,960 --> 00:16:26,520
by pip installing a package without checking its name.

210
00:16:26,520 --> 00:16:36,280
Basically, a malicious person could create a package that is compromising, and they could,

211
00:16:36,280 --> 00:16:48,440
in theory, upload it into PyPI, and then if it's close in name, either a typo or a very close name

212
00:16:48,440 --> 00:16:56,840
that you might guess for another package, you could end up installing this malicious code.

213
00:16:56,840 --> 00:17:00,480
And there actually was an instance of this as well.

214
00:17:00,480 --> 00:17:06,080
There were some typo squatters in the Python package index, and they were booted quickly,

215
00:17:06,080 --> 00:17:11,160
but it is a proof of concept.

216
00:17:11,160 --> 00:17:13,360
Like, this can happen.

217
00:17:13,360 --> 00:17:16,080
Don't guess any names of things you pip installed.

218
00:17:16,080 --> 00:17:18,520
Don't do it.

219
00:17:18,520 --> 00:17:22,360
So to summarize, be wary of inputs and uploads.

220
00:17:22,360 --> 00:17:24,800
Don't guess.

221
00:17:24,800 --> 00:17:26,160
All right.

222
00:17:26,160 --> 00:17:31,280
Another question is, how do you handle sensitive information?

223
00:17:31,280 --> 00:17:36,320
And this actually, all of our detectives have something interesting to say about this.

224
00:17:36,320 --> 00:17:42,440
They understand that information is valuable and that it is sometimes dangerous.

225
00:17:42,440 --> 00:17:47,840
They tend not to reveal their hunches before the appropriate time.

226
00:17:47,840 --> 00:17:56,320
They will explain their methods if it's important, but they won't do it if it's premature

227
00:17:56,320 --> 00:18:00,400
or if it could compromise something.

228
00:18:00,440 --> 00:18:05,280
They don't always tell the authorities the full story.

229
00:18:05,280 --> 00:18:12,400
And actually, like, across the board, all three of them have discussed for blackmailers

230
00:18:12,400 --> 00:18:19,160
because blackmailers wield personal information as a weapon.

231
00:18:19,160 --> 00:18:26,000
And we're going to talk about source code and user data and how we should handle it

232
00:18:26,000 --> 00:18:28,880
and treat it and be careful with it.

233
00:18:28,880 --> 00:18:31,840
So first, let's talk about source code.

234
00:18:31,840 --> 00:18:39,920
You want to follow good code hygiene practice regardless of whether the repository is public

235
00:18:39,920 --> 00:18:41,640
or private.

236
00:18:41,640 --> 00:18:49,040
And this includes things like not committing sensitive information to version control.

237
00:18:49,040 --> 00:18:54,480
And it also includes things like keeping in mind that a problem could come from within

238
00:18:54,480 --> 00:18:58,600
your own organization, within your house.

239
00:18:58,600 --> 00:19:04,280
That's where the issue could lie, and that's part of why you need to be careful with your

240
00:19:04,280 --> 00:19:11,520
code hygiene whether your repository is public or private.

241
00:19:11,520 --> 00:19:17,080
Now, when we think about user data, I really like to be selective.

242
00:19:17,080 --> 00:19:23,760
I think that it is a totally valid question to ask whether you need to collect the data,

243
00:19:23,920 --> 00:19:29,480
whether you need to store the data, whether maybe you need the data but you need some

244
00:19:29,480 --> 00:19:37,040
help handling it securely and there are places and things that you could delegate to groups

245
00:19:37,040 --> 00:19:43,040
and organizations that do this better, right?

246
00:19:43,040 --> 00:19:48,000
If you don't collect the data, you can't lose it.

247
00:19:48,000 --> 00:19:52,280
And that is a win right there.

248
00:19:52,800 --> 00:19:57,640
I would also say that it's important to give your users tools to protect themselves.

249
00:19:57,640 --> 00:20:02,640
Earlier, I mentioned that if at all possible, you should give your users the ability to

250
00:20:02,640 --> 00:20:04,920
use two-factor authentication.

251
00:20:04,920 --> 00:20:11,800
It protects them, but it also protects you because a malicious party is less likely to

252
00:20:11,800 --> 00:20:18,640
be able to log into their account and cause problems, cause data loss, things like that.

253
00:20:19,000 --> 00:20:25,840
And just as a final note, I like to encourage people to think about personal data like glitter.

254
00:20:25,840 --> 00:20:32,000
If you have a tube of glitter and you just dump it on the sidewalk, you are never getting

255
00:20:32,000 --> 00:20:33,000
that data back.

256
00:20:33,000 --> 00:20:39,680
It is going to go everywhere, is going to turn up in places you don't expect, and you

257
00:20:39,680 --> 00:20:44,440
can never ever get it all back in the tube of glitter.

258
00:20:44,440 --> 00:20:50,960
So if you approach data like that, I think that's the sort of seriousness that you need

259
00:20:50,960 --> 00:20:54,960
to bring to the table here.

260
00:20:54,960 --> 00:20:56,680
All right.

261
00:20:56,680 --> 00:21:04,580
So to summarize, both source code and user data deserve careful consideration.

262
00:21:04,580 --> 00:21:08,200
You can't lose data that you don't collect.

263
00:21:08,200 --> 00:21:12,080
Get is amazing, but it's not for everything.

264
00:21:12,720 --> 00:21:16,920
Yeah, that's a summary of user data and your source code.

265
00:21:16,920 --> 00:21:17,920
All right.

266
00:21:17,920 --> 00:21:26,160
So for a final question, we're going to ask, are you up to date on your knowledge of cigar

267
00:21:26,160 --> 00:21:28,200
ash?

268
00:21:28,200 --> 00:21:32,400
And this question is for the one and only Sherlock Holmes.

269
00:21:32,400 --> 00:21:35,160
He is constantly learning about his field.

270
00:21:35,160 --> 00:21:36,840
He's an experimenter.

271
00:21:36,880 --> 00:21:44,400
He shares his findings with Scotland Yard, for example, his treaties on all the cigar

272
00:21:44,400 --> 00:21:46,760
ashes in existence.

273
00:21:46,760 --> 00:21:53,040
He is willing to do things in new ways and share his insights.

274
00:21:53,040 --> 00:21:58,180
And so this is really about the importance of continued learning and forward progress.

275
00:21:58,180 --> 00:22:00,560
Security is a continual process.

276
00:22:00,560 --> 00:22:03,640
You're never secure and then you're done and you check that off and you never have to think

277
00:22:03,640 --> 00:22:04,640
about it again.

278
00:22:04,640 --> 00:22:06,840
It does not happen.

279
00:22:06,840 --> 00:22:13,640
New vulnerabilities are found, new exploits and attack vectors are executed, and you just

280
00:22:13,640 --> 00:22:15,920
have to keep going.

281
00:22:15,920 --> 00:22:20,640
This is true on a personal level, thinking about your own personal practice and your

282
00:22:20,640 --> 00:22:26,320
own code, but it's true on a company level and on an industry level.

283
00:22:26,320 --> 00:22:32,760
And it's actually really nice to see that PSF is investing in this sort of thing.

284
00:22:32,760 --> 00:22:41,440
They have recently put time and money into modernizing and updating some of their infrastructure.

285
00:22:41,440 --> 00:22:48,440
There have been changes within the Python packaging authority, and they in general are

286
00:22:48,440 --> 00:22:53,280
a more secure organization today than they were a few years back.

287
00:22:53,280 --> 00:23:02,160
And that is through purposeful investment and just investment in time and resources

288
00:23:02,160 --> 00:23:06,120
and all the planning that went into this.

289
00:23:06,120 --> 00:23:11,000
So thank you, PSF, for leading the way and for leading by example.

290
00:23:11,000 --> 00:23:13,680
I think it's really great.

291
00:23:13,680 --> 00:23:17,400
So to summarize, security is never, ever done.

292
00:23:17,400 --> 00:23:21,840
Good security is a product of continual learning and iteration.

293
00:23:22,440 --> 00:23:23,440
All right.

294
00:23:23,440 --> 00:23:29,960
So to close, I want to encourage you to approach your code with skepticism.

295
00:23:29,960 --> 00:23:38,040
It is okay to ask questions about your code and poke at it a little and try to find weaknesses.

296
00:23:38,040 --> 00:23:42,840
It's better if you find it than if someone else does.

297
00:23:42,840 --> 00:23:53,760
Be willing to ask the question like, where is my code maybe a little weak?

298
00:23:53,760 --> 00:23:58,600
What kind of exploit might be tried against my project?

299
00:23:58,600 --> 00:24:03,760
And try to break it.

300
00:24:03,760 --> 00:24:08,240
It's a really interesting process to learn by doing, and I just encourage you to never

301
00:24:08,240 --> 00:24:14,280
be afraid of asking questions of your code and poking at it and prodding it a little

302
00:24:14,280 --> 00:24:17,520
to see how you can make it better.

303
00:24:17,520 --> 00:24:20,760
So I have a few resources for you.

304
00:24:20,760 --> 00:24:28,360
If you want some additional reading on Python and security, these will be on my Twitter.

305
00:24:28,360 --> 00:24:31,880
And just to close, my name is Haley Dun Braver.

306
00:24:31,880 --> 00:24:37,000
I'm an experienced developer advocate and I'm looking for my next role.

307
00:24:37,000 --> 00:24:40,240
If you have anyone in the community, I would love to hear from you.

308
00:24:40,240 --> 00:24:45,640
You can find me on Twitter, HaleyDunB, or my email address is there.

309
00:24:45,640 --> 00:24:50,960
And I just love Pythonistas, so I would love to hear from you.

310
00:24:50,960 --> 00:24:56,880
I would like to say thank you to my wonderful artistic mother, Noelle Cook, who drew all

311
00:24:56,880 --> 00:24:57,880
the snakes.

312
00:24:57,880 --> 00:24:59,560
I love them.

313
00:24:59,560 --> 00:25:01,600
I'm a little obsessed.

314
00:25:01,600 --> 00:25:02,600
And they're just great.

315
00:25:02,600 --> 00:25:04,920
They're great.

316
00:25:05,000 --> 00:25:10,120
And most importantly, I want to thank you and all the organizers at PythTexas.

317
00:25:10,120 --> 00:25:12,800
Thank you for being flexible with your event.

318
00:25:12,800 --> 00:25:18,760
And hopefully one day I can see you all in Texas in the semi-near future.

319
00:25:18,760 --> 00:25:20,640
It's been great.

320
00:25:20,640 --> 00:25:22,000
Thanks so much, PythTexas.

