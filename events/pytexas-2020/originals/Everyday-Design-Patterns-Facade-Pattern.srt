1
00:00:00,000 --> 00:00:22,000
I want to thank the Pi Texas organizers for putting on this conference. I was really looking

2
00:00:22,000 --> 00:00:27,120
forward to coming down to Austin to hang out with some friends, talk about Python,

3
00:00:27,120 --> 00:00:33,040
and eat some brisket. But unfortunately, that's not in the cards for 2020. Hopefully we can make it

4
00:00:33,040 --> 00:00:38,480
happen next year. And to everybody out there, thank you for tuning into the session. I really

5
00:00:38,480 --> 00:00:45,440
appreciate your time. My name is Ali Sivji. You can find me on Twitter. I am at Kaya Sivjas.

6
00:00:46,800 --> 00:00:52,960
I'm one of the organizers of the Chicago Python users group. We call ourselves Chippy. Chippy is

7
00:00:52,960 --> 00:00:58,960
one of the largest Python communities in the world. We have over 6,000 members, and every month we

8
00:00:58,960 --> 00:01:04,240
usually hold three to five events. Normally at this time, I didn't invite you all to come out to

9
00:01:04,240 --> 00:01:11,360
Chicago and attend a Chippy event, but we've had to cancel all of our in-person meetups until it's

10
00:01:11,360 --> 00:01:16,800
safe to meet in large groups. But we have been engaging our community through various online

11
00:01:16,800 --> 00:01:23,040
platforms. We recently started live streaming our events to our YouTube channel. Now you don't

12
00:01:23,040 --> 00:01:27,120
actually need to come out to Chicago to attend a Chippy event. You can do it from the comforts of

13
00:01:27,120 --> 00:01:34,160
your own home. Check out our channel, subscribe to it, hit that bell icon, and you'll get notified of

14
00:01:34,160 --> 00:01:42,240
all of our upcoming live streams. Hope to see you all there. Let's get started. So this talk is titled

15
00:01:42,240 --> 00:01:47,600
Everyday Design Patterns, and I really wanted to emphasize that we don't have to be designing

16
00:01:47,600 --> 00:01:53,360
complex distributed systems to implement design patterns. We can go ahead and use them in our

17
00:01:53,360 --> 00:02:01,280
everyday code. So I want to start off by sharing experience of how the facade pattern made my code

18
00:02:01,280 --> 00:02:10,880
easy to change. In the Chicago Python Slack, we have a bot that displays a list of our upcoming

19
00:02:10,880 --> 00:02:18,880
events every time we use the slash busy beaver events command. Like most user groups, Chicago

20
00:02:18,880 --> 00:02:27,840
Python leverages the Meetup platform to publicize our events. And our Slack bot uses the Meetup API

21
00:02:27,840 --> 00:02:34,560
to fetch a list of upcoming events. In August of last year, Meetup announced that they're

22
00:02:34,560 --> 00:02:41,040
going to remove version two of their API, and they're going to require all clients to migrate

23
00:02:41,040 --> 00:02:48,320
to version three. This wasn't a problem. I was using a Python API client. I probably just had to

24
00:02:48,320 --> 00:02:52,880
go out and update this client. I'm going to go ahead and probably change a few calls, and I'd

25
00:02:52,880 --> 00:03:00,000
be good to go. Unfortunately, the project I was using was in maintenance mode. So what does this

26
00:03:00,000 --> 00:03:07,600
really mean? Looking at the documentation, it doesn't seem like there's much support for the

27
00:03:07,600 --> 00:03:14,080
version three API. So we're going to have to roll up our sleeves and do things the old-fashioned way.

28
00:03:14,080 --> 00:03:19,040
That is, we're going to now have to use requests. We're going to hit that Meetup API. We're going

29
00:03:19,040 --> 00:03:25,760
to parse the resulting JSON. Usually this means that we're going to have to go out and update

30
00:03:25,760 --> 00:03:33,200
integration code across our project. Fortunately, I had used the facade pattern when designing this

31
00:03:33,200 --> 00:03:40,480
integration. In this image, you can see a diff for all the changes that are required to change the

32
00:03:40,480 --> 00:03:46,800
Meetup integration from version two to version three. I only had to change this one class.

33
00:03:47,360 --> 00:03:53,200
Then I updated all my contract tests, and I was done. All the code that leveraged this

34
00:03:53,200 --> 00:04:00,080
Meetup.com integration, it worked the same as before. The facade pattern's pretty awesome,

35
00:04:00,080 --> 00:04:03,920
but we're getting a bit ahead of ourselves. Let's talk about design patterns.

36
00:04:13,040 --> 00:04:19,440
Design patterns are solutions to commonly occurring problems in software design. We can think of

37
00:04:19,440 --> 00:04:26,400
design patterns as customizable blueprints that can be used to implement a solution to a known

38
00:04:26,400 --> 00:04:33,200
problem. When we use a pattern, we're going to need to adapt it to our specific use case or the

39
00:04:33,200 --> 00:04:40,960
specific needs for our project. There are many benefits of using design patterns. Design patterns

40
00:04:40,960 --> 00:04:47,200
are tried and tested solutions to commonly occurring problems in software design. Design

41
00:04:47,200 --> 00:04:54,720
patterns are not specific to any one domain or any one application area. Design patterns make

42
00:04:54,720 --> 00:05:00,560
our code reusable. We can extract the functionality we need and use it in a separate project.

43
00:05:02,480 --> 00:05:06,720
In design patterns, they give us a shared vocabulary with other developers,

44
00:05:06,720 --> 00:05:12,240
and this is really important. Once we have a vocabulary, we can communicate with other

45
00:05:12,240 --> 00:05:19,440
developers. Common language, it elevates the way we think. We can talk about architecture

46
00:05:19,440 --> 00:05:24,640
by talking about high-level abstractions without focusing on low-level details.

47
00:05:26,240 --> 00:05:30,720
I wouldn't be giving the full picture if I didn't talk about some of the criticisms

48
00:05:30,720 --> 00:05:36,720
of design patterns. Design patterns are considered workarounds for the limitations

49
00:05:36,800 --> 00:05:43,360
of a programming language. For example, in Java, there's design patterns that mimic the behavior

50
00:05:43,360 --> 00:05:50,640
of language features like multiple inheritance and decorators. Languages like Python have these

51
00:05:50,640 --> 00:05:58,160
features built into the language. Always relying on design patterns without thinking about the

52
00:05:58,160 --> 00:06:05,200
larger picture, it can lead us to design inefficient solutions that have many levels of unnecessary

53
00:06:05,200 --> 00:06:13,440
hierarchy. And finally, as programmers, we have a tendency to solve a problem using the latest and

54
00:06:13,440 --> 00:06:19,360
greatest thing that we just learned about. Design patterns are great, but they're not a holy grail.

55
00:06:19,360 --> 00:06:25,520
We're going to need to understand how to use them properly. I find a lot of talks on design patterns,

56
00:06:25,520 --> 00:06:32,400
they try to cover way too many patterns, so I want to do the exact opposite. In this talk,

57
00:06:32,400 --> 00:06:37,360
we're only going to be talking about a single pattern, and that pattern unsurprisingly is the

58
00:06:37,360 --> 00:06:52,560
facade pattern. So imagine we have a home theater system that has a bunch of different components,

59
00:06:52,560 --> 00:06:59,040
say we got a TV, a cable box, a Blu-ray player, a receiver, and a bunch of others.

60
00:07:00,000 --> 00:07:04,960
Each of these pieces of equipment, they have their own remote, and we can use each of these

61
00:07:04,960 --> 00:07:11,760
remotes to turn on and interact with each of these components. Or we can program an all-in-one remote.

62
00:07:12,560 --> 00:07:18,640
In this remote, it has a simple interface. If we want to go out and just watch TV, we can click a

63
00:07:18,640 --> 00:07:25,440
button, and we can program that button to turn on our TV and turn on our cable box. If we want to

64
00:07:26,000 --> 00:07:32,880
watch a Blu-ray or a DVD, we can program the remote to turn on our TV and turn on our Blu-ray

65
00:07:32,880 --> 00:07:40,240
player. This all-in-one remote, it provides a simple interface to all of our components of that

66
00:07:40,240 --> 00:07:48,320
home theater system. This is the class diagram of a facade pattern. Here we can see that we have

67
00:07:48,320 --> 00:07:53,520
multiple clients interacting with a complex subsystem through a facade.

68
00:07:55,760 --> 00:08:02,720
The facade pattern has many benefits. It simplifies the interface to a library,

69
00:08:02,720 --> 00:08:10,720
a framework, or a complex set of classes. If the user requires some lower-level functionality,

70
00:08:10,720 --> 00:08:15,760
they can bypass the facade and interact with whatever class they need to as required.

71
00:08:16,480 --> 00:08:20,960
But for most clients, having a facade is going to be a good enough interface.

72
00:08:23,360 --> 00:08:28,720
The facade pattern also reduces the number of things that our client needs to know about.

73
00:08:30,080 --> 00:08:37,040
The facade pattern promotes weak coupling between our subsystem and our clients. If the underlying

74
00:08:37,040 --> 00:08:43,680
subsystem changes, we can go ahead and change our facade, and our clients wouldn't know any different.

75
00:08:46,480 --> 00:08:52,640
The facade pattern, it provides us a way to define layers in our software architecture,

76
00:08:52,640 --> 00:08:59,040
and as a side effect, we can stub out each of these boundaries and simplify our testing.

77
00:08:59,040 --> 00:09:01,040
We're going to come back to that a little bit later.

78
00:09:04,000 --> 00:09:08,160
And finally, we can use the facade pattern to break apart a monolith.

79
00:09:08,800 --> 00:09:13,360
We do this by keeping our original functionality, but we place that functionality

80
00:09:13,360 --> 00:09:20,320
behind a facade, and then we start rewriting our client logic to deal with this facade.

81
00:09:20,320 --> 00:09:26,080
And then whenever we're ready to make the switch, we can replace the facade's method calls with

82
00:09:26,080 --> 00:09:34,000
calls out to another service via an API or a queue. Let's explore the facade pattern

83
00:09:34,000 --> 00:09:40,960
with a case study. Normally, when I cut a new version of a software that I own,

84
00:09:41,600 --> 00:09:47,120
I include a changelog that describes the changes that I made since that last release.

85
00:09:48,880 --> 00:09:53,920
Here's an example changelog. We can see that there's a list of changes with links to the

86
00:09:53,920 --> 00:10:00,560
relevant pull requests. I generate these changelogs manually, and it's not really a lot of fun,

87
00:10:00,560 --> 00:10:03,760
so let's think about how we can write a script to automate that process.

88
00:10:04,000 --> 00:10:10,560
This project, it's on GitHub. The master branch is protected, so any changes that need to be made,

89
00:10:10,560 --> 00:10:18,080
they can only be made via a pull request. I also squash all of the commits before I make a merge

90
00:10:18,080 --> 00:10:26,240
into master. This makes generating a changelog pretty straightforward. We start off by getting

91
00:10:27,200 --> 00:10:35,280
the last published at date of the release that we care about. We grab all the commits since that

92
00:10:35,280 --> 00:10:42,880
date, and finally, we're going to get all the commit messages and then generate a changelog.

93
00:10:45,040 --> 00:10:52,080
Fortunately, we can use the GitHub API to get this kind of information. So let's write up some code

94
00:10:52,080 --> 00:10:59,360
to generate a changelog. Our function, it's going to take in three parameters. We have owner,

95
00:10:59,360 --> 00:11:06,480
we have repo, we have function, also we have version, and then we're going to use the request

96
00:11:06,480 --> 00:11:13,520
library to hit up the GitHub API. We're going to find out when that release was published.

97
00:11:13,520 --> 00:11:20,400
If this version exists, we're going to extract the date time string and return it. If not,

98
00:11:20,400 --> 00:11:28,240
we're going to raise an exception. Next, we're going to use the GitHub API to find all commit

99
00:11:28,240 --> 00:11:34,320
messages since that last version was published, and finally, we're going to return the commit

100
00:11:34,320 --> 00:11:39,440
messages in chronological order. We're going to have the earliest message all the way to the

101
00:11:39,440 --> 00:11:46,000
latest message. Now, let's start thinking about how can we test the script we just wrote?

102
00:11:46,960 --> 00:11:53,200
Our current workflow, it looks like this. We're going to make some kind of HTTP requests

103
00:11:53,200 --> 00:11:58,320
to the GitHub API. We're going to get some responses back, and when we're testing,

104
00:11:58,320 --> 00:12:04,000
we really don't want to be depending on this external system. If GitHub goes down,

105
00:12:04,000 --> 00:12:07,600
we're not really going to be able to get any work done, and that doesn't make a lot of sense.

106
00:12:08,320 --> 00:12:15,120
This is why when we go out and write our tests, we want to replace GitHub with a stub that returns

107
00:12:15,120 --> 00:12:23,200
can responses. This enables us to write tests without GitHub, and we can make our tests

108
00:12:23,200 --> 00:12:36,800
deterministic. Let's take a look at our test function. We're going to use a package called

109
00:12:36,800 --> 00:12:43,760
responses to stub out calls to our API, and the way this library works is we're going to specify

110
00:12:44,320 --> 00:12:53,040
can responses for a given URL when it's hit with a given HTTP verb. Next, we're going to run this

111
00:12:53,040 --> 00:12:58,240
function that we want to test, and then finally, we're going to confirm that our function returns

112
00:12:58,240 --> 00:13:06,880
the values we expect to see. But we have one problem. Directly integrating third-party libraries

113
00:13:06,880 --> 00:13:14,080
or third-party APIs into our business logic, it couples our code to something we don't control.

114
00:13:14,880 --> 00:13:20,560
If the thing we depend upon changes, we're going to have to rewrite our business logic,

115
00:13:20,560 --> 00:13:25,920
as well as go out and rewrite our tests to make sure things work as expected.

116
00:13:27,600 --> 00:13:34,720
Our current approach has a few limitations in addition to this tight coupling. Our code currently

117
00:13:34,720 --> 00:13:40,160
only works for public repositories. We're going to need to use a GitHub access token

118
00:13:40,160 --> 00:13:45,600
with the correct privileges to authenticate ourselves if we want to ever access private repos.

119
00:13:47,600 --> 00:13:52,080
We can probably also make better use of the request library. Specifically,

120
00:13:52,080 --> 00:13:58,000
we can be using the sessions feature as well as explicitly setting headers.

121
00:13:58,160 --> 00:14:04,080
Also, when we directly integrate integration code into our business logic, it means that our

122
00:14:04,080 --> 00:14:09,600
logic, our business logic has to be intelligent. It needs to know about things like error checking

123
00:14:09,600 --> 00:14:15,760
for HTTP errors or for exceptions. It also needs to know about things like retry logic,

124
00:14:15,760 --> 00:14:23,920
chase on processing logic. Earlier, we used a function to fetch a list of commits. This time,

125
00:14:24,080 --> 00:14:29,840
fetch a list of commits. This time, we want to hide our implementation. We want to keep track

126
00:14:29,840 --> 00:14:36,560
of internal state. We also want to implement some additional logic on top of this. This seems like

127
00:14:36,560 --> 00:14:43,360
the perfect opportunity to use a class. So let's take a step back and talk about object-oriented

128
00:14:43,360 --> 00:15:00,400
programming in Python. So object-oriented programming is a paradigm that's based around

129
00:15:00,400 --> 00:15:07,280
objects. We try to model real world things as objects. And when we design a solution,

130
00:15:07,360 --> 00:15:12,960
it involves a collection of collaborating objects that communicate with each other by sending

131
00:15:12,960 --> 00:15:21,680
messages. Objects have data along with behavior. And object-oriented programming allows us to think

132
00:15:21,680 --> 00:15:28,000
at a higher level. We can create objects with set data and set behavior, and then we can perform

133
00:15:28,000 --> 00:15:33,120
actions on those objects to accomplish the task we're trying to do versus telling the computer

134
00:15:33,120 --> 00:15:40,480
to do things in a sequential, linear manner. In object-oriented programming, we have classes

135
00:15:40,480 --> 00:15:47,680
and we have objects. A class, that's a template that allows us to create objects. We can also say

136
00:15:47,680 --> 00:15:55,920
that we created an instance of an object from a class. I really like this cookie cutter analogy.

137
00:15:55,920 --> 00:16:01,280
The cookie cutter is like a class, and each cookie is an instance of a class, like an object.

138
00:16:03,280 --> 00:16:08,160
Object-oriented programming has four main principles. There's encapsulation,

139
00:16:08,160 --> 00:16:11,680
there's abstraction, there's inheritance, and then there's polymorphism.

140
00:16:13,120 --> 00:16:17,360
For the problem that we're solving with the facade pattern, we're only going to be leveraging

141
00:16:17,360 --> 00:16:23,600
encapsulation and abstraction. So let's just focus in on those. Let's start with encapsulation.

142
00:16:24,480 --> 00:16:30,960
Encapsulation bundles data and behavior into a single logical unit, and we call that unit

143
00:16:30,960 --> 00:16:38,720
an object. Encapsulation is used to hide the internal representation of an object.

144
00:16:40,400 --> 00:16:48,000
Capsule pills are a great form of encapsulation. They hide the active ingredient and expedience

145
00:16:48,000 --> 00:16:58,240
inside of a gelling agent. Python doesn't really have any kind of methods built into the language

146
00:16:58,240 --> 00:17:04,960
to enforce encapsulation, but we do have some conventions that allow us to know how data

147
00:17:04,960 --> 00:17:08,320
can be accessed and how functions should be called.

148
00:17:10,480 --> 00:17:16,560
Instance variables and functions, they can be public, and this means they can just be used by

149
00:17:16,560 --> 00:17:25,040
everybody. Protected variables and functions start with a single underscore. These elements,

150
00:17:25,040 --> 00:17:31,120
they're not going to be part of a class's public interface. Python has a philosophy that we're all

151
00:17:31,120 --> 00:17:37,040
consenting adults, so if you want to go ahead and use protected variables, there's nothing out there

152
00:17:37,040 --> 00:17:41,360
stopping you. In fact, it actually might be the right way to solve the problem that you're trying

153
00:17:41,360 --> 00:17:47,440
to solve, but just don't be surprised if this interface does change later on. It's something

154
00:17:47,440 --> 00:17:54,640
that's not guaranteed. And then we also have private variables and private functions,

155
00:17:54,640 --> 00:18:01,280
and these begin with two underscores. And when the Python interpreter sees a private attribute,

156
00:18:01,280 --> 00:18:08,800
it performs a type of name mangling to make sure that these attributes are hidden. These items

157
00:18:08,800 --> 00:18:14,320
still can be accessed since this name mangling is pretty deterministic, or it is actually

158
00:18:14,320 --> 00:18:21,280
deterministic, but this kind of practice, it's really highly discouraged. Remember,

159
00:18:21,280 --> 00:18:29,040
encapsulation is about information hiding. Next, let's discuss abstraction.

160
00:18:37,280 --> 00:18:42,480
With abstraction, we're able to hide the complexity of our internal implementation

161
00:18:42,480 --> 00:18:48,800
inside of an object. It's also recommended that when objects communicate with each other,

162
00:18:48,800 --> 00:18:56,400
they do so by calling each other's public methods. Abstraction, it hides complexity. It also lets us

163
00:18:56,400 --> 00:19:03,280
isolate the impact of changes. We can go ahead and change the internal implementation without

164
00:19:03,280 --> 00:19:10,720
changing the calling code. Cars, those are complex systems with many moving parts,

165
00:19:11,520 --> 00:19:17,600
but in order to drive a car, you really don't have to understand how a car works. You just need to be

166
00:19:17,600 --> 00:19:23,120
able to use the interface. And for a car, this would be a steering wheel, an accelerator, and a

167
00:19:23,120 --> 00:19:31,360
brake. It's the same for Python. If we're given a class, we really don't care about the underlying

168
00:19:31,360 --> 00:19:37,520
implementation. The interface is the only thing that matters to us. The interface, that's exactly

169
00:19:37,520 --> 00:19:46,320
how we interact with this object. Remember, abstraction is about hiding our implementation.

170
00:19:49,600 --> 00:19:54,560
And just one more time, encapsulation is about information hiding. Abstraction is about

171
00:19:54,560 --> 00:20:01,840
implementation hiding. Now that we have a bit more context, let's take a look at how we can use a

172
00:20:01,840 --> 00:20:09,600
class to wrap our GitHub integration. Let's set some guidelines for the acceptance criteria

173
00:20:09,600 --> 00:20:20,080
for our MVP. We want to use request.sessions to improve performance. Let's also use HTTP basic

174
00:20:20,080 --> 00:20:27,760
auth with a GitHub access token so we can access private repos. We're going to want to set some

175
00:20:27,760 --> 00:20:35,600
HTTP headers, be a good citizen of the web. It would be great if this class had some code

176
00:20:35,600 --> 00:20:43,280
to handle errors. And if this class could also handle JSON parsing, this abstraction,

177
00:20:43,280 --> 00:20:48,800
it would be pretty complete. This is a high level overview of what we're really trying to do.

178
00:20:49,840 --> 00:20:54,640
We're going to have a GitHub client that we initialize with a token, and then we can call

179
00:20:54,640 --> 00:20:58,880
functions on this client and get back the information that we requested.

180
00:21:00,720 --> 00:21:08,400
So we'll start by creating a GitHub client class. This takes in an OAuth token. We set some headers.

181
00:21:12,320 --> 00:21:16,960
We create a session and save that to an instance variable.

182
00:21:17,200 --> 00:21:23,760
And this class has a function, getReleaseDate, and this is going to get the release date for a given

183
00:21:23,760 --> 00:21:29,280
version. And so this function is going to take in some parameters. We're going to construct a URL.

184
00:21:30,080 --> 00:21:35,760
We're going to hit that URL with the request.sessions that we just stored in the instance

185
00:21:35,760 --> 00:21:41,280
variable. If the version doesn't exist, we're going to raise an exception. Otherwise, we're

186
00:21:41,280 --> 00:21:46,880
going to extract the data that we requested. And then we're going to get the URL. And then we're

187
00:21:46,880 --> 00:21:51,040
going to get the data that we need from this JSON blob that we just got back, and then we're going

188
00:21:51,040 --> 00:21:58,000
to return that back to our caller. This class, it also has another function, and this is called

189
00:21:58,000 --> 00:22:04,800
getCommitsMessages. It's going to get all the commit messages from a given date. So the function's

190
00:22:04,800 --> 00:22:10,560
going to take some parameters. We're going to construct a URL. We're going to hit that URL

191
00:22:11,120 --> 00:22:15,920
with the session that we stored in the instance variable. We're going to raise an exception if

192
00:22:15,920 --> 00:22:22,640
it's not within an acceptable range. And finally, we're going to extract the items that we need from

193
00:22:22,640 --> 00:22:29,600
our JSON blob, and then we're going to return that information back to our caller. To create a change

194
00:22:29,600 --> 00:22:34,560
log, we're going to need to create one additional function. I usually call this function a driver

195
00:22:34,560 --> 00:22:42,320
function. It's going to run our class that we just wrote. We're going to create an instance of a

196
00:22:42,320 --> 00:22:47,840
GitHub client. We're going to pass in our API token when we initialize it. We're going to grab

197
00:22:47,840 --> 00:22:53,600
the release date, save that to a variable, and then we're going to go ahead and grab the commits

198
00:22:53,600 --> 00:23:00,000
from that last release. Now let's take a look at how we can go ahead and test this change log we

199
00:23:00,000 --> 00:23:06,320
just wrote. Like before, we're going to use the responses library to stub out the GitHub API when

200
00:23:06,320 --> 00:23:14,000
we go ahead and test. Here's the code to test the getReleaseDate function, and in this slide,

201
00:23:14,000 --> 00:23:21,040
we're going to be testing our getCommitMessages function. This implementation, it has a driver

202
00:23:21,040 --> 00:23:25,600
function. This is code that's going to be used, so we have to find a way we can test this as well.

203
00:23:26,560 --> 00:23:32,320
And we're going to do this by creating a GitHub client stub that's going to return canned

204
00:23:32,320 --> 00:23:41,920
responses, and this enables us to write simple unit tests for this generateChangeLogDriver function.

205
00:23:43,280 --> 00:23:49,360
Now we can go ahead and monkey patch our GitHub client with the stub we just created above,

206
00:23:50,480 --> 00:23:57,680
and we can ensure our function works as expected. Note that in this test, we replaced our boundary

207
00:23:57,680 --> 00:24:03,760
with a known value. Instead of replacing our external boundary with the GitHub boundary

208
00:24:04,320 --> 00:24:10,560
with a stub, we replaced something inside of our system with a stub.

209
00:24:14,240 --> 00:24:19,360
And so wrapping these third-party integrations, you saw it requires a little bit of extra work.

210
00:24:19,360 --> 00:24:23,280
We have to write a driver function, go ahead and test that driver function.

211
00:24:23,280 --> 00:24:29,520
What are some of the benefits of using this approach? Libraries, they're general purpose

212
00:24:29,520 --> 00:24:34,400
tools. They're meant to be used by many different types of people for many different types of

213
00:24:34,400 --> 00:24:41,840
projects. We're going to provide a simple interface that only does the things that we need.

214
00:24:42,400 --> 00:24:47,600
So we're taking this giant library and we're reducing it to only the things that we care about.

215
00:24:47,600 --> 00:24:50,240
This makes our code a little bit easier to test.

216
00:24:50,240 --> 00:24:55,920
Another benefit is that our code is loosely coupled. Business logic and integration logic,

217
00:24:55,920 --> 00:25:00,320
they can interact with each other, but they don't have any sense of how each other is

218
00:25:00,320 --> 00:25:06,080
implemented. This allows us to build flexible systems, and we can minimize the number of

219
00:25:06,080 --> 00:25:16,400
interdependencies between all of our objects. And here we used a class to encapsulate parts of our

220
00:25:16,720 --> 00:25:23,760
code that change from parts of our code that stay the same. If this GitHub API, it ever changes,

221
00:25:23,760 --> 00:25:30,480
we can go ahead and update our GitHub integration code without having to go ahead and test,

222
00:25:30,480 --> 00:25:34,880
or without having to go ahead and change our business logic or the tests related to our

223
00:25:34,880 --> 00:25:42,800
business logic. And this pattern, as we talked about, it simplifies testing. We can replace

224
00:25:42,800 --> 00:25:48,080
external boundaries with a stub. There's a fantastic talk about this by Gary Bernhardt

225
00:25:48,800 --> 00:25:55,840
from PyCon 2013. It's a fairly old talk, but the concepts that Gary talks about, they're priceless.

226
00:25:58,000 --> 00:26:03,680
And if this kind of way of coding looks familiar to you, that's because it's part of software

227
00:26:03,680 --> 00:26:09,920
architecture methodologies, such as hexagonal architecture, also known as web architecture.

228
00:26:09,920 --> 00:26:16,160
Hexagonal architecture, also known as ports and adapters, and clean architecture.

229
00:26:17,360 --> 00:26:22,560
The idea behind both of these methodologies is that we want to create loosely coupled

230
00:26:22,560 --> 00:26:28,560
components, and then we want to connect these components using a series of adapters or a series

231
00:26:28,560 --> 00:26:34,960
of wrappers. And doing this, it's going to make our code easy to replace and easy to test.

232
00:26:35,920 --> 00:26:42,640
And that's the key point. We want our code to be able to change. Software is rarely static.

233
00:26:42,640 --> 00:26:48,320
When requirements change, we have to go and update our code to make sure it works for what we're

234
00:26:48,320 --> 00:26:56,320
trying to do now versus what we were trying to do before. So going back to our GitHub changelog

235
00:26:56,320 --> 00:27:02,800
example, our boss comes back to us. He absolutely loves what we did, but he wants us to use the

236
00:27:03,120 --> 00:27:09,440
GitHub GraphQL library. So let's briefly talk about what GraphQL is so we understand the

237
00:27:09,440 --> 00:27:25,760
context of the change that we're going to need to make. GraphQL is going to provide us with an

238
00:27:25,760 --> 00:27:33,120
API endpoint that accepts queries. And their backend, it's going to resolve the query that

239
00:27:33,120 --> 00:27:40,480
it's passed to the requested data elements. And since we're querying data, the server can fetch

240
00:27:40,480 --> 00:27:50,000
exactly what the clients ask for. In comparison, when we're using REST APIs, our clients need to

241
00:27:50,000 --> 00:27:55,280
go out and make multiple requests, and then we're going to have to piece together that data on the

242
00:27:55,280 --> 00:28:03,440
front end or inside of our clients. With GraphQL, we can go out and extract the exact data that we

243
00:28:03,440 --> 00:28:10,240
want from a single endpoint. So to solidify these concepts, let's work through an example.

244
00:28:11,040 --> 00:28:19,760
This is a GraphQL query. Given a repository and a release tag, we want to pull the published at field.

245
00:28:20,640 --> 00:28:26,720
These are the variables that we're going to substitute into our query. And this is the result

246
00:28:26,720 --> 00:28:32,640
of the query, and it's only the information that we asked for. It's just that one specific field.

247
00:28:33,680 --> 00:28:40,640
When we hit the GitHub REST API, we're sent back all this information when we only really care about

248
00:28:40,640 --> 00:28:48,000
that one key value pair. Recall this is our current workflow, and we're going to be able to

249
00:28:48,000 --> 00:28:54,000
use the GitHub REST client to get the information we want. And to make the request to change that

250
00:28:54,000 --> 00:29:00,240
our boss wants us to do, we're going to need to replace this REST client with a GraphQL client.

251
00:29:00,240 --> 00:29:06,480
The business logic that makes use of the GitHub client, it doesn't care if it's using a REST API

252
00:29:06,480 --> 00:29:13,680
client or a GraphQL client. The calling code treats the integration code like a black box.

253
00:29:14,480 --> 00:29:19,040
It knows it can initialize something with a token. It can ask for some sort of information

254
00:29:19,040 --> 00:29:26,080
and get that information it asks for back. Let's walk through the implementation of our GitHub

255
00:29:26,080 --> 00:29:32,160
GraphQL client. We're going to start off by creating a class that takes in a token. We're going to

256
00:29:32,160 --> 00:29:39,360
initialize a GraphQL session. We're going to save that session to an instance variable. And in our

257
00:29:39,840 --> 00:29:45,680
getReleasesDate function, we're going to pass in the same arguments as before. We want exactly that

258
00:29:45,680 --> 00:29:52,800
same function signature. We're going to create our query with our known values. We're going to hit

259
00:29:52,800 --> 00:29:58,400
the GraphQL endpoint, and then we're going to return the data we're looking for, or we're going

260
00:29:58,400 --> 00:30:05,600
to raise an exception. And in the getCommitsMessages function, that also has the same signature as

261
00:30:06,160 --> 00:30:12,560
before. Here we're going to create a query with our known variables. We're going to hit the GraphQL

262
00:30:12,560 --> 00:30:18,160
endpoint with that query. We're going to raise an exception if there's an error. And finally,

263
00:30:18,160 --> 00:30:24,400
we're going to parse the information we got back and return all those commit messages back to our

264
00:30:24,960 --> 00:30:28,160
caller. So going back to our generateChangeLogDriver function, we don't have to make any changes here.

265
00:30:28,160 --> 00:30:43,760
Our business logic, it doesn't care what kind of client it's using. It just cares that the client

266
00:30:43,760 --> 00:30:51,120
has the same interface as it had before. Now we're going to go out and update our contract tests,

267
00:30:51,120 --> 00:30:56,320
and we're done. We can go ahead and make a pull request and be happy that we used the facade

268
00:30:56,320 --> 00:31:05,040
pattern to wrap our GitHub integration. Let's recap. The libraries and frameworks we use,

269
00:31:05,040 --> 00:31:09,520
they're general purpose tools that are designed to solve many different types of problems.

270
00:31:10,320 --> 00:31:15,600
If we want to design something that solves our specific use case, we're going to have to actually

271
00:31:15,600 --> 00:31:22,160
go out and make it ourselves. We can use the facade pattern to provide a simple interface

272
00:31:22,160 --> 00:31:29,760
to a complex subsystem. This reduces coupling between our modules, and loosely coupled modules

273
00:31:30,480 --> 00:31:36,640
and loosely coupled systems, they're easy to change. And this is because we started a program

274
00:31:36,640 --> 00:31:43,600
to interfaces and not to implementations. As a result, our code is easier to test. We can

275
00:31:43,600 --> 00:31:49,520
replace our integration boundaries with values and let our architecture do the heavy lifting.

276
00:31:50,800 --> 00:31:56,720
Hopefully by exploring how the facade pattern leverages object-oriented design principles,

277
00:31:56,720 --> 00:32:03,920
we can see that the underlying concepts, they're not too complex. They're fairly straightforward.

278
00:32:05,280 --> 00:32:10,880
Design patterns aren't scary. Go out, learn a pattern, implement it in the language of your

279
00:32:10,880 --> 00:32:18,000
choice, preferably Python. Discover the benefits of adding more structure to your code. These are

280
00:32:18,000 --> 00:32:25,440
all the resources I used coming up with this talk. Thanks, everybody, for your time. Before I go,

281
00:32:25,440 --> 00:32:31,040
I do want to give a shout out to the Chicago Python users group. I would not be where I am

282
00:32:31,040 --> 00:32:36,240
without that fantastic organization. Thanks again for your time. My name is Ali Sivji.

283
00:32:36,240 --> 00:32:39,200
We'll see you in Austin, hopefully next year.

