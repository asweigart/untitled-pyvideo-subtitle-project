1
00:00:00,000 --> 00:00:21,960
Hello, PyTexas, it's Pandy Knight here.

2
00:00:21,960 --> 00:00:26,720
I'm the Automation Panda and I'm a huge Python fan, just like y'all.

3
00:00:26,720 --> 00:00:31,840
Have you ever seen those at-sign tokens on top of Python functions?

4
00:00:31,840 --> 00:00:36,000
Perhaps you've seen them on top of classes and methods as well.

5
00:00:36,000 --> 00:00:41,560
Those are decorators, one of Python's niftiest language features.

6
00:00:41,560 --> 00:00:43,640
Decorators are essentially wrappers.

7
00:00:43,640 --> 00:00:47,500
They add additional code to existing definitions.

8
00:00:47,500 --> 00:00:52,000
When used properly, they can clean up your code better than OxyClean.

9
00:00:52,000 --> 00:00:59,280
So today, let's learn how to use decorators.

10
00:00:59,280 --> 00:01:03,500
So here's a regular old hello world function.

11
00:01:03,500 --> 00:01:09,360
When we run it, it prints hello world, nothing fancy here.

12
00:01:09,360 --> 00:01:15,140
Now let's take that function and bam, add a decorator to it.

13
00:01:15,140 --> 00:01:21,200
Using this at-sign, we just added a decorator named tracer to hello world.

14
00:01:21,200 --> 00:01:25,740
So what is this decorator?

15
00:01:25,740 --> 00:01:31,320
Tracer is just another function, but it's special because it takes in another function

16
00:01:31,320 --> 00:01:34,560
as an argument.

17
00:01:34,560 --> 00:01:40,980
Since tracer decorates hello world, the hello world function is passed into tracer as an

18
00:01:40,980 --> 00:01:42,480
argument.

19
00:01:42,480 --> 00:01:44,440
Wow!

20
00:01:44,440 --> 00:01:49,100
So what's inside tracer?

21
00:01:49,140 --> 00:01:52,860
This decorator has an inner function named wrapper.

22
00:01:52,860 --> 00:01:54,640
Can you even do that?

23
00:01:54,640 --> 00:01:57,700
With Python, yes you can.

24
00:01:57,700 --> 00:02:04,180
The wrapper function prints entering, calls the function originally passed into the decorator,

25
00:02:04,180 --> 00:02:07,960
and then prints exiting.

26
00:02:07,960 --> 00:02:12,860
When tracer decorates hello world, that means hello world will be wrapped by entering and

27
00:02:12,860 --> 00:02:15,940
exiting print statements.

28
00:02:16,780 --> 00:02:21,660
Finally, the decorator returns the new wrapper function.

29
00:02:21,660 --> 00:02:26,460
Any time the decorated function is called, it will effectively be replaced by this new

30
00:02:26,460 --> 00:02:29,820
wrapper function.

31
00:02:29,820 --> 00:02:34,740
So when we call hello world, the trace statements are now printed too.

32
00:02:34,740 --> 00:02:35,740
Wow!

33
00:02:35,740 --> 00:02:36,740
That's amazing.

34
00:02:36,740 --> 00:02:41,500
That's how decorators work.

35
00:02:41,500 --> 00:02:45,300
Decorators wrap functions around functions.

36
00:02:45,300 --> 00:02:47,540
Think about them like candy bars.

37
00:02:47,540 --> 00:02:53,300
The decorator is like the foil wrapper, and the decorated function is like the chocolate

38
00:02:53,300 --> 00:02:57,900
or the candy bar inside.

39
00:02:57,900 --> 00:03:00,180
But how is this even possible?

40
00:03:00,180 --> 00:03:05,340
That decorator code looks confusing.

41
00:03:05,340 --> 00:03:11,220
Decorators are possible because in Python, functions are objects.

42
00:03:11,220 --> 00:03:17,020
In fancy language, we say functions are first order values.

43
00:03:17,020 --> 00:03:25,260
Since functions are just objects in Python, we can pass them into other functions as arguments,

44
00:03:25,260 --> 00:03:35,060
define new functions inside existing functions, and return a function from a function.

45
00:03:35,060 --> 00:03:39,580
This is all part of a paradigm called functional programming.

46
00:03:39,580 --> 00:03:43,980
Python supports functional programming because functions can be treated like objects.

47
00:03:43,980 --> 00:03:48,700
And that's awesome.

48
00:03:48,700 --> 00:03:56,540
So using functions as objects, decorators change how functions are called.

49
00:03:56,540 --> 00:04:03,020
Decorators create an outer decorator function around an inner decorated function.

50
00:04:03,020 --> 00:04:08,380
Remember, the outer function is like the foil wrapper, and the inner function is like the

51
00:04:08,380 --> 00:04:12,700
chocolate.

52
00:04:12,700 --> 00:04:17,500
Creating an outer function lets you add new code around the inner function.

53
00:04:17,500 --> 00:04:20,100
Some people call this advice.

54
00:04:20,100 --> 00:04:24,100
You can add advice before or after the inner function.

55
00:04:24,100 --> 00:04:29,260
You could even skip the inner function altogether.

56
00:04:29,260 --> 00:04:33,900
The best part is, decorators can be applied to any function.

57
00:04:33,900 --> 00:04:41,140
They make sharing code easy so you don't repeat yourself.

58
00:04:41,140 --> 00:04:46,460
Decorators are reminiscent of a paradigm called aspect-oriented programming, in which code

59
00:04:46,460 --> 00:04:53,300
can be cleverly inserted before and after points of execution.

60
00:04:53,300 --> 00:04:54,900
EAT!

61
00:04:54,900 --> 00:05:02,460
So remember, decorators wrap functions around functions, like candy bars.

62
00:05:02,460 --> 00:05:03,460
Hold on now.

63
00:05:03,460 --> 00:05:09,180
I think we have a problem in that Python code.

64
00:05:09,180 --> 00:05:14,180
If the wrapper function effectively replaces hello world, then what identity does hello

65
00:05:14,180 --> 00:05:16,500
world report?

66
00:05:16,500 --> 00:05:23,140
Unfortunately, its name is wrapper, and its help is also wrapper.

67
00:05:23,140 --> 00:05:26,940
That's not right.

68
00:05:26,940 --> 00:05:27,940
Never fear.

69
00:05:27,940 --> 00:05:30,060
There's an easy solution.

70
00:05:30,060 --> 00:05:34,620
The functools module provides a decorator named wraps.

71
00:05:34,620 --> 00:05:43,460
Put functools.wraps on the wrapper function and pass in the inner function object.

72
00:05:43,460 --> 00:05:46,900
Decorated functions once again show the right identity.

73
00:05:46,900 --> 00:05:47,900
That's awesome.

74
00:05:47,900 --> 00:05:55,220
But wait, there's another problem.

75
00:05:55,220 --> 00:05:58,580
How do decorators work with inputs and outputs?

76
00:05:58,580 --> 00:06:04,060
What if we decorate a function with parameters and a return value?

77
00:06:04,060 --> 00:06:09,020
If we try to use the current tracer here, we'll get an error.

78
00:06:09,020 --> 00:06:11,620
Arguments broke it.

79
00:06:11,620 --> 00:06:13,180
But we can fix it.

80
00:06:13,180 --> 00:06:20,940
First, add star args and star star kw args to the wrapper function's parameters, and

81
00:06:20,940 --> 00:06:23,020
then pass them through to the inner function.

82
00:06:23,020 --> 00:06:33,660
This will make sure all arguments go through the decorator into the decorated function.

83
00:06:33,660 --> 00:06:39,100
Then capture the inner function's return value and return it from the wrapper function.

84
00:06:39,100 --> 00:06:42,700
This makes sure return values also pass through.

85
00:06:42,700 --> 00:06:46,140
If the inner function has no return value, don't worry.

86
00:06:46,140 --> 00:06:53,500
The decorator will pass through a none value.

87
00:06:53,500 --> 00:06:59,900
When we call the function with the updated tracer, we see tracing is now successful again.

88
00:06:59,900 --> 00:07:04,900
And when we check the return value, it's exactly what we expect.

89
00:07:04,900 --> 00:07:06,780
It works.

90
00:07:06,780 --> 00:07:08,780
Wow.

91
00:07:08,780 --> 00:07:10,900
That's awesome.

92
00:07:10,900 --> 00:07:15,420
But wait, there's more.

93
00:07:15,420 --> 00:07:19,340
You can write a decorator to call a function twice.

94
00:07:19,340 --> 00:07:24,620
Start with the decorator template, and call the inner function twice.

95
00:07:24,620 --> 00:07:27,540
Return the final value for continuity.

96
00:07:27,540 --> 00:07:31,380
And bam, it works.

97
00:07:31,380 --> 00:07:34,420
But wait, there's more.

98
00:07:34,420 --> 00:07:38,040
You can write a timer decorator.

99
00:07:38,040 --> 00:07:46,320
Start with the template, call the inner function, and surround it with timestamps using time

100
00:07:46,320 --> 00:07:48,280
module.

101
00:07:48,280 --> 00:07:54,040
Here we capture the start time and the end time, and then we'll just print the difference.

102
00:07:54,040 --> 00:07:56,160
Bam.

103
00:07:56,160 --> 00:07:59,640
Now you can time any function.

104
00:07:59,640 --> 00:08:02,880
But wait, there's more.

105
00:08:02,880 --> 00:08:06,120
You can add more than one decorator to a function.

106
00:08:06,120 --> 00:08:08,560
This is called nesting.

107
00:08:08,560 --> 00:08:10,760
Order matters.

108
00:08:10,760 --> 00:08:14,640
Decorators are executed in the order of closeness to the inner function.

109
00:08:14,640 --> 00:08:24,200
So, in this case, call twice is applied first, and then timer is applied.

110
00:08:24,200 --> 00:08:32,920
If these decorators are reversed in order, then each inner function call is timed.

111
00:08:32,920 --> 00:08:36,200
That's pretty cool.

112
00:08:36,200 --> 00:08:39,140
But wait, there's more.

113
00:08:39,140 --> 00:08:42,480
You can scrub and validate function arguments.

114
00:08:42,480 --> 00:08:48,960
Check out these two simple math functions, add and subtract.

115
00:08:48,960 --> 00:08:55,160
Create a decorator to scrub and validate inputs as integers.

116
00:08:55,160 --> 00:09:01,120
Add the wrapper function, and make sure it has positional args.

117
00:09:01,120 --> 00:09:06,760
Then cast all args as ints before passing them into the inner function.

118
00:09:06,760 --> 00:09:13,840
Here we're using a list comprehension to do that integer conversion.

119
00:09:13,840 --> 00:09:19,000
Now when those math functions are called, all numbers are integers.

120
00:09:19,000 --> 00:09:24,240
Using non-numeric inputs also raise a value error.

121
00:09:24,240 --> 00:09:27,220
But wait, there's more.

122
00:09:27,220 --> 00:09:30,360
You can create decorators with parameters.

123
00:09:30,360 --> 00:09:36,560
Here's a decorator that will repeat a function five times.

124
00:09:36,560 --> 00:09:39,880
The repeat function is a little different.

125
00:09:39,880 --> 00:09:45,120
Instead of taking the inner function object, it takes in the parameter, which is the number

126
00:09:45,120 --> 00:09:48,320
of times to repeat the inner function.

127
00:09:48,320 --> 00:09:57,520
Inside, there's a repeat decorator function that has a parameter for the inner function.

128
00:09:57,520 --> 00:10:04,880
The repeat function returns the repeat decorator function.

129
00:10:04,880 --> 00:10:09,520
Inside repeat decorator is the familiar wrapper function.

130
00:10:09,520 --> 00:10:16,860
It uses func tools, wraps, and it passes through all arguments.

131
00:10:16,860 --> 00:10:19,280
Repeat decorator returns wraps.

132
00:10:19,280 --> 00:10:23,120
Wrapper, excuse me.

133
00:10:23,680 --> 00:10:29,640
Finally, wrapper contains the logic for calling the inner function multiple times, according

134
00:10:29,640 --> 00:10:32,400
to the repeat decorator's parameter value.

135
00:10:32,400 --> 00:10:34,440
That's that for loop.

136
00:10:34,440 --> 00:10:40,720
For blank and range, call the function with the arguments.

137
00:10:40,720 --> 00:10:44,160
Now the hello world function runs five times.

138
00:10:44,160 --> 00:10:45,160
Nifty.

139
00:10:45,160 --> 00:10:50,040
But wait, there's more.

140
00:10:50,040 --> 00:10:53,360
Decorators can be used to save state.

141
00:10:53,360 --> 00:10:59,240
Here's a decorator that will count the number of times a function is called.

142
00:10:59,240 --> 00:11:05,640
Count calls has the standard decorator structure.

143
00:11:05,640 --> 00:11:10,600
Outside the wrapper, a count attribute is initialized to zero.

144
00:11:10,600 --> 00:11:14,040
This attribute is added to the wrapper function object.

145
00:11:14,520 --> 00:11:19,320
Remember, we can do that in Python because attributes can be added to objects at any

146
00:11:19,320 --> 00:11:20,640
time.

147
00:11:20,640 --> 00:11:26,880
And functions are just objects.

148
00:11:26,880 --> 00:11:31,800
Inside the wrapper, the count is incremented before calling the inner function.

149
00:11:31,800 --> 00:11:37,200
The count value will persist across multiple calls because it's attached to that function

150
00:11:37,200 --> 00:11:38,920
object.

151
00:11:38,920 --> 00:11:46,600
So here, we see an initialization, and then per call, an increment.

152
00:11:46,600 --> 00:11:52,960
Initially, the hello world count value is zero.

153
00:11:52,960 --> 00:11:56,840
After two calls, the count value goes up, as expected.

154
00:11:56,840 --> 00:12:01,200
That's pretty awesome.

155
00:12:01,200 --> 00:12:05,280
But wait, there's more.

156
00:12:05,280 --> 00:12:08,120
Decorators can be used in classes.

157
00:12:08,120 --> 00:12:14,440
Here, the timer decorator is applied to this hello method.

158
00:12:14,440 --> 00:12:19,640
As long as parameters and return values are set up correctly, decorators can be applied

159
00:12:19,640 --> 00:12:23,840
equally to functions as well as methods.

160
00:12:23,840 --> 00:12:31,080
Interestingly, decorators can also be applied directly to classes.

161
00:12:31,080 --> 00:12:37,280
When a decorator is applied to a class, it wraps the constructor, as shown here.

162
00:12:37,280 --> 00:12:42,200
Since we've added timer to greeter, it'll print the elapsed time whenever the greeter

163
00:12:42,200 --> 00:12:45,880
constructor is called.

164
00:12:45,880 --> 00:12:52,200
Note however, that decorators on a class do not wrap each individual method in the class.

165
00:12:52,200 --> 00:12:54,320
That's a common misconception.

166
00:12:54,320 --> 00:12:59,280
If you want to wrap methods in a class, you need to apply decorators directly to those

167
00:12:59,280 --> 00:13:04,520
methods.

168
00:13:04,520 --> 00:13:10,120
Since decorators can wrap classes and methods in addition to functions, it would technically

169
00:13:10,120 --> 00:13:16,080
be more correct to say that decorators wrap callables around callables than simply to

170
00:13:16,080 --> 00:13:19,960
say decorators wrap functions around functions.

171
00:13:19,960 --> 00:13:28,820
Nevertheless, we can be a little bit liberal in our use of the word functions.

172
00:13:28,820 --> 00:13:30,920
So all that's great.

173
00:13:30,920 --> 00:13:34,440
But can decorators be tested?

174
00:13:34,440 --> 00:13:37,360
Good code must arguably be testable code.

175
00:13:37,360 --> 00:13:45,360
Well, today's your lucky day, because yes, you can test decorators.

176
00:13:45,360 --> 00:13:48,080
Testing decorators can be a challenge.

177
00:13:48,080 --> 00:13:53,840
We should always try to test the code we write, but decorators can be tricky.

178
00:13:53,840 --> 00:13:56,240
Here's some advice.

179
00:13:56,240 --> 00:14:04,360
First, separate tests for decorator functions from decorated functions.

180
00:14:04,360 --> 00:14:08,680
For decorator functions, focus on intended outcomes.

181
00:14:08,680 --> 00:14:15,080
Try to focus on the wrapper instead of whatever inner function is decorated.

182
00:14:15,080 --> 00:14:20,800
Remember, decorators can be applied to any callable, so cover the parts that make the

183
00:14:20,800 --> 00:14:24,520
decorators unique.

184
00:14:24,520 --> 00:14:29,960
Decorated functions should have their own separate unit tests.

185
00:14:29,960 --> 00:14:38,000
Second, apply decorators to fake functions used only for testing.

186
00:14:38,000 --> 00:14:43,320
These functions can either be simple functions that are created inside a test module, or

187
00:14:43,320 --> 00:14:46,720
even mocked functions.

188
00:14:46,720 --> 00:14:52,960
That way, unit tests won't have dependencies on existing functions that could change.

189
00:14:52,960 --> 00:14:57,440
Tests will also be simpler if they use slimmed down decorated functions.

190
00:14:57,920 --> 00:15:02,120
Remember, simple is better than complex.

191
00:15:02,120 --> 00:15:12,000
Third, make sure decorators have test coverage for every possible way they could be used.

192
00:15:12,000 --> 00:15:19,240
Cover decorator parameters, decorated function arguments, and return values.

193
00:15:19,240 --> 00:15:22,660
Make sure the name and help are correct.

194
00:15:22,660 --> 00:15:26,540
Check any side effects, like saved state.

195
00:15:26,640 --> 00:15:30,720
Apply it on methods and classes, as well as functions.

196
00:15:30,720 --> 00:15:39,740
With decorators, most failures happen due to overlooked edge cases.

197
00:15:39,740 --> 00:15:42,740
Let's look at a few short decorator tests.

198
00:15:42,740 --> 00:15:47,100
We'll use the count calls decorator we saw earlier.

199
00:15:47,100 --> 00:15:52,900
Here, there are two decorated functions to use for testing.

200
00:15:52,900 --> 00:16:00,620
The first one is a no-op, or a no-operation function, that basically does nothing.

201
00:16:00,620 --> 00:16:04,080
It has no parameters or returns.

202
00:16:04,080 --> 00:16:10,000
The second function takes in one argument and returns it.

203
00:16:10,000 --> 00:16:14,740
Both of these functions are very simple, but they represent two equivalence classes of

204
00:16:14,740 --> 00:16:23,900
decoratable functions, so it's worth having both in our unit tests.

205
00:16:23,900 --> 00:16:28,380
The test cases will verify outcomes using the decorator.

206
00:16:28,380 --> 00:16:33,740
For count calls, that means tests will focus on the count attribute added to the decorated

207
00:16:33,740 --> 00:16:35,620
functions.

208
00:16:35,620 --> 00:16:40,980
This first test case here simply verifies that the initial count value for any function

209
00:16:40,980 --> 00:16:44,540
is zero.

210
00:16:44,540 --> 00:16:52,740
The second test calls a function three times and verifies that its count is three.

211
00:16:52,740 --> 00:16:58,500
The third test exercises the same function, to make sure arguments and return values work

212
00:16:58,500 --> 00:16:59,500
correctly.

213
00:16:59,500 --> 00:17:09,940
It calls the same function, asserts the return value, and then asserts the count value.

214
00:17:09,940 --> 00:17:13,900
This collection of three tests is by no means complete.

215
00:17:13,900 --> 00:17:18,140
It simply shows how to start writing tests for decorators.

216
00:17:18,140 --> 00:17:23,060
It also shows that you don't need to overthink unit tests for decorators.

217
00:17:23,060 --> 00:17:31,340
After all, simple is better than complex.

218
00:17:31,340 --> 00:17:36,140
Up to this point, we've covered how to write your own decorators.

219
00:17:36,140 --> 00:17:42,180
However, Python has several decorators available in the language, and in various modules that

220
00:17:42,220 --> 00:17:48,740
you can use absolutely free.

221
00:17:48,740 --> 00:17:56,740
Decorators like class method, static method, and property can apply to methods in a class.

222
00:17:56,740 --> 00:18:01,100
Frameworks like Flask and PyTest have even more decorators.

223
00:18:01,100 --> 00:18:06,940
Let's take a closer look.

224
00:18:06,940 --> 00:18:12,840
Let's start by comparing the class method and static method decorators.

225
00:18:12,840 --> 00:18:16,700
These are part of the Python standard language.

226
00:18:16,700 --> 00:18:23,480
We'll revisit the greeter class we saw before.

227
00:18:23,480 --> 00:18:29,480
The class method decorator will turn any method into a class method instead of an instance

228
00:18:29,480 --> 00:18:32,180
method.

229
00:18:32,180 --> 00:18:38,700
That means this hello method here can be called directly from the class itself, instead of

230
00:18:38,700 --> 00:18:41,620
from an object of the class.

231
00:18:41,620 --> 00:18:46,380
This decorator will pass a reference to the class into the method, so the method has some

232
00:18:46,380 --> 00:18:49,580
context of the class.

233
00:18:49,580 --> 00:18:59,380
Here the reference is named cls, and the method uses it to get the class's name.

234
00:18:59,380 --> 00:19:04,860
The method can be called using greeter.hello, and as we see, the name is substituted in

235
00:19:04,860 --> 00:19:07,860
the output.

236
00:19:07,860 --> 00:19:11,500
Wow!

237
00:19:11,500 --> 00:19:18,440
The static method decorator works almost the same as the class method decorator, except

238
00:19:18,440 --> 00:19:20,700
for one small difference.

239
00:19:20,700 --> 00:19:27,980
It does not pass a reference to the class into the method.

240
00:19:27,980 --> 00:19:30,460
Notice how the method parameters are empty.

241
00:19:30,460 --> 00:19:34,260
No class, and no self.

242
00:19:34,260 --> 00:19:40,080
Methods are still called from the class, like here with greeter.goodbye.

243
00:19:40,080 --> 00:19:46,100
You could say that static method is just a simpler version of class method.

244
00:19:46,100 --> 00:19:51,020
And either of these decorators could be applied to any methods in your class.

245
00:19:51,020 --> 00:19:57,620
Just be smart about what you want to do.

246
00:19:58,260 --> 00:20:01,180
Next, let's take a look at the property decorator.

247
00:20:01,180 --> 00:20:10,180
To show how to use it, we'll create a class called accumulator to keep count of a tally.

248
00:20:10,180 --> 00:20:17,580
Accumulator's init method initializes a count attribute to zero.

249
00:20:17,580 --> 00:20:21,020
An add method adds an amount to the count.

250
00:20:21,020 --> 00:20:26,100
So far, nothing unusual.

251
00:20:26,580 --> 00:20:29,180
Now, let's add a property.

252
00:20:29,180 --> 00:20:33,500
This count method has the property decorator on it.

253
00:20:33,500 --> 00:20:39,300
This means that count will be callable as an attribute instead of a method, meaning

254
00:20:39,300 --> 00:20:41,300
that it won't need parentheses.

255
00:20:41,300 --> 00:20:45,340
It is effectively a getter.

256
00:20:45,340 --> 00:20:52,900
The calls to count in the init and add methods here will actually call this property instead

257
00:20:52,900 --> 00:20:55,900
of the raw variable.

258
00:20:55,900 --> 00:21:02,460
Inside the count property, the method returns an attribute named underscore count.

259
00:21:02,460 --> 00:21:07,700
The underscore means that this variable should be treated as a private variable.

260
00:21:07,700 --> 00:21:15,860
However, this class hasn't set that underscore count variable yet.

261
00:21:15,860 --> 00:21:20,260
That variable is set in the setter method.

262
00:21:20,260 --> 00:21:22,340
Setters are optional for properties.

263
00:21:22,780 --> 00:21:31,060
Here, the setter validates that the value to set is not negative.

264
00:21:31,060 --> 00:21:36,100
If the value is good, then it sets underscore count.

265
00:21:36,100 --> 00:21:42,620
If the value is negative, then it raises a value error.

266
00:21:42,620 --> 00:21:49,180
Underscore count is handled internally, while count is handled publicly as the property.

267
00:21:49,180 --> 00:21:54,940
The getter and setter controls added by the property decorator let you control how the

268
00:21:54,940 --> 00:21:57,380
property is handled.

269
00:21:57,380 --> 00:22:02,420
In this class, the setter protects the property against bad values.

270
00:22:02,420 --> 00:22:07,260
So, let's use this class.

271
00:22:07,260 --> 00:22:14,540
When an accumulator object is constructed, its initial count is zero.

272
00:22:14,540 --> 00:22:21,220
After adding an amount to the object, its count goes up, as expected.

273
00:22:21,220 --> 00:22:25,580
Its count can be directly set to non-negative values.

274
00:22:25,580 --> 00:22:31,860
Attempting to set the count directly to a negative value raises an exception, as expected.

275
00:22:31,860 --> 00:22:41,180
Protection like that is great.

276
00:22:41,180 --> 00:22:44,820
Some packages also frequently contain decorators.

277
00:22:44,820 --> 00:22:49,820
That's why it's very important that you know how decorators function before you go consuming

278
00:22:49,820 --> 00:22:54,220
a whole bunch of really cool packages out there.

279
00:22:54,220 --> 00:23:01,340
For example, Flask is a very popular web micro-framework app that enables you to write web APIs with

280
00:23:01,340 --> 00:23:06,420
very little Python code.

281
00:23:06,420 --> 00:23:13,100
Here's an example Hello World Flask app taken directly from the Flask docs online.

282
00:23:13,100 --> 00:23:19,620
It imports the Flask module, creates the app, and defines a single endpoint at the root

283
00:23:19,620 --> 00:23:24,740
path that returns the string Hello World.

284
00:23:24,740 --> 00:23:32,460
Flask's app.root decorator can turn any function into a web API endpoint.

285
00:23:32,460 --> 00:23:34,060
That's awesome.

286
00:23:34,060 --> 00:23:42,060
And that's why a lot of people love using Flask.

287
00:23:42,060 --> 00:23:49,340
Another popular Python package with decorators is PyTest, Python's most popular test framework.

288
00:23:49,340 --> 00:23:55,820
And to be honest, one of my favorite test frameworks in any language.

289
00:23:55,820 --> 00:24:01,220
One of PyTest's most beloved features is the ability to parameterize test functions to

290
00:24:01,220 --> 00:24:04,800
run from multiple input combinations.

291
00:24:04,800 --> 00:24:11,640
Test parameters empower data-driven testing for wider test coverage.

292
00:24:11,640 --> 00:24:16,860
To show how this works, we'll use a simple test for basic arithmetic.

293
00:24:16,860 --> 00:24:17,860
Test addition.

294
00:24:17,860 --> 00:24:25,300
It asserts that a plus b equals c.

295
00:24:25,300 --> 00:24:30,320
The values for a, b, and c must come from a list of tuples.

296
00:24:30,320 --> 00:24:42,540
For example, 1 plus 2 equals 3, 0 plus 1 equals 1, and so on.

297
00:24:42,540 --> 00:24:50,860
The PyTest mark parameterize decorator connects the list of test values to the test function.

298
00:24:50,860 --> 00:24:56,780
It runs the test once for each tuple in the list, and it injects the tuple values into

299
00:24:56,780 --> 00:25:00,840
the test case as function arguments.

300
00:25:00,840 --> 00:25:05,320
This test case would run four times.

301
00:25:05,320 --> 00:25:11,680
Test parameters are a great way to rerun test logic without repeating test code.

302
00:25:11,680 --> 00:25:17,560
So, act now before it's too late.

303
00:25:17,560 --> 00:25:22,800
When should you use decorators in your Python code?

304
00:25:22,800 --> 00:25:27,980
Use decorators for aspects.

305
00:25:27,980 --> 00:25:31,720
An aspect is a special cross-cutting concern.

306
00:25:31,720 --> 00:25:36,300
There are things that happen in many parts of the code, and they frequently require repetitive

307
00:25:36,300 --> 00:25:37,960
calls.

308
00:25:37,960 --> 00:25:40,300
Think about something like logging.

309
00:25:40,300 --> 00:25:44,340
If you want to add logging statements to different parts of the code, then you need to write

310
00:25:44,340 --> 00:25:47,980
multiple logging calls in all those places.

311
00:25:47,980 --> 00:25:52,780
Logging itself is one concern, but it cross-cuts the whole codebase.

312
00:25:52,780 --> 00:25:57,360
A common solution for logging could be to use decorators, much like we saw earlier with

313
00:25:57,360 --> 00:26:03,640
our first tracer decorator.

314
00:26:03,640 --> 00:26:10,760
Good use cases for decorators include logging, profiling, input validation, retries, and

315
00:26:10,760 --> 00:26:12,720
registries.

316
00:26:12,720 --> 00:26:17,640
These are things that typically require lots of extra calls inserted in duplicative ways.

317
00:26:17,640 --> 00:26:24,540
If you're considering whether or not you should use a decorator, ask yourself this.

318
00:26:24,540 --> 00:26:28,320
Should the code you're writing wrap something else?

319
00:26:28,320 --> 00:26:33,940
If yes, then you have a good candidate for a decorator.

320
00:26:33,940 --> 00:26:39,100
However, decorators aren't good for all circumstances.

321
00:26:39,100 --> 00:26:44,820
You should avoid decorators for main behaviors, because those should probably be put directly

322
00:26:44,980 --> 00:26:50,980
in the body of the decorated function, instead of in a separate wrapper.

323
00:26:50,980 --> 00:26:56,220
Avoid logic that's complicated or has heavy conditionals, too, because simple is better

324
00:26:56,220 --> 00:26:58,220
than complex.

325
00:26:58,220 --> 00:27:02,760
You should also try to avoid completely sidestepping the decorated function.

326
00:27:02,760 --> 00:27:06,680
That could really confuse people.

327
00:27:06,680 --> 00:27:08,820
So ask yourself this.

328
00:27:08,820 --> 00:27:14,380
Is the code you want to write the wrapper or the candy bar itself?

329
00:27:14,380 --> 00:27:24,320
Decorators make good decorators, but candy bars do not.

330
00:27:24,320 --> 00:27:28,180
I hope you found this infomercial about decorators useful.

331
00:27:28,180 --> 00:27:35,280
If you want to learn more, check out this real Python tutorial by Gare Arn Hiel named

332
00:27:35,280 --> 00:27:38,320
Primer on Python Decorators.

333
00:27:38,320 --> 00:27:45,160
It covers almost everything I shared here, plus more.

334
00:27:45,160 --> 00:27:47,280
Thank you very, very much for listening.

335
00:27:47,280 --> 00:27:52,400
I really appreciate you taking the time to listen to this talk on decorators.

336
00:27:52,400 --> 00:27:55,320
Again, my name is Pandy Knight.

337
00:27:55,320 --> 00:28:00,040
I am the Automation Panda and a bona fide Pythonista.

338
00:28:00,040 --> 00:28:05,520
Please read my blog at AutomationPanda.com and follow me on Twitter at AutomationPanda.

339
00:28:05,520 --> 00:28:09,560
I'd love to hear what y'all end up doing with decorators.

340
00:28:09,560 --> 00:28:12,680
So thank you, and enjoy the rest of PyTexas 2020.

