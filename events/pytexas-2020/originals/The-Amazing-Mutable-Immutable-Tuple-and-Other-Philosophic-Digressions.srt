1
00:00:00,000 --> 00:00:28,860
When I use a word, Humpty Dumpty said in a rather scornful tone, it means just what

2
00:00:28,860 --> 00:00:34,500
I choose it to mean, neither more nor less. The question is, said Alice, whether you can

3
00:00:34,500 --> 00:00:40,180
make words mean so many different things. The question is, said Humpty Dumpty, which

4
00:00:40,180 --> 00:00:48,540
is to be master. That's all. I love a good cold open, howdy, I'm Al Swigert. I'm mostly

5
00:00:48,540 --> 00:00:54,100
known as the author of Automate the Boring Stuff with Python. I grew up in Texas and went to school

6
00:00:54,100 --> 00:01:03,500
in Austin. And after a brief 12-year period in San Francisco, I now live in Seattle. But my heart

7
00:01:03,500 --> 00:01:11,980
will always be in Texas, as will my cell phone's area code. This is the amazing Mutable, Immutable

8
00:01:11,980 --> 00:01:18,220
Tuple and Other Philosophic Digressions. I'm pre-recording this for Pi Texas 2020, so for

9
00:01:18,220 --> 00:01:25,700
those watching in the future, 2020 was an interesting year. So this is a virtual conference,

10
00:01:25,700 --> 00:01:30,340
and I'm recording this from my apartment in the Capitol Hill neighborhood of Seattle, which has

11
00:01:30,340 --> 00:01:36,900
been a very interesting neighborhood to live in 2020. But to recreate the feeling of a conference

12
00:01:36,900 --> 00:01:44,500
talk, I'm going to record all of this in one take with no edits. Now, I make a lot of references

13
00:01:44,500 --> 00:01:49,300
and recommendations for books and talks. There's no need to take notes. You can download these

14
00:01:49,300 --> 00:01:55,820
slides from bit.ly slash amazing tuple, Pi Texas 2020. This talk grew from a basic question I had,

15
00:01:55,820 --> 00:02:04,140
are tuples mutable or immutable? And the answer is tuples are immutable. Everybody knows that.

16
00:02:04,140 --> 00:02:13,540
Thank you for coming to my talk. Enjoy the rest of your day. Okay, there's more. Let's start this

17
00:02:14,020 --> 00:02:20,020
philosophical discussion and define our terms. What's a tuple? I'm pronouncing that word both

18
00:02:20,020 --> 00:02:25,500
ways so that way everyone can yell at me and tell me I'm saying it wrong. Well, tuples are like

19
00:02:25,500 --> 00:02:31,100
immutable lists. They're an ordered sequence of data. Unlike lists, you type them with parentheses

20
00:02:31,100 --> 00:02:36,380
instead of square brackets, but if you only have one item in the tuple, the trailing comma is

21
00:02:36,380 --> 00:02:43,100
required. It's really the commas that make a tuple, not the parentheses. Now, for anyone who has read

22
00:02:43,100 --> 00:02:48,660
Luciano Romolo's fantastic book, Fluent Python, you'll know that tuples can serve as more than

23
00:02:48,660 --> 00:02:54,460
just immutable lists. But in this discussion, suffice it to say that tuples are immutable lists.

24
00:02:54,460 --> 00:03:02,380
Next question, what is mutability? Mutable means that it can change its value, while immutable means

25
00:03:02,380 --> 00:03:07,740
it can't change its value. So while you can create a list and then change the items in the list,

26
00:03:07,740 --> 00:03:14,300
you can't change the items in a tuple. You'll get an error message if you try. So tuples are

27
00:03:14,300 --> 00:03:24,260
immutable. Kind of. I mean, you could just reassign this variable to a different tuple and thus change

28
00:03:24,260 --> 00:03:30,500
the tuple, right? Well, no, technically, this isn't changing the tuple so much as creating a

29
00:03:30,500 --> 00:03:36,340
new tuple and replacing the old tuple. But that's an answer that leads to more questions. What's

30
00:03:36,340 --> 00:03:42,900
the difference? Why do we even need tuples if we already have lists? And are tuples immutable or

31
00:03:42,900 --> 00:03:49,740
not? Now, before we go down that rabbit hole, I want to point out a common Python gotcha. Let's

32
00:03:49,740 --> 00:03:55,980
say we create a list and store it in a variable named spam. Then we copy spam to a variable named

33
00:03:55,980 --> 00:04:04,340
eggs. And we change the first item in spam to the string changed. What are the contents of the eggs

34
00:04:04,500 --> 00:04:10,780
variable? You might know this gotcha already. The eggs list has also been changed, just like the spam

35
00:04:10,780 --> 00:04:17,060
list. And this is because spam and eggs are actually referring to the same list. And to understand

36
00:04:17,060 --> 00:04:22,180
why that happens, I'm going to use the visualization tool at python tutor.com. If you've never used

37
00:04:22,180 --> 00:04:28,700
python tutor.com, check it out. It's great at showing what's going on in your code. Here's our

38
00:04:28,700 --> 00:04:34,820
three line program. At the top is when the first line executes and creates the list for the spam

39
00:04:34,820 --> 00:04:40,620
variable. You can see there's a spam variable in blue, and it's pointing to the list object in

40
00:04:40,620 --> 00:04:46,460
yellow. And the middle is the second line executing, which copies the list to the eggs variable. Notice

41
00:04:46,460 --> 00:04:53,020
that we still only have one list object. It's just that both spam and eggs now refer to it. And that's

42
00:04:53,020 --> 00:05:00,100
why at the bottom, when spam is changed, it's changing eggs as well. Now I used to use a box

43
00:05:00,100 --> 00:05:06,100
metaphor for variables like the variable is a box and the list object is stored inside the box,

44
00:05:06,100 --> 00:05:12,780
but that turns out not to work so well for python. It's better to think of variables as name tags or

45
00:05:12,780 --> 00:05:19,540
labels. And these labels point to objects where they refer to objects, but the object isn't inside

46
00:05:19,540 --> 00:05:24,700
the variable. Now in this new example, I've changed the list to a tuple. You still have two

47
00:05:24,700 --> 00:05:29,820
variables referring to the same tuple object, but the tuple is immutable and you'll get an error

48
00:05:29,820 --> 00:05:35,500
message if you try to change it. So immutable objects like tuples don't suffer from this same

49
00:05:35,500 --> 00:05:42,420
gotcha that a mutable list would. Now what about other data types like integers and strings? Well,

50
00:05:42,420 --> 00:05:47,900
integers and strings are also immutable. You can assign the integer 42 to spam like we do at the

51
00:05:47,900 --> 00:05:53,300
top and then assign spam to eggs like we do in the middle. And both of these variables refer to

52
00:05:53,300 --> 00:05:58,580
the same integer object. And then if you try to change spam, like at the bottom, you're actually

53
00:05:58,580 --> 00:06:05,020
creating a brand new string object and attaching the spam label to that. You're not going to run

54
00:06:05,020 --> 00:06:11,380
into the gotcha that we have with lists because integers and strings are immutable objects. Now

55
00:06:11,380 --> 00:06:18,180
on Python, everything is an object. Lists and tuples and dictionaries are objects, but so are

56
00:06:18,180 --> 00:06:25,260
integers and floats and Booleans and strings, but also functions, classes, and modules. All of those

57
00:06:25,260 --> 00:06:30,300
are objects. It's not like Java where you have primitive data types and object data types.

58
00:06:30,300 --> 00:06:37,260
Everything in Python is an object. And when we assign spam to eggs, we aren't copying objects.

59
00:06:37,260 --> 00:06:45,340
And in fact, assignment never copies objects in Python. It only copies the label. And there's a

60
00:06:45,340 --> 00:06:51,660
great talk by Ned Batchelder on this called Facts and Myths about Python Names and Values. I draw

61
00:06:51,660 --> 00:06:57,900
on some of the things he covers in this talk, but it's worth it to see Ned's talk as well. But keep

62
00:06:57,900 --> 00:07:04,020
this in mind, everything in Python is an object. So that's another term that we need to define.

63
00:07:04,020 --> 00:07:09,180
What are objects? And I'll get back to this in a moment when I cover the Python object model,

64
00:07:09,180 --> 00:07:15,500
but let's look at one more code example first. What happens when we have a tuple that contains

65
00:07:15,500 --> 00:07:22,300
a list? So the tuple is immutable, but the list is mutable. And when we change the mutable list,

66
00:07:22,300 --> 00:07:29,660
we also change the immutable tuple? How is that possible? Well, let's look at PythonTutor.com

67
00:07:30,380 --> 00:07:36,460
again. Remember, variables are labels, not boxes. And lists and tuples don't have boxes that contain

68
00:07:36,460 --> 00:07:42,900
objects either. They have labels that refer to objects. So PythonTutor.com is slightly inaccurate

69
00:07:42,900 --> 00:07:49,660
here because this slide should really look like this. The tuple and lists don't contain integers

70
00:07:49,660 --> 00:07:55,460
and strings. They contain labels that refer to integers and strings. And this view makes it a

71
00:07:55,460 --> 00:08:01,780
lot clearer at the bottom that the list changes what objects it refers to, but the tuple doesn't.

72
00:08:01,780 --> 00:08:10,060
So the tuple is still immutable. But at the same time, it's clearly obviously changing its value.

73
00:08:10,060 --> 00:08:17,340
So does this mean tuples are mutable? What do we mean by these words? Mutable, immutable, object,

74
00:08:17,340 --> 00:08:25,140
value. It's easy to use these words interchangeably or inconsistently, but let's think about what we

75
00:08:25,140 --> 00:08:31,700
mean when we say them. You can go a long time without knowing the exact definitions. I was

76
00:08:31,700 --> 00:08:37,380
programming in Python for well over a decade before I found the data model page in the official

77
00:08:37,380 --> 00:08:43,300
Python documentation. The Python data model, also sometimes called the Python object model,

78
00:08:43,300 --> 00:08:50,180
describes the lower level details of what Python objects are. Remember, everything in Python is an

79
00:08:50,180 --> 00:08:58,260
object, and the Python data model tells us that every object has three things. An identity, a type,

80
00:08:58,260 --> 00:09:09,380
and a value. Yay, more words we need to define. An object's identity is a unique integer that never

81
00:09:09,380 --> 00:09:14,900
changes for the lifetime of the object. So from the moment the object is created until it's recycled

82
00:09:14,980 --> 00:09:21,460
by the garbage collector, it is the same and unique. So in CPython, which is the Python

83
00:09:21,460 --> 00:09:27,220
interpreter you download from Python.org, the identity is the object's memory address,

84
00:09:27,220 --> 00:09:31,620
and that's very convenient because that's an integer that's unique and it's not going to change.

85
00:09:33,140 --> 00:09:39,380
You can find the identity of an object with the built-in id function. Pass it an object or a

86
00:09:39,380 --> 00:09:44,740
variable that refers to an object, and it returns the integer identity of the object.

87
00:09:45,780 --> 00:09:51,780
You can use this to determine if two variables refer to the same object by checking that their

88
00:09:51,780 --> 00:09:58,100
identities are equal. Here we can tell that eggs and spam refer to the same list because the object

89
00:09:58,100 --> 00:10:04,900
they each refer to has the same identity, so it's the same list object. In fact, this is what the

90
00:10:04,900 --> 00:10:10,900
is operator does. It's a shortcut for checking identity equality between two variables.

91
00:10:11,940 --> 00:10:19,220
Every object has an identity and every object has a type. In Python, the terms type, data type,

92
00:10:19,220 --> 00:10:25,780
and class all mean the same thing. Like identity, an object's type never changes during the object's

93
00:10:25,780 --> 00:10:33,140
lifetime. A type is something like integer or string or tuple. You can find the type of an object

94
00:10:33,140 --> 00:10:39,380
with the built-in type function. You pass it an object and it returns the object's type. Remember,

95
00:10:39,940 --> 00:10:46,180
everything in Python is an object, and that means that what the type function returns

96
00:10:46,180 --> 00:10:54,740
is also an object, and that object has a type. It's the type type. Like the identity, the type

97
00:10:54,740 --> 00:11:00,980
of an object never changes. If you're converting a string to an int, you aren't actually changing

98
00:11:00,980 --> 00:11:07,460
the string's object's type. What's happening is that you're creating a new int object and the

99
00:11:07,460 --> 00:11:12,980
variable now refers to that new int object. We can see this for ourselves by checking the identity

100
00:11:12,980 --> 00:11:17,700
of the variable's object. The ID function here gives us different identity numbers.

101
00:11:19,860 --> 00:11:26,980
Every object in Python has an identity, a type, and the third thing is a value. This is the most

102
00:11:26,980 --> 00:11:33,060
familiar property. The value is one of a range of values determined by the type, so there's

103
00:11:33,060 --> 00:11:39,140
effectively an infinite number of possible integer and string values, but the Boolean type only has

104
00:11:39,140 --> 00:11:47,060
two possible values, true and false, and the none value is the only value in the none type type.

105
00:11:48,580 --> 00:11:53,380
So is there a built-in function to tell us the value of an object?

106
00:11:53,620 --> 00:12:00,340
Well, we think of value as this well-defined thing, but when I looked closer, value is kind

107
00:12:00,340 --> 00:12:04,740
of nebulous. I'm going to ask a question that sounds like it's straight out of philosophy.

108
00:12:05,620 --> 00:12:11,780
What is value? Now, if you want to see an object's identity, you can call the ID function. If you

109
00:12:11,780 --> 00:12:15,860
want to see an object's type, you can call the type function, but if you want to see the value

110
00:12:16,820 --> 00:12:24,740
of an object, there are actually two built-in functions, str and repr. The str function,

111
00:12:24,740 --> 00:12:31,380
or string function, returns a human-readable string form of the object's value. This is

112
00:12:31,380 --> 00:12:36,740
straightforward for objects like integers and strings, so let's use a more abstract example

113
00:12:36,740 --> 00:12:44,740
with the datetime.date object. Here I have called datetime.date to create a date object that represents

114
00:12:44,740 --> 00:12:53,700
January 2020, and I assign the birthday variable to refer to this object. Now, when I call string,

115
00:12:53,700 --> 00:13:01,220
it returns a string of a human-readable form of the object's value. What string or str returns

116
00:13:01,220 --> 00:13:09,460
is defined by the datetime.date type, but this string of the object's value is not the same thing

117
00:13:09,460 --> 00:13:13,860
as the object's value. If we try to use the equality operator on them, it evaluates to

118
00:13:13,860 --> 00:13:21,140
fault. str doesn't return the object's value, it returns a string that represents the object's value,

119
00:13:21,140 --> 00:13:27,220
and that's a subtle difference. The other built-in function for seeing an object's value is repr.

120
00:13:27,220 --> 00:13:33,620
The repr function produces a string that ideally is a representation of Python code that would

121
00:13:33,620 --> 00:13:40,980
recreate the object with that same value. So passing the date object to repr gives you a string

122
00:13:40,980 --> 00:13:47,140
of the code that creates the date object. The reason we have two different functions is because

123
00:13:47,140 --> 00:13:53,620
the str string is useful for displaying object values to humans, while the repr string is useful

124
00:13:53,620 --> 00:14:01,220
for more technical contexts like log files or debugging messages. This isn't always possible

125
00:14:01,220 --> 00:14:06,900
to make a repr string of Python code to recreate the object. For example, I've created a foo class

126
00:14:06,980 --> 00:14:12,740
here and the default implementations of str and repr are fairly useless. You can tell from the

127
00:14:12,740 --> 00:14:19,060
angle brackets that this string would not be valid Python syntax. You can recreate the object

128
00:14:19,060 --> 00:14:26,340
using the repr string. The str and repr functions return strings that describe an object's value,

129
00:14:26,340 --> 00:14:33,060
but that's not going to be the same thing as the value itself. Even if we type the variable that

130
00:14:33,060 --> 00:14:39,860
refers to the object into the interactive shell, that's just going to show us the repr function's

131
00:14:39,860 --> 00:14:47,860
string. That's not going to be the object's value itself. Now we need to know the value so we can

132
00:14:47,860 --> 00:14:54,100
tell if an object's value changes, and then we can find out if the object is mutable or immutable,

133
00:14:54,100 --> 00:15:00,340
and then we can find out if tuples are mutable or immutable. So this is getting kind of complicated

134
00:15:00,900 --> 00:15:07,700
because mutability isn't a property of Python objects the way identity, type, and value are

135
00:15:07,700 --> 00:15:12,820
properties of Python objects. Let's look at the Python data model documentation again.

136
00:15:13,780 --> 00:15:21,140
It tells us that if an object's value can change, it's mutable, and if it can't, then it's immutable,

137
00:15:21,780 --> 00:15:27,300
but that doesn't tell us an exact definition of value. I did eventually find it. It's in a

138
00:15:27,300 --> 00:15:33,060
completely different section of the Python documentation, section 6.10.1. It has this line,

139
00:15:33,780 --> 00:15:38,180
the value of an object is a rather abstract notion in Python. Yeah, no kidding.

140
00:15:39,380 --> 00:15:44,820
But it says that the value of an object is dictated by the equality operator, and I agree,

141
00:15:45,940 --> 00:15:51,060
but even if this wasn't backed by anything in the official Python documentation, I think it

142
00:15:51,060 --> 00:15:57,300
could make a pretty good case for this. For example, the integer 42 and the floating point

143
00:15:57,300 --> 00:16:04,740
number 42.0 have the same value. The equality operator says they are equal. Now, I can't tell

144
00:16:04,740 --> 00:16:10,820
you the true nature of the value 42. I'm sure it has something to do with life, the universe, and

145
00:16:11,620 --> 00:16:17,940
whatever. But however you want to define value, I can tell you that these objects,

146
00:16:17,940 --> 00:16:27,780
42 and 42.0, have the same value in Python. Meanwhile, the integer 42 and the string 42

147
00:16:27,780 --> 00:16:34,020
have different values. The equality operator says their values are different. But if you want to

148
00:16:34,020 --> 00:16:41,060
know something kind of weird, the Boolean true and false values are the same as the integer 1

149
00:16:41,060 --> 00:16:46,580
and 0 values. The story behind that is Python originally didn't have a Boolean data type,

150
00:16:46,580 --> 00:16:51,700
it was added later, and when they added it, it was just easy to make Booleans a subclass of

151
00:16:51,700 --> 00:16:57,780
integers. So you can use Boolean values anywhere you can use the integers 0 and 1. That means you

152
00:16:57,780 --> 00:17:03,940
can mathematically add true plus true plus false plus true, and that evaluates to the integer value

153
00:17:03,940 --> 00:17:11,780
3. You can use true as an index of a string and get a substring. Now, you can write code like this,

154
00:17:11,780 --> 00:17:18,500
but please don't. It's completely unreadable. But if you want to know something that will really

155
00:17:18,500 --> 00:17:26,020
bake your noodle, check out Python 2. Capital T true and capital F false were only made keywords

156
00:17:26,020 --> 00:17:33,860
in Python 3. In Python 2, you can use these names as variable names, which means you can assign false

157
00:17:33,860 --> 00:17:42,100
to true, and then true is false is true. So please switch to Python 3 if you haven't already,

158
00:17:42,100 --> 00:17:45,940
because otherwise you might destroy the space-time continuum or something.

159
00:17:49,540 --> 00:17:54,660
So if mutability is based on value, and value is based on the equality operator,

160
00:17:54,660 --> 00:18:00,260
what is the equality operator based on? And that's easy to answer. The Dunder equal Dunder

161
00:18:00,260 --> 00:18:06,100
special method. Python classes, which is to say Python data types, have special methods

162
00:18:06,660 --> 00:18:12,660
that begin and end with double underscores. We call them double under methods or Dunder methods.

163
00:18:13,220 --> 00:18:19,700
The Dunder equal Dunder method overloads the equality operator. So say I have a cat class,

164
00:18:19,700 --> 00:18:25,620
and I define a cat as being composed of a color and weight. Now, in reality, cats are much more

165
00:18:25,620 --> 00:18:29,860
than just color and weight. Don't confuse the map with the territory. But this is just how

166
00:18:29,860 --> 00:18:36,420
I'm defining cats here in this class for this particular piece of software. Now I'm overloading

167
00:18:36,420 --> 00:18:42,260
the equality operator so that another object has an equal value to this cat object's value

168
00:18:42,260 --> 00:18:49,300
if its type is cat or a subclass of cat, and it has a matching color and weight. So I can create

169
00:18:49,300 --> 00:18:55,460
two cat objects and assign them the variables Zoffy and Pooka. When I compare them with the

170
00:18:55,460 --> 00:19:01,780
equality operator, Python calls Dunder equal Dunder and it returns true. So these two objects

171
00:19:01,780 --> 00:19:07,780
have the same value because the equality operator says they do. Though I can change that as much as

172
00:19:07,780 --> 00:19:13,380
I want. Let's change the Dunder equal Dunder method so that two cats have the same value

173
00:19:13,380 --> 00:19:19,140
if they have the same color and weight doesn't factor into it at all. Then I can create two

174
00:19:19,140 --> 00:19:24,820
cat objects, Zoffy and Jasper, and these cats are both gray but have different weights. But

175
00:19:24,820 --> 00:19:30,020
Python considers them to have the same value because the value of the weight attribute

176
00:19:30,020 --> 00:19:37,780
isn't a part of the value of the cat object. Now that seems quote unquote wrong, but maybe this

177
00:19:37,780 --> 00:19:42,420
fits the requirement for this particular cat class in this particular piece of software.

178
00:19:43,620 --> 00:19:51,300
Let's take this even further. If I always return not other is self, then a cat object has the same

179
00:19:51,300 --> 00:19:58,740
value as literally every other object except for itself. So Zoffy is not equal to Zoffy,

180
00:19:58,740 --> 00:20:05,380
but Zoffy is equal to the string CheeseSandwich. Now that seems very wrong, but this is Python

181
00:20:05,380 --> 00:20:13,780
programming. There is no right or wrong. There's only Dunder methods. I can't think of a case

182
00:20:13,780 --> 00:20:21,860
where code like this is necessary or useful. It also breaks dictionary hashing completely,

183
00:20:21,860 --> 00:20:29,140
but if the use case demands it, then this is the quote unquote right definition of value for this

184
00:20:29,140 --> 00:20:39,060
class. There doesn't seem to be a consensus on what value is in the Python language. You could

185
00:20:39,060 --> 00:20:46,900
argue that the integer 42 should have the same value as the string 42, but the equality operator,

186
00:20:46,900 --> 00:20:53,540
that is the class's own Dunder equal Dunder method, says they don't. And I think what a type says

187
00:20:53,540 --> 00:20:57,940
about its own definition of value is the closest thing that we're going to get to a referee on

188
00:20:57,940 --> 00:21:07,380
this. I will now tell you if tuples are mutable or immutable. We have two tuples, spam and eggs,

189
00:21:08,020 --> 00:21:13,700
and they have separate identities. They are different separate objects. The equality operator

190
00:21:13,700 --> 00:21:19,700
says they have the same value though. So no matter what you say about the nature of these tuples

191
00:21:19,700 --> 00:21:25,860
values or a value itself, we know that they are the same value according to the equality operator.

192
00:21:26,900 --> 00:21:33,860
Now we run this code and we change the list inside the spam tuple. And when we compare their values

193
00:21:33,860 --> 00:21:40,100
again, they do not have the same value. Therefore, one of these tuples must have

194
00:21:40,100 --> 00:21:51,380
changed their value. Therefore, tuples are mutable. This is the part where someone says,

195
00:21:51,380 --> 00:21:56,740
yeah, Al, but tuples are immutable. Everybody knows that. That someone will then point to the

196
00:21:56,740 --> 00:22:02,980
Python data model documentation and say that the tuple is still considered immutable because the

197
00:22:02,980 --> 00:22:10,740
collection of objects it contains cannot be changed. Yep. I mean, I can't argue with that.

198
00:22:10,740 --> 00:22:16,580
I even showed that in my earlier example. The Python data model documentation continues.

199
00:22:16,580 --> 00:22:23,140
So immutability is not strictly the same as having an unchangeable value. It is more subtle.

200
00:22:24,260 --> 00:22:31,380
It is more subtle. I spent weeks on this presentation trying to show that tuples

201
00:22:31,380 --> 00:22:36,420
are mutable and it gets refuted by four hand-waving words in the documentation.

202
00:22:38,500 --> 00:22:45,300
The question is, said Alice, whether you can make words mean so many different things. The question

203
00:22:45,300 --> 00:22:53,300
is, said Humpty Dumpty, which is to be master. That's all. We can argue about what mutability

204
00:22:53,300 --> 00:22:59,380
means in Python because ultimately humans define words and not the other way around.

205
00:23:00,340 --> 00:23:05,300
Maybe we're thinking about mutability wrong. Maybe I'm thinking about mutability wrong.

206
00:23:05,300 --> 00:23:14,020
Maybe the Python documentation is wrong. Maybe data types like tuples aren't mutable or immutable,

207
00:23:14,020 --> 00:23:19,780
but individual objects are mutable or immutable. And that could be a whole other talk, but I'm

208
00:23:19,780 --> 00:23:24,100
running out of time. So I'm going to leave you with one final philosophical question.

209
00:23:25,060 --> 00:23:34,260
How many colors are in a rainbow? Seven, right? But this isn't a rainbow. This is. So how many

210
00:23:34,260 --> 00:23:40,260
colors does it have? A million? Infinite? Well, it depends on how you define color.

211
00:23:41,060 --> 00:23:45,620
But a small-minded person might say, no, no, no, rainbows have seven colors. They can only

212
00:23:45,620 --> 00:23:49,700
have seven colors. We all learned this in kindergarten. The colors of a rainbow are

213
00:23:50,260 --> 00:23:56,900
ROYGBIV, red, orange, yellow, green, blue, purple, and a different kind of purple.

214
00:23:59,220 --> 00:24:06,020
Maybe these two words, mutable and immutable, aren't as concrete as we first thought. It's

215
00:24:06,020 --> 00:24:13,540
more subtle than that. Maybe having just two words isn't enough to fully describe Python objects.

216
00:24:13,540 --> 00:24:19,060
Or if we do use these two words in a casual colloquial sense, that isn't the final sense.

217
00:24:20,580 --> 00:24:25,380
Well, I'm a programmer and not a philosopher, and I've been talking for 25 minutes,

218
00:24:25,380 --> 00:24:30,020
so maybe it's time for me to listen to what others say about what identity,

219
00:24:30,020 --> 00:24:34,100
type, and value means to them. Thank you very much.

220
00:24:34,100 --> 00:24:51,220
We'll meet again, don't know where, don't know when, but I know we'll meet again some sunny day.

221
00:25:04,100 --> 00:25:04,260
you

