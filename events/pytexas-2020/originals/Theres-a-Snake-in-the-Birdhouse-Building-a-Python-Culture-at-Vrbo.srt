1
00:00:00,000 --> 00:00:18,160
Hello, and welcome to my talk.

2
00:00:18,160 --> 00:00:21,720
There's a snake in the birdhouse building a Python culture adverbo.

3
00:00:21,720 --> 00:00:25,360
My name is Mason Egger, and I am currently a developer advocate at DigitalOcean.

4
00:00:25,360 --> 00:00:29,800
However, before I was developer advocate at DigitalOcean, I was a site reliability engineer

5
00:00:29,800 --> 00:00:33,900
at Verbo, which for those of you that are local Austinites may originally remember the

6
00:00:33,900 --> 00:00:38,120
name being HomeAway, actually not too far from the library where we would have held

7
00:00:38,120 --> 00:00:40,760
the PyTexas conference this year.

8
00:00:40,760 --> 00:00:43,560
So it is a local Austin company.

9
00:00:43,560 --> 00:00:48,060
And whenever I first started at Verbo, there was no Python there.

10
00:00:48,060 --> 00:00:52,000
There was no Python officially supported by the company.

11
00:00:52,000 --> 00:00:56,360
And today I'm going to tell you the story of how I led the effort to build a Python

12
00:00:56,360 --> 00:00:58,000
culture adverbo.

13
00:00:58,000 --> 00:00:59,720
This talk is going to be very anecdotal.

14
00:00:59,720 --> 00:01:03,720
It's going to be a lot of my experiences and what I dealt with whenever I was trying to

15
00:01:03,720 --> 00:01:06,560
bring Python to Verbo.

16
00:01:06,560 --> 00:01:09,000
And you may be asking, well, who is this talk for?

17
00:01:09,000 --> 00:01:14,580
This talk is for anyone who wants to use Python at their job, but is currently unable, wants

18
00:01:14,580 --> 00:01:19,520
to build a stronger Python community at their job, wants to learn how to introduce Python

19
00:01:19,520 --> 00:01:22,720
and evangelize any technology, not just Python.

20
00:01:22,720 --> 00:01:26,600
The tips and tricks that I'm going to go over with you today could be used to bring any

21
00:01:27,160 --> 00:01:30,200
tech stack into your company, not just Python.

22
00:01:30,200 --> 00:01:34,440
And hopefully you'll learn from some of my successes, learn from my mistakes and be able

23
00:01:34,440 --> 00:01:39,320
to bring Python to your job or any tech that you desire.

24
00:01:39,320 --> 00:01:44,580
So before we go into what I did, we kind of need to explain how the company was whenever

25
00:01:44,580 --> 00:01:45,580
I got there.

26
00:01:45,580 --> 00:01:50,900
So engineers at Verbo deploy all of their applications to an internal paths.

27
00:01:50,900 --> 00:01:57,260
So essentially you would build a Docker container image of your API or whatever you were using

28
00:01:57,260 --> 00:02:02,660
and you would deploy it to this internal paths that was managed by my team.

29
00:02:02,660 --> 00:02:07,160
So essentially there were project templates for supported languages within the company.

30
00:02:07,160 --> 00:02:12,340
So the company was primarily a Java shop with node coming in and starting to do more and

31
00:02:12,340 --> 00:02:13,980
more with it.

32
00:02:13,980 --> 00:02:17,160
But you basically could go in and you would say, Hey, I want a Java project.

33
00:02:17,160 --> 00:02:23,020
And it would give you an entire project archetype of test suites, a basic hello world app, all

34
00:02:23,020 --> 00:02:26,180
of the configurations you needed to run inside of the paths.

35
00:02:26,180 --> 00:02:30,760
Now if Java or node just wasn't the tool for you and you needed to use something else,

36
00:02:30,760 --> 00:02:32,840
there was this concept of off road.

37
00:02:32,840 --> 00:02:37,080
So you could deploy your applications off road, but there was no official support from

38
00:02:37,080 --> 00:02:42,160
the platform teams, which essentially meant that if you had a problem with it, if the

39
00:02:42,160 --> 00:02:46,500
platform teams were nice to you and had time, they would be able to maybe debug it.

40
00:02:46,500 --> 00:02:51,140
But at the end, there was no team supporting this like there was with the Java and with

41
00:02:51,140 --> 00:02:52,500
the node projects.

42
00:02:52,500 --> 00:02:57,140
So if you ran into issues, it was kind of like up to you to solve the problem.

43
00:02:57,140 --> 00:02:59,980
Nobody was going to be able to help you.

44
00:02:59,980 --> 00:03:06,900
So with this being said, I was asked to lead the task to bring Python in as the third language

45
00:03:06,900 --> 00:03:10,080
that would be supported throughout the company.

46
00:03:10,080 --> 00:03:14,580
So the first thing that we did is we had a discovery meeting and this is really vital,

47
00:03:14,580 --> 00:03:19,160
I would say for anyone who wants to bring a new language or a new framework into their

48
00:03:19,160 --> 00:03:22,640
company, figure out what people actually want.

49
00:03:22,640 --> 00:03:26,580
So I met with the various teams that were interested in Python.

50
00:03:26,580 --> 00:03:32,440
These were the data science teams, the machine learning teams, a couple of the API team members

51
00:03:32,440 --> 00:03:35,620
arrived to show and figure out what their interests were.

52
00:03:35,620 --> 00:03:41,140
So we basically presented that we wanted to bring Python on road and we asked the teams

53
00:03:41,140 --> 00:03:42,140
what they wanted.

54
00:03:42,140 --> 00:03:44,100
And this comes up to my first don't.

55
00:03:44,100 --> 00:03:47,940
My first don't is don't build something that no one actually wants.

56
00:03:47,940 --> 00:03:52,260
If I had not done this discovery meeting, if I had not figured out what people actually

57
00:03:52,260 --> 00:03:56,340
want, then I could have built an entire project and then at the very end said, hey, here's

58
00:03:56,340 --> 00:03:58,820
Python and nobody would have liked it.

59
00:03:58,820 --> 00:04:00,500
Nobody would have needed it.

60
00:04:00,500 --> 00:04:04,100
We actually had to make sure that people actually wanted to use Python within the company.

61
00:04:04,100 --> 00:04:09,380
The fact that people were showing up to this discovery meeting was a good indicator that

62
00:04:09,380 --> 00:04:12,660
people were interested, but it doesn't necessarily mean that people wanted it.

63
00:04:12,660 --> 00:04:16,740
But after this meeting, we did find out that people were interested and we took in their

64
00:04:16,740 --> 00:04:20,220
requirements like, you know, we, they wanted to use a certain web framework.

65
00:04:20,220 --> 00:04:24,620
They wanted it to come with a certain amount of testing by default, what kind of docs engine

66
00:04:24,620 --> 00:04:27,460
we were going to use, what kind of package management tool they were going to be forced

67
00:04:27,460 --> 00:04:28,660
to learn.

68
00:04:28,660 --> 00:04:32,100
All of these things were discussed in this meeting so that I could build the thing that

69
00:04:32,100 --> 00:04:36,260
people actually wanted instead of the thing that in my mind, I think I know what a Python

70
00:04:36,260 --> 00:04:42,120
developer wants, but actually asking them works a whole lot better.

71
00:04:42,120 --> 00:04:48,300
Which leads to another don't, which is don't develop in isolation or avoid others' opinions.

72
00:04:48,300 --> 00:04:52,040
So whenever I was building all of this and whenever we were doing this, I was constantly

73
00:04:52,040 --> 00:04:55,880
checking back in with these teams to make sure that they were on board with it.

74
00:04:55,880 --> 00:05:00,000
You know, if I ran into an issue or I ran into a problem where I didn't know which tool

75
00:05:00,000 --> 00:05:04,000
to pick or which direction to go, I actually had a Slack channel that I would jump into

76
00:05:04,000 --> 00:05:07,520
and I'd be like, Hey, this is the situation that I'm experiencing.

77
00:05:07,520 --> 00:05:09,220
This is what I'm thinking.

78
00:05:09,220 --> 00:05:10,300
What are your opinions?

79
00:05:11,300 --> 00:05:15,420
Because if you build in isolation, again, you're going to reach the same, almost the

80
00:05:15,420 --> 00:05:18,420
same point where if you build something that no one wants, you're going to build something

81
00:05:18,420 --> 00:05:20,500
that people didn't really have a say in.

82
00:05:20,500 --> 00:05:25,060
And if they don't feel like they had a say in it, they may not want to use it because

83
00:05:25,060 --> 00:05:28,600
they didn't really feel like their tools were being represented or what they wanted to do

84
00:05:28,600 --> 00:05:30,580
was being dealt with.

85
00:05:30,580 --> 00:05:35,300
So definitely never develop in isolation, always elicit feedback from people whenever

86
00:05:35,300 --> 00:05:37,700
you're trying to build something like this.

87
00:05:37,700 --> 00:05:42,060
So the result of this discovery meeting turned out that I was tasked with building a cookie

88
00:05:42,060 --> 00:05:47,780
cutter that creates a default Flask application for the platform, including static analysis,

89
00:05:47,780 --> 00:05:54,100
unit tests, product documentation, logging metrics, service discovery, secrets discovery.

90
00:05:54,100 --> 00:05:57,780
All of this stuff was going to be baked into the application by default.

91
00:05:57,780 --> 00:06:01,420
And then basically you would clone, you would run this archetype, basically run the cookie

92
00:06:01,420 --> 00:06:06,000
cutter app and you would get a ready to go thing and you would remove the hello world

93
00:06:06,000 --> 00:06:10,440
text from the Flask application and you would be ready to go.

94
00:06:10,440 --> 00:06:13,080
So this is what I was tasked with building.

95
00:06:13,080 --> 00:06:18,920
So when it comes to building the archetype, in my experience, create a meaningful set

96
00:06:18,920 --> 00:06:21,600
of expectations and use cases.

97
00:06:21,600 --> 00:06:25,400
So what we did is we talked with the two teams, like which, what do people actually need?

98
00:06:25,400 --> 00:06:27,260
And there was actually two different groups.

99
00:06:27,260 --> 00:06:31,200
There were people that just wanted standard Python, like your typical Flask.

100
00:06:31,200 --> 00:06:33,720
So that way you could build an API or something like that.

101
00:06:33,720 --> 00:06:37,880
Very straightforward, you know, the standard Flask application archetype.

102
00:06:37,880 --> 00:06:41,000
And then there were the people that wanted to use this for data science and machine learning

103
00:06:41,000 --> 00:06:46,120
and actually deploy their data science models to our, you know, distributed paths.

104
00:06:46,120 --> 00:06:50,120
And that being the case, you know, we had to make, actually make the decision, like,

105
00:06:50,120 --> 00:06:52,520
do we try to make all of these go together?

106
00:06:52,520 --> 00:06:55,320
Do we try to make them go differently?

107
00:06:55,320 --> 00:06:58,720
And in the end, we ended up building out to, we ended up building up a base Python one

108
00:06:58,720 --> 00:07:00,480
and then one with MiniConda.

109
00:07:00,480 --> 00:07:02,240
And we set the expectations for both.

110
00:07:02,240 --> 00:07:06,680
You know, the Mini, the base Python Flask one was for API generally and would be good

111
00:07:06,680 --> 00:07:07,680
for that.

112
00:07:07,680 --> 00:07:11,120
And the MiniConda one was going to have a lot more of the data sciency packages, might

113
00:07:11,120 --> 00:07:14,760
not be best for API development, but definitely good for machine learning development and

114
00:07:14,760 --> 00:07:16,460
stuff like that.

115
00:07:16,460 --> 00:07:21,480
And that brings to another do, provide an out of box experience with sensible defaults.

116
00:07:21,480 --> 00:07:26,280
So by this, the archetype essentially provided everything you needed.

117
00:07:26,280 --> 00:07:32,720
It provided an example using unit tests, or sorry, PyTest to show you how to run your

118
00:07:32,720 --> 00:07:36,120
test and it had default tests running out of the gate.

119
00:07:36,120 --> 00:07:37,700
It provided documentation.

120
00:07:37,700 --> 00:07:42,440
Everything was already set up with Sphinx and Swagger so that way you could just deploy

121
00:07:42,440 --> 00:07:46,780
your app and you would document in code and you would get your documentation done.

122
00:07:46,780 --> 00:07:48,680
It gave examples of how to do that.

123
00:07:48,680 --> 00:07:53,440
More often than not, if you provide people with documentation and tests inside of the

124
00:07:53,440 --> 00:07:57,240
archetype, because they're already there, people are actually more willing to test them

125
00:07:57,240 --> 00:08:01,640
because you've done all the heavy lifting and you've figured out how to do all of it.

126
00:08:01,640 --> 00:08:02,640
People will write the docs.

127
00:08:02,640 --> 00:08:03,960
People will write the tests.

128
00:08:03,960 --> 00:08:08,240
One of the things that I have noticed is people don't necessarily like having to choose all

129
00:08:08,240 --> 00:08:12,120
of these frameworks, figure out how to set them up, how to run all of this, what to do

130
00:08:12,120 --> 00:08:13,680
with the results afterwards.

131
00:08:13,680 --> 00:08:18,480
So by providing an out of box experience where tests were already set up, where static analysis

132
00:08:18,480 --> 00:08:22,520
was already set up, where documentation was being generated at every build and where you

133
00:08:22,520 --> 00:08:27,880
could get comprehensive reports of your test framework out of it and you could immediately

134
00:08:27,880 --> 00:08:30,900
import those into Jenkins where you could see them.

135
00:08:30,900 --> 00:08:36,320
People actually were writing tests day one because it was all set up for them.

136
00:08:36,320 --> 00:08:41,000
So by providing this experience for them, people actually really want to use this stuff.

137
00:08:41,000 --> 00:08:44,320
So if you're going to go big, do it all.

138
00:08:44,320 --> 00:08:45,320
Add everything.

139
00:08:45,320 --> 00:08:46,320
Do the docs.

140
00:08:46,320 --> 00:08:47,320
Do the static analysis.

141
00:08:47,320 --> 00:08:48,320
Do the unit tests.

142
00:08:49,320 --> 00:08:54,080
Otherwise, it's unlikely that people will add it in later.

143
00:08:54,080 --> 00:08:58,520
Another good thing that you can definitely do is create a good documentation and a rationale

144
00:08:58,520 --> 00:08:59,620
of your decisions.

145
00:08:59,620 --> 00:09:06,040
So the documentation that I created for this project is very, very robust and actually

146
00:09:06,040 --> 00:09:09,800
inspired some other robust documentation within the company.

147
00:09:09,800 --> 00:09:11,840
And essentially I documented everything I could think of.

148
00:09:11,840 --> 00:09:17,940
I documented a quick start guide on how to use the archetype, what its use cases were,

149
00:09:17,940 --> 00:09:22,740
what its use cases weren't, and then all of the known bugs and issues.

150
00:09:22,740 --> 00:09:26,340
There were bugs and issues and sometimes I was the sole maintainer of this for a while.

151
00:09:26,340 --> 00:09:29,420
I didn't have the time to actually fix these issues.

152
00:09:29,420 --> 00:09:34,140
So I would like, if I knew it was really important that the users knew about it, but I didn't

153
00:09:34,140 --> 00:09:36,540
have time to fix it, I would go and document it.

154
00:09:36,540 --> 00:09:40,740
Or if it was a minor bug that I could get to next sprint, again, I would put the documentation,

155
00:09:40,740 --> 00:09:43,660
the bug in the documentation and people could go and see it.

156
00:09:43,660 --> 00:09:48,420
And then as I fixed them, I would actually remove them and say, Hey, this was resolved

157
00:09:48,420 --> 00:09:51,660
and do all of that on the documentation.

158
00:09:51,660 --> 00:09:55,800
Make sure you provide a rationale of why you're choosing the certain technology.

159
00:09:55,800 --> 00:09:57,380
So why did I choose Flask?

160
00:09:57,380 --> 00:09:58,520
Why did I choose Pytest?

161
00:09:58,520 --> 00:10:01,740
Why at that time we used PIPenv for our package manager?

162
00:10:01,740 --> 00:10:02,740
Why did I choose that?

163
00:10:02,740 --> 00:10:07,940
Well, every single option, every single choice that I made, I actually in the documentation,

164
00:10:07,940 --> 00:10:12,540
there was a link on the side that said rationale of decisions and it compared all the other

165
00:10:12,620 --> 00:10:19,540
decisions, Flask to Django, PIP versus PIPenv versus Poetry versus Conda, all of those things.

166
00:10:19,540 --> 00:10:25,260
And in there I stated exactly why I chose to use what I did and then rationale for why

167
00:10:25,260 --> 00:10:28,280
the other decisions didn't fit my needs or maybe they did.

168
00:10:28,280 --> 00:10:31,820
And I was like, we know I chose this one, but this one would work equally as well.

169
00:10:31,820 --> 00:10:36,060
We'd have to make these changes that the reason that I did this is because if someone were

170
00:10:36,060 --> 00:10:40,260
to come in and they were to see this archetype and they see that it's using Python, but it's

171
00:10:40,260 --> 00:10:41,260
not using their favorite tool.

172
00:10:41,300 --> 00:10:45,100
They may go, oh, well, this is great, but it's not using my favorite tool.

173
00:10:45,100 --> 00:10:46,580
Why are they not using my favorite tool?

174
00:10:46,580 --> 00:10:49,940
And instead of messaging me on Slack, they can just read the documentation and they can

175
00:10:49,940 --> 00:10:52,140
see this is why I chose to do this.

176
00:10:52,700 --> 00:10:57,220
Another good thing that this proves against is, as you could tell by my title slide, I'm

177
00:10:57,220 --> 00:10:58,140
no longer there.

178
00:10:58,380 --> 00:10:59,940
I don't work for Verbo anymore.

179
00:10:59,940 --> 00:11:04,180
I actually wrote this talk before I left and I'm still giving this talk.

180
00:11:05,380 --> 00:11:09,700
And if anybody in the company now wants to they go back and they're still using this

181
00:11:09,700 --> 00:11:10,940
like, well, why did Mason choose this?

182
00:11:10,940 --> 00:11:12,540
Well, they can't just ask me anymore.

183
00:11:12,540 --> 00:11:16,020
I'm not working there, but they can always go back and check my documentation.

184
00:11:16,340 --> 00:11:19,500
And this really helps because, you know, not everybody is going to stay at a company

185
00:11:19,500 --> 00:11:20,900
forever. People are going to move on.

186
00:11:21,140 --> 00:11:24,780
And because people are going to move on, this helps solve the problems.

187
00:11:24,780 --> 00:11:25,780
Like, why did they do this?

188
00:11:25,780 --> 00:11:27,500
Well, I wrote it down right there.

189
00:11:27,660 --> 00:11:28,900
Go read it. You figure it out.

190
00:11:29,700 --> 00:11:34,060
Another thing that I also documented that I feel is really valuable is the development

191
00:11:34,060 --> 00:11:36,260
journey. Like, where did I where did I stumble?

192
00:11:36,260 --> 00:11:37,820
Where did I have issues?

193
00:11:37,820 --> 00:11:39,940
Where where did I see bugs and had to fix them?

194
00:11:39,940 --> 00:11:42,660
How did I fix them when I had meetings?

195
00:11:42,660 --> 00:11:43,580
What came out of those meetings?

196
00:11:43,580 --> 00:11:48,580
I documented all of that inside of this documentation, because again, I don't work there.

197
00:11:48,580 --> 00:11:51,860
Nobody remember. Probably there's probably not that many people that still work there

198
00:11:51,860 --> 00:11:53,860
that remember this entire process.

199
00:11:54,780 --> 00:11:57,900
And it helps other people like which we'll get to later.

200
00:11:57,900 --> 00:12:02,380
Other people may want to actually try to create another architect.

201
00:12:02,380 --> 00:12:04,340
Maybe they want to support Golang or Rust or something.

202
00:12:04,340 --> 00:12:08,100
And by knowing what all of the steps were in my journey, they can now read this

203
00:12:08,100 --> 00:12:10,340
documentation and figure it out from there.

204
00:12:11,780 --> 00:12:17,660
So a big don't for this is don't try to solve every Python use case with one tool.

205
00:12:17,660 --> 00:12:21,060
And a big one for this example that I can think of is the package manager.

206
00:12:21,060 --> 00:12:27,180
So whenever we were setting up between using PIP and we use PIP or mini condo, we went

207
00:12:27,180 --> 00:12:30,980
back and forth on, you know, what do we need to actually separate these into two different

208
00:12:31,340 --> 00:12:35,540
container types? Like, can we just use one and can we make the data science people use

209
00:12:35,540 --> 00:12:41,420
PIPM or can we make the can we make the regular API people use condo?

210
00:12:41,620 --> 00:12:46,020
And in reality, we could have made those decisions, but we ended up going with it's not

211
00:12:46,020 --> 00:12:47,700
the best tool for the use cases.

212
00:12:48,340 --> 00:12:52,580
Condo is a great package manager and works great for data science and ML tools.

213
00:12:53,100 --> 00:12:58,540
But the mini condo installer, I think at the time, was a little bit bigger and took up

214
00:12:58,540 --> 00:13:02,260
a little bit more space in the docker when you're trying to deploy microservices.

215
00:13:03,580 --> 00:13:05,180
It doesn't really work all that great.

216
00:13:05,180 --> 00:13:07,540
So we didn't we didn't want to use it for that.

217
00:13:07,540 --> 00:13:12,020
We didn't want to go with something that, you know, our Python population didn't want.

218
00:13:12,020 --> 00:13:14,540
They were used to something like PIPM and the vice versa.

219
00:13:14,540 --> 00:13:19,460
We didn't want to force the mini condo people to use PIPM because it doesn't get the

220
00:13:19,900 --> 00:13:21,460
proper data science packages for them.

221
00:13:21,460 --> 00:13:26,420
Like it doesn't get the proper like machine compiled binaries that come with the mini

222
00:13:26,420 --> 00:13:30,900
condo, the optimized binaries and optimized packages for these data science tools.

223
00:13:31,060 --> 00:13:33,100
A lot of them only exist in the condo repository.

224
00:13:33,140 --> 00:13:39,300
So we had to make a choice and by not forcing Python to solve everyone problems and not

225
00:13:39,300 --> 00:13:42,820
solve not forcing us to use one tool and this tool is going to solve everything, we

226
00:13:42,820 --> 00:13:48,180
actually came to a more robust system that benefited everybody than forcing everybody

227
00:13:48,180 --> 00:13:49,340
to just use one thing.

228
00:13:49,340 --> 00:13:52,020
And that normally that rarely ever works.

229
00:13:52,020 --> 00:13:55,300
And it usually leads to eventually somewhere down the line, someone's going to fork the

230
00:13:55,300 --> 00:13:57,660
project and build it out the way that they want.

231
00:13:58,220 --> 00:14:05,340
So another one of the dues that we have here is use as few internal or proprietary tools

232
00:14:05,340 --> 00:14:06,020
as possible.

233
00:14:06,300 --> 00:14:08,820
This makes open sourcing your project a lot easier.

234
00:14:09,060 --> 00:14:13,380
So if you work for a large company, Verbo was part of Expedia Group, so it was a relatively

235
00:14:13,380 --> 00:14:17,220
large company and there was a lot of internal pipelining tools that were already built at

236
00:14:17,220 --> 00:14:21,420
Verbo before I got there that a lot of these projects used, but they were very Verbo

237
00:14:21,420 --> 00:14:25,380
specific. They did not, they were not open sourceable.

238
00:14:25,380 --> 00:14:28,500
They were just very much Verbo was baked in there.

239
00:14:28,700 --> 00:14:32,660
And because we didn't know if we ever wanted to open source this archetype, but we did

240
00:14:32,660 --> 00:14:37,580
know that it's possible that someone would want to open source maybe the one of the flask

241
00:14:37,580 --> 00:14:38,940
apps they write or something.

242
00:14:38,940 --> 00:14:45,060
And if we wound up using too much proprietary tooling, we would be unable to open source

243
00:14:45,060 --> 00:14:48,420
this project or we'd have to do an amazing amount of work to do it.

244
00:14:48,780 --> 00:14:53,260
So taking that in mind, I used almost no Verbo internal stuff.

245
00:14:53,260 --> 00:14:59,660
And I luckily I worked, my desk was like right next to the team who the build pipeline

246
00:14:59,660 --> 00:15:01,980
team that did a lot of this internal tooling.

247
00:15:02,260 --> 00:15:04,540
And I was consulting with them every step of the way.

248
00:15:04,580 --> 00:15:05,980
How would you do this?

249
00:15:05,980 --> 00:15:11,580
How could we go about this where we could easily remove the Verbo-ness, the little bit

250
00:15:11,580 --> 00:15:15,500
that was in there out and this be ready for open source, but also comply with your pipeline

251
00:15:15,500 --> 00:15:18,780
standards. And it was a really fun process for both of us.

252
00:15:18,820 --> 00:15:22,220
Well, we all learned a little bit from it and it turned out really good.

253
00:15:22,220 --> 00:15:26,420
And at the end there, you could open source one of those flask apps with, I think you

254
00:15:26,420 --> 00:15:29,460
have to remove two files and you just change your make file.

255
00:15:29,460 --> 00:15:34,340
We actually already have the the open source commands in there and it's like they're the

256
00:15:34,340 --> 00:15:38,180
make target is actually open source dash build run install and stuff.

257
00:15:38,180 --> 00:15:40,860
So that way you could just remove them and open source it immediately.

258
00:15:41,900 --> 00:15:44,140
Always design with open source in mind.

259
00:15:45,180 --> 00:15:48,980
If you design your software with the open source mindset that you're going to eventually

260
00:15:48,980 --> 00:15:54,580
open source it to the world, then you get a lot less of this proprietary fluff in your code.

261
00:15:56,420 --> 00:16:01,220
So while I was doing all of this, there was another process that I was also a part of

262
00:16:01,220 --> 00:16:05,820
that kind of made this really interesting when it comes to like, how was I actually going

263
00:16:05,820 --> 00:16:07,860
to prepare this and how was I going to do this?

264
00:16:07,860 --> 00:16:11,620
And that was the internal PaaS was going through a 2.0 revision.

265
00:16:11,620 --> 00:16:16,020
We were actually building a brand new PaaS using a brand new scheduler moving off of

266
00:16:16,020 --> 00:16:21,780
Mesos to Hasher Corps and Nomad and changing a lot of how the PaaS worked.

267
00:16:21,780 --> 00:16:26,820
So because of this, it was being built at the same time that we were building the Python support.

268
00:16:26,820 --> 00:16:32,900
So I kind of took this as an opportunity to say, well, we're going to want people to move over to the new PaaS.

269
00:16:32,900 --> 00:16:36,660
I was on the PaaS team, so we knew that we wanted to make people move.

270
00:16:36,660 --> 00:16:41,940
Let's entice them a little bit by saying that the Python architecture would only support version two.

271
00:16:41,940 --> 00:16:46,180
Now, in reality, if you were an expert at our PaaS, which there were some employees

272
00:16:46,180 --> 00:16:50,660
in the company, you could realize all you had to do is add one file and it would become

273
00:16:50,660 --> 00:16:53,700
compatible with the version one, but we didn't say that out loud.

274
00:16:54,660 --> 00:16:56,420
So we're like, it only supports version two.

275
00:16:56,420 --> 00:16:59,540
If you want Python, you need to come join us over here in the new space.

276
00:17:01,220 --> 00:17:03,700
And this actually worked kind of well.

277
00:17:03,700 --> 00:17:07,140
It was really good because I was allowed to take advantage, some of the advantage of the new

278
00:17:07,140 --> 00:17:11,860
features. So not only was Python going to be on the new PaaS, but I could use Python

279
00:17:11,860 --> 00:17:16,260
to, I could use Python in this archetype to demonstrate all of the new features.

280
00:17:16,260 --> 00:17:19,780
So people were in the company were getting a view of like, oh, these are the new features

281
00:17:19,780 --> 00:17:24,340
that are coming in multi PaaS too, because I can see what's happening in the Python space.

282
00:17:25,140 --> 00:17:27,700
And people really, really did enjoy that.

283
00:17:27,700 --> 00:17:32,980
The bad part of this was I became very dependent on the PaaS development timeline.

284
00:17:32,980 --> 00:17:39,140
So this project took about four months longer than I was expecting it to because I would get

285
00:17:39,220 --> 00:17:42,820
going and I would write some of this code and I would go to test on the PaaS and I would expose

286
00:17:42,820 --> 00:17:47,220
a bug on the PaaS. And maybe that was not the thing that they were expecting and they didn't

287
00:17:47,220 --> 00:17:50,660
have the time to fix it right away. So I would raise this bug, we would discuss it.

288
00:17:50,660 --> 00:17:55,860
They would put it in their backlog and then they would work on it and then we would come back to it.

289
00:17:55,860 --> 00:18:00,180
And this took time and this happened multiple times.

290
00:18:00,180 --> 00:18:02,100
So I became very dependent on this timeline.

291
00:18:02,740 --> 00:18:04,900
It was good for them because I was their first tester.

292
00:18:04,900 --> 00:18:10,420
I found most of the bugs in the system because I was constantly the one beating it up and actually

293
00:18:10,420 --> 00:18:15,300
trying to use it. But at the same time, it constantly slowed down the project.

294
00:18:15,300 --> 00:18:18,100
And then a project that should have taken me two to three months ended up taking me

295
00:18:18,740 --> 00:18:21,860
almost more than half a year to actually accomplish.

296
00:18:23,220 --> 00:18:26,740
But it was interesting. It was an interesting experience for me.

297
00:18:26,740 --> 00:18:30,180
I kind of chalked this up to both being a success and a failure.

298
00:18:30,180 --> 00:18:35,460
It's a success because we got it on the new PaaS and it worked and it was a failure because

299
00:18:35,460 --> 00:18:40,820
it really delayed the timeline. This one's just kind of weird and you kind of have to take it

300
00:18:40,820 --> 00:18:45,940
as you see it. Maybe if your company is rolling out like Kubernetes versus something else,

301
00:18:45,940 --> 00:18:48,900
maybe don't tie it directly to that Kubernetes rollout.

302
00:18:49,700 --> 00:18:53,380
I don't know. Hopefully the story will resonate with some of you and it'll be useful.

303
00:18:53,940 --> 00:18:56,900
It was a weird thing. I enjoyed it, but it was weird.

304
00:18:57,860 --> 00:19:03,300
So testing of this new product, of this new PaaS, find yourself a group of empowered beta

305
00:19:03,300 --> 00:19:08,180
testers, people who are actually like really excited about Python. They're going to help you

306
00:19:08,180 --> 00:19:11,620
evangelize this later. And that's exactly what happened is we found a group of people that wanted

307
00:19:11,620 --> 00:19:17,620
to use it and they were our biggest cheerleaders for all of this. Find first customers who will

308
00:19:17,620 --> 00:19:20,900
actually attempt to use this application of products. So there's a big difference between

309
00:19:20,900 --> 00:19:26,020
beta testers and people who are like, I'm willing to get paged because we think you did the right

310
00:19:26,020 --> 00:19:31,220
thing. There's a big difference. So find the first customer, quote unquote, who's going to

311
00:19:31,220 --> 00:19:35,700
be using this in production. It may be yourself if you're the one building this out, but just be

312
00:19:35,700 --> 00:19:39,060
willing to use it in production because if you can't find someone who's willing to use it in

313
00:19:39,060 --> 00:19:45,540
production, no one's going to. Like somebody has to take that first step and be willing to

314
00:19:46,420 --> 00:19:50,500
take the risk. And if no one does it, then that doesn't really put a lot of confidence in your

315
00:19:50,500 --> 00:19:55,540
project and then people probably won't want to use it. One of the big don'ts is don't be

316
00:19:55,540 --> 00:19:59,380
come upset by negative feedback or bug reports. There's going to be negative feedback and there's

317
00:19:59,380 --> 00:20:04,420
going to be bug reports. As long as there is software, there will be bugs. So you're just,

318
00:20:04,420 --> 00:20:08,180
it's something you have to get used to. Take him, take him in, take the considerations in.

319
00:20:09,300 --> 00:20:13,540
If it's an actual bug, fix it. That's, that's our job. If it's, you know, negative feedback or

320
00:20:13,540 --> 00:20:17,620
people that are like, you know, I don't like this. I don't like cause of XYZ, try to meet them halfway,

321
00:20:17,620 --> 00:20:23,140
try to figure out why I explained to them, but also know that you can't make everyone happy.

322
00:20:23,220 --> 00:20:27,220
And as long as it's not, you know, terrible, you might just have to take the feedback.

323
00:20:28,900 --> 00:20:33,380
So a couple of do's around evangelism. Just, this is for Python, but for anything,

324
00:20:33,380 --> 00:20:39,060
how to evangelize a product within your company, demonstrate the flexibility of Python.

325
00:20:39,060 --> 00:20:42,420
It, it can do a lot of things. You know, one of the reasons we love it is how it can,

326
00:20:42,420 --> 00:20:46,420
it can be a web language. It can be machine learning. It can be whatever it wants to be

327
00:20:46,420 --> 00:20:52,660
demonstrate how you can use Python for almost anything. If you have troubling applications,

328
00:20:52,660 --> 00:20:57,060
you try rewriting them in Python, rewrite them in the existing applications that are complex or

329
00:20:57,060 --> 00:21:03,780
troublesome in Python and see if people, see if people notice, see if, see if you get a performance

330
00:21:03,780 --> 00:21:07,620
increase or decrease, if you get a decrease, obviously take care of that, but just check

331
00:21:07,620 --> 00:21:12,180
and see, see what you can do to make it better. If you can fix those, that's a great way to get

332
00:21:12,180 --> 00:21:16,900
Python in the door is like, Hey, it fixed, you know, this service was bad. Now I wrote it in Python.

333
00:21:16,900 --> 00:21:24,100
Now it crashes 90% less than the old one. Not bad. Ask to write new applications or features in

334
00:21:24,100 --> 00:21:29,060
Python. So if there's a new feature that's coming up and it's relatively independent of other things,

335
00:21:29,060 --> 00:21:33,140
say, Hey, maybe I could write this in Python. Let's give it a shot. Let's see what Python looks

336
00:21:33,140 --> 00:21:39,060
like in our ecosystem and see if it's something that we want to pursue. And the last one is more

337
00:21:39,060 --> 00:21:45,460
of a sneaky one. And I would say it is kind of sneaky, be the temporary solution. So as my ex

338
00:21:45,460 --> 00:21:49,780
boss used to say, there is no discernible difference between a proof of concept and

339
00:21:49,780 --> 00:21:55,780
production software. And some of you may be shaking your heads and going, yeah, it's pretty true.

340
00:21:55,780 --> 00:21:59,780
There are a lot of times that you're like, how did that code get in prod? And it's there and it's

341
00:21:59,780 --> 00:22:05,380
running. So if it's like a really quick fix or something's going on or like, Oh, well, like,

342
00:22:05,380 --> 00:22:10,020
you know, the world's on fire. I need to write this microservice right now. Yes, I want to write

343
00:22:10,020 --> 00:22:14,100
it and go, but it's going to take me so long. I can write it in 10 lines of Python code. Let me

344
00:22:14,100 --> 00:22:18,420
just deploy it and we'll get it out there and then we'll rewrite it and go or whatever language

345
00:22:18,420 --> 00:22:22,100
you want. And we'll, we'll deal with that later, but let's just, let's solve the problem now. And

346
00:22:22,100 --> 00:22:27,220
then let's, you know, rewrite it later. You'd be surprised how often some of that code is still in

347
00:22:27,220 --> 00:22:34,180
production. So yeah, definitely take a look into that. It is a sneakier solution and I don't always

348
00:22:34,180 --> 00:22:40,420
recommend it, but sometimes it works. Some evangelism don'ts. I would say, don't say that

349
00:22:40,420 --> 00:22:45,060
language sucks. You should use Python. Remove Python and put any other language and then have

350
00:22:45,060 --> 00:22:48,980
this comment directed at you and ask yourself how you feel about it. Do you like it? When people

351
00:22:48,980 --> 00:22:54,500
say Python sucks, you should use Golang or PHP or something like that. No, nobody likes it. Everybody

352
00:22:54,500 --> 00:22:58,260
likes our languages for a reason. Like we like the programming languages that we choose. That's why

353
00:22:58,260 --> 00:23:04,180
we're here at a Python conference today. So saying this to people is the greatest way to turn people

354
00:23:04,180 --> 00:23:10,660
off of a language immediately and to win yourself zero friends. So don't do it. Don't try to use

355
00:23:10,660 --> 00:23:15,940
Python to solve problems. Python doesn't handle well. Do not like, if you have a massively like

356
00:23:15,940 --> 00:23:22,100
paralyzed multiprocessing, you know, data crunch or something, and you need to do that, or you're

357
00:23:22,100 --> 00:23:26,820
doing something like heavy on network resources, something that basically requires lots of threads

358
00:23:26,820 --> 00:23:33,140
and lots of multiprocessing, maybe Python's not the best for that. Don't make Python solve problems

359
00:23:33,140 --> 00:23:37,380
that Python can't solve. That's a great way to make people not like Python because they're not

360
00:23:37,380 --> 00:23:40,580
going to blend. They're not going to go, Oh, well, Python's just not good at doing this. They're

361
00:23:40,580 --> 00:23:44,980
going to go, Oh, Python bad. That's immediately the thought they're going to go to. And you,

362
00:23:44,980 --> 00:23:49,460
you really don't want this. So don't put Python in a situation that it can't win. You know,

363
00:23:49,460 --> 00:23:52,980
it's the same thing as, you know, setting someone up for failure. Same thing. Don't set Python up

364
00:23:52,980 --> 00:23:58,580
for failure. Don't be overbearing. If someone isn't interested in using Python, that's okay.

365
00:23:58,580 --> 00:24:03,620
Maybe come back and talk to them at a later date. Maybe, you know, just talk to other people,

366
00:24:03,620 --> 00:24:06,900
but don't be the person that's constantly like, you want to use Python, you want to use Python,

367
00:24:06,900 --> 00:24:12,020
you want to use Python. That's, that's going to drive people up a wall and it's just not going

368
00:24:12,020 --> 00:24:17,220
to work out well for you. So don't do it. If someone's not interested, respect that walk away.

369
00:24:17,220 --> 00:24:20,420
Maybe eventually they'll become interested later and you know, they'll come to you.

370
00:24:22,580 --> 00:24:28,340
Okay. So the results from this experiment or this giant project that I was working on

371
00:24:28,340 --> 00:24:34,340
were as follows. Within the first month of having this available for the public to use,

372
00:24:35,220 --> 00:24:39,060
80 applications were deployed using this new Python archetype in production.

373
00:24:39,620 --> 00:24:43,860
So I'm going to take that as a win. That was really good. There are a lot of microservices

374
00:24:43,860 --> 00:24:50,260
at Verbo. If anyone ever worked there, there's a lot. So this was pretty good. Unfortunately,

375
00:24:50,260 --> 00:24:55,700
I left relatively soon after this. So I don't, I have no idea about what the stats are of it today.

376
00:24:56,180 --> 00:25:01,540
Um, but yeah, uh, and other, a really cool thing is right before I was leaving other people within

377
00:25:01,540 --> 00:25:07,540
the company, uh, use the development journey part of my documentation to start building support for

378
00:25:07,540 --> 00:25:11,620
Golang. And I was getting questions on like, Hey, how did you do this? What did you, how did you

379
00:25:11,620 --> 00:25:16,100
incorporate these people in? So all of that documentation that I did was actually very

380
00:25:16,100 --> 00:25:22,180
valuable because it helped people figure out, you know, Hey, I want Golang here. And Mason obviously

381
00:25:22,180 --> 00:25:26,020
did this entire journey and he could probably tell me stories about it. Let's go bug him.

382
00:25:26,660 --> 00:25:30,900
Or at least now that I'm gone, let's read the documentation because I wrote it all down.

383
00:25:30,900 --> 00:25:35,540
Always document. If you've ever seen any of my other talks, they're very often about documentation

384
00:25:35,540 --> 00:25:41,860
and document, document, document. So, uh, that was it. The project was a success.

385
00:25:41,860 --> 00:25:46,900
People were using Python internally at Verbo. Um, I left after that to join DigitalOcean

386
00:25:46,900 --> 00:25:51,860
and we all lived happily ever after. Uh, so I just want to say thank you very much for

387
00:25:51,860 --> 00:25:57,380
tuning in today. If you have any questions, um, feel free to tweet at me at Mason Egger.

388
00:25:57,380 --> 00:26:01,220
And if you want to watch me break things in real time, you can come watch me on Twitch

389
00:26:01,220 --> 00:26:05,780
cause I break a lot of code on a lot of days. So thank you again very much and I hope you enjoy

390
00:26:05,780 --> 00:26:07,540
the rest of PyTexas.

391
00:26:16,900 --> 00:26:17,700
you

