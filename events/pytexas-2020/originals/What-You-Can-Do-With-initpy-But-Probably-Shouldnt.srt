1
00:00:00,000 --> 00:00:24,280
Hi, my name is William Horton, and this is what you can do with init.py, but probably

2
00:00:24,280 --> 00:00:25,280
shouldn't.

3
00:00:25,280 --> 00:00:29,520
I'll start with a note on the pronunciation of the file name.

4
00:00:29,520 --> 00:00:34,480
Technically, it should be dunder init.py, but hearing me say dunder, dunder, dunder

5
00:00:34,480 --> 00:00:38,080
throughout this talk would probably get old.

6
00:00:38,080 --> 00:00:43,120
And also, there's very few lessons that I'm going to give you in this talk where I'll

7
00:00:43,120 --> 00:00:49,400
say absolutely do not do this, but I'm very comfortable saying never actually name a file

8
00:00:49,400 --> 00:00:53,520
init.py and put it next to dunder init.py.

9
00:00:53,520 --> 00:00:55,920
That is just going to set you up for confusion.

10
00:00:55,920 --> 00:00:58,680
I would really not suggest doing that.

11
00:00:58,680 --> 00:01:03,400
And so when we talk about init.py, I think we can understand that it's the one with

12
00:01:03,400 --> 00:01:06,160
the underscores.

13
00:01:06,160 --> 00:01:12,520
So if you have any level of experience with Python from beginner to many years in, you

14
00:01:12,520 --> 00:01:16,680
might have had this question, what is init.py doing?

15
00:01:16,680 --> 00:01:20,000
Why is it in all of these directories?

16
00:01:20,000 --> 00:01:24,920
I found myself asking the same question, and before I started researching this talk, my

17
00:01:24,920 --> 00:01:29,760
answer was probably something to do with modules.

18
00:01:29,760 --> 00:01:36,520
So like any professional developer, I consulted Stack Overflow for help with my question,

19
00:01:36,520 --> 00:01:39,000
what is init.py for?

20
00:01:39,000 --> 00:01:44,680
And I was lucky enough that there was already an answer that had been viewed 1.3 million

21
00:01:44,680 --> 00:01:49,120
times, so I was in good company.

22
00:01:49,320 --> 00:01:55,800
And on this page, I found what I needed, a link to the relevant Python documentation.

23
00:01:55,800 --> 00:02:01,120
Before we get too far in, I wanted to give an outline of what exactly are we doing here,

24
00:02:01,120 --> 00:02:03,920
or what's in it for me?

25
00:02:03,920 --> 00:02:10,200
Okay, I promise that's the last time I'll make that kind of pun in this talk, but I

26
00:02:10,200 --> 00:02:14,600
had to do it at least once.

27
00:02:14,600 --> 00:02:20,080
So what we're going to be doing first is to outline the common uses of init.py.

28
00:02:20,080 --> 00:02:21,720
What is it intended for?

29
00:02:21,720 --> 00:02:24,920
How is it used commonly in different libraries?

30
00:02:24,920 --> 00:02:30,640
Then we'll get to what I would call interesting uses, things that you might not see everywhere,

31
00:02:30,640 --> 00:02:36,400
places where people have really stretched the use of this file in ways that are illustrative

32
00:02:36,400 --> 00:02:39,520
of how you can use it.

33
00:02:39,520 --> 00:02:43,240
And finally, we're going to consult big data.

34
00:02:43,240 --> 00:02:47,580
So back to where we were, a link to the relevant Python documentation.

35
00:02:47,580 --> 00:02:50,160
And what does that tell us?

36
00:02:50,160 --> 00:02:53,280
So Python's import system.

37
00:02:53,280 --> 00:02:59,120
Python defines two different kinds of packages, regular packages and namespace packages.

38
00:02:59,120 --> 00:03:02,880
This leads to the question, what exactly is a package?

39
00:03:02,880 --> 00:03:06,140
And the definition of package is somewhat recursive.

40
00:03:06,140 --> 00:03:15,220
So a package is basically a Python module that can then contain sub modules or sub packages.

41
00:03:15,220 --> 00:03:20,180
And on a technical level, it's basically the same as a module, but with this special attribute

42
00:03:20,180 --> 00:03:24,420
called thunder path that we'll get to later.

43
00:03:24,420 --> 00:03:27,460
And this leads to the question, what is a module?

44
00:03:27,460 --> 00:03:33,780
And a module has a namespace that can refer to other Python objects.

45
00:03:33,780 --> 00:03:37,180
And modules are loaded when you import.

46
00:03:37,180 --> 00:03:43,980
And to illustrate this with an actual example, if you had this statement from foo.bar.baz.import

47
00:03:43,980 --> 00:03:48,180
great function, foo, in this case, would be the package.

48
00:03:48,180 --> 00:03:53,520
You can access into that package using this dot notation to access a sub package.

49
00:03:53,520 --> 00:04:01,580
And then another dot leads you to a sub module where you can get your function.

50
00:04:01,580 --> 00:04:06,380
So we saw from the documentation, there are two different kinds of packages, namespace

51
00:04:06,380 --> 00:04:08,760
packages and regular packages.

52
00:04:08,760 --> 00:04:14,320
We'll cover namespace packages very briefly to start, because they really don't have anything

53
00:04:14,320 --> 00:04:16,780
to do with init.py.

54
00:04:16,780 --> 00:04:23,440
Except they do lead us to one use case, what can you do with init.py, which is delete it.

55
00:04:23,440 --> 00:04:31,780
See the pep that outlined namespace packages pep420 actually made init.py optional.

56
00:04:31,780 --> 00:04:36,260
So there's no longer going to be any warning for directories that are missing it.

57
00:04:36,260 --> 00:04:39,700
And you actually can import from them.

58
00:04:39,700 --> 00:04:44,420
And it'll create what's called the namespace package.

59
00:04:44,420 --> 00:04:51,280
Or as one very excited Reddit user put, instead of all that stuff where every folder has to

60
00:04:51,280 --> 00:04:57,820
have init.py, you can do from any fn folder import awesome.

61
00:04:57,820 --> 00:05:03,620
So clearly some people are excited about this idea that init.py became optional with the

62
00:05:03,620 --> 00:05:07,020
advent of namespace packages.

63
00:05:07,020 --> 00:05:09,640
And so this illustrates how this would work.

64
00:05:09,640 --> 00:05:14,740
So I can define a package with a module and put Python code in it.

65
00:05:14,740 --> 00:05:17,420
And you see there's no init.py and it still works.

66
00:05:17,420 --> 00:05:24,480
I can still import from this, just as if I was using a regular package with init.py.

67
00:05:24,480 --> 00:05:31,440
So for a technical level, it is optional to include these init.pys, you can delete them.

68
00:05:31,440 --> 00:05:33,920
But you probably shouldn't.

69
00:05:33,920 --> 00:05:38,360
And in pep420, they actually give some reasons.

70
00:05:38,360 --> 00:05:42,500
So they say, it's not actually getting rid of regular packages.

71
00:05:42,500 --> 00:05:48,480
And actually, there's performance advantages of having regular package within init.py.

72
00:05:48,480 --> 00:05:52,980
So there's still some good reasons to actually include it.

73
00:05:52,980 --> 00:05:58,240
Or as a Stack Overflow user put it, do not use namespace package.

74
00:05:58,240 --> 00:06:00,300
It's for very rare use cases.

75
00:06:00,300 --> 00:06:03,940
And unless you actually know that you need this namespace package, you should probably

76
00:06:03,940 --> 00:06:08,080
stick with regular package, which is what's suggested by the naming.

77
00:06:08,080 --> 00:06:13,920
Regular packages are for regular use cases and namespace packages are for some special

78
00:06:13,920 --> 00:06:17,340
use cases that Python wanted to support.

79
00:06:17,340 --> 00:06:22,200
So I would say for the most part, stick to regular packages.

80
00:06:22,200 --> 00:06:24,340
So let's get into regular packages.

81
00:06:24,340 --> 00:06:33,520
Basically, a regular package is the way that Python packages existed up until Python 3.3.

82
00:06:33,520 --> 00:06:38,020
So 3.2 and earlier only had regular packages.

83
00:06:38,020 --> 00:06:41,960
You define an init.py file in a directory.

84
00:06:41,960 --> 00:06:48,740
And when you try to import from that directory, the code in that init.py file will be executed.

85
00:06:48,740 --> 00:06:55,020
And any of the objects there become part of that package.

86
00:06:55,020 --> 00:07:04,380
So the reference to the history or kind of pre-3.3 brings up the question, why init.py?

87
00:07:04,380 --> 00:07:07,400
Why did this even exist in the first place?

88
00:07:07,400 --> 00:07:14,520
So if you look at some of the older documentation, so this is the Python 2.7 documentation, basically

89
00:07:14,520 --> 00:07:24,360
what they were trying to avoid is overshadowing existing packages by having your directory

90
00:07:24,360 --> 00:07:28,760
names kind of overlap.

91
00:07:28,760 --> 00:07:30,980
So this is an example, string.

92
00:07:30,980 --> 00:07:38,620
So if you had any directory in your project named string, it might actually shadow the

93
00:07:38,620 --> 00:07:42,960
built-in string, and you probably wouldn't want that.

94
00:07:42,960 --> 00:07:50,300
So by default, unless you put an init.py in it, they would consider that you didn't actually

95
00:07:50,300 --> 00:07:56,500
want to look at that package or look at that directory as a package.

96
00:07:56,500 --> 00:08:02,540
So this is how, this is the use case, and this is how it existed up until the introduction

97
00:08:02,540 --> 00:08:10,540
of namespace packages, and kind of why they introduced init.py in the first place.

98
00:08:10,540 --> 00:08:14,540
So this is an example of how you might use init.py.

99
00:08:14,540 --> 00:08:20,020
So you can see I have a package, inside the package I have init.py.

100
00:08:20,020 --> 00:08:23,080
And you can define any kind of Python object within it.

101
00:08:23,080 --> 00:08:28,440
So you have a class, a variable, a function, any of these things.

102
00:08:28,440 --> 00:08:33,520
And then when I import from my package, I can access any of these objects that exist

103
00:08:33,520 --> 00:08:36,440
in that init.py file.

104
00:08:36,440 --> 00:08:41,780
So what are some common uses of init.py?

105
00:08:41,780 --> 00:08:45,400
First of all, we might have package metadata.

106
00:08:45,400 --> 00:08:51,240
So it's very common to include version, author, and other information.

107
00:08:51,240 --> 00:08:52,720
Some of them might be more extensive.

108
00:08:52,720 --> 00:08:57,200
You can see this is from the kombu package, which is from the Celery project.

109
00:08:57,200 --> 00:09:01,560
Some just stick to a Dunder version, but I would say it's fairly common to find, at very

110
00:09:01,560 --> 00:09:07,680
least, the version defined in the init.py to give someone an easy way to check when

111
00:09:07,680 --> 00:09:13,240
you import the package to see what version do I actually have.

112
00:09:13,240 --> 00:09:18,520
A second use case that I would say is pretty common is making your API flatter.

113
00:09:18,520 --> 00:09:21,040
So what does this look like?

114
00:09:21,040 --> 00:09:26,240
So let's say I have this MusicMaker library, and I'm putting some classes in there.

115
00:09:26,240 --> 00:09:31,520
So I have an instrument class, which is kind of a base class, I have guitar and violin.

116
00:09:31,520 --> 00:09:36,240
And people who are using my MusicMaker package can import guitar and violin, because I've

117
00:09:36,240 --> 00:09:41,120
defined them in the init.py file.

118
00:09:41,120 --> 00:09:46,980
But let's say that I want to expand my project, and let's say guitar is going to have a bunch

119
00:09:47,100 --> 00:09:52,160
of code to itself, and violin might be part of other strings that I want to organize into

120
00:09:52,160 --> 00:09:53,420
a different file.

121
00:09:53,420 --> 00:09:54,420
So this would be great.

122
00:09:54,420 --> 00:09:59,280
This is probably the kind of refactoring that you want to do at some point.

123
00:09:59,280 --> 00:10:03,700
But it does bring up a problem of how do I expose the API of my library?

124
00:10:03,700 --> 00:10:08,940
Maybe I really like to still be able to expose guitar and violin on the top level under the

125
00:10:08,940 --> 00:10:10,960
MusicMaker package.

126
00:10:10,960 --> 00:10:20,680
So basically, if I import from these other files into my init.py, that would expose it

127
00:10:20,680 --> 00:10:26,160
on my top level package and allow me to move the code around without actually changing

128
00:10:26,160 --> 00:10:27,720
the API to the user.

129
00:10:27,720 --> 00:10:32,080
So they would still be able to do from MusicMaker import guitar and violin.

130
00:10:32,080 --> 00:10:38,300
I would say this is a very, very common use of init.py to make kind of a flatter API,

131
00:10:38,300 --> 00:10:43,300
so that they don't have to actually be aware necessarily of how you've organized all the

132
00:10:43,300 --> 00:10:48,180
files in your project in order to access the main classes and functions that you want to

133
00:10:48,180 --> 00:10:50,640
expose.

134
00:10:50,640 --> 00:10:56,420
Another interesting case that I found in a couple of init.pys I looked at, at least,

135
00:10:56,420 --> 00:10:58,500
is enforcing dependencies.

136
00:10:58,500 --> 00:11:05,860
And so with the end of life of Python 2, this starts to be a way that projects enforce this.

137
00:11:05,860 --> 00:11:10,300
And you can imagine that there's ways to set this on the metadata and other ways to

138
00:11:10,300 --> 00:11:14,260
specify basically only use this with Python 3.

139
00:11:14,260 --> 00:11:20,700
But the best, or I guess the most foolproof check you can have is in init.py.

140
00:11:20,700 --> 00:11:25,120
So you know it's going to execute as soon as it gets imported.

141
00:11:25,120 --> 00:11:28,960
So there you can check the version info and basically raise an exception and say, I'm

142
00:11:28,960 --> 00:11:35,360
not going to let anybody import this if they're not running Python 3.

143
00:11:35,360 --> 00:11:40,440
And in pandas, we can actually see a more kind of sophisticated use of this dependency

144
00:11:40,440 --> 00:11:46,760
checking where they can say, OK, we're going to find certain dependencies that should exist.

145
00:11:46,760 --> 00:11:50,680
And within init.py, we're actually going to try to import them.

146
00:11:50,680 --> 00:11:56,080
And if we can't import those dependencies, we're going to raise an error.

147
00:11:56,080 --> 00:12:01,660
And so this is a way to enforce these dependencies basically at import time.

148
00:12:01,660 --> 00:12:07,920
So you don't run into any problems where your code later is trying to use these things

149
00:12:07,920 --> 00:12:11,620
and the errors might be less harder to grasp.

150
00:12:11,620 --> 00:12:18,180
So it can be nice for the user to have a clear error message coming just from the import

151
00:12:18,180 --> 00:12:19,680
level.

152
00:12:19,680 --> 00:12:26,080
So that could be for any kind of dependencies you might want to define.

153
00:12:26,080 --> 00:12:31,940
So those are some of the common or more, I guess, useful cases where putting some code

154
00:12:31,940 --> 00:12:36,300
in your init.py might get you some benefit for the project.

155
00:12:36,300 --> 00:12:40,240
Now I wanted to move into more interesting examples.

156
00:12:40,240 --> 00:12:43,020
One of these is suggested by the documentation.

157
00:12:43,020 --> 00:12:50,220
So the init.py can set or alter the dunder path attribute, which I mentioned earlier.

158
00:12:50,220 --> 00:12:59,280
And this is how basically people did namespace packages before pep 2020, 420, sorry.

159
00:12:59,280 --> 00:13:00,840
So what does this look like exactly?

160
00:13:00,840 --> 00:13:05,880
And how could we use it even after namespace packages already exist?

161
00:13:05,880 --> 00:13:11,260
So within init.py, you're able to modify this attribute dunder path.

162
00:13:11,260 --> 00:13:13,800
And so let's say I have two directories.

163
00:13:13,800 --> 00:13:18,820
I have one directory, and then I have what I've called directory two.

164
00:13:18,820 --> 00:13:25,140
And let's say that from the first directory, I actually want to be able to import modules

165
00:13:25,140 --> 00:13:28,540
that exist in the second one.

166
00:13:28,540 --> 00:13:33,360
That actually is totally possible using some weird logic in your init.py.

167
00:13:33,360 --> 00:13:41,180
So you can see I've done an append on the path, and I've added the path to my second

168
00:13:41,180 --> 00:13:46,300
directory to the dunder path attribute.

169
00:13:46,880 --> 00:13:51,580
This would actually allow me to do from directory.foo import foo.

170
00:13:51,580 --> 00:13:56,320
So importing a class that I defined in the other directory.

171
00:13:56,320 --> 00:13:58,760
Most is kind of strange.

172
00:13:58,760 --> 00:14:05,720
I would say that some of the uses for this could be somewhat beneficial.

173
00:14:05,720 --> 00:14:08,200
And some of them might be a little bit more devious.

174
00:14:08,200 --> 00:14:13,140
So this could really mess with people who are trying to understand your code or look

175
00:14:13,140 --> 00:14:14,140
at it.

176
00:14:14,140 --> 00:14:18,840
I wouldn't necessarily suggest doing this, but in case you run into maybe some code that

177
00:14:18,840 --> 00:14:24,360
was implemented before namespace packages exist, or if one of your coworkers gets very

178
00:14:24,360 --> 00:14:30,720
creative, this will help you kind of understand, OK, what is dunder path really doing?

179
00:14:30,720 --> 00:14:32,680
Why would we want to modify it?

180
00:14:32,680 --> 00:14:39,340
So this is one of the trickier, weirder things that you could do with init.py.

181
00:14:39,340 --> 00:14:42,000
Another more interesting thing I came across.

182
00:14:42,000 --> 00:14:45,740
This is within kombu, which is a celery project.

183
00:14:45,740 --> 00:14:48,300
So you see, let's go through these lines.

184
00:14:48,300 --> 00:14:51,300
We have static a hack equals true.

185
00:14:51,300 --> 00:14:58,440
The second line, if you really parse it, is basically taking that same variable and setting

186
00:14:58,440 --> 00:15:01,780
it to false on the global level.

187
00:15:01,780 --> 00:15:04,700
So you've set it to true, and then you actually set it to false.

188
00:15:04,700 --> 00:15:11,600
And then you check if it is true, you're going to import these things into init.py.

189
00:15:11,600 --> 00:15:16,620
So that would be kind of the API flattening case we talked about, but in a kind of weirder

190
00:15:16,620 --> 00:15:17,620
way.

191
00:15:17,620 --> 00:15:24,820
So if you read the comment, basically they don't actually want to execute this code,

192
00:15:24,820 --> 00:15:30,260
but for static analyzers, they want to be able to have these seen as if they were imported

193
00:15:30,260 --> 00:15:34,100
so that all the kind of type checking can work.

194
00:15:34,100 --> 00:15:35,100
And why would that be?

195
00:15:35,100 --> 00:15:39,860
If we dig into this a little bit more, we can see that they're actually doing something

196
00:15:40,000 --> 00:15:44,800
even more interesting in their init.py, which is they're importing a kind of lazy loading

197
00:15:44,800 --> 00:15:45,800
system.

198
00:15:45,800 --> 00:15:53,880
So when you do kombu.something, it's not actually already there in the code, which is how kind

199
00:15:53,880 --> 00:15:59,720
of we saw before is when you import, it should execute init.py, and it should have all of

200
00:15:59,720 --> 00:16:03,520
the other code kind of loaded into it bound on that namespace.

201
00:16:03,520 --> 00:16:10,780
So they kind of point at this other file and say, okay, we can look at the rationale.

202
00:16:10,780 --> 00:16:18,660
And basically, for purposes of exposing this API, this other project, worksog, wanted to

203
00:16:18,660 --> 00:16:25,780
expose a lot of things on the top level, so worksog.whatever, but that would mean loading

204
00:16:25,780 --> 00:16:26,780
a ton of code.

205
00:16:26,780 --> 00:16:32,060
This is a fairly large project, and so they implemented this workaround kind of in the

206
00:16:32,060 --> 00:16:38,640
Python module system where they lazy load each module as its access.

207
00:16:38,640 --> 00:16:44,040
So when you do worksog.something, it's only then actually going and loading that part

208
00:16:44,040 --> 00:16:49,240
of the module, which is kind of interesting and definitely could have its use cases.

209
00:16:49,240 --> 00:16:56,360
So we come back here, if you were to look at the rest of this file, if you are interested

210
00:16:56,360 --> 00:17:00,680
in this kind of thing, you can see they've actually defined some very interesting code

211
00:17:00,760 --> 00:17:04,840
dealing with the module system to say, okay, we don't want this to work like kind of a

212
00:17:04,840 --> 00:17:09,040
regular init.py where it would execute it and load all the stuff.

213
00:17:09,040 --> 00:17:13,360
We're going to say it's actually going to do this lazy loading thing.

214
00:17:13,360 --> 00:17:19,240
So this is kind of cool, and maybe you might have a use case for this.

215
00:17:19,240 --> 00:17:24,680
So those are a couple of the interesting use cases, but finally, we're going to look at

216
00:17:24,680 --> 00:17:25,680
big data.

217
00:17:25,680 --> 00:17:28,680
And what do I mean by this?

218
00:17:28,680 --> 00:17:33,880
Luckily, there's a ton of GitHub data available publicly on Google BigQuery.

219
00:17:33,880 --> 00:17:42,040
This is a project that was announced in 2016 where they collected from over 2.8 million

220
00:17:42,040 --> 00:17:46,720
GitHub repositories and stored it and made that data available.

221
00:17:46,720 --> 00:17:52,320
So this can help us answer some really cool questions if we're able to formulate the queries

222
00:17:52,320 --> 00:17:53,320
right.

223
00:17:53,320 --> 00:17:56,960
And so we're mainly going to be looking at two of these tables that are exposed.

224
00:17:57,080 --> 00:18:01,840
Basically, there's files and there's also the contents of the files.

225
00:18:01,840 --> 00:18:03,480
And we can join these together.

226
00:18:03,480 --> 00:18:10,320
And this gives us basically what repo is the file in, the path to the file, the size of

227
00:18:10,320 --> 00:18:11,320
the file.

228
00:18:11,320 --> 00:18:18,280
And if we filter down to only paths with init.py, we can start to see some interesting things.

229
00:18:18,280 --> 00:18:27,480
We can answer questions like, what percent of init.py files are just blank?

230
00:18:27,480 --> 00:18:31,520
And if this were a live talk, I'd probably do a show of hands, but I'll let you do this

231
00:18:31,520 --> 00:18:33,400
at home.

232
00:18:33,400 --> 00:18:39,600
How many people think that greater than 50% of all init.py files in these 2.8 million

233
00:18:39,600 --> 00:18:43,140
repos were just blank files?

234
00:18:43,140 --> 00:18:48,220
And how many people think that it was less than 50%?

235
00:18:48,220 --> 00:18:56,980
So it was actually pretty close, but 46.67% of all the init.py files that I could query

236
00:18:56,980 --> 00:19:01,940
for in this data set were just size equals zero, nothing in the file.

237
00:19:01,940 --> 00:19:07,620
So despite all the things I'm telling you about init.py, I would say it's definitely

238
00:19:07,620 --> 00:19:11,380
always an option to just leave it blank.

239
00:19:11,380 --> 00:19:15,740
Another question would be, what is the most init.py files in a single repo?

240
00:19:15,740 --> 00:19:19,020
And the answer was 3,886.

241
00:19:19,020 --> 00:19:21,860
And so I had to look at this repo.

242
00:19:21,860 --> 00:19:25,900
And it's this repo called Lambda Packs, which is kind of interesting.

243
00:19:25,900 --> 00:19:33,260
And it's basically packages of different libraries for use in AWS Lambda.

244
00:19:33,260 --> 00:19:35,660
So that kind of explains why there's all these init.py files.

245
00:19:35,660 --> 00:19:41,660
This is actually a repo that has a ton of different libraries within it.

246
00:19:42,140 --> 00:19:49,100
But there's also repos that have a ton of init.py files, not kind of counting vendor

247
00:19:49,100 --> 00:19:50,100
dependencies.

248
00:19:50,100 --> 00:19:56,700
So the Azure SDK for Python, as far as I could tell, didn't have kind of these dependencies

249
00:19:56,700 --> 00:20:05,820
in it, but just is a really big library, and it has almost 2,000 init.py files.

250
00:20:05,820 --> 00:20:11,340
And finally, a very interesting one to me was, what is the largest init.py file that

251
00:20:11,340 --> 00:20:14,220
GitHub has ever recorded?

252
00:20:14,220 --> 00:20:21,220
And so it's this library called Semba, in Semba init.py.

253
00:20:21,220 --> 00:20:22,380
So I dug into this.

254
00:20:22,380 --> 00:20:23,380
I went to GitHub.

255
00:20:23,380 --> 00:20:26,780
I'm like, I want to see what the biggest init.py file is.

256
00:20:26,780 --> 00:20:31,700
I've been doing this research on init.py, I've got to know.

257
00:20:31,700 --> 00:20:38,540
And this file was so big that you couldn't even see, it couldn't even be rendered in

258
00:20:38,540 --> 00:20:41,980
GitHub using the Python renderer.

259
00:20:41,980 --> 00:20:47,780
You had to view only the raw file, and this is over 2.5 megabytes worth of data in this

260
00:20:47,780 --> 00:20:49,100
file.

261
00:20:49,100 --> 00:20:53,260
And so you can go into it in the raw version and see, it is a lot of data and defining

262
00:20:53,260 --> 00:20:57,540
some constants, and it has something to do with science.

263
00:20:57,540 --> 00:21:03,060
But the really interesting thing to me was to see, this actually had to do with a PhD

264
00:21:04,060 --> 00:21:09,060
and seems to contain a ton of the code related to this project.

265
00:21:09,060 --> 00:21:12,220
So that's a really, I think, a great answer.

266
00:21:12,220 --> 00:21:13,820
What can you do with init.py?

267
00:21:13,820 --> 00:21:16,980
You could write a whole PhD in it if you really wanted to.

268
00:21:16,980 --> 00:21:21,940
You might end up, again, with maybe 2.5 megabytes worth of code in this file.

269
00:21:21,940 --> 00:21:25,780
But I think that's a pretty cool use case.

270
00:21:25,780 --> 00:21:28,740
So that's kind of one lesser known project.

271
00:21:28,740 --> 00:21:30,860
I don't think it's very widely used.

272
00:21:30,860 --> 00:21:34,740
So what can the data tell us about the projects that you know and love?

273
00:21:34,740 --> 00:21:40,580
And thankfully, the public data included this table, sample repos, which basically narrowed

274
00:21:40,580 --> 00:21:45,980
it down to only repos that had gotten at least two stars during this time period when they

275
00:21:45,980 --> 00:21:48,100
were collecting the data.

276
00:21:48,100 --> 00:21:54,420
And so if I join onto sample repos, and so I only use files from there, this starts to

277
00:21:54,420 --> 00:22:00,160
identify some maybe more common projects that have these large init.py files that we can

278
00:22:00,160 --> 00:22:01,960
dig into.

279
00:22:01,960 --> 00:22:10,000
So one that showed up is Faker, a very popular library for fake data, which I've used myself

280
00:22:10,000 --> 00:22:13,640
for tests and other things.

281
00:22:13,640 --> 00:22:15,920
Over 10,000 stars.

282
00:22:15,920 --> 00:22:18,120
And it had this huge init.py file.

283
00:22:18,120 --> 00:22:23,160
This is over 4,000 lines of code in this file, over 170 kilobytes.

284
00:22:23,160 --> 00:22:27,560
And so I was very curious digging into this.

285
00:22:27,560 --> 00:22:32,360
And basically, you can see if you look at the file name, this is the provider for the

286
00:22:32,360 --> 00:22:36,040
Bosnian language for a list of jobs.

287
00:22:36,040 --> 00:22:40,000
And compared to the English version, it's a lot bigger.

288
00:22:40,000 --> 00:22:43,600
It's like almost maybe six or seven times bigger.

289
00:22:43,600 --> 00:22:49,080
And in the file comment itself, it says this data came from an official government list

290
00:22:49,080 --> 00:22:50,680
of professions.

291
00:22:50,680 --> 00:22:54,800
And so I was digging into this and I said, okay, I want to see this list.

292
00:22:54,800 --> 00:23:03,000
Sadly, this site, the reference in the comment, can't actually be accessed anymore.

293
00:23:03,000 --> 00:23:06,880
So that leads to another answer for what can you do with init.py?

294
00:23:06,880 --> 00:23:10,000
You can actually store government data in init.py.

295
00:23:10,000 --> 00:23:18,480
So this is a repository for the Bosnian language job information.

296
00:23:18,480 --> 00:23:24,560
Another project that showed up in this query was Airflow, an ETL tool that I've set up

297
00:23:24,560 --> 00:23:26,800
in my company.

298
00:23:26,800 --> 00:23:32,340
And they had at least one init.py file that was also topping 170 kilobytes.

299
00:23:32,340 --> 00:23:36,880
So I went to the repo, dug into it.

300
00:23:36,880 --> 00:23:43,960
But I was a little confused because when I got to models slash init.py, it was only 37

301
00:23:43,960 --> 00:23:44,960
lines.

302
00:23:44,960 --> 00:23:46,960
So where did all the code go?

303
00:23:46,960 --> 00:23:49,640
Where did it go out of init.py?

304
00:23:49,640 --> 00:23:54,400
So I did a little more digging into the history on GitHub and I found this PR move models

305
00:23:54,400 --> 00:23:57,840
out of models.py.

306
00:23:57,840 --> 00:24:05,080
And the description says, finally moves all the classes out of the infamous models.py.

307
00:24:05,080 --> 00:24:10,000
And one clarification there, because this also confused me, is this wasn't, there's

308
00:24:10,000 --> 00:24:11,600
no models.py file.

309
00:24:11,600 --> 00:24:14,000
And you can see that in the diff.

310
00:24:14,000 --> 00:24:21,840
So basically, it was removing over 4,000 lines of code from models slash init.py.

311
00:24:22,280 --> 00:24:26,200
In total, this PR touched over 8,000 lines of code.

312
00:24:26,200 --> 00:24:35,160
So I would say one thing you can do in init.py is move potentially a lot of code out of it.

313
00:24:35,160 --> 00:24:41,640
So this is something to keep in mind as your project develops is what should go in, what

314
00:24:41,640 --> 00:24:47,040
should go in other files, so maybe you don't necessarily end up having to have a contributor

315
00:24:47,040 --> 00:24:49,680
clean this up a couple years down the road.

316
00:24:49,680 --> 00:24:55,560
But on the other hand, you can get pretty far with this, and this obviously worked for

317
00:24:55,560 --> 00:25:02,880
Airflow for a long time, so this is one example of a very large init.py file that did a lot

318
00:25:02,880 --> 00:25:07,400
of heavy lifting for a big project.

319
00:25:07,400 --> 00:25:14,600
So I gave you an overview of some of the more common and more interesting things that you

320
00:25:14,600 --> 00:25:17,360
can do with init.py.

321
00:25:17,360 --> 00:25:21,760
If you have any interesting examples of your own, I would love to hear about them.

322
00:25:21,760 --> 00:25:25,360
You can tweet at me at hortonheresafoo.

323
00:25:25,360 --> 00:25:25,760
Thank you.

