1
00:00:00,000 --> 00:00:01,000
Yeah.

2
00:00:01,000 --> 00:00:02,000
Awesome.

3
00:00:02,000 --> 00:00:03,000
Well, hello again, everyone.

4
00:00:03,000 --> 00:00:04,000
You probably know me by now.

5
00:00:04,000 --> 00:00:05,000
My name is Pandy Knight.

6
00:00:05,000 --> 00:00:15,520
I'm the automation panda, a developer advocate, and a Pythonista.

7
00:00:15,520 --> 00:00:19,200
I know this is the last talk of the conference, and we've had our heads crammed full of technical

8
00:00:19,200 --> 00:00:23,760
knowledge, so for the first few minutes, I would just want to have a real moment.

9
00:00:23,760 --> 00:00:28,000
The past three years have been pretty interesting, haven't they?

10
00:00:28,000 --> 00:00:29,000
Right?

11
00:00:29,000 --> 00:00:31,760
I mean, it was three years ago was the last time we had an in-person PyTexas.

12
00:00:31,760 --> 00:00:32,760
I was here.

13
00:00:32,760 --> 00:00:33,760
I was on this stage.

14
00:00:33,760 --> 00:00:35,800
It was pretty awesome.

15
00:00:35,800 --> 00:00:39,960
But one thing I've learned is that it's good to be human.

16
00:00:39,960 --> 00:00:45,440
It's good to have these connections to meet up in person, to have real time, to have real

17
00:00:45,440 --> 00:00:46,440
talk.

18
00:00:46,440 --> 00:00:49,720
And so rather than lead off by saying, yeah, I'm a developer advocate and test guru and

19
00:00:49,720 --> 00:00:55,520
da-da-da-da-da-da, I want to show you more about who I am.

20
00:00:55,520 --> 00:00:58,560
Here on the screen are two of my best friends.

21
00:00:58,560 --> 00:01:03,600
This is my wife, Lu Jing, and our little puppy dog, Suki, a six-month-old French bulldog.

22
00:01:03,600 --> 00:01:04,600
Isn't she adorable?

23
00:01:04,600 --> 00:01:08,400
I mean, both of them, but particularly the puppy.

24
00:01:08,400 --> 00:01:09,400
Like I am a changed man.

25
00:01:09,400 --> 00:01:14,040
I never used to like dogs, but man, I've been FOMO-ing being here and not home.

26
00:01:14,040 --> 00:01:17,680
I keep looking at puppy photos on my phone the whole time.

27
00:01:17,680 --> 00:01:18,680
Yeah.

28
00:01:18,680 --> 00:01:24,800
Also, during pandemic, aside from Python and software stuff, I've gotten into classic cars.

29
00:01:24,800 --> 00:01:27,480
This is a 1970 Volkswagen Beetle.

30
00:01:27,480 --> 00:01:28,480
This is mine.

31
00:01:28,480 --> 00:01:33,040
Also, Suki is in there because I just love having my favorite things together.

32
00:01:33,040 --> 00:01:36,760
And when I say this is my car, this is not like, oh, I have a car I keep in the garage

33
00:01:36,760 --> 00:01:38,320
and pull out on sunny days.

34
00:01:38,320 --> 00:01:43,000
This is my daily driver, because my modern car died.

35
00:01:43,000 --> 00:01:47,120
And we had this awesome idea of, well, why don't we just go backwards in history?

36
00:01:47,120 --> 00:01:51,200
And so yes, I drive this to pick up groceries and visit my friends and stuff.

37
00:01:51,200 --> 00:01:52,200
It's been a project.

38
00:01:52,200 --> 00:01:54,200
You can ask me about that later.

39
00:01:54,200 --> 00:01:56,200
Oh, gosh.

40
00:01:57,200 --> 00:02:03,280
Also, I do a lot of home renovation stuff together with my family.

41
00:02:03,280 --> 00:02:06,920
This is a house that used to be a TV-grade fixer-upper that we fixed up.

42
00:02:06,920 --> 00:02:08,640
My mother-in-law lives here.

43
00:02:08,640 --> 00:02:10,680
I like to think it looks very nice and modern.

44
00:02:10,680 --> 00:02:12,400
Oh, and we have another classic car.

45
00:02:12,400 --> 00:02:16,720
This is a 1979 Volkswagen Bus Type 2.

46
00:02:16,720 --> 00:02:18,200
It does not run at the moment.

47
00:02:18,200 --> 00:02:19,200
The Beetle does.

48
00:02:19,200 --> 00:02:20,200
This does not.

49
00:02:20,200 --> 00:02:24,640
We like to call this thing the Big Turd.

50
00:02:24,640 --> 00:02:28,960
And when we cover it up, we call it the Big Burrito.

51
00:02:28,960 --> 00:02:30,760
I'm currently working on it.

52
00:02:30,760 --> 00:02:32,960
You can see there's new wheels on this.

53
00:02:32,960 --> 00:02:35,360
So that's a little bit about me personally.

54
00:02:35,360 --> 00:02:37,640
I know it is conference, a lot of technical stuff.

55
00:02:37,640 --> 00:02:40,800
But I'll be hanging around tonight if you want to catch up, get dinner.

56
00:02:40,800 --> 00:02:45,800
I'd love to get to know y'all more as well.

57
00:02:45,800 --> 00:02:52,120
As I said, I am developer advocate at Appletools, not Apple, Appletools.

58
00:02:52,120 --> 00:02:54,280
And so we do automated visual testing.

59
00:02:54,280 --> 00:02:57,800
Now rather than tell you what that is, I'd rather show you.

60
00:02:57,800 --> 00:03:00,360
Here we have these classic side-by-side pictures.

61
00:03:00,360 --> 00:03:03,280
Can anyone spot the differences?

62
00:03:03,280 --> 00:03:06,280
How many do y'all see?

63
00:03:06,280 --> 00:03:28,920
Five, six, we see four.

64
00:03:28,920 --> 00:03:30,920
Final answer?

65
00:03:30,920 --> 00:03:32,920
Wow.

66
00:03:32,920 --> 00:03:34,560
Okay.

67
00:03:34,560 --> 00:03:39,800
So y'all as humans have sat here and looked at this and hummed and had and tried to find

68
00:03:39,800 --> 00:03:42,800
out what the visual differences are.

69
00:03:42,800 --> 00:03:44,440
There are ten.

70
00:03:44,440 --> 00:03:46,560
There are ten visual differences.

71
00:03:46,560 --> 00:03:48,680
This is what Appletools automates for you.

72
00:03:48,680 --> 00:03:54,480
Now you might be wondering, Andy, why are we using some high-power visual AI to figure

73
00:03:54,480 --> 00:03:55,940
out the difference in kids' books?

74
00:03:55,940 --> 00:03:59,120
We wouldn't apply this to spot the difference pictures.

75
00:03:59,120 --> 00:04:02,800
We'd apply this to things like web applications or mobile apps.

76
00:04:02,800 --> 00:04:04,480
Because when you develop things, you make changes.

77
00:04:04,480 --> 00:04:06,600
When changes happen, bugs can happen.

78
00:04:06,600 --> 00:04:07,760
Which bugs are really bad?

79
00:04:07,760 --> 00:04:09,400
The ones that look bad.

80
00:04:09,400 --> 00:04:12,640
So Appletools can come in, you slap that in as part of your testing, and you can quickly

81
00:04:12,640 --> 00:04:14,760
identify these visual regressions.

82
00:04:14,760 --> 00:04:17,160
That's what Appletools does in a nutshell.

83
00:04:17,160 --> 00:04:20,200
We also run Test Automation University.

84
00:04:20,200 --> 00:04:21,360
I've mentioned this before.

85
00:04:21,360 --> 00:04:22,600
Please go check it out.

86
00:04:22,600 --> 00:04:28,440
Awesome courses, totally free, super cool.

87
00:04:28,440 --> 00:04:35,320
So before I was a developer advocate at Appletools, I have been a software engineer and test for

88
00:04:35,320 --> 00:04:36,320
a long time.

89
00:04:36,320 --> 00:04:39,360
In fact, I actually worked at the same company that Chris currently works at, Q2.

90
00:04:39,360 --> 00:04:45,680
That was my previous job before, what's the name of it, oh my gosh, Appletools.

91
00:04:45,680 --> 00:04:48,640
Wow, it is the last day of the conference.

92
00:04:48,640 --> 00:04:51,400
Whew, that Dr. Pepper's not keeping up with me.

93
00:04:51,400 --> 00:04:54,080
Okay, so I have lots of experience in testing and automation.

94
00:04:54,680 --> 00:04:59,040
In fact, I consider it my primary job these days as a developer advocate to advocate for

95
00:04:59,040 --> 00:05:03,720
you to help you improve your testing and automation practices.

96
00:05:03,720 --> 00:05:06,560
So what I'm about to tell you is the thesis of the talk today.

97
00:05:06,560 --> 00:05:10,200
If you were to take a screenshot and go home, call it a day, this is the value you're going

98
00:05:10,200 --> 00:05:11,400
to get out of my talk.

99
00:05:11,400 --> 00:05:17,120
If you want to test web apps in Python today, I recommend use Playwright.

100
00:05:17,120 --> 00:05:20,160
Playwright is what we're going to be learning today.

101
00:05:20,160 --> 00:05:22,040
So what is Playwright?

102
00:05:22,040 --> 00:05:26,320
Playwright is a relatively new web testing framework.

103
00:05:26,320 --> 00:05:27,880
This is test automation.

104
00:05:27,880 --> 00:05:31,960
What we do, it's a browser-based, or it's a browser-oriented tool.

105
00:05:31,960 --> 00:05:37,200
What it does is you load up your web application in a browser, and then you say Playwright,

106
00:05:37,200 --> 00:05:43,440
go Twitter with it, go click things, go scrape text, go enter text into fields, and check

107
00:05:43,440 --> 00:05:45,000
things on the page for me.

108
00:05:45,000 --> 00:05:47,240
And we form our test cases like that.

109
00:05:47,240 --> 00:05:48,840
Playwright makes that really easy.

110
00:05:49,760 --> 00:05:52,920
It is an open-source project from Microsoft.

111
00:05:52,920 --> 00:05:55,880
I'm buddy-buddy with the team that develops it there.

112
00:05:55,880 --> 00:05:59,240
I think they've got about six engineers worldwide right now.

113
00:05:59,240 --> 00:06:03,320
It's in the same division of Microsoft that makes TypeScript and VS code.

114
00:06:03,320 --> 00:06:06,080
So it's in good company.

115
00:06:06,080 --> 00:06:09,960
Something that's really cool about Playwright is not only does it have implementation in

116
00:06:09,960 --> 00:06:17,460
Python, but it also has implementations in JavaScript, slash TypeScript, Java, and C-sharp.

117
00:06:17,460 --> 00:06:21,540
These are the four major test automation languages.

118
00:06:21,540 --> 00:06:26,540
If you're in the testing automation space, you're doing your work in one of these four.

119
00:06:26,540 --> 00:06:30,300
And for the Python implementation, it integrates with PyTest.

120
00:06:30,300 --> 00:06:32,580
How many people have heard of PyTest?

121
00:06:32,580 --> 00:06:33,580
Probably everyone.

122
00:06:33,580 --> 00:06:35,180
It's one of the more popular Python libraries.

123
00:06:35,180 --> 00:06:41,140
It is one of my personal favorite test frameworks in any language, not just Python.

124
00:06:41,140 --> 00:06:44,700
Believe me, I have done stuff in all of these languages for test automation.

125
00:06:44,700 --> 00:06:46,100
Oh, my gosh.

126
00:06:46,100 --> 00:06:48,660
Four stories.

127
00:06:48,660 --> 00:06:56,420
So Playwright is meant for what we call end-to-end testing, specifically end-to-end web testing.

128
00:06:56,420 --> 00:07:02,880
What it does is it drives web applications, live web applications, through browser interactions.

129
00:07:02,880 --> 00:07:07,420
We're talking real browsers, real clicks, real waiting, all that stuff.

130
00:07:07,420 --> 00:07:10,900
Also has API support too, which is really cool.

131
00:07:10,900 --> 00:07:14,260
But I want to make it clear, just so that we're not misunderstanding things, Playwright is

132
00:07:14,300 --> 00:07:18,300
not what we would call a unit testing framework.

133
00:07:18,300 --> 00:07:23,580
There's a difference between testing code and testing features or behaviors.

134
00:07:23,580 --> 00:07:28,700
When we're testing code, we're looking at individual functions and methods and checking,

135
00:07:28,700 --> 00:07:32,700
calling them directly and saying, okay, did the code we write actually do what we thought

136
00:07:32,700 --> 00:07:33,700
it should do?

137
00:07:33,700 --> 00:07:37,780
When we're talking about testing features and testing behaviors, what I'm trying to

138
00:07:37,780 --> 00:07:43,940
determine is if the behaviors in the application that the user is going to be doing are those

139
00:07:43,940 --> 00:07:46,660
working as intended.

140
00:07:46,660 --> 00:07:47,840
Unit tests are white box.

141
00:07:47,840 --> 00:07:51,100
They have direct access to the code with manipulation.

142
00:07:51,100 --> 00:07:52,820
End-to-end tests are black box.

143
00:07:52,820 --> 00:07:54,820
They are you don't see the code.

144
00:07:54,820 --> 00:07:58,060
You're literally playing with the browser almost as if a human would.

145
00:07:58,060 --> 00:08:01,500
So that's the kind of testing we're talking about with Playwright.

146
00:08:01,500 --> 00:08:05,100
It's very good when you're developing a web app or a mobile app or something like that

147
00:08:05,100 --> 00:08:10,500
or even an API microservice that you can hit it in that black box sense to make sure it's

148
00:08:10,540 --> 00:08:13,540
actually doing the thing we think.

149
00:08:13,540 --> 00:08:18,340
Now, Playwright is not the only tool out there.

150
00:08:18,340 --> 00:08:23,220
You might have not blinked an eye saying, hell, you're saying use Playwright.

151
00:08:23,220 --> 00:08:27,100
You may not know what the other tools are, but there are others, namely something called

152
00:08:27,100 --> 00:08:28,300
Selenium WebDriver.

153
00:08:28,300 --> 00:08:29,780
Has anyone heard of Selenium?

154
00:08:29,780 --> 00:08:30,780
Okay.

155
00:08:30,780 --> 00:08:31,780
A lot of people.

156
00:08:31,780 --> 00:08:33,100
That's cool.

157
00:08:33,100 --> 00:08:38,020
Historically, the Selenium project has been the primary browser automation tool in our

158
00:08:38,020 --> 00:08:39,420
industry.

159
00:08:39,460 --> 00:08:43,540
It's been so prevalent that even people who don't do testing and automation day-to-day

160
00:08:43,540 --> 00:08:46,220
like me have probably heard of Selenium.

161
00:08:46,220 --> 00:08:50,460
It still is technically by popularity the top browser automation tool.

162
00:08:50,460 --> 00:08:51,580
I still use Selenium.

163
00:08:51,580 --> 00:08:53,060
I am a Selenium fanboy.

164
00:08:53,060 --> 00:08:54,780
I've been using Selenium for years.

165
00:08:54,780 --> 00:08:57,060
I have an open source project that's based on Selenium.

166
00:08:57,060 --> 00:08:58,060
It's called Bow Constrictor.

167
00:08:58,060 --> 00:09:01,740
Not Python, but if you want a sticker afterwards, let me know.

168
00:09:01,740 --> 00:09:07,900
But I'm still standing by my statement today that here we are, what is this, March 2022.

169
00:09:07,940 --> 00:09:13,780
I would say if you're doing web automation in Python, I would recommend Playwright over

170
00:09:13,780 --> 00:09:14,780
Selenium.

171
00:09:14,780 --> 00:09:15,980
Why would I say that?

172
00:09:15,980 --> 00:09:17,940
I think Playwright has several key advantages.

173
00:09:17,940 --> 00:09:21,660
Again, this would be time to take the picture of the slide so you can take that home with

174
00:09:21,660 --> 00:09:22,660
you.

175
00:09:22,660 --> 00:09:23,660
Namely, speed.

176
00:09:23,660 --> 00:09:26,980
Playwright is a lot faster than Selenium.

177
00:09:26,980 --> 00:09:31,380
It's faster because it uses debug protocols instead of the WebDriver protocol.

178
00:09:31,380 --> 00:09:36,140
It's also faster in how it does set up and clean up optimization.

179
00:09:36,140 --> 00:09:37,780
Also Playwright is easier to set up.

180
00:09:37,820 --> 00:09:39,140
I'm going to show you some commands.

181
00:09:39,140 --> 00:09:40,700
It's just boom and go.

182
00:09:40,700 --> 00:09:44,900
Whereas with Selenium WebDriver, you have to get extra stuff for each browser you want

183
00:09:44,900 --> 00:09:49,580
to test and add it to your path and inevitably somebody somewhere messes that up.

184
00:09:49,580 --> 00:09:53,180
So Playwright is just easier in that sense.

185
00:09:53,180 --> 00:09:56,180
Playwright also has more mature features, things like automatic waiting.

186
00:09:56,180 --> 00:10:00,340
Like while you're waiting for a web page to load, you don't want to try to click a button

187
00:10:00,340 --> 00:10:01,620
until the button's ready.

188
00:10:01,620 --> 00:10:02,620
Right?

189
00:10:02,620 --> 00:10:03,620
That makes sense, right?

190
00:10:03,620 --> 00:10:06,660
And you would think, oh, if I'm going to have a framework to help me do web interactions,

191
00:10:06,700 --> 00:10:09,860
the framework should be smart enough to wait for that thing to appear before it tries to

192
00:10:09,860 --> 00:10:10,860
click the thing.

193
00:10:10,860 --> 00:10:11,860
Right?

194
00:10:11,860 --> 00:10:12,860
That's what Playwright does for you.

195
00:10:12,860 --> 00:10:14,860
Selenium does not do this for you.

196
00:10:14,860 --> 00:10:20,460
That's why WebUI tests often have a bad reputation for being flaky.

197
00:10:20,460 --> 00:10:25,340
It's not so much the tool is how you use the tool and unfortunately, Selenium, you need

198
00:10:25,340 --> 00:10:29,300
to be explicit more often with those kinds of things.

199
00:10:29,300 --> 00:10:32,860
Whereas Playwright, it just handles it as a concern for you.

200
00:10:32,860 --> 00:10:36,980
Some other things, Playwright has web-centric assertions that focus not just on general

201
00:10:36,980 --> 00:10:40,700
asserts of bullying conditions, but actually on web elements.

202
00:10:40,700 --> 00:10:44,660
And there's also a lot of nice tracing that Playwright comes with out of the box.

203
00:10:44,660 --> 00:10:50,540
Screenshots, video, execution trace, more than I can even show today.

204
00:10:50,540 --> 00:10:55,740
So quick caveat here.

205
00:10:55,740 --> 00:11:01,340
Selenium and Playwright kind of have different approaches to how they're building their tools.

206
00:11:01,380 --> 00:11:03,580
Both Playwright and Selenium are open source.

207
00:11:03,580 --> 00:11:07,020
You can go to GitHub, you can look at their libraries, you can open pull requests.

208
00:11:07,020 --> 00:11:10,540
In fact, yesterday I was trying to open a pull request against Playwright Python.

209
00:11:10,540 --> 00:11:12,220
I did not get very far.

210
00:11:12,220 --> 00:11:14,980
Please encourage me.

211
00:11:14,980 --> 00:11:19,140
But Selenium is more than just open source.

212
00:11:19,140 --> 00:11:23,700
The Selenium project also has open standards and open governance.

213
00:11:23,700 --> 00:11:26,420
Now you might be wondering, well, what's the difference there?

214
00:11:26,420 --> 00:11:31,740
Open standards means that WebDriver itself is a W3C recommendation, meaning all major

215
00:11:31,740 --> 00:11:34,100
browsers are supposed to use it.

216
00:11:34,100 --> 00:11:38,540
And it has open governance in that there isn't any one company that controls Selenium.

217
00:11:38,540 --> 00:11:42,820
It's more of people in the community coming together to kind of make the project happen.

218
00:11:42,820 --> 00:11:46,220
Whereas Playwright, on the other hand, is run by Microsoft.

219
00:11:46,220 --> 00:11:48,540
Does this matter?

220
00:11:48,540 --> 00:11:49,980
You decide.

221
00:11:49,980 --> 00:11:54,100
Some people on this are very opinionated, very hotly opinionated, will annihilate you

222
00:11:54,140 --> 00:11:57,060
on Twitter if you express certain opinions contrary to this.

223
00:11:57,060 --> 00:12:00,540
I know this from firsthand experience.

224
00:12:00,540 --> 00:12:03,780
If you want to learn more about that, let's go get some drinks afterwards and I'll share

225
00:12:03,780 --> 00:12:04,660
the whole story.

226
00:12:04,660 --> 00:12:08,700
But I just want to point that out there to say, hey, there are different philosophies

227
00:12:08,700 --> 00:12:10,060
behind these projects.

228
00:12:10,060 --> 00:12:13,740
And so that's something that may matter a lot to you.

229
00:12:13,740 --> 00:12:14,900
Awesome. Cool.

230
00:12:14,900 --> 00:12:17,660
It may not matter to you.

231
00:12:17,660 --> 00:12:21,220
My advice to you is think about it, look at it, and if you're OK with it, I think Playwright

232
00:12:21,220 --> 00:12:21,700
is awesome.

233
00:12:21,700 --> 00:12:23,060
I think Selenium is awesome, too.

234
00:12:23,140 --> 00:12:24,260
They're both good tools.

235
00:12:24,260 --> 00:12:27,100
Me, personally, I'm probably going to use Playwright, hence I'm here giving the talk

236
00:12:27,100 --> 00:12:29,860
about it today.

237
00:12:29,860 --> 00:12:33,700
So what do you need to do to get started with Playwright?

238
00:12:33,700 --> 00:12:36,180
You need at least Python 3.7.

239
00:12:36,180 --> 00:12:37,860
I recommend a Python editor.

240
00:12:37,860 --> 00:12:40,060
VS Code is what I'm going to be using.

241
00:12:40,060 --> 00:12:41,140
PyCharm is good, too.

242
00:12:41,140 --> 00:12:42,980
Other things are good.

243
00:12:42,980 --> 00:12:46,340
Also, GitHub account is pretty handy.

244
00:12:46,340 --> 00:12:50,420
I have a full tutorial on getting started with Playwright.

245
00:12:50,420 --> 00:12:51,780
You can get it from this link.

246
00:12:51,780 --> 00:12:53,340
You can get it from this QR code.

247
00:12:53,340 --> 00:12:57,780
If you do all six chapters of this tutorial, which we're not going to do today, chapter

248
00:12:57,780 --> 00:13:01,940
six, you will definitely need a GitHub account for some of the cool stuff that happens.

249
00:13:01,940 --> 00:13:05,420
So I would say, another, take the screenshot, take this home with you if you want to learn

250
00:13:05,420 --> 00:13:06,740
more about this.

251
00:13:06,740 --> 00:13:07,780
Do the whole tutorial.

252
00:13:07,780 --> 00:13:09,300
I've got a full walkthrough.

253
00:13:09,300 --> 00:13:10,300
It is so awesome.

254
00:13:10,300 --> 00:13:12,940
I'm giving this as a tutorial at PyCon.

255
00:13:12,940 --> 00:13:15,820
So if I'm going to see, who's going to PyCon in Salt Lake?

256
00:13:15,820 --> 00:13:18,260
Oh, gosh.

257
00:13:18,260 --> 00:13:19,260
Not very many.

258
00:13:19,260 --> 00:13:20,980
Well, it's an awesome time.

259
00:13:20,980 --> 00:13:23,820
So if you can make it awesome, if not, no worries.

260
00:13:23,820 --> 00:13:28,740
I will be there, I hope.

261
00:13:28,740 --> 00:13:29,740
I don't think so.

262
00:13:29,740 --> 00:13:35,100
I haven't seen the tweet that says they're sold out yet, but always a good time.

263
00:13:35,100 --> 00:13:36,540
All right.

264
00:13:36,540 --> 00:13:41,340
So to get started with Playwright, you got, or to get started with Playwright in Python,

265
00:13:41,340 --> 00:13:42,340
I should say.

266
00:13:42,340 --> 00:13:43,340
First of all, read the docs.

267
00:13:43,340 --> 00:13:44,340
Playwright.dev.

268
00:13:44,340 --> 00:13:45,340
Awesome.

269
00:13:45,340 --> 00:13:50,020
You need three, what do we call them?

270
00:13:50,660 --> 00:13:51,660
Wow.

271
00:13:51,660 --> 00:13:55,580
Technically, you only need one, but since we're going to be doing Playwright together

272
00:13:55,580 --> 00:13:57,500
with PyTest, we're going to need three.

273
00:13:57,500 --> 00:14:04,900
You need Playwright, which is Playwright proper, PyTest, which is PyTest proper, and then PyTest

274
00:14:04,900 --> 00:14:08,100
Playwright, which is a PyTest plugin for Playwright.

275
00:14:08,100 --> 00:14:11,420
Too many pulls there.

276
00:14:11,420 --> 00:14:12,860
You can add that to an existing project.

277
00:14:12,860 --> 00:14:16,500
You can make it a whole new project for your tests.

278
00:14:16,500 --> 00:14:23,140
In the tutorial that I wrote, also, again, this QR code, I walked through getting started,

279
00:14:23,140 --> 00:14:27,420
first steps of Playwright, writing assertions, refactoring using page objects, which is a

280
00:14:27,420 --> 00:14:32,260
better way to structure your calls, some nifty tricks, and then also how to test APIs.

281
00:14:32,260 --> 00:14:38,140
The goal for today is we're going to get through parts one, two, and three, maybe break into

282
00:14:38,140 --> 00:14:39,140
part four.

283
00:14:39,140 --> 00:14:42,620
So who wants to see some code?

284
00:14:42,620 --> 00:14:44,740
Yeah, let's see some code.

285
00:14:44,740 --> 00:14:45,740
Let's hope it works.

286
00:14:45,980 --> 00:14:46,980
Whoo.

287
00:14:46,980 --> 00:14:47,980
Okay.

288
00:14:47,980 --> 00:14:48,980
Okay.

289
00:14:48,980 --> 00:14:51,980
Oh, gosh, that did not.

290
00:14:51,980 --> 00:14:54,980
The text is probably pretty small, isn't it?

291
00:14:54,980 --> 00:14:59,980
Yeah, let's fix that, y'all.

292
00:14:59,980 --> 00:15:00,980
Is that better?

293
00:15:00,980 --> 00:15:03,980
Do we need a bigger?

294
00:15:03,980 --> 00:15:04,980
Okay.

295
00:15:04,980 --> 00:15:05,980
That's Texas, right?

296
00:15:05,980 --> 00:15:07,980
Everything's bigger, better in Texas.

297
00:15:07,980 --> 00:15:08,980
I'm from North Carolina.

298
00:15:08,980 --> 00:15:09,980
I can make fun of Texas.

299
00:15:09,980 --> 00:15:10,980
It's all good.

300
00:15:10,980 --> 00:15:11,980
I love y'all.

301
00:15:11,980 --> 00:15:12,980
Okay.

302
00:15:12,980 --> 00:15:17,300
So here I have the tutorial project.

303
00:15:17,300 --> 00:15:21,740
In fact, I'm in one of the branches that aligns with the third chapter of it.

304
00:15:21,740 --> 00:15:24,900
But this is just like any other Python project, right?

305
00:15:24,900 --> 00:15:27,900
You could have a Django app you're testing.

306
00:15:27,900 --> 00:15:30,700
You could have a Flask app you're testing.

307
00:15:30,700 --> 00:15:32,500
You could have an app that has nothing to do with Python.

308
00:15:32,500 --> 00:15:33,820
It could be full stack JavaScript.

309
00:15:33,820 --> 00:15:35,140
It doesn't matter.

310
00:15:35,140 --> 00:15:40,700
The nice thing about end-to-end testing that we're doing in that it's black box, the language

311
00:15:40,740 --> 00:15:44,820
you use for your test automation does not necessarily have to be the language used to

312
00:15:44,820 --> 00:15:47,320
develop the site or the app.

313
00:15:47,320 --> 00:15:53,060
So I can write, I can have a whole team of testers that know Python and love Python hitting

314
00:15:53,060 --> 00:15:54,540
a full stack JavaScript.

315
00:15:54,540 --> 00:15:56,100
Totally cool, right?

316
00:15:56,100 --> 00:15:59,100
You can do this.

317
00:15:59,100 --> 00:16:01,540
So here I've got just a, this is Python, right?

318
00:16:01,540 --> 00:16:03,580
So we're doing it in Python.

319
00:16:03,580 --> 00:16:11,380
We have our tests directory, which when you're using PyTest, typically you put all your tests

320
00:16:11,380 --> 00:16:15,740
under the tests directory, yay, that makes sense.

321
00:16:15,740 --> 00:16:18,620
And we have a test module named test underscore search.

322
00:16:18,620 --> 00:16:22,140
And this is where our PyTest test case is located.

323
00:16:22,140 --> 00:16:27,980
Now the test we're going to do is a basic search engine search.

324
00:16:27,980 --> 00:16:29,860
We're going to go to DuckDuckGo.

325
00:16:29,900 --> 00:16:34,500
We're going to type in the search phrase, panda, and we're going to make sure that the

326
00:16:34,500 --> 00:16:40,540
result page has links related to pandas, pretty basic test, right?

327
00:16:40,540 --> 00:16:45,700
Nothing super challenging here, just basic, almost what you consider like a smoke test

328
00:16:45,700 --> 00:16:48,620
for, let's say if you have a search engine.

329
00:16:48,620 --> 00:16:52,860
So here's what the code looks like.

330
00:16:52,860 --> 00:16:56,100
I'm going to import some stuff from Playwright.

331
00:16:56,100 --> 00:17:00,180
Playwright in Python has a sync API and an async API.

332
00:17:00,180 --> 00:17:01,540
You can use either one.

333
00:17:01,540 --> 00:17:06,220
If you're doing tests and you're using what I consider to be recommended practices for

334
00:17:06,220 --> 00:17:10,300
your writing, for automating your tests, all you need is the sync API because you're doing

335
00:17:10,300 --> 00:17:12,300
things one thing at a time.

336
00:17:12,300 --> 00:17:17,660
You can use Playwright purely for browser automation apart from test automation.

337
00:17:17,660 --> 00:17:20,420
Let's say you wanted to like create a web scraper or a crawler.

338
00:17:20,420 --> 00:17:24,380
You could just use Playwright to automate those kinds of interactions.

339
00:17:24,380 --> 00:17:28,340
In that case, you might want to use the async API to get a little more optimization, but

340
00:17:28,340 --> 00:17:30,100
since we're writing tests today, why?

341
00:17:30,100 --> 00:17:31,820
Because I'm writing tests.

342
00:17:31,820 --> 00:17:35,620
We're going to use sync API and it's totally cool.

343
00:17:35,620 --> 00:17:39,460
We're going to have our PyTest function.

344
00:17:39,460 --> 00:17:44,860
In PyTest, any function that's prefixed with test inside a module prefix with test is identified

345
00:17:44,860 --> 00:17:47,620
as a test case.

346
00:17:47,620 --> 00:17:51,660
And I'm going to use Playwright's page fixture.

347
00:17:51,700 --> 00:17:54,580
In Playwright, everything comes off the page.

348
00:17:54,580 --> 00:17:56,700
You have your browser.

349
00:17:56,700 --> 00:18:01,580
From your browser, you make a browser context, which is like an incognito session.

350
00:18:01,580 --> 00:18:03,980
And then from the browser context, you can have any number of pages.

351
00:18:03,980 --> 00:18:06,380
Typically, you only need one.

352
00:18:06,380 --> 00:18:12,380
So the PyTest plugin takes care of the browser, the browser context for us and gives us a

353
00:18:12,380 --> 00:18:13,380
page in that context.

354
00:18:13,380 --> 00:18:14,380
Pretty cool.

355
00:18:14,380 --> 00:18:17,820
So we don't need to do a lot of boilerplate stuff.

356
00:18:17,900 --> 00:18:22,220
So really, a lot of these calls are going to be very Pythonic.

357
00:18:22,220 --> 00:18:27,740
My first step, given the DuckDuckGo home page is displayed, what's the call?

358
00:18:27,740 --> 00:18:28,940
Page.goTo.

359
00:18:28,940 --> 00:18:30,420
And I put in my URL.

360
00:18:30,420 --> 00:18:32,380
Pretty straightforward.

361
00:18:32,380 --> 00:18:35,580
If you're doing more high-scale automation, you would probably want to make this some

362
00:18:35,580 --> 00:18:37,780
sort of environment variable or something.

363
00:18:37,780 --> 00:18:40,300
Like I said in the talk yesterday, you don't want to hard code this stuff.

364
00:18:40,300 --> 00:18:43,100
But this is a tutorial, right?

365
00:18:43,100 --> 00:18:46,580
So go to your URL.

366
00:18:46,580 --> 00:18:47,980
Now if we want to do some interactions.

367
00:18:47,980 --> 00:18:52,980
When the user searches for a phrase, from the page, the page has a whole bunch of web

368
00:18:52,980 --> 00:18:53,980
elements.

369
00:18:53,980 --> 00:18:54,980
Right?

370
00:18:54,980 --> 00:18:57,300
Your buttons, your headers, your input fields.

371
00:18:57,300 --> 00:18:58,580
These are all web elements.

372
00:18:58,580 --> 00:19:01,020
How do we identify web elements on a page?

373
00:19:01,020 --> 00:19:03,140
We locate them using locators.

374
00:19:03,140 --> 00:19:08,780
I'm sure everybody is probably familiar with things like CSS selectors and IDs.

375
00:19:08,780 --> 00:19:09,780
Maybe XPaths.

376
00:19:09,780 --> 00:19:10,780
Does anybody use XPaths?

377
00:19:11,780 --> 00:19:17,100
Try to use CSS selectors instead of XPaths.

378
00:19:17,100 --> 00:19:19,620
But with Playwright, you can use any of these kinds of things.

379
00:19:19,620 --> 00:19:23,100
Typically, my MO is does it have an ID that's unique?

380
00:19:23,100 --> 00:19:24,100
It doesn't.

381
00:19:24,100 --> 00:19:25,100
Oh, it doesn't.

382
00:19:25,100 --> 00:19:26,100
Okay, let me use the CSS selector.

383
00:19:26,100 --> 00:19:27,100
Oh, crap.

384
00:19:27,100 --> 00:19:28,100
I need to do something positional.

385
00:19:28,100 --> 00:19:29,100
Okay.

386
00:19:29,100 --> 00:19:30,100
Let me use an XPath.

387
00:19:30,100 --> 00:19:31,700
That's typically how I do it.

388
00:19:31,700 --> 00:19:34,540
Here we're using IDs.

389
00:19:34,540 --> 00:19:40,500
What I want to do to search for a phrase, I want to find a locator for that search bar

390
00:19:40,500 --> 00:19:47,100
and on DuckDuckGo, that element has the ID search form input home page.

391
00:19:47,100 --> 00:19:51,780
So I get my locator and then I say, hey, fill it with this text.

392
00:19:51,780 --> 00:19:52,780
Type in panda.

393
00:19:52,780 --> 00:19:53,900
Why are we searching for pandas?

394
00:19:53,900 --> 00:19:56,700
Why not?

395
00:19:56,700 --> 00:19:58,100
Then once we type in the thing, what do we do?

396
00:19:58,100 --> 00:19:59,740
We can either hit enter or we can click the button.

397
00:19:59,740 --> 00:20:01,060
I'm going to click the button.

398
00:20:01,060 --> 00:20:06,380
So we find the homepage button and we click it.

399
00:20:06,380 --> 00:20:08,960
Nice.

400
00:20:08,960 --> 00:20:13,980
So then what happens is that will enter my search phrase and what we expect to happen

401
00:20:13,980 --> 00:20:18,640
is the page reloads and then shows us search results, right?

402
00:20:18,640 --> 00:20:23,160
So it's time to start verifying things on the page.

403
00:20:23,160 --> 00:20:27,040
Now if you've used PyTest or UnitTest before, you're probably thinking, okay, so we're going

404
00:20:27,040 --> 00:20:29,360
to make a whole bunch of assert statements, right?

405
00:20:29,360 --> 00:20:30,360
Yes.

406
00:20:30,360 --> 00:20:31,360
Technically we are.

407
00:20:31,360 --> 00:20:37,200
But because Playwright has web first assertions that do smarter kinds of waiting for us, we

408
00:20:37,200 --> 00:20:43,440
could use Python's assert command, but it's a better practice to use Playwright's expect

409
00:20:43,440 --> 00:20:44,880
function.

410
00:20:44,880 --> 00:20:49,840
This is going to work very similarly to expect in JavaScript if you've done that.

411
00:20:49,840 --> 00:20:54,960
So read this with me as if it's plain language.

412
00:20:54,960 --> 00:21:00,280
So I'm trying to verify that the search result query has the phrase that we have.

413
00:21:00,280 --> 00:21:07,400
So expect your page locator for your search form input to have the value panda.

414
00:21:07,400 --> 00:21:10,920
That's almost like English, right?

415
00:21:10,920 --> 00:21:15,920
It's fluent-like, right, it's very readable.

416
00:21:15,920 --> 00:21:19,120
This is what I love about Playwright's assertions, that they work like this.

417
00:21:19,120 --> 00:21:20,780
It's very, very readable.

418
00:21:20,780 --> 00:21:26,600
And so what happens here is we don't need to perform any explicit waiting for this element.

419
00:21:26,600 --> 00:21:32,280
This expect call with this condition will wait up to five seconds, I believe it's five

420
00:21:32,280 --> 00:21:41,540
seconds by default, for the element located by this, that particular input, to eventually

421
00:21:41,540 --> 00:21:45,000
contain the value panda, which is our search phrase value.

422
00:21:45,000 --> 00:21:49,920
So if it takes the page two to three seconds to load, it's not going to flake out on us.

423
00:21:49,920 --> 00:21:53,520
If for some reason that field is blank, like the element appears and the field is blank,

424
00:21:53,520 --> 00:21:55,980
it's still going to keep trying until it shows panda.

425
00:21:55,980 --> 00:21:58,940
And then after a time out, if it still doesn't show panda, then only then will it give us

426
00:21:58,940 --> 00:21:59,940
the failure.

427
00:21:59,940 --> 00:22:05,460
That makes your test much more robust, which is awesome, because if you don't have that

428
00:22:05,460 --> 00:22:09,500
waiting in there, you're going to have flaky tests that sometimes pass and sometimes fail,

429
00:22:09,500 --> 00:22:12,020
and nobody's happy.

430
00:22:12,020 --> 00:22:18,420
So this is kind of the core of the kinds of things you're going to be doing in Playwright

431
00:22:18,420 --> 00:22:20,140
to automate the browser.

432
00:22:20,140 --> 00:22:22,700
There's tons of different interactions.

433
00:22:22,700 --> 00:22:26,900
What I tell people is, I'm not going to go through every single one, but if you can do

434
00:22:26,900 --> 00:22:31,280
it as a human in a browser, Playwright can automate it for you.

435
00:22:31,280 --> 00:22:35,760
And if you want to find out what the command is, as long as you're using typing in VS Code,

436
00:22:35,760 --> 00:22:40,540
you can do something like page dot and you get the autocomplete, or if you have like

437
00:22:40,540 --> 00:22:51,260
page locator, oh wow, I can't spell, oh gosh, one handed typing, again, you've got all the

438
00:22:51,260 --> 00:22:55,340
autocomplete there, and then you could also go to the Playwright docs and be like, how

439
00:22:55,340 --> 00:22:56,340
do I drag and drop?

440
00:22:56,340 --> 00:22:59,960
Oh, page dot drag and drop, cool.

441
00:22:59,960 --> 00:23:03,820
So it's pretty easy to kind of figure out what you want to do, and worst case scenario,

442
00:23:03,820 --> 00:23:08,660
you Google and you end up on Stack Overflow, like this is half my job, I can't remember

443
00:23:08,660 --> 00:23:13,220
all these APIs between these different tools, man, I just look it up and boom, I find it.

444
00:23:13,220 --> 00:23:17,620
Or I go into the Playwright Slack and I ask the people and they're very helpful.

445
00:23:17,620 --> 00:23:22,460
So there are other assertions we're doing, there's some complicated stuff in here.

446
00:23:22,460 --> 00:23:27,680
I don't want to get into, this one is trying to scrape multiple links and make sure the

447
00:23:27,680 --> 00:23:31,780
titles all align, we'll skip that for now.

448
00:23:31,780 --> 00:23:37,300
You can also make assertions on the page rather than particular elements that are located.

449
00:23:37,300 --> 00:23:42,600
So let's actually run this so you can see it actually do the magic thing.

450
00:23:42,600 --> 00:23:50,680
So I have a virtual environment with my dependencies, yes I'm using VNV, Python dash M, give it

451
00:23:50,680 --> 00:23:57,700
the directory name tests, by default Playwright will run it on Chromium and it will run it

452
00:23:57,700 --> 00:24:00,900
headless and it will run it very fast.

453
00:24:00,900 --> 00:24:04,000
But since this is a conference and I want you all to see it, I'm going to explicitly

454
00:24:04,000 --> 00:24:09,040
say run this in headed mode, meaning the browser will pop up and we'll see it, and run it with

455
00:24:09,040 --> 00:24:13,780
slow mo, meaning every interaction is going to take a two second pause so that you can

456
00:24:13,780 --> 00:24:16,040
actually kind of see it step through.

457
00:24:16,040 --> 00:24:19,040
This is actually pretty helpful when you're developing test automation, so you can kind

458
00:24:19,040 --> 00:24:21,600
of do it and see it go.

459
00:24:21,600 --> 00:24:25,880
You could even debug and freeze it and then kind of go into the page and inspect to find

460
00:24:25,880 --> 00:24:26,880
things.

461
00:24:26,880 --> 00:24:29,680
So let's see what happens when we do this.

462
00:24:29,680 --> 00:24:37,680
My hands are off the keyboard.

463
00:24:38,320 --> 00:24:39,320
Yeah!

464
00:24:39,320 --> 00:24:41,320
Did it pass?

465
00:24:41,320 --> 00:24:42,320
Woo!

466
00:24:42,320 --> 00:24:43,320
All right!

467
00:24:43,320 --> 00:24:44,320
Testing is awesome!

468
00:24:44,320 --> 00:24:45,320
It worked!

469
00:24:45,320 --> 00:24:46,320
Woohoo!

470
00:24:46,320 --> 00:24:47,320
Okay.

471
00:24:47,320 --> 00:24:50,600
So, I mean, that's basically what WebUI testing is all about.

472
00:24:50,600 --> 00:24:54,920
We could add more tests to test different things, like do we want to flip over to images,

473
00:24:54,920 --> 00:24:58,800
do we want to test different phrases, do we want to make sure it opens to the next thing.

474
00:24:58,800 --> 00:25:01,560
Keep your tests atomic.

475
00:25:01,560 --> 00:25:06,800
Some other things I can do with Playwright, if I want to specify a different browser,

476
00:25:06,800 --> 00:25:11,160
I can do that on the command line as a test input, which is really nice.

477
00:25:11,160 --> 00:25:13,120
Interesting thing about browsers.

478
00:25:13,120 --> 00:25:17,640
Playwright does not use what we would consider like real browsers.

479
00:25:17,640 --> 00:25:21,040
Like you would think, oh, I want to test on Google Chrome.

480
00:25:21,040 --> 00:25:24,560
Playwright you don't test on Google Chrome, you test on Chromium.

481
00:25:24,560 --> 00:25:28,520
You don't test on Apple Safari, you test on WebKit.

482
00:25:28,520 --> 00:25:32,200
And you also test on Firefox's base project.

483
00:25:32,200 --> 00:25:34,760
Why do they do that?

484
00:25:34,760 --> 00:25:39,000
There's some optimizations, there's easier setup.

485
00:25:39,000 --> 00:25:43,880
I think the finding a difference between rendering in Chromium versus Chrome is very low, so

486
00:25:43,880 --> 00:25:45,320
I'm okay to do that.

487
00:25:45,320 --> 00:25:49,520
But if you're in a team where you have compliance issues or regulations and you absolutely need

488
00:25:49,520 --> 00:25:56,040
to test like full Chrome or Firefox or something, Playwright may not be cool for you.

489
00:25:56,040 --> 00:26:02,400
Playwright can test the installed version of Google Chrome or Microsoft Edge on your

490
00:26:02,400 --> 00:26:05,640
machine, but it can't do full versions of the other browsers.

491
00:26:05,640 --> 00:26:13,520
But if I wanted to, I could say here browser, not browser, browser, WebKit, because I'm

492
00:26:13,520 --> 00:26:17,280
on Mac.

493
00:26:17,280 --> 00:26:22,960
Now this time the browser, yep, that looks different.

494
00:26:22,960 --> 00:26:24,560
And it does the same test.

495
00:26:24,560 --> 00:26:26,600
So you can do local cross-browser testing.

496
00:26:26,600 --> 00:26:30,880
You could also integrate this with Apple tools and do visual testing.

497
00:26:30,880 --> 00:26:31,880
That's cool.

498
00:26:31,960 --> 00:26:33,960
I'm going to show that.

499
00:26:33,960 --> 00:26:41,320
I know I'm coming up on time here, but does anybody have any questions about anything

500
00:26:41,320 --> 00:26:44,160
with Playwright or testing in general?

501
00:26:44,160 --> 00:26:47,160
I could show this all day.

502
00:26:47,160 --> 00:26:50,160
Yes, Ali.

503
00:26:50,160 --> 00:26:56,040
Basically, you point and shoot at whatever kind of web app you want.

504
00:26:56,040 --> 00:26:58,720
It's not like a URL-based thing.

505
00:26:58,720 --> 00:27:01,960
You can point it at a single-page application, start fiddling around with the buttons and

506
00:27:01,960 --> 00:27:02,960
the elements and stuff.

507
00:27:02,960 --> 00:27:04,960
It'll do the trick.

508
00:27:04,960 --> 00:27:08,760
Yeah, good question.

509
00:27:08,760 --> 00:27:09,760
Anybody else?

510
00:27:09,760 --> 00:27:10,760
Yes.

511
00:27:10,760 --> 00:27:11,760
Chris.

512
00:27:25,760 --> 00:27:27,400
No.

513
00:27:27,400 --> 00:27:29,760
You need some type of selector.

514
00:27:29,760 --> 00:27:31,560
You need to be able to figure out your selector.

515
00:27:31,560 --> 00:27:37,040
So what I do is I just go to the page in Google Chrome manually and go to Inspect, use DevTools

516
00:27:37,040 --> 00:27:43,140
to look at the DOM, and then I'll look for IDs, I'll look for potential selectors or

517
00:27:43,140 --> 00:27:45,040
XPaths and do it that way.

518
00:27:45,040 --> 00:27:51,800
Oh, oh, some cool stuff about Playwright selectors that Playwright does that Selenium doesn't

519
00:27:51,800 --> 00:27:52,800
do.

520
00:27:53,800 --> 00:27:57,740
Like I said, you can do all the regular kinds of selectors.

521
00:27:57,740 --> 00:27:59,680
You can also do a text-based selector.

522
00:27:59,680 --> 00:28:07,560
So you could say something like text equals submit or text equals save, like whatever

523
00:28:07,560 --> 00:28:11,800
the name of the button you're trying to click, and it'll find that element on the page based

524
00:28:11,800 --> 00:28:14,920
on a text matching, which is really, really nice, because you could do text matching

525
00:28:14,920 --> 00:28:15,920
with XPaths.

526
00:28:15,920 --> 00:28:22,400
I don't know if you've done it before, but the query is like, it's long.

527
00:28:22,400 --> 00:28:25,480
Because it's a coded thing, you're not going to have visual locators or anything.

528
00:28:25,480 --> 00:28:30,800
I know that Playwright also supports React and view-specific stuff.

529
00:28:30,800 --> 00:28:36,480
I don't plunge that, because that's project-specific, and CSS selectors, 99% of the time, are good

530
00:28:36,480 --> 00:28:37,480
enough.

531
00:28:37,480 --> 00:28:40,480
But good question.

532
00:28:40,480 --> 00:28:43,480
Back there.

533
00:28:43,480 --> 00:28:48,920
Great, great question.

534
00:28:48,920 --> 00:28:51,560
So there's a couple ways something might be hidden on a page.

535
00:28:52,480 --> 00:28:57,440
If it is truly not visible on the page, I think you're probably going to get an exception

536
00:28:57,440 --> 00:29:00,360
when you try to interact with it, because it's not there.

537
00:29:00,360 --> 00:29:03,600
You can do things like you can check to see if it's existing in the DOM, but if you're

538
00:29:03,600 --> 00:29:08,920
trying to click a button that is not appearing, it'll be like, uh-uh.

539
00:29:08,920 --> 00:29:12,440
You could take a back door and do a JavaScript click to something that's hidden, and it might

540
00:29:12,440 --> 00:29:14,320
take it.

541
00:29:14,320 --> 00:29:18,720
There's also a nice thing about Playwright is that it can handle Shadow DOM.

542
00:29:19,120 --> 00:29:23,680
Selenium, by default, I don't think Selenium can punch through the Shadow DOM.

543
00:29:23,680 --> 00:29:25,320
Playwright can.

544
00:29:25,320 --> 00:29:26,320
So that's really nice.

545
00:29:41,600 --> 00:29:43,200
If a human can do it, automation can.

546
00:29:43,200 --> 00:29:44,200
Yes.

547
00:29:45,960 --> 00:29:46,960
WebGL.

548
00:29:46,960 --> 00:29:47,960
I have no idea.

549
00:29:49,160 --> 00:29:50,160
That's above me.

550
00:29:50,160 --> 00:29:51,160
I'm sorry.

551
00:29:51,160 --> 00:29:52,160
One more.

552
00:29:52,160 --> 00:29:53,160
Oh, gosh, that's awesome.

553
00:30:00,960 --> 00:30:04,440
Dems fighting words.

554
00:30:04,440 --> 00:30:06,120
Come talk to me afterwards.

555
00:30:06,120 --> 00:30:08,120
I have opinions.

556
00:30:08,120 --> 00:30:14,800
I'll share my high-level opinion.

557
00:30:14,800 --> 00:30:20,440
In this space, when you're doing test automation, the big divide is between coded tools or codeless

558
00:30:20,440 --> 00:30:21,440
tools.

559
00:30:21,440 --> 00:30:26,920
Coded, meaning you are a developer automating tests using code, like Playwright, Selenium,

560
00:30:26,920 --> 00:30:28,520
Cypress is big in the JavaScript world.

561
00:30:28,520 --> 00:30:31,120
Those are the big three.

562
00:30:31,120 --> 00:30:32,560
Those are all open-source projects.

563
00:30:32,560 --> 00:30:36,840
Then there's a whole bunch of companies out there making codeless tools that are like

564
00:30:36,840 --> 00:30:38,800
website builders or screen recorders.

565
00:30:38,800 --> 00:30:40,560
There's more than I can count.

566
00:30:41,120 --> 00:30:46,160
I prefer the coded tools because you have more control over them.

567
00:30:46,160 --> 00:30:51,920
They're also open-source and free, which is nice.

568
00:30:51,920 --> 00:30:55,560
If you know what you're doing, you can do more powerful things.

569
00:30:55,560 --> 00:30:59,960
You can truly build high-scale test automation solutions.

570
00:30:59,960 --> 00:31:00,960
You can tune them.

571
00:31:00,960 --> 00:31:02,240
You can refine them.

572
00:31:02,240 --> 00:31:05,040
You can make them be awesome.

573
00:31:05,040 --> 00:31:06,680
That has been my career.

574
00:31:06,720 --> 00:31:08,880
So if somebody's like, hey, do you want to use a SmartBear tool?

575
00:31:08,880 --> 00:31:14,520
I'm like, probably not, no offense, but that's just me.

576
00:31:14,520 --> 00:31:16,320
There is a time and place for codeless tools.

577
00:31:16,320 --> 00:31:19,840
Sorry, I'm ranting here, I'll finish up real quick.

578
00:31:19,840 --> 00:31:23,880
There are a lot of people in the industry who are testers who don't have strong programming

579
00:31:23,880 --> 00:31:24,880
skills.

580
00:31:24,880 --> 00:31:28,400
They may have been manual testers or human testers or exploratory testers since they

581
00:31:28,400 --> 00:31:33,880
graduated from college 20, 30 years ago, and Python or Java is a whole new thing to them.

582
00:31:33,920 --> 00:31:37,240
They're being put into positions where their management is telling them, automate all the

583
00:31:37,240 --> 00:31:38,240
things.

584
00:31:38,240 --> 00:31:41,440
So they're like, okay, well, I can spend two years trying to figure out a programming language

585
00:31:41,440 --> 00:31:44,480
or I can buy this tool that does it for me.

586
00:31:44,480 --> 00:31:45,920
That's a good use case.

587
00:31:45,920 --> 00:31:48,560
It gets them farther than where they are today and delivers value.

588
00:31:48,560 --> 00:31:49,560
So that's cool.

589
00:31:49,560 --> 00:31:53,000
That's not for me, but that's for them.

590
00:31:53,000 --> 00:31:56,920
All righty.

591
00:31:56,920 --> 00:31:57,920
Anything else?

592
00:31:57,920 --> 00:31:58,920
Cool.

593
00:31:58,920 --> 00:32:01,600
Well, thank you all very much.

594
00:32:01,600 --> 00:32:05,920
I'm honored to be here at PyTexas and to give this last talk.

595
00:32:05,920 --> 00:32:09,320
If you have more questions and want to talk more about anything, I'll be around for a

596
00:32:09,320 --> 00:32:10,320
while.

597
00:32:10,320 --> 00:32:11,680
If you want panda stickers, please come hit me up.

598
00:32:11,680 --> 00:32:15,480
If you want to see more pictures of my puppy or my Volkswagens, let me know.

599
00:32:15,480 --> 00:32:16,480
I'll be more than happy to share.

