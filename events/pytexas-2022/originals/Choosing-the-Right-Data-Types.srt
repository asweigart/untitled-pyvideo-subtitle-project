1
00:00:00,000 --> 00:00:10,040
Oh, I'm Josh, got it, sorry, always a good way to start off a presentation.

2
00:00:10,040 --> 00:00:17,320
Hi, I'm Josh, I talk to probably most of you between lunch and around the conference.

3
00:00:17,320 --> 00:00:19,640
Let's see, how do I start off with me?

4
00:00:19,640 --> 00:00:22,520
The first is kind of two mea culpas here.

5
00:00:22,520 --> 00:00:27,440
Number one, I'm going to get really opinionated, and my opinions are worth exactly what you

6
00:00:27,440 --> 00:00:31,720
paid for them, which depending on your predisposition is somewhere between zero and whatever you

7
00:00:31,720 --> 00:00:32,720
paid for the ticket.

8
00:00:32,720 --> 00:00:40,960
So I apologize if I offend anybody, but I'm going to give a lot of opinions here.

9
00:00:40,960 --> 00:00:44,640
I give a little bit of background on me for a second.

10
00:00:44,640 --> 00:00:50,160
I am a senior developer and test automation architect at a really large computer manufacturer

11
00:00:50,160 --> 00:00:52,520
that you probably all know.

12
00:00:52,520 --> 00:00:57,120
I actually have two of my junior developers in the audience, so I'm going to try not

13
00:00:57,120 --> 00:01:00,280
to suck up here.

14
00:01:00,280 --> 00:01:04,160
Part of my job is training junior developers and working with them and developing their

15
00:01:04,160 --> 00:01:08,760
skill set, but before I did that, I worked with the most junior of developers I've ever

16
00:01:08,760 --> 00:01:14,440
worked with, and that was me, because I taught myself Python, taught myself most of the programming

17
00:01:14,440 --> 00:01:15,480
languages that I know.

18
00:01:15,480 --> 00:01:18,920
I don't have a degree in all of this stuff, in fact, I don't have a degree at all.

19
00:01:19,080 --> 00:01:24,200
I worked my way up starting from customer service and call centers up through being

20
00:01:24,200 --> 00:01:29,320
a customer service specialist, working with technical support and escalations, became

21
00:01:29,320 --> 00:01:35,040
a product owner, and now I'm a test automation engineer and a senior automation architect.

22
00:01:35,040 --> 00:01:39,520
It's a fun way to work your way up, and really fun when you go to career day at school and

23
00:01:39,520 --> 00:01:43,320
have to explain what kind of degree do you need to do the job that you do.

24
00:01:43,320 --> 00:01:48,320
In training people, I've kind of come across a couple of variations of this question.

25
00:01:48,560 --> 00:01:52,640
First one I get is, when should I use a list versus a tuple?

26
00:01:52,640 --> 00:01:57,080
Why aren't you using a tuple there, why aren't you using a list, or what's the curly braces

27
00:01:57,080 --> 00:02:02,040
but I don't see keys and stuff in there, it's just, what is a set?

28
00:02:02,040 --> 00:02:05,520
The second is the question I find myself asking more often, especially in code reviews and

29
00:02:05,520 --> 00:02:08,320
stuff, why everything got to be a list of dictionaries?

30
00:02:08,320 --> 00:02:12,360
I mean, lists are cool and dictionaries are cool, but does everything have to be made

31
00:02:12,360 --> 00:02:14,680
of them?

32
00:02:14,680 --> 00:02:19,240
So I started looking into this myself, using my background and stuff in there.

33
00:02:19,240 --> 00:02:22,040
The first thing I'm going to level set on is I'm not going to talk about what I call

34
00:02:22,040 --> 00:02:24,120
the atomic data types.

35
00:02:24,120 --> 00:02:28,520
That's your floats, your ints, your bools, your strings, chances are if you've got a

36
00:02:28,520 --> 00:02:32,440
question about which of those to use, it's either going to be obvious or the answer's

37
00:02:32,440 --> 00:02:35,400
probably not going to matter a whole bunch.

38
00:02:35,400 --> 00:02:40,000
These things all have pretty static usages and that, so you're probably not asking that

39
00:02:40,000 --> 00:02:41,000
question.

40
00:02:41,000 --> 00:02:44,120
What we're going to talk about is what I tend to call the complex data types, which

41
00:02:44,120 --> 00:02:47,920
are the data structures where you're taking a bunch of these atomic data types and rearranging

42
00:02:47,920 --> 00:02:52,080
them in different configurations to have different meanings.

43
00:02:52,080 --> 00:02:58,080
The other thing that I'm going to kind of challenge you guys to think about here, in

44
00:02:58,080 --> 00:03:03,360
my time working in customer service, helping people solve technical support problems, and

45
00:03:03,360 --> 00:03:06,760
I probably know how to do unholy things to your TI calculators because I worked with

46
00:03:06,760 --> 00:03:09,880
those for so long.

47
00:03:09,880 --> 00:03:14,540
I really got to think about the user experience.

48
00:03:14,540 --> 00:03:19,000
User experience is important in everything that we do.

49
00:03:19,000 --> 00:03:22,960
We need to start thinking of our code as a user interface.

50
00:03:22,960 --> 00:03:27,320
If you're writing code that only you're ever going to use, it has a really limited shelf

51
00:03:27,320 --> 00:03:31,280
life and a really limited utility.

52
00:03:31,280 --> 00:03:34,800
Most of the time we're writing things for other people to use, right?

53
00:03:34,800 --> 00:03:38,280
Which means we need to write it with other people in mind.

54
00:03:38,320 --> 00:03:41,720
Think of that end user that's going to use your code and try to be as kind to that person

55
00:03:41,720 --> 00:03:43,880
as you can.

56
00:03:43,880 --> 00:03:48,780
I learned to think a lot about the user experience with all these things, and it kind of led

57
00:03:48,780 --> 00:03:52,180
me to this thought when we're talking about data structures.

58
00:03:52,180 --> 00:03:57,060
The properties of the data structures that we use send signals to our users on how they

59
00:03:57,060 --> 00:04:01,160
should interpret, extend, and use our data.

60
00:04:01,160 --> 00:04:05,160
This is important to understand what makes these things similar to each other and different

61
00:04:05,280 --> 00:04:10,400
from each other so that you know which one sends the signals that you want to send.

62
00:04:10,400 --> 00:04:14,880
Before I dig into all of that, I figured it would be fun to review what Josh calls his

63
00:04:14,880 --> 00:04:18,440
unified theory of good user experiences.

64
00:04:18,440 --> 00:04:19,440
It's really simple.

65
00:04:19,440 --> 00:04:22,120
It has three rules, and you guys can repeat after me if you want, all right?

66
00:04:22,120 --> 00:04:23,680
Is everybody up for this?

67
00:04:23,680 --> 00:04:26,600
This is the audience participation portion of the presentation.

68
00:04:26,600 --> 00:04:30,960
All right, rule number one, say it with me.

69
00:04:30,960 --> 00:04:33,600
Make it obvious.

70
00:04:33,620 --> 00:04:38,320
If you make something obvious, then the user doesn't have to ask you how to use it because

71
00:04:38,320 --> 00:04:41,080
it's obvious.

72
00:04:41,080 --> 00:04:44,520
They look at it and they know how to use it.

73
00:04:44,520 --> 00:04:49,400
Rule number two is if you can't make it obvious, make it familiar.

74
00:04:49,400 --> 00:04:53,580
If I put a random GUI application in front of you and there's something that looks like

75
00:04:53,580 --> 00:04:58,160
a toolbar and there's an icon that looks like a floppy disk, what do you guys think that's

76
00:04:58,160 --> 00:04:59,160
used for?

77
00:04:59,160 --> 00:05:02,640
Did I have to teach you that that means save?

78
00:05:02,680 --> 00:05:07,680
No, because I'm borrowing from what you know from a whole bunch of other pieces of software.

79
00:05:07,680 --> 00:05:10,920
As long as I stay consistent with that, I don't have to teach you how to use it.

80
00:05:10,920 --> 00:05:11,920
You already know.

81
00:05:11,920 --> 00:05:15,680
This is, by the way, how tropes work in screenwriting.

82
00:05:15,680 --> 00:05:20,540
Rule number three is if you can't make it familiar or obvious, for the love of God,

83
00:05:20,540 --> 00:05:23,200
make it well documented.

84
00:05:23,200 --> 00:05:27,880
Spend time doing good variable names, spend time doing doc strings, like, please be really

85
00:05:27,880 --> 00:05:32,600
kind to your users, but don't start at rule three.

86
00:05:32,640 --> 00:05:35,280
Rule three is the weapon of last resort.

87
00:05:35,280 --> 00:05:40,160
If a user has to go look for your documentation to figure out how to use something, the chances

88
00:05:40,160 --> 00:05:44,000
that they're going to use that thing start to go down considerably.

89
00:05:44,000 --> 00:05:48,120
So if you can find ways to make it obvious or find ways to make it familiar, that is

90
00:05:48,120 --> 00:05:51,920
a better user experience for everybody and more people will use your stuff.

91
00:05:51,920 --> 00:05:55,200
All right, so I promised you I'd get into data types, right?

92
00:05:55,200 --> 00:06:00,200
So I'm going to start with Python's three very different bags.

93
00:06:00,360 --> 00:06:02,600
Sets and tuples, right?

94
00:06:02,600 --> 00:06:03,600
They're all bags.

95
00:06:03,600 --> 00:06:04,600
They're all collections.

96
00:06:04,600 --> 00:06:11,000
They're all a jumble that you put a bunch of things into so that you can do things with them.

97
00:06:11,000 --> 00:06:14,260
The properties of these three different bags, though, are what set them apart, and there's

98
00:06:14,260 --> 00:06:17,360
two big properties I'm going to focus on here.

99
00:06:17,360 --> 00:06:21,840
Property number one is mutability or immutability, okay?

100
00:06:21,840 --> 00:06:26,920
Is anybody not clear on what the difference is between mutable and immutable?

101
00:06:26,920 --> 00:06:29,800
Mutable means that it can be changed in place.

102
00:06:29,800 --> 00:06:31,400
So a string is immutable.

103
00:06:31,400 --> 00:06:36,600
If you want to concatenate two strings together, then what happens is a third string is created

104
00:06:36,600 --> 00:06:40,600
and string one and two are destroyed if they're no longer used.

105
00:06:40,600 --> 00:06:45,000
Mutable data types have their uses and they have their drawbacks.

106
00:06:45,000 --> 00:06:46,000
Fantastic!

107
00:06:46,000 --> 00:06:47,000
You can modify it in place.

108
00:06:47,000 --> 00:06:50,600
If you pass a mutable value to two different functions, they both have access to the same

109
00:06:50,600 --> 00:06:51,600
set of data.

110
00:06:51,600 --> 00:06:53,600
They can both add to it and remove from it.

111
00:06:53,600 --> 00:06:57,600
That can be fantastic or really, really scary.

112
00:06:58,600 --> 00:07:01,600
The second property up here is ordered.

113
00:07:01,600 --> 00:07:03,600
Ordered versus unordered.

114
00:07:03,600 --> 00:07:07,600
And here's the epiphany that I had about ordered versus unordered.

115
00:07:07,600 --> 00:07:13,600
In an ordered structure, the position of the elements within the sequence is what's used

116
00:07:13,600 --> 00:07:15,600
as the locator.

117
00:07:15,600 --> 00:07:19,600
In unordered sets, the value is the locator.

118
00:07:19,600 --> 00:07:20,600
Make sense?

119
00:07:20,600 --> 00:07:25,600
If we're all standing in line at Starbucks, it doesn't matter who the third person is,

120
00:07:25,600 --> 00:07:27,600
it only matters the third person.

121
00:07:27,600 --> 00:07:31,600
And if you're the barista, it only matters who person zero is because they're the next

122
00:07:31,600 --> 00:07:35,600
one in line that you've got to take their order for.

123
00:07:35,600 --> 00:07:39,600
In an unordered set, you don't care what position people are in.

124
00:07:39,600 --> 00:07:40,600
You want to find Bob?

125
00:07:40,600 --> 00:07:42,600
You say, is Bob here?

126
00:07:42,600 --> 00:07:43,600
And Bob comes forward.

127
00:07:43,600 --> 00:07:47,600
You don't care about where Bob is in line, if he's the first, the last, or somewhere

128
00:07:47,600 --> 00:07:48,600
in the hazy middle.

129
00:07:48,600 --> 00:07:50,600
You just care about Bob.

130
00:07:51,600 --> 00:07:55,600
So, what do I mean when I say all of this fun stuff?

131
00:07:55,600 --> 00:08:02,600
I think, consider using a set if all of the elements that are in there are immutable,

132
00:08:02,600 --> 00:08:08,600
they're hashable, and you need all of the elements to be unique, and the order doesn't

133
00:08:08,600 --> 00:08:09,600
matter.

134
00:08:09,600 --> 00:08:11,600
It's like, whose line is in any way in there?

135
00:08:11,600 --> 00:08:13,600
If the points are made up, they don't matter.

136
00:08:13,600 --> 00:08:17,600
The position that they are in line doesn't matter, you just care that there's a unique

137
00:08:17,600 --> 00:08:19,600
set of them.

138
00:08:20,600 --> 00:08:24,600
Use a tuple when you're gift wrapping values to pass to other places.

139
00:08:24,600 --> 00:08:29,600
A tuple is really good for when you have a limited scope of data, and the position of

140
00:08:29,600 --> 00:08:31,600
those data has meaning.

141
00:08:31,600 --> 00:08:35,600
So, if you're always returning three values, and the first value is a name, and the second

142
00:08:35,600 --> 00:08:39,600
value is a quantity that you have, and the third value is a quantity that you need, a

143
00:08:39,600 --> 00:08:43,600
tuple is a good way to gift wrap those values so that you can pass them in one go.

144
00:08:43,600 --> 00:08:45,600
Does that make sense?

145
00:08:45,600 --> 00:08:46,600
Third one is a list.

146
00:08:46,600 --> 00:08:51,600
List is really good when order matters, but the number of things that you're going to

147
00:08:51,600 --> 00:08:53,600
have in there are indeterminate.

148
00:08:55,600 --> 00:08:58,600
Everybody with me on the three very different bags?

149
00:08:58,600 --> 00:09:02,600
Now, I'm going to throw a couple of other extra little bags that Python included in

150
00:09:02,600 --> 00:09:05,600
the collections module, and if you haven't dug into collections, there's a couple of

151
00:09:05,600 --> 00:09:07,600
really magical structures in there.

152
00:09:07,600 --> 00:09:09,600
The first one I'm going to talk about is the deck.

153
00:09:09,600 --> 00:09:11,600
D-E-Q-U-E.

154
00:09:11,600 --> 00:09:14,600
A deck can be used in place of a list when you want to do one of two things.

155
00:09:14,600 --> 00:09:17,600
Number one, you want to limit the number of elements that can be in there.

156
00:09:17,600 --> 00:09:21,600
The deck initializer has a keyword argument called maxlen.

157
00:09:21,600 --> 00:09:24,600
You set it to the number you want.

158
00:09:24,600 --> 00:09:28,600
If you go to put, let's say you set the max length at 50 elements, you go to put a

159
00:09:28,600 --> 00:09:31,600
51st element in there, it bumps off the oldest one.

160
00:09:31,600 --> 00:09:34,600
What it does, it bumps off the one that's on the other end.

161
00:09:34,600 --> 00:09:38,600
So, if you're putting in a new element at the end, it kicks off whatever the first one

162
00:09:38,600 --> 00:09:39,600
is on top.

163
00:09:39,600 --> 00:09:42,600
If you're trying to put a new element on top, it kicks off whatever the one is on the

164
00:09:42,600 --> 00:09:43,600
back.

165
00:09:43,600 --> 00:09:47,600
The other thing is, is that what a deck is, is it's a double-ended queue.

166
00:09:47,600 --> 00:09:52,600
It's sort of like Python's implementation of a doubly linked list.

167
00:09:52,600 --> 00:09:57,600
Decks are actually optimized for actions that happen on the beginning or end, but not so

168
00:09:57,600 --> 00:09:58,600
much in the middle.

169
00:09:58,600 --> 00:10:02,600
So, if you want to use a list as a stack, like you want to use it for linear processing,

170
00:10:02,600 --> 00:10:05,600
you're going to put things on the stack and you're going to pull things off the stack.

171
00:10:05,600 --> 00:10:09,600
It's a good way to get rid of recursion in some of your programs is to use stack-based

172
00:10:09,600 --> 00:10:10,600
processing.

173
00:10:10,600 --> 00:10:15,600
A deck is actually marginally faster than a list is, which is really cool.

174
00:10:15,600 --> 00:10:16,600
Things you discover.

175
00:10:16,600 --> 00:10:21,600
The other one I'm going to talk about is the name tuple.

176
00:10:21,600 --> 00:10:26,600
I think these are criminally underused, and this is a good way to add just a little bit

177
00:10:26,600 --> 00:10:28,600
of usability into a structure.

178
00:10:28,600 --> 00:10:31,600
So, look at that first example that I have up there.

179
00:10:31,600 --> 00:10:35,600
Can anybody tell me from that value what those two numbers mean?

180
00:10:35,600 --> 00:10:40,600
You have no idea unless you go read the documentation and go figure out what the order of those

181
00:10:40,600 --> 00:10:41,600
three are.

182
00:10:41,600 --> 00:10:44,600
What a name tuple allows you to do is to get all of the functionality of a tuple.

183
00:10:44,600 --> 00:10:46,600
You can access values by index.

184
00:10:46,600 --> 00:10:51,600
It's immutable and everything, but it also allows you to put names on those fields and

185
00:10:51,600 --> 00:10:55,600
allows your users to refer to objects by name instead of by index.

186
00:10:55,600 --> 00:10:59,600
This is awesome for creating readability in your software.

187
00:10:59,600 --> 00:11:03,600
So, if you're using a tuple, consider using a name tuple instead.

188
00:11:03,600 --> 00:11:07,600
Okay, now we get to the big dog.

189
00:11:07,600 --> 00:11:09,600
Dictionaries.

190
00:11:09,600 --> 00:11:14,600
Stole my thunder earlier because dictionaries are used all over the place, and you're absolutely

191
00:11:14,600 --> 00:11:15,600
right.

192
00:11:15,600 --> 00:11:16,600
They're magical.

193
00:11:16,600 --> 00:11:19,600
I kind of feel like they get overused sometimes.

194
00:11:19,600 --> 00:11:26,600
I think dictionaries are best when either A, you're really trying to correlate two pieces of

195
00:11:26,600 --> 00:11:27,600
data together.

196
00:11:27,600 --> 00:11:34,600
One piece of data that can be identified by value, so it's hashable, and the other is

197
00:11:34,600 --> 00:11:37,600
just whatever data you're wanting to correlate to.

198
00:11:37,600 --> 00:11:42,600
The other thing that I think dictionaries are super useful for is if you have an indeterminate

199
00:11:42,600 --> 00:11:43,600
number of keys.

200
00:11:43,600 --> 00:11:45,600
So, you don't know how many things you're going to stick in there.

201
00:11:45,600 --> 00:11:48,600
You're just going to have a lot of things that you're going to be correlating together.

202
00:11:48,600 --> 00:11:53,600
It's a good open-ended mutable data structure for doing those kinds of things, right?

203
00:11:53,600 --> 00:11:56,600
I think dictionaries are still magical.

204
00:11:56,600 --> 00:11:57,600
They're still wonderful.

205
00:11:57,600 --> 00:11:58,600
They should be used.

206
00:11:58,600 --> 00:12:00,600
They should just be used carefully.

207
00:12:00,600 --> 00:12:05,600
How many of you guys have seen a piece of code where you're processing, say, a list of

208
00:12:05,600 --> 00:12:09,600
dictionaries, and it's clear from the code that they expect all the dictionaries to have

209
00:12:09,600 --> 00:12:12,600
the same set of keys all the time?

210
00:12:12,600 --> 00:12:15,600
So, they're always looking for the same set of keys.

211
00:12:15,600 --> 00:12:20,600
There's another more wonderful data structure to use for that, and they're called classes.

212
00:12:20,600 --> 00:12:22,600
But before we get to that, one other.

213
00:12:22,600 --> 00:12:24,600
You showed default dict earlier.

214
00:12:25,600 --> 00:12:28,600
I think default dict is wonderful.

215
00:12:28,600 --> 00:12:30,600
It saves you a couple of lines of code.

216
00:12:30,600 --> 00:12:35,600
Basically, what the default dict does is allow you to define a default value or a default

217
00:12:35,600 --> 00:12:40,600
factory that will spit out new values if you access a key that isn't defined.

218
00:12:40,600 --> 00:12:44,600
It saves you the extra lines of code of going, is this key already defined?

219
00:12:44,600 --> 00:12:45,600
It's not.

220
00:12:45,600 --> 00:12:46,600
Okay, put this default value in for me.

221
00:12:46,600 --> 00:12:48,600
It takes care of all that for you.

222
00:12:48,600 --> 00:12:53,600
It does.

223
00:12:53,600 --> 00:12:56,600
And keep in mind what you're optimizing for.

224
00:12:56,600 --> 00:12:59,600
If you're optimizing for performance, you're right.

225
00:12:59,600 --> 00:13:02,600
A default dict might not be the fastest way to go.

226
00:13:02,600 --> 00:13:06,600
If you're wanting simplicity and readability of code, this cuts down on the amount of code

227
00:13:06,600 --> 00:13:08,600
that you have to write.

228
00:13:08,600 --> 00:13:12,600
Remember that every line of code that you write is a line of code that has to be read,

229
00:13:12,600 --> 00:13:15,600
understood, maintained, and eventually decommissioned.

230
00:13:15,600 --> 00:13:18,600
Code is terrible and we should have as little of it in our product as possible.

231
00:13:21,600 --> 00:13:23,600
All right, so we talked about classes.

232
00:13:23,600 --> 00:13:26,600
Classes I like for adding uniformity.

233
00:13:26,600 --> 00:13:31,600
So if you find that you are wanting dictionaries to all have the same keys, maybe that's what

234
00:13:31,600 --> 00:13:33,600
a class is for.

235
00:13:33,600 --> 00:13:35,600
You set the attributes that you want on there.

236
00:13:35,600 --> 00:13:37,600
It contains everything that you need.

237
00:13:37,600 --> 00:13:42,600
You can call vars on any instance object and get its dictionary that's inside if you really

238
00:13:42,600 --> 00:13:44,600
want a dictionary.

239
00:13:44,600 --> 00:13:46,600
That's what classes are for.

240
00:13:46,600 --> 00:13:49,600
Classes are also useful for sticking functions on there.

241
00:13:49,600 --> 00:13:51,600
Sticking actions.

242
00:13:51,600 --> 00:13:54,600
I had the most difficult time understanding object-oriented code.

243
00:13:54,600 --> 00:13:59,600
Because before here, I came through Pascal in high school.

244
00:13:59,600 --> 00:14:04,600
I worked in auto it for a while, which is sort of object-oriented, but not quite.

245
00:14:04,600 --> 00:14:06,600
I worked with VBScript for a long time.

246
00:14:06,600 --> 00:14:09,600
That's the dark period we don't talk about anymore.

247
00:14:09,600 --> 00:14:12,600
Until I finally came to Python.

248
00:14:12,600 --> 00:14:16,600
Object-oriented programming, I could not wrap my head around it for the longest time.

249
00:14:16,600 --> 00:14:20,600
My best friend would explain it to me by going, it's just drawing circles around your code.

250
00:14:20,600 --> 00:14:22,600
And that still didn't help me.

251
00:14:22,600 --> 00:14:24,600
I like to think of it this way.

252
00:14:24,600 --> 00:14:26,600
Your objects are people.

253
00:14:26,600 --> 00:14:28,600
They have a function.

254
00:14:28,600 --> 00:14:30,600
They do a job for you.

255
00:14:30,600 --> 00:14:37,600
What a class is and what an object is, is it's a state, a set of values, and then it's actions

256
00:14:37,600 --> 00:14:40,600
that perform on those values.

257
00:14:40,600 --> 00:14:41,600
Right?

258
00:14:41,600 --> 00:14:44,600
So it's data with purpose.

259
00:14:44,600 --> 00:14:48,600
The Python 3 introduced an extra little thing that I think is super useful.

260
00:14:48,600 --> 00:14:51,600
And that's the data class decorator.

261
00:14:51,600 --> 00:14:56,600
Data class decorator does a lot of the job of generating a lot of the boilerplate for you.

262
00:14:56,600 --> 00:14:59,600
So you don't have to write your dunder in it.

263
00:14:59,600 --> 00:15:03,600
You don't have to write your dunder string, your dunder rep, or your dunder equal, and all of that.

264
00:15:03,600 --> 00:15:05,600
The data class takes care of all that for you.

265
00:15:05,600 --> 00:15:12,600
And all it asks that you do is set up class level fields and put type annotations on them.

266
00:15:12,600 --> 00:15:16,600
And from that, it can create everything else that you need.

267
00:15:16,600 --> 00:15:22,600
Data classes are fantastic as an alternative to a dictionary if you need a rigid structure on your data.

268
00:15:22,600 --> 00:15:28,600
The data classes module even has a function called as dict that you can pass at any data class instance,

269
00:15:28,600 --> 00:15:30,600
and it will give you the dictionary.

270
00:15:30,600 --> 00:15:32,600
Super useful.

271
00:15:32,600 --> 00:15:39,600
So hopefully I've given you a couple of good ideas and a couple of guidelines to kind of play by.

272
00:15:39,600 --> 00:15:44,600
I generated all these slides in a Markdown framework called Marp,

273
00:15:44,600 --> 00:15:47,600
which takes Markdown and converts it into slides.

274
00:15:47,600 --> 00:15:50,600
In my GitHub repo, you'll find both this and a cheat sheet,

275
00:15:50,600 --> 00:15:55,600
which kind of has more details on the properties of each of the data types,

276
00:15:55,600 --> 00:16:00,600
along with my suggestion of when to use them and some code examples and stuff in there.

277
00:16:00,600 --> 00:16:06,600
Of course, because I work in test automation, my slides repo has a CI that automatically generated my slides for me,

278
00:16:06,600 --> 00:16:09,600
because I couldn't come up here in good faith and tell you I work in automation

279
00:16:09,600 --> 00:16:13,600
without applying some automation to my own workflow.

280
00:16:13,600 --> 00:16:19,600
So, any questions?

281
00:16:19,600 --> 00:16:22,600
Stunned silence.

282
00:16:22,600 --> 00:16:27,600
I love it.

283
00:16:27,600 --> 00:16:28,600
Very cool.

284
00:16:28,600 --> 00:16:34,600
Okay, well, I hope to talk to some of the rest of you guys that I haven't talked to yet around.

285
00:16:34,600 --> 00:16:35,600
Thank you.

