1
00:00:00,000 --> 00:00:11,000
All right, so thanks everybody for coming out of a little last half of the day, so I'll try to finish up as fast as possible.

2
00:00:11,000 --> 00:00:18,000
All right, so my name is Oli Sifi, you can find me on Twitter, I am at the highest service.

3
00:00:18,000 --> 00:00:23,000
I live in the south side of Chicago, and I'm going to be at a healthcare startup called Chatham Health.

4
00:00:23,000 --> 00:00:28,000
We're building a patient monitoring solution in cancer management space.

5
00:00:28,000 --> 00:00:32,000
We're just raising a huge city around, and we're hiring human-based engineers.

6
00:00:32,000 --> 00:00:35,000
Come by me after if you'd like to do a little icon.

7
00:00:35,000 --> 00:00:39,000
I also help organize the Chicago pipeline management.

8
00:00:39,000 --> 00:00:41,000
We call ourselves Chibi.

9
00:00:41,000 --> 00:00:43,000
Chibi is one of the largest pipeline communities in the world.

10
00:00:43,000 --> 00:00:45,000
We have over 6,000 members.

11
00:00:45,000 --> 00:00:49,000
We're actually back to being university members in February.

12
00:00:49,000 --> 00:00:51,000
Awesome, man, thank you so much.

13
00:00:51,000 --> 00:00:54,000
So if you're ever in Chicago, please come on down.

14
00:00:54,000 --> 00:00:55,000
I'll put a post on our website.

15
00:00:55,000 --> 00:01:01,000
We also livestream our events, so if you want to find out more information, check out Chibi.org.

16
00:01:01,000 --> 00:01:08,000
This is probably a genus slide, I don't really know what a genus slide is, I'm not going to go over it, but people care, and it is.

17
00:01:08,000 --> 00:01:09,000
Let's just get started.

18
00:01:09,000 --> 00:01:20,000
I talk in this talk every year to design colleagues, because I really wanted to emphasize that we don't need to be designing complex distributed systems to take advantage of design values.

19
00:01:20,000 --> 00:01:23,000
We can use them anytime we need to.

20
00:01:23,000 --> 00:01:25,000
So what are design patterns?

21
00:01:25,000 --> 00:01:31,000
Design patterns are solutions to commonly create problems in software design.

22
00:01:31,000 --> 00:01:37,000
You can think of design patterns as customizable blueprints that you can use to implement a solution to a known problem.

23
00:01:37,000 --> 00:01:41,000
And when you use a pattern, you don't really use the pattern the way it's described.

24
00:01:41,000 --> 00:01:47,000
You really need to adapt it to what your project is trying to do or what your specific use case is trying to do.

25
00:01:47,000 --> 00:01:50,000
And there are many benefits of using design patterns.

26
00:01:50,000 --> 00:01:56,000
Design patterns are tried and tested solutions to commonly occurring problems in software design.

27
00:01:56,000 --> 00:02:01,000
Design patterns are not really specific to any one domain or application area.

28
00:02:01,000 --> 00:02:04,000
In design patterns, they make your code reusable.

29
00:02:04,000 --> 00:02:09,000
We can extract functionality and use it somewhere else.

30
00:02:09,000 --> 00:02:15,000
And finally, design patterns give you a shared vocabulary we can use with other developers, and this is really, really important.

31
00:02:15,000 --> 00:02:19,000
Once we have a shared vocabulary, we can communicate with other developers.

32
00:02:19,000 --> 00:02:23,000
Common language elevates the way we talk about architecture.

33
00:02:23,000 --> 00:02:28,000
We can focus on higher level abstractions versus focusing on low level details.

34
00:02:28,000 --> 00:02:34,000
I really wouldn't be giving a full picture of design patterns if I didn't talk about some of the criticisms.

35
00:02:34,000 --> 00:02:39,000
Design patterns, they're considered workarounds for the limitation of a programming language.

36
00:02:39,000 --> 00:02:46,000
For example, in Java, there are design patterns to mimic features such as multiple inheritance or decorators.

37
00:02:46,000 --> 00:02:51,000
Languages such as Python have these features built into the language.

38
00:02:51,000 --> 00:02:56,000
And if we always rely on design patterns without thinking of the larger picture of our application,

39
00:02:56,000 --> 00:03:02,000
it can really lead us to design inefficient solutions with many layers of inheritance hierarchy.

40
00:03:03,000 --> 00:03:09,000
And finally, as programmers, we have a tendency to try to solve the problem with the newest thing that we learned.

41
00:03:09,000 --> 00:03:12,000
Design patterns are great, but they're not a holy grail.

42
00:03:12,000 --> 00:03:15,000
You really need to understand how to use them properly.

43
00:03:15,000 --> 00:03:20,000
While there are hundreds of design patterns out there, we're going to be focusing on a single pattern.

44
00:03:20,000 --> 00:03:23,000
Unsurprisingly, we're going to be diving deep into the observer pattern,

45
00:03:23,000 --> 00:03:31,000
and we're going to see how we can use the observer pattern to write loosely coupled code that is easier to understand.

46
00:03:31,000 --> 00:03:36,000
The observer pattern defines a one-to-many dependency between our objects.

47
00:03:36,000 --> 00:03:42,000
If one object changes or performs an action, all of its dependencies are going to be notified.

48
00:03:42,000 --> 00:03:46,000
I think this concept is best demonstrated with an example.

49
00:03:46,000 --> 00:03:49,000
So let's say we have a newsletter that people can subscribe to.

50
00:03:49,000 --> 00:03:55,000
Users can subscribe to a weekly newsletter, a daily newsletter, or they can subscribe to both.

51
00:03:55,000 --> 00:04:00,000
User one comes along, and they subscribe to our newsletter with a weekly frequency.

52
00:04:00,000 --> 00:04:05,000
User two comes along, and they subscribe to both of our daily and our weekly newsletter.

53
00:04:05,000 --> 00:04:10,000
And finally, user three subscribes to our newsletter with a daily frequency.

54
00:04:10,000 --> 00:04:16,000
Okay, that's great. We got three active subscriptions, and all these people are waiting for our emails.

55
00:04:16,000 --> 00:04:20,000
Now say we're at the end of the day. It's time to send our daily email.

56
00:04:20,000 --> 00:04:24,000
Our editor writes it up, and they click the send button.

57
00:04:24,000 --> 00:04:27,000
For our weekly newsletter, it's only going to go to our daily subscribers.

58
00:04:27,000 --> 00:04:30,000
In this case, it's going to be user two and user three.

59
00:04:30,000 --> 00:04:34,000
And when we send our weekly newsletter, it goes to user one and it goes to user two.

60
00:04:34,000 --> 00:04:40,000
All of this really makes sense, like all the people that subscribed are going to get them as they expect.

61
00:04:40,000 --> 00:04:47,000
After a couple months, user one realizes that the content we sent is not that great, so they're going to unsubscribe.

62
00:04:47,000 --> 00:04:49,000
And now we only have two active users.

63
00:04:49,000 --> 00:04:56,000
And the next time we send a weekly email, it's only going to go to user two since they're the only active user.

64
00:04:56,000 --> 00:05:00,000
So this toy example, it demonstrates a few key points.

65
00:05:00,000 --> 00:05:07,000
We have a relationship that's one to many. So we have one newsletter, many different types of subscribers.

66
00:05:07,000 --> 00:05:10,000
Subscribers can also subscribe to different event types.

67
00:05:10,000 --> 00:05:14,000
So we can subscribe to our daily newsletter, our weekly newsletter, or both.

68
00:05:14,000 --> 00:05:19,000
Users can also unsubscribe and note that these things are business requirements.

69
00:05:19,000 --> 00:05:28,000
We might have other cases where limitations are we won't let people unsubscribe or users can only subscribe to one type of newsletter.

70
00:05:28,000 --> 00:05:33,000
And then finally, when an event occurs, all subscribers are going to be notified.

71
00:05:33,000 --> 00:05:37,000
The payload can include extra information about the event for the subscriber.

72
00:05:37,000 --> 00:05:44,000
So in our case, when we send an email notification, we're probably going to include our newsletter in our email body.

73
00:05:44,000 --> 00:05:51,000
But really, this could be any data that subscribers can use to perform their task.

74
00:05:51,000 --> 00:05:57,000
And finally, the point of doing all of this is that publishers and subscribers can change independently.

75
00:05:57,000 --> 00:06:01,000
When we're talking in software design speak, we see that these components are decoupled.

76
00:06:01,000 --> 00:06:05,000
So if a subscriber wants to change their email application from Gmail to Outlook,

77
00:06:05,000 --> 00:06:11,000
the publisher doesn't really care as long as their email address stays the same.

78
00:06:11,000 --> 00:06:17,000
As I mentioned, one of the big benefits of design patterns is that we define a common language for more effective communication.

79
00:06:17,000 --> 00:06:27,000
So let's take a step back and have the same discussion in the in the domain of design patterns and design pattern terminology.

80
00:06:27,000 --> 00:06:29,000
So let's go through the definition one more time.

81
00:06:29,000 --> 00:06:34,000
The observer pattern defines a one to many relationship between our objects.

82
00:06:34,000 --> 00:06:40,000
If one object changes or performs an action, all of its dependencies are going to get notified.

83
00:06:40,000 --> 00:06:45,000
So going back to that example, we have a single newsletter publisher.

84
00:06:45,000 --> 00:06:47,000
We have many different subscribers.

85
00:06:47,000 --> 00:06:55,000
Or if we're talking about things in design pattern terminology, we have a single subject and many different observers.

86
00:06:55,000 --> 00:06:59,000
Observers can register with a subject to receive notifications.

87
00:06:59,000 --> 00:07:02,000
Observers can also unregister.

88
00:07:02,000 --> 00:07:08,000
And when a subject changes, all of its registered observers are going to be sent a notification.

89
00:07:08,000 --> 00:07:13,000
And so what are some real world use cases where we use the observer pattern and note the cases I'm going to talk about.

90
00:07:13,000 --> 00:07:19,000
They're probably going to have some hardware or some software that's going to be handling the message bus layer.

91
00:07:19,000 --> 00:07:23,000
But really, under all that complexity is just the observer pattern.

92
00:07:23,000 --> 00:07:29,000
So when you book a ride on Uber, you're going to be subscribed to all the notifications for that particular ride.

93
00:07:29,000 --> 00:07:33,000
And when a driver is downstairs, they're going to send a message to the Uber server.

94
00:07:33,000 --> 00:07:39,000
The Uber server is going to send us a post notification that lets us know the drivers downstairs.

95
00:07:39,000 --> 00:07:45,000
When you buy something on Amazon, you're going to be subscribed to all of the notifications for a particular order.

96
00:07:45,000 --> 00:07:52,000
And then when your package ships, if it goes in multiple parts, you're going to be receiving an email with a tracking number.

97
00:07:53,000 --> 00:08:01,000
Basically, any kind of notification system, it's going to be using the observer pattern underneath the hood.

98
00:08:01,000 --> 00:08:05,000
And finally, the observer pattern is widely used in HTML and JavaScript.

99
00:08:05,000 --> 00:08:12,000
We can add event listeners to DOM elements to have user interaction.

100
00:08:12,000 --> 00:08:19,000
Now that we have a sense of the observer pattern and how we can use it, let's take a look at various open source implementations of this pattern.

101
00:08:19,000 --> 00:08:26,000
Digging into open source code or really anybody's other people's code, it's going to help us understand how other people solve the problem.

102
00:08:26,000 --> 00:08:30,000
And hopefully we can use this knowledge to make our code just a little bit better.

103
00:08:30,000 --> 00:08:37,000
So the first example I'm going to talk about is the observer pattern that is in the Python standard library logger.

104
00:08:37,000 --> 00:08:43,000
Real quick overview of the Python logger. Logger is a singleton. We have one instance that we access globally.

105
00:08:43,000 --> 00:08:48,000
And if we want to configure our logger, we have a formatter, which sets what the log looks like.

106
00:08:48,000 --> 00:08:53,000
We have a handler, which lets us set where our log is going to be going.

107
00:08:53,000 --> 00:08:58,000
And we have a logger, which allows us to assign handlers to various different namespaces.

108
00:08:58,000 --> 00:09:06,000
And then we want to select a logger. We can use logging.getlogger to actually get the logger and perform whatever we need to do.

109
00:09:06,000 --> 00:09:14,000
And so this is a configuration of a Python logger using a dictionary. We'll walk through it really quickly.

110
00:09:14,000 --> 00:09:21,000
So first we set up a formatter. We call it standard, and that's just going to be letting us set our log fields.

111
00:09:21,000 --> 00:09:32,000
We're also going to be setting up two log handlers. So the first handler, it's going to be sending all of our logs to a file if they are the level debugger higher.

112
00:09:32,000 --> 00:09:39,000
And the second log, I'll show you the second handler, it's going to be sending all error and critical logs to standard error.

113
00:09:39,000 --> 00:09:44,000
And then finally, when we create a logger in our root namespace with these two handlers,

114
00:09:44,000 --> 00:09:52,000
and we say that this logger is going to be triggered if log events are of debug or higher.

115
00:09:52,000 --> 00:09:59,000
And just to note that if we don't specify the logger namespace, it's just going to default to the root namespace in this configuration.

116
00:09:59,000 --> 00:10:08,000
So now in our application code, we can import logging, load a configuration, fetch a logger, and then we're going to add some application logs.

117
00:10:08,000 --> 00:10:15,000
And these log events, they're going to get sent to log handlers and get processed as needed.

118
00:10:15,000 --> 00:10:21,000
So going back to that file handler, it's going to capture all of our logs in that spam.log file.

119
00:10:21,000 --> 00:10:30,000
And then the console handler is going to capture logs that are error or critical, and it gets sent to standard error, which is pretty standard for logging.

120
00:10:30,000 --> 00:10:36,000
So relating all of this back to the observer pattern, we have that one-to-many relationship.

121
00:10:36,000 --> 00:10:41,000
We have one log event. It can be processed by many different handlers.

122
00:10:41,000 --> 00:10:48,000
And when we set up the Python logger, we register handlers with our logger. We're going to add log statements to our application.

123
00:10:48,000 --> 00:10:54,000
These statements are going to generate a log event. And then these log events are going to get passed to the handler.

124
00:10:54,000 --> 00:11:02,000
And the log is going to be emitted if the log record level is greater than our handler threshold.

125
00:11:02,000 --> 00:11:11,000
And the key benefit of using this pattern is that it allows us to have our application code separated from our logger code.

126
00:11:11,000 --> 00:11:18,000
The next implementation of the observer pattern is in Flask. It's the URL router.

127
00:11:18,000 --> 00:11:25,000
And so for those that don't know, Flask is a framework that routes client requests to different handler functions.

128
00:11:25,000 --> 00:11:29,000
And this is a canonical example I pulled from Flask's Quickstart.

129
00:11:29,000 --> 00:11:35,000
We can use decorators to register view functions for different URL paths.

130
00:11:35,000 --> 00:11:40,000
And as we register these routes, Flask is going to be building a routing table behind the scenes.

131
00:11:40,000 --> 00:11:45,000
And this is the routing table for the web application on the left side.

132
00:11:45,000 --> 00:11:55,000
And so when Flask gets a web request, it's going to use its internal routing table and it's going to route that request to the appropriate handler.

133
00:11:55,000 --> 00:11:59,000
So going back to the observer pattern, how does this fit in?

134
00:11:59,000 --> 00:12:07,000
Again, we have that one-to-many relationship. There's one request. We have many different route handlers.

135
00:12:08,000 --> 00:12:15,000
And looking at the Flask routing workflow, we use Flask helpers to help us register different URLs.

136
00:12:15,000 --> 00:12:23,000
And note that we're going to have one handler for every path verb tuple. And this is a business rule that's been encoded into Flask.

137
00:12:23,000 --> 00:12:35,000
So when Flask loads up and it sees a bunch of different route handlers, it's going to load the last one registered for a particular pair of path as well as verb.

138
00:12:35,000 --> 00:12:42,000
And then when Flask starts, it's going to be building a routing table. And then when a request comes in, it's going to be afforded to the appropriate function.

139
00:12:42,000 --> 00:12:49,000
And once that function is done, we're going to send a response back to our client.

140
00:12:49,000 --> 00:12:56,000
And using this pattern, it allows us to decouple our web framework logic from our route handling logic.

141
00:12:56,000 --> 00:13:03,000
And they allow those things to change independently. Like we don't need to update Flask in order to build a web app.

142
00:13:03,000 --> 00:13:13,000
Another implementation of the observer pattern can be found in PyTest's plugin manager. PyTest, it's built on top of a hook-based plugin system.

143
00:13:13,000 --> 00:13:20,000
And what a hook does is it identifies different points in your application where the application can be extended.

144
00:13:20,000 --> 00:13:29,000
And when PyTest first loads up, it's going to load all of our plugins and it's going to register those plugins for various hook functions.

145
00:13:29,000 --> 00:13:37,000
And then when a hook is triggered as PyTest is going through its runtime, all of the registered functions for a particular hook, they're going to get notified.

146
00:13:37,000 --> 00:13:42,000
And in particular for PyTest, these functions are going to be passed a context payload.

147
00:13:42,000 --> 00:13:49,000
And then our functions can view, use, modify, pass back these payloads as they need.

148
00:13:49,000 --> 00:13:56,000
And a fun fact, PyTest doesn't really have a lot of logic. It's built on top of a plugin system called Pluggy.

149
00:13:56,000 --> 00:14:05,000
And a lot of PyTest core functionality, it's implemented as a plugin, which is pretty cool. It's the observer pattern on steroids.

150
00:14:05,000 --> 00:14:10,000
And so there are many different types of PyTest hooks we can use to customize our behavior.

151
00:14:10,000 --> 00:14:16,000
In the plugin example I'm going to show, we're going to add a flag called skip slow to the PyTest CLI.

152
00:14:16,000 --> 00:14:23,000
And this command is going to help us skip slow tests. Notice right now this is not working. We're still running two tests.

153
00:14:23,000 --> 00:14:28,000
So to first write this plugin, we're going to have to open up our conftest.py file.

154
00:14:28,000 --> 00:14:35,000
We're going to be using PyTest underscore add option hook to add a new option to the PyTest CLI.

155
00:14:35,000 --> 00:14:41,000
And then we'll use the collection modify items hook that's going to be run after the test discovery process.

156
00:14:41,000 --> 00:14:47,000
So once PyTest finds all the files and all the tests inside of your files, it's going to be running this hook.

157
00:14:47,000 --> 00:14:51,000
And what we're going to do is we're going to skip all tests that we mark as slow.

158
00:14:51,000 --> 00:14:55,000
And now when we run our tests, only a single test is going to be run.

159
00:14:55,000 --> 00:15:00,000
So bringing things back to the observer pattern, we have that once in many relationship.

160
00:15:00,000 --> 00:15:04,000
There's one plugin manager, many different types of plugins.

161
00:15:04,000 --> 00:15:08,000
And then when PyTest has started, all of our plugins are registered and loaded.

162
00:15:08,000 --> 00:15:17,000
And as PyTest runs, hooks are triggered and all the registered plugins for a given hook, they're going to be notified and sent a context payload.

163
00:15:18,000 --> 00:15:24,000
And so the main benefit of using the observer pattern is that PyTest and PyTest plugins are decoupled.

164
00:15:24,000 --> 00:15:28,000
And that's exactly what we want when we were designing a plugin system.

165
00:15:28,000 --> 00:15:34,000
And the last implementation I sort of want to walk through is the observer pattern that's built into Node.js.

166
00:15:34,000 --> 00:15:37,000
And this is actually how I first learned about the observer pattern.

167
00:15:37,000 --> 00:15:45,000
I saw somebody using an event emitter and I thought it was a really great pattern that I wanted to port into Python.

168
00:15:45,000 --> 00:15:54,000
And so really quickly for those that don't know, Node.js is a JavaScript runtime that allows us to use JavaScript outside of a browser.

169
00:15:54,000 --> 00:16:01,000
And as we saw earlier, client-side JavaScript, it handles user interactions with event listeners.

170
00:16:01,000 --> 00:16:07,000
And with the event emitter, we use that same design principle for back-end node code.

171
00:16:09,000 --> 00:16:11,000
So the easiest way to understand it is with an example.

172
00:16:11,000 --> 00:16:14,000
I know we're a Python conference, but bear with me, we've got some JavaScript.

173
00:16:14,000 --> 00:16:16,000
So we're going to import the event emitter.

174
00:16:16,000 --> 00:16:18,000
We're going to create a new instance.

175
00:16:18,000 --> 00:16:21,000
Next, we'll register three event handler callbacks.

176
00:16:21,000 --> 00:16:24,000
That's sort of just the function and the syntax for that.

177
00:16:24,000 --> 00:16:26,000
Two of them are going to be handling the start event.

178
00:16:26,000 --> 00:16:29,000
And the last one is going to handle a stop event.

179
00:16:29,000 --> 00:16:32,000
And then finally, we're going to emit a start event.

180
00:16:32,000 --> 00:16:34,000
And then we run this script.

181
00:16:34,000 --> 00:16:39,000
We're only going to be running callback functions for the start handlers, which makes sense.

182
00:16:39,000 --> 00:16:43,000
So how does the event emitter implement the observer pattern?

183
00:16:43,000 --> 00:16:45,000
We have a one-to-many relationship.

184
00:16:45,000 --> 00:16:50,000
There is one event, many different event handler callback functions.

185
00:16:50,000 --> 00:16:53,000
And to use an event emitter, we're going to first create an instance.

186
00:16:53,000 --> 00:16:57,000
We're going to register all of our callback functions for different event types.

187
00:16:57,000 --> 00:17:05,000
And then when an event occurs, all those callback functions for that particular event type, they're going to be run.

188
00:17:05,000 --> 00:17:12,000
And the main benefit of this is it allows us to decouple our event parsing logic with our event handler logic.

189
00:17:12,000 --> 00:17:16,000
And I do want to make everybody aware that there's already a Python port of the event emitter.

190
00:17:16,000 --> 00:17:18,000
It's called PyEE.

191
00:17:18,000 --> 00:17:26,000
And it's actually a decorator-based event emitter, which can be used synchronously, or you can plug it into any of the async event loops.

192
00:17:26,000 --> 00:17:27,000
And I think that's pretty awesome.

193
00:17:27,000 --> 00:17:32,000
Like, if you're doing async in Python, this is a really good pattern to start learning about.

194
00:17:32,000 --> 00:17:39,000
And so looking at all of these implementations of the observer pattern, we did notice some common themes.

195
00:17:39,000 --> 00:17:42,000
First, there is that one-to-many relationship.

196
00:17:42,000 --> 00:17:47,000
And every time we run our code, we're registering events with a specific handler.

197
00:17:47,000 --> 00:17:53,000
And then when that event is triggered, we're going to be notifying all of our handlers.

198
00:17:53,000 --> 00:17:58,000
And the main benefit of doing all of this is it allows us to decouple our code so they can be changed independently.

199
00:17:58,000 --> 00:18:01,000
And that's the big thing.

200
00:18:01,000 --> 00:18:07,000
And I really want to show all of these examples to illustrate that the observer pattern is not a one-size-fits-all solution.

201
00:18:07,000 --> 00:18:10,000
In each of these implementations, it's solving a different problem.

202
00:18:10,000 --> 00:18:19,000
And as we saw in the Flask case, we're actually able to codify business rules inside of our observer pattern implementation, which is pretty awesome.

203
00:18:19,000 --> 00:18:22,000
So that was a lot of theory. Let's roll up our sleeves and write some code.

204
00:18:22,000 --> 00:18:34,000
And in this example, we're going to be implementing a Slack bot using the observer pattern.

205
00:18:34,000 --> 00:18:43,000
So really quickly, Slack is a chat platform. We can use the Slack API to build applications or bots, if you want to call them that.

206
00:18:43,000 --> 00:18:48,000
And we can use them to interact with our users or to automate different types of workflows.

207
00:18:48,000 --> 00:18:54,000
One way we can interact with our application or with our bot is using a slash command.

208
00:18:54,000 --> 00:19:02,000
And when we submit a slash command to Slack, it's going to cause a payload to be sent from Slack to our command webhook.

209
00:19:02,000 --> 00:19:06,000
And then we can process the command and return a response.

210
00:19:06,000 --> 00:19:16,000
So going back to this command, by clicking this send button, we're going to be causing Slack to send an HTTP request to this webhook URL.

211
00:19:16,000 --> 00:19:21,000
And the request is going to be a POST request. And the body is all form-encoded parameters.

212
00:19:21,000 --> 00:19:25,000
But really, a lot of the data there is metadata that we don't care about.

213
00:19:25,000 --> 00:19:33,000
The things that we care about for this application are the command and the text field.

214
00:19:33,000 --> 00:19:38,000
So for our MVP, we're going to create a bot that responds to the slash observer command.

215
00:19:38,000 --> 00:19:41,000
And this command is going to handle three different subcommands.

216
00:19:41,000 --> 00:19:51,000
If we do slash observer time, it's going to give the current time, slash observer date, current date, and then slash observer echo and some text.

217
00:19:51,000 --> 00:19:54,000
It's going to return that text to our Slack instance.

218
00:19:54,000 --> 00:19:59,000
So for our first attempt, let's keep things simple. We're going to inline all of our command handlers.

219
00:19:59,000 --> 00:20:02,000
So we'll start with some flask boilerplate to handle a new request.

220
00:20:02,000 --> 00:20:06,000
We're going to parse the request body that we saw a little bit earlier.

221
00:20:06,000 --> 00:20:12,000
And now we can write up handler code for each of our slash commands that we're going to handle, and we're done.

222
00:20:12,000 --> 00:20:14,000
I think this is a really good start.

223
00:20:14,000 --> 00:20:21,000
By inlining our initial solution, we can get up and running really quickly and start iterating on a better product.

224
00:20:21,000 --> 00:20:29,000
But as our program grows and as we start to handle more commands or if the logic in these command handlers gets more complex,

225
00:20:29,000 --> 00:20:33,000
you can start to see that this inline approach, it's going to get a little bit more complicated.

226
00:20:33,000 --> 00:20:41,000
So if we ever find ourselves writing a series of complex if-else conditionals, it indicates that there might be a better way of doing things.

227
00:20:41,000 --> 00:20:45,000
And just because there is a better way of doing things doesn't mean we have to go out and refactor.

228
00:20:45,000 --> 00:20:50,000
It's just something we have to keep in the back of our mind as our program scope grows.

229
00:20:50,000 --> 00:20:56,000
I actually gave a talk about this called if statements are a cold smell at PyCon, so check that out if you want to learn more.

230
00:20:56,000 --> 00:21:04,000
But since this talk is about the observer pattern, we're going to refactor our implementation to use a decorator-based event emitter.

231
00:21:04,000 --> 00:21:11,000
And so before we do that, like, let's make sure that the observer pattern is the one we actually want to use.

232
00:21:11,000 --> 00:21:16,000
So first of all, we see that one-to-many relationship. That's the big key. Hope that's coming across.

233
00:21:16,000 --> 00:21:24,000
We have one slash command, many different command handlers, and we want to register handlers for a particular command.

234
00:21:24,000 --> 00:21:30,000
And for our specific use case, we only need to register commands. We don't really care too much about unregistering.

235
00:21:30,000 --> 00:21:38,000
And another business rule I want to add to this implementation is that each command is going to have one and only one handler function.

236
00:21:38,000 --> 00:21:45,000
And finally, when a command is received, we want its handler function to be executed.

237
00:21:45,000 --> 00:21:48,000
So let's start with that flask boilerplate from before.

238
00:21:48,000 --> 00:21:55,000
The first refactor we're going to do is we're going to move each of those command handlers into its own function.

239
00:21:55,000 --> 00:22:05,000
Next, we're going to create an instance of the event emitter, and we're going to use a decorator to register different handlers for different commands.

240
00:22:05,000 --> 00:22:13,000
And then finally, we have to write some code in terms of parsing the request and emitting an event, so just connecting some dots here.

241
00:22:13,000 --> 00:22:19,000
And I do want folks to notice that we have a default command inside of the emitter emit event.

242
00:22:19,000 --> 00:22:26,000
And so what this does is if we enter in a command that's not inside of any of those handlers, it's going to improve our user interface.

243
00:22:26,000 --> 00:22:31,000
It's going to be returning an unknown command message to Slack.

244
00:22:31,000 --> 00:22:35,000
I'm not going to be walking through this code, but I did want to show everybody the code for my event emitter.

245
00:22:35,000 --> 00:22:40,000
All this is on GitHub, so you can check it out later. So this is something I actually just implemented myself.

246
00:22:40,000 --> 00:22:43,000
I didn't use PyEE. This is not really complex.

247
00:22:43,000 --> 00:22:49,000
I think it's 17 or 20 lines, and it also allowed me to hard code some business rules inside of my class.

248
00:22:49,000 --> 00:22:59,000
So in this case, if we have an event that has more than one handler function, we're going to be raising a custom exception that I made.

249
00:22:59,000 --> 00:23:02,000
So let's take some time. Like, what do we do here?

250
00:23:02,000 --> 00:23:07,000
I'm going to be the first one to admit that the observer pattern implementation is a lot more complex.

251
00:23:07,000 --> 00:23:13,000
But we really need to start thinking about is this increased complexity worth it in a cost benefit analysis?

252
00:23:13,000 --> 00:23:16,000
So what are some of the benefits of using the observer pattern?

253
00:23:16,000 --> 00:23:23,000
So the main benefit we have is that we're able to decouple our event parsing logic with our event handling logic.

254
00:23:23,000 --> 00:23:31,000
And by having these individual handler functions, things are a lot easier to understand, and they're going to be definitely a lot easier to test.

255
00:23:31,000 --> 00:23:37,000
And one big point I did want to note is we implemented the observer pattern with just pure functions.

256
00:23:37,000 --> 00:23:43,000
Traditionally, when we're using this pattern, it's written using an object oriented approach, which I did provide links for.

257
00:23:43,000 --> 00:23:47,000
But I went with functions in this example, since functions are a lot easier to understand.

258
00:23:47,000 --> 00:23:50,000
We have an input. We do something. We have output.

259
00:23:50,000 --> 00:23:53,000
And we don't really have to worry about internal state, which is a lot nicer.

260
00:23:53,000 --> 00:23:59,000
And I think decorators are a great way to register functions at runtime.

261
00:23:59,000 --> 00:24:04,000
And the final thing I want to cover is the observer pattern versus PubSub.

262
00:24:04,000 --> 00:24:08,000
And so you might be familiar with PubSub if you were here for the talk this morning, definitely with Kafka.

263
00:24:08,000 --> 00:24:14,000
And so there are frameworks like Kafka, products like Amazon Kinesis.

264
00:24:14,000 --> 00:24:18,000
And recall when we're doing the observer pattern, this is our high level diagram.

265
00:24:18,000 --> 00:24:23,000
We have one subject. We have many different observers.

266
00:24:23,000 --> 00:24:28,000
This is a diagram for PubSub. For PubSub, we have one publisher and many different subscribers.

267
00:24:28,000 --> 00:24:33,000
And in the middle, there's going to be a message broker, and this is going to handle all of our message routing.

268
00:24:33,000 --> 00:24:40,000
So when the publisher first starts up, connects with the broker, it lets the broker know what topic or what stream it wants to publish to.

269
00:24:40,000 --> 00:24:48,000
And then when observers come online, they're going to register with the broker to receive all of those messages for a particular topic or a particular stream.

270
00:24:48,000 --> 00:24:53,000
And if the publisher changes or performs an action, it's going to send a message to the broker,

271
00:24:53,000 --> 00:24:58,000
which is then going to send the message to all of the subscribers for that particular topic.

272
00:24:58,000 --> 00:25:03,000
And also note that PubSub, it's going to allow us to have many different publishers.

273
00:25:03,000 --> 00:25:08,000
The broker is really responsible for handling all the complexity related to the message bus.

274
00:25:08,000 --> 00:25:14,000
This is a little bit more complex, but underneath all of it, it's really just the observer pattern.

275
00:25:14,000 --> 00:25:17,000
So let's recap.

276
00:25:17,000 --> 00:25:24,000
The observer pattern is a design pattern that defines a one-to-many dependency between our objects.

277
00:25:24,000 --> 00:25:30,000
If one object changes or performs an action, all of its dependencies are going to be notified.

278
00:25:30,000 --> 00:25:34,000
We'll walk through various open source implementations of the observer pattern.

279
00:25:34,000 --> 00:25:41,000
And the main takeaway I want people to have for this talk is, next time you see a pattern in a particular library, a framework, or a language,

280
00:25:41,000 --> 00:25:46,000
figure out why you like it, take a look at the underlying implementation, find out what's going on,

281
00:25:46,000 --> 00:25:52,000
chances are you're going to find a tried and tested design pattern that's going to make this particular tool easier to work with.

282
00:25:52,000 --> 00:25:59,000
And learning about all these different patterns and learning about their trade-offs is going to help us write better code on an everyday basis.

283
00:25:59,000 --> 00:26:02,000
And so these are all the resources I used to come up with this talk.

284
00:26:02,000 --> 00:26:06,000
If you're new to design patterns, I really recommend the first book. It's called Head-First Design Patterns.

285
00:26:06,000 --> 00:26:13,000
It's a really great introduction. They have like pictures. They explain things in a great way. Love that book.

286
00:26:13,000 --> 00:26:18,000
That's it for me. Thanks so much for your time. But before I go, I do want to give a shout out to Chicago Python.

287
00:26:18,000 --> 00:26:24,000
Would not be where I am without that fantastic organization. Thanks for your time. My name is Oli Sivji. I'll take your questions.

288
00:26:32,000 --> 00:26:36,000
No questions? All right. Yes?

289
00:26:36,000 --> 00:26:49,000
So the question was, is Pub-Sub truly an observer pattern, since it's not really a one-to-many, but it's a many-to-many?

290
00:26:49,000 --> 00:26:55,000
I sort of think the one-to-many is more like, it's the many that really matters, not sort of the one.

291
00:26:55,000 --> 00:27:01,000
And so I would sort of say it's not technically an observer pattern, but it has a lot of the same types of characteristics.

292
00:27:01,000 --> 00:27:06,000
Anybody else? All right. I'm going to be with you after. Go ahead.

293
00:27:32,000 --> 00:27:40,000
So the question was, since Pub-Sub is across a distributed architecture, is the observer pattern in the broker?

294
00:27:40,000 --> 00:27:45,000
I would say yes. It's really more of a higher-level way of looking at it.

295
00:27:45,000 --> 00:27:50,000
I wouldn't say Pub-Sub is equal to the observer pattern, but it has a lot of the same characteristics.

296
00:27:50,000 --> 00:27:55,000
And knowing about the observer pattern is going to make understanding Pub-Sub a little bit easier.

297
00:27:56,000 --> 00:28:03,000
Anybody else? All right. I'm going to be at the after party, so if you have any questions, please find me after.

298
00:28:03,000 --> 00:28:07,000
Also, Jasper Health is hiring. Come find me. Thanks so much.

