1
00:00:00,000 --> 00:00:13,800
Yesterday I almost died on my way here, and I'm saying that with a smile because obviously

2
00:00:13,800 --> 00:00:17,600
I didn't die, otherwise I wouldn't be here.

3
00:00:17,600 --> 00:00:20,600
And it's not a figure of speech.

4
00:00:20,600 --> 00:00:27,160
Before going to the conference, I was actually coming down the streets and while I was crossing

5
00:00:27,160 --> 00:00:36,080
the 7th street on my way to Lidlberg, at the traffic lights, a car slowed down but didn't

6
00:00:36,080 --> 00:00:40,640
stop exactly at the traffic light, and so it hit me a little bit.

7
00:00:40,640 --> 00:00:48,000
So I fell with my shoulder on the hood of the car, but thankfully, all good, all good,

8
00:00:48,000 --> 00:00:51,080
I'm fine, I'm here.

9
00:00:51,080 --> 00:00:55,840
But as you can imagine, I'm very glad to be here.

10
00:00:55,960 --> 00:01:02,840
I'm very glad to be on that stage, I'm very glad to be in person for one of the first

11
00:01:02,840 --> 00:01:10,640
Pi Texas in person since the COVID, and I'm really thrilled to be able to share what I

12
00:01:10,640 --> 00:01:15,680
want to present to you today on this stage to all of you.

13
00:01:15,680 --> 00:01:24,480
I'm David Melamed, and today I want to talk about a topic that is really close to my heart.

14
00:01:24,480 --> 00:01:33,280
About a year and a half ago, despite a well-paying job at Cisco, a wife and four kids, I decided

15
00:01:33,280 --> 00:01:38,680
to take one of these life-changing decisions.

16
00:01:38,680 --> 00:01:46,200
I quit my job and I decided to open a startup with four other friends.

17
00:01:46,200 --> 00:01:53,600
The reason for that is that I couldn't stand anymore the pain of working with security

18
00:01:53,600 --> 00:01:57,480
as a developer.

19
00:01:57,480 --> 00:02:03,400
You probably also experienced that, but security is hard.

20
00:02:03,400 --> 00:02:09,760
Security is overwhelming, and a lot of the tools that currently are available for everyone

21
00:02:09,760 --> 00:02:13,520
to use are really not dev-friendly.

22
00:02:13,520 --> 00:02:18,400
I don't want to see thousands of findings when I run some SaaS tool.

23
00:02:18,400 --> 00:02:21,720
I don't have anything to do with that.

24
00:02:21,720 --> 00:02:27,760
I don't want to spend my time thinking of, okay, how do I fix all those things?

25
00:02:27,760 --> 00:02:29,160
I want something to be easy.

26
00:02:29,160 --> 00:02:30,760
I want security to be easy.

27
00:02:30,760 --> 00:02:34,680
I don't want it to be a tax.

28
00:02:34,680 --> 00:02:40,920
And so I started to think, how can I achieve that?

29
00:02:40,920 --> 00:02:47,600
First of all, when I'm looking online for security checks and security checklists, I'm

30
00:02:47,680 --> 00:02:52,120
seeing lists that are very, very long.

31
00:02:52,120 --> 00:02:54,360
But where should I start?

32
00:02:54,360 --> 00:03:00,080
And so we came up together with this approach of minimum viable security.

33
00:03:00,080 --> 00:03:01,320
With what?

34
00:03:01,320 --> 00:03:02,320
Minimum security?

35
00:03:02,320 --> 00:03:06,040
How those two words can work in the same sentence, right?

36
00:03:06,040 --> 00:03:08,840
This is probably what you're asking yourself.

37
00:03:08,840 --> 00:03:09,840
Minimum security?

38
00:03:09,840 --> 00:03:11,800
I mean, come on.

39
00:03:11,800 --> 00:03:16,400
When you're thinking about security, you're thinking maximum security, right?

40
00:03:16,440 --> 00:03:18,320
Everyone wants to be secure.

41
00:03:18,320 --> 00:03:21,600
Everyone wants to live in a fortress, right?

42
00:03:21,600 --> 00:03:24,360
No one wants to be attacked.

43
00:03:24,360 --> 00:03:30,640
So I hope everyone does, right?

44
00:03:30,640 --> 00:03:34,920
Yes, sure.

45
00:03:34,920 --> 00:03:40,960
But you probably don't want burglars to come and break into your house, right?

46
00:03:40,960 --> 00:03:44,960
That's not even a fortress, right?

47
00:03:44,960 --> 00:03:52,160
Okay, okay, that's great.

48
00:03:52,160 --> 00:03:54,520
And I'm fine with that.

49
00:03:54,520 --> 00:03:58,600
I think that we should all start with minimum viable security.

50
00:03:58,600 --> 00:04:00,440
Because what does it mean?

51
00:04:00,440 --> 00:04:06,600
So minimum security means that, well, you don't want to start with a list of 100 different

52
00:04:06,600 --> 00:04:07,600
items.

53
00:04:07,600 --> 00:04:09,240
That's too much.

54
00:04:09,240 --> 00:04:13,160
What you want is to understand what is critical and what is not.

55
00:04:13,160 --> 00:04:19,360
And like for MVP, when you want to start with your first product, you're looking for the

56
00:04:19,360 --> 00:04:26,840
minimum set of features that you want to define and to work on and to implement in order to

57
00:04:26,840 --> 00:04:32,280
release your product the same way as minimal viable security.

58
00:04:32,280 --> 00:04:39,720
You want to be able to set your minimal set of security controls that you want to focus

59
00:04:39,720 --> 00:04:44,160
on in order not to be embarrassed when you're releasing your MVP.

60
00:04:44,160 --> 00:04:48,640
And that's why it's not just minimum security, it's minimum viable security.

61
00:04:48,640 --> 00:04:51,400
You want it to be viable.

62
00:04:51,400 --> 00:04:54,240
And so how do you get to that?

63
00:04:54,240 --> 00:04:56,520
How do you find MVS?

64
00:04:56,520 --> 00:04:58,120
This is what I want to show you today.

65
00:04:58,120 --> 00:05:06,240
How you can define your own MVS for a simple Python application.

66
00:05:06,320 --> 00:05:11,720
So this is an example of a list, and probably we could debate whether or not some items

67
00:05:11,720 --> 00:05:13,760
should be there or not.

68
00:05:13,760 --> 00:05:17,760
But let's go over all the different areas because there are a lot of areas.

69
00:05:17,760 --> 00:05:24,920
It's not only the code, of course, but in the code, you should look for code vulnerability,

70
00:05:24,920 --> 00:05:25,920
of course.

71
00:05:25,920 --> 00:05:28,280
You don't want to start there.

72
00:05:28,280 --> 00:05:32,560
If you have secrets, you probably also want to make sure that you don't have any hardcoded

73
00:05:32,560 --> 00:05:34,000
ones.

74
00:05:34,000 --> 00:05:40,080
If you have libraries, and in Python you probably have a lot of libraries in your requirements.txt,

75
00:05:40,080 --> 00:05:46,960
you also want to make sure that you don't have any vulnerable dependencies in your project.

76
00:05:46,960 --> 00:05:48,320
And that was the code.

77
00:05:48,320 --> 00:05:49,920
What about the infra?

78
00:05:49,920 --> 00:05:54,240
You're running in the cloud because you're building a product for the cloud.

79
00:05:54,240 --> 00:05:57,560
And so the first thing you want to make sure is that you don't misconfigure your cloud

80
00:05:57,560 --> 00:05:58,560
infrastructure.

81
00:05:58,560 --> 00:05:59,560
Right?

82
00:05:59,560 --> 00:06:04,480
If you're building on Amazon, make sure you don't have any S3 bucket that is open to the

83
00:06:04,480 --> 00:06:05,480
world.

84
00:06:05,480 --> 00:06:06,480
Right?

85
00:06:06,480 --> 00:06:12,240
You also want to make sure that you have a way to access remotely your account.

86
00:06:12,240 --> 00:06:19,080
And that the account is set up and bootstrapped in a more secure way.

87
00:06:19,080 --> 00:06:22,000
Now we talked about the code, we talked about the infra.

88
00:06:22,000 --> 00:06:26,400
But now that you deploy your application, you also want to check out your runtime.

89
00:06:26,400 --> 00:06:28,120
It's running on the cloud.

90
00:06:28,120 --> 00:06:30,960
So what can you check there?

91
00:06:30,960 --> 00:06:33,900
One of the most popular tools is pentesting.

92
00:06:33,900 --> 00:06:36,320
So you want to make sure you don't have a security hole.

93
00:06:36,320 --> 00:06:38,680
SQL injections, things like that.

94
00:06:38,680 --> 00:06:40,720
You need pentesting.

95
00:06:40,720 --> 00:06:42,780
But you also have APIs.

96
00:06:42,780 --> 00:06:45,960
So not only your frontend URLs, you want to check them.

97
00:06:45,960 --> 00:06:49,540
You also want to check your API endpoints.

98
00:06:49,540 --> 00:06:54,320
And then you have your pipeline because the way you're actually pushing your code to production,

99
00:06:54,320 --> 00:06:56,360
you have a whole CI-CD pipeline.

100
00:06:56,360 --> 00:06:59,380
You have, first of all, your SCM, the way you store your code.

101
00:06:59,380 --> 00:07:02,680
And you also have your whole CI-CD pipeline.

102
00:07:02,680 --> 00:07:06,360
And so there, you want to check a couple of things.

103
00:07:06,360 --> 00:07:11,320
First of all, you want to check the CI-CD itself, that it's set up in a secure way.

104
00:07:11,320 --> 00:07:16,560
For example, if you're using GitHub Actions, Jenkins, make sure that you don't leave it

105
00:07:16,560 --> 00:07:17,560
open.

106
00:07:17,560 --> 00:07:23,920
And for the SCM for GitHub, make sure, for example, I know your setup MFA.

107
00:07:24,880 --> 00:07:30,560
Also, because you're working with containers, like almost everyone today, you also want

108
00:07:30,560 --> 00:07:32,920
to make sure that your base image is secure.

109
00:07:32,920 --> 00:07:36,200
So also look there for vulnerabilities.

110
00:07:36,200 --> 00:07:37,440
But that's not it.

111
00:07:37,440 --> 00:07:40,920
It's minimal, but still, you have a couple of other things.

112
00:07:40,920 --> 00:07:42,920
Your data.

113
00:07:42,920 --> 00:07:45,720
Your customer data, your user data are really important.

114
00:07:45,720 --> 00:07:47,160
You want to make sure that they're encrypted.

115
00:07:47,160 --> 00:07:52,520
You don't want to see a GitHub token, for example, lying around in plain text in your

116
00:07:52,520 --> 00:07:53,520
database.

117
00:07:53,520 --> 00:07:54,800
Multi-tenancy.

118
00:07:54,800 --> 00:07:58,360
Most of the SaaS platforms today are multi-tenant.

119
00:07:58,360 --> 00:08:04,480
You want to make sure that there's no way you can read data from one end to the other.

120
00:08:04,480 --> 00:08:09,080
Otherwise, you will probably be very embarrassed.

121
00:08:09,080 --> 00:08:10,080
What about third parties?

122
00:08:10,080 --> 00:08:14,720
You have a lot of services today that are connecting to your product.

123
00:08:14,720 --> 00:08:21,320
It could be things like GitHub, if you have a GitHub integrations, it can be Datadog for

124
00:08:21,520 --> 00:08:24,840
analytics, it can be Epsilon if you have serverless.

125
00:08:24,840 --> 00:08:28,960
There's a lot of services that are connecting to your product.

126
00:08:28,960 --> 00:08:30,840
You need to make sure that they're secure.

127
00:08:30,840 --> 00:08:33,520
Otherwise, someone can take over your account there.

128
00:08:33,520 --> 00:08:36,680
And maybe there's some data that are sensitive.

129
00:08:36,680 --> 00:08:43,920
Now, we talked a lot about the code, the infra, everything that's very technical.

130
00:08:43,920 --> 00:08:45,880
What about people?

131
00:08:45,880 --> 00:08:52,080
We almost forgot that we had people that are working on the code and on the product.

132
00:08:52,080 --> 00:08:58,800
They're one of the things that is very, very common, but sometimes forgotten, is use password

133
00:08:58,800 --> 00:08:59,800
manager.

134
00:08:59,800 --> 00:09:01,280
Seems like very basic.

135
00:09:01,280 --> 00:09:09,100
But still, how many developers here are saving or manipulating passwords in plain text, storing

136
00:09:09,100 --> 00:09:13,880
them in their local laptop saying that, well, that's fine, or in some notepad?

137
00:09:13,880 --> 00:09:14,880
No?

138
00:09:14,880 --> 00:09:15,880
Anyone?

139
00:09:15,880 --> 00:09:19,040
That's great.

140
00:09:19,040 --> 00:09:22,440
So you should start with a password manager.

141
00:09:22,440 --> 00:09:29,920
And if you think that passwords are only, I don't know, username and password for your

142
00:09:29,920 --> 00:09:34,400
accounts, maybe there's more than that, and we'll get to that in a moment.

143
00:09:34,400 --> 00:09:39,200
And finally, there's another area, it's the operations.

144
00:09:39,200 --> 00:09:44,720
How do I make sure that when an employee leaves the company, well, I'm removing

145
00:09:44,720 --> 00:09:49,920
his access to GitHub, I need to manage that.

146
00:09:49,920 --> 00:09:55,520
And also, there will probably be some security incident in the future, and so I need to make

147
00:09:55,520 --> 00:10:00,280
sure that I have some process in place, because that's something that is very stressful, and

148
00:10:00,280 --> 00:10:04,640
I don't want to add to that if I don't have a process in place already.

149
00:10:04,640 --> 00:10:10,120
So these are the different areas that are related to product security, and what I want

150
00:10:10,960 --> 00:10:17,360
is to focus on a couple of ones, the ones that were actually highlighted.

151
00:10:17,360 --> 00:10:24,360
So I'll go really quickly through each of them, and I'll give an example of the tool

152
00:10:24,360 --> 00:10:25,360
that we'll use.

153
00:10:25,360 --> 00:10:29,280
All the tools that I will demonstrate here are open source, and you'll see at the end

154
00:10:29,280 --> 00:10:34,700
a demo that everything will be integrated into the CI-CD, and so you can really clone

155
00:10:34,740 --> 00:10:40,740
the code that I will give at the end, and you can have the start of your minimal viable

156
00:10:40,740 --> 00:10:44,160
security today.

157
00:10:44,160 --> 00:10:47,340
So the first area is called vulnerability.

158
00:10:47,340 --> 00:10:51,700
We want to make sure that we don't have any vulnerability in our code.

159
00:10:51,700 --> 00:10:58,820
For that, the most popular tool is SAS, static code analysis, looking for specific patterns

160
00:10:58,820 --> 00:10:59,820
in the code.

161
00:11:00,060 --> 00:11:01,060
We'll use Bandit.

162
00:11:01,060 --> 00:11:09,260
Bandit is an open source linter for Python, and you have 35 rules that are already built

163
00:11:09,260 --> 00:11:11,860
in the tool.

164
00:11:11,860 --> 00:11:18,220
Then you have the secrets, but that will use a great tool that's called GitLix that is

165
00:11:18,220 --> 00:11:28,620
supporting a lot of different regexes of well-known patterns for secrets, for social networks,

166
00:11:28,620 --> 00:11:34,020
for AWS credentials, SSH keys, API keys, and so on.

167
00:11:34,020 --> 00:11:39,940
And the advantage is that it's also looking in Git history, so that even if you removed,

168
00:11:39,940 --> 00:11:46,780
you deleted from your repo, it actually looks back in the history and makes sure that you

169
00:11:46,780 --> 00:11:50,420
remove it completely.

170
00:11:50,420 --> 00:11:53,060
For dependencies, we'll use Safely.

171
00:11:53,060 --> 00:11:58,060
Safely is an open source slash commercial product.

172
00:11:58,060 --> 00:12:01,860
If you use the open source version, the updates are only monthly.

173
00:12:01,860 --> 00:12:05,820
If you use the commercial, you get updates all the time.

174
00:12:05,820 --> 00:12:10,060
But it's very, very easily integrated into the CI-CD.

175
00:12:10,060 --> 00:12:16,060
And we'll use that to check if we have vulnerable libraries in our project.

176
00:12:16,060 --> 00:12:21,340
Next, we'll also try to deploy our project in the cloud.

177
00:12:21,340 --> 00:12:26,380
And for that, we want to make sure that we don't have any misconfiguration in our infrastructure.

178
00:12:26,380 --> 00:12:31,180
We'll use infrastructure as code, Terraform, in order to deploy and to create some buckets

179
00:12:31,180 --> 00:12:32,180
in S3.

180
00:12:32,180 --> 00:12:38,300
And we want to make sure that there is no vulnerability in our code.

181
00:12:38,300 --> 00:12:44,420
And for that, we'll use a tool that was written by Checkmarks called Kix, open source, that

182
00:12:44,420 --> 00:12:53,620
has support for a lot of different languages, and right now includes 2,000 checks.

183
00:12:53,620 --> 00:12:55,860
Then we'll use some pentesting.

184
00:12:55,860 --> 00:13:01,060
And for that, there's a great tool that is open source by OWASP called Zap.

185
00:13:01,060 --> 00:13:10,040
It's both a web application scanner, looking for very popular top 10 OWASP vulnerabilities.

186
00:13:10,040 --> 00:13:18,540
And also, it can check for APIs when you're providing some open API specification or some

187
00:13:18,540 --> 00:13:20,900
swagger definitions.

188
00:13:20,900 --> 00:13:27,480
And for that, we'll use an interesting setup, because we will build the container of our

189
00:13:27,480 --> 00:13:34,680
Python application, and then we'll run Zap against this image.

190
00:13:34,680 --> 00:13:41,060
Talking about Docker image, we also use Trivi in order to check if there are some issues

191
00:13:41,060 --> 00:13:47,460
in the Docker images, the base image that we'll use.

192
00:13:47,460 --> 00:13:55,220
Then we also want to check that in that specific case on GitHub, we don't have any user that

193
00:13:55,220 --> 00:14:03,460
don't use MFA, because in that case, maybe the account is vulnerable and can be attacked

194
00:14:03,460 --> 00:14:06,000
by someone.

195
00:14:06,000 --> 00:14:11,140
For that, there's not really a tool, and that's why in a few lines of code, we'll build our

196
00:14:11,140 --> 00:14:14,500
own tool.

197
00:14:14,500 --> 00:14:17,520
And at the end, a word about password manager.

198
00:14:17,520 --> 00:14:22,080
So you probably all use password manager, but how many of you are also using the command

199
00:14:22,080 --> 00:14:25,140
line for the password manager?

200
00:14:25,140 --> 00:14:31,240
So here, I want to show you how to use one password CLI, which is a great way in your

201
00:14:31,240 --> 00:14:36,980
bash profile to load some secrets into memory so that you can use them for a lot of different

202
00:14:36,980 --> 00:14:42,580
things that you need without having to store them in plain text in your bash profile itself.

203
00:14:42,580 --> 00:14:48,020
In the same way, if you're using Amazon keys, you don't want them to be stored in plain

204
00:14:48,020 --> 00:14:52,340
text in your laptop in AWS credentials, for example.

205
00:14:52,340 --> 00:14:54,320
That's the way they recommend.

206
00:14:54,320 --> 00:15:00,520
You want to use AWS Vault, which allows you to actually store them in an encrypted way

207
00:15:00,520 --> 00:15:02,380
in your own laptop.

208
00:15:02,380 --> 00:15:06,500
So I will just show you how to do that.

209
00:15:06,500 --> 00:15:12,340
Terminal.

210
00:15:12,340 --> 00:15:17,740
First example is a dummy password that I saved in one password.

211
00:15:17,740 --> 00:15:18,740
And by...

212
00:15:18,740 --> 00:15:27,740
No, it's not logged in anymore.

213
00:15:27,740 --> 00:15:43,060
Okay.

214
00:15:43,060 --> 00:15:50,140
So now I'm logging the first time on one password, and then I can use the OP command line in

215
00:15:50,140 --> 00:15:51,800
order to retrieve some password.

216
00:15:51,800 --> 00:15:56,760
The nice thing is actually to save that into your bash profile so that you really never

217
00:15:56,760 --> 00:16:01,880
see the value of the password.

218
00:16:01,880 --> 00:16:09,080
The second example is using AWS Vault, and this is an example of how I'm using it.

219
00:16:09,080 --> 00:16:16,820
So I don't have any secrets stored on my machine.

220
00:16:16,820 --> 00:16:22,860
Everything is actually encrypted, and I just need to use AWS Vault exec at the beginning

221
00:16:23,000 --> 00:16:30,280
in order to retrieve my policies and run any command for Amazon.

222
00:16:30,280 --> 00:16:36,480
And now let's talk about the different tools that I want to show you inside the application.

223
00:16:36,480 --> 00:16:44,740
So these are different tools I talked about, and now we'll see them in action.

224
00:16:44,740 --> 00:16:51,320
So the demo will be a very simple, fast API-based application that displays move information.

225
00:16:51,320 --> 00:16:55,780
The actors that are playing in the movie, for that we'll use a simple data persistence

226
00:16:55,780 --> 00:16:56,780
using SQLite.

227
00:16:56,780 --> 00:17:02,360
The SEM will be GitHub, the CI system will be GitHub Action, and our goal is to integrate

228
00:17:02,360 --> 00:17:06,860
the seven tools that I showed you in a few minutes.

229
00:17:06,860 --> 00:17:10,140
This is the demo repository if you want to check that out afterwards.

230
00:17:10,140 --> 00:17:11,140
It's public.

231
00:17:11,140 --> 00:17:13,980
You can clone it, fork it, whatever you want.

232
00:17:13,980 --> 00:17:18,820
First, let's see the application in practice.

233
00:17:18,820 --> 00:17:22,880
So it's a very simple application.

234
00:17:22,880 --> 00:17:28,680
I'm just starting it using UviCorn.

235
00:17:28,680 --> 00:17:35,440
And now, yeah, these are the number of movies in the database.

236
00:17:35,440 --> 00:17:39,800
I want to search for a specific one.

237
00:17:39,800 --> 00:17:41,200
Let's search for Titanic.

238
00:17:41,200 --> 00:17:44,040
Okay, there are three versions of the movie.

239
00:17:44,040 --> 00:17:48,160
I want the one from 1997.

240
00:17:48,160 --> 00:17:52,780
So let's see the actors in the movie.

241
00:18:06,780 --> 00:18:13,980
Okay, so movie, store, and then I can see the different actors in the movie.

242
00:18:13,980 --> 00:18:16,100
Very simple application, right?

243
00:18:16,100 --> 00:18:21,780
Now let's see the code of this application.

244
00:18:21,780 --> 00:18:27,500
We'll see that it's very simple.

245
00:18:27,500 --> 00:18:32,540
So we have a few endpoints and a bunch of SQL queries.

246
00:18:32,540 --> 00:18:37,220
Now I want to show you, oh, this is the Dockerfile.

247
00:18:37,220 --> 00:18:42,180
It has some AWS credentials because the guy who actually wrote that didn't know that it's

248
00:18:42,180 --> 00:18:47,540
not the best way to pass environment variables to get access to Amazon.

249
00:18:47,540 --> 00:18:53,180
And so what we'll focus for a few minutes is the way I configured the GitHub Action

250
00:18:53,180 --> 00:18:57,700
workflow, which includes all the seven tools.

251
00:18:57,700 --> 00:19:00,580
Let's see how it works.

252
00:19:00,580 --> 00:19:03,220
So basically you have a couple of jobs here.

253
00:19:03,220 --> 00:19:08,220
You have the SAS one, secret one, DAST for API security.

254
00:19:08,260 --> 00:19:13,220
You have infrastructure, SCA for dependencies, the container, and MFA.

255
00:19:13,220 --> 00:19:15,660
These are all the jobs that I want.

256
00:19:15,660 --> 00:19:19,220
Now I can see here static vulnerability scanner.

257
00:19:19,220 --> 00:19:25,580
I'm using an action, GitHub action that someone actually already wrote, and it's encapsulating

258
00:19:25,580 --> 00:19:28,660
the Bandit tool.

259
00:19:28,660 --> 00:19:30,620
And this is the way I'm running it.

260
00:19:30,620 --> 00:19:36,900
And at the end, I want to upload the artifact, the results, to GitHub itself so that I will

261
00:19:36,980 --> 00:19:39,740
be able to review the results.

262
00:19:39,740 --> 00:19:42,300
And then I have the secret one.

263
00:19:42,300 --> 00:19:44,980
The secret is using Gitleaks.

264
00:19:44,980 --> 00:19:51,020
There's also a public action for that, so it's really easy to integrate.

265
00:19:51,020 --> 00:19:58,060
The DAST one is more complicated because, as I said, I built the image before.

266
00:19:58,060 --> 00:20:04,140
Here I'm making sure that it's running before I run my action.

267
00:20:04,140 --> 00:20:06,860
So it runs as a service.

268
00:20:06,860 --> 00:20:17,460
And then, using Zap, I can go and use the Zap API scan, which will trigger the scan

269
00:20:17,460 --> 00:20:20,140
against this image.

270
00:20:20,140 --> 00:20:25,060
And for that, it will use the OpenAPI definition.

271
00:20:25,060 --> 00:20:31,980
The OpenAPI is actually something like that that is provided by FastAPI, and it's defining

272
00:20:31,980 --> 00:20:36,540
all the different endpoints and the parameters.

273
00:20:36,540 --> 00:20:38,460
Then I have the infra.

274
00:20:38,460 --> 00:20:41,300
For the infra, I'm running Kix.

275
00:20:41,300 --> 00:20:46,220
Also here, there's a Kix GitHub action that is already implemented.

276
00:20:46,220 --> 00:20:51,500
And I put my code into a Terraform folder.

277
00:20:51,500 --> 00:20:53,540
And here you can see that it's very basic.

278
00:20:53,540 --> 00:21:04,220
It's just a simple bucket in S3 that I want to create and a very simple DynamoDB table.

279
00:21:04,220 --> 00:21:07,560
Now I have SCA, which is Dependency Check.

280
00:21:07,560 --> 00:21:13,640
For that, there's no available GitHub action, so I'm just running a script myself, installing

281
00:21:13,640 --> 00:21:22,500
it with pip, and then I'm running the command myself, looking to scan the requirements.txt.

282
00:21:22,500 --> 00:21:28,980
For the containers, I'm building the container myself, and then I'm using the action that

283
00:21:28,980 --> 00:21:33,660
is provided by Trivia itself in order to check if there's some issue.

284
00:21:33,660 --> 00:21:36,540
And at the end, MFA, I actually built it myself.

285
00:21:36,540 --> 00:21:38,100
I used three lines.

286
00:21:38,100 --> 00:21:43,460
If you excuse me here, it's in Node.js, though it's a Python conference, because here the

287
00:21:43,460 --> 00:21:47,300
API is actually easier to use.

288
00:21:48,180 --> 00:21:54,100
What I'm doing here is that I'm listing all my users, all the members of this organization,

289
00:21:54,100 --> 00:22:00,940
of my organization, and I'm filtering the ones that don't have MFA enabled.

290
00:22:00,940 --> 00:22:08,160
And I'm going over all of them, and if there's at least one, then I want this to fail.

291
00:22:08,160 --> 00:22:11,360
So I'm returning an exit code of one.

292
00:22:11,360 --> 00:22:15,780
Let's see all of this in practice into GitHub.

293
00:22:15,780 --> 00:22:21,300
So I uploaded my repository here, and here you can see an example of a pull request.

294
00:22:21,300 --> 00:22:27,340
As you can see, everything is failing because I have a lot of issues in this repo.

295
00:22:27,340 --> 00:22:31,420
And if I'm looking at the details, I can see a few things.

296
00:22:31,420 --> 00:22:38,220
So first of all, I can see that some of the tools are returning here their findings.

297
00:22:38,220 --> 00:22:42,820
Some are uploading their artifact that I showed.

298
00:22:42,820 --> 00:23:02,340
So I can, for example, open this one, and opening the zip here, and I can see the results

299
00:23:02,340 --> 00:23:03,340
of the file.

300
00:23:03,340 --> 00:23:12,780
These are all of the dependencies that were found in my code, they're actually SQL injections.

301
00:23:12,780 --> 00:23:17,540
For some of them, actually, the results, it's inside the action.

302
00:23:17,540 --> 00:23:21,460
So for all of them, I can see the logs.

303
00:23:21,460 --> 00:23:27,900
And here I can see that I have some issues with my infrastructure.

304
00:23:27,900 --> 00:23:32,340
For the container also, it's inside the results here.

305
00:23:32,340 --> 00:23:38,900
So I can see that I have actually two issues with my Python.

306
00:23:38,900 --> 00:23:46,380
And so, as you can see, very easily, I can integrate a couple of tools, and that's the

307
00:23:46,380 --> 00:23:52,300
basics of my MVS, of my security, because here I have a lot of different things that

308
00:23:52,300 --> 00:23:59,940
are checked against a very simple code, and very easily, I can get them into my CI CD.

309
00:23:59,940 --> 00:24:06,220
So of course, here, as you can imagine, the developer experience is not great, because

310
00:24:06,220 --> 00:24:13,380
you have some of the tools that are returning the results inside the logs.

311
00:24:13,380 --> 00:24:19,180
Some others are returning as part of some artifact that you need to read.

312
00:24:19,180 --> 00:24:24,020
Some others are just maybe not returning directly this, and you didn't know the UI.

313
00:24:24,020 --> 00:24:25,420
The experience is not great.

314
00:24:25,420 --> 00:24:29,780
And what you would like to is to have some kind of unified experience, but one single

315
00:24:29,780 --> 00:24:30,780
experience.

316
00:24:30,780 --> 00:24:35,300
For example, what would be great if all the findings were returned inside the PR itself,

317
00:24:35,300 --> 00:24:37,940
as PR commands?

318
00:24:37,940 --> 00:24:42,540
And so this is basically what we did at JIT.

319
00:24:42,540 --> 00:24:46,460
We tried to take this a step further.

320
00:24:46,460 --> 00:24:55,580
And so, as you can see here, we wanted to be really dev native, and so every tool is

321
00:24:55,580 --> 00:25:04,500
now returning the results inside the PR in one single way, in a very unified way, as

322
00:25:04,500 --> 00:25:05,740
PR commands.

323
00:25:05,740 --> 00:25:11,780
Also, we wanted to manage our own customized MVS plan, not in a spreadsheet, like many,

324
00:25:11,780 --> 00:25:12,780
many folks.

325
00:25:12,780 --> 00:25:19,020
We wanted it to be customizable, wanted to see how the progress is, wanted to make sure

326
00:25:19,020 --> 00:25:25,620
that all the tools that were running are actually running and are configured correctly, because

327
00:25:25,620 --> 00:25:28,740
it's easy to add a tool, but maybe it's misconfigured.

328
00:25:28,740 --> 00:25:33,660
For example, maybe I think that the tool is actually checking for secrets, but maybe misconfigured,

329
00:25:33,660 --> 00:25:36,300
it's not looking at the right folder.

330
00:25:36,300 --> 00:25:41,180
And so everything together, we wanted to get this continuous security platform.

331
00:25:41,180 --> 00:25:44,380
And this is what we did at JIT.

332
00:25:44,380 --> 00:25:49,940
If you're intrigued, but what you just saw, and you want to know more, or you want to

333
00:25:49,940 --> 00:25:53,580
actually test the platform, I have a great news.

334
00:25:53,580 --> 00:25:59,780
Since Friday, we opened the beta to the public, so anyone can enter.

335
00:25:59,780 --> 00:26:02,860
Just need to register at JIT.io.

336
00:26:03,020 --> 00:26:07,180
Thanks for the dev rel guy of Elastic for the QR code idea.

337
00:26:07,180 --> 00:26:09,300
That's a great idea.

338
00:26:09,300 --> 00:26:14,500
If you're inspired by what you saw, and it resonates, and you would like to be part of

339
00:26:14,500 --> 00:26:21,940
this task force that tries to empower the developers with security, then you're welcome

340
00:26:21,940 --> 00:26:23,660
to join us.

341
00:26:23,660 --> 00:26:27,180
And if you have any question, feel free to reach out to me.

342
00:26:27,180 --> 00:26:28,180
My email is here.

343
00:26:28,180 --> 00:26:30,500
I'll be around for the next couple of hours.

344
00:26:30,660 --> 00:26:33,460
I'd be happy to discuss with any one of you.

345
00:26:33,460 --> 00:26:34,940
Thanks again for your attention.

346
00:26:34,940 --> 00:26:38,500
And if you have any question, maybe I have some time for one question.

347
00:26:38,500 --> 00:26:39,500
Sure.

348
00:26:39,500 --> 00:26:40,500
Yeah.

349
00:26:40,500 --> 00:26:41,500
Yes.

350
00:26:41,500 --> 00:27:06,500
Okay, great question.

351
00:27:06,500 --> 00:27:10,860
So what I showed is only the beginning.

352
00:27:10,860 --> 00:27:20,660
It's basically the foundations of best practices, of things that you would need to start in

353
00:27:20,660 --> 00:27:23,380
order to have a product that is secure.

354
00:27:23,380 --> 00:27:25,380
But there are two problems with that.

355
00:27:25,380 --> 00:27:31,340
One is that if you're putting that into practice and you put that into your environment, you

356
00:27:31,340 --> 00:27:33,500
need to make sure it's working all the time.

357
00:27:33,500 --> 00:27:35,460
So you need to operationalize that.

358
00:27:35,460 --> 00:27:37,020
That would be the first thing I would say.

359
00:27:37,020 --> 00:27:41,100
And then it's only the beginning in terms of things that you need to do for security.

360
00:27:41,100 --> 00:27:43,780
There are a lot more items that you need to do.

361
00:27:43,780 --> 00:27:47,820
And so what we also did at JIT is we're providing this plan as a first one.

362
00:27:47,820 --> 00:27:50,180
But of course, we have more advanced plan.

363
00:27:50,180 --> 00:27:56,580
Because maybe afterwards you want to go further, maybe down the road of compliance.

364
00:27:56,580 --> 00:28:02,020
So there you have ISO, SOC 2, all these different norms.

365
00:28:02,020 --> 00:28:03,740
You have the CIS benchmark.

366
00:28:03,740 --> 00:28:09,300
You have a lot of plans that are way more comprehensive in terms of number of items

367
00:28:09,300 --> 00:28:11,260
and things that you need to do.

368
00:28:11,260 --> 00:28:13,860
So it's only the beginning.

369
00:28:13,860 --> 00:28:15,560
I didn't want it to be overwhelming.

370
00:28:15,560 --> 00:28:19,940
But of course, there's a lot more things that you can do in your environment to make sure

371
00:28:19,940 --> 00:28:20,940
everything is secure.

372
00:28:20,940 --> 00:28:21,940
Another question?

373
00:28:21,940 --> 00:28:22,940
Great.

374
00:28:22,940 --> 00:28:23,940
Everything was clear?

375
00:28:23,940 --> 00:28:24,940
Thank you again.

376
00:28:25,420 --> 00:28:26,420
Great.

377
00:28:26,420 --> 00:28:27,420
Everything was clear?

378
00:28:27,420 --> 00:28:29,700
Thanks again.

