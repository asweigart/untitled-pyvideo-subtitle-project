1
00:00:00,000 --> 00:00:00,640
Here we go.

2
00:00:00,640 --> 00:00:02,160
Thank you.

3
00:00:02,160 --> 00:00:05,840
When I rehearsed this, I was planning on saying that, so I guess I won't.

4
00:00:05,840 --> 00:00:09,640
I'm Joshua Cannon, and I'm a build engineer in a buildless lang.

5
00:00:09,640 --> 00:00:11,280
And I want to talk to you guys about build engineering,

6
00:00:11,280 --> 00:00:13,640
especially because we're in Python, and there is no build.

7
00:00:13,640 --> 00:00:15,920
So what the heck do I do all day?

8
00:00:15,920 --> 00:00:17,520
So this presentation is in two parts.

9
00:00:17,520 --> 00:00:19,560
The first part is I'm going to answer these three questions.

10
00:00:19,560 --> 00:00:20,160
Who am I?

11
00:00:20,160 --> 00:00:24,120
What is build engineering in DevX, which is short for developer experience?

12
00:00:24,120 --> 00:00:26,720
It just doesn't fit on the slide.

13
00:00:26,720 --> 00:00:27,800
And why do I care?

14
00:00:27,800 --> 00:00:29,080
Why do you care?

15
00:00:29,120 --> 00:00:31,240
Ooh, maybe even how we get a manager to care.

16
00:00:33,800 --> 00:00:36,040
So that part is pretty static.

17
00:00:36,040 --> 00:00:37,800
The only missing piece of information there.

18
00:00:37,800 --> 00:00:40,760
We're at IBM in the Watson orders division.

19
00:00:40,760 --> 00:00:43,760
So what is build engineering, especially in a buildless lang?

20
00:00:43,760 --> 00:00:47,000
Well, it's the tools and processes for the people

21
00:00:47,000 --> 00:00:48,240
that are building the code.

22
00:00:48,240 --> 00:00:50,940
It's not about how to build the code mechanically.

23
00:00:50,940 --> 00:00:55,880
It's about how you all and myself sit down and build code.

24
00:00:55,880 --> 00:00:57,960
So that's basically the answer.

25
00:00:57,960 --> 00:01:00,880
A build engineer is responsible for these tools and processes

26
00:01:00,880 --> 00:01:03,920
that the developers are using to build code.

27
00:01:03,920 --> 00:01:06,440
And if we're responsible for that, that means

28
00:01:06,440 --> 00:01:10,520
we get to control, to some degree, and are responsible for the developer

29
00:01:10,520 --> 00:01:11,620
experience.

30
00:01:11,620 --> 00:01:16,620
I really liked Brandon's talk this morning on crossing and walking the line,

31
00:01:16,620 --> 00:01:19,800
because we all want to be on the green side when we want to be on the green

32
00:01:19,800 --> 00:01:24,320
side, and yes, sometimes we want to nudge ourselves into the red side.

33
00:01:24,320 --> 00:01:27,720
And that's exactly why someone cares about build engineering

34
00:01:27,720 --> 00:01:30,360
and developer experience, because that's where we want to be

35
00:01:30,360 --> 00:01:31,920
when we want to be there.

36
00:01:31,920 --> 00:01:35,720
The important thing I think of when I think of Brandon's talk,

37
00:01:35,720 --> 00:01:38,080
sometimes you get pushed to the red side.

38
00:01:38,080 --> 00:01:40,680
It's not about you purposefully walking your toe over.

39
00:01:40,680 --> 00:01:45,240
Some things and some people push you, and that's what we don't want.

40
00:01:45,240 --> 00:01:48,720
That's a bad developer experience.

41
00:01:48,720 --> 00:01:50,760
So if those are the answers to my three questions,

42
00:01:50,760 --> 00:01:53,940
it's not a whole lot of color in there, not a whole lot of depth.

43
00:01:53,940 --> 00:01:55,640
So I'm going to answer them with a story.

44
00:01:55,640 --> 00:01:59,520
It's my story getting into and being a build engineer.

45
00:01:59,520 --> 00:02:01,520
So it starts at my last company.

46
00:02:01,520 --> 00:02:04,480
It was my first job out of college.

47
00:02:04,480 --> 00:02:07,600
I was a bright and bushy-tailed engineer.

48
00:02:07,600 --> 00:02:09,760
And I remember early on, I got a PR.

49
00:02:09,760 --> 00:02:11,720
I posted a PR, sorry.

50
00:02:11,720 --> 00:02:14,440
And I got a review from a principal software engineer.

51
00:02:14,440 --> 00:02:16,360
So this is somebody who's important.

52
00:02:16,360 --> 00:02:18,080
Their opinion matters.

53
00:02:18,080 --> 00:02:20,240
Their time is very valuable.

54
00:02:20,240 --> 00:02:21,040
And so I'm ready.

55
00:02:21,040 --> 00:02:24,400
What secrets of the universe do they have for me?

56
00:02:24,440 --> 00:02:26,600
And I open it up, and it's long.

57
00:02:26,600 --> 00:02:28,920
Ooh, ooh, it's long.

58
00:02:28,920 --> 00:02:31,520
And I got eviscerated by this person.

59
00:02:31,520 --> 00:02:33,560
They left stylistic comments.

60
00:02:33,560 --> 00:02:34,560
That's all it was.

61
00:02:34,560 --> 00:02:36,320
Here's where we put parentheses.

62
00:02:36,320 --> 00:02:37,920
Here's where the comma goes.

63
00:02:37,920 --> 00:02:40,040
Here's how we do this and that.

64
00:02:40,040 --> 00:02:44,280
How many of you have gotten a review like that?

65
00:02:44,280 --> 00:02:48,320
That's less than I expected, but more than should be there.

66
00:02:48,320 --> 00:02:50,280
You've written that review.

67
00:02:50,280 --> 00:02:51,760
What should we have done instead?

68
00:02:51,760 --> 00:02:54,840
What should have been in process instead of this principal software

69
00:02:54,840 --> 00:03:00,680
engineer making me just go, oh, god.

70
00:03:00,680 --> 00:03:01,800
We should have used tools.

71
00:03:01,800 --> 00:03:04,240
We should have used black.

72
00:03:04,240 --> 00:03:08,840
What's not seen here is it was a C++ build system, but whatever.

73
00:03:08,840 --> 00:03:13,080
Now, the company did have a sophisticated build system.

74
00:03:13,080 --> 00:03:16,600
It stopped at being able to build the software itself.

75
00:03:16,600 --> 00:03:19,880
And it didn't extend into how people built the software.

76
00:03:19,920 --> 00:03:24,600
I like this picture because it reminds me of coding on a typewriter.

77
00:03:24,600 --> 00:03:29,320
Typewriters are extremely well-designed and sophisticated machines.

78
00:03:29,320 --> 00:03:31,960
They're great at what they do.

79
00:03:31,960 --> 00:03:33,320
We don't code on them.

80
00:03:33,320 --> 00:03:34,520
We have better tools.

81
00:03:34,520 --> 00:03:35,800
We have IDEs.

82
00:03:35,800 --> 00:03:36,800
We have keyboards.

83
00:03:36,800 --> 00:03:39,160
We have red squiggly lines, right?

84
00:03:39,160 --> 00:03:43,200
And so a lot of ways, it felt like coding on a typewriter.

85
00:03:43,200 --> 00:03:47,360
So one of the things I forgot to mention earlier

86
00:03:47,360 --> 00:03:48,760
is that I'm a build engineer.

87
00:03:48,800 --> 00:03:50,960
But one of the things I want to stress is that build engineering

88
00:03:50,960 --> 00:03:52,520
can come from anyone.

89
00:03:52,520 --> 00:03:55,960
We have volunteer fire departments.

90
00:03:55,960 --> 00:03:58,280
And so I got a manager throughout my career

91
00:03:58,280 --> 00:04:01,000
at that company that understood that build engineering could come

92
00:04:01,000 --> 00:04:05,520
from anyone and gave me the space to do build engineering while still

93
00:04:05,520 --> 00:04:07,560
on an applications team.

94
00:04:07,560 --> 00:04:10,800
And so my focus was on improving the developer experience of the people

95
00:04:10,800 --> 00:04:13,320
writing Python at that company.

96
00:04:13,320 --> 00:04:16,000
I got to do a lot of things that I think really helped

97
00:04:16,000 --> 00:04:19,160
those engineers become more productive and happier.

98
00:04:19,160 --> 00:04:21,080
Stay on the green side.

99
00:04:21,080 --> 00:04:23,720
The first thing is we moved all of our code into a monorepo.

100
00:04:23,720 --> 00:04:25,360
If you don't know what those are, you just

101
00:04:25,360 --> 00:04:26,960
stick all your code in one repository.

102
00:04:26,960 --> 00:04:28,120
It's in the name.

103
00:04:28,120 --> 00:04:29,740
And there's a long list of pros and cons.

104
00:04:29,740 --> 00:04:30,960
And you can go look online.

105
00:04:30,960 --> 00:04:35,160
I don't think I have an original thought as to pros and cons on a monorepo.

106
00:04:35,160 --> 00:04:39,220
I would say, though, for the pros, you get really good collaboration

107
00:04:39,220 --> 00:04:42,880
across your teams and your code, because you're all in one room

108
00:04:42,880 --> 00:04:45,880
and you're talking together.

109
00:04:45,880 --> 00:04:49,000
Another pro I'd say is that you can make really good atomic refactors

110
00:04:49,000 --> 00:04:51,400
and commits across your entire code base.

111
00:04:51,400 --> 00:04:54,320
You don't have to wait and see who you broke when you broke things.

112
00:04:54,320 --> 00:04:55,600
You simply do it.

113
00:04:55,600 --> 00:04:56,600
You broke everyone.

114
00:04:56,600 --> 00:04:57,800
You also get to fix it.

115
00:04:57,800 --> 00:05:00,800
It's great responsibility.

116
00:05:00,800 --> 00:05:06,040
The one big con you'll hear is that monorepos require sophisticated tools.

117
00:05:06,040 --> 00:05:09,560
You can't have that much code in one repository

118
00:05:09,560 --> 00:05:15,520
without having something keep you from just running your tools ad nauseum.

119
00:05:15,560 --> 00:05:17,400
Now, luckily, I'm a build engineer.

120
00:05:17,400 --> 00:05:18,880
I care a lot about tools.

121
00:05:18,880 --> 00:05:24,800
And we'll talk about how that con gets mitigated later.

122
00:05:24,800 --> 00:05:27,280
Other things I did, I switched from make to poetry.

123
00:05:27,280 --> 00:05:30,880
I don't know how many of us love using GNU Make with isolated C++ build

124
00:05:30,880 --> 00:05:34,760
systems overlaid to do Python things.

125
00:05:34,760 --> 00:05:37,960
And poetry is just so natural and easy to use.

126
00:05:37,960 --> 00:05:41,560
I also switched from using no formatter to using black.

127
00:05:41,560 --> 00:05:42,880
And I want to call out black here.

128
00:05:42,880 --> 00:05:45,920
I love black for two reasons.

129
00:05:45,920 --> 00:05:47,960
The first reason is that it's opinionated, which

130
00:05:47,960 --> 00:05:50,280
means we don't get to bike shed on style.

131
00:05:50,280 --> 00:05:51,320
I said that correctly.

132
00:05:51,320 --> 00:05:53,600
We don't get to bike shed on style.

133
00:05:53,600 --> 00:05:54,980
We can bike shed on other things.

134
00:05:54,980 --> 00:05:57,160
How much do we love bike shedding?

135
00:05:57,160 --> 00:06:01,080
And bonus points, black's style is to minimize diffs.

136
00:06:01,080 --> 00:06:02,360
And that's something I love.

137
00:06:02,360 --> 00:06:04,840
Taking these stumbling blocks, these points

138
00:06:04,840 --> 00:06:08,380
at which you're pushed over into the red and removing them

139
00:06:08,380 --> 00:06:11,840
so that you can focus on reading the code semantically instead

140
00:06:11,840 --> 00:06:13,360
of stylistically.

141
00:06:13,360 --> 00:06:15,560
So that was the first thing I love about black.

142
00:06:15,560 --> 00:06:18,960
The second is that it's kind of become the de facto community standard.

143
00:06:18,960 --> 00:06:22,720
I mean, it's the only answer I hear that got shouted out, which, by the way,

144
00:06:22,720 --> 00:06:25,200
love shouting out, keep doing that.

145
00:06:25,200 --> 00:06:29,040
That means that my team's code looks like your team's code,

146
00:06:29,040 --> 00:06:31,040
looks like open source code.

147
00:06:31,040 --> 00:06:34,460
And again, I don't have to think about how to read Python.

148
00:06:34,460 --> 00:06:37,640
I can do it semantically now.

149
00:06:37,640 --> 00:06:40,200
So in the spirit of tooling, we also started using flake8

150
00:06:40,240 --> 00:06:43,680
to find these issues earlier so that the humans don't have to find them.

151
00:06:43,680 --> 00:06:46,560
We started using mypy because static type hints are now

152
00:06:46,560 --> 00:06:49,280
another way of finding issues, as we heard earlier today.

153
00:06:49,280 --> 00:06:52,240
And pytest, so we can write tests.

154
00:06:52,240 --> 00:06:56,160
It's not enough, though, in my opinion, to bring these changes to people

155
00:06:56,160 --> 00:06:57,240
and just say, here they are.

156
00:06:57,240 --> 00:07:00,240
Congratulations, you're having a better experience.

157
00:07:00,240 --> 00:07:03,080
Because another theme of this talk is that people build the code.

158
00:07:03,080 --> 00:07:05,160
You need to address the people.

159
00:07:05,160 --> 00:07:08,040
So I started giving presentations internally.

160
00:07:08,040 --> 00:07:09,340
Why are we changing things?

161
00:07:09,340 --> 00:07:10,460
What are we changing?

162
00:07:10,460 --> 00:07:12,020
How are we changing them?

163
00:07:12,020 --> 00:07:14,380
Started opening different discussion forums

164
00:07:14,380 --> 00:07:15,800
where people could talk about things.

165
00:07:15,800 --> 00:07:18,100
We actually opened a, I started a working group

166
00:07:18,100 --> 00:07:21,220
so that it wasn't my opinion overlaid on everybody's code.

167
00:07:21,220 --> 00:07:22,100
It was a collective.

168
00:07:22,100 --> 00:07:25,380
We had representatives from everywhere in the company.

169
00:07:25,380 --> 00:07:28,020
And so in a lot of ways, we got to really boost

170
00:07:28,020 --> 00:07:34,260
this experience of the developers from using almost no tools to using many

171
00:07:34,260 --> 00:07:38,060
so that they can focus on doing what they want to do, writing code,

172
00:07:38,060 --> 00:07:42,780
and not worrying about issues or style or things like that.

173
00:07:42,780 --> 00:07:45,860
Now, this is me as a build engineer, and I said it was my last company.

174
00:07:45,860 --> 00:07:47,300
It wasn't enough.

175
00:07:47,300 --> 00:07:49,260
I love build engineering.

176
00:07:49,260 --> 00:07:51,060
And so I wanted to be a build engineer.

177
00:07:51,060 --> 00:07:53,700
And I wanted to be a build engineer at a company that

178
00:07:53,700 --> 00:07:57,020
cared about build engineering.

179
00:07:57,020 --> 00:07:59,780
So I started looking for new jobs.

180
00:07:59,780 --> 00:08:00,980
I got to be a build engineer.

181
00:08:00,980 --> 00:08:02,720
It was on the title slide.

182
00:08:02,720 --> 00:08:04,140
So what did I do at this company?

183
00:08:04,140 --> 00:08:05,980
Why did they need a build engineer so badly?

184
00:08:05,980 --> 00:08:07,500
They hired one.

185
00:08:07,500 --> 00:08:10,020
And what changes did I make to go from bad to good?

186
00:08:10,020 --> 00:08:11,820
Well, let's talk about bad.

187
00:08:11,820 --> 00:08:15,780
What experience were they having as developers at this new Python

188
00:08:15,780 --> 00:08:18,880
monorepo shop that's doing AIML?

189
00:08:18,880 --> 00:08:20,500
So the developer experience was better.

190
00:08:20,500 --> 00:08:21,500
They were using tools.

191
00:08:21,500 --> 00:08:22,940
They had a build system.

192
00:08:22,940 --> 00:08:23,780
It was Bazel.

193
00:08:23,780 --> 00:08:24,580
I don't know if you've heard of it.

194
00:08:24,580 --> 00:08:26,620
We'll talk a little bit about it in a bit.

195
00:08:26,620 --> 00:08:30,060
They were already using a formatter, which was Yappif, so that's great.

196
00:08:30,060 --> 00:08:33,420
They had some in-house AST parsing to do linting,

197
00:08:33,540 --> 00:08:36,820
which I make this face because I don't like things that are in-house.

198
00:08:36,820 --> 00:08:38,320
They were using MyPy, which was great.

199
00:08:38,320 --> 00:08:41,940
And they were running their tests with unit tests, so they had tests.

200
00:08:41,940 --> 00:08:42,440
Yay.

201
00:08:45,100 --> 00:08:49,140
So I talked about the build system, Bazel.

202
00:08:49,140 --> 00:08:50,220
It really held them back.

203
00:08:50,220 --> 00:08:53,180
So it's a very powerful and sophisticated build system.

204
00:08:53,180 --> 00:08:54,900
It's amazing for a lot of use cases.

205
00:08:54,900 --> 00:08:56,620
It just wasn't one for theirs.

206
00:08:56,620 --> 00:08:58,620
It turns out a lot of their tests were flaky.

207
00:08:58,620 --> 00:09:00,940
People would come to the support channel and say, Josh,

208
00:09:00,940 --> 00:09:02,540
why is this test failing on CI?

209
00:09:02,540 --> 00:09:03,460
I haven't touched it.

210
00:09:03,460 --> 00:09:05,380
And I would go, yeah, I don't know.

211
00:09:05,380 --> 00:09:09,660
Let's just rerun it and see what happens.

212
00:09:09,660 --> 00:09:12,920
There was really odd scenarios where people would go, Josh,

213
00:09:12,920 --> 00:09:17,580
every time I fast forward master, I go to run a command,

214
00:09:17,580 --> 00:09:19,940
and then it takes four minutes.

215
00:09:19,940 --> 00:09:21,180
What's going on?

216
00:09:21,180 --> 00:09:22,980
And that fails what I call the coffee test.

217
00:09:22,980 --> 00:09:24,460
I'm OK with interruptions.

218
00:09:24,460 --> 00:09:26,340
I don't get pushed over into the red.

219
00:09:26,340 --> 00:09:29,620
If I can go grab a cup of coffee and come back, I can't do that.

220
00:09:29,620 --> 00:09:31,800
Four minutes, I'd grab the coffee, I'd sit down,

221
00:09:31,800 --> 00:09:35,000
and I would just stare at it and drink it and feel my adrenaline

222
00:09:35,000 --> 00:09:37,320
rushing and get upset.

223
00:09:37,320 --> 00:09:40,040
Additionally, if you fast forwarded master too much

224
00:09:40,040 --> 00:09:42,880
and you went to go run your tests, you'd be running the suite of tests.

225
00:09:42,880 --> 00:09:46,000
It could take anywhere from one minute to 30.

226
00:09:46,000 --> 00:09:48,680
So what happened was people would hold off pulling master

227
00:09:48,680 --> 00:09:53,060
and merging it into their branches till the end of the day.

228
00:09:53,060 --> 00:09:56,760
So what do you change?

229
00:09:56,760 --> 00:09:59,300
How do you take something like a bad developer experience

230
00:09:59,300 --> 00:10:01,720
and how do you make it better?

231
00:10:01,720 --> 00:10:04,440
One big change, of course, is kind of the glue code.

232
00:10:04,440 --> 00:10:05,440
It's the build system.

233
00:10:05,440 --> 00:10:07,840
It's the thing that puts all this together.

234
00:10:07,840 --> 00:10:12,200
Let's set that aside because it is one big easy win, but it's not the only one.

235
00:10:12,200 --> 00:10:15,240
How you change things, I like to call, and I've heard it called before,

236
00:10:15,240 --> 00:10:17,400
a lift by 1,000 breezes.

237
00:10:17,400 --> 00:10:21,480
It's kind of the opposite of death by 1,000 paper cuts.

238
00:10:21,480 --> 00:10:23,600
If you could kill someone with 1,000 paper cuts,

239
00:10:23,600 --> 00:10:27,800
surely you could also lift them up by doing a bunch of little things.

240
00:10:27,800 --> 00:10:30,220
And that's exactly what we did.

241
00:10:30,220 --> 00:10:33,540
I talked about my love for black, so we switched from YAPF to black.

242
00:10:33,540 --> 00:10:37,580
It also helps that black is faster.

243
00:10:37,580 --> 00:10:40,720
We switched from in-house AST linting to Flake 8 and plugins.

244
00:10:40,720 --> 00:10:42,420
Because it turns out Flake 8 does that.

245
00:10:42,420 --> 00:10:43,980
It already operates on the AST.

246
00:10:43,980 --> 00:10:46,060
There's already plugins for what we wanted to do,

247
00:10:46,060 --> 00:10:47,740
and I got to throw it over the fence.

248
00:10:47,740 --> 00:10:50,700
I love throwing things over the fence because it means somebody else does

249
00:10:50,700 --> 00:10:53,820
the performance improvements and the bug fixes,

250
00:10:53,820 --> 00:10:56,020
and they add new features for me.

251
00:10:56,020 --> 00:10:59,380
That's one of the things we love about open source.

252
00:10:59,380 --> 00:11:00,580
We started leveraging PyTest.

253
00:11:00,580 --> 00:11:02,120
I said there were unit tests.

254
00:11:02,120 --> 00:11:04,300
They were using unit test.

255
00:11:04,300 --> 00:11:05,620
But we switched to PyTest.

256
00:11:05,620 --> 00:11:08,940
Like Brandon said, we don't love writing tests.

257
00:11:08,940 --> 00:11:13,060
Maybe one or two of you are masochists, and you do.

258
00:11:13,060 --> 00:11:14,980
We don't love it.

259
00:11:14,980 --> 00:11:19,060
Anything you can do to reduce that burden is a benefit.

260
00:11:19,060 --> 00:11:21,620
And PyTest has really great plugins, and the way

261
00:11:21,620 --> 00:11:26,180
they encourage you to style your code, it helps reduce some of the burden.

262
00:11:26,220 --> 00:11:31,220
It's still not something you love doing, but at least it's easier.

263
00:11:31,220 --> 00:11:32,900
And it doesn't stop at Python either.

264
00:11:32,900 --> 00:11:37,020
How many of us deploy our applications in a Docker image?

265
00:11:37,020 --> 00:11:37,740
Ooh, OK.

266
00:11:37,740 --> 00:11:38,540
OK.

267
00:11:38,540 --> 00:11:41,260
That's more than I thought, honestly, which is a good thing.

268
00:11:41,260 --> 00:11:43,660
It should be easy to build those Docker images.

269
00:11:43,660 --> 00:11:48,340
People should have to know how to build Docker images to get one made,

270
00:11:48,340 --> 00:11:51,260
and it should be performant.

271
00:11:51,260 --> 00:11:54,740
Things like these reduce the cognitive burden of the developers

272
00:11:54,740 --> 00:11:58,980
so they can focus on what they want to do.

273
00:11:58,980 --> 00:12:00,620
So then I talked about build systems.

274
00:12:00,620 --> 00:12:03,220
So there was Bazel, and I switched us to pants,

275
00:12:03,220 --> 00:12:06,700
which I'm wearing a fun shirt that's been sponsored for me by.

276
00:12:06,700 --> 00:12:08,180
What are they, and how do they work?

277
00:12:08,180 --> 00:12:10,060
So both are build systems.

278
00:12:10,060 --> 00:12:12,340
They're both open source.

279
00:12:12,340 --> 00:12:16,260
They have their own sort of communities and strengths and weaknesses.

280
00:12:16,260 --> 00:12:21,260
It just happened that Bazel wasn't the right one for us as a Python monorepo.

281
00:12:21,260 --> 00:12:22,460
It didn't do Python well.

282
00:12:22,460 --> 00:12:25,260
It's gotten better since we started the journey,

283
00:12:25,260 --> 00:12:26,980
but pants just naturally fit.

284
00:12:26,980 --> 00:12:28,380
I have a whole slide on pants.

285
00:12:28,380 --> 00:12:31,900
Yes, that was a pun, and it was intended.

286
00:12:31,900 --> 00:12:33,900
And it was really cool, because actually one

287
00:12:33,900 --> 00:12:37,460
of the things I got to do in switching to pants

288
00:12:37,460 --> 00:12:38,940
was I got to become a contributor.

289
00:12:38,940 --> 00:12:40,820
It's a title you get to wear.

290
00:12:40,820 --> 00:12:42,020
I was very proud to wear it.

291
00:12:42,020 --> 00:12:45,140
Because I was upstreaming changes and doing bug fixes,

292
00:12:45,140 --> 00:12:47,940
I eventually realized I cared so much about build engineering.

293
00:12:47,940 --> 00:12:50,860
I became a maintainer, which is how I get an awesome t-shirt

294
00:12:50,860 --> 00:12:55,140
and get to stand on a stage and talk about build engineering.

295
00:12:55,140 --> 00:12:59,940
And that's because the community was so welcoming and easy to talk to.

296
00:12:59,940 --> 00:13:04,060
Because again, part of software engineering is social.

297
00:13:04,060 --> 00:13:05,620
It's the people writing the code.

298
00:13:05,620 --> 00:13:07,940
We should make these communities better.

299
00:13:10,660 --> 00:13:13,140
And I'm happy to be a pants maintainer for two reasons.

300
00:13:13,140 --> 00:13:14,540
Apparently, I like twos.

301
00:13:14,540 --> 00:13:18,900
The first one, I get to infect other people's experience.

302
00:13:18,940 --> 00:13:21,100
In fact, it actually has a negative connotation.

303
00:13:21,100 --> 00:13:22,300
Maybe we choose a better word.

304
00:13:22,300 --> 00:13:24,700
I get to improve other people's build experiences

305
00:13:24,700 --> 00:13:26,100
that aren't just my company.

306
00:13:26,100 --> 00:13:27,940
That makes me feel good.

307
00:13:27,940 --> 00:13:32,860
But the other, when it comes time to make changes to pants,

308
00:13:32,860 --> 00:13:35,140
I get to argue for my engineers.

309
00:13:35,140 --> 00:13:36,100
I'm a maintainer.

310
00:13:36,100 --> 00:13:40,820
I get the status, and I get to represent them at these discussions.

311
00:13:40,820 --> 00:13:42,340
So that's your lift by 1,000 breezes.

312
00:13:42,340 --> 00:13:44,660
So how far did we get lifted?

313
00:13:44,660 --> 00:13:47,180
What were the fruits of my labor there?

314
00:13:47,220 --> 00:13:50,620
Well, the first one, we minimized a lot of seams.

315
00:13:50,620 --> 00:13:52,740
Our CI time went from 18 minutes.

316
00:13:52,740 --> 00:13:53,540
You post your PR.

317
00:13:53,540 --> 00:13:56,140
18 minutes later, you get your first bit of feedback.

318
00:13:56,140 --> 00:13:58,220
We're now down to under five.

319
00:13:58,220 --> 00:14:01,980
And I'm targeting this year to get it under two.

320
00:14:01,980 --> 00:14:03,340
Imagine that.

321
00:14:03,340 --> 00:14:07,580
You post your PR, and within two minutes, we've run tons of tools.

322
00:14:07,580 --> 00:14:08,900
We've done static analysis.

323
00:14:08,900 --> 00:14:10,500
We've done style.

324
00:14:10,500 --> 00:14:12,180
We've done security checks.

325
00:14:12,180 --> 00:14:14,220
We've run our entire suite of tests.

326
00:14:14,220 --> 00:14:17,540
You finally get that feedback, and it only

327
00:14:17,540 --> 00:14:22,700
takes a little bit longer than it takes for Josh to go get a cup of coffee.

328
00:14:22,700 --> 00:14:25,100
It makes it easy for people to contribute to our code base.

329
00:14:25,100 --> 00:14:28,860
You shouldn't have to be an expert on how do we contribute code.

330
00:14:28,860 --> 00:14:31,580
It should be easy and natural and intuitive.

331
00:14:34,380 --> 00:14:36,980
As far as tooling goes, you'll see I have a slide here.

332
00:14:36,980 --> 00:14:39,020
I'm going to show you my toolbox.

333
00:14:39,020 --> 00:14:40,460
I have a plethora of tools.

334
00:14:40,460 --> 00:14:44,740
I love tools, because they take the emotion out of being told,

335
00:14:44,740 --> 00:14:46,340
your code's wrong.

336
00:14:46,340 --> 00:14:49,500
It's that review I got about style, but now it's

337
00:14:49,500 --> 00:14:51,540
a computer doing it, which has much less emotions.

338
00:14:51,540 --> 00:14:55,460
I won't say it has none, because red squiggles.

339
00:14:55,460 --> 00:14:57,600
But more tools are great, and they're faster.

340
00:14:57,600 --> 00:15:00,020
And like Brandon said, we pay the machines to do things.

341
00:15:00,020 --> 00:15:03,860
We should probably leverage that.

342
00:15:03,860 --> 00:15:06,340
But again, it's not just about these improvements

343
00:15:06,340 --> 00:15:08,340
made mechanically to the experience.

344
00:15:08,340 --> 00:15:10,220
You have to reach the people.

345
00:15:10,300 --> 00:15:12,220
Slack channels, let people come.

346
00:15:12,220 --> 00:15:13,580
They're going to complain.

347
00:15:13,580 --> 00:15:14,660
Let's hear their complaints.

348
00:15:14,660 --> 00:15:19,340
Let's let them talk about what they've learned from their mouths.

349
00:15:19,340 --> 00:15:23,340
Again, presentations, that's how some people consume information.

350
00:15:23,340 --> 00:15:28,380
So making bi-weekly presentations on what's changing, how we're changing it,

351
00:15:28,380 --> 00:15:34,900
and why are things that we did to improve the experience of the engineers.

352
00:15:34,900 --> 00:15:36,980
When I was making these slides, I reflected

353
00:15:36,980 --> 00:15:39,380
on what the themes of built engineering were.

354
00:15:39,420 --> 00:15:42,020
So I came up with three.

355
00:15:42,020 --> 00:15:44,940
The first is responsibility and ownership.

356
00:15:44,940 --> 00:15:47,620
It turns out as people, when you own something,

357
00:15:47,620 --> 00:15:51,380
when you're responsible for it, you tend to care about it more.

358
00:15:51,380 --> 00:15:53,700
I think that's pretty universal.

359
00:15:53,700 --> 00:15:57,060
And that includes the tools, and the processes, and the environments,

360
00:15:57,060 --> 00:15:59,780
and the workflows, and all of the not code writing that

361
00:15:59,780 --> 00:16:01,860
goes into software development.

362
00:16:01,860 --> 00:16:03,960
But you'll also hear occasionally on stage,

363
00:16:03,960 --> 00:16:07,420
I'll talk about my engineers, because that's my title.

364
00:16:07,420 --> 00:16:08,300
I'm a build engineer.

365
00:16:08,300 --> 00:16:09,980
I'm responsible for them.

366
00:16:09,980 --> 00:16:12,980
I'm responsible for their experience, and I like that.

367
00:16:15,620 --> 00:16:18,540
So the second thing, you've heard me talk about tooling and automation.

368
00:16:18,540 --> 00:16:20,140
You'll hear me talk about it more.

369
00:16:20,140 --> 00:16:25,900
It's so important, because it reduces the human factor that

370
00:16:25,900 --> 00:16:29,780
comes into being told your code's wrong.

371
00:16:29,780 --> 00:16:31,680
And part of that is curiosity.

372
00:16:31,680 --> 00:16:35,220
I don't expect any of my engineers who do their AI ML stuff, who

373
00:16:35,220 --> 00:16:38,740
write their production code, to be thinking,

374
00:16:38,740 --> 00:16:41,420
what if there was a better formatter out there?

375
00:16:41,420 --> 00:16:43,220
That just doesn't need to enter their brain.

376
00:16:43,220 --> 00:16:48,140
And so as build engineers go, having a curiosity for what all's out there,

377
00:16:48,140 --> 00:16:49,300
what is the community doing?

378
00:16:49,300 --> 00:16:50,720
I never would have switched to black if I didn't

379
00:16:50,720 --> 00:16:52,100
know somebody else was using it.

380
00:16:56,260 --> 00:17:00,020
And the last one is the most important in my opinion, and that's be empathetic.

381
00:17:00,020 --> 00:17:01,440
This is something we could all do.

382
00:17:01,440 --> 00:17:04,260
This isn't a build engineering takeaway, but it's certainly

383
00:17:04,260 --> 00:17:07,940
something that's extremely important for build engineering.

384
00:17:07,940 --> 00:17:11,580
I think about two ways you could be more empathetic.

385
00:17:11,580 --> 00:17:14,660
Not everybody has the bandwidth to complain.

386
00:17:14,660 --> 00:17:19,420
At my last company, nobody complained we should be using a formatter.

387
00:17:19,420 --> 00:17:23,900
Surely I wasn't the only person to have this original idea, right?

388
00:17:23,900 --> 00:17:27,820
Maybe they just didn't have the emotional bandwidth to do so.

389
00:17:27,820 --> 00:17:32,440
The second one is dealing with what I've heard called the curse of knowledge.

390
00:17:32,440 --> 00:17:35,200
As somebody up here who loves and breeds build engineering

391
00:17:35,200 --> 00:17:37,240
and tools and automation, all I think about

392
00:17:37,240 --> 00:17:39,040
is build engineering and tools and automation.

393
00:17:39,040 --> 00:17:41,200
These things come naturally to me.

394
00:17:41,200 --> 00:17:44,800
When somebody posts in a support channel, hey, I ran this command

395
00:17:44,800 --> 00:17:46,440
and I got this error.

396
00:17:46,440 --> 00:17:48,780
My very first thought is a human one.

397
00:17:48,780 --> 00:17:50,040
Oh, come on.

398
00:17:50,040 --> 00:17:51,560
Why did you use that flag?

399
00:17:51,560 --> 00:17:53,880
Why didn't you use the other flag?

400
00:17:53,880 --> 00:17:55,920
But that's not an empathetic way to answer.

401
00:17:55,920 --> 00:17:58,280
That's because I have the curse of knowledge.

402
00:17:58,280 --> 00:18:01,400
I already knew what the answer was, and it's

403
00:18:01,400 --> 00:18:03,920
hard for me to realize that I knew that.

404
00:18:03,920 --> 00:18:07,160
You have to take a step back and remember what it's like to be someone

405
00:18:07,160 --> 00:18:09,720
else before you knew what you knew.

406
00:18:13,000 --> 00:18:15,680
So oh, and then I have more.

407
00:18:15,680 --> 00:18:18,080
Communication is important, and that's what

408
00:18:18,080 --> 00:18:19,720
I talked about with the slack thing.

409
00:18:19,720 --> 00:18:21,880
And then helping others.

410
00:18:21,880 --> 00:18:24,200
I just forgot to click the button.

411
00:18:24,200 --> 00:18:26,760
So the three questions I wanted to answer hopefully now

412
00:18:26,760 --> 00:18:29,240
are summarized better with a lot of depth and color.

413
00:18:29,240 --> 00:18:30,280
I'm Joshua Cannon.

414
00:18:30,280 --> 00:18:33,000
I'm a build engineer at IBM Watson Orders.

415
00:18:33,000 --> 00:18:35,920
Build engineering can come from anyone, and it's

416
00:18:35,920 --> 00:18:40,960
about caring enough about the developers to give them a great experience.

417
00:18:40,960 --> 00:18:43,560
Because the difference between a good and a bad one

418
00:18:43,560 --> 00:18:48,480
is staying on the green side of the line, being happy and productive,

419
00:18:48,480 --> 00:18:51,800
delivering value to your stakeholders.

420
00:18:51,800 --> 00:18:55,600
And at best, maybe being unproductive if it's bad,

421
00:18:55,600 --> 00:18:57,960
or at worst, trying to find a new job.

422
00:19:01,080 --> 00:19:03,520
So I've talked a lot about how I care about build engineering

423
00:19:03,520 --> 00:19:06,080
and how I love helping others have a better experience.

424
00:19:06,080 --> 00:19:10,360
So I get to use the remaining time in my talk to talk about my toolbox.

425
00:19:10,360 --> 00:19:14,440
I like this picture because I've labeled all the numbers.

426
00:19:14,440 --> 00:19:19,120
So I wanted to show you my toolbox, and I'll leave this up, for two reasons.

427
00:19:19,120 --> 00:19:22,040
One, I want to show you the tools I use because I

428
00:19:22,040 --> 00:19:26,560
think they do deliver a great experience to my engineers.

429
00:19:26,560 --> 00:19:29,160
And I don't think that you have to be a build engineer in order

430
00:19:29,160 --> 00:19:30,280
to have these values.

431
00:19:30,280 --> 00:19:32,000
You can just copy mine.

432
00:19:32,000 --> 00:19:35,280
I'll give reasons why I have certain tools in my toolbox.

433
00:19:35,280 --> 00:19:36,320
Take them or leave them.

434
00:19:36,320 --> 00:19:39,440
Doesn't cost me anything.

435
00:19:39,440 --> 00:19:41,680
So I'm going to go here, well, three columns.

436
00:19:41,680 --> 00:19:45,200
And I'm going to go from the tools that take the most work,

437
00:19:45,200 --> 00:19:48,360
but they still deliver a lot of value, all the way to the least work,

438
00:19:48,360 --> 00:19:50,320
and deliver probably less value.

439
00:19:50,320 --> 00:19:52,000
So the first is testing.

440
00:19:52,000 --> 00:19:53,840
I've talked about PyTest.

441
00:19:53,840 --> 00:19:55,560
It makes testing easier.

442
00:19:55,560 --> 00:19:58,920
It doesn't make testing easy, but it certainly makes it easier.

443
00:19:58,920 --> 00:20:01,080
And I gobble plug-ins like Pac-Man.

444
00:20:01,080 --> 00:20:02,580
Other people have written these things.

445
00:20:02,580 --> 00:20:05,160
They obviously cared enough to write them and publish them.

446
00:20:05,160 --> 00:20:08,160
I'm going to see what they have to say and how they've delivered value.

447
00:20:08,160 --> 00:20:11,520
We'll use as many as are appropriate.

448
00:20:11,520 --> 00:20:13,880
And then code coverage, you've heard it talked about earlier.

449
00:20:13,880 --> 00:20:17,520
It's a great first way to make sure your code is being tested.

450
00:20:17,520 --> 00:20:18,760
It's not enough to write tests.

451
00:20:18,760 --> 00:20:20,560
It's to make sure that at least you're hitting

452
00:20:20,560 --> 00:20:22,020
the lines you think you're hitting.

453
00:20:25,640 --> 00:20:26,780
Cool.

454
00:20:26,820 --> 00:20:29,180
So the next thing is static analysis.

455
00:20:29,180 --> 00:20:33,380
If you don't want to spend all that time writing tests and running your code,

456
00:20:33,380 --> 00:20:36,220
the next best thing you can do is just look at it.

457
00:20:36,220 --> 00:20:39,740
And so MyPy, I've talked about community standards.

458
00:20:39,740 --> 00:20:42,700
MyPy is the de facto community standard for type checking.

459
00:20:42,700 --> 00:20:44,240
And it's gotten really powerful lately.

460
00:20:44,240 --> 00:20:49,180
You can find a lot of issues through just running this thing that

461
00:20:49,180 --> 00:20:52,220
checks your type hints.

462
00:20:52,220 --> 00:20:52,740
Excuse me.

463
00:20:52,740 --> 00:20:54,380
The second one on this list is PyLint.

464
00:20:54,380 --> 00:20:56,780
And I've put a sticker on this slide because there's

465
00:20:56,780 --> 00:21:02,180
a talk about PyLint and pants tomorrow by Aurelian Univ, that guy.

466
00:21:02,180 --> 00:21:03,700
So I run PyLint.

467
00:21:03,700 --> 00:21:05,060
It's slow.

468
00:21:05,060 --> 00:21:06,580
We'll hear about that later.

469
00:21:06,580 --> 00:21:08,820
But it still delivers a lot of value.

470
00:21:08,820 --> 00:21:12,860
And it definitely covers ground that MyPy doesn't.

471
00:21:12,860 --> 00:21:14,000
The third is Flake8.

472
00:21:14,000 --> 00:21:16,580
It's even faster, less powerful.

473
00:21:16,580 --> 00:21:20,180
But I like it because it's free.

474
00:21:20,180 --> 00:21:23,500
Of course, this slide won't be complete until I talk about rough

475
00:21:23,500 --> 00:21:26,860
because it seems to be taken off like gangbusters.

476
00:21:26,860 --> 00:21:29,500
And it eats some of Flake8 and PyLint.

477
00:21:29,500 --> 00:21:32,420
And I'm very excited to use it.

478
00:21:32,420 --> 00:21:33,740
And why am I excited to use it?

479
00:21:33,740 --> 00:21:35,900
It has a lot of fixing built in.

480
00:21:35,900 --> 00:21:37,100
And I like this column.

481
00:21:37,100 --> 00:21:42,100
I wish this column was infinitely long because then there is no emotion.

482
00:21:42,100 --> 00:21:43,220
I don't get red squiggles.

483
00:21:43,220 --> 00:21:44,940
I don't get people complaining on my PRs.

484
00:21:44,940 --> 00:21:49,500
They never saw my bad code because something fixed it for me.

485
00:21:49,540 --> 00:21:53,940
So I will gobble these up even more like Pac-Man.

486
00:21:53,940 --> 00:21:59,420
Black fixes my style, as does Isort, less so, but we can argue.

487
00:21:59,420 --> 00:22:01,500
It still does fix some amount of style.

488
00:22:01,500 --> 00:22:05,700
And there are some cases where it's really nice to have your import sorted.

489
00:22:05,700 --> 00:22:08,980
PyUpgrade, because I want my code to look modern.

490
00:22:08,980 --> 00:22:11,220
It should look and feel modern because it is modern code.

491
00:22:11,220 --> 00:22:15,140
I'm using whatever the latest version of Python I can is.

492
00:22:15,140 --> 00:22:20,860
Autoflake removes dead code and imports because those are at best distracting.

493
00:22:20,860 --> 00:22:25,020
And at worst, they can be hazardous.

494
00:22:25,020 --> 00:22:28,100
DocFormatter, I want to format my docstrings again

495
00:22:28,100 --> 00:22:32,580
so that mine look like yours, look like everyone else's.

496
00:22:32,580 --> 00:22:36,700
Preamble, technically a Python tool, this thing stamps copyright headers.

497
00:22:36,700 --> 00:22:39,940
I kid you not, at my last company, we would open issues on PR

498
00:22:39,940 --> 00:22:41,100
about copyright headers.

499
00:22:41,100 --> 00:22:42,340
You forgot to change the year.

500
00:22:42,340 --> 00:22:43,820
You forgot to add one.

501
00:22:43,820 --> 00:22:45,460
Come on.

502
00:22:45,460 --> 00:22:47,940
Let's use tools for this.

503
00:22:47,940 --> 00:22:51,500
And then I'm going to end it with rough because, woo, doggy, I'm excited.

504
00:22:54,380 --> 00:22:55,980
And then we come to pants.

505
00:22:55,980 --> 00:22:56,940
I've teased at it.

506
00:22:56,940 --> 00:22:57,900
It's a build system.

507
00:22:57,900 --> 00:22:58,900
I said it's open source.

508
00:22:58,900 --> 00:23:04,180
And I've also said I'm a maintainer, which is why I'm up here to some degree.

509
00:23:04,180 --> 00:23:06,140
And it's the glue that runs all of these things.

510
00:23:06,140 --> 00:23:11,140
I can't run all of these tools in CI and expect my PR

511
00:23:11,140 --> 00:23:15,380
to take less than five minutes for feedback, especially two,

512
00:23:15,380 --> 00:23:18,180
considering that our tests, this column that I said

513
00:23:18,180 --> 00:23:21,540
takes the longest amount of time, we're on the order of hours

514
00:23:21,540 --> 00:23:24,740
for our monorepo to run all of our tests.

515
00:23:24,740 --> 00:23:26,700
And here's how I get away with that.

516
00:23:26,700 --> 00:23:27,260
It's pants.

517
00:23:27,260 --> 00:23:28,620
It's a build system.

518
00:23:28,620 --> 00:23:30,700
It does so much it doesn't fit on a slide.

519
00:23:30,700 --> 00:23:33,220
I wanted to put a demo up, but it just didn't happen.

520
00:23:33,220 --> 00:23:34,940
So I'll have to talk to you about it.

521
00:23:34,940 --> 00:23:38,140
And I very much encourage you to try it out with your own repositories.

522
00:23:38,180 --> 00:23:42,140
So the first one, it gives me a consistent and unified interface

523
00:23:42,140 --> 00:23:43,380
to run all these tools.

524
00:23:43,380 --> 00:23:46,580
And I like that because I've talked about eliminating seams.

525
00:23:46,580 --> 00:23:49,380
This first command changed since main fix.

526
00:23:49,380 --> 00:23:55,340
It says only run my fixers in parallel on all of the code that's

527
00:23:55,340 --> 00:23:58,940
changed since the merge base of main, because why would I run them

528
00:23:58,940 --> 00:24:02,100
on code that I haven't touched?

529
00:24:02,100 --> 00:24:05,920
Already, it's a huge win for productivity.

530
00:24:05,920 --> 00:24:09,200
Now, pants, and I'll talk about this a little bit on the next bullet point,

531
00:24:09,200 --> 00:24:11,740
it understands your files as dependencies.

532
00:24:11,740 --> 00:24:14,600
It understands this graph, this network of your code,

533
00:24:14,600 --> 00:24:16,560
and how it relates to the rest of your code.

534
00:24:16,560 --> 00:24:19,440
And so you can do things like, and this isn't an actual pants command,

535
00:24:19,440 --> 00:24:21,800
I had to shorten it for a slide, asking pants

536
00:24:21,800 --> 00:24:26,520
to transitively check, which is mypy, and test your code.

537
00:24:26,520 --> 00:24:30,540
What this says is, I only want you to run these operations on code

538
00:24:30,540 --> 00:24:34,840
that I've changed or code that depends on what I've changed.

539
00:24:34,840 --> 00:24:39,200
Again, I'm ignoring an entire tree of the monorepo

540
00:24:39,200 --> 00:24:43,280
to only running the things I care about.

541
00:24:43,280 --> 00:24:46,520
The last one, pants run path to my file.py.

542
00:24:46,520 --> 00:24:50,920
It seems like an unexciting thing to put on a slide.

543
00:24:50,920 --> 00:24:53,680
What you don't see is virtual environments.

544
00:24:53,680 --> 00:24:56,040
What you don't see is code generators.

545
00:24:56,040 --> 00:25:01,760
What you don't see is the fact that I have 300 dependencies in my lock file.

546
00:25:01,760 --> 00:25:04,400
I can't make a virtual environment and activate it

547
00:25:04,400 --> 00:25:06,640
and expect people to be OK with that.

548
00:25:06,640 --> 00:25:09,480
Pants sets everything up for me.

549
00:25:09,480 --> 00:25:11,440
Cross language, and it just runs the file.

550
00:25:11,440 --> 00:25:12,400
It should be that easy.

551
00:25:12,400 --> 00:25:16,320
I should be able to just run the file.

552
00:25:16,320 --> 00:25:19,160
I talked a little bit about dependency graphs.

553
00:25:19,160 --> 00:25:20,800
It comes with inference, which is great.

554
00:25:20,800 --> 00:25:24,080
It statically parses your code to find those dependencies.

555
00:25:24,080 --> 00:25:26,000
And it does a really good job at it.

556
00:25:26,000 --> 00:25:29,720
When we were in Bazel, we had 20,000 lines

557
00:25:29,720 --> 00:25:33,480
of hand-maintained dependency metadata.

558
00:25:33,480 --> 00:25:36,880
I don't know how I could fit the comprehension of 20,000 lines

559
00:25:36,880 --> 00:25:39,520
of hand-maintained metadata on a slide.

560
00:25:39,520 --> 00:25:40,740
It would be hard.

561
00:25:40,740 --> 00:25:45,680
In pants, we have maybe a couple hundred.

562
00:25:45,680 --> 00:25:52,040
And so it has this understanding of your dependencies, which is very powerful.

563
00:25:52,040 --> 00:25:53,000
It's incremental.

564
00:25:53,000 --> 00:25:55,080
I showed you how you can incrementally run commands

565
00:25:55,080 --> 00:25:56,760
on only files you've changed.

566
00:25:56,760 --> 00:25:59,240
It also incrementally resolves your dependencies.

567
00:25:59,240 --> 00:26:03,040
I talked about having 300 PIP dependencies.

568
00:26:03,040 --> 00:26:05,880
It only installs what you need right when you ask for it.

569
00:26:05,880 --> 00:26:08,540
And so that means that developers that aren't using PyTorch, which

570
00:26:08,540 --> 00:26:13,360
is in the gigabytes, don't install it.

571
00:26:13,360 --> 00:26:15,320
It's extreme caching.

572
00:26:15,320 --> 00:26:18,640
It's the secret sauce to make my CI under two minutes.

573
00:26:18,640 --> 00:26:20,320
And it can do these things locally, and it

574
00:26:20,320 --> 00:26:21,520
can do these things remotely.

575
00:26:22,520 --> 00:26:25,440
The next to last thing is it's pluggable.

576
00:26:25,440 --> 00:26:26,960
This is Python.

577
00:26:26,960 --> 00:26:31,080
We love being able to write pluggable systems and monkey patching.

578
00:26:31,080 --> 00:26:34,880
And so I love that about pants, because not only can I

579
00:26:34,880 --> 00:26:38,920
write code within this powerful framework that is only

580
00:26:38,920 --> 00:26:40,280
relevant to my organization.

581
00:26:40,280 --> 00:26:44,800
So OK, we'll do IBM wants and orders specific things here.

582
00:26:44,800 --> 00:26:47,440
But I can also experiment locally and upstream,

583
00:26:47,440 --> 00:26:51,280
and then everybody gets to reap the benefits.

584
00:26:51,360 --> 00:26:52,600
And it's cross-language.

585
00:26:52,600 --> 00:26:55,640
The only other language I would say probably matters a lot for this

586
00:26:55,640 --> 00:26:57,280
conference would be Docker.

587
00:26:57,280 --> 00:27:00,640
Being able to build and deploy Docker images easily,

588
00:27:00,640 --> 00:27:02,960
while still having a really good cache behind it.

589
00:27:06,560 --> 00:27:12,880
So to conclude our journey into and through build engineering,

590
00:27:12,880 --> 00:27:15,960
build engineering has a multiplier effect.

591
00:27:15,960 --> 00:27:18,960
I don't know what kind of curve comes out of investment in build

592
00:27:19,000 --> 00:27:22,480
engineering, but certainly some investment in build engineering.

593
00:27:22,480 --> 00:27:25,680
And again, this doesn't have to come from a build engineer.

594
00:27:25,680 --> 00:27:28,640
And that's a positive outcome.

595
00:27:28,640 --> 00:27:32,160
Happier developers, more productive developers.

596
00:27:32,160 --> 00:27:34,320
And we can think about when you sit down,

597
00:27:34,320 --> 00:27:38,560
don't you want to be on the green side of the line when you want to?

598
00:27:38,560 --> 00:27:42,720
And on the flip side, not investing, at best, you get ambivalence.

599
00:27:42,720 --> 00:27:44,120
You get neutrality.

600
00:27:44,120 --> 00:27:47,120
And at worst, you get people leaving your company.

601
00:27:47,120 --> 00:27:49,080
You get bugs, security issues.

602
00:27:49,080 --> 00:27:51,040
I mean, you name it.

603
00:27:51,040 --> 00:27:57,360
Having a bad developer experience just leads to bad development.

604
00:27:57,360 --> 00:28:00,040
You have to invest in tools and automation.

605
00:28:00,040 --> 00:28:03,040
Because again, it reduces the people part,

606
00:28:03,040 --> 00:28:07,360
which just carries so much emotion of software development.

607
00:28:07,360 --> 00:28:10,400
It's so cheap.

608
00:28:10,400 --> 00:28:11,920
Minimize seams.

609
00:28:11,920 --> 00:28:14,360
We don't want to be pushed into the red.

610
00:28:14,360 --> 00:28:16,880
We want to be able to walk that line ourselves.

611
00:28:16,880 --> 00:28:21,080
And so minimizing seams makes it so easy to stay on the green side

612
00:28:21,080 --> 00:28:24,720
and make workflows cohesive.

613
00:28:24,720 --> 00:28:27,600
Last and most importantly, I'll say it again, have empathy.

614
00:28:27,600 --> 00:28:29,080
This is something we could all do.

615
00:28:29,080 --> 00:28:33,400
In fact, none of these are build engineering specific conclusions,

616
00:28:33,400 --> 00:28:35,120
especially not have empathy.

617
00:28:35,120 --> 00:28:36,600
But it's so important.

618
00:28:36,600 --> 00:28:42,000
We don't acknowledge enough that software development is a social activity.

619
00:28:42,000 --> 00:28:45,840
And we should, because if we were just writing code to write code

620
00:28:45,840 --> 00:28:49,080
and it does the thing, we'd all be writing assembly.

621
00:28:49,080 --> 00:28:49,960
But we write Python.

622
00:28:49,960 --> 00:28:51,040
It's a readable language.

623
00:28:51,040 --> 00:28:52,680
It's readable for the humans.

624
00:28:52,680 --> 00:28:56,240
And we need to acknowledge that.

625
00:28:56,240 --> 00:28:59,240
And on the human note, here's how to contact me.

626
00:28:59,240 --> 00:29:01,880
I'm on the pants flat as the jcanon.

627
00:29:01,880 --> 00:29:04,640
I'm on Discord at the bottom of the footers.

628
00:29:04,640 --> 00:29:08,440
And that's my email address, which I'm very brave and I'm putting up here.

629
00:29:08,440 --> 00:29:12,280
It's also checked into Git, so I'm sure I'll get something funky.

630
00:29:12,280 --> 00:29:13,760
And yeah, I really do reach out.

631
00:29:13,760 --> 00:29:14,720
You can tell I love these things.

632
00:29:14,760 --> 00:29:19,280
I'd love to talk to you about any and everything on the slide or other things.

633
00:29:19,280 --> 00:29:21,600
So I've got time for questions.

634
00:29:21,600 --> 00:29:22,100
Yes.

635
00:29:30,760 --> 00:29:33,480
Do remember that every question holds us from lunch.

636
00:29:33,480 --> 00:29:35,480
Yes.

637
00:29:35,480 --> 00:29:39,920
I wish I could just call you and bring you to my job.

638
00:29:39,920 --> 00:29:41,120
Well, I showed you my toolbox.

639
00:29:41,120 --> 00:29:42,120
That's like half of it.

640
00:29:45,560 --> 00:29:52,480
Being in QA in some border foundation, in the middle of the complex of the environment

641
00:29:52,480 --> 00:30:00,960
and different parts of the project, I guess, how do you approach those teams?

642
00:30:00,960 --> 00:30:06,760
How do you get them to buy in on that process so you can finish your money?

643
00:30:06,760 --> 00:30:11,440
The emotional side of the people that you meet, right?

644
00:30:11,440 --> 00:30:13,440
It's not just everyone's race.

645
00:30:13,440 --> 00:30:17,520
So how do you get into that situation and bring it up?

646
00:30:17,520 --> 00:30:20,560
Yeah, so the question was, how do you reach different teams of people

647
00:30:20,560 --> 00:30:23,920
and how do you get them to buy in?

648
00:30:23,920 --> 00:30:25,680
OK.

649
00:30:25,680 --> 00:30:28,480
I think, yeah, it is the people aspect.

650
00:30:28,480 --> 00:30:31,040
You've got to meet with those people, see what they care about,

651
00:30:31,040 --> 00:30:33,120
see what's bothering them.

652
00:30:33,120 --> 00:30:36,360
A lot of times, I was fixing things I didn't think were important,

653
00:30:36,360 --> 00:30:40,880
but it turns out were because I asked the people, what could we do better?

654
00:30:40,880 --> 00:30:43,000
What pains you?

655
00:30:43,000 --> 00:30:46,640
And so it really is meeting them halfway.

656
00:30:46,640 --> 00:30:49,400
The other thing I'll say is demonstrations go a long way.

657
00:30:49,400 --> 00:30:53,920
I myself am very hands-on and visual, so sometimes you just do the thing

658
00:30:53,920 --> 00:30:57,840
and show them, and they go, oh, yeah, that is better.

659
00:30:57,840 --> 00:31:01,880
But really, I would say it is a case-to-case basis.

660
00:31:01,880 --> 00:31:03,880
Good question.

661
00:31:03,880 --> 00:31:08,200
I'll take more until I get kicked off, which might be now.

662
00:31:08,200 --> 00:31:10,960
It's your lunch.

663
00:31:10,960 --> 00:31:12,920
Go on over there.

664
00:31:12,920 --> 00:31:21,120
OK, so with regards to fixers and fixers, do you put that in your pre-commit

665
00:31:21,120 --> 00:31:23,680
hook or do anyone run fixers?

666
00:31:23,680 --> 00:31:26,520
Yeah, when do you run fixers is a good question.

667
00:31:26,520 --> 00:31:30,600
I personally think they're slower than can go in a pre-commit hook,

668
00:31:30,600 --> 00:31:34,880
and somebody out there can lob a tomato at me.

669
00:31:34,880 --> 00:31:36,040
I don't tend to.

670
00:31:36,040 --> 00:31:38,960
I say you could, and that's great.

671
00:31:38,960 --> 00:31:42,520
CI checks that they're fixed, so if you didn't do it, that's fine.

672
00:31:42,520 --> 00:31:45,160
And I actually, we have, I like bots.

673
00:31:45,160 --> 00:31:48,600
I didn't get a whole slide on bots, but again, interacting with machines.

674
00:31:48,600 --> 00:31:51,280
I have a bot, so if CI complains about it,

675
00:31:51,280 --> 00:31:54,740
you just tell the bot to go fix your code, and it pushes to your branch.

676
00:31:54,740 --> 00:31:58,160
So if you're not running it locally, because I don't, because I'm lazy,

677
00:31:58,160 --> 00:32:00,760
just make the computers do it if they're wrong at all.

678
00:32:00,760 --> 00:32:02,400
Your code's wrong at all.

679
00:32:02,400 --> 00:32:02,900
Yeah.

680
00:32:05,800 --> 00:32:07,440
Find me in the hallway, check.

681
00:32:07,440 --> 00:32:08,440
Thank you.

682
00:32:08,440 --> 00:32:09,440
Thank you.

683
00:32:09,440 --> 00:32:09,940
Thank you.

