1
00:00:00,000 --> 00:00:04,000
Thank you so much to the organizers for putting on this great event.

2
00:00:04,000 --> 00:00:06,000
I had a lot of fun with the recursion talk.

3
00:00:06,000 --> 00:00:13,000
Thank you for coming to build your own ChatGPT with SMS with the OpenAI API.

4
00:00:13,000 --> 00:00:15,000
And this talk is very beginner-friendly.

5
00:00:15,000 --> 00:00:17,000
I am not a machine learning developer.

6
00:00:17,000 --> 00:00:21,000
I'm really a machine learning enthusiast, if you will.

7
00:00:21,000 --> 00:00:23,000
And alternatively, I call this screw the browser,

8
00:00:23,000 --> 00:00:27,000
because why have ChatGPT in the browser when you have it over text message?

9
00:00:28,000 --> 00:00:32,000
I'm a Twilio developer evangelist, Python and JavaScript developer,

10
00:00:32,000 --> 00:00:36,000
and this is my first time in Austin, and I kind of, I love it.

11
00:00:36,000 --> 00:00:38,000
Are you okay?

12
00:00:38,000 --> 00:00:42,000
And I'm not here to pitch you,

13
00:00:42,000 --> 00:00:46,000
but I'm here to show you something that I've built with OpenAI.

14
00:00:48,000 --> 00:00:52,000
And that is Guido. Big fan. Big fan.

15
00:00:53,000 --> 00:00:57,000
Okay. So who here has used ChatGPT before?

16
00:00:59,000 --> 00:01:02,000
Same. So I hope you're excited to learn more about it.

17
00:01:02,000 --> 00:01:06,000
What are some prompts? You've asked it. Anyone?

18
00:01:09,000 --> 00:01:12,000
Okay. Makes sense. Makes sense.

19
00:01:15,000 --> 00:01:17,000
Relatable.

20
00:01:18,000 --> 00:01:22,000
I've heard that. Write a cover letter.

21
00:01:28,000 --> 00:01:32,000
So I hope you get better at writing prompts, because there is a new skill,

22
00:01:32,000 --> 00:01:37,000
a new job that is coming out of this called prompt engineering,

23
00:01:37,000 --> 00:01:42,000
and it's where you want to discover good inputs that will yield desirable,

24
00:01:42,000 --> 00:01:45,000
favorable, useful outputs or results.

25
00:01:47,000 --> 00:01:49,000
So what is on the agenda?

26
00:01:50,000 --> 00:01:56,000
Introduction to AI, a bit, some vocabulary, some concepts,

27
00:01:56,000 --> 00:01:59,000
OpenAI and the OpenAI API.

28
00:01:59,000 --> 00:02:02,000
And when I submitted this talk, there was no ChatGPT API,

29
00:02:02,000 --> 00:02:05,000
but they have been busy. There's now a ChatGPT API.

30
00:02:05,000 --> 00:02:07,000
And it's pretty similar.

31
00:02:07,000 --> 00:02:13,000
It's slightly more fine-tuned with different reimbursed learning,

32
00:02:13,000 --> 00:02:16,000
but the methods are very similar. The code is very similar.

33
00:02:16,000 --> 00:02:21,000
And then we'll go over how to build your own ChatGPT with the OpenAI API,

34
00:02:21,000 --> 00:02:23,000
Twilio and Python.

35
00:02:24,000 --> 00:02:26,000
I like to start with this meme.

36
00:02:26,000 --> 00:02:30,000
A programmer is like, is this AI to conditionals?

37
00:02:30,000 --> 00:02:33,000
And no, it is not.

38
00:02:33,000 --> 00:02:36,000
Going to the library, time to go back to school.

39
00:02:37,000 --> 00:02:39,000
So AI is an umbrella term with subset.

40
00:02:39,000 --> 00:02:43,000
It's a field of science and engineering that deals with making intelligent

41
00:02:43,000 --> 00:02:49,000
machines or computers perform human-like skills, tasks, activities.

42
00:02:50,000 --> 00:02:55,000
ML or machine learning is a subset of AI that deals with the computer,

43
00:02:55,000 --> 00:03:01,000
the system, learning on its own, learning automatically through its own experiences

44
00:03:01,000 --> 00:03:04,000
without it being explicitly programmed.

45
00:03:04,000 --> 00:03:10,000
Lastly, deep learning or DL is a subset of ML and thus of AI

46
00:03:10,000 --> 00:03:14,000
that deals with using complex algorithms and neural networks

47
00:03:14,000 --> 00:03:18,000
to repetitively train a specific model or pattern.

48
00:03:18,000 --> 00:03:23,000
And you can think of computer vision, CV as AI for visuals, images, graphics,

49
00:03:23,000 --> 00:03:29,000
videos, and natural language processing or NLP as AI for words.

50
00:03:31,000 --> 00:03:33,000
And I do like that tweet.

51
00:03:33,000 --> 00:03:35,000
What do we want? Natural language processing.

52
00:03:35,000 --> 00:03:37,000
When do we want it?

53
00:03:37,000 --> 00:03:40,000
Memory is hard for a computer.

54
00:03:42,000 --> 00:03:44,000
What is an ML model?

55
00:03:44,000 --> 00:03:48,000
You can think of it as a program that is trained using a previously unseen

56
00:03:48,000 --> 00:03:53,000
to the model data set to find patterns and to make decisions.

57
00:03:53,000 --> 00:03:57,000
For example, in an NLP, ML models can parse and correctly recognize

58
00:03:57,000 --> 00:04:03,000
the intent behind previously unheard sentences or combinations of words.

59
00:04:04,000 --> 00:04:09,000
In image recognition, a machine learning model can be taught to recognize objects

60
00:04:09,000 --> 00:04:13,000
like a dog or like a car.

61
00:04:13,000 --> 00:04:19,000
And you know that this talk is not a pitch because these slides are not very corporate.

62
00:04:19,000 --> 00:04:22,000
They do not fit with company brand guidelines.

63
00:04:22,000 --> 00:04:24,000
Neural networks.

64
00:04:24,000 --> 00:04:27,000
Like our brain that's formed of a network of neurons,

65
00:04:27,000 --> 00:04:30,000
neural networks are based on connected nodes,

66
00:04:30,000 --> 00:04:32,000
technically known as artificial neurons.

67
00:04:32,000 --> 00:04:37,000
Their job, you ask, to identify hidden correlation or patterns in raw data,

68
00:04:37,000 --> 00:04:40,000
to classify them and to continuously improve.

69
00:04:40,000 --> 00:04:44,000
You can train a neural network to perform tasks like sentiment analysis

70
00:04:44,000 --> 00:04:47,000
and they're at the heart of deep learning algorithms.

71
00:04:47,000 --> 00:04:53,000
A neural network arranges algorithms in such a manner that it can make reliable decisions on its own,

72
00:04:53,000 --> 00:04:58,000
whereas an ML model makes decisions based on what it has learned from the data.

73
00:04:58,000 --> 00:05:02,000
As a result, while ML models may learn from data,

74
00:05:02,000 --> 00:05:06,000
they may need some human interaction in the early stages.

75
00:05:06,000 --> 00:05:12,000
One of the more well-known neural networks includes the Google search algorithm.

76
00:05:12,000 --> 00:05:17,000
Very useful.

77
00:05:17,000 --> 00:05:19,000
Thank you.

78
00:05:19,000 --> 00:05:23,000
Weak AI, also known as narrow AI, is a type of artificial intelligence

79
00:05:23,000 --> 00:05:27,000
that is limited to a specific or narrow area.

80
00:05:27,000 --> 00:05:30,000
Weak AI simulates human cognition.

81
00:05:30,000 --> 00:05:38,000
Some examples include chat bots, smart assistants like Siri, Alexa, Cortana, self-driving cars.

82
00:05:38,000 --> 00:05:46,000
And I take great pride in knowing that I could beat Deep Blue, so could you, at checkers.

83
00:05:46,000 --> 00:05:52,000
So that automates playing chess, but it's limited to chess.

84
00:05:53,000 --> 00:05:57,000
Okay.

85
00:05:57,000 --> 00:05:59,000
Thank you.

86
00:05:59,000 --> 00:06:05,000
And you may have heard of artificial general intelligence recently in discussions around chat GPT.

87
00:06:05,000 --> 00:06:10,000
This differs from weak AI, and that can perform a variety of functions,

88
00:06:10,000 --> 00:06:14,000
eventually teaching itself to solve for new problems.

89
00:06:14,000 --> 00:06:16,000
In this case, it's like a child.

90
00:06:16,000 --> 00:06:23,000
It has to learn through input, experiences, and growing, learning over time.

91
00:06:23,000 --> 00:06:31,000
Some of the more common examples of AGI include ones in sci-fi like Wall-E, Star Wars, Star Trek,

92
00:06:31,000 --> 00:06:36,000
and it develops a human-like consciousness instead of simulating it.

93
00:06:36,000 --> 00:06:42,000
Do you think chat GPT is AGI?

94
00:06:42,000 --> 00:06:46,000
Hearing a mix of yeses and nos.

95
00:06:46,000 --> 00:06:49,000
Well, it is impressive, but it is not there yet.

96
00:06:49,000 --> 00:06:54,000
It is still a limited memory AI system, and it's unique from other chat bots,

97
00:06:54,000 --> 00:06:58,000
in that it can call on past previous answers to update its current output,

98
00:06:58,000 --> 00:07:03,000
but it's still limited to a single medium text-based chat,

99
00:07:03,000 --> 00:07:08,000
and it is simply trained to generate words based on some given input,

100
00:07:08,000 --> 00:07:14,000
but it does not have the ability to truly comprehend what the words mean.

101
00:07:14,000 --> 00:07:21,000
So some of the answers, some of the outputs it gives are still lacking in depth and some insight.

102
00:07:21,000 --> 00:07:23,000
So it's not there yet.

103
00:07:23,000 --> 00:07:27,000
While we're at it, there's artificial superintelligence,

104
00:07:27,000 --> 00:07:32,000
which is AI that exceeds human intelligence in all areas.

105
00:07:32,000 --> 00:07:34,000
Not there yet.

106
00:07:34,000 --> 00:07:36,000
So OpenAI 101.

107
00:07:37,000 --> 00:07:41,000
OpenAI is an AI research and deployment company.

108
00:07:41,000 --> 00:07:47,000
They differ from other AI companies in that they aim to promote and develop friendly AGI.

109
00:07:47,000 --> 00:07:49,000
What does that mean?

110
00:07:49,000 --> 00:07:53,000
As we learned earlier, AGI is AI that matches human intellect.

111
00:07:53,000 --> 00:08:00,000
Friendly AGI would have a positive impact on humanity, on the human species,

112
00:08:00,000 --> 00:08:03,000
which are some pretty lofty goals.

113
00:08:03,000 --> 00:08:08,000
And you may know OpenAI as the creators of ChatGPT, which uses the GPT-3.

114
00:08:08,000 --> 00:08:11,000
Maybe now GPT-4. Keep on updating them.

115
00:08:11,000 --> 00:08:13,000
Linguid models.

116
00:08:13,000 --> 00:08:17,000
Okay. Anyone know what GPT stands for?

117
00:08:20,000 --> 00:08:22,000
Oh, yes. Yes.

118
00:08:22,000 --> 00:08:26,000
Generative pre-training transformers 304.

119
00:08:26,000 --> 00:08:31,000
It uses a transformer architecture, which is a multi-layer neural network

120
00:08:31,000 --> 00:08:35,000
that's good for processing sequential data, such as text.

121
00:08:35,000 --> 00:08:39,000
And it can perform language-related tasks like summarization, translation,

122
00:08:39,000 --> 00:08:45,000
question answering, as well as text generation.

123
00:08:45,000 --> 00:08:51,000
And this is me asking in the browser, write me a song about Python in the style of country music.

124
00:08:51,000 --> 00:08:53,000
I'm a country music fan.

125
00:08:57,000 --> 00:08:59,000
And OpenAI's API.

126
00:08:59,000 --> 00:09:03,000
You can think of APIs like CodeLegos that let you use their models,

127
00:09:03,000 --> 00:09:07,000
use their functionality with only a few lines of code.

128
00:09:07,000 --> 00:09:12,000
And you can interact with the API through HTTP requests from a variety of programming languages,

129
00:09:12,000 --> 00:09:16,000
their official Python bindings, they have no JS library,

130
00:09:16,000 --> 00:09:21,000
and a few community-supported libraries as well.

131
00:09:21,000 --> 00:09:27,000
And there is the GPT-4 API you can get on the waitlist for.

132
00:09:27,000 --> 00:09:34,000
GPT-4 differs from GPT-3 in that GPT-4 can analyze and comment on images and graphics.

133
00:09:34,000 --> 00:09:41,000
So it can describe the content of an image, generate photo captions, identify trends in a graph.

134
00:09:41,000 --> 00:09:47,000
And it's supposed to be more creative, more reliable, and more accurate, handling more nuanced prompts.

135
00:09:47,000 --> 00:09:51,000
Smarter, more capable.

136
00:09:51,000 --> 00:09:54,000
Some examples of companies using the API.

137
00:09:54,000 --> 00:09:57,000
GitHub Copilot, an AI pair programmer.

138
00:09:57,000 --> 00:10:05,000
They use OpenAI's codecs to suggest code and maybe some complete functions straight in your editor.

139
00:10:05,000 --> 00:10:11,000
Duolingo uses GPT-3 to correct, improve French grammar.

140
00:10:11,000 --> 00:10:21,000
And an internal Duolingo study shows that use of this feature leads to measurably better second language writing skills.

141
00:10:21,000 --> 00:10:26,000
There's also the embeddings API that converts, lets you convert text.

142
00:10:26,000 --> 00:10:34,000
So it converts words to numbers because machine learning models and algorithms like computers consume numbers.

143
00:10:34,000 --> 00:10:39,000
While we as humans consume words maybe.

144
00:10:39,000 --> 00:10:47,000
To get started with the API, you need to get an API key from OpenAI at platform.openai.com.

145
00:10:47,000 --> 00:10:51,000
And price plans are based on token usage, which can be kind of confusing.

146
00:10:51,000 --> 00:10:58,000
Tokens are roughly what the input is and then what the output is.

147
00:10:58,000 --> 00:11:05,000
And people say it's pricey, but my bill has not been more than $25 a month and I make a lot with the OpenAI API.

148
00:11:05,000 --> 00:11:08,000
It's pretty fun to use.

149
00:11:08,000 --> 00:11:15,000
This is the completion endpoint, which can be used directly in apps and products with OpenAI's API.

150
00:11:15,000 --> 00:11:23,000
You input some text as a prompt and the model will generate a text completion that attempts to match whatever context or pattern you provided it.

151
00:11:23,000 --> 00:11:33,000
Here I gave the prompt, as Descartes said, I think, therefore, and it is likely return, it did return, I am.

152
00:11:33,000 --> 00:11:38,000
And this is a curler request with my OpenAI API key, unique to me.

153
00:11:38,000 --> 00:11:44,000
And it sets the max token in the prompt, which is the length of the completion, the output.

154
00:11:44,000 --> 00:11:57,000
And then the response also includes the completion tokens, which are used to return the output and the total tokens, which is the sum of the input and the output tokens.

155
00:11:57,000 --> 00:12:02,000
And I find the highlight of ChatGPT to be the creativity aspect of seeing what it comes up.

156
00:12:02,000 --> 00:12:06,000
So here is a haiku about Python.

157
00:12:06,000 --> 00:12:10,000
So we've seen ChatGPT in the browser through curler requests.

158
00:12:10,000 --> 00:12:15,000
What's another platform we could use here?

159
00:12:15,000 --> 00:12:18,000
Text message.

160
00:12:18,000 --> 00:12:21,000
This is the one to leave a slide.

161
00:12:21,000 --> 00:12:28,000
Here's an example of text message I sent using Python with the completions endpoint.

162
00:12:28,000 --> 00:12:30,000
Did humans invent or discover mathematics?

163
00:12:30,000 --> 00:12:31,000
I was curious.

164
00:12:31,000 --> 00:12:37,000
Mathematics was discovered, not invented, but we have developed the field over time.

165
00:12:37,000 --> 00:12:41,000
So some of the dependencies we'll be using.

166
00:12:41,000 --> 00:12:46,000
PIP install, we have OpenAI to make requests to OpenAI's models.

167
00:12:46,000 --> 00:12:48,000
We'll send and receive text messages.

168
00:12:48,000 --> 00:12:52,000
Flask, spin up a web app in Python.

169
00:12:52,000 --> 00:12:56,000
And environment variables, because I don't trust you with my credentials yet.

170
00:12:56,000 --> 00:12:59,000
Maybe ever.

171
00:12:59,000 --> 00:13:04,000
Our Python application will need to have access to our OpenAI API key.

172
00:13:04,000 --> 00:13:11,000
So in a .env file, we add this line and replace it with your own API key.

173
00:13:11,000 --> 00:13:16,000
Sometimes I publish my credentials to the web because I get lazy and I hard code them.

174
00:13:16,000 --> 00:13:19,000
Use environment variables.

175
00:13:19,000 --> 00:13:24,000
At the top of a Python file, we import our libraries, set our API key,

176
00:13:24,000 --> 00:13:29,000
kept private, and create a Flask app.

177
00:13:29,000 --> 00:13:34,000
And inside of this slash SMS webhook, this code creates a variable inbound message

178
00:13:34,000 --> 00:13:39,000
that gets the inbound text message user's text in and prints it out to check what it is.

179
00:13:39,000 --> 00:13:44,000
It then calls the OpenAI.completion.create method to use one of the Linguid models

180
00:13:44,000 --> 00:13:48,000
to generate text based on that inbound message variable.

181
00:13:48,000 --> 00:13:52,000
In order to specify our completion, we pass in some properties.

182
00:13:52,000 --> 00:13:57,000
We have model and prompt, which are required, and max tokens and temperature,

183
00:13:57,000 --> 00:13:58,000
which are optional.

184
00:13:58,000 --> 00:14:02,000
And we then send a text message containing the response return to OpenAI,

185
00:14:02,000 --> 00:14:06,000
and we can run our Flask application.

186
00:14:06,000 --> 00:14:11,000
So the properties we use, model, OpenAI Linguid model,

187
00:14:11,000 --> 00:14:15,000
use to generate an answer for the textual prompt.

188
00:14:15,000 --> 00:14:20,000
Here we use text wg3, the same one used in the background by ChatGPT,

189
00:14:20,000 --> 00:14:25,000
and the OpenAI docs list other models they offer, which differ in accuracy, speed,

190
00:14:25,000 --> 00:14:29,000
price, based on how they're trained.

191
00:14:29,000 --> 00:14:34,000
We have the prompt, the inbound text message we want to pass into the model,

192
00:14:34,000 --> 00:14:39,000
the optional property, max tokens, which controls the length of the text returned by the model,

193
00:14:39,000 --> 00:14:45,000
temperature, a number between 0 and 2, where the higher the value, the more random the output,

194
00:14:45,000 --> 00:14:51,000
while the lower the value, the more focused the output.

195
00:14:51,000 --> 00:14:56,000
And there's an optional frequency penalty parameter property that we do not use

196
00:14:56,000 --> 00:14:58,000
that controls repetition.

197
00:14:58,000 --> 00:15:04,000
Maybe you want your output to the model to be more repetitive or not repetitive.

198
00:15:04,000 --> 00:15:06,000
Lots of customization you can do.

199
00:15:06,000 --> 00:15:09,000
And I think that's where I like the OpenAI API.

200
00:15:09,000 --> 00:15:16,000
I'm not an ML developer, but they let me still control the output of their models.

201
00:15:16,000 --> 00:15:21,000
Right now, the app is running on my local machine, and it needs to be visible to the web,

202
00:15:21,000 --> 00:15:26,000
so Twilio knows what to do with an inbound text message, and it can run our application.

203
00:15:26,000 --> 00:15:30,000
ngrok is a development tool, not for production.

204
00:15:30,000 --> 00:15:35,000
Don't use ngrok in prod, that you can use to expose a server running locally on your machine

205
00:15:35,000 --> 00:15:39,000
to the public internet, possibly even behind a firewall.

206
00:15:39,000 --> 00:15:44,000
ngrok HTTP 5000 means the app running at port 5000 can be viewed from the web.

207
00:15:44,000 --> 00:15:47,000
Again, not from production.

208
00:15:47,000 --> 00:15:54,000
And then we take that URL, ngrok provides us at port 5000, configure a Twilio phone number with it,

209
00:15:54,000 --> 00:16:00,000
slash SMS, or out, and all this code, I'll give a link at the end.

210
00:16:00,000 --> 00:16:02,000
You can view it.

211
00:16:02,000 --> 00:16:04,000
And we have a phone number you can text.

212
00:16:04,000 --> 00:16:08,000
And I have some truffles from Yummy Joy, which I got here on the way here.

213
00:16:08,000 --> 00:16:12,000
And if you text this number something creative, the most creative one,

214
00:16:12,000 --> 00:16:18,000
and you tweet a screenshot, hashtag by Texas, you can win the truffles.

215
00:16:18,000 --> 00:16:19,000
That's something small.

216
00:16:19,000 --> 00:16:25,000
So the number 737-232-7398.

217
00:16:25,000 --> 00:16:31,000
Again, that is 737-232-7398.

218
00:16:32,000 --> 00:16:35,000
And that's me asking who is the best country music artist.

219
00:16:35,000 --> 00:16:38,000
I was curious.

220
00:16:38,000 --> 00:16:41,000
Again, 737-232-7398.

221
00:16:41,000 --> 00:16:43,000
OK.

222
00:16:43,000 --> 00:16:45,000
So what's next?

223
00:16:45,000 --> 00:16:50,000
With the OpenAI API, there's also the Dali API that can generate images.

224
00:16:50,000 --> 00:16:59,000
And I texted in some descriptions of images I wanted, and returned Pikachu drinking boba, a panda biking.

225
00:16:59,000 --> 00:17:01,000
You can have fun with that.

226
00:17:01,000 --> 00:17:03,000
I think image generation is pretty cool.

227
00:17:03,000 --> 00:17:05,000
Also support local artists.

228
00:17:05,000 --> 00:17:07,000
So ethics is a thing.

229
00:17:07,000 --> 00:17:09,000
Oh, going on a tangent.

230
00:17:09,000 --> 00:17:10,000
OK.

231
00:17:10,000 --> 00:17:15,000
So we use the DaVinci 3 model, which is a version of the DaVinci model,

232
00:17:15,000 --> 00:17:18,000
which is the most capable one offered by OpenAI.

233
00:17:18,000 --> 00:17:23,000
It can perform any task that the other models can perform, often with less instruction,

234
00:17:23,000 --> 00:17:26,000
but it does take longer because it's more accurate.

235
00:17:26,000 --> 00:17:33,000
Ada is the cheapest model because it's also the slowest and probably less accurate.

236
00:17:33,000 --> 00:17:34,000
That's not right.

237
00:17:34,000 --> 00:17:35,000
Fastest.

238
00:17:35,000 --> 00:17:38,000
Yeah, but there's also Babbage and Curie.

239
00:17:38,000 --> 00:17:41,000
All cost less than DaVinci.

240
00:17:41,000 --> 00:17:46,000
And you can see more in the OpenAI documentation.

241
00:17:46,000 --> 00:17:47,000
What's next?

242
00:17:47,000 --> 00:17:50,000
Documentation at OpenAI.

243
00:17:50,000 --> 00:17:52,000
I'm honestly not the biggest fan of the docs.

244
00:17:52,000 --> 00:17:55,000
I think there's a slight steep learning curve.

245
00:17:55,000 --> 00:17:56,000
Some of the vocabulary.

246
00:17:56,000 --> 00:18:00,000
I'm like, you don't need to know the vocabulary because they do abstract it away,

247
00:18:00,000 --> 00:18:04,000
but that can get in the way of some accessibility, I think.

248
00:18:04,000 --> 00:18:06,000
They do offer a nice playground.

249
00:18:06,000 --> 00:18:11,000
So you can play around with models, different parameters like temperature,

250
00:18:11,000 --> 00:18:17,000
straight in the browser, no need to make HTTP requests or API requests.

251
00:18:17,000 --> 00:18:21,000
And I'm a big fan of tutorials on medium.

252
00:18:21,000 --> 00:18:24,000
There's towards AI, towards data science.

253
00:18:24,000 --> 00:18:33,000
And they also cover like TensorFlow and other machine learning concepts in libraries.

254
00:18:33,000 --> 00:18:35,000
You can do more with machine learning.

255
00:18:35,000 --> 00:18:38,000
Python is the most popular language in machine learning.

256
00:18:38,000 --> 00:18:42,000
It's a high level and easy to use.

257
00:18:42,000 --> 00:18:44,000
Google Cloud, Microsoft Azure.

258
00:18:44,000 --> 00:18:47,000
Google Cloud and Microsoft Azure don't let you customize as much,

259
00:18:47,000 --> 00:18:51,000
but I think they're the easiest to use.

260
00:18:51,000 --> 00:18:54,000
And you can also fine tune your models with OpenAI,

261
00:18:54,000 --> 00:18:57,000
and that means that you add more sample data.

262
00:18:57,000 --> 00:19:00,000
You add more examples that can fit into the prompt,

263
00:19:00,000 --> 00:19:06,000
so you can customize the model even more.

264
00:19:06,000 --> 00:19:08,000
And once a model has been fine tuned,

265
00:19:08,000 --> 00:19:15,000
you won't need to provide as many examples in the prompt anymore.

266
00:19:15,000 --> 00:19:18,000
Use model after fine tuning.

267
00:19:18,000 --> 00:19:20,000
So thank you.

268
00:19:20,000 --> 00:19:22,000
I'll be on the side afterwards for questions.

269
00:19:22,000 --> 00:19:24,000
You can find me online here.

270
00:19:24,000 --> 00:19:29,000
And there's a blog post tutorial with more of this code at tools.io slash PyTexas.

271
00:19:29,000 --> 00:19:31,000
Thank you.

