1
00:00:00,000 --> 00:00:10,740
Delighted to be here, and my talk today is going to be called Walking the Line.

2
00:00:10,740 --> 00:00:16,360
I will open with an example, some example code.

3
00:00:16,360 --> 00:00:20,260
Let's start writing a quick Python script.

4
00:00:20,260 --> 00:00:28,480
Our script, given a sample Python program, will consider edits, adding or deleting one

5
00:00:28,480 --> 00:00:29,480
character.

6
00:00:29,880 --> 00:00:33,280
Python syntax is flexible, but how flexible is it?

7
00:00:33,280 --> 00:00:39,480
Of all possible edits to a file, how many produce valid code?

8
00:00:39,480 --> 00:00:40,800
All right.

9
00:00:40,800 --> 00:00:44,200
As I was ready to start writing the example, I thought, oh, well, wait.

10
00:00:44,200 --> 00:00:46,920
What sample program should the script edit?

11
00:00:46,920 --> 00:00:49,200
Should it be print hello world?

12
00:00:49,200 --> 00:00:54,560
Should it be something a little more indentation with an if statement or a for loop?

13
00:00:54,560 --> 00:00:59,020
Then I realized, just have the script edit itself.

14
00:00:59,020 --> 00:01:02,940
Then I only have to write one sample script instead of two.

15
00:01:02,940 --> 00:01:07,980
And thanks to Python running from source, it's easy to do.

16
00:01:07,980 --> 00:01:10,940
Let's just have it edit its own source code.

17
00:01:10,940 --> 00:01:13,020
So I started like this.

18
00:01:13,020 --> 00:01:16,940
Text equals open dunder file dot read.

19
00:01:16,940 --> 00:01:19,740
This works because dunder file isn't a file.

20
00:01:19,740 --> 00:01:21,660
Otherwise it would return an error.

21
00:01:21,660 --> 00:01:24,540
Dunder file is the path to the current source file.

22
00:01:24,540 --> 00:01:27,040
They should have called it dunder path.

23
00:01:27,040 --> 00:01:33,680
So this tells a program to read in its own text as a string.

24
00:01:33,680 --> 00:01:38,200
This was a single line until I had to format it for the narrow slide.

25
00:01:38,200 --> 00:01:43,600
I do a simple list comprehension in order to loop over all of the indexes into this

26
00:01:43,600 --> 00:01:46,840
large string, well, three line string.

27
00:01:46,840 --> 00:01:54,040
And for each index, I construct a different copy of this code that has one character missing

28
00:01:54,040 --> 00:01:57,880
each of them in succession.

29
00:01:57,880 --> 00:02:02,800
And then as I was writing this script, I stopped.

30
00:02:02,800 --> 00:02:08,280
When I'm ready to move from one thought to the next, from building these strings to testing

31
00:02:08,280 --> 00:02:15,240
them, I have a habit of quickly stopping and checking my code so far.

32
00:02:15,240 --> 00:02:19,400
So I added a line that's not going to make it into the final version of the script, I

33
00:02:19,880 --> 00:02:21,920
will be a very verbose script.

34
00:02:21,920 --> 00:02:28,560
But I just threw in a little line of code and went ahead and paused for a half second.

35
00:02:28,560 --> 00:02:31,800
This triggers Emacs to syntax check the script.

36
00:02:31,800 --> 00:02:34,360
The result, no errors.

37
00:02:34,360 --> 00:02:36,600
Doing good so far.

38
00:02:36,600 --> 00:02:39,240
And then I hit save.

39
00:02:39,240 --> 00:02:44,680
Saving kicks off an automatic run of the script over in my terminal window.

40
00:02:44,680 --> 00:02:48,920
In the old days, this was often not worth it because on old machines it would have meant

41
00:02:48,920 --> 00:02:50,240
polling, right?

42
00:02:50,240 --> 00:02:54,040
It would have meant having to write a little script that every second wakes up and checks

43
00:02:54,040 --> 00:03:00,400
the modify time of all of your Python files in order to rerun your script if one of them

44
00:03:00,400 --> 00:03:01,760
had changed.

45
00:03:01,760 --> 00:03:04,760
And polling is expensive when there are no edits.

46
00:03:04,760 --> 00:03:08,960
Second after second, it's having to check all those modify times, burning up our remaining

47
00:03:08,960 --> 00:03:13,020
coal off of our power grid for nothing.

48
00:03:13,020 --> 00:03:14,540
And it's slow when there are edits.

49
00:03:14,540 --> 00:03:18,760
You hit save and then wind up waiting for the next second to turn over so that the script

50
00:03:18,760 --> 00:03:19,760
runs.

51
00:03:19,760 --> 00:03:22,120
It didn't tempt me back in the old days.

52
00:03:22,120 --> 00:03:27,120
But today, Linux offers inotify, your own operating system if it's different, probably

53
00:03:27,120 --> 00:03:30,360
has such a mechanism as well, with inotify.

54
00:03:30,360 --> 00:03:32,840
A process can sleep.

55
00:03:32,840 --> 00:03:38,680
Using zero CPU, waiting for changes to a file, it tells the OS, wake me up if there's a change

56
00:03:38,680 --> 00:03:44,720
to one of these files, and the OS then wakes the process the instant the edit is saved.

57
00:03:44,720 --> 00:03:52,160
So it doesn't waste time in CPU, and it runs instantly when you modify a file.

58
00:03:52,160 --> 00:03:57,680
If you want to see the ways I've adapted that mechanism, in my GitHub repo called homedir,

59
00:03:57,680 --> 00:04:02,880
where I have my scripts and setup files, I have something called watch.

60
00:04:02,880 --> 00:04:09,080
I can give it any command, make or build or Python, with some arguments.

61
00:04:09,080 --> 00:04:13,000
Then a double dash and the whole list of files that it should watch.

62
00:04:13,000 --> 00:04:17,480
Whenever one of those files is modified, thanks to the magic of the operating system, I then

63
00:04:17,480 --> 00:04:19,720
rerun that command.

64
00:04:19,720 --> 00:04:25,400
I then got tired of typing this because the command was almost always Python and the list

65
00:04:25,400 --> 00:04:30,280
of files was almost always all the py files beneath this directory.

66
00:04:30,280 --> 00:04:34,920
So I then created a second shell script, which is an abbreviation of that.

67
00:04:34,920 --> 00:04:42,320
You can look at both of those if you're interested in how I wrote up inotify powered automation.

68
00:04:42,360 --> 00:04:48,640
Thanks to that automation, I hit save and can glance over at my terminal window to see the

69
00:04:48,640 --> 00:04:50,800
output of the script.

70
00:04:50,800 --> 00:04:51,960
And in this case, it worked.

71
00:04:51,960 --> 00:04:57,880
I saw a huge list with lots of different versions of this code, all of which were missing a

72
00:04:57,880 --> 00:05:00,560
single character as I intended.

73
00:05:00,560 --> 00:05:01,800
So I'm feeling pretty lucky.

74
00:05:01,800 --> 00:05:05,480
I wrote a couple of lines of code without an error.

75
00:05:05,480 --> 00:05:10,600
We will honor that visually with a green dot.

76
00:05:10,600 --> 00:05:11,600
I'm now going to edit.

77
00:05:11,760 --> 00:05:16,280
We will represent that as an arrow from one state to another.

78
00:05:16,280 --> 00:05:17,280
All right.

79
00:05:17,280 --> 00:05:19,520
So first, remove the print line.

80
00:05:19,520 --> 00:05:23,240
I remembered to remove the debugging print statement.

81
00:05:23,240 --> 00:05:32,640
And now I want to loop over all of those candidate Python code and try evaling each one to see

82
00:05:32,640 --> 00:05:38,000
which one of them raised syntax errors and which one of them didn't introduce a fatal

83
00:05:38,080 --> 00:05:41,960
syntax error into this script.

84
00:05:41,960 --> 00:05:45,120
My expectation is that I'll get a syntax error.

85
00:05:45,120 --> 00:05:46,240
So I hit save.

86
00:05:46,240 --> 00:05:48,000
I glance over at the terminal window.

87
00:05:48,000 --> 00:05:53,440
And again, when I was younger, I wasted so much time, so much time going over to the

88
00:05:53,440 --> 00:05:58,640
terminal window, hitting up arrow, hitting enter to rerun the previous command.

89
00:05:58,640 --> 00:05:59,640
Then I wised up.

90
00:05:59,640 --> 00:06:03,320
And now I pay a computer to do it for me.

91
00:06:03,320 --> 00:06:04,320
I hit save.

92
00:06:04,320 --> 00:06:07,560
I look at my terminal window and I see a syntax error.

93
00:06:07,720 --> 00:06:10,160
So I'm going to count that as a success.

94
00:06:10,160 --> 00:06:11,160
This might surprise you.

95
00:06:11,160 --> 00:06:12,160
It's an error.

96
00:06:12,160 --> 00:06:14,240
But it's the error I was expecting.

97
00:06:14,240 --> 00:06:18,960
It's an error that is natural for the new state that I've brought the script to.

98
00:06:18,960 --> 00:06:24,400
So I'm going to color it green because I understand what the script is doing and I can still make

99
00:06:24,400 --> 00:06:25,400
progress.

100
00:06:25,400 --> 00:06:26,400
I did an experiment.

101
00:06:26,400 --> 00:06:27,760
I got the expected result.

102
00:06:27,760 --> 00:06:28,760
All right.

103
00:06:28,760 --> 00:06:32,360
Next, we don't want to let the syntax errors kill this program.

104
00:06:32,360 --> 00:06:33,840
We want to count them.

105
00:06:33,840 --> 00:06:39,000
And so I'm going to wrap a try except around the eval so I can count how many syntax errors

106
00:06:39,000 --> 00:06:42,440
happen versus how many versions of the script are still okay.

107
00:06:42,440 --> 00:06:44,720
I guess I need a counts dictionary.

108
00:06:44,720 --> 00:06:45,720
So I jump up.

109
00:06:45,720 --> 00:06:50,280
I often write code out of order because I'm following my ideas as they come, which isn't

110
00:06:50,280 --> 00:06:52,560
necessarily top to bottom.

111
00:06:52,560 --> 00:06:55,560
And then at the end, print that out.

112
00:06:55,560 --> 00:06:59,720
So I hit save and looked over at my terminal.

113
00:07:00,720 --> 00:07:04,040
Oh, that's not what I wanted.

114
00:07:04,040 --> 00:07:10,680
Every single one character edit to this file is producing a syntax error.

115
00:07:10,680 --> 00:07:13,040
That does not seem likely.

116
00:07:13,040 --> 00:07:16,040
So I realize that something's wrong.

117
00:07:16,040 --> 00:07:17,600
Drat.

118
00:07:17,600 --> 00:07:21,760
And so I will represent that graphically as I'm now in a state I don't understand.

119
00:07:21,760 --> 00:07:25,960
I've tried to add some code and it's not working.

120
00:07:25,960 --> 00:07:27,800
So what's going on?

121
00:07:27,800 --> 00:07:28,800
Let's back up.

122
00:07:28,800 --> 00:07:33,480
I can safely comment it out, the try except, and hit save.

123
00:07:33,480 --> 00:07:36,680
Let's look at this syntax error again.

124
00:07:36,680 --> 00:07:38,680
What is this even?

125
00:07:38,680 --> 00:07:39,680
Going and looking at the source.

126
00:07:39,680 --> 00:07:42,360
So I looked at the source, looked at the terminal window.

127
00:07:42,360 --> 00:07:46,680
The first line of the file is text equals open, et cetera.

128
00:07:46,680 --> 00:07:50,680
The candidate string is xed equals open.

129
00:07:50,680 --> 00:07:52,240
I notice immediately two things.

130
00:07:52,240 --> 00:07:54,200
One, this is the very first string, right?

131
00:07:54,240 --> 00:07:59,040
I'm creating a list of all possible characters that you can remove from the file.

132
00:07:59,040 --> 00:08:01,000
The initial t is the first one.

133
00:08:01,000 --> 00:08:03,760
So I'm failing on the very first string.

134
00:08:03,760 --> 00:08:06,560
Second, I notice this isn't a syntax error.

135
00:08:06,560 --> 00:08:10,360
I mean, it'll hit, if you tried running this, it would have a name error later when you

136
00:08:10,360 --> 00:08:12,280
tried to use text and it wasn't there.

137
00:08:12,280 --> 00:08:17,600
But ext is a perfectly good name in Python.

138
00:08:17,600 --> 00:08:21,960
And the caret is pointing at the equals sign.

139
00:08:21,960 --> 00:08:25,240
Not at the edit.

140
00:08:25,240 --> 00:08:27,800
Oh, and suddenly I realized what I'd done wrong.

141
00:08:27,800 --> 00:08:29,560
I've seen this before.

142
00:08:29,560 --> 00:08:35,640
I, in my terminal window, run PyDoc eval just to check its documentation.

143
00:08:35,640 --> 00:08:40,120
The source may be a string representing a Python expression.

144
00:08:40,120 --> 00:08:42,840
Eval isn't powerful enough to run a whole module.

145
00:08:42,840 --> 00:08:44,880
It just wants an expression.

146
00:08:44,880 --> 00:08:48,680
And that's why the equals sign is the problem.

147
00:08:48,680 --> 00:08:53,520
Because it's the equals sign that makes this a statement rather than simply a simple Python

148
00:08:53,520 --> 00:08:54,520
expression.

149
00:08:54,520 --> 00:08:56,840
All right, I see how to move forward.

150
00:08:56,840 --> 00:08:58,680
I'm not supposed to eval the code.

151
00:08:58,680 --> 00:09:02,640
In good grief, thank goodness it didn't work, or the script would have called itself until

152
00:09:02,640 --> 00:09:04,240
I ran out of memory.

153
00:09:04,240 --> 00:09:07,200
Eval doesn't just try to compile code, it instantly runs it.

154
00:09:07,200 --> 00:09:10,360
So that was a good dodge there.

155
00:09:10,360 --> 00:09:12,200
I don't want to call eval.

156
00:09:12,200 --> 00:09:14,960
I just want to see if the code compiles.

157
00:09:14,960 --> 00:09:20,320
And I need this to try to compile it, not as a simple expression, but that exact argument

158
00:09:20,320 --> 00:09:26,320
is going to tell it, no, no, no, this is the text of a whole Python module.

159
00:09:26,320 --> 00:09:29,120
So I hit save.

160
00:09:29,120 --> 00:09:31,900
And out came the successful result.

161
00:09:31,900 --> 00:09:38,560
Of all the possible characters you can backspace over, Python's fairly lenient syntax only

162
00:09:38,560 --> 00:09:41,240
generates errors about a third of the time.

163
00:09:41,240 --> 00:09:46,880
The other two thirds of the time, the file still comes out as one that Python can try

164
00:09:46,880 --> 00:09:50,000
running if I asked it to.

165
00:09:50,000 --> 00:09:51,440
Success.

166
00:09:51,440 --> 00:09:52,880
Let's stop there.

167
00:09:52,880 --> 00:09:55,040
The example has served its purpose.

168
00:09:55,040 --> 00:09:59,680
If you're curious later, try adding a line or two to the script that also tries all possible

169
00:09:59,680 --> 00:10:00,680
inserts.

170
00:10:00,680 --> 00:10:07,160
But at this point, we have a rich enough diagram in order for us to proceed with the topic

171
00:10:07,160 --> 00:10:09,680
of this talk.

172
00:10:09,680 --> 00:10:18,280
Let's now improve our diagram to better correspond to my emotions.

173
00:10:18,280 --> 00:10:24,700
My mistake with eval didn't feel to me like progress forward.

174
00:10:24,700 --> 00:10:27,620
It felt like a detour.

175
00:10:27,620 --> 00:10:35,800
When my code breaks, I feel like I've crossed an invisible line that separates working programs

176
00:10:35,800 --> 00:10:38,500
from broken ones.

177
00:10:38,500 --> 00:10:41,260
So let's make two changes to this diagram.

178
00:10:41,260 --> 00:10:45,740
One, let's get that broken state, that moment when I didn't understand what the script was

179
00:10:45,740 --> 00:10:48,580
doing and had to go back to debug.

180
00:10:48,580 --> 00:10:55,980
And let's set that to the side of the main line of progress, my main line of development.

181
00:10:55,980 --> 00:11:04,420
And second, let's draw in that line that I feel like I've crossed when I go from working

182
00:11:04,900 --> 00:11:09,020
code to broken code.

183
00:11:09,020 --> 00:11:15,980
Hence the title of this talk, walking the line.

184
00:11:15,980 --> 00:11:21,740
This talk asks the question, how does programming feel?

185
00:11:21,740 --> 00:11:27,140
So this talk discusses the two states, green and red.

186
00:11:27,140 --> 00:11:30,540
Green leaves us free to make more progress.

187
00:11:30,540 --> 00:11:36,300
Red leaves us stuck until it's fixed.

188
00:11:36,300 --> 00:11:39,980
Let's start by talking about green.

189
00:11:39,980 --> 00:11:41,500
Developers love green.

190
00:11:41,500 --> 00:11:47,020
We won't have too much to say about it here in a talk on the emotions of walking the line.

191
00:11:47,020 --> 00:11:51,220
It's the default starting point if you wake up and start editing a working program and

192
00:11:51,220 --> 00:11:54,220
the happy end when you're ready to commit.

193
00:11:54,220 --> 00:11:57,820
Generally, our only problem is wanting more of it.

194
00:11:57,820 --> 00:12:02,020
Finishing, we spent more of our day writing working code.

195
00:12:02,020 --> 00:12:09,540
So how could green, if it's such a good thing, wind up manipulating our emotions?

196
00:12:09,540 --> 00:12:16,300
How could desire for it warp how we write code?

197
00:12:16,300 --> 00:12:24,620
For me, a big problem is driving too hard and too long towards green in the mistaken

198
00:12:24,620 --> 00:12:30,540
belief that I'm almost there, if only I just keep going.

199
00:12:30,540 --> 00:12:34,820
I don't know if for you, the story will be a familiar one.

200
00:12:34,820 --> 00:12:39,700
You start making what feels like a simple change and you're almost done when you realize

201
00:12:39,700 --> 00:12:42,300
that there's a method that now needs a new argument.

202
00:12:42,300 --> 00:12:45,020
Well, so you go and you start adding the new argument.

203
00:12:45,020 --> 00:12:50,740
Oh, and that requires a new data structure to be created when the class is initialized.

204
00:12:51,220 --> 00:12:55,420
Well, that requires the class initializer to be slightly more complicated.

205
00:12:55,420 --> 00:13:00,700
And pretty soon, you're very deep into a pile of changes that all need each other.

206
00:13:00,700 --> 00:13:06,340
And so you haven't yet been able to test or to see what the code now does.

207
00:13:06,340 --> 00:13:10,940
And it is only after a pile of changes are complete that you finally are able to hit

208
00:13:10,940 --> 00:13:16,700
save and see that what you've written is completely broken and may be broken in multiple

209
00:13:16,700 --> 00:13:17,700
ways.

210
00:13:17,700 --> 00:13:22,980
And you now don't even know how far away the line is as you begin the long climb back

211
00:13:22,980 --> 00:13:28,260
out to understand what you've done wrong with your code.

212
00:13:28,260 --> 00:13:34,500
All other things being equal, fixing code early when you're still close to the line

213
00:13:34,500 --> 00:13:40,220
is cheap, while fixing code later is expensive.

214
00:13:40,220 --> 00:13:43,700
So why would I write so much code at once?

215
00:13:44,380 --> 00:13:50,580
Well, my drive to push harder and harder to make it back across the line to green prevents

216
00:13:50,580 --> 00:13:57,420
me from stopping to properly solve my side quests.

217
00:13:57,420 --> 00:14:00,180
What are side quests?

218
00:14:00,180 --> 00:14:06,620
It's when you discover that the change you are making requires other changes that maybe

219
00:14:06,620 --> 00:14:11,100
themselves each require further changes.

220
00:14:11,260 --> 00:14:15,460
Two paths then lie before you.

221
00:14:15,460 --> 00:14:22,100
Solve every side quest right there creating one single massive change.

222
00:14:22,100 --> 00:14:24,300
Or stop.

223
00:14:24,300 --> 00:14:32,020
Run get stash or commit to a branch to put aside your main goal and make the side quest

224
00:14:32,020 --> 00:14:38,060
a first class objective that gets its own commit.

225
00:14:38,060 --> 00:14:43,580
There's a famous comment by someone named Kent Beck about whom I don't know a single

226
00:14:43,580 --> 00:14:47,780
thing except that he made this famous tweet.

227
00:14:47,780 --> 00:14:51,580
Make the change easy.

228
00:14:51,580 --> 00:14:54,700
Then make the easy change.

229
00:14:54,700 --> 00:14:59,900
The idea is that instead of starting to make my big change and when the warning signs appear

230
00:14:59,900 --> 00:15:06,500
that it requires even further steps, just going ahead and trying to do them all at once,

231
00:15:06,740 --> 00:15:13,620
instead, as the attempt to make the big change teaches you what it needs, stop and do each

232
00:15:13,620 --> 00:15:21,460
of those as smaller self-contained changes before you then try the difficult change at

233
00:15:21,460 --> 00:15:22,820
the end.

234
00:15:22,820 --> 00:15:28,540
That way you wind up on the productive side of the line with only occasional excursions

235
00:15:28,540 --> 00:15:29,540
across.

236
00:15:29,540 --> 00:15:34,980
A few people remember, though, that's not actually the full tweet.

237
00:15:34,980 --> 00:15:38,020
Make the change easy then make the easy change.

238
00:15:38,020 --> 00:15:39,020
What he wrote was this.

239
00:15:39,020 --> 00:15:43,780
A few people remember that that's not the full text of the tweet.

240
00:15:43,780 --> 00:15:51,140
Kent Beck actually tweeted for each desired change, make the change easy, open per in,

241
00:15:51,140 --> 00:15:57,220
warning this may be hard, close per in, then make the easy change.

242
00:15:57,220 --> 00:16:03,580
So even as he gave this advice, he acknowledged this doesn't always make things easy.

243
00:16:03,620 --> 00:16:11,180
And so he acknowledged that even the refactorings we do before making a change, even doing things

244
00:16:11,180 --> 00:16:15,300
in that correct order, we might still run into bumps in the road.

245
00:16:15,300 --> 00:16:21,380
The point is that we stray much less far from the line if we do preparatory refactoring

246
00:16:21,380 --> 00:16:27,380
before a big change than if we try to bundle everything into a single commit.

247
00:16:27,380 --> 00:16:32,940
The side quests themselves can be difficult, but not as difficult as pulling the whole

248
00:16:33,100 --> 00:16:39,140
world apart at once and only then trying to repair it.

249
00:16:39,140 --> 00:16:44,300
So that's what I had to say about the emotions around green.

250
00:16:44,300 --> 00:16:51,420
Let's now move on to the somewhat meatier topic of our emotions around red.

251
00:16:51,420 --> 00:16:55,460
Do we programmers ever want red?

252
00:16:55,460 --> 00:16:59,420
Do we ever want to break things?

253
00:16:59,420 --> 00:17:01,460
Yes.

254
00:17:01,460 --> 00:17:04,580
Oh, yes.

255
00:17:04,580 --> 00:17:11,100
One obvious case is test-driven development called TDD in the biz.

256
00:17:11,100 --> 00:17:13,580
It would be a whole talk of its own.

257
00:17:13,580 --> 00:17:18,580
I will simply say here, if you haven't used it before, it's a technique where you start

258
00:17:18,580 --> 00:17:23,660
by writing a failing test of a new feature that you're about to add.

259
00:17:23,660 --> 00:17:26,380
Failing because you haven't written the feature yet.

260
00:17:26,380 --> 00:17:31,380
Then you write the code to turn the test green by adding that feature.

261
00:17:31,380 --> 00:17:33,740
And then you repeat.

262
00:17:33,740 --> 00:17:38,340
For our purposes here, I'll just note that it does have a few advantages in situations

263
00:17:38,340 --> 00:17:42,380
you're able to practice it, which I'll just go ahead and say, usually when you're first

264
00:17:42,380 --> 00:17:48,340
writing something, you don't understand it well enough to TDD it.

265
00:17:48,340 --> 00:17:51,940
This is for kind of the second time that you write something when you know what you're

266
00:17:51,940 --> 00:17:52,940
doing.

267
00:17:53,540 --> 00:17:54,540
I try writing a change.

268
00:17:54,540 --> 00:17:59,340
At the bitter end of failure, I realize what it should have looked like.

269
00:17:59,340 --> 00:18:02,500
Now I know enough to back up and TDD it.

270
00:18:02,500 --> 00:18:05,180
But here I'll just note three things.

271
00:18:05,180 --> 00:18:12,540
TDD does get the worst thing writing the test over first.

272
00:18:12,540 --> 00:18:17,620
How many times does a test not get written because you save it for the end and by the

273
00:18:17,620 --> 00:18:20,500
time you're done, you just want to commit.

274
00:18:20,500 --> 00:18:24,780
You're not going to stop and write a test.

275
00:18:24,780 --> 00:18:25,780
That's not true.

276
00:18:25,780 --> 00:18:29,500
It's actually the documentation that's worse.

277
00:18:29,500 --> 00:18:33,500
And most likely to be skipped, but who's counting?

278
00:18:33,500 --> 00:18:37,740
TDD arranges a nice reward for when you finish.

279
00:18:37,740 --> 00:18:40,180
The test goes green.

280
00:18:40,180 --> 00:18:44,820
And it by its nature produces a decently well-tested code base.

281
00:18:44,820 --> 00:18:46,500
It has its advantages.

282
00:18:46,500 --> 00:18:49,220
But I'm not going to talk about it a lot.

283
00:18:49,220 --> 00:18:55,140
Just for the purposes of this talk, let's just note that TDD just leverages your usual

284
00:18:55,140 --> 00:18:57,100
negative emotions about red.

285
00:18:57,100 --> 00:19:00,100
There's nothing really edgy or surprising about it.

286
00:19:00,100 --> 00:19:05,980
You want the red to go away, so you write code that satisfies the new test.

287
00:19:05,980 --> 00:19:10,820
Leverages perfectly normal emotions around red and green.

288
00:19:10,820 --> 00:19:16,980
But it's the claim of this talk that emotions can also work the other way around.

289
00:19:16,980 --> 00:19:23,180
It is the claim of this talk that there are situations where you aren't avoiding red.

290
00:19:23,180 --> 00:19:25,460
You're seeking it out.

291
00:19:25,460 --> 00:19:33,220
What, I hear you ask, could lead to that?

292
00:19:33,220 --> 00:19:37,780
Feelings of insecurity.

293
00:19:37,780 --> 00:19:40,900
Let's consider three.

294
00:19:40,900 --> 00:19:45,060
Number one, too much green.

295
00:19:45,060 --> 00:19:48,580
Imagine that you're performing extensive refactoring.

296
00:19:48,580 --> 00:19:54,220
Each time you save, you're thrilled the result is still green.

297
00:19:54,220 --> 00:20:01,980
You're just going and going along the line and never tipping over into broken code.

298
00:20:01,980 --> 00:20:10,340
Your streak of green runs longer and longer until your spidey sense kicks in and you suddenly

299
00:20:10,340 --> 00:20:13,820
feel a tiny bit incredulous.

300
00:20:13,820 --> 00:20:18,540
Am I really this good at refactoring?

301
00:20:18,540 --> 00:20:21,540
And then suddenly the thought strikes.

302
00:20:21,540 --> 00:20:24,140
Hey, wait.

303
00:20:24,140 --> 00:20:27,020
The tests are running my code.

304
00:20:27,020 --> 00:20:28,460
Right?

305
00:20:28,460 --> 00:20:29,940
Right?

306
00:20:29,940 --> 00:20:32,500
Taps mic.

307
00:20:32,500 --> 00:20:34,460
Is this on?

308
00:20:34,460 --> 00:20:39,060
So at such moments of terror, I invoke a maneuver.

309
00:20:39,060 --> 00:20:42,260
My ASDF check.

310
00:20:42,380 --> 00:20:45,300
Control E jumps to the end of the line.

311
00:20:45,300 --> 00:20:48,940
Return opens a new line and indents to the level of the previous one.

312
00:20:48,940 --> 00:20:56,140
And I just roll my left hand across home row ASDF.

313
00:20:56,140 --> 00:20:57,860
And then I hit save.

314
00:20:57,860 --> 00:21:03,700
I've now added a line of code that would not be a valid line of code in any Python program

315
00:21:03,700 --> 00:21:05,460
I have ever written.

316
00:21:05,460 --> 00:21:08,460
What am I going to see on the screen?

317
00:21:08,460 --> 00:21:12,900
If all is well, then I will see the happy result.

318
00:21:12,900 --> 00:21:14,780
Name error.

319
00:21:14,780 --> 00:21:18,700
Name ASDF is not defined.

320
00:21:18,700 --> 00:21:23,140
And I will keep coding, confident in my own righteousness.

321
00:21:23,140 --> 00:21:28,500
I really was refactoring that well.

322
00:21:28,500 --> 00:21:31,020
But what if I don't see it?

323
00:21:31,020 --> 00:21:34,980
What if I just see more green?

324
00:21:35,980 --> 00:21:38,980
Oh, no.

325
00:21:38,980 --> 00:21:41,980
Disaster.

326
00:21:41,980 --> 00:21:48,980
All that time I thought my work was being checked and I thought it was excellent.

327
00:21:48,980 --> 00:21:52,980
And instead, I have no idea what my state is.

328
00:21:52,980 --> 00:21:55,980
Am I on one side of the line or the other?

329
00:21:55,980 --> 00:21:58,980
I have no indication.

330
00:21:58,980 --> 00:22:01,980
What could have gone wrong?

331
00:22:01,980 --> 00:22:03,980
What could have gone wrong?

332
00:22:03,980 --> 00:22:07,980
Some of the following scenarios might be familiar.

333
00:22:07,980 --> 00:22:09,980
And this is only a sampling.

334
00:22:09,980 --> 00:22:13,980
One, you are, alas, in the wrong project.

335
00:22:13,980 --> 00:22:18,980
No number of edits to the models.py file in your campsite project

336
00:22:18,980 --> 00:22:22,980
are going to change the behavior of your bookworm project.

337
00:22:22,980 --> 00:22:25,980
You can keep editing for as long as you want.

338
00:22:25,980 --> 00:22:27,980
It's not going to make a difference.

339
00:22:27,980 --> 00:22:30,980
Two, you're editing the right project.

340
00:22:30,980 --> 00:22:33,980
But this project is checked out twice on your laptop.

341
00:22:33,980 --> 00:22:37,980
And you're editing one copy while running the other.

342
00:22:37,980 --> 00:22:42,980
Three, you need to hit shift reload, not plain reload,

343
00:22:42,980 --> 00:22:45,980
for your browser to see that edit to your CSS.

344
00:22:45,980 --> 00:22:48,980
That's why the color's not changing.

345
00:22:48,980 --> 00:22:52,980
I see someone clutching themselves in the audience.

346
00:22:52,980 --> 00:22:55,980
Your editor's jump to function definition shortcut

347
00:22:55,980 --> 00:23:00,980
decided to jump into site packages instead of into a repository.

348
00:23:00,980 --> 00:23:05,980
So you're editing some installed copy of that package

349
00:23:05,980 --> 00:23:08,980
instead of the one you have checked out.

350
00:23:08,980 --> 00:23:12,980
Bonus points if you forget to remove ASDF.

351
00:23:12,980 --> 00:23:15,980
And months later you run some other Python application

352
00:23:15,980 --> 00:23:18,980
and see name error.

353
00:23:18,980 --> 00:23:21,980
ASDF is not defined.

354
00:23:21,980 --> 00:23:26,980
Five, you're editing local code on your laptop

355
00:23:26,980 --> 00:23:30,980
but reloading a remote version of the site.

356
00:23:30,980 --> 00:23:33,980
You thought that your browser was looking at localhost shopping cart

357
00:23:33,980 --> 00:23:35,980
as you debug it.

358
00:23:35,980 --> 00:23:39,980
And accidentally you're looking at the example out on a server.

359
00:23:39,980 --> 00:23:42,980
And so your edits don't matter.

360
00:23:42,980 --> 00:23:46,980
Six, you did open the remote copy of the file,

361
00:23:46,980 --> 00:23:50,980
but your SSHFS connection automatically for things across the network

362
00:23:50,980 --> 00:23:55,980
has gone down, so you are now merely saving files locally.

363
00:23:55,980 --> 00:24:01,980
Seven, a disk error forced your file system to remount read-only,

364
00:24:01,980 --> 00:24:03,980
but your editor isn't telling you.

365
00:24:03,980 --> 00:24:07,980
Now why? That's a deep sin by an editor.

366
00:24:07,980 --> 00:24:11,980
Like you rely on knowing your code has been persisted if you hit sync.

367
00:24:11,980 --> 00:24:16,980
Well, because the cool fancy new color highlighted third-party error

368
00:24:16,980 --> 00:24:23,980
reporting plugin you decided to install dies silently on a read-only file system.

369
00:24:23,980 --> 00:24:26,980
Not your editor's fault.

370
00:24:26,980 --> 00:24:30,980
All right, are you ready for the bonus round?

371
00:24:30,980 --> 00:24:34,980
Eight, remember the end of the day last Friday?

372
00:24:34,980 --> 00:24:37,980
Your coworkers were already gathered by the elevator

373
00:24:37,980 --> 00:24:41,980
waiting for you to join them and go out and start the weekend.

374
00:24:41,980 --> 00:24:47,980
When your boss hustled up and asked if the app works on leap day.

375
00:24:47,980 --> 00:24:50,980
Silly question because the app isn't particularly date sensitive.

376
00:24:50,980 --> 00:24:55,980
Apparently the boss just read an article about leap day bugs

377
00:24:55,980 --> 00:24:57,980
and so now he's taking it out on you.

378
00:24:57,980 --> 00:25:01,980
All right, so this isn't something that's worth setting up a permanent build to test.

379
00:25:01,980 --> 00:25:05,980
You're just going to show locally that things work.

380
00:25:05,980 --> 00:25:08,980
So you set your system clock briefly to next February 29th,

381
00:25:08,980 --> 00:25:13,980
hit restart, hit reload and showed that your app still worked.

382
00:25:13,980 --> 00:25:17,980
Then you were able, then you fixed your system clock,

383
00:25:17,980 --> 00:25:20,980
headed out with your friends.

384
00:25:20,980 --> 00:25:23,980
It's now Monday morning.

385
00:25:23,980 --> 00:25:28,980
Turns out all the PYC files written during those five minutes

386
00:25:28,980 --> 00:25:33,980
are dated 2024, February 29th.

387
00:25:33,980 --> 00:25:36,980
Which is in the future.

388
00:25:36,980 --> 00:25:42,980
Which makes those PYC files more recent than anything you save today.

389
00:25:42,980 --> 00:25:47,980
So Python is ignoring your new PY edit.

390
00:25:47,980 --> 00:25:53,980
Tell me, tell me I'm making this up.

391
00:25:53,980 --> 00:25:59,980
My blanket advice, by the way, while we're on the subject, turn off PYC files.

392
00:25:59,980 --> 00:26:05,980
It was in 2014 that I added this line to my system environment.

393
00:26:05,980 --> 00:26:08,980
Python, don't write bytecode.

394
00:26:08,980 --> 00:26:13,980
I have never once regretted it.

395
00:26:13,980 --> 00:26:19,980
Any of these underlying causes will make you want to cross the line.

396
00:26:19,980 --> 00:26:25,980
They make you want to break things and see real consequences.

397
00:26:25,980 --> 00:26:35,980
They reverse your normal psychology and make you going out looking for that barrier.

398
00:26:35,980 --> 00:26:37,980
Feelings of insecurity.

399
00:26:37,980 --> 00:26:40,980
Here's a second one.

400
00:26:40,980 --> 00:26:42,980
My tests are running.

401
00:26:42,980 --> 00:26:45,980
I can see that my edits are having an effect.

402
00:26:45,980 --> 00:26:48,980
But are my tests protecting me?

403
00:26:48,980 --> 00:26:51,980
It's an especially important question before a big refactor.

404
00:26:51,980 --> 00:26:57,980
When you start trying to change code around, add and remove parentheses from difficult expressions,

405
00:26:57,980 --> 00:27:02,980
do you know that your tests will catch you if you mess up?

406
00:27:02,980 --> 00:27:06,980
We see a line of code sometimes and think, oh, that's interesting.

407
00:27:06,980 --> 00:27:08,980
Is this tested?

408
00:27:08,980 --> 00:27:10,980
I'll give a modest example.

409
00:27:10,980 --> 00:27:20,980
I always get mixed up and have to think back through what Max does if used with a constant like negative 3000.

410
00:27:20,980 --> 00:27:27,980
I always have to think through, okay, if line 16 is 1000 or 2000 or 3000 or 4000,

411
00:27:27,980 --> 00:27:31,980
its value will come right through as though Max hadn't been called.

412
00:27:31,980 --> 00:27:35,980
Zero, negative one or 2000 will also come through.

413
00:27:35,980 --> 00:27:42,980
It's only when line 16 gets so negative that it loses the little contest for who's the biggest number

414
00:27:42,980 --> 00:27:49,980
that Max will switch over and start returning negative 3000 as its value instead.

415
00:27:49,980 --> 00:27:58,980
Thus, and this never ends surprising me, you call Max to set a minimum bound on something.

416
00:27:58,980 --> 00:28:05,980
Contrary wise, calling min with a constant sets a maximum bound on the return value.

417
00:28:05,980 --> 00:28:10,980
You'll notice that big professional data libraries in Python don't use that terminology anymore.

418
00:28:10,980 --> 00:28:15,980
They use things like in pandas clip upper and clip lower.

419
00:28:15,980 --> 00:28:21,980
I have been known in my Python modules up at the top to just alias min and Max to those two names

420
00:28:21,980 --> 00:28:27,980
so that I don't have to remember that Max sets a minimum bound and min sets a maximum bound.

421
00:28:27,980 --> 00:28:33,980
Looking at this line of code, we might catch that there is a hidden if statement here.

422
00:28:33,980 --> 00:28:39,980
Max chooses one of two possibilities, and even if you're running coverage.py

423
00:28:39,980 --> 00:28:43,980
and it tells you that your tests do run this line of code,

424
00:28:43,980 --> 00:28:51,980
you don't know whether both cases are tested, only that the line runs at least once.

425
00:28:51,980 --> 00:28:56,980
How do we know whether our tests cover both cases?

426
00:28:56,980 --> 00:28:59,980
Let's cross the line.

427
00:28:59,980 --> 00:29:06,980
Let's deliberately step over into red for a moment before we start our big refactoring

428
00:29:06,980 --> 00:29:11,980
just to make sure we're protected here from something that might mangle this code.

429
00:29:11,980 --> 00:29:15,980
Let's do quick edits to disable Max.

430
00:29:15,980 --> 00:29:21,980
A hint, when I do this, I find it's faster if I don't experiment on the line itself.

431
00:29:21,980 --> 00:29:24,980
Instead, I make a copy.

432
00:29:24,980 --> 00:29:32,980
I take the line, I duplicate it, and I comment out the first one, leaving it unchanged.

433
00:29:32,980 --> 00:29:38,980
In Emacs, this is just a few keystrokes, and of course, in your editor, you could set up a shortcut for it.

434
00:29:38,980 --> 00:29:44,980
If it annoyed you to type a few characters to do this, it's an important habit for me.

435
00:29:44,980 --> 00:29:46,980
Here are some hints.

436
00:29:46,980 --> 00:29:52,980
First, use the pound sign with no space after it, so you'll remember not to commit,

437
00:29:52,980 --> 00:29:55,980
because that makes it not even look like a real comment.

438
00:29:55,980 --> 00:29:59,980
Pep8 says that each line of a block comment starts with what?

439
00:29:59,980 --> 00:30:02,980
Pound in a single space.

440
00:30:02,980 --> 00:30:07,980
Inline comments should start with a pound in a single space.

441
00:30:07,980 --> 00:30:12,980
When I go to commit, and I notice a line that's a mangled comment with no space after it,

442
00:30:12,980 --> 00:30:18,980
I'll immediately realize that's something I was supposed to undo before committing and fix it.

443
00:30:18,980 --> 00:30:20,980
Two, it makes it easy to undo.

444
00:30:20,980 --> 00:30:23,980
Delete the experimental line and remove the pound sign.

445
00:30:23,980 --> 00:30:29,980
Third, it lets you, as you edit, compare to the original.

446
00:30:29,980 --> 00:30:32,980
Just move your eye up and look at what it said before.

447
00:30:32,980 --> 00:30:38,980
It doesn't seem important in this case, but if I'm doing a hairy formula in one of my astronomy libraries,

448
00:30:38,980 --> 00:30:44,980
I can get pretty lost as I remove parentheses and cancel out minus signs.

449
00:30:44,980 --> 00:30:47,980
It's really good to have the original right there to look at.

450
00:30:47,980 --> 00:30:52,980
You might think that version control could obviate the need to do number two and three here,

451
00:30:52,980 --> 00:30:56,980
but I often find that if I'm in the middle of a large section of code I'm editing,

452
00:30:56,980 --> 00:31:01,980
version control just can see that a chunk of code was replaced with another chunk.

453
00:31:01,980 --> 00:31:09,980
It isn't necessarily easy to see which original line my modify is an edit of,

454
00:31:09,980 --> 00:31:14,980
so I like using this comment technique.

455
00:31:14,980 --> 00:31:19,980
Now, having scrolled away the original line, we're free to break the code.

456
00:31:19,980 --> 00:31:21,980
We can start editing.

457
00:31:21,980 --> 00:31:28,980
I can hard code it to line 16, kind of look over and see if any tests fail.

458
00:31:28,980 --> 00:31:34,980
I can then change it to the other, minus 3000, hit save, glance over at my terminal window,

459
00:31:34,980 --> 00:31:36,980
and see if any tests fail.

460
00:31:36,980 --> 00:31:39,980
I'm deliberately trying to break things.

461
00:31:39,980 --> 00:31:43,980
In both cases, you want the result to be red.

462
00:31:43,980 --> 00:31:51,980
Otherwise, you're going to need to add a test for that case before you go doing your big refactor.

463
00:31:52,980 --> 00:32:00,980
When programming, I'm happiest if I don't leave feelings of insecurity unacknowledged.

464
00:32:00,980 --> 00:32:09,980
Go ahead, quickly break the code to be sure that you are safely fenced in by your tests.

465
00:32:09,980 --> 00:32:11,980
Breaking things.

466
00:32:11,980 --> 00:32:15,980
We arrive here at kind of a big parting of the ways.

467
00:32:15,980 --> 00:32:24,980
In real life, in a workplace, in a relationship, crossing a line just to see if it's really there is bad.

468
00:32:24,980 --> 00:32:28,980
So we must balance two philosophies.

469
00:32:28,980 --> 00:32:34,980
We all remember that it was Gandalf who said,

470
00:32:34,980 --> 00:32:43,980
he that breaks a thing to find out what it is has left the path of wisdom.

471
00:32:43,980 --> 00:32:48,980
Not a computer programmer.

472
00:32:48,980 --> 00:32:55,980
It was the poet William Blake, the man who, as he walked England,

473
00:32:55,980 --> 00:33:00,980
could see the angels and devils and archangels that others could not,

474
00:33:00,980 --> 00:33:06,980
who was told once by a devil what the proverbs of hell were.

475
00:33:06,980 --> 00:33:09,980
Here's one of them that he wrote down for us.

476
00:33:09,980 --> 00:33:16,980
You never know what is enough unless you know what is more than enough.

477
00:33:16,980 --> 00:33:22,980
He also said the road of excess leads to the palace of wisdom.

478
00:33:22,980 --> 00:33:32,980
A bit more enigmatically, if the fool would persist in his folly, he would become wise.

479
00:33:32,980 --> 00:33:34,980
What's my point?

480
00:33:34,980 --> 00:33:36,980
I think my point is this.

481
00:33:36,980 --> 00:33:42,980
When it comes to how you treat people, be Gandalf.

482
00:33:42,980 --> 00:33:48,980
But with your code, it better be William Blake.

483
00:33:48,980 --> 00:33:54,980
All right, feelings of insecurity, final number three.

484
00:33:54,980 --> 00:33:58,980
Some of us are haunted by a fear.

485
00:33:58,980 --> 00:34:00,980
Wait!

486
00:34:00,980 --> 00:34:07,980
Maybe this code could be even simpler.

487
00:34:07,980 --> 00:34:17,980
Some of us suffer from a nagging fear that we might have written slightly more code than is strictly necessary.

488
00:34:17,980 --> 00:34:23,980
Surprisingly, this can lead to nonoptimal outcomes.

489
00:34:23,980 --> 00:34:25,980
A story.

490
00:34:25,980 --> 00:34:29,980
I once worked in Georgia Tech's IT shop.

491
00:34:29,980 --> 00:34:38,980
Every night our script would run SCP to copy a CSV from human resources that listed all 30,000 employees.

492
00:34:38,980 --> 00:34:44,980
Any of yesterday's employees that were missing from today's list received a goodbye email.

493
00:34:44,980 --> 00:34:48,980
Clean up your computer account, goes away in 30 days.

494
00:34:48,980 --> 00:34:56,980
Guess what happened early one Monday morning, it ran in the wee hours, when the TCP connection died.

495
00:34:56,980 --> 00:35:01,980
3,000 lines before the end.

496
00:35:01,980 --> 00:35:08,980
3,000 employees were emailed goodbye.

497
00:35:08,980 --> 00:35:12,980
It was a bad day.

498
00:35:12,980 --> 00:35:17,980
I don't think customer support was able to accomplish anything else that day.

499
00:35:17,980 --> 00:35:23,980
So many trouble tickets were open by people that wondered why their computer account was being erroneously shut off.

500
00:35:23,980 --> 00:35:29,980
If I recall, it was in the S's when the TCP connection died.

501
00:35:29,980 --> 00:35:33,980
So if your last name started with A or B, you were fine.

502
00:35:33,980 --> 00:35:37,980
But if you were T or you were V, you were toast.

503
00:35:37,980 --> 00:35:44,980
Unfortunately, in any organization as dysfunctional, especially as modern academia,

504
00:35:44,980 --> 00:35:52,980
in any group of 3,000 employees, there are going to be some whose relationship with their management is bad enough

505
00:35:52,980 --> 00:35:57,980
that they might, instead of immediately thinking, oh, the computer's done something stupid,

506
00:35:57,980 --> 00:36:02,980
they might reasonably expect this is how they were going to be let go.

507
00:36:02,980 --> 00:36:08,980
And so for those people, it was a very bad day.

508
00:36:08,980 --> 00:36:14,980
What interests me now, looking back, is my inadequate response to the problem.

509
00:36:14,980 --> 00:36:17,980
What did we developers do?

510
00:36:17,980 --> 00:36:25,980
We read some docs, did some tests, and switched the script from using SCP to R-Sync.

511
00:36:25,980 --> 00:36:31,980
SCP just gradually copies, and you get a partial file if the connection dies.

512
00:36:31,980 --> 00:36:40,980
Whereas R-Sync copies to a temporary file, and only if the entire file arrives does it move it in place of the old one.

513
00:36:40,980 --> 00:36:42,980
So it's safe.

514
00:36:43,980 --> 00:36:47,980
Problem solved. This will never happen again, right?

515
00:36:47,980 --> 00:36:54,980
Well, we were then called into a meeting with a vice president.

516
00:36:54,980 --> 00:36:59,980
You know, the vice president that I'm sure had expected to do something else that Monday,

517
00:36:59,980 --> 00:37:03,980
besides be on the phone giving apologies all over campus,

518
00:37:03,980 --> 00:37:11,980
he ordered that HR append a new line, dash dash end, to the file,

519
00:37:11,980 --> 00:37:18,980
and that we must check for it each night before using the file.

520
00:37:18,980 --> 00:37:21,980
Of course, we were enraged.

521
00:37:21,980 --> 00:37:27,980
We had already solved the problem ourselves.

522
00:37:27,980 --> 00:37:33,980
The design of R-Sync made the extra check illogical.

523
00:37:33,980 --> 00:37:41,980
And the beautiful symmetry of the poor CSV file, every line, the same number of commas,

524
00:37:41,980 --> 00:37:48,980
every line, the same number of fields, is ruined by adding the extra line.

525
00:37:48,980 --> 00:37:59,980
So we wound up arguing unsuccessfully against what strikes me today as an imminently sensible precaution.

526
00:37:59,980 --> 00:38:03,980
What went wrong with our decision making?

527
00:38:03,980 --> 00:38:08,980
Well, several things, but we'll focus here on one.

528
00:38:08,980 --> 00:38:14,980
When a team lacks the expertise to control complexity through good architecture,

529
00:38:14,980 --> 00:38:22,980
we tend to fall back on an obsession with writing and maintaining the least code possible.

530
00:38:22,980 --> 00:38:24,980
What went wrong?

531
00:38:24,980 --> 00:38:28,980
Well, we were indulging in the pleasures of the mathematician.

532
00:38:28,980 --> 00:38:35,980
We wanted code to be minimal and concise, like proof.

533
00:38:35,980 --> 00:38:43,980
When our role demanded the maturity of an engineer.

534
00:38:43,980 --> 00:38:51,980
When engineers walk the line between success and failure by hewing as close as possible to failure,

535
00:38:51,980 --> 00:39:01,980
do they build bridges that can support the rated limit, but not a single ton more?

536
00:39:01,980 --> 00:39:15,980
You know, systems that are robust are also necessarily redundant.

537
00:39:15,980 --> 00:39:25,980
You know, I ought to have welcomed the chance to give the machine two reasons not to disable 3,000 employee accounts on any given Monday morning.

538
00:39:25,980 --> 00:39:43,980
I ought to have been happy to take a deep breath and for once to step away from the line.

539
00:39:43,980 --> 00:40:01,980
In conclusion, as a programmer, I risk being driven by my emotions as if by a storm at sea.

540
00:40:01,980 --> 00:40:13,980
Managed wisely, they can lead me to a comfortable harbor of double-checked code cosseted among many tests.

541
00:40:13,980 --> 00:40:21,980
Or they can lead me to overly fragile systems that bring my customers to shipwreck.

542
00:40:21,980 --> 00:40:28,980
Even as we are typing our code, we ride a knife's edge.

543
00:40:28,980 --> 00:40:34,980
Between code that fails or runs.

544
00:40:34,980 --> 00:40:39,980
Tests that are spotty or thorough.

545
00:40:39,980 --> 00:40:45,980
Systems that are fragile or robust.

546
00:40:45,980 --> 00:40:59,980
Whether we strain to stay on one side of the line or are compulsive in probing and stepping across, it's always there right alongside us.

547
00:40:59,980 --> 00:41:16,980
And by the very nature of our art, we programmers always, always, always are walking the line.

548
00:41:16,980 --> 00:41:20,980
Thank you very much.

