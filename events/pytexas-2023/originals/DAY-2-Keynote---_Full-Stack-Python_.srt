1
00:00:00,000 --> 00:00:03,700
Let's get started with our first keynote speaker, Andy Knight.

2
00:00:03,700 --> 00:00:06,000
Yeah, you can go ahead and give him a round of applause.

3
00:00:06,000 --> 00:00:06,900
I'm going to do an intro, but you can go.

4
00:00:06,900 --> 00:00:08,000
I'm going to applaud for him.

5
00:00:08,000 --> 00:00:15,000
I'm going to go through this really quick again and then

6
00:00:15,000 --> 00:00:15,800
tell you how I met Andy.

7
00:00:15,800 --> 00:00:19,500
So Andy is also known as Pandy, or Pandra if you're in a

8
00:00:19,500 --> 00:00:21,300
formal setting.

9
00:00:21,300 --> 00:00:22,400
He's the automation panda.

10
00:00:22,400 --> 00:00:24,900
He is the software quality champion who loves to help

11
00:00:24,900 --> 00:00:26,700
people build better quality software.

12
00:00:26,700 --> 00:00:29,000
In the past, he's built large scale test automation projects

13
00:00:29,000 --> 00:00:31,200
that run continuously and reliably.

14
00:00:31,200 --> 00:00:32,400
Good for you.

15
00:00:32,400 --> 00:00:35,600
My code doesn't run reliably or continuously.

16
00:00:35,600 --> 00:00:38,100
Currently, he's a developer advocate at Apple Tools and

17
00:00:38,100 --> 00:00:40,500
director of Test Automation University.

18
00:00:40,500 --> 00:00:42,800
Pandy helps folks make their apps visually perfect.

19
00:00:42,800 --> 00:00:44,100
He serves...

20
00:00:44,100 --> 00:00:45,900
I should just read what's on the slide instead of getting

21
00:00:45,900 --> 00:00:46,800
ahead of myself.

22
00:00:46,800 --> 00:00:48,900
He serves as director of Test Automation University, which

23
00:00:48,900 --> 00:00:52,300
offers a multitude of free courses on software testing

24
00:00:52,300 --> 00:00:53,600
from the world's leading instructors.

25
00:00:53,600 --> 00:00:56,000
An avid supporter of open source software, Pandy is a

26
00:00:56,100 --> 00:00:59,000
playwright ambassador as well as the lead developer for

27
00:00:59,000 --> 00:01:01,300
boa constrictor, the dot net screenplay pattern.

28
00:01:01,300 --> 00:01:03,400
On the side, he is writing a book on software testing with

29
00:01:03,400 --> 00:01:04,700
many publications.

30
00:01:04,700 --> 00:01:06,800
You can check out his tech blog at AutomationPanda.com and

31
00:01:06,800 --> 00:01:09,100
you can follow him on Twitter at AutomationPanda.

32
00:01:09,100 --> 00:01:11,400
So I met Andy here in 2019.

33
00:01:11,400 --> 00:01:13,100
It was one of the first conferences that I had ever

34
00:01:13,100 --> 00:01:16,000
really started speaking at.

35
00:01:16,000 --> 00:01:18,200
I think that was your first year at Pi Texas too, is right?

36
00:01:18,200 --> 00:01:20,800
Yeah, so myself, Andy, and then a couple of guys at this

37
00:01:20,800 --> 00:01:24,100
table, we all met and then we basically kind of toured the

38
00:01:24,100 --> 00:01:24,900
United States together.

39
00:01:24,900 --> 00:01:26,800
We all kept going to regional Python conferences.

40
00:01:26,800 --> 00:01:30,300
We saw each other here at Pi Ohio and Columbus, Ohio.

41
00:01:30,300 --> 00:01:31,700
We saw each other at PiCon.

42
00:01:31,700 --> 00:01:33,800
That year was in Cleveland.

43
00:01:33,800 --> 00:01:36,100
We saw each other at Pi Gotham, except for Ali who went to

44
00:01:36,100 --> 00:01:38,900
party in the EU, which was fun.

45
00:01:38,900 --> 00:01:42,600
At Pi Balkans, that was a really interesting conference.

46
00:01:42,600 --> 00:01:44,100
But I think they went to Pi Colorado and I didn't get to

47
00:01:44,100 --> 00:01:44,900
make it.

48
00:01:44,900 --> 00:01:47,500
So the point I'm trying to make here is you will make

49
00:01:47,500 --> 00:01:49,500
friends at conferences and they'll stick with you for the

50
00:01:49,500 --> 00:01:50,200
rest of your life.

51
00:01:50,200 --> 00:01:52,600
Conference friends are real friends.

52
00:01:52,700 --> 00:01:55,100
It's a real pleasure to get to have Andy come and give a

53
00:01:55,100 --> 00:01:55,600
talk today.

54
00:01:55,600 --> 00:01:58,000
You know, he's been speaking, he's spoken at Pi Texas every

55
00:01:58,000 --> 00:02:02,200
year since 2019 that we've had a conference.

56
00:02:02,200 --> 00:02:03,400
And yeah, just one of my really good friends.

57
00:02:03,400 --> 00:02:05,000
I'm super excited to get to introduce him to you.

58
00:02:05,000 --> 00:02:06,700
And I already know what the topic of this keynote is, and

59
00:02:06,700 --> 00:02:08,200
I'm really excited to watch it.

60
00:02:08,200 --> 00:02:10,600
So without any further ado, let's welcome Andy to the stage.

61
00:02:18,600 --> 00:02:21,000
Thank you so much to the organizers, to Mason and the

62
00:02:21,000 --> 00:02:22,100
crew.

63
00:02:22,100 --> 00:02:25,200
It is truly an honor to be on the stage again for the third

64
00:02:25,200 --> 00:02:26,700
time in person.

65
00:02:26,700 --> 00:02:30,000
And this is also my first Python keynote.

66
00:02:30,000 --> 00:02:31,500
So I'm very excited to be here.

67
00:02:31,500 --> 00:02:32,200
Thank you.

68
00:02:37,400 --> 00:02:40,800
Something that's really cool about software is that we can

69
00:02:40,800 --> 00:02:43,900
basically build anything with it.

70
00:02:43,900 --> 00:02:49,700
I remember I started programming 21 years ago,

71
00:02:49,700 --> 00:02:53,600
freshman in high school on a TI 83 plus calculator.

72
00:02:53,600 --> 00:02:56,100
I was making math formulas and I'm like, this is the best

73
00:02:56,100 --> 00:02:57,600
thing ever.

74
00:02:57,600 --> 00:03:00,000
And my mom says, you know, that's what I do for a living.

75
00:03:00,000 --> 00:03:05,500
I'm like, what you get paid for this, right?

76
00:03:05,500 --> 00:03:08,100
And then the more I studied programming and ultimately a

77
00:03:08,100 --> 00:03:10,400
computer science degree and getting into the industry, I

78
00:03:10,400 --> 00:03:13,800
realized like it really is almost like this superpower.

79
00:03:13,800 --> 00:03:15,500
Like we can build web apps.

80
00:03:15,500 --> 00:03:16,900
We can build mobile apps.

81
00:03:16,900 --> 00:03:21,500
We can build irrigation systems for house plants.

82
00:03:21,500 --> 00:03:25,300
We can build amazing blinkers on your cosplay costumes of

83
00:03:25,300 --> 00:03:27,600
things like adafruit.

84
00:03:27,600 --> 00:03:31,600
We can solve world problems that are meaningful or just

85
00:03:31,600 --> 00:03:35,200
keep ourselves occupied when it's really bad outside and

86
00:03:35,200 --> 00:03:37,600
everybody's got COVID, right?

87
00:03:37,600 --> 00:03:39,000
It's awesome.

88
00:03:39,000 --> 00:03:40,200
Hardware plus software.

89
00:03:40,200 --> 00:03:44,200
You can really, really just let your mind run wild with

90
00:03:44,200 --> 00:03:47,000
creativity.

91
00:03:47,000 --> 00:03:50,500
Big challenge though is the question of how do we do this?

92
00:03:50,500 --> 00:03:54,000
Because there are many, many ways that we can build the

93
00:03:54,000 --> 00:03:56,800
awesome things that we want to build.

94
00:03:56,800 --> 00:04:00,400
Just looking at languages alone for programming, because

95
00:04:00,400 --> 00:04:02,700
programming languages are primarily the main means of

96
00:04:02,700 --> 00:04:05,400
which we communicate with these things we call computers or

97
00:04:05,400 --> 00:04:08,700
machines or whatever we're calling them now, devices.

98
00:04:08,700 --> 00:04:10,300
Remember when all of a sudden we stopped talking about

99
00:04:10,300 --> 00:04:12,400
computers and started using the word devices?

100
00:04:12,400 --> 00:04:13,500
Am I this many years old?

101
00:04:13,500 --> 00:04:15,100
I think I am.

102
00:04:15,100 --> 00:04:18,600
But here, I'm guessing most people are probably familiar

103
00:04:18,600 --> 00:04:21,600
with Python, right?

104
00:04:21,600 --> 00:04:23,900
But I'm guessing many of you have also used

105
00:04:23,900 --> 00:04:25,800
these other languages.

106
00:04:25,800 --> 00:04:28,200
C Sharp, anybody?

107
00:04:28,200 --> 00:04:28,700
Yeah.

108
00:04:28,700 --> 00:04:31,500
My previous job, I was a .NET developer.

109
00:04:31,500 --> 00:04:33,300
I would go to Python conferences, talk about

110
00:04:33,300 --> 00:04:35,700
Python, be like, so Andy, tell me how you use Python in

111
00:04:35,700 --> 00:04:36,800
your day-to-day.

112
00:04:36,800 --> 00:04:39,100
I'm like, I actually use C Sharp.

113
00:04:39,100 --> 00:04:42,800
And they're like, oh, you're not joking.

114
00:04:42,800 --> 00:04:45,400
I'm like, no, I'm not.

115
00:04:45,400 --> 00:04:46,200
C Sharp is good.

116
00:04:46,200 --> 00:04:47,300
C Sharp's like a Cadillac.

117
00:04:47,300 --> 00:04:48,700
It's very nice.

118
00:04:48,700 --> 00:04:50,700
Ruby, anybody?

119
00:04:50,700 --> 00:04:51,800
Yeah, a little bit.

120
00:04:51,800 --> 00:04:54,200
OK, I heard that Ruby's not dying.

121
00:04:54,200 --> 00:04:55,900
That's good.

122
00:04:55,900 --> 00:04:57,000
Perl?

123
00:04:57,000 --> 00:04:58,700
This one might be a stretch.

124
00:04:58,700 --> 00:04:59,900
Sweet.

125
00:04:59,900 --> 00:05:02,500
A decade ago, I spent four years at NetApp.

126
00:05:02,500 --> 00:05:05,100
I did nothing but Perl test automation.

127
00:05:05,100 --> 00:05:06,000
Why?

128
00:05:06,000 --> 00:05:08,500
Why did they do that?

129
00:05:08,500 --> 00:05:09,500
I know why.

130
00:05:09,500 --> 00:05:11,500
It doesn't make it better.

131
00:05:11,500 --> 00:05:14,000
JavaScript, many people probably, yeah.

132
00:05:14,000 --> 00:05:15,400
Java, yeah.

133
00:05:15,400 --> 00:05:18,000
I mean, if you went to school through the 90s and 1000s, you

134
00:05:18,000 --> 00:05:19,500
got indoctrinated in Java.

135
00:05:19,500 --> 00:05:21,600
PHP, yeah.

136
00:05:21,600 --> 00:05:25,200
Rust, Rust is having a darling moment in our community.

137
00:05:25,200 --> 00:05:28,700
C++, yeah.

138
00:05:28,700 --> 00:05:29,600
Go, yeah.

139
00:05:29,600 --> 00:05:30,700
So I'm sorry.

140
00:05:30,700 --> 00:05:32,200
This is for my own vain curiosity.

141
00:05:32,200 --> 00:05:34,000
But there's tons of languages we can do.

142
00:05:34,000 --> 00:05:36,200
And it seems like every language has a set of tools

143
00:05:36,200 --> 00:05:39,000
and frameworks and stuff that you can do with it.

144
00:05:39,100 --> 00:05:41,600
But also, even though these are all technically general

145
00:05:41,600 --> 00:05:45,500
programming languages, they seem to all have a set of

146
00:05:45,500 --> 00:05:46,800
domains that they're in, right?

147
00:05:46,800 --> 00:05:49,200
Like, oh, you would use JavaScript for front end, or

148
00:05:49,200 --> 00:05:52,200
you would use Perl for regular expressions.

149
00:05:52,200 --> 00:05:54,100
Ruby, I don't even know what you use Ruby for anymore.

150
00:05:54,100 --> 00:05:55,600
I'm sorry.

151
00:05:55,600 --> 00:05:57,300
It's a little early in the morning.

152
00:05:57,300 --> 00:05:58,900
I'm not trying to take a dig on Ruby.

153
00:05:58,900 --> 00:06:00,200
Ruby is cool.

154
00:06:00,200 --> 00:06:03,600
But we're at a Python conference.

155
00:06:03,600 --> 00:06:06,200
So there's many, many ways that we can choose to build

156
00:06:06,300 --> 00:06:09,900
these awesome things we want to do with software.

157
00:06:09,900 --> 00:06:13,500
It's a fairly common phrase in our community that Python is

158
00:06:13,500 --> 00:06:15,100
the second best language for everything.

159
00:06:15,100 --> 00:06:16,800
I'm sure people have heard this before.

160
00:06:16,800 --> 00:06:18,200
And I did not originate this.

161
00:06:18,200 --> 00:06:19,400
I'm not going to take credit for this.

162
00:06:19,400 --> 00:06:21,300
I heard this very early in my Python journey.

163
00:06:21,300 --> 00:06:25,300
And I was like, oh, OK.

164
00:06:25,300 --> 00:06:27,300
It's a very common saying.

165
00:06:27,300 --> 00:06:30,500
But what I want to do today is I'm going to challenge this.

166
00:06:30,500 --> 00:06:33,200
Because in my opinion, I believe that Python is the

167
00:06:33,200 --> 00:06:36,900
best language for doing everything together.

168
00:06:36,900 --> 00:06:39,900
Oh.

169
00:06:39,900 --> 00:06:40,900
Yeah.

170
00:06:40,900 --> 00:06:43,900
I believe that Python is the best language for doing

171
00:06:43,900 --> 00:06:46,200
everything together.

172
00:06:46,200 --> 00:06:49,300
Because software is not something that we implement in

173
00:06:49,300 --> 00:06:53,000
little tiny bubbles anymore, right?

174
00:06:53,000 --> 00:06:55,700
We're not really just trying to make a cool little program

175
00:06:55,700 --> 00:06:59,600
to poop out math formulas to help us with our homework.

176
00:06:59,600 --> 00:07:01,300
We're solving world problems.

177
00:07:01,300 --> 00:07:02,800
We're trying to bring value.

178
00:07:02,800 --> 00:07:05,600
We're trying to make the human condition ultimately better.

179
00:07:05,600 --> 00:07:06,100
I hope.

180
00:07:06,100 --> 00:07:07,800
At least that's my goal.

181
00:07:07,800 --> 00:07:12,300
And so today, what I want to show you is full stack Python,

182
00:07:12,300 --> 00:07:16,900
how we can use Python to make amazing applications

183
00:07:16,900 --> 00:07:20,400
through and through full stack pretty much entirely

184
00:07:20,400 --> 00:07:24,000
within the one language we love the most, Python.

185
00:07:24,000 --> 00:07:25,300
And how I'm going to do this, I'm

186
00:07:25,300 --> 00:07:27,800
going to show you a project where I've tried to do this.

187
00:07:27,800 --> 00:07:29,000
Now, it's not anything grand.

188
00:07:29,000 --> 00:07:32,300
But I think it's pretty cool.

189
00:07:32,300 --> 00:07:37,100
I'm going to show you my Bulldoggy reminders app.

190
00:07:37,100 --> 00:07:38,900
Isn't it cute?

191
00:07:38,900 --> 00:07:39,400
Sorry.

192
00:07:39,400 --> 00:07:40,600
I don't have stickers of this.

193
00:07:40,600 --> 00:07:43,400
I probably should have thought about that ahead of time.

194
00:07:43,400 --> 00:07:46,200
If you want to check out the code, I have it on GitHub.

195
00:07:46,200 --> 00:07:49,400
github.com slash automation panda, that's me,

196
00:07:49,400 --> 00:07:51,400
slash Bulldoggy reminders app.

197
00:07:51,400 --> 00:07:53,600
I've got a QR code on the screen.

198
00:07:53,600 --> 00:07:56,400
Now is your chance to pow.

199
00:07:56,400 --> 00:07:58,300
I'll just stall for another moment or two

200
00:07:58,300 --> 00:08:00,200
while people take a look at it.

201
00:08:00,200 --> 00:08:01,200
You can run it yourself.

202
00:08:01,200 --> 00:08:04,500
If you've got Python on your machine, yeah, pretty cool.

203
00:08:07,100 --> 00:08:11,100
So let's take a look at what that app looks like.

204
00:08:11,100 --> 00:08:12,400
I have it running on my machine.

205
00:08:12,400 --> 00:08:13,500
Can everyone see this OK?

206
00:08:13,500 --> 00:08:14,100
Yeah, good.

207
00:08:14,100 --> 00:08:14,900
OK.

208
00:08:14,900 --> 00:08:16,100
Projector's not dead.

209
00:08:16,100 --> 00:08:18,700
So here is the Bulldoggy reminders app.

210
00:08:18,700 --> 00:08:21,900
It's running locally on port 8000.

211
00:08:21,900 --> 00:08:23,100
And there's the login page.

212
00:08:23,100 --> 00:08:24,100
So I'm going to log in.

213
00:08:24,100 --> 00:08:26,600
My username is Pythonista.

214
00:08:26,600 --> 00:08:27,900
And my password is Ihearttesting.

215
00:08:31,300 --> 00:08:33,700
I mean, you all know.

216
00:08:33,700 --> 00:08:35,200
We log in, and here we are.

217
00:08:35,200 --> 00:08:36,500
Oops, I didn't clear that.

218
00:08:36,500 --> 00:08:37,500
Hold on.

219
00:08:37,500 --> 00:08:38,000
Sorry.

220
00:08:38,000 --> 00:08:38,700
And here we are.

221
00:08:38,700 --> 00:08:40,900
This is what it looks like the first time you log in.

222
00:08:40,900 --> 00:08:44,100
You've got a nice little top banner card.

223
00:08:44,100 --> 00:08:45,200
It's got your username.

224
00:08:45,200 --> 00:08:46,500
Oh, it's reminding you who you are.

225
00:08:46,500 --> 00:08:48,700
You've got a logout button if you want to get out of here.

226
00:08:48,700 --> 00:08:50,900
But then you've got a set of reminder lists.

227
00:08:50,900 --> 00:08:53,100
I'm sure you all know I'm a very busy person.

228
00:08:53,100 --> 00:08:56,500
I go all around the world to tell people about stuff now.

229
00:08:56,500 --> 00:08:58,200
And run TAU and do all these other.

230
00:08:58,200 --> 00:09:00,600
I can't remember anything.

231
00:09:00,600 --> 00:09:02,400
I need reminders lists.

232
00:09:02,400 --> 00:09:04,500
So what do I need to do?

233
00:09:04,500 --> 00:09:09,100
Well, I have a set of chores that I have to do.

234
00:09:09,100 --> 00:09:11,400
OK, so I added my first reminder list.

235
00:09:11,400 --> 00:09:12,600
And it's now highlighted.

236
00:09:12,600 --> 00:09:14,600
That's cool.

237
00:09:14,600 --> 00:09:17,400
If I wanted to, I could edit the name of this.

238
00:09:17,400 --> 00:09:18,000
Yay.

239
00:09:18,000 --> 00:09:19,200
But I'm not going to.

240
00:09:19,200 --> 00:09:20,800
We'll just leave that there.

241
00:09:20,800 --> 00:09:23,100
Now, what are some chores we have to do around the house?

242
00:09:23,100 --> 00:09:25,600
We have to walk the dog.

243
00:09:25,600 --> 00:09:28,800
We have to mow the lawn.

244
00:09:28,800 --> 00:09:33,100
We have to buy groceries.

245
00:09:33,100 --> 00:09:33,700
I don't know.

246
00:09:33,700 --> 00:09:34,800
That's good enough.

247
00:09:34,800 --> 00:09:38,000
And when I do something, I can check it.

248
00:09:38,000 --> 00:09:38,500
Boom.

249
00:09:38,500 --> 00:09:39,200
It's stricken.

250
00:09:39,200 --> 00:09:39,800
Or oh, crap.

251
00:09:39,800 --> 00:09:41,200
No, I didn't do that.

252
00:09:41,200 --> 00:09:41,900
That was a mistake.

253
00:09:41,900 --> 00:09:42,400
OK.

254
00:09:42,400 --> 00:09:43,100
No, I actually did.

255
00:09:43,100 --> 00:09:44,000
Boom.

256
00:09:44,000 --> 00:09:47,000
I can even delete things if I don't

257
00:09:47,000 --> 00:09:49,100
want to have them on my list anymore.

258
00:09:49,100 --> 00:09:50,700
I can add even more things.

259
00:09:50,700 --> 00:09:53,800
What are some chores we have to do?

260
00:09:53,800 --> 00:09:54,700
Dishes.

261
00:09:54,700 --> 00:09:58,300
Wash the dishes.

262
00:09:58,300 --> 00:10:02,800
Take out the trash.

263
00:10:02,800 --> 00:10:03,300
Yep.

264
00:10:03,300 --> 00:10:04,700
I mean, there's a bunch of cool stuff we could do.

265
00:10:04,700 --> 00:10:05,400
I heard something.

266
00:10:05,400 --> 00:10:07,700
That's something.

267
00:10:07,700 --> 00:10:09,400
We already did.

268
00:10:09,400 --> 00:10:10,800
OK, nice.

269
00:10:10,800 --> 00:10:11,500
Yeah, there we go.

270
00:10:11,500 --> 00:10:12,200
That's not a chore.

271
00:10:12,200 --> 00:10:13,100
That's a pleasure, man.

272
00:10:13,100 --> 00:10:14,400
Come on.

273
00:10:14,400 --> 00:10:16,500
So anyway, I got some chores.

274
00:10:16,500 --> 00:10:19,000
That's all really cool.

275
00:10:19,000 --> 00:10:20,200
Maybe there's other things.

276
00:10:20,200 --> 00:10:21,000
It's not just chores.

277
00:10:21,000 --> 00:10:23,800
But there's also projects I have to do around my house.

278
00:10:23,800 --> 00:10:26,100
Because holy crap, I've got projects.

279
00:10:26,100 --> 00:10:33,100
I have to tune the carburetor in my Volkswagen Beetle

280
00:10:33,100 --> 00:10:35,900
because that's like witchcraft, apparently.

281
00:10:35,900 --> 00:10:47,500
I have to install a decoy owl to scare away the woodpecker

282
00:10:47,500 --> 00:10:51,700
that pecks on my side of the house at 6 AM, right?

283
00:10:51,700 --> 00:10:54,600
Anyway, you get the idea of how this thing works, right?

284
00:10:54,600 --> 00:10:55,600
Pretty cool.

285
00:10:55,600 --> 00:10:58,500
What I'm doing here is there's actually dynamic interactions.

286
00:10:58,500 --> 00:11:01,400
It's not like it's submitting a whole formula back in and reloading

287
00:11:01,400 --> 00:11:02,100
the entire page.

288
00:11:02,100 --> 00:11:06,400
It's all happening like a modern, real web application.

289
00:11:06,400 --> 00:11:07,700
And when I'm done, I can log.

290
00:11:07,700 --> 00:11:08,900
I can, well, hold on.

291
00:11:08,900 --> 00:11:09,900
I can refresh.

292
00:11:09,900 --> 00:11:11,600
There's persistence.

293
00:11:11,600 --> 00:11:12,600
It's saved there.

294
00:11:12,600 --> 00:11:13,800
That's really cool.

295
00:11:13,800 --> 00:11:15,200
And I can log out when I'm done.

296
00:11:15,200 --> 00:11:16,400
Woo.

297
00:11:16,400 --> 00:11:18,200
So small, little modern web app.

298
00:11:18,200 --> 00:11:19,900
What do we think, y'all?

299
00:11:19,900 --> 00:11:21,000
Yeah, it's really cool.

300
00:11:21,000 --> 00:11:25,600
I was very pleased with myself when I did this.

301
00:11:25,600 --> 00:11:27,100
Probably more so than was due.

302
00:11:27,100 --> 00:11:29,500
But it's exciting when we build cool things, right?

303
00:11:29,500 --> 00:11:30,500
That's why we're here.

304
00:11:30,500 --> 00:11:32,800
It's super exciting to build cool things.

305
00:11:32,800 --> 00:11:36,000
You know how I built that?

306
00:11:36,000 --> 00:11:37,300
Full stack Python.

307
00:11:37,300 --> 00:11:37,700
Woo.

308
00:11:37,700 --> 00:11:39,300
You got the answer right.

309
00:11:39,300 --> 00:11:41,400
Yes.

310
00:11:41,400 --> 00:11:44,700
Let's take a look to see how we built this thing.

311
00:11:44,700 --> 00:11:45,200
All right.

312
00:11:45,200 --> 00:11:48,300
So I have my project here.

313
00:11:49,100 --> 00:11:51,800
Like I said, you could be looking at this locally on your machine

314
00:11:51,800 --> 00:11:53,900
if you got the GitHub repository or if you just

315
00:11:53,900 --> 00:11:55,900
go to the GitHub website.

316
00:11:55,900 --> 00:11:57,500
I've got to open in Visual Studio Code.

317
00:11:57,500 --> 00:11:58,900
I like Visual Studio Code.

318
00:11:58,900 --> 00:12:00,500
It's cool.

319
00:12:00,500 --> 00:12:04,300
So let's start with the model.

320
00:12:04,300 --> 00:12:07,000
There is persistence happening under the hood.

321
00:12:07,000 --> 00:12:09,900
I have this in my storage.

322
00:12:09,900 --> 00:12:10,400
Oh, shoot.

323
00:12:10,400 --> 00:12:11,900
I should probably back up and explain

324
00:12:11,900 --> 00:12:13,100
the structure of this project.

325
00:12:13,100 --> 00:12:13,800
My bad.

326
00:12:13,800 --> 00:12:16,300
How I built this app, yeah, it's full stack Python.

327
00:12:16,300 --> 00:12:19,000
It's fast API.

328
00:12:19,000 --> 00:12:22,100
It's HTMX for those dynamic interactions.

329
00:12:22,100 --> 00:12:25,600
And I'm using TinyDB as my database for storage.

330
00:12:25,600 --> 00:12:28,600
So in my storage layer or my persistence layer,

331
00:12:28,600 --> 00:12:30,700
the reason I'm using TinyDB is because this

332
00:12:30,700 --> 00:12:31,800
is meant to be a demo app.

333
00:12:31,800 --> 00:12:33,500
I'm not sending this to production.

334
00:12:33,500 --> 00:12:37,440
TinyDB, it's like a document type database that stores

335
00:12:37,440 --> 00:12:39,600
your data in a JSON file.

336
00:12:39,600 --> 00:12:42,000
Ultimately, I'm going to use this application in a book

337
00:12:42,000 --> 00:12:44,100
I'm writing, so I need to keep it very, very simple.

338
00:12:44,100 --> 00:12:46,700
Simple is better than complex.

339
00:12:46,700 --> 00:12:50,600
So if we look at the storage layer,

340
00:12:50,600 --> 00:12:52,600
there are essentially three models that I have.

341
00:12:52,600 --> 00:12:55,600
And I'm using Pydantic to model those things.

342
00:12:55,600 --> 00:12:56,700
I could use data classes.

343
00:12:56,700 --> 00:12:59,400
Whatever, I'm using Pydantic.

344
00:12:59,400 --> 00:13:02,100
You have your individual reminder item.

345
00:13:02,100 --> 00:13:04,400
That would be like the buy groceries, walk the dog kind

346
00:13:04,400 --> 00:13:05,200
of thing.

347
00:13:05,200 --> 00:13:07,100
There's an ID for it, the list ID for where

348
00:13:07,100 --> 00:13:10,000
it belongs, a description, and whether you've done it or not.

349
00:13:10,000 --> 00:13:12,400
There's also the data model for the reminder list

350
00:13:12,400 --> 00:13:15,200
that has the connection of all those reminder items.

351
00:13:15,200 --> 00:13:18,100
And that has an ID, an owner, that's the user,

352
00:13:18,100 --> 00:13:19,500
and the name of the list.

353
00:13:19,500 --> 00:13:22,100
This is very, very, very simple.

354
00:13:22,100 --> 00:13:23,800
And then also, there's the model that

355
00:13:23,800 --> 00:13:26,100
holds the selected lists.

356
00:13:26,100 --> 00:13:28,500
Like when you saw I could have either the chores selected

357
00:13:28,500 --> 00:13:31,000
or the project selected, I put that in the database, too,

358
00:13:31,000 --> 00:13:33,900
as well, for persistence.

359
00:13:33,900 --> 00:13:36,900
So not too much going on with the data here.

360
00:13:36,900 --> 00:13:41,100
Then I just made a class that holds a reference

361
00:13:41,100 --> 00:13:44,400
to your tiny DB object, and then does things

362
00:13:44,400 --> 00:13:47,500
with those models with the database.

363
00:13:47,500 --> 00:13:49,700
Like you can create a list, and it goes in

364
00:13:49,700 --> 00:13:52,200
and creates this dictionary, which then inserts it

365
00:13:52,200 --> 00:13:55,500
into your tiny DB document-based database.

366
00:13:55,500 --> 00:13:57,200
You can delete a database.

367
00:13:57,200 --> 00:13:58,800
Wow, no, don't delete the database.

368
00:13:58,800 --> 00:14:00,800
You can delete a list.

369
00:14:00,800 --> 00:14:02,400
You can get an individual list.

370
00:14:02,400 --> 00:14:04,000
You can get all the lists.

371
00:14:04,000 --> 00:14:05,800
Everything is based on you as the owner,

372
00:14:05,800 --> 00:14:06,900
because in theory, this app could

373
00:14:06,900 --> 00:14:09,800
have multiple user accounts, therefore multiple owners.

374
00:14:09,800 --> 00:14:11,600
You can update the list's name.

375
00:14:11,600 --> 00:14:12,700
You can add items.

376
00:14:12,700 --> 00:14:19,200
So like fairly boilerplate kind of crud operations here.

377
00:14:19,200 --> 00:14:22,200
So that's going to be persisted on whatever machine

378
00:14:22,200 --> 00:14:23,200
you have it on.

379
00:14:23,200 --> 00:14:25,500
You could use something like SQLAlchemy

380
00:14:25,500 --> 00:14:27,300
with a real database.

381
00:14:27,300 --> 00:14:29,100
That's cool, too.

382
00:14:29,100 --> 00:14:32,100
Ultimately, though, you need some form of persistence.

383
00:14:32,100 --> 00:14:35,800
So that would be what we would call the model.

384
00:14:35,800 --> 00:14:39,200
Now, in terms of what we're going to be viewing,

385
00:14:39,200 --> 00:14:40,400
those are the main pages.

386
00:14:40,400 --> 00:14:41,800
And there were two pages we saw.

387
00:14:41,800 --> 00:14:45,800
There's the login page as well as the reminders page.

388
00:14:45,800 --> 00:14:48,600
The way that it works with FastAPI

389
00:14:48,600 --> 00:14:55,800
is that I have these routers that control your API resource

390
00:14:55,800 --> 00:14:56,300
path.

391
00:14:56,300 --> 00:14:58,600
So when you say, hey, I want to get the login page,

392
00:14:58,600 --> 00:15:00,200
FastAPI receives that path.

393
00:15:00,200 --> 00:15:03,200
And it's like, OK, well, let me go find the function that's

394
00:15:03,200 --> 00:15:05,800
going to, oops, I'm going to log in.

395
00:15:05,800 --> 00:15:06,300
Here we go.

396
00:15:06,300 --> 00:15:08,000
I need to find the function that's

397
00:15:08,000 --> 00:15:09,900
tied to that login path.

398
00:15:09,900 --> 00:15:12,800
And I'm going to run that and then give you the response.

399
00:15:12,800 --> 00:15:16,400
And hopefully, the browser shows something pretty.

400
00:15:16,400 --> 00:15:20,300
So here in my router for my login,

401
00:15:20,300 --> 00:15:24,300
I've got this getLoginAsync function.

402
00:15:24,300 --> 00:15:27,000
Ooh, async.

403
00:15:27,000 --> 00:15:31,200
FastAPI, what did you do there?

404
00:15:31,200 --> 00:15:32,700
But anyway, on top of this function,

405
00:15:32,700 --> 00:15:37,040
I have my decorator for the router for a get request

406
00:15:37,040 --> 00:15:40,540
because with this get, post, patch, put, all those things,

407
00:15:40,540 --> 00:15:42,540
the HTTP methods, this one, we just

408
00:15:42,540 --> 00:15:44,540
want to get a login page to show it.

409
00:15:44,540 --> 00:15:46,240
The path is slash login.

410
00:15:46,240 --> 00:15:47,140
That's cool.

411
00:15:47,140 --> 00:15:48,840
I've got some stuff here for docs

412
00:15:48,840 --> 00:15:50,640
that we'll see a little bit later.

413
00:15:50,640 --> 00:15:53,680
But ultimately, when I get my request or call my login,

414
00:15:53,680 --> 00:15:56,040
there's a request object that's associated with that,

415
00:15:56,040 --> 00:15:57,240
maybe some other parameters.

416
00:15:57,240 --> 00:15:58,340
Don't worry about that.

417
00:15:58,340 --> 00:15:59,840
They are optional.

418
00:15:59,840 --> 00:16:01,440
Typing.

419
00:16:01,440 --> 00:16:03,140
Ooh.

420
00:16:03,140 --> 00:16:03,940
Right.

421
00:16:03,940 --> 00:16:05,840
So anyway, I get my login request.

422
00:16:05,840 --> 00:16:07,340
And what's happening here?

423
00:16:07,340 --> 00:16:10,140
The code I have bundles together,

424
00:16:10,140 --> 00:16:13,040
like those options and the request for context.

425
00:16:13,040 --> 00:16:17,340
And then it will return a template.

426
00:16:17,340 --> 00:16:20,040
Now, I'm guessing many people have probably

427
00:16:20,040 --> 00:16:22,540
done some Python web development,

428
00:16:22,540 --> 00:16:25,640
like Django or Flask, maybe FastAPI.

429
00:16:25,640 --> 00:16:29,240
It's a fairly common pattern that if you

430
00:16:29,240 --> 00:16:31,540
want to show pages that you wouldn't just

431
00:16:31,540 --> 00:16:35,440
puke raw HTML here, that you would use a template file.

432
00:16:35,440 --> 00:16:37,640
And then you can insert things into that template

433
00:16:37,640 --> 00:16:38,840
to parameterize it.

434
00:16:38,840 --> 00:16:41,440
And then you would send that response back

435
00:16:41,440 --> 00:16:43,940
so it can display a page.

436
00:16:43,940 --> 00:16:46,940
With FastAPI baked under the hood,

437
00:16:46,940 --> 00:16:50,440
you have Django templates, very similar to Django templates.

438
00:16:50,440 --> 00:16:51,940
I actually started with Django.

439
00:16:51,940 --> 00:16:53,040
I moved on to Django.

440
00:16:53,040 --> 00:16:55,340
I couldn't really tell the difference.

441
00:16:55,340 --> 00:16:56,840
That's just me.

442
00:16:56,840 --> 00:17:02,640
So in my template here, I have a template for my login page.

443
00:17:02,640 --> 00:17:06,340
And then if I go to my templates directory in my project,

444
00:17:06,340 --> 00:17:10,040
I have a login HTML template.

445
00:17:10,040 --> 00:17:10,940
Fairly boiled trade.

446
00:17:10,940 --> 00:17:13,840
This is almost all HTML, right?

447
00:17:13,840 --> 00:17:16,040
Hypertext markup language.

448
00:17:16,040 --> 00:17:19,840
So I set things like the title card here.

449
00:17:19,840 --> 00:17:20,840
Or no, no, no, no.

450
00:17:20,840 --> 00:17:22,840
Sorry.

451
00:17:22,840 --> 00:17:23,640
It's still a card.

452
00:17:23,640 --> 00:17:24,940
It's the login card.

453
00:17:24,940 --> 00:17:27,340
It's got the name, Bulldoggy, the reminders app.

454
00:17:27,340 --> 00:17:29,440
It's got that really cool logo.

455
00:17:29,440 --> 00:17:30,340
So happy with that.

456
00:17:30,340 --> 00:17:32,440
Then we have a form, basic HTML form,

457
00:17:32,440 --> 00:17:34,140
where we put in username, password.

458
00:17:34,140 --> 00:17:35,740
And there's some template-y stuff here

459
00:17:35,740 --> 00:17:37,340
for some of those options.

460
00:17:37,340 --> 00:17:37,940
That's cool.

461
00:17:37,940 --> 00:17:38,940
That's cool.

462
00:17:38,940 --> 00:17:40,940
Same thing as for the reminders.

463
00:17:40,940 --> 00:17:45,140
So if we go to the reminders router, here we go.

464
00:17:45,140 --> 00:17:47,240
This is a separate file, reminders.py.

465
00:17:47,240 --> 00:17:50,740
I have my router, prefix everything, slash reminders

466
00:17:50,740 --> 00:17:53,340
so we know where we're at, and similar kind of thing.

467
00:17:53,340 --> 00:17:56,340
If I want to get the reminders home page, get.

468
00:17:56,340 --> 00:17:58,540
Remember, I had that prefix, so the path can be slash.

469
00:17:58,540 --> 00:18:01,940
So if I go to whatever my base URL is, slash reminders,

470
00:18:01,940 --> 00:18:03,440
I'll get to the reminders page.

471
00:18:06,340 --> 00:18:09,040
The only fun thing about this is that there

472
00:18:09,040 --> 00:18:11,040
is some authentication, right?

473
00:18:11,040 --> 00:18:13,240
We remember we had to log in.

474
00:18:13,240 --> 00:18:16,440
I don't want to go too far down to authentication.

475
00:18:16,440 --> 00:18:19,240
TLDR, authentication's a nightmare.

476
00:18:19,240 --> 00:18:21,040
Yeah, we haven't figured this out yet.

477
00:18:21,040 --> 00:18:22,540
I mean, we figured it out in many ways,

478
00:18:22,540 --> 00:18:26,440
but we haven't really figured it out good to make it easy

479
00:18:26,440 --> 00:18:28,240
enough for people to use, just like that.

480
00:18:28,240 --> 00:18:30,240
You have to go learn about it and then really use it.

481
00:18:30,240 --> 00:18:30,840
Maybe that's a good thing.

482
00:18:30,840 --> 00:18:32,140
Maybe you should learn before you do something.

483
00:18:32,140 --> 00:18:34,040
I'm sorry, rambling now.

484
00:18:34,040 --> 00:18:36,340
All that to say, what I've done for this authentication

485
00:18:36,340 --> 00:18:37,840
is cookie-based authentication.

486
00:18:37,840 --> 00:18:41,440
So it's like somebody logs in, they send a request.

487
00:18:41,440 --> 00:18:44,240
With the login post, I send back a cookie if it looks good.

488
00:18:44,240 --> 00:18:46,740
There's a JWT token in there, and then it just

489
00:18:46,740 --> 00:18:48,640
gets magically stuck on the browser.

490
00:18:48,640 --> 00:18:51,640
And so then with Fast API, you can use this depends thing

491
00:18:51,640 --> 00:18:54,540
to go fetch whatever your storage was for that cookie.

492
00:18:54,540 --> 00:18:56,140
And then from that, get your username,

493
00:18:56,140 --> 00:18:59,440
and it's all protected, I think.

494
00:18:59,440 --> 00:19:02,340
Again, fairly complicated down there,

495
00:19:02,340 --> 00:19:05,740
but just trust that this gives you proper authentication

496
00:19:05,740 --> 00:19:08,040
and tells you what the storage object is, which

497
00:19:08,040 --> 00:19:09,740
has the username in there.

498
00:19:09,740 --> 00:19:12,240
So I build the full context for everything

499
00:19:12,240 --> 00:19:13,780
I need on the reminders page, which

500
00:19:13,780 --> 00:19:17,840
has essentially data I need to stuff into my templates.

501
00:19:17,840 --> 00:19:22,940
What were the actual lists and items and the ones that selected?

502
00:19:22,940 --> 00:19:25,740
And then I would return that reminders template,

503
00:19:25,740 --> 00:19:28,040
which is going to be different than the login template.

504
00:19:30,640 --> 00:19:32,740
Reminders template is here.

505
00:19:32,740 --> 00:19:35,940
Again, mostly boilerplate HTML.

506
00:19:35,940 --> 00:19:38,240
We have a title card with that nice little bulldoggy thing

507
00:19:38,240 --> 00:19:39,040
at the top.

508
00:19:39,040 --> 00:19:40,640
Interesting thing here, this is the magic

509
00:19:40,640 --> 00:19:42,740
of templates versus raw HTML.

510
00:19:42,740 --> 00:19:44,840
If you remember, there was that piece

511
00:19:44,840 --> 00:19:48,840
that said reminders for Pythonista, my username.

512
00:19:48,840 --> 00:19:51,440
Here, I'm substituting my username in here.

513
00:19:51,440 --> 00:19:53,640
Yay, templates!

514
00:19:53,740 --> 00:19:56,640
Very cool, very cool, very cool.

515
00:19:56,640 --> 00:19:59,140
So that's all right.

516
00:19:59,140 --> 00:20:01,140
Then I also have an include.

517
00:20:01,140 --> 00:20:02,640
Another cool thing about templates

518
00:20:02,640 --> 00:20:05,940
is that you can include templates inside other templates.

519
00:20:05,940 --> 00:20:09,340
Code reusability, don't repeat yourself.

520
00:20:09,340 --> 00:20:11,540
So we look inside the content.

521
00:20:11,540 --> 00:20:13,740
There's even more templating stuff going on in here.

522
00:20:13,740 --> 00:20:16,440
So this is where we have those cards, the reminders list

523
00:20:16,440 --> 00:20:19,240
and the reminders items.

524
00:20:19,240 --> 00:20:22,340
This one is the reminders list, and so what's saying here,

525
00:20:22,340 --> 00:20:23,840
we have a for loop in our template

526
00:20:23,840 --> 00:20:25,640
so we can pop out multiple rows.

527
00:20:25,640 --> 00:20:28,440
For each reminder list that you have,

528
00:20:28,440 --> 00:20:30,540
create a reminder list row,

529
00:20:30,540 --> 00:20:33,440
and that's how it could go ka-plunk, ka-plunk, ka-plunk.

530
00:20:33,440 --> 00:20:37,040
Analogous for the item side, very cool.

531
00:20:37,040 --> 00:20:40,240
So let's take a look at this list row.

532
00:20:40,240 --> 00:20:43,540
List row HTML, again, this is a template,

533
00:20:43,540 --> 00:20:46,540
but now it's just some extra funky things

534
00:20:46,540 --> 00:20:49,540
we might not recognize in here.

535
00:20:49,540 --> 00:20:51,640
So if we look at this, I can even go back

536
00:20:51,640 --> 00:20:53,740
to the Bulldoggy app and we can log in again real quick

537
00:20:53,740 --> 00:20:55,340
just so we can see.

538
00:20:58,040 --> 00:20:59,340
Like when we had these rows,

539
00:20:59,340 --> 00:21:01,340
it's like every time I could add a new row

540
00:21:03,240 --> 00:21:05,440
and there would be new lists of things, right?

541
00:21:05,440 --> 00:21:09,240
So each list row is,

542
00:21:09,240 --> 00:21:12,240
that template is creating that new HTML snippet

543
00:21:12,240 --> 00:21:13,940
for each new list row.

544
00:21:13,940 --> 00:21:15,640
That's why we put it in a for loop.

545
00:21:15,640 --> 00:21:19,840
And so in there, we have a div that has a certain class

546
00:21:19,840 --> 00:21:22,740
so it has all that nice styling that's going on in it.

547
00:21:22,740 --> 00:21:27,640
I'm getting it a data ID just for selectors, yes.

548
00:21:27,640 --> 00:21:28,940
We have a paragraph in there

549
00:21:28,940 --> 00:21:30,840
that has the name of the reminders list.

550
00:21:30,840 --> 00:21:33,440
And then we have those two images

551
00:21:33,440 --> 00:21:36,640
for like the edit button and the delete button.

552
00:21:36,640 --> 00:21:39,140
But then there's all this HX stuff.

553
00:21:39,140 --> 00:21:41,840
What is all this HX stuff?

554
00:21:41,840 --> 00:21:46,540
This is all using a tool called HTMX.

555
00:21:46,540 --> 00:21:49,140
Has anybody used HTMX before?

556
00:21:49,140 --> 00:21:50,140
Yeah, a couple of people.

557
00:21:50,140 --> 00:21:55,140
Okay, so this is where we can really become full stack Python

558
00:21:56,140 --> 00:21:59,240
because for years JavaScript has had a monopoly

559
00:21:59,240 --> 00:22:00,540
on the browser, right?

560
00:22:00,540 --> 00:22:02,140
You gotta do some JavaScript

561
00:22:02,140 --> 00:22:03,840
if you want the modern cool stuff.

562
00:22:03,840 --> 00:22:06,440
And that's not bad or wrong, it's just the way it is.

563
00:22:08,240 --> 00:22:10,340
But I'm in Python, I can do JavaScript

564
00:22:10,340 --> 00:22:13,340
but I'd like to kind of keep it full stack Python.

565
00:22:13,340 --> 00:22:14,940
With HTMX, what you can do

566
00:22:14,940 --> 00:22:19,040
is you can do JavaScripty like dynamic things

567
00:22:19,040 --> 00:22:21,640
without having to directly code JavaScript.

568
00:22:22,540 --> 00:22:26,540
And the way it works is that each of these attributes,

569
00:22:26,540 --> 00:22:29,640
what they're doing is they're indicating

570
00:22:29,640 --> 00:22:32,740
what should happen when you interact with this element.

571
00:22:32,740 --> 00:22:34,940
When you interact with an element, say that you click it,

572
00:22:34,940 --> 00:22:37,740
maybe you wanna send a post request to your API

573
00:22:37,740 --> 00:22:40,840
to get back a different body of hypertext

574
00:22:40,840 --> 00:22:43,740
that you wanna substitute on that page in its place.

575
00:22:43,740 --> 00:22:44,940
Basically how it works is just

576
00:22:44,940 --> 00:22:48,140
let's swap around some hypertext.

577
00:22:48,140 --> 00:22:50,540
We don't necessarily need to do JavaScript to do that,

578
00:22:50,540 --> 00:22:52,840
I mean we do because the browser requires it.

579
00:22:52,840 --> 00:22:54,740
But we can also use this tool called HTMX

580
00:22:54,740 --> 00:22:56,440
where we can literally just keep it all

581
00:22:56,440 --> 00:22:58,640
directly in hypertext.

582
00:22:58,640 --> 00:23:00,240
And underneath the hood,

583
00:23:00,240 --> 00:23:02,740
HTMX will take care of all the Ajax and stuff.

584
00:23:02,740 --> 00:23:05,840
But from our programming perspective

585
00:23:05,840 --> 00:23:08,240
we just straight keep it in HTML

586
00:23:08,240 --> 00:23:11,340
and then the API behind the scenes we can write in Python.

587
00:23:11,340 --> 00:23:13,340
And so that's how I've implemented the Bulldoggy app.

588
00:23:13,340 --> 00:23:15,140
All those dynamic interactions

589
00:23:15,140 --> 00:23:18,640
is literally just HTMX requests

590
00:23:18,640 --> 00:23:22,840
throwing back more hypertext from my fast API service.

591
00:23:23,840 --> 00:23:25,840
So if we wanted to look at one of these,

592
00:23:26,740 --> 00:23:27,840
for example,

593
00:23:29,540 --> 00:23:32,740
like if I wanted to click on that edit button,

594
00:23:32,740 --> 00:23:35,840
meaning I wanted to say, okay I have a name of a list

595
00:23:35,840 --> 00:23:38,340
and I want to edit it, I'll click this button

596
00:23:38,340 --> 00:23:39,240
and then what happens?

597
00:23:39,240 --> 00:23:41,440
It changes that from a paragraph to an input field

598
00:23:41,440 --> 00:23:44,040
that I can now, whatever.

599
00:23:45,140 --> 00:23:45,980
Right?

600
00:23:47,940 --> 00:23:49,340
The way that works in the code is,

601
00:23:49,340 --> 00:23:51,140
okay, well I'm here.

602
00:23:51,140 --> 00:23:56,140
If I were to click on this particular image element,

603
00:23:56,940 --> 00:24:00,840
I want to trigger an HTML,

604
00:24:00,840 --> 00:24:05,840
or sorry, an HTTP get request to this different endpoint

605
00:24:06,240 --> 00:24:08,440
which reminders list row edits

606
00:24:08,440 --> 00:24:10,640
with the ID of my particular list.

607
00:24:11,640 --> 00:24:16,040
The target value is going to be the input value

608
00:24:16,040 --> 00:24:19,540
that I got from this particular input field.

609
00:24:20,540 --> 00:24:22,240
And then I want to, once that's complete,

610
00:24:22,240 --> 00:24:23,740
I want to swap out our HTML,

611
00:24:23,740 --> 00:24:27,640
meaning this entire element that is targeted,

612
00:24:27,640 --> 00:24:29,240
I want to just rip that out

613
00:24:29,240 --> 00:24:31,340
and put a new thing in its place.

614
00:24:31,340 --> 00:24:34,440
The target is, I'm sorry,

615
00:24:34,440 --> 00:24:35,640
the target is this,

616
00:24:39,040 --> 00:24:40,440
this particular div here.

617
00:24:40,440 --> 00:24:42,640
Data ID, reminder row, list ID,

618
00:24:42,640 --> 00:24:45,640
htmx target, the CSS selector for that particular one.

619
00:24:45,640 --> 00:24:48,640
What that means is, yes, I'm going to call this

620
00:24:48,640 --> 00:24:51,040
and whatever I get back from this call

621
00:24:51,040 --> 00:24:54,640
is going to replace this entire div on the page.

622
00:24:54,640 --> 00:24:57,340
Oh, I don't, does that make sense, everybody?

623
00:24:58,240 --> 00:24:59,240
It's pretty cool.

624
00:24:59,240 --> 00:25:02,240
So if I were to look at what this particular

625
00:25:03,840 --> 00:25:07,640
resource goes to in my app, reminders list row edit,

626
00:25:07,640 --> 00:25:12,040
I can go back to my reminders, list row,

627
00:25:13,040 --> 00:25:16,140
I have to scroll down, here we go, get list row edit.

628
00:25:16,140 --> 00:25:17,240
Boom, here we are.

629
00:25:17,240 --> 00:25:18,440
And so what does this do?

630
00:25:18,440 --> 00:25:22,640
It gets that list ID and then it does some magic stuff

631
00:25:22,640 --> 00:25:24,440
and essentially returns another template.

632
00:25:24,440 --> 00:25:28,240
Right, okay, so what does this template look like?

633
00:25:28,240 --> 00:25:33,040
List row edit, list row edit.

634
00:25:33,040 --> 00:25:38,040
Oh look, this one now, that div is still there

635
00:25:38,140 --> 00:25:40,140
but instead of a paragraph, it's now an input field.

636
00:25:40,140 --> 00:25:42,940
That's how I was able to start typing in it, right?

637
00:25:42,940 --> 00:25:44,840
And so what if I wanted to commit this?

638
00:25:44,840 --> 00:25:48,540
So I have my check circle, same thing.

639
00:25:48,540 --> 00:25:51,040
All I'm going to now, when I type something

640
00:25:51,040 --> 00:25:52,740
into that input field in my check,

641
00:25:52,740 --> 00:25:56,740
it's gonna fire off to the patch of that resource path,

642
00:25:56,740 --> 00:25:59,640
including the value that was put into this input field.

643
00:26:00,640 --> 00:26:03,840
Any triggering that's a click or an enter up

644
00:26:03,840 --> 00:26:05,940
is going to send this request

645
00:26:05,940 --> 00:26:09,240
and I'm going to target that whole reminders grid

646
00:26:09,240 --> 00:26:10,640
and swap that out.

647
00:26:10,640 --> 00:26:12,240
And so you can see how now with this,

648
00:26:12,240 --> 00:26:13,940
you're literally just playing with hypertext.

649
00:26:13,940 --> 00:26:16,640
Right, the fast API part is fairly minimal,

650
00:26:16,640 --> 00:26:18,540
it's almost boilerplate-ish.

651
00:26:18,540 --> 00:26:20,540
You're just being like, well I do this interaction

652
00:26:20,540 --> 00:26:21,840
and I send this content.

653
00:26:21,840 --> 00:26:24,640
Well if I do this interaction, I send this content.

654
00:26:25,640 --> 00:26:27,240
That is the power of htmx.

655
00:26:28,240 --> 00:26:30,440
It's pretty cool, right?

656
00:26:30,440 --> 00:26:31,840
Yeah.

657
00:26:31,840 --> 00:26:33,540
There we go, okay.

658
00:26:33,540 --> 00:26:34,840
I think it's pretty cool.

659
00:26:35,840 --> 00:26:38,440
I mean, pretty much all the interactions

660
00:26:38,440 --> 00:26:39,140
on the page are like this.

661
00:26:39,140 --> 00:26:40,940
We don't need to step through every single one.

662
00:26:40,940 --> 00:26:42,540
But we kind of have an idea of like,

663
00:26:42,540 --> 00:26:46,240
oh, I don't need to code some JavaScript in the browser

664
00:26:46,240 --> 00:26:47,240
to get it to come to life.

665
00:26:47,240 --> 00:26:49,340
I can make it come to life like this.

666
00:26:49,340 --> 00:26:51,540
I mean, when I was showing you the app,

667
00:26:51,540 --> 00:26:53,340
you probably thought it was just like any other web app,

668
00:26:53,340 --> 00:26:54,240
am I right?

669
00:26:54,240 --> 00:26:57,440
Like, oh, I didn't, you didn't even know what htmx was maybe.

670
00:26:57,440 --> 00:26:59,440
It's like, oh, but this is a really cool thing.

671
00:26:59,440 --> 00:27:00,440
It's seamless.

672
00:27:00,440 --> 00:27:04,140
I found that htmx and pry get you 90% to 95% of the way there.

673
00:27:04,140 --> 00:27:06,140
And for the remaining 5%, just use Alpine.js

674
00:27:06,140 --> 00:27:09,240
and you still don't need to use JS.

675
00:27:09,240 --> 00:27:12,540
This does not use Alpine because it didn't need to.

676
00:27:12,540 --> 00:27:15,840
So that's all really, really cool stuff.

677
00:27:15,840 --> 00:27:19,140
Now, we focused mostly on what we would consider

678
00:27:19,140 --> 00:27:22,440
like front-end stuff, like the visuals of this web app.

679
00:27:22,440 --> 00:27:24,540
I mean, Fast API technically has the back end

680
00:27:24,540 --> 00:27:27,240
because it goes to the server and comes back.

681
00:27:27,240 --> 00:27:29,740
But what if you wanted to do more kinds of back end things?

682
00:27:29,740 --> 00:27:33,840
Like, hey, what if I, instead of having to enter everything

683
00:27:33,840 --> 00:27:37,040
in as a human, what if I wanted to just use an API to create

684
00:27:37,040 --> 00:27:38,940
lists and create list items?

685
00:27:38,940 --> 00:27:40,440
Can we do that too?

686
00:27:40,440 --> 00:27:41,540
Why yes?

687
00:27:41,540 --> 00:27:42,840
Yes, you can.

688
00:27:42,840 --> 00:27:43,340
Why?

689
00:27:43,340 --> 00:27:47,140
Because Fast API has basically got this whole REST API

690
00:27:47,140 --> 00:27:50,040
support built into it.

691
00:27:50,040 --> 00:27:53,940
When you make your end point, or when you make your routes

692
00:27:53,940 --> 00:27:58,740
with Fast API, it basically turns them into REST API endpoints

693
00:27:58,740 --> 00:28:02,040
that are open AI, or not open AI, oh my gosh.

694
00:28:02,040 --> 00:28:06,340
Whoa, open API compliance.

695
00:28:06,340 --> 00:28:11,040
So here is the automatically generated docs page from Fast API.

696
00:28:11,040 --> 00:28:12,240
It's given to you.

697
00:28:12,240 --> 00:28:13,140
It's pretty awesome.

698
00:28:13,140 --> 00:28:14,840
This is honestly one of the reasons why

699
00:28:14,840 --> 00:28:17,240
I wrote this in Fast API rather than Flask,

700
00:28:17,240 --> 00:28:19,940
because this just comes out of the box.

701
00:28:20,040 --> 00:28:26,040
And so if I wanted to check, hey, how do I

702
00:28:26,040 --> 00:28:27,840
use the API in order to do things?

703
00:28:27,840 --> 00:28:29,840
Like, here, I can get all the API reminders.

704
00:28:29,840 --> 00:28:30,940
It's already authenticated.

705
00:28:30,940 --> 00:28:33,240
So I can try it out literally in the browser.

706
00:28:33,240 --> 00:28:36,040
If I were to execute this, look, these

707
00:28:36,040 --> 00:28:40,540
were all the reminder lists that were in my app.

708
00:28:40,540 --> 00:28:43,140
Same data, same authentication.

709
00:28:43,140 --> 00:28:45,240
So I can not only use this as a human,

710
00:28:45,240 --> 00:28:47,940
but I can now use this as a machine through the API.

711
00:28:47,940 --> 00:28:49,140
Still all Python.

712
00:28:49,140 --> 00:28:49,840
It's pretty cool.

713
00:28:52,540 --> 00:28:53,940
So what about testing this thing?

714
00:28:56,940 --> 00:28:57,440
I mean, come on.

715
00:28:57,440 --> 00:28:59,040
You can't have an automation pan to talk

716
00:28:59,040 --> 00:29:01,040
without talking about testing, am I right?

717
00:29:01,040 --> 00:29:01,840
Like, duh.

718
00:29:01,840 --> 00:29:03,640
Like, you knew it was coming.

719
00:29:03,640 --> 00:29:05,840
I know some people are like, well, nobody likes testing.

720
00:29:05,840 --> 00:29:08,540
I was like, you know I'm here.

721
00:29:08,540 --> 00:29:10,240
You know I'm here.

722
00:29:10,240 --> 00:29:12,040
You can't miss me.

723
00:29:12,040 --> 00:29:15,640
Let's see what it looks like to do some testing of this thing.

724
00:29:15,640 --> 00:29:20,140
It is no secret that my favorite test framework is PyTest.

725
00:29:20,140 --> 00:29:22,040
And that's not just in Python.

726
00:29:22,040 --> 00:29:24,340
That is across the board.

727
00:29:24,340 --> 00:29:26,540
And y'all know I travel way too much around the world,

728
00:29:26,540 --> 00:29:28,540
and I'm involved in way too many of those different language

729
00:29:28,540 --> 00:29:30,040
communities and the testing community.

730
00:29:30,040 --> 00:29:32,340
I have done almost all in regards of tested automation.

731
00:29:32,340 --> 00:29:33,940
If there's anybody in this planet who

732
00:29:33,940 --> 00:29:36,640
can say they've done almost all test automation, it's me.

733
00:29:36,640 --> 00:29:38,940
And PyTest is my favorite framework.

734
00:29:38,940 --> 00:29:39,440
Amen.

735
00:29:42,240 --> 00:29:45,340
I've got stickers if you want them.

736
00:29:45,340 --> 00:29:45,840
Why?

737
00:29:45,840 --> 00:29:47,240
Because there's some really awesome things

738
00:29:47,240 --> 00:29:49,640
that PyTest does that's very different from other frameworks.

739
00:29:49,640 --> 00:29:50,840
We can talk about that after.

740
00:29:50,840 --> 00:29:57,040
Anyway, so I have added tests to this project in order to test it,

741
00:29:57,040 --> 00:29:58,440
and not just unit tests.

742
00:29:58,440 --> 00:30:00,640
Because a lot of times, I think, in Python community,

743
00:30:00,640 --> 00:30:03,640
when we talk about testing, we think, oh, like unit tests, right?

744
00:30:03,640 --> 00:30:07,540
I'm talking not only full stack Python, but full stack testing.

745
00:30:07,540 --> 00:30:09,040
We're going to have unit tests.

746
00:30:09,040 --> 00:30:15,040
Yes, unit tests, API tests, and UI tests, all in PyTest, all in this project,

747
00:30:15,040 --> 00:30:16,340
all covering things.

748
00:30:16,340 --> 00:30:19,940
So I have a directory called tests in here.

749
00:30:19,940 --> 00:30:24,340
And inside of there, I've got three modules, test unit, test API,

750
00:30:24,340 --> 00:30:26,340
and test UI.

751
00:30:26,340 --> 00:30:29,140
Right now, there's only one test of each type in here.

752
00:30:29,140 --> 00:30:31,840
I haven't had a whole lot of time to really build this out yet.

753
00:30:31,840 --> 00:30:33,240
It is a work in progress.

754
00:30:33,240 --> 00:30:37,540
But I do want to show you, like, here is a basic kind of unit test

755
00:30:37,540 --> 00:30:40,240
that we could have for this project.

756
00:30:40,240 --> 00:30:44,940
And what this is testing is testing the authentication token serialization.

757
00:30:45,240 --> 00:30:49,840
I have my test function in PyTest, meaning this is a test procedure.

758
00:30:49,840 --> 00:30:53,040
All I'm doing is I'm saying, hey, with a particular username

759
00:30:53,040 --> 00:30:56,640
that's given to me by a fixture, that's part of setup,

760
00:30:56,640 --> 00:31:01,540
serialize the authentication token for that user's username.

761
00:31:01,540 --> 00:31:03,340
Make sure you got it.

762
00:31:03,340 --> 00:31:04,440
Make sure it's a string.

763
00:31:04,440 --> 00:31:08,440
And make sure it's not just the username itself.

764
00:31:08,440 --> 00:31:09,840
Then deserialize it.

765
00:31:09,840 --> 00:31:12,240
And make sure you get the username back.

766
00:31:12,240 --> 00:31:14,240
Pretty straightforward unit tests, but very valuable.

767
00:31:14,240 --> 00:31:16,140
Because if you screw up your authentication,

768
00:31:16,140 --> 00:31:20,540
ain't nobody going to be able to record reminders.

769
00:31:20,540 --> 00:31:23,040
Now, we also have API tests,

770
00:31:23,040 --> 00:31:26,040
because we have that whole beautiful API behind the scenes.

771
00:31:26,040 --> 00:31:27,840
And so what I'm doing here is I'm just testing,

772
00:31:27,840 --> 00:31:31,540
can you do a basic login of your credentials via API?

773
00:31:31,540 --> 00:31:36,040
So I'm doing a, this is using the Playwrights module.

774
00:31:36,040 --> 00:31:37,640
Oh, I should back up.

775
00:31:37,640 --> 00:31:39,340
The unit test was just pure PyTest.

776
00:31:39,340 --> 00:31:42,040
But if you want to do black box testing, you need other tools.

777
00:31:42,140 --> 00:31:45,740
If you want to do API testing, you can use requests for that.

778
00:31:45,740 --> 00:31:48,240
Or if you do API and UI testing,

779
00:31:48,240 --> 00:31:51,140
you can use a cool new library called Playwrights.

780
00:31:51,140 --> 00:31:52,740
Has anybody heard of Playwright?

781
00:31:52,740 --> 00:31:53,640
Yeah, some people have.

782
00:31:53,640 --> 00:31:55,440
Okay, okay, good, good, good.

783
00:31:55,440 --> 00:31:58,240
I mean, historically, we've used Selenium in the Python community.

784
00:31:58,240 --> 00:31:59,040
And Selenium's great.

785
00:31:59,040 --> 00:32:01,940
I actually just came from Selenium Conference.

786
00:32:01,940 --> 00:32:05,040
But I think Playwright is awesome.

787
00:32:05,040 --> 00:32:07,440
I am actually a Playwright ambassador.

788
00:32:07,440 --> 00:32:10,940
I can give you stickers of Playwright if you want.

789
00:32:10,940 --> 00:32:15,040
Playwright is a more modern test automation tool or framework,

790
00:32:15,040 --> 00:32:16,240
if you want to call it that.

791
00:32:16,240 --> 00:32:19,240
It handles a lot of things for you automatically,

792
00:32:19,240 --> 00:32:21,340
like waiting and browser setup.

793
00:32:21,340 --> 00:32:22,440
It's really, really nice.

794
00:32:22,440 --> 00:32:24,640
If you have to do any browser automation in Python,

795
00:32:24,640 --> 00:32:27,640
I strongly recommend use Playwright.

796
00:32:27,640 --> 00:32:28,740
It's really cool.

797
00:32:28,740 --> 00:32:31,340
Nice thing about Playwright is like, well, Andy, that's like web UI.

798
00:32:31,340 --> 00:32:32,540
We're talking about API.

799
00:32:32,540 --> 00:32:35,140
You can actually do API testing with Playwright as well.

800
00:32:35,140 --> 00:32:38,840
And it's really nice because they can share credentials with your UI tests

801
00:32:38,840 --> 00:32:41,140
so that like, oh, well, you need to log in only one time.

802
00:32:41,140 --> 00:32:42,840
And the API UI can use it all together.

803
00:32:42,840 --> 00:32:43,940
Woo-hoo!

804
00:32:43,940 --> 00:32:45,140
So cool.

805
00:32:45,140 --> 00:32:49,740
So I'm pretty sure underneath the hood, Playwright and Python uses requests.

806
00:32:49,740 --> 00:32:50,840
I don't know that for sure.

807
00:32:50,840 --> 00:32:52,040
I think that's the case.

808
00:32:52,040 --> 00:32:54,340
So if you know requests, you'll get this done just fine.

809
00:32:54,340 --> 00:32:57,440
So for my API tests, I just want to test log in here.

810
00:32:57,440 --> 00:33:00,740
So I'm saying I have a API request context.

811
00:33:00,740 --> 00:33:03,340
This comes from Playwright itself.

812
00:33:03,340 --> 00:33:06,340
And I have fixtures behind the scenes that set this up.

813
00:33:06,340 --> 00:33:07,240
Just take it on faith.

814
00:33:07,240 --> 00:33:10,340
This is a session object.

815
00:33:10,340 --> 00:33:11,640
I'm a user in my base URL.

816
00:33:11,640 --> 00:33:18,140
So I can say, bulldoggy API, post, log in with my username and password,

817
00:33:18,140 --> 00:33:23,340
verify that my response is OK, verify that my response URL is this,

818
00:33:23,340 --> 00:33:26,940
go into the storage state, try to get the cookie out,

819
00:33:26,940 --> 00:33:30,140
make sure the cookie has a certain name and has a certain value.

820
00:33:30,140 --> 00:33:33,240
Like, again, kind of basic test, but just making sure

821
00:33:33,240 --> 00:33:36,940
that if I post a log in, I actually get a cookie back.

822
00:33:36,940 --> 00:33:38,940
Finally, a UI test.

823
00:33:38,940 --> 00:33:43,840
This is kind of like, historically been the more intense kind of test

824
00:33:43,840 --> 00:33:44,440
that we have.

825
00:33:44,440 --> 00:33:48,140
This one will actually load up a browser and step through these things.

826
00:33:48,140 --> 00:33:51,440
So here, I want to do a UI test for testing successful log in.

827
00:33:51,440 --> 00:33:53,440
I have the page, which comes from Playwright.

828
00:33:53,440 --> 00:33:58,740
That represents the browser page and the user who I'm logged in as.

829
00:33:58,740 --> 00:34:02,240
When I write my tests, I follow the Arrange Act assert pattern.

830
00:34:02,240 --> 00:34:04,540
Have people heard of Arrange Act assert?

831
00:34:04,540 --> 00:34:05,040
Yes.

832
00:34:05,040 --> 00:34:07,440
So it's Arrange Act assert.

833
00:34:07,440 --> 00:34:08,840
It's given when then.

834
00:34:08,840 --> 00:34:10,740
Basically, it helps keep your test focused

835
00:34:10,740 --> 00:34:12,940
on individual independent behaviors.

836
00:34:12,940 --> 00:34:17,040
So you set something up, you take an action,

837
00:34:17,040 --> 00:34:19,040
and then you make sure that action works.

838
00:34:19,040 --> 00:34:24,740
One solid behavior, Arrange Act assert or given when then.

839
00:34:24,740 --> 00:34:27,140
So I always like to write things out kind of verbosely,

840
00:34:27,140 --> 00:34:29,340
because these are behaviors.

841
00:34:29,340 --> 00:34:31,240
Behaviors are meant for people.

842
00:34:31,240 --> 00:34:32,740
Makes more sense to me that way.

843
00:34:32,740 --> 00:34:37,440
So given the login page is displayed, Playwright call, page.goto.

844
00:34:37,440 --> 00:34:40,640
When the user logs into the app with valid credentials,

845
00:34:40,640 --> 00:34:42,040
page locator refining.

846
00:34:42,040 --> 00:34:44,040
OK, what's the username field?

847
00:34:44,040 --> 00:34:46,440
And fill it with text for my username.

848
00:34:46,440 --> 00:34:49,440
Password, fill it with password.

849
00:34:49,440 --> 00:34:52,040
Oh, and you don't have to do a raw locator in Playwright.

850
00:34:52,040 --> 00:34:54,940
You can just be like, hey, page, get the element by the text login

851
00:34:54,940 --> 00:34:56,240
and click it.

852
00:34:56,240 --> 00:34:57,240
Yay, cool.

853
00:34:57,240 --> 00:35:01,040
So setup, interaction, now we're going to have some verification here.

854
00:35:01,840 --> 00:35:03,340
Then the Reminders page is displayed.

855
00:35:03,340 --> 00:35:05,340
How do we know the Reminders page is displayed?

856
00:35:05,340 --> 00:35:09,140
Well, we expect the page to have a title, Reminders, the Bulldoggy app.

857
00:35:09,140 --> 00:35:12,740
We expect the page to have a certain URL with that slash Reminders.

858
00:35:12,740 --> 00:35:15,740
We expect the page to have this logo being visible,

859
00:35:15,740 --> 00:35:18,140
to have the text and the title Bulldoggy.

860
00:35:18,140 --> 00:35:20,740
We expect the logout button to be visible.

861
00:35:20,740 --> 00:35:21,740
What else do we expect?

862
00:35:21,740 --> 00:35:26,740
We want the title card to display Reminders for your username.

863
00:35:26,740 --> 00:35:28,040
So that's a bit more dynamic.

864
00:35:28,040 --> 00:35:29,840
I get that field by its ID.

865
00:35:29,840 --> 00:35:30,940
I expect it to have a text.

866
00:35:30,940 --> 00:35:32,840
Use an F string.

867
00:35:32,840 --> 00:35:34,140
Yes, I love F strings.

868
00:35:34,140 --> 00:35:36,940
Reminders for substitution, my name.

869
00:35:36,940 --> 00:35:38,440
Does this all make sense?

870
00:35:38,440 --> 00:35:42,040
Do we see that testing is good, that not everybody hates testing?

871
00:35:42,040 --> 00:35:43,840
OK.

872
00:35:43,840 --> 00:35:48,740
If I wanted to run this, because this is live, baby.

873
00:35:48,740 --> 00:35:49,440
I did not want to.

874
00:35:49,440 --> 00:35:51,340
Oh, I wanted this terminal.

875
00:35:51,340 --> 00:35:55,640
We can go python-m pytest.

876
00:35:55,640 --> 00:35:57,040
I can prove it to you that it works.

877
00:35:57,040 --> 00:36:00,140
Proof is in the pudding.

878
00:36:00,140 --> 00:36:09,440
Tests, I'm only going to do chromium and headed so you can see it.

879
00:36:09,440 --> 00:36:11,240
Let's see if this works.

880
00:36:11,240 --> 00:36:14,240
So it's run in, API test, the UI test, the browser should pop up.

881
00:36:14,240 --> 00:36:14,840
That was very good.

882
00:36:14,840 --> 00:36:16,140
You see how fast Playwright was?

883
00:36:16,140 --> 00:36:17,740
Did it even show on the screen?

884
00:36:17,740 --> 00:36:19,940
OK, you saw how fast, right?

885
00:36:19,940 --> 00:36:20,940
It's freaky fast.

886
00:36:24,240 --> 00:36:25,040
All right.

887
00:36:25,040 --> 00:36:26,640
All right.

888
00:36:26,640 --> 00:36:28,340
We broke the rule of ones.

889
00:36:28,340 --> 00:36:29,640
It was amazing.

890
00:36:29,740 --> 00:36:31,340
And so three tests passed.

891
00:36:31,340 --> 00:36:34,440
I have now somewhat tested my application.

892
00:36:34,440 --> 00:36:35,640
That is awesome.

893
00:36:35,640 --> 00:36:36,140
Well, wait.

894
00:36:36,140 --> 00:36:38,140
I don't want to just test it on my local machine.

895
00:36:43,940 --> 00:36:44,740
You can read that.

896
00:36:44,740 --> 00:36:47,540
If this application gets more popular and people start using it,

897
00:36:47,540 --> 00:36:48,740
I might be getting pull requests.

898
00:36:48,740 --> 00:36:49,740
And I'm not always in charge of that.

899
00:36:49,740 --> 00:36:52,340
We just had a whole talk yesterday about vulnerabilities, and pull

900
00:36:52,340 --> 00:36:55,640
requests, and dictators, and oh my gosh.

901
00:36:55,640 --> 00:36:58,740
I want to be able to run these tests whenever there's a change.

902
00:36:58,740 --> 00:37:01,340
I want that to be arguably continuous.

903
00:37:01,340 --> 00:37:07,040
And so I have created a GitHub Action workflow that will run your tests.

904
00:37:07,040 --> 00:37:07,840
This is a little tiny.

905
00:37:07,840 --> 00:37:11,040
Let me, here we go.

906
00:37:11,040 --> 00:37:12,740
Have people used GitHub Actions before?

907
00:37:12,740 --> 00:37:14,440
Aren't they the bees knees?

908
00:37:14,440 --> 00:37:14,940
Yes.

909
00:37:14,940 --> 00:37:17,040
So if you haven't used GitHub Actions, basically

910
00:37:17,040 --> 00:37:20,640
it's automation for your repository.

911
00:37:20,640 --> 00:37:22,940
So you can do things like any time somebody makes a change,

912
00:37:22,940 --> 00:37:25,540
you can automatically run tests, or you can run linting.

913
00:37:25,540 --> 00:37:28,340
I mean, we had a whole talk about build engineering yesterday.

914
00:37:28,340 --> 00:37:33,040
Build engineering given to people in their repositories right here.

915
00:37:33,040 --> 00:37:33,940
Boom, it's beautiful.

916
00:37:33,940 --> 00:37:35,140
So I love GitHub Actions.

917
00:37:35,140 --> 00:37:37,040
And so here I've got a basic workflow.

918
00:37:37,040 --> 00:37:40,640
You write them in YAML that says things like, hey, any time there's

919
00:37:40,640 --> 00:37:43,340
a push to main, or a pull request, or hey,

920
00:37:43,340 --> 00:37:47,140
if you just want to push the big red button, get a Ubuntu image,

921
00:37:47,140 --> 00:37:52,040
check out your project, set up Python, install your dependencies,

922
00:37:52,040 --> 00:37:55,340
install Playwright because you need an extra command for that.

923
00:37:55,340 --> 00:37:56,840
Start your application.

924
00:37:56,840 --> 00:37:57,840
Cool.

925
00:37:57,840 --> 00:38:00,540
Wait 10 seconds for it to kind of wake up a bit.

926
00:38:00,540 --> 00:38:02,040
And then you just run your tests.

927
00:38:02,040 --> 00:38:04,940
And so now every time I make a change in my repository,

928
00:38:04,940 --> 00:38:06,340
the tests run automatically.

929
00:38:06,340 --> 00:38:09,440
Continuous integration is beautiful.

930
00:38:09,440 --> 00:38:09,940
Yes.

931
00:38:12,840 --> 00:38:14,040
It's pretty cool.

932
00:38:14,040 --> 00:38:15,140
It's pretty cool.

933
00:38:15,140 --> 00:38:16,440
It's automation.

934
00:38:16,440 --> 00:38:18,440
Automation for the win.

935
00:38:18,440 --> 00:38:20,040
I love it.

936
00:38:20,040 --> 00:38:21,840
All right.

937
00:38:21,840 --> 00:38:23,840
So we've covered a lot.

938
00:38:24,840 --> 00:38:26,340
Hmm.

939
00:38:26,340 --> 00:38:27,840
So what did we all just see here?

940
00:38:27,840 --> 00:38:30,040
I mean, we saw a very cute puppy picture.

941
00:38:30,040 --> 00:38:35,040
But beyond that, we saw that we had a model.

942
00:38:35,040 --> 00:38:36,240
There was a database.

943
00:38:36,240 --> 00:38:37,640
It was TinyDB.

944
00:38:37,640 --> 00:38:42,240
I used pedantic models to kind of serialize and deserialize those data

945
00:38:42,240 --> 00:38:43,140
objects.

946
00:38:43,140 --> 00:38:46,240
I chose that because I wanted to be super simple, being better

947
00:38:46,240 --> 00:38:47,540
than complex.

948
00:38:47,540 --> 00:38:49,340
If I were to more productionalize this,

949
00:38:49,340 --> 00:38:53,440
I'd probably use something like Postgres with SQL Alchemy or something.

950
00:38:53,440 --> 00:38:55,740
But all that to say, we had a model.

951
00:38:55,740 --> 00:38:58,240
We also had a controller, FastAPI.

952
00:38:58,240 --> 00:39:01,640
It was the thing that received all the requests and puked things out.

953
00:39:01,640 --> 00:39:03,940
Mostly, it was hypertext that was puking out.

954
00:39:03,940 --> 00:39:06,840
Or it was JSON if you were hitting the API.

955
00:39:06,840 --> 00:39:09,440
You had those two kinds of paths to go.

956
00:39:09,440 --> 00:39:10,540
You could have used Flask.

957
00:39:10,540 --> 00:39:11,640
You could have used Django.

958
00:39:11,640 --> 00:39:13,140
You could have used anything else.

959
00:39:13,140 --> 00:39:17,240
I chose FastAPI because, and one of the reasons because was

960
00:39:17,240 --> 00:39:22,240
because it had that nice dock thing out of the box.

961
00:39:22,240 --> 00:39:23,140
We also had views.

962
00:39:23,140 --> 00:39:24,440
We had beautiful views.

963
00:39:24,440 --> 00:39:26,240
Like, I think my app actually looked pretty good.

964
00:39:26,240 --> 00:39:27,040
I'm kind of proud of that.

965
00:39:27,040 --> 00:39:29,140
It's not like the best, but I was afraid it

966
00:39:29,140 --> 00:39:31,340
was going to look like some 90s Frankenstein web app.

967
00:39:31,340 --> 00:39:31,940
And it wasn't.

968
00:39:31,940 --> 00:39:33,540
It actually looked kind of smooth.

969
00:39:33,540 --> 00:39:34,340
How do we do that?

970
00:39:34,340 --> 00:39:38,440
We had FastAPI, used Jinja templates with static files, a little bit of CSS.

971
00:39:38,440 --> 00:39:40,140
I didn't want to go too much into that.

972
00:39:40,140 --> 00:39:41,540
But that's what made it pretty.

973
00:39:41,540 --> 00:39:42,740
Sent that out to the browser.

974
00:39:42,740 --> 00:39:43,840
The browser renders it.

975
00:39:43,840 --> 00:39:46,140
And then any time you wanted to change something,

976
00:39:46,140 --> 00:39:50,340
we used HTMX to kind of send those interactions back to FastAPI

977
00:39:50,340 --> 00:39:52,540
to puke out more hypertext.

978
00:39:53,540 --> 00:39:54,540
That was the view.

979
00:39:54,540 --> 00:39:56,540
So we have model view controller.

980
00:39:56,540 --> 00:39:57,640
Cool.

981
00:39:57,640 --> 00:39:58,740
Then we had an API.

982
00:39:58,740 --> 00:40:01,340
If you want to go in the back door, you can call the API.

983
00:40:01,340 --> 00:40:03,540
You have full REST API with open API specs.

984
00:40:03,540 --> 00:40:05,840
So not only can you do it, but you can learn about it.

985
00:40:05,840 --> 00:40:08,540
And you didn't have to change your docs every single time.

986
00:40:08,540 --> 00:40:11,940
And so whatever client wants to call it, can call it.

987
00:40:11,940 --> 00:40:15,540
And overall, we decided to test it because development and testing

988
00:40:15,540 --> 00:40:17,540
are two sides of the same coin.

989
00:40:17,540 --> 00:40:21,840
And we used Playwright and PyTest to develop full stack tests,

990
00:40:21,840 --> 00:40:26,540
full pyramid tests, unit, API, and UI.

991
00:40:26,540 --> 00:40:31,040
So now, million-dollar question.

992
00:40:31,040 --> 00:40:33,840
What were the languages and technologies used

993
00:40:33,840 --> 00:40:37,740
to build our application?

994
00:40:37,740 --> 00:40:40,040
The model was Python.

995
00:40:40,040 --> 00:40:42,840
The controller was Python.

996
00:40:42,840 --> 00:40:44,440
The view was mostly Python.

997
00:40:44,440 --> 00:40:47,040
I mean, we had to use CSS and HTML.

998
00:40:47,040 --> 00:40:48,540
Under the hood, there was JavaScript.

999
00:40:48,540 --> 00:40:51,640
But did you see me coding any JavaScript?

1000
00:40:51,640 --> 00:40:52,140
No.

1001
00:40:52,140 --> 00:40:55,040
I just used hypertext, which is basically HTML.

1002
00:40:55,040 --> 00:40:56,140
Slap on an attribute.

1003
00:40:56,140 --> 00:40:56,840
Send it a path.

1004
00:40:56,840 --> 00:40:58,040
Woo!

1005
00:40:58,040 --> 00:41:02,140
So we didn't need ourselves to do the JavaScript.

1006
00:41:02,140 --> 00:41:04,240
Of the API, it was Python.

1007
00:41:04,240 --> 00:41:06,740
And even the testing was in Python.

1008
00:41:06,740 --> 00:41:07,740
Congratulations.

1009
00:41:07,740 --> 00:41:11,040
We have achieved full stack Python, everybody.

1010
00:41:11,040 --> 00:41:12,440
We did it.

1011
00:41:12,440 --> 00:41:15,840
It's not even 10 AM, and we've done it.

1012
00:41:15,840 --> 00:41:16,340
I know.

1013
00:41:16,340 --> 00:41:18,940
It's so cool.

1014
00:41:18,940 --> 00:41:21,240
But what about AI?

1015
00:41:21,240 --> 00:41:25,140
Because it's 2023, and every conference

1016
00:41:25,140 --> 00:41:27,340
needs to have every talk about AI now, right?

1017
00:41:27,340 --> 00:41:29,740
What about AI?

1018
00:41:29,740 --> 00:41:31,540
This is more of a classic kind of web app.

1019
00:41:31,540 --> 00:41:32,240
A little funky.

1020
00:41:32,240 --> 00:41:38,040
But if you haven't heard, most AI technologies

1021
00:41:38,040 --> 00:41:40,740
have Python somewhere in them, just because Python

1022
00:41:40,740 --> 00:41:44,840
has taken over data science and all that kind of stuff.

1023
00:41:44,840 --> 00:41:46,640
So even if you're not programming Python,

1024
00:41:46,640 --> 00:41:48,840
if you're using AI, there's probably Python somewhere

1025
00:41:48,840 --> 00:41:50,640
baked in there.

1026
00:41:50,640 --> 00:41:52,940
I actually use some AI technologies

1027
00:41:52,940 --> 00:41:56,740
when building this web application.

1028
00:41:56,740 --> 00:41:58,840
First of all, that logo.

1029
00:41:58,840 --> 00:42:00,340
You think I hired somebody to do that?

1030
00:42:00,340 --> 00:42:00,640
No.

1031
00:42:00,640 --> 00:42:01,840
Do you think I did that myself?

1032
00:42:01,840 --> 00:42:03,240
No.

1033
00:42:03,240 --> 00:42:05,140
I have a French bulldog puppy.

1034
00:42:05,140 --> 00:42:07,240
This is her picture on the left.

1035
00:42:07,240 --> 00:42:08,640
Her name is Suki.

1036
00:42:08,640 --> 00:42:10,240
She is 1 and 1 half years old.

1037
00:42:10,240 --> 00:42:12,140
She is a gift from God.

1038
00:42:12,140 --> 00:42:13,340
I love this dog.

1039
00:42:13,340 --> 00:42:15,240
She has changed my heart.

1040
00:42:15,240 --> 00:42:16,040
Oh my gosh.

1041
00:42:16,040 --> 00:42:18,140
You're lucky you're not seeing more puppy pictures.

1042
00:42:18,140 --> 00:42:19,640
If you want to see more, come after.

1043
00:42:19,640 --> 00:42:20,740
I love my dog.

1044
00:42:20,740 --> 00:42:23,440
I love my dog so much, I made her the icon

1045
00:42:23,440 --> 00:42:27,140
of my little demo application for here today.

1046
00:42:27,140 --> 00:42:30,640
But I was like, I can't just put her face on the application.

1047
00:42:30,640 --> 00:42:33,140
That doesn't quite jive with the style.

1048
00:42:33,140 --> 00:42:37,640
So what I did is I used Dali to generate an icon for my app.

1049
00:42:37,640 --> 00:42:39,440
I went there and was like, hey, Dali,

1050
00:42:39,440 --> 00:42:42,840
generate a logo of a French bulldog

1051
00:42:42,840 --> 00:42:44,240
that kind of looks like a lucky cat.

1052
00:42:44,240 --> 00:42:46,840
And boom, this is what came out.

1053
00:42:46,840 --> 00:42:48,340
It's pretty cute, right?

1054
00:42:48,340 --> 00:42:51,040
So right there, I was able to use AI-based technology

1055
00:42:51,040 --> 00:42:53,540
to help me in a part of my application development

1056
00:42:53,540 --> 00:42:54,540
where I was lacking skill.

1057
00:42:54,540 --> 00:42:57,840
I had an idea, but I couldn't just design this myself.

1058
00:42:57,840 --> 00:43:00,240
I could tell somebody or something how to design it,

1059
00:43:00,240 --> 00:43:01,440
and it popped out.

1060
00:43:01,440 --> 00:43:03,240
And it was just there for me.

1061
00:43:03,240 --> 00:43:06,240
So all I had to do, I had to make the background transparent,

1062
00:43:06,240 --> 00:43:08,840
and then I was good to go.

1063
00:43:08,840 --> 00:43:10,540
Also, my login page.

1064
00:43:10,540 --> 00:43:11,940
I am not a web developer.

1065
00:43:11,940 --> 00:43:14,640
I mean, I cosplay as a web developer,

1066
00:43:14,640 --> 00:43:16,140
and I can get it done, as you've seen.

1067
00:43:16,140 --> 00:43:17,740
I built this app myself.

1068
00:43:17,740 --> 00:43:20,840
But I am not well-versed in CSS.

1069
00:43:20,840 --> 00:43:24,140
I'm pretty good at HTML, but I'm not a CSS master.

1070
00:43:24,140 --> 00:43:26,840
I can't make a pixel art thing of CSS or anything.

1071
00:43:26,840 --> 00:43:30,540
And so when I came to developing this web app, I was like, oh, crap.

1072
00:43:30,540 --> 00:43:32,240
I want to make it look nice.

1073
00:43:32,240 --> 00:43:33,340
I want to make it look nice.

1074
00:43:33,340 --> 00:43:35,140
I don't want it to be janky.

1075
00:43:35,140 --> 00:43:38,740
So I went to ChatGPT, and I said, ChatGPT,

1076
00:43:38,740 --> 00:43:42,740
generate the CSS and HTML for a good-looking login page.

1077
00:43:42,740 --> 00:43:45,940
And this is about 80% of what it puked out.

1078
00:43:45,940 --> 00:43:48,840
The background was originally bluish-gray,

1079
00:43:48,840 --> 00:43:50,840
and so all I did was I changed the color,

1080
00:43:50,840 --> 00:43:54,540
I changed some of the formatting, I put the logo in there.

1081
00:43:54,540 --> 00:43:59,140
But I was able to do that in about an hour versus an entire day

1082
00:43:59,140 --> 00:44:02,340
of fooling around with the HTML and CSS,

1083
00:44:02,340 --> 00:44:04,240
just trying to move pixels back and right.

1084
00:44:04,240 --> 00:44:08,940
So this really optimized my whole workflow.

1085
00:44:08,940 --> 00:44:14,440
And finally, for testing, we could use Appletools, the company

1086
00:44:14,440 --> 00:44:18,540
I work for, their visual AI technology for testing visuals

1087
00:44:18,540 --> 00:44:20,040
on the application as well.

1088
00:44:20,040 --> 00:44:22,340
Most traditional testing tools, even like Playwright,

1089
00:44:22,340 --> 00:44:27,040
you need to scrape a field and check its text.

1090
00:44:27,040 --> 00:44:28,740
What Appletools does is you can actually

1091
00:44:28,740 --> 00:44:31,840
do visual, visual comparisons, as we're seeing here,

1092
00:44:31,840 --> 00:44:36,240
where it will highlight exactly what is different.

1093
00:44:36,240 --> 00:44:37,640
So again, congrats.

1094
00:44:37,640 --> 00:44:40,540
We have truly achieved full-stack Python.

1095
00:44:40,540 --> 00:44:43,440
So awesome, so cool.

1096
00:44:43,440 --> 00:44:45,740
So many technologies that we can play with and build with

1097
00:44:45,740 --> 00:44:47,640
to make the software that we want,

1098
00:44:47,640 --> 00:44:50,340
and we can basically do it all in Python.

1099
00:44:50,340 --> 00:44:52,240
It's really cool.

1100
00:44:52,240 --> 00:44:53,840
So why is this important?

1101
00:44:53,840 --> 00:44:55,840
I mean, you could probably infer why it's important

1102
00:44:55,840 --> 00:44:57,640
because we're at a Python conference,

1103
00:44:57,640 --> 00:45:00,740
but let's take a bigger picture of like,

1104
00:45:00,740 --> 00:45:03,440
oh, I mean, I could do all these things in Python,

1105
00:45:03,440 --> 00:45:05,740
but like, should I?

1106
00:45:05,740 --> 00:45:08,640
Or I mean, is everything I've shown just a party trick,

1107
00:45:08,640 --> 00:45:13,140
or is this something revolutionary?

1108
00:45:13,140 --> 00:45:14,640
Ultimately, I go back to the principle,

1109
00:45:14,640 --> 00:45:16,540
simple is better than complex.

1110
00:45:16,540 --> 00:45:20,240
This principle comes straight from the Xenopython.

1111
00:45:20,240 --> 00:45:21,940
If you're not sure what the Xenopython is,

1112
00:45:21,940 --> 00:45:24,540
it's a set of guiding language principles

1113
00:45:24,540 --> 00:45:25,640
for the Python language,

1114
00:45:25,640 --> 00:45:28,840
and I would also argue for the Python community.

1115
00:45:28,840 --> 00:45:30,540
If you want to see what the Xenopython is,

1116
00:45:30,540 --> 00:45:33,640
if you open up your Python interpreter on your command line,

1117
00:45:33,640 --> 00:45:37,140
Python book, import this.

1118
00:45:37,140 --> 00:45:42,740
You'll see all 20 principles, something like that.

1119
00:45:42,740 --> 00:45:45,340
Yeah, that's an Easter egg for you.

1120
00:45:45,340 --> 00:45:47,540
So anyway, import this, you'll see all the principles,

1121
00:45:47,540 --> 00:45:48,640
and this is one of them.

1122
00:45:48,640 --> 00:45:49,840
Simple is better than complex,

1123
00:45:49,840 --> 00:45:51,740
and this is honestly one of the reasons why I love Python

1124
00:45:51,740 --> 00:45:53,140
more than other languages,

1125
00:45:53,140 --> 00:45:57,940
because Python kind of encourages you to do things

1126
00:45:57,940 --> 00:46:00,440
the right way, the simple way.

1127
00:46:00,440 --> 00:46:03,740
The syntax is very concise.

1128
00:46:03,740 --> 00:46:07,040
Like, I feel like it's almost like executable pseudocode,

1129
00:46:07,040 --> 00:46:08,740
and so I kind of apply that philosophy

1130
00:46:08,740 --> 00:46:11,340
when I approach software developments, right?

1131
00:46:11,440 --> 00:46:13,740
I am a, historically I've been a software engineer and test,

1132
00:46:13,740 --> 00:46:15,040
I'm now a developer advocate.

1133
00:46:15,040 --> 00:46:17,040
I build things, all kinds of things.

1134
00:46:19,340 --> 00:46:23,640
But when things are simpler, it's easier to get started.

1135
00:46:23,640 --> 00:46:25,540
It's easier to bring people into that.

1136
00:46:25,540 --> 00:46:27,040
It's easier to have an impact.

1137
00:46:28,040 --> 00:46:32,340
And so here are some examples of different people

1138
00:46:32,340 --> 00:46:35,240
who may want to take a full-stack Python approach

1139
00:46:35,240 --> 00:46:37,340
where it would be truly valuable to them.

1140
00:46:38,340 --> 00:46:40,340
What if you are a researcher

1141
00:46:40,340 --> 00:46:43,840
who needs to visualize and share your data with colleagues?

1142
00:46:43,840 --> 00:46:44,340
Right?

1143
00:46:44,340 --> 00:46:46,940
Like, I've known friends who have done, like, PhDs

1144
00:46:46,940 --> 00:46:51,440
and, like, virology and environmental science and stuff,

1145
00:46:51,440 --> 00:46:54,240
and at this day and age, like, if you're on that track,

1146
00:46:54,240 --> 00:46:56,540
you are taking a Python course or two in college.

1147
00:46:56,540 --> 00:46:57,940
Like, you don't have a choice.

1148
00:46:57,940 --> 00:46:59,140
It's part of your program now.

1149
00:46:59,140 --> 00:47:01,340
These people aren't programmers.

1150
00:47:01,340 --> 00:47:03,540
They need to munch some data and do some analysis

1151
00:47:03,540 --> 00:47:05,240
and share that with their colleagues

1152
00:47:05,240 --> 00:47:07,540
across academic institutions around the world.

1153
00:47:10,140 --> 00:47:12,440
Do you think they're really going to learn React

1154
00:47:12,440 --> 00:47:14,340
to build a basic web app for that need?

1155
00:47:15,740 --> 00:47:16,440
No.

1156
00:47:16,440 --> 00:47:18,840
They were struggling enough to learn Python.

1157
00:47:18,840 --> 00:47:20,240
They got it.

1158
00:47:20,240 --> 00:47:21,040
They have their data.

1159
00:47:21,040 --> 00:47:23,040
They can use Pandas.

1160
00:47:23,040 --> 00:47:27,240
Why not just use something like Django with HTMX,

1161
00:47:27,240 --> 00:47:29,040
if necessary, to share that out?

1162
00:47:29,040 --> 00:47:32,040
Why would they need to go into JavaScript or PHP

1163
00:47:32,040 --> 00:47:34,240
to develop a simple website for their needs?

1164
00:47:34,240 --> 00:47:35,440
It doesn't make sense to me.

1165
00:47:35,440 --> 00:47:37,740
That's a whole extra set of stuff

1166
00:47:37,740 --> 00:47:39,940
they shouldn't need to learn.

1167
00:47:42,240 --> 00:47:44,640
What if you're like me and some of my colleagues

1168
00:47:44,640 --> 00:47:46,340
in the testing space?

1169
00:47:46,340 --> 00:47:49,040
What if you are a tester who's developing automation

1170
00:47:49,040 --> 00:47:50,340
for web apps?

1171
00:47:50,340 --> 00:47:52,040
Like, and you happen to know Python,

1172
00:47:52,040 --> 00:47:53,740
why should you have to go learn Java

1173
00:47:53,740 --> 00:47:55,740
in order to use Selenium?

1174
00:47:55,740 --> 00:47:56,140
I don't know.

1175
00:47:56,140 --> 00:47:57,040
You shouldn't have to.

1176
00:47:57,040 --> 00:47:59,440
If you know Python and you can test it,

1177
00:47:59,440 --> 00:48:01,840
you got to play right, or Selenium Python.

1178
00:48:01,840 --> 00:48:02,440
And PyTest.

1179
00:48:02,440 --> 00:48:05,240
I mean, PyTest is really cool.

1180
00:48:05,240 --> 00:48:05,940
Here's another one.

1181
00:48:05,940 --> 00:48:08,240
What if you are a cosplayer?

1182
00:48:08,240 --> 00:48:10,740
You go to AnimeCon, wherever it is.

1183
00:48:10,740 --> 00:48:14,440
You want to dress up as Miles Tails Prowler with your friend

1184
00:48:14,440 --> 00:48:15,640
Sonic the Hedgehog, right?

1185
00:48:15,640 --> 00:48:18,040
And you're going to be doing little hardware Adafruit

1186
00:48:18,040 --> 00:48:21,840
components to make your costume light up or something.

1187
00:48:21,840 --> 00:48:25,840
You can program that in Python, too.

1188
00:48:25,840 --> 00:48:30,840
What if you are a newcomer to computing and programming

1189
00:48:30,840 --> 00:48:32,140
and software?

1190
00:48:32,140 --> 00:48:34,940
And you want to do cool stuff, but you only

1191
00:48:34,940 --> 00:48:36,640
know Python so far, right?

1192
00:48:36,640 --> 00:48:38,040
You could be a high school student

1193
00:48:38,040 --> 00:48:39,840
or maybe a career changer, and you've

1194
00:48:39,840 --> 00:48:41,440
been doing the Hello World program,

1195
00:48:41,440 --> 00:48:44,240
and you've been modding by two, and you're figuring these things

1196
00:48:44,240 --> 00:48:45,740
out, and you're like, oh, wow, you know what would be really

1197
00:48:45,740 --> 00:48:46,340
cool?

1198
00:48:46,340 --> 00:48:49,640
If I could build a web app to do this,

1199
00:48:49,640 --> 00:48:51,640
it would be soul-crushing to then go to that person

1200
00:48:51,640 --> 00:48:52,740
and say, no, you can't do that.

1201
00:48:52,740 --> 00:48:53,240
Well, why?

1202
00:48:53,240 --> 00:48:54,580
Because you need to learn a whole different thing

1203
00:48:54,580 --> 00:48:55,740
than what we taught you.

1204
00:48:55,740 --> 00:48:58,640
That's really lame, right?

1205
00:48:58,640 --> 00:48:59,640
Really lame.

1206
00:48:59,640 --> 00:49:04,840
You know, I think back to one of Kojo's keynotes

1207
00:49:04,840 --> 00:49:08,540
where he talked about how not everybody is on the software

1208
00:49:08,540 --> 00:49:09,940
engineer track.

1209
00:49:09,940 --> 00:49:13,240
It's OK just to use Python for programming to do cool stuff.

1210
00:49:13,240 --> 00:49:14,340
That is totally OK.

1211
00:49:14,340 --> 00:49:17,140
Not everyone is meant to be a software engineer.

1212
00:49:17,140 --> 00:49:21,340
And so why should we be in an ecosystem of software

1213
00:49:21,340 --> 00:49:24,140
development that limits people based on, oh, well,

1214
00:49:24,140 --> 00:49:26,340
you have to use this to do this or that to do that?

1215
00:49:26,340 --> 00:49:27,140
That's not fun.

1216
00:49:27,140 --> 00:49:27,740
That's not cool.

1217
00:49:30,640 --> 00:49:34,340
And ultimately, what if you just want to use Python?

1218
00:49:34,340 --> 00:49:40,840
What if, regardless of thank you, regardless of any other reason,

1219
00:49:40,840 --> 00:49:43,840
what if you just like Python, you like the language,

1220
00:49:43,840 --> 00:49:46,040
you like the values, you like the community,

1221
00:49:46,040 --> 00:49:47,840
you like the conferences, and you just

1222
00:49:47,840 --> 00:49:51,340
want to do cool things in Python for the heck of it?

1223
00:49:51,340 --> 00:49:52,940
Why not?

1224
00:49:52,940 --> 00:49:53,740
That's me.

1225
00:49:53,740 --> 00:49:55,440
I'm a bona fide Pythonista.

1226
00:49:55,440 --> 00:49:58,240
I do Python because I like Python.

1227
00:49:58,240 --> 00:49:58,940
Why not?

1228
00:49:58,940 --> 00:50:00,440
Why should I be inhibited from that?

1229
00:50:08,240 --> 00:50:09,440
Pardon me.

1230
00:50:09,440 --> 00:50:11,640
Python is an amazing tool.

1231
00:50:11,640 --> 00:50:16,040
It transforms us from programmers into problem solvers.

1232
00:50:16,040 --> 00:50:18,440
You can basically do anything in Python.

1233
00:50:18,440 --> 00:50:20,440
I mean, there's that XKCD comic where it's like,

1234
00:50:20,440 --> 00:50:22,640
I can import fly, and now I'm flying, right?

1235
00:50:22,640 --> 00:50:24,640
That's been the running joke of Python forever.

1236
00:50:24,640 --> 00:50:27,340
You can literally just import anything and do stuff.

1237
00:50:27,340 --> 00:50:30,040
That is the magic of Python as a language.

1238
00:50:30,040 --> 00:50:34,140
It truly is the best language for doing everything together.

1239
00:50:34,140 --> 00:50:36,940
And so we are no longer just programmers,

1240
00:50:36,940 --> 00:50:38,640
but we are problem solvers.

1241
00:50:38,640 --> 00:50:41,340
We have the tools and the expertise.

1242
00:50:41,340 --> 00:50:43,540
And if we don't yet, we have the ability

1243
00:50:43,540 --> 00:50:48,340
to gain that through Python.

1244
00:50:48,340 --> 00:50:51,940
And so that is what I consider to be full stack Python.

1245
00:50:51,940 --> 00:50:54,240
Not just that I can build a cool little web app,

1246
00:50:54,240 --> 00:50:58,340
but that I can do anything I want.

1247
00:50:58,340 --> 00:51:00,140
So thank you so much, everyone, today,

1248
00:51:00,140 --> 00:51:01,440
for attending my keynote.

1249
00:51:01,440 --> 00:51:02,740
Again, my name is Andy Knight.

1250
00:51:02,740 --> 00:51:05,040
I am the automation panda, principal developer,

1251
00:51:05,040 --> 00:51:07,540
advocate at Apple Tools, and director of Test Automation

1252
00:51:07,540 --> 00:51:09,040
University.

1253
00:51:09,040 --> 00:51:09,540
Thank you.

1254
00:51:09,540 --> 00:51:10,040
Thank you.

1255
00:51:10,040 --> 00:51:10,540
Thank you.

1256
00:51:10,540 --> 00:51:11,040
Thank you.

1257
00:51:11,040 --> 00:51:11,540
Thank you.

1258
00:51:11,540 --> 00:51:12,040
Thank you.

1259
00:51:12,040 --> 00:51:12,540
Thank you.

1260
00:51:12,540 --> 00:51:14,040
Thank you.

