1
00:00:00,000 --> 00:00:07,000
Sorry guys, I'm not too good with holding mics. I also talk excessively loud in my experience as a teacher at some point.

2
00:00:07,000 --> 00:00:13,000
So, I will stick without the handheld mic for now.

3
00:00:15,000 --> 00:00:23,000
I will also try my best to leave some room for questions since this is kind of a somewhere between a general and a technical topic.

4
00:00:23,000 --> 00:00:32,000
I'm very curious to continue exploring and see if anyone has any additional directions to consider.

5
00:00:32,000 --> 00:00:46,000
I've probably spent about a year and a half so far on this project, but sometimes I get a little too deep in one direction and kind of forget to back out and take a more general approach.

6
00:00:46,000 --> 00:00:56,000
So, without further ado, my name is Jesse Ayala. I'm actually from Southern California. Right now I'm a Ph.D. student at UC Irvine, if anyone's familiar with SoCal.

7
00:00:56,000 --> 00:01:07,000
But, beautiful city here in Austin so far. Before I get started, I'd like to have a raise of hands. Anyone who's had an overnight layover in an airport?

8
00:01:08,000 --> 00:01:19,000
Alright, keep those hands up. How about during the overnight layover, you hear an emergency broadcast saying, can I have your attention please?

9
00:01:19,000 --> 00:01:27,000
There is an emergency and go to your nearest emergency exit because there is some kind of threat.

10
00:01:27,000 --> 00:01:32,000
Alright, I guess I'm the only one here. Oh, I see one over there.

11
00:01:33,000 --> 00:01:48,000
I actually was not sure what exactly the threat was, but it was kind of scary considering it was 3 a.m. and I've never been to Texas before, but afterwards it's been a very pleasant trip.

12
00:01:48,000 --> 00:02:05,000
Right. Not an April Fool's joke. It was definitely real. Unfortunately it was not an April Fool's joke.

13
00:02:05,000 --> 00:02:14,000
Anyways, so this presentation will be exploring socio-technical security concerns and critical open source Python repositories.

14
00:02:14,000 --> 00:02:25,000
You'll see that most of the presentation actually talks about 3D printers, but rest be assured all of the repositories that I've looked at so far are indeed Python based.

15
00:02:25,000 --> 00:02:34,000
But before we get into the meat of the talk, I just wanted to give a brief overview of pull requests and their power in open source projects.

16
00:02:35,000 --> 00:02:43,000
So we define the sequence of introducing new code as someone as an open source contributor.

17
00:02:43,000 --> 00:02:50,000
You create a fork of some repository, which just means you make a copy for your own repo for development.

18
00:02:50,000 --> 00:02:57,000
You make some code changes, perhaps it's a new feature, perhaps it's a bug fix, perhaps it's a typo.

19
00:02:57,000 --> 00:03:04,000
You submit a pull request in which a project maintainer from the main repository will review.

20
00:03:04,000 --> 00:03:12,000
They approve or disapprove that pull request from which forward will be preferred as a PR because I'm going to say PR a lot.

21
00:03:12,000 --> 00:03:23,000
And hopefully that new code is merged into the main branch or some kind of development branch depending on what type of repository we're looking at.

22
00:03:23,000 --> 00:03:31,000
And who here has an academic background or has done some kind of research slash sometimes read papers?

23
00:03:31,000 --> 00:03:34,000
Anybody here? I see. OK, I see a few folks here.

24
00:03:34,000 --> 00:03:39,000
Has anyone heard of this paper recent from University of Minnesota?

25
00:03:39,000 --> 00:03:42,000
Yeah, one, two, three, four.

26
00:03:42,000 --> 00:03:46,000
So for those of us who aren't familiar with this controversial paper,

27
00:03:47,000 --> 00:03:54,000
there were some folks at the University of Minnesota that not only intentionally,

28
00:03:54,000 --> 00:04:02,000
but actually introduced some vulnerable code into the Linux open source project and wrote a paper about it,

29
00:04:02,000 --> 00:04:11,000
which made it to the acceptance process, but then got redacted after the reviewers realized that there is some kind of issue here.

30
00:04:11,000 --> 00:04:13,000
There is some ethical concerns.

31
00:04:14,000 --> 00:04:23,000
Maybe a security folks shouldn't actually introduce vulnerabilities in real world software or projects without letting the maintainers at least know.

32
00:04:23,000 --> 00:04:29,000
I mean, these guys just introduced bad code into the Linux project.

33
00:04:29,000 --> 00:04:36,000
Let it kind of sit there and let the reviewers of Linux, you know, spend the trouble of having to take that code out.

34
00:04:36,000 --> 00:04:39,000
They waste the time reviewing this code.

35
00:04:39,000 --> 00:04:46,000
But the moral of the story is it's unethical to introduce vulnerable code intentionally into any source of project,

36
00:04:46,000 --> 00:04:48,000
even if it's for research purposes.

37
00:04:48,000 --> 00:04:55,000
Hence, there are new ethics security workshops at security conferences now.

38
00:04:55,000 --> 00:05:00,000
Doesn't that reveal though that there was a huge hole in the review process?

39
00:05:00,000 --> 00:05:01,000
Right.

40
00:05:01,000 --> 00:05:05,000
And that that was really good public service.

41
00:05:05,000 --> 00:05:09,000
There's nothing unethical about fixing a process at all.

42
00:05:09,000 --> 00:05:19,000
That is very factual with the addition that researchers should take some kind of ethical considerations,

43
00:05:19,000 --> 00:05:28,000
considering that I don't know how many people I didn't Google a number beforehand actually use Linux open source or you have some kind of Linux software running.

44
00:05:28,000 --> 00:05:32,000
But it's just there should be different ways.

45
00:05:32,000 --> 00:05:36,000
There's the argument of, hey, I'm doing this for the greater good.

46
00:05:36,000 --> 00:05:37,000
But what is the boundary?

47
00:05:37,000 --> 00:05:39,000
You know, it's a little fuzzy still.

48
00:05:39,000 --> 00:05:46,000
Hence, like why there's so many now research papers focusing on ethics and security projects.

49
00:05:46,000 --> 00:05:52,000
But circling back here, are there vulnerabilities in 3D printing repositories?

50
00:05:52,000 --> 00:05:53,000
Yes.

51
00:05:53,000 --> 00:05:54,000
There probably is, right?

52
00:05:54,000 --> 00:05:58,000
I mean, you can go on your CVE database search.

53
00:05:58,000 --> 00:06:03,000
I'm sure if you look up 3D printing, there'll be a lot of results that come up.

54
00:06:03,000 --> 00:06:11,000
But the gist here is there's a bunch of repositories, a lot are written in Python and C slash C++.

55
00:06:11,000 --> 00:06:17,000
And we kind of just want to explore how secure are these 3D printing repositories?

56
00:06:17,000 --> 00:06:26,000
Because the market for 3D printers, just in case you did not know, is growing at an exponential rate and becoming highly dependent upon.

57
00:06:26,000 --> 00:06:34,000
So this is why we tend to focus on projects, specifically 3D printing from a bag of hat, a bag of tricks.

58
00:06:35,000 --> 00:06:45,000
So these are critical open source supply chain security repositories.

59
00:06:45,000 --> 00:06:56,000
More specifically, if we want to look at this from an ethical perspective, one way to consider not doing so is actually submitting pull requests that have vulnerable code.

60
00:06:56,000 --> 00:07:01,000
So our approach is just looking at the history of repositories.

61
00:07:01,000 --> 00:07:07,000
We're taking a look at pull requests, for instance, that have already been merged into the main code base.

62
00:07:07,000 --> 00:07:10,000
You know, some of these repositories date back to 2012.

63
00:07:10,000 --> 00:07:12,000
Some of them date back to 2020.

64
00:07:12,000 --> 00:07:15,000
Some of them have just recently came out.

65
00:07:15,000 --> 00:07:20,000
So our question is, which pull requests can we trust?

66
00:07:20,000 --> 00:07:25,000
Here's an example of a PR that's simply fixing typos.

67
00:07:25,000 --> 00:07:31,000
So I'm going to notice that there, for instance, let's see, what do we have here?

68
00:07:31,000 --> 00:07:36,000
A cross with two C's turned into a cross with one C. Okay, pretty innocent pull request.

69
00:07:36,000 --> 00:07:43,000
A pull request to change the fan speed or record the fan speed of a 3D printer, for instance.

70
00:07:43,000 --> 00:07:48,000
But, you know, there are some attack vectors that we can think of on the top of our head maybe.

71
00:07:48,000 --> 00:07:49,000
I've had some time to brainstorm.

72
00:07:49,000 --> 00:07:57,000
So an example can be overheating or unintentionally printing out objects that the user would not want to print out.

73
00:07:57,000 --> 00:08:05,000
So if someone could remotely log into someone's 3D printer, they can use that and take advantage to print out whatever they want.

74
00:08:05,000 --> 00:08:07,000
They could overheat some stuff.

75
00:08:07,000 --> 00:08:11,000
Perhaps it's just a pain to buy materials and someone just goes through all your materials and, you know,

76
00:08:11,000 --> 00:08:18,000
you can't use your printer anymore because you have to go buy new materials for it to work.

77
00:08:18,000 --> 00:08:24,000
But at the end of the day, we have a few research goals because this is a research-oriented approach.

78
00:08:24,000 --> 00:08:30,000
We are looking at governance structures in pull requests, I mean, in open source projects.

79
00:08:30,000 --> 00:08:34,000
We are looking at, in other words, who has the power to approve pull requests?

80
00:08:34,000 --> 00:08:36,000
Who are these people approving pull requests?

81
00:08:36,000 --> 00:08:41,000
Do they have a security background and they're, you know, merging hundreds of pull requests,

82
00:08:41,000 --> 00:08:45,000
which in itself could be a security concern, which I'll talk about eventually.

83
00:08:45,000 --> 00:08:53,000
But in other words, too, do pull requests actually introduce new vulnerabilities?

84
00:08:53,000 --> 00:08:57,000
For this first part of the talk, we will focus on those first two research questions,

85
00:08:57,000 --> 00:09:05,000
talking about governance structures, which I'll define in a minute, and who has the power to approve pull requests.

86
00:09:05,000 --> 00:09:07,000
I know there's a lot of text here.

87
00:09:07,000 --> 00:09:16,000
Our approach is essentially we want to measure and quantify potential security concerns in open source repositories

88
00:09:16,000 --> 00:09:20,000
from what we would call a socio-technical perspective,

89
00:09:20,000 --> 00:09:24,000
which means we are not writing code to introduce vulnerabilities.

90
00:09:24,000 --> 00:09:27,000
We're not writing code to exploit vulnerabilities.

91
00:09:27,000 --> 00:09:32,000
We're simply taking a look at the landscape of 3D printing repositories.

92
00:09:32,000 --> 00:09:38,000
And I'll actually talk about overall top Python repositories to see if there are any security risks.

93
00:09:38,000 --> 00:09:45,000
We do this by taking a look at repositories related to 3D printers, since that's our case study.

94
00:09:45,000 --> 00:09:51,000
And for each repository, we look at metrics such as the number of pull requests,

95
00:09:51,000 --> 00:09:58,000
the number of pull request creators and mergers, so who are the contributors, who are the maintainers,

96
00:09:58,000 --> 00:10:00,000
the number of conversations that are happening.

97
00:10:00,000 --> 00:10:06,000
For instance, I think we could argue that if something is security related,

98
00:10:06,000 --> 00:10:09,000
we should at least be talking about the code before it's merged.

99
00:10:09,000 --> 00:10:16,000
Is the bug fix introducing new bugs? Is the bug fix actually going to work, et cetera?

100
00:10:16,000 --> 00:10:22,000
Is the vulnerability actually being patched? Are some of the things that we're concerned about?

101
00:10:22,000 --> 00:10:25,000
We want to have five pull requests that are security related.

102
00:10:25,000 --> 00:10:28,000
We do this through some kind of basic keyword search.

103
00:10:28,000 --> 00:10:34,000
We plan to introduce some type of machine learning to see if conversations are actually about security

104
00:10:34,000 --> 00:10:38,000
versus we found a few pull requests that we thought were security related.

105
00:10:38,000 --> 00:10:39,000
It was just talking about job security.

106
00:10:39,000 --> 00:10:44,000
So getting the context of conversations is actually a little more tricky than you think,

107
00:10:44,000 --> 00:10:47,000
especially coming from a non-machine learning background.

108
00:10:47,000 --> 00:10:50,000
Taking the context, and as we saw in the last presentation too,

109
00:10:50,000 --> 00:10:55,000
machine learning is something that we should be able to trust.

110
00:10:56,000 --> 00:11:00,000
Looking at the context of conversations would obviously be a very helpful metric

111
00:11:00,000 --> 00:11:02,000
as opposed to digging through 1,000.

112
00:11:02,000 --> 00:11:06,000
Maybe there's only 20 security actually related pull requests.

113
00:11:06,000 --> 00:11:12,000
Last but not least, we want to take a look at how long between submitting a pull request

114
00:11:12,000 --> 00:11:16,000
versus it actually being included in the main code base.

115
00:11:16,000 --> 00:11:23,000
Ideally, you'd want a security related pull request, right here, this bottom one.

116
00:11:23,000 --> 00:11:24,000
Look at the difference.

117
00:11:24,000 --> 00:11:30,000
This took 113 hours to merge, which I think by my very quick math is about four and a half days,

118
00:11:30,000 --> 00:11:35,000
maybe even close to five, as opposed to very not related pull requests

119
00:11:35,000 --> 00:11:38,000
that took only just over an hour to merge.

120
00:11:38,000 --> 00:11:40,000
Maybe they just checked it.

121
00:11:40,000 --> 00:11:47,000
We want security related pull requests to be thoroughly reviewed is what I'm trying to say.

122
00:11:47,000 --> 00:11:50,000
Here's an example from the Octoprint plugins repo,

123
00:11:50,000 --> 00:11:55,000
which is a very popular 3D printing repository project.

124
00:11:55,000 --> 00:11:59,000
This is just to give you an idea of behind the scenes,

125
00:11:59,000 --> 00:12:01,000
what is the data that we're collecting,

126
00:12:01,000 --> 00:12:05,000
and what is the data that we're applying, for instance, machine learning to.

127
00:12:05,000 --> 00:12:08,000
Again, transparency, as mentioned in the last presentation,

128
00:12:08,000 --> 00:12:12,000
is very crucial for reproducibility, reculability,

129
00:12:12,000 --> 00:12:16,000
and all those other words that I can't pronounce.

130
00:12:16,000 --> 00:12:20,000
Here, just for instance, we can see who created the pull request,

131
00:12:20,000 --> 00:12:22,000
who actually merged the pull request,

132
00:12:22,000 --> 00:12:24,000
if there was some kind of conversation,

133
00:12:24,000 --> 00:12:27,000
we can see the number of comments,

134
00:12:27,000 --> 00:12:33,000
and just general information that could be useful for our research questions.

135
00:12:33,000 --> 00:12:35,000
Yes?

136
00:12:35,000 --> 00:12:40,000
If I'm attacking these sites, don't I want to push out fixes

137
00:12:40,000 --> 00:12:45,000
such that they don't appear to be like security addressing issues?

138
00:12:45,000 --> 00:12:51,000
I don't want to sneak my bad app code through the door that no one's looking at.

139
00:12:51,000 --> 00:12:52,000
Right, that's a great...

140
00:12:52,000 --> 00:12:54,000
If you're looking at the door there,

141
00:12:54,000 --> 00:12:57,000
you're looking at the CDD exploiting it.

142
00:12:57,000 --> 00:12:59,000
It doesn't fix those things,

143
00:12:59,000 --> 00:13:02,000
so you're not going to actually find the bad app.

144
00:13:02,000 --> 00:13:04,000
It's an interesting point that you bring up,

145
00:13:04,000 --> 00:13:10,000
because to my knowledge, there are three main threats against open security,

146
00:13:10,000 --> 00:13:14,000
and the number one is malicious actors submitting bad commits,

147
00:13:14,000 --> 00:13:17,000
whether that is not masked as a bad commit,

148
00:13:17,000 --> 00:13:20,000
or in the more realistic case,

149
00:13:20,000 --> 00:13:25,000
it's looked to make it seem like it's not actually a bad pull request.

150
00:13:25,000 --> 00:13:28,000
Maybe it's one of those where they fix 100 files,

151
00:13:28,000 --> 00:13:30,000
and you go on your GitHub viewer, you can't really see it,

152
00:13:30,000 --> 00:13:34,000
and you're kind of lazy, and you're like, okay, maybe I'll just merge this,

153
00:13:34,000 --> 00:13:36,000
but there's actually some bad code in that,

154
00:13:36,000 --> 00:13:39,000
which I'll get to in our second part of the presentation,

155
00:13:39,000 --> 00:13:41,000
where we're actually trying to use static analysis tools

156
00:13:41,000 --> 00:13:46,000
to hopefully identify those pull requests that introduce bad code,

157
00:13:46,000 --> 00:13:49,000
or in other words, what we care about more is vulnerable code.

158
00:13:49,000 --> 00:13:52,000
So that's a great point you bring up, because that is definitely true.

159
00:13:52,000 --> 00:13:55,000
Stealthy commits, if you look up stealthy commits,

160
00:13:56,000 --> 00:13:59,000
I think there's about five papers that talk about this very issue.

161
00:14:02,000 --> 00:14:05,000
And some preliminary statistics, again, just for transparency,

162
00:14:05,000 --> 00:14:09,000
and I love that the previous presentation kept kind of,

163
00:14:09,000 --> 00:14:12,000
hey guys, we should be transparent about our data,

164
00:14:12,000 --> 00:14:14,000
and we should make it open source.

165
00:14:14,000 --> 00:14:15,000
I'm all for that.

166
00:14:15,000 --> 00:14:20,000
So here are some repositories that come from the first nine pages,

167
00:14:20,000 --> 00:14:27,000
but these are the top 15 repositories that have the most merged pull requests,

168
00:14:27,000 --> 00:14:32,000
i.e. pull requests that are included in the main code base.

169
00:14:32,000 --> 00:14:36,000
So, I mean, we have a very large range of statistics here,

170
00:14:36,000 --> 00:14:42,000
including, look, like the first one, you have 957 unique authors.

171
00:14:42,000 --> 00:14:46,000
There are 7,500 merged pull requests, but there are actually 22 mergers,

172
00:14:46,000 --> 00:14:49,000
so this seems like a pretty large team.

173
00:14:49,000 --> 00:14:54,000
For instance, if you go down maybe to the Kevin O'Connor Clipper Project,

174
00:14:54,000 --> 00:14:59,000
which is also a very popular 3D printing open source project,

175
00:14:59,000 --> 00:15:03,000
we only have one merger, there's 207 unique authors,

176
00:15:03,000 --> 00:15:06,000
and there's just over 500 merged pull requests.

177
00:15:06,000 --> 00:15:10,000
So, again, looking from putting on my security hat,

178
00:15:10,000 --> 00:15:14,000
I would hope this person has some type of security background or security,

179
00:15:14,000 --> 00:15:19,000
even awareness or some workflow in place to check for bugs

180
00:15:19,000 --> 00:15:25,000
before merging all of these pull requests from a wide range of contributors,

181
00:15:25,000 --> 00:15:30,000
which is exactly what our next guy here is talking about.

182
00:15:30,000 --> 00:15:33,000
This is just a, we use some keywords.

183
00:15:33,000 --> 00:15:37,000
There's just an example of some of the keywords that we use to identify

184
00:15:37,000 --> 00:15:40,000
potentially security-related pull requests.

185
00:15:40,000 --> 00:15:43,000
We have exploit, vulnerable, attack, and save, vulnerability, and security.

186
00:15:43,000 --> 00:15:46,000
So there's more, but this is just a little snippet,

187
00:15:46,000 --> 00:15:51,000
just for anyone who's curious of how we call a PR security-related.

188
00:15:51,000 --> 00:15:54,000
So let's talk about governance structures.

189
00:15:54,000 --> 00:16:00,000
Governance structures, what we define to be were democracy versus autocracy.

190
00:16:00,000 --> 00:16:04,000
We would call this one, for instance, to be more of a democracy

191
00:16:04,000 --> 00:16:11,000
where there's somewhat of a balanced range of project maintainers on this side here.

192
00:16:11,000 --> 00:16:14,000
This would be my right-hand side.

193
00:16:14,000 --> 00:16:17,000
While on this one over here, if I'm facing this way, it would be the left-hand side.

194
00:16:17,000 --> 00:16:20,000
We have this project maintainer named Thinkyhead,

195
00:16:20,000 --> 00:16:26,000
who just in 2021 merged over 600 pull requests.

196
00:16:26,000 --> 00:16:30,000
And you can see from 2018 to all the way to 2020,

197
00:16:30,000 --> 00:16:34,000
Thinkyhead merged over 1,000 pull requests in a given year.

198
00:16:34,000 --> 00:16:37,000
Let me say that one more time.

199
00:16:38,000 --> 00:16:45,000
One person is emerging over 1,000 pull requests in a single year for three years consecutively.

200
00:16:45,000 --> 00:16:50,000
And going back in time, you can see 2016, they merged just about 1,000.

201
00:16:50,000 --> 00:16:54,000
But again, this would be an example of what we would call an autocracy.

202
00:16:54,000 --> 00:16:57,000
One person kind of seems like they're in charge.

203
00:16:57,000 --> 00:17:02,000
And again, we would hope this person has some kind of security background, for instance,

204
00:17:02,000 --> 00:17:06,000
or that they're actually thoroughly reviewing these pull requests.

205
00:17:09,000 --> 00:17:14,000
And again, some more autocracies that we are addressing.

206
00:17:14,000 --> 00:17:19,000
Again, I also get some statistics of how popular these repositories are.

207
00:17:19,000 --> 00:17:22,000
There's the Clipper project that I mentioned earlier.

208
00:17:22,000 --> 00:17:27,000
Kevin O'Connor, which is the username, seems to be merging every single pull request.

209
00:17:27,000 --> 00:17:28,000
No team.

210
00:17:28,000 --> 00:17:30,000
This guy is just merging everything.

211
00:17:30,000 --> 00:17:35,000
And even in this project, Repetier Firmware, this is a 3D printing firmware project.

212
00:17:35,000 --> 00:17:40,000
We have our user Repetier merging every single pull request.

213
00:17:40,000 --> 00:17:45,000
And I'm sure if I can go back a couple slides, you'll see there are a wide range of contributors.

214
00:17:45,000 --> 00:17:50,000
This is just, again, this is a socio-technical perspective.

215
00:17:50,000 --> 00:17:55,000
We are looking at the human-centered security perspective,

216
00:17:55,000 --> 00:18:02,000
which, if you look into it, is very underexplored, especially in the context of open source projects.

217
00:18:02,000 --> 00:18:08,000
And I think it was something like 97% of cyber attacks have some kind of human in the middle,

218
00:18:08,000 --> 00:18:10,000
whether it's phishing or something else.

219
00:18:10,000 --> 00:18:15,000
So we are concerned of the safety of open source projects.

220
00:18:18,000 --> 00:18:23,000
And of course, there are some repos with limited activity.

221
00:18:23,000 --> 00:18:26,000
This person only merged a total of six pull requests in three years.

222
00:18:26,000 --> 00:18:29,000
This person only merged one pull request.

223
00:18:29,000 --> 00:18:32,000
Are they making commits on their own and making the project run?

224
00:18:32,000 --> 00:18:37,000
Is there an old vulnerability that hasn't been patched in this popular repository?

225
00:18:37,000 --> 00:18:40,000
Over almost 1,300 stars?

226
00:18:40,000 --> 00:18:45,000
It's something to think about. It's something to ponder.

227
00:18:45,000 --> 00:18:48,000
Who is using outdated repositories?

228
00:18:48,000 --> 00:18:52,000
Who is using the Creality 3D printer?

229
00:18:52,000 --> 00:18:55,000
But it hasn't really checked that there's any CVEs.

230
00:18:55,000 --> 00:19:02,000
It's hard to see behind the scenes to what extent users are updating their software.

231
00:19:02,000 --> 00:19:09,000
I feel like there's a large reliance on open source and trust in open source because of the transparency aspect.

232
00:19:09,000 --> 00:19:12,000
But it's just concerning.

233
00:19:12,000 --> 00:19:14,000
And we see a hand up over here again.

234
00:19:15,000 --> 00:19:21,000
You mentioned a couple of times that you worry about the committers having security expertise.

235
00:19:21,000 --> 00:19:26,000
And the Creality 3D printer, I can't imagine that any of them have security expertise.

236
00:19:26,000 --> 00:19:30,000
In fact, the security community tells all of us to not develop security expertise.

237
00:19:30,000 --> 00:19:32,000
We need that to be expert.

238
00:19:32,000 --> 00:19:39,000
So I'm confused why you think that anyone would ever be able to find any security problem in any of these systems.

239
00:19:39,000 --> 00:19:46,000
Right. I love that you bring that up too because, I mean, as someone who took a security route,

240
00:19:46,000 --> 00:19:51,000
I didn't start actually learning about security until I was interested in security.

241
00:19:51,000 --> 00:19:57,000
So it is indeed a concern, which I'll mention in a bit.

242
00:19:57,000 --> 00:20:03,000
GitHub has some automatic security features that you could easily implement, I think, with three clicks

243
00:20:03,000 --> 00:20:08,000
that a lot of repositories don't actually use that maintainers can take advantage of.

244
00:20:08,000 --> 00:20:15,000
So to that point, we will actually be looking at the extent in which top open source projects

245
00:20:15,000 --> 00:20:20,000
actually use this automated security features to begin with on GitHub.

246
00:20:20,000 --> 00:20:23,000
And again, that is a really great point.

247
00:20:23,000 --> 00:20:28,000
A lot of developers, it has nothing to do with the developers.

248
00:20:28,000 --> 00:20:34,000
I guess you could kind of argue that if they went to some type of post-secondary education

249
00:20:34,000 --> 00:20:36,000
that there should be security content included.

250
00:20:36,000 --> 00:20:41,000
But that is a whole other issue on its own, which is why we hope to raise this.

251
00:20:41,000 --> 00:20:47,000
Another goal you could argue is we want to raise awareness that, hey, there are some automated features.

252
00:20:47,000 --> 00:20:49,000
Let's implement them.

253
00:20:49,000 --> 00:20:54,000
It's OK if you're not security backgrounded or have some security background.

254
00:20:54,000 --> 00:20:59,000
But it would be really nice to point out that these are open source projects.

255
00:20:59,000 --> 00:21:03,000
Hopefully, people that are using open source projects,

256
00:21:03,000 --> 00:21:07,000
there's at least a few folks that would be concerned about the security

257
00:21:07,000 --> 00:21:09,000
and submit some kind of pull request.

258
00:21:09,000 --> 00:21:13,000
Or you get that depend upon pull request from GitHub,

259
00:21:13,000 --> 00:21:18,000
and you say, hey, there is a critical concern in your repository.

260
00:21:18,000 --> 00:21:22,000
Please merge this pull request so then this library, for instance,

261
00:21:22,000 --> 00:21:30,000
is upgraded to the most recent version so your users are securely intact with your pull request.

262
00:21:30,000 --> 00:21:32,000
So thank you for bringing that up.

263
00:21:33,000 --> 00:21:37,000
A very transparent issue that I think it is barely the second year

264
00:21:37,000 --> 00:21:41,000
that we have a security education-related workshop at the top security conferences.

265
00:22:02,000 --> 00:22:07,000
Yeah, I mean, in software engineering in general,

266
00:22:07,000 --> 00:22:10,000
I know at the top software engineering conferences,

267
00:22:10,000 --> 00:22:15,000
they are recently exploring identifying expertise, for instance,

268
00:22:15,000 --> 00:22:18,000
in open source projects or in companies in general.

269
00:22:18,000 --> 00:22:21,000
That is a great point you bring up,

270
00:22:21,000 --> 00:22:25,000
that you're going to be able to do a lot of research,

271
00:22:25,000 --> 00:22:28,000
and you're going to be able to do a lot of research,

272
00:22:28,000 --> 00:22:31,000
and you're going to be able to do a lot of research

273
00:22:31,000 --> 00:22:34,000
that perhaps there should be experts,

274
00:22:34,000 --> 00:22:38,000
perhaps an autocracy would make more sense for something that's bash-centered

275
00:22:38,000 --> 00:22:40,000
or something assembly-centered,

276
00:22:40,000 --> 00:22:46,000
but maybe it makes more sense for a popular language to have a democracy versus an autocracy.

277
00:22:46,000 --> 00:22:49,000
So that is something to think about.

278
00:22:49,000 --> 00:22:54,000
I guess I appreciate that perspective because now that's something

279
00:22:54,000 --> 00:22:57,000
that's going to stay in the back of my mind after this talk

280
00:22:57,000 --> 00:23:00,000
that hopefully I can go back and address with the team

281
00:23:00,000 --> 00:23:03,000
and maybe that's something to look into, to consider.

282
00:23:03,000 --> 00:23:04,000
Thank you for that.

283
00:23:07,000 --> 00:23:13,000
And to start moving away from 3D printing to the overall top Python repositories,

284
00:23:13,000 --> 00:23:16,000
I just wanted to give you a glimpse of the Django project

285
00:23:16,000 --> 00:23:19,000
versus the yellow version 5 project,

286
00:23:19,000 --> 00:23:22,000
which I think is a machine learning project oriented.

287
00:23:22,000 --> 00:23:25,000
So you could see in Django,

288
00:23:25,000 --> 00:23:31,000
it seems to be democracy oriented where there's a good amount of project maintainers,

289
00:23:31,000 --> 00:23:33,000
but really there's a shift.

290
00:23:33,000 --> 00:23:39,000
You see back in 2012, all the way up to 2018,

291
00:23:39,000 --> 00:23:42,000
there's this maintainer, Tim Graham,

292
00:23:42,000 --> 00:23:47,000
that seems to be in charge, we'll call it in charge of the project.

293
00:23:47,000 --> 00:23:53,000
While there is a shift to this new maintainer, Felix2xm,

294
00:23:53,000 --> 00:23:58,000
from 2019 all the way to this year,

295
00:23:58,000 --> 00:24:04,000
which he or she has already merged more than 100 pull requests this year alone.

296
00:24:04,000 --> 00:24:06,000
So it's just, again, an interesting perspective.

297
00:24:06,000 --> 00:24:08,000
Perhaps this is something to look into.

298
00:24:08,000 --> 00:24:11,000
And again, to raise the awareness,

299
00:24:11,000 --> 00:24:16,000
we should have some type of code scanning tool in place,

300
00:24:16,000 --> 00:24:17,000
which I'm going to get to,

301
00:24:17,000 --> 00:24:20,000
or hopefully this person has some kind of security background.

302
00:24:20,000 --> 00:24:23,000
And going down versus to yellow version 5,

303
00:24:23,000 --> 00:24:25,000
we have this one project maintainer,

304
00:24:25,000 --> 00:24:30,000
mostly one project maintainer, Glen Joacher or Joker,

305
00:24:30,000 --> 00:24:32,000
who seems to be taking charge of this project

306
00:24:32,000 --> 00:24:37,000
and to this day has merged just about 2,000 pull requests along.

307
00:24:37,000 --> 00:24:39,000
So again, just something to ponder.

308
00:24:39,000 --> 00:24:44,000
This is an initial kind of like approach of assessing the landscape

309
00:24:44,000 --> 00:24:47,000
that can hopefully open up some new research directions.

310
00:24:48,000 --> 00:24:53,000
So this is an example of a thinky head in that other project that we saw.

311
00:24:53,000 --> 00:24:55,000
This person merged a bunch of pull requests.

312
00:24:55,000 --> 00:24:59,000
This is a suspicious merge example where,

313
00:24:59,000 --> 00:25:02,000
sorry, this was merged before I had a chance to review it.

314
00:25:02,000 --> 00:25:07,000
I'll make sure that all admins are brought up to date in the no merge policy ASAP.

315
00:25:07,000 --> 00:25:11,000
So this is an instance where perhaps vulnerable code could have been introduced

316
00:25:11,000 --> 00:25:13,000
that we were able to identify.

317
00:25:14,000 --> 00:25:18,000
But again, there's a lot of stuff hidden in the deep waters.

318
00:25:18,000 --> 00:25:20,000
It's almost like finding a needle in a haystack.

319
00:25:22,000 --> 00:25:25,000
And last but not least, to wrap things up,

320
00:25:25,000 --> 00:25:27,000
I'm going to have a group of slides talking about

321
00:25:27,000 --> 00:25:30,000
if pull requests actually introduce new vulnerabilities.

322
00:25:31,000 --> 00:25:33,000
Like I mentioned earlier, GitHub has a tool.

323
00:25:33,000 --> 00:25:36,000
This tool is CodeQL, if we've heard of it before.

324
00:25:36,000 --> 00:25:39,000
They can automatically scan your code with a click of three buttons.

325
00:25:39,000 --> 00:25:41,000
You get a GitHub workflow set up for you

326
00:25:41,000 --> 00:25:43,000
depending on what language you're using,

327
00:25:43,000 --> 00:25:47,000
assuming your repository is CodeQL supported,

328
00:25:47,000 --> 00:25:49,000
which Python has a bunch of queries

329
00:25:49,000 --> 00:25:53,000
where they can actually find potential security vulnerabilities.

330
00:25:57,000 --> 00:26:00,000
So after randomly selecting some pull requests

331
00:26:00,000 --> 00:26:03,000
from this specific repository called the Spaghetti Detective,

332
00:26:03,000 --> 00:26:05,000
again, a 3D printer,

333
00:26:05,000 --> 00:26:11,000
there was one that seemed to have an unbound local error.

334
00:26:12,000 --> 00:26:15,000
This is very tricky to find a needle in a haystack.

335
00:26:16,000 --> 00:26:20,000
Even if this isn't directly security-related,

336
00:26:20,000 --> 00:26:24,000
it is something to consider, and hopefully, fingers crossed we do.

337
00:26:24,000 --> 00:26:26,000
Not fingers crossed that we find stuff,

338
00:26:26,000 --> 00:26:28,000
maybe fingers crossed that we don't find stuff.

339
00:26:28,000 --> 00:26:31,000
So we plan to continue writing static analysis

340
00:26:31,000 --> 00:26:33,000
on a bunch of different pull requests.

341
00:26:34,000 --> 00:26:37,000
Looking at the top overall Python repositories,

342
00:26:37,000 --> 00:26:39,000
which is what I really wanted to get to,

343
00:26:40,000 --> 00:26:43,000
based on the top 100, we found that just over 1,000

344
00:26:43,000 --> 00:26:47,000
were potentially security-related pull requests.

345
00:26:48,000 --> 00:26:52,000
28.3% of these have a security policy in place.

346
00:26:52,000 --> 00:26:55,000
The reason this is a weird number is because we only looked at repositories

347
00:26:55,000 --> 00:26:58,000
that have at least 50 merged pull requests,

348
00:26:58,000 --> 00:27:00,000
and I think that number was 71,

349
00:27:00,000 --> 00:27:03,000
so hence the weird percentage, even though I'm saying it's out of 100.

350
00:27:04,000 --> 00:27:09,000
However, only 10% of top Python repositories,

351
00:27:09,000 --> 00:27:11,000
looking at all of them,

352
00:27:11,000 --> 00:27:16,000
have some kind of CodeQL workflow enabled or code scanning enabled.

353
00:27:17,000 --> 00:27:20,000
So out of the top Python repositories,

354
00:27:20,000 --> 00:27:22,000
looking at the top 100,

355
00:27:23,000 --> 00:27:25,000
in this case, it would be 10.

356
00:27:26,000 --> 00:27:29,000
This is from a paper that's going to be published

357
00:27:29,000 --> 00:27:31,000
at one of the top software engineering conferences coming up,

358
00:27:31,000 --> 00:27:35,000
one of their co-educated workshops on software vulnerability management.

359
00:27:37,000 --> 00:27:39,000
This is something to be concerned about, for instance,

360
00:27:39,000 --> 00:27:43,000
back to our point where perhaps not a lot of people don't have,

361
00:27:43,000 --> 00:27:45,000
they don't have a security background,

362
00:27:45,000 --> 00:27:49,000
but CodeQL, please enable it

363
00:27:49,000 --> 00:27:53,000
if you are in a top Python repository

364
00:27:53,000 --> 00:27:55,000
or some kind of open source repository.

365
00:27:55,000 --> 00:27:58,000
This will give you notifications to merge your stuff,

366
00:28:00,000 --> 00:28:03,000
at the end of the day, this number should be higher.

367
00:28:03,000 --> 00:28:06,000
I'm just glad to see that at least 75% of them

368
00:28:06,000 --> 00:28:08,000
have at least one type of workflow enabled,

369
00:28:08,000 --> 00:28:10,000
perhaps for template checks,

370
00:28:10,000 --> 00:28:13,000
or maybe it is a security check and it's not specifically CodeQL,

371
00:28:13,000 --> 00:28:15,000
we just didn't find that,

372
00:28:15,000 --> 00:28:20,000
but there is progress to be made in having automated security scanning

373
00:28:20,000 --> 00:28:22,000
in top projects in general.

374
00:28:22,000 --> 00:28:24,000
If you're curious, Kotlin,

375
00:28:24,000 --> 00:28:27,000
1.7% of the top projects have this enabled,

376
00:28:27,000 --> 00:28:29,000
that is also very concerning,

377
00:28:29,000 --> 00:28:32,000
but to focus on Python, it's 10%.

378
00:28:32,000 --> 00:28:34,000
Yes?

379
00:28:34,000 --> 00:28:37,000
In addition to your top Python repositories

380
00:28:37,000 --> 00:28:39,000
based on your GitHub analysis,

381
00:28:39,000 --> 00:28:42,000
but if you also look at PyPy,

382
00:28:42,000 --> 00:28:45,000
the mark tagging has a description.

383
00:28:45,000 --> 00:28:46,000
Oh, okay.

384
00:28:46,000 --> 00:28:48,000
So that will be another thing to see,

385
00:28:48,000 --> 00:28:51,000
because you don't have the lookalike activity,

386
00:28:51,000 --> 00:28:58,000
so we talk about the things that lead to frameworks built

387
00:28:58,000 --> 00:29:02,000
and so forth that are on the mail for Python

388
00:29:02,000 --> 00:29:05,000
or those kinds of things.

389
00:29:05,000 --> 00:29:08,000
So that's kind of our security.

390
00:29:08,000 --> 00:29:10,000
Gotcha. Thank you for bringing that up.

391
00:29:10,000 --> 00:29:12,000
Yeah, I mean, dependencies is,

392
00:29:12,000 --> 00:29:15,000
oh, that's a whole nother topic, supply chain dependencies.

393
00:29:15,000 --> 00:29:18,000
If you have Six Store, all of that stuff,

394
00:29:19,000 --> 00:29:21,000
some folks that came out of Google

395
00:29:21,000 --> 00:29:23,000
are also developing all these really nice tools

396
00:29:23,000 --> 00:29:26,000
that hopefully will help supply chain security in Python

397
00:29:26,000 --> 00:29:29,000
specifically to be more secure.

398
00:29:29,000 --> 00:29:34,000
Yeah, dependencies are a huge topic to consider

399
00:29:34,000 --> 00:29:36,000
and just to kind of look out for.

400
00:29:36,000 --> 00:29:39,000
So at the end of the day, we talked about governance,

401
00:29:39,000 --> 00:29:42,000
we talked about vulnerabilities and pull requests,

402
00:29:42,000 --> 00:29:44,000
specifically looking at CodeQL.

403
00:29:44,000 --> 00:29:46,000
Next steps are to investigate PRs

404
00:29:46,000 --> 00:29:48,000
that are actually security-related

405
00:29:48,000 --> 00:29:50,000
and to see if there's actually a relationship

406
00:29:50,000 --> 00:29:54,000
between CodeQL security findings and governance structures.

407
00:29:54,000 --> 00:29:57,000
So is it really the case that there's too many eyes on this project

408
00:29:57,000 --> 00:30:00,000
or that there's not enough eyes on this project?

409
00:30:00,000 --> 00:30:02,000
I doubt we'll find some kind of correlation,

410
00:30:02,000 --> 00:30:05,000
but hopefully, at the end of the day,

411
00:30:05,000 --> 00:30:08,000
we just want to hope that all our open source projects are secure

412
00:30:08,000 --> 00:30:10,000
since a bunch of people use them.

413
00:30:10,000 --> 00:30:12,000
And I'm glad that you asked questions throughout,

414
00:30:12,000 --> 00:30:14,000
so then I didn't have to lead too much time at the end.

415
00:30:14,000 --> 00:30:16,000
Thank you.

416
00:30:16,000 --> 00:30:18,000
APPLAUSE

