1
00:00:00,000 --> 00:00:10,000
Thank you. And good morning. My name is Natalia Bugha. I am a senior software developer at Bloomberg.

2
00:00:10,000 --> 00:00:21,000
Like that? Is it better? All right, thank you. Natalia Bugha, senior software developer at Bloomberg.

3
00:00:21,000 --> 00:00:28,000
Before I get into the topic of my discussion, I would like to say a few words about myself and the company I work for.

4
00:00:28,000 --> 00:00:34,000
Bloomberg is a financial information software data and news and media company.

5
00:00:34,000 --> 00:00:42,000
We are a global company with offices in all major financial hubs and even more news bureaus around the world.

6
00:00:42,000 --> 00:00:55,000
We provide financial technology solutions such as analytics, trading platforms, data services and news to our customers all over the world.

7
00:00:55,000 --> 00:01:02,000
They use our solutions to make informed financial decisions and collaborate.

8
00:01:02,000 --> 00:01:12,000
I don't do any of that. I work in the department that... Oh, I'm sorry. I forgot to switch my slide.

9
00:01:12,000 --> 00:01:19,000
This is our main product, Bloomberg Terminal, that has all that good stuff.

10
00:01:19,000 --> 00:01:28,000
And as I said, it's used by many decision makers. And now about myself.

11
00:01:28,000 --> 00:01:34,000
As I said, I work in the department that provides software for the internal Bloomberg use.

12
00:01:34,000 --> 00:01:45,000
During my tenure there, I supported areas such as HR, operations sales and now compliance.

13
00:01:45,000 --> 00:01:53,000
Being exposed to all these areas gave me a glimpse into how such a big company operates, which I find kind of exciting.

14
00:01:53,000 --> 00:02:03,000
Since I joined compliance, I was exposed to a new area in technology we call regulatory technologies or RegTech.

15
00:02:03,000 --> 00:02:14,000
It encompasses... It's a rapidly growing field and it encompasses software that is used by companies to stay compliant with regulatory requirements and do it efficiently.

16
00:02:14,000 --> 00:02:27,000
And some examples of the RegTech activities are sanctions screening, anti-money laundering, monitoring, client management and some employee conduct policies.

17
00:02:27,000 --> 00:02:42,000
But the main aspect of my work that I particularly enjoy is having my users in the same company, often in the same building,

18
00:02:42,000 --> 00:02:52,000
which lets me get immediate feedback about my releases and learn about their work and the main I support.

19
00:02:52,000 --> 00:03:04,000
By communicating with my users in official and unofficial settings and just picking up the phone and calling them and asking,

20
00:03:04,000 --> 00:03:13,000
hey, what do you think about this? Or getting a call from them with questions, well, why doesn't this work? Or more often, how do I do this?

21
00:03:13,000 --> 00:03:24,000
And often this will lead to a more in-depth discussions and some ideas about what we want to build next.

22
00:03:24,000 --> 00:03:41,000
And having this firsthand experience with coming up with these ideas and converting them into technical designs and then eventually seeing a complete product gives me a sense of accomplishment and impact.

23
00:03:41,000 --> 00:03:49,000
And this brings me to my topic. I'm going to tell you about a small project that I worked on.

24
00:03:49,000 --> 00:04:01,000
And I'll talk about, I'm going to use it as an example to demonstrate how we approach finding a solution by employing design thinking.

25
00:04:01,000 --> 00:04:27,000
And I will also highlight my personal beliefs that good design will not only address user business problems, but will also eliminate distractions for developers and result in greater productivity and satisfaction with the end product.

26
00:04:27,000 --> 00:04:38,000
So what is design thinking? Often you will hear design thinking methodology or design thinking process.

27
00:04:38,000 --> 00:04:55,000
I like this quote from Michael Keeling's book because it highlights the essence of design thinking as a way of thinking and considering perspectives of the users who directly interact with our products.

28
00:04:55,000 --> 00:05:06,000
So how does it work? Five steps or processes have been established to carry out this process.

29
00:05:06,000 --> 00:05:18,000
And the first one is empathize, which basically you do want to understand the needs and the problems of your users and their ideal environment to achieve their goals.

30
00:05:18,000 --> 00:05:23,000
And it does require a certain level of curiosity and empathy.

31
00:05:23,000 --> 00:05:32,000
And when we talk about people who are directly affected by the product, we very often forget about ourselves.

32
00:05:32,000 --> 00:05:37,000
And I believe we as developers are definitely affected by the products we build.

33
00:05:37,000 --> 00:05:45,000
How much time do we want to spend on maintenance, on support? How are we going to operate our products?

34
00:05:45,000 --> 00:05:51,000
These considerations should be taken into account when we design them.

35
00:05:51,000 --> 00:06:09,000
Once we know, once we understand what the problems are and what the ideal outcome would be, we want to define our goals so that everyone is clear on the approach we want to take and what we are trying to achieve.

36
00:06:09,000 --> 00:06:23,000
And once we have that, we want to brainstorm and put forward the ideas and evaluate them and sort through them and figure out what are the best ones to achieve a good result.

37
00:06:23,000 --> 00:06:36,000
And after that, we want to build a prototype, even if it's a simple visualization, just so that there is a good understanding about the final product or a final process.

38
00:06:36,000 --> 00:06:42,000
And then we test it out. We do want to make sure we build what we set out to do.

39
00:06:42,000 --> 00:06:55,000
This process works best on the large and complicated problems, but for the purpose of this demo, I will use a simpler solution.

40
00:06:55,000 --> 00:07:06,000
So to give you a background into this problem, one of the basic and pretty critical actions in Rectec is screening.

41
00:07:06,000 --> 00:07:13,000
For example, sanctioned screen entities. I am in the middle of it. I provide an operational solution.

42
00:07:13,000 --> 00:07:22,000
So basically what I need to do is basically is acquire our data set and transfer it to the location where screening is performed.

43
00:07:22,000 --> 00:07:35,000
This is a very simple process. However, for a number of reasons, not only regulatory, this process was going to expand.

44
00:07:35,000 --> 00:07:46,000
The number of data sets that we have to screen would grow. The types of screening would expand as well, and it was going to become a disaster to manage them.

45
00:07:46,000 --> 00:07:58,000
And it was equally a very hectic process for us developers and for users. Maintaining them, setting up new ones, we needed a solution.

46
00:07:58,000 --> 00:08:09,000
And this is the first art piece I commissioned ever from a more artistic colleague of mine.

47
00:08:09,000 --> 00:08:13,000
This is what she came up with when I described the process and the situation.

48
00:08:13,000 --> 00:08:23,000
And so basically every bird here could represent the process invoking at some point and carrying the data somewhere.

49
00:08:23,000 --> 00:08:31,000
Just to make sure, to be clear, we do not send our data via pigeon mail or paper planes.

50
00:08:31,000 --> 00:08:37,000
However, this illustrates the process very well and how hectic and unruly it is.

51
00:08:37,000 --> 00:08:48,000
So once we knew, once we had an understanding of our problem, we declared our goals.

52
00:08:48,000 --> 00:08:58,000
Which is basically we want to kick track off and provide visibility into all the data sets and transfers.

53
00:08:58,000 --> 00:09:06,000
We want to set them up, set up the new ones in a timely manner and spend as little time and effort as possible.

54
00:09:06,000 --> 00:09:14,000
And that was kind of engineering feeling about it.

55
00:09:14,000 --> 00:09:18,000
And then we went into figuring out how we're going to achieve it.

56
00:09:19,000 --> 00:09:24,000
Again, for the purpose of this presentation, it is a very simple demonstration.

57
00:09:24,000 --> 00:09:29,000
But this shows that there were a couple of ideas.

58
00:09:29,000 --> 00:09:36,000
One I think took some courage to voice, which is basically why touch this at all?

59
00:09:36,000 --> 00:09:47,000
Maybe we can just enhance it because it already doesn't take a lot of time to set up a new process by duplicating the existing one.

60
00:09:47,000 --> 00:10:00,000
That was not an acceptable approach, just to mention that we would have to maintain multiple code bases for very similar solutions.

61
00:10:00,000 --> 00:10:05,000
And we already know the same bug would have to be fixed everywhere.

62
00:10:05,000 --> 00:10:09,000
The code base coverage would have to be increased everywhere.

63
00:10:09,000 --> 00:10:12,000
We have to migrate it. Well, we have to migrate all these processes.

64
00:10:12,000 --> 00:10:17,000
So very quickly it became clear that, no, this is this is not a good solution.

65
00:10:17,000 --> 00:10:28,000
And it was pretty clear we want to have just one process that will take care of all these transfers, probably based on the input.

66
00:10:28,000 --> 00:10:32,000
However, we also saw that this would not be ideal.

67
00:10:32,000 --> 00:10:41,000
We do not want to pass huge input variable list that is not very readable.

68
00:10:41,000 --> 00:10:47,000
And also this approach would not give would not give us a good handle of the inventory.

69
00:10:47,000 --> 00:10:54,000
And then we thought about it a little longer and came up with a little modified approach.

70
00:10:54,000 --> 00:11:05,000
Well, what about if we store our input configuration somewhere and pass it to the process once we invoke it from the scheduler?

71
00:11:05,000 --> 00:11:11,000
Well, that way it it does do what it's supposed to do based on the input.

72
00:11:11,000 --> 00:11:14,000
But the input is stored in one place.

73
00:11:14,000 --> 00:11:19,000
We do have a good inventory and we could provide visibility into it if needed.

74
00:11:19,000 --> 00:11:26,000
And it's a much, much more readable and much better maintainable process.

75
00:11:26,000 --> 00:11:33,000
It was, however, a little concerned that upfront it would require a little more effort to set up.

76
00:11:33,000 --> 00:11:39,000
However, we saw the benefits definitely outweigh the shortcoming.

77
00:11:39,000 --> 00:11:42,000
And we proceeded with this approach.

78
00:11:42,000 --> 00:11:50,000
So to demonstrate, this was put forward as a prototype.

79
00:11:50,000 --> 00:11:57,000
And this basically shows.

80
00:11:57,000 --> 00:12:01,000
Does it work?

81
00:12:01,000 --> 00:12:09,000
Yes.

82
00:12:09,000 --> 00:12:20,000
This basically shows a very simple approach where we thought we were going to set up a dedicated storage location where data owners will place their data.

83
00:12:20,000 --> 00:12:26,000
And we are going to pick it up with this process that will wake up on schedule as needed.

84
00:12:26,000 --> 00:12:37,000
Get the configuration from the whatever storage we're going to choose and apply it and pick the proper data sets and send them to the proper location.

85
00:12:37,000 --> 00:12:43,000
And it all seemed very clear and not complicated to us.

86
00:12:43,000 --> 00:12:54,000
And the main thing is that to onboard new data sets, all we had to do is to enter configuration record into this repository and schedule a job.

87
00:12:54,000 --> 00:13:02,000
So this would serve all the purposes.

88
00:13:02,000 --> 00:13:08,000
Once we consider the prototypes, there are sometimes some decisions that have to be made immediately.

89
00:13:08,000 --> 00:13:12,000
And one of the most important ones is data security.

90
00:13:12,000 --> 00:13:16,000
So there are some decisions that need to be addressed.

91
00:13:16,000 --> 00:13:23,000
If we don't have a solution, the whole thing should be scratched and started over.

92
00:13:23,000 --> 00:13:29,000
But luckily, we were able to find an acceptable solution for that.

93
00:13:29,000 --> 00:13:32,000
Scalability, of course, of the system.

94
00:13:32,000 --> 00:13:36,000
Well, this is not very system heavy, system resources heavy.

95
00:13:36,000 --> 00:13:42,000
However, network capabilities, because we are transferring data, had to be considered.

96
00:13:42,000 --> 00:13:45,000
And the configuration management solution.

97
00:13:45,000 --> 00:13:50,000
Well, this wasn't as critical, but I'm putting it here just for the purpose of mentioning it.

98
00:13:50,000 --> 00:13:57,000
You do want to decide which way you want to go based on what you're planning to do with this.

99
00:13:58,000 --> 00:14:07,000
So testing, testing is basically making sure you're building what is really required.

100
00:14:07,000 --> 00:14:13,000
And for that, we started with minimum functionality, slowly building on this.

101
00:14:13,000 --> 00:14:23,000
And with every step, we confirm that it does, we do move in the right direction and we do deliver what is needed.

102
00:14:23,000 --> 00:14:29,000
And in the end, it was pretty much a happy ending.

103
00:14:29,000 --> 00:14:42,000
We did end up setting up a lot of transfers successfully in a very little time, practically without any destruction to our other work.

104
00:14:42,000 --> 00:14:47,000
We did increase transparency even more than than we anticipated.

105
00:14:47,000 --> 00:14:52,000
And customer trust in our systems increased significantly.

106
00:14:52,000 --> 00:14:55,000
The system proved to be pretty extendable.

107
00:14:55,000 --> 00:15:04,000
Immediately there were needs for more features which we were able to add pretty easily.

108
00:15:04,000 --> 00:15:10,000
And developer satisfaction, of course, that is important.

109
00:15:10,000 --> 00:15:21,000
So to summarize, if there are main takeaways from this process, I would say that knowing your domain and your user needs is very important.

110
00:15:21,000 --> 00:15:27,000
Before you set out to build something, I would make sure I understand all of these.

111
00:15:27,000 --> 00:15:34,000
Clearly defining your problems so that everyone knows what we're trying to achieve and you get the buy-in.

112
00:15:34,000 --> 00:15:43,000
Evaluating your options, getting the most viable one and building it out.

113
00:15:43,000 --> 00:15:47,000
And definitely consider your own needs when you are designing the system.

114
00:15:47,000 --> 00:15:50,000
And in the process, try to have fun.

115
00:15:50,000 --> 00:15:52,000
Thank you.

