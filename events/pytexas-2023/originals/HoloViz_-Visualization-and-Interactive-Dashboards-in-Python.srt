1
00:00:00,000 --> 00:00:18,440
I know everyone's tired, so bear with me, hopefully it's not too boring for you.

2
00:00:18,440 --> 00:00:22,800
Yeah, so in this talk, we're going to talk about Holovis.

3
00:00:22,800 --> 00:00:27,000
How many of you have used Holovis or heard about Holovis?

4
00:00:27,720 --> 00:00:30,200
Yay, awesome.

5
00:00:30,200 --> 00:00:33,640
Glad a few people have heard about Holovis.

6
00:00:33,640 --> 00:00:37,040
For the rest of you, you're in the right place to learn about Holovis.

7
00:00:37,040 --> 00:00:44,480
Hopefully by the end of the talk, you will be interested in exploring how to use Holovis.

8
00:00:44,480 --> 00:00:50,320
You can find the talk slides in that link below.

9
00:00:50,320 --> 00:00:55,640
Yeah, before we get started, I want to introduce a little bit about me.

10
00:00:55,680 --> 00:00:57,320
Most of you probably don't know me.

11
00:00:57,320 --> 00:00:58,880
My name's Sophia Yang.

12
00:00:58,880 --> 00:01:02,120
I am a data scientist at Anaconda.

13
00:01:02,120 --> 00:01:07,360
My background is in psychology, statistics, and computer science.

14
00:01:07,360 --> 00:01:09,400
I'm not a developer.

15
00:01:09,400 --> 00:01:15,240
I'm not a core developer for Holovis, but I'm a contributor and I'm on the steering

16
00:01:15,240 --> 00:01:18,280
committee of Holovis.

17
00:01:18,280 --> 00:01:24,880
I'm also very passionate about the Python open source ecosystem in the Pi data community.

18
00:01:24,920 --> 00:01:29,880
That's why I contributed to some of the Python packages and even created some Python

19
00:01:29,880 --> 00:01:32,880
packages as well.

20
00:01:32,880 --> 00:01:36,600
Yeah, I also have a data science machine learning book club.

21
00:01:36,600 --> 00:01:39,240
If you're interested, please check it out.

22
00:01:39,240 --> 00:01:47,000
We read one data science or machine learning book per month and we chat with the author

23
00:01:47,000 --> 00:01:50,480
at the end of the month.

24
00:01:50,480 --> 00:01:52,840
Okay, so agenda for today.

25
00:01:52,840 --> 00:01:58,480
We're going to, first of all, go through some pretty visualizations to see what Holovis

26
00:01:58,480 --> 00:02:04,920
can do for you and the second part, we're going to talk about why you might consider

27
00:02:04,920 --> 00:02:11,120
use Holovis and then we're going to talk about how and then finally, we're going to show

28
00:02:11,120 --> 00:02:12,120
some demos.

29
00:02:12,120 --> 00:02:14,920
I hope the demo would work.

30
00:02:14,920 --> 00:02:16,960
Today, we'll see.

31
00:02:16,960 --> 00:02:20,400
So let's get started with some pretty visualizations.

32
00:02:21,400 --> 00:02:28,880
Yeah, so here's one of the example of a tractors, which is basically a combination of sines

33
00:02:28,880 --> 00:02:30,960
and cosines with different parameters.

34
00:02:30,960 --> 00:02:38,480
You can see you can do really pretty images with basic mathematical functions.

35
00:02:38,480 --> 00:02:39,480
Here I have a dashboard.

36
00:02:39,480 --> 00:02:46,840
It's super simple dashboard on this manufacturer card data frame and with a few lines of code,

37
00:02:46,840 --> 00:02:49,200
you can get this dashboard pretty easily.

38
00:02:49,200 --> 00:02:56,360
We're going to talk about the code for this dashboard in a little bit.

39
00:02:56,360 --> 00:03:00,720
And then a lot of you I know probably use machine learning.

40
00:03:00,720 --> 00:03:05,400
You can explore your machine learning models using Holovis tools as well.

41
00:03:05,400 --> 00:03:13,240
Here is an example with k-means clustering with the iris data where we can define different

42
00:03:13,240 --> 00:03:15,480
x and y and number of clusters.

43
00:03:15,480 --> 00:03:22,120
You can visualize different clusters pretty easily.

44
00:03:22,120 --> 00:03:28,520
This is probably one of my favorite visualization dashboards where we have 200 million ship

45
00:03:28,520 --> 00:03:36,000
traffic data from the 2020 US ship vessel data.

46
00:03:36,000 --> 00:03:39,840
And you can see the trajectories of each ship.

47
00:03:39,840 --> 00:03:46,840
And when you clip on each data point, you can see the details of which ships are there

48
00:03:46,840 --> 00:03:51,880
at that specific data point and it will give you a list of the ships.

49
00:03:51,880 --> 00:03:56,600
You can define the number of ships you like to see and it will even return an image of

50
00:03:56,600 --> 00:03:57,680
the ship.

51
00:03:57,680 --> 00:04:04,160
So I thought that was quite interesting.

52
00:04:04,160 --> 00:04:06,040
Here's another example right now.

53
00:04:06,040 --> 00:04:09,880
I know generative AI is really popular.

54
00:04:09,880 --> 00:04:16,600
I made a dashboard with stable diffusion, instruct pics to pics.

55
00:04:16,600 --> 00:04:22,360
It's an image editing chatbot where we upload our image, we tell the bot we want to make

56
00:04:22,360 --> 00:04:28,640
the mountain snowy and the bot returns a snowy mountain picture and then the fireworks picture

57
00:04:28,640 --> 00:04:30,600
to add the fireworks.

58
00:04:30,640 --> 00:04:38,320
So if you want to make a chatbot, it's pretty easy as well with Holovis.

59
00:04:38,320 --> 00:04:45,640
And then here's another example where I use OpenAI APIs, basically just chat gbt API and

60
00:04:45,640 --> 00:04:53,680
dial E. I asked chat gbt to write me a dragon story, which is pretty good, I guess.

61
00:04:53,680 --> 00:04:57,040
And then I asked, can we add a unicorn to the story?

62
00:04:57,040 --> 00:05:00,440
And then the bot added the unicorn to the story.

63
00:05:00,440 --> 00:05:09,840
And I clicked the image button basically calling the dial E API to generate an image.

64
00:05:09,840 --> 00:05:13,480
So that's another app.

65
00:05:13,480 --> 00:05:16,200
So those are the apps.

66
00:05:16,200 --> 00:05:22,200
Hopefully you can see Holovis is useful in many different kinds of visualizations, whether

67
00:05:22,200 --> 00:05:26,480
you're in the science field, whether you want to make a chatbot, whether you want to explore

68
00:05:26,520 --> 00:05:31,320
your machine learning models, or simply just explore a data set.

69
00:05:31,320 --> 00:05:39,280
So next section, I want to walk you through some of my Viz journeys and tell you why I

70
00:05:39,280 --> 00:05:43,880
fell in love with Holovis.

71
00:05:43,880 --> 00:05:48,040
Like many of you, I started my Viz journey with MapHololib.

72
00:05:48,040 --> 00:05:50,520
How many of you knows, used MapHololib?

73
00:05:50,520 --> 00:05:52,040
Almost everyone, right?

74
00:05:52,040 --> 00:05:53,040
Yay.

75
00:05:53,040 --> 00:05:54,800
I love MapHololib actually.

76
00:05:54,800 --> 00:05:56,160
It's a very powerful tool.

77
00:05:56,160 --> 00:06:00,760
I think a lot of beginners didn't think MapHololib is a powerful tool when you start with, but

78
00:06:00,760 --> 00:06:02,240
it's actually really powerful.

79
00:06:02,240 --> 00:06:08,360
You can pretty much configure anything and everything using MapHololib.

80
00:06:08,360 --> 00:06:14,840
Shameless plug, I have a intro to data visualization course and I kind of learning focusing on

81
00:06:14,840 --> 00:06:17,920
MapHololib and MapHololib-based libraries.

82
00:06:17,920 --> 00:06:22,000
If you're interested, check it out.

83
00:06:22,000 --> 00:06:30,400
So as I was doing more data science and visualization projects, I realized that I have three needs

84
00:06:30,400 --> 00:06:34,000
and I would like to explore other options.

85
00:06:34,000 --> 00:06:40,440
So my first need is, I'm pretty lazy, so I want to write as little code as possible.

86
00:06:40,440 --> 00:06:45,000
Even though MapHololib is really, really powerful, you still have a lot of code to write to configure

87
00:06:45,000 --> 00:06:46,300
different things.

88
00:06:46,300 --> 00:06:51,960
So I would like some tools to be a little more high level to get something quickly.

89
00:06:51,960 --> 00:06:55,040
And second of all, I would like to interact with my plots.

90
00:06:55,040 --> 00:06:57,400
I want my plot to be interactive.

91
00:06:57,400 --> 00:07:00,880
I know a lot of you might say MapHololib can be interactive.

92
00:07:00,880 --> 00:07:01,880
That's true.

93
00:07:01,880 --> 00:07:02,880
Yes.

94
00:07:02,880 --> 00:07:08,560
In Jupyter Notebook, if you add one line of code, your MapHololib can be interactive and

95
00:07:08,560 --> 00:07:15,920
with the help of other frameworks, it can also be interactive, but it doesn't work interactively

96
00:07:15,920 --> 00:07:17,760
in the browser natively.

97
00:07:17,760 --> 00:07:23,960
So I want something that's just working in the browser very nicely.

98
00:07:23,960 --> 00:07:28,120
And the third need is, I love dashboards.

99
00:07:28,120 --> 00:07:34,800
Like when we communicate with stakeholders, when we communicate with our internal customers,

100
00:07:34,800 --> 00:07:36,000
everyone wants a dashboard.

101
00:07:36,000 --> 00:07:39,980
Even if you're building a machine learning model, people want to see the results.

102
00:07:39,980 --> 00:07:42,320
People want to see what does it actually mean.

103
00:07:42,320 --> 00:07:43,560
They want a dashboard.

104
00:07:44,360 --> 00:07:50,200
My third need is, I need my dashboard to be able to include different types of plots.

105
00:07:50,200 --> 00:07:55,440
Whether it is Plotly, whether it's MapHololib, whether it's Bokeh, I need my dashboard to

106
00:07:55,440 --> 00:08:01,420
be flexible in terms of what kind of plot it returns me.

107
00:08:01,420 --> 00:08:04,080
So that comes to HoloViz.

108
00:08:04,080 --> 00:08:06,760
HoloViz solves all my problems.

109
00:08:06,760 --> 00:08:10,320
And yeah, can't wait to introduce you.

110
00:08:10,320 --> 00:08:13,840
How does HoloViz work?

111
00:08:13,840 --> 00:08:20,080
So HoloViz is developed by three of my co-workers, James Spanner, Philip Rüdiger, John Luke

112
00:08:20,080 --> 00:08:21,080
Stevens.

113
00:08:21,080 --> 00:08:26,720
It was originally developed when they were at University of Edinburgh when James Spanner

114
00:08:26,720 --> 00:08:31,500
was a professor and then the other two were his students.

115
00:08:31,500 --> 00:08:36,720
And then since then, they moved to Anaconda and it's a completely open source project.

116
00:08:36,720 --> 00:08:38,760
It's an Anaconda-supported open source.

117
00:08:38,760 --> 00:08:44,360
A lot of you probably know or don't know, at Anaconda, we support various open source

118
00:08:44,360 --> 00:08:49,920
projects and HoloViz is one of them.

119
00:08:49,920 --> 00:08:51,280
So what is HoloViz?

120
00:08:51,280 --> 00:08:54,080
HoloViz is not just one library.

121
00:08:54,080 --> 00:08:59,480
It's a data visualization ecosystem with eight libraries.

122
00:08:59,480 --> 00:09:02,680
I know when you look at the website, you might get so confused.

123
00:09:02,680 --> 00:09:04,000
So how do I start?

124
00:09:04,000 --> 00:09:06,000
Where do I start, right?

125
00:09:06,400 --> 00:09:13,880
The answer is, if you just started to learn about HoloViz, start with Panel and HVPlot.

126
00:09:13,880 --> 00:09:19,640
So Panel is the tool for building a dashboard.

127
00:09:19,640 --> 00:09:23,600
HVPlot is your starting point to plot your library.

128
00:09:23,600 --> 00:09:26,640
All the other tools integrate with those two tools.

129
00:09:26,640 --> 00:09:34,860
For example, if you want to do big data visualization, you use HVPlot with data shader in the back

130
00:09:34,860 --> 00:09:40,540
end to call data shader with one line of code to do your big data visualization.

131
00:09:40,540 --> 00:09:45,540
You actually don't need to use the data shader API directly, but, of course, if you want

132
00:09:45,540 --> 00:09:50,860
to do more complex things, you can dig into the data shader API.

133
00:09:50,860 --> 00:09:55,100
And the same thing with HoloViz, GeoViz, and others.

134
00:09:55,100 --> 00:10:00,740
So the takeaway is start from Panel and HVPlot.

135
00:10:01,460 --> 00:10:08,500
Okay, now you might all be wondering, or you're talking a lot, so how do we use it exactly?

136
00:10:10,340 --> 00:10:15,100
So I'm going to quickly go through seven points here.

137
00:10:15,100 --> 00:10:21,620
Basic syntax, multiple back ends, HVPlot Explorer, big data visualization, streaming data visualization,

138
00:10:21,620 --> 00:10:23,700
dashboard, and deployment.

139
00:10:23,700 --> 00:10:25,380
I know it's a lot of content.

140
00:10:25,380 --> 00:10:30,660
We're going to be high level and hopefully give you an overall picture of HoloViz.

141
00:10:30,740 --> 00:10:32,740
Okay, let's go.

142
00:10:34,500 --> 00:10:38,100
Okay, so this is a basic syntax on Matplotlib.

143
00:10:38,100 --> 00:10:41,020
As you can see, we're just doing a scatter plot, right?

144
00:10:41,020 --> 00:10:45,980
You have to write a good amount of code to get a simple plot.

145
00:10:45,980 --> 00:10:51,540
And if you're familiar with pandas.plot API, you can simplify this code with one line of

146
00:10:51,540 --> 00:10:55,620
code is actually running Matplotlib in the back end.

147
00:10:55,620 --> 00:11:01,260
So if you're familiar with pandas.plot API, you already know how to use HVPlot because

148
00:11:01,260 --> 00:11:04,900
you just change .plot to .hvplot.

149
00:11:04,900 --> 00:11:12,820
But you need to remember to import hvplot.pandas to use the HVPlot version for pandas data frame.

150
00:11:12,820 --> 00:11:17,100
And of course, HVPlot also works for other different types of data.

151
00:11:17,100 --> 00:11:21,460
For example, if you have a DAS data frame, if you have x-ray, the scientific communities

152
00:11:21,540 --> 00:11:27,740
use a lot of x-ray data with HVPlot, it works really well, and it works with many other

153
00:11:27,740 --> 00:11:29,740
data types as well.

154
00:11:29,740 --> 00:11:35,620
Okay, here are some other basic syntax.

155
00:11:35,620 --> 00:11:42,300
If you want to group by your data by color with different groups, for example, origin

156
00:11:42,300 --> 00:11:45,500
here, you just write by equals origin.

157
00:11:45,500 --> 00:11:50,780
You can, with the same plot to the right here, the first row to the right, you can overlay

158
00:11:51,060 --> 00:11:53,780
different plots with a star.

159
00:11:53,780 --> 00:11:57,060
Of course, we don't write your code this way.

160
00:11:57,060 --> 00:12:01,340
You just do the by instead of overlay all those subset of data with a star.

161
00:12:01,340 --> 00:12:04,860
I just want to show you how to overlay the data with star.

162
00:12:04,860 --> 00:12:11,420
And then if you want a simple drop down box of your origin, you can use group by origin.

163
00:12:11,420 --> 00:12:13,580
It will create a simple drop down box for you.

164
00:12:13,580 --> 00:12:18,360
You don't even need to write a, define a widget of this drop down box.

165
00:12:18,360 --> 00:12:22,800
And then when you combine different plots into different layouts, you can use plus or

166
00:12:22,800 --> 00:12:27,000
you can use panel with different layout options for you.

167
00:12:27,000 --> 00:12:31,800
Okay, here's a function that I really like.

168
00:12:31,800 --> 00:12:37,600
Sometimes when I explore data, I want to plot my data with different options, different

169
00:12:37,600 --> 00:12:43,800
types of plots, even different distributions of different variables, or the relationship

170
00:12:43,800 --> 00:12:45,360
between different variables.

171
00:12:45,360 --> 00:12:51,960
So when I select part of my data, I want that selection to be reflected to other plots

172
00:12:51,960 --> 00:12:52,960
that I have.

173
00:12:52,960 --> 00:12:55,040
So this is called linked brushing.

174
00:12:55,040 --> 00:13:00,360
So this is very useful for me when I try to detect what's going on with my data.

175
00:13:00,360 --> 00:13:06,120
And especially saying this set of data, what's the relationship over there, it's just easier

176
00:13:06,120 --> 00:13:07,120
to see.

177
00:13:07,120 --> 00:13:10,980
And also the distribution of the same selected data on other variables.

178
00:13:10,980 --> 00:13:16,420
It's very useful for explorations in data science work.

179
00:13:16,420 --> 00:13:22,420
Okay, so here's some feature that I am very excited about.

180
00:13:22,420 --> 00:13:25,060
It's called annotation.

181
00:13:25,060 --> 00:13:27,920
Under development, it's pretty much developed.

182
00:13:27,920 --> 00:13:30,540
It's going to have a release very, very soon.

183
00:13:30,540 --> 00:13:35,420
With annotation, imagine we have a time series data example.

184
00:13:35,420 --> 00:13:40,180
We want to annotate what's going on at this data point.

185
00:13:40,180 --> 00:13:45,420
We want to say a gap in the data, or like a dip in the data.

186
00:13:45,420 --> 00:13:52,100
So you can annotate your data, and you can even export this data into a CSV file or a

187
00:13:52,100 --> 00:13:54,700
text file for you to explore later on.

188
00:13:54,700 --> 00:14:01,820
So it's really useful for me to be able to work with my data, annotate my data, and tell

189
00:14:01,820 --> 00:14:05,380
a story as I explore the data.

190
00:14:05,380 --> 00:14:09,420
Okay, so that's the basic syntax.

191
00:14:09,420 --> 00:14:12,580
Pretty straightforward, right?

192
00:14:12,580 --> 00:14:21,020
The next thing I really like about HVPlot is it provides multiple backends.

193
00:14:21,020 --> 00:14:22,780
The default backend is Bokeh.

194
00:14:22,780 --> 00:14:28,540
To the left here, you can see a Bokeh plot with the Bokeh little logo to the right of

195
00:14:28,540 --> 00:14:31,460
the plot where you can zoom and pan.

196
00:14:31,460 --> 00:14:37,980
So if you want to map all that plot with exactly the same syntax, you just need to add one

197
00:14:38,060 --> 00:14:45,060
line of code, HVPlot.extension mapHololib, to call mapHololib to be your backend, and

198
00:14:45,060 --> 00:14:48,700
then you will return a mapHololib plot for you.

199
00:14:48,700 --> 00:14:54,580
Or if you do HVPlot.extension plotly, you will get a plotly data for you using plotly

200
00:14:54,580 --> 00:14:55,900
as a backend.

201
00:14:55,900 --> 00:15:02,800
Yeah, so I find this very helpful because you just learn one visualization language,

202
00:15:02,800 --> 00:15:05,820
and you get plots for other languages as well.

203
00:15:05,820 --> 00:15:16,060
You don't need to learn mapHololib or plotly or others, just learn HVPlot, super convenient.

204
00:15:16,060 --> 00:15:21,700
And sometimes when I start working with my data, if I have a new data frame, I don't

205
00:15:21,700 --> 00:15:26,300
actually know exactly what I'm plotting, I just want to explore the data a little bit.

206
00:15:26,300 --> 00:15:33,740
So with HVPlot Explorer, you can define your own access, y-axis, different types of data,

207
00:15:34,500 --> 00:15:38,540
different element, changing the, define the title, x-label, y-label, and so on, different

208
00:15:38,540 --> 00:15:39,740
styling.

209
00:15:39,740 --> 00:15:46,580
So using HVPlot.Explorer, this is a convenient way for you to explore your data without writing

210
00:15:46,580 --> 00:15:47,860
any syntax.

211
00:15:47,860 --> 00:15:52,340
I guess you do need to write that two lines, three lines of code to explore your data,

212
00:15:52,340 --> 00:15:56,420
but everyone can do that, and it's super convenient.

213
00:15:56,420 --> 00:16:02,900
And when you find a perfect visualization you like to keep, you can reproduce the code

214
00:16:02,900 --> 00:16:10,580
in the plot by calling this .plot underscore code function to get the code of the current

215
00:16:10,580 --> 00:16:11,820
state.

216
00:16:11,820 --> 00:16:16,380
So you can share this with others, or you can copy and paste this into your Jupyter

217
00:16:16,380 --> 00:16:21,220
notebook to be able to reproduce the plot you like.

218
00:16:21,220 --> 00:16:26,300
So sometimes when I'm lazy, I don't want to write everything out, I just do HVPlot.Explorer

219
00:16:26,340 --> 00:16:33,340
to get the data, to get the visualization and the code that I want to do.

220
00:16:33,340 --> 00:16:45,660
Okay, so the next big thing about HoloBiz is that it makes big visualization possible

221
00:16:45,660 --> 00:16:47,700
and easy.

222
00:16:47,700 --> 00:16:57,540
So here we have a, I don't remember, a few million data points of NYC taxi drop-off data.

223
00:16:57,540 --> 00:17:03,620
And then to the right, left here we have a pandas.plot API with map.alib as the backend.

224
00:17:03,620 --> 00:17:10,940
You can see our x-axis is the drop-off location, and the y is also like longitude and latitude,

225
00:17:10,940 --> 00:17:13,740
and we want to do a scatter plot.

226
00:17:13,780 --> 00:17:19,540
With map.alib, all you can see is a blob, it's really hard to extract any meaningful

227
00:17:19,540 --> 00:17:26,900
information from this plot, so you can't tell anything meaningful from there.

228
00:17:26,900 --> 00:17:33,140
But to the right here, we have HVPlot with data shader in the backend.

229
00:17:33,140 --> 00:17:40,860
So the magic happens, sorry, not sure why that looks weird, but the magic happens in

230
00:17:40,980 --> 00:17:47,660
this rasterize equals true, this one line of code where data shader aggregates all the

231
00:17:47,660 --> 00:17:53,980
data in one pixel points really fast, just in memory compiled using Numba.

232
00:17:53,980 --> 00:17:56,440
So the calculation is really, really fast.

233
00:17:56,440 --> 00:18:04,860
So it actually calculates each pixel aggregate, the data points, and show you directly in

234
00:18:04,860 --> 00:18:05,860
the plot.

235
00:18:05,860 --> 00:18:09,860
And when you zoom in, you will calculate again and again.

236
00:18:09,860 --> 00:18:16,940
I know when I show you those two plots, it's kind of unfair to compare those because they

237
00:18:16,940 --> 00:18:18,700
actually represent different things.

238
00:18:18,700 --> 00:18:27,820
One is raw data points, one is kind of aggregated data points, but with data shader and HoloViz,

239
00:18:27,820 --> 00:18:33,780
this is possible to add this one line of code and let you visualize data pretty easily.

240
00:18:33,780 --> 00:18:42,700
And you can add tiles to show you the background of where in New York is the data represent.

241
00:18:42,700 --> 00:18:48,260
Okay, next one, streaming data visualization.

242
00:18:48,260 --> 00:18:56,500
With HoloViz, streaming data is also possible thanks to the streams data frame.

243
00:18:56,500 --> 00:19:01,580
Like I said before, HVPlot works with many different types of data frames.

244
00:19:01,580 --> 00:19:06,020
Stream data frame is a type of data frame.

245
00:19:06,020 --> 00:19:12,740
It's a separate open source package that's not maintained by Anaconda, but we use it a lot.

246
00:19:12,740 --> 00:19:19,540
So just to walk you through this code a little bit, we have a mem data function just returning

247
00:19:19,540 --> 00:19:21,100
a normal Pandas data frame.

248
00:19:21,100 --> 00:19:23,780
You have pd doc data frame here.

249
00:19:23,780 --> 00:19:31,060
The index is the current time and is returning the current memory usage of my computer.

250
00:19:31,580 --> 00:19:40,460
And then this df is not a Pandas data frame anymore, it's a periodic streams data frame

251
00:19:40,460 --> 00:19:46,060
and you call this function and then call the mem data function and interval is like how

252
00:19:46,060 --> 00:19:53,500
many every 300 million seconds we want a record of this data in our stream.

253
00:19:53,500 --> 00:20:00,740
And then as you can see, with the streams data frame, the syntax is exactly the same

254
00:20:00,740 --> 00:20:08,580
we use df and we add the column that we want to visualize, which is the currently used

255
00:20:08,580 --> 00:20:15,660
memory usage and dot HVPlot and you can plot a streaming data.

256
00:20:15,660 --> 00:20:21,140
So this is a very simple example, of course, if you have more complicated use cases, you

257
00:20:21,140 --> 00:20:25,220
can use stream streams data frame with HVPlot as well.

258
00:20:26,220 --> 00:20:39,140
Okay, yeah, so the next most important thing that why I am using Holovis is to make a dashboard.

259
00:20:39,140 --> 00:20:44,420
So this is an example that I showed you earlier and I wrote a blog post, there are actually

260
00:20:44,420 --> 00:20:49,940
at least three ways, those are the three ways that I like to build a panel visualization

261
00:20:49,940 --> 00:20:50,940
dashboard.

262
00:20:50,940 --> 00:20:56,180
So let's talk about the first way in this talk, which is using HVPlot.interactive,

263
00:20:56,180 --> 00:20:59,820
but I want to briefly mention the second two options.

264
00:20:59,820 --> 00:21:05,820
So if you have a Pandas data frame or Dask data frame, if you already have a data processing

265
00:21:05,820 --> 00:21:11,820
pipeline your Pandas data frame, the first HVPlot.interactive is the easiest way to go.

266
00:21:11,820 --> 00:21:18,180
But if you have some other complicated functions, you might want to use panel.bind and then

267
00:21:18,220 --> 00:21:23,540
the parameter will give you even more flexibility, so it's like the more flexible it will give

268
00:21:23,540 --> 00:21:28,100
you, but the more complex the code that you might see.

269
00:21:28,100 --> 00:21:31,700
Well panel.bind is actually pretty simple, yeah.

270
00:21:31,700 --> 00:21:38,620
So here's an example of HVPlot.interactive, to the left here you have a Pandas data processing

271
00:21:38,620 --> 00:21:46,780
pipeline where we subset our data, so this data is the car cylinder data showing you

272
00:21:46,780 --> 00:21:52,780
each origin, horsepower, miles per gallon, information of each car.

273
00:21:52,780 --> 00:21:58,300
And we subset the data by number of cylinders, manufacturers, and we group that by the data

274
00:21:58,300 --> 00:22:07,100
with some columns and we calculate the average of those combinations of columns for the horsepower,

275
00:22:07,100 --> 00:22:09,300
so this is the data looks like.

276
00:22:09,300 --> 00:22:16,740
So with HVPlot.interactive, first thing we need to do is to convert or change this data

277
00:22:17,060 --> 00:22:23,300
frame, Pandas data frame, to an interactive data frame, we use df.interactive.

278
00:22:23,300 --> 00:22:29,500
And in this Pandas data processing pipeline, instead of defining the number of cylinder

279
00:22:29,500 --> 00:22:38,500
directly or the manufacturers and so on, we actually define panel widgets for you to control

280
00:22:38,500 --> 00:22:43,380
the value of the data you want to select.

281
00:22:43,460 --> 00:22:48,620
Here I have a slider for my cylinder, it's not very visible, but it's a slider, yeah,

282
00:22:48,620 --> 00:22:55,340
you can see there, and then you can choose the manufacturer and the variables you want

283
00:22:55,340 --> 00:23:00,180
to calculate the mean on, whether it's horsepower or the weight of the car.

284
00:23:00,180 --> 00:23:08,140
And then you can see the resulting table here is interactive, yeah.

285
00:23:08,180 --> 00:23:14,180
So I want to show you some demo right now, I think we still have time, right?

286
00:23:19,180 --> 00:23:25,700
So here's a demo, this is exactly the code that I just showed you, can you see it?

287
00:23:25,700 --> 00:23:26,700
Is it too small?

288
00:23:32,060 --> 00:23:33,060
Is it better?

289
00:23:33,060 --> 00:23:37,460
I hope it's better, okay, thank you.

290
00:23:37,460 --> 00:23:45,580
So this is what I just showed you, this is the same code, we define our interactive data

291
00:23:45,580 --> 00:23:53,460
frame, and I defined three widgets, as you can see here, let me get another cell here,

292
00:23:53,460 --> 00:24:02,180
show you cylinders, kind of hard to type, yeah, so this is a slider, the widget is defined

293
00:24:02,180 --> 00:24:10,460
as pn.widgets, integer sliders, and then we can see some other ones, manufacturer,

294
00:24:10,460 --> 00:24:19,220
this is, yeah, the options are the options of your toggle group, and the value is the

295
00:24:19,220 --> 00:24:24,740
selected value in the beginning, so now, right now, everything is selected, but we can unselect

296
00:24:24,860 --> 00:24:34,700
someones, okay, and then the ipipeline is basically combining the original pandas data

297
00:24:34,700 --> 00:24:44,500
pipeline with the widgets, that's why it's reactive to the widgets, the table is, okay,

298
00:24:44,500 --> 00:24:52,460
and then we can format it into a better looking table using this tabular extension, or you

299
00:24:52,460 --> 00:25:00,420
can plot it, when you plot it, again, it's the same syntax, it's ipipeline.etcplot,

300
00:25:00,420 --> 00:25:09,660
and you plot it as if it were a normal pandas data frame, and it returns an interactive

301
00:25:09,660 --> 00:25:20,220
etcplot, yeah, it's a little hard to see right now, but you get the idea, okay, and then

302
00:25:20,220 --> 00:25:29,020
I used a template to have all my widgets in the sidebar and have my plot and my table

303
00:25:29,020 --> 00:25:37,740
showing up in the main part of the dashboard, and then to be able to serve this dashboard,

304
00:25:37,740 --> 00:25:45,620
you would need to do this template, since I call this dashboard a template, if you call

305
00:25:45,620 --> 00:25:50,220
it as dashboard, it's okay, you just need to do dashboard or template.servable to make

306
00:25:50,220 --> 00:25:55,820
sure you can serve this dashboard, and then to serve the notebook, you just simply run

307
00:25:55,820 --> 00:26:11,740
panel serve, and it will serve it, let me show you how it works, no, okay, make it bigger,

308
00:26:12,500 --> 00:26:17,540
okay, so I have panel serve, and this notebook file, it doesn't have to be notebook file,

309
00:26:17,540 --> 00:26:26,340
it can be a standalone .py file as well, if you run panel serve, it will serve here for you,

310
00:26:32,820 --> 00:26:40,020
all right, make it smaller now, yep, so this is the resulting dashboard, with a few lines of

311
00:26:40,020 --> 00:26:49,460
code, you can explore your data in a dashboard pretty easily, okay, so that's the demo, and then

312
00:26:49,460 --> 00:26:57,100
finally, I want to talk about deployment, and we just talked about panel serve, could be a Python

313
00:26:57,100 --> 00:27:04,420
file or a notebook file, another convenient thing is you can use PowerDial or PyScript,

314
00:27:05,180 --> 00:27:11,980
to convert your panel app to a web assembly, so you don't need a server to run this app at all,

315
00:27:11,980 --> 00:27:20,500
you just open your browser and it will run your Python code in the browser directly, so to do

316
00:27:20,500 --> 00:27:29,700
that, you just need to do Python panel convert your app.py or app.ipymb to convert your

317
00:27:29,860 --> 00:27:41,980
visualization file into a web assembly, so yeah, here are some galleries, I don't know if the

318
00:27:41,980 --> 00:27:53,380
internet will be happy with me, yeah, so awesomepanel.org is a contributor, community

319
00:27:53,380 --> 00:28:01,300
contributor project, it has nothing to do with Anaconda, he compiled a lot of fun panel

320
00:28:01,300 --> 00:28:09,500
organizations for you to explore, and yeah, there was one web page is for PowerDial apps,

321
00:28:09,500 --> 00:28:24,940
it's pretty cool, yeah, and again, panel.holovis.org, our official doc also have some interesting

322
00:28:24,940 --> 00:28:33,340
visualizations for you to get started learning and exploring if you're interested, if you want

323
00:28:33,340 --> 00:28:40,820
to learn more, please visit holovis.org, which will have a complete tutorial, it will normally

324
00:28:40,820 --> 00:28:48,180
take like three hours to go through to learn all the holovis decks, and panel.holovis.org and

325
00:28:48,180 --> 00:28:56,500
hvplot.holovis.org are the official docs for panel and hvplot, I would recommend starting with

326
00:28:56,500 --> 00:29:02,180
hvplot, and then if you have dashboarding needs, check out the panel doc, and then we have a

327
00:29:02,260 --> 00:29:07,900
discourse, holovis.org, if you have any questions, or if you want to showcase what you have created,

328
00:29:07,900 --> 00:29:14,460
please visit there. Yeah, that's it for my talk, thank you so much.

