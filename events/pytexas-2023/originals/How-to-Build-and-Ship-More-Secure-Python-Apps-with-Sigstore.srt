1
00:00:00,000 --> 00:00:07,440
I'm excited to talk to you all today about building secure software.

2
00:00:07,440 --> 00:00:13,800
I know it's an exciting and very sexy topic, security, but I would like to thank everybody

3
00:00:13,800 --> 00:00:18,080
again, like all this has been an amazing conference.

4
00:00:18,080 --> 00:00:22,200
I'm glad Mason that you've you bullied me to come.

5
00:00:22,200 --> 00:00:26,680
It's a really great community and I'm really excited to be with you all.

6
00:00:26,680 --> 00:00:31,640
So thank you to the organizers, to the sponsors, and also to the Austin Central Library.

7
00:00:31,640 --> 00:00:37,320
If you haven't been to the roof deck yet, highly recommend it.

8
00:00:37,320 --> 00:00:40,160
So I just want to give you just a little bit of context.

9
00:00:40,160 --> 00:00:43,080
So where I'm coming from, yeah, my name is Lisa.

10
00:00:43,080 --> 00:00:47,400
I am leading up developer education at Chain Guard.

11
00:00:47,400 --> 00:00:53,680
Chain Guard is a software supply chain security startup, and we're trying to make the supply

12
00:00:53,680 --> 00:00:55,560
chain secure by default.

13
00:00:55,640 --> 00:01:00,040
I'm also a maintainer on SIGSTOR, which is an open source project.

14
00:01:00,040 --> 00:01:07,760
We work across a few different organizations with academia as well to try to make security

15
00:01:07,760 --> 00:01:13,340
a kind of more of an invisible part of your software development practice.

16
00:01:13,340 --> 00:01:19,200
And I also wrote a couple of Python books, which are free to download and open access.

17
00:01:19,200 --> 00:01:22,560
And I am in semi retirement as an academic.

18
00:01:22,560 --> 00:01:27,760
I am still teaching humanities, PhD students how to code at Rutgers University.

19
00:01:30,480 --> 00:01:32,920
I'm not, yeah, lots of things.

20
00:01:32,920 --> 00:01:36,040
So you may be familiar with this.

21
00:01:36,040 --> 00:01:40,480
This is the gum wall at Pike Place Market in Seattle.

22
00:01:42,280 --> 00:01:43,560
Hooray Seattle.

23
00:01:43,560 --> 00:01:52,400
So a lot of people like to bring their gum and stick it on the wall, but I don't think

24
00:01:52,400 --> 00:01:58,440
that many people like to pull gum off of that wall and then begin chewing it.

25
00:01:58,440 --> 00:02:04,560
I think most people would be concerned about the bacteria that they may find from some

26
00:02:04,560 --> 00:02:13,960
random piece of gum, but this is essentially what many people do with software packages.

27
00:02:13,960 --> 00:02:17,720
We're not validating where those software packages are coming from.

28
00:02:17,720 --> 00:02:22,880
We're installing dependencies that have dependencies underneath those, and we're just running that

29
00:02:22,880 --> 00:02:24,640
in our machine.

30
00:02:24,640 --> 00:02:27,600
I am also guilty of this.

31
00:02:27,600 --> 00:02:36,320
So if this is our approach, maybe we should be a little bit worried as developers and

32
00:02:36,320 --> 00:02:41,920
also as end users, because we don't know where the code is coming from.

33
00:02:41,960 --> 00:02:48,400
Vulnerabilities and attacks in software have been increasing in recent years.

34
00:02:48,400 --> 00:02:55,680
There's a number of government initiatives to have more policies around limited CVEs

35
00:02:55,680 --> 00:03:00,160
or common vulnerabilities or exposure in software.

36
00:03:00,160 --> 00:03:04,880
There's increased awareness due in part to some high profile attacks like SolarWinds,

37
00:03:05,720 --> 00:03:12,560
CodeCov, Linux hypocrite commits, and there are also typo squatting attacks.

38
00:03:12,560 --> 00:03:18,000
These just exploit the software supply chain integrity all across the supply chain.

39
00:03:18,000 --> 00:03:24,360
So from your development, source code, the build, the packages, dependencies, production,

40
00:03:24,360 --> 00:03:30,360
all of those places are points where there could be a vulnerability or an exploit.

41
00:03:35,880 --> 00:03:40,320
So Sona type estimates that software supply chain attacks are increasing exponentially

42
00:03:40,320 --> 00:03:41,440
year over year.

43
00:03:41,440 --> 00:03:47,520
This is a report that came out in 2022 before the year was complete.

44
00:03:47,520 --> 00:03:52,880
As developers working in the Python space, we need to think about the growing ecosystem

45
00:03:52,880 --> 00:03:55,080
around Python packages.

46
00:03:55,080 --> 00:04:02,680
For example, PyPI is growing faster than many other programming language package repositories.

47
00:04:02,680 --> 00:04:06,560
So these are some of the numbers from Python 2022.

48
00:04:06,560 --> 00:04:14,040
There's a 41% year over year growth and 176 billion packages.

49
00:04:14,040 --> 00:04:20,600
So here is an example of a recent high profile attack in the Python ecosystem.

50
00:04:20,600 --> 00:04:29,840
This is PyTorch and this impacted the PyTorch package at the end of 2022, right after or

51
00:04:29,920 --> 00:04:34,120
right, I guess, in between the holidays at the end of the year.

52
00:04:34,120 --> 00:04:41,320
So we may think about software supply chain as a recent top concept, but when we think

53
00:04:41,320 --> 00:04:46,600
about security, a lot of these topics, a lot of the approaches to security are actually

54
00:04:46,600 --> 00:04:52,080
kind of from old industries and old practices.

55
00:04:52,080 --> 00:04:57,240
So if we think about just being out as a human in the world, maybe you want to open a new

56
00:04:57,240 --> 00:05:02,840
bank account, you go to the bank, when you get there, you ask, the teller is going to

57
00:05:02,840 --> 00:05:08,440
ask you for some ID before you could open up a bank account.

58
00:05:08,440 --> 00:05:12,080
So the bank is not the issuer of that ID.

59
00:05:12,080 --> 00:05:18,080
The ID probably came from a national or local governmental body, but your ID still attests

60
00:05:18,080 --> 00:05:23,480
to your identity and the bank is going to accept this ID because there is a trust route

61
00:05:23,520 --> 00:05:30,720
that lies underneath that ID that goes to the ID issuing authority.

62
00:05:30,720 --> 00:05:35,800
So once you open your bank account, you will have a bank account number, which will be

63
00:05:35,800 --> 00:05:40,960
part of a database or a log and that will be also connected to your identity.

64
00:05:40,960 --> 00:05:46,040
So when you use your bank account to make a deposit or if you're making a debit against

65
00:05:46,040 --> 00:05:52,600
it, there is this background identity that is tied between these two, you know, the number

66
00:05:53,000 --> 00:05:56,360
and your ID yourself.

67
00:05:56,360 --> 00:06:03,360
And this ensures that that money is coming in and out of the right place.

68
00:06:03,360 --> 00:06:09,800
With your bank account, you can get a bank card, you can either use a pin or a signature

69
00:06:09,800 --> 00:06:14,800
to issue payment to others, and this signature also attests to your identity.

70
00:06:14,800 --> 00:06:20,200
Sixstar works in a really similar way.

71
00:06:20,200 --> 00:06:27,200
You bring your identity, your ID, a certificate authority, the governmental body that issued

72
00:06:27,200 --> 00:06:33,640
that ID and a transparency log and the analogy, the bank account database together to enable

73
00:06:33,640 --> 00:06:41,040
verification and trust to exist at each stage of the software supply chain.

74
00:06:41,040 --> 00:06:47,920
So some of the tools that are underneath Sixstar include Cosign, which is what we use to sign

75
00:06:47,960 --> 00:06:49,760
and verify software artifacts.

76
00:06:49,760 --> 00:06:56,360
A software artifact could be a container, it could be a README file, a binary, any of

77
00:06:56,360 --> 00:06:58,720
those are artifacts.

78
00:06:58,720 --> 00:07:06,720
And Cosign uses the OIDC to do key list signatures, which is pretty cool.

79
00:07:06,720 --> 00:07:14,520
Fulcio is the free root certificate authority that binds public keys to emails with OpenID

80
00:07:14,600 --> 00:07:20,760
tokens, so anybody can create a short-lived certificate instead of dealing with keys.

81
00:07:20,760 --> 00:07:23,640
If you want to, you could also use keys with Cosign.

82
00:07:23,640 --> 00:07:30,320
So Fulcio essentially is notarizing a particular login with a short-lived key pair.

83
00:07:30,320 --> 00:07:36,360
And then Recore is that record, it stores records of the artifact metadata and it provides

84
00:07:36,360 --> 00:07:38,520
transparency for signatures.

85
00:07:38,520 --> 00:07:44,680
You could think about Recore as a bulletin board where people could post to that board,

86
00:07:44,680 --> 00:07:47,560
but nobody can ever take those posts off.

87
00:07:47,560 --> 00:07:51,840
But at the end of the day, you have to use your own judgment about whether you believe

88
00:07:51,840 --> 00:07:55,120
those posts on the bulletin board or not.

89
00:07:55,120 --> 00:07:58,600
Some other tools that are under Sixstar, which we're not going to go into that much depth

90
00:07:58,600 --> 00:08:04,680
is GitSign, which allows you to keylessly sign Git commits, so you don't need GPG keys,

91
00:08:04,680 --> 00:08:06,680
which is pretty cool.

92
00:08:06,680 --> 00:08:08,240
And then there's also Policy Controller.

93
00:08:08,240 --> 00:08:14,000
If you're working with Kubernetes, this will enforce signatures or SBOMs or whatever you

94
00:08:14,000 --> 00:08:19,200
want to admit or not admit into your Kubernetes cluster.

95
00:08:19,200 --> 00:08:26,960
So this is kind of like the bigger architecture of how Sixstar works, but basically it's helping

96
00:08:26,960 --> 00:08:32,120
developers and end users alike through enabling identity attestation and verification over

97
00:08:32,120 --> 00:08:35,520
this root of trust.

98
00:08:35,520 --> 00:08:41,800
So I was going to do a live demo, but the internet did not work for me at all yesterday,

99
00:08:41,800 --> 00:08:48,360
so we were going to do GIFs, but I linked out to this slide deck on my Twitter, which

100
00:08:48,360 --> 00:08:53,600
is Lisa Ironcutter on the bottom, and I also have the GitHub repo there, so please feel

101
00:08:53,600 --> 00:08:56,640
free to go there and check all this out.

102
00:08:56,640 --> 00:08:59,760
So this is a small Python script.

103
00:08:59,760 --> 00:09:08,840
If we run this code, we get the beautiful PyTexas logo printed onto our terminal.

104
00:09:08,840 --> 00:09:13,480
And what I'm going to do next is containerize this.

105
00:09:13,480 --> 00:09:18,880
So I'm not going to get into a lot of detail here in the interest of time, because we're

106
00:09:18,880 --> 00:09:23,800
kind of more talking about Sixstar, but if you're interested in minimal container images,

107
00:09:24,560 --> 00:09:31,360
you check out Buffy and the undistro container images, which is how I'm going to build this

108
00:09:31,360 --> 00:09:33,880
container.

109
00:09:33,880 --> 00:09:40,240
I have links in the speaker notes to this, and Erica Heide did a really great video overview,

110
00:09:40,240 --> 00:09:48,920
but it's essentially a tiny Linux distribution, and it's an undistro based on APK, and usually

111
00:09:49,000 --> 00:09:54,760
you're not running a shell in here, basically.

112
00:09:54,760 --> 00:10:02,440
So what we're doing in this Dockerfile is we're using a development image as the builder,

113
00:10:02,440 --> 00:10:07,800
and this will have pip and the shell in it, and then we're taking that and building the

114
00:10:07,800 --> 00:10:14,160
undistro that comes without the shell and pip, and that just creates a lower surface

115
00:10:14,160 --> 00:10:18,680
area for potential attacks, making it a more secure image.

116
00:10:18,680 --> 00:10:25,200
Cool, and if you're interested in learning more about this, I have a tutorial online,

117
00:10:25,200 --> 00:10:29,000
which you could try and demo if you're interested.

118
00:10:29,000 --> 00:10:33,640
So right now, what this file system looks like is we have the Python script, we have

119
00:10:33,640 --> 00:10:40,600
the Dockerfile, we have that PyTexas PNG, and we have a requirement.

120
00:10:40,640 --> 00:10:48,480
And then what I did next, and this should still be live, is I pushed the image to ttl.sh,

121
00:10:48,480 --> 00:10:56,640
which is an ephemeral Docker image registry, and here we go.

122
00:10:56,640 --> 00:11:07,600
So this is the pushing, the building and pushing.

123
00:11:08,280 --> 00:11:13,920
This image, I put it up a little bit earlier, so you should still be able to pull it down.

124
00:11:13,920 --> 00:11:22,600
It's ttl.sh slash PyTexas colon 3h, and that just makes it for three hours.

125
00:11:22,600 --> 00:11:25,400
Cool.

126
00:11:25,400 --> 00:11:30,600
If we wanted to, we could just pull it down and run it, so it'll show the PyTexas image

127
00:11:30,600 --> 00:11:32,600
again.

128
00:11:32,600 --> 00:11:36,520
Awesome.

129
00:11:36,520 --> 00:11:40,160
And then what we want to do next is keylessly sign the image.

130
00:11:40,160 --> 00:11:44,040
So cosine, you could install it a few different ways.

131
00:11:44,040 --> 00:11:48,080
I installed it with Homebrew, but you could install it by source or however you would

132
00:11:48,080 --> 00:11:49,080
like.

133
00:11:49,080 --> 00:11:56,120
And what happens when you sign a software artifact, you run this cosine sign command,

134
00:11:56,120 --> 00:11:58,200
which creates a keyless signature.

135
00:11:58,200 --> 00:12:02,880
If you wanted to do keys, you would have to set up the keys, but this will go through

136
00:12:02,880 --> 00:12:09,680
the OpenID Connect flow, and then you could authenticate with Google, with GitHub, or

137
00:12:09,680 --> 00:12:10,680
with Microsoft.

138
00:12:10,680 --> 00:12:18,560
I'm sorry, it goes very fast, but it opens in a web browser, and you choose how you want

139
00:12:18,560 --> 00:12:22,720
to authenticate, so you could authenticate with GitHub, and you just verify that you're

140
00:12:22,720 --> 00:12:25,360
okay with this going on the transparency log.

141
00:12:25,360 --> 00:12:29,840
If instead you wanted to have everything be private, you could set up your own instance

142
00:12:29,840 --> 00:12:32,960
of Recore instead.

143
00:12:32,960 --> 00:12:38,240
And then once you go through that flow and you sign in through Google, GitHub, whatever,

144
00:12:38,240 --> 00:12:44,240
then you get this nice page that says that this authentication was successful.

145
00:12:44,240 --> 00:12:50,620
And then you get this T log entry, which is in the Recore public transparency log.

146
00:12:50,620 --> 00:12:59,120
It tells us our entry number and that the signature was pushed up to our container.

147
00:12:59,120 --> 00:13:03,960
So we could verify in a similar way.

148
00:13:03,960 --> 00:13:07,980
So with keyless signatures, you have to kind of know what you're looking for.

149
00:13:07,980 --> 00:13:14,400
So I had to put in the email address and the OIDC, and then we get the certificate back,

150
00:13:14,400 --> 00:13:17,560
and we could check and make sure that everything looks good.

151
00:13:17,560 --> 00:13:22,960
So in practice, you would just kind of verify that everything looks good between what the

152
00:13:22,960 --> 00:13:27,920
developer is saying when you check against it on the transparency log.

153
00:13:27,920 --> 00:13:32,520
And this is really cool, but this is the manual way, right?

154
00:13:32,520 --> 00:13:39,200
We don't really like manual ways, so we do have GitHub actions to make this kind of more

155
00:13:39,200 --> 00:13:41,720
part of your invisible infrastructure.

156
00:13:41,720 --> 00:13:46,160
You could kind of set it, forget it, and just keep having signatures being sent up to the

157
00:13:46,160 --> 00:13:48,120
image.

158
00:13:48,120 --> 00:13:51,440
We love to automate things.

159
00:13:51,440 --> 00:13:55,960
So then what happens is I linked to this also in the Twitter.

160
00:13:55,960 --> 00:14:01,040
So this is the GitHub repo, and this is the GitHub action that has signing the container

161
00:14:01,040 --> 00:14:05,800
image at the bottom, and this is the keyless way.

162
00:14:05,800 --> 00:14:10,120
You could also sign this with keys if you want to instead.

163
00:14:10,120 --> 00:14:16,760
And when we run the action, we could check and make sure that that T log entry is getting

164
00:14:16,760 --> 00:14:22,360
pushed to the signature, and then we could verify this the same way as an end user or

165
00:14:22,400 --> 00:14:27,040
as a developer that's leveraging this package.

166
00:14:27,040 --> 00:14:29,800
Cool.

167
00:14:29,800 --> 00:14:36,680
So this is very important, I think, to the Python community because PyPI is working to

168
00:14:36,680 --> 00:14:40,760
add more security features, including artifacts hiding through Six Store.

169
00:14:40,760 --> 00:14:42,560
PyPI is not the only one.

170
00:14:42,560 --> 00:14:45,200
NPM is doing this work as well.

171
00:14:45,200 --> 00:14:50,400
And if you're interested in hearing more about the PyPI background information about Six

172
00:14:50,440 --> 00:14:55,920
Store, Dustin Ingram gave a great talk at PyCon, and he's going to do another talk this

173
00:14:55,920 --> 00:14:59,080
coming PyCon 2.

174
00:14:59,080 --> 00:15:03,800
Did we have a question?

175
00:15:03,800 --> 00:15:10,120
I believe that Six Store is in discussion with them, but I don't know the details off

176
00:15:10,120 --> 00:15:14,480
hand, but I could check for you.

177
00:15:14,480 --> 00:15:21,480
So PyPI has this dashboard to check and see the progress in the signatures being pushed

178
00:15:21,480 --> 00:15:28,960
to packages, and a lot of people are required to do two-factor.

179
00:15:28,960 --> 00:15:33,760
Many are opting in as well, even if they're not required to.

180
00:15:33,760 --> 00:15:38,960
If you're interested in learning more about Six Store, there's a course that I co-created

181
00:15:39,040 --> 00:15:43,400
on the Linux Foundation, which is free.

182
00:15:43,400 --> 00:15:50,080
And very exciting news is that Six Store will be participating in the Google season of docs

183
00:15:50,080 --> 00:15:56,800
thanks to a grant from Google, so we'll be hiring a technical writer to help with the

184
00:15:56,800 --> 00:16:01,320
documentation to make sure that users can use it more easily.

185
00:16:01,320 --> 00:16:07,000
And we'll be posting information about applying for that.

186
00:16:07,040 --> 00:16:12,000
If you're interested in getting involved in Six Store, it's a very active community.

187
00:16:12,000 --> 00:16:18,080
We have bi-weekly meetings, and there's the community repo that has information about

188
00:16:18,080 --> 00:16:19,520
joining the Slack.

189
00:16:19,520 --> 00:16:26,880
I find it to be a very welcoming and kind community that we're all kind of working to

190
00:16:26,880 --> 00:16:32,280
make sure that software security works better and is easier to implement.

191
00:16:33,120 --> 00:16:34,600
Oops.

192
00:16:34,600 --> 00:16:41,160
I don't have my image came over this, but thank you so much for having me.

193
00:16:41,160 --> 00:16:47,280
It's up to all of us to make open source more secure, so I'm happy to talk more with anybody

194
00:16:47,280 --> 00:16:51,240
here on the Discord or later on today about Six Store.

195
00:16:51,240 --> 00:16:52,240
And I have stickers.

196
00:16:52,240 --> 00:16:53,240
Thank you so much.

