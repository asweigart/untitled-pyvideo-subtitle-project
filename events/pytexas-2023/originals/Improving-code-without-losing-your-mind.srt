1
00:00:00,000 --> 00:00:08,400
Thank you very much. It is an honor to share the room and the stage with so many of my

2
00:00:08,400 --> 00:00:13,840
Python heroes, many of whom I've just met in the last two days. Thank you to the organizers,

3
00:00:13,840 --> 00:00:20,800
to the AV people, all the volunteers, and it's a privilege to be here. And I want to

4
00:00:20,800 --> 00:00:26,720
be here because I want to make your job easier. You're having fun today. I want to make sure

5
00:00:26,720 --> 00:00:31,760
you can have fun when you go back home, when you go back on Monday to your job. So I'm here to talk

6
00:00:31,760 --> 00:00:37,440
about how to improve your code without losing your mind. And I know I could do this because

7
00:00:37,440 --> 00:00:42,000
I've done a lot of research and there are a number of things that come up time after time about what

8
00:00:42,000 --> 00:00:50,960
us developers really enjoy. And a lot of this is shown in this story I got from this developer,

9
00:00:50,960 --> 00:00:58,400
Alex Everloaf. He's a senior level developer who works for a company and got transferred

10
00:00:58,400 --> 00:01:04,880
from one development team to another. And even on day one, he knew he was in trouble. He said he

11
00:01:04,880 --> 00:01:12,320
could not make sense of the code base and he felt frustrated. He had 19 years of programming

12
00:01:12,320 --> 00:01:19,120
experience, including several years in the stack that this project was in. Yet a simple task would

13
00:01:19,120 --> 00:01:27,760
take him far longer than he ever thought possible. He felt dumb and helpless. He wasn't alone. The

14
00:01:27,760 --> 00:01:32,720
entire team was struggling through technical debt that was keeping them from meeting their deadlines.

15
00:01:34,400 --> 00:01:39,040
And as Alex said, leadership did not care about the code quality as long as stories were delivered

16
00:01:39,040 --> 00:01:46,160
on time. Corners were cut and tests were skipped. Now I don't know about you, but this reminds me of

17
00:01:46,160 --> 00:01:51,120
every project I was on. I'm not one of those developers who got to be on one of those teams

18
00:01:51,120 --> 00:01:59,200
that had big test, you know, suites or poll requests and reviews. We just try to get stuff done.

19
00:02:00,640 --> 00:02:06,400
And honestly, you know, I gotta say, I gotta cut leadership some slack. They have a lot on their

20
00:02:06,400 --> 00:02:11,360
mind and they're not in the code. They don't understand how good code quality can help us.

21
00:02:12,240 --> 00:02:16,480
So it's on us as developers to make sure that we have good quote code quality.

22
00:02:16,480 --> 00:02:21,120
They have so many other things they need to worry about. If they have to worry about code quality,

23
00:02:21,120 --> 00:02:26,400
something is wrong. And that's what happened with this team. So what do they do about it?

24
00:02:27,520 --> 00:02:32,160
They had an honest conversation, both developers and leadership, and they tried to figure out what

25
00:02:32,160 --> 00:02:36,720
they could do. Initially, the developers said, you know what, we need to just stop development

26
00:02:36,720 --> 00:02:42,160
altogether and clean everything up. The leadership pushed back and said, that would be nice, but we've

27
00:02:42,160 --> 00:02:47,440
got bugs we need to fix. We've got features we promised. We can't do that. But is there some way

28
00:02:47,440 --> 00:02:54,480
that we can negotiate something in between? At length, they decided, how about every other Friday?

29
00:02:54,480 --> 00:03:01,280
We'll reserve the entire day to do nothing but clean up the code. As Alex said, initially, it was

30
00:03:01,280 --> 00:03:09,840
hard to defend spending 10% of the team bandwidth on cleaning our code. But the results were huge.

31
00:03:11,680 --> 00:03:16,400
So what kind of results did they see? First, I should say, neither Alex nor anyone in his team

32
00:03:16,400 --> 00:03:20,720
decided they were going to try to figure out some kind of metrics to see what things are like before

33
00:03:20,720 --> 00:03:27,680
and after they do this. They just went whole hog into it. And so even though there's no quantitative

34
00:03:27,680 --> 00:03:34,720
data, they were clear results. First, code quality improved, which you kind of hope so, right, because

35
00:03:34,720 --> 00:03:39,920
this is the whole exercise. But outside of those Fridays, they were able to start delivering features

36
00:03:39,920 --> 00:03:46,640
faster. Additionally, it nearly eliminated all embarrassingly unnecessary incidents.

37
00:03:48,960 --> 00:03:53,440
And when developers were developing a feature and they were coming up against a deadline,

38
00:03:53,440 --> 00:03:58,480
they were better able to make better judgment calls as to how to cut corners and fix them a lot quicker.

39
00:03:59,520 --> 00:04:02,800
They also enjoyed their work more and inspired other teams to do the same.

40
00:04:03,760 --> 00:04:08,640
Now, I've been talking for almost five minutes. I want to say this next slide might be the most

41
00:04:08,640 --> 00:04:15,520
important in my entire talk, so please pay attention. Most of us are too focused on getting

42
00:04:15,520 --> 00:04:21,200
features out the door. If we regularly take even a small percentage of our time to improve our code,

43
00:04:21,920 --> 00:04:28,080
we can reap huge benefits. Now, I get this. This slide is not just for you. It's for me too, right?

44
00:04:28,080 --> 00:04:33,440
The current project I'm on, I feel the need to get features out, right, because this is the people

45
00:04:33,440 --> 00:04:39,120
who are paying me. They want features. I want to give them the value. I want to be a good employee.

46
00:04:40,000 --> 00:04:48,400
But the truth is, we have more flexibility in our deadlines. This is self-imposed, right?

47
00:04:48,400 --> 00:04:54,160
I feel the need. I feel I have to get this out. But if we focus on getting features out,

48
00:04:54,160 --> 00:04:59,280
we don't get to iterate on our ideas. We don't get to improve the customer experience

49
00:04:59,280 --> 00:05:04,640
or the developer experience of our projects. We don't get to try out new, cool frameworks

50
00:05:04,640 --> 00:05:09,040
or design patterns or anything. We just get features out, and it makes our code harder and

51
00:05:09,040 --> 00:05:14,640
harder to work with. We need to refactor our code, and I'm going to show you how.

52
00:05:15,600 --> 00:05:19,920
I'm going to do it by, if you are not familiar with refactoring, I'm going to introduce the idea to

53
00:05:19,920 --> 00:05:26,800
you, show you two kinds of refactoring, go through an example of refactoring, really drive home why

54
00:05:26,800 --> 00:05:31,120
you should refactor, and leave you with a couple of resources. But first, I'm going to back up and

55
00:05:31,120 --> 00:05:36,640
introduce myself. My name is Chris May. I'm a Python technical coach. That means I have the privilege

56
00:05:36,640 --> 00:05:42,480
to come alongside of teams and make lasting change in them by improving the way they write code and

57
00:05:42,480 --> 00:05:49,360
the way they communicate. I propose this talk because there is a misunderstanding of refactoring

58
00:05:49,360 --> 00:05:56,560
that held me back, not just me, not just my career, but the teams I've been a part of. And I see it

59
00:05:56,560 --> 00:06:01,840
in the developers I work with every day. If we can clear up this misunderstanding, I think it would

60
00:06:01,840 --> 00:06:08,560
just make a lot of our lives easier. Let's talk about refactoring. What is it? Refactoring, the

61
00:06:08,640 --> 00:06:16,800
definition, is improving code without changing its behavior. The reasons we refactor include to make

62
00:06:16,800 --> 00:06:23,680
code understandable because understandable code is easier to maintain, has fewer bugs, and is easier

63
00:06:23,680 --> 00:06:31,600
to fix. Additionally, we refactor to support new directions. This is because your project right now

64
00:06:31,600 --> 00:06:38,880
is created to do one or a couple specific things. But we humans are horrible at figuring what the

65
00:06:38,880 --> 00:06:42,400
future is going to be like. And there's going to be a time where we're like, you know what,

66
00:06:42,400 --> 00:06:46,720
somebody's changed their mind. We're going to go in this direction. So if you refactor, you kind of

67
00:06:46,720 --> 00:06:51,840
make your code more flexible to support the new directions. So that's what refactoring is.

68
00:06:53,680 --> 00:06:58,560
I spent a couple years researching refactoring, and I found that the advice on refactoring

69
00:06:58,560 --> 00:07:06,800
pretty much falls into two categories. I call them top-down and bottom-up. Top-down refactoring

70
00:07:06,800 --> 00:07:12,800
advice is probably what you've heard of. It essentially comes from this book from Martin

71
00:07:12,800 --> 00:07:19,920
Fowler, Refactoring. And essentially what Martin did was for decades, people were trying to figure

72
00:07:19,920 --> 00:07:26,320
out how can we make our code easier to work with. And Martin kind of did his research and talked to

73
00:07:26,320 --> 00:07:31,520
a lot of engineers because they kept inventing ways to do this. And he curated a bunch of ways

74
00:07:32,160 --> 00:07:40,160
to, a bunch of specific methods that we can clean our code. One issue with this is that he,

75
00:07:41,120 --> 00:07:46,720
his book, and a lot of these people were in Java and C and other languages are not as flexible

76
00:07:46,720 --> 00:07:50,560
as Python. So if you look at any advice out there, chances are you're going to have to

77
00:07:50,560 --> 00:07:57,920
choose some translation into Python. One thing interesting about these type of advice is that

78
00:07:57,920 --> 00:08:01,840
I call them destinations, right? Because the people who write this advice, they don't know

79
00:08:01,840 --> 00:08:06,800
anything about your code. What they do know is based on the decades of our history, we know if

80
00:08:06,800 --> 00:08:11,920
you do these steps, you can improve your code in a specific way. You just need to choose which

81
00:08:11,920 --> 00:08:17,760
specific way you want to improve your code. Now, these are intimidating, right? I mean,

82
00:08:17,760 --> 00:08:22,240
there's over 60 in Martin Fowler's book. I'm aware of over 70. But what's really neat is if

83
00:08:22,240 --> 00:08:26,240
you take your time to just slowly read through them, it's a great way to help you to see what's

84
00:08:26,240 --> 00:08:31,120
possible. But if you want kind of the Cliff Notes version, if you want to try to do this on Monday,

85
00:08:31,120 --> 00:08:35,760
the things they kind of all have in common is to ensure that tests cover what you want to change,

86
00:08:36,640 --> 00:08:41,920
duplicate your code that you want to change, change that code to cover all the use cases,

87
00:08:42,480 --> 00:08:47,920
reroute your original code to use the new code, delete the old code, and run your tests.

88
00:08:49,440 --> 00:08:55,280
So that's top-down refactoring. Bottom up is entirely something different. Instead of having

89
00:08:55,280 --> 00:09:01,280
these design patterns that you apply down onto your code, you start with your code itself.

90
00:09:02,160 --> 00:09:07,200
And there are a series of rules or steps that you apply to your code and let design patterns

91
00:09:07,200 --> 00:09:12,400
emerge from it. One thing that's really cool about this is that because they're not tied to

92
00:09:12,400 --> 00:09:18,240
a specific language, they're good for even data science and pandas or functional programming.

93
00:09:19,120 --> 00:09:24,400
And the book that really codifies this bottom-up programming is this 99 Bottles of Object-Orient

94
00:09:24,400 --> 00:09:32,560
Programming by Sandy Metz and Katrina Owen. In this book, Sandy and Katrina wanted to make

95
00:09:32,560 --> 00:09:39,760
it a great book that helps people understand how to make great object-oriented code that just makes

96
00:09:39,760 --> 00:09:44,960
sentences simpler than a lot of object-oriented code that's out there. But as a part of this,

97
00:09:44,960 --> 00:09:50,560
they were like, we need to explain to people how to refactor their code in a way that is simpler

98
00:09:50,560 --> 00:09:58,480
and easier to understand, not those 60-some-on methods. They spent two years working and not

99
00:09:58,480 --> 00:10:02,480
giving up and trying to figure out a way to do this. And honestly, I am just so impressed

100
00:10:02,480 --> 00:10:07,920
with these women that they stuck with it and they created these things. What they did is created

101
00:10:07,920 --> 00:10:14,160
the flocking rules. On the left is the flocking rules, the steps of the flocking rules. And on

102
00:10:14,160 --> 00:10:20,000
the right, I have code that generates the first two verses of the 12 Days of Christmas. Why not?

103
00:10:20,000 --> 00:10:24,080
So let's walk through a quick refactoring just so you can get experience of what the flocking

104
00:10:24,080 --> 00:10:30,560
rules are. To start, we identify what we're going to work on. In order to do that,

105
00:10:30,560 --> 00:10:34,800
we identify the things that are the most alike. In this case, it's quite simple, right? We have

106
00:10:34,800 --> 00:10:40,400
two verses. These are things that are the most alike. Next, we identify the smallest difference

107
00:10:40,400 --> 00:10:45,760
between them. And I would suggest the first lines are exactly the same except for the third word.

108
00:10:45,760 --> 00:10:51,920
So let's focus on this. And what we do next is to make them identical. Before I do anything else,

109
00:10:51,920 --> 00:10:55,360
I'm going to say from this point on, we're going to run test every step of the way just to make

110
00:10:55,360 --> 00:11:02,400
sure that we don't introduce any new bugs or change behavior. First, we need to create a

111
00:11:02,400 --> 00:11:08,160
component to resolve the variations. The idea of this is as we are making these two things identical,

112
00:11:08,160 --> 00:11:12,000
there's going to be a point where differences just stick out like a sore thumb. So we need to

113
00:11:12,000 --> 00:11:17,280
create a parameter, a function, or a class that we can call and say, here's the state. This is

114
00:11:17,280 --> 00:11:25,120
where we're at. Can you tell us the value we need to use? In order to create something,

115
00:11:25,120 --> 00:11:29,920
we need to name it. And if I don't know the name, I know exactly what to name it. If I don't know

116
00:11:29,920 --> 00:11:36,080
that, there's an exercise that Sandy and Katrina taught me, which is to create a little table

117
00:11:36,800 --> 00:11:43,920
to show what needs to be true. So in this case, when the variable verse is one, this thing

118
00:11:43,920 --> 00:11:53,440
needs to return first. When it's two, second, three, third, five, fifth, 12th. So when I look at

119
00:11:54,960 --> 00:11:59,840
the relationship between these pieces of data, the word that starts to come to mind,

120
00:11:59,840 --> 00:12:06,400
at least in this case, is nth. Take the nth version of three, it's third. So I'm going to

121
00:12:06,400 --> 00:12:12,960
create a function called nth. I'm just going to create it, run our tests. I didn't accidentally

122
00:12:12,960 --> 00:12:19,600
mistype anything, so our tests pass, we're good. We move on. Now we implement code to supply one

123
00:12:19,600 --> 00:12:25,760
variation in our nth function. So I suggest we just do return first, run our tests, we're good.

124
00:12:26,960 --> 00:12:30,880
Now we're going to replace one of the differences to a call to the component.

125
00:12:31,520 --> 00:12:36,640
So if we go to our first verse, we turn it into an f-string, we run our tests, we're good.

126
00:12:38,080 --> 00:12:42,240
Next step, we can delete any unused code. We don't have any, so we move on to the fifth step,

127
00:12:42,240 --> 00:12:47,600
which is to essentially just go back through step two until everything is the same. This time,

128
00:12:47,600 --> 00:12:54,560
we can skip step one, and now we can implement code to supply the other variation, just like this.

129
00:12:55,280 --> 00:13:00,800
We run our tests, and they fail. This is why tests are so important in refactoring,

130
00:13:00,800 --> 00:13:05,280
because you can just focus in on one train of thought and accidentally let in bugs.

131
00:13:06,080 --> 00:13:12,160
And what happened here was when I wrote this code, I introduced a parameter to the nth function

132
00:13:12,160 --> 00:13:16,080
in a specific way that did not, that first one does not support, right? It's not,

133
00:13:16,640 --> 00:13:22,640
we don't have a variable or a parameter there, an argument. So the best thing we can do is change

134
00:13:22,640 --> 00:13:27,600
the code we just introduced to put a default parameter in here. Now we can run our tests,

135
00:13:27,600 --> 00:13:33,600
they pass, and we move on. Next, we replace the other component, or the other difference with a

136
00:13:33,600 --> 00:13:39,760
call to the component, just like that. We run our tests, they're fine. We don't have any unused

137
00:13:39,760 --> 00:13:44,320
code, so we go back up, and this time we can go down to step three, essentially go back to the

138
00:13:44,320 --> 00:13:53,200
first verse, add the parameter in, run our tests, they pass. Now we have code to delete, because now

139
00:13:53,200 --> 00:14:00,480
we can delete the parameter, and our code is refactored. Our first line is exactly the same,

140
00:14:00,480 --> 00:14:05,680
and we have something elegant that can return values. Now, I took a couple minutes to go

141
00:14:05,680 --> 00:14:10,800
through this, but in reality, when you practice this, it goes amazingly quick.

142
00:14:11,520 --> 00:14:15,200
And one thing I love, too, is that you always have working code, so if you need to commit

143
00:14:15,200 --> 00:14:21,680
or get pulled away, your code's always gonna work. If you lose your place because it's been a while,

144
00:14:21,680 --> 00:14:25,760
you can come back, look at the flocking rules, and pick up right where you left off.

145
00:14:25,760 --> 00:14:34,240
It's really impressive. So that's how you can refactor. I want to inspire you to refactor.

146
00:14:36,320 --> 00:14:40,800
Three minutes into his talk in PyCon 2016, Brett Slackin said these words.

147
00:14:42,560 --> 00:14:49,600
Great programmers write code that makes so much sense, it's easy to understand. But most

148
00:14:49,600 --> 00:14:56,160
programmers stop at the point where their code works functionally. But great programmers continue

149
00:14:56,160 --> 00:15:02,880
on and refactor their code base, so it's easy to understand and is obvious. They do this because

150
00:15:02,880 --> 00:15:07,200
it provides a better foundation for the future. Over the long run, it saves you time.

151
00:15:09,840 --> 00:15:15,680
So I thought it'd be great to show you an example of this. So I got this code off the internet,

152
00:15:15,680 --> 00:15:21,760
off GitHub. It's a refactoring cata or exercise that you can download, and this code generates

153
00:15:21,760 --> 00:15:28,480
prices for ski lift tickets. It's an API endpoint that you can call, and it's kind of gnarly, right?

154
00:15:28,480 --> 00:15:33,840
There's a lot of ifs and elses and all this logic that just my brain is not good at.

155
00:15:35,200 --> 00:15:42,640
So I decided to refactor it once and created this code. And what this code does,

156
00:15:42,640 --> 00:15:49,040
the API endpoint calls my computed price function, which is at the very top, and that function

157
00:15:50,160 --> 00:15:58,000
creates a specific ticket class and asks for its price. And then the rest of the code is I have a

158
00:15:58,000 --> 00:16:02,800
base class of a ticket. I have a night ticket class because that's a specific kind of ticket.

159
00:16:02,800 --> 00:16:07,440
I have a way to calculate its price. If I scroll down, there's a normal ticket or a day pass

160
00:16:07,440 --> 00:16:13,760
and a way to compute its price. And I feel like this is a lot better. If you need to change the

161
00:16:13,760 --> 00:16:19,440
way the night classes, night ticket price is calculated, you know right where to go.

162
00:16:21,120 --> 00:16:23,760
But I don't think it's quite as understandable as it could be.

163
00:16:24,480 --> 00:16:27,920
So I challenged myself some other time. I restarted this whole process and I really

164
00:16:27,920 --> 00:16:32,240
wanted to focus on understandability. And this is the code I created.

165
00:16:34,240 --> 00:16:39,920
And I was surprised at how little code it took to do everything that the first code did. And this

166
00:16:39,920 --> 00:16:44,960
actually does a better job of explaining the business rules. So I think this is part of the

167
00:16:44,960 --> 00:16:52,320
idea that Brett had when he spoke about, spoke these words. But what I find really interesting

168
00:16:52,320 --> 00:16:57,200
is those words are really powerful. But as he was saying these words, he had this slide on the

169
00:16:57,200 --> 00:17:04,640
screen. He was trying to say that there's a scale of developers, as he sees them, who spend the

170
00:17:04,640 --> 00:17:09,600
better programmers they are, the more time they spend refactoring. Now I think he's been a little

171
00:17:09,600 --> 00:17:13,920
self-deprecating and put himself in the top category. But the thing that really stopped me

172
00:17:13,920 --> 00:17:20,160
in my tracks was when he said the best developers he knows spend almost half their time refactoring,

173
00:17:21,120 --> 00:17:28,480
half their time refactoring. Alex and his team were trying to spend, they were trying to get 10%

174
00:17:28,480 --> 00:17:33,920
of their time to refactor their code. Brett knows people who are spending half their time refactoring

175
00:17:33,920 --> 00:17:44,960
their code. I just can't, that thought surprised me. Separate from this, I also asked a developer

176
00:17:45,040 --> 00:17:50,960
I've had, one of the best developers I've had luck to meet, Heineck Schlaalack. He created adders or

177
00:17:50,960 --> 00:17:57,200
data classes essentially, and I asked him his thoughts on refactoring. And he told me, I don't

178
00:17:57,200 --> 00:18:03,120
really think of refactoring as a separate thing. It's just the result of having tests and thinking

179
00:18:03,120 --> 00:18:10,880
about the design of your code all the time. And you know, the more I thought about these two data

180
00:18:10,880 --> 00:18:18,240
points, I realized that there is this, it didn't match with my experience. The teams I was on,

181
00:18:18,240 --> 00:18:23,440
we treated refactoring as something that maybe you do once or twice a year because it was painful.

182
00:18:24,080 --> 00:18:27,920
You pretty much got like a senior level developer to go off by themselves to improve some part of

183
00:18:27,920 --> 00:18:32,640
the code. And after a couple of weeks, they'd try to come back and bring their code back in line with

184
00:18:32,640 --> 00:18:36,400
the rest of us. And then we had to go through the merge conflicts of trying to get it all to work

185
00:18:36,400 --> 00:18:40,240
together. And it was just never, it didn't seem like it was worth it. I'm sure in the long time

186
00:18:40,240 --> 00:18:45,200
it was. But these two people are essentially saying this needs to be a part of your daily life.

187
00:18:46,480 --> 00:18:53,200
And as I thought about this, I started thinking about authors or songwriters, right? If there's a

188
00:18:53,200 --> 00:18:59,840
book that you love or a song that you really, really enjoy, that content was not the rough draft

189
00:18:59,840 --> 00:19:05,680
of whoever wrote it. And that's because the best writers ruthlessly edit their work.

190
00:19:05,680 --> 00:19:11,120
And the best Python developers do the same thing. And that's not at all. If you really want,

191
00:19:11,120 --> 00:19:15,360
like I want to drive this home. I think a lot of us just don't refactor enough. And so I want to go

192
00:19:15,360 --> 00:19:22,000
back to Alex's example, because I kind of glossed over the last two bullet points. There were people

193
00:19:22,000 --> 00:19:27,600
who worked around Alex's team, who interact with them, probably kitchenettes and things like this.

194
00:19:28,320 --> 00:19:33,040
And then one day they were like, what's changed with you guys? You seem so much more happier.

195
00:19:33,040 --> 00:19:37,840
You seem so much more happier. You're joking around. What changed? I want some of that.

196
00:19:37,840 --> 00:19:45,120
And they're like, well, we started refactoring our code. 10% of our time. And man, like if

197
00:19:45,120 --> 00:19:49,280
just a little bit of refactoring can improve your lives, I want you to be able to do this.

198
00:19:50,480 --> 00:19:57,280
So if you need to know how, here are some steps. One, ask a Python meetup to do a refactoring night.

199
00:19:57,920 --> 00:20:03,520
There's my Python meetup groups all over the place. If you don't feel comfortable joining

200
00:20:03,520 --> 00:20:08,400
one or don't know one, I run the Python user group in Richmond, Virginia. Reach out to me

201
00:20:08,400 --> 00:20:14,880
and I'll create an online refactoring night. We'll have a great time. Two, talk to your teammates

202
00:20:14,880 --> 00:20:22,240
about it. Having somebody to walk with you would be wonderful experience to have. Chances are it's

203
00:20:22,240 --> 00:20:27,440
going to take a, you know, ask a couple of times and you might finally hear somebody say,

204
00:20:28,240 --> 00:20:32,480
what's that you're talking about? I'm kind of curious about it, but it'll really help you out.

205
00:20:34,320 --> 00:20:38,240
Next, I suggest putting a meeting on your calendar every week,

206
00:20:38,240 --> 00:20:43,040
say like on a Tuesday morning or a Friday afternoon, we spend 10 minutes just to read through

207
00:20:43,040 --> 00:20:50,400
a code smell or refactoring method just to get it into your mind. And finally, practice as often as

208
00:20:50,400 --> 00:20:58,320
you can. There are katas or exercises that you can find online that can just get you practiced

209
00:20:58,320 --> 00:21:01,760
because the more, this is essentially a new skill. And so the more you can practice,

210
00:21:01,760 --> 00:21:05,440
the better off and the quicker you can do and the more, the better refactorings you can make.

211
00:21:08,240 --> 00:21:13,600
With that, I also want to leave you with some resources because I know there are many people

212
00:21:13,600 --> 00:21:17,440
I interact with, a lot of people on my teams who just love a book that they can dig into

213
00:21:18,000 --> 00:21:23,440
and really like dive in deep on a subject. And there's so many great resources, but I thought,

214
00:21:23,440 --> 00:21:27,360
was there a way I could narrow it down to just three I could recommend?

215
00:21:28,560 --> 00:21:32,560
So the first one I recommend is Nine in Bottle of OOP by Sandy and Katrina.

216
00:21:33,440 --> 00:21:39,520
They are Ruby programmers, their book is in Ruby, they've made PHP and JavaScript versions,

217
00:21:39,520 --> 00:21:44,640
so if those are more comfortable to you, that might help. But Ruby, the way they write Ruby is,

218
00:21:44,640 --> 00:21:49,680
doesn't require as much translation over to Python, so it's still very worth reading. And

219
00:21:49,680 --> 00:21:56,240
if you do have problems translating it, reach out to me because just by practicing the way

220
00:21:56,240 --> 00:22:02,320
that they've coded, I learned so much and I'd be happy to work with you. So that's a Ruby source.

221
00:22:02,960 --> 00:22:08,080
I wanted to find a good Python source and so the one I'm going to recommend was put out last year,

222
00:22:08,640 --> 00:22:16,640
it's called Robust Python. Patrick has done an amazing job of, essentially he

223
00:22:18,560 --> 00:22:26,560
teaches you through this book how to, essentially how to make good Pythonic code with stuff that's

224
00:22:26,560 --> 00:22:32,160
there, like type codes, type hints, like all the stuff that's been in Python in the last few

225
00:22:32,160 --> 00:22:37,680
versions. I feel like he does a really great job of like really helping you to write great

226
00:22:37,680 --> 00:22:41,840
code that communicates with your teammates really well. He doesn't cover a thing about

227
00:22:41,840 --> 00:22:46,240
refactoring, but as somebody who starts to refactor more, you can use his book to see like,

228
00:22:46,240 --> 00:22:49,920
oh, I kind of want to lean more into this direction because I need to communicate this way with my

229
00:22:49,920 --> 00:22:57,920
teammates. Finally, I wanted to come up with a good refactoring resource that was very Python

230
00:22:57,920 --> 00:23:03,040
focused. And honestly, I couldn't find one. So I created one myself called the Python refactoring

231
00:23:03,040 --> 00:23:07,120
toolkit. It's available on my website. If it's something that's interesting to you,

232
00:23:07,120 --> 00:23:11,840
essentially I've taken my research on refactoring and just put it all together

233
00:23:11,840 --> 00:23:16,960
and translated all the refactoring methods I could find into Python so you wouldn't have to

234
00:23:16,960 --> 00:23:20,960
do all that. There's a free version available just to see if it's something you're interested in.

235
00:23:22,240 --> 00:23:27,760
But otherwise, that is my talk, and I appreciate you spending time with me today. Thank you very

236
00:23:27,760 --> 00:23:45,600
much. I do have one other little request. So this is my first conference talk, and thank you. Thank

237
00:23:45,600 --> 00:23:54,320
you. I walked away from my full-time, full-stack development job nine months ago. It'll be nine

238
00:23:54,320 --> 00:23:59,280
months in just a couple of weeks. And so my parents just kind of aren't sure what I'm doing.

239
00:23:59,280 --> 00:24:05,520
So I want to take a selfie with you guys just so you can see what's going on. So everybody wave.

240
00:24:10,960 --> 00:24:15,680
All right. Thank you so much.

