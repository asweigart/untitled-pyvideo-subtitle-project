1
00:00:00,000 --> 00:00:01,520
And you have five minutes.

2
00:00:01,520 --> 00:00:02,120
All right.

3
00:00:02,120 --> 00:00:04,480
Well, I tell you, the first time I did a lightning

4
00:00:04,480 --> 00:00:07,880
talk for PyTexas was around 2007, 2008,

5
00:00:07,880 --> 00:00:09,200
one of the early ones.

6
00:00:09,200 --> 00:00:10,920
And I spoke for 45 minutes.

7
00:00:10,920 --> 00:00:13,440
So I'll try to do a little better today.

8
00:00:13,440 --> 00:00:14,560
OK, all right.

9
00:00:14,560 --> 00:00:19,040
So I'm one of the authors of Python in a nutshell.

10
00:00:19,040 --> 00:00:24,360
I've joined at the fourth edition with Alex and Steve.

11
00:00:24,360 --> 00:00:28,040
And this is me in the corner there.

12
00:00:28,040 --> 00:00:29,680
And I've got my Twitter handle.

13
00:00:29,680 --> 00:00:32,360
And this hashtag is what we collectively

14
00:00:32,360 --> 00:00:36,400
use when we will tweet or post on Mastodon.

15
00:00:36,400 --> 00:00:40,040
So you can follow along with news for the book

16
00:00:40,040 --> 00:00:43,200
with those handles.

17
00:00:43,200 --> 00:00:44,800
Watch for some QR codes.

18
00:00:44,800 --> 00:00:47,520
I've got QR codes on a number of these slides

19
00:00:47,520 --> 00:00:49,720
as I point to websites and so forth.

20
00:00:49,720 --> 00:00:53,760
So be ready for those when you're interested.

21
00:00:53,760 --> 00:00:55,500
So I'll dive right into some of the things

22
00:00:55,500 --> 00:00:58,740
that we picked up while we were working on the book.

23
00:00:58,740 --> 00:01:02,980
The first one, there's a chapter in the book very early on

24
00:01:02,980 --> 00:01:06,180
is how to build Python from source,

25
00:01:06,180 --> 00:01:07,220
or how to install Python.

26
00:01:07,220 --> 00:01:09,220
And one part of that is building from source.

27
00:01:09,220 --> 00:01:11,620
And doing the analysis or the survey for this,

28
00:01:11,620 --> 00:01:14,620
I found this great website for Linux systems,

29
00:01:14,620 --> 00:01:17,180
buildpythonfromsource.com.

30
00:01:17,180 --> 00:01:21,780
And you check various switches on which Python version

31
00:01:21,780 --> 00:01:25,220
you want, which Linux distro you're building for.

32
00:01:25,220 --> 00:01:28,380
And then it will emit all the bash commands

33
00:01:28,380 --> 00:01:31,940
to download, build, and install that Python.

34
00:01:31,940 --> 00:01:34,060
And there's the QR code for that.

35
00:01:34,060 --> 00:01:35,900
I'll leave that up for just 10 seconds

36
00:01:35,900 --> 00:01:37,540
because I need to move forward.

37
00:01:39,420 --> 00:01:41,140
Okay, the next one.

38
00:01:41,140 --> 00:01:44,620
When we were doing the syntax,

39
00:01:44,620 --> 00:01:49,620
I discovered that middle.is a valid identifier character.

40
00:01:49,940 --> 00:01:51,620
So this is kind of a crazy thing,

41
00:01:51,620 --> 00:01:54,780
and there's no key on the keyboard,

42
00:01:54,780 --> 00:01:58,260
but for you Mac folks, shift option nine,

43
00:01:58,260 --> 00:02:01,060
Windows people, it's alt 0, 1, 8, 3,

44
00:02:01,060 --> 00:02:04,460
and you can write variables with a dot in the middle.

45
00:02:04,460 --> 00:02:07,340
That is not the period for an attribute.

46
00:02:07,340 --> 00:02:08,380
That is a middle dot.

47
00:02:11,300 --> 00:02:14,420
We also did some analysis on Unicode characters,

48
00:02:14,420 --> 00:02:16,500
normalization of Unicode down to ASCII.

49
00:02:17,500 --> 00:02:19,980
And here we have just some pretty standard

50
00:02:19,980 --> 00:02:23,660
kind of hello world, a little verbose maybe.

51
00:02:23,660 --> 00:02:27,860
This is the exact same program using Unicode characters

52
00:02:27,860 --> 00:02:30,460
because, and in fact, this will run

53
00:02:30,460 --> 00:02:33,060
identically with that one on the side.

54
00:02:35,260 --> 00:02:40,260
Because Python will convert identifier Unicode characters,

55
00:02:40,380 --> 00:02:42,700
will normalize them back to normal ASCII.

56
00:02:42,700 --> 00:02:45,140
So you'll see that it's only the identifiers,

57
00:02:45,140 --> 00:02:49,260
none of the keywords, but there's a lot of identifiers

58
00:02:49,260 --> 00:02:52,660
that are built in, print, all the exceptions and so forth.

59
00:02:52,660 --> 00:02:57,260
So this is sort of a ransom note kind of approach.

60
00:02:57,260 --> 00:03:00,180
I have a website that will actually do this.

61
00:03:00,180 --> 00:03:04,140
You can play with this, play tricks on your friends,

62
00:03:04,140 --> 00:03:06,060
and this is the QR code to get to that.

63
00:03:06,060 --> 00:03:10,140
We'll pull up a little window to paste in some Python code.

64
00:03:10,140 --> 00:03:12,140
It'll generate that code on the right.

65
00:03:14,740 --> 00:03:16,900
Okay, you can count higher with ints

66
00:03:16,900 --> 00:03:18,740
than you can with floats.

67
00:03:18,740 --> 00:03:22,260
Here's a little loop that displays values

68
00:03:22,260 --> 00:03:25,900
around two to the 53rd, and you'll see that floats,

69
00:03:25,900 --> 00:03:30,460
they lose integer precision at two to the 53rd.

70
00:03:30,460 --> 00:03:33,300
Sometimes the values go higher, sometimes lower.

71
00:03:35,140 --> 00:03:38,660
Integers, you can count as high as two to the two

72
00:03:38,660 --> 00:03:42,100
to the 63rd, it's about a two followed by

73
00:03:42,100 --> 00:03:44,580
a billion, billion zeros.

74
00:03:44,580 --> 00:03:46,180
That's a theoretical limit.

75
00:03:46,180 --> 00:03:49,460
I tried to reach something close to that,

76
00:03:49,460 --> 00:03:51,180
and I blew up my memory, so.

77
00:03:53,780 --> 00:03:56,820
I've gotta hurry, so stir function surprise.

78
00:03:56,820 --> 00:03:58,580
This is actually not a new feature,

79
00:03:58,580 --> 00:04:03,580
but who can tell me what this is gonna print out?

80
00:04:10,380 --> 00:04:12,300
L.com.

81
00:04:12,300 --> 00:04:14,620
I wanted to strip off HTTPS,

82
00:04:14,620 --> 00:04:17,100
but that is not the string to strip off,

83
00:04:17,100 --> 00:04:18,940
those are the characters to strip off,

84
00:04:18,940 --> 00:04:21,540
and that matches all of those.

85
00:04:21,540 --> 00:04:25,740
In 3.9, we have remove prefix and remove suffix,

86
00:04:25,740 --> 00:04:30,740
and that does the intended stripping of that substring.

87
00:04:30,840 --> 00:04:34,800
We found in general discussion and surveying our network,

88
00:04:34,800 --> 00:04:37,900
there's actually some latent bugs in our code bases.

89
00:04:37,900 --> 00:04:41,300
Search for Lstrip and Rstrip that take no arguments,

90
00:04:41,300 --> 00:04:43,160
good for stripping white space,

91
00:04:43,160 --> 00:04:45,480
but if they're taking a quoted string,

92
00:04:45,480 --> 00:04:48,400
hmm, you may have actually slipped into this bug,

93
00:04:48,400 --> 00:04:49,480
and watch for that.

94
00:04:51,080 --> 00:04:52,600
I'm just gonna do this real quick.

95
00:04:52,600 --> 00:04:54,880
The sort method in Python was presented

96
00:04:54,880 --> 00:04:57,680
before the Supreme Court as part of the Oracle

97
00:04:57,680 --> 00:04:59,660
versus Google source code,

98
00:05:00,880 --> 00:05:05,000
and there's the QR code for you can look that up.

99
00:05:05,000 --> 00:05:10,000
And lastly, the appendix for the book

100
00:05:14,360 --> 00:05:19,080
has all of the code changes from 3.7 through 3.11,

101
00:05:19,080 --> 00:05:21,480
and there's this website where you can actually

102
00:05:21,480 --> 00:05:25,980
do keyword search for changes by version.

103
00:05:28,080 --> 00:05:29,280
Thank you very much.

104
00:05:29,720 --> 00:05:33,960
Awesome, thank you Paul.

105
00:05:37,320 --> 00:05:39,480
All right, I've gotta move to something louder next time

106
00:05:39,480 --> 00:05:43,480
because that did not work, but, okay.

107
00:05:43,480 --> 00:05:47,620
Next up is from the volunteer team zone, Josh Schneider.

108
00:05:50,040 --> 00:05:51,280
I'll be mercifully quick.

109
00:05:52,880 --> 00:05:55,760
Two things first, number one, if you were here last year

110
00:05:55,760 --> 00:05:57,780
and saw my talk last year,

111
00:05:57,780 --> 00:05:59,900
this will all seem really familiar.

112
00:05:59,900 --> 00:06:01,500
And number two, I wanna confirm, Chris,

113
00:06:01,500 --> 00:06:04,420
you and I did not talk before I came up here and did this

114
00:06:04,420 --> 00:06:06,460
because it's gonna sound real familiar too.

115
00:06:06,460 --> 00:06:08,820
But I talked about this, this was one of my first slides

116
00:06:08,820 --> 00:06:11,500
in my talk last year, but this bears repeating.

117
00:06:11,500 --> 00:06:15,580
I think these words will be carved in my tombstone probably,

118
00:06:15,580 --> 00:06:18,260
but this is Josh's three, make that four rules

119
00:06:18,260 --> 00:06:20,380
for user experience design.

120
00:06:23,980 --> 00:06:26,620
That's fine, I don't need tiny cue cards.

121
00:06:28,780 --> 00:06:30,620
No Dr. Horrible fans here?

122
00:06:30,620 --> 00:06:32,900
Okay, I will start with rule number one

123
00:06:32,900 --> 00:06:35,220
while I am trying to get everything duplicated here.

124
00:06:35,220 --> 00:06:39,260
Rule number one is, and repeat it with me if you'd like to,

125
00:06:39,260 --> 00:06:40,380
make it obvious.

126
00:06:41,800 --> 00:06:43,620
Why make it obvious?

127
00:06:43,620 --> 00:06:45,580
Well, because if it's obvious,

128
00:06:45,580 --> 00:06:48,020
you don't have to tell people how to use it,

129
00:06:48,020 --> 00:06:49,660
it'll be obvious.

130
00:06:51,660 --> 00:06:53,600
And this is just not behaving, so that's fine.

131
00:06:53,600 --> 00:06:56,860
I can go without slides because I can animate myself.

132
00:06:56,860 --> 00:07:00,380
Rule number two, if you can't make it obvious,

133
00:07:00,380 --> 00:07:02,860
make it familiar, right?

134
00:07:02,860 --> 00:07:05,300
If you make it familiar, you can borrow what the user knows

135
00:07:05,300 --> 00:07:07,820
about another topic to learn your thing.

136
00:07:07,820 --> 00:07:11,000
So if you're implementing something that, say, parses path,

137
00:07:11,000 --> 00:07:13,920
fitting the same interface as, say, pathlib,

138
00:07:13,920 --> 00:07:16,460
makes it easier to translate that to other users

139
00:07:16,460 --> 00:07:18,380
that are using your library.

140
00:07:18,380 --> 00:07:19,940
So you can borrow what somebody knows about one thing

141
00:07:19,940 --> 00:07:21,260
to use it for another one.

142
00:07:21,260 --> 00:07:23,700
Rule number three, if you can't make it obvious

143
00:07:23,700 --> 00:07:25,740
or familiar for the love of all that is good,

144
00:07:25,740 --> 00:07:27,820
make it well-documented.

145
00:07:27,820 --> 00:07:29,940
Make sure there are copious notes on how to use it,

146
00:07:29,940 --> 00:07:32,500
all of the edge cases and corner cases you can think of.

147
00:07:32,500 --> 00:07:34,620
You never know when that stuff's gonna come in handy.

148
00:07:34,620 --> 00:07:37,380
And then those were my three rules that I've always had.

149
00:07:37,380 --> 00:07:39,340
Rule number four has snuck in there

150
00:07:39,340 --> 00:07:41,180
from all of the conversations I've had.

151
00:07:41,180 --> 00:07:42,900
And rule number four is very simple.

152
00:07:42,900 --> 00:07:45,760
Start at rule number one, not in rule number three.

153
00:07:48,100 --> 00:07:50,260
Well-documented is not good enough.

154
00:07:50,260 --> 00:07:52,240
If you can make it obvious or familiar,

155
00:07:52,240 --> 00:07:54,300
those are better than well-documented.

156
00:07:54,300 --> 00:07:56,220
If somebody has to look for your documentation

157
00:07:56,220 --> 00:07:58,300
to use your thing, you've already lost a percentage

158
00:07:58,300 --> 00:08:00,660
of your audience before you've even started.

159
00:08:00,660 --> 00:08:02,400
Go for obvious.

160
00:08:03,340 --> 00:08:04,180
And that's it.

161
00:08:04,180 --> 00:08:05,180
All yours, sir.

162
00:08:11,540 --> 00:08:12,380
Thank you.

163
00:08:12,380 --> 00:08:13,200
And Mr. Brad.

164
00:08:13,200 --> 00:08:15,900
Didn't even get to use my new alarm, how sad.

165
00:08:19,260 --> 00:08:20,360
Is it working for you?

166
00:08:22,100 --> 00:08:22,940
Yeah.

167
00:08:24,980 --> 00:08:27,860
The technology ghosts are gonna play nice with us this time.

168
00:08:27,860 --> 00:08:28,700
All right.

169
00:08:28,700 --> 00:08:30,100
Al Swigert again.

170
00:08:30,100 --> 00:08:32,940
All right.

171
00:08:32,940 --> 00:08:36,020
Has this ever happened to you

172
00:08:36,020 --> 00:08:39,820
where you're leading a three-hour introduction to Python

173
00:08:39,820 --> 00:08:42,940
or something like that, and you want all your students

174
00:08:42,940 --> 00:08:47,940
to install some third-party package from PiPI?

175
00:08:47,980 --> 00:08:50,020
This is going to be a nightmare,

176
00:08:50,020 --> 00:08:52,700
and you spend the next 45 minutes of your three-hour

177
00:08:53,700 --> 00:08:57,420
workshop just getting the package installed

178
00:08:57,420 --> 00:08:59,520
because some of the students have Windows,

179
00:08:59,520 --> 00:09:02,700
some have macOS, somebody has free BSD installed

180
00:09:02,700 --> 00:09:05,580
on their laptop for some reason, and not only that,

181
00:09:05,580 --> 00:09:09,300
but they all have different versions of Python installed.

182
00:09:09,300 --> 00:09:12,620
And not only that, you have to explain

183
00:09:12,620 --> 00:09:15,040
how to use the terminal or the command prompt

184
00:09:15,040 --> 00:09:16,580
as it's called on Windows,

185
00:09:16,580 --> 00:09:18,260
or maybe they have PowerShell installed,

186
00:09:18,260 --> 00:09:20,740
and you have to explain what environment variables are,

187
00:09:20,740 --> 00:09:23,300
and you have to tell them, oh, you need to modify

188
00:09:23,300 --> 00:09:26,780
your bashrc file or your zshellrc file,

189
00:09:26,780 --> 00:09:29,860
depending on the version of macOS that they have,

190
00:09:29,860 --> 00:09:31,620
and this is all such a pain.

191
00:09:31,620 --> 00:09:35,260
And yes, they do need to eventually learn how to do this

192
00:09:35,260 --> 00:09:38,580
so that they can run pip and install Python packages,

193
00:09:38,580 --> 00:09:41,420
but you just want it to work right now.

194
00:09:41,420 --> 00:09:42,980
Here's the solution.

195
00:09:42,980 --> 00:09:46,220
You can run pip from the interactive shell.

196
00:09:46,220 --> 00:09:50,280
Just import pip, do pip.main, and then you have to pass it

197
00:09:50,280 --> 00:09:51,360
a list of the arguments.

198
00:09:51,360 --> 00:09:55,840
In this case, install Django or install whatever you want.

199
00:09:55,840 --> 00:10:00,680
This works on versions Python 3.5 and up.

200
00:10:00,680 --> 00:10:03,840
It even works on 2.7 for some reason if you need that.

201
00:10:03,840 --> 00:10:06,480
It works on Windows, it works on Macs, it works on Linux,

202
00:10:06,480 --> 00:10:09,840
it probably works on free BSD, I haven't checked.

203
00:10:09,840 --> 00:10:12,840
It works even if they have multiple versions

204
00:10:12,840 --> 00:10:16,160
of Python installed because whatever the interactive shell

205
00:10:16,160 --> 00:10:17,560
that they're using, that's the one

206
00:10:17,560 --> 00:10:19,080
that it's going to install to.

207
00:10:19,080 --> 00:10:22,360
If you've ever had that problem where for some reason

208
00:10:22,360 --> 00:10:24,680
the environment variable was set up where pip was

209
00:10:24,680 --> 00:10:26,640
for a different version of Python

210
00:10:26,640 --> 00:10:30,420
than the Python thing was, so many headaches.

211
00:10:30,420 --> 00:10:32,060
You can run it from the interactive shell.

212
00:10:32,060 --> 00:10:34,920
This is not a best practice.

213
00:10:34,920 --> 00:10:38,100
If you want your Python application to run pip

214
00:10:38,100 --> 00:10:40,120
for some reason, you would not want it

215
00:10:40,120 --> 00:10:41,320
to just directly run this.

216
00:10:41,320 --> 00:10:43,300
And I think actually Python gives you some warning,

217
00:10:43,300 --> 00:10:45,640
but hey, this is how you can do that

218
00:10:45,640 --> 00:10:47,720
if you just need to get something installed

219
00:10:47,720 --> 00:10:50,160
so you can continue on with your workshop,

220
00:10:50,160 --> 00:10:52,960
or your class, or your blog post tutorial,

221
00:10:52,960 --> 00:10:54,960
or your video, or whatever.

222
00:10:54,960 --> 00:10:57,000
Pip.main and then pass it a list.

223
00:10:57,000 --> 00:10:58,480
Okay, thank you, that's all.

224
00:10:58,480 --> 00:10:59,480
All right.

225
00:11:07,680 --> 00:11:10,520
We are moving right along, I love this.

226
00:11:10,520 --> 00:11:11,520
All right.

227
00:11:12,320 --> 00:11:15,320
Next up would be, is it Shreya Batra?

228
00:11:15,320 --> 00:11:16,320
Is that correct?

229
00:11:16,320 --> 00:11:17,320
Okay.

230
00:11:17,320 --> 00:11:20,320
You need an adapter?

231
00:11:20,320 --> 00:11:23,320
I think we can do that.

232
00:11:25,320 --> 00:11:28,320
Let's see if that works for you.

233
00:11:28,320 --> 00:11:29,320
There you go.

234
00:11:34,320 --> 00:11:35,320
Don't worry about it.

235
00:11:35,320 --> 00:11:38,320
Just toss it down here.

236
00:11:39,120 --> 00:11:42,120
And then you might need to do, oh.

237
00:11:48,120 --> 00:11:51,120
I think we're getting there.

238
00:11:51,120 --> 00:11:52,120
Yeah.

239
00:11:52,120 --> 00:11:53,120
Yes, awesome.

240
00:11:53,120 --> 00:11:54,120
All right, all yours.

241
00:11:54,120 --> 00:11:55,120
Thank you.

242
00:11:55,120 --> 00:11:56,120
Hi, everyone.

243
00:11:56,120 --> 00:11:57,120
I'm Shreya.

244
00:11:57,120 --> 00:12:01,120
I am a PM on Azure Functions and I wanted to come

245
00:12:01,120 --> 00:12:03,120
and talk to you all about kind of what we're doing

246
00:12:03,120 --> 00:12:05,120
for Python these days and our investment

247
00:12:05,120 --> 00:12:07,120
in the Python space.

248
00:12:07,920 --> 00:12:09,920
So before I start, I just wanted to ask,

249
00:12:09,920 --> 00:12:11,920
have any of you used any serverless technologies

250
00:12:11,920 --> 00:12:14,920
in the past?

251
00:12:14,920 --> 00:12:15,920
Thank you.

252
00:12:16,920 --> 00:12:19,920
Serverless technologies.

253
00:12:19,920 --> 00:12:20,920
Okay.

254
00:12:20,920 --> 00:12:22,920
Awesome, so quite a few of you.

255
00:12:22,920 --> 00:12:24,920
And could you keep your hand up if you've used

256
00:12:24,920 --> 00:12:27,920
Azure Functions specifically?

257
00:12:27,920 --> 00:12:28,920
Okay.

258
00:12:28,920 --> 00:12:29,920
Some people, okay.

259
00:12:29,920 --> 00:12:30,920
Awesome.

260
00:12:30,920 --> 00:12:33,920
And then Azure Functions in Python?

261
00:12:33,920 --> 00:12:34,920
Okay, awesome.

262
00:12:34,920 --> 00:12:35,920
We have one person.

263
00:12:36,720 --> 00:12:37,720
Thank you.

264
00:12:37,720 --> 00:12:39,720
So yeah, before I start, I do want to talk

265
00:12:39,720 --> 00:12:41,720
a little bit about Azure Functions since I know

266
00:12:41,720 --> 00:12:43,720
a lot of you may not be familiar with it.

267
00:12:43,720 --> 00:12:46,320
And then I'll just kind of go into what we're doing

268
00:12:46,320 --> 00:12:48,320
for the Python space.

269
00:12:48,320 --> 00:12:49,320
Awesome.

270
00:12:49,320 --> 00:12:51,320
So what is Azure Functions?

271
00:12:51,320 --> 00:12:54,320
Azure Functions is the serverless compute

272
00:12:54,320 --> 00:12:55,320
from Azure.

273
00:12:55,320 --> 00:12:59,320
And the idea is that you just focus on your code,

274
00:12:59,320 --> 00:13:01,320
you just write the business logic,

275
00:13:01,320 --> 00:13:04,320
and we take care of the rest for you.

276
00:13:04,320 --> 00:13:06,720
And I'll just go over quickly some examples

277
00:13:06,720 --> 00:13:09,720
of commonly used times when you might use

278
00:13:09,720 --> 00:13:10,720
Azure Functions.

279
00:13:10,720 --> 00:13:13,720
So here we have a database that we want

280
00:13:13,720 --> 00:13:16,720
to clean regularly on a timer so we can

281
00:13:16,720 --> 00:13:18,720
actually configure an Azure Function that

282
00:13:18,720 --> 00:13:20,720
will go ahead and run some business logic

283
00:13:20,720 --> 00:13:23,320
to perhaps deduplicate data and clean

284
00:13:23,320 --> 00:13:25,920
that database for you every 15 minutes.

285
00:13:25,920 --> 00:13:28,320
So this is probably a really common use case

286
00:13:28,320 --> 00:13:30,320
for our customers.

287
00:13:30,320 --> 00:13:32,720
A second one is real-time stream processing.

288
00:13:32,720 --> 00:13:35,320
So here we start with an app that's producing

289
00:13:35,320 --> 00:13:38,320
some data and we want to end that with like

290
00:13:38,320 --> 00:13:40,320
the data in a dashboard where we can track

291
00:13:40,320 --> 00:13:42,320
different metrics on that app.

292
00:13:42,320 --> 00:13:44,320
So as you can see there may be an issue

293
00:13:44,320 --> 00:13:46,320
where we need to process data between

294
00:13:46,320 --> 00:13:48,320
different data sources and Azure Functions

295
00:13:48,320 --> 00:13:51,320
would be a great tool to be able to do that.

296
00:13:51,320 --> 00:13:54,320
So in these two examples I kind of just had

297
00:13:54,320 --> 00:13:57,320
this little functions logo to represent

298
00:13:57,320 --> 00:14:00,320
that code, that business logic that you'd be writing.

299
00:14:00,320 --> 00:14:02,320
And I just want to go into a little bit

300
00:14:02,320 --> 00:14:06,320
more detail of like what that would be actually.

301
00:14:06,320 --> 00:14:09,320
So we have this trigger that would run

302
00:14:09,320 --> 00:14:11,320
the code that would invoke the function that you have.

303
00:14:11,320 --> 00:14:14,320
So the trigger could be something like an HTTP request.

304
00:14:14,320 --> 00:14:16,320
It could be off of a database.

305
00:14:16,320 --> 00:14:19,320
It could be on a schedule or a timer.

306
00:14:19,320 --> 00:14:21,320
And then we have these optional aspects

307
00:14:21,320 --> 00:14:23,320
of an input and output binding if you need

308
00:14:23,320 --> 00:14:25,320
more data to process the code and also

309
00:14:25,320 --> 00:14:29,320
based on where you'd want to put the code afterwards.

310
00:14:29,320 --> 00:14:32,320
And also we are completely open sourced.

311
00:14:32,320 --> 00:14:34,320
So if you would like please do check out

312
00:14:34,320 --> 00:14:36,320
the Azure Functions repository.

313
00:14:36,320 --> 00:14:39,320
You're welcome to contribute or ask questions

314
00:14:39,320 --> 00:14:41,320
and take a deeper dive into the repository

315
00:14:41,320 --> 00:14:43,320
if you are interested.

316
00:14:43,320 --> 00:14:45,320
And then now I just want to kind of talk about

317
00:14:45,320 --> 00:14:47,320
our new release for Python.

318
00:14:47,320 --> 00:14:50,320
So one of the main initiatives that we're focusing on

319
00:14:50,320 --> 00:14:53,320
in functions for Python is being able to

320
00:14:53,320 --> 00:14:56,320
provide an experience that's more native

321
00:14:56,320 --> 00:14:58,320
to Python developers.

322
00:14:58,320 --> 00:15:00,320
Whether you're just getting started or you're an experienced

323
00:15:00,320 --> 00:15:02,320
Python developer, we don't want the experience

324
00:15:02,320 --> 00:15:04,320
of using functions to be much different

325
00:15:04,320 --> 00:15:08,320
than what it is like to code natively in Python.

326
00:15:08,320 --> 00:15:10,320
So we've released this new programming model

327
00:15:10,320 --> 00:15:13,320
which is still in preview and some of the new offerings

328
00:15:13,320 --> 00:15:15,320
are that we see decorators to represent

329
00:15:15,320 --> 00:15:17,320
triggers and bindings.

330
00:15:17,320 --> 00:15:20,320
And we also have added a lot more documentation.

331
00:15:20,320 --> 00:15:23,320
So if you are interested in functions at all,

332
00:15:23,320 --> 00:15:26,320
I know a lot of you haven't used functions before,

333
00:15:26,320 --> 00:15:30,320
please do give it a try, especially this programming model.

334
00:15:30,320 --> 00:15:32,320
And if you do want to give it a try

335
00:15:32,320 --> 00:15:34,320
and you have any feedback or any questions,

336
00:15:34,320 --> 00:15:37,320
please feel free to reach out to me.

337
00:15:37,320 --> 00:15:39,320
Yeah, thank you so much for listening.

338
00:15:39,320 --> 00:15:56,320
Next up, Josh Cannon.

339
00:15:56,320 --> 00:15:59,320
I have 23 slides, five minutes.

340
00:15:59,320 --> 00:16:01,320
I've not rehearsed this.

341
00:16:01,320 --> 00:16:05,320
If you're using your calculator, that's 13 seconds a slide.

342
00:16:05,320 --> 00:16:07,320
I talk fast.

343
00:16:07,320 --> 00:16:09,320
There's adrenaline involved.

344
00:16:09,320 --> 00:16:12,320
Oh, no, I want to hear the buzzer.

345
00:16:12,320 --> 00:16:14,320
Can you all hear me?

346
00:16:14,320 --> 00:16:19,320
I talk loud enough, so hopefully, oh, come on.

347
00:16:19,320 --> 00:16:21,320
Okay, it's down there.

348
00:16:21,320 --> 00:16:27,320
Oh, Lord.

349
00:16:27,320 --> 00:16:33,320
Let's try that.

350
00:16:33,320 --> 00:16:40,320
I'm getting like picture in picture.

351
00:16:40,320 --> 00:16:42,320
A little weird.

352
00:16:42,320 --> 00:16:44,320
Let's do it.

353
00:16:44,320 --> 00:16:46,320
Two snakes in a trench coat descriptors.

354
00:16:46,320 --> 00:16:49,320
Okay, so a lot of you might be familiar with git adder,

355
00:16:49,320 --> 00:16:51,320
which is how do you git me?

356
00:16:51,320 --> 00:16:52,320
It's half of a handshake.

357
00:16:52,320 --> 00:16:54,320
So if I have this order instance thing

358
00:16:54,320 --> 00:16:57,320
and I ask for a brisket taco, which I usually do,

359
00:16:57,320 --> 00:16:59,320
if it didn't exist, you'll go for git adder.

360
00:16:59,320 --> 00:17:00,320
It's great.

361
00:17:00,320 --> 00:17:01,320
How do you git me?

362
00:17:01,320 --> 00:17:02,320
You can also git attribute.

363
00:17:02,320 --> 00:17:03,320
Nobody uses it.

364
00:17:03,320 --> 00:17:05,320
But doesn't the brisket taco get a say?

365
00:17:05,320 --> 00:17:08,320
I don't know, like the Chick-fil-A cow or something.

366
00:17:08,320 --> 00:17:11,320
So let's take a real-world use case that I've refactored.

367
00:17:11,320 --> 00:17:13,320
And the first thing is you have this my menu thing,

368
00:17:13,320 --> 00:17:14,320
and it inherits from menu.

369
00:17:14,320 --> 00:17:16,320
You have this class method called register options,

370
00:17:16,320 --> 00:17:18,320
and here's where you do command line stuff,

371
00:17:18,320 --> 00:17:21,320
and here's your brisket taco, and you say it's a type string.

372
00:17:21,320 --> 00:17:24,320
Because I don't know what type of brisket taco it is.

373
00:17:24,320 --> 00:17:25,320
Great.

374
00:17:25,320 --> 00:17:26,320
And how you access it.

375
00:17:26,320 --> 00:17:28,320
Again, this is something that already exists.

376
00:17:28,320 --> 00:17:31,320
We're going to make our order instance of my menu.

377
00:17:31,320 --> 00:17:33,320
And ooh, yeah.

378
00:17:33,320 --> 00:17:35,320
So first I go through this items thing,

379
00:17:35,320 --> 00:17:37,320
and you can't type it because it's dynamic.

380
00:17:37,320 --> 00:17:38,320
Then I have to cast it.

381
00:17:38,320 --> 00:17:41,320
Ah, I don't like casts.

382
00:17:41,320 --> 00:17:43,320
So then I really just wanted to do this.

383
00:17:43,320 --> 00:17:46,320
Give me the brisket taco from my order.

384
00:17:46,320 --> 00:17:48,320
And so, OK, you write a property.

385
00:17:48,320 --> 00:17:49,320
Now we've isolated the cast.

386
00:17:49,320 --> 00:17:53,320
The user doesn't cast the property does.

387
00:17:53,320 --> 00:17:55,320
And that looks pretty good, right?

388
00:17:55,320 --> 00:17:58,320
Somebody once said, if you weren't paying attention in a meeting

389
00:17:58,320 --> 00:18:03,320
and they ask you a question, just go, hmm, but does it scale?

390
00:18:03,320 --> 00:18:04,320
No.

391
00:18:04,320 --> 00:18:07,320
It only fits on a slide because it made it smaller.

392
00:18:07,320 --> 00:18:09,320
Here's brisket taco and bean and cheese taco

393
00:18:09,320 --> 00:18:11,320
and mac and cheese and baked beans.

394
00:18:11,320 --> 00:18:13,320
And apparently I'm talking before lunch and dinner

395
00:18:13,320 --> 00:18:15,320
and making you very hungry.

396
00:18:15,320 --> 00:18:17,320
So won't somebody think of the brisket taco?

397
00:18:17,320 --> 00:18:19,320
Probably Rudy of Rudy's Tacos.

398
00:18:19,320 --> 00:18:20,320
I don't know.

399
00:18:20,320 --> 00:18:23,320
Wouldn't it be cool if I could write this?

400
00:18:23,320 --> 00:18:28,320
And you can, because I'm on a stage talking about descriptors.

401
00:18:28,320 --> 00:18:31,320
So descriptors come in three little magic methods.

402
00:18:31,320 --> 00:18:32,320
The first is Dunder Git.

403
00:18:32,320 --> 00:18:33,320
I won't tell you the second.

404
00:18:33,320 --> 00:18:34,320
It's Dunder Set.

405
00:18:34,320 --> 00:18:35,320
I'm not even going to show it.

406
00:18:35,320 --> 00:18:36,320
And it looks like this.

407
00:18:36,320 --> 00:18:38,320
You take the instance, which on this slide

408
00:18:38,320 --> 00:18:41,320
was the menu item instance that is brisket taco.

409
00:18:41,320 --> 00:18:43,320
It's that class attribute.

410
00:18:43,320 --> 00:18:47,320
The second thing is either going to be the instance being operated on,

411
00:18:47,320 --> 00:18:49,320
in this case my order, or if it's a class attribute,

412
00:18:49,320 --> 00:18:51,320
you're accessing it like that, then it's none.

413
00:18:51,320 --> 00:18:54,320
And then you get the class always unconditionally.

414
00:18:54,320 --> 00:18:56,320
And this is, for some reason, the defaults to none.

415
00:18:56,320 --> 00:18:57,320
That's what Python docs say.

416
00:18:57,320 --> 00:18:58,320
Don't ask me why.

417
00:18:58,320 --> 00:18:59,320
So this is great.

418
00:18:59,320 --> 00:19:01,320
This is the other half of that handshake of,

419
00:19:01,320 --> 00:19:03,320
hey, how do you get my attributes?

420
00:19:03,320 --> 00:19:06,320
Certain things get to say, well, how do you get me?

421
00:19:06,320 --> 00:19:07,320
So great.

422
00:19:07,320 --> 00:19:10,320
If object isn't none, if there's an order I'm operating on,

423
00:19:10,320 --> 00:19:12,320
I'm going to use the git adder thing.

424
00:19:12,320 --> 00:19:13,320
Oh, wait.

425
00:19:13,320 --> 00:19:15,320
I don't have a name.

426
00:19:15,320 --> 00:19:18,320
Because these were one instance for all of them.

427
00:19:18,320 --> 00:19:20,320
Ah, somebody thought of this.

428
00:19:20,320 --> 00:19:23,320
It's under set name, where we set our name.

429
00:19:23,320 --> 00:19:25,320
And this gets called right here at the end,

430
00:19:25,320 --> 00:19:27,320
when you're done defining your class.

431
00:19:27,320 --> 00:19:29,320
It'll call set name for all of them.

432
00:19:29,320 --> 00:19:31,320
So let's do the other half.

433
00:19:31,320 --> 00:19:32,320
Oh, sorry.

434
00:19:32,320 --> 00:19:33,320
No, we filled in the name.

435
00:19:33,320 --> 00:19:34,320
Yay, we have a name now.

436
00:19:34,320 --> 00:19:35,320
You can access me.

437
00:19:35,320 --> 00:19:38,320
Wee.

438
00:19:38,320 --> 00:19:40,320
Now we need to register the options.

439
00:19:40,320 --> 00:19:41,320
This part's mostly just plumbing.

440
00:19:41,320 --> 00:19:44,320
If the object is none, you called it on the class and not the instance.

441
00:19:44,320 --> 00:19:47,320
And then maybe the menu superclass gets to go ahead

442
00:19:47,320 --> 00:19:49,320
and access all of the attributes of that subclass.

443
00:19:49,320 --> 00:19:53,320
And if it's this magic registration object, yeah, yeah, yeah, it's plumbing.

444
00:19:53,320 --> 00:19:56,320
The cool thing is that I can sprinkle in a little bit of typing, like a generic.

445
00:19:56,320 --> 00:19:59,320
And I have this code.

446
00:19:59,320 --> 00:20:00,320
It's what?

447
00:20:00,320 --> 00:20:02,320
Seven lines.

448
00:20:02,320 --> 00:20:04,320
And now I can do the thing I want to do.

449
00:20:04,320 --> 00:20:06,320
And it's typed in.

450
00:20:06,320 --> 00:20:08,320
I think that's my last slide.

451
00:20:08,320 --> 00:20:10,320
Descriptors.

452
00:20:10,320 --> 00:20:12,320
Very nice.

453
00:20:12,320 --> 00:20:14,320
That would mean next up is Leon Vance.

454
00:20:14,320 --> 00:20:16,320
How's that sounding?

455
00:20:16,320 --> 00:20:18,320
That was close enough.

456
00:20:18,320 --> 00:20:20,320
All right.

457
00:20:20,320 --> 00:20:22,320
AV roulette.

458
00:20:22,320 --> 00:20:24,320
Let's go.

459
00:20:24,320 --> 00:20:26,320
Ooh.

460
00:20:26,320 --> 00:20:28,320
Ooh.

461
00:20:28,320 --> 00:20:38,320
Bit, bit.

462
00:20:38,320 --> 00:20:40,320
Bit, bit.

463
00:20:40,320 --> 00:20:42,320
Bit, bit.

464
00:20:42,320 --> 00:20:44,320
Bit.

465
00:20:44,320 --> 00:20:46,320
Bit.

466
00:20:46,320 --> 00:20:48,320
Bit.

467
00:20:48,320 --> 00:20:50,320
Bit.

468
00:20:50,320 --> 00:20:52,320
Bit.

469
00:20:52,320 --> 00:21:07,760
All right, hello, nice to meet you all.

470
00:21:07,760 --> 00:21:11,160
My name's Leon Vanstone, head of software at Green Software.

471
00:21:11,160 --> 00:21:14,520
I know most of you are worried I'm probably a hippie.

472
00:21:14,520 --> 00:21:17,640
Don't worry, it's also cheap software.

473
00:21:17,640 --> 00:21:20,680
I've spoken to enough CTOs and CIOs

474
00:21:20,680 --> 00:21:22,800
to know that's the only way they're going to do this.

475
00:21:22,800 --> 00:21:24,280
And a quick shout out, thank you, Amy.

476
00:21:24,280 --> 00:21:26,120
Thank you, Chris, for kind of making the big point

477
00:21:26,120 --> 00:21:29,200
about the value of refactoring and well-maintained codes

478
00:21:29,200 --> 00:21:31,040
and the very real cost of tech debt.

479
00:21:31,040 --> 00:21:33,080
So I'll give you a quick introduction to Green Software.

480
00:21:33,080 --> 00:21:34,720
And if anyone wants to then come

481
00:21:34,720 --> 00:21:37,560
and have angry conversations with me, please do.

482
00:21:37,560 --> 00:21:39,160
All right, so to give you a bit of context

483
00:21:39,160 --> 00:21:41,920
to why we should even care about Green Software.

484
00:21:43,440 --> 00:21:46,480
Global computing, according to Chowdhury et al 22,

485
00:21:46,480 --> 00:21:48,240
global computing is going to use about 10%

486
00:21:48,240 --> 00:21:49,320
of all the power in the world,

487
00:21:49,320 --> 00:21:51,080
which is honestly mind boggling.

488
00:21:51,080 --> 00:21:54,800
If global computing was a country,

489
00:21:54,800 --> 00:21:56,440
it would be the third largest consumer

490
00:21:56,440 --> 00:21:57,360
of power in the world.

491
00:21:57,360 --> 00:22:00,560
It would go China, America, and then global compute.

492
00:22:00,560 --> 00:22:05,320
And this study was done before CHET GPT blew everything up.

493
00:22:05,320 --> 00:22:07,640
So this could well be 20% at this point.

494
00:22:07,640 --> 00:22:10,360
This is also going to result in about 5 billion tons

495
00:22:10,360 --> 00:22:12,040
of CO2 going into the atmosphere,

496
00:22:12,040 --> 00:22:14,440
about 5% from the whole world,

497
00:22:14,440 --> 00:22:17,960
which is about as much CO2 as contributed by all cars,

498
00:22:17,960 --> 00:22:20,680
fossil fuel burning cars in the world will be equivalent.

499
00:22:20,680 --> 00:22:22,920
You thought Bitcoin was bad, you just wait.

500
00:22:22,920 --> 00:22:25,160
People will be like, I don't do my computing in the cloud.

501
00:22:25,160 --> 00:22:26,480
I do it all at the edge.

502
00:22:26,480 --> 00:22:27,800
I also drive a Prius.

503
00:22:29,520 --> 00:22:31,400
So Green Software, some quick things then.

504
00:22:31,400 --> 00:22:33,640
So basically Green Software is cheap software,

505
00:22:33,640 --> 00:22:35,400
but the problem is you cannot change what you do not measure.

506
00:22:35,400 --> 00:22:36,880
If you're not actually,

507
00:22:36,880 --> 00:22:39,040
and there are very few tools for this,

508
00:22:39,040 --> 00:22:40,200
and come talk to me afterwards

509
00:22:40,200 --> 00:22:41,040
if you want to learn more about that.

510
00:22:41,040 --> 00:22:43,840
But the real truth is most code

511
00:22:43,840 --> 00:22:46,760
is not especially well optimized at all.

512
00:22:46,760 --> 00:22:50,480
New features, bug changes, typically pretty priority.

513
00:22:50,480 --> 00:22:52,960
And the unfortunate truth of that is that,

514
00:22:52,960 --> 00:22:54,360
tech debt is obviously just annoying

515
00:22:54,360 --> 00:22:56,480
if you're trying to maintain a code base.

516
00:22:56,480 --> 00:22:58,440
But in fact, it has a very real cost

517
00:22:58,440 --> 00:22:59,960
in CO2 emission associated with it.

518
00:22:59,960 --> 00:23:02,440
Like a dollar cost and a grams of CO2 emission

519
00:23:02,440 --> 00:23:04,360
associated with that tech debt.

520
00:23:04,360 --> 00:23:06,880
And that is a problem in lieu of the numbers

521
00:23:06,880 --> 00:23:08,400
that I just showed you.

522
00:23:08,400 --> 00:23:11,920
And what's more, because there are no tools out there

523
00:23:11,920 --> 00:23:14,400
for any of you developers,

524
00:23:14,400 --> 00:23:17,480
most people believe that faster is better for software.

525
00:23:17,480 --> 00:23:19,920
And this isn't actually necessarily true.

526
00:23:19,920 --> 00:23:21,080
And just to give you some idea of this,

527
00:23:21,080 --> 00:23:23,560
we got 36 very unfortunate developers

528
00:23:23,560 --> 00:23:26,760
to agree to answer the same challenge.

529
00:23:26,760 --> 00:23:28,600
And we got 36 solutions.

530
00:23:28,600 --> 00:23:30,080
All of them are functionally identical.

531
00:23:30,080 --> 00:23:31,920
They take the same input and they produce the same output.

532
00:23:31,920 --> 00:23:33,720
And those numbers are very small.

533
00:23:33,720 --> 00:23:36,400
So the lowest number, the most power efficient version

534
00:23:36,400 --> 00:23:39,840
that answered this took 24 joules of power

535
00:23:39,840 --> 00:23:41,880
and the worst one took 243.

536
00:23:41,920 --> 00:23:44,520
It's the 10X difference, right?

537
00:23:44,520 --> 00:23:46,920
And it's just without any tools to measure any of this,

538
00:23:46,920 --> 00:23:48,960
you just have no idea.

539
00:23:48,960 --> 00:23:51,960
Speed is intuitive, power consumption, not so much.

540
00:23:51,960 --> 00:23:54,520
We went back and we asked, do we got 10?

541
00:23:54,520 --> 00:23:56,160
Apparently the coding challenge wasn't great fun

542
00:23:56,160 --> 00:23:57,480
because only 10 of them have agreed

543
00:23:57,480 --> 00:23:59,120
to then do it a second time.

544
00:23:59,120 --> 00:24:01,040
We gave them some tools to measure power.

545
00:24:01,040 --> 00:24:03,040
Some of them got 60% power saving.

546
00:24:03,040 --> 00:24:06,160
Some of them got 10, 30 is about the average.

547
00:24:06,160 --> 00:24:11,120
So, you know, why I find this very motivating

548
00:24:11,120 --> 00:24:14,360
is globally you're looking at about 10% power,

549
00:24:14,360 --> 00:24:17,600
5% CO2 pool from something we all really believe in,

550
00:24:17,600 --> 00:24:18,440
I think.

551
00:24:18,440 --> 00:24:20,320
Yeah, computing is important, AI is important.

552
00:24:20,320 --> 00:24:22,720
These are tools, we should not abandon them.

553
00:24:22,720 --> 00:24:26,920
But the sheer cost of doing this, of using that much power,

554
00:24:26,920 --> 00:24:29,040
the capacity is limiting, right?

555
00:24:29,040 --> 00:24:31,200
If you're not optimal, if you're not optimizing,

556
00:24:31,200 --> 00:24:32,120
you're losing out.

557
00:24:32,120 --> 00:24:35,040
And obviously, you know, I also like breathing

558
00:24:36,000 --> 00:24:36,960
and eating food.

559
00:24:36,960 --> 00:24:38,600
And those are gonna be difficult

560
00:24:38,600 --> 00:24:40,560
as we continue to damage our environment.

561
00:24:40,560 --> 00:24:42,640
And there is this very real opportunity

562
00:24:42,640 --> 00:24:44,240
for all of us to come together

563
00:24:44,240 --> 00:24:46,480
and sort of push forward for the tools

564
00:24:46,480 --> 00:24:50,080
to save about 3% of that, 3% of the world's power,

565
00:24:50,080 --> 00:24:53,480
which is about the amount of power used by all of Japan.

566
00:24:53,480 --> 00:24:54,880
That's the opportunity that's in front of us.

567
00:24:54,880 --> 00:24:56,760
So if anyone wants to learn more about that, come find me.

568
00:24:56,760 --> 00:24:59,000
I'm sure I'll be stood around in the networking event.

569
00:24:59,000 --> 00:25:00,200
Thank you very much.

570
00:25:00,200 --> 00:25:02,340
Thank you so much.

571
00:25:02,340 --> 00:25:03,180
Thank you.

572
00:25:18,180 --> 00:25:20,480
Last, but certainly not least, Eric Adams.

573
00:25:21,200 --> 00:25:22,760
What's up, party people?

574
00:25:22,760 --> 00:25:24,040
Hi, my name is Eric.

575
00:25:24,840 --> 00:25:28,800
This is my quick pitch

576
00:25:28,800 --> 00:25:31,760
for a piece of open source software called Seat Dealer.

577
00:25:31,760 --> 00:25:34,640
So I've been running a local poker game every Saturday

578
00:25:34,640 --> 00:25:36,560
for about the last two years.

579
00:25:36,560 --> 00:25:41,080
So about 200 people have at some point come through my door.

580
00:25:41,080 --> 00:25:43,600
And every week, that means I'm sending out

581
00:25:43,600 --> 00:25:46,000
a handful of invites to try to get a number of people

582
00:25:46,000 --> 00:25:47,240
to say yes.

583
00:25:47,240 --> 00:25:50,040
Once I hit that number, I really can't take any more people.

584
00:25:50,040 --> 00:25:51,320
There's not room at the table.

585
00:25:51,320 --> 00:25:53,760
There's not really room to hang out.

586
00:25:53,760 --> 00:25:57,920
So I thought, you know, I have some extra time.

587
00:25:57,960 --> 00:26:01,160
I want to learn Terraform and GitHub Actions

588
00:26:01,160 --> 00:26:03,160
and a handful of other technologies.

589
00:26:03,160 --> 00:26:05,720
So why not just solve this problem for myself?

590
00:26:05,720 --> 00:26:09,680
So I'm writing an application that will fire off SMS messages

591
00:26:09,680 --> 00:26:12,260
kind of every few hours in small rounds

592
00:26:12,260 --> 00:26:13,560
until enough people say yes

593
00:26:13,560 --> 00:26:15,840
and then stop firing off those invites.

594
00:26:15,840 --> 00:26:19,400
If that sounds interesting to you, meet me at the stage.

595
00:26:19,400 --> 00:26:20,640
Bye.

596
00:26:20,960 --> 00:26:21,800
Thank you.

597
00:26:21,800 --> 00:26:22,640
Thank you.

598
00:26:22,640 --> 00:26:23,460
Thank you.

599
00:26:23,460 --> 00:26:24,300
Thank you.

