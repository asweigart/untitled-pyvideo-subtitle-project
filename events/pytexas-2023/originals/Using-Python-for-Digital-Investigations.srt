1
00:00:00,000 --> 00:00:03,360
All right, so thanks so much for sticking around.

2
00:00:03,360 --> 00:00:06,440
I know it's been a long weekend with a lot of great talks.

3
00:00:06,440 --> 00:00:09,400
I was at PyTexas 2019, but this is my first time

4
00:00:09,400 --> 00:00:11,160
speaking at one.

5
00:00:11,160 --> 00:00:11,660
Yeah.

6
00:00:11,660 --> 00:00:19,880
So my talk is going to be a bit different than the ones

7
00:00:19,880 --> 00:00:21,040
you've heard before.

8
00:00:21,040 --> 00:00:23,440
I'm going to talk to you today about how you can use Python

9
00:00:23,440 --> 00:00:25,720
for digital investigations.

10
00:00:25,720 --> 00:00:27,800
First, I'm going to talk to you about what

11
00:00:27,800 --> 00:00:30,680
a digital investigation is in this context.

12
00:00:30,680 --> 00:00:34,000
Then I'm going to show you an example

13
00:00:34,000 --> 00:00:35,360
of a digital investigation.

14
00:00:35,360 --> 00:00:39,000
I'll show you some Python tools that my colleagues and I

15
00:00:39,000 --> 00:00:41,600
have used for digital investigations.

16
00:00:41,600 --> 00:00:43,720
And I'll close with some more information

17
00:00:43,720 --> 00:00:45,960
in case you're interested and want to get more involved.

18
00:00:54,880 --> 00:00:57,000
All right, so I've been programming

19
00:00:57,000 --> 00:00:59,120
with Python for about 10 years now.

20
00:00:59,120 --> 00:01:02,960
I learned it in college, mostly for computational physics.

21
00:01:02,960 --> 00:01:05,880
In my current job, I am a data scientist and developer

22
00:01:05,880 --> 00:01:08,760
at Bellingcat, where I do a lot of large-scale social media

23
00:01:08,760 --> 00:01:11,920
scraping and analysis and developing software tools

24
00:01:11,920 --> 00:01:14,880
for journalists and researchers to use.

25
00:01:14,880 --> 00:01:17,720
I'm particularly interested in far-right extremist communities

26
00:01:17,720 --> 00:01:19,960
online, and a lot of my research focuses on that.

27
00:01:20,280 --> 00:01:24,520
So Bellingcat is a nonprofit investigative research

28
00:01:24,520 --> 00:01:26,840
collective founded in 2014.

29
00:01:26,840 --> 00:01:29,240
We use open source data to investigate

30
00:01:29,240 --> 00:01:31,240
a wide variety of topics, including

31
00:01:31,240 --> 00:01:33,640
human rights abuses, environmental issues,

32
00:01:33,640 --> 00:01:37,240
wrongdoings by the powerful, the radical fringes of society,

33
00:01:37,240 --> 00:01:39,120
and just about everything in between.

34
00:01:39,120 --> 00:01:42,840
We publish stories, develop novel investigative methods.

35
00:01:42,840 --> 00:01:45,520
We share those methods with journalists and researchers,

36
00:01:45,520 --> 00:01:47,560
and foster a community of journalists

37
00:01:47,560 --> 00:01:50,560
and researchers, and foster a community of people

38
00:01:50,560 --> 00:01:53,240
who use those methods.

39
00:01:53,240 --> 00:01:55,040
If you've heard of Bellingcat before,

40
00:01:55,040 --> 00:01:56,800
it was probably when we identified

41
00:01:56,800 --> 00:02:00,000
the Russian intelligence agents who

42
00:02:00,000 --> 00:02:04,400
poisoned the dissident Alexei Navalny, or something similar.

43
00:02:04,400 --> 00:02:04,900
Yeah.

44
00:02:10,040 --> 00:02:13,080
So what is a digital investigation?

45
00:02:13,080 --> 00:02:15,840
You might also hear the term open source research, which

46
00:02:15,840 --> 00:02:17,360
I'll be using throughout this talk,

47
00:02:17,360 --> 00:02:21,600
or open source intelligence, often abbreviated as OSINT.

48
00:02:21,600 --> 00:02:23,960
The big idea here is that this is information that

49
00:02:23,960 --> 00:02:25,880
is available to the public.

50
00:02:25,880 --> 00:02:28,640
Everyone has equal access to the information sources.

51
00:02:28,640 --> 00:02:30,600
They're not classified by government

52
00:02:30,600 --> 00:02:35,400
or locked away in some company's proprietary database.

53
00:02:35,400 --> 00:02:39,200
And the key thing about this is that the equal access

54
00:02:39,200 --> 00:02:43,000
to information sources enables a great deal of transparency.

55
00:02:43,000 --> 00:02:46,000
Investigative methods can be shared.

56
00:02:46,040 --> 00:02:47,800
This increases accountability.

57
00:02:47,800 --> 00:02:52,040
Anyone can verify the steps that researchers have taken,

58
00:02:52,040 --> 00:02:55,280
which in turn helps in reproducibility.

59
00:02:55,280 --> 00:02:59,040
Investigations can be confirmed and expanded upon by others.

60
00:02:59,040 --> 00:03:01,200
And these kinds of open source investigations

61
00:03:01,200 --> 00:03:05,080
have really only been around for about the last decade or so.

62
00:03:05,080 --> 00:03:06,960
Previously, a lot of sources were really only

63
00:03:06,960 --> 00:03:08,700
available to the intelligence agencies

64
00:03:08,700 --> 00:03:10,200
of powerful governments.

65
00:03:10,200 --> 00:03:13,400
But now, many of those sources are available to anyone.

66
00:03:13,400 --> 00:03:15,880
For example, right now, if you have about $100,

67
00:03:15,880 --> 00:03:18,360
you can buy a satellite image of anywhere

68
00:03:18,360 --> 00:03:20,520
in the world with sub-meter resolution.

69
00:03:20,520 --> 00:03:25,160
And that's just something you really could not do 10 years ago.

70
00:03:25,160 --> 00:03:27,480
And as you may have heard or noticed,

71
00:03:27,480 --> 00:03:29,840
there is a lot of information on the internet.

72
00:03:29,840 --> 00:03:33,200
And that can make things challenging

73
00:03:33,200 --> 00:03:35,680
when you're digging around trying

74
00:03:35,680 --> 00:03:36,960
to find some specific content.

75
00:03:36,960 --> 00:03:40,680
But the upside of that is that the list of open sources

76
00:03:40,680 --> 00:03:41,640
is pretty much endless.

77
00:03:41,640 --> 00:03:44,440
The only real limit is the ingenuity of researchers.

78
00:03:48,840 --> 00:03:51,560
So some common examples of open source materials

79
00:03:51,560 --> 00:03:56,520
are geospatial sources, like Google or Yandex Maps, Google

80
00:03:56,520 --> 00:03:59,800
Earth, and satellite imagery.

81
00:03:59,800 --> 00:04:04,800
We have media outlets, BBC, CNN, Fox News, user generated,

82
00:04:04,800 --> 00:04:07,600
and social media content, like from YouTube, Twitter,

83
00:04:07,600 --> 00:04:10,720
and Telegram, and data sets.

84
00:04:10,720 --> 00:04:13,280
For example, for things like company registration

85
00:04:13,280 --> 00:04:16,440
and legal documents, as well as archives,

86
00:04:16,440 --> 00:04:19,120
like the internet archive.

87
00:04:19,120 --> 00:04:20,760
Often, the really interesting thing

88
00:04:20,760 --> 00:04:22,920
comes when you combine information

89
00:04:22,920 --> 00:04:25,400
from several of these sources.

90
00:04:25,400 --> 00:04:27,520
And also, it's worth mentioning that things

91
00:04:27,520 --> 00:04:29,040
like hacking, stealing, and spying

92
00:04:29,040 --> 00:04:30,320
are not considered open source.

93
00:04:30,320 --> 00:04:31,680
And Bell and Cat doesn't do those.

94
00:04:35,840 --> 00:04:39,200
So let's get into an example of an open source investigation.

95
00:04:39,200 --> 00:04:43,800
So on July 17, 2014, Malaysia Airlines Flight 17,

96
00:04:43,800 --> 00:04:48,040
known as MH17, which was flying from Amsterdam to Kuala Lumpur,

97
00:04:48,040 --> 00:04:50,840
was shot down over eastern Ukraine.

98
00:04:50,840 --> 00:04:53,200
All on board, nearly 300 passengers and crew

99
00:04:53,200 --> 00:04:54,640
were killed.

100
00:04:54,640 --> 00:04:56,640
In the immediate aftermath, the Russian government

101
00:04:56,640 --> 00:05:00,080
blamed the Ukraine, and the Ukrainian government

102
00:05:00,080 --> 00:05:02,400
blamed Russian-backed separatists in the region.

103
00:05:02,400 --> 00:05:04,600
If we don't want to trust either of these governments

104
00:05:04,600 --> 00:05:08,240
or their intelligence agencies, what can we

105
00:05:08,240 --> 00:05:11,880
learn from open sources?

106
00:05:11,880 --> 00:05:14,600
Turns out, we can learn quite a bit.

107
00:05:14,600 --> 00:05:17,840
So in the days before and after MH17 was shot down,

108
00:05:17,840 --> 00:05:20,000
there were several sightings of a military convoy

109
00:05:20,000 --> 00:05:22,080
near the location of the crash site

110
00:05:22,080 --> 00:05:24,080
that contained a missile launcher.

111
00:05:24,080 --> 00:05:26,680
Many of these sightings were posted on social media,

112
00:05:26,680 --> 00:05:30,080
such as this Instagram picture.

113
00:05:30,080 --> 00:05:32,640
And by determining the location of each of these sightings,

114
00:05:32,640 --> 00:05:34,520
researchers were able to piece together

115
00:05:34,520 --> 00:05:36,160
the movement of the missile launcher.

116
00:05:38,720 --> 00:05:41,400
So we're interested in this particular missile launcher

117
00:05:41,400 --> 00:05:44,800
from this particular convoy for a key reason.

118
00:05:44,800 --> 00:05:48,880
In footage before July 17, the launcher has four missiles.

119
00:05:48,880 --> 00:05:51,520
After July 17, it only has three.

120
00:05:51,520 --> 00:05:53,480
So this is suggestive that this is, in fact,

121
00:05:53,480 --> 00:05:54,800
the missile launcher we're looking

122
00:05:54,800 --> 00:05:59,440
for that shot down MH17.

123
00:05:59,440 --> 00:06:02,360
So an essential step when we're working with social media

124
00:06:02,360 --> 00:06:05,120
information and content is verification.

125
00:06:05,120 --> 00:06:07,800
Basically, does the image or video

126
00:06:07,800 --> 00:06:11,320
actually show what the post claims it shows?

127
00:06:11,320 --> 00:06:12,880
This is, there's a lot of things we

128
00:06:12,880 --> 00:06:14,280
need to watch out for with this.

129
00:06:14,280 --> 00:06:18,120
So for example, is the video a repost of an event that

130
00:06:18,120 --> 00:06:18,840
happened earlier?

131
00:06:18,840 --> 00:06:21,520
We see this in war footage all the time.

132
00:06:21,520 --> 00:06:23,320
Especially drone footage is constantly

133
00:06:23,320 --> 00:06:25,640
re-uploaded and recycled and claiming to be

134
00:06:25,640 --> 00:06:28,640
from the most recent conflict.

135
00:06:28,640 --> 00:06:32,560
Is the video generated by a video game or flight simulator?

136
00:06:32,560 --> 00:06:34,440
This is actually surprisingly common, especially

137
00:06:34,440 --> 00:06:36,840
in aerial footage.

138
00:06:36,840 --> 00:06:39,120
Has a video been deceptively edited, like slowed down,

139
00:06:39,120 --> 00:06:42,560
sped up, or had some other footage spliced in?

140
00:06:42,560 --> 00:06:44,840
And more recently, a more recent issue,

141
00:06:44,840 --> 00:06:47,160
was this generated by AI or mid, like mid-journey?

142
00:06:47,160 --> 00:06:49,560
Does everyone have the right number of fingers and legs?

143
00:06:52,680 --> 00:06:54,800
So luckily, there are some well-established methods

144
00:06:54,800 --> 00:06:56,480
for investigating each of these points,

145
00:06:56,480 --> 00:06:58,320
but we don't have a ton of time for that.

146
00:06:58,320 --> 00:07:00,000
So let's just focus on one of them.

147
00:07:00,000 --> 00:07:03,000
Is the location where the post claims

148
00:07:03,000 --> 00:07:05,840
the actual location of the video?

149
00:07:05,840 --> 00:07:09,040
So what we see here, in the top, we

150
00:07:09,040 --> 00:07:12,320
have a screenshot from Google Street View.

151
00:07:12,320 --> 00:07:17,320
And at the bottom, we have the video of the missile launcher,

152
00:07:17,320 --> 00:07:18,600
as well as an instant.

153
00:07:18,600 --> 00:07:21,080
And if you're in Google Street View,

154
00:07:21,080 --> 00:07:24,320
you can adjust the viewpoint, and you can kind of line up

155
00:07:24,320 --> 00:07:26,880
the viewport with the actual video.

156
00:07:26,880 --> 00:07:32,720
And we can see, OK, so there's a poll that looks about right.

157
00:07:32,760 --> 00:07:34,040
There's another telephone poll.

158
00:07:34,040 --> 00:07:37,520
The intersections of the wires on the poll look about right.

159
00:07:37,520 --> 00:07:40,000
The outline of the trees also looks right.

160
00:07:40,000 --> 00:07:41,760
So we can say, OK, it's plausible

161
00:07:41,760 --> 00:07:44,440
that this video was, in fact, taken

162
00:07:44,440 --> 00:07:46,480
at this particular location.

163
00:07:46,480 --> 00:07:49,640
And in practice, geolocating footage

164
00:07:49,640 --> 00:07:51,980
often requires either very detailed knowledge

165
00:07:51,980 --> 00:07:55,160
of a particular location, being very clever,

166
00:07:55,160 --> 00:07:58,360
or just brute forcing it and spending a bunch of time

167
00:07:58,360 --> 00:07:59,680
driving around Google Street View

168
00:07:59,680 --> 00:08:02,480
or flying around Google Earth.

169
00:08:02,520 --> 00:08:04,120
But the key point is that no matter

170
00:08:04,120 --> 00:08:11,080
how difficult and long it took to geolocate some footage,

171
00:08:11,080 --> 00:08:13,080
pretty much anyone can verify it.

172
00:08:13,080 --> 00:08:15,440
It really doesn't require much specialized skill

173
00:08:15,440 --> 00:08:20,440
to look at a location in Google Street View, look at a video,

174
00:08:20,440 --> 00:08:22,720
and be able to say, oh, yeah, this, this, and this match up.

175
00:08:22,720 --> 00:08:24,920
Or conversely, to say, oh, no, this doesn't match up

176
00:08:24,920 --> 00:08:26,520
because of this and this.

177
00:08:26,520 --> 00:08:29,360
So it's very much a democratization

178
00:08:29,360 --> 00:08:31,160
of an investigation.

179
00:08:34,360 --> 00:08:36,720
So the key point is by geolocating

180
00:08:36,720 --> 00:08:38,400
each of the sidings of this convoy,

181
00:08:38,400 --> 00:08:41,040
both in Ukraine immediately before and after the shoot

182
00:08:41,040 --> 00:08:43,600
down and in Russia about a month earlier,

183
00:08:43,600 --> 00:08:47,240
researchers were able to convincingly argue that A,

184
00:08:47,240 --> 00:08:51,440
that the missile launcher traveled from Russia to Ukraine

185
00:08:51,440 --> 00:08:54,000
to an area controlled by Russian-backed separatists

186
00:08:54,000 --> 00:08:55,880
and then after the shoot down traveled back

187
00:08:55,880 --> 00:08:58,240
with one less missile.

188
00:08:58,240 --> 00:09:01,280
They were also able to determine the Russian unit

189
00:09:01,280 --> 00:09:04,400
the missile launcher belonged to and all these findings

190
00:09:04,400 --> 00:09:07,160
were later corroborated by the official investigation

191
00:09:07,160 --> 00:09:09,240
by the Dutch government.

192
00:09:09,240 --> 00:09:10,760
And to reiterate, this was all done

193
00:09:10,760 --> 00:09:12,640
without having to trust the word or propaganda

194
00:09:12,640 --> 00:09:15,400
of any intelligence agencies or government.

195
00:09:15,400 --> 00:09:17,000
And this is just one example of the power

196
00:09:17,000 --> 00:09:18,000
of open source research.

197
00:09:20,920 --> 00:09:23,240
So a common source of confusion is

198
00:09:23,240 --> 00:09:25,560
the similarity of the terms open source research

199
00:09:25,560 --> 00:09:27,280
and open source software.

200
00:09:27,280 --> 00:09:29,640
I intentionally use the term digital investigation

201
00:09:29,640 --> 00:09:31,760
in my talk to avoid confusing you all

202
00:09:31,760 --> 00:09:34,080
because I assume most of you are familiar with open source

203
00:09:34,080 --> 00:09:36,560
in the context of software, not research.

204
00:09:37,840 --> 00:09:39,720
And though the two terms sound similar,

205
00:09:39,720 --> 00:09:41,880
they have very different origins.

206
00:09:41,880 --> 00:09:45,160
The term open source intelligence OSINT really originated

207
00:09:45,160 --> 00:09:48,440
in the US and British intelligence communities

208
00:09:48,440 --> 00:09:49,960
as kind of a catchall term

209
00:09:49,960 --> 00:09:52,280
for non-classified sources of information.

210
00:09:53,800 --> 00:09:55,320
Despite the different histories though,

211
00:09:55,960 --> 00:09:57,640
the two communities have really independently converged

212
00:09:57,640 --> 00:10:00,960
on a similar ethos, really built on transparency,

213
00:10:00,960 --> 00:10:03,280
reproducibility and collaboration.

214
00:10:03,280 --> 00:10:07,360
And kind of going back to Krishy's talk yesterday,

215
00:10:07,360 --> 00:10:09,680
all these are ways of kind of building

216
00:10:09,680 --> 00:10:11,160
and establishing trust.

217
00:10:12,240 --> 00:10:14,080
And in the last few years especially,

218
00:10:14,080 --> 00:10:16,360
the overlap between the two communities,

219
00:10:16,360 --> 00:10:17,600
the open source research community

220
00:10:17,600 --> 00:10:20,920
and the open source software community have been,

221
00:10:20,920 --> 00:10:23,360
there's have, the overlap has been increasing.

222
00:10:23,400 --> 00:10:25,640
And this is really driven by two factors.

223
00:10:25,640 --> 00:10:28,560
One is that open source researchers

224
00:10:28,560 --> 00:10:32,560
and journalists get more familiar with software tools.

225
00:10:32,560 --> 00:10:35,640
For example, learning how to run Python scripts

226
00:10:35,640 --> 00:10:39,400
or use the command line to automate some of their tasks

227
00:10:39,400 --> 00:10:40,480
like the boring ones.

228
00:10:41,920 --> 00:10:44,440
And at the same time,

229
00:10:44,440 --> 00:10:47,040
developers find out about open source research.

230
00:10:47,040 --> 00:10:49,400
They think it's cool, so they start developing tools for it.

231
00:10:49,400 --> 00:10:51,360
And that's kind of the path that I took.

232
00:10:52,320 --> 00:10:53,320
It's worth mentioning though

233
00:10:53,320 --> 00:10:55,920
that there is still a long way to go.

234
00:10:55,920 --> 00:10:58,160
Bellingcat surveyed researchers

235
00:10:58,160 --> 00:11:00,000
and found that only about a quarter of them

236
00:11:00,000 --> 00:11:03,880
are comfortable using software tools from sites like GitHub.

237
00:11:03,880 --> 00:11:07,400
And that tells us that there's a lot of opportunities

238
00:11:07,400 --> 00:11:09,920
both for education and for making tools

239
00:11:09,920 --> 00:11:11,520
more accessible and easy to use.

240
00:11:13,360 --> 00:11:16,280
So Python has become the go-to programming language

241
00:11:16,280 --> 00:11:18,920
of the open source research community

242
00:11:18,920 --> 00:11:21,200
for many of the same reasons that you all like it.

243
00:11:22,040 --> 00:11:23,160
I'm assuming here that you all like Python

244
00:11:23,160 --> 00:11:24,800
since you're at a Python convention,

245
00:11:24,800 --> 00:11:27,240
but if not, sorry to hear that.

246
00:11:28,360 --> 00:11:30,600
So I mean, as we know, Python is easy to learn,

247
00:11:30,600 --> 00:11:32,920
especially as the first programming language.

248
00:11:32,920 --> 00:11:36,040
And it has a very mature ecosystem of packages

249
00:11:36,040 --> 00:11:37,640
for just about any purpose,

250
00:11:37,640 --> 00:11:41,280
from web scraping to image analysis to 3D modeling.

251
00:11:45,400 --> 00:11:47,320
So the first Python tool I wanna talk to you about

252
00:11:47,320 --> 00:11:48,920
is the auto-archiver developed

253
00:11:48,920 --> 00:11:51,160
by some of my colleagues at Bellingcat.

254
00:11:52,120 --> 00:11:55,400
It automatically archives posts, images, and video

255
00:11:55,400 --> 00:11:58,320
from a variety of social media platforms.

256
00:11:58,320 --> 00:12:00,600
The way it works is that researchers paste a URL

257
00:12:00,600 --> 00:12:03,120
of a social media post into a Google Sheet,

258
00:12:03,120 --> 00:12:05,800
and then any media, metadata, and a screenshot of the post

259
00:12:05,800 --> 00:12:08,240
is automatically downloaded and saved.

260
00:12:08,240 --> 00:12:10,320
And we wanted to make this interface

261
00:12:10,320 --> 00:12:13,200
as easy to use as possible for non-technical researchers.

262
00:12:13,200 --> 00:12:14,880
Simple is better than complex.

263
00:12:15,720 --> 00:12:18,440
And this kind of archiving is actually really important

264
00:12:18,440 --> 00:12:20,240
for sensitive social media content,

265
00:12:20,520 --> 00:12:23,480
all the time is that some social media account

266
00:12:23,480 --> 00:12:27,480
will post something that is interesting or revealing

267
00:12:27,480 --> 00:12:28,960
or just kind of spicy in some way,

268
00:12:28,960 --> 00:12:30,640
and then take it down as soon as they realize,

269
00:12:30,640 --> 00:12:32,560
hey, this makes me look bad.

270
00:12:32,560 --> 00:12:33,640
This is especially damaging

271
00:12:33,640 --> 00:12:37,480
if the thing that looks bad is a potential war crime.

272
00:12:37,480 --> 00:12:39,880
And when they take it down,

273
00:12:39,880 --> 00:12:42,760
all evidence of that content is now gone.

274
00:12:42,760 --> 00:12:46,800
However, if we have archived it, then we have it, right?

275
00:12:47,800 --> 00:12:51,160
So the auto archiver uses a mix of both official

276
00:12:51,160 --> 00:12:53,120
and unofficial social media APIs,

277
00:12:53,120 --> 00:12:55,040
basically whatever does the job the best,

278
00:12:55,040 --> 00:12:57,440
and you can check it out on our GitHub page here.

279
00:13:00,960 --> 00:13:04,080
So at Bellingcat, we use Google Sheets pretty extensively.

280
00:13:04,080 --> 00:13:06,720
They're easy to use and set up.

281
00:13:06,720 --> 00:13:08,400
They're easy to collaborate with,

282
00:13:08,400 --> 00:13:09,880
with non-technical people,

283
00:13:09,880 --> 00:13:11,800
and they're quick to read and adjust formatting,

284
00:13:11,800 --> 00:13:14,640
which is good for manually checking data.

285
00:13:14,640 --> 00:13:17,080
We typically use the Gspread Python package

286
00:13:17,080 --> 00:13:20,200
pretty extensively for reading and writing to Google Sheets.

287
00:13:21,120 --> 00:13:23,920
And what we have here is a screenshot

288
00:13:23,920 --> 00:13:26,160
of one of the inputs to the auto archiver

289
00:13:26,160 --> 00:13:28,320
that we have been using to track incidents

290
00:13:28,320 --> 00:13:30,280
of civilian harm in Ukraine,

291
00:13:30,280 --> 00:13:32,520
so such as attacks on infrastructure

292
00:13:32,520 --> 00:13:33,920
and against the population.

293
00:13:37,080 --> 00:13:40,080
So since the beginning of the Russian invasion last February,

294
00:13:40,080 --> 00:13:42,480
Bellingcat and volunteers have geolocated

295
00:13:42,480 --> 00:13:44,480
and verified more than a thousand incidents

296
00:13:44,480 --> 00:13:46,640
of civilian harm in Ukraine.

297
00:13:46,640 --> 00:13:50,040
Each incident can be visualized on our time map website.

298
00:13:50,040 --> 00:13:51,040
Let's try this live.

299
00:13:56,720 --> 00:13:57,560
Oh no.

300
00:14:07,320 --> 00:14:08,680
Ah, come on.

301
00:14:12,440 --> 00:14:13,280
All right, there we go.

302
00:14:13,280 --> 00:14:15,080
Third time's a charm, right?

303
00:14:15,080 --> 00:14:17,840
All right, so what we see here is a map of Ukraine,

304
00:14:17,840 --> 00:14:20,440
and we can see circles that represent

305
00:14:20,440 --> 00:14:23,200
all verified incidents over the last month.

306
00:14:23,200 --> 00:14:27,120
If we, sorry, if we click on one of these,

307
00:14:27,120 --> 00:14:29,960
it zooms in and focuses on the individual incidents.

308
00:14:31,160 --> 00:14:35,880
And if we click on one, we see that on March 9th,

309
00:14:35,880 --> 00:14:39,520
there was a strike on a industrial area.

310
00:14:39,520 --> 00:14:41,880
It's not loading right now, but I hope you believe me

311
00:14:41,880 --> 00:14:45,000
when I say that we have the telegram video of the strike

312
00:14:45,000 --> 00:14:45,920
for anyone to see.

313
00:14:46,800 --> 00:14:50,200
And I will say, sorry if this is a blasphemous thing to say,

314
00:14:50,200 --> 00:14:53,200
the front end is not Python, it is JavaScript,

315
00:14:53,200 --> 00:14:56,080
but the source of the data was all done in Python.

316
00:14:56,080 --> 00:14:58,640
And several other organizations are using the auto archiver

317
00:14:58,640 --> 00:15:00,400
for similar purposes.

318
00:15:00,400 --> 00:15:02,400
And one thing that's worth mentioning

319
00:15:02,400 --> 00:15:04,600
is that one thing Bellingcat has been working on

320
00:15:04,600 --> 00:15:08,640
is developing a methodology for making open source evidence,

321
00:15:08,640 --> 00:15:13,520
for making open source data accessible, excuse me,

322
00:15:13,520 --> 00:15:14,720
admissible as evidenced

323
00:15:14,720 --> 00:15:17,160
in international criminal law proceedings.

324
00:15:17,160 --> 00:15:20,280
The goal here is that the geolocated and verified footage

325
00:15:20,280 --> 00:15:22,400
that was archived by the auto archiver

326
00:15:22,400 --> 00:15:23,760
will one day be used to hold accountable

327
00:15:23,760 --> 00:15:25,040
members of the Russian military

328
00:15:25,040 --> 00:15:28,400
who were responsible for these attacks on civilians.

329
00:15:32,560 --> 00:15:33,400
Yeah.

330
00:15:33,400 --> 00:15:38,400
Another Python tool that Bellingcat has developed

331
00:15:41,640 --> 00:15:43,960
is a framework for scraping social media content,

332
00:15:43,960 --> 00:15:46,920
not just a single specified post like the auto archiver,

333
00:15:46,920 --> 00:15:49,640
but everything from a set of accounts or channels.

334
00:15:49,640 --> 00:15:52,360
We developed this framework as part of a data driven effort

335
00:15:52,360 --> 00:15:54,720
to better understand the ecosystem of QAnon

336
00:15:54,720 --> 00:15:58,840
and QAnon adjacent online conspiracy communities in Europe,

337
00:15:58,840 --> 00:16:01,320
because that's a big thing in Europe, believe it or not.

338
00:16:01,320 --> 00:16:02,360
We collected a lot of data.

339
00:16:02,400 --> 00:16:05,480
We have posts from five different social media platforms,

340
00:16:05,480 --> 00:16:08,760
including Getter, Rumble, BitChute, and VKontakte,

341
00:16:08,760 --> 00:16:10,720
which is like a Russian Facebook,

342
00:16:10,720 --> 00:16:12,280
but the vast majority are from Telegram

343
00:16:12,280 --> 00:16:13,440
because that's a platform

344
00:16:13,440 --> 00:16:15,840
these communities are most active on.

345
00:16:15,840 --> 00:16:18,840
We are archiving posts from about 2,600 channels.

346
00:16:18,840 --> 00:16:20,640
So by channel, I refer to really any kind

347
00:16:20,640 --> 00:16:21,520
of social media account.

348
00:16:21,520 --> 00:16:25,000
So BitChute user, a VKontakte group, or a Telegram channel.

349
00:16:26,000 --> 00:16:28,720
And as of last night, we're up to about 63 million posts

350
00:16:28,720 --> 00:16:31,480
that have been scraped, archived, and made searchable.

351
00:16:31,480 --> 00:16:35,360
The posts contain about 44 different languages,

352
00:16:35,360 --> 00:16:37,440
which have at least a hundred posts.

353
00:16:37,440 --> 00:16:40,040
We have nearly 6 million images

354
00:16:40,040 --> 00:16:41,600
that have been archived and OCRed.

355
00:16:41,600 --> 00:16:43,480
So we're using optical character recognition

356
00:16:43,480 --> 00:16:46,600
to detect and index text in image.

357
00:16:46,600 --> 00:16:48,560
And we have about 2 million videos.

358
00:16:51,000 --> 00:16:54,000
So the way this works is that the framework coordinates

359
00:16:54,000 --> 00:16:57,320
between the scrapers, the database, and the media archive.

360
00:16:57,320 --> 00:17:00,720
We use the SQLAlchemy package to interface with a database,

361
00:17:00,720 --> 00:17:03,240
the Elasticsearch package to interface

362
00:17:03,240 --> 00:17:05,600
with a full text search index.

363
00:17:05,600 --> 00:17:10,040
But we use Boto3 to archive content, PyTesseract for OCR,

364
00:17:10,040 --> 00:17:11,880
and Flask for the API that communicates

365
00:17:11,880 --> 00:17:13,320
with the front-end dashboard.

366
00:17:14,840 --> 00:17:16,200
Similar to the auto-archiver,

367
00:17:16,200 --> 00:17:18,640
researchers can paste the URL of a channel

368
00:17:18,640 --> 00:17:19,560
into a Google Sheet.

369
00:17:19,560 --> 00:17:22,120
And then the framework scrapes the raw social media posts

370
00:17:22,120 --> 00:17:23,880
in near real time.

371
00:17:23,880 --> 00:17:25,400
And in addition to scraping,

372
00:17:25,400 --> 00:17:27,520
we're archiving media files attached to post,

373
00:17:27,520 --> 00:17:29,720
which along with images and video can include things

374
00:17:29,720 --> 00:17:32,200
like audio and PDF documents.

375
00:17:32,200 --> 00:17:34,600
The scraping, archiving, and processing pipelines

376
00:17:34,600 --> 00:17:36,440
are constantly running.

377
00:17:36,440 --> 00:17:38,640
So even if a channel quickly deletes a post,

378
00:17:38,640 --> 00:17:41,280
there's a decent chance we'll still get it.

379
00:17:41,280 --> 00:17:43,120
The raw post is then cleaned and processed

380
00:17:43,120 --> 00:17:45,200
into a standard format across platforms,

381
00:17:45,200 --> 00:17:47,680
which makes it searchable through a front-end dashboard

382
00:17:47,680 --> 00:17:49,480
we created in JavaScript.

383
00:17:53,480 --> 00:17:55,480
So to better understand the overall structure

384
00:17:55,480 --> 00:17:57,800
of the ecosystem, I created some network visualizations

385
00:17:57,800 --> 00:17:58,640
from the data.

386
00:17:59,800 --> 00:18:01,600
Let's see if this works.

387
00:18:01,600 --> 00:18:02,840
Nice.

388
00:18:02,840 --> 00:18:06,320
All right, so this first network shows telegram forwards.

389
00:18:06,320 --> 00:18:10,520
So the nodes, the circles here, are telegram channels.

390
00:18:10,520 --> 00:18:12,720
Edges between nodes, the lines,

391
00:18:12,720 --> 00:18:15,000
are in one channel forwarded one or more posts

392
00:18:15,000 --> 00:18:16,600
from the other.

393
00:18:16,600 --> 00:18:21,120
The nodes are colored by the most commonly detected language

394
00:18:21,120 --> 00:18:23,320
in the channel's posts.

395
00:18:23,320 --> 00:18:28,320
So we have this German cluster in kind of teal.

396
00:18:28,720 --> 00:18:32,800
Teal, English and orange, Italian and blue,

397
00:18:32,800 --> 00:18:37,560
French and pink, and the node size is related

398
00:18:37,560 --> 00:18:39,720
to the number of followers the channel has.

399
00:18:40,640 --> 00:18:42,280
One nice thing about this network

400
00:18:42,280 --> 00:18:44,520
is that the clusters of nodes are very tight

401
00:18:44,520 --> 00:18:47,200
and correspond closely with the channel languages.

402
00:18:47,200 --> 00:18:48,320
I mean, this makes some sense, right?

403
00:18:48,320 --> 00:18:49,760
If you have a social media account,

404
00:18:49,760 --> 00:18:51,200
you're not gonna repost content

405
00:18:51,200 --> 00:18:53,680
from a language you don't understand.

406
00:18:53,680 --> 00:18:57,460
And an interesting thing is that the positions

407
00:18:57,460 --> 00:18:59,220
of the language clusters tell us

408
00:18:59,220 --> 00:19:00,940
about how the different language communities

409
00:19:00,940 --> 00:19:02,860
interact with each other.

410
00:19:02,860 --> 00:19:05,620
So as you can see, English is at the center

411
00:19:05,620 --> 00:19:08,340
of the visualization and it kind of acts as a hub

412
00:19:08,340 --> 00:19:11,140
that connects the different European languages.

413
00:19:11,140 --> 00:19:16,140
If we zoom in a bit, yeah, so this Dutch cluster,

414
00:19:17,220 --> 00:19:20,620
kind of in green here is very close to the English cluster

415
00:19:20,620 --> 00:19:22,060
indicating that there's a lot of overlap

416
00:19:22,060 --> 00:19:24,300
between the two communities.

417
00:19:24,300 --> 00:19:27,020
And one thing that I think is particularly interesting

418
00:19:27,020 --> 00:19:28,460
and useful about this kind of visualization

419
00:19:28,460 --> 00:19:30,580
is that we can identify some key nodes

420
00:19:30,580 --> 00:19:31,700
that stand between clusters.

421
00:19:31,700 --> 00:19:35,620
For example, this one we see, yeah, come on.

422
00:19:35,620 --> 00:19:38,780
We see a lot of nodes, edges coming in and out of this one

423
00:19:38,780 --> 00:19:41,060
that connect the English and French communities.

424
00:19:41,060 --> 00:19:43,580
So investigating bridge nodes like this

425
00:19:43,580 --> 00:19:47,540
can better inform how viral content moves

426
00:19:47,540 --> 00:19:49,660
between communities and across borders.

427
00:19:53,020 --> 00:19:53,860
See.

428
00:19:58,020 --> 00:20:01,180
Nice, all right, so in this second network,

429
00:20:01,180 --> 00:20:04,660
what we have, so the nodes are named entities.

430
00:20:04,660 --> 00:20:07,620
Basically, words that correspond to real world objects

431
00:20:07,620 --> 00:20:11,580
detected using spaCy, a natural language processing package

432
00:20:11,580 --> 00:20:12,400
in Python.

433
00:20:14,220 --> 00:20:18,220
And the edges are when one or more posts

434
00:20:18,220 --> 00:20:21,060
contains both named entities.

435
00:20:23,500 --> 00:20:25,740
Nodes are colored by a community detection algorithm

436
00:20:25,740 --> 00:20:27,940
that seeks to group together similar nodes.

437
00:20:29,460 --> 00:20:31,340
And this kind of visualization is really interesting

438
00:20:31,340 --> 00:20:33,140
to see how different topics relate to each other

439
00:20:33,140 --> 00:20:35,460
according to these conspiracy communities.

440
00:20:35,460 --> 00:20:37,820
There are a few clear clusters in the center.

441
00:20:37,820 --> 00:20:40,860
We have, in purple, we have this kind of US politics thing

442
00:20:40,860 --> 00:20:45,580
with various politicians, the FBI, and patriots.

443
00:20:46,640 --> 00:20:50,460
Over here, we have in green, kind of a more COVID one.

444
00:20:50,460 --> 00:20:55,060
We have things like COVID, WHO, Bill Gates, Anthony Fauci.

445
00:20:55,100 --> 00:20:57,620
And one thing I really like about this kind of visualization

446
00:20:57,620 --> 00:21:00,500
is that it's good for finding kind of niche topics

447
00:21:00,500 --> 00:21:01,340
in sub-communities.

448
00:21:01,340 --> 00:21:06,820
Like, for example, there's something called

449
00:21:06,820 --> 00:21:10,020
Schumann Residence, which is a geophysics phenomenon.

450
00:21:10,020 --> 00:21:11,460
It's commonly mentioned in weather

451
00:21:11,460 --> 00:21:12,940
and geoengineering conspiracies.

452
00:21:12,940 --> 00:21:15,940
And I hadn't heard of this before,

453
00:21:15,940 --> 00:21:18,700
and investigating that took me down a fun rabbit hole.

454
00:21:22,820 --> 00:21:23,660
Where did it go?

455
00:21:25,260 --> 00:21:27,460
All right, so the last tool I want to show you

456
00:21:27,460 --> 00:21:28,300
is called SugarTrail.

457
00:21:29,500 --> 00:21:31,020
It's used to find and analyze connections

458
00:21:31,020 --> 00:21:33,020
between companies registered in the United Kingdom

459
00:21:33,020 --> 00:21:35,300
in the Companies House database.

460
00:21:35,300 --> 00:21:36,940
SugarTrail was one of the winning projects

461
00:21:36,940 --> 00:21:38,460
in Bellingcat's first hackathon,

462
00:21:38,460 --> 00:21:40,420
and its developer continued to work on it

463
00:21:40,420 --> 00:21:42,900
funded by a Bellingcat Tech Fellowship,

464
00:21:42,900 --> 00:21:44,580
which we offer to developers of tools

465
00:21:44,580 --> 00:21:46,300
that we find interesting and useful.

466
00:21:49,740 --> 00:21:51,500
SugarTrail has an easy-to-use interface

467
00:21:51,500 --> 00:21:53,340
and a very simple way to use it.

468
00:21:53,340 --> 00:21:55,100
SugarTrail has an easy-to-use interface

469
00:21:55,100 --> 00:21:57,820
implemented using IPyWidgets that uses,

470
00:21:57,820 --> 00:22:00,900
it uses requests to interface with the Companies House API

471
00:22:00,900 --> 00:22:03,220
and pandas for data processing.

472
00:22:03,220 --> 00:22:05,900
You can see here, this is a screenshot of the interface,

473
00:22:05,900 --> 00:22:07,740
which was developed using IPyWidgets,

474
00:22:07,740 --> 00:22:09,700
which basically converts a Jupyter Notebook

475
00:22:09,700 --> 00:22:14,700
into a interactive webpage, which is quite cool.

476
00:22:19,260 --> 00:22:22,980
And SugarTrail, oh, oh God, okay.

477
00:22:22,980 --> 00:22:24,980
So SugarTrail can do several types of investigations,

478
00:22:24,980 --> 00:22:27,620
including identifying addresses that are registered,

479
00:22:27,620 --> 00:22:29,500
that one or more companies are registered,

480
00:22:29,500 --> 00:22:31,180
and that's useful for finding potentially

481
00:22:31,180 --> 00:22:34,420
suspicious offices with lots of registered companies.

482
00:22:34,420 --> 00:22:36,900
It can also, probably I think the coolest thing

483
00:22:36,900 --> 00:22:40,140
is that it can see if and how two different

484
00:22:40,140 --> 00:22:42,020
specified companies are related to each other

485
00:22:42,020 --> 00:22:44,580
by following the chain of companies,

486
00:22:44,580 --> 00:22:47,740
company officers, and registered addresses.

487
00:22:47,740 --> 00:22:50,340
And these types of analysis are useful

488
00:22:50,340 --> 00:22:52,700
for detecting potentially fraudulent companies

489
00:22:52,700 --> 00:22:56,100
and company officers, and these are especially useful

490
00:22:56,100 --> 00:22:58,900
to financial investigators who don't know programming

491
00:22:58,900 --> 00:23:03,820
and don't know how to use API or use a huge database,

492
00:23:03,820 --> 00:23:06,220
and this can save them from doing it for like hours

493
00:23:06,220 --> 00:23:07,860
and hours from doing a bunch of manual work

494
00:23:07,860 --> 00:23:09,460
tracking down the leads manually.

495
00:23:12,380 --> 00:23:16,340
So taking a step back, why should you care about this?

496
00:23:16,340 --> 00:23:17,860
I mean, if you haven't figured it out by now,

497
00:23:17,860 --> 00:23:20,340
one of the main reasons I'm here is to get developers

498
00:23:20,340 --> 00:23:22,940
like you all interested in open source research.

499
00:23:24,100 --> 00:23:25,900
I can tell you my perspective.

500
00:23:25,900 --> 00:23:28,340
The thing that really keeps me in this field

501
00:23:28,340 --> 00:23:30,660
and interested is the impact.

502
00:23:30,660 --> 00:23:32,180
My colleagues and I work to expose

503
00:23:32,180 --> 00:23:33,700
some really terrible people,

504
00:23:33,700 --> 00:23:36,500
whether that's military officers who program cruise missiles

505
00:23:36,500 --> 00:23:40,620
to hit children's playgrounds or neo-Nazi pedophiles.

506
00:23:40,620 --> 00:23:42,900
The work we do helps to hold these people accountable

507
00:23:42,900 --> 00:23:44,780
and find justice for their victims.

508
00:23:46,580 --> 00:23:49,300
It's incredibly rewarding work.

509
00:23:49,300 --> 00:23:51,740
And the other thing that really keeps me interested

510
00:23:51,740 --> 00:23:55,820
is the sheer energy of the open source research community.

511
00:23:55,820 --> 00:23:57,700
This field has really only been around

512
00:23:57,700 --> 00:23:58,780
for about 10 years now,

513
00:23:58,780 --> 00:24:00,900
but researchers are constantly coming up

514
00:24:00,900 --> 00:24:04,340
with innovative uses of open source information.

515
00:24:04,340 --> 00:24:07,100
I've really only scratched the surface here.

516
00:24:07,100 --> 00:24:08,980
I could spend hours talking about brilliant

517
00:24:08,980 --> 00:24:11,260
open source investigations and tools,

518
00:24:11,260 --> 00:24:13,260
like when a researcher identified

519
00:24:13,260 --> 00:24:16,340
a secret US military bases in Syria

520
00:24:16,340 --> 00:24:19,180
because soldiers were logging their runs to a running app.

521
00:24:20,820 --> 00:24:23,140
Or one of the coolest things I've seen recently,

522
00:24:23,140 --> 00:24:25,300
it's a tool that uses small fluctuations

523
00:24:25,300 --> 00:24:27,300
in GPS satellite signals

524
00:24:27,300 --> 00:24:29,740
to detect North Korean missile launches.

525
00:24:32,180 --> 00:24:35,500
And another aspect that I think is really exciting

526
00:24:35,500 --> 00:24:38,260
is that often these software tools

527
00:24:38,260 --> 00:24:40,180
don't have to be very technically sophisticated

528
00:24:40,180 --> 00:24:41,940
to be really useful.

529
00:24:41,940 --> 00:24:43,620
I mean, often it's the simplest tools

530
00:24:43,620 --> 00:24:46,140
that get the most usage and impact.

531
00:24:46,140 --> 00:24:47,780
Something as straightforward as a wrapper

532
00:24:47,780 --> 00:24:49,900
or an interface to an existing API

533
00:24:49,900 --> 00:24:51,140
can be a game changer to people

534
00:24:51,140 --> 00:24:52,620
who don't know how to use requests,

535
00:24:52,620 --> 00:24:55,500
which let's face it, is most people.

536
00:24:55,500 --> 00:24:57,020
And no matter your skill level,

537
00:24:57,020 --> 00:24:59,020
you can meaningfully contribute.

538
00:24:59,020 --> 00:25:00,980
And I mean, like Pandy said,

539
00:25:00,980 --> 00:25:02,460
we can build anything, right?

540
00:25:06,660 --> 00:25:08,620
So that's the end of my presentation.

541
00:25:08,620 --> 00:25:09,620
If you want more information,

542
00:25:09,620 --> 00:25:13,180
read our investigations on our website, bellingcat.com.

543
00:25:13,180 --> 00:25:17,140
You can see our repos on GitHub, bellingcat.

544
00:25:18,340 --> 00:25:19,620
If you really want a challenge,

545
00:25:19,620 --> 00:25:22,580
we see our list of open questions.

546
00:25:22,580 --> 00:25:26,980
These are difficult long-term challenges

547
00:25:26,980 --> 00:25:29,780
that I'd love to see anyone make some progress on.

548
00:25:30,860 --> 00:25:33,300
We maintain a list of tools used in open source research.

549
00:25:33,300 --> 00:25:37,180
Check it out at bit.ly slash bcat-tools.

550
00:25:39,020 --> 00:25:39,940
In three weeks from now,

551
00:25:39,940 --> 00:25:42,780
we'll be hosting a virtual hackathon

552
00:25:42,780 --> 00:25:43,940
where we'll be focusing

553
00:25:43,940 --> 00:25:47,060
on making digital investigation tools more accessible.

554
00:25:47,060 --> 00:25:48,700
If you Google Bellingcat Hackathon,

555
00:25:48,700 --> 00:25:50,220
should be one of the first results

556
00:25:50,220 --> 00:25:52,220
or you can follow this link or talk to me.

557
00:25:54,020 --> 00:25:55,580
And if you want to get more involved,

558
00:25:55,580 --> 00:25:57,180
Bellingcat has a Discord server

559
00:25:57,180 --> 00:26:00,740
where you can join a community of open source researchers

560
00:26:00,740 --> 00:26:04,180
who are working on a ton of really cool projects.

561
00:26:04,180 --> 00:26:05,700
And if you have any questions,

562
00:26:05,700 --> 00:26:08,060
please don't hesitate to come up and talk to me.

563
00:26:08,060 --> 00:26:09,340
I love talking about this stuff

564
00:26:09,340 --> 00:26:10,860
and I think it's really exciting

565
00:26:10,860 --> 00:26:13,340
and I hope you all do too.

566
00:26:13,340 --> 00:26:14,180
Thanks so much.

567
00:26:14,180 --> 00:26:15,020
I hope I left, yeah.

568
00:26:15,020 --> 00:26:15,860
Yeah.

569
00:26:15,860 --> 00:26:16,700
Yeah.

