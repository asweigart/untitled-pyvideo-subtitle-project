1
00:00:00,000 --> 00:00:09,120
Hello. Okay. Thank you for having me here. And thank you to all the Pi Texas organizers

2
00:00:09,120 --> 00:00:14,480
who make this conference not only possible but a delight. I know a lot of you have come

3
00:00:14,480 --> 00:00:20,500
from probably very far away. Texas is an enormous state. So thank you for coming here. I really

4
00:00:20,500 --> 00:00:26,600
appreciate being to speak at Pi Texas 2024. I have a lot of information on these slides

5
00:00:26,600 --> 00:00:33,880
but you can download them from bit.ly slash Pi Texas 2024 scroll art and also see the

6
00:00:33,880 --> 00:00:40,300
art at scrollart.org. I'm Al Swigert. I'm mostly known as the author of Automate the

7
00:00:40,300 --> 00:00:52,240
Boring Stuff with Python and a few other books. You can read them all online for free at inventwithpython.com.

8
00:00:52,240 --> 00:00:57,640
So on the left is an artist who fills glass bowls with different colored sand and pushes

9
00:00:57,640 --> 00:01:02,880
the grains into place to draw portraits. In the center is an artist who arranges beads

10
00:01:02,880 --> 00:01:08,280
on a flat board and films herself in slow motion as she tosses them upwards. On the

11
00:01:08,280 --> 00:01:12,300
right is an artist who carves patterns into the skin of a watermelon getting different

12
00:01:12,300 --> 00:01:18,120
colors as they carve deeper. On the left is an artist who draws portraits using only the

13
00:01:18,120 --> 00:01:23,600
circumference of various coins. In the center is an artist who completes their illustrations

14
00:01:23,600 --> 00:01:28,300
by using the shadows cast from common household objects. On the right is an artist who has

15
00:01:28,300 --> 00:01:33,260
several elaborate bubble making tools. On the left is an old flash game where you lay

16
00:01:33,260 --> 00:01:39,080
out roads and the cars play musical notes as they pass by these roadside flower pots.

17
00:01:39,080 --> 00:01:44,460
In the center is an artist who does elaborate dance routines as they fall off of and climb

18
00:01:44,460 --> 00:01:50,660
onto a ledge over a trampoline. And on the right are two musicians who use the screeching

19
00:01:50,660 --> 00:01:57,660
electronic noises from their barcode scanners as they scan different barcodes to make music.

20
00:01:59,220 --> 00:02:04,100
A good friend of mine once said something that I will remember until the day I die.

21
00:02:04,100 --> 00:02:09,420
Not only will humans continue to create new art, but there will always be new forms of

22
00:02:09,740 --> 00:02:16,740
art. I'd like to talk to you about something I call scroll art. So scroll art is the output

23
00:02:18,540 --> 00:02:23,780
of a type of program that's easy for beginners to get into, but it's also fun for experienced

24
00:02:23,780 --> 00:02:28,760
software developers to explore. It's kind of like a minutes to learn, lifetime to master

25
00:02:28,760 --> 00:02:35,080
sort of thing. It's not exactly like ASCII art, but, well, it's actually just easier

26
00:02:35,080 --> 00:02:42,080
to show you. So this is one that I call spike. It's just a simple repeating pattern of lengthening

27
00:02:49,000 --> 00:02:55,000
and shrinking dashes. And if you stare at the very bottom, I kind of get like a rhythmic

28
00:02:55,000 --> 00:03:02,000
thumping noise playing in my head as I watch it. This next one is called star field. It's

29
00:03:03,000 --> 00:03:09,000
just random asterisk being played on the screen. But if you notice, the density of the asterisk

30
00:03:09,000 --> 00:03:13,000
gets greater and greater until it reaches 100%, and then it starts reducing back down

31
00:03:13,000 --> 00:03:20,000
to 0%, and then it just repeats over and over again. A quarter century ago, there was this

32
00:03:24,000 --> 00:03:31,000
movie that came out called The Matrix. Yeah, yeah, it's been that long. So it actually

33
00:03:32,000 --> 00:03:39,000
had this iconic visual of code falling down the screen like raindrops on a window pane.

34
00:03:39,000 --> 00:03:45,000
A scroller can only scroll things upwards, but you can change the color scheme around

35
00:03:45,000 --> 00:03:52,000
into hacker colors. And then a really common exercise for beginners to create is to write

36
00:03:52,000 --> 00:03:59,000
a function that will be given an integer size, and then you have to print out a diamond

37
00:04:05,040 --> 00:04:12,040
shape of that size. So I incorporated that into this. I just call it diamond sky. And

38
00:04:12,360 --> 00:04:19,120
then computers today can print out scroll art pretty fast. So you have to input these

39
00:04:19,120 --> 00:04:22,920
delays, but you can just remove that delay and just have it go as fast as possible.

40
00:04:22,920 --> 00:04:27,000
So this is just a random walk left or right of five different characters, but they always

41
00:04:27,000 --> 00:04:32,160
have to be within a certain distance of each other. So it kind of looks like the proton

42
00:04:32,160 --> 00:04:39,160
pack stream from Ghostbusters. And then this one will take a while to kind of explain.

43
00:04:40,400 --> 00:04:47,400
So let me go ahead and click on stop here. Where's my cursor? Okay, so every column can

44
00:04:48,400 --> 00:04:53,800
display a period or an at symbol, and randomly these togglers will appear, one going left

45
00:04:53,800 --> 00:04:58,200
and the other going right, that will switch it back and forth from a period to an at symbol.

46
00:04:58,200 --> 00:05:03,200
So if two togglers overlap each other, then they will cancel each other out. And some

47
00:05:03,200 --> 00:05:07,400
of these togglers will skip a column, and some will skip two or three columns. And this

48
00:05:07,400 --> 00:05:14,400
is a very simple rule set, but the patterns that it creates tend to get really complicated

49
00:05:15,280 --> 00:05:22,280
really quickly, even though the code for this I think is like 20 or 30 lines of code.

50
00:05:27,700 --> 00:05:31,600
So that's what scroll art is. It's the text output of a program that appears animated

51
00:05:31,600 --> 00:05:35,840
as it scrolls up the terminal window. Now, these programs are usually short and they

52
00:05:35,840 --> 00:05:40,300
can be written in any language you want, but I found Python to be great for just playing

53
00:05:40,300 --> 00:05:45,500
around with ideas. Here's the Python source code for that spike program. Here's the Python

54
00:05:45,500 --> 00:05:50,660
source code for the matrix screensaver. Here's a Python program for the diamond sky program.

55
00:05:50,660 --> 00:05:56,140
It's a bit bigger, but you notice it still fits on a single slide. Here's that proton

56
00:05:56,140 --> 00:06:02,260
stream program, and here's the toggler program source code in Python. So you've seen what

57
00:06:02,260 --> 00:06:07,500
scroll art is, but let me go ahead and define it more clearly. Scroll art is similar to

58
00:06:07,500 --> 00:06:11,420
something called ASCII art, which was popular in the 90s as a way to make art out of text

59
00:06:11,420 --> 00:06:18,420
characters. Here's a cat and a dolphin made by prolific ASCII artist Joan G. Stark. So

60
00:06:18,540 --> 00:06:23,860
scroll art is the output produced by a program that is displayed in a terminal window. So

61
00:06:23,860 --> 00:06:29,080
the text characters are all the same width, and scroll art is animated when the terminal

62
00:06:29,080 --> 00:06:33,660
window fills up with text and the text starts scrolling upwards. So the main limitations

63
00:06:33,660 --> 00:06:38,460
of scroll art are that you can't erase any text that you've already printed and you can't

64
00:06:38,460 --> 00:06:44,540
control where the cursor is. So if you're familiar with what standard IO is, scroll

65
00:06:44,540 --> 00:06:50,860
art is limited to the stream output. Now, I've named this scroll art, but I didn't exactly

66
00:06:50,860 --> 00:06:57,620
invent this. If you are like me and of a certain age, your first programming experience might

67
00:06:57,620 --> 00:07:02,660
have been something like writing this basic program. This just prints out the word hello,

68
00:07:02,660 --> 00:07:06,060
and then the second instruction is to go back to the first instruction, which then

69
00:07:06,060 --> 00:07:09,900
prints hello again, and then it prints hello again, and over and over and over again. And

70
00:07:09,900 --> 00:07:14,940
this program would keep going until you press control C. But I didn't know about control

71
00:07:14,940 --> 00:07:19,440
C. So the way that I stopped an infinite loop was to turn off the computer and then turn

72
00:07:19,440 --> 00:07:28,440
it back on. So I want to stress that scroll art isn't meant to be some kind of like form

73
00:07:28,440 --> 00:07:33,160
of retro computing or anything like that. You know, a lot of people have a dim view

74
00:07:33,160 --> 00:07:39,440
of nostalgia, and I am one of those people. I'm interested in teaching people to code

75
00:07:39,440 --> 00:07:44,440
in the 21st century. So the text-based nature of scroll art isn't meant to be some kind

76
00:07:44,440 --> 00:07:51,560
of old school throwback. It's the text is a constraint that makes programming approachable.

77
00:07:51,560 --> 00:07:59,400
So it's computer art without complicated shaders or 3D vectors or AI. I mean, so much

78
00:07:59,400 --> 00:08:05,040
of computing today is this magical black box, and it's hard to connect how the code we write

79
00:08:05,040 --> 00:08:10,520
results in what we see on the screen. But scroll art is text, and the source code is

80
00:08:10,520 --> 00:08:16,040
text. So it gives you a real sense of the cause and effect to connect the print function

81
00:08:16,920 --> 00:08:22,440
to the printed text on the screen. But more importantly, sticking to text means that any

82
00:08:22,440 --> 00:08:27,240
computer can do scroll art. You don't need a modern laptop. You don't need a high-end

83
00:08:27,240 --> 00:08:32,760
graphics card. I even ported some of the scroll art programs to an Apple IIe and a Commodore

84
00:08:32,760 --> 00:08:42,240
64, and it runs slowly, but it does run. And sticking to text means you don't need to install

85
00:08:42,280 --> 00:08:47,120
additional libraries, and that's a big one. If you've ever led a Learn to Code in Python

86
00:08:47,120 --> 00:08:52,960
workshop, you've probably had to do a pre-workshop workshop just to make sure that everybody

87
00:08:52,960 --> 00:08:57,840
has Python and all the libraries that you want to use installed on their laptop. Otherwise,

88
00:08:57,840 --> 00:09:02,160
you're going to spend the first hour and a half of your four-hour workshop trying to

89
00:09:02,160 --> 00:09:07,280
get Python running on people's programs or on people's computers. But with scroll art,

90
00:09:07,360 --> 00:09:13,840
just print and loops. That means you can do scroll art projects in browser-based repels

91
00:09:13,840 --> 00:09:18,720
as well. You don't even need Python installed. That means you could even do scroll art programming

92
00:09:18,720 --> 00:09:23,760
from tablets and smartphones if you have to. You don't even need to have a laptop.

93
00:09:25,360 --> 00:09:28,960
That's actually pretty important. You don't have to invent anything new. You can use these

94
00:09:28,960 --> 00:09:34,880
existing tools and platforms. The text industry loves to talk about radical innovation and

95
00:09:34,880 --> 00:09:39,360
revolutionizing our world, especially when it comes to education. But a lot of what the

96
00:09:39,360 --> 00:09:46,320
tech industry produces assumes a certain level of affluence or it assumes a certain level of

97
00:09:46,320 --> 00:09:53,440
sophisticated expert. But a big part of Python's success has been making a free open source

98
00:09:53,440 --> 00:09:57,920
programming language that is approachable for people outside of the software field.

99
00:09:57,920 --> 00:10:02,080
Now, don't get me wrong. I think there's a lot of great ways to get people into tech,

100
00:10:02,640 --> 00:10:10,080
but they can't get everyone into tech. So scroll art is not about retro computing.

101
00:10:10,640 --> 00:10:15,360
When I say any computer can do scroll art, I'm not really thinking about PCs from the 80s.

102
00:10:15,360 --> 00:10:21,120
I'm talking about the tablets and Chromebooks and old desktops that parents have gathered

103
00:10:21,120 --> 00:10:26,320
for an after school computer club. Or I mean the computers used by career switchers who

104
00:10:26,320 --> 00:10:30,240
don't want to drop a lot of money on a new laptop when they're just starting out.

105
00:10:30,960 --> 00:10:36,880
So that's what scroll art is. But why should you care about scroll art? Well, I have an interest

106
00:10:36,880 --> 00:10:41,920
in programming education, which is mostly about getting people interested in programming.

107
00:10:42,640 --> 00:10:47,600
Some of that is teaching concepts, but mostly it's about generating enthusiasm. And beginners

108
00:10:47,600 --> 00:10:53,520
want to make things. The worst feeling for beginners is mastering a bunch of abstract

109
00:10:53,520 --> 00:10:59,920
concepts and then staring at a blank editor not knowing how to write an actual computer program.

110
00:11:00,320 --> 00:11:06,160
Their idea of software are the professionally made apps that they're using on their phones,

111
00:11:06,160 --> 00:11:10,800
and they don't really have the knowledge to make big things like that, but they do have a little

112
00:11:10,800 --> 00:11:17,040
bit of knowledge to make small things, and small things can still be interesting. So I teach Python

113
00:11:17,040 --> 00:11:22,080
because Python is so widespread, but I need programming projects that I can use in any

114
00:11:22,080 --> 00:11:28,320
programming language without a lot of setup and also no matter what hardware they have access to.

115
00:11:29,040 --> 00:11:33,840
But let's say that you're a senior software engineer and with the latest Mac book, scroll

116
00:11:33,840 --> 00:11:38,880
art is still something for you. Scroll art's limitations force you to come up with ways to

117
00:11:38,880 --> 00:11:45,680
apply your wide skill set in very specific ways, and there are endless numbers of ways to make

118
00:11:45,680 --> 00:11:50,800
scroll art. So let's examine some of them, but first I'm going to say something incredibly

119
00:11:50,800 --> 00:11:59,600
pretentious. Scroll art creates the illusion of movement and infinity. Wow. That's like deep.

120
00:12:00,800 --> 00:12:05,840
No, here's what I mean. So scroll art is animated, but you're not writing any animation code. You're

121
00:12:05,840 --> 00:12:11,840
just calling print over and over again, but you've seen it. It looks like it's scrolling upwards. It

122
00:12:11,840 --> 00:12:17,840
has the illusion of movement, and if you add in random numbers, then your scroll art program will

123
00:12:17,840 --> 00:12:22,720
never repeat. It's kind of like the digits of pi, and then you put all of that in an infinite

124
00:12:22,720 --> 00:12:29,120
while loop, and it goes on forever. So it's kind of like a lava lamp. It moves. It never repeats,

125
00:12:29,120 --> 00:12:34,640
but it has this simplicity, and it's kind of neat to stare at. Those are the kinds of programming

126
00:12:34,640 --> 00:12:39,040
projects you can make with scroll art, and there's some different types of scroll art.

127
00:12:40,000 --> 00:12:43,600
There are periodic scroll art programs that just do a simple repetition.

128
00:12:48,560 --> 00:12:53,840
So this one is on scrollart.org. I call this zigzag. You can see it just goes to the right,

129
00:12:53,840 --> 00:12:57,440
and then it just goes to the left, and then it repeats. Now, what I really like about this one

130
00:12:57,440 --> 00:13:02,240
is that you can just look at the output and kind of figure out how the code works. You can think,

131
00:13:02,240 --> 00:13:07,600
oh, okay, it has zero indentation and then one space of indentation and two spaces of indentation

132
00:13:07,600 --> 00:13:12,000
up to a maximum, and then it starts subtracting that back down to zero. So you need a variable

133
00:13:12,000 --> 00:13:16,960
to keep track of how much indentation there is, another variable to keep track of which direction

134
00:13:16,960 --> 00:13:20,720
it's going, put all that into a loop, and then you can just make this little thing that's kind

135
00:13:20,720 --> 00:13:29,360
of fun to look at. And then if you know about sine and cosine, you can kind of make a fancier

136
00:13:29,360 --> 00:13:35,200
version of that. And again, this is just print being called over and over again.

137
00:13:37,120 --> 00:13:42,080
I have never actually used sine and cosine in programming unless it was for some silly

138
00:13:42,080 --> 00:13:47,920
artistic thing like this, just in case you were worried that you need to be good at math.

139
00:13:49,920 --> 00:13:54,480
So a much simpler example is what I call wallpaper scroll art. These are just static images.

140
00:13:55,200 --> 00:14:00,640
The code for this is all the same. It's just changing the pattern that you're doing. So it's

141
00:14:00,640 --> 00:14:07,760
a fun way to just create tessellated ASCII art programs. I have a whole bunch of examples right

142
00:14:07,760 --> 00:14:16,880
here. So the main way that I get inspiration for these sorts of programs is by just Googling for

143
00:14:18,000 --> 00:14:22,000
tessellation and doing an image search for that. It really helps if you just limit yourself to

144
00:14:22,000 --> 00:14:28,800
black and white images or line art images. Another thing you can do is just do a search

145
00:14:28,800 --> 00:14:35,120
for Islamic geometric art. There's an entire history of art behind this that you can read

146
00:14:35,120 --> 00:14:40,960
up about, and I spent a lot of time instead of working on this talk just looking at Wikipedia

147
00:14:40,960 --> 00:14:48,640
pages for this. You can also just do ASCII art that has several variations. So the example I

148
00:14:48,640 --> 00:14:53,520
have here are these ASCII art ducklings. And so these ducklings can face to the left or to the

149
00:14:53,520 --> 00:14:57,760
right. Their mouths can be open or closed. They have three different directions that their wings

150
00:14:57,760 --> 00:15:02,240
can be pointed and three different types of eyes and two different sizes. And

151
00:15:05,520 --> 00:15:10,240
I can just write a program that just goes through all the various combinations of these,

152
00:15:10,240 --> 00:15:14,080
and it looks absolutely adorable, especially when you have two ducklings line up so it looks

153
00:15:14,080 --> 00:15:24,160
like they're kissing each other. I have a type of scroll art that I call varying density. You

154
00:15:24,160 --> 00:15:28,880
saw this with the star field example, but really you can do this with any sort of tessellated

155
00:15:28,880 --> 00:15:34,880
pattern. Here I just have this triangular grid that fills out and then it starts emptying itself

156
00:15:35,440 --> 00:15:46,400
over and over again. Okay, so before graphical user interfaces, a lot of software just used

157
00:15:47,360 --> 00:15:52,240
characters that looked like lines, and we call these box drawing characters. And we still have

158
00:15:52,240 --> 00:15:58,400
access to this today. So you can print out these text characters but get sort of like a graphical

159
00:15:58,400 --> 00:16:05,040
look. The art here looks very elaborate, but the rules that I came up with are just like I don't

160
00:16:05,040 --> 00:16:11,280
want to have any dangling loose ends for the lines. And then I accidentally added some bug to it that

161
00:16:11,280 --> 00:16:15,280
made them stretched out vertically. And I thought actually that looks pretty nice. So I have both

162
00:16:15,280 --> 00:16:24,560
versions up here. A few years back you might have seen there was this like rotating ASCII art donut

163
00:16:24,560 --> 00:16:30,320
program that came out. And I realized, hey, that just uses these 12 different characters for

164
00:16:31,120 --> 00:16:36,000
different shading and textures. You can use that to go from lightest to darkest.

165
00:16:37,600 --> 00:16:42,960
So yeah, I found that scroll art is just really great for practicing new programming languages

166
00:16:44,640 --> 00:16:50,240
that I want to learn or I want to have more experience with. And eventually I created the

167
00:16:50,240 --> 00:16:56,480
scrollart.org website and I had to create this JavaScript terminal that JavaScript library that

168
00:16:56,480 --> 00:17:01,920
lets you treat a text area HTML element as a sort of terminal window so that you can just call a

169
00:17:01,920 --> 00:17:06,080
print function and it'll just display text in there. And that's how all the animations that

170
00:17:06,080 --> 00:17:10,640
you've seen work. I really encourage you to get into scroll art and also see if you want to

171
00:17:10,640 --> 00:17:15,840
contribute anything, especially if it's in JavaScript using this library and we can put it on the website

172
00:17:15,840 --> 00:17:21,440
for other people to see it in their browser. I spent a lot of the last two months working on

173
00:17:21,440 --> 00:17:27,040
this and I've come up with several little tips that I've uncovered. I'm not going to read them

174
00:17:27,040 --> 00:17:32,160
off here. You can just download these slides later. I've also come up with just a lot of new ideas

175
00:17:32,160 --> 00:17:37,520
that I want to try out later on. And so you can just read those later. But the main thing that I

176
00:17:37,520 --> 00:17:44,480
want to stress is that scroll art is really simple. That's sort of the core of all scroll art. It's

177
00:17:44,480 --> 00:17:53,840
not some bright, elaborate, colorful processing P5JS thing or like those 64 kilobyte demo scene

178
00:17:53,840 --> 00:17:58,720
demos. If you're making scroll art, you can just go with simple ideas. And actually,

179
00:17:58,720 --> 00:18:03,600
simple ideas are better. I've spent hours with some elaborate idea that I had just to find out

180
00:18:03,600 --> 00:18:09,680
that when I actually ran the code, the output wasn't that cool looking. So just start small

181
00:18:09,760 --> 00:18:16,560
and then build up from there. Take a look at other projects and try to get ideas from that.

182
00:18:18,240 --> 00:18:25,120
Yeah. And I think probably the best example of this is something that I created where it was

183
00:18:25,120 --> 00:18:31,920
just sine waves and five different sine waves. They're moving at different speeds. And I realized

184
00:18:31,920 --> 00:18:37,520
like, wow, there's really not much to this code, but the output looks pretty amazing.

185
00:18:37,520 --> 00:18:44,240
I was thinking it made me think of sort of the path of the moon orbiting around the earth is in

186
00:18:44,240 --> 00:18:49,440
a circle. But if you realize that the earth itself is also moving, you realize that the moon is

187
00:18:49,440 --> 00:18:54,880
actually drawing out a helix path around it. And that's just what I thought about this thought

188
00:18:54,880 --> 00:19:00,240
about when I saw this. So I called this orbital travels. But anyway, I really hope that you found

189
00:19:00,240 --> 00:19:04,880
this at least somewhat interesting. Maybe it gives you ideas for programs that you can make on your

190
00:19:04,880 --> 00:19:10,720
own or programs that you can use to teach other people how to code. I just love looking at the

191
00:19:10,720 --> 00:19:15,440
output of some of this stuff, because then it makes me think about, oh, how does the code work

192
00:19:15,440 --> 00:19:19,840
behind all of this? And that's my favorite kind of art is the art that you look at and it gives

193
00:19:19,840 --> 00:19:26,800
you ideas. So as said in the Zen of Python, beautiful is better than ugly and simple is

194
00:19:26,800 --> 00:19:35,760
better than complex. And you can get a lot of beauty from simplicity. Thank you very much.

195
00:19:45,120 --> 00:19:51,280
Believe it or not, Al, we do have scroll art questions. By the way, Lauren, our next speaker,

196
00:19:51,280 --> 00:19:53,680
if you were here, I don't know why I just turned that off. Lauren, if you're here,

197
00:19:53,680 --> 00:19:58,800
if you'd come over to the side and Josh will help you get set up while we're doing that.

198
00:20:00,160 --> 00:20:04,640
Okay. So the first question, can you run scroll art on a smart fridge?

199
00:20:08,560 --> 00:20:14,000
Sure. I'm now thinking about how you would make that happen. I'm incredibly curious.

200
00:20:15,600 --> 00:20:19,600
I mean, it's a little bit more complicated than doom, but yeah, I guess you could make that happen.

201
00:20:20,080 --> 00:20:23,680
The next question, can you make doom a part of this approach?

202
00:20:25,600 --> 00:20:31,600
Okay. Set that up too nicely. So that recurse center thing that I talked about yesterday during

203
00:20:31,600 --> 00:20:35,520
my lightning talk, they're having a talent show and I kind of want to do something like this.

204
00:20:35,520 --> 00:20:41,040
So I've also thought about making it interactive by having the JavaScript track the mouse position

205
00:20:41,040 --> 00:20:46,880
to make it slightly interactive and then also opening up the browser developer tools and

206
00:20:47,520 --> 00:20:53,040
controlling it from there like a DJ. So yeah, I mean, I'm not one of those people who says like,

207
00:20:53,040 --> 00:20:56,800
oh, real origami is when you use a square sheet of paper and you don't make any cuts and you have

208
00:20:56,800 --> 00:21:01,200
all these like, no, no, no, just make whatever you want. I'm not going to gatekeep scroll art.

209
00:21:01,920 --> 00:21:05,920
It's really just animated ASCII art and try to keep it simple and fun.

210
00:21:06,480 --> 00:21:09,760
So this has me thinking now, you've seen the textual library, right?

211
00:21:09,760 --> 00:21:10,160
Yes.

212
00:21:10,160 --> 00:21:13,440
I'm getting the idea of using that with mouse tracking to have scroll art that reacts to the

213
00:21:13,440 --> 00:21:21,360
mouse as you. Oh, yes. I mean, so like the main thing about limiting yourself to just print and

214
00:21:21,360 --> 00:21:27,360
not being able to move the cursor around is that it really does force you to think more simply

215
00:21:28,160 --> 00:21:31,760
because, you know, once you start moving the text cursor around and doing all this like really

216
00:21:31,760 --> 00:21:36,240
fancy ASCII art, then it's just like not that far away from just doing regular computer art.

217
00:21:36,240 --> 00:21:41,680
And it's super complicated and the expectations are just set way higher. So that's why I like,

218
00:21:41,680 --> 00:21:46,640
you know, just sticking with print. You can add in colorful, like different colored text as well,

219
00:21:46,640 --> 00:21:50,480
but I just like to stick with just printing out characters.

220
00:21:50,480 --> 00:21:53,120
It's the haiku of textual art, right?

221
00:21:55,280 --> 00:21:58,640
Have you explored Stephen Wolfram's cellular automation rules?

222
00:21:59,200 --> 00:22:04,960
Oh, yes. That was actually a slide that I had cut. There's a book called A New Kind of Science,

223
00:22:04,960 --> 00:22:09,040
which is like a thousand pages long and short story is it's not a new kind of science,

224
00:22:09,040 --> 00:22:15,040
but it does cover cellular automata, which you can also use as inspiration for kinds of art.

225
00:22:15,040 --> 00:22:20,560
You can also look up like dithering algorithms, which is sort of how a lot of monochromatic

226
00:22:20,560 --> 00:22:27,440
screens would simulate shading as well. Last one, just for fun. So did ASCII art

227
00:22:27,440 --> 00:22:31,280
start on printers and the follow-up comment? Thanks, Dave. That's also hard to erase.

228
00:22:33,280 --> 00:22:37,600
That is not a question. But yeah, no, there is a thing called typewriter art from, you know,

229
00:22:37,600 --> 00:22:44,160
a hundred years ago where people would just use typewriter keys to print out and try to make art

230
00:22:44,160 --> 00:22:50,240
that way, which is kind of like the predecessor of ASCII art, which yeah, I mean, there's always

231
00:22:50,240 --> 00:22:55,280
going to be new forms of art. Awesome. All right. Thanks again, Al Swigert, everyone.

232
00:22:56,000 --> 00:22:56,880
Thank you. Thank you.

