1
00:00:00,000 --> 00:00:02,040
All right, all right.

2
00:00:02,040 --> 00:00:06,240
So I guess I'm the last one that gets to say good morning.

3
00:00:06,240 --> 00:00:09,600
We'll talk a little bit about sets today.

4
00:00:09,600 --> 00:00:11,000
It's good to be back in Texas.

5
00:00:11,000 --> 00:00:13,920
It's been a few years.

6
00:00:13,920 --> 00:00:17,960
So I'm Andy Fundinger, and this is Always Use Sets.

7
00:00:17,960 --> 00:00:21,680
So I always find it's more useful than giving a year

8
00:00:21,680 --> 00:00:25,280
to talk about which Python version I started with.

9
00:00:25,280 --> 00:00:27,480
So when I started learning Python,

10
00:00:27,480 --> 00:00:31,560
the book said, learn Python 2.2.

11
00:00:31,560 --> 00:00:33,220
Then they had a little slide that said,

12
00:00:33,220 --> 00:00:37,960
newly revised for Python 2.3.

13
00:00:37,960 --> 00:00:41,880
And well, Python 2.4 had just come out.

14
00:00:41,880 --> 00:00:43,360
So that's where I start from.

15
00:00:43,360 --> 00:00:44,580
I've worked with Plone.

16
00:00:44,580 --> 00:00:45,620
I've worked with Twisted.

17
00:00:45,620 --> 00:00:47,960
I've worked in the financial industry.

18
00:00:47,960 --> 00:00:51,640
I've done a little bit with virtual world stuff.

19
00:00:51,640 --> 00:00:56,120
I've been at Bloomberg since about 2017.

20
00:00:56,120 --> 00:01:01,360
In 2019, I went over to our system reliability engineering

21
00:01:01,360 --> 00:01:02,680
groups.

22
00:01:02,680 --> 00:01:07,920
And in 2020, to data services or DNA,

23
00:01:07,920 --> 00:01:12,040
which is why they put that on my fleece.

24
00:01:12,040 --> 00:01:14,640
I work on something called our data gateway.

25
00:01:14,640 --> 00:01:17,680
It sits in the middle of a lot of our workflows.

26
00:01:17,680 --> 00:01:21,000
We're a gateway, so all the code around me

27
00:01:21,000 --> 00:01:22,760
is owned by other people.

28
00:01:22,760 --> 00:01:26,120
Both upstream and downstream is other people's code.

29
00:01:26,120 --> 00:01:29,720
We have billions of requests per day going through there

30
00:01:29,720 --> 00:01:33,560
and millions of semi-independent code paths.

31
00:01:33,560 --> 00:01:36,240
This is easy to imagine when you realize

32
00:01:36,240 --> 00:01:39,400
that our queries are something like, what

33
00:01:39,400 --> 00:01:42,000
is the price of this security?

34
00:01:42,000 --> 00:01:44,880
Well, if the security is a stock, that's easy.

35
00:01:44,880 --> 00:01:47,040
You go to the exchange to see what the last price was.

36
00:01:47,040 --> 00:01:48,640
You send it back.

37
00:01:48,640 --> 00:01:51,560
If it's a bond, there's this whole pricing thing

38
00:01:51,560 --> 00:01:55,400
that you need a bunch of information and then you can do.

39
00:01:55,400 --> 00:01:57,760
If it's an index, you need the price

40
00:01:57,760 --> 00:02:00,160
of a whole bunch of other things and then to figure it out.

41
00:02:00,160 --> 00:02:03,380
And then you can send that back.

42
00:02:03,380 --> 00:02:07,480
And that's where our code paths just multiply.

43
00:02:07,480 --> 00:02:13,500
So a lot of what I do day to day is ingest telemetry data

44
00:02:13,500 --> 00:02:15,640
and process it a bit to understand what's

45
00:02:15,640 --> 00:02:19,180
going on in a complex system.

46
00:02:19,180 --> 00:02:21,240
Of course, today we're talking about sets.

47
00:02:21,240 --> 00:02:24,480
And that means we need to talk about all the data structures.

48
00:02:24,480 --> 00:02:26,760
We'll start with tuples.

49
00:02:26,760 --> 00:02:29,240
Tuples we declare with parentheses.

50
00:02:29,240 --> 00:02:31,880
They're ordered, they're frozen, they're immutable.

51
00:02:31,880 --> 00:02:35,760
And you can have duplicate items.

52
00:02:35,760 --> 00:02:37,760
Lists, we go to the square brackets.

53
00:02:37,760 --> 00:02:40,840
They're ordered, they're immutable.

54
00:02:40,840 --> 00:02:44,180
You can have duplicate items.

55
00:02:44,180 --> 00:02:46,200
You may imagine this won't be our only slide

56
00:02:46,200 --> 00:02:48,600
about what sets do.

57
00:02:48,640 --> 00:02:51,560
But they use the curly braces.

58
00:02:51,560 --> 00:02:54,840
They have to be a collection of hashable objects.

59
00:02:54,840 --> 00:02:57,280
They are unordered.

60
00:02:57,280 --> 00:02:59,160
If you want them to be immutable,

61
00:02:59,160 --> 00:03:01,560
you can use a frozen set.

62
00:03:01,560 --> 00:03:03,200
And all the items have to be unique.

63
00:03:06,040 --> 00:03:10,240
The dictionary, we add the colons to the curly braces.

64
00:03:10,240 --> 00:03:15,600
And we have a map of hashable objects to other objects.

65
00:03:15,600 --> 00:03:19,840
As of Python 3.6, they are ordered.

66
00:03:19,840 --> 00:03:22,280
Sets are still not ordered.

67
00:03:22,280 --> 00:03:24,320
We'll come back to that.

68
00:03:24,320 --> 00:03:27,840
And all the keys have to be unique.

69
00:03:27,840 --> 00:03:30,920
The constraint here is not just that they're unique.

70
00:03:30,920 --> 00:03:32,720
It is that they are hashable, which means

71
00:03:32,720 --> 00:03:36,160
dunder hash and dunder equal.

72
00:03:36,160 --> 00:03:37,920
And then there's one other that I

73
00:03:37,920 --> 00:03:40,160
want to put into this talk because it completes

74
00:03:40,160 --> 00:03:41,000
some rough edges.

75
00:03:41,000 --> 00:03:45,560
The counter, often collections.counter,

76
00:03:45,560 --> 00:03:48,200
is a map of hashable objects to the counts

77
00:03:48,200 --> 00:03:50,160
of their occurrences.

78
00:03:50,160 --> 00:03:53,200
And all the keys there have to be unique.

79
00:03:53,200 --> 00:03:55,620
Now, the cool thing is this changes

80
00:03:55,620 --> 00:03:58,080
a collection of things with duplicates,

81
00:03:58,080 --> 00:04:02,280
where order doesn't matter, into a dictionary.

82
00:04:02,280 --> 00:04:04,200
So if you have something that would be a set,

83
00:04:04,200 --> 00:04:07,280
except it has duplicates, just refer to the dictionary

84
00:04:07,280 --> 00:04:08,160
section of the talk.

85
00:04:11,080 --> 00:04:13,920
So how do we use sets?

86
00:04:13,920 --> 00:04:15,560
We can declare them easily enough.

87
00:04:15,560 --> 00:04:16,840
There's a constructor.

88
00:04:16,840 --> 00:04:19,680
We have set comprehensions.

89
00:04:19,680 --> 00:04:21,720
We have an add method to add things.

90
00:04:21,720 --> 00:04:25,160
We have a remove method to remove things.

91
00:04:25,160 --> 00:04:27,680
Until we put in type hinting and start checking

92
00:04:27,680 --> 00:04:30,140
and start paying attention to the type checker,

93
00:04:30,140 --> 00:04:32,000
we can mix and match types in our set.

94
00:04:34,600 --> 00:04:38,600
They are also collections from the abstract base

95
00:04:38,720 --> 00:04:41,440
collections, which gives them a few properties.

96
00:04:41,440 --> 00:04:43,680
Particularly, they are iterable.

97
00:04:43,680 --> 00:04:44,280
Thank you, Moshi.

98
00:04:48,120 --> 00:04:50,680
They have a length.

99
00:04:50,680 --> 00:04:53,720
And they have the in operator.

100
00:04:53,720 --> 00:04:55,560
So I can say, is this in my set?

101
00:04:55,560 --> 00:04:56,600
Yes.

102
00:04:56,600 --> 00:04:58,240
Is this not in my set?

103
00:04:58,240 --> 00:05:00,600
Also, yes, because I chose the thing I removed.

104
00:05:00,600 --> 00:05:03,360
There are also some particular set operations.

105
00:05:03,360 --> 00:05:06,080
And this is where the real power comes from,

106
00:05:06,080 --> 00:05:09,840
because these operations are implemented down in the C level.

107
00:05:09,840 --> 00:05:13,120
We can union, which is take two sets,

108
00:05:13,120 --> 00:05:16,760
and give us a set that combines everything in both of them.

109
00:05:16,760 --> 00:05:19,400
We can intersect, give us the set of things

110
00:05:19,400 --> 00:05:22,680
that are in both of them.

111
00:05:22,680 --> 00:05:24,240
We can difference.

112
00:05:24,240 --> 00:05:27,120
Take this set, and we can do the same thing.

113
00:05:27,120 --> 00:05:28,520
We can do the same thing.

114
00:05:28,520 --> 00:05:30,120
We can difference.

115
00:05:30,120 --> 00:05:30,880
Take this set.

116
00:05:30,880 --> 00:05:33,480
Remove anything in that set.

117
00:05:33,480 --> 00:05:36,600
And we can symmetric difference, which

118
00:05:36,600 --> 00:05:40,960
is give us all the things that are only in one set,

119
00:05:40,960 --> 00:05:47,880
but not in both, sort of the XOR of set operations.

120
00:05:50,440 --> 00:05:56,040
So in mid-conclusion, always use sets.

121
00:05:56,040 --> 00:06:00,520
By using a set, we clearly communicate our expectations.

122
00:06:00,520 --> 00:06:03,600
We tell the people that it might be changed,

123
00:06:03,600 --> 00:06:06,960
but if more things are added and they duplicate, that's fine.

124
00:06:06,960 --> 00:06:09,400
If things are removed, they're removed,

125
00:06:09,400 --> 00:06:12,000
that we're going to check whether things are in there,

126
00:06:12,000 --> 00:06:14,040
that we don't care about the order.

127
00:06:14,040 --> 00:06:18,480
We communicate a whole lot by just saying, this is a set.

128
00:06:18,480 --> 00:06:20,920
And this will perhaps not matter when

129
00:06:20,920 --> 00:06:25,100
you write an include list that's written one time in a constant

130
00:06:25,100 --> 00:06:27,660
and goes down into your code somewhere.

131
00:06:27,660 --> 00:06:31,940
But as you maintain the code, as you use it later,

132
00:06:31,940 --> 00:06:36,540
the fact that you made it a set from the beginning

133
00:06:36,540 --> 00:06:39,100
prevents the behavior from drifting

134
00:06:39,100 --> 00:06:42,260
and prevents anyone from having to ask, well,

135
00:06:42,260 --> 00:06:44,900
if we put it in there twice, what does

136
00:06:44,900 --> 00:06:46,620
that mean for an exclude list?

137
00:06:46,740 --> 00:06:53,060
And then the other one, because of those set operations,

138
00:06:53,060 --> 00:06:56,980
we can write algorithms based on discrete math.

139
00:06:56,980 --> 00:07:01,420
We can go in to our data structures and algorithms book

140
00:07:01,420 --> 00:07:04,860
and it'll say, oh, just union the two things.

141
00:07:04,860 --> 00:07:07,460
And we can just do that.

142
00:07:07,460 --> 00:07:12,580
So it's like tapping into an extra stack of documentation.

143
00:07:12,580 --> 00:07:14,180
But I see there's some time.

144
00:07:15,180 --> 00:07:18,180
But I see there's some time left.

145
00:07:18,180 --> 00:07:22,420
So you might have some questions about speed.

146
00:07:22,420 --> 00:07:26,220
I thought I'd answer those.

147
00:07:26,220 --> 00:07:30,820
How do we measure the speed of something in Python?

148
00:07:30,820 --> 00:07:33,340
For something as basic as this, there's

149
00:07:33,340 --> 00:07:35,540
a standard library timet.

150
00:07:35,540 --> 00:07:38,300
It will work for this.

151
00:07:38,300 --> 00:07:40,060
If you're doing more benchmarking,

152
00:07:40,060 --> 00:07:41,980
then you want to use some of the tools

153
00:07:41,980 --> 00:07:44,500
that Carol talked about.

154
00:07:44,500 --> 00:07:47,220
So we'll check our help on timet timet.

155
00:07:47,220 --> 00:07:51,420
It tells us that we give it a statement, a setup, a number.

156
00:07:51,420 --> 00:07:54,140
And then it tells us this is a convenience function

157
00:07:54,140 --> 00:07:56,780
for the timer object timet method.

158
00:07:56,780 --> 00:07:58,300
So we should check our documentation

159
00:07:58,300 --> 00:08:03,660
on timet timer timet, which explains

160
00:08:03,660 --> 00:08:08,220
that it does all the performance timing stuff

161
00:08:08,220 --> 00:08:10,660
and returns in seconds how long it

162
00:08:10,660 --> 00:08:17,620
took to run all the iterations you asked for, which we might

163
00:08:17,620 --> 00:08:20,540
then want to divide by.

164
00:08:20,540 --> 00:08:25,740
So this is what timet looks like.

165
00:08:25,740 --> 00:08:31,660
We see that declaring this 10 item set gives us 10

166
00:08:31,660 --> 00:08:34,500
to the negative 6 seconds.

167
00:08:34,500 --> 00:08:36,500
10 to the negative 9th is nanoseconds.

168
00:08:36,500 --> 00:08:39,900
So that's 1,000 nanoseconds, or a millisecond.

169
00:08:39,900 --> 00:08:44,540
And I'll use that timing through the rest.

170
00:08:44,540 --> 00:08:46,900
The other question is memory.

171
00:08:46,900 --> 00:08:51,380
Again, we have a memory function, getSizeOf.

172
00:08:51,380 --> 00:08:53,740
It's often sys.

173
00:08:53,740 --> 00:08:55,940
This is probably the only time you

174
00:08:55,940 --> 00:09:00,140
would want to actually use that practically.

175
00:09:00,140 --> 00:09:04,820
The problem with the getSizeOf function, whatever you give it,

176
00:09:04,820 --> 00:09:07,020
it gives you the size of.

177
00:09:07,020 --> 00:09:09,820
Now, that sounds like exactly what you would want.

178
00:09:09,820 --> 00:09:13,060
It doesn't give you the size of anything in it.

179
00:09:13,060 --> 00:09:15,060
So when we're looking at the size of the set,

180
00:09:15,060 --> 00:09:17,740
it's telling us how big the set is,

181
00:09:17,740 --> 00:09:20,500
not how big the item's in the set.

182
00:09:20,500 --> 00:09:23,340
If we took a dictionary, if you took a class that

183
00:09:23,340 --> 00:09:26,260
has stuff in it that has stuff in it that has stuff in it,

184
00:09:26,260 --> 00:09:28,620
it doesn't tell you any of that.

185
00:09:28,620 --> 00:09:30,500
But we're talking about sets, so this

186
00:09:30,500 --> 00:09:32,980
tells us what we need to know.

187
00:09:32,980 --> 00:09:36,340
And if you need more, may I suggest

188
00:09:36,340 --> 00:09:41,100
memory, which we open sourced.

189
00:09:41,100 --> 00:09:42,420
So what's the size of a set?

190
00:09:42,420 --> 00:09:47,660
An empty set is 216 bytes in Python.

191
00:09:47,660 --> 00:09:55,700
But it might matter a little bit how many items

192
00:09:55,700 --> 00:09:56,780
we put in the set.

193
00:09:56,780 --> 00:09:59,300
So let's go ahead and take a look at that.

194
00:09:59,300 --> 00:10:02,860
I am using the log of memory, so this is a log scale.

195
00:10:02,860 --> 00:10:04,820
Otherwise, things get very distorted.

196
00:10:07,740 --> 00:10:11,900
So we'll zoom in on 1,000 items.

197
00:10:11,900 --> 00:10:16,020
And I'll take that log scale off just so we can see it.

198
00:10:16,020 --> 00:10:20,260
Our set takes 32k.

199
00:10:20,260 --> 00:10:26,500
The tuple or the list of the same size takes 8k.

200
00:10:26,500 --> 00:10:29,420
So we do need to know set or frozen set,

201
00:10:29,420 --> 00:10:32,420
just the same dictionary a little bit more,

202
00:10:32,420 --> 00:10:36,460
that we are using a lot of memory when we're using sets.

203
00:10:49,900 --> 00:10:52,020
So how long does it take to construct a set?

204
00:10:55,380 --> 00:10:57,780
Well, obviously, that depends on the size.

205
00:10:57,780 --> 00:10:59,580
Obviously, I can put a big, long,

206
00:10:59,580 --> 00:11:05,060
long time graph of sets, frozen sets, sets, and tuples.

207
00:11:05,060 --> 00:11:08,620
And we'll just go ahead and acknowledge

208
00:11:08,620 --> 00:11:13,820
there is more than one way to construct a set.

209
00:11:13,820 --> 00:11:16,700
This is using the constructor with a list,

210
00:11:16,700 --> 00:11:18,980
generating, building.

211
00:11:18,980 --> 00:11:24,060
But the fastest is just to go to the constructor.

212
00:11:24,060 --> 00:11:28,740
If we look at 1,000 item set, what we see

213
00:11:28,780 --> 00:11:33,140
is it takes about seven milliseconds

214
00:11:33,140 --> 00:11:37,020
to make 1,000 item set with the constructor.

215
00:11:37,020 --> 00:11:40,580
By comparison, the tuple can do it in a millisecond.

216
00:11:40,580 --> 00:11:44,460
So we do have a bit of construction time.

217
00:11:44,460 --> 00:11:46,300
List also takes a millisecond.

218
00:11:46,300 --> 00:11:49,540
And I'm not sure if I'm hitting an optimization on that one.

219
00:11:59,060 --> 00:12:01,220
Oh, did I jump a slide?

220
00:12:04,180 --> 00:12:05,420
I think I jumped a slide there.

221
00:12:10,700 --> 00:12:12,420
Constructing a set.

222
00:12:12,420 --> 00:12:15,860
What about changing the set?

223
00:12:15,860 --> 00:12:18,740
So obviously, this is going to get more interesting when

224
00:12:18,740 --> 00:12:21,420
we start changing it, because it is a mutable type.

225
00:12:22,420 --> 00:12:35,060
And if we take a look at this, for some basic mutations,

226
00:12:35,060 --> 00:12:41,100
the set is a little bit faster than the list.

227
00:12:41,100 --> 00:12:41,620
Sorry.

228
00:12:47,580 --> 00:12:51,020
And we'll just go ahead and add tuples in here

229
00:12:51,020 --> 00:12:56,700
and vary it both on the size and the number of mutations.

230
00:12:56,700 --> 00:13:04,100
But if we look at 1,000 items and we say,

231
00:13:04,100 --> 00:13:08,860
let's look at how many mutations we do, this is set.

232
00:13:08,860 --> 00:13:13,940
So if we're doing really any number of mutations,

233
00:13:13,940 --> 00:13:17,580
we see that doing the same mutations on a list or a tuple

234
00:13:17,580 --> 00:13:20,660
is taking much longer.

235
00:13:20,660 --> 00:13:25,980
We'll go ahead and pull that back out and ask the question,

236
00:13:25,980 --> 00:13:31,700
so how many mutations should we do to get a payoff?

237
00:13:31,700 --> 00:13:39,140
This is doing 10 mutations with different sizes of sets.

238
00:13:39,140 --> 00:13:43,300
So if we're doing 10 mutations and we have a set size of 10,

239
00:13:43,300 --> 00:13:45,380
it comes out about equal.

240
00:13:45,380 --> 00:13:48,300
But as soon as we're doing 100, we're really

241
00:13:48,300 --> 00:13:50,300
pulling ahead on sets here.

242
00:13:50,300 --> 00:13:51,780
Again, this is on a log scale.

243
00:13:55,060 --> 00:13:58,820
So that's basically the answer that I've found there.

244
00:13:58,820 --> 00:14:01,500
If you're doing 10 mutations, you should just

245
00:14:01,500 --> 00:14:07,020
go ahead and use a set for performance reasons

246
00:14:07,020 --> 00:14:09,020
in addition to clarity.

247
00:14:09,020 --> 00:14:15,020
Now, the next question is, what if order matters?

248
00:14:15,020 --> 00:14:18,420
What if we do actually need it ordered?

249
00:14:18,420 --> 00:14:23,180
So I'm adding an additional performance measure here.

250
00:14:23,180 --> 00:14:25,740
This is the mutate sort.

251
00:14:25,740 --> 00:14:28,020
This is do the mutations and then

252
00:14:28,020 --> 00:14:31,060
sort it to get back the order.

253
00:14:34,260 --> 00:14:36,340
And it turns out that while we do

254
00:14:36,340 --> 00:14:41,260
lose a little bit of performance to doing that sort,

255
00:14:41,260 --> 00:14:45,260
it is still faster than doing it in a list.

256
00:14:45,260 --> 00:14:48,300
So even if you have to sort it afterwards,

257
00:14:48,300 --> 00:14:52,220
if you're doing 10 changes, you might as well just use a set.

258
00:14:59,260 --> 00:15:01,140
But then we do have dicts.

259
00:15:01,140 --> 00:15:02,820
And dicts are pretty good.

260
00:15:02,820 --> 00:15:04,900
Dicts are amazing in Python because they

261
00:15:04,900 --> 00:15:08,340
underlie the entire class object structure.

262
00:15:08,340 --> 00:15:12,660
So a lot of work has gone into making dicts faster.

263
00:15:12,660 --> 00:15:16,820
In fact, sets were added in Python 2.3.

264
00:15:16,820 --> 00:15:19,900
So when I started learning Python,

265
00:15:19,900 --> 00:15:23,620
there were an awful lot of instructions on how to use dicts

266
00:15:23,620 --> 00:15:25,940
when you probably should have used a set,

267
00:15:25,940 --> 00:15:28,860
but they just came out.

268
00:15:28,860 --> 00:15:31,180
So I went into the code, and I was curious.

269
00:15:31,180 --> 00:15:35,980
There is separate code for sets at this point.

270
00:15:35,980 --> 00:15:39,140
And there's this helpful comment that tells us what to expect.

271
00:15:39,140 --> 00:15:43,580
It says, use cases for sets differ considerably

272
00:15:43,580 --> 00:15:46,220
from dictionaries, where looked up keys are more

273
00:15:46,220 --> 00:15:48,740
likely to be present because you're probably

274
00:15:48,740 --> 00:15:50,780
going through an object asking for something

275
00:15:50,780 --> 00:15:52,180
that ought to be there.

276
00:15:54,660 --> 00:15:58,420
In contrast, sets are primarily about membership testing,

277
00:15:58,420 --> 00:16:01,140
where the presence of an element is not known in advance.

278
00:16:01,140 --> 00:16:02,860
Accordingly, the set implementation

279
00:16:02,860 --> 00:16:09,140
needs to optimize for both the found and not found case, which

280
00:16:09,140 --> 00:16:13,380
suggests that we should find the dictionaries are faster when

281
00:16:13,380 --> 00:16:15,940
the thing is there, and the sets are faster

282
00:16:15,940 --> 00:16:18,060
when the thing is not there.

283
00:16:18,060 --> 00:16:19,980
Testing has shown this not to be true.

284
00:16:24,620 --> 00:16:31,380
So they wind up being pretty even at a first glance.

285
00:16:31,380 --> 00:16:38,160
And looking at 10 and 100 this time,

286
00:16:38,160 --> 00:16:43,700
it turns out that a set search for missing

287
00:16:43,700 --> 00:16:48,420
is a little bit faster than a dictionary search for missing.

288
00:16:48,420 --> 00:16:52,860
And a set search when it's present

289
00:16:52,860 --> 00:16:56,420
is similarly a little bit faster than a dict search

290
00:16:56,420 --> 00:16:58,780
when it's present.

291
00:16:58,780 --> 00:17:02,980
So either way, if you're just doing the membership testing,

292
00:17:02,980 --> 00:17:04,300
you do get a benefit of sets.

293
00:17:08,740 --> 00:17:12,060
So that brings us to the set operations

294
00:17:12,060 --> 00:17:13,500
that we were looking at earlier.

295
00:17:13,500 --> 00:17:17,540
How do those fare, set versus dictionary?

296
00:17:20,260 --> 00:17:27,100
So I'm looking here at set for update and dictionary

297
00:17:27,100 --> 00:17:29,500
for update.

298
00:17:29,500 --> 00:17:33,180
So we find the set updates noticeably faster

299
00:17:33,180 --> 00:17:34,780
than the dictionary update.

300
00:17:34,780 --> 00:17:37,420
Set unions just the same.

301
00:17:37,420 --> 00:17:40,500
Set intersect is faster than using a dictionary

302
00:17:40,500 --> 00:17:42,540
to implement intersect.

303
00:17:43,340 --> 00:17:50,100
It's all faster, but is it faster enough

304
00:17:50,100 --> 00:17:52,820
like we saw with lists where we might as well sort it?

305
00:17:57,660 --> 00:17:59,580
We can, of course, implement these things

306
00:17:59,580 --> 00:18:03,700
so that we use a dictionary and then put it back together

307
00:18:03,700 --> 00:18:07,580
after using the set operations on the sets.

308
00:18:07,580 --> 00:18:10,780
So set difference looks like that.

309
00:18:10,780 --> 00:18:13,300
Set intersect looks like that.

310
00:18:13,300 --> 00:18:15,220
Pretty simple.

311
00:18:15,220 --> 00:18:17,020
For symmetric diff, there's two ways

312
00:18:17,020 --> 00:18:21,580
to do it depending on whether you care about the values.

313
00:18:21,580 --> 00:18:24,180
I think if you don't care about the values,

314
00:18:24,180 --> 00:18:28,900
it might be cheating, but we'll cheat.

315
00:18:28,900 --> 00:18:31,940
So you can use the from keys to construct a dictionary where

316
00:18:31,940 --> 00:18:33,340
all the values are the same.

317
00:18:33,340 --> 00:18:38,220
And that may be interesting in one or two cases.

318
00:18:38,220 --> 00:18:41,940
The symmetric diff valves, we do have

319
00:18:41,940 --> 00:18:44,980
to go and maintain the values.

320
00:18:44,980 --> 00:18:48,580
So what I did was I went ahead and merged the dictionaries,

321
00:18:48,580 --> 00:18:52,220
did a set intersection, and then just subtracted the ones

322
00:18:52,220 --> 00:18:54,340
that were in both.

323
00:18:54,340 --> 00:18:55,540
Let's see how that does.

324
00:19:00,500 --> 00:19:03,020
Set operations, too.

325
00:19:03,020 --> 00:19:07,060
So we'll go ahead and add those.

326
00:19:11,060 --> 00:19:15,020
And it turns out by taking a dictionary over to a set

327
00:19:15,020 --> 00:19:19,060
just to do intersection, you lose all your advantage.

328
00:19:19,060 --> 00:19:21,100
Same thing with difference.

329
00:19:21,100 --> 00:19:28,180
But symmetric difference, you do get a pretty good advantage

330
00:19:28,180 --> 00:19:29,860
if you can ignore the values.

331
00:19:29,860 --> 00:19:33,100
Again, that's cheating, but cheating's fun.

332
00:19:33,100 --> 00:19:38,540
But a small advantage still even if you pull the values back out

333
00:19:38,540 --> 00:19:41,660
and put them together.

334
00:19:41,660 --> 00:19:46,580
So the conclusion of this talk was written before the talk.

335
00:19:49,220 --> 00:19:52,420
The conclusion is always use sets.

336
00:19:52,420 --> 00:19:55,180
I hope that's not too much of a surprise.

337
00:19:55,180 --> 00:19:57,820
And the big reason is to add the clarity.

338
00:19:57,820 --> 00:20:02,500
By making it a set, you tell everyone maintaining it,

339
00:20:02,500 --> 00:20:06,180
including yourself in six months,

340
00:20:06,180 --> 00:20:09,660
more about what's going to happen and what's expected.

341
00:20:09,660 --> 00:20:12,740
They are faster than lists or tuples

342
00:20:12,740 --> 00:20:17,260
when even 10 items are changed.

343
00:20:17,260 --> 00:20:23,900
So even if you have to sort or do some combination later.

344
00:20:23,900 --> 00:20:26,380
Unfortunately, I also have to say, do not use sets.

345
00:20:30,340 --> 00:20:32,860
And don't use them if you're running out of memory.

346
00:20:32,860 --> 00:20:36,500
OK, about four times as big.

347
00:20:36,500 --> 00:20:39,540
If a dict is equally idiomatic, you're

348
00:20:39,540 --> 00:20:42,460
going to have to do some pretty heavy lifting before sets

349
00:20:42,460 --> 00:20:44,500
are going to pay off.

350
00:20:44,500 --> 00:20:47,540
I think of it as the line is symmetric diff.

351
00:20:47,540 --> 00:20:51,580
If you can take the keys off, do some set operations

352
00:20:51,580 --> 00:20:55,180
that are at least as complex as symmetric diff,

353
00:20:55,180 --> 00:20:59,700
and put it back in, you will get a performance benefit.

354
00:20:59,700 --> 00:21:01,620
And you and your code reviewers will have

355
00:21:01,620 --> 00:21:05,740
to think about the clarity benefit.

356
00:21:05,740 --> 00:21:08,780
But if you're not at least manipulating

357
00:21:08,780 --> 00:21:13,340
the keys in a few operations, they're not going to pay off.

358
00:21:13,340 --> 00:21:16,900
And you can just leave it as a dictionary.

359
00:21:16,900 --> 00:21:19,300
And with that, I will take questions.

360
00:21:19,580 --> 00:21:28,500
And I do have some questions for you.

361
00:21:28,500 --> 00:21:30,860
All right, are you ready?

362
00:21:30,860 --> 00:21:31,340
No.

363
00:21:31,340 --> 00:21:32,340
Oh, yes, yes.

364
00:21:32,340 --> 00:21:36,260
OK, we get ready in the question answering position.

365
00:21:36,260 --> 00:21:39,060
How much memory do you save over a dictionary with sets?

366
00:21:39,060 --> 00:21:42,460
Any good tools to profile the real world difference?

367
00:21:42,460 --> 00:21:44,940
So there's lots of tools for memory profiling.

368
00:21:44,940 --> 00:21:47,460
Memory will work fairly well.

369
00:21:47,460 --> 00:21:51,740
And I think I have to say that.

370
00:21:51,740 --> 00:21:57,460
In terms of straight saving on the set, it was, do I have that?

371
00:22:04,340 --> 00:22:10,300
Straight saving on the set, it's like 30k on an empty one.

372
00:22:10,300 --> 00:22:15,060
And just kind of trivial.

373
00:22:15,060 --> 00:22:17,740
Let me bring this back up.

374
00:22:17,740 --> 00:22:21,380
Dictionary, 1,000 items.

375
00:22:21,380 --> 00:22:24,620
The set is 32,984.

376
00:22:24,620 --> 00:22:30,460
The dictionary, you're saving about 4k at 1,000 items.

377
00:22:30,460 --> 00:22:32,860
Right.

378
00:22:32,860 --> 00:22:35,380
What did you do to measure mutation on a tuple

379
00:22:35,380 --> 00:22:36,900
since it's immutable?

380
00:22:36,900 --> 00:22:40,140
Oh, I took them apart and put them back together.

381
00:22:40,140 --> 00:22:41,860
Yes, don't do that.

382
00:22:41,860 --> 00:22:46,500
But for completeness, I did include it in the graphs.

383
00:22:46,500 --> 00:22:49,300
How do you personally handle the non-determinism

384
00:22:49,300 --> 00:22:50,700
of set ordering across runs?

385
00:22:53,780 --> 00:22:55,980
Either avoid having it be important.

386
00:22:55,980 --> 00:22:59,420
This usually comes up in your test cases

387
00:22:59,420 --> 00:23:05,260
by either using PyTest's ability to just handle the compare for you

388
00:23:05,260 --> 00:23:09,700
or running a sort so that you can do a compare on it.

389
00:23:09,700 --> 00:23:10,700
Right.

390
00:23:10,700 --> 00:23:12,780
And then can you explain what this is?

391
00:23:12,780 --> 00:23:16,460
And it was where you used times 10 to the ninth power.

392
00:23:16,460 --> 00:23:18,180
Oh, yeah, yeah, yeah.

393
00:23:18,180 --> 00:23:26,660
So I got this tiny little number here times

394
00:23:26,660 --> 00:23:28,580
10 to the negative sixth.

395
00:23:28,580 --> 00:23:30,380
And I said, what is that?

396
00:23:30,380 --> 00:23:33,420
I'm going to be talking in 10 to the negative six seconds

397
00:23:33,420 --> 00:23:35,660
for an entire presentation.

398
00:23:35,660 --> 00:23:37,780
So I said, what is that?

399
00:23:37,780 --> 00:23:40,140
OK, 10 to the negative ninth is nanoseconds.

400
00:23:40,140 --> 00:23:43,300
So it's 1,000 nanoseconds.

401
00:23:43,300 --> 00:23:44,460
Very cool.

402
00:23:44,460 --> 00:23:47,220
Oh, it looks like I got one more question that came in

403
00:23:47,220 --> 00:23:48,780
while we've been talking.

404
00:23:48,780 --> 00:23:50,900
Did you notice any difference between the performance

405
00:23:50,900 --> 00:23:52,820
of sets and frozen sets?

406
00:23:52,820 --> 00:23:54,060
No.

407
00:23:54,060 --> 00:23:55,780
I did include them.

408
00:23:55,780 --> 00:23:59,900
They have a noise level difference in the cases

409
00:23:59,900 --> 00:24:02,340
where I included them, which are obviously

410
00:24:02,340 --> 00:24:05,860
before I start mutating.

411
00:24:05,860 --> 00:24:07,740
Here it is.

412
00:24:07,740 --> 00:24:10,580
And zoom it in.

413
00:24:10,580 --> 00:24:11,540
Next one to zoom in.

414
00:24:15,140 --> 00:24:20,700
So constructing the frozen set is 7,000 nanoseconds.

415
00:24:20,700 --> 00:24:25,740
And constructing the set is 6,000.

416
00:24:25,740 --> 00:24:27,660
6.7 thousand.

417
00:24:27,660 --> 00:24:30,860
So there is a slight difference there, but.

418
00:24:30,860 --> 00:24:33,580
Frozen sets are still good for building a snowman,

419
00:24:33,580 --> 00:24:36,100
but I had to let it go.

420
00:24:36,100 --> 00:24:36,740
Last one.

421
00:24:36,740 --> 00:24:37,820
This will be the last one.

422
00:24:37,820 --> 00:24:40,300
Can you expand into that use case of exclude list

423
00:24:40,300 --> 00:24:42,540
you mentioned at the beginning and any other real world

424
00:24:42,540 --> 00:24:45,380
case that you've used them and liked it?

425
00:24:45,380 --> 00:24:46,500
Yeah, yeah.

426
00:24:46,500 --> 00:24:52,380
So if you're doing some testing and you have said,

427
00:24:52,380 --> 00:24:54,820
I'm going to test everything, and in our case,

428
00:24:54,820 --> 00:24:58,500
it was a number of machines, I'm going to test all the machines,

429
00:24:58,500 --> 00:25:01,980
except I know this one is a special case.

430
00:25:01,980 --> 00:25:06,060
So if anybody ever wants to run a test on that, just don't.

431
00:25:06,140 --> 00:25:09,020
Or just return an error that says this machine is not

432
00:25:09,020 --> 00:25:11,780
used for testing.

433
00:25:11,780 --> 00:25:14,060
So what we did was we defined an exclude list

434
00:25:14,060 --> 00:25:16,060
at a pretty high level.

435
00:25:16,060 --> 00:25:18,660
And then down in the code where it actually figured out

436
00:25:18,660 --> 00:25:20,740
which machines it was asked for, it goes,

437
00:25:20,740 --> 00:25:22,460
I'm about to run this machine.

438
00:25:22,460 --> 00:25:26,020
Is it in the exclude list?

439
00:25:26,020 --> 00:25:27,060
Yes.

440
00:25:27,060 --> 00:25:29,540
Then I will skip it.

441
00:25:29,540 --> 00:25:30,300
Very cool.

442
00:25:30,300 --> 00:25:32,660
Well, thank you very much.

