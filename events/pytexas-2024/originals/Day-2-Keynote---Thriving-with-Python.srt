1
00:00:00,000 --> 00:00:14,000
Thank you, everybody. It is my absolute honor to be here. I'm really glad that the last couple days I've got to spend with a bunch of you and got to meet a fair number of you.

2
00:00:14,000 --> 00:00:24,000
The tutorials were absolutely amazing and really, really high quality. The talks yesterday and the lightning talks were great.

3
00:00:25,000 --> 00:00:46,000
This is just a fantastic conference and I'm really honored and grateful to be here. At the end of my keynote, I have quite a love for Bucky and I was told we could put stickers on him to commemorate this wonderful event.

4
00:00:46,000 --> 00:01:06,000
Hopefully more will be added over time. Today my talk is called Thriving with Python in a Polyglot World. It's not a beginner talk, it's not an advanced talk, it's not a technical talk, it's not a non-technical talk.

5
00:01:06,000 --> 00:01:17,000
It really has a mix of everything. So hopefully wherever you are in your Python journey, even if you haven't started yet, hopefully some of this will resonate with you.

6
00:01:17,000 --> 00:01:32,000
And Heather's talk yesterday really touched my heart and I think you'll see maybe little snippets of what she was communicating in that talk, but do watch her talk if you didn't see it yesterday.

7
00:01:32,000 --> 00:01:49,000
So most mornings I do not spend on stage like this. I spend walking on the beach and it's my chance to think about tech, people, what's going on in the world and sometimes just the cool stuff that I see.

8
00:01:49,000 --> 00:02:10,000
And one thing that I've been thinking about a lot is where does Python fit in this world of languages and should I be switching over to Rust, should I only use Julia, should I be using R, JavaScript, TypeScript?

9
00:02:10,000 --> 00:02:22,000
There's a lot of languages out there and although I love Python for many, many reasons, I actually like a lot of other languages because I just want to get stuff done.

10
00:02:22,000 --> 00:02:37,000
And depending on what I want to get done, JavaScript might be a better choice, C++ maybe, but maybe not. And not a knock against C++, I did it for many years and I still do it.

11
00:02:37,000 --> 00:02:56,000
So I'm Carol Willing. I tend to like the beach and all things related to water. Mason did a good job explaining who I am and what I've done, but really what I am is a beginner every day.

12
00:02:56,000 --> 00:03:11,000
And by that I mean I don't know what it takes to succeed tomorrow. I have some ideas, but I'm constantly learning new things. There are things that are really hard.

13
00:03:11,000 --> 00:03:22,000
It took me a long time to wrap my head around JavaScript and TypeScript and the tooling around it and I really relied on a lot of other people to help me get there.

14
00:03:22,000 --> 00:03:33,000
So my hope today is that I will be able to help you share my knowledge and use it for what it's worth. It might be worth one cent, it might be worth more, I don't know.

15
00:03:33,000 --> 00:03:48,000
But to sort of highlight some of the pitfalls that you might run into over your careers or adventures with tech.

16
00:03:48,000 --> 00:04:01,000
And I'm 58 years old. I've seen a lot of stuff and I'm hoping that I can share some basic tips on what I think has helped me persist.

17
00:04:01,000 --> 00:04:17,000
And I think they're universal things that other people could apply as well. And then what I'm going to do is take three particular pitfalls and talk about some of the things about how Python relates to it and other languages relate to it.

18
00:04:17,000 --> 00:04:30,000
And if I use jargon that people don't understand, just raise your hand because I try really hard not to get too in the weeds.

19
00:04:30,000 --> 00:04:41,000
But I also recognize that people are, you know, advanced programmers as well and they would like to learn about what's coming out in Python and what's on the horizon.

20
00:04:41,000 --> 00:04:56,000
So with that, how do we choose which languages to use? There are a lot of different types of languages and many problems could be solved with any language.

21
00:04:56,000 --> 00:05:02,000
You know, some of the ones that are more performant are the ones like Rust and Go and C and C++.

22
00:05:02,000 --> 00:05:16,000
Python is actually pretty performant now as well. And, you know, other things like JavaScript and TypeScript, they're your gateway into working in the browser, working in mobile.

23
00:05:16,000 --> 00:05:31,000
And, you know, the other languages all serve their purposes as well. So my takeaway from this is choose whatever works for the thing that you need to do.

24
00:05:31,000 --> 00:05:50,000
And hopefully Python will be part of that. So the three pitfalls that I'm going to talk about today are chasing speed, which is a very common one that we hear all the time in the media, swooning over the shiny.

25
00:05:50,000 --> 00:05:55,000
There's this nice shiny thing. Oh, my gosh, I should be using that now.

26
00:05:55,000 --> 00:06:08,000
And then the third pitfall, which I think is often the hardest, is hype and the fear of missing out. And, you know, you only have so many hours in the day.

27
00:06:08,000 --> 00:06:19,000
And, oh, my goodness, open AI, chat GPT, what's going to happen? I should switch to it now. I should learn everything. Well, we'll see about that.

28
00:06:19,000 --> 00:06:38,000
So I decided to bring some friends along on this journey because people like Lynn, who I've known since 2014, they've played such a huge part in my confidence with Python, in my enjoyment of working with Python.

29
00:06:38,000 --> 00:06:57,000
And even if you don't have a Python friend right now, we have lots of ducks. And for those of you that have done Django girls or something like that, ducks are when you try and explain a problem that you're having with coding to a duck.

30
00:06:57,000 --> 00:07:12,000
And the thinking is, as you talk through it, maybe the duck will respond to you. I don't know. But you usually find the answer as you kind of talk through the problem.

31
00:07:12,000 --> 00:07:28,000
So I have a bunch of ducks. And as we look forward to next year or tomorrow, what should you do? What should I do with Python and other languages?

32
00:07:28,000 --> 00:07:43,000
So I decided to ask some of the experts. And these four gentlemen have each created some more than one. Languages on the far left is Guido Van Rossum, which he started Python.

33
00:07:43,000 --> 00:07:58,000
And for those of you that are curious whether he knows everything about Python, the answer is no. Python has gotten so big that no one person can understand everything about Python.

34
00:07:58,000 --> 00:08:10,000
James Gosling, Anders Heilsberg, Larry Wall, and myself. And I've done this panel twice, which I was super nervous about.

35
00:08:10,000 --> 00:08:24,000
And one of the girls that I had known since she was like eight years old lived up in Seattle. And I was like, I'm really nervous. I've got huge imposter syndrome.

36
00:08:25,000 --> 00:08:35,000
And she's like, why? You know, she works in tech now and it's very accomplished in her own right. And I'm like, because they've created languages.

37
00:08:35,000 --> 00:08:44,000
And she's like, yeah, but none of them worked on Jupiter and got an ACM award for the impact that Jupiter had.

38
00:08:44,000 --> 00:08:58,000
I'm like, oh, talk about being schooled by the, you know, person you watched grow up from a little child. And, you know, it helped having her in the audience helped as well.

39
00:08:58,000 --> 00:09:18,000
So let's bring these folks along with us because one of the things I learned from talking with them is one of the things they value most about the languages they created are the community and the people who have contributed and used the libraries or the languages.

40
00:09:18,000 --> 00:09:33,000
And I was a little surprised that that was universally the most important thing to them. You know, change is going to happen. That's the other thing. And you can't predict the future.

41
00:09:33,000 --> 00:09:48,000
So we're going to take them on our little journey. And for a minute, I'm going to take you back to my start in programming. And I've had a very untraditional path.

42
00:09:48,000 --> 00:10:09,000
I actually took a 15-year break from tech to raise my kids because that's what rocked my world. So I make it a point to share that because there's a lot of myth around, oh, my gosh, you've left tech for any reason for a month, a year, three years, and you can't come back.

43
00:10:09,000 --> 00:10:24,000
And that is patently false. It may take work. It may take help from folks at a user group. But you absolutely can. And it won't look the same as when you left.

44
00:10:24,000 --> 00:10:47,000
But I'll tell you, the only thing that really changed when I came back was learning new languages. That wasn't hard. Learning Git. Because when I left, it was like RCS, CVS, and SVN. And Git, I could not wrap my head around the mental model.

45
00:10:47,000 --> 00:11:03,000
Push, pull, rebase. It was confusing. And it took a lot of folks sitting with me, advanced programmers, saying, oh, you don't want to do that. Or don't follow all the things that you Google on Stack Overflow.

46
00:11:03,000 --> 00:11:13,000
Find one workflow, stick with it until you really feel confident, and then start experimenting. And that's what I did, and it was super helpful.

47
00:11:13,000 --> 00:11:31,000
So we're going to go back to a time before many of you were even born, which is kind of cool. And this is actually me at the age of 11 when I was in middle school and in seventh grade.

48
00:11:31,000 --> 00:11:48,000
And that was not when I started programming. I actually started programming in fifth grade. I grew up in the shadow of Bell Labs. And much like we do today, there was an outreach program to help kids learn how to program.

49
00:11:48,000 --> 00:12:00,000
Now, programming was different then because when I was at Bell Labs, it was on a big mainframe. It didn't have a screen. It kind of had like this typewriter thing.

50
00:12:00,000 --> 00:12:13,000
But one of the things that I thought was really cool is they were working on this music machine that would do all kinds of cool stuff. And that really fascinated me because I'm really into music.

51
00:12:13,000 --> 00:12:29,000
So anytime I try and learn a new language, a new library, I try and see, okay, can I apply music to it somehow? And when I was in seventh grade, the Apple II, our school had one of the first ones.

52
00:12:29,000 --> 00:12:43,000
And I was one of the first people that got to use it because as an 11 year old, I went to public school. But the public school I went to had a pullout program for people that were good in math.

53
00:12:43,000 --> 00:12:57,000
And so, you know, there were four of us in the class, three boys and myself. And they said, I walked into the class because I did not want to be there.

54
00:12:57,000 --> 00:13:08,000
I wanted to be with my friends, my soccer team, doing other fun stuff because this was a half a day kind of thing. And I walk in and they're like, we're playing Dungeons and Dragons.

55
00:13:08,000 --> 00:13:18,000
Do you want to play? And nothing against Dungeons and Dragons because I actually think it is kind of cool. But at that point in my life, I was like, no.

56
00:13:18,000 --> 00:13:34,000
And so the teacher was like, well, you need to find something to do for this quarter. And so in the corner was the boxed up Apple. And I said, can I do that?

57
00:13:34,000 --> 00:13:47,000
She's like, yeah. And the other thing was, you know, doing this college psychology class. So I'm not sure like how the two relate, but it was an experience.

58
00:13:47,000 --> 00:14:00,000
And I say that because back then we didn't have tutorials. You had to just explore and experiment. And so what do you do when you get a computer for the first time?

59
00:14:00,000 --> 00:14:14,000
You try and make a game. And so I ported Atari's Breakout game to the Apple II. And it took me probably six months, but it was so cool to kind of explore.

60
00:14:14,000 --> 00:14:23,000
And that was something that has always resonated with me, that sense of exploration, experimentation.

61
00:14:23,000 --> 00:14:36,000
So in the 80s, college, grad school, I was doing not computer science. I did electrical engineering and then I did applied economics.

62
00:14:36,000 --> 00:14:45,000
And but I was always programming. And those were the languages that I started using in the 80s.

63
00:14:45,000 --> 00:14:56,000
Mobile phones were just coming on board at the end of the 80s. There were no smartphones. There was no web. There was no Google. There was no Linux. There was no Python.

64
00:14:56,000 --> 00:15:07,000
However, there was artificial intelligence. So when we go back to the hype, artificial intelligence has been around for a long time.

65
00:15:07,000 --> 00:15:15,000
And this is Byte Magazine was a very popular magazine because we didn't have the Internet. We thumbed through these. We wait until it came out each month.

66
00:15:15,000 --> 00:15:23,000
And then we tried whatever we saw in there. And Jeffrey Hinton, you know, had an article in there.

67
00:15:23,000 --> 00:15:31,000
And many of the same artificial intelligence questions that are being asked now were asked back then.

68
00:15:31,000 --> 00:15:41,000
We didn't have the compute power that we have now, but it's not as new as people would make you believe.

69
00:15:41,000 --> 00:15:50,000
So through the decades, life took me in many different directions. And these are all languages that I've used to some degree.

70
00:15:50,000 --> 00:15:54,000
It's not when the languages came out, but when I first started using them.

71
00:15:54,000 --> 00:16:05,000
So I came to Python in probably 2012 by accident and really loved it and loved the community even more.

72
00:16:05,000 --> 00:16:12,000
And what I loved about Python was it was visually clean.

73
00:16:12,000 --> 00:16:21,000
And for somebody who has a little bit of an ADD brain and things get overwhelming if there's too much stuff on the page,

74
00:16:21,000 --> 00:16:27,000
Python was a totally different look than other languages that I had used in the past.

75
00:16:27,000 --> 00:16:38,000
It started reminding me of using that Apple II computer. And so I decided, OK, let's see where this journey goes.

76
00:16:38,000 --> 00:16:49,000
And what I saw over this time was lots of paradigm shifts. And I think we're at a paradigm shift now.

77
00:16:49,000 --> 00:16:58,000
There is definitely going to be an impact of LLMs and the current state of machine learning on us.

78
00:16:58,000 --> 00:17:10,000
I don't know what it's going to be, but I do know from all these other paradigm shifts that I saw that there was always uncertainty.

79
00:17:10,000 --> 00:17:17,000
And it was a lot of trial and error at start and then learning from that and continuing to learn.

80
00:17:18,000 --> 00:17:24,000
So how does this relate to us? And we're going to bring our little Pi Texas duck along with us on this journey.

81
00:17:24,000 --> 00:17:31,000
And I think it starts with following your North Stars.

82
00:17:31,000 --> 00:17:41,000
And by that, I mean start first by embracing a musician's mindset for mistakes.

83
00:17:41,000 --> 00:17:48,000
When you're learning an instrument, you are not an expert player at the start.

84
00:17:48,000 --> 00:17:54,000
You make lots of mistakes, make lots of mistakes, even when you've been playing for a while.

85
00:17:54,000 --> 00:18:03,000
And one of the things my son plays trombone and his instructors always said, just play loud and proud.

86
00:18:03,000 --> 00:18:09,000
So even if you make those mistakes, just keep going. And there's something to be said for that.

87
00:18:09,000 --> 00:18:14,000
And I kind of have that's resonated with me throughout my career.

88
00:18:14,000 --> 00:18:24,000
Another thing is when kind of stuck or in doubt or kind of perplexed as to what to do next,

89
00:18:24,000 --> 00:18:33,000
I found that taking a baby step in any direction is a good thing to do.

90
00:18:33,000 --> 00:18:37,000
And Lynn talked about design yesterday.

91
00:18:37,000 --> 00:18:43,000
There is a technique within design and creative problem solving called scamper.

92
00:18:43,000 --> 00:18:49,000
And I say this, I should point it out because I think it helps with debugging.

93
00:18:49,000 --> 00:18:54,000
It's, you know, look at things, look at the problem from different perspectives.

94
00:18:54,000 --> 00:18:57,000
Can you substitute things? Can you combine things?

95
00:18:57,000 --> 00:19:02,000
Maybe I need to take something out. Maybe I need to reverse the order of things.

96
00:19:02,000 --> 00:19:12,000
And it's just a helpful tool. But probably the most important North Star for me has been understanding my why.

97
00:19:12,000 --> 00:19:23,000
And for me, what has always been my North Star is making learning accessible to everyone.

98
00:19:24,000 --> 00:19:32,000
And if I look through the sum total of my careers, including the Jupyter notebooks,

99
00:19:32,000 --> 00:19:37,000
it wasn't from the standpoint of, oh, I want to make really cool that everybody loves.

100
00:19:37,000 --> 00:19:47,000
It was, OK, how can I get these concepts to people who maybe aren't computer developers so that they can use it?

101
00:19:47,000 --> 00:19:49,000
And it's really that sharing of knowledge.

102
00:19:49,000 --> 00:19:57,000
So understanding your why is important because when you get stuck, you need to know why you're persisting.

103
00:19:57,000 --> 00:20:03,000
So let's all today tackle some pitfalls and we'll kind of go through them fairly quickly.

104
00:20:03,000 --> 00:20:06,000
So hopefully we'll have a little time for questions.

105
00:20:06,000 --> 00:20:13,000
And that first pitfall was chasing speed. We hear sometimes Python's a slow language.

106
00:20:14,000 --> 00:20:20,000
Well, what does that even mean? Because there's questions to ponder when you talk about speed.

107
00:20:20,000 --> 00:20:27,000
What are you measuring? How do you measure it? What's fast enough?

108
00:20:27,000 --> 00:20:37,000
And then those four things, performance, reliability, flexibility, security, all have to fit in that equation of speed.

109
00:20:37,000 --> 00:20:43,000
And so it's all about making tradeoffs, which language you choose.

110
00:20:43,000 --> 00:20:48,000
You're making a tradeoff each time you choose a language or a library even.

111
00:20:48,000 --> 00:20:57,000
So how do we make Python feel speedier? I guess if that's what you want to say, use a recent Python.

112
00:20:57,000 --> 00:21:01,000
It's much more performant now than it was five years ago.

113
00:21:01,000 --> 00:21:07,000
And then if that's not fast enough, try pie pie.

114
00:21:07,000 --> 00:21:11,000
And then there's other things you can do as well.

115
00:21:11,000 --> 00:21:23,000
You can profile your code and so measure how it's performing, figure out where the slow spots are and then optimize.

116
00:21:24,000 --> 00:21:30,000
So one of the things that I kind of like and I'm going to point it out here is pie spy.

117
00:21:30,000 --> 00:21:36,000
And one of the things I like about it is you can use it on a running process.

118
00:21:36,000 --> 00:21:52,000
And just by having that one line pie spy record dash dash pit and then the process ID of the process, it will generate a flame graph, which then let you see where the slow spots are.

119
00:21:52,000 --> 00:22:01,000
And there are many different profiling tools, but I encourage you to check them out and measure first before you optimize.

120
00:22:01,000 --> 00:22:16,000
And then I've included I'm going to put the slide deck up a few real world examples of people who've walked through profiling their code and optimizing it in different ways.

121
00:22:16,000 --> 00:22:21,000
And this was just one example that goes into very, very huge depth.

122
00:22:21,000 --> 00:22:27,000
But another person's work that I really respect is either Mars.

123
00:22:27,000 --> 00:22:30,000
He has a website called Python speed dot com.

124
00:22:30,000 --> 00:22:44,000
Those of you that are in the data science arena should definitely check it out because he's got a lot of well vetted, well researched approaches for how to speed things up.

125
00:22:44,000 --> 00:22:51,000
And that's the benefit of having somebody else's knowledge.

126
00:22:51,000 --> 00:23:02,000
There's only so many things I can look at in a day, but I can definitely use other people's stuff to get even better performance.

127
00:23:02,000 --> 00:23:07,000
GPUs and jits are another way.

128
00:23:07,000 --> 00:23:12,000
Throw hardware at it, throw a different technology at it.

129
00:23:12,000 --> 00:23:18,000
A lot of you who are computer gamers might have Nvidia GPU cards in your systems.

130
00:23:18,000 --> 00:23:24,000
It's actually used quite often for machine learning, deep learning.

131
00:23:24,000 --> 00:23:33,000
And there's a library called Numba, which will speed up things just by adding a decorator.

132
00:23:33,000 --> 00:23:36,000
And you don't have to add a decorator to all your functions.

133
00:23:36,000 --> 00:23:39,000
You can just add it to the slow one.

134
00:23:39,000 --> 00:23:44,000
So something to keep in mind.

135
00:23:44,000 --> 00:23:49,000
Moshe gave a talk yesterday and I've respected his work for a long time.

136
00:23:49,000 --> 00:23:54,000
And when do you bring into Rust into your Python code?

137
00:23:54,000 --> 00:23:57,000
And I think that just sums it up.

138
00:23:57,000 --> 00:23:59,000
Prototype in Python.

139
00:23:59,000 --> 00:24:03,000
And if you have a performance bottleneck, then look at Rust.

140
00:24:04,000 --> 00:24:14,000
And Rust can very straightforwardly wrap your code so that you can have it.

141
00:24:14,000 --> 00:24:19,000
You're still using Python, but you're wrapping that Rust code so Python can use it.

142
00:24:19,000 --> 00:24:22,000
And the docs are great.

143
00:24:22,000 --> 00:24:28,000
And there are some really good examples out there.

144
00:24:28,000 --> 00:24:31,000
Other things, we've got a lot of Bloomberg folks here.

145
00:24:31,000 --> 00:24:36,000
Pablo is a good friend of mine and they've put an open source.

146
00:24:36,000 --> 00:24:39,000
Thank you, Bloomberg, for open sourcing.

147
00:24:39,000 --> 00:24:41,000
Two really cool tools.

148
00:24:41,000 --> 00:24:46,000
One's a memory profile and others like a stack trace debugger.

149
00:24:46,000 --> 00:24:57,000
And they're sort of game changers in the fact that they don't add complexity, if you will.

150
00:24:57,000 --> 00:25:02,000
They just give you more knowledge and let you make better decisions.

151
00:25:02,000 --> 00:25:04,000
So check that out.

152
00:25:04,000 --> 00:25:07,000
I really like Ruff.

153
00:25:07,000 --> 00:25:21,000
There's a question of do you, Ruff lets you like lint and apply formatting and run a bunch of the tools that were individual Python tools quicker.

154
00:25:21,000 --> 00:25:25,000
And do you need to run it quicker?

155
00:25:25,000 --> 00:25:27,000
We were having this discussion yesterday.

156
00:25:27,000 --> 00:25:28,000
It depends.

157
00:25:28,000 --> 00:25:35,000
I mean, it's nice in CI if you have things that run really slowly to maybe accelerate it.

158
00:25:35,000 --> 00:25:42,000
And if you're paying the bill to GitHub and others for the runners, it might be nice to cut some time off.

159
00:25:42,000 --> 00:25:47,000
Playwright, huge fan, cuts development time.

160
00:25:47,000 --> 00:25:51,000
And then the other thing is prototyping speed.

161
00:25:52,000 --> 00:26:00,000
Something with Python that I think often gets overlooked is how quickly you can prototype relative to other languages.

162
00:26:00,000 --> 00:26:09,000
And a big part of it is because of the many, many libraries that we have out there and the structure of the language itself.

163
00:26:10,000 --> 00:26:21,000
And, you know, Jupyter Notebooks, I think, has been a game changer for providing examples to people, letting people run code on the fly.

164
00:26:21,000 --> 00:26:26,000
I don't typically put notebooks in production, but some people do.

165
00:26:26,000 --> 00:26:31,000
So it's totally cool to use it and prototype it and then move to something else.

166
00:26:31,000 --> 00:26:36,000
So the next pitfall is swooning over the shiny.

167
00:26:36,000 --> 00:26:52,000
And, you know, this is where media, the bird site and others really hype up what's out there, what you should be using.

168
00:26:52,000 --> 00:27:04,000
And in my experience, the grass is always greener in another language until maybe you start using it.

169
00:27:04,000 --> 00:27:11,000
And I'll use packaging for an example, not because I think packaging is bad, actually.

170
00:27:11,000 --> 00:27:16,000
Huge props to the folks that are working on it.

171
00:27:16,000 --> 00:27:19,000
But some people say, oh, Rust is so much faster, blah, blah, blah, blah.

172
00:27:19,000 --> 00:27:21,000
Well, it's a newer language.

173
00:27:21,000 --> 00:27:26,000
They will have more fragmentation over time when it comes to packaging.

174
00:27:26,000 --> 00:27:30,000
Somebody told me JavaScript, it's so easy.

175
00:27:30,000 --> 00:27:31,000
You just install it.

176
00:27:31,000 --> 00:27:36,000
I can tell you from working with JavaScript in production, it is not easy.

177
00:27:36,000 --> 00:27:40,000
There's like five different ways to install many different things.

178
00:27:40,000 --> 00:27:51,000
And there's less, there's as much confusion there as which tool to choose in Python.

179
00:27:51,000 --> 00:27:55,000
And packaging is a hard, complicated problem.

180
00:27:55,000 --> 00:27:58,000
So maybe it's worth jumping to another language.

181
00:27:58,000 --> 00:28:00,000
Maybe not.

182
00:28:00,000 --> 00:28:07,000
We've actually hit the point where if you're writing a pure Python package, it works pretty well.

183
00:28:07,000 --> 00:28:11,000
And huge thanks to all the people who have been working this past decade on Python

184
00:28:11,000 --> 00:28:16,000
packaging and installation and all the things.

185
00:28:16,000 --> 00:28:22,000
It has really come a long way in the last decade.

186
00:28:22,000 --> 00:28:23,000
It's not perfect.

187
00:28:23,000 --> 00:28:25,000
We've still got work to do.

188
00:28:25,000 --> 00:28:30,000
I think Bernard's talk yesterday was probably the best talk I've ever seen about

189
00:28:30,000 --> 00:28:35,000
maintainers and the pragmatic side of maintaining projects.

190
00:28:35,000 --> 00:28:41,000
So, you know, keep that in mind as you create your own projects and then reach out and

191
00:28:41,000 --> 00:28:46,000
thank a maintainer of a project that you're using and you get lots of value.

192
00:28:46,000 --> 00:28:49,000
We get lots of complaints.

193
00:28:49,000 --> 00:28:54,000
The number of complaints to the number of thank yous, like genuine thank yous, like,

194
00:28:54,000 --> 00:28:57,000
hey, this helped me save, blah, blah, blah, blah.

195
00:28:57,000 --> 00:29:00,000
Not just thanks for the pull request or whatever.

196
00:29:00,000 --> 00:29:03,000
Those we get a lot of.

197
00:29:03,000 --> 00:29:07,000
But we don't get a lot of the how it has impacted your project.

198
00:29:07,000 --> 00:29:11,000
So take a moment and share that.

199
00:29:11,000 --> 00:29:18,000
Pi OpenSci is a nonprofit that I'm working with that is helping to share education

200
00:29:18,000 --> 00:29:23,000
about with scientists about how to package a project.

201
00:29:23,000 --> 00:29:31,000
And it's something that I think is needed because, you know,

202
00:29:31,000 --> 00:29:36,000
packaging when you're a maintainer, you're focused on fixing bugs and all the things

203
00:29:36,000 --> 00:29:38,000
that we went through yesterday.

204
00:29:38,000 --> 00:29:43,000
Documentation is a hard thing to do.

205
00:29:43,000 --> 00:29:51,000
Writing good documentation that is understandable, accessible, is not trivial.

206
00:29:51,000 --> 00:29:55,000
And I love writing documentation.

207
00:29:55,000 --> 00:30:01,000
The number of times that I have been told, yeah, that's not technical.

208
00:30:01,000 --> 00:30:02,000
Okay.

209
00:30:02,000 --> 00:30:10,000
Well, can you please define to me what you're using as the benchmark for technical?

210
00:30:10,000 --> 00:30:12,000
Because I can code.

211
00:30:12,000 --> 00:30:13,000
I love coding.

212
00:30:13,000 --> 00:30:15,000
I also love writing.

213
00:30:15,000 --> 00:30:16,000
I love teaching.

214
00:30:16,000 --> 00:30:23,000
And, you know, all of these aspects of development matter.

215
00:30:23,000 --> 00:30:32,000
So, you know, think about what's important to get people to use your project.

216
00:30:32,000 --> 00:30:35,000
And I think documentation is a big part of it.

217
00:30:35,000 --> 00:30:42,000
And I used to tell my students at Cal Poly, if you can't install it, it's a useless project.

218
00:30:42,000 --> 00:30:46,000
So definitely read me his installation.

219
00:30:46,000 --> 00:30:49,000
There's some new tools that are coming up.

220
00:30:49,000 --> 00:30:52,000
I'm not going to go too much into them.

221
00:30:52,000 --> 00:30:54,000
Pixie is one of them.

222
00:30:54,000 --> 00:30:57,000
It's somebody who's been in the scientific Python ecosystem for a while.

223
00:30:57,000 --> 00:30:59,000
We'll see.

224
00:30:59,000 --> 00:31:03,000
It's worth playing around if you're in that area.

225
00:31:03,000 --> 00:31:14,000
I stumbled across a development tool that Ruff is using that's sort of a playground for

226
00:31:14,000 --> 00:31:24,000
generating abstracts and text trees, which, jargon alert, is basically how you parse and

227
00:31:24,000 --> 00:31:29,000
display the different words in a language.

228
00:31:29,000 --> 00:31:35,000
And I've got a better example here, like an expression or an import statement.

229
00:31:35,000 --> 00:31:39,000
All gets broken down into smaller and smaller chunks.

230
00:31:39,000 --> 00:31:47,000
And so for those technical folks who are more advanced in your journey and have worked with

231
00:31:47,000 --> 00:31:53,000
wondering how is this all working behind the scenes, this is kind of cool because it gives you a way

232
00:31:53,000 --> 00:31:55,000
to display it easily.

233
00:31:55,000 --> 00:31:58,000
There is a Python library that you could do the same thing.

234
00:31:58,000 --> 00:32:01,000
This is a little more visual.

235
00:32:01,000 --> 00:32:12,000
PIO 3 is the library that is pretty much most widely used for packaging up REST code to run within

236
00:32:12,000 --> 00:32:14,000
Python.

237
00:32:14,000 --> 00:32:19,000
And Pydantic is a very popular library now along with fast API.

238
00:32:19,000 --> 00:32:22,000
Pydantic is using PIO 3.

239
00:32:22,000 --> 00:32:28,000
And they've got really good best practices on how to use it.

240
00:32:28,000 --> 00:32:32,000
So I point that out for those of you that want to use that.

241
00:32:32,000 --> 00:32:36,000
This is something I added to my website.

242
00:32:36,000 --> 00:32:42,000
I was working with somebody locally who had two daughters that were six and eight.

243
00:32:42,000 --> 00:32:48,000
And she had been telling them about PyLadies and the impact that PyLadies has had.

244
00:32:48,000 --> 00:32:56,000
And I said, you know, it would be really cool to make an example that they could just run without having

245
00:32:56,000 --> 00:33:04,000
to install anything, without having to all in the browser on their phone.

246
00:33:04,000 --> 00:33:10,000
And so I added this to my website using Jupyter Lite, which also uses PyDyde and WebAssembly.

247
00:33:10,000 --> 00:33:17,000
And we'll see if the demo, folks, this made my laptop die.

248
00:33:17,000 --> 00:33:26,000
But basically, you're basically running Jupyter Lab in the browser without having to install anything.

249
00:33:26,000 --> 00:33:30,000
I might have just stopped it.

250
00:33:30,000 --> 00:33:32,000
Maybe it's still going.

251
00:33:32,000 --> 00:33:37,000
This just about killed my laptop by just putting the GIF in.

252
00:33:37,000 --> 00:33:39,000
It works fine on the real website.

253
00:33:39,000 --> 00:33:43,000
But basically, you're going through and you're implementing the steps.

254
00:33:44,000 --> 00:33:48,000
And not just in Python.

255
00:33:48,000 --> 00:33:54,000
One of the examples I had was actually I'm going to give up on this slide completely.

256
00:33:54,000 --> 00:34:06,000
But processing p5.js is a great way because it's very visual to get folks that are new to computing to build confidence.

257
00:34:06,000 --> 00:34:08,000
And it comes with a lot of examples.

258
00:34:08,000 --> 00:34:15,000
So, you know, putting that on a website probably took a half an hour.

259
00:34:15,000 --> 00:34:18,000
The documentation is really good.

260
00:34:18,000 --> 00:34:25,000
And I think most of the folks that are in here probably could do it.

261
00:34:25,000 --> 00:34:32,000
And those of you that are newer probably could do it with pairing with somebody else.

262
00:34:32,000 --> 00:34:41,000
So if you have any interest in that, our automation panda did a great Playwright talk.

263
00:34:41,000 --> 00:34:45,000
And I love Playwright for many different reasons.

264
00:34:45,000 --> 00:35:00,000
One thing I will point out is that there's actually a Playwright debugger that is really good and interesting because it lets you step through the tests and see what's going on.

265
00:35:00,000 --> 00:35:09,000
So just like a regular code debugger, it will go and it will highlight where it is and show you on the page where it is.

266
00:35:09,000 --> 00:35:17,000
It will also have like a log of everything that it had done, which is kind of cool when you're debugging.

267
00:35:17,000 --> 00:35:22,000
And it's just fast and the barrier to entry is relatively low.

268
00:35:22,000 --> 00:35:27,000
So my last pitfall is hype and the fear of missing out.

269
00:35:27,000 --> 00:35:32,000
And import any gravity.

270
00:35:32,000 --> 00:35:36,000
We can all fly. We can skip all the TSA lines.

271
00:35:36,000 --> 00:35:39,000
It's all good. Life is fine.

272
00:35:39,000 --> 00:35:45,000
We can all go home. I wish it were that simple, but it's not.

273
00:35:45,000 --> 00:35:56,000
And Sandy Metz, who's written some great books in the Ruby ecosystem, told me once over breakfast.

274
00:35:56,000 --> 00:35:59,000
I'm like, how do you keep up with all this stuff?

275
00:35:59,000 --> 00:36:02,000
She's like, I just pretend it's news.

276
00:36:02,000 --> 00:36:04,000
And I was like, who does that mean?

277
00:36:04,000 --> 00:36:07,000
And she's like, well, you know, regular news.

278
00:36:07,000 --> 00:36:10,000
Some of it you listen to, some of it you don't.

279
00:36:10,000 --> 00:36:12,000
You use it when you want to use it.

280
00:36:12,000 --> 00:36:18,000
And that was really helpful for me because it took the pressure off of, oh, my gosh, I have to stay up to date.

281
00:36:18,000 --> 00:36:21,000
I have to stay up to date. I have to stay up to date.

282
00:36:22,000 --> 00:36:32,000
Remember a year ago, the hype about how chat GBT and OpenAI was taking the world by storm and it will take all of our jobs and this and that.

283
00:36:32,000 --> 00:36:36,000
These articles came out in the last few days.

284
00:36:36,000 --> 00:36:41,000
So we've now gone to the other side of, oh, AI is a hype, blah, blah, blah, blah, blah.

285
00:36:41,000 --> 00:36:47,000
This is actually pretty typical for when you see a paradigm shift.

286
00:36:47,000 --> 00:36:58,000
You will kind of oscillate around where you ultimately wind up a year or so, two years down the road, lots of new libraries.

287
00:36:58,000 --> 00:37:03,000
Some are open source, some are not open source.

288
00:37:03,000 --> 00:37:12,000
You know, many of the other talks today and yesterday will do a better job and go in more depth.

289
00:37:13,000 --> 00:37:17,000
I do want to highlight the work of a friend of mine.

290
00:37:17,000 --> 00:37:38,000
Dr. Brandeis Marshall wrote a book last year, came out last year, and it really talks about how do you bring these data science skills like life skills to the larger population of people who will be impacted by

291
00:37:38,000 --> 00:37:44,000
the tools that we write, the algorithms that we deploy.

292
00:37:44,000 --> 00:37:56,000
And I think it's really important because maybe I'm just the annoying person in the room as a kid that always asked why, why, why are we doing that that way?

293
00:37:56,000 --> 00:37:59,000
Why? What is the impact of that?

294
00:37:59,000 --> 00:38:09,000
And I think, you know, making things accessible to more people demystifies it.

295
00:38:09,000 --> 00:38:12,000
It adds more transparency.

296
00:38:12,000 --> 00:38:23,000
And I think it just brings the level of using these tools up.

297
00:38:23,000 --> 00:38:33,000
When I did my PyCon talk, I talked about different trends that we're seeing in the industry and critical global issues.

298
00:38:33,000 --> 00:38:36,000
I am concerned about all of them.

299
00:38:36,000 --> 00:38:41,000
I program to change the world through learning.

300
00:38:41,000 --> 00:38:50,000
And whatever your view is of all of these things, you're somewhere in that and your work will impact that.

301
00:38:50,000 --> 00:38:57,000
So the last thing I'm going to really say about hype and the fear of missing out.

302
00:38:57,000 --> 00:39:00,000
What if I don't try it today?

303
00:39:00,000 --> 00:39:09,000
Well, if I try it today, I might get a basic understanding or understand from the ground floor and have less of a learning curve later.

304
00:39:09,000 --> 00:39:12,000
Six months from now, there'll be more examples out there.

305
00:39:12,000 --> 00:39:17,000
You've got more peers and their experiences you can draw.

306
00:39:17,000 --> 00:39:21,000
One year later, better tooling, better docs.

307
00:39:21,000 --> 00:39:27,000
Five years from now, Python is a 30 year old library language.

308
00:39:27,000 --> 00:39:35,000
It's still going to be here unless the maintainers go away because you don't see them nicely.

309
00:39:35,000 --> 00:39:46,000
I have a passion for cognitive science, which is basically a fancy word for combining all the things that relate to how people learn.

310
00:39:46,000 --> 00:39:48,000
And absorb knowledge.

311
00:39:48,000 --> 00:39:58,000
And I think this as developers, we innately do this every day as we learn our craft and move forward.

312
00:39:58,000 --> 00:40:02,000
So we've gone on a journey.

313
00:40:02,000 --> 00:40:05,000
We've walked through some pitfalls.

314
00:40:05,000 --> 00:40:13,000
And I think my hope is you feel better equipped to be successful, whatever your journey is.

315
00:40:14,000 --> 00:40:20,000
Just to recap, making mistakes, expect to make them.

316
00:40:20,000 --> 00:40:22,000
Take a step.

317
00:40:22,000 --> 00:40:24,000
Whenever you feel blocked, take a baby step.

318
00:40:24,000 --> 00:40:25,000
It's cool.

319
00:40:25,000 --> 00:40:32,000
And then, you know, if the technique for scamper works for you, great.

320
00:40:32,000 --> 00:40:35,000
Always try and understand your why.

321
00:40:35,000 --> 00:40:40,000
When you get really blocked or burned out or whatever,

322
00:40:40,000 --> 00:40:46,000
knowing why you're doing something is really important.

323
00:40:46,000 --> 00:40:54,000
You know, I spent the last three and a half years working at a startup, building a SaaS product, project based on Jupiter stuff.

324
00:40:54,000 --> 00:40:55,000
It didn't fulfill me.

325
00:40:55,000 --> 00:40:59,000
And I wound up being really burnt out by the end.

326
00:40:59,000 --> 00:41:01,000
And now I know why.

327
00:41:01,000 --> 00:41:08,000
Because I put a lot of my teaching work and curriculum writing and things like that on hold.

328
00:41:08,000 --> 00:41:10,000
So now I'm going back to my why.

329
00:41:10,000 --> 00:41:13,000
Treasure your time and your energy.

330
00:41:13,000 --> 00:41:19,000
These are the two biggest resources that you have.

331
00:41:19,000 --> 00:41:23,000
Treat them as precious as they are.

332
00:41:23,000 --> 00:41:25,000
Say no.

333
00:41:25,000 --> 00:41:27,000
No is a one word sentence.

334
00:41:27,000 --> 00:41:30,000
You don't need to tell people why you don't want to do something.

335
00:41:30,000 --> 00:41:32,000
Just say no.

336
00:41:32,000 --> 00:41:38,000
And the energy, get away from your screen from time to time.

337
00:41:38,000 --> 00:41:41,000
It does help.

338
00:41:41,000 --> 00:41:47,000
And then I think the most important thing to me is fun builds resilience.

339
00:41:47,000 --> 00:41:56,000
I have been doing computer programming for almost 50 years and I take joy in it.

340
00:41:56,000 --> 00:41:59,000
I look for the cool stuff.

341
00:41:59,000 --> 00:42:02,000
And a lot of times it's with music.

342
00:42:02,000 --> 00:42:10,000
So what's next for all of you on your Python journey with other languages?

343
00:42:10,000 --> 00:42:12,000
There's a lot of them there.

344
00:42:12,000 --> 00:42:17,000
Given that you're here, I'm sure Python is centric to most of them.

345
00:42:17,000 --> 00:42:19,000
We are in Austin.

346
00:42:19,000 --> 00:42:22,000
So I suggest creating a band.

347
00:42:22,000 --> 00:42:26,000
And I'm going to name it Python and the Polyglots.

348
00:42:26,000 --> 00:42:32,000
And we're going to introduce our first hit song, Thriving with PyTexas.

349
00:42:32,000 --> 00:42:36,000
This has been an amazing conference.

350
00:42:36,000 --> 00:42:39,000
Thank you for listening to me.

351
00:42:39,000 --> 00:42:41,000
I hope you learned something.

352
00:42:41,000 --> 00:42:44,000
I will put this on my speaker deck later today.

353
00:42:44,000 --> 00:42:47,000
But just go be awesome.

354
00:42:47,000 --> 00:42:55,000
And if you're looking for a new podcast, there's some PyLadies that have a really cool new podcast out.

355
00:42:55,000 --> 00:43:02,000
That really is highlighting some of the folks that do a lot of work in Python that you might not normally see.

356
00:43:02,000 --> 00:43:07,000
And with that, have a great rest of the conference.

357
00:43:07,000 --> 00:43:09,000
And thank you.

358
00:43:09,000 --> 00:43:21,000
Thank you.

359
00:43:21,000 --> 00:43:27,000
For the record, my vote for band name is the poll requests.

360
00:43:27,000 --> 00:43:28,000
The poll requests.

361
00:43:28,000 --> 00:43:30,000
Push and pull.

362
00:43:30,000 --> 00:43:39,000
I tried to take a picture of Bucky and wanted to put him in the band, but didn't have a photo from yesterday.

363
00:43:39,000 --> 00:43:41,000
We could have facilitated that.

364
00:43:41,000 --> 00:43:42,000
Is everybody able to hear me?

365
00:43:42,000 --> 00:43:43,000
Yeah, sweet.

366
00:43:43,000 --> 00:43:47,000
We have a bunch of questions in here, so I'm going to hit you with those rapid fire.

367
00:43:47,000 --> 00:43:53,000
What are the signs that you look for when determining if a shiny technology has become tried and tested?

368
00:43:53,000 --> 00:44:05,000
If it's become tried and tested, I basically, the amount of things I just run, I go to the installation instructions, I install it, I play around with the basic example.

369
00:44:05,000 --> 00:44:10,000
If I feel like, OK, this might help with my work, then I continue on.

370
00:44:10,000 --> 00:44:15,000
If not, I might say, OK, not for me, not right now.

371
00:44:15,000 --> 00:44:21,000
And then if there's something that sparks my interest a year later, I'll do the same thing.

372
00:44:21,000 --> 00:44:22,000
Nice.

373
00:44:22,000 --> 00:44:23,000
OK.

374
00:44:23,000 --> 00:44:30,000
When someone comes to you for help with Python, what are some of your go-to ways to help them?

375
00:44:30,000 --> 00:44:47,000
You know, I have a rule of thumb that I shared with students at Cal Poly, which was if you've been struggling with something for half an hour and not making any progress,

376
00:44:47,000 --> 00:45:04,000
typically the reason is there's either poor documentation, unclear examples, or you're missing some cognitive piece that if somebody shared with you would unlock it.

377
00:45:04,000 --> 00:45:14,000
And so I would try and sit down with them and say, OK, tell me about what you're trying to do, what you're trying to solve.

378
00:45:14,000 --> 00:45:16,000
What have you tried?

379
00:45:16,000 --> 00:45:20,000
I'm sorry.

380
00:45:20,000 --> 00:45:23,000
I'm a little...

381
00:45:23,000 --> 00:45:26,000
Islands timer.

382
00:45:26,000 --> 00:45:32,000
You're supposed to be done with your keynote timer.

383
00:45:32,000 --> 00:45:35,000
That totally derailed me.

384
00:45:35,000 --> 00:45:43,000
But I think talking it through, like rubber duck, whatever, is how I try and help.

385
00:45:43,000 --> 00:45:55,000
If I read a lot of code, I review a lot of code, I think there's something to be said for looking at really good examples of the thing you're trying to do.

386
00:45:55,000 --> 00:46:06,000
And so I would try and point them to somebody who had done it, you know, something on GitHub or whatever, and then say, well, see what you learn from that and just feel free to come back to me.

387
00:46:06,000 --> 00:46:07,000
Nice. OK.

388
00:46:07,000 --> 00:46:12,000
Next one I've got here is one to two years ago, the big tech hype object was blockchain technology.

389
00:46:12,000 --> 00:46:18,000
What gives you confidence that AI will actually stick around in the long term?

390
00:46:18,000 --> 00:46:20,000
It will.

391
00:46:20,000 --> 00:46:27,000
It's been here since the, well, actually since the 1950s if I really want to be pedantic about it.

392
00:46:27,000 --> 00:46:34,000
But, you know, the hype will be there.

393
00:46:34,000 --> 00:46:47,000
But, you know, I can see applications like in science where machine learning is really improving how we detect anomalies in a visualization.

394
00:46:47,000 --> 00:47:01,000
So for scans that are done for cancer or something like that, you know, having another set of eyes that have far more detail and, you know, it's helpful.

395
00:47:01,000 --> 00:47:07,000
So blockchain is still going to be around as well.

396
00:47:07,000 --> 00:47:10,000
Maybe not in the hyped way that it was.

397
00:47:10,000 --> 00:47:16,000
So, you know, you look at these technologies and they often build upon each other.

398
00:47:16,000 --> 00:47:23,000
So you take what you use, find useful, discard the rest as news.

399
00:47:23,000 --> 00:47:24,000
Nice. I'll do two more.

400
00:47:24,000 --> 00:47:25,000
OK.

401
00:47:25,000 --> 00:47:30,000
Is there a place for boring software that doesn't advance as much but just works?

402
00:47:30,000 --> 00:47:32,000
Absolutely.

403
00:47:32,000 --> 00:47:35,000
I love boring software.

404
00:47:35,000 --> 00:47:40,000
Well written software that just works.

405
00:47:40,000 --> 00:47:44,000
There's no need to be fancy.

406
00:47:44,000 --> 00:47:47,000
Understandable is key.

407
00:47:47,000 --> 00:47:57,000
If you've ever had to refactor a spaghetti rat's nest of code, that's why you write tests.

408
00:47:57,000 --> 00:48:06,000
If you ever think you're going to refactor something, and believe me, you will, because most of the work we do is maintaining code, not writing code.

409
00:48:06,000 --> 00:48:09,000
Like 90% is maintaining code.

410
00:48:09,000 --> 00:48:14,000
So boring, well written code, A+.

411
00:48:14,000 --> 00:48:16,000
A+.

412
00:48:16,000 --> 00:48:17,000
All right.

413
00:48:17,000 --> 00:48:18,000
Last one I'm going to hit you with.

414
00:48:18,000 --> 00:48:19,000
Yep.

415
00:48:19,000 --> 00:48:23,000
What are your tips to handle imposter syndrome?

416
00:48:23,000 --> 00:48:28,000
I have a few.

417
00:48:28,000 --> 00:48:32,000
First one, take that baby step.

418
00:48:32,000 --> 00:48:39,000
I think that has helped me.

419
00:48:39,000 --> 00:48:42,000
Being open about it has helped me as well.

420
00:48:42,000 --> 00:48:44,000
That could backfire, I could think.

421
00:48:44,000 --> 00:48:51,000
But, you know, there are a lot of really high profile core developers that have imposter syndrome.

422
00:48:51,000 --> 00:48:57,000
I think one of the things about imposter syndrome is you're pretty self-aware.

423
00:48:57,000 --> 00:49:03,000
And you have this knowledge of what you know and what you don't know.

424
00:49:03,000 --> 00:49:12,000
And if I look at the sum total of computer science and tech, what I know is a small droplet of everything that's out there.

425
00:49:12,000 --> 00:49:14,000
And I'm aware of that.

426
00:49:14,000 --> 00:49:19,000
And that sometimes gives you that, oh my gosh, I'm not qualified to talk about it.

427
00:49:19,000 --> 00:49:24,000
But your thoughts do matter.

428
00:49:24,000 --> 00:49:34,000
And I think getting outside, finding people who aren't in tech, they are wonderful for giving you perspective back.

429
00:49:34,000 --> 00:49:38,000
They're like, because they give you a perspective of not tech.

430
00:49:38,000 --> 00:49:47,000
And so, and then, you know, PyLadies is a great example of, you know, there have probably been times that I've gone to Lynn

431
00:49:47,000 --> 00:49:49,000
and I'm like, I don't know how to do this.

432
00:49:49,000 --> 00:49:51,000
And she's like, yeah, you do.

433
00:49:51,000 --> 00:49:54,000
You know, let's work through it or whatever.

434
00:49:54,000 --> 00:50:01,000
And so it's imposter syndrome is just a phase in a journey.

435
00:50:01,000 --> 00:50:06,000
And by taking that next step, you're already on the next part of the journey.

436
00:50:06,000 --> 00:50:12,000
I had my own thoughts on that, too, to say that I think that when you're experiencing imposter syndrome,

437
00:50:12,000 --> 00:50:14,000
it's because you're comparing yourself to someone else.

438
00:50:14,000 --> 00:50:15,000
Yes.

439
00:50:15,000 --> 00:50:18,000
Your why question, why are you comparing yourself to someone else?

440
00:50:18,000 --> 00:50:21,000
Yes, that is probably there's not a good answer.

441
00:50:21,000 --> 00:50:23,000
Yeah, I mean, that is spot on.

442
00:50:23,000 --> 00:50:28,000
So with that, I will be around the rest of the day.

443
00:50:28,000 --> 00:50:30,000
It has been my honor and privilege to chat with you.

444
00:50:30,000 --> 00:50:32,000
Thank you for listening.

445
00:50:32,000 --> 00:50:35,000
Go take a break, I think.

