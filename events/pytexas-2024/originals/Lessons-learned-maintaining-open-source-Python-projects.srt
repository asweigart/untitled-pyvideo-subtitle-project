1
00:00:00,000 --> 00:00:10,000
All right, so I'll be your host before the lunch break, so I hope you're ready.

2
00:00:10,000 --> 00:00:17,000
Today I want to have a quick introduction about what I learned in maintaining an open source project,

3
00:00:17,000 --> 00:00:21,000
but this will also be hopefully help you how to interact, could be like a tutorial,

4
00:00:21,000 --> 00:00:27,000
how to interact with open source project too, and also encourage you to actually become maintainers yourself

5
00:00:27,000 --> 00:00:32,000
and do some open source project whenever you have some free time for it.

6
00:00:32,000 --> 00:00:38,000
So let's get going. So first, who am I? So as the teacher could give away, I work at Bloomberg

7
00:00:38,000 --> 00:00:45,000
in the data technologies department at the software engineer, but I'm currently based out of Los Angeles.

8
00:00:45,000 --> 00:00:51,000
However, for my weird accent, the reason is because I'm originally from Transylvania.

9
00:00:51,000 --> 00:00:57,000
For those who don't know, that's around that little green blob in Europe, so quite centrally in there.

10
00:00:57,000 --> 00:01:05,000
Okay, so but more importantly for this discussion, I'm a quite prolific open source contributor on Github mostly.

11
00:01:05,000 --> 00:01:12,000
You can find me under that handle. I have a blog, but more importantly, I'm also a member of the Python packaging authority.

12
00:01:12,000 --> 00:01:20,000
I maintain mostly these three projects on virtual and Ppex build, but also I have some other popular projects

13
00:01:20,000 --> 00:01:28,000
I maintain such as platform build stocks or PIP depth tree, PIP apps. Those are the, I would say, the most popular ones.

14
00:01:28,000 --> 00:01:37,000
I'm also a parent to these two lovely Yorkshire Terriers, and I'll call them on throughout the call

15
00:01:37,000 --> 00:01:41,000
just to lighten up the mood a wee bit. So let's get the journey started.

16
00:01:41,000 --> 00:01:49,000
Okay, so let's start with kind of like the original definition. What is a maintainer?

17
00:01:49,000 --> 00:01:52,000
So when we talk about maintaining project, what do we talk about it?

18
00:01:52,000 --> 00:02:01,000
Per the dictionary.com definition, it's this long worded to bullet point ones, but I think from our conversation,

19
00:02:01,000 --> 00:02:06,000
this is kind of like the definition I would go on, basically keep an appropriate condition operation.

20
00:02:06,000 --> 00:02:13,000
The goal of a maintainer within the open source project is to make sure that this happens for the project no matter what.

21
00:02:13,000 --> 00:02:21,000
Everything else is kind of like secondary, including, as some people might think it is the maintainer's primary goal,

22
00:02:21,000 --> 00:02:27,000
is to add new features to the project, fix your bugs or issues. No, that would be a contributor.

23
00:02:27,000 --> 00:02:33,000
You can do this, and most maintainers will kind of like swap their heads sometimes to some of these two,

24
00:02:33,000 --> 00:02:40,000
but no, that's not part of being a maintainer. That's more like when you have free time, you can take that on too.

25
00:02:41,000 --> 00:02:47,000
Okay, so the first thing, if you have a project and you want to maintain the project,

26
00:02:47,000 --> 00:02:52,000
is to make sure that that project is actually discoverable and the users can interact with it.

27
00:02:52,000 --> 00:03:00,000
And within the Python world, this primary means that, hey, upload it to the PyPI project, if it's a library or a tool,

28
00:03:00,000 --> 00:03:06,000
make sure it's installable, and more importantly, make sure that the user can find information about the project

29
00:03:06,000 --> 00:03:13,000
that is important for them using it. Some of this project, as shown for the demo from the TOX project documentation,

30
00:03:13,000 --> 00:03:21,000
is that link to the documentation, link to the home page, link to the release notes, and a link to the source

31
00:03:21,000 --> 00:03:26,000
and an issue tracker where they can interact with your project, submit feature, get bugs, stuff like that.

32
00:03:28,000 --> 00:03:34,000
Now, another kind of like primary goal of the maintainer is to make sure that the consumption and contributing

33
00:03:34,000 --> 00:03:40,000
to the code is familiar. This is important because people are busy with their lives,

34
00:03:40,000 --> 00:03:46,000
they have a lot of things going on, so you want to make sure that it is as easy as possible for them

35
00:03:46,000 --> 00:03:52,000
to actually help out with the project and consume the project. So when it comes to like consuming the project,

36
00:03:52,000 --> 00:04:00,000
it mostly means make sure that it's installable via PIP, or if your project especially is mostly data science-related,

37
00:04:01,000 --> 00:04:09,000
then you want to be able to have like a conda installation, and then the code is available in some widely used

38
00:04:09,000 --> 00:04:17,000
GitHub, such as GitHub. You can use GitLab also, but this kind of like goes against the law of list surprises.

39
00:04:17,000 --> 00:04:25,000
Okay, so another core responsibility of a maintainer would be to send ground rules. This is Python.

40
00:04:25,000 --> 00:04:31,000
We all are consenting adults, but even then adults sometimes misbehave. So when that happens,

41
00:04:31,000 --> 00:04:36,000
it needs to make sure that whoever is interacting with your project knows what are the rules to follow

42
00:04:36,000 --> 00:04:44,000
and why what they will be maybe banned or not. So make sure that your project has a code of conduct attached to it,

43
00:04:44,000 --> 00:04:51,000
so then when people don't interact how maybe you wish they interact, you can sideline them on actual rules

44
00:04:51,000 --> 00:04:57,000
rather than just arbitrary rules. Okay, now another kind of like primary job of a maintainer would be

45
00:05:00,000 --> 00:05:08,000
to actually try incoming bug reports. Oftentimes users don't actually know what they submit is a bug or feature

46
00:05:08,000 --> 00:05:15,000
or maybe both. So it's kind of like the maintainer's goal, or not goal, but job to make sure that when they submit

47
00:05:15,000 --> 00:05:21,000
a help request, you can tell them, hey, this is a bug or hey, you're just using the tool incorrectly,

48
00:05:21,000 --> 00:05:26,000
stuff like that. So a lot of the time you're going to spend on basically just priorging the incoming bug reports

49
00:05:26,000 --> 00:05:34,000
and giving kind of like a judgment on them. For this one, I recommend to use templates. GitHub templates,

50
00:05:34,000 --> 00:05:39,000
for example, are very helpful, which can make sure that your users are filling all the required information,

51
00:05:39,000 --> 00:05:45,000
such as in this case on the toxic projects, where I can kind of like fill out, hey, if you want to submit

52
00:05:45,000 --> 00:05:50,000
some information, make sure to submit all this because it's going to minimize the interactions we're going to

53
00:05:50,000 --> 00:05:58,000
have back and forth. Okay, now I think at this point is where I should remind all of us that communication

54
00:05:58,000 --> 00:06:04,000
is deceptively hard. NatBachelor had a great keynote at the last year's PyCon US where he talked about it

55
00:06:04,000 --> 00:06:12,000
more in detail, but I would like to just highlight two points out of his presentation. One, we have all different

56
00:06:12,000 --> 00:06:18,000
communication styles. This is kind of like visualized here by the fact that each of the heads look kind of

57
00:06:18,000 --> 00:06:25,000
different, so our heads operate differently. Keep this in mind whenever you're communicating through like

58
00:06:25,000 --> 00:06:33,000
any kind of issue tracker with someone. And also remember that whenever we communicate, we have a lot of

59
00:06:33,000 --> 00:06:39,000
nonverbal communication that we can pick up. Of course, when we are communicating over like written format,

60
00:06:39,000 --> 00:06:46,000
it's even harder because you look at context, attention span also might be, like this actually might be me

61
00:06:46,000 --> 00:06:52,000
whenever I'm reading your issue. Maybe I just have 20 seconds before my deployment finishes and I decide to

62
00:06:52,000 --> 00:06:59,000
have a look at the bug tracker and I might be just kind of like a bit short on attention, so to say.

63
00:06:59,000 --> 00:07:07,000
So if, for example, I reply to your issue in just five words, that doesn't mean that I don't care about your

64
00:07:07,000 --> 00:07:17,000
issues, that maybe just that's how much time I have at the moment. Okay? So in general, to sum it up, be polite

65
00:07:17,000 --> 00:07:25,000
and patient. Always give benefit of doubt. Remember, it's not that they hate you, they might just communicate

66
00:07:25,000 --> 00:07:32,000
differently. And finally, and this is kind of like maybe like my pet peeve, but please refrain tagging the people

67
00:07:32,000 --> 00:07:37,000
when you open the issue. Most of the maintainers will follow their projects and they'll get to it when they'll

68
00:07:37,000 --> 00:07:43,000
get to it. That being said, if I don't reply a week later, now you can tag me because maybe I just missed it,

69
00:07:43,000 --> 00:07:49,000
but don't start with the tag because it just comes across as you're a bit entitled and you're kind of like pushy

70
00:07:49,000 --> 00:07:55,000
about it and you're like, okay, I get it. It's an open source project. You don't actually get paid to do it,

71
00:07:55,000 --> 00:08:03,000
so keep that in mind whenever you're interacting. Okay? Now, just to go back to work beforehand,

72
00:08:03,000 --> 00:08:11,000
if you're a user and you're submitting a bug report, make sure that whatever you're kind of like trying to communicate

73
00:08:11,000 --> 00:08:19,000
is easily reproducible. First, always check if there's already an issue open, and if there isn't,

74
00:08:19,000 --> 00:08:26,000
then make sure that what ideally my preferred issue is when someone submits kind of like a docker built

75
00:08:26,000 --> 00:08:32,000
repo, because then it's very easy to replicate it and I can see exactly what's happening. But if that's not possible,

76
00:08:32,000 --> 00:08:37,000
at least have a GitHub repository that demonstrates the problem and it's easy to reproduce again.

77
00:08:37,000 --> 00:08:45,000
And also provide detailed description of exactly what's happening. And just a general rule of thumb,

78
00:08:45,000 --> 00:08:51,000
more information is better than less. I'm at the maintainer who will be able to ignore all the parts

79
00:08:51,000 --> 00:08:57,000
that are not relevant for this bug report, but if you don't provide information, that just means that I will need to

80
00:08:57,000 --> 00:09:02,000
ask for that information and we're just having a lot more back and forth and we're wasting both of our times

81
00:09:02,000 --> 00:09:09,000
rather than just have one time interaction with each other. So one interesting thing, which I think many people

82
00:09:09,000 --> 00:09:14,000
kind of like forget, if you submit a stack trace, please don't submit the final three lines,

83
00:09:14,000 --> 00:09:20,000
because the other five above it might be just as interesting for me to find out what's happening actually.

84
00:09:20,000 --> 00:09:25,000
Just because the error stack trace shows the last two lines, that doesn't mean that's the one that you should actually

85
00:09:25,000 --> 00:09:33,000
post in the issue tracker. Okay? So generally, more is better than less when it comes to this.

86
00:09:33,000 --> 00:09:40,000
Now, another kind of like important job for a maintainer is to actually drink, kind of like groom the incoming feature request.

87
00:09:40,000 --> 00:09:45,000
What I mean about it, if someone is asking a feature, you're the one that's going to be saying that,

88
00:09:45,000 --> 00:09:52,000
hey, cool idea, get it in. Or you're going to be like, nope, this is not for us, but thanks for participating.

89
00:09:52,000 --> 00:09:58,000
Okay? So like in the previous issue, you can see like for example, I say like, yeah, this is something we should do it,

90
00:09:58,000 --> 00:10:05,000
and I even added the help wanted label to it to kind of like signify that. Or in this one, I say like,

91
00:10:05,000 --> 00:10:11,000
this is out of scope of the project, but you can write the plugin to work around this problem for now,

92
00:10:11,000 --> 00:10:16,000
and maybe later we'll reconsider it. Okay?

93
00:10:16,000 --> 00:10:26,000
Now, another thing when it comes to feature request is I think we all need to remember the cute puppy metaphor, I want to say.

94
00:10:26,000 --> 00:10:32,000
Whenever you're bringing, even if you create a pull request and like, hey, this is implementing this lovely feature,

95
00:10:32,000 --> 00:10:39,000
you might see the shiny cute puppy, but I actually see all the work. I need to take it to the vet. I need to give it food.

96
00:10:39,000 --> 00:10:44,000
I need to walk it every day for the next 20 years. So I have to consider the entire package,

97
00:10:44,000 --> 00:10:51,000
not just the cuteness that they have. Okay? So if I say no to it, it doesn't mean that I don't like the cute puppy.

98
00:10:51,000 --> 00:10:58,000
It just means I decided I have enough on my plate to deal with this for the next 20 years. Okay?

99
00:10:58,000 --> 00:11:06,000
But yeah. Okay, so thanks for filing an excellent feature request.

100
00:11:06,000 --> 00:11:10,000
First, read the documentation to check if there is an alternative solution for it.

101
00:11:10,000 --> 00:11:18,000
Sometimes we can do things in many ways and kind of like the Zen of Python is to try to have just one way to do something.

102
00:11:18,000 --> 00:11:22,000
So make sure that there's not another way of doing the thing.

103
00:11:22,000 --> 00:11:29,000
Another thing is if in doubt, before you can open a GitHub as this great feature, which is called Discussions,

104
00:11:29,000 --> 00:11:35,000
maybe just open a discussion to kind of like have a back and forth with the maintainer about how we can best solve this problem.

105
00:11:35,000 --> 00:11:41,000
And only then, if you open the full request, please indicate if you're willing to do the work.

106
00:11:41,000 --> 00:11:44,000
You're just asking for this to who would like it.

107
00:11:44,000 --> 00:11:50,000
If you're actually willing to do the work, it's more likely that it's going to be accepted because then I'll be like, yeah, sure.

108
00:11:50,000 --> 00:11:57,000
I can review it because maybe I can kind of like spend half an hour to actually review it and land it

109
00:11:57,000 --> 00:12:02,000
rather than I have to spend a day to actually implement it and test it. Okay?

110
00:12:02,000 --> 00:12:06,000
So another job for maintainers is to actually review the pull request.

111
00:12:06,000 --> 00:12:11,000
Once you put in that feature request, I'm the one that has to go through and make sure that what you put in looks good,

112
00:12:11,000 --> 00:12:16,000
and I'm actually happy to work with that for the next five years or whatnot.

113
00:12:16,000 --> 00:12:20,000
The maintainer is also the one that actually decides when and how to cut releases.

114
00:12:20,000 --> 00:12:24,000
As you can see, for example, here through GitHub releases.

115
00:12:24,000 --> 00:12:29,000
And I think also for maintainers, it's important that whenever someone puts in a field request,

116
00:12:29,000 --> 00:12:34,000
at least try to thank them in a nice way for their work and be like, hey, thanks for doing this.

117
00:12:34,000 --> 00:12:40,000
That kind of like encourages them to do more open source in the future. Okay?

118
00:12:40,000 --> 00:12:47,000
So another kind of like job of a maintainer is to actually make sure that the project doesn't turn into mayhem and chaos.

119
00:12:47,000 --> 00:12:51,000
You want to make sure that kind of like the project has kind of like a set of unified rules

120
00:12:51,000 --> 00:12:55,000
and kind of like the code that looks mostly same-ish.

121
00:12:55,000 --> 00:13:00,000
This is important because if every corner of the codebase has a different structure, different style,

122
00:13:00,000 --> 00:13:04,000
it's going to quickly turn into a nightmare to actually try to maintain it

123
00:13:04,000 --> 00:13:08,000
or actually try to make changes across multiple layers of it.

124
00:13:08,000 --> 00:13:14,000
This is more of an art than an exact science, but generally what you want to do is make sure that

125
00:13:14,000 --> 00:13:18,000
follow a unified set of rules that mostly lives in the maintainer.

126
00:13:18,000 --> 00:13:22,000
Perhaps if you can codify it in a written text, bonus points for you,

127
00:13:22,000 --> 00:13:26,000
but generally I don't think this really lives in there.

128
00:13:26,000 --> 00:13:30,000
If you're... I think I went a bit too ahead.

129
00:13:30,000 --> 00:13:35,000
Okay, so another kind of like important thing is make sure that your project also has a changelog.

130
00:13:35,000 --> 00:13:41,000
I don't really care if your changelog is a GitHub release, as in this case, or it's actually like a release page.

131
00:13:41,000 --> 00:13:47,000
Doesn't really matter at the end of the day, but make sure somehow people can find out what went in each of the releases.

132
00:13:47,000 --> 00:13:50,000
So they can actually interact better with that project.

133
00:13:50,000 --> 00:13:56,000
Okay, now as you can see from up to this point, there's a lot of work involved in actually maintaining the project.

134
00:13:56,000 --> 00:14:02,000
So it is important that you kind of like... so you don't burn out too easily,

135
00:14:02,000 --> 00:14:05,000
make sure to let other people help you out.

136
00:14:05,000 --> 00:14:10,000
Now this is a bit of contradictory because in order to let other people help you out,

137
00:14:10,000 --> 00:14:12,000
you actually have to put in a lot of work.

138
00:14:12,000 --> 00:14:16,000
But it's one of those where you're hoping that in the long term the investment pays off.

139
00:14:16,000 --> 00:14:19,000
What do I mean by you have to do a lot of work?

140
00:14:19,000 --> 00:14:24,000
For example, you need to actually write a contributing guide.

141
00:14:24,000 --> 00:14:27,000
This will help your people actually do contributions to your project.

142
00:14:27,000 --> 00:14:30,000
Basically, in the contributing guide, you should sell out,

143
00:14:30,000 --> 00:14:33,000
hey, how to set up a quick development environment, how can they run the test,

144
00:14:33,000 --> 00:14:41,000
just so that they can quickly get off the ground and check whatever they are doing looks sane and works correctly.

145
00:14:41,000 --> 00:14:46,000
If you get really fancy, you can even have a dedicated page in your documentation,

146
00:14:46,000 --> 00:14:54,000
as in this case, where you can even kind of like codify more non-exact requirements.

147
00:14:54,000 --> 00:15:00,000
But another thing that you need to make sure is that your CI remains green.

148
00:15:00,000 --> 00:15:03,000
If you see a CI like this that is all green, everything is great,

149
00:15:03,000 --> 00:15:09,000
you know if you put in a bug request or a bug fix or a feature addition,

150
00:15:09,000 --> 00:15:12,000
it's going to be very easy to accept it because the CI is already green,

151
00:15:12,000 --> 00:15:15,000
I just have to review it and if I like how it looks, I can land it.

152
00:15:15,000 --> 00:15:20,000
However, if you're more like a project that every third one fails or maybe doesn't pass it,

153
00:15:20,000 --> 00:15:24,000
you're like, even if you make that improvement, you're going to be like,

154
00:15:24,000 --> 00:15:30,000
well, I can't actually land it until the CI is green, so now you have to do other work for them.

155
00:15:30,000 --> 00:15:36,000
Another thing is that people are easy to get distracted.

156
00:15:36,000 --> 00:15:41,000
And if your CI takes a long time to run, it will mean that by the time the CI,

157
00:15:41,000 --> 00:15:46,000
they don't even stick around to check that actually whatever pull request they put in actually lands.

158
00:15:46,000 --> 00:15:51,000
So you want to make sure that the CI runs as fast as possible, so you have this kick feedback as possible,

159
00:15:51,000 --> 00:15:54,000
so they're still around by the time the CI fails to see,

160
00:15:54,000 --> 00:15:59,000
oh, okay, I need to do one more change before I go off and do my other work.

161
00:15:59,000 --> 00:16:02,000
Okay, like for example in this case, this is not always possible,

162
00:16:02,000 --> 00:16:09,000
but if it takes 20 minutes to run the CI, you know 20 minutes later everyone's at the coffee shop by then

163
00:16:09,000 --> 00:16:13,000
and they're still at their computer checking if it's fine or not.

164
00:16:13,000 --> 00:16:20,000
Now, another important thing, remember to always run your documentation build too as part of your CI,

165
00:16:20,000 --> 00:16:23,000
and for this one, the Read the Docs is actually quite really good.

166
00:16:23,000 --> 00:16:28,000
It allows you to set up documentation builds on your PR,

167
00:16:28,000 --> 00:16:33,000
and as you can see here, you can actually have a nice warning at the top of the documentation that,

168
00:16:33,000 --> 00:16:36,000
hey, this page was created from a pull request.

169
00:16:36,000 --> 00:16:42,000
This means that if people do bad documentation, you can see them before merging it,

170
00:16:42,000 --> 00:16:45,000
and you don't have to do follow-up work for it.

171
00:16:45,000 --> 00:16:49,000
Plus, this is also good for the user who's doing the documentation build

172
00:16:49,000 --> 00:16:55,000
because they can actually see as they are doing even the documentation improvements how it's going to end up.

173
00:16:55,000 --> 00:17:04,000
Okay, this, what I said before, make sure the CI remains green, also apply for the documentation build.

174
00:17:04,000 --> 00:17:08,000
So for example, you should either set up automated email alerting,

175
00:17:08,000 --> 00:17:13,000
or at least check periodically that your documentation builds are still working or not,

176
00:17:13,000 --> 00:17:17,000
for example by logging into your dashboard in Read the Docs.

177
00:17:17,000 --> 00:17:25,000
Okay, so as I said, another thing that I think is a great rule to release often and small,

178
00:17:25,000 --> 00:17:31,000
and to achieve this, it's your job as a maintainer to make sure that releasing is easy and trivial.

179
00:17:31,000 --> 00:17:36,000
And the way you achieve this is to actually make it very simple,

180
00:17:36,000 --> 00:17:39,000
make basically the release kind of like a one-button press,

181
00:17:39,000 --> 00:17:42,000
and also at the same time define a versioning policy,

182
00:17:42,000 --> 00:17:47,000
so anyone who's around, any maintainer, can easily decide what should be the next release version.

183
00:17:47,000 --> 00:17:51,000
Okay, this can be achieved, for example, if you go for semantic versioning,

184
00:17:51,000 --> 00:17:55,000
and then you can see are there any bug fixes, feature requests, breaking changes,

185
00:17:55,000 --> 00:17:59,000
that's how I have to bump the version number, or you just use calendar versioning,

186
00:17:59,000 --> 00:18:03,000
and then it's kind of like whatever the date is today is the version.

187
00:18:03,000 --> 00:18:09,000
Okay, now another thing that as a maintainer, you will thank your life,

188
00:18:09,000 --> 00:18:15,000
and I find it very helpful that even though users hate it and contributors hate it,

189
00:18:15,000 --> 00:18:20,000
I always infer that whatever change you do, it needs to have at least one test to it.

190
00:18:20,000 --> 00:18:25,000
Because it might be easy to merge it without a test today, but in one year's time or two years' time,

191
00:18:25,000 --> 00:18:29,000
it's going to save me from breaking someone else or breaking yourself.

192
00:18:29,000 --> 00:18:33,000
So kind of like enforce that, hey, tests are required every pull request.

193
00:18:33,000 --> 00:18:38,000
Otherwise, thank you, but I'm not going to merge your PR no matter how great it is.

194
00:18:38,000 --> 00:18:42,000
And I'm just going to close it because it's part of the job.

195
00:18:42,000 --> 00:18:47,000
Okay, and also every changelog should have a changelog attached to it,

196
00:18:47,000 --> 00:18:50,000
and this is primarily because you want to make the releases quick and easy,

197
00:18:50,000 --> 00:18:54,000
and you want to already have the changelog ready by the time you want to cut the release

198
00:18:54,000 --> 00:18:58,000
and not as part of the pull request rather than at a later point in time.

199
00:18:58,000 --> 00:19:05,000
Okay, now another thing, we are all very sentimental when it comes to code quality,

200
00:19:05,000 --> 00:19:10,000
so let's take the emotional out, do use projects such as rough or pre-commit

201
00:19:10,000 --> 00:19:14,000
to kind of like standardize how the code looks, and then it's not that,

202
00:19:14,000 --> 00:19:19,000
hey, I say that your code looks ugly, it's that the CI broke.

203
00:19:19,000 --> 00:19:25,000
You can blame the CI, not me, that whatever you made, it doesn't pass it, okay?

204
00:19:25,000 --> 00:19:28,000
So, and generally when it comes to the architecture of the project,

205
00:19:28,000 --> 00:19:33,000
remember that a consistent architecture is better than a great one.

206
00:19:33,000 --> 00:19:36,000
You want to be consistent, kind of like a unified rule,

207
00:19:36,000 --> 00:19:40,000
rather than each different section of the code have a different architecture,

208
00:19:40,000 --> 00:19:42,000
I mean, better for that sub-problem.

209
00:19:42,000 --> 00:19:47,000
And also, if you and I disagree, the maintainer always wins.

210
00:19:47,000 --> 00:19:50,000
And the reason it's not because the maintainer hates you

211
00:19:50,000 --> 00:19:53,000
is because the maintainer is the one that will have to work that code

212
00:19:53,000 --> 00:19:57,000
in six months or years' times, and they are the ones that will be more heavily impacted

213
00:19:57,000 --> 00:20:00,000
if it doesn't behave how they want it to behave.

214
00:20:00,000 --> 00:20:02,000
Okay?

215
00:20:02,000 --> 00:20:06,000
Another thing that I kind of like ran into is that we're all bad at naming,

216
00:20:06,000 --> 00:20:12,000
but not just naming, also just making good commit messages and PR titles,

217
00:20:12,000 --> 00:20:14,000
and that's fine.

218
00:20:14,000 --> 00:20:17,000
It's up to the maintainer to whenever they are merging the pull request

219
00:20:17,000 --> 00:20:21,000
or the bug fix to use the GitHub UI, for example, to reword it

220
00:20:21,000 --> 00:20:25,000
and make it look nicer to whatever they like better.

221
00:20:25,000 --> 00:20:32,000
And, yeah, don't let some bad PR titles discourage contributors

222
00:20:32,000 --> 00:20:35,000
from your project or commit messages.

223
00:20:35,000 --> 00:20:40,000
Okay, so another thing that we, as the maintainer, you want to do

224
00:20:40,000 --> 00:20:43,000
to actually let other people out is to create a community.

225
00:20:43,000 --> 00:20:48,000
And the way you do it is generally use your issue tracker for most of the things,

226
00:20:48,000 --> 00:20:50,000
your discussions on GitHub.

227
00:20:50,000 --> 00:20:52,000
Also, you can create a sync channel.

228
00:20:52,000 --> 00:20:54,000
You don't have to create your own Discord server.

229
00:20:54,000 --> 00:20:57,000
For example, the Python packaging authority has a server.

230
00:20:57,000 --> 00:20:59,000
Any project under the authority can have there,

231
00:20:59,000 --> 00:21:03,000
and that the other Python packaging authority Discord server

232
00:21:03,000 --> 00:21:07,000
can help other people whenever they get holed up or lost.

233
00:21:07,000 --> 00:21:14,000
Remember to advertise your project by any of the, what you'd call,

234
00:21:14,000 --> 00:21:18,000
popular channels, such as forums, in this case.

235
00:21:18,000 --> 00:21:22,000
And also occasionally go on Stack Overflow and answer some questions

236
00:21:22,000 --> 00:21:25,000
and maybe just encourage people on Stack Overflow

237
00:21:25,000 --> 00:21:28,000
to post their questions on the GitHub issues

238
00:21:28,000 --> 00:21:30,000
to kind of like have a unified place.

239
00:21:30,000 --> 00:21:34,000
But Stack Overflow still is one of the go-to places whenever,

240
00:21:34,000 --> 00:21:38,000
especially new people out of college tend to go

241
00:21:38,000 --> 00:21:41,000
whenever they run into some project rather than issue tracker.

242
00:21:41,000 --> 00:21:42,000
Okay.

243
00:21:42,000 --> 00:21:47,000
Now, how to track maintenance of your project?

244
00:21:47,000 --> 00:21:52,000
I think this kind of like boils down to like encourage people to contribute more.

245
00:21:52,000 --> 00:21:55,000
If they came around, they did want a few contributions,

246
00:21:55,000 --> 00:21:58,000
just give them more responsibility.

247
00:21:58,000 --> 00:22:02,000
Generally people are, I think more, a lot of people think that

248
00:22:02,000 --> 00:22:06,000
something is too complicated that it can't help out.

249
00:22:06,000 --> 00:22:11,000
But remember, you don't become a maintainer by suddenly from day one to day two.

250
00:22:11,000 --> 00:22:12,000
It takes time.

251
00:22:12,000 --> 00:22:15,000
And the longer you stick around and the more you interact with the project,

252
00:22:15,000 --> 00:22:19,000
the more you will be able to become a maintainer.

253
00:22:19,000 --> 00:22:24,000
I generally like to be quite liberal with giving out maintainer flags.

254
00:22:24,000 --> 00:22:28,000
Now, that doesn't mean that I just give them the project and I drive off to the sunset.

255
00:22:28,000 --> 00:22:30,000
I stick around and help them out on it.

256
00:22:30,000 --> 00:22:34,000
But it tends to work whenever someone makes like, I don't know,

257
00:22:34,000 --> 00:22:37,000
like five, ten pull requests over two weeks.

258
00:22:37,000 --> 00:22:39,000
I'm like, hey, do you want to be a maintainer?

259
00:22:39,000 --> 00:22:42,000
I'm happy to get help out on it.

260
00:22:42,000 --> 00:22:46,000
And then slowly introducing them to some of the maintainership tests,

261
00:22:46,000 --> 00:22:50,000
such as encourage them to maybe make a pull request, look at some of the issues,

262
00:22:50,000 --> 00:22:54,000
do a release, basically pull them in and mentor them.

263
00:22:54,000 --> 00:22:57,000
Maybe have a quick health and art chat on them.

264
00:22:57,000 --> 00:22:59,000
Hey, do you have any questions about the project?

265
00:22:59,000 --> 00:23:00,000
Stuff like that.

266
00:23:00,000 --> 00:23:05,000
Make them sure that they get help on it and remind them that this journey

267
00:23:05,000 --> 00:23:08,000
is not going to be kind of like a linear one where you're just like,

268
00:23:08,000 --> 00:23:10,000
I'm here, now I'm a maintainer.

269
00:23:10,000 --> 00:23:11,000
I know everything.

270
00:23:11,000 --> 00:23:14,000
It's more like, I'm here, oh, now I know a bit.

271
00:23:14,000 --> 00:23:16,000
Then you find out that, oh, I don't know anything.

272
00:23:16,000 --> 00:23:19,000
And now you do another hump and eventually like if you stick around

273
00:23:19,000 --> 00:23:22,000
after like a few months, you're going to be like actually expert on it.

274
00:23:22,000 --> 00:23:24,000
But it's going to take those time.

275
00:23:24,000 --> 00:23:31,000
And it's fine if you are a maintainer from day 20 rather than day 600.

276
00:23:31,000 --> 00:23:33,000
Okay?

277
00:23:33,000 --> 00:23:37,000
So as you can see, there's a lot of work with this kind of like maintainer shop.

278
00:23:37,000 --> 00:23:38,000
Why would you do this?

279
00:23:38,000 --> 00:23:40,000
Well, it looks good on your CV.

280
00:23:40,000 --> 00:23:41,000
It broadens your horizon.

281
00:23:41,000 --> 00:23:45,000
You get to communicate with a lot more people and stuff like that.

282
00:23:45,000 --> 00:23:48,000
You also get some mentoring experience out of it.

283
00:23:48,000 --> 00:23:52,000
You can get also opportunities to your new technologies and libraries

284
00:23:52,000 --> 00:23:55,000
that maybe you don't get to use on your work.

285
00:23:55,000 --> 00:23:59,000
And finally, you also get a handy source of topics for your conference talk.

286
00:23:59,000 --> 00:24:01,000
Pointing question.

287
00:24:01,000 --> 00:24:03,000
Okay?

288
00:24:03,000 --> 00:24:05,000
Now, this is the final one.

289
00:24:05,000 --> 00:24:06,000
This is the final one.

290
00:24:06,000 --> 00:24:09,000
You also may potentially get paid for it in some way.

291
00:24:09,000 --> 00:24:15,000
For example, in my case, my company allows me to work like 20% of my time on open source stuff

292
00:24:15,000 --> 00:24:20,000
so I can basically during work hours actually do some open source.

293
00:24:20,000 --> 00:24:24,000
I can also set up, for example, GitHub sponsors.

294
00:24:24,000 --> 00:24:27,000
And people occasionally when they're happy that I accepted the feature,

295
00:24:27,000 --> 00:24:29,000
I guess I might give you a few dollars.

296
00:24:29,000 --> 00:24:33,000
Anyway, there's also tightly fixed gate at giving out monthly funding,

297
00:24:33,000 --> 00:24:36,000
especially for more popular projects and widely used projects.

298
00:24:36,000 --> 00:24:39,000
So you might be able to get, I don't know, maybe a few hundred dollars every month

299
00:24:39,000 --> 00:24:42,000
for just doing that what you might do either way.

300
00:24:42,000 --> 00:24:46,000
And also thanks to that, it's a great source where you can get some of this

301
00:24:46,000 --> 00:24:48,000
enumeration for your heavy work.

302
00:24:48,000 --> 00:24:49,000
Okay?

303
00:24:49,000 --> 00:24:53,000
Now, in general, accept that no project will ever be done.

304
00:24:53,000 --> 00:24:59,000
Be patient with the users because users are always bad at reading documentation.

305
00:24:59,000 --> 00:25:03,000
And that involves me whenever I read other project documentation.

306
00:25:03,000 --> 00:25:04,000
Okay?

307
00:25:04,000 --> 00:25:06,000
And generally speaking, it's your own dog food.

308
00:25:06,000 --> 00:25:10,000
Don't try to cut shortcuts just because you are the maintainer.

309
00:25:10,000 --> 00:25:14,000
Remember, I work with all of those forks and everything as everyone else

310
00:25:14,000 --> 00:25:20,000
just so that I can easily discover any kind of problems that I might have otherwise

311
00:25:20,000 --> 00:25:24,000
with the project's contribution that other people might run into it.

312
00:25:24,000 --> 00:25:25,000
Okay?

313
00:25:25,000 --> 00:25:28,000
Now, this is kind of like my advantage.

314
00:25:28,000 --> 00:25:29,000
Okay.

315
00:25:29,000 --> 00:25:31,000
You got sold on the dream that you want to now become a maintainer.

316
00:25:31,000 --> 00:25:33,000
How do you become a maintainer?

317
00:25:33,000 --> 00:25:37,000
I say to contribute and all that, but where should you start?

318
00:25:37,000 --> 00:25:40,000
My recommendation generally is to always pick something that you use on a regular

319
00:25:40,000 --> 00:25:42,000
or semi-regular basis.

320
00:25:42,000 --> 00:25:47,000
What I mean, for example, if you use Fast API at work for whatever reason

321
00:25:47,000 --> 00:25:49,000
and you debug it enough, you probably know the code enough.

322
00:25:49,000 --> 00:25:53,000
You might sometimes even maybe debug in their Fast API's code base that you're

323
00:25:53,000 --> 00:25:55,000
going to be at least semi-familiar with the code base.

324
00:25:55,000 --> 00:25:57,000
It's a great starting point.

325
00:25:57,000 --> 00:25:59,000
You don't have to start from zero.

326
00:25:59,000 --> 00:26:03,000
Plus, you're also have been encouraged to make it look nice because you're going

327
00:26:03,000 --> 00:26:05,000
to be using it next day at work maybe.

328
00:26:05,000 --> 00:26:06,000
Okay?

329
00:26:06,000 --> 00:26:08,000
Read the documentation in detail.

330
00:26:08,000 --> 00:26:09,000
This is kind of like a heavy.

331
00:26:09,000 --> 00:26:12,000
You don't have to read the documentation and understand it on day one,

332
00:26:12,000 --> 00:26:14,000
but it's helpful to kind of like go over the project.

333
00:26:14,000 --> 00:26:17,000
Read mostly the documentation, at least skim through it,

334
00:26:17,000 --> 00:26:20,000
so that when you look at an issue or a bug, you can kind of like answer,

335
00:26:20,000 --> 00:26:23,000
is that even a thing that this supposed to do or not?

336
00:26:23,000 --> 00:26:24,000
Okay?

337
00:26:24,000 --> 00:26:29,000
Now, generally speaking, also another kind of like recommendation

338
00:26:29,000 --> 00:26:33,000
that I didn't put here in the slides, but it's true that we...

339
00:26:33,000 --> 00:26:37,000
I actually think that bug fixes are probably one of the most misleading

340
00:26:37,000 --> 00:26:40,000
and hardest things to fix.

341
00:26:40,000 --> 00:26:43,000
I would encourage people to do like a small feature

342
00:26:43,000 --> 00:26:46,000
or maybe some documentation change before they do bug fixes

343
00:26:46,000 --> 00:26:50,000
because bug fixes often kind of end up being spread around in five places

344
00:26:50,000 --> 00:26:52,000
in the code base, and you're kind of like lost,

345
00:26:52,000 --> 00:26:54,000
how do I actually fix this?

346
00:26:54,000 --> 00:26:57,000
It might seem simple, but often it tends to be quite complicated.

347
00:26:57,000 --> 00:27:01,000
And then just rinse and repeat whatever I said until now

348
00:27:01,000 --> 00:27:03,000
and give it a few weeks at most,

349
00:27:03,000 --> 00:27:05,000
and you're going to become a maintainer of the project,

350
00:27:05,000 --> 00:27:09,000
assuming that you do consistent and good work at it.

351
00:27:09,000 --> 00:27:10,000
Okay?

352
00:27:10,000 --> 00:27:14,000
Now, if you stick around for a few weeks

353
00:27:14,000 --> 00:27:16,000
and you decide it's not for you, that's fine.

354
00:27:16,000 --> 00:27:17,000
No one is making...

355
00:27:17,000 --> 00:27:19,000
Remember to pick something you enjoy,

356
00:27:19,000 --> 00:27:23,000
not something that you think might look good on your CV.

357
00:27:23,000 --> 00:27:25,000
Ultimately, it's still something that you're going to do

358
00:27:25,000 --> 00:27:27,000
on your free time on the site.

359
00:27:27,000 --> 00:27:31,000
You need to get some excitement out of it to keep doing it.

360
00:27:31,000 --> 00:27:32,000
Okay?

361
00:27:32,000 --> 00:27:37,000
Now, one kind of like advice for maintainers in general,

362
00:27:37,000 --> 00:27:40,000
I did all this, but remember, always prioritize your mental

363
00:27:40,000 --> 00:27:42,000
and physical health over anything else.

364
00:27:42,000 --> 00:27:48,000
No open source project is worth you losing your physical

365
00:27:48,000 --> 00:27:50,000
or mental health over it.

366
00:27:50,000 --> 00:27:52,000
It's better if you just go on a two-month break

367
00:27:52,000 --> 00:27:55,000
and don't do anything than just burn out in a month

368
00:27:55,000 --> 00:27:57,000
and you're not going to do anything for the next five years.

369
00:27:57,000 --> 00:27:59,000
Okay?

370
00:27:59,000 --> 00:28:03,000
Now, how long should you expect doing this?

371
00:28:03,000 --> 00:28:05,000
Well, as long as you enjoy it.

372
00:28:05,000 --> 00:28:07,000
If you stick around for a year and you're like,

373
00:28:07,000 --> 00:28:09,000
eh, I don't find this anymore enjoyable,

374
00:28:09,000 --> 00:28:11,000
it's fine to just drive off into the sunset.

375
00:28:11,000 --> 00:28:13,000
Do let other people know that, hey,

376
00:28:13,000 --> 00:28:15,000
I'm no longer interested in it,

377
00:28:15,000 --> 00:28:17,000
so they're just kind of like aware of that,

378
00:28:17,000 --> 00:28:19,000
but you don't have to keep doing it.

379
00:28:19,000 --> 00:28:21,000
Okay?

380
00:28:21,000 --> 00:28:24,000
Thank you for your time, and I'll take some questions.

381
00:28:24,000 --> 00:28:26,000
Thank you.

382
00:28:26,000 --> 00:28:30,000
All right.

383
00:28:30,000 --> 00:28:32,000
We've got a lot of questions.

384
00:28:32,000 --> 00:28:34,000
I've got a lot of questions here.

385
00:28:34,000 --> 00:28:37,000
First one, and this one's kind of near and dear to my heart

386
00:28:37,000 --> 00:28:39,000
ripped from today's headlines.

387
00:28:39,000 --> 00:28:41,000
What are the potential solutions that open source can use

388
00:28:41,000 --> 00:28:47,000
to solve the issues presented by the XZ package backdoor?

389
00:28:47,000 --> 00:28:49,000
I don't think there's anything there, too.

390
00:28:49,000 --> 00:28:51,000
Like, no amount of process.

391
00:28:51,000 --> 00:28:53,000
Like, that person didn't just...

392
00:28:53,000 --> 00:28:55,000
It wasn't the case that someone showed up on day two

393
00:28:55,000 --> 00:28:57,000
and, hey, can I maintain it?

394
00:28:57,000 --> 00:28:59,000
Yeah, cool, it's all yours.

395
00:28:59,000 --> 00:29:01,000
The guy actually sticked around for a year

396
00:29:01,000 --> 00:29:03,000
and helped out consistently.

397
00:29:03,000 --> 00:29:05,000
It's built kind of like...

398
00:29:05,000 --> 00:29:07,000
It was in the long run, built the long run game.

399
00:29:07,000 --> 00:29:09,000
So at that point, I don't think there's anything we can do

400
00:29:09,000 --> 00:29:12,000
to stop that other than maybe requiring people IDs from them,

401
00:29:12,000 --> 00:29:14,000
but I don't think it's also realistic.

402
00:29:14,000 --> 00:29:16,000
So I think those are the kind of, like, things

403
00:29:16,000 --> 00:29:18,000
that occasionally will happen,

404
00:29:18,000 --> 00:29:21,000
and we'll just have to kind of, like, find it out post-mortem.

405
00:29:21,000 --> 00:29:24,000
We can do a better job at maybe encouraging people

406
00:29:24,000 --> 00:29:27,000
to pay more to maintainers.

407
00:29:27,000 --> 00:29:29,000
More maintainers mean that the maintainers will be

408
00:29:29,000 --> 00:29:31,000
less likely to stick around

409
00:29:31,000 --> 00:29:34,000
and will be more people around to discover such issues.

410
00:29:34,000 --> 00:29:38,000
But other than that, that will also just decrease

411
00:29:38,000 --> 00:29:40,000
the amount of exit cases.

412
00:29:40,000 --> 00:29:42,000
It doesn't necessarily eliminate it.

413
00:29:42,000 --> 00:29:44,000
But yeah, encouraging your companies

414
00:29:44,000 --> 00:29:46,000
to pay open source maintainers

415
00:29:46,000 --> 00:29:48,000
is definitely a good thing.

416
00:29:48,000 --> 00:29:50,000
And it doesn't have to be that they literally pay it.

417
00:29:50,000 --> 00:29:53,000
If you can convince your boss to spend some of your time

418
00:29:53,000 --> 00:29:55,000
maintaining open source projects,

419
00:29:55,000 --> 00:29:58,000
it's just as much of sponsoring open source

420
00:29:58,000 --> 00:30:01,000
that if they would give, like, $10,000 to GitHub

421
00:30:01,000 --> 00:30:04,000
and just say, give it to whoever you want it.

422
00:30:04,000 --> 00:30:07,000
Right. I'm a big fan of the many hands make light work.

423
00:30:07,000 --> 00:30:09,000
So the more maintainers on a project,

424
00:30:09,000 --> 00:30:12,000
the less strain there is on any one maintainer.

425
00:30:12,000 --> 00:30:14,000
Exactly. Which is good.

426
00:30:14,000 --> 00:30:16,000
Any tips for convincing an employer to let you contribute

427
00:30:16,000 --> 00:30:19,000
to open source software on company time?

428
00:30:22,000 --> 00:30:26,000
I mean, yes and not really.

429
00:30:27,000 --> 00:30:31,000
It's a bit of, like, people...

430
00:30:31,000 --> 00:30:34,000
You can kind of, like, present actual problems.

431
00:30:34,000 --> 00:30:37,000
And you can say that, hey, we're using this tool

432
00:30:37,000 --> 00:30:40,000
for x, epsilon, and z, and we want to add these features.

433
00:30:40,000 --> 00:30:43,000
It would be great if we could help out on it and stuff like that.

434
00:30:43,000 --> 00:30:46,000
And maybe that way you kind of, like, get the whore in the door

435
00:30:46,000 --> 00:30:48,000
and then you can just keep doing it

436
00:30:48,000 --> 00:30:51,000
because your team keeps using that tool or product.

437
00:30:51,000 --> 00:30:53,000
That's one way.

438
00:30:53,000 --> 00:30:56,000
Ultimately, some people are just more open than other people.

439
00:30:56,000 --> 00:30:59,000
And maybe sometimes, if you can't convince your boss,

440
00:30:59,000 --> 00:31:03,000
maybe it's just time to change teams or move on.

441
00:31:03,000 --> 00:31:07,000
I find that pretty please with sugar on top sometimes works.

442
00:31:07,000 --> 00:31:09,000
Yes. Sometimes.

443
00:31:09,000 --> 00:31:12,000
It doesn't have a 0% success rate.

444
00:31:12,000 --> 00:31:14,000
What got you started as a package maintainer

445
00:31:14,000 --> 00:31:17,000
and what keeps you going?

446
00:31:17,000 --> 00:31:19,000
Well, I got the old...

447
00:31:19,000 --> 00:31:21,000
The way I started is basically one day I showed up

448
00:31:21,000 --> 00:31:24,000
to the TOX project, and I was like, hey, I come from Java.

449
00:31:24,000 --> 00:31:26,000
I use Gradle.

450
00:31:26,000 --> 00:31:28,000
Gradle has this lovely feature where you can see

451
00:31:28,000 --> 00:31:30,000
the description of the task.

452
00:31:30,000 --> 00:31:32,000
This tool doesn't have it.

453
00:31:32,000 --> 00:31:35,000
And they're like, yeah, but if you do it, we'll add it.

454
00:31:35,000 --> 00:31:37,000
And I was like, okay.

455
00:31:37,000 --> 00:31:39,000
And then I just did that after a while.

456
00:31:39,000 --> 00:31:42,000
They were just like, hey, now you're a maintainer.

457
00:31:42,000 --> 00:31:47,000
So I guess I stick around because I still mostly enjoy it.

458
00:31:47,000 --> 00:31:51,000
But yeah, actually I started with maintaining the TOX project,

459
00:31:51,000 --> 00:31:53,000
and you have seen the first slide.

460
00:31:53,000 --> 00:31:55,000
Now I'm in like 18 slides or like 18 projects.

461
00:31:55,000 --> 00:31:59,000
Out of those 18 projects, five projects I maintained

462
00:31:59,000 --> 00:32:01,000
because TOX depended on them.

463
00:32:01,000 --> 00:32:03,000
And I went to the maintainer and they were like,

464
00:32:03,000 --> 00:32:05,000
well, I don't have time.

465
00:32:05,000 --> 00:32:07,000
I was like, cool, but the bug in TOX is in your tool,

466
00:32:07,000 --> 00:32:09,000
so I'm just going to need to do it.

467
00:32:09,000 --> 00:32:12,000
So then I picked it up because it's like a downstream dependency of me.

468
00:32:12,000 --> 00:32:16,000
That sounds like how I got involved with the PyTex's conference.

469
00:32:17,000 --> 00:32:20,000
Any package recommendations for those of us

470
00:32:20,000 --> 00:32:23,000
who would like to dip our toe into maintaining or contributing?

471
00:32:23,000 --> 00:32:26,000
Really, as I say, pick.

472
00:32:26,000 --> 00:32:29,000
I mean, you can come and contribute to any of my projects.

473
00:32:29,000 --> 00:32:32,000
I'm happy to help you out, maintain you.

474
00:32:32,000 --> 00:32:34,000
I'm not going to do all the work for you,

475
00:32:34,000 --> 00:32:36,000
but I'm going to guide you through it.

476
00:32:36,000 --> 00:32:38,000
But generally I still think what I said on the slides,

477
00:32:38,000 --> 00:32:40,000
pick something that you use on a daily basis.

478
00:32:40,000 --> 00:32:42,000
It can be tool, library, whatever you want.

479
00:32:42,000 --> 00:32:46,000
Because then you're going to be kind of like incentivized to make it better.

480
00:32:46,000 --> 00:32:50,000
And once you're incentivized to work on it,

481
00:32:50,000 --> 00:32:52,000
it's going to be...

482
00:32:52,000 --> 00:32:55,000
I imagine 99% of the projects on the PyPI,

483
00:32:55,000 --> 00:33:01,000
you're probably putting in two weeks of work to becoming a maintainer

484
00:33:01,000 --> 00:33:04,000
because maintainers are kind of like a dying breed.

485
00:33:04,000 --> 00:33:09,000
So if you're doing work for it,

486
00:33:09,000 --> 00:33:12,000
it's going to be fairly quick to become a maintainer of it.

487
00:33:12,000 --> 00:33:16,000
I'll editorially add something that I think Mason has said before too.

488
00:33:16,000 --> 00:33:21,000
A good first contribution can be documentation.

489
00:33:21,000 --> 00:33:22,000
Yeah, definitely.

490
00:33:22,000 --> 00:33:26,000
See, documentation lacking, like that's a good first foray.

491
00:33:26,000 --> 00:33:29,000
Okay, I'll do two more.

492
00:33:29,000 --> 00:33:33,000
When evaluating open source projects for use in your code beyond quality and fit for purpose,

493
00:33:33,000 --> 00:33:35,000
what signals do you look for?

494
00:33:35,000 --> 00:33:37,000
Anything you haven't already talked about?

495
00:33:37,000 --> 00:33:41,000
I mean, I tend to look at how well it's maintained.

496
00:33:41,000 --> 00:33:44,000
And here I kind of like look at how many issues it has,

497
00:33:44,000 --> 00:33:46,000
how often is the pull request.

498
00:33:46,000 --> 00:33:49,000
Like, I don't know, for example, I discard...

499
00:33:49,000 --> 00:33:53,000
I know everyone likes, for example, maybe hot take, controversial take.

500
00:33:53,000 --> 00:33:55,000
Everyone likes poetry.

501
00:33:55,000 --> 00:33:56,000
I look at their...

502
00:33:56,000 --> 00:33:58,000
I try to contribute to it,

503
00:33:58,000 --> 00:34:01,000
and I look at how often they try with their issues and pull requests.

504
00:34:01,000 --> 00:34:03,000
And it's something I was like,

505
00:34:03,000 --> 00:34:07,000
I'm not comfortable with how slow it is to actually get the fix in and stuff like that.

506
00:34:07,000 --> 00:34:09,000
So I kind of was like, nope, no, thank you.

507
00:34:09,000 --> 00:34:15,000
Because ultimately, I don't think any project is perfect or done or good.

508
00:34:15,000 --> 00:34:19,000
I just look it to be easy to fix if it breaks.

509
00:34:19,000 --> 00:34:20,000
Right.

510
00:34:20,000 --> 00:34:21,000
Okay, last question.

511
00:34:21,000 --> 00:34:23,000
And by the way, all of these questions were great.

512
00:34:23,000 --> 00:34:27,000
We'll get them posted up to Discord so we can answer the rest of them.

513
00:34:27,000 --> 00:34:29,000
You mentioned requiring unit tests with contributions.

514
00:34:29,000 --> 00:34:32,000
Do you have any opinions on code covering metrics?

515
00:34:32,000 --> 00:34:33,000
Yes.

516
00:34:33,000 --> 00:34:37,000
I am a very firm believer 100% or it doesn't matter.

517
00:34:37,000 --> 00:34:40,000
Now, I don't...

518
00:34:40,000 --> 00:34:41,000
I also am concerned...

519
00:34:41,000 --> 00:34:46,000
I don't say 100% code coverage means that your tests are great and you're done with testing.

520
00:34:46,000 --> 00:34:50,000
100% means at least everything has been looked at,

521
00:34:50,000 --> 00:34:53,000
maybe not in all the facets, in all the ways.

522
00:34:53,000 --> 00:34:57,000
But I do think that 100% is a lot better than 90%.

523
00:34:57,000 --> 00:35:02,000
And there is such a thing that I changed the code coverage from 100% to 100%,

524
00:35:02,000 --> 00:35:04,000
and now it's even better.

525
00:35:04,000 --> 00:35:06,000
So the more tests, the better.

526
00:35:06,000 --> 00:35:09,000
The only kind of caveat I would add to that,

527
00:35:09,000 --> 00:35:13,000
that keep in mind that fact that you still want the CI to be fairly fast.

528
00:35:13,000 --> 00:35:16,000
So you joined us to add tests for the sake of adding tests.

529
00:35:16,000 --> 00:35:19,000
But if there's something that covers an actual test case,

530
00:35:19,000 --> 00:35:24,000
I think even that may be a great opportunity for first pull requests.

531
00:35:24,000 --> 00:35:27,000
Maybe just add some tests that are not there.

532
00:35:27,000 --> 00:35:29,000
And I don't think any maintainer would be like,

533
00:35:29,000 --> 00:35:33,000
no, I don't want tests, thank you.

534
00:35:33,000 --> 00:35:37,000
Well, thank you very much for answering all the questions for the great presentations.

535
00:35:37,000 --> 00:35:38,000
Give them a round of applause.

536
00:35:38,000 --> 00:35:40,000
Thank you.

