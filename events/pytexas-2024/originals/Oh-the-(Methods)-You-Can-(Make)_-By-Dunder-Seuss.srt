1
00:00:00,000 --> 00:00:07,160
We have a special treat for you. I'm gonna hand you off for story time. Yes with mr. Josh Cannon, please welcome him to the stage

2
00:00:12,920 --> 00:00:19,480
So I now get to be Dunder Seuss, I know we've all had lunch and it's now story time to ever speaking after this

3
00:00:19,480 --> 00:00:23,500
I'm sorry half the audience might be asleep. It's a nice warm setting

4
00:00:25,840 --> 00:00:27,840
All right, let's begin

5
00:00:28,320 --> 00:00:29,800
Oh

6
00:00:29,800 --> 00:00:32,600
Our programming does require us to read the about the author page

7
00:00:32,600 --> 00:00:39,360
So Josh Cannon aka Dunder Seuss has written no books so far has been on a single podcast and done exactly one talk before he

8
00:00:39,360 --> 00:00:40,840
Decided to write this book

9
00:00:40,840 --> 00:00:44,840
Josh is a developer productivity engineer by day a maintainer of the pants build open

10
00:00:45,080 --> 00:00:53,000
Sorry pants build open source build system also by day and sometimes participates in other open source projects Python community discussions and conference speaking

11
00:00:53,480 --> 00:00:55,160
also by day

12
00:00:55,160 --> 00:00:59,560
He's a lover of getting to know enough Python to make expressive readable and intuitive code

13
00:00:59,600 --> 00:01:06,320
He wrote this book to teach others of the power and magic that you can bring to your objects to make them expressive readable and intuitive

14
00:01:06,760 --> 00:01:10,080
And exciting for us. There is a 2024 AI addendum

15
00:01:10,400 --> 00:01:13,560
Although mid-journey was used to create the whimsical graphical art

16
00:01:13,680 --> 00:01:14,160
Absolutely

17
00:01:14,160 --> 00:01:20,800
No AI or any other kind of text generation was used for the content the author feels like it would ruin the artistic value of this book

18
00:01:21,560 --> 00:01:22,720
Enjoy

19
00:01:22,720 --> 00:01:29,760
And it is dedicated for Devon Dottie and Teddy with love if my magic clicker works. There we go

20
00:01:32,400 --> 00:01:36,480
Congratulations today is your day you will soon learn you some magic the good and proper way

21
00:01:36,600 --> 00:01:42,440
You've chosen a wise way to spend your precious time by learning from a clay crazy loon going on and rhyme

22
00:01:42,800 --> 00:01:47,480
About a list of methods that are nicknamed the Dundas and how we'll use them to code great wonders

23
00:01:48,120 --> 00:01:54,080
They start with two underscores and end with two more thus dunder which is short for double underscore

24
00:01:54,160 --> 00:01:59,640
The runtime of Python calls them in many situations allowing your objects many customizations

25
00:02:00,640 --> 00:02:05,720
You'll learn all about how to emulate a container and iterators and numbers from a great explainer

26
00:02:06,440 --> 00:02:11,000
Comparisons callables oops and descriptors to and how to make attributes appear out of the blue

27
00:02:11,440 --> 00:02:15,560
You'll learn some new names and I know you'll learn many at least one if not two

28
00:02:15,560 --> 00:02:22,240
Maybe up to 20 by the end, you'll know magic. You'll know magic galore. You'll be so full of magic. You'll yell, please sir. No more

29
00:02:23,200 --> 00:02:29,280
So with great skillful skill and lots of caffeine, let's start off your learning with a method you've seen

30
00:02:30,400 --> 00:02:36,040
Let's pretend you're new to Python just for a minute. You'll then learn the first magic dunder in it

31
00:02:36,040 --> 00:02:43,200
It is almost every objects initializer allowing you to be an attribute organizer adding new attributes to your fresh new object

32
00:02:43,440 --> 00:02:46,080
The most common magic I truly do suspect

33
00:02:47,080 --> 00:02:48,720
but

34
00:02:48,720 --> 00:02:53,120
This is a delay. Where did self come from? You'll soon start to wonder

35
00:02:53,560 --> 00:02:59,640
Then you'll learn it's created by just another dunder one that constructs the blank object to give to you and its name

36
00:02:59,640 --> 00:03:01,640
You'll soon find out is dunder new

37
00:03:02,400 --> 00:03:07,880
It's a special static method. You'll maybe define in your class which returns some object then onward

38
00:03:08,440 --> 00:03:13,480
To whom it turns out depends on the return objects type if it's an instance of your class

39
00:03:14,080 --> 00:03:21,480
Including a possible subtype. It goes to dunder in it. You'll hear from the scholar, but otherwise he'll say it's back to the caller

40
00:03:23,000 --> 00:03:27,280
You'll see this in action and it'll be more clear II by looking for its use in the standard library

41
00:03:28,160 --> 00:03:29,640
pathlib path

42
00:03:29,640 --> 00:03:34,960
Uses this method to help it perform constructing an object specific to your platform

43
00:03:35,200 --> 00:03:40,320
The type as you'll find has defined under new to return a subclasses instance specific to you

44
00:03:40,880 --> 00:03:44,200
Now with great careful care and with great tactful tact

45
00:03:44,200 --> 00:03:50,960
You'll see using it is a great balancing act a magic with the power to create objects that are new is something to avoid

46
00:03:51,120 --> 00:03:53,120
misuse of too and

47
00:03:53,680 --> 00:03:59,880
Speaking of balance the opposite of dunder new was not oft employed dunder Dell is called right before your object is destroyed

48
00:04:00,040 --> 00:04:05,160
You'll use it to release resources you've acquired but only if you want its definition isn't required

49
00:04:05,480 --> 00:04:11,160
But if you do write it heed this warning as well, you must call your supers

50
00:04:11,800 --> 00:04:13,640
dunder Dell

51
00:04:13,640 --> 00:04:18,560
Now the next set of magics involve conjuring illusions of attributes giving your callers

52
00:04:18,640 --> 00:04:25,640
Delusions that your objects has more or less than it does. Well, why friendly interfaces is the because

53
00:04:26,040 --> 00:04:30,960
First on your journey through attribute emulation dunder get adders the proper incantation

54
00:04:30,960 --> 00:04:36,640
you'll type it out with a flick and a twist and you'll synthesize attributes that don't exist it's called when default

55
00:04:36,640 --> 00:04:42,640
Attribute access fails the attribute simply wasn't in the details. You'll get a chance to pretend it existed

56
00:04:42,640 --> 00:04:46,240
However on your object the attribute isn't persisted

57
00:04:46,960 --> 00:04:52,920
Now if you wish to pretend you don't recognize this name raise attribute error emulates that all the same

58
00:04:53,080 --> 00:04:55,080
Emulates that all the same

59
00:04:55,320 --> 00:05:00,000
It has an alter ego named under get attribute you'll see which is called for all access

60
00:05:00,640 --> 00:05:07,760
Unconditionally, it gets called for names both existing and not but beware infinite recursion is easily got

61
00:05:08,200 --> 00:05:11,120
If you happen to type out self dot

62
00:05:12,040 --> 00:05:18,680
So remember when you need access to your attributes inside of your thing, you won't use self dot you'll give your super ring

63
00:05:19,680 --> 00:05:26,680
To juxtapose get dunder set adder is how attributes setting your classes allow again by default the attribute isn't

64
00:05:27,680 --> 00:05:35,680
Persisted you get to choose whether it becomes listed. This is also called for all attributes without any condition whether it exists or not without your permission

65
00:05:36,680 --> 00:05:44,680
The last of the adder methods you'll maybe leave off if you define dunder delatter people might scoff as you'll probably guess

66
00:05:45,680 --> 00:05:51,680
It's good for emulation of the removal of a name from your objects formation and just like dunder set adders unfortunate asymmetry

67
00:05:51,680 --> 00:05:53,680
It gets called for all names

68
00:05:53,680 --> 00:05:55,680
unconditionally

69
00:05:56,680 --> 00:06:03,680
You'll then find out soon enough that when it comes to illusory stuff attribute names is just where it starts there's more you'll learn another two parts

70
00:06:03,680 --> 00:06:07,680
Yes, like all good things these magics come in three and more ways than one

71
00:06:07,680 --> 00:06:12,680
You'll actually soon see the first way is the trio of names get set and del

72
00:06:12,680 --> 00:06:18,680
Then how they're used for other illusions as well. So the second in our trio trios, I'll teach to you now

73
00:06:18,680 --> 00:06:20,680
These methods are so powerful

74
00:06:20,680 --> 00:06:28,680
You'll see how an attribute gets to customize itself instead of sitting static on some other objects shelf

75
00:06:30,680 --> 00:06:36,680
Descriptors is the name given to this technique of attributes themselves using double speak first

76
00:06:36,680 --> 00:06:42,680
You'll see these things works as attributes of a class you'll see Django and SQL alchemy use this in mass

77
00:06:42,680 --> 00:06:50,680
The descriptor is the attribute and it gets a say on how it gets got it said it and deleted per se

78
00:06:52,680 --> 00:06:58,680
Dunder get is the first of these spells. You'll want to perfect conjuring values for attributes based on the owner's object

79
00:06:58,680 --> 00:07:03,680
Or sometimes the class a sometime as callers sometimes will do so your dunder get should support that too

80
00:07:04,680 --> 00:07:10,680
And usage of descriptors you'll see sooner not later they're used for several built-in decorators

81
00:07:10,680 --> 00:07:16,680
Static method class method and property all use this technique to customize your attributes for you

82
00:07:18,680 --> 00:07:24,680
And just like dunder get adder dunder get has two brothers dunder set and dunder delete are the others

83
00:07:24,680 --> 00:07:30,680
They act just like dunder get and proxying a call and can do anything they want both big and small

84
00:07:30,680 --> 00:07:35,680
You've maybe had wondered or even had a theory how SQL ORMs quickly fire off a query

85
00:07:35,680 --> 00:07:42,680
When you access certain attributes in the class you set the column descriptor is leveraging dunder get

86
00:07:42,680 --> 00:07:49,680
To run a SQL query using the instances database ID and return to you the value and maybe cash it you see

87
00:07:49,680 --> 00:07:56,680
You'll see dunder set gets called for attribute assignment a SQL update is likely used for new value enshrinement

88
00:07:56,680 --> 00:08:02,680
Lastly dunder delete when an attribute is told to go bye-bye a SQL delete you will likely see fly by

89
00:08:04,680 --> 00:08:08,680
There is one more method that plays in this game and it's a method that goes by dunder set name

90
00:08:08,680 --> 00:08:15,680
Our trio is really for oh well what a shame at the end of your class definition you see

91
00:08:15,680 --> 00:08:23,680
For all of the class attributes that be if they define a dunder set name the attributes name Python will disclaim

92
00:08:23,680 --> 00:08:32,680
And thus the attribute shell game now comes to a close the illusions of attributes we have now exposed

93
00:08:32,680 --> 00:08:38,680
The last of our trio of trios you'll learn from your trainer is emulating items inside a container

94
00:08:38,680 --> 00:08:45,680
You'll see this time our trio suffixes item to help like containers with things inside them

95
00:08:45,680 --> 00:08:51,680
They are given the key and in one case the value implementing container semantics are then up to you

96
00:08:52,680 --> 00:08:58,680
Dunder get item has different behaviors on the radar depending on the type of container that you are

97
00:08:58,680 --> 00:09:04,680
Your sequence types which quack like a tuple or list will accept keys as integers and slice objects

98
00:09:04,680 --> 00:09:08,680
Negative insupport is something you can choose to allow or not it's simply up to you

99
00:09:08,680 --> 00:09:14,680
If the value provided is out of your bounds an index error your code should resound

100
00:09:15,680 --> 00:09:22,680
Otherwise if your container has a mapping background you'll raise key error if the key isn't found

101
00:09:22,680 --> 00:09:29,680
And in every case if you reject the keys type raise type error you'll then want to gripe

102
00:09:29,680 --> 00:09:35,680
You'll likely learn to those rules still hold true for the other methods too

103
00:09:35,680 --> 00:09:41,680
And as far as containers go there are a few more dundas you'll want to define lest you commit several blunders

104
00:09:41,680 --> 00:09:47,680
So although our trio of trios may have come to a close you'll want to learn the other container methods I suppose

105
00:09:47,680 --> 00:09:53,680
A quick one that you'll want to define is dunder len which helps python define the length of your container

106
00:09:53,680 --> 00:09:57,680
So when people call len python can return the number back to them

107
00:09:57,680 --> 00:10:03,680
The second one is dunder iter which should return an iterator over the objects that all live inside your container

108
00:10:03,680 --> 00:10:07,680
Unless it's a mapping then what your caller sees is simply all of the mappings keys

109
00:10:07,680 --> 00:10:15,680
There's also this trivia a bit of python fun if your container isn't iterable set dunder iter to none

110
00:10:15,680 --> 00:10:21,680
Now the third on our extras is named dunder contains to test if an object your container maintains

111
00:10:21,680 --> 00:10:25,680
Although technically you don't have to define it python won't be bitter

112
00:10:25,680 --> 00:10:29,680
Instead it'll test membership first using dunder iter

113
00:10:29,680 --> 00:10:36,680
Going over every possible object that your object can contain and asking if any of those objects are equal or the same

114
00:10:37,680 --> 00:10:41,680
But if you don't define it dunder iter method dunder get item is called and repeatedly tested

115
00:10:41,680 --> 00:10:47,680
Using incrementing indexes from zero until then it gets an index error exception or an equal same object

116
00:10:47,680 --> 00:10:54,680
So it's best to define it so you'll have control of just how the object membership test will unroll

117
00:10:54,680 --> 00:10:59,680
And if for optional methods you'll have soon started a thirst another one available is dunder reversed

118
00:10:59,680 --> 00:11:04,680
It returns an iterator for doing backwards iteration

119
00:11:04,680 --> 00:11:10,680
But you'll only define it if you beat the default computation that python uses combining dunder get item and dunder len

120
00:11:10,680 --> 00:11:17,680
Indexing backwards to zero and then there's one more optional method if you subclass duct

121
00:11:17,680 --> 00:11:24,680
Dunder missing can be defined so that dunder get item can predict what value to use if the key in your mapping isn't there yet

122
00:11:24,680 --> 00:11:30,680
It's how collections default dict or counter with care support operations on items conjured out of thin air

123
00:11:30,680 --> 00:11:36,680
Python just returns to your caller the value itself so if you want to don't forget to store it in yourself

124
00:11:36,680 --> 00:11:45,680
You'll find that you're done you've mastered container emulation but your next set of magics form quite the formation

125
00:11:45,680 --> 00:11:53,680
See you briefly dipped your toe into a few operators however you'll find the list of ops to support is oh so much greater

126
00:11:54,680 --> 00:12:01,680
You'll think about plus and minus and start figuring that the list of operators is bigering and bigering

127
00:12:01,680 --> 00:12:10,680
So on to the mathematic ones that you can define dunder add lets you support the plus sign when your object is on the left

128
00:12:10,680 --> 00:12:18,680
With whatever is on the right you return the added value except when you might reject the operation because you don't know what to do

129
00:12:18,680 --> 00:12:28,680
And instead return the not implemented singleton value such as the case if you don't recognize the type of whatever the thing is on the right

130
00:12:28,680 --> 00:12:36,680
Then dunder sub for subtraction, dunder mole for times, dunder trutive or floridive depending on the kind of division you want

131
00:12:36,680 --> 00:12:41,680
True or integer respectively using one slash or two for division collectively and speaking of operations that come in pairs

132
00:12:41,680 --> 00:12:47,680
Modular arithmetic is a double dunder affair with dunder mod for modular support and then dunder div mod to support the div mod built in

133
00:12:47,680 --> 00:12:51,680
The last pairs of magics of method gifts is dunder l and dunder r shift

134
00:12:51,680 --> 00:12:56,680
The next up is dunder power for to the power of support whose operator is two asterisks side by side for short

135
00:12:56,680 --> 00:13:01,680
And then although this list was already so long three more dunder methods then came along dunder and zor and or

136
00:13:01,680 --> 00:13:04,680
Oh come now don't gripe they're how you support ampersand carrot and pipe

137
00:13:05,680 --> 00:13:12,680
And then when your object supports the at symbol the method you'll want is named under matmul and then that was it

138
00:13:19,680 --> 00:13:21,680
Thank you

139
00:13:21,680 --> 00:13:26,680
There won't be more later 14 methods for mathematic operators

140
00:13:28,680 --> 00:13:30,680
Unless

141
00:13:30,680 --> 00:13:37,680
Unless you think this isn't enough here. Let's take a poll. Is there other numbers stuff? We need to define if yes, raise your hand. I

142
00:13:39,680 --> 00:13:42,680
See I suppose our list should expand

143
00:13:43,680 --> 00:13:51,680
You'll maybe be asking yourself. Oh teacher. How come you'll ask yourself where these new methods are from and how come my methods sometimes return?

144
00:13:51,680 --> 00:13:55,680
Not implemented if to my caller a type error is presented

145
00:13:56,680 --> 00:14:01,680
And so our list of methods then expands to support the same thing with swapped

146
00:14:02,680 --> 00:14:06,680
operands, but only if the result is not implemented and

147
00:14:06,680 --> 00:14:12,680
If two different types are presented Python tries again, but this time with an R at the front of the name

148
00:14:12,680 --> 00:14:18,680
It's not that bizarre and calls this other method on the thing on the right. Let's see an example of how this works to bring it to light

149
00:14:19,680 --> 00:14:22,680
Let's say someone subtracts from a list your foo

150
00:14:23,680 --> 00:14:26,680
Well list doesn't know what the heck to do

151
00:14:26,680 --> 00:14:32,680
So it's done their sub then returns not implemented and then the runtime continues on is documented

152
00:14:32,680 --> 00:14:37,680
Noticing that list and foo are two different classes and calls foos

153
00:14:38,680 --> 00:14:46,680
Dunder our sub and it passes the list object on which we've acted so that foo can say how it should be subtracted

154
00:14:47,680 --> 00:14:53,680
Now remember you'll have to be dexterous and deft and try not to mix up a right op with a left

155
00:14:53,680 --> 00:14:59,680
When in an R method you're the one on the right getting this correct will make you seem right

156
00:15:04,680 --> 00:15:09,680
How about another poll that last one was fun who thinks our mathematic operator list is done

157
00:15:10,680 --> 00:15:19,680
Me neither as it turns out you'll soon enough see all but one of these operators support requires three

158
00:15:19,680 --> 00:15:26,680
Three dundas at most for each of these things. Oh what joy to us supporting math operators brings

159
00:15:26,680 --> 00:15:32,680
So what sets these apart you'll groan and you'll grunt the last set of 13 has an eye in the front

160
00:15:32,680 --> 00:15:39,680
The last set of 13 has an eye in the front they're meant to support doing the math in place mutating the object

161
00:15:39,680 --> 00:15:46,680
Giving in the left space for instance plus equals uses dunder I add completing the addition support triad

162
00:15:47,680 --> 00:15:51,680
However, these methods you can actually omit they're used to help avoid copies a bit

163
00:15:51,680 --> 00:15:56,680
If one of these methods your type is lacking than X equals X plus Y will be the fall backing

164
00:15:56,680 --> 00:16:02,680
If you kept watch you might think I left one for later but no dunder div mod has no in place operator

165
00:16:05,680 --> 00:16:11,680
Now oh baby oh how the operator list will still grow regardless of lengthy class definitions you know

166
00:16:11,680 --> 00:16:18,680
You'll complain and you'll curse and you might even swear but you still need to learn the dundas to compare

167
00:16:18,680 --> 00:16:24,680
The names of these methods aren't really all surprising the brevity of each name is actually what's quite appetizing

168
00:16:24,680 --> 00:16:29,680
Using only two letters to support each operator for operations equality lesser and greater

169
00:16:29,680 --> 00:16:34,680
They're exactly like the methods that I just reported they return not implemented if the comparison isn't supported

170
00:16:34,680 --> 00:16:40,680
And if you want dunder ne you can simply omit dunder eq will defined will be tested a bit

171
00:16:40,680 --> 00:16:43,680
And the return is inverted unless not implemented

172
00:16:43,680 --> 00:16:49,680
However this time there's no crazy switcheroo in this case a type error is raised onto you

173
00:16:49,680 --> 00:16:55,680
And if the comparison is okay a truce or false value as a return is the way

174
00:16:55,680 --> 00:17:01,680
Or anything truthy or falsy is okay it's turned into a bully in the pythonic way

175
00:17:01,680 --> 00:17:09,680
Oh wait forgive me that's actually a new dunder magics on magics isn't python a wonder

176
00:17:09,680 --> 00:17:13,680
If you want to make your object seem falsy or true you'll have to define dunder bool too

177
00:17:13,680 --> 00:17:18,680
Unless perhaps you've defined a dunder len an empty container is falsy then

178
00:17:19,680 --> 00:17:26,680
Last ones on our list and yes it's still growing brevity at this point we are simply foregoing

179
00:17:26,680 --> 00:17:31,680
You'll only need four more so no need to get wary to support the operators unary

180
00:17:31,680 --> 00:17:37,680
Dunder neg pause abs and invert you'll learn for minus plus abs and tilde x in turn

181
00:17:37,680 --> 00:17:41,680
That's it you'll think our list is complete

182
00:17:41,680 --> 00:17:44,680
And you're right I think now isn't that neat

183
00:17:44,680 --> 00:17:52,680
55 ish methods to support the operators no list of magics in one section is greater

184
00:17:52,680 --> 00:17:59,680
Actually not true as you'll find out emulating a number gets to tout the longest list of required magic capitulators

185
00:17:59,680 --> 00:18:04,680
Because in addition to most of those operators there's even more you'll want to support you'll see

186
00:18:04,680 --> 00:18:08,680
Numbers I guess just have a lot of flexibility

187
00:18:08,680 --> 00:18:13,680
From mathematics the list adds on four dunder round trunk seal and floor

188
00:18:13,680 --> 00:18:18,680
What these methods each do you'll notice is visible truncating the value into an integral

189
00:18:18,680 --> 00:18:24,680
Then from a number you'll have several excursions if your object supports any of several conversions

190
00:18:24,680 --> 00:18:33,680
Dunder complex and float bites and stir are magics which python will look and refer to make the type conversion occur

191
00:18:33,680 --> 00:18:39,680
And speaking of strings they've got special magics too dunder repper and format will be waiting for you

192
00:18:39,680 --> 00:18:43,680
Dunder repper returning the official string representation of your object

193
00:18:43,680 --> 00:18:46,680
And executable string of your object is what your callers expect

194
00:18:46,680 --> 00:18:53,680
And for dunder format you'll choose exactly how to track through formatting your object based on the spec

195
00:18:53,680 --> 00:19:01,680
The other magics all come in small lists and in this tome some of them won't exist like the 11 methods for copying and or pickling

196
00:19:01,680 --> 00:19:06,680
Yet here are some more for you coming in at a trickling

197
00:19:06,680 --> 00:19:13,680
If you want your object to quack like a function dunder call is the callable magic junction

198
00:19:13,680 --> 00:19:20,680
Or maybe you'll quack perhaps like an iterator dunder next is the method for that imitator returning the next value

199
00:19:20,680 --> 00:19:27,680
Or the specials terminator which goes by the name of stop iteration you'll raise it when there's no more values in your formation

200
00:19:27,680 --> 00:19:32,680
And if you want something that supports use with with dunder enter and exit says the word Smith

201
00:19:32,680 --> 00:19:37,680
The former is issued right before the inner scope return self is usually the trope

202
00:19:37,680 --> 00:19:43,680
The latter is called when the inner scope is done whether it finished or ran into an exception

203
00:19:43,680 --> 00:19:48,680
This method has power in multiple ways it can release acquired resources always

204
00:19:48,680 --> 00:19:56,680
But it also gets a chance to suppress an exception return true to complete the interception

205
00:19:56,680 --> 00:20:02,680
And then there are some which feels kind of wacky defining them sometimes feel a bit tacky

206
00:20:02,680 --> 00:20:09,680
Dunder in its subclass if defining it you have dared every time a subclass of yours is declared

207
00:20:09,680 --> 00:20:16,680
It receives that subclass as quick as molasses and it was actually added to wean off some use of meta classes

208
00:20:16,680 --> 00:20:23,680
And speaking of meta classes there's dunder prepare on second thought you'll not want to go there

209
00:20:23,680 --> 00:20:29,680
The last set of magics on this magical list of tricks are hooks into instance and subclass checks

210
00:20:29,680 --> 00:20:37,680
That's right the objects you write actually gets a say on the answer of his instance in his subclass yay or nay

211
00:20:37,680 --> 00:20:45,680
However these are looked up on the type of your class meta classes how about we pass

212
00:20:45,680 --> 00:20:50,680
And actually that's it no more magic I'll disclose your journey you've journeyed now comes to a close

213
00:20:50,680 --> 00:20:56,680
To know most of them including the ones this talk doesn't entail read

214
00:20:56,680 --> 00:21:05,680
HTTPS colon forward slash forward slash docs dot python dot org slash three slash reference slash data model dot HTML

215
00:21:05,680 --> 00:21:12,680
Or just ask Google for the URL since most of these magics that page does it detail

216
00:21:12,680 --> 00:21:17,680
Now since your magic is waiting since your mountain is waiting and as you go on your way

217
00:21:17,680 --> 00:21:24,680
Remember the things I remembered to you today and write all of your code the good pythonic way

218
00:21:24,680 --> 00:21:36,680
Yes

219
00:21:36,680 --> 00:21:43,680
Dunder sues ladies and gentlemen all right so I do actually have one question

220
00:21:43,680 --> 00:21:46,680
Oh man that was a brave person

221
00:21:46,680 --> 00:21:48,680
And it wasn't just what the heck in case you were wondering

222
00:21:48,680 --> 00:21:51,680
Oh yeah I did say that was valid

223
00:21:51,680 --> 00:21:55,680
The one question that came in is are you ever going to publish this book

224
00:21:55,680 --> 00:21:58,680
Oh I get that actually a few times so I have like a prop

225
00:21:58,680 --> 00:22:03,680
I did tell myself if I got into PyCon this year I'd publish it but that did not happen

226
00:22:03,680 --> 00:22:09,680
Maybe is the best answer I can give I gave a confident yes at North Bay Python and then I was wrong so I'm trying not to give it but yeah

227
00:22:09,680 --> 00:22:10,680
Fair enough

228
00:22:10,680 --> 00:22:15,680
If I get to go to PyCon this year you might see it as a PyLadies auction item so auction it if you see it

229
00:22:15,680 --> 00:22:20,680
Lovely awesome thanks again Josh or Dunder Sues

