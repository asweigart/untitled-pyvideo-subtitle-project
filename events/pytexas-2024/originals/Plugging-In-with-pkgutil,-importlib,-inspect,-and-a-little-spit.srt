1
00:00:00,000 --> 00:00:01,000
Joe Schneider.

2
00:00:01,000 --> 00:00:02,000
Yay!

3
00:00:02,000 --> 00:00:03,000
Hi!

4
00:00:03,000 --> 00:00:04,000
All right.

5
00:00:04,000 --> 00:00:11,080
I'm going to do my best not to suck because I'm the only thing standing between you and

6
00:00:11,080 --> 00:00:13,160
the lightning talks and getting out of here.

7
00:00:13,160 --> 00:00:16,000
So I can hold you all hostage.

8
00:00:16,000 --> 00:00:17,000
Okay.

9
00:00:17,000 --> 00:00:20,160
I need to tell a story.

10
00:00:20,160 --> 00:00:25,000
Back in the olden days, when I was but a little lad, there was this little game called Doom.

11
00:00:25,000 --> 00:00:28,560
And it was really cool at the time because it not only put out the game, but it put out

12
00:00:28,560 --> 00:00:31,040
the tools for you to make your own levels.

13
00:00:31,040 --> 00:00:34,200
And I thought that was really cool at the time because we didn't have anything like

14
00:00:34,200 --> 00:00:37,960
that except maybe board games where you made up your own rules to sorry and everybody was

15
00:00:37,960 --> 00:00:40,620
sorry.

16
00:00:40,620 --> 00:00:43,760
I love expandable architectures like that.

17
00:00:43,760 --> 00:00:45,280
It got me super interested.

18
00:00:45,280 --> 00:00:46,720
Of course, I grew up on Legos.

19
00:00:46,720 --> 00:00:50,640
I was before Minecraft or I probably would have loved it if it was around when I was

20
00:00:50,640 --> 00:00:51,640
a kid.

21
00:00:51,640 --> 00:00:56,360
But I love this idea of being able to take something and extend it and make it something

22
00:00:56,360 --> 00:00:57,360
of my own.

23
00:00:57,360 --> 00:00:59,680
I've been a big fan of plugin architectures.

24
00:00:59,680 --> 00:01:03,520
And so I'm going to talk a little bit about how to make a plugin architecture.

25
00:01:03,520 --> 00:01:07,000
Really I'm going to talk about three libraries that I don't think get a lot of play, but

26
00:01:07,000 --> 00:01:08,800
they're kind of cool and kind of interesting.

27
00:01:08,800 --> 00:01:12,360
And that's package, util, import, lib and inspect.

28
00:01:12,360 --> 00:01:18,200
But I'm going to do that by taking you through building an expandable application with plugins.

29
00:01:18,200 --> 00:01:22,400
So let's level set on what we think a plugin is.

30
00:01:22,400 --> 00:01:26,600
A plugin by my definition is you have an application that's a host application.

31
00:01:26,680 --> 00:01:27,680
It raises events.

32
00:01:27,680 --> 00:01:30,760
It says when it's doing something.

33
00:01:30,760 --> 00:01:35,080
Plugins are optional components that can respond to those events.

34
00:01:35,080 --> 00:01:39,480
When user does this, I can go do this other thing as a result.

35
00:01:39,480 --> 00:01:42,600
The classic example is extensions in your browser, right?

36
00:01:42,600 --> 00:01:47,240
The host application, the browser, provides buttons for you to interact with as the user.

37
00:01:47,240 --> 00:01:51,840
Provides the URL bar, provides back buttons and forward buttons, and it raises events

38
00:01:51,840 --> 00:01:54,120
when the user interacts with those things.

39
00:01:54,120 --> 00:01:59,640
Those extensions can interact with those events and do things on your behalf, right?

40
00:01:59,640 --> 00:02:02,200
We've all used browser extensions before, right?

41
00:02:02,200 --> 00:02:03,200
Right.

42
00:02:03,200 --> 00:02:04,600
Plugins are designed to be optional.

43
00:02:04,600 --> 00:02:05,600
They can be there.

44
00:02:05,600 --> 00:02:06,600
They cannot be there.

45
00:02:06,600 --> 00:02:08,760
They are loosely coupled from the regular application.

46
00:02:08,760 --> 00:02:13,960
I like this diagram as kind of a shorthand of a good way to explain how plugins work.

47
00:02:13,960 --> 00:02:15,920
The user interacts with the host application.

48
00:02:15,920 --> 00:02:20,800
The host application sends signals that a thing has happened and the plugins can respond

49
00:02:20,800 --> 00:02:23,680
to that thing happening, right?

50
00:02:24,240 --> 00:02:27,200
What plugins are and plugin architecture.

51
00:02:27,200 --> 00:02:29,200
Everybody understands why plugin architecture is cool?

52
00:02:29,200 --> 00:02:30,200
All right.

53
00:02:30,200 --> 00:02:31,200
Talk done.

54
00:02:31,200 --> 00:02:32,200
Bye, y'all.

55
00:02:32,200 --> 00:02:33,200
No.

56
00:02:33,200 --> 00:02:34,200
There's a little more to it than that.

57
00:02:34,200 --> 00:02:35,200
Okay.

58
00:02:35,200 --> 00:02:37,200
So, plugins are designed to be optional.

59
00:02:37,200 --> 00:02:40,800
Well, what's the best way to explain how plugins work?

60
00:02:40,800 --> 00:02:42,720
How about we build an application that uses plugins?

61
00:02:42,720 --> 00:02:44,720
Sound like a good plan?

62
00:02:44,720 --> 00:02:45,960
Sweet.

63
00:02:45,960 --> 00:02:50,960
I like to start my applications with requirements because I'm boring.

64
00:02:50,960 --> 00:02:52,200
This is the way that I am.

65
00:02:52,200 --> 00:02:54,360
But I like having an idea of what I'm going to do.

66
00:02:54,360 --> 00:02:55,640
So we're going to go on a quest.

67
00:02:55,640 --> 00:02:56,940
We're going to build an application.

68
00:02:56,940 --> 00:03:00,560
We're going to build a little command line application called file info.

69
00:03:00,560 --> 00:03:03,040
Guess what file info is going to do?

70
00:03:03,040 --> 00:03:04,560
It's going to print out information from files.

71
00:03:04,560 --> 00:03:07,640
I am not on the naming committee.

72
00:03:07,640 --> 00:03:13,320
It is going to send a single event whenever it encounters a new file.

73
00:03:13,320 --> 00:03:16,960
What it's going to do by default is it's going to print out the basic information of a file.

74
00:03:16,960 --> 00:03:20,040
How big it is, the full path to it, and what type of file it is, right?

75
00:03:20,360 --> 00:03:22,440
Because those are common to every file.

76
00:03:22,440 --> 00:03:26,480
But I want to make it expandable so that you can create a plugin to give more specific

77
00:03:26,480 --> 00:03:28,920
information about more specific types.

78
00:03:28,920 --> 00:03:32,200
Like say you have an image file and you want the dimensions of that.

79
00:03:32,200 --> 00:03:35,440
Say you get an Excel file and you want to know how many rows and columns and how many

80
00:03:35,440 --> 00:03:37,440
worksheets there are in there.

81
00:03:37,440 --> 00:03:39,480
You should be able to get that information, right?

82
00:03:39,480 --> 00:03:43,200
A plugin author should be able to create a plugin to give you that information.

83
00:03:43,200 --> 00:03:46,840
So file info is going to expose a single event.

84
00:03:46,840 --> 00:03:49,960
Now we talk about how we want to deal with plugins.

85
00:03:50,040 --> 00:03:55,240
Since I'm covering dynamic stuff, I like to, kind of like Lynn was saying, think about

86
00:03:55,240 --> 00:03:57,240
the user experience of these things.

87
00:03:57,240 --> 00:04:00,320
And I have two users that I have to worry about.

88
00:04:00,320 --> 00:04:04,600
I have the user that's actually using file info and I have the plugin developer who's

89
00:04:04,600 --> 00:04:06,840
developing a plugin for file info.

90
00:04:06,840 --> 00:04:10,640
They both, I need to make a good experience for both of them, right?

91
00:04:10,640 --> 00:04:11,640
Right?

92
00:04:11,640 --> 00:04:12,640
Right.

93
00:04:12,640 --> 00:04:13,640
Okay.

94
00:04:13,640 --> 00:04:15,160
This is the audience participation portion.

95
00:04:15,160 --> 00:04:18,960
Feel free to, I don't know, whatever.

96
00:04:19,000 --> 00:04:21,720
So for plugin, I want to make things as easy as possible.

97
00:04:21,720 --> 00:04:26,240
So for the user, I want file info to discover plugins by itself.

98
00:04:26,240 --> 00:04:29,200
I don't want the user to have to tell it where the plugins are.

99
00:04:29,200 --> 00:04:33,040
I want my file info to just go find all of the plugins.

100
00:04:33,040 --> 00:04:38,080
So the rules that I'm going to have here is that a plugin is going to be any top level

101
00:04:38,080 --> 00:04:44,800
module that's name begins with file info and ends with plugin and has one of my plugin

102
00:04:44,800 --> 00:04:45,800
functions in there.

103
00:04:45,800 --> 00:04:47,840
Everybody with me so far?

104
00:04:48,600 --> 00:04:50,120
Okay.

105
00:04:50,120 --> 00:04:53,120
Plugins for file info are just going to be functions.

106
00:04:53,120 --> 00:04:56,400
They're going to be simple functions that are going to be past the path object to the

107
00:04:56,400 --> 00:05:00,160
file that they're finding and they're going to return an iterable of strings.

108
00:05:00,160 --> 00:05:05,120
They can return a list, a tuple, a set, they could return a generator, whatever, as long

109
00:05:05,120 --> 00:05:08,040
as it's all strings because that's what I'm going to print out to the user.

110
00:05:08,040 --> 00:05:09,040
With me?

111
00:05:09,040 --> 00:05:10,040
Yes.

112
00:05:10,040 --> 00:05:11,040
Sweet.

113
00:05:11,040 --> 00:05:14,680
Any exceptions raised by calling a plugin are going to be logged at the debug level

114
00:05:14,840 --> 00:05:17,800
and then squelched because I don't want the host application to crash.

115
00:05:17,800 --> 00:05:21,800
I want it to be as robust as possible.

116
00:05:21,800 --> 00:05:25,480
I'm going to log those things at debug level and move on.

117
00:05:25,480 --> 00:05:30,640
All functions that can respond to a file will respond to a file.

118
00:05:30,640 --> 00:05:33,800
And since we're doing logging, we're going to use the Python logging library.

119
00:05:33,800 --> 00:05:36,600
I use the Python logging library in everything.

120
00:05:36,600 --> 00:05:40,520
What I'm letting the plugin developer know is anything that you're not logging to the

121
00:05:40,520 --> 00:05:46,200
user probably should be logged at debug level otherwise it will get logged to the user.

122
00:05:46,200 --> 00:05:48,680
As far as the plugins, we're going to build two plugins.

123
00:05:48,680 --> 00:05:49,680
We're going to build a text plugin.

124
00:05:49,680 --> 00:05:52,080
It's going to be called file info text plugin.

125
00:05:52,080 --> 00:05:54,480
Again, I am not on the naming committee.

126
00:05:54,480 --> 00:05:58,740
It is going to print out how many lines and how many words are in there.

127
00:05:58,740 --> 00:06:01,800
We won't get cute or pedantic about the definition of lines or words.

128
00:06:01,800 --> 00:06:05,600
Lines are the number of substrings separated by new lines and words are the number of substrings

129
00:06:05,600 --> 00:06:09,280
separated by spaces that are not empty.

130
00:06:09,280 --> 00:06:10,280
Good.

131
00:06:10,280 --> 00:06:14,820
Then we're going to do a CSV plugin.

132
00:06:14,820 --> 00:06:16,840
This is going to be using the CSV module.

133
00:06:16,840 --> 00:06:19,320
It's our special guest star of this talk.

134
00:06:19,320 --> 00:06:23,960
We're going to use it to extract the number of rows and columns in there.

135
00:06:23,960 --> 00:06:26,160
Everybody with me on this one so far?

136
00:06:26,160 --> 00:06:27,160
Everybody like?

137
00:06:27,160 --> 00:06:28,160
All right.

138
00:06:28,160 --> 00:06:29,640
So we got our requirements in hand.

139
00:06:29,640 --> 00:06:31,020
Yay, our product owner is happy.

140
00:06:31,020 --> 00:06:33,560
Now we can set off to designing.

141
00:06:33,560 --> 00:06:36,560
There's a lot of different ways you can slice this.

142
00:06:36,560 --> 00:06:40,720
So let me talk about some of the things I didn't decide to do.

143
00:06:40,720 --> 00:06:41,720
Thinking about the requirements.

144
00:06:41,720 --> 00:06:42,720
Spoiler alert.

145
00:06:42,720 --> 00:06:46,120
I'm going to do a decorator to decorate functions.

146
00:06:46,120 --> 00:06:48,320
But let's talk about through all the other things I didn't do.

147
00:06:48,320 --> 00:06:49,920
Plugin classes.

148
00:06:49,920 --> 00:06:55,920
Classes for plugins are really, really great if you've got multiple events or your plugins

149
00:06:55,920 --> 00:06:59,440
are going to need to manage state or both.

150
00:06:59,440 --> 00:07:03,040
If you're not going to need to do those, then a class is probably overkill.

151
00:07:03,040 --> 00:07:07,660
If I were going to do a class, this is my OJ Simpson, if I did it, I would probably

152
00:07:07,660 --> 00:07:10,080
do an abstract base class for the interface.

153
00:07:10,080 --> 00:07:14,640
This is just so we can ensure that all of the plugins fit the interface that I need

154
00:07:14,640 --> 00:07:15,740
them to.

155
00:07:15,740 --> 00:07:19,360
And then I'd create a concrete class that implements that ABC.

156
00:07:19,360 --> 00:07:21,720
That's a simple class that anybody can subclass.

157
00:07:21,720 --> 00:07:29,160
Basically the idea is any subclass of my ABC is a plugin that I can go and find and load.

158
00:07:29,160 --> 00:07:30,160
Yay.

159
00:07:30,280 --> 00:07:33,440
I have done this for something that I have written.

160
00:07:33,440 --> 00:07:34,600
This program is much simpler.

161
00:07:34,600 --> 00:07:37,520
We don't need all that overhead, so we're just going to skip that.

162
00:07:37,520 --> 00:07:40,880
I could do like PyTest does and do specifically named functions.

163
00:07:40,880 --> 00:07:43,580
They're really more hooks than plugins.

164
00:07:43,580 --> 00:07:48,480
If thine has a function named this with this signature, then by golly, it looks like a

165
00:07:48,480 --> 00:07:50,280
plugin and I will run it.

166
00:07:50,280 --> 00:07:52,200
I don't like doing those.

167
00:07:52,200 --> 00:07:56,280
I don't like them because, number one, there's no easy way to pass metadata.

168
00:07:56,400 --> 00:08:00,080
There's no way for me to say this is only valid in these certain contexts and not in

169
00:08:00,080 --> 00:08:03,360
others and there's no good easy way for it to manage scope.

170
00:08:03,360 --> 00:08:09,200
You basically have to use the global or the module scope to do things and that's icky.

171
00:08:09,200 --> 00:08:11,880
That's a scientific term, icky.

172
00:08:11,880 --> 00:08:15,760
I just learned about entry points about three months ago.

173
00:08:15,760 --> 00:08:17,760
Here's why I eschewed entry points.

174
00:08:17,760 --> 00:08:21,680
It puts a lot of effort on the plugin developer.

175
00:08:21,680 --> 00:08:23,280
It gives them a lot of power.

176
00:08:23,280 --> 00:08:28,540
They get to say what is and isn't a plugin, but it also gives them the responsibility

177
00:08:28,540 --> 00:08:32,660
of having to say what is and isn't a plugin.

178
00:08:32,660 --> 00:08:34,680
The way that I'm going to do it is easy.

179
00:08:34,680 --> 00:08:39,760
Any function that's got my decorator on it is a plugin.

180
00:08:39,760 --> 00:08:44,480
Developer doesn't have to do anything else.

181
00:08:44,480 --> 00:08:46,160
There's examples and stuff in the documentation.

182
00:08:46,160 --> 00:08:48,640
There's way more documentation that I'm going to go through in here.

183
00:08:48,640 --> 00:08:49,680
You're welcome to go back.

184
00:08:49,680 --> 00:08:52,160
There's even a whole bonus section that I'm not going to go through today unless you all

185
00:08:52,160 --> 00:08:55,160
just really want me to keep going.

186
00:08:55,160 --> 00:08:56,160
I love decorators.

187
00:08:56,160 --> 00:09:00,700
If you don't believe me, go see my talk from last year where I gave about four different

188
00:09:00,700 --> 00:09:03,000
types of decorators and places that I use them.

189
00:09:03,000 --> 00:09:05,400
I think decorators are amazing.

190
00:09:05,400 --> 00:09:10,640
This is a really neat type of decorator that I call a tagging decorator.

191
00:09:10,640 --> 00:09:13,520
It's like one of those little tags that they put on animals that they're tracking out in

192
00:09:13,520 --> 00:09:14,520
the wild.

193
00:09:14,520 --> 00:09:20,040
I'm going to tag a function with an attribute and then release it back into the module so

194
00:09:20,040 --> 00:09:23,120
that I can find it later.

195
00:09:23,120 --> 00:09:25,000
Here is the code for that decorator.

196
00:09:25,000 --> 00:09:27,440
Because you all have made me zoom in, I'm going to have to scroll through it a little

197
00:09:27,440 --> 00:09:28,440
bit.

198
00:09:28,440 --> 00:09:30,000
I'm going to walk through what it's doing here.

199
00:09:30,000 --> 00:09:32,000
First off, note this.

200
00:09:32,000 --> 00:09:33,000
Remember it.

201
00:09:33,000 --> 00:09:34,000
Sear it into your brain.

202
00:09:34,000 --> 00:09:35,160
You want to look at it later.

203
00:09:35,160 --> 00:09:37,440
I created a string constant for the attribute name.

204
00:09:37,440 --> 00:09:40,280
This is so that I have that code in one place.

205
00:09:40,280 --> 00:09:43,520
If I decide to change the attribute name, like I find out that this isn't working for

206
00:09:43,520 --> 00:09:46,080
some reason, I only have to change it in one place and everything works.

207
00:09:46,080 --> 00:09:47,080
This is good practice.

208
00:09:47,080 --> 00:09:48,080
You should do this.

209
00:09:48,080 --> 00:09:49,800
I also created my logger.

210
00:09:49,800 --> 00:09:50,800
This is my decorator.

211
00:09:50,800 --> 00:09:54,040
Notice my decorator collects more than one pattern.

212
00:09:54,040 --> 00:09:57,360
It can take as many patterns as you want to give it for different types of files.

213
00:09:57,360 --> 00:10:01,560
You're marking this plugin matches these types of files.

214
00:10:01,560 --> 00:10:06,640
I don't want to get bogged down in explaining regex, but these are regex patterns.

215
00:10:06,640 --> 00:10:08,640
It can take one or more.

216
00:10:08,640 --> 00:10:10,200
Makes it easy to use.

217
00:10:10,200 --> 00:10:12,520
What it's going to do is it's going to return a wrapper function.

218
00:10:12,520 --> 00:10:15,840
What that wrapper function is going to do is take whatever function you put this decorator

219
00:10:15,840 --> 00:10:16,880
on.

220
00:10:16,880 --> 00:10:21,240
It's going to create an attribute that is a set of those patterns.

221
00:10:21,240 --> 00:10:24,200
If there's already an attribute with a set of those patterns, it's just going to add

222
00:10:24,200 --> 00:10:25,640
the patterns to it.

223
00:10:25,640 --> 00:10:27,600
Cool, cool?

224
00:10:27,600 --> 00:10:30,720
Anybody want to guess why I did that that way?

225
00:10:30,720 --> 00:10:35,120
So if you want to stack more than one decorator on there, they'll just add on to it.

226
00:10:35,120 --> 00:10:36,120
Makes it nice and easy.

227
00:10:36,120 --> 00:10:37,120
Very portable.

228
00:10:37,120 --> 00:10:40,340
Then we're just going to return the original function without doing anything else.

229
00:10:40,340 --> 00:10:43,820
Most decorators return a function in the function's place that they're decorating.

230
00:10:43,820 --> 00:10:44,820
This one doesn't.

231
00:10:45,820 --> 00:10:48,980
But now modified, changed, if you will.

232
00:10:48,980 --> 00:10:50,020
It didn't come out the same.

233
00:10:50,020 --> 00:10:52,140
It has seen some stuff.

234
00:10:52,140 --> 00:10:54,020
All right.

235
00:10:54,020 --> 00:10:55,740
So we've explained how that works.

236
00:10:55,740 --> 00:10:58,660
Now let's talk about how we're going to apply the decorator.

237
00:10:58,660 --> 00:11:01,020
Fun part, I used the stones to destroy the stones.

238
00:11:01,020 --> 00:11:04,620
I used the decorator to do the default case.

239
00:11:04,620 --> 00:11:10,320
Everybody knows that regex.star is anything, right?

240
00:11:10,320 --> 00:11:15,880
So this will match any type of file, even files that have no extension.

241
00:11:15,880 --> 00:11:17,280
Yay!

242
00:11:17,280 --> 00:11:18,560
And this is the default case.

243
00:11:18,560 --> 00:11:25,960
I'm using a simple generator to return the full path, to return the file type.

244
00:11:25,960 --> 00:11:30,560
And I had to handle the case where there is no extension, so I just return the word file

245
00:11:30,560 --> 00:11:32,040
in its place.

246
00:11:32,040 --> 00:11:33,800
And the size in bytes.

247
00:11:33,800 --> 00:11:35,180
Cool, cool?

248
00:11:35,180 --> 00:11:37,520
By the way, pathlib, use it in everything.

249
00:11:37,520 --> 00:11:39,520
It is fantastic.

250
00:11:39,520 --> 00:11:40,880
All right.

251
00:11:40,880 --> 00:11:42,660
Now comes the fun part.

252
00:11:42,660 --> 00:11:45,160
This is where I get to explain all the fun things that I learned.

253
00:11:45,160 --> 00:11:47,580
All of this I learned through trial and error.

254
00:11:47,580 --> 00:11:51,200
This gray hair and this gray hair and these gray hairs came from some of the things that

255
00:11:51,200 --> 00:11:53,440
I learned here.

256
00:11:53,440 --> 00:11:56,960
In order to find plugins, we got like a four-step process here, right?

257
00:11:56,960 --> 00:12:02,220
We need to get a list of all of the accessible Python modules, right?

258
00:12:02,220 --> 00:12:05,800
For each module that we find, we need to import that module so that we can get at all the

259
00:12:05,800 --> 00:12:08,600
sweet, sweet objects inside, right?

260
00:12:09,000 --> 00:12:10,200
Yeah?

261
00:12:10,200 --> 00:12:14,520
If the module has sub-modules, then we probably want to go crawl all of those recursively

262
00:12:14,520 --> 00:12:16,000
as well, right?

263
00:12:16,000 --> 00:12:20,760
Because somebody may have stuck their plugins in a package, in a module that's inside the

264
00:12:20,760 --> 00:12:24,840
package, so we want to be able to go and find all of those, right?

265
00:12:24,840 --> 00:12:25,920
Right.

266
00:12:25,920 --> 00:12:30,200
That means as the developer, you can put your plugins wherever you want in your code, and

267
00:12:30,200 --> 00:12:31,500
we will find them.

268
00:12:31,500 --> 00:12:34,160
We will Liam Neeson those things.

269
00:12:34,160 --> 00:12:37,160
And fourth, we want to iterate through all of the objects in the module's namespace to

270
00:12:37,160 --> 00:12:38,160
find the plugins.

271
00:12:38,160 --> 00:12:40,760
We want to go through everything that's in there.

272
00:12:40,760 --> 00:12:44,380
So enter my three amigos, my friends here.

273
00:12:44,380 --> 00:12:47,120
This is the Steve Martin one, PackageUtil.

274
00:12:47,120 --> 00:12:52,360
What it does is it provides functions and stuff for navigating the package structure.

275
00:12:52,360 --> 00:12:53,760
There are two methods that we're going to talk about.

276
00:12:53,760 --> 00:12:57,560
There's walk packages, and there's iter modules.

277
00:12:57,560 --> 00:13:01,000
Walk packages, use with care.

278
00:13:01,000 --> 00:13:07,800
Walk packages goes through every module in namespace, imports it, looking for sub-modules,

279
00:13:07,800 --> 00:13:11,200
and returns each one along the way.

280
00:13:11,200 --> 00:13:13,720
Here's the important lesson that I learned the hard way.

281
00:13:13,720 --> 00:13:14,720
It imports them.

282
00:13:14,720 --> 00:13:15,860
Hey, guess what?

283
00:13:15,860 --> 00:13:18,720
What happens when you import anti-gravity?

284
00:13:18,720 --> 00:13:22,540
Your browser pops up a window with an XKCD comic.

285
00:13:22,540 --> 00:13:26,360
When you're looking for plugins, you don't want that to happen.

286
00:13:26,360 --> 00:13:28,360
What happens when you import unit tests?

287
00:13:28,360 --> 00:13:30,660
It tries to start running unit tests.

288
00:13:30,660 --> 00:13:32,540
You don't want that to happen.

289
00:13:32,540 --> 00:13:36,920
So you probably don't want to import every module that's out there.

290
00:13:36,920 --> 00:13:38,880
Enter iter modules.

291
00:13:38,880 --> 00:13:44,640
What iter modules does is just returns the names of the top-level modules without loading

292
00:13:44,640 --> 00:13:45,820
anything.

293
00:13:45,820 --> 00:13:50,680
The trade-off is you can't see what sub-modules are inside, because in order to see what sub-modules

294
00:13:50,680 --> 00:13:55,280
are inside, you have to import the original package, right?

295
00:13:55,280 --> 00:13:56,640
Everybody's with me so far?

296
00:13:56,640 --> 00:13:58,640
It's all clear as mud.

297
00:13:58,640 --> 00:14:05,160
So what we do is we use iter modules to skim along the top, and if what we get is a package,

298
00:14:05,160 --> 00:14:09,560
then we can use walk modules to get all of the other ones down there, right?

299
00:14:09,560 --> 00:14:12,800
Walk packages to go get all of the sub-modules underneath there.

300
00:14:12,800 --> 00:14:14,800
That way we can do it with care, right?

301
00:14:14,800 --> 00:14:17,700
And that way we can do it without importing any of the other things that aren't something

302
00:14:17,700 --> 00:14:23,720
that starts with file info and ends with plugin.

303
00:14:23,720 --> 00:14:24,720
There we go.

304
00:14:24,720 --> 00:14:26,340
I have to keep you guys awake.

305
00:14:26,340 --> 00:14:30,320
It's late in the afternoon.

306
00:14:30,320 --> 00:14:33,300
Next thing we're going to talk about, this is the Chevy Chase of the modules.

307
00:14:33,300 --> 00:14:34,900
This is import lib.

308
00:14:34,900 --> 00:14:41,140
Import lib provides you a really simple function called import module that you give it a string

309
00:14:41,140 --> 00:14:44,140
with the name of the module, and it returns to you the module object.

310
00:14:44,140 --> 00:14:46,580
It loads it.

311
00:14:46,580 --> 00:14:50,860
Everybody's familiar with that first box, right, where you do import os.path?

312
00:14:50,860 --> 00:14:52,540
Everybody's done that before?

313
00:14:52,540 --> 00:14:53,700
Right.

314
00:14:53,700 --> 00:14:57,340
What if os.path is in a string?

315
00:14:57,340 --> 00:15:00,580
Well, then you need import lib in order to pull it in.

316
00:15:00,580 --> 00:15:01,720
It's really simple.

317
00:15:01,720 --> 00:15:03,700
We just do import lib.import module.

318
00:15:03,700 --> 00:15:07,980
We give it the module name as a string, bada-bing, bada-boom, we get a module object back.

319
00:15:07,980 --> 00:15:09,660
Cool, cool?

320
00:15:09,660 --> 00:15:10,660
Sweet.

321
00:15:10,660 --> 00:15:12,340
All right, last.

322
00:15:12,340 --> 00:15:14,700
This is the Martin Short of the group.

323
00:15:14,700 --> 00:15:15,700
Inspect.

324
00:15:15,700 --> 00:15:18,980
Inspect is Python's module for inspecting live objects.

325
00:15:18,980 --> 00:15:20,260
This is a live fire drill.

326
00:15:20,260 --> 00:15:24,220
You have been issued actual ammunition for this.

327
00:15:24,220 --> 00:15:28,220
What it does is it provides a lot of different methods and functions for being able to find

328
00:15:28,220 --> 00:15:34,620
specific types of objects from an object, a module, whatever is loaded at runtime.

329
00:15:34,620 --> 00:15:38,700
It is able to introspect and reflect everything to go find something.

330
00:15:38,700 --> 00:15:43,380
That was a lot of words to say it can look at things and find things for you.

331
00:15:43,380 --> 00:15:47,100
In this particular case, I'm going to use some really useful functions that are in there.

332
00:15:47,100 --> 00:15:51,260
I'm going to use get members to iterate through all of the members that are in the module,

333
00:15:51,260 --> 00:15:55,180
all of the things that are defined at the module level, and I'm going to use its is

334
00:15:55,180 --> 00:16:00,500
function predicate function to go find things that are functions, right?

335
00:16:00,500 --> 00:16:03,880
Things that are defined with a def keyword in our functions.

336
00:16:03,880 --> 00:16:06,820
Not things that are bound to classes or anything like that.

337
00:16:06,820 --> 00:16:07,820
Straight functions.

338
00:16:07,820 --> 00:16:08,820
Everybody's with me so far?

339
00:16:08,820 --> 00:16:09,820
All right.

340
00:16:09,820 --> 00:16:12,500
So, let's put all of this together.

341
00:16:12,500 --> 00:16:15,680
First, we want to be able to identify a plugin function.

342
00:16:15,680 --> 00:16:17,260
This is the simplest thing we need to do, right?

343
00:16:17,260 --> 00:16:22,460
So, we want to create a little simple function that given any object tells you whether it

344
00:16:22,460 --> 00:16:27,380
is a function that has our attribute on it, right?

345
00:16:27,380 --> 00:16:30,580
So what we're going to do is we're going to create this little function, the is plugin

346
00:16:30,580 --> 00:16:31,580
func.

347
00:16:31,580 --> 00:16:32,580
Again, I'm not on the naming committee.

348
00:16:32,580 --> 00:16:33,580
Okay.

349
00:16:33,580 --> 00:16:34,580
I was the naming committee for this one.

350
00:16:34,580 --> 00:16:37,580
That's going to take an object and it's going to return true or false.

351
00:16:37,580 --> 00:16:40,660
True if it is what I'm looking for and false if this is not the droids that I'm looking

352
00:16:40,660 --> 00:16:41,660
for.

353
00:16:41,660 --> 00:16:42,660
They can go about its business.

354
00:16:42,660 --> 00:16:47,420
I'm going to use inspect.is function, so it's got to be a function and it has to have my

355
00:16:47,420 --> 00:16:48,860
attribute on it.

356
00:16:48,860 --> 00:16:50,340
Cool, cool?

357
00:16:50,340 --> 00:16:51,700
All right.

358
00:16:51,700 --> 00:16:54,580
So, the first thing I'm going to do is I'm going to load plugin functions from module

359
00:16:54,580 --> 00:16:55,580
given its name.

360
00:16:55,580 --> 00:17:02,520
So, this is I'm given a module name as a string and I want to get a list of all of the functions

361
00:17:02,520 --> 00:17:04,420
with their associated pattern.

362
00:17:04,420 --> 00:17:05,420
Make sense?

363
00:17:05,420 --> 00:17:07,580
I'm going to return a list of two element tuples.

364
00:17:07,580 --> 00:17:10,220
That first element is going to be that regex pattern.

365
00:17:10,220 --> 00:17:13,300
That second is going to be that function that can be called.

366
00:17:13,300 --> 00:17:14,300
Cool?

367
00:17:14,300 --> 00:17:19,060
I'm going to do that by importing the module and then I'm going to iterate through each

368
00:17:19,060 --> 00:17:23,380
of the members in the module looking for the ones that pass my is plugin func test

369
00:17:23,380 --> 00:17:27,500
and for each of the type patterns that's on that attribute, I'm going to go add to that

370
00:17:27,500 --> 00:17:29,820
list of tuples.

371
00:17:29,820 --> 00:17:33,460
Is anybody mystified by any of this code?

372
00:17:33,460 --> 00:17:35,600
Good.

373
00:17:35,600 --> 00:17:37,220
This is good easy magic.

374
00:17:37,220 --> 00:17:38,980
All right.

375
00:17:38,980 --> 00:17:39,980
Step three.

376
00:17:39,980 --> 00:17:42,020
Now we need to go find all of the modules working backwards, right?

377
00:17:42,020 --> 00:17:43,860
So, we can identify a function.

378
00:17:43,860 --> 00:17:45,540
We can now find a function within a module.

379
00:17:45,540 --> 00:17:47,540
Now we have to go find all the modules, right?

380
00:17:48,380 --> 00:17:50,820
So, I created this function called find all functions.

381
00:17:50,820 --> 00:17:54,540
What it's going to do is it's going to go through each module.

382
00:17:54,540 --> 00:17:56,860
It's going to test if that module fits my naming scheme.

383
00:17:56,860 --> 00:17:58,860
If it doesn't, it's just going to skip and go to the next one.

384
00:17:58,860 --> 00:18:02,960
If it matches that naming scheme, it's going to check to see is this a package?

385
00:18:02,960 --> 00:18:11,800
If it's a package, it's going to go walk and call itself recursively, right?

386
00:18:11,800 --> 00:18:18,760
And if it's not, it's going to go look for all of the functions that are in that module.

387
00:18:18,760 --> 00:18:23,680
If there's any exceptions importing anything, we're going to log those quietly to debug,

388
00:18:23,680 --> 00:18:24,680
indicate that we're skipping it.

389
00:18:24,680 --> 00:18:25,920
We're going to move on to the next thing.

390
00:18:25,920 --> 00:18:29,880
Again, we want our host application to be bulletproof.

391
00:18:29,880 --> 00:18:31,080
Pandy's going to try to crash it later.

392
00:18:31,080 --> 00:18:32,360
He's going to find some way.

393
00:18:32,360 --> 00:18:37,000
I'm not going to be happy about it, but it worked on my machine.

394
00:18:37,000 --> 00:18:38,480
All right.

395
00:18:38,480 --> 00:18:40,780
Everybody with me so far on all of this?

396
00:18:40,780 --> 00:18:42,060
This is magic code.

397
00:18:42,060 --> 00:18:43,060
All right.

398
00:18:43,060 --> 00:18:46,880
So, now that we have all of our plug-ins, there's one other line I want to call your

399
00:18:46,880 --> 00:18:48,740
attention to, and that's this line.

400
00:18:48,740 --> 00:18:51,300
This is how we get our default case.

401
00:18:51,300 --> 00:18:56,860
Our default case is in a module that does not begin with file info and end with plug-ins,

402
00:18:56,860 --> 00:18:58,500
but we want to make sure it always gets loaded.

403
00:18:58,500 --> 00:19:01,780
So again, I used the stones to destroy the stones.

404
00:19:01,780 --> 00:19:07,540
I used my own function to find something in the current namespace.

405
00:19:07,540 --> 00:19:08,540
Yay.

406
00:19:08,540 --> 00:19:09,540
Okay.

407
00:19:10,180 --> 00:19:13,500
So, this gives us all the nuts and bolts we need to load plug-ins.

408
00:19:13,500 --> 00:19:16,460
Is anybody mystified by anything with loading plug-ins?

409
00:19:16,460 --> 00:19:19,460
Because it gets really easy from here.

410
00:19:19,460 --> 00:19:20,900
Let's go through implementing the plug-ins.

411
00:19:20,900 --> 00:19:22,820
Hey, these are quick and easy and dumb.

412
00:19:22,820 --> 00:19:27,620
I import my little decorator, I create a function, I decorate it with my decorator, and then

413
00:19:27,620 --> 00:19:29,740
I do what I need to do inside the function.

414
00:19:29,740 --> 00:19:30,740
Easy peasy?

415
00:19:30,740 --> 00:19:31,740
Easy?

416
00:19:31,740 --> 00:19:32,740
Easy?

417
00:19:32,740 --> 00:19:33,740
Cool.

418
00:19:33,740 --> 00:19:36,540
Same with comma separated value ones.

419
00:19:36,540 --> 00:19:39,260
This one was a little harder because I actually had to use the CSV reader.

420
00:19:39,300 --> 00:19:40,300
Okay, it wasn't that much harder.

421
00:19:40,300 --> 00:19:43,100
It was one extra line of code.

422
00:19:43,100 --> 00:19:44,700
But easy peasy.

423
00:19:44,700 --> 00:19:47,220
You get everything that you need.

424
00:19:47,220 --> 00:19:53,400
For anybody who's interested, by the way, all of this code is actually in the files.

425
00:19:53,400 --> 00:19:55,860
These things that you see here are excerpts.

426
00:19:55,860 --> 00:19:59,540
MK docs is just excerpting the actual code out here.

427
00:19:59,540 --> 00:20:00,540
This is all working code.

428
00:20:00,540 --> 00:20:01,980
We're going to run it in just a minute.

429
00:20:01,980 --> 00:20:02,980
All right.

430
00:20:02,980 --> 00:20:08,360
So, now that we got our plug-ins, now we're ready for the main event.

431
00:20:08,360 --> 00:20:11,800
We have to put together a command line interface to do all of this stuff.

432
00:20:11,800 --> 00:20:12,800
We can load plug-ins.

433
00:20:12,800 --> 00:20:14,440
Now we need to do things with plug-ins, right?

434
00:20:14,440 --> 00:20:15,440
All right.

435
00:20:15,440 --> 00:20:17,720
So, let's think about how the user is going to use this stuff.

436
00:20:17,720 --> 00:20:23,280
I'm going to do a dunder main.py so that I can very easily do python-m file info.

437
00:20:23,280 --> 00:20:24,720
Cool, cool?

438
00:20:24,720 --> 00:20:30,160
If anybody's not come across dunder main.py, when you run python-m and you give it the

439
00:20:30,160 --> 00:20:34,840
name of a module, so in this case, file info, it goes and finds the package file info.

440
00:20:34,840 --> 00:20:39,920
It goes and looks for a dunder main.py, and if it's there, it goes and executes that module.

441
00:20:39,920 --> 00:20:40,920
Cool?

442
00:20:40,920 --> 00:20:44,080
So, we use that to do it.

443
00:20:44,080 --> 00:20:48,280
I am going to just go ahead and create a command line processor, so this is a little simple

444
00:20:48,280 --> 00:20:49,840
function for getting a command line.

445
00:20:49,840 --> 00:20:50,840
It uses argparse.

446
00:20:50,840 --> 00:20:55,080
I think argparse is fantastic because it's in the standard library, and once you read

447
00:20:55,080 --> 00:20:59,120
through the documents and understand how to use it, it's pretty easy-peasy to use and

448
00:20:59,120 --> 00:21:00,120
very powerful.

449
00:21:00,120 --> 00:21:04,080
So, I'm going to create one with a simple, it's going to take an argument that's going

450
00:21:04,120 --> 00:21:09,200
to be one or more paths, understanding that users are fickle things and may give us, they

451
00:21:09,200 --> 00:21:13,320
may give us paths that coincide or inside each other, like they may give us a parent

452
00:21:13,320 --> 00:21:16,320
and a child path, they may give us a path to a file or a path to a folder or a path

453
00:21:16,320 --> 00:21:17,320
that doesn't exist.

454
00:21:17,320 --> 00:21:18,920
They may give us a path to nowhere.

455
00:21:18,920 --> 00:21:21,600
So, we need to be able to handle all of those scenarios.

456
00:21:21,600 --> 00:21:24,440
If we run it with dash dash help, we get this.

457
00:21:24,440 --> 00:21:27,960
This is our really simple command line interface, easy-peasy, right?

458
00:21:27,960 --> 00:21:28,960
Cool.

459
00:21:28,960 --> 00:21:31,320
Next thing we're going to do is we're going to use our find all functions to load all

460
00:21:31,320 --> 00:21:32,320
of our plugins.

461
00:21:32,440 --> 00:21:34,880
We already did all the heavy work there, so we just got to call that function.

462
00:21:34,880 --> 00:21:40,680
It'll give us a nice list of two element tuples with all of our regex patterns and all of

463
00:21:40,680 --> 00:21:41,680
our functions.

464
00:21:41,680 --> 00:21:42,680
Cool, cool?

465
00:21:42,680 --> 00:21:46,280
Next, we're going to turn paths into lists of file paths.

466
00:21:46,280 --> 00:21:49,680
Remember when I said users are evil and would like to do evil things to you?

467
00:21:49,680 --> 00:21:51,660
Let's handle all that evilness.

468
00:21:51,660 --> 00:21:54,320
When they give us all of those paths, we're going to go through each of those paths, we're

469
00:21:54,320 --> 00:21:56,920
going to go test and see if it's a file, and if it's a file, we're just going to add it

470
00:21:56,920 --> 00:21:57,920
on there.

471
00:21:57,920 --> 00:22:01,360
If it's not a file, then we're just going to assume that it's a folder and we're going

472
00:22:02,160 --> 00:22:06,280
the recursive glob to go find everything that's a file inside of there.

473
00:22:06,280 --> 00:22:07,920
If the path doesn't exist, it's fine.

474
00:22:07,920 --> 00:22:10,800
Our glob will just give us back nothing.

475
00:22:10,800 --> 00:22:16,440
This is a really simple way to get us a list of all of the files, and since users may give

476
00:22:16,440 --> 00:22:21,840
us paths that are inside of each other or things like that, I'm going to go ahead and

477
00:22:21,840 --> 00:22:26,680
just use a set to store all of those paths in so it nicely deduplicates everything for

478
00:22:26,680 --> 00:22:30,400
me, and then I'm just going to sort all of that stuff so I get a nice deterministic order

479
00:22:30,400 --> 00:22:34,640
every time.

480
00:22:34,640 --> 00:22:37,920
And then for each file, there's a simple function that's going to process that file.

481
00:22:37,920 --> 00:22:42,920
What it's going to do is for each file that it comes across, it's going to go load, it's

482
00:22:42,920 --> 00:22:46,280
going to go pull all of the plug-ins and it's going to go through each one, testing does

483
00:22:46,280 --> 00:22:50,880
this plug-in work for this file, if it does, it's going to go call it and add all of the

484
00:22:50,880 --> 00:22:56,120
things that it outputs into the output.

485
00:22:56,120 --> 00:23:00,800
And then we just do a little main block using all of those functions that we've defined,

486
00:23:00,800 --> 00:23:09,160
and now I can go here, y'all get to see how much of a spaz I am when I type, all right,

487
00:23:09,160 --> 00:23:17,720
I'm going to do Python dash M, file info dash dash help, so far so good, right?

488
00:23:17,720 --> 00:23:28,480
I created a folder with some sample files that is assuming I can find said files, oh,

489
00:23:28,480 --> 00:23:34,920
yeah, I have to remember, I'm not on Windows, and it doesn't like backslashes, but hey,

490
00:23:34,920 --> 00:23:36,360
simple case, it worked.

491
00:23:36,360 --> 00:23:41,720
Notice our text file has the number of lines and words, our CSV file has the number of

492
00:23:41,720 --> 00:23:44,200
rows and columns, cool, right?

493
00:23:44,800 --> 00:23:46,760
Does anybody want to see like behind the curtain?

494
00:23:46,760 --> 00:23:50,400
Does anybody want to see more about how the sausage gets made?

495
00:23:50,400 --> 00:23:58,560
Let's run it with dash V. Dash V gives us all of the logging output.

496
00:23:58,560 --> 00:24:00,640
So I'll start from the top.

497
00:24:00,640 --> 00:24:03,600
We're going to try to load up all of the plug-ins.

498
00:24:03,600 --> 00:24:07,800
We're going to do this, and we're going to see that we're importing file info dot plug-ins.

499
00:24:07,800 --> 00:24:10,140
We found a plug-in, so we're adding it.

500
00:24:10,140 --> 00:24:15,700
We're going to skip file info because it doesn't end with, there we go, we're going

501
00:24:15,700 --> 00:24:20,540
to import file info CSV plug-in because it does fit our name, and we're going to find

502
00:24:20,540 --> 00:24:22,620
a function that matches CSV.

503
00:24:22,620 --> 00:24:23,620
Pretty cool.

504
00:24:23,620 --> 00:24:24,620
Go through all of this stuff.

505
00:24:24,620 --> 00:24:27,020
You see all of these other ones that we're skipping?

506
00:24:27,020 --> 00:24:34,100
They don't start with, and they don't end with, sweet, see, y'all are getting it.

507
00:24:34,100 --> 00:24:38,300
That's all right, we're going to be singing around before long.

508
00:24:38,300 --> 00:24:44,500
After we've done all of our plug-in loading, now we go through and actually process all

509
00:24:44,500 --> 00:24:45,500
of our different files.

510
00:24:45,500 --> 00:24:50,180
So we loaded our three plug-in, our handler functions, and then we start processing each

511
00:24:50,180 --> 00:24:51,420
of the different files.

512
00:24:51,420 --> 00:24:54,780
You can see here where we're calling each of the different plug-ins, and you can see

513
00:24:54,780 --> 00:24:56,540
how it's working.

514
00:24:56,540 --> 00:24:57,780
Cool?

515
00:24:57,780 --> 00:25:00,500
All of this code is up in GitHub.

516
00:25:00,500 --> 00:25:04,780
I encourage you to download it, play around with it, break it, remake it into something

517
00:25:04,780 --> 00:25:07,460
else, address problems and stuff that I put in here.

518
00:25:07,460 --> 00:25:13,820
I probably put a few in not on purpose, but maybe.

519
00:25:13,820 --> 00:25:16,180
There is also an entire bonus section in here.

520
00:25:16,180 --> 00:25:20,020
I put a bunch of references to everything I went and read, and I did go and read all

521
00:25:20,020 --> 00:25:23,020
of this stuff in preparation for all of this.

522
00:25:23,020 --> 00:25:26,940
And I even put in a bonus thing for how to write events in Python, because Python doesn't

523
00:25:26,940 --> 00:25:31,340
have a native event type like C Sharp and Java and a bunch of other languages do, but

524
00:25:31,340 --> 00:25:34,140
it's really easy to make one.

525
00:25:34,140 --> 00:25:38,180
So I showed how to make one, and then I give you here some mods for some common problems

526
00:25:38,180 --> 00:25:41,500
that you might have with this really, really simple implementation.

527
00:25:41,500 --> 00:25:47,780
So feel free to take a look at those, and I'm around if you have questions.

528
00:25:47,780 --> 00:25:55,300
There we go.

529
00:25:55,300 --> 00:26:00,100
We do have questions, including, by the way, and I haven't paid close attention to this

530
00:26:00,940 --> 00:26:05,540
But this might be the most upvoted question I have seen all day.

531
00:26:05,540 --> 00:26:06,620
Maybe all weekend.

532
00:26:06,620 --> 00:26:07,620
Are you ready?

533
00:26:07,620 --> 00:26:08,660
I am in the question answering position.

534
00:26:08,660 --> 00:26:09,660
Go.

535
00:26:09,660 --> 00:26:14,020
Was that Comic Sans in your ID?

536
00:26:14,020 --> 00:26:15,340
I love this.

537
00:26:15,340 --> 00:26:23,940
So it is actually a font called Comic Sans, which is a version of Comic Sans.

538
00:26:23,940 --> 00:26:27,780
Oh, Josh.

539
00:26:27,780 --> 00:26:30,740
It would help if I could type.

540
00:26:30,740 --> 00:26:34,060
But yeah, Comic Sans.

541
00:26:34,060 --> 00:26:36,060
It is a nerd font.

542
00:26:36,060 --> 00:26:39,780
I'm happy to share my prompt configuration for Oh My Posh if anybody wants to play around

543
00:26:39,780 --> 00:26:40,780
with it.

544
00:26:40,780 --> 00:26:45,780
Be sure to link that font on Discord, because I know everyone's going to want Comic Sans

545
00:26:45,780 --> 00:26:49,140
in their VS Code.

546
00:26:49,140 --> 00:26:54,980
Having Comic Sans as your IDE font is a lot like doing technical with this accent when

547
00:26:54,980 --> 00:27:00,580
you start talking about decorators and iterators and people just deduct 50 IQ points, but it

548
00:27:00,580 --> 00:27:03,580
works against it.

549
00:27:03,580 --> 00:27:04,580
Oh my goodness.

550
00:27:04,580 --> 00:27:05,580
Okay.

551
00:27:05,580 --> 00:27:08,980
I don't know what to do with that.

552
00:27:08,980 --> 00:27:12,660
The question, and I don't remember where you were in the talk when this came in, but is

553
00:27:12,660 --> 00:27:15,260
this more or less how Flash Blueprints work?

554
00:27:15,260 --> 00:27:18,620
I've never worked with that before, so I have no idea.

555
00:27:18,620 --> 00:27:24,580
I have used Flash Blueprints before, but I don't think I ever looked at how they're implemented.

556
00:27:25,180 --> 00:27:31,940
My original idea for the talk, so this came out of I wrote a scripting framework where

557
00:27:31,940 --> 00:27:33,980
I work that has a plugin-based architecture.

558
00:27:33,980 --> 00:27:34,980
I wrote this.

559
00:27:34,980 --> 00:27:38,900
The reason why I wrote my own plugin architecture rather than using one of the existing libraries

560
00:27:38,900 --> 00:27:44,180
like Pluggy or some of the others is, number one, I wanted full control over how plugins

561
00:27:44,180 --> 00:27:48,700
and plugin loading worked, and number two, I didn't want extra third-party dependencies.

562
00:27:48,700 --> 00:27:53,260
I work in an environment that is very, very security-conscious.

563
00:27:53,260 --> 00:27:56,940
Every third-party dependency that we use is another third-party dependency I've got

564
00:27:56,940 --> 00:28:02,300
to keep up with security information about, license information about, maintainer information.

565
00:28:02,300 --> 00:28:07,900
Every time there's some pie chain attack, I've got to go check through all of my packages,

566
00:28:07,900 --> 00:28:11,700
so I wanted to not have to deal with it for this particular case.

567
00:28:11,700 --> 00:28:18,340
I might be aping what some other frameworks and stuff already have.

568
00:28:18,340 --> 00:28:21,340
I did it so that I could have my own, and that's the reason why you might want to write

569
00:28:21,340 --> 00:28:22,340
your own.

570
00:28:22,380 --> 00:28:26,940
You may not want to introduce the extra third-party dependencies and have the extra load.

571
00:28:26,940 --> 00:28:31,620
Related to that, are there any resources or best practices you recommend to help limit

572
00:28:31,620 --> 00:28:35,060
plugin functionality for user safety?

573
00:28:35,060 --> 00:28:36,060
Ooh.

574
00:28:36,060 --> 00:28:44,940
I mean, since you control the system here, you can go as wild with that as you want.

575
00:28:44,940 --> 00:28:49,100
There's a lot of things that I could have done and things that I have done in other

576
00:28:49,100 --> 00:28:50,100
systems.

577
00:28:50,220 --> 00:28:57,660
Plugin classes, since I can use the class hierarchy and all that stuff to find plugins,

578
00:28:57,660 --> 00:29:01,380
but it's also nice because I can also use it to limit what plugins do.

579
00:29:01,380 --> 00:29:05,220
If I define what methods are going to be called on events, then only those methods are going

580
00:29:05,220 --> 00:29:09,620
to be called on events, and I define the signature that those expect.

581
00:29:09,620 --> 00:29:14,180
I define all of that by my main class, and everybody that subclasses it has to follow

582
00:29:14,180 --> 00:29:16,140
that if they're following good, solid principles.

583
00:29:16,140 --> 00:29:18,780
If they're not, I make no guarantees that their plugin's going to work, and that's when

584
00:29:18,820 --> 00:29:22,340
I log stuff, debug, and move on.

585
00:29:22,340 --> 00:29:23,460
Last one.

586
00:29:23,460 --> 00:29:27,100
Can you put flags for your plugins in the CLI with this architecture?

587
00:29:27,100 --> 00:29:32,660
I think what they're asking is, how would you tweak that to support parameters coming

588
00:29:32,660 --> 00:29:35,340
in from the CLI for the plugins to access?

589
00:29:35,340 --> 00:29:39,780
I have done similar things before, like in our scripting framework.

590
00:29:39,780 --> 00:29:42,060
I can control with which paths.

591
00:29:42,060 --> 00:29:46,260
By default, I'm looking on Python path here, but I could just as easily add in command

592
00:29:46,380 --> 00:29:50,140
arguments to say, these are the paths I want you to go search for plugins, and thereby

593
00:29:50,140 --> 00:29:52,180
control where it's loading plugins from.

594
00:29:52,180 --> 00:29:57,300
The other thing that I could do is add in something to say maybe dash dash exclude and

595
00:29:57,300 --> 00:30:01,300
give a regex pattern, and anything that, any module name that matches this regex pattern

596
00:30:01,300 --> 00:30:04,740
will just get skipped and moved on, and we don't load plugins from that.

597
00:30:04,740 --> 00:30:09,660
Or a regex pattern for these plugin names, if you see them, just don't load them.

598
00:30:09,660 --> 00:30:11,300
Just ignore them.

599
00:30:11,300 --> 00:30:15,500
It's not hard to do, it's just more that has to be wired in, so more information that has

600
00:30:15,540 --> 00:30:16,540
to be passed.

601
00:30:16,540 --> 00:30:20,900
Again, if you live in mine and Pandy's world, unit test the snot out of that stuff to make

602
00:30:20,900 --> 00:30:23,260
sure that it works correctly.

603
00:30:23,260 --> 00:30:26,800
You'll actually probably want that type of functionality for unit testing to be able

604
00:30:26,800 --> 00:30:29,100
to unit test your plugin specifically.

605
00:30:29,100 --> 00:30:30,100
Awesome.

606
00:30:30,100 --> 00:30:31,100
That helped.

607
00:30:31,100 --> 00:30:32,100
All right.

608
00:30:32,100 --> 00:30:33,100
Sweet.

609
00:30:33,100 --> 00:30:34,100
I need a few things from you guys.

610
00:30:34,100 --> 00:30:37,420
First and foremost, help me thank Josh for his presentation on plugins.

