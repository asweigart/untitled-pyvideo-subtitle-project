1
00:00:00,000 --> 00:00:03,000
Soundarya, are you ready to take it away?

2
00:00:03,000 --> 00:00:04,000
Yes, I am.

3
00:00:04,000 --> 00:00:05,000
Rock on.

4
00:00:05,000 --> 00:00:06,000
Let's go.

5
00:00:06,000 --> 00:00:07,000
Thank you.

6
00:00:07,000 --> 00:00:08,000
Hello, everyone.

7
00:00:08,000 --> 00:00:09,340
I'm Soundarya Khanapur.

8
00:00:09,340 --> 00:00:16,640
I'm currently pursuing a master's in computer science at NC State, and thank you.

9
00:00:16,640 --> 00:00:22,640
And I previously worked as a software engineer at Mercedes-Benz Research and Development.

10
00:00:22,640 --> 00:00:28,320
And today I'm going to talk with my friend Shivani on PySecOps.

11
00:00:28,320 --> 00:00:37,320
So this is intentionally prepared for those who are beginners with Python or web applications

12
00:00:37,320 --> 00:00:40,680
or you are just getting started with security.

13
00:00:40,680 --> 00:00:48,400
And those who are experts, well, I mean, it doesn't hurt to have a quick recap, right?

14
00:00:48,400 --> 00:00:49,760
Okay.

15
00:00:49,760 --> 00:00:52,920
So yeah, let's get started.

16
00:00:52,920 --> 00:00:57,260
So we'll go through a couple of contents.

17
00:00:57,260 --> 00:01:00,400
So yes, coming to random values.

18
00:01:00,400 --> 00:01:05,280
So well, it all depends on your seed.

19
00:01:05,280 --> 00:01:11,820
So like when you use pseudo-random number generators, which can lead to predictable

20
00:01:11,820 --> 00:01:18,140
numbers if the generator is known and the seeds can be guessed easily.

21
00:01:18,140 --> 00:01:27,440
So a good starting point would be to use a seed which is like of 256-bit.

22
00:01:27,440 --> 00:01:36,120
And coming to SQL injection, well, this is when you mess up with SQL, where you never

23
00:01:36,120 --> 00:01:38,760
know what the user enters, right?

24
00:01:38,760 --> 00:01:45,660
So a best way to prevent this is to have input validation.

25
00:01:45,660 --> 00:01:53,220
And another approach would be to use prepared statements, which just abstracts the SQL syntax

26
00:01:53,220 --> 00:01:59,400
from the input parameters.

27
00:01:59,400 --> 00:02:05,760
Next coming to XSE processing, well, this arises from XML parser.

28
00:02:05,760 --> 00:02:13,300
So usually web applications which use XML libraries are particularly vulnerable to this

29
00:02:13,360 --> 00:02:15,780
kind of attack.

30
00:02:15,780 --> 00:02:23,100
And based on the parser you use, you are supposed to disable the DIL field.

31
00:02:23,100 --> 00:02:31,540
And one way to do this with Django is to just let the parser entity to false.

32
00:02:31,540 --> 00:02:36,220
Well, next coming to command injection.

33
00:02:36,220 --> 00:02:43,480
This again occurs when untrusted input is passed to the system commands.

34
00:02:43,480 --> 00:02:55,700
So as you can see, this can be easily prevented by just user input validation.

35
00:02:55,700 --> 00:02:58,680
So next coming to session fixation.

36
00:02:58,680 --> 00:03:02,980
This lets the attackers to use the user session.

37
00:03:03,740 --> 00:03:12,500
Well, as you can see, this happens when you do not flush the previous session and just

38
00:03:12,500 --> 00:03:15,180
like assign the user with the new session.

39
00:03:15,180 --> 00:03:21,060
So whenever you are dealing with this, just flush the session and generate a new token.

40
00:03:21,060 --> 00:03:26,820
And when you generate a token, then again, how random can your token be?

41
00:03:26,820 --> 00:03:33,780
So one way to do this to use Python's get random string method, which lets you generate

42
00:03:33,780 --> 00:03:39,700
a good enough alphanumerical number.

43
00:03:39,700 --> 00:03:42,340
Next coming to reflected accesses.

44
00:03:42,340 --> 00:03:49,500
This lets the attackers to execute the malicious script in user's browser.

45
00:03:49,500 --> 00:03:57,660
So here, this can be easily prevented by just removing the safe keyword.

46
00:03:57,660 --> 00:04:02,980
And the same goes with the stored accesses.

47
00:04:02,980 --> 00:04:07,000
And next coming to DOM accesses.

48
00:04:07,000 --> 00:04:14,980
So here, this usually happens when you write inline script to get the user input.

49
00:04:15,460 --> 00:04:22,340
This again can be prevented by adding input validation.

50
00:04:22,340 --> 00:04:25,780
And next coming to directory traversal.

51
00:04:25,780 --> 00:04:37,180
This can be exploited when the attacker kind of uses, kind of is used to have access to

52
00:04:37,180 --> 00:04:40,860
the unintended directory structure.

53
00:04:40,860 --> 00:04:48,860
So here, when you are using, you can just restrict the path which you want the users

54
00:04:48,860 --> 00:04:58,840
to have permission to by making it mandatory to start from a starting point.

55
00:04:58,840 --> 00:05:09,060
So the next part will be covered by Shivani.

56
00:05:09,260 --> 00:05:10,260
So hello, everyone.

57
00:05:10,260 --> 00:05:13,140
I'm audible.

58
00:05:13,140 --> 00:05:15,540
So this is Shivani Shetty here.

59
00:05:15,540 --> 00:05:20,460
And I used to work as a full stack developer back in India.

60
00:05:20,460 --> 00:05:25,420
And I used to work as a, you know, I used to work mainly with the young products that

61
00:05:25,420 --> 00:05:27,540
is KFC and Pizza Hut.

62
00:05:27,540 --> 00:05:33,220
And some of the issues that I'll be talking about, I have seen them, hackers doing it

63
00:05:33,220 --> 00:05:34,300
on the back end.

64
00:05:34,300 --> 00:05:38,860
So some of them, I'll be talking about them, what actually happens over there.

65
00:05:38,860 --> 00:05:42,300
Currently, I work as a cyber security consultant.

66
00:05:42,300 --> 00:05:48,980
And so, you know, I come with a blend of software engineering as well as cyber security.

67
00:05:48,980 --> 00:05:54,180
So the first thing that I'll be talking about will be, you know, leftover debug code.

68
00:05:54,180 --> 00:05:58,540
As developers, when something breaks, the first thing we do is, you know, we start to

69
00:05:58,540 --> 00:05:59,860
debug the code.

70
00:05:59,860 --> 00:06:07,700
And sometimes we don't uncomment, you know, since we put the comments on our code and

71
00:06:07,780 --> 00:06:10,300
we don't actually remove those comments.

72
00:06:10,300 --> 00:06:16,180
And if the company is like new, and if the only person who is developing the whole code,

73
00:06:16,180 --> 00:06:21,020
there won't be a CI CD pipeline to check all the things that have been happening.

74
00:06:21,020 --> 00:06:27,100
So in order to avoid that, you know, I can give an example of, you know, here, if you

75
00:06:27,100 --> 00:06:34,220
can see, there is a commented code which has debug is equal to one.

76
00:06:34,220 --> 00:06:39,900
What that is doing is, it was given to the QA testing team so that, you know, the testing

77
00:06:39,900 --> 00:06:41,660
process is fastened up.

78
00:06:41,660 --> 00:06:46,700
And, you know, they don't have to add username and password.

79
00:06:46,700 --> 00:06:48,500
They can directly log in.

80
00:06:48,500 --> 00:06:56,620
But as a developer, you know, the developer forgot to uncomment that before putting it

81
00:06:56,620 --> 00:06:58,100
into production.

82
00:06:58,100 --> 00:07:05,020
So when a hacker visits this website, and when they go through the document, they notice

83
00:07:05,020 --> 00:07:11,860
this debug code, which is the flag, if you enable the flag, then something will happen.

84
00:07:11,860 --> 00:07:19,220
So in that case, you know, when we do that, we can directly get into the admin panel,

85
00:07:19,220 --> 00:07:26,260
and we can play with different kind of, you know, we can use the data of users and also

86
00:07:26,260 --> 00:07:27,540
misuse them.

87
00:07:27,540 --> 00:07:37,260
So making sure that, you know, we always have code that is very, like, you know, safe on

88
00:07:37,260 --> 00:07:42,140
the production side is something that we should always look into.

89
00:07:42,140 --> 00:07:47,220
The next thing that, you know, one of the things that I noticed people doing when I

90
00:07:47,220 --> 00:07:57,020
was working at KFC was people used to add, like, you know, let's say I can give an example.

91
00:07:57,020 --> 00:08:04,540
Let's say we have redirections, log in redirections, and what people used to do is they used to

92
00:08:04,540 --> 00:08:09,900
just enter email and password on the URL to check what happens, right?

93
00:08:09,900 --> 00:08:16,820
So this can be avoided if you use post methods instead of using get methods.

94
00:08:16,820 --> 00:08:24,740
So what is happening here is if you see what passing authentication credential URL exposes

95
00:08:24,740 --> 00:08:32,100
a lot of various kind of risk, and if we are having get requests, get request response

96
00:08:32,100 --> 00:08:40,820
added to our code, it will display, it will display on the logs, it will display the username

97
00:08:40,820 --> 00:08:45,860
password of the user that they have put in the web application.

98
00:08:45,860 --> 00:08:53,540
So it is very important to, you know, use post requests rather than get requests.

99
00:08:53,580 --> 00:09:00,700
Another important aspect is, you know, a lot of people save their sessions, let's say a

100
00:09:00,700 --> 00:09:05,820
lot of them store their username passwords on Google, you know, so that you don't have

101
00:09:05,820 --> 00:09:07,380
to log in all the time.

102
00:09:07,380 --> 00:09:15,420
There are chances that, you know, the sessions can be hacked, and a lot of your information

103
00:09:15,420 --> 00:09:24,620
can be, you know, can be retrieved from just getting through your session.

104
00:09:24,620 --> 00:09:31,860
So what actually happens here is if you see the URL here, there is something called as

105
00:09:31,860 --> 00:09:40,180
a demo website, which we have just created, and on the function that we are running, we

106
00:09:40,180 --> 00:09:46,940
are also using session ID, which when we use it on, let's say once we log in into a

107
00:09:46,940 --> 00:09:53,220
particular website, it will generate a particular session ID for you, for a particular user.

108
00:09:53,220 --> 00:09:59,460
So when that happens, and if someone, if you're using get again, yeah, if you're using get

109
00:09:59,460 --> 00:10:06,900
again, what that would do is at the back end on the log, all these get commands are shown,

110
00:10:07,300 --> 00:10:13,380
if someone gets access to the log, then they can access your session, and let's say you're

111
00:10:13,380 --> 00:10:21,060
operating on a banking website, and earlier you'll be logged in, if they directly put

112
00:10:21,060 --> 00:10:27,940
this link onto the URL, if the banking application doesn't have a security in place, like good

113
00:10:27,940 --> 00:10:31,980
security in place, what that would do is it will directly log you in rather than asking

114
00:10:31,980 --> 00:10:33,780
them to log back again.

115
00:10:33,780 --> 00:10:39,180
So that way, you can, you know, hackers can steal money, and this is something that we

116
00:10:39,180 --> 00:10:44,620
need to make sure we rectify it when using post again.

117
00:10:44,620 --> 00:10:51,980
Post response is always helpful rather than using get.

118
00:10:51,980 --> 00:10:59,740
Session user enumeration is when people want to find out things about yourself.

119
00:10:59,740 --> 00:11:07,100
Let's say I'm working at Google right now, and when we do a simple, you know, let's say

120
00:11:07,100 --> 00:11:10,820
LinkedIn search, how many Shivani's would you find?

121
00:11:10,820 --> 00:11:14,900
Let's say you find out five Shivani's, and my surname is Shetty.

122
00:11:14,900 --> 00:11:20,980
So you know, if I want to, someone wants to hack my email ID, what they would do is they

123
00:11:20,980 --> 00:11:29,700
would just go with Shivani.Shetty or at Google.com, and if things at the back end are not configured

124
00:11:29,740 --> 00:11:36,300
well, what that would do is, you know, it would tell us that this user ID exists, and

125
00:11:36,300 --> 00:11:41,660
that would give a hint to the hacker that, you know, okay, we already have a user ID

126
00:11:41,660 --> 00:11:46,100
with this name, let's try to crack it using brute force or any other method.

127
00:11:46,100 --> 00:11:53,740
So it is very important not to, you know, have a specific username, specific error message

128
00:11:53,740 --> 00:11:55,180
if you're trying to log in.

129
00:11:55,380 --> 00:12:00,820
And we also have, you know, a factor, we also have a feature of forget passwords on many

130
00:12:00,820 --> 00:12:02,260
of the websites.

131
00:12:02,260 --> 00:12:08,540
So if we don't have an email on place, and if the person doesn't know an email of anyone,

132
00:12:08,540 --> 00:12:15,940
and they just tried Shivani.Shetty at Google.com, they will know that, okay, this user is there

133
00:12:15,940 --> 00:12:17,100
in the database now.

134
00:12:17,100 --> 00:12:23,180
Instead of displaying, we have already sent the forget password link to this user, we

135
00:12:23,220 --> 00:12:27,900
can generalize this link to something else, the error message can be generalized, and

136
00:12:27,900 --> 00:12:31,180
a lot of things can be saved by that way.

137
00:12:31,180 --> 00:12:39,260
And if you, you know, a lot of hacking takes place through this method, and a lot of our,

138
00:12:39,260 --> 00:12:45,500
you know, information have been already on the dark web, and they are being sold.

139
00:12:45,500 --> 00:12:52,060
So again, you know, here we are just putting up a message and how it can be implemented.

140
00:12:52,060 --> 00:13:03,060
Vertical privileges escalation is when, let's say, I'm logging in as a user, but, you know,

141
00:13:03,060 --> 00:13:10,300
I want to see what would happen if you can see the website URL on the top.

142
00:13:10,300 --> 00:13:18,460
Now that I'm logged in, what if I replace that user with the admin?

143
00:13:18,460 --> 00:13:25,740
If proper redirecting thing is not enabled, what would happen is it will directly put

144
00:13:25,740 --> 00:13:31,580
me on the admin panel, and with that, I can change and make changes to anything that I

145
00:13:31,580 --> 00:13:32,580
want.

146
00:13:32,580 --> 00:13:33,580
Let's say I want to increase my salary.

147
00:13:33,580 --> 00:13:36,620
I can do that, because I have the admin privileges now.

148
00:13:36,620 --> 00:13:41,540
So all these little, little things play a very important factor when it comes to, you

149
00:13:41,540 --> 00:13:47,860
know, while you're developing a website or, you know, applications.

150
00:13:47,860 --> 00:13:53,260
And if you want to, you know, make sure that all of this is handled very well, make sure

151
00:13:53,260 --> 00:14:00,220
there are steps that are already in place, like, you know, if this user is a super user,

152
00:14:00,220 --> 00:14:02,380
do they have the admin access?

153
00:14:03,380 --> 00:14:10,020
When you refresh it, it should not redirect you to something else.

154
00:14:10,020 --> 00:14:14,340
Click-jacking is something that is very commonly used when you visit a website and you'll see

155
00:14:14,340 --> 00:14:19,420
a lot of ads popping up, and, you know, you are tempted to click on the ad because it

156
00:14:19,420 --> 00:14:27,660
shows you some kind of, let's say, some kind of deals, for example, you know, you have

157
00:14:27,660 --> 00:14:31,740
some graphic card deals are going on and you're getting graphic cards for, like, 200 bucks

158
00:14:31,740 --> 00:14:38,020
or some deals on clothes, Macy's is giving 60% off, and you're tempted to click on the

159
00:14:38,020 --> 00:14:39,020
link.

160
00:14:39,020 --> 00:14:42,220
But you never know what would happen when you click on the link, right?

161
00:14:42,220 --> 00:14:48,140
So most of the time what happens is when you click on the link, it redirects you to something

162
00:14:48,140 --> 00:14:52,900
that is created, a website that is created by the hacker.

163
00:14:52,900 --> 00:14:59,900
That will be a mimic of what Macy's is or, you know, any other website is.

164
00:14:59,900 --> 00:15:05,060
So what that is, why that is done is they want to get your username and password, and

165
00:15:05,060 --> 00:15:09,220
through that, you know, a lot of information can be retrieved.

166
00:15:09,220 --> 00:15:16,300
And on records, you know, until last month, I was going through a survey and found out

167
00:15:16,300 --> 00:15:22,620
that around 80 to 90% of the cyber attacks that take place around the world are because

168
00:15:22,620 --> 00:15:23,860
of phishing.

169
00:15:23,860 --> 00:15:27,680
Phishing is nothing but when you click on the link and, you know, this clickjacking

170
00:15:27,680 --> 00:15:33,800
is embedded as a phishing email, phishing, and when you click on that link, it will try

171
00:15:33,800 --> 00:15:36,300
to retrieve all the information from you.

172
00:15:36,300 --> 00:15:41,540
So we should make sure that, you know, we have everything in place, and here we are

173
00:15:41,540 --> 00:15:46,740
explaining this with an example of another way of clickjacking would be, let's say we

174
00:15:46,740 --> 00:15:51,100
are working in a trading industry, and there are two uses.

175
00:15:51,100 --> 00:15:58,420
One of the best examples that I can always think of is Alice and Bob.

176
00:15:58,420 --> 00:16:06,940
So Alice has some assets in the trading assets, and she wants to trade in a few things, but

177
00:16:06,940 --> 00:16:14,380
Bob wants to make sure that he gets all the trade and, you know, he can make the most

178
00:16:14,380 --> 00:16:15,380
out of it.

179
00:16:15,380 --> 00:16:22,700
So what Bob does is Bob sends an email to Alice saying that, you know, if you can go

180
00:16:22,700 --> 00:16:30,700
through this website, and that website will have this iframe ID, which will be hidden,

181
00:16:30,700 --> 00:16:34,220
you know, because if you can see, the opacity is zero over here.

182
00:16:34,220 --> 00:16:42,180
So what that means is the whole frame won't be visible to the user who is using the application.

183
00:16:42,180 --> 00:16:48,420
It will be in the background, and it will be just hidden, and the things that, you know,

184
00:16:48,420 --> 00:16:57,100
Alice don't want to do, she'll be doing it unknowingly, and, you know, by that, Bob will

185
00:16:57,100 --> 00:17:02,940
make use of it and have the trade in information.

186
00:17:02,940 --> 00:17:09,020
Another important thing is, you know, insecure URL, there is one thing whenever you are configuring

187
00:17:09,020 --> 00:17:17,300
your, you know, buttons with any of the applications, make sure they are redirecting properly,

188
00:17:17,300 --> 00:17:24,900
and if they're not going to any other links, other than that is not intended to.

189
00:17:24,900 --> 00:17:30,060
And make sure you always use HTTP, yes, to be more secure and protected, rather than

190
00:17:30,060 --> 00:17:31,060
using HTTP.

191
00:17:31,060 --> 00:17:37,640
All the old devices, most of them have HTTP, and it is very insecure right now.

192
00:17:37,680 --> 00:17:43,760
So making sure that, you know, all the things are updated, and that is why, you know, having

193
00:17:43,760 --> 00:17:50,580
things updated, you know, we get updates from, let's say, on our iPhone.

194
00:17:50,580 --> 00:17:56,200
Making sure we have it updated is very important because they release a lot of security, you

195
00:17:56,200 --> 00:18:01,680
know, flaws that have been released, and all those fixes have been already been made, and

196
00:18:01,680 --> 00:18:04,080
that is the reason you get a lot of updates.

197
00:18:04,080 --> 00:18:11,640
So making sure that, you know, whenever you are configuring, you know, a button, and if

198
00:18:11,640 --> 00:18:16,480
that button is taking you to some other URL, making sure that it is not taking you to an

199
00:18:16,480 --> 00:18:21,200
URL that is not intended for you, we need to make sure that all of them are correct

200
00:18:21,200 --> 00:18:27,000
and we can have a code to check if something is going wrong somewhere and the hacker has,

201
00:18:27,000 --> 00:18:33,160
you know, changed something, there will be a check in the function that is being made.

202
00:18:33,160 --> 00:18:39,520
Coming to the last topic that I will be discussing would be, you know, insecure TLS validation.

203
00:18:39,520 --> 00:18:45,440
It is very important to have certifications with whatever applications you are using.

204
00:18:45,440 --> 00:18:52,080
Most people, you know, ignore it, and now Python is coming with, you know, it has its

205
00:18:52,080 --> 00:19:01,280
own build TLS validation certifications, but if it is available in open, you know, open

206
00:19:01,280 --> 00:19:04,360
sourced, then even hacker knows about it.

207
00:19:04,360 --> 00:19:09,360
So making sure that, you know, you invest something in certification is also important.

208
00:19:09,360 --> 00:19:17,000
So rather than using a free certification that is available on with the Python package,

209
00:19:17,000 --> 00:19:26,320
it's better to use a certificate that, you know, is valid, and if the certification expires,

210
00:19:26,320 --> 00:19:30,560
making sure that, you know, the certifications are up to date is very important.

211
00:19:30,560 --> 00:19:36,000
So if you can see on the first picture on the top, it says, you know, the certification

212
00:19:36,000 --> 00:19:42,880
is not valid anymore, and making sure that we have a valid certification is very important.

213
00:19:42,880 --> 00:19:49,600
And generally the code that is associated with certifications is given below, and if

214
00:19:49,600 --> 00:19:56,680
you can see the import request on the second line, that is verify is equal to false.

215
00:19:57,360 --> 00:20:04,280
On that particular website, I won't have any certification requests, and, you know, that

216
00:20:04,280 --> 00:20:06,440
is a major security flaw.

217
00:20:06,440 --> 00:20:14,360
So I would like to end by saying that, you know, as a developer, always make sure whenever

218
00:20:14,360 --> 00:20:20,240
developing something, you also test it out yourself before giving it to the testing team.

219
00:20:20,240 --> 00:20:23,240
So yeah.

220
00:20:23,240 --> 00:20:24,240
Thank you.

221
00:20:24,240 --> 00:20:25,240
Thank you.

222
00:20:26,240 --> 00:20:27,240
Excellent.

223
00:20:27,240 --> 00:20:30,240
Well, here, I'll get you both back up here.

224
00:20:30,240 --> 00:20:34,200
We've got a number of questions.

225
00:20:34,200 --> 00:20:37,840
Got some great questions up here, so I'll get both of you back up on stage, and I'll

226
00:20:37,840 --> 00:20:39,440
let you all decide who takes what.

227
00:20:39,440 --> 00:20:41,400
There's only one question that was directed at a person.

228
00:20:41,400 --> 00:20:46,920
So do you recommend any code analysis tools to determine if these exist in code?

229
00:20:46,920 --> 00:20:49,680
So some of the vulnerabilities that you've talked about here, are there any particular

230
00:20:49,680 --> 00:20:51,560
analysis tools that you recommend?

231
00:20:51,920 --> 00:20:52,920
Yeah.

232
00:20:52,920 --> 00:20:56,200
So there's a website called OWAPS, top 10.

233
00:20:56,200 --> 00:21:02,840
You can go there, and when you are developing something, you can see the top 10 vulnerabilities

234
00:21:02,840 --> 00:21:09,160
that are available, and there are software like SNOT that can be used to analyze things.

235
00:21:09,160 --> 00:21:10,960
Excellent.

236
00:21:10,960 --> 00:21:16,360
And to add that, you can always make sure, like, all your employees know how, like, know

237
00:21:16,360 --> 00:21:23,920
the security measures with respect to web applications, like, just how you can prevent

238
00:21:23,920 --> 00:21:30,720
them, like, basic, like, input validation, or, like, using, if, just in case, if Python,

239
00:21:30,720 --> 00:21:37,320
with Python, if you're using external libraries, then Python is not responsible for something

240
00:21:37,320 --> 00:21:39,320
that external library does.

241
00:21:39,320 --> 00:21:44,880
So make sure the external libraries you do, and what all external libraries you install,

242
00:21:44,880 --> 00:21:48,280
make sure, like, those don't cause issues.

243
00:21:48,280 --> 00:21:49,280
Okay.

244
00:21:49,280 --> 00:21:50,280
Excellent.

245
00:21:50,280 --> 00:21:52,960
This was directed at you, Shivani.

246
00:21:52,960 --> 00:21:57,360
What's your opinion on using password tools like OnePassword?

247
00:21:57,360 --> 00:22:02,640
OnePassword has reached recently, so, you know, nothing is safe.

248
00:22:02,640 --> 00:22:09,880
I would say making sure that you remember things is the best way forward, I feel, because

249
00:22:09,880 --> 00:22:14,800
you can't trust any software, there will be data breach happening one or the other way.

250
00:22:15,720 --> 00:22:20,920
I've always been a big fan of saying, you know, all security is a compromise on the

251
00:22:20,920 --> 00:22:22,320
user experience.

252
00:22:22,320 --> 00:22:27,120
The easier something is to use, the more insecure it tends to be, the more secure something

253
00:22:27,120 --> 00:22:29,360
is, the harder it is to use.

254
00:22:29,360 --> 00:22:33,440
The shorthand is you can secure a house by filling it floor to ceiling with concrete.

255
00:22:33,440 --> 00:22:37,000
It won't be very useful, but everything in there will be really safe.

256
00:22:37,000 --> 00:22:41,560
But the corollary that is, anybody sufficiently motivated will get a jackhammer and get at

257
00:22:41,560 --> 00:22:44,600
that stuff.

258
00:22:44,600 --> 00:22:49,400
Are there any categories of security vulnerabilities that Python is particularly susceptible to?

259
00:22:49,400 --> 00:22:56,600
Like, for instance, C and C++ are kind of prone to risks for, like, memory leaks.

260
00:22:56,600 --> 00:23:02,240
So when you're using Python with external libraries like XML and that is written in

261
00:23:02,240 --> 00:23:12,080
C, then the strings you pass in, as C won't do the reallocating of the memory, so that

262
00:23:12,080 --> 00:23:14,080
would lead to a vulnerability.

263
00:23:14,720 --> 00:23:22,720
Are there any other particular types of vulnerabilities you think Python is particularly risky to?

264
00:23:22,720 --> 00:23:27,920
I would say, you know, there are vulnerabilities, you know, there is one famous vulnerability

265
00:23:27,920 --> 00:23:38,840
called log force G, in which the Python, you know, again, third-party imports that we use,

266
00:23:38,840 --> 00:23:43,400
that has to be secure enough, and if that is secure enough, then, yeah, we are good

267
00:23:43,480 --> 00:23:44,480
to go.

268
00:23:44,480 --> 00:23:45,480
Agreed.

269
00:23:45,480 --> 00:23:53,240
On third-party dependencies, by the way, safety has been a good library for checking for vulnerabilities.

270
00:23:53,240 --> 00:23:57,280
Have you submitted this talk to DjangoCon US, which will be in Durham, North Carolina

271
00:23:57,280 --> 00:24:00,560
from September 22nd to the 27th?

272
00:24:00,560 --> 00:24:01,560
No.

273
00:24:01,560 --> 00:24:05,320
I think somebody thinks you should.

274
00:24:05,320 --> 00:24:07,760
How does it, oh, go ahead.

275
00:24:07,760 --> 00:24:10,400
Thank you for the information.

276
00:24:10,400 --> 00:24:14,560
How does an attacker access get request URLs?

277
00:24:14,560 --> 00:24:21,720
Yeah, so, generally, what happens is, it happens at the back end.

278
00:24:21,720 --> 00:24:27,240
If you go to the log engine and check out what are the logs that you're getting, you'll

279
00:24:27,240 --> 00:24:32,320
have get requests, and which will expose your username and password if you're using get

280
00:24:32,320 --> 00:24:33,320
requests.

281
00:24:33,320 --> 00:24:34,320
Okay.

282
00:24:34,320 --> 00:24:38,720
I'll do one more question, and I'm going to skip down to the bottom one here.

283
00:24:38,720 --> 00:24:42,800
How can developers mitigate click-jacking in their website?

284
00:24:42,800 --> 00:24:44,800
You talked about that as a vulnerability.

285
00:24:44,800 --> 00:24:50,440
How can developers defend against that?

286
00:24:50,440 --> 00:24:55,760
So like click-jacking that you talked about, how will developers defend against that?

287
00:24:55,760 --> 00:25:06,760
So with click-jacking, we can disable iframe, which will, you know, which won't allow iframe

288
00:25:06,760 --> 00:25:10,680
to run on the background, or, you know, so we can deny that.

289
00:25:10,680 --> 00:25:13,400
So there are ways you can prevent all of them.

290
00:25:13,400 --> 00:25:19,280
You just need to, you know, do a research about it, and you'll be at what you want

291
00:25:19,280 --> 00:25:20,280
to achieve.

292
00:25:20,280 --> 00:25:21,280
Excellent.

293
00:25:21,280 --> 00:25:22,280
Okay.

294
00:25:22,280 --> 00:25:23,480
Well, another round of applause.

