1
00:00:00,000 --> 00:00:20,000
Okay, so as introduced, I am Helen Crawford, I work and work as a technical trainer.

2
00:00:20,000 --> 00:00:25,000
So I did the work of three and a half years in alcohol, and before that I made a few years

3
00:00:25,000 --> 00:00:32,000
of research, and you see a great university in Florida. No, not that.

4
00:00:32,000 --> 00:00:38,000
And before that, I have always had a teaching burden. Always.

5
00:00:38,000 --> 00:00:43,000
And when I left academia, I had one requirement for a job.

6
00:00:43,000 --> 00:00:46,000
So at the beginning, what was that?

7
00:00:46,000 --> 00:00:52,000
So, it's a little bit about me, and today I'm going to talk to you about the longest title

8
00:00:52,000 --> 00:00:56,000
in the history of high-techs, it's being good.

9
00:00:56,000 --> 00:01:00,000
Well, we're going to talk about what experienced developers might have learned in Python.

10
00:01:00,000 --> 00:01:02,000
And you might be saying to me, yeah, but you know what?

11
00:01:02,000 --> 00:01:06,000
Pythons is great for high-techs.

12
00:01:06,000 --> 00:01:10,000
Okay, so in addition to being one of the trade-offs in America, I have been using

13
00:01:10,000 --> 00:01:14,000
Python since 2007.

14
00:01:14,000 --> 00:01:20,000
I am an example person for my whole talk, because I have used Python

15
00:01:20,000 --> 00:01:27,000
at such a shallow level, up until about three years ago.

16
00:01:27,000 --> 00:01:34,000
I have been using Python for 14 years, and I thought I was great at it.

17
00:01:34,000 --> 00:01:38,000
And I didn't know what a decorator was, and I had never heard of list comprehensions,

18
00:01:38,000 --> 00:01:41,000
and dictionaries were mystifying.

19
00:01:41,000 --> 00:01:47,000
Okay, so I was using it at such a shallow level that I thought I was really good at it.

20
00:01:47,000 --> 00:01:51,000
Okay, so as we move through this presentation, think about that.

21
00:01:51,000 --> 00:01:56,000
Now, what drives me, what makes me do my job, is that aha moment when somebody says,

22
00:01:56,000 --> 00:01:59,000
I get it, I understand.

23
00:01:59,000 --> 00:02:04,000
Okay, I don't care how many bugs you all fix in your code, it will never, ever,

24
00:02:04,000 --> 00:02:08,000
ever match that high I get when somebody understands something.

25
00:02:08,000 --> 00:02:13,000
So I hope that you all get those aha moments today.

26
00:02:13,000 --> 00:02:17,000
So what we're going to talk about, I'm going to give you a little bit of the

27
00:02:17,000 --> 00:02:21,000
true science behind learning, just a little bit.

28
00:02:21,000 --> 00:02:24,000
And if you think you're going to see Boon's taxonomy, you won't.

29
00:02:24,000 --> 00:02:26,000
Okay.

30
00:02:26,000 --> 00:02:29,000
We're going to talk about what's challenging about learning Python,

31
00:02:29,000 --> 00:02:34,000
especially given that we're all taught that it's so super easy to learn.

32
00:02:34,000 --> 00:02:37,000
And then we're going to talk a little bit about what we can do about it,

33
00:02:37,000 --> 00:02:41,000
what we as a community can do about it.

34
00:02:41,000 --> 00:02:43,000
You know what this talk isn't?

35
00:02:43,000 --> 00:02:46,000
I am not going to teach you Python today.

36
00:02:46,000 --> 00:02:47,000
Okay?

37
00:02:47,000 --> 00:02:49,000
I am not.

38
00:02:49,000 --> 00:02:51,000
I'd love to, but I'm not.

39
00:02:51,000 --> 00:02:52,000
Okay?

40
00:02:52,000 --> 00:02:57,000
We're also not going to have a language wars to disparage other languages

41
00:02:57,000 --> 00:03:01,000
or to glorify Python, because languages, they're tools in a toolkit.

42
00:03:01,000 --> 00:03:06,000
I happen to love Python, but it doesn't work for everything I want it to work for.

43
00:03:06,000 --> 00:03:07,000
Okay?

44
00:03:07,000 --> 00:03:10,000
But we're also not going to dive into the problems with Python as a language.

45
00:03:10,000 --> 00:03:12,000
That's just not what this talk is about.

46
00:03:12,000 --> 00:03:17,000
Now, having said that, is anybody here a C++ developer?

47
00:03:22,000 --> 00:03:26,000
I'll apologize to each and every one of you at the beginning of this presentation.

48
00:03:26,000 --> 00:03:31,000
And the reason is because I'm going to do a lot of, okay, in C++ this.

49
00:03:31,000 --> 00:03:36,000
And the reason that I do this, although I secretly do,

50
00:03:36,000 --> 00:03:41,000
and it's because in my job I see a lot of people who come in with other languages,

51
00:03:41,000 --> 00:03:43,000
and C++ is a big one.

52
00:03:43,000 --> 00:03:50,000
And they're being told, partially because it's what I teach in training,

53
00:03:50,000 --> 00:03:54,000
but also because it's one of our major languages at Bloomberg.

54
00:03:54,000 --> 00:03:59,000
And sometimes they come in and they'll sit down and they give me the ideas for this talk.

55
00:03:59,000 --> 00:04:02,000
So I'm not trying to be mean to C++ developers.

56
00:04:02,000 --> 00:04:05,000
You can insert any language you hate when I'm saying C++.

57
00:04:05,000 --> 00:04:07,000
I don't hate C++.

58
00:04:07,000 --> 00:04:10,000
It's just not really my good friend.

59
00:04:10,000 --> 00:04:13,000
So if that's what this talk is, what is this talk?

60
00:04:13,000 --> 00:04:18,000
I'm really hoping that I can shine a bit of a light on an area of Python development

61
00:04:18,000 --> 00:04:20,000
that doesn't get a lot of joy.

62
00:04:20,000 --> 00:04:24,000
As people who are maybe sitting, maybe some of you sitting here in this room,

63
00:04:24,000 --> 00:04:27,000
who are like, oh my gosh, I'm learning Python.

64
00:04:27,000 --> 00:04:28,000
And guess what?

65
00:04:28,000 --> 00:04:30,000
It's a little bit harder than I thought.

66
00:04:30,000 --> 00:04:31,000
And I'm struggling.

67
00:04:31,000 --> 00:04:34,000
And I'm afraid to reach out to people.

68
00:04:34,000 --> 00:04:37,000
So I just want to give a little bit of idea.

69
00:04:37,000 --> 00:04:40,000
And also, through talking to each of you,

70
00:04:40,000 --> 00:04:48,000
maybe brainstorm about how we can kind of make this easier for people.

71
00:04:48,000 --> 00:04:52,000
So let's define what I mean by an experienced developer.

72
00:04:52,000 --> 00:04:53,000
I hear this all the time.

73
00:04:53,000 --> 00:04:59,000
In my job, I usually teach entry-level hires, so people who are right out of college.

74
00:04:59,000 --> 00:05:03,000
And they always ask me, Heather, when do I become senior?

75
00:05:03,000 --> 00:05:06,000
And I'm like, how long is a piece of string late?

76
00:05:10,000 --> 00:05:12,000
This developer for the purposes of this talk.

77
00:05:12,000 --> 00:05:14,000
So they're not new to programming.

78
00:05:14,000 --> 00:05:16,000
They've programmed in something.

79
00:05:16,000 --> 00:05:21,000
C, C++, Java, JavaScript, Ruby, Go, pick your poison.

80
00:05:21,000 --> 00:05:23,000
But they are new to Python.

81
00:05:23,000 --> 00:05:26,000
They are actively trying to learn Python.

82
00:05:27,000 --> 00:05:30,000
They might be a professional engineer who

83
00:05:30,000 --> 00:05:34,000
will have to be coming out of a slaughter apartment.

84
00:05:34,000 --> 00:05:38,000
But it does not apply that they have a formal computer science background.

85
00:05:38,000 --> 00:05:42,000
I believe that you strongly get good programmers, good developers,

86
00:05:42,000 --> 00:05:46,000
good engineers from wherever they come from.

87
00:05:46,000 --> 00:05:47,000
That might be camp.

88
00:05:47,000 --> 00:05:49,000
That might be formal computer science.

89
00:05:49,000 --> 00:05:52,000
Just because my background is formal computer science,

90
00:05:52,000 --> 00:05:55,000
doesn't certainly mean that.

91
00:05:55,000 --> 00:05:59,000
So no opinions about that.

92
00:05:59,000 --> 00:06:02,000
OK, so how do we learn?

93
00:06:02,000 --> 00:06:03,000
How do we learn?

94
00:06:03,000 --> 00:06:06,000
It really boils down to this.

95
00:06:06,000 --> 00:06:12,000
Experts in anything recognize and leaders.

96
00:06:12,000 --> 00:06:14,000
So what do I mean by that?

97
00:06:14,000 --> 00:06:16,000
In just a second, I'm going to press the bottom of my laptop.

98
00:06:16,000 --> 00:06:20,000
I'm just going to show you some code.

99
00:06:20,000 --> 00:06:23,000
If you were here for the tutorials yesterday,

100
00:06:23,000 --> 00:06:25,000
no, this is not the same code.

101
00:06:25,000 --> 00:06:27,000
That's basically true.

102
00:06:27,000 --> 00:06:30,000
What I want each of you to do in the room,

103
00:06:30,000 --> 00:06:34,000
I'm going to give you just a few seconds to have a look at this code.

104
00:06:34,000 --> 00:06:37,000
And I want you to just shout out, as loud as you can,

105
00:06:37,000 --> 00:06:39,000
what you think this code does.

106
00:06:39,000 --> 00:06:43,000
Now, before I show it to you, please don't feel under the ground.

107
00:06:43,000 --> 00:06:45,000
I know I'm putting an artificial timeline on here,

108
00:06:45,000 --> 00:06:49,000
but it is to the purposes of my talk.

109
00:06:49,000 --> 00:06:52,000
If you don't get the right answer, I don't care.

110
00:06:53,000 --> 00:06:55,000
Everybody ready?

111
00:06:55,000 --> 00:06:57,000
Ready?

112
00:06:57,000 --> 00:07:00,000
Three, two, one.

113
00:07:00,000 --> 00:07:01,000
See her.

114
00:07:01,000 --> 00:07:02,000
Oh, my God.

115
00:07:02,000 --> 00:07:05,000
Look at her.

116
00:07:05,000 --> 00:07:08,000
I'm trying to sort it.

117
00:07:08,000 --> 00:07:09,000
All sorts.

118
00:07:09,000 --> 00:07:11,000
Okay, yeah.

119
00:07:11,000 --> 00:07:12,000
You know what?

120
00:07:12,000 --> 00:07:15,000
If you didn't get it, you'd eat it.

121
00:07:15,000 --> 00:07:18,000
I have to look around.

122
00:07:18,000 --> 00:07:21,000
And you have a literature to make that last line.

123
00:07:21,000 --> 00:07:22,000
Right?

124
00:07:22,000 --> 00:07:26,000
Because it's very, very Pythonic to swap in place.

125
00:07:26,000 --> 00:07:28,000
Isn't that magical?

126
00:07:28,000 --> 00:07:30,000
No temporary variables.

127
00:07:30,000 --> 00:07:32,000
Yay.

128
00:07:32,000 --> 00:07:35,000
Okay, so this is a sorting algorithm.

129
00:07:35,000 --> 00:07:39,000
If you didn't get there right away, no problem.

130
00:07:39,000 --> 00:07:41,000
If you got there right away,

131
00:07:41,000 --> 00:07:44,000
it's because you know it from another language.

132
00:07:44,000 --> 00:07:47,000
It's because you already know what sort looks like,

133
00:07:47,000 --> 00:07:51,000
maybe in C++, maybe in Java, maybe in some other language.

134
00:07:51,000 --> 00:07:54,000
You did not ask a reason about that code.

135
00:07:54,000 --> 00:07:58,000
Somebody who is a little bit closer to the beginner side of things

136
00:07:58,000 --> 00:08:02,000
or someone like me that does really have to read code

137
00:08:02,000 --> 00:08:05,000
has to read each line in turn.

138
00:08:05,000 --> 00:08:08,000
And they have to say things like, oh, okay, okay.

139
00:08:08,000 --> 00:08:11,000
So I have an LA, and then we go, no, no, it's a list.

140
00:08:11,000 --> 00:08:12,000
Okay, cool.

141
00:08:12,000 --> 00:08:14,000
I have a list, and it's got numbers in it.

142
00:08:14,000 --> 00:08:17,000
All right, some of the numbers are negative.

143
00:08:17,000 --> 00:08:19,000
Then I'm getting the length of it,

144
00:08:19,000 --> 00:08:21,000
and then there's a couple of for loops,

145
00:08:21,000 --> 00:08:23,000
and it seems to be iterating over the same thing.

146
00:08:23,000 --> 00:08:26,000
And as you're reasoning through this code as a beginner,

147
00:08:26,000 --> 00:08:28,000
you still don't know the joy.

148
00:08:28,000 --> 00:08:30,000
And the joy is that last line,

149
00:08:30,000 --> 00:08:33,000
because that's really what's doing the work of doing the sort.

150
00:08:33,000 --> 00:08:34,000
Okay?

151
00:08:34,000 --> 00:08:37,000
So once you get better at all of this,

152
00:08:37,000 --> 00:08:41,000
or if I showed you code that was just more familiar to you,

153
00:08:41,000 --> 00:08:44,000
experts recognize.

154
00:08:44,000 --> 00:08:46,000
And this, my friends, is a bad thing

155
00:08:46,000 --> 00:08:48,000
when you're trying to learn a new language,

156
00:08:48,000 --> 00:08:50,000
because the reason that you recognize

157
00:08:50,000 --> 00:08:53,000
is because the languages that preceded it

158
00:08:53,000 --> 00:08:56,000
taught you how to recognize it in that language.

159
00:08:56,000 --> 00:08:59,000
Okay, now, also, if you are a super experienced

160
00:08:59,000 --> 00:09:01,000
Python developer, this code makes you

161
00:09:01,000 --> 00:09:04,000
throw up a little in your mouse, okay?

162
00:09:04,000 --> 00:09:07,000
It's not very Pythonic, okay?

163
00:09:07,000 --> 00:09:08,000
That's all right.

164
00:09:08,000 --> 00:09:12,000
For today, it's not supposed to be.

165
00:09:12,000 --> 00:09:15,000
Okay, so let me give you a scenario, okay?

166
00:09:15,000 --> 00:09:17,000
And this scenario is going to follow us

167
00:09:17,000 --> 00:09:19,000
through the rest of this talk, okay?

168
00:09:19,000 --> 00:09:20,000
So why are we here?

169
00:09:20,000 --> 00:09:23,000
So some person, let's call them a manager, says,

170
00:09:23,000 --> 00:09:25,000
we have a problem that needs to be solved,

171
00:09:25,000 --> 00:09:27,000
and we need a Python developer stat,

172
00:09:27,000 --> 00:09:30,000
but we don't have one, okay?

173
00:09:30,000 --> 00:09:32,000
And so the software engineer goes,

174
00:09:32,000 --> 00:09:35,000
okay, cool, I'm going to fly in and save the day.

175
00:09:35,000 --> 00:09:37,000
I'm going to solve your problem,

176
00:09:37,000 --> 00:09:39,000
and oh, yeah, I have to learn Python to do it.

177
00:09:39,000 --> 00:09:40,000
It's okay.

178
00:09:40,000 --> 00:09:42,000
Python's easy.

179
00:09:42,000 --> 00:09:45,000
So their main focus is solving the problem.

180
00:09:45,000 --> 00:09:48,000
So they write some code,

181
00:09:48,000 --> 00:09:50,000
and it works.

182
00:09:50,000 --> 00:09:52,000
It solves the problem.

183
00:09:52,000 --> 00:09:54,000
It's syntactically correct,

184
00:09:54,000 --> 00:09:55,000
and they go through a code review

185
00:09:55,000 --> 00:09:56,000
with a senior Python developer.

186
00:09:56,000 --> 00:09:58,000
I don't know why that person didn't just write the code,

187
00:09:58,000 --> 00:10:03,000
but, you know, it's my story, okay?

188
00:10:03,000 --> 00:10:08,000
And they go, oh, this code is fine.

189
00:10:08,000 --> 00:10:10,000
It works.

190
00:10:10,000 --> 00:10:11,000
And before they know it,

191
00:10:11,000 --> 00:10:13,000
their code is unrecognizable,

192
00:10:13,000 --> 00:10:16,000
because the senior developer has made it Pythonic.

193
00:10:16,000 --> 00:10:19,000
And her hero, who swooped in to save the day,

194
00:10:19,000 --> 00:10:21,000
is angry, because they're like,

195
00:10:21,000 --> 00:10:24,000
well, I know my job, blah, blah, blah.

196
00:10:24,000 --> 00:10:26,000
And how do we make this easier for them?

197
00:10:26,000 --> 00:10:30,000
Because they basically have to go back to the drawing board.

198
00:10:30,000 --> 00:10:32,000
So that's kind of what we're here for.

199
00:10:32,000 --> 00:10:34,000
So the TLDR for this whole talk,

200
00:10:34,000 --> 00:10:36,000
and I hope that I won't lose you after this,

201
00:10:36,000 --> 00:10:38,000
because there's more, okay?

202
00:10:38,000 --> 00:10:40,000
Ready for this?

203
00:10:40,000 --> 00:10:53,000
Python is not C or C++ or Java or JavaScript,

204
00:10:53,000 --> 00:10:55,000
and I could go on, okay?

205
00:10:55,000 --> 00:10:56,000
Insert anything you want.

206
00:10:56,000 --> 00:10:59,000
And that's really the heart of what we're talking about here today

207
00:10:59,000 --> 00:11:02,000
is that Python is different.

208
00:11:02,000 --> 00:11:05,000
It's different than any language I've written before.

209
00:11:05,000 --> 00:11:09,000
Now, I've heard from somebody that JavaScript and Python

210
00:11:09,000 --> 00:11:11,000
are getting more and more indistinguishable.

211
00:11:11,000 --> 00:11:13,000
I think it's lies, okay?

212
00:11:13,000 --> 00:11:15,000
But it's nothing like any language

213
00:11:15,000 --> 00:11:17,000
that I've ever had to learn before.

214
00:11:17,000 --> 00:11:18,000
That's both its power,

215
00:11:18,000 --> 00:11:21,000
but also sometimes when you're trying to learn it,

216
00:11:21,000 --> 00:11:23,000
it's limitation.

217
00:11:23,000 --> 00:11:25,000
So let's dig in a little bit.

218
00:11:25,000 --> 00:11:27,000
First of all, I want to take a nod

219
00:11:27,000 --> 00:11:29,000
to what Mason did teach us yesterday.

220
00:11:29,000 --> 00:11:34,000
I consider these, among others, Python power moves,

221
00:11:34,000 --> 00:11:36,000
and we're going to come back to that term in a second.

222
00:11:36,000 --> 00:11:39,000
Okay, the stuff that makes Python super awesome

223
00:11:39,000 --> 00:11:41,000
but also different.

224
00:11:41,000 --> 00:11:45,000
Decorators, comprehensions, generators, and slicing.

225
00:11:45,000 --> 00:11:49,000
Slicing is magical, okay?

226
00:11:49,000 --> 00:11:52,000
So those are the things we're really going to come back to.

227
00:11:52,000 --> 00:11:54,000
There's more. There's more.

228
00:11:54,000 --> 00:11:55,000
There's more.

229
00:11:55,000 --> 00:11:58,000
Okay, now this is where my talk and Mason's,

230
00:11:58,000 --> 00:11:59,000
if you weren't here yesterday,

231
00:11:59,000 --> 00:12:02,000
you get a little bit of code that Mason also wrote.

232
00:12:02,000 --> 00:12:05,000
So here on the left-hand side of this slide,

233
00:12:05,000 --> 00:12:07,000
let me check, yes, left, okay.

234
00:12:07,000 --> 00:12:09,000
On the left-hand side of this slide,

235
00:12:09,000 --> 00:12:14,000
we have code that is just going to square a number if it's even.

236
00:12:14,000 --> 00:12:17,000
Okay, it's not doing anything special.

237
00:12:17,000 --> 00:12:20,000
I doubt this exists in production, okay?

238
00:12:20,000 --> 00:12:22,000
But it is not very Pythonic.

239
00:12:22,000 --> 00:12:25,000
It works. It's syntactically correct.

240
00:12:25,000 --> 00:12:27,000
And those of you who maybe don't know Python as well,

241
00:12:27,000 --> 00:12:28,000
you can read.

242
00:12:33,000 --> 00:12:36,000
The two pieces of code are syntactic,

243
00:12:36,000 --> 00:12:39,000
or sorry, are functionally equivalent.

244
00:12:39,000 --> 00:12:41,000
They do exactly the same thing.

245
00:12:41,000 --> 00:12:43,000
Somebody who is more well-versed in Python

246
00:12:43,000 --> 00:12:48,000
looks at the right-hand side and feels glorious.

247
00:12:48,000 --> 00:12:51,000
Okay.

248
00:12:51,000 --> 00:12:52,000
Somebody new to Python,

249
00:12:52,000 --> 00:12:55,000
and these words have actually been said to me before

250
00:12:55,000 --> 00:12:58,000
by a trainee learning Python for the first time.

251
00:12:58,000 --> 00:13:01,000
The first question was, is that just syntactic sugar?

252
00:13:01,000 --> 00:13:04,000
And I'm like, not really.

253
00:13:04,000 --> 00:13:06,000
You're testing between that?

254
00:13:06,000 --> 00:13:08,000
And then the second was,

255
00:13:08,000 --> 00:13:12,000
you can't tell me that this side is easier to read than this side.

256
00:13:12,000 --> 00:13:15,000
And I said, but it is, and it's all about experience.

257
00:13:15,000 --> 00:13:18,000
So here's how I explained it to that trainee.

258
00:13:18,000 --> 00:13:22,000
I said, if we look on this side,

259
00:13:22,000 --> 00:13:25,000
we have to read down until we get to the part that does something,

260
00:13:25,000 --> 00:13:28,000
which is really line six, right?

261
00:13:28,000 --> 00:13:30,000
We have to read all of the code before that,

262
00:13:30,000 --> 00:13:33,000
when really I care what happens first.

263
00:13:33,000 --> 00:13:35,000
So when we read the list comprehension side,

264
00:13:35,000 --> 00:13:38,000
we read it like we would read a sentence.

265
00:13:38,000 --> 00:13:39,000
So here's how I would read that.

266
00:13:39,000 --> 00:13:44,000
I would say, we're going to take some value and square it

267
00:13:44,000 --> 00:13:48,000
for that value in some sort of set of values.

268
00:13:53,000 --> 00:13:55,000
Read it like a sentence.

269
00:13:55,000 --> 00:13:59,000
All of a sudden you understand it immediately.

270
00:13:59,000 --> 00:14:00,000
Immediately.

271
00:14:00,000 --> 00:14:04,000
You don't have to wait to find out what the beautiful thing

272
00:14:07,000 --> 00:14:11,000
that the square back hits makes it to a list comprehension versus parentheses,

273
00:14:11,000 --> 00:14:15,000
which would make it a generator versus, you know, on and on and on.

274
00:14:15,000 --> 00:14:20,000
That's a little and say, just read it like you would a sentence.

275
00:14:20,000 --> 00:14:22,000
It makes sense right away.

276
00:14:22,000 --> 00:14:25,000
And you just have created a convert.

277
00:14:25,000 --> 00:14:27,000
So this is reason number one,

278
00:14:27,000 --> 00:14:33,000
Python code is not the same thing as Pythonic code, idiomatic code.

279
00:14:33,000 --> 00:14:39,000
So you can write really correct Python code that is not Pythonic.

280
00:14:39,000 --> 00:14:42,000
And I did it for well over a decade.

281
00:14:42,000 --> 00:14:45,000
OK, so that's the first thing is that understanding these Pythonic idioms,

282
00:14:45,000 --> 00:14:48,000
these power moves.

283
00:14:52,000 --> 00:14:58,000
Python code is absolutely not like any other languages, concepts or idioms.

284
00:14:58,000 --> 00:15:04,000
So I got this question fairly recently from and again, sorry, C++ people,

285
00:15:04,000 --> 00:15:06,000
but she was a C++ developer.

286
00:15:06,000 --> 00:15:10,000
She was looking at a particular slide in one of our slide decks that was

287
00:15:10,000 --> 00:15:13,000
explaining how to pass a parameter.

288
00:15:13,000 --> 00:15:16,000
And the first thing that we did is show.

289
00:15:26,000 --> 00:15:28,000
Did not work the way that she expected.

290
00:15:28,000 --> 00:15:33,000
So the question she asked me and it really was the A B problem because this

291
00:15:33,000 --> 00:15:38,000
was not the question she wanted answered is is Python passed by value or passed

292
00:15:38,000 --> 00:15:39,000
by reference?

293
00:15:39,000 --> 00:15:42,000
And my answer was neither.

294
00:15:42,000 --> 00:15:45,000
And she looked at me and she's like, what?

295
00:15:45,000 --> 00:15:47,000
I'm like, it's passed by assignment.

296
00:15:47,000 --> 00:15:53,000
And she's like, no, no, Heather, it has to be one of the two.

297
00:15:53,000 --> 00:15:55,000
I'm like, it doesn't.

298
00:15:55,000 --> 00:15:56,000
It absolutely doesn't.

299
00:15:56,000 --> 00:15:57,000
And I said, why?

300
00:15:57,000 --> 00:15:59,000
And she's like, well, in C++.

301
00:15:59,000 --> 00:16:00,000
And I put my hand up.

302
00:16:00,000 --> 00:16:03,000
I'm like, Python.

303
00:16:03,000 --> 00:16:06,000
And so she's like, well, what does pass by assignment mean?

304
00:16:06,000 --> 00:16:16,000
And I took out a piece of paper and I drew a diagram for her with arrows.

305
00:16:16,000 --> 00:16:18,000
But at the end, she had that aha moment.

306
00:16:18,000 --> 00:16:23,000
And then she said, that's weird.

307
00:16:23,000 --> 00:16:29,000
So her first reaction was to question this because her mental model of

308
00:16:29,000 --> 00:16:34,000
programming languages says it's passed by value exclusive or passed by

309
00:16:34,000 --> 00:16:35,000
reference.

310
00:16:35,000 --> 00:16:39,000
OK, it can't be both and it can't be neither.

311
00:16:39,000 --> 00:16:43,000
OK, then she was frustrated because the mental model that she had already

312
00:16:43,000 --> 00:16:47,000
built for herself didn't really help her anymore.

313
00:16:47,000 --> 00:16:55,000
Then she was angry and didn't want to learn Python.

314
00:16:55,000 --> 00:16:59,000
It was sort of like the stages of grief, if I'm honest with you.

315
00:16:59,000 --> 00:17:05,000
While she kind of gave up her kind of understanding of the world.

316
00:17:05,000 --> 00:17:09,000
So reason number three is that Python is easy.

317
00:17:09,000 --> 00:17:12,000
And you're like, wait, if Python is easy, why do people struggle with it?

318
00:17:12,000 --> 00:17:15,000
Well, my friends, it's because Python is too easy.

319
00:17:15,000 --> 00:17:18,000
OK, so let's go to Theodore Roosevelt for a second.

320
00:17:18,000 --> 00:17:23,000
Nothing in the world is worth having or worth doing unless it means effort,

321
00:17:23,000 --> 00:17:26,000
pain and difficulty.

322
00:17:26,000 --> 00:17:30,000
Know this as no pain, no gain.

323
00:17:30,000 --> 00:17:36,000
OK, and this really does come to programming is that Python has this

324
00:17:36,000 --> 00:17:44,000
underlying simplicity that can be frustrating and that is in order to be

325
00:17:44,000 --> 00:17:47,000
worth their time to learn.

326
00:17:47,000 --> 00:17:50,000
OK, and that is hard to get over.

327
00:17:50,000 --> 00:17:53,000
Like we're all laughing a little bit because it is kind of funny.

328
00:17:53,000 --> 00:17:55,000
But it's funny because it's true.

329
00:17:55,000 --> 00:17:59,000
And when we help people get over the idea that no, no, it really is that

330
00:17:59,000 --> 00:18:03,000
simple, you know, then they sort of ease into the world of Python a little

331
00:18:03,000 --> 00:18:06,000
bit more easily.

332
00:18:06,000 --> 00:18:11,000
OK, so reason number four, they find it hard is that Python by design does

333
00:18:11,000 --> 00:18:14,000
not give a toss about memory.

334
00:18:14,000 --> 00:18:17,000
Nobody talks about pointers in Python, thank goodness.

335
00:18:17,000 --> 00:18:22,000
OK, nobody shows you the example of putting two lists side by side and

336
00:18:22,000 --> 00:18:25,000
having them smash into each other's memories.

337
00:18:25,000 --> 00:18:28,000
A lot of the trainees that I teach that learn Python first don't even know

338
00:18:28,000 --> 00:18:32,000
that Stack Overflow is not just a clever name for the website.

339
00:18:32,000 --> 00:18:35,000
OK.

340
00:18:35,000 --> 00:18:39,000
But the reality of why we don't care in Python is that whatever interpreter

341
00:18:39,000 --> 00:18:43,000
you use may use memory differently.

342
00:18:43,000 --> 00:18:47,000
And so we don't have to or want to put effort into learning the memory model

343
00:18:47,000 --> 00:18:51,000
because it's going to be different, where when you learn it for C or C++,

344
00:18:51,000 --> 00:18:56,000
you've got it for your life, for your life.

345
00:18:56,000 --> 00:19:00,000
So for developers like C++ or C developers who have been taught that they

346
00:19:00,000 --> 00:19:05,000
must care deeply about memory management, saying no, no, no, don't worry is

347
00:19:05,000 --> 00:19:09,000
sort of frustrating to them.

348
00:19:09,000 --> 00:19:14,000
So reason number five, and now I'm looking at Andy in my hype squad.

349
00:19:14,000 --> 00:19:18,000
Python needs lots and lots of testing, lots and lots of testing.

350
00:19:18,000 --> 00:19:21,000
It's like any other interpreted language.

351
00:19:21,000 --> 00:19:24,000
And the reason that interpreted languages need lots of testing is because we

352
00:19:24,000 --> 00:19:28,000
don't have a compiler or we do, but let's put a star beside the one that we've

353
00:19:28,000 --> 00:19:32,000
got, OK, to catch these errors before it hits runtime.

354
00:19:32,000 --> 00:19:35,000
OK, we don't have that flexibility.

355
00:19:35,000 --> 00:19:39,000
OK, and so we don't usually see all of the errors until we follow all of the

356
00:19:39,000 --> 00:19:41,000
different paths through the code.

357
00:19:41,000 --> 00:19:44,000
And that is best done by testing.

358
00:19:44,000 --> 00:19:47,000
Yay, I got it right, yay.

359
00:19:47,000 --> 00:19:51,000
This means that in addition to learning the language and learning the

360
00:19:51,000 --> 00:19:57,000
idiomatic parts of it, now we expect you to learn a testing framework as well.

361
00:19:57,000 --> 00:20:01,000
And I'm going to make Andy even happier just a little bit later in this.

362
00:20:02,000 --> 00:20:08,000
And my final reason to talk about today is that Python is all about knowing

363
00:20:08,000 --> 00:20:09,000
libraries.

364
00:20:09,000 --> 00:20:13,000
OK, so there's a piece of code that is waiting for me to refactor it back at

365
00:20:13,000 --> 00:20:14,000
the office right now.

366
00:20:14,000 --> 00:20:17,000
It's going to wait a bunch longer because I'm not looking forward to it.

367
00:20:17,000 --> 00:20:22,000
It was written by somebody who was deep in C++ world and new to Python.

368
00:20:22,000 --> 00:20:24,000
And so there's no return statements.

369
00:20:24,000 --> 00:20:27,000
I have sys exit zero everywhere.

370
00:20:27,000 --> 00:20:32,000
And I have about 300 lines of code that arg parser could do for you.

371
00:20:32,000 --> 00:20:36,000
OK, now the reason, and if you're not familiar with arg parser, it's a library

372
00:20:36,000 --> 00:20:38,000
for parsing arguments.

373
00:20:38,000 --> 00:20:40,000
OK, it's really fancy.

374
00:20:40,000 --> 00:20:41,000
I love it.

375
00:20:41,000 --> 00:20:45,000
But being really good at Python is really not about writing more code.

376
00:20:45,000 --> 00:20:48,000
It's about saying to yourself what library could do this for me.

377
00:20:48,000 --> 00:20:52,000
OK, and that's true of all of the Python libraries that exist but also the

378
00:20:52,000 --> 00:20:56,000
third party libraries that people are always writing.

379
00:20:56,000 --> 00:21:00,000
OK, oh, and if you tell an experienced developer that, they're like, no, I want

380
00:21:00,000 --> 00:21:01,000
to roll my own.

381
00:21:01,000 --> 00:21:06,000
And you're like, but it will break.

382
00:21:06,000 --> 00:21:08,000
Then they get mad at you.

383
00:21:08,000 --> 00:21:09,000
OK, so what now?

384
00:21:09,000 --> 00:21:11,000
Our hero is feeling kind of sad.

385
00:21:11,000 --> 00:21:12,000
They have a bit of a cloud above them.

386
00:21:12,000 --> 00:21:14,000
They're not sure what to do.

387
00:21:14,000 --> 00:21:16,000
They're thinking of changing careers.

388
00:21:16,000 --> 00:21:22,000
OK, or maybe going back someplace that maybe C++ or whatever language is more

389
00:21:22,000 --> 00:21:23,000
than norm.

390
00:21:23,000 --> 00:21:26,000
So what can we do to help them?

391
00:21:26,000 --> 00:21:28,000
So technique one is a little bit strange.

392
00:21:28,000 --> 00:21:29,000
It's no one to quit.

393
00:21:29,000 --> 00:21:32,000
I mean, no one to give up on them, which is terrible.

394
00:21:32,000 --> 00:21:33,000
We don't want to give up on people.

395
00:21:33,000 --> 00:21:34,000
But let me explain.

396
00:21:34,000 --> 00:21:37,000
And this is a little bit more about how we learn.

397
00:21:37,000 --> 00:21:42,000
OK, when we learn, we go through the four stages that you see here on the slide.

398
00:21:42,000 --> 00:21:47,000
And when people start out, they're in this area called unconscious incompetence.

399
00:21:47,000 --> 00:21:50,000
It means they don't know what they don't know.

400
00:21:50,000 --> 00:21:53,000
And they're not convinced that it's going to solve whatever problem.

401
00:21:53,000 --> 00:21:57,000
So our hero is like, they told me to write Python, but really?

402
00:21:57,000 --> 00:22:02,000
OK, so when you're in that level of unconscious incompetence, it's really hard

403
00:22:02,000 --> 00:22:04,000
to teach you, really hard.

404
00:22:04,000 --> 00:22:10,000
We need to move our hero into the second stage, conscious incompetence, which means

405
00:22:10,000 --> 00:22:14,000
that you still don't know what you don't know, but you're convinced it's going to

406
00:22:14,000 --> 00:22:15,000
solve the problem.

407
00:22:15,000 --> 00:22:20,000
That might be internally motivated or externally motivated, depending on who you

408
00:22:20,000 --> 00:22:21,000
are.

409
00:22:21,000 --> 00:22:27,000
When we can move that person into that conscious incompetence, then we have a hope

410
00:22:27,000 --> 00:22:30,000
of some of my other techniques landing with them.

411
00:22:30,000 --> 00:22:35,000
But until they get out of the headspace that they don't want to do this, it's

412
00:22:35,000 --> 00:22:39,000
probably better to give them a little more time.

413
00:22:39,000 --> 00:22:42,000
I'm calling it give up on them.

414
00:22:42,000 --> 00:22:46,000
Now, the other two aren't really important to the discussion, but conscious

415
00:22:46,000 --> 00:22:50,000
competence is where you're like, OK, I kind of get some of this.

416
00:22:50,000 --> 00:22:57,000
I'm starting to get to Heather in, say, 2010, 2011, where I can work with the

417
00:22:57,000 --> 00:23:02,000
code, but I haven't moved yet to unconscious competence, where I do things like

418
00:23:02,000 --> 00:23:06,000
write a list comprehension without first writing the for loop, where I write

419
00:23:06,000 --> 00:23:08,000
idiomatic code automatically.

420
00:23:08,000 --> 00:23:10,000
And true story, I still do that.

421
00:23:10,000 --> 00:23:14,000
Because to me, sometimes separating solving the problem and writing the code

422
00:23:14,000 --> 00:23:19,000
to solve the problem, those are two different ways of thinking for me.

423
00:23:19,000 --> 00:23:23,000
OK, so technique two is we need to move away from other languages.

424
00:23:23,000 --> 00:23:25,000
And I separate this into two parts.

425
00:23:25,000 --> 00:23:30,000
The first one is, if you're the trainer or the teacher, is that you have to move

426
00:23:30,000 --> 00:23:36,000
people away from, OK, yeah, but what is that in Java or C or C++?

427
00:23:36,000 --> 00:23:39,000
Because chances are it doesn't exist.

428
00:23:39,000 --> 00:23:44,000
OK, I can't think of something like a list comprehension in other languages.

429
00:23:44,000 --> 00:23:48,000
If you know of them, come talk to me later and we'll talk about it.

430
00:23:48,000 --> 00:23:53,000
What we should focus on as teachers is what is different about the language

431
00:23:53,000 --> 00:23:55,000
rather than what's the same.

432
00:23:55,000 --> 00:23:59,000
So avoid trying to say, well, in C++, this works like this.

433
00:23:59,000 --> 00:24:06,000
OK, now if you're a developer, I really want you to understand that not all

434
00:24:06,000 --> 00:24:11,000
languages are the same and that learning one doesn't mean you learn them all.

435
00:24:11,000 --> 00:24:15,000
OK, even within paradigms like functional languages.

436
00:24:15,000 --> 00:24:20,000
OK, I want you to keep an open mind about every single language that you learn

437
00:24:20,000 --> 00:24:24,000
and try to see it for adding another tool to your toolkit that is going to be

438
00:24:24,000 --> 00:24:27,000
able to solve a problem for you later.

439
00:24:27,000 --> 00:24:31,000
OK, that is going to help you learn.

440
00:24:31,000 --> 00:24:34,000
So technique number three is focused on the trainers again.

441
00:24:34,000 --> 00:24:39,000
Consider what tools you have for teaching and use the right ones for the right

442
00:24:39,000 --> 00:24:41,000
level of learner.

443
00:24:41,000 --> 00:24:45,000
So starting at the bottom here, demos and lectures are super awesome for early

444
00:24:45,000 --> 00:24:50,000
people who are learning a whole thing from scratch.

445
00:24:50,000 --> 00:24:54,000
OK, so as a trainer, their first programming language.

446
00:24:54,000 --> 00:24:56,000
OK, demos and lectures are awesome.

447
00:24:56,000 --> 00:24:58,000
They want to see somebody work with the language.

448
00:24:58,000 --> 00:25:02,000
And in fact, when I was a professor, I used to teach freshmen in charter

449
00:25:02,000 --> 00:25:07,000
programming and I would live code in front of them and I would do it badly

450
00:25:07,000 --> 00:25:08,000
because guess what?

451
00:25:08,000 --> 00:25:10,000
Live coding is hard, right?

452
00:25:10,000 --> 00:25:15,000
And I did it to show them that even experienced developers make mistakes and it's

453
00:25:15,000 --> 00:25:21,000
more valuable on how you get out of it than not making mistakes anymore.

454
00:25:21,000 --> 00:25:26,000
But as we move up towards the top of this list here, we get into the place that

455
00:25:26,000 --> 00:25:31,000
really experienced developers find themselves.

456
00:25:31,000 --> 00:25:33,000
Labs and pair programming.

457
00:25:33,000 --> 00:25:36,000
Any experienced developer just wants to write the code.

458
00:25:36,000 --> 00:25:41,000
OK, so give them a lab, hopefully a staged lab that can walk them through

459
00:25:41,000 --> 00:25:43,000
increasingly difficult concepts.

460
00:25:43,000 --> 00:25:49,000
OK, pair programming is an amazing thing, especially if you compare somebody

461
00:25:49,000 --> 00:25:51,000
more experienced with somebody less experienced.

462
00:25:51,000 --> 00:25:54,000
My job is way easier when people pair program.

463
00:25:54,000 --> 00:25:56,000
I answer way fewer questions.

464
00:25:56,000 --> 00:25:58,000
It's a little sadder, but it's easier.

465
00:25:58,000 --> 00:26:04,000
One of the things that I would tell you, though, is that when you're teaching an

466
00:26:04,000 --> 00:26:08,000
experienced developer, some of the things that we give new developers to help

467
00:26:08,000 --> 00:26:11,000
them learn are just going to be frustrating.

468
00:26:11,000 --> 00:26:15,000
If I asked any single one of you in this room to grab a piece of paper and do a

469
00:26:15,000 --> 00:26:17,000
code trace, you'd probably go, what?

470
00:26:17,000 --> 00:26:21,000
But for a new developer, that's a really important thing.

471
00:26:21,000 --> 00:26:29,000
OK, so Andy, consider test-driven development for experienced developers who

472
00:26:29,000 --> 00:26:31,000
are trying to learn Python.

473
00:26:31,000 --> 00:26:33,000
I knew you'd be happy.

474
00:26:33,000 --> 00:26:39,000
So testing is a huge part of Python development, and you can ease people into

475
00:26:39,000 --> 00:26:42,000
the language of Python a little bit easier because something like PyTest is

476
00:26:42,000 --> 00:26:44,000
really quite intuitive.

477
00:26:44,000 --> 00:26:49,000
It doesn't use a lot of the power moves that I mentioned before, at least in

478
00:26:49,000 --> 00:26:55,000
So you can get people writing good, syntactically correct, and even kind of

479
00:26:55,000 --> 00:26:59,000
idiomatic code really quickly if you get them writing tests first.

480
00:26:59,000 --> 00:27:04,000
So test-driven development is a really, really important part, I think, of

481
00:27:04,000 --> 00:27:06,000
teaching experienced developers.

482
00:27:06,000 --> 00:27:12,000
OK, so why did you listen to this whole talk and what do I want you to get away

483
00:27:12,000 --> 00:27:18,000
with or walk away with is that it's really up to all of us who use Python to

484
00:27:18,000 --> 00:27:23,000
regularly to make sure that everyone can use it, to really make it something

485
00:27:23,000 --> 00:27:28,000
that is inclusive for everybody and not to scare away the people who consider

486
00:27:28,000 --> 00:27:32,000
Python a toy language that they don't need to learn.

487
00:27:32,000 --> 00:27:37,000
We need to teach experienced learners differently using a variety of tools and

488
00:27:37,000 --> 00:27:41,000
not just trying to attack the problem as we would for somebody who's new to

489
00:27:41,000 --> 00:27:43,000
development.

490
00:27:43,000 --> 00:27:47,000
As a developer, you need to keep your mind open to the different paradigms that

491
00:27:47,000 --> 00:27:53,000
are available to you in terms of programming, and you need to not judge a

492
00:27:53,000 --> 00:27:59,000
language, not fall for the hype that C++ gives us that Python is a toy

493
00:27:59,000 --> 00:28:02,000
development language.

494
00:28:02,000 --> 00:28:06,000
And as a code reviewer, and I had a really, really good talk with my colleague

495
00:28:06,000 --> 00:28:11,000
Oliver yesterday about this, how do we as code reviewers support Pythonic

496
00:28:11,000 --> 00:28:15,000
programming without getting experienced developers mad at us because they're

497
00:28:15,000 --> 00:28:20,000
used to writing good code that passes review immediately?

498
00:28:20,000 --> 00:28:22,000
All right.

499
00:28:22,000 --> 00:28:25,000
So I'm more than happy to take the questions that came in on Slido, and my

500
00:28:25,000 --> 00:28:29,000
experience tells me that please feel free to ask any of these questions by

501
00:28:29,000 --> 00:28:31,000
number, and I'll be happy to answer them.

502
00:28:31,000 --> 00:28:33,000
Thank you.

503
00:28:33,000 --> 00:28:35,000
All right.

504
00:28:35,000 --> 00:28:37,000
Awesome.

505
00:28:37,000 --> 00:28:39,000
Thank you so much, Heather.

506
00:28:39,000 --> 00:28:41,000
We have a few questions.

507
00:28:41,000 --> 00:28:43,000
We have a few questions coming in on Slido.

508
00:28:43,000 --> 00:28:45,000
So let me start with that, and I will apologize to you guys.

509
00:28:45,000 --> 00:28:49,000
I forgot to remind you at the start of the talk, if you have questions, please

510
00:28:49,000 --> 00:28:51,000
toss them in Slido.

511
00:28:51,000 --> 00:28:55,000
If you don't have questions but want to vote on the ones that are in there,

512
00:28:55,000 --> 00:28:57,000
please check Slido for that as well.

513
00:28:57,000 --> 00:29:01,000
So while we're doing that, feel free to keep adding questions.

514
00:29:01,000 --> 00:29:03,000
We'll talk for a few minutes here while they're getting set up.

515
00:29:03,000 --> 00:29:07,000
So first question, do you think it's harder for new programmers or

516
00:29:07,000 --> 00:29:09,000
experienced programmers to learn Python?

517
00:29:09,000 --> 00:29:11,000
Both.

518
00:29:11,000 --> 00:29:13,000
But for different reasons.

519
00:29:13,000 --> 00:29:17,000
Experienced programmers because they tend to depend far too much on what they

520
00:29:17,000 --> 00:29:19,000
already know.

521
00:29:19,000 --> 00:29:24,000
And new developers because Python lacks a certain structure to it that helps

522
00:29:24,000 --> 00:29:28,000
them build the mental model of what programming language they're using.

523
00:29:28,000 --> 00:29:32,000
That helps them build the mental model of what programming languages are all

524
00:29:32,000 --> 00:29:34,000
really doing under the hood.

525
00:29:34,000 --> 00:29:36,000
Okay.

526
00:29:36,000 --> 00:29:40,000
What is a good resource if someone wants to kind of study internalized

527
00:29:40,000 --> 00:29:42,000
Pythonic patterns?

528
00:29:42,000 --> 00:29:44,000
Where would you send someone?

529
00:29:44,000 --> 00:29:48,000
I don't know if we're allowed to say actual websites, but I love real Python.

530
00:29:48,000 --> 00:29:52,000
If anybody is here from real Python.

531
00:29:52,000 --> 00:29:56,000
I used it a lot because when I was prepping for my interview at Bloomberg, I

532
00:29:56,000 --> 00:29:58,000
didn't know what Pythonic meant.

533
00:29:58,000 --> 00:30:00,000
And there's a whole resource for that.

534
00:30:00,000 --> 00:30:04,000
I also think that things like hacker rank to a certain degree, like actually

535
00:30:04,000 --> 00:30:06,000
writing code in it.

536
00:30:06,000 --> 00:30:08,000
Yeah.

537
00:30:08,000 --> 00:30:10,000
No books.

538
00:30:10,000 --> 00:30:12,000
Okay.

539
00:30:12,000 --> 00:30:14,000
And we've got time for one or two more.

540
00:30:14,000 --> 00:30:17,000
Do you have any favorite resource recommendations for devs coming to Python

541
00:30:17,000 --> 00:30:19,000
from other languages?

542
00:30:19,000 --> 00:30:21,000
Real Python.

543
00:30:22,000 --> 00:30:26,000
I think just not trying to translate code.

544
00:30:26,000 --> 00:30:29,000
Don't try to take something you wrote in C++ and rewrite it in Python.

545
00:30:29,000 --> 00:30:30,000
You can.

546
00:30:30,000 --> 00:30:32,000
Okay.

547
00:30:32,000 --> 00:30:34,000
But also look at other people's code.

548
00:30:34,000 --> 00:30:36,000
Other people's code is a really good way.

549
00:30:36,000 --> 00:30:38,000
I learned so much by looking at the code that we saw yesterday.

550
00:30:38,000 --> 00:30:40,000
Not even going to lie.

551
00:30:40,000 --> 00:30:42,000
Awesome.

552
00:30:42,000 --> 00:30:44,000
Okay.

553
00:30:44,000 --> 00:30:50,000
And can you give an example of Python being too easy?

554
00:30:50,000 --> 00:30:52,000
Yeah.

555
00:30:52,000 --> 00:30:54,000
It's duck typing.

556
00:30:54,000 --> 00:30:57,000
So when you begin using a variable in Python, you can make it whatever you want

557
00:30:57,000 --> 00:30:59,000
throughout its lifetime.

558
00:30:59,000 --> 00:31:01,000
And that can be a little frustrating to people.

559
00:31:01,000 --> 00:31:03,000
They're like, wait, that was an integer and now it's a string?

560
00:31:03,000 --> 00:31:05,000
Why?

561
00:31:05,000 --> 00:31:07,000
And you're like, because awesome.

562
00:31:07,000 --> 00:31:09,000
But duck typing can be something that once you get your head around it, it's too

563
00:31:09,000 --> 00:31:11,000
easy.

564
00:31:11,000 --> 00:31:13,000
Yeah.

565
00:31:13,000 --> 00:31:15,000
I definitely see that.

566
00:31:15,000 --> 00:31:17,000
Last one and then I'll hand it over to Josh for our next speaker.

567
00:31:17,000 --> 00:31:19,000
The list is changing under me.

568
00:31:19,000 --> 00:31:21,000
So let me try and read it before it moves again.

569
00:31:21,000 --> 00:31:23,000
I'm glad you all are involved.

570
00:31:23,000 --> 00:31:25,000
That's awesome.

571
00:31:25,000 --> 00:31:27,000
How do you convince, yeah, we're going to stick with that.

572
00:31:27,000 --> 00:31:30,000
How do you convince experienced devs that third-party libraries are not

573
00:31:30,000 --> 00:31:32,000
dangerous or lazy?

574
00:31:32,000 --> 00:31:36,000
So I don't because my background is in information security.

575
00:31:36,000 --> 00:31:38,000
I think they can be dangerous.

576
00:31:38,000 --> 00:31:42,000
But I just say that the community is a pretty open one and that I've never

577
00:31:42,000 --> 00:31:45,000
gotten a bad third-party library from Python.

578
00:31:45,000 --> 00:31:47,000
Awesome.

579
00:31:47,000 --> 00:31:49,000
All right.

580
00:31:49,000 --> 00:31:51,000
Thank you again, Heather.

581
00:31:51,000 --> 00:31:53,000
Thank you, everyone.

