1
00:00:00,000 --> 00:00:01,860
Yes, thank you.

2
00:00:01,860 --> 00:00:04,000
Legacy code's everything before you, right?

3
00:00:04,000 --> 00:00:08,580
Yes, everything I wrote two seconds ago, basically.

4
00:00:08,580 --> 00:00:10,100
And I do mean that, actually.

5
00:00:10,100 --> 00:00:13,900
I think that's one of the big misconceptions about legacy

6
00:00:13,900 --> 00:00:17,420
code is that everyone thinks it has to be something that

7
00:00:17,420 --> 00:00:18,780
was written six months ago.

8
00:00:18,780 --> 00:00:20,220
But that's not always the case.

9
00:00:20,220 --> 00:00:24,540
It could be something you wrote a minute ago, a week ago,

10
00:00:24,540 --> 00:00:26,460
something like that.

11
00:00:26,460 --> 00:00:27,300
OK, great.

12
00:00:27,300 --> 00:00:29,060
Yeah, so I'm going to be talking about that.

13
00:00:29,060 --> 00:00:30,840
So a little bit about me.

14
00:00:30,840 --> 00:00:31,960
I'm Joe Cabrera.

15
00:00:31,960 --> 00:00:35,560
I'm lead software engineer at an AI startup based out

16
00:00:35,560 --> 00:00:38,060
of New York called ASAP.

17
00:00:38,060 --> 00:00:42,760
I've been a Python programmer since 2009.

18
00:00:42,760 --> 00:00:45,580
And I've been working on various legacy code bases

19
00:00:45,580 --> 00:00:46,760
for the last five years.

20
00:00:50,080 --> 00:00:53,000
So the goal of this talk is really

21
00:00:53,000 --> 00:00:57,980
to give you the tools to succeed when dealing with legacy code.

22
00:00:57,980 --> 00:01:01,100
And I'm really going to tailor this talk specifically

23
00:01:01,100 --> 00:01:03,420
towards those of you in the audience

24
00:01:03,420 --> 00:01:07,500
that this might be your first time dealing with legacy code.

25
00:01:07,500 --> 00:01:09,500
Again, it's probably something eventually you'll

26
00:01:09,500 --> 00:01:11,940
deal with in your career and definitely

27
00:01:11,940 --> 00:01:14,980
a ride worth taking.

28
00:01:14,980 --> 00:01:17,340
So let's start off with a little definition.

29
00:01:17,340 --> 00:01:19,420
What exactly is legacy code?

30
00:01:19,420 --> 00:01:22,900
Because a lot of you probably want to know what that is.

31
00:01:22,900 --> 00:01:26,420
Really, there's a lot of definitions

32
00:01:26,420 --> 00:01:28,500
floating around on the web.

33
00:01:28,500 --> 00:01:31,500
So let's start talking about what some of those definitions

34
00:01:31,500 --> 00:01:32,500
could be.

35
00:01:32,500 --> 00:01:35,660
It could be code without documentation.

36
00:01:35,660 --> 00:01:40,980
So here's an example of some random class.

37
00:01:40,980 --> 00:01:45,100
And we know that it has a build tree function and a query.

38
00:01:45,100 --> 00:01:47,180
But we don't exactly know what it does.

39
00:01:47,180 --> 00:01:49,260
We know it's called segment tree.

40
00:01:49,260 --> 00:01:52,100
That's not really helpful.

41
00:01:52,100 --> 00:01:56,900
Legacy code could also be code without test.

42
00:01:56,900 --> 00:01:59,740
So you probably see this a lot.

43
00:01:59,740 --> 00:02:05,340
If you've jumped into some legacy code,

44
00:02:05,340 --> 00:02:11,060
and there's no test, and you don't know what it does,

45
00:02:11,060 --> 00:02:14,100
that's kind of scary, right?

46
00:02:14,100 --> 00:02:19,340
Also, it could also be code that has poorly written test.

47
00:02:19,340 --> 00:02:22,220
So it's pretty hard to update the code.

48
00:02:22,220 --> 00:02:25,640
This is a terrible example of some tests

49
00:02:25,640 --> 00:02:28,620
that we wrote for this function to add numbers.

50
00:02:28,620 --> 00:02:31,500
And we're asserting a couple different things in here,

51
00:02:31,500 --> 00:02:33,940
have a couple different sub-functions we're calling.

52
00:02:33,940 --> 00:02:36,260
This really isn't a great example of a test.

53
00:02:36,260 --> 00:02:39,020
So this is going to be hard to modify in the future

54
00:02:39,020 --> 00:02:40,260
as we make changes to the code.

55
00:02:43,660 --> 00:02:48,380
Legacy code could also be code you're not familiar with.

56
00:02:48,380 --> 00:02:53,220
And often, legacy code is not your idea.

57
00:02:53,220 --> 00:02:55,700
Maybe you joined a new team, or you

58
00:02:55,700 --> 00:02:58,300
joined a new part of the company,

59
00:02:58,300 --> 00:03:00,700
and they just threw you on a project and said,

60
00:03:00,700 --> 00:03:01,860
here's the code base.

61
00:03:01,860 --> 00:03:03,300
Good luck.

62
00:03:03,300 --> 00:03:07,500
And you don't know what you're doing.

63
00:03:07,500 --> 00:03:09,740
Really, the best definition of legacy code

64
00:03:09,740 --> 00:03:16,620
is it's valuable code, which you're not comfortable changing.

65
00:03:16,620 --> 00:03:19,900
That's pretty scary.

66
00:03:19,900 --> 00:03:22,900
So we want to improve our code.

67
00:03:22,900 --> 00:03:26,500
However, we don't understand it.

68
00:03:26,500 --> 00:03:29,660
We don't want to break existing functionality.

69
00:03:29,660 --> 00:03:32,260
And really, we don't want to make things worse.

70
00:03:35,300 --> 00:03:38,160
So our plan.

71
00:03:38,160 --> 00:03:39,660
Basically, first, we're going to start

72
00:03:39,660 --> 00:03:43,700
with understanding the code we want to improve.

73
00:03:43,700 --> 00:03:46,280
And then we want to check that our understanding of the code

74
00:03:46,280 --> 00:03:48,240
matches what is expected.

75
00:03:48,240 --> 00:03:51,160
So we expect this code to perform in some way.

76
00:03:51,160 --> 00:03:56,160
And we want to actually verify that what we expect it to do

77
00:03:56,160 --> 00:03:58,720
matches reality.

78
00:03:58,720 --> 00:04:01,280
We're going to add some tests.

79
00:04:01,280 --> 00:04:03,040
We're going to make our changes.

80
00:04:03,040 --> 00:04:06,720
And then the most important step is

81
00:04:06,720 --> 00:04:08,960
let's communicate those changes effectively

82
00:04:08,960 --> 00:04:09,960
to others on our team.

83
00:04:12,960 --> 00:04:13,440
Great.

84
00:04:13,440 --> 00:04:16,000
So starting off with that first step, what can we do?

85
00:04:16,520 --> 00:04:18,440
We can increase code documentation.

86
00:04:18,440 --> 00:04:21,440
It's going to be really helpful to fellow developers.

87
00:04:21,440 --> 00:04:25,640
So some things we can do add some class doc strings, maybe.

88
00:04:25,640 --> 00:04:29,880
So to this indexer class, we added a small comment

89
00:04:29,880 --> 00:04:31,520
saying what this class does.

90
00:04:31,520 --> 00:04:34,240
It's a class that adds new documents to our index.

91
00:04:34,240 --> 00:04:37,240
We put some information about attributes.

92
00:04:37,240 --> 00:04:40,280
In this case, there's an attribute name

93
00:04:40,280 --> 00:04:43,320
that's a string that contains the name of the index.

94
00:04:43,320 --> 00:04:44,840
And then there's another attribute,

95
00:04:44,840 --> 00:04:47,480
which is .count takes an int.

96
00:04:47,480 --> 00:04:49,520
And this is the number of documents in index.

97
00:04:49,520 --> 00:04:52,520
And maybe there's a method on this, say, for example,

98
00:04:52,520 --> 00:04:55,960
index that takes index directory configuration.

99
00:04:55,960 --> 00:04:57,880
And this just creates a new index.

100
00:04:57,880 --> 00:04:59,720
So with this information, now someone

101
00:04:59,720 --> 00:05:02,600
knows exactly what this class does.

102
00:05:02,600 --> 00:05:05,320
This is very helpful.

103
00:05:05,320 --> 00:05:08,660
Another thing we can do is add function doc strings.

104
00:05:08,660 --> 00:05:11,440
So we can take each function, break it down,

105
00:05:11,440 --> 00:05:14,660
and say exactly what happens there.

106
00:05:14,660 --> 00:05:18,440
In this case, there's a function index.

107
00:05:18,440 --> 00:05:20,800
And this creates a new index for documents

108
00:05:20,800 --> 00:05:22,320
starting at a given directory.

109
00:05:22,320 --> 00:05:24,340
It takes a couple of parameters.

110
00:05:24,340 --> 00:05:27,480
And it returns an object of the newly created index.

111
00:05:27,480 --> 00:05:30,000
So now the person looking at this code

112
00:05:30,000 --> 00:05:31,520
knows exactly what this function does.

113
00:05:34,640 --> 00:05:38,040
We can add documentation to explain logic

114
00:05:38,040 --> 00:05:39,360
when it's not obvious.

115
00:05:39,360 --> 00:05:40,760
And by this, I mean you don't have

116
00:05:40,760 --> 00:05:45,960
to add documentation to every single line of code.

117
00:05:45,960 --> 00:05:48,760
In fact, that would probably take a very long time.

118
00:05:48,760 --> 00:05:50,760
You probably just want to explain

119
00:05:50,760 --> 00:05:54,040
sections of the code that aren't extremely, again,

120
00:05:54,040 --> 00:05:58,400
obvious at first glance to the person looking at it.

121
00:05:58,400 --> 00:06:02,000
So that first example from before at the beginning,

122
00:06:02,000 --> 00:06:04,320
I added a few doc comments in here

123
00:06:04,320 --> 00:06:06,000
to explain what it's doing.

124
00:06:06,000 --> 00:06:07,920
And now the person reading this code

125
00:06:07,920 --> 00:06:10,920
could more easily understand exactly what

126
00:06:10,920 --> 00:06:14,840
this function should be doing.

127
00:06:14,840 --> 00:06:19,440
Also, we want to explain mysterious variables.

128
00:06:19,440 --> 00:06:22,480
Because obviously, usually, you're

129
00:06:22,480 --> 00:06:25,720
going to run across variables.

130
00:06:25,720 --> 00:06:28,520
I mean, this is a very contrived example.

131
00:06:28,520 --> 00:06:31,280
What does x do?

132
00:06:31,280 --> 00:06:33,560
It's equal to a plus b times p.

133
00:06:33,560 --> 00:06:35,120
It's probably usually not that bad.

134
00:06:35,160 --> 00:06:40,080
But you get the idea is that you do want to explain.

135
00:06:40,080 --> 00:06:44,240
And I know this is one of the big programming.

136
00:06:44,240 --> 00:06:45,800
One of the hard things in programming

137
00:06:45,800 --> 00:06:50,280
is how to name variables correctly, that in caching.

138
00:06:50,280 --> 00:06:54,160
So the idea is you want to try to have some variable names that

139
00:06:54,160 --> 00:06:58,400
are pretty self-explanatory.

140
00:06:58,400 --> 00:06:58,900
Great.

141
00:06:58,900 --> 00:07:01,800
So now we're going to get to adding some tests.

142
00:07:02,360 --> 00:07:05,200
So when we're adding tests to legacy code,

143
00:07:05,200 --> 00:07:06,880
what we want to really start with doing

144
00:07:06,880 --> 00:07:10,800
is identifying seams in the code.

145
00:07:10,800 --> 00:07:13,880
And a seam is really just a place

146
00:07:13,880 --> 00:07:15,640
where you can alter behavior in your program

147
00:07:15,640 --> 00:07:18,080
without changing the code.

148
00:07:18,080 --> 00:07:21,160
This could be calling an external library.

149
00:07:21,160 --> 00:07:24,640
This could be calling an external API,

150
00:07:24,640 --> 00:07:26,480
a database in this example.

151
00:07:26,480 --> 00:07:34,920
So in this example, we have this class, production class.

152
00:07:34,920 --> 00:07:36,160
This is just an example.

153
00:07:36,160 --> 00:07:38,000
And there's a function database connector.

154
00:07:38,000 --> 00:07:40,420
It takes a database object, and we're calling this connect

155
00:07:40,420 --> 00:07:42,160
function on it.

156
00:07:42,160 --> 00:07:47,880
So we can easily just write a test around this section

157
00:07:47,880 --> 00:07:51,120
of code, because we can mock out that database object.

158
00:07:51,120 --> 00:07:55,240
And we can just do this very simply by creating a mock.

159
00:07:55,240 --> 00:07:57,480
If you were here for one of the previous tutorials,

160
00:07:57,480 --> 00:08:00,280
they did some more explanatory stuff

161
00:08:00,280 --> 00:08:03,360
on how to do unit testing and mocking in Python.

162
00:08:03,360 --> 00:08:07,240
So you can just create this mock.

163
00:08:07,240 --> 00:08:09,960
And in this case, we're just asserting that the connect

164
00:08:09,960 --> 00:08:13,160
function was called.

165
00:08:13,160 --> 00:08:15,440
So there's other examples of different seams

166
00:08:15,440 --> 00:08:19,640
that we can use in various different programming languages.

167
00:08:19,640 --> 00:08:21,880
We probably won't go into all of them in this talk,

168
00:08:21,880 --> 00:08:26,360
because some of them would deal with parts of other languages

169
00:08:26,360 --> 00:08:28,400
that wouldn't be a thing in Python.

170
00:08:28,400 --> 00:08:31,680
For example, pre-processing, linking,

171
00:08:31,680 --> 00:08:34,240
these are something you might see in another language

172
00:08:34,240 --> 00:08:38,640
like C++.

173
00:08:38,640 --> 00:08:41,400
But mostly in languages like Python

174
00:08:41,400 --> 00:08:42,800
and other object-oriented languages,

175
00:08:42,800 --> 00:08:45,280
you're going to have object seams.

176
00:08:45,280 --> 00:08:47,040
Here's another example of a seam.

177
00:08:47,040 --> 00:08:50,420
And this goes back to that first point that I was talking about.

178
00:08:50,460 --> 00:08:54,540
In this case, we have this shipping services functionality.

179
00:08:54,540 --> 00:08:57,700
Maybe it's an external API that we talk to.

180
00:08:57,700 --> 00:08:59,980
And we want to mock that out.

181
00:08:59,980 --> 00:09:03,460
And so in this example, we created a mock object

182
00:09:03,460 --> 00:09:05,900
for that shipping service.

183
00:09:05,900 --> 00:09:09,620
We're calculating the price.

184
00:09:09,620 --> 00:09:13,060
And we're going to set what the return value should be for that.

185
00:09:13,060 --> 00:09:16,740
And then we're going to assert what we expect that to return.

186
00:09:17,740 --> 00:09:22,140
So a few trade-offs to consider when using seams.

187
00:09:22,140 --> 00:09:25,260
Again, the pros to this, we're breaking this code

188
00:09:25,260 --> 00:09:31,340
into really smaller sections that are easier to test.

189
00:09:31,340 --> 00:09:34,540
And this just helps us get enough test in place,

190
00:09:34,540 --> 00:09:37,140
really, to support more aggressive changes.

191
00:09:37,140 --> 00:09:40,060
Because we want to make all these additional changes.

192
00:09:40,060 --> 00:09:45,060
But we need to just have some initial layer of code

193
00:09:45,740 --> 00:09:47,420
initial layer of tests in there.

194
00:09:47,420 --> 00:09:50,420
So we trust the section we're modifying.

195
00:09:50,420 --> 00:09:54,700
Some of the cons to using seams.

196
00:09:54,700 --> 00:09:59,580
These tests could be hard to maintain by others in the future.

197
00:09:59,580 --> 00:10:03,180
And sometimes you can create too many seams in your code.

198
00:10:03,180 --> 00:10:05,300
So it becomes very fragmented.

199
00:10:05,300 --> 00:10:09,020
And so this is something you're going to have to think about

200
00:10:09,020 --> 00:10:13,500
when you're dealing with large chunks of legacy code.

201
00:10:13,540 --> 00:10:16,660
And sometimes you just maybe need to refactor

202
00:10:16,660 --> 00:10:19,940
and kind of like do it from scratch a little bit.

203
00:10:19,940 --> 00:10:21,460
Obviously, that's not something you want to do.

204
00:10:21,460 --> 00:10:24,500
But when you're using the seams model,

205
00:10:24,500 --> 00:10:26,500
this is something that could happen.

206
00:10:29,860 --> 00:10:35,260
So with legacy code, it's hard to understand in many cases.

207
00:10:35,260 --> 00:10:36,980
And to understand it more easily,

208
00:10:36,980 --> 00:10:39,580
we can use a characterization test.

209
00:10:39,580 --> 00:10:41,740
These are also called golden master test.

210
00:10:43,660 --> 00:10:46,020
With this type of test, basically what you're doing

211
00:10:46,020 --> 00:10:48,300
is just writing a test that exercises

212
00:10:48,300 --> 00:10:49,420
the code you want to test.

213
00:10:49,420 --> 00:10:53,300
And you're comparing the output to the golden master output.

214
00:10:53,300 --> 00:10:57,740
In this example, that function add numbers.

215
00:10:57,740 --> 00:10:59,340
We're writing a test for it.

216
00:10:59,340 --> 00:11:01,060
And we're adding two numbers together.

217
00:11:01,060 --> 00:11:05,340
And we expect five and five when added together to return 10.

218
00:11:05,340 --> 00:11:07,700
And so we're really just checking the output of that.

219
00:11:07,700 --> 00:11:10,100
Something we know it's going to produce.

220
00:11:10,100 --> 00:11:11,340
And we put that in our test.

221
00:11:14,100 --> 00:11:17,620
So great, unit test.

222
00:11:17,620 --> 00:11:21,940
However, many times you get the answer from someone else,

223
00:11:21,940 --> 00:11:23,940
maybe on your team, or for someone else

224
00:11:23,940 --> 00:11:25,980
higher up in management that says,

225
00:11:25,980 --> 00:11:28,500
we just don't have time to write all these tests.

226
00:11:28,500 --> 00:11:31,860
Not the answer you want to hear, but it does happen sometimes.

227
00:11:31,860 --> 00:11:35,820
So I have a couple of examples of things

228
00:11:35,820 --> 00:11:38,460
you can do when that is the case.

229
00:11:38,460 --> 00:11:43,300
You can use two different models, the sprout and the wrap.

230
00:11:43,420 --> 00:11:46,540
So for the sprout, we're going to start

231
00:11:46,540 --> 00:11:49,540
by creating the code elsewhere.

232
00:11:49,540 --> 00:11:52,620
And then we're going to unit test just that section

233
00:11:52,620 --> 00:11:54,740
of the code.

234
00:11:54,740 --> 00:11:56,540
And then identify where you should

235
00:11:56,540 --> 00:11:59,140
call the new code from the existing code.

236
00:11:59,140 --> 00:12:02,060
And then call that new code from the legacy code.

237
00:12:02,060 --> 00:12:06,820
So here's an example of this diaries update class.

238
00:12:06,820 --> 00:12:09,220
And we have this new functionality

239
00:12:09,220 --> 00:12:12,580
we want to add to dedupe these entries.

240
00:12:12,580 --> 00:12:16,420
And so we can write a unit test just around that one function.

241
00:12:16,420 --> 00:12:18,100
And then we're basically just going

242
00:12:18,100 --> 00:12:20,580
to call that function from our existing function,

243
00:12:20,580 --> 00:12:23,020
in this case, add entries.

244
00:12:23,020 --> 00:12:25,060
And this is great because we've just isolated

245
00:12:25,060 --> 00:12:27,300
that one functionality of the code,

246
00:12:27,300 --> 00:12:29,780
and we don't have to worry about the rest of the code.

247
00:12:29,780 --> 00:12:34,340
So we definitely trust that new functionality we added.

248
00:12:34,340 --> 00:12:37,620
In the wrap case, we're basically

249
00:12:37,620 --> 00:12:41,980
just going to rename the old function that we'll be wrapping.

250
00:12:41,980 --> 00:12:43,700
And then we're going to create a new function

251
00:12:43,700 --> 00:12:47,660
with the same name and signature as the old function.

252
00:12:47,660 --> 00:12:50,540
So a similar example of add entries.

253
00:12:50,540 --> 00:12:54,780
We're going to create this new function, add deduped entries.

254
00:12:54,780 --> 00:12:56,540
And then we're just going to call that

255
00:12:56,540 --> 00:13:00,660
from our existing function, and add the new functionality,

256
00:13:00,660 --> 00:13:04,620
and add unit tests around that.

257
00:13:04,620 --> 00:13:06,520
Great, so once you made all your changes,

258
00:13:06,520 --> 00:13:08,900
you can share those with the other on your team, everyone

259
00:13:08,900 --> 00:13:12,460
team, and everyone wins.

260
00:13:12,460 --> 00:13:13,620
And that's it.

261
00:13:13,620 --> 00:13:25,820
All right, let's see if we have any questions.

262
00:13:25,820 --> 00:13:26,820
Yes, we do.

263
00:13:26,820 --> 00:13:27,500
Excellent.

264
00:13:27,500 --> 00:13:29,300
Sorry, I was waiting for it to refresh.

265
00:13:29,300 --> 00:13:32,740
So let's start with, do you have any advice

266
00:13:32,740 --> 00:13:34,420
for how we can convince management

267
00:13:34,420 --> 00:13:38,100
to allocate time and resources for managing legacy code

268
00:13:38,100 --> 00:13:39,940
for technical debt?

269
00:13:39,940 --> 00:13:43,500
Wow, if I knew the answer to that,

270
00:13:43,500 --> 00:13:46,460
I probably should get paid a lot more money.

271
00:13:46,460 --> 00:13:49,100
No, seriously though, I think you really

272
00:13:49,100 --> 00:13:52,340
should make a really good pitch to management.

273
00:13:52,340 --> 00:13:57,060
And it's hard to say, hey, we need time

274
00:13:57,060 --> 00:14:02,140
to add these tests for the legacy code.

275
00:14:02,140 --> 00:14:04,900
But the easiest way, I think, to paint it to them,

276
00:14:04,900 --> 00:14:07,500
because I've done this myself, is say, look,

277
00:14:07,500 --> 00:14:10,980
how many incidents do you want this year?

278
00:14:10,980 --> 00:14:15,100
And guarantee their answer is going to be like none.

279
00:14:15,100 --> 00:14:17,300
And so, hey, if you don't want those incidents,

280
00:14:17,300 --> 00:14:20,460
we're going to have to add some tests so we trust the code.

281
00:14:20,460 --> 00:14:22,620
Yeah, it's one of those things you either pay upfront

282
00:14:22,620 --> 00:14:26,660
when it's easier or pay later when it's an emergency.

283
00:14:26,660 --> 00:14:28,120
Do you have a resource you recommend

284
00:14:28,120 --> 00:14:31,620
for writing good doc strings?

285
00:14:31,620 --> 00:14:36,220
The Python docs are great for looking at that.

286
00:14:36,220 --> 00:14:38,220
That's my biggest hint for that.

287
00:14:38,220 --> 00:14:39,620
One other thing I will say, if you

288
00:14:39,620 --> 00:14:42,820
want to know more about legacy code,

289
00:14:42,820 --> 00:14:45,100
there is a really great book on this,

290
00:14:45,100 --> 00:14:47,180
specifically about legacy code.

291
00:14:47,180 --> 00:14:48,680
I don't have a link to this, but I'll

292
00:14:48,680 --> 00:14:51,580
drop it in the Discord channel.

293
00:14:51,580 --> 00:14:53,660
The next question I think might touch on this.

294
00:14:53,660 --> 00:14:57,020
Working Effectively with Legacy Code by Michael Feathers

295
00:14:57,020 --> 00:14:59,100
is one book on the topic.

296
00:14:59,100 --> 00:15:01,940
Do you know any other books or resources you'd want to recommend?

297
00:15:01,940 --> 00:15:04,140
Yeah, there's another book that I could recommend, too.

298
00:15:04,140 --> 00:15:05,100
I'll drop that in there.

299
00:15:05,100 --> 00:15:06,820
OK, awesome.

300
00:15:06,820 --> 00:15:08,620
How do you suggest testing legacy code, which

301
00:15:08,620 --> 00:15:11,940
is heavily reliant on database records in production?

302
00:15:17,660 --> 00:15:23,940
Yeah, mocking stuff that's dealing with production data

303
00:15:23,940 --> 00:15:25,860
is always really tricky.

304
00:15:25,860 --> 00:15:29,580
I think you want to try to get it as close as you can

305
00:15:29,580 --> 00:15:34,660
to what would be in production without having to actually use

306
00:15:34,660 --> 00:15:36,900
production data.

307
00:15:36,900 --> 00:15:37,620
It's hard.

308
00:15:37,620 --> 00:15:39,780
Yeah.

309
00:15:39,780 --> 00:15:42,740
Do you think that even extremely well-documented code

310
00:15:42,740 --> 00:15:44,500
can become legacy code?

311
00:15:44,500 --> 00:15:46,380
Definitely.

312
00:15:46,380 --> 00:15:51,220
And by this, I mean that even if it's really well-documented,

313
00:15:51,220 --> 00:15:55,460
sometimes those document notes that are added aren't the best.

314
00:15:55,460 --> 00:15:57,260
And so maybe it might even be another step

315
00:15:57,260 --> 00:16:02,340
of going in there and making that documentation

316
00:16:02,340 --> 00:16:05,180
or those comments better, if possible.

317
00:16:05,180 --> 00:16:05,680
OK.

318
00:16:09,100 --> 00:16:10,940
Do you have any tools to recommend

319
00:16:10,940 --> 00:16:13,580
or that you like that would auto-generate basic doc

320
00:16:13,580 --> 00:16:16,780
string from a template for all the methods and classes, which

321
00:16:16,780 --> 00:16:20,500
you can then go in and update and fill out?

322
00:16:20,500 --> 00:16:22,740
Yeah, I think there's some really great tools

323
00:16:22,740 --> 00:16:24,140
for doing that.

324
00:16:24,140 --> 00:16:26,620
Can't think of them off the top of my head.

325
00:16:26,620 --> 00:16:27,340
Yeah, I was trying to pull.

326
00:16:27,340 --> 00:16:29,020
I know I've used one before, and I can't.

327
00:16:29,020 --> 00:16:31,980
But yeah, I feel like there's one I've used before.

328
00:16:31,980 --> 00:16:33,780
If I think of it, I'll drop in the chat.

329
00:16:33,780 --> 00:16:34,580
I know they exist.

330
00:16:34,580 --> 00:16:35,220
That's a start.

331
00:16:35,220 --> 00:16:37,820
Yeah, they definitely exist.

332
00:16:37,820 --> 00:16:40,300
When writing unit tests, is it better to mock the database

333
00:16:40,300 --> 00:16:44,500
or actually create records to test your queries?

334
00:16:44,500 --> 00:16:51,020
I always prefer to create the records using the mock

335
00:16:51,020 --> 00:16:53,540
and then test it that way.

336
00:16:53,540 --> 00:16:57,340
Just using an ephemeral database?

337
00:16:57,340 --> 00:17:01,260
I've done it with an ephemeral database before,

338
00:17:01,300 --> 00:17:04,500
but there's libraries you can use

339
00:17:04,500 --> 00:17:08,780
that will create records in this temporal database,

340
00:17:08,780 --> 00:17:10,740
and then you can query against that.

341
00:17:10,740 --> 00:17:12,820
Yeah, OK.

342
00:17:12,820 --> 00:17:17,620
Thoughts on type annotations for documenting legacy code?

343
00:17:17,620 --> 00:17:19,540
I think type annotations are always great

344
00:17:19,540 --> 00:17:21,700
for dealing with legacy code.

345
00:17:21,700 --> 00:17:23,700
I know that's a more recent thing to Python.

346
00:17:23,700 --> 00:17:27,660
So if you see some legacy code, definitely add that.

347
00:17:27,660 --> 00:17:28,420
Awesome.

348
00:17:28,420 --> 00:17:30,380
All right, that is all our questions.

349
00:17:30,380 --> 00:17:31,540
Thanks, Joe Cabrera.

350
00:17:31,540 --> 00:17:33,300
Appreciate it.

